what's going on everybody it's bro here hope you're doing well then in this video we're going to be discussing the print f function in C++ let's get into it before we begin this lesson just so you know this lesson is optional we won't really be using the printf function too much but it's something you might want to consider for your own future programs so let's begin all the printf function is is that it acts as a control for displaying our output a certain way for example this might be useful for maybe some sort of cash register program and if you add a bunch of numbers together or use a coupon you might get a result like one hundred dollars and twenty five point five cents so when you display this number you probably don't want three decimal places because well that doesn't really work for currency so we can use the printf function to truncate the last decimal or only display two decimal places when we produce output otherwise if we're working with columns of data we can do things like line up all of our columns together and add a certain amount of spaces before our information is displayed so this could be useful if you're displaying like tabular data or columns of data too so we can do unique things like this involving the printf function so let's practice by creating some variables related to cars well because I like cars so let's create a few variables so maybe it will make a make that's a string a model an integer named here a double value named price and we need a char value so perhaps maybe a variable named for sale so if you have your own favorite car in mind feel free to assign some of these variables with your favorite car I will assign some of these variables with my favorite cars so come up with your own or copy me doesn't matter so for the make it's going to be Ford the model is going to be Mustang the year is going to be 2021 the price I'll make sure that this is not within quotes all right we're good then nine thousand nine hundred ninety nine dollars and zero zero zero cents and for sale this is a single character so we could put like Y for yes or n for no it doesn't necessarily have to be those two but I guess that would make sense all right so let's use the printf function to display some of this information so to use the printf function all you do is type in print F then you need a set of parentheses and let's add a semicolon to the end before I forget now we can add a format string within the parentheses so perhaps I will say your car is made by alright now we can insert a value or variable and we're going to insert it wherever we place a % so this begins the format specifier and we can add a value or variable that we want to display but we have to separate it with a comma then we're going to put our value or variable here so to begin we're just going to display the word Ford not the variable just the string literal all right so now with this format specifier this % will begin this and this variable or value will be inserted right where this % is and there's a certain combination of values and characters we can add after this % and each of these is going to have a particular effect on how our output is displayed so here's a chart that I made let's take a look all right well here's a little cheat sheet that I made so we begin the format specifier with a % and at the end we need to list the datatype of what value or variable that we want to display so there's going to be a certain character we're going to add here to display certain information for example if we want to display a string we're going to put us here and if we're going to display a character this would be C and there's a few others and we'll cover those in just a moment so there's other optional fields that we can add that will edit the width the precision the length and there's certain flags too and we'll cover those in just a moment so to begin let's cover just the different format specifiers we can use for data types and then once we get the hang of that we'll cover flags with precision and length let's head back to our program so if we want to display a string literal where this format specifier is after the percent sign we just type in the letter s to display a string let's see what this looks like when we run it okay your car is made by Ford let's try another example so what I'm going to do is just see out en DL to move down to the next line you could put backslash n for new line but I don't want things to get too complicated in this area so I'm just going to add a new line after our printf function so what would happen if we did the same exact thing but instead of a string literal we used a string variable so this is what the result is going to be and I'm just going to copy and paste this but we're going to change this string literal to a variable so we can use the variable make and pay attention to see what happens here all right so our car is made by Ford and this time we used a string variable and we actually got an unexpected result and let's run this one more time and this should actually change again here's the problem with string variables and the printf function so the printf function was designed to work with the C language but it doesn't have the builtin data type of string and if you were to use this you would get an unexpected result so one trick that I found is that there's a way around this if you want to display a string variable in your printf function in place of a string literal this is what you can do after the string variable just type in dot C underscore then use the STR function so you need a set of parentheses here so what this does is that it returns a pointer to an array contains a nullterminated sequence of characters representing the current value of the string object so basically what that means is that this function will return whatever value is at this variable so these should work the same now if we were to run this so your car is made by Ford your car is made by Ford so just keep that in mind if you're using the printf function to display a string variable you'll want to use this function after the variable name otherwise if you're using a string literal you could just type that here another trick is that with the printf format string you can add multiple format specifiers if you want to include multiple values or variables so let's display the make and the model in one single string so printf your car is a maybe a colon alright so we want to display the make and the model but let's display the string literals first and then in the next example we'll do the variables so we want to display the make so % s because it's a string now we also want to display the model so we can add a another format specifier here and we'll display another string so % s now after the format string we're going to add two values so the first one it needs to be separated with a comma we're just going to type in a string literal Ford now we need a another string to add so we're going to add another comma and then type in our model which is Mustang and then let's add a semicolon at the end ok so then this will display two strings so we can add multiple format specifiers to a single formatted string so your car is a Ford Mustang so with these format specifiers it's as if we're inserting this value or variable wherever this format specifier is located and it's an order so the first format specifier is going to be assigned with the first value and the second one is going to be assigned with the second value so on and so forth in that pattern so if we had three format specifiers we would need a third value or variable here so let's try the same thing but we're going to assign the string variables in place of these so I'm just going to move down to the next line by saying C out en DL and let's try the same thing but we're going to use the variables this time so print F your car is a colon space we need the first format specifier so % s and the second so % s again so we want the make first so make dot C underscore STR then a set of parentheses now we want the model so model dot C underscore STR and a set of parentheses and I am missing a semicolon at the end all right let's run this to see if it works your car is a Ford Mustang your car is a Ford Mustang alright so I think we got string format specifiers down then so and before we move on to the next example I'm just going to move down to the next line and I think I'm going to make this a little more organized so I'm just going to line these up okay that should be good let's display the year which is an integer variable so print F then we need a format string the year is so if we want to include a integer variable we need to use the % format specifier then we're going to put the letter D here and then we'll need to insert a comma then the value or variable so if you're inserting an integer variable a double variable or a character variable basically anything but a string you actually don't need to use this function because with the C programming language these string variables really aren't compatible with the printf function but if you're using a primitive data type like a integer a floatingpoint number or HR value you don't need to use this function so we could just use this variable and this would work just fine then so the year is % decimal the year is 2021 so I'm going to move down to the next line just by typing C out en dl let's display the price so printf the price is if we want to display a double or floatingpoint number we're going to put % F for floatingpoint number comma then our price variable C out en DL not necessary but I want to move down to the next line after this there alright so if we want to display a double variable or a floatingpoint number we just use % F or floatingpoint number so the price is $9,999 point zero zero zero zero zero zero zero so we're actually going to be formatting this fairly soon now if you want to include a char value it's gonna be a similar process so print F then a formatted string is it for sale % seat to display a char value then a comma then the variable will go here so for underscore sale see out Ian deal okay is it for sale yes so remember that if you're using a primitive data type or variable when using the printf function you don't need to use this C underscore STR function but if you're using a string variable here for your printf function then you would need to use this to return whatever value is located at this variable well I think we have the different datatypes down with using the printf function let's cover a few of the flags the width fields and the precision fields that we can use to format our output for the next example let's try and display the price but we're going to limit the amount of decimal places that are displayed because that would accurately reflect a price instead of three decimal portions so if we want to display a floatingpoint number or a double number of some sort we'll use the percent F format specifier so the price is so normally we would type in percent F then a comma then our price however if we want to limit the amount of decimal places that are displayed we're going to type this after the percent sign but before the F dot to limit this to two decimal places so let's see what this looks like right now yeah the price is $9,999 zero point zero zero so zero cents but you know what I think I want a dollar sign so I'm going to add that before the format specifier so let's try that now yep 9999 dollars and zero cents alright now we can have our output be preceded with blank spaces kind of like we're hitting tab so what we're going to type is print F and maybe I'll just add a note this time this precedes with blank spaces and maybe we'll display a string so percent s and let's add a string literal like whatever the make of the car was and that was port then see out en deal alright so we can specify or allocate a certain amount of space to actually display whatever value is here let's say that we want to give our string our formatted string ten spaces to work with and actually display this information where our format specifier is so after the percent sign but before the datatype we're going to type in however much space we want to give this value to display so we could say maybe ton we can pick a different amount too so what happens is that if we were to run this we would actually have all of this blank space before displaying our value but let's count how many spaces out here so we have 1 2 3 4 5 6 and we actually don't apparently have ton that's because we're actually including the space that the value takes up to so altogether we would have 1 2 3 4 5 6 7 8 9 10 so you're basically giving or assigning room to actually display your value so this would be really useful if you're displaying like a column of information and you want things to be lined up naturally so that would be a good use to proceed some information with some blank spaces and you can have your value be preceded with zeros so what I'm going to do is just copy this and we're going to make one change so after the % in the format specifier but before the amount of space we want to have this proceed with we're just going to put 0 and I'm just going to change this string here this proceeds with zeros all right yep here's all of the zeros and we should still have 10 spaces of room assigned to displaying this value so 1 2 3 4 5 6 7 8 9 10 I think lastly for this video I'm just going to show you guys one flag that you can use to left justify any value within any space allocated using the printf function so what I'm going to do is just copy this line that says this proceeds with blank spaces and we're just going to make one minor change so if we want to left justify this value because normally it is right justified so any extra space is assigned before the actual value that's displayed if we want to left justify it we're just going to add a minus sign so % minus the amount of room that we want to give this value to display and then the data type of the value so this we should probably change this message maybe we'll just type in left justify all right so let's see what this looks like right now so it says left justify then the make of our car but we have all this blank space after but we can't really see it right now so let's add a another format specifier to display after this I'm just going to copy this so we're just going to add % minus 10s and then we'll add a make or a model for the car so we'll just add Mustang so let's try this again so it should be a parrot now yeah that's fairly clear so now we have 10 spaces to work with 1 2 3 4 5 6 7 8 9 10 and the value is now left justified within the space that we gave to display our value and the same thing is going to be with the other string that we assigned here as well but it's not as apparent here but just pretend that all this room is here well that's the basics of the printf function I do apologize for this long video this was a fairly difficult topic to cover but if you would like to learn more I'll include a link in the description for the C++ website where you can learn more information about this there's still more flags and different values you can add to your format specifier for different effects but these are just a few of the basics and I'll include all of this code in the comments down below and pin it to the top if you would like a copy for yourself but yeah those are the basics of the printf function in C++ hey you if you enjoyed this lesson then you can help me help you in 3 easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro