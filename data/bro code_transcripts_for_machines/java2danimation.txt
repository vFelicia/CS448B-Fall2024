hey how's it going everybody it's bro here hope you're doing well and in this video i'm going to teach you guys how we can create some very simple 2d animations in java so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running let's get started people so with this video we're only going to be moving an image around on the xaxis and the yaxis we're just going to be covering some very simple animations by use of a timer so it's not going to be anything that sophisticated now before we begin here's my setup that i have i have three classes a class called main a class called my frame that extends jframe and a class called my panel which extends jpanel within the main class i have an instance of my frame within my frame i have an instance of my panel called panel and within the constructor for my frame i instantiated this panel for this my frame i have this dot set default close operation jframe exit on close we're going to add this panel to the frame and we're going to be painting on the panel itself followed by this dot pack this dot set location relative to null this will allow the frame to appear in the middle of your computer screen and lastly this dot set visible is set to true we're going to be finishing everything else within this my panel class so we have a constructor from my panel we're going to declare a few things outside of this constructor so let's begin with the panel width and the panel height because we'll want to know what the limitations are of the image that we're moving we'll want to know the balance that we have so i'm actually going to make this a final integer for the width and the height so let's say final and panel underscore width and let's set this to 500 and we'll do the same thing for height panel height and we'll make this 500 as well so this will be a square so we're going to need an image image we'll call this image actually better yet let's call this enemy because i'm going to be moving this enemy icon around within the panel so let's call this enemy instead just so it's easier to differentiate i'm also going to use the space background as my background so i'm going to make an image called image background image and we'll do this last oh that's all one word though we're going to need a timer so timer timer int x velocity so we can adjust how far or how many pixels this image is moving on the xaxis let's set this to one to begin with and we'll do the same thing for y velocity and we'll have a starting x position and we'll set this to zero and the same thing with y int y and that should be it for now now within the constructor we're going to finish instantiating a few things let's begin by setting the size of this panel since we're using the pack function we'll want to set preferred size so this dot set preferred size and we pass in a new dimension and we can use a panel width and panel height for that so let's pass in panel width and panel height and this should appear yep here's our panel that's added to our frame and we're going to be drawing on this panel so the next thing that we should do let's set the background color just because we can this dot set background color eventually if you have an image we'll replace the background color with the image that you have if you have one let's set this to color dot black and let's finish instantiating this image and it's called enemy enemy equals image icon and then we list the file path or the file name and this is enemy dot png and then to create an image we're going to method chain this by adding dot get image this will make an image out of our image icon now we need to create a timer we haven't done that for a while so we'll finish instantiating this timer timer equals new timer and there are two arguments to pass in for a timer so we need an integer for the delay of how often this timer fires and does something as well as an action listener so let's say we want this to perform an action every one second so this is in milliseconds the delay so we'll perform an action every 1000 milliseconds one second we also need an action listener so we'll have this jpanel implements action listener there are better ways of doing this but since we're beginners right now that will be in future videos so we'll need to add any unimplemented methods and we have an action performed method we'll return to our action performed method later we need to define our paint method and the paint method is called behind the scenes when we instantiate our panel because our jpanel is a subclass of the component class so let's say public void paint and this has one parameter of graphics graphics g and the first thing we're going to do within this paint method is cast our graphics g object as a 2d graphic because there's more options available to us with graphics 2d objects so graphics 2d we'll call this g2d equals g and then we need to cast this graphics to d and if we want to draw any graphics we type in g2d dot and then drop fill whatever you want we want draw image because we want to draw our enemy image and there are a few different images that take various amounts of arguments so let's stick with this one for now this takes an image some coordinates and then an observer so with the observer we have not covered those yet so we're going to set this to null and we have to set an x and y position luckily we already declared what we want these to be x is zero and y is zero so we can keep these the same and this image is called enemy so this will draw our enemy on our panel and right now it's in the top left corner so notice that with this background we set this to black now to actually paint the background we need to use the paint method of the parent class also known as the super class so before we actually cast this graphic we're going to call super dot paint and we pass in our graphics g so this will paint the background for us and you can see that it's black so this will paint background well we have our image drawn but how do we get this image to move let's say we want to move this image on the xaxis across the screen well we can use our timer to help us do that so after every 1000 milliseconds one second it's going to perform our action performed method now with our timer when we instantiate it we need a delay which we have and an action listener since we're implementing the action listener interface we can pass in this and then we need to start this timer by saying timer dot start so this will start our timer right when we instantiate this panel so after every one second we can perform some sort of action anything within the action performed method will occur so let's move the coordinates of our enemy that we have so we have x equals zero and y equals zero let's say we want to move our image on the x axis so we'll say within the action performed method x equals x plus our x velocity for our enemy now when we run this pay attention it doesn't appear to move but it actually is behind the scenes i'm going to resize this window slightly and you'll see that our image just jumped that's because we are not currently repainting our window that we have our panel so we need to actually call this paint method again every time we update the position of our enemy or any components that it contains and let's look at this paint method according to the description it says that applications should not invoke paint directly but should instead use the repaint method to schedule the component for redrawing what we're trying to do is that after we update the position of our enemy we're attempting to call paint again to redraw the enemy in its new position however we instead need to use repaint according to the description repaint in a roundabout indirect way will call paint for us to redraw all of the graphics that we have so now this will actually repaint our enemy without us having to resize the window because when you resize the window it will repaint everything but now it just does it for us okay now this enemy is moving very slowly so let's have our action performed method be called every 100 milliseconds instead of every 1000 milliseconds so the position of our enemy is updating every 100 milliseconds but why stop there let's set this to maybe 10. that should be a decent speed so after every 10 milliseconds this enemy is moving on the xaxis by one pixel however it's not going to stop it'll just keep on going into the void so we'll want to set some bounds let's say that when this enemy touches the right border we want it to go left instead of continuing right so we'll write an if statement within the action performed method to check to see if x is greater than or equal to our panel width so we'll write that first if x is greater than or equal to our panel width and we declared that up here and it's 500 if it is we want to change direction and one way in which we can do that is to flip the x velocity so currently it's a positive number but if we were to set this to a negative number it's going to go in the opposite direction so we can say x velocity equals x velocity times negative one so when we want this to change direction it's going to multiply whatever x velocity is times negative one so one times negative one equals negative one and then when we run this we'll have to give it a second to reach the border it's going to eventually go to the left however it measures where this enemy is located in the top left corner so we'll want to take that into account we're going to add one thing after panel with panel with minus enemy dot get width and then if we have an image observer we pass that in but we don't have one so we're going to set this to null so we're checking to see if x is greater than or equal to panel width minus the width of the enemy image that we have and now once this enemy touches the right border it's going to flip direction which it just did however now it's going to continue into the void on the left hand side so we'll also need to check to see if our enemy is going to touch the left border and we can do that using an or operator so if x is greater than or equal to panel underscore with minus enemy.get width or x is less than zero then we're going to flip our velocity and now it should just go back and forth forever and let's test it man i hate awkward silences all right so yeah it's just going back and forth forever so when it reaches one of the borders it's going to flip the velocity to either a positive number or a negative number now let's do the same thing with the yaxis so this will go up and down it's kind of the same process that we have before i'm just going to turn all of this into a comment and then copy and paste it so make sure to write this before the repaint method that we have replace all instances of x with y make sure to do the same for the y velocity as well x velocity and y velocity and y equals y plus y velocity replace with with height do the same thing for get with as well okay that should be good and this will just go up and down forever but let's check just to be sure all right we're good and then if you were to mix these two this will now go diagonal right across the screen and when it hits the corner it's going to bounce back and you always have the option of messing with the x velocity and the y velocity let's set x velocity to 2 and this will now travel in a different direction and bounce off the borders let's finish this video by adding a background image because right now it's just a plain black background so i'm going to use this image that i downloaded of space but feel free to use any image that you want to use so this is within my project folder and it is called space.png i have already declared an image that i'm calling background image and i'm going to finish instantiating this within the constructor background image equals new image icon and within the constructor for the image icon we list the file path or the file name since this file is within my project folder i can list just the file name space dot png i want to create an image out of this i'm going to method chain by adding dot get image to the end of this and now i can use my background image as an actual image and not just an image icon i want to draw this image before i draw the enemy and i'm going to copy this line and make a few changes i'm going to draw the background image and i'm going to place the coordinates for this image in the top left corner so that is where x is 0 and y is 0 and we do not have an image observer so we're going to leave this as null and now for the moment of truth the background image that i have is now applied to the background of my graphic so that's the basics of creating some very simple animations in java if you want a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of simple animations in java hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you