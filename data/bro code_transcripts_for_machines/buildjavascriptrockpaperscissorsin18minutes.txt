hey what's going on everybody in today's video we're going to create a game of rock paper scissors using JavaScript so sit back relax and enjoy the show all right let's do this thing we're going to create an H1 heading with text of rock paper scissors for a title we'll create three buttons the first one will be for rock you can add some text of rock but you know what I like using emojis I'm going to use an emoji instead I would like an emoji of a fist and I'm going to zoom in until we add some CSS let's create a button for paper that'll work and scissors maybe a p sign with each of these buttons I will set the onclick event handler equal to a JavaScript function we'll name the function play game now with these functions we're going to to pass in an argument the first will be a string of rock now if you use double quotes HTML is going to be confused where this event handler ends our argument is going to be a string but it's going to be within single quotes because we're already using double quotes let's copy this attribute because I don't feel like typing it again the second argument will be for a string of paper and then scissors let's enclose our buttons within a div element this div element will have an ID of choices let's cut our buttons and paste them within the div element outside of the div element we'll create another div element we will display the Player's Choice player colon space the ID of this development will be player display this will display the word Rock paper or scissors depending on which button we pick let's do this for a computer text will be computer ID computer display we should display a result who won the ID will be result display just for some temporary text I'm going to add it's a tie when we style this with CSS I would like to be able to see the updates we'll get rid of this pretty soon eventually we'll add in a score tracker but we'll do that after our game is at least working okay let's head to our CSS stylesheet I'm going to zoom back to 100% let's select the body of our document I will set the font family to be aiel with the backup of s serif let's set the font weight to be bold throughout this application I will set any margin to be zero around the body use flex boox to display the elements display Flex the flex direction will be a column and align items Center let's select our H1 element I need to increase the font size font size 3.5 RM for a color pick a color for me I'll set the lightness to 20% now we're going to select our development of choices actually let's make this a class class choices select the class of choices add margin bottom of 30 pixels within this development we need to select all the buttons we will select the class of choices select all buttons within this class we'll increase the font size to 7.5 RM these buttons need to be big I will set a minimum width of 160 pixels add a little bit of margin between each button zero pixels on the top and bottom 10 pixels on the sides for the buttons I would like rounded Corners I would like these buttons to be a circle I can set the Border radius to something massive like 250 pixels that will give us some rounded buttons and pick a background color background color I want something blue I've already prepicked a color so I'm going to use this now when I hover my cursor over one of the buttons I would like my cursor to change into a pointer and that does work let's also add a transition effect let's change the background color to e is after half a second let's access the hovers class of all the buttons of choices take the background color I'll set the lightness to be 20% lighter each button is going to light up when you hover your cursor over the button then we'll work on the displays next we're going to select the player display and the computer display these are ideas player display and computer display let's set the font size to be 2.5 RM and for the result display where it says it's a tie that's the ID of result display set the font size to be 5 RM and I'll add some margin to the top and bottom 30 pixels to the top and bottom zero on the sides okay that is good enough for now so we no longer need this placeholder for the result display let's add some functionality we have a lot of constants to declare const choices choices will be an array of strings we'll have rock paper and scissors we need to get the player display and the computer display so we can update them const player display equals document. get element by ID the ID that I'm selecting is player display then we have computer display computer display and result display this one it's empty currently const result display equals document. getet element by ID result display we'll factor in scoring later we need a function of play game that accepts one argument the Player's Choice function play game we have one parameter player choice when we play a new game we have to pick a choice for the computer between rock paper or scissors what we could do is generate a random number between zero and two rock is is index zero paper is index one scissors is index 2 we'll create a constant within play game of computer Choice I'm declaring it within the function so we can update it every time we play a new game equals take our array of choices at index for the index we'll generate that random number using the random method of math math. random method * 3 then we need to round it because it's not going to be a whole number math. floor to round it down so the computer's choice will be a random index between 0o through two which will give us randomly either rock paper or scissors hey this is bro from the future one thing that would be good for us to do is along the way use console.log just to be sure that what we've been writing has been working so within our computer's Choice let's console.log whatever that is so if this does work after clicking one of these buttons the computer is either going to pick rock paper or scissors the computer picked scissors just now scissors scissors it really likes scissors apparently so yeah the players choice is being populated with the string of rock paper or scissors I just wanted to confirm that and we need a result what are we going to display to the screen result will be an empty string for now first let's check to see if the Player's Choice is equal to the computer's choice that means it's a tie if Player's Choice is strictly equal to the computer's Choice maybe we both pick rock well then we'll take our result to be displayed and set it equal to be it's a tie else somebody is going to win let's add an else statement we can use a switch which we can examine a value against matching cases we'll examine the Player's Choice does the Player's Choice match the case of rock do these two values match if so we'll use the tary operator we'll check the condition of if our computer's choice is strictly equal to scissors if so question mark That's the trary operator if we pick Rock and the computer pick scissors we will return you win otherwise if this condition is false well that means the computer picked paper if our choices already don't match and we picked rock that means they either picked scissors or paper if they didn't pick scissors that means they picked paper so they win that means we lose you lose whatever string is returned we're going to assign it to result result equals whatever is returned either you win or you lose then we should add a break after this case all right let's copy this case and everything within it let's paste it if the Player's Choice matches the case of paper and the computer's choice is strictly equal to R that means if that's true you win else you lose let's copy this case and everything within it case scissors if the computer's Choice equals paper then you win otherwise you lose after we move beyond the IFL statements we need to update the text on the screen so we will take the players display set the text content to equal a template string of player colon space add a placeholder the Player's Choice did we pick rock paper or scissors then let's do this with the computer's Choice select the text content of the computer display the text will be computer computer we will display the variable of computer Choice the one that was picked randomly and take our result display which has no text content currently set it equal to be result okay let's see what we have currently let's pick Rock it's a tie paper you win scissors you lose what we'll work on next depending on the result that's displayed if we win I would like the text to be green if we lose I want the text to be red going to our CSS stylesheet we're going to add three classes green text red text pick a font color pick something green and for the red text pick a red font color if we win or lose we're going to add one of these classes to the class list of our result display so going back to our Javascript file after we display the result now we're going to add a switch we're going to examine our result we will add a case of you win if our value matches this case let's take our result display access the class list use the add method add the class of green text then break let's copy this case paste it we will add a case for you lose add the class of red text if we lose let's see what we have currently if we win you get green text if you lose you get red text but now if it's a tie we have red text with each new game we should reset the color back to the original so before updating the color and displaying it let's take our result display access the class list use the remove method remove any class of green test text and red text let's see if this works you lose it's a tie that's black you lose you win the color seem to be working all right now let's add a scoring mechanism we'll have to head back to our HTML file after our result display we're going to create a Dev element the First Development will have a class of score display the text for the score display will be player score colon space then we'll add a span element within with text of zero I will give the span element a unique ID of player score display the reason I'm putting this number within a span element I'm going to style this number different from the rest of the div element the player score okay let's copy this development and paste it we need another for computer computer score the ID of the span element will be computer score display going back to our CSS stylesheet We'll add the following after our result display we will select the class of score display increase the font size font size will be 2 RM for the actual numbers I'm going to change the color with the CSS property where the font color is green I'll add an additional selector let's select the ID of player score display I would also like that to be that shade of green and for the red text let's select the ID of computer score display so the computer score that number will be red okay now we just need to add functionality to the scoring mechanism so back to the top we're going to select the ID of player score display const player score display equals document. getet element by ID player score display and we need the same thing for the computer computer score display and we need a score value a number so we can work with it let player score equal Z let computer score equal 0 going to the bottom of this function within our switch within our case of U win we're going to increment our player score player score Plus+ then take our player score display and update it access the text content set it equal to whatever the player score is then let's do this with our computer computer score Plus+ that's if we lose and computer score display equals the computer score and that should be everything thing let's see if this program works you lose you win you win it's a tie you win you win you lose the player score is four the computer score is two all right everybody so that is a game of rock paper scissors you can make using JavaScript