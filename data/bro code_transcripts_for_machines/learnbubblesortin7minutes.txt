oh yeah all right bubble sort bubble sort is a sorting algorithm that compares adjacent elements and checks to see if they're in order if not these elements are switched then the next pair of adjacent elements is compared and we continue on in that pattern until all elements are in order while using bubble sword i like to imagine that our collection is filled with water heavy things like rocks sediment will sink to the bottom anything light such as air wood bubbles anything light will flow to the top here's an array of nine unordered elements we will use bubble sort to manually sort these elements in ascending numeric order alright so i reset this array we're going to perform a total of nine laps but don't worry i'll fast forward through this footage so let's just walk through the first few steps we will compare these first two adjacent elements we'll check to see if the first element is greater than the second element if it is we will move this element to a variable which will probably be named temp short for temporary check the video in the java playlist on how to swap variables i think it's a pretty good video but i might be biased with my opinion we'll take the next element and place it where the first element was then move this variable within temp into the spot that one was in the previous element okay so then we will check these next two adjacent elements this first element is greater than the second element so we will move our first element into temp move the second element to where element one was and then move temp to where element two is and then we would just repeat this process so we will lap through this array once for each element that is available so let's just speed up the footage here and i will show you manually a bubble sort so as you may have noticed the bubble sort algorithm really isn't that efficient even when working with smaller data sets in most real world applications you'll probably use a different sorting algorithm but this is still a good thing to learn so the bubble sort algorithm has a runtime complexity of o of n squared it runs in quadratic time so the larger the data set the more and more inefficient that this sorting algorithm is going to be with a small data set it's not horrible but there's definitely better algorithms out there so for practice let's create our own bubble sort algorithm all right let's create an array of integers and assign some random numbers make sure that they're not in order because well then that would defeat the purpose of this program so at the end we'll just display all the elements of this array using an enhanced for loop for i in array we will display with a print statement not print line whatever i is during each iteration so let's just test this so i have all the elements in my array printed and they're currently not in order so we'll need to declare a bubble sort method bubble sort and then we will need to define this outside of our main method so public static void we're not returning anything bubble sort and then we will need to pass in an array so that will be the argument array and we will accept int array okay so this is actually really easy to write even though the bubble sort algorithm really isn't too efficient so i guess that's one benefit so we'll need nested for loops and then the outer for loop will be int i equals zero i is less than array dot length minus one i plus plus and let's do the same thing with the inner for loop but we can copy what we have change i to j and this is going to be array length minus i minus 1. so we're going to check to see if array at index of j is greater than that will be for ascending order is greater than array at index of j plus one so that would be the next adjacent element so if this number is greater than this one we should switch these two elements around and we'll need the assistance of a temporary variable so let's declare int temp equals array at index of j then we will take array at index of j set this equal to array at index of j plus one and then lastly we have array at index of j plus one equals whatever is stored within temp and honestly that's all there is to it so this should sort our array and it's in ascending order so if you need this in descending order we would just swap this greater than sign with a less than sign and now this is in descending order so even though the bubble sort algorithm really isn't too efficient it's actually extraordinarily easy to write if you just need something really simple so i guess that's one benefit all right everybody that is the bubble sort algorithm it compares pairs of adjacent elements and checks to see if they're in order if they're not they're swapped and this process will repeat once for each element in an array or other collection so this algorithm has a runtime complexity of o of n squared so it's ok ish for small data sets and please do not use this for any large data sets so if you would like a copy of this code i will post this to the comment section down below and well that's the bubble sort algorithm in computer science hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you