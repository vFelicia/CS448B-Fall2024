hey hello so uh today I'm going to explain Getters and Setters in JavaScript Getters are special methods that make a property readable Setters are special methods that make a property writable we can use Getters and Setters to validate and modify a value when reading or writing a property it helps with validation when creating an object or updating one of its properties here's an example we will create a class of rectangle we need a con structor we will have two parameters a width and a height we will assign this do width equals width this do height equals height now let's create a rectangle object const rectangle equals a new rectangle for the width let's say 1 million something ridiculous and for the height I want the height to be Pizza the word pizza then let's console.log our rectangles width and the rectangle's height we have created a rectangle object with the width of 1 million and a height of pizza which doesn't make any sense we could use some validation when creating an object we don't want people to enter in garbage values like negative a million or string when we're expecting a positive number for the width or height that's where Getters and Setters come in we'll begin with Setters when setting one of these properties either initially through a Constructor or updating one of them later such as setting the width or height equal to some value we can go through a Setter first outside of our Constructor we will set a property we'll begin with width this will be a special type of method the parameter will be new withth what do we want to check before assigning this property using an if statement let's check to see if the new width that the user sends us is greater than zero if it is we will assign this doore width using an underscore prefix it tells other developers that this is a private property you shouldn't touch it at all you could say that this private property of WID is different than our standard width property we will assign the private property of width equal to the new width we receive else let's console. error not log we'll use error this time width must be a positive number all right let's see what happens width must be a positive number and our width is currently undefined which is good okay let's do this with height let's copy our Setter for width paste it but change every instance of width to be height set height New Height be sure to use that Camel case naming convention if new height is greater than zero assign the private property of height equal to the new height else console. error height must be a positive number and there we go that worked width must be a positive number and height must be a positive number our width and height are currently undefined in order to set the width and height we have to pass in a positive number for the width I will say three for the width four now when we access width and height those numbers still aren't showing up that's because these properties are writable via Setters but they're not readable that's where Getters come in we'll create two Getters one for width we'll need to use the get keyword get width this will be another type of method all we're going to do is return this private width and that appeared to work we have three for the width let's do so with the height we will return this private height we have three and four Now by using Setters we can even update those values later let's take our rectangles with set that equal to be five take the height set it equal to be six and that also appears to work but again if I try and update those values to some garbage values like a million and the word Pizza we get those errors again and our object retains its initial values that we previously assigned it three and four with Getters we can even use the property accessor that dot to access a property that doesn't necessarily exist for example we will get area we'll perform a calculation we will return this private width times this private height so now we can access area as if it was a property we have three for the width height four our width times our height gives us an area of 12 our area isn't a property technically it's not found within our Constructor but we can access it as if it was a property with a getter with Getters you can even add additional logic I would like to preserve the initial values of our width and height when I return their value I will use the two fixed method to give each of these a Precision of one let's do that with the width the height and the area but that's going to be a little more complex we'll enclose width time height then add to fixed one and why stop there I'll add centimeters to the end of each I'll use a template string add a placeholder then add CM for centimeters 3.0 cm and the area 12. 0 CM let's make that centim squared because it's area Technically when you're assigning values even when you're initially creating an object you can go through the Setters for input validation when you retrieve values and try and read them you can add additional logic too let's go over a second example we will create a class of person we need a Constructor we will accept a first name last name and an age this. first name equals first name this. last name equals last name this. AG equals age let's construct a person const person equals new person let's enter in some values that don't make sense sense the person's first name will be the number 420 their last name is the number 69 their age is the word Pizza let's console.log our person objects first name which is the number 420 their last name 69 and their age the word Pizza we need to validate this input before assigning the properties that's why we need Setters we will set the first name property this is a special type of method the parameter is going to be a new first name we need to be sure that this value passed in is a string and the length is greater than zero we could write something like this we need an if statement let's check the type of our new first name is it strictly equal to a string and is our new first nam's length property greater than zero if all of that checks out we will assign this private first name equal to the new first name we receive else let's console. error first name must be a nonempty string let's see if this worked I'm going to save first name must be a nonempty string and currently our first name is undefined okay that worked let's copy our Setter for our first name paste it change every instance of first name to last name new last name check if the type of our last name is equal to a string and if our new last name the length of it is greater than zero if it is assign the private last name property equal to the new last name else last name must be a nonempty string that also worked our first name and last name are undefined let's do this with age set our age the parameter is going to be New Age using an if statement is the type of new age strictly equal to a data type of number and is our new age greater than or equal to zero if it is take this private age equals our new age else we're going to console do error age must be a non negative number we can no longer assign pizza for our age unfortunately all right we have our setter set up now let's work on the Getters let's assign some legitimate values for the first name SpongeBob last name SquarePants age 30 we don't have those errors anymore that means they're set but those properties aren't readable that's why we need Getters let's get the first name get first name return this private first name there's SpongeBob his first name get last name return this private last name there's his last name let's create a getter for a full name too let's console.log a full name even though we have no property for that that's undefined we'll use a getter to mimic a full name property by just combining the first name and the last name properties get full name return I'm going to use some string catnation this private first name plus aace character this private last name and there's his full name SpongeBob SquarePants and the age get age return this private age and SpongeBob is 30 all right everybody those are Getters and Setters Getters are special methods that make a property readable Setters are special methods that make a property writable by using a combination of both we can validate and modify a value when reading or writing a property and well everybody those are Getters and Setters in JavaScript