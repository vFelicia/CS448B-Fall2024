hey friends it's me again today I'm going to explain both variable scope and scope resolution variable scope is where a variable is both visible and accessible with scope resolution when we're using a variable there is a certain order known as the legb rule in which we locate that variable local enclosed Global builtin we'll get to this momentarily let's begin with variable scope I have two functions Function One function two within function 1 a equals 1 then we print a within function 2 b equals 2 then we print B if I were to invoke these functions let's invoke Function One then function two we would print one then two variables declared within a function have a local scope variable a is local to function one variable B is local to function two within function one if I were to print B and function 2 if I were to print a we would run into a name error name B is not defined and the same thing would apply with a functions can't see inside of other functions imagine that we're function one this is our house we can see everything that's going on inside of our house but function two is our neighbor's house we can't see what's going on inside of our neighbor's house we have no idea what B is with function 2 function 2 has no idea what a is that's where variable scope comes in it's where a variable is visible and accessible functions can't see inside of other functions but they can see inside of their own function that's why we sometimes pass arguments to functions so that our functions are aware of them using this concept we could create different versions of the same variable let's rename a to be X and B to be X as well then I will print X we have two different versions of x a local version of X found within function one and a local version of X found within function 2. whenever we utilize a variable we will first look to see if there's any local instance of that variable if there isn't we would move to the enclosed scope with it in closed scope one example is when you have a function declared within another function I'm going to place function 2 within function 1. this is allowed in Python this is a more advanced concept we'll cover this more in the future so I'm going to eliminate this print statement let's get rid of function 2. at the end of function one we will invoke function 2. like I said it's pretty complex we won't be using this until much later within function 2 if I was to print X we would use the local version or x equals 2. if I was to eliminate this variable declaration we would use the enclosed version instead where x equals one there's an order of operations use any local variables first then in closed variables we're printing X within function 2. since X wasn't found within the local scope we would use x within the enclosed scope but like I said that's a more advanced topic you should at least be aware of it let's move on to the global scope Global meaning outside of any functions I will eliminate these variable declarations within function 1 we're printing X and within function two we're also printing X I will declare a global version of X where x equals three X is outside of any functions when I run this program we're printing three twice once for function one and once for function two there's no longer a local version of X for both of these functions if there were we would end up using these local versions instead Function One prints one function two prints two if there's no local version as well as no enclosed version we would move on to the global version where x equals three last in our order is built in I think what we'll do though is from math import e e is an exponential constant I'm going to print what e is e is 2.71 e is built in I will create a function to print e Define Function One all I'm doing is printing e then we should invoke it invoke Function One if I was to set e to be a different value like three what we're doing technically is creating two different versions of e variables can share the same name as long as they're within a different scope we have a builtin version of e and a global version of e if I was to print e now it would print my Global version because using the legb order we would first look for any local version of e then enclosed version then Global which we do have one of then lastly built in all right everybody so in conclusion variable scope is just where a variable is both visible and accessible python has a scope resolution order legb if we're using a variable we will first look in the local scope for that variable if we don't find that variable in the local scope we will move over to an enclosed scope then Global then built in we will have more practice with this in the future and well everybody that is both variable scope and scope resolution in Python