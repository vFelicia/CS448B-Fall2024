hey everybody we have an important topic to discuss today and that is the use effect react hook use effect is a react hook basically speaking use effect tells react to do some code when then pick one of the following do some code when this component rerenders or do this code when the component mounts when you mount a component that's when you create and append it to the domum that is known as mounting or do some code when the state of a value changes think of an effect as some side code you would like to perform I don't really think use effect is a great name if I could rename use effect I feel like a more appropriate name would be use side side code but that's just my opinion so think of an effect SM side code you'll write your side code within a function this can be a callback an anonymous function or an arrow function and optionally for the second argument you can pass in an array of dependencies if we would like to run our side effect on every render of the component we would just need to pass in a function such as an arrow function do this code every time the component reenders if you would like to perform some side code only when the component mounts and not during every render you would pass in an empty array of dependencies that tells react perform this code only once when the component mounts within your rave dependencies if you were to pass in a value this code would run when the component mounts plus when this value changes use effect has a bunch of different uses you'll see use effect with event listeners do manipulation subscriptions to realtime updates fetching data from an API and cleanup when a component unmounts unmounting is when you remove a component from the Dom whereas in mounting is adding a component to the Dom okay let me give you a few examples if in order for us to use use effect we have to import it from the react Library we have use State as well as use effect in this example we're going to create a count State variable const count and a Setter for count set count equals use State the initial state of count will be zero and we'll display our count within our return statement let's create one paragraph element that has text of count as well as our state variable of count and a button let's create a button element that has text of add when we click on ADD we will add one to our count we'll need a function to work with I will set the onclick event handler equal to a JavaScript function let's name this function add count then we just need to declare this function function add count all we'll do is use our Setter for count take the previous state of count as a parameter Arrow do this take the previous state of count add one every time I press the button we will add one to count now let's use use effect I can run some side code at every time this component rerenders I would just have to place that code within a function that will pass to use effect every time this component rerenders I will change the title of the document we'll need to use use effect be sure to place use effect near the top of your component we will call use effect there are two arguments a function and an array of dependencies I would like to perform some code every time the component reeners I do not need that second argument now we just need a function this can be a callback an anonymous function or an arrow function we're going to be using an arrow function every time this component rerenders what would we like to do let's access our document access the title set it equal to be a template string of count and insert our state variable of count Let me refresh every time this component renders including initially when we Mount the component we will perform this code where we update the title every time I press the added button the title is going to update if you would like your side code to run only when the component mounts when we create and add it to the Dom initially you'll pass in as a second argument an empty array an empty array of dependencies so if I were to run this again and press add well our title only updates once and no other time after that for example I might want to set my title to be my counter program I only need to update this title once I don't need to update it every time the component rerenders it's a oneandone effect in this case case I would like to add an empty array of dependencies because if I didn't well we would update this title every time the component rerenders when we really don't need to in this specific example it doesn't benefit us to update the title every time we add one to count let's revert those changes back you could pass in a value to your array of dependencies within your array of dependencies you can add a value let's add our count State variable what we're telling react is that when our component mounts plus when this value changes of count then do the side code so with what I have written currently every time I press the button the title is going to update if our count State variable updates perform our side code this is very similar to us not having that dependency array you know this will work too however since we don't have any dependencies this code is going to run for any reason that this component rerenders even for something completely unrelated by adding an array of dependencies and placing a value within do this code only when this value updates now to demonstrate we'll create another button to subtract the text will be subtract we'll create a function to subtract count we can copy this function paste it change the name to subtract count take the previous state of count minus one so if our count changes whether we add one or minus one the title of our document is still going to change if the value of count changes for any reason do the side code let's add another value to our dependency array we will create a state variable for color color and set color equals use State the initial state for my color will be green we'll flip between green and red green means go red means stop after our subtract button I will add a break and button two change the color change color the onclick event handler will equal this function of change color and we just need to Define this function function change color we will use the setter for set color we will use the previous state of color is the previous state of color strictly equal to Green trar operator is this true if it is return Red otherwise return green then we will take our paragraph of count access the style attribute set it equal to embed some JavaScript we need a JavaScript object so we need another set of curly braces take the color property set it equal to our color State variable so now the count is green with our title let's also add the color so I'm not going to add our color to our dependency array quite yet we can add the title updates we can subtract the title still updates but if we change the color the color changes of this paragraph element but not the title we're executing this code only when the count changes so even though I'm flipping between red and green the title is still staying the same if I were to add our color to our dependency array anytime the count or the color changes update the title so let's try this again the title updates when I add or subtract or change the color now the title is count one red count one green count one red count one green so that's where your dependency array comes in anytime one of these values change perform the side code now you may have noticed noed if you remove use effect well your title is still going to update so why would you need use effect there are a couple benefits of using use effect the first benefit is that by using use effect it keeps your code more organized if you were to look over some react code and look within the use effect hook you could tell when exactly this code runs does it run during every render only when the component mounts or when one of these values change if you didn't use use effect well then this code would run every single time regardless every time the component rerenders which you may not always want but not only that but with more advanced features such as event listeners or subscriptions you may want to remove or free up those resources you can return a cleanup function if you were to return a function when this component unmounts when we remove it from the Dom or before the next render you can perform some cleanup code for example if we were to add an event listener when the component mounts we would like to remove it before unmounting if we don't it may lead to unexpected Behavior so that's another benefit of using use effect perform some code only in certain situations and you do have the option to do some cleanup code before the next render or when you unmount the component discuss the return statement in this next demonstration and how it can be useful in this next example we're going to create a width and a height what the width and the height of our window is every time we adjust the size of the window the width and the height displayed is going to change we'll need two State variables to work with a width set width we will be using U state so the initial state of the width of the window access our window give me the inner width property then let's do this with height const height set height window do inner height within our return statement we will create a paragraph element that has text of window width we will display our width statement variable then add pixels for a unit of measurement then let's do this with height window height display our height State variable so we have window width and window height if I were to adjust this window nothing happens there's no change let's create a function to handle resize function handle resize no parameters we're going to set our width to be the inner width property of our window and set height H should be Capital set height take our inner height of our window and reset it so now we need to add an event listener because this still doesn't change we're going to add an event listener that will listen for a resize event whenever we resize our window if we attempt to use this without use effect but within the body of our component we will take our window add an event listener we need an event and a function to do something the event is going to be a resize event when the window is resized perform this code we will pass in a call back to handle resize and then for demonstration purposes I'm going to console.log event listener added we only need one event listener to make this program work now if I were to resize my window this does work our width State variable changes same thing goes with the height now let's take a look at our console there's an issue we only need one event listener to make this program work however every time the component rerenders we're adding a new event listener we've added over 1,000 event listeners that's really not good how about this only when our component mounts when we append it to the Dom we will add one event listener and that's it so guess what we're going to place our code within use effect we will pass in a function and an array of dependencies when would we like to add an event listener let's add an event listener only when the component mounts so we need to add an empty array of dependencies let's try that again I'm going to resize our window that should be good go to inspect yeah you can ignore all this garbage so if you have strict mode on which I do use effect is going to run twice it will run a development only setup and then a cleanup cycle so this is normal so we didn't add thousands of event listeners besides the first cleanup cycle because I have strict mode on we're only adding one event listener because that's all we need we don't need thousands of event listeners if you ever need to unmount the component meaning remove it from the Dom use effect has another use and that is is adding a return statement to do any cleanup you will return a function do this code either before the next reender or when the component unmounts if we add an event listener then we unmount the component it would be good practice to remove that same event listener if you don't that can lead to unexpected behavior when we unmount our component we will take our window then remove event listener we will remove the event of resize and a call back to handle resize when we are done with this component free up any resources so that it doesn't lead to unexpected Behavior let me add one more line of code too let's console.log event listener removed let's refresh resize our window a few times go to inspect console okay let's take a look since I am in strict mode we'll run our use once during the development cycle and then clean it up right away then we will add that event listener only once we didn't unmount this component yet so we didn't remove it so by adding a return statement you can do any cleanup either before the next Reen or when you unmount the component within a component you can add more than one use effect hook we're going to add a second use effect hook if the width or the height changes we're going to update the title of our document to display the width and the height so let's add another use effect hook use effect what code would we like to perform let's access our document take the title set it equal to be let's use a template string let's say size placeholder width x height when would we like to use this effect let's use this effect when the width and the height update we will need that dependency array we will list the width and the height State variables so on Mount we'll get the size right away 227 by 396 now every time the width and the height changes the title is going to update so you can have more than one use effect hook within your component all right everybody so that is the use effect hook it's a react hook that tells react to do the code when either the component rerenders this component mounts or the state of a value changes there are two arguments a function that contains the code you would like to perform and optionally an array of dependencies based on what you pass in to use effect you'll either run this code after every rerender run only when the component mounts or run when the component initially mounts plus when the value changes use effect is great with event listeners Dom manipulation subscriptions to realtime updates fetching data from an API or clean up when a component unmounts we will have more practice with use effect in the next video where we will create a digital clock and well everybody that is an introduction to use effect in react