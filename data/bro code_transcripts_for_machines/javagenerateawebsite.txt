how's it going everybody its bro here hope you're doing well and in this video I'm going to teach you guys about how we can generate HTML files using Java so let's get into it if you find this video helpful please remember to Like comment and subscribe your support will help keep this channel running everybody so we're gonna create a program that's going to create an HTML file that can be used to display on a web page so HTML stands for hypertext markup language and it's used for creating web pages so we're going to do this in five different steps the first step is that we're going to ask the user for a file name and then we're gonna check to see if that file actually exists then we're going to determine if the file is empty then we're going to rename this file as an HTML file and the last step is probably the most difficult is that we're going to read each line and insert the necessary tags that is needed for an HTML file so if you're ready let's begin let's create another file within our project folder so an easy way to do this is that you'll go to the project folder go to file new and then go to file and I'll call this hello world and click finish so now you should have an empty file within the same project folder as the class that you plan on using for this lesson and later on in this video I'll show you guys how to read a file that's elsewhere on your computer but we'll keep it simple for now and just place it within the same project folder now going back to your main class make sure you have these two imports before you begin everything related to Java dot IO and Java dot util and there's going to be a few things that we'll need to declare before we get started on step one so the first thing is that we're going to need a scanner so to do that type in scanner we'll need a name for the scanner I usually call it scanner with a lowercase s equals new scanner and then within parentheses system dot in now we're going to declare a scanner but not instantiate it so we'll call this second scanner file in and the purpose of this is that it's going to serve as our input connection and then we're going to create a print writer and we'll call this file out and this is going to serve as our HTML file connection and then we're going to create a string so this is going to store the file name so file name in it's what the user types in when we search for a file on their computer so original files name and we'll create another string and this is going to be file name out and this is going to be the new HTML files name so we're going to rename file name in as an HTML file so that's the purpose of each of these and then we're going to need an integer and we'll call this dot index and what this is going to do is hold the position of any dots within the file name so let me explain on this further for locating the position of any dots within the file name so let's say that we search for a file called hello world dot txt so when we get to step four we're going to be renaming this txt file as HTML so we're going to create a substring starting at position 0 and ending wherever this dot is and we're going to chop off the rest of this and add HTML here instead and then save it so that's kind of the purpose of this variable we just want to find out where that dot is located in the file name and then lastly what we need is a string to hold the current in the line that we are on when we read the file linebyline and we can set this to null for now so this is a line from the input file and that is everything that we need to declare so let's work on step 1 ask the user for a file name all right everybody we're on step 1 so we're going to ask the user for a file name or the file path and this is probably the easiest step so we're going to create a prompt that says enter file name or file path that works alright and then for the second line what we're going to type in is file name in and we're going to actually add a value to this because it's only declared right now so file name in equals scanner dot next line and that's it that is step one so let's move on to step two check if this file exists so what we're gonna do for step two is create a try and catch block so try and then catch parentheses curly braces and what we'll put within the parentheses is that we will catch file not found exception eat and within here we'll just create a print line statement that says file not found all right so this is going to be underlined red for now but as we fill things in this should go away so within the try block what we're gonna type in here is file in equals and then file in is our other scanner so we're going to finish instantiating this so file in new scanner then within the parentheses of scanner what we're gonna type within here is new file reader parentheses and within this inner set of parentheses what we're gonna type in here is the name of our file file name in and you can see that this red line went away now so we should be good alright so that is step two check to see if this file exists let's move on to step three all right so I actually just switched steps three and four what we're actually going to do next is rename this file as an HTML file because this is part of step three so we're going to rename this file as an HTML file and we're gonna do that within this try block alright so after this line file in equals new scanner blah blah blah what we're gonna type in here is that we're going to get the index of where the dot is within the file name if there is one so dot index equals file name in and we're going to use the last index of and then we are going to search for any dots and then this will return the last index of any dots and store it within this variable so if there are no dots within the file name so some files might not have one we need to account for that so what we can do is check to see if dot index is equal to negative one that means there were no dots found within the file name so what we're gonna do is take our file name out so this is going to store the new name of the HTML file so file name out equals file name in and then we're going to add dot HTML at the very end so now we're going to create an else statement so else this means that there was a dot found within the file name and we're going to chop off everything after the last one so we're going to take our file name out equals file name in and we're going to use the dot substring method and there's two indexes within here we're going to create a substring of the first character and wherever the last dot was found so the dot index and then add HTML at the very end so basically what we're doing with this ifelse statement is that let's say there is no file at the end like we just locate the file hello world well what we'll do here is just add HTML at the very end and then we're going to save this otherwise if there is a file extension such as hello world dot txt we're going to create a substring of the first character and wherever the last dot is so we're going to take this disregard the rest of this and then add HTML at the end and then save it so it depends on what the user types in and then the last up here is that we're going to type in file out and file out is the HTML file connection and this is a printwriter equals new print writer and then we are going to place within the parentheses the name of this file file name out and that is it for step three now let's work on step 4 determine if the file is empty and when you write this next section make sure you do it within the try block so what we're going to do within this try block at the end is actually create another try and catch block so try and then catch parentheses curly braces and what we want to catch is no such element exception E and then we'll create a print line statement and perhaps we'll just say error plus e get message all right and then within the try block we're going to read the first line so we have a line variable that's a string and it's going to read our file line by line but we're going to check the first line of this file so line equals file in dot next line and now what we're going to do after this clock is that we're going to check to see if our line variable is equal to null and then we can just display a print line statements such as this file is empty and then we'll create an else block after this and then move on to step 5 so step 5 is to read each line and insert the necessary tags for an HTML document so we're going to write this within the else block so let me give you a demonstration of how HTML documents work real quick all right so here's the framework for an HTML document so of course HTML documents end with the dot HTML file extension and the framework is that there is usually a set of tags we need a pair of HTML tags there's an opening tag and a closing tag the closing tag has a forward slash before the tag name so we need a set of HTML tags and then within here we have a set of head tags and a set of body tags so anything within the body will actually appear on the web page and anything within the head does not appear within the web page so the head is usually reserved for like the web page title or any metadata and the body is well the body of your web page so when we create our HTML document we need to insert these specific tags HTML head body and the associated closing tags so to add these tags to our HTML document what we're going to type is first file out dot print line it's kind of like system dot out dot print line but it's file out dot print line and what we're gonna type within here is the first tag and that was HTML within angle brackets and then we're going to create an opening tag for head and then we can just close this head tag right away so /head and then we need to create an opening body tag so file out dot print line body and then after the body this is where we're going to start adding all the lines from the file that we're going to read but first since we already read the first line we still have the first line stored within this variable so let's add that before we move on to that portion so file out dot print line and we will put our line variable within here so we're going to create a while loop that's going to continuously read our file until it's finished so we'll create a while loop and within the parentheses we're going to check to see if file in dot has next line and within the parentheses of the curly braces we're going to type file out dot print line so we're going to move down to the next line on our HTML document so in order to do that we're going to add a break tag and it's just BR with in angle brackets and that allows us to move down on the web page and then we're going to reassign our line variable with file in dot next line now for some reason if this line is empty what we'll want to do is actually print a br tag so let's check to see if line dot is empty and then what we'll do within the curly braces is that we will just file out dot print line a break tag else what we'll do is file out print line our line and now we need to close everything we're on the homestretch now so you'll want to be sure you're writing this outside of your while loop so that is between these two curly braces so make sure you put it in the right place so we're going to file out dot print line the closing body tag so that's forward slash body and then we need to close the HTML tag so that is file out dot print line HTML and you know what for fun let's let the user know that this file is finished processing HTML file is processed I don't know how to spell processed I think that's okay all right and then we just need to close our file in and close our file out so we're going to add that after the next curly brace so it's a good idea to close all the scanners afterwards so file in dot close and file out dot close all right and that should be everything so let's run this first we're going to search for a file that does not exist so enter the file name or the path file not found yeah I'm not too surprised all right let's locate our hello world file so enter file name or path hello world and it says this file is empty because we didn't write anything within here so let's write a poem or some song lyrics or something so I think for me I'm going to type in roses are red violets are blue booty booty booty rockin every where so I'm going to save this and let's run this again this is hello world hit enter and it says HTML file is processed so we can actually refresh this project folder so you can rightclick it and refresh and here is our HTML file so I'm going to view it within Eclipse and it kind of looks like this it has all the lines and this is kind of like our own mini web browser otherwise if you want to view this with a legit web browser like Google Chrome what you can do is go to your Eclipse workspace within your C Drive and then we can rightclick this open with Google Chrome and here is our web page but I probably need to zoom in a little bit and you can see that it printed all the lines of our file linebyline and it's now saved as an HTML document now let's take a look at the same file with a text editor like sublime text or notepad plus plus any one of those would work so I'm going to open this with sublime text and you can see that we have all of the tags that we inserted with our Java program we have the opening and closing HTML tags the head tags the body tags and then it has all of the lines of our text plus some brake line tags to move down to the next line so hopefully this project gave you some ideas and you can take this a step further if you know some HTML you can change the fonts add some colors add pictures stuff like that but we just kept it very basic for now by the way I do have an HTML tutorial series as well as a CSS tutorial series if you want to learn more about web development feel free to check those out if you want alright well that concludes this project of generating an HTML file I'll include all of this code and the comments down below and well that's how you can generate an HTML file with Java hey you yeah I'm talking to you if you learn something new then you can help me help you in 3 easy steps bye smashing that light button drop a comment down below and subscribe if you'd like to become a fellow bro you