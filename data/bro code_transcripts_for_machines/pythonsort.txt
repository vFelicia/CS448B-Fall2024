hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to show you all how we can sort iterables in python so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running well well well welcome back everybody in this video i'm going to show you all how we can sort data using python we'll begin with the sort method which is used with lists and the sort function which is used with iterables and that would include lists let's start with something very basic and then we'll crank up the difficulty one step at a time i have a list named students and i have a bunch of student names within this list we have squidward sandy patrick spongebob mr krabs let's say that all of these students are taking a college course perhaps on marine biology what i would like to do is to sort this list in alphabetical order and to do that we have a method that is built in with lists so type the name of your list students dot sort and it's easy as that and to display this list i think i'll use a for loop for i in students print i and there you go that's how to sort a list starting with the top we have mr krabs then patrick sandy spongebob and squidward the sort method of lists can accept keyword arguments there are two optional keyword arguments that we can pass in we can pass in key and or reverse we'll cover key a little bit later if we set reverse to true then our list will be sorted by reverse alphabetical order beginning with squidward spongebob sandy patrick then mr krabs now the sort method does not work with other iterables it's a builtin method for lists if our list of students was instead let's say a tuple well then the sort method is not going to work you can see here that we have an attribute error tuple object has no attribute of sort that's where the sort function would come in because that's useful for other iterables you can also use this for a list two i suppose the sort function will return a sorted list so let's use the sort function this time and we'll assign the result to a list called sorted students equals sorted and then we need to pass in an iterable and we have the option of passing in a key and or reverse the iterable that we'll pass in as an argument is our tuple named students so this line will be sorted students equals sorted students sorted students is a list the sorted function will return a list but it accepts an iterable as an argument and to display this we should change 4i and students to 4i in sorted students and now this function will accept our iterable our tuple and create a sorted list and all of these are in alphabetical order and to reverse this we can pass in the keyword argument of reverse equals true and now our list is sorted in reverse alphabetical order all right we're going to take it up a level welcome to level 2. sometimes data isn't always as simple here we have a list of tuples each tuple has a corresponding student record we have a name a letter grade for their college course and the student's age now how can we sort this list of tuples by either the student's name their grade or their age well that's where the key keyword argument is going to come in with sorting if you take a look at this list of tuples it somewhat resembles a spreadsheet there's rows and then there's columns the first column corresponds to student names the second column are grades and the third column are all the ages of the students so by default sorting by the first column is actually really easy that's the default so if we need to sort alphabetically that would be the same process as before we would type the name of the list students dot sort but if we were to print this iterable for i in students instead of just the individual student names we're going to get each tuple that we have so now all of these tuples are arranged in alphabetical order starting with the first column that we have which are all the student names now how can we sort these iterables by their second column for this case it would be student grades or even the third column which would be the student ages well that's where the key keyword argument is going to come in this is a keyword argument and we set key equal to a function that's going to return the index of that specific column that we have so let's say key equals grid grade is going to be a function object grade equals and we can easily use a lambda expression for this lambda let's say grades colon grades and we will set an index of one now the first index is zero that's the first column because computers always start with zero column two would have an index of one and then column three would have an index of two so grade equals lambda grids colon grids index one you can also rename these if you want so students.sort we're setting the key equal to grid and grade is a function object via a lambda function and now all of these students will be sorted by their grades starting with sandy then spongebob mr krabs patrick then squidward if this needs to be in reverse order we can pass in that other keyword argument of reverse equals true and for practice if you wanted to sort all of this data by each student's age then we would change grade to let's say age age equals lambda we'll change grades to maybe ages colon ages and the index would then be two because the first column here is zero then one then two and change key to our function object of age now each student is sorted numerically beginning with the smallest edge well the youngest person starting with spongebob sandy patrick squidward that mr krabs and like i said before if you want your data arranged in reverse order you can set that keyword argument of reverse to true within the sort method and all of our student data is sorted beginning with the eldest student which is mr krabs then squidward patrick sandy and then spongebob and for the last part of this video let's say that we're working with some other iterable let's say we have a tuple of tuples instead well we can no longer use this sort method because that only belongs to lists you can also use the sort function with lists and it will generate a new sorted list without changing the placement of the original so let's say we have a tuple of tuples and this will create a new sorted list let's call this list sorted students equals then we'll use the sorted function we need to pass in an iterable and we can pass in both a key and or the reverse keyword argument so the iterable would be students and let's set the key equal to edge and i will not reverse it we can keep it as it is but let's change for i in students to sorted students and that's how to use the sorted function to sort an iterable including a list well alright everyone that's how to sort iterables in python if you would like a copy of all this code i will post all of this to the comments section down below but yeah that's a basic way to sort iterables in python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you