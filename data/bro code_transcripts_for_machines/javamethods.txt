hey what's going on everybody it's your bro hope you're doing well and in this video i'm going to explain methods in java so sit back relax and enjoy the show you can become a hero and save our channel by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro all right welcome back guys and gals in this video i'm going to explain methods a method is a block of code that is executed whenever it is called upon for example when we begin our program and execute it we begin by calling the main method that's where we've been writing a majority of our code so anything within this set of curly braces belongs to this main method this time we're going to create our own method that we can call whenever we need it so outside of our main method make sure you don't write this within the main method we're going to create a another method perhaps a method that will display a message such as hello and to begin creating a method we'll need a return type i'll explain return types later on in this video for now we're going to list the word void followed by a method name our main method is called main and a common naming convention for methods is to have the first letter lowercase so let's create a method called hello when we call this method it will display a message such as hello so this will be hello with a lowercase h then we need a set of parentheses and then a set of curly braces anything within the set of curly braces belongs to the hello method and if we call the hello method it's going to perform whatever code is between these two curly braces so what would we like to do when we call this method let's display a message such as hello now within our main method we can call also known as invoking this method so within our main method we can call the hello method whenever we want now we have just one issue that we need to take care of and let me explain we cannot make a static reference to the nonstatic method hello from the type main so this means that we need to precede this method with the keyword of static because we're calling the hello method from a static method of main right here so normally we do not need to add this keyword of static and if you want to learn more about things that are static i do have a video on it but for now we just need to add this keyword in order for this program to work for this example so when we call the hello method it's going to perform whatever is within our block of code and here it just displays the word hello and we can call this method whenever we want and however many times we want so if we want to display the word hello three times we can just call the method three separate times and this method will perform its task its block of code however many times it is called one feature available to methods is that we can pass a value or a variable to a method when we call it for example we can pass a string variable to represent a name and then we can use that name for something within our block of code so for example let's pass in a name of whatever your name is let's say bro we can pass in a value or a variable so for this example i'm going to pass in a variable called name string name equals pro and i'm going to pass my variable of name into my method so if you want to pass a value or variable to a method when you call that method within the parentheses just list all of the values that you would like to pass to your method the values or variables that you're sending to a method are known as arguments and they can be confused with what's known as parameters in order to pass some values or variables to a method when we declare our method we need a matching set of what's known as parameters think of these as the rules in order to call this method we need a matching set of arguments and parameters currently these are not matching we're passing in a string but there is no matching parameter so this is how to set up a parameter for a method we're first going to begin by listing the data type of the value that our method is expecting so we're passing in a string as an argument so we need a string parameter so we need to first list the data type followed by a name for this value just to make it simple i'm going to call this name so we now have a matching set of arguments and parameters and now since we're passing in our name variable to our method of hello our hello method now has access to a string variable of name and it contains this value of bro so now we can use this name for something let's display hello plus name and when we call this method and pass in our name it's going to display the word hello plus our name hello bro so with parameters you don't necessarily need to keep the names of the values consistent i could change this name to something else like title i guess and then i will switch that around and this will work just the same so these don't necessarily have to be called the same thing the argument and the parameter you can change the name if you want even something like this would work too i don't know why you would write it like that but you can so with methods you can pass in more than one argument as long as you have a matching set of parameters this time let's pass in an integer value let's create an integer variable called age hint age equals and i'll set this to 21 this time so within my hello method i'm going to pass in my name and edge as arguments to my hello method however we have a problem if i attempt to run this we do not have a matching set of arguments name and age and parameters we're passing in a string and an integer and our method has parameters set up to accept only a string so we need to finish setting up the parameters for this hello method so that the arguments and parameters match so we need an integer and we will call this age and then we can use this age variable for something so within another print line statement let's display u r plus h and now this will work because we have a matching set of arguments and parameters and before we finish this video i would like to explain return types we can return a value back to the area in which we called a method so for this example on return types i think this can be best explained with a separate example so i'm going to clear out all of this and create a new example let's say we have two integer values into x this will equal maybe three and into y this will equal four well let's create a method that will add these two numbers and return the sum the result of these two numbers so outside of the main method let's declare a method static normally we would type void if we're not returning anything but if we're going to be returning a value we need to list the data type of the value that we're returning if we're going to add two integers together and return the sum we're going to list the return type as integer because that's the data type of the value that we would like to return we would like to return an integer and then we will list the method name let's call this add parentheses and then a set of curly braces so we cannot normally finish compiling this because if we're listing a return type we need to list a return statement what do we want to return well we're going to return an integer but we'll have to get to that later so let's begin by setting up the parameters for our add method let's say we would like an integer let's call this x and int y so in order to call the add method we need to pass in two arguments two integers so let's call the add method and pass in our variables x and y and within the add method we will add these two numbers together we could store this within a separate variable into z equals x plus y and then we could return our value of z so when we run this what's gonna happen well it doesn't display anything that's because when we return the value of z to this area in which we called our method well we're not currently doing anything with this value so we could store this within a variable or display it directly to the console window so let's store the sum within int z and z equals add x and y so you may have noticed that we declared this variable twice in z within our main method and within our add method this is technically legal because they are known as what's called local variables int z is only recognized by anything within the immediate set of curly braces it's known as a local variable add method does not recognize this int variable of z so we could declare our own to use or you can rename it too it doesn't really matter what you do so we can store the sum of our add method within int z and then do something with it such as display it to the console window system.out.line z so this will display the sum of seven another way in which you could write this we don't necessarily need to store the value in which we're returning to a variable we could just directly display it to the console window too so within my print line i'm going to call the add method and pass in x and y and this will still display seven another way in which we could shorten our method is that we don't need to store the sum within a variable we could just return x plus y so let me clear this line and we could return x plus y and this would be valid too so that's another way of writing this well everybody those are methods they are really just a block of code that is executed whenever it is called upon you can pass in values or variables known as arguments but in order to do so your method when you declare it needs a matching set of parameters and then you could return a value if you need to instead of using the word void just list the data type of the value that you're returning so if you would like a copy of all this code i will post everything in the comments down below and don't forget to smash that like button drop a comment down below and subscribe if you'd like to become a fellow bro