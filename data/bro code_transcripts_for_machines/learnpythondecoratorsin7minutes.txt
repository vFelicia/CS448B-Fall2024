what is going on everybody so today I got to talk about decorators in Python a decorator is a function that extends the behavior of another function without modifying That Base function we pass the base function as an argument to The Decorator function for example let's say we have a base function of get ice cream and you can pass in a flavor of ice cream well some people might want sprinkles on their ice cream and others may not they might just want plain vanilla well we could add sprinkles by using a decorator we're extending the behavior of a function where we get ice cream where we're adding sprinkles but we may not want to change the base function because some people don't like sprinkles think of decorators that way we're adding something to a base function without changing it here's how to create a decorator let's start with the base function we will create a function to get ice cream there will be no parameters for now all we're going to do is print the following message here is is your ice cream and for fun I'll add an emoji I'll add an ice cream Emoji to call this function all I got to do is call the get ice cream function here is your ice cream here's how to create a decorator a decorator is a function we'll need to Define it Define add sprinkles our decorator function is going to have one parameter a function but we'll just rename it to Funk for short we're going to pass a function to our decorator function within our decorator function we will define an inner function of wrapper currently there's no parameters we'll set that up later within this wrapper function we will call the function that we receive this parameter then we will return our wrapper function up until this point we've been returning values but now we're going to return an entire function here's the basic formula to create a decorator to apply a decorator to a base function preceding that function you're going to add at the name of The Decorator so add sprinkles is a decorator the base function is get ice cream within our decorator how do we want to add sprinkles exactly currently our decorator doesn't do anything here's what happens we just print here is your ice cream let's say that before we're given our ice cream we'll print a statement that we add sprinkles within our decorator imagine that we're replacing calling function with this print statement let's create another print statement where we add sprinkles before it I will print the following message you add sprinkles and I'll add an emoji how about confetti that could resemble sprinkles okay let's see what happens you add sprinkles here is your ice cream we're decorating our base function of get ice cream with a decorator of add sprinkles we're not modifying the base function we're extending it now we have a nested function of wrapper within our decorator it is necessary to have this here's why so I'm not going to call the get ice cream function quite yet so nothing should happen if I was to remove this wrapper well we'll end up calling this function as soon as we apply The Decorator we're not even calling the get ice cream function at all we only want to execute this code when we want ice cream not whenever we apply the decorator that's why we need that wrapper function we'll get ice cream and add sprinkles only when we call that function then at any point in my program if I call the get ice cream function then we get ice cream with sprinkles let's apply more than one decorator we'll create a decorator to add fudge Define add fudge we have one parameter a function which we will rename as Funk we need an inner wrapper function this is so that we don't call this function when we apply a decorator I will print you add fudge close enough we'll add a bar of chocolate then call the base function that we receive then we need to return the wrapper function all right given our base function we can apply more than one decorator let's say that after adding sprinkles we will apply The Decorator where we add fudge so now we have the following output you add sprinkles you add fudge here is your ice cream so with decorators you can apply more than one decorator to a base fun function what if your basee function accepts Arguments for example when we get our ice cream we need to pass in a flavor like vanilla I will set up one parameter of flavor I will convert our print statement to be an F string here is your at a placeholder flavor of ice cream let's run this and see what happens all right we have a type error our wrapper function isn't set up to accept arguments what you'll see within wrapper functions is that they'll have parameters of args and quars to accept any number of arguments and keyword arguments then when you call your base function in this case get ice cream we will also set this up to accept any number of arguments and keyword arguments let's do that within our ad fudge decorator too our wrapper function will accept any number of arguments and keyword arguments same thing goes with the base function and now this should work you add sprinkles you add fudge here is your vanilla ice cream or any other flavor of your choosing like chocolate you add sprinkles you add fudge here is your chocolate ice cream all right everybody so those are decorators they're a function that extend the behavior of a base function in this case get ice cream decorators extend a function without modifying it if you would like to apply a decorator to a function you precede that function when you define it with at the name of The Decorator and you can apply more than one and well everybody that is an introduction to decorators in Python