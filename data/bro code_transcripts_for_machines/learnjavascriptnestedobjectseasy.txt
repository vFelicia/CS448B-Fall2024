so uh yeah we're doing a thing today today I got to explain nested objects in JavaScript nested objects are objects inside of other objects they allow you to represent more complex data structures a child object is enclosed by a parent object by using nested objects we have the capability of creating some very complex data structures for example a person object could contain an address object as well as a contact info object or a shopping cart object each item in your shopping cart is an individual object such as a keyboard a mouse or a monitor each of these child objects would have their own properties and methods for example a price a name specifications on the item a shipping method nested objects are just objects inside of other objects let me give you a basic example we'll create a person object const person equals an object we need a set of curly braces a person might have a full name property I will set that to be SpongeBob in this example SpongeBob SquarePants and age of 30 is SpongeBob a student is student he's in boating school so let's say that's true objects can also contain arrays we'll create an array of hobbies to declare an array you need to set a straight brackets what sorts of hobbies does SpongeBob have he knows karate he does jellyfishing I need one more uh let's say that he enjoys cooking now we're going to create a nested object this person object will have an address object so we need a set of curly braces a few of the properties of the inner address object could be a street SpongeBob has an address of 124 con Street his City will be bikini bottom and a country we won't do a full address but I think this is good enough for this example so SpongeBob lives in the ocean let's say that his country is international waters I'll just abbreviate International our person object has a nested address object inside of it taxes some of these properties of our person object we would type the name of the object use the property accessor which is dot then the name of the property full name SpongeBob SquarePants let's print his age 30 is SpongeBob a student that is true I'm going to display the array of hobbies person. Hobbies this will give you an array but if you need individual elements you have to list an index number so Hobbies at index zero would be karate one is jellyfishing index two is cooking let's console.log our person object dot the address object this would return an entire object if you need one of the properties within this object that's within the person object you would have to follow the inner object with the property accessor again that dot person. address. Street which would give you 124 con Street the city person. address. city Bikini Bottom person. address. country international waters so when accessing a property within a nested object you have to use the property accessor twice that dot if you would like to Loop through the properties of a nested object you can write a for Loop like this for const property in person. address console.log take our person object access the nested object address then use the index of operator the straight brackets give me the current property and there we are all right let's make something a little more complicated we're going to create a class that utilizes objects so we will begin with class address our class will have a Constructor for an address we need these three things feel free to add more if you would like a street City and Country then we'll assign these properties this. Street equals Street this. City equals City this. Country equals country now we'll create a person class class person our person class will also have a Constructor we'll need a name age and an address for the address I'm going to use rest parameters we can pass in different parts of an ADD address and store it within an array when we create a person object we will assign this.name equals name this. AG equals age now for the address we're going to construct an address object this. address equals a new address we're going to call the Constructor of our address class and pass in our address I'm going to utilize the spread operator to spread our address we'll send our address object a street City and Country all right let's construct some of these person objects const person one equals a new person this will call the Constructor but we have to pass in arguments to match the parameters a name we'll just do a first name to keep it short and age SpongeBob will be 30 we also need an address a street City and Country 124 con Street City will be Bikini Bottom his country will be international waters and just for readability I'm going to put the address on a new line let's create person two person two will be Patrick Patrick age 37 Patrick will live on 128 con Street you'll have the same city and the same country then let's make person three person three will be Squidward age 45 Squidward will live on 126 con Street all right let's see if this all worked console.log let's start with person one person one. name which is SpongeBob age 30 let's get his address address and this returns an object which is good that's what we wanted we have a nested object an address object for some of the properties within that address object we have a street City and Country we use the property accessor again of dot give me the street 124 con Street the city bikini bottom and the country international waters all right let's confirm this with person three just to be sure it all works person three give me the name Squidward age 45 address gives me an object we'll use the property accessor again give me the street 126 con Street the city bikini bottom and the country international waters this will also all work for person two if it worked with person one and three all right everybody so those are nested objects they're objects inside of other objects they allow you to represent more complex data structures a child object is enclosed by a parent object in this example our address is the child object of the person object we're creating a new object within our person object and well everybody those are nested objects in JavaScript