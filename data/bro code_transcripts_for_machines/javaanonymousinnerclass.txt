how's it going everybody its bro here hope you're doing well and in this video I'm going to teach you guys all about anonymous inner classes in Java so let's get into it if you find this video helpful please remember to Like comment and subscribe your support will help keep this channel running hey everyone we're gonna be discussing anonymous inner classes and I've quite the definition here for you but don't worry it won't be too bad so an anonymous inner class is an inner class without a name hence the term anonymous right so only a single object is created from one when we use this and this object may have extras or changes and there's really no need to create a separate inner class because we only really use this once and the reason that we use an anonymous inner class is that it helps us to avoid cluttering code with a separate class name so the syntax is very similar to using a constructor except there is also a class definition that comes afterwards within a block of code and these anonymous inner classes are amazing for action listeners and you'll see why pretty soon so what I'm gonna do is that I'm gonna give you guys two examples one we'll just make a basic like welcome message and then for the second example we'll actually use an anonymous inner class for an action listener and you'll see why these are pretty great so let's go to our project folder go to the source folder and click file new class and let's call this class maybe greeting and we're just gonna display a welcome message within this class here so we'll make a public method that doesn't return anything so it's void and we'll call this welcome all right and then what we'll do with in here is just display a message such as maybe something lame like hello world okay let's create an instance of this greeting class so normally we would type in greeting the name of the class then come up with a name for this unique object so maybe greeting with a lowercase G equals new greeting okay and then we can use the hello function or the Welcome function of our greeting class so we type in the name of our object reading dot welcome and when we run this it displays hello world now we can use an anonymous inner class with this object here this greeting class so what we do after the constructor we're going to add a set of curly braces and now this is like a whole new class definition we can actually make a change to one of the methods within here and I'll actually copy this and paste it within here and what I'll do is maybe change this message to something professional like yo bro and now if we were to run this this Welcome function is actually going to display yo bro because it's as if we over rid this welcome method within our greeting function and it's usually good practice to add a message that says override if you override a function of some sort now what would happen if we created another instance of the greeting class but we did not use an anonymous inner class so we're going to create a greeting to object and then we're going to use the Welcome function of this greeting to object so we'll add that right after so greeting too and we'll use the welcome message and run the program so greeting one is yo bro and greeting two is HelloWorld and that's to be expected because the greeting to instance isn't using this anonymous inner class then so that's one of the uses for anonymous inner classes is because you can make some sort of like extras or changes to one specific object and that's really if you don't feel like creating a separate inner class within another class if you really only need plan on using it once then so that's the first example I'm going to give you guys another example of why these are actually great for using action listeners so I'm actually going to delete all this and don't worry I'll post all of this in the comments down below if you'd like a copy then I'll also delete this greeting class all right well for our what I think we'll do is create a simple jframe that contains three buttons and each of these three buttons will have a action listener that utilizes an anonymous inner class so they each can do something separate and you'll see the main benefit of this pretty soon so let's create a new class so go to your source folder then go to file new class and we'll call this maybe my frame because I can't think of any better ideas alright and we'll want this to extends jframe so then go back to your main class make sure you get this import to go back to your main class we're going to create an instance of my frame so my frame and we'll call this instance maybe my frame with a lowercase M equals new my frame alright we're going to do everything else within our my frame class so what we'll want to do is create the constructor for the my frame class so we'll add that here my frame parenthesis curly braces let's create three buttons so will instantiate three buttons before our constructor so to do that type in J button we'll call the first button button 1 equals new J button and let's add some text right away so within the parenthesis just type in button number one I guess okay then we'll need to import something so Java xwing dot J frame actually I'll just import everything here okay so then let's copy these and add a few more buttons so maybe button two and change it here as well and button three alright now we'll need to create the frame so we'll do that within our constructor so since my frame extends the jframe interface or parent class i should say well type in this dot set default close operation jframe dot exit on close you probably know the drill by now with J frames and this dot set size probably 500 by 500 for this example and this dot set layout to null because we don't want a layout manager not really necessary and this dot set visible to true okay let's add all of the buttons to our jframe so this dot add button one same thing with button two and button three okay we'll also need to set the bounds for each of these buttons so button one dot set bounds will place this where X is 100 y is 100 this will be 100 by 100 pixels long so it's a square ok so let's do this for buttons 2 & 3 so button 2 and button 3 and we'll just change the x position to 200 and 300 okay let's see what we have so far okay that's not too bad to begin with currently they don't do anything so with fast lessons if we wanted to utilize an action listener we would need RJ frame to implement the action listener interface and I wouldn't copy this down we're just going to delete this right away so we would have this class implement the action listener interface we would need an action performed method and then we would also need to add the action listener to each of these individual buttons so for example we would say a button 1 dot add action listener and then we need to pass in an action listener and we can just type in this so we're passing in an action listener as an argument but if we use an anonymous inner class we actually don't have to do all this crap so we can actually get rid of these and I'll show you a better way of doing this now so we're going to get rid of implements action listener if you did write that down and instead of passing in this we're going to create a new action listener so new action listener parentheses and then we're going to create an anonymous in her class within this set of parentheses so add a set of curly braces and then you'll probably get a prompt for add unimplemented methods so this button has its own actionperformed method now and we can do something very specific just for button one and this is kind of like in the first example where we displayed a different print lining statement that said yo bro so let's type in something different so if system dot out dot print line maybe you pressed button number one all right so let's actually copy all this and paste it and make a few changes for each of these buttons so button two will have its own action listener and we're utilizing an anonymous inner class and this action performed method will do something else such as you press button two and let's do the same thing for button three and you pressed button three so it's like we don't have to have all these buttons share the same action performed method they can all have their own and we don't need this whole class to implement the action listener interface so this is a lot cleaner coding so let's try this now okay so here are the three buttons you press button one you press button two you press button three so we know that it works so that's one of the great things about using an anonymous inner class there's no need to create a separate inner class when we're really only going to use this class for one specific thing like make one specific change like for example an action listener where we can hook up an action listener to each individual button and they'll each have their own action performed method so that's everything you need to know to get started with anonymous inner classes if you want a copy of all this code I'll post this in the comments down below and well yeah that's how an anima sinter classes work in Java hey you yeah I'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a Bella bro