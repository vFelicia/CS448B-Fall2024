hey what's going on everybody so today I'm going to be explaining 2D lists 2D meaning twodimensional you do also have the capability of creating 2D tuples I thought today we would use 2D lists just because they're pretty flexible a twodimensional list is just a list made up of lists it's really useful if you ever need a grid or Matrix of data kinda like an Excel spreadsheet let's create three lists a list of fruit vegetables and meat I'm going to speed up this video feel free to pause if you need to catch up here I have three lists a list of fruit vegetables and meat each of these lists is a onedimensional list to create a twodimensional list well you would begin by creating a onedimensional list let's create a list of groceries all I would need to do is add my individual lists as elements to the outer list the 2D list we have fruits vegetables and meats normally to print a list or your other collections you would print the name the list in my list fruits I have apple orange banana coconut to access or change one of the elements you would type the name of the list then use the index operator so fruits at index of zero is a pineapple again with a 2d list it's a little different if I were to print my 2D list of groceries we would lay out the entire 2D list flat we have individual lists separated with a comma all enclosed within a set of square brackets taking the elements found within our 2D list I'm going to line these up kinda like this it kind of represents a grid or Matrix with rows and columns each individual list resembles a row each element resembles a column if I were to print groceries at index 0 in place of returning one element found within one of the lists that would return an entire row so groceries at index 0 is my fruits list groceries at index one is my vegetables list groceries at index two is my meets list for one of the elements found within one of the rows you would need two indices if I need the Apple from the first row within my 2D list of groceries that would be row zero column zero it's kind of like coordinates row 0 column zero that would be my Apple zero one which is an orange zero two is banana zero three is coconut for the next row I would set the first index to be one Row one column zero that would be celery I'm gonna speed run this real quick just to show you all the different elements one one is carrots one two is potatoes if we try to access one three that index is out of range because we only have three elements within this row so then the next row would have an index of two column zero would be chicken two one is fish two two is Turkey Two Three is out of bounds to access an element from a 2d list you would need two indices in place of one because using just one would return the entire row like so now when you declare a 2d list you don't need to necessarily give each inner list a name we could do something like this I'm going to replace these names with the rows I'm just going to put these on a new line to make it more readable there that would work too just separate each inner list with a comma then enclose everything with a set of square brackets if you ever need to iterate over the elements of a 2d list you can use nested Loops if I were to use a single for Loop let's say for every uh maybe collection for every collection in groceries let's print what our collection is using a single for Loop would iterate over the rows but to also iterate over the elements found within each row we would use a nested Loop for every food in our collection let's print what our food is using nested Loops we can iterate over all of the elements found within our 2D list but I'm going to make this more organized like that grid structure we have I'm going to replace the new line character at the end of a print statement with a space then when we exit the nested loop I will print a new line by using just an empty print statement there that kind of resembles our grid structure we have rows and we have columns with twodimensional collections you're not limited to just lists you could create a list of tuples so the inner rows will be surrounded with a set of parentheses you know this is also valid too or you can make a 2d Tuple it's a tuple that's made up of tuples you could make a tuple made up of sets sets are enclosed with a set of curly braces here we have a tuple made of sets use whatever is best for your own programs let's go over an exercise let's create a twodimensional keypad that you would normally find on a phone we have three data types a list a set or a tuple the elements in a set are unordered so we can't use that these numbers need to be in order if we have the option a tuple is faster than a list a tuple is ordered and unchangeable so we should use it if we can and that's perfectly fine let's create a 2d Tuple this time I will name this 2D Tuple numpad we have an outer set of parentheses then an intercept of parentheses for each row we will have four rows the first row will be one two three the second row I'm going to put this on a new line four five six the next row will be seven eight nine then the last row will be an asterisk character then zero then the pound sign so numpad in this case is a 2d Tuple let's use a for Loop to iterate over every row this will be the outer loop for every maybe Row for every Row in numpad let's begin by printing our row so we're printing every Row in our numpad but I'd like to remove the parentheses let's create a nested Loop for every maybe numb for numb in row print whatever that num is we have one long vertical line let's replace the new line character at the end of our print statement with the space then when we escape the nested Loop let's print a new line and there is our telephone number pad you can see it's a grid made up of rows and columns so yeah that's a 2d list well a 2d collection it's a collection that's made up of collections then with our numpad we made a 2d Tuple if you ever need a grid or Matrix of data a 2d collection would work perfect and there you have it everybody those are 2D collections in Python