all right interfaces an interface is much like a parent class or base class it defines a sort of contract that all classes inheriting from need to follow an interface can contain properties methods events and if there's any of those declared within an interface anything that inherits from that interface needs to be implemented within an inheriting class an interface declares what a class should have and the class that it inherits from defines how it should do it exactly so here's an example we'll create three classes rabbit hawk and fish and two interfaces prey and predator all right now let's create two interfaces to create an interface you type interface and then the name of the interface however a common naming convention with interfaces is that you precede the interface name with capital i so if we would like a prey interface we would type i pray and then let's create a predator interface interface i predator now with these interfaces we can pretty much declare anything within these interfaces but if one of these classes would like to inherit from this interface they need to implement anything declared within them so let's say that if your prey then you need a method to flee because you're fleeing from predators i'm going to declare a flea method void flee we will declare it but not implement it implementing this method is the job of the inheriting class that would like to use this interface let's say that rabbits will inherit this interface i pray colon i pray and in order to do so we need to implement this method of fleet within the rabbit class in order to use it public void flea and then be sure to add a body to this method so when we invoke this method let's write the rabbit runs away okay now we can create a rabbit object rabbit rabbit equals new rabbit and i bet there's a flea method rabbit dot flea and let's try it the rabbit runs away now let's have our hawk class inherit this predator interface now with our predator interface let's create a method to hunt void hunt we will declare it but not implemented implementing this method is the job of the classes inheriting this interface so hawk will inherit the i predator interface but we need to implement that hunt method public void hunt and then let's display the hawk is searching for food and we can create a hawk object hawk hawk equals new hawk so let's take a look at our hawk object hawk dot and there's no flea method because we're not implementing the prey interface we're implementing the predator interface so there is a hunt method and not a flea method hawk.hunt the hawk is searching for food now with interfaces you can inherit more than one unlike with standard inheritance so fish they could be both prey and predators two inherit two interfaces after the colon you can separate each with a comma so fish will inherit the i prey and i predator interfaces but now they need to implement both of these methods flea and hunt so let's do so public void flea the fish swims away and now we need to implement that hunt method public void hunt the fish is searching for smaller fish all right now let's create a fish object fish fish equals new fish so fish have both a flea and a hunt method fish dot flea fish dot hunt the fish swims away the fish is searching for smaller fish so an interface defines a sort of contract that all class is inheriting from should follow an interface declares what a class should have and the inheritance class defines how it should do it the benefits of using interfaces for one is that you can inherit multiple interfaces unlike with standard inheritance there's added security and this gives us a plugandplay style of coding because anything that has the same interface will definitely have the same implemented methods and properties so you can swap these out for like a different creature if you would like so yeah those are interfaces if you found this video helpful please be sure to give this video a thumbs up leave a random comment down below and subscribe if you'd like to become a fellow bro