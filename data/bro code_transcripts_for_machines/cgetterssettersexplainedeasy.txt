hey everyone let's talk about getters and setters getters and setters are used within this concept of abstraction where we hide any unnecessary data from outside of a class getters are functions that make a private attribute readable setters are functions that make a private attribute writable here's an example i'm going to create a stove object class stove then i will instantiate a stove object stove stove in previous topics when we created attributes we would use the public access specifier then write any attributes in this example let's say int temperature i'll go ahead and set this to zero right away since this attribute temperature is public it's accessible from outside of the class that means that people can change it for example i will take my stove object set the temperature attribute to a really high setting that doesn't exist like a million this is fine then i can display the temperature standard output the temperature setting is stove dot temperature the temperature setting is 1 million i don't want people to mess with my temperature attribute what i could do instead is set these attributes to be private we're following that rule of abstraction we're hiding any unnecessary data from a user that they don't need we no longer have access to this temperature attribute from outside of the class you can see we have some red underlines temperature is private within this context this is a hidden attribute from the outside world if i need access to the value found within this temperature i can write a getter it's a function that will make an attribute readable i'll add a public access specifier then write a getter we're returning an integer i'll write get then the attribute name temperature all i'm gonna do is return our temperature i can no longer update or change the temperature it's readable but not writable so i'm going to turn this line into a comment in place of accessing this attribute directly i'm going to invoke the get temperature method stove dot get temperature add a set of parentheses now the current temperature setting is set to zero adding a getter will make an attribute readable if you need a private attribute to also be writable you can add a setter void set temperature this arrow temperature equals our temperature that we pass in then we just need a parameter int temperature in order for a user to change the temperature they would need to invoke the set temperature method then they can pass in a new temperature using this setter they can still set the temperature to whatever they want like a million in the previous example the temperature setting is set to 1 million within a setter we can add some additional logic or checks before we do set the temperature let's check to see what the temperature is if the temperature the user passes in is less than zero we will set this temperature to be zero else if the temperature is greater than or equal to ten suppose this is a knob with different settings the number zero through ten this temperature equals 10. in case they type in a million it'll just max out at 10. else this temperature equals temperature i could attempt to set the temperature to a million but it would just max out at ten or we could try a negative number like negative three well now the temperature setting is set to zero as if the stove was off or anything between maybe five something right in the middle the temperature setting is five so yeah that's kind of the purpose of getters and setters they make a private attribute either readable or writeable or both if you use both one additional step you can take too is that if you have a constructor you can invoke the setters within a constructor within my stove class i have a constructor if we were to receive a temperature we could set the temperature right away so we already have this line of code within our setter so we don't necessarily need this line again we would instead invoke the setter set temperature pass in our temperature then if i was to instantiate a stove object i would have to pass in a temperature i'll set it to be zero and this temperature setting is set to zero so yeah those are getters and setters everybody a getter makes a private attribute readable a setter makes a private attribute writable within the getters and setters you can perform additional checks or logic which is pretty nice if you're looking for some additional practice post a class that has a getter and setter in the comments section down below and well yeah those are getters and setters in c plus