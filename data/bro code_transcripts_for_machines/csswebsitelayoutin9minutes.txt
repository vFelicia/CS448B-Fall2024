hey what's going on everybody today I'm going to show you a basic Website Layout using HTML and CSS all right let's begin so we should know what semantic tags are semantic tags they include but are not limited to headers nav elements main section aside articles and Footers you'll want to use semantic tags because they keep your content organized they're better for search engine optimization and they assist with screen readers and other technology for accessibility so I've already written some HTML markup I just want to describe this first headers are used for introductory content such as a title a logo or author information nav elements they're used for navigation bars or other links sometimes you may find a set of navigation Links at the bottom of your page but having a navigation bar is fairly common now the main content which is all of this it can contain one of many subelements such as sections as side elements articles and generic developments so sections which is what I've created here in the middle this is for dependent content you would typically put anything you want within a section it's typically used for dependent content if I were to take this section out of the web page then put it on another web page it might not necessarily make sense like what is it for that's why it's dependent and a side element is meant for side content this can include author information fun facts quotes external links comments or really any other related content that's related to a section now an article this represents independent content this could include news articles job posts or blog posts articles are really similar to sections with articles it's meant for independent content for example a news article if I were to take this news article cut it out and put it on a different website it would still make sense it's independent content it's not reliant on the context of the website whereas in a section would be and then lastly we have Footers a footer is for a closing content this could include author information copyright information and sometimes navigational links there's really no onesizefitsall approach really the design is up to you but this is a really common format now that we know the basics let's actually design this alright so we will create our semantic elements we have a header a nav element a main element and a footer element within our header element let's just add an H2 element that says header so let's go to our style sheet I'll take our header element let's change the background color background Dash color let's pick a light gray color I'll use hsl values because I like them 84 or 85 is good then let's text align Center and add a little bit of padding 25 pixels okay let's work on our navigation bar it's not going to be a fully functioning navigation bar we've done that in a previous video Let's just allocate some space for navigation bar it is common to have more than one navigation element per web page if we're creating a navigation bar we should set the class to be something like navbar so it's descriptive let's go to our CSS style sheet I will select our navbar class then change the background color let's go with the darker color I'll add some height 50 pixels and that should be good we're just allocating some space we're not creating a full navigation bar there's a little bit of margin around the body of our document I'm going to remove that by selecting our body element then set the margin to be zero or zero pixels that should get rid of the margin all right then we have our main element our main element can include any combination of a side sections articles or even just some generic developments but we won't be working with div in this video really you can see any combination of a side section article or div or maybe even none of them it's up to you in this topic we'll stick with one aside element one section and one article these elements are kind of like sub elements within our main element our main element is going to be the main stake and potatoes of our web page so with our side element I'll include an H2 element for a header this is a side let's do the same thing for Section this is a section then this is an article let me separate these just so that they're easier to see just to take up some space I'm going to create some sample paragraphs our side element will have one our section will have two paragraphs I'm just copying and pasting and our article will have two as well I don't want this top to bottom layout we can change that with some CSS properties so let's work on our side element first with our side element I'll set the width to be 20 of the width of the web page RSI element only takes up 20 percent of the space available the following elements can float we have to set the float property to be left then in this case all right let's copy aside change aside to B section that's our next element I'll set the width to be 40 percent then we have article change section to article and the width will stay at forty percent these three elements can all fit within the web page the total width is under 100 we have our three elements within our main element so if you would like to add a little bit of padding this is what you're going to do let's add 10 pixels of padding to each of these elements when we calculate the width we don't take into account any padding so one change we're going to make is that at the top of our CSS style sheet we can select all elements with an asterisk then a set of curly braces we will set the Box sizing property to border Dash box what we're doing with this property is that when we calculate the width factor in the padding all three elements should be lined up now alright then lastly we have our footer So within our footer element I'll just add an H2 element that says footer then I will style it let's copy what we have for our header paste it change header to be footer now what we need to do is clear our float because we're still floating the elements that come after let's display our footer as a block level element to clear a float you can set clear than both and that should clear that alright so here is a basic Website Layout for a desktop this isn't a good format for a mobile device though with a mobile device you would want each of these elements to be on top of each other so you can scroll down we can add an at rule so at media screen and Max width 600 pixels so what we're doing here is that if the width of our screen or window is 600 pixels or below we can change some CSS properties with a side section and article let's select those aside comma section comma article we'll just change the width to be 100 percent if a user is on a mobile device and or the width is 600 pixels or below then we'll switch to a mobile version of the web page each of these elements are a side section and article elements are taking up 100 of the width available then if we were to expand this web page or we're viewing on a desktop we switch to the desktop version this is also known as responsive CSS all right everybody I know I covered a lot today but that is a basic Website Layout using HTML and CSS