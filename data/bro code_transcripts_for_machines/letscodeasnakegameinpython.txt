hey what's going on everybody it's your bro hope you're doing well and in this video we're going to create a game of snake using python so sit back relax and enjoy the show first thing we should do is import from tkinter as well as the random module and let's define all of the different classes and functions that we'll need so let's create a class for our snake object as well as our food object so for the time being i'm just going to write pass for my classes we'll fill these in later so we have class snake and class food and let's define all of the different functions that we'll need so let's say we have a function named next turn change direction check collisions and lastly game over okay for change direction i'm going to have one parameter a new direction now when i create a game i like to place a bunch of constants at the top of my game constants are variables that you do not want to change later they're kind of like the settings however in python there are no constants compared to other programming languages so we're just going to create a bunch of variables that will behave like them so constants are values we do not want to change and they're kind of like the game settings and i placed them at the top for convenience and the naming convention for a constant is that all the letters are uppercase so these will be settings like the game width the speed etc so let's say the width of our game will be 700 but feel free to take the liberty to pick whatever size you want so we have game width game height i'll set this to 700 as well so it's a square let's say we have a speed the speed of the snake how often will our canvas update so let's say 50 but the lower the number the faster the game and a space size how large are the items in our game like the food and body parts of the snake so i'm going to pick 50 but you can change this and body parts how many body parts does our snake have when we begin a game let's say three how about a snake color you can pick a color name you can use rgb values or you can use a hexadecimal value so i'm going to pick green zero zero ff00 but you can pick any color you want how about food color equals red and that is ff000 and what about a background color for the canvas background color i'll pick black so that is six cereals feel free to mess with some of these colors too so we have a green snake our food is going to be red and our background is going to be black so that is all of the constants for our game but you can feel free to adjust them if you like let's head down to the bottom and make our window so we have window equals tk and at the very end we should have window dot main loop let's set a title for this window window dot title snack game okay fine i'll spell it right snake game and if you do not want your window to be resizable you can use resizable and then you have to pass in false twice it's kind of strange but it's how it is okay we should have a small window and we cannot resize this even if we tried okay let's create a score label but we probably need a score first so let's say a score equals zero and an initial direction direction equals let's say down now let's create a score label so let's say label equals label we're adding our label to our window let's set the text equal to score colon then i'm going to use the format method and we will pass in our score whatever it is and i'll set a font pick whatever font you prefer and 40 is a decent size and then i'm going to pack this label let's test it okay we're getting somewhere we'll need to create a canvas canvas equals canvas we're adding it to our window i'm going to set the background color equal to our background constant i'm going to set our height equal to the game height and the width equal to the game width that we set and we need to pack this canvas dot pack and we should have a game board i'm going to try and center this window when it appears so we can do that using a few lines of code the first thing we'll do is update our window so that it renders and then we need to find some dimensions so let's say the window width equals window dot w info width and window height equals window dot w info height we'll need our screen width equals window dot screen width and screen height equals window dot w info screen height where is it there it is okay then we need to see how much we're going to adjust the position of our window so let's say x equals screen width divided by two minus window width divided by two and do the same thing for y except this will be screen height and window height and that will be why okay then we need to set the geometry window dot geometry we're going to use an f string so let's set the window width times window height and then add plus x plus y so when we pass in x and y these cannot be floats they have to be whole integers so let's add a cast around x and y okay now this should be fairly close to the center yeah that's not too bad now when we begin a new game we should create a snake object as well as a food object snake equals snake and called the snake constructor and food equals food okay let's fill in our food class first because i think that'll be easier than our snake class so let's head to the food class now let's create an init method so def init this will construct a food object for us and we need to place our food object randomly so for the x coordinate let's say x equals random dot rand int and we need a range the range is going to be zero comma now with our game board i view it like a chess board there's a given amount of spaces so 700 divided by our space size is 14 possible spots on the xaxis and then 14 possible spots on the yaxis so i need to pick one of these spots randomly so let's say game width divided by our space size so we'll get a random number between 0 and 14 however this should be exclusive so let's say 1 and for good measure i'm just going to add a set of parentheses around this okay and then we'll convert this to pixels so let's multiply all of this by our space size the size of each item in the game and we'll do the same thing for y but change game width to height okay we should be good all right now let's set the coordinates let's say self dot coordinates equals a list of x and y and that's it uh but make sure you spell coordinates right now we need to draw our food object on our canvas canvas dot create oval you can pick a square 2 if you like we need a starting corner that will be where x and y is and an ending coordinate so that will be x and y plus our space size the size of an object in our game so x plus space size y plus space size and you can set a fill color too fill will be our food color that we declared and i recommend adding a tag as well that'll make it easy to delete this object so tag will equal the string food now let's just test this so we should have a random circle or a square if you picked a square up here someplace at some spot on my game board cool seems like it's working let's work on the snake class next our snake class will need a constructor and we will set a body size equal to our body parts we'll need a list of coordinates we'll fill this in later and a list of square graphics so that will be a list okay so we need to create a list of coordinates we can use a for loop for that so let's say for i in range zero through body parts we will take self dot coordinates and append a new list and the coordinates for each body part at the start of the game will be zero zero so that our snake will appear in the top left corner now we'll need to create some squares okay so for x y in self dot coordinates and remember that we have a list of lists so that's why we're using x y in self coordinates we'll create a square equals canvas dot create rectangle so we need a starting corner that will be x and y then x plus our space size the size of each object in the game let me use the constant though space size y plus space size and let's set a fill color equal to our snake color all right and let's set a tag for convenience tag equals a string of snake okay so we have a list of squares and we can append each square into our list self dot squares dot append and pass in whatever square that you create so we have a snake that has a body size a list of coordinates and a list of square graphics now after testing this we should have the head of our snake in the top left corner and now we just need the snake to move in a given direction every turn so the initial direction is down but we'll be able to change that later so let's head to the next turn function and there's actually two things we'll need as parameters that i forgot to fill in snake as well as food and we will call this function when we begin our game so let's unpack the head of the snake so that's x comma y equals snake dot coordinates at index of zero so that's the head of the snake the coordinates will be stored in x and y so let's check to see if our direction our initial direction equals up and we'll need some else if statements we'll fill this in in just a moment else if our direction equals down then left and then right okay if our direction is up then let's take our y coordinate for the head of our snake minus equals our space size so that we move one space up and then down is plus equals space size left is x minus equals space size and lastly right is x plus equals space size okay then we need to call the next turn function again for the next turn so we can use window dot after we need the time so let's say our game speed we're going to call the next turn function and we need to pass in our arguments of snake and food snake food oh and make sure you're not actually calling the next turn function inside of the after method you just have to write the function name of next turn without the parentheses okay so let's update the coordinates for the head of the snake and write that before we move on to the next turn so snake dot coordinates and we will insert a new set of coordinates after updating one of them so zero will be the index the head of the snake and we will insert x and y coordinates at this new location now we're going to create a new graphic for the head of the snake square equals canvas dot create rectangle pass in x and y for the starting corner of our rectangle and the ending corner will be x plus our space size y plus our space size then i will add a fill color of snake color and then we need to update our snakes list of squares so that will be snake dot squares and insert at index zero a new square that we create okay let's test this one last thing that we'll need to get this program to run is that after you create your snake and food object we should call the next turn function and pass in our snake and food object so we should be able to test this so our snake is going to move but we need to delete the last body part in our snake within the next turn function but before we update to the next turn let's delete the last body part of our snake so delete snake dot coordinates at negative index of one that is the last set of coordinates we will update our canvas canvas dot delete snake dot squares an index of negative one and lastly delete snake the list of squares at index of negative one so it should appear that our snake is moving cool we need some controls for our snake so at the bottom of our program let's bind some keys let's do that here so window dot bind let's bind the left arrow key and we will use a lambda the argument is event and we will call the change direction function and pass in the word left okay then we have to do the same thing for the other directions so we have right pass in right up pass and up down pass in down let's head to the change direction function we need to access our direction global direction this is the old direction if our new direction that is passed in is equal to left and if our old direction just direction does not equal right because we do not want to go backwards and do a 180 degree turn then we will set our direction equal to our new direction and we just need to repeat this for the other directions for new direction and i'm going to change this to else if else if new direction is right and our direction is not already left then we have up our direction is not down and down if our direction is not up okay so we should be able to change the direction of our snake sweet okay we need to eat that pesky apple next so let's work on that there's nothing else that we need to change within the change direction function so i'm going to minimize this function and head to the next turn function we'll place an if statement here if x remember that we unpacked the coordinates for the head of the snake if x the x coordinate for the head of the snake is equal to our food objects coordinates at index of zero that's the xcoordinate for our food object and y is equal to food coordinates at index of one that means they're overlapping let's take our score and increment it by one and change our label label.config the text will equal score and then i'm going to use the format method and pass in my new score let's delete our food object and we gave our food object a tag so we can just use the name of the tag to delete it and create a new food object then i'm going to write this part of our program within an else statement we will only delete the last body part of our snake if we did not eat a food object okay let's test it again so i have three body parts now i have four five six seven eight nine ten you can see that the score is going up too okay let's work on collisions next because i should not be able to go off screen like this there's one thing that we're going to change so let's add an if statement that will check collisions this will return true or false if we detect a collision and pass in our snake object if there is a collision we'll call the game over function else we will update to the next turn okay let's fill in the check collisions function and we no longer need our function of next turn actually we don't need these classes either so i'll minimize them okay check collisions so it looks like we will need a parameter of snake so be sure to set that let's unpack the head of the snake x y equals snake dot coordinates at index of zero and let's check to see if we cross the left or right border of the game if x is less than zero or x is greater than or equal to our game width then return true i think for testing purposes i'm going to print something to the console window game over let's test it okay i'm going to go over to the right border game over and our game stopped let's go over the left game over cool so we know that it's working okay let's do the same thing for y we can use else if here if y is less than zero or y is greater than or equal to our game height let's print game over and return true and we should probably test it okay i'm going up game over and let's go down game over so what if our snake touches its tail or another body part so let's say for i actually i isn't too descriptive let's say for every body part in snake dot coordinates so we're going to set this to everything after the head of the snake we're going to check to see if any of the coordinates are matching if x is equal to body part at index 0 and y is equal to body part at index 1 then return true and i'll print game over to test it print game over otherwise we can return false there are no collisions i think i'm going to change the size of the snake to 10. okay let's run into each other cool game over the last thing that we need to do is to fill in the game over function because it looks like everything else is fine so head to the game over function take your canvas and delete all and we'll create some game over text canvas create text i would like this in the center of my canvas i'll take canvas w info width divided by two comma canvas w info height divided by two i'm going to put some of this on the next line for readability i'll set a font pick whatever font that you want we'll need some text text equals game over pick a color red's decent i'll add a tag too for convenience game over and that should be it for the game over function i'm going to change the body parts of the snake back to what it was originally and we should probably test that game over screen all right it appeared okay so let's change some of these settings around you can create a larger game board let's say 1000 by 700 that still works you can slow down the speed or speed it up so 100 will be about half as fast it's going pretty slow now but what if we set it to 20. you can change the space size so everything is a lot smaller now including the food object you can change the body parts what about 20 to begin with that's fairly excessive i'll change that back to three you can change the snake color let's say we would like a blue snake so that is for a hex color four zeros and then two f's you can change the food color so let's say we would like a yellow food object so that would be four f's and then two zeros kind of resembles the python logo that color scheme you can change the background color too so let's say all white that would be six f's do not like that go back delete delete delete all right well that should be everything let's run this game one last time well everybody that is a very basic game of snake for beginners i will post all of this code to the comment section down below but yeah that's a basic game of snake using python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you