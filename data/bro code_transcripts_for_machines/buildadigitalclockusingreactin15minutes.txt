hey everybody in today's video I'm going to show you how we can create a digital clock using react so sit back relax and enjoy the show okay let's get started everybody if you would like a background image for your app place that image within your assets folder here's the image that I'm going to use I found it online we will create a digital clock component within our source folder digital clock. jsx we will need to import two hooks import from react use object destructuring to get the use State hook as well as the use effect Hook from its location of react we're going to create a function based component of digital clock no parameters then be sure to export it at the end export default defaulty default digital clock we do need to return something for the time being we are going to return a fragment just so that everything runs back within our app component we need to import our digital clock component from its locationd digital clock. jsx we will include one digital clock component with our digital clock component we'll create the following HTML we will create a div element to contain everything this outer div element is going to have a class name of clock container within this development we will create a nested development this development will have a class name of clock we have a clock within a clock container within this inter div element we will create a span element to display a time until we get the time working let's display a bunch of zeros for the hours minutes and seconds and here's our time but it's a little small I'm zoomed in currently okay let's go to our CSS stylesheet we will select the following the body of our document our clock container class and our class of clock if you would like to add a background image here's what you can do within the body of your document we will set the background image property to be we will use the URL function within this function we will pass in a relative or absolute file path to your image from the index file we'll have to access the assets folder assets the name of the image my image is named background and this is a JPEG okay here's my image but it's a little big then we will take our background position property set it to be Center to Center the image now it does repeat we'll set the background repeat property to be no repeat we'll set the background size to cover to cover this develop the outer development background size cover now we'll take the background attachment property set it to be fixed as we adjust the size of the window the image is going to adjust accordingly and maintain its aspect ratio we do have a little bit of margin around the body of our document I'm going to remove that margin zero next we have to work on the clock itself it's a little small within the clock class I will set a color of white I'll increase the font size because we can barely see it to 6 RM that should be a decent size and a font weight of bold pick a font family I will pick monospace I think that'll look good for a clock I will also add a text Shadow effect with a horizontal and vertical offset of three pixels each and a blur of five pixels pick a color I'll pick black but I'll lower the alpha to 75% or so then I will Center Aline align my text text align Center our clock is centered horizontally but not vertically within the window if you would like the clock in the exact middle of the window here are some following optional CSS properties you can add these are optional we'll use flex box display Flex to display all the elements justify content Center to Center this clock vertically within the middle of our window we have to set the maximum height of the body to be 100% of the viewport height We'll add this following property set the minimum height of the body to be 100 VH for the viewport height 100% of the viewport height then use the Align items property set it to be Center to vertically align it and I think that looks pretty good now we'll select our clock container for the background of the clock container I would like it so it looks like we're looking through glass here's how to do that we will use the backdrop filter property use a function of blur pass in a number in an amount of pixels the greater the number the greater the blur here's five pixels here's 50 what's 500 look like okay let's go with 5 pixels we have a little bit of a blur effect if you would like the clock container to take up 100% of the viewport width you can add the following property set the width of the clock container to be 100 VW for viewport width so now the clock container takes up 100% of the width of the window then I'll add a little bit of padding to the top and bottom but not the sides padding 10 pixels for the top and bottom zero for the sides we should get a little bit of padding on the top and bottom I like that I think that looks pretty good okay we can save everything we no longer need our CSS stylesheet and now we will be working within the digital clock component we'll be using the UST State hook we will create a state variable of time const time and a Setter for time named set time equals the use State hook for the initial state of the US state hook we will pass in a new date object whatever the current date and time currently is that's what the initial state of time is going to be it will be an object we will also use the use effect hook we can perform some code during each render or when we Mount or anytime time some sort of value updates when this component mounts we'll start an interval to move the clock forward there's two parameters within use effect a function to do something and an array of dependencies for our function we'll use an arrow function parameters Arrow do this and for our dependencies based on the last video we're just going to set an empty array I would like to start a timer only when we Mount the component we don't need to start a new timer every time the component renders what would we like to do once when our component mounts we will create a constant of interval ID equals set interval with set interval we can pass in a call back and a time in milliseconds to repeat this call back let's do some code every 1,000 milliseconds meaning every 1 second let's do the following we'll write an arrow function to do this every 1,000 milliseconds we will update the state of time using our Setter of set time we will pass in a new date object and that's all we need so after every second we will update the state of time with the new current date and time now if we do unmount this component it would be good practice if we were to clear our timer if we don't it may lead to unexpected Behavior we will add a cleanup function when this component unmounts we will return the following do this function we will call the function to clear interval and pass in that interval ID to stop this interval if we ever unmount our digital clock we don't want it to continue running we want to free up any resources if we don't that may lead to unexpected Behavior so that is all we need with use effect when we Mount and that's it create an interval that updates once every second when we unmount the component clear that interval and that's it now we will also need a function to format time function format time there are no parameters we need to get the hours minutes and seconds of our time the state variable of time that's pretty simple though we will declare using let let hours equals our time State variable use the method of get hours let's do this with minutes let minutes actually let's declare this as const const minutes time.get minutes and seconds const seconds equals time.get seconds we will also find what the meridium is is it AM or PM we'll have to write the following const meridium equals let's examine our hours is our hours greater than or equal to 12 our time in hours is going to be in military time I believe that's 0 through 23 technically if ours is greater than or equal to 12 tary operator if this is true meridium will be PM otherwise meridium will be am with hours we're going to reassign it let's say that it is 1 p.m. so hours will be 13 1 hour after 12 if I don't want to display my time in military time I'm going to reassign hours we'll take hours modulus 12 modulus gives you the remainder of any division for example if ours is 13 13 modul 12 has a remainder of 1 so that's how you can convert from military time use modulus 12 what if hours is 12 12 modulus 12 is zero if it's 1200 we don't want to display zero we can add the following use the or logical operator or return 12 if this equation is zero that is equivalent to false so using the or logical operator hours would instead equal 12 then within format time we're going to return one long template string we will display a placeholder with hours colon a placeholder with minutes colon a placeholder with seconds space placeholder our meridium then within our span element we will display embed some JavaScript called The Format time function here's the current time for me it is 752 at night p.m. and the time is updating now we have a problem if one of our units of time is a single digit we don't have any leading zeros so let's fix that we will declare a function function pad Z there's one parameter we have to pass in a number with ours minutes and seconds we will pass each of these units of time to the pad zero function so we will enclose each of these within the pad zero function then return a result so let's pad our hours with zero pad our minutes with zero and Pad seconds with zero okay we have undefined undefined undefined that's okay so within pad zero we have to return something we need to check to see if our number is a single digit we can do that with checking to see if number is less than 10 if it is it's a single digit we'll use the tary operator is our number a single digit is it less than 10 if that's true we're going to return a string of zero if not we don't have to do anything we'll return an empty string we will take all of this and close it within a set of parentheses return either zero or an empty string plus the original number for example if our number was one one is less than 10 that is true we'll return a string of zero then new string catenation and add our original number of one so we would return 0 1 if our number was 12 well this condition is false we would return an empty string plus the original number of 12 which would give me a string of 12 so here's the result we have each unit of time with the leading zero if it needs it and we have successfully created a digital clock component and the cool thing about doing this in react is that we can reuse this component whenever we want we can create one digital clock component or another or another or another and Let me refresh these to synchronize them these are all individual components running their own code all right everybody so that is how to create a digital clock component using react