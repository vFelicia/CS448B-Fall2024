oh yeah let's do this all right the static modifier the static modifier is used to declare a static member one which belongs to the class itself rather than any one specific object i have a class named car cars have a field named model and a constructor to assign a model when we instantiate a car object and i have two car objects car one and car two car one is a mustang car two is a corvette here's the situation let's say that we're going to have a race but we need to keep track of how many cars are instantiated that are entering our race one way in which we can do that is to create a static field to keep track of how many cars are created so let me show you what this looks like with a nonstatic field first so let's declare an integer variable named number of cars to keep track of how many cars we create so i will declare this but not yet assign it and within my constructor i will increment number of cars by one remember that with constructors you're not limited to only assigning values to fields you can do like any sort of code that you want remember that it's just another kind of method okay so every time we instantiate a car object we will increment number of cars by one and then let's display a number of cars so we need to access this in a nonstatic way by typing the name of a car object like car one dot followed by the name of the field but it looks like we need to make this public public and number of cars car one dot number of cars let's do the same thing for car two car two dot number of cars now you would think that the number of cars would be two right and that's where you're wrong number of cars for both car one and car two are both one because each car object has their own copy of the number of cars field and within the constructor when we increment each copy of number of cars well it's only ever going to be a maximum of one so one way in which we could fix that is to change this field to a static field after public type static public static int number of cars and we can no longer access this field in a nonstatic way by typing the name of an object followed by the name of the field we would have to access this field in a static way by typing the name of its class followed by the name of the field so type the name of the class car followed by you know dot then the name of the field so this field now belongs to the car class and no one object has complete ownership of it it's kind of like they're all sharing the same variable and let's try this again so the number of cars that we have created is two now just to test everything let's create a third car we have a third racer within our race so car 3 will be a what about a lambo and we now have created three cars so again by preceding this field with the static modifier the class now owns it we can also apply the static modifier to a method as well public static and we'll create a method to begin our race let's call this start race so we don't want each object to be able to start the race on their own terms right so it would be better if the car class itself has a start race method so then if we would like to begin our race we can access it in a static way the race has begun then if i need to invoke this method i type the name of the class car dot the name of the static method start race then a set of parenthesis to invoke it and this should now begin our race the race has begun and then you can also apply the static modifier to a class itself but then you can't instantiate objects from this class you can see that we're getting errors cannot declare a variable of static type cart so that's kind of like the deal with the math class in order to use a method of the math class we wouldn't create like a map object right like math math1 equals new math right and then we wouldn't type math1 dot round to round a number it's a lot easier just to use directly the math class and type math.round so that's kind of the idea behind a static class you can't create objects from a static class and we kind of learned about that in the video on classes well in conclusion the static modifier can be applied to a field a method or a class itself anything that is declared static now belongs to the class and no one object has ownership of it so that is the static modifier if this video helped you out help me out by smashing that like button drop a random comment down below and well yeah that's the static modifier in csharp