what's going on people it's bro hope you're doing well and in this video we're going to discuss the insertion sword algorithm in computer science as always sit back relax and well enjoy the show all right everybody insertion sword now what we do with insertion sort is that we begin at index 1 we take the value found within move it to some temporary storage like a variable named temp to temporarily hold it we examine elements to the left if any elements are larger than what's within temp we shift those elements to the right so 6 is larger than 1 we shift it to the right if it's less than whatever's within temp we stop or until we run out of elements so we have run out of elements we take this value found within temp and place it at this opening here that was the first iteration let's move on to iteration two take this value place it within temp examine the elements to the left if this element is greater than temp then we shift it to the right it's not so we stop here and place this value back where it came from so that was the second iteration iteration three take this value place it within temp examine the elements to the left if they're greater than four we shift them to the right seven is larger than four shift it to the right six is larger than four shift it to the right one is not larger than four so we stop here take whatever's within temp this value four and insert it here into this opening so that was the first three iterations we repeat this process until we run out of elements so i'll speed up the footage so we are currently on index four so and that is your visual representation of the insertion sword algorithm i like to think of it like a jigsaw puzzle we have some pieces that are connected they fit together and we will move whole sections of pieces together to make room for a piece that fits so let's create our own insertion sword algorithm in java now we'll need to create an array let's create an array of integers int array and make up some numbers put whatever numbers you want within here uh maybe nine how about a one and an eight and a two and a seven three six five four that sounds good to me okay then let's display the elements of this array we'll use a for each loop for and i in array we will display each element within this array with a print statement so let me get rid of that print ln and just have print so i will print i i think i'm going to add a space afterwards i didn't do that in the previous two videos so i think i better do that okay let's just run this just to test it nine one eight two seven three four and before we display the elements of our array let's invoke a function which we still need to declare called insertion sort so insertion sort then we will pass in our array as an argument and we'll need to declare this so i'm going to cheat and create this automatically so outside of our main method create a method named insertion sort private static void insertion sort there is one parameter an array of integers okay now the first thing we'll do is create a for loop to iterate over each element of our array but it begins at one not zero so that would be four then we will set int i to equal one not zero pay attention to that we will continue this as long as i is less than array dot length and we will increment i by one during each iteration now we need to take our value found within i and place it within temp so let's declare a temporary variable named temp int temp equals array at index of i and now we'll create a variable named j int j equals i minus one so this will keep track of what value we're comparing to the left of whatever i is so then we need to create a while loop we will continue comparing values to the left of i and our condition is going to be while j is greater than or equal to zero and array at index of j is greater than temp so if we need to shift an element to the right we would say array at index of j plus 1 equals array at index of j so that will shift an element to the right then we will decrement j by one j minus minus and the last thing to do is to insert the value found within temp into that opening so that would be array at index of j plus one equals temp and that's all there is to it so let's run this oh yeah one two three four five six seven eight nine well people in conclusion the insertion sort algorithm compares elements to the left and it will shift elements to the right to make room to insert a value the insertion sort algorithm has a runtime complexity of big o of n squared it runs in quadratic time it's decent with small data sets but bad with large data sets and using insertion sort tends to be preferable to both bubble sort and selection sort it uses less steps than bubble sort and in the best case scenario insertion sort can run in ofn linear time compared to selection sort which the best case scenario is of n squared all right people so that is the insertion sword algorithm if you can destroy that like button leave a random comment down below and well yeah that's the insertion sword algorithm in computer science