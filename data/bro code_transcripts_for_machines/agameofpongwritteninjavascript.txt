hey what's going on everybody it's you bro hope you're doing well and in this video we're going to create a game of pong using javascript so sit back relax and enjoy the show all right let's begin everybody let's create a div section to contain our game div close it the id will be game container we'll add a canvas canvas close it the id will be game board i'll set a width and a height in line the width will be 500 the height will be 500 we'll add a score this will be another div section id equals score text the initial text will be 0 colon 0 then a reset button button close it the id is reset button the text is reset cool that's our html file let's head to our css style sheet id game board border 3 pixel solid let's change our score text next score text pick a font family font family pick a font that you like then i'll add a backup i'll change the font size to 100 pixels that should be readable okay let's work on the button reset button i'll set a font of permanent marker then a backup of cursive font size 22 pixels a width of 100 pixels a height of 50 pixels border 4 pixels solid border radius 15 pixels then cursor pointer when we hover our cursor over this button the cursor is now a pointer then let's enter everything i will select our game container text align center all right there we go so that's our css style sheet and our html file let's head to our javascript file let's declare all the constants first const game board equals document dot query selector we are selecting our game board const context equals game board dot get context 2d context is what we draw on const score text equals document dot query selector we are selecting the score text i'm just going to copy this then we have our reset button id is reset button let's store the game with within a variable what's the size of our canvas const game with equals game board dot width attribute then we have height game height equals game board dot height i'm only storing them within a variable so that they're accessible let's select some colors const board background what color i'll select forest green kind of like it's a tennis court const paddle one color what color would you like the first player to be i'll pick light blue then paddle two paddle two color player two will be red if you want you can add a border const paddle border equals black const ball color i'll make this yellow like it's a tennis ball const ball border color i'll pick black so what do we want the size of the ball to be i'll store that as a constant const ball radius i'll set this to be 12.5 then the full diameter is 25 then our paddle speed how far do we want our paddles to move when we press down on the button paddle speed equals 50. that's good enough feel free to change this number if you'd like now we have let interval id let ball speed i'll set this to be one that will be the lowest speed then ball x and ball wide they will be coordinates let ball x equal initially i'll place the ball right in the center of our game board i will take game width divided by two then ball y is going to be game height divided by two let ball x direction i'll set that to be zero ball x direction will be the direction in which the ball is headed on the x axis then ball y direction let player one score equal zero let player two score equal zero we'll define two paddle objects let paddle one equal this paddle will have a width property of 25 a height of 100 these are in pixels the starting x coordinate will be zero all the way at the left border then y zero so this petal will be in the top left corner initially so let's copy this paste it change paddle one to paddle two the width and the height will be the same i would like paddle two to be on the other side of my canvas i will set x to equal game width then i'm going to subtract negative 25 whatever the width is if i set x to be game with the left border is going to be lined up with the right border of my game board so i'm just going to shift it over by the width 25 pixels so that you can actually see it then y is game height minus the height of our paddle and those are the two paddles let's add an event listener to the window to listen for key down events window dot add event listener we will listen for key down then we will invoke a change direction function let's add an event listener to our reset button reset button dot add event listener we are waiting for click then invoke the reset game function we'll still need to declare these two functions when we would like to start our game we'll invoke the game start function then we'll need to declare these functions the first function is function game start we'll fill these in momentarily function next tick function clear board function draw paddles function create ball function move ball function drawball function check collision function change direction function update score function reset game okay those are all the functions why don't we begin by drawing the paddles we'll start with the easy stuff so we will take our context set the stroke style equal to the paddle border let's begin by drawing paddle one context dot fill style equals paddle one color context fill rectangle the first two arguments are the x and the y coordinate of the top left corner of the rectangle that will be paddle one dot x then paddle one dot y the next two arguments are the width and the height of this rectangle the width will be paddle one dot width then paddle one dot height to test this i'm going to invoke draw paddles right after game start temporarily okay there's our first paddle but let's add a border we can just copy this paste it change fill rect to stroke rat okay there is our first paddle let's copy these three lines of code paste it change paddle one to paddle two and there's our second paddle i'll eliminate this function call let's fill in game start when we begin the game what are we going to do first we'll create a ball then invoke the next tick function let's fill in the next tick function we will take our set interval id set this equal to set timeout method will pass in a callback then we'll add a routine what are all the things that we're gonna do first we will clear and redraw our board clear board then draw paddles move ball draw ball draw ball is going to have two arguments ball x ball y and we should probably fill that in within the parameters there then we will check collision then invoke next tick for another round i would like to repeat this routine every 10 milliseconds that is the next tick function let's fill in the clear board function all we're doing is redrawing our board let's take our context set the fill style equal to the board background context dot phil wrecked will begin in the top left corner zero zero the width will be game width the height will be game height and that's our background so that is the clear board function we're redrawing our canvas let's head to the change direction function this will be in charge of moving the paddles but we'll need to know what key that we pressed i'll store that as a constant key pressed equals our event dot key code uh so we do have one parameter that's event so fill that in let's display whatever key pressed is console.log key pressed w has a key code of 87 s is 83. the up arrow key is 38 the down arrow key is 40. so we can use that for something const paddle 1 up equals 87 const paddle 1 down equals 83 const paddle 2 up is 38 const paddle 2 down is 40. let's write a switch to look at key pressed switch we're examining key pressed against many matching cases the first case is paddle one up if we press up we will take paddle 1 axis the y property minus equals our paddle speed you could also think of paddle speed as paddle distance how far we're going to move then break so we should be able to move up but we can't move down paddle one down the y property of paddle one plus equals paddle speed by pressing s we can move down by pressing w we can move up but currently we're exiting the game board let's write an if statement to check that if paddle 1 dot y is greater than zero then we will move then within the second case paddle one down we'll write another if statement if the y property of paddle one is greater than game height okay now check this out so we can't go above the border but we can go below the border up to a certain point from game height we need to subtract the height of our paddle game height minus paddle one axis the height property we cannot go above the game board or below okay let's work on paddle two case paddle 2 up we'll check to see if paddle 2's y property is greater than zero then we will take the y property of paddle two minus equals the paddle speed so we cannot move paddle two above the game board then our last case is paddle two down okay let's copy what we have here within paddle one down paste it but change paddle one to paddle two the y property of paddle 2 plus equals the paddle speed with paddle 2 we shouldn't be able to go below or above the game board these paddles are complete let's close out of the change direction function let's work on the draw ball function we'll take the context set the fill style equal to the ball color context dot stroke style equals ball border color we can set a line width if we'd like context dot line with equals to context begin path context arc to draw a circle ball x ball y then the radius ball radius zero this is for radians two times math.pi context dot stroke method context dot fill method and there's our ball okay that is the drawball function let's head to the create ball function when we create a new ball let's set the ball speed equal to one let's begin with the xaxis if math dot round math dot random is equal to one this part of the condition will give us a random number between zero and one if that number is one let's move to the right if not let's move to the left so if we would like to move to the right let's set ball x direction equal to one else ball x direction equals negative one we're moving to the left okay let's copy these if else statements then change ball x to ball y then when we create a new ball we'll set it to be right in the middle set the ball x coordinate equal to game width divided by two set the ball y coordinate to game height divided by two then invoke the draw ball function pass in as arguments ball x ball y that's the create ball function then we need to move the ball ball x plus equals the ball's speed times the ball's direction ball x direction then do the same thing with y ball y plus equals ball speed times ball y direction so our ball should move in a random direction let's just test that by refreshing the page so let's close out of the move ball function now we'll need to check collisions let's check to see if we hit the top border if so then we'll bounce off of it if ball y is greater than or equal to zero plus the ball radius remember the center of the ball is where we place the x and y coordinates so that's why we're adding the ball radius to account for that if we touch the top border let's change the y direction ball y direction times equals negative one that will reverse the direction i'm just gonna test that so we should bounce off the top yeah let's check to see if we hit the bottom border if ball y is greater than or equal to game height minus ball radius then we will change direction okay let's check that yep we just bounced off the bottom what if we touch the left border if ball x is less than or equal to zero let's update player 2 score player 2 score plus equals 1. we'll update the score create a new ball then return once we hit the left border that should create a new ball yep there it is okay let's copy this if statement if ball x is greater than or equal to game width then we will update player 1 score when we hit the right border that creates a new ball okay now this is the tough part we're going to bounce off the paddles i'm going to maximize the screen if ball x is less than or equal to this is for paddle one paddle one take the x property plus paddle one axis the width property plus the ball radius on the xaxis if so let's check the yaxis if ball y is greater than paddle one take the y property and ball y is less than paddle one dot y plus paddle one dot height that means there's a collision we'll take ball x direction multiply this by negative one hey if you want for fun you can increase the ball speed ball speed plus equals one okay we should be able to bounce off this paddle yeah there we go okay let's do the same thing with the right paddle so i'm going to copy this section paste it is greater than or equal to the x property of paddle 2 minus the ball radius if ball y is greater than the y property of paddle two and ball y is greater than the y property of paddle two plus paddle two's height so we should be able to bounce off these paddles now then the ball speeds up so we do have one situation where the ball might get stuck kind of like this if that happens i'm just going to push the ball out of the way and move it forward ball x equals paddle one take the x property plus paddle one dot width plus ball radius this is if ball gets stuck this line of code helps prevent the ball from getting stuck within the paddle this statement will be ball x equals paddle two dot x minus the ball radius okay now let's update the score update score this one's easy score text dot text content equals i'll use the template literal player one score colon player two score so we should be able to keep track of the score okay that's one and one lastly we have the reset button reset game player one score equals zero player two score equals zero let's reset these paddles i'll just copy them paste them get rid of the let keyword setting the x and the y coordinates that will put them in their original positions to demonstrate i'll press reset and they go back to their respective corners ball x equals zero ball y equals zero ball x direction equals zero ball y direction equals zero we'll update the score we'll invoke the clear interval method pass in our interval id then invoke game start again okay we should be able to restart this game yeah there we go well okay then everybody that is a game of pong using javascript if you would like a copy of this code i'll post this in the comment section down below be sure to check the original playlist and well yeah that's a game of pong using javascript