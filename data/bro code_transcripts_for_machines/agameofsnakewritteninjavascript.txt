hey what's going on everybody it's you bro hope you're doing well and in this video we're going to create a game of snake using javascript so sit back relax and enjoy the show hey what is up everybody in this video we're going to create a game of snake let's head to our html file i'll create a div as a container div id equals game container let's close it we'll be using a canvas to draw our components canvas the id will be game board i'm going to go ahead and set the width and the height attributes right away 500 for the width the height will be 500 as well then close the canvas i'll add a score div id equals score let's close the div section the initial score will be set to zero then we'll need a reset button button close it id equals reset button the text is reset okay let's work on our css styling that's everything for our html file let's select our game board game board this is an id i'll add a border border 3 pixel solid is good let's enter everything within our game container game container text align center i'll change the font of the score you can barely see it score font family pick whatever font you like one font that i like is permanent marker permanent marker then a backup of cursive let's change the font size font size 100 pixels then let's work on our button next reset button i'll pick the same font family the font size will be 22 pixels a width of 100 pixels a height of 50 pixels border 4 pixels solid border radius to round the corners 15 pixels then cursor pointer when we hover our cursor over this button okay that is our css style sheet and our index.html file let's head to our javascript file we have a lot of variables to declare let's begin with the constants const gameboard equals document dot query selector we are selecting an id that id is game board that's our canvas with a canvas to paint on the canvas we have to get the context const ctx for context equals gameboard dot get context then pass in 2d we'll store our score text as a variable const score text equals document dot query selector we're selecting an id the id is score let's change this id to score text we're already going to have a score variable hey this is future bro so i forgot to change that within my css style sheet make sure you make that change here as well let's select our reset button const reset button equals document dot query selector we are selecting our reset button i'm going to create a variable to hold the width of our game board const game with equals game board dot width then game height const game height equals game board dot height width and height are the attributes that we assigned within our canvas initially when we run this javascript file if we would have declared those within the css file they wouldn't have been available to us right away that's why i assigned these attributes within the element itself inline we're going to assign some colors the first is for the board background const board background equals pick a color i'll just pick white pick a color for your snake const snake color i'll pick light green but feel free to pick a different color i'll add a black border around the snake snake border equals black then we'll need some color for the food const food color equals red it's an apple okay then a unit size what's the size of everything within our game const unit size equals i'll pick 25 pixels now we'll create a couple more variables let running equal false we'll examine running to see if our game is currently running or not let x velocity x velocity will be how far we move on the xaxis every single game tick i will set this to be the unit size we'll be moving 25 pixels on the xaxis every game tick if x velocity is a positive number we'll move to the right if it's negative we'll move to the left then we have y velocity let y velocity equal zero that means we're not moving up or down if we would like to move down we would set this to unit size if we would like to move up we would set that to negative unit size to move up up or down one space one unit but to begin we'll just be moving to the right we'll need the coordinates of our food let food x coordinate let food y we'll calculate these randomly later within a function let score equal zero then we need our snake our snake is going to be an array of objects an array of parts let snake equal straight brackets it's an array and we will create objects an object for each body part each body part will have an x and a y coordinate let's begin with the tail the tail will begin in the top left corner so i will set those coordinates 0 0 is the top left corner initially let's create 5 body parts to the snake but after it eats its food it's going to increase by 1. let's add a second body part this is a separate object separated with a comma but i don't want this in the same space i'll place this next body part to the right of the first one so let's say x is unit size times one or just unit size i suppose okay let's add another body part unit size times two so we'll have three squares okay two more body parts unit size times three unit size times four and that's our snake it's an array of objects body parts each object is a body part of the snake they each have their own x and y coordinates let's add an event listener to our window to listen for key events window dot add event listener the event is key down we'll pass in a callback to a change direction function then we'll add an event listener to our reset button to restart the game reset button dot add event listener when we click we will invoke the reset game function which we still need to declare then we will invoke game start let's declare the functions that we'll need let's begin with the first function game start function next tick function clear board clear board is going to be in charge of repainting the board function create food the create food function will find a random place within our game board to place a food item function draw food we'll need to paint the food within our game board function snake function draw snake function change direction function check game over function display game over then lastly function reset game those are the functions let's begin with the create food function we'll create an inner function function random food there will be two parameters min then max within this function we'll return a random number return rand number so to calculate this number we'll store this within const rand num set the sequel to math dot round math dot random we will multiply this by max minus min plus the minimum if there is one i think i'm going to expand this all right just to demonstrate this i'm going to invoke the random food function and store this within food x food x equals random food we'll pass the minimum 0 then the max game with minus our unit size temporarily i'm just going to display whatever food x is i have to explain something then we will invoke this create food function temporarily i gotta explain something currently when we're generating a random number that random number is between zero then our game width minus our unit size every time i run this i have a random number between that range however i would like to divide the width and the height of my game in two spaces i will take this part of this expression divided by unit size now we'll receive a random space between 0 and 24 because 500 divided by 25 our unit size is 25 available spaces to accurately place the food in the top left corner of one of these spaces i will multiply all of this by unit size so every time i refresh this you can see that all of these numbers are divisible by 25. that's what we're looking for let's create food y food y equals the same thing okay that is our crate food function let's move on to the draw food function this is fairly easy we'll take our context set the fill style equal to our food color take our context fill rect to fill a rectangle we need a pair of coordinates food x food y we need a width and a height they are both going to be unit size now if i were to invoke the draw food function after the create food function this will draw a random food item every time we refresh the page that's what we're looking for that completes the create food function and the draw food function i'm going to eliminate these two function calls we're going to fill in the gamestart function we will set running equal to true our game is currently running we'll update the score text text content to equal whatever our score is initially it's going to be zero we'll invoke the create food function then the draw food function then lastly next tick next tick is what we want to do every round every time we update the clock okay every time i refresh this an apple should appear randomly within your game board let's close the game start function we'll work on the next tick function we'll check to see if our game is currently running if running let's invoke the set timeout method set timeout we'll use an arrow function expression there's a lot we have to do we'll list an order of steps first we'll clear the board clear board function followed by draw food move snake draw snake check game over then invoke next tick again so after the right curly brace how often do we want a game tick to occur maybe 75 milliseconds that's a good speed if you would like a slower speed you can increase the number or decrease the number for a faster speed i'll just pick 75. then we'll add an else statement else display game over if our game currently isn't running that means the game's over so that is the next tick function let's work on clear board this is fairly simple we'll take our context set the fill style we'll take our fill style set the sequel to board background this is a color that we picked take our context fill wrecked will begin in the top left corner zero zero will end in the bottom right corner we will take our game width for the width game height for the height that's it for this function let's work on draw snake we'll need to change the fill style context dot fill style equals snake color for my snake i picked green if you have a border we can set the stroke style context dot stroke style equals snake border we'll take our snake it's an array of objects so there is a for each method i'll use an arrow function expression the argument is snake part for every snake part then within curly braces i will take our context fill rectangle snake part each snake part has an x coordinate and a y coordinate so we'll begin painting wherever that snake part currently is on the xaxis and the yaxis what's the width and the height of the snake part well our unit size 25 pixels and the height is 25 as well unit size hey if you have a border we can fill that in let's copy this paste it stroke wrecked looks like i misspelt something clear board phil wrecked not rexed okay and that will draw our snake so now how do we move our snake let's go to the move snake function to move the snake we're going to create a new head of the snake in the direction that we're moving then eliminate the tail const head equals then within curly braces the xcoordinate will be our snake's current head so that has an index of zero take the xcoordinate of that plus our x velocity how far are we moving on the xaxis this will be a positive number if we're going right a negative number if we're going left okay then do the same thing with y y equals snake at index of zero dot y plus the y velocity then to add this new head to our snake we can use the unshift method snake dot on shift head okay so our snake is just expanding now we need to eliminate the tail after each move i'll use an if else statement if else else will be snake dot pop that will eliminate the tail every time that we move uh but i gotta fill in something for now i'm just going to set this to be false just temporarily okay our snake should move now within this if statement we'll check to see if the food was eaten if food is eaten so that's a comment if the head of our snake snake at index zero take the x coordinate we will use the comparison operator is the xcoordinate of our snake equal to the xcoordinate of our food food x and let's copy this portion the ycoordinate of the head of the snake is equal to food y if the head of the snake and the food are overlapping well then the snake has eaten the apple let's increment the player score by one score plus equals one change the score text score text dot text content equals the new score then create a new food object create food we have no way to test this until we can control our snake let's close out of this function then go to the change direction function the change direction function should have one parameter event we invoke this function every time we press a key our window is currently looking for the key down event we'll store this within const key pressed set the sequel to event dot key code so i'm going to display whatever keypressed is currently with console.log i'm going to click on my window and press up down left right each of those four arrow keys has a key number that's what we're looking for in fact i'm going to store those let's say const left equals 37 const right equals 39. const up equals 38 const down equals 40. actually i'm gonna rearrange these so that they're all in numeric order much better this is how to determine which way our snake is headed i'll store these within some constants const going up equals we'll write a condition is the y velocity of our snake equal to negative unit size so our unit size is currently 25 if the y velocity of the snake is negative 25 that means we're moving up so let's do the same with the other directions going up going down going right going left going down is going to be y velocity is equal to unit size positive then x velocity is equal to positive unit size going left is x velocity is equal to negative unit size so these will be boolean variables i'm going to write a switch switch will examine true against many matching cases the first case will be key pressed is equal to left and we are not going right we don't want to be able to move like to the left then immediately to the right because according to the rules of snake if any body parts touch then we lose the game we don't want to accidentally go back into any body parts so if we're going left we can continue to go left otherwise up or down but not right because then we lose the game if we would like to go left then let's set the x velocity equal to negative unit size take our y velocity set that equal to zero we're no longer going up or down then break let's add another case key pressed equals up and we are not going down x velocity equals zero y velocity equals negative unit size we need another case key pressed equals right and we are not going left x velocity equals unit size y velocity equals zero okay last one key pressed equals down and we are not going up x velocity equals zero y velocity equals unit size okay we should be able to control our snake now yeah there we go we can go up left down right so let's eat the apple and we should expand and our score increases now let's work on getting a game over because we can go off the screen currently which we should not be able to do okay let's close out of this function check game over if we pass one of these borders then we have a game over i'll write a switch to check that switch will examine true against many matching cases the first case will be is the head of our snake snake at index 0 take the x coordinate is that less than 0 that means we went over the left border if this case evaluates to be true well we have a matching case so let's take running set the sequel to false then break so if i go over the left border the game stops running okay let's add another case if the x coordinate of the head of our snake is greater than or equal to the game width now if we go over the right border the game ends take the y coordinate of the head of our snake check to see if it's less than zero that means we go over the top game's over then the last one is case y is greater than or equal to game height we shouldn't be able to go over the bottom border yeah awesome there is another game over condition two if any body parts of the snake overlap to check that i'm going to use a for loop to iterate over the body parts four then our index is going to be i we don't want to begin at the head let i equal one that's why i'm not using the for each method our condition to continue is i is less than snake dot length property increment i by one we'll write an if statement if our snake at index of i that's going to be one of the body parts besides the head because we're starting at one if the xcoordinate of that body part is equal to snake at index of zero take that x coordinate and let's copy this paste it change x to y if the head of our snake is equal to one of the body parts that means the game's over running equals false okay let's test that yeah the game just ended now we'll want to display game over let's close out of the check game over function then head to display game over i'll take the context access the font set the sequel to a font of your choosing i'll pick 50 pixels mv bully context dot fill style pick a color i'll just pick black i'll center the text context text align equals center to draw some text on a canvas we'll type context dot fill text add a string of text game over then your placement i'll put this right in the middle game width divided by two comma game height divided by two then set running equal to false okay so when we hit a border it's game over then when the head of our snake runs into a body part it's also game over the last thing we need to do is set up the reset game function we'll take our score set that back to zero take the x velocity set that equal to unit size take our y velocity set that equal to zero we'll recreate our snake copy that paste it but we're not going to use the let keyword then invoke the game start function so after we get game over we should be able to reset our game yeah sweet well okay then everybody that is a game of snake using javascript if you would like a copy of all this code i'll post this in the comments section down below be sure to check the original playlist and well yeah that's how to create a game of snake using javascript