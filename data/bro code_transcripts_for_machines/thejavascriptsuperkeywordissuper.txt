yo what's going on everybody so in today's video I'm going to explain the super keyword in JavaScript super is a keyword that's used in classes to call the Constructor or access the properties and methods of a parent the parent is also known as the super class it's very similar to the this keyword this refers to this object super refers to the parent of that object here's an example we'll use inheritance to create a parent class of animal class animal our animal class will have three children also known as sub classes class rabbit extends animal class fish extends animal class Hawk extends animal We'll add an empty Constructor for now for the animal class then we need a Constructor for the rabbit class so rabbits they'll have a name property age and a run speed we'll assign these properties within the Constructor this.name equals the name that we receive this. AG equals age this. runspeed equals run speed let's copy this Constructor now with fish fish don't have a run speed but they'll have a swim speed let's replace run speed with swim speed copy The Constructor again paste it Hawks in this example won't have a swim speed they'll have a fly speed though replace swim speed with fly speed now let's attempt to create some of these objects const rabbit equals new rabbit we need a name for this rabbit you could just say rabbit or if you want to be creative you could say something like Bugs Bunny uh but let's just stick with rabbit to keep it simple our rabbit will be Oney old and has a run speed of 25 M hour if you use kilometers feel free to use kilometers let's do this with fish const fish equals new fish the name of our fish will be fish our fish is 2 years old and has a swim speed of 12 mph then with Hawk const Hawk equal equals New Hawk our Hawk will have a name of Hawk our Hawk will be 3 years old and has a fly speed of 50 m hour so when I run this program we have an uncaught reference error must call Super Constructor in derived class before accessing the this keyword so what JavaScript is telling us is that before we can use the this keyword we have to call the Constructor of the parent the super class within each of these respective Constructors we will invoke The Constructor of the parent the super class with the super keyword so let's do that for each of these Constructors now our program actually runs now so one of the benefits of using Constructors is that if there's any properties that the children all share in common we can send them to the Constructor of the parent as you can see we're repeating ourselves a lot each of these children classes has a name and age property that we're assigning to each we would like to follow the drve principle don't repeat yourself so why don't we write this code once and reuse it so within the Constructor of the parent will accept a name and age property we'll assign this.name equals name and this. age equals age now we can remove that within each of the child classes so we don't repeat ourselves there's less code to right now but we do need to pass in these arguments to the parent Constructor name and age for each and that's all there is to it in this example when we construct an object either a rabbit a fish or a hawk we'll accept three arguments a name age and either a run speed a swim speed or a fly speed depending on the animal that we're creating any properties they assure in common we can send to the parent Constructor it helps with code reusability and there's a lot less to write it's not that evident with three children classes but imagine if you had hundreds of different classes like what if this was Pokémon there's like what a thousand Pokémon now we would have to copy and paste those properties like a thousand times for each if we're constructing individual Pokémon but since all of them share those same properties we can write it in one place and make any changes only in one place so let's test this to see if it works let's console.log our rabbit's name which is named rabbit let's console.log the rabbit's age the rabbit is Oney old and let's see if the rabbit has a run speed 25 as in 25 mph let's do this with fish fish. name fish. AG let's see if the fish has a run speed name is fish Age Two run speed is undefined because fish can't run because they don't have legs but they do have a swim speed though swim speed 12 miles hour then Hawk hawk. name hawk. AG hawk. flyp speed name is Hawk age three the hawk has a fly speed of 50 mph so that's how you can use the super keyword in a class to call the Constructor of the parent it helps with code reusability any properties that the children share in common in this case a name and Age The Constructor of the parent can take care of that we don't have to repeat the set of code every single time for each child we write it in one place and reuse it another another thing you can do too with the super keyword is extend a method from the parent so what we're going to do within the animal parent class is create a move method within this method we will console.log the following message the at a placeholder this.name moves at a speed of add a placeholder speed mph for miles per hour hour or if you prefer you can use kilometers our move method will have one parameter a speed that we need to pass in to use So within each of these children classes we'll write a method that also extends the move method of the parent rabbits will have a run method we'll output the following message console.log I'll use a template string this add a placeholder this. name can run let's copy our run method paste it for fish but change swim to run because fish can't run this this. name can swim then with Hawks they'll have a fly method fly this this. name can fly with our rabbit object let's invoke the run method this rabbit can run let's do this with fish fish. swim this fish can swim and hawk. fly method this Hawk can fly within each of these children classes we're going to extend the move method of the parent animal within the run method of our rabbit class not only are we going to Output this message we'll also extend the move method of the parent and display that message as well to refer to the parent class we use the super keyword it's very similar to this but it means the parent use the parents move method but we do have to send a speed argument let's send the Run speed of the Rabbit this. Run speed let's do this with our fish class we'll extend the move method super. move send in this. swimp speed and Hawk super. move this do fly speed now let's take our rabbit use the run method and we should extend the move method this rabbit can run the rabbit moves at a speed of 25 mph let's do this with fish fish. swim the fish can swim the fish moves at a speed of 12 mph and hawk hawk. fly method this Hawk can fly the hawk moves at a speed of 50 mph so that's how you can use the super keyword to extend a method of a parent all right everybody so that's the super keyword it's a reference to a parent it can be used to call the Constructor of a parent and or access the properties and methods of a parent and well everybody that is the super keyword in JavaScript