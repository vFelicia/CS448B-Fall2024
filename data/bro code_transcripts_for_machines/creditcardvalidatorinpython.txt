hey everybody in today's topic we'll be creating a credit card validator program in Python it sounds intimidating but it's actually not that bad oh I almost forgot if you need a credit card number to work with you can always look online for test credit card account numbers I've listed the steps here after accepting some user input what we'll need to do is remove any dashes or spaces that the user may enter in to check if this number is valid we will add all digits in the odd places from right to left then we will double every second digit from right to left all of the even numbers basically if the digit doubled is now a two digit number add the two digit numbers together to get a single digit after doubling all your even digits add them together to create a sum of even numbers sum the totals of steps two and three if the sum is divisible by 10 the credit card number is valid we'll tackle this program step by step let's declare all of the variables we'll need throughout our program we'll need to hold the sum of all the odd digits from right to left I'll store that within a variable named sum odd digits I'll set that equal to be zero then we will sum the even digits I'll set that to be zero as well then I will declare a variable named total to store the total all right now let's begin with step one I'll just add a comment step one we will accept some user input we'll store that within a variable named card number equals input will ask the user to enter a credit card number we're not going to Typecast this number we will keep the user input as a string for now at least we'll need to remove any dashes we can do that by reassigning our card number equal to card number then use the builtin replace method of a string we will replace any dashes with an empty string just temporarily I'm going to print our card number just to be sure that we remove the dashes before continuing so enter a credit card number I'm just going to make up a number 1 2 3 4567890123456 yep and all the dashes have been removed now if the user types in any spaces to separate each of the four digits let's remove those two we will reassign card number equal to card number use the builtin replace method replace any spaces with an empty string let's try this again I'll enter in my card number but separate each group of four digits with the space all of the spaces are gone now with the following steps we're going to be summing the digits from right to left I think the easiest way to do this is to reverse our string and that's fairly simple in Python we will take our card number reassign it equal to card number use the indexing operator there's going to be no beginning index or ending index but we will set the step to be negative one this will reverse our string and reassign it let's test it one two three four five six seven eight nine zero one two three four five six yeah and our string is now reversed so that completes step one we no longer need to print our card number we will move on to step two step two states that we need to add all digits in the odd places from right to left well a string is iterable we can use it within a for Loop for X in our card number we will need every second digit there's no beginning index or ending index but we will set the step to be two we will iterate over every second digit within our card number X will store each digit temporarily so we will take our variable some odd digits equals some odd digits plus X but we can simplify this to some odd digits plus equals X there's one more thing we need to do for step two I'll demonstrate let's type in our credit card number I'm just making up a number again so we have an unsupported operand type we're iterating over a string X is technically a string we would want to Typecast X as an integer let's try that again just to be sure everything works fine okay yeah there's no problems that will complete step two let's move on to step three step three states that we will double every second digit from right to left if the result is a two digit number add the two digit number together to get a single digit with the for Loop 4X in our card number we will iterate over every second digit set the step to B2 however we will begin at the second digit which has an index of one X will store the current digit let's reassign X to B x times two because we're doubling every second digit however we would need to Typecast X as an integer because it's currently a string to see if x is a two digit number we can easily use an if statement if x is greater than or equal to 10. if x is greater than or equal to 10 it should technically be a two digit number right because 10 is a two digit number so if x is a two digit number we'll need to split that number then add them together let's take some even digits plus equals X modulus 10 that would give you the remainder of any division then add 1. the largest that X can be in the scenario is 18 because the largest a single digit can be is 9 in our credit card number so nine times two is eighteen eighteen modulus 10 would give us 8. we would split that number to get one and eight then add those two numbers together to get nine so else X must be less than 10. if that's the case we would take some even digits plus equals whatever X is that completes step three let's move on to step four add together both the sum of the odd digits and sum of the even digits total equals some odd digits plus some even digits then step five step five if our total is divisible by ten it's a valid number if total modulus 10 is equal to zero then print valid else print invalid that should complete our program Let's test it enter a credit card number I'm just going to make up something so this is an invalid number for a valid number you can either use your own credit card if you have one or you could find a sample online I'll just use the first one that I find oh yeah that number is valid just for good measure I'll test another yep that one is also valid alright everybody I thought this would be a good project for us to work on it helps us get used to working with strings and Loops as well but yeah that is a credit card validator program in Python