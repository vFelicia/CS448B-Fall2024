hey yeah everybody so in today's video we're going to create this stopwatch program using Python's pyqt5 Library if you've been following the pi qt5 series up until this point you can skip ahead to the following timestamp where we've already set up a basic application you just have to make some minor changes if you're new to this series or new to this channel you will need the pi q25 package found within your site packages folder if you don't have this package you can open up a terminal to download it you can use pip which is Python's package manager install Pi qt5 but I already do have it installed once that's out of the way you will need the following Imports import CIS CIS means system it handles system variables for your python interpreter we will need the following widgets from PI qt5 access the module of QT widgets widgets are the building blocks of a pi qt5 application we will import the following widgets Q application Q widget Q label Q push button QV box layout and qh box layout let me put these on a new line just so we can read everything from the package of Pi qt5 access QT core we will import Q timer our timer will emit a signal after a given interval which is what we need for a stopwatch Q time to keep track of the time and QT for alignment let's do a test run to be sure that there's no errors looks like L and label should be Capital there we go no errors once you have the following Imports we will construct Class A Class of stopwatch which will inherit from The Base Class of Q widget our stopwatch will be a widget we will need a Constructor we'll Define that Dunder init no arguments besid self if we have arguments to pass to the parent of Q widget we will call the super class the parent call The Constructor of the parent no arguments currently now if we are running this file directly we'll use an if statement to verify that if Dunder name is equal to a string of Dunder main if this is true if we are running this file directly then we will construct a stopwatch we will create an app object call The Constructor within the Q application class pass in the following access sis our system access AR RGV which means arguments this is if we're using command line arguments which we won't be using but it's nice to Future proof our code just in case we do in the future we will create a stopwatch object stopwatch equals call The Constructor within our class of stopwatch our window is not going to show unless we call the show method take our stopwatch call the show method now our window is only going to show for a brief second we need to ensure a clean exit we can access CIS call the exit method pass in the following app then call the excore method this method starts the main event Loop and handles events so then we should have a basic window which stays in place until we close it we now have the main skeletal structure of a pi qt5 application set up if you're one of the people that have jumped ahead up until this point we have a class of stopwatch which inherits from the Q widget class we've constructed a stopwatch object and we're showing it so now we can begin designing our stopwatch we will create a Time object self. time equals call The Constructor within the class of Q time for arguments we'll pass in the hours minutes seconds and milliseconds all zero we need a label for the stopwatch self. time label equals called The Constructor of Q label what would we like the text to say I'll display some placeholder text a bunch of zeros zero hours minutes seconds and milliseconds we will add this label to self our stopwatch we need a start button self. start button equals call The Constructor within Q push button what would we like the text of the button to say let's say start we are adding this button to self our stopwatch we need a stop button let's replace start with stop change the text from start to stop and reset the name of this button will be the reset button the text will be reset we will need a timer to emit a signal at a given Interval self. Timer equals call The Constructor within the class qtimer then pass in self we're going to call a method of initialize UI self. init UI but we still have to Define this method all right within our stopwatch class we need the following methods a method of init UI this is where we'll be designing the user interface I'll write pass for now as a placeholder we need a method to start to start the stopwatch that is a method to stop the stopwatch a method to reset the stopwatch we'll create a method to to format our time format time besides self there's one parameter we have to pass in a time to format we will be returning a string a string representation of the current time and a method to update our display update display here are the six methods we'll need within our initialized user interface method we will set the title of the window because right now it says python we will take self our stopwatch call the set window title method and we will pass in stopwatch that should change the title of the window to stopwatch we're going to use a vertical layout manager for the label and the buttons we will create a layout manager named vbox vbox equals equs call The Constructor of q v box layout we will take our layout manager and add the following widgets self. time Lael then our start stop and reset buttons start button stop button and and reset button we will take self set the layout pass in our vertical layout manager so we have all of our buttons we have our widgets arranged in a column we're going to take our time label and also Center it horizontally we will take our time label self. time label call the set alignment method access our class of QT access the flag of align Center that's going to centeralign the time it should be aligned both vertically and horizontally now with your buttons they're arranged in a column we could group them together horizontally here's how we will create a horizontal layout manager of hbox hbox equals call The Constructor of qbox layout instead of adding these buttons directly to our vertical layout manager let's cut them paste them underneath hbox replace vbox with hbox then with our vertical layout manager vbox we will add our layout of hbox this group of buttons is arranged vertically with the time label now we'll be applying a style sheet access self our stopwatch call the set style sheet method we can pass in one extremely long string with a set of triple quotes all of the CSS like properties We'll add will do so between the set of triple quotes let's select our buttons Q push button we are selecting an entire class within a set of curly braces let's add the property of font size the font size of all buttons will be 50 pixels let's customize our label select the class of Q label within a set of curly braces let's add the following properties ities font size will be 120 if you would like we can add a background color too to the label we can select a background color temporarily I will select blue but we can pick more specific shades of blue or another color here's how you can look up a Color Picker and select a very specific color you can use hex values RG b or hsl I've already selected a color I'm going to copy these hsl values so instead of a color name we will select hsl then paste those values if you have a degree symbol you will need to remove that and now we have a very specific shade of blue I will also round the corners of our label add the property of Border radius I will set that to be 20 pixels this will round the corners between each button and label we'll add some padding we're going to use multiple selectors we will select all push buttons and all labels apply the following properties to each I will add padding of 20 pixels around these widgets and I will also make the font weight bold font weight will be bold all right I think that looks pretty good hey this is bro from the future I am currently editing this video if you would like you can add a font family one font that I think looks really good is calibri we'll apply that to all push buttons and Q labels I really like this font I think it fits a stopwatch but it's up to you if you would like to change the font I just thought I would mention that now we just have to add some functionality because these buttons don't do anything for each of our buttons we have to connect a signal to a slot we will take our start button self. start button with the signal of clicked we will connect the following slot we will call the start method self. start method let's do this with the stop button change start to stop clicked connect self. stop method reset self. reset button called the reset method at a given interval we're going to update our display self. timer during a signal of timeout we will connect the following method self. update display self. update display within our start method we will take our timer self. timer call the start method pass in 10 for 10 milliseconds we will set an interval for a timeout every 10 milliseconds within our stop method we will take our timer and instead called the stop method we'll get back to reset in just a moment let's work on the format time method from our time that we pass in we have to get the hours minutes seconds and milliseconds we will create some local variables hours equals access our time that we pass in call the hour method to return hours we have variable minutes time do call the minute method to return the minutes we have a variable of seconds seconds equals take our time called the second method then for milliseconds access our time call the MC which means milliseconds and call it this is a method I'm going to return a string an F string to represent the time we will add four placeholders hours minutes seconds and milliseconds each will be separated with the colon except for milliseconds which will be a DOT a period we will display the hours I'll add some leading zeros two leading zeros let's do this for minutes we're using a format specifier for two leading zeros as well seconds and milliseconds now we will work on the update display method we have to get the time self. time equals we will take our time but call the add milliseconds method Ms e CS then pass in 10 for 10 milliseconds we're going to take our time label self. time label and set the text of it we will call our format time method but we have to pass in a time we will be passing in self. time let's see what we have currently we can start the stopwatch and we can stop it however we're displaying three digits for the milliseconds we can eliminate that within format time when we get the milliseconds we will use integer division we will divide by 10 this will convert our milliseconds from three digits to two we're basically dividing by 10 so here's our stopwatch currently we can start we can stop we can start again and we can stop again now we just need to reset here's how within the reset method we will take our timer self. timer use the stop method to stop we will reassign our time call The Constructor of Q time we have to pass in hours minutes seconds and milliseconds they're all going to be zero we're resetting our time and then we'll reset the text again of our time label self. time Lael call the set text method when we set the text we will first format it with the format time method but we have to pass in a time we will pass in self. time and now we should be able to reset our stopwatch we can start we can stop we can reset start again and stop again all right everybody so that is a cool stopwatch that you can make using python