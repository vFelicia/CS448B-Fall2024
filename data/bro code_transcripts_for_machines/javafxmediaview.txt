hey what's going on everybody bro and well and in this video i'm going to explain the media view node in javafx so sit back relax and enjoy the show all right welcome back we're talking about media views today a media view is a viewport in which we can display a video or other media source so the media view node is found underneath controls just drag and drop it anywhere and to increase the dimensions of this media view go to fit width and fit height and pick whatever dimensions that you prefer let's say 500 by 300 and you can change the layout x and layout y properties as well so if i change this to 100 this video would move 100 pixels to the right but i'll set that to zero so it displays in the top left corner so this is the displayable area for our video so this is the media view it's a viewport now let's give this media view a unique id i will call this media view and let's create three buttons a play button pause button and reset button so go to controls drag and drop three buttons place them anywhere preferably not in front of the media view though maybe down at the bottom so we have our three buttons let's change the text the first one will be play button so this will be play all caps then pause then reset and let's give each button a unique id beginning with our play button this will be play button then pause button and reset button so each time that we click on one of these buttons we will call a method but we need to set that so on action for our play button let's say that we will call a method named play media which we need to define later followed by pause media then lastly reset media okay let's make sure that our controller class is linked save and then head to our controller class oh here's a trick that i found to refresh your fxml file right click on your project folder and then go to refresh so you don't need to keep on clicking back and forth to update your fxml file okay so within our controller class we will implement the initializable interface i can never spell it i think i spelt it wrong there we go okay then add any unimplemented methods so we need to declare everything that we'll need so at fxml we're going to inject our media view private media view media view pay attention to the capitalization i'm using camelcase here and we need our buttons at fxml private button we have our play button followed by our pause button and our reset button okay there's a few additional things that we'll need we'll need a file private file file followed by private media media private media player media player now in order for this program to actually run we need to declare these methods of play media pause media and reset media so within our controller class after our initialize method let's declare those methods so we have public void play media then pause media and then reset media public void reset media now to play a video we'll need a video to work with i have this mp4 file of a video that i took when i was in tokyo a number of years ago there was reallife mario kart racing down the street here's the original video that i took so to make this easy i'm going to copy my mp4 file and then paste it within my project folder pay attention to where this file is placed for me it's directly next to my fx build file as well as my libraries so if you're working with a lot of different media sources i recommend creating a separate folder but since we're only working with one i really don't think that's necessary then within your initialize method we're going to finish instantiating our file media and media player objects but let's begin with file file equals new file then in the constructor list the file name or the file path so mine is named mario cart dot mp4 then next we're going to create and instantiate our media object now the media object contains information about your file such as the duration metadata tracks and a video resolution so we're going to add our file to our media object on the next line media equals new media then pass in the name of your file file dot 2 u r i followed by dot 2 string now you may or may not run into this exception when you run the program as of now so we ran into a invocation target exception caused by super class access check failed class javafx dot scene dot media so that means that we probably need to add a vm argument to our run configurations so to solve this go to run run configurations then go to your project arguments then under vm arguments you're going to add this line then apply then run and this should work now one other common issue is the placement of your mp4 file if i was to move my mp4 file to my source folder well it's no longer going to be directly within my project folder so if i was to run this now we would encounter an exception because this file will no longer be found one test that you could do if you're having some trouble locating your mp4 file is to take your mp4 file and then paste it to an easy to access place like your desktop then let's rightclick go to properties find your location copy this and then precede your file name with the file path so let's run this again and we should be able to at least locate this file now we have our file object as well as our media object our next task is to create our media player object a media player provides the controls for playing media so within our initialize method we will finish instantiating our media player media player equals new media player and within the constructor of our media player we need to pass in a media object that we intend to play now there's going to be a no apparent change but there is one way in which we can test this so within our play media method we're going to take our media player and use the play method and this will at the very least play the audio but we will be unable to see the video so we should hear some gokarts now to view the video we need to add our media player to our media view our media view acts as a viewport to view a video so type mediaview.set media player and we will pass in our media player and we should be able to view the video now so here's my video and i can play it by hitting the play button now let's work out the font function so within the pause media method let's type media player dot pause and honestly it's as simple as that so we should be able to play pause and play and pause again and lastly let's reset so we'll type media player dot seek and this argument is kind of strange we're going to pass in duration dot seconds then pass in 0.0 so this will reset the media player to zero so we can play we can pause and we can reset and then play again pause play pause reset oh here's one thing that i noticed that you should be aware of so before you actually play the video if you click reset and then play you will hear the audio but the video will not be running so to fix that we can add this line let's add an if statement within our reset method if media player dot get status does not equal media player dot status dot ready so that should fix that for you so if we were to reset and then play then the video and the audio will move together if you were to hit reset first before playing well okay everybody that is the media view node it acts as a viewport in which we can view a video or other media source if you would like a copy of this code i will post this to the comment section down below but yeah that is the media view node in javafx