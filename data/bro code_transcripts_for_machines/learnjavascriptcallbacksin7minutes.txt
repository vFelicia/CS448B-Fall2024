hey welcome back everybody so today I got to explain callbacks in JavaScript a callback is a function that is passed as an argument to another function they are used to handle asynchronous operations such as reading a file Network requests or interacting with databases these activities take some time to complete now with JavaScript we don't necessarily wait for a process to finish before continuing with the rest of the program for example if we were to read a file if it takes a long time to read that file JavaScript might continue on with the rest of the program we might attempt to display the contents of that file before we're finished reading it that's where callbacks come in we're telling JavaScript hey when you're done call this next when you're done reading the file then display the contents only after that process is complete I'll give you a few examples of the syntax of a call back we'll start with something really simple we'll create a function to display the word hello this will be the hello function then I will console.log the word hello so I can invoke this function hello to execute it hello what if we were to create a function for goodbye function goodbye we will console.log goodbye okay after hello let's invoke goodbye we have hello then goodbye what if my hello function takes a lot of time to process well JavaScript isn't necessarily going to wait around before executing the goodbye function I'm going to add a few lines of code you don't need to copy this these few lines of code are going to make us wait for 3 seconds you don't need to write this down but do pay attention we will execute the hello function followed by the goodbye function but we're going to pretend that our hello function takes a little bit of time to process so so now we have goodbye already executed followed by hello but it should be the other way around I would like to guarantee that the goodby function follows after the hello function well I can do that by adding a call back to the goodbye function after the hello function is complete we'll get rid of this goodbye function invocation to use a call back you pass a function as an argument to another function we will pass the goodbye function as an argument to the hello function So within the set of parentheses type the name of the function goodbye now be sure you don't add a set of parentheses after the function name you'll call it right away we are passing the name of the function as an argument but we need a matching parameter I will name this parameter callback after everything within this function is complete let's take our callback then invoke it by adding a set of parentheses invoke meaning call all right now let's see what happens we have our hello function followed by the goodbye function in that order let's create another function what about a leave function we'll tell somebody to leave console.log leave I will pass the name of this function as an argument to the hello function leave is now our call back after executing the hello function we will execute our call back and in this case it's the leave function let's create another function for weight function weight console. log wait we'll pass the name of the function as an argument to the hello function weight is now our call back we will execute the hello function followed by the weight function so by using callbacks we are guaranteeing that the function passed in will execute next you can pass callbacks as well as other arguments to a function let's go over a second example I will create a function to sum two numbers together X comma y I'll also add a call back callback X comma y we have three parameters total within the sum function we will create a local variable of result add x + y and then I will call my call back then I'll pass the result as an argument to the callback function then I will create a function to display the result to my console display console there is one parameter we have a result argument we're receiving then console.log my result all right now we will invoke the sum function but we have three arguments that we need to pass in a call back a value for x and a value for y let's invoke the display console function as a call back again be sure to not add a set of parenthesis after the name because then you'll invoke it right away X will be 1 y will be two and let's see the result the result is three So within our sum function calculate the result first then after that process is finished then display the result to the console let's create a separate function to display the result to our document object window our web page basically uh let's pretend that this wasn't here I'll create an H1 element with an ID of my H1 I will create a separate function display page to display on the web page I think display Dom would be more appropriate but I haven't explained with the document object model is yet so let's just work with display page we will accept a result I will change the text content of the my H1 element document. getet element by ID the ID was my H1 we will change the text content to equal our result that we receive as a callback we will use the display page function display page there and the result is three after this calculation processes execute the call back and this time we are passing it to the display page function that we created all right everybody so that's a call back it's a function that is passed as an argument to another function they're used to handle asynchronous operations operations that may take a variable amount of time such as reading a file Network requests or interacting with databases we're not exactly sure when these processes are going to complete by using a callback we can ensure that a function executes after these processes are complete and not before accidentally all we're doing is saying hey when you're done call this next we'll have more practice with callbacks especially in the upcoming topics and well everybody those are callbacks in JavaScript