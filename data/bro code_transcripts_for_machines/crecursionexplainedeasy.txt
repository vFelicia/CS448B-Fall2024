hey guys i gotta explain recursion recursion is a programming technique where a function invokes itself from within we break a complex concept into repeatable single steps many problems we can approach iteratively or recursively some of the advantages of recursion include less coderight and typically it's cleaner it's also useful for sorting and searching algorithms however some of the disadvantages of recursion is that it uses more memory and a slower there's a tradeoff it's up to you if you'd rather use an iterative approach or a recursive approach here's an example we'll break a complex concept maybe such as walking into repeatable single steps to accomplish the task of walking we would take a single step and then just repeat that a bunch of times we'll do this first iteratively then recursively so let's create a function to walk void walk there will be one parameter a number of steps let's define this walk function we'll use an iterative approach first to do that we can use a for loop we'll set into i equals zero we'll continue this as long as i is less than our steps then increment i by one i will display just you take a step then i'll add a new line so we will invoke this function pass in how many steps we would like to walk i would like to walk 100 steps and here we go we printed you take a step 100 times this is an iterative approach if we were to take a recursive approach we would invoke this function from within itself so i'm going to turn this for loop into an if statement we'll need a base case when do we stop if steps is greater than zero we will display you take a step then i'm going to invoke the walk function from within itself then i will pass in steps minus 1. this would be a recursive approach we're invoking the walk function from within itself you'll end up in a function within a function within a function within a function so on and so forth so when i run this this would do the same thing but we've done so recursively the advantages with recursion is that the code tends to be easier to write i find this if statement a lot easier to understand than that for loop although they're both pretty simple however with recursion it uses more memory and it takes more processing time in the case with our walk function i would probably stick with an iterative approach there's really not much benefit in this case but in the case of let's say a searching algorithm or navigating a tree data structure recursion would really help us with that so let's say we don't have a base case that's when we stop what if i just call the walk function forever well we end up in an infinite loop and we would encounter what's called a stack overflow when you invoke a function you add what's called a frame to the stack when your stack is overloaded you'll encounter a stack overflow so that's one problem with recursion so let's try a different example we'll create a factorial function if you don't remember factorial is a mathematics concept where you take a number and you multiply that number times the previous number minus one times the previous number minus one times the previous number minus one until you reach one you multiply all these numbers and you're given a result i'm going to demonstrate a function to do that both iteratively then recursively let's begin with an iterative approach we will return an integer this function will be named factorial we'll pass in an integer named num i'll immediately display the output standard output factorial then pass in some number maybe 10. let's define this function if i was to take an iterative approach i would write something like this and result this will be a local variable i'll set this equal to one i'll create a for loop and i equals one we'll continue this as long as i is less than or equal to our number increment i by one i will take our result equals result times whatever i currently is at the end of this program we will return result factorial 10 that would be 3 eight thousand eight hundred if i was taking a recursive approach i would write something like this we would need a base case when do we stop if num is greater than one we will return num times invoke factorial again our number minus one else we will simply return one this would do the same thing but recursively factorial ten is three million six hundred twenty eight thousand eight hundred those were two different approaches to the same problem when we did this recursively we have a function call inside of a function call inside of a function call inside of a function call you get the idea personally i find a recursive approach to be a lot easier to read and understand although remember it uses more memory and a slower when you start to learn about sorting algorithms that's when recursion is really going to help you quite a lot it will simplify the steps so that's recursion everybody it's a programming technique where a function invokes itself from within we break a complex concept into repeatable single steps whenever you see a function invoking itself from within you'll know that that's recursion hey if you would like a copy of this code i'll post this in the comments section down below and well yeah that's recursion in c plus