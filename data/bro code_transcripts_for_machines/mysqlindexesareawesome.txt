yeah it's me again and in today's video I need to explain what indexes are in MySQL and index is a type of data structure they are used to find values within a specific column more quickly it's technically a b tree data structure if you're familiar with what that is but if you don't don't worry about it MySQL normally performs searches sequentially through a column if I'm looking for some specific value just scan each value on the way down to see if those values match depending on what I'm looking for it doesn't really take much time if you have a small data set like I do but imagine if you have millions of transactions searching each transaction one by one is going to take a long time we can speed up that process by using an index by applying an index to a column selecting or searching takes less time however updating takes a lot more time so there's some pros and cons with using an index it really depends on the table if I'm working with a table of transactions transaction are being updated all the time people are constantly making purchases I don't think our transactions table would be a good candidate for an index we'll be doing a lot of updating but not a lot of searching however with our customers table I think our customers table could benefit we don't update our customers table very often only a new customer comes in every once in a while let's reduce the time it takes to search for a customer with creating an index how exactly do we want to find the customer believe it or not we do have an index with our customer ID already a customer may give you their last name and or first name let's create an index for these we'll start with last name though to show the current indexes of a table you would type show indexes from the name of the table here are the current indexes for our customers table we do have one already and that's for our customer ID that is the primary key we can search for a customer by their customer ID fairly quickly but not so much by their last name or their first name let's apply an index to those columns to create an index you would type create index then a name I will apply an index to our last name column I will name this index last name idx meaning index on the table customers in this case then list a column I will apply an index to our last name we will be doing a lot of searching by a customer's last name so I might as well apply an index so let's execute the statement let's show our indexes again show indexes from customers and here is our new index last name index it's applied to our column last name if I were to search for a customer by last name that process will be sped up now select all from customers where last name is equal to puff so my data set is already very small to begin with there's not going to be a noticeable difference in this example but if I'm working with a million customers using an index would be a lot faster if I were to search by first name instead where first name equals Poppy uh I spelled copy wrong well we don't have an index applied to our first name as of now it would be slower to search for a customer by their first name compared to their last name that first name doesn't have an index realistically we wouldn't search for a customer just by their first name we would do a last name or a last name and a first name that's where multicolumn indexes come in to create a multicolumn index you would type create index a unique name let's say last name first name idx on our table customers then list the columns in order the order is very important MySQL has what's known as a leftmost prefix with indexes so we will search by last name then first name let's execute the statement show our indexes show indexes from customers here's our last name first name index there's a sequence where telling MySQL to search by a last name however if there's also a first name include that too there needs to be a last name to utilize this index if I want to I can get rid of this last name index because our last name first name index would do the same thing we can search for a last name as well as a first name if we would like to drop an index you would type alter table the name of the table drop index the name of the index last name index then I'm going to go ahead and show indexes from customers and the last name index is gone now if I was to search for a customer select all from customers where if I were to search for a last name we would benefit by using this multicolumn index if I looked for a last name and a first name we would also benefit there's a sequence we would search through any last names first because that's first in the sequence but if I was to search for just a first name we would not utilize this index well everybody that's an index it's a type of data structure that is used to find values more quickly within a specific column MySQL normally searches through a column sequentially the longer the column the more expensive the operation is going to be if you were to apply an index to a column searching and selecting a value takes less time but updating that table takes longer use it if you think a table is a good candidate where you don't update it very often and well yeah those are indexes in MySQL