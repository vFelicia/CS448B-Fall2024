yo what's going on people so today I'm going to explain magic methods in Python magic methods are also known as Dunder methods meaning double underscore you typically find these within classes we're already familiar with one of them our Dunder init method we have double underscores on the left and double underscores on the right but there are others I'll cover a few of the more beginner friendly ones so what these methods do is that they're automatically called by using some of Python's builtin operation ations such as printing an object seeing if two objects are equal greater than or less than when we use many of Python's builtin operations with objects we can Define and customize the behavior of those objects so in this demonstration I'm going to create a class of book we will construct some book objects we will Define a magic method a Dunder method of init to initialize these objects for a book we need a title an author and the number of pages we'll say num Pages self. tile equals title self. author equals author self. number of pages equals number of pages when we call the class of book we Are automatically calling Dunder init so let's create a book object book one equals book we need a title an author and number of pages so since we're dealing with this topic of magic methods I'll pick some fantasy related books for my first book I'll pick the Hobbit that's the title the author is JRR token the number of pages is 310 so for my next book book two I will pick Harry Potter and the philosopher stone the author is JK rolling the number of pages is 223 then we have book three for my third book I will pick The Lion the Witch and the wardrobe the author is CS Lewis the number of pages is 172 okay here are my three book objects when we call the class of book and pass an arguments we will call the dunder init method it's a magic method it's automatically called behind the scenes within this magic method we can Define and customize the behavior of objects and in this example we're just assigning the attributes of title author and number of pages that is one builtin operation of python what would happen if I was to print book one directly to the console here's what happens well we're given a memory address here's book two and book three well we can customize this Behavior we will use the dunder string method double underscore St Str meaning string double underscore again we have one parameter of self instead of returning a memory address we can customize this behavior let's instead return an FST string I'll add two placeholders we will display self. tile the title of the book by self. author and I'll place the title within single quotes now let's print book one we have The Hobbit by JRR tolken let's print book two Harry Potter and the philosopher stone by JK Rowling and book three The Lion the Witch and the Wardrobe by CS Lewis so that is Dunder string we can return a string representation of the object when we print it directly to the console here's another Dunder method we can check to see if two objects are equal I will print is book one equal to book two that gives me false if they were to have the same title the same author and the same number of pages then python would say they're not equal still so let's customize this Behavior we will Define a method of Dunder equals which is just EQ for parameters we have self the first book we're examining in this case book one and other other means the other book we're examining two objects for equality to do that we'll see if the title of two books and the author is the same we'll disregard the number of pages you can have two different versions of the same book they might have different font sizes or the dimensions of the physical Pages might be different so we will return a Boolean value we will examine if self that's the first book is the title attribute equal to our other books title and is the author of the first book self. author equal to our other book's author if I were to run this we get false book one does not equal book to but if they have the same title I'm going to replace these and the same author then they would be equal and we'll disregard the number of pages let's say that with this version of The Hobbit they're using a smaller font size so there's less Pages we're using Dunder equals to compare if two objects are equal what if I was to print book two is less than book 3 like what does that even mean and I'm just going to get rid of these two lines type error less than is not supported between instances of book and book so we can't use less than on two objects but we can customize that behavior by using Dunder less than which is just LT we're examining one book and the other book self and other let's compare the number of pages we'll compare if the pages of book two is less than book three we will return a Boolean value is self. number of pages less than other. number of pages so now this should not give us an error book two does not have less Pages than book three another would be greater than I'll just copy what we have Dunder GT for greater than for our first book of self is it greater than the number of pages of the other book well that's true the number of pages of book two is greater than book three let's use Dunder ad to add the pages of two books together what would happen if I were to add two books together book two plus book three well we get a type error unsupported operand for book and book well to customize the behavior of addition we will Define Dunder add we have self and other for the other object let's add the pages together of two books maybe we need a summer reading list and we would like to see what the total number of pages is I will return self. number of pages attribute plus our other books number of pages that would give me 395 that's 223 + 172 heck I'll even put this within an F string cuz why not then I will add the word Pages 395 Pages within an object we can search for a keyword within one of the attributes so let's find the word lion within book three to do that I would write a statement like this Lion in book three type error argument of type book is not iterable we will Define Dunder contains besides self we will pass in a keyword a keyword that we're searching for I will return then we'll use the in membership operator is our keyword in self. tile I'm looking for the word lion that's going to return true if lion is in the title of this book or is our keyword in self. author maybe we're searching for an author let's try that again that returns true lion is in book three however lion is not within book one that's false is rolling in book two that's the author that is true is rolling in book three that is false that is thund contains we are searching for a keyword in an object now we could search for a key given an object for book one we'll use the index operator and look up an attribute let's get the title of book one the default behavior is that we get a type error book object is not subscriptable so to customize this Behavior we will use Dunder get item besides self we have one parameter of key we're accessing book attributes by indexing with this object return the value at this key what's that attribute we will check if our key that we receive is equal to title which it is in this case we will return self. tile What's the title of the book so that would give me The Hobbit here's book two and book three what if the key is author none we didn't set that up yet if key is equal to author then return self. author the author of book three is CS Lewis two is JK rolling book one is JRR tolken what if about number of pages num Pages well we're not set up for that yet I'm going to turn this into an else if statement else if key is equal to num Pages then we will return self. num Pages the number of pages in book one is 310 book two is 223 book three is 172 what if there is no key otherwise if there is no matching key I'll add an L statement let's return an F string key placeholder our key that we pass in as an argument was not found what do books not have well they don't have audio I guess unless it's an audio book is there a key of audio in book three there is not key audio was not found and I'll place that within single quotes much better all right everybody so those are magic methods also known as Thunder methods meaning double underscore they are automatically called by many of Python's builtin operations they allow developers to define or customize the behavior of objects when we use those those builtin operations and well everybody those are magic methods in Python