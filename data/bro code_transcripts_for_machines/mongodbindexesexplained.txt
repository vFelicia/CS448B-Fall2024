hey everybody today we are moving on to indexes and index allows for the quick lookup of a field however it takes up more memory and slows insert update and remove operations use them wisely utilizing an index if you're familiar with data structures and algorithms we are storing our data as a b tree if there's a field you search for but you don't do many updates I would recommend an index here's an example let's find any students named larrydb.students.find find anybody named Larry I'm going to make one adjustment though let's method chain the explain method and pass in this string execution stats that will give me the execution stats of this query I have five documents within my collection we have examined five documents to find Larry we're performing a linear search through our collection we're examining each document one by one I only have five documents that wouldn't take too long imagine I have thousands or hundreds of thousands of documents well a linear search is going to take a really long time we can speed up the lookup process by applying an index to apply an index to a field you would type something like this DB dot the name of the collection dot create index now what field would you like to apply an index for let's apply an index to our name field Name colon you can arrange the data in your index in ascending order by using one or descending order with negative one so with the name one would be alphabetical starting with a to z let's hit enter this is the name of our index name underscore one let's perform that query one more time DB dot students dot find find anybody named Larry name Larry then we will method chain the explain method pass in the string execution stats let's see what the results are this time we only examined one document examining one document is a lot less time consuming than examining five documents like I said I have a small data set it doesn't appear to make that big of a difference but if you have hundreds of thousands of documents it's going to save you a lot of time to get all your indexes you can use the get indexes method db.students.getindexes and we have two there already is an index applied to object IDs we have that by default and here's the index we created to look up names quickly we have two indexes technically to drop an index you'll need the name let's copy that DB dot students dot drop index place the name of the index within the drop index method and our index is dropped let's take a look at our indexes again db.student.getindexes and our index is gone now if you would like to create an index in compass you go to the indexes tab create index select a type or field name let's create an index for name selected type let's place our name in ascending order you can select more options but that's a little Advanced for us at this level let's begin with the basics and that's how to create an index in compass then to drop the index you just press this trash can icon type the index name underscore one and that's how to drop an index so in conclusion applying an index to a field allows for quick lookup of that field but it takes up more memory and it slows insert update and remove operations because you have to update the binary search tree use indexes wisely personally I would recommend an index if you're doing a lot of searching but not a lot of updating so that's an introduction to indexes in mongodb