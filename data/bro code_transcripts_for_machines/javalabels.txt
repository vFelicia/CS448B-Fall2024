hey what's going on everybody it's you bro here hope you're doing well and in this video i'm going to teach you guys how we can create some labels in java so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running okay people so let's discuss the labels a label is a gui component and functions like a display area for a string of text an image or even both so before we begin we'll need a frame so we can add a label to the frame because a label is a component so we'll need to be sure to create a frame i'm just going to paste what i have here from the last lesson so jframe frame equals new frame frame dot set default close operation jframe exit on close set a size i just picked 500 by 500 and frame dot set visible to true and then we'll just need this import as well so how do we create a label well that's a good question it's very similar to what we did with our jframe so instead of saying jframe frame equals new frame we can instead say jlabel we can call this label equals new j label we can set some string of text an image or both uh but we'll need an import as well so let's include that i'm just going to be adding imports as we go along so let's set the text for the label so we can do that using the label dot set text function and then we can set some text so maybe i'll say bro do you even code so there's two different ways that you can set text for a label you can either use the set text method otherwise what you could do let's say that we delete this when you create an instance of your label you can just pass in some text like this but i'll just do this on a different line for now just for teaching purposes so what this will do is set text of label and this will create a label so now what we need to do is actually add the label to the frame and this is a very easy step to forget about so we'll type in frame dot add and what do we want to add so you can see that it's adjusting a component we're going to add our label and then we're going to compile this and run this so here's our string of text bro do even code so normally with our label with how our layout manager is for our frame it's using a border layout so it likes to take strings or images and it likes to center it and put it on the left hand side but we'll change that later so let's begin next by creating an image icon so we can add an image to this label so let's create an image icon image icon and i have a picture that i want to use i call it dude.png so i would like to add this image to my label as well as my text so i'm going to create a name for this image i'll just call it image image icon image equals new image icon and then we can put a file path here or a file name if it's within the same folder so this is in the same project folder as my java file here so this is dude.png and then we'll need an import for this too so then we're going to set the icon for this label so label dot set icon and you can see that it's asking for an icon luckily our image is an icon so we'll put image here and then run this again so here's our image well it's an image icon and our text now let's take a closer examination of our label with java's swing graphical user interface it likes to take a string of text and put it on the right hand side of your image when creating a label so we can actually move the string of text around relative to the image this is how we can do that there's two functions to help us with that that is set horizontal text position and set vertical text position let's begin by setting the horizontal text position so we're going to take label dot set horizontal text position and we can pass in a constant so there's three options that we can use really to help us with this they are j label dot left center or right let's say that i want to put this in the center that would be j label dot center so now when we run this our text is going to be overlapping our image so by default horizontal text position will put the text on the right so if you want this centered you would use jlabel.center otherwise you can use jlabel.left if you want this on the left so the options for this would be set text left center or right of image icon so then let's set the vertical text position so that is label dot set vertical text position and we have top center or bottom so let's set this to j label dot top and then our text is going to be to the center and above our image so this will set text top center or bottom of image icon okay guys let's get a little crazy let's change the font color as well as the font styling of the string of text of our label so let's begin with the font color and we can use the label dot set foreground method to do that for us we can pass in a color and there's a few constants that you can use so let's say that we want green we can say color dot green alternatively what you could do if you want a more customized color is that you can pass in a new color and you can set the rgb values or you can set a hex value here so if you're using hex color values if you want green that would be 0x 0 0 f ff00 so now the font color of our text is now green what if you want to change the font styling well there is a method that will do that for you so that is label.set font and we can pass in a new font kind of like what we did with our new color so let's create a new font we can set the type of font that we want so one of my personal favorites is mv fully but use whatever font that you personally want and we can set the styling if it's plain bold underline italic so there's a few constants for this so font dot and you can pick one of these i'll just set this to plane and then you can set a size so i will pick 20. so then after compiling and running this the font is now changed for the text of our label so this will set font of text and this will set font color of text here's another useful method there is a set icon text gap where you can adjust how far away your text is from your image so let's try that so label dot set icon text gap and we place an integer number within here so if i set this to let's say 100 there is going to be a fairly large gap between our text and our image you can also set this to a negative number and you can pull things in closer so if i set this to negative 25 now our text is very close to our image so this will set gap of text to image now let's change the background color so we're going to use the label dot set background color method and we can pass in a color i'm just going to use a constant this time so let's say black color dot black like that alright so this will set the background color however let's take a look to see what happens so the color does not really necessarily change there is another method that we have to follow this up with and that is the label.set opaque method and we're going to set this to true so if true the component our label paints every pixel within its bounds so basically to display the background color you need to set opaque to true so this will display background color so now this should be black so our label is not just this little section the label likes to take up as much room as possible even if we were to expand this window the label is going to expand as well later on i'll show you a few ways that we can limit the size of this label if you want to place this label specifically somewhere within your frame but for now there's a few different methods where we can move the contents of the label around so right now this entire area is the label because the label likes to take up as much room as possible even if we were to resize this the entire thing is our label and i'll prove it to you by setting the border color so first we'll actually need a border so i'm going to create a border right after we create our image icon so we'll type in border border equals border factory i misspelt factory let me fix that border factory dot create and there's a few borders that you can pick from i'm just going to pick a simple line border and we can set this to a color so maybe color dot green and then you can set a border width so i will pick three three sounds good so then we'll probably need an import too so import border dot border i guess all right so then let's set the border for this label so label dot set border and we're going to use the border that we created it's just called border so then after running this the border of our label is now green so it's not just this little area with our text and our image the label likes to take up as much room as possible and you can see that with the border so one trick that you have available to you is that you can move the text as well as the image around within the label so by default it likes to be in the center vertically and to the left horizontally so we can change where this text and this image is placed within the label so we can move this to maybe the right side maybe the top to the bottom one of the corners this is how we can do that so we're going to use label dot set vertical alignment if we want to change the vertical positioning within the label so we'll set a constant j label dot and we can pick either top center or bottom so right now it's uh center so let's try moving this to the top so now this is in the top left of our label the text as well as the image but i think i'll keep this in the center because i want this to be in the middle so this will set vertical position of icon plus text within label and then we can do the same thing with set horizontal alignment so label dot set horizontal alignment and it's either let's see left center or right so i'm just going to set this to center so label dot center so now this text and image will always stay in the center of our label even if we were to resize this frame so this will set horizontal position of icon plus text within label now you're probably thinking that it's kind of stupid that the label is taking up the entire frame well that's because of the default layout manager that we're using so one thing that we can do at least until we get to the lesson on layout managers is that we can set the layout manager that we're using to null and then we can manually set the size and the placement of this label so it won't really take up the entire frame that we have so let's take our frame not the label frame dot set layout and for the layout manager that we're going to use normally with the default it's border layout let's set this to null and then when we run this it doesn't display anything well that's because now we have to set the bounds for the label so we're going to set where we want this label placed the x coordinates as well as the y coordinates and the dimensions of this label so let's add label dot set bounds so we have to pass in a value for x y the width and the height so for x let's say zero y is zero for the width let's make this 250 and the height 250 as well and then let's take a look at this so you can see that with our label it places the top left corner of our label where we set the x and y positioning to so 0 0 is the top left of our frame and it also set a size for our label so 250 by 250 if we were to change the size of our label let's say 350 by 350 well this label is going to expand in size however it still likes to stick to the top left corner because we set the coordinates to be 0 0 so let's change the coordinates as well but i will change this back to maybe 250 by 250 and then let's say x is now 100 so now the positioning for this label will move on the xaxis to the right by 100 pixels and if i set y to maybe 100 well then this is going to be also pushed down by 100 pixels and then if we were to resize our frame this is actually going to stay in the same place so use what works for you what you want for your program so this will set x and y position within frame as well as dimensions now i have one last trick for you guys that you might find very useful and that is the use of the pack functions of frames so to demonstrate this i need to get rid of our set bounds method that we have for our label i'll just turn this into a comment and the same thing with frame.set layout we'll just use the default layout manager that we have and the method is called frame dot pack it's the pack method of frames so what this does is that this will resize the size of the frame to accommodate all of the components that you have so after running this actually we don't even really necessarily need a size for the frame the size of the frame will adjust to fit all of the components that you have and then you can resize this if you want to otherwise you can use a set resizable false if you don't want people to resize this so if we were to actually expand the size of the components within the label such as the text size so let's say that i want this to be 50 well the size of the frame since we're using the pack method is going to adjust to accommodate the size of whatever's within the label so that's something that you might find useful but however you might like to use the set bounds method or the default layout manager it depends on what you want for your program but you have options oh and i forgot to mention this if you're going to use the pack method make sure that you add all of your components before using pack otherwise this doesn't work so i'll prove it to you so we're going to pack and then add our label so you can see that it doesn't work we just get this little tiny box so make sure that you add all the components and then pack well that's the basics of creating labels in java if you want a copy of all this code i'll post all of this in the comments down below but yeah that's how to create labels in java hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you