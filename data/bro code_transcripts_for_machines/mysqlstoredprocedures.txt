why hello again it's me so today I gotta explain stored procedures a stored procedure is prepared SQL code that you can save it's great if there's a query that you write often for example I have this statement it's very verbose there's a lot we have to write if this statement is something I have to write often I could save it and reuse it later this statement will interjoin the transactions table and my customers table then display all customers that made a transaction this statement is very verbose if I have to write the statement often I could save it as a stored procedure I can refer to the nickname that I gave that snippet of code the name I gave this procedure was get customers then I need to call this stored procedure and that does the same thing and it's a lot less to write there's also a few other benefits which we'll discuss at the end of the video let's begin with something simple I would like to select all from my customers table to turn the statement or statements into a stored procedure I will type create procedure then a name for the statement or statements I will name this statement get customers add a set of parentheses type the keyword begin wherever your statement or statements end type end then for clarity I'm going to tab all of my statements between begin and end so we have a problem we're trying to create this procedure however MySQL is stopping at this semicolon here we end all statements with a semicolon rather than at the end our semicolon is known as a delimiter it's kind of like the period at the end of a sentence we're telling MySQL that our statement ends here but we need our statement to end here after the end keyword we can actually change the delimiter temporarily type delimiter before we create the procedure typically when people change their delimiter temporarily they'll either use two forward slashes or two dollar signs I'll stick with the dollar signs because I think that's cooler after we create our procedure let's change our delimiter back to the semicolon MySQL no longer recognizes our semicolon as the delimiter after the end keyword I will use our new delimiter to end this statement that should work now let's execute the statement we have created our procedure I'm going to refresh my navigator window underneath stored procedures we have our stored procedure of get customers to invoke the stored procedure type call the name of the procedure get customers add a set of parentheses then a semicolon that will execute whatever code you stored within your stored procedure to drop a stored procedure you would type drop procedure the name of the procedure get customers let's try another example this time we will send our procedure a piece of data within the set of parentheses a customer ID number such as 1 2 3 4 so on and so forth we will get a customer by their customer ID we will create a procedure I will name this procedure find customer add a set of parentheses to find a customer by their customer ID when we invoke the stored procedure within the set of parentheses we will need to place a customer ID but when we create the stored procedure we have to set up what is called a parameter we will type in then a nickname for that piece of data we're passing in a transaction ID I'll give this parameter a nickname of ID then we need the data type of what we're passing in we're passing in an integer so we have one parameter set up let's use that begin keyword that end keyword list our statement or statements between these two keywords I will select all from my customers table where my customer ID equals the ID that we pass in that nickname we need to change the delimiter because MySQL thinks we're trying to end our statement here but we need it to end after the end keyword so let's change the delimiter to double dollar signs then change it back all right we have created that stored procedure let's invoke it call find customer within the set of parentheses we need to pass in a customer ID number let's pass in one that would give us Fred fish two is Larry Lobster three is bubble Bass five is Pearl crabs when you invoke a stored procedure you can pass in some data depending on what you need exactly for your stored procedure let's drop this procedure then do one last example drop procedure find customer this time we will send two arguments two pieces of data a first name and a last name create procedure find customer within our set of parentheses the first piece of data we'll pass in will be a first name but first is already a keyword maybe F name meaning first name then the data type let's see for customers the data type of first and last names is varchar50 varchar 50. for your next piece of data you would separate that with a comma in our nickname will be lname for last name data type is varchar 50. then I'm just going to put that on a new line for clarity type the begin keyword and write your statements between begin and end we will select all from our customers table where first name equals the name of the data that we pass in and last name equals the other piece of data the second piece the last name again we need to change the delimiter to create this procedure double dollar signs then change it back we have created our stored procedure let's invoke it call find customer within the set of parentheses we will list a first name and a last name Larry comma Lobster get Larry Lobster's information let's find him and there he is customer id2 first name Larry last name Lobster referral ID of one email is L Lobster gmail.com all right everybody that is a sword procedure it's prepared SQL code that you can save it's great if there's a query that you write often a few of the benefits is that it reduces Network traffic it increases performance and is more secure and administrator can grant permission to a user or an application to use a stored procedure one of the downsides though is that it increases memory usage of every connection and well everybody those are stored procedures in MySQL