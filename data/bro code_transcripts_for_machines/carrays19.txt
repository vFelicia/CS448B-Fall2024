hey how's it going everybody it's bro here hope you're doing well and in this video I'm going to teach you guys about arrays in C++ and at the end of this video we're going to work on a project where we can assign some names of cars and then place them all within an array and then we're going to take this array display all the values into some sort of virtual garage kind of like this pretty cool right let's get into it before you reach the end of this video make sure to LIKE comment and subscribe so that we together can challenge and defeat the mighty YouTube algorithm all an array is is that it's a variable that can store multiple values so for example I have a string variable named car and it's storing a single string with the word Corvette now we can actually turn this into an array by following a few simple steps so let's say that we want to add multiple car names to this variable well we'll want to turn this into an array then so the first step is that next to the variable name add a set of straight brackets and then all values that we want to assign to this array we're going to surround with a set of curly braces all right so this is our first value if we want to add a second value we're going to separate each value with a comma and then we can add maybe another car name so think of this maybe like a parking lot or a garage we're adding multiple cars to this array and they're each going to take up one spot so for the second car name I think I will assign a Tesla and the third how about a Ferrari all right and then with the name of the array you should pick a name that reflects the values that is storing so before we had a single variable named car so I think I'll turn this into cars because it's plural now so there we go we have just made an array now there's one limitation with arrays all the values that are assigned to this array have to be of the same data type so for example I couldn't mix an array with different data types like for example let's get rid of this Ferrari and just the number 2021 like a year well this would actually not work because we're mixing different data types this is an integer and these are strings so we have to be sure that we're only adding a values of the same data type although we could add the string representation of the number 20 21 this would technically work maybe we could change this to years and we'll make this an array of integer values so let's start adding some numbers so like maybe 20 20 20 21 and 20 22 so this would work the same as well with the Rays you have to make sure that all values are of the same data type now let's head back to our previous example of our array named cars now pay attention to what happens if I attempt to display this array named cars all right so take a look at this we get this address and you probably learned about this on the lesson on pointers this is where this array is storing these values at this address so if you want to display one of these values that's located in this array you actually have to label the element so what you want to do is that when you want to display it one of these values type in the name of the array then that set of straight brackets and then you're going to put the element number of the value that you want to retrieve and if you want to retrieve let's say this first value you're actually going to type 0 it's a computer science thing arrays always start at 0 and the next position would be 1 and then 2 and then you continue in that pattern so if we want to display this word Corvette or retrieve whatever is at this element element number 0 we're going to type in the name of the array followed by a set of straight brackets and then the element number which in this case is 0 so let's see what happens now and it displays our first value which is Corvette so now let's say we want to display this second value we're going to enter in element number one within the set of straight brackets let's run this just to test it yep that's right we have a Tesla in spot number 2 also known as element number 1 and then let's do the same thing with our last element here so that is index number 2 or element number 2 and that has a Ferrari now what happens if we attempt to retrieve an element that doesn't exist within our array so let's say 3 so we don't have an element 3 we have element 0 1 & 2 and this results in a problem so an exception was thrown it'll say something such as index out of balance and if we added another element to this array we actually wouldn't have that problem then so I think I'll have a naughty this time and then let's display this yep oh and another thing with these arrays you can always update these values so let's say that we want to change that last element element number 3 we're going to say cars straight brackets 3 equals and then we can pick a new value so maybe I'll place a I don't know I like Mustangs let's put a Mustang in there and then let's display this again so cars 3 equals Mustang yep it's right there let's say that you want to display all the values in this array let me show you what you don't want to do so what you don't want to do is simply just to see out all of these manually by hand so for example I'll just copy and paste this see out a few times so if we want to display the first element that is element number 0 the second one is 1 2 and then 3 all right so this would actually display all of them but it's probably not the best programming practice to actually display all these let me show you a better method to display all the elements of an array using a for loop then so let's start over fresh but we'll keep our array cars so the first thing that we're going to do is create a four loop so we're going to type four then up set of parentheses and then let's add a set of curly braces now there's three different statements that we're going to fill out within the parentheses of the for loop we'll need some sort of index so we'll say int I and set this equal to zero then a semicolon to move on to the next statement the second statement in our for loop is for our condition how many times do we want this for loop to repeat and cycle well we want this for loop to repeat for as many elements there are in our array of cars so one way to write this is that our conditions going to be I is less than size then a set of parentheses and within the parentheses we're going to type in our array name of cars and then we're going to add a semicolon to move on to the next statement so this is dynamic so if we were to increase the amount of elements that are within our array we wouldn't need to manually adjust how many times this for loop is going to repeat when we compile this program this number might update depending on whatever the current amount of elements is within our array so we could freely add or remove elements without worrying about our for loop working or not this is going to adjust so for the third statement we're just going to increment our counter so we can just type in I plus plus so now this for loop is going to repeat for as many elements there are in our array so let's say that we want to display each of these elements now so before what we did is that we just typed in C out and then the name of our array straight brackets and then we put a number in here so if we wanted the first element that was element number zero this would display the first element then the second one would be one two three so we would continue on like that so what we're going to do within this for loop is actually put our index of I so I is currently set to zero so when we reach this part of the for loop it's going to read cars at index I as in zero and the second time that we cycle through this for loop I is going to increment with this statement and I is now one and it's going to continue after each cycle so I'm just going to add an end line and let's try this out now all right here is our array of cars then that we made let's try another example of this just so that we really have the fundamentals down of arrays so I'm going to create another array of a different datatype so for cars I'm just going to comment this out for now and let's create a new array maybe years so let's make this of the integer datatype we're going to come up with a unique name for this array that reflects the values that it stores so years then a set of straight brackets equals and then we're going to add a bunch of values between this set of curly braces and I'm just going to make up some years so maybe twenty twenty one twenty twenty two two thousand nineteen ninety nine eighteen forty two alright and then for our for loop we're just going to change the word cars to years so here and here and let's try this yeah that looks about right we have five elements within this array this array called years and they're all displayed here well that's the very basics of arrays I'll post this code in the comments down below if you would like to take it a step further I'm going to show you some more advanced stuff involving arrays what we're going to do is dynamically allocate an array after the compilation phase by using a pointer don't worry I'll walk you through it so we will be able to ask the user for the size of an array and then have the user assigned values to it so we're actually going to make a project will ask the user how many cars they have and we're going to park each of their cars into an array think of it like a garage and each element has a parking spot number so if you want to continue let's take it to level two all right well if you're ready for some more advanced stuff we're going to create a program that's going to ask the user how many cars they have they're going to enter in some names of these cars and we're going to put them all within an array that's going to function like a garage and at the end we're actually going to display all the cars that are within our garage all the elements in our array the first thing that we're going to do is to create an integer variable and let's call this number we're not going to assign this value quite yet we're only going to declare it because we're going to have the user type in a number for the number of cars that they have so we're going to see out how many cars do you have and then let's see in their response and we'll store that within our variable number this number is going to reflect how many cars they have and this is going to function as the size of our array now this is the tricky part we're going to create a pointer for our array because we don't know how much space we need to allocate before the program actually compiles so these are the steps we're going to create a variable of strings so we're going to type string then we need to use the dereference operator and we're going to create a pointer so a common naming convention is to type in P lowercase and the name of the variable or the array and the first letter is uppercase so if this array is going to be named cars we can just type in cars here with a capital C equals new then the data type that we're working with so it's an array of strings so we're going to type in string a set of straight brackets okay so then within the straight brackets this is the amount of space that we want to give this array we don't know how much space we're going to allocate it's going to depend on this number so if you were to type in 10 this would allocate 10 spaces 5 would give 5 we're going to put in our variable number within here and then add a semicolon at the end so this is our pointer P cars for our array all right P cars is a pointer that's storing the address of our array and when we assign values to this we're sending values to whatever address is stored within our pointer now we're going to create a for loop that's going to repeatedly ask the user for each name of each car they have for as many times as the number that they typed in so let's create a for loop so for a set of parentheses and then a set of curly braces there's three statements to fill out within the for loop we'll need some sort of counter or index we can declare that within here int I and let's set this equal to zero semicolon the next statement is our condition we could easily just say we'll continue this for loop as long as I is less than whatever the number the user types in semicolon and then we're going to increment our counter by 1 within the for loop we're going to create a prompt for the user to enter in the name of each card that they have so let's see out some sort of message enter car number and then we will put the value or the index of I here now one problem though right now during our first iteration of the for loop I is going to be 0 and if some user doesn't know any programming and they probably won't they'll be confused when it says enter cart number 0 like what does that mean so what we can do to actually offset the display for our index is just say I plus 1 all right so this won't actually affect the value of 1 it's going to affect how it's displayed though to the user so I is still going to be 0 but when it's displayed it's going to be displayed as 1 so if somebody's using this program and it says enter card number 1 that actually makes sense before we had enter card number 0 where that probably wouldn't we understand what it means but the user might not so we're going to say enter car number I plus one and then let's add a semicolon and then we're going to see in actually let's get line because some car names might have some spaces between them so get line C in and comma and then what we're going to type in here is the pointer that we made so P cars at a specific index so then we need a set of straight brackets and then we're going to put our index or counter I within here and then just add a semicolon at the end now with this for loop it's going to have the user enter in a value for each car that they have and it's going to assign this value at wherever this array is located at wherever the pointer is pointing to which is where our array is located now let's create some sort of graphical display to actually display all this information so maybe we'll just make a C out message such as here is your garage and then maybe I'll create a new line after this maybe before this is well just to make it look nice um maybe let's add like some sort of line here too then I'll create a new line okay I think that's fine and for this last step all we need to do is to create another for loop that will display all the elements of this array this time and honestly we can just copy what we have here and simply paste it and make a few changes all we need to do is to change the contents of this for loop we can leave all of this the same then so let's create some sort of display for each line so maybe see out maybe let's type in parking spot number you don't have to do this exactly as I do you can create your own sort of display parking spot number maybe I or you could do I plus one I think I'll do I plus one you could have a parking spot number zero if it's like a VIP parking spot or something do what you want to do so parking spot number one and then I think I'll add a space and then I will display the element of each array so if you want to do that we're just going to type in P cars straight brackets and then our index then semicolon Oh before we actually do run this there is a few housekeeping things I'm going to add real quick I forgot to and the line after this and I'm also going to add a space after the number to make it look better I'm kind of doing this on the fly so the syntax isn't going to be perfect all right we should be good then so there's one thing you're going to notice when we run this and it's going to be fairly evident at first alright so how many cars do you have let's say four and then hit enter all right so you'll notice that it says enter card number one and then immediately it goes to enter card number two and this is the reason why it actually skipped the first prompt for car number one and that's because when we typed in four and hit enter well see and picked up the four but when we hit enter that's still within the buffer and we need to get rid of that because then when we used the get line function here it actually took the newline character and entered it into the first line of our array so what we can do is actually clear the buffer and what we'll do is after we type in CN number we're just going to type in C in ignore and then just add a semicolon so then that should clear the buffer then so that's just one thing you might run into and I wanted to point that out okay now we should be good to go all right how many cards do you have I have four cars enter card number one let's say I have a Lamborghini Lam or I don't know how to spell Lamborghini I'll just type in Lambo car number two maybe a Tesla number three maybe and Oddie and number four perhaps a jeep all right here is your garage and here are the four cars that we have they're all within our garage and that is basically how you can create a program to dynamically ask for the size of an array and assign values to it to display if you would like a copy of this program I'll post all of this code in the comments down below and if you're looking for additional practice then why don't you create a program that involves an array and post them in the comments down below if you'd like to share it but yeah that's everything you need to know to get started with arrays in C++ hey you yeah I'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you