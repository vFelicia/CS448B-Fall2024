hey everybody let's talk about bitwise operators these are special operators used in bit level programming knowing binary is important for this topic so if you don't know how binary works i would recommend skipping to the next topic but if you're comfortable with binary well this video is for you so let's begin i'm going to discuss five different bitwise operators and or exclusive or left shift and right shift let's create three variables x y and z x will equal six y will equal twelve and z will store our result and we will set that to be zero so i'm going to give you the binary representation of each of these numbers so six is this number so we have eight bits that's a byte and this is the binary representation of the number six 12 would be this binary number and zero zero is easy that would be all zeros so let's use the and bitwise operator so what we're going to do is set z equal to x and y so imagine this imagine that we're aligning all of these bits in columns using the and bitwise operator we're going to look at our operands x and y if both of these are a one we will assign one to our result and let's begin with the first column on the right both of these are zeros so our result will stay at zero and with the next column we have one and a zero and using the and bitwise operator both of these need to be won in order to assign one to our result so we will skip this column now with our third column these are both one so we will assign one to our result the next column is zero and one we skip it and the rest are just zero so this binary number is the binary representation of the number four so let's test that z equals x and y and let's print z and equals we're displaying an integer i'll add a new line and we are displaying z and let's see if this is four yep our result z is equal to four now let's move on to or so let's set this back to zero and we will set z equal to x or y or is represented by a single vertical bar and we will print or let's try and guess what z is going to be before we actually display it with the or bitwise operator only one of these bits needs to be one in order for us to assign one to the result so since these are both zero this will stay at zero this bit is one this one's zero so this would be one and for the next column of bits these are both one so that counts as well and we have a one in here so that is one and the rest are just zero so this is the binary representation of the number fourteen and let's see if z is equal to fourteen yep we got that right so let's set this back to zero now with exclusive or that is represented by a carrot with exclusive ore only one of these bits can be won if neither or both of these bits are one we don't assign anything so both of these bits are zero they will stay a zero we have one of these bits as one and not the other so that counts as one now with this next column both of these are one and using exclusive or only one of these can be one so since these are both ones we do not assign anything so we keep that as zero and with the next column only one of these is one so we will set this to be one within the result and this is the binary representation of ten and let's test that z equals x exclusive or y and we will print exclusive or equals z and let's see if that's ten yep z is equal to 10. now here's left shift we will shift these bits so many spaces to the left using left shift so we will set z equal to x and then left shift which is represented by two left angle brackets a number of spaces let's begin with one so we have x equal to six what we're doing is shifting these bits one spot to the left and then adding 0 at the end and this is the binary representation of the number 12. actually it's the same as y currently these binary numbers are the same and let's print that so shift left and z should equal 12 yep and if i shift left twice well then we are just moving these bits one more space and now this is 24. there you go so you probably noticed that there's a pattern every time we shift a binary number to the left it effectively doubles now let's right shift so let's copy this paste it and we will use two right angle brackets and this is shift right and let's set this to six if we're right shifting we shift these bits one spot to the right and this is the binary representation of the number three and if i print this after shifting right once our result z is three every time we shift right we're effectively cutting our number in half now if i shift right again we will shift these bits one more spot to the right and we are going to truncate this one at the end and this will give us one that is the binary representation of the number one so technically half of three is 1.5 but we can't store that 0.5 portion so it just gets truncated all right everybody those are just a few bitwise operators they are special operators used in bit level programming there's five that we discussed today but there is another known as the complement operator but that's a little bit more complex and i might save that for another video so yeah those are bitwise operators if you would like a copy of this code i'll post this to the comment section down below and well yeah those are some bitwise operators in c