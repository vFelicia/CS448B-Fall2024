hey what's going on everybody in today's video I'm going to explain the usate react hook and near the end of this video we're going to create a reactive counter program so sit back relax and enjoy the show I haven't explained what react hooks are yet a react Hook is a special function that allows functional components to use react features without writing class components this was a change made in react version 16.8 basically we no longer need to write class components we can write function based components that use rea hooks to use react features there are many react hooks if a function begins with use it's probably a react hook use State use effect use context use reducer use callback and more use state is the most widely used use state is a react hook that allows the creation of a stateful variable and a Setter function to update its value in the virtual Dom basically by using the UST State hook we can create not just a variable but a stateful variable when you update this variable that change will be reflected in the virtual Dom normal variables don't when you use the UST State hook you're given a variable and a Setter function specifically for that variable so what we'll do in this example is create a new component going to our source folder we're going to create a new file we'll name this component my component we use react hooks in function based components so make sure you're not writing a class component with this component we will export it export default my component then be sure to import this because I'm probably going to forget if we don't do it now so we will import my component from its location do/ my component and this is a jsx file let's return one my component and we are ready to begin in order to use a react hook we need to import it it at the top of this component we will import the react Library however we don't need the entire react Library we can use object destructuring to extract individual variables or functions I would just like the UST State function we don't need the entire react library from its location react we now have access to this use State function using the use State function we'll create a stateful variable and a set function to update that variable so let's declare const we're going to use a set of straight brackets for array destructuring equals use State function the use State function returns an array with two elements a variable and a Setter function we're going to use array destructuring to destructure these two elements we'll create a stateful variable for name then we're given a Setter function specifically for this variable a common naming convention is to typee set then the variable name with camel case naming convention and that's it if we ever need to change the value of the stateful variable we have to do so with this Setter it's a function at the bottom we're going to return a development within this development we'll create a paragraph element and a button we'll begin with a paragraph element that has text of name and I'm going to zoom in a little bit I will insert some JavaScript using curly braces let's display our name following our paragraph element let's include a button the button will have an onclick attribute equal to a JavaScript function so we need a set of curly braces to embed that let's create a function to update name for the text of the button let's say set name name all right now we just need to declare this function I'll use an arrow function const update name equals Arrow function so what would we like to do okay let's attempt to set our name equal to type your name or some other name I'm just going to type in SpongeBob if I click on this button we should update our name right well that doesn't appear work so if I were to console.log my name variable then attempt to update it using this button if I were to go to my console hold on I'm going to use let so we can update it if I attempt to change this name of the variable it does so within our console but it doesn't update in react the virtual Dom is still displaying the previous state so if I would like to display display any changes I will want to use that Setter instead of setting our name equal to a new value I'm going to change this back to be a constant we will use the setter function and pass in a new value so let me type in a new value and that should work we have updated our name when you use the setter function of a stateful variable it will trigger a rerender of the virtual Dom normal variables don't that's why the US state Hook is useful we can create a stateful variable when the stateful variable gets updated with its Setter function it triggers a render of the virtual Dom with the UST State function you can pass in an initial state currently we're not passing in anything for the initial State I will set this to be guested when I refresh everything and start over the initial state is guessed whatever value you pass in to the UST State hook then I can set my name again to something else now we're going going to create an age variable and increment it const we're going to use array to structuring we need a stateful variable like age and a Setter function for that age set age equals use state if you would like an initial value you can place that within the UST State function I'll set the initial value of age to be zero I'm going to copy this paragraph and this button change name to be age we'll create a function to increment age the text on the button will be increment age now we just need this function const increment age I'll use an arrow function to increment our age we will use the set age function let's take our age + one so our initial value for our age is zero but every time I click on the button we will update the value of that variable so every time I click the button we're increasing our age by one or even a different number this time I'll increase our age by two on each button click so we start at zero then we'll increment by two 2 4 6 8 10 now this time we'll create a Boolean variable and toggle it between being true and false using the usate hook we will create const is employed the setter function will be set is employed equals the use State hook I would like an initial value of false let's create a paragraph element and a button I will set the text of the paragraph to be is employed instead of displaying a Boolean directly let's use the tary operator for conditional rendering is employed if that is true we'll display yes otherwise no when we click on the button let's create a function to toggle toggle employed status that's kind of a Long Function name all right let's create a function const toggle employed status equals an arrow function we will use the setter function set is employed pass in a new value let's switch this value from being false to true and true to false every time we click the button since this is a Boolean we can use the not logical operator to reverse it so let's say not is employed and let's see if this works is employed no oh let's change the text on the button too toggle status there we go all right when we click on the button we can toggle this Boolean from being true to false and false to true and this should happen every time I click the button as a project what we're going to do now is create a counter program so let's close out of my component we'll create a new component for a counter component counter. jsx this will be a function base component function counter then be sure to export it export default counter going back to our app component we will import our counter component from its location counter. jsx then we will include one counter component and that's it in order for us to use the use State hook we have to import it from the react Library import react we'll use object destructuring just to get the US state hook and nothing else from its location of react all we need is one variable a counter let's say const we'll use array destructuring create a stateful variable of count and a Setter function for that count set count equals the use State hook would we like an initial value for count we would like the initial value to be zero we'll create a few functions to increment decrement and reset the counter const increment equals I'll use an arrow function to up update the count to increment it we will use the set count function the value we pass in is Count + one then let's do this for decrement const decrement count minus one then reset const reset for set count we'll pass in zero to reset the count now we're going to return some elements we'll also style this with CSS let's begin with the div element I'm going scroll down a little bit my div element will have a class name equal to counter container I will create a paragraph element with a class name equal to count display to display the number for the text of the paragraph I will insert some JavaScript and display our count variable we'll create three buttons for the first we'll create a button element this button will have a class name of counter button the onclick attribute will be set equal to a JavaScript function this first button will be the decrement button for the unclick attribute we will set this equal to the decrement function for the text on the button we'll say decrement and there's our first button so let's copy this button paste it the second button will be for reset the text will be reset then the third button will be increment onclick will be the increment function the text will be increment all right and that's all that we need let's check it for functionality to be sure that everything works we can increment this number we can decrement it and we can reset it so for the icing on the cake let's style it with CSS going to our index CSS stylesheet we'll apply the following CSS let's select our counter container do counter container I will text align Center change the font family I will pick a s serif font of Ariel with a backup of s serif next we'll select the count display select the class of count display that would be this number will increase the font size to something massive like 10 em RM works too okay that's a little too big but I am zoomed in actually you know what that's perfect I will set the margin top to be zero to close this Gap and I will set the margin on the bottom to be 50 pixels then let's work on the counter buttons next select the class of counter button I will set the width to be 150 pixels the height to be 50 pixels the font size to be 1.5 em I will set the font weight to be bold set the margin to be 0 pixels by 5 pixels this would be for the left and right of the buttons change the background color pick a color that you like I'm going to use hsl values though that's pretty good I will set the color of the font to be white remove the border border none set the Border radius to around the corners five pixels and change our cursor to be a pointer if we hover over the button when we hover over the button I'm going to change the background color of the button so with the counter button class with the counter button class we will select the hover sudo class we'll take our background color decrease the lightness to be 10% darker there we are and that is all the CSS styling that we need we have our counter program we can increment the counter we can decrement it and we can reset it all right everybody so that is the use State react hook it allows the creation of a stateful variable and a Setter function to update its value in the virtual Dom when you include the UST State hook you're given an array of two elements we use array destructuring to create a stateful variable and a Setter function to update that variable and well everybody that is the UST State hook in react