what's going on everybody so in today's video I got to talk about promises in JavaScript A promise is an object an object that manages asynchronous operations such as querying a database fetching a file Gathering resources those you could consider asynchronous operations they can take an indeterminate amount of time you can wrap a promise object around some asynchronous code the promise object promises to return a value that promise object will be pending then either that promise will be resolved D if the task completed successfully or rejected if it failed for some reason maybe the promise couldn't fetch that file resolved if it did A promise is an object we'll create a new promise object with new promise then pass in a function usually you see this is an arrow function there's two parameters resolve and reject Arrow then do some asynchronous code so in this demonstration we're going to be doing some chores if you live with your parents maybe your mom asked you to do these chores or with the roommate these are the tasks you need to do or your significant other wants you to do these tasks anyways we have some chores to do we have to walk the dog clean the kitchen and take out the trash I'll create functions for each of these chores first we'll start by using callbacks then I'll demonstrate the use of promises and how they're helpful so let's create a function to walk dog to make this asynchronous I'm going to add a set timeout function this takes a call back and an amount of time in milliseconds to to complete this code let's say walking the dog takes 1,500 milliseconds what code would we'd like to perform let's write an arrow function to keep it simple parameters Arrow do this let's console.log after completing this chore you walk the dog okay that'll be the first function let's create a function to clean the kitchen function clean kitchen this will take a long time 2,500 milliseconds let's say when we complete this task we will print you clean the kitchen and a third function take out trash you take out the trash taking out the trash it's really quick it takes half a second 500 milliseconds if I need to do these chores in order I would need to use some callbacks after walking the dog we will call a call back to clean kitchen after we clean the kitchen we will take out the trash we need to modify these functions so that they accept some call backs after our code is complete we will invoke the call back call the call back so let's add that par parameter to each of these functions now if we want to call all these functions in order we would have to start using call back hell which we learned about in the last video so first I would like to walk the dog I will call that function pass in a call back but we'll use an arrow function then we will clean the kitchen pass in a call back I'll use an arrow function take out trash and we'll pass in a call back to do this when we complete all the chores console.log you finished all the chores okay let's see if this works you walk the dog you clean the kitchen you take out the trash you finished all the chores if we have a lot of call backs to work with we'll end up going to call back hell you don't want to go to call back hell so what we'll use instead are promises with all of this asynchronous code we'll wrap it within a promise by using a promise we don't need callbacks instead of using callbacks we'll use method chaining we'll method chain our promises here's how how we'll modify these functions is that at the end of each function we will return an object return a new promise return a new promise object and follow this formula we have two parameters resolve and reject resolve Sol reject Arrow do this asynchronous code within an arrow function take all of the asynchronous code cut it place it within the promise our promise promises to return a value it's either going to be resolved or rejected we're going to modify this function we don't need to work with call backs anymore we can get rid of those get rid of the parameter and the portion of the code where we call the call back if we would like to display a message when the pr promise resolves when it finishes successfully we will instead call the resolve parameter it's a function this message is the value the argument that we're passing in after you finish walking the dog here's your completion message when the promise resolves let's modify the rest of the functions so that they use promises we will return a new promise two parameters resolve reject Arrow do this asynchronous code let's cut our current asynchronous code paste it remove the call back parameter we don't need it anymore and we don't need to call the call back when this promise resolves pass along this message you clean the kitchen let's do this with take out trash we will return a new promise two parameters resolve reject Arrow do this cut the asynchronous code paste it within the promise remove the call back and where we call the Callback when we resolve this promise pass along this message we no longer need to use callback hell instead we're going to use method chaining first we're going to walk the dog clean the kitchen and then take out the trash in that order we will call the walk dog function and then we're going to Method chain follow this with the then method walk the dog then what is what we're saying the walk dog function does provide a value parameter this message we can use that message for something that's going to be stored within value that's going to be the parameter that's provided to us take the value let's print it console.log my value so when I run this program we should only be walking the dog you walk the dog and nothing else looks like I misspelled resolve as resolves there after walking the dog I would like to clean the kitchen so I need to call that function next within our Arrow function we'll write more than one statement we need to enclose this within a set of curly braces print our value and then do this function return clean kitchen and then call it we'll add another then method then take the value provided by clean kitchen that will be this one take that value arrow console.log that value you walk the dog you clean the kitchen then we'll take out the trash at the end We'll add another statement to this then method we will return take out trash invoke this method then we will take the value provided to us when it resolves this value do this code console.log that value you walk the dog you clean the kitchen you take out the trash so after taking out the trash that's our last chore let's add another line of code after displaying you take out the trash let's console.log you finished all the chores you walk the dog you clean the kitchen you take out the trash you finished all the chores by Method chaining then methods it's a lot easier to write than nesting call backs now sometimes times with asynchronous functions depending on the task the task May Fail let's say we're trying to locate a resource a file if we can't locate that file and we're using promises we don't want to resolve that promise because we couldn't locate that file instead we want to reject that's what happens when an asynchronous function fails to do something when inside a promise so let's change our functions around within set timeout let's create a variable const dog walked did we accomplish this this will be true or false we'll use an if statement if dog walked then we will resolve it if we walk to the dog else we will reject we'll pass in a different value you didn't walk the dog okay let's do this with the other functions let's create a constant of kitchen cleaned equals true if our kitchen is cleaned if that is true we will resolve this promise you clean the kitchen else let's reject pass along this message you didn't clean the kitchen and lastly take out trash const trash taken out let's set that to be true if the trash is taken out resolve the promise else we will reject you didn't take out the trash if a promise might reject there's one more method we need to add to the end of this chain we need to add a catch method to catch any errors this will catch any rejects this is similar to error handling we'll be provided with one value an error Arrow do this let's console.log or even console. error the message provided to us with reject that's what the error is going to be will successfully walk the dog that will be true and cleaning the kitchen will be true but taking the trash out will be false we weren't able to complete this chore these are the results you walk the dog you clean the kitchen you didn't take out the trash how dare you we'll keep on completing these tasks until we fail at one of them so if walking the dog was false that was our first task this first promise was rejected we don't even attempt to resolve these other promises all right everybody so those are promises they're an object that manages asynchronous operations you can wrap a promise object around some asynchronous code these promise objects promis to return a value they will be pending until they complete then they'll either be resolved if that task completed successfully or rejected if it failed for some reason and well everybody those are promises in JavaScript