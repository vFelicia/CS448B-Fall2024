how's it going everybody its bro here hope you're doing well and in this video we're going to be discussing and dynamic polymorphism in Java so let's get into it if you find this video helpful please remember to Like comment and subscribe your support will help keep this channel running alright everybody so we're gonna be discussing dynamic polymorphism and I know that sounds somewhat intimidating but it's not too bad once you break down the vocabulary so what we learned in the last video on polymorphism is that polymorphism is a Greek term poly means many and then morph means either shape or form and when you put those two together it means many shapes or forms so picture a Corvette a Corvette can have many shapes and forms it identifies as one or Corvette it also identifies as a car also as a vehicle and it also identifies as an object now the word dynamic that means in programming after the compilation phase after the program compiles so this is during runtime after the program is already running so when you combine these two words together dynamic polymorphism it's the ability of an object to take many shapes or forms after the program is already running so what we're gonna be doing for this video is declaring an object of the animal class which we have to make still and we'll call this object animal and we'll give the user two choices they can have a dog or a cat so we're going to end up either declaring this as an instance of the dog class and use the dog constructor or use the cat constructor but we don't know quite yet so we're going to ask the user during runtime so for now we're only going to declare that we want an animal of the animal class but we don't know if they're gonna be a dog or a cat they're gonna assume one of those forms so let's create a few classes so within your project folder you can right click go to new class and let's create an animal class and this is going to be the parent class for dog and cat so that's good for now let's head back to our project folder and create a dog class so dog is going to extend animal because dog is the child class of animal and let's create a cat class so cat finish cat extends the animal class let's also give these classes maybe just one method so make this a public void method and let's call it speak so this animal is going to say something relevant to the type of animal that it is so maybe cat goes meow and let's do the same thing for dog and I'll just copy this paste it and we'll change cat to dog dog goes bark and let's do the same thing for animal even though we don't have to so what's something generic that all animals say I can't really think of anything so I'm just going to make up something animal goes BRR so the speak method for the dog class and the speak method for the cat class are actually overridden methods they're overriding the speak method of the animal class so it's considered good practice to add a note that says override to let other users know that this is a overridden method and if we instantiate an object of the dog class or the cat class it's going to use its associated speak method compared to the generic speak method for the animal class now let's head back to our main class so what we're going to be doing is prompting the user to type in if they want a dog or a cat and then we're going to instantiate an object of that type of that specific form so let's create a prompt but we'll need a scanner first so let's create an instance of a scanner so scanner let's call it scanner for the lowercase s equals new scanner then within parentheses system dot in and then we'll need to import something so make sure you have this import at the top now let's create a prompt for the user so we'll assist dot out dot print line what animal do you want and then we'll give them two choices so maybe we'll do this on a second line so maybe we'll type in 1 equals dog or two equals cat maybe I'll just make this a print statement okay and then let's give the user a choice so we'll assign this to a variable so we'll make this an integer because it's gonna store a number so int choice equals scanner dot next int all right so then we're going to have a few if statements here so if choice is equal to one what we'll do is that we're going to take our animal object and we're going to finish instantiating this so new we're going to use the dog constructor we're going to construct this animal as a dog and then we'll have this animal use its speak function so this is going to be an overridden method it's going to use the specific overridden method for dogs let's do the same thing for the cat so we'll change this to an else if statement choice equals to animal equals new cat we'll use the cat constructor the animal will still use its speak method and then else they must have typed in something wrong we'll Stan shape this with the animal class so new animal use the animal constructor system that out dot print line that choice was invalid and then maybe we'll use the animal dot speak method as well alright let's test this what animal do you want let's pick a dog I like dogs dog goes bark and let's try it again what animal do you want I want a cat this time cat goes meow and let's try this one last time let's make up a random number I like the number 42 that choice was invalid animal goes BRR so that's one of the benefits of dynamic polymorphism you can declare an object and make space for it in memory even if you don't know what type of object you want quite yet so for example we said that we want an animal and we're going to make room in our program for an animal but we don't know quite yet what kind of animal it's gonna be and in our case we're not sure if this animal is going to be a dog or a cat so here's a few other examples of dynamic polymorphism so do you remember and pretty much any game from the Pokemon series you had to choose if you were a boy or a girl well you could declare that your data type is a human as a placeholder but you're going to use the appropriate game sprite for a boy or a girl once you make your decision otherwise let's take world of warcraft so you have to pick a character class but when you first create your character you don't have one picked out quite yet so you have to later decide if this character is going to be a paladin a hunter a mage etc and then once this object does assume a form during a runtime it's going to inherit everything from the parent classes and if there is any methods that are overridden they're going to use these overridden methods in place of any previous methods that they might have had so that's the basics of a dynamic polymorphism if you want a copy of all this code I'll post all of this in the comments down below but well yeah that's the basics for dynamic polymorphism in Java hey you yeah I'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow grow