hey everyone it's me again and in this video i'm going to explain the selection sort algorithm and computer science as always sit back relax and enjoy the show okay everybody selection sort selection sword is an inplace comparison sorting algorithm that keeps track of the minimum value during each iteration and at the end of each iteration all we do is swap variables how i like to imagine this is that let's say that our array is a bunch of different closed boxes and each box contains a number and they're all out of order so what we'll do is we have a flashlight too because we're in the attic and it's really dark so we have a flashlight we will open each box beginning with the beginning of our array and we'll take a look at the value inside okay 9 is a fairly small number i guess right so we will move this value to some temporary storage we'll keep track of the index of the minimum value 9 is the new minimum let's open the next box and holy crap it's a one one is a really small number so that will be the new minimum then we'll open the next box which is an eight one is still less than eight let's move on the next box is two seven three six four and five one was the minimum value during this iteration and we need to move this value to the place that we started during this iteration index 0 so we'll have to do some good all variable swapping so we will take 9 place it within some temporary storage then take 1 and place it where 9 was then take 9 and place it where 1 was and that is the first iteration let's move on to iteration two and we'll clear min and temp okay so this portion is done now we're not worried about it this is the new beginning of the next iteration and well nine is a low number i guess we'll move that to min but eight is even lower than nine so we'll move that to min holy crap it's a two two is the new min for sure and then we just repeat this process over and over again two is the current minimum of this iteration one was the minimum of the first iteration but we're not concerned with that it's already sorted so we need to move two to where we began this iteration at index one and currently there's a nine in there so we're going to evict this nine place it within some temporary shelter take two place it within where we started at index one then take nine place it where two was and that is the second iteration now that we kind of know how this process works i'll speed up the rest of the video for this demonstration so let's begin at index 2. and that is the selection sort algorithm the selection sort algorithm has a runtime complexity of big o of n squared the larger the data set the more and more inefficient that using the selection sort algorithm is going to be although it's okay with smaller data sets now let's create our own selection sort algorithm okay let's implement a selection sort we'll need an array or other collection to work with let's create an array of integers because i want to make this as easy as possible so integer array and make up some random numbers make sure that they're not in order what about eight seven nine two three one five four six i guess then let's use a for each loop to iterate over the elements of this array for and i in array we will display each element with a print statement system.out.print i and let's run this once just to be sure that everything is working fine so 879 everything is working as it should so before we display the elements of our array let's invoke a selection sort function which we still need to declare so selection sort and we will pass our array as an argument because well that's what we want to sort right so selection sort and we'll need to create this method i will cheat and use the shortcut so outside of our main method let's declare private static void selection sort there is one parameter an array of integers we'll need a pair of nested loops to iterate over our array so let's work on the outer loop for and i equals zero we will continue this as long as i is less than array's length property minus 1 then increment i by 1 during each iteration then there is a nested loop within here change i to j so j equals i plus one j is less than array length and j plus plus so we'll need to keep track of the minimum so we'll do that outside of our nested loop int min equals i so that is the current minimum and within the nested for loop we will check to see if our array at index of min is greater than array at index of j if it is we will change our min to equal j then outside of our nested loop but within the outer loop we will do some good old variable swapping so int temp equals array at index of i to store this element array at index of i equals array at index of min then lastly array at index of min equals temp and that's all there is to it so after running this program our array is now sorted via the selection sort algorithm then of course if you need your array or collection sorted in descending order currently it's in ascending order all we do is swap this greater than sign with a less than sign and this will now be sorted in descending order depending on what you need well okay then everybody that is the selection sort algorithm it will search through an array and keep track of the minimum value during each iteration at the end of each iteration we swap variables and that's all there is to it it runs in quadratic time big o of n squared it's okay with small data sets even more so than bubble sort and it's pretty terrible with large data sets the larger the data set then more and more inefficient that this selection sort algorithm is going to be so that is the selection sort algorithm if you learned something new give this video a big fat thumbs up drop a random comment down below and well that is the selection sort algorithm and i guess computer science