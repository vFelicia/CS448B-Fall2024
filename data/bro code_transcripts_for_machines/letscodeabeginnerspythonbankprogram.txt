hey what's going on everybody so in this video we're going to create a very simple banking program using python this is meant to be more of an exercise to get us used to working with functions when creating a project I like to divide that project into smaller sections then handle them one at a time so we'll do that by declaring all the functions we'll need first with the banking program we'll need to show a user their balance we'll Define a function to show balance for the time being I'll write pass just as a placeholder we'll need to make a deposit Define deposit make a withdrawal Define withdraw near the end of this project we will be creating a main function and placing the main body of our code within it we'll handle that near the end just to contain everything we have our three functions with our banking program we'll need to show a balance make a deposit or make a withdrawal what if some variables we'll need well we'll need a balance which I will set to be zero initially I will also create a Boolean of is running this will be true if at any time we set is running to be false we'll exit the program so with the majority of our code we'll place it within a while loop while is running you can check to see if this is equal to true but since this is a Boolean that's not necessary we will just just say while is running if is running becomes false we'll exit the while loop within our while loop we'll print some sort of Welcome message let's print banking program then list some options let's print one show balance to deposit three will be withdraw for will be exit afterwards we will set a choice variable to equal some user input input enter your choice 1 through 4 We're encouraging a user to type in a number 1 through 4 to select an option do they want to show their balance make a deposit make a withdrawal or exit We'll add a few if and else if statements let's check to see if the user's choice is equal to one that is a string of one our user input is a string data type unless we were to typ cast it to something else if our choice is equal to one we will call call the function to show balance else if our choice is equal to two we will make a deposit by calling the deposit function else if choice is equal to three we will call the withdrawal function else if choice is equal to 4 that means we would like to exit so we need to exit this while loop we can do that by setting our variable of is running is this program running equal to be false to exit if somebody types in some input that's not valid we can handle that with an else statement else let's print that is not a valid Choice okay let's see what we're working with currently to test everything we haven't written anything within these functions yet show balance deposit or withdraw so we can type one 2 three and four to exit processed finished with exit Code Zero so we can't exit the program we just have to select option four with this else statement this will execute if we type in something besides the numbers 1 through 4 because there's no other options left so to test that enter your choice Choice 1 through 4 uh I'm just going to type the word poo that is not a valid choice so we know that the else statement is working once we exit the while loop let's print a message that says thank you have a nice day if I was to type four to exit we should exit the program thank you have a nice day let's make that h capital now we'll work on our functions beginning with show balance currently these two variables are Global we don't need to pass them as a parameter to these functions quite yet we will be enclosing all of this code within a main function we'll handle that later though so with show balance all we're going to do is print I'll use an F string your balance is add a dollar sign or other unit of currency of you're choosing add a placeholder our balance variable and let's see what we have I will type one to show balance your balance is 0 I'll display our balance with two decimal places after I will add a format specifier after balance colon. 2f will add two decimal places we covered format specifiers in a previous topic so if I were to run this again type one we show $0 and 0 cents we're displaying two floating Point decimal places now we need to make a deposit that'll be the next function we will Define a local variable of amount equals accept some user input enter an amount to be deposited again when we accept user input it's a string we'll typ cast it to a number a floating Point number because we have to include dollars and cents we'll add some checks though after accepting some user input if our amount is greater than zero we don't want anybody to make a negative deposit let's print that's not a valid amount else we are going to return our amount so this function is going to return something so within our else if statement we will take our balance plus equals the deposit we're being returned with this will add our deposit to our balance balance balance plus equals deposit let's try it let's show our balance our balance is $0 we'll make a deposit of $100 exactly again we'll show our balance after making the deposit your balance is $100 let's attempt to deposit negative money we'll select two to make a deposit we'll deposit negative $420 69 that's not a valid amount so we have a problem we have a type error unsupported operand for float and nonone type so within this statement within if within our deposit function we're not returning anything let's just return zero we have to return something and within this if statement we didn't return anything previously we'll either return zero or return a valid amount let's try this again let's make a deposit I will attempt to deposit 42069 that's not a valid amount our program is not crashing that's good now we'll attempt to make a valid deposit $501 then show my balance your balance is $501 okay that is the deposit it function we'll work on the withdraw function next we will create a local variable of amount accept some user input enter amount to be withdrawn our user input is going to be a string we will typ cast it to be a floating Point number we need to check to see if our amount we're trying to withdraw is greater than our balance users shouldn't be able to withdraw more money than what they have in their bank account if the amount is greater than our balance that we have we will print insufficient funds else if the amount somebody's trying to withdraw is less than zero we will print a different message amount must be greater than zero else we will return our valid amount so with our if and else if statements we do need to return something if we take one of these routes we will return zero we're not making any any changes within our else if statement where we select choice three we're going to take our balance minus equals the withdraw amount let's test this banking program let's show our balance our balance is zero we'll make a deposit of $100 show my balance again your balance is $100 let's press three to withdraw money enter amount to be withdrawn one1 kajillion dollar insufficient funds yeah no kidding Let's attempt to withdraw money again we shouldn't be able to select a negative amount negative $420 69 amount must be greater than zero let's enter in a valid number this time I would like to withdraw $49.99 that has appeared to work we'll show our balance again your balance is now $501 then we can exit by pressing four to exit thank you and have a nice day the last few changes I'm going to make is that I'm going to enclose all of this code our main portion of code within a main function just to encapsulate all of our variables and help with readability we will Define a function of main take all of our code within the main body of our program and place it within the function I'm just going to select all of it and indent it at the end of our program we need to call a main function to run it if you're familiar with the statement of if Dunder name is equal to a string of Dunder main that means this program can be imported or run stand alone it is good practice to include this if statement we discussed this in the pr previous video if we're running this program directly execute the main function however our variables of balance and is running they're now enclosed within this local scope these other functions have no idea what these variables are of balance so we need to pass in our balance to those functions of withdraw and show balance when we show our balance we have to pass in our variable of balance same thing with withdraw then set up those parameters within show balance we will have one parameter of balance the same thing with withdraw the last thing I'm going to do is add a little bit of text decoration around my program just to make it look nice so I will print a bunch of asterisks it's not necessary but I think it'll look nice let's add some text decoration before and after the title of banking program also before our choice basically whenever we print anything We'll add some text decoration let's do that with show balance our deposit and within withdraw okay let's run this one last time banking program let's show our balance your balance is 0 we'll make a deposit $100 and 1ent show our balance again your balance is $100 And1 we will withdraw money enter an amount to be withdrawn $1,000 insufficient funds let's try that again let's withdraw $50 show our balance again $501 then press for to exit thank you and have a nice day all right everybody that is a simple banking program you can write using python on