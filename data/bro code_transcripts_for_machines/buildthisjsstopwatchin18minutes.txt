hey what's going on everybody in today's video I'm going to show you how we can create a stopwatch program using JavaScript HTML and CSS so sit back relax and enjoy the show all right let's get started everybody we will create an H1 heading with text of stopwatch and I will give this H1 element a unique ID of my H1 then we'll create a container for our stopwatch this will be a development this development will have an ID of container to contain everything our container is going to have two sections two div elopements the first div element is going to be for our display ID display I'll give this development some initial text as a placeholder we'll have zeros for hours minutes seconds and milliseconds then our next development will have an ID of controls for all the control buttons within this development of controls we'll create three buttons the first button will be start the ID of this button will be start button BTN short for button then I will set the onclick event handler equal to a JavaScript function we will eventually create a start function we still need to Define it let's copy this button paste it twice the second button will be for stop the ID will be stop button the onclick attribute will be for a stop function the text on the button will be stop and then we have a reset button the ID is reset button the onclick attribute will be for a reset function the text on the button will be reset all right and that is all the HTML that we need let's go to our CSS stylesheet I will first select the body of our document we'll use flexbox to display everything because I like flexbox display Flex the flex direction will be a column then I will align items Center I'll set the background color of this application backgroundcolor pick a color again I like using hsl values I'll set the lightness to 90% our container is going to be a lighter color we will select the ID of my H1 that's going to be the heading I will set the font size to be before RM the font family I will pick aiel with a backup of s's serif for the the font color I will set the color property to be pick a color I'll pick black but set the lightness to 25% all right now we are going to select the container that contains everything besides the heading this area we will select the ID of container I will use flex box within the container display Flex the flex direction will be column and aligned item Center let's add a border a border around the container 5 pixel solid and I will round the corners border radius let's do 50 pixels and I'll add a little bit of padding padding 30 pixels and I will set the background color to be white background color white we'll work on the time display next select the ID of display I will set the font size to be 5 RM for the font family I'm going to set it to be monospace and the font weight I will set to be bold I'll change the color I'll set the lightness to 30% I'll give a text Shadow to the display so it looks like it's somewhat 3D like it's popping out so text Shadow 2 pixels and two pixels for the vertical and horizontal offset and a blur of two pixels now for the color I'm going to lower the alpha to 75% or so that's not bad then I'll add a little bit of margin to the bottom margin bottom 25 pixels now we have to style the buttons we will select the ID of controls but I would like the button elements within the controls after after selecting the ID of controls select any buttons within that element we'll increase the font size of the buttons font size 1.5 RM I will set the font weight of the buttons to be bold I'll add a little bit of padding 10 pixels by 20 pixels I'll add some margin around the buttons 5 pixels I'll set a minimum width of the buttons to be 125 pixels let me scroll down I'll remove the border border none set the Border radius of the buttons to be 10 pixels change our cursor to be a pointer when we hover over the buttons let's see if that works yes it does then set the font color of the buttons to be white now let's color the start button we will select the ID of start button set the background color pick a color I'll start with something green pick whichever color you would like I'll pick this shade of green here are the values when we hover over the start button we will access the hover suit class of our start button I'll decrease the lightness by 10% let's copy the markup that we have for the start button paste it twice we'll add color to the stop button and the reset button I'll set the stop button to be red here are the hsl values that I picked when I hover over this button I'll set the lightness to be 10% darker for the reset button I'll set that to be blue when we hover our cursor over the reset button I will set the lightness to be 10% darker not bad for all of the buttons I'm going to add a transition effect transition select the background color we will create an ease transition after 0.5 seconds we will ease so when you hover your cursor over the buttons there's going to be a slow transition when we hover okay and that is all the CSS that we need we will now go to the Javascript file to add some functionality let's declare all the variables we'll need we'll get the ID of the display and store a reference to it const display equals document. getet element by ID the ID that I'm selecting is display this ID we will create a timer let timer equals null timer is going to hold the ID of set interval so we can keep track of it and stop it if we need to then we need to start time let start time equal 0 let elapsed time equal 0 let is running this will be a Boolean which I will set to be false if the stopwatch is currently running we will flip this to be true and flip it to be false to stop it what are the functions that we need we have a start stop and reset function function start function stop function reset we'll add one more function of update to update the display function update we'll begin with the start method we'll enclose everything within our function within an if statement we need to check to see if our stopwatch isn't running if our stopwatch isn't currently running if not running then start the stopwatch we need to set the start time the start time equals we will get the current date date.now minus the elapse time which will be zero initially so just to demonstrate what the start time is I'm going to console.log my start time so the start time is going to be in milliseconds since epic epic basically speaking is when your computer thinks time begin we will set our timer equal to the set interval function we will call the update function every 10 millisec so if I was to display my timer console.log Tim timer this is what it is our timer stores a unique ID to work with this function if we ever need to stop it we'll take the Boolean variable of is running set it to be true because our stopwatch is not running now we need to go to the update function to actually get it working we need to get the current time const current time equals access our date use the now method what is the date right now we will calculate the elapse time equals the current time minus our start time whatever that was when we initially pressed the start button so the current time minus our original start time gives us the elapse time and this is going to be in milliseconds we need to convert the elapse time into a readable format using hours minutes seconds and milliseconds we'll begin with hours let hours equals take our lapse time divided by to convert milliseconds to hours we can follow this formula elapse time divided by 1,000 milliseconds * 60 seconds * 6 minutes we don't want any decimal portions with our hours we will enclose all of this with the floor method of math now we're going to do something similar with minutes let minutes equals take our lapse time we need to convert milliseconds to minutes divided by 1,000 milliseconds in a second times 6 60 seconds in a minute then modulus 60 modulus gives you the remainder of any division we don't want our minutes display to hit 60 or go above 60 once we hit 60 it'll reset back to zero enclose this formula with math. floor to round it math. floor okay then we have to take care of seconds let seconds equals take our lapse time divided 1,000 to convert milliseconds to seconds modulus 60 en close all of this with math. floor to round it now for milliseconds let milliseconds equals take the elapse time which is already in milliseconds modulus 1,00 milliseconds is normally four digits we're going going to divide it by 10 we only want the first two digits divided by 10 enclose all of this with math. floor math. floor then let's change the display we'll access our display access the text content of the display set it equal to a template string if you would like to display the hours it's optional we will add a placeholder for hours colon placeholder minutes colon placeholder seconds if you would like to display the milliseconds we can add a placeholder for that colon placeholder milliseconds let's see what we have so far I'm going to hit the start button and here's what we got so the stopwatch is running but we should add some zeros for padding so I'm going to refresh to stop it we'll convert hours minutes seconds and milliseconds into a string then add some padding of zeros to it if the number is only one digit not two we will convert hours minutes seconds and milliseconds into a string before displaying it so let's take hours equals hours I will typ cast it as a string follow this with the pad start method for the first two digits add a zero let's do this for minutes seconds and milliseconds minutes seconds and milliseconds we should have some zeros for padding to make each display two digits and that does appear to work nice now we just need to get the stopwatch to actually stop right now there's no functionality going to our stop function we need to check to see if our program is running is this variable is running true if is running if that's true then stop the stopwatch we will use the clear interval function we need to pass in that unique ID for the timer this will stop the stopwatch from running then we will calculate the elapse time csed time equals the date right now date. now method minus the original start time then set is running equal to false because the stopwatch is stopped it's not running anymore now we can start the stopwatch and we can stop it we can start it and we can stop it the last thing we need to do is reset the stop watch we can really just copy everything that we have when we initially assign these variables we need to clear the timer clear interval pass in our variable timer that contains the ID of the set interval function the start time will be zero the elapse time will be zero is running will be false change the text content equal to all zeros this is for the hours minutes seconds and milliseconds all right let's see if everything works just fine we can start we can stop we can start we can stop we can reset we can start and we can stop all right everybody so that is how you can create a stopwatch program using JavaScript HTML and CSS