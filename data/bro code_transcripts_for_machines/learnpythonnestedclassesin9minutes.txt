hey what's going on everybody so in today's video I got to talk about nested classes in Python a nested class is a class defined inside of another class this has a few benefits we can logically group classes that are closely related we can encapsulate private details that aren't relevant outside of the outer class and also it helps keep our namespace clean it reduces the possibility of naming conflicts so for example let's say we have two classes both named employee within this class I'm just going to print something this is the first class then let's copy our employee class paste it again this is the second class we have a naming conflict we have two classes with the same name if I were to run this program we will execute both this is the first class this is the second class it is fairly noticeable that we have two classes with the same name name but with python we do a lot of importing and exporting of large files we may not realize there's a name conflict one concept that'll help us avoid naming conflicts is the use of nested classes let's say we have employees for a company and another set of employees for a nonprofit organization I could write something like this we'll create a class of company within this class of company we will have an inner class of employee with our second employee class we will create an outer class of nonprofit this is perfectly fine we can have two classes with the same name as long as they're within different Scopes these two employee classes might have different attributes depending on who they work for if they work for a company they might have one set of attributes if they work for a nonprofit they might have a different set of attributes so by using nested classes this helps keep the namespace clean we can reuse this employee class because they have different Scopes now what we're going to do in this example what we'll do in this example is create some employee objects that belong to a company object as a placeholder for now I'll write pass within the employee class with our class of company let's define a Constructor do pay attention to the indentation we are within the company class but not the employee class this Constructor is for the company the company object we're going to create if we construct a company object we need a company name such as the Crusty Krab I will assign self. compan name equals the company name that we receive we are also going to declare an attribute of employees this attribute will be an empty list we will append employee objects to our list of employees then and we will create a method to add employee we will need a name meaning name of the employee and a position what's their job for now I'll write pass we'll get back to this later and I will Define a method of list employees and again I'll write pass okay let's be sure that our company name works I'm going to create a company object company equals company but I have to pass in a company name I will pick the Crusty Crab then just to be sure that this works I will display our company's company name attribute that would give me the Crusty Crab so we know that that works within our employee class let's define a Constructor Define init we need a name and a position self. name equals name self.pos equals position let's create one more method of Define get details we will return the details of an employee all we're going to do is return an FST string add two placeholders we will return self. name and self.pos all right now within our ad employee method we will construct a new employee object equals now if we're going to access this inner class of employee we're going to prefix self self meaning this company object that we're currently working with we need the class of employee then we'll call The Constructor but we have to pass in a name and a position when we receive a name and a position we will pass that to the employee Constructor once we have our new employee object we're going to take our list of employees self. employees use the append method of lists then add our object of new employee to this empty list let's create a few employee objects we'll take our company use the ad employee method that we have created we need a name and a position I will pick Eugene for Eugene Krabs his position is that he is the manager let's create two more take our company object use the ad employee method that we have defined find I will pass in a name of this employee as SpongeBob his position is that he is a cook then we have Squidward company. add employee method first name Squidward his position is that he is a cashier so this should run with no problems now I would like to list all of the employees at this company we'll need to rely on this get details me method so when we list our employees we will return a list comprehension for every employee in self. employees this is an attribute it's a list of employee objects it is iterable take each employee that we're iterating through call the get details method and return it now if I was to take my company then call the list employees method whoops I forgot to print it we will print each employees name and their position however I think this would look better if we were to use a for Loop for every employee in take our company call the list employees method during each iteration we will print each employee we have Eugene that's Mr Krabs the manager SpongeBob The Cook and Squidward the cashier to demonstrate the reusability of classes let's create a second company object that has its own employees let's rename company as company one then we will create Company 2 Company 2 equals call the company Constructor my second company will be the Chum Bucket we'll take Company 2 then add two employees company 2. add employee we will pick Sheldon Sheldon is the manager company 2. add employee Karen will be the assistant for every employee in Company 2 list the employees during each iteration print the current employee we have Sheldon that's Plankton's first name he's the manager and Karen is his assistant all right everybody so those are nested classes it's a class defined inside of another class you have an inner class and an outer Class A few of the benefits is that we can logically group classes that are closely related such as having employee objects within a company object we can encapsulate private details that aren't relevant outside of the other class we may have no need to create employee objects outside of this class and by using nested classes it helps keep the name space clean it reduces the possibility of naming conflicts with another type of organization we could create another inner employee class and well everybody those are nested classes in Python