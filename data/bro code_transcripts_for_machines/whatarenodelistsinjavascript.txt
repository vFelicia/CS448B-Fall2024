so uh yeah I should probably talk about node lists today a node list in JavaScript is a static collection of HTML elements they can be created by using query selector all we can select Elements by an ID a class or an element type node lists are similar to an array but they don't have a builtin map filter or reduce method they do have a for each method at least though an important thing to note with node lists is that they won't update automatically to reflect changes to the Dom for example if you were to remove an element from the Dom and it's within a node list you would also have to separately remove that element from the node list so what we'll do in this example is create four buttons they'll all have the same class we'll have button one with a class of I don't know what's a good name my buttons the class all right let's copy this button paste it three additional times we'll have button two button three button four and I'm going to add a little bit of CSS to these buttons let's select the class of my buttons I'll increase the font size so you can see it font size for RM add a little bit of margin 10 pixels remove the border border none smooth the corners with border radius 5 pixels add some padding 10 pixels by 15 pixels I'll change the background color to something blue background color blue but I'll select hsl values I'll turn the lightness to like 60 okay that's decent and the font color will be white okay that's good enough for now one way in which we can create a node list is by using query selector all we've talked about this in a previous video but I'll show you a few more advanced things we can do with node lists we can select ele Elements by an ID a class or an element type we will create a node list of let buttons equals document. query selector all let's select all elements by a class we need to use dot then the class name my buttons we could select Elements by an element type if I would like to select all buttons I would just type in button the element type but I would like to select only elements by this class now that we have our node list I am going to console.log my node list of buttons and we'll take a look at it here's my node list it contains four elements button one button two button three button four we do have a length property a few methods entries for each item Keys these are all different methods for each is what we're going to be using a lot here's how we can change the HTML and CSS properties of all elements within a node list we can use the for each method of a node list and iterate through all of the elements so we will take our node list of buttons use the builtin for each method then write an arrow function we are provided with an element Arrow do something but I'm going to rename element as button just so it's more easily understandable during each iteration we're provided with the current button what would we like to do to that button well let's change the background color button do style background color I'll set it to be green that should update the color of all the buttons not just one of them we're iterating through all of the buttons within this no list change all of their background colors to be green let's change the text content too take each button access the text content I will set it equal to be I don't know an emoji or something let's do that the text content and all the buttons is going to change maybe let's aend an emoji not replace the text content that's better that is how you can add and change HTML and CSS properties with a node list use the for each method then write an arrow function to do something in a similar way we're going to add an event listener to each button that will listen for a click so again we're going to take our node list of buttons use the builtin for each method for each button Arrow do this we need to add an event listener to each button we will take the parameter of button add an event listener within our event listener we have an event type and a call back to do something the event type is going to be click instead of a call back we'll write an arrow function we are provided with an event Arrow do this event is provided to us through the web browser when something happens we will access the event objects Target meaning the button that we click on that's going to be our Target access the style access the background color property let's set it to be red or better yet tomato because I like tomatoes each button has an event listener it will listen for click events when we click on a button the background color is going to change we're going to add an event listener for Mouse over and mouse out let's begin with mouse over again take our node list of buttons use the for each method for each button Arrow do this take that button add an event listener with event listeners we have an event type and a call back the event type is going to be Mouse over when we hover our cursor over something what would we like to do we will write an arrow function event Arrow do this let's access the events Target that should equal our button that we click on access the style access the background color so with the current color I'm going to go back to my CSS I will copy this color paste it but make the lightness 10% darker now when we hover over one of the buttons the background color is going to change I'll set the lightness to like 40% to make it much more apparent there that's better now when I leave one of these buttons I need to revert that color back to the original really we can just copy all this code Place Mouse over with mouse out and set the background color back to the original each button now has a mouse over and mouse out event listener here's how you can add an element to a node list I will create a new button const new button equals document. create element what element are we creating a button so with creating and appending HTML elements there's three steps this is step one we need to create that element first step two is to add any necessary attributes or css properties so let's take our new button change the text content of the button equal to be button five I would like to give my new button a class of my buttons we're going to access the class list property new button. classlist when working with an elements class we work with class list not class so the class list equals the class of my buttons then we have step three now we have to append this element to the Dom what is the parent element of this new button going to be well in this case it's going to be the body of my document we're going to be adding a new button right here the parent the enclosing element is the body in this case access our document select the body append Child new button and there's button five since we added our class of my buttons that's why it has all these CSS properties if I were to remove this line of code we we get the default appearance for a button I'll talk more about class lists in the next video there's a lot you can do with them now if I was to console.log my node list of buttons here's what we have we have five buttons within our Dom but within our node list we have four buttons button one two 3 4 button five isn't within this no list node lists are a stat collection they won't update automatically to reflect changes to the Dom even though button 5 is within the Dom we would need to manually add it to our node list if we want to work with it so to do that we can just use Query selector again and select all elements by the class so let's reassign buttons since we're reassigning buttons that's why I declared buttons with let instead of const so we're able to reassign it because if this was a constant we couldn't change the elements within it so buttons equals document. query selector all select all elements by a class class my buttons and then again let's console.log my node list of buttons inspect console and there we go our node list has five elements button one 2 3 four five even if you were to add an element to the Dom that same element isn't going to be automatically added to your node list I would recommend using query selector all again just to update it here's how to remove an element from a node list when you click on it we'll have to give all of these buttons an event listener they will listen for a click event when we click on one of these elements remove it from the Dom and the node list here's how again we will take our node list of buttons use the builtin for each method for each button within our node list do this take each button add an event listener we are provided with an event type and a call back to a function the event type that we're listening for is click the call back is going to be an arrow function we're provided with an event Arrow do this to remove an element from the Dom when you click on it we will access our event object access the target use the builtin remove method to remove it so let's see if this works currently let's remove button 2 1 4 3 so those buttons are gone but let me show you something I'm going to console.log my node list of buttons after each click even if I were to remove these buttons from the Dom they're still within the node list even after all the buttons are gone our node list still has four buttons so we do have to update that manually here's an easy way how to do that we're going to use Query selector all again we'll reassign buttons equals document. query selector all select all elements from the Dom that have a class of my buttons then just to see if this works let's console.log my node list of buttons now when we click on a button it should be removed from the Dom and the node list when I remove all the buttons our node list is then empty all right everybody so that is an introduction to node lists they're a static collection of HTML elements they can be created by using query select all we can select Elements by an ID a class or an element type they're similar to an array but there's no map filter or reduce methods and do remember that nod list won't update automatically to reflect changes to the Dom and well everybody that is an introduction to node lists in JavaScript