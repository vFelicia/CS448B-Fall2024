hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how the key listener interface works in java so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running okay everybody let's get started now within my project folder i have two classes one class called main and it contains an instance of my other class called my frame my frame extends jframe so it behaves exactly like a jframe and within the constructor for my frame for this class i have four lines of code this dot set default close operation jframe makes it on close i'm using a size of 500 by 500 this next part's important i'm using no layout manager this dot set layout is set to null because we're going to be manually moving components within the frame by using some keystrokes and lastly this dot set visible is set to true one of a few ways in which you can use a key listener interface is just to add that after the class definition my frame extends jframe implements the key listener interface and with interfaces you need to add any unimplemented methods and for key listeners there's currently three key typed key pressed and key released and in just a moment i'll explain the difference between the three but we need to add a key listener to this frame so we can type in the name of the frame which is just this add key listener and since we're implementing a key listener interface we can simply just pass in this so this frame will now respond to key events and we have key types key pressed and key released and let me explain the difference between these three i've added just a few short descriptions underneath each of these methods let's begin with key typed key typed is invoked when a key is typed this uses a key chart or key character it gives us a character output depending on the key that is pressed key pressed is invoked when a physical key is pressed down this uses a key code it gives us an integer number depending on the number of the button that is pressed down each button on your keyboard has an associated number and key code gives us the number of the button and key released is fairly simple it's called whenever a button is released so let's actually display what the difference between a key char and key code is so within our key release method this is going to be called whenever we release a button so let's actually display some key characters as well as some key codes so let's begin with some key characters so let's add a print line that says u released key character and we can get the key character of this event by typing e dot get key char and let's try this so i'm going to press q and it says your released key character q w e r t y one two three four five now you can actually use capital letters so i'm going to hold down shift and type in q qwerty so those are key characters now key code is the number of the button you released key code and this is e dot get key code so each of these buttons has a number actually let me turn this line into a comment for now so i'm going to type in q and the number of the button of the q button is 81. w is 87 e is 69 r is 82. t is 84 and y is 89. so lowercase q is 81 but uppercase q is also 81 because i'm holding down the same button and 16 is shift and i just released it so that's why this was triggered so let's actually display these together now so q the button that contains the q symbol produces a character a key character of q and the button number the key code is 81. now if i were to hold down shift and then press the same button this is producing a different key character capital q but the key code is still the same because it's still the same button so that's the difference between a key character and a key code and then i'm still holding down shift if i were to release it it's going to give us the key character in the key code well shift doesn't produce any key characters that's why it's confused but it has a certain key code of 16 and what we're going to be doing in this video is creating a simple label and we'll move the label around the frame by using either key typed or key pressed so let's declare a label and then define it so jlabel and let's call this label and within the constructor let's instantiate this label label equals new j label and let's set the bounds for this label label dot set bounds we're setting the bounds since we're using no layout manager let's say we want this to start in the top left corner of the frame that is where x is zero y is zero let's make the width 100 and the height 100 and let's set a background color label dot set background why not red i guess and in order to display the background color we need to label dot set opaque and set this to true because the background color doesn't like to display if you don't set the opacity set opaque to true all right and then we need to add this label to the frame this dot add we're adding our label and we should have a simple label in the top left corner now this is our label we're going to move this label around the frame depending on the key that we press or the key that we type let's begin by filling in the key typed method we can evaluate the key character that is being produced and this would be best by using a switch you could write this with a bunch of if statements but it's not as efficient so let's use a switch and what we're going to be passing into the switch to examine is e that get key character this will produce a character and then we can use the switch to determine what character is being used so let's set different cases let's have a case for a a to move to the left w to move up s to move down and d to move right so if the key character that is being produced is a if somebody types in the character a we want to move our label to the left and one way in which we can do that is by using the name of our label label dot set location and we pass in some coordinates some new coordinates of where we want to place this label on the y axis we want to keep this the same so we can use label dot get y and we're going to do the same thing for x but we're going to adjust it slightly label dot get x but if we want to move to the left we want to subtract a number from this let's say just one pixel we'll keep this small and let's try this so we have our label if i were to press a this is slowly moving to the left but we need to set this for the other directions as well so i'm going to add a break after this case and i'm just going to indent this slightly just so it's easier to read so let's have a case for ws and d so case w we want x to stay the same but we want to move up so we subtract a number from y and then we need s and d s will move down so this is plus one and then x stays the same and lastly d x will just add one and y we will keep the same and now we should be able to move up down left and right down right up left so this is moving fairly slow we can actually increase the amount of pixels this is moving after each key character so let's change this from one to ten and this is going to be more drastic all right this is moving much faster now but yeah you get the idea now let's do the same thing but use the arrow keys on the keyboard the arrow keys do not produce a key character but you can use key pressed for this so let's actually copy the switch that we have and paste it within here and this time we're going to be using the keycode so let's pass in the keycode underneath keypressed and the case will be actually we need to see what these buttons are first okay so left is 37 up is 38 down is 40 and right is 39 so we're going to pass in or use these numbers for the cases so let's begin with left that is 37 37 we're going to be moving to the left minus 10 pixels case 38 we're going to be moving up by 10 pixels by 10. 39 is down actually that's right uh so we're going to move to the right by 10 and then 40 should be down and this is x is going to be the same and y is plus 10 all right i'm not going to use wasd i'm using the arrow keys on my keyboard so down right up and then left now i have a special treat to show you guys before you go instead of moving our boring red label on the screen let's move an image i have an image of a rocket that i want to use in place of this red square so i'm going to add this icon to the label but first we need to create an icon so if you want feel free to pause the video and download an image that you want to use so i'm going to create an image icon we'll call this icon first let's declare it and then within the constructor we'll instantiate it icon equals new image icon and then i'm going to list either the file path or the file location since this is within my project folder i can just list the file name and that is rocket.png and i am not going to use the background color and i am not going to set this to opaque i'm going to add this icon to the label label dot set icon and then i'm going to pass in my icon that i want to use and now i have a rocket ship on here and i'm going to change the background color because why not so to change the background color of the frame that is this dot get content pane dot set background and we'll just pass in color dot black to represent outer space and now we have the very beginning of a simple game so maybe you can do like invaders or something where you can move your character left and right and dodge bullets or something but yeah i just wanted to show you guys that before you go so that's the basics of the key listener interface if you want a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of the key listener interface in java hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you