what's going on everybody it's you bro here and in this video I'm gonna teach you guys all about using arithmetic operators in C++ let's get into it all right well in this video I'm going to be discussing five of the basic arithmetic operators that you'll see in C++ some rules regarding them and some cool tricks that you can use so just a fair warning that this topic is somewhat dull and boring but I'm gonna try my best to keep it fresh and interesting and if you can make it through this lesson I would say that every lesson after this is going to be more interesting so let's begin let's go over the five basic arithmetic operators the first is addition and anytime you want to add something you just use the plus symbol next we have subtraction and use a minus symbol I know I know we've covered this in grade school you know many years ago but there's a few other arithmetic operators that you should really be aware of first is multiplication and do you remember back in math class where you would use X to multiply something for example like 5 times 5 is 25 and use X to multiply well in programming we use the asterisk symbol so use this anytime you want to multiply something next we have division and you use a forward slash anytime you want to divide something and lastly we have this thing called a modulus and it's a percent sign so the modulus is unique it basically what it does is that if you divide two numbers you have it I believe it's called a dividend and a divisor and to use the modulus between these two and instead of giving you the quotient it gives you the remainder but don't fret right now if you don't quite understand what a modulus is I'll give you an example of how it works and some practical applications of us using one how about we go for an example of each of these sounds good right all right let's get started alright so with addition we can save something such as C out and then this is an example of us using addition we can say 5 plus perhaps 2 then semicolon and this will just display the number 7 we're using C out to display whatever the result is which is 7 so I'm going to comment this out and then just write this as an example and when we're finished with this I'll post this in the comments down below and pin it to the top if you would like a copy for notes or something alright so an example of us using subtraction see out then we need to use the insertion operator then we could say 5 minus 2 and then just display the result and the result is going to be obviously 3 so let's turn that into a comment all right multiplication say C out and then we could say 5 times 2 so remember we don't use X for multiplication we use the asterisk symbol for multiplication and the result is going to be 10 so let's turn that into a comment all right so division this is where it gets tricky so see out how about 5 divided by 2 so the answer should be 2.5 right well that is actually not the case the answer that we get is 2 and this is the reason why it's this thing called integer division so if you divide by a whole integer or something of the integer datatype it's not going to record that decimal portion and it gets truncated so if we have 5 divided by 2 the result is going to be you know 2.5 obviously but it can't handle that decimal portion so it just drops it or eliminates it and we're stuck with the result of 2 which is not correct but you know the computer thinks it's correct so one trick that you can do is that you can change this to a decimal value or a double value so if we were to say 5 divided by 2.0 this will actually save the decimal portion and we are ending up the result of 2.5 so make sure you remember that because when you first start writing programs you might not notice that you're using integer division and you might get an unexpected result so be sure that if you're dividing by a certain value make sure that it's a like double value or something with a decimal and there's this concept called casting where you can convert from one data type to another such as an integer to a double type but for now just make sure that if you're dividing and you want to keep the decimal portion for the results make sure that you're dividing by a number with a decimal all right so let's turn that into a comment and move on to modulus Oh quick note so I decided to just do a little bit of formatting with these comments I also added the results for each of these operations for our examples just so you can have some notes to look at and remember that I'll post this in the comments down below okay so the modulus the modulus works exactly like division except instead of giving you a quotient as an answer it's going to give you the remainder for example if we said C out five modulus two instead of displaying two or two point five if this is a decimal value or double value it's actually going to display the remainder so five does not divide by two evenly with integer division so it's going to give us a remainder of one and this is actually useful if you need to determine if a number is even or odd because if you place the number that you want to examine here then use modulus two if it divides evenly by two this result is actually going to be zero so let's try it out so four divided by two gives us a remainder of zero and when we get to if statements we could say if the result is equal to zero then this number is even however if this numbered modulus two is equal to one then it's going to be an odd number but I'll show you a program like that maybe in the future for a different example but that's one practical application of how using a modulus would be useful because you can determine if a number is even or odd if you put your number here then use modulus to so let's turn that into a comment and then move on to something else so we'll say result equals one because that's the remainder my next topic for this video we will be discussing the use of the increment and the decrement operators so with programming we do a lot of counting in fact we do so much counting that we have our own operator that's specifically designed for counting up or down by a certain number so let's say that we have an integer variable named total and let's just set this equal to perhaps one all right so let's say that we want to add 1 to whatever this total is well we would normally have to write a statement such as total equals total plus 1 and then we can display whatever the new total is so if we were to run this one which is the total plus one equals of course it's gonna be two alright so since we do so much counting with programming we have a shorthand way of writing statements such as this if we need to increment something by one so instead of saying total equals total plus one what you just do is say total plus plus and this will do the exact same thing we will add 1 to whatever the total currently is or whatever variable you're working with so this works just the same now the opposite of this is the decrement operator so we can say total minus minus and this is the same as saying total equals total minus 1 so we could say total minus minus and this will decrement something by 1 each time we use this so the result here would end up being 0 now you can increment or decrement by a given value so with total plus plus this increments by 1 if you want to increment by let's say 2 you can do something else you could say total plus equals 2 and this will count up by 2 so the result here would be three and if you were to say total equals this will subtract or count down by two and the result here would be negative one so let's add that to our notes the increment operator we can take a value or variable and just say plus plus right after the end and then let's do the same thing for the decrement operator so we'll say X minus so use the increment operator if you want to add one to something to some number or variable and then use the decrement operator if you want to subtract one from a value or variable all right well next on my agenda I have to teach you guys about typecasting because I said I would mention that now what I'm going to do is copy this statement here where I say C out 5 divided by 2.0 but let's change that to two all right so normally this results in the answer being two because with integer division we can't handle that decimal portion so that gets cut off or truncated so we have a few options to work with if we want our answer to retain that decimal portion in the answer when we're using any sort of integer division the first is that we would need either our dividend or our divisor to have a decimal portion they can be of the float data type or the double data type so if we said five divided by 2.0 we would end up keeping that decimal portion with our answer here otherwise the dividend can also be a float or a double data type and this worked just the same you can do it either way another option is this concept called casting so you can convert a number that's of one data type to another and what you do before that number is that within parenthesis you just write the data type that you want to convert this number or variable into so with this whole integer of five we can convert this to let's say a double and if we were to run this the result is going to be 2.5 and we end up keeping that decimal portion now check this out what if we put our dividend and our divisor within its own set of parentheses around this part of the equation and then we cast this afterwards well what's going to happen is that it's actually going to take five divided by two first and then it's going to truncate the decimal and then cast it to a double and we still lose that decimal part of this answer likewise you can take a result that's normally a double and you can cast it into an integer datatype intentionally so you can purposefully cut off the decimal portion so an example of this is that we'll say C out perhaps five point zero five one divided by two point zero two one I'm just making up numbers here let's comment this out so normally this dividend divided by this divisor equals two point four nine nine two six all right let's say that we want to cut off the decimal portion or truncate it well what we'll do is that we'll put this within parenthesis and we're going to take the result and cast this of the integer datatype so our result is that it's going to be just two then before we move on I'm just going to add a note that says cast to a double cast to an int alright so we finally made it to the final topic of this video and we need to cover operator precedence so if you guys remember in grade school where if we have a multipart equation such as this with multiple different of the arithmetic operators each of these operators has a certain precedence one over another and what we learned in grade school was this acronym it was PEMDAS and one way of remembering this which was kind of silly is that we would say please excuse my dear and Sally or something very similar to that that used the same letters for this acronym and what this meant is that we would solve anything within parenthesis first followed by exponents multiplication division addition and then lastly subtraction so if we were to solve this using this order of operations PEMDAS we would solve let's see two times three first because any multiplication takes precedence over addition so 2 times 3 is 6 plus 1 the result is going to be 7 then so we have a different set of rules for programming and it's actually a little bit more simple I would say then PEMDAS so with programming we solve anything within parenthesis first for step 1 step 2 we do any multiplication or any division it doesn't matter which one comes first we always start from the left and work to the right and then step 3 we do any addition or subtraction at the very end all right so here's an example so if you want why don't you pause the video and see if you can guess what the total is going to be and I'll just walk you through these steps using our order of operations for programming so step one we have to solve anything within parentheses first and we start from the left and work our way to the right see the only place that I see parenthesis is at the very end so we're going to solve everything within here first so we're going to say 6 plus 7 first which is 13 all right so we can get rid of these parenthesis then so they're no longer relevant step 2 we need to do any multiplication and division first so we start from the left and work our way to the right I see 3 times 4 so we need to solve that first alright so then we have 12 divided by 5 point 0 and I change this from 5 to 5 point 0 because of integer division so this is going to be 12 divided by 5 is 2 point 4 so let's change that alright so there is no more multiplication or division so we do any addition or subtraction so 1 plus 2 is 3 3 two point four is zero point six so zero point six plus 13 is 13 point six alright so let's go back to see if that actually was the answer all right so let's run this we probably need to display what the total is going to be and the answer is thirteen point six well good job make it to the end I knew this was a somewhat more dull topic but it was necessary for us to nail down some of these basics and if you want a copy of what we did here today I'm going to post it as a comment down below and pin it to the top but yeah that is everything you need to know to get started working with just basic arithmetic and C++ heyyou if you enjoyed this lesson then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro