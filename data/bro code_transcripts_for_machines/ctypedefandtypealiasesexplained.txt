hey everyone in this topic i'm going to explain typedefs and type aliases now typedef is a reserved keyword used to create an additional name for another data type kind of like a nickname it's a new identifier for an existing type one of the reasons that people use typedef is that it helps with readability and reduces typos here's an example in this example i'll need to include this header file include vector suppose we have this very long data type and i would like to give it a nickname an alias i would type the keyword type def then list the original data type so we're used to strings ins doubles well here's a really complicated one and of course i don't expect anybody to know this at this level yet standard vector standard pair standard string int so this is one really long data type this could be a data type for a pair list but i don't want to have to type all of this so what i could do is give this data type an alias using this typedef keyword after the original data type i'll come up with a new name a new identifier let's say pair list that's a lot easier to write than all of this for the data type a common convention when using the typedef keyword the new identifier usually ends with underscore t for type now suppose i declare a variable of this data type standard vector standard pair standard string int let's say the name is pair list in place of using the original data type we can use the new identifier pair list underscore t so that's one of the main benefits of using the typedef keyword we can give a new identifier to an existing data type it helps with code readability and helps reduce typos this data type is way beyond our level of understanding right now let's try some simple examples i'll turn this line into a comment then get rid of that let's create a typedef for standard strings type def then we list the original data type standard string in place of using standard string as the data type i'll create a new identifier for this data type as maybe just text text underscore t if i need to create a string i could use this new identifier in place of saying standard string then maybe first name i can replace the data type with the new identifier if i choose to text t and i'll set my first name equal to whatever my first name is feel free to set it to your own first name and this variable behaves exactly like a string so let's display it standard output first name and then we should have our first name yeah there we are okay now let's try this with an integer type def we list the old data type int let's create an identifier for int as number that's more descriptive underscore t although it's more to write technically in place of using the int data type i could use number t and this is technically an integer let's say age then make up some age standard output i will display my age then i will add a new line yep we have our first name and our age now typedef has largely been replaced with the using keyword that's because the using keyword works better with templates which is a topic for another video so in place of using typedef i recommend using the using keyword so i'm going to turn these lines into comments now if we were to use the using keyword we would type using then the new data type so let's say text t equals the old data type standard string then let's do that with number using the new identifier number t equals int and that would work the same we have our first name and our age the using keyword is more popular than typedef nowadays just because it's more suitable for templates and like i said that's a topic for another video alright everybody that is the typedef keyword and type aliases typedef along with the using keyword they're used to create an additional name an alias or nickname for another data type it's a new identifier for an existing data type it helps with readability and it reduces typos however you should really only be using the typedef and using keywords when there is a clear benefit so yeah that is typedefs and type aliases your assignment is to post a typedef in the comments section down below and well yeah those are typedefs and type aliases in c plus