hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to explain adjacency lists in computer science so sit back relax and enjoy the show all right what's going on everybody adjacency list an adjacency list is an array or an array list made up of linked lists each element is a separate linked list and each linked list can contain nodes and each linked list has a unique node at the head and basically speaking to represent a graph all adjacent neighbors to a node are added to that node's linked list if we add an edge we just add the address of that node to the tail so let's begin let's create two classes graph and node file new class this will be graph finish then file new class node let's say we have some data maybe just a single character char data and we'll create a constructor and then pass in some data char data this dot data equals data within our graph class we need to create an array list of linked lists array list and the data type of what's going to be stored are linked lists now we need a data type for our linked lists what are the linked lists going to store well they're going to store nodes let's name this array list just a list for adjacency list and let's create a graph constructor and we will instantiate our adjacency list a list equals new array list okay let's declare some methods we'll need an add node method so public void add node and there is one parameter a node of the node data type we'll need to add an edge public void add edge we'll need two indices a source and a destination into source int destination we'll be able to check an edge public void check edge again we'll need a source and destination indices and let's print our graph public void print all right now let's head to our main class and instantiate our graph graph graph equals new graph we're going to reuse a lot of the same code from the previous topic on adjacency matrices so let's add some nodes graph dot add node and i will pass in an anonymous node new node and we need some data so let's pass in the letter a let's copy this and create four additional nodes so b c d and e and we need to create some edges again i'm using the edges from the previous topic so graph dot add edge each of these nodes has an index number the first will be zero the second will be one then two three four if i need an edge between nodes a and b the index and node a is zero that's the source and the destination is b that has an index of one so zero one and let's fill in a few others how about one and two one and four two three two four four zero and four two okay so then at the end let's print our graph but we have not yet filled in the methods so graph dot print okay so let's head to our graph class and fill in some of these methods let's begin with add node so in order to add a node we first need to create a new linked list so linked list the data type of this linked list is nodes and let's name this current list equals new linked list after we create this new linked list we can add a node to the linked list current list dot add node whenever we create a new node we will also create a new linked list and the new node will be at the head of the linked list and lastly we just need to add this linked list to our array list alist dot add current list okay then let's fill in the add edge method i will declare a linked list and i'll just copy this linked list current list equals to add an edge to our adjacency list we first need to get a linked list from the arraylist so let's store that within currentlist currentlist equals to access our adjacency list we will type a list dot get and then an index and that will be source this will return a linked list it's kind of like it's in two layers we'll also need to know our destination node so let's say node destination node equals then we'll need to find the array list that this node is located at the head adjacency list dot our destination index then follow this with get zero that is the head of our linked list so this is the address of the node we would like to link to and now we just need to add this node to the tail of our current list current list dot add destination node and that's it we're taking a node and adding it to the tail of a linked list you can shorten this code if you would like to do so on less steps you would just take this portion and replace currentlist with alist.getsource then you technically don't need this line but it's a little more difficult to read so you do you okay this time let's check an edge so we can copy these two lines of code paste it what we're going to do is iterate over our current linked list and see if there's a match between a node and our destination node so let's use a for each loop and we will iterate over all of the nodes within our current linked list so the data type is node node in our current list with an if statement let's check to see if the current node that we're looking at is equal to our destination node are these addresses the same if so then return true if we escape the for loop that means we did not find the node we were looking for so let's return false and the return type of this method is going to be boolean okay we have one more method we just need to print our adjacency list we'll use nested for each loops so we need to iterate over all of the linked lists within our array list so for linked list the data type is node and let's name this current list iterate over every linked list in our array list and then we'll need another for each loop for every node node in current list then let's use a print statement print the node's data then maybe i'll add an arrow for flavor to represent a linked list then outside of our inner for loop let's print a new line and that should be everything that we need so let's run this all right so there is our adjacency list basically an adjacency list is an array or an array list made up of linked lists each linked list has unique node at the head and all adjacent neighbors to that node are added to the node's linked list at the tail the runtime complexity to check an edge is big o of the v for the number of vertices it's because we need to traverse a linked list linearly to find a matching node and the space complexity for an adjacency list is big o of v plus e v as in the number of vertices e as in the number of edges so yeah that's an adjacency list it's an array or an array list made up of linked lists it's used to represent a graph if you would like a copy of this code i'll post this to the comment section down below and well yeah those are adjacency lists and computer science