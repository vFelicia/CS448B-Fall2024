hey what's going on everybody it's you bro here and in this video we're going to be discussing output and a few other miscellaneous features with C++ let's get into it first things first I want to discuss with you guys the use of namespaces in programming we can't have variables functions and other things with the same name so to avoid that from happening we can use a namespace different namespaces allow us to reuse the same names for things as long as they are within a different namespace we can reuse that same name in a different namespace in our standard output we are saying that we are using the standard namespace for our output and it can be annoying to have to type STD before every line but there's a trick that we can use where we don't have to write this every time so outside of your main method this is what we're going to type type using namespace STD so this is telling the C++ compiler that just assume everything here is using this namespace so we no longer have to type this out explicitly and this will work just the same then next let's discuss the return 0 statement that you might see at the end of a main method so programs may calculate or process something and return the result what you may see at the bottom of many functions in C++ is this return keyword and they usually return some sort of value at the bottom of your main function we're going to want to return 0 and this isn't necessary but I'll explain what this does in just a moment so in C++ this is sometimes referred to as the exit status what this does is that our program if it runs fine without any errors it will return 0 and this is like a success status like saying the program ran fine with zero errors however this is only required in C programs it's optional in c++ the compiler automatically adds you return 0 if we don't explicitly write this but in case you do see this this is what this means let's move on to line breaks when we write output statements our output will only add a line break if we explicitly let the compiler know that we intend it to so for example let's remove these newline characters and see what happens when we run the program so our output is all one long runon sentence it's all on the same line even though our code is in two different separate statements so you have to let the compiler know that you intend to break this line and go down to the next line as if you're hitting Enter and there's actually two ways to do this the first is that we covered it in the first lesson you just use the newline character and I'll get into this more in depth later on in this video the other way is that we can add these two left angle brackets and these are sometimes referred to as the insertion operator they basically pass along data and then add and L then semicolon and this is short for end line but make sure you take out that other semicolon and this will work just the same then so let's add that here as well so this is another way of writing what we had before each has their own uses yeah and you can see that each line has a line break and shifts down to the next line after it's finished the second option to use a line break is to use backslash n which is what we did previously but I'll explain this more in detail so the backslash portion is part of something called an escape sequence depending on what character that we add after the backslash it will have a certain effect on our output if we add backslash n it will add a new line and for example if I add backslash and before each of these words it's actually going to print each of these words on a new line so let's try it out and you can see that changed our output so you can use this escape sequence for a new line anywhere you want within here and there's other escape sequences as well besides new line like backslash t is for tab so let's try that out so this will add a tab before each word and you can tap things in space things if you need to write a set of quotes like you're quoting something you might have trouble because your program won't know where our string of characters begins and where our string of characters ends then so you can use an escape sequence to add some quotes which is backslash and then single quote or double so if you want to like quote something like we're quoting lyrics to a song here you could just add backslash and then a set of double quotes and let's try this out and you can see that our first line is not within quotes as if we're quoting something and for some reason if you need to print out a backslash you actually have to type double backslashes and let's try that out and here's our backslash because remember if you have just a single backslash the compiler thinks it's a beginning of an escape sequence so if you need to print it out you need double backslashes so those are a few of the basic escape sequences they should be aware of there's still many more out there and if you have time I would suggest looking through online to see what else is out there if there's anything that would be relevant for you but those are just a few of the basics before we really start to dive into programming with c++ lastly for this video we are going to discuss comments comments are a portion of code that is ignored by the compiler it's like a secret message and it won't be displayed or processed there used to leave notes for yourself or for other people reviewing your code to read it's like a secret message here's an example of us using a single line comment so what you're going to need to do is to type in two forward slashes and you can see on my screen that this text became a green color and we can write a comment here so perhaps for a comment I'll write lyrics for a song that I enjoy so if we were to run this program it's not actually going to display this comment and you can see that it skipped it it's basically like a secret message for yourself or for somebody else that's looking over this code so you can also write a multiline comment all text that you want to be included within a multiline comment should begin with a forward slash followed by a asterisk and you'll notice that all this text now became green because we're saying that we want all of this to become a comment everything after these two characters so you'll want to put ending position for where you want this comment to end if it's on multiple lines so let's say that we want our comment to end here what we need to type is then asterisk and then a forward slash so everything within here will be a comment and we can add multiple lines to here like I can say something such as these lyrics are actually very good alright so then let's run this and all of this will be ignored it's like a secret message that either I myself can read or other people can read well that will conclude this topic on writing output escape sequences comments and a few other things I forgot to discuss in the first lesson so in the next lesson I'll be teaching you guys about variables but yeah that will conclude this topic on some of the fundamentals of C++ hey you if you enjoyed this lesson then you can help me help you in 3 easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro