hey everybody so today I got to talk about a sync and a weight in JavaScript a sync and a weight are two keywords by using these two keywords together they allow you to write asynchronous code in a synchronous manner a sync makes a function return a promise a wait makes an async function wait for a promise we'll discuss async first in this sample program from the last topic we have some chores to do we have to walk the dog clean the kitchen and take out the trash each of these functions returns a promise a promise that can either resolve or reject based on the code that's written if the dog is walked if that's true resolve if it's false reject a function can be declared with a sync a function declared with a sync will return a promise however that promise that's returned doesn't resolve or reject in a way you could say it's an empty promise if I were to run this code this is what happens uncaught reference error resolve is not to find if an asynchronous function returns a promise that either needs to resolve or reject adding a sync to it really doesn't benefit us a sync works together with a weight by using these two keywords together when calling all of these asynchronous functions in order we don't need to Method chain then statements there's a more synchronous manner in which we can write the same code but we'll need to contain it all within an async function async function we'll create a function to do chores then we will need to call this function somewhere let's do so right here first we need to walk the dog walk the dog returns a promise that's where the await keyword comes in await makes an async function wait for a promise before continuing we're going to create a constant of walk dog result equals use the await keyword await walk Dot then we will console.log the walk dog result you walk the dog now let's do this with clean kitchen we're going to be writing this code in a synchronous manner line by line linearly we will create a constant for clean kitchen result equals await the next promise await clean kitchen then console.log clean kitchen result let me close this you walk the dog you clean the kitchen and last we have takeout trash const takeout trash result equals a wait take out the trash then console.log the result you walk the dog you clean the kitchen you take out the trash let's add one more line when we finish everything one more line of code you finished all the chores you walk the dog you clean the kitchen you take out the trash you finished all the chores let me show you what happens if we attempt to use a weight within a function not declared with async uncaught syntax error a weight is only valid in async functions that's why a weight depends on async a weight makes an async function wait for a promise before continuing now if your promises can reject let's say that dog walked is false uncaught in promise you didn't walk the dog we'll surround all of this code within a tri block then catch any errors catch one parameter of error we can console.log or console. error the error you didn't walk the dog all right everybody so that is a sync and a wait a sync makes a function return a promise a wait makes an async function wait for a promise by using these two keywords together we can write asynchronous code in a synchronous manner and well everybody that is a sync and a wait in JavaScript