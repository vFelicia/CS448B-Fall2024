hey everyone it's you bro hope you're doing well and in this video i'm going to explain the binary search algorithm in computer science so sit back relax and enjoy the show all right binary search it's a search algorithm that finds the position of a target value within a sorted array or other collection in order for a binary search to work whatever we're searching through it needs to be sorted and basically what we do is we take half of the array and eliminate it during each step and we will whittle down our collection until there is only one element remaining in this example i have an array of 11 elements each element contains a letter and they're all sorted alphabetically let's say we are looking for the letter h and i need the index what we would do with a binary search is that we always begin in the middle we first check to see if our target value is equal to this middle value if these are equal then we can return this index but odds are they're probably not going to be equal on the very first turn the very first step so these are not equal then we will check to see if our target value is greater than or less than this middle value since h is greater than f we can disregard this entire first half of our array because since this is sorted our target value could not possibly be within this first portion and then we begin step two or phase two it's the same process as before so again we begin in the middle check to see if our target value is equal to the middle value there or not check to see if our target value is greater than or less than the middle value this time h is less than i we would delete the second half of this portion we're not actually deleting these values we're disregarding them and then we can move on to step three we're repeating the same process as before and this time these elements divide evenly so we would just round down and begin and say that this is the middle so h is greater than g we would disregard this element and we only have h remaining so we would return this index because these values are equal and that's a binary search now a binary search isn't too efficient when working with small data sets however if you're working with a large data set like 1 million elements well then a binary search is actually fantastic because we're eliminating half of the elements we are searching through during each phase or turn so if we had a million elements after the first phase we can already disregard like half a million elements and then we just repeat the process until there's only one left so if this was an iterative approach we would need to search through these linearly beginning with you know index zero and going all the way to a million so a binary search is fantastic with large data sets the runtime complexity of a binary search is o of log n the larger the data set a binary search becomes more and more efficient compared to other search algorithms alright let's perform a binary search in real life now we'll use the builtin binary search method of arrays to begin with and then later on we'll build our own binary search function so we'll need an array to work with let's say we have an array of integers named array int array and the size of this array will be 100 we'll increase the size later for demonstration purposes and we'll need a target value that we're searching for i'll just name this target and target equals what about 42 we'll search for the number 42 and we'll need to populate our array so we can do so using a for loop int i equals zero we will continue this for loop as long as i is less than array dot length and increment i by one during each iteration then we will fill array at index i with whatever i is our index okay so the cheap way of using a binary search is to use the builtin binary search method of arrays let's say int index equals arrays dot binary search and taking a look at this binary search method there's two arguments that we have to pass in an array and whatever we're searching for so we will pass in our array and our target then return the index and let's display that so let's check to see if our index is equal to negative one if our target is not found then that means negative one will be returned from our binary search method so let's print something system.out.printline uh what about element not found actually better yet target not found let me change that target plus not found okay then else else we will display system.out.printline element found at colon space plus index all right let's try it okay element found at 42 cool now let's create our own binary search function for practice i'll turn this line into a comment copy it paste it and get rid of this erase portion okay then i'm just going to use a shortcut to generate this function okay so private static int binary search there are two parameters an array of integers named array and int target so we'll return negative one that acts as a sentinel value negative 1 means that the value was not found now what we'll need at this point is the beginning and ending index of our array so let's say int low will be the beginning and int high is the end array dot length minus one so we have a low index and high index and we'll create a while loop while low is less than or equal to high we'll continue this while loop and keep on searching through our array so first we need the middle index int middle and here's the formula for that low plus high minus low divided by two so we have our middle index we will take int value equals our array at index of middle so this will extract that value found within this element okay so this portion is optional i'm just going to display whatever this value is so we can count the amount of steps it's going to take to find a value so let's say middle colon space whatever this value is this line of code is optional i'm just doing this for educational purposes okay now we need to check to see if our value is less than or greater than our target or equal to if value is less than our target low equals middle plus one and actually i'm going to get rid of these curly braces if you have an if statement and you only have like one line of code you don't really need the curly braces i'm just doing this so it's easier to read okay else if value is greater than target we will set our height index high equals middle minus one else that means we have found our target else return middle so this means that target is found and by returning negative one that means target not found and that is our binary search function let's try it okay element found at 42 so it took us let's see one two three four four steps to find the number 42 within this array of 100 elements now let's increase the size because binary searches do extremely well with large data sets so let's say we have 1 million elements and let's change this target what about 700 7 thousands whatever that number is okay so let's search for it and let's count the steps uh so there's quite a number of steps here but let's count them 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 steps now imagine if we took a linear approach where we began at index zero and looped through this entire array looking for this index and in that case looping through an array would have a runtime complexity of o event to find this number it's going to take over 700 000 steps because we're iterating once for each element within this array compared to a binary search where it only took 20 steps well then in conclusion a binary search is a search algorithm that finds the position of a target value within a sorted array half of the array is eliminated during each step or phase so that's a binary search algorithm if you would like a copy of all this code of course i will post this to the comment section down below and that is the binary search algorithm in computer science hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you