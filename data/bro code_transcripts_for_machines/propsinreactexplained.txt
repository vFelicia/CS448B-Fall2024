hello everybody so today I got to explain props props short for properties they are readon properties that are shared between components a parent component can send data to a child component when you include a component within a parent you can send that child component key value pairs in the last video we made cards but all of our cards were identical using props we can send a child component individual values so that they're all unique let's go over an example we're within our app component I will create a new component let's go to our source folder go to new file we will create a component for students to display student data student. jsx we need to create a function function student parentheses curly braces then don't forget to export default the name of the component student in order for this component to accept props this function needs a props parameter props is going to be a JavaScript object so let's add our return statement we'll include a few HTML elements we'll start with a div within our div I will include a paragraph element within our paragraph We'll add the text Name colon space we'll include a set of curly braces to inject some JavaScript let's take our props this is an object access the name property however we still need to pass in a value for the key name so heading back to our app component we need to import the student component let's do so at the top import student from the location where the student file is found SL student. jsx let's include a student component within our app component student now if I would like to send some data to my student component student is going to be the child in this case app is the parent we'll need to list key value pairs the key will be name equals some value for the value associated with the name key let's say SpongeBob when I save and update everything we have the name SpongeBob when we send key value pairs to a component they're all stored within the props object to get the value associated with the key you type props dot the name of the key that will give you the associated value on my web page I'm going to zoom in a little bit just so you can see it that's good for now heading back to our app component let's send another key value pair let's send an age if you're going to store some data as a value if it's not a string literal you got to enclose it within curly braces let's say Spongebob his age is 30 we now have access to this age keyy heading back to our student component let's create a new paragraph age colon space to include some JavaScript we got to use a set of krly braces we are accessing the props object do access the key of age SpongeBob's age is 30 okay let's send is student is SpongeBob a student we'll create a key of is student equals add a set of krly braces is student will be a Boolean true or false SpongeBob is in boting school currently he is a student let's save heading back to our student component I'll include a new paragraph student colon space curly braces props do is student SpongeBob is a student that is true however our Boolean is not displaying so with a Boolean I recommend using the tary operator if is student within props is true then we'll return a string literal of yes otherwise we'll return a string literal of no let's update everything yes SpongeBob is a student you can place complex JavaScript code within your HTML code booleans don't display directly to the Dom you typically find them used within tary operators or some sort of conditional if some value is true return or do this if not do something else now if I were to pass in a Boolean value of false well that will change to no SpongeBob is not a student let's change that back to true now before I include a few more components I'm going to do a little bit of CSS styling just so that all of this is going to be more readable I'm going to zoom out to 100% where it was originally within my student component within the enclosing div element I will set a class name remember that with jsx you have to use class name not class because class is a reserved keyword let's name this class student then heading to our CSS stylesheet index.css feel free to clear out anything within here I will select the class of student I'll change the f family to be Ariel I'll add a backup of s's serif in case Ariel can't display for some reason let's change the font size to 2 em for 200% I'll add a little bit of padding 10 pixels I'll add a border border one pixel solid pick a color I like hsl values I'll set the transparency down a little bit to like 80% let's go with like 50% lightness I'll remove any margin around the paragraph elements we are accessing the class student then access any paragraph elements margin zero okay that's not too bad so this is a student component to display some student data we'll reuse the student component but pass in different data each time we'll create a new student component the student's name will be Patrick Patrick's age Patrick will be 42 is Patrick a student is student I will set that to be false let's update our web application and there is Patrick's data name Patrick age 42 student no let's add a few more student name equals Squidward Squidward's age will be 50 is student Squidward will not be a student that will be false then let's add Sandy she'll be the last student student name equals Sandy sy's age will be 27 is Sandy a student she will be that will be true there we are all right we have created four student components each has different values depending on what we pass into props we're going to move on to prop types prop types prop types are a mechanism that ensures that the past value is of the correct data type for for example within props we have an age we would like to ensure that the age value passed in is a number not a string or a Boolean if it isn't then react can emit a warning within our console mostly for debugging purposes if you're working with props it is good practice to also use prop types so here's how to create prop types after our student function we'll type the name of the component student. propop types equals curly braces now we do have to import prop types it's found within the node modules folder where is it this should be an alphabetical order there it is prop types at the top of our jsx file we will import prop types from prop types proptypes within our prop types I would like to ensure that any name passed in is going to be a string if it's not we'll issue a warning within our console Name colon space prop types do string let's do this with age age will be a number age colon space prop types. number then is student is student will be a Boolean is student colon space prop types dob for Boolean all right and those are our prop types heading back to our app component for SpongeBob's age if I don't pass in a number let's say I pass in a string a string of 30 well this won't prevent the program from running but it will issue a warning within our console if we rightclick go to inspect go to console we can see a warning failed prop type invalid prop age of type string supplied to student expected number and here's a location so this is good for debugging it won't stop the application from running just issue a warning it is good practice to include prop types if you're accepting props then lastly we're going to discuss default props default props are default values for props in case they are not passed from the parent component let's say we create a new student component but we don't pass it a name we can add a default value such as guest just in case that value isn't passed in one way or another okay let's add default props down here student dot default props equals set of curly braces for the name the default value value will be guest age will be zero is student will be false to test this let's go to our app component we'll create a new student component but don't pass in any props we'll create an empty student component with no props that appears to work the name is guest the age is zero student is set to no so if I were to include a name let's say name equals Larry while Larry's name is going to be set we didn't include any key value pairs for age or is student we ended up using the default values zero and no all right everybody so those are props they are readon properties that are shared between components a parent component can send data to a child component when you include a component you can send that component key value pairs which allows you to reuse that component but have unique data and those are props with react