hey everybody so today I got to talk about duck typing in Python duck typing is another way to achieve polymorphism besides using inheritance objects can be treated as if they're a different type as long as they meet the minimum necessary attributes and methods required of them it follows this adage if it looks like a duck and quacks like a duck it must be a duck as long as an object resembles another it could also be treated of that type so in this example let's create a CL CL of animal we will have a class attribute of aive if you're an animal you will have an attribute of alive you're a living creature let's create a class of dog the dog class will inherit from the animal class they will inherit the alive attribute let's also Define a speak method if you're a dog you gain the ability to speak we will print woof then we'll create a cat class class cat inherits from animal for the speak method we will print meow let's create a list of animals what do these two classes have in common they both could be considered animals let's create a list of animals we will construct a dog object and a cat object if I was to write a for Loop for every animal in my list of animals have each animal use its speak method which will result in the dog going woof the cat going meow they're both speaking what if we add a class that has nothing to do with animals like class car cars will have a horn method that's how they speak when you honk the horn you you will print honk within my list of animals let's create a car object it really doesn't belong in here but let's see what happens we have an attribute error car object has no attribute speak our car object doesn't have the minimum necessary attributes and methods when iterating through this list of animals we're calling each animal speak method which our car object doesn't have but it does have a horn method so what if we rename our horn method as speak maybe it's an AI car or something well this would work the dog goes woof the cat goes meow the car goes honk so our car object it quacks like a duck we could consider it a duck it has the minimum necessary methods to be considered an animal animals inherit this alive attribute let's utilize that after the animal speaks let's print their Al live attribute print my animals alive attribute my car object doesn't have that attribute we get an attribute error car object has no attribute alive but if I was to add that attribute alive false we have true for the dog it's living true for the cat it's living but false for the car it's not living it's not a living creature my car meets the minimum necessary requirements to be considered an animal if I were to set this to be alive well then it would be a living car kind of like the movie Cars so with python duck typing is another another way to achieve polymorphism besides using inheritance as long as an object has the minimum necessary attributes and methods you could treat it as a different type of object if it looks like a duck and quacks like a duck it must be a duck and well everybody that is duck typing in Python