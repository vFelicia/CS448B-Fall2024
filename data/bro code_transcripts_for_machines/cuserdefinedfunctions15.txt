it's your bro hope you're doing well and in this video I'm going to show you guys how you can create your own custom functions in C++ so let's get into it well us programmers we like to reuse code when available and not have to repeat it unless it's necessary so you may encounter a situation where you find yourself repeating some code more times than what you would like so what if I told you there was a way where you can write some code only once and then you can call or reuse that code whenever you want well that's the benefit of a function and we're actually familiar with a few functions already in the last lesson we learned about the printf function another that comes to mind is the length function another is the app function and you may notice that these tend to end with a set of parentheses so with functions they perform some sort of task for us so what I'm going to teach you guys is how to create your own custom function to perform some tasks for you whenever you call it so I have an idea let's create a function that will display a greeting for us so this is the first step you'll want to do in order to create a function we're going to create this function before your main method and we're going to type in the word void and then we need to come up with a name for this function and your name should reflect the task that it performs if we're creating a welcome message we can simply name this function may be welcome and there's a common naming convention with functions you'll want to be sure that the first letter is lowercase then we'll need a set of parentheses and then a semicolon so this is step one we have declared a function what step two is that we want to define what it does so we can do that just by adding a set of curly brackets after the parentheses but before the semicolon that's good enough so we're going to write whatever we want this function to do when it's called within the curly braces so we can perform some sort of maybe message to display so we can see out welcome to my program okay we have successfully created a function named welcome when we call it it's going to do this whatever is between the set of curly braces here now going back to our main method we can call this function whenever we want to perform this task and in this instance we're just displaying one line of code or one message so in order to call a function we're going to type in the name of the function followed by a set of parentheses and then a semicolon at the end so we will perform this task every time we call this function so let's try it yeah welcome to my program just like we anticipated now we can keep on reusing this code too perhaps I want to display a second message well I'm just going to call the welcome function one more time so this will actually display this message twice then welcome to my program welcome to my program but I should probably add an end line after this just to make it look better okay so that's the basics of creating a function let's create another that displays a goodbye message so it's gonna be the same process as before so void maybe we'll call this goodbye set of parentheses then a set of curly braces and then a semicolon all right and then we will display a message that says goodbye yen deal all right so we have two functions now one named welcome and another named goodbye we can call either of these functions whenever we want in our program so for our example we'll call the welcome function and then we can call the goodbye function so goodbye parentheses semicolon let's try this yep welcome to my program goodbye well I believe we have the basics down for declaring and defining a very simple function but let's take it a step further let's take its level two now when you call a function you can also send to that function some information this can be a value a variable or even an object for example let's say that we want to send a name to our welcome function and that welcome function can do something with that name for example we can display a name that we send it along with our greeting so if you want to send a function some information when you call that function you're going to place whatever values you want to send that function within the parentheses let's send our welcome function maybe a first name so I'm just going to type in my first name as a string literal within the parentheses when we call this function so whenever you send a function some information these are called arguments it's the information that you're sending a function think of it like mail the mail or the letter that you're going to be sending is also referred to as an argument all right so this is step one step two with sending an argument to a function is that the function needs to be set up to actually receive this argument and this is done by setting the parameters of the function so within the parentheses of your function definition what we're going to do is that we are going to list the parameters of what we want this function to receive if we want to receive a string that's going to function as a name we're going to write the data type of this argument followed by a unique name for this value so we can just name this name alright so you can see that the red squiggle went away so we can now send a string that will function as a name to our Welcome function kind of like we're sending mail to this function and this function is going to take this name and it can do something with it so we could actually display our name along with the welcome message so I'm just going to add that here and this should work just fine then so let's try it welcome to my program bro now whenever you call a function and it has a set of parameters you need to send a matching set of arguments when you call this function for example if I were to take out this first name the string that I had here and attempted to call this function well there's not a matching set of parameters and arguments when we call this function so this would result in an error then so we can't actually do this unless we were to send some sort of string to this function so let's take this step further let's accept some user input and this time we're going to send two arguments maybe a string and then maybe an age so this will be an integer variable so we need to list the datatype here and then we will call this edge so we can no longer just send a string we also need to send a integer as well so maybe I'll just type in 18 so make sure that each argument is separated with a comma so let's change our program around a little bit so I'm going to copy this and paste it and I will just type in you our age years old there we go and now we have a matching set of arguments and parameters so now we can call this function and perform this task for us so let's try it welcome to my program bro you are 18 yo goodbye now we can send some variables and not just some hard values to a function and let's accept some user input from the user so we're going to declare a string variable named name and an integer variable named perhaps H and we will provide a prompt for the user to type these in enter your name then get line C in comma name just in case they type in a last name but I'm forgetting a semicolon there alright and we will do the same thing with age so C out enter your age en do semicolon C in age all right and now we can actually place variables here because they're going to store whatever values that we assigned to them so we're going to place a name variable and the age variable all right this should now let's try it and to your name bro Washington and to your edge 107 welcome to my program bro Washington you are 107 years old oh and one quick note if you're sending some variables over to a function they do not have to have the same name so for example I have named an edge here that we're sending our function we can actually rename these when we receive them so for example I could change this to user name and user edge then you would have to change it to your two if you use them so user name and user edge and this would work just the same then so they don't have to have the same exact variable name if you send some variables over you can rename these alright let's take it a step further let's go to level 4 with functions at least I think we're on level 4 so we can have a function return something so normally we have these set to void this keyword is the return type and we're not currently returning anything when we call a function so I think it would be best if we started a whole new program and if you want to copy this I'll post it in the comments down below so don't worry but I think it would be best if we were to start fresh then well I have an idea let's create a program that will accept two numbers from a user and we will take those two numbers send them to a function the function will add them together and return the result so let's begin that program here let's create two values and these can be double variables so double number one and double number two C out will create a prompt to enter in the first number enter in number one okay then C in number one and let's do the same thing with number two enter in number two and see in number two not three two we're good all right so let's create a function that is named ad and we're going to send two double variables as arguments all right so now we need to create this function called IDI so before when we typed in void this is the return type so we want this function to return a result so we need to list the datatype of what we're returning here so we're going to be returning a double value so instead of void we're going to type in double because we're returning a double value then we're going to list the name of the function and we need to set up the parameters so we're going to receive a double value so we list the datatype here and we will call this maybe num1 then we need to set up a second parameter so this is going to be double num2 let's define this function so a set of curly braces and then a semicolon so what do we want this function to do we're going to add these two numbers together we could call this double result we're going to declare and assign this variable right away so num1 plus num2 all right lastly we just need to return the result back to this method called this function call so at the end of your function we're going to return whatever we want we're going to return our variable result all right so now when we call this function it's going to add these two numbers together and it's going to return a result but we need to do something with that result so here I'm just going to create a new variable we can call this double result equals whatever there is returned here when we call this function and lastly let's just display our output result so see out your result is result en DL okay let's try this then enter in number one three point five enter number two seven point one your result is ten point six yeah that seems right alright so that's what you do to return a value instead of using that void keyword you write down the data type of what you're returning exactly so just to reinforce this idea of returning a value if you call a function and it returns a value there's a datatype when you define this function the datatype when you define this function has to match the data type of the value that you're returning so if our variable result was maybe an integer we would want to change the return type when we define this function to also be an integer or if this was a string value we would also change the data type in our definition to be a string as well so make sure that the value you're returning and the data type in the definition also match and to my last tip for today is that if you are declaring a function you need to be sure to declare it before the main method because our programs work from the top and work their way down so if I were to move this declaration for this function and moved it to the end this would actually not work then we'll get an error and you can see that here so another trick is that for some reason if you do want your definition for your function to be after the main method you can actually simply just declare the function and not actually give a definition for it yet so you do need a definition before the main method so we'll write that here so that was double add and then we needed a set of parentheses and there were two parameters double num1 and double num2 and then we're not going to add a set of curly braces we're just going to add a semicolon so this would work then yeah you can see it here it looks like it's working just fine so with your own program if you really want the definition to be after the main method you can do that but you'll want to be sure you're at least declaring this function before the main method at least but otherwise it depends on how you want your program organized I tend to just declare and define my functions before the main method so do whatever works for you then but I thought I would just mention that so that's the basics of creating functions if you would like a copy of the code we worked on today I'll include all of this in the comments down below both the first example and the second example that we both worked on and if you're looking for additional practice or a project to work on why don't you create your own function and post it in the comments down below but yeah that is how you can create your own custom functions in C++ hey you if you enjoyed this lesson then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro