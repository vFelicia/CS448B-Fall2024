yo what's going on people so in today's video I got to explain what asynchronous code is in JavaScript synchronous is code that executes line by line consecutively in a sequential manner synchronous code waits for an operation to complete for example if I were to use console.log Let's Pretend We're performing some task it doesn't matter what the task is we will pretend that task one is complete then we'll move on to task two then task three all this code is synchronous we're executing this code line by line we can't move on to task two until we complete task one there is an order of events that we need to follow it's code that waits for an operation to complete now on the other hand asynchronous code allows multiple operations to be performed concurrently without waiting asynchronous code doesn't block the execution flow and allows the program to continue imagine that a as synchronous code is kind of like a time traveler a time traveler can move out of the flow of time but the rest of the world continues time resumes normally asynchronous code doesn't block the execution flow time moves on with or without it asynchronous code is typically found with input output operations Network requests and fetching data anything that could take an indeterminate amount of time so for example I will use the set timeout function after 3 seconds I will execute a function let's console.log let's say task one we'll change these three lines to be task two task three task 4 I will finish task one after 3,000 milliseconds now check this out we've already completed task 2 three and four but task one finished last that's because set timeout is one of of many asynchronous functions the rest of the program isn't going to wait around for it to complete it runs concurrently with the rest of my code that's why task one was completed at the end and not at the beginning there's different ways to handle asynchronous code we already familiar with callbacks but there's also promises as well as a sync and a wait we still need to discuss these topics in the future but we're already familiar with callbacks if it's crucial that task 2 through 4 finishes after task one we can use a call back we don't necessarily know how long this asynchronous function is going to take what we could do in this example is create a function function Funk one meaning function one I will execute this code within function one then we will accept a callback as an argument then we'll have function Funk 2 to do some synchronous code function two will have tasks 2 through 4 after task one is complete I will invoke my call back to function two so with an arrow function I have more than one line of code I need to add a set of curly braces after task one I will invoke that call back so then if I call Function One I have to pass a call back to function two so Now function one is a synchronous but I need this synchronous code to execute after task one is complete and now that should work 1 2 3 there it is we have task one which is asynchronous followed by task two task three and task 4 so by using callbacks that's one way in which we we can handle asynchronous code but we still need to discuss promises a sync and a wait which are future topics all right everybody so that is what asynchronous code is synchronous code executes line by line consecutively in a sequential manner asynchronous code allows multiple operations to be performed concurrently without waiting asynchronous code doesn't block the execution flow and allows the rest of the program to continue asynchronous code is commonly found with input output operations Network requests and fetching data usually anything that takes an indeterminate amount of time and well everybody that's what asynchronous code is in JavaScript