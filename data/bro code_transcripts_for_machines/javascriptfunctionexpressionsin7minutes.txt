hey everyone so today I'm going to explain function expressions in JavaScript a function expression is a way to define functions as a value or a variable not to be confused with function declarations where you define a block of reusable code that performs a specific task we're already familiar with function declarations such as this function then you create a function name such as hello in this example let's console.log the word hello with the function expression we can assign a function to a variable or pass it as a value to another function so this time we're going to write a function expression I will create a constant named hello equals a function parentheses curly braces we'll do the same thing we will console.log hello and if I were to run this the identifier hello has already been declared so for now I'm just going to remove this function declaration all we're doing is assigning a function to a variable to use the function that's stored within we have to take our variable name and add a set of parentheses to invoke it kind of like it's a pair of telephones talking to each other hello using JavaScript we also have the capability of passing a function as a value I will introduce the set timeout function there's going to be two parameters a call back to a function and an of time we're going to wait then execute this function this will be in milliseconds 3,000 milliseconds translates to 3 seconds let me put this function back after 3,000 milliseconds I will execute the hello function 1 2 3 hello instead of using a function declaration we are going to pass a function expression as an argument to the set timeout function instead of a call back we will create a fun function we will pass an entire function as an argument what are we going to do we will after 3 seconds console.log the word hello and let's see if this works just to prove that I'm not a liar 1 2 3 hello in JavaScript it is legal to pass an entire function as an argument or treat it as a value we'll use previous examples of the map filter anded methods of arrays I will create an array const numbers equals the numbers 1 through six 1 2 3 4 5 6 I would like to square each of these numbers what we've done in a previous lesson is declare a function function Square we had one parameter in that example we had an element what we did is we returned math. poop to raise a base to a given power we're raising our element to the power of two the map method will return a new array const squares equals numbers map we're passing in a callback to square then console. log squares this works we are using a function declaration but this time we will now use a function expression we will treat this function as a value let's cut this function replace the call back then paste it within the map method then we just need to remove the name we don't need a name and this is still going to work yeah it still does we don't necessarily need to think of a function name one of the benefits of doing this is that we're not polluting the global name space with function names we're only going to be using this function once there's no need to declare a function let's create a function expression to cube these numbers now as a beginner it might be helpful to write out your functions as a declaration first then transform it into a function expression function Cube we have our element as a parameter I'm going to copy this return math.pow element to the power of three we will create a new array const cubes equals numbers. map we don't need to pass in a call back we will cut this entire function paste it within the map method then we don't need the name then console.log cubes there are all the original numbers cubed all right I think we're starting to get the hang of this let's quickly use the filter method to filter out any even or odd numbers I will create const even nums equals take our array numbers we will use the filter method then we will pass a function expression as an argument there's one parameter an element we are going to return element modulus 2 to see if it's divisible by 0 is the result strictly equal to 0o let let's see if this works console.log even nums there they are we have 2 46 let's do this with odd numbers odd nums use the filter method again all we're going to change is strictly not equal to zero return any odd numbers 135 then lastly reduce we will sum all of the elements of this array con total equals our numbers do reduce passing a function expression we have two parameters an accumulator and an element we will return accumulator plus our element return the total which is 21 we already do have some practice with map filter and reduce instead of using function declarations then passing a call back we can pass an entire function expression as an argument to these methods in the next topic I'll discuss Arrow functions which shortens the syntax even further you'll like Arrow functions all right everybody so those are function Expressions they are a way to define functions as a value or a variable we've both defined a function expression as a variable we stored that within this hello variable we've also also passed entire functions as an argument which you can do with JavaScript there's a few benefits of function Expressions one of which is you don't need to keep on thinking of function names you can perform a function once then just forget about it they're also used in callbacks and asynchronous operations higher order functions closures and event listeners these are topics we still need to discuss but we will be using function Expressions a lot don't worry we will have more practice and well everybody those are function expressions in JavaScript