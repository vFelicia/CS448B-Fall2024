hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to demonstrate the webview node in javafx so sit back relax and enjoy the show all right welcome back we're discussing webviews today a web view is a node that displays the contents of a web engine meaning that we can display a web page within our web view web views are found underneath the controls drop down menu just drag and drop it place it anywhere within your pane i'll give this webview a unique id of web view let's also add a button sort of like a load button like load webpage so place it anywhere not in front of your webview though i'll change the text to maybe a load then let's go to code on action load page so we will declare this method later upload page let's create a text field so that we can enter in a website url so let's drag and drop it i'll expand it a little bit i'll give this text field a unique id of text field on action load page so let's make sure that we add our controller class let's save and then head to our controller class also be sure to refresh your fxml document then within our controller class we will implement the initializable interface then add any unimplemented methods and we'll need to declare a few things using fxml injection so at fxml we need our web view private web view web view and our text field at fxml private text field text field we need a web engine as well the web view is in charge of displaying the contents of a web engine so private web engine and let's just call this engine okay within our initialize method we're going to instantiate an engine using the get engine method of web view so engine equals web view dot get engine now before we can test this program and run it we need to declare our load page method so let's take care of that after our initialize method public void load page and at the end of our initialize method let's call the load page method if we were to compile and run this program this may not work and here's the reason why so let's take a look at this error illegal access error blah blah blah blah blah web so this means that we need to add a virtual machine argument we can do so by going to run run configurations click on your project arguments underneath vm arguments we are going to add this vm argument add modules javafx dot web apply then run so currently we just have an empty webview a button and a text field so let's load a web page of our choosing within our load page method let's use the load method of our engine and we need to pass in a string this will be a string representation of a url how about we go to google so type in http call into forward slashes www.google.com and let's try it all right we are at google nice so we didn't have to type in anything for our text field or use the load button that's because we immediately loaded this webpage after we used the initialize method now let's change this a little bit i'll keep this line of code in as a reference but turn it into a comment let's say we would like to get the text from our text field so let's edit this portion out plus text field dot get text so immediately this isn't gonna bring us anywhere but then we can type in a url okay let's head to maybe what about facebook facebook.com we can either hit enter or click this load button and we are on facebook cool let's try a different website what about twitter www.twitter.com that's a good sign we are on twitter cool so we know that it's working now let's set a home page there's a bunch of different ways in which we could do that but using only what we know we could write something like this let's create a variable named homepage this will be a string string home page we could initialize it here or within our initialize method so let's say homepage equals maybe google www.google.com and let's set the text of our text field text field dot set text and we will set this to home page remember we don't have to type in http because we're adding that when we use the load method of our engine okay let's try it so we should immediately be brought to google nice so remember there's a bunch of different ways in which we could create a homepage but we're only using what we know so far let's add some more functionality what about a refresh button to refresh our current page that we're on so let's declare an additional method public void refresh page then to refresh a page type engine dot reload we'll need to create an additional button too so let's head to scene builder within scene builder let's add an additional button next to our load button let's change the text to refresh then within our code section on action refresh page make sure that your controller class is linked save then head back to our controller update your fxml document or reload it then let's run this currently we're on google let's type something bro code is the best and i should be able to refresh this page yep and it's refreshed nice let's zoom in and out of our web view we'll need two additional methods public void zoom in and public void zoom out now to zoom in or out of a webview you type webview.set zoom and remember that our webview is in charge of displaying the contents of a web engine now to zoom in you have to set a number above one for the time being let's say 1.25 zoom out let's set to 0.75 so a number below one okay now we need two additional buttons let's head back to scene builder again we'll need a zoom in and a zoom out button zoom in what about just plus then within the code section on action zoom in and we'll need another button maybe just minus on action zoom out okay let's save then head back to our controller and let me make that a little bit bigger there all right after refreshing my fxml document i'm going to run this we should be brought to google right away then i can zoom in or out zoom in zoom out now that we know that our set zoom method is working let's expand the range in which we can zoom in or out currently we only have 1.25 and 0.75 let's create a variable outside of our initialize method private double web zoom and i will assign a value within my initialize method web zoom equals one one for 100 then after we zoom in let's increment zoom by maybe 0.25 or some other amount that you prefer and i will set zoom with web zoom then when we zoom out we will decrement web zoom and then set zoom with web zoom let's try so we can zoom in or we can zoom out nice let's get the history of our web engine object so that we can display what pages that we visited at which time we'll need to declare a web history object private web history i will name this history we'll need an additional method as well public void display history within our display history method we will assign our history object with engine dot get history we'll need to declare an observable list this is a type of collection that we did not discuss yet observable list and list a generic type of web history dot entry we will name this observable list entries equals history dot get entries then we'll need to iterate over our observable list we can use a for each loop for that for web history dot entry entry in entries we will system.out.printline each entry now we'll need to invoke this method some way so let's create an additional button within our scene so within scene builder let's drag and drop a button for maybe browser history or i'll just say history for short history on action display history okay let's save then head back let's refresh our fxml document then run and test this okay our first website is google let's try maybe facebook next then what about twitter then click history to get our current engine history so here's our history it's a little difficult to read though that's what happens when you display the entry directly so let's format this a little bit let's get the url of each entry i'll place this within a print line statement entry dot get url then you can also get the last visited day too i'll just add a space between these plus entry dot get last visited date let's try this again so we have google then let's try twitter next then facebook then get our history so this is a little bit more readable you can always use a printf statement too if you want to format this but we have our url as well as the date that we last visited this site there's quite a bit that we can do with this history object let's create two buttons a move back button and move forward button so that we can visit a recently visited page so let's head to scene builder and add two additional buttons let's add a back button i'll change the text to back on action we'll create a back method then a forward button forward on action forward okay let's save head back to our controller okay we'll need to declare those methods of back and forward public void back public void forward from our display history method copy these two lines of code history equals engine.get as well as the line where we create our observable list named entries so paste these two lines within both back and forward now to move back through our history to visit a recently visited page type the name of your history object dot go and pass in negative one as an argument to move forward all you have to do is pass in positive one and let's run it our first web page is google let's go to facebook next then twitter okay so remember the order is google facebook twitter so let's move back to facebook then back to google now let's move forward facebook then twitter so our next project is to change the text field currently this will be stuck on twitter so we'll change that after hitting the back or forward button and we can use the get url of our entry to do that to get the current url of the webpage that we're on we would type something like this so we need to set the text of our text field text field dot set text will pass in a string the string will be entries dot get we'll pass in an index the index is history dot get current index then follow this with dot get url so copy and paste this for our forward method as well so let's fill up our history currently we're on google let's go to facebook next then twitter okay as we move back through our history pay attention to our text field our url so we're back to facebook then back to google then back to facebook then to twitter so if you prefer you can also create a substring to format this that might be overkill for this video but that's always an option too one of the last things that i'll show you in this video is how we can execute some javascript code within our controller so let's add a button to execute javascript and we'll write some javascript code within our java file so the text let's change to execute js then on action we'll create a execute js method okay let's save then head back then we need to declare our execute js method public void execute js i'm assuming that we don't know any javascript that's fine i'll teach you all just one line of code of javascript so to execute some javascript code type engine.execute.js and pass in some javascript code as a string one line of code that we can write in javascript is to change our window location so remember that we need to pass this in as a string so within double quotes window dot location equals and i need to use the escape sequence to literally print a double quote equals let's head to maybe youtube so https colon two forward slashes www.youtube.com then escape sequence for a double quote semicolon all right let's run this so after clicking this execute js button this will execute some line of javascript code for us which will redirect us to youtube which it has now you may also want to change the text of your text field to match the website that you're on i don't really think it's necessary for this video demonstration but that's another thing to consider by the way speaking of javascript here's a shameless plug to my free javascript course if you're interested in learning more about web development feel free to check it out or not well alright then everybody that is the basics of the webview node in javafx it displays the contents of a web engine if you would like a copy of all this code i will post this to the comment section down below but yeah that's the basics of the webview node in javafx