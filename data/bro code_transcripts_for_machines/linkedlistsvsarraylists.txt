hey what's going on everybody it's bro hope you're doing well and in this video we're going to run some tests on both array lists and linked lists in java so sit back relax and enjoy the show all right let's begin we'll need both a linked list and an arraylist so linked list the data type will be integers and i will name this linked list equals new linked list again the data type is integer add a constructor boom we got ourselves a linked list and now we'll need an arraylist change linked to array this will be named arraylist make sure to pay attention the capitalization equals new arraylist and we'll need to keep track of the time we'll need a start time and time and elapsed time and these will be of the long data type we'll be working with nanoseconds so a long is preferable to an end a long is really just a really long integer think of it that way so we have start time end time and elapsed time okay and now we'll need to populate both our linked list and our arraylist and we can do that with a for loop we'll need a large sample size maybe one million elements that'll be good so int i equals zero we'll continue this as long as i is less than a million and i believe that's about a million yeah we're good okay then increment i by one during each iteration so i'm going to add i to both my linked list and my arraylist so we can add primitives because java has an autoboxing feature so even though these are integer objects we can still add primitives and be sure to add to our arraylist as well so arraylist.ad i okay let's move on now we'll keep track of the time we'll need to assign the start time of value and end time of value before and after our operation so let's say that start time equals and we can get the current time of our jvm by using system dot nano time method and let's take a look so this returns the current value of the running java virtual machines time source in nanoseconds so we will get the start time after we do something i'll just add a note here do something then we will get the end time so end time equals system dot nano time method and to calculate the elapsed time that will be elapsed time equals end time minus start time and then we'll probably want to display this so let's do that system.out.printline and let's say linked list i'll add a tab too plus elapsed time plus ns4 nanoseconds and let's just run this to test it so this portion of code really took right between here took 400 nanoseconds okay let's actually do something now so let's get the first element within our linked list linked list dot get zero and let's see how long this takes okay 13 200 nanoseconds now with an arraylist let's copy everything that we have for our linked list and change linked list to arraylist and be sure to do that here as well array list and let's compare these so we are getting the index of zero for both our linked list and arraylist and we will compare them and it appears that our arraylist is slightly faster our linked list took 11 800 nanoseconds and our arraylist took 6700 so it looks like getting the first element of our linked list is going to be a little bit slower than our arraylist this time let's get something right in the middle of our linked list and arraylist so i'm going to turn this line to a comment and we will get the index of 500 000 so that's right in the middle and do the same thing with arraylist as well so arraylist dot get 500 000. and let's see how long this takes okay so our linked list took way longer than our array list our linked list took 7.5 million nanoseconds compared to our arraylists 6900 nanoseconds okay so that's still way longer with a linked list now let's try something near the end of our linked list and array list what about the last element linked list die get 999 999 so that is the last index in our linked list and array list we have one million elements and this is exclusive and the first element has an index of zero so let's do the same thing with arraylist die get 999 99999 and here are the results our linked list took 63 000 nanoseconds compared to our arraylist 17 000. now the reason that our linked list took less time to retrieve and index at the end is because this linked list is a doubly linked list so we can begin at the head and work our way towards the tail or begin at the tail and work our way backwards to the hud so since this index is right at the end it's actually going to be very easy to retrieve this index whereas in the middle is actually going to be the worst possible spot for a linked list because we can start at either end but it's still going to take the same amount of time to get to the middle so it appears that accessing an element from an arraylist is always faster than a linked list and that's to be expected because with an arraylist we have a random access of elements unlike with a linked list we have to begin at one end of our linked list and traverse our linked list until we get to the index that we're looking for now let's add or remove an element from our linked list and array list maybe just remove because it's going to take really the same amount of time so linked list dot remove and let's remove the first element so index zero and do the same thing with arraylist array list dot remove index zero and let's take a look again okay so it appears that our linked list was actually faster this time 17 000 nanoseconds compared to 2.2 million nanoseconds of an arraylist and the reason that our arraylist took longer is because we need to shift all elements to the left after removing an element so we had to shift one million elements after removing the first element now let's remove something near the middle so let's remove index number five hundred thousand so linked list dot remove five hundred thousand and do the same thing with the arraylist be sure to comment this line out arraylist dot remove 500 000. and here are the results so it looks like our linked list took a lot longer this time 7 million nanoseconds compared to 1.6 million nanoseconds for an arraylist so with our arraylist there were less elements to shift this time because we were right in the middle but with our linked list we still had to navigate to the middle to remove one of these elements and then let's remove the element at the end of both our linked list and our array list linked list that remove 999 999 and do the same thing with arraylist arraylist.remove 999 999. and this time our linked list is just slightly slower than our arraylist adding or removing elements near the end of an array list is actually fairly easy the closer that we insert or delete near the end the less time it's going to take because we have to shift less elements and with a linked list well this is a doubly linked list so accessing the last element doesn't really take too long if it's near the middle it's going to take forever actually so it seems that in most situations an arraylist is going to be better than a linked list however if you have to do a lot of inserting or deleting especially if it's a large data set a linked list might be better but it seems that an array list is going to be more flexible for most applications so that is linked lists versus array lists if you would like a copy of all this code i will post this to the comment section down below and well yeah that's linked lists versus arraylists and computer science