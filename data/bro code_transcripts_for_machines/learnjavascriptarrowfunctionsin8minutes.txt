hey hello there so today I'm going to explain Arrow functions in JavaScript an arrow function is a concise way to write a function expression it's good for simple functions that you only use once here's the formula you have your parameters Arrow then some code you would like to perform here's an example suppose I have a function declaration I have the hello function I'll we're going to do is console.log the word hello to use this function I need to call it by its name add a set of parentheses this will display the word hello a concise way to write the same function is to use an arrow function we'll begin with a function expression then convert it to an arrow function just so we understand the differences this time I will create a constant hello hello is going to be a constant that stores our function expression if I were using a function expression we would say function parenthesis curly braces then the code we want to perform console.log the word hello this would do the same thing hello a more concise way to write this function expression would be to use an arrow function following this formula we list our parameters we don't have any we need a set of parenthesis Arrow then some code we would like to perform I'm going to console.log the word hello and that works we're sticking an arrow function within a variable or named constant to invoke the arrow function within we just follow that constant or variable with the set of parentheses like we're calling it as if it's a pair of telephones talking to each other you can send some arguments to an arrow function we'll need to set up the parameters I will have a name parameter within our code let's console.log I'll use a template string hello add a placeholder add my name parameter now I need to pass in an argument because right now it's hello undefined pass in your first name is an argument hello bro within your code if you need to include more than one statement you'll need to enclose all of that code within a set of curly braces let's add a new line console.log you are old hello bro you are old okay let's set up another parameter this time we will accept an age argument let's transform our second console.log to be you are at a placeholder our parameter age years old now we'll pass in a second argument for age hello bro you are 25 years old so that's the basics of an arrow function you have your parameter ERS Arrow then some code you would like to perform there's no need to create a function declaration let's go over another example we have the set timeout function this function accepts a call back then a given amount of time we are then going to execute this code this callback after 3 seconds 3,000 milliseconds I will execute whatever this call back is let's create a function to say hello again function hello we will console.log the word hello I will pass in a call back after 3 seconds we say hello in place of a call back I could use a function expression let's cut our function remove this argument then paste our function expression remember we don't need the name for a function expression this works as well hello or otherwise we can use a more concise Arrow function we will pass that as an argument we have our parameters we don't have any Arrow then some code console.log the word hello after 3 seconds we display the word hello now we'll use Arrow functions with map filter and reduce we have an array of numbers const numbers equals the numbers 1 through six let's start with using the map filter to square each of these numbers but we will use Arrow functions const squares equals our original array numbers. map normally we would pass in a call back as an argument but we're not going to do that we'll use an arrow function we have one parameter an element arrow take each element use math.pow to raise our element to a given power then let's console.log our squares console.log squares there they are here are all the original numbers squared 1 4 9 16 25 36 let's Cube each number const cubes raise our element to the power of three console.log are cubes there are all the numbers cubed we'll use the filter method to filter out any numbers that are odd const even nums equals rray numbers we will use the filter method method we can pass in a call back but we don't need to we will pass in an arrow function we have our element as a parameter Arrow we don't necessarily need a return statement if we have only one line of code take our element modulus 2 is it divisible by two and does the strictly equal zero if it does it's an even number let's console.log our even number 2 46 let's do this with odd numbers odd nums take our element modulus 2 is it strictly not equal to zero display our odd nums 1 35 and lastly let's do reduce we will get a total by summing all of the elements of this array const total equals our original array do reduce pass in a call back or an arrow function this time we have two arguments an accumulator and an element we have an Arrow return our accumulator plus our element then display the total our total is 21 all right everybody so those are Arrow functions they're a concise way to write a function expression they're good for simple functions that you only use once you list your parameters within a set of parentheses an arrow then some code you would like to perform in this example we've written a more concise way to use the map filter and reduce methods normally we can pass in a call back as an argument a function expression or an arrow function and well everybody those are Arrow functions in JavaScript