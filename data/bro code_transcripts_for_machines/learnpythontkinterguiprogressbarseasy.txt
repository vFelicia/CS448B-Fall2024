hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how we can create a progress bar in python so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running okay let's create a progress bar but we'll need a few imports to begin the progress bar widget is found within that ttk module so we'll need a separate import from that from tk tkenter dot ttk import everything and we'll import everything from time as well let's create a window window equals tk followed by window.mainloop we're going to add a progress bar and a button to this window when we click on the button it's going to fill our progress bar let's begin by creating a button to begin with let's call this button equals button we're adding this to the window let's set some text text equals maybe download and then a command maybe i'll call this start finish by adding this button to the window and we'll just use pack to do that let's define what our start function does def start we'll fill this in later i'm just going to print nothing just as a placeholder and we should just have a button now let's add a progress bar before this button and we'll call this progress bar just bar for short bar equals progress bar we're adding this to the window we can set an orientation this can be horizontal or vertical later on in this video i'll show you the differences between the two but for now let's set this to horizontal and then i'm going to pack this bar bar dot pack and add some padding pad y equals ten and let's see what we have okay this is our progress bar at the top and this is the button when we click on this button it's going to fill our progress bar but i think i'm going to increase the length of this progress bar let's set this to maybe 300 i believe 100 is the default okay that's not too bad of a size now let's define what our start function does we can actually increase the value of our progress bar by typing in the name of this progress bar here value plus equals some amount let's say 10. so what's going to happen right now is that every time we click on this button it's going to fill our progress bar by 10 out of the total which is 100. let's pretend that we're waiting for a certain amount of tasks to complete so let's define a few variables let's say we have a variable called tasks and let's set this to 10 just to keep it simple and x will represent the current task that we're on and we'll say zero to begin with let's create a while loop while x is less than the amount of tasks that we have we will increment the value of our bar by 10 10 10 for each test that we have which is 10 for a total of 100 and we'll want to increment the task that we're on as well which is represented by x so let's increment x by 1 after each iteration of this while loop now when we run this and click download this fills instantly let's add a delay just to simulate each task waiting to be completed so let's add that here let's add a delay by using time dot sleep and let's set this to one second we're going to wait one second and then complete a task what ends up happening now is that nothing appears to be updating well what gives bro you lie to me well that's because the window is waiting to have this progress bar complete before it's actually going to display it being filled so we would want to refresh this window after each iteration of the while loop so at the end of this while loop let's add one thing window dot update underscore idle tasks after each iteration of this while loop it's going to update the window that we have so then when we download something it's going to update our progress bar after each iteration of this while loop until it's completed right about now let's take this a step further by adding a label that displays the current percent of the progress bar that is complete let's add this label after the progress bar but before the button sandwiched right between these two widgets so let's add that here we'll call this label percent label equals label we'll add this to the window and we'll need a text variable text variable equals let's call this percent so the reason that we use a text variable is so that we can update this label with some text after each iteration of our while loop and we'll need to pack this okay within the window near the top let's define percent percent equals string bar this allows us to update percent with some new text and set the percent label with the new text that we have within the while loop but before we update idle tasks let's set what percent is percent dot set and let's say x divided by tasks and then we'll multiply this by 100 i'm just going to put this within its own set of parentheses times 100 and then we'll convert all of this to a string so we can display this along with some text there are a lot of parentheses here so it might be difficult to keep track of all this all right and then we're just going to tack on percent and that's it let's try it so we got 10 20 30 40 50. i'll shut up now one change that i'm gonna make is that i'm going to cast all of this as an integer before we convert it to a string because i do not like that decimal at the end of our percentage so yeah it says 10 20 so on and so forth let's add a label that displays the current task that we're on so let's copy what we have for our percent label and let's rename this as maybe task label task label text variable will equal maybe text and let's define what text is so text is also a string bar and within our while loop let's update the value of our text text dot set will display x plus maybe a forward slash plus our tasks and since we're displaying integers along with some strings we need to convert these two strings and we can use the str function to do that for us so surround x and tasks with str to convert these to strings and then we'll add just plus tasks completed so the value of x will update after each iteration of this while loop let's try it and after clicking download this will display the percentage as well as the amount of tasks that have been completed all the way until it reaches the end let's change this into a more practical example we'll pretend that we're downloading a video game so let's replace or rename tasks as maybe gb for gigabytes and this game will be 100 gigabytes we'll rename x as well so let's refactor rename and change x to maybe download to represent the amount of gigabytes that are downloaded and let's create a variable called speed and let's set this to one all right so while our download is less than the amount of gigabytes for this game will sleep for maybe a portion of a second 0.05 should be good we'll increase the value of our bar by this amount speed divided by gigabytes and then multiply this by 100 for the download we're going to increment this by whatever our speed is and right now it's one so that's the same we can keep percent the same for our text let's change tasks to gigabytes and that's all the changes that we have to make and now when we download something we're kind of pretending that we're downloading a large file or a game you can see that once it reaches 100 it says 100 100 out of 100 gigabytes completed now we can change this to a different value let's say maybe 50 and the speed will be maybe two so this will adjust to accommodate whatever the new file size is as well as the speed and before i forget you can change the orientation to a vertical bar if you so choose so we have this vertical download bar now which could be good for something all right so that's the basics of progress bars in python if you want to copy of all this code i'll post all of this in the comments down below but yeah that's the basics of progress bars in python hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you