hey what's going on everybody it's your bro here and in this video I'm going to teach you guys how to create your own random numbers in C++ so let's get started every one so we're going to be discussing generating random numbers and C++ but I do have a disclaimer these are not true random numbers but something called pseudorandom numbers which are very close so using pseudorandom numbers would be fine if you're making a simple game in C++ if you need to simply roll a dice or deal some cards but I wouldn't use these for any like high level program that involves some security but this would be fine just for a simple game so let's begin now at the top of your program this is what we're going to include we're going to include two things so include s T ad l ib dot H and this is for the S trend as well as the rand function the other thing that we're going to include is time dot H and this allows us to work with the current time all right so the first step to creating a pseudorandom number is that we are going to initialize a random seed based on the current time this is what we can do to do that type in s Rand then a set of parentheses and within the parentheses type in time another set of parentheses and the word no so this is going to generate a random seed for us and it's going to change based on the current time there are other techniques of generating random scenes for pseudorandom numbers but this is one that you'll commonly see so that's why I'm introducing this method instead of others all right now we want to assign a random number to a variable so we'll declare a variable such as number and we're going to set this to Rand parentheses alright and this next part is if we're going to type in modulus and the range of numbers that we want to generate so let's pretend that we want to roll a 6sided dice we're going to type in modulus then six all right so we're going to get a random number between 0 and 5 but it's a total of six numbers so you always count zero when you're generating a random number so if you want the numbers one through six one thing you can do is just add one so this will generate a random number between one and six for us so let's actually display this just to test it so we're going to see out whatever our number is so let's run this okay we got one let's try it again five and one last time and five again all right so we know that it's working then so if you want to change this to a different number you can so for example I play a lot of Dungeons & Dragons so we use polyhedral dice that might have like 20 sides or twelve sides so if you want to roll a 20 sided dice I would just put 20 here and then plus one so then I'll get the numbers 1 through 20 so let's try this now as if we're rolling for initiative so we just quit failed we got a 1 let's try it again we got an 11 and we got a 20 so I have an exercise that we can work on let's generate three random numbers and display them kind of like a slot machine but without all the fancy pictures so what I'm going to do is just copy this statement and paste this a few times and I'm going to change these variables to number one number two and number three and maybe let's change the range from 1 through 10 and then I'll just display these so number 1 maybe I'll add a space between here number 2 and add a space and number 3 okay let's try this we got 7 3 and 10 3 9 & 7 & 3 6 & 2 so this will generate three random numbers between the ranges of 1 and 10 and if you know how to work with GUI components or some sort of visual you could easily just replace those numbers with some sort of picture or other like graphical image if you do want to simulate like a slot machine of some sort but this would be a good place to start to at least get the random furs going so just a quick summary that when you use this random function you can use modulus and the range of numbers that you want to generate if you want 100 numbers you could change this to 100 but it's going to be the numbers 0 through 99 that you get so you can add like 1 to get 1 through 100 otherwise you can always add a higher number to this for some reason like you can add 10 then all numbers that you generate would have 10 added to them then at that point so it depends on the program you're really working on too so you can use modulus the range numbers that you want then if you want to add something to that number you can do so well that's the basics of generating random numbers and C++ but I'm going to walk you guys through how to create a guessing game if you're interested so let's delete all this and start over I'll include all of this in the comments down below so don't feel like you missed out on it so before we get started you'll want to be sure to include these two things STD Lib dot H and time dot H if you haven't done so already now we'll need to declare a few variables we'll make an integer that will be our number that we generate an integer that will be our response and an integer that will serve as some sort of score and we're going to initialize this right away and set it to 0 now we'll need to initialize a random seed based on the current time so s random then time parentheses know all right and for our number we're going to set this equal to R and parentheses modulus and then if we want a random number between 1 and 10 we can just put 10 here plus 1 otherwise we can make this extreme and say like 100 so we have to guess a random number between 1 and 100 but let's start with 10 for now and keep it simple all right the next step we're going to put all of this within a dowhile loop so do then a set of curly brackets and while then our condition so the condition is that we're going to continue guessing as as our number does not equal whatever our responses so there's a few lines that we're going to fill out within the dowhile loop the first thing that we're going to do is prompt the user to enter in your first guess enter your yeah guess 1 through 10 all right then we will see in whatever the response is then we're going to use a few different if statements so if our response is greater than the random number what we're going to do here is see out that was too high okay so then else if the response is less than the number we will see out that was too low all right then lastly we're going to put an else here because if the response is not greater than the number and the response is not less than the number then the response must be equal to the number so then we will type in or type see out that was correct and I think I'm just missing a semicolon here and after the else statement we're going to increment our score counter by one then I also need a semicolon after the while loop here as well alright so then after we escape or exit the dowhile loop we'll want to display the results so I'm just going to see out number is whatever the number was and then see out the amount of guesses that it took us so we'll see out our score and I think I'm going to add a new line before this just to give us some space you know what I'm going to add a new line character here by guesses and after each of these see out statements as well because I forgot to do that okay let's run this now okay enter your guess 1 through 10 I'll guess 5 because it's near the middle that was too high let's try maybe 3 that was still too high one that was too low so I'm guessing it's 2 then all right that was correct the number was 2 and it took us four guesses one two three four let's try one more time just to be sure it's working so I'm to your guests let's try six that was too high maybe three that was too low how about five that was too high and four that was correct the number is four and it took four guesses all right so that is a very basic guessing game so that's the basics on random numbers in C++ if you would like a copy of all this code I'll post it in the comments down below and pin it to the top but yeah that's the basics of pseudorandom numbers in C++ hey you if you enjoyed this lesson then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro