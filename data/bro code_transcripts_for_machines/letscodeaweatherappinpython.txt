hey uh what's going on everybody so in today's video we're going to create a working weather app that fetches realtime weather data from an API this is a massive project so feel free to take your time take several days or even weeks if you need to complete this heck you can even add this project to your portfolio well let's get started everybody all right let's get started everybody this is a fairly useful API to get realtime weather data the website is open weather map.org you will need your own API key but signing up for an account is free to create an account will go to sign in create an account enter your information and then sign in once you're signed in to find your API key go to this drop down menu go to my API keys and you would just need to copy this API key if the status is inactive you'll need to toggle it to active like so now it may take several minutes for your API key to become active hopefully by the time of this project where we will need it it'll be active I would either leave up this window or copy this key and paste it somewhere if you're new to my python series we have a little bit of setup to do you will need the pi qt5 package installed if you've been following my series you can skip ahead to the following timestamp at this point we'll already have a basic window set up to download P qt5 you can open up a terminal and use pip which is Python's package manager to install pi qt5 and myself I do already have this downloaded once you have this package downloaded and it's within your site packages folder we will need the following Imports we will import CIS CIS means system it handles system variables for your python interpreter we will import the request module to make a request to an API then we'll need widgets widgets are the building blocks of a pi qt5 application from the package of Pi qt5 access the module of QT widgets import the following widgets Q application Q widget Q label q line edit Q push button let me put some of these on a new line for readability QV box layout this is a vertical layout manager to work with alignment we'll need the following from the package of Pi qt5 from the module of QT core import the following class QT which is used for alignment so the these are the Imports that you'll need just to be sure that I didn't misspell anything or get the capitalization wrong I'm just going to do a test run no problems processed finished with exit Code Zero sometimes I make one of these characters lower case and then it doesn't work okay we have our Imports we will need to create a class of weather app weather app is going to inherit from the parent of Q widget we will need a Constructor so we'll Define that Dunder init no arguments besid self in case we have arguments to send to the parent we will call the parent with super meaning the super class then call the Constructor but currently we don't have any arguments if we are running our main python file directly we can verify that with the if statement if Dunder name is equal to a string of Dunder main if we are running this file directly then we will create a weather app object otherwise we won't if this statement is true we will do the following we will create an app object app equals call The Constructor within our Q application class but we will pass in the following access the module of CIS then access a RGV which means arguments if we have command line arguments to send to our application this is how we would take care of that but we're not going to be using command line arguments in this video but it's nice to Future proof our code just in case we do we will construct a weather app object weather app equals call The Constructor of our weather app class now this window isn't going to show we have to call the show method of our weather app Weather app doow and now it's going to show for a brief second we need to ensure a clean exit access sis call the exit method within this method we will pass in the following take our app call the execute method which is excore it is a method so we have to call it this method handles events within our application such as closing the window so now our window should stay in place until we close it if you're one of the people that have jumped ahead we have created a class of weather app which inherits from the parent of Q widget we've constructed a weather app object and we're showing it if you've made some Pi qt5 Projects in the past you would just have to change some of these around within the Constructor of our class weather app we will declare the different widgets that belong to our weather app app object we will create a label that prompts the user to enter in a city we will name this city label equals this is a q label widget we can set the initial text of the label let's say enter city name then the second argument is going to be self we are adding this label to our weather app object here's what we have currently we still have to do some CSS formatting but we'll take care of that soon we will need a line edit widget basically a text box we will name it City input the widget is line edit no parameters besides self here is our line edit widget we're not currently using a layout manager these widgets are going to overlap app we need a button self. getet weather button this is a q push button the text on this button will be get weather we are adding this to self our weather app object here's our button when we click on this button we'll make a request to an API for the next following widgets we're going going to add some placeholders just so that we can see what we're doing when we apply CSS styling we need a temperature label to display the temperature temperature label equals a q label temporarily for the label let's say that the temperature is 70° F or pick something else in Celsius so to add a degree symbol if you're using Windows make sure numlock is on hold Alt then on the numpad typee 0176 I will pick 70° fah and then we will add this to self again we're just using this temperature as a placeholder we'll delete it when we do a test run if you would like to include an emoji or some other image we can create a label for that I will name this Emoji label equals a q label I will add an emoji of a son as a placeholder again we're going to delete this when we do a test run we are adding this to self again everything is overlapping that is fine and we need a description of the weather description label equals a q label as a placeholder let's say that it's sunny and we are adding this label to self okay here are all the widgets they're all overlapping so we need to fix that all right moving on everybody so now we have to design the layout of our web app right now all of our widgets are gravitating to the top left corner so I will Define a method to initialize our user interface at the end of this Constructor we will call this method self. initialize UI then call it once we've constructed our widgets we'll format them and design the layout so we are now within our initialized user interface method first let's set the title of our window self. set window title let's say that the title is WEA app so that should change which it does we're going to use a vertical layout manager to handle all the widgets let's name the layout manager vbox equals call The Constructor of the class QV box layout we're going to take our layout manager of vbox then add a widget we will start with the city label that's first we will pass in self. City Lael and we'll do this with the other widgets too we have City input get weather button temperature label Emoji label and then a description label take self our weather app set the layout we will pass in the layout manager of vbox and here's what we have currently all the widgets are arranged in a column now we just have to Center align them horizontally here's how we will take self City label call the set alignment method access the class of QT access the flag of align Center we're going to align all of our widgets in the center except for our weather button currently our button expands to take up the width of the window so we don't need to horizontally align that so we have five widgets to align we have City label City input temperature label Emoji label and description label all of the widgets are going to be arranged in a column horizontally now we just have to apply some CSS styling because right now it's kind of ugly we will apply Styles based on an object name but we have to set that object name so let's start with our city label self. City label call the set object name method pass in a unique ID for this widget I will name it City label I'll keep it the same okay we have to do this with the other widgets too we have a total of six we have City label City input we have the get weather button temperature label Emoji label and description label then we're going to set a style sheet take self our weather app apply a stylesheet with set style sheet we have a lot of properties to write I will do so within a set of triple quotes just to keep everything more organized we can apply CSS Styles based on a class so the class is going to be Q Lael within a set of curly braces we can list multiple CSS properties I will set the font family to be calibri as well as all push buttons Q push button so here's the font although it's still kind of small let's select our ID of City label it's good practice to precede this ID with the name of the class so Q label pound sign the ID we precede the ID with the name of the class just so we're only applying these CSS properties to any ID that's a city label that falls within the class of Q label let's set the font size to be 40 pixels let's set the font size to be 40 pixels that's better I'll set the font style to be italic font style italic that's pretty good let's select the ID of City input this is a line edit widget q line edit pound the ID of City input within a set of curly braces let's set the font size to be 40 pixels we will select our push button which is named get weather button the class is Q push button pound the ID of get weather button within a set of curly braces we will apply the following let's set the font size to be 30 pixels and let's make it bold font weight bold let's select our temperature label the ID is temperature label and this is a q label pound temperature label we will increase the font size font size 75 pixels better let's work on our Emoji next we will select the ID of emoji label the class is Q label the ID is Emoji label we'll set the font size first font size 100 pixels I would like a large image to display emojis properly we're going to use a very specific font we're going to set the font family to be now I don't know if I'm saying this right seg o UI Emoji I probably pronounced this word wrong but I don't care so then our Emoji should display correctly using this font it's colorful then we have the description label of the web that is the last widget description label the class is Q label the ID is description label let's take the font size and set it to be 50 pixels all right so this is what our weather app is going to look like we have the city label a text box to enter in a city the get weather button the temperature label an emoji label and a description of the weather currently now we just have to add some functionality because currently this doesn't do anything all right so now we just have to add some functionality to our weather app temporarily I'm going to collapse our initialized user interface method we will Define a few extra methods let's declare a method of get weather no parameters besid self I'll write pass for now as a placeholder we will need a method to display any errors display error there's going to be one argument besid self a message we will pass in an error message if there is one and a method to display weather that's if there's no errors we will need some data our weather data so be sure that you write these three methods back within our initialized user interface method at the bottom we have to connect a signal to a slot when we click on the button with the signal of clicked we will connect a slot of get weather we will access self take our get weather button with a signal of Click we will connect a slot upself dog getwe and I will print a test message just to be sure that it's working you get the weather so I press the button and we will display you get the weather we can get rid of our placeholder text for the temperature our emoji and the weather description so we can delete these strings But be sure to keep self scrolling down to our get weather method when we click the button we're going to create a few local variables the first is going to be our API key equals this will be a string back to the open Weather API you will copy your API key and make sure that it's active you can use the to button to make it inactive and active so make sure that it's active paste your API key within a string please use your own it still may take several minutes for your key to be active just keep that in mind we will need to get the city that we're looking up so let's say we type in Miami I have to get the text from this widget this line edit widget we will create create a local variable of city city equals access our line edit widget it had a name of City input so self. City input to get the text we will call the text method we have the API key and the city now we will create a URL this will be an FST string using the request module we will pass in a URL to make a request to so back to our open Weather API to get the URL for a city we have to go to the tab of API scroll down to current weather data and there's going to be some API documentation to the right we have a link for builtin API request by city name we will copy this URL and paste it within our F string there's two changes we're going to make we will replace city name with City the name of that variable and API space key with API uncore key it doesn't matter what you name these just make sure they're consistent with your variables when we make an API request we will be returned with a response object response equals access our module of requests call the get method then pass in our URL with our response object we have to convert it to a Json format we will be returned with an object we will name this object data it's going to be readable to us data equals take our response object and use the Json method to convert it to a Json format so let's print our data to see what we're working with let's say I look up the the city of Miami so we have one gigantic object this is our weather data we have coordinates such as longitude and latitude a weather description currently in Miami there's broken clouds there's an ID of the weather this is the temperature but it's in kelvin if we scroll all the way to the end we are looking for an HTTP status code which is named Cod short for code 200 means that the response was successful depending on what this number is we will display one of a few error messages if our status code is 404 that means the city wasn't found and there's many others so 200 means that the request was successful so let's write the following if our data object at Key of cod if this is equal to 200 if the request was successful then we will call the display weather method self. displayweather but we do have to pass in our data now temporarily I'm just going to print our weather data we'll do some more complex stuff later but I just want to be sure that everything is working so let's look up Los Angeles so here's the weather in Los Angeles there is currently broken clouds and again the status code is 200 the request was successful I'll write an else statement for now we will print our data what if we can't find a city for example I will look up the city blah blah blah and get the weather so here's our weather data we have an error code of 404 and a message of City not found let's do some exception handling in case we run into one of these status codes that's not 200 we can get rid of our El statement what we'll do is enclose all of our dangerous code that means any code that might cause an exception within a tri block we will try all of this code and handle any exceptions with an accept block there's two types of exceptions we're looking for the first is an HTTP error HTTP error is an exception raised by the request module when an HTTP request returns a status code that's 400 or 500 however this exception is found within in the request module that we've imported so we can't simply just say accept HTTP error we first have to access the request module then access exceptions then we can list the specific exception of HTTP error we'll encounter this exception if the status code is between 400 and 500 for now all right pass so there's one more step within our Tri block if we're going to handle any HTTP errors we have to raise an exception within our Tri block because our Tri block by itself normally doesn't catch these we will take our response object and call the raise for status method this method will raise an exception if there's any HT TTP errors normally our Tri block doesn't do that so we have to manually type this there's another type of acception we'll catch and that's the request exception We'll add another block for accept request exception this is found within the request module requests exceptions request exception with a request exception this can be due to network problems invalid URLs exceptions of that nature in case we run into one of those types of exceptions we will execute this block of code but for now I'll write pass we'll get back to it later going back to our accept block where we handle any HTTP errors let's use a match case statement we need to get the status code of our response I'll print that temporarily let's print our response objects status code and see what it is again let's make up a city get the weather we have a status code of 404 that means the city wasn't found depending on what this number is the status code we'll use a match case statement so we will match our response objects status code the first case will be 400 that means there's a bad request so let's print the following bad request I'll add a new line character please check your input we'll create a total of I believe eight cases we'll copy what we have so we have 400 401 403 44 that one we're familiar with 500 502 503 504 so for case 401 that means we're unauthorized maybe our API key isn't active yet so let's say unauthorized invalid API key for 403 that means access is denied it's forbidden so let's print forbidden access is denied 4 for is for something that's not found not found City not found 500 is for an internal server error internal server error please try again later 502 is for a bad gateway bad gateway invalid response from the server 503 is for service unavailable service unavailable server is down then 504 is for a Gateway timeout Gateway timeout no response from the server in case there's any unexpected error we can add a wild card of an underscore with our HTTP error let's give it a name as HTTP error and then we'll just print it in case there are no matching cases let's print the following HTTP error occurred I'll add a new line let's convert this to an FST string add a placeholder and then I will print our HTTP eror all right let's do a test run so in case we can't find our city we should encounter a 404 error not found City not found eventually we will display this message within our app but we know that it works what if my API key is invalid so I will take my API key set it to be inactive but it might take a few minutes to take effect the status code of our response object should be 401 so this time I'm going to look up a city I have an invalid API key and I get that error message of unauthorized invalid API key all right everybody so I am on day three of working on and recording this topic over the course of the day I thought of one change that I can make we're going to add a few extra accept blocks so we will accept access requests access exceptions we will handle any connection eror exceptions as well as any timeout exceptions and any redirects too many redirects so if we run into a connection error let's say that our internet gets disconnected well we can print something so let's print the following let's print connection error I'll add a new line character check your internet connection if we encounter a timeout then we will print the following we have a time out error the request timed out if we have a too many redirects error that M should be Capital by the way let's State too many redirects check the URL and if there's anything else we don't anticipate I'll give this exception a name of as wreck error and then we'll just print it this is a last resort I'll use an F string request error I'll add a new line I'll add a placeholder then display our request error so I'm actually going to turn off my internet I'll see if I can get a connection error intentionally so my internet is currently off I will attempt to look up a city get the weather and we get a connection air check your internet connection all right my internet is connected again let's perform a test run and we get the weather in Miami now what we're going to do is if we have an error we'll display the error message within the app and not within our console so we're going to replace print with a call to our display error method let me zoom out a little bit so replace print with self dot display error and we're passing in a message so let's replace those one thing I forgot to add although it's not necessary I'm going to add a colon after each initial message I think it'll look better you don't have to do this but I'm OCD about the appearance if we encounter one of these exceptions we'll pass along a message to our display error method and display it within the app let's take our temperature label self. temperature label and set the text to be our message that we pass in let's do a test run let's look up a city that doesn't exist get the weather so we get that error message not found City not found while we're within this method I'm going to change the font size just so that it's a little bit smaller so let's take our temperature label self. temperature label I'm just going to copy this CU I'm lazy I will call the set stylesheet method and pass along a new property let let's set the font size to 30 pixels let's look up north pole I don't think that's a city oh I guess it is interesting the North Pole is a city I guess let's look up blah blah blah not found City not found let's do another test what if our API key is invalid I'll just delete one of the digits let's look up Los Angeles unauthorized invalid API key let's change that back again I will turn off my internet then look up Miami Connection Error check your internet connection all right so we know that our exception handling works okay now we're within the display weather method we'll receive an object to represent our data we have to get the temperature but first I'm going to print our data so let me zoom in a little bit let's look up Houston Houston Texas I need the temperature within our data object we are looking for a key of Main and that is right here main contains a dictionary with key value pairs once we've accessed main we have to access temp to get the temperature and this temperature is in kelvin we'll have to convert it to Celsius or Fahrenheit it's your choice so we need to extract this value I will store it as a local variable temperature let's say temperature uncore k for Kelvin equals take our data object access the key of main that's right here then we have to go one level deeper and get the temperature the key is temp then give me the value at the Key of temp and that should return the current temperature so to test it let's print it let's print the temperature in Kelvin so what is the weather in Houston Texas the temperature that is 309 Kelvin let's convert it to Celsius and Fahrenheit let's create temperature C if you want to use celsius if you would rather use Fahrenheit you can skip this step to convert from Kelvin to Celsius we will take our temperature in Kelvin subtract 273.15 then for Fahrenheit let's take temperature f for Fahrenheit equals this is a little more complicated take our temperature in Kelvin time 9 / 5 subtract 45967 okay so let's print the temperature in celsius let's look up Houston 36.467853 97.6 Dees fah that's pretty hot all right so once we have our temperature let's change the temperature label self. temperature label I'll just copy this then we will set the text I'll use an F string add a placeholder I'll use Fahrenheit but feel free to use celsius then I will add a degree symbol with Windows make sure numb lock is on hold alt then on your numpad type 0176 for a degree symbol then f for Fahrenheit let's look up Miami get the weather and here's the temperature 94964 now let's say I would like no digits after the decimal I can add a format specifier after our temperature I'll add a colon 0f to display no decimals let's try that again I will look up Miami get the weather the current temperature in Fahrenheit is 95° Fahrenheit now here's one issue let's say we display an error then display the weather if we display an airror we're going to be changing the font size so let's look up blah blah blah get the weather City not found then let's look look up Miami again get the weather and the font size is a lot smaller so if we display the weather let's reset the font size we can really just copy this line so within the display weather method let's set the font size back to 75 what it was originally let's try that again let's look up a city that doesn't exist get the weather City not found then we'll look up the city that does exist like Miami and get the weather 95° F now let's get a description of the weather we'll display that at the bottom in the center we'll display a picture or an emoji but we'll handle that last now we need a description of the weather like is it sunny is it cloudy is it raining so after we calculate the temperature so I'm going to print our data again let's look up Los Angeles So currently it's 85 degrees Fahrenheit so for the weather description that is found at the Key of weather we're now within a list at index zero within our list we'll look up the key of description which states clear sky so we will create a local variable of weather description equals access our data at the Key of weather there's layers to this we're then within a list and actually it's a list with only one item in it so at the index of zero then at the Key of description that's going to return this description of clear sky so we will take our description label self. description label let me just copy it this one right here then we will set the text and then pass in our weather description what is the weather description of Los Angeles 86° Fahrenheit and there's a clear sky okay now the last thing we're going to do is add an emoji We'll add it right to the center between the temperature and the weather description you don't necessarily have to but I think it'll look cool and that's a good enough reason so let's create another method to handle that we will Define a method of get weather Emoji or picture if you would rather use a picture we don't need self necessarily we're going to need a weather ID this method isn't going to rely on any class data or instance data we could make it a static method I'll add a decorator of static method in summary a static method we haven't covered these for a little bit they belong to a class but don't require any instance specific data or any other methods they're used as more of a utility tool we're going to be passing in a weather ID and returning an emoji I'm going to show you where we can find that weather ID I'll use a print statement I will print our data let's look up Miami again that's the first thing that came to mind now at the Key of weather there's a key of ID and the value is a threedigit number I'll show you this chart depending on what this threedigit number is that corresponds to a certain group of weather so the 200 range is a thunderstorm 300 is a drizzle 500 is rain 600 is snow 700 is atmosphere like if there's a tornado or there's a volcanic eruption 800 exactly is a clear sky anything that's 801 or above refers to clouds so this ID is 803 we have broken clouds depending on what this ID is I would like to return a certain Emoji based on the weather so we need this ID I'll delete our print statement we no longer need it let's say before our weather description we will create a local variable of weather ID equals access our data object then access the key of weather the value at weather is a list but this list only has one item in it so we need the index of operator at zero and then we will access the key of ID the key is ID so our weather ID is going to be a number a threedigit number okay everybody we're near the end so after setting the temperature we're going to set the Emoji label self. Emoji label and call the set text method within the set text method we will call self. getwe Emoji method this will return a string an emoji within a string but we have to pass in our weather ID it's that threedigit number so now we are within our get weather Emoji method depending on the range of that threedigit number we will return one of a few emojis we could use a match case statement I think it's more complicated with the match case statement we'll use LF statements for Simplicity so if our weather ID is greater than or equal to 200 and our weather ID is less than or equal to 232 now we have two conditions here linked with the and logical operator there is a shortcut to this and actually py charm is telling me that there is we can simplify these Expressions instead of two separate conditions we can combine them into one if 200 is less than or equal to our weather ID and our weather ID is less than or equal to 232 if this one combined condition is true then we will return an emoji so to add an emoji on Windows you can hold on the window key and press semicolon so 200 to 232 that's for a thunderstorm depending on the font style of your IDE some of these emojis might not display properly you can always just copy them from some place else I think that's better it's more colorful than else if 300 is less than or equal to our weather ID and our weather ID is less than or equal to 321 this is for a partially cloudy Sky we will return some clouds a partially cloudy sky and again I don't like that one so let's use this one instead else if 500 is less than or equal to our weather ID Which is less than or equal to 531 we will return rain that's better 600 to 622 else if 600 is less than or equal to our weather ID Which is less than or equal to 622 we will return snow so 701 to 741 is missed or fog else if 701 is less than or equal to our weather ID Which is less than or equal to 741 we will return some mist or fog 762 specifically is for ash like from a volcano so else if our weather ID is directly equal to 762 we will return let's return a volcano 771 is for a Squall that's a violent gust of wind else if our weather ID is directly equal to 771 we will return let's return that a violent gust of wind a Squall 781 is for a Tado else if our weather ID is equal to 781 return a tornado 800 exactly is for a clear sky else if our weather ID is equal to 800 return a sun a sun emoji else if 801 is less than or equal to our weather ID Which is less than or equal to 804 we will return some clouds now if there are no matches let's return an empty string to not display anything okay let's do a test run let's look up Miami we get scattered clouds it's 94° Los Angeles get the weather we have a clear sky and a sun now there's one fix we need to make let's say that I make up a city again blah blah blah get the weather we should clear our Emoji label and the weather description but we still get that error message so after we display our error within the display error method after we set the text of the temperature label let's take the Emoji label self. Emoji label and call the Clear method to clear it then we have to do this with the description label self. description label and call the Clear method now we should be able to clear it when we get an error okay let's look up Houston get the weather few clouds 98° let's make up a City Pizza City get the weather not found City not found and the Emoji label and the weather description are cleared okay what if I type in nothing what happens let's get the weather we have a bad request please check your input that's if we have an HTTP status C to 400 we handled this exception bad request all right one last City what about Paris let's get the weather it is 68° F and there's light rain all right everybody so that is a weather app that you can make using python add it to your portfolio and thanks for watching