what is going on everybody so today I got to talk about polymorphism in Python polymorphism is a programming concept it's a Greek word that means to have many forms or faces poly means many morph means form in programming an object can take one of many forms there's two ways to achieve polymorphism one is through inheritance an object could be treated of the same type as a parent class there's also duck typing which we'll talk about in the next topic is this video we're more focused on inheritance what we'll do in this video is create a class of shape we'll write pass as a placeholder we will create a class of circle which will inherit from shape again writing pass class Square inherits from shape class triangle which inherits from shape if I was to create a circle object Circle equals Circle our Circle identifies as a circle and since our Circle class inherits from the shape class our circle is also considered a shape it has two forms it's a circle and it's a shape but our Circle isn't a square or a triangle that could also apply to our Square class our square is a square our square is also considered a shape but our square is not a a circle or a triangle those are two possible forms for our Square it's a square and a shape so let's say we would like to create a list of shapes what do they all have in common well they're all shapes a descriptive name for this list would be shapes equals an empty list I will instantiate a circle object a square object and a triangle object our circle is a circle and a shape our square is a square and a shape our triangle is a triangle and a shape each of these objects has two forms or two faces let's fill in some of these classes let's say that with our shape class we will define an area method Define area I'm going to turn this into an abstract method I'll just write pass to work with abstract classes we need to import that from ABC import capital ABC as well as abstract method preceding the area method I will add a decorator of abstract method our circle square and triangle classes they're all considered shapes they inherit from this class we need to Define an area method for each since they're all considered a shape every shape has an area with our class of circle let's define a Constructor Define innit we will pass it in one argument a radius what is the radius of the circle assign an attribute of radius equals the radius we receive let's do this with square Define in nit one parameter the length of a side self. side equals side then triangle Define innit we have two parameters base and height self. Bas equals Bas self. height equals height all right now let's finish defining these area methods for each class we will return 3.14 time self. rius to the^ of two so given a radius that's how to calculate the area of a circle then with our Square Define area we will return self. side to the power of two then with our triangle Define area Return self. base time self. height time 0.5 now we have to pass in some arguments for our Circle we need a radius I'll pick four for the square the length of a side will be five then our triangle the base will be six the height will be seven we're going to write a loop to iterate through our shapes for every shape in shapes then we're going to print for every shape called the area method and that would give me these numbers if you would like you can format the output I'll just use an F string I'll add cm squared much better what if we were to create a class that's completely unrelated to shapes I will create a class of pizza I will Define a Constructor to construct a pizza object we need a topping and a radius what is the radius of the pizza self. topping equals topping self. rius equals radius within my list of shapes I'll add a pizza object but I have to pass in a topping such as pepperoni and what is the radius of the pizza let's say 15 cm so our pizza our pizza class doesn't have an area method here's what happens when I run this we get an attribute error Pizza object has no attribute area our pizza object is considered a pizza but it is not considered a shape it does not inherit from the shape class at the top here you know what a pizza is circular it could be considered a circle so how about this let's take the pizza class it will inherit from the circle class and within our Circle class we're already assigning the radius to the radius attribute so instead of doing that here within the Constructor for our pizza class let's call the super Constructor super which refers to the parent use its Constructor then pass in the radius we receive let's see if this works now that does here is the area of our pizza our pizza is considered a pizza it inherits from the circle class so it's also considered a circle and our Circle class inherits from the shape class our pizza has three forms our pizza is considered a pizza it's also considered a circle and it's also considered a shape it would make sense for it to fit into this list of shapes because our pizza also identifies as a shape so that's polymorphism everybody it's a Greek word meaning to have many forms or faces poly meaning many morph meaning form in Python there's two ways to achieve polymorphism one through inheritance an object could be treated of the same type as a parent and there's also duct typing which we'll discuss more in the next topic stay tuned for that and well everybody that's polymorphism in Python