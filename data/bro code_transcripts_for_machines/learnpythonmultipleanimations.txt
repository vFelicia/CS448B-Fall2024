hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how we can animate multiple objects in python so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running welcome back my fellow bros in this video we're going to be animating multiple objects within a window more specifically we'll animate some circles and each of these circles will have their own characteristics speeds and directions so we'll need two imports to begin from ck enter import everything we'll also be importing everything from the time module as well we'll need a window window equals tk followed by window.main loop i'm going to create two constants one for the width and one for the height let's set the width equal to 500 and the height equal to 500 as well we'll create a canvas and we'll be animating the circles that we're going to create on the canvas so let's create a canvas canvas equals canvas we're going to be adding the canvas to the window and we'll set the width of our canvas equal to our constant width which is 500 and our height equal to our constant of height which is also 500 and we will add this canvas by using the pack function canvas.pack here's our canvas and we're going to be creating multiple circles let's pretend that they're all different sports balls like a tennis ball baseball volleyball bowling ball they'll all be bouncing off of the borders and once each of them encounters a border they will change direction since we're going to be creating multiple objects i think it's best if we do this with another class so let's create another class i'm going to go to file new python file and let's call this class ball and click python file and we need to define this class class ball and we also need a constructor for this ball class we can create one with def two underscores init two underscores again and we can set up the parameters of what we want to receive if we were to create a ball object so let's pretend that we're going to be creating a volleyball to begin with so let's call this ball volley underscore ball equals ball and we'll pass in some arguments so let's set up the parameters first what do we want to receive one we want to receive our canvas so that we can actually draw this oval we can draw this ball we should also have an x and y position a diameter x velocity y velocity and a color all right so when we create a ball like a volleyball we're going to pass in whatever the parameters require so we need a canvas x y a diameter an x velocity y velocity and a color so within the constructor for the ball we're passing in our canvas it's kind of like what we do with widgets we're specifying what we're going to be adding this widget to we're going to be adding this ball to our canvas we also need x y and a diameter let's make this simple by setting x and y to both zero for the diameter let's set this to maybe 100 and we also need an x velocity and y velocity let's set this both to one and a color so let's pass in a string like white let's head back to our ball class and finish assigning all of these arguments that we're going to receive the first step is that we'll say self dot canvas equals the canvas that we receive when it's passed to us as an argument our next step is to draw this oval draw this ball and we'll say self dot image equals canvas dot create underscore oval and with creating ovals we can pass in x y and with circles the diameter is equal for both the width and the height so we'll pass in our diameter twice and lastly a fill color and we'll say this is equal to the color that we receive which is white we're going to set the x velocity and the y velocity this is related to the direction that it's initially going to head in so self dot x velocity equals the x velocity that we receive and we'll do the same thing for y velocity self.y velocity equals y velocity now since this is in another class we need to import this class from ball import everything and you can see that this red underline went away so let's see what happens now we have our volleyball but it's not currently moving so that's the next step so let's create a function within the ball class called move that we can call upon so we'll do this after the constructor cef move and this will take self as an argument the first thing that we should do is get the coordinates so we'll say coordinates and this is a list coordinates equals self dot canvas dot coords and we'll pass in self dot image and we will print these coordinates just to see what's here all right now we'll create a while loop within our main class so let's add that near the end and we'll just say while true so while this is running let's move our volleyball so volleyball dot move so this will call the move function of our volleyball and then we will update the window window dot update so that this refreshes and we will sleep for maybe a hundredth of a second time dot sleep 0.01 but you can put whatever you want here so this is going to at first just print the coordinates of this ball so it's not currently moving and this time with our list we have four coordinates zero zero that's the top left corner and one hundred one hundred that's the bottom right corner so this time we have four coordinates that we have to deal with the top left corner as well as the bottom right corner our next step is that we should move this image self dot canvas dot move what object are we going to move we're going to move self dot image and in what directions self.x velocity as well as self.y velocity now our ball is going to move across the window and it right now it's displaying all of the coordinates we don't have any bounds set up so it's just going to continue into the void forever so we should set up some if statements to check to see if one of the borders touches one of the walls of the window if so it's going to change direction so let's check to see if the left or right side of our ball touches one of the left or right borders so let's write an if statement if and then let's take a look at these coordinates if coordinates at index two that is this one zero one two so this is the bottom right corner with these two sets of coordinates if coordinates at index two is greater than or equal to i'm going to put these within parentheses self dot canvas and we need to get the width of the canvas one way which we can do that is to use the w info underscore with function so this is going to get the width of the canvas and then let's add one more thing or coordinates at index zero is less than zero so if this ball touches the left or right border we want to change direction so we can flip the x velocity self.x velocity equals negative self x velocity and let's do the same thing for the top and bottom borders so let's copy what we have and we'll replace coordinates at index two with three and we'll also replace w info underscore width with height and coordinates at index one change self dot x velocity with y velocity same thing here as well all right and that should be everything let's try it so let's see if this ball actually bounces off the borders which it does pretty cool so that's everything we need to do within our ball class now if we need to create multiple balls we can just construct them so let's say this time we would like a tennis ball i'm going to name this volleyball as tennis ball and let's make the diameter smaller like five but we'll make this a lot faster like for the velocity let's say four and three and the color let's make this yellow and we also need to call the move function of this tennis ball so within the while loop tennis ball dot move and then we should also have a tennis ball moving across the screen in a different direction now technically we don't need to print the coordinates but i tend to do that just for teaching purposes to better demonstrate all of this now our ball class is acting as a blueprint for how balls should be created and the behavior that they exhibit and if we need to create a ball we can just come up with a name for the ball and call the ball constructor to take care of that for us kind of like what we've been doing with widgets so all we need to do to create another ball is come up with a unique name for the ball and instantiate it using our ball class that we created so this time let's create a basketball i'll rename this as basketball and we'll pass in different arguments based on how we want to customize this unique ball so for the diameter let's say this is now 125 and the x and y velocity let's set this to something very fast like eight and seven and with the color let's change this to orange and make sure you also call the move function so basketball dot move and we should have a basketball moving across the screen all right everybody so that's the basics of animating multiple objects in python if you want a copy of all this code i'll post all of this in the comments down below but yeah that's how to animate multiple objects in python hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you