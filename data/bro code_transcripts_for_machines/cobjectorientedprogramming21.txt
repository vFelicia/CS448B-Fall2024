hey how's it going everybody its bro here hope you're doing well and in this video we're going to get into objectoriented programming and C++ so let's get into it before you reach the end of this video make sure to LIKE comment and subscribe so that we together can challenge and defeat the mighty YouTube algorithm everyone so for this part of the series we're gonna get into objectoriented programming so we need to distinguish first the differences between classes and objects so look around you right now wherever you're sitting or standing so you are currently surrounded by different objects for example I have a mic in front of me I have a mouse I have a cell phone and I have a PlayStation 4 controller next to me so in programming we can actually create objects that mimic these things and it's kind of like it's a new data type so I could create for example a PlayStation 4 controller that has some qualities and it can perform something otherwise I can create a cell phone object and it can do certain things so we can actually create a class that serves as a blueprint for the different characteristics of an object and what kinds of actions that they can perform so let's create a new class and we'll make some human objects so we're going to create a new class before our main method so to create a new class just type in class and you need a name for this class so if we're going to create human objects we can call this class human the second step is that we'll want the members of this class to be publicly accessible because normally we don't have access to whatever's in this class outside of this class so we're just going to type the word public and this is a access modifier now we can actually assign some variables that all humans should have so what characteristics of humans come to mind so I'm thinking humans typically have names at least that I'm aware of let's make that singular though they have an age and maybe a weight so we'll have a string variable named name integer named age and a double variable named weight so these are kind of like nouns they're variables that are acting as the characteristics of what all humans should have now humans can also have like functions so what kinds of actions can humans perform so for example one that comes to mind is eat so we can create a eat function for humans so maybe if we call this function will just say this person is eating then we'll just end the line let's add a few others here so maybe a drink function this person is drinking and sleeping so avoid sleep this person is sleeping alright so we have finished making this class a class is a blueprint for what characteristics and functions that an object should have now we can actually instantiate an object that's a fancy term for creating an object so if we want to create our first human we'll type in the name of the class so it's human and then we need a unique name for this specific human I'll creatively call this one human one now with our object human one it's kind of like the variable name except that within human one there is a name an age and a weight variable and we'll still need to assign these some values and when we instantiate this object this is kind of like the data type you know with variables we usually list the datatype before the variable name well it's kind of the same principle here we're listing the datatype of what object we want we want a human not a car not a bicycle a human and we're going to call it human one so we can actually assign these variables that all humans have so if we want to assign human ones some values to its variables well type in the name of our object so human one dot and let's give this human a name and let's give him a name of Ric all right so then this human now has the name Rick we can also give him an age so human one dot age and let's say he is 65 years old there we go I don't think we'll need to assign a weight I think you get the idea so let's actually display these just to test it so we'll see out human ones dot age and then end the line and we will do the same thing for named human one dot name so let's try this yep Rick is 65 years old now we can create another human so let's create human too so we need to list the datatype so it's a human basically and then we'll call this one human too and let's give human two a name and an age so human two dot name equals Morty and let's give human to an age perhaps sixteen all right so let's display human two is age and name but I'm going to flip these because they're bothering me because they're out of order okay let's try this now so human two's name is Morty and he has an age of sixteen years old now we can actually perform one of the functions within a class so let's have Rick use the drink function that he has access to so if you want to use a function that belongs to a class or an object just type in the name of the object that you want to perform that function so we can say human one and we want human one to use its drink function so let's drive this now yep this person is drinking so let's create one more human so we list the datatype human and we will call this specific human human three and we want to give him a name and an age so we'll type in the name of human three dot name is equal to calm Jerry and we'll give Jerry an age so human three dot age equals perhaps 45 all right now we have three humans Rick Marty and Jerry and they all have a eat function drink function and sleep function but there's one thing if we try this though since these functions all have basically the same syntax we can't differentiate like who's performing which function so I'll give you an example let's have human one which is Rick use his drink function will have human two that is morty use his sleep function and then we'll have human three use its eat function so if we were to display these it's all going to look like the same thing we can't differentiate who's calling this specific function so what we can actually do is that with these strings within our functions we can actually replace this person with the actual name of the object that is calling this function so I'm going to take out this person and what we're going to place here but let me just add these insertion operators so we're going to replace this person with this greater than sign and then name so this is going to be replaced with the name variable of whatever object is calling this function so we're going to take these this name and place it here and let's try it now there Rick is drinking morty is sleeping and jerry is eating likewise you can do this with other variables too like you can say this age or this weight but you know this name works for this example alright so I think that's the basics of objectoriented programming an object is an instance of a class an object usually has some sort of attributes like values and variables that act like nouns that describe the itself and they can usually perform some sort of action so for example our humans they have a name age and weight they can eat drink and sleep and a class is like the blueprint of what attributes and functions that all humans or whatever object you're dealing with can perform so that's the very basics of objectoriented programming in C++ I'll post all of this code and the comments down below if you'd like a copy for yourself if you're looking for additional practice why don't you create your own class and then post it in the comments down below as well if you'd like to share it but yeah that's the basics of objectoriented programming and C++ hey you yeah I'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you