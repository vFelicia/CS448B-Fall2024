well howdy y'all we're talking about recursion now recursion is when a thing is defined in terms of itself i stole that definition from wikipedia really doesn't make too much sense a thing is defined in terms of itself so basically with recursion we apply the result of a procedure to a procedure a recursive method is one that calls itself and this can be a substitute for iteration there's a lot of overlap where you could use either recursion or iteration with recursion we divide a problem into sub problems of the same type as the original and recursion tends to be used within advanced sorting algorithms and navigating trees some of the benefits of recursive code is that it's easier to read and write and it's easier to debug but the disadvantages is that it's sometimes slower and uses more memory let's begin with a very simple example let's create a method to simulate walking we'll do this both iteratively and recursively then take a look at the differences between the two so let's write an iterative walk method so we will need to invoke this method and then we will pass in the amount of steps that we would like to walk like five steps and then we'll need to declare this method private static void walk and i'll change i to maybe steps just so that it's more descriptive now let's use an iterative approach so iteration is the repetition of an internal process so we can use a for loop that will repeat a process and let's say that int i equals zero we will continue this as long as i is less than steps and then let's increment i by one during each iteration and then during each iteration i will print you take a step and really that's it and after running this code we have walked five steps now let's write the same method recursively recursion is the repetition of a procedure iteration is the repetition of a process so with recursion we need a base case that's what we do when we would like to stop and a recursive case what do we do when we would like to continue so our base case is going to be if steps is less than one then we will return and if you only have one statement within your if statement you don't really need these curly braces so i'm just going to omit those all right then we will print you take a step so this is our base case this is what we do when we would like to stop then our recursive case is what we're going to do when we would like to continue we will invoke the walk method within itself but we will pass in steps minus one and this is our recursive case and this will do the same thing however it's just written a little bit different now one thing that you should know is that programs have a data structure called a call stack a call stack keeps track of the order in which our program needs to function so with the main method we call the main method first and that's added to the bottom of our call stack so in order to complete our program we have to complete the main method and get to the end of it however when we took an iterative approach we invoked the walk method and that was added to the top of our stack remember that video on stacks it's a lifo data structure last in first out we have to take care of anything at the top of our stack first and then work our way down with a recursive approach we're adding multiple frames onto our call stack because one we're calling the main method then we're calling the walk method passing in five is an argument then we're calling the walk method again passing in four as an argument then three then two then one then zero then we return and we have to solve this in a lifo order last in first out we begin at the top and remove frames from the top until we reach the end so that's why using recursion is sometimes slower and uses more memory we're adding more frames to the call stack there's more methods that we have to keep track of now check this out what if we take 1 million recursive steps we're going to call this walk method a million times and that's going to be a problem and we ran into an exception let's take a look at this so we encountered an exception a stack overflow error it's kind of like that one website when working with recursion it is possible to run out of memory although this is sometimes slower and uses more memory recursive code tends to be easier to read and write and easier to debug for a small method like this i would probably stick with an iterative approach just because it already is fairly simple but it's going to really come in handy when we get two topics on advanced sorting algorithms so let's try something a little more complex let's create a program to find the factorial of a number so let's create a factorial method and we'll write this recursively so let's find factorial what about 7 and then we'll need to define this method and we no longer need our walk method so if we're taking a recursive approach finding the factorial of a number let's say that i is num so we'll need a base case if num is less than one we will return one this is our base case then we need a recursive case we will return num times factorial then pass in num minus one and then eventually we'll hit our base case because num is going to be zero and this is our recursive case oh then change void to int because i forgot okay then let's display factorial seven within a print line statement factorial seven and the factorial of seven is five thousand forty so you can see that this was fairly easy to write it only took two lines of code by the way i found a great example of recursion on its wikipedia page and that's by the process of creating refreshed sourdough so the recipe calls for some sourdough leftover from the last time the same recipe was made i thought that was a fairly descriptive example of recursion let's move on to level three let's create a recursive method to find a base raised to a given power let's create a power method and we need a base and an exponent let's find it two to the power of eight and then we'll need to define this method private static let's change void to int i to base and j to exponent we need a base case and a recursive case the base case will be if exponent is less than one we will return one this is our base case our recursive case will be return base times invoke the power method pass in base and exponent minus one and this is our recursive case and then we will need to display the result system.out.printline two to the power of 8 which is 256. all right everybody so that's recursion it's when a thing is defined in terms of itself we apply the result of a procedure to a procedure and a recursive method is one that calls itself and this can be a substitute for iteration we divide a problem into subproblems of the same type as the original and recursion is commonly used within advanced sorting algorithms and navigating trees some of the advantages is that recursive code is easier to read and write and easier to debug however it's sometimes slower and uses more memory so yeah that is recursion if you learn something new be sure to smash that like button leave a random comment down below and well yeah that's recursion in computer science