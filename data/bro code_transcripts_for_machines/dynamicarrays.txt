what the heck is a dynamic array a dynamic array is an array with a resizable capacity if we need extra room for elements we can increase the capacity which we cannot normally do with a standard typical fixed size array dynamic arrays are also known as arraylist in java vectors in c plus plus arrays in javascript and list in python here's an example of a static array and then we'll take a look at a dynamic array a static array has a fixed capacity we determine that capacity at compile time and we can't change it later normally in this example i have a static array with a capacity of six elements and a size of five elements that are currently occupied the last element is open so it's null each element has a memory address obviously these are not real memory addresses but this is how i like to think about things imagine that all of these memory addresses are houses and they're all next to each other now accessing an element is easy because we have index numbers to work with we can randomly access an element in of one constant time the size of our data set doesn't matter however searching for a stored value still takes time because we need to begin at index zero and iterate over our array until we reach our value or the end in case we don't find it this is done in o of n linear time the larger the data set the time to finish will increase linearly and in the case of inserting or deleting that takes a linear time unless done at the end no shifting of elements is required however the closer we need to insert or delete to index 0 we need to shift all elements that follow in order to make room for insertion or close any gaps in the case of deletion so if i need to insert a value at let's say index 0 i have to shift all elements to the right by one to make room for this insertion and then we can insert a value now currently with our static array we're at capacity our array is full our size is equal to our capacity then in the case of deleting an element we need to shift all elements that follow after this index where we're making the deletion and shift everything once to the left so that would look like this and our size is back to five so there is one element that is open a major disadvantage of static arrays is that they have a fixed capacity we can't increase the capacity once the size of the elements reaches capacity in the separate example i have an array with a capacity of five elements and a size of five elements and it's completely full i can't decrease the capacity because the next memory block contains i don't know pictures of cats or something you do you i guess a dynamic array has its own inner static array with a fixed size once the inner static array of our dynamic array reaches capacity our dynamic array will declare and instantiate a newer ray with an increased capacity usually the amount that we increase the capacity by really varies depending on the programming language it's usually between 1.5 and 2. i just picked capacity times 2 for extra emphasis so what we'll do now is copy the elements over to our new array and these have different memory addresses than our original array so that would look something like this we now have a new array with double the capacity but like i said it really depends on the language that you're working with it's usually between 1.5 and 2. this array has a size of five elements that are full and a total capacity of ten then if you need to shrink the capacity like if you're not using a lot of elements you can always just do the reverse process of what we did to increase it now with this new inner array the insertion and deletion of elements is really the same as a static array so you just shift all the elements to the right by one to insert a new element or shift all the elements to the left to delete an element what are some of the advantages of dynamic arrays one there is random axis of elements that is done in o of one constant time we can randomly access an element by an index number and retrieve the value two there is good locality of reference and data cache utilization because all of these memory addresses are contiguous they're right next to each other unlike with linked lists you have to jump around a lot because all of the memory addresses are kind of random and three it's easy to insert and delete elements at the end because there's no shifting of elements required and for the disadvantages a dynamic array wastes more memory than a linked list because we need to increase the capacity to accommodate more elements if we need the extra room and we may not necessarily need all of this extra room so a dynamic array wastes more memory than a linked list two shifting of elements is time consuming the closer we need to insert or delete closer to index zero we have to shift all elements that follow afterwards to the right in case of an insertion or to the left in case of a deletion and three expanding or shrinking the array is time consuming because we have to copy all of the elements over to a new array with a different capacity and that's the basics of a dynamic arrays let's create our own dynamic array for practice all right welcome back we're going to create our own dynamic array using java in the future if you ever do need a dynamic array you might as well just use an array list according to the description it's a resizable array implementation of the list interface and it's prebuilt so you might as well use it i thought we would create our own dynamic array just for learning purposes and practice but let's take a look at the arraylist class within this class there are a few defined members there's a default capacity set to 10. there are overloaded constructors within this arraylist class we can set our own initial capacity or we can use the defaults by not passing in an initial capacity there is a size to keep track of how many elements are filled within our array list and our array list does have its own inner static fixed size array and if we ever need to expand the size of this array we just copied the elements over to a new inner array so let's begin let's create a new class named dynamic array and i'll get rid of this so file new class and this will be named dynamic array then finish okay let's declare a few members let's create int size int capacity this will be the initial capacity i'll set this to 10 but feel free to pick whatever value that you want as well as an array of objects named array i will declare this but not yet instantiate it so you can make these private however i think that'll make our code a little more complex and difficult to understand although it'd be more secure i'm just going to use the default visibility for these members here all right let's create some overloaded constructors so public dynamic array and within here we will instantiate a new fixed size array this dot array equals new array of objects with a capacity of whatever capacity the default is so it's going to be 10 by default and we'll create an overloaded constructor just in case the user passes in their own capacity that they would like to set so int capacity this dot capacity equals whatever capacity that we pass in okay let's instantiate a new dynamic ray dynamic make sure to spell it right dynamic array i'll call this dynamic array with a lowercase d equals new dynamic array so i'm not going to pass in an initial capacity and let's print whatever the capacity is of our dynamic array dynamic array dot capacity and this should be 10. okay now let's pass in maybe a capacity of five and this should be five yep cool so it seems like that works all right let's head back to our dynamic array and declare all of the methods that we'll need let's create an add method public void add and there will be one parameter of object data next method insert public void insert the two parameters are int index object data okay next method we have delete public void delete there is one parameter of object data then we have search public int we're going to return it index search and we will need object data and let's return negative one for now then we have private void grow to expand the size of our array private void shrink then we'll need an is empty method public we will return a boolean value is empty and we might as well fill this in right away because there's only one line return size is equal to zero if our size is anything but zero we will return false and lastly tostring public string to string and i need to type in something i'm just going to return null for the time being until we return something okay let's begin by filling in the add method first we'll want to check to see if we're at capacity if our size is greater than or equal to our capacity then we better call the grow method to expand the size of our array so if there is room we will take our array at index of size that should be the end of our array equals data then we will increase our size by one now let's head all the way down to the tostring method to display the elements of this array and we just need to iterate over these let's declare a local variable of string string string and i will set this equal to an empty string and we will fill in the elements when we iterate over it so let's iterate over the elements of our array so let's create a for loop for int i equals zero and then i will continue this for loop as long as i is less than our size you can do capacity too if you want to see the entire array but let's begin with size i is less than size and i will increment our index i by one so i'm going to take our string and append it string plus equals our array at index of i that's one i plus maybe i'll add a comma then a space then we should return our string string okay this isn't perfect yet but let's at least test it let's head back to our main java file and add a few elements to our array using the add method so let's use the default capacity of 10 so we don't necessarily need to pass in anything so to add to our array we can use dynamic array dot and we declared an add method at the top so let's add maybe some letters i will add the letter a then b then c that should be good so a b and c and then let's call the tostring method system.out.printline and with the tostring method we only have to type in the name of what we would like to display the elements of so dynamic array and we don't necessarily need to type tostring so this should display a b and c now let's format this and clean it up a little bit like i would like to get rid of the last comma here and maybe enclose all of these elements within a set of square brackets so this is what we can do within the tostring method so after the for loop let's check to see if our string does not equal an empty string if that is the case if there are elements to display let's take our string then i'm going to create a substring and get rid of these last two characters the comma and the space so string equals string dot substring and the length is going to be beginning at index 0 and i will continue this until string dot length method minus 2. then after running this one more time the comment space at the end should no longer be there because we created a substring to end at the last element then let's enclose all of these elements within a set of square brackets so i'll use some string concatenation so i'll add a left square bracket and then at the end add a right square bracket and then these should be within square brackets now and that looks a lot better now what if our string is empty let's return it just a set of square brackets using an else statement else we will set our string equal to a set of square brackets and that's it so let's head back to our main java file and comment these lines of code out where we add elements to our dynamic array so let's run this and we should have an empty set of square brackets actually this would be a good opportunity to test our is empty method so let's check that so within a print line statement system.out.printline i will take my dynamic array and use the is empty method then i'm just going to use some string concatenation empty colon space plus dynamic array is empty method and our dynamic array is currently empty that is true then let's fill this with elements a b and c so this should iterate and display the elements of our array and let us know if our array is empty which is false since we're here let's display the size and the capacity of our array too so system.out.printline dynamic array dot size and i'll use some string concatenation here too so size colon space plus dynamic array dot size and the capacity as well so capacity plus dynamic array dot capacity so this dynamic array has a size of three three elements are filled in and a capacity of 10. for fun just to see the entire array let's go to the tostring method and change size to capacity so we can see all of the elements that are filled in and not filled in so after running this we can see our entire array at its full capacity so we have a size of three three elements are filled in but we have a total capacity of ten the rest of the elements are null so if we were to count all of these they should be ten so we have one two three four five six seven eight nine ten nice so you can change that back to size or you can keep it as capacity i'll just keep it as capacity for teaching purposes now let's fill in the insert method there's not a whole lot left to do first let's check to see if our size is greater than or equal to our capacity if so then we'll need to grow our array so size is greater than or equal to our capacity if that is the case call the grow method what we're going to do at this point is shift all of the elements that are filled in to the right in order to make room for the insertion so let's use a for loop and iterate over our filled elements in reverse order i will set into i our index equal to our size and then i will continue this as long as i is less than our index then decrement i by one so i'm going to take our array at i and set this equal to array at index of i minus one this will shift all of the elements over to the right to make room for the insertion so we will take our array at index equals whatever data we want to set then increase our size by one so then if we head back to our main java file we can insert a value at a given index so let's take our dynamic array dot use the insert method let's say at index 0 i would like to insert an x so let's try it cool we have x a b c the size is now 4 and the capacity is still 10. now let's work on the delete method within here we're going to iterate over the elements of our array beginning from left to right so this is fairly easy int i equals 0 we will continue this as long as i is less than our size and increment i by one after each iteration so during each iteration we will check to see if our array at index of i is equal to the data that we pass in as an argument so if that is the case we need to shift all of the elements to the left then so we'll need a nested for loop for that then we will need an index of j because i is already taken we're within a nested for loop int j equals zero and i will continue this nested for loop as long as j is less than our size minus i minus one and then we are going to increment our index j by one during each iteration so basically wherever we make the deletion we're going to shift all of the elements afterwards one spot to the left so we will take our array at index of i plus j and set the sequel to our array at index of i plus j the same as before but add plus one so that will target the next element that comes afterwards so after we escape this for loop we will take our array at index of size minus one and set the sequel to null and then we will decrement our size by one and actually here would be a good place to shrink our array so let's write an if statement and check to see if our size falls below a certain criteria so let's say that if our size is less than or equal to a third of the capacity so capacity divided by three we don't want to shrink too often just because that's time consuming and then you may want to cast this as an int because it may not divide evenly so if our size is underneath a third of the capacity let's call the shrink method and we will shrink our array by maybe half but we'll get to that later so then we want to break to escape this for loop then okay let's try this then so after making the insertion let's delete what about a so dynamic array dot delete and i do not need to pass in an index just the data that i'm looking for all right so a is no longer in here we have x b and c the size is three and the capacity is still ten all right i promise we're almost finished let's fill in the search method next and this one is fairly short so we just need to iterate over the elements of our array beginning at index zero four and i equals zero i will continue this as long as i is less than the size of our array increment i by one if our array at index of i is equal to the data that we're looking for the data that we pass in as an argument then we will return whatever i is our index if we do not find it we return negative one that's kind of like a sentinel value that means we did not find the value that we're looking for okay so let's search for maybe c dynamic array dot search and i will pass in the data that i'm looking for i am looking for c so that should be 0 1 2 assuming we insert and delete some values later and then i'm going to place this within a print line statement so dynamic ray dot search and i am searching for c and our result is that c is at index two zero one two all right we're near the end let's grow and shrink our ray and i'll turn these lines into comments now for the grow method we're going to instantiate a new array but we'll increase the capacity first int new capacity equals our old capacity which is just named capacity and let's say we want to increase the capacity by two and then i will just cast this as an end okay so after we create a new capacity we will instantiate a new array then we need to copy the elements over so we'll have an array of objects named new array equals new array of objects with a capacity of our new capacity and then we need to copy the elements over to our new array and that's kind of time consuming but necessary so we begin at index zero for int i equals zero we will continue this as long as i is less than our size and i will increment this by one after each iteration so we will take our new array at index of i and set this to our old array just named array at index of i and then we will change the capacity to whatever new capacity is then lastly we will set our array to equal our new array then let's test it so i'm going to maybe add a bunch of elements i'll keep that as a comment so let's change the capacity of our array to five i'll pass in five into the constructor so we have less elements to work with so the size is three and the capacity is five i'm going to add another element let's try d so size four capacity five let's add e okay so currently our array is full now let's try to increase the size past the capacity so i will add f and this should increase and grow the size of our array so we have a capacity of 10 now and we have a bunch of empty elements and lastly we just need to shrink this array and this next part is super simple for the shrink method copy everything from the grill method and paste it within the shrink method but change capacity at times to to capacity divided by two now we will call the shrink method automatically when the size falls below a third of the capacity that means we have a lot of wasted memory now let's begin deleting elements so i will type dynamic ray dot delete a then maybe b so when the size is a third of the capacity that's when it should shrink so we're not there yet let's delete maybe one or two more times so let's delete c and there we go so the size is three and the capacity is now five well all right that's a very basic dynamic array if you're using java instead of just building your own dynamic array you might as well just use an array list because it's more efficient and well it's already coded for you but i think this was good practice for us just to understand how dynamic arrays work so if you would like a copy of all this code of course i will post this to the comment section down below if you made it all the way to the end please give this video a thumbs up a random comment down below and well yeah those are dynamic arrays and well computer science