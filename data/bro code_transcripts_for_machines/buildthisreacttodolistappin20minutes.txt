hey everybody in today's video I'm going to walk you through creating a todo list app using react so sit back relax and enjoy the show all right let's do this everybody we'll need to create a new jsx file going to our source folder we will rightclick new file this component will be named too list. jsx this will be a function based component function to do list no parameters then let's be sure to export it because if I don't do it now I'm going to forget export default to do list we will be using the UST State hook we should import that import react use object destructuring I would like just the US state Hook from its location of react we do need to return something for now we're just going to return a fragment going back to our app component we need to import our todo list component import todo list from its relative file path do/ too list. jsx we will return one todo list component and we are ready to move on within our todo list component we will have two State variables const tasks tasks will be an array of strings we need a Setter function for tasks set tasks equal equals the use State hook the initial state of tasks is going to be an empty array but eventually we're going to populate this array with strings one string for each task to add and we will create a state variable for a new task new task is whatever we're currently editing with the text box we will be adding our new task to our array of tasks then we need a Setter function for new task set new task equals U State the initial state will be an empty string let's declare the functions we'll need throughout this program we will need a function to handle input change there will be one parameter and event this function is for our text box when we type in something we'll need a function to add a task function add task there will be no parameters function delete task there will be one parameter an index an index of the list item we would like to delete let me scroll down a function to move task up there is one parameter an index what is the index of the list item we would like to move up within our list and a function to move task down we will also accept an index okay and these are the functions we'll need until we fill these in I'm going to close these functions okay now we'll go to our return statement we have a lot of HTML elements to add we'll begin with a div element our div element will have a class name of to do list within this development we'll create an H1 element for a heading The Heading will be a to do list after this H1 element I'll create another div element within this div element I will create an input element this will be a selfclosing tag just for readability I'm going to place each attribute on a new line we have a lot of attributes to write I will set the type of this input element to be text I'm going to zoom in so you can see it more easily I'll add a placeholder of enter a task dot dot dot enter a task I will set the value of this text box to be some JavaScript our new task State variable this one when we type within this input element we will use the onchain vent Handler equal to a callback to a JavaScript function a callback to handle input change we'll fill in this function since we're here going to handle input change we will use the setter for our new task access our event parameter access its Target access its value so when we type within the text box it should change e breakfast if we didn't set the new task and we type within the text box we don't see the text it doesn't change that's why we need this function so we can see the text when we write within the input element let's scroll back down to the bottom after our input element we will create a button element with text of add to add a task for the class name of the button we'll set the class name attribute of the button to be add button add button I will set the onclick event handler equal to a JavaScript call back we will call the function of add task now temporarily until we apply some CSS I'll write a few tasks within our array just temporarily let's say our first task is to eat breakfast take a shower and walk the dog after our development we'll create an ordered list with a pair of O tags within this pair of O tags we'll be embedding some JavaScript we have a lot to write we're going to take all of our tasks and use the map method we will create a list item element for each task for each element with this this array we'll use the map method we're provided with two parameters the current element and the index of the current element but I'll rename this element parameter as task so it's more easily understandable within the map method we will use an arrow function what would we like to do with each task I'll put this on a new line we will create a list item a list item element So currently we have three list item elements now react wants to to add a key for each element so it can more easily keep track of each element with the opening list item tag I will set the key attribute equal to the current index within the list item element I will create a span element for some text the class name for this span element will be text this will be for the text of each list item element within the span element we will include the current task we have three tasks eat breakfast take a shower walk the dog after our span element we'll create a button element this button element will be for a delete button to delete this task this button will have a class name of delete dashb button I will set the onclick event handler equal to a call back a call back to delete task now we do have to pass in a parameter the index of the list item we would like to delete delete task pass in the current index with a call back if you add a set a parenthesis right away when we pass in an argument this will call the function right away instead we will use an arrow function to prevent that let's copy this button paste it we'll now create a move up button to move a task up if we need to change the priority the text on the button will be up but you know what I like to use emojis I'll use a pointer finger I think that would be more fun the class name will be move button on click will be set equal to a call back to move task up we'll be passing in the current index make sure that this is an arrow function too let's copy this button again paste it this next button will be for moove task down we can either write down for the text or I'll use an emoji for fun down all right and that is all the HTML that we need before we fill in these functions let's apply some CSS to everything I'm zoomed in to 100% currently let's select the container of todo list this development so this has a class of todo list let's change the font family to be aerial with a backup of s serif text align Center Des Center the text and add a little bit of margin to the top of 100 pixels let's select our H1 element increase the font size to 4 RM then we'll select all buttons increase the font size to 1.7 RM set the font weight to be bold add some padding around each button padding 10 piels by 20 pixels set the font color to be white we'll add some background color pretty soon remove the border border none border radius to smooth the corners by five pixels change our cursor to be a pointer when we hover over a button that does appear to work we'll add a transition effect when we hover over a button let's change the background color and have it ease after 0.5 seconds let's work on the background color of the buttons next we'll select the class of add button add dash button pick a background color I'll pick Green but I will use hsl values I've already prepicked a color now when I hover my cursor over the add button access the hover suo class take the lightness make it 10% darker let's do this with the delete button let's copy what we have paste it for the next set change add to delete I'll pick a red color again I've already picked some values and when I hover make the shade 10% darker and the move buttons I'll make the move buttons blue again I've already picked a color not bad it looks like with the transition I forgot to add s for seconds that's better we'll work on the input element next so after our buttons let's select our input element we'll select all input elements that have a type attribute of text I'll increase the font size to 1.6 RM add a little bit of padding 10 pixels add a border two pixel solid pick a color I'll set the lightess to be 80% but lower the alpha to 50% not bad border radius to smooth the corners 5 pixels and for the font color H let's find something I'll just lower the alpha to 50% here's the text currently I'm happy with that we'll work on the list items we'll begin with our ordered list remove all padding padding zero so that should delete the numbers we will style each list item element increase the font size to 2 RM set the font weight to be bold add some padding of 15 pixels change to the background color I'll set the lightness to 97% add some margin to the bottom of each list item of 10 pixels to separate each of them add a border three pixel solid pick a color for the lightness I'll pick 85% and the alpha down to 75% border radius to round the corners 5 pixels for the elements within each list item I'll use flex box display Flex to align everything and align items Center I would like the text to take up as much space as possible so I will select the class of text use flexbox set it to One Flex one it's a shortcut for these three CSS properties Flex grow Flex shrink and flex bases this is more advanced Flex box if you set an element to have Flex one you're applying these three properties basically speaking that element should take up as much space as possible and grow and Shrink with the size of the web browser so all these buttons are going to be pushed to the right because the text wants to take up as much space as possible okay now we will select the class of our delete button and move button these two sets of buttons let's add some padding 8 pixels by 12 pixels increase the font size to 1.4 RM I'll add some margin to the left of each button margin left 10 pixels much better this is optional but I'm going to change the background color of the body of my document I will select the body change the background color I'll go with the dark gray color I'll set the lightness to 10% I'll also take our H1 element and set the font color to be white I think that looks pretty good but you don't necessarily need to change the background color if you don't want to our CSS is now done we just have to add some functionality let's go back to our todo list component we'll begin with add task after hitting the add button we'll call this function to add a new task we have to get the text within this text box we'll use the setter for set tasks pass in a new array spread the current elements of tasks and add our new new task that state variable we should update this to use an updator function we will use the previous state of tasks represented as T Arrow spread the previous state of tasks represented as T we would like to clear this input element so we can set new task set it to be an empty string to reset it now we should be able to add a new task go to work and add and that has worked eat lunch now if somebody doesn't type in anything they can still add a task to prevent that within add task we'll wrap everything within an if statement take our new task use the trim method to remove any white space if after removing any white space if this is still strictly not equal to an empty string then add a new task so now when I try and add an empty task it doesn't do anything let's add some text go to work and that will work the add task function is now done let's work on delete task delete task provides us with an index an index of the element we would like to delete maybe I don't want to take a shower I'm only a little bit stinky So within delete task we will create a new array of updated tasks so we need to use the filter method take our array of tasks use the filter method with the filter method we're provided with an element and each index of that element during each iteration but we have a naming conflict we already have a parameter named index for the index we would like to delete we'll rename index within the filter method as I to differentiate it Arrow then a condition if the current index of I is strictly not equal to the index we would like to delete put it within our new array of updated tasks if these two indexes match we will filter it out we don't want it cuz we want to delete it then once we have our new array of updated tasks it should be missing that element now we're currently not using this element parameter even though it's provided to us a common convention that people do if a parameter should be ignored people will change this to an underscore that's a convention to say ignore this we will set our new tasks with our updated tasks and this is an array an array that's missing one element whichever one we filter out using the filter method now we should be able to delete an element I do not want to take a shower delete and I don't feel like going to work delete delete task is now done now we need to be able to move a task up or down using the directional buttons so let's work on task up first let's check to see if our index that's passed in as an argument is greater than zero if the element is already at the top we don't need to move it up further we need to create a new array of updated tasks equals spread the current tasks and create a new array of updated tasks to work with now we're going to use array destructuring to swap two elements within an array here's the formula we have the current index and the index minus one we will be swapping these with index minus one and the current index so take our updated tasks at the current index index and the updated tasks at index minus one set these equal to updated tasks at index minus one and updated tasks at the current index I do have a separate video on destructuring if you need a refresher this code will swap two elements within an array and then we will set our tasks using the setter function set tasks pass in our updated array and now we should be able to move an element up oops looks like we have two functions for move task up move task down all right let's see if this works and now we should be able to move these up with move task down we're going to copy everything with then move task up the condition is if our index is less than our task length property minus one if our element is already at the bottom we don't want to move down down any further take index + one and then update our tasks now we should be able to move tasks up and down and even add new tasks and delete tasks and of course to initially have no elements within this array we can delete all these so then we start with an empty array all right everybody so that is a somewhat extensive program to create a todo list application using react