hey yeah everybody it's your bro hope you're doing well and in this video i'm going to show you one way in which we can create an adjacency matrix in computer science so sit back relax and enjoy the show alright people so an adjacency matrix an adjacency matrix is a 2d array to store ones and zeros to represent edges between nodes there are different variations you could use booleans so you could say true or false depending if there's an edge or not and basically the number of rows and columns in an adjacency matrix is equal to the number of unique nodes the runtime complexity to check an edge is big o of one it's constant and the space complexity is big o of v squared so it uses up a lot of space now let's create our own adjacency matrix they're actually fairly simple so i'm going to create two classes graph and node so file new class i will name this graph finish file new class and i will name this class node so let's say that each node has some data maybe a single character char data and i'll create a constructor node we'll pass in some data when we create a node char data this dot data equals data within the graph class i'm going to declare a 2d array of integers so integer 2d array and i will name this matrix and within the graph constructor we will instantiate our matrix matrix equals new int now we need to declare a size of this matrix when we construct a graph object let's set up a parameter so int size size will be the amount of nodes that we have and the size of this 2d array will be size and size that's why the space complexity is big o of v squared it's the number of vertices squared if we have five nodes well then the size is going to be a total of 25 elements now let's declare a few methods public void add node and then we will pass in a node node node and add edge public void add edge then we need two indices a source and a destination and source int destination dst for short we'll need a method to check an edge public and this will return a boolean value boolean check edge and we'll need a source and destination for parameters and let's create a print method void print okay we'll fill in add a node a little bit later so let's fill in add edge we will pass in a source and a destination two indices so source will be the row destination will be the column so what we're gonna do is take our matrix at index of source and destination and set whatever value is in here which will be zero equal to one that means there's an edge between two nodes and that's really it within the check edge method we're going to check within our matrix if a given value is equal to one if it is return true if not return false so using an if statement let's check to see if matrix at index of source and destination is equal to one that means there's an edge if there is an edge let's return true else we will return false and that's it okay now before we actually print our graph let's actually create a graph so let's get rid of this graph graph equals new graph and we can add some nodes although this method doesn't do anything quite yet but it will in the future and we need to pass in a size uh so let's pass in five we'll create five nodes so to add a node type graph dot add node and this is a method that we created and i will pass in an anonymous node or you can use a named one so we have new node and then to create a node we need to pass in some data because that's what we decided on so let's pass in the letter a so this will be node a and we'll create a few more nodes b c d and e and we also can add edges between these nodes to represent adjacency so to add an edge type graph dot add edge so what we're doing in this example think of each node as having an index number to create an edge between two nodes we will pass in the index number of each node if i need an edge between nodes a and b well each of these has an index number within our matrix so this first node would have an index of 0 and the second node would have an index of one if i need an edge between these two i will add edge between zero and one and let's create a few others so how about b and c so c would have an index of two and c will have 2 edges based on the previous video so c will be connected to d so 2 to 3 as well as e so 2 and 4. d won't have any edges this is a directed graph in this example and e has two edges we have e to a that would be four two zero and e to c four and two now let's print our graph graph dot print and we need to fill in this method within the print method of the graph class we just have to print our 2d array and we can use for loops for that so this will be the outer for loop and i equals zero we will continue this as long as i is less than the length of our matrix matrix.length then increments i by 1. so this will iterate over all of the rows in our matrix and then we need a nested for loop so change i to j within the nested loop whatever index we're on we will take matrix at index of i dot length this time as the stopping condition and during each iteration of the inner for loop i will use a print statement and i will print matrix at indices of i and j then i'll add a space between each of these oh then when you exit the inner for loop let's print a new line okay and here's our adjacency matrix each row corresponds to a node as well as each column if there's adjacency between two nodes well then there will be a one at that row and column this next part really isn't necessary this is kind of the general idea of an adjacency matrix but let's add some headers to the rows and columns within the graph class at the top let's create an array list array list and the data type will be node and i will name this nodes when we construct a graph object let's instantiate our nodes arraylist nodes equals new array list and when we add a node we just take our nodes arraylist dot add node and within the print method let's make a few changes so preceding our nested for loops let's print the data found within each node so it serves as a header and i can use it for each loop for this for every node node in nodes then let's print the node's data then maybe i'll add a space oh then add a new line okay there we go each column has the data found within each node and let's also do the same thing with each of these rows i think it would look cool before the inner for loop let's do the same thing let's copy this line but this would be it nodes dot get index of i dot data and let's see how that looks so far okay not too bad but let's add a few spaces so system.out.print and i'll just print two spaces all right there's our adjacency matrix if you're working with more complex data let's say city names i would consider using printf statements instead because you can align things properly and if you do want to check an edge we did create a check edge method so within a print line statement let's invoke the graph dot check edge method and then pass in two indices so let's see if there's an edge between nodes a and b so a has an index of zero b has an index of one there is an edge between these two so this will return true there is an edge this time let's check to see if there's an edge between d and c so d has an index of zero one two three and c has an index of two and this returns false there is no edge all right people so that's an adjacency matrix it's an array to store ones and zeros to represent edges the number of rows and number of columns is equal to the number of unique nodes the runtime complexity to check an edge is big o of one all we need are two indices however the space complexity for an adjacency matrix is big o of v squared take the number of nodes you have and square it so if i have 5 nodes 5 squared is 25 we have 25 elements all right so that's an adjacency matrix if you would like a copy of this code i'll post this to the comment section down below and well yeah that's an adjacency matrix in computer science