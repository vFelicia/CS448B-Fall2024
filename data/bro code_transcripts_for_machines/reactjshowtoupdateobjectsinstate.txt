hey everybody so in today's video I'm going to show you how we can update the state of objects be sure that you're importing the UST State Hook from react so we'll Begin by creating a constant use AR to structuring our object will be a state variable of car then we need a Setter variable for this car set car equals the use State hook you can set the initial state with you state so what we're going to do in this lesson is create a JavaScript object we're going to create your favorite car with three properties a year a make who manufactured the car and a model so pick a carard that you like I like a 2024 Ford Mustang if you would like although not necessary you can put each of these properties on a new line for readability personally I find that easier to read so so car is going to be an object with these three properties but later on we're going to update these properties with a few text boxes within our return statement we will create a development to wrap everything I will create a paragraph with some text your favorite car is so we have that text currently We'll add our cars year followed by The Cars make then the cars model so for me my paragraph States your favorite car is a 2024 Ford Mustang after our paragraph element we're going to create three input elements one for year make and model so let's do that I will create an input element the type of this input element will be number for the year so we should should have some arrows on this input element to increment or decrement I will set the initial value to equal the year of our car car doe I'll add a break afterwards let's copy this input element paste it twice the second input element is going to have a type of text for a string the initial value will be the make of our car in my case Ford the third input element will have type text the value will be model I have a 2024 Ford Mustang when I interact with these input elements I would like to change the property of my object we'll need to use the onchange event handler the onchange event handler is going to accept a call back to some functions function handle year change there will be be one parameter an event the event object is going to be provided to us through the onchange event handler when we add that in in a moment let's copy this function we'll fill it in later then we will have a function to handle make change then handle model change we have our three functions to change the year the make and the model properties of our object with our input elements we will set the on change event handler equal to a call back a call back to handle year change so let's set the onchange of an Handler to the other two input elements onchange handle make change on change handle model change the last thing we got to do is finish filling in our functions we'll begin with handle year change if I want to change the state of my car object I will use the setter function that's provided to us with use State set car set a parentheses we will be using an updator function but there's something I want to explain first we're going to set our car to be a JavaScript object if I were to take the year and set it equal to 2025 this is what happens if I interact with this input element let's say I decrease this input element well the value changes to 2025 that worked but the make and the model of our car disappeared these properties no longer exist what we've ended up doing is replacing the initial object that has these three properties with a new object that has this one property of year we need some way to retain the make and model of our car the previous properties that we not updating that's why we're going to precede this property to be changed with the spread operator of our car when we update the state of our car we're going going to be creating a new object spread all of the current properties of our car and add a year after using the spread operator it's going to look like this we'll have a year make model and year again if you have an object with two properties with the same name you'll end up using the later one and disregarding the first JavaScript doesn't allow for duplicate Keys that's why we're going to be using the operator on our car object then updating the year that should allow us to retain the previous properties if I were to interact with the year we'll retain the previous properties they won't change currently the setter is only set to change the year to 20125 we're going to access the event object provided to us from the onchange event handler behind the scenes I will change the year to be access our event object access its Target access its value when I interact with this input element the year property is going to change accordingly but a better practice with use state would be to use an updater function which we learned about in the last video we don't want to modify the current state of car but rather make a reference to the previous state this allows for safe updates we're going to turn this object to be part of an arrow function so let's create our Arrow function we will take our car Arrow do this so with an AR function if you have a set of curly braces after the arrow function JavaScript thinks you're trying to write a multiline statement but that's not the case we're trying to create a JavaScript object what you could do is surround your set of curly braces with a set of parenthesis that will allow you to create an object within an arrow function since we're working with the previous state of car and not the current state we would want to name this to something else one common naming convention is to take the first letter of the state variable and use that to indicate that this is the previous state so c will be our parameter we will use the spread operator on the previous state of car represented as C and that should work this allows for safe updates especially if you're updating the state of your car more than one time within a function see my video on updator functions if you'd like to learn more about that all right then we have to handle make change we will use our setter set car we're going to to be replacing the initial object with a new object we will use the spread operator on our car access the make set it equal to access our event parameter that's provided to us access its Target access its value we'll upgrade the statement so that it's an updator function let's take our car Arrow do this then we will rename car assc to indicate that we're working with the previous state of car not the current state I can change my year and I can change the make and that should update we have one last function to work with handle model change again set car we're creating a JavaScript object use the spread operator on our car to spread the properties so we don't lose them update the model with our access our event access its Target access its value then we'll change this to be an updator function we have parameter of car Arrow do this since we're creating a JavaScript object within an arrow function we need to surround it with a set of parentheses and then rename car as C to indicate we're working with the previous state and that should work I will change the year the make and the model all right everybody so that is how we can update the state of an object using react