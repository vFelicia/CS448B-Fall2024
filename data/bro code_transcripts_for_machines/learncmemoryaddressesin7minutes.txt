all right everybody so let's talk about memory memory is an array of bytes within ram and a memory block is a single unit in bytes within memory they're used to hold some value and a memory address is the address of where a memory block is located within ram i like to think of memory as a street with a bunch of different houses and each house is a memory block which can hold some value kind of like they're storing a person and a memory address is the house address on that street where that memory block is located so this would be a street address like one two three fake street so when we declare variable let's say we have char a when we declare a variable we are setting some amount of memory blocks aside to store some value so the memory block that this variable is using up has some memory address and if i assign this variable a value let's say maybe x well then if i was to go into my computer's memory and look for this address i would find this character so imagine we're walking down the street and we are looking for somebody's address so we're going house to house and we find a matching address if i were to open their front door i should probably knock first at least then i will find the character x so that's kind of an analogy i like to use when thinking about memory so let's declare a couple other characters we have char b i'll give this a value of y and char c and i'll give this a character of z okay so let's find the size of each of these characters so i'm going to use a printf statement i'm going to display an integer and the size of each of these characters is within bytes so i'm going to use the size of operator and pass in one of my characters so i'm going to pass in a and i'll do the same thing with b and c so the size of each of these characters is one byte and i think i'm just going to add a new line here much better okay now we can actually access the address of each of these variables so each of these variables is using one block of memory a single block of memory is a byte so within a printf statement i would like to display an address so the format specifier is p and i will use the address of operator then the name of one of my variables so i'll display the address of variables a b and c and then display each on a new line so here are the memory addresses for these three variables these addresses are in hexadecimal these are the street addresses of each of our memory blocks on our fictional street hey uh so this is bro from the future just a quick crash course on hexadecimal values with standard decimal values they use the numbers 0 through 9 but with hexadecimal you use the numbers 0 through 9 as well as a through f so that gives you a total of 16 different values for each digit so that's why there's a mix of numbers and letters so each of these variables uses one memory block they use one byte of memory so beginning with variable a this has this street address but if we go down to the next memory block you can see that there is just one change f goes down to e and then with variable c this address goes down by one so f e d these are contiguous memory blocks they're all next to each other but now if we switch to a different data type like a short we haven't used these in a long time well shorts use two bytes of memory as we can see here so these hexadecimal addresses are now going down by two e d c b a so each of these variables are using two memory blocks we need an even larger house even more memory blocks and they use up two memory addresses and then if i change these two integers well they're going to use up even more memory so integers use four bytes memory and these are the street addresses of these three variables and doubles use double the size of an integer doubles use eight bytes of memory and these street addresses are decrementing by eight if this was a fictional street with houses well doubles use up eight bytes of memory so think of these like mansions they're using up a lot of space now what happens with an array i'm going to declare char a and declare an array this will be an array of characters to begin with so let's say character array b and i'll give this a size of one so i'm going to print the size of a and the size of b as well as their memory addresses our single character a uses one byte and this is the street address of this variable and our array b also uses up one byte and this is the street address of where this array begins if i set the size of this array to two well then my array is going to use two bytes and now it has a different address to accommodate the increased size of the array and if i change this to three it now uses three bytes of memory and it has a new address and if i change the data type of the array we'll have to take that into consideration so a short uses two bytes memory and we need three elements so that's a total of six two times three is six and if i change this to int and int uses four bytes so four times three is twelve and a double is eight so eight times three is twentyfour so yeah that's kind of the basics of memory so memory is an array of bytes within ram think of it like a street and a street contains houses each house is a memory block that can hold some value think of each value as a person living in that house and in order to find a person we have to know their address like a street address c refers to these variables by their street address but that's difficult for us to understand so we just refer to this memory address as a variable name because that's easier for humans to work with so yeah that's some basics of memory and c and in the next video we're going to discuss pointers so if you would like a copy of my notes here i'll post them to the comment section down below and well yeah that's the basics of memory in c