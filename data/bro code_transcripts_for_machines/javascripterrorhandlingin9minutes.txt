hey people so in today's video I'm going to explain error objects in JavaScript and how to handle them and error is an object that is created to represent a problem that occurs errors occur often usually when we accept user input or establish a connection it's an object that's created to represent a problem so for example I am going to console.log the word hello and then afterwards I'm going to display a message to indicate that we have reached the end of the program you have reached the end this runs as it should right let's say I misspell log as leg well we encounter an uncaught type error there's many different types of Errors console. leg is not a function type errors tend to happen when we try and access something within an object that doesn't exist one big issue that we run into is that we prematurely exit the program it never finishes executing we have not reached the end errors when they're uncaught interrupt the normal flow of our program another example of an error would be a reference error I will console.log X but X isn't defined we have an uncaught reference error X is not defined and again it interrupts our program we never reach the end errors can be generated for all sorts of issues such as network issues promise rejection which we still need to talk about and security errors when we ENC a problem when doing one of these things an error object will be generated and it interrupts our program there's a solution though and that is to handle these errors when they occur we can do that with try catch and finally blocks with the try block we can enclose any code that might potentially cause an error such as if we're trying to establish a connection to something if that connection fails an error can occur if we don't handle it it's going to interrupt our program so so all of this code I will place within a tri block we will try all of this code but we need a catch block too the catch block has one parameter it will catch an error object then let's console.log the error object to see what it is so let's run this we have a reference error X is not defined see now we are reaching the of the program the program is not being interrupted we have gracefully handled this error before it was uncaught but now it's caught for catching errors I wouldn't recommend using console.log rather I would use console. error this will highlight any errors that occur and still handle them it's good for debugging we can clearly see the error reference error X is not defined and again it doesn't interrupt our program we still reach the end now optionally you can add a finally block the finally block always executes regardless if an error comes up the finally block is usually used for closing files closing connections or releasing resources usually when you open something or establish a connection you need to close it afterwards you don't want to leave it open that's where the finally block comes in do any cleanup at the end whether or not an error occurs so just to test this I'm going to console.log this always executes I'm going to console.log X we have a reference error it is caught so it doesn't interrupt anything we're still executing the final block and we reach the end of our program if we don't run into any errors I'm going to console.log hello there are no errors that occur we don't end up catching anything this always executes the finally block and we we reach the end of our program so any code that is considered dangerous where it could cause an error you'll want to surround with a tri block and then catch them in the future if you ever open any files or establish a connection you'll want to finally block to close those connections but we haven't discussed that yet errors can also occur when accepting user input because we don't know what the user is going to type in in a worst case scenario a user could type in a malicious script in this next example I'm going to create a constant for a a dividend and a diviser const dividend equals window. prompt enter a dividend with division a dividend is the number that is being divided and we need a diviser a divisor is the number we're dividing by enter a divisor then I'm going to create a constant result result equals our dividend divided by our diviser console.log the result what is 1 / 2 0.5 now mathematically speaking we can't divide a number by zero if you attempt to do this in JavaScript I will divide 1 by 0o you end up with infinity we can intentionally cause errors then handle them with try catch and optionally finally blocks so this code is considered dangerous I'll place it within a tri block we need to catch any errors catch an error object if it occurs then console. error the error object so just to test this instead of console.log log I'll misspell log as leg I should probably add a message just to confirm that we have reached the end you have reached the end 1 /0 type error console. leg is not a function but we still reach the end our program isn't interrupted within a tri Block in certain situations we can intentionally cause an error I'm going to use an if statement if our divisor is equal to zero then I will throw a new error object we're calling the error Constructor to construct a new error object within the Constructor we have one argument we can pass in a message what is the error going to say you can't divide by zero okay let's try this enter dividend 1 enter diviser I'll typee in zero then press okay we have a caught error you can't divide by zero our program isn't interrupted we still reach the end let's change console. leg back to log cuz I forgot to do that what if somebody attempts to type in something that's not a number enter a dividend one enter a divisor I'll type in the word Pizza not a number you have reached the end I would like to throw a new error when somebody doesn't type in a number what I can do is that with our prompt I will typ cast it as a number if somebody enters in some nonnumeric characters for either the dividend or the diviser we will store within there not a number so let's check that with an if statement if is not a number if our dividend is not a number or our divisor is not a number let's throw a new error throw new error values must be a number I will divide one by the word Pizza error values must be a number we still reach the end of our program with error objects you can even create your own in certain situations and then you can handle them however you want all right everybody body so those are error objects and how to handle them and error is an object that is created to represent a problem that occurs they occur often with user input or establishing some sort of connection to handle them you can use try catch and optionally finally blocks which are mostly used for cleanup if there's any code that can cause an error place it within a tri block and catch any errors that happen and well everybody that is how to handle errors in JavaScript