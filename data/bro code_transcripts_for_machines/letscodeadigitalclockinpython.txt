all right everybody in today's video we're going to build a digital clock widget using Python's pt5 Library if you're new to this channel I have previously released a course on pt5 in that series we've downloaded the pi qt5 package it's found within the library folder of our virtual environment within our project folder if you don't have this package you will need to download it you can open up a terminal then type the following command pip install Pi qt5 enter so I already have it installed be sure that this package of Pi qt5 is within your site packages folder so let's begin at the top of our python file we will need the following Imports import CIS CIS means system this module provides variables used and maintained by the python interpreter we would also need widgets widgets are the building blocks of a guy application from the package of Pi qt5 we need to access the module of QT widgets import the following Q application Q widget this is a generic widget we'll turn our digital clock into its own widget and Q label to work with labels we will be using a layout manager more specifically QV box layout layout there's another import we'll need too from the package of Pi q25 access the module of QT core the QT core module it provides functionality not related to guy components this is where we'll get a timer to keep track of the time from this module we will import Q timer Q time and QT QT is for alignment we will create a class of digital clock instead of inheriting from the main window widget we will inherit from The Base Class of Q widget Q widget is a base class to create our own widgets our digital clock will be a widget we will need a Constructor so let's define that Define init pass and self if there are any arguments to send to the parent we will call the Constructor of the parent the super class super call the init method at the end of The Constructor what I like to do is call a method of initialize UI init UI this will be a separate method Define init UI there are no parameters besides self and for now I'll write pass it's within this method that we will be designing the layout of the digital clock within the Constructor that's where we will be constructing all of the different entities for the clock at the end of my python file I will add the following statement if Dunder name is equal to a string of Dunder main this statement will be true if we are running this program directly to create an application we will create an F object equals call The Constructor within the class Q application as an argument to the Constructor we will pass in the following argument access the module of CIS AR RG V which means arguments this would apply if we're running from command prompt or terminal but we won't be doing that in this video but it's nice just to set it up in case we do in the future now we are going to create a clock object clock equals we will call the Constructor of our digital clock class there are no arguments now the window doesn't appear That's because we have to use the show method of our clock take our clock call the show method now it's only going to appear for a brief second just momentarily I don't know if you saw that to ensure a clean and proper exit of our application we need to call the following method access our module of CIS call the exit method then pass in the following we will take our app object then call the following method e exe C underscore and then a set of parentheses it's a method it's the execute method it starts the main event Loop of the application it also handles events such as key presses Mouse clicks or other user interactions so then we should have a window that stays in place until we exit okay now we have the base functionality all set up we have a class of digital clock that inherits from the Q widget based class we're not going to be using main window in this video within the Constructor of my digital clock I will create a a label self. time label this will be a label that displays the time we will call the Constructor within the class Q label then be sure to pass in we will be adding this label directly to our widget of clock we will need a timer self. timer equals call The Constructor of Q timer then pass in self we are adding the timer to the clock now now with designing the layout of our clock I'll handle that within the initialized user interface method we're going to set a title for the window self. set window title method pass in a string that will be used for the title of the window let's say digital clock then our window should say digital clock let's set the geometry of the window self. set geometry the first two arguments are going to be for the placement of the window where will it appear within your screen so I'll pick something approximately in the middle for me but feel free to change these values then we need a width for the window let's say 300 and a height 100 for the height so my window should appear approximately in the middle of my screen the base width is 300 the base height is 100 now we're going to need a layout manager I will name this layout manager vbox for a vertical box vbox equals call The Constructor within the class QV box this will arrange all of our widgets vertically but we only have one widget a Time label so we will take our layout manager of vbox add widget that's a method we will pass in self. time label as an argument we're add adding our label to this layout manager of vbox then to set the layout we will take self that applies to our clock call the set layout method then pass in our layout manager of vbox So currently if I run this we don't see anything temporarily within our label I will add some text just as a placeholder so we can see what we're working with let's say 1200 so then we should see something at least although the font is kind of small we will be getting rid of this later we just want to be sure that we can see everything all right so after our layout I would like the label to be Center aligned horizontally here's how we can set that up we will take our label self. time label called the set alignment method access the class of qot access a line Center this should Center align our time now let's work on the font I can barely read it we will take our label self. time label set style sheet we can pass in multiple CSS like properties let's set the font size I'll set it to be 150 pixels now we can read it you could pick a font but we're going to change that at the end of this video we'll import a custom font but temporarily let's say font family aial you could change the color too so if I set the color to be green then the font color is going to be green but I would like a very specific shade of green you could always Google a Color Picker then pick a very specific color uh let's go with that something that's bright green you can copy the hex value RGB or hsl hsl means Hue saturation and lightness I'll use hsl values for the color we will type hsl add a set of parenthesis then paste those values but there is a degree symbol you do have to get rid of that now the font color is going to be bright green let's change the background color here's how we will take self that applies to our clock then call the set stylesheet method pass in a background color we will set the background color property to be black I think that looks pretty good but it doesn't quite do anything quite yet that's the next step let's create a method to update time no arguments beside self I will create a local variable of current time equals now to get the current time we can access the class of Q time Q time do call the method of current time we will need to convert it to a string we will method chain the two string method within the two string method we will Design the layout of the time so I would like hours first I will type 2 H's colon minutes that's 2 M's cin 2 s's to set the text of the label we will take self. time label call the set text method then pass in our current time so if I run this currently we still have our placeholder time let's update it with the current time we can get rid of our placeholder text of 12 we can delete it after we set the font let's call the method of update time self. update time now we should display the current time so me I'm recording this video at 744 in the morning if you would like to add AM or PM after your time here's how after our string format specifiers we will add capital A P A means anti meridium and P means post meridium so then we should display am or p.m. depending on when you're coding this currently the time for me is 745 a.m. to get the clock to update every second we need to connect our timer widget to a slot of update time we will take our timer self. timer this isn't the time label it's the timer to keep track of the time during a signal of time out we will connect the following slot of self. update time self. update time with our timer we need to trigger a timeout signal every 1,000 milliseconds every second that is to handle that we will take our timer self. timer call the start method then pass in 1,000 from 1,000 milliseconds so then when we run this program our clock should update every second and display the new current time as an added bonus if you would like to download a custom font here's how using Google or another search engine I would recommend looking up a font of your choosing so one font that I like is is DS digital what we need is a ttf file meaning true type font I'll just pick this first link so these fonts are pretty good so I'm going to download them I'll pick this specific font DS digigit and again the file extension is ttf so once you have your font move it to your project folder so for convenience we have that ttf file right next to our main python file okay to work with specific fonts we will need the following import from PI qt5 do QT GUI import Q font as well as Q font data base since we're going to use our own custom font we can delete that from the set stylesheet method of our time label so let's set the font right here we will assign a local variable a font ID equals Q font database Q font database is a class for managing and querying fonts available to the application to add a custom font we will call the following method within it add application font within the set of quotes we're going to pass in a file path this can be a relative file path or an absolute file path this ttf file is right next to my main python file I only need the file name my font file is named DS digit and get the file extension of ttf we will create a local variable of font family we will retrieve the name of the font family from this ID again we will access Q font database dot call the application font families method so this method returns a list of font names we will pass in our font ID but there's another step we're going to use the index of operator and get the index of zero this will retrieve the first element of the font family that's because we're working with the list we will need just the first element at index zero now we'll have a font family to work with now to set the font we will create a local variable of my font equals call the class call The Constructor within the class Q font pass in the following arguments our font family that's the first argument and then a font size let's say 150 to set the font we will take our time label self. time label called the set font method then pass in my font our custom font so then we should have our custom font that digital font that we've downloaded all right everybody so that is how to create a digital clock widget using pi qt5