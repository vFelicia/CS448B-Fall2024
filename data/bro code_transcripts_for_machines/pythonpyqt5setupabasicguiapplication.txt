all right everybody in today's video we're going to get started working with the pi qd5 graphical user interface also known as a guey GUI in this topic we'll be creating a basic window so let's get started all right the first step is that using pip we're going to install the pi qt5 package open up a terminal both py charm and VSS code have a builtin terminal that you can use we're going to use pip that is Python's package manager pip install Pi qt5 enter and this might just take a second once your download has finished you should have a package within your site packages folder named Pi qt5 we can work with it as long as we import it first we are going to import the module of CIS CIS meaning system this module provides access to variables used and maintained by the python interpreter then from the package of Pi qt5 do pay attention to the capitalization it's easy to mess that up use dot to access the module of QT widgets widgets are the building blocks of a pi qt5 application they begin with Q that helps distinguish them from widgets from other libraries they typically begin with Q from this module import the following widgets Q application and Q main window here's some boiler plate code that we have to write in order to get this application up and running first we will create a class of main window which will inherit from the class of Cain window by inheriting from the parent of Cain window we can customize our own Windows to display to the user we will need a Constructor let's define that Define Dunder inet there will be no arguments currently besides self and in case we have to pass any arguments to the parent of Cain window we will access the super class that's the parent and call the parents Constructor but currently we don't have any arguments to pass in we will return to this class momentarily let's define a function of main When We Begin this program we will call the function of main to begin the application for now all right pass if we are running this file directly let's add the following if statement if Dunder name is equal to a string of Dunder main if we are running this file directly call the main function in order for us to begin if that's true we will call the function of main within the main function we will create an app object app equals we will call the Constructor for Q application that class but there's one argument that we have to pass in we will access our module of CIS do AR RGV meaning arguments so by passing in this argument this allows Pi QT to process any command line arguments intended for it that's if we use command prompt or terminal we won't be doing that in the series but you may someday in the future it would be a good idea for us to Future proof our code otherwise you may see people pass in an empty list so we now have an app object next we will create a window object window equals call The Constructor for our class of main window currently we don't have any arguments to pass in we have an app object and a window object by calling their respective Constructors now if I run this program currently our window is not going to show the default behavior for a window is to hide it in order to to show our window we will access our window call the show method to show it it's only going to appear for a brief second when I run this script I don't know if you saw it but it pops up for a brief second we need to ensure that the window stays until we interact with it or close it after we show our window we will access our module of CIS called the exit method the exit method method ensures a clean exit of our program within our exit method we will pass in as an argument our app object our app object has a builtin method of excore and this is a method so we can call it this is the execute method there is an underscore character after exec for execute that distinguishes it from the execute method there is a separate version of this execute function that ends with an underscore our apps execute method it waits around for user input and handles events such as if we click buttons press keys or close the window now that we're calling this method when we run our program this window should stay in place we can maximize it minimize it or close it that's all the boiler plate code that we need for a basic window let's customize it within our Constructor for our main window What would would we like to add let's set the title for our window self. set window title method we will pass in a string think of a title for your program my cool first GUI gooey and now we have a new title my cool first guey graphical user interface when this window appears we can can set the geometry of where the window appears and the size of the window access self dot set geometry method there's four arguments X and Y for the X and Y coordinates a width of the window and a height of the window if I were to set X and Y to be both zero this window will appear in the top left corner of my screen I'll also need a width and a height let let's say I don't know 500 for each so now my window is now a square the width and the height are both the same they're both 500 the width is 500 pixels the height is 500 pixels with the first two arguments we set the initial placement of our window to be where X is z and y is zero that corresponds to the top left corner if I set the first argument to be 100 well then the window window is going to move to the right by 100 pixels there are ways to Center your window in the very center of your screen but that's a little too advanced for us right now for the time being I'll pick something roughly near the middle of my screen 700 pixels on the x axis and 300 on the Y AIS it should appear roughly in the middle but feel free to adjust these values based on the size of your screen we'll discuss layouts in the future now if you would like a a window icon we can change that you will need an image to work with So within my project folder I have a profile picture for my YouTube channel I'll set that to be the icon find an image that you like then add it to your project folder in order to work with icons we'll need to make the following import from PI qt5 that's the package access the module of QT GUI import the following Q icon now we can work with icons after we set the geometry for our window access this object of self this main window call the method of set window icon within this method we will call the Constructor of Q icon we'll pass in either a relative file path or an absolute file path my main python file is right next to my profile picture that image I only need the file name within a string so the name of my image it's going to be different for you depending on what the name of your image is my image is named profile uncore pick and this image is a JPEG jpg then when I run this program I'm using my image as an icon for this window window all right everybody that is how to create a window using pi qt5 and in the next topic we will be creating some labeles