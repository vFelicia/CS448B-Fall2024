all right everybody so today I got to talk about composition in python as we've discussed in the previous topic aggregation is a relationship where one object contains references to other independent objects they have a has a relationship composition on the other hand is when the composed object directly owns its components which cannot exist independently they have a owns a relationship aggregation has things composition owns things kind of like you're renting or you're owning something in this example we'll create three classes a class of engine a class of wheel and the composed object is going to be Class Car within our car class we will construct some engine and wheel objects we'll begin with our engine class we'll need a Constructor we'll Define that def fine in knit let's say that with an engine we need a horsepower what is the power of the engine self. horsepower attribute equals the horsepower that we receive with our class of wheel we need a Constructor Define init let's add a size attribute what is the size of the wheel self. size equal size okay now with our car object now within our car class we need a Constructor we will need a make model the horsepower of the engine and size we'll say wheel size remember that you can rename parameters to something different we will assign these attributes self. make equal make self. model equals model here's where composition comes in we will define an attribute of engine then call the engine Constructor we have one argument to pass in Horsepower we will pass in the horsepower that we receive to the engine Constructor then we have to set up our Wheels self. Wheels equals now to construct a single wheel object we would call the wheel Constructor then pass in the wheel size however cars have four wheels we don't want just one wheel so what we could do is write a list comprehension for every wheel in range four to iterate four times let's call the wheel constru structor and pass in our wheel size this list comprehension will create four wheel objects for us the reason that this is considered composition we're creating engine and wheel objects inside of this class car our class car owns an engine and owns four wheels we're not creating these objects outside of the car class let's create a car object car equals car we need a make model horsepower for the engine and wheel size so for my car let's say Ford Mustang for the horsepower I'll make up something 500 for the wheel size 18 in now just to make this more explicit I'm going to use keyword arguments but you don't have to so make equals Ford Model equals Mustang horsepower equal 500 wheel size equals 18 let's create a method to display our car I would like the details Define display car no parameters let's return an F string let's begin with the making model those will be easy display self. make and self model let's take our car object use the display car method then I got to print it I forgot because we're returning a string we're not printing it directly we have a Ford Mustang okay let's display the horsepower there's one additional step we are accessing self this car that we're creating but now we need the engine let's access the engine attribute and now with our engine our engine has an attribute of horsepower we'll use the attribute accessor that dot horsepower 500 I'll add HP meaning horsepower all right now for the wheels I'll add another placeholder access self access our Wheels now our Wheels it's a list I don't need all four wheels I just need one if I was to take my list then access the size this is what it'll give me list object has no attribute size so we need to access one of the elements of our list of Wheels let's just say the first wheels at index zero then give me the size 18 and that's going to be inches all right then let's create a second car object before we finish we have car 1 Car 2 equals car we need a make model horsepower for the engine and wheel size for the wheels I will pick a Chevrolet Corvette and I'm just going to make up some numbers the horsepower is 670 and the wheel size is 19 let's display Car 2 Car 2 called the display car method we have a Chevy Corvette with horsepower of 670 the wheel size is 19 in so our car class it owns some objects it owns an engine and it owns four wheels that's why composition is different from aggregation if I were to delete these two cars this engine and the four wheels would stop existing whereas in our library example in the last video If I Was to delete the library object the books would still exist all right everybody so that's composition it's where a composed object our car directly owns its components our car owns an engine and it owns four wheels we're creating them within the class and well everybody that's composition in Python