What's up everybody, I'm Brendan from Codecademy. I'm a fullstack developer based in Brooklyn, New York and today not only am I going to be answering this question "What is JavaScript?" I'm also going to be painting you a picture of how JavaScript fits into the world of programming. This will include a brief history and I'll touch on the two separate dichotomies of JavaScript in its current form and explain what both of these things mean Javascript for the client and Javascript for the server. I'm also going to be answering what you can do with JavaScript, as well as showing you a way to look up if a tech company is currently using JavaScript or not. So let's get into it. The first thing I want to cover is how JavaScript came to be. So I'm going to invite you guys on a trip back to the glorious 1990s, specifically 1991. This was the year when the World Wide Web finally came online to the public. The World Wide Web being a directory or web of addresses corresponding to specific files. Going to a URL meant you would see those files hosted on that website, meaning as long as you had A) an internet connection and B) the proper address or URL for the files, you could access them instantaneously. But these websites were way simpler than they are now. They were extremely static, they used plain HTML to display text to the user. At this time, the typical average Joe was not surfing the web because most didn't have a home computer but also, there just weren't that many websites. In fact, the web was only really used across the academic world for sharing and publishing academic research and journals because universities could afford to have these clunky computers on campus and could give students the proper training to use the computers and the web. At this time, a few group of smartypants for trying to figure out the best, most userfriendly vehicle for delivering the web to the everyday user. A window to the web a web browser. In fact, it was not until the mid90s that these engineers landed on a rough framework for web browser and the technologies that would power it. But once they figured it out, it was off to the races. Who could build the best web browser for the world. A little concept called Netscape appeared to be the frontrunner. It was easy to use, free for noncommercial use, and after a few versions, incorporated a new toy language, JavaScript, which added some interactivity to the otherwise dull websites. Think carousel effect for images Google, guessing your search as you type, etcetera. However, Netscape was eventually defeated by the household name Microsoft's Internet Explorer, which Microsoft released for free to all users running the Windows operating system and which also replicated JavaScript. I, actually, stumbled upon an awesome little documentary of the first browser war. If you're interested in learning more about the history, I've linked to it in the description below. When talking about JavaScript I should reiterate that javascript in its most common form, a clientside script that runs with an HTML like this, does not exist on its own, but when embedded in HTML, just like CSS, it makes up the three core technologies of a web page. The HTML being the skeleton of a site, CSS being the decoration, Javascript is really the real workhorse of websites. It tells the website what to do. When talking about the three core pillars of a website, I like to use the metaphor of a skyscraper. HTML would be the structure of the building. It has X amount of floors a lobby, businesses is situated upstairs. Now CSS would be the aesthetic the lobby has marble floors and maybe a water fountain, the bathroom has a certain color wallpaper. Javascript would be the level of interaction. This building needs electricity, it needs plumbing, it needs a working elevator. It needs a security guard making sure you are who you say you are and who allows you to take the elevator upstairs. It's, basically, what makes sure the building and the processes inside the building stay up and running. Now at the start, Javascript was written to run purely in the web browser, meaning it runs on the user's local computer. This is referred to as clientside. You couldn't take the JavaScript programming language and run it outside the environment of a web browser, meaning you needed to open up Google Chrome to run your JavaScript code. But this isn't the case anymore, and it's honestly the elephant in the room I need to address when talking about building out applications on the web. Javascript is no longer restricted to the clientside. Well what is the client side? Before I can answer that, let me set the scene for how web applications work. There's two sides of the app where code can run. There's the code that runs in the web browser on your computer when you visit a site, this is the client side. This comes in the form of processing data, like a list of shows available on Netflix, then using Javascript under the hood of browser, then rendering HTML elements to display to the enduser, like the interactive graphics and descriptions of Netflix shows on the website. Now on the flip side, there's the code that is running on another computer, which you do not directly interact with. This computer does more of the heavy lifting in terms of data processing and dealing with your requests once you ask for information via the clientside. It's known as the serverside. A few realworld examples here. Let's first talk about clientside JavaScript. So let's say you've got Netflix open on your laptop, you click play on "It's Always Sunny". The clientside JavaScript code translates your interactions into a request for some files, the "Always Sunny" episode. In that instant, it shoots off requests to the server side of the website. The serverside processes that request, finds the information you want and sends it back to your computer and it is displayed by the clientside in your web browser. In the beginning, JavaScript was reserved only for the clientside part, meaning, it only ran inside the web browser on a user's computer. However, in 2009 a genius by the name of Ryan Dahl took the JavaScript engine from the web browser and wrapped it in a C++ engine. Now, JavaScript could be run outside the web browser he called it Node. He was not the first one to do this but his implementation became the most popular and this has now opened the door to engineers being able to use JavaScript for the serverside part of an application. One thing to note, JavaScript is not Java. It has no relationship to Java other than when they were being developed, the creators of JavaScript were hoping to ride the wave of hype from Java, hoping for widespread adoption. The ploy worked but it has led many new coders to think they're related. The main difference between the two is that JavaScript was limited to webbased programming. At the time of its creation, you needed a special app a web browser to run JavaScript code. Whereas for Java, you didn't need to open up Google Chrome to use a Java app. A Java app could be a standalone app with no need for Google Chrome however that's not the case anymore. That being said, JavaScript is missing some fundamental technologies that make other languages, like Java, more desirable for larger scale dataheavy software. What can you do with JavaScript? At a higher level, you can handle anything from simple to complex animations on the clientside, mathematical and logical operations on both sides, and you can even handle security and authentication on the serverside and the clientside with JavaScript, meaning when you log on to facebook.com, you enter your email and your password, those need to match for you to gain access and log into your account on Facebook. However, this isn't all you can do with it, and in a few slides, I'm going to share some awesome plugins to the language called libraries, for doing even more with JavaScript. With the addition of serverside JavaScript, plus these powerful libraries, you can now build fullscale web applications from the user interface to the server just by using JavaScript. Some examples of companies that use JavaScript for both their userfacing frontend application and their serverfacing backend are Netflix, Uber, and Medium. So now that we've covered how JavaScript fits into the world of programming, you might be wondering, is it still useful to learn? Well according to github.com, which is the cloudbased storage system for code, it was the most popular language in 2018 in terms of repositories created. Repository is just another word for a project. You might hear from other more senior programmers that JavaScript is a super basic programming language, and while that might have been true at its start, thanks to the help of millions of JavaScript developers contributing to opensource projects and libraries, JavaScript's capabilities have absolutely exploded. Libraries like React, a super slick UI library built by some Facebook engineers and which powers Facebook's user interface. For you data freaks out there, there's D3.js, which is a very powerful data visualization library that allows you to tell the story behind Big Data. And before we wrap up here, I'm gonna show you guys a cool site stackshare.io, it's a search engine for looking up tech companies and what technologies they're currently using in their tech stack. A tech stack refers to the variety of technologies a company uses to power their products. Alright, so I switched over here to my web browser and I'm on stackshare.io and I'm just gonna pick a company here to show you who's using JavaScript, so let's just look at Uber. One of the biggest technology companies around, totally revolutionized the game when it comes to, you know, hailing taxis and ride sharing. And let's see if they're using JavaScript. All right, yeah, okay, so they're using node.js, which is a JavaScript framework for backend or serverside software. They're also using React to power their user interface, and what else. Oh, jQuery, another JavaScript library and backbone.js Alright, let's search one more here, oops, Alright, Codecademy, what are you using? Okay, so not only are they using just plain old vanilla JavaScript, they're also using that React UI library. So my point here is that it's dang near impossible to not touch JavaScript when talking about modernday technology stacks, and I think if you're considering dipping your toes into the world of programming, JavaScript is a great way to start. Alrighty, so that's it for this video. Thanks for sticking with me this long. We're actually experimenting with different types of videos for this channel, please tell us what you think with a comment below. If this type of material content is popular with lots of views, we'll make more of it, obviously. So if you like it and want more, don't forget to like, comment, subscribe, and share. Thanks for watching and as ever, if you want to learn more, head over to Codecademy. Bye!