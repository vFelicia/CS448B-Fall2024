How's it going everybody, this is Ben Cowden with Codecademy, and in this video, I'll be walking you through the basics of setting yourself up with Redux DevTools. By providing you with the tools you need to track and debug your application state changes, Redux DevTools is critical in helping you streamline your development workflow. We'll start by simply opening Chrome and installing the extension. Next, we'll generate a simple React Redux app and open it in a code editor. In my case, I'm going to be using VSCode. Then, we'll take a look at how to open Redux DevTools in the browser. And finally, we'll use the generated React Redux app to explore the various features of Redux DevTools. All right, so let's first open up a Chrome tab, and in the search bar, we're going to type Redux DevTools. Likely, it'll be the first tab to show up, and if your page looks like this, you are in the right place. So all we need to do is press Add to Chrome, Add Extension, and it'll let you know that it's been added, so if we click up in our extensions, which is this little puzzle piece button, we can see that it is now added, and at the moment it's grayed out and that is because we are not on a page that is using Redux but if we head over to Codecademy's homepage and we take another look, then we see that it is colorful, so that means that this page is using redux, and therefore, redux dev tools is available to us. All right, so now that we've installed the extension, let's generate a React Redux app. So we're going to open up a terminal, and we can generate the app by typing the following command, npx create react app, and give it a name, I'm going to call it Myapp, and we're going to add this template flag followed by Redux. And that's going to create a React app with Redux involved. in addition, I'm going to add this use npm flag, and this is because if you have Yarn installed, then this command is going to try to use Yarn by default but sometimes that throws an error when you're using this Redux template, so if you have Yarn installed, I'd recommend using this use npm flag, if not, you don't have to worry about it. So let's run this command and this may take a couple minutes so I'm going to fast forward. Once that's finished up, switch into the apps directory, and open it up in the code editor of your choice, I'm going to use VSCode, and we're going to take a look at how the store is being configured, which we can find in source app store dot js. So the thing to note here is that the Create React app Redux template we're using uses Redux toolkit instead of just Redux. Unlike with Redux, Redux toolkit's configure store method automatically configures the dev tools for you. So because of that, we don't have to do any further configuration here. Since we don't need to do any further configuration, we can go back to our terminal, and make sure that we're in the directory of our app, and then we can run npm start to open it up in the browser. All right, so once this opens up, there are a couple options for opening up the Redux DevTools. One option is to just go to the extension click on it, that's going to open up this window. The main problem with this is if you click off, then that disappears, and the only way to get it back is to go back and click the extension, again. So that's obviously less than ideal. The better way is you can rightclick and inspect the page to open up the Chrome DevTools, and if you go up to these tabs, click the arrows, then all the way at the bottom is redux, and here are the Redux tools. So you'll see all these tabs, and if you click and drag to expand this pane, then you'll notice that these tabs down at the bottom will show the names of what they are. So when the pane is small, you can't see them but if you click and drag, if you're confused about what these might be, you can just drag this and it'll let you know. The first tab we're going to take a look at is this state tab. so if we go to the dev tools we can find the state tab between action and diff, and we're going to have three different views we can look at. Tree is going to be a summary of the slices of state, and by default, there's just going to be this counter slice of state with one property value and it's going to be set to zero by default. For demonstration purposes, I've added this text box slice of state with the property text empty string, and that's just going to involve updating this input field. And whatever we type in this box down here is going to update this text property. The second view we have is Chart, and this is going to be a graphical representation of the state. So if we hover over these items, we can see some information. State, two children counter and text box. Counter one child value, same with text box has one children, and that is text. And we can see what the values are if we hover over these guys. So this is just a little graphical representation. And finally, the third view is this raw view, and this is going to show the state in plain text written as a JavaScript object. So all three of these views are going to give us the same information, we're just going to have a different way of looking at it. Now, let's take a look at the action dispatch and diff tabs. So the action tab allows you to inspect the individual action type and any data it's carrying along to the reducers. By default, when the page first loads, you'll see this init action type, and that is just pretty much the default state. We'll see that value is 0 and text is just an empty string. But let's dispatch an action from the app we generated and see what happens. So let's go into our browser, let's leave this at 2 for now, and let's click Add Amount. Now, taking a look back at this action field over here, we'll see that we dispatched an action with type counter slash incrementByAmount, and a payload of two. Just as we did with the state tab, we have these three views we can look at. We have the tree summary, the chart graphical representation, and the raw code. If we click on state, we'll see that the value now is 2, whereas it was 0 before, and that's where diff comes in. To see exactly how the action changed the state. That's what diff is for. So before we dispatched this counter slash incrementByAmount action, the state was zero. After we did, the state changed to two. Now, let's say I go back into the files, open up app dot js, comment out this counter component, and save the file. Looking back in the browser, there is no longer a button to press to dispatch that incrementByAmount action. But fortunately, there's still another way to do it. Instead, we can click on this little mini keyboardlooking icon, and in this field, we can manually enter an action type and any data we want to send along with it. So let's, for the type, use the same counter incrementByAmount as before, and this time, let's give it a payload of 5. Now if we hit the dispatch button, we can click around and see that this has done the exact same thing as before, and this time, we see that the state has changed from 2 to 7. So now, let's take a look at this inspector and this slider field. So as you may have noticed by now, once you dispatch an action, it shows up in this area over here, and this is the inspector section. It's used to log and display the realtime actions performed by the user. So if we click on different actions, we can see the specifics of each, and if we hover over an action, we can see this jump and the skip button, and these have to do with the slider, which is this section down here. The slider provides a way to chronologically step through the action history, comes with this play button, comes with these onestep action arrows, and it comes through a playthrough speed. So if I press the play button here now, it's just going to start at the beginning and work its way down the action history until it gets to the end. But if I click jump, then it's going to jump right to that one and start from there. It's not going to start at the beginning, it's going to start on whatever action I jump to, and now if I press skip instead, it's once again, going to start at the top but it's just going to skip that action entirely. And finally, you can filter out which actions appear in this section by typing it in this filter field right up here. Finally, we have these persist, trace, and test tabs. So if I dispatch a number of actions, we can see them show up in our in our inspector field over here but if I refresh the browser, then that action history disappears. So that's where this persist tack button comes in, and again, if we click and drag on this, we can see the name of this. So if we dispatch number of actions now, and we click persist, and then we refresh the browser, we don't lose our action history. So that can be super helpful if we're constantly saving our files and we're refreshing the browser but we want to keep this history. So next, we got this trace tab, and this is used to provide Stack trace information on an action creator and can be super helpful in debugging any issues and resolving them. So when debugging you might want to know why or how an action is being dispatched with the call stack, you can see exactly where in your code that action was dispatched. Finally, we have this test tab. And this test tab creates a test template in some preprovided testing frameworks, such as Jest, you got Mocha, Tape, Ava, and it's going to take your previous state and provide a written test on what the current state should be given the action that was dispatched. So if we take a look at this, if we click on this text box slash update text action, then we can take a look at the test and see that our previous state was counter with the value of 3, and text box with the text of tex, and we dispatched this text box update text action the payload of text, and so given this previous state and this action, we should expect the state to be counter value 3 text box text equal text. And this, we can just copy and paste into our test suite in our code. So this doesn't run the test for us but it does provide this template that we can just copy and paste. All said and done, Redux DevTools is an extremely useful extension that can and should be used to power up your redux development workflow. Thanks for watching and I'll see you next time!