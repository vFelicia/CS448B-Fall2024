one pretty good hope everyone is doing well so if this is your first time watching a cs101 stream um let me first make sure that we are indeed live on youtube um let's see make sure that we're live in chat right now if you can see us okay cool i can see us all right um good so uh yes if this is your first time watching a cs101 live stream we are live right now on a couple of different platforms we're on youtube twitch twitter and facebook um jamie and i are going to primarily be looking at the uh youtube chat and so if you're on one of those other platforms you can come join us in youtube to interact with us people are in our youtube chat right now chatting away so we love to see interaction here um yeah if you're in chat right now say hello maybe where you're from maybe what python experience you have um yeah uh also we always post these videos after the fact on our youtube channel so there's a strong possibility that you're watching this video on youtube in which case you can go back and watch the other videos from this series this is the third one um or join us live on tuesdays at 1pm eastern time which is when we stream these live so jamie do you want to explain the lesson that we're going through today yeah sounds good so today we're going to go through control throat control flow it's linked in the description below the youtube video if you need to find the link i'll share my screen to show where we're going to be going through um so if you go to this cs 101 live live stream series which is linked you go down to control control flow and we're going to go through this module we're going to go through like most of these two lessons and hopefully try to get to these control flow code challenges which i think will be a lot of fun so yeah these two lessons for a little bit of background on what these two lessons are the first one is talking about control flow and this idea of conditionals if else kind of maybe some of these terms that you might have heard in programming this first lesson talks about um these ideas from a very high level conceptual um point where we're not even going to look at code we're just going to dive into like what does it mean to have control flow in our program or what does it mean to write a conditional and then after we get a sense of um what control flow is we'll look at it in python how do you actually write the python code that can do this thing that we're talking about and again that's kind of the whole point of this cs101 series which is a series really the core ideas of this series are what are the fundamental topics in computer science that can be applied to any language so even though we're going to do this in python later really the important thing is just like understanding the structures and patterns and kind of concepts behind in this case control flow yeah so yeah exactly what alex said so the first so the first lesson we're just going to go through a couple of the exercises and they're kind of just going to give you the conceptual um knowledge as alex just went over there's a couple fun little applets that we'll go through and we're just going to give you the conceptual breakdown before we dive into python code and see how that works in the learning environment all right so control flow like um it's important because it helps computers make decisions so like a couple like real world examples so like let's say you're on a like web browser um whenever you like open a browser it like opens the browser loads the text and loads the images um like let's say you know let's say you're like on instagram or something and you try to like open up someone's profile and it's like private um it might not show you like any other images or posts so you can kind of think that in like a control flow way where you know instagram like is being told that this person's page is private so don't show these images just anyone who like doesn't necessarily follow that person um or like electronic music like um actually that wouldn't be really controllable um so let's say like you're shopping and it like collects your shipping and contact information um it might check to make sure your credit card is correct or that your shipping address is correct to make sure that's a valid address and if it's not a valid address it's going to throw an error so this is really important right because if you're buying an item you don't want it to be shipped to somewhere that doesn't exist or you know obviously the company wouldn't want to like you know lose money if like your credit card wasn't a real credit card and doesn't actually get the money um so like these are kind of a set of instructions and this is what makes up control flow um so as programmers we can basically structure our code using control flow and allow our code to do certain different things based on you know different conditions that are in control flow yeah i i think one of the things to point out here is that in all of these different situations there's kind of a question and then also a result so again going back to that instagram example the question that the that exists is you know are you logged into your account and if the answer is yes then the result is like okay let's you're gonna be able to see all of your like personal information associated with your account if the answer is no then you're gonna see like a lock page or something right for the shipping example the question is did they enter in the address properly or did they enter in their credit card number properly if the answer is yes they can proceed with their payment if the answer is no something else will happen maybe it'll go back a screen or you know maybe a red popup will come up or something like that but yeah the the the kind of important part is that there's a question and then a response which is something that we'll see in these these demos yeah so this demo will kind of do like just opening a like kind of like walk through the steps of like opening a basic web browser so let's say i click start here it will just kind of like show the like skeleton of a browser then i'll actually open the actual thing load the text and then load the images and then boom your control flow is complete so this kind of just gives like the basic like kind of how control flow can set up like a stepbystep process that is important in programs um and then if we go to the next exercise this is where we'll kind of talk about conditionals where as alex was kind of going over um basically like there's kind of a question or a like a program it's called a condition that is either you know that is like trying to be like answered to see if like a specific task should be done so as i went over in like the last exercise some like one example of a you know possible conditional is if a user's profile is private hide their post otherwise make them visible so here the question basically being asked is is the user's profile private and then if it is you'd want to hide their posts if it isn't then you want to make them visible so that's kind of like an example of like a condition and the task that would be done is basically either hide their posts or make them visible depending on whether that condition is true or not so this is kind of a neat organizat organized way for computers to run instructions but they can't just like make these on their own right like programmers have to like give them these sets of instructions in order for them to work so you can basically set up these instructions in python in most programming languages in this you know kind of pseudo code kind of way where it's just if x do instruction set one otherwise do instruction set two and later we'll see how we actually write this in python so this as i said earlier is called a conditional and basically a computer will just depend on many different conditions in order to run tasks um yeah so how about we go through this example that they show so this is kind of going over like basically like let's say if you're on like some sort of social media and you know you're trying to click on someone's profile but it might be public or private so if i click start and then i click is the post public or private so let's see so this is public so show so it'll actually show the post text and end but let's say i click here and instead i do a private profile so i'd click start and here's the question is this post public or private if i click here it's private so then it's going to hide the hide the person's test uh text and then it will tell us that the post is hidden don't actually be able to see it so like this is just kind of an example of like you know one of many different type of conditions that we could see on computer or pretty much anywhere in this example we just have uh two branches right the question the answer to the question can be either yes or no uh in programming or in most programming languages can you do more branches than that can you have you know yes no or maybe or can you have you know kind of multiple branches yeah so you can have like a lot of so like this is only like an example of like two different options right like public or private but you might have like many other examples where there's a lot more different potential answers to like a certain question or potential a lot of different branches so i know alex do you have an example on top of your head um let's see so kind of a classic example is um like assigning a grade to students based on their number score so if they have if they're between a 90 and a 100 you have an a or you know there's like a minus that kind of stuff in there they're between 80 and 90 they're in the b range if they're between uh 70 and 80 they're in the c range right and so it's the same question right it's what is your grade but there are many possible different answers right and so you could see that kind of thing branching in many different directions yeah and if you're thinking about that in like a diagram so instead of just having like two arrows were pointed to you know a and b it would be like one to a one to b one to c one to d one to f um you know so basically you can have diagrams with like many different possible branches um but they basically work the same way as this so it's the same idea yeah the other the other question i want to ask here was is it possible to have more branches depending on which way you go right so if i'm public could we ask another question that uh it only gets asked if you're public right could there be another essentially diamond there that branches again yeah so you could also have like me you can also have like more depth so instead of just asking one question you can ask like at each step there's basically like another condition it checks like another conduct another question so like let's say i don't know i can't think of an example well i guess for an example for instagram like ask if it's public and shows a person test uh text um let's say you want to like like or not like the post you can have like another question coming off that is like do you like the post then it might show like you know a red heart or like some indication that you've liked it versus if you don't it won't show that indication um so you can have like basically you can have like a wider diagram that has a lot more branches but you can also have a lot more depth where there's a lot more conditions and like questions being asked and we're going to go over a few examples in the next lesson as well as um and hopefully we get to the challenge problems where we'll see that you can have like a lot of different type of conditions and that they branch off of each other yeah and and just to introduce some like you know kind of fancy terminology that idea of having a longer tree of more questions that could be the concept of like nesting conditionals right so is this post public or private if the answer is yes then i'm going to ask another another question so that it's like that second question exists only if the first question is true so it's kind of nested inside the other one which is something that we'll see um again in our python programming awesome um so i think that is what i'll show from the first lesson so we can go to the next lesson also if anyone is just joining and looking for a link the link to this is in the description and then now i'm going to go for control flow to the next lesson i'll open a new tab so i'll have to go back okay so we just went over kind of a conceptual idea so now in this lesson we'll actually like dive into coding and see how it works in actual python so i'll quickly go through this introduction because it's kind of a bit of review from the last lesson but this kind of this actually is pretty because it gives you more of an idea of like kind of what like a deeper maybe this one actually isn't wider but a deeper um tree might look like if you had more conditions so this kind of just goes through you know a morning routine so you wake up in the morning first you might ask yourself is it a weekday if it is then you got to get up at 6 30. um that's very early i don't get that early weekdays um okay and then but like let's say it's not a weekday then you get up at 8 30 again way earlier than i would wake up but whoever made this must be an early bird um and then so let's say okay let's say today was a weekday so hypothetically we got up at 6 30. um then we check is it raining if it's raining we wear a raincoat if it's not raining you don't wear a raincoat so for me it's not raining where i am i don't know if anyone else is in a place where it's raining but i am not wearing a raincoat and let's just say i woke up at 6 30. um on the other hand let's say a saturday or something we get up at 8 30 and then do i need to go outside um if it's no you stay in your pjs if it's yes you get dressed i often just stay in my pjs sometimes even when i go outside so i might make a different diagram but yeah you get the idea um so let's see yeah one of the things that we kind of just talked about this but one of the things i think is important here is that the questions are different depending on the answers and so again the flow is different where if it is a weekday then maybe the first thing that we want to ask is it's raining and then you know our decision depends off of that if it's not a weekday then we ask a different question and you might even imagine uh do i need to go outside if the answer is yes then we might want to ask the question is it raining um do i need to write code or do i not need to rant out so it's like right your the entire way that your program will go will be dependent on the answer to these questions these yes or no questions yeah awesome and you can even keep building off of that so as alex just said like you're getting dressed depending on how it is outside you might put on different things depending if it's sunny raining it's cold out all that stuff um okay so now we're going to move on too so we've kind of gone over like these questions or conditions that we've been asked um something that we haven't yet explicitly said is the answer to these questions are what we call boolean expressions so boolean expressions um allow us to build out our control flow in our program by basically saying if a statement is either true or if it's false um so basically like in the examples we've gone over so like let's say when you like open someone's like instagram page or something the question that's being asked obviously is like is this page private and if it is private then if the answer that question is true um then it'll like not show the person's like text or something versus if it's false like if the person's page isn't private it'll actually show like the person's text photo whatever is um whatever you're trying to look at um okay so to explicitly go over bullying expressions um they're like you can have like many different type of statements but only certain statements are booleans obviously so for example the statement today is a weekday this expression can kind of be written as either true or false because it's either going to be a weekday or it's not going to be a weekday so we would call this a boolean expression and right now we'd say this is true because it is a weekday um but if it was saturday or sunday or something this would be this would evaluate to false um but let's say we have like a different type of phrase so friday is the best day of the week um since this is kind of an opinion this isn't a bullying expression because you can't really say it as like true or false because someone else might disagree with you and say like wednesday is the best day of the week or saturday or sunday or monday or something whatever day of the week they choose um yeah you could almost i might have meant that to be like my favorite or i think the best day of the week is friday that might be a boolean expression right it's a it's like a thing that's either true or false for a given person yeah so if you were to so if you were to say jamie's favorite day of the week is friday specifically pointing at me or alex's favorite day of the week is friday then you can say that is a bullying expression because it's specifically tied to that person and it may not may or may not be true yeah you can almost think of these as the like questions that we were talking about before where the question is almost does sunday start with the letter c the answer is no or does friday or does jamie think friday is the best day of the week the answer is either yes or no right so these boolean expressions are really kind of like the questions that we are asking that i have yes or no answers all right um so how about i hope i didn't scroll down and show the answer this but how about if anyone wants to answer in the chat sunday starts with the letter c does anyone think that is a boolean or not a boolean expression you can answer in the chat um and we'll give you something and i know that our our video is like uh we might have to wait a couple of seconds to yeah um while we're waiting jamie one of the things that i wanted to say was earlier when we were discussing multiple paths right and i gave the example of the letter grade so that actually isn't a great representation of a boolean expression right because there are that would be something with multiple answers and so you could picture that that uh multianswer question of like is your you know what is your grade it's either an a b c or d you could picture that as a series of boolean expressions is is my grade an a if the answer is yes then you know what your grade is if the answer is no then you could ask another boolean of is my grade a b the answer is either yes or no is my is my grade a c yes or no so like you know a multi a question that has multiple answers like that could really be broken into like multiple ruling expressions yeah um i think we had a couple answers in the chat and everyone is right it is a boolean um so good job everyone with that um so yeah so sunday starts with the letter c so this is a boolean and also it would obviously evaluate to false um because sunday does not start with c um so and these so in this exercise um this is kind of fun it's like a little quiz so i'll just do like the first couple statements and i'll move on to the next part um so it gives a couple different statements and we have to answer whether or not we think like what oh so we answer yes oh we answer yes if it is a boolean expression and we answer no if it's not a boolean expression so this isn't so they give an example statement my dog is the cutest dog in the world since his opinion is not a boolean so you'd set it to no so let's go with statement one dogs are mammals um alex what do you think do you think this would be yes or do you think this mean now that seems uh so well yes that does seem like a boolean expression and furthermore the answer seems to be yes yeah so so the answer yes or no is to whether or not it's a balloon expression the bullying expression itself would be true because it is a boolean expression and it would evaluate to false um what about statement two my dog is named pavel pavel i don't know yeah uh paul i don't know uh yeah so to me that seems like a boolean expression right that's a statement that can either be yes or no so it is a boolean expression that for me would evaluate to false my dog's name isn't pawpaw yeah same my dog's name is also pablo um okay so let's also go to here i'll just do one more so dogs make the best pets oh this one might hurt me um so statement three this one's a little bit trickier do we think i'll let people answer in the chat do we think that this would be a boolean or not a boolean and i see in the uh uh anuj in the chat is asking can anyone tell me what a boolean is do we want to give like another quick definition of what a boolean is uh just for folks in the chat yeah so uh a boolean expression in general is something that can be evaluated it's like a fact right it's something that um is either true or false and so jamie what do you think for dogs make the best pets is this a boolean statement so this isn't a bullying statement because it's an opinion so it would differ for different people um but if i if you were to say so like dogs make the best pets that expression itself is not a boolean um but if you were to change it to like alex believe dot believes dogs make the best pets then that would be a bullion um so this statement would actually be no all right so i think we can go on the next exercise okay so now pam says if it was jamie's dog is the best it would be true and therefore a boolean but sadly no so yeah jamie's dog is the best that could be i mean that's kind of an opinion uh right i so i would say the boolean statement would be jamie thinks jamie's opinion is that jamie's dog is the best right that's a thing that's either true or false i don't i might argue that that is just true no matter what though okay um one thing before we before we move on i know that these are like kind of it's like it's kind of hard to they're like what's the point right the difference between an opinion and a fact like uh who cares what's the point how does this relate to programming at all i think the important thing here is that basically we want something where the answer is always the same no matter who is answering the question because we want every computer in the world to be able to answer the question the same so something that's an opinion like dogs are the best animals in the world we don't want some programs to answer that yes and some programs answer that no right we want a fact that's consistent across all programs yeah exactly um also someone said they're watching from jupiter which i think is funny okay so we have our boolean expression down boolean expressions down we have we know that conditions basically ask a question but then now we have to relate these two things so we do these through things called relational operators so the two are going to go over to the two are going to go over right now are either equals two or not equals two um so basically we want to like form a relationship between these booleans and this question um so we like what these like relational operators do is it basically tries to test like okay is this true or is this not true so the way we do equals in python is we do these two equal signs and the difference between the two equal signs and the one equal sign is in python is that like when you use one equal sign you're basically saying something is equal to something it's like let's say i say x equals four like you're just like assigning that variable x to the value four when you use the double equals what you're doing here instead is you're basically like you're basically asking python or like python is basically like evaluating like is this thing equal to this thing so like an example is like the first example they give is like one equal equal to one so this is basically like testing like okay does one equal one and since it does it will turn the boolean value true um and then does not equals that's this cool little you know symbol explanation mark equal so that basically is it's basically um doing the opposite it's basically asking is 2 not equal to 4 in this example and again that would evaluate to true because 2 does not equal 4. um so it's like a subtle difference i find that a lot of like beginning programmers often when they're like writing conditional statements they'll forget the double equal sign so it's important to keep in mind um that whenever you're working with conditions and you're like trying to like basically get your program to like answer a question or like test out a condition use like a double equal sign instead of a single equal sign um this one's pretty interesting this seven equal equals seven so can anyone think about why this comes out as false instead of true yeah so this this relates a little bit to what we talked about in i think it was our first um session from this um from this series but the idea of data types where you know if i use the plus symbol with two numbers that plus symbol does a certain thing to those two numbers but if i use a plus symbol with two strings it does a different thing and so yeah we see we have someone in chat ionis um is saying string versus integer where these two things actually aren't the same even though one equals equals one is true seven in quotes equals seven is false because they're two different data types and that's again that's a thing that really matters a lot in programming because uh different data types will do different things and so you definitely want to make sure that the computer understands that these two things are in fact different yeah um okay so again we have like a couple fun practice questions so similar to last time it seems like we have like these different statements and we can paste in these so how about determining the following are true or false input your answer is true or false input okay for statement one it looks like we have to do some quick maths here um so statement one is five times two minus one equals equals eight plus one now alex i am bad do at math yeah so to me that looks like both of those are going to be 9 right 5 times 2 is 10 minus 1 is 9 is equal equal to 8 plus 1 which is 9. so 9 equals equals 9. to me seems like that should be true yep i agree um also notice when i'm putting in true and i if i also write false like i put a capital t um that's just like python syntax whenever you write true or false and you want it to like evaluate as like specifically a boolean true or a boolean false you have to use a capital first letter okay okay now this one looks a little bit trickier so this time we have it does not equals 2 and we have some more math so we have 13 minus 6 on the left side and then 3 times 2 plus 1 on the right side all right so it looks like we're going to get 7 on both sides right um so i have 7 not equal to 7. so is it true or false that 7 is not equal to 7 that's a false statement yeah right exactly so in this case so that's this is where the does not equal two comes into place so if these were seven since seven actually does equal seven the answer to this condition would be false yeah it's this is definitely something that i think is it's hard to wrap your mind around a lot it's kind of like this double negative thing where the question that you're asking here is is seven not equal to seven is that a true or false statement um and see i've even confused myself is seven not equal to seven um that is false right seven yeah yeah yeah so i think i'll just do the first two for those and i'll move on to the next part which is boolean variables okay one thing i want to say before we go on actually could you click back to the last oh yeah first last card so one thing that i think is like a little bit hard to or a question that comes up a lot when you're starting to work with these boolean statements is like basically who cares right it's like you can look at these statements and you can evaluate seven equals seven and know that's true or false and so the question is like why do we even bother why do we have the computer do this and i think one thing that um so i think it's important to like give an example of why it's useful for um the computer to be able to evaluate these things to true or false and so you might imagine a situation where the thing on the lefthand side is a variable that you as the programmer don't really know what the value is so let's say the variable is like my username right and my username could be a list from a bunch of different usernames and then the thing on the right is you know the string alex so basically you're asking hey is the person that's currently logged in is their name alex and so that's i i just want to give an example of where it's something that is not immediately obvious to the programmer because a lot of times in coding what you're going to have is you're going to be comparing two things that you can validate what the answer what what you know is currently stored in that variable but by just looking at the code itself it's not immediately obvious so it might be some variable equals some other variable right and you're asking the computer to see are those two things equal or not um it's not always as simple as kind of you know comparing two numbers that you could take by yeah these examples are very just um like they're just numbers but there are obviously like a lot more examples out there where like relating to things is like much more like real and like as alex was saying like especially with like testing out like you know if your username is like correct and stuff like that that's like where booleans really come in and are important especially for programmers who are writing software to make sure that you know passwords and usernames are working correctly and that they're keeping their systems safe yeah um okay so now we'll move on to boolean variables so one thing that's important so we've only mentioned true and false as boolean variables so far these are actually the only two boolean variables you can have there's no other type of boolean variable it's kind of a binary system um so if you if you've ever like experienced if you ever like heard of binary it's just like zeros and ones um that's kind of what true and false are based off of you know so you basically either have something that's true which would actually kind of is like the same thing as one or false which is like the same thing as zero yeah one of the little things that i had uh that i learned a couple years ago and never never knew is that on like light switches oftentimes you'll see like a line and a circle uh and like one way is turning the light switch on and the other is turning it off that's actually a one and a zero right the line is a one if you turn it on it's as if it you turned it to true or one and then if you turn it off it's as if it were a zero or off and so a lot of times all of these kind of terms are interchangeable where one and true and on are all kind of the same thing and 0 and false and off are all kind of the same thing that's just the end of the switch something that's actually cool in python um this is actually true for both of these statements yeah right so uh yes so the boolean the python keyword true with the capital t is actually the same thing as a one and the python keyword false with a capital f is actually the same thing as a zero yeah it's a really cool fact um the first time i learned it i was mind blown i was like telling other people but anyway that is a sidebar let's get back to um boolean variables um although i guess that's kind of related anyway um okay so they may create in several ways so one way is like you can just as any other normal variable you can just set it equal to true or set it equal to false um that's actually what we did in the last exercise another thing you can do is you can actually just um like set it equal to the condition you're testing so like this thing bull one right now it's being set equal to five does not equal seven right um this is basically the same thing as setting equal to true because 5 does not equal 7 will like express as a true value um so bool 1 will actually be like set equal to true and i can show you if i were to print full one yep and you'll see in the terminal that it comes out as true and then let's see is there one here that ah so if i tried bool two this one will come out as false so with boolean variables um there are like two different ways you can express them so you can either express them with just like the simple you know just writing it out as true or writing out as false if that's just what you're trying to do or if you're trying to like evaluate whether something is true or false you can test it by you know setting it equal to a variable and seeing what is like seeing what is expressed seeing what it is expressed as yeah and this is actually similar to other variables that we've seen in the past right we've been able to do you know my number equals one plus three and that one plus three is going to evaluate to four and then four is gonna be stored in the variable name this really is the same exact thing where the thing on the right side gets evaluated right five not equal to seven gets evaluated to false and then that false is stored in bool one so it's that same exact idea of the thing on the right side when you're setting a variable gets evaluated to whatever it's gonna evaluate to and then that result is going to be stored in this case we're just using these um logical operators right we're using not equal instead of plus um where if we use plus then it would store 12 if we use not equals then it evaluates it in a different way and stores uh false exactly um yeah is there anything else you want to go over on this exercise before we move on no this looks good okay so now okay so now we're going to go over something called if statements so if statements are really cool because now we're actually able to start construct constructing our own control flow programs um so so far we've learned about boolean variables you know the idea of a condition and then the idea of relating these boolean variables and conditions now bringing in if statements will actually be able to like bring these all together and like actually write out a program that you know test a condition yeah the boolean statement was the question again thinking back to those flowcharts the boolean statement was the question that we were asking and now the if statements are how the branching happens where if the answer is yes we're going to go one way and if it's now we're going to go the other way yeah so here like we're bringing back like the idea of um you know like the wake up waking up example so if it's raining then you bring an umbrella um you'd actually like write this out as like a piece of code in python basically by writing you know like kind of the studio code like just test if it is raining then bring an umbrella then bringing it bring an umbrella you know you can write that out as if is raining i think here is raining you know might be like a variable that's attached to some string that's either equal to it is raining or it is not reading and then you might have like a function that says bring a that says that you know tests whether you bring an umbrella um or that that would say bring an umbrella if it actually is raining yeah and i would say is raining there is going to be a boolean right that's going to be something that's true or false and maybe uh you know maybe that boolean was evaluated from something like we say up in the narrative of some string is it raining equal equal true but yeah that thing is arraigning is going to be a variable that either holds the value true or false yeah and here um here this is just like an even simpler example so let's say you want to test if 2 is equal to 4 minus 2 you know for some reason um so for this condition 2 whether or not equals 2 4 minus 2 this would evaluate as a true expression so you would see apple printed in your terminal in this condition would like actually run however like let's say if this was instead of a two let's say this was like a one or something this wouldn't print and basically the if statement would be skipped over and we'll see how that works um in this example in a second okay so there's a functional if statement okay so hold on one second i did this earlier so gotta clear out all the work yeah so right now in our workspace we have this function and within this function there's a conditional statement already um so we have username equal to dave and then we have in our function by the way if you um don't know what a function is um and you missed um out on like one of the early cs101 live streams we have them like we have them on our youtube channel so you can go watch um and review what a function is later if you need to um but basically here like the function is just holding the conditional statement so there's not much you need to understand about them so we have a conditional testing if username is equal dave and if it is it tells get off my computer dave so someone's having an issue with someone trying to get onto their computer so if we type here i don't know let's say we type alex or something we're going to print this out but does anyone notice if there are any issues with this right now as it is yeah you can even see in uh an instruction too it says oh no we get a syntax error so something is something is copy is going to be wrong when we run yes so we run this if you notice it gives us this little error that says if username equal dave so whoever wrote this also had the same idea in my head that people often forget to put the double equal sign so it tells us in the terminal you know something's going on in line two here and it says it literally even has like a little arrow that's pointing to this equal sign so you know python's really trying to help us out here um so here we just add a second equal sign um or if you want to test if it's not equal to dave you'd put like a exclamation point um but here we're trying to evaluate if it is equal and then we can rerun it yeah again so we're trying to ask that question is the user name equal to dave and the way that you ask the question of the quality is what double equals exactly so now we see that so like in this case we got none um it basically just means that like this function didn't return anything so python is just telling us like we didn't get we didn't see anything just letting you know um and the reason it did that is because you know i set the username equal to alex so this didn't actually run so if i were to actually set the sequel to dave instead we would see it run in yeli oh it's telling us to do a different thing but don't worry about that um but yeah that should have stoned oh yeah so it says get off my computer right so the yeah the instruction was yelling at us because we didn't do what it actually asked but you can see now that we've switched username dave now when we call the function dave or username which is storing the string dave is equal to the string dave and so um you know that thing that is returned um yeah i think that's it for this section because we've gone over if statements anything else you want to go over alex um no i uh i don't think so i i think maybe the indentation although i think that's um oh yeah a couple just like a couple syntax notes notice at the end of each con at the end of the statement you have a colon um that basically just tells python that the next line should be indented so if you notice this this line isn't is indented but if i were to do this python would not be happy with me because it's expecting the scene indent so in your condition statements they should all kind of be modeled this similar way where you have your if statement you have your condition and then you have the colon and then the line any lines that you any pieces of code that you want to run after this condition like specifically for that condition should be indented yeah the exact same thing as the function indentation from last time where anything indented one indentation level is going to be considered a part of the function just like anything indented one indentation level for this conditional is going to happen if the condition evaluates to true yeah exactly all right so now okay so now we're going to get into even more relational operators so let's say you don't want to evaluate if something is equal or not equal you know there are a lot of different ways you can compare things so there we'll go over four more right now which are greater than less than greater than or equal to and less than or equal to the way you write these in python um is kind of the same way you might even introduce some math you know i think my math teacher when i was in melbourne elementary school called these like alligator things get me to the alligator eating the bigger side yeah yeah something like that something like that um and then obviously with like greater than equal to most people don't really have that key on their computer um so the way python does it is basically like you put either the greater than or the less sign less than sign first and then you put equals next so that will tell python instead of just greater than it wants to test that it's greater than equal to or instead of just testing less than it wants to test if it's less than or equal to yeah so these would be that's a pretty common mistake too is to have uh folks reverse those to put equal less than when they're trying to do less than or equal to yeah the good thing is if you if you accidentally do that and you run your code like python will normally give you an error that's like it will like point to it um so you'll be able to see it um so these are good for if you want to like you know evaluate um want to like compare different numbers so for example i think like a fun little example of this person wrote here is um so like a function let's say you're at a if you're working at a movie theater um and you have like a function that basically like just checks the age of like you know someone's id it's a pg13 movie so you know you want the person has to be either 13 or older so to do that you basically have a condition that checks if age is greater than or equal to 13 and if so it would return true so you want greater than equal here because if they're 13 you can see a pg13 movie at least i'm pretty sure um and then you know if that is true you'll return true um so let's go over an example so we can write a function called greater than that returns that takes two integer inputs x and y and returns a value that is greater if x and y are equal return the string okay so this will be fun because i think we actually have to write more than one if statement and we'll see how that works all right so to define a function just in case um and you missed you just write def and then greater than and then this will take two inputs um x and y so you'd put x as your first input and y as your second input um sometimes like people can often like refer to them as parameters um and then as alex said before um same thing with conditionals you want to put a colon at the end basically what this colon does is it just makes it it first of all it's needed and also python is like python ids are pretty nice normally because they'll make it so you don't actually have to like press indent it'll automatically do it for you which is very nice um yeah i think i think that happens on codecademy where if you know if this is a python file which it is you can see it's named script.py if there's a colon and when you hit enter it will automatically indent to the you know one indentation level in yeah um so something i like to do whenever i'm like writing out condition statements that i think can be helpful especially when you're first figuring out so like there's two different things we're trying to test here we're trying to see um returns the value that is greater um and then if x and y are equal it returns a string so what i might do is i might like write like there are like three possibilities we can have here right we can either have that x is the greatest y is the greatest or that they're the same so i might like list out the different conditions so i might say x and y are the same x is bigger y is bigger whoops can't spell so this kind of like lets me think about like what's happening in this program in my head before i actually start writing code because sometimes it's easier to just like even like write something on paper or um like just figure out in your head before you actually jump into python syntax yeah and i think even doing the flowchart here it would be health one two where we're at the very top we have that first triangle and the question that we're asking are are x and y the same and then after we ask that question we can say okay what if yes what if no yeah exactly um yeah so a lot of different things you can do especially like this will be very helpful because especially you you like may have a lot of conditional programs where you have like a lot of different possibilities so mapping them out before you actually jump into coding is very very helpful and definitely highly recommended so how about um alex what would be the first like for x and y are the same how do i like you know test this out yeah so we're we're asking a question here so we we want this to be an if statement first of all so we want if and now we're checking for equality so we want if x equals equals y right if these two things are the same and what do i have to put at the end here and then we need a colon to say if that's the end of our conditional and now when we hit indent or when we hit get to a new line now inside this indentation this is what we want to do if um if the question that we asked was true so again picture your flow chart uh we've now said we're now indent indented one level which means that the answer to that question is true and so in this case we want to return the string these numbers are the same yeah and i'm just going to copy and paste it because i'm feeling lazy um okay so how about we give some people time in the chat to think about how we'd write is x for like a condition for x is bigger yeah so well first of all i think this is something that we haven't really covered yet so we've covered how do we how do we say yes that condition was true right we're at that that flow chart x equals equals y we know how to say yes that condition is true and so therefore return these numbers are the same but if the answer is no then that how do we go on to something else and how you do that is basically you just keep writing code right if x equals equals y is false it will just skip everything inside that that uh inside that indentation block and we'll skip line four basically um in our program here and so by just continuing to write code it's as if we've taken that no path so x is not equal to y um and so we're going to come down here on five yeah yeah so if we just write a second statement for if i think um i honestly has yeah yeah he's even he's even a head yeah so um but so we can also we can write just like an if statement so for fx is bigger so we do if x is greater than y and then in this program you want to return the value of the bigger value so to return x and then for y is bigger we do if y is greater than x return y and then um giannis and vernon they're already a little head we'll we're gonna get to elift probably in like a second um but for now uh this works for this program just to write if statements and then let's see if we run it hopefully yeah you might need to uh reset if you go into your wheel and hit set progress in this exercise yeah and i'll have it copy and paste boom okay so i got a green check mark yay um okay and i think that i think i'll just stick with that for uh the if statements and then we can go on to um and giannis is actually saying you need to call it which is which is true um why don't we show an example of calling this function yeah so if i call print greater than and let's try seven five and here i'll even do a couple different examples just to make sure they're all working so when you're testing out your code you should probably like think ahead of like what you should expect to see so for this one i'll probably expect to see seven returned for this one i should probably expect to see these numbers are the same returned and then for this one i should probably see nine returned so let's hope it's working as it should boom nice and code category because i wasn't following directions in the next part before before we go on and i know that we're kind of running out of time but i think that it's worth talking about here there are a couple of things to notice here one is that we are using these greater than and less less than and equal signs um with just integers here things are going to behave slightly differently if you're using different data types again thinking about different operators right in this case our operators are these um comparison operators or relational operators greater than less than equal to these are all behaving in a certain way when you're doing integer integer to integer but if you change it to string an integer like let's change that first 5 on line 13 to a string and just see what happens so we already know that those aren't going to be considered the same right so that conditional online 3 is going to be false so it's going to either do it might you know the condition string 5 is greater than number 5 might be true or number five is greater than string five might be true or none of them might be true so let's see what happens here yeah this will be it's page as a segment oh and it's just not happy yeah so it's even saying hey this operator greater than i can't use between string and integer and that's something that's very python specific right there are probably other program languages that do let you compare a string and an integer with the greater than sign um but that's that's something that python doesn't let you do and so again that's something to think about is that these data types are really important basically the operators the symbols that you're using do different things depending on what the data types are yeah and another thing another thing just know here if there are both strings um i believe the first condition will actually work because you can compare two different strings to see if they're equal each other but yeah so the string five is equal to the string five as well um so this one won't come out as these numbers are the same um and oh giannis is saying oh no hey can you hear me yeah i can i think i think we had a little up there yeah giannis is saying uh try except in that case right so there are things that you can do to try to kind of validate your input type where you can try to confirm that hey this is a you know i'm comparing a string with a string or i'm comparing an instrument with a string and you might you might think why would you need to do that if you're the programmer don't you know what these are well sometimes you could have user's input information where imagine you have like a text field on a website that's asking for your age what if somebody enters in you know text what if they put in their name for that age and so it's like your program should be versatile enough to handle errors like this where the data type might not all match so we only have five oh oops so we only have five minutes left um i'm wondering what the next what the most important thing to go over is before this ends um i think we can actually just try another one of those code challenges there's there's obviously stuff in here that we haven't gotten the chance to go through yet um and or not are all kind of a group and then else if and alice are all kind of a group so that's good stuff to to go through on your own but uh do you want to try one of these code challenges yeah cool i'd love to um okay so if there's anything in the code challenge that is like something we haven't gone over i'll try my best to like well me and alex will try our best to like explain it so that um it makes sense so i think for this first code challenge it actually is stuff we've only gone over so i think it'll be perfect yeah um so let's say you're asked you know you want to make sure you know that you're not going over budget this is actually very relevant to me right now because i've just now moved into a new apartment and budgeting is a real concern yeah but budgeting is real um so we want to create our function over budget it has five parameters budget food bill electricity bill internet bill and rent okay that's a lot of things um so basically we want to return true if the budget is less than the sum of our other four parameter or other four parameters so basically if budget is less than you know the sum of food bill electricity bill internet bill and rent and then if you've gone over budget return false um okay so show me this apartment where uh the rent is 30. i don't know what units those are yeah wait yeah if you look at the test it's like rent and food bill is 20 electric yeah we can also try out different uh yeah what a world you can put you can put more real uh numbers in there if you want okay so to define a function start with def over budget and then we want to put all our parameters in here right and i wonder if i can just like sneakily and get rid of and and oh i think that works okay we've got four minutes here we got we've got speed round of code challenge okay so i'm gonna do oh i lost your audio jamie i don't know if you can hear me hmm this might just be me uh people in chat let me know if you lost youtube easy to read hey jamie can you hear me oh yeah hey uh sorry your audio cut out for a second there uh i think you're back oh internet um so then budget is more and then budget is less than you spent now actually i think it might be wrong here is there any other potential case um budget is equal yeah so we have budget equal to what you spent it's actually very similar to what we did uh last time yeah so how about we give people like a minute or so to try to think of you know what would you know the fir budget is morning like what would the condition for that be yeah so this is this is actually kind of cool because this is going to be a combination of um mathematical operators right we're going to be using the plus sign to add a bunch of numbers together and then we're also going to be um using a relational operator to say greater than or less than yeah yeah so i'll still i'll start people off just in case if cool all right i think we can let's get started with this first yeah conditional wall so if so we have so we want to test if budget is more so budget is the thing that we're trying to test against and then we want to check more uh we want to check if it's greater than so we're going to use the greater than sign and then here as alex said we have to do some math so we want to add up all of these things and hopefully i can type them all correctly let me know if i am uh oh my god electricity bill internet bill and rent so i think that's all of them so i think you want to compare oh yeah sorry we yeah yeah we add them all up and then what do we compare them to right we're comparing them to budget so if our budget is greater than what should we return think false right yeah i think wait if budget is not true if budget is less than i'm actually going to um just say yeah so the function is return to your budget so budget is less than um then this would return so i think i think you should return true yes the function return true if budget is less than so it should return false then oh so this return false you can also have it so you know returns uh no you didn't spend more than your budget so good job it's like a string or something um and then let's see what about if budget is less than what you spent yeah so it's going to be the same exact uh condition except for instead of checking greater than we can check less than yep so i'm actually going to just do a little nice quick let's change this and now we could write a you know a full separate condition but we can also just try to let you know put this equals like the budget equal to we can like you know add it to like one of these which is like a simple adding equals after the greater than equal or the less than or equal so ask which one do you think we should add it to so let's throw it on that bottom one if budget is less than or equal to all that stuff return true and i think i think our prompt is a little bit screwed up here uh like in that in that direction so let's just uncomment these and see what happens yeah let's just make sure everything is working so it says this one should print false and this one should print true let's see hmm true let's see i bet it's because of our equal to so if we sum up this stuff at the bottom yeah so that first one um 30 plus 10 plus 40 equals 100 so uh that that now returns none because it's exactly equal and our if statements are you know checking if it's greater than or less than we haven't done equal so if we put if it if on line four we make it greater than or equal to then boom better than boom i think that i i want to go back and fix that prompt it's uh confusing which one should return true and which one should return false yeah well yeah we are out of time jamie let me quickly plug live streams so again we do these every tuesday at 1 p.m eastern time uh next week uh jamie you want to click back to the full course and just see what's going on i think it's lists lists cool so i will be back next week i know jamie i don't think you're going to be back next time uh no i think i'll be back for the last one and maybe for strings um so you have an open slot there yeah cool i love it um yeah this was great if uh i'm gonna drop in the chat if you want to kind of register for a reminder about these streams you can go to codecademy.com events to find event reminders for this stuff you can register and uh it'll take you both to the page and uh i think we send you an email if you want to join in on these um there's also also on these event pages there are um actually jamie if you want to look uh can i share my screen real quick i can just show off these event pages thank you um so let's see so on these event pages so if i click into the one for next week uh tuesday the 22nd um you'll see you can register for the event and then we also have a feedback form and questions ahead of time so if you're watching these live or if you're watching them in the recorded version feel free to go ahead and go through this these modules ahead of time and then if you have questions um you can drop them drop those questions in these uh in these forms and we can answer them during the show um and then finally if you're watching this now first of all thank you for watching we super appreciate uh all of you that watch us watch these shows live if you have feedback about the shows in general you can use this form again these forms are embedded in all of these different event pages use these forums tell us what you want to see tell us what you like tell us what you don't like um tell us your thoughts on jamie's dog and whether it's the best dog in the world um yeah uh um yeah and we will uh we'll work to try to make these as good as possible so cool jamie this is great thank you for leading this no problem thank you for helping me all right cool uh well we will see you all uh next tuesday bye everyone