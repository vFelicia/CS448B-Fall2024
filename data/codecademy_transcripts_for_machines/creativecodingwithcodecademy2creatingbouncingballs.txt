take off alex i think yeah we're live okay cool we're live hello everyone and welcome to the second series of second live series of creative creative coding um at co academy um my name is jiwan and we have um everyone with us today i'm jamie um i've been on a few live streams in the past normally for data science related content or like python stuff so this is a little different today um but i have some experience with p5.js not nearly as much as g1 um so i'm really excited to do this live stream with her and learn a lot along the way cool um so first off sorry for alex posted in the chat but sorry for a little technical difficulties and starting a little bit late um but um let's do a move on and i do want to quickly recap some of the things that we covered in our first live series so during our first live series session we really talked about what is creative coding basically um kind of um talking about the fact that creative coding is just a different approach to programming right we're not necessarily thinking about creating something is useful but rather we're using create coding to um create something create something creative and really you know the goal of the things that you will learn inside in the learn p5.js course is for you to use programming to create drawings and um using primitive shapes for most part of the content and you'll get to move on to doing some you know incorporating some audio with audio at the for the last um last live stream series but in the course you'll also get um in a little bit of a taste of how to use images and videos in there as well and i do also want to say that the p5.js course is free on the platform so anyone who is following along with the live stream series would be a really good compliment to the learn people ideas on course for you to follow along and we've this is the second series we've got six more to go to um i've got a lot of exciting things happening um for the future live series as well as today's um so so for today's live live stream series i do want to perhaps share my screen now and um trying to find the right one um so i'm seeing my screen okay right jamie yes okay so for today's live stream i do want to talk a little bit about um the second module of the learn p5.js course which is called animation so in the last stream last stream series live series we kind of take a took a look at you know the how to um set up our p5.js sketch on the and set up the canvas on a web page and use the setup and draw functions to create a canvas and create 2d shapes what we're going to do today is we're going to be creating um the end goal of the live series is two for us to create this um sketch um we're going to be following along this project called bouncing balls so we can see on the right hand side the end product of what we're going to be creating which are basically you know a lot of circles that are going to bounce around the canvas and they're going to have different sizes and different colors and different speeds and so on and so this is kind of what we're trying to do and um basically we're going to be using just one shape a circle function to create already a list function in this case um to create this kind of the shapes that are going to be in there and then we're going to use um arrays and for loops to create this sort of an effect of animation but before we get into there i do want to talk a little bit about uh some of the things that you'll be um you'll be learning about inside of the animation module which is you're going to be talking about uh in in this um first animation lesson we're going to let me read back go back to the introduction exercise but first we're going to get into like what even is animation right if animation is basically um if you put uh if you display images after the other then it basically becomes like an animation um and um in the concept of animation there is a thing called frames which is the thing that we're going to be basically utilizing the way that our draw function works in order for us to create something moving which which essentially means that it has some different value in whatever the thing that is moving um so that will look like it's moving frame after the other um and then we get to um the other lesson that is inside of the animation module is basically on a little bit more of like an intermediate um like an addon to the sheet functions that we looked at in our first live stream series and in the first module of the course but basically you look at the different kinds of transformation functions um that will help you group together shapes and make them you know rotate and translate and that kind of things are covered in the second lesson included in these in this animation module there's also i do want to talk a little bit about this article that is included in this um module as well which is called tips for creating animations with p5.js but this is all of those things that are a little bit like a side topic in a sense they're not essentially strictly about the animation but all these tips that will increase um or like make your animations p5.js animations look a little bit more responsive and a little bit more um fun so to speak so i do if you guys were here for this first live series you will know that i do enjoy putting in opacity um in when i filled um colors for my shapes so that you know you can use it to create this kind of like a um trailing effect without doing too much other than just adding opacity into the background color and the fill color of your shapes and so on this this article is a little long but i think i do think that it has a little bit of like this kind of like all of my tricks up my sleeve things written out in article form so i do hope that you guys get a chance to take a look at this and um i hope you guys enjoy it also do you want just one question so you said this course is free to all codecam users or just to pro members all cool crappy users so this if you have an account like academy you should be able to access most of the content on this um of course definitely the lessons and the articles i do think that the quiz and the project are pro only but everything else in terms of the actual core content of the course is free for everyone okay now that we've talked a little bit about the kind of the content uh that is um that i'm going to cover um and then it's covered in the animation module i'm going to reset all of this and start taking a look at the project that we're going to build so today's project is called bouncing balls and what we're going to do is as you saw previously we're going to create a lot of bowls and then we're going to have them bounce around the canvas and um i'm going to go ahead and maybe take a look at the prompt and it's talking about how you know like that how you can express yourself with the the way that you animate certain um things certain certain shapes and you know this this talks about measuring it imagine a sketch with only one gray circle small and tucked away in the corner what mood would this would this convey and so on but then the goal of this um sketch is for us to create a lot of the balls in different colors and make them look super festive and super fun and we're going to touch on a lot of the things that were covered in the animation module like i said but before we go um talk about the things that are specifically to do with animation i'm going to go ahead and start reading the prompts and in this project so the first one it says take a look at the sketch shares on the right right now there's a setup function it's mostly empty there's a setup function and there's a draw function so let's actually do take a look at what we have in here right now and talk a little bit about um the existing code in here provided for us as a little bit of a recap so we've got two functions in here there's a function called setup that is defined in line eight and there's a function called draw that is defined in line 24 right now inside of the setup we've got this function called create canvas that has two arguments window width and window height so what this create canvas function does is that it essentially creates this black block in here that we see i am going to go ahead and like um comment this out just to show you guys that did not do anything i'm gonna also take this out but my point oh okay well this actually does prove something that even if we don't use the create canvas function in here it is by default going to create a canvas in there for us if you actually don't want to use a canvas within your pp5.js sketch which seems like a really really rare instance because you would normally be using q5.js to create drawings you can use a function called no canvas to not actually draw anything on your b5.js sketch which again i have to say i think this just background is black but this no canvas function will make sure that there is no canvas that you're drawing on there but let's actually do this create canvas and what this does is that it draws a canvas to the window with the browser with or the preview width that you see in here and the window height that you see here on here so if i were to actually change these and say 100 and give it static numbers and say 100 100 it will create a much smaller canvas i am actually going to go to style but css because yes i do see the background is blank i'm going to take this off for now so that i can show you more effectively that we were drawing a canvas and that the background of the whole html was black so now if i were to turn this back on we now see that there is only one small canvas that is a width of 100 pixels and height of 100 pixels in the middle of the web page wise in the middle of a web page this is not something that is done by default by p5.js we have extra code in here for style.css that makes this particular canvas appear in the middle of the whip horizontally and vertically in the middle of the web page so if you were to you know this if i were to disable all of these inside of the canvas selector then we'll see this in the top left corner of the web page like we should normally do because everything is a plug element anyway we're i'm going to leave that in there um for the purpose of this um creating this project but i did want to just have a do a quick recap of you know the create canvas function which is used to basically create the area in which we're going to start drawing into and if we use um variables which are window width and window height which are builtin variables that come with the b5.js library window width window height it will generate our canvas to be the exact width and height of our browser um so there we go do you want a quick question about that if you extend the browser because like the browser is shrunk right now if you extend it does it automatically no oh so does it just um kind of like stay with like what it is currently yeah that's also actually because the setup function only runs once at the beginning when we click run or when we click save in our case if you did want to make sure that your canvas resized when your browser resized you can actually take a look at that in the article in the tips for any creating animations article here and that's the first thing that we talked about which is that you can create another function called window resize inside of it if you use the resize canvas function and i have a little gif in here you'll be able to resize the canvas and resize all the elements inside the canvas given that they use a not a static value like a pixel value they will move along with it so we can actually go ahead and try doing that so for example i usually do it at the end of my sketch or at the end of my javascript file so if i do function let me actually just move it up so you can see better and then do function do window resize so what this function does is that the contents of this function will run when the window resize event is detected so this is a little bit like an event callback if you guys are familiar with what they are and it's for but if you don't all you need to know is that all the content of everything inside of this function will only run when the browser window has been resized and inside of here we can call the resize canvas function and if we pass in window width and window height again because window width and window height variables will change depending on the current window browser is window width and current browser's window height so if we go ahead and save this and i stretch and shrink my canvas it does do a little bit of a lag but mostly because there's a bit of opacity in the background so if i were to take that out it will do a bit more of a cool zero is oh there we go something happened uh but now it kind of sticks more immediately to the expansion and shrinking of the canvas oh sorry of the browser with uh window width and height let me actually bring that opacity back in here because this is the most essential thing that you will need to do in order for you to create traces of your animation um which we actually talked about in our last live stream okay so what will happen this the the second function that is in here the draw function is going to be the most essential sort of like a structure or the fundamental structure that we'll need to use in order for us to create animations so just for a quick recap the draw function runs um in an infinite loop after the everything inside of the setup function runs so everything in the setup function runs once all of these are done running and it only runs once the draw loop everything inside the draw function also called drop loop will run in continuously until you exit out of the browser or you stop to come to um stop the sketch itself which could be done in multiple ways but the easiest way would be just closing the web page right and what we're going to do is that we're going to utilize the fact that it runs in an infinite loop so if you keep updating one value in there um incrementally and ev and then you have something that loops over and over again it will move something or change something incrementally and gradually so it will look like it's being animated over time and we're going to use that mechanism in here and i'm going to now take a look at the first instruction that's been given to me and it says first let's set up our global variables since we're creating multiples we'll need to determine how many poles we want to bounce around our sketch in order to do this get a variable called boldcount and we're going to set it to 100. so i'm going to say let's fall count and we'll set it to 100. later on we'll look at how like how we can change the number of bowls by just by changing this the value of this variable but actually that's exactly the point on why we're saving this as a global variable right if we ever wanted to change the number of balls that we see on the canvas we can easily do that because we have the save as a global variable and we'll be referencing this variable name rather than this static number when we want to create x number of balls within our draw loop so let's go ahead let's actually check that off and then go to our next step which it says now we need to initialize empty oh thank you i'm on a strike um streak sorry not a strike um okay let's go to the second point it says now we need to initialize empty arrays for x and y position of our ball bouncing bouncing balls um below our ball count variable um create a variable for the x position called x and variable called y positions called y and then set x and y variables to empty arrays let's go ahead and do that and let's say let x is equal to a empty square bracket so just as a quick refresher if you're not um familiar with what arrays are they're basically a list there's a mech there's a mechanism of keeping a list of um values and in javascript we can initialize them by using a closing and opening square brackets so if you have an empty one like this then it means that you've created a variable called x and you're going to you you're going to use it as an array and you've we're eventually going to fill the contents of this array in there and so um we'll do the same thing for our variable y so we'll say let y is equal to an empty array in here okay so um i'm not going to read all of this because i know that what we're going to what we're asked to do is create a similar thing so similar and similar we're going to create empty arrays for our speed x speed and wide speed variables and our size and color variables so let me actually write this out and explain why we need all of these variables um and why we know all of these arrays so we're going to create an empty array for xspeed empty array for y speed and then we'll create an empty array for size and it will create an empty array for r for red value empty array for g for green green value and an empty array for b for blue value so the reason why we need all of these things is eventually what we're going to do with our bouncing bowls is that we're going to be updating their positions so we're going to update their positions for each round of the loop in the draw function we're going to update the x and y positions of the ellipse function and the amount of which it increases for x and y value will be determined by the numbers inside of the x speed and y speed values arrays and we're also going to keep at track of the sizes for each of them the separate um ellipses that we're going to have for our bouncing balls and same goes for the red green and blue values for uh that we will use for to fill our um ellipses and the reason why they're in arrays is because we're going to create a hundred of them so each of these arrays the x y x b the y speed size rgb arrays are going to contain a hundred elements inside of it and we're going to be using a for loop to iterate through all of them and to update all 100 um bowls per draw loop okay now that we've covered that and we sort of basically what we did in here as we said in the section title we've set up all of our global variables the next step we're going to do is that we're going to set up our initial properties so that if um because it says maybe this would be a hint if it says set up perhaps you might want to think about doing it inside the setup function the reason why it's called setup is because you want to do it once you want to initialize all of your glob your variables once and then in draw we'll use those variables to update certain things to create the animation so inside of the setup um it says create a for loop okay so what we're going to do is here we're going to create a for loop for let i is equal to zero i is less than ball count so this is where we're using that ball count global variable the first variable that we we set at the very top of our sketch and we're going to iterate them through the for lip by um incrementing it by one i'm closing it here so that we can contain all of the um oops all of the comments inside so after we've done that inside of the for loop let's actually check that off so what's going on in here is that we're saying okay i'm going to define a variable called i started at zero and incremented for how many of our ball count times and and and um updated by one every time the for loop runs right so everything inside of here between line 19 and line 27 will run a hundred times so uh general question if you want the because we want 100 balls right how come it's i less than ball count and not less than or equal to okay that's a really great question and it actually um touches on um the kind of uh the concept of how elements instead of arrays are referenced so when you use um a data type called array um you'll have you could you could have like i said a list of things in here so i'm just gonna put things in here i'm gonna get rid of them eventually but i'm gonna put in some numbers in here so let's say there's inside of an array called b we've got 255 10 5 i don't know 21 in here so in here as you can count you've got four numbers that are separate separated by commas so you can say this array b has four elements inside the array the way that we reference them um reference each of these elements or each of these items inside of the l the b array we call them um well we call each of the um the items inside array elements and the way we can reference them is using what's called index number and the way that um indexing or like um ordering elements inside of the array goes is by starting the count from zero not one so conventionally normal people would go to the grocery store and say i want one two three four apples but in terms of programming how they counted the number of elements inside of the array is they go this is the zeroth element of the array this is the first element array this is the second element of the array and this is the third element of the array so having said that in order for us to access the first element of the array we need to have our i value that's going to be used to reference the index numbers of the array starting at zero and we actually can't have it go all the way to hundred because if we count there are four elements in the array but the last index number is three not four so if we make it go less than bowl count it will not include the actual number of the volcano itself cool thank you for a great question okay so moving on uh what we're going to do is that we're going to set the x and y positions to be at the center of the canvas so what that means is that for the um um i x element sorry so the i element of the x index which we don't have anything in there but we are setting you um in this um for loop i want it to be the um the center of the canvas meaning i want to reference the width variable which is a builtin variable in b5 gs and divided by 2. this should give us so the width would be remember that the coordinates go from um the x is at zero coordinate or zero um when it's all the way to the left of the canvas and the increase to the actual width of the canvas as we go towards the right so if we want to be in the middle of it you will want to reference the width the whole the whatever the width of the canvas may be and then divide it by half so so this should set all of the um the elements from the 0th element to the 99th element of the x array width divided by 2. and we'll do the same thing for y so the one at y um at the ice element of the y array we're going to set that to height divided by two um so again the same sort of concept using the height um p5 builtin variable to get um whatever the height of the my canvas may be and divide that by two okay um i think that's checked off so just to check g1 this would make it so that each ball is set up in a specific spot on the canvas right right so this will i make sure that all of the bowls that we're going to create will appear right in the middle of the canvas and then we're going to have them disperse in all sorts of directions okay so then now we're going to do a similar thing of setting our x speed values for all the items in the array of xspeed array and in this case we're going to use a function called random so what this random function does it's a builtin p5.js function and it's different from any other random functions that you might know in javascript or any kind of other kind of programming languages but in p5 you can give it two numbers in here we can give it a minimum number and a maximum number so for example in our case we're going to give it a minimum number of minus five and maximum number of five and what this will do is it will generate a random number between minus and minus five and five and that random number will be a random decimal number so it might be like i'm making this up three point one two four four five or something like that i guess that's why we let the computer figure out the random number and not have the human manually entering random numbers because i feel like really like what is random um i think even computer rent computer generated random numbers are not 100 percent random but that's more philosophical so i'm not going to go too deep into that um we have a question from the chat so someone's asking how are we accessing the width variable i think you said that's like a just like a global variable inside the uh yeah yeah so the width variable is a builtin um p5.js variable so you can actually take a um rep and take a look at the documentation by going to t5js.org is which is their website if you go to let's say go to the reference page and then you'll be able to actually just search for this with it it says environment underneath the environment section there is a documentation on the web variable which says system variable that stores the width of the drawing canvas so if you reference the width variable it will return watch whatever the the width of the canvas that you've used to for your crete canvas function so in this case so if you created a create a canvas function with 350 as the width of the canvas the width variable will return 350. in our case we used a dynamic variable called window width so how much ever this width of the window is this will be return in pixel value okay so also okay going back to setting the random number for our x speed and y speed the reason why i want a random number between minus five and five is because all of we've set it so that all of our x and y positions of the um the ellipse or the bouncing ball will be generated in the middle of the canvas right and so we really want to make the full use of the area that we have on the canvas so we want it to go towards the left towards the right or on towards the top towards the bottom and all go in all sorts of directions so if we um use the speed uh a negative speed and we have a ball at the center of the canvas that means that it will minus in the x value of the um the x value of the position meaning that it will go towards the left if the x speed value is um generated randomly so that it's positive if then it will travel towards the right and same thing for the y values if we have a y speed value that we're going to eventually use to um to alter the the y position of the sheet if the y speed is positive then we'll go towards the bottom because remember that y values are zero towards the top uh we're at the very top uh edge of the canvas and the y value is how much ever the height of the canvas is as it goes towards the bottom so that's why we want our speed to be uh going both negative and positive directions and that's what we have here for our random functions okay now that that is done i don't know why seven is already checked off what we're going to do is we're also going to do something similar and set a random size to our four hours ellipses which we're going to do a random between 10 and 50 so this means that it will be a random number between 10 pixels and 50 pixels that we will eventually use for our ellipse function and then lastly we'll also set random numbers for the red value so we'll set a random number between 0 and 255 a random number for g the green value between 0 and 255 and it will also set a random mover for the blue value between 0 and 255. so that should all be set i'm just going to click save and run nothing should happen because we didn't draw any any we didn't actually draw any shapes in here these are all the steps that have that we did in order for us to set up all of these variables that we're eventually going to use so having said that we'll actually um set some things up and um program something so that we are going to be seeing some shapes that are happening that are going to be drawn inside of our um canvas so i've now moved inside of the draw function and underneath the background i'm going to create another for loop that we're going to be using this time to go through the elements inside of the array that we've just initialized and actually use those values that we've saved in there to create the ellipses or to draw the ellipses onto our canvas so i'll do the same thing i'm going let i is equal to zero i is less than ball count i plus plus and let me move this closing bracket all the way at the bottom of the draw function and here uh let's before we do all of those other things to animate what we're going to do is we're just going to start by drawing the actual ellipses so i'll use the ellipse function which again i'll maybe go back in here and show that underneath the 2d primitive there is a function called ellipse in here that as namesake it you can use it to draw ellipses onto your canvas so it's the um the function takes in four um it can take up up to five but it normally takes up to four arguments in here the first argument is for the x value of the position the y is the second argument is for the y value of the position and then the width and the height of the ellipse so we'll go back into our um project and we'll use whatever the i element of the x array as my x position and i'll use the ice element of the y array for the y position and then for the width and height i'll use size um the size the eighth element of the size array in here so once we do that uh june is the reason we're using uh like ellipse instead of i saw there was like a circle function in the documentation we can definitely use circle in here so if we use circle there's no reason really um actually it has a little bit to do with the fact that um the p5.js function didn't used to have a circle and a square function it used to only have ellipse and a rectangle function because if you think about like like the shapes overall like the ellipse is kind of like the what's it what what is this like a overarching group that it's like it's like the idea an ellipse can be a circle so you might as well just use the same function and same thing with a rectangle so an ellipse with the same width and height is a circle so they didn't used to have the library itself didn't used to have a circle and a square function and it's been more like a relatively recent addition to the library okay so i think it makes sense to use circle in this case because we're not differentiating between width and height but the reason why we haven't um we have um this being used being with the ellipse function is so that later if you want to modify anything in the sketch you are welcome to modify this so that um the bouncing balls are not exactly as like a perfect circle but let's actually just try using the circle function in here and are you are you doing it at the bottom because you don't want it to like i'm guessing it's so like it's like it's animated last like after all the like other like things are done like if you put it at the beginning would it just like kind of show the circles and then show like the well we kind of want to do all the process that we need to do in order to animate the circle um if you do have this at the top at the first thing as the first thing on the for loop you will see it be animated but the first frame that it draws will not be animated not that it really matters because you know the draw loop runs really really fast and 60 frame frames per second um ideally but um for the sake of like logic you should really do it be doing all the things that updates the shape or the enemies to shape first and then we should be setting um this sort i'm drawing the actual circle as the last step and actually as the second last step we're actually going to be using the fill function well actually this this telling it's telling me to do no strokes but let's do uh let's set the fill color of the shape by using the rgb the elements of the rgb arrays that we've already set inside of our set and setup function so i'm going to say use the red value at the i index of the r array and use the green value at the i index of the g array and then b value at the iphone text of the b array and now as we once we hit save and something's happening circle did i mess something up is it supposed to have another argument or it doesn't only need three it only needs three okay or did i write something by mistake somewhere i think it happened after you wrote the circle are you maybe we can just go back to ellipse and yeah but it's just really that's actually really interesting maybe i misspelt oh it's bothering me this should work it's actually really interesting okay i'll take a look at that but let's use a list for now and then i'll set size and um width and height to be the same thing also we have a question from someone in the chat they're asking we'll probably uh get to this pretty soon but is there a timer for when the ball will change direction or is it when it hits the border so i think it will be when we hit the border right well yeah we'll get there but yes we're going to basically what we're going to be doing is we're going to use our x and y position to detect if it's reached the boundaries around this around the canvas um i'm also going to do another styling in here it says um style to have no strokes if we say if i say no stroke in camel casing with capital s for the stroke word then we're going to have all of our shapes not have any strokes around them so that it will lose the default black shape around the ellipses that we've drawn in here okay so i'm kind of going a little bit off the order of things but what we're going to do is we're going to start off by trying to animate um the movement we're going to try to animate by incrementing the positions of our circles so in order for us to do that i'm going to first start referencing the eif element of the x array and here what i'm going to do is i'm going to take whatever it currently is and then add the i've element of the x speed array so if we do this and start and save and run we should see all of our bowls are going to move horizontally and spread out like that that's pretty that's because all of our bowls are not moving vertically only moving horizontally and they're going to spread out let's do the same thing for our y position so we're going to reference the i element of the wiring and make it equal to whatever it currently is and plus it by at y speed at the eighth element so now if we do this we should see everything dispersed from the middle of the canvas and spread out so it's kind of like if you hit pull and they're all like somehow overlapping on top of each other and like sort of letting it all go and burst in different directions um so okay that's great now that we've made this is like a very it doesn't take a lot of lines of code i feel but we've basically um animated the bowls that were static before these two lines of code right they were before they were all stacked on top of each other so it didn't look like much but we did have 100 balls on top of each other and after we give it an animation for the x y speed of our ellipses then it moves that way and in combination with the uh y um the animating the y y position of the ellipses we get the sort of dispersing effect so this song if you were to like expand the screen right now would the balls like disappear like like i don't know how to like um like if a ball like escapes in the x direction oh yeah yeah so like you can still see it slightly on the screen okay so i should be trying you could like try to catch up to the movement of the bowl and like follow it along as it moves out of the canvas but let's actually program it so that they will bounce back in to the um area of this um the canvas so what we're gonna do is actually we're going to be modifying the x speed and y speed if the x position is either smaller than zero meaning that it's gone beyond the left border um of our canvas or if it's become greater than the width meaning that it's gone beyond the right border of our canvas so we're going to be using um a bunch of if statements or two if statements um so for the x direction for us to capture everything horizontally first we're going to use an if statement and say if the x um the eighth element of the x array is less than zero or which you can do with two pipelines or if x um either element of the x array is greater than width what we're going to do is that we're going to take the value of the x speed the current value of the x speed at the index i and um take whatever it currently is and times it by minus 1. another way of writing this by the way would be xspeed i um and then do times equals minus one right oops minus one the thing that this is going to do is um so let's say that we have a ball and it's traveling towards the um left boundary of the canvas and it's actually traveling in a negative way right because it's decreasing the value of my x position in order for me to go towards the left and when it hits that hits that point where x is less than zero what it will do is that it will turn my x speed to be positive so from that point on it will now plus uh my x position add to the my x position so that it will start traveling towards the right so then it will create sort of like a pingponging effect in there um i'm going to do the same thing for the the y speed so first i'm going to check what the current value of the y value and index i if it's less than zero or if the y value at index i is greater than height of my canvas then i'll say y speed of index i is going to be what it currently is and then times it five minus one so now we have actually i'm gonna turn this off and i'm gonna show you what it looks like with just this if statement now we see things bounce off the left side and the right side of the canvas but everything that's going up up is not being captured and contained in there right and if i turn this back on the lines 5 to 57 i just added 40 y checking the ui speed um sorry the y position and the changing of the y speed in there then we get this thing where all the ellipses are contained within this the array of the area of the canvas um cool i think also someone asking is how we can make the movement more random yeah so right now we're have we're getting this sort of like a pingponging back and forth sort of a movement because um the speed uh values are set inside of the setup and it's set once so each of these bowls have their own x speed and y speed values that are flipping in terms of sine so in terms of direction but the amount of its um its increase for the x and y position of the ellipse is constant right so the thing that you would do in order for you to make all of these like super super random would be to essentially not use this x speed and y speed values the constant values that we've set at the setup but maybe i'll just do it for the x speed so in replacement for the x speed value that we have set inside of the setup i could do another random function in here so right now what it's doing is that for all the bowls that i have inside um inside of the that we have the 100 volts in here i'm going to i randomly add some number between minus 5 and 5 in the x direction now it looks almost like a what does this look like it kind of looks like a confetti falling back and forth like a lava lampy sort of feel oh this is interesting because it's like um am i like it's kind of staying in the center because it's like harder for it to escape to the left or right since like many of the random values might be like negative or positive so it's harder to oscillate between the left and right so the random in here is creating that very jittery effect it's almost like you know all of these are phones and they're all vibrating on like a very very um sleek canvas but yeah so that's what you can do and you can do um maybe i'll do mention this sort of on this this as well but there is another randomizing function called noise in v5js so random is um for its namesake it generates a really really random um it generates a random number um that you can't really guess which is also mentioned in here but there's also a function called noise which gets a little bit a little bit mouthy because it what it does is that it generates what's called a purlin noise so purlin is um proline noise is named named after the person who generated a created algorithm can purlin um basically it's kind of like a technique that he's um invented to create more natural sequence of random numbers so when you use um what a noise value um the noise value will um the current noise the noise value that you get right now will be influenced by the noise value that has previously been generated and will be generated in the future and the whole concept is like really really interesting and everything and really it was first used in the original um what's that what's that not troy wait i'm blanking out oh that game movie starts with t tron yes it was used to do oh thank you it was used to do um shading effect for the tron movie so cool so it does create like a very like a natural sequence of numbers which i'm actually going to go ahead and use it in here so if i use noise and i'm going to use um something in here that um so i i talked about this last time so we use there's a variable called frame count mp5.js is also another one of those builtin p5.js variables but basically this number keeps track of how many frames that has been rendered um during the duration the in the duration of the canvas or the the the program running and so all we need to think of this as is it's an increase increasing number and it's a linearly increasing number i'm just gonna slow it down and use it inside of my noise function and what this will do is it does something a little bit different i'm actually going to add a little bit of randomness in here actually so that they don't all move at the same time or actually i want you know what i'm going to do is oh at this point now i'm just playing a little bit um but i can add the the current x position in here so that the x position will influence my noise value noise is built in yes i just saw a question from kali um but it does something interesting in here and let's actually do the same thing for the y speed and do this okay they move at the same time this is not good okay maybe i will do oh random in here do minus five and five and now they still move at the same time it's not good but but i think the takeaway here is that the random even the noise function even with the random in here sort of moves in an unpredictable way but it is still it's very natural in the sense that it doesn't jitter anymore i'm actually gonna um i don't think this is actually that great of a place to use the random and the noise in here actually i don't understand why it's not very um spread out i think we will have to do a lot more things in here and it's actually i've kind of broken the program a little bit because it no longer is bouncing things off of that because for us to detect and make sure that things bounce off of the walls we're flipping the signs of our x speed and y speed values which are we we no longer use to in order for us to do animations so really actually let's go back in here and put in the y speed of x and what this was is x speed of x in order for us to keep the integrity of the uh of the bouncing um within the canvas but still make things random what you would need to do is after we check or maybe even before we check all the boundaries you could also just do x speed of i is now equal to a new random value between 5 and 5. so this way it would actually check and make sure that everything is staying inside of it even though we're using a random um we're resetting the random value for the x speed value and same thing if we wanted to do the same thing for the y speed we could do random of minus five and oops and five in here oh my god it kind of looks like little flies you could actually turn it into a little bit more of like a firefly firefly sort of um animation by um decreasing the size of this let's make it super small between two and five or two and ten maybe and then how do i create yellow is it green and blue together google it yellow oh not not but now it's a little more buggy it looks so cool okay yeah wait how do i create yellow is it like a little um i don't know i can just do it in the shades of blue which should be just randomizing the blue number now it kind of looks more like yellow sea creatures but yeah oh also the other thing that i do want to note is that it's a little less obvious now but it is all the shapes are creating a little bit of um tracing let me actually go back and make the size a little bit bigger again so if you see this the movement of all of my um circles are have a little bit of a trace so i also turn this off be more obvious oh there we go it's too dark let me bring all of these random in here because i wanted to make a point about something that's happening inside of the so here okay i don't know if you can see this but you can see all the traces that's following the ellipses that are bouncing around and that is done because we have opacity in our background so if i were to remove this 50 comma 50 you see that difference there's no more tracing happening in the animation i'm going to bring it back in here and make the um the opacity or transparency really high so now it's it do you see the tracing more yeah a lot more yeah so that's because when we refresh the background on top of each other it is drawing with a lot of transparency on top of each other so really what you're seeing is that the previous frames are like still staying in the in the visible like transparency level so so to speak so that you're seeing um kind of like the traces of all the other frames that have previously been drawn how many like how much would it take to like because like right now it seems like still pretty like there doesn't seem to be much lag in this um but when would you like start to notice lag in the animations let's actually give it a go i'm going to make thousand oh 1000 oh my god okay okay let's actually put in i'm going to start putting in some opacity in my fill as well so we'll soften the fill color of everything there we go maybe this is a bit more but it seems like it's fairly easy yeah it's still in pretty well okay let's go 5 000 okay there we go now it's very slow so you can like comfortably do up to 5 000 draw 5 000 ellipses in here it really depends on what kind of operations that you're doing inside of a canvas for example like we're doing a simple thing of like you know adding a number to another number and then we're you know like twitching signs or something if some if some condition is met but if you were to do a lot of like um noise in here if you were to use a lot of like um trigonometry like you know oscillation using sine and cosine that will obviously slow this down a lot um what handles the graphics for this this is um using webgl so all all okay don't quote me on this but i'm most things that you most graphics that you generate on the web will use webgl okay cool i think this is all i've prepared unless someone else um we have we could take maybe one more question or one more can we try this sort of request or jamie do you have a request i don't know i just want to play with p5.js and now i want to take this course okay but i've um achieved my goal of the day yeah i i'm so used to just working with like numbers all the time that seeing graphics is really cool okay let me stop sharing and i do want to say and i'm putting a little bit of a plug for it next live stream session because the next live stream session we're going to have a guest speaker um and we're going to have cassie coming in to talk about um okay i will answer stop fala's question in a bit but we're going to have cassie coming in as a guest we're going to talk a little bit about this would be not really be a much of a code demo session but will be more of like an interview q a sort of a session with cassie who's been has a really big involvement in p5 open source community and processing foundation all that kind of things and we're also going to talk about what's uh an editor that you can use called p5 web editor that is a really easy way for you to take your um projects off of the codecademy platform and really start experimenting on your own projects and sharing your um you can also share your projects or little sketches with anyone else in the world with the link that you get generated with the editor so we're going to have her and it's like a um little treat i feel like because um she's an incredible person to talk to and she knows a lot about this sort of a community so i do want to put it up there and i guess the last thing i will do is answer a question that we just got in here i can't find death in v5 library is it possible to do that or just next to one position um i'm gonna talk a little bit about it and maybe give you um a way that you can get started with that so p5.js sketches by default are twodimensional meaning that you can use x and y positions you can however turn your entire p53 sketch into b in 3d and you can you will need to do that by specifying a third argument of the create canvas function by specifying the third argument to be webgl in all caps so maybe let me go to i know i'm not sharing my screen i just want to find a link canvas and if we if you go to the documentation for a create canvas um which i can't put into chat i'm gonna uh i can send a link to the chat because i have the fancy codecademy account but um basically you will need to specify for your canvas to be in uh in 3d mode and then you'll be able to use um the z value for depth so it's uh it's not that there's a specific like a depth pro a way that's like function or anything like that but you will have to um specify in all places where you just have two numbers you you might be able to put in a third number or you can't use like shapes like ellipse or rectangle because they're are 2d primitives there's a whole other section for 3d shapes in the documentation so i guess those are a couple of places for you to start creating 3d shapes and p5 cool well thank you guys so much for um attending the session with us and we'll see you next week on next tuesday at 4 p.m eastern time thank you so much for letting me join you on this was so much fun i'm glad yeah i learned a lot and i'm sure everyone watching did too cool