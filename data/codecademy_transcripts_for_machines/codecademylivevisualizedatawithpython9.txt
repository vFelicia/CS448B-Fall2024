all right hi everybody um i hope that everybody is doing well and i'm really excited to be here with alex um i'm sophie and we're going to be taking you through some um through a lesson on data manipulation with pandas today um but before we get started i'm just gonna kind of walk through um the context of where we're at in this whole series um and so feel free as we're getting started to just say hello on the chat introduce yourself let us know that everything is going is copacetic because this is my first time live streaming directly so in case there are any issues i want to know yeah i i know we're right now we're streaming on facebook and uh twitter and youtube and i think also twitch although not very many people know about the existence of our twitch channel um but sophie and i will predominantly be looking at the youtube chat so um if you're watching on any of those other platforms um you could come find us on youtube and chat with us and then yeah if you're watching the recorded version of this um we have been doing these live streams every tuesday at 1 pm eastern time so if you're catching the recording version we would love to see you during a live version yeah um so if you want to learn more about the events that are going on you can always come to the codecademy.com events page and this is our event today and this is our event on thursday when we're going to have a a pro event where you can come and ask questions more of like an open office hours event um and today we are continuing our visualization with or visualize data with python uh path and um so last week uh zoe and jamie went through um some of this earlier content i think they were where were they last week yeah so i think they did the kind of second series of uh matplotlib lessons which matplotlib is the kind of standard python graphing library and i think yeah so jamie and sophie or sorry jamie and zoe did uh a lesson on matplotlib and then i think on the thursday session for pro members they dove into the kind of cumulative project we have there right so today we're going to be going through this lesson on data manipulation with pandas um creating loading and selecting data with pandas so if you want to follow along i think the link is on youtube but you can also find it on codecademy directly and just to give a little context on why we're kind of breaking from our content on matplotlib and actual graphing and now getting into this kind of data manipulation section is that in the real world a lot of the time you'll have data that you're collecting uh either you know in a google sheet or a excel file and then you want to be able to import that data into python so that you can actually create visualizations of that and so the the content that we've gone through so far has been really focused on using some builtin data structures like lists to build these uh visuals but now we're going to kind of talk about the the step that precedes that where you need to actually be able to load your data in and then and get it in a form where you can then use those plotting libraries to actually make the visualizations of the data that you have um do you have anything to add to alex no i i think we should get into it like you said like before the all the visualization stuff that we've done so far it's like kind of been demo examples of like oh we created a list of like five numbers and let's draw five bar graph or you know five bars and a bar chart to represent those numbers and so we haven't really been able to work with like real data in a meaningful way yet and so this lesson is kind of like the intro to that of like okay i have this giant spreadsheet of data how do i even get that into python so i can eventually get turn it into a graph and so that's what this lesson is talking about of using pandas which is the thing that lets you get all this data into python yeah all right so uh to get started we're going to have to load the pandas library into our workspace um and that's really the purpose of this initial exercise here um we talked about this a little bit the last time we were on um but alex do you want to talk for a second about why we're importing pandas as pd yeah so in python and most programming languages whenever you import a library or a module into the code that you're working with you'll often have to like reference that library whenever you use any of its functionality so for example the pandas library we're going to be using i think the function yeah we can even see over in the right hand side side we're going to be using read csv that function a lot of times and so um we in order to use that we need to say what library is going to come from and it comes from the pandas library so every time we could type uh you know pandas dot read csv basically meaning use the read csv function from the pandas library but because we're gonna have to do that again and again and again it's like typical to abbreviate it as pd or you'll see other libraries do this um uh what is the last time we were loading numpy as np um yeah and matplotlib we usually end up loading it as like plt and so it's just kind of a nice little trick that you can do to avoid having to type out the same long library name every single time yeah exactly so um so we'll just take a look at this first page for a second because i think it's just helpful to see this visual of some data really quickly to get a sense of what pandas is going to allow us to do um and so if you've been following the series you've seen lists you might have also seen dictionaries in python but pandas is really what's going to enable us to load data in a tabular form and this might look really similar to what you have seen if you've ever opened an excel file or a google doc or a google sheet you you'll often see data that's stored in this way and you can see that we have this example has some rows each one references a person and it has some different columns with information it looks like maybe these are sales um so people who made a sale or made a purchase of shoes and that's being collected in this in this data frame and so we're going to walk through these steps in a moment but you can see that pandas allows us to read in this data that's in this new format that we haven't necessarily been able to create with the existing structures we've gone through yeah and furthermore it's like you could do all of this stuff using just kind of base python right you could have like a list of lists that could create this twodimensional spreadsheet like formula but it kind of becomes a huge pain in the butt to like learn how to like navigate that and so one of the strengths of pandas that you'll see is that we can like very easily access stuff by uh column name so we might be able to say like okay get me the give me just the email column that would be way harder to do if we were just using lists for example yeah i actually think in one of the future exercises you're going to see how we can take a list of lists or we can take a dictionary and turn that into a data frame for just that reason there's also some other things that make it really cool and i'll try to demo those as we go yeah we have a good question the chat from quartz three i don't know how to exactly say that but uh yeah so you can import pandas as p and yeah you can totally do that the the thing that comes after as you can kind of think of it as like you're defining a variable name for the library where you can make it whatever you want um so you could do p you could do pd um yeah whatever all right alex we've got a little a slight issue let's see does not seem to be loading let's just give it a refresh see what happens there we go okay when in doubt refresh got it um okay so this first exercise is just kind of walking us through a very basic uh data frame that we can create with just i think this is a dictionary right yes exactly yeah um and so if you look at this example code they've kind of we've kind of walked you through creating this very simple data frame it's got uh three columns name address and age and this structure so if you just look at this piece that's inside kind of the um the parentheses and same thing here if you look at this piece inside the parenthesis this is a python dictionary but we're going to now use a a pandas function to turn it into this new structure which we're calling a data frame so um we can walk through i think this exercise is just asking us to add some more data to this um to this data frame yes this first one is saying okay i can define my columns i can give columns the key name in the dictionary and then the value will be a list of the things that will go in that column these first couple of exercises in this lesson are going to be showing basically how to just create the data frames to begin with and then the rest are showing okay what can we do now that the data frame exists and uh i think that uh this is probably one of the more unusual ways to create a data frame i think probably the most typical one is just loading from a csv file which is a file that you um a file that you might be familiar with if you're if you've worked in excel or spreadsheets um most of the times when i use pandas i'm just loading from a csv file i don't really do this work of like putting all my data in by hand and then turning it into a data frame um but it's good to know that you have the option to do so yeah i think a lot of times one of the things and i should preface this by telling you all that my prefer or my expert languages are and i'm still honestly learning python so this is a learning experience for all of us um but i think one of the things that can happen a lot is sometimes the functions that you want to use can only take certain types of objects so knowing what object type you have and then what you can turn that into in order to get different types of functions from different libraries to work is kind of a useful thing it's always helpful to know what you have and what you can turn it into yeah yeah okay so i think i got this so we added two more columns here where we added a product name column and a color column um little details in here where it's like we're creating a dictionary so you'll notice that um there's a comma after you know after the list of product ids there's a comma and then a comma after the list of product names so kind of this is the way that you create a dictionary in python is that you have the key which is a string and then a colon and then the value which is a list in this case and then that pattern repeated between commas for every item in your dictionary exactly and then you can see i've printed this data frame that i created and so we've got our three uh columns color product id and product name and then you can also see um i didn't actually put this in anywhere but you can see that it's automatically kind of labeled our rows with indices so from zero to three and that's something that i'll talk about a little bit later too or we'll talk about once we get into um some of the indexing stuff in the future exercises but i think it's it's kind of interesting to notice that something is existing here and we didn't even put that in yeah good point yeah another good question in the youtube chat from john david rocha he asks so we mentioned that uh the naming conventions of using pandas as pd is pretty standard and he's wondering how universal is this i would say it's pretty universal john um if you look at like the pandas documentation you'll see that all over the documentation they do the exact same thing where they imported as pd yeah i have taken numerous online classes in pandas and numpy and all of them um have the same convention so i i haven't actually seen it not abbreviated as pd i think yeah me too all right so this next exercise is also creating a data frame so you'll notice we're actually using the exact same function as we were using in the previous exercise so go back for a second so you can see that this pd.data frame x or pd.data frame function is going to do different things i don't know why my my computer is a little slow so this same function can take different inputs depending on what you what you want to turn into a data frame so it can kind of figure out what you want based on what you put in um okay so here we've got a list of lists that we're going to turn into a data frame um and so we've got again uh three columns or sorry three now we've got in each of these lists actually the columns are kind of you can almost see them by looking vertically so uh in each row of our or each list that we're including in here we're actually including um multiple columns of data so this is really our first row of our data frame second row third row etc and then we've got um our column names are another input to this function yeah the syntax is a little bit tricky there where it's like a list of lists and then a comma and then another list so the syntax is a little bit tricky there i think one thing that to highlight here which is another question that john rocca uh said in the chat where he was asking in the last exercise the column or the color column ended up as the first column in the in the data frame even though in our dictionary it maybe wasn't the first and so basically this question is like why did that happen and i think that you'll see um using this method i believe the columns are going to show up um in the order in which we put them in in the columns list here so if the columns are um that go into this list are going to be uh whatever these are store location or store id location and number of employees i think we can kind of force them to be in that order ultimately it doesn't really matter you're never really going to be using these data frames in a way where you're saying i want the second column you're almost always going to be just saying i want the color column so uh you can't you can do things to force the column order but for the most part uh that's kind of unnecessary yeah that was a good catch let's see this works there we go um and it is in store id number employ or location and the number of employees that's the same order as here um that's interesting i wonder if it did it alphabetically for the last year yeah if we go back and look at it hopefully it's up um but yeah good good question john um and yeah uh kurt says because dictionaries don't care about the order so it makes sense that the dictionaries are sorted in alphabetical order right dictionaries don't really have a sense of ordering right in the way that lists do where a list knows what's first second third dictionaries don't really have that structure built into them so you're exactly right uh of course uh it makes sense for them to just kind of default to alpha alphabetical that's really yeah that's good to know and again this is like a a good reason to often to always print your data or take a look at your data and i think in a future exercise we'll see how you can if you have a large data set you can only you can look at a few columns at a time but if you wanted to index the columns based on their index um or if you wanted to pull out a column based on its index then you'd have to know what order they're in so that would be a useful thing to at least be aware of and i didn't notice that the first time i did that so that's great you learn learn something new sophie before we move on actually i want to try something and this is perhaps a tangent but i think one of the reasons why yeah one of the reasons why i like doing these like live shows is because it kind of like shows you if i were taking a codecademy course the kind of stuff that i would be doing and like i really want to encourage people to play around with these workspaces even after they you know pass our checks and so something that i would be interested in is let's say that first list of san diego what if we add a fourth item to the list let's just say like 300 right and so now now we have one row with four columns right we have one san diego 100 300 and then all the other rows only have three columns and i frankly have no idea what's going to happen maybe they'll insert nulls maybe this row won't exist uh so let's see what happens if we try this okay interesting so it just ignored it it looks like in order what if we put a four thing in the column yeah so if we give a fourth column name obviously the 300 should show up and then yeah very nice so if you want to explain what those nands are yeah so nan stands for not a number um and so basically this is missing data actually i'm curious so i usually i work in r where missing data is is identified by like an n a and then usually not a number comes up when let's say you've got two columns and you want to calculate a proportion or something so you divide one by the other and that creates division by zero in some place which you can't do and so usually not a number shows up in r when um when you've got like a a numerical error a numerical error um is nan just like all missing data in python so no i don't think so but again this is something that i would uh so i don't really know the answer to this and so to figure out the answer i would probably experiment with it and i'm guessing that because we put 300 as that value that exists it's like forcing this column to deal with numbers if we change that to a string i bet we get something other than nan yeah oh yeah interesting yeah wow so fun okay uh shall we move on yeah so so that's again that's a good example of one feel free to like play around with these workspaces um it's a really great way to learn what you're dealing with and then two like don't be af like don't be afraid if you don't understand something right it's like more important to know how to deal with it so it's like oh these like mans um popped up and you don't really know why but it's good that you at least know that they're represented as nans rather than nuns um so it's just like the more you experiment the more opportunities you have to like understand what's happening behind the scenes yeah totally and you know after this i probably will go and look up all the different forms of missing data in python to understand them because it's also an important thing to be able to understand like i would also want to know at some point whether this this none if that's being read by python as a string or if like python is or if we're able to recognize that that's really like missing information yeah um we have some yeah so we can go on to the next one sophie but as we as we go on to the next one we have some good questions from siddharth i hope i'm saying that correctly how do we force convert nand values in a data frame to a float or an integer like some columns all at once um i believe we have some exercises later on in codecademy that deal with this concept of like kind of tidying up your data of you have you have a data frame and you have like empty values or you have null values and so there are definitely some functions that you can use to say okay automatically replace all nands with zeros or um i'll replace all nuns with the empty string or something like that obviously there are like consequences for doing that where now you have zeros everywhere and your averages might be all screwed up but like there are ways to to do that sort of thing yeah yeah there's it's a whole separate course on what to do with missing data but um there's definitely functionality you do not know it off the top my head yeah neither do i okay uh so i'm actually going to skip this exercise well okay we'll we'll do it let's talk about the co yeah let's talk about the content and actually sophie i i don't mind so there's a there's an annoying bug in this exercise and i don't mind if you like talk about it and why it's an annoying bug on codecademy right now okay sure um yeah i was bothering alex about this yesterday uh in prepping for this i went through um this exercise so first let me give you the context so this is an exercise about comma separated values or csv files and basically most spreadsheets could be converted to a csv file it's one of the most common data formats that i've seen so if you have like an excel or or a google sheet you can save it as a csv file and then read it into your workspace in python using pandas so this exercise is really just showing you what a csv file looks like and basically you can imagine that this is a data frame we want to create and so if we're going to save this information in a csv file then we need to save it um basically in a file that ends in dot csv and the contents of it is going to be each row will be its own line and all the values in that row will be separated by commas comma separated values and so this exercise is asking you to create a csv file that would have all of this data in it um and so what i did because i was feeling a little bit lazy and i didn't want to type this all out is i copied um i think you guys saw me do that but i'll just do it again so um i i copied this oops um copied that all the contents of that table and pasted it in uh to the uh the csv file and then i went back through and i deleted all the spaces um and replaced them with commas and then and i'll do that really fast and i guess as sophie is doing that i'll say the and watch out i think birthday cake is one entry oh yeah i'll say this exercise is showing what a csv is and then i believe the next exercise is saying like okay let's assume you have your csv file it's ready to go let's show how we load that into python using pandas and create a data frame out of it so this this exercise is really just kind of trying to show what a csv is um and as sophie will show here this is a kind of annoying bug because we i imagine that many people will just copy and paste uh that data in um so it's smelling this um and it turns out that the reason is in this whatever this font is this is like a curly um apostrophe and it's not getting recognized here we want this like straight apostrophe um and so if i delete that and replace it yeah so this is this is like really not important this is just like a nice little like uh how codecademy works for those of you watching this stream where for uh our backend test that is testing to see if you've done this correctly is we are we're checking to see if your text literally matches the text that we want it to match and we are using one type of apostrophe that's not like this curly apostrophe in the test but if you copy over all of the information from the left pane over here it has the wrong kind of apostrophe it's a very easy thing to fix i think after this uh after this lesson sophie i will like go fix it but uh you know those of you that that use codecad me i'm sure you've run into buggy tests um before and uh sophie and i found one and we'll hopefully go and fix it soon we'll fix it um okay so now we get to some of the fun stuff yes this is this is where those first exercises just gotta get our framework together and now we can actually load in some data yeah court says it's an important message the devil's in the details and yeah you're exactly right like this different kind of apostrophe was really screwing it up so funny yeah it's funny i definitely um you know as i'm going through these exercises i'm having i think the same experience that a lot of our learners feel when you know you get somewhere and then it doesn't pass the test and you just really want that green check mark as the self validation that you know you're doing and so when you find silly little things like that it can be frustrating but yeah it's good to it's good to like one of the benefits of doing these courses is that we get to really like user test them even yeah this course came out probably over a year and a half ago and so it's good to get kind of fresh eyes on it yeah totally um okay so now we're gonna get into some functions to read csv files into your workspace and also to write csv files and so that means if you have a data frame that's already created or you've worked on that data frame in some way you've modified the data created new columns you can always create a csv file again on your computer um so alex do you want to maybe talk about like why that's so powerful that you can you can both read and write csv files yeah sure uh oh did you add did you ask me to talk about it yeah i see yeah so um yeah so reading csv files is is really important because a lot of times that's where your data sources will come from if you look for you know data online the i would say the majority of the time or at least the the format that i'm most comfortable with dealing with is data that comes in a csv file um so they're yeah so that's the importance of reading it is that that's kind of the format or one of the formats that real data exists in a lot of times and then yeah uh being able to write to a csv file is really powerful because we'll be able to do something in python and do something like fairly complicated right let's say you're um i don't even have a good example but let's say you do something fairly complicated in python and you end up with this data that you want to show somebody else but not everybody knows how to use python not everybody could take uh you know take your python script and know how to run it and know how to interpret the results and all that sort of stuff and so it's really powerful to be able to then write to a csv file that you can then give to someone and they could open it up in excel and you know if they're trained to use excel properly they'll be able to do whatever they need to do with it so um yeah writing a csv file is really important for basically just sharing your work yeah yeah a lot of times um when you're working maybe you're working with pandas you're trying to clean some data and so you've got this really messy data set that you have to fix the missing data you have to create some new columns maybe delete some columns delete some rows and so you're making all these edits and sometimes also you just don't want to have all that code in the same place where you're making let's say your visualizations or something else so um a lot of times what i'll do is i'll have a script that does all the cleaning and all the data modification and then i'll write the i'll read in the data i'll modify it write it again and then i'll read that new data set into a new script um that actually does like the data visualization piece and i think that can also help um make your files a little bit cleaner and have clear purposes for everything every set of code that you write um yeah which i think is yeah i do this for my job all the time where again i'm a curriculum developer so i'm one of the people that is are making these lessons and so usually i develop my lessons on my own computer using something like python and i kind of need to like then take the output of that like i'll i'll make a csv file that i then need to like move into codecademy um and so i will you know have my local python script on my computer uh export the csv uh file from python to my computer and then upload that csv file to codecademy um yeah um okay so i have while alex is talking um written a line of code so this is just using the p pd dot read underscore csv function um so the read underscore csv function from pandas i'm giving it the name of my file and so codecademy under the hood just has has already given you this csv file in your workspace i think it's here yeah so sample.csv exists in your in your file structure and so pandas can read it in and i think if you're working on your own computer we have some off platform projects that will show you how to get it set up so that um so that you can read a file in from a different location i wonder if alex froze can anyone in the chat just let me know that you can still hear me since i do not see alex i'm gonna keep talking for now but hopefully somebody can let me know that we are still online um okay uh so let's go ahead and look at this uh still haven't seen anyone okay i'm gonna keep going but let me know okay yes you can see me great thank you um all right perfect thanks uh okay so we're gonna take a look at this data frame that we just loaded um so this looks just like what we saw in the other exercises but now we've been able to load the csv file from our workspace into python and we've called it df um short for a data frame i think a lot of times when you're just working with a random data set and you want to save it as something quickly people try to pick like a short name that they can use really really quickly and df is um probably the most common one that people kind of come up with you're back sorry no you're good i was like am i did i internet or did you but it seems like oh yeah yeah john david says sorry the slow chat makes it tough to respond sometimes yeah yeah thank you guys you guys are the best sorry everyone i just moved uh locations and this is the first time testing out one of these streams on uh the the new building that i'm in so internet might be uh might be a tad touchy no worries um so i was just saying we saved this as something called df and then we were able to print it in our workspace and it looks pretty similar to what we saw before we noticed that that same thing is happening here where we've got the numbers um 0 through 4 kind of automatically listed here and i can pretty much guarantee you those are not in the actual csv file i wonder if we can kind of see oh yeah so you can check so those numbers were not in that csv file but just like when we were creating our data frame from a list of lists or a dictionary we're still getting these um indices and so we can come back to that uh when we get a little bit further along but i think it's again useful to know that those are there okay nice um all right let us go to the next one um okay so this is like this this lessons title inspect a data frame really is probably the most important thing that you need to know how to do in order to do data science like looking at your data and ex inspecting it to understand what's going on is by far the most important step before you do any sort of visualization or anything else like any sort of cleaning um that's what you you need to do to get started yeah in most in most of our curriculum this is like kind of the first step that we'll always have you do in a new lesson of like let's just get familiar with the data that we're working with guys my mom is watching this and she just texted me i can still see you thanks for summer um okay so uh let's take a look so we've got a couple of functions that are going to help us take a look at this data set so i think i mentioned this when we first started um this dot head would you call this a method or a function this is a good question i probably against my better judgment use those terms pretty interchangeably technically a method is like belongs to a certain class and so uh i bet you could make the argument that this that head it belongs to the class of data frame meaning you can like call the head method on data frames um so yeah i think method works but uh i know in codecademy at least we might use those somewhat interchangeably when they have strict definitions um but so for me that's kind of something that i shrug shrug my shoulders on where uh it's important to understand like the concept of these things and like these precise language is like not super important um okay especially yeah i never so i think the hardest one of the hardest steps for me and kind of getting used to doing some of the data analysis stuff that we're doing now in python is that um coming from an r background i was not really used to this idea of like objects and methods and uh things like that so that is a little bit new for me i was basically the reverse where i i learned programming in python so i'm super familiar with python and then i recently wrote our courses for codecademy and it was my first time using r and yeah it's definitely very different yeah okay so we're trying to do this the other thing that surprises me sometimes about or that confuses me i think a little bit about methods and maybe you can clarify this maybe other people have the same question is that that sometimes when you use a method it like changes the object directly and then sometimes you have to like resave the object uh in order to keep that change yeah so we'll see that come up and it really happens there's no strict like it can't always do this or this always happens it really depends on the method but yeah i think you'll see us talking about this of like it happens in place versus it like returns a value and i think that this comes up in um like adding to us uh an array where you can do you don't have to do like let's say you have an array named a you don't have to do a equals a dot add you know whatever number you can just do a dot add number and it does it in place it automatically overrides what it used to store there and so there's no strict rule as to like which ones do it in place and which ones don't interesting yeah it's something that like it's a place where i feel like i commonly make mistakes in python where i'm like why isn't my data frame updated and then i realized it's because i didn't resave it and i needed to yeah as as lisa who i know is in chat said earlier just like print is your friend right if you're ever curious about like what you're even working with just just print it out yes okay so i have um loaded this data frame called imdb.csv into a data frame called df using the read underscore csv function and now i guess i'll do that first step and now let's say that we want to see some of the rows of that data that data frame but we're not sure how many rows there are and so you know if there's a million rows we don't want to try to print those all out at once so we can use this dot head method or function or whatever you would like to call it to see the first few rows and so you'll see them over here and that gave us uh five rows um and then you can always i think this was in the explanation or in the narrative as well but you can always change the input to a different number so if we wanted 10 rows we could put a 10 there i think five is just the default so um oh it's yelling at me because i didn't do the next step um so now we've got 10 rows okay and then we can also use uh the info method to get some more info about our data frame and so i'm going to do that down here um you'll notice so when we print the um the first however many rows it prints over here uh alex do you want to explain like what's going on here yeah i was gonna do that in a second uh let's do info first and then we can talk about it nice cool so yeah so down here you can see the output of df.info and so it's telling us a little bit about the columns it tells us what each of the columns are how many values are in there and how many are not null i assume that it tells you if there's a null value in there how many nulls there are interesting um yeah i wish there was an easy way for us to like add a row with the null value i don't know that syntax off the top of my head um yeah but that's something that we could uh get trying to play around with um on thursday for sure yeah and that tells you the type as well yeah um so yeah a couple of questions there are a couple of things to go over one is that lisa in chat is asking about the tail function um so sophie as i talked you want to like experiment with tails see if you can give a tail a number see what that does um yeah and then the distinction between these kind of two panels that are showing different things one is this uh panel on the right hand side that is showing our data frames kind of nicely printed out and then the other is this black panel with white text so the one on the right is kind of our fancy like codecademy rendering of the output where you'll see that at the top of all these files we import codecademy lib again this is like kind of behind the scenes stuff that you don't really have to worry about that much but that is the thing that will take the output and transform it into this like very pretty you know table that you can scroll and spaced out secretly this is like an html file and uh uh yeah it's just an html file um but if you're doing this on your own computer you're not going to have a nice pretty printout like that you're just going to have your terminal which will look something like this um so when you print out a data frame just locally using your terminal that's the kind of thing that you'll see yeah and this is part of the reason why i like um jupiter notebooks so much is that uh jupiter notebooks will do this for you they will make it make these things look nice but also print out um your typical like code results yeah terminal results terminal results yeah so it'll it'll kind of format everything nicely and as somebody with a little bit of ocd that is something that i appreciate yeah um okay so so what did tale do there as a oh yeah yeah so tail gives you the last five rows cool um or however many rows you want yeah yeah that was a good good point with someone with i don't know if it's ocd but i it's someone who likes movies i'm trying to figure out what this list of movies is it might be highest grossing of all time but i don't know maybe we say somewhere in the narrative what you're saying yeah cool yeah oh and then the other thing that i think um i think we mentioned this in our last live stream um but i think it's not covered so much in this lesson but i'm just going to show really fast another thing that's and this is maybe to add on to the point about it's important to know what kind of object you have because it alters the way that you can work with this information is that now that we have this in a data frame uh each of these columns is going to give us some different behavior than what we saw in lists and dictionaries so now for example if i wanted to like add a number to everything in this column i guess i shouldn't do this until after we can pull out a column but um i could simultaneously add a number to every value in this column so all of a sudden these data frames are going to be operating in a different way than our lists and dictionaries were operating and again in a way that's like probably easier if you caught the last session that sophie and i ran we were showing like these really kind of confusing list comprehensions which are trying to add you know five to every item in the list and it looks really ugly and again the point of data frames is that it makes it super easy to do you can essentially just say get your column and plus five and it does it automatically yeah exactly okay let's see what we've got now so this section is now getting into uh selecting columns and i think this is probably again a very very important thing to know how to do and one of the powers like alex mentioned of pandas because now we can kind of pull out rows and columns of our data in a much simpler way than we could have with a list or a dictionary um okay so let's see um we've got this data frame i'm gonna go ahead and um and just print it out um so we can see actually now it looks like we've got a terminal yeah so we can see what this looks like in a terminal we don't need that import codecademy lab at the top of this uh now that's another little thing that we can go back and fix eventually oh yeah i like to i've been working on this on my own and pulling this window really wide so you can see all of this data but now you can see yeah so it's got all the same information it just doesn't look quite as fancy um all right so but it's giving me this thing because it's telling me we didn't do the exercise oh yeah okay so it's asking me to create a variable called clinic underscore north that contains only the data from clinic underscore column clinic underscore north so basically we're going to try to pull this column out of our data frame so again this is really the first opportunity that we've that we're really seeing the like power of uh of these data frames where this is something that would be a real pain in the butt to do in basic python but super easy here yeah so okay so we're gonna just use this syntax so um the name of the of the data frame and then the name of the column that we want in quotes so here we've got clinic underscore north and we're going to save that as what does it want me to save it as clinic underscore north um and run and now it looks good um i think there's a point that gets made earlier in this it says um or maybe it's in the next one about oh it's in the next one but um saying that you can pull out a column using this other syntax as well so like the the name of the data frame dot the column name oh it is here sorry and it says if it um doesn't contain spaces or special characters um which makes some sense so one of the things in the spirit of kind of playing with this workspace that we might want to see is what happens if some of our column names have spaces so i'm going to try that i'm going to put a space in here and then try to so we were able to do this but now i'm going to say like print df dot so let's first print clinic north because we never printed that out to actually like show that it exists and look at that that column on its own that's a good point but then yeah i love this idea of trying to add this space oh yeah and also sorry the second part of this uh exercise also has you print the type of um object that this is which i think is also very valuable um because then we see so oh good question from corey in the chat i see that we'll touch on that as well so here's the um the north column that we pulled out and then you'll see that um that this is now saved as a panda series um and the whole data frame is if we do like print type df that's going to tell us that our data frame is a is a data frame but now that we've pulled out a single column it's become something called a series so we noticed that when we pulled out the column the type of data changed which is relevant to now well yeah and that's relevant because it's like the things that you can do with those different data types are different so like obviously a data frame it understands what this bracket notation is where if you say the data frame name and then with the bracket it's going to try to grab that column if you try to do that with a series i think it will just error i don't i don't know what the expected behavior for that is but basically there are different things that you can do with series different things that you can do with data frames um this is something that i was chatting with john in the chat about where you can kind of think of a series as a vector um sophie that's where you're like yeah vector edition stuff is going to come into play yeah john just said that yeah you can think of a series as a vector in a data frame as a matrix that's exactly right totally and i saw there was this question about the double brackets versus single brackets and i actually think that that changes the type so i think if i put the double brackets and then we print here i'm going to delete this i'm going to delete this to make ourselves a little more space i think that what happens if i run this yeah so now notice that the type of clinic underscore north is a data frame interesting even though it's still only one column it looks like i just read this because i was looking this up the other day as i was going through this x exercise um but yeah so the double brackets keeps it as a data frame um versus the single brackets turns it into a series and so this is relevant at this point we only have eight minutes left so i think we should like kind of abandon the rest of the lesson and just like continue talking about the points um all right anything you want to say about this yeah so this is this is relevant because we hear you alex oh no shoot i'll leave and come back okay all right i'll keep moving hopefully you guys can hear me um okay so i'm gonna go to the next exercise and we'll start selecting now multiple columns so in the last one we only got one column at a time now we're gonna pull multiple columns out of our data frame so and this kind of goes back to this double brackets for single brackets situation so basically if you're going to take multiple columns out of a data frame then we're gonna pass we're gonna have to pass a list of the column names in order to extract those um and just in the same way that we were talking about how the single column became a series it was really because and i know maybe not everyone is familiar with the word vector but a vector you can think of as like a single string of values and so when we pulled out one column we just had one string of values um versus if we have if we're taking multiple columns then we can't really have that turn into a series anyway are you back alex yeah sophie can you hear me oh i can't hear you i think it's on your end is that my problem or you are see people in chat were saying that they could hear me yeah before so maybe uh i'm sorry guys am i muted nope huh you can hear both of me both of us um um we only have like five minutes left and so i'm gonna let sophie just like close out the show and um my mom is also texting me to let me know that you can hear me okay uh i guess i will i don't know sorry everyone um oh that worked oh hey now can you still hear me yeah okay maybe your headphones died i've died okay i'm saying we're basically out of time so i want to plug all of the events that we have going on uh in the future i also want to thank everyone in chat this was a really awesome chat today um john david roca you asked great questions uh courts this is the first time i recognized your name in here so thank you for joining lisa as always you're awesome for checking these out um corey nice to see you i think i've seen you before corey um so thank you all for coming i really really appreciate it honestly it's like these are the like sophie and i love doing these things and chatting with you folks and um we're always hoping to get more and more people watching so i am very appreciative for all of you that you know hang out with us for an hour um i i wanted to plug the thing that we have on thursday so if we um let's see so the thing that we have on thursday if you're a pro member and go to the events page you should see an event on thursday that sophie and i are going to be hosting um it isn't stream to youtube it's just a zoom call that you register for and then you basically can get on the call with us and talk through this stuff um so that's when we'll have more time to do kind of deeper dives into all of this stuff um john if you can make it i would love to talk like more matrix math stuff with you um i think a potential plan for the day might be to tie all of this to data visualization in some way where like this entire session really has had nothing to do with data visualization so taking a little bit of time to tie these data frames to a data visualization um so yeah so if you go to the events page which is that and you're a pro member you should see an event for thursday the 23rd which sophie and i will be running yep cool right here sophie i'm sorry i feel like i just took over uh no that looks great i'm sorry that my uh technology was not fully on my side or either of our sites right now but um but this was really really fun like alex said this is like one of the highlights of my week um i love getting to talk to all of you and it's awesome that people were engaging with us and asking questions in the chat that always is a lot of fun and i definitely learned some things myself in this and i have some things to look into as well um so i'm really excited and i hope people show up on thursday to keep talking about this because it's always more fun if people have more questions and there's more to be learned so yeah um john david you asked will the call be saved for viewing offline i'm gonna be out of town but maybe i can join zoom remotely on my cell phone i can try to set it up so it's um recorded um after the fact um in fact i'll do that i don't know exactly how that works i haven't like dove that deep into the the zoom stuff yet but i can try to set that up and then as always um uh you know feel free to reach out to us i always post my email on this stuff um i'm a koontz at codecademy.com um yeah again feel free to shoot me an email about any of this stuff if you have feedback um we'd love to hear it if you would like other things for us to be doing on these sessions i would love to hear it so um yeah love to it's fun building these kind of shows with you all yeah and feel free to email me as well um mine is sophie academy.com yeah cool great all right i will stop the share and i don't know how to how do i turn it off yeah if you just let me find