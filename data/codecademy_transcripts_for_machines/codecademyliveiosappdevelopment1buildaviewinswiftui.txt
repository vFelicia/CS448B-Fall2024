i think we're live all right how are y'all doing are we live think so yeah all right you think we're live how we all doing neat cool welcome to uh codecademy live so what we're going to be doing in this session is to be starting to learn how to build some ios apps welcome to everyone coming in now at the live stream and hi deb people who are joining at some point in the future excited to have you all here we'll be keeping an eye on chat throughout this so feel free to have any questions or anything else you want to chat about as uh things come up that we're going over uh so we're gonna get started in just a sec but before we do just a way of introductions my name is ben and i could count me for about six months or so and in previous lives before this i used to be a middle school math teacher an ios teacher at a boot camp and an ios developer at a point of sale company so excited to be sharing some swift ui stuff with you in this live stream series so we're starting today and galena yeah um so hey everyone my name is elena i'm a curriculum developer here at codecademy alongside ben on the mobile team and we've been working on some ios content that we are very excited to share with you today perfect so without further ado let's hop right into it here so go ahead share out what we're going to be looking at so this is our skill path here so what we're going to be covering is a lot of the same content from our skill path which is build ios apps the swift ui so as part of this uh skill path center platform we teach you how to work in swift how to learn the basic building blocks of the language and then also how to build out an application over the course of this live stream series we're going to be skipping some of the language stuff and getting right into the swift ui content and focusing on how to build your own application in ios so a little bit of a preview of what that's going to look like is it's a little quiz app that we're building out so you're going to be able to present them with some information upfront and then guide people through a quiz that they can complete so we're going to be building that out together if you have things up and running where you can be building that out yourself great if you want to be following following along and just learning and picking up later that's good too so let's go ahead and get right into it so we're going to be building out some kind of quiz app so if you don't have xcode installed already and you're interested in building some ios applications xcode's going to be the best place to start so how do you do that in the app store there is an application which is called xcode which you can find in the develop category and inside here i have it already so i just have open next to it if you don't have it and you want to download it now so you can follow along live follow along later then you can go ahead and get that so you can follow along i already have xcode so i'm just going to go ahead and open it and then we're going to be building an ios application i got a bunch of projects here i've made before but we want to start our quiz out fresh i'm going to go ahead and build a new project and we can see a bunch of options come up for what we want to build now expo is a great tool for developing anything in the apple ecosystem you can build things for all platforms build ios apps you can even build watched apps or tv apps so there's a lot of great tools you have access to we're going to go ahead and just build an ios application here now this is going to be some kind of close outlook let me get some lights back on there we go so we're going to be building some kind of quiz app here uh and josh about an hour or so for this particular live stream then we have four of these in the series uh so we're going to go ahead and call this some kind of quiz app for team i have this as my personal team if you don't have anything yet you can set that up with apple it's not really an issue bundle identifier don't have to worry about it all and then the big thing we have to make sure is that interface should be set to swift ui there's really two kind of frameworks for building applications using ios it's either swift ui or storyboard supposedly is the newer way that was introduced by apple a year or two ago so you're going to want to make sure that you're using swift ui to take advantage of like the new tools that it has to offer uh keep this as swift ui app again new swift drive way of doing things and make sure the language is swift don't have to worry about core data and tests and then you can go ahead save your project wherever it is that you want to save your project click create and then it will go ahead and pause for a second and generate an initial project for you now before getting into it let's take a look at what we're presented with in the xcode interface here so we have our files on the left so we can see all the default files that are made when we have gone ahead and just created something we have our content editor in the left here where we can go ahead and be writing code we'll be mainly in there and you can look and see this automatic preview updating pause which is interesting let's go ahead and resume that if you don't have anything up there yet then you can go ahead and find that same thing to expand this in this option right here is what makes this canvas show up now you notice when we do that that we have a little iphone that shows up right here you can choose what kind of iphone you want by selecting it from this menu so this is an ipod touch we're looking at i have not had an ipod in quite some time uh so if you want to be switching it to a different kind of device you can go ahead and switch that from this menu here so you can see what it looks like on let's say a 12 pro max and it'll go ahead and start here and preview everything that your application has so far you can also change it not just to iphones but you can also see what it would look like on the ipad and so then after pausing for a second they'll go ahead and show you big interface right here and yeah all the content from the live stream is going to be saved and you can view it from youtube afterwards great so we can see already there's a lot of ways we can be previewing our application so that's a great place to start let's go ahead and make something that doesn't just say hello world in it i'm going to change this back to the iphone at 12 pro max and if you want to as well if you have an actual iphone you can plug it into your computer and then right here instead of no devices your actual iphone will prop up and you can build it right to your iphone and use it there for now we're going to be working inside of xcode as the tool here so we're going to have our preview window right up here make sure that it's going to load in so we have our hello world text great now we want to make a quiz app we just don't want to say hello world so let's go ahead and start editing when you click on the text in the middle we can see that it selects the text in the editor and also shows up a bunch of options on the right in this attributes panel you can go ahead and make sure that this is big enough for you to see i'm just going to put this presentation though real quick uh let's always forget where presentation mode is all right i always change where uh settings are all right let's not worry about that too much fun zoom in okay so we can see that it tells us we've got our text here as we select it now inside the attributes panel we can change a bunch of the features of what this text looks like we can say something else like this is new text and then we can see it changing in our actual simulator in real time after if your preview is an opening then make sure to select here and click on canvas and that goes ahead and it shows and hides it and sometimes it's just really slow if it's just being slow just give it a couple minutes okay so we can see that we can update the text here great so we can change the text and we can also change the text from this side so if we want to go ahead and call this something like quiz time we can see that as we type it changes in live updating here so we can go ahead and see what it looks like so we've got our quiz on great now it's a little small it's in the middle of the phone usually apps don't look like this so we might want to add some styling by clicking on the text again we can go ahead and check out the different modifiers that are available just like if you were in microsoft you know google docs microsoft word or whatever you can go ahead and change any of the properties that you're interested in it's a little bit small in the middle so let's go ahead and change this from inherited just means take whatever anyone else is doing and change that to like large title now a couple things happen we can see that the preview updates the text becomes much bigger which is great we can also see this modifier added here on line 13. what this means is that we applied this dot font modifier to text which makes the font appear as a large title instead of what it was by default just like we can change it from the attributes menu here we can also change it by going into this editor here and changing from any of these options for what we wanted to look like so we could say is a footnote going to be the right size and then say oh that makes it much smaller so that's probably not what we want and we can go ahead and change it back to a large title typically as you build bigger and bigger applications you do more of your work by working in the editor directly it's a really great tool to be able to kind of quickly see all some of the options available we can change the font we can also change the color so we can make this text any color we like so we can change it to be read instead of something else and then we can go ahead and see that update as well great starting text is pretty easy so we can have this is all starting off our application already has this here for us we can just go ahead and play with these modifiers my zoom video is covering the top part i drag the right side uh sure let me i'm going to start dragging things out thank you for that and you can let me know what seems reasonable how's this better we'll say this is better okay go ahead and keep fixing if we need to this looks good okay cool uh so we've gone ahead and added some text to it now let's say we want to have more text usually we just wouldn't want just one piece of text in the application we want a bunch of stuff that we were saying so there's a bunch of ways we can do that the easiest is we can look at this little plus button right up here this lets us access the object library which has all of the different things that we can add to our application by clicking plus here we can see all of the views that are available to add into our app we have buttons and color pickers and forms and labels and all the other good stuff that we might be interested in putting together so we can go ahead and get started by adding another text view we can see all the different kinds of text things that crop up and then just picking that up and dragging it into our application now we can't just drag it down here it kind of needs to know where it fits in so we're going to go ahead and wait till it tells us it's going to do something and here we say we can see that it says add text to a new vertical stack along with existing text so i'm going to drag that in right here and release now we see that this text added in the editor as this preview is updating it's okay if it takes a minute to do that sometimes it can be a little bit slow and now notice here that something else got added as well it doesn't just say that we have the text and we can see the text show up here we also have this v stack that just kind of appeared when we drag something in a v stack stands for a vertical stack means we want to have a bunch of different views that are all on top of each other so the other kind of views which we're going to see later you can have horizontal stacks which mean you want your view side to side and you can have z stacks which are when you have your views kind of stacked up on top of each other like pieces of paper so let's say here for our quiz we'd want to say maybe what question we were on so we could say question one of four and we can see as we are changing the text here our previews can be updating and then once it wakes up it'll go ahead and then update here now let's say we want to add another text we saw that before is added to a b spec let's go ahead and try adding the text ourselves without trying to use this object library so let's do it directly in the editor i'm going to go ahead and try to make a text right here and see what happens so maybe this should be the question itself question here now note when we put this question in something weird happens we can see a whole other phone appears below this a whole other simulator so what's going on here now what's happening is that it's getting a little bit confused because it thinks that it's only able to display a single view at a time even if that view gets really complicated like we have a vertical stack that has a bunch of horizontal stacks inside of it those horizontal stacks vertical ones our content view our main piece of uh information is only going to be able to display one view so if we try to give it two things it gets confused and says i can show two different things but i don't know what i i only know how to be working with one view at a time so what we can do to resolve that is we can just move that inside the v stack we can then go ahead and get rid of this here add it back in the v stack then our second preview will go away and the text will appear under here great that's a little placeholder question and we'll go ahead and change these later on let's make this something uh something tricky like what is one plus one some tricky we'll figure it out now we can see that the text kind of bunched up here so let's go ahead and fix that by looking at some more modifiers so if we click on one of these here we can see a bunch of options appearing same as before we messed around some of the font before let's go ahead and look at this padding option now you can see that we have a bunch of different sides we can add padding on and then this little check mark here so if we turn this on it adds a padding property and then just gives a little bit of breathing room for the view you can customize how much padding you want or which sides you want it on but most of the time working with defaults is going to be fine until you get to be building more complicated user interfaces so we can do the same thing with our question itself and we could probably make the question a little bit bigger too let's go ahead and take care of both of those now that we've seen the interfaces for doing that let's go ahead and then change the uh font from this to let's say title nice and big get to see that update which is great then we can go ahead and also change this to make sure that it has the padding it needs now you can see that this kind of has this weird placeholder everything where it kind of looks like regular text but you click on all of it this is what the default is that it's giving you you can either just use the default or in this case padding by itself just defaults to padding around all sides which is going to be more than enough for our main use case here okay so we've gone ahead and we have some basic information here deployed uh our quiz doesn't do anything right now though we've got our title we've got our question we got nothing to actually select on and it's a little bunched up still even though we have that padding uh it would be nice to have the quiz at the top like a proper title or a heading and then the caution text right below it and then this kind of somewhere in the middle so a really important question when you're working with applications and app developments is how to position things on the screen different technologies have different ways of presenting information if you're used to web development as well you've probably heard of or used css to be able to lay things out which is kind of the set of rules for what things should look like in swift ui we have our own way of determining layout and we don't need a separate file for it we can do that all by using special kinds of views that tell other views how they should arrange themselves one of those kinds of views is called the spacer a spacer is a special kind of view that just takes up as much room as it possibly can so inside of our v stack if we want to go ahead and push this to the top and push this kind of to the bottom we can put a spacer right in the middle is here and just say go ahead and stretch those out and have the spacer take up the room that it needs so let's go ahead and add that spacer in and we can see that we can position it anywhere we like inside we can see the text added in the editor and then once this goes and updates we'll go ahead and see what kind of impact that's having our code great so we can see that all the space up here is taken up by this new spacer view which is just saying hey stretch it out give us some breathing room between the top and the bottom now let's say that we say well the question should be all the way at the bottom we want to kind of push that up a little bit we can use another spacer to do the same thing we added before using the object library we can also go ahead and add that just using copying and pasting in our editor here and as always we want to just kind of wait and check in to see what our updates looking like great we can see that it now looks like it's in the middle here for where our question is uh if we wanted to bump it up a little bit more a little bit less we could either change the spacer to make it take up a different amount of room or you can kind of use a little trick to have two spacers which tell this to be proportioning itself a little bit differently having two spacers below it and one spacer up above kind of gives you this ratio where this should be twice as big as this so you can use a little bit of that reasoning to try to position where you want your views to be okay so we've got some introduction up at the top we've got what kind of question we're on and one we've got some question text that we have in the middle now it's not a very good quiz if we don't have any way of actually answering it or anything that we can address to be kind of working with our quiz so how can we actually add in some options for answering well we can add in some buttons for interactivity so something we can tap on to actually have something that we can work with so let's go ahead and add a button again we can do that either using the editor and just start typing it in seeing what happens or we can kind of browse around the object library to see what kind of views are good we can see button right at the top here selecting it tells you a bunch of different information about all the different things that you need to use for it and that's all things that you'll work with more as you start to be building more complicated apps so we can go ahead and take this button drag it right in and we can notice a bunch of different options uh we can see kind of what we were hinting at before can make it show up horizontally somewhere we actually just want it to be part of this part of this vertical stack right here so i'm just going to insert it in this vertical stack and we can see that we actually wanted the bottom so let's go ahead and fix that and now let's take a look at what happens when we add our button it's it's usually useful to look at some of the keywords you get with what swift is telling you for uh what's showing up here so we can see that it wants some kind of action and some kind of content so the content is going to be the view here that is the button is displaying uh and kathy if you're seeing it can't preview uh good tips are to try to go ahead and just close and reopen your canvas here to build again using command b or just to quit xcode and reopen it again xcode has a lot of great virtues as a piece of software that's also known to be a little bit finicky sometimes so sometimes just trying to like turn it off and on again can be a good step in the right direction especially because swift ui is a very new technology so what do we do with our button here so we've got our content this is what's displaying here we can make our content what we want it to display so we can make it a text that reads what we're interested in so we can say this should be a text that says let's say two seems like a good way to answer this question and then once our preview updates it'll go ahead and change it to what we just changed it to here nice and easy now this could be anything it doesn't just have to be a text you could have another button you could have an image you can have another kind of view that we that you can preview from here often text is going to do the job just fine though now the action is a little bit more interesting so we want our buttons to do things when we select them right now if we just go ahead and click on this it wouldn't do anything we haven't specified what we want to have happen when the button is selected that's where this action comes in so what we can do for the action is we have a little bit of a strange syntax for it if you uh that we use these open and close curly braces here now if you've used some other programming languages before and are familiar with the concept of a callback that's essentially what we're adding in here so callback in javascript or like a lambda in python is kind of conceptually what this is but for now if those are new terms for you or this is all kind of some new things that you're learning that's all good and then you can think that these curly braces you just put as bits of syntax and then what goes in between them is the thing you that you want your program to do so what do we want our program to do when the box was tapped well we wanted to let's keep it simple initially by just having it print something to show us what what happened so we can go ahead and say that this should print you selected to so when the preview updates nothing should happen right away since we haven't changed what this looks like we've just changed a little bit about what the behavior is okay so now we have this what is one plus one we have this two here let's go ahead and see if this works let's go ahead and click this run button to start our live preview of the application here now you'll notice that you have this live preview button right now we're just kind of looking at it in a static state where we can click on things and edit them we can simulate what a real phone would look like by clicking this plus button this play button here when we do that the preview will load for a second and then it will go ahead and display as the regular kind of phone interface here now note that as i click on things it's not changing anything on the right anymore because this is kind of a real phone that we're simulating now we added a button we wanted to print something which in swift is just the keyword that shows something up just for people who are working as the developers for it if you are an end user you don't get to see anything that's printed that's just for you to use as your developer so let's go ahead and click on this it doesn't seem like it's doing anything yet while the canvas here is usually pretty good at displaying the same things that a phone will it's not always exactly the same it's a pretty new tool that was added as part of swift ui so there's some elements where it doesn't do exactly the same kind of thing that a real phone would do so how can we see if this is this button is actually working well there's a great tool that you have access to in uh an xcode which is not just this canvas here but you can actually create a whole like fake instance of an iphone a whole simulated iphone and play around with that to get to see what your application does instead of clicking the play button here we have a play button here let's go ahead and click on that and then get to see what happens we can see that this time it has this kind of lengthier build message it's actually always doing that a little bit in the background it's always trying to build and run your app okay so now we have this whole other phone here which is this whole other program you can kind of see from my bar here i have this simulator that simulator is this program right here that we're running and this preview is pretty simple there aren't a lot of options that you have inside of the editor for it this simulator is a full feature does a lot of different things you can rotate things you can take things so it's always good fun you can rotate it you can change what the keyboard looks like so you can simulate face id lots of different things you can do with the simulator so we can go ahead and then click on this too and now we get to see the message showing up inside here so our message pops up as we click on the button great so we know that we've correctly hooked up our button we got a button in we have our text in it's displaying the thing that we want to uh so what does this do so aside from like uh you know as i was mentioning this is a full simulator so we get to go ahead and use anything that we want to inside of a phone so if you click on this home button you actually see this is this is this is a real phone here that looks just like a regular iphone would so it has all the things you would expect you can go ahead and go into settings and you can change things if you wanted to go into accessibility and change different features around to make the text on the phone bigger to make sure that your app is responsive to that you can go ahead and do that and that's all something that you have access to because this really simulates almost everything about a phone uh the only thing you can't do on this is actually call people that'd be cool and you also can't take photos on it so if you find yourself ever needing to make an app that has uh taking photos that's one of the things that you can't do on a simulator you actually need to be connecting your own phone so that you can be making sure that it can take photos as you'd expect it to it does have its own photos so if you just need to use someone's photos uh you can test those features out and it comes preselected with some so it's a really great tool if you're doing more development work the simulator while the preview is great the simulator is much more fully featured and sometimes can fix some of those smaller issues where maybe you're not seeing the behavior you'd expect like we wanted to see this printed okay so we've gone ahead and then shown that as we run this and then we can go back into our quiz up we can go and see that we get more you selected too as this happens that's great um but we can see it's kind of a weird button to click on it's really small it's uh not super obvious like what what it looks like so let's go ahead and fix that by making the button a little more prominent using some of those modifiers that we've taken a look at already okay so how can we go ahead and fix that if we click on the button and let's go ahead and resume this so that we can kind of see all of those changes happening in real time uh also quick note on if you aren't using this thing at the bottom you can kind of drag it up then you can also drag it down and that just kind of disappears and you can drag it back up when you need it again there's lots of powerful stuff you can do with the console but we're not going to get into that too much right now so let's go ahead and then make our button a little bit better here so what we would love to do is make it so that there is some kind of um some kind of border around it so it was a little more obvious what was happening uh and joshua i believe this they're weekly on wednesday at the same time uh we can double check that with you okay so we want to make this a little bit more obvious for what this button should be doing what it should look like now we'd love to add a bordering i don't see any border modifiers here to be using though we've got this padding maybe we'll need that uh but we don't have a border that we can be working with so how do we find that well what we can do is we can go ahead and add in a modifier here where we go ahead and see all the different things that we can modify as part of the view now notice we've got fonts just like we've had above we have all those other stuff which we haven't looked at so far and you can just kind of search for things that you're interested in as we type in border we can see that that's one of the options if we go ahead and click on that it's going to then apply our border group looks like it was thinking we're in the wrong spot if we go ahead back to our button go type in our border modifier and then we can see that it's adding a border modifier to our hold button here now we can see that it has two things that we care about in borders we can change what color it is and so we can see what that looks like we can also change how wide it is now if we make it wide here you can say like well this doesn't really make it that much more clear right we can barely see it at all because it's just so small and kind of scrunched together so be great to add some padding to this so that we can have our button better be actually clickable and selectable so let's go ahead and add some padding huh this doesn't seem like it did we wanted to at all we can see that we have the padding around it now and you can tell by the outline on this that the padding is being applied but it's still super shrunk and we can barely read the text because the border is overlapping on it now why is this happening uh this is because the order in which you apply modifiers makes a difference we have a regular button which just kind of looked like that basic bluetooth that we saw before modifiers are applied to views in order so we start and we say first we're going to apply the border then we're going to apply the padding if we apply the border first then it makes the kind of scrunch together thing that we can see right here then we apply the padding so that that little scrunch together thing is padded we want the opposite of that we want to pad it first and then put the border around the rest of the padding now it's hard to move around the different attributes in here we could delete the border and try to add it back in it's a lot easier for these kind of things to work with the editor and then just swap their order around so we can go ahead and then just make our padding appear where the border was now we can see it updates and does the thing that we want to so that's a that's that's a tricky thing that can come up when you're working with modifiers is the order in which you're applying things makes a big difference so if you're seeing something really weird happen make sure that the order in which you're adding the modifiers kind of matches what you expect the behavior to look like uh we can change this color here to be any color we like and then say this width is fine great so if we can kind of see from this already what it looks like you can also if you want to check to see in a simulator that's bigger than this you can go ahead and run it there just kind of confirm what it looks like note of course for most everything you're doing these will line up they'll be the same so you can just work mainly from the preview though occasionally there will be some differences between them okay so we've got one uh answer here now this would be pretty easy quiz if this was uh this was the extent of it other than the fact that we're just asking what uh one plus one is which is not the most uh tricky question to be working with so we'd love to add some more questions to our quiz now we can add some more questions by putting some more buttons in uh we mentioned before that we can have a vertical stack where we can add our buttons all on top of each other we'd love if you remember briefly from kind of the image that we had here note that the buttons for quiz up we kind of want to be side by side next to each other a vertical lamp a vertical stack or a v stack lets our views be on top and a horizontal stack lets them be right next to each other so we can go ahead and add an h stack or horizontal stack and then put the button inside that now again we could do that just from the editor but there's some great tools we can use from the object library to go ahead and make that happen as we select this button we note that we have a bunch of places we can drag it one of the options is we can drag it right here and it says add button to a new horizontal stack along with existing start which is exactly what we'd like to do we drag our button in we wait patiently for uh things to update uh or click resume that's often something that you might need to do and then if it's not updating make sure this thing will kind of rotate around as it's thinking so just kind of wait for that to be done and then we can see it turns green and we've got our button here great so we can go ahead and then say we've got a bunch of buttons we want uh let's just go ahead and have some simple answer choices where we've got you know one two three four and whatnot so we could go ahead and just kind of copy this whole button down in this h stack and then say we want our options to be one two then we can make more buttons by copying and pasting and saying we want to select three as an option and then we could have more options we want to select all of this and then paste this here and then say that we have four as an option okay now if you've done development work before it should be a little uneasy when you see a lot of copying and pasting happen typically when you're copying and pasting a lot and a lot of repeated things there's probably going to be a good opportunity to make that code a lot better now and that's certainly going to be the case here now we can note that for our buttons they're all the same except for one number in a print and then one number in the text so we would want to have some way of generalizing this so that it's kind of like its own button thing that we can work on here now sometimes yeah okay so what we want to do is build a new view of our own just like we have a content view that shows all of this we want to build a new view that's just a button with all these properties that we all that we want to have we can do that by just copying all this button and then making a new view right down here now notice we just kind of copy some of the syntax if you're not super familiar with uh swift yet that's totally fine struct is a keyword that means we have a structure so it's the kind of thing that we want then we've got the name of the thing we note that the kind of thing that it is is a view and then we just describe what the body should look like so we can start defining a new structure right here where we say that we want to have a let's say an answer button which is some kind of view then this is going to have some kind of body property and we can see that it already knows what we're supposed to be writing in so it's just going to go ahead and help us and then we can just add one of these buttons in here now to make sure that the error should go away on their own uh and kind of resume to make sure that everything's woken up and then you can enter in command b to build things if it's gotten a little bit out of sync great now we have this answer button now we can use this answer button instead of having all these things being copied and pasted so let's take a look at making instead of copying and pasting all of the specs here let's just have four answer buttons and get rid of all of this great so anytime you can delete a lot of things at once uh that's a good refactor and in our skill path we have a lot of refactoring that we do where we kind of show you how to use best practices to be putting content together now we can note that we we still have a little bit of copying and pasting but also this isn't quite what we wanted right we have all of these here say 4 on them and we they don't even have the right answer showing up so that's not what we want to have for a quiz we want to have a bunch of different answers at least one of them should be the right answer now the easiest way to do that is to make our answer button have some kind of changeable thing that we can put into it you'll notice when we made a text we gave our text some interesting information we said you're a text that displays quiz time you're a text that displays question one out of four you're a text that displays what is one plus one we can make our answer button be that kind of view that knows how to change itself based on what we want to display so we want to change well what should the actual answer be what should the text be and we note that that's some kind of string property based on what the text is that's put in we want to go ahead and display that now if you are unfamiliar with this syntax this is called string interpolation uh this is a way of making it so that you can put variables inside strings we get into this much more in our swift courses you can also just use the kind of plus button to just add them together that will work too uh and then we just want to display the text right here okay now this is set up to display exactly what we want but our answer button's up here complaining why are they complaining it's often very useful in xcode to be clicking on these errors and getting to see what the problem is this tells us hey you said that answer buttons needed text to display and i don't know what the text would be tell me so you click on okay you say fix and then you can enter the text that you want to be displaying each of these will have the same issue coming up and we can go ahead and resolve each of them and say okay three and four okay great so this is already much improvement over first time when we just had a bunch of copy and pasted information down so what can we do from here well we can first resume to make sure that this worked correctly which is always a good thing to check on i can wait for the preview to update and then wait for the preview to update and then see that we've got one two three four great now there's still a little bit of copying and pasting and probably more than we'd like we can see that we have answer button displays four times and if we had more things that we want to be adding well let's say that the product team comes back to us and tells us that we should have six questions in each of our quizzes not four we have to copy and paste more answer buttons and that's pretty verbose to have to write each of the things out and change them to whatever we want to change them to fortunately there's a way that we can introduce a structure to make this a little bit more straightforward uh if you have learned it all about loops or iteration from other development that you've happened swift swift ui has the same concept that we can use there's a special kind of structure which is called a four each and a four each as our kind of tool tip says here in very formal way is a structure that computes views on demand from an underlying collection of identified data what this means is we can tell it uh we want you to do the same thing a bunch of different times so we can go ahead and then choose what we want this to look like so we can go ahead and make a for each we can go ahead and specify that we want to have our for each have some data we want our for each to have something that we're iterating over and then we're gonna have the thing inside that here now we need to say what we want to be going over what are the different things we want to be talking about but we kind of want to go over numbers here so we want to start at one and then we want to go up to uh but not including 5. we can get rid of these then inside here we say okay well what are we at right now this represents the current index so we're going to start at one and then go up to one two three four and five from there we can go ahead and then specify that what we want to show so we can say that we want an answer button that has a text where the text is a string that represents the index and now we see the button show up and we've gotten rid of another few lines of code the great thing about this structure is if we change the different scale of numbers that we want say from only going from one to five we go from one to eight we don't have to add any more copied and pasted answer buttons it just goes and right adds those views for us so we can have some additional answers super easy super convenient so what can we do from here uh we have our answer buttons we can show the different things we're interested in but our question is not super interesting by itself oneplus one isn't the most engaging of different things to work with so let's go ahead and update our question to be a little bit more interesting we can go ahead and then let's change the question we're using to be something else so let's go ahead up here and just like we added some text up here we can add a more interesting question and some impossible answers so let's say that we've got our question text or just our question and our question is what was the first computer bug uh this is we go over in the course as well and then we've got some answers to what that question could look like we can then go and replace this what is one plus one with a more interesting question and then when we resume we should be able to see that updating in good time great uh now you can see actually that now that this is a little bit long it's kind of weird that the text like isn't centered so you can go ahead and clean that up by just clicking on the text itself and then just centering it so oftentimes it's easy to make those adjustments by using this attributes editor on the right great so i cleaned that up now we can go ahead and change instead of one two three four those aren't very good answers to this we can add some different options to be using for answers we can make a possible answers array which is going to be all of the different things that well someone get out the answer if i if you know what what it is i can see if you get to it before we before we get to it here here's something just not then we'll get to the real one it could be a fly it could be an ant it could be a beetle and then there's one of them actually if anyone knows can put it in chat what the actual first uh first computer bug is the story behind this is uh it used to be that computers weren't just uh little things in your pocket they were enormous things with a bunch of moving components and pieces so that there was originally a actual bug yeah i know right josh there's an actual bug that got stuck inside the computer that was responsible for errors so the actual bug was a moth right galena okay so there's an actual moth that like got inside one of these giant computers and caused all kinds of questions so lots of interesting stuff there uh and that was for and we go into some of this in our course as well all right so these are all the possible answers now it would be great instead of seeing one two three four if we could see well the actual answer for what we were working with yeah exactly actually it was muff uh so instead of going just through one through five let's go ahead through each of the possible answers we have uh so in our for each we can go over each of the indices in our possible answers and now we can get the index from there when we resume we can see that it's not doing anything different we still have four things because we have four options but we're kind of looking at the wrong thing for each of them we're just actually we're going from zero to three now because the first index and arrays is it index zero thanks glad you're enjoying it uh so what do we want to do with this here well we'd love to get the actual like fly or moth or and or beetles so we can be quizzing our learners on it or people who are trying to work with the quiz app to do that instead of just looking at the index let's get the array at that index and then use that as the text for a question and index once this updates now we can see those answers cropping up here great so let's go ahead and then run this in our simulator and take a look at what we have just to make sure everything's hooked up so in our side of our simulator we can see it's asking us what's the first computer bug you can note that you get some small differences right the text is a little because these yeah this is resized a little bit so it is it is always good to check to see what the differences are between the two as we tap things we can see it tells us what our selection is great so we know that we can ask people questions we can render those corrections we can ask people questions take possible answers and display them and what we're going to be doing over the course of our next section is starting to learn well right now this is just printing out for us as developers how can we start to use this information and display it to actual uh users of our application great so it's all hooked up there's one last thing that we'd like to do before kind of stopping with our first screen and then we should have some time to take any questions that people have uh we'd love for to add a little bit of color to our application here uh right now it's just kind of this basic white background which is fine but maybe you want to spruce it up a little bit add some more customization there's a few different ways we can add color one of them is by kind of using that same structure that we talked about before uh we can use vstacks to display things vertically we can display h stacks display things horizontally and you can use z stacks to display things on top of each other what we'd like to do is have a z stack where we display first a background color then we display the rest of our application on top of that so that we can all of the colors in the background we can do that by see if this works nice if you command click on v stack you can see that embed in z stack comes up as an option this doesn't always work i was trying this earlier and this option just didn't show up for me if it doesn't show up you can just write the text in yourself uh if it does show up then you can use it which is much more fun click on embed in z stack and it just adds that now we don't expect anything to change from our preview because we haven't done anything we've just kind of added more structure but there's nothing in our zstack now what we can do is we can add a color to our zstack a color is actually a basic view just like a text or a spacer is um or a button you can also just have a color which is just a regular view that you can use when you're building a color you can have it taken well this rgb color space don't have to worry about too much some a red a green a blue and an opacity as you mess around with these you can kind of see what the colors are going to look like as you are playing around with it let's just enter some values in here and then see what happens we've added this color great so we can see that we have this color added to our view now uh it's not exactly right it doesn't look like it's actually fitting on the top of the bottom and it's like kind of more not opaque enough as we want it to be so we can fix the opacity by just going and changing it to be instead of let's say one we make it a little bit more seethrough which lets the background white bleed through a bit more great it's a lot more mild we still have this disconnect here between the top and the bottom bars it didn't quite get filled in we can fix that by adding a modifier to our color this area is called the safe area that represents like when you're on a simulator you can see that you don't see anything interesting here but on a real simulator you can see that there's useful information here you have the time on the top left you've got like your wifi status your battery by default your application doesn't let you like change what's happening here because it'd be pretty bad as a user if this information was blocked entirely you couldn't see what time it was unless you knew that that was what you were signing up for and what the app like as a game or something if we just want to have a little bit of the background color bleeding into that then what we can do is we can add a modifier that says don't worry we know we're doing we're not going to block this for people or we don't care that we are blocking it and we can do that by adding in the ignores safe area modifier uh we can see that it didn't get added to the right spot you can see here this is what we want and add it to the whole zstack so now all this kind of bleeds in because it doesn't know that there's supposed to be this little uh that little notch there so we can instead take this ignore a safe area and then put it inside here so that our colors go through but nothing else does okay so now we've got our color added uh and so we can get to see our application a bit better one last thing that we can do just because it's fun is we've been playing around with this canvas the whole time why is this canvas showing up it's actually just these lines of code right here if we get rid of them it goes away we got them back it comes back so that's what this is coming from is this code right here and what this also means is you can change around what this should be like to add in different previews if you add in remember when we uh way back earlier when we went and added another text and then we split off and saw two different views that actually might be kind of a good thing when you're previewing so you can just get to preview what it looks like with different setups so if we add in another content view here we can see eventually i know what's our preview it should be adding another preview down there let's go ahead and resume this yeah whatever so typically that should work it's doing something funky probably because i got rid of it there but what i wanted to showcase is that you can preview uh inside the preview you can also set different settings so one example is we've been looking at this on kind of like a regular kind of like daytime phones for our colors but phones actually introduce a dark mode as well so what we can do is we can make sure that we're adding in so we know what it looks like when dark mode is selected so we can change this preferred color scheme and say what does it look like in dark mode and then when the preview updates now it switches to the ios default dart mode and we can get to see what our application looks like to make sure it still works correctly that's one reason why changing the opacity is useful if our opacity is still one then we can see this doesn't reflect the dark mode really at all it's our own color when we have an opacity that's less than one it lets the dark mode color bleed into the color we selected to make it more black instead of the other case when we had light mode where it made it more white colored so now we can see what our application looks like in dark mode or we could take a look at what it looks like when it's not dark mode by just having another content view up here i'm gonna try this again we'll see if it works either way it's not a big deal so we can still have both of those previews available okay so to recap we saw how to go and get started with a new xcode project we saw how to put together some basic views using both the kind of object library here and also by typing into the editor and then we also took a look at how to add in view modifiers and in the editor and in this attribute panel that we have here we then saw that we could extract views into their own structures uh we could add properties into them so that we didn't have to be copying and pasting as much and we could take use of some more complicated uh structures like a for each that lets us iterate over a bunch of different uh indices so we can display the right kind of answer for each of those so what we're going to be covering over the course of the next section is how do we make these views do something right now they did a great job of printing to the bottom but if i told somebody to get this on their phone they won't be able to see that it doesn't show up anywhere on the phone so take a look at how to do that using state is a big idea with that if you'd like to preview on that uh the app state property is how we can be modifying those which we'll take a look at then so we have a few minutes left if you have any questions you can feel free to get them in chat we'll kind of hang around and try to do our best to address those but it's been a pleasure getting to showcase some of the uh swift ui content that we have up on the codecademy platform uh and hope that you've enjoyed getting started in swift ui or learning a new framework if this is uh kind of your entrance into ios development so thanks evan for tuning in and then if you have any questions you can feel free to put them in chat and we'll hang around for a few minutes to address those well while we're waiting on questions galena because i know you were picking up uh such guys a new framework right like we both learned that a few months ago uh what was something that you found maybe interesting or surprising about it especially coming from a web background oh yeah that's a really great question um i think one thing i i appreciated uh well i guess i'll speak more to coming from a ui kit uh experience is that swift ui is so much more so much less verbose and um more intuitive than ui kit was and i think that's one thing that i really like about this framework and one thing that i think learners will appreciate as they're going through the skill path and building this application um it's very readable and pretty simple in my opinion to pick up having a ui kit experience yeah definitely and most of my my professional experience is working in ui kit as well and ui kit to make to build the same sort of thing that we put together just in a little under an hour while taking our time to kind of figure out what's happening would take much longer in ui kit it's um trying to explain how to space things out and make things show up and the storyboard interface is much more complicated you can still do a lot of things with it it's still widely used in the industry and we're going to make sure to cover that on the platform but it's very easy to get started with swift ui and it's fun to be able to build something that already looks like it's starting to be a real application just from making moving a few views around yeah yeah cool um great well if people have questions you can feel free either to put them in chat still take a look at them or you can feel free to reach out on discord or on the forums for like anything that you're wondering about skill pass or about swift or about anything that's happening on the codecademy as a platform uh it has been a pleasure getting to start this live stream series with all of you and then we'll be going and running these at the same time each week or next week we'll be kicking off and continuing with state so thanks everyone for tuning in uh and then we'll see y'all next time uh alberto says swiss ui ideal for big projects or small projects it's a great question there are it is very new as a framework so some people are some companies are starting to use swift ui entirely for projects so there are real production big projects that use swift ui at most larger companies it's too new to only use swift ui so you'll still see a lot of code there as well it's mature enough as a framework that i would recommend starting with swift ui and there's ways of integrating ui kit uh into your project if you discover something that your application is having a hard time doing yeah cool yeah god thanks you enjoyed it great so i think that's all we got so thanks again for uh forever's questions uh thanks again for tuning in and we'll see y'all next week