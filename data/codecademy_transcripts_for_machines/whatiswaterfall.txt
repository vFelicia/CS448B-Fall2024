hi this is Pat with codecademy I am a web developer based in Washington DC if you've heard the term waterfall you've probably been confused by what it means exactly and we're not talking about the majestic cascading water that comes down the edifice of a rock we're talking about the waterfall development method for developing software in this video we're gonna discuss what waterfall is what are its shortcomings and limitations what are its strengths what are some of the best use cases for it let's get started so in this video we're gonna talk about what waterfall is what are some of the key differences in strengths as opposed to agile and then there are three main themes that set waterfall apart from agile scale duration and quality we'll wrap up by talking about if waterfall is better than agile and give you some examples to sink your teeth into so that you have a little bit more that you want let's get started Waterfall is believed to have been the first process model in software engineering originating from mechanical engineering it's a sequential design process meaning that the earlier phases define subsequent phases so how is this different than agile I'll link a video below that goes into more depth about what agile is but they're both trying to solve the same problem which is how do we turn an idea into a reality so in today's economy you're likely going to have to build software as some part of realizing your business dream or any creative endeavor that you have that's just the world that we live in but if you find yourself there how do you start building software what are the different ways you could go about it well when it comes to waterfall one of the main considerations is if your AI dee' needs to work on the first try or risk losing customers what approach should you take in this case this is a good example of why you would need waterfall because waterfall emphasizes a quality and completeness and testing over getting to market fast and iterating on top of it waterfall is different from agile in a couple of key ways agile is about fast iteration and waterfall is about totality and completeness agile is about incorporating the feedback that you get based the results that you have whereas waterfall is more about being complete and getting it right on the first try see the strength of waterfall is that it is strictly sequential and topdown that means that there has to be thorough planning and documentation this lends itself especially well to large projects that need more accurate estimations for approval even just to start this means that each phase is stronger than the previous phase because you're building off of the knowledge and lessons learned from the last part also it's really hard to start your part of the project if you don't have all the resources that you need one of the main defining features of waterfall is scale Waterfall lends itself especially well to large project sizes and that's because estimations are needed to be given for large projects we need to know how many developers to hire and what resources they need to be successful that means that we have to dive deep into which resources we need to provide what specializations we need and who we need to hire for the right job we also have to take into account any runway for supporting elements like marketing finance and legal on top of that this likely means that for waterfall projects there's going to be multiple teams even multiple teams of teams working on the same project to do that they're gonna need documentation because different team is working on different parts might not have been involved in the previous phase they'll often be starting from scratch based off of the lessons that somebody else is handing them the emphasis here is on sequentiality and completeness lastly when you have multiple teams working on the same application maintainability becomes really important and that's where the documentation comes in is because you're often asking developers to maintain something they likely didn't build so they need to know how to fix it and how it works as a whole the next defining feature of waterfall is duration especially length some features take longer to build than others some applications take longer to build than others especially when it comes to larger clients like institutions banks and government services they likely have running systems that are working but they're a little bit antiquated for today's technology that means that we have to engineer bridge building a software for translating and transpiling into the proper format so that we can work with it going in sequential order also means to time some features require to have been built before others can proceed and this sometimes means going back to a previous stage sometimes you might encounter things that weren't foreseen in the planning like bugs problems or just general vulnerability which means that you have to go back and redo certain parts the application the third defining feature of waterfall is quality because waterfall is about predictability while no application can foresee all of the challenges that it will face some types of applications need to have their pathways anticipated things like load times use rates vulnerability proofing and compliance what happens if the power goes out when someone's using your application what happens if the internet was dropped what if the application comes under a malicious attack for some organizations or companies it has to work and there's a number of scenarios that we have to account for and we can't just tell you as well it just doesn't work this means that waterfall endorses a robust testing and documentation phase you can't test it if you don't know what's going on and so documentation allows you for testing and maintenance this dovetails nicely into maintaining because maintainable means durable a waterfall application will likely grow and evolve over its buildout but that means that it has to evolve to the new challenges it might face sometimes that might mean building out entire divisions or sections to support the application things like nontechnical user support teams that need to be able to fix or address problems in the application without calling the lead developer in the middle of the night you'll have to build them support applications and interfaces to be able to provide the customer service for your users so hopefully I've made a pretty strong case for why waterfall is good but you might be wondering if it's better than agile Waterfall is not necessarily better than agile because there are just certain types of applications which lend themselves to one or the other I've seen a lot of teams leverage both aspects of waterfall and agile in their day to day agile is best when the product needs to be small and have frequent updates with the emphasis on getting to the market fast waterfall is best when the quality is more important than the speed with the emphasis on testing and durability of the application so what are some good examples of applications which are better for waterfall or agile well let's take a look at a healthcare website because of the sensitivity and nature of people's health you are gonna have to build something that works right out of the gate without any problems or at least minimize the problems that they have and if something goes wrong you're gonna have to have the support staff and structure to address your users questions so in this case for a healthcare application you're likely gonna have to think through a number of scenarios to make sure that your application is working and if it doesn't you have recourse for your users if you contrast that to an online store where somebody might be selling their art most of the time it's not life or death as somebody can't buy a painting your users will likely come back to the website and put up with a number of bugs even if they're not successful in the first try another good example of a waterfall application would be something for your bank your money is important to you and your trust in that bank is the only thing that's keeping you there so if the bank's application doesn't work or it's really bugged you might start to question the legitimacy of that bank so again the application has to work from the very first time that it's used from any number of users in any number of locations or situations and if you contrast that to a social media application which would be a great candidate for an agile workflow the idea here is to adapt to the new user base as quickly as possible which means getting their feedback and trying new features and deploying as quickly as you can if it's buggy or doesn't seem to work completely right it doesn't look completely right your users will likely be very forgiving of that if you're providing them the service that they want put another way if your social media application isn't working like you hope it would that's a different story than if your bank application is freaking out on you hi this is Pat with code Academy I really hope that you found this video helpful but did I answer all your questions do you have more do you want to know more about waterfall leave a comment below or subscribe to this channel I love responding to learners comments we'll leave some links in the show description that can give you a better understanding of what waterfall development is and where to use it and if you're ready to start your programming career or come on over to code Academy we'll help you get started