hi everyone how's it going um for all of you watching my name is alex koontz and i'm here with my coworker sophie hi i'm sophie hi um cool and so we are here today to do another session of codecademy live this is actually our last one i think we ended up doing 13 it took us 13 sessions to get through all of the lessons in this visualized data with python module which i'm excited that we actually made it to the to the very end yeah um you know it's a lucky number yeah that's true um you know we always could have done so so many more there were so many projects that we skipped over and quizzes and capstone projects and all that sort of good stuff so there's definitely more in this module that we didn't get a chance to do but um fun to do all of the lessons so um yeah a little bit of setup so i know that we are live on several different places we're live on facebook youtube i think twitch although uh we don't have a ton of subscribers on twitch so if you're watching and uh are on twitch you can go to subscribe to us there um and then twitter um if you're watching live sophie and i are mostly gonna be looking at the youtube chat so if you want to chat with us live you can go ahead and talk with us there i see a lot of people already that i recognize pro gamer talia um let's see uh oh we got someone new eric hello eric um yeah so if you're watching us live feel free to chat with us on youtube and then if you're watching us in the um the recordings on youtube that are posted afterwards this is a part of a i guess 13 part series where we walk through the entirety of our visualized data with python skill path and so there's a fancy little playlist and you can watch all of that so um we're getting some spam from pro gamer pro gamer it'd be great if you couldn't do that but uh but fun to see everybody in chat um cool so sophie let's jump right into it i'm going to go ahead and share my screen find the right one to share all right all right sophie can you see that i can cool um and in fact i'm gonna back out one just to the the path just to show where we are we are in the very last lesson on this path and so we're in the advanced graphing stage learning seabourn um after kind of experimenting with matplotlib and with pandas um sophie you and i together we went over some of the math.lib stuff or maybe it was the panda stuff but you haven't done any of the seabourn lessons yet with me what are your overall thoughts on seabourn compared to like matplotlib or you know you're our inhouse r expert compared to like how r does graphing stuff um well i think you guys discussed this a little bit last week but i think seabourn it makes a lot of things really simple um so there's not a lot of syntax you can kind of just like throw something into the functions and get something out so uh and it also fixes some of the difficulties that we experience with matpotlib so i know you and i went over the bar plots uh in matplotlib and we were kind of complaining a little bit about creating uh the like the xaxis values and all of that is way easier it seems with seaborne which i think both of us didn't realize until we got up to this module um but yeah i think there the flip side to that as you guys were discussing last week is that um you have to be really careful about what you're plotting because sometimes you know the ease means you don't necessarily need to be thinking about it as much in order to get a plot out um but then it is extra important that you then look at the plot make sure you understand what the output is and make sure you understand um what you need to do to change it if you need to change it in any way so like you need to know that you're plotting the mean by default in a bar plot um because you don't necessarily have to say plot the mean here yeah i think we'll let's go ahead and get started but yeah that's the thing that i kind of want to underscore here is that seabourn is it's great that seaborn makes it really easy to do these plots but because it's so easy to do these plots now now we can like really devote time to thinking about the statistics behind these plots and like you know sophie and i have gone through this already and like we have a couple of talking points where you know there's so many different ways to make graphs that look similar but are really just playing very different things and so it's like now that we are working with seaborne it's pretty easy to make any of these graphs we can really think about the differences between them what we actually want to be showing how we um how some graphs might be misrepresenting the data that kind of stuff um so that's what this lesson is really talking about um where it's going to introduce a couple of different new types of graphs and then along the way sophie and i will kind of um throw in some bonus little details here um cool so let's go ahead and get started i'll go back to the introduction here um so this introduction is really just kind of again showing a jupiter notebook here in the learning environment i know that when i'm working on my own computer in um in python i'm always working in jupyter notebook stuff we actually just had an internal codecad me hackathon that dophie and i worked on a project together and uh i i was you know hacking up some some code in python and so it's working in a joke jupiter notebook and sophie i know you were using um r studio and r yeah but i also love jupiter notebooks they just make everything look so nice yeah um yeah so we're kind of so this exercise we're kind of showing the um one the advantages of a jupiter notebook again that's like being able to integrate uh text with code and really kind of being able to write a report up and then furthermore we're kind of showing a preview of what's coming in this lesson so showing how bar plots could potentially be misleading about the data where these three bar plots all look the same right it's all showing the same amount of data in these three categories but then as we look further into different types of plots you can see that the shape of the data is very different and so we're going to look into kde plots which i actually didn't know i'm hoping sophie you can explain a little bit of like the precise definition of kde plots are like the difference between a kde plot and a histogram or a bar chart because i'm not super familiar with with these um we're gonna do kde plots box plots and violin plots so cool let's go ahead and get started um all right so this first exercise is again kind of showing how data can be misleading if you are not using the correct graph and so in this exercise you'll see that we're going to just make a bar plot using these three data sets and again it's kind of showing uh seaborne's very quick syntax where you just need to pass in the data that you're using and then the values that you want on the x and y um labels and specifically these are like the columns from a pandas data frame so let's see it says compare you're interested in comparing data collect from different locations you've imported four different data sets using numpy and have combined them into one data frame use sms dot bar plot to graph the data set in one plot with label on the x value or on the x axis and value on the y axis so this is just going to be s s dot bar plot and now let's see let me go back up to my example code here so i'm passing data frames which you can tell we've given four data frames i think or no we we're gonna be just using df as our data frame and we have four different labels so alex it might be helpful i know it's gonna flag an error but do you wanna uh do you wanna just print with the data frame or print like df.head really quickly so that everyone can see what we're looking at sure that's a good idea yeah and so you can actually see that the way that this data is organized this actually is not showing a ton but or it's not showing the different labels it's showing only ones from set one but this is a big data frame i think it's two thousand rows and every data point is labeled either in set one set two set three or seven four and has a value associated with it yeah and that's what all the code above here is doing um and that's why we're using the words label and value so those are referencing those columns of that data frame right you could even see here i could change this to be like my label and then if i do that you'll see that the name of this data frame has now changed to my label and change it back to label for now just because i don't know what our test behind the scenes is actually looking for but cool let's now do sns dot bar plot is it bar plot what is it yes and then the data frame that i'm using is going to be or is it data it's data the data that i'm using is stored in our data frame name df i'm going to set x equal to label i'm going to set y equal to value cool last thing is that i have to do plt.show um what's up a little bit confusing that we use seaborne to actually do the plotting and then we have to come back to matplotlib to actually call the show function um actually might want to experiment with like if there is an s if there's a seaborn show function that would work um i think um my understanding and i don't know if this is correct but my understanding is that seabourn is built on top of matplotlib so it uses some of the matplotlib functions um within seaborne yeah so i imagine you could probably change that and it would still exist yeah i'm gonna actually get rid of this to get rid of our plot now let's see what happens if we just do sns.show yeah it doesn't oh it didn't work it doesn't plod i'm actually surprised by that i'm also surprised that we need to be importing matplotlib i kind of would have figured that because seaborn runs on matplotlib if we imported seaborne it would have also grabbed matplotlib but i suppose that's uh that's not how it works um cool yeah so i want to emphasize that there's you know there's a lot of stuff going up here on the top a lot of stuff about pandas and data frames um we covered that earlier in this um in the visualized data with python um skill path that's definitely uh you know you could devote so much time to just learning about data frames and really how to manipulate all that stuff so i'm gonna we're gonna kind of fly through all of this data frame stuff for now but definitely a good tool to learn how to use i would say like almost more important than making the graph itself is like learning how to like work with your data is at least the part that i find satisfying um and sometimes i find graphing frustrated frustrating yeah no that's the part that always takes the longest is getting your data into the format you need in order to actually make a plot yeah cool all right so the point of all of this was to show that um what was this this was plt.show the point of all this was to show that if we just use bar plots these look absolutely identical which really tells us nothing um right we we really don't know a whole lot about this data other than there seem to be equal number of data points in all these cells you're saying equal number of data points but sure these are not uh i think these are not counts these are actually means i believe so um so there's an equal number of data points in each of the groups uh but that's not what this is showing i think it's actually showing that the means of the groups are pretty similar totally and you know what as i was saying i realized like these error bars would be really mean if this it would be really weird if this was just the count um right bar plot by default shows the mean of each group and sophia i know you have yeah i was telling alex before we got on that one of the things and i'm not i'm not quite sure where i developed this opinion but um i think it's kind of interesting to me that matt potlib and seabourn are using the mean to by default to plot these bar plots because usually if i was designing a plot for something if i wanted to show a mean comparison with some sort of error i probably would not use a bar plot and one of the reasons for that is that the bar plot um if you kind of look at this so if you see that the blue bar for example um the only data that's actually being plotted here is that top line right the only thing that is actually being communicated by that whole space of bar is what the mean is and then i guess with the error bar there's some like error around the mean but all of the stuff that's shaded in below the bar actually doesn't really mean anything it's not reflecting anything about the data and if i pass in a different data set with the same mean but completely different data um i would not be communicating anything or this plot would not look any different and i think by shading in all the space below the mean but not shading any of the space above the mean you're actually kind of like misrepresenting the data in a way because you're kind of making it seem like there's data below the mean or something but not above the mean which is not really accurate um and so normally i would use a bar plot if i was trying to show comparative frequencies of something across categories that did not have any sort of inherent order so um you know like i gave the example this morning of uh my boyfriend's aunt has a lot of animals and so maybe i want to make a bar plot of how many of each animal type she has and so maybe there's like three dogs and two cats and um and so those bars could represent the number of each type of animal and then and then those shaded regions kind of communicate something about the number right the area would be directly proportional to the number of each thing in each category but as as a demonstration of comparing means um i find this a little misleading yeah however that is a long way of saying very little well and it's interesting to note that like seaborne does it by default right where it's doing it it's showing the mean by default this was actually something that we went over in the last lesson but i forget the exact syntax and so i want to look up um how to change the function that it's applying so let me look at this um yeah so you can see here in the seaborne documentation that it's using some mean function as the estimator and so i think i can change that and i hope this works i did not practice this beforehand but i think i can change that by saying okay rather than using mean let's change estimator to something like length uh we'll see if this works yeah there we go and you can see now our yaxis has totally changed where it's no longer representing mean because um the mean was at like something like 80. now it's representing length meaning the length of these data sets meaning essentially the count or the frequency so there's 500 things in set one there's 500 things in set two all that sort of stuff um so yeah so you can also do like np.median right you want to see the median value oh those are actually like slightly different now right yeah although i think that this this median value would have the same problem that you were describing before sophie where it's like having a bar underneath that's shaded doesn't make a ton of sense for median because there's like points above the bar and below the bar and all that sort of stuff yeah all those central tendency things um but it's still it still is important to communicate that information about your data i just think with box plots or something along those lines which we're going to get to yeah and then last thing we our problem here so because we can just like go on a million tangents so we will try to get through this lesson but the last thing is that the error bars here like are nonsense right can you have an error on count or frequency uh you could it depends on what your data looked like uh i could imagine a situation where you're where you're doing something like uh like repeating the same experiment multiple times to see interesting how many of a particular thing show up in a sample um over a bunch of repeated experiments and then you would have some error around the number of people in that experiment yeah interesting okay cool well for now yeah these error bars uh don't make sense and so i guess that it kind of shows that there's no error there okay cool so let's move on so we're gonna instead of showing those bar plots to show the median of um of these valley uh of these different data sets or even the count of these data sets instead we're going to look at a kde plot so sophie can you kind of describe what a kde plot is and how it's different than either a bar plot or a histogram sure um i think well there's two different angles that i'm going to come at this so the first thing i'll say is that a lot of times if you are doing any sort of statistical analysis you're trying to think about the distribution that your data is coming from and you're trying to estimate something about the distribution that your data is coming from um and so uh something that people have spent a lot of time kind of thinking about uh is probability distributions and there are many different types of probability distributions and so um and basically what a probability distribution is is it's some it's you can think of it like this curve that we're looking at in this in this picture where there's some area under the curve and um and that area should theoretically in a true probability distribution it should sum to one um and it gives you some sense of how likely different values in if you were to like randomly sample from your data it gives you a sense of how likely certain values would be to show up um and so using kind of like the area under the curve right if you look at the area under the curve between zero and one that would be estimating the probability that if you randomly chose um a value from your data set that that value would be between zero and one and so histogram so coming at it from a different angle histograms are usually used to show like a distribution so and usually um you're plotting like a frequency so you're saying there's this many numbers in my data set uh that are between zero and one and so on your yaxis you might have values like in my actual data i have 100 values and 25 of them are between zero and one and so you would have like a rectangle that has a height of 25 um and a width of one between zero and one um and that would that would represent something about the number of values in your data that are in that range but you might also care about what's the probability that if i randomly chose a data point from my data set that it would be in that range and the reason that you might care about that is one if you're thinking about um error so if you're trying to estimate error statisticians a lot of the time are trying to estimate okay what's the probability that something is between two values based on the the data that i have but um but also because and now i lost my train of thought um oh but also because uh if you're trying to compare two distributions um so like for example um let's say you're running an experiment and you have a um you're taking like the temperature of people who took ibuprofen and versus people who didn't take ibuprofen and let's say that you didn't want to expose too many people to ibuprofen so you had a small group of people a much smaller group of people whose temperatures you had who um were taking ibuprofen compared to the ones that didn't then um then you might be trying to compare the distribution of temperatures in those two groups and you but you might have very different uh size sample sizes for your control versus your treatment group and if you're just looking at frequencies like there's 25 people in one group whose temperature is between 96 and 98 degrees or whatever it is and there's also 25 in the other group that could mean very different things if the sizes are different like 25 out of 50 people is a very different thing than 25 out of 1000 people um so if you're trying to compare those distributions it would be better to have something that is comparable like a probability of choosing a random person and a range compared to an actual count of the number of people in that range yeah cool so i think we can like play around with this in a little bit where uh in the next exercise we're going to be making some of these kde plots and we can um play around with the size of our data set where i think the data sets that we give you are all of equal size it was the data sets from previous where there were 500 but we can look at it of say like okay let's cut this data into you know 50 data points rather than 500 and now if we plot um histograms rather than um uh what is it kde like percentage um or probability percentage um the two graphs are going to look very different um and somewhat misleading in some ways and i should also say i'm i'm still talking about like kind of the middle ground between histograms and kde plots which is to say that like you can still plot a normalized histogram where you're plotting probabilities instead of counts um but then one step further is to try to smooth that histogram in a way to get back to what would be like a probability a continuous probability distribution um and so kde stands for kernel density estimation um and it's basically a way sorry i have a dog trying to get into um it's a way of uh smoothing a smoothing a histogram basically so that it resembles a probability distribution um or estimates the probability distribution yeah and we can look into that too where we will be plotting we can plot some histograms and show like okay our bin our bin width here is like you know 10 where this is the number of things that follow from fall from 0 to 10 in our data set and then we can think about how kde like smooths that by saying like okay but that's not you know that's not fine grain enough where a kde will show like okay if i had you know exactly if i had a debt or what's the probability of having you know for uh a data point with value of four or something like that rather than this like zero to ten bar yes okay cool so let's do the instructions first so we're working with that same data set so kde plot um so the data again is still df and now we are oh and actually i think that this is let me actually go back up here cool so right so the we're actually going to make four different columns to sn.kde plot because we're going to plot them on top of each other so unlike bar plot where the bar plot just took one data set and said make you know x number of bars depending on how many categories there are here we're actually going to make four different kde plots so i think what this is going to be is going and let me even like look at the hint um bought all the data sets at once instead pass a column of sn s dot kde plot for each data set so let's see so data set one here is going to be i believe just set one and then before i add the others let's see if that works so cool yeah so there's our kde plot for just data set one i'll do the same for data sets two through four one thing that i suppose is a little bit confusing about this one is that um that we make that we make this data frame for you yes but then we still are just using the individual um i do think it's worth maybe pointing out and maybe this goes to your point earlier about the work that you have to do to kind of set up your data which is to say that you know you might in a different setting be importing a csv that has all the data in a single uh a single column with a label like we created here in df and you might have to extract you know all the values that correspond to label one all the values that correspond to label two um in order to plot them on top of each other like this so knowing the format that your data needs to be in in order to plot it using the function you want is also kind of a relevant thing and you might have to work in both directions yeah exactly and again that's kind of like gaining familiarity and con and you know a comfort with just dealing with these pandas data frames where it's like you might not have these data sets readily available for you and so you might have to start parsing through this data frame and again we can print it out here you might have to do things saying um like okay i want the rows where the label is set one i think i can do that fairly quickly let me do i mean this is like df of um where df of label is equal to set one yeah and let me actually do set three just because if i print off the head it's going to be the exact same rows so that so while you're doing that i we have a question that says what is the data frame precreated in this example being used for um and so uh basically the data frame that we're creating here is actually not getting used in this exercise at all so this same setup is being used for all of the exercises in this lesson and so some of the some of the functions require the data to be in a data frame like the bar plot function um and some of them require separate uh separate vectors basically of with each of the sets of values that you want to plot so we had to have both of them for different exercises um and so they're actually just being recreated here even though yeah in this one we could probably get rid of this this whole thing and it would uh it would work totally fine and maybe it's worth even showing delete this for now if i just print set one this might be a gross printout or it might not even print because it's not a yeah it doesn't even print because uh we haven't configured our kind of like output here to to know how to print just these numpy arrays but if we throw it into a data frame you can we can print it out yeah yeah so so again kind of showing that you could being comfortable with this data manipulation stuff is huge because it's like if you were only given the data frame and like this work that we did uh you know if you were just given this data frame and you had no idea that this set one existed you would have to do something like this where you extract only the um only the rows where label is set three which you can see our rows a thousand through um probably fifteen hundred and so instead of using set one i can just use exactly this guy well i think you need to then pull out the value oh sure yes good call um so i have this and now i want the value from that so that should be the exact same thing and if i scroll down yeah you can see that you know i get the exact same graph so again this this looks ugly this isn't really the point of the lesson but like being being familiar enough to with data frames and how you manipulate the data is probably important once you are working with like real data out in the real world where it's not coming to you in kind of like this nice prepackaged way yeah cool um sophie should we mess around with um turning this into a histogram for now or do you want to move on again yeah i think it's useful to just show quickly um if you instead of using the kde plot if you use um uh what was it plot or dist plot i think um yeah i think it's dist plot and you can just plot the first one for now step one um and if you run that you'll see let me get rid of these principles um you'll see that this is kind of uh a way oops is it a way of uh i think you need yeah um a way of getting a histogram using seaborne and you'll see that by default it's plotting that kde the kernel destiny the sorry the kernel death density estimator of this probability distribution so you can kind of get a sense of how those things are related right though where where the bars are higher on the histogram you're getting um these kind of like little peaks and then where they're lower uh you're getting um like the curve comes a little bit lower and actually just like you can change bin width um you can also change like a bandwidth parameter on um the kernel density estimator um which changes how sensitive it is to the individual to the like small scale variation um and so if you had a really small bandwidth this might like basically kind of trace a histogram with really small bins um and then if you have a larger bandwidth it might just be a very very smooth curve you could try it i think it's like i think it's bw and then it's just like an integer yeah let's try it see that seemed to not let me do like set it's okay we can we can let go look it up later yeah but but basically sophie what you were talking about earlier with like smoothing is this idea of like there are you know you can see that this is a jagged histogram and so the smoothing process is to make this smooth curve that's like continuous as opposed to um noncontinuous like the um the histogram and there's a setting that you can tune to say how much is this divot how much is that going to affect this line basically right yeah exactly um so the one other thing i'll i'll demonstrate so you'll see on these on the yaxis here that we have decimal values that represent probabilities so before when we use plt.hist we were getting frequencies and i'll we can demo that in a second but you'll see that now when we're using this dist plot version um that's plotting that same that kde curve on top of it you're now seeing that even the histogram itself is being normalized to be a probability like a set of probabilities rather than um rather than frequencies and so um i don't know if you want to quickly just in there put um kde equals false and by using that we can switch it back to frequencies um and so now you'll see it's the same shape of a histogram the scale is a little bit different but for the xaxis scale but you'll see that on the yaxis now we've got numbers so it goes from 0 to 70. so even though the shape is the same um the scale is different because we're talking about counts instead of probabilities yeah and i wanted to demo one thing that we were talking about earlier with kind of like the where the size of your data set might be relevant so if we plot these two data sets now again with kde equals false so you can see we're just using counts here it's just kind of a normal histogram it doesn't have anything to do with the like probability percentage stuff um if we just take let's say the first 50 lines from the first data set you'll see that you know this is telling a this this might be this might be a real situation like sophie was said it was saying like okay you might have a group that you have just fewer number of data points from and so this graph and i could like change the alpha here to make it a little bit more visible but that blue in the background right it looks like totally dwarfed compared to this other um this other data set and so setting kde back to true or using the kde function the sns.kbe plot back to true this is going to set it back to um the uh popular uh what is it it's the uh probability distribution right um where now you can see okay these um these 50 data points from set one are all really you know they're all between 60 and 80 for the most part or you know there's a there is a high probability of finding something between 60 and 80 whereas the data points for the green set are distributed differently right yeah and this is something even when you're thinking about what kind of plot you need to make i think it's something that is easily coming back to the same point about seabourn being really easy to use um it can be difficult sometimes if you don't look really carefully at the yaxis to know what you're plotting to make sure that you know whether you're plotting frequencies or probabilities because um it make it can make in certain situations a big difference but in other situations they might look exactly the same in the two versions so unless you're paying really close attention you might not notice uh those differences as you're trying to set up your um your code so yeah sophie i think one one question that folks might have is like how do we know how to do this right like uh so in prepping for this you came to me and was like oh hey we should like show this dist plot function instead of the kde plot function and we should be playing around with this kde parameter setting it to true and false to see the difference how do you know how to do that stuff like right like how do you learn how to experiment with all of these different kind of functions um i google everything uh i so i some of it comes from kind of like understanding what's going on from taking classes like it's something that i naturally think about so it's not necessarily something that you might have thought about when you were going through this path um the first time but i basically just googled how to make a histogram to see if there is a different function for a histogram in seaborne um so i tried i googled like seaborne histogram function and then basically saw that they there's a function within seaborn that allows you to make all different types of distribution plots which is disk plot and so this allows you a lot of flexibility and then yeah i read this exact um document which is the function documentation um super super helpful and the first thing i usually look at when i look at these is at the top it gives you the usage and it tells you in that usage what the uh what the default values are and then if you kind of look through what the different parameters are you might be able to kind of guess which things are useful to you to get the type of plot you want and then you can read a little bit further thanks yeah in general i think like kind of one of the uses of co academy is to get comfortable enough with whatever technology you're using to like get off the ground right where it's like okay if you've never used seaborne before it's probably helpful to like run through a very beginning example of using this kde plot function to graph a data set that we've given you but then as as you get more comfortable and as you like start to understand how all these systems work together i think doing exactly what sophie and i are doing and you can clearly even do it in codecademy still where you can you know play around with these data sets and experiment with to see how they change if you only take the 50 first 50 elements from the data set or if you turn kde to false like as soon as as soon as you get comfortable with whatever technology you're using i think it's really important to like start asking questions that you're actually interested in so like sophie's question was how do you do a histogram in um in seabourn and so then you can start being empowered to like look through the documentation and play around with it and um yeah i mean that that's what i do as well for any any question that i have where it's like you googled the answer and then you'll be led to the documentation with examples and hopefully you are familiar enough with the the tool to not be completely overwhelmed by the documentation and enough to like start to play around with it yeah another thing i'll say is that um once you figure out how to do all this stuff in one language once you figure out all the the functionality that you have in python if you then needed to make something in r or vice versa then at least you know what's possible and like a a language that a lot of people are using and then that can help um figure out what to look for so a lot of these skills are transferable it's not just about python and seaborn because there's going to be a new plotting library and python i'm sure very soon right right you like never you know these things change so quickly that it's like you know in in 15 years who knows what the state of matplotlib is like you know hopefully it'll be similar and better and greater but it could be an entirely different tool um i want to briefly answer questions from the chat so admin says uh can you import the csv files into a database and still run the histogram on the database um so i i don't know what you exactly mean by database whether that means like sql stuff um like that kind of like official database or just bringing it into a data frame in python which kind of serves as a data database in in some ways um but yeah you can see that um we are demoing bringing a csv file into python and then graphing on it but you can do this in any language or with with databases where you could turn this csv file into a database that you can run sql queries on and then from those sql queries make you know make any visualizations using a variety of tools um and then sorry i don't know how to pronounce your name on your rokt um is asking uh basically where is all this visualization uh visualizing data stuff how does this relate to everything else in the world of coding like is it a part of computer science is it part of data science what is computer science good for i think that this particular set of visualization tools is really useful for data science in particular in that data science often works with big databases or data sets um and you know you have to you have to clean that data you have to um you know visualize the data you have to do statistics on that data that's kind of like the world of data science as opposed to computer science i think is the way that i view computer science is a little bit more um like programming slash algorithms heavy where it's like more traditional computer science in the academic sense of just like learning to think like a programmer learning to really hone the like fundamental programming topics that you'll see in any language um so i don't know that's kind of my take on the differences between the two of course both are really wide topics where data data science isn't just in python you can do it in r you can do it in sql or like like admin is saying just in the same way that computer science you can learn all those computer science topics in python or java or c sharp or c plus plus or like any of these uh any of these topics um both kind of both domains are really wide yeah i for me like my interest in understanding data is what kind of brought me into the fold with computer science like i never i took you know an intro to computer science class in high school and i took one over the summer in college but um but it wasn't until i got really interested in learning how to visualize and and summarize data that i actually like learned a lot of um the kind of more traditional computer science curriculum because a lot of times when you're trying to accomplish something like clean a data set or something you need to utilize tools that people have figured out better algorithms for um through like computer science like searching for something in a data set yeah yeah for example like the you know the stuff that i was doing in the last exercise to like check for a quality of like oh was this row in the data set equal to um you know whatever the whatever the word was set one like that checking for equality i would typically think of that's like more of a computer science programming type operation that we're using in a data science context um but it's like you know that's something that you might learn really early on in a intro computer science course yeah um let me take like two more minutes to touch on the like discussion about sql that's happening in the chat um admin is is asking like yeah so can i bring a csv file into sql and then visualize it and so it's funny because it's the way that i'm not a sequel pro i don't i haven't used it a ton um but the way that i if i were to use sql probably what i would do is i have a sql database that i need to get stuff out of and i would probably use python to pull the stuff out of the sql database and into python and then use my python skills in order to visualize it i'm sure that there are other ways to just like skip that middle step of um bring it into python i'm sure that there are ways to just straight up visualize it from sql there are a lot of like business tools like looker or tableau or things like that that will do it for you or yeah jan recommended sql sql alchemy um that will then load the data into pandas um but yeah in general admin i would say like if you have a csv file i would if it were me because i'm not super proficient in sql i would try to skip that step of throwing it into a sql database if you have the csv file you can just load it straight into pandas using you know the various pandas functions um like i suppose this is a numpy function but you know python can load a csv file into pandas for you yeah basically you can either use sql to extract what you want save it as a csv and then load it into python or it sounds like there are or i'm sure i know there are python packages that allow you to connect to a database and just pull what you want directly in and save it as a data frame skipping the step of like doing the sql separately saving it as a csv and then pulling it in yeah but sql in general is a great skill to have for data scientists and something that sophie and i have been been we've been writing curriculum about postgres recently so more sql and database stuff on the way from codecademy um okay cool so if we have like 10 more minutes so maybe we can kind of like uh i don't know we'll see how far we get i think that we can just talk about box plots and then maybe we won't get to violin plots um but maybe we will uh these are pretty quick yeah this type of plot right here that those three block box plots that's what i would do in place of bar plots right as sophie was saying earlier like the bar plot for the mean really doesn't represent the fact that there's data above and below and so that's exactly what a box plot is doing where we can pass in our data frame um give it labels so again x the x values that i want are the label column from my data frame and the y value is the value column for my data frame and then let me do show to display this cool and so again this is like kind of showing this is showing it in a different way right because if you remember back to the last exercise the um the green one was the one that had it was what is it bimodal is that the uh stats term of it had two columns oh yeah so it's interesting where box plots are kind of falling short in representing that right where it's showing that the the mean or is the the middle line is the median correct um yeah it's the median and then the inner quartile range are the edges of the block of the boxes yeah so the box plot you can show is kind of showing the distribution for this green set is definitely wider than the blue set but it's really not displaying the bimodal property of it in a way that the that the previous graph was and i think that's that's really where the violin plots come in super handy where it's kind of combining uh the best of both worlds and that yeah we have specific exercises on co academy like really diving into what a box plot is showing talking about the interquartile range talking about what the whiskers are what the outliers are are talking about so um yeah all of that stuff can be found in the data science path if you want like a deeper dive into box plots i think it's in here too um but yeah the the i think the lines are just nice showing you the 95 of the data so it's like 95 of the data is in between the two lines and then any outliers are shown as i think those are diamonds yeah and then yeah um i see a question asking should we focus more on using libraries or focus on um how libraries work and i think i'm just going to answer that super quickly by saying that i think just playing around with any existing library is really how you learn the fundamentals so i think like understanding the fundamentals of what is a box plot is you know super important but one of the best ways to learn what a box plot looks like with different data sets is to like actually load some data and play around with the library and once you learn one library you can always learn another one so yeah i would agree with that i think um learning like how libraries work on a on a broad scale is potentially confusing for a brand new learner of like learning how like the the file system works and like okay how is python like actually loading this library and i would yeah i would echo what sophie is saying of like um play around with some libraries um get an understanding of how those specific libraries work and the more that you do that you'll get a better understanding of um how like the importing library system actually works where as you can see there are many different ways to import them um and you'll start to kind of see the patterns that emerge um we also have a question from sami about what the heck is this library this is an unfortunate thing that we need to show in this uh in this python file in order for us to render your uh your drawing on the website if you were doing this on your own computer you wouldn't need this and every time you hit you run plot.show it will just like pop up a window on your machine um with the graph there but uh yeah this is how we get around that um okay seven minutes left violin plots uh so sophie you want to talk about violin plots as i copy yours so just like we saw in the last uh the last section on box plots they give you a little bit more information than just plotting means or medians or something like that plotting the central tendency um and showing whoops i think alex might have dropped out um temporarily but yeah so uh so they show you a little bit more than just the the mean or the median but they don't give you a lot of detail about the distribution that you might get from a histogram and so now we can kind of combine all of that information into a single plot and um so these violin plots are kind of it's almost like the histogram that you would or the the kde estimation of the histogram um is getting kind of uh like cement it's happening on both sides of what is essentially a box plot in the middle so now we're in that green the second data set um we couldn't see the bimodality in the box plot now when we plot this violin plot we can see that by modality yeah my internet blocked out so i oh no he might be gone again um hopefully he'll come back uh but yeah so i think this is another example um where knowing that you have different types of visualizations at your fingertips i hope it holds for six more minutes here i think i'm back am i back yeah you're back i was talking over you potentially because you're out for another second at least on my computer oh no okay um i am going to wrap things up because i think that alex's internet is um is a little bit spotty so this is basically the end of this lesson oh no you're back no um and there are a couple more articles in here in the in that same path about different types of uh visualizations you can make ways that you can customize the coloring um ways that you can customize the themes of the plots and um and so those are really kind of fun to take a look at and play around with if you get some more time and then there's also some on platform and off platform projects that are really worth taking a look at um i think there were a lot of questions about csv files and um and how you can like load data and actually deal with the different types of data sets that you might see in a real world context so um so i think that it it is really helpful to work on some of those off platform projects so you can really get a sense of that um i'll just continue answering questions for the last couple of minutes i see is computer science career path good for a math student um i was a math major in college i studied i studied math before i studied computer science really and um and i think that like thinking about things from a mathematics perspective can really help um if you are trying to then code something it uses a lot of the same types of skills and um and types of thinking and uh to learn how pro so um so the question is does uh does i'm a little confused by the question but i think as you're asking whether computer science and math can combine to um to teach you how to how programming a language actually works i'm not i'm gonna defer to alex maybe on thursday to answer that question um alex says plug the show on thursday so that's a good segue um on thursday alex and i will be back uh we will be uh doing a pro only event um where we're going to be kind of holding office hours so if you have any questions you can come and ask us usually we prepare a demo so we will probably pick some data sets that we could take a look at and demo how you can use some of these plotting functions on your own computer um and then if anybody has additional questions you can come to that event and come ask us those questions and we'd be happy happy to uh take a look at your code even if there's not too many people usually they're really small so we would love to see you there those are really really fun um i'm gonna sign off but it was great to be here and i hope some of you come on on thursday and happy end of the skill path i hope that you guys learned a lot and i hope that uh this was a useful set of events alex are you back and do you want to say anything or good you're muted if you're okay goodbye you