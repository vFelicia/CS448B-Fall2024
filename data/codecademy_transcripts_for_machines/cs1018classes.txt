if you're out there in chat go ahead and say hi to us just wait to confirm that we are actually live all right looks good to me all right uh hello everyone my name is alex koontz and we've made it this is our last cs101 livestream session i'm here with jamie hi jamie how are you doing i'm good i hope everyone is doing well welcome to our last series of cs101 yeah so uh again all of these uh videos have been posted on our youtube channel so if you ever want to catch up on the series you can go watch there right now we are live on a ton of different platforms jamie and i are mostly looking at the chat on youtube if you want to chat with us during this session um so if you're watching on facebook or twitter or even twitch which i think very few people are but uh that twitch channel is still going uh come on over to youtube and uh we can chat with you there again this is our final session in what we were calling our cs 101 live stream session the idea behind these sessions was this content is pretty similar to what you would see in an intro level high school course or first semester of college course we definitely didn't get through everything that you would see but it's a nice kind of introduction to all of these topics um we're teaching this these courses in python but again i really stress every time i do one of these i stress that these concepts are pretty universal to any language and so the important thing that you should be focusing on is the concepts themselves and then the python syntax is like something that will you know have to power through in this in this lesson and when we're on the python syntax but really we're learning the concepts and then you can apply that to java or javascript or c plus plus or c sharp or like any of these these big programming languages so um let's see uh yeah uh what lesex says the live sessions best we can do in the pandemic yes that's another reason why we're doing this is because uh honestly jamie and myself i guess i won't speak for jamie but i miss talking to people so it's always a thrill to be able to talk with uh talk with people in the chat as we're doing these things so yes i can also say i miss talking to people even my introverted self is a little overly introverted these days yes all right so i'm going to screen share i'm going to show folks what we're doing um so the lesson that we're going through again is you can find this cs101 live stream series it's in our catalog you can probably search for it in the search bar it's linked in the youtube description and we have made it all the way down to the last lesson on classes so let's go ahead and jump right into this and okay cool uh let me jump back to the start all right so this lesson is all about classes and objects in um a programming language in this case python and so again let's focus on the main ideas behind uh classes and objects before diving into the python code and so jamie how would you describe what a class is um so i kind of describe a class like what i always view it as is it's kind of like a blueprint for like um different objects you can create so like let's say you're like trying to i don't know write a class that kind of like represented i don't know like the attributes of a pet or something so you might have like a blueprint for like what pets might have like they have names they have ages they have you know like dogs might bark or cats might meow make different sounds or something and then like you can create a blueprint where you can kind of create a lot of different objects from that class so that's kind of like the way i view classes and how they can be helpful in python or any other programming language yeah exactly so classes are really similar to things that we've seen before in fact we've already worked with a couple of classes already so in this exercise i've actually already done this which is kind of nice i don't have to um i won't have to type all this code but in this exercise we're asking you to call the type function on things that we've already used so if i call the type function on uh just the number five i get okay this thing is the class integer the dictionary is the class dict and an empty list is of the class list and again these can change right if i if i change my list to have two things in it it's still a list right like you were saying jamie the class itself the idea of the list is kind of like the blueprint it's this is what it means to be a list you can store items you can have a length you can um you know get the last item but the objects themselves are specific instances of that list an instance sounds like a very fancy word but basically means it's a unit of that type so i can create two list instances here um and i can print both out or i can print the type of both out and there you go you can see okay i have two things of class list they both are objects of the list class so that's number one that's the that's the first big takeaway here is that classes which we haven't really looked at how you define a class but classes are like the theoretical blueprint of what does it mean to be a list and then objects are actual instances or actual examples of that blueprint and so you can have multiple objects with different properties right this list has a four and an eight in it this one has a one and a five in it so they're two objects but they're slightly different even though they uh contain similar properties so that's big idea number one what a class is and what an object is all right so as jamie was saying a class uh actually so i'm gonna kind of be jumping around this uh this lesson to teach it in a slightly different order um let's look very briefly at how you define a class in python similar to functions you're going to define it with a keyword in in the case of function the keyword was def now that we're not defining a function we're defining a class that keyword is class you give the class a name so the name of our class uh back in this example uh was what was it i think it was int dict and list so that was the name of our classes we're creating a new class like facade we give it a name and then just like with functions we give it a colon and then anything that we want to be a part of that class needs to be indented one exact same thing to functions where it's kind of saying this line of code belongs to this class because it's indented one after this colon so let me um i forgot to reset my code so again this one's pretty basic so i won't uh i won't even retype my code but you can see we're creating a class facade here and then i think in the next uh in the next exercise yeah okay in the next exercise we're actually asked to create objects of the class so it's again this this idea of i'm going to define the class it's the blueprint for what the thing does and then i can make as many of those things as i want so let me see so i can say um i can create a variable named facade one and then we'll talk about this in a second but in order to create a new class uh a new class that you create oops and i uh what did i do here um oh i don't even use the word new that's uh that's java uh there we go in order to create a new class um we're gonna end up calling a constructor we're gonna look at constructors in a little bit but for now let's just just uh just believe me when i say calling this uh setting a variable equal to the name of the class with parentheses is the thing that creates an object of that class so again i can print i can create both of these i can print out the thing itself and i can print out the second frame so you can see i have two things and again i can uh let me go back how did i do this it's type yeah so if i if i do type uh i can see the type of this class so let me both print out the object itself and then i'll also print out the type of both of these guys and jamie that when i when i print out the object itself i get something fairly weird um i don't know if you know the answer this if you're not a python person but what is what is your sense of what's happening here when i just print out my two facade objects here um so basically when you print out like just the object it's telling you that it's like in main which is like your like specific like python file i believe and then it's saying like you're looking at the fake hate object i do not know what the zero x like i don't know what the la that last thing is um but i don't know do you know what that thing is alex yeah so that that's actually the memory location of this thing okay um and what's interesting right now is that this is like probably getting two in the weeds but these are actually at the exact same memory location which is kind of weird because they're they should be two different objects but because this class is so basic it really has nothing associated with it the computer's probably just throwing out the same memory location that's that's way too much that's like way too much in the weeds not really important the important thing is look at we've created two objects of facade and uh we can print them out which prints this weird memory location thing and then we can also check their type also um alex we have a question from someone in the chat sami so they're asking why when we look for type the result is class so like we get like class and class um you know something like especially when we call like a list or something else yeah and then also we're asking why are we calling class two times here why are we calling class two times here uh well i think maybe like why is the result twice oh yeah yeah yeah or why are we creating two of these um yeah great questions so um i'll answer the first one of like what is the deal with this print statement of saying class honestly it's something that i i don't know the answer to why why does it say class four i bet there are certain types of things that you could ask the class of and or you could ask the type of and it's not a class um it could be something different so you know i imagine there's something else here that i could pass and it wouldn't necessarily be a class but those things are probably pretty rare most things in python are going to be a class and then it just tells you the name of the class the main here is a little bit funky it's just telling me that this is a class that was defined in my you know in the file that i'm running um whereas back over here these classes uh you didn't have anything to do with maine because these are builtin classes right we didn't define them ourselves python defined them for us right somewhere somebody has written code that says this is what a python dictionary means and what it does and so we didn't define that class we just used that class to make a dictionary object or to make two list objects all right the question of um what why are we why are we doing two or you know why are we calling this facade thing twice um that's a good question so we've created two objects of a facade but right now we can't really see what they're doing because a facade essentially does nothing right it's it hasn't it has nothing associated with it we put this this keyword pass here just to say don't do anything so let's actually i'm going to break from the lesson for for a second and just create our own class because i think that at this point we want to start actually letting our class do something so i'm going to do the same thing i'm going to make it a dog rather than facade just because a facade is like hard to wrap your mind around jamie i think we talked about dogs in a in another livestream that we did yeah probably i'll always bring up dogs um okay so i'm gonna i'm gonna bring um i'm going to do the same thing that we have but with the dog instead of a song here so i'm going to say um jamie's dog jamie's dog and alex's dog okay so i can create both these let me print these out um just or i'll print one of them out just so we make sure that that was like actually created okay so now we need to start talking about what does a dog what do we even do with classes right because right now we've done all this setup but our dog doesn't do anything right we're just saying pass so the idea behind classes and jamie you talked about this a little bit at the start is that classes can have things and classes can do things so i always when i when i teach this i always say there are classes can have things so like nouns and adjectives and then classes can do things which are like verbs so let's do the verbs first because giving giving a class nouns and adjectives is slightly more complicated um let's uh do the verbs first so the verbs or things a class can do is referred to as a method but it's going to basically look exactly like a function so i'm going to say okay a dog can speak and here's something new uh so let me print hello i'm a doc [Laughter] this this is something new that again i'm going to kind of gloss over for now all methods all the things that you say okay a class you can do this the first parameter is always going to be self and this is basically not worth worrying about for right now i in fact i've been programming python for like 10 years i have a vague understanding of what self does i don't have a great understanding what self does and so i i understand that it's annoying when teachers say like don't worry about this but really don't worry about it right the thing that you should be focusing on here is that we are giving the dog class a verb or letting a dog do something so uh let me run my code make sure it doesn't error if i forgot self i think it might never no it actually didn't there would error once i try to call the method okay so i've now given a dog the ability to sleep so now i can tell a specific dog after i've created it i can say okay let's tell jamie's dog to speak and there we go we can see jamie's dog just said hello i'm a dog can also tell alex's dog to speak and as you might expect he's going to do the exact same thing as jamie's dog all right they can both speak they can both do this this function um they can you know they can do it multiple times uh there we go all right any questions in the chat about methods about these verbs that we can ask the uh ask a class to do um no questions about that but someone did ask is this course that we're going through paid on codecademy like is it a pro course yeah so right now this this one that we're specifically going through is a pro course um you can probably find really similar content in python 2 which is a free course i and again the differences between python 2 and 3 are minimal enough for a beginner that i i believe it doesn't matter i believe that you can take that python 2 course um it's an owned version of python but again if your goal is to learn the basics of coding you can do that in python 2 and there'll be a there'll be a lesson about classes and methods in that python 2 course this is also a pro course if you want to take this exact course um then you can you know upgrade to pro which uh you know would be great also someone uh commented that they believe self is just a pointer to itself um which i think is like pretty much what it's basically like self is just telling python to like that you're like working with like this specific object so it's kind of i like view it basically just as a placeholder for jamie's dog yeah like we make like uh instance variable jamie's dog or alex's dog within the class blueprint itself like it wow i'm saying itself and now i'm just within the class blueprint dog self is basically just a placeholder for like an instant variable instance variable that you might make later um yeah so that that will all become relevant once we um let me get rid of that pass actually that will all become relevant once we get into instance variables i think the thing that's confusing for methods is that you know previously in functions i could like define a function of add together a and b sorry my keyboard is breaking um and then i could return all right let me just say print a plus b i think what's confusing about methods is that within normal functions right if i if i try to call this function um you know one and two i have to pass it to when i'm actually calling this function i have to pass it two parameters because i've i've said this function takes two parameters right it takes a and b i think what's confusing about methods and the reason why i like to skip over self for methods is because that pattern doesn't hold up when we're actually calling these methods right it looks like this speak method takes a parameter named self but then down here when i'm calling it i don't pass in anything and so that's that's why it's confusing where it's just different than how functions work where i i don't need to pass anything into this speak function even though i've declared that it takes it takes this self parameter okay let's now talk instance variables and in order to talk instance variables we're going to have to talk about the constructor which let me write the constructor here first okay okay cool so whoops spelled that which would have really screwed things up okay so the job of the constructor is to create the object and so we've actually been using constructors all along this was um on lines nine and ten this is us using the dog constructor it's the thing that constructs the dog um it's also called an initializer which is when if you're writing your own constructor in python you use this init init method basically this is our thing um where we define this is what it uh this is how we create a dog and by default if we don't write our own constructor a basic one exists that takes no parameters so that's how we've been able to create dogs so far is that we've just been using the the constructor that automatically exists but let's say we wanted to write our own constructor where we can give a dog a name so uh let me let me change this to input so the constructor is where you can now start to define the nouns and adjectives associated with um associated with a class so i can say this dot name equals input name and so let's see if i run this i think yeah okay so i've just written a constructor and now when i run my code i get an error jamie why do you think let's let's first let's do a little work to debug this error what do you think is happening here it says missing one required potential uh argument input name yeah so basically before we didn't have this init constructor method um and this niche constructor method has this argument called input name so now basically what's happening is if you look you know the type error is init missing one required positional argument input name so now whenever we call the class dog it's looking for this input name it's looking for the dog's name and right now basically python isn't finding it so it's throwing this error yeah you can see on line nine on line nine we're saying i want to make a dog but i haven't given you an input name and the reason why this worked before was again because by default if you don't define a constructor python will just say fine i'll let you make an object with this default constructor with no parameters but as soon as i define a constructor that that default one python is no longer going to make that it's going to make you use the constructor that you define so i can say um jamie what do you want your dog's name to be clemmy c what's up e clemmy clemmy clemmy my dog's name will be winston is clemmy your your actual dog's name or your family so now that we're now that we're calling the constructor with this input um ah this is not this dot name it's self.name this is used in a lot of other programming languages python uses itself okay cool so now i've made a dog and each of these dogs has a separate name right jamie's dog's name is clemmy my dog's name is winston and now i can use that variable differently so for example i can go in and edit this speak function and say hello i am a dog my name is plus self dot name and jamie this is where you were talking about what self is doing where self is saying it's like a pointer back to myself so when when jamie's dog calls this call speak jamie's dog is gonna say okay what name what is the name of specifically jamie's dog not alex's dog not any other dog what's the name of my own name right or myself myself's name um so now if i do this i'll see let me add a space here to make that print statement nice so let's get rid of this stuff this function example okay so um i'm saying okay i want jamie to speak jamie's dog has been initialized so its name is equal to whatever i pass into here into clemmy and so when he speaks says hello i'm a dog my name is clemmy when alex's dog speaks it uses its version of the instance variable which is set equal to winston so this is kind of showing the power of classes right i can create this blueprint for a dog where i can make any dog in the world that i want i can give it any name but then all dogs are going to speak in the same way where they're going to say hello my name is a dog and my name is whatever their particular name is so this is really kind of like our class is is completely built out built out now um jamie anything that you want to add or anything from the chat that we can uh that we want to talk about here yeah so uh someone like uh because i think someone was asking before like why were we calling um you know dog twice and running it twice before when i was just saying hello i'm a dog so like this is like where just as alex said like when we add a constructor it kind of allows us to like give our different instance variables in this case jamie's dog alex's dog we could have any dog as alex said we can give specific attributes to them so that when we use the methods we can kind of make it more unique for each dog so before we was just saying hello i'm a dog each time which like doesn't seem that useful right like it's like doesn't really tie to a specific thing but now it's hello i'm a dog and my name is the specific name and we can add different things like age um we can have different commands like i don't know like whether or not your dog barks or not you can like build out methods that will tell you when it sparks you can compare different dogs um stuff like that so you can create a lot of different methods that will make the class much more powerful and build out the blueprint yeah and so that's a good point about adding other instance variables and again instance variable i always say it's your nouns and adjectives right a dog has a name a dog has an age a dog could have a um you know an adjective like well i guess you know whatever a dog could have a color of brown and one thing that i want to point out here is that as i've written my constructor right now i can't really set the age of a dog any dog that i made i've hardcoded in its ages too its color is brown and so the way that you kind of can add um variability again is through these parameters where i can say okay rather than it always being you know every dog being two again let me print out let me print jamie's dog dot age right jamie's dog is set to two here because when i create it it automatically gets set to two if i want that to be variable again i could come in here and say um input age um also alex we're getting a good question in the chat about why is it self.name equals input name versus self.input name equals input name yes uh cool let me right so let me uh let's see self.inputname equals input name yeah so right so the job of the constructor is to define the instance variables and give them value so when i could name this whatever i want i could name this input name but that's not a great name for it um because then later when i use this variable in other methods or elsewhere i would have to remember okay every dog has an input name so i'm saying this is where i define the instance variable i say every dog has a name and when a dog is created when i initialize it or when i construct it i'm going to set that instance variable name which can be used elsewhere right it can be used in these other methods it can be printed out down below um i set that equal to whatever value i pass in here oftentimes uh let me get rid of this briefly oftentimes you'll see the name of the parameter mirror the name of the uh of the instance variable and so if i run this code right now it's actually going to error because it doesn't know what input name is right it's trying to set self.name equal to input name but input name doesn't exist anywhere because i changed the name of the parameter so i could do self.name equals name what this does this is the same exact thing basically it's saying set the instance variable equal to um whatever gets passed into the to the parameter when people are first learning about classes i like to make these things different names just to make it really clear that we're setting the instance variable the thing that starts self dot equal to um the thing that i'm inputting into my uh into my constructor let me finish uh so i can do input age and again there's nothing magical about these um these variable names i could name it whatever i could just name this a maybe that's a good example i'm going to set self.h equal to a now when i run my code i'm going to get this same error right on line 11. i'm missing one required potential argument a that's saying on line 11 i'm trying to create a dog just using one parameter when i've said there should actually be two parameters there should be input name and then there should be a second parameter named a so i can set this dog's age to uh uh is is clemmy still around jamie or how old is columbia so chlamy is 11 years old okay and uh winston is sadly no longer around so uh i can do n a which actually is a bad idea i shouldn't mix these nanotypes um i'll say winston's 100 years old um right and now i can print out jamie's dog's age and i can print out alex's talk savage there we go jamie's dog is 11 my dog is 100. all because i defined it that way in the constructor any other questions that i could that i could take from the chat jamie someone just asked a really interesting question i'm actually not certain of can we only create like um an init variable like self.name equals input name in the constructor or can we create it in other methods it's a great question um i don't know the answer to it either let's try um self dot um whatever what's another attribute of a dog number of teeth i'm gonna try to create this okay yeah this this will be interesting um this will be really interesting so i've created my dogs if i try to print jamie's dog jamie's dog dot number of teeth i believe this will error yeah dog attribute has no attribute number of teeth but if i make jamie's dog speak first jamie's dog dot speak now this this is where it's interesting right because speak might create this instance variable and then it might just exist it does so yeah so that actually works um but it's weird right really i i always stress the job of the constructor or the initializer is to set the initial value of all of um of all of the instance variables you know you might eventually have other methods that modify those instance variables right i could do def have birthday remember instance variables are always verbs so i kind of always like to or sorry uh methods are always verbs it's things a dog can do and so i even like naming my methods with a verb right a dog can have a birthday and in this case self dot age um plus equals one right so i'm going to let's print jamie's dog dot age let's make jamie's dog have a birthday it's actually my dog's birthday soon oh almost 12 years old for uh for columbia yeah her birthday and halloween that's very nice do you dress up your dog in that halloween costume no she would hate that she would lose her mind okay cool so i can uh i'm gonna print jamie's uh dog's age then i'm gonna make it have a birthday which will increase the h by one and then i'll print it off again so we should see there we go 11 and 12. so you know you can have methods that change the value of the instance variables after it's being created but going back to that question of like can instance variables be created in other methods that you can but that's really unusual i don't know if i've ever done that ever um so you can but it's unusual another really good question so someone's uh sammy just asked um why are we using self in each method like why are we saying self.name and self.age yeah um and the reason for that is because like um each of these instance variables is like tied to a specific you know like tied specifically to jamie's dog or alex's dog so like self.name is basically telling this method that this is jamie's dog when we use it on jamie's dog so it like knows it's clemmy if we just said name or like input name and like didn't you know specify it with self um it wouldn't work yeah actually and this is probably a good error to show right so if i change this method from self.age to just age the error that it's going to throw is i have no idea what variable you mean by age right the instance variables all methods can access those right this guy can talk to you know speak can access self.name have birthday can access self.age but if i do this when i try calling the method right you can see my code actually runs right i'm able to create a dog able to create a second dog i can print jamie's dog's age and 11 comes out but here when i try calling my happy birthday method i hit an error where local variable age referenced before assignment basically that means i have no idea what variable i i don't have a variable age for you to add one to it never existed and that's because we're trying to access a local variable a variable that only this method would have access to rather than the instance variable cool any other questions that we that we can take or someone did ask is there a limit to the number of attributes or like parameters you can put in the unit method um and they pointed out like maybe storage memory and i said there's probably like not a limit until you hit that memory capacity but that would be like a lot of parameters but yeah i don't think yeah uh there's there's always a limit right our computers are only as big as they can be they're not truly infinite but it would have to be so preposterously large that again you're never you're never really going to encounter that yeah um one other thing that i want to show that i think is helpful as we're just like talking about um constructors is that you know my number of inputs doesn't always have to match my number of instance variables so i could have like self dot dog years and then i could have self dot human years and i could pass in like input human years and set human years equal to that and the dog years equal to that times seven right so and basically what this is doing is my stuff is gonna error now because i don't have age anymore um basically this is going to still i'm going to have three instance variables but i i'm using the same input for two of them right i can use this input to say okay the dog's age in human ears is just the h that you pass it to me and then the dog's age in dog years is that age times seven um so i think one thing that i see a lot of students do early on is that they kind of think that the only thing a constructor or initial initializer can do is set the value of these variables and realistically that's what its job is its job is to set the value of the variables but if it needs to do some crazy math right if i need to like create a variable a equals human years times seven and then do a crazy for loop to loop through something right i can for i in range a you know basically i can write any code i want to write inside my my initializer and that code will run still fine but remember the job of the initializer is really to create the instance variables the nouns and adjectives associated with associated with the um the class so we have one more really good question um someone asked why is each method followed by self um like define speak and then why does it say self yeah so again this is like i don't have a great answer for this basically if we don't yeah do you have a great answer for jamie i just kind of view as like a placeholder for our instance variables so it's like like self kind of refers to um like like a placeholder for like jamie's dogs when we call jamie's dog speak we just need it there so that um like when we call it on our instance variables like it it knows that it's tied to that instance variable yeah um i think it is a little bit confusing because like methods are very similar to functions and like that's not really how like functions kind of work outside of a class yeah um but basically like self is just kind of like it just like points to like that specific object yeah yeah and i think probably to tie to the initialized object which is basically yeah i think i think you can actually even um change the name of this to anything that you want and then that's just the keyword that you use for all of these things so in a lot of other programming languages you'll see this be the the keyword and so if i say you see actually what happens here so this don't yeah that runs i created my two dogs let me see if i can let me print out my dogs just to show you that exists or i can print jamie's dog dot name there's clemmy let me now try uh doing jamie's dog dot speak i actually don't know if this won't work because i've set up this keyword to be this here and i'm using selfie here i don't think it will work but we'll see yeah it's still it still works um let me let me show something else and then we can uh i'm gonna change all these back to self really briefly um let me let me introduce another topic and then we can do another little experiment to see if something works or not which might clarify what this deal itself is um the thing that i want to show is that methods can call other methods so you know outside everything once i have jamie's dog i can make jamie's dog speak um by doing jamie's dog.speak i'm saying use jamie's dog to call the speak function but let's say i wanted this method to then call have a birthday i could call self dot have birthday right and that would be just like i'm using jamie's dog to speak basically this would this is saying whoever calls speak first prints this and then that thing whoever called speak then calls half birthday and so now if i make uh let me print off jamie's dog dot age uh whoops let's change this back to age um and let me print it after speaking input age is not defined i left off my e there we go so right so jamie's dog is 11. i then we then tell jaime's dog to speak um jamie's dog then speaks and then it calls the thing that spoke self cause it calms happy birthday and so again i think i i wanted to show this because again i think you don't have to call this um self you could call it whatever um so i could call it this it's just that when you're using the reference to the thing so now when you're saying okay who who do i want to call happy birthday on it's not self anymore it's this that doesn't work ah and self is not defined so maybe it's this dot name yeah um right so this is like basically this is the key word for what do i want to say what is the keyword that i want to use to refer to myself it could be this it could be self it could be a right it's it's a complicated question and like you can see that it gets into it's a little bit confusing basically just always keep itself you should always remember that um that you need to give itself as the first parameter and in fact it's useful here to show if i forget this when i ask a dog to speak this is a really common error message that you'll see all the time when because i you know i forget to put self in there all the time as well because it's just a weird thing if i forget this you'll see this error message all the time of takes zero positional arguments but one was given that means on line 17 there's like an implicit self being called there but because i haven't said that this takes one argument it basically it's saying this method on line eight takes zero but i'm giving it one because the self is secretly being passed into there um so this this is an error message that you'll see all the time and usually it's like oh yeah i forgot to put self in my uh in my method at least i run into that problem a lot any any questions that we should take from the chat jamie um i think he was actually just answering one of the questions really well because someone just someone had asked is it mandatory to put self in a method and you just did like a great demonstration of that yeah yeah and people have been giving like really good explanations of like what self does likes um someone wrote self binds to the attributes that are initialized and someone wrote the first parameter argument is always pointing to itself and reserved for that any arguments you want will have to go after that yeah so like pointing out that if you want to add arguments to a method on you like the aren't self like initialize variables uh you can yeah yeah and again i would say that all this stuff is good to have a kind of uh you know understanding of when you're a new programmer but you don't really need to know all of the details again i i've been writing python code for like 10 years at this point and um you know i'm comfortable enough with coding that i can like play around with it and try to develop an understanding of this for myself but really if you're a new programmer or if you're just learning to program and specifically just learning to program python i think the more important thing is like understanding what a class is what an object is this idea that classes can have instance variables which are nouns and adjectives the idea that classes can have uh methods which are like the verbs and then the idea that i can create multiple ver you know multiple objects of a class and each have them do different things and each have they each have different variables like those are the big picture ideas and this discussion about self it's important to to know because obviously your code is going to crash if you don't uh you know if you don't have the exact rate syntax but the nitty gritty details of like what self is doing to me is not really that important if you're a new programmer it's like hey just remember to put self in places and then focus on like the more big picture ideas behind what is a class what is an object what are instance variables what are methods um that sort of stuff cool um okay so we basically didn't do this last night i just basically just sat on this page and wrote a bunch of code and talked for a while um you can see that this this lesson covers a lot of stuff that we just talked about this one's interesting um this one is you know what i'm just gonna go back to my dog because we've been working with our dog right now if i just print out my dog oops i just deleted my dogs if i just print my dog we get this weird um memory location thing it's not super helpful so what you can do is that uh you can say you can define a method called i forget what it's called let's see string representation what is it wrapper let me grab this all right there we go i'm printing out my dog it's the weird memory location i can define again a special method called wrapper which takes self and what this does is that i can define something that it can return so i can return this dog is named plus dot name plus and it is blank self dot age years old so the thing that's returned from this wrapper function is the thing that gets printed out when you ask to print the object so now instead of printing out jamie's instead of printing out the memory location when i print out jamie's dog it'll print out um and uh let me i'll go back and show this error once i show the correct output let me add a space there to make that print statement nice um this dog is named clemmy and it is 11 years old so i can print out jamie's dog i can now print out alex's dog basically this is just a nice function for if you want to be printing out your objects in order to know things about them instead of seeing the memory location which is not helpful at all you can define what gets printed out when you ask the object to be printed using this special function and it has to be named this way i'll go back and show that error that i had before um just to show a little bit of debugging uh online eight i am trying to return this dog's name self.name and it is self.h years old and i get the error must be string not int and so this error is saying i'm trying to use this plus function with a string and an integer and i can't do that uh some languages will let you do that it will like automatically make the integer a string in python you can't you have to specifically say i want that integer to be a string and now i can add a string and a string together so yeah i think that that's uh that's a cool little thing to show is that you can get rid of the printing out the memory location and instead define your own what does it mean to print out an object right okay let's jump to one of the code challenges real quick um one of them is very similar to what we just did yes it is a dog class i think i i like the very last one of televisions oh yeah so um okay cool let's all do this together and i could uh maybe even get input from the chat on what instance variables we should give it and what methods we should give it so we want to make a television class and the television class should have at least two instance variables so when thinking about this what do what are nouns and adjectives associated with a television so those will be our instance variables and then a television should be able to do things right it should have verbs associated with it those will be our methods and so we should think about okay what are things that tvs can do um so i'll start writing this and in chat if you want to start telling me what would be good instance variables for a television to have or good methods for television to have again adjectives nouns or verbs associated with the television so start writing out my class television and then i will create a television object because i know we're going to want to test it so my tv goes television which programming language uses on new is it java new is java and i think javascript um yeah in other programming languages in order to create a new in order to call the constructor you need to give the new keyword but that's not the case in python all right so do we have any did anyone in chat give us an instance variable or a method that a tv should have i don't have any yet okay i'll start off with um an instance variable so again i'm going to create a constructor here it's going to take self and a tv should an adjective associated with the tv is whether it's offer on right it's the uh is it powered on so i'll create self dot powered on we got some we actually do have some cool ideas now yeah so someone said screen type um and then someone not actually a like parameter but like a cool method a change channel method so maybe we can have like a what channel it's on now like yeah so right so in order for us to have a change channel method we probably a tv probably needs to know its current channel and let's say so by default right now i'm going to say that any tv that is made is powered on its fonts it's turned off and then it starts on channel one so i can confirm that that's working by printing my tv dot current channel see um did i misspell it let's see what am i doing oh whoops so this is a confusing error um i i want to be creating a television like this and i thought i was doing it like this i thought i was saying okay call my constructor but i named my constructor wrong right the constructor has to be that's the name of the constructor it's underscore underscore in its underscore underscore and so when it was just this that was just some other method that i was never calling and the default constructor was being called so now there we go i have a current i have my current channel um i think that's a really good example of like you know test your code as you're building it right i could have done a ton of work and uh like written my change channel function or method done all that stuff and then tried to create a tv and not have it work and now i have all of this code that i would have to go through it was way easier for me to you know to have screwed this up to have not created the constructor correctly and then say okay wait a minute why does why does current channel not exist why was this instance variable never created it was never created because this constructor was never called and it was never called because it wasn't named properly okay cool let's do that method to change the channel so def change channel you can actually do a couple of these we can do uh we'll also uh mention like volume yeah right yeah we can totally do volume um let's write two methods let's just do change channel to any channel so this is like you typing in the number right input channel so i'm gonna say self dot change channel or current channel um equals input channel um if i were i really should test this method before writing another one but i'm pretty sure that one will be okay and so i'm gonna then write a second method that is um uh i want to phrase this in the form of a verb how do you phrase like go up one increase increment increase channel by one another thing that i'm doing because i'm trying to go quickly here is my naming is all over the place here i'm using underscores here i'm using camelcase so um you know that's different here i don't need to give it an input i just want to say the current channel goes up by one someone's asking a question like what's the best way to find the best methods and the best attributes um for a class you're creating um i think for that it just really depends on like what you want your class to do like what you want your blueprint to do um because like for television like we can create like a lot of different things like we can change the channels change the volume change like a bunch of things um and they're like different ways we can set up those methods and attributes um i think it's probably a good idea like before you create your class or like you're creating something that's like pretty complicated to like write out or like map out on like paper everything you want to do and everything you want to include so that you don't just like jump in and realize you know later like after you've already created and built it out that like there's some way that you could have done it that was like more efficient or like more powerful totally i think um let me let me finish writing this code real quick to just test these methods and then i can speak to that um so i'm creating a tv uh its channel when it gets created should be one i'm then changing its channel to 10 and printing it out so we should see one then 10 and then i'm increasing the channel by one so it should go up to 11. that's what we see um yeah i think uh exactly what you said jamie you just have to right this is where you get to kind of just design your whole system where you you should ask yourself whatever class you're creating what things does it need to know about itself what nouns and adjectives does it need to have and then what does it need to do and those are the methods um i think one thing that you'll see a lot or one thing that might be a good way to organize yourself is to like um write dummy methods so it's like um what's the name of this so if i know that i want to change the channel i could write this method and just say pass and write this method and just say pass and then you know i might have a bunch of more methods and so you know this is one way to organize yourself is to um write out kind of all of the headers of your class write out all the methods right maybe you don't even want to give these uh these values yet but you know that uh you know you know that tv wants to have a power on or off and you want uh you want to have a channel you want to have a volume um right you can kind of like lay out the the bones of your class and then come in and fill them in one by one of like okay what does a you know what does this do what does that do cool any other questions that uh that we should take from uh from the chat i was muted sorry my roommates were being noisy in the background um someone just asked um why when we created self.powered and i think the other ones self.current channel why don't we put them as arguments in the init method sure yeah so we could have done that right we could have said whenever i create a television i have to give it a input power state right and then i could set power it on to whatever i give it but sometimes you want every tv to start the same way right i would argue that when you buy a tv it's when you buy a tv you could consider that you initializing the tv or you constructing this tv it's probably going to be off right every tv that gets created it's going to start off and so it's like sometimes you don't want to even give them the ability to say you know i want to start it true sometimes you want to say you know what every tv as soon as it gets created it's going to be off and then you know later on there's probably going to be like a turn on method that flips powered on self.powered on rather and this takes itself i already forgot it you know it flips it to true um so eventually there may be a method that can interact with those variables um right you're just setting the initial state and it might be the case that you want the initial state to always be the same for every object that you create and then later on you can change them however you want anything else i see michael can you add an array of preset screen settings such as bright dark vivid movie yeah so the reason why i wish we had like more classes because uh more classes is a funny word to use in class more sessions because we can start to now use everything that we know right so if i have let me get this into a state where it actually runs um see powered on will be false self dots channel or what is it uh current channel equals one whatever uh i can get rid of these for now um um and then the init i'm creating the tv it's a good example of takes one argument but two were given uh remember there's the implice itself that i'm calling here so right now this line 10 is failing because i'm giving it two things i'm giving it self and true even though the self was implied and i was only asking for one basically i forgot to remove that from when i had uh you know put that in as an example before and then it has no attribute change channel because i deleted that method so it's crashing online uh 12. the question was can we can we make a list of things right so i could have a list of things that was like self dot uh what was the question that michael said uh screen settings it's like yeah um equals let's just say it's you know i don't exactly know what that would be maybe it's brightness dark vivid movie something like that i could then write a def increase settings self i could then write something that loops through all of this so for setting in self.screen settings uh setting plus equals one right i don't think i don't think that exact code would do it actually but that's the idea is that you can that now start using everything that we know in python lists dictionaries loops conditionals all of this stuff can be used inside these methods inside instance you know you can set your instance is equal to other instance variables um you know i could have a class television and then i could also have a class uh i don't know what this would be channel and i could have a self.current channel equals channel right i could have an instance variable be an object of another class um where now this instance variable is going to create a new channel object and that channel object could have you know any sort of instance variables methods all that sort of stuff so all of this stuff can start to be layered together um okay um let's see we have more good questions in the chat um we're pretty much at the end of the session um this is our this is our last session um so i'm actually i also took the day off work uh so i actually have no meetings coming up so i can come and hang out with you all as long as you have questions to a reasonable extent i might leave in like 20 minutes jamie if you have to leave at any time feel free i can i can handle these questions but essentially that's the end of the lesson thank you for watching first of all if you if you made it this fall if you made it this far um yeah i one we would love feedback on this stuff if you if you've made it this far um you know drop us a comment on this youtube video or something i'm just like curious as how many people make it this far i know people watch these videos but i have no idea if they drop off after like five minutes or something um so first of all thank you if you're watching um leave us a comment on what we could do better what we could do um you know how we could make these things better this is the last planned stream for now um i hope that we'll run another series in hopefully a couple of weeks um but right now uh we are not planning to so hopefully eventually we will do another um series but it probably won't be for a little bit um yeah and then other than that thanks for thanks for watching thanks for hanging out with me jamie yeah thanks for hanging out with me on this one and also we did the what like the loops one together or something i don't remember we did a couple there's so many of these yeah um cool so yeah if you're watching this on youtube i'm gonna as long as people have questions i'm gonna sit here and answer your questions but uh yeah folks on youtube it might be a bit hard to follow if you're not like watching the chat also come on so feel free to drop off at this point if you're just like watching this in the archives but otherwise um yeah i'm happy to answer more questions and if nobody has questions we can shut this off i think there are a bunch of questions in the chat okay yeah so sammy has been asking about this this false variable and i think it's answered in the chat but again that's just an instance variable like all of my other instance variables so i could have you know just like i have my dog name i had self dot dot name i could make every dog dog's name winston right this could a variable could be a string it could be a list of integers or it could be a boolean and so this is just an example of one of our instance variables is a boolean that's either true or false cool all right i'm gonna give it another 90 seconds uh and then then we can take off um jamie what'd you eat for lunch today at chipotle oh that's very good right right before this actually yeah um yeah i'm i'm feeling full and happy and content nice um uh let's see i don't know how to pronounce your name par jury asks how do you increase problem solving skills um i would really encourage you to as you're going through codecademy lessons to do the kind of things that jamie and i did today of um you know playing around with your code as you're going if you don't really understand what self is doing you can play around with the code like like that and that will just allow you to like the more comfortable you become with seeing error messages debugging error messages um playing around with your code changing something in the code and printing values out the more comfortable you become with that sort of stuff i think that will increase your problemsolving skills because you won't hit a wall as soon as you run into um whatever problem you're trying to solve right you'll be able to start debugging it and so i would say a good way to increase your problem solving skills is even when learning syntax for the first time or the concept for a first time like experiment uh you know don't just trust our codecademy green check mark that you've like done it correctly ask yourself probing questions change your code see what see what happens as stuff changes and then move on i think that's that's really important um differentiate global variables and nested variables um yeah a couple of a couple of good questions in class there in the chat um so there's a question about the difference between global variables and uh the question said nested variables um local variables we showed this a little bit where let me go back to um let me even see if i can get back to my dog i wanna i want my dog class back uh we showed this a little bit where if you are not using um if you're not using the instance variable which can it's kind of global it's not really a global variable but it's global within the class um dog's still here come on dog here we go um if i have right if i take away this self dot this now becomes a local variable and so when i try to call happy birthday which is b let me do jamie's dog stops half birthday um if i try to do this i'm going to get an error message let me in fact get rid of these print segments just to clean it up this is a local variable age reference before its assignment um you know so because i'm not using self dot this is now local which doesn't exist i could create that local variable i could have age equals five this would now run but if i print out um prince jaime's dog dot age before and after happy birthday you'll see it didn't change right the thing that i changed wasn't the global again it's not really global but it's global within the within the class the instance variable i didn't change the instance variable age i changed the local variable age and then that local variable gets forgotten as soon as the method ends and so you'll see that my instance variable never actually changed if i change this to self dot it now will change and i just happened to create this local age variable that i never do anything with it's totally useless can you reexplain what the increase setting method is doing on the list yeah so i i went through that really quickly basically i just wanted to show that um i don't have a good example that makes sense off the top of my head but like dog west right um i don't know what this what this variable would be i don't have it i don't have a good example that like makes sense i just want to demonstrate that um that you can loop through um you know if one of your instance variables is a list you can look through the list so i can do um for item in self.dog list i can print item and so now when i call happy birthday i should see in addition to 11 and 12 being printed off i should see every item in this list being printed off so um yeah sami i think you asked that question sammy i went through that very quickly and it's not a great example because it doesn't really make sense in the context of my program but it's just an example showing hey your instance variables can be lists and then in your methods you can do anything that you know how to do with lists like loop through them increase their value by one you know all that sort of stuff cool okay jamie i think we should call it here sounds good yeah this is really fun okay cool well thank you for watching everyone and um yeah hopefully we will um we will see you again soon on some more live streams bye bye everyone