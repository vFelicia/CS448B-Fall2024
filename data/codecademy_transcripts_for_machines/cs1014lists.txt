but let me know in the chat uh we had a few difficulties um getting started so let's just make sure that everything is okay we will hopefully be able to cut some of this out later when we post this um but let me know in the chat great okay perfect um well welcome to our fourth live stream in the cs 101 series um i'm sophie i'm a curriculum developer at codecademy and i'm really excited to be here um at my colleague alex who's also a curriculum developer is going to hopefully be joining me at some point very soon but he's having some internet issues so um so he'll join when he can get back online um oh alex is here via his phone um anyway so we're gonna jump right in i am going to share my screen and tell you guys a little bit about what we're going through in this live stream and then we will get started so let's see great um okay so hopefully everybody can see uh this window um so right now we're going through uh this cs 101 live stream series the link should be in youtube um and on the events page so that's at codecademy.com events um you will be able to see this event right here where um we're doing lists today and then you can also click into this module by clicking here on cs 101 live stream series and so so far we've we've gone through variables and basic syntax functions control flow and now list is going to be the fourth module and so we're going to start as we have with all of these modules with a more conceptual lesson so um these are all broken up into kind of conceptual then how to implement something in python and then last but not least we have some code challenges which hopefully i'm planning to leave some time at the end so that we can get into the code challenges because i think one of the the best things about this live stream series is that you can kind of see how somebody goes about coding and um and dealing with errors that might come up and both alex and i went through this uh code challenge uh article before this before this live stream and we were both saying how you know they're a little bit challenging we both made the same kind of mistake and hit up against a similar error and then found different ways of solving it so i think that's a good thing to be able to see somebody do in live in real time so hopefully we'll have time to get to that but for now i'm going to click into lists oh uh also i don't know if somebody has already said this in the chat but uh we are streaming live on a few different platforms we're on youtube facebook and twitch i think those are the main three um i am looking at the chat in youtube um so if you have specific questions you can uh let me know in the youtube chat if you're watching this on facebook or twitch come over to youtube if you want to ask something during the um during the livestream and yeah and also i see people are posting about where where they're calling in from see someone from finland uh feel free to uh just post in the chat and say hello and tell us where where you're from i know we get a lot of different people from a lot of different places and it's kind of cool to see where where everybody is is listening in from so cool um okay so we're gonna jump right in then to an introduction to lists and lists exist and as far as i know every programming language that i have used uh and and so a list so far we've talked about variables and we've talked about storing information in some sort of object that has a name but now we're going to talk about storing multiple objects within the same name and so lists are really great for that they also have a way of ordering the objects that you're storing so that you can then pick out whichever objects you want if you if you need them for any future uh like program that you're writing so um so we're gonna go through again this is we're starting with the conceptual piece so we're not actually gonna be doing any coding quite yet so um here's our our little like and we can even think of this as an empty list so um it this is kind of a space that we can make to put objects into it and save them in that one in that one space and so here we've got a few this is like a comic strip so we have um cody plants a seed so he's going to plant a seed water the seed wait for it to grow and then a sprout grows and notice that this has these pictures have an inherent order to them so we're going to try to put them in that order within our list so first he's going to plant the seed um hopefully i can get this yep okay so first he's going to plant the seed then he's going to water the seed and then he is going to wait for the seed to grow and then it is going to grow and so now we've got in this box which represents our list object we have four panels and they're in an order that makes sense to tell a story and so we've saved four different things in one place um cool so now um so now like i said one of the benefits of this is that it allows you to then pull out any value from your list that you want um and so many coding languages including python have um indep indices that start at zero um which there are reasons for that and hopefully we'll have a chance to talk a little bit about why that is but um but it does sometimes make the counting process a little bit more challenging so um so we're counting from zero and so the first item has an index of zero the second item has an index of one the third has an index of two and the fourth has an index of three so if we want to get the second item from the list all we need to do is kind of grab the item that's at index one which is the second item so i'm gonna manually do that now um and i'm gonna grab this image which is the second item at index one and i'm gonna i guess just click it and now it's highlighted we've we've been able to identify which image we want by using these kind of builtin numbers and we'll see how that's useful as well once we get into python okay um adding items to a list so just like before here's our list it has some items already in it and the point of this is really just to show you that you can always add items to your list um so if you create something um you can then change it you can add or even remove things from it so so i'll go ahead i think this one it's saying like you can end this story in any way so we have cody starts his hike he goes on his hike um he's walking past a tree and then here are three different endings he can meet a friend he could just walk keep on walking to the end or he could go sit on the tree so um i'm gonna have him meet a friend because that seems like a nice thing to do um and my window is a little short so that's why that's happening but yeah so here we go um now you can see that we've added something to our list we could even add more things to the list i think well we could in in python i guess not here but we could take that out and we could put something else in here um and so now he's sitting on the tree instead cool um okay the next one like i said you can remove items from a list so here we've got um another list a different sequence of events and here we've got him shooting a basketball and we don't want the basketball to jump back out so we're gonna move this fourth remove this fourth item and now we have a shorter list and last one um so here is the first time that now we're seeing some code and actually this is javascript i believe yeah uh main.js but uh in fact this same syntax is gonna work in python so so we can do basically the same the same thing in multiple languages which is at least nice to see um okay so we've got let's read the instructions and this is a nice way to kind of segue into the coding that we're gonna do so um cool so we have a list called comic strip that we're gonna create it contains the following strings cody sees the trail cody starts the hike cody is halfway and cody reaches the finish i guess i already did this one um okay so we've now put all of these things into a list we've typed them out uh so they're strings so remember we have to enclose them in quotes and then we're going to separate them with commas we're going to use square brackets to denote the beginning and the end of the list and then the next piece so the next piece is going to be to select the fourth item so here um you can see i've selected the the item at index three which is gonna be the fourth item because remember it starts at zero so it's zero one two three so the fourth item is at index three um and i think if i change this to zero you'll see so this one gets highlighted now so this is index zero we can do index one um and then two is going to give us this one down here and then 3 you saw is the last one cool um in javascript don't you need to have the ver or const keyword so um i will preface this by saying i'm not um a job or i am not trained in javascript but yes i think that this is kind of a short uh a shorthand that you can use um but probably not best practice uh but yeah cool yes thank you kenny um yeah so kenny says it's best practice to do so but the idea here is not to get lost in the javascript syntax it's more about thinking about the the programming list is a programming subject cool awesome um okay so now that we have seen what a list can do and we're gonna jump into some syntax and actually start trying to work with some lists in python so let me uh go back to the live stream series and we're gonna go into that first lesson um cool great so now we're in python world but you'll see that it looks very similar to what we just saw um okay so we've got in this exercise we're creating a um a list of heights so we've got four heights in this list oh my gosh hello sophie oh my goodness hi well welcome thank you well done i'm sorry for the technical difficulties uh for all of you who are in chat i think i was posting in chat uh sophie and i were prepping for this and like 30 seconds before we were about to hit live my internet went out for 15 minutes so i'm back sophie amazing job leading this youtube so glad you're here to come help me answer questions about javascript and things that are not in my wheelhouse um cool all right yeah we're just getting into the first lists lesson um kenny says got the dynamic duo back yeah cool sophie so before we get into the python stuff there are a couple of things that i wanted to talk about or ask about one was um throughout this entire series really what what i've been focusing on is i love these um these language agnostic lessons that we do at the start where you're still programming right you're still like dragging and dropping but it's different syntax than python or javascript where it's it's really image based and kind of mousebased and movement based so in a lot of these um applets there are like subtle things that are going on that you might not even realize and as i was watching you i realized like in the very first one when you could drag and drop elements anywhere in the list one of the and same thing with removing elements from the list actually when you remove an element from the list or when you add something to the list like at the start of the list all of the other elements also have to change right so if i remove something from the list all the other ones scoot down an index or if i add something to a list um you know if i add something to a list all the other ones scoot over and so again like small little subtle things like that are good to keep track of where all different programming languages are all gonna handle this slightly differently um but yeah that that was something that stuck out to me in this lesson of like um yeah i think that might be the one where you can only add to the end but if you go to the very first one um um back one more even actually oh yeah yeah so this one you can add in any order and you kind of add in any order right so if i if you now add there not only are you adding that to index one you're also moving the thing that was at index one two index two and so again that's just like kind of a tiny example and python will actually handle that for you but um small little details like that are i think are kind of like these essential programming questions that we wanna um remind ourselves of and then the other thing that i wanted to say before we get into real python is that lists are a data structure and i think data structures often have really like in sound intimidating so sophie could you like define what a data structure is or like why is a list a data structure sure yeah so that's a really good point and um i think actually because i'm coming from a programming or sorry from a data science background and statistics background i think a lot about like storing data um and so you can think but data is anything right like data can be a number a picture it could be anything and so when you have information that you want to store somewhere it kind of matters like the way that you store it so um like we were talking about with lists there they have some inherent order right that indexing that we saw um here like it means that this you know this item comes before this item comes before this item and you could imagine and they're just kind of in a string so there's only like things can only come before or after something else um but you could imagine you know a different type of structure where you just are throwing things into a bucket basically and like they are all kind of they're in the same place but they're they don't have any order to them um you could also imagine something more complicated than this like a grid kind of uh where you have things that can be above or below other um other pieces of information um and and so the way that you store that information and and you can kind of conceptualize storing like objects in your house like the way that the way that you store anything in the organization that you apply to it um has an impact on how you can then use that information later and so uh and so it's important to then think about especially now that we're going through lists like what are the what are the ways that like this this structure is organizing our information yeah i think so data structures might be a topic that you kind of see towards the end of your first year as a computer science student or it's kind of it's typically like us your second course it's usually titled data structures i think that oftentimes that's intimidating but thinking about it as like sophie said it could be this list of things one after another or it could be a grid right stepping back from coding and just being able to like conceptualize okay i have all this data and let me store it in a particular way and that's what a data structure is like stepping back from the code and understanding it at that high level and really it's not that intimidating it's just like different ways to store objects right um like you're saying so if you do that around the house all the time um again that's like um to me that's what computer science is is understanding these like big picture ideas outside of the code and then learning how to translate it into code yeah totally that those are some really great pointers and that's why i missed having you here yeah i appreciate the the redirect so you don't move too fast because those are some really important i think like the thing that's really nice about this is like actually this is kind of how i visualize a list in my head um and and it's kind of how you create it in python 2 but um but having a visual picture of your of the data that you're storing is a really helpful thing um cool all right yeah so let's go and see this in python then go back i should be opening these in separate windows but yeah people in the chat as you're navigating to there they're talking about how index shifting happens um dimitri is saying when you use the pop function um that that happens and so yeah that's that's one of the things as you're adding things to lists and removing things from lists you got to think about like how are my indexes changing here yeah exactly um awesome okay so i think this uh this exercise is just um about defining a list and making sure that you use the right syntax so um the way so up till now right we've been mostly talking about the conceptual piece and now we're talking about how we can actually create a list and then work with it in python and so python has some rules which we're calling syntax which are just related to the way in which we define um the the data structures or objects or whatever we want to call them um in in python so that the computer knows what we want to create um and can can understand it basically so um this list is being created with square brackets we're separating the elements with commas um this is asking us to add somebody else's height here so we could add 65 here this is an example of something that python won't be able to parse so first let's just do this to just prove to ourselves that that we have heights here um and so yeah so if we run this um we end up we we just print it out python says okay we've got heights um and this is a list and now if we uncomment this i think we don't even have to print it and we're going to get an error and yeah so it says invalid syntax and and basically what that means is um we did something wrong here where the computer doesn't understand what we want like it doesn't understand if these are separate things that we want to store or if they're all one thing with spaces in between it doesn't know you know if we put the put it in quotes or something like this then we could actually it would be fine because this could all be one object or one oops one string yeah one string yeah um but if we want them to be separate values in our list then we need to separate them with commas so if we want them to stay as numbers and we want them to be separated we've got to do that yeah and one thing to note here is that this is just uh the same exact thing as setting a variable equal to any data type that we've seen before so so far we've seen integers strings all that sort of stuff and so this is the exact same you do this in the exact same way you just use the equal sign to set the value of something and then you can also reset it right so we could take heights and we could reset it to just a plain integer right it doesn't have to always stay a list and that's actually something that's a little bit um i guess not unique to python but that's a aspect of python where something like java if you declared a variable as an integer you wouldn't then be able to switch it to a list or a string or whatever but in python it doesn't matter what what your variables is a variable can be anything and it can switch back and forth yeah that's a great point um yeah and there's different syntax and different languages like um i know an r for example like people this would work but people tend to use this like arrow um because there is some discussion around like well in function if you're like assigning a parameter and a function like this equal sign means something different and so like only having symbols mean one thing is like a discussion but um but yeah that's something that python is pretty i don't know how to describe it other than like lazy you're not strict about where uh the same symbol can mean multiple things we've already seen that a couple of times where plus means a bunch of different things depending if you're adding two strings together or two integers together or things like that right awesome okay uh let's take a look i wanna so like i said i i would like to kind of go through this not super quickly but um a little bit more quickly because i want to make sure we have time for some of the coding challenges so uh let's just take a look at what's in here um okay so i think um really quickly i will show you and let me just this is my uh author author hacks yeah you can't do that um so i think uh i'm gonna skip well briefly just mention one of the nice things about lists is that you can have multiple data types in a list and so um if you're for example interested in data science and you are learning about pandas you might have seen that one of the data structures in pandas is a panda series and um and i believe it's the case that within a panda series everything in in there so it looks a lot like a list but everything has to be all of the same type um and so lists are nice because you can store multiple different kinds of data in there so you could um it store both a string and a number um in a list yeah and so again this is something that in java for example java can if you're creating a list you have to declare it as a list of integers or a list of strings or something like that and that's fine um you know it just works slightly differently i think python's ability to store multiple data types in a single list is one of the reasons why again python doesn't it's a little bit more casual right it doesn't care about um it's not as strict as as java and so i think this is one of the reasons why python is a good beginners language because um you know the thing that we're doing doesn't really have to do with the objects in the list we're more interested in like how to work with lists and so just kind of like lowering that barrier of entry of like yeah it doesn't matter what's in this list we're just interested in um you know using uh playing around the list itself yeah um and then yeah so kind of like what i was saying before about having sort of like a 2d twodimensional sort of setup for your data um you can't exactly do that with lists but one of the kind of one of the ways that people kind of work around that at least visually and if i was in a code editor i think it would like do this for me uh without having oh look it's doing good okay um sometimes people kind of create so like we said right you can put anything as the individual items in the list and so are individual values and so a list can go inside of a list and so in this case the items in the list are lists themselves and so uh we can kind of recreate like a almost like a a data set that you might see in pandas or something that has this twodimensional structure where we've got all the names as the first value and all the heights i think as the second value and so uh so yes this is another thing that we could create here and i will print this out just for whoops yeah you can also go as deep as you want right so you can have lists of lists of lists or and so on yeah um nice okay so then it prints it doesn't print it out with the 2d kind of look but you can you can use the other thing i will say is um i when i'm coding on my own i like to have kind of like spacing and returns between things so i can see um what's going on and sometimes i would even like press enter here you know so i can see okay like that's the beginning of my list and then i've got all these things in the middle and then that's the end and so you can see all the pieces um and in python i think that's still fine right yeah it can still interpret that so however many spaces are uh whatever you want to add in there to make it easier for you to read what you're doing is also totally totally fine that's a good point though that often times python is particular about spacing but in this case it's not um we're oftentimes you know you need to have exactly two in you know two spaces or a tab in order to be inside your function or your if statement or something but in this case uh it doesn't it doesn't care about it cool um yeah i saw a good question in the chat too saying is there a reason why you would have a list in a list instead of a dictionary in python do you want to maybe address that briefly a dictionary in python is just kind of a different data structure right where a dictionary is the idea of having a key and a value um so you can think of you know a real dictionary of words where the key would be the word itself and then the value would be the definition of the word and so usually you want to use a dictionary when you have something that can benefit from that like a relationship right a key value relationship a 2d or a list of lists or a 2d array um yeah i could see situations where um you could probably do similar uh similar things to what you're doing with dictionaries but really i tend to use dictionaries when there is that like onetoone relationship of key to value and that might not be the case with whatever you're doing with the 2d list yeah um okay i i skipped over zip um and i saw in the chat that there was a question what is a zip um i'll go over super briefly um which is to say basically you can imagine it like a zipper like if you have two lists and you want to zipper them together so you know how a zipper it has like all the prongs fit in like every other right that's kind of what's happening when you zip two lists together as it takes the first element first element second second third third fourth fourth and so if we like here names and dogs equals zip um names dog names and then statement might be kind of ugly yes yeah um if we do this oops what did i do um dog names uh let's see name dog names it's not defined dogs names dogs names nice yeah so now we see that it's kind of it's matched the first value in this first list jenny with the dog named alfont alphonse uh i was just googling what doc dr doggy dds was what reference we were making there i have no clue um okay so that's all we're gonna do for that um okay um empty lists super simple your list doesn't have to contain anything and so if we just put uh square brackets an opening bracket and a closing bracket bracket with nothing inside then we're going to be creating a an empty list and so then we've kind of created a space for some some information that we're going to put into this list and this happens a lot if you're kind of like storing a bunch of data that you're collecting over time so you want to start with nothing and then you want to add to that uh over a series of steps then you might want to start with an empty list nice um and just like that we can go from an empty list to a pending to a list so i think we saw before um well actually no i guess not because we haven't gone over lists but anyway so uh so if we want to add a value to a list then we can use the dot append method is it called a method um yeah uh yeah it's a list method yes i i have told alex before that in learning python the thing that confused me the most coming from r was the difference between methods and functions um which i i think there's some exercises maybe in the other one that's in here about um like sorting and using like the sort built in or um sorted as a function which uh it is kind of an interesting juxtaposition and clarifies some of the reasons some of the things that confuse me so hopefully we'll get to that quickly um so if you want to add some value to a list you can use dot append um i don't know what it's going to ask us to but um we're going let's print and then add two lips it looks like i append two lips to this list so uh i'm going to append tulips and then print it again um and now we see we started with just daisies and periwinkle and now we've got daisy's periwinkle and tulips so if you try so i think uh uh no it's not it's not a pen i was gonna say try doing append like one comma tulips i think you might be able this might be incorrect um see and then see what that comes there yeah okay it's not append there's a so i want to bring this back to what we were doing that language agnostic version of being able to draw i can drop things anywhere um append what that's doing is uh i think it was either the like third or fourth little uh slide from that drag and drop where it's always adding to the end of the list but there's a python function that can let you add anywhere to the list and automatically scoots everything else over one um it might be cool it might be i thought it was somewhere in here maybe it's not um cool yeah um but yeah so this will always and it append will add to the end of the list um but yes there are definitely ways to add things somewhere else in the list um cool so next one um this is basically just another way to do the same thing so um the same way that we were talking i think in the first live stream that we did about how you can you know use the plus sign with different data types and it has different behavior with lists it has this behavior that you can basically append a bunch of values onto a list another list all at once by kind of adding them together so i'm not really following uh this instruction because i'm being a little lazy but if i do um if i basically just add these two lists here and print the output you'll see that it's it's just added them together so the first one ends at lily and then we've added cake cookie and bread to this list yeah one thing to note here is that in that broken pieces if you try to add just the number four that's gonna break you have to add two lists together right yeah so that's a really good point um so this operator this plus sign only takes it can only figure out what to do with the things that you are putting on either side of it if they're the same type of thing so um here four is just it's like an int or or a float and then this is a list and so it can't add two different kinds of things together but as long as you put this four inside a list then um i think that should work oh i had so many plans of getting 20 minutes on this i know i was actually thinking do you want to show accessing an item and then we can jump to code challenges yeah uh cool range is fine yes i highly recommend that you go through some of these there are some other cool things on here if you want to like automatically create a list of all the numbers from zero to nine or something like that or between two numbers with some uh some specific jump between them basically we realize we're going very quickly through these lessons but the lessons will always be there for you to take and sophie and i think what's really valuable is to kind of see our thought process as we are solving code challenges um so we're going gonna do one quick thing that we're gonna need for these code challenges and then jump to the code challenges yes okay so um we are going to oh i think um also counting so selecting elements of a list oh and we're gonna go quickly uh okay so one thing you can do always is figure out the length of a list and so here the function len is going to give us the length of a list and that's just the number of items in a list so there's five items here so the length of this list is going to be five um selecting items from a list um so remember before when we had that picture of the items in the list with their indices and it started at zero and went up to um some number one less than the number of items in the list so uh if we create this list calls with ali bobcam doug and ellie um then ali is going to have an index of zero bob is going to have an index of one cam will have an index of two and so on and so we can then access any of those values by using that index inside square brackets after the name of the list so here if i say print who's your favorite character here uh sophie michael dwight jim pam ryan andy robert certainly not robert i mean might be michael uh yeah so if i use that the index of zero that's going to pull michael because he's the first value if i wanted to get jim i would use an index of two because he's zero one two um one of the things before moving on there sophie i think one of the things that's important is to start like combining the things that we know together that we know together and so instead of hard coding into there let's put in length of employees and think about what length of imp putting length of employees would mean um so actually this is a an interesting yeah because this is often a an error that you'll you'll see um index out of range so when you get an error like this i think that there are a couple of things that you should do to debug this and often the best thing to do is just like print out the values of your variables um to see what's happening so before we run that line of code can we print length of employees and just see what that value is we you know we probably could do that by hand by just counting those looks like seven people so i expect this to be seven right cool and now if we bring that line of code that was erroring back okay so now we're asking for employees at index seven and that's giving us an error and so why is why is that an error so remember that it starts at zero for indices so um it's actually for seven values the index is only going to go up to six so it's going to be zero one two three four five six nice yeah so when we try to put in length of employees which is equal to seven it errors so we could do something like length of employees minus one to get the very last one so hopefully give us robert yep and then one little trick which we probably cover somewhere in this lesson is that you can index from the end of the list using negative numbers so if you ask for just length of yeah sorry it's in that lesson uh right so if you ask it for just uh in this case list minus one it's going to give you e because that's in the narrative over there it's gonna give you e this one it's gonna give you serial yeah and you can do the second to last with minus two do you get an index out of bounds error if you go too far if i do like negative 10 and that goes obviously way past eggs is that also going to be yeah also an index out of bounds range so we went too far starting from the end yeah one of the interesting things to notice is that when you're starting from the other end with negative numbers you actually do start at one so there's no like negative zero um and so if you're starting from the opposite end you're starting at negative one um two from the end would be negative two um great question the chat from silicon valley he asked can we create an array list with multiple object types or not so it sounds like silicon valley is uh maybe knows a little bit of python a little bit of java where in java you can't have items of you can't have multiple data types in uh in a list but if you use an arraylist you can kind of finagle it to work that way in python just by default you can throw any data type that you want in a python list great cool um okay i think i'm going to just really quickly jump i think count is kind of cool to show this will get 10 minutes that's fine um so you can count the number of times if you have the same thing in a list multiple times so here for example the name cassie is here multiple times i can use votes dot count cassie to count the number of times that cassie shows up in this list and i'll again print it so we can all see it um and so here yeah cassie came up five times in the list and we could change this to anything we could count the number of times jake shows up in the list jake shows up nine times um so this is kind of a nice preview for what we're doing next week where this this count method is doing some magic for us you know we don't exactly know how it's working but you can think of count is probably going through every item in the list and checking to see if that item is equal to jake in this case and so there's some kind of like looping function there right where we don't want to just look at the first element we don't want to just look at the second element we want to look at each element individually and we could probably use a loop to do that so this is kind of a nice preview of loops which is what we're doing next week yes great point um and the last thing i will just show really quickly because i mentioned it before is that um so one thing to keep in mind and this is a kind of like i don't know how this extends to other languages but it's something that often trips me up is that um so sometimes if you use methods it changes the object right away so for example if i do if i call dot sort on this list of names it's going to sort the names in place so i don't have to do something like sorted names equals names.sort and resave it um but in fact actually yeah uh it looks like we're doing that in the workspace with sorted cities here uh where it saves it to a new array yeah you don't right so you could save it to a new name but at the same time calling.sort is actually already sorting cities so um when i run this line of code if i print sorted cities and i print cities um i don't really know i'm gonna delete that yeah so so sorted cities is actually not storing the new list it's storing the result of that method call which is nothing the the method and then returns nothing oh see even this is good we're learning um so yeah so if i call if i had just called cities.sort and then i said sordid cities equal cities then they would be the same right yeah um cool that's good to know so if you just save this right away it's it's just saving the result of the method um but then in this function if you use sorted and you use a function instead of a method then um then it's not sorting them in place so you would need to resave that value and now if i said like sorted the references in this lesson are so good goals sorted games something like this and then i said print sorted games now sorted games is going to contain the um the sorted list yeah so this is kind of like a subtle distinction of this happens a lot in different programming languages where it's it's a question of does your method do something in place to the to the object that you give it or does it uh not change that original object and instead create a new thing that you can then you know assign a new variable to yes okay so now well we're less than 10 minutes but that's okay all right i think we should do the last one i think the last one's the best you want to do the last one i think that'll be the most i think it's the hardest and so probably the best for us to kind of like walk through okay cool i'm i'm into it um okay so this has got a lot of different parts to it um i'm gonna read through and then talk through how you could kind of like attack each of these parts one at a time so it says create a function called middle element that has one parameter named lst list if there are an odd number of elements in list the function should return the middle element if there are an even number of elements the function should the function should return the average of the two middle elements so actually this is kind of like creating a function for median uh so if you you know anything about the median and uh and know how to calculate it then this is a function that will do it for you which is kind of cool so um it says write your function here uh but i think before we actually start writing a function what we want to do is start thinking about the parts that we're going to need in order to um in order to make this happen so i'm going to kind of write in pseudo code here so the first thing that we're going to want to do is there's two different behaviors that we want this to take if um if there's an even number of elements or an odd number of elements and so um the first thing we probably need to do is figure out how many elements are there in lst um and then maybe we'll save that that number as something like num elements then once we figure out how many elements there are we need to figure out if num elements is even or odd then the next thing we're gonna have to do is we're gonna have some behavior if it's even or behavior if it's odd so i think odd is the easier one so if it's odd we're gonna just take the middle element so if it's odd then we're going to uh get the index of the middle element then we're gonna use that index to remove to return the middle element yeah and as sophie's doing this one thing that i that is was is helpful for me to tackle a problem like this is that you don't necessarily have to code it in this order so when i did this problem as we were prepping for this what i did first was i said okay let me assume that my um that my the length of my list is odd because really you know uh finding out whether the length is even or odd is more of a like modulo uh conditional task and really the thing that i want to practice is doing stuff with my my list of accessing elements um trying to find the middle element of the list so it's like when i was doing this i kind of skipped these if statements first and just said okay let's assume that i have an odd number list let me see if i can get the middle element let me let me see if i can get the value of that middle element and then return that value and then once i prove to myself i could do that i said okay let me try the even case and then i wrote my my conditional nice yeah um i think we should should go through that so what i'm gonna do is i'm actually going to start with um with an example list because i always find it a little bit easier to kind of work with some real set of numbers and to start i'm going to make this be odd so we've got five values in here and so here what our function is supposed to do is return the middle number which is negative 10. uh i guess well it's only a median i guess if these are in order so so that would be another uh another i'd have to use that sort you guys like add sort and then yeah okay so first thing i'm going to do is i'm going to just print the number of elements in list and make sure that this function len works on my list so um so cool so if i print the length of list i get five um okay so now what i'm gonna do is i'm gonna say okay i want blend lists to be saved as something called num elements and that that number num elements is going to be five in fact i could have done yes and one thing that sophie's doing here is that uh you know as you get more and more comfortable with these functions you probably don't need to confirm for yourself that length is working like you expect it to but if this is your first time you know working with lists in python then it's important to do stuff like this so just like making sure you know what this variable is because if it's actually something different or different than what you expect then everything that you do after that is kind of gonna fall apart and it's gonna be really hard to debug because you know you don't know where you went wrong and it turns out you went wrong at the very top but you know it could be anywhere in all the other code that you wrote so like being this thorough especially when you're just starting out i think is really helpful nice that's a really really good point um yeah i this is what i do a lot like sometimes i try to write functions all at once and then i get errors and then this is what i end up doing as i like do all the parts separately and make sure that they look like what i expect yeah um okay so then what i'm gonna do i'm gonna skip this for right now um i'm gonna get the index of the middle element so this is this is odd so i'm i'm gonna just want the middle element which in this case is two right think about what that is yeah so here we've got zero one two um and len was five um so if we kind of think about like how we get from five to two um i think the the thing that comes to my mind first is it's always going to be like half of one minus the length um i i think it's going to be half of the length and then take off the remainder right if you divide five by two you're gonna get two point five and then we can cut off the remainder if you have seven divided by two you're gonna get uh what is that 3.5 and then we can cut off the 0.5 to get three sure is that what happens so if i coerce to an int does it go does it round down um yeah exactly okay so um so actually let's do that so let's say um instead if i just say print um int of lst or sorry of num elements divided by two um then i'm gonna get two which is what i wanted um and so inch right i should i should have done this in two steps but um so num elements divided by two was 2.5 and then um if i took the int of that um we're going to get 2. so what i'm going to do is i'm going to save that as something called index and then i'm going to just make sure that if i print that index so if i print um num or if i print lst of width of index um so the the value at that index in lst um i can confirm that that's printing out negative 10. so that's good and then um i know we're running out of time but i'm just gonna go ahead and finish this up quickly so if it's even um now i'm gonna like kind of add something back so let's say we add back i'm going to make these easier numbers we add back a 1 and a 3 in the middle then if it's even we're going to want to get the indices of the two middle elements so we're gonna want um the indices of the one and the three and now we have six items if we divide six by two we get three and so three is going to be the index of the larger of the items which happens to be value three which is slightly confusing but yeah you value three yeah sorry uh i can make it five um and so uh so yeah so we're gonna need two indexes i'm gonna call them index one and i'm gonna make that the num elements over two um and let's print index one really fast oops so yep so it gives me three um which is the index that i wanted zero one two three is this the upper of the middle two items and then um notice that it has this point zero after it which means that it's actually storing this as a float instead of an integer um and so i know because i did this already and i made this mistake that i'm gonna need to put int around that so that um it stores it as an integer otherwise we're not gonna be able to use it to grab something from this list yeah good call that again that's like another really kind of subtle thing that you might not even realize if you do this all at once you'll just end up getting this error that's like list indexing doesn't work with a with a float or a double um and so you need to realize like oh hey these numbers that i'm usu using because i divided it by two that turned it into a double and now i can't use that to access the items in my list yes okay so now i'm going to uh use those two oh so i i created index two now which is index one minus one which is a little cheating but right so we had this index which was three and now we want the index of the value right before it so that's one less um and now we can use those to get an average um and so we but we actually want the average of these numbers so um so we're gonna have to pull them out of list um so we've got index one um so if we print that right remember that that's gonna be the value at index one which is equal to three so the value there is five good um and i'm going to take the average of that and the value at index 2 and remember average is just the sum divided by the number of elements which is 2 and i'm actually just gonna print that really fast to make sure that it's what i expect it should be the average of one and five which is good can we change our list there just to confirm that a couple of things that we can do to confirm here can we change those numbers in the list to be i i know we're out of time it's fine we uh we took five minutes to start so we can we can go a little bit late can we change those numbers in the original list to be something different just to confirm that we're like actually grabbing those two numbers so maybe maybe some to be an odd number so yeah zero and five or yeah so we should see 2.5 here oh um line 18 uh extra you're you're missing a parenthesis uh oh and then one other thing can we check to make sure that this works for a even number uh list of even even length but different size so we can can we add two more or can we get subtract two more just to see if that works because we want to make sure it works on things other than lists of uh you know that exact size six so now it's taking the average of four and five which is 4.5 and then finally before we move on to the next one i know uh we won't actually implement this but the the instruction doesn't really tell you what to do if you have a list of like size zero or size two right we might be interested in like does this work for a list of size two and it might actually break i'm not sure but like that's stuff that we could you want to check these edge cases of like what if your list doesn't have anything what if it only has one thing like that sort of stuff yeah i think we can do that another time but yeah but i agree um okay so now what i'm gonna do is i'm gonna go through so the last piece is to kind of build this function and i guess figure out if it's even or odd um i'm going to kind of do this a simple like i'm going to do it for us which is to say i'm going to check if um the modulo of num elements is equal to zero um of the the second module so module two modulo two uh and actually i'll print that out here so what modulo does is it gives you the remainder and so if i do num elements modulo 2 um here it's zero because there are eight elements um but if there's nine elements then this is gonna be modulo one yeah it's a nice easy way to get even odd is to do your number mod two if it's zero that means it's even if it's one that means it's odd so if um num elements modulo two is not equal or is equal to one okay then i'm gonna do these things so now i'm gonna build this function um so we'll say def uh middle element we're gonna have to tab these things now we have if this the comments might screw up the tapping too we might have to get rid of the comments eventually but i don't know if that's the case i think the comments would screw it up but um and we want to return this and for those of you watching when i say the comments would screw it up the comments can could stay if we indented them but i think the indentation level of the comment would have to also be indented to the proper amount um and then else because it can really only be even or odd then we've got this stuff index 1 index 2. yep a couple of a couple of good notes in chat don't forget the parameter to the function we don't want to do it always on lst or we don't want to do it on that hardcoded list of 52054 we want to do it on some input function and then on line 7 you have an extra closing parenthesis on line seven yes okay yeah cool and then we'll do this let's see um i think it's a parenthesis issue on line 11. oh yeah yep cool and so that is what is that that's the average of what's not right that's not right um oh it's because you have you're still you're on line three you're resetting list to be so right so it wasn't actually using that thing we passed into the parameter it was using something else so that's the average of negative 10 plus negative four and if we do this there we go nice cool okay nice work sophie thank you um okay with that i'm going to stop this shared screen um and i will also just encourage everybody to definitely try those coding challenges on your own they're a really good way to kind of test your skills and put a lot of different things together and and kind of get the experience of like coding a whole thing at once and seeing errors and debugging things yeah really i think uh coding challenges like that are really really valuable and you can find some of those all over our platform i know in the python 3 course we have lists of big coding challenges they have like 10 in each one of those little articles and usually people are struggling with those a lot and so i think seeing a stream like this hopefully is valuable to kind of see the process of sophie walking through all those different steps catching all the mistakes that exist in various places right we made probably five different bugs over the course of that solving which is totally fine that's you know that happens to everyone um so yeah that's kind of one of the goals of this of this stream is to not only teach the syntax of python but really get getting you to think programmatically um like sophie was just doing to kind of like step through the problems and debug as you go um so yeah i really encourage you to check out those coding challenges elsewhere on our platform um i think that going through coding challenges is like a better use of our time than going through the lesson in great detail um for those of you who are watching whether it's live or after the fact um there's a feedback form about these streams that you can fill out um it's on the on all of the event pages i can actually drop that in the chat um we would love your feedback you can also tell us what you think right now in chat if you're here right now but uh yeah we would love feedback on this kind of stuff on what works well what doesn't work well what you're able to follow all that sort of stuff um so yeah if you go into one of the event pages on that event page you should um sorry i lost my train of thought you should find the feedback i'll link to the feedback form awesome and we'll be here next week as well yep well different people but we're here every week and there's uh i think four more so yeah i think we're eight total so we're halfway there so all right thanks sophie thank you guys all right talk to y'all good rest of your day everyone