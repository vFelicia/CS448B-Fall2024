cool um so hey everybody my name is carolyn i'm a curriculum developer here at codecademy um and this is alex fellow curriculum developer this is our live stream series uh on so we're doing live streams every tuesday and thursday tuesdays are open to everybody and thursday are pro sessions so throughout this live stream series we've been covering the visualize data with python path on our site um so that's what i have open right here um alex we can see that right uh i don't see yes i do see screen sharing yes okay awesome um so this is where uh we're at um throughout the past few weeks we've covered um kind of review to intro to python um python lists graphing and python which is based on matplotlib which is a popular python library we also did quite a bit of material on pandas which is basically how to create data frames in python there's a bunch of uh functionalities within pandas and today uh that's leading up to today uh where we're going to be doing more advanced graphing with a python library called seaborne and it's specifically a data visualization library it's built on top of matplotlib which is like a more basic library and it also works really well with pandas which is where the um where we can create data frames and uh we're going to be doing the intro lesson to seabourn today so i'm going to click through to that um well actually let's take a look at this module first um so before i go ahead with all that um please share your name and your location and the chat it would be great to uh get a sense of you know where all our learners are coming from yeah i know we're we're streaming on multiple places right now so we're streaming on like facebook and twitter um carolyn and i are mostly gonna be looking at the youtube chat so i know on facebook there should be a link to the youtube channel um i'll try to open up the facebook chat as we as we get started as well just so i can kind of look in there in case anyone who's commenting in there but we're mostly looking at um youtube i know twitch we're also streaming there which uh almost nobody knows about our channel is like just beginning to grow um so wherever you are we're happy to have you and then also if you are watching this in the um recorded version on youtube we put all these videos up on our youtube page after the fact um so if you're watching the recorded ones we are streaming these live every tuesday at 1 pm eastern time and uh if you're watching the recorded version you can always go back to the very start of this series this is like the 11th video um hopefully i think even if you've missed the other uh the other videos this will still make sense and you'll still be able to follow along but if you want to watch the whole thing uh you know there's now 11 hours of content for you guys to go through so um yeah happy to have all of you here i see everyone in the youtube chat we have uh someone from the philippines juan talia i think i recognize you we've seen you before so yeah nice to have familiar faces awesome um cricket florida is that a town or yeah it must be okay or is it a cricket effect [Laughter] um i'm down in atlanta so kind of close to you janice and then carolyn are you still in uh i'm in new york or queens yeah yeah i'm in queens nice yes um feel free to uh keep chatting in the chat we also have a q a feature can you all see that oh cool egypt cool the q a might be a part of the zoom only caroline i don't know if uh okay exists on youtube but so if you have questions you can just put that directly in the chat yeah and i'll keep i'll keep the chat open and watch but uh yeah let's let's go ahead and dive right into this this seabourn stuff um i'm really excited for seabourn this is kind of the very end of this module and seaborn really kind of combines a lot of the things that we've learned so far especially all of the pandas content that we went over in the past couple of weeks so we can um yeah so let's let's go and dive right in cool um and i just want to give a slightly more context about this module right here um we're just we're going to take it slow through the intro lesson today but um in this module we also have um a followup lesson on distributions quiz to kind of assess your understanding and these fun articles that um are really good uh kind of primers for um all of the the the customizations you can put into seabourn um like the the style of the visual visualization the colors there's tons of colors that come with seaborne and a project and there's also a more cumulative project where you take this off of our site and you do this on your own computer so that's something that we might touch on on thursday but let's dive into the intro lesson today um you have such an international crew i know it's funny it's funny we kind of do these in the middle of the day in the u.s time so we get a lot of folks who i don't know if you're like watching this over dinner or something but it's funny that we get a lot of europeans and yeah um i mean it's great to code at night i guess uh cool so um we have our little intro narrative here um this uh intro we're primarily gonna be working with bar charts bar charts with like statistical analysis built in so just to reiterate again it's seaborne is a python visualization library and it's based on matplotlib um but it improves it in a couple of different ways um alex did you want to touch on this more yeah so this is something that i it was kind of really highlighted to me as i've been doing this series where uh you know i ran some of the sessions on matplotlib where we're like trying to build a bar chart and you really kind of need to build everything by hand i would almost describe where it's like okay i want to build a bar chart and i need to give it specifically the list of the values in the xaxis and the uh specifically a list of the things in the yaxis that go with it um or you may remember like trying to do a sidebyside bar plot which is kind of what carolyn is showing on the right side of her workspace right now like that was a huge pain in the butt where it was like okay this bar needs to be like .8 units to the right of the other bar and it was all this like really crazy horrible math that we had to do and uh frankly i was like surprised that matplotlib was that kind of i don't even know how to describe it other than a handson where you really need to do a lot of it yourself and what's cool is that seabourn really simplifies a lot of this um and so i i was looking through this narrative this morning and we have things like th this quote that says seaborn natively understands pandas data frames making it easier to plot data from csvs that's definitely true um but i think that that's also true for matplotlib like in in our last session we showed hey we just we have this pandas data frame we have all of our data and now let's throw it into matplotlib and graph it and we could do that but really the power of seaborne is that it just makes it so much easier so both of them can use panda's data frames but like the syntax for seaborne just is so much more simplified that it becomes a ton a lot easier well um yeah and you can see this with this bar chart right here um it is pretty involved you know there's a lot of um different details right over here but this is all the code that's necessary to both load the data and to um to load the entire data and to also um graph the data yeah and again like another thing to point out that's different between seaborne and matplot web is even just like the error bars there if you look back to our previous um session about map lib or if you take those courses you'll see that we go through this big computation of like okay let me find the um you know the top of that blue bar let me get that value and then let me add on to the error that i computed and let me subtract the error that i computed and like you know we're just doing all of the addition subtraction all of the all this stuff by hand and you can see that uh if you look at the the code here we really don't need to do that at all it's in fact it's like a little bit um hard to even tell where the error bars are coming from by looking at just line 11 there um which i think has a downside and we'll touch on that in a little bit but it's like so much stuff goes into this seaborne graph with so little code um that it makes it easy but then maybe there's some downsides to that right um so the only instruction in this exercise is to import seaborn into your environment so this is the code to import um i'm going to paste it over here so um the graph is already there but um the this it's important to understand like this import statement even though it's one line seaborn does have dependencies on um importing pandas and importing matplotlib specifically the plt aspect of matplotlib so if we go to um the seabourn website um we can see um that you would have to install c board into your own computer if you were to code this in your own systems like python environment this is how you would install seaborne um i think it also if you go to this site it also tells you what kind of dependencies but feel free to visit that seabourn just look up seaborn python on google and it should lead you to the seabourn site where you can also look at the example galleries so let's go back to our lesson oh so we've imported seaborn um now we need to um we need to import data in order to graph it right so this exercise um we're simply going to be reading in a data frame using pandas so just to remind you what data frames are data frames are a data structure that puts your data into rows and columns so they're basically tables and you can read in a data frame from any csv files csv files being kind of uh they stand for comma separated values it's kind of the if you were to download a excel file or a google sheets file you would have the option to download that as a csv um probably like the most common type of data storage um or at least one of the most there's like you know there's other stuff as well but we work with csvs a lot yep so if you've been working with something on you know like google sheets or something and you want to see it graphed this is you just have to download the csv file um download download as csv and save it into your computer and from your python you just give it the either i mean this is right here in our own directory um but typically you'll have to add in the path to that file yeah i think that's a good point i think i think that's something that codecademy makes really easy for you and it's kind of a stumbling block for when people try to do this on their own computers so you'll see that if you look at the tabs on carolyn's text editor there you'll see that script.py and survey.csv both exist within the same folder and so if you were doing this on your own computer they don't have to be on the same in the same folder the the script your python script that you're running and the data that you're pulling from they could be in different places but if that's the case it takes a little bit more work to tell python where to look to find the data and so usually it's easiest to just like throw them in the same folder or at least for like a small project like this when you're just kind of playing around experimenting with graphs it's usually easy to just throw everything in the same folder and then you can directly reference the file name you can say i want survey.csv and python knows to look in the folder that's this you know in the same folder as script.py um if they're in different folders you'd have to do something slightly different that's definitely something that uh i know can trip up a lot of like brand new people where you know they download files and then they don't uh connecting their files together is kind of tricky yep um for sure um but we have the file here and um in the instructions here where we can read this line of code which is importing the file survey.csv into a data frame called we'll call the variable df and uh the pd here stands for pandas so we imported pandas and made a shorthand um called pd um so now that we've imported it into that variable we can inspect that data frame using head whoops okay so i have to add a print statement so very helpful error message cool um all right so we can see um the print statement uh makes the the csv file a lot more readable um we have four columns here we have patient id um we have gender we have an age range um and the response um well we don't know what exactly the context of this file is yet but we know it's a survey um and we've just printed the first five lines so that's what head does so if we wanted to print the whole thing we could just print df straight away yeah let's give it a shot see what happens yeah so then you can actually scroll through all the things um head is useful for if you just want to get like a little sample of the data yeah and again this is kind of uh dealing with this data frame is what we covered in our last two courses so if you go back and look at i think that's episode nine and ten it's going to be all about pandas but carolyn if you do like print df of a column name so in like square brackets if you put a column name um and the column name naming quotes and let's look at let's let's select one um let's do uh age range i think i have to put it in quotes like this cool yeah so now it just shows the age range column um this on the side right here is just indexing the the rows yeah and so this is the kind of stuff that we're now going to start to throw into seaborne to start graphing and again you could throw this into matplotlib to start graphing as well um but we'll see how it's um it's pretty easy to use these out of frames with c1 cool um let's head over to the next exercise okay um this way since we already know how to load the data um if we just remember back to that first lesson we only need a couple of lines of code um so this lesson will just be um this exercise i will be covering like how to get your first bar chart up um so uh let's take a look at the file results.csv here um we have two columns uh gender and mean satisfaction and we're going to be plotting that data in this exercise but looks like this narrative gives us a little bit more of a story behind the data so this is this result is based on uh asking a thousand patients at a hospital how satisfied they were with their experience um the satisfaction is on a scale from 1 to 10 and 10 being extremely satisfied cool and so looks like results is just averaging those satisfactions by gender yeah and i guess one thing to note is that we we've already done that averaging so maybe something that we can try here after we go through this exercise is like copying the the real data set from the last exercise like the data set with the thousands of rows right and seeing if we can get the same results because i think one thing that we talked about here is how um c seaborn is going to automatically compute the mean and so it's a little bit strange here that we're like automatically computing the mean on this data set that we've already computed the mean on um so i'd be interested to see what happens if we can bring in the like full data from the other page um eventually but let's let's first walk through this exercise i guess cool um and the narrative is emphasizing here that uh it takes a lot of lines of code in matplotlib to get this bar chart right here um so we won't be doing this and we'll be using seaborn to accomplish basically the same thing yeah and that's kind of what i was talking about at the very start of this stream where in particular i'd like to highlight i guess the third line of code in that block the plt dot bar that's where you need to like specifically give it x and y values where the x values we're doing this range of length of df that's just to produce numbers basically one through in this case one through three because there's three items in the data frame but you can imagine that being one through a thousand and then the second thing that we're passing to that is the column uh the mean satisfaction column so again that's basically uh an array it's not technically an array it's a data frame series or it's a series from pandas but you can think of it as a list or an array of three things and so it's like that's way like that range length of df thing is just like such a pain in the butt because all you want to do is pass the numbers zero through three in this case or a thousand but it's like it's so hard it's so complicated it's so unwieldy and we'll see that uh we don't have to do any of that stuff in seabourn um oh my gosh it's storming outside yeah i saw those wires are hitting my window i saw that there was like a tornado warning right now in new york so if carolyn you know just like disappears maybe that's because her power went out uh the rain took me what happened um okay so uh the narrative suggests that we should be using a cborn function called sns.bar plot to do the same thing um and so it takes in three arguments takes in data which is a pandas data frame well we know how to import a data frame x is a string that basically specifies which column is going to be in the x part of the graph and it basically defaults that to our x label as well y is same thing as x but you know the yaxis um and it's the one that um will be automatically aggregated yeah automatically converted to the mean yeah so um by default seaborn is going to aggregate oh my god the outside is just yeah um it's gonna plot the mean of each category so um let's let's do this um checkpoint right here okay so let's save the loaded in data frame from results.csv into a variable called df okay so i'm going to write df equals to um i think it's pd right i want to say i want to ask panda to do this has a because it has a function called read csv and i'm going to give an argument um the name of the file i want is results.csc so let me run that code awesome so now to preview the data frame i'm going to print it cool so that looks like what we have um in results.csv but just formatted into the dataframe um and we're going to be uncommenting this sns.bar plot um code right here oh well somebody just gave me a hurricane update in the chat come on david thank you for uh telling carolyn if she has to go to her basement or something um wow yeah it's uh moving right over new york city and up the hudson river so hopefully it travels up the river soon um live coding as there's a live uh tropical storm going on yeah um cool okay come back to this um i've uncommented the sns dot bar plot line from the workspace um and we're gonna be filling in the missing values so whit is our uh data we've created a variable called df to store our data frame so the data is going to be our data frame pretty straightforward um and x um is going to be the name of the column that we want to use in the uh xaxis right so that's um and there's also csv it's going to be gender i'm gonna put that around quotes formatting is killing me okay um and then y uh is gonna be mean satisfaction all right so let's run that code cool um so that doesn't do anything yet because i didn't show it so just like matplotlib you have to um show the actual plot and if you were doing this not on codecademy the kind of distinction there is that whenever you call plot.show um that will kind of pop out a new window that where it shows your graph um as opposed to just showing on the right hand side yeah um so usually seaborn will aggregate the the y data um but in this case we only have three three rows and each um each gender only has one data point so there's it aggregates to just the same value anyways yeah so it's aggregating on a value of one right carolyn do you want to give a shot of going back to the old exercise copy and pasting that entire csv file and pasting it into results.csv and seeing if we can make the same graph yeah um or i can just uh copy this code right um yeah so yeah and i can just do satisfaction instead yes all right so let me go back to where we have the survey data okay um so we have our data frame um and in our data frame uh i'm gonna just so we can preview the entire data frame in there um cool so in this particular file or data frame we have four columns um and in this case the um the satisfaction is stored in the response column right so if we wanted to automatically average the um response column we would put that into the yaxis so let's see if this works i i certainly nice cool so it um it creates a bar chart and uh it averages each value for um female male yeah so it looks like it's a slightly different data set than what we were working before another one we had non nonbinary um but yeah this is something that i wanted to point out where this is like you know cborn is great it makes it makes the code really easy to write but it also is in my opinion like slightly more dangerous than matplotlib because nowhere in that line 12 through 16 is it super obvious that the thing that we are plotting on the yaxis is the mean right we know it has something to do with response but there are obviously a ton of different responses in here and so um you know the thing that's actually shown there could be anything and so it's kind of on you to know that by defunct seaborn is going to when making a bar plot seaborn is going to uh make it the mean of all of the value all the x values so the the average of all of the female responses or the average of all the male responses right um so question for the chat um why would i not put age range um into y in this instance but yeah that's a that's an interaction well so yeah so i know that the chat is always like 20 seconds behind so maybe we can talk about this as they as they respond but um yeah so like what what kind of graph would you imagine by putting gender on the xaxis and age range on the yaxis that kind of graph would maybe be showing like like what would you be trying to answer with that graph or like you know do you have a graph in mind that you're trying to make doing uh by doing that um i think it's just a just like a um logistical question right like we don't have um well like it would just automatically do the averaging for us and like it wouldn't be a very interesting bar plot um because you don't need a bar plot to uh to illustrate the differences in the age average right yeah but maybe in like a a diff maybe in like a more um complicated story like that could factor in here i i wonder really quickly changing x to age range then we should see a couple of different uh we should see more than just two um bars on the xaxis yeah cool nice so it seems like the younger ones are really dissatisfied really dissatisfied right yeah the satisfied yeah um yeah that's interesting i i think another thing to point out is that like you said uh if we we can even try putting age range and though in the y column if we want and we i imagine unfortunately we won't see an error message because of the way that codecademy is set up in this exercise um but i think one of the reasons why that won't necessarily work is because age range is represented as a string right and so what does it mean to take the mean or the average of a string you know seaborn won't be able to automatically do that right um and already some thought went behind the creation of that age range column um because maybe the hospital was like it's more useful for us to um have these categories of age um to kind of um yeah to categorize our our patients instead of having like a gradient of ages um it might be more useful information um so that we would only end up with four um like categories within age then like a hundred and however long people live yeah and of course there's like tons of different there's tons of different ways to do that right there's yeah so don't even print because there's obviously an error going on behind the scenes i wish we could see the error message that might be a good thing to do on thursday um yeah but like you were saying um sorry i just lost my train of thought um oh the bucketing um so there's a couple of different ways to do that right there's uh you could do this like preprocessing task or this data cleaning task of okay i have my raw data i have every person you know has an a an age associated with them and now i want to bucket these ages together into 18 to 25 26 to whatever um you can do that through working with pandas right you can say okay i want to create a new column and you know um if their age is between 18 and 25 i want to mark that down as 18 to 25. so you can do that through pandas by like this process would traditionally be called like data cleaning or you could maybe use a different graph where a histogram as opposed to a bar plot a histogram specifically deals with that bucketing automatically so you could probably pass that data like the the original ages so like carolyn was saying a hundred different ages you know i'm 18 or 19 or 20 all the way up to 100 or whatever you could pass that data into a histogram and that might do some of the bucketing for you so there's like tons of different ways where you can solve these problems yeah um we kind of went on a tangent there but i think it's useful to just like demystify all this because it's not it's not just magic there's a lot of thought that goes behind um like even though this the code is short here it um there's a lot within it so i think it's useful to explain that yeah i see in the chat david is saying for some reason i'm not seeing the chart updates uh david are you working alongside us in your own version if you are then um there's probably an error somewhere in your um uh like a syntax error somewhere in your code again it's like one of the one of the hard parts about these lessons is because we want to show you the result on the right we kind of sacrifice the terminal which is where you would normally see the error messages um so i understand that that can potentially be a frustrating experience where it doesn't look like it updates and that's because there's an error message and we're not really showing you the the real error message um there's an another question from john which is do we um if we go to the seabourn site we can see different plot types in the package yes um so generally speaking for any um library uh you can you can sort of navigate like all of these uh different functionalities within the library it should all be listed um on the site and if i click on any one of these um well i guess my feedback for this is there should be more pictures since the visualization um library but yeah um you can read through all of these um great question john um all right so i'm gonna move into the next exercise um we just plotted our first bar chart um and this this exercise is gonna give us more sort of knowledge um behind like the aggregate statistics um that play into seabourn um so uh an aggregate all it is is a single number that's used to describe one set of data so um it so with seaborne bar charts that defaults to the average or the mean but um what other uh aggregates could there be um sorry i was worried i will have to like wait 20 seconds oh uh yeah i was responding in chat yeah so there could be other types of aggregates other than mean um which yeah uh that's that's a good question so given a given a thing of data how else could you aggregate that data and carol can you give like a definition of what like an aggregate even means yeah um so i just um i just said aggregate is it's a single number that describes a set of data um so let's say you have like a couple of different uh numbers and you're like i have a list of numbers that's like 5 14 8 9 10. how would you what's something that could combine those numbers into a single data point so something would be something like that would be a mean of that data set another example might be sum adding all those numbers up together right that's another aggregate yeah we kind of see it we have courses about like summary statistics so more um more statistics that summarize a data set are the standard deviation the maximum the minimum the like quartile so like what's at the one uh onefourth and threefourths um mark at uh the median all of these are like different things that we could a single number that kind of describes the data set um cool so keeping that in mind um we're gonna be introduced to a new data set over here um which is which has three columns it's a grade book so there's a student name there's the assignment name and there's a grade for that assignment and that student so to calculate um the so if we were to look at this data set and we wanted to calculate a certain student's grade for that course we would average the um the grades of each of their assignments right so let's say for amy we want to figure out amy's grade in the class thus far so this class has done two assignments that means that for amy um the grade would be the average of the two grades that amy has right um so this is what happens if you do that for each student so amy will have this average between the two assignments has this average increase as that average um and so that's one way of grouping the um the categories in this data set right by student but if let's say we wanted to figure out how difficult uh each of those assignments are uh maybe assignment one was really tough and assignment two was a little bit easier or they're about the same um difficulty right so the way we would understand that if we were a teacher is to figure out the average grade across all the students for each assignment okay so for assignment one looks like the students averaged at 82 diamond two the average is slightly lower um so in both of the both of these instances we're doing something called aggregating yes well yeah and i think we're about to like make some graphs that reflect that and maybe as you start like uh writing the code in that does this first checkpoint which i think uh um let's see well we first need to right yeah so i'm gonna pour down numpy numpy is a like a number crunching library in python um it takes care of stuff like median mode standard deviation average sum whatever so let's import that um run this code after we import and uh we already have the gradebook data frame imported for us so that's convenient um and let's let's just take a look at it by printing it yeah this might be a slightly uglier printout you'll notice that we're using the terminal now rather than our kind of fancy um display cool um so this just lists out all of the the rows um at least it's aligned so we can read all those columns um cool so um let's say we wanted to just get the um the rows that represent assignment one so we already learned a little bit um but we already went through the data manipulation and selecting the data from a data frame in our previous lessons in the path so uh well with this analysis is to save all of the assignment one rows to a variable called assignment one so i'm going to do that assignment one equals two um and to select the rows i'm going to call the data frame first and um i'm gonna do square bracket to select the rows based on a condition and the condition is that assignment name is equal to assignment one so i need to refer to the row by gradebook dot assignment name i'm going to check if that's equal to assignment one so it's equal equals to the string assignment one yeah again it's something that you can go over in a lot of detail in all of our um pandas of course i think this was the last exercise that we covered doing these kind of filtering techniques like uh getting the rows where uh a column is equal to something mmhmm um let's just print to see i did the right thing there cool so this printout right here um looks like i got all of the rows that um are for assignment one cool um and now what i can do is i can use numpy to calculate the median grade so the median is the value that's in the middle of the sorted list of those grades um so uh i can use mp.medium uh np is a shorthand for numpy based on our import so i can do mp.median and i can now refer to the column grade in this data frame that we created called assignment one and i want to save that to a variable called one media so i always have to print it out to see it yeah cool so looks like the average grade for assignment one is 88 or no not the average the median um okay cool so i'm on the right track here and i think something that's like a little bit interesting about the way that these lessons are even structured kind of reflect my point about seaborne being easy enough that you really have to understand the statistics you'll notice that in these lessons we're doing a lot more stuff about like okay let's dig into this data frame let's grab this column let's find the median we're like actually kind of working with the data itself and i think the reason why we do that is because the graphing becomes so easy once you actually kind of get that data and so it's like in the past with matplotlib we really didn't talk a ton about the different like statistical concepts that go into or that you might want to consider when making a graph because you know matplotlib was so difficult to even like get a basic graph up and running but now that seaborn is here and things are relatively easy to do we can spend more time like really kind of digging into our data set doing things like this understanding how to grab a certain column understanding how to filter the data set um like all of these skills kind of intertwine with each other right i'm sure that there's a way to do this only through seabourn right you don't necessarily need to be creating these variables that stores the median like i'm sure seaborn would have a way to do that but this is just another way that you can kind of like interact with all these systems together right and with this specific exercise we're understanding how we create how we have aggregates in the first place like how we calculate them um and right here like what i'm doing is i'm mainly like um like using this code to um just like confirm that that's what i want right that i want the median um and so maybe like after i do all of this like kind of preselecting and precalculation in my head then i can do like the um really concise c board code right here yeah exactly um so that's leading up to so we've just like done that little portion where we um get the aggregates um here's where we like transition it to plotting the actual aggregates right um using seaborne um so this is a familiar gradebook data set from the last exercise um let's say it's stored in a data frame right and we could basically just uh plot that data that data frame straight away with this line of code we've already seen this line of code from the previous exercises we put in the data here which is going to be the name of the data frame if we do x equals student student becomes our x axis and that's also the name of the um it's also going to label all of the um bars for us yeah that's that's another pain in the butt in mathwa web and then the um grade uh being the yaxis um again this like will default to averaging out the grade so we're going to get the average grade per student from that line of code so um that's um that's how you would get the average grade per student um our task here is to plot the average grade for each assignment um so we already have the gradebook um import it as a data frame so um i'm gonna like reuse this code because i only have to change one thing right um well first i have to change the data frame name but after this just one thing right um is my x axis gonna stay the same do i want um the do i care about um the student's name uh for each assignment grade so not really yeah um the average rate for each assignment right so yeah we don't want the student grade we're going to want to look at the assignment right so let's just confirm that that's our okay so the name of the column is assignment name it's always good to um also always good to like print your data frame so you can see it in your workspace yeah um so sorry i'm just gonna print it so that it's there um and now uncomment this bar plot thing um it should work because we've got all the column names correctly um and what are we missing here we're missing the display line of code so there's a plt dot show nice cool um so it shows us the average grade per assignment um so that matches our calculation or no this is a different calculation this is an average calculation cool so this is a pretty straightforward example um this next exercise is going to like telling us what these error bars are that show up on all our bar plots so far yeah and as we get into this again contrasting it to matplotlib in matplotlib we had to do all the math ourself to actually compute the error and then add and subtract basically say how far those those errors should go so it's like you know if the top of the blue bar is at 80 and our error is five we have to specifically say okay the error bar should go from 75 up to 85 right five on either side um you'll see that here seaborn calculates all that for us which is great but then also the downside of it is if you don't really know what an error bar is or you know how the uh how error is computed or what it represents then you're kind of in trouble in terms of actually talking about what these arrow bars mean right like a thing that we really want to stress is like being able to make the graph is one thing but then also being able to unders explain what it's what it's showing and to like represent your data accurately and to not be misleading in your um in the visualizations that you make and so again kind of this balance of seabourn does it all for you but make sure you actually know what it's doing and what it's talking about yeah and i'm sure there's an option to also take away the error bars if you don't like the look of that um all you have to do is you can probably google search how to take off error bar off c1 graph usually like that's the fix for anything any small issue you have someone's probably thought it before um well so um yeah the error bar mainly is just uh seaborne like default providing a confidence interval um so like roughly speaking it's like it's using a 95 confidence interval so it's saying 95 of similar situations would have an outcome in this range um and if that's not uh if the confidence interval is not something that you care about you can also change it to one standard deviation which is something that more of us are familiar with from our like statistics knowledge yeah um sin to change it to a standard deviation all you have to do is add like one more comma here and add ci equals um so that means confident stands for confidence interval probably um equals to quote sd standard deviation um so we can modify this code right here to do just that um so we just add one more option to this so that the error bars are based on standard deviation now well hard to see if that even changes but uh yeah yeah yeah um so um yeah it's pretty um it's pretty useful for um i guess some instances i guess but yeah i mean i think this shows like how all of these fields start to like intersect where now all of a sudden um graphing is so relatively easy that you can really devote time to thinking about do i want standard deviation or do i want this 95 confidence interval like uh actually getting a grasp and understanding the stats behind it um is something that we can devote time to now that we're using seabourn and you know graphic is relatively easy yeah for sure and um this is advanced graphing too so um it's nice to have these options if you're like somebody that's more familiar with statistics and you're um using seaborne in your job right um cool so i mean we know how to do the average aggregate for our bar plots because that's what the default is in seabourn but um some cases you might want to plot the median instead or you want to plot the um the summer or something else um and it's flexible right we all we have to do is again just add one more option to our line of the line of code that makes our bar plot um so it seems like if we want to do a median um all we have to do is add an option that says um that sets the estimator uh that's a seaborn keyword um estimator equals to np numpy stands for numpy dot median so that automatically um aggregates your y value um based on the median yeah what you can think of of that estimator parameter doing is basically you give it a function and so you can think of by default estimator is going to equal like np.mean or something so basically what that's going to say is i'm going to take my y values in this case responses and pass all of those values through whatever function is in there so by default it's mean it will pass all your y values through the mean function and kick out something that's like in this case it looks like it's you know 35. if we change that function to median then it'll pass it through the median function and kick out whatever the median is you can also give it other functions like in the second example we give it uh lane len or for the length and that's cool because that gives you now the total count basically if you're curious okay just how many um male uh you know responders in the survey um are there and how uh how many female responders are there you can pass the length and that will just give you okay what's the total number of things from this from this array that um that we're given yeah that's basically a count yeah um so we are introduced to at least two options in this um narrative here um so let's let's try uh one of them out um on this data frame so again it's the same survey.csv um data um it's printed out i think it's already printed that was just printed from the last workspace cool so this is the data again um and let's do a bar plot that uses this data frame again has the x being gender y equals response and then um exactly like alex said um if we use the len estimator here we would um this uh these few like um options added together is going to give us a bar plot that tells us how many uh people of each gender responded okay uh carol we have we have two minutes left so as you as you write that code so we can kind of see the final result let me talk about more things that we have coming up in the future um so for pro members um every thursday we do a kind of like private zoom call with pro members so this week carol and i will be running that um pro session it's on thursdays um at 1 pm eastern time if you're uh you can look at the events page i just posted in the youtube chat it's codeacademy.com events if you're a pro member you'll see um the one on thursday if you're not a pro member you won't see it but you can see the other events that are going on which i think there are a couple in there um so yeah we do a private uh or like a pro only show on thursdays i think this week what we'll do is um build some of these graphs um on our own computer so again kind of showing how to down download seaborn how to um run it locally all that sort of stuff um i i might even want to like go back to to the matplotlib lessons and like see you know the really ugly code that we have to do to make these matplotlib graphs and i might want i i think it would be fun to try to make those exact graphs in seabourn and see what this code looks like yeah um and during thursdays we'll also also have learners share their screen or their work but i mean you don't have to if you're feeling shy but um it's a time for like us to really like um interact beyond the the chat function here yeah my kind of dream for this i say this like every single time my dream for this is to make those thursday shows like a radio a radio show where people like can call in and ask questions and um you know we really have kind of the space because it's pro only there's fewer people in there that we can kind of address really specific questions um yeah um so i think our time is up um but just to um like wrap up this exercise um this is the result of us uh uh using the estimator length um in order to like calculate or show um how many people per gender took our survey and if we turn it into the median function um then we get something like this right the median of those responses so yeah and this is like um i think whatever we've gone over so far allows you to um uh build some pretty nice looking graphs off the ground um i don't i don't know if we can stay on for like two more minutes but i think it's really cool because you can start adding other you can add more dimensions to your bar chart um i'm just going to copy that code yeah yeah carolyn if you want to stay on a couple more minutes i have to run to a meeting in like two minutes actually um so if you want to keep going essentially as long as you want we're fine with that but um yeah i i saw one question uh from muhammad uh he's new to data science field where do i learn this from the stuff that we're specifically going over right now is the visualize data in python path and so on codecademy if you look for that that's what we're currently going through we're at the basically the very end of the path um so uh this is fairly advanced stuff if you're just starting um but yeah feel free to take a look at that early path and then um yeah john thanks for uh john in the chat thanks for checking us out um hope to see you on the on the thursday show if you can make it um carolyn with that i'm gonna i'm gonna log off but you know feel free to go uh to show off these last last couple of things i'm just computing this last exercise but it's um there's something that doesn't like about my code even though it's correct i think uh i'm gonna just view this solution here um okay so it's basically that um but now you can have these sidebyside um bar charts if you just add the hue option um and that creates that like splits your category um by like one more column in your data so definitely go to our path and take this yourself and you can rewatch this video and code along if you're coding along this whole time awesome um so i look forward to seeing you all thursday if you can make it um so thank you everyone for tuning in thanks everyone this has been fun yeah well uh closing out we'll see you later yeah all right bye everyone