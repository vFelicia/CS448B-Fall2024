welcome everyone to Khan Academy live thank you all for joining us today I'm Alex I'm curriculum developer at Koch Adam II and my name is Ian I'm also a Kuykendall bird here at cook at me and we're super excited to be walking through another lesson and are visualized with Python skill path I'll with you all today so thank you so much for joining us yeah and you know for this session we are really looking for this to be interactive with you all so feel free to be active in the comments from wherever you're watching ask any questions that you have we're here to answer them and provide any insight and guidance and today is a really exciting day I would say in my opinion if you've been following along with us over the last few weeks or so since we are going to get into some real data visualization today and start building some graphs so I'm excited I don't know you feel like Alex but yeah awesome hi Shamala and hi Michael thanks so much for joining us we're gonna just go ahead and not waste any time and jump into where and so our listen and so if you want to follow along on your own we're going to be going through the line graphs live lesson on economy um so you can go ahead and open that up as well awesome so if you have been following along we've been going over how to work and code in Python I'm over the last two weeks and today we're going to take that Python knowledge and apply it by creating some line graphs and the way that we're going to do this is by using a package in Python that is called matplotlib and this is a package or library that is really helpful for us to create charts and graphs and so today we're going to discuss a few different basics to help you get started with creating your own graphs and so some of that will include how you can actually go and take data that you have and create a simple graph out of it on how you can edit customizations to that graph and for example if we take a look at this graph that we have here on the righthand side of the screen we can change things like the colors or we can adjust the axes which are those lines that kind of border the graph and let us know maybe how much we're measuring something or what we're measuring also able to add two strips of features like titles and some more helpful tools like legend so if we're gonna plot multiple sets of data on the same graph how can we tell them apart and so all this is really useful really helpful I think maybe now more than ever in reading the news we see crafts coming up and appearing to showcase what's going on in the world to explain all sorts of things whether it be public health matters or if you're into like finance and the stock market lots of applications of line graphs or if you are a researcher and you're trying to show off your research that you've done mine graphs will be really useful so there's all sorts of different usages and applications that are there first row line and so hopefully today you'll be able to learn a little bit and go ahead and create some of your own grass your own datum and so before we go ahead and dive in the first thing that we need to do is to load the package that helps us do all this in python and that is matplotlib so at the top of our file we're just going to go ahead and write this one line of code from mat pot lab import pipe lot SP LTE and so what is it doing for us is it's saying that let's go to this matplotlib package and let's import the pipe lot module with this name PLT and so pipe lot is the is a module of matplotlib that specifically helps us with creating this kind of graph so map can also do a lot of other cool things in the worlds of visualization but pipeline is the module we're going to focus on today and just for ease of writing on this module there's a standard where we import it with this name PLT so kind of shorthand for plot and all of the function we're gonna use today are going to be accessed from within this module pipeline so we're always going to be saying something like PLT dot plot we want to do a plot so we can go ahead and run this code and there we go we've gone ahead and imported our MATLAB package so for the next exercise I'm going to pass it off to my partner Alex okay so I think I am sharing my screen now great so we're gonna start off with the basic line plot and basically some of the data that we can visualize using a line plot is the average price of gasoline over the past decade the weight of an individual over the past couple of months and average temperature is a lot along the line of longitude over different latitudes so again these are just some of the types of data that we can use and we can visualize using a line so using matplotlib we can use this code we can see over in the left hand side to plot a simple graph and so the first thing we'll take a look at is X values and it's just a list an array of five different values and the same thing with the Y out Y values it's a list that contains five different integer values so the first thing we'll notice here is a PLT dot plot and so what that does is it plots our data to the plot and so the first thing we'll take a look at is what are we plotting what values are we giving this function so the first one is X values so always when the first argument that you give is going to be the x value of the plot and then we have the Y values of the plot so that just works perfectly so we can see that on the x axis it's going to plot our x values on the y axis it's going to plot our Y values now just using plot will not actually visualize anything in order to view the final graph you're going to need to use dot show so that's what we're using here with the PLT dot show ok so once again just take a look at these values over here X values and Y values when we run this code the output is going to look like this graph so you can see it matches our X values and our Y values and immediately let's just go into creating our own plot um but before we go on one thing you might notice is on line one we see saying this is import code Kadim II live and actually I'm gonna pass this on to Ian to explain a little bit more about this line and what it means for us in this lesson that's a great point Alex and so when we are working with plotting on Khan Academy if you're taking any more lessons that I used the map alone package you will see this import Academy live at the top and this is something that we have on pacifically just on our platform that helps us display our plots to you and so what you're going to see shortly when Alex goes ahead and plots a graph is that we're gonna see that image up here on the right hand side is for you and when you're working locally on your own computer maybe an a PI file or a Python file or maybe you're more of a data analyst it is a scientist and you're working at your notebook the way that a plot will appear will depend on however your you're working locally and so if you're in that PI file you won't have to write in for a quick ad Amiel in you'll just you know import matplotlib as we've done here write your code and when you run that code an image will appear and you're on your computer but just in order for us to replicate that process on Codecademy we have to do a little bit tinkering on our backend to make this happen I'm gonna so that's what you see that import code cut me live there that's just something personal to us here that we have to do in order to show you the plots that we create so no need to worry on your end but a great thing to call out yes thank you so much in so you can see right now on the right side of my screen you have a broken image but that's going to be fixed when we run our code and we actually have a graph to show so let's see first instruction we're gonna make a simple graph representing someone spending on lunch over the past week so the first thing we're going to do is define two lists one called days and the other called money spent and it's going to contain the integers in this list so we'll just start that off so days equals and this goes from zero to six so I'm just going to plot that great awesome okay and now we're going to create our second list array and that's going to go under the money spent so we're going to use this information over here so we're going to type down let me spend and then we're going to set that equal to 10 12 12 10 14 22 24 we have some expensive lunches okay so we're going to run this code and we'll see if this is correct and okay one second see there we go alright so now that we have the graph correctly I'm going you can see that we plotted these two lists correctly and if you ever get stuck make sure you take a look at those hints to help you out so this would have helped you if you weren't sure how to create that Python list okay so now the next thing it's going to ask is plot days on the xaxis and money spent on the yaxis using PLT dot plot so here we go we're gonna try that out PLT dot plot and so once again xaxis is going to be days so that's gonna be the first piece of information we put into this as an argument and our second argument is going to be money spent okay so we're gonna run this code you can see that's all correct and so finally in order to show the plot we're going to use PLT show okay so once I run this we can see immediately that a graph pops up over here and it's plotting our points so we can see the xaxis which goes from zero one two three four five six we can see that on the xaxis over here and then on our yaxis we can see the values that we put in for the array money spent okay so I'm actually going to now look before we go into the next exercise I'm going to pass this back to Ian awesome thanks so much Alex um now for our next exercise we are going to take a look at um how to expand upon that basic climb plot and so um what we can see here is that as we saw in the last exercise we could take that set of data and make that plot showing the money spent over time but what if we wanted to showcase two sets of data together on the same plot I'm gonna enable us to do a comparison we're able to do that as well with map a loop and the way that we can do that is just by doing the same thing that we did in the last exercise where we use the PLT dot plot function we're gonna do that twice with the two different sets of data that we are working with so for example let's say that we want me to look at the amount of money that our friend spending on lunch over time in addition to the amount of money that we were spending on lunch over the time so if we look in this code block here on the Left we have the same days of the week 0 1 2 3 4 5 and 6 and then we still have that money spent list which contains amount of money that we were spending over those different days but now we have an additional list money spent and so we see that our friend is spending different amount of money than us on each day sometimes we're spending less sometimes you're spending more you know depending on their mood and what they want for lunch and what we can do is just by calling the PLT plot function twice once with our money spent against days and then it again with now our friends money spent against days and we're able to plot those two sets of data on the same graph and one thing I want to call out is that you'll see when plotting with MATLAB there's a certain set of colors that are automatically used and we'll discuss a little bit about how to change those colors in a bit but by default I'm you will see lines plotted in blue and then if you add additional line orange and this is not just by chance or because the MATLAB developers like these colors this is because blue and orange are colors that are easy to distinguish for essentially a large group of people so if you have someone who is colorblind typically they'll be able to distinguish between an orange and a blue so this choice was made to ensure that when we are creating plots with my poem by default they'll be visible to as many people as possible and this is something that you know sometimes people don't think about just because maybe you know they're not colorblind or they don't know people who are colorblind and they're gonna go ahead and just design something that looks um you know nice to them but it is important to keep in mind of who your audience is and where different people are coming from I'm so this is just a really helpful thing that is built into MATLAB enabling your plots to be be friendly to people who might be colorblind so something to keep in mind as you go off and venture and treating your own that's just because it can be really fun to choose all sorts of colors but good to keep in mind of making your visualizations as accessible as possible cool so now let's go ahead and try and do a plot of two separate sets of data at the same time so we have our lists called time here that goes from 0 to 4 and now we're looking at revenue and costs so maybe in this example we a business and we want to see how revenue and costs are changing over time so the first thing we want to do is plot revenue versus time so I'm gonna call it p lt's up slot and as my first argument I'm going to put the data set that we want to go along the x axis and the x axis is going to be that bottom part of our graph so here we want to put time it's usually helpful when you're doing visualizations with time to have that on the x axis and then as our second argument we are going to put what we want to be plotted on the y axis which is revenue and so if I go ahead and click run right now on this code it'll see that we've called the plot command and sometimes when I'm working with my lib I'll do this and I'll run my code and I'll be like hey where where's my plot like what's happening it's missing something's broken but always remember that unless you call PLT that show um we're not gonna be able to see our plot so if I edit PLT got shown right here what would happen now is on the right hand side we're now able to go and see that line that we plotted so yeah something to just keep in mind when you go off and start explore on your own but now what we want to do is we also want to plot the second set of data which is those costs over time and so what I'm going to do is beneath my first call to PLT the plot but above PLT dot show I'm gonna do another call to PLT template and I'm going to put time on the xaxis and costs on the yaxis and now when I run this we're now able to see those two sets of data uh together and what I'm going to do quickly is go ahead expand this plot um and we just take a look at this quickly and we can try and I know that's what's going on so if we remember and I'm gonna expand this for a second just to confirm the first thing we plotted which is going to be the blue line is time or revenue verse time and then the orange line is cost versus time so the blue is the revenue and we can see at the beginning on that first day of revenue is higher than costs which is a good thing if you're a business you want to be bringing in more money maybe then you're spending we didn't see um that for the second day did a wine that B cost go above revenue um but then as time goes on from days two to four revenue is always higher than costs um so you know when you're working with data like this I think it's always helpful to just take a second to always stop and look at the data look at the plot and think okay does this make sense based on like the actual data that I have um and to kind of just a question what you're doing because at the end of the day the the plot is what tells the story um especially when you go and share your visualizations with someone so it's always helpful to just check to make sure that things are lining up expect awesome so I am now going to pass this back over to Alex to bring us on to index exercises great thank you for that so just like we said before you in front of a great point about the two colors that are used but like we also mentioned that there is a way to change the line styles of your line graph and so we can specify the color just by going into PLT dot plot adding our x value or Y value and then adding something called color so you can see right over here we have that color key word and then we use a I'm an operator just equal sign and then we either give it a color name like green or a hex code so we can see right over here we have that hex code there and when it comes out we can see that the first one is green and the second one is a grayish color so it's pretty easy just to add that in just make sure between each of your after your x value and your Y value add a comma first then put in the keyword now another way we can style our lines is using line styles so this can give us the ability to create dotted lines or dashed lines so you can see it's the same type of syntax where you use peel T dot plot and after you put in the xvalue and yvalue you specify what you're trying to change about the line using the keyword so for line style you're going to use line style so we can see over here if we want a dashed line style I'll just highlight this over here we're gonna use just and it's in single quotes so make sure you label what you want um your line to look like with as a string so if I were just to put with a string you're just gonna get an error so make sure you are aware of that another example here we have is the dotted line style and that's just using the colon and finally no line so that would just be an empty string now another way we can change up our the visualization of our line plot is by changing the marker now the marker is just the data points the exact data points so some of the ways we can do this is we can have a circle or a square or star and you just have to kind of memorize which ones you're looking for and once again it's the same thing where we put it into PLT dot plot after the x and y values and we use marker so if we want a circle as our marker we're just going to use o once again this is going to be in a string and besides just those options there's a lot more possibilities when it comes to styling you're lying so we have this link over here so if you're in the lesson definitely go ahead and check that out it's the matplotlib documentation and you can just take a look and explore different ways to style your line graph so let's take a look at this example over here we are using PMT pot and we can take a look at some of the different ways this can be affecting our graph so we have our first one so these days money spent and then our first change is the color where we're going to make our line graph green and then the line style is dashed so if you take a close look you can kind of see how that has that effect it's a very it's it's light in this case but you can see there's a very fine line on that green line graph now for the second one where we're documenting daily is the first money spent we have our color still gray but now we're using that marker where it's a circle marker and if you take a look at each of those points you can see there's a dot right where each of those points really lie in so I think that's really helpful it improves just understanding what's happening with your graph um but again it's also completely optional and you can use it or you don't have to okay so let's get some practice with this so the first thing we're going to do is we're gonna plot revenue versus time as a purple line as a purple dashed line so let's give this a try so we're gonna use PLT dot plot so we're going to have time in our xaxis revenue in our yaxis and then we want a purple line so I'm just gonna use that keyword color and we're going to have that equal purple okay great and then the second one we want to do is we want to make this a dashed line so I'm going to add another comma and the keyword is line style and I'm going to set that equal to dashed okay so I'm just going to run this really quick great and so now the second thing we're going to do but I'm actually before we run this I want to show what this looks like so PLT let's take a look at what we created there we go so you can see that in our graph over here we have a purple dashed line and you can really this is very helpful um especially if you have multiple pieces of data on the same graph this could be a really great way just to help you differentiate between what data you're looking at okay so we do have to plot one more graph on this so we're going to plot cost first time with the hex color on 8 EDC 9 I'm very curious as to what color that will be and then these square markers so I'm gonna type in PLT dot plot once again we have time as our xaxis we're going to use costs for y alright our color equals and type that in 8 to DDC 9 and then finally we're gonna have the s style marker so I'm just gonna type in marker and I'm going to set that to 2 so I'm gonna run this and we can see it's already there and we can have a good idea of just how different this makes it look so we have that nice like light green color and we have the square marker and so you can see just the square plot points right on our graph and it's a little easier to see like what exactly the number we're looking at is at that specific point okay so I'm actually going to go ahead and I'm gonna pass this back to Ian for the next one thanks so much Alex and something I do like a lot about being able to style lines with certain colors is if you're maybe working at a company and they have a certain color scheme or if you are maybe trying to visualize certain data that has like a color associated with it inherently getting to use those colors to maybe fit to your company um specifics or like you know fit to what what what come like that data that you want it just makes things a little more fun and um enjoyable so I'm big fan of taking advantage of that cool so we're gonna now switch over to talking a little bit about our axes and the axes are what we use to determine or show what are the kind of scales for what we're plotting and so we have the xaxis on the bottom of our plot and then we have the yaxis um going up on our plot and so when we choose to just plot a set of data map Allah will automatically choose for you what what area your plot range over but sometimes we might want to change those values and maybe zoom in on a certain part of our plot that were most interested in we're able to do that using the PLT dot axis function so if I go ahead and just run this code originally let's take a look at what's happening so first we have the variable X which represents a range of 12 so that's taking us from 0 on the lower end to eleven on our upper end and then we have four yvalues numbers that are ranging between twentynine hundred and thirtyone hundred and so when we plot this data but applying X that range from zero to 11 on our x axis and then those numbers between twenty nine hundred and thirty one hundred the y axis we got this to plot that you can see on the right and I'm gonna go expand this for us and take a look at and automatically we can see here that MATLAB is choosing to set the range or our x axis from zero to 11 so that's the only area that it's showing because that's the only area that we have a data for on that x axis since our numbers only range from zero to 11 similarly on the y axis it has chosen to only show the numbers 2900 to 3100 because those are the minimum and maximum of those Y values in our data set but sometimes we don't want to go with that default sometimes maybe we're just interested in a certain area and that's what we want to focus on and we can change that using the PLT dot access function and the PLT the access function can take a list as an argument and the numbers and that list will have specific meaning for determining the minimum and maximum of the x value and Y values displayed so let's take this look at this example here and the narrative component of the page if we had this data x and y where x is a range of numbers from 0 to 4 and then y is a list containing 0 1 4 9 and 16 and let's say we just wanted to look at this plot from the area x equals 0 to x equals 3 so long that xx this instead of going from 0 to 4 which is what our dataset contains we just want to look at 0 to 3 and then on the y axis we just want to look at the area from y equals 2 to y equals 5 so even though this data ranges from zero to sixteen we just want to see the part of the plot that's in between y equals two and y equals five what we'll do is we call our PLT the odd function like we normally would putting in our X as our first argument to be the variable plotted on the x axis and then Y as a second argument to be the variable on the y axis but this time we're also going to call the PLT dot access function before we call PLT not show and we put in this list of four numbers and those four numbers in a particular order let's let us dictate to the graph what we should focus on and so the first number is going to be the minimum x value displayed and the second will be the maximum x value displayed so those first two numbers what's that they we just want to go from 0 to 3 on our xaxis and then the second two numbers or set of two numbers will dictate the yaxis so the third number will be the minimum Y value displayed and the fourth number with a maximum Y value displayed so here we're saying we want the minimum Y value to be two and then the maximum to be five and so when we now plug this we can see that um our plot on the x axis two ranges from 0 to 3 and on the y axis ranges from two to five and so the plot just is only showing this part of the line and so maybe like what's happening here is like some exciting event in our data maybe there's some big change or in this example maybe there's some big acceleration that's happening here um or change it's making our part go more vertical and we want to show this to our audience I'm so that's why you might want to use the PLT to access function to focus in on a certain area so let's now go ahead and give this a shot on our own so we have this line already plotted representing someone's spending on coffee over the past 12 years so well this person is spending a lot of money on coffee if this is if we're gonna soon this is okay I'm assuming dollars maybe that's not the right case if we're in the US and this is dollars three thousand dollars a year on coffee is a lot I'm hoping this person is maybe in a different country and they're not that are working in dollars divided units are also very important when working with data but maybe yeah so um but we're working in some currency unknown to us here but this person you know maybe in your zero they spent three thousand in their currency then the second year three thousand five so they went up a little bit that that second year and you know that spending that they're doing on coffee ranged between twenty nine hundred and three thirty one hundred awesome so I'm gonna run this code just to see the resulting plot and I'm actually just gonna quickly do something you won't have to worry about just an RN so I can get our checkmark to go off amazing and now we need to go ahead and change the focus of our plots by calling the PS Vita access function and so I'm gonna say okay I'll take that axis and the check point here is saying modify our plot so that our xaxis goes from 0 to 12 and so what this will do is it's going to expand our xaxis out one more unit to the right so now we see us going from 0 to 11 if I update update the axis or 4 to 12 were to go out one more and so as a reminder we need to pass into the PLT to access functionalist and we're going to put 0 as the first number and 12 is the second so this is saying let's take our xaxis to go from 0 to 12 and then the checkpoint says the yaxis should go from 2900 to 3100 so I'm gonna do 2900 to 100 and I'm gonna run the code here um and you'll see our yaxis is now going just for 2900 to 3100 um and you if you saw beforehand and I'm not sure going to take it out so we can just quickly compare so if I take out this line and I run the code we're still only really showing from 2100 to 3100 but there's a little bit of room like above below those numbers but when I've on and this code now we're doing a hard stop at 2900 and 3100 so we're not seeing anything above 3100 and nothing below 2900 and then similarly I'm just gonna expand this I'm on the xaxis we do a hard stop at 0 nothing below and we're going up to 12 now which we weren't showcasing before on our plot and maybe 1 we want it to add 12 to kind of ponder or maybe question to someone looking at this plot to say what does this person think is going to happen next year do we think that their spending is going to go up or go down when you kind of have that area to like think about it it makes a little bit easier to postulate or to guess what might happen so my guess would be that um this person is going to be spending a little bit more on their coffee and your 12 than they did in your 11 but who knows right just just my guess so now I'm sorry what if the yaxis value is in millions and you have to write it in empowers is that possible so if the data on your yaxis and the second question is in millions you can express that in a few different ways so you could write out let's say right instead of 3,000 this person spent 3 million you could write three million out this way there are other ways to express large numbers in Python so we could do um and my I'm gonna try and remember how to do this in a little while but I could do maybe like three um okay you do three times and we could do ten to the I think 10 to the 6 is a million no 10 to the 6 maybe um so this would be another way that you could do it so if you're working in cyclic notation which is typically something that a lot of you researchers might work in or if you're you know work in the sciences you might be familiar with this format where you express numbers as like some multiple of 10 to a power we could just change the data to be like that and that would be fine so here we're saying let's take 10 to the 6th power which i think is a million but I could be wrong I'm gonna go look at your right and then we just multiply that by 3 to get 3 million um so you could have all your data formatted like this and your plot will look just fine now if I go and run this now the placer looks very weird because this one data point Oh see okay this is actually a great situation you brought up so I change this value enough to 3 million but my plot still only goes from 30 120 100 why is that that's because we set those axes explicitly I'm on line 9 here so even though that I have this Y value of 3 million we're not showing it because it's outside the scope of our plot because we're only going between 2930 or 100 but you can see that the plot is coming down from a very high value it looks like a vertical line because we're going straight up we're going straight up a lot so if I were to remove that peel team to access call I'm wondering what it look like yeah we basically just see a flatline afterwards because um that for his values so is so large so great question so this is really useful if you have a lot of like outliers in your data yes yes um yeah outliers are a whole fun topic that I would I can go on a long time about um and just like yeah a Liars are just essentially data points that right um or like outside maybe the the normal range of your of your other data so in this case if someone spent 3 million on coffee for a year that would definitely be an outlier um in in this data set ah just because other years they're spending around 3000 so maybe if we're doing an analysis we want to throw out that the extra large number and ignore it or maybe there's some interesting insight with it and data visualization is can be a tool to help us see where we have outliers in our data so I'm just another cool thing you can do with data vis yeah yeah and if there's any other questions that people have definitely throw them in the chat we love the questions we're here to help out answer anything on your mind all these data vis or two line graphs and plotting yeah so don't be shy and I'm gonna go now and pass it back over to Alex for our next exercise okay so now we're going to go into labeling the axes and so one thing you might have noticed with the graphs that we've created is and we understood the data and what was happening on the x axis versus y axis because we talked about it but if we were to present these graphs to someone without any context that could be really confusing so that's why it's important that we learn how to label the x axis the y axis and even title our entire graph so we're gonna actually talk about how we can do that and in order to label the x axis and the y axis we're going to use poto x label and PLT why label and if we want to use the title that's going to be PLT that title one thing that you have to note is when you're titling these you're going to need to use a string all of them require a string if you don't use them you're going to end up with an error and so like we've discussed in previous lessons when you use a string you can contain that set of characters in either a single quote or a double quote it's up to you which one but you have to be consistent so if you start off your string with a single quote and end it with a double quote you're gonna run into an error so just make sure you keep that syntax in mind so let's take a look at an example of us labeling our axes let's say someone's been keeping track of their happiness on a scale out of 10 throughout the day and wants to display this information with labeled axes we can use the following commands so let's kind of take a look a little bit into this snippet of code so we have a we have a list of hours and we can see that it spotted a few different points on here and we have another one of happiness so those are gonna be the two pieces of data we're gonna plot so the first thing that they do is peel t dot plot and we're gonna have it be hours of verse happiness so ours is gonna be on the xaxis and happiness is going to be on the yaxis and now we're gonna label it so in order to do our X label what we do is peel T dot X label and then we open up a bigger parenthesis and we put the string that we want the label to be inside of it so you can see our X label is going to be time of day then we have our Y label once again it's peel T dot y label in parentheses happiness rating out of 10 and then we have our title my selfreported happiness well awake and then once we do that then we can do PLT dot show in order to show our graph so right here is the result of the graph from the code snippet above so you can see it's a lot easier to understand what's happening with our data we have our time of day we have our happiness rating and we even have a title for our plot so this is just a lot easier so now you can take this graph you can show people and they can Stannis without you having to so much explain each of the labels each of the axes so now let's try it and add some labels to plots of our own so let's take a look we're going to label the xaxis time in this so if we take a look at our data right now we can see that we just have our data isn't really labeled as something before our our lists were labeled things like days of the week and money spent this we're just using X&Y so if we were to plot this we really wouldn't know what this data is trying to show what would we should get from this data so that's why we're going to actually label our axes so the first thing is we're going to do is label the xaxis time so we're gonna start this PLT dot let's see if to check that one more time X label so we're gonna write down X label I'm gonna open up that pair of parentheses and then as a string I'm just gonna write tied in here okay so let's run our code and we can see automatically since we're already showing our plot if we take a look at our graph over here on the right and look at our xaxis we can see in the middle we have that label time great so now let's go into the next one and it's going to be dollars spent on coffee I'm so glad we're back with this expensive coffee data and it is dollars in this lesson really really must be a coffee caffeine lover okay so we're gonna write this in dollars great so I'm gonna run this code and we can see it automatically updated so we can see on our yaxis we see dollars spent on coffee so now we have a better understanding of the two pieces of data we're looking at and finally we're gonna add a title to our graph so that's going to be peel t dot title once again parentheses and then has a string my last 12 years coffee drinking so let's run this and we can see right at the top we can see that label we just created my last 12 years of coffee drinking so I always think it's super important to label your maxi's and my own suggestion is that as you go through the lessons definitely get practice always adding these labels to your graphs and I think it's going to come in handy when you start creating them on your own okay so I'm going to actually now cast the soft end so we can go into our next lesson and I will quickly follow up to say that labeling your axes and putting a title on your plot is one of the simplest ways to make your data visualization more effective I can't say how many times I've either been looking at like someone's data visualization and they were missing one of those things and it was unclear to me whether you're trying to communicate or maybe I prepared something and I forgot to add that label and it made it harder for someone to interpret when I was trying to get across um and so I think you should always always always try and just put axes labels and a title on your on your physicians it's just like an easy win um and everyone who looks at the visualizations you create well thank you so something to always keep in mind definitely agree so this next section and actually before we jump into this there was one other question I saw in the chat um someone was asking um I believe it was Siddharth was asking about creating an access object or an access object and and using that to create subplots which kind of leads us into this subplot section and what I want to basically say on this is that there are multiple ways to create or manipulate your plot with my public um so there's different techniques for kind of organizing your figures and making changes and no one way is right so we'll show you one example today of how to work with subplots there are other ways of doing these kinds of visualizations where we have multiple plots together but this is just one one technique and so it isn't necessarily the right technique it's just one so subplots are a really cool feature matplotlib they're also a point of frustration I think for a lot of people and can be confusing and so we're gonna try and break it down here today before we sew what's up let's allow us to do is they let us display two or more plots sidebyside on different sets of axes rather than just together on the same plot so beforehand when we were looking at maybe revenue and costs it made sense for us to have them on the actual same plot they want to see them together but maybe we want to have just multiple graphs all next to each other and compare them that way and that's what subplots allows us to do and when we create a data visualization that has um multiple slots on it with multiple sets of axes for each set of data we call each of those a subplot and all those subplots together make up one figure so the figure is the overall area or the overall data visualization and each of the subplots are those individual plots are creating so we look at this example that we have here on the Left we can see the figure is this whole image so that whole image right here that I'm moving around that is our figure and on the figure we have six subplots so this would let us showcase six different axes that we're gonna be plotting on and you know I've seen a lot of subplots actually very recently um for looking at copán 19 data and so in certain countries they're trying to look at cases like on a regional basis I'm and seeing how those cases are changing over time on a regional basis and some seen tons of subplots where maybe if you're in the US you see um cases um over time for a bunch of different states so you know a 11 supply you have New York another you have Mississippi another you know Florida I mean you're able to kind of see how cases are changing over time amongst those different states and so if you're in another country it could be by you know the region within your country or even comparing countries together you can have one country for each subplot showing those cases so it can be really helpful when you're trying to draw comparisons and so and this is an example that we have here we have six subplots and the way that they're organized is um we have them as a two rows and three columns so that enables us to have six plots and that was just by my choice we can have different setups where it doesn't it can be maybe just two rows and two columns or two rows in one column and to just show you a few examples I'm going to quickly jump over to this presentation all right doc that I have to show you some different examples so if we wanted to create um a visualization where we just have two plots um one on top of another we could create one that looks like this and this would be a two row 1 column supply the inverse of that would be a one row two column subplot so now we just have one row with two plots or we can create a two row 2 column subplot where we're gonna have the room for for four subplots so those are just a few different varieties of surplus that we can create and the way that we create these is with the PLT the subplot command and to create these subplots we have to give a few different pieces of information as arguments to appeal to that subplot the first argument is a number of rows of subplots and the second is going to be the number of columns so I wanted to create this 2 by 2 I would do to us the first argument to as a second argument if I wanted to create this 2 by 1 so two rows in one column I would do PLT that subplot with a 2 as my first argument 1 it's the second argument and then lastly if I wanted to do 1 by 2 I would do um one row as or 1 as the first argument and choo as the second argument the last argument you give is the index of a subplot we want to create and the index could be a little tricky but essentially whenever we create a a figure with subplots there's a number system that gets created and so if we look at this example here with our six subplots the numbering goes from top left to bottom right so our first subplot is the one at the top left subplot number two is the one in the middle on the top and subplot number three is the one on the top right then we go down so plus four is the bottom left so plus five is the middle and subplot middle bottom and some plastics is at the bottom right similarly if I jump over to the other examples I have we see that numbering system goes from top left across then down and across so we have one two three four um and similarly if we just have two subplots it will go from top to bottom one two or if we just have two in this case we'll go one to two left to right so my best recommendation for getting control with this and we have to wrap up really quick shortly um so we're not gonna get to go um through too much of an example here but it's it just mess around and play with some plots um every time I jump back in to doing plotting with Python I always forget how some plots work I'm always confused I'm like what like what is this number mean like what is the subplot index like how do I create this um and I think this is true with sub loss and I think is sure with coding in general it's like just dive in and mess around take a look at the documentation and just you know start trying to create some plots and seeing what happens um and you can kind of just mess around with it so you get the right get the right answer so it looks just quickly look at this example and then we're gonna wrap up um we have two data sets X and y if I want me to create a subplot of one by two so that's one row two columns in the first position or index one I want to plot x and y with the color green so that's gonna create this subplot that we see here on the bottom left we're in the first position of a one row two column supply or two column figure then for our second supply we're still gonna be working on a one by two grid so we still have that one row two columns but now I want to make this plot and position number two which is going to be that second plot and this time we're going to do our plot and steelblue so now we can see that that second plot is in that blue color if you're going ahead and following along I recommend going to play around with this exercise because it's a tricky one and it's a tough one but I think it's a fun one so we're not going to do it today here together but I recommend giving a shot on your own and letting us know comment on the video if maybe how that goes um but yeah we are all out of time now thank you so much all for joining us today to chat a little bit about data visualization and jump into creating line graphs I hope that was a lot of fun I know I enjoyed um and I recommend that you go and try and create some on your own yeah definitely keep going with this lesson and for pro members join me and I on Thursday we're gonna have another zoom session and we'll talk be able to talk a little bit more about what's been happening they can answer your questions and join us next Tuesday for the continuation of this path and I'm just gonna share my screen really quickly so definitely sign up for a coke Adam II account so you can keep up to date with different events that are happening if you're on the Codecademy main page and you scroll down you can see that the events section is right here and you can take a look at the different events that are happening so we could see here's our event today over here is the event for Thursday and then we have just continuing on always check back and register them that way you can stay up to date with what events we're doing and thank you so much for joining us today it was really awesome being able to go through this yeah definitely everyone come back on Thursday here comember for our free members we'll see you again next week we'll continue going through the past thank you all so much for joining us today and have fun out there doing some coding and