everyone Welcome to our back to school series of live streams we've got several amazing speakers lined up this week so if you haven't already you should go ahead and RSVP on our chapter page at community.codecademy.com I'm Mariana one of your friendly Community managers and I'm joined by Fede moderating in the chat as a reminder there will be an opportunity to ask questions towards the end so we do ask that you please abide by the community guidelines and keep things respectful today I am thrilled to introduce our guest speaker Daniel hardage whom some of you may recognize from our learner stories blog series Daniel graduated from University in mechanical engineering and went on to start an ecommerce coffee company before he decided to Pivot and learn how to code now Daniel is a support engineer at GitHub so without further Ado I will just kick it over to Daniel I'm sure a lot of our Learners can relate to the career switch so tell us a little bit more about your story and your Learning Journey yeah thanks Mariana absolutely so happy to be here um just want to start off by saying I absolutely love code academy um it's it's really an honor to be here and be invited to participate and really happy to be connecting with the code academy uh community and so thanks again for that but yeah my story it's been a it's been a kind of interesting one over the past few years so yeah I graduated as a mechanical engineer um studied in London and pretty shortly after graduating found myself in a job working in oil and gas um for uh for a company called Emerson automation um pretty traditional very very sort of normal path for a mechanical engineer but in parallel with that I was I was working on an ecommerce company with my own coffee brand called moving beans at the time I had the Good Fortune of about a year and a half two years after graduating of having that actually go surprisingly well got a bit of seed funding for my company and left my I guess my normal job behind uh to to work on that full time um that I did that for about two and a half years maybe a bit more than that actually um I had had an awesome time doing that I did learn so much about about building online stores about starting a business um I was always I guess even even when I was studying mechanic mechanical engineering I was still really into coding I did a lot of computational work although not necessarily like um any of the stuff that you uh that you might consider um I might consider being like a normal normal programming work it was a lot of like a mechanical design simulations and stuff like that and but I guess the the the fundamentals and the the sort of the the passion and the interest was always there um after after a while my uh my company my company's cofounders and I decided to to part ways and in the midst of that I was thinking okay what am I going to do next um was kind of I guess like a little bit aimless wasn't really sure um I was already already doing um heaps of learning and heaps of practice on code academy um when uh when I guess that career change started uh started you know it was sort of creeping up on me it was on my mind and when that career change was really starting that's when I really stepped it up and tried to learn heaps more uh on code academy it was also learning about I guess like other Tech stacks and other platforms and uh services like AWS and Azure in parallel with that which I think was pretty important um but when I was going through this career change obviously I was spending hours and hours on code academy and then even more hours and hours on LinkedIn and never even really uh thought about proactively applying to a job at GitHub I was actually applying at loads of other tech companies loads of like big and smaller ones little startups and then the big uh the bigger companies too and but it just happened to pop up on one of those LinkedIn recommendations like hey you based on your profile you should apply for this job at GitHub and I thought you know I've been using I've been using GitHub on and off for ages it seems like a really cool platform and uh had a it wasn't like a super long um super long application uh well it didn't seem that way at the start and the sort of um found a lot of the the questions kind of interesting so sort of um that got me through it it wasn't like one of those really long monotonous job applications that is probably a little bit too common um but sort of got through all the questions and fired it off um and at that point I was already getting uh plenty of rejections I thought you know I just I just take a shot I don't know if it'll go anywhere but um it'll be interesting to take a have a go at that um it was probably like only a couple of weeks later that I heard the first response was one of the HR people and it was just one of those um very familiar introductory chats and just uh just to you know see if I'm a real person basically just was this a was this a legit job application what do you like are you a complete weirdo should we even bother with interviewing you um and it turned out that I I checked those boxes because um pretty soon after that um I had the the next I guess sort of uh I guess you could call it like a proper interview where I was grilled a little bit more I'll uh I'll give The Abridged version of that story because it was in the end it was six interviews I had to go through uh for GitHub but that being said like it's not as daunting as it sounds it was actually quite a nice process because every single person that I was interviewed by was actually really nice and um vibed really really well with every single person that interviewed me um everything yeah every single one even like the more challenging ones actually went surprisingly well um and I think after that it was probably a really good sign that that this was a really good fit um so yeah that's that's basically the the story of how I ended up here um you know starting off with mechanical engineering having like a weird sort of I guess two career pivots and ending up here yeah and how how long have you been at GitHub now hmm uh only just about nine months it started at the beginning of this year um okay yeah kind of it was kind of a weird time um it was in the midst of all of the tech layoffs that were happening and I guess like in some cases they haven't actually stopped happening since the start of the year but it was kind of a tense time because um I moved from the UK to Australia where I'm based now at the time and that my position was based in Australia so it was going through a big move um you know going through all those interviews like really just hoping and praying that I get a get a job offer from them in the end and um getting more and more nervous as I hear are you know Google saying people off Netflix is letting people off and then Microsoft was laying people up I was like oh no man this is this is bad news I hope it all works out but yeah you know thank God that it worked out in the end and yeah I'm super happy where I where I ended up that's awesome so what is your typical daytoday kind of look like in a in a few short words it's basically uh helping helping GitHub users big and small you know individuals little startups and sometimes even big companies uh make the most out of uh GitHub and all of our products um so behind the scenes behind the GitHub website that that you see where you can it almost looks like a social media website like this this coding Community there's an absolute plethora of different products and different platforms that that GitHub provides a bunch of different productivity tools and security tools um code hosting of course as well um and what I do is basically um make sure all of our customers are happy and successful using GitHub cool are there any particular programming languages that you use more than others in your current role um a lot of it is is like I guess like Linux Administration one one actually really useful thing is like database querying so we use kql quite a lot a little bit of uh SQL and of course yeah being really um really good with uh Linux and the command line and those are probably the most common ones um most of GitHub is built on Ruby um but that being said like pretty much any programming language and will be helpful I mean I've got heaps of personal projects that I do um that are you know anywhere from not even remotely related to GitHub to kind of relate it to GitHub um and and uh yeah like my favorite ones are probably like python C plus plus and a little bit of java awesome um we've been hearing a lot about copilot so I'd love to hear kind of your take on it um yeah that's been a super interesting product to to work on um it it started getting really big and getting loads of attention right around the time I joined and I'd heard a little bit about it um in the lead up to to the day I started working at GitHub and but wasn't really that clued in on it I think um it was probably overshadowed by a lot of other stuff um chat GPT being one of them but I think since then uh copilot has just been um been talked about so much and it's just exploded in use um I think fundamentally it's absolutely changed the way a lot of people code for the better um that being said it's it's like it's a little bit tricky because it is such a new product um I think some people are still getting used to used to this and so it's going to be really interesting to see um what's going to happen over the long term But ultimately um the reception's been really positive I think people have just noticed their productivity going up heaps like for me personally as well I use it day to day uh work or with personal personal projects too um and it's it's just such a phenomenal tool it's it's absolutely incredible um so I guess like at its core it's built with a uh it's built with a an open AI um model called uh called codex and um what it one of the most interesting features that people are talking about now is uh copilot chat which is a chat interface specifically for asking coding questions or helping write code write in your editor interface so you can use it um in vs code visual studio jetbrains and I think neovim as well um but it's it's been it's been interesting because uh being in a job where I work every day interacting with customers um get to hear a lot of a lot of interesting insights like what people are doing um hearing you know hearing about where people get stuck with it and and you know what people are using it for and and basically uh helping helping uh you know our community the GitHub Community um figure out how to use it but then obviously that's probably the easy part but then how do you um how do you manage that change like it does have a pretty profound impact on a lot of developers work so how do you um I guess like a lot of the work I've been doing is is like helping people to um adopt it into their workflows and I think that's been particularly interesting for the bigger bigger companies like I think um naturally a lot of people will be um especially in bigger companies are a bit reluctant to to adopt something that will provide such a massive change but what's been really cool to see is that there's a lot of the more um I guess you could call them like the slower or more traditional companies like the big Banks and stuff like that and um you know like basically the really big corporations that where you might might anticipate things a lot slower people are a lot more conservative um being really just really impressed and really willing to adopt this new technology so would you say that for those who are maybe like a little bit more reluctant to jump on the bandwagon that if they don't they're risking getting left behind because it seems kind of like the rest of the world has really embraced it um where do you see this going uh that's a really good question um to be honest I think yeah there are some that uh some some customers or I guess um some some customers and some companies as well that are pretty reluctant to adopt it um and others want to be those first adopters because yeah like you said they don't want to be left behind and but the weird thing is that there doesn't seem to be any pattern to it um I think what I've seen over the past few months is that everyone eventually comes around and I think what it usually takes is a couple of developers um in a team or at a company try it out and then they say something like oh damn this is like this is quite a big deal uh this is really cool and then they sort of Lobby their managers or the big cheeses at the company to say like hey this is this is a really cool product this is a really important tool and we're going to be so much more productive with it and then obviously it has to usually go through some due diligence but that's you know you can understand that that'll be true for absolutely any company any product anywhere and and that's that's really I think what has been the coolest thing to see is that it's yeah there are people reluctant to adopt it and at the same time there's people that just you know straight away jump on it they don't want to be left behind or they just want to be the early adopter but um it's really cool to see members of the loads of different members of the GitHub Community um basically championing it it does seem like a very collaborative tool which makes sense because GitHub has such a strong focus on kind of like open source development um so what would you say to newcomers who are just getting started um how should they start getting involved in kind of Open Source projects hosted on GitHub yeah that's um well I think it's it's kind of tricky because it's it's rare that you can just jump straight into an open source project know exactly what's going on and then just start contributing so of course getting a really strong knowledge of of programming and at least like you know obviously you can only start with one language at a time but it's good to know one or two I think um or at least be really good at one and then pretty good at another one so that's that's the first step like before before you even start contributing like make sure you're uh confident included on on a couple of program languages but once once you get there of course let's say let's say you do want to start contributing and making a name for yourself as a developer for sure um getting on GitHub and and finding out open source projects that you're interested in um that's that's a really great starting point and I guess I guess that's that would probably be step one is just find out what you're interested in because you know there's there's heaps of projects uh where it's you can you can be um interested in AI but then what what domain of it like are you interested in computer vision are you interested in uh natural language processing are you interested in llms there's so many applications to it and and then and then beyond that are you interested in say like uh like robotics or automation or well obviously there's a lot of overlap there but then um then there might be other like industries that you're interested in like it could be like something um something in renewable energy or biotech and stuff like that so I guess finding finding uh a project that you're really interested in would be the first one and there's definitely no shortage of that on GitHub so so that's that's a really good start um I guess the the next thing is that be uh you know be I guess it's it it's interesting because it's kind of tricky to interact with people um online uh when you especially when you can't see them face to face or even over Zoom so so kind of building up a relationship can be kind of tricky but um being someone who seems like they're cool to work with is really important and what I mean by that is that you can start off by just participating in discussions and discussions are are a massive thing on GitHub so just start asking questions make suggestions um be like get some visibility in the community because there's there's it was recently announced uh there's there's we've reached over 100 million active developers on GitHub earlier this year and it's probably a little bit more than that now so there's loads of people you can find I guess you can find your uh your your sort of your crew or your clan or sort of find find your people that share your interest and that you that you want to work with and then just start start chatting yeah like I said it's kind of tricky when you can't see them face to face or you can't get on Zoom at first but um you can you can kind of make a name for yourself surprisingly quickly doing that and and then in parallel with that just just look at and keep up to date with what's going on on those projects and so then once you once you get really familiar with the people that work on it and then the project itself that's when you can start thinking oh you know like maybe there's maybe there's a way this this code can be improved and there's there's always loads of options for that you can have sort of uh user interface changes you can have you can make something run faster you can find a bug even and then um get familiar with the process of um forking or cloning a repository on GitHub and making your changes testing it yourself and working on different branches as well and then get familiar with the process of creating pull requests and getting code reviews as well because um no matter how good you are at coding and you can spend decades and decades becoming the best coder in the world um you're gonna have to put your code under scrutiny you're gonna have to get it tested you're going to have to get feedback from your peers so and it will always come back to um having an interaction asking questions getting feedback even once you've got to that point where you've started making changes to an open source project and are trying to get it um pushed to I guess like the the main repository get your get your changes published as well so yeah those maybe that's that was a bit of a post but those are probably the the top three steps that I'll go through awesome you did mention honing in on like at least one or two languages and getting really confident in those are there any two specifically that you think are kind of the two that you should prioritize if you're just starting out and trying to get comfortable yeah I think it would depend on what you're interested in doing um because there's I mean for example if you love web development um naturally things like HTML JavaScript are going to be super important then there's stuff like Android app development where you would probably be best suited learning about uh say Java and and then say if you're really interested in Ai and machine learning then there's Python and C plus plus um and the thing is it's kind of a tricky to answer that I think because you'll never you'll never have like one language completely isolated for another from another for example like you always have to if you're back in engineer you always have to work with frontend Engineers or if you and are working as like full stack or devops or something like that you'll have to be really clued in on front end and back end and um you'll never be able to just say like ah I only want to work with one programming language so um I guess yeah I don't know if that's uh if if people would be happy with that answer but it'll just depend on what the what domain you're interested you're interested in so uh personally I I think uh Python and C plus plus are my favorites um and then I guess you can even get even more Niche right some people get really interested in like Linux kernels or like operating system and Assembly Language um and you might be like um I don't know like some people are really into sort of like vintage furniture or like vintage art and stuff like that similarly you might get people that are really interested in say like um coding languages like Cobalt and Fortran you know like these are these are sort of like really um you know really kind of Niche like they're still used but they're from there from decades and decades ago but you might find people that are just super interested in it so um yeah it just depends on on what you want to do with it fair enough um so we've talked about kind of technical skills we've talked about AI a little bit um as far as soft skills though are there any specific soft skills or qualities that you think are pretty crucial if you want to make it in the tech industry absolutely for sure I think it's it's kind of funny in a way because a lot of developers um or I guess maybe in like pop culture a lot of developers might might be seen as uh sort of these kind of antisocial uh very introverted they just want to focus on their code they don't want to talk to anyone just plug in with their headphones and and just you know just work on their code and you know sometimes you do get people like that and you know if they're if they're good at solving problems that's just what they want to do then more power to them but the majority I think are actually not so much like that um no matter what you do if it's a tiny startup or a massive corporation like Google or Apple or whatever you're gonna have to work with other people one way or another and so I think being a team player maybe that's a cliche but it's it's always it's always true you know be be a team player realize that there's there's like a bigger um bigger goal in mind that's that's really really important and and I think related to that it's also important to be able to communicate complex ideas really really well so the more you get into learning about a language the more you need to understand how to talk about it and talk about these really Niche or esoteric topics you know so um sometimes in your in your daytoday job you might have to distill um really sort of messy or complex and sometimes they're both messy and complex ideas uh into just a few short sentences because um I mean in a in a big team especially everyone's got different priorities you might be working towards the same goal but you've all got your got your job so you don't want to waste your own time you don't want to waste anyone else's time and and you want to be able to communicate these these kind of difficult Concepts really effectively and I think the probably like the last thing is I think it's overlooked quite a lot is that don't it's and this is this is kind of maybe the hardest one to do as well is like don't don't take um feedback or or critique too personally you know so I mentioned briefly before about how whenever you whenever you open a pull request on on GitHub for anything whether it's like a private uh internal repository or a big open source and project and you'll be opening your code up to scrutiny you know and I think it's kind of difficult to take feedback sometimes and no no one everyone gets nervous by it but um try to listen and I think most people even even on open source projects we don't really know the other person um you might be that might make you more nervous like 99.9 of the time people are going to be really good about it you know so don't be too worried about taking that feedback and taking those criticisms um because well firstly that's uh that's a probably the best way to learn how to become a good developer is like learning from other people learning from your peers um but then also like that'll it seems it seems like a so so obvious it seems silly to say but like that will make your code really really good like you will probably have things mostly right but you always need to change a thing or two so yeah be be willing to take that feedback and then also when you get the chance to give feedback to other people like um be kind of helpful or generous you know like and luckily the open source Community really rarely um gets people with you know they're throwing around insults and being really rude and unpleasant when it comes to feedback and the the cool thing about GitHub is that there's basically there's no there's no time and there's no tolerance uh as a company there's like no no time for that you know we want this to be in a very literal sense like a really good welcoming community and if anyone goes against that or Breaks the Rules it's like you know sometimes it's like okay listen it's one strike but sometimes if you're if you're really bad it's just like no you this is this isn't what github's about this isn't what decoding Community is about we're like we don't need that behavior here um so yeah I guess the point is like it's it's okay to give and receive feedback that's probably the the hardest but most important thing to be able to do so it's probably good practice to go ahead and do that in a safe kind of community environment and work on those soft skills ahead of time before you actually thrown into the fire yeah and I've noticed code Academy's a perfect example for that because I don't know if anyone else here has used it but if you haven't um when you look at code academy forums it's kind of like a I guess like a smaller scale version of that where you're where you're only interacting with other Learners where you can um where you can open up other questions about specific lessons or projects and and ask where you know where am I going wrong on this or you know have I done this right um that's that's probably a good good starting point just just interacts on there what's been your biggest challenge so far in this journey I mean have you grappled with like imposter syndrome or have you ever wondered if like this was really what you wanted to do definitely a little bit of imposter syndrome um have I asked myself if this is really what I wanted to do like absolutely not like I Once I arrived at GitHub and got to know everyone I was just so happy to be there like my manager's really cool my manager's manager is really cool all my team are really cool I was just so happy to be there there was a little bit of imposter syndrome when I when I started speaking to say like senior Engineers there especially I was thinking like oh my God these people are on a different level um but that being said um kind of as if it's like almost the uh like a mirror of the nicer parts of the open source Community every single one of my colleagues and um especially like my direct team members everyone's so helpful um internally at GitHub so um whether it's on slack or opening up like a GitHub issue internally on one of our you know one of our like internal repos like people are always really quick to respond really quick to help um if yeah if you're willing to be a team player like everyone else is just is really on board with helping out um so yeah I mean that's that's the thing like that was of course a bit of imposter syndrome and so I was like wow these people are incredible and this this sort of environment's amazing but you sort of get get integrated really quickly which was just absolutely wonderful that's awesome I love hearing about a supportive work Community um as far as building and showcasing like a really solid portfolio to stand out do you have any advice to some of our learners yeah definitely I think it's it can be kind of tricky because there's so much stuff on on GitHub you know I'm always going to default to saying github's the best place to do it there are plenty of other places of course but um I think for a lot of reasons GitHub is the best place to do it I think when when you put up your projects or your portfolio and your um you know even if it's just like a few scripts or something you're working on even if it's for from a code academy lesson for example um it can get sort of Lost in the noise because there's so much stuff on there but there's there's ways to set yourself apart and I think a really simple one is using GitHub pages so you can make actually a pretty sophisticated website um like a really interactive one um you know go to town on your CSS and your JavaScript and stuff like that um and and basically build your portfolio from there like I've seen a lot of our um a lot of our open source Community make some absolutely like phenomenal um portfolio websites using GitHub pages and and that's a really great place to start I think and another way of getting your work out there although not necessarily your own portfolio is to is to do do what I what I alluded to before and that is um start discussing and contributing to other projects um if you've got um a really good addition to make just go ahead and do it like a pull request is or a pull request that makes a really helpful useful contribution that then gets merged into um the sort of main body of a of an open source repository is is just as good as like a um your own your own repo your own uploaded to your own profile as far as your own portfolio and your own interview experience it GitHub um what do you think made you stand out I so after I joined the team after I went through all the interviews I I learned something really surprising from my manager because obviously you can't ask certain things um this is kind of like asking the answer to an exam before you even said it sometimes but I was I was having a oneonone with my manager and I was asking about the interview process part of which involved um submitting responses to a couple of GitHub related questions so um it was basically you'd have to you'd have to answer it as if you're speaking directly with a GitHub customer and it would be about say like a technical problem with uh GitHub um or using say like git command line tools as well and they're not super difficult like you could probably find out the answers to them um just yeah usually just with it with enough um great and Google search you could you can find out the answers to them not too quickly but I was really interested to hear that just that step um sort of filtered out something like he said 90 of applicants like just just doing a few simple questions filtered out most of the applicants which I thought was crazy um so yes it's like stuff like that surprises me um I think I think stuff like that is is quite a good um good way to do it as well because it's it makes you juggle you know what we were previously discussing like how do you juggle your um I guess your emotional intelligence and your people skills and your communication skills with your technical knowledge as well um so that's yeah I think that's that's a highly underrated bit like you focus on technical skills really well you can focus on emotional Insight agents really well but like how do you how do you combine the two that's that's like the the simple but quite often overlooked thing so how did you prepare for the interview process I know you said it was kind of something you hadn't thought about doing but then it came up and you decided to go for it uh well I at first um I I knew I knew quite a lot about using GitHub itself and a little bit about git command line tools um I think first thing that you could probably apply for for any interview in any uh tech company is go on the website and look at all of the products um do I have to know each one really really well but I did that with GitHub I looked at um I looked at its main sort of like open source uh Community um platform and then all the other stuff like um the Enterprise Products the security products and then of course copilot which had just recently been released when I was interviewing um but then and I hadn't actually known about this on code academy even though I've been using it for well on and off at least for like four or five years now I had no idea that there were courses on code academy about git and GitHub so just when I it was actually after I had my first interview already with GitHub I was like okay I've got to get really really good at um get command line tools and stuff like that and I just I just smashed through all of the um courses on code academy I think there's like three maybe even four now and they're actually super helpful like they're it's it's not just sort of your very basic stuff it will the code academy courses are absolutely phenomenal in that they'll get you up to a level uh where you can use it um really really proficiently and then get like a really good understanding of how would you integrate um GitHub as like a productivity tool in your um I guess in your teams in your developer teams workflow awesome we love to hear it um as far as any insights into future Trends I know AI is on top of everybody's mind right now so what do you think aspiring devs should kind of like think about or be aware of as they kind of look to the Future yeah that's a that's a super hard question um uh well I think firstly everyone's got their own take on this uh I've got mine um earned you know more there's more than one right answer I guess is the thing and the other tricky bit is that only time will tell who who was right um there's there's probably a lot of reasons to be concerned I think that's for sure but there's also a lot of reasons to be really optimistic you know like I think uh just in the past few months we've seen how helpful tools like copilot can be and and not even the the sort of the parts of it that haven't been released yet like copilot chat or copilot voice and copilot pull requests just the pure simple and copilot um editor tool um that you can just have as your you know vs code extension just that has improved productivity massively and I think as as technical challenges get harder and harder and more sophisticated and complex for whatever reason that could be like a security problem it could be like a user problem accessibility problem um you know coping with massive databases or massive amounts of data like problems get harder and harder so um at the same time we're good technical Talent gets more and more scarce which which it looks like it might be um having a tool that makes you really productive can really really help so that's like a that's a massive Advantage um there can be some dangerous stuff as well of course um I mean for example I think the the ability to generate images and modify video footage can be a pretty tricky one like like how easy is it to just um modify like a celebrities or politician's image or their video to say something outrageous you know and it just um spirals out of control like I think that's something that you've seen that we've seen already and luckily it's been all like outrageous or funny enough that no one really believes it but I think stuff like that can have really really devastating consequences um so I guess the the other weird thing is that it's so widely available you know like Chad GPT is free like anyone with an internet connection can use it so that's that's going to have really interesting consequences and the thing is like these things unfold over time so it won't just be how things are the day after things like chat GPT are released um or you know the I forget what they're called but you know you know the all the video and image editing AIS it's not just what happens the day after they're released but what's going to happen like a year or two down the line because I had a really good analogy and um the release of things like that it was it was described as like um the moment that the water broke so it's not like everything comes out at once but it's like this is the sort of the penny drop moment like oh gosh this is a big change um and now everyone's using it and everyone's using it in different ways some people have really positive intentions some people might have malicious intentions but it's going to unfold in weird ways over the course of a few months or even a few years so yeah that's probably probably the main concern but I think it's so reassuring to see that people are using it for for good things and productivity and helping yeah help like for a sort of a a greater good kind of way as well especially on on the open in the open source community yeah so it really does have the potential to just be like lifechanging in a good way yes for sure whether your powers for good or evil yeah um but yeah thanks so much for sharing so much of your story I think um we probably have a few questions going in the chat um so let's check in on those real quick hey I'm gonna jump it in yeah go ahead all right thank you so much for coming in I've been monitoring the chat for the past 45 minutes or so and yeah there's a lot of good questions coming in to chat I just dropped a prompt for everybody to please drop all your questions as well as they you come up with them and I'm gonna be really here uh very early on the live stream we actually had a question from Mikey that said I do marketing but looking to switch to an engineering career really interested in how you got your foot in the door being uh being the only coding experience what you learn as a mechanical engineer coming I guess the question is you know you came for kind of like an adjacent feel to software development so how do you feel about making the transition do you have to overcome any fears imposter syndrome that sort of thing yeah there was definitely a little bit of nervousness and and some fears at the start I think um when when you sort of end one chapter of your professional career and you're not even sure when you want to go next which I think was the case for me um you know even though I did have quite a good technical background um it's still a little bit um yeah a little bit kind of uh a little bit weird going from from not being entirely sure and looking at loads of different options and then finding finding your well yeah I guess I guess in short it's just like finding your way in that process is probably the trickiest bit um I mean I the the closest thing I got to marketing was was running an ecommerce company where I kind of just had to like crash course my way into it like how do I Market a brand new product how do I Market my business and but I think um you know I'm doing the best I can to try and try and relate to that I would say like uh marketing work is still pretty technical now like there's no way out of it and I think any marketer will probably have encountered things like um design tools um analytics tools for for say like um yeah well even like Google analytics or like analyzing marketing and advertising campaign so like right off the bat I don't think you should um under race to me um how important that might be in like a in a technical job because if you if you can look at it say like a marketing metrics and stuff like this if there's an analytical tools if you can use that and understand that that's a really good start so I guess like a really good Bridge um would be to say all right how can I take all of these like tools that I use day to day and maybe even just like write a bit of a bit of python code or JavaScript code um well just pick whatever programming language you like really and how can I make something even really simple that might improve my day job in marketing already like so so it's kind of the thing where you're taking a domain you know marketing um or an analytical tool in marketing and just kind of like tinkering with it or like or even replicating it so say like um so like how would I build this myself even if it's really really simple and just take that domain you know and try and implement it from scratch and within a programming language that you like and then put it on GitHub and share it with all your friends I feel like as a beginner it can be very overwhelming sometimes there's so many choices when it comes to software engineering and I feel that web development front end web development has become sort of the standard path to switch careers into Tech but we know that it's not the only path and so as a beginner do you have any advice for how you navigate this sort of huge roadmap of saying you know what is the tech I should be learning should be going JavaScript should be going python it's a backend it's a frontend uh What uh what is the stack that everybody prefers to use today is that the one I should be learning you know the ageold question of angler versus react for example right so I I guess the question is is there a is there a little bit of decision paralysis sometimes when you when you're a beginner and you're looking at the broad spectrum of things you could be learning and how do you overcome a little bit of that yeah that's I mean I think I still get that sometimes like I've been programming python for like seven years now and sometimes I'm still like oh did I make the right choice to focus so much on that um the best way to choose I think is to find what tech stack you need to be most productive or be best in the domain that you're interested in right so um yeah like I said there's different Industries you might have like robotics you might have energy you might have um you know automation or Healthcare um each of those will have their own certain uh software or technologies that they like to use and then you can look behind the scenes like what's under the hood there what programming languages do they use so I think making it sort of Interest based is the swiftest and best way to do it so that being said interest can change so sometimes even though it is a little bit sort of a little bit crude Sometimes the best thing is to just try a whole bunch you know and like code academy is great for that like you can probably do an intro course every day for 10 days and do like do c do C plus plus do python do Java do JavaScript and whatever else do a little bit try a new one each day and just see what sticks um sometimes that's the best way to do it yeah and a lot of the skills are transferable right so yeah wasting your time uh by learning python if you end up with uh Java at the end yeah yeah so if you if you understand one object orientated programming language really well um it's surprisingly quick to pick up another one you know like even though syntax can be quite different sometimes um if you're good at Java you might find um you might find your way in C plus plus really easily um even if you've been doing Java for like five years and you've never touched C plus plus before there's um there's like a this there's like levels of abstraction that you start to pick up and these Concepts that you start to pick up that once you apply it to one you can apply it to others really really quickly nice I'm sure that there's a lot of beginners in the chat that are pretty happy hearing you say that um I have a question here from NED about regular regulation and overseeing bodies so I'm gonna paraphrase here and ask you um with the you know uh Advent of AI and gen Ai and all the tools out there uh or do you see a sort of Need for knowing where to draw a line when it comes to I know that you touched on this earlier where we said these are tools that Empower you but they might be organizations there that have different degrees of you know being comfortable using this tool so uh working with these tools as you do um where do you see some of those lines being drawn when it comes to how much gen AI you want to use or Implement in your workflow and is there a need for maybe somebody to start thinking about this in a more systemic way like maybe companies should have a chief generali officer you know yeah well it seems like it's going that way for a lot of companies like there's there's really kind of unusual bizarre jobless things that have started popping up just in the past few months like prompt engineer which is definitely really important it could be really useful but it's something that you just wouldn't have seen say like before 2022 um so sometimes yeah having those jobs could be a really good solution definitely something that company should try um with effective regulation like this is such a tricky question because it's so easy to comprehend it as a scary thing and therefore over regulate it to the point where the usefulness and productivity is completely crippled but at the same time some things are legitimately kind of concerning enough that maybe you do need to have some kind of um some kind of regulations in place um it's it's it's hard to and it's hard even for say even though it's kind of a legal issue sometimes I think it's really difficult to even say legal Scholars and and intellectual property laws to really uh comprehend this um personally I think starting off with sort of a gentle touch is really really important like you don't want to interfere too much you want to stop anything bad happening but you kind of want to have have that balance between stopping the bad stuff and just letting the really curious productive Minds just let let them go wild sometimes and just come up with the best things that they possibly can without stifling them um and I think the the other important thing is like make sure that it's never um severe and strict enough that you can't sort of roll it back you know like it's it's it's ultimately it's ultimately how well you can communicate these complex ideas which you know we've been discussing all afternoon so far um and um have like this Mutual understanding like there's people that want to regulate and make people safe or you know maybe just control people because they don't understand it and then there's people that just want to be left alone and make really cool stuff you know and these people need to work work in the same in the same world and sometimes you know in the same room makes sense uh we have a fellow mechanical engineer in the chat saying that it's pretty nice hearing from you uh you know giving them a lot of hope uh they actually have a question about your interview process and how you got the the job that you do and they were wondering if there's anything you can share in terms of how these interviews work or the technical use of it I know that different companies have different processes like whiteboard interviews or takehome exams or things like that so maybe you can share something on how these interviews typically work yeah for sure so I'll um yeah like I said it was six interviews but I'll just try and run through each one really quickly what it was like so it was only like the first half that seemed quite daunting because um well the first one was just sort of that you know really brief intro chat the next one was with um with the guy who's now my manager and that was sort of getting grilled about my CV about my past experience going some in detail questions um but not strictly technical questions the next interview was the technical one which was with one of the senior engineers in my in my team um and she was actually really really great that was um that was like a nearly threehour interview I think um and this is the other funny thing like it's all of my interviews over ran just because like we got written to a really good flow um but that was that was the one where it was probably seen the most daunting but being in it it was it was kind of like that whiteboard kind of um style where it was a it was a screen share it was all in GitHub so it was like in a GitHub repository and um and working in there we're basically given a problem and it's like we took a well you get given like a collaborative approach like anything short of asking what is the answer like is cool like you can ask hey am I on the right track um this is what I'm thinking do you think that's the right solution and and that was really good um the next one was with um a support engineering manager um that was sort of more of like a personality um similar to that that second interview with my direct manager and kind of like a personality checking your history kind of background kind of fit and and then the next one was with actually one of my counterparts so um a guy that's doing basically the same job slightly more similar um and that was sort of more a cultural fit then concluded by another sort of HR chat about um yeah do you have any questions did was there anything you think we missed was there anything that you think you missed you is there anything you want to bring to my attention that kind of like more of an admin kind of kind of stuff um but the thing is I think it was really good because as a mechanical engineer um there was a lot of work that I had done in a in one of the first jobs I did after I graduated where um you know I was working on a lot of like technical clientfacing work which is really similar which is basically what I do now and then also working a lot on documentation and so that's both customer facing and Internal Documentation so um in mechanical engineering it's it's something that's something you can't get away from and having experience in that was I think something that helped me a lot when I when I had that first um first big interview with um the the guy who's my manager now and I think that he was quite pleased to hear that I was experienced with uh writing and um updating technical documentation so I guess like the the point is there like I guess the the takeaway is probably that there's almost always even especially if you've previously been in a technical role even in a different domain there's almost always like a really valuable transferable skill that you can have okay awesome um I have a question here about somebody that is using code academy and they enjoy the content but they are having some issues staying motivated so how do you what would you say to somebody that says I like programming I like what I'm doing but sometimes it's just difficult to stick with it until the end man I found um I've had that a lot of times before I think at the time I started getting really into code academy I had a good motivation and that was sort of like oh damn I like I really need to find a new job like I was just frantically trying to learn everything I can and just trying to and trying to get back on the wagon and so to speak I think but I think when it whenever I've had times like that the the kind of you know I wish there was like a like a secret um recipe or like a you know Secret Sauce to it but unfortunately we could say fortunately the main thing that will keep you going is just a strict schedule like being disciplined rather than motivated like make sure uh every morning before you do anything else just make sure you can do at least a little bit sometimes even just 20 30 minutes a day every day consistently gets you surprisingly far like it's not the days that you can spend like 10 hours coding and I'll get you ahead it's like the consistency so I guess um you know like there's a book Atomic habits that's really really good for this maybe before you code read that first and then um put in those like little nudges those little hints like for me all I did was like put a reminder on my phone every morning at 8 30 a.m it just said code academy and I'll just log on to code academy do a lesson or do at least part of a lesson and and just check that off and sometimes if you've got a free morning or a free afternoon it just extends to like 10 hours of coding some days it's only going to be like 30 minutes at best you know but it's that like consistency that I think can get you really far nice yeah I really like that consistency that's nice yeah and I mean it's so easy also once you build the habit I guess it's like two three weeks into it right it just becomes a routine yeah yeah that's that's like the rule of thumb isn't it like after after you do that for two weeks that's when it just becomes like second nature I see somebody here bringing it back to GitHub asking if you could recommend any resources for learning Version Control and GitHub to new programmers uh yeah and um I think it's literally just do the code academy course on git and GitHub um I think if you if you uh yeah I mean if you don't want to do that um GitHub itself has got a YouTube channel where there's plenty of stuff like that um but personally what I've found is just using it so for example create a GitHub account uh make a bunch of test repositories upload a bit of your code make sure it's stuff that you're comfortable with screwing up because the best way to learn is just to get on there um and work through it yourself just test it out Tinker with it see if you can break it and see what you can do like try and push the boundaries like how many branches don't don't push it too much because you know there's like limits on what you what your um there's like API rate limits where you might get blocked if you make like 15 000 different actions but um but like beyond that just just like try it out just take it for a spin take it for a test drive like nothing happens if you um if you muck up a bit of code there's almost always ways where you can um revert back um and that's even like since I started working at GitHub the best way of learning GitHub was just to get on it and use it I feel like it's very daunting to learn git uh separating the two getting GitHub um I know that GitHub has a desktop app now that sort of takes away the pain of Git You don't really have to look at the console and you can still submit PRS and see what's going on um I guess I guess there's always that chance that people might try to avoid the parts whereas you know maybe there's just don't want to know how to revert back to older versions it's too difficult to complicated things get messy yeah for sure I guess maybe the the if I had to pick one thing then that people should try out is the um I guess the bra the system of branching so create a repo add a bunch of code create a branch and then muck around with that add code cut code cut code up and just see how you can change it or um you know draw making an improvement and then use that as your mechanism of learning about stuff like commits and pull requests um definitely people well actually a lot of people like the git command line tools because you get you get like a really nice level of really granular control and to be honest I can't actually think of a better tool than or platform than code academy to learn about that as well to be honest with you great uh okay so I think we have time for a couple more questions I'm gonna go with one here from Sam asking you do you think it's worth even attempting to enter the tech industry without a college degree in your late 30s is that even possible it's absolutely 100 possible like I even now like being in uh like being in the system being being part of it and seeing behind the scenes I'm still like Blown Away by how many phenomenal coders there are that have never stepped foot inside a university um like I guess on on top of code academy another really good starting point is I think it's Harvard University there's a really famous course it's just called cs50 I'm 99 sure it's it's Harvard University that's like such a ubiquitous and such a useful starting point and you can go from uh zero to zero to 100 really quickly starting off with stuff like that um so the short answer is yeah like it doesn't matter if you've got like that desire to do it and you've got you've got something in mind especially if you've got if there's an idea even if it's just like a little grain of an idea of something that you want to create in the long run um just go for it there's literally there's I was gonna say there's nothing stopping used like not only that there's like no excuse there's so many good free resources like code academy put some stuff up for free and if you want to fit out my pain a little bit there's phenomenal tools with the code academy Pro Plan or even if you want to be super cheap just go on like YouTube or something like that and I think the cs50 course is free but the point is like just just don't hold back just just do it you'll be you'll be blown away by how many other people there are like that and how much how many resources you have if you if you've got a half decent computer nice let's go that's what I like to hear putting that energy behind it your dreams uh last question from Natalie that I'm picking here is related to job postings Natalie says how can I find a job if all the job postings I'm seeing are looking for senior developers and I'm only a junior entry level developer how do I stand out when applying for the option and I think this is very common where you might look for jobs uh in websites that put you know job posting websites and it's really difficult to find the ones that actually apply to your skill level yeah like that's that's genuinely a tricky thing to navigate though right because I've been seeing a similar thing I think part of the reason behind that just just on a side note is I think there's a lot of companies that are trying to especially like it's not necessarily brand new startups but startups that have been around for a couple of years that have started getting traction on really complex problems and it seems like that maybe they feel that the only people that can solve it are senior Engineers with like 10 plus years of experience but there's also I think if you look hard enough um and I would say from personal experience LinkedIn is probably the best place to look for this there's still heaps of entrylevel or Junior Developer jobs um that being said there are you do see the occasional instance of someone's a very like not necessarily like a fresh brand new engineer but like say a less experienced engineer they get a breakthrough with a really Niche difficult problem you know and if you've got the confidence to try and Tackle something like that do it and publicize it like go go to these companies that you think are only applying senior engineers and say like hey like I noticed there's like this problem going on and I think I cracked it here's what I did and like a lot of the time you'll be surprised like even even like connect with other employees on LinkedIn at that company that you're interested in and just talk to them about it it doesn't happen every time but like you know let's say like three or four out of ten times you have a bit of success with that um maybe like a little anecdote from personal experience as well well uh we hopefully still have a couple of minutes or so but I think I I applied to something like 280 to the order of 280 jobs before I found this awesome job at GitHub and most of them obviously didn't even respond I maybe had like 40 or 50 interviews or like at least got to like 50 40 or 50 uh first round interviews and doing that and getting over that sort of that fear of putting yourself out there is probably really important too because um when you do that I'm not saying you have to apply for 280 jobs I think looking back on it is kind of crazy but let's say let's say you'll set yourself a target of like 50 jobs applications over let's say three or four months maybe maybe make it six months if you're really really busy and you have time for that but going through that process you get two really really incredibly valuable skills you just get more confident at talking to in talking in interviews you can present yourself really well you can um answer questions really well and also there's like a like a hidden sort of intangible benefit but still a really good one and that's that you really start to focus in on what you really want to do what you're really interested in right because at first I found myself just applying for any job and that I would be like vaguely interested in or vaguely good at but then after a few months I found myself like being way better at filtering out what stuff that I'm not even remotely interested in and only picking the stuff that I think I'd be really good at and really interested in so you know it's kind of a long process but I think that or can be but I think those are probably the best things you can do and do them in parallel if you want there's like I said there's nothing stopping you there's like there's no excuse there's so many so much so many people you could speak to especially on LinkedIn um for advice and guidance so many job listings up on LinkedIn and so much um stuff you can learn a lot of it even for free nice well thank you so much I think that yeah a little bit of try I never never heard anybody uh I want to thank Mariana for stopping by and hosting to this awesome live stream thank you Mariana and for you Daniel answering all our questions and the questions from the audience really thankful that everybody stopped by today for live stream I hope that you enjoyed it don't forget that we are celebrating back to school this week with code academy and we have a promo code up so if you want to sign up for an annual plan don't forget to subscribe to YouTube we want to see the rest of the live streams this week and I also drop a link in the chat to see and RSVP for the other live streams this week thank you everybody and thank you again Daniel and Marina for stopping by yeah you're welcome absolutely absolutely honored to be here and thanks everyone