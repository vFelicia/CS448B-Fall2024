hey how are you all so it seems like we're talking maybe like ten seconds ahead of the stream but we can see all the comments for this session we're gonna be continuing the visualize data with Python track and today we'll be focusing on lists and how we use them and what they allow us to do so let's just get let's just begin right away let us know in the comments if you are familiar with lists already but we will just be you know going through feel free to code along with us and but if you don't want to coat alone you can always you know go back and do it yourself so firstly can everyone see my screen all right sunny can you see my screen let's see I think on the YouTube stream yeah I'm still lagging a little bit I'm a few seconds behind so I'm not sure okay alright thank you sir all right so this is visualize data with Python track so far you've gone through intro to data visualization regular basic Python Python functions so we're gonna be looking at this module right here which is the Python lists so let's get just like a preview of like everything that's gonna be in this module we're starting with the lesson we got a quiz project an article that you know gives you some challenges with using lists and the lesson two for the code challenge so there's also a project a part of this module but today we'll just be focusing on the lesson and running through the lesson so I'm gonna start opening up the lesson now and Alex can you set up the link in the chat all right so this intro to the lesson right here what is a list a list is basically it's objects in Python that are ordered and you use brackets to instantiate a list so right here in this first example we have heights of a student in a class we want to jot down these numbers and want to group them together so we're gonna group them together in a variable called heights and this is the exact code that we would use to make that list alright so I'm going to start with the check point right here this the first instruction so we already have the heights list over here we want to add one more so there comma separated so all we have to do is do and then add Cole's height which is 65 they run that check and there's a this invalid code right here so let's remove the comment symbol from there first if we run it it's invalid syntax well we need our commas okay all right let's run it now okay no errors that's a good list cool so let's move on to the next exercise yeah yeah so I think this I've never really seen this introduction before I think this introduction kind of lacks like this exercise in this lesson kind of lacks like why we need to use lists right so lists just like what Carolyn said it's used to store a collection of data but we can actually create these variables using different variable names right we can so far on line one we actually don't have to create a list we can actually do height one equal to 61 height two equals 70 high 3 equals 67 but it is better and more convenient to store it in the sort of collection right and because this is a data visualization skill path we're gonna see this over and over again so it's good to understand the syntax right now right and I don't think we've seen this before I don't know I haven't been watching the previous live streams but it's like a opening square bracket all the numbers separated by commas and then a closing square bracket yeah so I'm just to follow up on that list are like the most basic data structure and they're stepping point until you know us being able to graph a series of values right on on the graph and visualizing them translating them into things that look nice right and then with these lists we can also lo learn more later about how to turn them into more like table like structures that we can actually manipulate and gain more insights from but this is really like the basics of Python that you to know in order to do that alright so sudden you want to pick up from the second exercise yeah so let's take a look so list part two so this is actually really interesting lists can contain more than just numbers so I guess it's a little bit different than some of the other languages when we you know use arrays or vectors so we don't we can have more than just numbers in our list so in this little code block right here with names we have four different strings values instead of numbers we have a string called Jenny a string with the value Alexis a string with a value Sam and a string of value grace okay so four strings in a list and then here's another interesting thing you can actually combine different data types and one list so this I think this is the part that's very different than other languages right so you have a string type for the first list value and a number type in the second list values so in this one the list name is mixed underscored list mixed a list cool so we can we can try this out so Carol is actually typing right now so add any string to the list in ten strings add they're heading out I should add six all right awesome and I create a new list called Sam underscore height that contains two values the first values the string Sam with a capital S and the second string value is sorry the second list value is 67 no errors cool awesome yeah pretty straightforward I'll take the next exercise okay so lists can hold you know different data types but they can also hold lists so you can have lists of lists so let's return to this first example which is you know the heights of these different people from the previous you know exercise we learned that we can have a mixed data type list so here we can store we can make a list called Jenny we can have the name and the height so we can do is put several of these mixed lists into one big list called Heights the heights will be a list of lists all right so let's go to this first check point here new student is named Vic and 68 inches tall okay so I'll try to add Vic to this little list of Lists oh we have so we'll make firstly what I'm doing right now is making the square brackets for a new list that will have Vic's name and mixed height all right so now he's you know part of the class also this is on line one it looks kind of confusing right now because the code Ashley overwrapped but if you just like scroll expand the window the coeditor window you'll see that is just one line of code it's not multiple lines of code and you can actually format it this a little bit differently to write into that maybe like the first inner list is like on line the second inner list is on the second line you know you can you can format a little bit differently so it's more readable yeah I've seen that done a lot of times right so I'm just gonna run this different formatting so makes it a little bit easier to read okay so I'm running this but it's making it thinks that I'm attempting the second checkpoint but that's correct code okay so this second checkpoint right here it's asking me to create a list of lists called ages so first I'll just do that variable where each sub list contains a student's name and their age so that's like the the outer list it's asking me to make sub lists so the first sub list so I'm gonna add the name and the first name in the first age that's the first sub list second sub list it's gonna be Judy and their age which is 16 all right cool that's valid all right let's move on to the next one yeah and I think in this in that exercise too I noticed that so all the lists all the inner lists are have two values but you actually don't have to do that right so you know some of the lists they don't have to have the same number of values it's just one thing to know about these sort of lists of lists yeah just a little side note yeah I think with this this exercise is hinting at is that we're trying to build like kind of a neater database looking thing so we would want you know to kind of standardize on our own here but yeah like this would not be invalid that would be fine all right cool so this next one okay so this is actually I don't think I've used this before so zip let's return our class height example Jenny's 61 inches Alexis 70 inches Sam is 61 67 inches tall grace is 64 cool suppose we already had a list of names in a line of heights all right so we have two different list names and Heights and if we want to create a list of lists I paired each name with a height almost like a dictionary and you know some like a key pairing we could use something called zip CIP so zip takes two or more lists as inputs and returns an object that contains a list of pairs we're almost like we're almost combining two different lists each pair contains one element from each of the inputs you won't be able to see much of this object from just printing it okay no so the so that the print the output of this actually a little bit weird it's like a little square bracket zip object at you know a memory location so I guess we just have to try it out to see what happens also have a question about this can you know the site now suppose we have two different lists of two different value of different number of values and then we use zip what happens there should we test that out after we sure yeah cool so I mean this is like you know a big chunk of information and this in the description of the lesson right here so let's just see in action well we already have in the workspace you want to pick up sunny yeah so let's use a zip to create a new variable called names and dogs names new variable names underscore and underscore dogs underscore names that comprise those two lists that we have names list and dogs names list into a single object a zip object I'm gonna look scroll up just to see how it's being used okay so it's being used like that so I think we did function before so you should recognize is this sort of syntax right the function name the command name or whatever and then we're throwing the two arguments inside names and dogs names mmhmm I just want to address a question um somebody asked is the content is this content the same that's in the data science path oh we've got a moderator answering that question right there so thank you moderator um cool so let's see what happens when I run this oops typo I'm gonna use the right variable name dogs names okay so this next little instruction here is telling me to turn this into a list if you go back to the lesson description if I try to print names and dog names right away whoops dogs names okay then I'm gonna end up getting a zip object this is because the zip function here returns not a list but a zip object so that's what we'll see if we try to print it straight away but what we can do is cast this names and dogs names into a list so that we can actually print and see it that's exactly what this section second instruction is asking us to do so when this variable name is a little bit long so I'm gonna copy that over names and dog names schools I'm gonna cast this zip object into a list and then I'm going to print these are really long variable names all right okay so now that I um I print the actual you know lists version of it um I'm gonna comment that line out which gives us that zip object um once you cast it to a list you can print it and it looks much nicer so what it does is makes pairings ray of each name and each dog name so we're essentially trying to like make a pairing out of each out of each item in each list so Jenny will be matched to Alfonzo Alexis will be match to dr. doggy Sam is matched to Carter and grace is mesh to bro so it's important that these two are the same length yeah let's let's test out the use case like what happens if you know let's say dot we have an extra dog in the dog names let's do some other name okay all right so let's try let's try running all this code with that okay so just like kind of disappear okay good to know so yeah what we just did was um kept the same amount of names in the names list but we added an extra name so it seems like what zip does if there's an extra element that's unmatched somewhere it just won't match it with anything yes so we know that for the future okay so this is so this actually pretty good use case so I didn't know about zip before right this sort of like pairing system but like this could be a use case suppose you have like a playlist and you have artists and then in one like you know band names or artist names in one list and then saw names and song titles or when another list and you could combine these two lists using zip so it's like a pretty good little tool that we can use yeah we have a question which is why does it return with round brackets so good question Lulu so if we you know I'm highlighting this one kind of pairing that zip gave us what the what zip makes is something called a tuple so a tuple is like you know any math class is like XY right there's those values are basically like grouped together in that way so these tuples are not actually lists these tuples are tuples so i we can actually create a couple right yeah I think Python estoppel its instead of using square brackets I think it's literally the same thing by using parentheses and then in the difference between listen tuples so I always call I always call them tuples I didn't know they're called tuples but they are I think the only difference is like lists are mutable and tuples are not and I'm not sure what output looks like a tuple but I guess I just like the way Python works in the back end where it likes to display everything if it's a key pairing then it's a couple but I do wonder this so suppose it probably isn't a tupple when it's not zipped right not a couple if it's not this right like suppose we just like create a new like when we did the list of lists and when we print it out it's not a tuple right still with square brackets mmhmm I'm going back to that lesson it's because we when we created them with the square brackets they they're automatically lists yeah but if but you can try it out just to show people like if you just do names too and like you just copy the very first line of code and then paste it somewhere called names too and then instead of using square brackets use parentheses it's then you make a couple sorry if I use square like opening parenthesis and a closing parenthesis instead of square brackets for life for yeah and then you print names too so that's a tupple I'm pretty sure oh yeah so that's a couple and the difference like you can't change what Oppel where is like less you can manipulate it however you want it to right so you can't really like I can't add more elements to names too right there's no functions for me to like a pen or plus sign okay so yes like if you have like a parent that you know is true forever then I'll use a tupple instead of a list but most of the times I feel like the data that I touch even when this number data was historic data I like to use lists just because you never know we need to add a number you need to reference a number you need to change a number delete a number right there's a question from somebody named hold on why is it if you print lists casting names and dog's name to list two times in a row the second time returns an empty list so let's try that out so I'm going to uncomment some way hoping is this D Hoban I don't know I see that probably not if you print okay I'm gonna copy that line of code and demo what Hoban is talking about so all right so um good question so what happens the first the first time it turns into a list so this is the first time that we cast that to a list so here let's I think I might know what's going on here that's that's really interesting that I hope and ask this so what happens when you let me think how do i how we can take title this okay so right here this is a the first time we cast it to a list and then the hold up if you print so it seems like something happens the second time we cast it to a list but it it's a little bit different if we do this versus if we do this do you have a sense why Sonny why only sorry yeah so I think Alex said it's because zip object is an iterator which is kind of a more obscure Python concept but I wonder how we can like make people understand what hope is talking about here I wonder if we can they set up printing after we use the list command what if we just print out a line on line 11 we print out names and dogs names yep just like right there we're gonna have to resit we print that out right so that was a line that I commented out before okay so we'll just see as a zip object cool and then after we you know put into a list let's print out the names and dog's names again let's see what happens there so maybe like between line 17 and line 18 so between these two lines let's print out the names and dog's names again just so I want to verify like is there still a zip object at that you know hexadecimal location yeah okay so it's still there huh all right I guess just a weird Python so something about iterator functions I think makes it so the second go around there's okay now here's my question what if you do in a third time there's another question is this still empty what does it do it or does it restarts okay so maybe it's like where it like runs out of elements to to cast maybe yeah I love little interesting language this is so bizarre you use up everything in the iterator thank you very sense yeah that's bizarre though cuz nice and but the the object zipped objects still there in that memory location which is really bizarre yeah I think so I think maybe what happens is actually the list function is I think that might be the thing that's sort of eating up the elements yes right okay all right and just get to know weird yeah that's case cool also check please let us know if you have any questions we love questions like those too we'd love to learn stuff like this yeah and let us know if you know at any point we're going way too deep into a demo and you know we need to get back on the list okay cool so let's move on to the next one we now know what zip does this is a pretty straightforward one okay so I guess hoping already kinda cover this what like what the heck is an empty list so the empty list basically elicits doesn't have anything it might looks like a square right there but oh it is it's like a opening square bracket in a closing square bracket so not nothing too crazy right there right so an empty list is like something that you can just like keep as a as a box and let's say that in your code you're gonna fill up that box later so like if we make in my empty list empty list we passed that checkpoint there but we can see in the next exercise is how we can add to that box so I think this is a pretty straightforward one that's valid code we're gonna learn how to like grow that list now so here we're introduced to a function called append so that's that allows us to add a single element to a list so you know again if we start with this empty list right here we can add an element to it using dot append and the element that we want to add to the list so that would be one in this case so and this just demos like if we print empty lists we'll get a list with the element one cool and when we use dot append on a list that already has some elements what it does is it just it adds it to the end of the list well this is a simple little example right here let's just get straight into it alright the story goes jiho is working for a gardening store we can see the code in the editor right here we got orders of daisies and periwinkle let's use print to just respect those orders Cole shows up here daisies periwinkles we got a new order of tulips alright so what we can do is the list name which is orders we use append and what's the flower alright tulips alright let's run this this first print is just printing what it was before we appended so another order has come in now we can append roses now let's print the whole thing again cool that has our updated flower orders we've got a question the chat is empty list equals double bracket the same s empty list single bracket alright so let's use the like previous editor to make that comparison so yeah my understanding is that they should not be the same rank even though they are empty also by the way is this called a 2d like two dimensional array I mean sorry two dimensional list like two double double brackets or like a matrice okay yes so what you're making your so actually like the let's call it not really empty list I want to say because what it actually is is a list of lists except it has an empty it has an empty list inside that list yeah so can we print rep let's print the truthvalue of them if whether or not they're equal so they're not equal let's just like print those out to see what they look like even just an output alone and then also we can test it by using a pent and see what happens there okay so they look very different even the output and then let's go one more step let's append something to both of those lists so let's do like a pen to one or something so like my okay so I understand emptiness append one and then not really an empty list append one and then print those out again and let's see what happens I've a feeling that the outputs can be very different I wonder if the yes so that's a really interesting point right just very just like what Carolyn said do you see how the Pend looks so different these two because the first empty list in the list of lists is actually the first element right and when your pending one to it so you know in not really empty lists the first element is empty list and the second element is now one yeah and the follow question is how to use append in a list of lists and list form and we actually line 11 is when we're actually doing that we're pending it to this list of Lists so like if we say that a list can contain mixed data types it can contain lists within itself but it can also contain single elements so we can call this one a mixed list as well and that's what happens when we append a single element into what was previously a list of only lists okay yes nice question it's good like with these super basic lessons to like dive super deep into like the you know actual object that's being kept track of and Python and how and the logic behind it right okay you know it's very easy to especially when you're working with data it's very easy like to miss where you're you know adding a certain layer and changing the changing the object type of something that you think is just a regular list but is something else yeah okay so here's a random question I've been I've been wondering this like it's just like the beginning I don't I didn't I didn't want to ask this on on stream but so Carolyn used to be a data engineer at tumblr so my question is how often do you actually use lists at your job like did you even use Python a tumblr um well I don't know how much I'm like you know allowed to talk about like the whole you know everything yes yeah we didn't use Python though um however like you know the concept of series and tuples yeah you know constantly show up right regardless of the language just like a mandatory yeah knowledge yes and when you're doing anything with data and you know engineering anything like you have to be extremely sure about the datatypes of everything because if they don't match you're not able to use a lot of the functions that manipulate them right you have to standardize like pretty much all of your data so if you have something let's say like you have something that's in a single bracket and you wanna and you forget that you know you keep this other thing and inside of like a like lists of lists or a list of tuples it's like there's a lot of conversions that you have to figure out yeah the data that you want to get yeah I think that's one my problems with I feel like Python in general is just like they're less I mean I did post in curriculum chat of I think Python 3.9 is adding type hinting which means like you can add like an int to know to check whether you know the argument of throwing is like the parameter suppose there is supposed to be an int this argument being thrown into the per am and to the function is an int value okay so so it's it is happening but I have ran into a lot of problems with like even writing machine learning curriculum with you know one numbers off maybe add a stantly added you know maybe have a strain in a list of numbers you know just like something a typo or something and that happens a lot it's really hard to find yeah Python in general like you don't know if it's wrong unless you you know run it whereas you know there are other languages like Java where it's so strict about types you have to be upfront about exactly what you're declaring so that makes it a little bit that has its pros and cons right you know it makes developing you know a little bit more intentional and maybe maybe difficult but you know on the compilation before the code is actually running on the data set when you know which could take a long time so you know that when the code compiles whether or not it's whether or not all of the objects that you want to manipulate and get insight from are actually like you're not going to run into issues during the execution okay yes and hold on for data science using a package like pandas helps I wonder if pandas is in this it's not in the data visualization path but it is in the analyzed data with Python path I think and in the general data science skill path path so here curious about pandas actually I think it's right there right it is it is there it is here yeah yeah Oh data manipulation with pandas yeah yes so this package allows you to like inside of pandas it does look like you know the list language right here so it's good to know the list stuff but it but within pandas it creates it kind of wraps more around the list so that you can you know have functions on them yeah like dataframes or whatever great yeah that that makes your data analysis and data visually visualization and how you're grouping the data a little bit neater oh cool also and Kenji baby says and also the fact that space makes a difference in Python is annoying true very true okay yeah stealing you know people are like thrashing on Python here yeah that's great this is a great easy language as fast I mean it's like it's good first build something pretty quickly with Python yeah is it pro here okay so there's two like pick up a little bit we just did append right which adds single elements on to the end we can also use a plus sign which feels really you know really Universal but a plus sign is combining two lists instead of adding a single element so let's say we have items sold at a bakery cake cookie bread and we want to start selling biscuits and tarts so what this line of code is doing here is we're adding the list called items sold plus notice that there's a new list containing biscuit and tarts and the add basically combines them into one list okay right so we you can see it by printing right so here there's a little note about like we can only use plus with other lists this is what happens when you try to add a single element you get this type error that you can only concatenate concatenate is can think about as gluing you can only concatenate two lists not an int int element to a list okay but if you wanted to add 4 to that list what you could do is put a put brackets around that 4 and make it a list containing 4 all right so by so those you know a little flower shop business we're still adding orders he just received orders for lilac and iris we want to use + to create a new list called new orders it combines orders the existing orders and we want since we're using + we have to wrap those new elements around a list so they're lilac and iris awesome alright the second checkpoint asks us to fix this broken line of code right here why is it broken if we run this we're gonna get a type error can only concatenate lists two lists not and into a list so that's the same error that we've been warned about before we can fix this command by putting that for around brackets awesome yes comments we will be using pandas numpy and lists all together that's that's going to be in the data manipulation with pandas module what happens if you print this out let's try that one more yeah broken piece of prices yes it's not broken anymore cool remember to to make your variables always reflect what's actually going on okay um cool so let's move on this looks like we're nearing the end of this lesson call and make sure you understand what's the difference between a pend and the plus the plus operator there's like a pretty big difference but like when you first starting out you might know you might not know which one to use but there's like a difference there alright for a range this is a this is another function we're getting introduced to this is kind of like a shorthand for us to create a list of consecutive numbers so if we wanted numbers 0 through 9 this is you could list all of them out like so you know painstakingly like if you had to list number 0 through a hundred I don't think any of us want to wants to be there typing every single number from 0 to 99 or a hundred and we human error right so let's let Python give us an easy way of doing that it's called range so the function range takes a single number and it generates a list of numbers starting at zero and ending just before the number that's given so here this line of code my range equals range 10 that will give us 0 through 9 so 9 is just before 10 and just like with zip that range function doesn't give us exactly what we want it doesn't give us exactly that list so we would have to convert that into a list using the list function okay okay all right let's let's use range in this editor right here want to modify this list 1 so currently let's let's print out list one let's see what it gives us this is the error message from us not doing the checkpoint but let's follow the checkpoint all right so if we print this right here it doesn't give us the list it give us a range object so if we put a little list casting around that list one it actually gives us what we want which is that list of 0 to 8 all right let's make a second list with a range of 0 through 7 so what should I type in here Sonny I think 8 oh why 8 just zero to the input value minus ones so which is 7 right 8 minus 1 is 7 just print out yeah I'm actually pretty surprised you had to do this like with zip and range values I'm surprised like Python makes you have to like do the list command again like it could easily be just like that's a return value and then the you know the zipped object memory location or that range 0 10 whatever like basically to be more explicit like those could just be property values so mmhm maybe for Python 4.0 if anybody watches cook a meal I've seen it on dev team yeah you change that yeah hopefully a reason that they keep keep it as a range object it could be helpful you know for other functions later on that's actually I just want to like comment on you know variable names here so since we want this to actually represent we want list one to actually represent a list let's do the casting here instead of what we've instead of when we print it so that doesn't confuse us so this is good coding practice right the variable represents the actual truth about the the data that it contains that's just my two cents all right cool I like that let's wait can we got a question so coach at me account I think that's Alex right what happens if you try print list list one again okay so I'm gonna do that to list so basically list one is already a list oh wait so if I print um let me print list list range oh boy it's because I already I already changed the variable to actually be a list so essentially it's like what happens if we try to double cast on this range object same thing I guess we do a list of illicits is still the same thing that's weird feel like that's not the same behavior as zip should we never tried that actually no no no I think that's possible with zip of a zip yeah that's not possible I mean unless you do zip zip and a zipped list and then try to zip try to zip list2 and list3 Oh what's going on here missing a on line eight missing a closing okay so then if I print okay I want to do is it equals I'm gonna store this in a variable and I'm going to print the Zips okay so when we print the zipped it gives us the tuples but the question is what if we double cast you know the question is actually if we zipped again okay yeah so yes for yeah whoops click back instead of right no okay so this is a thing all right oh we cast it to a list cast is zipped to a list the first time it gives us this these tuples which is what we want but if we cast if we try to lists cast the zip to a list again it gives us an empty list all right so here's something more ridiculous eleven instead of printing out the list of zipped again what if we do another zip of list for and list five and then we do the yeah actually you know yeah all right so I mean we already know that that wouldn't have happened with zip right um but I okay let's range thing I'm just gonna go back to the actual question which is what happens if we print the list of the range thing right then we get this nice one but if we try to do the same thing again actually it will give us the same thing again so it seemed like lists on a range has a different behavior at the list on Asia hands if stocks Arctic as Kenseth take more than two parameters yes it can't I think this is covered in you know a future exercise but we've really made a mess of this editor haven't we yes so let's say cat name sir yes dogs ages right let's say there's four right okay so let's say we had so you want to zip we want to zip all three of these things together I'm going to comment out the other mess okay names ages so whoops we need to do that casting thing again so okay so here's what happened all three of those things got zipped into the same couple so tuple is not limited to two elements so that's good to know okay definitely try out a zip on your own go back and do this exercise and you know you can play around with it cool so let's just let's try to finish up this range thing in the last five minutes when I talk about some what's gonna happen Thursday and some future events all right so this exercise range two instead of just being able to do consecutive numbers you can actually have consecutive note you can actually have a series of numbers that skip of yes like numbers that have intervals between them so this range function right now starts it starts from 5 ends at 15 and the third argument is gonna have a we want it to have a difference of 3 between each item so you can also use range this way so let's print out the lists of that all right so this is what happens when we this is the output from range with five fifteen and three so we got 5 plus 3 is 8 plus 3 is 11 plus 3 is 14 and it will not go up to 15 right yeah so I think this might looks a little ridiculous but we're all we're doing is we're skipping now right like a 3 is how much we're incrementing like the last value so still going from 5 to 15 well 5 to 15 minus 1 but we're incrementing by threes we're skipping right let's just do the second example super quickly we start at 0 we want a difference of 5 between each item it ends at 40 though so that's gonna be the second argument and then the final argument is how much it's gonna skip and let's print out cool so it does exactly that it skips 5 from zero to just before 40 awesome ok review here definitely recommend for you to complete this lesson on your own it basically you know you're gonna be running through all the skills that you've learned in this lesson so far in the last few minutes let's talk about what we'll be doing Thursday I'm Sonny do you want to wait a second I don't think I've that pulled up well Thursday so Tuesday's are our days where were you know deep diving into a lesson like we are right now Thursday's are more of a ask me anything Q&A so you have more opportunities to ask questions there although you all did a great job asking questions today Thursday will be a little bit more loose so like instead of us you know just sticking with the lesson we can do is kind of like jump all over this module so you know if we want to check out that project we can if we instead we want to actually like download and like install Python into our own computer we can demo that so Thursday's just a little bit more loose but you will have you have more ability to decide what happens on thursdays then make sure to go to kokum ecomm slash events for future live events i think we're we have a bunch of goodies coming soon that were trying to push for especially doing this time I think it's just like a perfect to have to learn when you have some down time so make sure to check that out go kami comm / events if Alex you want to send that out and chat yeah make sure to join the Thursday session if you have Pro yes go I'm gonna just pull up that advanced page quickly in the last minute yes so today was a Tuesday Thursday is questions oh is you can also ask us questions that are outside of you know the curriculum can ask you can ask us questions about like generally like how to do data stuff in Python some of our experience from being engineers in the field so we'll try to answer as many questions as we can you can also have learners you know sharing and participating a little bit more that's Thursday next week next Tuesday we'll have other people on our curriculum team doing the next module which is matplotlib so graphing stuff and then same thing next Thursday is also asking anything that's all we have coming up thank you so much you all for joining today this is my first live stream [Laughter] so I mean I'll see you all on Thursday again we'll see you all on Thursday again everybody give Carolyn a claps in the chat oh and you can leave some comments now we can you know maybe address them on Thursday too so we'll just keep looking at the chat Thank You moderator cool it's Thursday session recorded good question I think if you're a pro it's gonna be available right thank you I love your username all right I do see a comment from ha so let's see which age is the best to start coding I think high is 15 where I'm where I'm from the best classes can only be attended by individuals over 18 and I'm currently 15 therefore have access to lowlevel classes okay so 15 your freshman freshman in high school yeah I think there's a perfect time to start learning I think even when you're 15 you can actually sit in a college lecture right you can just sign up for that and I'm sure if you're in the States a lot of the high schools now have computer science clubs so definitely recommend joining those and then also online tutorials are a great way to get started even when you're yeah I was saying try to just do your first project and it takes a lot of just research on the spot but it's really fulfilling to build your own thing so you know you can figure out what kind of thing you want to build and go from there I would recommend that you know cuz you're starting so young you know you want to do fun things with it awesome so I think we're gonna sign off for today thank you all for the claps and join us on Thursday we can you know have more banter and all that okay all right goodbye everybody I see everybody have a good Tuesday peace