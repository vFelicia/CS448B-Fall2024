all right hello everyone here welcome to another live stream we are continuing our series to build an ios quiz app in swift ui so we're going to review where we started on right now and this should be the final lesson live stream in the series we're going to take us through finishing the rest of our quiz application uh and then show you some next steps that you can take for working on this on your own so i hate everyone here i can look along and chat and let us know where you're coming in from if you're watching live and hello to everyone who's going to be watching this uh later on as well so let's go ahead and get started and take a look at where we left off at the end of the last session as a reminder you can find all this on the swift ios live stream github page and i'll shoot you a link for that in chat in just a second and that's where we're following along from now in the live stream three branch so uh what are we up to here let's take a look at the state of our application as we left it so we can see from here that when we start off in our application we get our quiz app we have this quiz time at the top we've got our questions and then we can go ahead and put in our answers and as we answer we get this little next popping up we saw last session that we learned about state and how we can be transitioning from one question to another question by adding in these different property wrappers around what our variables are so we're going to add this component of state where these change over time so we see the different questions as we're answering them we got to the last questions and then we stopped because we weren't sure what to do after that and so we originally were breaking so we gotta figure out how it is that we can not crash which we did but also how can we show them that the game's over and tell them how they did on the quiz and hi from everyone and on chats you've got some people from new york city and israel so kind of got a good range here which is great okay so let's go ahead and get started so what we want to do in this session is finish the quiz app by adding in this results screen so once we click next to the last time we can see something useful and we want to add in a little bit at the beginning where we can just welcome learners to the application say hey you're about to take a quiz this is what's going to go on and then let them get started from there let's go ahead and build that welcome view first and then we'll take a look at how it is that we can be transitioning after the quiz is over we'll learn a couple tricks from going over the introductory welcome screen that will be able to adapt for figuring out how to end artwiz so let's start with our welcome screen so right now our application starts just on this page right here we're already in the quiz let's just add a little screen in front of it where people can kind of get context for what they're going to be looking at so by this time we've made a bunch of new views already we're going to make one more so we're going to make in this views here a new file which is going to be a swift ui view and this is going to be our welcome view welcome view okay so as always we can have our canvas up here so we kind of see what we're making as we're making it so we want for a welcome view is a little bit of text up at the top that just kind of welcomes people into our application let's just lets them know what's going on uh we want to have that bottom bar that's going to go ahead and tell learners like hey this is what you should be expecting or sorry this is what when you click on this you can go and see the rest of the questions on the quiz so before we do that let's go ahead and get started by adding in our little background color that we've had for the rest of our application using this zstack trick here so we want to have a background color that everything else will bleed through for now let's just copy and paste this from here i say for now because we're going to revisit that in a second and then just add a background color and check out what our view looks like here okay so we've got the same color going on which is great now let's go ahead and just build this view out so we want to go ahead and add in a vstack which is going to be a vertical stack and then what we want to do in that vstack because we want to have a text which is just showing maybe we should take this text in the game view where we say quiz time let's just move that in actually because this really doesn't need to happen at every question probably makes a lot more sense if it just happens for the specific question or sorry at the beginning of the application entirely so let's grab this quiz time here go back into our welcome view and then add that as our first text here uh and question chad actually glad you could build apps in the cloud using slow macbook air that is the promise of xcode cloud building which sounds really cool i have not actually played around with it yet but if it works that is what it says it does which would be fantastic because on older devices it can take a long time sometimes uh okay great so we've got that quiz time right there and now let's go ahead and have a little prompt for learners so that they know what they're expecting so select the correct answer to each of the following questions and then we can be resuming just kind of get updated on how our ui is changing you can see it's a little small maybe you want to make that a little bit bigger so we can give it a different font maybe a title tube that's kind of like an h2 from if you're used to working with html uh and then let's give this a little padding as well okay so far so good let's go ahead and push these views up a bit we can do that using a spacer these views get bumped up up to the top and then what we want to do is have a little button at the bottom that's going to let them go from this welcome screen to the actual quiz now last time we made a bottom view right here this bottom text and we made this a button by itself well that worked from before but maybe we just want this to be a text and have it do something a little more interesting than just have uh some command we're passing in let's do a quick refactor here and change this bottom text to not be a button also and we'll move the button aspects of it back to the view it was coming from so let's do that by getting rid of this on flick handler here and then just taking this label and having this be the thing that we're pulling out from here so we've got a text in between two spacers then what we can do is here instead of making this uh passing it in this way we'll just make a button here have our button take in an action and a label the action will be the same this view model advanced game state that's what we want to do and the label is going to be that bottom text that says next bottom text saying next okay then we can go ahead and get this check to see that this builds which it should then as always once we change something we want to go back and make sure that still looks okay so we can see that as we play to start our little canvas we see the bottom button comes up and that looks a little better before only the text that kind of worked as a button now the whole thing works with a button it's a little bit nicer anyways okay so that's still working fine now going back to our welcome view now that we made this bottom text just a text again just with a couple h stacks and some formatting we can go ahead and use that at the bottom of our welcome view so we can go ahead here and add in our bottom text now when we put in our bottom text we want to say something like uh let's go we can see it showing up here okay now this is just text right now it doesn't particularly do anything uh we want this to do something we want it so that when we click on this something happens now previously the way that we've seen how to use swift ui for that is by using uh just buttons like we were just taking a look at but swift actually gives us a really powerful tool from transitioning from one view to another view and that concept in general is called navigation like if you are on any application in your phone let's say that you click on the link in facebook or instagram or whatever and something else pops up and you have like a little back button there's a really easy default way to get that kind of behavior in swift ui and that concept is called navigation and so the views in swift are called navigation links and navigation views a navigation link is just like a button but it's a button that has a special purpose of sending you to some other view so instead of this just being a bottom text we can wrap it inside of a navigation link which it says here is a special view that controls a navigation presentation so this initializers look fairly similar you've got you know labels or titles in this case we want to label because we have our own view that we're using not just text and we want here to be uh showing the destination as well so this destination is where should i go and this label is what should i look like so we can go ahead and make this the same bottom text let's paste that in from here and then our destination we say where should we go well we should start a game view we should go to this view right here once we start now if we look closely it's a little small but you can see that this doesn't look like a very promising button it's kind of gray doesn't seem like it actually goes somewhere that's because any time you have a navigation link doesn't do anything unless it's wrapped in a navigation view inside a navigation view that tells swift ui hey start some kind of stack thing so that people can tap on buttons and present new views on top of it if you don't have that navigation view it doesn't think it can go anywhere with these links it doesn't understand where it should be putting them putting the new views that come up so we can fix that by wrapping all of this zstack here inside of a navigation view and what this does is it doesn't look like anything it's just blank but it's kind of a special meta view that tells swift ui that all of the navigation links inside of it are active and they have a place that they can be presented which is this navigation view we can see now that the button shows up in a much more promising blue and when we start and try to poke around here and click this let's go button now we get to see our next view show up here and we can see that we get this back button for free we actually might want to see i can get rid of it but the default behavior is that you can do this really seamless navigation back and forth which is really convenient let's go ahead also while we're at just add a little bit of padding to this bottom text just to make a match up the others all right there we go okay great so we've seen here that we can add this navigation link which just says where should we go and what should the label be from it and as long as we remember to wrap that navigation link inside of the zstack then we can go ahead and figure it out here and there's a question is this an old video no this is happening right now so uh if you have any questions you can feel free to ask them you are watching this all live and i appreciate your comments from last time i remember we were talking about i think it was the uh changing guesses to uh selection which was a better name uh great uh yes this is also for ios applications so we're still looking at a ios simulator here so this is going to be the final video in the series building out an ios application absolutely uh okay so what we can do then is we can take a look see we said that we wanted to go to the game view which makes sense we can actually put any view that we want to in here so we can go ahead and add in a different view and then we would navigate there just fine if you remember making the controls view before well sure if we put a controls view in then this button would take us to the controls view it's the button and it just takes you to any view that you put in here it's a really neat way to connect different parts of your application so we want to go to that game view so we'll go ahead and put that game key in but you can put any destination you want to as long as it's a view okay so now we can see this navigation works and we have our welcome view setup okay so taking a look at this we can see that we have this back button here now this back button makes sense for the first question but it starts making a lot less sense as we start to go in the quiz once we start answering a few questions like let's say we get this wrong and that's wrong we still have this back button here and it doesn't really do what the learner might think someone's going through the quiz they might think this back button would take him to the previous question it's actually going to kick them all the way back to the welcome screen and that'd be a really bad user experience if you see a promising back button and you're like oh i can just go back maybe change my answer for the last question but then you're kicked all the way back to the main screen and you lose all the work that you just did so we want to make sure that we're not putting users in that spot so we can go ahead and hide the back button uh question what does padding refer to great question uh so the best way with any of these properties is always just like add stuff and get rid of it so let's type in padding for under let's say this one here you can see that we have our bar at the bottom if we type in padding it tells us it's a view that pads this view inside some edge inserts with a system calculated amount of padding what it means in practice is it just puts a little buffer around it to space it out a bit so if we got rid of this padding you would see this kind of shoot down a little bit putting in this padding means that it's going to just be bumped up into the sides a little bit here and actually see how it's kind of even crimped in the sides maybe we want this to be all the way across the bottom because if we get rid of this we can see that the bar goes all the way from the left to the right i think we still want that actually we just want to be up a little bit higher just be offset so what we can do is we can go ahead and just say that we only want the padding to be on the bottom and now you see it fills in from the sides right there so that's one way that you can kind of discover and play around with it the other is you can remember if you open up this panel you can go and look at any view that you have if you stop the kind of put it back in the viewer can mess around click on this view right here okay and then in the modifiers you can go ahead and add modifiers to any view that you like and one of the modifiers is going to tell you you can add in padding and it'll have the same kind of information there that you can go and mess around with okay that's on padding yeah feel free to ask any other questions for things that you're seeing as we're putting this together here okay so we've got our initial navigation view now we want to figure out how to hide that back button from the views that are going up next to it uh and yes with padding oh good question so if you're used to android studio or if you're used to building out applications with ui kit there was a lot of different screen size kind of finagling that you'd have to do and you're exactly right that um in swift ui you just put in padding and the system figures it out for you if you're working in ui kit which is the older ios framework there's a concept called size classes which talks about all the different devices you can have like uh ipads or iphones or big iphones small iphones i you don't have to worry about most of that most of the time in swift ui the defaults work really well for you if you are working in ui kit you still need to be talking about size classes and handling things separately but even in ios compared with android uh in android there are i'm i don't even know like maybe thousands of different screen sizes in ios there's only ever been like maybe 20 or 30 devices that have different sizes so it's a little bit simpler to work with but yeah it's a good question all right for the most part you don't have to worry about handling different sizes and we could even test that here by changing from an iphone to an ipad and we can get to see what our ui looks like now we haven't really been optimizing for it so it might not look fantastic but we can kind of let this load and see what it is yeah that's i was having to deal with multiple different device sizes can be pretty challenging and the ui here might not be perfect but swift ui will get you up and started with a really reasonable interface just from a lot of defaults uh is using geometry reader common uh yeah you'll need to use geometry reader if you're trying to do more complicated ui things that's typically the rationale for it and so here we can actually see some unusual behavior where we have this navigation view and because of that it so puts it like this here and that actually works fine and we can see that the views here we didn't really do anything for them and it kind of looks fine on an ipad it's a little spaced out but it adds a lot of handling for you to go ahead and put in the different components that you might want so and you can kind of see this this is the thing we want to get rid of because it doesn't really make sense to go back to but it's just it is a great note and it's cool to see that you get a lot for free when you're working on ios in terms of sizing yeah all right so i'll put this back to a iphone okay this will reload and now let's take a look at hiding that back button well we can go back and mess around with it in an ipad towards the end if we have time it is fun to get to see how seamless it is to transition between them okay so let's go ahead and take a look at what is our next view here that was the game view yeah exactly uh so we can take a look at the game view here and hide that back button now all we need to do to hide that back button uh yeah of course glad to go through some of that uh yes all we need to do to hide the back button is to add in the special property which is navigation bar hidden and passenger and that means if this ever happens to be in a navigation view it's just going to hide the back button so when we go back to our welcome view and start to go in for it we can see that the back button is gone so super straightforward no more back button so now we don't have that weird kind of confusion where we're looking at the wrong kind of thing okay so that's a great little introduction into what we can be doing with that navigation view and adding that initial setup so now when our application starts we want to have this kind of welcome screenshot first now we've been playing around with it just in the welcome view let's try running it in our simulator just just to make sure things are going the way we want them to be going so when we open our simulator applications can start oh well we didn't get that welcome view at all that's because we didn't add it into our actual tab view which is really where our application begins so we need to make sure that we're not just having it look good in the canvas but making sure that we're from time to time checking in the simulator just to make sure everything's looked up how we'd expect it so instead of this being a game view this can just be a welcome view well come view okay and now when we try to run it now it's gonna be the same in here uh but when we try to run in our simulator we should also get that little welcome screen here we can see we got that little bit of padding at the bottom which we looked for and then we get into our quiz here and we can see that the padding matches great one last thing that we're going to do before we start going onwards is we notice here before we had this color property here we had that same color property that was in the game view and we just kind of copied and pasted anytime you're just copying and pasting something in multiple places you should kind of take a little pause and check to see whether there's a more efficient way to be doing that here we're going to add another structure that's just going to hold all of the colors so we don't have to copy and paste things multiple times uh and to the question in chat adding permissions in swifts i'd by can you explain a little bit more what you mean about permissions well i go ahead and we we go ahead here and start to put together this structure so we'll call this a model it's kind of modelish we'll call this a game color this will just be a view game color and a game color is going to just be a little wrapper around some of the colors that we'll need so we'll have a static property here which will just be the main color of application and that will put in this color here copy it for the last time get rid of some of this extra spacing okay and then now we can just refer to gamecolor.name so we can go here back to our welcome view and we can go ahead and call this gamecolor.main ignore safe area and get rid of this and then do the same thing in our game view this is our main game color the advantage of this is now if we want to go ahead and update our game color we only have to go in one place to do it so if we go back to our game color here and we said that we wanted everything let's get rid of this one hypothetically let's say we wanted a different color and we wanted uh make these all point two and see what it looks like we could then run our simulator and get to see what this new color scheme would look like across all places in our application so here now we can see it turns grey well maybe we didn't like that so we can get rid of this one put the colors back to the way that they were before and now we can see that the color scheme is going to be reverted back to this color that it was before so just a way to centralize the different colors that we have in our application okay with that now we can focus on that last task we have of once we start our application we want a way to finish it users should be able to get through the quiz get to see how many questions they got right how many questions they got wrong and maybe an option to start the quiz again because right now we get to the end and we just keep clicking next and nothing happens and our application broke we're gonna leave a bad review no one likes that so let's go ahead and start adding some of that logic and uh yeah let me do let me know if you have other questions about permissions uh in general i guess what i can say is that you have uh you have to go through a little bit of setup to get an expert account when you're interested in pushing things up to the app store if that's kind of what you mean by permissions uh otherwise if you're just working locally you can just set up pretty pretty easily just by downloading xcode and getting started on your environments and it doesn't need any special permissions to get started okay so let's go ahead and add some of this logic so we can find out how many correct answers we get how many incorrect answers we get at our final screen so we're going to start this here by going to our game and taking a look at how our model was built out before so we know how many selections we know what selections have been made as learners are taking and answering these questions we can see that as like when they out answer python or something here we can see that this question will be kind of hashed and saved in this dictionary and then it'll be stored with number index number one which is the answer that they made for this question here so we want to go and figure out how many of these they got right and how many they got wrong that's something that we know just from our selections dictionary we can go through each question and then see whether or not we have a uh what is it see whether or not the index that was selected was the correct answer index and go from there so let's go ahead and start to write that function oh permissions for that kind of stuff yes that's an excellent question uh you do need to add permissions if you want to have like gps for example uh if you want to be doing some kind of user tracking if you want access to camera roll there is some extra setup that you'll need for that we we're not going to cover any of that for this quiz since we won't need those permissions uh we do not currently have anything on that in the upcoming skill path which will be released later this year we're going to have a little bit of content around accessing the camera roll so we're gonna talk a little about how permissions work there that's a good question okay so let's go ahead and add that property to find out what are the uh how many of these selections are correct and how many are incorrect i'm just uh using a new type of uh uh swift concept we haven't seen necessarily which is that of tuple because we're gonna have a lot of tuples around in this implementation so we're gonna call this something like a selection count something like that and so inside of our selection count we're going to want this to be a tuple which is a a type that holds two things that's going to tell us how many things we got correct and how many things we got incorrect so we have a tuple here that shows how many things we got right and how many things we got wrong okay so when other users like our review model other people calling our api like our view model rather are trying to figure out what we got right or wrong they'll be able to look at the selection counts and then go from there to figure out how many are right how many are won okay so the first thing we're going to do is we're going to make this count property which is just in the same form that we have up here we have correct and incorrect answers and this is going to start with zero correct and zero incorrect then we're going to go through each of the selections that the users made and if there is a correct one we're going to increment this and if there's an incorrect one we're going to increment this so we're going to go through each question and the selected index in the selections and if the questions if the selected index is the same as the questions correct answer index then we're going to go and increment the correct count by 1. if that's not true then we're going to go ahead and increment the incorrect count by one then we're going to return the count and so the way that we just went through that is a great way to be writing some idiomatic swifts uh unlike some languages where you just kind of want to crunch everything up and have as few characters as possible swift wants to be conversational kind of language where the code as you're writing it is kind of the same way that you'd explain it and so that was what we did there i'm talking about very readable sentences so you're welcome to have one line or ternaries and all other kinds of things under code but for swift especially i like having the code try to be conversational so it's really clear about what exactly it's doing as you're running it so we now have the selection count property inside of a game if you ask it hey what's your selection count it'll give you back a tuple which is a object containing the correct and incorrect guesses uh that it calculates by looking at all the selections finding out which ones were correct by comparing the selected index versus the correct answer index and then seeing if that was right or not uh cool so let's see how to use in a second and then question is there less content for ios than android it's hard to find solutions um i don't think there's less content i think it's a little more niche just because the the ios markets are really big in like the us really big in china that drives a lot of app store revenue but it's less big in some other markets so it's not as globally relevant but it's super relevant for markets where it's really large so you can definitely find some great content about ios we have some on our site at codecademy and there's some other good resources as well where you can go find some more ios contents okay so we have our selection count here what do we do with it well let's go ahead and then go to our view model and we're probably going to need to use it here so let's go ahead and just add those in preemptively to just get the correct guesses and incorrect guesses so it's going to be correct guess or selection excuse me selection count which is just the game dot selection count dot correct and the incorrect selection count which is game dot selection count not incorrect so now we're just tying things together so our game knows our view model knows and now we'll be to be able to access it when we need it when the time comes so now that we have that hooked up from our model and view model perspective we can go ahead and start building out our view to show what are those results we're going to need a new view for that so we can go ahead and get started with a new view let's go ahead and make a new file we'll go ahead and make this a new view and this is going to be the view to showcase what the results are so we'll call the results view this is an eminently reasonable name for such a view and now we want to go ahead and build this view so that's going to show users after they've come to the end of their quiz how well that they did what are the results so we're going to start by doing that same trick with that z stack so we're going to go ahead and make in the body a z stack and then give ourselves a game color dot main dot ignore safe area and that will give a nice background to begin our review right here so now we want to add a little bit of information uh maybe what percentage right they got how many were right how many were wrong and then a button at the bottom that lets them restart and take the quiz again so we can start adding those in let's start by adding in the body let's start by adding in that final score so let's put maybe a v stack in here and then let's go ahead and add in a text that says final score that's going to showcase what the final score is and maybe let's put this in an h stack so that we can have some other thing next to it so it can have final score and then we can have whatever the final score actually is like question mark percent we don't know uh good question what does z stack stand for so we have v stack which stands for vertical we have h stack which stands for horizontal and we have z stack which stands for threedimensional in the zaxis the analogy breaks down a little bit but the idea is if you imagine a kind of uh like a plot where you've got an xaxis a yaxis and a zaxis putting things on the h and then h stack puts them next to each other like we see right here putting things in a zstack puts them on top of each other like if we put down another text here that says hi change that in a second oops then we have some text here and a z stack means we're going gonna put something behind something else so if we put text here behind you made that nice and big we can see that a z stack here kind of puts things on top of each other yeah thank you for the correction they're doing that so a v stack or when elements are like on top of each other like one is at the top of the phone and then one's lowered to it and a z stack is when they're like nest like behind it so it's like if you could look and poke your finger down deeper into the phone that would be going in the z direction so you can see that adding things in the z stack kind of makes them weird and overlapped you wouldn't want to do that with text but it's great with things like colors because then the colors are just behind everything else to kind of recess back from it okay so now we've got our v stack here we've got our eight stack which says what our final score is going to be make this a little bit bigger maybe uh title two and we don't know we don't know what question mark percent means necessarily so we're gonna have to figure that out then we have our car how many they got correct and how many they got incorrect here so let's put a little bit of space ooh that's a lot of space remember spacers take up as much space as possible here so that might be a little bit more than we want maybe just put a little padding around it and that could be enough that seems okay so then here we can go ahead and then add in the uh correct and incorrect selections so this is going to have something like how many did we get right and how many did we get wrong so we got question mark right and a cool little trick you can do in xcode on a mac if you push down control command space it brings up a little emoji menu and you just use emojis anywhere you have a string or text you want to show so you can have this many correct and then you can have question marks that are ctrl command space incorrect neat fun fact about swift uh emojis are perfectly good variable names for some reason so you can make a variable called like duck and this is actually fine this compiles so if you want to have a lot of fun with uh variable names you can go with that can we make grades depending on the score in the game yeah we can definitely do that that is uh that is something that we can let's put a placeholder for that yeah i wasn't planning on it but yeah let's let's do that i like it uh so let's have a final score below the final score let's have like a letter grade or something what matches the school for something letter grade and we don't know what it is yet but we can go ahead and add that in let's resume this let's add some padding to all these adding and maybe these don't need padding but that one does okay so we've got our final score we've got a letter grade which will be something we'll have to figure that out and then we can figure out how to add in all of these bits content here fonts great okay so we've got kind of the boilerplate for what this looks like here let's just go ahead and then give these a font as well maybe system 30 and a little bit bigger okay all right so this is our final screen and then we just need to add that bottom button to showcase there but in chat if you have any other ideas anything else you'd want to put on the screen you can figure out how to dump it in uh is there a unicode type number associated with emojis uh there is there's a wide and wondrous world of how unicode and swift work together uh if you really want to go deep you can look into the unicode scalar planes uh but yes all of the emojis all have a unicode value they are not an ascii value uh but they do have an associated unicode character alongside with them and there's lots of depth you can get in there with combining diacritical scalers and all sorts of nonsense uh swift has really robust handling for unicode so you can definitely go from different characters or strings into unicode and i think the name for that is let's just check here uh let's say equals if you make a character say there's i believe there's a type a unicode scalar which is like the number associated with something and then you can look at the emoji let's say a duck and i believe see if you make a character from this and then get all of its unicode scalers and then look at the first one then this will show you what the number is that's associated with this duck here and that has to be more so if you want to mess around you can definitely do things with lots of unicode scalers uh it is swift has robust unicode uh the handling and you don't need to specify anything else it's just there out of the box okay so what do we do now we've got our model here we want to add that last button so we'll just do that at the bottom so we'll go ahead and add that navigation link so we've got our zstack now let's add a spacer and then maybe you want to put this in the middle so do put this between two spacers or something and then we'll add in our bottom text which will be here bottom text which will say retake quiz quiz k okay that's pretty good so we can always tweak what the ui should look like that's something that you can always go back to but this should be a good place to start now we can pad this a little bit here okay and we only want the black padding all right there we go so now we have to do is connect this well we gotta fill in these question marks depending on what the user how well they did on their quiz so how can we do that well we can go ahead and give this thing its own view model and then do all the hard question answering in there that's usually a good tactic when you're building uh views using what we talked about last session in model view view model design is if there's ever kind of work that someone has to do just put that in a view model and have that do the work for you so that the views can be nice and simple so we're going to want to make a results view model which is going to be able to fill in all these question marks so let's go ahead and add in a new file which is going to be a results view model just a regular old view results view model a regular file not a view at all uh it is a view model so it's just kind of a regular swift file we're going to name this results view model before our game view model we made a class because we had to have like things that were observing and changing with it this is going to just be static information you get the score you get we show showed you and you're done so this can just be a structure because that's going to be static our results view model needs to know the incorrect selections need to know the correct selections uh and we can actually make this match why not we can have this be like a selection count we can have this be like correct incorrect just to match kind of the same way that we had displayed before so it's going to have that tuple selection count then we're going to need to find a way to answer all these question marks so let's do the same thing that we did a little bit last session where we're going to pull it up side by side bring up our results view that's holding down the option key and then clicking on it to bring it up here and now let's delegate all of these questions over here so we can have like something for percent text final percent text and we'll go and this will be the final percent text and then while we're at it let's just give this a view model now so this will be its view model is going to be a results view model like so and then i'm just going to temporarily get rid of this here and that's fine let's just add our selection content so it needs our view model which takes the results view model which takes a selection count so we can just say uh just play with someone who's gotten three and one or something uh so there's a question chad the swift support sql or my sequel uh yes there are different wrappers around so if you want to look into that you will need to look into how to use different packages to out of the box usually like the tool is called core data which lets you kind of store and work with different databases and tables and whatnot you can absolutely use different like sqlite databases for it you'll need to look into either swift package manager or into cocoapods for how to install those and get those set up okay so let's go ahead and keep working through this here so we've got that final percent text view model dot final percent text we know that we're going to want to have our letter grade so letter grade text which is going to just be this here text view model dot letter grade text what's this combining button this one before uh good cool all right so then we can do the same thing for here so that's going to be our correct selection text our incorrect selection text text and that's all fine so we'll go ahead and just bring this here so we've got our correct selection text and our incorrect selection text so this is going to be our correct view model dot correct selection text and view model dot incorrect selection text great so all we did here is we just said well we know we're going to need the number of correct and incorrect selections so let's go and put those in the view model let's let the view model worry about all of these and now our view just has to worry about how to display this so that's how you can be separating out a lot of the considerations when working with the mvvm architecture okay so now we can just work on this file here and figure out well how do we answer these things let's start with easy ones the correct selection text we already have that uh visual basic videos uh i will look to see if we're getting any of those made uh maybe we have some in our catalog i'm not sure but uh that is that is fun as well okay so let's take our selection count we'll take our correct guesses here selections then we'll take our incorrect selection text which will be our selection count dot incorrect like so and we can see that if we pop over to our results view and we resume this should be previewing something with three correct things and one incorrect thing so it should start popping up here yep so we've got three correct one incorrect great so we can go back to our results view model here and then figure out that final percent text so we want to calculate the percentage well to do that we're going to take the number of uh selection count dot the correct answers here multiplied by a thousand divided by the number of total answers so that's going to be the percentage here so that's selection count dot correct plus selection count selection count dot incorrect and that's too many parenthesis now this looks good okay so now we can see that we have our it's divided do that swift actually does care about white spaces so you have to make sure that you're adding those in evenly balanced okay so now we've got our final percent text let's go back to a results view and see if that looks good it's thinking great 75 that looks right and now let's find that letter grade uh so let's go back to our results view so for a letter grade uh we wanted to figure out how to get that standard like you know 90 to 100 as an a 80 to 90s b so and such you can always add some more there so what we want to do is take this final percents so we want to get this um maybe just like a final grade so let's just make that as a private property so private var uh score this is called a score which will just be an integer and the score is just going to be this part here let's call that the score so then this can just be score percents and now we have the score that we can use again that's a great example of i didn't want to type this again out so we just make it its own property and now we can use it now uh a great tool that we can use for this is going to be a switch statement and i'll see if we can remember the syntax for it here uh we want to switch on the score and then we want to return different things in different places so if we have the letter grade text here okay so if the score if you underscore where uh let's see very much syntax here case x where so we want to figure out the range between 90 and 100. i'm gonna have to double check this index on this here i think it's something like this here where we have i know we want to put the range in and then we can say the thing that we're trying to return let's go ahead and double check that syntax though so all switch statements need a kind of set of cases and a defaults here and for the default we'll return let's just say question mark because that's that's a weird grade i think this compiles okay great so now they keep changing the synthetics of this so if they get between a 1900 that's an a if they get between an 80 and a 90 that sounds like a b if it's between a 70 and an 80 that's a c and these are the us grade systems i think that different kind of all different countries have different systems here so if you want to put this in you can definitely replace it with a different style uh case 0 to 60 would be an f like so okay and then that's our letter grades let's go ahead and take a look back at the results view and see if that worked we can resume and it just says c great so that's correct it's 75 we can test it to see make sure an a works let's say they got a four that's 100 that looks like question mark what'd we get wrong well if we go back to our view model here you can notice that we said up to 100 but not including 100. so that's why it's really good to make sure that you're looking at those edge cases so that you can include 100 as an a because you know you wouldn't want to tell someone they got a question mark if they got a hundred percent great so they got an a great and this is not that we happen to have four questions on our quiz this view is very powerful it supports any number of questions maybe there's a really long quiz and it looks like this this looks like a failing grade probably but we'll see yeah so this is 21 and you can see there are a model of justice and shows that here but if it looks like uh maybe we got a bunch more right then they got wrong they got 104 right they got 20 wrong that's an 83 that's a b so it looks good so we can see that our view model is correctly giving what we should have from here uh and maybe we also want to have to say like letter grade or something too so we can we can play around with our ui make it look how we want to here so we can make this say like uh letter grade and then this can be the letter grid text like so great so you can always play around with the ui and the the neat thing is once you have all the hard stuff although the hard work happening inside of the view model it's a lot easier to move the views around and you don't have as much you have to worry about changing so uh we can go now we've got our view model working we've got a results view that's showing the results the only thing we have left to do in our results view is hide the uh view and then get back to it can we show the beginning of the results oh sure also all of this if you look at the top of the chat you'll find a link to a github repository and if you go there there's a live stream for branch and all the code that we're talking about is up inside there um but yeah this is the beginning of the results view looks like this up here actually this is pretty much all of it this is that's all the results here it's not a very large view because you're able to take all that hard work and give it over to the view model yeah absolutely uh great so we've got our view model here perfect thanks for just putting that branch in uh now let's go ahead and get that bottom thing here that takes us back to where we want so we saw before that we can use a navigation link so we can go ahead and add a navigation link so we'll add in a navigation link and it'll be pretty much the same as we saw before we'll have that destination which will take us back to uh maybe our game view back to the first question and then the label will just be this button text here with its padding okay and now notice again ooh in our preview this looks grayed out not super promising uh it's going to be in a navigation view and the rest of our application and if you want to preview that you can just go ahead and add that preview in here by just putting it in a navigation view in your preview and that way it turns blue you can click on it and then you'll see where it takes you so this will take us back to the beginning of the quiz great we can even have it take us back to the welcome view if we want it's wherever you like okay so this takes us back great we answer our questions great but we still don't have the last bit of connection we need from the uh last view here over to the last uh into the results view from the last question of the results view so there's gonna be a little trick we're gonna use to make that happen we're still gonna use a navigation link but we're going to be using the slightly clever kind of way so let's go back to our game view now we haven't really been navigating in our game view we've been showing different uh sorry we've been showing different questions but that's just because our game has been changing uh can we add the time someone answered in yeah that's a great feature let's add this in first and then see if we have time to add in the uh some time stamping information because i'm pretty sure that'll be a neat thing to add and i think we have our model set up for it okay so as we answer questions inside of our application oh keeps freezing okay so we're going to answer questions we get next we know that this game over thing is triggered but then we don't have anywhere to go what we're going to do to navigate is we're going to put a silent hidden navigation view or navigation link excuse me in the background of this that's just waiting for the game to be over and then it'll immediately just kick in and navigate over to the results view so we're going to do that by adding in a background to this here and that background takes in any view so we can make it a navigation view and we'll a little tricky here a navigation view now this navigation or navigation link excuse me okay now this navigation view is gonna have a lot of stuff in it so let's just make it a separate property here so let's just make a private var navigation view which is some view and then we'll go ahead and put that in here and this is a maybe this is a results navigation view and this is a results navigation view doing that should be navigation link views contain the links but the actual things that let you go somewhere else are the links okay so now we can add our navigation link our navigation link we see has the special is active uh initializer that we can use and what the is active one is going to do is it's going to take us to where we want to go which is going to be the results place and it'll do that when something becomes true the label that we're going to want to use here it's actually just an empty label we don't want to show them anything or an empty view we just want to go there as soon as it's done here so we want to navigate over to somewhere the results view when something is true the reason this says dot constant is because it's really a binding we saw a little about bindings when we're going over control views that have that kind of dollar signee syntax we don't really need to use all of that we don't need to go back and forth at anything so it recommends which we can just use here of just using this dot constant which means when the view reloads anyways check this and see if we need to navigate so the thing that we're going to check for is to see if the game is over and we can add that property into our view model we have our guesses our advanced game state we could also just add that little property called game is over which is just going to tell us whether or not what do we call this game is oh we might need to expose it there it is so it turns out we need to know that so that can't be private so then we can go back to our view model and just go ahead and pass it along here all right so now we know if the game is over or not we can go back to our navigation link and then we should navigate if the game is over where should we go we should go to the results view the results view needs a view model so that's one of those results view models yeah just for a second now what does that view model look like you just start asking it what it needs and it tells us it needs a selection count of correct and incorrect answers well fortunately our view model has a third email has it has a it can have a selection count and so we can just give it one so we can see our view model here has oh it has a correct selection count an incorrect selection count let's actually just make that selection count i don't think we need it for anything else here so we changed a little bit from this here we'll just make it a selection count and then this is game dot selection count just make life a little bit simpler and then we can go back in here and then just pass in the view model selection count so we're just passing over from one place to another now if we needed to break that down we could break that down and look at those other properties but this should be fine for now okay so now this is just kind of waiting in the background for the game to be over and then it's going to work to rebuild itself remember for previewing navigation links need to be inside navigation views to work so we can wrap this in a navigation view to check to see if it's working as we start answering questions we make our selections we answer things and once the game is over becomes true then we get to be presented with the results screen well we didn't do super well on this quiz but we can always retake it to go back to it because we have our back button kind of down here we can get rid of this back button using that same trick we saw before and that results view so we can go in our v stack and we can go set that navigation bar hidden to be false uh this is probably a lot so we can just put this back here and then we can just try it in our simulator to make sure everything's hooked up the the one last thing that we'll try to add is that time feature uh because i think that's a nifty bit of functionality that we can put into it so let's check to see our quiz is working and we answer our last question oh no we only got 25 oh the back button's still there so it looks like we probably put that a little bit too low so let's go ahead and make sure that it is put in the correct spots to maybe it's vstack oh i put it false that's why okay navigation bar hidden should be true not false i think false is the default so we forgot to change it okay and then we can check to see in our simulator here uh let's get some of these right huh uhhuh uhhuh all right better we see the back button's gone so if they want to retake the quiz they have to go back here to retake it great all right last thing that we'll try to add is that timestamp uh we'll do that here by just adding in the time so let's say start time which will just be a date so this will just tell us like when we started and then as soon as we get to the results view we can go and just grab what the final time looks like here so resultsviewmodel maybe also wants the uh let's do game start time or something like so then everywhere that once needs a game start time we can actually just specify wow let's pass it in so let's say game start time it's just right now here we need to pass in the game start time we'll go ahead and grab that from the game right it has a start time we'll get back to the view model so have our start time start time game start time just game dot start time uh and then our view model can know when the game started and then be able to calculate from there there's a bunch of ways you could break this down but this should work fine uh where's our error ah okay so the game start time is going to be the view model dot game start time then we can go inside of our results view model we know what time the game started so we can say that the uh game end time is let's say for convenience whenever we build one of these the game is over that might not strictly be true but maybe it's true enough uh actually we can put that here let game end time it's another date again lots of more clever ways to do this but this is just kind of a first pass of how we might add this feature in so we can go and add in not just start time but also the end time and then we can do that inside here the game starts then but the game ends right now and now we can go ahead and go in the results view model and make some kind of like uh what do we want to say how long it took total game time text which can be our difference between the game start time and the game end time so we can do game end time dot uh let's do see how we subtract distance two great our time interval from this may be better time interval since game start time okay and then let's just show this and see what let's see uh see what this looks like so this is just one showcase of what you can do with morph with that to add more features into an application so we can go back to results view we can just add our total time maybe somewhere at the bottom right here total time and then just display that and that's in the view model let's take a look what this looks like okay this opens here the game's starting we're taking our time we're answering questions finding some computer bugs and here tells us that we took about six seconds on it so we know that this gives it in seconds so we can just go ahead and add that in and then we can probably trim this a little bit maybe we can just round it to a nearest integer so we can just go ahead and make this a in the results view model you can just go ahead and take this and turn it into an integer like so so that is going to go ahead and just crop it and then just say seconds lots of different ways you can break down time within things but this is one illustration of how you could be adding extra features and if there's something that you want to be tracking so we let's get let's get them all right this time binary objective c moth and tim great and now it tells us we did in seven seconds and that seems to be how long it takes here let's see if we just let this sit for a second if it takes a little bit longer okay so now let's go ahead and do it again we sat for a second at the beginning and now it tells us it took 12 seconds so it's working correctly and now we have the time added to our application as well and that was a great question for an extra feature on that because it really illustrates once you have your model set up it's it's easy to see where things need to go and you can add in new features relatively quickly now this may be leaked too much information we could be changing how we're putting this around we could be storing in different places or all other kinds of ways we could be adding this feature so that's kind of the great thing about development is you have so much control over how you're choosing to build things but this is clearly a working prototype about how you can add in a time taken feature to your application so you can build on this to add any other information that you're interested as well it's another good idea of a future request you can take a look at later which is if you edited a question maybe you could go back and change it again but uh we probably won't cover that in this session but if you're interested in trying to figure out how to add in other features like uh changing questions or changing responses or going back to other questions you can definitely add those kind of features in adding in other question types like you know fill in the blank questions and text questions there's all kinds of extra features you can be going and putting on from here so that's what our final state of our application is going to look like from here it has been a pleasure getting to work on this and kind of talk through some aspects about ios developments with all of you here as for next steps we have the link in the chat about where you can find all of the code that we've worked on during this live stream and all the live streams previously codecademy has many other live streams you can find on the same channel here if you want to look back to our history you can find some great content around some data analysis some data visualization with p5 and some other great bits of content and we're going to have some more live stream series coming up ahead so again thanks to everyone for joining in now thanks for everyone who's watching in live later and then if you have anything else you want to ask us as part of it you can feel free to go to the codecademy forums just on our platform or hop into discord we got a great discord community of people who are happy to answer any questions you have around ios development or anything else that you're looking at on codecademy platform or just in programming in general so thanks everyone i hope they all are ready to build some more great ios applications and looking forward to