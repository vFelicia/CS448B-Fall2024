hi this is Pat twopoint with code Academy I am a Washington dcbased web developer if you're teaching yourself to code it can feel daunting and it's normal to feel a little bit confused I would know that was me 10 years ago so in this video we're gonna talk about what kind of time commitment we're looking at if you're trying to teach yourself to code what are some of those milestones you can expect as you're learning and what are the realworld applications of what you're trying to learn hopefully by the end of this you'll have a much more realistic expectation for what you're getting yourself into and should feel a little bit more at ease let's get started so to start are we there yet only kidding but learning to program is mammoth and one of the most helpful pieces of advice on how to tackle this came from my mom the only way to eat an elephant is one bite at a time thanks mom learning to program isn't too much different from any large challenging task there might be more bite she needs to take depending on where you start but there's no magic to it there is no shortcut hacker trick it's just one bite at a time well let's get after it how long will it take I find learners tend to fall into three buckets and the time commit for each is different casual learners want to pick up skills one at a time no rush and might not be sure what to learn so they're just trying new things I'd budget a decent runway for this if you don't have any where you need to be the career advancement learners who recognize that coding skills can help them do their job better they have a place in mind where they want to start which is helpful to narrow down how much time it will take I don't want to give any hard and fast times but for career advances a year ish seems to be what many learners settle in on last there are career changers who want to code all day every day at a pro level these learners tend to be more driven and focused on being a programmer so it's like a gym the more consistently work on your skills and the more intensity brings the best results as a rule of thumb I'd recommend a realistic time commitment you would probably see between five to fifteen hours per week give or take it's tough for me to put hard hours on something as complex as learning to program when everyone's situation is different but I also know some learners just need a number to know if they're even at a place where they can do it realistically I'd say something is better than nothing and if you can devote more than that all the better if your goal is to launch a new career and you're doing this parttime give yourself at least a year to get to a place we were competitive in interviews a big factor though in how long learning its program is going to take is what intention you start with what I mean is it could be a frustrating place to start with I want to learn how to program why can that be frustrating well that's like saying you want to run a race do you want to run a 5k a half marathon full marathon the urgency length and intensity of each of these goals will necessitate a different approach strategy and timeline so what's a more helpful starting question let's try what type of work do I want to be doing then we can pick technologies that will help us accomplish that see one of the most overlooked yet obvious facts about programming in my opinion is that that all this tech that we're trying to learn was created because someone somewhere said this sucks there's got to be an easier way and if you look at it that way technology really is just an easy way of accomplishing specific goals so it can be a tricky way to begin your path if you're doing what's hot and popular right now if you're just trying to learn stuff like I had with that Factory and what you want it to be doing you'll feel like you'll never apply it we're still you might not and then you'll forget it having wasted that time as well so when will you use the skills you learn on code CAD mean this is the million dollar question I get from learners and it's one of my favorites to answer my answer though is a bit chicken or the egg so let's explore I always tell my learners to work on stuff they're interested in and move away from tutorials as soon as they're feeling comfortable it's true you do need a basic understanding of how things work but there's no substitute for just building stuff in the real world programming solves problems but if you don't know what problems you're trying to solve that everything you're doing is technically theoretical the only way to get practical and apply what you learn is to get practical and apply what you learn for yourself in the real world but how do you program what you don't really know how well fun fact being a good programmer is not about how much you know it's about how well you learn really good developers often don't know what the challenges are demands of their next task will be we don't really memorize really good at looking stuff off and being curious we often joke amongst ourselves that our job is sometimes professional Googlers in fact that's why programmers are hired they're hired figure it out not to already know it it true that we leverage our education and trainings but most of the time were having to solve issues that are unique enough to our situations that we rely on looking stuff up and making adjustments based on our familiarity with the technology in fact I can't remember the last time I was fully prepared for my next task today is the question when will all this be practical well as soon as you want it to be I found there are some milestones you can look forward to during this learning process your first aha moment where something clicks that you've been struggling with the first time your code runs without any bugs or errors the first time you know what's wrong and why the first time you're not afraid of working in the terminal you may or may not hit any of these and that's okay either way as an example of some other concrete milestones for web developers they might be the first hello world or equivalent app submitting the code in the terminal and it runs properly learning the basics of HTML locally hosting the HTML in your terminal or on the code cavity platform learning some CSS and linking it in your code learning commandline and pushing it to github building a website from scratch from beginning to end using a framework like react angular review using an API doing some backend work of your own some realworld milestones some learners imagined are making a website for a friend organizing your personal file system and desktop without ever touching your mouse crafting an email campaign in HTML and CSS at work updating the styling of your company's homepage being able to use the dev tools in chrome to inspect how website works and debugging your code or praising your site's performance this is Pat with code Academy thanks so much for watching did I answer all your questions do you have any others leave a comment below and subscribe to this channel I love responding to learners comments and if you want to get started in programming come on over to code Academy and we'll help you get started I promise your friends will be asking you how you did it in no time