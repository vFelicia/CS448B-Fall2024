looks right it's saying that it's live on custom live streaming service let's give it a couple of seconds oh we're live i think cool so welcome everyone to our last session of curcamilife for creative coding um today um i'm well obviously i am back my name is juwan i'm a curriculum developer here at academy and we also have nick today hello um and we'll be going through today we'll be going through audio visualization so we'll be um using another p5 p5.js addon library called p5.sound.js um just to quickly recap on some of the things that we've been going through in the past seven weeks eight weeks including this week um what we've been doing during our um academy live for creative coding series is that we've been going through some of the content in our learn p5.js course it's a free course on our platform and we've been going through some of the topics that are mentioned in each of these modules during the weeks of livestream so we've gone from you know creating really basic simple um 2d primitive shapes on the canvas and then we made those um shapes move on the canvas using frame crown and all sorts of different techniques and then we also um took a look at adding um inter interactions using mouse and keyboard interactions to our sketches and we also looked at how to add images and videos to our um b5.js canvases and the last two weeks were a bit special because alex um he also demonstrated how you can visualize fundamental programming concepts with b5.js so we looked at how to visualize objectoriented programming so we created these like classes of visual elements that we can use to create multiples of on our canvas and we also last week looked at how to visualize the nearest kneighbor algorithm so this is going to be like hopefully a grand ending to our um livestream series for creative coding we're gonna look at what's called audio visualization so what that means is that we're going to first look at how to load sound files to our canvas um so we're gonna be also um using the um p5 web editor to do all of these things so first you know where to look for those sound sources free and open source um sound sources and downloading them and uploading it to rp5 um web editor and then we'll look at how we can play those files in the canvas so starting from like you know really basic things and also maybe taking a look at how we can use microphone input as well and then we'll also move on to then you know really looking at those um sound files as data and doing you know visualizations of those audio data so really you know it's like a really interesting cross between um data visualization because like the data that we're going to be using are going to be audio data like you know audio can be we're going to talk about this in a little more indepth but you can um see audio in different forms of data depending on what values that you look at that's related to the audio file itself or the sound that you're hearing at that moment so that's kind of sort of the plan and we'll take it um from the very beginning and it will build everything up does it sound like a plan nick that sounds great to me the final participant okay cool um so i've shared my screen people should see this really blank um p5.js web editor view this is the first thing that you get when you create a new sketch on the p5 web editor um we've got our canvas 400 pixels by 400 pixels it's just like a personal preference i just like to start off with my canvas being window width and window height window window height so that we can use the full extent of our preview window in here um and the next thing that i'm going to be doing is basically before i get like really go into creating my canva my sketch today i'm going to go into my index.html file in here so if you click on this arrow key you should be able to see all the files inside of the sketch um that this preview window was running and then you will see in line um this is i think five there's a script tag in here um and it's so the inline four the script tag in here um is importing the p5.js library the core library into our html page that we're able to utilize all the components of the p5.js library but in la in line five you will see that there's another library that is automatically imported in here for you called p5.sound.min.js file so what this file upload does is that so b5.js library itself this is the core library most of the times if you're not going into the domains of the sound you you won't have to think about you know this additional line that you have in here but what this means is that if you have this um file imported as a script tag inside of your index.html file you should also be able to use an additional library so if we go to the p5 um js the the organization or the documentation website and you go to references at the very top it should say something like can't find what you're looking for you may want to check out b5 that sounds it's because the um the sound library is what they call an addon library that works on top of the main core p5.js the library itself and they've also got a separate documentation page so when you are working with sound with f5.js this is like an important thing to keep in mind that all the references to everything that we're going to be using in our live stream today you're not going to find it in the main reference page you will have to click on the link to go to the b5 sound library references so that's something to keep in mind in here and if you're also if there are some people who are working locally that means that if you only what i mean is like if you have these you know um if you're working and creating p5.js files or projects locally on your own computer you're also going to want to make sure that you have this sound file included in your index.html file as well so having said that i think one of the good reasons other good reasons of why you know working on the p5 web editor is a good thing when it comes to sound is because um p5 the the p5 web editor will take care of a lot of um autoplay issues and like you know blocking of auto playing sound that kind of stuff it will take care of it for you in the web editor itself if you don't know what i'm talking about and you've never experienced but you know you know websites blocking autoplay of video and sound you don't have to worry too much about it right now if you're going to be working on the b5 editor itself um so just but i did want to like make sure that i mentioned that just you know to make sure that if you're working locally and you're saying you're thinking oh why is my sound file not working chances are it's because of the whole autoplay issue and there are multiple ways to resolve it but i think it's a little bit out of the scope of the live stream itself and we're going to focus on using um sound files in our b5 js canvases for now so first things first if i'm going to be playing with sound and the sound files that means i need to find a sound file to work with and um you know i there's a number of different things that you can look for i might go to is um i go to a website called free music archive and they have all of these um open source and royalty free music you know i generally go to search and then go to charts for all time and then pick something you can also listen to it because my sound is working right i'm not hearing you're not hearing anything let me make sure my sound should be shared let me share it again there's like this one in particular this particular file it starts with a really low base so let me actually try another one you heard that oh yeah okay cool so you can download any of these um sound files from here i'm gonna go ahead and say anderson agree and then i have the sound file downloaded in here so with the sound file downloaded somewhere on your computer in order for you to import in something external to the p5 web editor what you will need to do is you will click on that um you know sketch files directory again and if you click on this um arrow down key in here oh i see a lot of people on chat telling me that they've heard it that's great and then if you click on this button there's an option for you to upload a file so if you click on this and i'm going to be navigating to my finder which you will not see um being shared on this particular screen sharing because i've not shared um the entire desktop but that's okay and i'm going to name my um sound file to siesta which is the name of this particular um song because you want your sound files to be shorter because if your song your if your files are longer that means that you have to type in the whole thing making sure you know like the charac the spacebar characters are accounted for and all that kind of stuff so i've named my the download uh renamed it to siesta.mp3 i can drag and drop that file in here and you should see this progress bar happen and only when you see the name of the file appear on the left um left sidebar here is the um a file fully uploaded so some people do make a little you know obviously something that could be improved on in terms of the design of the v5 editor tool itself but um some people do make a mistake of you know oh they see this progress bar happen and they close the upload file uh window but they will see that this file won't appear in the sketch files that means that it's not uploaded properly so just make sure that you give it some time and then it shows up in the sketch files directory in here and once that is done the file itself is has been uploaded to this particular sketch itself and now it's ready to be referenced to and ready to be um imported within our p5.js canvas for me to able to use and play so the first thing that we'll do is basically we're going to use the sound file that we've uploaded in here within our canvas and then there's multiple things to note in here basically the function to use to upload our sound file is going to be the load sound function but there is this um this function node sound function isn't in our setup function right and notice how when you know a blank sketch is created there's only setup and draw it is in another function called preload so based on the name of the function nick what do you think the preload function does does it happen before load it happens before something and it happens before the setup function so what the preload function is that um it is most commonly used to preload media assets so that includes you know image files video files and and also audio files and you will want to use the preload function to make sure all of your assets media assets are loaded even before the set of setup function runs for your p5.js sketch so that's the thing that we're going to be doing in here so i'm going to also do it above it doesn't matter where you define your function your preload function but just for the sake of you know me having a logical structure in my code i'm going to put my function preload above my setup um and then in here well before all of this i'm going to create a global variable called sound and i'm going to save sound to the output of the load sound function which i'm going to give it to the path of the sound file that i want to load in my p5.js canvas so i'm going to call it in this case siesta dot mp3 if your sound file is staged inside a directory if your sound file is called something else obviously you should be calling giving it a different path remember this is the path to the file not just the name of the file itself um sorry um and so once that is done and if you click um nothing should happen except for the fact that if you notice it here the loading will take a little longer that's because there is a media file that needs to be imported and loaded into the p5.js sketch even if we're not using it yet so in order for me to use the sound file by which i mean here the sound file being played in our p5.js canvas is inside of our setup after the sound file is being loaded into this variable called sound i can do something like sound.play which is of which is a method of this particular sound object in here so what that would display method should do is that it should play the sound file only once and then stop after it's being played once if you wanted to do something like you wanted to just keep the sound being looped let's actually go back to the reference in here and underneath you should see some methods of this particular sound file object that you're creating so there's this um play method in here place the v5 sound file there's also pause in here you can pause your soundtop being played at certain times if you want you can also set your sound files to loop but that means that it will just once that sound file reaches the first time it plays all the way through it'll just loop back to the beginning of the file and then go over and over and over again so um you know generally if you're working with like a shorter sound file and you just want to keep you know experimenting with the data you're getting from the sound file itself doing sound.loop may be a good idea just so that you can you know keep hearing the sound and keep using the data from the sound um there's another um type of sound that we can use in our p5.js canvases here we're using this like you know a static sound file in our sketch you can also use a your microphone input to drive any sort of you know audio visualizations that we're going to be creating today for that particular purpose there is it is p5.audio in object um so you can click on this and it's going to um if you've never visited this webpage before it's or if even if you have it may ask you if i you can you want to allow your p5 if you want to allow p5.js.org website to use your microphone input you can do allow in which case it should be using your microphone input i'm actually not entirely sure if i'm going to be able to get this working because i'm my microphone being input is being used by zoom at this moment in time and it doesn't seem like for this particular one it's working let's actually see my continue using access microphone default okay so i'm not entirely sure if this particular example is gonna work for you know the demo the live demo but i wanted to um just make sure that you guys are aware that you can also use microphone input within your p5.js sketch as well cool is there anything um do anyone have any questions so far about anything about loading sound or using microphone input or maybe i can assume that i've explained everything clearly okay so once we've got the sound file being loaded into your p5.js canvas and now we've got the sound to loop the next step to think about that would be um so what can i do with the sound file right um well there are multiple things that we can do with the sound file itself and for today's uh for the purpose of today we're going to be looking at um three big things we're gonna well two big things and then three components in total so we're gonna look at um how to use the amplitude values of the of the um sound file itself and then we're also going to look at um what kind of data we can use and what we can get by using this what's called fft so the first thing that we're going to be looking at is basically we're going to use um try to get basically using the v5 sound library to get the amplitude of the sound file for this given moment in time but the amplitude of the whole file so what is amplitude i think that's like the first question that we need to answer um before we get even into using amplitude of the sound file nick what is amplitude okay wait i know this one amplitude is like volume so high amplitude means a loud sound little amplitude means small quiet sound so what what do you think it means when i say amplitude of a sound file though it means the amplitude so the volume of each frequency so like low sounds and high sounds how loud each one is um there is a way for us to get that data too but when i say the amplitude the whole sound file um within even that sound file itself like any sort of music or any sort of sound there are time points in time when the sound is softer and there their points in time as it is typically in music when it gets more closer to climax the whole volume of the whole sound file will increase so the first thing that we're going to look at is an amplitude for each mode it's each frequency band it would be rather for each moment in time how loud or how um soft the sound is for that sound file in that moment in time and i think sound is actually you know one of the most difficult things to talk about i feel like you can listen to the sound and you can compare you know your descriptions of what that sounds like but it's also like when we talk about different amplitudes or different like characteristics of the sound i think it's one of the most difficult things to you know talk about without having any visualizations well i think we're in luck because we're going to visualize the amplitude of this particular sound file that we've included in here and so the first thing if i want to have any sort of analysis done for our my uh sound file the first thing that i will need to do is create an instance of this component that mp5 sound library calls the p5.amplitude so um let's actually do go ahead in here and as a global variable i'm going to create a variable called let amp and inside of our setup um we're going to say empty is going to equal to a new instance of p5 dot amply spelling is important amplitude and notice how this sort of um statement it resembles something that we've seen um two weeks ago what does this look like to you nick what does it look like i'm doing in terms of programming let's see here online 13. okay you are making a new object right and then the variable amp yeah so this is exactly what we're doing and which is one of the unique things that's happening throughout the whole p5 sign library itself if you're going to be using any of the features like p5m uh like audio in and also like you know fft that we're going to be looking at essentially what you're doing behind the scenes is that you are creating an instance of that object which contains all the audio features that you want to use and automatically what it does for us is that whatever sound that is currently being played in the sketch will be used as the audio in so to speak and will be used to for all the features of the amplitude object that we are going to be using very momentarily it is a little bit of like an um interesting and in the complex com concept to wrap your head around you know like different there's multiple things going on here you have to you have some amount of you know audio knowledge right you know audio theory audio knowledge but you also have to know that whenever you create any of these features you're creating an instance of an object and behind the scenes by the way all of these things um the p5 sound library does for you are basically um behind the scenes are all vanilla javascript functions for um that uses the web audio api features and it just makes it a whole lot easier for you to use all of these things within the b5 sound p5.js canvas so here with the amplitude if you were to write this in using web api using vanilla javascript i think it will be at least minimum of 50 lines of code because there's a lot of different things like you know you have to hook your audio input into this input of this amplitude web api and all that kind of stuff and so with one single line of code in b5 sound library you can get all the amplitude data for your sound um file that we've imported in here so once we've created this instance of the amplitude object what we're going to do in the draw and we're going to do in the draw because every time our draw function loops we want to get the new amplitude data for that moment in time of the sound file being played so the thing that i'm going to do in here is i'm going to create a local variable called light level and then the level is going to be the amplitude whatever that amplitude the whole um package of the object information that we get from the amplitude object i'm going to use a method called get level and we can check out the reference for the get level um oh i mean the wrong reference let's go back into the amplitude reference and then we can check out the um documentation for the get level method in here so it says it will return a single single amplitude reading at that moment um it is cold so for continuous running it says to run it in the draw loop which is exactly what we're doing so before we draw anything i'm going to go ahead and i'm going to add a console.log statement in here and i'm going to print out the the value of level that i get so if you study the values that you get in the console long enough you will notice that it does tend to stay within a specific boundary of um amplitudes so it's never going to go all the way to one and it's going to nip well it's going to be zero when there is silence in the file as we saw at the very beginning for two frames when we uh run this particular p5.js um sketch so one thing to note in here is that well if there is going to be if the level uh value is first between 0 and 1 and it's going to be decimal number but it's never going to reach a all the way to 1 so a good function that we can use to visualize this level value is going to be the function called map that we've been using continuously over the course of the weeks uh just as a reminder what the map function does as i type in here so let's actually create a visualization where we basically use the level value to create this uh to change the size of the ellipse the first thing that we'll do here then i'll say another create another local variable called size i'll say i'm going to map the value of level that i i'm getting in line 12 19 in here that's going to have a range between zero and one and i want it to be mapped between when it's zero maybe i'll have the size be zero as well but it's at one i want the whole um i want it to be mapped to width divided by two so half of the width of my canvas and then i'm going to use the size um value in here inside of my ellipse function or actually i'll just use the circle function in here i'm going to set the x and y coordinates to the middle of my canvas and width divided by 2 height divided by 2 and i'll use the size that we calculate in line 21 in here and we'll just give it a some like a red fill color for now i feel like it's like the most basic audio visualization that you can do but it's so it's always like really nice to see it because um you know you see it moving you see something moving not because of your mouse not because of the keyboard but because of like the how this particular music is being played and if i add that's what happens if you had a little bit opacity to your background so now that we've seen what amplitude does the next thing that i do want to talk about is um another sort of um algorithm or another another p5 sound object that we can use to get old to access all of these tools behind is called fft and this is it gets now a little bit more towards like you know audio knowledge domain because what does anyone know what fft stands for maybe i'll give it a couple of moments in the chat i think i kind of like scrolled down to it to reveal the answer in that split second of time but i cheated i already looked earlier today so okay what what is fft and here if you scroll down to the description you will see that it stands for what's called fast for your transform which even it already sounds like it's a big mathy thing let's actually look up fast or retransform and if you click on the wikipedia article it's got some like intense things happening oh we had an um answer from chat too is that a lot better it sounds a lot cooler or your form transform it's the middle of a tongue twister too do you want to explain to us nick what it does without you know me having to read through all of these mathy algorithms i would love to if i could um you know please feel free to read through the wikipedia article if you're really interested in what happens within this particular algorithm but basically um i also don't have any background in you know music conceptual music or whatever music theory any any of that kind of stuff but as far as i am concerned and as far as um i'm concerned in terms of creating audio visualizations what it does is that it is an analysis algorithm that isolates individual audio frequencies in a waveform we have also another person saying it's a fast forward i can't say that word i think it's a type of dinosaur anyway so basically what it does is that it gives us more granular access to the audio data that we have in our b5.js canvas so what that means is then it gives us two and two big things from the fft object that we can create using dp5 sound library we can get what's called a waveform and we can get what's called an um well the function the method you can use to get it is analyzed but what you will get is a spectrum of sound spectrum of sounds throughout different frequencies and i think for the sake of time what i will do is that i'm going to just um show you what each of those visualizations look like so here we've got um my sketch that i can oh i'll include these two after the live stream into the description of the um youtube video but for this particular one what it does is that it visualizes visualize this fft waveform and um and the next i will play right after it um the visualization of the spectrum and maybe nick you can tell us what the differences between these um visualizations are okay i'll play the waveform one first oh let me let me take out all the the frills of um opacity in the background so you can see it better okay so that was the waveform and then we'll play the spectrum and for everyone watching i don't know if it's just me but i think that the preview is a little bit behind the audio okay which is which is just a internet thing but just heads up if that's why it's looking a little like off not matching oh it's a shame um actually i think the other thing that we could do is um the difference between the spectrum and waveform per sound file is also interesting so this one is the another sound file that is running the spectrum visualization you see how like the second part oops the second section like the middle section kind of gave a rise at when that got to that particular part of the um the sound and then also change the waveform to the other file too so what's the difference between this one and this one so uh the first one with the squiggly it's the waveform right and the waveform is over we we've talked about this and i've already forgotten but it's over a short amount of time right amplitude at within a small duration um and when the wave is big it's loud when it's small it's quiet and then the uh spectrum is the second one we saw that looked like a graph i'll let you um sorry i'm just trying to turn off volume so that i can play this without hearing the it's not working i think it's probably because volume is a property so this one spectrum looks like that graph is the um how loud like each frequency is so like with the siesta one when the hihat comes in they're like that is like a very high frequency it's like a high tone there and so that's where it's coming in within an instant right so the difference between the waveform and spectrum is that waveform will show you amplitude of that split moment in time um but the amplitude of whole file similar to the one that we saw when we did the amplitude visualization with the ellipse in here and um the thing that spectrum does is that it gives you amplitude per frequency band which is really interesting and if you wanted to go really deep into you know how what kind of frequency bands that you get uh for the spectrum you can go to the analyze documentation for the analyze method and it will tell you in here that the length of the frequency band is going to be 124 frequency bands and like what that covers between those two things um i'm not entirely sure because i'm not like a really big expert in um audio you know theory but everything is in here if you want to take a look at take a read um and you know there are what's called bins so you know that it can be it has to be a power of two between 16 and and the result of the power of two has to be between 16 and 1024 but you can set different frequency bins by which i mean like you know the little differences in frequency you can group them back together in smaller bins or in you know like the default bins of 120 64 bins um it's something that you can do by passing in different numbers in here as arguments of the analyst method but we're not going to go in too deep into that because um things start getting starts to get a little bit um too complicated and i think we are running a little bit of out of time with you know the end goal that i had in mind for this particular live stream which i totally expected because there's a lot to cover in terms of theory but i let's actually not try to create the um there is a sketch that is included as the solution code inside of the youtube description right now instead of doing that i think we should try to create a different kind of visualization just using what we've got in here so for example for this particular sound file we've got a circle which i think we can tweak it a little bit around so that we can use it as like the sun or something so i'm gonna go ahead and do that and so we can change the height of it to be something like a hundred and fifty so then we should see it at the top and i think i actually did turn off um share sound it sounds like it sounds like you're not to get meta on sound but it sounds like your mic is fairly sensitive so i think it maxes out like pretty easily i don't know if you can move it farther away from your like mouth or speaker does that does that impact my microphone sound the sound of the music no it doesn't matter if it's playing or not i think just your microphone's very sensitive okay i will keep that in mind but i think we can use this circle as like a sun in here and then i'll take out the stroke here as well and the next thing i'm going to do is i'm going to create um another global variable and i'm going to call it fft and then down here in the setup i'll say fft it's going to equal to new p5 not fft so that now we have the um the an instance of the fft object is saved inside of our fft local variable global variable sorry and so then we can use all the features of the fft stuff inside of our draw function so in order for me to get the values of the waveform and a spectrum what's going to happen is that here i'm going to say let waveform as a local variable inside of our draw function and i'll say um fft.um is going to be the waveform method so i'll say waveform and then for um spectrum i'm going to say fft.analyze a couple of different things to also note for each of these uh waveform and spectrum objects so what's gonna happen is actually let me just um console log waveform and what's gonna happen here is that waveform is not just one number waveform is giant array that's because for each spectrum band we're getting a number between minus one and one and minus one and one being the amplitude for each of those frequencies and you can read all about them inside of our um you know the method documentation here for waveform and it will say returns an array of amplitude values between minus one and one the reason why it's between minus and one is beyond my knowledge and i think it has to do with a lot of the audio theory things but basically it will give you a snapshot of wave um amplitude readings in a single buffer and also the length will also then hear the length of the array that we're going to get for the waveform equals 101 thousand and 24. so those everything you consoled was waveform right and that would all those numbers are different amplitudes for each frequency yes okay so cool frequencies okay so having said that what that means for us is that if we wanted to do something like for let i is equal to zero then i can run it for the length of the waveform array that we have saved in line 23 in here as a waveform variable so now i can say waveform dot length and then i can progress it by one and then in here i can do multiple different things for now i'm going to draw it in um let's let's try using ellipses in here so what i can do here is i can say maybe say my fill color could be blue and then for my ellipse if i wanted to change the height of my ellipse then i can do another map use another map function in here and say i'm going to say let wise equal to map of and in order for me to access an element inside of the waveform array i'm going to have to refer to it using the index number so in this case i'll use the i the iterator iterator variable inside of our for loop so i'll say take the value of waveform at index i which is going to be have a minimum of minus one maximum of one and i want it to be mapped between maybe the lower some lower half of my canvas which is going to be if it's at the lowest i'm going to draw at the height so at the very bottom of my canvas but if it's high i'm going to draw it at the height divided by 2 so the middle of my canvas so if we have something like that and then now we can use this particular y variable here for our circle um shape so that i can use x could be wherever i is so actually if we want to make this a lot more accurate then we can also map x say map of between so in this case i'm going to map the iterative variable i itself which is going to range between 0 and 1024 or we can just put in waveform that length in here and then it's going to be mapped between 0 and width so let's use all of those math variables inside of my circle functions i'll say x comma y and let's keep size to 5 for now and i'm actually going to take my no stroke from line 36 in here and move it to set up so that all of my shapes have no strokes so let's see what that looks like it's already kind of looking like a you know very abstract sun in the intel in an ocean wavy sort of feel to it but basically we've drawn the waveform on the top on the bottom and we've got the sun on the top and let's actually take a look at what the sun the spectrum array also looks like the way that we're going to be doing spectrum is going to be very similar to the way that we drew our waveforms is because let's go back to the reference page for our fft and i will go to the reference page for analyze method and then here you will see returns an array of amplitude values between 0 and 255 across the frequency spectrum so then now it's like really really interesting because the the our range of numbers has changed so for a rate waveform the range of number was between minus one and one but for spectrum the range of numbers is between zero and 255. so it's just something like if you don't know you know audio theory uh music theory you don't need to you know worry too much about it all you need to know is that when we use the map function the minimum and maximum range is going to be different so that's just something that really gets good to keep in mind and i i also personally have to go back and forth just to double check that waveform is minus between 1 and 1 and spectrum is between 0 and 255 and i think that just is something natural to do you know like you never you don't have to memorize all of these things in your head and you don't have to you know have them in your head for you to use it so what i'm going to do here is i'm going to say for let i is equal to zero i is less than spectrum that length and i'll say i plus plus and inside of here um let's actually do another map of x for the um for all of the um elements of the spectrum array so i'll say i um take the value of i that's going to be between 0 and spectrum that length and map it between 0 and width and then in here let's say um y is going to be let actually do i want y i'm going to actually going to set um the size okay i'm trying to map this in my head i'm going to set this as the size of the rectangle because i'm trying to draw i'm going to draw rectangles and i want my rectangles to be taller to be um longer if the value of my spectrum the value inside of the spectrum array is bigger meaning that if that frequency band has a higher amplitude i want my rectangle to be taller so in order for me to do that let's do a map and they say take a value of spectrum inside of the element i that's going to between 0 and 255 as the documentation said and i want it to be mapped between 0 and the height let's see let's see what that looks like and i'll draw a rectangle in here and the x is going to be x y is going to start at height okay so y is going to start at height minus size so what what happens if i do height minus size so height is all going from the bottom because you draw from the top left right so it's x units over to the right and then height would be at the very bottom height minus size would be like maybe canvas is the size is going to be wherever you know if the height let's say size is 100 pixels that's going to move up 100 pixels so we can draw the 400 pixels yes of the rectangle so and then let's keep width to be maybe five pixels this is arbitrary and then let's put size here as the fourth argument and oh let's give it a different fill color this time i'll give it green it's gonna be very rgb painting okay cool cool um i just had a little thought though i think we can flip the order of these two and i go edit tidy code and then i think what i'm going to do is i'm going to draw the what we just drew for spectrum starting from the middle of the canvas and i'm going to flip it so that now we've got like a mountainy structure this is very impromptu so what i'm going to do here is here instead of x being between 0 and width i'm going to have it start at width divided by 2. and wait that's the wrong one not that one oops um tidy code again i'm gonna have the mountain which is the one here for spectrum because i i got confused because i switched the places so i'll have this one start at width divided by two there we go and then i'm going to limit this height to something a little bit smaller let's do it divide by two see what that looks like okay maybe a little bit bigger so i'll do four divided by three and then what i'll do is i'm gonna draw another rectangle um that's gonna go from okay so i'm gonna do minus width divided by two so what that will do is that i'm gonna shift wait but that's not gonna flip it is it i think i'm to keep it simple and not do math and use math again so i'll say i'll say let's flip x and i'll say another map between i and 0 and um between between zero and spectrum that length and then what i will do here is i'm gonna flip it so that the first one gets drawn from width divided by two and the last one gets drawn all the way at the towards the left which should be at zero so that instead of me trying to calculate beings i'm going to take this and say use the flipped x flipped x value instead there's a lot of different things that you can do obviously to you know make your painting look better you know one of which will be not using these hideous three colors that we've used in here other things like instead of using circles in here what if these were also all using rectangles so that they feel more like you know a wavy thing that's happening and also things like what if you wanted to for example here ignore all of the spectrum length what if you only cared about half of your spectrum length so you don't want to care about um all of the things that are happening in the further up frequency bands so then you can do something like this where you only play with the half of the spectrum so that it creates a bigger like a fuller and like a slightly wider mountain for our visualization so there's a lot of different things and we've got maybe five minutes or so or we've got ten minutes seven minutes no eight minutes sorry so if there's any requests for that so if we wanted to um you know um have anything from the audience it is our like last live stream for creative coding so i'm willing to take up any challenge then you know any modifications challenge to this particular um sketch that we've gotten here or nick if you want me to try different things i'm happy to give it a try i'm i'm loving what i'm seeing so far the nice little it's a nice little painting you know i think the sun needs to move up though because it kind of is making it look like a very vibrant lord of the rings what's that tower with the eye yeah it's the eye of sarah like an apocalypse wildfire son also yeah so i think you know one big thing would be to tweak around um with the placement of the sun a little bit for sure but the other thing to also keep in mind is that notice when i like flipped um the placements of these for loops you know you know i moved the waveform to below to be below um the spectrum visualization and that brought the the waves to appear on the front in front of the mountain so then like you know the one thing that i think um actually we do want the sun to be all the way at the top so maybe the thing that i will do is i move it to the corner left corner you know julian i did see one question in chad i didn't get to um savannah what are the real world use cases for this audio app like where can we publish it where can it be used well you can have it as part of your portfolio website that would bring another zing to your portfolio to be like here i can do all of these audio visualizations other things like i think there'd be a lot of like creative uses sorry i just saw alex's cone i think there'd be a lot of creative uses to audio visualization like if you have you know friends who make music for example and they want to have an audio visualization that could go with their music you could create something simple like this and you can use it as like a source for a music video that's something that i've actually personally done you know like in i don't think i've made a music video that's like a full extent the whole thing is um generative visualizations or audio visualizations um that i've coded but i've definitely used different parts of of a music video to be that you know i also get a lot of inspiration from i think the arctic monkeys has a really cool a music video for the do i wanna know song i don't know if that's actual title of that song but they've got these like line based drawings that's definitely not done in programming but i draw a lot of inspiration from that so by which i'm saying is if there's music and you wanna put visuals on it this is a great way to get started with it but obviously i think it'd be really cool to have this be a background of someone's portfolio i think that's super creative yeah i think it'd be super creative maybe not like a song that's like this banging but a more subtle song so chat if you have questions for j1 the p5 expert please put them in i have more questions but i can keep going um so i'll just i'll just keep going until others chime in here what's what's next if i was into music like analysis and visualization in terms of p5 which else should i play with in terms of p5 i think you could definitely hone in on the fft stuff because there's a lot more that you can do in here um i let's actually take a look at the p5 um sound library other things that you can do is you can also think about creating sound within using the p5.js um p5 sound library so not only does v5 sound library have features that you can analyze the existing sounds so you can import in like a sound file and you can do analog analysis in it using fft or amplitude objects you can also try out this oscillator so you can create your own sound oscillator so like a sound oscillator wave or like a sawtooth wave all that sort of thing so let's actually go ahead and see if we can just use the example you can create a digital fermin which would also be cool you could create a theorem and using your mouse position can we do filters yeah there's also a thing called filter there's also that's amazing there's also a filter for so now this gets to a point where you need to have some music knowledge some audio knowledge because you need to know what kind of filters are generally out there there's also different things called p5 effect in here then you can also put in different kinds of effect but these obvi they have the way that the method works the methods work and like you can also see from it if you look at their example code there's no things that you have to connect and disconnect what this kind of comes from like all the um i think generally how music works in terms of like plugging basically plugging in things from one source to another but what happens with like when you put in more things in between the input and the output of the file output of what it comes out of your speaker you will have to chain um audio files or like audio inputs so going from one audio input and you put it through one filter and you put it through another effect so you have to take audio file put it as input of audio filter take audio filters output put it as audio input of another effect and so on so it gets a little bit complicated and a little bit convoluted and i was suggesting you have patience and you study the um example code if you're if you want to go to that route another thing is if you're really really serious about using web audio um i would even go beyond the p5 sound library because p5 sound library is great if you want to get started with all these web audio features there's another um javascript library called tone.js that i think is also another place to another place where you can do a lot more indepth um effects and also analysis all the sort of things you can do with tone.js as well there's something that i would also recommend that you look at if you're into web audio cool yeah anything else i think i'll make sure i'll make sure to upload the sketch that we created together during the live stream let me actually save that because i'm scared of losing it and then i'll add in these files that i have um that i demoed the waveform and the um the spectrum visualizations under the description for this odd video as well and for inspiration can we see your your final oh yeah so i've got it right here and a nice deeply inspired by the song itself despite the fact that it's called siesta it's for some reason it triggers it's like you know aurora sort of like night sky sort of feel to it the song that's why um i i the the the things that you see up in the night sky is um by the way using spectrum so i'm laying out all the spectrum bands on top of each other and then like depending on how high they are the size of the rectangle and the color of the rectangle is changing and then the bottom the wavy ocean floor there is using waveform and then whenever amplitude reaches a certain number above a certain number in this case this number which i derive from watching the amplitude values coming in using through console log whenever it's above that it draws a random um star sparkles so everything is being driven by different data in the sound file very cool cool um i think i think this was a hopefully one of the most entertaining one of the more entertaining sessions that we have with creative coding because you know there's like things with like sound and then you see things as well and then you you know create animations based on you know the different um data in the um sound file so i hope everyone really enjoyed it and i think academy will come back real soon with another live live stream series but yeah i hope everyone enjoyed the creative coding series yay bye