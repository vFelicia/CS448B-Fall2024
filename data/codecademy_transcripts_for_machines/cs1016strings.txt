hey everyone um i want to make sure everyone can hear us hey guys if you can hear us can you write down in the chat yay awesome cool hi everyone welcome to our episode number six for cs 101 we're just going to take a few minutes and then we're going to jump in how's everyone's tuesday going actually right down in the chat where you guys are from oh california nice india whoa madison wisconsin cool wow you guys are from all over that's awesome that's awesome oh all right ben how do you feel are you ready to get started yeah let's do it all right cool i'm not seeing myself in the video though um let's see what if you share your screen maybe um let's try that hello hello everybody my name is ben can you all hear me someone says nice chair um all right joel we're gonna get started with the lesson today um thanks for that mark uh we're gonna get started today with our lesson on strings if you're following along with us here's the link we're going to be using i'll share that in the chat as well in case anybody's missing it but you can also find it in the link for the youtube video um sorry i can't i guess i can't add it to the chat but you can find the link in the description below uh we're gonna be talking about cs 101 strings strings in python today and um for the most part uh you can see that this lesson is broken into two lessons introduction to strings in general string methods as well and then um at the end there's a string code challenge um we found that the going over those code challenges is actually super helpful so we're going to be focusing today on that code challenge down here before we do that we're going to do a brief introduction to strings so we're going to go through a couple of these components here and this cheat sheet so i think just to start galena i think it'd probably be good if we went into the introduction first just did a brief intro to strings and then went through the cheat sheet before going to the code challenge so uh so i'm going to go ahead and click on introduction to strings here and we'll jump into this first lesson and oh i am all the way through here let me go back to the beginning and let me do some some stuff here all right so uh here i am on the introduction and i'm gonna give y'all a couple seconds to uh to get set up so go ahead and open up this introduction page and while you're at it feel free to share in the chat whether or not you've used python before and whether you've whether or not you've been to one of these live streams before this is your first live stream let us know this is your first time using python let us know uh but if or if you know any other languages that'll be cool to know too and i've got that dual monitor set up here so that's why i'm not looking directly at the camera i'll go ahead and get started in another 30 seconds give you all some time to get set up yeah also feel free to write in the chat if you're ready to go um just post like a thumbs up or if you need a few more minutes also let us know all right my computer is working hard let me quickly close some things here and get started oh boy all right let's get into it then um so today we're going to be talking about strings um and specifically strings in python uh most programming languages or if not all of them have uh strings and strings are how we represent uh the words and sentences in our in our programs right so you know all languages how we communicate with each other includes words and sentences and so it makes sense that we can put words and sentences uh into our programs as well and we do all this with a string now here we can see that a string is a sequence of characters contained within a pair of either single quotes or double quotes uh and it doesn't matter which one you use both are treated the same uh you just want to make sure that you're either that these two quotes match each other a string can be any length you can have one character in it it can have a thousand characters in it and it can contain any letters numbers symbols or spaces so in this lesson uh we are if you go through this lesson you'll learn you'll learn a ton of different things about python strings like how to slice them and what that means um how to pull out specific characters search for strings inside other strings uh iterate through strings and use strings in conditional statements um as i mentioned in this live stream we're just gonna do a brief intro and then we're gonna go through those code challenges in the end so let's just go through this very first lesson together um or this very first exercise together to see how we make a string so the first instruction here says save your favorite word as a string to the variable favorite word i'm going to go up here and uh and i'm going to i have this variable here and i'm going to save in that variable a string of my favorite word if you want you can share your favorite word in the in the chat but i'm going to type in platypus i think platypuses are cool uh and i'm going to go ahead and actually put that in the chat so you all can see what i typed in here and if you want to you can actually share your favorite word and the string in the chat as well so you can see that you're you know typing it in with the right syntax that's my favorite word and we'll run and we can pass that first test and then print it to the console print favorite word and we can see what that looks like inside the console now if you're new to python if you've never used it before in python we give our variables names that are separated with an underscore and we use the print command the print function to display values to this output panel over here did i spell that wrong plot tipless plot dive yeah i don't i'm not an english person there we go i'm a programmer right i'm not an english major and that's the basics of strings um let's go through a couple more of these and then we'll go into the uh we'll go into the cheat sheet so let's continue on to the next one and i may have to reset a bunch of these how are we doing on time galena should i pause for some questions or what do you think um i think you're doing great so far if any questions come up in the chat i'll make sure to answer them but also just for just a fair warning this is the first time that i've done this so uh appreciate any patients you have um so let's continue on to the second one um are strings also spaces and symbols uh yeah so we can we're actually going to come up on that in a couple examples but yeah you can definitely have strings like um hello space world exclamation point this is also a string that counts so let's go through this second part here this is a really important concept of strings which is that strings can be thought of as a list of characters which you all learned in a previous lesson like any other list each character in a string has an index and so if we were to look at this string here uh blueberry which is stored in the variable favorite fruit then we can access an individual character from that string using the index so if we want to look at the first letter of the string we could we could write something like this so let me actually pull this code into my script here and so i can test it out as we can test see it in here so favorite fruit is blueberry and here i'm going to print it out there so here when i print out favorite fruit uh 1 we see the value l the letter l that character now you may be thinking okay why is why am i seeing the letter l and not the letter b well remember that lists start with the index zero not one so if i were to change this number one here to a zero and run it again then we would get that first character b in our output panel now one key component to remember about these indexes is that they have to be a whole number so if i were to do something like this 1.5 which is not a whole number then we would get a type error that says string indices must be integers so make sure that your indexes are your indices are whole numbers starting at zero and then we can move along to these instructions here one of the most common things that are represented by strings are names save your name as a string to the variable my name so it looks like we need to create some of this stuff down here so i'm just going to leave my code up here this is fine to stay i'm just going to go ahead and add a my name variable and set it to a string of my name and this time i'm going to use single quotes just to mix it up notice that i'm using single quotes on both ends making sure that they're the same if i were to do something like that that would also give me an error which we can see here just get this syntax error here so i've got to make sure that both of those are the same use single quotes on both sides have my name is ben passing that first test and then select the first letter of the variable my name and save it to first initial so here again i'm going to create a variable called first uh sorry first initial and that's going to be the first letter of my name so i want to grab that letter b there and as we saw in this prior example we can just type out the name of the variable so my name and then use brackets and then the index 0 is going to be that first character so first initial equals my name bracket 0. let's test that out and we're good to go now if you want you can also test out your code just to make sure that it's working by printing out that first initial variable we already know that it's working because it's passing the test but if you want to see what that first initial value is you can add that print command there and you can see that first initial there now again we're seeing two b's the first b is the first initial of the word blueberry my favorite fruit and the second one is the first initial of my name let's see what we have coming up um let's go into slicing maybe and then we'll go into the cheat sheet galena and then you can take over for the uh challenges so i'll pause here for a couple more seconds and then i'll continue on to the next one here again the main component that we're focusing on in this lesson or in this exercise rather is that we can use these brackets it's called bracket notation to access a specific index which is like a the location of a character within this string so my name is ben and that first index b right there is index zero all right let's go on to the third lesson uh in this or the third exercise in this lesson uh cut me a slice of a string this is one of the coolest parts about strings uh in in python and let me reset all this stuff here so here you should just see first name rodrigo last name villanueva now one of the coolest things about uh strings in python is that we can grab what's called a slice of the string a slice is uh it's sort of like a piece of the string but it's a new string that we can sort of extract out of this existing string and we do so using this syntax here um so let's look at an example of this first i'm going to just pull this code into into my editor here so i have my favorite fruit again blueberry and we're printing it out just go ahead and run that so we can see blueberry printed out into the console now uh every time i run it's going to be trying to execute these tests down here which i haven't even paid attention to yet so they're failing so that's why i'm ignoring those failing tests for now and we're just going to go through this and then we'll go down to the instructions now if we want to pull out a slice let's say that we want to get a new string that contains just e bear so these uh characters right here e bear well i could pull out that slice of this string favorite fruit by writing something like this favorite fruit and then in brackets three colon eight let's go ahead and copy that into our editor here and run and there again you see ebay now how did that work how did how was i able to do that well let's take a closer look at this syntax here uh if we which you can see sort of outlined at the very top so we have our string name which is favorite fruit and then we have the first index colon last index well that first index three if we look down at our diagram here that first index three shows the letter e the character e in our string blueberry and index eight is in between r and y when we write this syntax we're slicing a character we're slicing a range of characters from our favorite fruit that starts with index 3 so it starts here and includes index 3 and goes up to index 8 but excludes everything after index 8. so it's going to be everything between and including index 3 and before but not including index eight so we get e there yeah i see some folks if y'all are are saying like i don't think this is live i think there's like a little bit of a time delay between when i see the chat or at least when you see the video and what i'm saying so i may not see your questions immediately but the folks who are following along the chat they're going to be answering a lot of your questions in the chat now one other cool component of slicing so not only can we say i want all the characters between index three and index eight but i can also have what are called open ended slices so uh yeah let me zoom in here i'm noticing some folks are asking for a little little more screen real estate there we go so i was just saying that we can have what are called open ended slices and they look like this so let me copy in this one first print favorite fruit colon4 and then i'll do print for colon so these are called open ended slices because we're not specifying the starting index or the ending in index in these and when you leave out either the starting or ending index python is just going to assume that you want everything from the beginning of the string up until index four when you leave out the ending index it's going to assume that you want everything from index 4 all the way to the end so here we're getting everything before index 4 which is blue and here we're getting everything from index 4 on which is barry now let's go on to our instructions we're going to go through these i'm going to get rid of a bunch of this all this text up here you're a programmer working for copeland's corporate company at this company each employee's username is generated by taking the first five letters of their last name so it looks like for rodrigo villanueva it's going to be villa a new employee rodrigo villanueva is starting today and you need to create his account his first name and last name are stored here and we need to create a variable called new account by slicing the first five letters of his last name so we'll say new account and we want the first five letters of his last name so last name and they're actually a couple ways of doing this i'm gonna write one of them out and i'm gonna give you all a chance maybe to see if you can type in the other way so new account equals last name and i think the maybe the most explicit way of writing this i want every character starting from the first character which is index 0 and i want the first five characters so that's gonna go up to zero this is zero we got one two three four and i want everything before index five here now an easy way to actually figure out how many characters you have is to take this number and subtract this number so five minus zero gives us five characters that's that's how i know that new account is gonna have five characters in it now i see that uh vinit is giving us the other approach to doing this which is which is really awesome we could also write this by saying new account equals last name and then using that open ended slice uh method that we saw earlier because i'm leaving out that first index python is assuming that this number here is gonna be a zero and this is going to give me everything from the beginning up until index five now here it says temporary passwords for new employees are also generated from their last names create a variable called temp password by creating a slice out of the third through sixth letters of last name your string should have a total of four characters so i need to slice last name and i need four characters between third and sixth indexes or sorry the third and the six letters so if i go in here i'm looking at uh three four five and six i want those four letters right there now before i finish this up i'll give you all a chance to type this in and uh submit your thoughts on how you might do this i saw vinnette put in three colon six and then retracted it which is kind of interesting this this is a really common way that you might make a mistake here you might think okay three is the first character i want and six is the last character i want so let's put in three and six but remember this is the first character that we're not going to include so we would want to write three colon seven right and again we can check the the math here by subtracting three from seven we know that there's four characters here now if i run this we're actually going to fail the test now why did we fail well let's print out temp password to see what we got and we might understand a little bit better why we're wrong so remember we wanted llanllan but we got lanu nice i'm seeing a couple of folks here nakila and ofire cyberpunk given the correct answer remember indexes start at zero so the third character is actually index two and so then this ending index is going to be index six right because we want index two three four and five and pause right before 6. let's run that and there we get llan and for now i think we're going to pause with going through these exercises this gives us a good place to start at least with strings and i want to bring our attention to the cheat sheet which we're going to be using while we go through the challenges with galena so i'm going to i'm going to leave this page here maybe i'll give you all 10 more seconds to look over it and then we're going to go back into the curriculum into the course syllabus and look at the cheat sheet for a second uh let me go back here actually maybe it's linked down here somewhere if you scroll to the bottom of your instructions pin on the left you'll see this section that says concept review and we can take a look at the materials cheat sheet so let's go ahead and do that cheat sheet sorry yeah there's no there's no shishi here the cheat sheet sorry about that i uh maybe i mumbled too much um all of these lessons as you can see have a cheat sheet for them we're looking at the strings one and you can access all the other ones like loops and lists here i'm not going to go into all of this um but we're going to refer back to it as galena goes to the challenges but here you can find a lot of really important information about strings if you need a quick refresher and we're going to touch upon a lot of this stuff as we go through these challenges here's some of those things that we just talked about indexing and slicing some things that you may be familiar with uh from your lessons on lists and looping is iterating so we can do that with strings as well you may also be familiar with the lend function which i believe you can use on lists as well but you can do that with strings to know how many characters are in a string we can concatenate which just means combine two strings to form a new string so here we can add one fish and two fish to create the new string one fish two fish and a bunch of other things called uh python methods um which again i'm not gonna go into but they allow you to do some really awesome things uh with strings like title turn this string dark knight into title case where each character is capitalized and uh yeah i think this is a good place to stop galena do you want to take over and go through those challenges yeah sounds good um can you just show me what the exercise was that you stopped on was it four uh we stopped at exercise three cut me a slice of uh of us a string awesome cool so i'll jump to that one and share my screen okay let me know if you guys can see my screen ben can i get a thumbs up if i'm sharing awesome um oh uh let's see i'm not seeing it yet on youtube but i see it on ours yep you're good i think there's just a slight delay okay so we'll just jump into the next exercise which is concatenating strengths so you can also concatenate two existing strings together into a new string this is something ben mentioned briefly as he was running through the cheat sheet so if you have two strings one is fruit prefix with blue and one is fruit suffix with berries we can actually use the plus operator to combine these two strengths so notice how we created a new variable called favorite fruit by combining fruit prefix and fruit suffix so using a print statement we would output favorite fruit and it should return blueberries so i'm just gonna jump into the code editor and go through this to show you how it looks awesome so now we see blueberries on the right so something interesting about concatenation is that if you want to add a space you have to specify that so notice that there are no spaces added here we don't have a space between blue and berries it is a single word so to manually add in the spaces when concatenating strings we have to specify that so let's take a look at this fruit sentence so fruit sentence equals my favorite fruit is plus favorite fruit so if i run this can anyone tell me what i should see as the output so for anyone who said that there isn't going to be a space in the sentence between is and blueberries is correct because we didn't specify a space after is so if you take a look at the next example in that same code snippet there is a space right before the double quote so let's go ahead into our code editor and add that space and now clicking run should show me a sentence with the appropriate spacing so here is that space between is and blueberries right now let's try out this exercise so copeland's corporate company has realized that their policy of using the first five letters of an employee's last name as a username isn't ideal when they have multiple employees with the same last name that makes sense so write a function called account generator that takes two inputs first name and last name and concatenates the first three letters of each and then returns the new account name all right that was a lot so let's try to break it out break it into digestible chunks so first thing we want to do is we want to write a function so let's recall how we write functions this is something that we covered in the previous live streams so function in python is defined by using the def keyword followed by its name and in this case it also takes two inputs first name and last name so can anyone tell me what these two elements in the parentheses are called ben can you just let me know if anyone writes it in the chat yeah we got a couple couple folks saying parameters or attributes but frankie frannykins got right okay awesome yes so they are parameters so what we're going to do is we're going to take these two parameters and concatenate the first three letters of each and then return the account name so something that we're going to use is a syntax from the previous exercise which is where we used the colon within the subscript syntax so to grab the first three letters of each we can actually use colon three right because that's going to grab the first three letters so what i want to do is i want to use this syntax for both the first name and the last name parameters so we want to make sure we return this so we will use the return keyword first name and now because we're concatenating we're going to use the plus operator so last name and also colon three now let's hit run the checkout for me try that again awesome so that should have checked off for you now if you also want to test your function we can do so on the following line we're going to use first name and last name provided in script.pi which is just the name of our file and save it to the variable new account so i'm going to create a new variable new account and i'm going to set it equal to my function call so remember that in order for us to activate or bring a function to action we have to type out its name and pass in any arguments for the parameters so in this case our parameters are first name and last name and we want to pass in those real values in the function call so account generator and let's pass in first name and that would just grab the first name at the very top and last name which would be blevins so let's do first name i'm just going to remove some of this previous code to avoid confusion all right now let's hit run okay great now we passed the test but how come we didn't see any output in the terminal can anyone tell me how what line of code i can add here to see output in the terminal and let me know if there's any that come in you got it a few folks just shared their thoughts okay they're saying use the print function yes perfect so i'm going to use print and wrap new account within the parentheses let's hit run and here is our account generator output so we have the first three letters of the first name and the first three letters of the last name which is exactly what we expected okay cool let's move on to the next one more and more string slicing so python comes with some builtin functions for working with strings one of the most commonly used of these functions is called len so len returns the number of characters in a string so if you're coming from any other programming language maybe javascript for example this is going to work exactly like the length function in javascript so here it's just uh down to l e n but it also stands for length so for example if we take our favorite fruit blueberry the length of our favorite fruit is actually nine so that's the amount of characters in the string now notice that when we return a value for length it's actually not counting in the way that we do when we reference indices right those start from zero here the count starts from one so if we do one two three four five six seven eight nine there's exactly nine characters we don't start count from zero so another interesting thing about the length function is it also takes into account the spaces in a string so here i love blueberries is counting this space in between i and love and the space between love and blueberries now lynn comes in handy when we are trying to select characters from the end of a string what is the index of the last character why a favorite fruit from above so let's take a look so here we have our blueberry so in order for us to grab the last index well the character of the last index we can use the lent function in this way so i'm just going to grab this now it's going to give me an error but we'll take a closer look as to why in a second so we'll grab favorite fruit okay great so this is actually a very helpful error it says the string index is out of range because remember we're not counting from zero anymore so typically the last index is just going to be the length minus 1. so that is what we have to specify in our code because right now the length what it's trying to access is actually this root sub 9 right that's the amount of characters we have yeah so there's actually no index of 9 in this string right the last one is eight so if we do favor fruit sub len favorite fruit minus one that should give us the last element so i'm just going to add a minus 1 here and this should return our y so this is actually a very common technique that's used amongst many different programming languages so the most common way to retrieve the last element is to take the length of the string and subtract one so you could also slice the last several characters of a string using len so this is a syntax that we learned previously with the colon and that's going to just grab something from the start of the string mine uh so we're taking the length minus four so that's going to be 9 minus 4 that's going to give us 5 and that's going to give us all of the remaining characters erry from the string so let's drop this into the code editor sound and retrieve our last characters so we have e r r y from blueberry awesome okay let's move on to our exercise so copeland's corporate company also wants to update how they generate temporary passwords for new employees so we're going to write a function called password generator that takes two inputs first name and last name and then concatenate the last three letters of each and return them as a string okay so let's take a second to break down into chunks what we have to do so i'm just going to remove its code and start writing our functions so we're going to use def password generator that takes two inputs first name and last name and then concatenate the last three letters of each so i'm going to just pause for a second and write down in the chat how do you think we can achieve this so something we're going to definitely need to use is we'll need the len function we'll also need our subscript syntax and we'll also need to slice our string so we're going to be using all of those three things together in order to get the last three letters of each okay so let's get started so the first thing we want to do is we want to grab the last three letters of first name so where we're going to try is we're going to type out first name and we're going to enter our subscript syntax and then we want to use the lend function first name so this is going to give us the length of the first name string right and now we want to return the last three letters so we want to actually subtract three and now can someone explain to me how this is working so i'm just gonna walk you guys through how this is happening so if we have the length so the length of first name is going to be one two three four five elements so we have five minus three that's giving us two so it's going from the second element on to the last right so it's taking the second element which is i and it's going to return i k and o which is exactly what we need so then we want to do the same thing for last name so we want to grab the length of the string we want to subtract 3 and that's going to put us exactly at s and return s u k i okay so now the last thing i'm going to want to do is add a return keyword so another thing that you can do is you can also store this in a variable and then return that variable or you can simply just return this entire um expression as a function i'm sorry uh expression from the function so now let's hit run and now we don't get any output until we test our function so let's test it out on the provided first name and last name so we have password generator and let's pass in first name last name and we want to store it in temp password now in order to see this we're going to need to wrap an inference statement and output temp password all right let's move on to the next one so i think we're going to try to stop at 150 and then hop into the coding challenges how's that sound awesome cool let's move on to the next one okay so negative indices so negative indices are actually a way that we can access characters at the end of the string much simpler than we did in the previous exercise so in the previous exercise we used len to get a slice there's a much easier way with negative index indices which actually count backwards from the end of the string so if you use string name 1 it's going to grab the last character of the string string name minus two is going to be the second to last character so for example negative one is going to give us y negative two is going to give us r negative three is going to give us r well the third r uh sorry the second r back from the end but because we want to grab the elements using well because we want to slice our string it's actually going to return rry so let's think about how this is actually working so it's starting from the third element in the back and it's returning r r y so everything that follows that element so you see how this is actually a lot simpler and also cleaner code than writing out the len function okay so let's hop into the instructions so use negative indices to find the second to last character in company mode save this to the variable second to last okay so let's see how we can grab the second to last character so we want a second to last variable set it equal to company moto and we want to grab the second to last so let's say run awesome that's going to be our second to last element and we also want to use negative indices to create a slice of the last four characters in company motto and save this to the variable final word okay so we want our new variable final word is equal to company model now we're grabbing the last four characters so we want to go back four and grab everything after that so now before i print out both of these variables just type in the chat what you expect the output to be for each one okay so for those of you who said f would be the output for the first one you are correct and for those of you who said life would be the output for the second one you are also correct how's it going in the chat over there ben oh i can't hear you looks like some folks are staying in uh yeah it's looking good mark's got it in life perfect okay so now let's navigate to our coding challenge so if you're following along uh make sure to finish this lesson it has a lot of useful and important information that you need on python strings so we're just for the sake of time going to jump immediately into the coding challenge uh to show you how those are done so i'm going to pop in back into the syllabus oh that's our cheat sheet and i'm going to click on this strings code challenges article so this article contains three coding challenges that are going to test our knowledge of python strings it also is going to test our knowledge of functions and a couple of other prerequisite information that we learned previously in the lessons leading up to this one so the coding challenges include a vowel counter an m word count and date extractor so i'm just going to give one or two minutes um let's say one for the sake of time for you guys to pop this open and follow along okay so let's get started so we want to first write a function called vowel counter that takes a string as an argument and counts the number of vowels a e i o u in it okay so let's get into our code editor so let's define our function vowel counter it's going to take a string as an argument so you can call this anything you like i'm just going to call it an str short for string and count the number of vowels in it okay so we want to if we have any string let's say hey right it's going to return 1 as the number of vowels it includes which is e so we want to write code to accomplish this logic so first thing we want to do is we want to actually iterate through the entire string to check if there is a vowel in it so let's use a for loop so for let's say character in string we want to check if the character is in our collection of vowels so we have a list here that we can use so if car in vowels then we want to oh we want to count the number of vowels okay so we're going to need a counter here so i'm going to declare a variable count for you can write counter and i want to increase my count every time a character that exists in the string exists in the vowels list so we're going to use count e plus equals one or you can also do count equals count plus one either one works okay so now once we set up our counter we want to then return the number of vowels in our in our string right that's accumulated in our account so i want to use the return keyword and return count okay now let's hit run now i can't see anything just yet it's because i haven't called my function so let's go ahead and call our function with any string let's do bend and use a print statement to see our output awesome so because ben's name only has one vowel in it it returns one if we do code academy that should return let's see one two three four great now let's move on to the next one oh i forgot to check my answer okay we got it all right let's move on to the next one now we want to write a function called m word count that takes a string as an input and returns a count of the words in the string that start with the upper case or lowercase letter m oh and actually before i move on i just want to mention that there's numerous solutions for some of these coding challenges so don't feel like if you don't have exactly this but your code still works that you did it wrong so as long as your code works uses best practices you should be good and of course also passes the tests okay so now let's move on to this one so for example if my sentence is my gosh what a beautiful monday morning this is then m word count sub my sentence should return three right because it's going to count how many uppercase and lowercase ms there are so the uppercase one is um here in my monday and the lowercase one is in morning okay so let's jump into our code editor and start so let's write our function m word count that takes a string as an input i'll just do an str and returns a count of the words in the string that start with the uppercase or lowercase letter m so the strategy we're going to use here is actually very similar to what we did in the previous coding challenge where we iterated through the entire string right we have to go through each character in the string and check if it's uppercase or lowercase m so let's go ahead and do that so i'm going to set up my counter because i know i'm going to need one here so let's go ahead and set up our for loop so for let's do word this time in string we want to set up an if statement so if word sub zero now i really want to hear what you guys think about this why i'm using word subzero but for the sake of time i'm just going to explain it in a second so if word subzero is equal to m or word sub 0 is equal to lowercase m then i want to increase my count now the reason that we used word subzero is because when we grab a single word all we want to check for is if the first letter is an uppercase or lowercase n so it doesn't really matter to us if there's an m somewhere in the word we only want an uppercase or lowercase m if it's the first letter and that's why we're using the subscript 0. so now we added our conditional statement if word is capital if the first letter is m or lowercase m we want to increase our count and then we want to return this count from the function so now let's call our function with our my sentence string wrap it in a print statement to see the output and let's hit run awesome it returned a 3 which is exactly what we expected you can also try this with other sentences and with other numbers of uppercase and lowercase m's so let's check our answer and we got it okay and now we're just going to move on to our final one um i'm sorry if i'm breezing through this i just want to make sure that you guys can see how all of the coding challenges are done so here we have our date extractor given a string called date that is in the form of month day and year write a function called date extractor that takes date as an input and returns three values month day and year so we actually didn't get a chance to cover um escape characters but they are in the cheat sheet so escape characters are used to um basically is actually are we gonna use that here because if we're not you always use the split function i'm sorry you can also use the split function yes that's true so we are going to use this split actually let me just jump into here because we only have one minute left um so let's do def um oh yes i didn't finish reading it so we write a function that takes date as an input and returns three values month day and year so if our date is 6 16 2006 the function should return multiple values in the form 6 16 and 2006 and we want to keep them as strings we don't want to convert them to integers so our function is going to be date extractor and we're going to accept date as the input and now we are going to have to split our string so i'm going to do date dot split and i want to split it at these um slashes so wherever there is a slash i wanted to split the string so i want to return the elements that are preceding the slash so now because date.split doesn't actually change anything for date we have to store it in a new variable so let's say new date syntax and this is going to return an array so once it returns an array we can grab the elements and assign them to month day and year so month is going to be new date syntax sub zero that's going to be hour six then day is going to be new date syntax sub one and you can of course name this variable anything you like i recognize that i chose a slightly lengthy one and this one is going to be year so now we have our month day and year variables we can go ahead and return them from our function so we'll do month comma day comma year awesome and now let's just run our function pass in this string and wrap it in a print statement okay let's hit run awesome here is our tuple or multiple values in this form we have month day and year all right well thanks everyone for sticking around higalina um can i i think there may have been a mistake in one of the in the second one okay um can we actually look at that together on yours yeah can you share your screen again and then yeah yeah mark so mark was asking mark lam was asking why do we use word zero um yeah so this one here um i think uh i just this is something for me to clarify too um since i'm not uh it's been a while since i've used python um in your for loop on line five when you write forward in string is that going to separate the string into words and and no to space them out or will that go through every character oh that's a great question so let's take a look at what's actually happening here so if we print word so it's actually going to oh sorry yeah so it's going to iterate through every single um yeah it actually looks like it's iterating through every single character rather than word but we can use that split function again right to split on every space and then iterate through that list right yes yes definitely um i'm also going to and then mark that would sort of get to your um question which is we're using word zero because we want to get the first letter of every word different questions and see if there's anything else i missed yeah so um for iteration and looping yeah that's that's something we didn't cover in this section but it's loops are actually covered in the previous one um so that was something i also wanted to mention um if we go back to our series um there were some topics that uh we utilized here that weren't taught in this particular section but for example functions um lists and loops were all taught previously so if you want to get a refresher on that just go ahead and navigate back to those lessons but also some of the things that we use like um escape characters and split they are all in this lesson we just didn't get a chance to cover it but definitely make sure to check it out all right um i guess that's for four minutes over time but thank you guys everyone for sticking around i'm going to see if i can feel any other lingering questions okay awesome so ben how are you feeling feeling good awesome this is a really great question thank you everyone for for hopping in we will see you next time um so the next module that's going to be covered in this section is dictionaries so make sure to tune into that one and then there's one more after that and the series is all done alright everyone we'll see you next time have a good one