hi my name is Daphne I'm a software developer based in Baltimore and in this video we're going to go over what exactly is Kanban how it's used on teams and what makes it effective Kanban is a framework that teams follow to organize their work it's an agile process that teams follow to make sure that work can be completed smoothly so this means removing any blockers or places that could potentially slow down a members ability to complete the task in doing so this sets a team up to be agile to learn more about agile we've got a nifty video that covers the principle linked in the description below so Kanban is pretty much a framework that teams follow and the core focus is a visual representation that contains all the work to be done now before we go any further I want to quickly go over a few roles you'll commonly see on a basic development team if you already know the different roles feel free to skip ahead first up is the product owner who determines the products direction this person identifies what features should be prioritized and how the product should grow based on the business needs the products should address so things like feedback from the clients or revenue growth next up is the developer developers make the magic happen and write the code to build out the features they'll work with a product owner to determine if the business requirements are realistic and about how long they would take to complete alrighty so we've covered the main roles and in Kanban there's a board that's used to visualize the work that needs to be completed this is what makes transparency possible since any team member at any given time can look at the board and understand the priorities and where the team stands in achieving its goals now these columns represent the status of the work to be completed the most basic implementation of the board will have columns to track work that needs to be done worth that is actively being worked on and worth that already is done there are also other boards that can be more granular with the columns to show things like work that is blocked or work that is no longer relevant it's really up to the team to decide what works best for them each item of work is represented by a card that contains details of the work that is assigned to it so it'll have information like who's responsible for completing the card how long it's gonna take and exactly what work is required for the card should be complete as the project progresses you'll see each card move between the columns to reflect its updated status we've gone over how Kanban works and now we'll dive into the specifics of what makes it effective so that teams can get their work done efficiently your team will want to limit the work in progress to avoid biting off more than you can chew otherwise you'll spread yourself thin if you have too many tasks being worked on at a given time then they'll move along more slowly than if you were to take them on in smaller chunks when tasks progressed to the board you'll have a visual representation of their journey through the board this allows the team to analyze the stages where the tasks are being held the longest and understand what causes them from progressing to the next stage ideally you'll want to refine the process so that the tasks evenly flow from start to finish this will allow the team to be able to accurately estimate how long tasks will take and communicate to stakeholders when to expect a feature to be ready the columns on the board also help to unify the flow for the tasks life cycles since every task goes in the same cycle this helps to align team members expectations for each stage since the tasks must meet a certain set of requirements in order to progress into the next stage Kanban also encourages feedback at any given moment so when team finds places where the process can be tweaked for improvement they can implement those changes immediately from there the team will use the board to analyze the tasks new life cycle and determine if the new flow is better or worse than the original flow but generally the changes are introduced in small increments so that it's easier to pinpoint what effect the changes have on the flow there are a lot of great benefits that make Kanban effective and help improve a team's workflow but there are also some traps that can make it ineffective and lead to team instability Kanban mainly affects how your work is organized so it can be pretty seamless to integrate with any existing team setting like if you have a team lead or a senior developer Kanban won't affect their roles are responsible please if anything it actually encourages every team member to be proactive and take initiative to remove blockers to keep the workflow continuous there's also a lot of flexibility but task management this is incredibly helpful when the product owner needs to reprioritize the work or introduce new work onto the board any new changes shouldn't have any effect on the progress of existing tasks combats focus on the process no not that process this process brings to focus on identifying and removing blockers it helps to move tasks along so that no team member is sitting idle one downside is that the backlog must always be up to date this means that the tasks must be prioritized and accurate so that when the team members pick up tasks from the top of the backlog they're always working on tasks that will be the most valuable to the product knowing exactly when a task will be complete can also be kind of difficult to predict since the workflow is more fluid and there's no clear deadline for the tasks on the board each task has its own beginning and ending point there's also the temptation to expand the scope of tasks beyond what it should be so you may have a tasks that is created to tackle problem a but your team might think well we might as well throw in a quick fix for problem B since they're related now this ties problem B together with problem a so if you encountered a roadblock those only related to problem a then problem B is also blocked you'll often see Kanban compared to scrum which is another agile methodology if you're unfamiliar with scrum you should check out our video linked in the description below now scrum has a lot of ceremonies and structure built in that makes it a bit more rigid to follow there's also a time restricted sprint in which a set amount of work must be completed in a set amount of time however this means that during the sprint there are restrictions on the work to be scheduled and the product progresses in increments whereas in combine the work flow is continuous so the product continuously evolves scrum also makes the assumption that all the work a team has should be completed by members within the team whereas the work on a Kanban board can be completed by anyone from any team combat also differs from scrum in that there's more emphasis is on the board and the team's workflow there's also much less structured than scrum so there aren't as many roles and ceremonies that the team needs to follow to get everyone aligned on the same page it also puts more focus on moving the tasks along in a workflow rather than having a deadline to complete a set amount of tasks you'll also see this process accommodate small incremental changes more easily and quickly than scrum does particularly since it's easier to analyze the impact it has on the tasks life cycle through the workflow all in all I wouldn't say that one way is better than the other every team has a unique dynamic and the nature of the project may also vary so things that work well and one team might not work as well for another that doesn't necessarily mean that a team must pick one over the other but rather teams can merge the two together and use parts that will work best for their situation you can also get a variation of the two where you merge together the structure from scrum and retain the visualization of Kanban also known as scrum ban scrum bond scrum bun I don't know pronounce it however you want I've been on a team where we started out using scrum but scrum had a lot more structure than we really needed so we stripped out a bunch of the unnecessary ceremonies and integrated Kanban principles so that we could put more focus on the work but it's largely dependent on your team's dynamics and project if I were on a different team of the same size a completely different approach might be necessary instead I really hope you found this video helpful and thank you so much for watching please join the conversation by dropping your comment below and subscribe to this channel and if you're ready to take your skills to the next level you can start learning and Codecademy today