foreign welcome to live coding with codecademy I'm Dan an engineer at code academy and today we'll be working on adding persistence to an existing project with Ruby on Rails we'll be working on a project that's available in the code academy learning environment to All codecademy Pro users you can find out more about codecademypro in the video description below but if you're not a code academy Pro user don't worry we're going to be working through the project in Sublime Text and using the terminal on a Mac computer so if you don't have Pro don't worry you can still follow along at home I will also be using Code created from the last live coding project if you weren't if you didn't watch the last live coding project don't worry we have the solution to that project up on GitHub we have the link to that in the description and we'll be using code from this as we work through adding persistence to this project um I'll expect that you know a little HTML JavaScript CSS and rails don't worry though you can still gain a lot just by watching and seeing how things come together and are built um before we start if at any point you feel like you're falling behind don't worry you can pause the video and resume at any point and we're going to keep the video up afterwards so you can replay it whenever you need to and if you do get confused you should check out our learn rails course on codeacademy.com the link to that's also in the description and it'll teach you even more about Ruby on Rails and what I'll go through today and it'll provide a little more background too so the project we're going to be working on is threadly and if you were here last week this is what the project looked like we have a text box where you can share your thoughts and so you could type something like hello and when you post the comment goes down below you may have noticed last week if we refresh the page we lose the comments and that's because we didn't add any kind of persistence to the project and so this week we're going to work on adding persistence to the project by using Ruby on Rails and if you're not familiar with rails rails is a web application framework for Ruby it makes creating web applications really easy by providing developers with a lot of tools to get started in fact the code academy website itself is built with Ruby on Rails so you can use it for introductory projects and you can also use it for really large scale applications so to get started we're going to create a new project and the way we create a new project is we're going to go into our terminal and we're going to type rails new and so rails new will create our new project and we're going to name it threadly and there'll be a lot of output here and so if you look in our code editor now we have a ton of new files and we're not going to look at all of them today we're going to focus on a few I'm going to CD and go into that directory that was just created spell it correctly this time and once we're in our directory we can start our application by running rails server so this will start up a web server and if we look in the output we see that our rails application is now starting and running at this address so I'm going to go into my browser and Go to http localhost 3000. and when I go there we'll see that we have my application running and so this is the default rails application output it's you'll get pretty familiar with this if you make a lot of applications um so today we're going to work on adding that database persistence to this application and the way we're going to do that is by following What's called the MVC pattern in rails and MVC stands for model view controller and it's a technique for composing applications into three different components the three components the model is where we handle all our business logic and database interaction and then our view is used to handle how we present that data to the user and our controller is what we use to pass data between views and models I'm going to start off by creating a model and we're going to do that from the command line again and the way we exit our rail server is by pressing Ctrl and C at the same time so that'll stop it so now if I go back and try to view my page now you'll see it's I'll get an error because it's not running so now when I go to I'll generate my model by typing rails generate and I'll say I want to generate a model and the model I want to make is post and that's what we're going to call those comments so I hit enter and we'll see that a couple files got created we see that we have this file DB migrate with a timestamp create post and we have this app model post.rb those are the two that we're going to focus on today and so I'm going to go and show you those two files so if we look in create posts that's in app sorry DB migrate and this is what's called a migration file so this describes how you want your data to look like in a database and so we see that we're creating a table called post and we're adding a field called timestamps we look back at our application we have the only thing that we want to save to the database is a single field and the field we're saving is called a comment so we can go ahead and add a comment to that table by inside of this create table block we can say t string and this says create something a column in our database called string and now we need to give it a name so we'll use comment so now that we've updated our migration file we need to update our database to have that new column in it and the way we do that is with the break migrate command so we run rake DB colon migrate we'll see that we we migrated our database and we added our new column so now I'm going to show how you can use the rails console to interact with the model so to get into the rails console we just type rails console and inside of the Rails console we can type any Ruby code we want so we can do things like two plus two and see that it equals four but we can also interact with the model we just created so we can get to that with post and so this is our object that represents posts in our database and so if we want to create a new post we can say something like new post and we can set it equal to post dot new so now we've created a new post object but we haven't saved it to the database yet and before we save it to the database we want to modify our comments so we can save new posts and we want to change the comment property so we can do comment and we can set it equal to something like hello there and now once we've updated the comment for our post we can save it by doing new post dot save we'll see that we ran it when we called new post.save this database query got ran and this is what really makes one of the things that makes rails really quick for development is you don't have to really have a really good understanding of how MySQL or SQL light works or any database because rails will handle a lot of those interactions for you so now that we have our model created and we kind of have a basic understanding of how to use it we need to work on creating a controller and a view in order to display that data for the user so the first thing we're going to do is create our controller and to create our controller we're going to exit out of the Rails console again and we're going to run another one of those generate commands and you'll run a lot of these in rails and this is called scaffolding and it's one of the ways that rails makes development really easy so we'll run the command rails generate and this time we're going to generate a controller and we're going to name it posts and again we'll see that rails has a lot of creating a bunch of new files the one that we are going to look at is in the app controllers directory and it's the post controller so this will start off empty and there's not much here and so it's our job to add the logic to interact with our database and to provide data to our view in here and so to before we do that we have to have a way for our application to get to our controller and in rails that's done with what's called routes and um what a route does is when you get a request for a URL to the web browser so if I go to localhost 3000 slash posts this request will go to rails and it'll go to the router and the router will look at all the the routes you've defined and it'll okay it'll dispatch it to one of your controllers and we can see all the routes that we have in our application by running the rake routes command in our terminal and rails will tell us that we don't have any routes currently defined and that we should add some to config slash routes that RB so that's going to be what we're going to do now so we're going to open config routes.rb you'll see there's a lot of code in here already and these are all comments that just describe the different ways you can interact with routes the routes the first route we're going to create is one that's going to create actually several routes and we're going to do this by using a resource route so we'll type resource and the resource that we want to create routes for is our posts so now if we go back to our terminal and we look at what routes Exist by running rake routes again we'll see that rails is automatically generated a few routes and this is what's the router generator called crud routes which stand for create retrieve update and Destroy and um you'll see we have our create route we have our edit route we have our retrieve route which is show and we have update and Destroy routes and we're going to focus on our crate route and we're going to also create one additional route for viewing all of our posts together so the new Route One new route we're also going to create is we want to create a new route for the home page and the way you change what the home page route is is by using the root route so we're going to type root and then we're going to do our controller which is post and the action we want to do is index now we're going to go ahead and create that index action and so this is our controller and right here is our action if we go back into app controllers post controller we're going to create a new action in here and the way you create a new action is by creating a function inside of the post controller class and our first action is going to be called index so if we look back on our last readily app we see that we we want to get all the posts that exist and we want to display them and we also want to create have the ability to create a new post with a new comment so to retrieve all the routes we can create a new variable and we're going to call it posts and we're going to use the at symbol in front of it and this allows us to pass variables from our controller into the view that we're going to create afterwards so we'll do posts equal and we'll do posts dot all and so this will retrieve all the post objects that we have and assign it to the variable post and the one additional thing we want to do is create a new post that we'll be able to use for our form and our page so we'll create a new post we'll call Post new we'll do a new post that sounds better and we'll assign it to post dot no now we have our posts and we have our new posts so the next step is to create a view so that we can view all these posts and create a form there and we're going to create our view in the app views post folder we'll create a new file and we're going to call it index.html.erb ium yeah it's saving in the wrong directory so in posts we're going to create index .html.erb and in here is where we're going to take our code from the last threadly project and we're going to put it inside of our Erb template and Erb is um stands for Ruby template and so now we'll go into our index.html from the threadly project and again this code is linked to in the description of the YouTube video and the code we're going to copy is all this code inside of this main div and we'll paste it in and so now we're going to start a rail server and see what happens when we go to a localhost 3000. foreign and we'll refresh the page and you see that we now have some code here we have our it's not styled yet but we have the same code we had before but we don't really want these to be the same all the time we want to be able to modify the comments so the way we're going to do that is we're going to use our post variable that we have before and we're going to iterate over them in a loop and for each one we're going to create a new Li for it the way we do that is with an each Loop and we'll go into our comments UL and we're going to delete what we have already and we're going to create a new Erb block and the way we do that is with the less than and then the percent sign and we're going to close this and inside we're going to do a loop over our post we do our our post variable and then we want to Loop over each of them and for each of them we're going to do a block and this is a Ruby block syntax if you're not familiar with this you should check out the code Kennedy course on Ruby and so what's going to happen is any code we type inside of this block is going to get executed ever for every post that we have in our database and what we want to do is create an Li and output it on the page for each of these elements so we can create our Li and inside of our Ally we're going to Output the text of the comment and we do that with another Erb block but this time we do percent equals and the percent equals is Erb syntax that outputs whatever's inside of it onto the page and the thing we want to Output is the comment of the post and we can do that with P dot comment so I'm going to save the file and I can refresh the page and we'll see that now instead of those default comments that we had in the page before we have our comment from the database and we can even go back into our rails console and I'll Ctrl C out of the server and go back into rails console and I'll do the same thing I did before to create a post so I can create another new post and I'll set the comment equal to and I'll save my comment or my post and I can exit the rails console and we see this just like before we have a database insert statement and now I'll start my rail server again and when I refresh the page we have our new comment that was there that we just inserted into the database and if I refresh the page it's still there again and so our comment from the database are always there so the next thing we have to do is actually allow the users to save these comments so to do that we're going to update our existing form and use rails form helpers so that we can um have rails handled the saving of our form so we're going to replace our formative that we have our form element and the closing form element and we're going to replace it with an Erb block and we're going to use the rails helper form four and the form 4 helper is a function and you need to pass it the object you want to create a form for and in this case we want to create it for our new post that we created inside of our controller and if we look back at our controller we see that that new post was just post.new and it's the same thing we did in the console so back in our template for the new post we want to do we're going to do another do block and we'll use F this time and this F represents our form object and in place of where we had our slash form element before we're going to use another Erb block and we're going to end the Ruby block now if we look at our if we look at the existing form that we had in the inspector we'll see that the Syntax for the form just says form class equals form but I'm going to refresh the page now that I've used the rails form helper and if you notice we don't actually have any output here and that's because we forgot to add we forgot to tell it to actually output anything because we didn't use the equal sign in the Erb syntax to instruct it that we want to actually output the form for so now if I refresh we'll see that we have a new form and if I inspect it this time we'll see that rails has added some new stuff to it so we see that we now have an action that goes to slash posts and the method that it uses is post and if we look back at the routes that we have we'll see that the post method for post corresponds to a is being routed to a controller post and to an action called create so now in order for us to save it we need to implement that create action inside of our post controller so let's go back into our post controller and we're going to create a new method called create foreign so this is the action that will get called when we hit that post URL with a post HTTP method so we're going to use another rails convenience method and the convenience thing we're going to use is called params and the params will allow us to validate that the data that was passed to our method was correct and I'm going to create a new another method and I'm going to create a private method and use private methods so that you can't route to them any method that's public on a rails action controller will be is considered one that you can route a URL to so we're going to use private because we don't want this to actually be a method that can handle a request and we're going to call it post params and we're going to use another rails helper called params and with params we're going to require that we have a post and with our post we're going to permit one field to be modified and we're going to allow the comment to be modified and so now when we call this function rails we'll look at our parameters that we have that we pass to the route and it'll make sure that there's one for post and it'll make sure that the only parameter that exists for that is common now just like we did on the terminal we're going to modify our create route so that we actually create the post that we've retrieve so we'll create a new variable and we'll call it new post and we'll assign our new post to post.new but this time we're going to pass it parameters that we get from calling our post params function and so this will get our parameters that we passed and pass them into the new post object and once we have our new post we're going to call new post dot save and once the post is say we want to redirect the user back to the home page and so we redirect them back to the home page with the redirect to method and when you have redirect 2 you need to pass it a URL to direct them to and rails has helpers for any route that exists on your page so you can see the helper we have root for going back to our home page so we can get the URL to that by calling root and then underscore path and this will generate a URL that goes back to the home page and the last thing we have to modify is we need to update our HTML so that our input fields are also rails input fields and we do this by using form helpers again and we'll I'll first we can go ahead and delete this input and we're going to make another Erb block and inside of it we're going to do F dot text field and so this will create a text field that's set up to be submitted by this form and we're going to pass it comment which is the name of that field and just like before we can set placeholder text on it and we're going to set the placeholder text to share your thoughts and we're going to do the same thing for our submit input and instead of using the F text field method we're going to use f dot submit and we're going to pass we're going to call the field host and we're going to give it a class of BTN so that we can style it like we did before so now when I refresh my page first I have to remember to start my rail server and when I refresh the page see that we have our form here it looks just like before but if we inspect the element we see that our parameters now called post comment whereas before it was just called comment and this is goes back to the post params method that we defined so when we submit that form we're going to have it's going to see that we have a post because that's the post parameter and it's going to see that there's a comment field because we have that comment right there and this is all handled by rails so it makes it it's really really helpful it makes you able to develop really quickly so now that we have our create method and we have our template updated to have use the rails form helpers we can go ahead and see if we can share our thoughts and we'll and when we post we see that we now have our new we just our new comment down below and if we refresh the page it's still there and so now we've handled all the persistence parts so the next step is we're going to want to take what we had before which is this really nice looking form and we're going to want to do the same thing in rails and this is just as simple if you know how to do CSS in static websites doing it in rails is just as easy so we're going to go back to our threadly project that we did before and we're going to go into our styles.css file and we can actually copy just all the styles that we wrote before and we can just go into our rails application and we'll go into the app assets folder and inside of there there's a folder called style sheets and we're going to put all these Styles we can just paste them into the application.css file okay and now if I refresh the page we'll see that our styles are here but a little bit different and that's because before we were using bootstrap so we also have to include our bootstrap CSS and if we want our fonts to look like it did before we should also include that Google style sheet font so if we look back at our index.html in our solution code and again the solution code is just in the description we have we see that we added these two links for our style sheet files for the Google font and for the bootstrap CDN so we can actually copy those and we're going to be able to put those into rails and the place we're going to put that is in a layout so if you look in the app views layouts folder you'll see we have this one called application.html.erb and a layout file is what decorates different controllers so when a controller and action pair get run they return some code and the code that they return is HTML and whatever HTML they return will get placed Inside by this yield function so when we call this yield function tells rails to Output the contents that was returned by the controller in action onto the layout at this location so we can make use of this by modifying our layout which gets included on all of our pages and we can add style sheet tags for our bootstrap and our Google font URL and if you look rails has already added two of them or they added one for our style sheet link tag and one for a JavaScript tag so we're going to add two stylesheet link tags and we'll do application and the second thing we pass is the URL that of the font or the CSS file we want to include so I'm going to copy and paste from our solution code and I'll end my Erb block and I'll create another one and use the style sheet link tag again but this time I'll use the bootstrap URL and again I'll just copy and paste from the solution if I go back to my page and refresh see that we have oh looks like I created two so rails is also really nice at detecting syntax errors so if you ever have a syntax error rails will tell you which line it occurred on and sometimes it'll even tell you why it occurred so we see that we had a syntax error on line six of our layout and it was because we had two of these Erb uh Echo blocks so I'll remove the first and refresh the page and now it looks like we had before the only thing we're missing is we don't have our header that says threadly so we can take our header that was in our solution code and I'm going to paste this on into our layout right above the yield statement because we want to have our header show on all of our pages that we might make later and if I go back to the threadly page and refresh that we have our heading here and we go back and forth it looks just about the same and I'll create a new comment in our rails app and I'll say and I'll post and there's my new comment down below and so now our fun our two websites function just about the same except now our rails one has persistence and we can refresh the page over and over again and more comments will still be there but our old static JavaScript page we see that this won't get saved and it'll show up once but when I refresh we lose it and so that's um the power of using Ruby on Rails we can create pretty functional websites really fast if you want to learn more about rails you should be sure to check out our course on Ruby and rails that we have Below in the description and if you're interested in doing more projects like these in on codecademy you should check out code cadmium Pro which we also have a link to in the description and I'm going to try to answer a few questions now if um since we have some time um so could we do what we did today with only Ruby and not rails um you certainly could it would be much much harder if you the amount of code that's been written to create Ruby on Rails is pretty vast and so using rails just speeds up development a lot I personally wouldn't try to create a website without using something like Ruby on Rails it just it's a lot of code you're going to have to write that you it just it takes a longer time so I wouldn't do it um why are forms used to pass the input data back and forth to the DB is this a good way to do things in most cases um yeah you can forms are a perfectly fine way to pass data from the views to the database one thing you'll see that we used is that's why we use those post params before so if I go back into my controller okay the post params ensures that only the data that we want to go into our database gets there so we're only allowing a comment to be passed in and the other thing rails does is active records the thing that handles the database interactions has a lot of security features built in and so it's pretty safe and you should use forums they are good and they'll make development faster so one question is do Wrap so routes what are what tell the server what URLs to access uh yeah that's a good way to put it so when you get a request so you can see like if I roll up here we see in our log that we started get for slash so when rail sees this request it'll go to the router and it'll ask the router what is Cape what is set up to handle a request to slash and because we used in our routes we said the root can be handled by post index rails will now the router will route that URL to the post index controller and action pair if you close the server and reopen it will we still have the post save well let's find out so we're going to we'll type a few posts hey there will this be saved when I restart and if I post that and refresh it's there right now but let's see if I exit my server and I'll now it's not running and if I start it up again and refresh we'll see that it is in fact saved and that's because we've saved that post into a SQL Lite database and so if you restart the application it'll always it'll come back um how can we tell what code goes in each file in the file system Navigator this is something that you kind of will learn over time but it's also one of the things that makes rails really nice because rails kind of sets it up so there's only certain places you can put certain things it creates all these directories for you so if you look an app you know that your controllers will go and controllers your views will go in the views folder your models will go in the models folder and rails is really good at convention so it wants you to do things a certain way and you try to do things a different way you'll kind of see quickly that you're not meant to do that um to reverse the post output making a post go to the top of the list instead of the bottom would you recommend it be done using CSS or in the controller in the model I would recommend that you do it in the controller and you can I'm not going to show it right now but you can write a query that will instead of retrieving just by I by default when you do post.all it'll retrieve them from the first ID to the last ID but you could do something like retrieve the newest post instead of the um oldest post if the class equals comments then why is the post comment and not comments so the class is post not comments and so our if I um if we look back at our posts we can go to our migrations so our the class that we have is post and one of its properties is common so it's not that we have a comment that has a comments we have a post with a common can rails be used to develop mobile apps too it you can't make Native apps with rails but you can make um web applications that are mobile friendly and for those of you who don't know a native application is one that you could for instance download in the Apple App Store or in the Android App Store and then does the percent sign call a ruby specific template engine yeah so the percent sign is specific to the Erb the X and you use that whenever you want to do something an ERB specific thing or when you want to call a ruby function and I think that's about as much time as we have for questions um thanks everyone for joining today and again you should check out the course on Ruby onrails on codecademy.com and you should check the link to Pro if you want to get even more in depth on an extra help on learning Ruby on Rails and thanks everyone for joining and have a great day