Hey everyone, this is David Patlut from Codeacademy. In this lesson walkthrough video, we'll take a look at the second lesson in the Learn JavaScript course. In this lesson, we'll be talking about variables and learning how to use variables in JavaScript. I'm really excited to be part of your learning journey. Let's get started. Let's talk about the key concepts we will cover in this lesson. First, we will cover a brief introduction to JavaScript variables. We will talk about things like what variables are and why we want to use them, then, we'll cover some basics of how to work with variables, specifically we'll first talk about how to create variables. We'll talk about how to create variables using keywords like var, let, and const. Then, we will talk about using variables with mathematical operators. We'll also talk about using the plus plus and minus minus operators with variables. After that, we'll talk about performing string concatenation with variables and then the basics of string interpolation. Lastly, we'll talk about the type of operator. There's a lot to cover in this lesson. Let's go ahead and get started. Exercise one Variables Let's start with a brief introduction to what variables are in programming. We need a way to store data into our computer's memory, whether it's a username, an account number, or even something like a color. This is kind of where variables come into play. We can think of a variable as a way of labeling and storing a piece of data in our programs. By storing the data in a variable, we are telling our computer's memory to hold on to the value for future use. We are also creating a label for the value so if our program ever needs to find it it can do so fairly easily. For example, take a look at the graphic on the right. Here, we have an illustration of three variables being stored. There are three components here that represent how a variable works. First, we have a box which represents the variable, itself. This box is equivalent to a space in our computer's memory. The second component is the variable name or, in this case, the label of the box. Each box in this image is labeled with a specific name. These labels are equivalent to specific locations in our computer's memory. By labeling them, we can tell our computer how to quickly find which slot of memory we are referencing, or in this case which box we want to access. Lastly, we have the value we are storing in each variable or in this case each box. Each of the boxes in this graphic has a different value that is being stored, such as a string sunshine, a number 100, and a Boolean value of true. The important thing to remember about variables is that variables, themselves, are not values. This box is not the equivalent of the value of sunshine. They contain values and we can access the value via name, or in this case, the box's label, but they are not the value that is stored inside of them. Once we start working with variables, you will see that just because, for instance, we save the string sunshine In the box called my string, does not mean we cannot change the value later. This allows our programs to be fairly dynamic if we need to change our variables at a later point. Just like a regular box in real life, we can open it up, pull out the contents, and change it for something else. All right, now that we've talked about what variables are, let's start to learn how to create them. This exercise has no checkpoints or community questions about variables, so we'll move on to the next exercise. Exercise 2 Create a variable (var) Before ES6, the latest version of JavaScript, there was only one way to create a variable, it was using the var keyword. To create a variable using the var keyword, we will need a few components. We will need the var keyword, a variable name, this is the label we are assigning the variable so our program knows how to access it. We'll also need an equals assignment operator which will denote to JavaScript we are assigning the variable some value. And lastly, the value we want to store inside of the variable. Let's take a look at an example on the right. Let's talk about the four components we just mentioned. First, we have the keyword var that tells JavaScript we are creating a variable. In programming, you may hear that when a variable is created that it is declared. The term declaration is used to describe when we create something new using an identifier such as a keyword like var. Next, we have the variable name called my name. Notice that the capitalization of the variable is unique. This is known as camel casing and it is the standard convention when naming things in JavaScript. Then, we have the equal sign assignment operator. The operator tells JavaScript we want to assign a value to the variable. And lastly, we have the value we want to store into the variable, which in this case is the string Arya. In programming, when a variable is assigned a value, it means that it is initialized. Initialization is the assignment of initial value to a variable. So in this case, we could say that the myName variable is initialized with a value of Arya. Great. Now that we've broken down the basic syntax of the variable there are two more notes worth mentioning about variables. First, it's important to know that there are restrictions in the naming of a variable. Variable names cannot start with a number. So, for example, the variable here called 23myName is not a valid variable name and will produce an error. JavaScript, also, has a set of keywords that are protected from being used as variable names. For example, here we have var function equals the string keyword. We cannot use function as a variable name because it is a protected keyword in JavaScript. that does a separate functionality, we'll learn a little bit later in the course. For a comprehensive list of keywords that can't be used for variable names, visit the link provided in the video's description. In addition, we cannot have spaces in our variable names. Here, var my space Name equals the string David is not a valid variable name. And lastly, make sure to keep case sensitivity in mind when creating variables. Take, for example, the two variables of my age listed here. Both of these have very similar values and names, but notice the capitalization in the first variable versus the second. JavaScript will read these two as two distinct variables. All right, now let's move on to the exercises checkpoints and practice writing a variable using the var keyword This exercise has three checkpoints that we have to get through. let's go ahead and take a look at each one. The first one says the following, to clear a variable named favorite food using the var keyword and assign it to the string pizza. Alright, let's go ahead and do that now. We'll write VAR, I'll go ahead and copy and paste this name of the variable here, and we'll assign it to the string pizza. Don't forget to add your semicolon and run the code, and it looks like it passed. The next checkpoint asks us to declare a variable named numOfSlices using the var keyword and assign it to the number 8. Let's go ahead and do that now. We'll do var numOfSlices and assign it to the numerical value of 8. Again, notice that we're using camel case here to define the names of our variables. Let's go ahead and run our code. And it looks like we've passed. Lastly, the third checkpoint says the following under the num of slices variable use console.log to print the value saved to favorite food. On the following line, use console.log to print the value saved to numOfSlices. Basically, it just wants us to console.log both of our new variables. In our output console, we should see pizza and 8 come up. We'll do console.log favorite food semicolon and console.log numOfSlices, oops, there we go, and if we run we can see pizza and 8 come up and we pass the checkpoint. If we scroll down to the bottom of this exercise, we can see that there are a couple of community forums questions. None of these are particularly about the VAR variable and how to use the keyword, but you can check these out on your free time. We'll be covering some of these questions in later exercises, such as comparing var and let, which we haven't learned just yet. Let's now move on to the next exercise. Exercise three Create a variable (let) When ES6 was released, JavaScript added a new keyword used for variable declaration called let. If you're wondering what the difference is between var and let are, don't worry we will talk about that in just a little bit. For now, it's important to note that both var and let are used frequently in online resources and are both important to use and know. All of the rules we already discussed for var also apply to the let keyword. Take a look at the example on the right. Here we have a variable called meal and assigned it a string value enchiladas. not much is different here than what we did with var. It's worth noting two additional rules about variables that we didn't discuss in the previous exercise. For both let and var, we can choose to initialize a variable with a value. If we don't explicitly assign a value, it will default to having a value of undefined. For example, take a look at the code on the right. Here's an example of a undefined variable. Here we have a variable named price that is not initialized with a value. If we were to console.log the variable, our output would be undefined. We might choose to do this if we don't immediately know the value our variable is going to contain and are planning to assign the value later in our script. Speaking of assigning values later, any variable that we declare can be assigned or reassigned a value at a later point in a script. This is an important rule to know. For example, take the same variable named meal from earlier. Here we have assigned the same value of the string enchiladas. If we console.log meal, we shouldn't be surprised that the output is enchiladas. Then, if we want we can reassign the value to say a string like burrito. If we now output the variable, the value of the output is now burrito, the new reassigned value. Remember, like we covered in the first exercise where we talked about an introduction to variables, variables are just empty boxes. We can put values in them and take them out and replace them with a new one if we choose to. The label, however, and in this case, the name of the variable called meal, will stay the same. Let's now move on to the exercise of checkpoints and practice using let. There are two checkpoints for this exercise. Let's take a look at both of them. The first one says, "create a let variable called change me and set it equal to the Boolean true." Alright, let's go ahead and do that. We'll do let changeMe and set it to the Boolean of true, add our semicolon, and run our code. Looks like that successfully passed. Let's go up here, start a new line and take a look at the second checkpoint. The second checkpoint says the following, "On the line after changeMe is declared, set the value of change me to be the Boolean false." To check if changeMe was reassigned, log the value saved to changeMe to the console. Alright, so we're going to reassign the value of changeMe and then we're going to console.log it. Alright, so we'll go changeMe, set it to false and then console.log changeMe. Add our semicolon, run our code, and it looks like we passed the checkpoint. One thing to note about this script, let's say I went and add another console.log on line two right before we changed it. Let's go ahead and look at what our output is. If I run my code, you can see that, depending on where you actually console.log changeMe, in this case on line two, we're doing it before we reassign the value, the value is printing true. After line three, now the value is console.logging false. This is because JavaScript runs through the code line by line, so it starts at line one and it goes to line four. So, even though changeMe eventually does become false at certain points in the execution of the code it is still true. In this case on line two, it's still going to return true, as we can see with the output, and on line 4, after it was changed, now it's returning that false value. Let's now move on to a community question and see what Codecademy forum users are asking. A frequently asked question by Codecademy users for this exercise is, "What are the differences between var and let which should I use?" At this stage of the course, the answer will, unfortunately, be a bit unsatisfying. The major differences between var and let have to mainly do with more advanced topics such as scope functions and other various things. Most of these more advanced topics will come up in later parts of the course. For now, for the purposes of working with variables in the small programs we're writing in the lessons exercises, there aren't any major differences that we need to be aware of. They still store data and can be used fairly similarly. Once we start working with bigger programs, we will start to explore how var and let should be used and when they should be used. It is important to know both even if let is now the typically the de facto choice for working with variables in most JavaScript programs. If you're still curious about the differences and want to get a preview of later topics, visit the community forums question linked In the lesson. Exercise 4 Create a variable (const) In addition to the let keyword, the ES6 version of JavaScript introduced another keyword called const. It is short for constant. The syntax for a const looks very similar to what we did with var and let. For example, take a look at the const on the right. The syntax is pretty much identical to var and let except now we're using the const keyword. Here we have a constant called myName with the string value of David. However, constants have specific rules that make them a unique type of variable compared to var and let. The first rule to be aware of is that the value of a constant can't be reassigned. This means that once we assign it a value, we cannot change it at any later point in our program. Attempting to do so will result in a specific error called a TypeError. Take a look at an example on the right depicting this We have the const, myName, with the string value of David and then we try to reassign it to Nik. What would happen is we get a TypeError that specifies assignment to constant variable. In addition to this rule, in contrast to var and let, const must be assigned a value when they are declared. Declaring a const without doing so will produce an error called a SyntaxError. Take a look at this example on the right where we depict this error. Here, again, we have the const myName, but here, instead of assigning it a string value, we just declare it without any value. If we ran this code, we would produce a SyntaxError with the message missing initializer in const declaration. Const are incredibly useful when we have data we know is unlikely to change, something like a date of birth or a unique account number. They also offer a layer of protection to our programs so that important data isn't accidentally overridden. This can happen with variables using var and let since they can be changed in later parts of the program after initialization. Additionally, since const also need to be initialized with a value, it forces a developer or programmer to think deeper about the data that the program is likely going to use. Let's now move on to the exercises checkpoints and practice using const. Let's take a look at the three checkpoints that we have for this exercise. The first checkpoint says the following, "Create a constant variable named entree and set it to equal the string of enchiladas." Alright, we'll use the const keyword to define a constant. We'll name it, call it entree, and set it equal to the string of enchiladas. Go ahead and do that and then run our code. Great. Let's now move on to the second checkpoint. The second checkpoint says the following, "Just to check that you've saved the value of enchiladas to entree, log the value of entree to the console." So, I'll go ahead and add console.log entree, add my semicolon, and run the code. Looks like that passed. Let's take a look at the third and last checkpoint that we have to do. The third and last checkpoint says the following, "Great. Let's see what happens if you try to reassign a constant variable. Paste the following code at the bottom of your program." Alright, let's grab this code and in this piece of code, we're doing entree equals tacos. Now, we've already seen what happens with constants being reassigned, so let's go ahead and run our code, and we can see that we indeed have a TypeError where it says assignment to a constant variable. Remember, because we have a constant, we can't reassign it. This is validated with the rest of the instructions for the checkpoint. The checkpoint also says, "After you clear this checkpoint, if you want to see another quirk of constant action, open the hint." Let's go ahead and do that now. Open this hint, and let's read what's inside here. Since our program stops running after encountering an error, we need to delete the line of code from the previous step. Alright, let's go ahead and delete that piece of code. Now, let's test what happens when we try to declare a const variable without a value. Paste in the following code to your program. Alrighty, do const testing. Now, we've already learned about the second rule that we have with constants, so the output of this shouldn't be too surprising. If we run our code, we can see we get a SyntaxError missing initializer in const declaration. And that's pretty much the same thing that's said in the hint here. There's one more thing worth mentioning if we go ahead and delete this line of code and do this const entree equals, say, tacos. If we run our code we'll get a unique error that we haven't seen before it's a syntax error where it says identifier entree has already been declared another Quirk of constants is that we can't redeclare the same constant later on in our program once it's defined so here in our code since on line one we just Define a constant called entree we cannot create another constant with the same name later in the script this is a unique rule that applies to both const and let now for example if we did VAR and common top is code here let me go ahead and just comment it out really quick if we did VAR x equals 10 and VAR x equals 5. we can see if we ran this code then we wouldn't get an error this is an interesting Quirk that only occurs with the new es6 style types of variables but doesn't occur with variables that are declared using the VAR keyword something interesting to remember now let's move on to a community question for this exercise some codecademy forms users wondered why would we want to reassign a new value to a variable it's an interesting question because in reality a program could Define a ton of new variables every time a piece of data is changed however in the long term not reusing variables would make our programs pretty bloated and hard to work with let's switch over to a workspace and take a look at an example here's the workspace we'll be using for this lesson don't worry we'll share a link in the video's description so let's get back to the question why would we want to reassign a new value to a variable well imagine for example a quiz website with a variable called score so let's say we had let score equals zero some variable to store the score that a user might get on a quiz now as the user progresses through the quiz would it make sense to redefine a new variable every time a user gets a new correct answer well it might look something like this right depending on the number of questions we might end up having a ton of new variables like you know new let's see let new score one right equals you know one if they got a one question right or we'd do another one new score two equals five because they got a couple things right you can imagine in this kind of scenario where we're constantly changing something about the program it doesn't necessarily make sense to constantly create new variables in each case this would make the program hard to read and pretty inefficient instead we can use the same score variable and update it each time this helps the program be dynamic and be able to effectively keep up with changes that occur by say a user it's also worth noting that this is kind of why constants are such a great addition to the JavaScript programming language it lets us categorize data into two buckets data that will stay the same throughout the course of our program and data that will change over time that means we do in fact have instances where we don't want to reassign variable values and we have some functionality to accomplish that we just have to be pretty selective about what that data is as you start to build bigger and bigger programs you'll see that reassigning a variable is a pretty common occurrence and not doing so would not be the most efficient way to build bigger programs exercise five mathematical assignment operators when working with variables and particularly numerical data it's common that we want to make quick adjustments to a variable's value this is where a mathematical assignment operators come in there are four common assignment operators to be aware of first we have the plus equals operator that helps add a value quickly to a variable we also have minus equals multiply equals and division equals notice that these map to the four common mathematical operations we can perform with regular numbers so what does this look like in practice take a look at the example on the right for what our code might look like without these operators say we had a variable W which is equal to the value of 4. the numerical number of four let's say we want to add 1 to it we would write w equals W plus 1. if we console.log the output our output would be 5 because we added one to four we can also do this a bit quicker using the mathematical assignment operators for instance the plus equals operator in this case we have the same variable W which is equal to four but instead we could write W plus equals one if we console log this variable again we will get the same output it's worth noting that even if we use these math assignment operators under the hood JavaScript still computes it similarly to the syntax mentioned in the first example the benefits of using these operators are simply for giving developers a shorter simpler syntax let's now practice using these operators in the exercises checkpoints in this exercise we have four checkpoints to go through and we'll be practicing the mathematical assignment operators we just learned in the script main.js we're provided with a couple variables and console log statements to print out the value of the variables let's take a look at the first checkpoint the first checkpoint says use the plus equals math assignment operator to increase the value stored in level up by five alrighty we'll go down here we'll take the level up variable and then we'll use the plus equals operator and add five if we then run our code we can see that the value of level up in our output console is 15 and it was 10. alrighty let's move on to the second checkpoint the second checkpoint says the following use the minus equals mathematical assignment operator to decrease the value stored in power level by a hundred alrighty let's go over here make the power level variable and then minus equals 100 run our code and we could see we've passed that code and if we go up here we can notice the value is now 100 less than what it was before which was 9001. now to checkpoint three checkpoint three says use the multiplication equals mathematical assignment operator to multiply the values stored and multiply me by 11. alrighty let's go over here same thing as before multiply me multiplication equals by 11 and run our code and we've passed the code and the value has changed to 352. alrighty let's do the final one the fourth checkpoint says use the division equals mathematical assignment operator to divide the values stored in quarter Me by four all right let's go to our editor do quarter me Vision equals four and run our code oh looks like we misspelled the variable let's go ahead and go up here fix that up and then run the code again and it looks like that solved the problem alrighty let's move on to a community forms question while this question isn't Linked In the exercises form section A commonly asked question about mathematical assignment operators by the developer Community is do mathematical assignment operators work with other data types let's switch over to our workspace and find out we're back in our workspace let's take a look at a couple of examples of using math assignment operators with different data types let's start first with booleans so let's define a Boolean value let's call it Vaz and give it the value of true let's go ahead and see what happens when we try to add a Boolean and a number together in JavaScript we'll do so using the math assignment operators so let's do let's add a comment here that says Boolean plus number and then we'll do baz plus equals one semicolon and then console.log that's let's see what happens when we try to add the value of one the numerical value of one to a Boolean value of true go ahead and run our code we can see up here our output is actually 2. the reason this happens is because true and false actually have numerical values true is represented by one and false is represented by zero so if I change this to false let's see what happens if we click save and run we can see because false has a numerical value of zero the output is one all right let's change this back to true and then try another example let's not try to use a string and combine a string with different data types so let's see what happens let's say we had let Foo equals true as our string let's say we wanted to add a string and a Boolean so this is a string plus Boolean so let's do Foo plus equals to false see what happens I'm going to add just some semicolons here because I missed that and then we have to add our console.log Foo and I'll go ahead and just comment out our console.logbas so we only have one console.log and then let's click and run so we can see what happens with a string and a Boolean is we actually have string concatenation so here Foo the string Foo is combined with a string value of false so we get the string Foo false this also happens when we're working with numbers and strings so let's let's do something like number plus string so we'll do something like Foo plus equals seven as an example if we console.log Foo here and get rid of this code for a second we can see the same thing happens where the string of Foo and the number seven get concatenated together to form Foo 7. so in essence yes you can use these mathematical assignment operators with other data types it's actually pretty common but you do need to be aware of the different variations that can happen depending on the data type that you try to work with exercise six increment and decrement operators in addition to the mathematical assignment operators we have already learned JavaScript also has two additional operators that help quickly modify a variable's value the first is the increment operator denoted with two plus symbols or also known as Plus it will increase the value of a variable by one the next is the decrement operator which does the opposite denoted with two minus symbols also known as minus minus it will decrease the value of a variable by one let's take a look at an example of both first we have the increment operator we have a variable called a with a value of 10. if we run a plus plus our output will be 11. we quickly added a value of one to the variable of a similarly let's examine decrement let's use a variable called B with a value of 20. if we do B minus minus our output will give us 19. great now that we have covered the basics let's switch over to the exercise and practice using these operators this exercise has two checkpoints let's go through them the first checkpoints is the following using the increment operator increase the value of gain dollar alrighty we'll go over here new gained dollar plus plus go ahead and run our code and we've successfully passed the second checkpoint asks us to use the decrement operator to decrease the value of lost dollar alrighty we'll go over here we'll do lost dollar minus minus and we'll run the code looks like we've passed remember just like before when we're using other mathematical assignment operators just because we use a shorter syntax doesn't mean JavaScript doesn't have to compute it in a similar way as we saw before under the hood it's doing game dollar equals gain Dollar Plus One the same thing happens with lost dollar except it doesn't minus one these operators are just simple syntax tricks that JavaScript provides us to do operations more quickly let's now move on to a community question while this question isn't linked in an exercise's form section A commonly asked question about the plus plus and minus minus assignment operators by the developer Community is how do the prefix and postfix versions of plus plus and minus minus work we didn't cover these terms in the lesson so let's switch over to our workspace and cover them now in JavaScript the plus plus and minus minus operators can be used in two ways let's take a look at what both look like let's first create a variable called num with a numerical value of 10. so we'll write let num equals 10. what we learned in the exercise is known as the postfix version of the increment and decrement operators so when we write num plus plus we are using what's known as the postfix form of The Operators however we can also use a different form called the prefix form we would write it like this we would do plus plus no notice that instead of using the operator at the end of the variable we are instead using it at the beginning let's take a look if there's any differences we'll go ahead and do a console.log num here semicolon and a console.log and I'm here and let's run our code and see what happens notice that there isn't actually any difference in the way that we run it both the postfix and prefix version do add 1 to the variable of no so how do both of these forms actually differ well in order to show the differences let's define a couple more variables and play around with the postfix and prefix notations let's first go ahead and comment out this code so we don't have any extra console.logs down here we'll say let prefix equals 10. we'll also Define another variable called postfix also with the value of 10. down here we'll say let new prefix equals prefix plus plus and down here we'll add another variable let new postfix oops equals postfix made a small mistake I actually meant to do prefix here and add it in the beginning notice that this is a bit different than the example we were doing a bit earlier so instead of here on line 38 and 40 where we did it by itself we're actually saying here let's use these operators and assign it to a new variable in this case new prefix and new postfix to see the differences in action let's go ahead and console.log both of these new variables so I'll do const log blog new prefix and down here we'll do console.log new postfix let's now run the code our results are 11 and 10. all right let's first examine prefix I added some space just so we can concentrate on this part so what's happening with the prefix notation that comes before the variable in this case prefix if we console.log new prefix our answer is actually 11. now this shouldn't look any different to what we were experiencing with num plus plus and even plus plus num back in our earlier example because if we console.log the result of the operation of a prefix operator we will get the value after the increment happens in this case because we're using plus plus but it would be the same thing if we were using minus minus however with postfix down here what will actually be console.log is the value before the operation happened in this case before the plus plus occurred on the variable with postfix this is y we get 10 as a value and not 11. keep both of these forms in mind in your proverbial JavaScript tool belt as you're working with your code and you'll be able to create more Dynamic programs exercise 7 string concatenation with variables in JavaScript we are allowed to concatenate strings with variables to do so we can simply use the plus Operator just like we did when we were concatening two strings without variables for example take a look at the following code on the right then we have a variable called my pet with the string value of armadillo if we want to console.logger string like I own a pet armadillo using our variable we can do so like this this would output I own a pet armadillo let's practice concatenating with variables in the exercises checkpoints this exercise has two checkpoints let's take a look at what we have to do the first checkpoint says the following create a variable named favorite animal and set it equal to your favorite animal all right I'll take this variable here so we can copy and paste it and I'll do let favorite animal and I'll set it to Doc because dogs are one of my favorite animals let's now run our code we can see we've passed the checkpoint the second checkpoint says the following use console.log to print my favorite animal animal to the console use string concatenation so that animal is replaced with the value in your favorite animal variable alrighty we'll go ahead and add a new line do console.log and we'll say my my favorite animal and then we'll add a space there we'll do plus and we'll do favorite animal semicolon and then run our code and we can see the output is my favorite animal dog all right let's move on to a community forms question a commonly asked question by codecademy users for this exercise is how can a space be added with string concatenation we actually already covered this in the previous walkthrough video for lesson one but let's go over it again in our workspace I've went ahead and added our example from our earlier lesson walkthrough video and we'll just review it briefly we have a couple of ways of adding a space into a sentence when we're concatenating with variable very similar to what we were doing when we weren't even using variables in our string concatenation the first example on line 58 looks like this we can add a space at the end of a string to add a space into the full string result so if we run this we can see there's a space between hello and Emmy the second way we can do this is by adding an actual string space character between two strings or multiple strings here we have hello with no spaces in it and then we have an empty string or what would be considered an MP string with a space character and then we have our variable name if we run this code we get the same result and lastly we have our third option which would be to add it at the beginning of a string so similar to how we did it here with hello having that extra space there we can do the same thing at the beginning of a string like this so we would do name plus space is great in a in a single string if we run this we can see we have the same result exercise 8 string interpolation for the es6 version of JavaScript developers were given another way to concatenate variables into Strings this method is known as string interpolation and uses what are known as template literals a template literal has the following syntax notice that the syntax of a temple literal has three components it uses backticks to surround the entire Temple literal it starts with a dollar symbol and the variable we're trying to use inside of the template literal must be wrapped by curly brackets let's take a look at an example of string interpolation and action on the right say just like before we have the same my pet string with the value of armadillo just like before we also want to print out a string saying I own a pet armadillo we can accomplish this using string interpolation instead of using the plus operator like we did in the last exercise it would look like this and would produce an output just like before that says I own a pet armadillo notice that the entire string inside of the console.log is wrapped in backticks instead of quotation marks this lets JavaScript know that somewhere inside of the string is a variable value and we are trying to use a temporal via string interpolation let's now switch over to the exercises checkpoints and practice using string interpolation this exercise has three checkpoints to get through let's take a look at each of them the first one says create a variable called my name and assign it to your name alrighty I'll go to line one I'll do let my name and set it to my name which is David and my semicolon and run my code and looks like that passed the second checkpoint says the following create a variable called my city and assign it to your favorite City's name alrighty go down here and do let my city equals Brooklyn that is my favorite city and where I was born and raised let me run my code and it looks like that passed now scroll down to the third and final checkpoint the third and final checkpoint says use a single template literal to interpolate your variables into a sentence below use console.log to print your sentence to the console in the following format my name is name my favorite city is City replace name and city in the string above by interpolating the values saved to my name in my city alrighty we'll go over to our code here and we'll do console.log now if we're going to use string interpolation we have to start the entire string with bat picks then we do my name is and we start our variable capture our template literal with a dollar sign and we have our curly brackets here I'll fill in my name the variable that stores my name I'll add a period and I'm just going to expand this a little bit so we have a bit more space then I'm going to write my favorite city is and then I'm going to capture the my city variable again using a temple urinal syntax and write my city and then close the entire Temple URL with a closing backtick and my semicolon and then run my code looks like we failed now the reason we failed is if we expand this a little bit we actually have a closing tick that was generated at the end of this uh my name very well so we'll go ahead and get rid of that and if we run our code we can see that our output is now fixed and the string says my name is David my favorite city is Brooklyn and actually if we want to be totally correct We'll add a period there and run a code again doesn't make a difference but makes me feel a little bit better alrighty now with that we've done the checkpoints let's move on to a community question for this exercise codecademy forums users have wondered why you string interpolation that's a great question and probably something that you might be wondering we can use both string interpolation and the plus operator to perform string concatenation one of the biggest benefits to using template literals in string interpolation is the readability of the code using Temple literals you can more easily tell what the new string will be and you also don't have to worry about those tricky situations where you have to escape double or single quotes when you want to use a quote or apostrophes in the string since string interpolation is a rather new feature that was released in es6 it's still gaining Traction in the developer Community but most code bases at this point do use it string interpolation is just another tool that we can add to our proverbial JavaScript tool belt and take out and use whenever we feel like a situation arises that requires exercise 9 type of operator in this last exercise we'll be talking about the type of operator while writing JavaScript code it can be useful to have the ability to check the type of a piece of data this becomes especially handy later on when we start working with external data sources when we might not know the type of data our programs are consuming JavaScript provides us the type of operator to help us accomplish this goal type of operator checks the value provided to its right and returns a string of the data type let's take a look at an example on the right first let's say we had a variable called unknown one with a string value of Foo if we console.log the type of unknown one we would get an output of string we can see similar results when we do so with different data types like the variable unknown 2 which stores a number and unknown 3 which stores a Boolean let's now switch over to the exercise checkpoints and practice using the type of operator this exercise has three checkpoints let's take a look at each one of them the first checkpoint says the following use console.log to print type of new variable all right we have a variable here called new variable and so we're going to go on line three and do console.log and then we're going to use the type of operator and check new variable at our semicolon and then run the code looks like it's a string which matches with what we can see here the second checkpoint says the following great now let's check what happens if we reassign the variable below the console.log statement reassign new variable to 1. all right we'll go over here go on line five and we'll say new variable equals one let's run our code and it looks like we've passed scroll down a little bit and let's do the final checkpoint since you assign the new value to new variable it has a new type on the line below your reassignment use console.log to print type of new variable again all right just to save us a little time I'm going to go ahead and copy and paste this on line seven and then run our code and we can see because we've changed the variable to a numerical value of one our output is number which is the data type of any numerical value all right let's move on to a community question a commonly asked question by codecademy users for this exercise is why is the type of operator formatted differently from other operators let's switch over to a workspace and take a look the code academy user that posted this question on the forums was specifically wondering why we write something like this Hello dot length but when we want to check the type of something we write it like this type of hello obviously the distinction syntactically is when we use dot length we're writing at the end and using a period attached to whatever data we're trying to access the length of whereas type of starts at the front of some kind of data that we're trying to access the reason for this is because type of is what's known as an operator and that could be used on any data type whether it's a string or a number or a Boolean not just strings this is in contrast to something like dot length which can only be called on strings because it's a property of that data type another way we have written code in our program so far has been via function so for example we did console.log hello this is in contrast to something like that length or type of because we're using a set of parentheses and wrapping something inside of the parentheses we don't have to use parentheses with the type of operator because it's an operator and not a function it's important to remember the distinctions between a function like console.log an operator like type of or a property like dot length so that way you can technically communicate Concepts in an accurate way to other developers and to the developer community congratulations you've reached the end of the lesson if you made it this far you've taken a huge step in continuing to learn the JavaScript programming language let's take a second to cover what we learned in the lesson first we did an introduction to JavaScript variables we learned why we need variables and why they're important for our programs next we talked about how to create variables using three keywords VAR let and const then we moved on to using variables with mathematical operators we saw how to use operators like plus equals minus equals and many other ones we also learned how to use the increment and decrement operators known as the plus plus and minus minus operators we also learned about string concatenation with variables using the plus operator and also doing string concatenation via string interpolation with template literals and lastly we wrapped up by learning the type of operator take a second to review any exercise you feel like you need a bit more practice with and play around in the final exercise main.js file with the additional challenges that are listed in the instructions portion that pretty much wraps it up for this walkthrough video thank you so much for watching if you'd like to get involved with the codecademy community visit our forums or join our growing Discord server