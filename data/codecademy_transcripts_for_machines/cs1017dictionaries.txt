chat right now you can go ahead and say hate all of us max and chad is saying python tuesdays hello world so give us a couple of seconds here until we make sure that we're live all right cool looks like we're good so hi everyone uh welcome to another edition of cs101 my name is alex i'm here with carolyn hi everybody this is carolyn um we're both curriculum developers here at codecademy alex is probably a more familiar face since he's taking point on this live stream series but um uh you've been around carolyn yeah a couple of times but i'm not seasoned at all um but yeah every week uh it's it's a mixed bag of of um people i think yeah right now we're streaming on a couple of different platforms uh carolyn and i are primarily going to be looking at the youtube chat so if you're watching us on twitter or facebook feel free to come over and join us over on youtube i'll try to pull up the the facebook chat as well so i can interact a little bit in there um but really uh we're kind of looking mostly at youtube so i see people in the youtube chat are are saying hi to us which is cool to see um carolyn do you want to give a little bit of a high level preview of what we're going to be talking about today yeah um okay first for um just housekeeping i can't see the youtube chat right now um if alex you could just link that to me yeah sure i can link that to you thank you all for your patience um okay but um today uh we're following this cs101 live stream series where um you know so far we've covered um a couple of basic topics that you need to know for computer science we've been using python as the language to kind of practice our cs knowledge and today we're going to be talking about dictionaries which is a a new slightly more not complicated but it allows more functionality than um then lists and um some you know more tiny data structures um this is going to be a more built out type of data structure where you're going to be learning about how to create a dictionary and how to access a dictionary and modify entries in a dictionary and we can go into the syntax once we hit our lessons but there's two lessons for this dictionaries kind of like module um the first one is going to be creating a dictionary how to add how to add keys and values we'll explain what keys and values are in the lesson um and then the the second lesson will be i think updating the dictionary um and i think accessing um like either all the values or a single value and the code challenge um is a crowd favorite it's where um it's essentially three code challenges um and you're applying the knowledge from those lessons and um if you're watching the live stream you'll be watching us kind of tackle the code challenges towards the end um so yeah that's the way i got for today yeah i uh i linked the uh link in the youtube chat right now it's also in the youtube description but yeah we're gonna be going through the seventh module in this cs 101 course and uh one of the things i think is interesting is that this whole um this whole course we're kind of trying to emulate a what your intro computer science class might be if you're in high school or maybe your first year of college and i think traditionally the second course in college is all about data structures and algorithms and so i think that we're kind of to the point where we're um starting to see what that content might look like where we've seen lists we've seen loops we've seen kind of the the foundational things and now we're getting into slightly more niche of like okay why would i want to organize my data in this way rather than with a list um so as we're reaching the end of the series we're kind of getting previews as to what you might see in you know a second semester uh computer science course cool all right you wanna share your screen carolyn and we can get started yeah um and yeah i'm gonna be um keeping an eye on the chat as we go here so if you uh carolyn is mostly going to be uh having her uh you know coding along so if you have questions feel free to post them in the chat and then i can uh ferry them along to carolyn yeah cool so i've shared my screen now i'm in our little live stream series syllabus so this is the link if um you all are wanting to follow along um and i'm gonna scroll down to this dictionaries module um we've got two lessons in an article so i'm gonna just jump right into the lesson let's do it cool well um so firstly um this intro to the lesson is you know what is a dictionary and essentially we can think of it as a um if you think of like a regular dictionary right you're looking for a word um and uh what you find when you like find the word is its meaning right so it's essentially a pairing of um i'll call a key that's what you're searching for um and then the value is what is returned right um so a dictionary is just that an unordered set of key value pairs um so let's say we have this example here where um we've got these menu items at a cafe and we have uh each like item at the cafe um being worth like x number of dollars so what we can do is actually store this menu as a set of key value pairs right so oatmeal maps to three avocado toast six carrot juice five etc and in this little block of code you already see the syntax we call the dictionary menu and the whole dictionary is surrounded by curly braces and then each of the key value pairs is just in this case we want to use a string for the food names and then an integer for the prices so the key and value are separated by colons and each pair is separated by commas and it doesn't matter what order they're in yeah i think i think that's a really big point and something that's different from our previous data structure which was a list where really the only thing that we like the most important thing about the list was the ordering where we could say okay get me something at index two or get me something at index 10 or get me something at index zero and that's really how we interacted with lists was like knowing in what what order things are are coming in that's totally different in dictionaries here where the thing that we're really going to be interacting with a lot are these keys which we can define for ourself as a string or um you know we'll see what else we can define keys as later on cool um yeah so there's um there's this example in the little story here um and then there's another set of um there's another example where we want to set in these instructions where we want to set um temperature sensors in the house so we want to map the room to the temperature in celsius right so this instruction just added a new sensor called pantry and it should be 22 degrees so we want to add this pair to the existing sensors dictionary that's already set up in that little code editor so what i'm going to do is i know that each pair is separated by comma so i'm going to create a new pair i need a new comma and um i'm gonna just type the new pair which is pantry and uh colon um it's good practice it's a little bit easier to read if you add a space between the colon and the the value so um the value here should be 22. cool so that looks right um and now we want to uh kind of see this other dictionary here that's called num camera so we want to uncomment that line um we'll run this it says that where you know we're expecting a syntax error um that means that there's some sort of typo or doesn't really follow the the format that python likes to read in so let's try to fix this to to make it run um it looks like so we've got the colons between each key and value but the pairs are not yet separated by comma so i'm going to add in those commas cool thanks um nice and we can even add another line to print uh that num camera's dictionary here yeah and one one thing to think about as you're starting to work with dictionaries is already you can kind of see the type of data that we're working with has that like key value pair right where we have something that's linked to something else so uh i think the example here was the living room was being set to 21 degrees i don't know what the backyard example is um what is it the number of cameras in each area around your house so our backyard has six cameras and a garage has two cameras in it and so you can think about you probably could store this information in a normal list but you might have to either store a list of lists of like backyard six or maybe you would just have to remember the first thing in your list is you know you store six and you just have to remember it's a backyard so it's like you can always make this work you can always hack together a solution probably using whatever um data structure you're comfortable with but being able to recognize like oh this type of data of something mapping to something else means that it's a really good use for dictionaries like that kind of intuition i think is something that's important yeah so i mean one of the most like um important applications of like a dictionary with a key value pair is um if your web browser is sending data right so um it if it just received like a series of like numbers and codes it wouldn't know what to do with them it would have to be you know associated with um the um the user entered like this password and this name um and your um device is this this name right so um it makes things a lot easier to um it's essentially like a great organizing tool um for your data yeah java javascript uses this all the time i i mean one another one of the things that we want to stress during the in this series is that these concepts are pretty fundamental to any programming language where if you learn it in python you'll definitely be able to then go to javascript and see very similar things uh start to happen i would even say javascript uses this more than python where like everything is an object in in javascript but yeah very applicable to different programming languages yes um and you'll find that a lot of problems that you want to solve um dictionaries really come in handy um okay so let's uh make a dictionary from scratch um the last exercise we kind of had it handed to us um so i'm gonna kind of like skip past the narrative here um and just create this dictionary in the instructions that we want to call translations so python you can directly declare a name declare a variable and we want to map the english words to their definitions in cinderen which is a another language um fantasy language i guess it seems like both of um the key and value should be string in this case so i'm gonna okay i want to make that i'm going to follow the best practices for spacing from so i created that dictionary there um comma separated pairs key values with the colon between surrounded by curly braces um you want to just print out that you want to just point out the dictionary just to prove that it exists i think that's always nice to yeah to see that our variable exists and then another thing before we uh um before we move on from this exercise something worth pointing out is in this narrative um so we our values can be very different things right so you can see in that last code block where we have shuri age 18 siblings t'challa and raimonda uh you can see that okay our values can be anything from a string to an integer to a list of strings um but but so far we've only seen the key the thing that comes beforehand be strings and i guess integers um in that in that subtotal to total one yeah and your value can even be a list so in this example right here um it's saying you know people that belong on different teams um you can have you can be like i'm looking for people on the cartography team and then you'll return a list christopher juan and marco um so it's really customizable you can really add as many dimensions to this as you want yeah they can even be more the values can be another dictionary itself so you can have this like nested structure so yeah cool i think i think in a second we will see yeah invalid keys so everything we just talked about was in reference to the value but the keys is a little bit more constrained so let's let's see what the deal with uh keys are cool um so basically there are certain things that we can't have as keys um so in this example right here this um dictionary that's um that you're attempting to make has a list as a key and so that will return you a type error because a list cannot be a key um it's because that list is an object that can be changed um so the way that dictionaries work um i mean we're really lucky that these programming languages make it kind of easy for us but on the like sort of back end of things there are like hashing algorithms to essentially store the key in memory at some sort of location and it's using these hash algorithms in order to also find your your key right in the sea of keys that is dictionary so um that means that if the key itself can can be modified then um that's going to basically mess with the the hashing algorithm that makes this all possible yeah that all of this is again a good example of stuff that you might get into in like your second semester cs class of like okay we might know what a list is and what a dictionary is and like good good use cases to use them that's kind of like the point of this type of exercise but really then what you'll start to learn as you get more into computer science is how does this hash function that carolyn is talking about how does that actually work what are the advantages and disadvantages of it so if you're if you're not familiar with you know hash values and stuff like that for now i would say don't worry about it really the the focus is what are dictionaries used for what's kind of like the format of data that we should be keeping an eye out out for and then as you get further into your computer science studies you'll kind of learn to understand more of the like nittygritty detail of how they work yeah um so let's try to fix this dictionary in the instructions here so um firstly like this dictionary scheme doesn't is not very practical because you would never be searching for a list right um like hey i'm looking for johann rosemary and eleanor's last name that's really um that's really impractical too because you have to write your list probably in the exact same order um and um plus it's it's a type error so it actually makes sense to flip these and if we flip these we'll actually have a valid key so what i'm going to do is make the last name the key and the value will be the names of those siblings um so i'm gonna do that for both pairs yeah again a good way to think about this is an actual dictionary where you have a word that you look up its definition this is kind of how we have a word which in this case is the last name of the family and the definition is the list of members that belong to it cool um nice when we went to the next one um where we can create an empty dictionary um so that's pretty straightforward you can add values to your dictionary later you don't have to declare them all at once so here i'm just shooting i would say this is probably the most common uh you usually start with this where you start with an empty dictionary and then add values over time to it right um because usually you know you want to be evolving you want some sort of code to run to slowly add things to the dictionary very rarely do we do you want to hard code a dictionary actually yeah what do you mean by hard code so hard code means that um so like in the previous um exercises like something like this where we are basically adding um preexisting values and they're staying kind of locked right so they're being declared all the way at the beginning of the program those are values that are like in that box already and um it's we i mean we can always add to a dictionary but the hard coding um it um it basically like is you adding the data kind of painstakingly yeah exactly very like manual labor right kind of like manual data that entry whenever you see that that's kind of what hard coding is is about yeah so if i had like um i don't even never mind i'm not coming up with a good example in my head right now sure um but um this will come up again and you can also you know search for hard coding and um a million people on the internet will be like here are my stories [Laughter] um cool so like we said you know most times you're populating an empty dictionary that means that we are always able to add a key so this is a syntax to add a key to the dictionary so essentially use these brackets it's very similar to how you're indexing in list except now you're kind of indexing by the key which is really nice actually um so for example if we wanted to add this like cheesecake thing to the menu um we would simply say hey uh in the menu dictionary add this entry called cheesecake and make it uh make the value equal to eight so then now you can access that new entry in the dictionary um so let's create um a new empty dictionary here called animals in zoo so that's the empty curly brace and you want to add so it seems like what we want this dictionary to do is keep track of the number of animals so so i think i'm just going to complete this one checkpoint and then we'll move on to the next one because um it's pretty similar for the next few zebras uh plural zebras we wanted plural yes okay cool and then you can do the same thing with monkeys um and dinosaurs you can set it to zero um i'm just gonna print this here yeah and actually do you want to print out um your variable before adding zebras just to see it started empty and then we added zebras cool yeah all right nice and i would even encourage again uh for folks that are kind of new to codecademy or coding in general doing stuff like that i think is really helpful where even if you know you get our green check mark on codecademy i think it's still a good idea to kind of like play around with your code like that to see okay before i did this line three of my code let me see what that variable actually looks like and you can see it was empty and then afterwards let's see what it looks like so i think sometimes you'll find that like even after after you get the green check mark you might wanna like do things like add more print statements or you know try to change value see if you can change deepers to ten um like you know i i really encourage playing around with code even if you've you know passed all of our tests definitely and print statements are always really clutch yeah cool um so we can also add like multiple keys by using this little update um uh function um so update is a builtin function in the sort of dictionary um like objects um so it's um it's a function that comes with all instances of dictionaries so let's try it out directly here where we're adding two new user ids to this existing dictionary so um we'll use the dictionary name um we'll do update and looks like we wanna add in our um argument to that function um of like a complete dictionary in itself so like the the like like the dictionary that we want to we can think of it as like an append i think it's similar to a pendant list um so then inside of this yeah really what we're doing here is that we're adding um this whole new dictionary onto our existing one where okay we have terracote or we have pro programmer we're gonna be adding um and i think uh carolyn you're you're adding um oh not adding instructions but it's it's fine we can probably probably run it entire other dictionary with multiple keys that each have their own value and just kind of sticking it onto our existing dictionary right so this isn't correct but yeah um why don't we print out a user id to yeah next so now it's one um single dictionary they've kind of melded together cool let's uh move on to the next one um definitely recommend looking at this lesson afterward um and going through it in more in detail um if you want to you know get the complete practice yeah what one thing before we move on sorry carolyn i know i it's there's like a million candidates i want to go into um one thing that i wanted to point out here was that this method changes the dictionary in place which means that you um which like sounds very fancy and you'll see us talking about like oh this method changes it in place and this one doesn't what this means is that notice on line two we don't have to reset user ids equals userid.update the method just does it automatically and the variable is changed we don't have to reassign the variable in fact if i think if you do user ids equals to userid.update why don't we try that and uh so just yeah set user ids equal to that thing yeah i wonder what we get yeah so you now get none which is really confusing and basically what that's saying is that this method does the thing and then returns nothing yeah let's just print the like result of this line yeah so that'll maybe give us more yeah it just prints none it returns none yeah so that's a really common mistake of having this in place method that does something and then returns none if you set your variable equal to the the thing that that thing returns you could accidentally like wipe out your entire dictionary right you could accidentally set the entire thing to the return value which is none so that's something to keep an eye out for is that some some methods are in place which means you do it automatically and some methods are not in place which means that you need to reassign the result to a new variable basically yeah definitely um cool let's uh move on to the next one um so in addition to adding keys um we can also update the values in our dictionary right so let's say that in this you know menu that we had since beginning um we want to change the price of one of the items so in this case avocado toast um but we know that there's already an entry with avocado toast as the key we just want to update the the value um it's grown in price i guess like everything um and um basically um so right here um we can overwrite the value of the um overwrite the value at a certain key we can always update an entry to the dictionary right um so let's try that in this example dictionary we have in our code editor so it's for oscar winners um it um we want to add a key so this is knowledge that we already know how to do so um it's the dictionary name plus the bracket so you want to add a key that's supporting actress i want to set that equal to viola davis oh you might have to yeah i have to yeah this is a little hacky but yeah cool um it's the like our internal view sorry about that um and then now instead of um changing i don't know if you you all remember this but um there was a whole mix up at the oscars a few years ago where they falsely announced lala land as the the winner of best picture that year but it was actually moonlight yeah yeah let's let's correct that mistake by now updating best picture to uh moonlight so i'm just gonna refer to the key here and um it's very simple um now it's uh should be moonlight and let's print the oscar winners at the end to see our changes cool so the best picture in moonlight and everything else is in place as well cool nice yeah yeah the thing to note there is that the syntax is almost is is identical for creating the key in the first place and then also editing it yeah exactly um okay list comprehensions those are some big words okay let's say we have two lists and we want to combine them into a dictionary cool um take some wizardry but um python actually um allows us to kind of like zip these things together pretty seamlessly so that's exactly what it's called it's called zip right um so this syntax which is um i don't know if you all have covered list of comprehensions so far alex but this comprehension there's always kind of like a shortcut somewhere and that makes the code um feel like accomplish a lot in a single line right yeah i think i i think that this is a good example of like if you're if you're working with a program that has your data organized in one way that doesn't make a ton of sense right you could see this this line of code online too is caffeine 6440 120. like in a vacuum that makes no sense right right like what is 64 what is 40 what is 120. so sometimes your programs might be using data structures that aren't the best and so this is just a good way to show hey how do we like combine these in a way that uh uh makes slightly more sense or makes it slightly more useful so we don't have to remember oh right espresso was the first one in that list yeah exactly um so i mean we can take this um line and kind of apply it to um this like coffee example here um so let's kind of break down that line a little bit um so let's look at the end first where it's like zip names and heights for this example um zip name heights um returns um a series of tuples i believe right so tuples are pairs it's like x y essentially and um it's saying like let's name each tuple um a key and a value right it doesn't really matter what the those variables are just as matter just as long as we use the same like key value variable names here um so um for every key value um in the zipped in the like tuples that's returned by zip um we create a a pair that's connected by a colon and um and then this whole thing is surrounded by curly braces right okay yeah it's a little bit of fancy syntax i can talk a little bit more about it as you're uh as you're doing the instruction here so let's uh call this zip drinks and i'm gonna copy this line over and just change some of the um the variables so instead of names and heights we have drinks and traffic zips and caffeine together so the drink um sorry the drinks contains all the keys that we want the caffeine contains all the values that we want um so at the very start you're setting it equal zip drinks equal students equals get rid of that student oh whoops there you go uh that is loose zipped can we can we try to print out zipped drinks to see what it looks like yeah i think this is expecting like an intermediary step where we zip the drinks although that looks like a dictionary um yeah yeah so we did it all in one step so first uh first they were expecting us to do zipped drinks is uh just the zip function which zips together the the two lists into a list um and if we print this out it's actually gonna be an ugly print statement do you want to print it's going to be a zip object yeah can you throw a list around that can you cast it as a list like this uh so list and then normal parenthesis around it got it cool so it's a list of tuples um right now once it's zipped um so then that makes sense for this line right here where we're searching for where we're basically going through each tuple in the list we know that they're comma separated we'll name one of these key one of these values and we'll now rewrite them in that syntax um cool i'm going to complete this exercise by um now adding the list comprehension to this zip um this zip result um i'm actually gonna just um call that drink caffeine um so that you all can see that you can use yeah whatever um variables yeah there's nothing magical about that key value variable name so you can print drinks to caffeine cool thanks that's awesome yeah um definitely like review this part a little bit um we should move on to the the next lesson um which will give us um a lot more information too um about um accessing all of the values all at once or all of the keys all at once um cool so um this is basically like the review part of our lesson if you've taken any codecademy lesson there's always a little like wrap up at the end so in this lesson we've created a dictionary we've added elements elements meaning keys and values updated them and at the end we've learned somehow how to do the list comprehension to create a dictionary from existing lists cool and i'll leave you guys to to complete this review um exercise on your own um so let's move on to the next lesson which is more applications for dictionaries cool um cool so i'm just gonna i think we skipped the intro in here somehow okay so um now that we've got kind of the syntax down um we want to start thinking about like how to solve problems some of the um functionalities of dictionaries right um so we'll be able to um use a get a key get a value from a key and we'll be able to check if a key exists we'll be able to see how big the dictionary is or how long the length of the dictionary and um will be able to go through each pair of keys and the values yeah i think the first lesson really focused on let's create dictionaries and now it's like okay now that we know how to create dictionaries what can we actually do with them so we can start to play around with these yeah cool i like the the exercise here the the um zodiac yeah these are all five i love them this is a couple lessons yeah um cool so um in this uh exercise we'll be learning how to essentially get like values from a key um so let's just directly go to the instructions here um let's print out the list of zodiac signs associated with the earth element um so if we see here the different elements are the keys and the signs associated with each element is the value of that key so we have a key earth here and it tells us to print so i'm going to do a print statement around um zodiac elements and again just like lists your you can index by the name of the key so that's really convenient because then this is all we have to do right we can just refer to the key name um and we get taurus virgo and capricorn cool and then uh let's just print out this the fire signs too while we're at it yeah while we're doing fire how about we try to get exactly leo so how would you say okay now that i've gotten the key how do i access the first element from that list um yeah so if we notice the um the value is actually a list right so that means whatever's um i mean this is us with the knowledge that leo's a fire sign um so we know what fire returns um a list and we know that in this list leo is um the second one in the list so we're indexing from zero so um that would be index one nice so let's try that cool yeah so obviously that took knowledge of us like seeing the dictionary there seeing okay um fire go uh the the key fire goes to the value of this list of three items and then we can see okay leo is the second item in the list so we can index it from using index one so obviously we like kind of have the information here but i think that that's a good example of like you can start to chain these things together first you say okay i have my dictionary i want the value associated with fire and once i get that value i want the first element yeah yeah cool and you can even um loop through this list once you get it too yeah good call cool all right um let's say that um we are searching for something that doesn't exist right um so i'm gonna like skip past the example in the story there um and let's work with the example we have in our code editor um so here this is already there is trying to print trying to print the zodiac elements associated with an energy key um but energy is not a key in the dictionary um i mean what we can do though is add a key associate called energy um and the value should be it's not a zodiac element yeah this is actually similar to how in lists you can only ask for elements up to the length of the list right if i have a list of five things in it if i ask for the item at index 10 you're going to get an error it's pretty similar here where we only have available the stuff that uh um the the keys that are actually in the dictionary exactly cool so this fixed our key error here because now we've actually created a key for um for like this line to access okay let's move on um so i mean typically you really don't want to be kind of caught with a key error because most of the time you may not know what's exactly in the dictionary right so there's a bit of you want there to be some sort of like backup if you can't get the key you don't want your code to error out and stop executing completely so this is where a try accept kind of block allows you to um attempt to get a key right and then if there's a key error there that's called um and you can make an exception for the error right that's what the accept is for so try this line and then if there's a key error make an exception with the code not like stopping on you and when that error is caught print um or execute this line instead um so let's try to um let's try to create um that structure for this caffeine level dictionary um so we can set it up as sort of a backup plan for if somebody tries to access something later on and it's not there so um what somebody's going to try to do is if someone tries to get matcha i'm going to try to print the caffeine level of matcha so we'll try to get that and if it's not there it's going to cause a key error that we can make an exception on and can print unknown caffeine level i just know this thing is going to kill me for the case of capitals yeah so trying to type carefully cool um so that means that um this has successfully caught the key error right because let's say um which we did this line um at the beginning without wrapping it in this try except um there's a key error for matcha immediately and that prevents the rest of the code from executing right so yeah this this kind of stuff is just kind of good practice for you don't really want your program to ever crash you want to handle these errors elegantly like rather than program crashing and giving you this ugly error message instead you can anticipate like okay if not if the key matcher doesn't exist let's print this thing in particular to give people a clue as to what happened yeah cool um i wonder if we want to um yeah well we'll have to get through some of these i think to do the code challenges later on yeah i think i want to get to get all the keys and then get all values yeah we definitely need to get all values to do the code challenge so let's try to get to that okay cool um so above this block you can add um you can actually add an entry so that it doesn't fail let's move on to um so essentially there is a better uh or safer way to get a key um that is not just simply indexing right so um what's really nice is that python dictionaries also has another builtin function called get and what that does is actually handles the key error for you and uh you can use get to specify the um so what the get will do is it'll default return none if there is no key but you can also set like a a default return value for forget if that key is not found right um it just makes it so you don't have to write that um every single time you're trying to like access keys so i'm just gonna do like a short one here um so let's just print um the result of trying to get this entry terror coder um that's so terracotta's coder is a real one but let's say that like i made a typo in here right so then the get would return a none instead of a key error right and then you can follow the rest of this exercise to learn how to to practice adding a default value if there's no um if there's no value associated with the key that you're looking for um do we want to move on yeah let's move on okay cool um you can also delete a key um which comes into handy and um you can delete it using this thing called pop um so just like like i want this popped off so that's a that's a way to remember um that pop function let's just try it in this example where we have some sort of menu thing again um the items and their um their prices um so this isn't a game okay um carolyn earlier we were called called out for not knowing the uh that language in the other example was uh elvish from from tonkin it was one of tolkien's languages i don't see why like we were being called out because no i'm kidding they definitely yeah yeah yeah um i had a feeling that that was that yeah um in one line okay this is kind of a long exam um instruction um yeah i think let's let's just see what happens if we pop like right pop something specific this is not super relevant to for the code challenge so i feel like we should uh right okay so let's say we want to get rid of this power stew thing um and to check that we can print it right after the pop statement cool so um we can ignore that error right there because we're kind of going rogue from the lesson um as you can see here um after this pop the that entry is no longer there um we can also get all of the keys all at once this is going to be really relevant for our code challenge um and it's uh and what you have to do is simply use this stock keys function that's also built into the dictionary so let's say i want to uh get all the keys of the user ids i'm going to print the keys um yeah so it's kind of in this weird format it's kind of looks like a list um and i imagine we could access the first one by doing can we do user ids dot keys and then index of zero to see if we get terracotta yeah yeah um so it's a keys object so we could eventually do some funky stuff like casting it to a list right um and then we can actually iterate through it so this is where we can um loop through things so let's say i want to do let's say user in user ids.keys and that way i can print i need a column at the end of line 6. hold on right cool so now um iterating through it i can isolate out um all of the the keys and print them out one by one cool so that's relevant knowledge we'll move on to the next one which is get all values which is also very similar um dot values so let's just do the same thing where um we are looping through the values for num in num exercises dot values print num and that returns us all the values oh we can also use a list to grab to cast the values so let's say we want to do that for this exercises thing um i'm just going to like wrap the print statement around so we can see it directly cool so um you can cast the values to a list and just print that list directly as well yeah one thing to note here is that again dictionaries are unordered so carolyn before line three could you add a new key just like we can just make up what we want it to do um so add in a new key yeah so new exercises of um carolyn is or whatever um is um a hundred and it's uh it's not quite the syntax it's gonna be caroline i'm sorry you're kidding you're totally good it's hard to it's hard to do this uh on the fly oh it's a typo there you go okay cool so now you can see um i've been added to the values yeah it just kind of gets tacked on to the end one thing to keep to be aware of is that this is i actually didn't know if that would be tacked onto the end or not or if it would have been inserted someplace weird um you can't really rely on dictionaries in being in this order of like okay the the thing that i added is always going to be at the end right definitely more of a list thing and because we're working with dictionaries which is unordered you can't really rely on right right i think it's um for like this like pretty small dictionary um yeah it's relatively um i mean i think especially if it's hardcoded as well i think it might look different well you can you guys can play around um but just know that you know it could be unordered and don't be surprised yeah in fact you'll see i think we should jump to one of the code challenges now and you'll see that cool the kind of questions that we ask about dictionaries don't don't rely on an order of anything we're either like summing up all of the values together in which case the order obviously doesn't matter we can just sum them up however in whatever order we want right or um yeah so just the order typically doesn't matter when you're dealing with dictionaries yeah um and just real quick here you can also grab the items it's also gonna return it in that like kind of tuple um form so you can use that same thing we're we're doing similar to when we're doing list comprehension we can just um create like temporary variables to um stand in for those tuples and you can iterate through all the key value pairs as well that way cool um nice let's move on to the code challenge um i'm gonna keep this lesson open just in case we need to like flip back cool um so now i'm in the code challenges which is like if you actually go to up next that's what it is um i'm just gonna go back to the syllabus here since i already have this open the syllabus will be nice for me to go back to a lesson if i need to well so um there's three challenges here um you want to tackle whichever one you want i think the uh let's do one or three because that that involves keeping through the uh the values maybe one i think one is awesome so let's do one um and it's pretty straightforward um this code challenge wants us to write a function um so that's knowledge from our a previous module and we want to call that function some values that accepts a dictionary um and the function should return the sum of the values of the dictionary so um thinking through that let's let's write like the syntax of the sum values first so i think it's def i'm not a python coder yep got it um def uh call it uh this function name sum values and it wants to take a my dictionary as a parameter yeah okay and um inside of these inside of this function um we want to get all the values so um i think if we think back to like just a few minutes ago when we were um learning like the dot values um function in the dictionary um we know that my dictionary dot values is going to return us that like dict values type of um data form and we know that we know at the very least that we can um iterate through it that we can loop through it so that's so if we loop through it that's going to allow us to kind of like take each value as they come and add it to like a sum like a running total of some kind so i'm gonna start a total of zero at the very beginning and um and i'm gonna write a little for loop to go through that values um so for say let's call it val is this is this syntax looking right alex yep that looks good to me so we're gonna my dictionary.values again is taking is is that list type object it's not exactly a list but it's something that we can loop through we're gonna loop through that and or every value in this variable called val and then we're gonna want to do something with the vowel right um and we're going to want to add the val to the total so we want to update that total every time um so we can either do this which is set total equals to total plus the vowel or um we can use like a shorthand there here which is the plus equals yeah and um that's uh it for our for loop value or our for loop code because um it just has to add the values right and then at the end we want to return that sum that we've been keeping track of which is total so i'm just going to run this just for just to check the syntax okay so nothing is it's great that there's no uh error messages so um this is convenient um we can uncomment the function calls below to test our sum values function i'm going to uncomment that first line first and you know that this should be five plus two plus three which is ten so awesome cool um so that's the output of some values on this dictionary well and let's print the next line um in this case the values are one two and three so the time the sum should be six awesome cool um we are at two o'clock right now should we keep going alexa um i think we should probably call it here but before we go yeah again a thing that i like to stress as we get to these code challenges is to you know don't always immediately um go to our like check answer button down in the bottom bottom right corner like caroline you scroll down hit check answer now you should get your little like you were right right right i would say one thing that i notice a lot with people using codecademy is that they are really into like making sure our approved thumbs up for clap emoji or whatever they get that i think the more valuable thing is to build out the function on your own um without really having to rely on us like checking for um whether whether or not you got it right so somebody so if i were struggling with this something that i might do is inside that for loop i might print val um and so um right yeah yeah exactly so so now i can see okay when i pass this uh when line 10 is get getting called so yeah i'm gonna uncomment the other prints yeah so now i can see okay i have five i have two i have three and then at the end of the day those all at some up to ten so doing stuff like that i think is is probably the most important thing that you can be doing these code challenges of if you're getting lost and confused and you're um you're not exactly sure what's going on just uh and you're gonna have to cast the uh vowel to a to a string um if you do str uh doing stuff like that really can kind of help you understand where you are in your process it can help you develop like a plan of action of okay i'm not i you know i have this value but i haven't added it to total yet things like that is really helpful so doing that rather than just like writing your code and checking the answer and hoping that it was right i think is um yeah really important and um what i was just doing while i was talking was just adding print statements that are a little bit more specific because you can end up getting like really jumbled if you're printing multiple values in the same code block yeah so i've just made it clear whether the number that's being printed is the current value that is being looked at or it's the the running total um cool yeah um sorry what yeah i i was just gonna wrap up but uh yeah go ahead okay yeah definitely recommend um you know completing these code challenges but you know most importantly trying to struggle through them on your own um and use these uh little you know boxes as your playground um you know you can you can also um start taking some of these into your own code editor on your computer um as well that's something we encourage yeah yeah so cool um yeah i think we should probably log off for today but thank you for watching um next week is actually gonna be our last live stream in this session and we're gonna dive into classes and objects and objectoriented programming i see sami in the chat is asking a little bit about objectoriented programming so next week we'll be super relevant for that um yeah and then uh and then that's gonna be our last session in this little yes 101 series so um yeah thanks for uh yeah thanks for doing this with me today carolyn yeah of course um last very very last thing i'm sorry i just i meant to say this during the whole live stream but um dictionaries are what uh python calls these data structures but other um uh languages like java calls these like you can declare like a hash map um so you'll hear that word a lot it means the same exact thing as dictionaries and i'm not sure what they're called in javascript maybe they're just objects in they're just called objects yeah which is which is confusing because we're about to get into classes and objects and that object is different than a javascript object kind of right right yeah yeah um but at the end of the day it's just these key value pairs um that exists in all programming languages yeah cool cool all right thank you everybody thanks everyone we'll see you next week