hey my name is Mike I'm a developer with code Academy and in this video I'm gonna walk you through setting up your local environment in order to start building flask apps and so up until this point we've been mainly building our flask apps on the code Academy learning environment but in order to move from that environment into your local environment there's gonna be a couple things that you need to set up the first thing that we're gonna have to do if want to start creating flask apps on our local machine is create what's called a virtual environment now when we're building flask apps there's gonna be a lot of things called dependencies which we need to work with and all of these different dependencies have potentially different versions and they might interact with different versions of Python differently and so a virtual environment is going to be an isolated environment on our computer where we can control all of the different dependencies and the versions of those dependencies so that they interact with our flask app correctly this will also allow us to control which version of Python we're using in order to run flask now in my case on my local machine I have Python installed so I can just type in Python version and you can see that I have a Python 2.7 0.15 version installed I also have a version of Python 3 installed so if I type in Python 3 version you see I have Python 3.8 point to now it's this Python 3 version which I'm gonna want to use in order to create the virtual environment so with my Python 3 program I'm gonna say python 3 M V env and then the name of the app that I want to create so in this case why don't we just call it my app now this V env program is actually something that Python is going to give us by default and you can look over here there is documentation for this on the official Python website and it's here talking about virtual environments and packages so basically this V env command is going to create a virtual environment on my machine where I can control all of the different versions and the different dependencies that my flask app is going to use and that's generally the recommended way to build an app like this so we can just hit enter and you'll see what happens in a second over here a new folder got created which is called my app and this new folder was created by Python 3 by that V env command and so this is now the folder where we can go ahead and start building our flask app so I'm gonna CD into my app and now that we're in here we can actually start building our app so you'll notice that a few different folders got generated and I'm not gonna spend too much time going through these but basically this Lib folder contains copies of all of the different dependencies that your app is going to use and by default ven ven disease in there for us there's also this include folder which will include anything that you want to include into your app and then here's a bin folder which contains a bunch of different executable scripts that we can run in order to do different things so you can see here we have for example pip and we have Python all these different things that we're going to need to use so there's one final step that we need to do in order to set up this virtual environment which is activated and activating it is gonna make it so we're actually operating within the virtual environment instead of from our local machine anymore now there's a different way to do this depending on if you're on Windows or if you're on Mac I'm on Mac so I'm gonna show you the Mac version but I'll also show you the Windows version right after so you're just gonna type out source and then you're gonna type out bin forward slash activate and what this is gonna do is it's going to activate our virtual environment and you'll see here that my command line prompt changed a little bit so now in these parentheses I have my app and that's just an indicator that we're now in this virtual environment if you want to get out of this virtual environment all you have to do is type in the deactivate command and then it'll deactivate it now in my case I want to stay in here so I'm gonna activate it again and so if you're on Windows it's a similar command except this time you're gonna run scripts back slash activate dot bat and that should do exactly the same thing so that's the commands for window and and Mac and now that we have a virtual environment set up we can actually start building our flask app but before we do that let me just point out one thing so you remember before when I ran this Python version command I had a version of Python that was version 2 but now when I run this you'll see it's Python version 3 and this is one of the benefits of using this virtual environment is now my python version is set to the version that I used to create the virtual environment which was three point eight point two okay so now that we're in the virtual environment let's start installing some of the dependencies that we're gonna need for our application so the first thing we'll do is we'll say pip install flask and what this is gonna do is it's going to install all the dependencies that we need to start up our flask app and you'll notice here if we look in the bin folder that now we have this flask folder in here and there's a couple other dependencies in here as well these are all things that flask is gonna use we're also gonna install one extra thing which is going to allow us to build out forms in flask which is called flask WTF so I'm gonna say pip install flask underscore WTF and this will help us like I said with forms so once again if you look in your live folder you'll see now that we have a dependency for that so the next step is to actually start writing the code for our flask app so I'm gonna create a new file in here in my directory and I'm gonna call it app dot pi now this is the default name that we're gonna need for our flask app and in here we can start writing some of that flask code that we've been looking at over the last couple lessons so the first thing we'll do is we'll import flask so we can say from flask import flask and then we're also gonna import a couple other things that we're gonna need so we're also gonna need render template and finally we'll need request so these things will come in handy later once we start setting up a basic form we're also gonna import that flask WTF library that we just installed so I'll say from flask WTF I want to import and this is going to be called flask form and then finally we'll say from WT forms we're going to import string field and submit field so these will be used as fields on the form that we eventually create next we'll say that our app is going to be equal to flask and we're gonna have in here underscores and the name and then finally we're gonna set a secret key so I'm going to say app dot config and then in square brackets we're gonna put secret key all caps and we're gonna set that equal to a secret key now in my case I'm just gonna set it equal to my secret since this is just sort of a starter app all right so the next thing that we're gonna do is we're gonna define one of our routes so remember the routes are definitions for where the user can go in our app and what types of operations they can perform on those routes whether they're get operations post operations etc so we'll say in here app dots route and that's going to have inside of it a forward slash so this is just going to handle any requests that get made to basically the home page like the root directory of our site and then over here we'll define the different types of methods that we're going to accept now eventually we're going to have both get and post requests being made to this so let's just put both of those in there for now so we'll say get and post next we'll define an index method and this is going to be the method that handles any of these requests that get made and so let's just test this out why don't we return hello world and then we'll come down here and we'll run our app so running the flask app here from your local environment is very easy all you have to do is say flask run and as long as you're in the correct directory here in your my app directory and as long as you have an app dot PI file then this should work so I'm gonna hit app dot run and now you'll see that our site is running on 127.0.0.1 at Port 5,000 this is also known as localhost so let's go over here and take a look I have this open over here on this other tab and you'll see that it's printing out hello world so that looks good to me looks like our site's working as expected now let's add in a little bit of extra functionality right this is a good app but it's not really doing too much so why don't we create an app that allows us to handle to do's so this will be kind of like a todo list app and we can have the user enter in the two do's that they want to perform so a good first step to this is to create a template and a template is just HTML that we can use on this page over here so instead of just rendering out a string like we're doing right now we could actually render out an entire HTML document so let's create a new folder here at the root directory and we're I call it templates and this templates folder is the place where we can store all of our HTML templates that will eventually be showing to the user so inside the templates folder let's create an index.html file and this will be what gets rendered by our index method it's always a good idea to have the method name over here match the name of the file so in this file why don't we just generate an HTML document now my text editor allows me to do that with a single click of a button but in your case you can just copy out all of this HTML this is sort of like the most basic structure of an HTML document so once again we want to have to do so why don't we just put that here to do's and now we'll hook this template up with our index method so instead of just returning hello world instead we're going to return the result of rendering a template so we'll say return render template and remember this is that thing that we imported up there before when we first started creating our app and so inside of here we can put the name of the template file in this case it's index dot HTML so let's save this and now if we restart our app and we come back over to our website now you'll see that we have that HTML document being shown instead of hello world so the next thing that we can do is start setting up our app so that it can use dues now all of our dues could be stored in a database or in this case since we're building a simple app why don't we just store them here in the memory of our computer in this app so I'm gonna create a array here which is called dues and inside of here why don't we put a couple to do so we can say learn flask that can be one of our dues we could also say setup ve NV which we already did and then why don't we have one more build a cool app so we have three to do is learn flask setup ve env and then build a cool app and we're gonna want to render these out over here on our templates so on our web browser we want the user to be able to see them so what I can do is inside of this rendered template method I can actually put a comma and we'll pass in another argument so I could say over here dues is going to be equal to dues and so when we do this I'm basically specifying that the template is going to get a variable that it can use called to do's and I'm setting that equal to the two dues that we have over here and so now let's go back over into our template and we can actually render out all of these to do so why don't we put like a header one here and we can say to do's and then down here will actually start rendering out some of these two dues now I'm gonna use a for loop in order to do this so inside of these curly brackets will actually write some Python code so I'm gonna say for to do in to dues now remember this two dues variable was given to us over here right so over here I specified that two dues has a value of all of the two dues that are up here and that are defined so I'm saying for to do in two dues and then down here we can say and four so we'll end off our for loop and why don't we put the name of the to do here inside of a list item so we can say to do just like that and I'll put some spaces on here so it's easier to see okay so now we have a for loop which loops over all of the two dues in our program and then puts them into list items so now if we refresh our page and actually we need to reset our server before we do that so now we'll refresh and you'll see that we have our nice header one and then all of our two dues are set up here in the for loop and if we want to see how this works in the internals you can see here's our HTML and we just have all of these different dues that are listed out just like that so it's the code that we rendered over here so that's step one and that's looking pretty good right we can now display all of our dues but there's another thing that we want to do which is we want to allow the user to add their own dues right we've kind of hardcoded these ones in we want the user to be able to say what they want to do in order to do that we're gonna need a form now there's a couple different ways that we can set up forms in a flask app but the way that we've been learning so far in this course is using the WTF form so those flask WTF forms and so I think that's probably the best way for us to do it in this project now we've already imported everything that we need so we have flasks form and we also have a string field and a submit field and so down here we can create a class which we could call to do form and inside of here we're gonna pass in flask form and we'll put a colon and then inside this class we're gonna define a couple things so the first thing we'll do is define this variable here and this is going to be the form field so this will be the field where the user enters in their to do so this is going to be a string field and once again this is something that we imported earlier and inside of here we're gonna say to do so this is gonna be like the the label or the text that tells the user what this field is for and then finally we'll put a submit button so when the user hits the submit button then our HTTP request it's going to be a post request will get sent over to our route and then we'll be able to handle it so over here I'm gonna say submit field and this is just gonna say add to do alright so we have our form setup and then the next step is to pass that form over here into our template so here I'm gonna say template form and this is just another one of those arguments that we can pass in and that's going to be equal to to do form and a new instance of it so I'm creating a new instance of the to do form class and I'm passing that in to template form okay so now that we're passing in the template form we can come back over to our HTML and we can write out the HTML for that so we're gonna create a form field and this is gonna have a method which is post so basically that means that when this form gets submitted it's going to make a post request basically it'll make a request to our server in order to create one of these two do's now inside of here we can start using that form WTF that we set up so inside of the double curly brackets here I'm gonna say template form dot hidden tag and this is basically going to ensure that our form is secure so remember before we set up this app config secret key this is basically what this is doing so this forum will sort of interact with our server using that secret key in order to validate the request and that's just something that we need to do for security purposes so now let's create a paragraph and inside of here we'll put the field for the to do so I'm gonna say template form dot to do dot label and remember over here in app dot PI we set the to do here and then we set the label text right there so there's our label and then why don't we just copy this and we're gonna put this down here and now we're just gonna say dot to do and then in open and close parentheses so this will create the actual text field where we can put our todo and then finally down here why don't we create a submit button I'll put it in another paragraph and this is going to be instead of template form to do this is just gonna be template form submit so this should end up creating a submit button for us all right so why don't we reset our server and make sure that we didn't make any errors so I'm gonna come over here I'll refresh the page and you'll see now that we have this really nice form so I could put my two Do's in here and then I can click Add to do and it'll make a post request to my server the last thing that we need to do is we need to modify the server so that it's able to handle a post request and basically we'll make the post request with the to do information maybe like take out the garbage and that will then add it to this todo list and then this list up here should get updated so we'll add another thing here now our form is already set up to accept a post request but down here in the index method we need to write some code so I'm gonna say if to do in request dot form now I imported this request library up here it's from flask and what I'm saying in this line of code is I'm saying if a post request or if really any request is made and it has a to do attribute then down here we want to do something so down here I'm going to say duze which is this to dues that we have up here dot append and then in here we're gonna put request dot form and we'll grab that to do parameter so once again here we're checking to see if the request got made and it had a to dues field on it and if it did then we'll append that to do to this to do array and we can get the to do by saying request dot form for the to do so that should be enough for our app to be complete assuming we didn't make any mistakes so let's restart the server and then we'll try this out so we'll refresh just to make sure everything is good and let's say we have a to do for take out the garbage so when I click this it should make that post request add it to the to dues array and then refresh the page so that the new to do is add it to that list and you'll see here that when I click Add to do it does exactly that and then let's do another one why don't we do go to work so we'll add that to do as well and you can see that it's getting added to the list so that's basically it that's how we can build a sort of basic barebones flask app on our local environment and you'll notice here that it's very similar to the way that we built these in the code Academy environment right except we had to create a virtual environment so that we can manage all of our dependencies and we created our templates folder manually over here but from this point on everything should be exactly the same as you've been doing it on code Academy so all the skills that you've been learning should transfer over into this environment as well so that's all I have for today I want to say thank you so much for watching I hope you learned something and I'll see you next time