hi everyone my name is Carlos I'm a web developer based in Brooklyn New York and today we're gonna look into pseudocode we're gonna see how to use it how to write it and we're gonna look at an example where we actually use it to solve a coding algorithm so what is pseudocode well pseudocode is a simpler version of a programming code in plain English before it is implemented in a specific programming language pseudocode is often referred to as a syntactical representation of a program and it doesn't have a strict syntax since it only represents the way we're thinking so it should leave very little for the imagination so it's readable for most people one of the most important keys to understand about pseudocode is that it's not a programming language it's actually a learning and reasoning tool used to help programmers understand and write code so it's language agnostic it's something that you're right that is not an actual code in any programming language but that if anyone were to read it it would be very clear to what is happening or what steps are being taken so what pseudo code actually enables us to do is to grab a simple set of instructions that are written in plain English and eventually translate that into a program that can be executed now there are a few other reasons why we would use pseudocode for starters pseudocode abstracts away syntax to let you focus on solving the problem in front of you so instead of getting bogged down in the exact syntax of a language pseudocode allows you to work almost impure programming logic this way you don't actually have to know what exact builtin functions a programming language provides you can simply write down in plain English what it is you're trying to do so why else use pseudocode well some people can visualize the entire solution to an algorithmic problem in their mind while others may find it difficult to come up with a solution without having to first write it down somewhere in general pseudocode won't do any harm if not any good it essentially helps us break down large problems into smaller manageable pieces through this running pseudocode allows you to think through a problem with some foresight and lets you anticipate important questions before they arise this is possible because they're breaking down something into multiple steps oftentimes when faced with problems a common gutter action is to jump straight into Google but there are ways of googling that are helpful and some that are actually counterproductive so if you turn to Google before thinking you're not actually thinking like a programmer so if you don't take time to write pseudocode and think through the details of the project you'll end up googling in an efficient way you'll end up wasting time so in the short term even though you're writing pseudocode might feel like you're taking two steps back to go one step forward it is actually saving some time and headaches along the way and breaking things down with pure programming logic and then googling or research and what you need to look for will essentially help you in becoming a better programmer so now let's go ahead and see how to actually write pseudocode and then we'll solve an algorithm together now pseudocode doesn't have a strict systematic way or standard way of being written so don't think of these as rules think of these as more suggestions on how to get started writing pseudocode so for starters you may need to capitalize Kumasi will remain in the actual code so if you're using if statements for example it's important to keep those if statements in capital letters this makes it easier to create code blocks and actually spots some of the logic next step is to actually stick to writing one statement per lime so each statement in your pseudocode should express just one action for the computer in most cases if the task list is properly drawn then each task will correspond to one line of pseudocode another really important one is to use indentation so using white spaces between blocks of text will help keep different components of your pseudocode isolated and indenting different pieces of each block will indicate that those pieces of pseudocode go under a less indented section you also want to make sure you're being specific so everything that is happening in the process must be described completely pseudocode statements are close to simple English statements and will be very easy for the person who's reading it if you're actually being specific and detailed for each step lastly you want to keep things simple don't write pseudocode in a complete programmatic manner it is necessary to be simple to understand even for a layman or a client so don't incorporate too many technical terms and make things overly complex okay so now that we have an idea of how to write pseudocode let's go ahead and take a look at an algorithm and start writing our own pseudocode and solution with it so this is a classic interview question and coding challenge that is very popular and you might have seen before it's called fizzbuzz so here are the instructions for fizzbuzz what we're gonna do is we're gonna write a short program that prints each number from 1 to 20 on a new line for each multiple of 3 we're gonna print fizz instead of the number for each multiple of 5 we're gonna print Buzz instead the number and four numbers which are multiples of both 3 & 5 we're gonna print fizzbuzz instead of the number okay so let's get started so I'm using Chrome here and I'm using my dev tools console in order to actually solve the problem I've also copied and pasted the instructions so it's easier to break down what exactly we're gonna be doing okay so first thing I notice is that we're gonna be running a program that produces a set of 20 different values so this looks like a perfect situation for a for loop so we know a for loop is written with three optional expressions so the first one will be the initialization expression so we're gonna be sending out the counter to one then we're going to add a condition for the counter to actually break with and lastly we're gonna add a final expression which will be the incrementation number so once we have our for loop created we let's look back at the problem where you have about four different conditions we're gonna be working with this means within our for loop we're gonna have four different if statements that actually give out different results depending on the number we're on so once we have our for loop here let's make sure we are also using indentation so let's get started with our first conditional now if we want to check if a number is divisible by another number we can use our remainder operator called modulo so we use modulo on a number and it returns zero which means that remainder is zero it means that it was actually divisible by that number and in one of the cases were actually checking if a number is divisible by both multiples of three and five if so we're gonna print fizzbuzz so in order to make this short and sweet we can actually just check if it's modulo 15 if its remainder is zero then it's true and we can just print fizzbuzz from there so I'm gonna keep some of the key commands in capital letters like my if and mod and I'm going to use some indentation under my if statement to make sure that there's a code block and within that if statement so for the next conditional we want to check if the number is divisible by three so else if number mod three is equal to zero then we're going to be printing this after that we want to check if the number is divisible by five and we're going to be printing buzz for that one so you can see I'm basically following the same kind of pattern here it's non following a strict rigid syntax but it kind of keeps the capital letters for the key commands and I'm keeping indentation to make sure that there's a code block within each statement and for the last conditional which indicates that it is not divisible by any of those numbers 3 5 or 15 we're simply going to print the number as is and there you go that is essentially our pseudo code so once our pseudo code is completed it's fairly easy to actually translate this to code if you actually have the steps pretty detailed and and laid out for you so I'm going to scroll this further down a little bit and I'm actually going to zoom out so we can see or pretty much what we're writing here so let's start out with our for loop here and we know that the for loop will start with the number 1 we'll keep going until it's less than or equal to 20 and we'll be incrementing it by 1 let's make sure the first if statement is added so we want to check if I is modulo and we use a percentage operator for this one is equal to 0 and if that's true we're going to actually console.log fizz buzz or close that if statements or write the second one so we want to check if the number is modulo 3 is equal to zero if so we're going to console.log fizz then we want to check if the number is divisible by five so i modulo five equals zero we want to print buzz for the capital b and lastly you simply have to print the number itself which is i will close that up close up the for loop and here you go we have the results here I'll zoom out a little further so you can see you can see all the numbers that are multiples of three are printed out as fizz all the numbers that are multiples of 5 are buzzed and the numbers that are multiples of 3 and 5 which is 15 only here is fizzbuzz now the more you write pseudocode the more you will find a way to write at them each sense to you specifically and running good pseudocode that makes sense to you is simply a matter of practice so what is some way you can actually practice in your everyday life so let's take a look at cooking ramen as pseudocode well with cooking ramen the first thing you would do is open the packet then you might feel a pot with water then you might bring the water to a boil before putting the ramen in for 5 minutes then you'll stir the ramen once every minutes and then after 5 minutes you drain the water before you actually enjoy it so you can turn everyday tasks for example doing laundry or cooking something else going out to a store and purchasing coffee into pseudocode and this will help you basically write pseudocode in a way that makes more sense to you so hopefully this gave you a better understanding on how to write pseudocode and how to use it they go for watching join the conversation by subscribing to this channel or drop in a comment below and if you want to take your skills to the next level start learning on Codecademy today