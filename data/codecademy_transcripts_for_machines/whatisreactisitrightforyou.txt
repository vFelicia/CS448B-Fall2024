Hi everyone, I'm Martin and I'm a San Franciscobased fullstack engineer. Today, we'll be going over a highlevel overview of the popular JavaScript framework, React. Today, we'll cover what React is, where it is used, and who uses it, and lastly, we'll talk about whether react is a good choice for any project that you might be working on. React is a JavaScript library used to build user interfaces or at least, that's the first thing we learn by visiting the React website. But let's dive a little deeper. React is centered around the idea of components. You can think of components as individual pieces of the interface. A component could be something like a simple button or as complicated as an online form. The idea behind components is that you encapsulate any piece of code that can manage its own state and you insert that into a component. If you need to build more complicated UI, then you can use multiple components to create more complicated interactions. Let's look at an example. Suppose we have a button on our page, much like this one. Our button is a standalone piece in the entire page and we can easily think of it as a component. Chances are we're gonna have more than one button in our application so we can define the code for what constitutes a button once and then we can reuse that everywhere else that we need to use a button. We talked about components but let's actually look at one in action. React supports both function and class components, the difference being that function components are defined as a function and class components are defined using in class in JavaScript. Function components are useful when your component is relatively simple and it's important to know that function components don't support some of the features of React. Let's take a look at an example function component for a button. Let's decode what is happening. The name of the function is the name of our component, in this case button. The function takes an argument called props short for properties, and this is how we pass information and data into our component. Now, the last piece is the most interesting the return statement. Our function returns what looks like an HTML button. This syntax is known as JSX and it is an extension of JavaScript that is special to React. You can think of it as a template for our HTML but a little bit more powerful or you can even think of it as HTML in JavaScript. It's regular JavaScript so we can use JavaScript to do all sorts of logic and expressions inside JSX, something that is usually a little bit hard to do using normal HTML templates. Now with that covered, what does the function actually return? What is the output of this JSX template? Our output is a react element. You can think of elements as the building blocks of components. Ok, so by this point we have components and now we have elements. Why do we need all this extra stuff? Well, the reason for this is the way React actually renders things on the screen. In the normal, flow your HTML code is transformed into document object model elements, also known as DOM elements, which we're going to represent as this tree structure. The DOM is a way to interact with what is actually on your page. Your CSS and JavaScript code interact with the DOM. You can think of the DOM as a tree structure stored in memory that represents your HTML code. While this is all great, it comes with some cons. If you want to find an element you have to traverse the Dom tree from the top all the way until you reach the element that you're looking for. If your app wants to do lots of searching for elements and lots of modifications to the DOM tree, things can start slowing down, especially if your DOM tree is huge, which leads to slower render times. Now React takes a different approach, it uses what is known as a virtual DOM. It basically skips the rendering operations until later. React builds an inmemory representation of the DOM that consists of React elements. The virtual DOM is once again a representation of your code, except this time it's a little bit simpler because it's just plain JavaScript objects and they are not actually rendered to the screen. React uses the virtual DOM to check for which parts of your UI have updated and it only updates the parts that have actually changed without touching the other elements. It looks like a lot more work but it can get done faster than manipulating the regular DOM by delaying the more expensive rendering operations until necessary. Whoa! Alright, that was a lot of concepts to cover so let's change gears quickly and talk about something different Who uses React? React is an extremely popular library and it is used by the likes of Airbnb, Box, Atlassian, Facebook, who are actually the creators of React, Amazon Video, Instacart, and probably most importantly, Codecademy. And the list here goes on and on. Literally, there is a list in the official GitHub repository for companies that use React. So it seems that pretty much everyone is using React, and the question now is, should you join the crowd? React has a pretty easy learning curve and it's straightforward to get up and running. One thing you should consider is the complexity of your application. React is what's known as a library so you have to rely on external components to build up your application. And while there is no shortage of these thirdparty libraries and components, they're not all written by the React team so they might differ in their philosophies and how they expect you to build an application. My personal recommendation would be to, at the very least, get comfortable with the basics. Try it out, see if you like it, chances are that it will make your frontend work a lot easier and at the end of the day, it is a skill that is in high demand, so it's worth learning it. Thanks for watching. Hopefully, this video encourages you to learn React. You can join the conversation by subscribing to this channel or dropping a comment below. If you want to take your skills to the next level, start learning on Codecademy today. Goodbye!