Hey everybody, I'm Bailey, a research scientist based in New York. This video is going to cover getting started programming in the Go programming language on your local Mac computer. We're going to cover a few things today. First, downloading Go for Mac, then we'll get our programming environment set up in the Mac terminal using our Bash profile and a number of other command line tools. Let's get started. Our first step involves actually downloading Go. There are two main steps we're going to walk through. We're going to navigate to the proper download site, then use the standard Go installment wizard to set up our version. The first thing we need to do is download the Go programming language. Go is an opensource programming language, which means that you and I can download its software for free. In addition, Go's documentation source code is widely available online, this means that any individual who's interested in contributing to the language can assist in building a new functionality or patching issues in the software. We can safely and efficiently download the Go programming language from its official website by golang dot org. All we need to do is hit this download Go button, select the proper version based on our operating system, let's click on the Mac version. Once you open the installed file, the installment wizard should automatically appear. You should install Go with the default setting, so all we need to do here is follow the installer prompts. Great! Once the software's been installed, we can exit the installment wizard and navigate to the test your installation header on the golang website. our next main step involves setting up our working directory. First, we're going to confirm that Go has been installed, then we're going to set up our environment and bin variables in the bash profile. All right, let's open up a terminal window. Using the command line, we're going to check that everything has been properly installed and specify some additional settings to make sure we can program properly in Go. First, we should check that everything has been installed in the directory we anticipate, based off of the default settings of the Go installer. We can do this using the CD command. CD here stands for change directory. It's a handy command that allows us to move in between directories or folders on our computer. Here I'm going to navigate into the user folder and then into nested folders called Local and Go. If everything has been properly installed, when we type in LS or list command a number of files within the go folder should be listed, as we see here. It looks like everything has been installed so we can go about specifying my Go working directory. Our working directory is where we will store our Go files going forwards. In order to setup our Go working directory, we need to set up our bash profile. A bash profile is a hidden profile your Mac's user system, which is loaded before the terminal loads your shell environment and contains all the starred configurations and preferences for your commandline interface. You need to modify our Bash profile in order to set up an environment variable, which specifies when a working directory will be and also setup a bin variable, which specifies which files would be used to run compiled to Go (inaudible). First, let's set up our environment variable. This command creates a string, which when piped into our bash profile, will specify where our working environment will be. We'll use an and statement to connect our next command, which specifies our bin variable. As you can see here, this command looks similar. It creates a string, which when piped into our Bash profile, will specify our bin variable. We hit enter to run the command and our working directory is now set up. Our third main step involves executing a simple Go program in order to confirm that everything has been installed properly. There are a few smaller steps in this process. First, we're going to create a working directory, then a series of nested directories. We're going to write a simple Go script, then compile and execute this file. Great! With our working directory set up, we can now run a simple Go program in order to doublecheck that everything has been properly installed. First, let's create a workspace directory. This can be done using the following command. This command creates a new directory called Go just off of our main home directory. We can navigate to this directory using the CD command. Inside of this directory, we create another called source spelled src. Let's navigate to the source directory, and then create one last directory called, "hello". Let's navigate into "hello" and now crate an empty file to write our Go program in. We can create an empty file using the touch command as follows. This code creates an empty file called "hello dot go". We can check that it's been created using the ls or list command. With our Go file created, let's click back to the golang website and copy over an example script they have prepared. Again, this script can be found under the test your installation header. Let's copy the script and open up hello dot go in your preferred editor, like visual studio code, and paste the example script into the bottom. Don't forget to save and then navigate back to the terminal. Great. Let's build our dot Go file with the Go tool as follows. This command will build an execute named hello in the directory alongside your source code. We can use the ls command to doublecheck that this has occurred. Great! Now let's execute our Go file. If you see the hello world message printed in your terminal window, then your Go installation is working. Congrats! Great! We've covered quite a few things today. First, we downloaded Go from online and talked about how it is an opensource programming language, which is free for us to use and is open to contributions from the community. We then set up or Go working directory and modified our Bash profile, covering how we need to set up their environment and bin variables in order to properly run Go code. In order to modify and set up our working directories, we used a number of command line tools, including moving through directories with a change directory command, making new directories with the make directory command, and creating new files with the touch command. Happy coding!