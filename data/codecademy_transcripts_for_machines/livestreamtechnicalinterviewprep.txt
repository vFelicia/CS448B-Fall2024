okay hey everybody I'm Patrick welcome to the live stream I'm very excited to be here today we're gonna be talking about acing the coding interview it's a topic it's very exciting especially in the new year you're thinking about making a change in your life maybe you want to get your first job as developer maybe you want to change jobs either way I'm going to talk through some tips and strategies today that will hopefully help you in your job search so for today I want to break this down into two parts for the first half or maybe first quarter I want to give you a broad overview of what you can expect if you've never applied for a job as a programmer it's a little bit different than another job application so I'll talk a little bit about what to expect as you progress through that process and then for the bulk of the livestream we'll work through a problem some strategies about how to solve that problem and maybe work towards like an optimized solution if we have time cool all along the way as always if you have questions or comments things that you're curious about please put them in the chat we're always looking at it and I'll try to keep it as interactive as possible I'm definitely gonna throw some questions to you during the stream so be on your tippy toes cool so to start applying for a job as a developer you know there is the caveat that applying for a job as a developer is like applying for a job in the sense that you want to present your best self you want to polish your resume you want to make sure it doesn't have any typos any of that but the first step of trying to get a job as a developer is unsurprisingly going to be applying right you're going to be looking on your job board and you're gonna see an opening for a web developer a software developer and you're gonna send them your resume a slight addendum to this that I'm going to recommend is if you can do it try to get some kind of referral I know if I spell that right so what this means is you know someone at the company maybe it's a friend they don't necessarily have to be a developer just someone at the company who can vouch for your character your work ethic that's really going to help you get a response so this first phase is probably gonna be the highest number you might may be applying to a lot of different jobs but a referral can really help increase your odds of success in hearing back from someone so after you sent out your job application usually the first step is going to be some kind of a phone screen so the phone screen can take a couple different forms maybe you'll be speaking with a recruiter so this is someone whose job it is to vet and evaluate candidates and guide them through the process at the company usually those types of phone screens are nontechnical meaning you're not going to be evaluated on your ability to program it's more about who you are what's your background why are you interested in the company maybe what do you know about the company the domain it operates in that kind of thing there are also phone screens that are going to be technical and these will usually follow a nontechnical phone screen so in a technical phone screen that's when you will be paired up with an engineer at the company and there'll be a value awaiting your ability to do the job of a programmer so you may be doing a shared screen exercise where you're typing into an editor where the engineer can see it on the other end of the line and they're asking you a question and you're writing out some code to solve that question a lot of companies will vet this out to a thirdparty service like carat or triple byte and it's a very similar idea where you're logging onto a platform they're giving you a question maybe they're giving you some inputs you're writing code to solve it that will like output a solution to the problem another sort of thing that will come up at this phase is a take home challenge so I'll write that out call it take home now a take home challenge is going to be a little bit different whereas with a technical phone screen you're talking to the engineer so there is a time element involved with it and a take home challenge they're giving you a prompt or maybe a package of files and that prompt is saying we would like you to build you know say a website that can upload photos and display them or a todo application something to that effect and you are able to build this application in your own environment somewhat on your own time usually they'll give you an expectation of maybe three to five days but the takehome is trying to replicate less pressure on you less time intensive pressure whereas a technical phone screen you're really right in the moment you're given about 45 minutes to solve that problem cool so assuming you do well in these steps that's when you move to your on site and the on site is when you're actually coming in person to the company it's a very exciting moment because you passed a few hurdles at this point and this is where you're coming in person you're greeting people and the on site will have several different aspects to it usually a lot of on sites are allday affairs or halfday affairs so it can be somewhat of a marathon and the recommendation here is do your homework you know understand what kind of a company this is understand who it is they're looking for what types of things do they value so for example at a company like Codecademy we are looking for people who are very passionate about education and pedagogy and people who care about accessibility in education so those are things you qualities that we'll be looking for every company will be different obviously with the onsite usually you'll also be evaluated on your technical ability your ability to solve problems so there may be a situation where they're giving you a problem in front of a whiteboard and you're writing out the code which is what I'll be demonstrating later in the live stream there may also be on sites where you're pairing with a engineer on a computer so you're both sitting at a computer together and talking through the problem maybe you're working on code that the company actually has in production something to that effect so this is a pretty high level it's difficult to get a very very specific advice because every company is different but these steps are pretty much always going to be present you're gonna have to apply or be referred there's gonna be some sort of screening process which is sort of like an introductory are you a crazy person are you saying who you you know are you the person that we were looking for in this company and then the onsite which is a little bit more a little bit more of an effort you're coming onsite we're meeting you probably getting lunch or something like that I'm cool any questions about that again fairly high level so one question we got is as I've heard it's a red it's worth working through project Euler so this is a website of which there are many provides you with problems that you'll try to solve in the coding language of your choice practice always a good thing you can never it'll never be a bad thing to practice these problems project Euler is a little more math focused so if that's a domain that you're not as comfortable in don't be discouraged not every company is going to expect you to have that sort of understanding but it is a great great site to practice on we'll move on now to the actual problem and what I'm gonna do is kind of play both sides of the coins so what I mean by that is I'll take the place of the interviewer what they may say what they may ask of you and I'll also act as the interviewee and what you can do as an interviewee to help increase your odds of being hired cool so one sort of overarching piece of advice I'm going to give is ultimately even when you're being evaluated on your ability to code the most important thing is do the people that are in the room with you or on the phone with you do they feel like you're someone they like to see every day at work and work with are you a collaborative person are you a person who communicates well do you listen to the things that they say do you incorporate the things that they say into your decisions and thoughts those are the types of characteristics that are appealing to an employer if you're someone who is very very shy this can be kind of tough and it might feel a little bit like you're being grandiose or arrogant but this is really a time to shine think about the strengths you have as a person as and as an employee and that's what you're trying to like put forward great so without further ado what I the question I'm going to be posed is given an array you need to find the index where the sum of all values to the left of that index equal the sum of all values to the right of that index that's our question so the first thing whenever I'm asked a question in a technical interview is it's sort of like a deer in the headlights moment maybe and what I would always recommend is rephrasing the question and what this does is gives you a moment to breathe and it also helps iron out any misunderstandings so when I'm receiving this question I may say to myself okay what does that really mean what are they really looking for anything that I'm unsure about anything that's ambiguous those are the things I want to pose back to the any of your interviewer and make sure that we're on the same page working together so one thing that can be helpful especially if you're in a white boarding type of environment is start drawing out examples and say well if I have this type of an input I would get this output is that right is that what I'm looking for and that will help sort of begin this dialogue with the interviewer so if I'm looking for this we'll call it an equilibrium point in an array I'll pick maybe like a very basic example here of 1 0 & 1 cool so given this input I would expect this to be the equilibrium point because if I look to the left of that index I'm seeing 1 and if I look to the right of that index I'm seeing another 1 1 equals 1 so this is kind of the moment where I'm starting to like flesh out what exactly are you looking for and there is a little bit of ambiguity here and so this is kind of a moment where I'll be like well are you looking for the value located at the equilibrium point are you looking for the index where the equilibrium point resides oh sorry switch into the black marker just a little tidbit about myself my favorite color is blue but it is not the easiest color to see so my apologies let me erase that I'll start over so just to kind of recap what I'm going to be looking for is the index so you know maybe that's an ambiguity that came up and I and I ironed it out with my interviewer I said well what I really want is that index so if this array is my input what I'm looking for is the index of 1 assuming a zerobased index so we have index 0 and X 1 and X 2 I would expect 1 to be returned I'm going to pose a question now back to you I feel like I've maybe a little bit scoped out this question but what are some other things that you feel are unclear or if I were to ask you to solve this question you would want to know to make sure like what are some other things that could come up what we call edge cases maybe that could arise and what what would be expected to be done in that kind of a case so I'll pose the question to you given this equilibrium point question what are some things you might want to consider I'll fill in one more while we're waiting so yes there is no equilibrium that's a great one so thank you rob tuck definitely really really really great observations so there may not be an equilibrium point and again just to illustrate this there's no harm but like let's say I have 0 7 7 so at this point I don't have an equilibrium point right so if I take my sum here there is no sum I have 14 I take my sum here I have 0 and 7 I take my sum here I have 0 and 7 so I'm never gonna reach an equilibrium point with this input so in this case I kind of have a conversation with my interviewer I'm like okay well I know that you'd like me to return an index if there is an equilibrium point if there isn't would you like me to return a boolean maybe nonnil depending on the language that you're working with maybe negative ones is sometimes used to indicate a sort of non index position so great job Rob Chuck that's a good one to ask I have another question for you is it possible that there are multiple equilibrium points so let's say for example we have negative 7 1 5 2 negative 4 3 & 0 ok cool so in this input we have an equilibrium point here where we have negative 1 and negative 1 and we also have an equilibrium point I think here where we have negative sorry here hmm let me do this really quick aha that'd be 1 and negative 1 maybe we don't have another equilibrium point I don't know do we see it I think there is another equilibrium point here but I don't like it stuck on this but in that type of a situation again it's a case we're going to be talking to the interviewer like do you want a single return would you like maybe an array of the indices in that case and I would work it out with the interviewer cool so in this case at this point I feel like we've sort of scoped out the like the breadth of the problem like what are we really looking for and now we can start getting into my strategy once I know what is expected of me now is the time for me to have a conversation about how I'm gonna go about achieving that so this is another part that may feel a little bit uncomfortable because you are sort of admitting to a certain extent that you may not have an idea in the moment of how to answer this question but that's okay the reality is working as a developer you're often in a state of notknowing so in an interview setting it may feel really uncomfortable like you want to be the person that always has the answer that can immediately say oh you just do this but that's not very realistic so it's totally alright to talk through things if you have absolutely no idea and you're totally stuck even saying that to the interviewer can maybe solicit some kind of a dialogue the one thing that you really don't want to do is just sort of freeze sweat sort of like Hammond haw and I think mostly that again comes from the idea that you should know the answer immediately and that's just an unreasonable expectation for yourself so I think I've done this a little bit let me draw this a little bit bigger in the center so you can talk through it we've got negative 7 1 5 2 negative 4 3 & 0 cool so here's the array that I'm working with and when I was talking through my example inputs I kind of did this thing where I move through each index and I talked about the sum to the left and to the right so I'm gonna kind of explore that because I feel like maybe that's my key to trying to solve this problem and if I'm starting here I kind of have like nothing or nil to my left and I've got 8 negative 4 is 4 plus 3 so I've got seven here then I'll move one over and if I looking to my left I've got negative seven here then I've got 7 minus 4 is 3 plus 3 is 6 and so on and so forth I don't necessarily need to go through each one but I'm kind of like starting to form out like ok so what I really need to do is move through each element in the array and then somehow I need to take all the elements to the left of that index sum them up take all the elements to the right of that index sum them up do some kind of comparison cool great so I have like the beginnings like my Inklings of how a cool edge case a lot of hahaha that's true when I was looking for multiple edge cases are sorry multiple equilibrium points an array of many zeroes would have been a great example so you know no no lack of equilibrium points here very nice thank you Julio cool great so at this point like I'm talking through my strategy and I feel like this is the point where I'm kind of thinking out loud is what I'm doing and all this time I'm directing my attention to the interviewer like you understand what I'm saying does this make sense to you the interviewer may be very engaging they may be very collaborative they may be kind of stonefaced don't take it personally if there stonefaced maybe that's just the type of person they are maybe they feel that to evaluate a candidate they can't really give a lot but don't be discouraged and don't stop from talking to them you know if you're talking through how you're gonna solve a problem to an interviewer and they're just getting you nothing back that doesn't mean you should stop like always present you're thinking you really want to make sure that the person evaluating you has a very clear idea of your thought process because that is a very important aspect of working with someone you want to know how they think how they take in ideas that kind of thing cool so as I said before I feel like I have a general strategy here for how I'm going to solve this problem and what I like to do in these cases is give myself like a little bit of a roadmap so what I'm doing here is trying to offload some of the mental like the mental strain on me I'm a very simple guy I can only keep so many things in my head at once so if I have a strategy that works as like a highlevel I want to like write it down here so I can refer to it later and that way when I'm working through like actually writing out the code I don't have to be trying to remember what my approach was so let's say I was going to iterate through the list I was going to sum all of left and I was going to sum all of the right compare if the loop is done then I'm gonna return I would say none cool so one thing I haven't talked through yet because hopefully this is something that is going to be clear in the job that you're applying for when you're asked this type of a question and it's not evident the language that they'd like you to use I would just do a quick hey I'd like to solve this problem in Python that's the language I'm most familiar with is that okay with you and I would say nine times out of ten I've never been in a situation where they've said no do a completely different language in all likelihood the language that they're hiring you to work in is probably the language they'd like to see but if you don't know it that's fine just use the one that you feel most comfortable with cool just trying to catch up with the chat okay great cool so I have my sort of road map this is the thing that's going to keep me on track and at this point there's nothing left to do but to jump into coding and I do kind of want to draw attention to the fact that I've been talking for like a decent amount of time right and I haven't written any code at all and again that that that like may at first feel kind of strange but it is totally alright like coding is not a profession we're rushing is going to help you being able to plan talk through an approach these are the things that are going to ensure or at least help you get a solution that has less bugs that functions the way that you want so don't be in a hurry to jump to writing code immediately because it will always help you to take a step back really think through the problem how you're gonna solve it cool and without further ado we're gonna start writing the problem out so in this situation I'm again I'm gonna try to keep up this collaborative aspect of it where I'm going to you know write out sections of my code describe why I'm writing them out again I want there to be zero room for doubt zero question about what I'm thinking at any given moment cool so I'll start with def I'll call it equilibrium point what have you it's going to take in LST that is my list great and what do I want to do when I'm in this list well I want to iterate through it and as I'm working through the problem I'm realizing again it's good to have an example input I've had it a few times that I've also erased it for space so and I think zero so a little messy hopefully people can still see there this is kind of what I'm going to refer to as I work through it one thing that I feel like has been a little bit ambiguous and this is something I probably should have clarified with the interviewer I'm just going to kind of make a decision right now is there are times when I was treating the very first index to the left of the very first index at zero I could also treat it as like none or not even zero that's kind of a decision I have to make so as I iterate through the list what I'm gonna do is start at the first index because by starting at the first index I can look for all the values to the left and the right I feel like again this is something that's a little bit like ambiguous and whatever I came to agreement with the interviewer which happens to be me in this case would be the acceptable thing so I'm gonna write my for loop my iterating variable is going to be ID X I'm going to use my range function so if you're not familiar with Python what range is going to give me is a series of numbers based on the arguments passed arranged and as I just said I'm going to start at one and I want to go up until this secondtolast index so I will get the length of the index I'll use the Len function pass in list and I'm going to subtract one from it and just to recap again for people that aren't very familiar with Python what this is going to give me is a series of numbers from 1 up until this index here so range is non inclusive of the second argument and I'm also subtracting one cool okay and so now that I'm iterating through the list what do I want to do inside of it I want to sum all of the left ok great so I'm going to create a variable I'll call it left some okay and left sum is going to be a sum so there is a sum function in Python that sums all the values in a list I will make use of that and some takes as an argument a list and I'm going to pass in a sub list or a slice of the original list and I want to slice everything to the left of I DX right i DX is sort of my marking point of like where that equilibrium point could be so I'm going to take the slice of everything up until that point so I will take lists and the syntax for slicing up until a point is I'm not going to put any value on the left side of a colon and on the right side I will put I DX and then I'll close my invocation of sum so again what I'm doing here is taking a copy of the sub list all the values from the very beginning which is that empty space to the left of the colon up until but not inclusive of the index great so my left sum do my rights um I'll do kind of a similar thing some of the list and now I'm going to slice it in a different way so one thing again it's been kind of implicit but I want to be explicit about it now we're not including the indexes value in the equilibrium point so that's being excluded so in this case I want to take ID x plus 1 so I want a slice of all the values one from the right of this iterating index to the very end and I can denote the very end just with an empty space again similar to at the beginning of the array there and that will give me all the values to the right of the sub cool so I have my left sum and I've got my rights um and now I want to do my comparison great so I'll just say excuse me I want to say if left sum is equal to write sum if that's the case then I found my equilibrium point and I want to return the index cool and if that's not the case if I get through this whole iteration then I want to return none ok so a little bit sloppy I wouldn't really say that in interview but just sort of like I'm being honest with myself I'd probably want to write this out a little bit neater hopefully people can see it but just to recap what I've done here defining my function it takes a list as an argument I'm gonna iterate from this first index to the secondtolast index in this iteration I'm going to get a sub list of all the values to the left a sub list of all the values to the right and then I'm going to compare them so I wrote some and Sun and sort of some if they are equal in value I'm going to return that index that iterating next otherwise I will return none cool so at this point I've written out my code I've talked through my strategy I feel reasonably confident that this will work but you should never be overly confident in an interview and even if you are you want to really show that it works so in this kind of a case this is why we have our like sample input because now we can kind of put it to the test walk through each line of code plugging in this input and seeing what comes out I've got a little bit of space here so maybe I'll try to do it there perfect so to start I D X is going to be one we're starting at one there the sum of everything to the left up until it is going to be just do LS for left sum and we'll do RS for right sum so my left sum is going to be 7 or it starting negative 7 excuse me my right sum will be 7 minus 4 is 3 plus 3 is 6 6 those aren't equal so I'm going to increment my index and now I'm taking for my left sum these two values so that's going to be negative 6 and my right are going to be negative 2 plus 3 is 1 so negative 6 & 1 those aren't equivalent get out of here you and we're gonna go index 3 so maybe I'll write my indexes down here to make it a little easier cool so everything here so I've got 6 negative 7 so that's negative 1 on my left and on my right I have negative 4 3 & 0 so that's also gonna be negative 1 and dingdingding we found our equilibrium point so we're matching this conditional here and we're returning the index that's the end of our function very cool I'm super proud of the fact that I wrote a solution and let me just check in with the questions and sure we're cool here some questions about Python I'm sorry that I have to use a specific language I chose Python because I feel like it's probably the closest thing in terms of readability there's less syntax quirks we use indentation or whitespace in Python to denote blocks of code so that's what you're seeing there cool some questions about greedy algorithms I'm not going to touch that because I don't want to get to sort of like down that rabbit hole I would definitely check out our CS path and the algorithms we have there we have a lot more indepth discussion there plug cool sheet of builtin functions yes so so that's an interesting question any function that the language provides you is fair game to a certain extent if an interviewer asks you for example to write like a sorting function and you use an inbuilt sort that's probably cheating but you know most interviewers are gonna be happy with the fact that you're using some rather than like you know writing a for loop and summing manually this is really going to come down to your familiarity with the language and as I said you know earlier when someone was asking about project Euler practice makes perfect the more comfortable you are with the language the more familiar you are with the different inbuilt functions the less time you have to spend thinking about that and the more you can focus on the actual problem so I wouldn't bring in like a cheat sheet of functions but that is just something that hopefully you'll become more and more familiar with as you practice if you're not if you're really like stuck and you're like oh I just need like a function that could like some values of a list then I would be set you know the interviewer might suggest oh well Python does have a sub function you know that there may be something like that but you can't be like oh if only there was like a function that could find the equilibrium point of a list you know like you can't do something like that it should be like a small piece of the problem not the problem itself cool great so we are getting a question about efficiency and time complexity so that's a nice segue thank you very much so I'm going to talk about that one thing that's a really really great signifier that you're like a serious engineer that you care about scale you care about time complexity is to talk through the efficiency of your code so let's just like take a look at what we're doing here right we're gonna talk about I'm going to talk about this in terms of Big O notation if you're not familiar with Big O notation we do have an excellent course on it at code Kadim e but I'll give you a very highlevel very succinct uhm idea of what Big O is and that's sort of like how much work is our function going to do based on the input it's given so if I give it a little bit of input is it doing a little bit of work if I give it a medium amount of input is it doing a medium amount of work if I give it a lot of input is it giving a lot of work you know that would be like a linear time complexity is what we would call that and in other words the work scales one to one with the input that's the idea of like a linear time complexity like a worse time complexity would be a quadratic time complexity where I'm doing you know the sort of like line of my work Rises very steeply rather than being sort of a straight steady increase so with that very bad very high Big O notation we're gonna jump into analyzing this so let's take a look at what we're doing here as someone said like what if this input list was like millions of elements right well one thing I'm doing is I am iterating through each value you my range I mean I'm you know leaving off a value here there but for the most part I'm gonna go through each element and oftentimes in Big O notation we're talking about the worst case scenario so if I had to do the most possible work this function had to do what would you know what would be required of me so in other words if I found the equilibrium point at the first value that's not really very interesting if I don't find the equilibrium point that means I'm going through everything right so that's what we're gonna consider so in a worst case scenario I'm gonna go through every value right and then I'm summing I'm making a copy of a list and so we may be tempted to say well maybe this is linear because I know I'm going through every value but we want to think about what work are we doing for every value right anything that happens in this block is happening for every value in our input list so let's really kind of drill down into what we're doing and again let's just like take this scenario here where we found the equilibrium point we made a copy of the list so we made another sub list here that was like negative 7 1 & 5 that was our left that was the copy we made and then we summed and to summit you can imagine we're going through every value and adding them together so we're making a copy which requires us to go through every value to copy it over and then we're also going through every value to sum it together and we're doing the equivalent on the right side so we also have a list that's like negative 4 3 & 0 and so what we can see here is we're kind of creating a whole new version of the input array it's a little bit smaller because we're excluding that middle value but otherwise it has as many elements inside of it as our input and in Big O notation we talked about the input as n usually like a big n so what I'm doing inside of the loop is also could also be considered n work or a linear amount of work putting that together for a linear amount of work of iterating through each element I'm doing a linear amount of work so n times n times n you know that I'm doing it multiple times so that's not great either but the time complexity for this is actually going to come out to N squared o of n I'll write it out there and again n is the length the number of elements in our list so not great not like our ideal efficiency and so if if what we just covered feels a little bit like whoa I didn't even I you know like this seems like a lot don't be discouraged I wouldn't say that this is the endall beall of doing well in a technical interview ultimately you're being hired to implement business logic build applications build features so if you're someone who's really passionate about coding and you can come to solutions that is a really really good accomplishment and something you should be proud of this is sort of like the icing on the cake the real nice way to distinguish yourself talking about time efficiency but don't discount this work you're getting to this point to be able to write out this type of a solution is really great cool awesome so at this point yeah I think I'm trying to think of how much time we have and I feel like we could probably code up a more efficient solution so let's do it I'm what I'm gonna do is take this work here I'm going to erase it so now we're gonna dive into like okay I want to write a more efficient solution for this problem I'm gonna sort of undo the code I've done because at this point I've sort of satisfied to myself and hopefully to the interviewer that I can code up a solution to this but now my challenge is I want to do a better job I want to make this more efficient and when doing a more efficient solution I find that like a general helpful strategy is how can I eliminate repeated work so to put this another way when I was analyzing the time complexity I was summing up the sub lists and I was summing up the sub lists multiple times I was making a copy of negative seven then I was making a copy of negative seven and one and I was making a copy of negative seven one five and so on but negative 7 and negative seven and one aren't all that different right like it's just one more value so do I really need to copy over and sum over all these values every single time through my loop that's my way of thinking of like oh maybe I can reduce that complexity this is definitely again a little bit more advanced and if it's this feels like a little discouraging or hard to grab that's totally ok this is really comes with like a lot of practice during this for several years so again don't be discouraged but what I want to do is remove that repeated work so you know one thing I have to do is I have to iterate through the array like I have to go through the array to find out where that equilibrium point lies so I'm gonna have a for loop I know I'm gonna do that sold you for EDX in range about boat range length of the list great cool so I still need my loop but now what I'm gonna do is I'm going to sort of create a running tally and I think someone talked about like a greedy algorithm and this is kind of like moving in that direction of like the idea there what I'm gonna do is I'm gonna create a sum which is the entire sum of the array and I'm going to create a sum that's like no elements in the array and then I can make small changes to each of those values as I move my way through and in that way I won't have to do a sum for every iteration of the loop and I won't have to do a sub slice of every iteration in the loop so what I'm going to make is a left sum and my left sum is going to start out as zero and I'm also gonna make a right sum and my right sum is gonna be the sum of the list so basically everything right and what I want to do now is in my loop I want to add to my left some I want to check whether my left sum equals my right sum if it does I found the equilibrium point we can all go home or I want to subtract from my right some cool so let's move through this again ok cool I think I'm doing this correctly if I'm not I feel free to call it out to do what I want to do is take my left sum and I'm going to add to it the value in lists located at index so LST idx cool then what I want to do is check if the left sub is equal to the right song if it is I want to return the index if it isn't I want to kind of set things up for the next iteration of the loop and I need to subtract that value from my right some otherwise my left sum is gonna build up but my right some isn't gonna go down so I'm going to subtract from my right some minus equals the value at the list at that index cool beans and then out of four if my loop concludes I'm gonna return none great cool again like I'm kind of like moving through this quickly because I don't want to keep everyone too too long but I think we can wrap this up in the next couple minutes so I feel good about the code I wrote but again it's not about you feeling good it's about showing that it works so we're gonna step through win the input and see how this goes just like before I find it's really helpful to like diagram out the variables that you're working with just to like really like have it all out there I don't need to keep it in my mind I can just refer to it on the board so I've got my index I've got LS will be my left sum and I've got RS which is my right sum so unlike the previous solution I'm starting at the 0th index so a little change there so index 0 my left sum is starting as 0 as well and my right sum is the sum of the list which is negative 1 or sorry negative 6 negative 1 positive 1 negative 5 negative 2 doing math on the spot not my most strongest suit but I feel I'm doing pretty well cool so we're starting with the first thing we're gonna do in our loop is we're gonna add to the left sum of negative 7 so my left sum is going to become negative 7 then I'm gonna do my check is negative 7 negative 2 no it's not then I'm going to subtract from the right sub so I'm going to subtract negative 7 from my right some negative 9 wait yeah I think that's right cool and then I'm gonna go back in the loop now I'm at index 1 cool 1 is my value I'm adding to the left some so that's going to become negative 6 and I'm going to check is negative 6 equal to negative 9 no it is not and so I'm going to subtract from my right sum of negative 1 so that's gonna become negative 10 I'm going to to now cool so adding to the left sum of 5 so this becomes negative 1 are they equal no they are not the right something's gonna get subtracted of negative 5 so that's negative 15 does not feel like I'm moving towards the right solution here I think there's a bug in this what have I done oh yeah yeah nice ok cool so thank you very much for helping out in the chat my Aeneid and my initial summing of the list was incorrect so negative 7 plus 1 is negative 6 plus 5 is negative 1 plus 2 is positive 1 minus 4 is negative 3 and plus 3 is 0 so again folks just goes to show that mistakes happen and that's totally fine the good part is that we were able to get to the bottom of it and also this kind of illustrates the benefit of yyou want to walk through the code that you wrote with these inputs so in this case when I was doing my demonstration that's where the mistake came in but again mistakes happen it's ok let's start this over really quick my apologies so my left some weight all right all right hold I was like it zero zero and the sum of the list is zero so yes so great so a little confusing we're back on track my index is zero I'm going to add to my left some at that index so my left sum is going to become negative seven they're not equal so I'm going to subtract from the right some negative seven cool I'm going to add to the left some one so that is negative six they're not equal so I'm going to subtract from the right some negative eight I'm going to add to my left some five the next value so that becomes a negative one subtract this that it becomes negative thirteen did I do this correctly negative negative 7 is plus seven all right all right at this point I feel like I'm trying to rush through a more efficient solution which is probably not the way to go about this so I'm sorry to end on such like a disappointing note but I feel like at this point you'll have to make the evaluation of whether you're gonna hire me or not I could try to debug here I don't know do people want to see me debug this I feel like a pretty close all right I'll jump through the questions okay cool so the question is about like how difficulties progress I would say in general at least in my experience and the people I've spoken with who have done it just need to debug math skills it's true I would say that the time spent in the onsite is more significant than the time spent during the phone screen so in that case you may you're going to be expected to be talking about how you code through solutions or the problem on the on site I don't know necessarily that the problems become more complex or more difficult but there is more time devoted to evaluating you as a candidate so in that in that sense you will sort of be evaluated a little more strongly in the onsite than the phone screen any other questions yeah generally what you do in the if you make the mistake as I literally just did in front of you is first of all it's not the end of the world like mistakes happen everyone makes mistakes the most experienced professionals make mistakes the most neophyte beginner makes a mistake I think what like what you can do is acknowledge that and move forward now in this case I'm trying to like wrap up this so I'm not really gonna go into a debugging mode but in the interview like I'm gonna be talking with an interviewer he's maybe gonna help point me towards the solution yeah yeah I mean again like I don't go down the rabbit hole of debugging it haha but I think the important part is to acknowledge that you made the mistake talk about why that mistake happened so you know for example and the first time I was like oh right the some of the list isn't negative 7 or whatever I said it was it's actually zero that's where the mistake happened so you're sort of showing the ability to diagnose why you went wrong and what you can do to get back on track which is debugging again it's a very valuable skill if you don't pass the test so that's a good question about passing the test in the phone screen so some screens especially if it's like a third party screen there may be like a number of tests you have to pass like literal like redgreen tests usually you need to pass those or at least a good amount to proceed if it's a problem you're working through with another engineer it's gonna be a little bit more subjective because there's that human element in it but again in those cases usually you at the very least have to find some kind of a solution so if I'm diagnosing my own interview right now I would be like points for being able to come up with the more naive implementation he struggled with the more advanced version of it but I think he was on the right track so in that case it really comes down to like the companies needs evaluating against other candidates like going back to making mistakes I think that's another important thing to keep in mind is you're being evaluated based on the other candidates you're not being evaluated based on a sort of like perfect human being that can answer everything perfectly instantaneously you know you you're only gonna get hired or not hired relative to other people I'm cool yeah so I would say that the the computer science path starts you off with fundamentals of Python so if you don't have a lot of experience that's totally okay we'll teach you through the very beginnings the building blocks of the language and we'll get you all the way up through more advanced algorithms and data structures if you completely go down the wrong path with a solution so this is a good question again Rob Chuck thank you I would say that this is somewhat dependent upon the interviewer but in general I think it's helpful to imagine that interviewers want you to succeed if you do a really good job in an interview that means the interviewer doesn't need to see other candidates and they can fill the need they have at their company so if an interviewer sees you going down the totally wrong path like that is not correct they probably are gonna speak up and say something you know I don't think it's helpful to think of interviewers as like vindictive people that want to see like struggles I in my own experience being an interviewer I want to see people succeed I want to help them as much as I can without sort of tainting the evaluation of them as a candidate you then recover from that as a as an interviewee like oh I went down the wrong path and they like got me back on the right track what do you do gotcha yeah I think if you go down the wrong path and you could sort of then in the moment try to diagnose like okay I went down the wrong path in my strategy I was including for example the value that I was supposed to be finding the equilibrium point and that was preventing me from finding it so you know that was how I made my mistake and now I'm going to rectify that mistake by leaving it out of my calculations so I think the again it kind of goes back to like trying to selfdiagnose articulate what went wrong and how you can find a solution for it like okay this was a mistake I made here's why I made that mistake here's what I'm gonna try now more interview prep livestreams I'd love to do them hopefully I can come up boy I really feel like this works there's something wrong crazies but yeah I would love to do this more so if people are interested let me know great I think at that point it's been almost an hour so I'm gonna put a button on it my kind of final thoughts are for one like don't be discouraged finding a new job especially in a new field is very difficult I don't say that to be discouraging it's more like this is the road ahead for you and you know like any goal that's worth having it's gonna take some effort but you can absolutely get there the keys are putting in the practice having patience with yourself being able to appreciate where you've come even if you're not quite where you want to be like personally I'm proud of the fact that I could come up with some things a moment even if I wasn't able to like totally ace this but those are the main things and again like communicate with your interviewer talk to your interviewer try to build a rapport with them try to build some kind of a relationship because that is one of the people they're one of the people who are gonna be making a decision about whether to hire you or not so if even if you come up with like the perfect solution but you never talk your interviewer you never tell them what you're thinking it's gonna be kind of hard to give that person the green light because you just don't know what they're gonna be like to work with and that's that's a very dicey situation cool thanks so much everyone I really appreciate your attention have a good one good luck with your job interviews