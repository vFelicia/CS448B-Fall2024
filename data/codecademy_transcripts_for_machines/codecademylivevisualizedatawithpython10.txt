hi everyone if you're there with us apologies we started a little bit related to technical difficulties but we're on now hey uh welcome to codecademy live where we're streaming visualize data with python our skill path um and we're currently on to panda data frames which is really exciting i'm marielle i'm a senior curriculum developer at codecademy i'm out quarantining in massachusetts right now although i'm normally based in new york and here with me is my colleague hi everyone my name is ian i am a data scientist here at codecademy i'm super excited to be working with you all today to discuss uh diving into pandas a little bit more a super helpful and great tool for data analysis for all of you python uh users so thanks for bearing with us on a little bit of a late start um and we're excited to uh get into things here today with you all absolutely so i'm about to share my screen and if you want to and along i'm about to throw a link into the chat so as marielle is walking through the lesson on your screen uh you can continue along at the same time excellent exactly so i'm about to share my screen ian i think i'm getting your audio a little bit of your audio feedback uh but hopefully everyone can see my screen now um and we're gonna walk through this lesson together without further ado yes um and so everyone um i'm having a little bit of issues of pacing in this uh i'm gonna i'm gonna throw it in so no worries boom mario cool um anywho without further ado here's the lesson want to start us off yes um so if you've been following us along with us um so far you've had an introduction to pandas which is a really helpful package for working with data in python and essentially lets us model or organize our data into data frames uh which are table like structures similar to maybe a google sheet or an excel file that you might have worked with before and today we are going to talk a little bit about how to modify these data frames so when we have information stored in a table with columns representing maybe different variables of data we've collected and rows that maybe represent um individual um kind of accounts or um or observations um how can we make changes to the data that we have here um and so on the right hand side of the screen you can see that we have a jupiter notebook file um another tool that i really love for data analysis um and uh we are in this file um loading the pandas package um as marielle is highlighting and then reading in some data from a csv um typically when working with data frames we'll we'll maybe load in our data from a csv um we do a really quick analysis here where we're just looking at the data using the head function um seeing what's going on and it looks like we're working in this example with some data um from a store that is selling shoes and we're seeing that some of this data is a little bit messy um if we're looking at that shoe type column we're seeing that some values are lower case um some are fully upper case uh it's not consistent and with data something that we really like and strive for is consistency um and um you know in the rest of this notebook we can see that we are using pandas and some functions from pandas to do some data manipulations and to modify this data frame and right here we are taking a function lowercase that is going to lower case a text string for us and we're applying that function um to our shoe type column of our data frame and what that's doing for us is we look at this data frame that's been modified we can see that all of our shoe type values are now lower case so this is a quick example of what we can do with data frames and pandas um so don't worry if um that seemed like a lot really fast or if you're maybe not too familiar with pandas i will spend uh the next uh you know 45 50 minutes showing you how you can use pandas to do a modification just like this awesome thank you so much uh so in the meantime if you have questions about pandas uh we're gonna take break points that uh you know a few times throughout this lesson and um we'll be able to answer some of your questions that pop up in the chat all right so we're gonna move on to exercise two adding a column um so sometimes we want to add a column to an existing data frame we might uh might want to add new information or perform a calculation based on data that we already have so what can we do ian you want to walk us through this yeah um so in this example we have a hardware store called the handy woman um and uh there's a data frame here that represents inventory information um and so if you're a store and you want to keep track of all the items and the products that you have a data frame can be a really useful business tool for keeping track and organizing on what you have in stock um so if we take a look at this table we can see some information um so we have a product id column which seems to be a unique identifier for the different products that the store offers um there's also a product description which seems to be explaining what that product is um so we have a screw and a nail a hammer screwdriver all your hardware store essentials um and then we have two columns that give us some information um some numeric information about these products so we have cost to manufacture um and the price uh so um with this information um we are able to have an understanding of what's going on in our store um but it seems that we're missing some information um and in this case that is the actual quantity of each product um in the warehouse so how much of each of those individual products does the store have and so we're able to add a new column to our data frame with this information using the syntax that you see right here and so we're using the name of our data frame df and we are creating a new column which we are indicating within these brackets and um with the string quantity so that's the name we want to give to that new column and we're able to give values to this column by assigning a list of values uh to that column name if we look at that table right below we can see that we now have a new quantity column with these new values so something that is important to note here is that we had four rows in our data frame representing four different uh products um but um and and so when we wanted to go and add a new column we want to make sure that we're using the same um you're assigning a list of the same length otherwise we might have um some problems so if we only have three values to fill in here um when we try and assign that list of three values um we might run into some some difficulty uh yeah so um now that we kind of have a little bit of a basis of what to do we can go ahead and try and put this into action um i can't wait all right so let's check it out the data frame df contains information on products sold at a hardware store add a column to df called sold in bulk so i'm just going to copy that which indicates if the product is sold in bulk or individually the final table should look like this so we can see the sold in bulk part has yes yes no no so i i think we start by choosing our table name and selecting the column in here so i have to put this in a string right yeah always good to put that in the string there there is another way to access columns of a data frame which some of you watching might be familiar with um where you use a dot notation where you have first the data frame name dot and then the column name but when you have spaces in your column names um that syntax method won't work so um we will definitely like to access the uh data frame column as you've done right here excellent all right so we want to set this equal to we have yes yes no no all right so can i just type yes without just like that so we won't want to do that here we will sort of include strings around our um got it our code yeah um just because these are string variables that we are or the strings that we are um indicating here um if we just left it as yes that might be referring to a variable that we had declared called yes but we don't have one here yet this actually makes me think there's another data type we could have used um you know if the tests were set up differently this seems to be indicating boolean values of true and false in a way right definitely um that could be an alternative way of storing this data um and there could be like uh possible like benefits of storing data that way as well um so um yeah i feel like whenever there is kind of that binary question of is this yes or no or true or false um booleans can often be the way to go excellent all right so let's run this code and see how it does all right running and boom we got it and you can see over here we have sold in bulk has been added and we have the yes yes no no excellent awesome our store is already getting better at keeping track of all their information definitely right so we can also add a new column uh for all rows so we can we can add some value if if the value is the same in every single row it would be really tedious to build out a list where you're just constantly writing true true true true true true true ad nauseam you know it can go on for ages so if it's all the same value there's actually a trick so that's pretty exciting um yeah this is super cool and i kind of almost think of this as like if you're working in a google sheet or excel and you put a value in one of the cells and then you drag it down um to like fill in all the other cells if you've ever done that i feel like this is kind of like the coding version of that same approach but yeah what you can do is go ahead and access that uh column that you want to either create or update um using the notation we were talking about before so for this example right here um if we wanted to update a or create a new column called in stock that indicated whether we had that product in stock um we would access that using the data frame name and the column name and then we would just set it equal to the value that we want for every row in this case um we're assuming that right now we have every item in stock so we are gonna use a boolean like we were talking about um just before um and set all those values to true which we can see in that data frame below yeah and i see in the chat uh sammy said a boolean that's absolutely on point yep all right so ready for our instructions should we choose to accept them add a column to df called is taxed which indicates whether or not to collect sales tax on the product it should be yes for all rows now i just want to demonstrate that it's actually possible to do this in two different ways because we can either do this where you know we have one two three let me see actually we don't know what is taxed oh yes we do it's already over here it is one two three four uh products in there so we can say yes yes yes we can already see this is getting a little tedious now it should work but if we really want to do this in the easy way we can get rid of all that code and we can just say yes and it will also give us the same result same result same answer um so so yeah you can do it either way i i think this way ends up being um a little a little bit simpler save some more time um but some of the flexibility of pandas um is one of the things that i like about it too nice all right let's move on let's see what else we can do another way to add a column so much flexibility here i know pandas is sort of magical yeah um so this kind of way of adding a column it has a different use case but i think this is where it can get a little more creative with what you can do um and uh yeah just gives you more more possibilities um and so um kind of continuing on this idea of taxes um we can see here that we can take um the value of one column and perform some sort of operation on it to get the values of a new column and this idea is a pretty pretty powerful one um given that we often do find relationships between the different columns or variables of of our data frame or just like in any information that we're storing in a table um and so in this example here we're trying to create a new column that represents the sales tax on on an item um and so from beforehand we had a column price that indicated the actual price of the product itself um and what we can do is if we know what the sales tax is for our state um and in this example we're using a sales tax of 7.5 percent um we can take that 7.5 percent multiply it by our price column and then get a new column or a new um list of variable of values that represents um how much sales tax we are charging on each of those products um so if we take a look at the code right here we are saying let's create a new column uh sales tax and our data frame df and let's set it equal to the price times the sales tax and here when we access price we are using that dot notation to access that price variable or sorry the price column um and then we're representing 7.5 percent um in decimal format so we're just going to move the decimal over two places to get point zero seven five um and this will give us our sales sacks which we can see in the table below yeah so now we can go ahead and try and use that same concept to calculate another really helpful metric for a business to track which is revenue wanna go ahead and give it a shot mario let's do it all right so we're going to add a column to df called revenue now can i just do df.revenue like this um yeah that should that should work for us okay let's give it a shot and we're gonna set it equal to the difference between the price so df.price and the cost to manufacture now cost to manufacture has to be a string because we have to use bracket notation because uh it has spaces in it right yes okay those spaces we're gonna use that bracket notation um but we will be circling later on to another pandas method that will help us um make sure all of our uh column names are um written in a way that enables us to use that dot notation so great point so what i'm hoping to see here is another column to the right called revenue that is equal to this column minus this column each time so it should be 0.75 minus 0.5 0.25 minus 0.1 uh 5.5 minus 3.0 and 3.0 minus 2.5 so we should see something like 0.25 uh 0.15 um 2.5 and 1.5 or sorry 0.5 here all right fantastic so let's try and run this code shot let's see what we get sure you added the column revenue so that didn't work so maybe maybe there is an issue with us um adding the revenue column in that way so let's try doing the other notation see i love experimenting like this i think it's really fun even when it doesn't work because you learn something from it always always good too to try something out give it a shot see if the code runs and go from there and there we go now we got it awesome we got the values i was talking about whoo so we got what we expected yes i'm fantastic here from from yeah i was going to say this might be a good stopping point to look at some of the questions in the chat yeah um and so eric is asking what if you wanted to do a count instead of using a boolean for a new column so counting by five or ten could we use plus equals um and so i think there's a few different questions kind of uh hidden in there um what we can do is we can use the plus equals for for setting the values of a column um so maybe we can give um a try for that mario like let's say say their um is um maybe costs are going up for for the company and they want to raise the price of all of their products um by a dollar okay right um so let's update that price column um and so yeah let's try that price like that format and do dear price and um do we want a plus equals right there yeah let's try let's try a plus equals and and do one here just one just one yeah just uh let's see what happens fine we can do a little bit of experimentation because i'm not i'm not exactly sure what will happen here oh and there we go yeah it works awesome there we go um we can use it before um incrementing that is a fantastic question by the way yeah um and so similarly um i would imagine that we can use the minus equals or the times equals um operators um so divided by equals yeah yeah um i don't know exponential equals but yeah that's a good question i'm not totally sure um ananya was asking can you please do live videos for c plus also so i personally would love to do that uh sunny and i built out the c plus course and it is um it's something we both care deeply about uh and i mean i can i can definitely push for it we'll see a lot of this has to do with uh learner demand so make yourselves heard demand c plus plus um and then we have another question from faith uh can i get the video for a beginner doing coding so do you mean just do you want to just see beginners learning to code what it what are you thinking faith there's a lot of videos out there of different folks that are either experienced programmers who want to showcase themselves learning a totally new language but then there are also people who like to live code even though they've never coded before and i don't think we have any of them up on codecademy's platform but i'm sure if you check out the codecademy forums there will definitely be people who do that oh thank you diego diego says love these videos keep them coming thank you for coming and watching us um yeah thank you for joining we're so excited to have you you helped make it happen so yes thank you so much a bit off topic but would you guys say finishing the data science path can help get a job as a data analyst at least i would definitely say so and uh i don't know if this is top secret but we are making some changes to the data science career path and i think that that will make it even uh easier at that point to get some sort of position i think that the more you learn uh and the more that you build out your portfolio the more that you're going to be able to showcase to someone a potential employer that you are at a level that um means that you can start out in that field um sami is asking how will you be able to increment the um price by five each time so row one would be five row two would be ten etc oh that's interesting that is an interesting question um and off the top of my head there is a kind of like a workaround that i would i would do um and so we actually are very set up for that workaround in this example um but are you thinking of lambda functions well no oh okay really cool and very helpful um that might be like a little bit out of scope for for today's lesson um but i would say the the kind of workaround of top of my head would be to have a column where the value in that column is almost like the row number in this case um where the first row would be have the value one and then maybe row five would have value five row timer value ten and then you currently network for product id and so in this case we have the product id like that um so if we wanted to um then go ahead and have maybe a new column where the first value is five for the first row the second value is ten we could take this product id column and multiply it by five um and we would get that uh progression of counting by fives so maybe we could do something like df uh new price equals df dot price times or not price right it would be oh right it is df.price times uh five times the product id is that right or no that's not quite right plus it would be plus so it depends what we're trying to calculate because i i i don't know if there's like a clear we have a clear idea of necessarily what we want to calculate but um i think if like the the question was if we wanted to have like just some column of values that goes up by fives how would we what would we do that how would we do that so um this should work in terms of bringing the it should be plus five for the first column plus ten for the second etc yeah yeah so this should increase our price five five for the first one ten for the second row 15 for the third row yeah 20 for the fourth row see that yeah um i love that so many cool things that you can do with pandas when it comes to manipulating data and today we are just highlighting kind of a few of the core pandas methods that allow us to modify data frames but for whatever specific use case you might have for changing data modifying it manipulating it there are like so many pandas methods out there that you can go and explore um and as with most things in coding going to the documentation is a really great way to yes learn about what is available to you and what is accessible to you um and so maybe you know you go through the codecademy lessons and uh you have a good foundation but there's something that you want to do that you just can't quite figure out with um with what you've learned the documentation will be helpful for um helping you achieve that um i'm actually going to pop this documentation right into the chat so folks can take a look if they're interested and if we just look over here on the left hand side we can see um all of these different um like methods of a data frame object so all the things that information we can get from it or things that we can do to a data frame object um and you can see that there is a time and we only begin to scrape the surface of these and in our codecademy lessons yep there is so much to learn always but also like something to always keep in mind is that there is not one data scientist who knows all of those functions methods on the top of their head everyone is always going back and learning more and referencing documentation um and so don't feel like you need to memorize all these things in order to um feel like you know pandas well enough um it's for me like i i sometimes maybe have a little bit of time away from it like i'll forget certain functions and i'll just go back to the documentation and figure out what it is that i need so yeah definitely yeah documentation is so helpful love it all right should we move on to the next exercise ready yeah let's do it all right performing column operations yeah um this this is a fun one um so before we were going ahead um and just adding new columns to to our data frame um and maybe taking a few different columns and performing um some calculations on them um to get a new column um but there's a little more that we can do when we're maybe um adding a new column or wanting to change a column um and so let's take a look at some customer data that we might encounter um so in this case we can see we have a data frame with a name column and an email column and in the name column we're seeing some names that are all capitalized and other names that have some capitalization on the uh first letter of the first name and last name and then we have another name that has no capitalization at all it's all lowercase um and once again this consistency or lack of consistency is something that we try and avoid when we're we have data um we want everything to be formatted in a similar way since that helps um typically with analyses i'm um just having everything organized so if we wanted to go ahead and standardize the formatting of our names here we can use a handy method in pandas called the apply function and what the apply function does is it allows us to apply a function that we pass into it so we're going to actually pass in another function as an argument to this function and it will take that function and apply it to each value in the data frame column that we tell that we give to it um and so um this is really neat because it's gonna basically go and it's almost like almost like doing a loop essentially where it's looping through all the values in a column and then applying that function to those values to get a new value so let's take a look at this example right here um so we want to go ahead and uppercase um all of the names in our name column we just wanted everything to be upper case um so we define a really quick function right here called uppercase that will take in some string value and it just returns that string in all uppercase and we're using the string method dot upper here um to get that value so we could go ahead and call this uppercase function on individual strings um if i pass in a lowercase marielle string as an argument to this function i'd get back marielle and all caps um so what we're going to do now though is let's say we have our whole list of names we want to go and apply that uppercase function to all of those values in the dataframe column so what we're going to do is say here that we want to update the name column um and we're going to access that using that same notation as before we're going to say let's update this column to be equal to an expression and in this expression we're taking our old data frame column um same way of accessing it and we're going to um use the apply function um dot apply right after the the column name um and we're going to apply that uppercase function um so what we get when we do this um application of uppercase is we get this below dataframe where if you remember from up top john smith was all uppercase so it stays all uppercase um jane doe where with the capital j and the capital d we uppercase all letters of jane doe now and joe schmo goes from all lower case to all uppercase um so we essentially just loops through that list of names applying that uppercase function to each value in that column all right you think we are ready to go ahead and give this a shot mario yeah i think i accidentally already left my code in here but we're gonna start over happens just doing some doing some practice all right so let's do it uh apply the function lowercase to all names in column name in df all right so first let's do this df all names in column names so we're going to have name or we could have done df.name probably either should work all right um and we're doing dot apply and we're using this function that was built out for us lowercase i'm going to write lowercase and we're assigning these new names to a new column of df called lowercase names so i'm going to just grab that we're going to say df and lowercase name equals dfname dot apply lowercase and i think this should work so what we should see here we have lowercase name uh i guess this already ran from my previous code but this should stay the same now okay yeah here i'm going to comment this out so we can see the difference so we had name and we had email address and now we're going to add in this new column called lowercase name and we can see it in action over here awesome um and the thing i really like about apply is that we can throw any function in there um but not not necessarily any function but we can do more complicated um manipulations or changes in that function um that we can then apply to each value in um whatever column it is that we want to apply those to so there's a lot of flexibility here um and it can be a really really helpful and so i'm seeing a question in the chat from juan mega um asking um is pandas the latest version of python or um maybe is it like a separate package for manipulating data um and so i think that's a great great question um and so the pandas package is separate from from the actual python language that we're using um so python has some tools for working with with data um but it is missing certain abilities that the pandas package is able to provide for us um so it is a separate distinct package that you if you're working on your own computer you'll need to download download pandas um using a python package installer um so that you're able to utilize all the helpful methods and functions that we have here uh but yeah and so we are using um python three also just to throw that out there which is the newer version of python um there are some distinct versions of python three within that um but typically most of the python 3 versions have most of the same core functionality awesome great question all right so let's move on to renaming columns and i'm going to make sure that i have everything set up yeah um so um previously in this lesson um we've seen some different scenarios where we were accessing columns of a data frame using one of two different types of notation so sometimes we were uh using the bracket notation where we um use the data frame name and we access the column by using a string hit the column that we want to take or access but then we've also seen this other notation where we use a dot and we say data frame name dot column name and it can be helpful to use that dot notation um for for a few reasons one if you're working in an ide or an interactive development environment you will often get um tab completion ability with the dot notation so if you're starting to type out a variable name you can click the tab and it'll know that oh i know that this variable name is a column of your data frame so it'll auto complete it for you um but it can also just be easier to type you don't have to type any quotes or anything like that um and also it is there's uh you can have variables or column names in a more standardized format which is typically um with individual words separated by underscores and keeping to those standards can often be helpful when you're sharing your code with others just because they'll be more used to the formatting of your code um so but often when we load data from a csv or if we scrape data from the internet or wherever we've gotten it from um it often doesn't come in that format that we desire which can be you know underscore name something like that um but not to worry we are able to go ahead and change uh column names um and in this exercise we'll walk through one method of doing this which is using the columns property of a data frame um and so if you just wanted to go ahead and actually see the columns of your data frame listed you can use this columns property so maybe we can just go ahead and like um here like in the uh workspace we can print out um df.columns and we'll see oh you know we might not actually be able to see it right here oh right an output terminal um but if you were working locally on your own computer um and uh you were um you're running a python file on the terminal and you ran the statement print df.columns and you had a data frame what you would get is i believe it's a list of all the columns of your data frame so in this example we have in the narrative we have a data frame like we're creating and it has um two columns name and age and when we do df.columns we should get a list that would just have those two strings name and age um but we can also use this property to set the columns of a data frame so if we wanted to update the name column to first name to be a bit more descriptive of the type of data that we're working with and if we wanted to update the age column to be capitalized um we could go and use that df.columns property and set it equal to a list um that is the same length of the number of columns that we have and in order update the column names to their new values so since name is the first column of our data frame and age is the second we would have the new value for the name column be that first value in the list so first name and then we will have the new value for the lowercase h column as the second value since that was the second uh column in the data frame so that second value is going to be age and we can see we get a new or we we get a data frame here that has um that updated names for the column so first name is our new first column and age is the second new column and it updates that data frame in place so we're we're not getting a new data frame we're just updating our existing data frame uh so let's go ahead and maybe give this a shot excellent all right let's try this out so the data frame df contains data about movies from imdb um we want to present this data to some film producers right now our column names are in lowercase and not very descriptive let's modify df using the dot columns attribute to make the following changes to the columns so we are going to do and let's take a look at the example code again we may do df equals pd dot data frame and we're opening did you sorry i wasn't sure if you had a comment here ian yeah so so we don't need to create a new data frame here i mean we could amazing [Laughter] like um you know we could uh i mean maybe maybe with some different movies we can just jump right into df.com of avatar jurassic world um but since we have a data frame loaded here from a csv um we can just go ahead and work with that directly rather than creating a new one um so yeah we could just go ahead and call that df.columns property um and we'll set that equal to a list of our new uh column values um and we can reference this table that we have here on the bottom for what we want those new new columns to be so we can see we have the lefthand side we have the old values of those column names and then on the righthand side we have the new values got it so we're not naming the columns old and new then uh no no no yeah so okay there's a little like inception going on where we have a a date frame or table of data frame column names of all the new variety um but but yeah so what we're doing here is um if we look on the right hand side of the screen we can see our existing data frame as is um and we can see that we have id and lowercase um we have name of the movie and lowercase we have genre year um and imdb rating and these are all lowercase um and we want to go ahead and change these to uppercase um in this example so what we can do is just pass in a list of these new uppercase titles what happens if i put these in a different order will pandas know to put them in the right order we can try putting them in different order and let's see what happens um okay so if i want to do reading and then uh category and then gear release i wonder what's gonna happen go ahead and run this okay let's go ahead so now we go look at our columns okay i id looks good name looked good but now we have a rating column and all of our values are action which doesn't seem to be matching up as we might expect um and so one of the tricky things with updating columns this way um is we need to keep the order um the same so the order of our columns needs to be the same as the order of our original columns all right so i'm going to go ahead and change this around especially because i see we have categories and we have years and i don't want any category 20 movies i want to make skittles i want i just want so all right looks like we got this and we can see now your released is correct category says action which is actually a category of movie and reading is actual greetings and if anyone's a fan of any of these movies let us know in the chat so we can catch up on any ones that we might have missed all right so you can also rename individual columns by using the rename method so not just columns you can actually do dot rename so you pass a dictionary like the one below to the columns keyword argument interesting and this method really helps kind of solve the problem that um you brought up in the last exercise mario where um when you're making these updates and changes you don't always like when you're just having the whole list of things you don't maybe not gonna put in the right order um so what we are able to do here with the rename um method is be explicit about what is the old column name um in our original table and what do we want to update that specific column to in our new table so we're not leaving things up to order which can be unclear um we're saying write out this is the old column this is the new column update it to that value so we can actually do the columns out of order this time then yeah so we can we won't run into issues we're just since we have those um key value pairs from our python dictionary um we can go however we please all right so can you tell me a little bit about what's going on with this line right here um so yeah we kind of snuck in this in place into uh this this exercise um and so um basically um let's just quickly first take a look at the rename function so what we're doing here is we're saying let's call the rename function on our data frame df and we're going to pass in as an argument um this keyword argument columns and columns will take a dictionary where the key value pairs are those old values or sorry the old names as the key and the new names as the values so we're going to update name to first name and age to age and we can switch that order um if we wanted to update you know age first and then name that's fine um but we do see this in place equals true here um and what this is outside of the dictionary yes outside the dictionary second argument to the rename function or the second keyword argument to the rename function and what this says is it lets pandas know that we want to update our table in place and when we are working with a lot of these pandas methods um what actually happens is we create a new data frame um elsewhere in memory so we have our original data frame and we create basically a new data frame and what you've been seeing in a lot of our exercises is that we've been reassigning um this new data frame to like point back to our old one so we're kind of re writing over it um but we don't necessarily have to use that reassignment um if we use this in place equals true keyword argument it's gonna go ahead and just create that um updated data frame in the same place so we don't need to go reassign it back to our df so you'll see here what do we call rename we're not reassigning that back to our our df got it so this um doing all of this or really this line um takes the place of us saying df equals df dot rename this exactly okay and so we can we can go do it both ways when we jump into um the the workspace um i think it's helpful to see you see both in action um so oh this is pretty cool too it says here that you can rename only one column also you don't have to rename all of the columns at the same time yeah that's another huge advantage over um using the columns property to update the the column names is that there's just one that you need to fix for whatever reason you're able to just focus in on that one and not spend your time writing out all the the other column names that you want to say the same got it so we want to do rename and we want to use the in place uh keyword argument here mmhmm yeah okay so um we're gonna scroll down to the checkpoint we can confirm what we're asking for here so in this case we just want to go and work with the same data frame from before but we want to update the name column to movie title and that's it um so yeah copy that same code from up above or we can write it out either way so we're going to say df dot rename and then i think we start with is it column columns okay and then we're going to now pass in a few keys and values to our dictionary where the key is the old name and the value is the new name and actually we're just going to do one layer here we're renaming name and we're turning it into a movie title right yep and that still has to be a string right or could i just say movie title is not a string so if we ha actually i think it needs to be string it needs to be a string yeah if we had the title as a variable somewhere and that variable had a value of some string you could put movie title as like a variable there but we want to be explicit but that's a string okay and then now we want to add in in place equals true so that we're not just creating a copy that exists somewhere in the universe without actually being a df that gets renamed right okay so let's run this code let's see how it does all right we got movie title up here that looks good you see that new movie title and so i think one thing we can do quickly before we move on to the next exercise is if you take out that in place equals true and rerun the code um because i will often do this i will write df.rename and i'm like wait why isn't this working why isn't my data frame updating yeah it didn't rename it we're creating this new data frame but we're not assigning it to any location um and so so we're not updating our original data frame so the two options we have are is we could add that in place equals true um keyword argument or we could just say let df equal this new data frame and now when we run ah yeah right hour no it's working again all right so it looks like we have about two minutes left um i think the next exercise is just review anyway um so we can use the remaining couple minutes if folks have questions throw them in the chat we're super excited to talk about pandas with you um also for those of you in the pro community uh ian unfortunately can't make it on thursday but i will be there along with uh g1 who has just joined the curriculum team who has a lot of experience with data visualization so you can throw your database questions at us yeah um so hey if you have any remaining questions about pandas definitely feel free to throw them in the chat right now in our remaining time um but just one more time i wanted to say that this is a great foundation that you now have for working and manipulating data um and i would recommend just trying to go find some data that is interesting to you um whether it's related to your job or to a hobby that you have or a business that you run or whatever it is finding something that is interesting and meaningful to you and going ahead and i'm just trying to load some data from from that interest into a data frame and seeing what you can do with it um all right sweet we have some we have about one minute left and it looks like we have a few questions in the chat so sammy's asking so does the rename function return a new data frame unless you write in place equals true and from my understanding now is it's yes it does that's correct creates a copy um so franco says i'm at 40 of the data science career path at the moment super engaged and really enjoying the curriculum you did a great job we are always always happy to hear that thank you so much franco that we do this for you uh how fast can i pick up pandas starting from scratch with basic levels of python so i think there are a few like fundamentals of python that you should know before moving into pandas but it's not it's not too much um you know if you're comfortable working with strings and um you're comfortable working with functions and conditionals and boolean types i think that's a pretty good foundation for going ahead and working or learning pandas um so i would work on getting those kind of core foundations uh done first um but then the world of pandas i think is pretty open and accessible to you so i just popped a rename the documentation on rename into the chat uh and i know that we're about a minute over so we're going to hop off but thank you so much everyone and look forward to chatting with at least some of you on thursday the rest of you uh some folks from our team are going to be back next week thanks so much wow thank you so much everyone have a great rest of your day