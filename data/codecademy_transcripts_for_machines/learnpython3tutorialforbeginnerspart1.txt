Hey everyone, this is Chris DeGuira from Codecademy. In this video, we'll walk through the Hello World lesson in the Learn Python 3 course. For each exercise in the lesson, we'll do a brief recap of what the lessons narrative taught, and then we'll walk through the exercises instructions where we'll apply our knowledge. In this lesson, we'll cover a brief introduction to Python 3 and basic Python 3 programming, including commenting code, creating and printing strings, storing data in variables, performing mathematical operations, as well as concatenation and multiline strings. Let's get started! Exercise number one Welcome In this exercise, we'll start off the lesson with a brief introduction of the Python programming language. So, what is Python and why do we use it? Python is a popular programming language, which can be used to accomplish many different types of tasks, including software and web development, data science, artificial intelligence machine learning and even mobile applications. To use Python we'll write programs and to write these programs, we'll need to use commands that will communicate with the computer. Anytime we write a program in Python, we'll be doing so in a file that has a DOT key extension. Now that we've covered a bit about Python, let's take a look at the exercise's instructions. In this exercise, we have a program consisting of two lines of code and the instructions ask us to replace Codecademy with our name. Note that this program is written in a file called scripts.pi Don't worry just yet about what things like print or my underscore name are, we'll cover these later in the lesson. Let's go ahead and replace the name. I'll add my name Chris DeGuira. When replacing Codecademy with our name, we need to make sure that we keep the quotation marks around it, so it functions properly. More on this a bit later. Once we hit run, Python reads the file, converts the code into commands, which the computer understands, then executes those commands, now let's hit run. We can see a greeting message in the console to our right. This console is where Python will output the results of a program. Congratulations! You've now run your very first Python program. In the next exercises, we'll learn about some of the commands we just ran. Before we move on, let's look at one of the frequently asked questions for this exercise. You can find these in the community forum section, under the instruction section we just completed. A commonly asked question is "why do I need to enter my name on a different line?" Technically, to accomplish the same task of printing a greeting message containing your name, we don't need to enter our name on a different line. The code in this exercise is demonstrating how data can be stored and retrieved from variables. We'll learn about this later in the lesson, but for now, just know that there are multiple ways for a Python program to accomplish the same goal. For example, let's remove the first line from the code. Now, let's remove my underscore name and the plus signs from the print. Now we can merge the strings together by removing the inner quotation marks and add in our name. When we run the program, we'll have the same output in the console. Exercise number two Comments. In this exercise, we'll learn what comments are and how to use them in Python. So, what are comments? In Python and in most other programming languages, a comment is a block of text that is ignored when the code is executed. This could be a message or even commented out code. To write a comment in Python, we use the hash or pound character followed by the text. The main purposes of commenting code are to explain what the code is doing, help provide context for complex parts, and to quickly test code by enabling and disabling different lines. Adding comments throughout a program to help other developers serves the purpose of documentation. Let's take a look at some examples of Python comments on the right. First, we have an example of a commented message. Next, we have a print function, which displays a message to the console, but does not use any comments. Finally, we have an example of a commentedout piece of code. This is also a print function, but it has been commented out so it's ignored by Python when the program runs. Now, let's dive into the instructions for this exercise to practice writing comments. In this exercise, we're asked to write our own comment describing the first program that we want to write. We'll start off with the pound character and then we can write whatever description we'd like. In this case, I'll write a program for teaching people around the world how to use Python. And that's all we need to do for this exercise. if we click run the exercise should pass and we can move on. Before we move on, let's look at one of the frequently asked questions for this exercise. A commonly asked question by Codecademy users is "Where should I add comments in code? Should I add them to every line?" This is a great question. Typically, comments should be added above complex lines of code. This can help other developers understand what a piece of code is doing and how it works. Comments could also be used to describe what the program accomplishes, overall. Adding too many comments to a program can actually be a bad thing. For example, if comments are added to every line of code it could make the program harder to read and reduce its clarity. Let's take a look at an example. In this lesson, I'll be using Codecademy workspaces. Workspaces allow you to write code in different languages and share your sandbox environments with other people. Once you write your code, click on the share button in the top right corner and select public or private. Afterwards, click copy link and share it with others. To create your own workspace, click my home on the Codecademy main navigation bar, then once you're on the home page, scroll down to the my workspaces section to view any saved workspaces or create a new one. To start your own workspace, click new workspace, and then once it loads, we'll select the language. In this case, I'll choose Python 3. Now, the new workspace will load, and you can write some code and share it with others. Any workspaces we use in this lesson will be shared in the description of this video. In this example, we have a program which calculates the cost of groceries. There's a comment at the top describing what the program does, and there are comments throughout the code where needed to describe what different parts of the program do. Now, if we look at the same program but with comments on every line, we can see that the code becomes convoluted and unnecessarily long. This would only be helpful for someone to read if they were learning about these concepts for the very first time, but if you're working on a team with other developers many of these comments are not needed. Exercise number three Print In this exercise, we'll learn how to output messages from a Python program. Out of the box, Python gives us the functionality to output information from our programs. To do this, we use what is known as the print function. Don't worry too much about what a function is just yet, we'll cover more about this later. The print function can be used by typing the word print followed by a set of open and closed parentheses. Within these parentheses, a message can be entered surrounded by double or single quotation marks. When the code is run, the message will be displayed in the console, this is known as a program's output. We'll be able to print all kinds of different data as we learn about the types of data Python works with in later exercises in this lesson. Let's take a look at some examples on the right. First, we have a print function, which displays the message "Hello world" to the console. Next, we have a print function, which prints the number 12,345. Finally, we have another print function, which displays the message "Goodbye!" Now, let's practice using print by going over the instructions for this exercise. For this exercise, we're asked to print out the message "Hello world!" To do this, we start with the word print followed by an open parenthesis. Now, our message can be surrounded by either single or double quotes, it doesn't matter which one we use as long as they match up. I'll use a double quote character, then the message "Hello world!" And then closing parentheses. Once we click on run, we can see that the message "Hello world!" is displayed in the console on the right. Remember, the console on the right is where Python will output our program. Before we move on, let's look at one of the frequently asked questions for this exercise. One commonly asked question is "Are quotes always necessary inside of a print?" The answer to this is no. If you want to print a specific message directly to the console you can surround it with quotes. This is known as a string, which we'll learn about in the next exercise. You could also pass data directly to the print statement, such as numbers and variables which we'll learn about later in the lesson. We can test this out if we go back to our code. I'll add a few more print functions, but this time, I'll pass in numerical data. So, first I'll write print 1000 then print 3.14. And when we hit run, we can see that numerical data is also printed to the console in addition to our message. Exercise number four Strings. In this exercise, we'll learn what strings are and how to use them in Python. So, what are strings? Strings are a specific Python data type. Data types are categories of data that we can use in Python programs. Strings are blocks of text, which can contain letters, numbers, and any other type of character. Unlike comments, strings are not ignored by Python and could cause the program to crash if not used properly. Strings are surrounded by single or double quotes and it doesn't matter which are used as long as they're matching. It's also possible to create an empty string, which would just be a set of single or double quotes together. Let's take a look at some examples on the right. First, we have two strings, one using double quotes and one using single quotes. Next, we have an example of an empty string using a set of single quotation marks. Then, we have an example of using different symbols in a string, and finally, printing a string, which we've used before. Now, let's transition to writing some strings by going over the instructions for this exercise. The first task in this exercise asks us to print out our name. We'll use the print function, which we learned about in the last exercise, but this time we'll pass in a string containing our name. So, I'll go ahead and write print, and I'll enter in my name. Now, when we hit run, Python will print out the name we wrote in the program. In this case it's my name, Chris DeGuira. For the next task, we're asked to change the type of quotation marks surrounding our string. Let's go ahead and change them to single quotes instead of double quotes. We'll replace these. When we run the code again, we can see that the output has not changed. So, the type of quotation marks surrounding a string doesn't affect how it's displayed. Before we move on, let's look at one of the frequently asked questions for this exercise. A commonly asked question is "When should single or double quotes be used for a string?" Typically, it doesn't matter which type of quotation mark is used for a single line string, but it can be easier to use one or the other depending on the string's contents. Let's take a look at an example of a print function, which includes an apostrophe. Here, Python thinks the string has ended early since the apostrophe character is the same as a single quote character. When we hit run, we'll get an error. In order to fix this, we can change the surrounding quotation marks to be double quotes instead of single quotes. Let's go ahead and change that. By doing this, Python will think that the string is ended once it sees another double quote character. So, we can use single quotes within the string. Now when we hit run, we can see it printed properly. In this next example, we have a similar situation, but we have a quote inside of the string. To fix this, we can change the surrounding quotes to the single quotes. Then, when we run the program, we can see this message prints properly, as well. Exercise number five Variables. In this exercise, we'll learn how to store data in Python using variables. So, what are variables? We learned in the previous exercise that Python allows us to work with data like strings. However, how would we actually reuse this data across our program? Well, variables solve this problem. We can think of variables as labels that Python can attach to data to save a reference of it. They can be accessed and reused throughout a Python program. To assign data to a variable or to replace existing data in a variable, we use the equal sign. If we ever want to reassign a value to a variable, we can do so later in the program. Let's take a look at an example on the right. Here we assign a variable named greeting string to first be, "Hello there." If we printed it out, it would give us "Hello there" in the console. However, we can reassign the variable to a different value later in the program. In this example, we reassign it through "Hasta la vista." Now, the print statement will output the new value of the variable greeting_string. It's also important to note that there are some restrictions on how we name variables in Python. There can be no spaces in the name, the only allowed symbol is an underscore, and the name cannot start with a number. Keep that in mind when you define your own variables. Now, let's take a look at the instructions for this exercise. The instructions for this exercise ask us to modify the meal variable depending on which meal of the day we're printing out. Let's start by scrolling through the program and seeing what our starting code is. We can see that breakfast is provided for us. We have meal assigned to a string containing the text "an English muffin." Below the first set of print functions, we have a comment asking us to reassign the variable meal to contain a string, which describes a lunch food. You can write whatever you'd like, but I'll write a BLT sandwich. Finally, we need to update meal one last time for the dinner message. I'll use pasta this time. When we hit run, we can see that each of the messages are printed to the console, including the value of the meal variable at the time of the print function. This is important because Python executes code starting at the top of the file and works downward. This means that we need our print functions between reassignments of our meal variable in order to display the correct meals at the right time. Before we move on, let's look at one of the frequently asked questions for this exercise. One commonly asked question by Codecademy users is, "Can a variable be reassigned to another value with a different data type? For example from a string to a number. The answer to this is yes. In Python, variables can change data types when reassigned. They can hold any type of data. While we haven't yet covered other types of data, like numbers, let's take a look at an example of switching from a string to a number. Below our code for this exercise, let's try reassigning meal to be a number, instead. So, I'll set meal equal to 6, and print that out. And then, I'll reassign it again to be Apple. And when we run the code, we can see that it works properly. So, meal is able to be reassigned to Strings and numbers and other types of data in Python. Exercise number six Errors In this exercise, we'll see what Python does when there are mistakes in our code. Inevitably, as we program in Python, our code won't always be correct. If there's a problem when executing the code, Python will create an error message, which points to the issue, provides a line number, and the type of error. These problems in the code are known as bugs, and the process of detecting and fixing these issues is called debugging. Two common error types you'll see in Python are syntax errors and name errors. Syntax errors occur when there's a problem with the way the program is written, like bad punctuation. An example of this would be a missing parenthesis. Name errors occur when Python sees a word that it doesn't recognize, such as accessing data in a variable which doesn't exist. Let's take a look at an example error on the right. Here we see that the error message describes where the error occurred and the type of error. Now, let's work through an error together by walking through the instructions for this exercise. The instructions in this exercise ask us to fix the two errors in our program. Let's try running the code and see what happens. The first issue is a syntax error, which occurs in the first print statement. This problem is caused by mismatched quotation marks in our string. The first quotation mark is a single quote while the second one is a double quote. Let's go ahead and fix this problem and try running the code again. Now we see that a name error occurs in the second print statement. This is because Abracadabra is being passed into the print function as a variable since there's no quotes around it. The problem with this is that Abracadabra has not been declared before and the code is a variable, so it does not exist. Let's go ahead and make Abracadabra a string so that our program runs properly. And we'll hit run. And now there's no errors and my messages are printed. We fixed our very first bugs in Python. Before we move on, let's look at one of the frequently asked questions for this exercise. A common question asked by the Codecademy community is, "How can the name error still occur if everything is spelled correctly?" Below our code for this exercise, let's try reassigning meal to be a number, instead. So, I'll set meal equal to 6, and print that out, and then, I'll reassign it again to be Apple. And when we run the code, we can see that it works properly. So, meal is able to be reassigned to strings and numbers and other types of data in Python. Exercise number seven Numbers In this exercise, we'll see how python handles different types of numbers and how they interact with variables. So, how does python use numbers? In Python, numbers are stored as different data types depending on if the number is a whole number, a decimal number, or a complex number. These are known as numerical data types. When a number is written directly in the code, this is known as a literal value instead of a variable which contains a stored value. The two main numerical data types used in Python are integers and floats. An integer is any whole number, while floats are any decimal number. Let's take a look at an example on the right. First, we have an integer value being stored in a variable called an_int. Next, we have a variable called a float, which is assigned to a float value. Now, let's practice using numerical data types by going through the instructions for this exercise. In this exercise, we'll be creating movie reviews using numerical data types and variables. The first task in this exercise is to create two variables called release here and runtime. These variables can hold any integer values. Let's go ahead and assign 1997 to release year. And 122 runtime. Now, let's hit run to move to the next task. The next task asks us to rate the movie on a scale of 1 to 10. To do this, we can assign the rating out of 10 variable to any float value between 1 and 10. This includes numbers with 8.0 at the end such as 1.0. Let's assign it to a 9.2, since we really like the movie. And we'll hit run. That's it for this exercise. Before we move on, let's look at one of the frequently asked questions for this exercise. A frequently asked question is, "Why do I need integers when floats hold more information and can equal the same value? For example 5.0 versus 5." That's a great question. There are a lot of different discussions in the Python community on this point, but one of the main reasons is that float values are technically approximations of precise decimal values, while integers are always exact values. This means that over many mathematical operations float values will become less and less accurate. This is due to the way computers store floats in memory. A fraction such as one over three cannot be accurately stored in memory as a float, since the decimal number is 0.3 with repeating threes infinitely. We'll include a resource on this in the video's description if you are interested in learning more about the numerical data type differences and how technology has changed how they work over time. Exercise number eight Calculations In this exercise, we'll learn how mathematical calculations are performed in Python. In the last exercise, we saw that Python can deal with numerical data such as integers or decimals. It's only natural that if we have numbers we will need the capability to perform mathematical calculations. To perform calculations in Python, we use what are known as mathematical operators within our programs. These include different symbols such as plus for addition, minus for subtraction, and asterisk for multiplication, and a slash for division. Note, in the case of division the result will always be converted to a flow value. If we attempt to divide by zero then Python will produce a zero division error. When performing arithmetic operations in Python, it's important to follow the standard mathematical order of operations. Note, that the calculations within parentheses are always executed first. This is used frequently throughout Python and programming, in general. Now, let's take a look at some examples on the right. First, we have subtraction in addition formed in a print function, then we have an example of multiplication, as well as division. And finally, we have an example of a zero division error. Now, let's go through the instructions for this exercise. This exercise asks us to print out the result of this mathematical equation. All we need to do is write the print function, then add in this equation within the parentheses. All right, print then pass in 25 times 68 plus 13 divided by 28. When we hit run, we get the answer in the console. In this case, the answer would be approximately 1700.46, but as you can see the decimal goes for many places past the first two. Before the print function is called, Python actually calculates 25 times 68 and 13 divided by 28 first before the addition, since it follows the order of operations. Before we move on, let's look at one of the frequently asked questions for this exercise. A commonly asked question about Python mathematical operators is, "Are expressions and mathematical operators inside of a print function always evaluated before anything is printed?" The answer to this is yes. Anything inside of the parentheses will be executed before the result is passed into the print function. This applies to any other functions, as well. We'll see more on this topic later in the course. Exercise number nine Changing Numbers In this exercise, we'll learn how variables can be used in mathematical operations. So, how do you perform calculations using variables in Python? When mathematical calculations occur, Python treats variables and literals the same. The data is accessed from the variable and used alongside the literal without any changes to the variable occurring. This is because the only way to update a variable is with an operator which includes the equal sign. Let's take a look at an example on the right. First, we create two variables called coffee price and number of coffees. Next, we print out the result of multiplying the coffee price and the number of coffees, which gives us six, then we print out the two variables, individually. Now we reassign the coffee price variable to a different value. When we print out the result of the multiplication using the same operation, we get a different result due to the new stored value and coffee price. When we print coffee price by itself, the new value will be displayed in the console. All the number of coffees stays the same. Even though they're the same operations, we'll have different results when using coffee price, since the assigned value changed. Now that we've walked through the basics of variables in math, let's take a look at the instructions for this exercise. We've decided to get into quilting. We're going to perform a few tasks that help us calculate the dimensions of our quilt. The first task in this exercise asks us to create two variables, one called quilt width, which we'll set equal to 8, and another called quilt length, which will set equal to 12. And now we can hit run. Next, we need to calculate the number of squares we need for our quilt by multiplying the length by the width and printing the result. So, let's add print function and inside the parentheses, we'll write quilt width times quote length, and let's hit run. We can see 96 is printed to the console. Finally, it looks like our quilt required a bit more material than we had on hand. We need to modify the values stored in quilt length so that it equals 8, instead. So, below the print statement, we reassign quote length to equal 8, and now we can copy and paste the print statement so that our new value will be printed to the console. And when we hit run, we can see that less material is needed. We only have 64, instead. And there we have it. A basic Python program that works with variables and mathematical operations. Before we move on, let's look at one of the frequently asked questions for this exercise. A commonly asked question is, "What actually happens when you change a variable to some other value in Python?" That's a great question. First, remember that a variable is a named location where data is stored. When we reassign a variable to equal some other value, we're changing where that variable directs python when it gets accessed. For example, we can store the string "hello" in a variable, which actually stores the location and memory of that string. If we reassign the variable to equal a different string, the variable will hold a different location in memory. Exercise number ten Exponents In this exercise, we'll keep with the theme of math in Python and learn how to perform exponentiation. In order to perform exponentiation, we use the double asterisks operator. Fractional exponents can be used by providing a decimal number less than one on the right side of the exponent operator. Mathematically, a number to the power of onehalf is the same as the square root. Let's take a look at some examples on the right. First, we have 2 to the 10th power using 2**10. Next, we have 8 squared, then 9 cubed, and finally 4 to the power of onehalf, which is the same as the square root of 4. Now, let's go through the instructions for this exercise. In this exercise, we're working with quilts again, but this time we're only making square quilts. The first task asks us to calculate the number of squares needed for a six by six, seven by seven, and eight by eight quilt using exponents. We can print the results using 6 squared, 7 squared, and 8 squared. So, on line three, you can write print and 6 squared, which is 6**2. Now on line five, we can print 7 squared or 7**2. Then finally on line seven, we can write print, then 8 squared, which is 8**2. And let's hit run. Now we can see the results printed in the console. Next, the task asks us to calculate the number of squares or a six by six quilt again. But this time, we're making six of those quilts for every person and there are six people. To calculate this, we can print 6 squared, so 6**2, and then square it again. And this is, mathematically, the same as six to the fourth power. So, we can just write it that way. Now, let's hit run to print the results. It looks like we're getting our hand on quilting. Before we move on, let's look at one of the frequently asked questions for this exercise. One common question about exponents in Python is, "Does exponentiation work with negative exponents as well?" The answer is yes. You can use negative exponents in Python, which is, mathematically, the same as 1 divided by the exponentiation with the positive exponent. Let's look at an example. We'll have print three to the power of negative two, and then below that, print one divided by three to the power of two in parentheses. I'm going to run the code. We can see that we get the same answer. Exercise number 11 Modulo In this exercise, we'll learn what modulo is and how to use it in Python. What does the modulo operator do? The modulo operator calculates the remainder of a division calculation. It uses the percent symbol. In the case of divisible numbers, it returns zero since there is no remainder. It's also the fastest way to determine if a number is even or odd, since, if a number divided by 2 has a remainder of 1, then it is odd. Otherwise, if it's divisible by 2, then it's even. Let's take a look at some examples on the right. First, we have 29 modulo 5 in a print function. This outputs 4, since 29 divided by 5 equals 5 with a remainder of 4. Next, we have 32 mod 3, which outputs 2. Since 32 divided by 3 is 10 with a remainder of 2. Finally, we have 44 mod 2 which output 0. Since 44 is divisible by 2 and has no remainder. Now, let's take a look at the instructions for this exercise and practice using the modulo operator. In this exercise, we're trying to calculate which team we're on if there are four people per team and we're the 27th person to be selected. Let's start by creating a variable named my team and we'll set it equal to 27 modulo 4. So, 27, then the percent character, and four. This will give us the remainder when dividing 27 by 4. When dividing a number by 4, the remainder can only be 0 through 3. So, it can only be zero, one, two, or three. This is why we can use it to find our team number. When counting off each person's number, then using modulo four, the results will cycle between 0, 1, 2, 3, then back to zero as each person's number keeps increasing. This allows everyone to be evenly split into four teams. Now, let's hit run, and we won't see any output just yet, but we will pass the test. So, let's fix that by printing out the answers stored in my team and we'll hit run again to see the result. And we can see that our team number is three, since 27 divided by 4 is 6 with a remainder of 3. Lastly, we have a challenge question. This question asks us to figure out the team number of the players around us, players 26 and 28, and the numbers for all four teams. Let's start with figuring out the players around us. To do so, we need to think about how division and remainders work. Our team number is 3 since 27 divided by 4 equals 6.75, which is also the same as 6 and threefourths. And the remainder is placed above the divisor, when we get the solution to division. So, because of this, we know our remainder was three and that's what we got in the console. Now, if we increase the player number by 1, so 28, we'll get 28 divided by 4, which is equal to 7. Or 7 and 0 divided by four since there is no remainder. And remember, the remainder is placed above the divisor, which in this case is 4, and since there is no remainder, our team number would be zero. So, let's check that in our code. So, we have print 28 modulo 4. Now, we hit run, we get 0 in the console. So, now we can repeat that process for player number 26. So, this will look like 26 divided by 4, which is equal to 6.5 or 6 and 2 over 4. So, we know that our team number is going to be 2 since we have a remainder of 2. Let's test that out. Let's print 26 modulo 4 and we get two in the console. Now, to get all of the team numbers we need to think about all possible remainders when dividing by four. We know that if a number is divisible by four, then the remainder is zero, so that's our first team number. We can also have remainders of one, two and three, but we can't have a remainder of four. This is because the remainder is a fraction of the divisor, 4 in this case, and 4 over 4 would be 1. So, 4 can't be a remainder. Because of this, our team numbers are 0, 1, 2, and 3. And that's it for this exercise. Before we move on, let's look at one of the frequently asked questions for this exercise. A common question about modulo is, "Can the result of a modulo operation be larger than the divisor?" The answer is no, this is because the remainder must be a fraction of the divisor. There's never a case where the remainder can be equal or greater than the divisor, since it would have caused the result of the division to increase and the remainder would reset to zero again. Let's take a look at an example. In this example, I've modified the code to show the numbers between 24 and 33 modulo 4. And, as we can see in the console, the remainder will only go up to three before resetting back to zero, since numbers that are divisible by 4 will have a remainder of zero. Exercise number 12 Concatenation In this exercise, we'll take a break from working with numbers and learn what concatenation is and how to use it in Python. So, what is concatenation? Concatenation, also known as string concatenation, is when multiple strings are combined together into one string. Concatenation uses an operator we're familiar with, the plus operator. Not only can the plus operator work on numbers but it can also work on strings. When two strings are combined, a new string is created instead of modifying one of the strings used in the combination. Numbers and other types of data cannot directly be concatenated with strings. To do this, they must be converted to strings first using the str function. When printing strings to the console, the print function can accept different types of data as arguments to the function This means that different data can be added between the parentheses of the print function and separated by commas. They will be combined into one message in the console without having to convert to a string first using the str function. Let's take a look at an example on the right. First, we have greeting and question, which are both assigned to strings. Then we create a variable called full_text, which concatenates the contents of greeting, the space character, and the contents of question together. When we print out the result, we'll see a new string which is the combination of all those parts. It will read, "Hey there, how are you doing?" Finally, we had an example of concatenating a string and a number together. The operation within the parenthesis is executed first, then the result is converted to a string using the str function before it's concatenated. All right, let's go through the instructions for this exercise. The instructions for this exercise ask us to concatenate all the strings stored in these variables together, and to store the result in a new variable called message. We can do this using the plus operator. So, message equals string 1 plus string 2 plus string 3 plus string 4 plus string 5 plus string 6. Now, let's uncomment the print statement at the bottom of the code and we'll see the results by clicking on run. There we have it. Before we move on, let's look at one of the frequently asked questions for this exercise. One of the frequently asked questions is, "Why should we use concatenation instead of just the print function?" The reason why we need concatenation is because it returns a new string once the code is executed. This allows us to store and reuse the result elsewhere in the code. The print function may prevent us from having to convert other data types to strings, but it does not return the result so we can't use it anywhere else in our code. Let's take a look at an example. At the bottom of our code, I've added another print function, which prints out our story with a new sentence concatenated on the end. And in the output console, we can see our story with the new sentence. Now, this works if we want to print it out once, but if we want to access a modified version of our story elsewhere in the code, we need to modify the message variable. So, to do that we'll have message equals message plus this is my fancy new sentence. Now, when we print out message and hit run, we can see that we have our story with the new message concatenated to the end. And now, we can also use it anywhere else in the code. So, I'll print out message, again, and we can see that we're able to access this modified version of our story. Exercise number 13 Plusequals In this exercise, we'll learn about a shorthand way to add and update variables at the same time. So, how do we add to a variable stored value? The long way is to set a variable equal to the same variable plus some amount, but a shorthand way is to use the plus equals operator. It's useful for adding up totals and it can be used to easily concatenate strings together. Let's take a look at an example on the right. We start by creating a variable called number_of_miles_hiked and assign it to 12. Next, we increment the number of miles hiked by 2 using the plus equals operator. When we print out the result, we get 14 since 2 was added to 12, then reassigned back into our variable. Finally, at the bottom, we see a similar example with a variable called message, which contains a string. The plus equals operator is used to concatenate the strings together. Printing out message gives us the new combined string. Now, let's practice using the plus equals operator by taking a look at the instructions for this exercise. In this exercise, we're provided with some starting code containing prices of different items that we want to buy. We have a total, which has been incremented by the cost of new sneakers, but we also need to add in the cost of a nice sweater and fun books. To do this, we can use the plus equals operator on total price to increase it by the value stored in nice sweater and then again for the value stored in fun books. So, we'll write total price, then plus equals nice sweater, and then on the next line, total underscore price, again, plus equals fun underscore books. And when we hit run, we'll see the total cost in the console. Before we move on, let's look at one of the frequently asked questions for this exercise. A commonly asked question about the plus equals operator is, "Can the plus equals operator be used to add more than one value at a time?" The answer to this is yes, anything on the right side of the plus equals operator will be executed first before being added to the variable. Let's update our code to reflect this. We can modify our total price to be the total price plus equals nice sweater plus fun books and we'll get the same answer. So, I have total price plus equals nice sweater and plus fun underscore books, and when I hit run, we'll get the same result. Exercise number 14 Multiline Strings In this exercise, we'll learn what multiline strings are and how they're different from normal strings. We've worked with strings already, but sometimes our strings might get really long. So, how do we write strings on multiple lines? Typically, strings will break if you hit the enter key and try to continue on another line, but this is not the case with multiline strings. Multiline strings can be defined by surrounding the string with three double or singlequote characters, and they allow double or single quotation marks to be used within them without python thinking that the string has ended. It's important to note if a multiline string's in your code without being stored in a variable or used by a function, such as print, then Python will interpret it as a comment. Let's take a look at an example on the right. First, we have a multiline string, which is stored inside of a variable called leaves_of_grass. Next, we have a multiline string, which is treated as a comment. This is because it's not being used in the code, storing in a variable or passing it into a function. Now that we've reviewed the basics of multiline strings, let's take a look at the instructions for this exercise. The instructions in this exercise ask us to assign a multiline string to the variable to_you. To do this, we can copy and paste or write the text from the instructions between three double or single quotes. So, this will look like, to underscore you equals then three double or single quote characters, I'll use the doublequote character, and now we can copy and paste. Now, when we run the code, we'll see the message print into the console. Before we move on, let's look at one of the frequently asked questions for this exercise. One frequently asked question is, "Can we perform the same operations on multiline strings that we perform on other strings?" This is a great question. The answer is yes, we can perform the same operations on multiline strings that we perform on any other string. This is because they have the same data type as other strings in Python, they're just represented differently in the code. Exercise number 15 Review We did it. We made it to the end of the lesson. In this final exercise, we'll take a moment to go over what we learned. Throughout the lesson, we learned how to write comments in our code and why they're important. We also learned about printing to the console via the print function, and how those messages are called output. We learned how to store data in variables through assignment and how to change them using reassignment. We learned how python handles problems with our code and the two main types of errors which occur. We went over mathematical calculations in Python and how different operators are used. And, finally, we went over the difference between strings and multiline strings, as well as how to concatenate them together. If you've made it this far in the video, great job. You've learned some of the basics of Python 3. In this last exercise, we won't go over any instructions or community questions. Use the last exercise to practice your skills and to play around with all the new things you just learned. That about wraps it up for this lesson. Thank you for watching this video and we hope you enjoyed learning about the basics of the Python 3 programming language. If you have any more questions or want to get involved with the Codecademy community, head over to the Codecademy forums or join our Discord server. See you next time, and happy coding!