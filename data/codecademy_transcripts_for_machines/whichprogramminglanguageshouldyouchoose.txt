hi this is Pat with code Kadim II I'm a web developer based in Washington DC I've been teaching coding for over six years now and a very common question that I get with a lot of students is what programming language should I learn or what language is right for me this is a big topic and I don't know that anyone can really answer it adequately in under ten minutes but we're gonna give it a try there are a lot of answers out there trying to answer this question and if you're new to programming it could be very confusing to try to wade through it all you might be worried about this in that's okay part of the problem is that our industry changes so fast this video can't answer all those questions for you but what we are gonna do is take a stab at the following points give you some highlevel guidance based on what are some of the most common paths that people take clear up some misconceptions and give you the tools to go out and find the right answer for you I can't promise you will have the answer by the end of this video but I can promise you that you will be closer than when you started let's get going okay so what is a programming language computers are machines that give data outputs based on data inputs they're really great at this and they can give you millions of outputs per second they are serenely undaunted by complexity the problem is that computers do not think like humans do it's really hard for us to talk to them programmers are like the ambassadors between the two worlds we use programming languages to give computers sets of instructions in a way that both parties can understand and at the end of the day a computer only understands binary meaning the ones in zeros so no matter what the programming language is it must eventually compile down to binary the closer to computers native tongue binary the faster the language because there's not as much need for translation but it's also a lot harder to program at that level now here there are two major distinctions in programming languages some languages are closer to how computers communicate refer to as lowlevel some however are closer the way the you and I would converse and those are called highlevel languages there are pros and cons to each so low level languages they're easy for computers to understand and super fast to run but they're very difficult for humans to learn and understand what's happening high level languages are easy for humans to learn use in debug but slower for computers because they have to go through multiple translation cycles to eventually get into something that a computer knows what to do with and it's not just us computers really struggle to understand humans fun fact there's a whole field called natural language processing and it's trying to crack this programming languages at the end of the day are all just different ways of telling computers what to do and they're usually designed with different philosophies or different approaches to how to build stuff in mind high versus low is more of a spectrum than a black and white sort of thing when I say high level is slower I'm talking about fractions of seconds milliseconds really and there's relatively few tasks where those milliseconds are so important because humans are so much slower we just don't notice when those tasks pile up they become noticeable to us humans ever gotten mad at your computer because it was taking too long to load College computer science degrees don't usually focus on highlevel they focus on low level languages as the foundation boot camps like the one I taught at are there to just teach you the high level things you need to get a job and nope you don't need a computer science degree to do programming or to get a job as a developer but yes knowing more about how a computer works in computer science can help with high level users long term for now just know that for most tasks and most jobs high level will do the trick that brings us to the big question which programming language should you choose well because programming languages are tools to talk to computers it's not just about what's best for the computer but what's best for you and why the computer are you going to be working together so we should really ask is what are you doing are you programming for fun are you just curious do you want the easiest language under your belt a particular project that you're working on are you are you trying to get a programming job or are you trying to apply these skills to your current job maybe you're not sure truth is is that there are different right languages for each of these answers to these questions now for a few of them like for fun you could just pick any language you like and dabble and see what you can do some of the common choices here are HTML CSS and JavaScript in that order to build websites and or Python to build almost anything if you're just curious similar story for the fun crowd but maybe you should drill into why you're curious if these cover you great to come back to this video later beyond that this gets real complicated real fast so buckle up now the easiest language is quick to ask but long to answer what's easy depends on what you use it for so for example a hammer is easy to use to drive nails and requires less skill than using a saw but try cutting a tree down with a hammer languages are tools and were created to handle specific tasks so as a general rule some tasks will be easier to learn to program than others HTML is quoteunquote easy but it won't help you with data analysis now if you want to build a project or get a specific job done it matters what kind of project you're doing is it a website is it an application what are you trying to build with this project now if you want to apply your programming skills to your current role that comes with its own bag of questions like what job are you in marketing needs are gonna be different than the Financial Analysts what industry what sorts of tasks are you doing what kind of technology do the people around you use at your current job now what if you want to get a programming job and that's the million dollar question before getting too deep into these let me clear up some misconceptions that might be holding you back misconception number one learning the wrong language is a waste of time this is one of my favorites because the truth is that you can't spin your wheels on one language but the truth is is that programming is about patterns many people think the coding languages are like human languages where if you pick the wrong one you're wasting your time like learning Chinese when you want to move to Germany that's not really the case with programming you see programming languages might look different on the surface but they usually have a lot in common and in part that's because they have some shared ancestry all programming languages are trying to efficient they're all trying to cause as few bugs as possible and they're all trying to execute the same set of instructions you start to see the same patterns and structures it's easier to pick up others because they're all using similar concepts these all might look very different to you now but they have a lot more in common than it seems if you know what you want to do and you know the key coding concepts then writing a program is largely a matter of syntax how that concept is written in a particular language so unlike most human languages once you learn one you start seeing the same patterns and structures and once you pick up one it's easier to pick others up once you have some foundational knowledge like you can get from any free code Academy course you'll be able to make better more informed decisions later if you only remember one thing from this video this is it when you're just starting out don't worry about focusing on if you're learning the best language instead focus on learning the concepts and the proper form when you're just getting started some of my students have spent months and sometimes even halted entire projects because they were trying to research what was the perfect programming language for them the truth is is that once you get a foundational knowledge it all becomes so much easier after that but you have to learn the basics first in any programming language will do that for you misconception number two programming is about knowing and doing now as a caveat it is true that you do have to memorize some stuff but the truth is is that programming is primarily about learning it's easy to see developers who know more than you and think they have it all memorized the truth is that we rarely know what's happening when we start one way to look at it is like we're professional Googlers but I like to look at it like we're professional learners we're curious we poke we prod we test sometimes we can figure things out from experience because we've solved them from before however the better a programmer you gets the more likely you are to be asked to solve problems you've never solved before and this is especially true in code breaks we often don't know why it's broken so most times programming is about learning why it broke and learning how to solve it the most senior developers I've worked with the ones I felt the most will will often be the first to admit they don't know what's happening or what's wrong but they're so confident in their abilities to figure it out that it seems like they knew all along it's not uncommon for a developer to stride between languages and technologies throughout their careers as both the challenges they face and the way we program software changes misconception number three there is a crutch way to learn programming now to be clear there are plenty of ways that you can learn programming and some are going to be more helpful than others but the truth is that there are mistakes to learn from an expert programmer is someone who has learned all the mistakes in their field there are some universal truths in our field and there are a lot of bad ways to write software and to learn to program when you're just starting out it's kind of all the same to you learning to program and write good code takes time but it also takes a lot of hard lessons for example you'll hear it echoed from everywhere that you shouldn't repeat yourself when you write code but that won't mean something to you until you've had to run around to 20 different files every time something needs to be updated correct ways to learn to program are presented as correct because wellintentioned curricula is trying to save you from making the same mistakes as previous developers but sometimes those lessons can really only be learned from experience put another way programming is not about knowing what good code is but why is it good code misconception number 4 programming languages are about programming and what I mean by that is that it's just cranking out lines of code truth is is that programming is about solving problems underneath this is the basic problem that a lot of new learners struggle with and I certainly was in that camp picking a programming language without a problem is like going shopping for ingredients without a recipe you can buy a bunch of hypothetical ingredients but unless you know what you're making you might not have the stuff you need instead I recommend that learners to start with a problem that they're trying to solve or something that they're trying to do first and then learn what popular frameworks and languages have been written or made to suit that specific Shaolin I'm saying it's more helpful to start with a problem first than it is to start with a programming language if you don't know what you're trying to solve and you just want to learn programming and it doesn't really matter which one you choose okay now so for applying the skills to your job this is a bigger one programming is useful for many people in many different ways it's a big topic but for the majority of people if you're trying to use code at work it's usually in one of the following categories to analyze data to automate tasks or to understand how technology works at your company and every company is different but more or less now we're at a stage where every company is a tech company for analyzing data it matters how your data is stored and how it's used at work accessing that data is often done with sequel then to analyze and visualize you have some options but the big players in this space are Python in the r programming language for automation it depends on what kind of task you're trying to automate and where but you won't go too far wrong by starting with any of the major programming languages lots of people like to start either Ruby JavaScript or Python when writing these kinds of apps for understanding tech at your company and really for all of these keep in mind it matters what these technologies are used for in the office some companies use outdated programming languages like Fortran but programming languages solve problems so a company's technology will likely reflect the kinds of solutions those technologies offered relative to what the company was facing at that time that's important to keep in mind when you're looking at what languages different companies can use for example when Mark Zuckerberg was in his dorm room coming up with the first version of Facebook he didn't worry about what would be perfect but what suited him at the time as Facebook grew they had the chance to change and adapt to their needs when it comes down to it customers investors and employers don't care so much about what your product was built on what matters to them is that the software works that's one of the reasons why what you might need to learn might not be what's popular and trending at all if you want to learn how to program an ATM you'll need to learn older lower level programming languages like COBOL which hasn't been popular in decades but is still used in 70% of global financial transactions games are basically just a specific type of program so you can make a game in virtually any language but the splitseconds of extra speed at the lower level can make a big difference for mobile apps or native apps on any device you'll need to learn at least a little of the specific languages used for that devices operating system but you may not need to learn tons for example these days you can make apps on pretty much anything using mainly JavaScript there's tons of nuance to this topic pros and cons and your infinite ways to write code but don't pay too much attention to the endless discussion about what a best language or what's trending the best pic for any task is usually just to code in whichever language you are most comfortable for everyone with a career focusing on coding I also like to add one piece of top advice think about what sorts of jobs you'd like to have at the end of the day at these companies companies will literally tell you what they're looking for for those positions and they'll also always be up to date so it's just a list of everything that you need to learn if you want to work at a company like that consider keeping an eye on not just entrylevel jobs but the more senior wants to so you can map out what you're going to need to learn later this applies to marketers product managers the whole range of tech careers but especially for developers don't worry even if what you want to learn is really complicated or not very popular it's more than ok to start with smaller goals in easier more popular or higher level languages before switching into a harder one later oh this is a huge topic and thanks for sticking with me there's a lot they can still be discussed about this so let's do just that I head over to the web form so that we can continue the discussion there I'll see you next time