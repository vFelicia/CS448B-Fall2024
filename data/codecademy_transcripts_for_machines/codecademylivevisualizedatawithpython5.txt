it's saying setting up webinars or custom streaming service it so your life all right we are live I am going to hey everyone thank you so much for joining us today this is another edition of code Academy live I am so a baktun I am a frequent product manager here at code Academy and we're going to be going continuing our journey through the visualized data with pythons towpath and I am joined here today with Marielle hey there I'm Marielle Frank I'm a senior curriculum developer here at code Academy and yeah I'm really excited to dig into the way that we use list comprehensions in Python so I'm actually one of the people who focuses on the data science area most specifically machine learning zoe actually has more experience and engage with visualization than i do but but i definitely can help out with questions related to data science in general and python of course yeah all right so with that should be dig in yeah so I'm gonna share my screen so fun facts for those who were with us in the first one this content comes from an old intensive that needs to have that was one of the first intensive I worked on so this is the skill path you can join us in your browser will be going through today is the list comprehensions article that's right here and we'll be going through the list comprehensions code challenge right here I'm super excited about this because it's been a long time since I've programmed in Python and let's cut branches I remember being super tricky when I first started so I'm glad Marielle is here with her expertise Sumeria why don't you walk us through the article sure alright so um we have an article here on list comprehensions I so they're a really great way of creating lists in Python and it's also sort of a shortcut to doing for loops so you can find most of the same stuff in that video if you want to go through that later but we're gonna skip the video for now so the basic idea is when we're doing data analysis we work with lists so ordered sets of data and we need to perform all kinds of computations on them so this can be on numbers this can be on strings this can be on different types of data so if we want to perform some operation on every single element in a list you know there there are multiple ways of doing this so it could be that we want to you know manually go in and modify every single variable but that's really timeconsuming and what if this is a list that's it goes on for if that was in elements it's not really a really great way of doing it real so unfortunately Python gives us a shortcut which is list comprehensions so let's say we have this list of temperatures and it's you know negative 5 29 26 negative 7 etc uh if we want to adjust the temperature you know if we're in a situation we found out our lab thermometer is actually consistently reporting 20 degrees lower than it should be we can adjust all of the temperatures at once using a list comprehension so we can look at this where it says temperatures and then it says temperatures adjusted what we can do is we can say for each temperature add 20 degrees for every single temperature in that list of temperatures so what you're doing is you're modifying an existing list but by making a copy of it so you don't actually affect the original list so the the order is you take an element in temperatures you're going to be doing this to every single element you're naming that element temp you're storing the value of temp plus 20 in a new list that's called temperatures adjusted and then you're repeating the steps one through three for every single value in temperatures so if you if you actually just wanted to create a copy you could technically just do that same thing except get rid of that plus 20 so it could be a temp for temp in temperatures but you know that's not necessarily the most convenient way of making a duplicate of the list so not something I would recommend but it's good to know that that's actually what you're doing so we can use list comprehensions in all different kinds of scenarios including a data visualization situations so in the example that we have here we're creating a bar chart using matplotlib and you know if we want to make an adjustment you know say from Fahrenheit to Celsius or vice versa we can add in that conversion within our list comprehension so we can say do this operation to temp for each temperature in temperatures and then what you get is the modified list so that's pretty neat and I think this is the moment where we're actually going to go through and do a quick demo of how you would get that that sort of chart right before we get into the rainfall yeah yeah let's do it um so before I go through this quick demo and I'm gonna increase my screen so we can actually read it all here does that uh I think so it might be good if it's a slightly larger at size 175 percent so before I get into this demo I just want plug Wilko lab notebooks so if you are with us last week and went through the project with sunny and Carolyn they mentioned how to do I believe how to install Jupiter netbooks interpreter notebooks are super common software data scientists use it's a super common software that data scientists use that's basically a virtual notebook that's built off of cells so this looks pretty different if you're used to writing code in an IDE like on code Academy you're used to just like one file you run it on once it's cool about this in google colab in jupiter notebooks is that you can run each piece of your stuff individually so I can friend this piece you can see the little play button over here is what I click stops running I can click the second piece it doesn't mean that you have to make sure to click yourself in order and you can also make sure that you can run them all run on the focus cell just in case so the plug for collab is that you don't have to download anything it is part of the Google suite so if you already have a Google account then you have access to collab and highly recommend digging into that digging into that stuff because I know also like installations anaconda anyways to the point of epidemic so what we're doing here is we are importing the map hot live charting library no worries if this is totally brandnew actually like kind of skipping ahead to next week which is when we actually get into the date of this stuff but we figured to talk about it now so I took the content from the article we have that temperatures array right here and then we have our adjusted or rate air temperatures adjusted array we're reusing this list comprehension to modify the temperatures by 20 degrees so 10 plus 24 10 in temperatures and this is what it would look like now so you can see in the comments so when it comes to doing the data visualization we want to think about what is going to be our visualization choice what we were looking at our charts let's imagine for a second that we wanted to compare how differently it looks with the original temperatures we got in the adjusted temperature so we want one color bar for the original temperature this is the second color bar to the second one we have an X and y axis and on the y axis we would want to see the temperature values right and then on the x axis it's really just a matter of kind of like moving them apart so that we can see the adjusted ones over time so ivory saved our temperatures here to Y values kind of an unnecessary step I'm sure I could clean it up no worries this interesting thing comes in where this is back in the article 2 we can plot the horizontal positions of the bars both sets of bars using list comprehensions so we know that we have eight values and we want to space them out by two and so we can take this is a list comprehension right here we're just using the range function to calculate an array from what is it Mary L 1 0 2 7 tell me sorry I'm I'm getting remonster okay should be that should be from 1 to 7 once so a range a range function will give you all everything from default starting at 1 up to right B for whatever number you pick in there cool so a bar chart the width of the bar chart in Matt cut live is 0.8 and so what we want to do for our second set of values is take what that number was a 20 to it and then say we want to modify what X was in X values 1 so it's the same one so you could also write it separately looks a little bit more similar to this which was x times 2 plus 0.8 for the width of the column 4 again 2x in range so our last list comprehension is going to be calculating where the midpoint exists on two of these bars so I GBH to scrap this from the article lots of complicated stuff happening here but what we want to do is we want to look at the midpoint by calculating where is the location of the position of the x1 bar and the x2 bar right calculate that the average we divide by two would give us our value and then we're saying for X and X 2 in this tuple here and then we're also using a zip method to take two separate arrays and zip them into one array like that and so what you end up with in the end is an array of tuples yeah when you zip together two arrays which is why we're using a tuple here correct mmhmm that's why so that's the last list comprehension that we have in here then we get to do the fun stuff or we take all of those things that we calculated beforehand and we're actually going to create our bar graph and our axes object with the labeling so what we just did here in the midpoints is that we defined the points where those ticks are going to be I just said that they're gonna be a set of years from 2010 to 2017 and you can see that I'm saying 2 X 6 to again that X values of midpoint and then I'm passing an array of values here now those x and y values that we calculated up above are now going to be pulled into this plot bar method here so you can see that the first argument is X I'll use one the second one is Y values one we're passing in the width of it again here it's pretty cool about Google collab is that it has like intellisense in it as well so even if you haven't looked at this before you can and I'll actually give you the documentation about how to use this method that's actually one of the reasons why I always use Visual Studio code as it has the intellisense in it also here is that we have this plot title we're just giving the bar chart a name and then you have to call plot up show in order to show the plot that we've created and this is this is our handy dandy little visualization that we got here in the end so if you wanted to you could go back and compare the values that we had in each burg arrays remember that negative five we can see that right there and so then you can see how they've been adjusted so you can tell all right negative five got turned into fifteen because we added 20 to it etc etc and all of that stuff with the X values was to make this look very nice and clean have the two bars staying together you can try this out for yourself even collab and fiddle around and see what happens when you change awesome so we're actually about to dive a little bit more into the way that that zip function works but yeah well we'll get into how you do list comprehensions with zip functions in them so for for the chart of rainfall in two cities we had two data sets and we wanted to plot two different sets of X values and similarly to the one that so we was just going over there's a width of point eight which is the standard for the graphing library matplotlib which is what we've been using and what you'll actually be covering I think in the next section of data visualization with Python right yeah whoo so what you can do is you can actually make an adjustment to all of the X values so that they sit side by side rather than overlapping so we can use instead of doing these calculations like each by hand we can actually just use a list comprehension so we can say that the X values for the first set which would be the blue set I believe is gonna be 2 times the index for each index I in the range of 1 to 4 because it's you know range 5 is again going to be 1 through 4 I and then X values 2 is going to be 2 times the index plus point 8 for the index for each index in range 5 so it's it's again just going to be off by one for each of those so to calculate each value we're going through and we're getting the values so it's actually 0 starting with 0 oh my god I haven't used range in a while all right anyway I we can do the same kind of thing for the X check labels and then let's let's jump down I really want to get in yes zip situation a little down towards the bottom here um okay so if we want to bring together two lists so that we're affecting two lists at the same time and you know if each each first element in each one can be grouped together in each second element in each one can be grouped together so you have first elements second elements third elements etc etc I you can use the zip function so what you can do then is you can make changes to both first elements at the same time so we could do you know something over here it's like xvalues mid points and we can say that the first element for the blue the blue bar set and the first element for the orange bar set divided by 2 for each of those when you zip those two lists together I'm hoping that made sense Zoey can you confirm that that made some yeah amount of sense this is gonna come up in the code challenge two is you can you can kind of break this up a bit right so yeah this demo here you can really think about this a couple parts so first we can have let's let's take the X values 1 and X I'll use 2 and sift them together so I'm going to call it combined my new variable is using the same method x values 1 look at that Britney or me X values yep so now rather than having this in here I can just get rid of it maybe a few more lines of code but like I think it can be really clear this way so now again we have combined them so it's 1 and I can actually even I can print this I want it to so we can see what it looks like combined probably in here of course because I haven't run everything good Aires dip object all right so it's just going to show you what you can do I turn that convert that into a list so listen whisk function surrounding combined before you print it middle LSC mmhmm Meriel for the win you can get a sense of what these values look like when they are combined together but before we've used our list comprehension to get the midpoints right now we know that here's X 1 here's X 2 X 1 2 yada yada yada yada ya and again what we're just doing is taking those two values so 0 plus 0.8 dividing it by 2 for each one of those and these tuple sets here and this is what the outcome of that what yep so I think one thing that I got tripped up about with this comprehensions when I was first learning Python what is what names change what names stay the same this may be pretty obvious perfect in programming for a while and you know fortunately we have things like syntax highlighting that kind of calls some of this stuff out but I know for me I didn't necessarily realize like I was creating the name here maybe I'll yeah we ran a real simple ones yeah where you can look at planetary planning exactly right so so again here we're creating a variable and setting it to the specific array same thing here this is you know going beardless comprehension and a new array comes out of that new list yeah I know I know you've been in JavaScript Flynn for coils there's such a thing as like numpy rays and I know lists so right here this yeah this is him is like a temporary temporary variable that we're just using right here in our list comprehensions but the keywords that we want to have our 4 so it's the merge you're like a for loop right so it's like each item like you want to do this calculation for each item in this list you know what we can actually turn that list comprehension directly into a for loop to show that it is actually the exact same thing alright now you're gonna have to walk me through this no worries no worries we're probably gonna need both the temperatures and temperatures adjusted okay right because that's gonna have to go from there exactly eagle eyes this is why pair programming is great okay so we've got our temperatures list we've got our list comprehension to get tensor suggested let's let's print out what temperature's adjusted just so we can see what that looks like yes you don't have to change it it's a ready list it's already gonna be a list when you create a list comprehension there we go all right awesome now let's do I let's do a twirl it well no leave it leave it leave it it's fine okay and what we're gonna do below that is we're gonna say for temp in temperatures so this should look familiar if you've done for loop before and then underneath we're gonna say uh temperature is adjusted to let's like create a new list hmm so equals blank new list or something right here that would probably have to be created outside all right before the for loop before the for loop we're just at you to set it equal to an empty list exactly and inside the for loop we're going to say um we can do Josh yeah we're gonna do dot append that's probably the easiest way of doing there's so many I remember and I always try to do it in JavaScript and I don't like that it's different yeah I know it's super annoying that it's not the same all right anyway we're doing dot append and we're gonna say dot append and we're gonna take the exact same thing that we had in the list comprehension so it's 10 plus 20 all right and then outside of that for loop at the end we're going to print out temperature adjusted to and we'll see that we're gonna actually have that same list twice or willies we should unless we did something wrong so yeah that we actually can turn ellis comprehension directly into you a for loop because they are doing the exact same thing and a really good point here is that you can actually do nested lists in the same way so mmhmm usually for nested lists i like to do for loops because i think they're a little bit clearer but it's good to know that you can do them as list comprehensions as well yeah and I have seen them plenty of times that way yeah um so with that should we dig into our code challenges yes get into the code challenges whoo all right caddy me and I'm pretty sure I went I did these last night just like you know refreshed everything all right awesome so the first thing we're gonna be doing is doubling every single element in this list in the list called nums so we're gonna create a new list called double numbs sounds like cookie dough Yemen double young ones actually some kind of gum I think that's double min okay gonna we're gonna create a list comprehension here and actually I I'd really love to see if anyone in the chat wants to try and figure out what we're gonna put in here what is double nums going to look like so we might have to wait a second and in the meantime we'll chat YouTube on my second screen okay I got it I got it oh parrot Mario's got an open she's listening to all of you she will pass me your secrets yes Bubble Yum bubblicious and Doublemint YUM if I could actually write a song it would alright um by the way we got folks from India and Kenya and Nigeria all over the world joining us incredible thank you all for joining yesterday I'm normally in Brooklyn but we're in New York at code Academy his office but today and we for the most most of this year I'm out in Massachusetts yeah Mario's my neighbor live in Brooklyn still sticking sticking it out here still good place to be especially now that the weather's getting warmer yep did make it down to Philadelphia last week first time I left my house during quarantine Wow I guess what's the city I should say during quarantine so that was exciting that's eat delicious Philadelphian food so I think folks are getting folks are a little bit shy here uh I want to see I was hoping somebody would jump in and offer the solution for double numbs but if we you aren't getting anything we can throw this together ourselves alright and maybe after UCSD this one you'll be like oh right that is exactly how I thought it would work yeah what's nice about these code challenges is that they start off unlike the easier end and then they get more complicated so yep you can you're gonna have yeah gonna have a bunch of zips towards the end all right so let's do it yeah all right so we are multiplying every number by two so what are we gonna call these numbers let's say num mama but again like so we mentioned this is totally arbitrary we could have called it YUM we could have called it gum we couldn't called it bubble it doesn't matter but let's let's call it num for the sake of consistency because the list is called nums that we're pulling from so we're gonna do num times 2 for num so what that does is it's it's multiplying each number by 2 for each number in nums and to make sure that we do this right we can either run our code but if we want to see it and make sure that we actually got what we're expecting we can always print that list so we're gonna print double nums sense yeah that's just saying that it doesn't have you print it but it has a console but yeah we can see that every number is doubled so 4 becomes 8 in double nums a becomes 16 etc awesome so sweet let's move on to the next one so it's really fun about these code challenges is that you get lots of practice mmhmm all right so here we are we're going to do squares and this time we're going to be using a range so the range actually creates a list for us and in the case of range 11 we should see numbers 0 through 10 all right so we're going to be squaring and we can actually use either style of squaring I usually use the star star mmhmm variant which is actually what we're probably going to have to do and or not have to but it's it's just I like it a little bit better I don't know maybe it's a perfect a personal preference you can just copy no yeah all right so we're gonna create a new list called squares and we're gonna set that equal to and we're gonna use num again instead of some other arbitrary name and we're gonna do star star and what that's going to give us is a square of each number for numb in nums sounds good I agree by the way there's a comment in the chat repetition helps when learning and I totally agree yes well there we go we can see we have the original numbers and then we have all of the squares yay and in fairness we got that green checkmark and if any point you're doing it for challenge on your own or any time that you're coding you're not sure remember that print or console log you're doing JavaScript or whatever it may be in your chosen language is your friend so you can make sure that you're seeing what's coming out not just relying on code Catanese lovely tests and error messages to help you so here we are again alright so this time we are adding 10 to each element in the list nums so so you want to try this one sure so I'm gonna go again with the word no since you say I'm gonna do plus 10 for each num and no let's print it Wow alright anyone can get some learner participation in the next one right fingers crossed folks aren't as shy anymore I feel a little bit more confidence as you've been watching yeah I even felt a little nervous I know it's one of those things I felt like I was gonna do you know my range Fiasco all over again yep absolutely so so hopefully yeah not quite yet but we also have a delay remember so let me make sure that we've gotten to / yep we're there now and hopefully somebody will give their idea of what they think / is going to be equal to I'll start us off with just declaring the next one oh we got we got one submission here so um corvier I don't know if I'm pronouncing that right uh says numb / hmm for numnums well this is what I like in the Le alright and so she girl you got or sock girl I don't know if it's a girl or social girl uh it looks like you have the same response so yay awesome so yes as you may have seen for yourself and you can see here um number two or friend slash everyone I call that character I will be the dividing part be the calculation for each of that noun for each them in the list excellent alright let's move on to the next one oh it's Sasha okay or so she okay another thing concept that's taught and up in math but you got all the time in programming um so it's it's this really nifty method that actually gives us the remainder when you've divided two by two numbers so if you if you take you know ten and you do modulo two you're gonna get a remainder of zero but if you take 11 modulo two you're gonna get a remainder of one so it's actually a really helpful way of identifying odd versus even numbers which is one of the ways that folks use it all the time yes absolutely because then it really helps if you have write some kind of conditional statement that depends on whether something is or even you could do something different in your program based off of that so in addition to the ones that Marielle shared you can see some other examples of numbers getting divided and what their remainders would look like and yeah four meters not talked about it this dual oh definitely did not come up with my math classes yeah all right so let's find out how we're using modular here yeah so we're creating a new list called parity and it's either gonna contain a 1 or a 0 for each element of nums so how do we do that well using modulo I we're going to again like I mentioned using modular to identify even versus odd numbers so if you have an even number you should have a remainder of 0 when you divide that number by 2 and if you divide an odd number by 2 you're gonna have a remainder of 1 oh we already got a suggestion on what this is gonna look like so scroll let's do this all right we have num modulo 2 yep you're in front of your keyboard for a numb in nomes and I think we definitely need to print this one out if you get that green checkmark and you want to explore the code further you just stay in the LD and modify your code obviously the Run button will still come up but this way you know if you're like wait I want to really make sure that I got this idea before moving on you can modify your code don't worry it won't take that green checkmark away awesome all right so yay Lisa you can see that your code worked us and you can also see here so from nums we know that 4 8 16 and 42 are all the even numbers and for each of those we now have a 0 in the same place I and for our odd numbers 15 and 23 each one has a 1 in that place so again modulo great great method to use when you might want to identify odds or evens there's also just you know figuring out whether numbers are divisible by any other specific number mmhmm all right let's move on yes print is your friend I totally agree absolutely and it's a good reminder that were using Python 3 2 3 oh yeah the parentheses you're gonna get an error that was something you had to adjust you had to adjust you I had to adjust to that also because I actually started with Ruby before moving into Python so in Ruby you don't need and almost nobody uses parentheses yeah I also surprisingly still using console I just you know if it's like it's like being fluent in the language it's just like what you default to and then you have to yep code switch okay all right so let's move into add hello so you can do this not only with numbers you can do this with strings woohoo alright so in this case we have Seinfeld characters it looks like yes and we're gonna be saying hello to each of them so we're going to create a new list called greetings and we're going to be adding hello in front of each name in the list of names so let's see whether we can get learners to answer on this great Seinfeld episode when they find out that Kramer's first name is Cosmo doing a little bit remember we've been doing a bit of a Seinfeld rewatching in quarantine you know Jeff even though we're still in New York yeah I actually have a photo from when I was in high school outside of Tom's restaurant which is that like oh yes aren't they using it you know go to school in the memory something you know about that yeah yeah my friends and I it was when I did that um they did like a summer program from high school students at Columbia so my friends and I were in it really we all got to identify with one of the characters I was Elaine which is funny cause my mom thinks she's such an Elaine so how it works so she girl says that was a good episode there are no bad Seinfeld episodes agreed but still no takers on how we create this greetings list so I guess let's just do it yeah I think we have some more string one so we can warm up with this one you can see how it works Yemen can add more absolutely all right so let's start with we're gonna put that greeting hello you can even copy paste from oh okay mmmhmm and with a space yes employees remember that space and outside of the quotes you're gonna put a plus sign and because that list is called names that we're pulling from we're just gonna call it name for name in names for names names well and so don't forget to print yes and if you're new to working with strings and Python yet lots of material on that and our pace on 3course I definitely recommend also fun fact if you want to run your code without clicking the Run button there's an if he command return or I think on PCs control return is a timesaver we also have other key bindings which I believe if you yeah you hover over you can you can see them see those keyboard shortcuts um so yeah we got hello Elaine hello George hello Jerry and hello a Cosmo so we've said hello to every single character of our main characters in Seinfeld's somebody just said hello in the chat at the same time I've been reading a lot of good night me recently yet let's move into the next one alright so this is another really fun string method hello Newman you're right we didn't get new alright so first character we only want to get a specific character from a string so what do we do we can use a really fun indexing method which I think can also be it's also called slicing um so what we're doing is we're just grabbing the yep we got a demo right there don't worry about there um yes so if we if we get the first element of my string it should be which is which is represented by 0 it's the it's at index 0 the first element is always that I'm saying yes so that's gonna be a capital W and if we go into my string and we count 0 1 2 2 we should get an O so we see that we get that oh and if we go to my string and we start again and we go 0 1 2 3 4 we should get an exclamation point so that's why we have W Oh an exclamation point getting printed over in our uh terminal right there yeah yeah so I mean I think what was always helpful for me it's like strings are basically just lists right there lists of characters I like thinking of it as characters that are strung like beads on a necklace you see ever learn how to code nice metaphor I couldn't there yes it's helpful to think about that because then you can do the same type of methods on string on strings that you would do on this yep oh and I do want to note that in the example there you can see that and you might have noticed when Zoey originally printed before she changed the third print statement to my string slice for there was nothing getting printed after w100 and that's because there is a space that was at that particular point within this string yeah so just to clarify yeah a space is still considered a character in a string it still takes up memory in the computer it's not just like genus yeah I can't forget about those those spaces same with like you can have new lines all these different things all right so let's get the first character in each of these names um so what we're gonna do is we're gonna say name and then open brackets zero because that's gonna be the first and then outside of the brackets the first set I should say um the intercept I'm gonna say for name Oh we even got the full thing here yes name sliced 0 for name in names thank you Manuel's oh and Michael Cruz really appreciates what you said about strings are like lists of characters he said boom I've never heard that before yeah it's something that I don't think he's like often often taught I think it's a great way of of thinking about it and can really help you again understand how you can use the same types of methods on strings like you would with lists like we're doing right now with this comprehensions right there Cutlass apprehensions do you think you can only do it with a list but oh so sure you can do it with a string well it's it's still a list of strings [Laughter] anyways I would be curious to see if you could do this you could probably do a comprehension just don't like the name itself right all right so let's print that out let's see if this works thank you sir girl yep you got it to e j g JC that's what we would have expected so we're good to go we're straight we have sighs um so to find the size the number which is the number of characters in a string we can use the Len function which gives us the length of the string again just like you know so it looks like we're creating a new list same lengths and then it contains the size of each name in the list of names oh we got a really good question from Michael crews by the way uh so he's asking so this is actually in the previous exercise so why is it named slice 0 and not names slice 0 so that's a really great question so what we're referring to with name is each element in that list names so it actually refers to each individual name so what we want isn't just the first element in that entire list which would be Elaine what we want is the first character of each string so each name in that list so what we want is actually the e the G the J and the C so all of the capital letters that exist in that list yeah so like we mentioned each one of these can be considered kind of like a listen to themselves so we can use that slice method on it but to Mario's point if we were to change this to names we're no longer looking at each character in each string now we're just looking at each entire string in the list so I actually I want to print this out so that we can see what happens because wait before you before you run that code I just want to explain what we expect to happen so in the place of each name in that list of names we're going to expect to see the first name in that entire list so what we should see is Elaine Elaine Elaine Elaine and now let's run this code and let's see whether I got that right boom there we go all right and we can move on again like you know you can you can take the moment to do like what Marielle to reason it out and think about okay right what is this actually asking like if I'm saying names zero what does that mean okay that's gonna be a lien but I'm still saying it for each element in that list mmhmm and you know that's what it is so you can reason out and you can also you know we could put it down first and then like let's let's see what happens yeah and this also brings up a really good point that you can actually substitute literally anything for each element like we could just create a new string and make that what exists for every element we could put a number for every element we can put any any kind of data there yes we could just have a list of Numan but that's that's also a really a really great point yeah all right next one this is where we're getting the the length of each string so so you want to take this one away sure so we are creating a new list called length equal to I'm going to say you're gonna use the Len method and I'm going to use name again so the length of name for each name in the list names names grace blanks run and there we go excellent she's saying even split between 6 6 & 5 5 yeah all right should we try to do one more and then let's do yeah let's do one more if folks have questions please feel free to ask them in the chat at this point and then we're going to just you know let you know details about where to find more events and such things yeah and Jesus or hey Zeus I just want to say you say you suck at code but everybody sucks at code when they start and it's all about practicing it's all about learning and practicing and the more you do it the better you get at it yeah no one you know comes into this world as a naturalborn coder no one no one has that facility so definitely be kind to yourself and continue practicing continue to do code challenges like this projects like that and take your time forget it all right so let's do one more of these and then we'll we'll get into wrapping up I like that this goes through the different data types right we started with integers we moved on to strings and now we're looking at how we could use a boolean data type as well operations so it looks like you can use the not operator to flip the value of a boolean so a becomes true becomes false what the instructions are asking us is to create a new list named opposite that contains the opposite boolean value for each element in the list so we would expect our new list to be false true false um yep do you want to get a second to see if folks have any thoughts on how they yeah sure and actually while while we're waiting for folks Michael Cruz is asking what's the difference between Coke ad imme premium versus pro I noticed your screen it's it was it was a experimental product that the lessons from which we are putting into our product so keep an eye out for some some changes to happen to the platform and maybe the upcoming months so it's it's a no longer no longer a thing but it's the throat Pro is going to get a premium experience experience yeah um all right so I'm not seeing any suggestions on this but that's okay ISO real quick we're gonna do um and because this is a list of boolean's we're gonna call each element boolean I think so not boolean and what that's gonna do is flip the value of what that value is for boolean in boolean's [Laughter] let's print that out real quick right also and we see the opposites excellent all right well thank you everyone for joining and if you want to catch Oh actually Manuel has has something here was opposite is not Gould for bull and billions and I would love for that to be a thing that we could do but unfortunately because bull is the actual Python encoded type for boolean it unfortunately would not work errors is funny actually yep it's a builtin data type so it's it's gonna not work out the way that you wanted to yes and make them safe and you're not overwrite any builtin yeah so thank you everyone you can take a look at code Academy I think it's is it Kadim e / events I can't see on your buzzer I'm sorry caddy me calm / events you can find a whole bunch more events in the series next week we actually get into visualization a little bit more than we did this time yeah wrapping up the Python syntax yes I wanted to spend some time on list comprehension as you can see they're super useful for your code but they can also get a bit complex it's a good thing to have a bit of handholding with as you start learning them as I said they may be nervous when I first started programming uh Michael Cruz is asking when do you use list comprehension when you useless comprehensions how does the computer know you are using a singular variable can you use any name I actually was confused by that also when I was first getting started I you don't have to use a single singular name the computer has no idea of what the name is as long as it's not a builtin data type it just knows that you're naming it something it's more for your sake that you know what you're referring to within a list yeah so that's a really great question show that really fast it's just it recognizes this specific pattern so I just changed it to cats mmhmm or you know Oh what is it is it fish fish that doesn't have a plural fish's know what those fishes shows you how long so as long as it's it's the same and it's distinct from what the name of the list is yeah so just again really quickly we have a session this Thursday which I sell to Marielle for those who've been with us for the past couple weeks you know that Tuesdays have been for all live streamed on YouTube and Thursday we do a more intimate session with pro learners and it's going to be a Q&A so again bring your questions to the Thursday session I would definitely recommend if you're here today coming with us on Thursday to do the rest of these code challenges we got halfway through so you can finish up the other ten on your own you get more complicated so if you have any questions about those last ten here we'd be more than happy to answer them on Thursday but we could also generally talk more about data visualization questions that you may have about that subject in data science or company ever you want all right thank you everyone yeah thank you everyone have a great day I have a great day