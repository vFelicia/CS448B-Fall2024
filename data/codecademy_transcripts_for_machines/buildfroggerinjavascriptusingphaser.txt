we're doing it hello everyone everybody welcome to code kata Meena my name is Tim and I'm Kenny I know we're gonna be walking you through some phaser today yeah I just want to know how y'all are doing let us know in the chat chime in please please our course is based on a lot of like old arcade classics so if you guys have any favorite classical games that you enjoy playing put it in the chat maybe we can have a discussion on how to make it later we have enough time we'd love to hear from you and I think we're just gonna wait a couple of minutes for some stragglers chime in join us I'm mama wolf from Portland it's great to have you yeah if you're in the you tube if you're watching the YouTube you can go down to the description and click into the code Academy learning environment which is where you'll be able to follow along and code along with us to build this game that we're making that's what you're seeing on screen right now if you want to join in on the live stream or you're already on the code Kadim you site you can click on the YouTube embed it link on the lefthand panel as well and that'll bring you to here yeah just make sure that you're not playing the audio and or playing the video in both separate YouTube tab and the learning environment because then you'll hear a weird echo even what's more of a feature right like it's one of those things mmhmm it's definitely a feature you'll hear twice as much phaser knowledge if you have it open in two places so we're where are you all well Portland's that's pretty cool it's like 40 degrees Fahrenheit here today so it's it was just about to start warming up over the weekends and now it's gonna be cold again that's March 4 yeah I guess here in New York City where we are Iowa Chicago Wow we got a lot of Americans here Dragon's Lair I'm not familiar with that game have you I'm not Alex Alex is moderating for us today it's off in the corner Alex Goods the unsung hero who we love to sing the praises house yeah South America Wow international people well this is awesome yeah Miami's not too cold I'll be there later this week so I'm excited gonna head down to Miami yeah good and get some of that warm weather before the birthplace of indigestion is that what Albuquerque is really known for maybe that's the birthplaces indigestion we'll go over tips on how to make first place of indigestion later oh I don't think you really need tips on that yeah another one from Toronto and Brazilian living in London hi hi everyone yeah what are your favorite arcade games let us know we'll be building Frogger which is a classic there's a couple of other real Uruguay Czech Republic Wow very cool I think yeah and Tim was mentioning in our other courses or two other courses we build out like other games that have been inspired from arcade classics as well one being like space invaders so we did our own take of bug invader on that hmm yeah and I did one based on color a dinosaur which is really obscure not totally well known game but the idea the basic idea of having a coloring book I guess kind of goes back to Mario Paint maybe it's really fun though yeah I think it's a really enjoyable experience there's also a code your own adventure a choose your own adventure game it's interactive and you get to see what options you go through as you click through the the text input from Blaire's NPCs yeah that's a fun one I see Matt Mullen in the in the channel that's my brother so taking of your advice yeah yeah definitely an interesting audio effect well I guess maybe start moving into some code here today Wow and please like your your in the chat now if there's any points you feel like you want to ask questions ask them oh how long will this take this is slated to be about an hour an hour yeah that's our plan if you can't make it through the entirety of this stream it's gonna be uploaded as soon as we finish so we would love to still thank you guys for joining in for those who are in the chat right now take advantage it take advantage of it like Tim was saying I'll be devotedly looking onward so what what's going on in the chat and Tim's gonna be demonstrating a lot of what's going on in the live stream okay cool I'm gonna talk a little bit about what's already here and so a couple of things are in this workspace that's let me gesture at the text that's right here so here's your you should be loaded into your game J's file and then there's an index.html and you don't need to know HTML to create phaser games we use very minimal amounts it's a very small HTML file here that's just kind of describing what the title is of the of the page itself and importing the phaser library and then importing the game das file that we have over here and so this is a basic skeleton for a phaser game you've got a config you've got a new game and you have a couple of scene functions and I'm gonna talk a little bit more about what that is but first we're gonna cover this config here where we just described the properties of the phaser game so how wide it is how tall it is what the background color is by defaults and the scene information that's in there that's awesome yeah and in our course we might refer to it as like meta information you might have if you're reading we're going through our course that's exactly the same thing that Tim was mentioning before so yeah and I highly recommend I mean after this before this that's probably now going over the course we certainly cover all of this probably in a little bit more detail but since we're gonna try to you know shoot through this and make a game we might sprays over some details that you might be more interested in so ask questions in the chat and run through the course itself it should be helpful so here in preload we've loaded in a couple of images some sprites that we're going to be using for the game there's three bugs that we're gonna be using as our cars in the Frogger worlds and then there's our kodi code kademan mascot character who's going to be the frog from the Frogger and so the first thing that we're gonna do is take this loaded in sprite and bring Cody to life on the screen so we're gonna Oh game state yeah we manage States and phaser games in this kind of global way in this game state objects it just helps us pass information in between the various functions that a scene has right you're gonna reiterate that a little bit I think I think the major point is like you notice that we have a lot of different functions here we have preload create an update if we want to use the same variables throughout you'll need that global scope to access it and create and an update and so game state is just like holding on to properties that we can then use in those different functions and I think that'll be more clear once we start implementing it especially even with our first step because we're gonna make Cody and then we're gonna make an create and then we're gonna make a move in update yeah so we're gonna start with creates and we're going to add our first line of code so are you ready for this we're going to create game States Cody that's going to be the place that we store this Cody game object right and the game object itself is going to be a spray so this dot dot sprites is the name of the function that adds a game object that corresponds to a sprite to your game so this sprite has three arguments mainly the first one is the xcoordinate that we're going to be displaying kody the second one is the ycoordinate that we're gonna be displaying kody and the third is the key which is the name that we gave the image when we loaded it in preload yeah you talked a little bit about the grid like XY coordinates and for a second absolutely so for the the coordinate system in phaser itself we actually start in the top lefthand corner and that'll be zero zero or the origin and as we move down we're gonna Inc well let's move let's start with the X as we move to the right we're gonna increase the xcoordinate and as we go down we're gonna increase the ycoordinate so a lot of you may be remembering algebra math might be thinking that it's a little inverted because the ycoordinate will go up in that case usually but here in game worlds it just makes more sense for us to be going up as the Y goes down sort of it's you get used to it it's not super it's a little jarring at first because you have to flip some of your negative signs but eventually it's it's pretty standard also yeah it's coming in in JavaScript in the canvas is the name of this like the canvas element the canvas API if you're used to using javascript to draw stuff on canvas or WebGL might okay that time as well you'll probably be used to this coordinate system but even now it takes me a while to think about how to increase X or Y don't worry it's a learning curve so what we want for Cody the place where we want Cody to appear is right here in the center of the bottom and we're going to make Cody jump up or like move upwards towards the top of the screen where if Cody successfully gets to the top then we're going to have like won the game so we want what what I recommend doing is using these width and height properties that we've given to the game in order to say we in the center and at the bottom so in the center for the game would be config dot with / so that means that it should be right in the middle that that corresponds to this x value here and then if we give it config height and then we subtract 25 the kodi sprite is a 50 by 50 sprite so subtracting 25 is half the height of Kodi and the sprite this these x and ycoordinates are the middle of the sprite are gonna indicate the middle of the spray well I'm just gonna go ahead and type in this last bit here so that we see Cody and kind of get to talk a little bit more about what this what these values are so you can see Cody is appearing halfway across that's confident fig dot with / and Cody is appearing right at the bottom and that's the height half the height of Cody so that the centering works all together if you're coding along with us I would encourage you guys to just play around with these arguments just to see where it pops up it that really helped me solidify my understanding of these XY coordinates yeah absolutely stretching this out oh right yeah yeah so makes it a little bit bigger for you guys hopefully you may makes it easier to follow along as well yeah so yeah to kind of just like follow along with Kenny was saying if we change this to 20 for instance and then run it you'll see that Cody is moving a little bit further down if we just give it a bear config dot height Cody's barely over the bottom line there so I you know these numbers are absolutely numbers that you end up playing around with a little bit to make sure that everything kind of sits on the screen the way that you expect it to don't expect that this like config dot height minus 25 is something that I came up with immediately as I was writing this code some of this has been like I mean we've obviously tested through to make sure that we could make Frogger beforehand so if it's frustrating to like see this kind of magic number it's like kind of part of the experience of coding ticket decoding a game and like an interface yeah and Rick at Rick Marshall asked a great question oh sorry not Rick Opa me Thomas I hope um it's not a thank you about what a sprite is and it's in this case it's representing our player Cody but we can also use it we're and we're gonna use it later to represent enemies and things that are in our games yeah I'm going to start moving on to the cursors because what we really want to do is start moving Cody in the game that we've created here so what we're going to do is we're gonna create a game state cursors property for our game State and we're going to add it to our game state so that we can access it in the update function the update function do you want to talk a little bit about what the update function does it yeah yeah so for update and we'll get to this later but it's running what 60 frames per second is that something like that 23 I don't know it's trying to get every 16 milliseconds yeah I don't remember the exact numbers you can just gonna definitely look it up later or if I have a chance I can look it up as well but are the flow of our game works like we make we load in our assets through preload and then and create we're running that function after preload and we're adding that to our games and then later on an update that's the function that keeps on running and checking and making sure that our game is actually flowing so an update where you would be like doing a check to see if any cursor or anything like keys are being pressed cursor also being like a mouse click or any sort of input and that way we can then interact with our game and change how our game is being played yeah perfect so here we are in create and we're gonna create our cursors and then in our update we're going to use the input that we've given to our cursors in order to you move Kody on the on the screen here so the first thing that we're gonna do is set game state cursors equal to not that this dot input dot keyboard dot create cursor keys this is a bit of a magic way of adding in the arrow cursors updown leftright and also gives you controls for shift in space so just to kind of like go over a little bit more about what's going on here this is the scene the phase our scene in which everything is taking place and the scene has a number of convenience functions and factories factory methods that allow you to build in phaser primitives I guess quickly the idea is to get you going from zero to a fullblown game as like quickly and with this little boilerplate as possible while still being very extendable so this dot input keyboard that create cursor keys might seem like something you have to kind of like memorize at first but it's something that you're going to kind of start to into it a little bit more as you build more phaser games and that is 100% our plan for you is for you to build a bunch of phaser game so that it's really second nature that in this stuff is not meant to be memorized at all we've provided in the left hand corner if you expand that a bunch of links that you can go to documentation phaser also has a bunch of lab examples on how to bring this into your own game and there's also of Rex rainbows awesome documentation as well so don't feel obligated to memorize this this is often this itself is a very confusing javascript thing and so if you're not comfortable with that maybe it's also good to take a step back and brush up on some Java scripts absolutely I think our next step here is to start looking at these cursors and using them sounds good to me so we're gonna go into our update function here and we're going to check let's say if game state dot cursors dot left okay dot is down right and what that is going to see is whether or not we're pressing down the left arrow key on the keyboard and what we want that to do is to move oh I use player in that I'm gonna switch this over to player actually okay just to be consistent a little bit with the notes in case I don't mix myself up here I know I called it Cody there you know player works just as well so I'm going to fix that dot why and what I want to do since we're moving left that means the x value needs to go down so let's just let's change that to I guess first of all and then minus equals five let's say and that's another kind of magical number we'll see as the as we safe here and we move Cody a little bit to the left it I think it feels kind of nice I think if we if we set that to one instead Cody moves a little too slow it's not as fun and that's kind of like one of those real personal choice things that it comes down to is how fun does it feel to move Cody as a game developer that's kind of up to you so so I'm going to save this and we're gonna start building out the rest of these checks and so we want to do is create an else statement nice yeah I'm not gonna write eel if I usually write that so I'm gonna do that wrong though well we need yet parentheses 9x plus equals five and so now we've checked if we're moving left or if we're moving right so that's what this game state cursors that refers to the create cursor keys thing that we're objective we built up here and then left is one of the properties of that and then you can check is down on the left key or you can check is down on the right key and we're going to be using both of those so here we are moving left moving right excellent we're already well on our way to building up Frogger that's that's basically your core axis of motion actually we'll have to add the Y value changes to and we're gonna be a little bit different with how we move Cody in the y axis because in the Frogger game you jump a whole street kind of you move a little bit to the left into the right but you jump a whole Lane is the phrase that I've been using for this like you can think of the game as broken up into several rows and you jump a whole row up instead of just a little bit so what we want to do there is I'm gonna talk about just down a little bit I guess sure so for just down unlike what we've been using before for like gamestate cursors left is down we're just checking for a can we can continuously press left or right in the first conditional and Cody will continue to move left so we don't have to keep like lifting our finger up and tapping down again we can just hold it down and it will keep moving to the left or to the right right whereas in this method phaser input keyboard just down it's checking for the gamestate cursor up in this first case and every single tap is going to then trigger something you cannot just keep holding the up key down and expecting Cody to move you'll have to continuously tap yeah so you're not going to just kind of like sprint upwards you're going to go in very discreet motions so here's a question for you the viewer we are checking our up key events which direction do we want to move Kody in or what what should we do to the yvalue we're going to add or subtract 50/50 is the height of Kody so that Kody moves up a full lane but are we going to add or are we going to subtract the 50 in order to move Kody up and while you ponder that and respond to the chat I'm going to add the second step which is bringing Kody back down okay I already see some people chiming in do you subtracts nothing right I I think they might be it's very possible trying since you're moving towards the zero oh yeah we're not gonna use modulo I think we have an outlier wasn't even one of our choices what yeah it looks like everyone's kind of got it so minus equals 50 exactly that's correct that is a 100% what we want to do because we're moving closer to 0 from config dot height right and that's like this value that we've assigned Kody to up here configured on high minus 25 we can work that out at 600 minus 25 which is 575 I have a math degree but yeah so we're gonna subtract 50 and we're going to bring that's going to bring Cody up and for the opposite direction I'm gonna add 50 to bring Cody back down so we're gonna save this so my no they should add that as a separate if statement we joined that as like an elseif like yeah either you don't want to move back both up and down so I didn't chain the elsif from this first block here because you want to be able to move left or right as you move up or down in order to better evade the cars I want to call them we're gonna be using bugs as the example here is we could generally use yes the things that make Cody goes flat so here I'm just gonna say if this and we're going to see that Cody can move up and down that's really good unfortunately yeah we can talk about bounds but also for anyone who is coding along and is a little lost we've also included it in the folder on the top left hand corner serious stuff steps yeah the first step in cursors and you can copy and paste that and we'll stop along each point as well and if you get lost along the way feel free to copy and paste that in and that way you can just get started again with what you need to for the next steps yeah it's an excellent way if you are coming back to this and you want to see what the full the final game looks like you can come down to this last step and you can copy and paste that and then you can kind of erase that and readd it in the code as you build it yourself cool so back to game doc j/s and we are going to continue building on this so a bit of an issue here arises as we can just walk Cody completely off the screen and that's that's not going to be good we're we don't really want that you can move down you can move up on to the other side of the screen that's we want Cody to stay in the game that's where Cody belongs so we're going to add bounds to these if statements to make sure that Cody isn't going to step out of bounds after we move Cody further out and so if we when we check for the left is down we also want to check that game state dot player dot X is greater than 25 that means that Cody can't continue moving to the left after Cody as always as far to the left already as part of the lefthand let me just save that and show you what I mean by that when I move all the way to the left here that's it and that's that's where codecademy are now Cody Cody's xcoordinate here is 25 because that's the center of this sprite so so little I guess a little maybe confusing about how phaser assigns the Centers of your x and y coordinates there's ways to change it if that's something that you don't like using the origin method we go that into that way more in depth in the courses so we're just gonna kind of keep on moving here and add some more ways to keep Cody within this box and so the other the next way that we're going to do is game state dot player dot X is less than I don't know what I'm gonna do here is config dot width minus 25 so that's I mean that's a whole lot to say no a whole lot to say make sure that Cody doesn't move all the way to the right off the screen in that direction saving it and you can see that Cody does not go out of bounds that in that direction either and we're gonna add that also to our upanddown checks as well so we're going to do game states dot player not Cody Y and we want to make sure that that's more than 25 so that Cody doesn't move further up after the top and we're gonna also just keep on going I'm gonna trust that you trust me now to know that that's going to work and we want to make sure that the Y value is not is is less than it's that's a great suggestion it's minus 25 so we're using a lot of this oh yeah yeah the fun extension that's a really that is a fun one we're not gonna get into that you should think about it so you can see now and if you follow it along with the code that Cody we can't get Cody out of the box and that is exactly what we want he's trapped in there he is traps there's one trapped code Academy mascot sweet excellence like snake yeah yes yeah like sync oh yeah yeah that that's the real really old real deal the old brick phone I'm miserable yeah a pocketsized phone for a past generation at this point if you guys are coding along we're we've got enough to step to as well where it's to creating boundaries I think the name is called if you have any questions as always please ask in the chat but we're now gonna move on to the next step I guess so the next logical thing I think in this case is maybe making the roads yeah we need for Brodie to cross we need to kind of set the scene we need to give this a little bit more context Cody just moving around in a green square is fun enough I guess but a game doesn't just have to be playable there's got to be kind of win and lose conditions and it's got to put you in an environment really and give you circumstances to deal with and think about so the first way that we're going to start to indicate that is by adding in these roads so we're gonna start with we're gonna make two roads we're gonna name them road 1 and road there's an extendable way if you want to make I guess an unlimited number of roads you can make a roads game state dot roads but since we're gonna kind of make this small and within this little box here let's start with one or with just two roads and we'll talk a little bit maybe at the end if you time about how to make an infinite Frogger game I guess yeah you can never win that's we're gonna use this dot EDF tango which just creates a rectangle a road is kind of like a rectangle life is a highway config dot with divided by two you might recognize that from the how we added the cody sprite that just means centric on the screen we want it to be in the center of the screen and we're going to give it a yvalue of 150 and so we're breaking this up into like kind of 50 pixel grid Kody is 50 pixels by 50 pixels and Kody is moving up and down by 50 pixels so 150 is like three lanes down from the top let's say and so we're going to give it the whole sorry rectangle has five arguments that we're going to provide it the xcoordinate of the room rectangle the ycoordinate of the center of the rectangle the width and the height and then the color so that's all five so the first thing that we have here is the xcoordinate of the center of the rectangle which is the center of the game the next is the ycoordinate of the center of the rectangle which we're going to give 150 and that's another one of those values that you kind of play with and you think about and you have fun with as you design your own game the next thing that we're going to add is the width of the road and we want it to be as why does the game itself so config down with and the next is the height and we want each road to be four of these 50 pixel rows tall I guess so that's four times 50 which is 200 and I just give it this little gray by passing in this hex code 0x bbbbbb oh I love these it's a lot of bees it's six bees all together that's a hex code it's just a hexadecimal color code you can learn more about those online oh no oh no let's copy that and refresh I think it's I don't think it's our code I think it's just I see we've run into his command agent bit of an error I did not copy there's awesome there was also a great question from Diego asking what happens if we add in in like arguments that aren't integers and I in our chat I actually encourage you guys to play around with that and see what actually happens I only say that because I've done that numerous times as we've developed this course and found out for myself and that's how I learned but maybe we could also plug in a non integer value here and see what happens sure absolutely let's like if we do a string I don't know a string oh I thought you meant like a float oh oh yeah I haven't even thought about floats for this one to be honest I don't know the answer to the question of what happens if it's not an integer value so I'm gonna give it 225 here and we're gonna see I don't know if we would be actually be able to see if there's like a point 25 increase to the height that's not a very useful thing to do I guess Thanks I don't know that I would be able to tell it probably rounds but is it floor as a truncation I don't know not entirely sure on that one either I thought it was going off a string or like undefined before right if we give it like 200 I think that that is not gonna I don't think it's gonna like that ooh that's weird all the way I have no idea we're not gonna go into that probably no I think it's a really good question and I'll probably end up spending some time looking it up afterwards so I'll let you know yeah thanks cool what's next the next road let's add in two roads because we want Kody to have a storied adventure before code 1/3 so I'm just gonna copy and paste this first line and create road two and we want Row two to have the same xcoordinate but a different ycoordinate we're going to give it 450 and everything else the same so we're gonna have two roads here Kody start by crossing one road look at this I've also got a question about that from John John's coding along thank you yeah and it looks like Cody is going right underneath the road which is 100% not what we want right now so how do you think we might fix this it seems like it seems like it's just how like phasors reading our code or even JavaScript is being read because it's going from top down right so if we load the player before we load the roads the the roads will have this thing called like a zindex that makes it pop like closer to the front of the screen then Cody would be so I see that Tim's copied the code so you create Cody and we're pasting it underneath the road creation code yeah we're moving this this game state dot player creation I think that phaser automatically assigns the Z indexes to the objects as you create them and so since this one is the last one that gets created I think you can update it manually mmhm but it's maybe clear to not have to do that if you just say oh I'm gonna put everything on the page first and then have Cody you like walk over the road so if I save this and start running it like this you'll see Cody on top of the street awesome as intended cool what is next we're gonna start talking about enemies right that's what makes a game a game isn't it we were just crossing roads yeah my favorite step in any game development is making enemies because making enemies is something that I'm really good so if you're out there and you want to be my enemy actually that doesn't sound that's right let's not encourage that yeah let's keep let's see friends instead I make enough enemies as is here in the phaser game so what we're going to do is we're going to add a group groups groups yeah group objects so I'm gonna write in the code for this but our groups are basically like game objects that keep track of other game objects you can think of them as a collection of other sprites and we can use this group object to continuously make these kind of sprites so Sims written game state that entries so that's gonna be a property in our global variable this dot add group which is gonna allow us then use enemies add sprite to make enemies later cool yeah let's start let's let's maybe get to cooking up our make bug function make bugs so the way that we're going to be making these enemies is with a timed event thanks Laura I think we're also gonna be in create we should okay let's let's add this and create them so function I'm gonna give it another space their function make bug and what we're going to do is so in the classic Frogger game it seems like bugs or cars appear on like Road lanes right mmhmm and we've thought of the road or our lanes in in kind of 10 rows right yeah all together one two three four eight eight different radius yeah so we'll need to make enemies for every row and I think that's that's like a nice first step that we should do because then later on we can take these enemies and we can start moving it but it's it's a matter of like taking these problems breaking them down to smaller pieces and then iterating them so actually I think the first thing I'm going to do is just get a bug on the screen that sounds great yeah so we're gonna create and we're gonna give it a start X all right an x value of let me see let's start with the zero and then we're gonna give it a y value let's just kind of bring it down a little bit let's let's actually see if we can just get one on the screen first so and then we're gonna give it bug one which is the name of one of these bugs that we've got a point at the screen that we've loaded an image asset for and so let's start with that and let's just make a bug and call a meat bug and I'm ready to see if that works all right cool we have got a bug on the screen and we're gonna fill the screen with these bugs in due time but we're gonna talk first about how this bug is facing downwards which is not the direction we want the bug to be facing in we want to actually move it from left to right and from right to left so what a sprite has is a property called angle and what you can do is call a function on this break called set angle and if we set it to 90 that's going to turn the bug 90 degrees right I don't know how I district but the way that Kenny is saying it is the way that it gets turned in the direction of the clock so like that yes so that means that bugs set at a 90degree angle are going to be the ones that are moving from right to left and then bug set at you can pass either 270 and it'll turn it the other way or I mean you might prefer to do minus 90 it's the same thing so we're gonna start with 90 and we're gonna talk a little bit more about where we want to put these bugs as we create them so we kind of touched a little bit about on how there are different lanes right and so we want to kind of enter space these lanes so have one lane of bugs moving this way one lane of bugs moving the other way and continue to flip between the two of them and a way to do that is no my too glad to see they they can all see me succeeding here so let me think how do we want to move forward with the creation of these bugs yeah I think that's one of the big struggles of like game development or coding in general that it just seems like there's so many different solutions that we could do but while we were doing this one thing that we've thought of is like since we do have defined a defined height and Kody can only moved in and define up fashion like 50 pixels each time I get suppressed that we can make an array containing the numbers of like Lane multipliers that we didn't want mmhmm so we can make a set of different lanes so one two so like you'll notice that this is the at 25 by a 25 this is the last Lane so this would be 75 25 right here or 25 75 sorry but with a y with an x value of 25 will keep you on this side and a y value of 75 will put you here and if you keep adding 50 125 onto the next plane and so it's a multiplier of 50 that you add to 25 so the multiplier of 50 the starting what am I gonna say this first plane is number one yeah because we're gonna multiply one by 50 to get so that secondtolast lane or the second lane however you want to think of it from topic on the bottom and then Tim has actually filled in the rest of the lanes that we need to multiply by 50 to get the values in which we want the lanes the bugs to be on you'll notice that I skipped five and six here and that corresponds to this this safe patch here that doesn't correspond to a road and this next safe patch this is 5 and this is 6 and we're gonna be using these I think it's gonna be a little more understandable why we're making this array as we come around to like getting the bugs to be made generically what should I do see I think each lane it's gonna correspond to something and then we can go inside make bug and just create that function first before we make the event that continuously calls make bug ok yeah let's should we pass in lane as an argument first or should we how do our just hard code ok yeah yeah so we're gonna give it a lane of 1 right now and we're gonna start we're gonna see if we can build out this first lane so what do we want the Y value of every bug that turns onto this lane to be so I'm gonna make a every time this gets called with the lane we want to give it the Y value that corresponds to that lane and so we talked a little bit about how the lane is a multiplier config dot heights good to see you Diana happy birthday Diana it's always someone's birthday here at the click Adam II live stream config dot height what am i doing sorry I got lost we want to subtract from the bottom here it's just I guess it's a little bit easier for me I'm just gonna write this in and then I'm gonna talk a little bit about what the process was for for deciding on this so maybe if you've been listening to what we've been saying this makes a little bit of sense to you but here's here's how it like works out we take the height which is the bottom of the game and then we subtract enough to get the above to appear on the right lane that we expect it to and the amount that we subtract is 25 so that the bug is centered so config dot height minus 25 is gonna put it on the right on this bottom lane here and then we continue to subtract 50 times every Lane so if you're in the first Lane actually what you're going to do B is in this bottom most link here and if we continue to generate enemies at this start yvalue we're gonna continue to generate enemies on this first road on this first part of the first road cool so what do we want to do we also want to figure out what the start xvalue is so we're going to try to figure out or know let's start X because it's going to depend right because we depending on which direction it's going right we might want it to show up on the left side of the screen or the right side of the screen first so someone was talking about the modulo in chat earlier we are going to be using the modulus operator in order to determine whether our lane is even or not and that just means like if the lane is 1 or 3 or 5 we're gonna be moving it from right to left and if the lane is 2 or 4 or 6 we're gonna be moving it from left to right that's good and it's just an easy way to flip between values like that so what we're gonna do here is we're going to check if Lane percent 2 and that's the modular separate operator it says divide by 2 and give me the remainder and we're gonna check if that's triple equals to a zero say that yep cool and if it is we're gonna give it a start x value of the width we're gonna start it all the way on the right side and we're going to give it the angle we're gonna angle here so we're gonna set the angle and the x value in the same place because that's where that's where the two are going to be decided if it's if it's moving from right to left you want to set the x value to be as far right as possible and set the angle so that it's facing the left and if it's moving the other way then you want to set the start X to be zero and the angle so that it's facing to the right and so for the angle we want 90 here and then in our else bracket we want or else sweet we want the start x2 value to be zero and we want the angle to be minus 90 so what we can do here is change this angle that we have hardcoded to angle we can change this x value that we have hardcoded to start X and we had can change this to start Y so let's see what happens when we make a bug now we've got a bug right on the bottom here moving from left to right well that's great or it's not moving it's not moving just yet it's not moving that's correct but that's expected here at Cook County me we can say one thing for certain and it's that that this bug is not moving so do you think I should flush out the mick bug function or maybe we should talk about the event first or we should start moving the bug shouldn't we I think we could jump to moving the bug I think that'd be more interesting and we can yeah fill in the details later yeah so while we're doing that it's just like like we mentioned before there's a lot of different ways to maybe handle this and this is one way that we found it to be easier charlie great question instead of negative 90 can it be 270 and we kind of touch upon that before it's definitely possible you can use that as well yeah we have the chat asking to move the bug so I think move the bug we have to abide yeah we must move the bug Thank You Mauricio I'll see you in Miami Wow okay so let's move the bug in our update function right that's where we are Wow where are we we're in our update function here and we're past all of these cursor movement operations that we have defines and we're gonna add in a for loop so gamestate dot enemies dot get children and this gets all of the enemies that have been added to the enemies group right and we're going to give it a for each that's a little JavaScript JavaScript fun for you little iterator yeah and here's a little some some function syntax it's kind of funny we don't really often use this arrow syntax in our phaser lessons we try to keep it as accessible as possible and some people might not be familiar with it but researching and knowing some of these latest methods might really be helpful for learning the program and phaser or JavaScript moving forward anyway it's 220 yeah we are just having entirely too much fun here we're gonna start building out some more game real quick yeah angle phasers Oh Patrick I don't speed through the game but I do wanna get the bugs moving in collision happening yeah yeah I think that's the baseline address sorry for taking a little bit more time than maybe but we do appreciate you guys sticking around and listening and asking questions in the chat this really makes it fun oh should we talk about getting the bug a speed or should we just give them all the same here here in our in our bug constructor we can also just give the bug a speed yeah and this is not a phaser builtin at all this is just a number that we can assign to the bug itself so that we can use it and let's give it a speed of remove Cody at 5 what so that's out front oh no no oh we want to put it out around the bugs I think in the earlier stages it should be like slightly easier all right we'll start with 4 if you want to amp up the difficulty on your own Frogger game you'll know that you can change this speed to be much higher right definitely something that you want to play around with again personal preference or how fun you want to make it seen in the steps we cover giving each of these lanes a different speed I'm not sure that we'll be able to cover that today so we're gonna go into so here you've checked here we check if the bug angle is ninety we're gonna check if the bug angle is negative 90 and we're gonna use that to determine which direction the bug is facing because that is literally which direction the bug is facing right if we want to increase or decrease that x value right so if the bug is facing to the left what do we want to do to the x value do we want to subtract or do we want to add to it so that was a question for you guys in chat I know that we already kind of asked this question and you were all very good at it so but we did that for them why is that yes and we're doing it for the X so and they're different we're covering both all bases subtract yeah way to go didn't Asia and bran you got it yeah one who's that add to the x value oh definitely something that ah it's done it's okay I probably would have said as well it's a 50/50 shot and for me honestly it's something that I play around with things like if this doesn't work let me try it again we want to add for this bug in particular but if the bug is facing to the left which it is when we've turned it 90 degrees yeah yeah we want to subtract so bug X minus 2 equals and we're giving it bugged at speed and then this one plus equals bug got speed and let's move the bug shall we just let's move the bug are we gonna move the bug I hope it does Wow all right that is the first bug moving across the screen fantastic we're almost done really or at least with the basics whoo we're almost done with the very basics of this game not nearly near as far into the game as we kind of expected before and we were kind of ambitious on this but I think that's a great first step right we have the bug we have the bug moving and do you want look in this next step do you wanna I'm gonna add the event events I would really desperately want to add the event let's do that yeah so in order to continue creating bugs in our code something else that I'm excellent at doing we want to add in a timed event here at code Academy we are nothing if not professionals at adding bugs to code hopefully you are too because that means that you're a programmer that's how you figure it out if you added a bug to your own code you are coding congratulations yeah so what we want to do is to this dot events write this not time that Advent it's gonna allow us to create a like in game loop that calls a function depending on what we depending on the properties that we include in it so in this case we're gonna use loop being true but if you want it the event to only happen let's say 50 times you could use another property called repeat and use 50 as the property instead but this case specifically let's see what Tim is yeah I'm gonna give it a little slightly random delay so every time that this event gets called it could be and I'm gonna give it a start time I mean good doesn't don't have to be right like that's that's saying like at the minimum just in case there is no delay at all right add a little bit of delay yeah yeah we want to we want to make sure that it's that there is some amount of delay between each of the bugs that we add so that we'll be able to get Cody successfully right through so the reason Tim added the constant right there on 1800 is because the delay is determining how long it is between when the first function is called and the next function is being called so we want make bug we don't want it have to have let's say math dot random returns zero and it just constantly creates a bug and we can't even get that through stream of bugs so we want to have it wait at least a thousand eight hundred milliseconds or 1.8 seconds and we've played around with these values a little bit beforehand so that we're not just crazy guessing here cool excellent good to see you man depends if you like Cody Charlie come on team yeah I do want some coffee so I've added this callback scope to the event and that means that we can access and we'll see as we build this like loop a little bit more instead of hardcoding the lane here we can give a lane that's been provided to the code so what this is hopefully gonna do is continue to make bugs that move to the right well I made a bug no I think it's just the delay out of the delays in the delay is a little bit long yeah but that's good because we want to know well we'll figure out how to I think so I do this it's a matter of like allowing all right well what I'm gonna also do here and we're gonna move a little bit through is for I guess lane of lanes that's what I'm gonna do for let lane of lanes okay and I'm gonna use I'm gonna loop over this event so that we can create can I successfully do this yes I can do it okay if you hit well on a Mac its command and the right bracket you can indent the code and I always somehow miss that I also learned from a coach lit before that we can also tab it oh yeah yeah you can just tab comes down and highlight and tab so here we're looping over this and we're gonna create a timed event for each of these lanes that we've defined up here and what that's going to do is create bugs in each of the different like that Lane callback scope like the okay all right works we got a oh now we're talking that's correct we have a lot of bugs going on here in fact I'm gonna change the color of this bug in the steps you can go over we kind of automate making each lane a different kind of bug but the orange one has given me the willies the willies so let's go with the green one which is a little bit nicer looking I think Oh Jennifer teacher you're very welcome thank you for tuning in seriously we appreciate it so what are we doing next we're gonna add the collision aren't we yeah we got those bugs moving but Cody's just barreling right the room yeah you have to be able to lose a game you know in order to make winning really truly mean anything so let's talk about how we're going to get Cody to Louise yeah so I guess in taking a step back and talking about like collision detection as a whole and game development it's a matter of like when two objects like go collide for lack of a better word come into contact with each other right so to do that we we need to know where they are in a game like what's their bounds what's what's like that their outline I guess um where's the enemy sprite outline mmhmm and when those two overlap a little bit or touch each other that's when it's like no you can't have that happen it's game over for you right and so we loop over each of the bugs here in our update we wrote this a little bit earlier to give to move the bugs around what we can also do here in this for each is check if the bug and Cody overlap and we're going to do that with a little geometry and so what we're gonna do is we're gonna check if phaser dot and geom intersects dot rectangles a rectangle so that's going to check whether or not the rectangle of Cody and that's that's the whole sprite that's we have to take one step back and we have to grab Cody as the rectangle first to like right we have to use the player rectangle yeah I see oh excuse me yes so we want to actually grab the player rectangle first very kind words I don't have to use math cool so we're going to you get the rectangle that corresponds to Cody here with player erect and we're gonna sign that to a part of our game state so that we can access it later oh we're gonna sorry we're gonna grab that from our game State got player that corresponds to Cody there get bounced that's the that's the method that we're going to use in order to get the bounds of the player yeah it's a little I like it when you can describe what something is doing by reading the the sequence here we want to look at our game state and get the player and get the bounce from that make sense and that's quite nice one of the things that like phaser gives you right out the box which if we had to do would maybe have to find the x coordinate the y coordinate where the top left top right bottom left bottom right coordinates and figure out all those math but phaser just gives us get bounds and we get a rectangle from that yeah it's called an AABB and absolutely around bounding box it's it is a fun little piece of code to have to write yourself it's so easy to get wrong and I'm speaking from experience but I'll take your word for it yeah I don't recommend it unless you want to in which case go for it it is it's always fun to figure out new things so we're gonna use this player rectangle and check if it intersects with what each of these different bugs here and we're gonna do that with bug get bounce the reason why we call player get bounce outside of the for loop is so that we don't keep on calling it for each one of our bugs we don't need that we know where the player is the player is in the same place but each of the bugs is in a different place so that's why we have to call that or we call that for but we call the get down here cool and if this whole thing is true this somewhat monstrous but hopefully selfexplanatory series of statements is true we're going to add some text that says game over that's the first thing that we're gonna do and then we're going to probably I would say pause the physics is probably what we should do is I'm not keeping track of the events or anything so I can't destroy those right but if we pause the physics we'll get the bugs to stop moving but the thing is here we never included physics caffeine never included so Tim is actually mentioning another method that we can use had me included physics in our game right but we didn't and so the way that we can manage this though is like signing when like a game state is active like when it's being played and then in our update we can check your game state is active or or playable and if it's not playable then we don't do any of this stuff cool I'm going to first yeah I'm gonna add in the game over text and then I guess do you want to talk a little bit more about how the game state is active might interact with I want to talk a little bit about how the the step by step code will look like to someone who's following along with the project's not as we've done it here today but as how how we've kind of laid it out sure yeah um so game state not active so that's that's gonna be another property that we append to our game state global variable and that at the beginning we're gonna set to true active is true then we want the game to be playable and to do that we can add it in our in our create function just to assign it true first and to check if it's still true throughout in our update function that we can wrap like our controls around that fact of checking if game state active is true and if it is we should be able to control the player we should have collision detection we should have all that good jazz but if it's ever false then in our update we'll see that it's false and we won't be able to control Cody anymore and our bugs will stop moving and eventually we might even want to like stop the event that is creating our bucks all right cool I'm just gonna cover a little bit about all the stuff that I wrote which is pretty much exactly what you just described so I added this text that says game over when you intersect and then I added this if statement around all of our update function that just checks if game state active is true and the last thing that I'm going to do here is inside this intersection I'm going to set game state active game state that active to false so this means after we hit one of our bugs where the bugs are going to stop moving Cody's not gonna stop moving and we're gonna see the words game over so hopefully well I'm gonna just refresh real fast oh no yeah yes there we go Oh No well I think you just have to save again or paste over talk about adding bugs to code what oh yeah yeah yeah so here's something that you can totally do is inspect the element here and it's a little busy because there's a lot of stuff going on but rectangle to rectangle is what it doesn't understand so okay let's come down to this part here and I think it's because I spelled intersects wrong that's what it's finding undefined because so in stir it in inter insects was what was on the brand there but if we update that it just says game over this issue before red sea layer right yes very interesting so you know since we can use the console we can just start debugging by a console logging step again set the games games date for which no that's what it's false by default oh did I know I get a set it active in creates and so it drops into this if statement right and then it gets here and what does it do so I check the console and oh okay our bug does not have Lake bounds and for some reason that true this very interesting see if I understand what's going on here should I be but it should be a singing are the parameter in our callback function very curious is it intersects with is intersex I believe it is because this is returning truth somehow but bug get bounce is giving us this not a number laden object hmm and all of that together is weaken this so this is the fun part welcome it's got to be in this callback because it's for each of the different bugs yeah but curious if you catch what's going on please fill us in it's a fun way to be finishing off our our livestream here so let's see are we inside that scope as well yeah I think it's possible that we have like a bug that doesn't really it just hasn't been there yet I don't know because we when we create them we give them x and y values they don't get added before they are assigned those things you are certainly not the one who struggles to figure out your coding mistakes Vanessa definitely not your and I would love to call myself good company I'll add the semicolon though I want I want you to feel I'm very bad at adding semicolons or at least it's returning truthy yes it is returning something positive here I don't know I'm not sure it's dumped by this as well anyone play around yeah plenty of wrecked his player Rex looks good the bug rectangle is what's coming back all all messed out so maybe I'm saying get down wrong no get bounds looks to be the same in both situations yeah very very curious yeah yeah you just start console.log and stuff for and Nan so this bug does not have a yvalue why doesn't this book have a yvalue do I never define start deadline I do start why am i passing this correctly yes ma'am one codeine multiple bugs that that could be Darren but we we're making this Collider happen for every single bug so that it checks when that bug collides with code it's funny it's the first bug to you can tell because every time you refresh the page it only prints out one of these values so the first time that it tries to do one of these rectangles or rectangle comparisons it is blowing up which is a real shame because I wanted to play Frogger yeah copy all yeah yep let's just try to remove that for now like if we the lanes are working correctly there is a wide position for it so it's very strange it's very very curious if you're catching on something here please let us know we didn't said about direct I think we do right there where it's line 73 it's constant bug rekt I know but it's it would be fine with the constant we can try lat I can get rid of it and put it back before it's love kept balance because I'm actually this doesn't used any or this is used okay so we referring to the whole screen as the collision this is funny is road one a rectangle which s is which when we were at Road one of rectangles a rectangle yeah we can check a road one very good idea we don't add any text but we do add a bug that does not have yeah there's there's one with an an y value it's interesting but what we should do is probably I'm gonna switch this back I have an idea okay I think it's probably where we're creating our bugs it must be yeah what I'm what I'm going to do here just to get on with it sort of it start X and start Y I'm just going to make sure that these two values exist we create before we create the bug and that's that should hopefully fix our issue there we go okay so our start Y was getting messed up when in the odd case but if we do this now awesome cool it had to do with this offending piece of line of code I suppose which looks just fine to me yeah I think we should if anything lets console.log what start y is and yeah here I'm gonna use this correctly I'm gonna give I'm just gonna so I'm passing a couple of things to console.log and I'm going to stop console lugging the other thing this so that all we see is this one which will give us the start why and then the different components that we have inside this calculation here sweets could only run this oh because you have a common there yes do you love to use commas I guess it is really fitting that our game is all about bugs and making bugs it truly is so yeah here we are nan 600 I think I know what happened Oh enlighten us Tim config dot height is defined later on down on the file and so we use it kind of here just possibly before the phaser code realizes that it's been defined yeah and that's that's a bug I see in this case then let's just turn config that height into 700 yep no yeah let's do that right here we're going to change this to 700 that's the that's the value that doesn't work I think actually it was 600 the height that would mess things up but we're still getting a small issue here with the odd yvalue is not working out right I'm very curious I don't know what to say and it's always the start y value that it's returning yeah I'm actually kind of confused because I don't think that it's it's not just the config dot height then if we're still getting this issue no did I define lanes correctly looks right to me oh yeah let's not lean and we iterate over lane change the 270 to a minus 90 that's actually probably a good idea oh no that is a minus 90 can we try it because I think in here our lane called can we see what lien what what was being console.log fourlane sure there yeah we'll just go just a lot lane first oh okay yeah we're getting stuff for both odd and even lanes so it's very interesting that only the bugs moving from the right to the left appearing maybe it had to do with this no that looks right thanks maybe that's what he meant by this nope it always starts off like that just undefined very weird that's strange but I think that we should probably be wrapping up the livestream yeah thank you all for spending all of this time with us really I really appreciate you taking the time out of your day to try and develop a little bit of Frogger turns out the wheel bugs was the friends we made along the way classic yeah and thanks for being so attentive and really asking questions and helping us debug this if you do want to see our final version of what Frogger would look like in our steps finishing touches we actually do have the code so to make a more functional Frogger game and I would love to see that more in action if you had been coding along and don't want to overwrite your code next steps would be like thinking about what the wind condition would be thinking about how to have a set or remove the event that's creating the bugs maybe thinking about how to add a live a life system like multiple lives many things that you can do with this game and that we haven't even touched upon right spend the last two min once right please visit the feedback forum and let us know if you enjoyed this or if you didn't enjoy this what we could be doing better what we could be doing much worse I hope that you enjoyed learning a little bit of phaser sorry about the technical issues programming especially in a live setting is fraught a little bit you know things happen stuff gets typo'd that you miss somehow isn't that a lot like life yeah we're gonna take a look back on this and see what we could have done to fix it but I think yeah the code is there if you want to play around with it and again just much appreciate it much appreciate you guys chiming in joining us for this lengthy lunch cool yeah I'm gonna shut the stream off