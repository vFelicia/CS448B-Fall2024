um i see some people in the chat already saying hi before the show starts hello give us a couple of seconds here oh someone from greece oh i honest i recognize you oh i think i think you might have sent in some uh some suggestions to me for this uh this path i honest and they were very helpful so thank you keep them coming cool so we we are live uh yeah so sophie you want to kick it off sure yeah so welcome everybody um this is a eightweek series that we're starting today going through the new master statistics with python path skill path um but this live stream series is going to be done um off platforms and we've provided a bunch of code for you to download and data sets so um even if you're not uh if you don't have a codecademy pro subscription yet like you can still participate in all of these and we really welcome anybody who wants to join and learn a little bit of statistics um i'm really excited for this alex can alex can confirm that i've been excited about this for a while yeah this has really been susie's like baby that she's been uh she's been working on for the past couple of months um sophia i know that this is like the content that you've been wanting to write for a long time uh for folks watching live right now so we are live on a couple of different platforms uh sophie and i are gonna be watching the youtube chat primarily so if you're watching on facebook or twitter or twitch um come over to youtube if you want to chat with us if you're watching this in the archives um we're going to be uh so we post all these on youtube after the fact um if you're watching there we are streaming these um tuesdays tuesday afternoon uh 4 p.m on the east coast um and we're going to be doing it for the next eight weeks we're going to be doing this stats series so if you want to watch us live uh hopefully you can you can join us then yeah um are there any other housekeeping items alex that i'm forgetting before we get started no i don't think so i think um yeah uh people in the youtube chat right now we want this to be super interactive so uh feel free to say hello to us where you're coming from uh yeah we we have someone from greece which is which is pretty cool and then uh yeah sophie before we get actually started i wanted you to talk a little bit about um what is this path about why are you super excited about this content um what makes this content special can you kind of give us a preview of the like overall thing before we dive into the first lesson yeah totally um so this path and i also add this past is not done so um i'm actually working on even more content that's going to go into the path uh in the next couple of months um but but this path is all about how to take a look at some data and make sense of it um it's we're calling it statistics but i feel like there's a lot of different names that you can assign to essentially the same thing right like statistics data analytics data science um all of these fields are focused on essentially trying to be like a sleuth and make sense of a data set when you have a lot of information and you need to condense it down somehow and and use it then to make some sort of decision a lot of the time or maybe understand something better like how a process works um and so yeah so this this content is really about the full process of taking we're gonna work with tabular data which is basically just data that's organized into rows and columns um and just taking like a large data set that is kind of unwieldy that we can't make sense of by just looking at it and then turning it into something that we can actually do something with um yeah and i i'd say would you say that it's fair to even say that this is kind of a this could be a replacement for your like intro level stats course or you're covering concepts that traditionally are taught in interlevel stats course in like a really mafi kind of way and instead we're going to start looking at them from this simulation based approach this um like almost less math and more like conceptual understanding yeah so um yeah a little background on me i actually i taught high school math for four years um and then i also taught at the masters and phd level as like an assistant um throughout my master's degree and i've seen a lot of different statistics classes a lot of different math classes um for that matter and i feel like um a lot of them really focus on this kind of wrote like you do this then this then this then this kind of steps um and a lot of times that makes it hard to remember in the future so i've heard a lot of people say like 10 years down the line they don't remember anything they learned in their statistics class um and so later in life it was kind of presented to me in this different way um and really focusing on conceptual ideas using programming um and i think that while there's a little bit of a hump to get over in terms of understanding some of the programming concepts i think that overall it makes it easier to understand the concepts and easier to remember um into the future so and the other thing i'll say about that too really quickly before we get started is that throughout this entire um series and if you're working through the path we're working in python um there are some like syntactical things like just how you write code that you're gonna have to learn in order to implement what we're doing in python um or in any programming language but what i really want to focus on over the next few sessions is just like the concepts and why we're doing what we're doing and not necessarily the syntax i know there's like six different ways to do anything you might want and um with varying levels of complexity and um and and whatever but um but i really i think the more important thing is understanding what you're doing so that you can do it in any language that you might encounter or any software um that you might need to use in a job for example so yeah i actually think that it's it's a good example of like how to use codecademy effectively because a lot of times i think folks will like memorize the memorize how to call a function or write a function or whatever and like not learn the thing behind that or like not see the big picture because they're just like learning syntax and like oh i got this syntax which means i know the thing and i think what's cool about this course is that um the syntax is like a means to the to an end where it's like it's almost okay if you don't entirely understand the syntax where the thing that we want you to understand are the statistical concepts um that were that we're demonstrating through code um so this is i think all of that is to say that this is very intro friendly it's totally fine if you don't know how to code or you don't understand the python syntax that we're using um really focus on these stats concepts that are being taught here yes okay i'm gonna get started without further ado um i'm gonna share my screen uh and you guys are gonna get to see my whole desktop which is very exciting and a dog and a dog um this is my dad's dog juno uh also just so you know i'm gonna be looking up to the side every once in a while because i've got the chat on another screen um and so i'm just keeping an eye on things over here as well so if you see me looking at the side i'm i'm not lost i'm just just checking on you um okay so and pulling over um some windows so uh if you saw the blog post or hopefully um i think on the youtube link as well um there's a link to this uh github repository and um yeah and within this repository i'm going to add the co or the uh code and data for every single session in here and we're going to start with number one um and so uh if you click into that folder you'll see the starting and ending code and the data file that we're going to be using if you're interested in coding along i just want to say a good idea would be at this point to just if you have if you have github up and working you can just clone the repository if you don't know how to use github that's totally fine just download this um this whole repository as a zip file um and then you can double click it to unzip it and then you'll have all the um files on your computer so you can just open them right up along with me if you have downloaded anaconda as well um which i think we also noted on the um on the instructions but uh worth doing yeah there's some setup required if you if you want to code along with us um they're uh describing this in this readme here yes okay um all right with that said i am going to demonstrate the reason why i'm sharing my full desktop is that um just in case anybody wants to kind of do their own analysis later um i think seeing the full process of how i'm organizing my files and how i'm opening um applications is just useful um it might seem like silly but i think i don't know that's what i wanted when i was first learning yeah i think one of the things that's really difficult um when you're first starting is like where are my files going how do i open them uh you know one of the benefits of codecademy is that we do that all for you but then once you try to start doing things on your own machine it can feel overwhelming and so demoing that is uh is useful right so yeah so i just have this this folder which is exactly what you'll get if you download that whole file i also saw someone ask about miniconda i think that will work i'm not totally sure um i'm not real i imagine yeah we're not using anything fancy um okay so i'm gonna go ahead and actually open up my anaconda navigator because i like to do things not from the terminal you can also open a jupiter notebook from the terminal but i i like this nice interface um and then what i'm gonna do is i'm gonna launch a jupiter notebook um because we're working with jupiter notebooks and of course it loaded over there so i'm gonna pull this over here okay so now this just gives me my file structure on my um on my computer and i'm gonna navigate to the file that um we're working with today uh or the folder that we're working with today and that has all of my code and the data set that we're going to be using and then i'm going to just open up this starting code and that will launch a jupyter notebook which is essentially just it's a code editor but it allows us to run code um and see the output and then like run some more code and keep all the output um on the same page and it also renders like marked down so essentially i can write regular text and not just code yeah it's a nice way to kind of integrate regular text with code you'll see like a lot of reports being written up in jupyter notebook because it formats really nicely yeah um and one thing i'll note is that i downloaded or i chose this data set um and i downloaded it from the uci machine learning repository um and you can get to that repository with this link um it i would i swear like i they don't pay me for this but i think that uh this is a really good resource if you're looking for data sets to just work with as you're getting started as a statistician or in data analytics um it's really helpful to just mess around with some data and if you're looking for a variety of data sets with different levels of cleaning um i think this is a really good place to look uh the other thing i'll mention so this is the link to the data set um the other thing i want to quickly mention just in case anybody is trying to like reproduce this from the very beginning is that um this data set which is the process cleveland data from here is in this like weird format it's in a dot data format um and i before uploading it i changed this to a csv um and i also added the column names which weren't in the data set itself but that i got from the um from here so yeah yeah so just as a side note i won't go into too much detail uh but if you download the data directly it's not going to be in quite the right format which is why downloading it from the github will be a little bit easier yeah it's kind of a good lesson already on just like different levels of cleanness that a data set can come in where part of what we're going to be doing this lesson is seeing like oh isn't this weird like this column is represented as a string where we really want to be integers and we need to fix that but even before we get to that kind of step um yeah doing things like this data is coming in a weird format and it would be really nice to have the label you know the labels of each column on this um when i before i even start working on it so you know all data set come all data sets come in varying degrees of like neatness or usability for what you're trying to do with it um so yeah yeah exactly and i will also say like knowing what to do with a dot data file um is not something that i just like know how to do um when i first was looking at this data set um i downloaded it i couldn't i looked up ways to load a data file in python and then none of them were working like it was breaking down and so i googled what to do and found something on stack overflow that said like turn it into a txt file then turn it into a csv file on your desktop and i just followed the instructions um so that's another like just general note is that we're going to go through this but even we don't always know exactly how to solve every problem and what i do is i spend a lot of time on stack of overflow just like looking for other people's solutions to problems so cool okay so we're gonna get started with this data set so uh i i'll say right off the bat so a a csv file is just a type of file that we can read into python there's other types of files you can read into python as i mentioned um basically like the first step of any analysis if you're going to use python or r or any software whatsoever is to get your data into that software and make sure that your software can understand some basic things about that data or can interact with that data in the way that you want and there are a bunch of python libraries that we can use um to work with data and those python libraries kind of assume that our data is in a particular format so um uh like pandas and nunpai and matplotlib and seaborn if you've heard of any of these um they're really easy to work with if you have data that is saved in a data frame um which is essentially just this like this structure where you've got your rows and your columns each of the columns has a name your rows also have a name by default they're just going to get named with the numbers starting from zero um so you'll see when i print this out i'm just getting some bolded row names and column names and then i've got each of my rows of data so okay first thing i'm going to do or first thing i've already provided code for is just reading this this file into python and saving it as something called heart i could save it as something else but i'm going to save it as heart so i remember that this is my heart disease data um and this is as background this is a data set that is used i think in like a bunch of papers to essentially predict who is going to be diagnosed with heart disease and so these are patients at a clinic who had a bunch of tests done and then it was determined whether or not they had clinical heart disease and this is all the information from those patients um and then what all i've done here and i think this is all in the starting code is i've just taken a look at the first five rows of the data um and here we go so we've got for each patient we've got some information we've got age sex cp i've copied down the data dictionary here so cp is a chest pain type t rest bps which is a resting blood pressure a cholesterol level an indicator of whether someone's fasting blood sugar is greater than 120 um and then a bunch of other things as well i won't go through all of them because we're going to look a little bit more in detail as we go through this but you'll see right off the bat that there are some maybe weird things or some things that just by looking at the data itself you might not necessarily understand so for example in the sex column we have numbers one and zero it seems like and we see if we look at the data dictionary that one equals male and zero equals female so we can we can figure that out but maybe these numbers as we're looking at the data prevent us from like immediately gleaning something about the patient in this row and so that those are the types of things that we're gonna look at in the next couple of steps okay um all right so the purpose of today i'm gonna add another code chunk down here um so the purpose of today's lesson is really just to go through the process primarily of cleaning a data set i know that data cleaning is not the most doesn't sound like the most fun however i would encourage you to think about this step as being kind of like a detective um we've got a pretty big data set on our hands i mean it's not huge we could have a larger data set and in real life people work with really big data sets um but you're kind of like a sleuth trying to figure out how you can best represent this information so you can do something with it later um the other thing i'll say is i i kind of want to start today with something that's not data cleaning because i think it sets up the importance of these steps really really well so um the first thing i'm going to do is i'm going to print out some summary statistics uh for this data set i think it's i don't know if it's capitalized let's see oops oh here's a good okay i should have said this before a good thing to know is that uh you have to run this this code um all i'm doing here is i'm importing some some libraries that are gonna help us with our analysis so these are essentially like they contain some of the functions that we're going to be using they contain some of the the tools that we that we need for our analysis and i'm saving them as these aliases which is just going to make it easier to reference them i'm gonna run it i'm gonna actually run this um so it's not saved from before and now yeah if you look at that error message it basically said uh it didn't know where hart was um because that was our data set that we never loaded in yeah exactly so sophie you said that we're going to look at summary statistics what is the what what is a summary statistic that is a great question alex thank you for teeing me up so perfectly um okay so essentially talking through this process right now step one is gonna be cleaning up our data set step two is gonna be figuring out some way to condense the information in our data set down to a smaller number of to a smaller set of numbers or visualizations that we can actually make sense of so um in our data set right now we have for example a whole long list of um let's say ages we have a whole long list of ages uh and i think there's like 370 patients so we've got like 370 ages we can't really say much based on just like eyeballing those ages so we want to condense that down into some sort of number that can give us some insight into what that column contains and that's all a summary statistic is it's a it's a number that can summarize some information about one of these attributes that we have for a patient um cool and so you'll notice and in our next live stream we're going to specifically talk about some of these summary statistics and visualizations that could go along with them but one thing i want you to know is notices so this describe function it's like a builtin essentially a method that's associated with data frames so um it's like uh it's something that we can apply to anything that we've any data that we've stored in this way and it makes it really easy to super quickly calculate things about our data set um which is you know super nice that's why we use software like python is to be able to really simply in a one uh press of a button get all this information about our data set so each one of these rows is a different summary statistic where uh you know the mean is the summary statistic the count is a summary statistic the standard deviation all these are so each row is a different summary statistic for each column exactly yes i just saw in the chat hi tong jin one of my classmates uh former classmates uh is joining us this is so fun um okay so anyway one thing i want you to notice about the output of this is uh is that this this function is making some assumptions about our data so um for example we pointed out before that sex was coded as ones and zeros and now we look at this and we see that we're getting a mean for this variable we're getting that like the mean of the sex variable or the average the mean is another word for average um if you're familiar the average of the sex variable is nine 0.6798 whatever that's kind of a weird thing to report um if you know how this variable is coded you you can figure out how to word that um you could say like the they're like 68 of the people in this um in this data set are male 1 you don't have to worry about how i know that right now cp is another good example where that's uh if you scroll up to the description of cp it's like four different types of chest pain and so what does it mean that the the mean or the average is 3.1 right it's not like on average people have 3.1 level of chest pain it's like right that's that's really hard to interpret right exactly and then you'll notice over here we have two other ones so ca and thal so ca is a number of major vessels zero to three um and so that actually is a should be a number um it should be a number zero to three and if you look back at the data set or or when we load it in you'll notice that we see mostly numbers like 0.0 3.0 2.0 um and yet for some reason it's not giving us a mean it's not giving us that information it's instead giving us um this top row which gives us it gives us the number of unique categories um or unique values and then the most frequent value and the frequency of that so um this is just saying that like the um there are four possible values of this three is the number three is the most common of them and there are 166 threes um and same over here we've got five different values zero is the most common and there's 176 zeros and this is a way that we would usually summarize categorical data so something like sex where there's male and female um but yeah it's being applied to something that we know based on looking at our data looks like numerical output um so that's kind of a weird thing and we're not getting that for some of these other ones that we probably want that information for right likes for cp we would like to know hey there's four different kinds you're seeing three most often um right we don't we don't care about the mean of cp whereas for this um ca we probably do care about it right it's like almost even reversed where where we want the numerical summary statistics the summary statistics about how do i describe those variables not categorical what's the what's the opposite of categorical i would call them quantitative or numerical either is fine but yeah yeah exactly so this is again still motivation for why it matters um how our data is stored but it but to summarize all all of the summary statistics that we just looked at my my point here is that we have these builtin tools that can do things really quickly for us but they're looking at how the data is stored in and making some decisions about how to summarize them for us and they're getting some things wrong and that's because our data isn't stored in a way that in the way that it needs to be in order for us to use these tools to do our analysis so that's why it's super important um okay the other thing that i'm going to take so focus of the next 30 minutes then is going to be to look at how our data is stored and try to make sure that we make changes that we need to in order to store it in a way that will make our analysis more sensical so in order to do that um the first thing i want to do is i'm going to take a look at the info um about this data set and the other thing i'll say is in jupyter notebooks i like this i don't have to use a print statement um for the last line for it to actually print it out although um if you're working in like us uh a different ide like you'll in order to get this to actually print you'll have to do this yeah codecademy for example if you're working and on code stuff on platform you'll need to explicitly save the print principle exactly um okay so this gives us some information specifically i think the most important um column here that i'm going to look at is this d type column and the d type column tells us what um data type each variable is stored as um so this looks a little complicated but basically all you need to know is that float and int are um are ways that numerical data is going to get stored so if you see float or in it means that it's storing it as a number and that means that you can do number e things with it so you can like add numbers and subtract numbers and all the things that you would normally need to find you find the knee and finally that makes more sense yeah um so you can you can do a bunch of stuff with numbers and so if you want to be able to do those things then you need to store numbers as numbers um so that would be floater and if you see oh yeah we've got an in down here um if you see something that says object in python this means that it's getting stored as a string um i think it's probably it's not worth going into right now why this gets printed as object and not something like string um but this is something i don't know how it works in other programming languages besides r but in r you would see like the that the data type is is like str or string but because of how data gets stored in python um it's a little bit different it gets stored in the memory and then with a pointer towards that memory so um anyway yeah but this is this is a good example of like why the summary statistics are being different you can even see the the two things that are being stored as an object or a string are the ones where it's able to do those first uh three rows which was again the like the frequency count the like types of of answers right uh and it can't do all of the numbery things it can't do mean it can't do standard deviation whereas the other ones are reversed the things that are floats and ins can do all these number things but then can't do the things that are associated with categorical variables exactly yeah so so this is this is right here telling us like you said exactly why this whole business is happening um okay so now i think it's time to start trying to address some of these things and see if we can change um how these variables are stored so that we can make more sense of this data um everybody's saying that they're on like python 5 python 66 i think the highest is python python 3 still does like python 3.7 so uh yeah it was a big deal when when they went from python 2 to python 3 officially yeah yeah it's causing a lot of things to break um okay so the first thing i'm going to do is i'm actually going to go a little bit out of order the first thing i want to understand um or the kind of the weirdest thing to me in this output is that these two variables ca and thal which i can see when i print out the data seem to be numbers um those are getting stored as strings um and that that to me is like the most concerning thing that i see here or not concerning but the most like obviously yeah obviously weird thing um because you know python is pretty smart it looks at it looked at most of these and saw numbers and stored it as a number um so the the question is why is that happening um and so what i'm gonna do to kind of investigate that um oh and the other thing i'll just point out i know i'm scrolling up and down a lot is that um so for ca for example um it says that there's five unique values whereas in our data um dictionary it said zero to three so that would be zero one two three that's four different um and same thing for thal there were three different values three six or seven i don't know why they chose three six and seven but i i see what you mean about the like being uh being a detective where like we have our clue right we have like wait there's five things but over here it only says there's four things i would love in the chat post your predictions for like where what is this extra like the you know it's the it's the case in the clue like what is this extra value that's from this uh this variable that's screwing things up yeah and i feel like this is why i like statistics so much and data science so much is that i like being a detective like i i feel like if you can and if you can reframe your data cleaning as like an investigation then maybe it feels more fun yeah the less nearest data cleaning takes some like some narrative behind it in order to be fun and exciting i'm trying to keep everyone i want i awareness i hope i'm saying that right is saying that the unique function will will give us some some clues i agree with you so i'm going to go for that um oops so okay so let me talk through what i'm doing i've got the heart data set um i'm going to pull out the let's do ca first the ca column and then i'm going to apply this unique function to that to adjust that column because otherwise we'd like to look at every column and it would be confusing oh yeah and this makes some sense so we've got um there's our five unique values we've got a zero a three a two a one and a question mark um and the question mark is our is our fifth value and then i'm gonna do the same thing for the foul one yeah an interesting thing thing here is that you can even see that there's strings there you can see the quotation marks around each of those values um and again it's probably that like in the csv file i bet there was no quotation marks but because the question mark was also in there it just forced everything to be a string because it didn't know how to interpret the question mark as a number yes exactly um pierre says data cleaning is fun yes i agree right i don't mean to make fun of dating love to hear it um okay so okay so we've kind of answered our question um there was something that that python couldn't recognize as i'm assuming right this question mark means that that information wasn't available for that patient um and there's actually in python there's ways of indicating that something is missing um that like a cell of your data frame should be blank and we need to make sure that we tell python that so that it can categor so that we can change everything else um to be like a number if that's what it should be um okay so with that in mind what i'm gonna go ahead and do is um i'm gonna replace all of these question marks with something that python can recognize as missing um and i'm gonna do that by using the replace method so we've got heart dot replace um and then we're gonna replace i'm gonna just do this in the entire data set so that'll do both of these at once i'm going to replace this question mark with um this np dot nan so mp is just our like shorthand for the numpy library which is just a python library that's used for data science um and then nan stands for not a number um but it's just a one form of um missing data in python yeah i honestly brought something up which is there's a couple of different ways to do this another thing that we could do would be to just drop those rows entirely like removing them from the data set as if they already existed um i think let's walk through this way but then i don't know if you can talk about like the differences in the two of like because there's implications like if we if we remove a row then that's gonna affect the other columns like that's gonna affect the mean of other columns um yeah so actually i i would say um they're like a whole other field of data cleaning is like what to do with missing data um and so there's lots of things you can do you can delete the row you could try to impute missing data which means basically that you can try to like guess what that value should be in a way that doesn't affect the other data um so you can say like okay other if we look at this um if we look at this row of the data can we find other patients that look really similar to this person and what were their value here um so you could try to fill it in um with something that at least is not surprising um so basically there's like there there's a whole field devoted to that and i think that's a really good point i'm glad you brought it up um but yeah uh the other thing i'm just noticing so when i do this um it's just printing it out if i want to resave it i need to do this there's probably also like an inplace equals true parameter but i'm going to do this so so essentially this prints out the replace this data frame with the replace values but it doesn't change it in the actual thing that we're going to be using the actual data frame so i'm going to go ahead and do this um to actually save it and now um i'm just going to check really quickly this again because my memory is that actually python didn't change them so you were expecting now that we've removed the question marks that it would just auto change them all to numbers yeah um okay i need to then i don't remember actually the uh the syntax this is a good example um so it didn't change them automatically but we should be able to change them now um so so we want to change them to integers uh or to or to uh floats actually just uh i think i think ionis is right where you can use the as type yes um i think which one so ca we want to change to a number thal actually we want to change to eventually we probably want to change it to these category names so i'm just going to change ca for right now um thank you ionis uh as type and then i'm going to just say uh change it to int i think i don't think i need to say n64 i think that will just work but let's try it oops heart let's try in 64. sorry guys yeah and it has to be a strong invalid oh oh okay i know exactly what so um so because actually these got these got saved as values with decimal places um even though the decimal place is dot zero for all of them um we can't save them as integers because they have that precision or they have that decimal place so we need to actually save them as floats and we're going to resave that as the as that as that column and now this should work hard great so now we've changed that um it said object before now it says float um and so now we can interpret that column as a number yeah one thing to note here is in the chat i posted the documentation for the as type uh effect function i think uh sophie and i just like talked it out here and also looked at chat to say oh yeah the as type function will probably do the trick but uh i googled let's see what was my term data frame change column type and you know the very first school result was the ass type function and so that's like a good example of like hey we need to do this thing we don't know how or we don't remember how and uh you know that kind of stuff happening all the time yeah yeah my my first like programming language for statistical analysis was r so um so as i do more work in python um i feel like i often need to search for things um but i think the i may be the like side point i want to make here is that the the important thing is that you know that you need to change this to a different data type so in in any programming language if you understand that there's a data typing issue here then you'll be able to figure it out and google how to do like what's the exact syntax so this is a perfect example of why like this is great to know off the top of your head but this is like not the most important thing um for being able to go through this analysis like the more important thing is conceptually understanding that this is something you should check and this is something that you should um like fix if it's not right nice um okay so let's kind of go through i think there are some other ones that are that are interesting um i've seen time on these live streams just goes by so darn fast like i don't even know i i want to make sure that we get through at least a couple more um different examples and you can look through the final code that i posted um if you want to see kind of like a little bit more of what you can do um but let's pick a let's pick something fun um so i think one of the one of the things that is worth doing is for anything that's coded as a number but it's really a categorical variable um especially a categorical variable where there's no order um so these are just like different types of chest pain it's not like one type of chest pain is worse than the other um if if that was the case i would see more of a reasoning to maybe code something as one two three four where if it was like mild chest pain moderate chest pain severe chest pain very severe or something like that then maybe you could leave it coded as a number but since this seems to be unordered um i think you you definitely want to change this so that python can recognize what so that you and so that python can recognize that this is a categorical variable um and there's no like ordering or num numbering you shouldn't perform numerical operations on it um so let's go ahead and try to do that i'm gonna do that for the ca or sorry for the cp variable i'm gonna just copy this over down below so i can use it as we go um sophie i wonder can you increase the size of your uh ooh yes hopefully that works sorry guys that is something i definitely should have done no worries okay so i'm gonna just do this one really fast um okay so we've got uh heart dot cp dot replace um i'm going to i'm going to use a dictionary which again this is like python syntax that you don't have to know um right off the bat but instead of just replacing all the ones and then replacing all the twos and then the threes and then the four so i'm going to just pass all that information to python at once so i'm going to replace the value 1.0 with typical angina um while i'm typing this out are there any like questions maybe that yeah let me take a look we have a question of what is this uh yes i can i can give a brief summary as you're talking about this this is kind of a companion live stream to the new um master statistics with python uh uh skill path on codecademy uh this session in particular we're looking to how to um clean the data set the different types of variables that you can have so uh in particular the thing that we're doing here is that we have something that's encoded as a number but in reality the data is an unordered uh categorical data type and so we're changing that data type to to be that right now exactly um and i think this should work i just want to check one more thing so um cp was getting coded as one point z yeah so it had decimals everything had decimals okay run that um and now let's take a look again at um i'm actually now interested heart dot info did that change it yeah that automatically changed that's interesting so um so yeah so that's because you just changed numbers to strings right mmhmm yeah yeah so but in the other one when we changed strings to all the numbers well it was we removed the question marks but then we didn't say anything about all those other strings that were still sitting there okay fair um okay so yeah we've essentially replaced all these numbers with strings and now this is getting stored as an object and i'll just print out again if i do heart dot describe again um you'll see oops sorry uh included all you'll see that now we're getting different information about this variable so before we got like a mean and a standard deviation and a minimum and all this stuff now we're getting that the um the most there's four different categories the most common is asymptomatic and there's 144 people who are asymptomatic so that's great that already means that we can do we can do more with that variable we can make sense of it um cool let me think oh i see a question about in place equals true um so essentially i will demo this so if i remove this piece um and i run this code it's actually just gonna print out um that column so all that this does is it creates um it creates like a list of values that match up with that column um changing like all the ones to typical angina etc but it doesn't change it in the actual data that we have stored um and so there's two ways to kind of go about fixing that i could just like save it on top of that column so i could say like heart.cp equals heart.cp.replace so i'm saying like i want to take this column and i want to replace it with this column that we just created um or i can say in place equals true which just means that like i don't want you to print it out i actually want you to change the the data set that i have stored in this way um sometimes the reason not to do it in place is if you're like just experimenting with the data and you don't want to completely forget about the original data and like you know you still want to call this replace function but you want to store it in some different variable and leave the original data unchanged um in place i guess is like slightly riskier because when you do it the old data is replaced yeah you've now like wiped it wipe things clean i almost always actually that's a good point if i'm doing an analysis for real i almost always don't do it in place the first time um i usually just like print it out to kind of do a gut check to make sure that it looks like what i expect and then i'll go and i'll um actually change the data itself yeah and as always i mean i was just saying like oh it's more dangerous and as always there's really nothing dangerous right it's not like you couldn't get that data back the csv is still sitting on your file in your computer you could reload that data into another new variable and now all of that original data is back into python you can do whatever you want with it um so yeah i hesitate to say like oh this is dangerous because it's like you can't you can't screw up that badly right you can always reload the data from the very start and and start over yeah exactly um that's true um okay i'm trying to quickly think through what are the best ones to go over in this last little bit of time that we have um this i have two ideas so um one of the ones i think is is useful to look at is the uh is the slope column so this is a little bit of a stretch i'm going to say that i want i wanted in this live stream to at least have one example of an ordered category and i i'm not really sure if there is an ordered category in here um but i think slope is the closest to an ordered category um mostly because i did some research and i forget exactly which one was like good and which one was bad but basically i think good one i think one was good medium and bad in terms of like what you would expect for this test um and so based off of that i would say that there is some kind of ordering to this like it makes more sense to have like the upslope no slope down slope in that order versus like and especially if that means like good medium bad um versus for some of these other ones i don't see why it why it matters if something is in a particular order or not yeah i i think the most common ordered categorical variable or maybe you can correct me if i'm wrong about this but like any survey that's asking you to rate something from one to ten right that's ordered it's categorical because they're not letting you put in 5.56 right you only have 10 categories to pick from and one is worse than two which is worse than three and so on and so we're trying to yeah i agree it's a little bit of a stretch but that's what we're looking for where it's like these things go in some order and there's only categories yeah exactly um so for that purpose sometimes like i was saying before if you have an ordered category sometimes you want it represented in your data as both a number and um and a string like you want to know what the order of the categories is um but you also want to know what each of the categories means like in alex's example if it says like in a survey rate your agreement and it's like don't disagree or sorry disagree disagree strongly disagree disagree neutral agree strongly agree or whatever um if you're running an analysis you you might want to print out a plot where like you have those those levels of agreement in order because you want to understand like if someone agrees more with this then how are they different by some other factor or by based on some other attribute so you want to you want to have that information but you also want to know what it means um and in that case um there is a special data type that you can use in in python and there's a special data type you can use an r um i think a lot of these sort of statistics language focused libraries or languages have something like this where you can store data in both ways at once so i'm going to demo that really quickly we're running a little bit low on time so i'm going to actually just copy some code over and then we'll talk it through so the first thing i'm going to do is i'm just going to replace just like we did before i'm going to replace the numbers with um their definitions and i'm going to do it in place even though it's bold decisions right now um now is the time for bullying five minutes left in the last i know and then um and then i'm gonna also uh change this to a categorical data type so i'm gonna specifically tell python this is a categorical variable and then i'm gonna give it the three categories and i'm gonna say that this is ordered in this order so upsloping comes first flat comes next down sloping comes third um and i'm going to also i don't think i need to use in place equals true we'll automatically do that um oh actually because i'm just resaving it as that column that's why um i don't know why that like this bar appeared no i can't make it go away um okay so now i've saved this as this um this kind of dual variable type where i now have the the label so if i reprint um the first few rows of this data set um i'm gonna see that um that first slope now i've i've listed i see like down sloping flat flat down sloping up sloping so it's replaced it with these strings um but if i now say heart dot slope dot cat dot codes um it's going to print out the numerical equivalence so it's saying down sloping is um that was it's numbering these from zero upwards so upsloping is going to get switched to it or is going to get the value 0 flat is going to get the value 1 and down sloping gets the value two and so you'll see like downsloping got a two flat got a one that's why we have two one one then two and then zero was up sloping um and so this just enables us to now work with those numbers if we want um and it also signals to python for like plotting functions for example um if we wanted to make a bar plot i think it will now automatically like before it would order them alphabetically on the xaxis now it will order them um based off of these numbers if if we do the summary statistics now will it do both the category ones and the numeric ones i don't think so um also another thing to note is that for ordered categories like we still probably we still should not calculate the average of ordered categories so that's still like not something not something that you should report um and i think to that to that and it will not get reported but um we can try we're almost out of time um well let's see yeah so it's just printing the categorical variable ones cool no what do you think do you have do we have time for one more probably yeah i mean i can you know uh if you want to go if you want to go a little bit longer if you want to do another one uh i can't i was going to say i think uh this is also a good plug for the the course itself where you talk about like what can you do for with categorical variables what can you do with ordered stuff yes yeah i guess i'll skip the code but i'll just talk like conceptually really quickly um about one other concept that's useful um and so so this what i just showed with the cat.codes is um is a one form of categorical encoding um and this is something that happens a lot when you want to like put a predictive model on your data or something like that um where a lot of models that machine a machine learning specialist would try to fit on some data only can work with numerical data or they can only work with numbers they they don't know what to do or they they can't operate with um with strings and so a lot of times that means that you need to come up with some way to represent your categorical variables using numbers which you can do um and which also makes it i think easier to analyze your data if you're just doing like an exploratory data analysis um which is to say that sorry which is to say that uh there there's multiple ways of doing this and um depending on what your goal ultimate goal is you might do it in different ways um so here we we had a uh ordered category and we set this up so that we could easily translate that ordered category over to numbers another way that you could categorically encode a categorical variable is you could do something called one hot encoding which essentially means like breaking one categorical variable up into um separate columns where each column is just a one or a zero depending on if um if it was that category if it's in that category or not and so like just from a data analysis standpoint i think an example of when you might want to do this is well actually probably the best example when you might want to do this is the last column of the data set um which actually has it has values one two three four and zero where zero means that there is um no heart disease so no presence of heart disease and then um one through four means that there is heart disease um and so if you're trying to build a model to predict whether someone had heart disease or not and you don't care about the one two three and the four you might want to change that column so that you just represent um you instead you just have one column and it's just like heart disease or not um and then it's going to be equal to a one or true or whatever you want if there is heart disease and a zero otherwise right rather than like four different designations of heart disease which exactly which you might not necessarily care about yeah okay i'm gonna leave it there um there's like a whole exercise about this on the lesson on codecademy there's code in the code that uh i i posted so if you wanna play with it and you wanna see how that that looks you should go for it and explore on your own post questions um i like you can post in the comments on youtube even after the fact and i'll take a look at things um i love to hear your thoughts so um sophie do you want to show the course super briefly to just show like the lesson in particular that uh that aligns with this uh yes so i can also do it if you don't have a browser set let's see get to see my my setup on internet okay yeah so this is the master statistics with python uh path and this is within variable types this lesson on variable types is really the content that we just covered today um also the article as well has a little bit of it um here's the stuff on one hot encoding if you're interested in what you missed um another thing i'll say is i recognize some of the names on the chat uh as people who have submitted bug requests this or bug reports i feel like this is a weird plug to submit bug reports but i'm actually really grateful um like alex said this like this course is kind of my baby and um and i really want it to be good and if you're confused about something it probably means that somebody else is confused um and even if it's not just like even if it's you don't understand not that like something is really broken if something's really broken please tell me um but if you don't understand something you can also submit a report or ask in youtube chat or on our forums on codecademy like i really want to hear from you um and one of the weird things about this whole online education that like many of us are turning to especially in the time of this pandemic is that i don't know like i come from teaching in the classroom and you get this immediate feedback of how people are interacting with your content um and i really miss it that's why i love these live streams so much so um so if you want to provide that to me um cool anything you want to add alex no we'll be back again next week uh tuesdays at four if you want to catch us live um yeah other sophie do you want to do a 30 second plug of what we're doing next week sure yeah so next week i'm gonna pick a different data set because i feel like this data set is a lot um or it's like a little boring so um i'm gonna pick a different data set and we're gonna do some summary statistics and visualization so we're gonna we're gonna try to look at some of the variables and visualize them and um and summarize them with numbers cool