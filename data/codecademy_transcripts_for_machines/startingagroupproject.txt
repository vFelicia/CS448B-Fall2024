hi my name is Stephanie I'm a software developer based in Baltimore and in this video we're gonna go over what it takes to get a developer team started we'll also cover what typical development teams look like some tips that make them effective and some neat tools that you can use to make collaboration easier before you start assembling your team you should have an idea of what you want your project to accomplish from there you can figure out what skills you need in order to make this project happen do you need someone who can do the frontend development and another for backend or what's in full stack developer suffice and what about UI UX designers and people who can also do data analysis so now it's time to assemble your team if you're not sure where to start looking don't worry Coke ad amis got your back it can be a bit intimidating to reach out for the first time but remember everyone has been in your shoes at one point the developer community is supportive and inclusive and always ready to help coke adam ii has set up several spaces for you to connect with other programmers hop on a project or start your own there's the forums the Facebook group and the lifelong learner slack community for pro users the pro sock community has some extra resources and guidance for working on group projects from other people who've worked on them before links to all of these spaces are down below don't forget there are also local meetups once you've got a team going it's a good idea to set up a meeting to make sure everyone is on the same page here you can outline all the requirements that your project should be able to accomplish figure out what each person wants to accomplish and set team norms like what tech is each person used to working with and how much time can they commit things like that this part is really important because it aligns everyone's expectations with the team goals I've been on teams where we weren't clear enough with our expectations from the beginning and there ended up being a lot of unfinished work so some of the members had a shoulder on more of the work to make up for the missing gaps there is one time where we had one team member that could no longer make the time commitment but the show must go on right so we familiarize ourselves with the skills and contributions the member was making and filled in those gaps my experiences for this team ended up being really helpful in my later working in the industry because it's common to have team members jump to different projects your team may also want to consider setting brawls to be better organized particularly if you have a larger team with a more ambitious project as you're figuring out what roles each person will fulfill take a look at what each person can bring to the table in what they want to improve group projects are always a good learning opportunity and the best place to explore out of your comfort zone and try something new not everyone is going to be perfect in every role but you have your team members to rely on for feedback and suggestions for improvement you may also want to have someone to fill the team leader role to make sure that the team as a whole is organized and on track and if you have a more ambitious project like creating a mobile app for a lawn care service your team may also want to assign leads to own different parts of the project these leads will take ownership of a feature and make sure that it gets done this can be especially helpful if you're in a situation where the majority of your members are remote most enterprise teams follow a development methodology to organize their work it gives the team transparency so every member is kept up to date with the project's progress and contributing together as a team if you have a sizable team like more than two or three people I recommend following one of these methodologies it'll help move your projects progress along more quickly and help you learn how to work as part of a realworld dev team we've got lots of resources on the different structures you can follow down below it's up to your team in your dynamics to figure out which one will work best if you're not sure which one to choose and you want more structure try shooting for scrum first otherwise go for Kanban and then make modifications toward something that will work unfortunately we can't read each other's minds so that's why I'm making sure you're regularly communicating with your team is really important this can be anything from getting help on something you're stuck on to sharing a new find that you have for doing something there is one time where I hadn't updated my team that I was working on a new task and our tech lead hadn't updated our team that there was going to be a change in the task I had picked up so when I was done with a task I found out that all my work had to be scrapped because we were changing our approach one way to avoid all that is to schedule a recurring meeting for everyone to get together and also people can update their progress in the project it can be once a week or twice depending on availabilities during these meetings the team you can check in and identify the project's progress relative to the team's goals and if needed they can readjust the priorities and tasks assignments if you have a more casual project then you can be more informal with your team particularly if you don't really have a deadline in mind otherwise you may want to start with a more structure system of how your work is going to be created reviewed and accepted so this means setting priorities and deadlines on the tasks that your team has split out you can also take advantage of gits pull requests to review each other's work and gain insight into your teammates perspectives pull requests are probably where I've grown the most as a programmer because there's so many different ways to do something when I get feedback of my code the reviewer can highlight a really clever way I hadn't thought of before it also forces me to be more attentive to details and pushes me to find creative and optimal solutions take advantage of your collaborative environment to ask questions and also help your team members with errors you don't always have to know the right answer to something right off the bat but when there's a question that you can't answer it's a good opportunity for you to research the answer together working on a team is exciting especially with how much more you learn than if you were to develop on your own so it can be tempting to overpromised but don't let that discourage you just take it as a learning opportunity to get to know your own limits and pace better and next time you can make the right adjustments now that everyone is organized and ready to roll it's time to start working on the project I'll link any resources I mentioned down in the description there are a lot of great online tools that can help you share and collaborate on some quick code snippets you can use jsfiddle repli'd or cop√°n io just note that jsfiddle and code pen are really more if you're writing code for frontend web development they are low commitment since you don't even need an accountant to use any of these and they also do the hard work of setting up the environment with the basic dependencies you need so you can just start coding right away but for collaborating on a largescale project I highly recommend using get coke Adam II has a free course and some helpful videos on giving you started with git if you haven't used it before what's great about it is that it'll help your team with version control especially when you and your other teammates are working on the same files at the same time you can also use github or git lab to store all of your projects they'll help you build out your repertoire and you can share them with anyone even potential employers feel free to check out the link below on more info about git and github pretty much every team I've worked on uses good and I even use git lab in my work now you'll also want some kind of way to track your tasks and assign them to team members if you're just getting started asana and Trello are some solid options that will give you the functionality you need and more for communication slacking discord are really good options they make it really easy to share files code snippets and make video and voice calls the video calls also have screen sharing available you can also quickly look for previous messages or shared files from any given person at any given time including yourself and if you want to be super hardcore there are a lot of integrations you can insert it into your channels like asana and Google counters if you're in the post Lac community you can just get started with dmsr private channels but it's also pretty easy to just set up your own free workspace these are just some things to keep in mind as you're working on a team not every solution will work for every situation but starting a group project is a great way to build out your team skills good luck