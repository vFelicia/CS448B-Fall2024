all right hello to everyone how we all doing and hello in chat everyone welcome to our second live stream super excited to have people who are watching live back now and people who can be tuning in later to watch it um it's good to see people back in here and hello to everyone who's gonna be checking this out in the future so hope everyone's had a good week so far since we've been working on some new material hello world hello everyone coming in uh so let's go ahead and do a little bit of a preview from where we left off now if you uh either don't have the repo with you or just want to make sure that you're in the same spot i'm going to put a link in chat good evening robert uh this is a link that you can find out to the repo where you can go ahead and download kind of the existing project where we ended up last time and hi everyone coming in so and the link up in chat if you want to make sure that you're in the same spot i linked at live stream one which is kind of the brand for where i ended up last time and let me share my screen and showcase how to go ahead and take a look at that so um this one all right so over here the link that i gave out to take you to this page right here if you want to go ahead and get a repo to make sure you're in the same spot as we end up last time you can go ahead and click on this code button download a zip and then this will go ahead and download a zip file you can then extract that zip file and you'll end up with the exact same project that we ended up with last time so if you'd like to follow along and want to make sure you're in the same spot you can feel free to do that if you have your own project that you've been working on and want to see how you can add to that you can do that too uh and if you want to go ahead and just follow along and watch that's absolutely okay too i see questions as python project no this is going to be an ios project so we're going to be building out more of a quiz application that we started building out last time so you can see a little simulator right here with our application so kind of go over a little bit of where we ended up with last time and then talk about kind of the problem we ran into and then how we can start leveraging the new feature of the language to go ahead and fix that so uh go ahead and make sure that you've got either following along in the way that you want to be doing go ahead and get rid of this and then take a look at our project here so this is where we ended up with last time we have our quiz app you can see it's running in the simulator uh we learned how we can lay out different views and make them display in a phone we talked a little about the simulator and how it's a real phone and you can navigate around in it which is really fun uh we talked about adding some view modifiers uh this is all using swift and swift ui and then we showed how we could add some buttons to the bottom that we could go ahead and click on so we talked a lot about getting our project set up we talked about these views here but we didn't talk a lot about how we can make these buttons do something that was interesting so right now when we click on one of these buttons uh for what the first computer bug is it just goes ahead and prints that in our ide our integrated development environments like xcode in this case and that's great for us because we can know that our button is doing something it's not great for users of our application because nothing about this appears anywhere on the screen so where we ended off with last time is saying it's great that we got all these connected but be even better if we had a way that we could know if the answer was correct or not and give that feedback back to the learner or back to the user of our quiz here so they could do something with that so that's exactly what we're going to be doing in this session is we're going to be figuring out how can we add what's called states to our application and make our views change their layout depending on what the user is doing so without any further ado let's go ahead and get into it here taking a first look at our content view uh and yeah this will work in if you have an m1 that's great you can also use any other macbook or any other device where you can run xcode which is essentially just max but it will work just as well in an m1 as with kind of the traditional intel okay so inside our content view we want to figure out how to get some feedback back to the user about whether they got it right or not so one thing we know we're going to need is what what the correct answer is since that's not a concept we have stored anywhere in our application now we know that we need to have that correct answer stored and we also know that we're going to have multiple questions in our application as we keep developing it rather than just add a correct answer index to the top and then try to figure out later how we can change all these around when we get to other questions let's try to work thinking a little bit of the future and try to plan out for that and what we're going to do for that is say even though we have a question we have possible answers maybe we need a correct answer index there's one concept that really brings all those together and that's the idea of a question right questions have text they have possible answers and they have the correct answer index out of those possible answers so instead of just what's called hard coding these into our view we can make our view more powerful and reusable by abstracting these out to their own structure their own question and then to make a content view we can specify what kind of question we're we're asking so let's go ahead and start doing that abstraction what we're building out now is called a model which is different than a view model is kind of what powers the business logic of your application how it reasons and thinks about different entities the view is just what it displays so let's go ahead and build that out separately here so go ahead and click on new view and we're going to make a new swift file which is going to be our question when we click create we'll see that we have a new view added here right under our quiz app so we've got our content view and now we've got our questions this is going to be where we're going to keep track of what the questions are and what a question should have inside of it so we're defining a new structure which is called question we have lots more on structures in our content on academy about like define these and what these two so we've got our structure we then want to know what does it mean to have a question inside the context of our quiz application so questions should have question text in this case could be what was the first computer bug so we know that every question is going to need that questions also are going to have possible answers so all the different things we can be selecting from and we can see that those are going to be strings as well so we're going to have our possible answers which is going to be an array of strings and we'd really like to know what's the correct answer in a quiz question how can we give the right kind of feedback to users for using our application so we're going to have that correct answer index and so these are the things that it means to be a question a question should have all of these elements now another great thing that would be that we can do in our question is we can make it know what all the questions are that we're going to want to ask so we don't need to worry about building them again later so to do that we can add what's called a static property and this means that something true about questions in general rather than one specific question but for now we can just kind of keep in mind that this is a place where we could be storing our questions we'll call this all questions we'll go ahead and make this an array of all the questions that we'll want to ask in our application and now we can start bringing those from our content view into this question model here so we can go ahead then and pull out the question text that's the first computer bug and put that inside here we can have our question to question which has text possible answers and domain index here uh and does this save the format i'm not quite sure what spss is by having different views uh but yeah it's definitely true that adding different views uh on that your question is a good way to be separating out things and we'll see that later in this as well so with our question text we can ask what the first computer bug is we can then grab all the possible answers which we already have in this array right here so we can copy that in and then we have a correct answer index so we see we've got fly moth and beetle remember that moth was the first computer bug and if you're new to arrays array indexing starts at zero so you count zero one two three so we're looking at what's at index one for the correct answer index okay so now we have our question translated into our model here and while we're at it we can add a few more questions so that we can be previewing different aspects here i have a few i'm just going to copy and paste in but you can go ahead and work and add in your own questions that you'd like to as well so i'm just adding in a few more questions that we have in the same quiz app that we build asking what language ios developers use before swift saying uh what is it called when you use zeros and ones to store data and who invented the world wide web these are some of the questions that we'll have in our quiz app these are just string these are the strings you can put in note as you're following along you can feel free to add whatever questions you're interested in asking in your own application okay so now we have our question model built out and we can see all the questions that we're going to be asking their application back at the content view now that we have our question we can get rid of these hardcoded strings and instead power our view by just having a single question that way instead of these strings that we're reading from we'll go ahead and take this question it's going to be the question text to show what's in the middle here the possible answers will be the questions possible answers and then the answer button will have the text of the possible answers at the right index so we got to get rid of some stuff which is always great when you're refactoring you make things shorter and easier to read it's much more clear that this content view depends on the question now when we build this we'll see a couple error errors and that's because we depend on this question now we're not hard coding it in which means we need to give it to anyone who wants it which is going to be preview and also this view right here is going to want it so we can add in the question and tell it to just for right now get the first question that we have in this all questions array and we're going to come back and find a better way to be figuring out what question we're on let's just look at the first one for now we'll add it to this quiz app app which is not the best name for this but that's okay and then inside here we'll go ahead and add the same first question right here question dot all questions at zero let's go ahead and get our canvas back up because it's nice to be able to see what those previews look like bring up our canvas resume that update up automatic updating and let's let it build for a second to make sure we don't have any errors great now everything looks the same which is always good news when you've just done a refactor but something that's neat about this is because our question model has multiple different questions we can be asking we can change the index that we're previewing and it shows us the next question so we can look at all of the different questions that we have by just previewing what it's going to look like and so we can see some of the power and reusability that we've added to our content view because now by just changing around one number i can make it display something totally different from what it was showing before so these are great for previewing right now and in our next session we're going to be taking a look at how can we be advancing questions to be starting at the first question and then moving through so that we can be seeing each of these questions for now it's a good uh indication that our refactor worked well and now we have the single question model as power in our application okay so that was a great bit of refactoring we've added in this model so that we don't have to depend on these hardcoded things in our view but we didn't really solve our main problem yet which is how do we make it so that clicking on a button changes what we're looking at so we know if we got something right if not so to answer that we're going to go ahead and first add the concept of a correct answer index or a guest index rather we need to know what they guessed so right now this is just a static view you can click on buttons and just print some text we need to be tracking some information and the information that we need to be tracking is did the user make a guess and if so what was the guess that they made which index did they select or click on we're going to represent that both of those two questions of did they make a guess at all and if so what index did they guess in a single variable by using a great swift type called an optional so we're going to name this property guest index which is what guest did they make and the type of this we're going to give is what's called an inch question mark and an inch question mark is kind of like a regular end in that it's a number but the question mark means maybe it's not a number at all maybe it's nil because they didn't guess anything so optionals are a great structure to be using when you have questions that might not have good answers to them like what index did the user guess it's like well they haven't guessed any index so the answer is nil there's no it's not that they guessed index zero that's a real guess they could make it's not that i guess index negative one that's not even inside this it's that they didn't make a guess at all so having a guest index be equal to nil and b of type optional integer lets us answer both of those questions at once what index did they guess if they guessed it and if they didn't guess it then we'd just say that there's nil there's nothing that they've guessed at all okay so now we have the concept of whether or not they've made some kind of guess now that we can have for this property inside of our view we can go ahead and say uh figure out a way to be giving colors back to people here uh yeah in a minute if if you just copy this exactly you'll all end up with the same application so you're free to go ahead and make whatever edits uh you like to it as you're building it what i'm building is more of a template for something you can be building off of to make your own kind of quiz application as well so let's go ahead and figure out how we can use this index first we have to decide how should we show people if they got the guests right or not now what we do for codecademy and i think a good way of showing uh a user whether or not they've gotten it or not is changing the color of the button that they've guessed on so we're going to want to make it so that when you click on a button if they guess right to turn green as i guess wrong it turns red to do that we're going to need a way to be generating the right color for the button at each index so we're going to build a little method here which is going to be answering that question based on where the button is what color should it be so we're going to call this something like color or button at index and this will go and give us the color that we should be getting back again i think this is a might be the first function we've seen through this we have a lot more content on functions in our uh skill path and in our learn swift course as well so if you want to go deeper into them definitely take a look there the clgr of what functions are doing here is they take inputs which in this case is the index what is uh which button index zero one two or three do we get in and they give an output what color should i be given the index that i'm at and that's all this function is showing in this case this at keyword just means when we call it we can just use this called an argument label just kind of a neat swift thing so let's answer that question based on the index of the button and this is the button index here uh and we can make explicit i'm gonna go ahead and call this button index based on the index of the button what color should it be now if the guest index is nil i'd say that they've made no guess at all what color should the button be now there's a little bit of a chat delay here so i'm going to wait a little bit to see if anyone has ideas for that chat the question being uh if the guest index is nil what color should the buttons be anyone has any ideas for what that might look like i've got my own ideas but you never know so if we don't have any uh guest index at all the guest index is nil the user hasn't made a guess then what color do we want yeah stay blue yeah exactly so it should stay the same for sure now blue is the border right and we could be changing the border that's totally right uh if the if we want to be changing the border color then we would want it to just stay blue i might actually want to change the middle of it so that like the full thing is highlighted in word says it but yeah it should definitely stay the same if they haven't guessed anything yet uh and i'm on you're definitely right once it gets wrong we'll want to be read but they haven't guessed at all then we should just keep it like this which is what it looks like right here exactly now in swift uh we can use what's called a guard statement to check to see if there is a guest index so we can see sorry about guest index equals guest index so what we're doing here is we're saying hey if they have actually guessed something then we can keep going otherwise return clear which is basically stay the same as what you were before just match whatever the background is doing is clear here great so now we've we know what to be doing if we have no guess at all it's just stay clear have the background be the same now if they click on let's say fly at index 0 we also don't want whatever is happening here to change right so if they click on fly nothing about v should save them it should also be clear so if they have uh they haven't guessed anything or the thing that they guessed isn't the button index then we want it to be clear so for the guest index uh is equal to in which case the button index now guard statements work a little bit weird if you're used to ruby it's called like an unless but the way to read this is unless there's a guest index and unless the guest index is the same as the button index then stay the same as the background color it's a lot of like double negatives to play with but that's kind of how it works in terms of parsing it out so make sure that they've guessed something and make sure that the thing that they've guessed is the same as the the index that they've guessed is the index i'm looking at right now to figure out what color should be and if neither of those things is true then go ahead and just make it the same as the background so that's getting our kind of base states out so if we just leave it as is right now and call this in the appropriate spot then we're just going to be using the background color all the time once we're down here on line 44 i'll make this a little bit bigger once we're here on line 44 then we can say we know that they've made a guess and we know that the guess they made is the same one as the button that we're trying to figure out what color it is so now we're in a position to be trying to figure out what that background color should be so if the guest index that we've looked at here is the same as the correct answer index for our original question then we want to go ahead and have it show up as green because it's correct and if it's not a correct guess then we want to have it show up as read so there's a lot going on in this method so let's talk it over one more time and then try to figure out how we can go ahead and use it in our application so we're saying we have a function that's saying what color should the button at each index be we're going to go through each button one at a time and it's going to ask this method what color should i be that's each button index going in this method answers back hey if the user didn't guess anything you're definitely clear and it also says if you're not the one that the user clicked on you're definitely clear if it says nah the user did click on me and they've guessed something then we get to keep going down and say okay well uh are you the correct answer button that they've clicked on and if the answer is yes they've clicked on me and on the right thing they should have clicked on me then we give back green otherwise we get back red okay did a lot of work writing that method which is great because it's going to power a lot of the logic here now when we play no colors are changing yet and that's because we haven't done anything with this method we've just written it here uh so what we can do is we can go ahead and start by taking the answer button and giving it a color at each of these indices here so we can say the color the background color is going to be the color for button at the index that we're looking at right now we saw it kind of went around for a second here but it stays the same and if we click on anything nothing changes but notice if we change this clear here to something like say uh red now we know that they're connected to each other it's saying oh if no one clicks on me then i should just turn red or turn blue or turn whatever other color we like here so they're definitely connected i'm still not doing anything and that's because we haven't told the button to do anything when they click on it we have to do the last bit of hooking it up so that those are connected and to the question in chat i think we're going to stick with these times for now but these are all recorded on youtube as well so you can feel free to watch the recordings of the line of the live streams from the youtube channel yep uh okay so we have the colors hooked up we now just need to go ahead and make sure that when you click on a button something happens now right now we're clicking you know we're printing out the thing that they selected which is great but doesn't give any information back what we'd really love to do is make it so that when the user clicked on a button this guest index got updated to the index that they guess on now how can we do that we abstracted our answer button so our answer button is isolated this whole separate structure does have an doesn't have any idea about this guest index fortunately we can use a little bit of the same pattern that regular buttons use by making a button take in a thing that it's supposed to be doing and then run that code later so we see when we define this button here we could just pass in something we wanted it to do and it just went ahead and did that we can add that same hack to our button here give it some on click method and then give it a type which it looks real weird which i'll explain about in a second and then when we click on the button we'll just go ahead and run whatever code someone passed in and up here we'll go ahead and pass in the code to do something and let's say let's just put that print statement out here new print location just to show that we've moved around where that's happening okay great so that builds and while this runs let's take a look at what we did here so we added in and so we can see that this new print statement is working as we expected it to so as we're looking at the answer button here we can see that it takes in this on click thing which has this really weird type so it's like open close parenthesis and arrow and void what this means is our on is our answer button takes in something to do some code to execute just like a regular button does so we're basically just passing on this command onwards down to the actual button here for now something to worry about for these the bigger concept associated with this is called the closure these are in our learn intermediate swiss course we talk a lot more about closures but for now uh what to get out of them is it's a way of passing one of these commands down a couple levels so that we can have all the context when we need as we're writing this line of code here okay so we have shown that we can be executing code from here which is great because we've got the guest index here we know the index they've guessed because we can be injecting it into the button so we can go ahead and update the guest index be the index few have we done it does this work no so close okay uh why does this not work well swift's ui is a special kind of framework and we've shown that by just making a small change to this uh where was it the color that we were looking at here all background would just change and that's because this is a what's called a declarative framework we just go ahead and say what we want our views to look like based on the state of our application and swift ui obligingly fills in the rest and goes and updates everything now these properties here it kind of takes as givens it thinks that question should just be the question it shouldn't change when we have a guest index it just says that's a guest index that shouldn't change and that's what it's hinting at right here where it says self is immutable it says we can't change self we're not supposed to change it but we want to change it we want our view to look different because swiss ui is a declarative framework it cares a lot about how we're changing things so we have to be really explicit with it about what we're expecting to change we want to tell it hey this guest index is going to change as the user interacts with this view and as it changes you should go ahead and update all of your views because all of them might depend on this guest index right as this guest index changes for example our buttons might have different background colors the way that we can mark that is by using the special at state keyword that makes our error go away and indicates that this is a special property that our view has that as it changes everything else might change as well in our view and switch i should start back from the top and rego through all of these to figure out what's different now that the state has updated that makes this error go away and then when we rerun this resume this here we can see that it looks the same preview is happening but now when we click on something it shows up as green so that's a common error that you'll get as you're working with properties you might want to change is if you want to change something in a view that the rest of your application might depend on you have to mark it with that at state rider to show that things might change around and it has to redraw itself as it's sometimes called to reflect those changes now let's do a little bit of cleanup here while we're at it we notice that we can go ahead and click on the button we got the background color changing but we can still click on other buttons they're all the right color but you still only get to guess once in a quiz right you shouldn't get to go back to the same question you already answered and just click on all the things until you get to the right answer might be a little bit messy so what we can do to fix that is disable the button once they've made a guess buttons have a special property called disabled and we can change this to be whether or not the guest index is not mental so we should disable this if the guest index isn't know if there's a real value that they've guessed then it will be disabled and so when we we rerun this here now you can see all the buttons gray out a bit i'll make this bit bigger at least so you can see all the buttons gray out and clicking on them doesn't actually accomplish anything okay so that was nice and we can see that that's using that same state property here so that's why it's really important for the compiler what's actually xcode is it's thinking about things to know what state so that it can recalculate whether or not the button is disabled whenever the guest index changes one way to think about it is as this changes there's a bunch of stuff that depends on it and it just figures out the new values for those okay so we've gone through we've added some state to our view which is great the two things we're going to do left here is we're going to do a little bit of setup for our next session to figure out well how can we start presenting the user interface for other questions and then we're going to take a little of a side track and talk more about stateful views in swift ui more broadly and other ways you can go ahead and add them so let's go ahead first and then figure out how once we click on something we're not just stuck but something new will happen on the screen that users can interact with to get to the next question we're going to represent that with like a little bar that's going to come up from the bottom that's going to just ask for the next question that looks like another view so we're going to build a new view for it the last time we built a new view we just did it here let's actually do this one by building a new view entirely using our files up over in this place here to get started with that you can see how this says content view it says question let's reorganize this a bit we might have multiple models in our application so we can go and put this in a directory or a folder as new group from selection and call this models this then represents all of the models that our application might have content view is a view and we're going to want to have multiple views in most applications so we can name this views so we have our models which power kind of the information that our application works with and then we've got our views to display that information to the users of our applications so this bottom bar thing it's not like business logic it's some kind of view that we're presenting information to with so we want to go ahead and add a new view up here to add a new file on a specific place we can either just use this menu here or we can go and right click on this and then you can go ahead and then click on new file right here inside our view so we're going to build a new swift ui view we're going to call this bottom text it's going to be the thing that pops up as we're done with answering a question it's called this bottom text and we get this default interface same as before for our content view when we resume we should see the basic starting configuration that we have now we want this to look like some kind of you know just bar got some text maybe we would like to center that that could be nice so what we're going to do is take this text and put it inside of an h stack with a couple spacers and so we can remember some of the different ways we could do that we can of course do that just in the editor we can also do that by using this object library here grabbing some spacers and then putting them to the side of this here so that we can center it so we can grab a spacer there grab a spacer here and put that to that side here and we can see our text gets to be centered which is great can add a couple attributes here looking on our text maybe we want to give this thing some padding uh maybe we want to go and make it bold so we can go and look at the font let's give it a body font make it bold we can go ahead and give it some padding all around and then that is essentially what our text is going to look like just kind of a nice little centered bit of text the last thing we can do is we can just go ahead and give it a background we'll do this in the editor here give it a background and let's make it blue looks nice but it kind of blocks the text a little bit so let's use the same trick we saw before and just make the opacity a little bit lighter so call it color dot uh blue and give it some opacity that's a bit lower great and then like we saw before you can uh what's that called the preferred color scheme dark just to kind of get to see what it looks like with different user configurations and you can see that because we changed the opacity to be lower this looks fine even in dark mode so it's always good to make sure that you're going to work with the different settings that people have here great so we have gone and built our little bit of bottom text here that we're going to showcase uh great question uh i'm that's asking a great question of hang on a second this is saying hello world that doesn't seem like it should be the text that we have and that's exactly right so that's gonna be the last step we're gonna have here is we don't want this to say hello world all the time right and in fact we could make this say something like next question but maybe we're going to use this in a lot of different places maybe at the beginning of our application we want there to be a bottom bar that says let's get started or something like that so let's not restrict it to one bit of text let's let people using it decide what they want the text to be and then just display that text right here as an excellent point is why restricted at all to like certainly why have it say hello world and then why restricted at all we can just go ahead and have the text be anything that people want to be putting in so this is test text now our view is flexible enough to be putting in any text that uh whatever callers are asking for okay so now we can go ahead and add that bottom text to our content view so here we can go ahead and write at the bottom we can go ahead and add our content what is it called our bottom text and we can have it say next our next question okay well this is good but it's not great right now because this is always there and we're not adding logic for it yet but people shouldn't get to see the next question when they haven't answered the first one they shouldn't get to see a little bar telling them to go next they should need to wait and answer something and then have disappear so how can we fix that well we could try adding this disabled kind of elements but an easier way to do that is by using a conditional if you've looked at our kind of conditionals uh and conditional logic force at swift you might have seen that in swift if you've seen that in other languages it's a very common framework you can use an if statement to make views appear if certain conditions are true so we can say if the guest index isn't nil then show the bottom text and if it's not then don't show anything then we can go ahead and when we run this here we can see that it's first shows nothing as we click on something ben we got the bottom text appearing because now the guess index isn't no it's marked a state so it knows that all of our views might change and be laid out differently as the state changes so a great tool you can be using is a state marker with different properties you're interested in gives you a lot of power here as well uh question is swiss faster using c that's a great question and a lot of it depends on what you mean by faster uh running swift code is usually slower than running c code c is much lower down as a language it's much closer to kind of the you know binary and assembly and the real nuts and bolts of how programming works so it has a faster way to give instructions to it but it's a lot faster to write swift code than c code because there's a lot of powerful abstractions that you get access to that make it a lot easier to reason about it uh if you really want to go deep into it aaron you can also build ios applications using objectivec which was apple's old framework i think that's actually one of our questions is that our uh yes what language did ios developers use before swift is actually objective c as the language there and you can write c in objective c and it's uh can let you do some very powerful fast things but it's also very cumbersome to keep track of so lots of fun detail to get into there for sure uh okay so we've gone and now our application works we can show we have a stateful view our colors change as we start editing our application or rather as we start making guesses and this next bar can appear let's do one last bit of refactoring and then we'll take a look at how we can build out some more stateful prop some more stateful views and some more powerful things we can do with swift ui this is still called content view which is fine but it's not a great name for what this is here it would be great if this could just be called game view so that it was more clear what purpose it was solving now if we just write game view there's a bunch of places that that's going to give a problem because this preview doesn't know how to change it and this text is still wrong and our main application doesn't have a content view anymore so it's going to complain this is a fantastic tool that you get in swift which are using xcode which is if you right click on the name of a structure click on refactor and then mouse over to rename it will think for a second and tell you all the places in your whole application you use it type in whatever name you want and it goes and updates the name of the file the name of the view and every place it's called right here so that's a great trick that you can use if you are dissatisfied with the decision that you came to when you named something you can go ahead and change that okay so we have gotten the gist of where our app is gonna get to here we're gonna take a little bit of a segue here and build out some controls that maybe aren't the most useful for this particular quiz application but are great tools to be using in other applications that you build out yeah and i'm not uh the there's a great question how do you actually move to the next question uh the preview of that is we have models which dictate what the questions are we have views which dictate what should be shown and what we're going to go to cover in the next session is a concept of a view model which mediates between models and views so and again this is all built out in the could coming track is going to preview there but the basic idea is we're going to build out a game model which knows what question we should be at and where it's going to be responsible for powering our application so i'll leave you a little on a little bit of a cliffhanger for that as i previews a little bit more you can do a state because it's a little bit of a larger topic and i want to make sure that i can give it its to do merit as something that's interesting but that's how you can kind of preview that so let's go ahead and work a little bit more with state and just see some more controls we can add so let's leave on there for a quiz and say all right let's say we want to add a little controls view that had some controls that we could be using for a quiz uh i'm going to show you how you can build a template for that and then you can build in whatever controls you'd like uh and then this as a kind of leadin for how to work with flexible uh controls in swift ui to get started with that we're going to want to have another view we can display right now our application is a single view just shows a game view we're going to want to start by adding a tab view which is a very common structure where there's a couple things at the bottom if you go open gmail or yelp or facebook tech talk or whatever there's probably a bar at the bottom and there's multiple things you can tap on it's very easy to build that kind of deal in swift so let's take a look at how to do so it's a new view so let's go ahead and add a new file which is going to be a swift ui view which is going to be called our main tab view our main tab view is going to be the special swift type called a tab view which just says uh nest all of these views inside me and bring up that little bar at the bottom so people can switch between them then our tab view is going to have inside of it our game view which takes a question which we'll just go ahead and default to our first question for now then we just have to mark that this game view is a tab item which means it gets its own tab at the bottom and it needs a label which just takes in its name and takes in an image about what you wanted to what you want what symbol you want associated with it if we take a look at our preview here you can see that it's exactly the same except we have this game at the bottom that's our label this system image then we can choose from what's called any of sf symbols it's a separate application that you can go ahead and download but sf symbols has all the kind of stock symbols that you'd expect to see in a regular uh ios application let's go ahead and pick one of these because we have a game that we're building here so let's go ahead and use the game controller you just go ahead and put the string right in here and then you can just see it updating we can make this whatever we wanted we can make this uh a person we could make it a sunrise nice to make it a anything that we wanted we could go ahead and put in here let's go ahead and change it back to that game controller great while we're at it you can see that this is totally flush against the bottom which isn't fantastic so let's just add a little bit of padding there and we can do that by just taking uh this whole vstack and then just add a little bit of padding to it and that should do totally fine it's padding bottom so just pad a little bit to the bottom and then we look at our view here and resume we can see that just gave a little bit of breathing right here so having these canvas previews is a really easy and compelling way to look at uh kind of how things are changing what's different okay the last thing we'll do is we want our application to start on the tab view so in our quiz app right here instead of starting on a game view let's start in the main tab view now that means when we build it in the simulator it's going to know the right place to start as well and this is what people will see on their phone great so now we're all set up to have another view where we can start messing around with some other staple properties in swift ui so let's go ahead and add another view that we're going to call controls view controls view right here and then let's go and tab view so that we can see something when it opens up we'll have a controls view this will be a tab item it's going to take that label we're going to call it controls we're going to give it a system image of let's say gear it's a good controlling kind of thing and as this updates now we can see this just pops up which is great and when we run this order in our simulator it just switches back and forth between these again so if you like super flexible framework uh very easy to get started and work with once you kind of learn a couple basic uh views that you can go and combine unless you build some things that look just like ios applications very quickly so i'm i i'm a big fan of it as a framework i think it's a great place to get started when you're trying to build your own applications so let's go ahead and build out this controls a little bit here so that we have uh can see a little bit more about what these stateful properties look like and it's do i okay okay these controls aren't really going to connect to our game very well think of this as more of a thought exercise template and how can you use controls to do something in an application and how can we use more stateful properties to be powering our application so let's go ahead and start building what this view looks like here go ahead and make a v stack uh we'll have some text at the top just letting people know that it's got controls we saw we could do this using the attributes editor and the object library you can also just type in the editor once you're more familiar uh yeah they they the little icons at the bottom are just there to control which view you're looking at so in the main tab view we can navigate between different things so if you're using like facebook maybe you've got a you know your profile is one of these tabs at the bottom so that's what we're going to be using it for here it's just a little kind of forms window just to show like settings we could be adding to an application so let's say we've got some controls we can go ahead and give this a font to make it a little bit bigger give this let's say a large title add some space put that up at the top give a little welcome message here to say let's say welcome name it's the person that we might want to be welcoming and then actually so that space should be there yeah let's give that a little padding the spacer a little down there okay okay so we've got our controls we can welcome people into the controls it's maybe something that they can reconfigure uh and then just to mess around with the time we have left and kind of show some things you can be doing let's just make a bunch of shapes up here and control how many shapes that we have uh so that we can kind of showcase a little bit about how these controls work exactly exactly so it's like i'm i'm just kind of showing how this template works but uh later you can try to figure out things like changing font size or changing the sound or turning on animations all that kind of stuff that you might have in a game it's exactly the right kind of use case uh so let's go ahead and display a bunch of circles just to kind of show something that we could be changing here so we're going to have one another of these four inches be displaying let's say five shapes and let's just display five circles right here meet so we have those in our h stack uh and we have our kind of controls up here so what does this do right now doesn't do anything just has a bunch of shapes has a name right up here so let's let's figure out how we can control what this text reads like at least inside this view instead of saying in just the string name be great if it had they could enter in their own name and then this would update to reflect later on and either in other sessions here or in other skill paths that we cover in codecademy we can look at how to translate information on one view and pass around to other views but for now let's just look at how we can mess around with this view let's have some name property which let's just say is called user and let's go ahead and have this text refer to the user name up here so this should update and just say hello user instead of hello name or welcome user now let's give our users a chance to change this around so that they can put their own name there we can do that using a form which is just a swift ui way to build some controls you want to be adding that should be inside the vstack and inside this form we can add a text input or text field excuse me which takes in like a placeholder screen of like what it needs what it should read like when they haven't entered anything and then something called a binding which is interesting we haven't seen that concept yet let's start with the easy one what should it read when there's nothing there apple loves doing this they have johnny appleseed everywhere in their demos so you can just copy that just some kind of default name and for the text it wants a binding to a string bindings are really interesting concepts what they mean is that anything that gets entered into this text field will change one of these variables around in real time to have a binding to something it needs to be marked as state because as it changes the rest of our view might change as well so we can make this a binding to name by using this weird dollar sign syntax which gives us a binding to the setup right here now what we can see is that we have to do preview loading okay great so we've got this user down here and when we run this we can see as we edit in real time any text that depends on this goes and updates which is really cool we can also see that when it's blank this says johnny appleseed which is the string that we put in right here at the beginning and we can put in our own name or anything you like and it will go ahead and display that so for now this doesn't do a lot in the context of our application but it's a great demonstration of what you can be doing with these kinds of views here i think it was time to showcase one other cool thing you can be doing with controls and that's changing around numbers so we saw this change as text you can also have controls that change numbers right now we have five circles let's say we wanted more or less how can we do that we can make another property which is going to keep track of how many shapes we have and instead of our for each just looking at five we can tell it to go to the number of shapes we have one slightly strange note is four eaches get a little bit confused when numbers change under them so you have to add this little id property to say no don't worry just keep track of the things that i give you and don't worry if the number changes again we go much more into this in the skill path but it's a very common error you'll get as 4hs have numbers that change you just need to add this reminder that it should keep track of the different elements so now we are going up to the shape count let's go ahead and make sure that this still shows us the five circles it does great now we can add another control that lets us change how many circles there are uh another good control is called a stepper that's a thing that makes a little plus and minus button that you can use to modify uh different bits of text here so we can go ahead and make a stepper that has let's say a text of number of shapes and then just displays the shape count the value reflects uh what it should be tracking and linked to yeah if he has a gun uh and then we can go ahead and say what the range is of how far it should be going so let's just say it goes from one to eight okay now we have a text field which reflects our user which we can go ahead and update and then we have our number of shapes we can control by clicking on the minus here or the plus here so again right now this doesn't do much for the rest of our game application but it's a great uh showcase of some things simple things you can do with forms that are really powerful with very little code that you're writing which is pretty neat so as we're adding more shapes we can see up gets up to eight and that's as many shapes as we said that we were okay with the getting before capped out we can go back down to one and we can't get down to zero because we said that step the stepper had to have a minimum of one and we can set that up here as well uh you can have the shapes as yeah you could you could absolutely do that that is a fun idea let's see if we can do that i can the number of shapes see the count of how many we have here uh yes but then this stepper wouldn't do anything but we can do it let's let's go ahead and take a look at what that looks like so let's say that we're going to go to uh name dot count instead and then get rid of this stepper and this is just messing around but this is exactly the right kind of intuitions to have about how the language how how ui works now as we change the number of letters here it displays an extra circle for each of the letters in the name which is super cool as we see getting smaller and smaller as we keep adding more and more letters in and if we get down to zero then it just goes away entirely so just a cool thing that you can be doing uh that might be a little confusing to a user if they didn't know that was gonna happen from it but it's a fantastic way to demonstrate of how you can connect different properties to each other and how once you have one of these stateful properties as we've been talking about the session the views can redraw themselves and update in any kind of way that you like uh based on this view changing yeah this is pretty cool so i'm gonna go ahead and revert this back here but you can absolutely change that on your own and mess around with it to make it work in whichever way you'd like to okay so let's do a little bit of recap the last couple minutes we have uh if you have questions you'd like to ask about anything we've covered here feel free to start getting into the chat uh and i might be able to have it take a couple of minutes where we can answer some of those but to recap what we did for the first session is we started at our game view and i'm gonna cheat a little bit and because i've been using uh github for some source control i can show all the things we did so we used to have this question right up here that was hard coded and these possible answers that were hardcoded we replaced those with a single question we then went and added a guest index property that was totally new to represent the guest index we took all these things that used to refer to these hardcoded strings inside of our structure and we changed them to refer to this question that we built out in our question model then we use this guest index property by making this new method color for button which uh instead of just dictating uh well we didn't have anything before instead of everything being clear our buttons were now smart enough to know how to ask the right question so that they get what color they were depending on whether they were the button at the correct index and whether the user had guests had made a guess at all and then we could get to see if it should be clear green or red we then added that as a property to each of the answer buttons and then went and updated the guest index once the user tapped on a button by changing our print statements to be this new method that the user could pass in when they were building a button for the first time lastly in this view we added in this disabled state so that once they tapped on something none of the other buttons were operational and we added this bottom text that showed up that just said next uh but this is nice centered blue highlighted kind of thing once the guest index wasn't no from there our apps kind of poised and ready to go to be set up for our session next week where we start to talk about how do we present other questions using best architectural practices which will be the mvvm uh architecture which we'll get into then uh and we took a little bit of a segway into looking at some more controls in swift ui to try to figure out uh how can we just make more stateful properties and have our views depend on them in interesting ways that we can control directly and we saw we can do that by using a form and some common inputs like a text field and a stepper and then we connected those by using a tab view so that we could have a single place our application would start uh so that a single place our application would start so that as it began people would know uh so people can see and choose between the controls and the original game we had so we've seen a lot of new stuff in the session today if you look at the link that i'll go ahead and give here as well it's a slightly different version that we built out because as you're building things live you often make some slight adjustments but if you take a look at the link here this is more or less the application that we built out with a couple extra features that we didn't quite get time for so if you'd like to review any of the code from here take a look at it feel free to go ahead onto that link there and then next week we'll be taking a look as you mentioned at how to make other questions show up so that when we click on this next we get to see another question show up and that'll be into building view models so that we can be connecting a game model and our views so see everyone there next week uh if you have any other questions and feel free to let you know in chat here or you can always go into our discord or to ask anything on our forums at discuss codeacademy.com so it has been a pleasure uh getting to work through some more of our quiz application with everyone here uh thanks everyone who's tuned in for this time and then excited to see people back next week as we continue building this application out so thanks to all uh then we'll go ahead and end the stream here