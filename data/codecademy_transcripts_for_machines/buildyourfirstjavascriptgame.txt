you know if you see it hey everybody can everyone see me and hear me we're good awesome okay hello everyone welcome to another code Kadim ii livestream I'm super excited to be here my name is Patrick I've been with code Kadim II for about 7 months now and before that I was teaching at a web development boot camp for the past two years super excited about today's livestream se topic near and dear to my heart gaming video games a lot of people get into programming for video games or vice versa so I'm really excited to show all of you how you can make a simple web browser game and hopefully we can build it in a way that you can expand and add your own elements and really make it your own so thanks Mariel to get started I'm just going to show you what we're going to build at the very end are sort of an MVP of what we're trying to accomplish in this about half hour 45 minutes I've created a game called square adventure and the rules of square adventure are relatively simple I am a red pixel character you can see me moving around there and I want to move into the safe zone and as soon as I move into the safe zone it pops over to another area in the map and I can see at the bottom here I'm keeping score of how I've done so far and that is the game we are going to be building cool and I'm controlling my pixel with the keyboard I'm using the W a s and D keys cool awesome all right well I'm going to reset to a blank HTML document and we'll get started pay no attention to the man curtain cool so just to orient ourselves with what we have on the screen let's clear that out cool I've got my index.html document so this is a your standard HTML document I have my doctype declaration my HTML tag the head tag we're not really doing much with that and I have my body tag here and we have a main tag so starting with pretty much nothing just a very very empty skeleton of HTML this is going to be our browser component so anything we add into our HTML document will show up here if it's an HTML element and then on the far right of my screen I have my console open you can open this if you're using Chrome with command option I I believe you can also double click and hit inspect to pop it up so what this is going to give me is all the power of JavaScript at my fingertips I can quickly type out some codes so I can do some math here 5 plus 12 is excuse me 5 plus 7 is 12 I can do something called a console log and that's my way of like printing to the screen so I can say hey cool and what I'm gonna use this for is when I want to maybe prototype something out or test out an idea I can pop over here and type out some code and see how it runs so I can clear this if it gets too cluttered with command K so if I hold command and K on a Mac that will clear it out wonderful all right so now we're oriented today's stream is going to be based largely around an HTML element called canvas the canvas element so I'm going to add that in between our main tag nothing is going to go inside of it we typically don't put things inside of canvas but we are going to be able to paint a whole lot of graphics inside of it I'm also going to add an h1 tag to name our game does anyone have any ideas of what they want to call our game I'll look in the chat for a suggestion I use square adventure but I'm getting kind of tired of that so anything I'll call it Metal Gear Square in honor of one of that classic one those classic games I'm also gonna make a section tag and this is where I'm gonna keep my score and I'm gonna make a span tag as well super cool game I see Mario so I'll add that in there as well great and so just to show the other way that we're going to evaluate code here I'm gonna press this Run button at the bottom left and we can see some changes in our browser components so there's gonna be two different ways I'm executing code either in this console on the right or running my index.html document on the left so we can see the changes we made to the HTML showed up we have Metal Gear Square Mario and we have our score we can also see that there's a little bit of space between these two and that's kind of giving us a clue to this canvas element to be able to see the canvas element a little more clearly because we're gonna be working with it a lot I'm going to add inside of my body a style tag again this is just HTML but inside of the style tag I can write CSS which is the sort of design language of the web and it will be evaluated and applied to the HTML in the document so I'm just doing this to give myself a little bit more of an outline of the canvas that I'm working with so I'll give it a border of one pixel that's gonna be solid black and again I'm gonna click the Run button to run the code and now I can see a nice little outline of the canvas that I'm going to be working with very cool and for my next step the majority of the work that I'm gonna be doing from now onward is going to be in JavaScript and again just like with a style tag I'm gonna make a script tag again this is HTML but anything inside of the script tag will be evaluated as JavaScript so just to test out that that is working I'll put in a console log of hello there console log if you're not familiar as a way for me to print something to this console over here so this is just sort of a sanity check for me to see whether this is being loaded properly so I'll click run and sure enough I see the hello there so looking good wonderful cool great awesome so as I said the majority of the work we're gonna be doing here is in JavaScript but I'm going to need a ref Prince to my canvas element so I need to grab this HTML element grab a reference to it and then I can start to do the work of building my game inside that element so instead of a console log of hello there I'm going to use a method I'm going to grab on the document I'm going to query for a selector selector if you're not familiar could reference any one of these HTML tags or CSS class and so on but for our purposes it's enough to just say I want the canvas element I'm querying for the selector of canvas and what that's going to give me is a reference to that HTML element so I'm gonna store this at a JavaScript variable I'll declare it with the kant's declaration and I'll call it canvas canva canvas and I'll set it equal to query selector canvas again as a sanity check just to make sure that I'm on the right track I'm at a console log that element and we'll see I'll click over here clear up my console and when I run it I should see something that gives me the impression that I'm grabbing that canvas element so we're gonna run it and sure enough there it is and the kind of cool thing in chrome is when I hover over it you can see it highlighted over here great so full disclosure for those of you that are watching this screen the stream and you're more familiar with JavaScript JavaScript can be written typically with like a semicolon at the end of every expression I am gonna choose not to write semicolons just because I'm lazy and I don't want to do the typing but I promise you that the code will execute properly so you won't see any semicolons sorry great back on track so our canvas element we can see right now by default is kind of got like a rectangular kind of shape to it I want our game board to be just a nice square it'll be easier to work with so what I'm gonna do is change the properties on this HTML element directly now that I have a reference to it I can say canvas dot width equals let's say 300 pixels and canvas height equals 300 pixels so now when I run the code we should see this rectangle kind of square out and we sure do perfect okay great so now that I have a reference to my HTML element I'm going to call a very special method on it so as I said this is just the HTML element on the page but I need to get what's called a rendering context to be able to paint the pixels of the game inside of it and the way I'm going to do that is I'm going to declare another variable I'm going to call it context or CTX and I'm going to call a method on the canvas element of get context and get context is a method that takes an argument of what type of context I want and for our purposes we're just going to have a 2d game you can work with 3d and there's a couple other arguments you can pass in there but for our game we're just gonna keep it simple great and again just like before I think this is a really good practice especially when you're getting started just console.log things out just do sanity checks make sure you're grabbing the things that you think you're grabbing so now instead of the canvas I'm gonna console.log out the context whoops I want to clear this so I don't have any clutter and when I run it now I should see something that tells me I've made instantiated this context properly so I'm gonna run that and sure enough I can see my canvas rendering context cool so a lot of functionality here may feel a little overwhelming we can open it up we see lots of cool things here but what this instance of a canvas rendering context is gonna do is give us a lot of functionality this is what's going to allow us to paint to the canvas and dictate where we want pixels to be displayed how we want them to move etc cool so at this point I'll take a quick pause for questions if in the chat anything I've done so far is like what Patrick what are you talking about let me know I think sunny said this in another live stream but asking questions is super important always speak up and I'll try to help you as best you can all right moderator try to help you oh boy I hope for this semicolon thing isn't a distraction because life's too short how do you clear your consoles so I if you click into the console like I'll click into it and then hold command and then press K it'll clear it out and that will be necessary to just kind of make sure it's easy to focus on the most recent thing that's popped up cool alright it seems as though everyone's on board with what we've done so far so we're gonna continue on to new and exciting things now that we have our context we can start to paint into it and this will be kind of our first magical moment of putting a pixel inside of our canvas and I can do that on the canvas whoops not in caps though on the context there's a method many many many different methods that I can call the first one I'm going to do is called fill rect and that's going to paint a rectangle and fill it fill rec takes four arguments it takes the X and the y coordinate of where the rectangle starts how wide the rectangle is and how tall or high the rectangle is so the coordinate plane in canvas stock starts from this top left this is zero zero and it goes all the way down to however large the canvas is so in our case because we have a 300 by 300 canvas this bottom right pixel would be 300 300 so I'm gonna fill in these values I'll just hard code them for now let's say 20 50 and we'll make it a 50 by 50 square cool so at pixel 20 from the left pixel 50 from the top I want to pay a 50 by 50 square I'll run that code and whoa we got a pixel cool we painted something into canvas very very exciting so I've hard coded these values but that's not going to be very useful to me if I'm in a game I'm gonna want to be changing these values around a lot like we saw the player moves around the screen so I'm gonna store them in a variable and I'll try to use some semantic names here I'll say player X equals let's start them off xx and player Y also equals it's just do 20 so I'm now gonna swap in those variables for the hardcoded values cool and it should be more or less the same it's moved up a little bit because I changed the Y value but now we have a little more flexibility and how we're affecting our canvas wonderful so one other thing is I believe our player was red and so I can do that with the fill style property so I set that as red and now my pixel should be red and it is wonderful and I'm gonna make my player a little bit smaller I'm gonna make him ten by ten cool so now I've got my player on the screen so wonderful any questions about what we've done so far our first steps of using the context instance I'm seeing a lot of sunglasses in the chat that makes me think that everything is cool sweet alright so our next step is we want to create that base that the player is trying to move into and so this is going to be another rectangle so again I'm going to use the context this time we noticed that that base wasn't a filled in square it was just an outline so I'm gonna use the stroke rect same argument order so it's the X the Y the width and the height so let's make it I don't know 100 150 and 50 and now we should see another square being painted to the canvas and sure enough there we do we've got our base here so for our game what we want is an rendom element to it like we want the player to not know where the base is going to show up they move towards it so we need to explore how we can bring some randomness into our game and so I'm gonna jump over to the console here and play around with it a little bit as I said earlier I have access to JavaScript in this console and one of the cool things I have access to is this math object it's got a lot of really helpful methods on it one of which is random so this is a method that when I invoke it I'm going to get a number between 0 and 1 as a float or a decimal so you can see there it's always not quite going up to 1 not quite going down to 0 now what I can do is use this as the basis for the coordinate so if I take math dot random and I multiply it by the dimensions of my canvas I can get a coordinate somewhere in that plane so I know my base is gonna be 50 so I want to subtract that from the width and the height so I will multiply random by 250 and now I'm getting a number that's somewhere in that plane it's still a float or a decimal and I want to floor that because I can't paint like these decimal numbers so I'll use another math method called floor oh it's getting blocked by me sorry all right we'll bring this back up cool so I've got math.random and I'm gonna put all of that inside of another method call to math.floor and that's gonna floor the number and now I get a nice round number so this is what I'm gonna use to generate a random coordinate for my base I'm gonna just copy this code straight from the console and I'm gonna put it in another variable so this time I will call it like base x equals the calculation I just made base Y also equals the calculation I just made great and now I can put these into my stroke rec so instead of hardcoded values I'll put base X in there and base Y cool now let's clear that out when I click run here I should see the base in random locations so press that now it's in the bottom right click it again a little bit over to the left dancing all around sweet I've got a randomly generated base now I'm feeling real good I'm just gonna take a pause here and check out if there are any questions or anything that I've done that's really wild my head covers the console I apologize I have a big head so maybe let me just review what we've written so far just in case anyone's gotten a little lost in the weeds what I've done is I've grabbed I have my HTML right here one of my HTML elements is my canvas I'm using a script tag just to inject some JavaScript into my HTML document in that JavaScript I'm grabbing a reference to the canvas element here I'm setting some properties to give it a proper square dimension and then I'm creating a context with a method that's special to the canvas element called get context this context instance allows me to paint pixels inside of the element so I'm declaring some coordinate variables here and then I'm using these methods to paint inside of my canvas element so that's where we are at this point can we pass color as a fifth argument gotcha okay so I'm not sure if you can pass a fifth argument to fill rect or stroke rect I've always seen it as setting the property I did link the documentation for canvas if people want to check it out an experiment it's part of the fun another question is why are we setting the width and the height on the canvas element instead of using CSS it's a little bit tricky but our canvas element needs to actually have those dimensions not be represented in those dimensions CSS is something that will change the appearance of an element it won't change the element itself if that sounds a little bit weird I agree it's just sort of the way that canvas works if I tried to increase the canvas size just with CSS I wouldn't be able to paint in those areas that have been expanded by the CSS good question cool all right so just to kind of reorient ourselves we've got our pixel we've got our base we're definitely at the point now where we want to introduce some interactivity we want to be able to press the aw s or D keys and have our player move around the screen right now I can press those keys and nothing happens so when we're talking about interactivity on the web we're talking about events events are we can think of as pretty much anything a user will do in their webpage so when you're typing into an input box that's an event if you're clicking on a button that's an event if you're scrolling the screen that's an event in particular for our use case we care about the event of a key being pressed that's what we want to capture because when we press certain keys we want to move our player around so to be able to listen for certain types of events I have to call a method called add event listener so again I'm going to reference the document that's my HTML document and I'm going to add an event listener and the arguments for add event listener are going to be the event that I'm listening for and then whatever behavior I want to have execute when that event occurs so the first thing I'm listening for is key press and then I need to write a function to fill in that second argument so for now I'm going to call that function handle input and this function is going to receive an event as an argument so I'm going to write that in and for now just to get started just to make sure again that sanity check I'm gonna console.log the event just to make sure that things are working as they should so now that I've written my we called us a callback handler I'm gonna pass that in as the second argument handle input great so before I run this just to recap I'm adding an event listener I'm saying make sure that you keep your ear out for any key presses and when you do see a key press I want you to run this function and pass in an event cool so I'll click run and nothing's happened so far because we haven't pressed any keys yet but if I click into my browser component and then press a key in my console here I see I have an instance of a keyboard event being console logged out and so that's this line of code here is what's causing us to see this keyboard event so what is this keyboard event gonna do for us well it's giving us a lot of information I'm opening it up again and I can see it's kind of overwhelming a lot of different properties in this instance but one in particular that's going to be useful to me is there's a key property and that key property refers to the key that I pressed so just to make this a little more explicit what I'm gonna do is I have this event instance and I'm gonna use the dot notation to access a property on that instance so I'm saying in the event instance give me the information under the key property cool so slight squeak there I'm gonna run the code again I'm gonna do command K to clear out my console and now when I press keys I just see the key that I pressed right so the event objects gone but now I know okay I pressed a J and s and H etc cool key press a reserved word key press is not a reserved word so I could declare a variable named key press although that would be a little confusing for me cool great so now that I have an idea of which key is being pressed I want to sort of filter them and I'm gonna use some conditionals I'm gonna say okay it's great that a key was pressed but I only want to make sure I do something for an AWS or D key so I can do that with a series of conditionals inside my function I'm gonna remove the console.log for now and I'll say well I'll declare a variable of like key that's going to be event key so that's the key that I pressed and then if if key is equivalent to a I want to do something whoa I don't want to yell though else if ki is equivalent to W I want to do something else if ki is equivalent to a DD I want to do something and then one last else if if you're more familiar with JavaScript maybe you're thinking hey why don't you do a switch statement which is another way of writing these conditionals I could have done that as well and s is my last one great and so now I can put in some console logs here like a pressed and then I can have W pressed and D and let's get our alignment here all set okay Coolio depressed and s pressed okay wonderful so now we can run it let me clear out my console again and now when I click into the browser component and press these keys I see something if I press other Keys you'll maybe have to take my word for it pressing other keys that are at AWS or D and nothing's being wrong all right wonderful so at this point I know I press these keys but now what do I want to do with these keys and this question is going to take us back to why do we have this pixel here at all like where did this pixel come from right it came from this fill rect method right and the location specifically being 10 pixels down 10 or sorry 20 pixels down 20 pixels over came from these variables so if I want to change the location of this pixel I need to use this method again with different values for these variables so let's see here for our first key of a if I'm pressing the a key that's like the left key I want my a player to move to the left of the screen I want to move in this direction can anyone tell me does anyone think like what would I do how which variable I want to affect what I want to affect the player X or player Y variable I'm gonna want to handle the player X variable wonderful thank you John more I'm going to want to handle the X because the X is what's handling this plane and if specifically I'm moving towards this direction I want to decrement or remove values or I want to lower the value so what I'm going to do here is take that player X variable and subtract 5 from it I'm cool and let's kind of just continue along down the line with a W I want to move up so if I want to move up what access am i moving on I'm going up and down in my square so now we're doing the W key which will move our player upwards why Deadpool T Y interwebs you got it and specifically how do I want to affect my Y axis do I want to decrement or increment if I'm pressing the W key if I'm pressing the W key I want to decrement it wonderful Utah by 5 got a negative why I will accept it and that's because if you'll recall the top left is 0 0 right so if I'm moving up in this plane my Y value is decreasing so I'm going to subtract 5 from play or Y let's move on to D so if I'm doing D I'm moving to the right and I'm going to add to the what the x value and if I'm pressing s I'm moving down and so I'm moving down which means I am increasing my Y value wonderful cool so I'm going to I click the Run button I'm going to clear my console out click run again just for good measure and now if I press the key who thinks that that pixel is gonna move maybe just in your own mind think yourself hey is this picture we're gonna move or not when I press the key I think it's really helpful when you're following along with things to try to like get an idea of what do I think is going to happen and then when you see it happen it's the thing that you thought and you're like hey I'm doing great move right along if it's not the thing that you thought then there's a disconnect in your understanding and that's when you slow it down and say okay why did I think this would happen and then that happened so right now if I press the key nothing's actually going to happen and again this goes back to why is the pixel on the screen at all and the reason it's on the screen is this method this fill rect method so I can't see the pixel move because it's not being repainted and we there's a couple different ways we can handle this I could just take this code here copy it and paste it inside of my event and that way every time the event fired I repainted in that way so I can run that and we can see that it does a little bit of funkiness but it does kind of move but I actually don't want to do it like that because it's a little weird to put that type of logic inside my event handler I'm going to introduce a new function called step so I'll declare step steps not going to take any arguments and what I really want step to do is to be like the momenttomoment state of my game we can almost think of it like a loop except it's always going on there are there are other activities happening while the step function is being executed so I can take this logic of painting out my base in my player I can put it inside my step function here and then at the very bottom of my step function I'm gonna do something that's a little maybe this feels a little bit funky but it's given to us by the browser and it's called request animation frame this is a function that's given to us by browser and I'm gonna pass in the function that I just wrote so requestanimationframe comes from the browser it's a function that takes a function as an argument that function being the one I just wrote and what it's gonna do is basically say okay every 60th of a second or so I'm gonna run this function and to sort of kick everything off in the beginning outside of that function step I'm going to again call requestanimationframe just to kind of get things started this is probably the most like whoa what is happening part of this live stream but I feel like this steps pretty important because it's kind of how things continuously get painted to the screen it is recursion but don't worry about it we've got some great recursion courses if coke atom e if you want to check that out in more detail you don't really need to understand recursion for this step to work but just to recap I've defined my function step I put all my painting logic inside of step and I also told the browser hey just run this function like every sixtieth of a second I would be super cool great so I'm going to run the code again nothing's happens right away but now when I press my keys I am moving my player around there's a little bit of weirdness here in that wherever the player was is still being painted and that's because I haven't cleared the campus so essentially what I want to do is clear everything from the canvas and then repaint everything back onto the canvas it seems like a lot of work but computers are very fast requestanimationframe repaints every so requestanimationframe only does whatever functionality I put inside of it it's it's really just a way of saying hey just run this code every sixtieth of a second so at the very beginning what I want to do here is call another method on my context of clear rect and this is my way of like wiping clean the canvas clear rect just like Phil rector strrrike takes four arguments the x and ycoordinate of where I want to start clearing and then the extent of the width and height of what I want to clear so for our purposes I want to clear everything so I want to stop I want to start at the top left zero zero and go the whole width and height of the canvas cool so I made a change of adding clear back to the top of my step function I'll run it again and now when I move my player around I don't have that trail which was kind of cool but not great for our game wonderful okay I'm gonna take a brief pause here because we've done some crazy stuff and I want to make sure that no one feels left behind here so I'm just going to again go back over everything we've done so far so just kind of like up from the very top recap we have an HTML document super cool specifically inside of our HTML document we have a canvas element which is where all this magic is happening and it's kind of cool if you think like if we're looking at what's going on here this is the HTML element like this is what you can see from the HTML element like we can see our h1 tag and then this canvas is everything that's happening in here like really cool I think it's really cool I'm not just being paid to say that and then we have our section with our score below that I have a script tag and this is my way of injecting some JavaScript into my HTML document so I can do some of the functionality and interactivity of our game and within my JavaScript tag I'm grabbing a reference to that canvas element I'm setting some properties on it I'm getting a rendering context from the element this is what's going to allow me access to all those different methods that paint the pixels onto the canvas I'm declaring some variables to give me an idea of where my player and my base will be in the canvas I have a step function which is my like sort of every beat every moment of my game I want this to happen and I'm starting that loop or that recursive exchange right here I have what's called an event handler called handle in but this is what is happening every time there is a key press event because I added an event listener I'm looking for key presses and whenever those key presses happen I want to run this function and in the function I'm going to be looking at the event and saying hey was the key in a a w etc and that's where we're at oh my gosh Deadpool T Y interwebs you're the best cool if the frames aren't rendered equally fast how do you move the player at a constant rate so that's a good question this is a little bit more advanced step requestanimationframe does have some finetuning in it for our purposes today we're not really going to mess with it too much but maybe a really like drive home how often this is happening I'm going to do something just as a little experiment to illustrate it I'm gonna take that player X value and again this is what's dictating where on the xaxis my player is showing up and in my step function I'm going to increment it by 1 so every 60th of a second my player X is gonna be incremented by 1 and then painted to the canvas and this this should be pretty cool I guess I don't know who knows so you can see like this is happening every 60th of a second my players running off the screen I don't actually want to do that right I want to be able to control how my player moves but that's kind of how we get some animation going on it's a little sneak peak so good question about the arrow keys instead of letter keys the reason why I chose the letter keys is sometimes people don't have arrow keys on their keyboard and also there's a little bit of weirdness with the key press event where it won't actually register an arrow key so I didn't want to go down that rabbit hole not worth pointing out but a wsd are kind of a classic like moving around great okay cool so enough jibberjabber we have some interactivity in our game what I'm looking for now is sort of like the final cherry on the sundae I want to be able to sort of like have something happen when my player moves into the base like that I want the base to go to a different location I want like it to magically reappear somewhere else princess is in another castle that kind of an idea right so this is going to touch on a essential part of writing games it's a super super super important concept so I'm gonna kind of belabor it a lot we want to take a step back and ask ourselves what does it mean for our player our X dot to be inside of this square and when we're dealing with canvas we're just dealing with pixels we just know X Y coordinates on a plane so to be inside of the square means my x coordinate is greater than or equal to this other things x coordinate like right now I've got an x coordinate that's a little bit less than the base and now my x coordinate is greater than the base and similarly by the y coordinate perspective right now I have a lesser than y coordinate and now I've got a greater than y coordinate so that's how we're going to evaluate whether our player has moved inside of the base and this logic is something that I want to be checking for all the time and so this is a good candidate to put inside of our step function so I'm gonna use a conditional and say if my player X my xcoordinate is greater than or equal to my what did I call it base X then I know I've collided there are a couple others that I want to do here if my player if my player Y is greater than or equal to my base Y then I know I've gone past it so this is sort of my console dot log you won or you scored something like that right I don't want to take too many steps at once and mmhmm all right so we'll just kind of see how this runs I'll run the code and now inside of my step function I'm always checking like have I gone into the base have I gone to the base so I will move over and we can see right now I haven't gone in the base I haven't gone in the base and if we keep ours over here whoa I have really gone in the base the reason why there's this number here is the step function is again running every sixtieth of a second so it's running a lot that just means that you one has been console logged multiple times in this case 700 times cool so I'm gonna clear the console one more time and I just kind of want to illustrate a bug that I kind of put intentionally in here one thing I didn't think about is what if I am not in the base right now but I move down and oh no I'm winning but I'm not really winning if you know what I mean and so what I haven't thought about here is there's an extent of like where the base is and that's going to be the start point of the base coordinate and then how wide it is so I need to add to my conditional here and let's see if I can do this my player X needs to be less than or equal to the base X plus the width of the base and the width of the base is it's 50 cool and then I want to do the same thing with my ycoordinate so play or why is got to be less than or equal to the base y plus 50 okay cool this is you know not going to be like the most precise coordinates ever and that's okay we don't want to get bogged down in the details but just to recap here I want to make sure that when I'm not really winning my game isn't throwing a bug there so now if I'm going down we can see that my coordinate is greater than but still within the bound so I'm not it looks like I fixed this problem cool I'm circling around the base oh when is it gonna happen oh I won all right cool awesome and so at this point yeah I have kind of a functioning game I am what I've done right now is a collision detection and the reason why I'm making such a big deal about it is it boils down to in your game when do you want to know when something contacts something else so think of it like when we want to know when Mario hits a mushroom we want to know when Mario is on top of a Koopa we want to know when Sonic has touched a ring we want to know when pacman has eaten one of those little golden things I don't know what the word for it is but knowing when something has collided with or contacted something else is like so essential in game development right it's like you you have to know that it's it's what so many games are built on and ultimately this is what it comes down to is just XY coordinates in a 2d game so it's pretty cool nice I'll just take a break now oh wow we're really we've done like almost 45 minutes that's wild time flies when you're having fun let's wrap this up really really quick the one last thing I want to do is like make this random base generation so pretty easy or not I shouldn't say that but the way that we built it out so far small tweak I just need to reset my base X and my base Y so this if additional is kind of like if I won then I want to make a new base location so I'll just copy that code of a random coordinate and now my step function will place the base somewhere else if I ever contact it and let's go for it let's see if this works all right I'm really making me work for it oh you scamp and there we go okay cool dancing around awesome okay so we didn't quite get to everything but I thought we'd pretty much have an MVP a Minimum Viable Product for yeah product for our game I had a lot of fun I really we could definitely play sounds like pretty much whatever logic we want to have happen when we like win or enter a base we could do right in there so the sky's the limit you're only bounded by your own imagination very cool stuff yeah so to recap I guess one last time we'll run through everything just at the sort of danger being a little verbose here we've got our HTML document we have our canvas element inside of our document that's where all the magic is happening I made a script tag so I can run some JavaScript in my HTML I'm grabbing a reference to that HTML element I'm setting the properties to give it a nice dimension I'm getting a context instance and this is very important because this is how I'm able to paint all the different pixels into the canvas I'm getting some XY coordinates for my base and my player I have a step function which is going to run every sixtieth of a second and every sixtieth of a second it's going to clear out the context set a color draw the base in the player or the player in the base check if the player has one if the player has one it's going to move the base to a different location and then it's just going to recursively keep calling itself it's just going to keep running this loop my other function is my handle input and this is the function I wrote to check what key I'm pressing and depending on the key I'm pressing I'm going to change these variables which dick we're on the canvas the player is so this is how I'm moving the player around the canvas and last but not least I'm adding an event listener and saying hey I want to make sure that whenever there's a key press you run this function and that pretty much takes us to the end of the stream I just want to say again I really appreciate everyone's attention super exciting stuff to give you some ideas of how you can change this let's say that every time my player moves into the base the base gets a little bit smaller so I want my base to get harder to get into well to do that what I could do is create another variable for my bases dimensions which I have right here and then I could decrement those dimensions every time I one another idea would be to set up a timer and so maybe there's like a fivesecond countdown so if my player doesn't arrive in the base in five seconds then I lose the game some other things that I could do are maybe there are some randomly generated powerups like I could randomly put another square that's blue and if my player enters blue it can move twice as fast twice as fast means that instead of you know incrementing or decrementing by five maybe I'm incrementing or decrementing by ten pixels so the way that I would kind of phrase it is what do I want to have happen in my game what is making that happen in the game right now and how can I alter that usually you're gonna be storing it in a variable changing that variable around I would also say you know this is this is an example that kind of intentionally avoids using JavaScript classes and that's because I wanted to keep this as approachable as possible but it's definitely a good idea if you do feel comfortable with JavaScript classes and again we have some really great code Kadim e courses on them sort of packaging up the functionality of like I could have a player class and I could have a base class and then any specific functionality would live in that class and it would keep things a little bit tidier than the way I have it right now cool all right I guess that's it I don't know what am i oh yeah if you if you want to leave feedback if you're in this type of material I know that there has been some but please let us know we would love to build a course on game design something like this let us know we're always looking to improve and do better by our learners so yeah fill up the feedback form thanks everyone and go make some games