how's everyone doing um Carlos here with Codecademy and in this video we'll learn how to use visual studio in order to add a razor page to an existing application will you use visual Studios features to create a view page which will include the codebehind file and then run the application to see it in action also look into how layouts are utilized by updating the main layout with links to newly created pages and see how they make use of the view data property now this video assumes that you're already familiar with visual studio and that you have it installed and that you also have either a basic razor pages application or know how to build a template you should also have an understanding of what a page model is and how they interact with their corresponding view pages so without further ado let's go ahead and get started okay so I have a basic application here called test app that was built using visual Studios template and we can open it up to see all the folders that it created for us now we can add new project items to your pages folder by right click on the pages snowed on the solution pet then going to add and then selecting new file if you're on Windows it would be add and then new item so let's go ahead and add a new file here now we'll be provided with numerous options for what kind of file we want to create from a razor layout page to a middleware class and our kids you want to create both a view page and its corresponding page model so under asp.net core select braiser page with model let's go ahead and name it about an explore how our solution pad is updated now we consume you file was created it under the pages folder there should be a file called about dot CSS HTML with a dropdown that contains the page model about dot CSS HTML dot CSS if we take a look in about dot CS HTML will see that the generated view page will contain an add page directive the app model directive specifying the corresponding model with the complete namespace and an empty code block below if we open up the drop down will see our about CS HTML dot CS which is a code behind file now the page model will contain a few necessary using statements and a class for the same name as our view page where the keyword model added to it we'll also see that it's using the same namespaces or other view pages and that it's inheriting from the page model class by the use of the now before we navigate to the view page let's go ahead and fill it out a little bit let's navigate to about CS HTML and let's add a header indicating what page we've landed on below our code block let's add an h1 header and let's simply say this is the about page we can then run our application by clicking on the play button on the upper left hand side if it builds successfully it should launch a Google Chrome tab with our application running so we can directly navigate to our newly created page by typing in slash about so let's add that to their URL and hit enter it should now direct us to the about page and render its contents so now let's go ahead and take a look at routing now with the fault raiser pages applications each pages URL matches it's finally so if we go to slash about razor pages is smart enough to go ahead and look for that file in the pages folder now it would be very useful if we had an accessible link to direct us to this new page instead of having it to type it in the URL every time we can do this by updating the navigation bar in the header which is found in the layout page so back in visual studio let's go ahead and stop the application and in our solution pad let's go ahead and open up the layout file which is found under the shared folder I'm gonna go ahead and resize our solution pad just a little bit there we go and I'll zoom out as well so we can see a little bit more of the code so the coding here acts as a template for all the pages that reference it our content pages like about dot CSS HTML will be rendered through the call to render body which is found here on line 34 as you can see here we have a header that's being rendered for all content pages and we can simply add a new link for a newly created page in here this header a new link will be populated in all other content pages as well so on line 20 we have an unordered list containing all the navigation links for our header so let's go ahead and open up a new list tag will be using we'll add an anchor tag within it and we'll be adding the same plans we have for the other linked pages so I'm going to go ahead and copy this will paste it in here we can omit the ASP area and we'll add an attack helper called ASP page and we'll link it directly to our about page so ASP page is equal to we can simply add slash about here and the text would be about so now let's go ahead and run our application again taken to Google Chrome here and you'll see that our header has been updated with a new navigational link for about so if you click on the about page it will directly navigates us to that content page with this we'll have the link in the header no matter where or at lastly let's take a look at how our layout makes use of the view data title property so back in our layout page I'm gonna go ahead and stop the application from running and we can see here at the top how it's being used within the title tags now the tunnel defines a document title that is shown in a browsers title bar or pages tab and if we look at index dot C as HTML we can see how each content page has set a specific value unique to that view page the laya would make use of this value and inserted in the browser's title bar and it would change depending on what page for a currently at now we can take a closer look at this using chrome developer tools if you haven't used developer tools before well there's simply a set of developer tools built directly into the browser that can help you edit pages on the fly debug or view how pages are structured now before we move on if we look in the upper left hand corner will find the browser tab which is rendering the text that was found in the title tags okay so in order to work with developer tools within Chrome we can open up developer tools by right clicking and selecting inspect so I'll zoom in a little bit more here and expand the inspector here we'll make sure that we're in the elements tag and in here we can actually open up our head tag within the head tag will notice our title tag here rendering the exact value that was said inside the index.html page once again within our index es HTML we'll see that the value said for view data title property is set to home page and if we look at the layout and we look at the view data title property razor pages will actually read out the value and render it on the browser depending on the content page it is so with index page since the value of this property is set to home page it will render that value inside our browser so its value it's being rendered right here and if we navigate to privacy page and do the same we'll see that the actual value from that view data title property is being rendered for that page since we haven't set any values for the about page it should render any text so as you can see here it's completely blank we could change this by stopping the application going to about dot CSS HTML and in here we can simply add a new view data property so let's go ahead and add the new data property it's called u data I'll set the title to be equal to about and go ahead and run our application again and now our title tag should hold the actual text about so we go ahead and inspect once again and we navigate to the about page we'll expand our head here and look into the attack will see that the about text has been rendered so to review we first saw how to create a new razor page using visual studio we saw how it created a basic skeleton which we can add on to it we also saw how to work with the layout which provides the user with a consistent experience as they navigate from page to page and lastly we'll work with the view data property which is a container for data to be passed from the page model to the content page the more we use visual studio the more we'll be able to make use of the features provided hopefully this video gave you a good foundation on how to navigate the IDE and get comfortable exploring its uses thank y'all for watching and I'll see you all next time