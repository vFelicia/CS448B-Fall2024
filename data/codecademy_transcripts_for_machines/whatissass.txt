everyone my name is Carlos I'm a web developer based in Boca New York and we're today we're gonna look into sass now assassins a tool that's been available for us for a long time so if you're heard of it but you're not familiar on why we should use it or how it works then you've come to the right place so let's go ahead and get started so today we're gonna cover what is sass why are we gonna be using it they're gonna look at how it actually works then we're gonna look into certain features that sass provides and lastly we're gonna compare with CSS and SCSS to see how it looks ok so what exactly is says well the jist sass stands for syntactically awesome style sheets and it's an extension of CSS which adds nested rules variables mixin selector inheritance and a lot more features now sass is actually written in Ruby and it's intended to make our lives a lot easier in writing CSS but let's look at a few other reasons why we actually want to use sass instead of CSS now if you have written CSS before there I'm sure there's been instances where you have to copy blocks of code over to multiple other elements in order for them to have the same custom styles so CSS can get very hairy and disorganized and very cluttered sass helps us organize as clutter and make it into really specific modules and 16 pieces of code another reason is that the syntax is easy to learn especially if you already know CSS now there are a few specific differences with sass like the use of indentation and dollar signs to create variables but overall the syntax is quite identical to CSS so it's very easy to learn one of the most important reasons to use SAS is that with the use of variables and various other features were able to reuse a lot of our code one of the things that our software developers and most is having to repeat themselves so as such mantras like to repeat yourself and tools that automate repetition are quite popular and SAS helps us to avoid this issue lastly sacis has a very mature and stable community so SAS has actually been active and supported for about 12 years by its core team but not only that it's actually been supported by several tech companies and hundreds of developers so it's very stable at very mature and very uptodate so now let's look at how SAS actually works so SAS is actually a preprocessor and if you're not sure what a preprocessor means it's simply a program that processes input data and produces an output and then that output will be used in another program now this is gonna make a little bit more sense in the following slide where I'll explain how the actual flow works but one other thing I would also like to point out is how SAS actually has different syntaxes now there are two popular ones called SCSS and SAS so we have SCSS which is basically standing for sassy CSS and this is a superset of the css3 syntax now scss is more like a middleman between sass and CSS then we have an actual sass code so sass will just be the fullon sass file that will actually be compiled into CSS so let's look at how this flow actually works so let's say you have written your sass file containing a bunch of variables and using a bunch of the other features that sass actually uses from there it's going to go through a processor or a compiler and that compiler will actually sped out CSS that the browser will be able to read so all this is going to happen behind the scenes and sass needs to be compiled into CSS because browsers actually cannot read sass so they need to be transformed back into CSS so let's look at some of the features that sass provides and just to preface I'm only gonna be showing about three features sass actually provides a bunch more and I suggest you guys look at the documentation to see what else you can do with sass so let's start out with variables so think of variables as a way to store information that you want to reuse throughout your stylesheet now you can store things like colors fun snacks or any CSS value that you think of one I'd reuse and in order to do this with sass where you're gonna use a dollar symbol to make something a variable so here's an example where we actually have a variable called control height set to 40 pixels and we use that variable for a header class and a sub header class now if we were to write this in CSS we would simply write the number itself now in this case we're only using it for two classes but in long style sheets where we use multiple 50 to 100 classes it can be quite confusing to scroll back up and see what actual height we used for a previous class so very useful to have a variable that we can just reuse over and over again for different elements so now let's go ahead and take a look at mix ins I mix it basically lets us make groups of CSS declarations that we may want to reuse throughout our site so we can even pass in values to make our mix in more flexible so let's take a look at an example here in order to create a mixin we're gonna use the add sign directive and give it a name so we have a mix in here called awesome and we included in two different elements one called body and one is a paragraph so that awesome mixin can have probably or how many other declarations you might want maybe you want to put a border or maybe a radius or a fun color and we can insert those properties into different elements as well so it's very useful and this would translate like this and CSS where it's a little bit more declarative and we actually have to specify the width and the height for each element lastly let's take a look at one of the most useful features in sass called extend and inheritance now with extent we are able to share a set of CSS properties from one selected to another it's kind of similar to the mixin but it's not exactly the same so we have an example here where we actually have an h4 header with some properties and listed for that and we have a label here that has already one property with a cursor but we want to extend that the properties from the h4 element and if we were to translate this to CSS it would look like this now the difference is not that drastic it doesn't look that big of a difference however we can see how we're already reusing label here and if we were to have a very large example and we have a large amount of styles that means that we need to add it might be a little easier to actually use extent in order to actually pass those properties onto different elements so now let's take a look on a sidebyside example between CSS s CSS and sass so we have CSS which stands for cascading style sheets and if we look here we're styling an anchor tag to the color red and whenever we hover over it the color is gonna change to lime now if we use s CSS which stands for sassy CSS it's going to look kind of similar and like I said it's an inbetween style sheet between CSS and sass and here we're using variables but we're still using curly brackets and semicolons and it's doing the same exact thing now for cents which stands for syntactically awesome stylesheets we have a much more condensed version of when we have from CSS and CSS the logic is still the same we have to color stored in variables but we're not using curly brackets here or semicolons which helps us avoid more errors so hopefully this video gave you a better understanding of what is SAS and how it actually works thank y'all for watching join the conversation by subscribing to this channel or drop in a comment below and if you want to take your skills to the next level start learning on code Academy today