to confirm that sounds good hi uh do you see us alicia i do not see this on the youtube page now all right not yet probably a little bit of a delay cool i think there we are so hello everyone uh my name is alex i am here with the great alicia alicia hello how are you doing hey i'm good cool and we are here today to demo code challenges one of the new features that we just introduced uh to the website so hello everyone we're live on youtube and i think facebook and twitter and even twitch uh if you're if you're watching this uh elise and i are looking at the youtube chat right now um so welcome feel free to post questions in the chat feel free feel free to say hi in the chat we'll keep an eye on that as we're going uh this will also be posted on youtube after the fact and so if you miss this or have to run uh don't worry you can always catch it on youtube after the fact and if you're watching this on youtube after the fact hello as well um cool so let's go ahead and get started uh this is gonna be just a half hour session so we have a lot to get through i'm going to go ahead and share my screen and we are here today to talk about uh code challenges um let me first quickly navigate to the code challenge page uh on codecademy and then we can talk a little bit about what these are so these are found up in the resources tab and these are the challenges and so when we go here you'll see that we have a bunch of different code challenges and you can sort them by three different languages right now so we have them in python javascript and java before we get too far alicia do you want to kind of describe what code challenges are how they might be useful um why people might be interested in using them stuff like that yeah absolutely so basically code challenges are meant to emulate a whiteboarding question um you know you can take paths to get ready for interviews but you actually want to get the practice with doing the whiteboard questions themselves um and these are created to be taken after completing the interview prep paths or if you think you have all the content ready um you can just dive right in basically we give you the question we give you the workspace and you're answering it we give you a sample input and output and then we test your inputs against what we expect and we tell you if you pass or not but it's really free structure it's for you to actually kind of formulate your own thinking as you would in a real library question yeah and so i think if folks have never had a whiteboarding question or never had a technical interview these are really common where you're kind of asked to do a coding challenge this coding challenge has multiple solutions there's probably uh degrees of um cleverness that you can implement in these uh challenges where stuff like there's probably a kind of naive solution and then if you're in that interview they're gonna kind of push you to get to more clever or faster or better solution um and there's tons and tons and tons of these types of questions out there and so this is a great way to practice that um yeah i'm looking at chat and i see a couple of good questions already uh when can we expect code challenges for sql i think sql is like a little bit of a different beast where sql questions are probably not as much about algorithmic complexity and uh solve this coding problem they're probably a little bit it's probably just a little bit of a different interview format um but that would be an interesting one to find let me go ahead and demo one of these in particular uh i've prepped the first one that we have under java prime number finder and so this will give you a little bit of a taste of what these code challenges are like um this is a good example where there are again kind of varying levels of complexity to the solution that you might write and so this question in particular is telling you okay we want you to write a function named prime finder that finds all of the numbers n uh between one and n at r prime so for example if you do private finder of 13 it's going to give you 2 3 5 7 11 and 13. um like alicia was saying really one of the things that already existed on codecademy before developing these were giant paths helping you get prepared for technical interviews and so if you encounter this problem and are a little bit stuck on how to tackle it we think that these technical interview paths are really a great place to start where uh you know if you're if you're a real beginner at coding it will walk you through some of the basics some of these basic data structures start talking and we'll start talking about um algorithmic complexity and then uh what's really kind of interesting is ultimately we get into kind of some of the more clever solutions for some of these projects so in particular the reason why i'm i'm showing off prime number finder is at the end of this path at this uh technical technical interview path we have this article that uh kind of walks you through a way to cleverly solve this prime number finder um i i don't even know how to say this uh alicia can you pronounce it or no eratosthenes i believe yeah so this is a clever way of finding prime numbers there's a there's kind of a fun gift here to show how that process works um so i think that this is uh this is a great example of if you get stuck on some of these technical interview problems there's probably something in this path that will help you get unstuck um alicia in this uh in this code challenge itself what are some of the like features that uh are noteworthy i guess or what should we highlight about this new code challenge feature yeah so um in the question itself one of the things we do is we link you to the path um in case you want more places to brush up for some of them we link to a specific lesson or article we also talk about where this question has been asked because we want to make sure that we're giving you questions that are based in real world problems so this one was asked at facebook um and i'm sure other places as well and namely we give you something like for prime finder 13 we tell you what it should return to give you an example so you know what you're working off of and then basically the biggest thing is a different ui so there's an output and then there's a test case where like you actually test your code so you can run it without testing it first yeah i think uh let's demo that test case and uh i'm sorry to chat but i'm not going to code this up live i have the solution code uh i have one solution uh copied in a note stock over here um we can actually even kind of like talk through this solution i think that it's um it's a little bit interesting and it's a good example of ways in which you can solve these problems in different ways um this is kind of a brute forcey or naive solution where um essentially i'm looking through all of the numbers from one to n so i'm going to say okay is is one prime is two prime is three prime is four prime and so on and then in order to figure out if it's prime i'm gonna loop through all of the numbers from one to n again or from uh technically from n to one and see if it's divisible and if it's only divisible by itself and one then it's prime um i this is this is all a little bit like in the weeds of this particular problem so like don't worry if um all of this is foreign to you if you uh don't know java if you're super intimidated by uh you know all of this code again that's kind of what the technical interview path is preparing you for um for doing this kind of stuff um but if i go ahead and run my code so yeah run my code you can see that my test output uh was just run so i called my function with 13 i can change this to you know 20 if i wanted to run my code there are all the primes between 1 and 20. and then i can also test my code so we have uh we have tests that are kind of hidden on the back end that will check to see if what if the function that you've written is actually doing what uh the prompt is asking you to do so uh let me actually get this incorrect so i'm going to uh i'm going to screw this up so if i run this you'll see this is now incorrect these are not the prime numbers between 0 and 20. so if i test my code you'll see that okay 0 out of 5 tests have passed but if i accurately solve the problem got all of our tests um have passed so again that's it's a little bit similar to like lessons in codecademy right we we have this um testing framework it it exists on codecademy but um every single one of these interview problems are going to have five tests behind the scenes they're all going to be testing your code regardless of implementation so right you could have solved this problem in a completely different way and the test will either pass or not pass so it's a little bit different there after you pass the challenge we give you the option to submit the challenge and i'll show you what that looks like essentially um the idea behind submitting the challenge is now that you've solved it maybe you want to clean up your code a little bit maybe you want to put comments maybe you want to describe what you're doing again kind of thinking through the technical interview itself of if you just coded this up in a technical interview you're not really going to be the interview doesn't end there right you're going to be asked to explain what you did explain your thought process what are the drawbacks of this this solution what are the advantages of this solution um right you need to be able to explain your work and so we wanted to give you an opportunity to also practice that portion of the interview and so we do this through the forums so you can copy your code and then you can go to the challenge forums and this will be a place where other people who have solved this challenge can post their their solution so you can see already um this launched super recently so um there aren't a ton of people in here but you know there's a uh someone posted this this solution two days ago looks like a kind of a similar solution to mine two for loops they're using this break statement which i didn't use so slightly different um this person is same kind of thing nested for loops um so you can see that there are a lot of different implementations and solutions to this challenge and so we're really hoping that people kind of discuss and chat with each other and talk about their best solution alicia any questions from the chat that we should uh tackle um most of the questions are regarding when new languages will be popping up um and i think q1 of next year is probably the best bet yeah i know that um right now we are uh alicia and myself and our team are working on building out more of these so right now we have a total of 15 per language um we are building out another 15 with just more variety of types of questions more data structures more kind of like algorithmic strategies that you can you can that's you can use um so really just trying to get a good variety of these kind of questions um let me take a look at my notes um one of one of the other things uh this is like perhaps a little bit selfexplanatory but one of the other things that i wanted to note and let me get back to the code challenge itself um this will load can you not click into it i think it's i think it's trying to load let me uh open up a different one let me try alicia if you want to try loading one up you can uh you can potentially screenshare the thing that i wanted to demo was that um the the um code editor that we have and it looks like it's just loaded um the code editor that we have we obviously have these back end tests that are telling you if you've got something correct or incorrect but um in our output terminal this can this can also give you any information that you want including um errors and debugging right so if i make an error let's say i forget that i'm working in java here and i try to print hello um and i run my code you can see that kind of your usual error message pops up so uh you'll get lots of feedback on when you're actually trying to code out this challenge beyond our test cases that are either passing or failing um yeah and actually this is a good example of um this question in particular is relevant to heaps and so we we link you out to um the lesson that we have on heaps cool um i think that that is pretty much all we wanted to show off um we're happy to take any questions from the chat if there are any um but if not this can be a a short live stream um so if anyone has questions in the youtube chat and you know what let me actually open up try to find twitter facebook as well nothing so far in the chat yet okay cool well then maybe we will call it there um we're super excited about this feature i think that it's a next great step towards codecademy really helping you prepare for um landing a new job whether you're an upskiller or whether you're um moving into tech for the first time uh you know previously we've had all of this curriculum we've had all of these great paths that are that are huge and you know if you if you went through this entire path you would certainly learn a lot about how to prepare for these technical interviews but we never really had anything that tried to emulate that technical interview process and so yeah we're really excited about this kind of the next step in that career journey that we're trying to uh trying to make so yeah um feel free to leave comments on this youtube video if your feedback about code challenges um yeah and i hope i hope a lot of you start using it and posting to those um those forums um cool all right with that alicia i think we'll we'll call it there so thank you everyone for checking us out and we will see you later