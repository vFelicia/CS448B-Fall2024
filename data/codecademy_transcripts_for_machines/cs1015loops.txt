loading okay there we go hi everyone hey everyone hope you're all doing well we'll wait a few minutes before we start everything if you're in the chat just let us know where you're coming from so i'm alex destassi i'm a curriculum developer with codecademy i'm jamie rich i'm also a co a curriculum developer at codecademy and today you're joining us with our back to school campaign where we're gonna go over python loops so we'll wait a little bit longer and then we'll just get into it what our plan for today is is first we're going to go and we're going to talk about the concept of loops and just kind of get an understanding about what they are and the different kinds of loops that we can use then we'll jump over to see how we can use each of these loops in python and then once we get comfortable with that we'll move on and we'll do some cool code challenges together where we'll put our new knowledge of python loops to use yeah and i am also going to be answering any questions in the chat and uh explaining the concepts along with alex we're all really excited okay again hi everyone who's joining in i love seeing all the different places everyone's from so it's really cool all right so i'm actually gonna go ahead and i'm gonna start sharing my screen okay so again you're joining us with our cs 101 live stream series and if you just go down the syllabus page you'll see that we are we're passing all the things we've done before last week you joined us for lists and then this week you're joining us for loops so you're going to want to go over to this section that's cs 101 loops and you can see we have two lessons and an article so we're gonna start off with that first loops lesson so again i'll just give you guys a little bit just to get there okay so so i already have my loops open over here so let's start talking about loops and what better place to start than introduction to loops how do we use code to tell a computer this create a variable and call a function 15 times so what we know from what we've done so far is that this looks like create a variable call a function create a variable call a function create a variable call a function and you can already see that it's starting to get very repetitive fast so it takes a long time we can make a bunch of mistakes maybe the third time we call the function we spell the function name wrong and then we have an error so again it's not the most efficient way to do things in programming so instead we can have our instructions do something like this repeat the following 15 times create a variable call a function so one this took a lot less code so you can see that in our top piece over here we only did the create a variable call function three times and that took up six lines of code but here all 15 and all 15 times we have to repeat the instructions it's done in three lines of code so it's super super helpful and that structure is a loop and with a loop it's just giving us the ability to repeat a block of code a certain number of times okay so today we're going to be covering three types of loops for loops while loops and 4h loops and again i hope you joined us in the previous lessons because we're going to use a lot of those concepts that we've gone over before during this lesson so variables operators calling functions and working with lists okay so let's take a look at this nice example that we have in front of us we're going to create a pattern without loops so in the text box we'll repeat the instructions 10 times and then run it so we need to place a pink tile an orange tile and a mint tile so i'll just do that by clicking over here so we have our pink tile orange tile mint tile and you can see as i click it it just appears in this text box over here so that's one and we have to do this nine more times so pink orange mint pink orange mint you can see that this is already getting very repetitive and that since i'm talking i've already lost count do you see that this isn't the most efficient way so i'm just going to keep going and if you're thinking to yourself yes i understand you have to place the pink tile the orange tile and the mint tile we get it then you're ready for loops so i'm gonna run this code and we're gonna hope that i got all of it done ah and you see we still didn't even get there okay here we go pink orange mint pink orange mint we'll run that one more time and you can see we finally covered all the things in our tile and that took a while and it was kind of clunky thank you jamie so we're going to move on to the next piece and we're going to learn how we can do this again in a much more efficient way and to start we'll learn about for loops so with for loops you can think of them as count controlled loops when we create a for loop we know from the get go exactly how many times it's going to repeat the instructions contained within its body so let's take a look at an example over here we can see it's the same example as we saw before but instead it says 4 10 times place the pink tile the orange tile and the mint and so you can see it's the same thing over and over we're still using that place tile function so when our computer receives this program we have our counter set to zero and then it executes the instructions in the body of the loop and after each iteration which each iteration is just all the instructions so once it places all those tiles then it'll go on to the next iteration and start repeating again and our counter increases by one and then that process is going to continue to repeat until our counter is 10 and then all 10 iterations are complete and our loop will stop so again like i mentioned before for loops are useful when you know how many times you want a program to repeat the task so for example printing three copies of a document or inserting eight rows into a table for loops are good when you know what you want so let's go over to this nice example over here we're going to do the same thing before but we're going to try and use a for loop to accomplish it so let's take a look we need to insert our three instructions so we're going to place our pink tile our orange tile and our mint tile and then we're going to select the number of times the loop should run so when i click over here it says loop 4 and then i get to choose an option so i'm going to have it run 10 times because that's going to place all 30 tiles down so i'm gonna hit this and let's run it and see what happens so we can see that once i start running it we see that pink orange a mint pink orange mint all running together um and then that covers the board and that took so much less time than what we did previously where we were clicking each of the instructions so many times and then we still didn't complete the whole board you can also imagine that in this case alex just had to click on things imagine if you had to like retype every single one of the lines and that would be really worse also imagine if there was more than just three instructions you're trying to go if you were trying to repeat 10 10 lines of code like 15 times that's a lot of code you have to write yeah okay so now that we have a little bit of an understanding on four loops we're gonna move on to our next loop and that's while loops so let's think about approaching our tile placing another way we don't know how many tiles we need to place but we know when we need to stop placing tiles another way you can think of it is if you are ever filling up a bathtub with water you will have it keep running water until it hits that top point so then you stop it so it doesn't overflow so try to have that concept in mind as we go into while loops we don't always know how long our while loop is going to run but we know when we want it to stop okay and so while loops also kind of combine loops and conditions because we're going to need to place a condition inside our while loop in order for our program to know when to stop running so we have an example over here so while there are still pink tiles available place the pink tile place the orange tile place the mint tile so that's our while loop or condition control blue it repeats a set of instructions while that condition is true so in this case the computer will place tiles while there are still pink tiles available so going further into it in a while loop the computer checks if the condition is satisfied so once that condition is met it executes uh it stops executing the tasks but if it's not met it's going to continue iterating um so again it keeps going and going and there's a slight risk in while loops where you could cause an uh an infinite loop but we'll get into that later so when to use a while loop use it when you know um when a program should stop but you're not quite sure the number of times you need your code to repeat itself okay so let's take a look at this task we have at hand so we're going to do the same tile placing but this time with a while loop so i'm going to place the pink the orange and the mint and then we need to select a condition so we can see we have a few options over here and see we can choose if there are empty slots under 9 tiles are placed under 15 or while the computer is running so what happens if we just click under 15 tiles are placed i'm just i want to see what happens so we run this code and it looks just like it did before and we can see that everything's going in but our while loop stopped and that's because we hit the condition that under 15 tiles are placed once that condition became false then we stopped it stopped running now what we really need to do is use while there are empty slots so let's see what happens we're going to run our code again so you can see now it's going to continue going and it's going to stop right when it hits that final point where there are no more gray top gray tile spaces and every single one of those is already taken up great so again that's the while loop and now we're going to move on to the next one for each loops which i think are always fun um and while we're going into four reach loops this is where you're gonna have to kind of remember all that stuff we talked about with lists um because when we use a for each loop we're actually iterating through a list um so the best way we can think of this is let's take a look at our example again we define a sequence of desired tile colors so that's going to be our list and tell the computer to repeat the instructions for each item in the sequence or the list so let's take a look at this nice example we have over here we have a list it's called festive list it's pink green red pink green red our loop for this would be for each color that's in our festive list we're going to place the tile so what happens when we use a for each loop is it's going to access the element of every single item in a list so each one so this is when you know you don't have to know too much uh you just have to know the size of your list um and your program is going to do the rest so you may have noticed that the program looks a little shorter than the ones we used before that's because we only need to write place list once because the pink green red repetition is already described in the list okay so the sequence we used above was a list but we can use other similar data types the umbrella term for those is collections so we may also call forage loops collection loops so like we been discussing use this loop when you need to perform a task for every item in a list or when the order of things must be maintained in this case in our lights case both were important a tile must be placed for each item in the list and the order of them is essential to the pattern okay so here we go we're going to do this again we're going to place the same 30 tiles as before but this time we're using a for each loop so if we look at our example in front of us we have three lists to look at we have a festive list and inside we have different items it's pink green red pink green red um continuing on continuing on we have our moody list which is blue purple silver and that's just going to repeat a bunch of times and then we have the pastel list that uh we've come to know and love which is pink orange mint pink orange mint um and so my personal favorite right the best one yeah um okay so now let's have this work so we already have the first part of the code ready place tile color loop for each and then we're going to choose what value for each color and festive list in each color in moody list or for each color and pastel list so i'm going to choose pastel list and we're going to run our code so you can see it's everything we already know it's going through every single item in this list so i wonder if i can highlight it yes i can highlight it so every single item in this list it's going to iterate through and it's going to place that tile great um jamie do we have any questions or comments from anyone um i don't think so but if anyone has any questions or comments or if they want to see what either the festive list or the moody list look like maybe we can try those out um yeah i think it's a great idea uh do you want to go with the festive list or the moody list you know i'm feeling a little bit more festive right now than waiting so let's run it so you can see that it's going to perform the same task but it's going to do it with the different color items because that's what the list said so one nice thing is that we can use this with different lists and it's nice in that way because we didn't have to change much of our code we just had to specify which list we need it to iterate through okay so moving right along let's put it all together um and we're going to actually kind of look at what this looks like in python so a lot of things that are going to go on here we need some variables operators data types functions control flow lists and loops okay so below we have a few examples and if you're looking at the syntax and you're very confused don't worry because we're going to go over it in just a moment so i'm going to copy this and i'm going to paste this right into my code so what this is saying um here we'll you know we'll run it first so i'll run this code you can see it's already placing these different things it's a different now we're doing mint orange mint so this one is actually representing a for loop so what it's saying is we're going to have this repeat x number of times and in this case 10 times we know exactly how many times it's going to repeat and now let's kind of take a look let's replace this and we do it with a while loop okay so here we go we have our while loop in python so while we have a variable that's less than 10 we're going to place orange we're going to place mint then orange then mint and at the last part we're going to increase i by one and again we'll talk about more about why this happens when we get it to it in our lesson but this is just to make sure we don't run into an infinite loop so let's run this code you can see it accomplishes the same thing so that's something to be aware of for loops you can write an equivalent for loop as a while loop it's really kind of up to you what you're trying to go for a for each loop is a little bit different because you need to have some type of collection to iterate through but um whatever you can write as a while loop you can technically in most cases write an equivalent for loop okay so let's just go and take a look at this review a loop is a structure in programming where the instructions are written once but a computer can execute them multiple times each execution of those instructions is called an iteration for loops or count control loops repeat for a specified number of times while loops or condition controlled loops repeat until a condition changes and finally for each loops or collection control loops repeat instructions for each item in a collection okay so now um we're not going to do the example here because this is just letting us play around with it but we are going to go into the next section so i'm going to actually take this out um you could hit the next button if you like but if you're in the catalog time taking a look at this um the syllabus you can actually now go to that second loops lesson i'm gonna open this in a new tab okay great so we're in an introduction and before i move on i'll just check in with jamie again do we have any questions or anyone have any comments about loops so far um so someone had a question i just answered it let me see i might have to scrub oh um pepito suarez um asked what the difference between the first for loop we went over versus the for each loop we went over um okay you wanna like quickly um go over that but yeah sure so the difference is with the for loop we knew exactly how many times we wanted to repeat an instruction and we created the iteration sequence ourself because we specified we want you to start at zero and we want you to end at let's say 10. so we're saying you're going to repeat these instructions 10 times now before each loop is a little bit different that one we're going through a collection kind of like a list so for every item in a list whether that list is 10 items long or 100 items long the same instructions are going to be applied to each element in the list until every single element in that list has been covered that about sums it up what did you say jamie uh i said pretty much the same thing um first for loop was just a certain number of times while the 4h loop is going through items level analysts until you get to the end awesome and they're both they're both pretty much syntactically similar in python which we'll show which is like a subtle differences and actually you can use a for loop to iterate through a collection so yeah we'll cover that okay so let's actually start looking at these loops in python and we have an example suppose we want to print each item from a list of dog breeds we would need to use the following code snippet so again what we're looking at here is trying to print out every item of a list without loops so what we do is we print dog breeds at index zero then we print it again at index one we printed again index two index three and x four um and you can see that it's not that inefficient because what if we had a list that was a hundred items long would we write a hundred print statements so we can see every item in that list we could but it would take a very long time so luckily as we now know python gives us an easier way to do this by iterating through every item in a list we can use loops so in this example we're probably going to be going through a for each loop because i know that we're going to be iterating through a list so once again in this lesson we'll be learning about loops that let us move through each item in a list loops that keep going until we tell them to stop and then loops that create new lists all right interesting and the loops uh the loops that create new lists called list comprehensions are not something we went over in the previous lesson so it'll be like a new cool yeah those end and they're like definitely my favorite type of for loop person so guys you're getting a surprise edition okay so first let's paste the following code into a script dot pi so i'm just going to follow that so we can see already in script.pi we have a list it's called dog breeds uh we have items french bulldog dalmatian poodle kali and now we're going to print each of these items out and this is using the for each loop um so we'll go over that more in the next one but basically it's so much easier to print those all out we only needed two lines of code to print every item unlike here where we needed five lines of code and again this would change if our list was 30 50 100 items long we would still only need two lines of code these two lines of code right here to print out every item in that list okay so first we're going to go over creating a for loop and so this is going into how to use a for loop for each loop um sometimes this goes back and forth in terms of what it's called it is a for each loop even though it is also technically called a for loop here so we're going to learn how to use a for loop to go through a list of collections okay so for loops let us perform an action on each item in a list using an element of a list is known as iterating as we discussed before but let's actually kind of go into the syntax the python syntax of how we accomplish this so the general way of writing our loop is for a temporary variable in a list do something so there's two keywords that we're actually looking at here one is the four keyword and two is the in keyword so when we say four this kind of lets our program know that we're going to start repeating something for x a number of times then we'll learn about the temporary variable so this temporary variable is almost like a loop control variable it's going to represent each of our iterations and we can use it um we can use it inside the body of our loop and we can use it to kind of grab elements of a list but we'll see that then we have the in keyword and that's going to let our compiler know that we're going to loop through something inside of a list so for our temporary variable in the keyword and then we're going to add in our list variable and then underneath that inside the body of it we're going to perform an action so let's take a closer look and example of this so 4i in dog breeds print i now why did we choose i for a temporary variable well we can actually choose any name for our temporary variables so we can see right under this we see four dog and dog breeds print dog the interesting part is it's going to print the same thing we can name our temporary variable anything dog is a little bit better in this case just because it relates to our list but there's no problem with going with i so one thing to notice that with all these examples the print statement is indented everything in the same level of indentation after the for loop declaration is included in the for loop and run for every indentation if we don't indent we'll get an indentation error okay so let's run this code we can see immediately we get an error indentation error expected an indented block so this comes from line six over here because it's not indented correctly so if we just indent that like that we can see now it's inside of our loop so if i run this now we can see that everything prints so if we look at board games we have settlers of uh katan uh carcassonne power grid and two other ones um so for every item in that list all we're doing is printing that item but now let's write our own for each loop that prints each sport in sport games okay so let's actually give this a try so first i'm going to use that for a keyword and then i'm going to specify my loop control variable so i'm just going to do that in this case they want us to use the they want us to name this value sport then i'm going to use the in keyword that lets us know that we're going to use um a list and in this case we're going to use sport games support games i'll put my colon there and then when i go in you can see that it usually automatically indents it for you because it knows that if we want something to happen inside the loop it needs to be inside the loop okay and all we're going to do is use a print statement so i'm going to print the value of sport so i run this code and now we can see that it went ahead and printed every item in the order that it appears so we saw football football american hockey baseball cricket so the order that it appears in our list is the order that um it was iterated through and printed great so now we're going to talk about using range and so this is a little bit more common to what we saw before with for loops in our um previous exercise where we were working with the tiles this is where we're going to specify how many times we want it to repeat so this time we're not going to use a list to go through it so as i said before we're not always going to be iterating through a specific list we'll just want to do an action multiple times for example if we wanted to print out a warning text three times we would say something like the following so we can see here four i in a list of length three print warning so we had to iterate through a list of length three but we didn't care what was in that list to create these lists of length n we can also use the range function so range another key word to keep in mind takes in a number n as input and returns a list from zero to n minus one what does that mean so if we look at this example here we see zero through five equals range six and now that value of zero through five is the list that contains the values zero one two three four five and jamie can you say why it's starting at zero um so this is basically just it's a python thing it can differ in other languages but python is what we call zero indexed so because of that when you give when you just give range like one specific number so if i do like range seven range six whatever it's going to start at one and then it's actually going to end before the number i specify so for range six since we give the parameter six it's going to go from zero one two three four five and end at five um other programming languages might have might be different they might be indexed at one um so it's important to know like with what depending on what programming language you use to know this because you may have to like change up your for loop or like whenever whatever function you're using depending on if it's zero indexed or one index thank you so and this might be very similar to what we learned in the list last week where indexes in python start at zero so this is coming back to us in our list um so we can actually do that warning program that we tried to before just by writing for i in range and then having our value three inside of our range print warning and that's going to print warning warning warning so let's use our range function of for loop to print out the value of promise which is on line one five times so we're going to try this for i in and now we're going to say what list we're going to use and we're going to use the range function to create this list so i'm going to type in range and it says five times so i'm just going to use five colon and then we're going to go to that next piece and we're going to print premise okay so let's run this code and we can see i will not chew gum in class is printed five times and just to make sure we have an idea of this if i were to just say let's not care about promise what if i just wanted to print i what would happen you can see that it starts at zero it prints zero one 2 3 4. so just try and keep that in mind and you can see how much easier it is let's say i wanted to print out the first 20 numbers you can see that it doesn't matter that i want to print more values or create a larger range it's still just going to take those two lines of code to output this value okay one important note about range which i feel like some people have quite this question on their mind is you can actually specify range to start at a different number than zero you're not always start stuck at starting at zero um and there's also like many different other things you can do with range function um yeah i'm so happy you mentioned that because we're going to do that all right so just like jamie said this means we have to set our uh our values inside our range function a little bit differently so let's say i wanted to start at 10. so instead of starting at index 0 we're going to start at 10. i'd add a comma and then i believe what i would say is where i want it to end next so let's say i wanted to end at 20. let's see what happens if this works or if this breaks things it doesn't so you can see that now it's going to print 10 11 12 13 14 all the way up to 19. so again it's just like jamie said it's our first value is where it starts our second value it's going to end one value before that and that's something that could trip you up when you're first starting with loops so just always remember that that's going to be the case now the one other special thing we'll jump in before moving on to the next piece is we can say what our iteration is so in this case we say 10 and then 11 then 12 because we're only adding 1 to i but by adding one more comma and i believe if i just write let's say 2 let's see what happens will it break it doesn't break it actually works and it's going to print every other iteration so we start at 10 then it's going to say plus 2 so our next one's 12 plus 2 14 plus 216 plus 218. um i'm really glad you mentioned that because i think that's just a very fun part of range yeah i like i like when i like use new functions to like look up what all the different parameters you can put in are because they're fun to play around with and arrange a lot of cool different things a lot of cool different things okay oh so here's something we discussed a little bit before um infinite loops these are loops that are problematic because they run forever so in preparation of me knowing that we're going to run this i'm actually going to um get a duplicate tab you'll you'll understand so let's take a look at this example over here we have a list of my favorite numbers and we have five numbers in there for each value in my favorite numbers we're gonna append one when we run this code it's going to be never ending because at what point do we stop as our as we append items to our list that list gets bigger so there's never a point where a loop can stop so it's going to run infinitely this is a problem it's dangerous for your code a program that hits an infinite loop often becomes completely unusable and so one the best course of action is to never write an infinite loop but being learners sometimes it happens and we're going to make that mistake if we accidentally stumble into an infinite loop while developing on our own machine we can end it by hitting ctrl c to terminate the program because that's the only solution at that point now if you're writing code in our online editor like we are here we're going to have to refresh the page so let's take a look we have two lists of students students period a student's period b let's write a for loop that goes through each student in student period a and adds it to the end of students period b okay let's give this a try so i'm going to write 4 student and students period a we're going to say an appendix okay then we're going to say students period b dot append student we'll run that and let's kind of see what this really did so we're going to go ahead and we're going to print student so alex brianna sherry and danielle those four items are actually now in students period b so if i actually go really quick and let's say we'll print students period b we can see now our students period b contains all of those students because we appended them into that and i believe a pen we learned about in the previous lesson on lists but let's say we made a typo and instead of using students period b we actually appended it to students period a i'm going to copy this real quick what happens now so we're going through every item in students period a and we're going to append student to student period a so this when we run it is not going to be happy no we're just going to be waiting here because there's no way this will ever end so we can't even process it so you can see that we're just having issues here so it's not going to happen you can see that it disconnected reconnected and we still have that loading bar happening so what i'm going to do is i'm just going to x that out and i copied our code so now we can go back in and fix our code so that we fix this infinite loop awesome okay so i do have to run all these again so there we go we fixed our infinite loop and everything's fixed so i'm actually going to skip ahead to while loops for now but definitely feel free if you're going through this on your own uh take a look at break and continue they're super useful inside our loops but i want to go make sure that we have enough time to go through some of our challenge projects so now let's take a look at how we can use a while loop now we already remember that using a while loop it's condition controlled so as long as something's true we're going to continue repeating the content of the code well let's take a look and we can still use while loops iterate through lists so we'll see this example here we have our dog breeds list we create an index value and while our index value is smaller than the length of dog breed and our length for this is five we're going to print the value at that index and we're going to increase index by one and the reason we increase index by one is to prevent the while loop if we don't use that then we're always going to have a value an index that's smaller than the length of dog reads so there's never going to be a stopping point for a while loop we're just going to have to refresh our page again so every time the condition of the while loop in this case indexes less than length of dog breeds is satisfied the code inside the while loops run okay you are adding students to a poetry class the size of which is capped at six while the length of students in poetry list is less than six use pop to take a student off of the all students list and add it to the students in poetry list so if you remember the dot pop function it just takes off a value from a list so we'll see this in action so let's see so while the length of students in poetry is less than six what we're going to do is we're going to say students in poetry dot append all students dot pop and at the end i do just want to print this uh students in poetry and i also want to print out all students so we'll we'll take a look at it all so there we go so i'm going to run this code okay so we're just seeing the output here so the first thing and i'm going to run this again just so we can kind of zero in on it we'll print students in poetry so who was added loki arias obi alexa minerva and dora so these were the students that were appended to it now let's take a look at all students now when we look at all students it's alex brianna sherry and danielle because when we use dot pop what happens is it removes the last value from the list so basically what we did was we went through all we went through um what we did is while the length of our poetry class was less than six we added the last value of our all students list so the last element so the first one would be loki we appended it to students in poetry while removing that element from all students so we kind of did a big switcheroo does that make sense awesome yeah let's see if anyone has any questions about that in the chat awesome so in the meantime we're actually going to switch on over um we're going to leave this for a bit if we have more time at the end we can come back to this lesson but i do really want to go over all those challenges with you okay so i'm going to x out and we're in cs 101 loops and we're going to take a look at this article that says loops code challenges okay so our first challenge is to create a function named divisible by 10 that takes a list of numbers named nums as a parameter and we're going to return the count of how many numbers in the list are divisible by 10. so first we'll write out our function so def divisible 10 and our parameter is going to be nums okay so what we're going to do is we have this list and we'll see it here um in this case we're going to look at 10 25 30 35 40. we're going to go through each element in that list and we're going to return the number of times we have an element that's divisible by 10. so what i want to do here is i'm going to use the for each flue so 4i in nums so that's how we're going to iterate through each value in our list we're going to check if it's divisible by 10. so if i modulo 10 equals zero also just for anyone who might not know what modulo is um the percent sign it's really cool basically what it does is it just um checks the remainder you have when you divide that number by 10. so if it was 11 mod 10 it would be equal to 1. so we're checking for numbers that are divisible by 10 that wouldn't have a remainder exactly thank you jamie so if our value is divisible by 10 we want to add to count but that means we need to create a count variable so before we even go into our for loop the first thing i want to do in this function is declare a variable called count and set it equal to zero then we'll loop through each value in nums if the element is divisible by 10 we're going to increase the value of count by one and then finally outside of the for loop once we've iterated through every element we're going to return the value of count so let's go ahead we'll run this code okay so it returns three and let's see if we check our answer this is correct it's correct with the clapping hands i love the clapping hands so again um we'll just go through this one more time so our first value was 20 and since it's divisible by 10 we increase count by one then we go back to the top of our code we go back to the top of our loop we check is 25 divisible by 10 it's not we ignore it now we're at 30 30 is divisible by 10 increase our count two and then we are going to go ahead to the next one 35 not divisible by 10 we ignore it then we have 40 our last value now our count uh increases to three and then since that's the last value return the value of count and that's how we solve this yeah i think uh another um good practice when you do like little challenges like these is you can write your own test cases to test like any edge cases or for instance uh like all these numbers that we're testing against are all um oh my god not floats uh what's the other thing called double and oh and started um so we might want to test you know if we did 20.0 versus 20 like will that work um you might want to test um i don't know like different you know kinds of numbers because all these are like twodigit numbers um yeah definitely like something to consider when you're doing these little code challenges um so that's actually a great point so i was curious so but we turned our 20 um from an in to a float just by adding that decimal point and it still returns the same value and the nice thing is we can increase this list there's nothing that's stopping us so i'd say 100 234 247 190 it still runs the same code you can see that we don't have to do too much more and now it returns six okay so now let's go on to our next coding challenge delete starting even numbers write a function called delete starting events that has a parameter named list lst the function should remove elements from the front of lst until the front of the list is not even the function should then return lst and let's take a look at an example so if our list was 4 8 10 11 12 15 and then we called delete starting evens with it it should return 11 12 and 15. now the reason for this is we're going to delete four we delete eight we delete 10 because it's an even number so make sure your function works even if every element in the list is even okay so let's give this a try so it's def delete starting even evens it's going to accept lst okay so one thing that kind of struck out to me is the word until it will remove elements from the front of the list until the front of the list is not even to me that sounds like a condition so for this one i want to go through it using a while loop okay so while and we're going to create that condition let's see lst well it's first index right um divided by well modulo 2 equals zero so this is how we're going to check that it's even so while index zero actually nope we want to stop when it's not even so while the first element of our list is not an even value what are we going to do so what this is going to involve is changing our list value lst so what i'm going to say is lst equals lst so you might remember this a little bit from uh last week when we were talking about sub um splicing or getting sub values from a list okay so what this means is we're changing our value of list to include every single value except the one at index zero right so one this represents the first index then this kind of this uh colon here kind of represents um until and then it's blank here because we're going to say until the end of the list okay so that's what we're going to do and now let's see what happens at the end we return list so to check this out let's take a look at this first example here let's run this code okay i think it was supposed to be oh i'm sorry i was we were supposed to do equals so while the first element is an even number my apologies for that so while our first element is an even number because when we use modulo 2 the remainder is zero we're going to return list equals list at the first at element at index one and beyond and again since we're looking at zero based indexing it just removes that first value okay so here we go we have 11 12 and 15. now let's make sure this one works over here and i'm gonna just spoil you guys and say that it's not gonna work we have an index out of bounds error and that's because at one point we delete every single value in this second list here so 4 8 10 so we just kept deleting it deleting it deleting it so once it hit that fourth iteration and it goes to reach for the index at zero there's nothing there so that causes an error so we need to add one additional condition before we check if um there's something at the zeroth index so this is one we're going to use um it is the length at lst is greater than zero yeah and if any of you watched the uh control flow um live streaming a couple weeks ago this is kind of similar to that where it's um we talked about how you might have like multiple conditions in like within um like in this case in those cases it was like an if or an if statement but in this case it's a while statement um so that way it will only go into the while statement if both of these conditions are true so that will avoid this error that we just ran into exactly so that was the problem we ran into and so now what we're going to do is while the length of the list is greater than zero and the first value in our list is an even number we're gonna run that code so this should stop it from giving us an error because once we see that the length of our list is zero or once it's zero it's going to say okay forget it we're going to return that value and let's see if running this works okay now we see it just returned an empty list so now we know that we're working with the edge case that we might have a list that's all even values um also uh giannis brought up a great point in the chat um he said so where you put the uh lst equals lst like where you splice the list yeah you could also decide to like delete the item in the list that you're currently on using the delete function there's also i really like this code challenge there's also a lot of different ways to do it you could technically do it using a for loop as well um it might be more difficult with a for loop loop from the beginning and once you get to um are you trying to get to an odd number even i think once you get to an odd number yeah then like stop the loop um there are definitely a lot of different ways you can do this and um a lot of times when i have coding challenges like these i like to just like maybe write out on paper like think in my head like okay what am i doing at each point in this like little algorithm and like how can i do how can i translate this to a python code yeah that's i totally agree with that always write down your plan um and it makes coding so much easier and that's the nice thing about loops like we discussed before in a lot of cases they can be interchangeable okay so we have about five minutes left so let's see if we can get through this final code challenge create a function named reverse list that takes two lists of the same size as parameters and we're going to name those parameters lst1 and lsd2 the function should return true if list 1 is the same as list 2 reversed otherwise we'll return false so looking at this example if we send in a list that has a value 1 2 3 it should match the value three to one it's the first element matches the last the middle matches middle and then the last element of the first list matches the first element of the second list okay so let's get into this so we'll create this first so it is def reversed list so our best first list um and we're going to take in the front with lst1 lst2 so because we're working with two lists um i kind of don't want to use just a for each loop or i'm iterating through it i think i'm going to use a just our normal for loop where we're going to define that range let's see 4i in range and what i'm going to do is i want this to start at 0 and go to probably the length of one of the lists and because it already said we're assuming that the parameters will always have even um sizes that we don't have to worry too much of that so i'm just going to say length of lst1 so just to get you guys give you guys an idea of what we're working with i'm just going to print let's see lc1 okay so i'm going to take this bit of code here just because i want to i want to call the function uh without returning anything for a bit so we'll run this code so we can see it takes out one two three because we used i but what about if we're trying to use lst2 what happens when i run this well it gives us three two one but what i really want is i want it to almost flip it i want that last value to be printed first but how do we go through a list in reverse now i'm not sure if you know this but we can actually put in negative index values so index at negative one so i'm not going to do this inside the for loop actually changing my mind i'm gonna do it right outside the for loop and we'll just uncomment this so what happens if i try to print this value expected oh i think it's because you have the for loop and nothing um oh below it you can write it's coming up let's take that out so we can see that we're now getting that last value of one here because i use negative one as the index value i can do this so at negative two you can see it's two negative three we can run that and now what happens if i try negative 4 we're going to get an error because it's index out of range so again just keep that in mind so now that we know that we can kind of use negative values to help us out how can we use that to help us in our for loop so before we were using i right to print out each value of lst1 but now i want to switch this to lst2 but i want to use something about something um with this negative value so we know that if we use negative 1 we can start counting backwards just like we did before now what if we decrease it by i so if we took the value of negative 1 minus i what do we get 1 2 3 which is our loop in reverse so if we look at an example of this in our first one alex can you uh zoom in potentially because someone just uh asked zoom in for visibility definitely i hope this helps a little bit more yeah thank you so much cool of course um so we're taking a look at this so in our first one i is zero negative one minus zero is negative one list two at negative one is this value one and so then in the next one our in the next iteration i has a value of 1 negative 1 minus 1 is negative 2. lst 2 at index negative 2 is 2. so now that we know how we can get those values we're going to use a conditional so let's see so if lst1 at i is not equal to lst2 at negative 1 minus i at that index just like we discussed before it's not equal we know it's false so we're just going to return false and if we get through that whole loop and we never run into a case where they're not equal then we know that they're equal and we'll just return true okay so i'm going to take this out and we're going to try and see if this works okay so we're going to run this okay so our first value is true one two three matches three two one in reverse now let's try that over here where we know looking at this 153 does not equal three to one run it and now it's false yay i'll check our answer and we got the clapping and everyone should clap for themselves because that's pretty awesome so it is two o'clock so we are gonna have to end this but you should definitely join us next tuesday for another um cs 101 live course i believe we'll be going over strings so it's going to be really fun and we look forward to seeing you there definitely check out our events page where you can register for it and you'll get an email that reminds you when we're about to start our stream all right thank you again jamie um thank you everyone for joining and we hope you have a great rest of your day yeah thank you so much for all the great questions and wonderful comments in the chat um hope to see you a lot of you at future live streams