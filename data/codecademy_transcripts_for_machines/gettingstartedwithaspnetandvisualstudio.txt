how's it going everyone I'm Carlos with code Academy and in this video we'll learn how to use Visual Studio in order to create and develop a razor pages application we'll start by generating a project template explore the folder structure to see how the application was built and then run it to see it live now visual studio is currently available for Windows and Mac and if you're in a Linux you can use a separate program like monodevelop or you can use a dotnet CLI which we'll cover later in this video so let's start out by launching Visual Studio and right off the getgo we'll be provided with two options want to open up a project and another to create a new one using a template so we're gonna go ahead and create a new one so let's click on you a visual studio provides us with a wide range of templates depending on what kind of project you want to build from multi platform to create crossplatform applications to iOS from mobile development to dotnet core console applications and others and the templates provide us a skeleton for the app that allow the user to get up and running in no time so we'll be using asp.net core to build a razor pages application so let's go to the dotnet core tab and select web application under the app section well click Next so here we'll be able to select the target framework for a project I'll be using net core 3.1 which already have installed so I'll be selecting that and then we won't be using authentication for apps so we can leave this as no authentication then we can click Next or we'll be naming project so let's go ahead and name our project test app which will also be the name of our solution now if you're wondering what exactly is the difference between a project and a solution well the project contains all the files required to compile and execute the code and is defined with a dot C as projects tension and the file name and a solution is simply a container for one or more related projects and is defined by a dot SL an extension and the file name also make sure to keep note of the location which is where your project will be stored in since we'll be using the.net CLI and navigating to that directory in order to run the application so once you create this a folder with our project name will be created containing our main project and solution folder let's go ahead and create it now we can see on the lefthand side our solution pad here and I'll zoom in a bit more so you guys you can see in here we can view and manage the project or solution and the files contained within so let's expand our project to see what folders and files are created you'll see we have a dependencies folder a pages folder and properties www root app settings program and then startup dots yes so let's go ahead and go over watch what is included in each one and what they're used for so the first folder we'll look into is the dependencies folder and this folder simply contains their framework and packages that are required for the application to run next we'll look into is the pages folder now this folder contains all the pages required for a project each RAZR page is made up of two files a dot CSS HTML file which contains RAZR syntax which is a combination of HTML markup and csharp code and a dot c HTML dot CS file which holds a the logic and behavior for each page we'll find a launch sending stock JSON file within the properties folder and in this file we have the settings are going to be used when we run the dotnet core application the most important point that you need to keep in mind is that these settings will only be used with your local development machine also note that launch setting star Jason is only used by Visual Studio if there are settings that your application needs to use you'll be storing them in apps in Jason which we'll look into in a bit now that www root folder contains all the static files that the application can use so any HTML or CSS or JavaScript files will be stored in here we cannot place a nice eShop or RAZR files in here by default razor pages uses the CSS library called bootstrap which can also be found in this folder under the Lib directory all application settings will be contained in the app settings Jason found from a database connection string to an access token asp.net core will load the values from this file and from the configuration file related to your current environment now there will be two main environments you'll be working under which describes the environment you're providing to the customers and development which is the environment which developers work on so if you're in a development environment it will load up the app settings development Jason found and if you're in the production environment it will load up the app settings dot JSON file and her project will find that that there are a few settings already created for us for example the log level property under logging specifies the minimum level to log for selected categories by default our application will log anything under the information category which is given when a method ends normally it's also important to note that any changes made here will require us to restart the application to take effect next file we have is a program dot C as file which is a csharp file that contains the entry point for the program and in this file the main method is a first method which gets invoked lastly we have the startup dot CSV file which is a csharp file containing the startup class where the applications features and services are configured so if you go ahead and look at our application for that file and we look at this configure method which is this whole block of code this method is called by the runtime and it's used to configure the HTTP request pipeline so we can see how it starts out by allowing redirection allowing the use of static files use of routing authorization if required all the way up to giving access to any endpoints that we create now that we have an understanding of your folder structure let's go ahead and run the application to see what happens so let's go ahead and click the Run button on the upper left corner which will compile our code and run the application now we'll see that a popup comes up saying that there is no HTTP development certificate found in a just an HTTP development certificate ensures that any information that is being passed from your browser to the server as that is hosted on is secure and encrypted now there's a lot more to it than this from encryption to digital signatures but for now all you need to know is that a certificate simply allows traffic to travel safely from a browser to a server so let's go ahead and install and trust this certificate and that dialog will display asking for your passwords enter your password and select ok once a build a successful Visual Studio launches your browser and navigates to localhost 5001 and we're able to see our out template application now let's go ahead and run our application from the command line using don''t CLI although it's not necessary and we can build and run our application from visual studio it will still be useful for more advanced techniques in the future such as restoring dependencies for a given application or maybe updating specific packages now in order to do so we first need to install the.net core sdk which is found in dotnet Microsoft comm slash download go ahead and download the latest build if you're using windows you can launch the Visual Studio installer from here we'll be able to modify installation programs so we can click on modify and in here we can really customize visual studios with setting up packages for the platform in our case who want the SDK so we can navigate to the individuals component tab and check it from the list under the dotnet tab you'll see that I already have it installed so I don't need to modify it once you're set you can modify Visual Studio and it will install the SDK for you ok so back in our project make sure your application is not running you can stop your application from running by clicking on the stop button on the upper left hand side it's open up a new tab and let's open up a terminal you can use whatever terminal program you're comfortable with I'll be using I turned form I'll go ahead and zoom in a little bit more ok so first we're going to do is navigate to our project directory so I know my project is under a project directory in my home folder so let's go ahead and navigate to project stamp and here we'll find that we have our solution file and our project so let's go ahead and go inside our project and then I'll clear this and then list what's contained and that directory and we'll find all the files and folders that we were talking about earlier that essentially allow us to run our application next thing we want to do is check if dotnet is installed and we can do this by running the command on so that was installed properly it will give you some information about the usage with some options you can provide to the command if it wasn't installed properly you would probably receive an error that says something like that net is not recognized as an internal or external command so you would have to go through the installation process again so once you confirm that the dotnet is installed you can go ahead and run dotnet run this will log some information indicating that are the port our app is running at and now we can actually navigate to the same URL localhost 5001 and see our template application running so you can see here the logged information about the ports and that it's actually running successfully so let's go ahead and go to localhost 5001 and you'll see our application is running now you can shut down the application by we're going to your terminal and just doing ctrl C now if you're curious about other commands that are available we can also run Dutton it help and let me clear our terminal here we can run that nethelp in order to actually give us information about some sdk commands that we can run for our application formatting you packages with add to managing development certificates with dev shirts you can also just run it by doing Donna H which will be the same command visual studio is filled with many useful features that will make building and structuring an application a very fluid and streamlined process we'll be going more in depth into a lot of features provided as we go through the lessons but I hope this video gave you a better understanding on how a template application is built with Visual Studio thank you all for watching and I'll see you next time