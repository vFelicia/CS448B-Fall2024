hey everyone I'm Matt a developer from Ohio in this video I'll give you some tips for working on a software development team you might be learning to program and just about to start on your first team project you could be a newly hired developer at a software firm or a seasoned developer looking to make your team more efficient this developers were often better at writing code and fixing bugs than we are at working together I hear programmers say I can do it faster on my own or my team would just slow me down and I get it it can be tough to let others take some control especially if you're used to a more independent workflow but here's the thing an effective team is more than the sum of its parts and it's absolutely necessary in realworld development consider these scenarios the project is simply too large for one developer to reasonably do on their own the project covers a lot of different specific technologies and any one developer isn't likely to be an expert in all of them the project has a deadline so some parts need to be worked on simultaneously these are all realities of most product development which means that you'll need to deal with them if you work as a developer or ever want to there's plenty of things that your boss or manager can do to optimize your team's work but how can you be the most effective collaborator over the rest of this video I'll break down my tips for how to communicate effectively keep momentum and actually work together we'll start with communication do you ever come across a piece of code that's just impossible to read well every piece of code was written by someone so you should try your best to avoid being that person make your code easy to understand other developers and your team should be able to grok the purpose of a class function or file almost immediately if they're walking around the office asking who wrote this and why then your work isn't easy to understand follow your team's guidelines a lot of companies and opensource projects have style guides which provide conventions for function naming code formatting comment styles and so on following conventions makes your work easier to parse if your team doesn't have a style guide you should always try to match the existing code as much as possible writing code is not the time to voice your opinion about tabs versus spaces make your file is easy to find by filing them away neatly if every script file ends up in one big store folder nobody will be able to find anything in my experience this leads to a lot of overlapping functionality developers will add necessary features if they can't find them because lost code is as good as no code if your team's project directory is a mess consider having a talk with everyone about how to best sort it out the best way to make your work understood is to simply name your files functions and variable as well this is most of what people mean when they say selfdocumenting code always write descriptive names in modern development with less file size restrictions and more IDE autocomplete features there's never a reason to use shortened or abbreviated names if you ever find the name isn't enough add a comment don't ever leave it up to future developers to guess speaking of descriptive names and comments remember that most communication between developers is documentation when welldocumented codebase keeps all the developers on the same page makes it easier to read and work on legacy code lets developers collaborate without going through the original author and helps track and resolve issues unfortunately documentation also takes a lot of time especially if you have to go back and do it later feels like it takes time away from working on new features and isn't really part of the same skill set that makes you a great programmer but the truth is that it's not that hard and it's important to keeping a healthy maintainable code base the best thing you can do is mix it into your existing workflow documenting is hard when you have to go back and add it but it can become part of every step write some new code document it right away commit and push that's documentation on its own and I'm not talking about closing your IDE and adding some paragraphs to the company wiki just use thoughtful names leave descriptive comments right good commit messages that sort of thing you're already writing code and committing your work it doesn't actually need to take any longer than it already takes I'm Jason to code documentation is work documentation earlier I said that lost code is as good as no code well the same goes for duplicate code if everyone on the team knows who is working on what duplicate code won't happen I'm not talking about scrum or Kanban or any of the other popular task management methodology as a manager myself I've tried all of them methodologies are like diets you can follow a specific set of rules but it really comes down to just eating no more than you need all you really need to do to avoid work overlap is to let everyone know your current task let the team know when you start and when you finish you can use sticky notes in the office send a group message or just stand up and announce it larger teams might consider more elaborate tools but they serve the same purpose that about does it for effective communication remember to make your work understood write documentation as soon as possible and make sure that everyone knows what you're working on next we'll take a look at how to keep momentum my last tip was let everyone know your current task but how do you pick tasks on some teams you might have specific tasks assigned to you on others you might claim tasks on a weekbyweek basis or just grab a new one when you finish the last however you work try to make sure that you're focusing on the right task at the right time that is prioritize your tasks it's important to keep a prioritized backlog which is a list of all the upcoming tasks ordered by which of the most integral to the project in modern agile development the product design can change in reaction to ongoing development that's why it's important to get the big task settled as soon as possible the lower priority tasks can wait or even be abandoned in some cases this is the one tip on here that I personally struggle with a lot when I look at the backlog I often find a more appealing task than the one with the highest priority maybe that top priority is difficult to run interesting if you find yourself wanting to go after an interesting but lower priority task see if you can put your name on it and save it for later sometimes a high priority task stays undone for a long time maybe no developer has claimed it or one developer is having difficulty with it this isn't an excuse to ignore that task and move on to another your team is most effective when everyone can work together on the project as a whole consider these swarm and destroy tactic as opposed to the divide and conquer tactic in divide and conquer everyone works on their own tasks if they get stuck those tasks won't get done on time in swarm and destroy everyone teams up on the tough tasks and blows them away what I'm talking about is limiting workinprogress remember that your team is more than the sum of its parts by ganging up on progress blocking tasks your team can move forward without ever stopping to wait knowing when to swarm is important too the reality is that some tasks are going to be easier than others and it's impossible to perfectly anticipate the complexity of every task this is where standups come in a stand up is just a quick daily meeting with everyone on the team going around the room everyone says whether or not they're stuck on anything if someone is stuck that's when you should swarm of course whether or not you do fullfledged standups is down to your team's workflow as long as you touch base with your team as often as possible you should be good for example I work from home and there's no time that every one of my developers is free every day instead of having standups we have a channel in our chat room for people to post daily status updates so my tips for keeping momentum are prioritize tasks limit work in progress and do standups at least in some form my last few tips are for actually working together I say actually because there's a big difference between a bunch of developers working toward one goal and a finelytuned team working as unit there's one key difference between working towards the same goal and working as a cohesive unit mutual accountability it's human nature to serve our own best interests so that's what we do I've seen it plenty of times one developer is stuck on something and everyone else keeps their own tasks because that's not their problem I've even seen someone deliberately avoid helping his coworkers because he thought it made him look better in comparison that logic is flawed because teams sink or swim together it's in your own best interest to keep a team oriented mentality because it is your problem if the team's product ships with a critical bug or ends up months behind schedule think about your favorite teams for it no matter how good the star player looks the whole team either wins or loses besides isn't it only decent to help each other out when you're working collaboratively toward that finished project it's likely that you'll end up with conflicting ideas about creative direction or the validity of a particular solution this is why we have team leaders when everyone follows the team's lead there is never more than one worth of hangups if you disagree or are unsure about something the lead developer or manager or other leader will make the call if your team doesn't have a leader I'd recommend that you establish one developer as the lead developer having someone to arbitrate even minor conflicts will save a ton of time in the long run of course I'm not recommending that you sit idly by if you disagree with the lead developer you can and should talk to your team's leader if you want to make a change to the product or the workflow if you go against the grain without approval though you'll just end up confusing everyone and slowing down the process most of my tips so far have been about work habits but how can you increase the quality of your team's actual code in my opinion the best way to increase code quality is to simply review each other's code here's the idea whenever anyone on the team commits code or a viewer has to approve the changes and merge them into the project this keeps everything up to the team standards allows for systematic testing and keeps developers accountable for their work your team may have a formalized process for code review and that's great I definitely advocate for mandatory code review if your team doesn't do reviews ask your teammates to double check your work after committing big changes if that's not enough another way to ensure code quality is pair programming pair programming is just what it sounds like to developers at one keyboard one of you will write code while the other place Navigator spotting errors thinking one step ahead and searching for solutions to any problems you run into a lot of newer developers see this as a waste of manpower but it's great for producing more stable code you'll probably make up for lost time by not having to go fix a lot of bugs plus pair programming can be a lot less isolating than burying yourself in the zone pair programming is easy to get running without major changes to your team's process because you can simply ask one of your teammates to help you out for a bit I wouldn't recommend pairing on every task just use it when you need it and encourage your teammates to do the same if everyone is open to effective collaboration the rock will go by faster and easier to recap my tips for actually working together are think as a team follow your leader do code review and try pair programming and those are my 10 tips for working on a dev team here they are one more time make your code easy to understand follow a style guide and use descriptive names mixing your documentation by doing at every step along the way let everyone know your current task so that nobody ends up doing duplicate work prioritize your tasks and bookmark the more interesting ones for later touch base as often as possible so you know when it's warm limit work in progress by swarming on unexpectedly difficult tasks keep a teamoriented mentality remember that you all sink or swim together follow the teams lead you'll end up confusing the team if you don't if you want to make a change ask your lead about it review each other's code to increase code quality and try pair programming to make more stable code and have more fun at work hey thanks for watching you can join the conversation by subscribing to this channel or dropping a comment below and if you want to take your skills to the next level you can start learning at code academy today