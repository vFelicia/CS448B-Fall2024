in this demo we will turn our attention from strings to list lists are sequential containers for index ordered elements and which can grow and shrink in size lists are mutable and in many of these respects they are similar to data structures such as arraylist in Java however because of the way in which python combines object oriented and functional programming lists in Python are probably far more important than arraylist ever will be in Java let's go ahead and get started on screen now we've defined an empty list this is a variable called my list we can see that it's on the left hand side of the equal to sign on the right hand side we have a pair of empty square brackets we've already briefly encountered this and so we know that square brackets are used to define the list ordinary parentheses are used to define tuples and curly braces are used to define sets and dictionaries we can invoke the print method on a list just as we can with pretty much any other python object this is going to return just the pair of square brackets which we see up above because we don't have any elements in our list as we shall see in subsequent demos the print statement will invoke the wrapper function on every object in the list let's go ahead and create another empty list in a slightly different fashion the syntax is on screen now on the right hand side of the equal to sign we have the name of the list class followed by parentheses but you should be clear that we are not invoking any method from the list class this can be thought of as equivalent to instantiating an object in Java using the new keyword along with the Constructor we could pass in a set of values which we like placed into our list but here we have not done so and that's why what we get back is an empty list when we print it out a screen all that we see is a pair of square brackets let's now go ahead and create a list which has elements in it this is done using the same square bracket syntax which we see in cell 1 up above with the difference that we now have values between those square brackets which are separated by commas in this instance every one of those values is a string we have four such values badminton golf basketball and tennis when we hit shift enter games list appears as a list with four elements if we invoke the type function on our list what we are going to get back is list remember that list is one of the three sequence types in Python the other two are tuples and ranges let's now access individual elements from the list we do this using the index of operator this index of operator consists of a pair of square brackets along with an integer index that integer index is currently set to 0 on screen now and you can see that indexing into the list has given us the first element that's badminton as we can see from this indexing in Python starts from 0 in similar fashion if we index into our games list with the index 1 we are going to get golf if we do so with the index 3 we are going to get tennis our list had four elements what happens if we try an index in with a number which is equal to or greater than 4 well we are going to get an error you can see this on screen now this is an index error list index out of range that's because we try to access the Fifth Element using the index 4 there is no such element and that's why the error resulted if you come from java this ought to be pretty familiar it's very much like an index out of bounds exception next let's turn our attention to negative indexes before we do this let's first refresh our memory let's see what the games list contains it has the four elements badminton golf basketball and Tennis let's now try an index into this list with the negative index that is negative 1. we can see that this returns tennis which is the last element in the list if we try with the negative index negative 2 we get back basketball and from this we can discern the pattern negative indexes are going to work from the end of the list backwards when we specify negative one that's going to give us the last element in the list negative 2 will give us the second last element and if we try negative 4 that's going to give us the first element in this Four Element list which is badminton I like to remember how negative indexes in Python work with a shortcut positive indexes start from the beginning of the list and are indexed starting from 0 negative indexes start from the end of the list and start from one and as a result of this we can take the length of the list back on a negative sign in front of it and that's going to give us the first element in the list here our list had four elements the length of the list is 4 we attack on the negative sign and that gives us minus 4 so the index minus 4 gives us the first element in the list if we go beyond this we get the same index error that we encountered a moment ago we now try to index in with negative 5 and we have an index error list index out of range as we discussed in a previous example there are really no restrictions on the kinds of elements in a list on screen now we've defined three lists integers list float list and Boolean list as the names of these variables would suggest they only contain objects of the corresponding type it's also perfectly acceptable to create a list which has elements of different types and we'll get to that it's not very commonly used to get the number of elements in a list we simply invoke the Len function on it this is a builtin function which can work with pretty much any sequential data type here when we invoke Len on the games list the value printed out to screen is 4. in similar fashion if we invoke Len on the integers list the value that's going to be printed out the screen is 5 because of course that listed five elements as we remarked a moment ago there's absolutely nothing preventing us from creating a mixed list which has elements of different types we've done exactly this on screen now mixed list is also the name of our variable and this is a list like any other we can invoke the Len function on it and the value printed outer screen is 8 and we can count and satisfy ourselves that there are indeed eight elements in the list of above lists are mutable we can change the contents of lists and we can do this in two different ways we can either replace one element of a list with another object or we can modify the elements of the list itself both of these are acceptable let's see this with some examples let's go back to the games list which we created a moment ago games list still has the four games in the badminton golf basketball and tennis next let's go ahead and modify the zeroth element to be soccer we've done this by having games list indexed in with the index 0 on the left hand side of an equal to sign then on the right hand side we have a new string which is soccer if we check the contents of games list after this reassignment of the zeroth element we can see that the zeroth element is now soccer We have replaced the zeroth element it used to be badminton and now it's soccer so this proves that lists are indeed mutable changing one specific element of the list does not alter the other elements in any way on screen now we are setting the element at index position 3 to be equal to table tennis and when we print games list we can see that only that particular element has been modified these operations that we just performed were both reassignments we were entirely changing the objects at specific index locations let's go ahead and modify this in a slightly different way to do this let's first bring up our integers list this has the values 10 20 30 40 and 50. now we are going to modify one of the elements note again that we are not reassigning the element we are modifying it the index into the list using the square brackets operator and then we use the unary plus equal to operator to modify the object at index position 1 by adding a hundred to it and when we print out integers list after this modification we can see that that element has changed from 20 to 120. this is a modification let's perform another modification this time of the object at index position 4 we use the unity multiplied by equal to operator we have 10 on the right hand side of that Unity operator and when we run this line of code we can see that the last element in the list that's the one at index position 4 has gone from being 50 to being 500 it's been multiplied by 10. early on in the demo we had created an empty list with the keyword list on the right hand side of the equal to sign followed by a pair of parentheses here we are again using a similar bit of syntax however this time on the right hand side we pass in various values those values are apples bananas Pairs and mangoes this operation does not go through when we run this we get a type error telling us that a list expected at most one argument but got four and this is because we need to modify this syntax ever so slightly let's rerun this command but this time we'll have a not one but two pairs of parentheses around the four fruit names and this time when we hit shift enter everything works just fine the return value when we examine fruit list is indeed a list with the names of all of the fruits in there what just happened the first time around that's on Cell 28 when we passed in the names of those four fruits they were treated as individual values the second time around those four fruit names when enclosed within parentheses were treated as a tuple and this caused the list Constructor convert our Tuple into a list tuples are very similar to lists in that they are also sequential indexed ordered collections but the difference is that a topical is immutable a list is mutable so this bit of code on line 29 converted a tuple into a list and that's why it worked fine do keep this little example in mind it's an example of a rare instance where python syntax is not very intuitive this counterintuitive syntax explains why the usual way of creating a list when we have values is using the square brackets you can see this now on Cell 30 we've simply enclosed all of those values between square brackets and separated them by commas this has the exact same effect as the previous bit of code and the syntax is a lot simpler we still have a list with all of the fruit names in there