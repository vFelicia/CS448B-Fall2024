okay hello and welcome back to co academy um live for creative coding this is session five um i feel like we've come a long way since the beginning of the series which i can't even remember do we start in um march i believe and this is the fifth one so five weeks ago yeah we started off with like introducing um some of you for the first time you know to p5.js a javascript library that is an open you know open source javascript library that we're going to use today as well to do um to create do our creative coding works uh we've gone through like a lot of topics so far so in the first lesson we exposed you guys to the library itself and the core basic structures of the library using the setup function and the draw function and then we looked at how we can create static drawings using like basic uh primitive shape functions and then we also looked at how to create animations um by adding you know um variables and those kind of like basic programming techniques to increment and decrement values over time or over a number of frames and then we also last we actually looked into how to add interactivity interactivity or sketches so that we had our mouse and keyboards driving the animations that we are creating and last week we created this thing called generative arts um no it's cool it was called creative art generator generator art tool something like that something along the lines where we um basically maps different shape functions into our keyboards so depending on which keyboard you created if we were generating this sort of like a pattern of drawing we also looked at how to save our b5.js canvases into png files so you can take them on and like you know post them on social media or use it as your background for whatever you like and that kind of stuff so those are the things that we kind of hit on um today what we're going to do is we're going to build on top of everything that we've learned so far during our live series and again i also want to say that everything that we're talking about um for p5.js is going to be based on this um learn p5.js course that we have on our platform let me actually that's actually a good cue to start sharing screen um and so um we've been going through the contents in this learn p5.js course the first week we looked at this first module introduction to creative coding we're now here in our media module where this module talks about using images and videos inside of our p5.js sketches so we'll be doing a lot of that today we're actually going to be basically focusing on using videos instead of images but this is sort of the content we're going to go through and this um lesson kind of introduces you to combining all of these different media assets into your sketch so and then it goes through you know how to load images and videos in here what you need to do in order for you to load everything but also going through some of like manipulation techniques that you can apply um for your images and videos for example this one you know it walks you through how to use the filter method to apply different kinds of filters on the images we've got a lot of dogo images in this lesson there's a lot of dogs and then we'll walk you also through some fundamentals of what's called the pixel manipulation meaning that you are really getting deep into the data components that comprise an image or a video file so an image file if you go deeper down into the file itself they're comprised of data for each of the pixels that make up the whole image and also for video that means you know that has multiple images and within that each image or the frame it has those pixels inside of it so this um lesson also goes into a little bit of a fundamentals of how you can access those pixels in there to do something like i think in here we've got a video that you're manipulating the pixels into to create this sort of glitchy effect so this is this glitch effect is not done you know in the video itself but it is a filter custom filter applied live as you're playing the video so those are the things that you can take a look at um in this module and for today's um live series what we're going to look at is actually going to be going to doing a walkthrough of this project called interactive video sculpture in here so if you take a look at it this is what it looks like on the le um and just to talk about the project a little bit it's called interactive video sculpture but it's very very um heavily inspired by it's almost like an homage almost to namjoon takes video sculptures i don't know if you guys are familiar with namjoon page works but basically he takes a lot of these like you know old um tv monitors what are what is like a there's an official term for these monitors i forget what they're called yeah i'm not sure either but these are like the bulky ones these are definitely not the tvs that you have in your house right now these are like they have like a fat back to it and then they have like a little bit of a curve and bulky bulkiness to them and um part of like one of the key features of his works is that he would have a number of these put together in like a grid and then they will you know change it show different kinds of um snippets of footages and then they will change in loops or some sort of a time sequential order and what we're gonna do is that because we don't have you know access to all of these like this many tv monitors we're going to use p5.js to basically be able to um draw our videos into a grid into these grids and um we're going to also take a look at how we can add some interactivity in here to show different kinds of videos and not have it just static so that's kind of what we're going to go with for today's live stream series and another thing to mention is that um in the youtube video of the video that you guys are currently watching in the description section there's gonna be links to two um um there's gonna be two links to that you will need for today's live stream one is going to be called what's called starting code and the other one's going to have the solution code or the end code that we want to get to at the end of the series and those are ready for you and actually there because the thing that we're gonna do today that is different from the first two live series is that we're gonna be using this platform called p5 web editor instead of working on the codecademy platform so i've actually gone ahead and moved all the instructions that you will find in our platform into this starting code file so that if you have an account with the p5 web editor you should be able to open it and if you want you should be also able to duplicate that and then save it to your account so remember um you know if i web editor if you first log in you're not going to see this hello js6450 which is my college id actually throwback yeah i've been using this for so many years since i graduated college but like i use it for a virtually anything that requires me to put in some sort of a user id but anyway um if you're logged in you should be able to save file duplicate and then you it should say copy at the end of the title that i've given it for our starting code and you can name it to something else like i'm gonna say codecademy live five because it's our fifth session and that should be saved within your account so you can open it you can create not you know other fifa sketches but you can always come back to this one if you want to so this is where we're going to work on uh and we're going to be following all of those steps in here to go from i think i do want to give you guys a little bit of a sneak peek of what we're going to do so this is the um what you should be seeing also i mean i'm going to run this code in here so this is what you will see you will see a grid of a 4x4 grid of white rectangles we're going to eventually fill these with different kinds of video files and at the end result will it be something like this where we've got you know this is actually one video that we're going to separate into four segments and then we've got all of these outside videos in here as well and if i click on my mouse on the canvas you will see that some of these outside grid is changing so this is very you know it is very reminiscent to um styles of namjoon peaks video sculptures and we're just creating like a digital version of it awesome cool that looks great i'm excited to get into it so the first thing that i'm gonna do here is i'm actually just gonna go ahead and explain what is going on in here first so um what's happening in here is that we've got a bunch of um variables in here that say cloud path start path static path and human path and what they do is they just um contain strings that point towards where these video files are saved and they're actually stored in our codecademy's um server but basically if you were to copy this and paste it into your url you should get you should be able to see you know what these video files do like in actual content of those video files so we're using these to basically say i i'm going to be um loading all of these video files that are stored on our codecademy server into rp5 web editor sketch so that we'll be able to ready them to be used within these um this preview window within the sketch itself so those are the um the variables that are given for you there are also some definitions of global variables which we're going to take a look at and first actually one of our first few steps are going to be to fill in or like initialize values for these variables we've also got some variables in here global variables that are you know for the margins so this actually 20 margins gonna be is used to calculate the gap between these rectangles and the rectangles are actually being drawn inside of the draw loop already in here inside of a nested for loop one for the i and one for the j so the i in this case is used for the columns and the j is going to be used for the counting the rows down into our grid and you will also see that the x and the y coordinates for each of these are calculated for you and that's what's being used to draw these rectangles this also means that you see here we have two global variables that say number of screens tall and number of screens wide um if i were to change this to something like this it doesn't happen because i'm assuming the rectangles are not actually probably going to be cropped off i'm good i was going to say that they are being they are being used to do um loop through uh to set the number of times that each of these loops are being drawn but i think there are some other things inside of the code probably to do with margin and width and all the kind of stuff that is preventing it from immediately being reflected on what we're going to do but if we go down to what if we go down to two uh because i wonder if he when he went to six i wonder if it was just going off the screen there we go yeah i think it was just going off the screen so if i set this to two um screens total to two then we've only got a four by two grid so i just wanted to show that these are the two deciding factors that decide how many um what what by what grid that we have on our sketch um but for now i'll leave it at this because you know if we change this we'll also need to change some other code that goes inside of filling or replacing these white rectangles with video files so those are the variables that we have i wanted to just explain the basic structure of it our canvas size is actually by 600 by 500 so they're not actually using the you know my favorite dimensions of canvas which is window width and window height so we're not using that and we're actually setting a very static width and height variables to the canvas but you will also see that when i do shrink and stretch my canvas or the preview window it does center and i do want to kind of show you that there are you know these hidden two other files that get into the actual rendering of our p5.js sketch which is the index.html and css and you may notice in css there are some more styling that are given for you so this is actually the styling for done for the canvas in css is what setters what's centering our p5.js canvas html element so you i wanted to show you guys that so that you don't have to have a dynamically sized window with a window height canvas you can set it to a static number and then you can just take the whole canvas element and then center that in the within the html page how or not center it you know just you know late but put it in anything it's just an element yeah it's just an html element that you could do anything with yeah exactly so i did want to you know demystify that a little bit and then let you guys know or remind you guys that it is an html element and nah element is stylizable by using css cool so moving from on from that i'm going to follow all these steps that i have inside of my sketch file as comments so it says step one is to um use the create video function to load these videos into their respect respective variables and we've got these lists of variables in here but like i introduced before we've also got this list of paths given to us in terms of string that are of actually the actual locations of where all these video files are saved in and i'm going to go ahead and use this function but let's actually take a look at the reference page for that function together so this is the p5.js reference page i'm going to actually search for create video and if we take a look at this creative function a video function the syntax is that okay this is a little bit different because doing this will allow you to load multiple video files with different sources so like you know if you have a video file that have different file types like mp4 ov og v and webm you can load them in an array and they will pick whichever one that is um that basically your browser allows or your browser prefers so if your browser prefers a webm file that it's going to use that file over the other ones that you provide in there which is actually the exact same way that you can use using the video tag right video html tag within the video html tag you can specify multiple source files using the source tag so this is in the this kind of is like an indicator that behind the scenes the creative video tag the function is creating a video dom element so um yeah i just wanted to show you guys that that is the case and you can also give it a call back function for it to run it when all the videos are downloading we're gonna use um the create video function in the simplest way so we're going to say let cloud oh sorry um those variables are actually defined for us already in line 12. it has global variables so i'm just going to say cloud um video is equal to and then i'll say oh sorry equal to create video of path cloud path with capital p and i'll do the same thing for three other video variables that we have in here so stars video is going to equal to create video add stars path and then our static video is oops static video is equal to create video of static path and then we're going to say human video is going to equal to create video of a human path g1 i'm curious if folks are interested in using their own videos so right now what we're doing is we're giving you these four different videos of you know cloud star static and human but like what's your best advice for i want to go find my own videos are there good like public domain videos that you can use or how how would someone go about like uploading their videos um in a usable way so if you're looking for just kind of like you know stock videos to use and experiment with i'd recommend using pexils.com and then they've got like a whole section on videos and you can download a video from here and then what you can do in the web editor is that if we click on this um what is this directory view again you can click on this um arrow down button next to what it says sketch files and here you can actually upload a file i think they do have a file size limit something like 100 megabytes or something per file but you can load small video files in here for you to use within the sketch by directly drag and dropping files in here or you can also host it somewhere else i don't think um hosting on things like google drive is the best way to go but if you have your own server you can definitely upload it in there i actually don't really know um does this is this gonna have a public url no yeah there might be yeah i don't want to share it but if you have any like sort of a link that you know the point i think is that if you have a video file hosted somewhere else for you and if you go to the url and it looks just like this with just a video um content then chances are this will also work for your v5 web editor sketch there are also other incredible hurdles to overcome for because of things like course access and all that kind of things which i don't want to get too much into but you're being some videos it might be hard to load if you're just pulling it from a random website yeah so my best uh what i would do is i would upload it directly into my p55 editor actually so to that would actually mean that you would have to have small enough of a file size or if not you might want to actually take the whole project this might be actually a really good reason why you would want to work locally at this point and there are let's go back to our learn p5.js actually um our course so if we go back in here there is an article um inside of this one inside of our first module introduction to creative coding the whole stepbystep guide into creating a local p5 address project so you can follow this along and then you know it assumes that you know or you already have a text editor and so on but it will walk you through how you can download it how you can have your folder structure in here and you know how how you can or if you're going from actually a web editor you can download your project as a zip file and how you can start working off of it from there so you can take a look at this article if you are at that stage where you're using a lot of video files i would recommend doing that okay cool so now we have all of that you might have noticed if i click run and if i scroll you see all of these things behind it that you've never seen before and they kind of look like they are some like you know a little bit bits of the video file that i've shown you guys before and that is because they are and all of these video files natively are quite big in size and so that's why they're appearing actually behind the the um sketch or the canvas because like i also alluded to before all of these video files when we say create video they are ultimately creating a video tag but they're just not being played or anything yet so they kind of appear within the html page because we haven't told it to not display our video tag as an html element which what is what we're gonna talk about in step three but just seeing these should be like an indicator that your video files have correctly been imported into your b5.js sketch so if you're seeing that that's great it's not an error you're supposed to see it and we're ready to move on to step two wow step two out of 16. okay we're getting there cool so then what we're going to do here is just place all the newly created video elements into a single array store in the videos variable so there is a um a global variable in here line 13 that's called videos and i'm going to actually just say videos and then list all of the video videos that's been loaded inside of our cloud videos stars video static video and human video i'm going to just list them in here and say inside of my square brackets right cloud the video comma stars video comma being careful of spelling static video comma and human video in here okay great so now that's done and this is not gonna have any visual impact because we've just loaded that array variable inside we've just loaded the array variable with the video variables that we've loaded in our step one and in step three it says okay now that the videos array is it has been populated iterate over the videos array to loop mute and hide each one so let's actually start off by defining or creating a for loop so i'll say let i is equal to zero i is going to be less than four you can write four because we know that there are four videos inside that exist inside videos or if you want to be you know you want to make sure that you if even if you added your own videos later that it will still work properly you can also save videos about length right whichever one you prefer and then you can we're going to increment it by i and what we're going to do here is we're going to say videos of index i so whatever one whichever one we are on when we're iterating over them i'm going to say dot loop and once we do that and we hit run we see if we scroll down we'll see the video files actually looping and playing so there's two ways that you can play video files you can say dot loop using the loop method to loop over the video over and over again or you can use the play method which will only play that video file only once and then stop playing but in our case because we want it to be like a digital video sculpture we want our videos to be continuously running so we're just going to say loop um and if we do this in the web editor you're the doing loop will be fine without having um having us to be to needing to be mute anything but if you are working locally or if you are kind of thinking of putting this on some other platform you might actually want to make sure that your videos before you loop them are muted so you can use the mute um method to make sure that all of your video files have volume of zero before it starts playing anything and this guy the reason why we do this oops did i smell something wrong there's an error with a mute could not be called as a function mute is not a function okay but let's go and this is great okay we're gonna look up the video media element and then we're going to look at mute which is not a function ah i say mute but i actually mean volume oh okay you can set volume to zero or something exactly so i i wrote new than i totally should have i think i said it the other way i said oh we need to mute it which means it's volume 0. i meant to say oh volume 0 means you're muting it um but the reason why we need to do this volume 0 step is actually because um in order for your videos to auto play with uh or be played with uh volume it has a lot to do with you know web security and how like auto playing different elements embedded into websites work but basically videos or audio files that have the start with the volumes here are allowed to auto play or allow to be muted with the javascript function without the stage chances are that sometimes it's gonna work and sometimes it's not gonna work depending on how you're running your sketch so it is always a good idea to make sure that your volume is set to zero and then you mute your video so that they will there they have a higher chance of playing on the web or wherever you're hosting it okay cool so now that those are done and you can see the videos playing underneath what i'm actually gonna do is that i'm going to actually not want to see all of these videos playing underneath my sketch because i'm eventually going to position them and scale them so that they appear in the designated places that i want them to appear so i'm going to say videos of i dot hide and what this will do is that it's going to hide the html elements that are actually that which is our which is what you're seeing underneath in here and so once we do that i'm no longer able to scroll through the webpage anymore because i i'm actually not seeing visually seeing all of the uh video tags being rendered on the web page so this is sort of like um this basic setup of what we need to do before we can start drawing actually one last thing that we are going to do is that we are going to populate another variable as an array and that only contain cloud video stars video and static video and the reason why we will need to do this and we'll explain after i do this so i'm going to say outside videos it's going to equal to an array and inside my square brackets i'm going to write cloud video comma stars video comma and static video and the reason why is we're separating it out into these two arrays is because this whole video is gonna the videos arrays that used to um do some sort of a general operation for all of our video files and what we're gonna actually do instead of draw in here is that actually i think there's a link to one of the diagrams that will help me explain this and there's a link to it in the starter code is that for our human video one of our videos that we have saved and loaded inside our b5j sketch right now we're going to actually crop the video program programically and um load them into these each of these four quadrants of the video is within the grid so we're going to call these the inner grid and then for all of other videos that we have stored inside of our outside videos array we're going to dynamically choose whichever one we want and put them all around our outside grid so that's why we have two separate um arrays happening in here okay and then with that said um we've already got some of these things that are done for us where um it calculates the positions the width and height and the positions of our um screens that we're going to be um drawing into with our video files that we've uploaded and so um we've also got you know uh the x and y location which is you being used for the top left corner of the rectangle already calculated for us the good news is that the image function which we're going to use to render the videos onto our p5.js sketch is also a rectangle and then also the x and y coordinates for the image files also are going to be used for the top left corner of the image so we don't have to do any more calculations to them but we have already been uh given for us as in as part of the starting code i'm going to go ahead and then i'm going to um read through some of these uncommon so it says that we're going to be filling the screens by which we mean the white rectangles with the video according to this i comma j position and the i comma j position is coming from the variables that are going the counter variables that are being used for the nested for loop and there's also a diagram that will help you visualize how those i comma j positions are going to be used and how we're going to reference them so there's this very um a really helpful wreck um diagram that is linked to inside of the web editor sketch in here where it says the i is going to go through like i said the columns of the grid and the j numbers are going to go through the rows of the grid so at zero comma zero we'll be referencing the referencing to the top left um grid on the four by four grid that we have and we're firstly gonna focus on these two four um quadrants in here where the i i j position is one one comma one two comma one one comma two and two comma two and so on and then the way that we're going to basically check which grid that we wanna draw onto within this nested for loop is going to be using an if statement so using an if statement for step 5 what we're going to do is we're going to say if i is equal equal equals to 1 and if j is equal equal equals to 1 meaning that while we're going through this um nested for loop and i'm just actually just going to move it so my if statement is closing inside of containing all of these um comments in here but basically when this happens is that if going while going through this nested for loop if we've just hit this position for the um grid or the grid cell that we are looking for to display a specific video file then we're going to display a video file in here but like i said for the four inner grids what we're going to do is we're going to divide one video file into four sections and we're going to be using the image function but the image function the way that we're going to be using it is a little bit different than how you would have normally used it if you've used the function before so we're going to go to rp5.js um reference page and we're going to find a function called image so what the image function does is that after the image has been loaded you can use it to actually draw that image onto our p5.js sketch or onto our canvas and it you can use you know but it should have a minimum of three arguments in here the variable storing the actual image and the x and the y position of the image but you can also give it um form on two more arguments which will be used for the width and height of the image but you can also give it so much more arguments oh my god yeah we're gonna be giving a total of eight arguments wait is it eight no nine arguments for our image function because the last four uh numbers what it does is that you're actually selecting an area um of where you want so this is actually selecting a crop area actually and i know i could maybe talk about this for like you know several minutes to help you understand or i can just show you guys a diagram which will be a lot easier for me to explain what i'm trying to talk about so okay looking at this diagram what the d the um the ones that start with d uh for destination these are gonna be the four the second second argument third argument fourth argument and fifth argument of the image function right this is really similar to drawing the rectangle right where it's just where where is the top left corner and then how long is it and how high is it exactly but the next four arguments what it's going to what those are going to uh basically specify is where in the source image do you want to start drawing from and how much in terms of width in the source image you want to draw to um the width of it to and the height of the two so those are the four um so those are the eight arguments what i'm thinking of already is what happens if if the d heights d height and s height aren't aligned so like you're saying okay i want to draw this image so let's let's say s height is 50. so you're saying i want 50 pixels of height from the original image and then let's say d height is 100 it will say okay take those 50 pixels of height from the original image and then what does it stretch it to fit to fill the entire 100 yeah interesting okay it will stretch to fit so what will happen is that so that basically means that your s height will have to be dependent on the image with an image height sorry the s height and the s width will have to be dependent on the image with an image height so then you know i can also reference to image with an image height using the method for the image or the video for the in this case and you can do divided by two but that divided by 2 is going to be the half of the native image or the video's width and height and that's going to be different from the width and height of the canvas itself so it will do a bit of like scaling and stretching um as it is necessary um okay so i think we should actually just try using the function and then we'll get a little better sense of what we're gonna do uh but basically what we're gonna do here is that we're going to draw our human video uh render our human video using the image function and we're going to say here is that we're going to actually start from um the so we have to give it the destination x comma y which we're going to just use x comma y y because we have it um calculated for us in line 56 and 57 inside of our draw loop and then it will be based on whatever the i and j values are anyway so we can just blindly use the x x and y values in here and the width and height is also going to be it's already calculated for us which exists in line 48 and 49 and they are given in uh as variables w and h so i'm also going to use that and say w comma h and so the next four digits are going to be the things that are going to be a little bit more complicated to think about but because at i comma i we're going to go back to this diagram and we know that this is here and we're gonna start wanting to draw from the top left corner of the image of the video file itself we're going to start off by zero comma zero and then for the next two arguments what i'm gonna do is i'm gonna refer to the video variable itself and do dot width divided by two so we're taking the whole width of the video and then we want to only draw to half of the video and then we're also going to go here and say human video where the height will say dot height divided by two so then what that will do is it will also take the total height of the video and then we only only want to draw half of that with height so it's going to start drawing from the top left corner of the video and it will draw for half the width and half of the height of the video itself so once that is done i'm going to press save and then we see this part of the grid being filled and we do only see the top left corner of the video file okay i hope this makes sense but i think that's okay because we've got three more rectangles to fill and then by that time i think people are going to get a little bit more accustomed to how we can use this so for the next um quadrant which is the one at i is one and j is two so i'm going to go back in here and then i i'm i can see that i'm going to be drawing this one so sort of directly underneath the one that we just drew so i will go back and say i'm going to create an else if statement in here and so i'll say else if i's equal equal equals to one and j is equal equal equals to two um and then inside of it and i'm going to contain all of this curly brackets inside i'll then say use the oh okay we have a tricky tricky situation happening with like all of the commenting let me try to structure it a little bit better and inside the if statement i'm going to use the image function here again i'll say image and i'm going to draw the same videos i'm going to say human video in here again as the first argument and i'll say x comma y comma w comma h because all of those are not going to change and x comma x and y are variables that are being calculated using the i and j variables anyway and then the next four arguments are going to be because i'm i'm drawing the one in here it's going to start from where x is zero but y is actually going to start where um how where it's at the midpoint in terms of height of the video file itself so we're gonna actually have to reference the human video file and then do dot height divided by 2 so it's going to start halfway to the height of the video file but the width and height of the video are going to stay the same because we still want to draw half of the width and half the height of the video so here we're going to say same as the one we did before humanvideo.width divided by 2 and human video dot height divided by 2. once that is done and we hit run we have this quadrant being filled with that video file as well um similarly we're going to continue with the same sort of like a pattern of programming and we'll do else if i is equal equal equals to 2 in this case and j is equal equal equal to one in this case so now we are drawing the grid um that is in here two comma one which is this one so then we're going to use the same image function in here and say um image function is going to draw the human video which will start at x comma y and we'll have width and height of w and h it will start at now this time halfway to halfway to our videos with so we'll say human video dot width divided by two but it will start all the way at the top so the y our y starting y is going to be at zero but our dimensions width and height dimensions gonna remain exactly the same again so we'll do human video dot width divided by two human video dot height divided by two we will hit run and then we see this one also being drawn to our grid and then lastly for the um the inner grid we're going to do another if else if statement this is going to be lost else if statement and then make sure that it closes after all of these comments um inside of our else if statement we're not going to check for if i equal equal equals to 2 and j is equal equal equals to 2. and inside of here then we're going to use our image function to draw the remaining quadrant of the video which will be at human video which will draw the human video file at x comma y at with width of w and height of h and then we will start at the middle of our video so this will be at x coordinate of human video dot width divided by two and human video dot height divided by two and our dimensions are also going to be exactly the same thing so i'm actually going to copy this and then paste it as the last two arguments of the function and we now have all of our integrated being filled with different um sections of the video file okay so the next thing or the last thing in terms of visualization that we have to do is fill all of this outside the grid and thankfully we're not going to do that one by one what we're going to do is that we're going to say basically what's happened in here in terms of the code structure is that we've checked for whether i and j are at specific locations and we've used if statement and then we've used an else if else if else if so if i at the end of all of these else's statements put an else that means i'm capturing all the other positions of the video file nice that's super clever i was wondering how you're going to do that yeah i don't want to you know do go iterate through all of them one by one manually so if we do if we eliminate all of these four positions we've got the rest and the rest of the videos we're going to fill it um more or less generatively and the way that we're going to do that is basically we're going to say create a global variable inside of this um else statement and say let's selected index is going to be equal to there is a formula that's given for you and i'm going to explain this a little bit but what this will do basically is that by using this index we're going to pick one um a video that will exist inside of our remember our outside videos array so we're going to just randomly pick one of them using that formula that we've just put in there and then we're going to display whatever video that's been generated or that's been picked to be placed in there and so we'll go back down here to where i just added the select index variable and what this does is that um whatever okay take um whatever this i so meaning like which column the video might be at and the j value so which row the video might be in and combine it together and then using modulus uh figure out where um figure out a index number of where it uh which video that we want to use inside of our outside videos arrays this seems a bit arbitrary but that's because it is it totally is arbitrary and we're just using something that is really um that uses the i and j values to decide which index for us to be able to use and we could have you might think okay well if you're just kind of arbitrarily selecting which index we want to use why not use random right that's a really exactly what i was going to say that's a really really valid um you know logical assumption and the reason why we can't use it is because you have to remember that we're drawing this inside of a draw loop so that means if we put a random function in here that picks a different um index every draw loop and for how many ever grids that we have it's going to randomly select a new index so it's it means it's going to continuously change which video is going to be displaying over and over and over again so that's exciting i suppose we could do something like couldn't we um uh generate however many random numbers how many is that uh 8 9 10 11 12. couldn't we generate 12 random numbers in an array up in setup or something and then that's static and that won't change so yeah you could figure out weird ways to do that but then you have this like weird way array of random numbers and that's a little bit odd as well yeah that's totally valid though and um this is something where like if you wanted to experiment with how you can select um videos for the outside grid this is totally you know please go in and try to figure out what you want to do but this is sort of the arbitrary way that we've we've come up with for you guys to start using to do a generative selection of the videos that you want to display for the outside grid and what we're going to do now is that using whatever the selected index i'm also i'm going to create another local variable in here and i'll say let selected video and then i'm actually going to reference that outside videos array in here outside videos array and inside the square brackets i'm going to use my number that i've um created for the selected i've calculated for the select index ah the comment says selected index and i wrote select i'm going to change it so that it fits the comment so it'll say select selected index in here and also say let selected index in here the last thing that we'll do for the outside grid and then we'll see this magically appear after this step is to actually draw these videos and we're going to use the image function again this time we're not going to use all nine all of our nine um arguments we're gonna just use five five seems like it's not a lot one compared to nine and so what we're going to do here is we're going to draw whatever the selected video is at x comma y with height width of w and height of h that's also already calculated for us once it's safe we get an error great okay outside video is not defined in line 96 i have a feeling i probably misspelled something uh videos now oh oh when the e is flipped nice okay so i spelled videos correctly and we have a video sculpture a digital visual video and so because we have some time left we are going to do this extra task that i've written down here and that is to add some interactivity and this is also the part that you can kind of like now you can take it however you want you can add different kinds of interactivity depending on what you want to do with this video sculpture but the thing that we are going to do is we're going to uh use the mouse clicked function which we looked at in our last session and then we are going to use a variable global variable the only one that we haven't used so far which is the counter variable and we're just going to increment that and use that counter variable like i said the place that you want to manipulate to get different outside videos or a new selection of the outside videos is by manipulating this value the selected index value so we're going to use the counter variable somehow in here and that's going to be something that just increments over time when the mouse is being clicked on the canvas so we'll define this uh event function in here called function mouse click and the contents of this function only run and run once when a mouse is correct when mouse is clicked within the canvas element and here it's gonna we're gonna keep it super simple and say counter plus plus so what that will do is that every time the mouse is clicked the counter variable is gonna increment by one we can quickly check that by saying console.log counter and let's run that and we'll see that it goes 2 3 4 5 6 and so on so we're going to use that number to basically you can use that now however you want i'm just going to just blindly times this the j by counter and again be you can be as creative as you want to whatever you want to do in here and you can hit run now it goes every time i'm pressing on it something new happens i actually had a really quick idea i don't know what this is gonna do i'm gonna put second in here what is second oh every second yeah got it yeah yeah is a p5.js function that returns you the second number of every second of the clock so it's going to go from zero all the way to 59. so what this does is that every every second something new happens nice that's clever yeah so we could do something like that but it just it is not like a it will do an animation animation of the video selection but if you wanted to keep it you know like attached to a user interaction we can go back to using the counter variable in here or if you really wanted to mix them up together you could do second in here i feel like you could create a really weird version of a clock using video sculptures yeah that's interesting so now we've got something that is happening over time and then i can still change things if i press the mouse as well nice yeah do you want to how would you how would you make your click more targeted and i think i i know how i would do this but it's really cumbersome and annoying but like so if i say if i wanted like okay i'm clicking on the um you know first video in the uh or the third video in the first column and i want only that one to change how would you go about like making your like canvas targetable of like oh i'm clicking in this area i think you are trying to lead me into the next week's topic the next week's livestream topic but i think there could be a number of different ways that we can do that and one of the perhaps maybe like easier way to think about it but in terms of code it's going to be long and repetitive lines of things we just using if statements right because we've already got these um x and y coordinates figured out for us for each of these rectangles so what we could do is that actually within the if statement you could use the mouse's pressed boolean variable inside of the nested for loops and say if mouse is pressed and if mouse x is between the or bigger than x value and bigger than y value then something else could happen right yeah so you do this kind of like the targeting thing that was my idea of basically saying yeah is the mouse inside a certain bound and if it is then um you know then change that specific image yeah but the way that i actually i think i would do it is i would turn each of these screens into an object and so yeah if if you create this as an object which you can also i'm gonna stop this for a little bit because i think it's you know creating a lot of um visual distraction but if we do create it as an object you can also pass in the um the variable that's containing your video or your image inside of the object itself and then so you should be able to do all of this displaying and everything inside the object as a method but it also means that you can you're you know t uh maintaining the x and y coordinates and the width and high coordinates for all of these screens in there so then you can just say you know if mouse is pressed and if it's between this dot x plus some width then it is probably within the lounge so you still have to do some sort of boundary checking one way or another yeah but making this object oriented would definitely i mean i i guess it's arguable whether it's cleaner or not because the the class that you end up writing or the object that you end up running is uh will end up being complicated but um definitely a strategy that you could use yeah um i mean we can try doing the other one because we've got some time no i i mean i don't think we necessarily need to i think um turning it over to the chat right now if they have questions or ideas about ways to uh to extend this or uh g1 i'm curious some other ideas that you've had as you were developing this or seeing this project get created of other things that we could do um i think that whole idea of like turning this uh oops what did i do turning this uh video sculpture into some sort of a clock would be really interesting because i mean clock is definitely you we use it to keep track of time and to reference time but i think it's also just in general to be able to look at something like this and just realize the notion of time passing but not necessarily being able to know what time it is i think it's just an interesting concept as it is so if people wanted to like somehow figure out rules to changing different visualizations in here to make it like a clock um and that kind of reminds me of another digital artist's work um john simon jr john f simon jr he's got these on lcd screen clock pieces i'm not sure if i'm going to be able to go here so these pieces are actually almost clocklike because although the visual oh it doesn't actually zoom huh all of these visualizations that you see in here they are they run with time and if you go see any of these pieces in a library not library maybe library but in a museum you'll see all of these animating and then like you know if this goes around in a loop then something else happens another visualization that kind of things so maybe like combining these two inspirations like namjoon peak and like john f simon jr you could create like a clockish animated version of um crackish animated version of the clock yeah i'm using this as a template i could i could see when you're talking about clocks here and and counting and stuff i could see this being kind of a binary counter here where you have um a bunch of different screens that could either represent a zero or a one and then every second it takes up to the next binary number i think we had jonathan not read your mind alex yes could do like a binary clock um yeah so that's one thing that i think i can think of another thing is like we've kind of put you know selected these like very glitchy and like almost futuristic futuristic i don't know if that's like the right genre but like we've created we've selected a series of videos uh with our aesthetic um choices but i think you could definitely think about do you want to create some sort of a theme or a story in here and you could also you know swap out videos inside of the uh videos array you could up upload your own videos in here but you could also you know create some sort of a story with it so you could have a lot more videos in a video file and then you could go through after a certain amount of frames have passed i want to actually use videos from you know not from one to four but i want to now use it from five to eight or something like that so you can keep like a story going in a loop as well yeah probably more more interesting ways to apply this idea of like segmenting a video into different quadrants or different parts of the video i could see you applying that to the outer the outer ring of videos um other things like you know now that you know how to display videos in smaller segments within your canvas you can use a video file to do like a tetris or you know you don't have to just display videos in a static way you could have videos move with like keyboard or with your mouse and all that kind of stuff so you don't have to think about videos and actually i think you know what i think it'd be really interesting to do some sort of like a paint tool by using different video assets i was i was just gonna say can we can we try connecting one of uh one of those videos to your mouse and just start dragging it around yeah let's do that so i'm gonna actually do it outside um of all the loops and i'll just say image and then let's pick one video i'll pick the cloud video and i'll do um mousex mouse y and then keep our i'm just going to keep 100 100 for width and height and let's see what happens and i think it's because actually like we're drawing our background i don't know how much of a mess this is going to be we'll see that's right the uh so the grid keeps getting painted or the videos in the grid keep getting painted over but uh yeah but the cloud is now painting it the background yeah so that's fun so you could draw with different video assets instead of image assets or you know just a primary color or something so there's multiple ways you can take it i think these are tools and you know you're not messing up if you if you mess like a cell of this video grid up it's not gonna cost you an actual tv monitor i think that's like also another way of like if you were actually you know if you did really want to make a live video sculpture this actually is a way that you can use p5.js to do a digital mock of what you want to make so you could if you wanted to try it out with multiple other grids numbers of grids or you know if you want to do a long um and a wide one or if you want to do a tall one this could be like a tool that you can use to basically um see what that looks like and then like you might want to actually put that together physically cool that's a fun one yeah um obviously you want to kind of preview what we'll do next week a little bit sure um yeah so next week i'm gonna or the next two weeks actually i'm gonna be leading the sessions and i'm already feeling uh lots of pressure of where jihan creates these like amazing artistic uh uh creations and mine is gonna be very low quality in terms of artistic value i would expect like colored circles bouncing around um but next week's session what we're gonna do is we're gonna look into what objectoriented programming is working with classes and objects um again my background with p5 is that i never really use it as an artistic tool i use it as a as a teaching tool so i taught um intro level programmers how to program using p5 and so basically i'm going to run a kind of a little class on what are objects what are classes and using p5 to do that so we'll be turning little balls into objects that can then bounce around and maybe we can add some clickable stuff or we'll see where it goes but it will be um kind of more of a traditional um programming lesson or like the the goal of the lesson is to learn programming concepts rather than to create a piece of artwork but a nice a nice side effect is that the thing that we will create will still be fun and visual rather than like you know print statements which is what usually happens when you learn interprogramming topics but i think um op or objectoriented program is going to open up a much larger door into creating generative visualizations there's so much more you can do when you apply oop concepts to your your visual programming so yeah i'm excited yeah i'll be interested to see to get your thoughts on how else you can how else we can apply uh uh that programming style to this so cool cool all right well thanks for checking this one out everyone um do you want great work anything else you want to say do you want no um i will see you guys next week