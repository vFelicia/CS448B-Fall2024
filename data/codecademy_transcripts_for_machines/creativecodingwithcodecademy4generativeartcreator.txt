okay i think we're live so um hello everyone welcome to the fourth session full of cocadmy live for creative coding um hi again i am g1 and i'm a curriculum developer at cocademy and today we've also got morgan joining us morgan if you want to introduce yourself a little bit hey everybody i'm morgan and i'm a content contributor at code academy yeah and he also was part of the production team that helped us develop the learn p5.js course um and he's also created the um project which we're going to walk through today together as well so um thank you morgan for um joining us today yeah happy to be here okay cool um i think we can get started and maybe we'll also do a little bit of a recap but basically um let me actually start sharing my screen too um um basically um these live series uh during these live series we're going through um p5.js and we're going off a lot of the content that is based on this course called learn p5 chance on the code academy platform it's a free course so if you are following along the live stream series um i think um generally the live stream the series that are designed to be a good compliment to the learn p5.js course the content itself so in the first week the first live series session we went through some fundamental um concepts about v5gs we talked about using the setup in the draw loop and we also did some static visualizations using 2d primitive shapes and our second session we turned those static shapes into animations in within the draw loop and using you know incrementing and decrementing values to animate the position size and color and so on for the animation last week actually we had cassie um as jor who joined us as a guest and we talked about the p5.js um open source communities open source software and also we talked about the p5.js web editor which we are going to um use for in today's live stream series and also going forward we'll be um using the live p5.js web editor to do programming in and also to share the sketch or the link to the code with you guys so we're actually not going to be working on the cocamy platform itself um but we're going to be um creating all of our p5.js creations inside of this web editor and cassie um who's one of the main developers for the platform gave us a really good tour around the tool itself so right now i have this code loaded for um our live session today but let's actually open it up in another place editor um so if you know if you uh open up a blank p5.js editor this is kind of the view of what you will get basically let me actually log on but i log out but if i log out you get an option to log in or sign up if you um click to sign up it doesn't really ask for a lot this is kind of all what they asked for from you you can put in your username your email and your password and confirm your password and you will get a b5.js um account it will oops okay i should have stayed logged in but maybe i'll turn up screen and quickly type that in in a bit but basically the thing that i do want to show you is that when you first launch it you will see this view on the left side that is a code editor and you have this preview page and if you open up this little collapsed bar on the left side you'll get a view of these sketch files in here and then these are the similar you know we talked about this in the first session but basically they are all the files that you it is required for you to run the p5.js sketch there's an index.js file with the library files um linked there as a script tag the cdn link in there and there's a link to the style sheet and there's also a link to the scripts that you're using at the javascript that you're using inside of the sketch.js file so that's all linked in here for you so this is kind of what the default um generated files you get when you first open up uh your p5.js web editor and let me actually stop sharing and quickly log in i did not anticipate this part always got to be prepared and um let me see if you will let me log back in what is going on in here um okay i don't think that that will matter too much i'm gonna move on and reshare sounds good um okay but going forward um the thing that we're going to be covering the topics that we're going to be covering are in this third module inside of interaction so um if you click on the lesson for interaction uh basically it starts off talking about um different kinds of interactions that you can add to the p5.js sketch so um morgan if you want to give us like a super brief overview of what the and the kind of topics that we learn in this module that'd be awesome yeah sure so i think interaction's really like kind of the like one of the beginnings of like the bread and butter of p5.js and just really being able to use your mouse your keyboard um and then for more advanced interactions like your voice to actually like be able to control programs and work with programs make games or interactive art pieces and things like that so um via like mouse scroll mouse click um like mouse up or key presses and things like that are kind of what's covered in this uh this lesson specifically and so for today's um project we're going to be going through this particular project that is on the cocamy platform called the generative art creator and for this project basically we're going to be using mapping a lot of these like functions to keep pressed and key events and we've kind of sort of taken this uh web editor sorry we've taken this project onto the web editor so on the youtube um video inside of the descriptions part there should be a link to two links to the p5 web editor website there's one for the solution code for the project and then there's also a link for the starting code of the project so what we're going to be doing during this live session is going to be working on the solution code which actually has inside of the solution code there will be a lot of comments in here not to freak anyone out but i've basically moved the steps that you will normally see inside of our platform on the projects page onto the p5 web editors you can follow along um with us on the web editor if you want so if you were to open up that link in that's connected inside of the uh that's attached inside of the description of the youtube video you can also go to file and duplicate or save this particular sketch inside of your account of your app editor account you can keep a copy of the sketch in there as well and code along with it same goes for the solution code if you wanted to create a duplicate or a copy of the solution code um in your account that is also possible but before we go any further i guess i want to give you guys a little bit of an overview of what we're going to be making so on the v5 editor on the right side we've got this um preview window and on the left side we've got the sketch window where you can you know um change code in here if we wanted to if we click on this run button this pink big pink play button then our sketch is running the reason why there's nothing in here is because this particular sketch is a bit like it's like an app right it's a generative app um that has um i don't know if you guys you guys can't see this but i am pressing different keys on my keyboard to basically do these drawings onto the sketch and there are different functions that are mapped to different kinds of keys on my keyboard and if i press the return key i've got this you see that i've downloaded this image of the canvas as an image file as a jpeg file and also if i press spacebar it will basically erase everything that we've drawn onto here so it's kind of like a i guess a version of the paint app but i'm using our own custom visualization functions yeah exactly and also it's this is also something that is provided in the start code as well but there are all the functions that we're using to generate all these visualizations are saved in a separate file called drawshapes.js in here so you should be able to see you know what's running behind the scenes to create all of those different kinds of visualizations so the actual visualizations part we're not going too deep into in this session it will be mostly focusing on how to add uh keyboard events to your p5.js sketches in this session i miss anything no i think that's it okay yeah cool so i'm gonna move on to the file for the starting code and i'm actually gonna create a duplicate of this because i don't want to did i create a duplicate something funky going on with my um okay since i am logged out any changes on to this um starting code is not going to be actually affected to the version of the sketch that i've shared with you guys already so i'm actually going to go ahead and start coding in this version of the starting code for the generative our creator project um i know so we'll take it from the top actually and then we'll go okay so just um a little note as well i've also numbered the steps that are the steps that you should follow to complete this project we'll start from step one the setup but then you'll quickly notice that there's step two in the setup but then it gets to step four in the draw so the place of where all the steps are do jump around a little bit so i'm hoping that you know if you're watching if this live stream together with us or if you're going to be looking at this um on a later date um i wanted to put it up there so that's recorded information that the steps are going to be jumping through but then we're going to be doing this together with you guys so hopefully they'll be a little bit less confusing but the first step that we're going to be doing and if i press play in here you see that there's nothing being um created in the preview so i'm going to go ahead and then i'm going to create the first um one of the most important functions that you can use in the setup which is to use the create um canvas function oops canvas and inside of the canvas function i'm going to be putting in system p5.js built in variables window width and window window height so that when we do this and we're not going to see anything in here but basically what will happen with this function is that it will create a canvas with the size of the window width and window height or in the case of b5.js web editor it will use the width and height of the preview window in here i am also going to add in a background color so that we can actually see something inside of the preview window that's going to happen for now i'm going to give it a gray value of 50. um so this is the same as right same as writing 50 comma 50 oops 50 comma 50 comma 50 but the shorthand for that if you're using all same values for r g and b then you can just write 50. so if you go ahead and press play we've got this gray rectangle of a canvas that is perfectly the width and height of our preview window cool so then we're going to move on and it says step two is we're going to be randomizing variables to draw shapes so here in lines um five to nine in here we've got some global variables we've got let x and y we've got less speed x and speed y we've got red vowel green vowel and blue vowel um and we've got some another two other global variables and so on um these um global variables and lines well actually all of these variables global variables in lines five to nine are actually going to be used inside of our drawshapes.js file and they are going to be used inside of all these functions that generate these different kinds of visualizations that i have already been put in for you um but basically um we will need to randomize some of these functions uh sorry some of the values for some of these variables in here so that we can get a generate dynamic sort of visualizations so there are some things that are randomized when the sketch first runs and then there are some things that will be generated uh that are attached to keyboard events cool um so let's go ahead and follow these steps for step a to step 2a to 2d so for 2a it says set a x variable to a random number between 0 and with and we're going to use the random function which is also a p5.js built function so it'll be a minimum i want a random number between a minimum of zero and maximum width which is also a p ah i keep spelling that which is also a um if i just built in variable that returns the width of the canvas this is really interesting where here we've got when the width um as the um width of the canvas which will return us the total width of the preview window and because we're also using width which is the canvases width and that's going to be same as the preview window that's actually what we get right this also means that if our um preview window is bigger and then you run it then this is now become it will become the width of the canvas let me actually resize this so you guys can see the code a little better so now we've got x we've set our x inside our setup function to be a random number any random number between zero and width and then for y we'll do the same thing but use height instead of width so we'll use the random function again and we want to generate a random number between 0 and height and then for our step 2c we'll do a similar thing of generating a random number but this time it'll be between 3 and 3. so speed x global variable is going to be initialized with a value a random value between 3 and 3 inside of our setup function again last thing for step uh step two d we'll do uh speed y global variable is going to have a random number between minus three and three so this is sort of these um i guess setup that we have to do and actually we're doing this in the setup function so how convenient that function is called setup but um just to re uh just as a reminder the setup function runs once when the when the sketch is first loaded so all of these are going to be done once and then right after everything inside of our draw function is going to run after but before we get to actually you know putting some things inside of our draw function we're going to do something similar to another function that we're going to declare outside of the draw so this is the part that where um keyboard interaction comes in but basically inside so there's a step three and it's now become line fit 80 i don't know if it would be still line 80 in the blank file but towards the end of the sketch.js file there is a step three it says add key release function to a random randomize and to randomize variables again in the cube release so what's going to happen is that all of these variables are going to be in randomly set when the sketch first loads and whenever a key is pressed and then released we're going to be resetting all of these values global variables into another random number so the next time another key is pressed i will be having some sort of a random element to the um visualizations that get created with key key events so maybe uh we should there's a bit of a i guess some information that we need to cover before we do this so i guess let me ask you morgan what is the key release function um yeah so uh i guess something maybe we should have mentioned a bit before but a lot of what interaction entails with p5 is these sets of predefined functions for either mouse presses key presses things like that so key released will trigger an event inside of the key release function whenever that key is released and you can set specific keys um another way i won't mention that yet but yes the key release function whenever you release a key um whatever information is inside that function will be run i think it's something um that might not be so noticeable when you're like just accustomed to i mean mouse is a relatively friendly i think what's the right word for this like computer accessory computer auxiliary input device if you think about it you do a lot of things with the mouse right there's a click there's a double click but then that click is also it can be separated into two separate events right where there is the press event and there's also a release event so for each of those events that your keyboard and also your mouse can detect um there are functions ability5 just functions in here so the mouse for mouse event there's all of these things where there's a we've looked at mousex and most y um variables um before and i think did we do this i think in week two i believe so uh when we were talking about animation but those are these uh builtin variables that return you the position of the mouse x and mouse y positions of your mouse but there are also functions in here and also variables in here that basically let you know or let you let you run different code snippets uh depending on a whether a particular mouse or keyboard event has occurred so in this case and inside of our p5 web editor where maybe this one it talks about add key release function what it means is that add this a builtin function called key released and then here in the description it says the key release function is called once every time a key is released so it kind of like works in a similar way to our draw and the setup functions and we're also um built in b5.js functions where we we have to define it but there's we don't need to run that function actually for it we us to trigger um the things inside of the key release function instead the contents inside of that function will run for us whenever that key release event is detected so in here i'm going to say function key released and then i'll open my curly bracket i'm going to close my curly bracket after all of these steps because i'm going to do all of these inside of the key release function so in between those um i've created a function a new function definition for the key released built in b5.js function and inside of the key release function i'll do the same thing for the global variables x y and speed x and speed y and i'll randomize them to a new set of numbers so this means that every time you press then release the key then all of these variables are randomly set again so for step three a i'm going to say x is equal to a random number between a minimum of zero and maximum of width similar thing for the wire y global variable i'll set it to a random number between zero and height i think it also might help to to um bring up that the key release function is indiscriminate of what key you're pressing exactly yeah um but i guess a little bit more adding on to that i think what morgan is trying to say is that there are different types of keys on your keyboard right there are like normal i don't want to say normal keys but there are keys that have a visual impact let's say to the things that you're typing so all of these things that i'm you know typing right now all the letter keys all the number keys but there are also other keys on your keyboard like the delete button the space button okay space has some space does have a visual characteristic but um arrow keys and return keys and shift keys all that kind of stuff so there are what's called special keys right and then the thing that the key release function will do is that it doesn't care whatever the key that you pressed on your keyboard whether it's a letter key or a number key or a special key it will run it whenever a particular key is released um okay so going back in here i'm going to randomly assign a random number between 3 and 3 for the speed x global variable and same thing for the speed y global variable i'll say speed y is now equal to a num random number between 3 and 3. and so basically we've i think we've more or less uh we're more or less done right with setting up um for the global variable values and now we're ready to start actually drawing some things but um by triggering well actually we're not going to blindly draw them we're going to trigger them um inside of our draw function and we're going to first detect if a key is pressed while the sketch is running and then check what sort of key is pressed i'm leaving this a little bit vague because we're going to explain it in a bit but it is going to be a little bit vague as well on the way that we decide which function to run um but um yeah okay let's leave it at that but basically what we're gonna do is we're gonna check if the key is pressed inside of our draw loop and run um one function over the other depending on what type of key what key is pressed so in here it says okay step four is going to be about mapping key uh inputs to various shape drawing functions and step 4a tells me that i have to create an if statement to check if the key is pressed is true and key is not equal to spacebar so at this point i think we should go back in here yeah it's probably a good idea yeah and under this event under the keyboard section there is what's called key is pressed which is something that is mentioned inside of the step foray it says check if key is pressed is true so then this probably means that i have to use this variable which is a key case press is a builtin defined address variable that returns a boolean value depending on whether key is pressed or not so for those of you who are not familiar with boolean value it basically means that it's a binary value you can it can either have a true as a value for the variable or false as a value for the variable so if a key any key on your keyboard when you're running this p5.js sketch is pressed the key is pressed variable will return true if there's no keys being pressed at that moment in time this variable is going to return false so there's a little bit of an example oops in here which is actually okay i should not press the space so if i'm pressing an a key on my keyboard and you can see that um while my while i'm pressing holding down my a key on my keyboard um the fill color is black and if i lift it up the fill color is white so and this is being used inside of an if statement and it checks what the value of this key is breast variable is and we're going to be doing something very very similar to that but before we go on from that i also want to check the documentation for the key variable so here it says key it's also a p5.js builtin variable but it contains the value of the most recent key on the keyboard that is typed so what it means is that the key value and as you can see you can actually see all the keys that i'm pressing which is how convenient so i'm pressing if i press the q keyboard it will draw in text inside a drop function it will show me what key that i've pressed inside of using the text um shape function and also if i press w then it will show that and so on and if i press the number keys it will do that too but if i press let's say the delete key oh it it shows me a longer yeah it shows you the the actual key code it the name for that particular key which i think what is this back back backspace bix backspace yeah and let's say if i do oops it will right tab all of that tab in there for you so this is another thing that we're going to be using um actually is it no we're going to be using a key but we're also going to be using key codes soon so that's why i got a little confused using oh yeah yeah but yeah basically this is what we're going to use and why by the key inside of this on line 20 the first step for a in order for us to detect whether the key is not equal to space bar to you and to detect to do that detection we're going to be using the key builtin p5.js variable so let's go ahead and do that so first i'm going to create an if statement and an if statement will contain the condition inside of the brackets or the parentheses and the curly brackets are going to be containing all the blocks inside of the if statement for it to run when the if statement condition is true i am going to close the curly bracket at the very end here so that we can contain all of the instructions inside of the if statement so inside of the if statement for the condition we're going to write if key is pressed p5.js built in variable is is is equal to true with three equation marks uh equal signs is true and and you can combine um you know conditions with two amp percents so that and keyword here is replaced by these two ampersands in here if key is what are we going to do you can detect if the key is a spacebar or not by putting the space in between the quotation marks so what the key returns the key b5.js builtin variable returns as you saw a little bit here it returns you the actual character of the key that you're pressing as a string so the spacebar you can't see it here because it doesn't show you that blank space but what the spacebar um character if you press the space character bar character returns is the blank space so if we um check whether the key is actually if we do this right if we do if key is equal to spacebar then it's going to check if the keyboard the key is the base bar prep um spacebar character is pressed so i know this we're kind of deviating from this step but i do want to show you that this works by maybe putting in a log statement in here and it would only work if it was the spacebar exactly exactly so now this um console log statement will only run if a key is pressed and if that press key is the spacebar now console.log spacebar is pressed so once we have that and then we run that so every time i press that space bar it will say spacebar is pressed and then when it's not pressed it sort of stopped i don't know if you can see this okay let's make that a little bigger and then it says spacebar is pressed for a couple of times okay maybe this is a really good question to talk about this but i only press my spacebar once but this apparently has printed five times there's a reason for that i wonder if um anyone who are watching can figure this out to figure out why this is pressing on the more times maybe we'll maybe we'll actually save that as a mystery for people to figure out while we go towards the um next steps and then we'll come back to this because it will be relevant when we you know run any of these other code that we're about to put in but we'll leave it there and then maybe give people some time to answer that so moving on from that inside the if statement our step 4b is saying create another if statement to check if the key code is divided into 5 divided by 5 is equal to 0. so again there's a number of things that we need to um unpack for from that um instruction so i'm going to go back to the reference page in here and i see that key code the thing that i saw inside the instruction for step 4b is actually listed under the keyboard section of the p5.js reference i'm going to go ahead and click on that and then i see that um keycode variable is a builtin b5.js variable that it detects special keys such as backspace delete enter return tab escape and so on but you can also use keycode to return the value of your ascii code of your keyboard so okay what is ascii code this is kind of like you know going and following one tail after another that's programming though yeah that is titan programming ascii code so i'm gonna google what ascii code is and it's telling me okay something about a table and then okay let's go to the wikipedia article actually and it's basically saying that it's a character in golding blah blah blah blah okay great so it has something to do with encoding the keys on your keyboard and if i go to images you get all of these what's called ascii tables and if i click on one of them maybe not that one okay i want something with a background so that we can see more clearly and also has not just hexadecimal i'm being very picky okay maybe this one will do so here if you take a look at what's called an ascii table it will tell us that there is um some sort of a way of you know matching the keys on our keyboard so like here we've got this character that's like the capital a's to z and we've also got small um small what is it called small character a to z lower case lowercase a through z um you know big big letter small letter that's why i got confused and then you've got what's called there's there's a code for hexadecimal value and also decimal value so all of these keys on your keyboard that they visually will give you on like a text input or like a google doc or what have you um if you press the key a on your keyboard and if it's not you know cat block caps locked then it will give you a small a lowercase a but really what it is doing behind the scenes is that it's saying oh okay display the character 97 on this text editor or text input box and so we're going to be using that to basically um divide all the possible keys on your keyboard into five categories so we're going to use the um ascii code that we can get using the key code p5.js builtin variable and say um because the reason why we're dividing into five categories is because if you go into the drawshapes.js file you will notice that okay we've got parametric lines function we've got bouncing elims function we've got from the direct function got the start function and the flower function we have five different kinds of visualization functions that are built in for you that i created for you so basically what we're going to do is for all the as the keys on your keyboard that is divisible by 5 and has a remainder of 0 we're going to run one function and if it's divided by 5 and n has a remainder of one then we're going to uh run a different kind of function and this is one of the actual more of a general um programming technique i'm using what's called a modulus modulus did i spell that correctly i don't think so i did oh modular operations so this is a general um programming technique to basically um it's a little bit similar to switch cases if you're more familiar with that but what it will do is that it will just um create five buckets i think that's the easiest way of thinking about it is that you create five categories or five buckets and you kind of go in an order of saying okay if it has index zero this bucket then one another bucket then two another bucket and it just goes through in an iterative loop okay not an actual loop but basically it's saying um we're dividing every possible chance into five five categories and we're going to run functions based on the remainder of what we get and so that means that um if let's say we're doing you have only three options then you can do a modulus of three meaning that you can put in you're creating three buckets and in which all of the possible scenarios are going to fall into any of those three i think it will make a little more sense when we actually start programming it so what we're going to do for step 4b it says okay created another if statement so let me actually go ahead and create another if and my closing curly bracket is going to come after here because i know that all of the instructions are going to have to be contained in here for that this particular if statement and inside of the if statement for the condition i'm going to use the key code built in b5.js variable and then i'm going to divide it by 5 5 but instead of using the divide slash i'm going to use the modulus key so if i do modulus which is the percent sign and divide and do modulus of 5 what this will return is that whatever value of key code it's going to divide it by 5 and then give me the remainder so if i were to let's say divide 11 11 and modulus 5 what this will return me is um 5's goes into 11 twice and it has a remainder of 1. so the whole thing all of this 11 modulus of 5 was going to return me 1. and if this were to be let's say 13 then it's going to give me a remainder of 3 and so on so whatever the value of key code there is a limited number of possibility of remainders that you can get when you divide a number by 5 and there will be remainder of zero one two three and four so there we've created a weight that we can categorize this spot whatever this value might be into five separate categories and i'm going to run this particular if statement only if the remainder is zero because that's what the instruction says so to create another if statement to check if the key code is divided by five is equal to zero so this is just our bucket number one or bucket number zero depending on how you want to count that um and inside of this if statement for step four is c we're going to call the para pair careful with the spelling parametric lines yeah function which is already created for us inside of the drawshapes.js function so there's this the first function that is listed in here that does something and then kind of if you loosely see that it's drawing a line and doing something with speed and xy locations okay let's see what that is about inside i need to change the uh the key in the main if statement first it's uh still checking if it equals thank you so i'm gonna fix that and follow the instructions and make sure that we only run this big the the bigger the outer if statement only if the key is pressed and it's not the space bar so for everything else that's not the space bar if you press any key and if the keys key code is divisible by five and returns zero for the remainder there's a lot of ifs in there but then if all of those conditions are met then it's going to draw the parametric lines function and there's a key that is um that you can try oh using to run it it says okay try pressing the e key because why let's go back to the ascii table and the a key has okay 27 97 so i i think it's going off the decimal of the the uh uh so i think it's going after that the it doesn't matter if you press the lower okay key code has a key code is weird i remember um in the documentation that it's indiscriminate in some way time like some situations yeah so key code actually can't tell whether you are pressing the key code not not the your keyboard but the key code e5.js built in variable it doesn't care or doesn't it doesn't know if you're pressing a lowercase or uppercase character so um if you're pressing even if your your caps lock is off on your keyboard it's always going to think that if you press the a key you've entered in the uppercase character so that you will have to match it with this decimal number which oops actually this is better so i can zoom in though um the decimal number for the a key the capital a key is 65 and 65 is divisible by five and has a remainder of zero so if we go back in here and then run the sketch and press the a key this is what okay let me press it a little bit more this is what the parametric lines visualization inside of draw uh shapes.js looks like and so personal favorite one yeah so i'm actually holding down this a key and then if i let go the animation stops and then if i press again it picks up in a new location so that whole pic unlike generating a new location is actually happening because whenever we release that key we are randomly setting x y speed x and speed y variables again so that's why you get you know whole new colors and a whole new uh what colors are actually happening for different reasons but you we get new lines every time we press and release the keyword um maybe this is now now a good time to answer why we were getting this space bar is pressed a number of times um printed to the console um not anymore because we're not checking if the keyboard is uh pressed sorry we have um zoe in the chat saying that it's giving um strong windows 95 screen share revised which which it totally does but to answer that question that we threw earlier on about why that print statement was happening over and over again and also to um tell you guys why if i'm holding down the a key we keep getting this um animation of the lines moving around is because this is inside the draw loop and even though we're using the if statement and we're saying if the key is pressed is true but this is happening in a loop which means that for that number of it's not just one frame that your key might be pressed it could be over a number of frames in cont in number of continuous frames that uh for that duration of frames your key is pressed so that's why while my key is even though we're using an if statement it's kind of like easier to think about in the way that while your key is pressed because it's being looped the check is being looped um you're going to be continuously drawing this parametric line visualization did i say that right yeah i think that's okay yeah perfect okay cool so then we can move on from that and then complete our step for d okay and it says create another if statement to check if key code divided by five is equal to 1. so now we are moving on to the next category right of key code so outside in here we'll say if key code modulus of 5 is equal equal to 1 so now this will be another set of keys right another set of keys that have s key code and is divisible uh if i if we divide that by five it has a remainder of one so there'll be like you know numbers like trying to calculate this in my head 66 71 76 and that kind of those kind of numbers some when all of those numbers are triggered um air pressed then we're going to trigger whatever function that we're going to put in here so let's actually go and take a look it says step 4 is to call the bouncing ellipse function okay let's go ahead and call that function bouncing ellipse and inside of the function we have to pass in an argument that is a random number between 1 and 150 there are multiple ways of you can do this right you can create a temporary local not temporary it's just a local variable inside of the if statement and say let random number and then can say random minus 150 or you can put this random directly inside of our function as well so we could have written just random minus 150 in here and then that would have also worked either way works let me just comment that out and then put it directly inside put the random function directly inside in here but then now if we go ahead and press play and now i'm going to try pressing the g key because let's go ahead and take a look at in there too g key has a ascii code of 71. so if we divide 71 by 5 it is it has a remainder of 1. so now let's go ahead and press that g and now we've got these bouncing ball things that is creating traces behind it as well and it bounces around i feel like this also has a bit of a you know window screen saver vibe to it as well but it's a bit more pastely um so then okay now we we're generating this the animation continues while that g key is being pressed and it stops when the key is no longer being pressed we can still put that parametric lines animation on top of it right if we press another key that it has a remainder of zero when it's divided by five so if i press a key we've got this parametry lines animation being generated if i press g again we've got that bouncing ball animation happening again so we've mapped basically two out of the five categories that we have prepared i'm going to move in a little bit faster so that we can get all of these visualizations done within time and so okay for the next one we're gonna check if key code divided by five has a remainder of two and so when that is the case um let me move this after here then we're going to um call this forward function which doesn't take in any arguments so i'm going to write flower with no argument inside and if we run that now if i press the r key we've got this like flowery look loosely flowery visualization that's happening around different um parts of the um canvas and we can still have our bouncing ball and our parents lollipops oh yeah just like they kind of do they're kind of like a spinning or like a if you were to record a yoyo spinning around in like really slow motion that's i guess kind of a pattern it will take um draw but yeah now we've mapped three different visualization functions in here and moving on to the step five it says now we're not we're done with everything that we want to draw inside the draw function and now we're saying to add another function called keypressed so if we go back to our reference i'm going to close some of these if we go back to the reference page you will see under the keyboard section there is another function called key pressed so if you go ahead and take a look at that what that does is that it is called once every time a key is pressed so that's a little bit of a difference here the main difference between using detecting key presses using the key is pressed variable inside the draw function and using it inside the key pressed function is that if you want to have something run while a key is pressed and held down you will want to do it inside a draw function using the keys pressed function if you only want to trigger something once and not multiple times no matter how long the key is pressed down for then you will want to call that inside of the key pressed p5.js builtin function and we'll make this um it will be a lot more obvious when we actually add more the rest of the categories inside of this key press function so i'm going to go ahead and add another function in here and say key press open and close brackets but i'm going to add the closing brackets outside of it here and then um inside of the function it says okay inside the keypressed function the step for a 5a is to create an if statement to check if a key is not equal to spacebar we did this before in the draw function so the reason why we are leaving out the spacebar key is because we want to actually add a special trigger special event when the key the spacebar key is being triggered so bear with us and there is a reason why we're leaving that key out but then okay so when the keypressed function is being triggered as long as the key press is not a spacebar we're gonna go ahead and then we're going to do another key um check another key code and do a modulus of the key code um variable and if it's divisible it's when you divide it by five and if the remainder is equal to three then this time we're going to call a function called rounded rect so when we get that done and then we um you know run the sketch and i'm pressing the n key and you see that only once the the rounded rectangle is drawn only once when we press the um the n key and no matter how long i'm holding it four it will only draw one around the rectangle which is very different from you know our parametric lines it only stops drawing the parametric lines or stops animating the lines only when my a key is my my i'm no longer pressing the a key but for the rounded rectangle function that is being triggered inside the key pressed function it only draw what draws one instance of that shape function regardless of how long you're holding down the key for okay so then moving on from that um i guess we'll then go ahead and add the rest of the two i think we've got one more yeah we've got one more left so then we'll check the key code um value for if the modulus of five the key code value um and the remainder is equal to four then we'll add our loss visualization function which is the star function and star function takes in three arguments it says so if we will call the star function but inside of it we'll need to give a random number between 30 and 50 for the first two arguments and also give it a random between four and seven for the last or the third argument so let's go ahead and do that and for the first one i'll give it a random number between 30 and 50. same for the second number 30 and 50. and for the third argument i'm going to give it a random number of between 4 and 7. so now let's go ahead and play or run the sketch and i'm going to try pressing the e key i think it is a little bit less visible so maybe for this one i'm going to actually change the um value of the sketch the background color a little bit oops i think the ikky so there we go i think this is a bit more visible at least for the stars so yeah so this only creates one star actually let me do it with less it only creates one star um when when the e key is pressed so if i want a lot of star visualizations i want to keep spamming my e key then i can get a lot of these um joshua just joined and asking uh what language this is this is javascript um but it is a javascript library called p5.js and we're using it to create visualizations for the web um if you are more in if you're interested in knowing more about it we are there's a p5.js course called learn p5.js that is free and you can also um take a look at the documentation of the p5.js library if you go to the p5.js.org website as well it was like a really good like a short brief introduction about what we're doing okay so now that we've got all of these visualization messed up now if i press any key in here uh any key into um into my sketch actually i'm going to bring down the color of the background again because i think this works better when the color of the sketch is a little darker so now if i'm pressing any sort of keys in here and i'm getting all of these visualizations created so you could kind of like you know if you wanted to type a sentence if you wanted to or like type in anything or kind of like you know spam your keyboard and you get this sort of like a generated visualization at the end um and then you can um yeah and it's kind of like generating a whole picture i'd say using uh predefined functions that are inside of the draw.shapes.js file in there for you but okay let's say that now okay we've created this great tool i'm kind of like really into this um generation that i've created in here how do i save this creation that i've created there's multiple ways of saving this you could do a screen capture right you could do if if you have mac b command shift 4 then you could you know select that um area but there is also a p5.js function that you can use which is why i'm talking about saving it there's a function called save canvas right i think this is the function that we use um basically that will let you save whatever that is currently being shown to you on the canvas so in here using the p5 um p5.js function called save canvas we're going to do is that we're going to actually detect if the key code is equal to the return or the space no let's space return the enter key and if that is the case we're going to use the save canvas function to save whatever we have inside of our sketch so in here we're going to say if key code is equally equal to some sort of an ascii code for the return key so that i'm going to go back in here and see oh this one's a little bit difficult to see well i know that it is um 13. so it says in here that um carriage return is normally it's another like a more formalized way of saying the return key or the enter key so basically the um the ascii code for that key that you have on your keyboard key keyboard called return or enter or i think sometimes has that you know the arrow that goes from down and towards the left um that the key ascii keycode for that particular key on your keyboard is 13. so i'm going to check if the keycode of the key that i've pressed is equal to 13 and if that is the case i'm going to use the save canvas function in here and then i'm going to say um save canvas i actually i've i always forget what um argument i need to put in here but basically i need to say the name of the in the image file and then i have to give it the extension of the image that i wanted to be saved as you can generally choose from jpg files and png files so in here i'm going to say if i if you want to just keep it really simple you can say my visual vis i'll say my viz and then i'll give it a jpg file extension so if i go ahead rerun the sketch let me do a little bit of you know typing in here to create different kinds of visualizations i'm going to hold some keys more than others okay i'm happy with this i want to save it if i press the return key i have i don't know if you guys can see this but i've got a file that's called myvis.jpg and it will be saved inside of your downloads for folder most likely but um if i save this again it's going to create my vis of um brackets one and two and so on so if you're okay with that you can um you can go with that or if you want to kind of like automatically generate the um like a number that is attached behind the files then you can do something like i'm going to say my canvas and then i'm going to put a dash in here and if we concatenate it with the frame count variable we've seen this we've used this variable before when we're doing animation um but basically this number is a b5.js builtin variable that increments during the whole duration of your sketch running so we know that this is going to be going to give us a more or less of a unique file name so it's going to do my canvas zero if you like you know save it immediately as soon as your um p5 sketch runs or p5 my canvas dash 264 if that's the number of the frame that you are you've pressed the return key to save whatever you have on your canvases so then let's let's go ahead and then if i do press these things okay cool then i um press return then i get a file that's called mycanvas556.jpg oh i've only saved this um browser but if you click on it it will look the same thing as what you see on the preview window in here so it's actually a neat thing that you can attach like even if you're not creating like a generative art visual visualizer or like a tool that you can use to generate visualizations or anything like that in p5.js it's like a neat thing that you can put inside of any sketch so that you can you have the ability to save whatever they've created inside your canvas i think we're gonna maybe leave out um clearing out the um the canvas in here uh for now before the sake of time but if you go to the solution code which is also linked inside of the youtube video description this is it oh yeah it's just not in the same the file that i want um inside of the key pressed function in here it doesn't have all the messy step instructions in here so it's a little easier to see but there is this else um else statement that clears the canvas and also sets the background color again because when you use the clear function it will color your p5.js canvas into a transparent color i guess um if anyone has any questions that would be a really good time to talk a little bit about them but i think um oh there's a question a followup question from joshua asking if you can use other languages to get the same effect or do something similar i think is what it means what they mean but basically i'd say that if you're interested in doing something like this and you're not familiar with javascript there is also another thing called processing and cassie when she came in when they came in last week um talked a little bit about this but basically p5.js i don't want to say is a spinoff but it was developed uh with inspiration of things that were done for the processing and processing is a base it's a java platform so if you know how to use java and if you're more familiar with that kind of languages like java python c this might be something more for you where you can get a little bit started with creative coding not using javascript and using java and you have to download this application um the processing application and will give you like an ide or development environment where you can do a lot of the things that you can do with p5.js and there's a reference page in here and if you use um processing a little bit you will quickly notice that it's very similar to p5.js cool you have any questions morgan do you have questions i don't i think that was a very very uh thorough walkthrough um again this is available on the learn p5.js course so it's inside today we went through the project that is under the interaction module um so after you go through the lesson on interaction with ijs on mouse and keyboard events the project for the generative art creator is what we went through on not on the kocami platform but on the b5.js web editor and we'll be continuing to use the web editor for our next um next live stream and for the next live stream just to have a just talk about it very briefly we're going to talk about uh we're going to walk through this project called interactive video sculpture that we're going to do using images and videos maybe i can actually just give a really really quick sneak peek at it and this will be the yeah this will be the last thing that we do so yeah we're going to be oh sorry no go ahead no i was just going to say that i know that it says it a little bit in the description here but the same with the interaction one there's a lot of um kind of historical like background to these types of projects that are if people are interested in i really recommend looking up the um the little description tidbits before the project begins yeah it gets more reference for how these like the basically the history of all this stuff like computer graphics or just visuals so this particular one at the general art creator that we went through is very inspired by uh john whitney and vera mullner um so they're very like you know the all the shape functions in the draw sheet sorry the visualization functions the draw shapes.js file are like you know those the visualization styles very inspired from those two pioneers of computer graphics and for um interactive video sculpture that we'll go through next week is very inspired by the korean american artist namjoon p so it's kind of like a digital version of a sculpture that he could have created i'd say he's very inspired by him so yeah so i think um that is it for this week's live stream session but um we are looking forward to seeing you next week to create the interactive video sculpture bye