cool and yeah it looks like we're good so hello everyone welcome to another session of codecademy live we've got an exciting one for you today uh we're here with josh goldberg who is going to be teaching us a little bit about typescript um hi josh how are you i'm doing great i'm excited for my first live stream how are you i'm i'm good um yeah josh i uh so a little bit of background i know absolutely nothing about typescript so i am excited to learn some uh you are probably the person that is most excited about typescript that i know in my in my life um can you give us a little bit of background about how you got into typescript kind of what you do at codecademy um all that all that kind of stuff absolutely um typescript is great big fan of it uh it's a superset of javascript meaning it adds a bunch of really useful stuff on top of regular javascript so as a web developer you don't have to use typescript but if you choose to it can be really useful i got into it because i had a few personal projects a bunch of years ago that were very bad code i will say politely to myself it was they were very sloppy it was very hard to keep track of what was going on and i kind of fell in love with typescript and other things that are called static analysis stuff that looks at your code without running it and tells you whether it's good or bad because they helped me a lot in cleaning up the old code and figuring out how everything works so now fast forward a few years i work at codecademy on our frontend team and we use typescript in pretty much everything that users touch so i'm really excited to be able to show off how how this thing works yeah if if you can kind of uh show us how typescript is used in codecademy that'll be a cool uh cool little bonus as well um i think the plan is going through a little bit of our typescript course which i think you wrote um or at least you advised on or helped write um a couple years ago um yeah what what was that like i guess of um of trying to teach typescript to codecademy users ooh it was fun um when i joined codeacademy it was early 2019. you were there uh there we didn't really use typescript that much i know there were a few people in the company who were interested but no one had gotten around to really putting in the investigation effort and switching things over similarly we didn't have any typescript in our curriculum which is a little bit of a whole because it's very popular and important for a lot of web dev areas i think it was very formative in learning for me because there is a lot of thought that goes into codecademy curriculum a lot of people i think miss that there is a lot of i believe the term curriculum uses pedagogy uh there's a lot of a lot of kind of understanding of what needs to go in what order how do you explain things to someone without either making them feel stupid or making them feel like you're just telling them things they already know so teaching typescript was a battle of trying to figure out what are the core parts of typescript that are really important and and how do you explain those well to people who might not have any experience in a typed language like c sharp or java or c plus plus beforehand does that make sense and answer the question you're looking for yeah i think so um cool yeah do you want to jump in and take a look at some some typescript yeah i thought for the stream today i share my browser screen and we go through the learn types of course i am very proud of and excited about this course because i didn't fully write it but i did help advise on it and write some of the content although i think it's changed a bit since i started it so i reset my progress here and oh yeah this graphic this is new and i just met my weekly target i love these little little delighter features uh yeah going through it uh types of typescript lets us type variables with different hang on a second is this the first thing oh no it jumps that might be a bug and all right we have to fix that there we go what is typescript that's what we're supposed to start on um i remember i remember being so pleased with the art person on this graphic this graphic is just so beautiful i've used it in presentations oh my god nice um but yeah uh invented 95 javascript was designed as a small scripting language it wasn't until 99 that it could do all sorts of dynamic web pages which weren't really common until 2005 which is true i remember when uh learning html for the first time it was all tables uh and there was there was like very little interactivity and now we have things like twitter instagram so in 2012 microsoft develops typescripts and released it publicly to blend kind of the flexibility of javascript with the advantages of a stricter language javascript doesn't have types which is a feature in other languages that allow developers to say explicitly what something is supposed to be like this variable is supposed to be a string or that function is supposed to take in two numbers and an array of booleans or something and javascript doesn't let you do that there's just no concept in the language so at its core what typescript is is it adds a type system to javascript it says you can now declare in your code what stuff is is allowed to be or not allowed to be does that what can that explanation ring with you yeah i think that that makes sense why why would somebody care about that and so i think so if you if you're watching this and you're not familiar with typescript or javascript really i think that this comes up with like python where python um you don't have to declare hey this variable is going to be an integer this variable's going to be a string it can just kind of be whatever it wants versus something like java you have to specifically say this thing that i just created is a string and it's only ever going to be a string um and so i think people have different opinions on that where it's certainly nice to write python you don't have to worry about that kind of stuff so you can kind of like write code quickly and it's probably gonna it's it's a little bit easier to work with than something like java so why why add this level of complexity of of adding types to uh to javascript that's a great question um i think that you're absolutely right you hit it on the nail on the head uh when you're starting out and you just want to get something to work you're in like early mode hackathon just trying to get the thing to work uh it's really annoying to have to jump through hoops to get the whatever tooling the compiler happy but if you have a hundred files in javascript and a function declared in one file that's used in a dozen other files it gets really confusing and annoying to try to figure out what is that function supposed to take in uh the example that i like to give is suppose it's supposed to take in an object that has a name a superpower and a weakness you're in the marvel universe or something um and then later on in your code you realize well actually i'd like to have weakness be an array because some people are weak to multiple things now in javascript it would be incredibly difficult to figure out all the places that call that function and all the places that call those places and switch from anything that could be a string to an array of strings and make sure you've gotten all of them whereas in typescript because you've defined in your code this must be an array or this must be a string it'll tell you if you've forgotten a place saying hey you passed a string here did you need to pass a string array so definitely very useful not just for for explicitly saying what's supposed to be in the code but as you change things which almost always happens in code that lives for a while it makes it easier to know when you've messed up or when you still need to change more stuff yeah i think that's an interesting thing when you're learning programming because oftentimes the programs that you're working on are a single file or maybe three or four files that are all working together and so i think it's hard to like replicate this giant system where uh a change in this variable is gonna have like impact beyond what you can possibly uh like track down if you don't have systems like this so it's kind of an interesting thing that's a little bit hard to teach um because a lot of introductory coding lessons are kind of sandboxy and selfcontained um so it's a cool experiment and like trying to teach something that is impactful for the really big projects yeah for sure i remember actually that was one of the difficulties in making this course that we didn't want to show people these 50 file projects that we needed to show the usefulness in just one file yeah oh cool should i should i move on yeah yeah let's keep going let's see some code um i guess i will also say that uh right now we are live uh and i see people chatting in the youtube chat if you have any questions for for josh um again i cannot imagine more of a typescript expert and so uh uh please feel free to put any questions you have in the youtube chat with love questions it is as someone who's doing this for the first time i'll tell you it is terrifying to me that i am boring people so please stand up give me your questions um but yeah let's look at some typescript uh the first thing that i i'm very excited that we teach about typescript uh oh someone in someone using o3x yeah is that uh a lot of javascript code is also completely totally valid typescript code and vice versa uh this example here that first name is unders equals unders fun fact anders helzberg the architects leader of typescript was also the leader of c sharp another microsoft open source language um it would output this code like first name equals unders so if you were to run this in typescript and then have typescript output javascript which is what typescript does they'd look the same because typescript is a superset it's javascript plus other stuff and if you don't use the other stuff it's still just javascript so the way you might do typescript oh no sorry go ahead josh i guess kind of a uh a question about that i think so when i think of like super sets or like adds addons to a language i think of like packages in python of like oh i'm using base python but i want to do some graphing and so i import matplotlib as a package what makes typescript its own language as opposed to like you know a package or an addon or something like that to javascript or is that definition just like is there a distinction between those two like is is typescript just a javascript package oh that's such an interesting question because there are multiple answers to that um typescript is typescript is technically written in typescript which is fun uh and it's distributed as an npm package so the standard package manager for javascript akin to i forget what the python one is called but the one you i think are referencing um it is so typescript is it's a language and it's a type checker and a compiler all in one thing so there's a specification saying you're allowed to do this console.log or this in code like this is valid typescript syntax and then there's also a package that is called the same thing typescript or the type of compiler that takes in the types of code and outputs javascript code and the way that that package understands how to work with your code is it checks your code against the typescript language spec it says okay this this let is allow this is fine so it'll output the equivalent javascript so when we say typescript is a superset what we really mean is that the language idea of typescript contains all the javascript syntax plus some more stuff and then the typescript package takes in typeship syntax it outputs javascript syntax got it does that seem reasonable yeah i mean it's kind of a hard question to answer like what is a programming language either which is like hard to hard to specifically define in a way that that makes sense um but yeah that makes sense remember talking to someone once who said that people should always learn assembly they're like lowest level bits ones and zeros and then work their way up and i think that that would be a very difficult thing so now we deal with professions yeah uh let's look if we in the bash terminal provided here we've preinstalled the typescript package so if you run tsc which stands for typescript compiler it will create an equivalent file index.js cool interesting how the syntax highlighting is different someone there's a bug somewhere uh but yeah uh index.ts became index.js and similar to this example they're the same thing and if we run node index.js we get the nice hello world yay cool and and just to be clear so like if we try doing node index.ts that is not going to work because node presumably doesn't know how to interpret typescript confusingly it does work um i'm going to sneak peek if you add typescript specific syntax this colon space string is something new and then you try to node index yeah i hit save cool uh you probably need to hit run to save yeah that's what i was trying to do thank you nice so once we start adding typescript specific things to our textbook file then node can no longer run it exactly yeah which is one of the one of the difficulties with typescript that you have to compile from your ts file to your js file using a tool such as tsc the typescript compiler the official one but before we get into those type annotations uh let's look at type inferences so typescript looks at your code and understands things from it based off of all the stuff that it sees being done in this case it can look at your aged variable and see that it's a type boolean because it was initially true or it can look at real age and see its number because it's set to zero by default um this fun fact these little popover things we this was a kind of hard to add to the learning environment we added it specifically to support the typescript course at the start uh a fun feature to add ooh someone asked in the chat if i'm working with my react do i need to use typescript not js no you can always use javascript with any package that's popular like react or angular some of the packages really emphasize and recommend typescript such as angular but you can you can still use regular javascript yeah um one of the the cool things about typescript though is that it adds a lot of cool stuff such as helpful inferences in this case uh we are trying to assign a string value four years to real age but the way typescript understands variables is that if it has an initial value it's inferred to be that initial values type it should only ever be that type of value so we're not allowed to say assign a string to something originally type number because typescript thinks well that was originally a number you're not allowed to put a string there does that make sense alex i don't know if that's a reasonable exponent yeah i think that makes sense what happens if you don't give it an initial value does it just kind of stay typeless until you do give it initial value yes it's what's called an evolving any um when something doesn't have an initial value when types of can't figure out what it is that defaults to the any type um ooh this is an interesting ah this is cool so typescript can later figure out in fact typechip will tell editors that hey i can i can figure out from its usage what the type is actually supposed to be i can infer type of thing from usage uh when in this case this is the operator indicating it's either a string or a number got it uh the the any type is kind of a bad smell like normally we try to avoid it um it's called an evolving oh go ahead sorry i was gonna say it seems like it's kind of defeating the purpose of if the special thing about typescript is giving variables types then giving everything be any type is like we're kind of just back to javascript exactly yeah um sometimes you have to sometimes it's just annoying to try to type things out properly but for all the examples we're going to look at today there's there's generally a good type to put in it's evolving because typescript can figure out that after you assign something to it it actually is that things type so after line five we assign a string to real age type chip knows it's type string that's not supported in our editor that's funny but yeah don't do any uh here we go so if we do run to save and then tsc index ts um there we go we see that type string is not assignable to type number is an actual error given to us by typescript fun fact for our learners you can resize this window um it looks like real age the assigned value real age should be four i'm guessing all right cool and if we run psc in next yes no complaints yay cool um but to really dive in here uh the way typescript understands a shape is pretty key to how typescript works overall if we see that first name is muriel and it's a string type ship then knows that first name has all the things the string has like dot life or first name dots not getting suggestions here we might have turned that feature off but like first name dot split or something is a method but if you do first name that two uppercase typescript knows that's wrong did you mean to uppercase with a capital c so that's like i think immediately like the first example of real value that typescript gives someone where if you mistype something it can suggest the correct thing to use there so back in javascript world uh is the difference just that you know our text editor wouldn't recommend dot length because it doesn't know that it's a string or if i tried to dot length a javascript variable would that just uh only work if it is a string yeah um a lot of javascript editors now somewhat confusingly use typescript to understand their auto completion for example vs code very aggressively does that so it might it might tell you you can't use dots whatever the wrong thing is the typo but yeah uh most of the time if i were writing this code in just javascript and i console logs with the wrong thing node index yes it would it would give a crash you would just know at run time oh i messed something up you better go find it which is really annoying because you have to wait until it runs and sometimes it takes a long time to use your program or project or whatever until you get to the point where it crashes so it's quite nice to have it in your editor with a little red or yellow squiggly here nice cool fun fact by the way these are all references to 90s cartoons in this lesson muriel is from courage the cowardly dog one of my favorites uh we got we have a question in chat which uh is maybe a tough tough question to answer but if i'm trying to build an api is typescript better than javascript better is a hard question to answer you don't have to use oh there's some people in the chat right now hi john um you don't have to use typescript uh i'd say if you're not familiar with typescript it can be quite confusing to suddenly use it for an api or some project so i definitely recommend if you do want to use typescript and you don't know it yet bucket some time to really learn it to make it easier for yourself but there are a lot of advantages for typescripts um when you write something in typescript you can output shapes uh definitions for these shapes that we're seeing here so consumers of your api understand better what is supposed to be what types i just think it's a really good language for writing stuff because it gives me a lot of development utilities so i can't really answer the question is it better to use javascript or typescripts but i can say that if you know typescript or are willing to learn and have the time it is very useful and i would recommend it cool uh you see uh what was the need of typescript when we already have strongly typed languages on the back end ah such a good question um typescript is a superset of javascript so you'd use typescript wherever javascript is used and javascript is used in node.js and more recently also in dino which is similar to node but from the same original creator as much more secure so although you could be writing strongly type stuff on the back and say i don't know go or c plus plus or java there's still a lot of advantage to writing things in the same language on your server and client let's say that you have a project a small app that has a backend server a frontend app and then some shared types that are supposed to be understood maybe you have a cat api the shape of a cat is supposed to be sent from the client to the server or vice versa it's really useful to be able to use the same language and then share type definitions or class definitions between the front end and the back end so even though people might have preferred to write in some other language like csharp on the backend there's still a lot of advantage to writing in the same language so if you're writing on the frontend which is practically always javascript these days for web apps you might as well write in javascript or typescript for the backends too so yeah a lot of frameworks like next js and gatsby are popping up because it's really nice to be able to use the same language for your server and clients alex i don't know if that times well with some of the thoughts you have there um no i think it makes a little bit makes a little bit of sense to me again i'm not a web developer so like even the distinction between um you know i don't quite know the i've never encountered an exact example of like oh this is this is where i wish my front end and backend language were the exact same um that's never come up just because i'm not a web developer but i can i definitely get your point of or seeing how that might be uh useful cool yeah the world of web development is wild and wacky at times random considerations like using the same language mean much more when using a different language would mean having to cross language boundaries for type so not being able to use the same process to serve a rendered web page yeah i'm gonna i'm gonna fix these errors uh node next yes so the issue was i'm actually going to use typescript's quick fix to change spelling on this one because i love using the typescript things nice thumbnails yeah really cool that we got that in our uh our text editor here you know uh we actually completely overhauled the text editor at around the same time a time as this course it's it used to be something called code mirror and then we switched it to something called monaco to be more accessible so like folks who don't have a mouse or low vision can use it and coincidentally monaco is what is used in vs code which has great typeships of course because it's also written by microsoft yeah you you asked earlier about enemies and this this you were peeking ahead i think instinctively uh what happens if we have yes without an initial value well it's an any which is not great um so it's allowed to be anything and then the end result is typecube doesn't stop you from putting in any particular value on it got it and so i i would have actually expected that to error because again i i would have expected this to be what is called an evolving anywhere um where i would have guessed setting it into blue would have said okay this is a string and then once i set it to one then then it would error um so i guess this surprised me of uh not crashing there yeah to be honest evolving enemies happens so rarely that i i just don't i don't know much about him um i only learned the term after we wrote this course which is why i don't think the course actually references the evolving any concept but yeah i believe it's that it starts off as any and then from there on out is always any and types it might be able to give you better suggestions based off of it if it sees kind of type but it's still any got it makes sense so what some folks might be thinking at that point is well does this mean typescript doesn't let you declare a variable without an initial value but no you you can add type oh that's a typo there should be a no space in front of that formatting preferences so like this phone number thing is a good example where we meant for it to be a string so you can explicitly say say colon space string or colon space whatever the type is supposed to be got it and so that that if we didn't include that it would be an emmy but now that we are including that we're saying hey this thing doesn't have value yet but it will eventually be a string yes exactly what is the what is the concept of like null or undefined or any of that stuff does the typescript handle that in the same way that javascript does it does yeah uh null and undefined are both both types and values so you can say that for example let by value colon null and then my value is only allowed to be you know got it which is useless at first but i guess maybe this is me not knowing javascript what is phone number on line two uh before we give phone phone number a value is it undefined is it no is it uh it is undefined got it um and type people actually tell you if you use it before you've assigned the value it's undefined that's not going to work variable whatever is being used before assigned okay cool and so i guess that's yeah that's i mean i guess that just makes sense of so phone number is going to be a string but it's allowed to be undefined until it is a string cool are you familiar with the term billion dollar mistake any chance no i'm not oh it's one of my favorite things i think we go over it later in the lesson but the idea in a lot of programming languages is that you can you can assign the null value in that language null undefined nil whatever they call it to anywhere that expects some other value type um so like in some languages you'd be allowed to do this and we typescript originally had that billion dollar mistake of allowing this and then later on added a feature so you can you can make it so this is not allowed it was originally there because some languages didn't have an understanding of the difference it was easy to add in but the person who made it uh later called it his billion dollar mistake because this is really annoying and it has caused a lot of bugs perhaps over a thousand dollars of bugs at this point nice um interesting question from chat we were kind of talking about this before but doesn't any type ruin the whole purpose of strongly typed um uh yeah uh i don't think any is of any use because um because again it's kind of ruining the purpose of typescript yeah um it does defeat the purpose of typescript but it only defeats the purpose of typescript in one small little place so i would rather have a file that's 90 typescript and has a few endings in there and places that i couldn't type then have a file that's zero percent obvious by zero percent typescript and it's only javascript nice that's a good way to put it um question about difference between let and var that's definitely a javascript thing but does typescript do anything specific with what versus var no typescript recognizes how javascript plays differently with them let's let in javascript and constant javascript are newer than var where var has some weird behavior where like if you do this or hello inside an if statement the hello variable will be available after the if statement uh which is weird saying this yeah because this this code is very confusing to me uh bars get automatically declaration or file so like some even though the var oh no that was weird even though the var is available is declared inside the if and the else it gets hoisted up here so it's as if we did our hello here that's weird and confusing and no one likes that and that's how javascript's been forever latin const don't do that which is why we all prefer them now so if you switch that var to a let on line 8 then line 15 will start to yell at us yeah but yeah that's a javascript thing type ship recognizes a lot of javascript features such as latin bar and counts but does not i love john riley is another typescript person who's done a lot of open source for didn't mention yes it is tony i don't know how to say his last name in the chat who invented them so yeah cool we can now by the way see that phone number is supposed to be a string so i can fix that thanks cool moving on all right line of code made me so happy fun fact i have to fight to get these emojis here uh emojis so we have to fix some bugs cannot only imagine what the emoji uh code course had to go through oh it was hell [Laughter] worth it though uh but yeah typescript is a superset of javascript that adds types it's a language and it's also a compiler that takes in typescript code and outputs outputs javascript code uh typescript has a type system which can look at your code and understand these variables are particular types and once it understands a variable's type it can understand the shape of that variable let's say it's a string so it has a dot length on it if you can't infer a type you can use a type annotation such as colon boolean otherwise typescript will think it's an any type which somewhat defeats the purpose of typescript locally a little bit shape is an interesting term that i feel like i haven't heard in any other programming language i feel like if i were to make an equivalent to java or python or something like that i'd be using class of like okay uh you know i i have this object it's of class dog it can do anything that a dog can do what's it is that kind of the same way to think about shape like how does shape differ from class this is i love this these are such good questions um typescript is such a weird unique language compared to most other mainstream programming languages in that it's structurally tight or shape typed meaning it cares about the shape of objects less than it does the exact reason why they are that shape we'll see this a little bit more where we start defining object shapes but um you can if you define a shape let's say you define an interface and i'll this is a little bit peaking ahead like has length where it defines that something passed in much has must have a length takes as length and then takes has length is provided let's say array and provided a string typescript is structurally typed and only cares about the shapes meaning both of these are okay you don't have to explicitly say that i'm passing in an array or passing it a string as long as the thing passed in happens to satisfy the shape being requested it's allowed so that's why we use both both strings and arrays have a length and so because you've you've said that hey this thing has to have a length those both of those will work yes exactly and even if you pass in some arbitrary object that just so happens to have a length number all we care about that has the length that's fine makes sense and that's different than a class because you know a class is only this specific thing but uh but typescript just says if you're in the shape of what we are asking for then uh then it will work exactly yeah although there are some peculiarities with how tech trip deals with classes uh let's say that we do say this explicitly must be the has length class and then we do takes has length class and pass in an array that's fine uh typescript actually doesn't explicitly need you to pass an instance of the class as long as it satisfies the correct shape uh which is very weird and a lot of people are confused about when they first see it so like this this thing won't satisfy is not assignable parameter of type and honestly i can never remember the reason why this is the case but it has to do with um structural typing being just like a convenient thing so fun nice yeah we're peeking ahead do we have time to move on to the next yeah i mean i'm happy to have you for uh until until noon if uh if you can stay that long i'm done i will note though that i am deploying code to production in the background and every time you ask a question i'm furiously checking to make sure i didn't age of deployment uh we had a slow down earlier today that's always what happens so i might get folded that's all right um maybe um this might be putting on the spot could you show an example of how typescript or where typescript is used on codecademy itself oh absolutely let's look at source code fun fact on codecademy we intentionally keep all of our source maps in production which means you can in your dev tools look at our code uh source maps is the thing that tells some environments such as a browser um this javascript source actually looks like some other file and we also enable the react dev tools on production so if you're a react aficionado like me and you want to see how things work you can use the dev tools to look at all of our stuff so like this article content container is a component that we've declared and i actually don't know how to skip from these dev tools to the source if that's a doable thing that does that work well that almost works but uh article content here we go i guess i'll just look at some other components oh yeah some of these components are kind of wacky but yeah here we go the way that we define an article which is the current container that we're seeing on the screen is it's a we say it's of type reacts of fc so react function component and using the syntax that i think eventually gets introduced called the generic we say that the type of props for this article are article props um i'm realizing as i say this this is all kind of react specific stuff but i will say though that it's kind of hard to find examples of where typescript's really used because most of the time typescript code looks a lot like javascript code like this all is basically javascript code well and then even declaring that i mean i think uh scrolling up a little bit declaring that variable like we that's that same syntax of colon space and then the type and the type it just happens to be this react thing right yeah ooh actually url dot ts here we go we have url we have a file that has all the urls on codecademy so if you ever wonder what all the urls are you could possibly hit in your learning experience url helpers.ts has them and yeah these look a lot more like javascript where some of these parameters we've declared as type colon string yeah oh yeah in fact that's going to be a feature i should scroll past that some previews um cool yeah um so what so i think i i mean my question is like i kind of get it right okay type script or type javascript with types like i guess i'm curious what comes next in the course like there's obviously going to be lots more a lot more subtleties to that but like when you're introducing typescript to someone i imagine you go through these basics of it's like javascript but we can assign types to variables what do you teach next great question i'm going to use this opportunity to shout out the learner experience team at codecademy for building this new course menu which helps me answer that question first we talk about types um which has a lesson some articles about the ts configuration file which is the standard file that folks can write to configure typescript's settings we have them do a couple small projects with it once you understand types we then move you on to functions being able to declare function parameters and optional parameters and types uh once you go through functions we bring you on to my favorite one complex types which actually is a weird name maybe we should rename that to no no that makes sense because we talk about arrays and objects um so being able to type what's in an array or if you have an object literal in javascript what are all of its numbers supposed to be uh and then oh yeah unions and narrowing are one of the coolest things another feature that's not super popular in a lot of mainstream languages but typescript is made popular is union types where you say that something can be one thing or another for example a parameter might be a string or undefined which is where the undefined and null types start being really useful and then lastly there with type narrowing and advanced object types if you do an if statement that checks whether something is say defined type will understand within the if statement that that thing is defined so we can narrow down from a union type which says something is say number or undefined to just number or if it's not defined just and then after that we do fancy advanced object types like i forgot what those are but i would assume nested interfaces and stuff like that yeah i think the the general gist is because typescript just adds to javascript it doesn't make its own opinions and architecture or structure most of the learning for typescript is about how to use the type system to declare your existing javascript stuff a question about union types i guess to me that that again seems like a little bit similar to any where in theory you could union every type together and get any is that kind of the same idea of like oh sometimes in our code we it could be one of two things and so it's like kind of bending the rules of typescript a little bit of like oh we want things to be strongly typed we want this to only be a integer or a string or whatever but in reality sometimes it's gonna have to be one of two things is that a fair way of thinking about that it actually is the correct way of it's not just a uh do i remember right do you have a math background of any sort um slight i mean like you know i took uh calculus 2 in in uh college and stuff but nothing nothing super intense well typescript actually has a lot of type theory and set theory in the roots of its type system and what you just said that the any type is a union of all possible types is actually the correct theoretical way of thinking about the any type so any there was a great talk at the last ts conf from dan vanderkam uh author one of the good typescript books effective typescript about how you can take this one of the analogies was you can take a big piece of marble that's the any type and you can chisel away smaller types from it so maybe one part of it is string and then you can chisel away from string all the possible string literals which actually is the difference between a primitive and a literal the primitive type might be string but the literal type might be empty string or hello or something like that and within the set of all possible types you have these subsets of each other and any yep is the possible union type of anything that could possibly be anything and then like in theory like this string type is the union of all of these smaller string types exactly cool i'm so excited um nice uh well what do you what do you want to do next you want to show any of this stuff off do you want to uh one thing i want to ask you before we leave is about the typescript like community in general i follow you on twitter and see you tweeting about uh conferences and typescript and all that kind of stuff all the time so i kind of wanted to pick your brain about that community and how to get more involved but if you wanted to show something off um or you know show off anything else um i think we we can also do that sure yeah um i'll skip off of codecademy go off platform for the typescript playgrounds and then i'll answer the community question um this i think is the single most useful tool i have found for explaining typescript things to people um it works similarly to the codecademy courses and we're actually going to have a feature soon it's in beta now called workspaces that somewhat work like this we have a playground to work in but uh just showing off the the uh unions thing like if you have a const my i'm gonna get this one right here my name equals math.random josh or alex actually let's make it joshua sorry and then if my name exists we look at my name here um typescript understands that my name is no longer josh or undefined it's specifically josh got it because you wouldn't get into that if statement otherwise exactly so here we have the concept of a type union uh using a type literal not just the primitive string but literally josh or undefined and then we have my name here uh and then in the else statements my name is undefined cool nice yeah this playground is great uh it is it has a whole bunch of plugins uh orto a former member of just the type of community and now also remember the types of teams set it up very nicely so there's like a presentation mode and all sorts of cool stuff um the type of website itself which has a link to the background uh is very good has a lot of really great documentation and resources so if you want like the pure docs and not a guided walk through the way academy is typestripline.org on the community sites um they're super active on twitter and github fun fact if you go together.com microsoft typescript issues there are five last i checked there were 4900 now it's rounding up to 5 000 issues so uh i would recommend if you have a problem with the language figure it out or try to figure it out on stack overflow first and then if you actually think you've found a bug or identified a feature that you want to add to the language if they're totally open to these things provided you do your due diligence and like see if someone's asked for the same thing before uh very fun place to be they also have you have you worked on uh on this repo have you worked on you know any of these issues yeah um i actually have two open pull requests now i've merged a few dozen uh into typescript um one is a really cool feature actually where um you can it like improves how typescript narrows things in the falsie case um let me see so the types of playground can preview different types of versions or even like knives so like in in the original type scripts playground in the current version of typescript if you do if text on stringer undefined and then else here text is inferred to be string or undefined because it could be the empty string or it could be undefined if it doesn't exist and this feature i'm trying to propose we change it so that typescript understands it's only a falsie string so it would be uh has to be empty empty string were undefined cool that makes sense the benefit of being an open source language this is a this is maybe a very random question but when i see these kind of uh i don't even know how to describe it inferences that the language is making based on uh using conditionals and based on the uh type of variable i guess i think of um short circuiting in java where you know if i have um true or whatever that java just like won't even look at the at the or because it knows that true happen uh it knows that the thing is going to be evaluated to true um is this at all related to any of that uh any of this of like kind of shortcuts that the language can take um yeah okay so i can infer yeah yeah like shortcuts short circuiting and inferences in the type system yeah fun fact types it actually i think has a checker for this it'll tell you if there's unreachable code i don't know how often it's oh yeah there we go yeah so that's the control flow analysis checker i think that's called yeah in the type system i think it's equivalent yeah cool oh and for the community um once you're done playing around on the uh the playground a lot of people end up needing to integrate with external packages when they're using typescript like let's say you are writing a react package and react itself is not written in typescript so you would use what's called a definition file or a types package to tell your local typescript how your external packages such as react are meant to look and the typescript playgrounds which is linked sorry not the playground the typescript types search tool which is at aka.ms types my favorite url in the world is a great search engine that'll tell you how to get the types for example for react you install the types react npm package which will then tell your texture project what react looks like nifty um if i am brand new to this uh or maybe i've taken that codecademy course and want to continue learning typescript like what is the thing that i should do from there great question uh the codecademy projects in the course are pretty good um for getting you set up with some types of stuff um being able there's a difference that a lot of our learners have noted between writing stuff in the codecademy ecosystem and then moving off platform so these projects i think do a good job of helping you get there once you've done them uh because javascript's a prerequisite for typescript just conceptually the way we have it set up it's probably reasonable to assume that you might have other javascript projects you've already written so maybe convert those to typescript i think that's a fun thing and any really any project that you've done in javascript i think would be a a theoretical good example of something to do in typescript excuse me um i personally really enjoy writing connect four as a game it was like my first project when i did c plus plus the first language i learned for more than a year um so like writing a typescript thing in c uh for connect four is i think a good idea it's like a good good way of showing basic logic in a more complex project so that's my recommendation um every year there's oh sorry one more thing i wanted to know every year there's a conference ts comp which actually just happened last week uh so recommend checking out ts conf next year csconf2022 josh do you want to plug your book oh yeah matt well now that you mention it yes i am writing a book but it's it's scheduled to be published in either somewhere within july through september of next year um i don't know if i'm allowed to plug it on this stream as it competes with codecademy but it is a typescript type follow josh on twitter yeah yeah i'm on twitter joshua k goldberg you can look me up i have somewhat okay seo so look forward to hearing from all y'all about typescript um yeah and then anything else you wanna you wanna say about typescript or or show no but thank you for having me this was fun i hope i hope our learners got something out of it yeah um thank you everyone for watching so this was um really the first time that we've had um you know a real engineer at codecademy um walking us through stuff i think um i don't have anything scheduled right now but um i'm gonna be reaching out to other engineers to see if they wanna do things like this uh if you have ideas of things that you want to see um feel free to put those in the comments of this of this video on youtube um and then we also have uh fede from our community team um is doing a lot of live streams like this with our recruiting um or uh yeah with our recruiting department and talking about um how to get jobs in tech so um not as handson with code but still super valuable if that's what you're interested in so um i think he has another one of those coming up uh next week so be on the lookout for that um josh thanks so much for for doing this this was great to get an hour of your time thank you see you next time