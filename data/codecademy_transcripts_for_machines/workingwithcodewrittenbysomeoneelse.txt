hey my name is Mike in this video I want to walk you through a very important concepts as you continue on your programming journey which is working with code that other people have written a lot of times when you're first starting out as a developer you're generally working by yourself you're working on programs that only you have written but a big milestone in becoming a developer is working with code that other people have also worked on so whether that's other members of a software development team that you're on other members of the opensource community there's a lot of little roadblocks and potential things to be aware of as you make this next step and so I want to talk you through all of them and I'm gonna help you to have a smooth transition when working with code written by other people so let's get into it and start talking about going from a solo developer to a team player to someone that works with code that other people have written and generally when you're first learning to code you write all of your programs solo and by writing all the code yourself you really get a chance to dial in on the core concepts and to understand each and every part of the program which is really important but as you got into the industry or the open source community one of the biggest transition pain points for newer developers is learning how to work with preexisting code that you didn't write yourself but it was written by other people so a lot of times if you're working with code bases at a company or on an opensource project there will be one developer that contributes some code another developer that contributes other code or in fact there might be 30 or 40 developers that are contributing code and then you want to come in and contribute some code of your own all of a sudden you're looking at foreign code it might be messy and would be complicated and it might use design patterns and data structures that you have little to no experience with because after all you didn't write it and so for many new developers diving into an established code base can be very intimidating so how can we make this transition a little bit easier in order to do that I'm gonna give you ten tips for working with someone else's code so anytime you encounter code that was written by someone else that you didn't write yourself just follow these ten tips and you should be on a nice path to making a difference in the code base step one is that it's only code as intimidating and overwhelming as the code may look understand that it's just code it's not a foreign language or some mysterious hieroglyph it's code and if you're tasked with working on the project then you probably already know the language it's written in and you need to trust in your abilities now with that being said a lot of times especially in big projects or legacy code that hasn't been updated in a while there may be dependencies or external libraries and api's that you're not familiar with so a good place to start when diving in to code is to figure out any libraries api's or frameworks that the project is using step two is to set up your environment and this is in my opinion the most important part and also the most annoying part especially if you're dealing with some complicated code bases and the whole idea here is that most projects in the real world require the environment on your local machine to be configured in a very specific way for them to work as intended so it could be things like modifying your computer's host file which is used for redirecting URLs hosting a local web server setting up and populating a local instance of a database downloading installing and running external programs utilizing special IDs or text editors logging into a VPN changing the version of a program on your computer there's a lot of these different things that you're gonna have to do and all of them are gonna depend on the specific project so there's really no simple guide to setting up an environment for programming the third tip is to run the tests another transition that can be very difficult for new developers is working with tests a lot of programming tutorials and courses neglect to cover writing tests that's because tests can be annoying to write they can also be kind of tedious but any code base or that salt should have some form of testing in place and tests are great because they give you an easy way to make sure the code is doing what it's supposed to do generally if you're going to be fixing bugs or adding features to the code base you'll be responsible for writing or modifying the appropriate tests and so it's important that you get these tests set up correctly and you get them passing step four is to follow the style guide so as you've learned to write code on your own you may have adopted a particular style maybe you indent with two spaces instead of tabs maybe you always leave a space before a curly bracket maybe you pack as much code onto a single line as possible just like you've developed your own personal syntax style most likely so has the code base that you're working on in an effort to keep things clean and consist many large code bases will have specific rules for how code should be written and how things are to be formatted also be aware of any design standards like colors fonts margins etc this is very important if you're doing like frontend web development you want to make sure that you're using the specific colors that are set aside for that project or you're using things like fonts and margins and spaces appropriately keep in mind though that many code bases will have scripts in place to automatically format the code for you and fix any easy formatting mistakes these are often times called linters so if you're on a project and someone's talking about running the linter they're probably talking about running some sort of a script that will format the code consistently with the rest of the code in the codebase alright number 5 is code like everybody's watching any developer who's been around long enough has had the experience of working with code that's difficult to read is poorly written and is almost impossible to extend and add to when you are adding code into the codebase write it with the assumption that other developers will eventually be using it and potentially modifying it and part of that means documenting things correctly a documentation could happen in the form of a comment it can also happen in the form of tests like unit tests that you write and it could just be a formal documentation document that the project has set up it's also important to keep the code consistent so try to model your code after the code that's already been written this ensures that all the code in the codebase stays consistent uses the same types of design patterns and ensures that you don't have to reinvent the wheel number 6 is to make use of good patterns as programming evolves certain best practices and patterns for doing things have emerged a lot of times you'll hear people call these design patterns and these are ways of writing code so that it doesn't repeat itself so that it's extensible and it's structured for maximum security and efficiency these patterns can vary depending on the language of the framework you're using but places like code Academy for example and online forms like Stack Overflow can give good insights into how to write code in this optimal way and utilize these good patterns number seven is to ask questions this is something that I think new developers don't do enough maybe because they're a little shy they're a little timid or maybe they're just intimidated but what in doubt ask someone if it's not your code then it's someone else's so don't be afraid to go out of your way to ask any questions you might have now obviously you want to be respectful when you're asking questions but you also don't want to be too timid if you have a question about something and it's blocking you from doing your work you got to get the answer and so make sure that you're proactive in asking people so for the last three tips these are going to be specific for legacy code bases so all the tips before this could be applied to any code bases whether their legacy whether they're being actively developed whatever it is but these three are specific for legacy code bases so number eight is to stay positive a lot of times if you're working with legacy code bases it's very easy to become bitter and negative towards the developers who wrote it so it's always important to just stay positive understand that it's not the end of the world if the code is poorly written and you can actually make quite a difference in a code base if you take the time to maybe fix some of the mistakes number nine is to know the code this is especially important for legacy code bases before you go chopping things up and changing things around be sure that you have a good idea of how everything is connected and how it works especially if there are no tests written this is super important if there's not tests this is really common when you're dealing with large code bases a lot of times the architecture and the structure of the app can be very sporadic and so one thing might connect to another thing another thing connects to another thing and so if you change one little thing that could set off some sort of a chain reaction that would cause errors in the project so make sure that you know what's going on in the code you don't have to know everything but know at least the repercussions of any changes that you're making and then finally the last tip here is to keep changes small keep in mind that especially legacy code bases are generally established and there's probably a lot going on so resist the temptation to try and refactor or fix every small problem that you see you might be reading through the code and you're thinking oh man I could rewrite that function so much better or these variables have horrible names let me just rename them while I'm in here the truth is though that unless those changes directly relate to the change you're making leave them alone there could be unintended consequences to making changes like this and it can easily snowball out of control but if there are small fixable problems in the code that you have to modify anyway feel free to slowly but surely make the codebase better over time with enough small changes a legacy codebase can have some new life breathed into it so the last section here I want to go over is how to gain experience so we talked about some ways that you can make it easy on yourself when working with a codebase that was written by someone else now we're gonna talk about how you can gain experience doing that so the first and probably the easiest way is just to work on some open source projects there's a lot of open source projects on github that allow anyone to come in and fix up little bugs maybe tweak the documentation the next way would be doing some sort of an internship or maybe even some unpaid work in my personal experience when I was in college I did three different internships and it was a really good way to get experience working with actual you know real live code bases that were being used in companies if you can't get an internship you also might reach out to a company and ask them if you can do some unpaid work maybe they'll send you the code base and you can set it up and do some little tasks for free just to come and get some experience finally you can also just build things with your friends if you have an idea for a project or an app or a website and maybe have some friends who are also developers get together and get a codebase up on github and you guys can start contributing to it it'll give you experience working with the code that they are writing and they can get experience working with the code that you're writing and just be a really beneficial experience for everyone thanks for watching join the conversation by subscribing to this channel or leaving a comment below and if you want to take your skills to the next level start learning at code Academy today