hi everyone Welcome to our third back to school live stream it's been such an awesome week hearing from so many talented and inspiring people in Tech and connecting with all of you who are attending um today we get to talk to Ted Sanders from open AI all about Ted's career in Tech his advice for developers and the age of AI and of course generative Ai and GPT which is open ai's large multimodal model that Ted works on I'm Corey c code Academy's content marketing manager and over in the chat we're joined by FedEx Garcia Lorca our community manager who will be on hand to answer your questions and if we have time at the end of the discussion we may pull a few questions from the chat so keep the conversation going and as always abide by the community standards and be respectful um let me tell you a little bit more about Ted Ted Sanders is a machine learning engineer at open AI where in his words he's a GPT for Whisperer so he researches what gbt is bad at and tries to improve it hi Ted thanks for joining us hi Corey great to be here yeah so you've been at open AI for almost two years yep and before that you had an impressive career at Netflix and you were a physicist at Stanford which is pretty cool take us back though to the very beginning of your coding Journey how did you learn to code I think the first time that I did anything with code might have been on neopets.com where you could go around you could paste HTML or dynamic HTML into your web store I knew nothing about it but bounce of the Snippets and saw on the web that okay if you paste this into your store you could add like trailers behind your cursor cool things like that that might have been my first exposure to programming that makes me so happy to hear because I we know so many people here at code economy and just other people who code who got started with like Neopets Myspace that kind of thing so that makes me very happy to hear yeah it's kind of cool back in the day where users can change their websites more than today where it's like okay you make your Facebook profile and it's it's all made for you back then it was a little bit more Wild West totally totally so were you entirely selftaught when it comes to programming uh I mean I would say that I am still learning a program uh it has been a long journey it's not like I figured it out when I was 16 and I was some whiz and had it solved then I remember I went off to college and didn't really know what I wanted to do uh signed up for electrical engineering because I had heard online that I used physics but knew nothing about it and then my freshman year had to take intro to see programming and I actually felt quite a bit of anxiety back then when I was like oh man I'm already behind there are these other kids who learned a program in high school or went to their parents taught them and I had some assignments where it's like I was so frustrated I was just literally crying because I didn't know how to get the code to do what I wanted it to do and I think yeah for me learning to program has genuinely been been a very gradual process where I learned a little bit in college with c and assembly did a little bit more in grad school with Mathematica one of my grad school roommates helped teach me Python and then I took some CS classes along the way despite never being a computer science major officially and then pivoted into data science worked at Netflix on the recommendation algorithms learned a lot there and now yeah I'm a fullfledged machine learning engineer at open a by coding every day all day and still I'm learning so for me it's it's been a kind of lifelong journey maybe starting with Neopets and now how uh culminating in in AI I love that and at any point did you use codecademy I actually did um I think back in 2012 maybe when code academy was just a year old I knew someone who knew Zack Sims um not sure if they were friends or not uh but heard about codecademy through that I believe uh tried it out I was actually a big fan back then I feel like there's so much opportunity to improve educational materials make things more interactive but I think I really liked what what codecademy was doing there I promise I'm not a shill this is just my genuine opinion um and it's actually one thing that I'm actually very excited about large language models too again not a shill just my genuine opinion uh but like we're really moving I think more and more towards the world where we can get basically cheap interactivity like it used to be in the past if you have students learning a topic no matter the topic whether it was from Papyrus Scrolls whether it was from lecturing whether it was from watching great content on YouTube it's all kind of one way there's no interactivity if you don't understand something you just kind of fall off the wagon you don't understand how it works but the I think the really best way to teach is with interactivity it's very expensive to have a teacher do it but if you can have things like code academy things like chat GPT that can sort of take you along step by step and give you customized feedback I think it's super super useful yeah yeah definitely um so what got you initially interested in AI was it the data science kind of natural progression um and then how did your career take you I guess to open AI yeah my career has bounced around all over the place if you if you would at one point sat me down and said oh what what path would you like your career to take over the next 10 years I would not have predicted the the path that it took I don't think anyone would would give that kind of answer I think the the way that it's bounced around has given me a lot of perspective so how I got interested in AI I mean I think it's honestly just genuine curiosity I expect a lot of you in the audience might feel the same way just sort of really basic philosophical questions about like how do we know what we know I think like the philosophy of epistemology of kind of how do we know what's true has always been interesting to me so I've kind of always been drawn to statistics and probability I like playing games or those Concepts come in pretty frequently and then I think it's also just interesting to think about like what is the trajectory of Technology like the reason that you and me and everyone else like here we probably have access to electricity to indoor plumbing to Refrigeration to all sorts of luxuries that people did not have a thousand years ago 10 000 years ago a hundred thousand years ago most of that is because of new technology much of it came from the Industrial Revolution or postindustrial revolution so it's always just really interesting to think about like what is the next Frontier of Technology what can we do with objects in the world that make our lives easier and today it feels like AI is kind of the most fertile Frontier yeah totally totally and I think that like you were saying a lot of people share that same interest and you know the AI sectors drawing a lot of interest right now and there's a lot of job opportunities a lot of organizations prioritizing AI but I think for a lot of selftaught developers or career switchers or just people who don't have an advanced degree it can feel really daunting or just like totally Out Of Reach um so I was wondering like what do you think the most important skills for developers to have now like what are the most important skills for developers to have now if they aspire to work in AI yeah um I mean I think no one knows exactly how AI is going to change things no one knows exactly what AI is going to be like in a few years um my suspicion is that AI is going to make software development more valuable um I think like if you look at analogs in history when spreadsheets came out in say the 80s did that mean accountants were no longer needed no it actually made accountants more valuable because now they were more effective it was kind of a compliment to their labor I feel like the same is likely with AI uh like using chat GPT honestly I am much more productive than I would be otherwise it helps answer my questions when I don't know how to do something like GitHub copilot can write code for me without me having to go look look up uh yeah the the right functions and methods um so I think AI is going to make software developers uh more productive I think that impact is likely to be heterogeneous I think there are two ways that it could go I think you could tell one story of like okay maybe you have really experienced really talented developers maybe you have developers who are more Junior is it going to help them equally is it going to help one more than the other I think one story you can tell is that oh maybe this is actually a good thing for the experienced developers but actually bad for juniors because it's like Junior developers are now kind of getting replaced with AI and now the senior developers can now just have AIS kind of be their minions do the grunt work and continue adding the value from kind of their insight and their human creativity I actually don't think that's going to be the way that it plays out I think it's actually going to help out Junior developers more because I think a lot of the value from senior developers comes from having a vast kind of repository of knowledge of like oh I know how to do this I've seen this before AI Mountain kind of Outsource some of that knowledge where it's like oh I don't know how to do something but I can still do it quickly because I just asked chat CPT to write the code obviously chat GPT can't do complex things but for quick and dirty things it's actually a fantastic tool so I expect that number one AI will make software developers more productive and number two I think it actually is going to probably help kind of Junior developers more than senior developers but this is just my opinion we'll see how it goes and there's a lot of uncertainty yeah totally um you kind of have answered the next thing I was going to ask you but something that's top of mind for us at code academy is like how tools like chat GPT are going to change the way that people learn how to code so somebody who's starting from absolute beginner and and you know this is their first introduction to coding and there's been you know a lot of discourse about whether this is the demise of coding and I just wanted to know like what's your take is coding dead oh I think coding is absolutely not dead I think coding is only going to become more valuable um it could be maybe in the long run you could make the argument that coding is dead again relying on historical analogy like you could you could look back at the old days of computing people were using Punch Cards people were programming an assembly you could say today oh yeah who's who's programming and Punch Cards who's programming and assembly today uh almost no one uh but programming is still uh super useful and a much much larger industry now than it was back then so I'd say the the consistent trend has been that humans are kind of giving instructions to computers at higher and higher levels of abstraction so it could be that yeah maybe if these language models get good enough they're definitely not good enough today that we'll have more and more people developing software without having to write as many lines of code without having to write as much boilerplate just like today you can now program a computer without punching as many any whole uh punching as many Punch Cards as you needed to uh back in the day but I I really expect that yeah uh in in the short to medium maybe even long term software development will just uh become more important more powerful and I think at least for me I'm envious I wish I had chat CPT back when I was learning how to program because it's like yeah I remember yeah in college like trying to learn how to program and see it and like my program wouldn't compile I wouldn't run and like I didn't know why it was just so frustrating and it's like well I can't learn when I'm stuck but now with Chachi BT it's like oh I can ask why is this the way oh is there some function I don't know about is there a cleaner way to do it and like you got to be careful sometimes it lies to you sometimes it makes things up uh but it's super helpful for just kind of learning the basics getting up to speed asking questions that you might feel embarrassed asking in public or more experienced coworkers so for me it's been great yeah I I completely share that sentiment and like we just put out a bunch of new courses and case studies so that people can learn like how to use chat gbt in their workflow as a developer or just even like get better at writing prompts and stuff like that um I wanted to zoom out a little bit and ask you well so chat uh codecademy just launched a chat GPT plugin which was really cool for engineers to get to work on and hopefully useful for Learners to to use and I was wondering like what are some other ways that individuals can get started with openai's apis and its developer platform like what resources are out there yeah great question so open AI we make the product chat gbt we also have this API that's part of our mission uh even though we're open AI yeah we're not all about open source we definitely think this technology has consequences but we are about Open Access so we have this API we want people to build with our technology we don't want to keep it to ourselves uh really easy to go to openai.com make an account get a developer key get some free credits and you can actually build your own applications using chat gpt's intelligence to do all sorts of different things uh a few I'd say good resources to get started there one just read the documentation on our website that can help you get started number two I used to run uh The openai cookbook which is a repository on GitHub which has a whole bunch of code examples and Snippets that show how to get started with the openai API how to deal with common pain points like counting tokens handling rate limits that sort of thing and has some cool examples too of how you can use the API with things like vector databases for uh information lookup that sort of thing oh is there anything that you're working on right now that you're really excited about and that you can talk about yeah I right now I'm working on better ways of measuring what GPT is good at and what it's bad at um it's kind of funny I think a lot of products that are designed like you go to a car company like Toyota it's like okay they designed the car they know what it's going to look like they build the car it does what they expect it's really like they're inventing things um for us making language models it's actually a little bit different I think it's more of a process of discovery than invention where we can come up with a recipe we can build these cool language models but even though we built it that doesn't mean we know what they're good at what they're bad at it doesn't mean we know the best way to use them the best way to prompt them um we're kind of like the paintbrush Factory uh and it's like yeah maybe we have a little bit more experience than everyone else dealing with paint brushes we can tell you which end to hold but at the end of the day probably gonna be people outside of our company who figure out the cool things that you can do with GPT who figure out good ways of prompting it uh so for me I'm just trying to help all of us at open AI get smarter by measuring what is the model doing well what is it doing poorly when we hear from you guys using the API uh on Twitter via our feedback forms via forums just anywhere uh that like oh the model's doing this poorly the model is doing this poorly um for me my job is to try and look into that to try and quantify that so that then we can Target it and and make the model better cool and then like can you demystify what is like a day in the life of Ted at open AI are you like in meetings all day or is it heads down coding coding like what what's it like a mix of both um there's a lot of teamwork a lot of meetings uh but then there's also a lot of coding so I'd say probably every single day I'm meeting with other people every single day I am writing code every single day I'm trying to get us to a place where we're more productive and more knowledgeable than the day before um yeah a little bit of everything cool cool um I also Switching gears I wanted to ask you about artificial general intelligence or AGI which I understand is a big part of open ai's Mission um first of all how do you explain AGI yeah AGI artificial general intelligence there's no consensus definition but really I think people just mean a computer that is as smart as a person and can think in some way similar to to the way that people think I imagine the closer we get to AGI the more blurry that definition and that line will become like in some ways GPT is already smarter than me it's probably knows more facts than I do but in many ways it's still far far inferior to how you or I think where we can kind of reflect we can reason uh we're not going to confidently lie through our teeth and we're not sure what the answer is to something um so I think artificial general intelligence yeah the dream is that we can make computers that can think like people no one knows exactly how to get there open ai's mission is to try and build that or at least try and help the world build that um and to make the benefits of AGI broadly accessible to everyone um I'm not an AGI KoolAid Drinker I don't think it's a year away I don't think it's two years away I think it's going to take a lot of hard work to get there and I think the closer we get the the further it's going to look but yeah looking at the rate of progress in AI over the past few years it's just been stunning so I am super excited to see what gets built over the next five years yeah sorry I put you on the spot and asked you to pull out your crystal ball there for a second um let's see I think the last overarching question I wanted to ask you is sort of like what steps developers can take now to make themselves stand out and distinguish themselves in the age of AI we talked about a couple of things but just yeah yeah it's a great question um yeah like suppose you're a developer you see AI coming you have this insight you're like what should I do differently what should I learn uh how can how can I be more valuable um I genuinely don't know the answer something we'll have to see uh I think one mistake to watch out for is I think it can be a mistake to think oh AI is the big thing that's coming therefore the only thing that I'm going to learn is uh say how to prompt engineer large language models and call them via apis because I think in many cases what matters is actually skills complementary to AI in addition to the skill of using the AI so for example like if you want to make an app that uses AI in some cool new way you don't just have to figure out how to make the AI do something cool and new you also have to make the app so I think in many cases there are going to be complementary skill sets where if you want to do something with AI you also have to develop some developer skills to do the the thing that you want to do again going to historical analogies it's like okay when electricity came to the scene and now you have these steampowered factories moving over from Big steam generators to now electrical motors uh like if you're if you're a factory making shoes and you're like okay electricity is coming this is going to change shoe making I'm going to become an expert in electricity like you weren't wrong all all shoe factory today use electricity but the thing that makes like a great shoe is not that like the shoe designers that Nike were like okay electricity is the key we're going to become experts in electricity but they're like okay electricity might allow us to set up our Factory differently it might allow us to change the processes by which we develop Shoes by which we manufacture them it might change the way that we can figure or configure our whole supply chain but at the end of the day the goal is not to use electricity the goal is to deliver user value by making cool shoes so I think similarly with AI it's important to learn AI uh figure out what can it do well what can't it do well how do you steer it how do you control it but don't neglect I think the complementary skills around it because at the end of the day you're building something you should be building something cool and useful and you need all the other pieces in addition to AI yeah well I can't wait to see what electric shoes um before I bring it over to Fede was there anything we didn't talk about that you think is important to your story or that you would want people to know uh uh no I would love to get questions from the audience hear what all of you are curious about awesome all right Fede what are people saying in the chat I'm back uh people are saying all kinds of things so that's pretty exciting I'm gonna go over to the chat I already prompt everybody to drop their questions uh we can start with an easy one Ted super happy easy questions is what do you think is what's your opinion on society's growing dependence on AI yeah Society is growing dependence on AI uh I don't think the dependence is very strong right now I think if we woke up tomorrow and there was no AI society would continue um might depend a little bit on how you define AI like the Google ad targeting AI because maybe that would destroy a trillion dollars in value if that disappeared tomorrow um I think it is is a concern yeah as we become more dependent on more and more Technologies including AI yeah there is a worry that that does make Society more brittle uh if say like a geomagnetic storm hits we we lose electrical grids we lose computers we may be worse off than say uh folks were 50 100 years ago because of our increasing dependence on computers but for now I don't think that dependence is is too dangerous for now it feels like it's it's adding more value then it's kind of taking away and and brittleness and lack of resilience yeah it sounds like you have a very sort of this is one more tool and the tool said um you know it's not so much dependent there's just dependent in general I guess uh just technology in general that we keep leaning on more and more like a micro level yeah on a micro level it's like I definitely have to calibrate how much do I rely on AI uh because I will say that yeah GitHub copilot chat gbt has made me a more effective programmer but in some ways it's also made me a lazier programmer where it's like yeah I'm not going to look things up I'm not going to need to learn them I'm just going to type in like a comment describing the function that I want and then just kind of sit back waiting expectantly for GitHub copilot to auto complete it and in some ways that's good it makes me more productive but in some ways it's also bad like a while ago I I had a GPT write a recursive function for me because I didn't want to think through it and do it myself and I was like yeah this looks right let me test it oh it didn't work oh wait that part was wrong I had to fix it try it again no it still doesn't work wait there's another part that's wrong let me test it again oh that didn't work you know actually this functions garbage I needed to do it from scratch so there's still some calibration kind of figuring out where does it help where does it hurt definitely I think like today with Google Maps I Rely less I'm kind of memorizing the layout of the city and in a way yeah I drive better but if Google Maps were to disappear I would be a worse Navigator it's almost like another Wikipedia moment of how much can we rely on this and oh you're too lazy to look for your own resources I guess on sources um there is another question here in the chat what advice would you have for someone starting out as a developer I guess in the context of AI yeah I think the advice totally depends on on what you want to do um for me I think my journey I was curious and I I followed my curiosity but I think yeah if you want to build websites then learn the skills that you'll need to build websites if you want to uh yeah build software that computes things learn how to do that so I think it all depends on what you want to do but I would just say do things that that seem interesting and useful nice yeah there's a really good question here about which things you should learn if you're going into AI so things like machine learning algebra math statistics what are some of the fields for maybe aspiring data researchers or they're scientists that they should be focusing on yeah even in AI there's a wide spectrum of things that you can be doing because it's like in AI yeah you could be training the models that's going to require a very different skill set than if you're uh trying to optimize the models if you're trying to use the models um if you're trying to build products that use the models all of those things are different I would say if you are trying to do things at a low level close to the hardware you really care about performance and efficiency that's where it's going to be useful to potentially learn Cuda learn GPU programming uh things like C or rust but for most of us we don't need to do that I think there's going to be many more people kind of working on applications than there are who are going to be kind of optimizing these AI models like at the hardware level and if you're worried more about applications then yeah if you want to make apps uh learn the languages and skills needed to make apps you want to make websites yeah learn HTML CSS JavaScript in the machine learning World I'd say python is very popular python is my kind of favorite goto language so if you're interested in doing things in machine learning and training models python is a great place to start if you're looking to do kind of more statisticsy things you can do R and in general I think if you're trying to become a wellrounded programmer it's good to learn a few different languages you don't want to be monolingual because there are a lot of Concepts repeated from from one to the next nice yeah python is always a great advice I think a 100 bithon all day um a question that is a little different here if you want to get into the field of AI but not as a researcher what are some of the other things that you can learn what you're still involved in AI but maybe not in the traditional sense that people think about it like training the models or actually doing you know the uh the model itself yeah again kind of a broad question If you're trying to get into AI but not as a researcher uh many different paths so you can also just work as kind of a regular software developer not researching anything um and there yeah you can have backend software developers who are maybe helping to and say the case of openai build our API the infrastructure that's built on you're not researching anything but you're building lots of cool products there's also frontend developers who are say building the openai website we have sales people uh so there are definitely kind of sales roles marketing roles go to market roles for selling these kinds of products where you still need a good degree of fluency you have to understand what the AI is good at what it's bad at requires a very different skill set than say a machine learning researcher but still is very well within the realm of of AI are jobs and roles and kind of helping companies Implement things and answering questions about AI there are policy roles so there are people who work in Washington DC thinking about what is the right legislation for AI there are lawyers who are involved in potentially uh coming up with yeah legal strategies potentially coming up with litigation in the AI space there are Judges who are ruling on cases in the AI space so there's a big intersection between legal and AI uh I think in many cases one way to make yourself valuable in a career is actually instead of finding like one thing and becoming the best person at one thing which can often be a crowded path like there are many people who want to be the best tennis player in the world there are many people who maybe want to be the best python developer in the world but you find like two or three skills and you become really good at those and there's actually a lot less competition in the intersection so if you're good at like sales and AI now you might be the best AI sales person in the world and you're not really having to compete with the best AI people or the best sales people you're only competing with with people at that intersection Ah that's a great take being a bit more of a Renaissance person I guess yeah when it comes to Ai and other tools we have time for a couple extra questions here uh one of them is what's the most unique or creative use of AI that you've come across oh most unique or creative uh uh there have been a bunch of creative things I mean I think the the most visually stunning I think the most stunning ones are the visual ones um so I think image Generation video generation has been super cool um I think I'm personally excited by natural language interfaces the software where you just say what you want and not all the time but most of the time the the program knows what you want to do um and I think the the the least interesting applications are probably just like kind of chat gbt or chat GPT skins where you have this GPT conversation back and forth and the really cool ones uh are the ones that do a lot of work behind the scenes to kind of stitch uh a whole bunch of model calls together to do something complex and and useful and I think the ones that end up with a visual product like end up building a website end up building an animation those those are always uh pretty fun nice and to close it off uh going back to python this uh maybe a bit more technical but uh in your experience for what you've seen working with these tools day day in and day out do you feel like python is still remaining kind of like the goto language when it comes to when it comes to machine learning or are you seeing all the technology so maybe AI first languages rise that could you know threaten their dominant play so python in the future when it comes to learning to code and getting into these kind of tools the end say python is number one um so if you want to do stuff with AI I would say easy just do python um not really familiar with with any big kind of AI programming languages that are coming um I think sometimes it can be a mistake to focus too much on on languages anyway because again it's like under the hood they're all doing the same thing they're moving electrons and transistors um just with yeah different words in in your code editor but simple answer do python uh and we'll see in five to ten years what the what the landscape looks like then okay fair enough back to python like we said before well thank you so much Ted for your time today thank you Corey for hosting and asking all these awesome questions and thank you to the chat for being here with us today we hope that you enjoy your time with us we have more events happening this week please stay tuned don't forget to subscribe to our social media YouTube Instagram LinkedIn and all those good stuff do you want to keep up with what code is up to and we will see you on the next event thank you everybody for stopping by and have a great day thank you thanks everyone good luck