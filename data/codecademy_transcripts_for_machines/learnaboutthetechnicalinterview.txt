what to do um all right let's go live three two one all right and we are live thank you everybody for joining us today on another community live event today we have three guests with us and we're going to be talking about technical interviews so do you mind going around the room introducing yourselves sure i guess i'm alphabetically first everyone i'm josh goldberg i work as a frontend developer at codecademy i've also helped forum and take part in a lot of our hiring practices particularly around apprentices so i'm excited to hang out and chat today can go next i am rebecca uh i'm an engineering manager at code county and used to be an ic so i can kind of speak to both sides of the hiring process there and uh my name is will rudy i'm a senior technical recruiter here at codecademy um so looking forward to some fruitful discussion about the interview process from all sides so looking forward to it awesome so i think the very best the very first question that we should cover is what is a technical interview because even though it seems selfexplanatory to us that doesn't mean that everybody actually understands what it means so could would you mind going around the room again just answering maybe in a few sentences what you think a technical interview is and see if everybody's version of technical interview matches i'm curious sure uh for me there are uh generally two areas of technical interviews there's the type where we talk through a problem and at the high level architect how we might come to a solution like if you're trying to build a page where does the data come from how does it get arranged and then there's the live coding or whiteboard kind where you have a whiteboard or a laptop computer or something some sandbox in front of you and in real time you're creating something either in actual code or on the written form uh yeah i think technical interviews can take a lot of different forms so it kind of depends on the company um but anything to gauge the candidate's level of technical expertise um so nonbehavioral questions it could be whiteboarding pairing throwing random trivia questions at the candidate if that's what you enjoy doing or talking through highlevel architecture yeah yeah i don't have a lot to add there i think josh and rebecca both kind of covered it from both sides you know sometimes it's going to be more of a you know practical you know hands on the keyboard type of uh um you know problem or sometimes it might be a little more algorithmic um trying to figure out decisionmaking um sort of thought processes so um from my side it's you know always been a little bit of a combination between not only you know what you can actually produce you know when it comes to you know the technical interview or the actual coding but also how you got there and kind of being able to talk about um just the why not only just kind of the what so that's what i would say okay so it's it's more like so we're trying to assess obviously but there's different ways to assess right and different ways to measure performance or like the you know how well somebody is personal different topics so i guess there's different approaches you can take i hear that depending on the company they might use a different technique than other companies it's not very standardized it sounds like so um how does people prepare for this kind of technical interviews like if you would you say it's a fair game to reach out to a company and like maybe their linkedin or their twitter find out who works there and start peppering them with questions like have you ever been approached by anybody that might be applying for a company you work at and asking you hey what's the typical interview what's what's the etiquette so to speak because how people feel like it's not adequate to ask these questions about people feel like it's fair game because they're trying to you know just uh be the one candidate that gets through so what do you think do you think that people can ask these questions and how far can you push it when it comes to preparing for this uh i mean i guess the surest thing to do is if you have a recruiter screen to ask them they should hopefully have more information and that's their job to you know guide you through the process and let you know what to expect and ideally the company is giving you like some larger companies like google will give you like fullblown pdfs on like what to expect and how to prepare some of the smaller companies obviously don't have that available but the recruiter should always be able to explain what to expect um in terms of reaching out colds messaging people i get those a bunch uh it's kind of hit or miss if the person's gonna respond or not depending on like how nice you are and how much time you have uh i don't think it can hurt to reach out to someone who works at the company um but i would phrase it more as like hey like i'm super interested in your the company you're at do you mind like answering a few questions i have do you mind uh going out to coffee if you're in the same area as um um and making it a more like i would love to learn about this company and through that you can ask more about the process itself yeah for sure i would just add you know from the recruiting perspective like rebecca mentioned yo it's definitely you know best case you know to go through the recruiting department um you know applying through a careers page or if you find a job posting that you like on linkedin indeed one of those kind of um job board type websites um because yeah it's you know my job as a recruiter to explain kind of hey this is what we're looking for get to know you a little bit and sort of see if there could be some good overlap there um and yeah it definitely doesn't hurt to send messages um cold i think what i would definitely recommend is try to find people that have something in common either you know maybe you went to the same boot camp or the same school or you're in the same city or if you can find something in common with the person you're reaching out too cold um as well as being humble and appreciative like rebecca mentioned um that's where i found you could probably have the most success um so always good to build that network and you always start somewhere so that's uh yeah okay um so the reason i'm asking this question is i'm trying to think uh like somebody that might be applying for their first job we have a lot of users at code academy that are trying to land their first job in tech and a lot of times you it feels like you know you're just trying to get a job and there's not a lot of leverage that you have and you feel like one misstep and everything is over right uh there's this conception of i can't ask two hard questions you know like i can't ask really the questions i mean to in my interview or i shouldn't really talk to anyone or bother anyone so it's kind of interesting to to hear you talk about no yeah it's totally fine to reach out you know just be uh mindful of their time be mindful of like you know then they you know their time constraints and just try to say uh you need help or you're very interested in the position and see how they react to that i guess you also might not get a response but if the company uses that against you i would say that's probably a red flag and maybe best like you're better off better off not working there if you're going to hold you asking questions against you that that doesn't seem great oh yeah i like it when candidates ask the harder the question the better like it shows that they're thinking critically and they're not just applying for the sake of i want to work anywhere and this seems like a good match which for the record you totally should uh definitely apply to as many places as do seem vaguely potentially relevant but i really like it when candidates ask like not just the good questions like what is your day or what do you do here but why is this that way or can you tell me about how this came to be like things it was uh every every candidate who applies and can pass the early screens of can you code can generally code but people who can think critically and work well with others and communicate well that's that's beautiful all right that's the winning sauce all right yeah got it so uh you heard it here first i mean obviously again the caveat that it changes from company to company but for we i'm hearing today you know asking questions is always good and as long as they're respectful and they're within you know reason it seems like it's gonna be more good than bad so you shouldn't really be scared of asking these questions um it just comes down to that sense of you don't want to screw up but at the same time you know you are trying to stand out and if most people are not asking questions and you are then you are standing up so that's a positive uh let's move on to technical interviews themselves and what they mean of what they represent what i think there's a few types of technical interviews you've talked about them earlier there is take home interviews there is white boarding interviews and there is like a mix match of both between trivia and like pair programming like walking through problems that you might have worked on before and you can like bring with you to the interview so can you speak a little bit about the kinds of technical interviews that a candidate will find in the while um yeah i could hop in real quick talk some high level stuff and i'm sure that um josh rebecca could add some examples but but yeah in my experience usually companies are are going to employ a few different types of exercises to get a more wellrounded perspective on a candidate's strengths and weaknesses and whether they would be a good fit for that organization and so usually that will entail you know when it comes to it you know usually some sort of either takehome exercise or i've seen some timed quizzes um that companies will take in terms of here's a specific language we have literally 12 multiple choice questions here's 10 minutes and you know they're looking for a certain score and it could be as um you know automatic and rudimentary something like that um two being able to you know complete a brand new github assignment that would be able to showcase kind of the full coding potential um but usually they're trying to assess a few different types of skill sets and so you'll usually see a combination of both the whiteboarding as well as some more programming type stuff um so it's it i would be definitely prepared for a little bit of everything because it's rare that you'll only find um one type of interview it's usually they have a couple different rounds to assess those different types of skills more thoughts on uh the types of technical interviews so what's your favorite i want to hear josh andrew what's what's your favorite i really like the technical takehomes um i personally don't mind coding in front of other people uh but i used to and i think many people do so i enjoy being able to to do something on my own and like really process it without the pressure of someone staring at me and offering helpfulish suggestions every two minutes um and those for those who haven't taken on a technical tape home is often times at least the way we tend to do it like we give you a problem and maybe a bit of starting code and ask you to go through a set of features maybe give you some screenshots of how it should generally look if it's a visual thing um so like oftentimes it'll it'll be some basic assignment like build this type of page that gives these types of buttons and actions and it should take you generally around four to six hours maybe more so that that for me is more fun than like live pressured coding okay what about you rebecca what's your favorite kind of uh technical interview uh so i actually really enjoy the pair programming kind of technical interviews um and in the true sense of pair programming not where like people are staring at you silently and you're expected to code while they watch you um but in the sense where you're literally working together with people to see because it a gives the company a better idea of how you would work in a real life scenario and b gives the candidate a better experience of what it would be like to work at this company um and i think it's more close to uh the daytoday life of an actual engineer who's on a team of engineers uh not working necessarily in silo on some small project but um getting in there and and really working on a specific pr that that person is putting together a specific ticket yeah i guess um being on your own like josh said it kind of removes the pressure of somebody staring at you but at the same time you do have to have the ability to work with other people sooner or later right so i guess they serve like a happy medium like and that probably comes down to the person interviewing the candidate right and how comfortable they are like how experienced they are now in conducting interviews right uh i'm sure that there's different styles more aggressive or they're like asking questions all the time and other people that kind of like lay back and let you let the candy take the lead a little bit more i would imagine that there's kind of like a spectrum of what you expect when you're doing this kind of collaboration interviews uh will do you know um do you know if if you've ever come across you come across a lot of candidates do they have expressed in the past like hey i'm not comfortable with this kind of interview or like is it possible to modify the process for me because i prefer this kind yeah so it's definitely something that i'm noticing more and more um the candidates do tend to have a preference but usually the company is going to be pretty rigid in terms of this is our process we're sticking to you know these steps in this order um and so usually you kind of have to you know dance with the music they're playing yet a little bit in that regard um obviously if there's special circumstances if someone has a disability and would need some kind of you know um situation where um they needed more time or some type of um you know automated uh you know one thing i've had in the past as a candidate who was hard of eyesight and so they had a program that they would use to help kind of like um like hear different commands and help them you know work through the exercise like that and so companies will always try to be as accommodating as possible um in that regard but usually um the recruiter should do a good job about laying it out you know in that first intro call about what to expect um and so you could always have a preference but um and you can always kind of you know as rebecca mentioned you don't have to you know work at every company you apply to if you realize that you know if the interview process isn't a great fit the uh working environment might not also be a good fit because there's usually at least a little correlation there so uh so yeah it's definitely you know fair to have that um opinion and you know preference but uh you're gonna have to you know work with what is sort of in place at those companies you're chatting with i feel like it's one of those tough situations where has the junior developer uh yes you want to have a voice and who is hiring you but at the same time you're thinking i just need experience wherever i can get it and you might be willing to put up with some reflexes because you think it can't be that bad or maybe it's it will get better right with time i don't know but um but it's a fair point that sometimes you just have to walk away if it's not the right fit for you um do you let's go over uh the different types of technical interviews one by one and kind of like take a little bit more of a deep approach to learning what they are and what they mean or like how to prepare for them so the first one is to take home let's think about i want to hear about how takehomes are usually formed and i want to know usually how do they gauge at the company level what a take home is fair or is not unfair has a burden to the candidates because i'm sure that sometimes you will apply for companies where the take home takes you a weekend and other companies give you a take home that takes four hours and you might be thinking as a candidate this was too fast did i made a mistake am i missing something right because you're just getting all these levels of difficulty across companies so what are takehomes and how do companies generally or at least here at kodakami do we go about forming them in a way that makes sense i guess i'll go um yeah a takehome is is kind of hard on our end the company to get uh you want to balance that it should be complex enough of a challenge that not every candidate's submission looks the exact same but if it takes a full weekend two days 48 hours for a candidate to do then you're you're not being respectful to the candidates time who who has the time to do a takehome that takes a whole weekend for every company that they'd apply to um so typically what we try to do is figure out the list of things we want to assess on the candidate which is normally can they write clean code does it is it something that we as a reviewer can read through and understand does their stuff actually work and work well without bugs and can they display somewhat intermediateish comprehension of whatever languages or frameworks they're working in for example our frontend takehome would be in react and you'd write a page and react and we test that you're able to make react components and manage page state which is like the core fundamentals of react um i think ours typically what does it take like four to six hours recommended but it's totally fine to take yay it's totally fine to take more uh we we we want to give candidates a time recommendation so they don't feel like it's going to take them 20 hours but if it takes you longer that's fine too we don't want to rush you um and then lastly i'd say we we codecademy actually publish what we grade on online it's open source like you can read it but in general it's what i mentioned before of like code clarity does it work well um and what was the last one uh does it demonstrate good usage of the the foundation framework and language did i cover everything you were looking for there yeah i think so i mean if i were a candidate applying for a code academy i think uh i might kind of understand that you know my code has to be readable usable and it has to show that i know what i'm writing the id and copy and paste it from somewhere else right so that seems to be pretty straightforward when it comes to state homes um i always wonder if take homes you know i talked to professors in university where they would say i write an exam that takes me 10 minutes and that's an hour exam for you guys so there's like a like that's one to six ratio or something in minutes uh of what me knowing the material takes to solve versus you is that is that something that happens i gotta get like when you put it together do you think well this would have probably taken me like an hour solid work so that's like a fair assessment for somebody that is applying for this role um we do take the take home like it's not like we just write something we think is fun and then throw it out so that unsuspecting candidates have to suffer like we have an actual process internally of we figure out what we want we make some hypotheses of like we think these would be good sample challenges uh and then like we have especially a range not just the senior or just the junior engineers take the take home to make sure it's like a reasonable problem um but yeah i do want to defer now to rebecca as the author of how to ace our apprenticeship take home most uh yeah i don't know how to get something to the actual viewers i don't know if they'll share it yeah uh i put together a post um that compiles a lot of advice from our former apprentices um tips for using our apprenticeship take them so not necessarily like fully applicable to all of our take homes at different levels but um for your first job i would say there's some pretty good tips and advice there on how to how to make sure that you're submitting a quality takehome assignment um and yeah ideally the company shares what they're looking for uh but i would say like for most companies you'll want to make sure that you're submitting clean code taking a look at what you're submitting beforehand to make sure you don't leave in any like console logs or um you know make sure you're running it one last time before you submit it to make sure you didn't like introduce a bug right before you submitted it and there's there's some some more advice in that in that post i love console logs what's wrong with console logs oh no okay everybody uh watching the stream now or in the future console logs apparently are not pretty in your code if you're submitted for an application um so i think one question that a lot of people might be having right now when they hear about take homes is well but is that sufficient like are people cheating how does the company know that take home is good um and i think it's important to clarify that take homes usually are not the only way that a company is assessing you through the interview process correct there's several steps and take home might be one of them but it's not usually the only step right no you're very you're you're correct there fede but it is a little correlated in the sense that you must you usually have to get through that takehome exercise to get to the final rounds um where you'll kind of do the other types of technical exercises um and so yeah it's it's not the be all endall but um it usually is quite an important um just component of the process um that you need to ace or you need to you know get to an adequate position based on the level and the expectation um to make it to those next levels um and so one other thing is you know take homes are always evolving too like we usually are uh you know they exist for a while but then um you know it's something that's constantly being um updated um or at least looked at um you know from a company's perspective and so um trying to maintain and make sure it's as accurate to reflect the types of you know daytoday challenges so just one other little tidbit to add there okay and okay last question about take homes uh rebecca how far can a candida do with a takehome before you say this is way overengineered we asked two questions and they answered ten is that is there a point where it becomes a flag of red flag for the reviewers of like too much submission like you went too far i don't think that would be a flag like i don't think we would say you cannot move on to the next stage but i do think uh it's up to us to be clear in our like our grading rubrics to make sure we don't judge them more favorably because we're giving you an assignment for a reason we think it's you know a good amount of time um fair for you and for us to be able to grade so i would uh suggest not going above and beyond to you know it'll be annoying for the greater honestly it'll take them more time to look through what you did um so i would try to make sure you're like taking the boxes of what's required there may be some delighters or bonuses that you could add on as well but yeah i i don't think it would be a red flag i just would suggest you don't do it do you know if that's a common practice maybe during the prompt like the takehome prompt there might be like a line at the bottom but that says bonus like this or whatever like okay we have that in ours um i think most companies have something like that where it's like if you have time you can do this delighter or whatever um also some people will want to make it look nice but like some people will focus less on the css styles um those kinds of things i think are nice but again i wouldn't go like you don't need like a whole design system that we're not asking for like a production ready app okay yeah no that makes sense i was just wondering uh you know like uh when you're doing running for example if you're doing a race that will always tell you run a little bit more than the tracker says just to make sure right that you cross the finish line if you're doing a virtual race so uh it's sort of the idea of like i checked the boxes but did i really so maybe you want to like do a bit more just for flair i guess okay so you finish you take home let's say that you're okay we are candid go and then we hear back from code academy says you know what you're thinking what's great we would love to talk to you a bit more what's usually the next step that i can get encounters after i take phone yeah so just in terms of process after a successful take home the recruiter will send that over to one of our engineering um members uh we usually have a couple folks take a look at it um and then they evaluate it based on a rubric um and if we get thumbs up we would then sort of move forward to schedule you for that final round of interviews which uh usually takes about half a day for us and every company is a little bit different um you know these days from what i hear you know i think very you know remote interview practices are very common still and seem to be um quite heavily utilized across the board so um but usually in that final round is when you'd be um you know meeting with more members of the team potentially some folks outside the direct team and uh you know running through some more of those exercises like the whiteboard or some of the pair programming that we discussed earlier and stuff like that okay so because rebecca said that she likes pair programming and just as he likes to take home i'm going to start with rebecca this time around let's say that the next step in the process of the company imaginary company applying for is a pair programming challenge they say you're going to be paired with an engineer you're going to work through something what is the typical programming experience for a candidate like what do you usually expect every company more or less will throw your way and how do you prepare for that yeah so i would say there's probably three different options you could have for that and we use two out of those three so the first one we do for apprentices is we extend the take home together um so in that case you'll want to review your take home and again hopefully you'll be have like been given this information from the recruiter ahead of time or you can ask um but in that case you'll want to review your code to make sure you know what's going on yourself so that it's easier to extend it with whatever features we throw at you um so that's one type the second type would be uh here is a new small app we want to build together um and that we do for like nonapprentices we'll say uh build this view and we give you like a design to mock it off of um and work on like kind of related but arbitrary and not not really guitar uh not like from our code base but um like related to something we would do on a daytoday job the third one which i don't think we've we've done but i know other companies do uh is they'll say like uh i'm working on this task that my product manager assigned our team um and this candidate will work with me as i move through that that ticket um and so it'll be actually like working on code that might end up in production um but it'll be more uh more true to like what a pair programming experience would be like if you did get a job so one thing that i hear a lot from from candidates that are going or preparing for these kind of interviews is that you need to be able to really talk through your code a lot like because usually if you're on your own and your computer just you know listen to music or something just working on your code and it doesn't come naturally that every time you write three lines of code or every time you're gonna define something new that you have to out loud say why you're doing what you're doing uh josh do you come across anyone that that is kind of like super quiet or super verbose or like something how how do you what is your experience with these kind of interviews yeah most candidates um don't have problems discussing their code but very few of them are extremely quiet or extremely verbose the reason why people often say you should talk to your code a lot or it'll be asked to is because as the reviewer or the interviewer we're trying to figure out what's going through your mind what do you think and how well do you understand the code so um candidates who can explain that are great if they don't explain it we'll ask if if we ask someone repeatedly to explain them themselves or their code and they can't give us information that's kind of a like a little bit of a red flag like i'm trying to understand your thing and you're not giving me the information i need uh similarly if a candidate won't stop talking which does happen uh that's also a red flag because i'm trying to communicate effectively and i can't if you won't stop talking uh but again most people aren't in those extremes most people it's it's fine okay and i mean i would imagine that you know we're all human beings so um a fear that candidates have is that this is gonna be this antagonistic figure interviewer that is like coming to get you or like they want you to fail right um do you do you think that i mean i'm assuming that that's not true and that in most cases if you're being too verbose or if you are being too quiet the interviewer will just like try to you know engage with you tries to get you in the right direction right like if you are at that point where you already went through the screening through the take home you're in the in this round of interviewing they've obviously seen something interesting you has a candidate and i'm assuming that the person interviewing you wants you to succeed in general right so so you also can take these cues and not immediately think oh my gosh they said this thing that this is done like you finish the interview you go home you know you turn off your cameras like oh that i blew it i'm assuming that there's there's a bit of give and a bit of back and forth this goes back to the conversation of if there isn't that's a red flag again not everyone has the the you know privilege to be able to be as choosy with their interviews but if you show up in an interview and you're not given any information from the interviewer as to like what you should be doing and they're not helping you at all i prop probably would not want to work with them i know i i was one time at a company this is a while ago i was interviewing and the i had like a mental block and i couldn't remember the difference between um 4h and uh map or something something like i couldn't figure out why my app wasn't running and they were all just staring at me while i was struggling uh and at that point like i personally if i were on the other side i probably would have just helped out and said like you know maybe try this instead um and after the fact you can decide if that's you know enough to not hire them or not but i think in the moment most interviewers who are kind and people that you would hopefully want to work with would help you out if you were struggling or not speaking enough speaking too much i would hope they would give you feedback yeah for sure oh well go ahead yeah just just to add a little bit there yeah i can definitely vouch for the fact that uh you know 10 times out of 10 if you're meeting someone in the room they definitely want to hire you if it's possible but they also are going to be very you know um have a certain standard that they're adhering to in terms of what we're evaluating what we're looking for and so um back to the communication josh said it you know specifically effective communication and so when you're you know either talking through your code or being asked to explain something it's it's usually you know a way for us to get a sense as to that communication because you know whether it's codecademy or whether it's another you know you know startup late stage startup we're building stuff and so the ability to communicate effectively and work together is something that's you know a lot more important at a you know growing organization that's not just working on huge legacy code bases all the time and so what i hear in huddle sometimes um you know how some of these exercises have gone um communication is always something that's mentioned and so um josh is correct in the sense there's no one right way to do it and usually people are somewhere in the middle um but being prepared that you know to talk through it or to be ready to you know answer some of those questions because they will come up especially you know if you're interviewing at companies um like a codecademy or like you know late stage startups and stuff like that okay um so if you get let's say that you're you're going through this interview and like the person is like hey maybe this way maybe that way um and you're starting to feel a little nervous you're starting to feel a little like uh you don't know this is that is it fair for a candidate to ask for a pause or to ask for a moment to to collect their thoughts and like i feel like sometimes you are in this interview and you feel like it's an exam like it has a time a time it's like we got 30 minutes and this has to be done in 30 minutes if you don't finish building this thing or if you don't deliver on this it's done it's over um have you ever come across any candidates that might be like you know can you like give me a second to collect my thoughts or like you look at them and you realize they're going through a lot of stress but they're getting very stressed out like is that is that common i don't know how common but you can totally do it that's great and it shows that you're thoughtful and you recognize it like you're you know you need a second to regroup i think that's totally reasonable okay um i'm asking these questions because i'm trying to imagine that you know a lot of you a lot of our users especially when they're new they have a huge you know weight on the shoulders of impostor syndrome or like i don't even know why they call me back i'm a i'm a fluke you know i don't really know react i don't really know any of this oh my gosh like you know i my abs barely run and so i'm trying to ask all these questions because i imagine that it's a lot of questions that people go through through when they're applying for this like oh can i can i ask for a pause how antagonistic are my interviews going to be do they want me to succeed is it fair to ask questions so and i would imagine that has a general practice to practice for this for this uh interviews you can just explain it to anyone like just get a friend and say like here's the code i wrote and i'm gonna explain it to you for 10 minutes like is that is that how people practice for these kind of interviews our our code also barely runs just kidding yeah uh is nerve wracking for many like it's an important thing this is your career your future like it would be weird if you didn't feel any nervousness when you're getting started interviewing um so yes as rebecca was saying plus one the the reviewer interviewer should be compassionate and help you through um we generally at codecademy try to make sure that all of our interviewers are kind compassionate collaborators not angry antagonizers that would be bad and yeah having a friend look at your code is always a good idea explaining to the friend the code i recommend people first of all try to get as realistic if a simulation as possible like actually tell a friend hey give me this problem or some problem like it and work with me to solve it in an hour or whatever time period and then i'd also recommend people keep track of the questions you get whether it's a simulation from a friend or actually from take homes and interviews and then go over them later to see if there are any common threads of things you do really well or not so well at like when i was interviewing i always messed up hashmaps or maps or sets or whatever your language calls them at the beginning so i got real good at those just by rehearsing them over and over again because i was really annoyed at not doing them well okay yeah i guess practice oh i also just shared i don't know if we're allowed to like promote different websites but uh pramp lets you do these practices for free um so if you don't have someone around to do to run through a practice um check them out that's awesome thank you so much i shared it in the youtube chat okay so final type of interview so we've talked about take homes pair programming code challenges there is the infamous most famous type of coding interview question and it is the algorithmic whiteboard questions the ones that you see in the movies the ones that you see at places like facebook or google where it's like here's this very abstract obscure coding problem i want you to do it in you know a big old notation and like i want you to optimize it in front of me um these kind of whiteboarding exercises in your experience is this something that's still a common practice are they going away getting replaced by pair programming questions are they still very much part of the of the you know a candidate's repertoire when they're applying for jobs how come on how come on how likely are you to run into these kind of questions when you're applying for tech companies they're still somewhat common unfortunately i think they're slowly becoming less common um the reason why companies often uh gave or give the kind of algorithmic highlevel mathy problems because they wanted to see how people think about tough challenges which is a good idea something you should try to quiz on the problem is that these most of the time most of the work people do in most software development roles has nothing to do with really advanced algorithms beyond things like uh of one versus of n lookups like hash tables stuff like that like there's very very little so the things are unrelated to not all but most jobs and are slowly being phased out for example most of codecademy at least i can vouch for our frontend areas we don't ask for anything around like binary search trees or linked list shenanigans like i would never ask a candidate to reverse a singly linked list like notorious pinnacle of roots we just revamped our back end interview to not do that so i think we're good there too how about that you just heard it i mean um are does it fit in the definition of white boarding exercises this kind of the ones that don't even have coding in them you know like you could ask questions like you have three people on one side of the river and one boat that only fits two people how do you get this many people to those other like these kind of questions that are sort of algorithmic but they are not even code um i think even google i don't think people do those anymore i think like google even stopped doing those ones but uh like you're saying like the random like how many people are in a taxi cab in new york right now yeah yeah like hey if you toss a you toss an ant on a blender you know how do you escape before the i don't think anyone should move anymore i actually my most recent round of hiring where i ended up at codecademy whoop uh i got a question from a major tech company i'd feel bad naming where was uh you have two robots that land on mars really and they can only go in circles and they have the same programming and all they know is each other like they can tell when they bump into each other and they can tell when they bump into like this one uh crash site from the other like how do you get the pro like this weird question that makes me not want to work there again as we were saying red flag yeah um i thought so too uhhuh yes some companies will give you these still and again the goal is to make you think so get get the person to explain to you in detail what is what are the inputs and what are the expected outputs and then you're going to have to work with them to figure out how to map from input to output okay and figuring out what the outputs are is hard like what the expectations what you're given what they want you to do that that's a big part of working with an interviewer am i asking because oh i was going to say like i'm asking because uh you know when when you're a candidate applying for jobs uh you might be time constrained too like let's say that you go through code academy you finish one of the career paths you build a couple portfolio projects and say you know what i want to get a job before you know spring break okay uh you really don't have all the time in the world to prepare for every sort of possibility every sort of a scenario and it sounds to me like being solid and clean with your work which for takehome exercises and being able to explain your code for peer programming exercises seems to be a better use of your time has a candidate has going through a thousand katas of like algorithmic problems or things like that because they have their place but like the proportionality of what kind of problems you're gonna come across is more likely that you're gonna come across the other kind a problem is that is that fair i think it depends on where you want to work if you want to work at a fan company you might have to do more of that um also probably if you want to work in fintech they might ask more like matthew questions um so yeah i think it's it's back to your like first question uh what company you're interested in talking reaching out to people who work there to figure out what might be expected of you will you want to say oh um i was just gonna touch on the uh algorithmic piece just a little bit in the sense of uh what josh was mentioning usually it's really hard because they want to see the kind of questions you're gonna ask so half the battle is asking those questions and so usually just keep asking questions in those situations but uh yeah no i think rebecca you know said it all right there um you know you definitely can use the hiring process that you experience is a good gauge a little bit or some insight into the company and so um obviously there's you know the perception outside um in terms of if they have a product or service that you really like or can empathize with but uh when you actually start to chat with people get to know them learn how they assess folks you can start to get a better idea as to what you know working that might look like and whether that would be a good fit for you okay cool well i mean we've got a lot of interview stuff so i want to give the audience a chance to ask questions and do some a little q a i'm going to go through the chat and start answering questions from the back to the front and one of the questions that came through while we were discussing this was would this advice apply equally to all levels of developers are there things that are more important for a junior developer that wouldn't apply to a more senior position obviously in the context of you know applying for a job we're talking here i think one of the things that you will probably encounter more the more senior you are are systems design architectural questions explain a project to us that you've worked on um when you're a junior engineer i think it's unlikely to get those kinds of questions and if you do the expectations aren't as stringent um but the more senior you get yeah like you'll be asked to present a project you've worked on and walk through the architecture of what you built or you know diagram an architectural like go through a system design for a new feature anything to add josh plus one all right plus one all right so uh junior developers more coding senior developers more about why you coded that way or like architectural like the kind of decisions behind of like why it was built that way i guess of the more project stuff okay um is it okay to reach out to the recruiter and ask questions in case the problem statement seems not a hundred percent precise once you start working i'm assuming started working in the problem for the take home i'm assuming yeah yeah no for sure for sure and usually um there should be a disclaimer or a little you know um if you have questions please contact so and so um because usually the recruiter's probably not going to be able to help you troubleshoot a technical question but they'll obviously be able to get your question in the hands of the right person so absolutely if something doesn't make sense um it's always good to ask questions rather than you know do the work that could potentially be just in the wrong direction so always feel free to be able to reach out to the recruiter and get some clarification all right fair enough uh another question yeah if you all have a res word more like a request if you all have a resource of common technical interview scenarios that will be helpful to me um do you have any preferred places will you go practice this okay rebecca just share a link i'll take that okay i'm sharing the links that one link two links all right chat so you got two links there for preparing for your interviews scenarios and i'm assuming that i mean there's probably like a lot out there but uh here's a couple of them uh i don't know if rebecca or josh you have like any preferred places or things that you know that they're like pretty good or they usually get it right when it comes to preparing for interviews rebecca's firing away some great resources in the chat um plus one also just generally working on your own projects is my personal favorite way uh codecademy recently showed off some code challenges features where we have challenges you can work with on platform and then also even better doing like fully fledged projects on your own off platform and whatever editor you use is always a good idea okay cool is there something i can start doing while i'm a beginner to prepare me for future interviews so i'm assuming they mean as a beginner like they're learning to code is there something they should be doing along learning code well i can't speak to the coding side of things but in terms of keeping your interview chops um you know up to par and being ready to go for things like that it never hurts to have conversations you know throughout the year or um even if maybe a job opportunity or um something comes across your desk that maybe isn't exactly what you're interested in doing but um having a conversation doesn't ever doesn't ever hurt it also helps you practice um presenting yourself talking through your experience so then when you do get um you know into the interview that you're really excited about uh you're a little bit more prepared so um and that's just definitely wouldn't hurt to have some interview practice so take some of those calls even if the job doesn't exactly align with what you're looking to do okay anything to add nope all right good uh let's see if any other questions come through i'm looking through the chat i actually do have something i wanted to bring up someone asked earlier in the commented earlier in the chat that they think some companies trying to find it uh prefer not to do uh take homes because they're worried about candidates cheating uh that is an unfortunate that is correct some some companies don't like uh take homes i would say it's real obvious when someone cheats either in a malicious way like copy and pasting or if they kind of don't understand what's going on and have kind of thrown stuff together from stack overflow so we're not worried about that and i don't think other companies generally should be because even though they might unfairly get ahead in one part of the process it gives them a disadvantage when they inevitably have to explain their code to someone and don't understand how it works so not a problem okay i mean it's interesting i guess um yeah go ahead i'm just gonna say it's an annoying waste of everyone's time but it's not like you figure it out eventually yeah i think it goes back to what we're saying right it's just one step in the process like yeah okay let's say that you cheated your way through the take home guess what's going to happen in the next step of the interview you're not going to cheat through the programming preorder um i mean have you had that in the past like have you had people like try to like have like a second screen like copy and paste or have something like that like it just seems a little silly almost but but it's a high stakes like if you really want the job you might get pushed to those limits anything in the chair is there better to be is it better to be best at one language to have more under your belt lots of entry levels say that requirements you need to know yeah so i think this goes into um you know you're looking for junior level roles where they ask you for this crazy amount of requirements like lots of framework lots of languages lots of technical stuff uh and i think this person is just asking like you know is it better to know a little bit of everything or is it better that i'm good at one thing and just say like i don't know the others sorry for full disclosure someone said i looked like the ceo of mint mobile and now we're giggling about this in slack but uh all right first of all if a job requirement says you need like multiple multiple languages that is a like like more than four like that's a little bit of a red flag for a junior position uh do you i don't think juniors should be expected to know like front end and back end and full stack like that's weird um second of all a lot of job requirements will say recommended you you know what some of all of these things but then the actual requirements are a subset of that or they will say you need to know one or two of all these but it doesn't matter which i say that for junior developers it's i think less about what language like number counts you know and more of like you know how to do a general classification of task like if you're a web developer and you're doing frontend work you should know three languages html css javascript if you're like a python data analyst i'm not super familiar but i'm guessing it's like you need to know one of like python or r and then probably also sql depending on the type of work you do um someone should correct me if i'm wrong there but uh wait did you just call did you just call html a language did you say they need to know three languages html css and javascript we're not going to get to this we're not doing this is it all right here folks codecademy's official company position um whatever i i'd say that um finally lastly three or three um a lot of people feel nervous applying to jobs that they don't meet every single criteria for or feel nervous if they only meet the core and not all of the like optional this will make you stand out i'd say if you meet most of the criteria you should apply if you meet some of the criteria you should probably still apply like don't don't feel like you're wasting anyone's time by applying to a job that you aren't quite qualified for um you never know i think that kind of answers the a question that somebody just posted about when you're ready to start applying for jobs which is a pretty common question that we get in accord academy is like you know do i need to finish three courses five courses three career paths like you know when am i ready for for a job right so i think you kind of just touch on that uh if you know i mean will you deal with candidates all the time um do you get candidates that know like what is the ratio like 50 of the requirements is that good enough that you you might get through is it you know you asked for five languages they know three of the five yeah so yeah yeah so it's it's interesting because and again i don't mean to keep kicking this back to every company is different but at the end of the day every company is different and i've worked at places that um you know were java shops and every part of the interview process was java centric and you could have java ruby um and python and be experts in all three of them they would only be assessing like onethird of what you'd be bringing to the table and then there's other companies that are a little bit more you know language agnostic maybe they want to see your ability to have um you know a little bit of experience with a lot of languages i think it depends on the type of company what they're building you know if they are super early on having more of that jackofalltrades background might be super valuable because you can help out with some infrastructure stuff or you could do some database work but as you start applying to more mature companies that are going to have more segmented teams i find that being specialized and being an expert in like what you love doing um is usually kind of in a perfect world what the hiring teams are looking for and so um having an ability to specialize you know for what it's worth in my opinion i think um would be helpful um and then really trying to target jobs that align with you know really where you signed up excel the most at is it's kind of how i would handle it okay that's fair well we are that time we've been here for about an hour answering questions and uh i mean i'm going through questions the identical interview i want to give everyone here in the room one last chance to share maybe your one or two generic approaches and tips for success in the technical interviews and then we'll close it off josh you want to go first yeah i'll give two tips because i'm reading the chat one don't believe anything you read on reddit people are weird on the internet i don't know if that's a known fact but more importantly know your fundamentals if you're working in a language know how to use that language you don't have to be like a compiler expert but you should really understand how loops functions closures classes if they have it whatever work in that language it makes it so much easier to build things and explain your code rebecca don't apply to your dream job first find some companies that you're like lukewarm about use them as practice if it doesn't go well you'll learn from it and then when you do get to your dream job interview you'll have more practice and be more comfortable and will yeah i would just say you know ask questions you know throughout the entire process um it's good to be informed from your end and it shows initiative and curiosity on the company's end um you know whether it's process question whether it's about a piece of a technical interview um there are no stupid questions so feel free to ask whatever you need to feel confident and you know ready to do your best all right and my pro tip for everybody is don't code alone you hear it here again and again in the past hour you need to be able to explain your code you need to be able to share your code and to showcase your code so don't code along if you come to code academy for example out of all the platforms out there you should codeacademy.com uh when you're learning don't forget to step by step back for a second and go talk to your community engage in the forums engage in the discord server engage on your chapters program on a facebook group go talk to people see what they're building see get proficient at looking at other people's code you know if you can troubleshoot somebody's code you're getting better as well when you're trying to explain code right so go explore the community go get better talking to other people and building that network that is so important to get your first job in tech if that's what you're trying to do and thank you everybody josh rebecca will for stopping by today and we'll catch you on the next live stream goodbye everybody have a good weekend that's it