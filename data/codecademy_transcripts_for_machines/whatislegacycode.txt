hey my name is Mike and in this video we're gonna define and break down a very important concept in computer programming which is legacy code now if you've worked on a development team before or you've just been poking around the internet you might have encountered this term legacy code and maybe you're not a hundred percent sure of what it means and you're looking for a more concrete definition that's what I'm here to do we're gonna break down what legacy code actually means we'll take a look at some alternate meanings and how it's used throughout the industry and then finally I'll talk to you about how code becomes legacy code so we can get an idea of what the transformation process is from normal code into legacy code so let's talk about legacy code and the basic definition for legacy code is that it's any code that's maintained by someone other than the original author and this is sort of the traditional definition of legacy code and this is the definition that you're gonna hear most often when you hear people talking about it but over the years this term legacy code has really become one of those buzzwords that everyone in the industry is using and because of that the term legacy code has taken on a lot of other definitions so the first thing I want to do is I want to show you kind of some of the different definitions that legacy code has taken on and one of the best places to find some of the different definitions that are being used is just to look on Stack Overflow so Stack Overflow is a forum where you can ask questions about different programming topics and on here we have the question for what is a legacy code so it says what makes code legacy so legacy code is any code that uses hardware or api's that are no longer supported it can be code where the author is dead or missing code that's no longer supported or manufactured or code that doesn't have support or documentation so you can see there's a lot of these definitions that members of the industry have up voted and so legacy code kind of has all of these different meanings that we're gonna discuss and so with all these definitions how can we sort them out so why don't we take a look and we'll take a look at some of the characteristics of legacy code as exists today in the industry so first things first is our original definition which is it's any code that's maintained by someone other than the original author so maybe the original author doesn't work at the company anymore maybe they stopped working on the project or maybe they just pass it on to another develop but either way once the original author or authors leave that code becomes legacy code it's also code that currently exists in a project but that's set to be replaced so this might be code that has been working for a couple years but now the company is looking to refactor it it could also be code that's written in an outdated language or platform that's no longer supported so you can think of code that's written in an older version of a programming language or maybe code that can only run on an older version of an operating system that will be considered legacy can also be code that doesn't have a suite of tests so if there's no tests written for a codebase and it's extremely difficult to maintain that codebase and to add features to it because you don't know if you're breaking anything in the process and finally it could just be code that's no longer being actively developed so maybe the legacy code is in a code base that just hasn't been touched for years maybe it's owned by a company that still uses it but they just haven't touched it in a while that would be considered legacy now a lot of times when people think of legacy code they get scared and there's some pretty good reasons for that there are some specific things that generally go along with legacy code that are very difficult to deal with so first is that a lot of times legacy code is poorly written messy uses outdated frameworks or api's so it's basically just outdated or it's not written right it's very difficult to add on to it it's very difficult to develop on it it could also be built on an old or outdated version control system I know in my personal experience I was recently working on a project as a JavaScript consultant and they were using an extremely outdated version control system in fact the only way I could access the version control system was by logging into a VPN and then also remoting into a virtual machine it was just a nightmare legacy code could also have difficult build processes and basically what this means is that it could be very difficult to get the legacy code up and running there might be certain environment configurations there might be certain network configurations that need to be set for the code to build or run and if the codes written and outdated frameworks and versions of the language it could be very difficult to debug what the problems are like I secured a lot of times also requires an old version of an operating system so the code might only be compatible with older versions of the operating system that you might not have installed on your computer so a lot of times because it can be kind of scary to work with and because of all those characteristics that I mentioned in the beginning legacy code tends to have an air of mystery about it it's often seen as easier to rewrite it than to dig in and figure out how to modify it personally I always conjure up the image of a box so the legacy code is represented here by this box and there's input into it and there might be output coming out of it you know the legacy code works but you don't want to look inside to figure out why because it's so scary so now let's talk about how something becomes legacy code so how does a project go from what we consider just normal code to legacy code where does that transition take place and one of the main ways that that happens is just through evolution so a lot of times code bases and technology will evolve over time a good example is phones so phones were originally very simple and there probably wasn't a whole lot of code that went into running a phone but as phones evolved we got cell phones and those needed even more code to run and then eventually we got smartphones which needed a ton of code to run and so as phone technology evolved so too did all of the software all the hardware and all the technology that went into them and in that process of evolution a lot of code became legacy code because new code was being written or developers were moving onto different projects and things like that so constantly new operating systems browsers programming language libraries they're all getting released as new technologies develop as new hardware develops and so one to two years into a project unless you're constantly upgrading versions and refactoring things are going to be outdated in your codebase the main takeaway here is that projects move on projects are abandoned they're finished developers move on to bigger and better things not all systems need to constantly evolve and sometimes if you have code that does its job well you can just leave it alone and stop actively developing on it similarly if a senior developer leaves the company or a team moved on to a different project the old software they were working on can become stale and abandoned and turn into legacy code so just to wrap it up a little bit legacy code isn't good or bad I know I talked about how it can be scary and in a lot of cases it can but legacy code as we saw is a term that has a lot definitions and can mean a lot of different things thanks for watching join the conversation by subscribing to this channel or leaving a comment below and if you want to take your skills to the next level start learning at code Academy today