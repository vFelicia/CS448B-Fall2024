hello everyone welcome to another edition of codecademy live my name is alex koontz i'm here with my coworker kenny kenny how's it going hale glad to be here this is our second time doing functions that's right yeah kenny and i went over this exact lesson in another live stream a little bit ago so we are uh well prepared to lead this one but we're going to also go through a couple of new uh content items which will be really fun um i see lots of people in the chat already so if this is your first time watching one of these shows um we are doing this live stream series called cs101 yeah i see lisa saying kenny is in the woods uh i lost here uh we are doing this livestream series called cs101 we are going through kind of the fundamental um programming topics so this might be stuff that you might see in your first few weeks of a college level course or even a high school course one of the reasons why we're doing this is that we just announced a new student pricing plan we have a discount for students uh there's lots of information on our website if there's like a giant banner so if you're if you're curious about that you can go ahead and check that out but that's kind of the reason why we're doing this live stream in particular is that we really kind of want to uh teach the very fundamentals of coding uh right now we are streaming on a bunch of different platforms i think we're on twitch twitter youtube and uh facebook kenny and i are uh primarily looking at the youtube chat so i see lots of people are talking in the chat already hello we are so glad that you are here thanks for chatting we want this to be as interactive as possible so feel free to ask us comments in that chat um as we go through this lesson and then yeah if you're watching on another platform and want to interact with us i would say probably the best place to go is to youtube to chat with us there yeah at us yes uh kenny i'm so glad that you're here uh kenny's done a couple of these live streams with me and uh you know the people love kenny uh hashtag kenny rocks can you build it out i'm trying to put on a more professional setting right now right here in the woods i'm reinventing myself yeah cool all right so let me show you what we are doing today so i'm going to share my screen let me figure out the trolls all right so right so this entire um live stream series there's gonna be eight of them total this is the second one that you're watching and what we are doing is we are walking through this cs101 live stream series course that's on our page if you want to code along with us you can do so you can find this in the catalog i've also linked to this course on the youtube description all that sort of stuff so we're going to be walking through this course and every week we're going to be doing a different module from this course so last week we did variables and now we are on to functions um cool uh right and then uh one final thing before we get started all of these are recorded and put up on youtube after the fact so it's likely that you are not watching this live that you're watching on youtube after the fact we are uh we air these live every tuesday at 1 pm eastern time so if you're checking this out in the recorded version of it and want to join a live version in the future you can find us 1 p.m on tuesdays and we would love to uh we'd love to see you there i just want to say like for people making full use of chat while we're here or we're live definitely add us definitely like just ask questions as we go along i'll mostly be in charge of looking at the chat and answering questions but as people bring up like really good points i would love to raise that to alex who's going to be walking us through that content and like taking breaks and stopping along the way to see what else people are thinking cool all right let's do it so uh we have two lessons here and actually one of the cool things about this live stream series is that we're able to kind of pick some of our favorite lessons across the codecademy catalog and so this first this first lesson is teaching the idea of functions from a very language agnostic sense kenny what do i mean by language agnostic that's like kind of pretentious wording for me to be using what am i talking about that's that's like the technical way of saying it right like i think language agnostic it could be applied to any sort of language it's just a very common like programming idea and concepts that are used throughout right yeah exactly and again kind of like one of the things i really want to focus on is that everything that we're going to be learning today can be applied for the most part to any coding language that or any programming language that you're going to start with so certainly python javascript java swift um c plus c sharp like all of these share these same fundamental ideas and so you know when i teach when i was teaching high school classes um i actually jumped around across these languages a lot because really the important thing is like understanding the fundamental concepts more so than the syntax itself and so we we've built these little applets to kind of make the syntax easier right there's still syntax here it's just rather than typing code i'm going to be clicking on buttons um in this lesson it's that's kind of like the same principle of swift have you ever sorry not swift i've scratched have you scratched before kenny i was gonna bring that up i just had someone email me about like ideas that they want implemented and they showed us showed me a screenshot of what scratch looks like and i was like this looks like what we're talking about today how convenient yeah scratch is a great programming language uh developed by mit that's really good for beginners again because the syntax is very minimal it's mostly gui based it's mostly you know buttons and drag and drops and that that sort of thing and so yeah let's uh let's get into some of our little outputs here so right this week we're talking about functions and kind of the main idea of a function is that it's going well there are many different things it's going to bring together different uh tools in your programming toolbelt so you might know how to add something you might know how to print something you might know how to do all of these things and we can combine multiple statements into a single block of code with a function so in this example our like single statements are the steps that it takes to build a uh sandwich or a hamburger i guess um so i can do things like add bread add the burger patty pickles let's put another burger and i can add more bread um kenny any thoughts on this you were smiling i i was just thinking how you you mentioned uh making a sandwich and then bringing up the burger and i was like that could be a very divisive topic but i don't want us to get derailed yeah all right yeah is a burger sandwich it's cereal soup all that good stuff i think that's a really good point about like how these like even mundane things like task of making a sandwich making a burger it seems so intuitive to us but like breaking it down into these smaller steps and then knowing that this one big step is just a combination of all of it really highlights like how functions are used and why we would want to use one yeah and in fact one of the things that i from doing the this series uh doing last week's stream one of the things i noticed is as i was going through um these guise i was kind of doing things that were kind of so obvious that it wasn't even worth pointing like pointing out like when i clicked on something something happened and something i'm going to try to do as we go through this is really like highlight the very subtle things that are happening here that then become very important when we're writing in a programming language like python so to start that let's look at this second exercise which will show uh the reusability of functions so rather than having to make uh to click on each one of these to make the hamburger we've now added this function make hamburger which should do all three at once right bread patty pickle another piece of bread and all of that is happening at the same time so kenny what are some of the like subtleties going on just in this image alone that is going to be important once we bring things into the python um yeah i think like those individual steps the ordering of which it's done and then showing it that it's done as a collective uh so like if things start going wrong with our burger let's say like uh a burger patty is missing or pickles are on top of a bread like we can look back instead of going through each individual uh statement and we can look at it as a collective like what's wrong with our function rather than looking through all those lines of code or all those little buttons to see what order it was probably done yeah totally i think this this kind of goes along with what you were saying but these curly brackets here so that's how in this programming language in this syntax that we've created here that's how we are saying what's inside a function or what's part of a function right it's everything that's inside the curly brackets and again that might be something that is so kind of selfevident from just looking at this picture that you don't really realize but once we move into a program like programming language that uses text like python defining how a statement is part of a function is important right you might throw a syntax error if you if you do it incorrectly right you might have a bug in your program and so realizing that okay in this programming language we use these curly brackets in python it's going to be a little bit different python is all about indentation so that's something to that's something to realize um another thing to point out here is that our function has a name right our function's name is make hamburger we can talk about these parentheses in a second but that's going to be something that's explicitly important is when we define a function in python we're going to have to give it a name and then finally beyond defining the function in order for the function to actually do anything we need to use it and so in this syntax i can use it by clicking on the button make as many hamburgers as i want and in python we're going to use the function again in a different way we're not going to be able to click on something directly but we can define the function and then later use it yeah i see uh lisa in the chat is talking about uh or indentation with python exactly cool um let's move on to the next one all right cool this one is this one's definitely very important so this is uh we've called this the flexibility or function for flexibility so one of the things that you can do with a function is add add parameters or add you know elements that you have control over that you can change so last time our function was static basically it couldn't change every time that we clicked on make sandwich it was going to make the exact same sandwich in this example we now have a little bit of control over the input to our function so we can say instead of a burger patty let's add peanut butter and instead of pickles let's add cheese kenny how does this relate to uh programming in a more traditional programming language um gives you a lot of options to make choices like customize what your function is able to do so before we were always stuck with like a burger patty pickles um as our like filling but now with inputs with parameters uh we can actually customize them this time around it looks like we're going to put peanut butter and cheese together which perfect yeah and again i think there are subtle things happening here where notice when i change peanut butter to ham the content of the function itself kind of automatically changes that's something that's probably a little bit too complex to do really easily in python to like change the content of the function itself in python you might imagine like an if statement if you're familiar with those like if this first input was burger patty then we want to do at burger patty otherwise if it was peanut butter then we would want to add peanut butter right in a real python function there might be some like control flow elements here where depending on what the input is the different lines of code would be wrong what am i getting into control flow though alex can you talk a little bit more about that yeah so i think that's our next next week section and yeah again that's the idea of you want your program to do different things depending on certain inputs or certain settings basically and so here we're kind of defining our setting or our input and unfortunately we're not i mean it's it makes for a you know pretty concise little applet here but we're not really showing the control flow of like if burr patty then add burger patty um you know if um what about like customize like making it easier for the second option to make sense like if it's a burger patty let's add some pickles rather than like if it's a burger or like a peanut butter let's not add cheese to it um i'm really harping on that peanut butter cheese conduit i'll stop yeah yeah so that's a good point right maybe maybe we only needed one parameter here and if we chose burger patty then that defines that hey we're probably not gonna put like jelly on it right but if we chose peanut butter then we would put jelly on it um nice and and you'll know one final little thing is that you'll notice that we have parentheses around these two inputs and if you go back to our last one i said like oh there are these parentheses here right there are these open close parentheses here which was basically saying this has no input right we didn't have any ability to give the function any input and so in this one we do and that input is between the parentheses i just want to say it right now like too thank you alex because i think you're outlining a lot of things that i'm taking for granted right now and visiting this topic it's like it's very refreshing yeah i mean so this is something that i know as i was going through we did variables last week right and there's like there's so many like small little things that you don't even notice even like okay i've defined the variable but then nothing happens with it until i use it and so that's the same thing here where i can define this make sandwich function but you know that doesn't do me anything until i actually use the function all right this one function for organization so beyond kind of combining code to make it reusable right i can make multiple sandwiches at once um another good benefit of functions is just organizing your code kenny can you talk to a little bit about why you might want to break your code into several uh chunks or several functions yeah i think one topic that we don't talk too much about is just like how to read code how to go back and understand what it's uh actually doing like building upon the literacy that you're you're developing as you write code um and it just makes it easier to go back like to create uh these programs that do very precise things rather than having as you see in that organization that first bullet point of a giant blob of text which is fine it's readable it's just it takes that much more effort to break down and really understand what it's doing rather than if you were to segment this into uh so these different functions like make sandwich make fries make ice cream where everything has its own place it occurs at a very specific time and you know what they're doing at each individual point yeah exactly and and i'd like to point out that the naming here is also pretty important where as you develop more and more functions naming them appropriately so you can remember what the heck these functions do after the fact really kind of like one of the benefits of of a function is that after you write it and you validate that it works exactly how you want want it to work you can kind of forget about what's inside of it right unless it unless that starts breaking later on and you have to dive back into the function to figure out okay what's actually happening happening inside the function one of the nice things is that i don't really need to know what makes some fries does as long as i'm happy with whatever it's doing all right so this last exercise in uh in this lesson is kind of translating these uh the gui the button version of this code into a more traditional programming language in this case uh this is javascript um but we will shortly be doing python uh let's see what they are asking us to do the bottle bottom of the code change burger patty and pickles to peanut butter and jelly right and then so if i make that change and then run the code let's see there we go cool so this was this was an example of calling a function again with different input but rather than using that drop down menu like i was in the previous exercise now we are kind of in a more you know a more traditional programming uh environment where i have to type out the parameters that i want um this is maybe a good opportunity to show like you know as you're making your function you have to consider things like what if the user inputs something that i don't expect so so if i just like typo jelly if i make it 1l let's see what happens here so jelly is the second parameter so that's going to be topping 2. so topping 2 gets thrown into this sandwiched string and then something is eventually going to happen with the sandwich string but let's see what happens i bet this totally breaks yeah there we go one or more ingredients are not valid so yeah this is actually a good example of whoever wrote this little applet which was uh some of our brilliant curriculum developers either zoe or nick i think this is a nick creation [Laughter] he wrote his function or whatever is using this function to be a little bit versatile right it expect it handled this error pretty um pretty well where this is uh this is an input it didn't expect and so as a result it says hey that's not valid alex can you try strawberry scoop in there because i think this is based on like the functions that are available from the other let's see like the app yeah strawberry scoop let's see if he built in yeah nice nice nice there you go so you can mix and match your sandwich stuff with your ice cream stuff sometimes what you want yeah this is kind of fun i always like looking at this although i feel like it's potentially overwhelming uh i have my like special codecademy author mode turned on so i can actually go and look at the files that are building this and so we're asking that you that you know the student right in maine.js but if we take a peek at sketch.js i would bet it's in topping oh no you're right you're right sketch oh interesting there's also topping yeah we can look at toppings.js so you know there are multiple files here but you can kind of see um how we built this we have different images for brackets we have you know we're like defining the uh size of the canvas um the thing that we ended up building here was let's see if we can find this make sandwich function um i think you can our search no not on this one so let's see oh and then we have a bunch of code commented out i think we'd be going through a bunch of yeah like a bunch of commenting out code and just a lot more stuff that we don't intend to teach at the moment so yeah while this is a nice behind the scenes glance we're so close to finishing like the basics of this can go on to then python yeah cool so let's do that um let's see if there's anything in this last review section um yeah so let's cover this review very briefly so great a function is a sequence of instructions that perform a specific task packaged as a unit so that's you know all three of these things are packaged together into the make sandwich function um when we define a function we specify the instructions input and name of the function so that's kind of three parts the instructions are the curly brackets right the things between the curly brackets are the instructions for the function the name is make sandwich or make some fries or make ice cream and inputs in this case all three of these functions have no inputs right they're all open close parentheses meaning no inputs um when we call a function all of its instructions are executed so calling a function in this case is me clicking on the function button functions can be executed many times so as you've seen i've already made two sandwiches that can make a third or a fourth and fill this up and see if it breaks the breaks oh my god it starts maybe looping i think somehow like bread got pushed past that table of it or i don't know or not yeah it's funny uh yeah a little bread popped up there you're all out in fact for you alex this is actually it looks like when i was looking through the code it looks like it's based off p5 so yeah this definitely is i really love p5 it's so it's so much fun to make kind of little interactive things like this um let me reset to get rid of all these functions can have parameters which accept inputs input values making it flexible again that's kind of what we talked about these have no parameters but we could give it a parameter to say hey instead of burger patty add peanut butter and then finally um functions organize a program into distinct units making interchanging and editing them easier this makes your entire program organized and modular right so i can uh kind of break up my program into different chunks i can it makes it better easier to find errors where if i know something is wrong and make ice cream well make ice cream is only this code right so in general making a program as modular as possible is really nice all great points kenny any leftover comments from the chat that uh you want to get into i don't think so i think we covered most of the basics of functions um and people wanting to like get into specific examples maybe so it sounds like a great time for us to just dive into python and what like functions in python look like how we translate this very conceptual topic into something more concrete cool let's do it so uh yeah let's jump into this second lesson in the functions module this is now all going to be functions in python right and the point is just like again we could have chosen any language but python is probably one of our more popular offerings right now yeah python's uh popular offering i think it's also pretty good for introductory or for like new students where you know they're like all programming languages there's some things that are confusing or could cause a bug or an error but in comparison to others i think it's relatively minimal i know um the very first time i was in a classroom i taught the ap computer science class which is which is taught in java and there's like so much stuff in java that makes it hard to even do anything and so once i wasn't teaching the ap i started teaching python which is um a little bit easier to just like get off the ground get writing code um yeah okay cool um so in this exercise we again do kind of a conceptual thing at the start i think we can kind of go past this since the conceptual lesson covered all of this but this is a cool little example of the function is adding one side the input is a shape and then the output is another shape with one more side all right so in python so here's an example of our first function let's kind of since we've already we already have a conceptual understanding of what a function a function is from the burger stuff let's look at let's translate the stuff that we understood from the burgers into python code so kenny what is the equivalent of the curly brackets here like what is the how do you define that these lines of code are inside the function in python i guess for python it's more that they're all on the same indentation plane is that right yeah exactly so um one really subtle thing is that it's it has to come after the definition of a function which uses this def keyword uh the name of the function the number of parameters and a colon and then after that colon they're all going to be indented one level from there so if i did something like this where this is now no longer indented this is probably going to cause a syntax error because uh this is now outside the function the function is going to be considered to be ended and then this is indented and it's going to be crazy right uh yeah it aired on line 5 because this is this line is indented once uh because it thinks it's inside the function but the function actually ended right here because the indentation stopped so that's kind of one of the small little subtleties in python it's all about indentation and indentation matters all right how about the function name i kind of touched on that already but uh kenny how do you use the player function in python it's good that you brought it up because sonic uh money i just asks what does death mean and uh def i guess in python is short for define or like to define a function so after death you provide a function name in which that block of code that follows in that indentation will be associated so you first write depth function name some parentheses uh we'll get into like filling in those parentheses a little later and then a colon followed by the indentation that's how you define the function nice and then final thing right we'll get we'll get into the parentheses later for now it's actually the same as our hamburger example where we have open closed parentheses to signify no parameters right no input into this function uh meaning that it's gonna be pretty static it's always gonna do the same thing but final thing that was pretty intuitive in the clickable burger version how do we call a function now we've defined the singsong but how do we call it kenny you wanna i i imagine so last time we when we had the button it just had the name itself so i guess in this case sing song uh and it's since we don't provide anything inside the prince we just add parentheses in there awesome and that should be it yep there we go so and you can see it now that i've called it when this line of code is is run it goes to find wherever singsong is defined and runs the code blocks in there which is for print statements so showing the reusability of functions just like i can you know spam click the make hamburger button i can spam sing song right i can call this as many times as i want mad lad alex oh my god i could i could make a for loop right but you know we'll get into all of that later spoilers come on yeah okay cool um and anu yeah we just did the second step so we'll be covering all the steps as we go along or we'll try to all right cool so we kind of already went over this but uh in the last exercise we already have the function defined for us let's define a new function ourself so this the name of this function that we want is a loading screen so again i'm going to use that def keyword to signify that i'm giving i'm defining a function i'm giving it a name that name will be a loading screen something that we don't say here is that a loading screen should take no parameters um so i'm going to do open close parentheses and then a colon and then what does this function do well for right now all this function does is prints uh this page is loading all right cool so i just ran my code why did nothing appear in my output kenny oh remember uh even though we provide those instructions and we wrote in the code for our functions it doesn't actually do anything until we call it exactly so i can go ahead and now call that function and there we go we can kind of confirm that the function ran by seeing the output one thing i want to note is that not all functions necessarily have output right this one prints this message this page is loading but you know other functions don't necessarily need to give you output might be a little bit hard to verify that you're actually calling them right you would never actually see the output but a lot of functions might just like change a variable that exists elsewhere in your code or do something like that you know ultimately somehow you will probably see some output from calling a function at some point because otherwise you know why are we even programming if we don't get any output but you know a function doesn't need to provide output a great question from mark lam when doesn't a function take parameters or i guess the question could be phrase like when don't we have to provide parameters to a function yeah that's a great question i think probably most functions that you write will take a parameter of some sort so the advantages of parameters is that they give you a little bit of flexibility right they can change what your function does in some way like back to the hamburger example like i could change it to be peanut butter rather than a patty um so it gives you a little bit of flexibility it lets you do different things with your functions functions that don't have parameters like this this one they're always going to do the same thing but that might be useful right like functions without parameters are probably most useful for like the organizational part of or the organizational benefit of functions where you know this could have a bunch of print statements right like if for whatever reason i wanted to print this out six times rather than having to do this you know write these seven print statements every single time i want these seven print statements to appear i could put it all in a function have it have no parameters and then run my function a couple of times and you know it kind of that's kind of like helping for the organizational um structure of my code um a couple of interesting points here uh in this in these community forums section the question is is it okay to place function calls inside of another function uh the answer is definitely yes that even gets into something called recursion um but if i had another function um and this is and that does a different print statement and then this function let's say it calls that other function and notice the indentation let's have it call it twice all right so right now nothing happens i haven't actually called any functions right i've defined a function i've defined another function but none of those neither of those functions have been called if i now call or use loading screen there we go so this function happens once which prints something and then calls another function twice a third point i think one thing that i was confused about when i was starting to learn code is it looks like in loading screen we are calling another function and we're actively calling it but this just kind of reminds me like none of that code inside a function is actually executed or runs those instructions aren't told to the computer until we actually call the main function there which is in this case loadings yeah exactly and again the the subtlety of the indentation is really important where if i if i do that now all of a sudden loading screen the definition of loading screen is only that and then i'm calling this function after that so i've it's like you know the spacing kind of helps help show that but it's like the same thing as that where um i'm calling another function once i'm never calling loading screen so the indentation there is really kind of important and a little bit subtle um and just for completion's sake alex if you put like uh a line in between print and another function calling that does that affect anything like yeah let me uh let me call loading or yeah so if i if i run this now um nothing gets run again no functions are being called that's because both of these are in the function definition of loading screen so um if i call loading screen if i use that function again the parallel is me clicking on the button back in the gui version yep you can see that both are a part of the function so this this new line uh doesn't end the function or anything as long as you know the next line of code is still at that level of indentation it's still defined as inside the function and this would be like this question is specific to python but does tabbing matter or is it like do you have to do two spaces what's what's the deal with that yeah that's a good question and something that uh might be you might find bugs on our or you might find an error message on our platform about this and be fairly confused about it so right the difference between a tab and a space does matter so right now actually we might have fixed it so right now if i tab there it actually is two spaces and that's because if uh shoot what's happening uh that's because if this was actually a tab and then this was two spaces that would cause that would cause a syntax error in python and so yeah that's a really good point of um you have to make sure your tabs and spaces uh are consistent another thing is that some people uh so right now this is two spaces uh four spaces also works um but mix mixing and matching does not so four two four yeah lisa just came out with a controversial opinion of us saying spaces is better i think again debatable we'll see form your opinions yeah um i don't know if i have a strong take on this honestly do you uh i'm i guess i'm just lazy i like tabbing um and i have it configured in my uh text editor so that tabbing is two spaces yes i don't know if that's like a middle ground for anyone um that's where just the lazy just like whatever my text editor will take care of it prettify it that's what libraries all right we're getting totally off topic but let's come back to this white space because we kind of talked about yeah um actually yeah i scroll down here to look at this question and python is a single tab equivalent to two spaces or four sometimes so can it be mixed we just covered that so that's great nice um cool so great let me run this code right now and look what's printed out so uh kenny looking at this code what do you expect to be printed out here looks like the function is about this computer has two print statements um and then calling it is gonna execute those two print statements yep they're both part of the function because they're both indented uh um once this is like what uh what a dated reference of this computer is running on a version of everest puma i feel like this was a joke of like all the old mac operating systems used to be big cats right now and a mountain and what does it now event deserts they're all uh national parks i think right like uh yeah um yeah so our old reference to everest puma um all right cool remove the indent on the second print statement run the file now what's printed uh yeah and so the order here matters so note that in this version this computer is running on virgin everest pumbaa came first and now if we do this what do we think is going to happen so i kind of made the spacing uh to kind of give you a hint but now that print the the order is going to be reversed because this print statement is no longer part of the function definition so that happens and then we call the function yeah if we do it here now they're both part of the function and so it happens one two rather than two one all right all right so parameters awesome so parameters as we've kind of talked about are the thing that allows you to manipulate what your function does so right now let's see function multi to add three prints a number multiplied by two and added and added to three as is it as it is written right now that number is always five so if i call mult to add three no parameters i'm gonna do five as the number times two plus three so this is kind of like with our hamburgers that button without parameters would always give us the patty with pickles so instead of doing that modify the function definition so that can have a has a parameter called number then delete number number equals 5 on the first line of the function so if i get rid of this give it a parameter name number now i need to when i call the function i need to give it a number so i can put 1 into my function but now i do 1 times 2 plus 3 which gives me 5. i can also call it with 5 using the parameter i can call it using negative one as the parameter and i can call it using um zero as the parameter cool so our function is now a little bit more versatile right it's always doing the same thing it's always multiplying 2 and adding 3 to a given number but we now have the power to say what that number is um dimpledes asks why use prints instead of return i think that's is that our next exercise yeah let's get to let's look at what we have coming up multiple parameters keyword arguments okay so i'm gonna go through this next one pretty quickly um let's see um so this is asking us so instead of multiply by two and add three let's change the name to multiply by x and add y um x add not and add y cool so right now i'm still multiplying by two adding three but let's add some new parameters so again i have power over what these multiplication and addition um values are so if i now say okay this now takes x and y as parameters i'm still not actually using those right i've still hard coded in my two and my three but now i can say okay rather than two give me whatever x is and rather than three give me whatever y is let's stop you there real quick for a second alex because we kind of touched upon this last time but we didn't come up with the term of hardcoded and i think there might be some confusion in the chats like what what it means when something is hardcoded can you explain that a little yeah so that's um that's exactly so let me go back to this so right i would say that two and three are hard coded here meaning that they basically as as the user i have no power to change what they are right um if i was a programmer i could come in and edit the code but um as the user they're set right they're not flexible i can't change them they're not attached to a parameter of any kind they're not attached to any of my input any of any kind they're hardcoded into the code itself um can you think of like a a real example of something that's hardcoded um yeah i mean when we were let's go back to that example uh before about making sandwiches we're making a burger where we always wanted a burger and we'd always have our bread we'd always have our pickles i would say lettuce but pickles sure and then patty followed by bread and so all those values were hardcoded for us and i'm seeing some great examples where people are saying a hardcoded isn't one is when we don't use a variable uh we don't allow for input in that um emily says it's fixed yeah um uh lisa says embedded within and all these things yeah are reminding you just like like you mentioned we can't interact with them they're provided for they're fixed in place yeah um yeah i'm trying to think of i always like to relate it to something like a real application right i would say right something that's like not hardcoded is maybe your um username on an app right on instagram you have your username which is a variable it's not hard coded in it can be changed it can be displayed just depending on who's logged in and then what's something that is like hardcoded into instagram what's something that's like static oh my god worst person to ask because i don't have an insta but i imagine something like background pages are those colors like always the same thing always sure yeah yeah kind of just like static things probably the the image of the like heart right that image is probably hard coded into their um into their code where that heart is like it's gonna you know gonna be used everywhere and it's never gonna be alex i just have to take your word for it that there's a heart and it appears somewhere in instagram so sure yeah i could uh yeah oh man we really had the opportunity to convince kenny that instagram was like uh something completely different it's like what cats it's just about cats yeah exactly um okay cool so i'm to the point where i have replaced my hardcoded values i've replaced my two and three with my parameters so now i can call my function so i can call mont x add y i give it a number of five so i want five to be multiplied by x which i'll make two and then added to three there we go and then i can call it again but with different parameters one three one there we go i think one thing that people one thing that's a little bit tricky with the um with functions and parameters is that people get confused about this about like the variable name of like okay i've named this x i'm using x down here but what value does x have and really the answer to that is that x can be anything and it depends on when you use it right so i'm using it down here and in this case i substitute 2 for x which will then make you know it multiplied by 2 and then 3 for x this is actually something that i think didn't we didn't really show in the hamburger example we didn't give our um our parameters names i think let me actually i'm so curious that i'm going to go and look though we are running low on time um let's see my hamburger example when i had flexibility because we didn't yeah i don't think we ever showed like the defining of the function in that sense it's more like these are yeah right so we we're not showing that this right we're giving it value here just like in our code we're calling the function and giving it value here but we never actually show right if we were writing this code in python we would first need to define make sandwich having two parameter names um something like patty type and you know condiment type or something like that and we never actually did that in this uh in this exercise so again another good example of like some of this stuff is like so kind of um you don't even realize that it's happening which i think is kind of it's kind of the point of an introductory programming class where it's like it's to get you to realize these like small subtle things that are super important for programming because if you don't pick up on them you're gonna have errors and you're not gonna you know your program is not gonna run but they're like small enough that you almost don't even notice that they're happening at first um to me that's really like the goal of an intralevel programming class is to get people to see um to just like start viewing the world from this like really precise um framework where you know things need names in order to uh be referenced and over in our example we weren't giving it a name one good point all right um i'm gonna jump to and then i think we should do some of those code challenges at the end kenny so so far we've always been using print but a function can also return something and there's a kind of a for our purposes there's kind of a very subtle difference to these right now because really all that we can do is print but right now this function is doing something with age it's doing current year minus birth year and i can use the return keyword to return age um and let me my system's all screwed up because i skipped an exercise because i have all right cool so there we go i'm returning the age and now when i call my function so i can call calculate age i can say the current year is 2049 according to our little prompt and whoever wrote this must have been born in 1993 cool so i can do this but and nothing's going to happen i can run my code uh and i actually got an error birth year oh i did a minus not a comma that's a that's a good catch uh yeah so another really subtle thing is that a comma is the thing that differentiates your parameters and i had a minus there um so i can do this nothing happens nothing prints out i can right i could have done print age in here and now that i call this function that print statement won't print out but rather than printing the age i can return the age from that function and assign it to a variable and call it my age again nothing prints out i have no print statement here but now i can print my age i don't know if that's what it's asking me to do that's me to do dad a bunch more yeah kenny why like this is it's always hard to explain return statements when we're not doing a ton of stuff in our functions uh to begin with like why what's the value of being able to return something out of a function um you know like let's see when we're manipulating all these different values and we're performing some sort of calculation it's not it's not like it's a onetime use thing oftentimes we want to come back to it we want to store it somewhere and so like being able to return it it tells the computer to say like hey uh after you perform all these calculations let's have the option of saving it somewhere let's have the option of like storing it so that we can reuse it uh rather than print statements which is more or less for human readers where we want to see some sort of output as you've shown like without a print statement we can't see we don't know what's going on sometimes and so those print statements are reassuring reassurance for us that things are happening in the background and if we ever need to debug or understand what's happening we can use print statements but for the computer to use that information later on we would use return is how i sort of think of it yeah it's to get a value out that's a that's a great explanation to get a value out of the function so the computer can then do something else with it right so i could let i can then you know use my age in i can do my age plus 10. how am i am i going to be in 10 years right uh that should print 66. looking pretty spry for a 66 or 15 in 20 in 2049 uh you know i'll be well i wasn't born in 93 but you know looking forward to 2049 more kind of subtle things is that let me let me show a couple of things instead of doing return age i'm going to print age here so now two things print out which is a little bit confusing 56 prints out because i call the function here which does everything inside the function including printing something and then it stores the return value of this function in my age and because i don't explicitly tell it to return anything that value is the special python term none so it would be as if i had written return none so if you choose not to do a return statement it's like you do a return none at the end of the function the other thing that i want to point out is that if i return i'm just going to return hello here yeah i if i return something from the function the function is over it it stops it takes you back out to wherever wherever you called the function so if i run this code you'll see that age was never actually printed even though i called the function and that's because uh it hits this return statement and kicks me out of my function right so the only thing that's printed is hello a little bit confusing because it's like this is still part of the function it's still at the correct indentation level even though this line of code is guaranteed to never be executed because this return statement will always happen first so cool all right kenny i think we should jump to it do at least one of the code challenges uh yeah going to jump out of the lesson and function code challenges all right seven minutes let's see how far we get so right so these code challenges are something that exists on codecad me which i i think are harder than the average codecademy lesson but i think that they're really important and so if you come across these code challenges um in other codecademy lessons i think really do yourself a favor and take the time to like try to do these rather than skipping them or immediately asking for the answer or or stuff like that because i think that this is like really where you get to develop the computational thinking skills that you need to be uh to be a good programmer rather than just understanding the syntax there's a big difference between understanding syntax and being able to kind of think programmatically or computationally so let's do this first one so create a function called win percentage so i can do that easily so i can do win percentage that takes two parameters named wins and losses all right so it's defined so we're to return the total percentage of games won by the team based on these two numbers so let's see if i've won six games and i've lost four games i've won six out of ten games and so i should print uh 60. right so in this example it says five wins five losses should print 50 10 wins zero losses should print 100. so what should what should i do how am i going to get this number to return from this function um let's let's do this stepbystep let's just find out how many total games there are first can we yeah create a variable for that excellent so that's going to be wins plus losses um and then i guess like let's define wind percentage yep so that's going to be winds divided by total games and then it seems like uh this is being asked to be to be multiplied by 100 right rather than 0.5 i want uh 50 yeah right so this is going to give me again if it's if it's five and five total games is going to be 10 wins is gonna be five so five divided by ten is point five times once i guess the naming i put win percentage not even realizing that that's the name of the uh function itself maybe we should change that a little bit yeah that's a good call that could be confusing i think it would work but it could definitely be confusing um so so um i'll just call it percent sure excuse me that sounds good cool and then final step is that i need to return percentage nice that's the thing that i want to be thrown out of my function to come out of my function and so now i can call my function twice and there we go and test it out and i can even come down here and say check answer and get a little fingers crossed okay cool that was a lot of pressure alex got a second breath yeah uh so to note uh we could do this all in one line i could do something like return wins divided by wins plus losses well i think you're gonna have a syntax yeah yes uh so yeah i didn't i didn't define win i just did wins cool and then yeah and there we go same uh oh and then i didn't multiply it by 100. there we go same answer all right um let's do one more and then we are out of time or any any questions that you think we should hit first kenny so far none of the specifics can do you mind talking about like what a value is really quickly and maybe the data types in python and how we're able to do all this computation stuff yeah so that's something that we went over in the last week's session and more specifically in all of these variable lessons but yeah that's a good point where right now right so if you want to take a look at that more detail um variables and basic syntax has a lot of that information in it but it's a good point where right now i'm uh kind of doing this addition and division and multiplication assuming that these are going to be numbers if i passed in a string it's probably going to break horribly let me pass in kenny and yeah so i get an error right and it has something to do with type error must be string not integer so uh let's see i'm using kenny as my wins so when i try to divide a string by a number or when i try to add a string and a number together something goes wrong so that's a quick example of how data type is really important where um you know these operators are going to do different things depending on the different types good to know thanks for the overview yeah um any other questions um no i think we can try to squeeze out the second one and then leave the third one the last few ones for uh everyone else to try on their own sounds good yeah this uh this one is fairly similar we're just gonna try to find the average of two numbers um so that's going to be f average again two inputs this time we're asking you to define them num1 and num2 so the average of two numbers is just those numbers added together so um i'll just do added equals num1 plus number two i could probably call it sum although some might be a function name might get funny um and then i'm just going to straight up return added divided by 2. then again let me test this function by actually using it and printing the results and there we go i really want to kind of stress like i i think i think as i was doing this last time and then you know i realized let's switch this back to 10. as i was writing this function i kind of tested as i went along where i first had this and i saw this output and was like oh shoot i forgot to multiply them apply it by 100 that's not what i expected as you're working on these code challenges i would i really suggest doing kind of exactly what i'm doing where it's like write your function test it out see the output and if it's not what you expect iterate on it and do and try that a little bit before you know checking the answer um and usually we'll we'll give you comments here like describing what the answer should be um so you know check answers should be pretty redundant of you know if you see the write out but there's a high chance that you got the uh that you got the answer right i really kind of want to encourage people to do that cycle of write their function uh test their function look at the output test the function on different types of input and output to make sure all of your bases are covered all the different situations are covered and then after like thorough testing and as long as the function is um doing what you expect it to do then you can kind of say yeah i think this function is working correctly i think that's a really good point alex because i think like in you describing that it helps catch errors really early on rather than like having written a whole bunch of code and then going back to see where in all that code you had some weird error come up so they would very much recommend your approach as well all right cool we are basically out of time um i want to call out yeah mark lam in chat said uh it was helpful to take these lessons beforehand before watching the um series and so i think that that's a great way to do this there are a couple of ways to interact with this content but yeah this course is sitting on codecademy it's it's sitting here forever right next week on tuesday we're going to be going through this control flow section which will be similar format of there's going to be a conceptual lesson and then a lesson in python and then some control flow challenges so if you want to do that ahead of time come prepared for questions um you can do that i want to show off the events page um you can register for these events on our events page on codecademy codecademy.com events you can also find it through you know the homepage so next week we're doing control flow if you do do the um lesson ahead of time and have questions um there's a form for where you can submit questions ahead of time that we can cover and then similarly if you have any feedback about these live stream series um we'd love to hear from you this form is linked on all of these events as well so yeah if you're if you're watching this right now and want to give us feedback um let me post this link post this link in the chat kenny might have got it already no here i i just pasted it in uh the events page but that feedback yeah um okay cool let me any other questions that people have we should cover kenny becca actually brought up a really great point uh because in our average example in our average function we shouldn't really be using length or trying to accommodate like however many numbers rather than just two but going back to what we talked about hard code we only hard coded and allowed for two inputs um which makes it easier for us to do as a code challenge um but later on difficulty does increase with other code challenges so definitely try them out yeah that's actually um right that's kind of how i like to build up like our our toolkit of things that we know in programming where right now we know how to do it with one variable maybe two variables but as we learn about arrays or lists or whatever the you know the structure is that you're using um we can then start to do different things like find the length of that list to get the total number of things that you're using loop through the list to add them all together right so we're kind of starting small individual blocks individual variables and then as we learn more and more things together we can do um similar things a bit different all right cool um again let me plug uh we're doing this again this is um material similar to an intro college or intro high school course we're doing it because uh we have a back to school campaign if you're a student there's a new student discount price for pro membership um there's all of these you know lots of lessons and tons of different programming language so this is a thing that seems interesting to you i would definitely um suggest getting on the student um membership i'm super excited that we have it now i think uh tons of students could benefit from especially you know being in quarantine or if their college or high school is remote all that sort of stuff this could potentially be a good resource there's also some free courses on there too so even if you don't want to be a paid member there's some uh good courses that go over these like fundamental topics as well um so yeah if you if you like it um we'd love for you to join more and yeah anything anything from you kenny oh just glad everyone was able to take some time and join us today and wouldn't really be a lesson without other people joining in so and really the interaction that's going on in chat appreciate you guys yeah chat if you could spam kenny rox i've never volunteered for this again alex yeah so that was we had a live stream like months ago where uh where chat started to do that and uh i loved it kenny was uh uh made kenny blush oh am i turning red i gotta i gotta sign off this is it all right kenny this is fun uh we'll see you all we'll see you all next week