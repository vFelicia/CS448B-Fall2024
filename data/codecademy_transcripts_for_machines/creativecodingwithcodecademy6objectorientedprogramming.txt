theory we're live i think we'll wait a couple of seconds just to confirm but hello everyone if you're out there um i guess we'll go ahead and get started cause i'm pretty sure we're live um my name's alex uh this is another edition of what are we what are we calling this do you want creative coding with codecademy um co academy live series for creative coding that's what i've been calling cool well yeah this is our sixth session um juwan has been leading all of all of them so far but for the next two sessions i'm going to be leading them a little bit um i have to warn folks that all of my projects are going to be about a hundred times less creative than jiwan's jion i've been so impressed by like uh you're coming at this really from the creative coding artist angle um and i actually think my sessions are going to be slightly different in having limited creative capabilities but uh kind of focusing on programming fundamentals i'm hoping throughout the series i can maybe give you a little bit of like oh what if we do this sort of suggestions yeah for sure um i guess has a little bit of background in in setup of what we're doing today um i used to be a high school teacher i used p5 in the classroom and in addition to using p5 to make really amazing pieces of art and do creative coding like g1 has been doing i think p5 is an awesome tool just to teach programming fundamentals so today uh today's session is going to be all about objectoriented programming what is a class what is an object how can you start to think about designing your programs in an objectoriented way um i think what's especially cool is that i'm not even really a um web dev guy like i don't know javascript that well i cert i certainly don't know css that well um so even though p5 is uh javascript based um again the things i really want you to focus on as you're watching this session are the the fundamental concepts because these concepts are going to translate to java or python or javascript like we're going to see today um but it's the concepts that are important not necessarily the syntax um so going into that again uh g1 as someone who has way more javascript experience than i do i'm sure i'm gonna be doing things today that are like not super official or javascript style or it's going to be it's going to be weird right um so maybe i can even learn a little bit from you today if you want to call out like hey that's not how you you know declare a variable or you're forgetting all of your semicolons what are you doing um i will try but also i do have you know like i think if it works it works i think one of the beauties of using v5.js is that you know you don't have to be too bogged down on the little syntaxes and like you can really use it to try out um you know computer science concepts that might not be not may not have given you that visual click but that the p5.js will give you that and we'll get to see some of that too today exactly um i see we have the chat open um i want to definitely make this as interactive as possible i have kind of an outline of what uh we want to what i want to build and what i want to show off but there's a lot of different ways that we can experiment and go in different directions so as i'm doing this feel free to ask questions or make suggestions or experiment along with me um finally last thing to say before getting started is i will post solution code in the youtube description basically the code that we end up with i'll post in the youtube description after the fact so if you're watching this in the archives um go ahead and check the description if you want to see if you want to have access to the code that we ended up cool okay so let me give a brief preview of kind of what we're going to aim for again i doubt we'll end up with exactly this but uh this is an idea of what we're aiming for so it's uh falling rain drops here and the key piece of insight here is that each of these raindrops is a different object so we'll talk about what that means what an object means what a class means all that kind of stuff but this is around what we're going to be aiming for so i'm going to stop that i'm going to come over here and open up a blank p5 canvas and what i want to do before getting into object oriented programming is first doing something similar not object oriented so kind of following uh things that we've been seeing with juwon um doing some of our basic p5 functionality that you should know by now if you've if you've followed this series and do it in a nonobjectoriented way so first thing that i want to do is let me just set up a a single ball that is going to be falling and so to do that i'm going to set up some variables for the ball's position so i'm going to put the ball at 100 in the x direction and let's say 200 in the y direction and let me draw that ball at x y and let's make the radius something like 20. just make sure that that works cool there's our ball to make the ball move to make the ball move what i need to do is i need to start modifying this x variable in the draw function so again a little bit of a recap the draw function gets called again and again and again in e5 where um i think i think it by default it gets called 60 times per second so in the draw function if i say x equals x plus one this ball is going to uh move in the x direction so it's actually not even going to fall it's going to move horizontally and when it gets to the edge of the screen it's just going to keep going right you can imagine this x variable it started at 100 it reached 400 eventually and then it went above 400 so it's at 500 now maybe up to 600 which might be something that we want to change so i can actually do a little bit of a trick here i can use some mod arithmetic to say x equals x plus one mod 400. if you want i think you might have talked about this a little bit in some of your sessions but how does how does this mod work and why does this kind of help the ball reset back to the uh the start of the screen yeah we looked at modulus in our last two sessions the first time we mentioned that was during the generative art tool a creator project and we also use the last class of that class last session when we're creating the digital sculptures but basically what modulus does is that it takes the operand on the left side of the symbol and then divides it by the operand on the second on the right side of the symbol so in this case the first time when it um lows will be when um the left offering is 101 and it will divide it by 400 and what will return is the remainder of that division so basically what modulus are generally used for is if you have um if you want to limit a range like in this example the way that alex is using so they will ensure that whatever that first operand the first number may be it will stay within 100 and 399 actually because if it's 400 it will fit into 400 by once and the remainder will be zero another way that you can use um up modulus is to basically fit everything into a fixed number of categories so you can use it to do something like you know if you want to divide that into you know in this case it will be a little bit different but if you do modules by three then you can do one two three one two three one two three f for each step of that um ellipse moving um but one pixel at a time so you can do something like that too and doing the categorization is actually the one the thing that we use modulus for in our two previous examples so actually this is a really great new um way of using modulus cool yeah and i want to give a little demo here as you were explaining it we can even see if i change this slightly x is now going to continue to increase so if i log x here in the console you'll see there's my x increasing and i never actually change x to be below 400 but what i do is i draw x at whatever x is so at this point it's up to 700 800 but then i mod it by 400 so that's going to keep that range in between 0 and 400. so uh this is a nice little little trick that as you're developing uh your program um i see sunita asked a question of this can you give us some tips this is a really useful one of basically use print statements to investigate what your variables are doing if you have a bug oftentimes printing something out taking a look at what these variables are is a really good way to see what's going on um i'm going to change this back to keep uh to keep x between 0 and 400 um just for ease i mean again as you're saying g1 like the output is really kind of the thing that matters there's a bunch of different ways to do this but now i know that x is always going to be between 0 and 400. cool um so this looks like one of the balls that we saw on our kind of completed version i guess it's moving horizontally and not um vertically but uh you know we just have to change the y the y variable in order to get them vertically um this isn't quite objectoriented programming yet and in fact let's modify this now so rather than do only having one ball let's set up a hundred volts and so i'm gonna take these same ideas and i'm going to say okay rather than just having a variable for one ball an x variable and a y variable for one ball i need to have 100 variables for each of those things and one thing that i could do is i could list out 100 variables right i could have let x2 equals 150 and then i could tell it to draw at x2 um that obviously is gonna take some time and probably something we're not interested in doing so another really fundamental um idea in computer science is we're going to use uh g1 in in javascript is it called a list or an array an array okay cool so uh we're going to use an array with in python they're called lists uh in java they're called arrays as well um but we're going to use an array which is going to hold 100 variables for us i'm going to actually do something a little bit new here in order to populate this list with a hundred different values i'm first going to use a for loop so again don't re if you're not familiar with for loops here don't really worry about what i'm doing um again the the idea here is that i'm just populating this list or this array with a hundred different values and again that's yeah we have tons of courses on what four leaps are how to get comfortable with them but not really the core thing that we're interested in for this exercise um for this exercise we're eventually going to look at objectoriented programming okay so let me add to my arrays here i'm going to add to the xarray i'm going to do x dot is it push g1 yes uh adding to an array in javascript cool so push if i put in 10 here uh and let's do y dot push um i'll actually put in 100 and 200. i'm going to put in well let me even change these values uh i'm going to put 500 i'm going to put the value 500 into my x array 100 times this loop is going to happen 100 times i'm going to keep putting the same number in again and again and again i'm going to put the number 200 in the y array 100 times i'm then going to rather than draw just one array or just one ellipse i'm going to uh draw a hundred of them so i'm going to put this code that i had before in a loop and now rather than drawing the ellipse at x if i do this this is likely going to crash it might do something weird but we can take a look at what it does um cool yeah so the other thing alex your x is starting at 500 and your canvas is 400. good call let me start that at 300 then and let's also see what else is going on it says ellipsos expecting number for parameter but it did not get that oh well the other thing that you're not doing i guess is you're not using an element inside the array you're refreshing the whole excellent x array and whole y array yep exactly so here before when we ju when x was storing just a number this worked because i could plug in my number for x and i could draw my ellipse at 100 or whatever x was now what i'm saying what i'm saying right now is draw my ellipse at x and x is this array that has a hundred numbers in it uh this function this ellipse function has no idea what to do with that um with that hundred um elements so instead what we wanna do is we wanna say let's draw our ellipse at the ith element so the first time and i'm gonna do that for all of these the first time this loop um happens we're going to grab the element at the zeroth position of the array the second time the loop happens we're going to grab the element at the first position of the array again loops are not the main focus of uh of this session so if that's confusing um i would say largely don't worry about it we're going to kind of breeze through that and get to object oriented programming in a second but that's the idea of we're going to grab each of our 100 100 different elements one time and we're going to draw an ellipse and g1 what do you expect to happen now if we uh if we run our code we should see all hundred ellipses appear in the exact same spot and move exactly at the same time yep exactly they're all going to be right on top of each other because they all have the exact same x and y dimensions so this is another kind of little new thing that i want to introduce in order to solve this we're going to use math.random and we're it's going to look even slightly more confusing than just math.random we're going to do math.random times 400. and i'll show you what that does in a second but before we do that let's take a look at um there we go there's our 100 different um bones so um here we're using the math.random function and that function is a vanilla javascript function what's called vanilla javascript meaning that it's a native javascript function but p5.js also has a random builtin function ah cool so you can just say random and inside of it you can give it well you can give it one argument which will be used for the maximum value you can also give it two arguments in there um two so you can define minimum and maximum point but in this case if you're going to do a random between 0 and 400 you can just put in 400. cool that is way easier so this is now giving me a random random value between 0 and 400. random decimal number random decimal number so in fact let me print out um let me print out inside this for loop um uh console.log x of i so i'm going to be logging the numbers that are inside this x array and there they all are so there's my random decimal number between um 0 and what is it 0 and 400 so you can see um this is what's currently in our array cool let me get rid of that statement i don't know how nerdy this is gonna sound it almost makes me this feels like watching like water particles move from one end of the hose to another end of the hose yeah or like when you're in the car and you're watching the water like to drip down the window yeah yeah cool let me take a peek at uh the chat what is objectoriented programming cool uh new username brb so that is what we are gonna get into right now so so far we've kind of done the goal right again let me show you what the goal is the goal is something that looks like this uh you know there's some color that we haven't added yet there's some size stuff that we haven't added yet there's some speed stuff that we haven't added yet but for the most part it's there right we have balls that are moving across the screen what we're going to now do is we're going to transform this into being object oriented which means that we're going to start thinking of each of these bonds as a specific object in our code so right now right now our code doesn't really have a a sense of object right we just have these giant lists of x positions and y positions and it's a little bit hard to i get you know uh object oriented programming is just a style of programming this obviously works but we're going to investigate what it means to build something through objectoriented programming um let me talk a little bit about what object oriented programming is first and then we're going to implement it using these uh these raindrops so the main idea of objectoriented programming is we're going to section off some of our code into attributes and f and methods or functions and so sometimes i like to think of these as the nouns and verbs the nouns and adjectives and verbs of an object so juwon what is something that is currently in your room let's do a little experiment of uh turning that thing into an object in object oriented programming i've got a plant okay cool so you've got a plant so if we were to uh represent a plant as an object in code we would want to think about what things belong to the plant and so again those are like nouns and adjectives associated with the plants and what can the plant do so those are the methods or the verbs associated with the plant so i wish i had some some pet in the in the room right now something that has more dynamic action but yeah has more verbs well so so the verbs in p5 are going to be a little bit strange because it's going to be like display yourself um which i suppose you could say that the plant is doing where the plant is like exist yeah um but some like more obvious things i guess a plant could grow right that would be changing a certain attribute about it um let's talk about what are the attributes of a plant um what are some nouns or adjectives associated with your plant so it can have leaves more specifically can have number of leaves and then there will be also the height and the width of each of the leaf or the whole of the height and width of the plant itself as well there's also going to be things like does it have flowers can it have does it bloom does the plant bloom there's also gonna be colors things like um the color of the flower the color of the leaves that kind of things and you know if we're talking about the whole plan as an entity like what's the pot size that we need it could also be like a numeric number that will be an attribute for this particular plant that i have behind yeah that so that's a great example and i love that you gave me attributes that are all different data types right you had um some numbers how big is the pot how tall is it um you had some strings like what color is it you could imagine that being represented as a string or what is the name of the plant uh and then finally you add some boolean some things that are either yes or no right does this plant flower does this plant currently have flowers um things like that things that are either um yes or no so uh i'm gonna pose this question to the chat and i know chat is like 30 seconds delayed so we will have to uh we'll have to keep talking as they try to answer this question but thinking about what we currently have and again looking at our final output what are some of the attributes to these raindrops right what are the nouns and adjectives associated with these raindrops um i'll post that to chat and in the meantime g1 can you give me um can you give me a a noun or an adjective associated with these raindrops that you you think i haven't coded in yet like what else could we add to these raindrops that doesn't look like it's already there um i think that's not already there oh yeah okay this is difficult because we've already got okay i don't also want to think out loud a little bit because i feel like i'm going to give away the answer that we are expecting people to write on the chat um i think opacity could be one even though something is already related to that but i think also opacity could be calculated based on the size that could be actually really interesting you know make you can create like almost like a 3d effect of that i think yeah i think i i think that that the way that you were talking through that gave me an interesting thought of uh you can kind of tell the things that i haven't coded into these raid drops are the things that they all share so opacity are all the same right they they all are perfectly nonopaque um shape shape something that's also uh the same where uh every raindrop is a circle so that's an attribute that i'm not i'm probably not really keeping track of maybe all of these raindrops know that they're all circles but uh that would be a little bit silly if every raindrop in the world is a circle and they all know circles um so it's actually interesting because you kind of frame this as raindrops so i immediately thought oh like all of these should be circles but you know raindrops don't have to be squares if you're in minecraft it might actually be cute it's not not circles so yeah um other things i think we could do are maybe we could um do like individualized movement within it as well so you know we've got everything falling and it looks like they have different speeds of falling so different y speeds but i think we could also make it do like a little bit of jittery motions as well yeah and that's interesting because that kind of combines right now we're focusing focusing on just the attributes of what are the qualities of this object what are the nouns and adjectives associated with it but then falling is definitely a verb and so that's starting to like blend the two of maybe some of these raindrops have an attribute of like i'm a fast faller or i'm a zigzag father or something and then that affects how the fall method or function um gets uh gets calm or that that affects the verbs um cool well it looks like nobody is answering us in chat which is very sad but uh jivan do you wanna what are some of the attributes here that you think do exist for these raindrops so a really blatant one here is color right every raindrops have different colors and we also got different sizes and they've also got different x and y positions as well because they i assume they start off on different x position and the y position is actually individually kept track of it seems i've also got different rate of falling as well because i see some things that are kind of together at that moment in time when you keep looking at it one falls faster than the other or slower than the other depending which one you're focusing on so i think those are the main things i see cool so let's go and write that down over in uh the code that we're building so we had these are the attributes and oh man i don't even know how to draw yeah that's it yeah yeah um these are the attributes of a raindrop or that at least the ones that is already coded into our final final solution that uh uh that we were seeing there so we had yeah i saw myself just said size um we had an x position we had a y position we had a color we had a speed um i suppose yeah again like we had a shape even though they were all the same that's something we could consider adding um yeah i think that that is oh we had a yeah size is already in there okay cool so these are the um attributes of a raindrop cool how about uh actions or attributes i'm gonna again put noun slash adjective of a raindrop actions are the verbs that a raindrop can do um i see a question to chat what language this is currently in javascript using p5 which is uh this uh kind of visualization library that uh that javascript has um cool so what are the actions or verbs of a raindrop what can a raindrop do do you want they fall but they also um i don't know is it cheating if i go back if we go back to the other yeah we'll take a look it does seem like also when they go down they're coming back up as well sure so they like reset somehow um yeah because you can see uh yeah let's catch one at the bottom that blue one then pops up there um and you could even i i don't think i've coded this into uh into this solution code but you could imagine when they reach the bottom they have a new x position where they can like jump around but they reset there's also a comment actually came in from chat from archie and saying that there's also seems to be layers in the frame that's actually really interesting interesting right so that's like um what is that called like the z level right like how far forward or back um the object is well i think that's sort of like the way of thinking about it if these were individual each of those were like external elements for example but what is actually going on in here is because an ellipse is drawn one after the other so the topmost element or the topmost ellipse that's being drawn on this frame is the i element in the array actually right or the object in the array and then one that's going to be furthest back is the one that's drawn last in the draw loop so it is yeah yeah like this stacked effect but not on purpose if that makes sense yeah but i mean we could think about ways in which if we wanted if we wanted one ellipse to always be on top of the others we could think about ways that we could do that but yeah that would that is slightly trickier just based on how how drawing things on top of each other works in p5 where right what g1 was saying was the first ellipse that gets drawn in this for loop is going to be the one at the very bottom and then any ellipse that comes after that if they happen to overlap with that other ellipse are going to be on top um so that that is happening kind of as a side effect but we could think about how we how we might be able to do that um or how we might be able to code that into our object so like yeah that'd be fun actually is that called z what is that called z no i i i mean the css term is z index but in this case i would just call it layers okay cool um cool so let's think uh there's one more important verb very specific to p5 and i kind of hinted at this with the uh the plant but another thing that these raindrops are doing is they are displaying themselves right i could i could create these raindrops these raindrops could exist in the code all their variables could be changing and then i could just choose not to draw them uh we could see that if i i do this right now in in the nonobjectoriented version of this code the displaying of it is kind of equivalent to calling this a lip funk ellipse function and so i just i just ran my code all of that stuff is happening in the background all of those um all of these values are changing the modulus is happening they're all staying between 0 and 400 but they're not being displayed and so that's kind of a weird uh verb or method of these uh of these raindrops that's not immediately obvious so display self um cool i one uh one thing that we could do that actually haven't built into this but we will try to do it if we have time is some sort of clickable event so um a raindrop could like detect that it's been clicked and then change color or do anything really so um it could like detect clicked it could almost be like a game it's like one of those like catch objects falling yeah for sure it can like yeah raindrop might be able to detect where it is and then if it's you know in the basket then you score a point or something so like um you know detect in basket could be a function that that could be a verb that a raindrop could do okay so this is kind of the outline of how we start to turn this into an objectoriented approach to coding this out and so now that we've kind of conceptualized it let's actually start building this out and the way that we do this is by building a class and uh let me actually even look at yeah so the way that you do this in javascript is i'm going to declare i'm going to build a class raindrop um in objectoriented programming the class is kind of like the blueprint of the objects that you're gonna make so in fact it's gonna be we're basically gonna kind of fill in the details of um of everything that we just talked about we're going to define this class this blueprint and then we're going to take that blueprint and make a bunch of objects we're going to make the raindrops themselves and make the raindrops um display themselves and make them make the raindrops move we're kind of going to first define the blueprint for doing this stuff and then we're going to put that blueprint into action and make real objects so that's kind of the distinction between a class and an object the class is the blueprint it's the setup it's what do what does it even mean to for a raindrop to exist and then the object is let's make a raindrop raindrop exist now the class is defined let's actually make one it's an instance of a raindrop so cool let's start by defining the constructor and g1 this is where um your javascript knowledge might uh come in handy i'm going to be defining all of my attributes inside i'm going to be defining and giving initial value to all of my um attributes inside the constructor is that typical or does the defining of the variable typically happen outside the constructor it should happen inside the constructor with the the the this that keyword which i'm sure you're going to get to but basically the constructor is also a method of the raindrop and it runs when that when an object of that class raindrop is created right so i think in a way it almost um is very similar to how the setup function runs within v5.js right it's it's running it will run one time only when the um an object of the raindrop class is created cool okay yeah so yeah the job of the constructor is to uh give these attributes initial values so we're going to create a raindrop and give them initial values so let me first list out all of these uh attributes that we want uh and give them a variable name and i'll talk about what this this dot word actually means but let's give these some variables uh so i'm gonna say x position this dot y position uh this dot color i'm actually gonna break into three variables i'm going to break into an r a g and a b a red a green a blue value so color is a little bit i mean we could do one we could do one variable but we're going to be able to do i guess more interesting colors if we break down three let me do this dot speed um and for now i'm going to pass on these i'm going to just say every raindrop is going to be an ellipse and so i don't need to build that into the class itself and uh i don't want to think about layering right now although i'm sure we could come up with something cool um if we have time or that's a that's a good extension if you want to play around flaring i think we are missing size oh good call yes this dot size do you want do you want to explain what this uh keyword means it's hard right it is a little bit hard but basically what this keyword does and this the the this keyword isn't just unique for um javascript only well it is javascript thing but it's not just for a objectoriented programming thing only you will also see this being referred to when you're doing a dom event or like a dom detection as well basically what that means is that this keyword indicates the particular instance of the xposed property or the attribute that belongs to that particular object so what that means is that if we create let's say three raindrop objects using the class raindrop the particular this within the blueprint will refer to that um the one specific one specific objects x position attribute y visual attribute and so on and it's commonly basically used to individualize these values or these properties per object that we're going to be creating yeah exactly so again we're going to be creating 100 raindrops each one is going to have its own x position its own y position it's going to have its own each one of these attributes going to have its own one of those and this keyword we're going to be able to say i want to specifically look at that raindrops uh you know x position or that raindrops exposition and we need to know that those two x positions even though they're both named x position belong to certain range drops and so that's the idea behind this it belongs to this dot x position x pause belongs to a specific raindrop um cool yeah that this is always really tricky to conceptualize and i think it will become a little bit more clear as we start to start to make raindrops when we start actually use the blueprint but if you have questions about this definitely drop them in chat and hopefully by the end of this session um it will make a little bit more sense um cool so the constructor is almost done uh we've defined our variables we know what variables we want but the other job of the constructor is to give them initial value and so something that i'm going to do here is again use that random function i'm going to say whenever the constructor is called meaning whenever we make a new raindrop we are going to set its x position to a random value between uh 0 and 400. again i'm going to hard code in i'm not gonna hardcode in i'm gonna let's see i'm gonna say let the height of the screen is gonna be a thousand and let the width of the screen also be a thousand there's probably some i could probably do this in a different way like these are now global variables which i imagine are not super loved by everyone uh but we're just gonna roll with it so uh width oops width and height um and then this is gonna be width height um maybe just as a reminder you can also use the window width and window height global but the builtin variables to make it the exact size of your preview window as well um and also if you want to refer to width and height of the canvas itself you can also use the width and height builtin variables too so something that's a little bit weird there though is uh don't those variables only exist after setup has been called basically i want to use width and height inside this class you should be able to use that in there interesting okay let me okay let me back up then because that's definitely the better thing to be doing rather than setting up these um those variables that we don't need um i'm going to start by by hard coding in 400 and then let's play around with so you think i can just do with right you can it's just uh you might have to move the class definition at the end but i don't think you even need to do that because what it will do is that regardless of where your code is defined p5.js library will just look for a user defined setup function run that and then and then run everything else after but let's see what happens if you do that and then if not i know that you can do it it's just whether that class will have to be defined after the setup function in terms of line word in the line of code that might i'm a little bit faint on that okay cool yeah let's leave it like this for now it's going to be a second until we run our code anyways and if things break we know we can go back and hard code in 400 for now but that's something we can eventually um look at um for the colors uh i'm gonna do a random number between 0 and 255. um again i think g1 dropped a link about color uh in the chat you can look into how colors work but basically if this number ends up being high close to 255 then there's going to be a lot of red in my color if it ends up low closer to zero then there's going to be less red and same thing for green and and i guess uh uh could i do 256 i mean it really does not matter at all but uh is it i guess 255 is what we want here yeah cool um speed for now let's just say every raindrop has a speed of one and for now let's say every raindrop has a size of between one and one is gonna be really tiny let's say it has a size between um 10 and 50. okay cool so at this point we've kind of uh dealt with our attributes of our class um a raindrop we can now start creating raindrops using the constructor uh and each of those raindrops is going to have you know a lot of these attributes we didn't quite get to shape our layer but they're going to have those attributes we haven't done the verbs yet but let's go ahead and actually use this constructor because we can we can do that at this point so i'm going to delete these arrays and um i'm gonna delete all of this as well and now instead of having these separate arrays for the separate attributes where again we added here all here's my array of 100 x values here's my array of 100 y values you can imagine if i wanted to start doing colors i would have to say here's my array of 100 red values here's my array of 100 green values here's my array of speeds right it starts to become super cumbersome when we're defining all of these these different arrays for all of our different attributes instead of yeah so i'm just i want to point out that we actually did something like that um for our second live stream session we created these like they're not exactly bouncing balls but there are a little bit bouncing balls actually that started from the middle of the screen and then went around and it bounced around the canvas and the way that we um differentiated for each of the the ellipses in the bouncing bowl is by having i think we have like what six or seven different arrays for each of these attributes which i guess is a the thing that we're addressing here the benefits of using objectoriented programming versus having a lot of arrays for each of these yeah and you can kind of imagine if our program got bigger and bigger now we now these these arrays that are very specific to the raindrop are going to start mixing with things that are like irrelevant right we're just going to have like the the array containing the speed of the balls right next to something that's completely unrelated and so by doing this objectoriented programming approach or objectoriented approach what we're doing is we're containing all of the information about raindrops inside the raindrop class and nobody else really has to worry about it all you need to know how to do is create a raindrop and the position the color all of these things are going to be kind of taken care of for you or at least it's going to be sectioned off into its own part of the code um so let's look at um let's now create a list of raindrops rather than a list of or an array of all these different features so same as before want to stay let before raindrops thank you yeah uh there's some of my javascript experience coming in um yep so defining my array of raindrops to be empty and then here where before we had um let me let me control z because i'm upset with myself for deleting all that code um so let raindrops equals that and here before we had let me push on a random number to my x value array let me push on a random number to my y value array now we're only going to have one of these because we only have one array we care about and that's named raindrops and instead of just pushing a number onto our array what do we want to do juwon we want to create a raindrop object and then push that object into the array correct so this is us actually using the constructor and let me make sure i have the syntax of this right because again this is kind of different in every language that you use but it's creating a new raindrop so what this is doing is uh there's probably subtleties to the the new keyword that i don't actually know but the way you know in your introduction to objectoriented programming lesson the way that you should be conceptualizing this is i'm cr i want to go to the raindrop class and find so which is the class that we uh defined right here and find the constructor with no parameters right that's why we have open close um brackets right here and do whatever that constructor does so in this case i'm going to create a new raindrop and set up its position its y position its red green blue values um do you want does javascript allow for multiple constructors with different parameters um that's a good question i believe um you shouldn't be able to do but let me quickly look that up yeah uh as she does that i guess i can give a little bit of an explanation of other languages enabling you to write multiple constructors so some constructors want like a variable here right and that variable might define the range in which the size could be um right i could like put that there uh so other languages allow you to define multiple constructors and then when you actually call those constructors you would have to you know make sure you know which constructor you're calling where if my constructor took a variable then i would have to give it in order to call that one but again differences between different languages um yeah i think the answer is that if we're using so there the thing with javascript is that this is what's called an es6 way of defining um it's a version of es6 is a version of javascript and it's that way of defining classes in es6 javascript the latest version of javascript you should be able to use um prototyping what's cool this is like getting a little bit too much into the new ones of things but basically the short answer is if you're if we're using this pattern no but if you're using another pattern yes you might be able to yeah so again kind of something to think about as you're working with objectoriented programming is that there's different ways to create um different constructors and the way that i am doing this right now we're kind of stuck with this default constructor with no parameters which is totally fine for our purposes let me um now that this raindrop exists let me actually i don't even know what's gonna um print out here i bet it's a bunch of objects that aren't gonna be helpful let me log what my raindrops uh it should be an array actually looks like um and that should be fine so if i yeah cool i have an error here because down in my draw method i'm still using x which doesn't exist anymore but the thing that we're interested in here is here is my array of raindrops so it's a hundred of them and now i can start to actually inspect each of these raindrops look at this this raindrop has its own exposition x position um sounds like something exposition uh this raindrop has its own exposition its own y position red green blue values and this raindrop has its own uh variables so each one of these has its own own variables the reason why they're different is we're using this random function to say when i when i create a new rand drop give it a random value so that's awesome that and the the console.log really helps there to see all of these different raindrops and they all have their different values cool so we are set with attributes we can create raindrops and they can have their own attributes right they all have nouns and adjectives associated with them let's now write some some actions some verbs things that the raindrop can do and so again if i'm comparing back to what i had before all of the actions i was doing down in the draw loop right i was drawing the the circle i was i was using the ellipse function to draw the circle and then i was moving the circle down here in the draw function and so what we're looking to do is we're looking to kind of move some of this code away from the draw function and bring it into our class so let's start that by defining the um display let's say a thing that a raindrop can do is it can display itself so i'll even call it display self this is a method of the raindrop class and we have to ask ourselves okay what does it mean for a raindrop to display itself that a raindrop displaying itself means calling ellipse at its own x position its own y position and uh and i'm going to do this not y position and uh size this dot size cool so i can display a raindrop let's see let's put that into action um so down here in my draw loop i'm going to instead of calling ellipse here i'm going to say grab the raindrop at position i and it's called raindrops at position i again that's our array of raindrops and have that raindrop display itself cool there they all are so again kind of that similar idea of i don't really want this code about displaying a raindrop just kind of floating in the draw function where it could be interacting with any other code i write here it's really specific to raindrops and so let's just section it off into um into the raindrops class right you could even imagine somebody coming along i hand them this raindrop class i say a raindrop knows how to display itself don't worry about how it's doing it you don't need to know anything about its exposition you don't need to know anything about its y position all you need to know is that it can display itself and so go ahead and make it display itself and somebody could come along and make it do that actually um one thing that we should go back to circle back into is that the width random the random width is working up there yeah there you go um yes this is working where the random width is getting between 0 and 400. so if i increase this to a thousand we should hopefully see yeah um these raindrops are spread all along oops um all along my a canvas even past 400 400 so that is definitely working let me shrink the canvas to 8500 by 500. all right we got eight minutes left so let's do okay an aspect of displaying itself is uh setting the color so before i uh draw the ellipse i'm going to set the fill which is the fill is kind of like setting your paintbrush for the uh for all future shapes so i'm going to set the fill to this dot r um this dot g this dot b do you want why does why are they different colors um given i just said phil sets the color for all future shapes like how are we getting a bunch of different colors if phil is saying any shape you draw from now on is going to be this color because when we created the object in line 40 by saying new raindrop it ran if we go back to the code in the constructor in line 22 to 24 we're randomizing the rgb values so basically each of our raindrops have different value for red different valley for green different value for blue that's going to range between zero and well technically a little under 255 right the the highest number it can get is 250 4.99 but that just means that we're eliminating the chance that the raindrop will be completely white but that's okay for our purposes but basically because of that when we draw it in this place else each of the objects are going to have a different r g and b value so they're going to be using different fills in there and every time that um ellipse function where the display self function runs um a new fill color set and then the ellipse is drawn and the next time a new fill color is set and then the ellipse is drawn and so on yep exactly so because i'm going through this for loop the first raindrop calls display set we say every shape from now on is going to be filled with that first raindrops color let's draw a shape then the very next thing that we do is this loop happens again we tell the second raindrop to display itself and we basically overwrite that first film command from the first raindrop you say forget about that from now on any shape we want to draw um should be filled with this color and then we set the ellipse and that happens again and again one kind of side effect here is that if i started drawing shapes after this for loop they would all be drawn in the color of the final raindrop um of of that set so if i just draw like a rectangle at 100 100 that's 50 50. um you'll see that this is filmed with whatever the last raindrop was which looks like maybe that was that's the last three drops oh it's cool you can spot it yeah in fact here we can uh this is like super overkill and something i shouldn't do given that we have five minutes but we can see yeah the raindrop at x at four what is that 439 so that's far yeah so it looks like it's that raindrop which is kind of cool but yeah kind of a side effect to remember is that we never um we never like clear that fill so something that we could do here is then say great after i'm done drawing those raindrops let me set the fill to black or whatever you want but just be aware that this is changing the fill kind of without you realizing it um cool all right you got four minutes left let's implement uh the other big act the other big verb here of fall so a raindrop can fall and for a raindrop to fall what that means is that we want to change the y position by its speed so this dot y pause plus equals um or i don't even know if plus equals this so this is not y plus positive y pause plus this dot speed it'll be more fun if we give each range of random speed so let's do between one and ten and then i know we said kind of uh reset self could be a separate thing but let's for now just put reset self as part of the fall method so let's do the modding here again so mod cool cool a trick that a lot of or an error that a lot of people will fall into is saying great i wrote my fall function let me hit run and see all my raindrops fall what the heck they're not falling uh and that's because of course i am just writing the blueprints here raindrops know how to fall but i never toned my raindrops the instances of my raindrops the raindrops i actually made i never told them to actually fall so let me go ahead and do that um fall there they go i think in my original version um i in fact it didn't have a speed variable so if i run this now this is going to break because i'm asking to use the speed variable here and instead i think that this is an interesting uh this shows how you can use instance variables in multiple ways i said i want them the speed is dependent on the size so i said uh plus this dot size so this would make the big ones fall faster um which we can go ahead and see it's probably going too fast and so let me do this dot size divided by uh yeah cool so the big ones are falling faster the small ones are falling slower um i think that this is a uh a good thing to remember is that i think a lot of people think hey my my variables can only be used for one thing or my constructor can only set up variables another thing that i could do that i could have done is i could have said this dot speed equals this dot size divided by 10 and then do this dot speed here the exact same code basically instead of doing it here i'm doing it up in the constructor um but yeah just remember you have access to any of your tools in your coding toolbox in any of these methods whether it's the constructor whether it's a different method like fall you can be as creative as you want in any of these methods and um yeah and do do different things can we try making two small um style changes here sure it's gonna be two lines of code um so in setup let's do no stroke um yeah anywhere cool and then that takes away the outline the black outline from the uh from the shapes and let's do my favorite thing of um adding in um traces so in the background function in the background function let's change backdrop background to 255 comma um and let's do 30. oh my god you wonder immediately way more interesting um that's awesome let me find what color i used for this background um oh yeah so we can just do that and then just put 30 as the fifth argument honestly yours was better with the uh the white background no i like this yeah um cool so we are basically at time let me uh stop here and see if anyone in the chat has any questions um as we wait for questions to you on what are some of the ways that you you would uh change this or add on to this what are some further challenges that people could work on i think you could definitely explore that adding click function to in in there we briefly talked about in our last live stream session as well um and but basically during our last last live stream we um experimented with binding key events to um to create interactions actually that was the one before but we also did the same thing in that class um so wait a minute backtracking we learned how to implement in interaction to rp5.js sketches in the last two live stream sessions so a really good challenge would be you know adding in some sort of mouse click event to each individual um raindrops so you could create a whole new method in there um the hints that i'm gonna throw out is that you would most likely want to use the mouse is pressed boolean variable it's a builtin b5 transparent variable which will allow you to check whether a mouse is pressed or not and then you would also want to check using referencing the mouse x and mouse y builtin variables and check that against the position values of each of the ellipses and that way you should be able to detect whether a mouse is pressed and whether that when a mouse is pressed or whether the mass x and mouse y are within the range of that particular raindrop and you should be able to have you know change color or change the shape or you know change opacity what have you um depending on you know um whether that um yeah mouse yes so a super quick uh demo of this is uh i wrote this new method i'm saying if the mouse is pressed and um the mouse's x position is to the left is is less than the raindrops x position then change the raindrops blue color to 255 that's gonna do something really interesting though yes we can do it let's do it for sure so let's make sure to call our method um what do i call it is clicked do this and then start clicking so right so let me even restart so i'm changing all of these ones to blue but all the ones that my mouse isn't to the left of stay the same but now if i start to go in this direction they're all changing blue which is cool um we have a quick question from rafael in the chat and saying these forms are made on with canvas right could you use svg um you can't use well you could use svgs by importing them in as an image file and you could display those image files instead of displaying ellipses in here um if you want to actually control the each of the points within the svg you're going to most likely going to need another library on top of the v5ds library to manipulate things within the svg file itself but you could use um svg or any um image files instead of an ellipse in there so if you wanted to use like pngs that are in the shape of a raindrop an actual raindrop with that you know the curve going up like that you could use that instead yeah and all of that would fall in the display the display self method of rather than drawing an ellipse say hey load this png or whatever you want to do cool cool um great that's all we have for this session again i will post this solution code in the youtube um description if you want to play around with it next week we are doing a similar thing rather than um looking at kind of uh so in this session we looked at object oriented programming through the lens of p5 um next week we're going to look at machine learning through the lens of p5 so um coding up uh a machine learning algorithm uh in p5 in fact um let me see if i can find this suit quickly because i think it is a nice thing to get man machine learning is such a buzz word though gonna we could actually you know you can combine machine learning with the 5js and there's another library called ml5 which is also an open source machine learning library that you can use in javascript which is also a good way of exploring but i think alex you're talking about something a little bit different right yeah i'm talking about oh man and i don't know if i'm gonna be able to find it quickly um um okay here it is yeah give me one second sorry cool let me screen share um cool this is the this is the thing that we're going to be building which is um the knearest neighbor uh um classification algorithm where uh that this is what we'll be doing next time of explaining what knearest neighbor is and then building out this this visualization so really interesting yeah like where my mouse is right now is being classified as light green because uh its closest points are two light green points and one dark blue point um so we will get into all of this and much more next week um cool anything else uh you want to say g1 um just one two we had a question from charlie about when the next live stream is um it will be next tuesday 4 p.m but it's going to be eastern standard time 4 p.m cool awesome all right folks hope to uh hope to see you then