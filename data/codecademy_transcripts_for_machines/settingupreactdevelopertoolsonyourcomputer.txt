How's it going everyone, I am Ben with Codecademy, and in this video, we'll cover the basics of how to set yourself up with the React developer tools Chrome extension to help you get started with debugging your React applications. With React developer tools, you can modify rendered React components, allowing you to experiment with changing component values, calling methods, testing interactions between components, and much more. We'll be using the command line to work with npm and the create React app node module, so this video assumes you're comfortable with these tools. We're going to start by opening up Chrome and installing the extension itself, then we'll use createreactapp to generate a reactapp template, and run it to open it up in the browser and see it live. Finally, we'll open up both the React developer tools, as well as the newly created React application in order to understand how the tools can be used to facilitate the debugging process. All right, so let's first open up Chrome and we're just going to search for React developer tools. Very likely it'll be the first one to show up, and the page is going to look like this, and all you need to do to install the extension is click this add to Chrome button, and then in the popup click add extension. All right, once that's finished up, you'll get this message letting you know that it's been added. And by default, the extension is hidden but clicking on our little extensions puzzle piece icon, we'll now see React developer tools, and we'll see the icon. The icon is gray at the moment, and that indicates that the page we're currently viewing is not using React. We can click on this to confirm that. To see how the icon appears on a page that is using React, let's open up a new tab, let's head over to Codecademy's homepage, let's once again, take another look at our extensions, and now looking at it, you'll see that it has some color. This indicates that the site is indeed using React, and therefore, that React developer tools are available for this page. For demonstration purposes, let's head over to the command line, open up a terminal, and we're going to create a basic React app before we open the developer tools. As I mentioned earlier, we're going to use the createreactapp node module for this. To do this, we type npx createreactapp, and we can give it whatever name we like as long as we don't involve capital letters. I'm just going to call it myreactapp, I'm going to hit enter. And making the app is going to take one or two minutes. So for the sake of this video, I'm just going to fastforward to the end. All right, now that that is finished up, we are going to switch to the directory of the app. I called it myreactapp. And once we do that, I'm just going to run npm start. This will open up a new Chrome tab, and clicking on our extensions, we now see that the icon is orange. This, once again, indicates that the page is indeed using React and that the React developer tools are available to us. The reason that the color is different than before is because our newly created app is in a different stage of development in Codecademy's homepages. But for now, just know that if the icon has color, the page is using React and we do have access to the tools. If it's gray, we do not. Okay, so now that we've installed the extension and we've opened up the app in Chrome, we are ready to open the React developer tools. First, open the Chrome dev tools by clicking view, then developer, and finally, developer tools. And alongside elements, sources, console, and these other tabs, you will see two new React tabs. We have components and we have profiler. The components tab will show you the root React components that were rendered on the page, as well as the subcomponents that they ended up rendering. And the profiler tab will allow you to record performance information about your app. These two tabs will only appear on sites using React. And let's confirm this by opening up a new tab, and once again, opening up the Chrome dev tools, view, developer, developer tools, and taking a look down here, we no longer see these two react tabs. So let's go back to our app, let's click on the components tab, and you'll see that right now all we can see is app itself, and that is because there is a filter that is causing some of the contents of app to be hidden. So right now, let's go into the settings and change that filter. We're going to go over here to click on this gear icon, we're going to click the components tab, and here is where you'll see the filter. Let's delete this filter for now, exit out of this popup window, and looking back here, we'll now see that we can see all of the contents of our app component. So now I'm going to switch back to my terminal. I'm going to open up a new window because this one is busy running our server, and I am going to open up our app in VS Code. All right. So in these files, let's click on the sources folder, let's click app dot js, and here is where we're going to see our app component that is being rendered in the browser. Going back to our browser. As we now hover over these elements, we'll see that the corresponding element on the page is lighting up. We can also enter an element in the search bar to find it, and as we click the elements over here on the left, let's click on, let's just click on app, this section on the right now, the properties are exposed. Now on the right side, we're able to access and update the components' props and state. So if we click new prop here, I'm just going to give it name, and as its value, I'm going to type in my name, Ben. And if we were rendering this name prop anywhere on the page, we would immediately see the change reflected on the page as we alter its value down here. As a quick demonstration, let's go back into our app js file, and I'm going to be using props within the context of a function component here since that is what's created by default with the createreactapp tool. If you're working with class components instead, editing props and state works similarly. With that said, I'm going to first pass props as an argument to our app component, and then somewhere in our JSX expression, I'm just going to do it underneath this paragraph element, I'm going to make a new paragraph element, and I'm going to have it contain a props dot name value. I'm going to save this, and switching back to our dev tools, this is reset because we saved this file and made a change. So now I'm going to add another name prop and I'm going to give it the value of Ben, again. I'm going to hit enter, and we'll see that it shows up here now. So going to our props, I'm going to change the value, let's just delete the n, I'm going to hit enter. Great, and we see that the change has been immediately reflected up here once we changed it down here. Because the app currently has no state in our files, we do not currently see state in this section. If we want it to show up, we'll first need to initialize the component with some state from inside the files. I hope this video provided you with some familiarity with the React developer tools, and gave you some insight into how it can be used to help you when debugging react [inaudible]. Thank you for watching and I'll see you next time!