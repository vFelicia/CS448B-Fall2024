00:01 - in the previous part we covered singly
00:03 - linguished and now we are going to cover
00:06 - the blue linked list in Python so what's
00:10 - our doubly linked list uh doubly linked
00:12 - list is a linear data structure that
00:15 - consists of nodes where each node
00:17 - contains two pointers
00:20 - one pointing to the next node and the
00:22 - another pointing to the previous node
00:25 - structure allows traversal in both
00:27 - direction making it better
00:30 - prints in doubling English we have two
00:33 - pointers one is this one previous
00:36 - it's pointing to the previous node and
00:38 - this one is bonding to the next node
00:41 - this is our head part in as you can see
00:45 - in similar English we just have next
00:47 - filter
00:49 - but in W link list we have previous
00:51 - pointer also and
00:53 - by adding this previous pointer
00:56 - it allows us to Traverse the link list
00:59 - in both Direction since we can Traverse
01:01 - in the Left Right Manner and also in
01:04 - this
01:05 - right to left manner using this previous
01:08 - pointer
01:10 - here is an example of RW English from
01:14 - scalar this part is a part
01:19 - and this one is next pointer which is
01:22 - pointing to this node
01:23 - and in the next node we can see here we
01:27 - have the previous pointer which is
01:29 - pointing to the previous node
01:31 - and its data part and the pointer for
01:34 - the next node which is this one
01:38 - and
01:40 - next bundle of last node is pointing to
01:42 - the null so without wasting time let's
01:45 - get started recording part
01:48 - let's start first of all we have to
01:50 - create a new file you can reference this
01:54 - linked list only you list also for
01:57 - creating our adability so let me just
02:01 - selected
02:03 - Okay so
02:06 - NW link list famous
02:10 - we have to first
02:12 - create a class
02:14 - node
02:16 - and
02:20 - previous point also or just write simple
02:25 - vertical and assign it value To None
02:28 - initially
02:30 - okay after this we are going to create
02:33 - our WL English class I will just naming
02:38 - it D Link list
02:43 - inside our class
02:46 - we have to image
02:49 - Define an init method
02:53 - and pass the cell to head value
02:56 - will run initially
03:01 - okay now let's come to the functions as
03:05 - you can see here
03:07 - list we have inserted start
03:10 - so
03:12 - we can do the same for
03:14 - public English
03:16 - we can also create this for term in
03:19 - English
03:20 - let me just copy paste entire
03:24 - now what we did is first of all we
03:26 - created a new node and after that
03:28 - we are assigning the new nodes next to
03:32 - self loot head
03:34 - you know that self doot head is
03:37 - will point to the start of node and if
03:40 - we have to insert um
03:43 - node here
03:45 - like before it then what we can do is we
03:50 - have to assign the next of our new node
03:53 - to self.net which is the current number
03:56 - so our new node will be inserted here
03:59 - and it's next will be this one
04:04 - after that we can just do start dot
04:06 - radical you know
04:09 - prints us
04:11 - ask the head to the
04:14 - created node and
04:18 - also we have to check one more thing in
04:21 - case of w link please
04:23 - like
04:25 - if our self dot head is not none
04:31 - then what we have to do we also have to
04:35 - assign the previous pointer of our
04:38 - node which is present at head
04:42 - to point
04:43 - our newly created node
04:53 - since we have some node present here
04:56 - then we have to assign the previous
04:58 - pointer of that node which is this one
05:02 - to our newly created node which we
05:04 - created just now
05:06 - after that we have a function inserted
05:09 - and
05:10 - more legally linguished
05:13 - you can do the same for probably English
05:19 - okay so here what we are doing is we are
05:22 - just creating a new node and if our
05:25 - linked list is empty or head is at none
05:28 - then just set the head to new node and
05:32 - otherwise
05:34 - what we have to do is we are creating a
05:36 - temporary variable current head
05:38 - which self dot head value and
05:41 - we are iterating
05:45 - we are iterating through our linked list
05:47 - using this current and equal current
05:49 - head dot next until we reach the current
05:51 - hand dot next value equal to none wins
05:54 - until we reach the end of uh and last
05:57 - note of our link list
06:01 - so after reaching the last node what we
06:04 - are doing is we are just
06:06 - passing the current head dot next one to
06:09 - Value to newly created node and as it's
06:14 - we also have to
06:18 - select the previous pointer of our new
06:20 - node
06:22 - to this current head
06:25 - which is which is the last node
06:27 - initially let's see by example so if
06:30 - this was our last node and we are
06:33 - creating a new node at the end then we
06:38 - also have to
06:40 - assign the previous pointer of this node
06:43 - to the previously considered last node
06:47 - this will complete the linking for our
06:51 - doubling list
06:53 - and after
06:55 - what we what we did here is when we
06:59 - created a new node here and we have to
07:03 - pass the previous pointer of this new
07:06 - liquidity not to the last node that we
07:09 - considered earlier
07:12 - and after doing that this will complete
07:14 - the linking for our W link list
07:17 - after that we have insert after
07:21 - so operating insert after this Define
07:24 - insert after
07:25 - friends we need data and a previous
07:30 - node also why we needed this previous
07:33 - node because in doubling list
07:37 - let's say if I know the value of the
07:39 - previous node let's say I want to create
07:40 - a new node between these two nodes and
07:43 - if I know the previous node value then I
07:45 - can simply insert a new node here by
07:48 - just setting the next point of this
07:52 - linked list to our new node and the
07:55 - previous pointer for new liquidity node
07:57 - to this this previous node
08:00 - also if we have more values like if we
08:04 - have the next
08:06 - of this previous node not equal to none
08:10 - means we have some node after this
08:12 - previous node then we also have to set
08:15 - the previous of this next node to our
08:20 - newly created node so to do this first
08:23 - of all similar to the English link list
08:25 - you have to check whether the previous
08:28 - node is present
08:30 - or note in our linked list
08:33 - and if it's not then we are going to
08:35 - return from here itself otherwise we
08:38 - have to create a new node
08:40 - and
08:46 - after creating the new node we are
08:49 - setting the new nodes next to the
08:52 - previous node.net
08:57 - pass the previous node value here and
09:00 - after
09:02 - the new node after new noise new node is
09:05 - created we have to pass the new nodes
09:08 - next to this previous nodes next
09:11 - it should be previous
09:13 - new notes next pointing
09:16 - pointer is set to previous nodes next
09:20 - we'll see we are creating a memorial
09:23 - then it's this previous mods next which
09:27 - is 1004 in this case will be set to the
09:30 - next of nucleated node
09:32 - new node snap
09:33 - we will do this step later first of all
09:38 - what we have to do is we also have to
09:41 - assign the previous pointer
09:44 - of newly created node 2.
09:47 - the previous node
09:49 - and when it's done we have to check if
09:53 - the
09:54 - if there is a node
09:56 - after the previous note
10:00 - so we can check it by passing if
10:03 - previous mod.net
10:05 - we have to set the previous
10:09 - notes next
10:12 - dot Ram it's the
10:15 - this value
10:16 - this previous notes next
10:20 - dot preview we have to set this value to
10:23 - our new node
10:28 - after that we just have to
10:33 - set the previous nodes next
10:36 - to our newly created node
10:39 - so that's all for insertion and after
10:43 - so our insertion
10:46 - methods are complete now let's try to
10:49 - run them and to our linked list values
10:53 - so first of all
10:55 - just use this
10:57 - print function
10:59 - to print the values of our linked list
11:01 - let's create a new linked list I'm
11:03 - naming it as l
11:05 - feeling at least
11:07 - after that
11:10 - save it and run it
11:13 - so we can see that uh first of all we
11:16 - created a linked list and after doing
11:18 - inserted star start its
11:22 - creating a new node at this start and
11:25 - its value is 10 after that we are
11:28 - inserting at the end after that we are
11:31 - inserting after here we are inserting
11:34 - after the second node so this one is
11:37 - first second and after that we inserted
11:40 - our new node here then we are inserting
11:43 - it start 60 70 80 so 64 17 and
11:49 - uh and then we are inserting a t at end
11:53 - 30 minute time
11:55 - our methods are working fine
11:58 - till now
11:59 - let's add some more thoughts
12:03 - and also and usually as I told that we
12:07 - can
12:08 - reverse the link list in forward manner
12:11 - also and in backward manner also
12:13 - here in W linked list we can also create
12:17 - a method just name it
12:19 - and let's say print
12:22 - backward
12:29 - this method is going to print our
12:33 - notes value in Reverse manner means the
12:37 - last one will be printed first and fill
12:41 - the first node in this one pointer
12:47 - to do that
12:51 - we are similar to here we are
12:55 - eating a temporary variable whose values
12:58 - are self-ported so in case of w linked
13:01 - list or linked list you know that our
13:04 - head is always at start you know we
13:07 - can't just
13:09 - Traverse the linked list randomly so
13:12 - first of all we have to
13:14 - create a temporary variable forehead and
13:18 - we will
13:19 - have to reach the end of linked list
13:22 - initially and after that for printing we
13:26 - will be printing the data value one by
13:28 - one and we will be coming
13:31 - to the previous node and then print its
13:34 - data and so on until we reach this null
13:38 - value
13:39 - so this is the way how backward reversal
13:44 - is done in Wing list
13:49 - so the first step for traversing till
13:52 - the end will remain
13:55 - same
13:56 - so let me just copy and paste it down
13:59 - here and as we are not going to print
14:02 - anything while traversing from left to
14:05 - right or while reaching the last note
14:09 - so just cut this out
14:13 - after we reached the last node what we
14:16 - can do is just
14:19 - use while current and means while
14:22 - content is not none we just have to
14:25 - print our
14:27 - value for current heads data and just
14:33 - iterate backwards so in case of
14:36 - iterating in forward we are using the
14:39 - next pointer
14:40 - here you might have guessed that we have
14:43 - to use the previous pointer
14:46 - upload reversing backward and that's it
14:50 - for our
14:51 - great backward function let's try it out
14:54 - save it and run it
14:57 - oh it's showing none so what did I do
15:02 - wrong here
15:05 - oh okay I got it so here you can see
15:09 - they are
15:10 - checking if current head is not equal to
15:13 - none and if it's not let's say in the
15:16 - case of a last node we reached
15:19 - our current had reached the last node
15:21 - then we are we know that its value is
15:25 - not none so we will enter this while
15:27 - loop and we are setting our current
15:29 - thread value to the next so if it's our
15:32 - last plot then the current head value
15:34 - will be set to none and
15:37 - while we are checking current head so
15:39 - this Loop
15:41 - this while loop will not gonna run
15:47 - fix it we just have to say that while
15:50 - current dot next not equal to none
15:57 - and we also have to check whether the
15:59 - current head is planned on Terminal so
16:01 - just do while current ad and current Red
16:05 - Dot next or you can just say while
16:08 - current head and current head dot next
16:10 - since these two
16:12 - are known
16:15 - and if I save it and now run it
16:19 - okay yeah you can see that it's printing
16:22 - in backward first of all it's gonna
16:24 - print
16:25 - this last notes value
16:28 - then 40 20 10 60 70 and none
16:32 - so it's working perfectly now we are
16:35 - remaining with one more important
16:39 - method for Wing list which is the delete
16:42 - method so to delete
16:45 - similar to linked list we can delete the
16:49 - node by checking its key or its data
16:52 - value
16:53 - and
16:55 - we have to
16:57 - create a temporary variable for
16:59 - self.that after creating this temporary
17:02 - variable we have to check if the current
17:05 - hand Dot
17:07 - data is equal to the key which you want
17:10 - to delete then but since we found the
17:15 - nodes that we want to delete by checking
17:18 - its key now for deleting what we have to
17:21 - do is first of all we will be chatting
17:23 - that whether this current
17:26 - Lord is having any previous value node
17:30 - also so if we in current and Dot
17:32 - previous
17:34 - why we are doing it
17:36 - let's say we want to delete this node so
17:39 - how we can relate it
17:41 - we will be assigning this next founder
17:44 - of this previous node to the next node
17:49 - which is this one
17:50 - so we will be setting this next pointer
17:53 - of this previous node to this next node
17:56 - and the previous
17:58 - Wonder of this next node to this
18:01 - previous node so our new linked list
18:04 - will have only these nodes this one this
18:07 - one and this one
18:09 - so if we have a previous slope we are
18:13 - just passing the previous mode
18:16 - next pointer value to
18:21 - value as
18:24 - the current cats next
18:28 - so we don't have a previous note or
18:33 - it's
18:34 - previous value is none
18:36 - then then just
18:39 - assign the self pad to
18:42 - current threads dot next
18:46 - why we did this one because let's say we
18:49 - are going to
18:51 - delete this first node uh starting node
18:56 - then we don't have any
18:58 - previous node for this node and if we
19:02 - want to delete this one then we have to
19:04 - pass this head value to here so our link
19:08 - list will be starting from here
19:10 - that's what we did with this line and
19:14 - this is for previous node apps similarly
19:17 - we have to check whether our current
19:20 - head has a next node also if that's true
19:22 - then we have to pass the previous
19:26 - monitor of current threads
19:28 - next not to
19:30 - parent notes previous value
19:36 - after that we can just
19:38 - and
19:47 - just return from here currently its data
19:51 - value is not equal to key then just
19:53 - increase the current head or assigned to
20:00 - next
20:03 - that's straight for brilliant method
20:06 - let's try it out so just remove delete
20:10 - and let's say I want to delete this pen
20:14 - Delta value
20:16 - let's do it
20:20 - and then
20:21 - print the linked list
20:26 - after running you can see that
20:30 - this node with 10 value or deleted from
20:33 - a link list
20:34 - we can also check if the data of the
20:38 - node which we want to delete is not
20:40 - present in our linked list then we can
20:44 - just
20:45 - see
20:49 - that
20:51 - and
20:52 - that's also let's try this one also
20:57 - just pass some random value which is not
21:00 - present in the in English I'm passing
21:03 - 100
21:05 - and trying to delete it
21:09 - okay so it's same
21:11 - that node with the data key you give is
21:14 - no fun
21:15 - and it's just
21:17 - ending the link list here so
21:21 - let's
21:22 - all for the W link list
21:25 - we had already covered the main
21:27 - functions for w linked list
21:30 - you can also try other functions like
21:34 - taking the length of the linked list and
21:37 - checking if it's empty or not or some
21:39 - other functions
21:41 - so that's it for this video I hope you
21:44 - learned
21:45 - the concept of doubly linked list and
21:48 - if you like the video please give it a
21:50 - like And subscribe to the channel
21:53 - to put your doubts in the comment box