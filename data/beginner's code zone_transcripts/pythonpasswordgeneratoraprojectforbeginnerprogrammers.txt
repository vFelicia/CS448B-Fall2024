00:00 - foreign
00:02 - [Music]
00:12 - that will generate randomly strong
00:15 - passwords so basically it's a strong
00:19 - password generator program and here I
00:23 - have already created an file
00:28 - in which we are going to write our
00:30 - program so in order a password to be
00:34 - strong it must follow
00:36 - two criterias first one is that it must
00:40 - contain at least a character from digit
00:44 - from lowercase from upper case letter
00:47 - and from symbols and second condition is
00:51 - that it must have a larger length so
00:56 - these two conditions must be followed by
00:58 - a password for it to be a strong
01:01 - password to create a program which will
01:03 - generate a strong password first of all
01:06 - we need to get all these
01:10 - characters in this category and
01:15 - to do so we can either create a list of
01:19 - all digits manually like
01:23 - creating a list
01:25 - containing all the
01:29 - digits in string form and similarly for
01:34 - lowercase letter and uppercase letter
01:36 - and symbols but this process is a bit
01:41 - time consuming so instead of doing this
01:44 - we can use a model named string to
01:47 - import string model use import string
01:52 - and now inside
01:54 - our digit variable we can just use
01:57 - string model
01:59 - and its digits function now this will
02:02 - create a string name digit containing
02:05 - all the
02:06 - digits
02:08 - 0 to 9. let's have a look
02:12 - on it
02:16 - yeah here we can see digits give us a
02:19 - string containing all the digits from 0
02:22 - to
02:22 - 9 so for now let's remove it and
02:29 - create string of lowercase letters name
02:33 - it lower case
02:35 - and
02:37 - we have a method name as Sky lower case
02:41 - for getting all the lower case strings
02:44 - and similar to this we have
02:50 - a method upper sky for
02:54 - getting all the
02:57 - characters of uppercase letters
03:01 - now to use symbols
03:04 - just use string Dot and penetration is
03:08 - the method name for letting all the
03:10 - symbols
03:13 - till now what we have done is imported
03:16 - string model and with the help of string
03:18 - module we have
03:20 - stored all the digits value in digit
03:23 - variable and all the
03:25 - lower case letters in this lower case
03:28 - variable and so on for uppercase and
03:32 - symbols and
03:34 - no
03:36 - before generating a password let's
03:39 - create a temporary password uh
03:42 - I'm giving it a name of temp
03:45 - now this is an empty
03:48 - string variable and so
03:51 - our first condition for a strong
03:54 - password was that it must contain at
03:56 - least one character from all of these
03:59 - to follow this condition we will
04:01 - manually just
04:04 - add or concatenate any one character
04:08 - from
04:10 - all of this and
04:14 - to choosing a random character you can
04:17 - use a random module
04:21 - to use random model we first need to
04:23 - import it now we have a
04:28 - method name choice in random model
04:32 - which will choose any single character
04:34 - from our given variable so here our
04:39 - variable name is digit now what this
04:43 - line will do is it will add a random
04:46 - digit from 0 to 9 to our temporary
04:48 - password so
04:51 - we need to do it for all these remaining
04:54 - three also
04:55 - let me just copy and paste it
04:59 - change it for to lowercase for adding a
05:02 - lowercase letter and uppercase
05:05 - and lastly we have symbols
05:08 - so now we have created a temporary
05:11 - password named temp of length 4
05:14 - containing uh one character from all of
05:18 - these
05:21 - no so our first criteria for password is
05:25 - fulfilled uh it must have a larger
05:28 - length so to get length let's ask the
05:32 - landform user and store it in a variable
05:36 - name length to ask it from user we will
05:39 - just use it input and enter the message
05:43 - you want to show
05:45 - here just write enter the password
05:51 - length now user will give us a length
05:56 - for password which
05:58 - he or she required and
06:04 - now we can see here our password must at
06:08 - least contain a length of 4 to fulfill
06:11 - our first condition if a user gives a
06:14 - length lesser than 4 then we will
06:18 - give it
06:20 - some message like please enter the
06:23 - length of greater than or equal to 4 so
06:27 - to check that we can use if else
06:29 - statement and if length less than 4 then
06:34 - just simply show a message that
06:38 - length must be greater
06:42 - than or
06:44 - equal to 4.
06:49 - and
06:51 - if length is great already greater than
06:53 - or equal to 4 then
06:55 - we will just give the user
06:59 - randomly generated strong password to
07:02 - add more
07:04 - characters in our password we can use
07:07 - for Loop
07:08 - for I in range and
07:12 - length minus
07:16 - 4. we are subtracting 4 from total
07:19 - length because we are already taken uh
07:22 - four characters in our temporary
07:24 - password we just need to add remaining
07:27 - ones to our password so to add more
07:31 - characters in our password we can now
07:34 - use
07:36 - a choice from any of these
07:39 - strings
07:42 - so let's just create a variable which
07:45 - contains all of these characters
07:48 - and name it I'm naming it total and
07:52 - for a combination I'm just adding
08:00 - all these string variables into a single
08:07 - variable now total
08:10 - contains this total variable contains
08:15 - all the string containing digits
08:18 - lowercase letter up against letter and
08:20 - symbol
08:21 - now to increase the length of our
08:23 - password I'll just randomly choose one
08:26 - character so to lose it just
08:32 - add a random
08:36 - factor from
08:39 - total variable this will generate a
08:41 - temporary string
08:43 - of password
08:45 - for given length now
08:48 - we can see here that every time we run
08:52 - this code our password will contain its
08:55 - first character as a digit and then a
08:58 - lowercase and so on we don't want it
09:02 - to generate a password in this defined
09:05 - manner so what we can do is we can
09:08 - Shuffle the character since from our
09:10 - temporary password and then generate our
09:13 - main password from it and for shuffling
09:16 - first of all we need to convert this
09:19 - temporary string variable into a list
09:23 - and
09:25 - so this will convert our temperatures
09:28 - three string variable into a list and
09:32 - now we can apply
09:34 - a random shuffle method
09:37 - on temp and now our temp will contain
09:41 - shuffled characters so there will be no
09:44 - predefined manner for our password and
09:50 - to convert this shuffled list of
09:53 - characters into our main password we can
09:57 - just
10:00 - create a
10:03 - empty string variable password and
10:05 - add
10:07 - every cutter of our temp
10:10 - to password
10:14 - now we have got a password string
10:17 - containing our required strong password
10:20 - and we can simply print it
10:26 - to show our generated password so that's
10:29 - it
10:31 - for our program now
10:34 - so let's run it
10:37 - it's asking for a length I'm giving it a
10:40 - length of 10 so it generates me a
10:43 - password of 10 characters let's see one
10:48 - two three four five six seven eight nine
10:51 - ten and now check whether it following
10:54 - our criteria for strong password so it
10:57 - contains at least one digit it contains
11:00 - a lowercase letter and uppercase letter
11:02 - and at least a symbol so first condition
11:06 - is fulfilled and it also have a
11:11 - length
11:12 - greater than equal to 4 so
11:16 - this program is working fine now let me
11:18 - check for uh length
11:21 - lesser than 4 so it gives us a message
11:24 - that length must be greater than or
11:26 - equal to four so
11:29 - we can see it's working just fine let's
11:32 - try to generate some more
11:35 - passwords
11:38 - of some random length and we can see
11:40 - it's working just fine and giving us
11:43 - some very strong randomly generated
11:45 - password
11:47 - which are not in predefined manner also
11:49 - like here first letter is capital here
11:52 - it's slower here it's symbol so yeah
11:56 - that's it for our program it's working
11:59 - fine now let me give you
12:02 - um
12:03 - quick summary about
12:06 - what we have done so far
12:09 - so first of all we imported a string
12:12 - model and a random model and
12:14 - we use this string model to generate a
12:17 - string variables containing all digits
12:20 - or lowercase letters uppercase letters
12:22 - and symbols using this these string
12:25 - Methods and after that here we have
12:28 - generated our total named variable which
12:32 - contains all the characters of these
12:35 - digits login
12:36 - and symbols after that
12:40 - we have created a temporary string
12:43 - variable which is empty initially and
12:47 - now to fulfill our first condition of
12:50 - containing at least one character from
12:52 - all of these we have manually
12:55 - added one character from all of this you
12:58 - with the help of choice method from
13:01 - random model and
13:04 - here our length of temporary password
13:06 - has already become 4 and now we are
13:10 - asking the user to give us a length for
13:14 - password and now after that we are
13:17 - checking whether the length is less than
13:20 - 4 or greater and equal
13:23 - so if user gives us a length less than
13:26 - four then we'll just simply tell the
13:29 - user that length must be greater than or
13:31 - equal to 4.
13:34 - and if it is greater than or equal to 4
13:38 - then we will just simply
13:41 - work on our password
13:43 - and
13:46 - we have already added four characters in
13:49 - our temporary password so the remaining
13:52 - length
13:54 - of past characters will be added into
13:57 - our temporary variable using this for
14:00 - Loop and now our choice will be from
14:04 - this list containing all of these
14:07 - character not from just single string
14:17 - so after creating a temporary password
14:19 - which is equal to the given length
14:24 - first of all we created a list from our
14:27 - password
14:28 - and after that we shuffled our password
14:31 - and to store
14:34 - it in a string we have created a
14:37 - password string variable and we have
14:39 - added every character of stamp in our
14:43 - password string and after that we just
14:46 - printed the
14:47 - password
14:49 - so this was everything about our program
14:53 - for generating strong passwords now I
14:57 - hope you
14:59 - understood it and do comments if you
15:03 - have any doubts in the comment section
15:05 - and please like And subscribe to my
15:09 - channel thank you