00:00 - hello in this video we are going to
00:02 - learn about an important data structure
00:04 - in Python named later place so
00:08 - it is a linked list a link list is a
00:10 - fundamental data structure in computer
00:12 - science that consists of a sequence of
00:14 - elements or nodes where each node points
00:18 - to the next node in the sequence these
00:21 - boxes represents a node where this front
00:24 - bar first part of a node is called Data
00:27 - part and
00:29 - the other part is for next pointer which
00:33 - points to the next node in the linked
00:37 - list
00:40 - and the end of a link responds to null
00:43 - pointer
00:45 - so what's the difference between arrays
00:48 - and Link list
00:49 - so you can see this is the
00:51 - representation for an array and this one
00:54 - is for Linked list where
00:56 - this is head or you can say start
00:59 - pointer which tells us where the link
01:02 - list starts so in this case it's
01:05 - starting from address 103
01:08 - and these are the addresses for other
01:11 - nodes in linked list so
01:14 - let's see the main differences between
01:16 - them
01:18 - on the basis of memory allocation
01:20 - you can see arrays uses contiguous
01:23 - memory allocation and linked list known
01:25 - continuous so what's continuous memory
01:27 - allocation
01:29 - here you can see that the first address
01:32 - for this
01:34 - array is 200 and the next value is
01:39 - stored at address 204 and then similarly
01:42 - to 0 8 and 212. the gap of 4 bytes for
01:47 - this store in this data value this is
01:50 - continuous here in linked list our first
01:53 - node is presented this address 103 and
01:56 - the next node is presented address 2000
01:59 - so it's a huge black so it's not
02:02 - necessary that you have to directly
02:05 - allocate the next node after this
02:07 - address pointer or to the next address
02:10 - window you can allocate it anyway but
02:12 - you have to make sure that you are
02:14 - storing the address of the next node in
02:17 - the next pointer of the previous node
02:19 - like here
02:21 - the data this data 35 is stored and this
02:25 - data pointer of this node and then next
02:28 - notes address is stored in its next
02:30 - pointer which is Thousand Years
02:32 - similarly for this address
02:34 - is storing it in this next folder and
02:37 - this one here and at last we have none
02:41 - which represents that this is the end of
02:44 - name list
02:46 - so as you can see these address
02:49 - locations are not continuous means in
02:52 - our memory we might have a location uh
02:57 - 3004 and we might have stored something
03:00 - else there so it's not necessary that we
03:02 - have to allocate the memory locations
03:04 - contagious in English but it's mandatory
03:08 - in arrays
03:09 - now coming to the next difference bits
03:12 - for size so arrays have fixed size but
03:15 - little List have a dynamic size
03:18 - means let's say in this example
03:21 - um
03:21 - we have the size of we have four
03:24 - elements so its size is four so while
03:26 - creating this array we have to initially
03:29 - tell that our array is going to be of
03:31 - sized phone but it's not necessary in
03:33 - English as you can see we just need the
03:38 - next pointer so you can choose any
03:41 - random location and then add it to your
03:44 - linked list so there's no need to have a
03:47 - fixed size for Linked list now the next
03:50 - difference is
03:51 - the time complexity for Random Access so
03:54 - arrays has arrays have faster Random
03:57 - Access its time complexity is bigger of
04:00 - 1 whereas the linear starts low
04:03 - its time complexity is Big of n
04:07 - let's say you want to access this
04:09 - element then in arrays we just need its
04:12 - index it's it's present it is present at
04:15 - index number two zero one and two so we
04:19 - can directly access it from here but if
04:20 - we want to access let's say in linked
04:23 - list then we have to first go iterate
04:27 - through each node and then check whether
04:29 - the element is present or node so
04:33 - this
04:34 - its average time complexity is we go and
04:38 - after that insertion and deletion so
04:41 - arrays insertion and deletion is slow it
04:44 - take big of end time and English takes
04:47 - only we go one time so
04:50 - when you want to let's say add a element
04:54 - to array
04:55 - let's say at the beginning then you have
04:58 - to shift all the elements after it when
05:02 - at plus one index means shift them
05:05 - towards right so it's taking it's gonna
05:08 - take we both end time for each
05:12 - average insertion and similarly for
05:15 - deletion you will have to let's see if
05:17 - you want to delete this element then you
05:19 - have to shoot the others
05:22 - words left so that's why it's consumed
05:25 - time but in linked list we if you wanna
05:28 - insert a new element anywhere then you
05:31 - can you just have to change the next
05:33 - pointer of one or two notes and
05:37 - similarly for deletion you just have to
05:40 - let's say you want to delete this
05:42 - element
05:43 - we want to delete this node then just
05:45 - allocate the next pointer of this load
05:49 - do this one means you will store this
05:52 - 3000 value at its next window and this
05:55 - node will be deleted
05:57 - so you don't have to pick any of this or
06:01 - other nodes of Link list will be kept
06:04 - unchanged
06:06 - after that iteration in Array it's fast
06:09 - but it's slow
06:11 - and memory head overhead is higher in
06:16 - arrays but it's lower in linked list and
06:19 - these are the use cases so if you want
06:22 - to create a user data structure
06:25 - where you can access elements faster
06:28 - then you should use arrays but if you
06:30 - want a dynamic but if you want to enter
06:33 - the structure with Dynamic data
06:36 - elevation and with frequent insertions
06:39 - and deletions then you must use linked
06:41 - list
06:42 - so that's the theoretical part for
06:45 - Linked list now let's see its
06:47 - implementation in Python
06:51 - for Linked list we require nodes so
06:54 - first of all we are going to create a
06:56 - nodes node class
06:59 - in the node class we have to define the
07:02 - function
07:04 - for the initialization of node
07:08 - and pass the self and
07:11 - data parameter here
07:15 - though a node consists of a data part
07:18 - and a next
07:21 - next node address in case of simple
07:24 - linked list so here we have to note
07:27 - so here we have to assign our data and
07:30 - the next node address
07:32 - to assign the data we will use self.data
07:35 - is equal to data
07:39 - and the next
07:41 - will be set to none initially
07:45 - what this will do when whenever we are
07:48 - we want to use this node class we have
07:51 - to pass this data parameter for
07:53 - initialization and this data will be
07:56 - assigned to this self took data
08:00 - and then so for next node is will be set
08:03 - to none initially
08:07 - so this was for node class
08:10 - now we'll create our LinkedIn linked
08:12 - list class so to do that
08:16 - simply write class then give the name
08:19 - for class in this case linked list
08:23 - after that
08:27 - similar to this node
08:30 - we have to pass a
08:32 - Phoenix method here
08:35 - because the parameter self and
08:39 - in case of linked list initially when a
08:42 - linked list is called then we have to
08:45 - create a self-drot head and
08:49 - initially its value will be set to none
08:52 - so this is the code for doing that
08:56 - and if you are getting confused with
08:59 - this class and these methods then I
09:01 - would recommend you to learn the oops
09:05 - concepts of python and then you want to
09:09 - be getting confused in this so now our
09:14 - initialization method is defined here
09:17 - after that in our linked list class
09:20 - we have to add methods that we use like
09:24 - insertion methods deletion and method to
09:28 - print our linked list so we will be
09:30 - adding them one by one first of all
09:32 - let's start with insertion and insertion
09:35 - can also be done in many ways like we
09:38 - can insert the new node
09:42 - at the beginning of the
09:44 - linked list so it's insertion at start
09:47 - similarly we can do at the end or we can
09:50 - do it in Middle also so first of all
09:54 - let's create a method for inserting a
09:57 - node at start of linked list for that we
10:00 - have to define a method
10:01 - and give it a name I'm saying insert at
10:06 - start
10:07 - after that we have to pass the self
10:11 - parameter and for insertion at starting
10:16 - we require the data for our node so data
10:21 - is a must parameter here
10:24 - and so initially what we have is we have
10:28 - uh right at none
10:31 - so
10:34 - what we have to do is we have to create
10:38 - a node
10:40 - and
10:43 - then assign its next
10:46 - to none
10:48 - and set our head to this node
10:55 - this will be the case whenever linked
10:57 - list is empty or none
10:59 - if our linked list has other nodes Also
11:02 - let's say like this one node one
11:06 - and no two
11:11 - and then and let's say if our link this
11:15 - link List look like this so
11:20 - what we can do is we have to create a
11:23 - new node and
11:25 - insert it at this start so this is start
11:28 - or you can also say it ahead so to do
11:31 - this we will create a new node first and
11:33 - after creating that note
11:39 - we are going to assign
11:43 - the next of this new node as this node
11:46 - one which was the start node initially
11:49 - where the start was initially and
11:53 - to implement this functionality what we
11:56 - will be doing is the first step is to
11:59 - create a new node and to create a new
12:02 - node
12:03 - let's give it some name and it's a new
12:05 - node and
12:07 - we will be
12:11 - using this node class and for this data
12:14 - we are going to pass this data parameter
12:18 - so what this line will do is it will
12:20 - create a new node
12:22 - with the data which we passed to this
12:25 - method and it will assign this data here
12:28 - to this let's do data and our self dot
12:32 - next will be set to none initially we
12:35 - can change it also
12:36 - now our new node is created
12:39 - after that we have to link this new node
12:41 - to this linked list
12:43 - so
12:45 - we can do this by setting the next
12:49 - by assigning the next of this node
12:54 - to this node so for doing this
12:58 - what we are going to do we are assigning
13:01 - the
13:02 - new nodes next
13:06 - to the head so initially head you can
13:09 - say it had or start initially head was
13:12 - at this node so we have the address of
13:15 - this node in our inside our head so
13:19 - I can pass the
13:22 - cell phone
13:24 - add here we also have to assign the head
13:28 - to this newly created node so that our
13:31 - head will be at this one starting let's
13:33 - start so to do this we can simply write
13:36 - self don't help is equal to this new
13:39 - move so
13:41 - let's try running our program first of
13:45 - all we have to initialize this class so
13:48 - I'm creating a variable l
13:51 - and now this L is a linked list so let's
13:55 - try inserting first
13:58 - L doubt insert the start and give some
14:01 - data for over node let's say 15 and if I
14:04 - run it then
14:07 - it is not showing any errors means
14:09 - everything is working fine
14:15 - and if I try printing this link list
14:18 - then it's showing main link list object
14:21 - at this
14:23 - address and to see the content of our
14:27 - linked list we can create a new function
14:32 - let's say activate
14:34 - and pass this self
14:37 - here
14:39 - we don't need this data parameter here
14:41 - is we are already
14:43 - having the contents of our link list
14:47 - so we just have to print them and to
14:50 - print the content of our English what we
14:53 - can do is create a temporary variable
14:58 - let's say 10 or just say uh
15:02 - current head
15:05 - give the self to
15:09 - add value with this current head now our
15:12 - current head is present at this start or
15:17 - this cell Dot
15:18 - add of our link list and number four
15:23 - getting the data of all these nodes we
15:27 - have to iterate one by one until we
15:30 - reach this none value so what we can do
15:33 - is just simply say while current head is
15:38 - not equal to none
15:43 - simply print
15:45 - the current head
15:47 - dot data
15:49 - and
15:51 - after building the data let's say now
15:53 - initially granted is it starting the
15:55 - data for this node is printed now we
15:58 - have to go to next node so for going to
16:01 - next node we can just say current head
16:05 - is equal to
16:07 - current thread dot next so it will keep
16:10 - moving to the next node for the next
16:13 - address
16:14 - let's use this print method of our
16:17 - linked list so just write l dot
16:20 - ring
16:22 - and let's see
16:24 - okay so it's showing the plus 15 so this
16:28 - is the content of our node as
16:31 - we have only created a single node here
16:34 - it's showing the content of this let's
16:36 - try creating some more
16:40 - notes and give them some random values
16:47 - now let's print it
16:49 - okay so it's printing the values
16:53 - correctly we we are inserting 15 at
16:56 - start so
16:59 - first of all 15 go to
17:02 - inserted at start then 785 comes at
17:05 - start not then 255 and after that after
17:09 - this last command 55 got
17:15 - so it's
17:16 - insertion at start is working perfectly
17:20 - and our print function is also showing
17:22 - the contents correctly now just for
17:26 - better view we can write this
17:32 - so this will insert
17:36 - this string in between
17:40 - these node values so it will be easier
17:42 - to
17:44 - see the outputs and also we can just
17:46 - print none at the end of string
17:53 - yes it's now more clearly visible so we
17:57 - have created these two basic methods for
17:59 - the linked list now after that
18:02 - we can try out more methods like
18:05 - insertion insert at the end of linked
18:09 - list so that the order will be like this
18:12 - one 15 then 75 to 555 not this one in
18:17 - Reverse so to do that
18:20 - let's create a new method
18:22 - give it a name I'm giving insert at end
18:28 - and
18:29 - as we are going to insert it and so we
18:32 - already know the position
18:34 - where our download is going to be added
18:38 - we just need the data for creating our
18:40 - node
18:42 - and just like we created a new note here
18:46 - we are going to create a new node for
18:48 - inserting at the end
18:50 - and now as we are going to insert at the
18:54 - end
18:56 - we have to check
18:58 - if this linked list is empty then we
19:01 - just have to create a new node and
19:04 - assign it
19:06 - as the head so we'll check that we can
19:11 - write if self dot had
19:14 - is equals to none
19:18 - then
19:19 - simply say
19:21 - self door head equal to you know it
19:25 - means head is at
19:27 - this new node and
19:30 - we don't have to assign the none for
19:33 - next because calculating the new node we
19:36 - are already assigning it it's next to
19:38 - none so we don't have to change anything
19:41 - here
19:42 - after that if that's not the case then
19:45 - else condition
19:47 - so our head is not none means it's a
19:49 - linguished containing some nodes like
19:52 - this one and here what we have to do is
19:55 - we have to
19:57 - insert our node in between this none and
20:02 - this last node today this first of all
20:04 - we can create a temporary variable
20:07 - current
20:09 - head and assign that float head to this
20:13 - variable and what we can do is we will
20:17 - just uh initially our head will be at
20:19 - this location so we will iterate one by
20:23 - one until the next of our current node
20:26 - is not none so if we reached this last
20:30 - node then when we perform current head
20:33 - dot next then its value would be equal
20:35 - to 1 so we'll get to know that
20:40 - this is the location where we will be
20:43 - inserting our new node and to do this we
20:47 - can simply write while current add dot
20:49 - next
20:52 - not equal to
20:54 - none
20:57 - we will just keep assigning our current
21:00 - hat to the next location
21:09 - and after the record current and Dot
21:12 - next is equal to none you can just
21:16 - assign the next of this node to our new
21:19 - newly created node like this one current
21:22 - head rope neck
21:26 - would be equal to
21:28 - new node
21:30 - so the next of this node will be
21:32 - pointing to our newly created node
21:36 - and the new node will be
21:39 - pointing to this none as we initialized
21:43 - it here
21:44 - so this will do the task for us let's
21:48 - first try
21:50 - Force this function let's say insert
21:54 - that hand and I am inserting some random
21:57 - values
22:03 - and now
22:05 - into the data for Linked list when I run
22:08 - it
22:10 - okay so this was for our inserted start
22:13 - and
22:15 - this one is same fill
22:18 - here and after that when I perform
22:20 - insert at end and add it to 30 so
22:24 - it added 230 after this last node and
22:28 - before this none and after and similarly
22:32 - with this commands it's it keep adding
22:36 - the new nodes at the end of the link
22:38 - list and the last node is pointing to
22:41 - none so this is working perfectly
22:46 - after that we also have a one more basic
22:50 - function
22:52 - for Linked list that is deletion of the
22:56 - notes so to delete we also we have some
23:00 - other ways like we can delete the notes
23:05 - by its key value or its data so like
23:08 - let's say this node has 255 data and I
23:13 - want to delete the node with this 255
23:15 - value and
23:18 - we can also delete the nodes based on
23:21 - the position like the index like the
23:24 - index of the known
23:27 - just like in this example in this link
23:31 - list this one is at index 0 index one so
23:34 - if you want to delete the this one this
23:37 - node I can just delete it by passing its
23:41 - index that is one so first of all we are
23:44 - going to create
23:45 - a method
23:47 - which deletes the nodes based on the
23:51 - data of node so to do that just Define a
23:55 - method
23:57 - I'm naming let us delete
24:01 - node
24:03 - pass this self and we are going to
24:06 - delete on based off data so we need data
24:09 - parameter here
24:11 - and
24:13 - to delete nodes in linguished what we
24:16 - how are we linking these notes so we are
24:19 - linking these nodes based on the next
24:22 - value of these nodes so this node one is
24:26 - linked to this node too because the
24:30 - address the next
24:32 - of this node is pointing to
24:35 - this node and let's say I want to remove
24:38 - this Node 1 from here so what I can do
24:41 - is I can just
24:43 - assign the next of the
24:46 - previous node in this case this one two
24:51 - its next node which is this one so I can
24:54 - just assign the new node.next to
24:58 - so this node one will be removed and
25:01 - this will be pointing towards is not so
25:04 - let's use this concept and just assign a
25:07 - temporary variable
25:09 - this
25:11 - is
25:12 - not had so deletion also uh we might
25:17 - encounter a case where our linked list
25:20 - is none for that we will just write if
25:24 - current head so if current had what this
25:29 - objects is whether
25:31 - this value is not assigned to none so if
25:36 - that's the case
25:37 - and
25:39 - our current head dot data matches
25:44 - this data let's say it's uh
25:48 - so that you don't get confused so this
25:52 - e is the data which we are going to
25:55 - delete so
25:57 - if the that of node is equal to
26:00 - this key then what we have to do is
26:05 - simply set the self Dot
26:07 - add
26:12 - to the current head
26:15 - dot next
26:19 - sorry sport
26:21 - eight at first note
26:26 - so our start is our head is this at this
26:30 - first node and the data of this node
26:32 - matches our key so what we have to do is
26:35 - we have to now assign This Thread to the
26:39 - next of this node which is none in this
26:43 - case so
26:44 - this is the
26:47 - code for doing that
26:49 - after that hit the key or the data to be
26:52 - deleted is presented some other notes
26:55 - rather than the first one or it's not
26:58 - present
26:59 - in the link list then for that we have
27:02 - to
27:03 - titrate through all the
27:05 - nodes we can use this
27:08 - current head
27:10 - so data is not equal to the key
27:13 - and our current add
27:17 - is not equal to none
27:21 - so if that's the case we will be just
27:23 - incrementing
27:27 - or we will be just iterating through the
27:29 - nodes
27:31 - by going to the next mode one by one and
27:35 - we I missed one more thing that
27:41 - while in the case of a link list having
27:44 - multiple nodes when we are
27:47 - deleting a note let's say we are
27:49 - deleting this this node so we also have
27:53 - to keep note of the previous node and
27:57 - for previous notes
28:00 - we will be just keep
28:03 - storing the previous node in this
28:06 - variable for the pre node
28:10 - and pass the current thread here
28:13 - so when I first go to this node when
28:17 - current head is at this node
28:19 - our previous node value
28:22 - is equal to this node and now I
28:25 - incremented our current head to its next
28:29 - the current head got here and previous
28:31 - node values still this one and if our
28:35 - e
28:36 - matches this notion data which is this
28:39 - case so we have the previous node value
28:42 - as this one and we also have the current
28:45 - head we just have to
28:48 - uh take the next of this previous node
28:52 - to the next stop this current heads node
28:56 - which we want to delete so this will
28:59 - just do
29:01 - this thing so the node between them will
29:04 - be deleted so this will be directly
29:07 - linked to this node
29:10 - okay after all the traversing
29:13 - first of all we have to get one
29:16 - I forgot to assign this previous node
29:20 - here so first just assign it
29:25 - send it snap value
29:27 - we will be checking if our current head
29:31 - is none
29:34 - means after iterating we reached this
29:37 - none so means the key which we are
29:40 - finding which we want to delete
29:42 - this is not present at any of these
29:45 - nodes so we can just simply say written
29:49 - or say something like the
29:51 - key or the data you want to delete this
29:55 - account at any node
29:58 - and otherwise if that's not the case
30:00 - then what we have to do is
30:03 - that our previous nodes
30:05 - next value to
30:08 - the next of our current head
30:16 - and also
30:20 - make our current
30:22 - head or current node
30:26 - equal to none and we are doing this step
30:29 - because our deletion is already
30:32 - completed here and we are doing this
30:34 - step so that the base used by this node
30:40 - will we get
30:42 - everything
30:43 - so the data present here at this node
30:46 - will also get deleted
30:49 - so this is all we have to do for
30:53 - deletion now let's try it out
30:56 - let's say I want to delete
31:00 - the node having data is equal to 255 and
31:04 - after that
31:06 - printing our linked list
31:09 - running it
31:11 - okay so this also linked list and after
31:14 - I perform the delete operator operation
31:17 - you can see this node having 255 data
31:21 - got deleted
31:23 - so it's working perfectly
31:27 - you can try them out and also
31:32 - I'm not going to
31:34 - explain other methods you can try them
31:37 - out on your own
31:40 - like delete in the node
31:54 - you can also perform tasks like deleting
31:57 - the node based on the position or index
32:00 - for that you will first get a index
32:03 - value
32:04 - from user
32:06 - let's say index number one two three
32:09 - like this and
32:12 - didn't just keep iterating
32:15 - to our nodes until we will also be
32:19 - keeping a counter like
32:23 - increment will increment it each time we
32:26 - iterate through a node and when the
32:29 - counter
32:32 - then the count variable matches the
32:34 - index of the node to be deleted then we
32:38 - will simply perform this delete action
32:40 - so we will be giving
32:44 - note of this previous node for that case
32:46 - also for donating so you should try you
32:51 - can try it out on your own and ask your
32:55 - doubts if you have any
32:58 - so that's all for this video I guess
33:02 - of it with
33:04 - uh I missed one more
33:09 - let me
33:11 - also teach you how to insert at Mid or
33:16 - insert a specific position that's also
33:18 - an important function so let's say
33:20 - insert
33:22 - together
33:25 - means we have some English with some
33:28 - notes and we want to
33:31 - add a new node in between this node of
33:35 - English for doing that we must know the
33:38 - previous notes
33:40 - address and
33:43 - for assigning creating a new node we
33:45 - need data
33:47 - just pass the parameters here
33:50 - previous node which will be stored in
33:52 - the address for previous mode and after
33:54 - previous node after which data our new
33:57 - node has to be inserted and the data for
34:00 - creating new node so similarly for
34:03 - creating new not just
34:05 - use this
34:06 - and before that I'll say for this
34:09 - function we are going to insert the node
34:11 - after some already created node in the
34:14 - link list we must check if there is a
34:17 - node present or not in all English to do
34:21 - that we can just simply check if
34:23 - previous node
34:25 - is none
34:27 - now this is check if our linked list if
34:31 - the previous node value is equal to none
34:34 - and if it's equal to none then we can
34:36 - just show some message like
34:39 - this the previous node is not valid or
34:43 - something like that
34:48 - and we can just return from there
34:51 - no need to create a new node
34:55 - and if that's not the case then
34:58 - we have
35:00 - to create a new node
35:02 - just
35:04 - be done next
35:07 - of the new node let's say I am I want to
35:10 - insert a node name Node 1 here
35:13 - to do this I already know the address of
35:19 - previous node but to add this node to
35:22 - link this linked list I also have to
35:26 - assign the next of this node new liquid
35:29 - edit node
35:32 - to this node you can get this node's
35:35 - address
35:36 - from this node so this node is stored at
35:39 - the next of this one so I can simply
35:42 - assign the next of this node
35:48 - as an actual this notes the new nodes
35:50 - next will be equal to the previous nodes
35:53 - next
35:55 - and we also have to create
35:57 - this link here between these previous
36:00 - node and new nodes so to do that we just
36:03 - have to assign this node
36:06 - to this nodes next so this is one is
36:10 - previous node so just do previous notes
36:13 - next
36:15 - is equal to new node and that's it and
36:18 - let me show you an example
36:21 - let's say I want to insert that node
36:24 - after
36:26 - this node so I can just
36:30 - something like that
36:32 - and don't insert after
36:35 - and pass the previous node
36:38 - which is this one in our case
36:41 - and it set the head is right now here so
36:44 - it's at head dot next you can access it
36:48 - using head dot next so I can just write
36:50 - n dot add dot next
36:55 - so this our previous node is this one
36:59 - and
37:01 - let's say new data
37:04 - equal to 300.
37:07 - and after that I also want to print my
37:10 - name list
37:14 - after running that
37:16 - as you can see uh new node with 300 data
37:20 - it is added to the linked list
37:23 - after this node which we passed
37:28 - yes so this is also working perfectly
37:33 - and that's all for this video
37:44 - and its method like that you can try out
37:47 - more methods like I said delete no
37:51 - with some specific position or methods
37:55 - like to check the length of linked list
38:01 - and to search a
38:05 - data and some index
38:08 - something like that
38:12 - you can try them out and you can ask
38:15 - your doubts in the comment section
38:19 - thank you