With timestamps:

00:00 - every function you've ever written has
00:02 - had a stack well not not this hold on
00:06 - but what is a stack what does it do for
00:09 - your program why does each function have
00:11 - their own how does it work under the
00:13 - hood also why am I stuck here in Windows
00:15 - XP I don't know I I'm just as lost on
00:18 - this premise as you are I got banished
00:19 - here when I coded in hasool and I I've
00:21 - kind of just been floating around here
00:22 - let's go back to the
00:23 - VM so here I have a very basic C program
00:27 - that we're going to use to kind of show
00:28 - what the stack does for for each program
00:30 - what a stack frame is and how
00:32 - essentially a stack frame is used to
00:34 - store local data here we have the
00:36 - function main this is the default
00:37 - function in C that always gets called
00:39 - and by default any function that you say
00:42 - that isn't a naked function which is you
00:44 - know the default attribute is not naked
00:46 - uh it will create its own stack frame
00:48 - what does stack frame do it creates room
00:49 - for local variables like this function
00:51 - like this variable Z here now when I
00:53 - call function Fu the assembly
00:55 - instructions under the hood are going to
00:57 - create a new stack frame for Foo to to
01:00 - create room for these local variables
01:02 - we're going to actually disassemble this
01:04 - program and we're going to walk step by
01:06 - step through the assembly to talk about
01:09 - how a new stack frame is created but
01:11 - before we do that we first need to
01:12 - understand some basic things about CPUs
01:15 - to understand what's going on in the
01:17 - creation of a stack frame when we talk
01:18 - about assembly in any context we need to
01:21 - understand that inside the CPU there are
01:23 - these hyper fast variables that are
01:25 - called registers now some of them are GP
01:28 - or general purpose register where they
01:30 - can contain any kind of data one of them
01:33 - is extended BX ebx right we can put any
01:36 - data in there that we want to it really
01:38 - serves no purpose to the CPU other than
01:40 - general purpose now there are others
01:42 - that are special purpose registers one
01:45 - of them for example is es the extended
01:49 - stack pointer what that does that points
01:51 - to the top of our stack frame we'll talk
01:54 - about what that actually means here in a
01:55 - second and another one is e BP this
01:59 - points to to the bottom of our stack
02:02 - frame right so B being the bottom and S
02:05 - being the top now when we talk about
02:07 - addresses this is a bit of a holy war in
02:08 - like the computer architecture space but
02:10 - when we talk about the stack we can
02:12 - picture a stack of plates right so here
02:14 - is the top of our stack of plates and
02:17 - you know typically SP will Point here
02:20 - when we push additional variables onto
02:22 - our stack of plates SP will go up
02:25 - because the top of our stack gets higher
02:28 - as we push additional plates High higher
02:30 - and higher onto the stack now it is
02:32 - important to understand that as SP goes
02:35 - up the value becomes more negative the
02:37 - more negative SP is the taller our stack
02:40 - is I know it's a little bit of a weird
02:42 - Nuance in the world of computing but
02:44 - just understand when we push SP goes up
02:47 - meaning SP goes negative our stack grows
02:50 - up negatively and all the while SP is
02:52 - going up in this case we have BP here
02:55 - which is keeping track of the bottom of
02:57 - our stack frame I keep throwing around
02:58 - these words stack frame so let's talk
03:00 - about what a stack frame actually is in
03:02 - our example there before I showed you
03:03 - that we had a function Main and the
03:05 - function main called a function Fu
03:07 - before function main actually called Fu
03:10 - it already had a stack frame established
03:12 - so you can kind of picture it like this
03:13 - where we have two arrows that point to
03:15 - the top and the bottom of the stack
03:17 - right this thing here is referred to as
03:20 - Main's stack frame and Main stack frame
03:22 - contains variables like you know maybe
03:24 - it's Ark C and arcv or somewhere on here
03:27 - right these are all variables that are
03:29 - that are in scope relative to main when
03:31 - I call Foo eventually what we'll go
03:34 - through is the process of the function
03:36 - Foo creating a new stack frame that is
03:39 - now above main stack frame all these
03:42 - things here will belong to Foo and be in
03:44 - local scope for Foo So eventually Fu
03:45 - will create this new stack frame an INT
03:48 - X will be there an INT y will be there
03:50 - these are all local variables to Fu and
03:52 - then it collapses the stack frame so
03:54 - that main stack frame is now the stack
03:56 - frame in scope okay so here we go the
03:57 - moment of truth on the left over here
03:59 - here we have the assembly instructions
04:01 - for the function Fu and on the right is
04:03 - going to be my drawing of the creation
04:05 - of foo's Stack frame we're going to walk
04:07 - through step by step and explore how
04:10 - these instructions lead to more room
04:12 - being on the stack that are in scope to
04:15 - the function Foo right it creates room
04:17 - for foo's variables it can do things
04:19 - with those variables and eventually we
04:20 - call the function prologue to collapse
04:22 - the stack and get rid of that room and
04:24 - get the stack back to the state that
04:26 - main had it in so the first instruction
04:28 - we're going to do is we're going to push
04:30 - EBP so right now BP points to the bottom
04:33 - of main stack frame we need to preserve
04:35 - that so we can put it back to BP once
04:38 - this function is over so here we're
04:39 - going to push EBP this is going to be
04:42 - the old base pointer once we do that we
04:44 - then move ESP into EVP so that now makes
04:48 - the bottom of the stack equal to the
04:51 - current top of the stack so now EVP
04:53 - points here so now we have a new stack
04:55 - frame that is of height zero so we're
04:57 - going to get rid of this guy this is no
04:59 - longer here both of these arrows Point
05:01 - here right so we have EBP points here as
05:04 - well as ESP we're then also going to
05:07 - push variables that we want to preserve
05:09 - across variable boundaries so in this
05:11 - case we also push ebx it's going to go
05:13 - on top of EBP and then after that we
05:16 - call that sub instruction sorry I had to
05:18 - move my fat head to get out of the way
05:20 - by subtracting hex1 14 from ESP we raise
05:23 - it and create more room on the stack for
05:25 - foo's local variables so you can't see
05:27 - it here but this new area here that this
05:29 - squirly bracket is the room for foo's
05:32 - local variables and in our code here
05:34 - before we had variables uh X and Y X and
05:37 - Y are going to live locally here and you
05:39 - can see that we actually move the dword
05:41 - pointer of one and two into these EBP
05:44 - relative locations right EBP minus 10
05:46 - EBP minus C get one and two that EBP
05:50 - minus 10 and that EBP minus C are the
05:53 - locations on the stack of X and Y so
05:57 - before we talked about the function
05:59 - prologue right the area of the function
06:00 - that gets ran before the function even
06:02 - starts that creates this stack frame for
06:04 - our function Fu and after this happens
06:06 - Fu runs Fu does its logic maybe it calls
06:09 - other functions but at the end of Fu we
06:11 - need to actually call foo's function
06:13 - epilog what that does is that collapses
06:16 - the stack frame back down so that main
06:18 - can then restore its stack frame to its
06:20 - original state now all the instructions
06:23 - that happen are very simple here there
06:24 - are three instructions the first is that
06:27 - one that involves ebx all that's
06:29 - happening here is it's moving the thing
06:31 - at EBP minus 4 which is right here ebx
06:35 - it's the old ebx that we pushed and it's
06:37 - moving that into ebx so it's essentially
06:39 - taking the saved value and putting it
06:41 - back into the register this means that
06:43 - main depended on ebx not changing when
06:46 - it called Fu so it told us to push it
06:48 - onto the stack we did that and now we're
06:50 - preserving it in the function epilog now
06:52 - what we're doing is writing now leave is
06:55 - a function in int assembly that actually
06:57 - does a bunch of implicit liit
06:59 - instructions Intel assembly is basically
07:01 - an interpreted language it can do a lot
07:03 - of stuff all at the same time the leave
07:05 - instruction actually moves EBP into ESP
07:10 - so now ESP no longer points here ESP
07:14 - points to EBP it's right here it's in
07:17 - the same spot as EBP and then when we
07:19 - call leave not only do we subtract ESP
07:21 - and put it here we also pop EBP which
07:25 - means that the new base pointer is
07:27 - actually down here so the of the stack
07:30 - after this instruction gets ran is EBP
07:33 - points to the bottom and ESP points to
07:36 - almost the top now there is one more
07:39 - instruction that has to get ran now the
07:41 - last instruction we have to run is the
07:43 - return instruction there is a magical
07:45 - value here on the stack that when Maine
07:48 - called Foo it got put onto the stack now
07:51 - the return instruction is a whole
07:53 - magical instruction I made an entire
07:55 - other video about the return instruction
07:56 - because it's so complex in how functions
07:58 - call each other go watch that video and
08:00 - see if you can figure out what happens
08:02 - next

Cleaned transcript:

every function you've ever written has had a stack well not not this hold on but what is a stack what does it do for your program why does each function have their own how does it work under the hood also why am I stuck here in Windows XP I don't know I I'm just as lost on this premise as you are I got banished here when I coded in hasool and I I've kind of just been floating around here let's go back to the VM so here I have a very basic C program that we're going to use to kind of show what the stack does for for each program what a stack frame is and how essentially a stack frame is used to store local data here we have the function main this is the default function in C that always gets called and by default any function that you say that isn't a naked function which is you know the default attribute is not naked uh it will create its own stack frame what does stack frame do it creates room for local variables like this function like this variable Z here now when I call function Fu the assembly instructions under the hood are going to create a new stack frame for Foo to to create room for these local variables we're going to actually disassemble this program and we're going to walk step by step through the assembly to talk about how a new stack frame is created but before we do that we first need to understand some basic things about CPUs to understand what's going on in the creation of a stack frame when we talk about assembly in any context we need to understand that inside the CPU there are these hyper fast variables that are called registers now some of them are GP or general purpose register where they can contain any kind of data one of them is extended BX ebx right we can put any data in there that we want to it really serves no purpose to the CPU other than general purpose now there are others that are special purpose registers one of them for example is es the extended stack pointer what that does that points to the top of our stack frame we'll talk about what that actually means here in a second and another one is e BP this points to to the bottom of our stack frame right so B being the bottom and S being the top now when we talk about addresses this is a bit of a holy war in like the computer architecture space but when we talk about the stack we can picture a stack of plates right so here is the top of our stack of plates and you know typically SP will Point here when we push additional variables onto our stack of plates SP will go up because the top of our stack gets higher as we push additional plates High higher and higher onto the stack now it is important to understand that as SP goes up the value becomes more negative the more negative SP is the taller our stack is I know it's a little bit of a weird Nuance in the world of computing but just understand when we push SP goes up meaning SP goes negative our stack grows up negatively and all the while SP is going up in this case we have BP here which is keeping track of the bottom of our stack frame I keep throwing around these words stack frame so let's talk about what a stack frame actually is in our example there before I showed you that we had a function Main and the function main called a function Fu before function main actually called Fu it already had a stack frame established so you can kind of picture it like this where we have two arrows that point to the top and the bottom of the stack right this thing here is referred to as Main's stack frame and Main stack frame contains variables like you know maybe it's Ark C and arcv or somewhere on here right these are all variables that are that are in scope relative to main when I call Foo eventually what we'll go through is the process of the function Foo creating a new stack frame that is now above main stack frame all these things here will belong to Foo and be in local scope for Foo So eventually Fu will create this new stack frame an INT X will be there an INT y will be there these are all local variables to Fu and then it collapses the stack frame so that main stack frame is now the stack frame in scope okay so here we go the moment of truth on the left over here here we have the assembly instructions for the function Fu and on the right is going to be my drawing of the creation of foo's Stack frame we're going to walk through step by step and explore how these instructions lead to more room being on the stack that are in scope to the function Foo right it creates room for foo's variables it can do things with those variables and eventually we call the function prologue to collapse the stack and get rid of that room and get the stack back to the state that main had it in so the first instruction we're going to do is we're going to push EBP so right now BP points to the bottom of main stack frame we need to preserve that so we can put it back to BP once this function is over so here we're going to push EBP this is going to be the old base pointer once we do that we then move ESP into EVP so that now makes the bottom of the stack equal to the current top of the stack so now EVP points here so now we have a new stack frame that is of height zero so we're going to get rid of this guy this is no longer here both of these arrows Point here right so we have EBP points here as well as ESP we're then also going to push variables that we want to preserve across variable boundaries so in this case we also push ebx it's going to go on top of EBP and then after that we call that sub instruction sorry I had to move my fat head to get out of the way by subtracting hex1 14 from ESP we raise it and create more room on the stack for foo's local variables so you can't see it here but this new area here that this squirly bracket is the room for foo's local variables and in our code here before we had variables uh X and Y X and Y are going to live locally here and you can see that we actually move the dword pointer of one and two into these EBP relative locations right EBP minus 10 EBP minus C get one and two that EBP minus 10 and that EBP minus C are the locations on the stack of X and Y so before we talked about the function prologue right the area of the function that gets ran before the function even starts that creates this stack frame for our function Fu and after this happens Fu runs Fu does its logic maybe it calls other functions but at the end of Fu we need to actually call foo's function epilog what that does is that collapses the stack frame back down so that main can then restore its stack frame to its original state now all the instructions that happen are very simple here there are three instructions the first is that one that involves ebx all that's happening here is it's moving the thing at EBP minus 4 which is right here ebx it's the old ebx that we pushed and it's moving that into ebx so it's essentially taking the saved value and putting it back into the register this means that main depended on ebx not changing when it called Fu so it told us to push it onto the stack we did that and now we're preserving it in the function epilog now what we're doing is writing now leave is a function in int assembly that actually does a bunch of implicit liit instructions Intel assembly is basically an interpreted language it can do a lot of stuff all at the same time the leave instruction actually moves EBP into ESP so now ESP no longer points here ESP points to EBP it's right here it's in the same spot as EBP and then when we call leave not only do we subtract ESP and put it here we also pop EBP which means that the new base pointer is actually down here so the of the stack after this instruction gets ran is EBP points to the bottom and ESP points to almost the top now there is one more instruction that has to get ran now the last instruction we have to run is the return instruction there is a magical value here on the stack that when Maine called Foo it got put onto the stack now the return instruction is a whole magical instruction I made an entire other video about the return instruction because it's so complex in how functions call each other go watch that video and see if you can figure out what happens next
