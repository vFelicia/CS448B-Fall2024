With timestamps:

00:00 - programming is cool because we can make
00:02 - programs solve problems or run tasks for
00:05 - us but sometimes programs feel like
00:07 - magic let's demystify how return works
00:11 - typically when we write code we organize
00:13 - them into blocks that all should perform
00:15 - One Singular action these blocks are
00:18 - called functions for example this is a
00:21 - function that hold on
00:23 - this is a function sterlin that
00:26 - calculates the length of a string
00:28 - when you call a function you pass it
00:30 - arguments and it returns a value
00:33 - to use a function we call it by
00:35 - specifying the name of the declared
00:37 - function and the set of arguments and
00:40 - where to store the return value
00:43 - the function call stops the execution of
00:45 - the code calling the function referred
00:48 - to as the caller and begins execution in
00:51 - the called function or the call E
00:54 - but how does a program know where to
00:56 - return to when the Kali ends how does
01:00 - the return statement return to the right
01:02 - location well one solution could be that
01:05 - the location the function it returns to
01:07 - could just be calculated at compile time
01:10 - and baked into the machine code of the
01:12 - program return from sterlen by jumping
01:15 - here for example
01:17 - the problem with this is that a function
01:19 - can be called for multiple places take
01:22 - this code for example where we have
01:24 - three functions function a b and sterlin
01:28 - function a and function B both use the
01:31 - Sterling function so hard coding and
01:34 - offset in the machine code wouldn't work
01:36 - because it needs to return to two
01:38 - different locations
01:40 - okay so what if instead we created a
01:43 - structure that contained all the offsets
01:45 - the possible return locations and the
01:48 - return instruction just looked up which
01:49 - one to return to
01:51 - this solution actually works for many
01:53 - cases but breaks on computed calls or
01:57 - calls whose addresses are determined at
01:59 - runtime
02:01 - for example in C plus plus a virtual
02:03 - class method as computed at runtime
02:05 - which is called Dynamic dispatch so a
02:08 - return address lookup table wouldn't be
02:10 - able to calculate that before the
02:12 - program runs and track all these
02:14 - different return values
02:16 - into the return problem is actually not
02:18 - based on how the return statement works
02:20 - but instead on how the function is
02:22 - called
02:24 - to discuss how this works we'll need to
02:26 - dive into the Assembly of the function
02:28 - call and don't worry it's not
02:30 - complicated at all
02:31 - a function call in C translates to the
02:34 - call instruction and Intel assembly and
02:36 - other assembly variants it has a
02:38 - different name but they're all behaving
02:39 - generally the same way
02:42 - inside the CPU through our variables
02:45 - called registers the register we care
02:47 - about is PC or the program counter it's
02:50 - also referred to as IP or the
02:53 - instruction pointer
02:54 - the register contains the address of the
02:56 - next instruction to be executed by the
02:58 - CPU
03:00 - when the processor runs the call
03:02 - instruction the CPU quietly does
03:04 - something without saying anything about
03:06 - it the call instruction not only diverts
03:09 - execution to the called function but it
03:12 - secretly saves the program counter now
03:15 - referred to as the return address onto
03:18 - the stack the stack being memory used by
03:20 - the program to store variables and
03:22 - runtime information sterlen begins to
03:25 - run and it creates a region of memory on
03:27 - top of the save return address referred
03:30 - to as sterlens stack frame two more
03:33 - variables in the CPU the base pointer BP
03:37 - and the stack pointer SP determine where
03:40 - the stack frame for sterlin starts and
03:43 - ends memory in the stack frame is used
03:46 - for Sterling's local variables for
03:48 - example the variable I sterland runs all
03:51 - of its code and then it comes to the end
03:53 - of its execution where the return
03:55 - statement is invoked before Sterling
03:57 - returns it collapses its stack frame so
04:00 - that the stack pointer SP or the top of
04:03 - the stack points to the previously saved
04:05 - return address
04:07 - in assembly the return statement gets
04:09 - boiled down to a single instruction rent
04:12 - the red instruction pops off the return
04:14 - address into the program counter and the
04:17 - CPU continues execution after the call
04:19 - pretty cool right well what about the
04:22 - return value where does that go
04:24 - every processor architecture has an
04:27 - agreed upon convention regarding where
04:29 - the return value goes in Intel assembly
04:32 - for example the return value goes into
04:34 - the a register or Rax
04:37 - this piece of example C code Returns the
04:39 - value 0 which when viewed in assembly we
04:42 - can see happening when the assembler
04:44 - loads the value 0 into Rax
04:47 - because the return address controls
04:48 - where the program returns to and
04:50 - therefore the code that the program runs
04:52 - it is a huge Target for hackers that
04:55 - want to run malicious code to learn more
04:58 - about that go watch this video

Cleaned transcript:

programming is cool because we can make programs solve problems or run tasks for us but sometimes programs feel like magic let's demystify how return works typically when we write code we organize them into blocks that all should perform One Singular action these blocks are called functions for example this is a function that hold on this is a function sterlin that calculates the length of a string when you call a function you pass it arguments and it returns a value to use a function we call it by specifying the name of the declared function and the set of arguments and where to store the return value the function call stops the execution of the code calling the function referred to as the caller and begins execution in the called function or the call E but how does a program know where to return to when the Kali ends how does the return statement return to the right location well one solution could be that the location the function it returns to could just be calculated at compile time and baked into the machine code of the program return from sterlen by jumping here for example the problem with this is that a function can be called for multiple places take this code for example where we have three functions function a b and sterlin function a and function B both use the Sterling function so hard coding and offset in the machine code wouldn't work because it needs to return to two different locations okay so what if instead we created a structure that contained all the offsets the possible return locations and the return instruction just looked up which one to return to this solution actually works for many cases but breaks on computed calls or calls whose addresses are determined at runtime for example in C plus plus a virtual class method as computed at runtime which is called Dynamic dispatch so a return address lookup table wouldn't be able to calculate that before the program runs and track all these different return values into the return problem is actually not based on how the return statement works but instead on how the function is called to discuss how this works we'll need to dive into the Assembly of the function call and don't worry it's not complicated at all a function call in C translates to the call instruction and Intel assembly and other assembly variants it has a different name but they're all behaving generally the same way inside the CPU through our variables called registers the register we care about is PC or the program counter it's also referred to as IP or the instruction pointer the register contains the address of the next instruction to be executed by the CPU when the processor runs the call instruction the CPU quietly does something without saying anything about it the call instruction not only diverts execution to the called function but it secretly saves the program counter now referred to as the return address onto the stack the stack being memory used by the program to store variables and runtime information sterlen begins to run and it creates a region of memory on top of the save return address referred to as sterlens stack frame two more variables in the CPU the base pointer BP and the stack pointer SP determine where the stack frame for sterlin starts and ends memory in the stack frame is used for Sterling's local variables for example the variable I sterland runs all of its code and then it comes to the end of its execution where the return statement is invoked before Sterling returns it collapses its stack frame so that the stack pointer SP or the top of the stack points to the previously saved return address in assembly the return statement gets boiled down to a single instruction rent the red instruction pops off the return address into the program counter and the CPU continues execution after the call pretty cool right well what about the return value where does that go every processor architecture has an agreed upon convention regarding where the return value goes in Intel assembly for example the return value goes into the a register or Rax this piece of example C code Returns the value 0 which when viewed in assembly we can see happening when the assembler loads the value 0 into Rax because the return address controls where the program returns to and therefore the code that the program runs it is a huge Target for hackers that want to run malicious code to learn more about that go watch this video
