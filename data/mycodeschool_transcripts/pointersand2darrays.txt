00:00 - In this lesson, we're going to talk about
pointers
00:03 - and multi-dimensional arrays, as we have
seen in our previous lessons.
00:07 - The concepts of pointers and arrays go
together. We have already talked about
00:12 - pointers in context of one-dimensional
arrays
00:14 - how we can work with one-dimensional
arrays using pointers. Now let's see how
00:19 - we can work with
00:19 - a two-dimensional array or a
three-dimensional or a
00:23 - multi-dimensional array in general
using pointers.
00:27 - To understand this concept once again we
first need to understand how
00:30 - multi-dimensional arrays
00:32 - are organized in computers memory, let's
first go back to the organization of
00:37 - one-dimensional arrays in memory. When
we declare
00:40 - a one-dimensional array something like
this, let's say we are declaring an integer
00:45 - array 'A' of five elements (A[5]) then basically
what we're doing is we're creating
00:51 - five different integer variables that we can name
00:54 - A[0], A[1], A[2], A[3] and A[4]
00:58 - as one contiguous block of memory.
01:01 - What I'm showing here is a section of
computers memory
01:04 - array 'A' let's say is stored in the
section of
01:07 - memory and the starting address of 'A' is
01:10 - 200. As we know each byte in
01:14 - a computer's memory has an address and
if we assume that
01:18 - an integer is stored in four bytes which
is what it takes
01:21 - in a typical compiler then the block of
four bytes
01:25 - starting address 200 will be A[0]
01:28 - as I'm showing here, block of four bytes
starting address 204 will be
01:33 - A[1] next block of four bytes starting
address 208 
01:36 - will be A[2] and so on. I'll fill in
some values here.
01:42 - We have seen this earlier also in our
previous lessons if we write a statement
01:46 - like this
01:47 - then this is all right if I just used a
variable name
01:51 - 'A' then name of the array in an
expression
01:55 - basically returns a pointer to the first
element of the array
01:59 - because this is an array of integers so
each element will be an integer
02:04 - hence 'A' returns a pointer to integer.
Once I have written a statement like
02:09 - int *p equal A. I can use
pointer arithmetic and derefrencing
02:14 - to access all the elements in the array. If
02:18 - I would just try to print the address
stored in 'P' and I'm not using
02:21 - full printf statement here
02:22 - my output will be 200, if
02:25 - I would simply try to dereference 'P'
then output will be 
02:29 - 2. If I would try to print something
like
02:33 - *(P+2), then output will be 6
02:36 - because we have an integer pointer
02:39 - adding 1 will take us to the address
of the next integer
02:43 - which will be four bytes ahead, adding 2
will take us to the address of next to
02:48 - next
02:49 - which will be 8 bytes ahead if we
would be printing (P+2)
02:53 - it will be 208 and if we would de-
refrence and we would print
02:58 - *(P+2) then it will be value 6.
03:01 - We have already discussed pointer
arithmetic in our previous lessons.
03:05 - Now language gives us this flexibility
that we can use
03:08 - the name of the array just like a
pointer
03:12 - for all the derefrencing so instead of
doing all of this printing with P,
03:18 - if we would do all of this with 'A' it
will still be the same.
03:22 - Infact *(A+i)
03:25 - is same as A[i], these are alternate
syntax
03:29 - and (A+i) is same as &A[i]
03:32 - both will give us the address of the
Ith element in the array.
03:36 - Please remember that even though we
can use the name of the array
03:39 - just like pointer for all this
dereferencing and arithmetic.
03:44 - It's not seem as a pointer variable so we
can do something like
03:47 - P equal A like what we have done here
03:51 - so this is all right but we cannot do
03:54 - the other way, we cannot say A equal P,
this will give you compilation error.
03:59 - So this is pretty much how we would use
04:02 - pointers with one-dimensional arrays.
Let's now say we want to create
04:06 - a two-dimensional array. I will declare
04:09 - a two-dimensional array of integers
named B
04:12 - something like this, now what we're doing here
04:16 - is we are creating array of array.
04:20 - We are creating two one-dimensional
arrays of three elements
04:24 - each. This time B[0] and B[1]
04:27 - are both one-dimensional arrays of
of three integers
04:31 - each. A one-dimensional array of three
integers
04:34 - would be 12 bytes if each integer
04:38 - is 4 bytes in size so if I have to show
this in memory
04:42 - the first block of 12 bytes starting
address 400
04:47 - will be B[0] and the next block of
04:51 - 12 bytes starting address 412
04:55 - will be B[1]. As we had set
04:58 - name of the array returns a pointer to the
first element
05:02 - in the array, this time each element is
05:06 - not an integer, each element is a
one-dimensional array
05:09 - of three integers so if I would write a
statement like this
05:13 - int *P equal B then this will
give me
05:17 - a compilation error because 'B' will return
a pointer to 1-D array
05:21 - of 3 integers and not just a
pointer to integer,
05:25 - the type of a pointer matters not when
you have to read the
05:29 - address, it matters when you derefrence
05:32 - or when you perform pointer arithmetic,
it's really important that we understand
05:36 - this.
05:37 - We can define a pointer to 1-D array of
3 integers
05:42 - like this and now if I'll
05:45 - equate this with 'P' this is all right
05:48 - Equate 'B' with 'P', this time if I
would print
05:53 - just 'B' which is same as printing
address of
05:56 - B[0] this will be 400.
06:00 - If I will print *B which will be
same as
06:04 - B[0] then B[0] this time is
06:08 - variable name for a one-dimensional
array of 3 integers,
06:12 - so just using the name B[0] will return
us
06:15 - pointer to the first integer in B[0]
which will be accessed
06:19 - as B[0][0] so I'm putting this '&' sign here
in front of 
06:23 - B[0][0].
06:25 - First integer in B[0] will be this block
of four bytes
06:29 - its address once again is 400.
06:33 - Okay now I have also created three
blocks of four bytes
06:37 - each in both B[0] and B[1]
06:40 - and also filled in some values. Now I'm
going to write some
06:43 - prints statements and I want you to guess
the output.
06:47 - What will be the output if I'll try to print
06:50 - B+1. I will write the address of
each block of four bytes
06:56 - in the 2-D array the address of a block
is the address of the first byte in the 
07:01 - block.
07:02 - Okay so what will be the value of B+1.
07:05 - B this time is returning us a pointer 
to
07:09 - one-dimensional array of 3 integers so
07:12 - if I would do a pointer arithmetic like
adding plus 1
07:15 - we are moving to the next 1-D array of three
integers
07:18 - so we will be moving to address four
hundred plus size of one-dimensional
07:22 - array of 3 integers
07:23 - in bytes, so output will be 412
07:27 - which makes sense because B+1
is same as &B[1]
07:33 - or address of B[1] and address of B[1] is
07:36 - 412.
07:38 - Okay now what if I print *(B+1),
07:42 - when we are putting an astrix signs when we 
are trying to derefrence this is when
07:46 - the type of pointer becomes important,
'B' is a pointer to one-dimensional array
07:51 - of three integers,
07:52 - so B+1 is also a pointer to
one-dimensional array of 3 integers
07:56 - and when we will derefrence we will
get this whole one-dimensional array of
08:01 - three integers starting address 412
08:03 - *(B+1) is same as B[1] so
we will get B[1]
08:07 - now printing B[1] means using the name of
08:11 - this one-dimensional array B[1] which should return us the pointer to
08:16 - the first integer in B[1], so *(B+1)
is basically pointer to this
08:22 - integer at address 412. Once again this
output will be 412.
08:28 - All these expressions *(B+1) or
08:32 - B[1] or &B[1][0] are 
08:35 - returning us pointer to integer. Okay now
you need to gear up because
08:40 - I'm going to give you some tough ones to
decode. What will be the output if
08:44 - I will print *(B+1)+2
08:47 - take some time and think
about it.
08:50 - *(B+1) as we saw above will
08:54 - return an integer pointer to
first integer in B[1],
08:59 - to the integer at address 412. Adding
09:02 - 2 here is performing pointer arithmetic
because
09:05 - *(B+1) is a pointer to
integer storing this address 412
09:11 - adding 2 is basically going to the
address of next to next
09:16 - integer which will mean skipping 8
bytes and
09:19 - and going to reference integer at
address 420
09:23 - *(B+1) in this expression
can be written as B[1] simply B[1]
09:29 - because they are substitutes for each
other, there alternate syntax.
09:32 - So this is a same as B[1]+2 and once again
09:36 - these expressions are returning pointer
to integer
09:39 - they are returning pointer
this element B[1][2]
09:43 - and that's why we can also &B[1][2].
09:46 - All these three once again are same.
Let's do one more print.
09:51 - If you can get this one right, I can say
that you are good
09:54 - working with two-dimensional arrays
using pointers what will be the
09:58 - output for this expression 
10:02 - *(*B+1).
10:06 - What will be the output for this
expression. Think about it.
10:10 - Whenever you encounter an expression
with pointer arithmetic
10:14 - and derefrencing then you must
go step by step.
10:18 - Here 'B' is returning us
10:21 - pointer to one-dimensional array of size
three,
10:24 - one-dimensional array of three integers and
de-refrencing it
10:29 - will give us the one-dimensional array so
*B
10:33 - as we know we'll give us B[0]
10:36 - as should be same as B[0], now B[0]
in my expression
10:40 - because B[0] is named for a
one-dimensional
10:43 - array returns me pointer to the first
10:46 - integer in the one-dimensional array, so B[0]
returns
10:50 - pointer to integer we will get a
pointer to this integer at address
10:54 - 400.
10:55 - Now what will happen if you will add
1 to an integer pointer
10:59 - it will take you four bytes ahead to the
next integer it will return you pointer
11:05 - to the next integer so we will get a
pointer
11:08 - to this integer at address 404.
(*B+1) is basically
11:13 - &B[0][1] and with this final
derefrencing
11:18 - we can get rid of this '&' so
overall expression
11:22 - will be B[0][1] which is
11:25 - three. For a two-dimensional array
11:29 - B[i][j] where 'B' is name for my two
dimensional array and
11:33 - 'i' and 'j' are some indices can be written as
11:37 - *(B[i]+j),
11:40 - and once again B[i]
11:43 - can be written as *(B+i),
11:47 - so these three expressions are same.
11:50 - I would recommend trying all of this in
real code.
11:53 - So far this discussion has been about
working with two dimensional arrays
11:57 - using pointers.
11:58 - We will stop here for this lesson. In
another lesson, we will
12:02 - play with some real code and we will also 
discuss how we can
12:06 - work with an array of further higher
dimension like a three-dimensional array,
12:11 - We will also discuss passing of arrays
to functions
12:14 - through pointers. This is it for this lesson.
Thanks for Watching!