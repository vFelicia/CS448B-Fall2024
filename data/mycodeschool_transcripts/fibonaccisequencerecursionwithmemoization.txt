00:00 - in this lesson we will learn an important
technique to improve the performance
00:05 - of a recursive program
00:06 - and this technique is called
00:08 - recursion with memoization
00:10 - now in a previous lesson we had shown to
you using the example off
00:14 - Fibonacci sequence that why recursion 
is not always good
00:18 - in terms of performance
00:20 - Let's quickly have a recap of it
00:22 - so Fibonacci sequence is defined by
this particular
00:25 - recurrence relation the first two elements
in the sequence are zero and one and
00:30 - all other elements are sum of
previous two elements
00:34 - and if
00:34 - we have to write a recursive
implementation of this particular
00:38 - sequence
00:39 - Let's say we want
00:40 - to write a function
00:41 - fib(n)
00:42 - that'll give me
00:44 - F(n) from the above sequence
00:46 - it goes something like this if n is
less than or equal to one
00:50 - then we simply return n else
00:52 - we return Fib(n-1) plus 
Fib(n-2) so we make
00:57 - two recursive calls 
00:58 - first to calculate Fib(n-1)
01:01 - and then to calculate Fib(n-2)
01:03 - and sum them up
01:05 - and return the value
01:06 - now if i make a call to calculate
01:09 - Fib(5)
01:10 - and let's say i will write F(5) here
01:13 - for shortcut
01:14 - to Fib(5)
01:16 - then this makes
01:17 - recursive call first to calculate
F(4)
01:21 - it also makes a call to calculate F(3)
but we will go
01:24 - in the order in which the actual program
executes
01:27 - so F(4) makes a call to F(3)
01:30 - F(3) makes a call to F(2)
01:32 - and we go on building this particular
structure
01:34 - called recursion tree
01:37 - so F(1) and F(0) do not make
any further recursive call
01:41 - and this simply returns
01:43 - one and zero respectively
01:46 - this is a recursion tree
01:47 - now to calculate F(5) we have 
calculated
01:51 - F(2) thrice here
01:53 - and similarly we have calculated F(3)
01:55 - twice here
01:57 - this is simply an overhead
01:59 - or redundancy
02:00 - and for higher values of n this
02:04 - increases the time and space taken by
the program exponentially
02:09 - so let's do something to avoid the re
calculation of the same state or the same
02:14 - value
02:15 - again and again so
02:17 - i will modify the function here in the
left
02:19 - a little bit
02:20 - so i will try to write this function 
Fib(n) again
02:24 - and let's start to the base condition
02:26 - if n is less than or equal to
02:28 - one we simply return n
02:31 - what it basically means is that we already know
 
63
00:02:34,540 --> 00:02:36,159
F(0) and
02:36 - F(1)
02:37 - so anytime
02:38 - we are asked for
02:40 - F(0) and F(1) we simply return it
02:42 - and do not make a recursive call
02:44 - so let's say once we find F(2) or
calculate F(2)
02:48 - for the first time
02:50 - we save it in the memory
02:51 - so that i do not re-calculate it again
02:54 - similarly
02:58 - any F(n) like F(3) F(4) and so on
03:01 - once i calculate it for the first time
03:04 - let's say i will save it in the memory so in the
program i will say something like if 
03:09 - F(n)
03:10 - is in memory
03:12 - do not try to calculate it simply 
return it
03:15 - so we simply return F(n) else
03:18 - we will first
03:19 - try to calculate
03:20 - Fn
03:22 - by making recursive calls
03:24 - to calculate
03:25 - Fib(n-1) and Fib(n-2)
03:28 - and now i will first
03:29 - save this Fn in memory so that i do
not have to re-calculate this again
03:34 - and finally
03:35 - i will simply return this Fn
03:37 - we will show to you in an actual
program how to store all this
03:41 - F(2) F(3) F(n) in the memory
03:44 - and return it
03:45 - as and when needed
03:47 - now let's see how this program now
03:50 - improves our previous recursion
03:53 - say we again
03:54 - want to calculate F(5)
03:57 - and this makes a recursive call to F(4)
04:01 - this makes a recursive call because we
do not have F(5) and F(4)
04:05 - in memory yet
04:06 - we have not finished calculating it
04:08 - calculating them even once
04:10 - F(4) again makes a call to calculate 
F(3)
04:13 - F(3) makes a call to calculate F(2)
04:16 - and F(2) makes a call to calculate 
04:18 - F(1)
04:20 - and F(1) does not make a recursive
call any further
04:23 - so now at this stage
04:25 - this F(2) has 
04:27 - finished calculating ones
04:29 - so now
04:30 - we save it in the memory
04:32 - so now F(3) also calculates
04:35 - also makes a recursive call to F(1)
04:38 - now after this returns
04:40 - we also have
04:41 - finished calculating F(3) one's so F(3) is
also in memory
04:44 - now F(4) also makes a call to calculate
F(2) now
04:47 - but F(2) is already in memory now
04:49 - so this particular recursion tree does
not grow any further from here we
04:53 - simply
04:54 - return from here
04:55 - because F(2) returns
04:56 - the value
04:57 - from the memory
04:59 - again if F(5) also makes a recursive
call to
05:02 - F(3)
05:03 - now F(3) has also been calculated once
before and it is in memory so
05:08 - F(3) simply returns the value from 
memory here
05:11 - and the tree does not grow here as well
05:14 - so what we're basically doing here 
is
05:16 - we are avoiding all the re-calculation of
the same state
05:20 - again and again
05:22 - this particular implementation reduces
the time complexity
05:25 - of this particular program
significantly
05:28 - so this is recursion with memoization
05:31 - let's now see in some real code how this
works
05:35 - and i will write some C++ 
for you
05:37 - so here we have a simple
05:40 - recursive implementation of Fibonacci
sequence in C++
05:44 - and we have this method Fib
05:45 - this is the base condition
05:48 - and this is the recurrence relation
05:50 - and we asked the user for an n 
05:53 - and print the result
05:56 - after calling Fib(n)
05:58 - so lets see what happens if we run this
program
06:00 - let's say we first gave
06:02 - n i equal to 10
06:04 - this gives me the result fifty-five
immediately and now let's give a
06:08 - slightly higher n like n is equal to
forty
06:11 - and this time it's taking some time
06:15 - it is still executing and i'm waiting for the
result
06:18 - finally we get the result but it took
some, it took some time a couple of
06:22 - seconds to give me the result now
let us try to write recursion with
06:25 - memoization and see what good it does to
us
06:29 - so what i will do is i will first  declare an array
06:31 - F of size fifty one
06:34 - and we will come back to
06:36 - why we have
06:36 - chosen the size fifty one only in the
main method we go ahead and say that 
06:41 - for all i from
06:43 - zero to
06:44 - fifty
06:46 - set F[i] is equal to minus one
06:49 - so if F[i]
06:50 - is minus one
06:52 - we can say that
06:54 - F(i) is not calculated yet
06:56 - in the method
06:57 - Fib(n)
06:59 - we would say that
07:00 - F[n] is not equal
07:03 - to minus one then
07:05 - definitely
07:07 - it is in the memory and it is already
calculated
07:09 - so we will simply return F[n]
07:13 - else
07:14 - we will calculate F[n] by 
07:16 - this recurrence relation
07:18 - and then return
07:22 - F[n] now we have declared this particular array
07:24 - in global scope
07:26 - so that
07:27 - only one copy of it is created and the
same copy is accessible to all the
07:31 - calls of this method Fib and
07:34 - method main as well
07:36 - now let us run this program and see what
happens
07:38 - let's try this again for n is equal to
ten
07:41 - and we get in
07:42 - result as fifty five which is correct
07:45 - we also get the result in no time
07:47 - for n is equal to forty
07:49 - let see what happens
07:51 - and this gives me the result immediately
07:53 - so recursion with memoization in
this particular example
07:57 - is not as efficient as an iterative
implementation in terms of memory
08:02 - but it is as good as an iterative
implementation in terms of time
08:06 - for larger values of n and it is a lot
better than simple recursion
08:10 - which grows exponentially the time taken
by
08:13 - which grows exponentially with the input
08:17 - so a couple of things in the program
08:18 - we have declared the array of size 
fifty one only
08:22 - this limits us
08:23 - to calculating only
08:25 - the first fifty-one elements in the
Fibonacci sequence if we are using 
08:28 - recursion with memoization you
definitely need to make a call in
08:32 - recursion with memoization that what
is the maximum value
08:35 - of input that you're giving and
accordingly you have to declare this
08:39 - array we could also avoid writing this particular
condition here
08:43 - we could simply go ahead and in the main method
08:47 - we could initialize F[0]
08:49 - as zero
08:50 - and F[1] as one
08:54 - and this particular condition if F[n] not equal
to minus one
08:58 - will take care of the previous
condition that we have omitted
09:01 - or removed the recursion with memoization
is a very nice technique algorithm
09:05 - design and we will encounter more of
it
09:08 - in coming lessons
09:09 - so thanks for watching