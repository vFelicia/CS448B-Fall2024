00:00 - In our previous lesson we introduced
you to stack data structure.
00:03 - We talked about stack as abstract data type
00:07 - or ADT has been often we define 
data structure as abstract data type.
00:12 - We define it as a mathematical or
logical model.
00:16 - We define only the features or
operations available with the data
00:20 - structure
00:20 - and do not bother about implementation.
Now in this lesson we will see how we
00:25 - can
00:26 - implement stack data structure. We will
first
00:29 - discuss possible implementations of
stack and
00:32 - then we will go ahead and write some code.
Okay so let's get started
00:36 - as we had seen a stack is a list
00:40 - or collection with this restriction, with
this constraint
00:43 - that insertion and deletion that we call
00:46 - push and pop operations in a stack must
be performed
00:51 - one element at a time and only from
one
00:54 - end, that we call the top of stack.So if
you see
00:58 - if we can add only this one extra
property only this one
01:03 - extra constraint to any implementation
of a list
01:06 - that insertion and deletion must be
performed
01:10 - only from one end then we can get
a stack.
01:13 - There are two popular ways of creating
lists
01:16 - we have talked about them alot in our
previous lessons we can use
01:20 - any of them to create a stack.We can
01:23 - implement stacks using a) arrays
01:26 - and b) linked lists both these
implementations are pretty intuitive.
01:32 - Let's first discuss array based
implementation.
01:35 - Let's say I want to create a stack of
integers,
01:38 - so what I can do is I can first create
an array of integers.
01:43 - I am creating an array of 10 integers here,
i'm naming this array
01:47 - 'A'. Now I'm going to use this array to
store
01:51 - a stack, what I'm going to say is
that at
01:54 - any point some part of this array starting
01:58 - index 'zero' till an index marked as
02:01 - 'top' will be my stack. We can create
02:06 - a variable named 'top' to store the index
of top of stack.
02:10 - For an empty stack top is set
02:13 - as -1, right now in this figure
02:17 - top is pointing to an imaginary -1
index in the array.
02:21 - An insertion or push operation
02:24 - will be something like this. I will write
a function named
02:28 - 'Push' that will take an integer 'x' as
argument.
02:31 - In 'Push' function we will first
increment top
02:35 - and then we can fill in integer 'x'
02:39 - at top index. Here we are assuming that
02:42 - 'A' and 'top' will be accessible to 'Push'
function
02:46 - even when they're not passed as
arguments. In 'C' we can declare them as
02:51 - global variables
02:52 - or in an object-oriented implementation
all these entities
02:57 - can be members of a class. I'm only
writing pseudo code to explain the
03:01 - implementation logic.
03:03 - Okay, so for this example array that I'm
showing here,
03:06 - right now top is set as -1
03:09 - so my stack is empty. Let's insert
something onto the stack.
03:13 - I will have to make call to 'Push'
function. Let's say I want to insert
03:18 - number 'two' onto the stack,
03:19 - in a call to 'Push' first 'top' will be
incremented
03:23 - and then the integer passed as argument
will be written at
03:26 - top index, so two will be written at index
'zero'.
03:30 - Let's push one more number, let's say
03:33 - i want to push number 'ten' this time. Once
again 'top' will be incremented
03:37 - 'ten' will now go at index 'one', with each
push the stack will expand
03:42 - towards higher indices in the array. To
pop an element from the stack,
03:47 - i am writing a function here for pop
operation. All I need to do is
03:51 - decrement 'top' by 'one' with
03:55 - a call to 'pop'. Let's say i am making a call to
'pop' function here,
03:59 - top will simply be decremented.
04:02 - Whatever cells are in yellow in this
figure are part of my stack.
04:05 - We do not need to reset this value
before
04:09 - popping, if a cell is not part of stack
anymore we do not care what garbage lies
04:13 - there.
04:14 - Next time when we will push we will
modify it anyway.
04:18 - So let's say after this pop operation I want
to perform
04:22 - a push, i want to insert number seven
onto the stack.
04:26 - So top once again will be incremented
and value at index 'two' will be
04:31 - overwritten, the new value will be 7.
04:34 - These two functions 'push' and 'pop' that
i have written here
04:37 - will take constant time. we have simple
operation in these two functions
04:42 - and execution time will not depend upon
size of stack.
04:46 - While defining stack ADT we had said that
all the operations
04:50 - must take constant time or in other words
the time complexity
04:55 - should be O(1) .
04:58 - In our implementation here both push
and pop operations are
05:01 - O(1). One important thing here
05:04 - we can push onto the stack only till
05:08 - array is not exhausted, only till some
space is left in the array.
05:12 - We can have a situation where stack
would consume the whole
05:16 - array so top will be equal to highest index
05:19 - in the array.A further push will not be
possible because
05:23 - it will result in an overflow. This is
one limitation with array based
05:28 - implementation.
05:29 - To avoid an overflow we can always
create a large enough array,
05:33 - for that we will have to be reasonably sure
that stack will not grow
05:38 - beyond a certain limit. In most practical
cases
05:41 - large enough array works but irrespective
of that
05:45 - we must handle overflow in our
implementation.
05:49 - There are couple of things that we can do in
case of an overflow,
05:53 - 'push' function can check whether array is
exhausted or not
05:56 - and it can throw an error in case of an
overflow.
06:00 - So push operation will not succeed, this
will not be a really good behavior.
06:05 - We can do another thing, we can use the
concept of
06:08 - dynamic array. We have talked about
dynamic array in initial lessons in this
06:12 - series.
06:13 - What we can do is in case of an
overflow
06:16 - we can create a new larger array.
06:20 - We can copy the content of stack from
older filled up array into
06:24 - new array if possible we can delete this
smaller array.
06:27 - The cost of copy will be O(n)
06:31 - or in simple words time taken to copy
elements from smaller
06:35 - array to larger array will be
proportional
06:38 - to number of elements in stack or
the size of the smaller array
06:42 - because anyway stack will occupy the
whole array.
06:46 - There must be some strategy to decide
the size of larger array.
06:49 - Optimal strategy is that we should
create
06:52 - an array twice the size of smaller
array.
06:55 - There can be two scenarios in a push
operation.
06:58 - In a normal push we will take
constant time,
07:02 - in case of an overflow we will first create
a larger array twice the size of smaller
07:07 - array. Copy all elements in time proportional
to size of the smaller array
07:12 - and then we will take constant time to insert
the new element.
07:15 - The time complexity of push with this
strategy
07:19 - will be O(1) in best-case
07:23 - and O(n) in worst case, in case of an
overflow time complexity will be
07:29 - O(n)
07:30 - but we will still be O(1)
in
07:33 - average case. If we will calculate the
time taken for
07:37 - n pushes then it will be proportional to
n,
07:40 - remember n is the number of elements in
stack.
07:43 - O(n) is basically saying that
07:47 - time taken will be very close to
07:50 - some constant times n, in simple words
time taken will be proportional to n.
07:55 - If we are taking c into n time for
n pushes,
07:59 - to find out average we will divide by n.
Average time taken for each push will be
08:04 - a constant hence O(1) in
08:07 - average case. I will not go in to all the
mathematics of why it's O(n)
08:12 - for n pushes, to know about it you
can check the description of this video
08:16 - for some resources. Okay so this pretty
much is core of our implementation.
08:21 - We have talked about two more operations
in definition of stack
08:25 - ADT, top operation simply returns
08:28 - the element at top of stack so 'top'
function will look something like this.
08:33 - We will simply return the element
at top index.
08:36 - To verify whether stack is empty or not
this is another operation that we have
08:41 - defined.
08:41 - We can simply check the value of top if
it is equal to -1,
08:46 - we can say the stack is empty we can
return true
08:49 - else we can return false. Sometimes pop
08:53 - and top operations are combined together
in that case pop will not just
08:58 - remove an element from top of stack it
will also return that element.
09:02 - Language libraries in a lot of programming
languages give us
09:06 - implementation of stack. Signature of
functions in these implementations can
09:10 - vary
09:11 - slightly. Okay now I will quickly show
you a basic implementation of stack
09:16 - in C. In my C code here I'm going to write
a simple
09:19 - array based implementation to create a
stack of
09:23 - integers. The first thing that I'm going
to do is I'm going to create an array of
09:27 - integers
09:28 - as global variable and the size of this
array is 'MAX_SIZE' where
09:33 - 'MAX_SIZE' is defined by this macro as
09:37 - 101. I will declare another global
variable
09:41 - named top and set it as -1 initially,
09:44 - remember top equals -1 means an empty
stack.
09:47 - When a variable is not declared inside
any function
09:51 - it's a global variable, it can be accessed
09:54 - anywhere so you do not have to pass it as
argument
09:58 - to functions and now I will write all
the operations.
10:01 - This is my 'push' function, I'm first
incrementing top
10:05 - and then setting the value at top as x.
10:09 - x is the integer to be inserted passed
as argument.
10:13 - Instead of writing these two statements
10:16 - i can write one statement like this
10:19 - and I will be good. I am using pre
increment operators so
10:23 - increment will happen before assignment. I
also want to handle
10:29 - overflow. We will have an overflow when top
index will be equal to
10:33 - MAX_SIZE-1, highest index
10:37 - available in the array. In case of an
10:40 - overflow I simply want to print an
error message
10:43 - something like this and return.
10:47 - So in this implementation I'm not using
a dynamic array,
10:51 - in case of overflow push will not
succeed.
10:54 - Okay now this is my 'Pop' function
10:57 - i am simply decrementing top. Here also we
must handle one
11:02 - error condition if stack is already
empty
11:06 - we cannot pop, so I'm writing these
statements here if
11:09 - top is equal to -1 we cannot
11:13 - pop. I will print this error message that
there is no element to pop
11:18 - and simply return. Now let's write
11:21 - top operation, top operation will simply
11:24 - return the integer at top index. So now
my basic operations are all
11:30 - written here. I have already written
Push
11:33 - pop and top. In main function i will make
some calls to 'push' and 'pop'
11:38 - and I want to write one more function
named print and this is
11:42 - something that I'm going to write only
to verify that 'push' and 'pop' are
11:46 - happening properly.
11:47 - I will simply print all the elements in
the stack
11:51 - in my main function after each push
or pop operation
11:55 - i will make a call to print. I am writing
multiple function calls, two function
11:59 - calls
12:00 - on same line here because I'm short of
space.
12:03 - Remember print function is not a typical
operation available with stack,
12:07 - i am writing it only to test my
implementation.
12:10 - So this pretty much is my code, let's now
run this program and see what happens.
12:15 - This is what I'm getting as output we are
pushing
12:18 - three integers 2,5 and 10 and then we are
performing
12:22 - a pop so 10 gets removed from the
stack
12:25 - and then we are pushing 12. So this
12:29 - is a basic implementation of stack in C.
12:32 - This is not an ideal implementation, an
ideal implementation should be something
12:36 - like
12:37 - we should have a datatype called
stack and
12:40 - we should be able to create instances
of it.
12:43 - We can easily do it in an
object-oriented implementation,
12:47 - we can do it in 'C' also using
structures.
12:50 - Check the description of this video
for link to
12:53 - source code of this implementation as
well as of
12:56 - an object-oriented implementation. In
our next lesson we will discuss
13:01 - linked list implementation of stack this
is it for this lesson.
13:05 - Thanks for watching.