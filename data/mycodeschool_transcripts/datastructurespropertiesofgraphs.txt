00:00 - In our previous lesson, we introduced you
to graphs.
00:03 - We defined graph as a mathematical or
logical model
00:06 - and talked about some of the
properties and applications of graph.
00:10 - Now in this lesson, we will discuss some
more properties of graph
00:13 - but first I want to do a quick recap of
what we have discussed in our previous
00:17 - lesson.
00:18 - A graph can be defined as an ordered
pair of
00:21 - a set of vertices and a set of edges.
00:24 - We use this formal mathematical
notation G = (V,E)
00:29 - to define a graph, here V is set of
vertices and
00:33 - E is set of edges. Ordered pair is just a
pair of mathematical objects in which
00:38 - order of objects in the pair matters. It
matters which element is first and which
00:43 - element is second in the pair.
00:45 - Now as we know to denote number of
elements in a set
00:48 - that we also call cardinality of a set.
We use the same notation that we used
00:53 - for modulus or absolute value.
00:55 - So this is how we can denote number of
vertices and number of
01:00 - edges in a graph. Number of vertices
01:03 - would be number of elements in set V
and number of edges would be number of
01:07 - elements
01:08 - in set E. Moving forward, this is how I'm
going to denote number of vertices and
01:12 - number of edges
01:13 - in all my explanations. Now as we had
discussed earlier,
01:17 - edges in a graph can either be
directed that is 1 way connections
01:21 - or undirected that is 2 way
connections. A graph with only directed 
01:26 - edges is called
01:27 - a directed graph or digraph and a
graph with only undirected edges is called
01:32 - a undirected graph.
01:33 - Now sometimes all connections in a
graph cannot be treated as
01:37 - equal, so we label edges with some weight
01:41 - or cost like what i'm showing here and
a graph in which some value is associated
01:46 - to connections
01:47 - as cost or weight is called a weighted graph.
01:51 - A graph is unweighted if there is no cost
01:54 - distinction among edges. Okay, now we can
also have some special kind of edges in
01:59 - a graph.
02:00 - These edges complicate algorithms and
make working with graphs difficult
02:04 - but I'm going to talk about them anyway.
An edge is called a self loop
02:09 - or self edge if it involves only 1
vertex.
02:13 - If both endpoint of an edge are same
02:16 - then it's called a self loop. We can
have a self loop in both directed and
02:21 - undirected
02:22 - graphs but the question is why would we
ever have a self loop in a graph.
02:26 - Well, sometimes if edges are depicting
some relationship or connection
02:31 - that's possible with the same node as
origin as well as destination
02:36 - then we can have a self loop. For example
as we discussed in our previous lesson,
02:42 - interlinked web pages on the internet
or the world wide web can be
02:46 - it presented as a directed graph. A page
with a unique URL can be a node in the
02:51 - graph and we can have a directed
02:53 - edge if a page contains link to another
page. Now
02:57 - we can have a self loop in this graph
because its very much possible for a
03:02 - webpage to have a link to itself. Have a look
at this webpage
03:06 - mycodeschool.com/videos.
03:08 - In the header, we have links for workouts
page,
03:11 - problems page and videos page.
Right now I'm already on videos page
03:16 - but I can still click on videos link and
all that will happen with the click is
03:21 - refresh
03:22 - because I'm already on videos page. My
origin and destination
03:26 - are same here, so if I'm representing
world wide web as a directed graph
03:31 - the way we just discussed then we have
self loop here.
03:35 - Now the next special type of edge that
I want to talk about is multi-edge.
03:39 - An edge is called a multi-edge
03:42 - if it occurs more than once in a graph.
Once again, we can have a multi-edge in
03:46 - both directed and undirected graphs.
03:48 - First multi edge that I'm showing you here
is undirected and the second 1 is
03:53 - directed.
03:53 - Now once again, the question why should
be ever have a multi-edge.
03:57 - Well, let's say we are representing flight
network between cities as a graph.
04:02 - A city would be a node and we can have
an edge if
04:05 - there is a direct flight connection
between any 2 cities,
04:08 - but then there can be multiple flights
between a pair of cities.
04:12 - These flights would have different names
and may have different costs.
04:16 - If I want to keep the information about
all the flights in my graph,
04:20 - I can draw multi-edges. I can draw 1
directed edge for
04:24 - each flight and then I can label an edge
with its cost or any other property.
04:30 - I just labeled edges here with some
random flight numbers.
04:33 - Now as we were saying earlier, self loops
and multi-edges
04:37 - often complicate working with graph. Their
presence means
04:41 - we need to take extra care while solving
problems.
04:44 - If a graph contains no self loops or multi-edge
then it's called a simple graph.
04:49 - In our lessons, we will mostly be dealing
with simple graphs.
04:52 - Now I want you to answer a very simple
question. Given a number of vertices
04:57 - in a simple graphs that is a a graph 
with no self loops or multi-edge,
05:01 - what would be maximum possible number of
edges.
05:05 - Well, let's see. Let's say, we want to draw
a directed graph
05:09 - with 4 vertices. I have drawn 4
vertices here.
05:12 - I'll name these vertices V1, V2, V3
and V4.
05:17 - So this is my set of vertices. Number
of elements in set V
05:20 - is 4. Now it's perfectly fine if I
choose
05:24 - not to draw any age here. This will still
be a graph.
05:28 - Set of edges can be empty, nodes can be
totally disconnected.
05:32 - So minimum possible number of edges in a
graph is zero.
05:36 - Now if this is a directed graph, what do
you think can be maximum number of edges
05:40 - here.
05:41 - Well, each node can have directed edges
to all other nodes.
05:45 - In this figure here, each node can have
directed edges
05:49 - to 3 other nodes. We have 4 nodes in
total,
05:53 - so maximum possible number of edges here
is
05:56 - 4 * 3 that is 12. I have shown
edges originating from a vertex in same
06:01 - color here.
06:02 - This is the maximum that we can draw if
there is no self loop or
06:06 - multi-edges. In general if there are N
vertices
06:10 - then maximum number of edges in a
directed graph would be
06:14 - N * (N - 1), so in a simple
06:17 - directed graph of number of edges would be
in this range
06:21 - 0 to N * (N-1). Now what do
you think would be the maximum for an
06:26 - undirected graphs.
06:28 - In an undirected graph, we can have only
1 bi-directional
06:32 - edge between a pair of nodes. We can't
have 2 edges in different directions,
06:37 - so here the maximum would be half of
maximum for directed.
06:41 - So if the graph is simple and undirected
number of edges would be
06:46 - in the range 0 to (N * (N - 1)) / 2.
06:50 - Remember this is true only if there is
no self loop or multi-edge.
06:54 - Now if you can see number of edges in
the graph can be really really large
06:58 - compared to a number of vertices.
07:00 - For example if number of vertices in a
directed graph
07:04 - is equal to 10, maximum number of edges
would be
07:09 - 90. If number of vertices is 100,
07:13 - maximum number of edges would be 9900.
07:16 - Maximum number of edges would be close
to Square of number of vertices.
07:21 - A graph is called dense if number of
edges in the graph is close to maximum
07:26 - possible number of edges
07:27 - that is if the number of edges is of
order of square of number of vertices,
07:32 - and a graph is called sparse if the
number of edges is really less
07:38 - typically close to a number of
vertices and not more than that.
07:42 - There is no defined boundary for what
can be called dense and what can be
07:45 - called
07:45 - sparse. It all depends on context
07:49 - but this is an important classification.
While working with graphs,
07:52 - a lot of decisions are made based on
whether the graph is
07:56 - dense or sparse. For example we
typically choose a different kind of
08:00 - storage structure in computer's memory
for a dense graph.
08:04 - We typically store a dense graphs and
something called adjacency matrix,
08:09 - and for a sparse graph we typically use
something called
08:12 - adjacency list. I'll be talking about
adjacency matrix and adjacency list in
08:18 - next lesson. Okay, now the next concept
that I want to talk about is concept
08:23 - of
08:24 - path in a graph. A path in a graph is
08:27 - a sequence of vertices where each 
adjacent
08:30 - pair in the sequence is connected by an
edge.
08:35 - I'm highlighting the path here in this
example graph. This sequence of vertices
08:39 - A B F and H is a path in this graph.
08:43 - Now we have an undirected graph here,
edges are bi-directional.
08:47 - In a directed graph, all edges must also
be aligned
08:50 - in 1 direction the direction of the
path.
08:53 - A path is called simple path if no vertices
are repeated
08:59 - and if vertices are not repeated
then edges will also not be repeated.
09:03 - So in a simple path both vertices and
edges are not repeated.
09:07 - This path A B F H that I have highlighted
here
09:10 - is a simple path but we could also have
a path like
09:15 - this. Here, start vertex is A and
09:18 - end vertex is D. In this path,
09:21 - 1 edge and 2 vertices are repeated.
09:25 - In graph theory, there is some inconsistency
in use of this term path.
09:29 - Most of the time, when we say path
we mean a simple path
09:33 - and if repetition is possible we used
this term
09:37 - walk. So a path is basically a walk
09:40 - in which no vertices or edges are repeated.
09:44 - A walk is called a trail if 
vertices can be repeated
09:48 - but edges cannot be repeated. I'm highlighting
a trail here in this example graph.
09:54 - Okay, now I want to say this once again
walk and
09:57 - path are often used as synonyms but most
often when we say path
10:02 - we mean simple path, a path in which
vertices and edges
10:07 - are not repeated. Between 2 different
vertices if there is 
10:11 - a walk in which vertices or edges
are repeated
10:15 - like this walk that I'am showing you here in
this example graph
10:19 - then there must also be a path or simple
path
10:22 - that is a walk in which vertices or
edges
10:25 - would not be repeated. In this walk that
I'm showing you here, we're starting at
10:30 - A and we are ending our walk at C.
10:33 - There is a simple path from A to C
with just 1 edge.
10:37 - All we need to do is, we need to avoid
going to B E H
10:41 - D and then coming back again to A. So
this is why we mostly talk about simple
10:46 - path between 2 vertices
10:48 - because if any other walk is possible
simple path is also possible
10:52 - and it makes most sense to look for a
simple path
10:56 - so this is what I'm going to do
throughout our lessons. I'm going to say
11:00 - path and by path, I'll mean simple path
11:03 - and if it's not a simple path I'll say it
explicitly.
11:07 - A graph is called strongly connected if
in the graph
11:11 - there is a path from any vertex to any
other vertex.
11:15 - If it's an undirected graphs, we simply
call it connected
11:19 - and if it's a directed graph, we call it
strongly connected.
11:24 - In leftmost and rightmost graphs that I'm
showing you here,
11:27 - we have a path from any vertex to any
other vertex
11:31 - but in this graph in the middle, we do
not have a path from
11:34 - any vertex to any other vertex. We cannot
go from vertex C to
11:39 - A. We can go from A to C but we
cannot go from
11:42 - C to A, So this is not a strongly
connected graph.
11:47 - Remember if it's an undirected graph, we
simply say connected and if it's
11:51 - a directed graph we say a strongly
connected. If a directed graph is not
11:55 - strongly connected
11:57 - but can be turned into connected
graph
12:00 - by treating all edges as undirected
12:03 - then such a directed graph is called
weakly connected.
12:07 - If we just ignore the directions of
edges here, this is connected
12:12 - but I would recommend that you just
remember connected and strongly
12:15 - connected.
12:16 - This leftmost undirected graph is connected.
12:20 - I removed 1 of the edges and now this
is not connected.
12:23 - Now we have 2 disjoint connected
components here
12:27 - but the graph overall is not
connected.
12:30 - Connectedness of a graph is are really
important property.
12:33 - If you remember, intracity road
network with a city
12:38 - that would have a lot of 1 ways can
be present as a directed graph.
12:43 - Now an intra-city road network should
always be strongly connected.
12:47 - We should be able to reach any street
from any street,
12:52 - any intersection to any intersection.
Okay, now that we understand concept of
12:56 - path.
12:57 - Next, I want to talk about cycle in a
graph.
13:01 - A walk is called a closed walk if
13:04 - it starts an ends at same vertex
13:07 - like what i'm showing here and there is 1
more condition,
13:11 - the length of the walk must be
greater than 0.
13:14 - Length of a walk or path is number of edges
in the path
13:19 - like for this closed walk that I'm showing
you here.
13:22 - length is 5 because we have 5 edges
in this walk.
13:26 - So a closed walk is a walk that starts
and ends at same vertex
13:31 - and the length of which is greater than
0. Now some may call
13:35 - closed walk a cycle but generally we used
the term cycle
13:40 - for a simple cycle. A simple cycle is
13:44 - a close walk in which other than start
and
13:47 - end vertices no other vertex or
edge
13:50 - is repeated. Right now, what I'm showing
you here in this example graphs is
13:54 - a simple cycle or we can just say cycle.
13:58 - A graph with no cycle is called an
acyclic graph.
14:02 - A tree if drawn with undirected edges would
be an example of
14:07 - and undirected acyclic graphs. Here
in this tree,
14:11 - we can have a closed walk but we
cannot have a simple cycle.
14:16 - In this closed walk that I'm showing you
here, our edge is repeated.
14:20 - There would be no simple cycle in a tree
and apart from tree,
14:24 - we can have other kind of undirected
acyclic graphs also.
14:28 - A tree also has to be connected. Now we
can also have
14:32 - a directed acyclic graph,
14:35 - as you can see here also we do not have
any cycle.
14:38 - You cannot have a path of lenght greater
than 0 starting and ending at the same
14:42 - vertex.
14:44 - A directed cyclic graph is often
called
14:47 - a DAG. A cycles in a graph cause a lot of
issues
14:52 - in designing algorithms for
problems like finding shortest route
14:56 - from 1 vertex to another
14:58 - and we will talk about cycles a lot when
we will study some of these advanced
15:02 - algorithm in coming lessons.
15:04 - For this lesson, I'll stop here now.
In our next lesson, we will discuss
15:08 - ways of creating and storing graph in
computers memory.
15:12 - This is it for this lesson. Thanks for
watching.