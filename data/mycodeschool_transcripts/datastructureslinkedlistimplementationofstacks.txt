00:00 - In our previous lesson, we saw how we can
implement stack using
00:04 - arrays, now in this lesson we will see
how we can implement stack using linked
00:08 - list.
00:08 - For this lesson, I'm assuming that you
already know about both
00:12 - stack as well as linked list. Stack as
we know from our discussions so far
00:17 - is called a last in first out data
structure.
00:20 - Whatever goes in last in a stack comes
out first.
00:24 - It's a list with this restriction that
insertion and deletion must be performed
00:29 - only from one end that we call the top
of stack
00:32 - and insertion in a stack is called PUSH
operation
00:36 - and deletion is called POP. To implement
00:40 - a stack, all we need to do is enforce
this behavior
00:43 - in any implementation of the list that
insertion
00:47 - and deletion must be performed only from
one end
00:50 - and we can call that end TOP of stack.
00:53 - It's really easy to enforce this
behavior in a linked list.
00:57 - I have drawn linked list of integers
here. This is
01:01 - logical representation of a linked list.
A linked list
01:04 - is a collection of entities that we call
NODES.
01:07 - Each node contains two fields, one to
store data and
01:11 - another to store the address of the next
node.
01:15 - Let's assume that these nodes are at 
addresses 100,200 and 400
01:19 - respectively, so I will fill up the
address part as well.
01:22 - The identity of a linked list is the
address of the first node that we also
01:27 - called the HEAD node.
01:28 - A variable stores to address of head node,
we often name this variable
01:33 - as head. Unlike arrays linked lists
01:36 - are not of fixed size and elements in a
linked list are not stored
01:41 - in one contiguous block of memory. We
already know how to create a linked list
01:46 - or
01:46 - insert and delete elements from a linked
list
01:50 - from our previous lessons. I'm just doing
a quick recap here.
01:53 - To insert an element in a linked list,
01:56 - we first create a new node which is
basically blocking some part of memory
02:02 - to store our data.
02:03 - In this example here, let's say for my
new node am getting address 350.
02:08 - We can set the data part of the
linked list as whatever value I want to
02:12 - add
02:13 - in the list and then I need to modify
the address field of some of the existing
02:17 - nodes
02:18 - to link this node in actual list. Now for
02:22 - a stack we want that insertion and
deletion
02:25 - must always happen from the same end.
We can use
02:29 - a linked list as stack if we always insert
and delete
02:34 - a node at same end. We have two options,
02:38 - we can insert or delete from
02:41 - end of the list, what we also call tail
02:44 - or beginning of the list
02:47 - that we call head. If you remember from
our previous lessons, 
02:52 - inserting a node at end of linked list
is not
02:56 - a constant time operation, the cost of
both
02:59 - insertion and deletion at end of linked
list
03:03 - if we have to talk about the time
complexity of it is
03:07 - O(n). Here in the definition of
stack we are saying that
03:11 - push and pop operations should take
constant time or the time complexity
03:16 - should be O(1),
03:18 - but if we will insert and delete from
end
03:21 - time complexity will be O(n). To
insert a new node in a linked list at
03:27 - the end, we need to
03:28 - go to the last node and set the address
part of that node 
03:32 - to make it point to the new node. To
traverse
03:35 - a linked list and go to the last node
we should start at the head
03:39 - or the first node, from first node we
get the address of the second node
03:44 - so we go to the second node and from
second node we get the address of the third node,
03:48 - it's like playing treasure hunt, you go to
the first guy, ask the address of the
03:52 - second guy
03:53 - and then you go to the second guy, ask
the address of the third guy and so on.
03:57 - Now once I have reached this last node in
my example here,
04:01 - I can set its address part to make it
point to the newly created node.
04:05 - All in all this operation will take time
proportional to number of
04:09 - elements in the linked list. To delete
04:13 - a node from end, once again we will
have to traverse the whole list.
04:17 - We will have to go to the second last
04:20 - node, break this link, we will set the
address field as zero or NULL.
04:26 - and then we can simply wipe off the
last node removed from the
04:31 - list from computers memory. Once again
the cost of traversal will be 
04:35 - O(n). So inserting and deleting
04:39 - at end or tail is not an option for us,
because we will not be able to
04:43 - do push and pop in constant time, if we
choose to insert and delete
04:48 - from end. The cost of inserting or
deleting from beginning
04:52 - however is O(1).
04:56 - It will take constant time to insert a
new node at beginning or
04:59 - delete a node from beginning. To insert
05:02 - a node at  beginning, we must create a
new node.
05:06 - In this example here, once again I have
created a new node,
05:10 - let's say the address of new node is 
350, I will insert some
05:13 - data in the first
05:15 - field of this node. Okay so to insert
this node at
05:19 - beginning, we just need to build two
links.
05:22 - First we need to build this link, so
we will set the
05:26 - address here as whatever the address
of the current head
05:30 - is and then we can break this link and
05:33 - make this guide the new head by setting
it's
05:37 - address here in this variable named
05:40 - head. To delete a node
05:43 - in this example here, we will have to
first cut this link
05:46 - and build this link which will mean
resetting the
05:50 - address in this variable head and then
we can free the memory allocated to
05:55 - this particular guy, this particular node.
Deletion from
05:59 - beginning once again is a constant time
operation, so this is the thing if we
06:03 - will
06:03 - insert at beginning and delete from
beginning then
06:07 - all our conditions are satisfied. So
linked list implementation of stack is
06:12 - pretty straightforward.
06:14 - All we need to do is insert a node at
the beginning and
06:17 - delete a node from beginning. So, head of
the linked list
06:21 - is basically the top of stack. I would
rather name this variable
06:25 - top here. I will quickly write a basic
implementation
06:29 - in C. I'm defining node as a structure
in C.
06:33 - I want to create a stack of Integers,
so first field
06:37 - in the node is an integer,
06:40 - another field is pointer to node that will
store the address of the next node.
06:44 - We have seen this definition of node in
all our previous lessons on linked
06:48 - list, the next thing that I'm doing is I'm
declaring
06:51 - a variable named top which is pointer to
node.
06:55 - and initially I'm setting the address in
it as NULL.
06:59 - I'm using variable name top instead of
head here,
07:02 - when top is NULL our stack is empty, by
initializing top
07:06 - as NULL I'm saying that initially my
stack is empty.
07:11 - Now let's write push and pop functions.
This is my push function.
07:16 - Push is taking an integer X as
argument that must be
07:20 - inserted onto the stack. The first thing
that we are doing in push function is
07:25 - that we are creating
07:26 - a node using malloc. Let's say in this example
in this logical representation that I'm
07:31 - showing here,
07:32 - I'm performing a push operation so I'm
making a call to push function,
07:36 - passing it 2 as argument. So
07:40 - a node is created in memory, is created
in what we call the dynamic memory or
07:44 - heap, let's say the address of this
node is
07:46 - 100. This variable is basically a pointer
07:50 - pointing to this node, temp is a pointer
pointing to this node
07:53 - in the next line we are setting the data
field
07:57 - in this node. We are dereferencing temp
to do so,
08:01 - then we are setting the link part of
this newly created node as
08:05 - existing top. So we are building this link
08:08 - and then we are seeing top equal temp 
So we are building
08:12 - this link. This is simple insertion at
beginning of a linked list
08:16 - we have one complete video in this
series on how to insert an node at
08:20 - beginning of linked list. Let's do one
more push.
08:24 - Let's say I want to push 5 on to the
stack this time.
08:27 - Once again a node will be created, we will
set the
08:31 - data and then we will first point this guy to 
the
08:34 - existing top and then make this pointer
variable point to this guy.
08:39 - The new top, let's say the address of
this guy is 250,
08:44 - so the address in this variable top will
be set as 250.
08:48 - After the second push this is how my
stack will look like.
08:53 - Top here is a global variable so, we do
not need to pass it as argument to
08:58 - functions, it is accessible
09:00 - to all the functions. In an
object-oriented implementation it can be
09:03 - a private field
09:05 - and we can set it as NULL in the
constructor.
09:08 - Okay let's now see how push, sorry
09:11 - pop function will look like. This is my
pop function.
09:15 - Let's say for this example I'm making a
call to pop function.
09:19 - If the stack is already empty
09:22 - we can check for the stack is empty or
not by checking
09:25 - whether top is null or not, if top
is NULL, stack is empty.
09:30 - In this case we can throw some error and
return
09:33 - for this example here stack is not empty,
we have two integers in the stack.
09:38 - what we are first doing is we're creating a
pointer to node
09:42 - temp and pointing it to the top node
09:45 - and now we are breaking this link we are
setting
09:48 - the address in top as address of
09:51 - the next node and now using this pointer
variable
09:55 - temp, we are freeing memory allocated to
09:58 - the node being removed from the list.
Once I exit
10:02 - the pop function, this is my stack
10:05 - so this pretty much is the core of our
implementation.
10:08 - I would encourage you to write rest of
the stuff yourself.
10:11 - You can write code for operations like
top() and isempty().
10:16 - Linked list implementation of stack has
some advantages.
10:19 - one of the advantages is that unlike
array based implementation we do not need
10:24 - to worry about
10:25 - overflow, unless we exhaust the memory of
the machine itself.
10:29 - Some amount of extra memory is used in
each node
10:33 - to store reference or address
10:36 - but the fact that the use memory when
needed
10:39 - and release when not needed is something
that makes push
10:43 - and pop operations more craze full. So
this
10:47 - is linked list based implementation of
stack. In our coming lessons we will solve
10:51 - some problems using Stack. This is it for
this lesson.
10:56 - Thanks for watching.