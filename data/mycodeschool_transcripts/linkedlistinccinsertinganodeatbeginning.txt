00:00 - In our previous lesson, we saw how we can
map the logical view of a linked list
00:05 - into a C or C++ program. We saw how
we can implement two basic operations:
00:10 - one traversal of the linked list and
another inserting a Node at the
00:14 - end of the linked list. In this lesson we
will see a
00:17 - running code that will insert a Node
at the beginning of the linked list.
00:22 - So let's get started. I will write a 'C'
program here.
00:26 - the first thing that we want to do in
our program is
00:29 - that we want to define a Node. A Node
will be
00:32 - a structure in C. It will have two fields:
00:35 - One to store the data, let's say we
want to create a linked list of Integers,
00:39 - so
00:40 - our data type will be integer. If we
wanted to create
00:44 - a linked list of characters, then
our type
00:47 - would be character here. So we will have
another field
00:51 - that will be pointer to Node, that will
store the address of the next Node.
00:56 - We can name this variable link or
some...
00:59 - some people also like to name this
variable next because it sounds more
01:03 - intuitive. This variable will store the
address of the next Node in the linked
01:07 - list.
01:07 - In C, whenever we have to declare
01:10 - Node or pointer to Node, we will have
to write struct Node or struct Node*
01:15 - (star).
01:16 - In C++, we will have to write
only Node*,
01:20 - and that's one difference. Okay, so this
is the definition
01:24 - of a Node. Now to create a linked list
we will have to create
01:28 - a variable that will be pointer to Node
and that will store
01:32 - the address of the first Node in the
linked list, what we also call the
01:36 - head Node.
01:37 - so I will create a pointer to Node here.
struct
01:41 - Node*, we can name this variable
whatever. Often for the sake of
01:45 - understanding, we name this variable head.
01:47 - Now I have declared this variable as a
global variable.
01:50 - I have not declared this variable inside
any function and I'll come back to why I am
01:55 - doing so.
01:56 - And now I'll write the main method. This
is the entry point to my program.
02:00 - The first thing that I want to do is I
want to see if
02:05 - head is equal to null which will mean
that this pointer variable points
02:09 - nowhere.
02:10 - So right now the list is empty. So far
what we have done here in our code,
02:15 - is that we have created a global
variable named head which is of
02:18 - type pointer to Node and the value in
this
02:22 - pointer variable is null, so So far
02:25 - the list is empty. Now, what I want to do
in my program is that I want to ask the
02:30 - user
02:31 - to input some numbers and I want to
insert all these numbers
02:35 - into the linked list. so I'll print
something like
02:38 - how many numbers? Let's say the user
wants to input n number so I'll
02:42 - collect this
02:42 - number in this variable 'n' and then I'll
define another variable
02:46 - 'i' to run the loop and so
02:50 - I'm running a loop here. If it was C++
I could declare this integer
02:53 - variable right here inside the loop.
02:55 - Now i'll write a print statement like this,
02:58 - and I'll define another variable 'x' and
each time
03:02 - I'll take this variable 'x' as input from
the user
03:05 - and now I will insert this particular
number
03:09 - 'x', this particular integer 'x' into the
linked list, by
03:12 - making a call to the method 'insert' and
then each time we insert, we will print
03:17 - all the Nodes in the linked list, the
value of all the Nodes in the linked
03:21 - list
03:21 - by calling a function named print. There
will be no argument
03:26 - to this function print. Of course we need
to implement these two
03:29 - functions insert and print. Let me first
write down the definition of these two
03:34 - functions.
03:37 - So let us implement these two functions:
insert
03:39 - and print. Let's first implement the
function insert
03:43 - that will insert a Node at the beginning
of the linked list.
03:46 - Now in the insert function what we
need to do is
03:50 - we first need to create a Node. In C we
can create
03:54 - a Node using malloc() function. We have
talked about this earlier.
03:58 - malloc() returns a pointer to the starting
address
04:01 - of the memory block we are having to
type cast here because malloc returns a
04:06 - void pointer and we need a pointer to
Node,
04:08 - a variable that is pointer to Node and
then only if we dereference
04:13 - we derefernce using an Astrix(*) sign
then we will be
04:17 - able to access the fields of the Node,
04:20 - so that the data part will be 'x' and we
have an alternate syntax for
04:24 - this particular syntax. We could simply
write
04:28 - something like temp and this
04:32 - arrow and it will mean the same thing and
this is more common.
04:35 - With these two lines in the insert
function,
04:38 - all we're doing is, we're creating a
Node. Let's say we get this Node and
04:43 - let's assume that the
04:44 - address that we get for this Node is 100.
Now there is
04:47 - a variable temp where we are storing the
address.
04:50 - We can do one thing whenever we
create a Node, we can set data
04:53 - to whatever we want to set and we can set
the link field
04:57 - initially to null and if needed we can
modify the link field.
05:01 - So I'll write one more statement temp->
next is equal to
05:04 - null. Remember temp is a pointer variable here
and we are dereferencing the pointer
05:09 - variable to modify the value at this
particular Node.
05:12 - temp will also take some space in the
memory that's why I have shown this
05:16 - rectangular block for both the pointer
variables head and temp.
05:20 - and Node has two parts: one for the
pointer variable and one for the data.
05:23 - So this part, the link part is null, we can
either write null here
05:27 - or we can write it like this. It's the same
thing. Logically
05:31 - it means the same.
05:33 - Now if we want to insert this Node in
the beginning of the list,
05:35 - there can be two scenarios: one when
the list is empty,
05:39 - like in this case. So the only thing that
we need to do
05:43 - is, we need to point head to this particular Node,
05:46 - instead of pointing to null. So I will
write a statement like head is equal to
05:51 - temp and the value in head now will be
address 100.
05:55 - And that's what we mean when we say a
pointer variable points to
05:58 - a particular Node. We store the address of
that Node.
06:02 - So this is our linked lis, after we insert
the first
06:06 - Node. Let us now see what we can do to
insert a Node
06:09 - at the beginning if the list is not
empty like what we have right now.
06:13 - Once again we can create a Node, fill in
the value
06:16 - 'x' here that is passed as argument.
Initially,
06:19 - we may set the link field as null,
and let's say this
06:23 - Node gets address 150 in the memory and
we have this variable temp through which we
06:27 - are referencing this particular memory
block.
06:29 - Now unlike the previous case, if we just
set
06:33 - head = temp, this is not
good enough because
06:36 - we also need to build this link. We need to
set the next
06:40 - or the link of the newly created Node
to whatever the previous head was.
06:44 - So what we can do is, we can write
something like if head is not equal to
06:49 - null or if
06:49 - the list is not empty, first set
temp->next equal head
06:54 - so we first build this link. The address
here will be 100 and then we say head = temp,
07:00 - so we cut this link and point head to
07:03 - this newly created Node, and this is our
modified linked list after
07:07 - insertion of this second Node at the
beginning of the list.
07:11 - Now one final thing here: this
particular line the third line
07:15 - temp->next = null, this is getting
used only when the list is
07:18 - empty. If you see, when the list is empty
head is already null.
07:22 - So we can avoid writing two statements.
We can simply write this one
07:26 - statement, temp->next = head
07:28 - and this will also cover the scenario
when the list is empty.
07:32 - Now the only thing remaining in this
program to get this running,
07:35 - is the implementation of this print
function, so
07:39 - let's implement this print function.
What I will do here is that I'll create
07:43 - a local variable which is pointer to Node,
named
07:46 - temp and I need to write struct Node here.
I keep missing this.
07:51 - In C, you need to write it like
this and I want to set
07:54 - this as address of the head Node so
this global variable has the address of
07:59 - the head Node.
08:00 - Now I want to traverse the linked list.
so I will write a loop like this:
08:04 - while temp is not equal to null,
08:07 - I'll keep going to the next Node using
this statement temp is equal to temp
08:13 - dot next and at
08:16 - each stage I'll print the value in that Node
08:19 - as temp->data. Now I'll write
08:23 - two more print. One outside this while
loop,
08:27 - and one outside after this while loop to
print
08:31 - an end of line. Now why did we use a
temporary variable? Because we do not
08:35 - want to modify head,
08:36 - because we will lose the reference of
the first
08:40 - Node. So first we collect the address in head
in another temporary variable,
08:44 - and we are modifying the addresses in this
temporary variable using temp is equal
08:48 - to temp->next
08:49 - to traverse the list.
08:52 - Let us now run this program and
see what happens.
08:56 - So this is asking how many numbers you
want to insert in the list.
09:00 - Let's say we want to insert 5 numbers.
Initially the list is empty.
09:04 - Let's say the first number that we want
to insert is 2.
09:07 - At each stage, we are printing the list so
the list is now 2. The first element and
09:12 - the last element is 2.
09:14 - We will insert another number. The list
is now 5 2. 5 is inserted at the
09:18 - beginning of the list.
09:19 - Again we insert 8 and 8 is also
inserted at the beginning of the list.
09:23 - Ok... Let's insert number 1. The list
is now 1
09:27 - 8 5 2. And finally I insert the number 10.
so the final list is 10 1
09:32 - 8 5 2. This seems to be working.
09:35 - Now if we were writing this code in C++,
we could have done couple of
09:39 - things.
09:40 - We could have written a class and
organize the code
09:43 - in an object-oriented manner. We
could also have used new operator,
09:47 - in place of the malloc function. Now,
coming back to the fact that we have
09:52 - declared this
09:52 - head as global variable. What if this was
not a global variable, this was declared
09:56 - inside this main function as a local
variable?
10:00 - so I'll remove this global declaration.
Now this head
10:04 - will not be accessible in other
functions, so we need to pass
10:07 - address of the first Node as argument
to other functions:
10:11 - to both these functions, print and
insert. So to this print
10:14 - method, we'll pass, let say we name this
argument as head.
10:18 - We can name this argument...argument as
head or
10:21 - a or temp or whatever. If we name
this argument as head, this head
10:26 - in print will be a local variable of print
and will not be
10:30 - this head in main. And these two heads
will be different, these two variables will
10:34 - be different.
10:35 - When the main function calls print,
passing
10:38 - its head then the value in this
particular head in the main function is
10:43 - copied
10:43 - to this another head in the print
function. So now in the print function,
10:47 - we may not use this temp variable.
What we can do is,
10:51 - we can use this variable head itself to
10:54 - traverse the list and this should be
good. We're not modifying this head here
10:59 - in the main.
11:01 - Similarly to the insert function we will
have to pass the address of the first
11:04 - Node.
11:05 - And this head again is just a copy. This
is again a local variable,
11:09 - so after we modify the linked list, the
head
11:12 - in main method, should also be modified
and there are two ways to do it.
11:16 - One: we can pass the pointer to Node as
11:19 - return from this method. So in the main
method, insert function will take
11:24 - another argument
11:25 - head, and we will have to collect the
return into head again so that it is
11:29 - modified.
11:30 - Now this code will work fine. Oops, I
forgot to write
11:33 - a return here, return head and we can run
this program like before. We can give all
11:39 - the values and see that the list is
building up correctly.
11:42 - There was another way of doing this.
Instead of
11:45 - asking this insert function to return
the address of head,
11:49 - we could have passed this particular
variable head by reference.
11:53 - So we could have passed insert
&head. head is already a pointer to
11:57 - Node,
11:58 - so in the insert function we will have
to receive pointer to pointer.
12:02 - Node** and to avoid confusion
let's name this variable something else.
12:06 - This time, let's name this pointertohead.
12:08 - So to get head, we will have to write
something like
12:11 - we will have to dereference this
particular variable and write
12:14 - *pointertohead every where and
the return type will be
12:19 - void. Sometimes we want to name this
variable as head,
12:23 - this local variable as head. Doesn't
matter, but we'll have to take care
12:27 - of using it properly. Now this code will
also work.
12:32 - As you can see here, we can insert Nodes
and this seems to be going well.
12:36 - If you do not understand this concepts of
scope, you can refer to the
12:40 - description of this video for additional
resources.
12:43 - So this was inserting a Node at the
beginning of the linked list.
12:46 - Thanks for watching!