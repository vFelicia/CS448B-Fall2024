00:00 - In our previous lessons, we saw what
doubly linked list are.
00:03 - Now in this lesson, we're going to
implement doubly linked list in C.
00:08 - We are going to write simple
operations like insertion,
00:11 - traversal and deletion. In a doubly
linked list as we saw in our previous
00:16 - lessons
00:17 - Each node contains three fields. I have
drawn logical representation of
00:22 - a doubly linked list. One to
store data
00:25 - one to store address of next node and
one to store address of previous node.
00:30 - For a linked list of integers node
will be defined like this
00:34 - in a C or C++ program. In the
logical representation i'll fill in some
00:39 - data in each node.
00:40 - Let's say these node are at address 400, 600
00:44 - and 800 respectively. I'll also fill in
next and previous fields,
00:48 - and we must also have a pointer variable
pointing to the head node.
00:52 - Quite often we name this pointer variable
head.
00:56 - In my implementation I'm going to write
these functions.
00:59 - I'm going to write a function to insert
a node at beginning
01:02 - of head of linked list. This function will
take an integer
01:06 - as argument. I'll write another function to
insert a node at
01:09 - tail of linked list. I'll write one function to
print
01:12 - element in a linked list, while
traversing it from head to tail.
01:16 - I'll write another one to print the
elements
01:19 - in reverse order while traversing the
list from
01:22 - tail to head. Reverse print function
will validate
01:25 - whether reverse link for each
node is created properly or not.
01:30 - Let's now write these functions in a
real C program.
01:33 - In my C program here, I have define node as
a structure with three fields.
01:38 - first field is of type Integer to store
01:41 - data, second field is of type pointer to
node
01:44 - to store a reference of next node and
the third field
01:49 - is a pointer to know to store the
reference of previous node.
01:52 - I have defined a variable named head
which once again is a pointer to node
01:57 - and I have defined this variable in
global scope,
02:00 - head is a global variable. When we defined
a variable inside a function its called
02:06 - a local variable. The lifetime of local
variable is lifetime of
02:10 - a function call, it's created during a
function call execution and it's cleared
02:15 - from the memory
02:16 - when function call execution finishes
but
02:19 - global variables live in the memory for
a whole lifetime of
02:22 - an application, they live till the time
program is executing.
02:26 - Global variables can be accessed everywhere
in all functions.
02:30 - Local variables are not accessible
everywhere unless you access them
02:34 - through pointers. In all our previous
implementations,
02:38 - we have mostly declared head as global
variable.
02:42 - Okay so let's now write the functions.
The first function that I want to write
02:46 - is insert at head. This function
02:49 - will take an integer as argument. The
first thing that we want to do here is
02:54 - we want to create a node, we can always
declare a node like this,
02:58 - just like declaration of any other
variable, we can say
03:01 - struct node and then we can give
03:04 - an identifier or name, and
03:07 - now in this my node that i have created, i
can fill in all the fields
03:11 - but the problem here is that when i'm
creating
03:15 - a node like this, I'm creating it as a
local variable
03:18 - and it will be cleared from memory when
function call will finish.
03:22 - A local variable lives in what we call
stack section of
03:26 - applications memory and we cannot
control its lifetime,
03:30 - it's cleared from memory when function
call finishes.
03:33 - We do not want this. Our requirement is
that a node should be
03:37 - in memory unless we explicitly remove
it. So that's why we create a node in
03:42 - in dynamic memory or what we call heap
section of
03:46 - memory. Anything in heap is not cleared
unless we explicitly
03:51 - free it. To create a node in heap we use
malloc function in C or
03:56 - new operator in C++. All
malloc function does is, it
04:00 - reserves some memory in heap
04:04 - and this memory can be used for writing
anything any variable any object.
04:08 - Access to this memory always happens through
a pointer variable.
04:12 - We have talked about this concept quite
a bit in our previous lessons,
04:16 - but I keep on repeating because this is
really important concept.
04:19 - So here with this statement i have
created a node in dynamic memory or
04:24 - heap,
04:24 - that can be reference through a variable
which is pointer to node.
04:29 - I have named this variable temp. Now I
can
04:33 - used this pointer variable to fill in
values in various fields of the node.
04:38 - I'll have to dereference this pointer
variable using asterisk operator,
04:42 - and then I can access various feilds like
data, prev or next. 
04:47 - There is an alternate syntax for this
04:51 - (*temp).data, we can simply write 
temp->data
04:55 - and similarly I can access other fields
also.
04:59 - So to access prev field, i can say
temp->prev.
05:02 - Let's set this as null and let's
also set the next field as null.
05:08 - If you want to understand or refresh the
concept of
05:11 - stack and heap in memory, then you can
check the description of this video for
05:16 - a link to a lesson on dynamic memory
allocation.
05:19 - Okay so in my function InsertAtHead, i
have created
05:22 - a node in heap section of memory and I'm
referencing that node using this pointer
05:27 - variable named
05:28 - temp. Temp is not have a very meaningful name.
Let's use
05:32 - a name like newNode or newNode
pointer.
05:36 - I would like to separate out this logic
of node creation,
05:40 - these lines for node creation in a
separate function.
05:43 - I've written a function here, named get
newNode that will take an integer as
05:48 - arguement
05:48 - create a node filling in data field as
05:51 - X and setting both previous and next
pointers
05:55 - as null. This function will return a
pointer to node, so
06:00 - i will return new node from here. I'm
writing a separate function because
06:04 - I can avoid duplicate code by using
06:07 - a separate function for creation of node
because I'm going to create a node
06:11 - for function in function InsertAtHead
as well as
06:14 - in function InsertAtTail that i'll be
writing after some time.
06:18 - Now in InsertAtHead function I can
simply call this function GetNewNode  
06:23 - passing it
06:24 - X. This function is returning a pointer
to newly created node 
06:28 - that I'm going to receive in this
variable which once again is a pointer
06:31 - to node
06:32 - named temp. We can name this variable
06:36 - also as newNode. This newNode
06:40 - in InsertAtHead is different from this
newNode in getNewNode.
06:44 - These are local variables, this newNode
is local to InsertAtHead and this
06:48 - newNode is
06:49 - local to getNewNode. Now there will be
two cases in
06:53 - insertion at head. List could be empty so
head will be equal to null.
06:57 - In this case we can simply set head as
to address of new node,
07:02 - and return or exit. Things would be
clear if i'll
07:06 - show everything in logical view also.
Right now
07:10 - my linked list is empty here. In this
logical view that I'm showing,
07:14 - let's say I have made a call to  InsertAtHead
passing it number 2.
07:17 - GetNewNode function will give me a
new node.
07:21 - Let's say a new node is created at address
400.
07:24 - With this statement head equal newNode, we are 
setting the address
07:28 - stored in newNode variable in head.
Null
07:31 - is nothing but address zero. As soon as
this function InsertAtHead finished
07:36 - this variable newNode
07:38 - will be cleared from memory, but the node
itself will not be cleared.
07:42 - If we would have created a node like this,
struct node newNode
07:46 - and in this declaration newNode is not
pointer  to node.
07:51 - Its node, we are not saying struct node*
07:56 - so if we would have created node like this.
The node also
08:00 - would have been cleared. Okay coming back
to the function here, let's write rest
08:04 - of the logic.
08:05 - To insert a node when list is not empty
this is what I'll do.
08:09 - Now I'm making the call InsertAtHead
passing at number 4.
08:12 - Once new node is created, I'll first set the
previous field of
08:17 - existing existing head node as address
of this new node.
08:22 - So I'm building this link, then i'll set the
next field of new node
08:27 - as the address of current head and now I can
break this link
08:32 - and build this link so I'll set head
08:36 - as address of new node. this is how things will
still look like finally.
08:40 - Let's also quickly see how things will
actually move in various sections of
08:45 - applications memory. The memory that is
allocated to a program is typically
08:49 - divided into these four segments.
08:51 - We have seen this diagram quite a bit in
our earlier lessons.
08:55 - Code or text segments stores all the
instructions
08:58 - to be executed. There is a segment to
store
09:01 - global variables. There is a section that
we call stack,
09:05 - that is used just like scratch pad on
whiteboard
09:08 - for function call execution. Stack is where
all the local variable go
09:13 - and not just local variable, all
information about function call 
09:17 - execution.
09:18 - Heap is what we also a dynamic memory.
I'm showing stack heap and
09:22 - global section separately here. In our
program we had to decleared head as a global
09:26 - variable.
09:27 - Initially for an empty list, we will set
head as null or zero.
09:31 - Let's say we will do that in
main function.
09:34 - Now when a call to insert at head is made
at this stage,
09:38 - let's say I'm making the call passing
number two as argument.
09:42 - Let's say we are making a call to
InsertAtHead from main function.
09:45 - When program starts execution first main
function is invoked,
09:49 - whenever a function is invoked some
amount of memory
09:52 - from the stack is allocated for
execution of that function.
09:56 - That section is called stack frame of
that function
09:59 - and all the local variables of that
function live inside
10:03 - it's stack frame. When function call
execution finishes
10:07 - the stack frame is reclaimed. When
main will make a call to InsertAtHead,
10:12 - the execution of main will pause at
10:15 - at the line where it's making a call. A
stacke frame will be
10:19 - allocated for execution of InsertAtHead.
I am writing shortcut
10:23 - IAH for InsertAtHead because
10:26 - I'm short of space here. All the
arguments of
10:29 - insert at had all the local variables
will live inside this stack frame.
10:34 - We are creating a variable name newNode
named newNode which is a pointer to
10:37 - node
10:38 - as local variable and we are making a
call to get newNode function.
10:43 - Execution of InsertAtHead will pause 
and we will go
10:47 - on to execute getNewNode. We could
write GetNewNode like this.
10:52 - Here I'm treating a node on stack. x is a
local variable in GetNewNode also. 
10:58 - Then i'm creating a node filling in
data as
11:01 - the value of X which is 2. i'm setting
previous and next feilds
11:06 - as null or zero and then because I need
to return
11:09 - a pointer to node, I have used &
operator here.
11:13 - Using & operator gives us pointer
to a variable, Let's say this new node
11:17 - that we have in the stack frame of 
GetNewNode, has address 50.
11:22 - With this return when GetNewNode will
finish, the value in this newNode of
11:26 - insert at head will be 50.
11:29 - Please note that with this code this newNode
in GetNewNode function is of type
11:34 - struct node, while this newNode in
11:37 - insert at head is of type pointer to
struct node
11:40 - so there different types. We can return
this address 50, that's fine
11:45 - but the stack frame for GetnewNode
will be reclaimed
11:49 - once the function finishes. So now even
though you have the address 50
11:53 - there is no node there. We cannot control
allocation and the deallocation of memory
11:58 - on stack. It happens automatically that's
why we use a memory on heap.
12:04 - If I'm using this code for creation of
new node, then what I'm doing is
12:08 - I'm declaring this variable new node, not
as
12:11 - strut node but as struct node*
that is pointer to node.
12:16 - I'm using malloc to create the actual
node in heap section.
12:20 - Let's say i'm getting address 400 for this
node. Now for a section of memory in heap
12:25 - for something in heap, we cannot have a
direct name.
12:28 - The only way to access some thing heap
is through a pointer.
12:31 - If we will lose this pointer we will lose
this node.
12:34 - Okay so now what we're doing is using
this pointer new node which is local
12:38 - to
12:39 - GetNewNode function. We are accessing this
node filling in
12:43 - date, filling in address fields and
now the at returning this address
12:48 - 400.
12:48 - Now when GetNewNode is finishing, I'm
collecting the return this address
12:53 - for 400 in this variable in this local
variable newNode.
12:56 - We are returning back to insert at head
function
12:59 - at this line. Head at this stage is null.
So now we're saying that set head
13:04 - equal equal
13:05 - newNode. Head is a global variable, it's
not going to be cleared
13:09 - for whole life time of application and
now we are returning.
13:13 - Stack frame of insert at head will be
cleared and this is what we finally have.
13:18 - When we will make another call to insert
at head, once again
13:21 - fresh stack frames will be allocated in
the execution of functions appropriate
13:26 - links will be created
13:27 - So our linked list will be modified
accordingly.
13:31 - I hope all of this is making some sense.
With another call to insert at head, when
13:35 - everything will finish and control will
return back to main.
13:38 - We can have a picture like this. Let's say
I got a node at 600.
13:43 - Right cell is for next node. Right cell is
storing the address of next node and
13:47 - left cell is storing the address of
previous node. So this will
13:50 - and this is what we will have. Let's now
go and write rest of the functions.
13:54 - Print function will be same as printing for
singly linked list.
13:58 - We will take a temporary pointer to node
initially set it
14:01 - to head, and then we will use this
statement temp=temp->next to go
14:06 - to the next node
14:07 - and we will keep on printing. In reverse
print we will first
14:11 - go to the end node of to list using
next pointer,
14:15 - and then be will traverse backward using
this statement
14:20 - temp=temp->prev. So we will use the previous
pointer and while traversing backward
14:25 - will print
14:26 - the data. Okay let's now test all these
functions that we have written so far.
14:30 - In the main function, i'm setting head as
null to say that the list is
14:34 - empty
14:35 - initially, and now I'm writing couple of
inserts statements.
14:38 - I'm making couple of calls to
InsertAtHead function and after each call
14:43 - i'm printing the list both in forward as
well as
14:46 - in reverse direction. Let's run this code
and see the output.
14:49 - This is what I'm getting and I think
this is as expected.
14:54 - There is one more function insert at tail
that i have said i'll write.
14:58 - if you have understood thing so far, it
should not be very difficult for you to
15:02 - write this function InsertAtTail.
15:03 - I leave this as an exercise for you. I'll
stop here now
15:07 - If you want to get the source code, check
the description of this video for a
15:11 - link.
15:11 - In coming lessons we're going to talk
about circular linked list
15:14 - and we will see some more interesting
problem on linked list.
15:18 - Thanks for watching.