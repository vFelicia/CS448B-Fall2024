00:01 - In this lesson we will write a program to
find the factorial of a positive integer n
00:06 - and we will do so using a very important and
powerful concept in programming called Recursion.
00:13 - The prerequisite for this is that you should
know about functions in programming.
00:18 - Now, as we know in mathematics factorial of
n is defined as the product of all the integers
00:25 - from 1 to n.
00:26 - So, n factorial is written as n * (n-1) * (n-2)
and we go on multiplying with all the integers
00:34 - till 1.
00:36 - Now, we also know that (n-1)*(n-2) all the
way till 1 here, is nothing but (n-1) factorial.
00:46 - So, we also say that n factorial is actually
n * (n-1) factorial.
00:53 - And, this is true for all n greater than 0.
00:57 - Zero factorial is a special case and it is
equal to 1.
01:01 - So, we will write something like this.
01:04 - n factorial is n * (n-1) factorial if n is
greater than 0 and it is equal to 1 if n is
01:11 - equal to 0, and this is nothing but case for
0 factorial.
01:14 - So, we have a function for n factorial here.
01:18 - When we write a function in a simpler form
of itself, we call such a function a recursive
01:24 - function.
01:25 - So, for example we have written here n factorial
in the form of (n-1) factorial.
01:29 - So, this function here is a recursive function.
01:32 - Now, the concept of a recursive function is
also valid in the context of a programming
01:38 - language.
01:39 - So, I will write a recursive function to calculate
factorial here.
01:43 - So, let's say we write a function that returns
an integer and the name of the function is
01:48 - Factorial.
01:51 - It takes an integer as input so, we will say
int n is the input.
01:56 - And, the function goes like if n is equal
to 0, simply return 1, else return n* Factorial
02:07 - (n-1).
02:08 - So, now we can see that within the function
or the method factorial, we are calling the
02:15 - method itself, though with a changed argument
or a reduced argument.
02:20 - So, when we call a method within itself, we
say that such a call is actually a recursive
02:27 - call.
02:28 - Let us now see, how computer understands and
executes this particular method.
02:35 - Let's say we want to calculate factorial 4
and we have passed, we have asked for Factorial(4),
02:42 - and I will write F(4) as shortcut for Factorial(4),
and I will draw two columns here, and I will
02:49 - come back to why I am drawing these two columns.
02:52 - Now, when the computer tries to calculate
F (4) here, it sees that it actually is calling
02:58 - F (3) recursively.
03:00 - So, what it says that "Hey, I will pause the
execution of this particular function F (4),
03:06 - and I will go and calculate F (3) first".
03:09 - So, it saves the current state of F(4) into
memory, and goes on to calculate F(3).
03:17 - Now, F(3) again makes a call to F(2).
03:21 - So, machine or computer again pauses this
execution of F(3) and goes to calculate F(2).
03:28 - Now, F(2) again makes call to F(1), so we
pause this again, and we keep going.
03:35 - F(1) again calls F(0), now when we come to
F(0), then there is no recursive call further,
03:43 - and if you can see in the left, then this
condition holds true.
03:46 - So, n is 0 here, and we simply return here.
03:50 - So, this F(0) was kind of a base condition,
and if it was not there, then this particular
03:57 - recursion would have gone endlessly.
03:59 - Now, F(0) simply returns 1 here, and it finishes
and computer again resumes F(1).
04:05 - And, because we have got F(0) now, and now
it calculates F(1) and now F(1) finishes.
04:12 - And F(2) is resumed, this R here is for Resume,
now, F(2) is calculated, and it returns back
04:21 - the value, 2.
04:22 - Now, as F(3) finishes, i am sorry, F(2) finishes,
F(3) resumes and it finishes, and finally,
04:31 - we get back to F(4).
04:33 - Now, f(4) finishes and returns back probably
to the main method.
04:37 - Now, let us quickly try to see this in an
actual compiler in an actual C++ code.
04:44 - Now, I have written a method Factorial, that
takes as input n, and returns an integer here.
04:50 - I am using Visual Studio Compiler, and if
you use some other compiler or some other
04:54 - syntax of writing C++, you will still get
the logic right.
04:58 - So, what I will do here is that, I will take
an input n, from the user, so I will ask the
05:06 - user that "Hey, give me an n!" and i will
input this n, and then I will have another
05:17 - variable result, that will make a call to,
that will store the output after Factorial(n)
05:24 - returns, and we will simply print this result.
05:28 - Now, let us run this and see what happens.
05:32 - So, let's give n=5.
05:36 - And this gives us as output 120, which is
Factorial(5).
05:40 - Now, I will try to do something else here,
i will first remove this else condition, because
05:45 - it is redundant, we do no need to put this
because once we return something, the program
05:52 - does not execute any further in that function.
05:55 - Now, what I will do is that, I will have a
variable say f, that will store this particular
06:02 - value, and we will return this F here.
06:07 - Now, I will try to write two statements, one
in the beginning.
06:12 - I will say that "I am calculating F(n).
06:17 - And, one, after this recursion is complete,
and I have the value in F, I will say that
06:26 - I am done and F(n) is actually equal to
F, I will put an endline here.
06:38 - So, basically what I am trying to do here
is that when I am entering this function,
06:41 - I am printing something like "I am calculating
F(n)", So, if n is 5, we say "I am calculating
06:48 - F(5) and then F(4) and so on".
06:51 - And, when I have this particular value, F,
then I am saying that ok, now I have F(5)
06:56 - is equal to this.
06:57 - Let's quickly run this programme, and see
what happens, So, let me give an input, and
07:04 - this time again we will give 5.
07:05 - Now, let us see, what we are printing here
or rather the program is printing here, It
07:11 - says first that, I am calculating F(5), but
it does not say immediately in the same function,
07:17 - that I am done with F(5).
07:19 - It kind of pauses here, and it goes to calculate
F(4), similar to what we have shown you earlier,
07:25 - and then again it does not say I am done with
F(4), it goes on to calculate F(3), and then
07:29 - F(2) and then F(1), finally to F(0).
07:31 - And, for F(0) we have not printed anything
here, that I am done or something, so, first
07:38 - F(0) finishes, then F(1) finishes, and we
come back finally like F(2), F(3), F(4) and
07:45 - F(5), and finally F(5) is 120.
07:48 - Now, a very common error while doing recursion
is that, when we do not take care of the base
07:53 - condition well ,or rather, the termination
condition for the recursion well.
07:58 - So, if you do not write this termination condition
well, your recursion could go on endlessly
08:04 - causing your memory to overflow and your program
to crash.
08:08 - So, a lot of things happen behind the scene
when you write recursion.
08:13 - Recursion is often very simple to write, and
easy to read, but it's really really important
08:17 - that we understand all the things that happen
behind the scene.
08:21 - In the next lesson, we will show you another
implementation of recursion, which is Fibonacci
08:26 - sequence and we will show you what other things
to take care of while writing recursion.
08:32 - And why recursion may not be the best thing
to write always!
08:36 - So, Thanks for watching!