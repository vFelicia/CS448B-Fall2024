00:00 - In this lesson we will talk about
00:02 - one of the most famous, and
00:04 - fundamental algorithms in computer science
00:07 - binary search
00:09 - We find application of binary search
00:11 - in a large number of problems in a large
00:13 - variety of problems in computer science
00:16 - but here let's try to learn it
00:18 - in it's simplest form
00:20 - and to do so, we will define a problem first.
00:24 - And the problem is
00:25 - given a sorted array of integers
00:28 - a sorted array means that
00:30 - the elements in the array are arranged
either in increasing order or in decreasing
00:33 - order
00:34 - like in this array here the elements are arranged in increasing 
00:38 - order
00:38 - let's say the name of this array is A
00:41 - the size of
00:42 - this array is nine so we have
00:45 - index starting zero 
00:47 - till eight
00:48 - now given such an
00:50 - array and a number or an integer x
00:53 - we want to find out whether x exists
in this array or not and if
00:58 - x exists in this array, then we want to
find out the position at which x exists
01:03 - in this array
01:05 - so for example
01:06 - if x is 81
01:08 - does 81 exist in the array
01:10 - yes 81 exists
01:12 - in the array A and
01:13 - it exists at
01:15 - index seven
01:17 - Does twenty five exist in the array. No. 
twenty-five does not exist in the array
01:21 - Does twenty one exist in the array, yes twenty one exists
01:24 - in that area at position
01:26 - three, at index three
01:29 - now what would be the logic to find out
whether x
01:32 - exists in this array or not
01:33 - one simplest approach can be
01:35 - that we can 
01:37 - scan the whole array
01:39 - to find out the desired number
01:41 - so we start at index zero
01:43 - and compare this element with x
01:45 - if it is equal to x, then we are
done with our search, we are, we have found the element in the array
01:50 - if not we go to the next element
01:52 - and we keep on comparing with the next
element until
01:56 - either we are finished with the array
01:58 - or we find the number
02:00 - so let's say if we wanted to find
sixty-three in this array then our
02:04 - search will be over when we reach index six
02:08 - we start at index zero and our search will be over at index six
02:11 - if we wanted to find out twenty five
02:13 - our search
02:15 - will be over at index eight with
the conclusion that twenty five does not
02:18 - exist in the array
02:20 - this approach will work irrespective of
whether the array is sorted or not and
02:25 - if i have to write the code for this
02:27 - it will be pretty straightforward let's
say i want to write a method Search
02:31 - that takes an array A
02:34 - it's size n
02:36 - and the element
02:37 - sorry, the number x to be searched for and
02:41 - the code would be
02:42 - we will run a loop starting 0 till n-1
02:46 - so for i starting 0 to n-1, if
02:50 - the
02:51 - element at index i is equal to x
02:54 - then we return i
02:56 - which means returning the position
02:58 - at which we have found the element x
03:00 - and our search will be over
03:02 - and if we cannot find any such i then
03:05 - we return -1
03:06 - let's say returning -1 means that we could not find the element
03:09 - we could not find x
03:11 - in the array A
03:13 - Now, with this algorithm, if we are lucky
03:16 - we will find
03:17 - x at the first position itself
03:19 - so in the best case we will make only one comparison and we will
03:23 - we will be able to find the result. In the worst case when x
03:27 - would not even be
03:29 - present in the array, we will
03:31 - scan the whole array, we will make n comparisons
03:34 - with all the elements in the array and
then we will be able to
03:37 - give back a result that hey x does not
exist in the array
03:40 - so the time taken in the worst case is
definitely proportion to the
03:45 - input size of the array
03:47 - sorry, size of the array
03:48 - one in other words we see that this
would be
03:51 - big-oh of n in terms of time complexity
03:55 - it's always good to analyze the running time of an algorithm in the worst case and
03:59 - find out the upper bound of the time taken
04:02 - now in this case the time taken grows
04:04 - as a linear function of n
04:07 - so, we also call this
04:08 - search
04:09 - linear search
04:11 - and once again
04:12 - if we are using linear search, we are not using any property
04:15 - like the array is sorted or not
04:17 - whether the array is sorted or not, this will work
04:20 - now let us try to improve this algorithm
04:23 - using the extra property of the array
04:25 - that it is sorted
04:27 - and i will make some space here first
04:30 - let us say we want to find out
04:32 - whether thirteen
04:33 - number thirteen exists
04:36 - in the array A
04:37 - so x is thirteen
04:40 - and we want to find out whether x exists
in the array A
04:44 - now we will use a different approach this
time, instead of
04:47 - instead of comparing x with the first
element as we do in the case of linear
04:51 - search, we will compare it with the middle
element in the array
04:55 - Now the size of this array is nine, so the middle element will be at index four
05:01 - Now, there can be three cases here
05:03 - case one
05:04 - can be that x is equal to
05:07 - the middle element
05:09 - if x is equal to the middle
element, we have already found
05:12 - x in the array
05:14 - case two can be
05:16 - when x is
05:18 - less than the middle element
05:20 - and case three can be
05:23 - that x is
05:24 - greater than the middle element
05:28 - clearly if
05:29 - x is equal to the middle element, our
search is over
05:33 - because we have found x in the array
05:35 - if x is less than the middle element
05:38 - then because the array is sorted
05:40 - it lies before the middle element
05:42 - and we can discard
05:44 - the middle element
05:46 - middle element and all the elements after middle element
05:49 - similarly if x is greater than the middle element
05:52 - it lies
05:53 - after the middle element so we can
discard all the elements
05:57 - before the middle element and of course
the middle element as well
06:00 - so in case 2 and 3,
06:02 - we discard half the elements
06:05 - from our search space and reduce our search space
06:08 - so in this example when x is 13, initially our search space is the whole
06:13 - array, x can exist anywhere in the array
06:15 - Now, we compare it with the middle element
which is thirty six
06:19 - Now, x is less than thirty six, so it exists
06:21 - it should exist somewhere
06:23 - before thirty six, so we discard all the elements
06:27 - after thirty six
06:30 - and thirty six as well
06:33 - so now the problem gets redefined, we
need to search
06:36 - x only 
06:37 - between index zero to three
06:41 - so how do we keep track of the search
space
06:44 - we keep track of the search space using two indices
06:47 - start and end
06:49 - so initially
06:50 - the start would be zero
06:53 - and end would be
06:55 - the last element in the array, in this case the index eight, because initially
06:59 - the whole array is our search space
07:01 - and we calculate mid as
07:04 - start plus end upon 2
07:07 - now once we find out our reduced search space
07:10 - we adjust start and end
07:13 - accordingly, so in this case
07:14 - after comparing 13 with 36 and
discarding half of the array, our end
07:19 - now becomes
07:20 - index three
07:22 - which is nothing ..mm. but
07:24 - one less than the middle element
07:26 - now we again find out the middle element
in this  reduced search space
07:30 - so here the middle element will be three
plus zero by two, if we take only the
07:34 - integral part three plus
07:36 - zero by two would be one point five
and if we take the integral part
07:39 - the middle element will be
07:41 - index one
07:42 - once again is it equal to x
07:45 - no, six is not equal to thirteen
07:47 - is x less than the middle element, is it case two?
07:50 - no it is not
07:51 - x is greater than the middle element
07:54 - so this time we discard the middle elemet and  all the elements towards its left
07:59 - and this time we shift start
08:01 - to mark our new search space
08:03 - now the new search space is
08:05 - starting at index two and ending at index
three
08:09 - now what is the middle element, three plus 2 is five, five by two is
08:13 - two point five and
08:14 - the integral part is two
08:16 - so this is our middle element
08:19 - so x is now equal to middle element. We have found our element
08:22 - So, we are done with our search. 
08:27 - this kind of search where we reduce the search space into half at each comparison
08:33 - is called binary search
08:34 - once again, we are able to reduce the search space
08:37 - by two
08:38 - or in other words
08:39 - we are able to reduce the search space into half
08:42 - only because the array is sorted
08:44 - array being sorted is a precondition for binary search
08:47 - Ok, so let us now write code for this algorithm
08:51 - I will write a method
08:53 - binary search
08:54 - that will take as argument
08:56 - an array A
08:58 - it's size n
09:00 - and a number x to be searched for in the array
09:03 - and i will initialize 2 variables
09:06 - start
09:07 - to 0, and end to n-1, so start and end
09:12 - define our search space, initially the whole
array is the search space
09:16 - now i will write a condition here while
09:19 - start is less than or equal to end
09:22 - and i'll come back to why I am writing
09:24 - this condition
09:26 - so while this is true, start is less than or equal to end
09:29 - we will find out the middle
09:33 - index of the search space
09:36 - as start plus end upon 2
09:38 - and now we will write three cases
09:40 - if the middle element is equal to x
09:43 - then our search is over
09:45 - we return 
09:47 - the index stored in the variable mid and
09:50 - exit from the function
09:52 - if x is less than the middle element
09:55 - then we need to discard all the
elements
09:57 - having index greater than or equal to
mid
10:00 - so our end of the search space now becomes
10:03 - mid minus one, and
10:07 - in the third condition
10:08 - which will be
10:10 - x greater than the middle element
10:12 - which will be the default condition after
these two if and else if
10:16 - we need to discard all the element with index
10:19 - less than or equal to mid
10:20 - so our
10:21 - start becomes
10:23 - mid plus one
10:28 - and if we exit this while loop without returning anything
10:32 - then we return minus one which will
mean that we were not able to find the
10:36 - element x
10:38 - in the array
10:40 - now why this while statement here
10:43 - with a condition start less than or equal to end
10:46 - what we are basically doing in our algorithm is
that we are reducing our
10:49 - search space recursively
10:51 - by adjusting the start and the end pointer. Now there must be an exit condition
10:56 - to our recursion
10:58 - the exit condition can be, either we find
the element in the array, so
11:01 - we return and exit
11:03 - or we exhaust the whole search space
11:06 - when start is equal to end
11:08 - or start is less than..mm..
11:10 - end
11:10 - then we still have search space. When start is equal to end, 
then our search space has only one
11:16 - element
11:17 - so
11:18 - when this condition becomes false, we have exhausted our search space, we need to
11:22 - exit the loop and we
11:24 - need to return -1
11:25 - to tell that the element
11:27 - uh... the number x does not exist in the
array
11:30 - now once again in this case in the best
case
11:33 - we can find the element x in just
one comparison,when the first middle
11:37 - element itself will be
11:38 - the element x
11:40 - in the worst case we will keep reducing the search space
11:43 - till the search space become one element
11:46 - so from n, we reduce to n/2 and
11:49 - from n/2, we reduce to n/4, and we go on
11:52 - till our search space becomes one
11:55 - now how many step does it take
11:57 - let's do some maths here. Let's say it takes k steps
12:01 - to reduce n to 1
12:05 - by dividing by two at each step
12:07 - so n by two upon k will be equal to one
12:11 - and if you solve this
12:12 - then k will be equal to log of n
12:16 - the base will be 2
12:17 - so in the worst case
12:19 - binary search will take log n comparisons
12:22 - and so the time taken also in the worst case is proportional to log n, or
12:25 - in other words
12:27 - uh... it is big-oh of log n in terms of time complexity
12:31 - and big-oh of log n is a lot lot more efficient than
12:35 - uh...  O(n) algorithm
12:37 - so this was binary search, we will take
more problems
12:40 - on binary search in the coming lessons.
12:42 - Thanks for watching !