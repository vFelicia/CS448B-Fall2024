00:00 - In the previous lesson, we saw how to verify
whether a given number n is prime or not using
00:07 - trial division method. Now, in this lesson,
we want to solve a problem where we want to
00:13 - find out all the prime numbers up to a given
number n. So, I want to write a method say
00:21 - FindPrimes that should take an argument n
and it should give me all the prime numbers
00:29 - till n. Now, we can do so using the trial
division method. What we can do is lets say
00:36 - we start with an empty list A and we can say
that for all i from 2 to n, if i is prime,
00:49 - and lets say we want to decide whether i is
prime or not by calling a method IsPrime that
00:55 - verifies whether this number i is prime or
not using trial division method and if it
01:02 - is prime, we add i to list A. And let us say
, IsPrime(x) verifies primality of x through
01:13 - trial division. Ok, so what will be the time
complexity of this particular algorithm? Now,
01:20 - as we know in trial division method, we try
dividing a number by all numbers till sqrt(n)
01:27 - to test for primality. So, the complexity
of this particular method is big-oh of sqrt(n).
01:35 - Now, this method is canned n-1 times here
in this loop. So, the overall time complexity
01:41 - of this particular function would be big-oh
of n*sqrt(n) because the running time of a
01:50 - loop is the number of times the loop runs
multiplied by the complexity of the statements
01:56 - inside. And big-oh gives us upper bound of
the time taken, so because this loop run almost
02:02 - n times, so this is n*sqrt(n). Ok, so this
was one way of finding out all the prime numbers
02:08 - and this was using trial division. Now, there
is another algorithm which is simplest and
02:15 - one of the most efficient algorithms to find
out all the prime numbers up to a given number
02:21 - and the name of this algorithm is Sieve of
Eratosthenes. And this is an ancient algorithm
02:28 - named after a Greek mathematician Eratosthenes.
What we do in this particular algorithm is
02:35 - that wee first create a list of all the numbers
from 2 to n and initially say that all of
02:43 - them are prime. So, if n is say 15, then we
create the list of numbers from 2 to 15 and
02:53 - initially we say that all of them are prime.
Now, we start with the first element in the
02:57 - list which is 2. Now, if 2 is prime, all the
multiples of 2 cannot be prime. So, what we
03:05 - do is we strike off all the multiples of 2.
So, 4,6,8,10,12 and 14 are struck off. They
03:16 - are not prime because they can be divided
by 2. Now, we go to the next remaining number
03:22 - in the list which is not struck off. So, we
go to 3. Now, 3 is a prime, so all the multiples
03:29 - of 3 cannot be prime, they need to be struck
off. So, we strike off 6. It is already struck
03:35 - off, but that's fine, that doesn't matter.
So, we strike off 9 now. And we strike off
03:44 - 12 again and 15 goes away as well. Now the
next remaining prime number in this list is
03:51 - 5. Multiples of 5 are 10 and 15 which are
already struck off. The next remaining number
03:57 - is 7. the only multiple of 7 , 14 is already
stuck off. Now, the remaining number is 11
04:05 - and 11 has no multiple in this range. And
13 also does not have any multiple in this
04:11 - range. Now, all these remaining numbers are
prime. And let us now write code for this.
04:19 - And I will clear this in the left. In an actual
code, what we will do is, we will first declare
04:24 - an integer array, lets say the name of the
array is Primes of size n+1. In C or C++,
04:32 - you cannot keep a variable inside this bracket
while declaration, but lets say for the sake
04:36 - of understanding, you know how to declare
a dynamic array or you can keep an array of
04:42 - some maximum size and use only n+1 elements
in it. So, what we will initially do is, for
04:50 - all indices starting 0 to n, we will set primes[i]
= 1. And lets say, if primes[i] is 1, then
04:59 - i is prime and if primes[i] is 0, then i is
not prime. So, initially all the numbers,
05:06 - from 0 to n are prime. Now we know that 0
and 1 are not prime. So, initially we will
05:12 - say that, now after we exit this loop, set
primes [0] =0 and also set, primes[1] to 0.
05:21 - Ok, now we will run a loop starting 2 to n
and now we will write the logic of the striking
05:29 - off that we have done in the right here. So,
we will say that if primes[i] is 1, then i
05:35 - is prime. We need to set all the multiples
of i as zero which will mean that they are
05:43 - not prime. So, I will write another loop here.
Lets say j is the multiplier to i, so in all,
05:51 - the validation should be i*j<=n and we keep
incrementing j. So, in the first loop, we
05:58 - will have. Ok, so we will set something like
primes[i]*j equal 0. So, in the first loop,
06:09 - in the first execution of the loop, we will
set 2*i to 0, and then 3*i to 0 and we will
06:15 - go on incrementing j till the time i*j is
less than or equal to n. Ok, so finally when
06:22 - we exit this loop, we will be able to strike
off all the non-primes by setting 0 at their
06:30 - index in this particular array and finally,
we will be able to say that if primes[i] is
06:39 - 1, then i is prime and thus we have all the
prime numbers up to n. Now, there is one more
06:46 - optimization possible here. As we know and
as we had talked about in the previous lessons
06:52 - that if we cannot find a factor of n till
sqrt(n), then n is prime. This happens because
07:01 - the factors of a number exist in pairs, so
there will always be 2 factors such that,
07:07 - 2 factors a and b such that a*b = n and one
of the factors will be less than sqrt(n) and
07:13 - another one will be greater than or equal
to sqrt(n). Sorry, one will be less than or
07:19 - equal to square root of n and another will
be greater than or equal to sqrt(n). Whats
07:24 - happening here in this algorithm is that a
number is being struck off by one of its factors,
07:31 - but if a number is not struck off till square
root of itself, then it will not be struck
07:37 - off later. For example, 15 which is the largest
number in this case is struck off by 3, the
07:44 - divisor here is 3 which is less than square
root of 15. Square root of 15 will be 3 point
07:49 - something. So, this gives us an optimization.
We can run this particular loop only till
07:59 - sqrt(n) and that should be enough. n is the
highest number in the list and if at all a
08:06 - number has to be struck off, it will be struck
off by a divisor less than or equal to its
08:12 - square root. Let us now analyze the time complexity.
The time complexity would be contributed by
08:18 - these two loops - one loop here which will
run n times and second is the running time
08:24 - of this nested loop and rest of the cost will
just add up as constant. Now, finding the
08:29 - running time of this nested loop is a little
tricky. As we running time of the loop is
08:34 - the running time of statements within the
loop. So, we need to see how many times this
08:38 - statement within the second loop executes.
For i = 2, we will strike off n/2 elements.
08:45 - So, this statement or the inner loop will
execute n/2 times. For i = 3, we will strike
08:50 - off n/3 elements. So, we will have something
like the overall number of times this nested
08:57 - loop will run will be something like n/2+n/3+n/5+
all the prime numbers will come in denominator.
09:05 - And we will have a series like this. Ok, so
you can search on Wikipedia for time complexity
09:10 - of Sieve of Eratosthenes and you will find
a proof that this is equal to big-oh of n*log
09:20 - log n and we are not going into the detail
mathematical proof of this here. So, the overall
09:27 - complexity will have this O(n) added as well
which will be the complexity of the first
09:33 - loop that we have but since O(n) is a lower
order term than this expression O(n*log log
09:39 - n), so overall complexity of Sieve of Eratosthenes
is O(n log log n). So, this was Sieve of Eratosthenes
09:50 - for you. Thanks for watching !