00:00 - in this lesson we will try to analyze
time complexity
00:05 - of recursion to calculate x to the power n 
00:08 - in the previous lesson we had seen two different recursive approaches to calculate
00:11 - x to the power n. We will try to deduce time complexity for both
00:16 - of them
00:17 - mathematically
00:18 - now the first approach that we had seen
was this
00:22 - we had defined a recurrence relation
00:25 - where we had
00:26 - expressed x to the power n
00:29 - as x *(x^n-1) 
00:32 - and n is equal to zero was our base condition
00:35 - so in the program
00:36 - it goes like, if n is 0
00:38 - then simply return 1 else
00:40 - make a recursive call to calculate x to the power n minus 1 
00:45 - multiply it with x
00:46 - and return the output
00:48 - now once again when we try to analyze time
complexity
00:51 - we say that each simple operation
00:54 - costs us one unit of time so
00:56 - any of the arithmetic operations like
addition subtraction or a comparison
01:01 - all of these
01:02 - cost us one unit of time
01:04 - now in this particular program as you
can see
01:07 - there is a comparison let's say takes one unit of time
01:10 - so if n is greater than zero then we
first compared it with 0
01:15 - then we make a recursive call
01:17 - and we make a subtraction to pass the arguments so this is one unit of cost
01:21 - and this multiplication is say one unit of
cost
01:24 - and let's say all other costs are negligible
01:27 - then if we were not making a recursive call
01:30 - then the cost would have been only three
units
01:33 - or the cost would have been some
constant
01:37 - but because we are making a recursive call
the time taken varies
01:41 - now it should also be evident to you 
that the time taken
01:44 - does not vary because of x
01:47 - it varies only because of n
01:49 - because it is n that is deciding
that how many times the recursion
01:53 - would be called or what would be the
01:56 - depth of the recursion tree
01:58 - so for example if we want to calculate
x to the power 4
02:02 - then we go on making recursive calls
like this
02:06 - so we have five calls
02:08 - in calculation of x to the power 4
02:10 - similarly in calculation of x to the power 2
02:13 - there would be
02:14 - three calls
02:15 - so the time taken by this program is only a function of n
02:20 - so let's say
02:22 - time taken is
02:24 - T(n) for an input n
02:28 - so T(n) would be equal to the time taken
to calculate x to the power n-1
02:32 - which will be T(n-1) plus
02:35 - some constant time let's say it's equal
to c
02:38 - for the simple operations like comparison and multiplication and subtraction
02:43 - and this is true for all n
02:45 - greater than 0
02:47 - and for our base case which is T(0)
02:49 - there is just one comparison with zero
02:52 - and returns so let's say this
02:54 - one unit of time
02:57 - now let's try to solve this recurrence
relation
03:00 - and try to express it in terms of the
base condition
03:03 - which is T(0)
03:04 - now this is pretty straight forward
03:07 - T(n-1) can be written as T(n-2) + c
03:09 - so this will be T(n-2) + 2c
03:14 - and we can go on like T(n-3) + 3c
03:16 - or if we want to write it some generic form then
03:21 - T(n-k) + k*c
03:24 - now we want to express this in terms of T(0)
03:26 - so in that case
03:28 - n-k will be equal to zero
03:31 - that will imply k will be equal to n
03:34 - so eventually T(n) will be equal to
03:37 -  T(0) + n*c, where c is a constant
03:40 - and T(0) is nothing but one so this will be 
03:43 - n*c + 1, overall
03:46 - so clearly the time taken is
03:48 - proportional to n
03:49 - and this is also
03:51 - big O(n) or order of n in terms of time complexity
03:55 - now let us try to analyze the second approach
03:58 - to calculate x to the power n
04:00 - so this time we had expressed
04:03 - x to the power n as
04:04 - x to the power n by 2 into x to the power n by 2 if n is even
04:09 - x into x to the power n minus one if n is odd
04:12 - and one for the base case
04:14 - which is n equals to zero and the
program goes something like this
04:18 - if n is 0 return 1
04:20 - if n is even
04:22 - calculate x to the power n by 2
04:25 - and return its square
04:28 - else make a recursive call to calculate
x to the power n minus one and
04:32 - return the product of it with x
04:34 - so again like the previous case the
time taken is a function of n 
04:38 - and it does not
04:38 - depend upon the x
04:40 - in this case as well
04:42 - let's say the time taken is T(n)
04:45 - now if n is even then we make a
recursive call to calculate
04:49 - x to the power n by 2, so wecan say
that
04:52 - T(n) is equal to T(n/2) plus
04:55 - some constant time for the simple operations like
04:58 - comparison division or modulo
05:01 - so let's say this constant is c1 this time
05:04 - and this is true if n is even
05:06 - if n is odd then we make a recursive call to calculate
05:10 - x to the power n minus one, so
05:12 - T(n) would be T(n-1) plus
05:15 - some constant time for the simple
operation let's say this constant is
05:18 - c2
05:20 - and for the base case we have
05:22 - T(0)
05:24 - there is just one comparison so let's
say this takes
05:26 - one unit of time
05:28 - now if n is odd then n minus one must
be even
05:32 - so for the second case when n is odd we
can also write this as
05:36 - T(n-1) by 2
05:41 - plus c1
05:42 - so for the odd scenario T(n) can be equal
to
05:46 - T(n-1/2) plus c1 plus c2
05:50 - now if n is an integer and we take only the integral part then we can also write this as
05:53 - T(n/2), T(n-1/2) is
05:56 - T(n/2)
05:57 - if n is always odd
06:00 - and we can write c1 plus c2 as some other constant c
06:03 - and this is similar to even case except
that the constant has changed
06:07 - and because c is
06:09 - greater than c1 so this
06:11 - solving this particularly recurrence relation
will
06:13 - give us an overall
06:15 - analysis of the upper bound of the time taken
06:19 - which is fine because we often analyze
the closest  upper bound of the
06:23 - time taken in complexity analysis
06:25 - now let us try to reduce this expression
06:28 - T(n/2)
06:29 - can be written as
06:31 - T(n/4) plus c so this will be
T(n/4) plus 2c
06:36 - and we can go on reducing like this
06:38 - we can write this as
06:40 - T(n/8) plus 3c and if i have to
make it in some generic form then this
06:44 - can be written as
06:46 - T(n) by 2 to the power k
06:48 - plus k into c
06:51 - now if n is a positive integer and if we
go on dividing it by 2
06:55 - so if we go from T(n/2) to T(n/4) and T(n/8) and
06:59 - so on we can never reach T(0) so let us  define one more base case
07:03 - here
07:04 - let's define T(1)
07:06 - and this will be equal to
07:07 - one is odd
07:09 - this will be equal to
07:10 - T(0) plus one
07:12 - and T(0) is nothing but
07:13 - one so this will be one plus
07:16 - C2
07:17 - by this particular recurrence relation here
07:19 - now let us try to express
07:21 - T(n) in terms of T(1)
07:23 - in that case n by 2 to the power k
07:26 - will be equal to one
07:28 - that will imply 2 to the power k is n or k
07:30 - is
07:32 - log n to the base 2
07:34 - so T(n) can be written as
07:37 - T(1) plus c logn where c is a constant and T(1)
07:41 - is also a constant which is equal to 
07:43 - one plus c2 so the overall expression is 1 plus c2 plus c logn where
07:47 - c and c2 are both constants so
07:51 - we can see here that
07:54 - time taken T(n) is proportional to logn
07:57 - so this is a big O of logn
08:00 - algorithm or order of logn algorithm
08:02 - in terms of time complexity now there was a similar
08:05 - problem that we have solved
08:07 - which was to calculate modular exponentiation 
08:10 - and in that problem also we solve
08:12 - the same recurrence relation T(n)
08:15 - is equal to T(n/2) plus c
08:17 - so the complexity for that algorithm is O(logn) as well
08:21 - an order of logn is the best time complexity to have
08:25 - thanks for watching