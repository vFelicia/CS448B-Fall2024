00:00 - So far in this series on sorting algorithms,
we have talked about 3 of the sorting
00:05 - algorithms - selection sort, bubble sort and
insertion sort. And we have seen that these
00:13 - algorithms are not so fast, they're all O
(n^2) in average case. Now in this lesson,
00:21 - we're going to talk about one algorithm which
is O(nlogn) in worst case and this algorithm
00:30 - is Merge Sort, O(nlogn) in worst case is definitely
a lot better, a lot faster than O(n^2) in
00:39 - average case. So, in this lesson, we will
study, discuss and analyze Merge Sort Algorithm.
00:46 - There's one pre-requisite for this lesson.
You should have at least heard about recursion
00:53 - as a programming concept. Ok, so let's get
started. Once again, I will pick up a very
00:58 - simple sorting scenario. Given a list of integers
in a form of an array, something like this.
01:05 - Let's name this array A. We have 8 elements
in the array. So, we have indices from 0 to
01:10 - 7. We want to sort this list in increasing
order of value of integers, so the list should
01:16 - be rearranged like this. Our approach in Merge
Sort Algorithm will be entirely different
01:24 - from what we've done in previous sorting algorithms,
where we're rearranging the elements or changing
01:30 - their positions only by swapping or shifting.
What we're going to do here is we're going
01:35 - to break this problem into sub problems. We
will divide this array into two equal halves,
01:42 - or rather two possibly equal halves. So, we
will find some middle position and we can
01:48 - say that all the elements before this position
belong to the first half and all the elements
01:53 - after, on or after this position belong to
the second half. If an array would've odd
01:59 - number of elements, one of the halves will
have more elements than the other half. We've
02:04 - 8 elements in the original array here. So
we've two equal halves. Now think about this,
02:10 - what if we are somehow able to sort these
two halves, and let's say these two halves
02:15 - are entirely different arrays. They are created
separately in memory by copying values from
02:21 - the original array A. If we're somehow able
to sort these two arrays, then we can merge
02:27 - these two lists together in original list
in sorted order. Of course, there has to be
02:34 - some algorithm to merge two sorted arrays
into a third array in sorted order. The algorithm
02:41 - will be pretty straightforward, let's say
this particular sub array is named L and this
02:47 - particular sub array is named R; L for Left
and R for Right. Because all the elements
02:52 - in A are present either in L or R, we can
start overwriting A from left to right. We
02:59 - can start at 0th position in A. At any point,
the smallest element will be either the smallest
03:06 - 'unpicked' in L, or the smallest 'unpicked'
in R, and let's say we colour code the smallest
03:13 - 'unpicked' in L and R by this yellow colour.
What we can do is we can pick the smaller
03:20 - of the two smallest 'unpicked in L and R.
We've two candidates here - 1 and 3. 1 is
03:27 - smaller, so we can write 1 here at 0th index.
And now we can look for the number to fill
03:32 - at 1th index in A. Let's say, the cells of
the 'picked' elements will be colour coded
03:38 - in green. If I have to write 'pseudo-code'
to merge the elements of the two sorted arrays
03:44 - into a third array, let's say we want to write
a function named 'Merge' that will take three
03:52 - arrays as arguments - Left(L), Right(R) and
the array(A) in which it should be merging
03:57 - two sorted arrays- Left(L) and Right(R). Then,
I will do something like this; I will take
04:02 - the variable that will store the number of
elements in L, and another variable that will
04:09 - store the number of elements in R. In a real
program, we can also pass these two values
04:14 - to the function. Now, I will take three variables
-- I, j and k; and initialize them all to
04:22 - 0. Let's say, I will mark the index of the
smallest 'unpicked' in L, 'j' will mark the
04:31 - index of the smallest unpicked in R and k
will mark the index of the position that needs
04:38 - to be filled in A for our example here at
the stage of i=1, j=0 and k=1; because we've
04:48 - already filled one element at index 0 in A.
But when we will start, we will start with
04:53 - all three i, j and k as 0. And now, my code
will go like, while i < nL, where nL is the
05:03 - number of elements in L, for i to be a valid
index it should be less than nL, and similarly
05:09 - for j to be valid, it should be less than
nR. So, while both these two indices are valid,
05:15 - both these indices i and j are valid, we can
say something like if L[i] is less than or
05:20 - equal to R[j], so we are comparing the smallest
in, or rather the smallest 'unpicked' in L
05:27 - with the smallest 'unpicked' in R. In this
case, at kth position in A, we will write
05:34 - L[i], remember we are overwriting A and that's
not a problem and now I need to increment
05:40 - k and need to go to the next position, and
I also need to increment i to go to the next
05:46 - unpicked in L. And if the condition is not
true and R[j] is less than L[i], then A[k]
05:54 - will be R[j]. And once again, we need to increment
k and we need to increment j to go to the
06:02 - next 'unpicked' in R. This k = k + 1 is in
both the conditions if as well as else, so
06:12 - I've moved it out. Coming back to our example
here, i and j are both valid in this, now
06:19 - we'll compare if L[i] is less than or equal
to R[j], well yes, L[i] is less than R[j].
06:25 - So we need to pick 2 for 1th index, and we
need to increment both i as well as k, and
06:33 - for the next position it's between 4 and 3.
3 will go. And we will increment j and k this
06:41 - time and next it's between 4 and 5, next it's
between 5 and 6, next it's between 7 and 6,
06:51 - and after 6 has gone, we're done with all
the elements in L. i is equal to 4 now, which
06:57 - is not a valid index. So, in the while loop,
this condition i is less than no. of elements
07:03 - in L will be false, and this is definitely
one probability, one of the arrays L or R
07:09 - will exhaust first. In that case, we need
to pick all the elements of the other array
07:15 - and fill rest of the positions in A. After
we come out of this while loop, we can write
07:21 - statements like while i is less than no. of
elements in L, so we can check whether there
07:28 - are leftovers in L, we can do the same thing,
we can say A[k] = L[i] and then we can increment
07:37 - i as well as k. I'm short of space here, so
I'm writing multiple statements in the same
07:43 - line. And similarly, we can write while loop
like while j is less than no. of elements
07:48 - in R, we can fill in A[k] with R[j] and this
time, j and k will be incremented. Once, we're
07:56 - out of this first while loop, only one of
these two while loops will execute, because
08:01 - only one of the sub lists or sub arrays will
have leftovers. For this particular example,
08:07 - this third while loop will execute, because
right sub array has leftovers, so we will
08:13 - fill up all the remaining positions, so finally
we will have a sorted arrangement in A. This
08:22 - is our Merge logic and there are couple of
ways in which we can clean up this code further,
08:28 - but for now let's just understand the logic.
And now coming back to where we'd started.
08:36 - In the beginning, we had imagined that if
somehow these two sub arrays or sub lists,
08:43 - uh I'm redrawing the unsorted original array
and unsorted sub lists. So, we'd said that
08:50 - if we're somehow able to sort these two lists,
then we can merge them back into the original
08:56 - list. But, of course, we need to have a deterministic
logic to sort these two sub lists or sub arrays
09:03 - also. And the logic is, we can break these
sub lists even further. So, this sub list
09:12 - comprising of four elements - 2,4,1 and 6
can be further divided into these two halves,
09:19 - and this list comprising of 8,5,3,7 can be
divided into these two sub lists 8,5 and 3,7.
09:27 - The solution for 2,4,1,6 this particular sub
list can be constructed after we sort these
09:37 - two sub lists 2,4 and 1,6 and merge them back.
And similarly, we can sort these two sub lists
09:49 - and merge them back to sort this 8,5,3,7 sub
list. Once again, we've these four sub lists
09:59 - of two elements each and they can also be
divided. What we're basically doing here is
10:05 - that we're reducing a problem into sub problems
in a recursive or self-similar manner. And
10:12 - at any step, once we get solution of sub problems,
we can construct the solution of the actual
10:19 - problem. If we've two sorted sub lists, we
can sort the parent list also. We can go on
10:26 - reducing a sub list only till we've more than
one element in the sub list. Once we reach
10:31 - a stage where we've only one element in a
sub list, then we cannot reduce that sub list
10:38 - any further. So, once we reach a state where
our sub list has only one element, our recursion
10:46 - will end. And a list with only one element
is always sorted. We do not need to do anything
10:51 - to sort it. Now, at this stage, you can start
combining back or merging the sub lists. So,
10:59 - these two sub lists can be merged. Let's say
we will depict the cells in parted sub lists
11:07 - in green. We've already discussed the merge
logic. This sub list 2, 4 will still be the
11:14 - same after merge also. Sub lists 1 and 6,
these two sub lists with only one element
11:21 - each will also merge. And now we can merge
2, 4 and 1, 6. I'm coming to this side. All
11:29 - these sub lists with one element are already
sorted, so we'll start merging back. Finally,
11:36 - these two sorted sub lists 1,2,4,6 and 3,5,7,8
can be merged back to original list A. And
11:46 - now let's write pseudo-code for this algorithm.
I'll write a function named Merge Sort and
11:52 - that will take an array A as argument. In
the function, first I'll take the variable
11:57 - that will store the number of elements in
A. And now we can partition A into two halves.
12:05 - We need to partition A only if n is greater
than 1. If n is less than 2, then we having
12:13 - only one element in the array, so, the array
is already sorted, we can simply return. Else,
12:18 - what we can do is, we can first find out a
middle position and then we can create two
12:25 - arrays - one of size equal to mid and another
of size (n- mid). So, first array will have
12:34 - all the elements starting index 0 till mid-1.
We can just fill the elements. We can run
12:41 - a loop from 0 to mid-1, so there will be mid
elements in all and we can say left[i] = A[i].
12:50 - And then we can run another loop from index
mid till n-1, so there will be n-mid elements
12:58 - in all, and we need to fill in right[i-mid]
as A[i]. Now that we've created left and right
13:06 - sub lists, we can first make a recursive call
to sort the left sub list, and once we're
13:13 - done with sorting the left sub list, we can
make a recursive call to sort the right sub
13:19 - list. And once both left and right sub lists
are sorted, we can make a call to the Merge
13:25 - function that we'd written before to merge
left and right sub lists into A. It's really
13:33 - important to visualize how this recursion
will actually execute. Once again, I'll start
13:38 - over with an unsorted array and let's say
this array is passed to the Merge Sort function.
13:44 - Now, let's run through this code and see what's
happening. I'll start with the first line.
13:50 - We can calculate n - the number of elements
in the array, the no. of elements in this
13:55 - array is 8. It's not less than 2, this condition
is not true. So, we will not return and exit
14:03 - from this function, we will move forward.
We'll calculate the mid index. Now, n is 8,
14:09 - so, mid will be 4 and now we will create two
arrays - left and right, one of size mid and
14:16 - another of size (n-mid). We will fill up these
arrays, the first 4 elements will go to left
14:24 - and the next four will go to right. And now,
we're making a recursive call. When a function
14:29 - calls itself, then such a call is called recursive
call. A function calling itself is not much
14:37 - different from a function A calling another
function B. At this stage, the execution of
14:42 - this particular function call with this array,
with 8 elements, as argument is paused and
14:50 - the machine says that hey, let me go and finish
this particular function call and then I'll
14:54 - come back to you. The machine goes on to execute
Merge Sort on this particular array with 4
15:01 - elements 2, 4, 1 and 6. Now, once again, we
start at the first line in a new call to Merge
15:07 - Sort for this new array. N is not less than
2, so we will not return and exit. This particular
15:13 - condition is the base condition or the exit
condition from the recursion. If this was
15:19 - not there, we would have gone endlessly in
recursion. We needed to stop somewhere. Once
15:24 - again, we will create lefts and rights, and
once again there will be a recursive call
15:29 - passing this array 2, 4 as argument. So, once
again, the state of execution of this second
15:34 - Merge Sort will also be paused. All of these
are paused. The state of execution of the
15:40 - function called with these arrays as arguments
are paused, this one is executing. Now, once
15:47 - again, here also we will have a recursive
call. Now for this particular array with just
15:51 - one element, this base condition will be true.
So, this call will simply exit. And now with
15:57 - this guy, this array with two elements - 2
and 4, this second recursive call will be
16:02 - made with just this element 4, which once
again is the base condition. And now, once
16:08 - both the Merge Sort, both the recursive calls
for this particular sub list with two elements
16:15 - return back, Merge function will be called.
And then this guy will finish. And then, the
16:21 - control will return back for execution of
this particular sub list 2,4,1,6 and this
16:27 - guy will make the second Merge Sort call.
This guy will first make a call for this sub
16:33 - list with just one element and once this is
done, it will make another recursive call.
16:38 - Now we will have a Merge for this guy 1, 6
and then control will return back here to
16:45 - this array 2,4,1,6 and Merge will be called
for this guy. And now once this guy 1,2,4,6
16:54 - will finish the control will return to the
function call corresponding to the original
17:00 - array and this guy will make another recursive
call, the second Merge Sort call. In actual
17:05 - implementation, we must make sure that all
these extra spaces and extra sub lists that
17:11 - we're creating should be deleted from the
memory once we're done using them. Like at
17:17 - this stage, we do not need all these arrays
with 1 and 2 elements in the memory. Now,
17:21 - for this guy 8,5,3,7 we will have a recursive
call passing 8,5 that will again make a recursive
17:29 - call with just one element 8 and then we will
also have a call to 5, that will just simply
17:36 - return. Once, 5, 8 returns, we will have call
for 3, 7 - 3 and 7 will simply Merge. And
17:46 - now, 5, 8 and 3, 7 will Merge and finally
when execution for 3,5,7,8 will finish we
17:53 - will have a call to Merge for the original
array or the initial array. So, this is Merge
18:00 - Sort Algorithm for you. At the start of the
lesson, we'd said that this is O (nlogn) in
18:06 - terms of time complexity. In our next lesson,
we will implement this algorithm, we will
18:10 - run some real code and we will also analyze
the time and space complexity of this algorithm.
18:17 - This is it for this lesson. Thanks for watching!