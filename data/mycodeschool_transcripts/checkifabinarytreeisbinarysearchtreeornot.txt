00:00 - In this lesson, we're going to solve a
simple problem on binary tree
00:03 - which is also a famous programming
interview question,
00:07 - and the problem is given a binary tree
00:10 - we need to check if the binary tree is a
binary search tree
00:14 - are not. As we know a binary tree is a
tree
00:18 - in which each node can have atmost two
children.
00:22 - All these trees that I have drawn here are
binary trees,
00:25 - but not all of them are binary search
trees. Binary search tree,
00:30 - as we know is a binary tree in which for
each node
00:33 - value of all the nodes in left subtree
is lesser
00:37 - and if you want to allow duplicates we
can say lesser or
00:40 - equal and value of all the nodes in
right subtree
00:43 - is greater. We can define binary search
tree as
00:46 - a recursive structure like this. Elements in
left subtree must be lesser or equal
00:52 - and elements in right subtree must be
greater and this should be true for all
00:56 - nodes and not just a root node,
00:58 - so left and right subtrees should
themselves also be binary search trees.
01:03 - Of these binary trees that I'm showing
here,
01:07 - A and C are binary search trees but B
01:11 - and D are not. In B for the root node
with value 10,
01:15 - we have 11 in its left subtree which
is greater than 10
01:19 - and in a binary tree for any node all
values in its
01:23 - left subtree must be lesser. In D we are good
for the root node.
01:27 - The value in root node is 5 and we
have
01:31 - 1 in left subtree which is lesser and
we have 8, 9 and 12
01:35 - in right subtree which are greater. So we are
good for the root node
01:39 - but for this node with value 8, we have
9
01:43 - in its left. So this tree is not a
binary search tree.
01:46 - So how should we go about solving this
problem. Basically,
01:50 - I want to write a function that should
take pointer or reference to root
01:54 - node of a binary tree as argument and
function should return true
01:58 - if the binary tree is BST, false otherwise.
02:02 - This is how my method signature look
like in C++.
02:05 - In C, we do not have boolean types so
02:09 - return type here can be int. We can return
02:12 - 1 for true and 0 of false.
02:15 - I'll also write the definition of node here.
02:18 - For a binary tree node would be
structure
02:22 - with 3 fields, 1 to store data and 2
02:25 - to store addresses of left and right
children. In my definition of node here,
02:29 - data type is integer
02:31 - and we have 2 pointers to node to store
addresses of
02:35 - left and right children. Okay coming back
to the problem
02:39 - there are multiple approaches and we're
going to talk about
02:42 - all of them. The first approach that I'm
going to talk about
02:45 - is easy to think of but it's not so
efficient
02:48 - but let's discuss it anyway. We are saying
that for a binary tree to be called
02:54 - binary search tree,
02:55 - it should have recursive  structure like
this. For the root node
03:00 - all the elements in left subtree must be
lesser or equal
03:03 - and all the elements in right subtree
must be greater, and left and right
03:07 - subtrees
03:08 - should themselves also be binary search
trees. So let's just check for all of this.
03:14 - I'm going to write a function named
IsSubtreeLesser
03:17 - that will take address of root node
of a binary tree
03:21 - or subtree and and integer value
03:24 - as argument and this function will return
true if
03:28 - all the elements in the subtree are lesser
so than this value
03:32 - and similarly I'll write another function
named IsSubtreeGreater
03:36 - that will return true if all the
elements in a subtree
03:39 - are greater than the given value. I had just
03:43 - declared this functions. I'll write body of
these functions later.
03:46 - Let's come back to this function 
IsBinarySearchTree.
03:49 - In this function, I am going to say that if
all elements in left subtree are
03:54 - lesser and I'll verify this by making
a call to IsSubtreeLesser function
03:58 - passing it
03:59 - address of left child of my current
root.
04:02 - Left child would be the root of current
subtree and the data in root.
04:07 - This function will return true
if all the elements in left subtree
04:12 - would be lesser than the data in root.
Now the next thing that I want to check
04:16 - for is
04:17 - if elements in right subtree are greater
than the data in root or not.
04:22 - These two conditions are not sufficient.
We also need to check if left
04:26 - and right subtrees are binary search
trees are not.
04:29 - So I'll add two more conditions here
have made a recursive call to
04:33 - IsBinarySearchTree function passing it address
of left child
04:37 - and I have made another call passing
address of right child
04:40 - and if all these four function call
IsSubtreeLesser, IsSubtreeGreater
04:45 - and IsBinarySearchTree for left and
right subtrees
04:49 - return true if all these four checks
pass then
04:53 - our tree is a binary search tree. We can 
return true
04:57 - else we need to return false. There is
only one thing that the a missing in
05:01 - this function now.
05:03 - We are missing the base case. If the route is null
that is
05:06 - if the tree or subtree is empty, we can
return true.
05:10 - This is the base case for our recursion
where we should stop.
05:14 - With this much of code IsBinarySearchTree 
function is complete
05:18 - but let's also write IsSubtreeLesser and
ItsSubtreeGreater
05:21 - functions because they are also part
of our logic.
05:25 - This function has to be a generic function
that should check
05:28 - if all the elements in a given tree are
lesser than
05:32 - a given value or not. We will have
to traverse the complete
05:36 - tree or subtree and see value in all
nodes and compare
05:40 - these values against this given integer.
I'll first handle the base case in
05:45 - this function.
05:46 - If the tree is empty, we can return true
else we need to check if the data in
05:50 - root
05:51 - is less than or equal to the given value
and we also need to recursively check if
05:56 - left and right subtrees of the current
root have
05:59 - lesser value or not. So I'm adding two
more conditions here.
06:03 - I'm making two recursive calls one for the
left subtree and
06:07 - another for the right subtree. If all these
three conditions are true
06:12 - then we are good else we can return
false. IsSubtreeGreater function will
06:16 - be very similar.
06:17 - Instead of writing these two functions
IsSubtreeLesser
06:20 - and IsSubtreeGreater, we could
also do something like this.
06:25 - We could find the maximum left subtree
06:29 - and compared it with the data in root,
if maximum of a subtree is lesser
06:34 - then all the elements a lesser and
similarly if the minimum of
06:38 - a subtree is greater all the elements had
greater.
06:41 - For the right subtree, we could find a
minimum. So instead of writing these two
06:45 - functions IsSubtreeLesser
06:47 - and IsSubtreeGreater, we could write
something like find max
06:50 - and find min and this would also fit.
06:53 - So this is a solution using one of the
approaches.
06:56 - Let's quickly run this code on an example
binary tree and see how it will execute.
07:01 - I have drawn a very simple binary tree
here which actually is a binary search
07:05 - tree.
07:07 - let's assume some addresses for these
nodes the tree.
07:10 - Let's say the root node is that address
200 and
07:13 - I'll assume some random addresses for
other nodes as well.
07:19 - To check if this binary tree is a binary
search tree or not,
07:23 - we will make a call to 
IsBinarySearchTree function.
07:27 - I'm writing IBST here as Shortcut for
IsBinarySearchTree
07:31 - because I'm short of space here. So I'll
make a call to this function
07:35 - maybe from the main function passing
addressed 200,
07:39 - address of the root node. For
this function call
07:42 - address in this local variable address
collected in this local variable root
07:47 - will be 200. Root is not null.
07:50 - Null is only a macro for address 0.
07:53 - For this call root is not null, so we
will not return true at this line.
07:58 - We will go to the next if. Now here, we
will make a call to
08:02 - IsSubtreeLesser function. Arguments
passed will be address
08:06 - of left child which is 150 and
08:09 - 7 the data in node at 200.
08:12 - Execution of the calling function will pause
and
08:16 - will resume only after the called
function returns.
08:19 - Now in this call to IsSubtreeLesser,
root is not null so
08:23 - we will not return true at first line.
We will go to the next
08:27 - if. Now here the first condition is if
08:30 - data in root this time
08:33 - is 150 because on this call is for this
left subtree
08:38 - and for this left subtree address of
root is 150.
08:41 - Data in root is 4 which is lesser than
08:46 - 7, so the first condition is true and we
can go to the second condition which is
08:51 - a recursive call.
08:52 - This call will pause and we will go
to the next call.
08:56 - Here once again the data in node
09:00 - at 180, 1 is lesser than 7
09:03 - so first condition is true and we will
make
09:07 - recursive call. Left subtree for node at
180
09:10 - is null. There is no left child so
09:13 - we will return at first line. Root is null
this time.
09:17 - This particular call will simply to return
true. Now in this previous call when
09:20 - root is 180,
09:22 - second condition for if is also true.
So
09:25 - we will make another call for right
subtree. Once again address passed
09:29 - will be 0 and we will simply return
true and now for this call
09:33 - IsSubtreeLesser 187, all three conditions
are true.
09:38 - So this guy can also return true and now
ISL 150,7 will resume.
09:43 - Now this guy will make a recursive
call for the right subtree
09:47 - and this guy after everything will also
return true.
09:51 - Now for this call because all 3
conditions in the if statement are true,
09:56 - this guy will also return true and now
IsBinarySearchTree function will
10:00 - resume.
10:02 - For this call we have evaluated the
first condition
10:05 - we have got true now this guy will make
another call
10:08 - to IsSubtreeGreater, passing address of
right child and value 7.
10:14 - This guy after everything will return
true and now we will have 2 recursive
10:19 - calls,
10:20 - to check if left and right subtree are
binary search trees on not.
10:24 - We will first have a call for the left
subtree.
10:28 - The execution will go on like this but I
want you to see something.
10:32 - Each call to binary search tree
function,
10:35 - we are comparing the data in root with
all the elements in left subtree and
10:39 - then all the elements in right subtree.
10:41 - This example tree could be really large
then in that case
10:46 - in the first call IsBinarySearchTree
for this complete tree,
10:50 - we would recursively traverse this
whole left subtree
10:54 - to see whether all the values in this
subtree
10:57 - are less than 7 or not and then we
will traverse all nodes in this right subtree
11:02 - to see if values have greater than 7
or not and then
11:05 - in next call IsBinarySearchTree,
when we would be validating with this
11:10 - particular subtree is BST or not.
11:12 - We would recursively traverse this
subtree if values are lesser than 4
11:17 - or not
11:17 - and this subtree to see if value so greater
than 4 or not.
11:21 - So all in all during this whole process
there will be a lot of traversal.
11:25 - Data in nodes will be read and
compared multiple times.
11:29 - If you can see all nodes in this
particular subtree
11:33 - will be traversed once in call to
IsBinarySearchTree for 200.
11:37 - When we will compare value in these
nodes with 7
11:41 - and then these nodes will once again be
traversed
11:45 - in call to IsBinarySearchTree for
150 when
11:48 - they will be compared with 4. They will
be traversed in call to
11:53 - IsSubtreeLesser.
11:54 - All in all these two functions
IsSubtreeLesser
11:57 - and IsSubtreeGreater very expensive.
For each node, we are looking at all nodes in
12:02 - its subtrees.
12:03 - There is an efficient solution in which
we do not need to compare
12:07 - data in a node with data in all nodes 
in its
12:10 - subtrees and let's see what the solution
is.
12:13 - What we can do is we can define a
permissible
12:16 - range for each node and data in that node
must be in that range
12:21 - we can start at the root node with a
range
12:24 - -infinity to infinity, because for
the root node
12:27 - there is no upper and lower limit and
now as we are traversing we can set a range
12:33 - for other nodes.
12:34 - When we are going left, we need to reset
the upper bound
12:37 - so for this node at 150, data has to
be between
12:41 - -infinity and seven. Data in left
child cannot be greater than data in
12:46 - root.
12:47 - If we're going right, we need to set the
lower bound
12:50 - for this node at 300 range would be 7 to
infinity.
12:55 - 7 is not included in the range. Data has
to be strictly greater than 7.
13:00 - For this node at 180, the range will
be -infinity to 4.
13:04 - For this node with value 6 lower bond will
be 4 and upperbound would be 7.
13:10 - Now my code will go like this. My
function IsBinarySearchTree will take
13:15 - two more arguements,
13:16 - an integer to mark lower bound or
min value
13:20 - and another integer to mark the upper
bound or max value
13:23 - and now instead of checking whether all
the elements in left subtree are lesser than
13:27 - the data in root
13:28 - and all the elements in right subtree
are greater than the date in root or not.
13:33 - We will simply check whetheer data in root
is
13:36 - in this range or not. So I'll get rid of
these two function call 
13:40 - IsSubtreeGreater
13:41 - and IsSubtreeGreater which are really  
expensive and I'll
13:44 - add these two conditions. Data in root
must be greater than min value
13:49 - and data in root must be less than max
value. These two checks will take
13:53 - constant time.
13:54 - IsSubtreeLesser and IsSubtreeGreater
functions were not taking
13:57 - constant time.
13:58 - Running time for them was proportional
to number of nodes in the subtree.
14:02 - Okay now these two recursive calls
should also have two more arguements.
14:07 - For the left child lower bound will not
change,
14:10 - upper bound will be to data in current
node and for the right child, upper
14:15 - bound will not change
14:16 - and lower bond will be data in current
node. This recursion looks good to me. We
14:21 - already have to base case written.
14:23 - The only thing is that the Caller of this
IsBinarySearchTree function
14:28 - may only want to pass the address of root
node so what we can do is instead of
14:32 - naming this function IsBinarySearchTree.
We can name this function
14:36 - as a utility function like 
IsBstUtil
14:40 - and we can have another function name
IsBinarySearchTree
14:44 - in which we can take only to address of
root node and this function can call
14:49 - IsBstUtil to function passing address
of root.
14:53 - Minimum possible value in integer
variable for -infinity
14:56 - and maximum possible value in integer
valuable for
15:00 - +infinity INT_MIN and INT_MAX
here are macros
15:04 - for a minimum and maximum possible
values in Int.
15:07 - So this is a solution using second
approach which is quite efficient.
15:12 - In this recursion will go to each node
once and at each node we will take
15:16 - constant time
15:17 - to see whether the data at node is in a
defined range or not
15:21 - and time complexity would be O(N)
where N is number of nodes in the
15:25 - binary tree.
15:26 - For the previous algorithm, time
complexity was O(N^2).
15:30 - One more thing, in this code I have not
handled
15:33 - the case that Binary search tree can
have duplicates.
15:37 - I am saying that elements in left subtree
must be strictly lesser and elements in
15:42 - right subtree
15:43 - must be strictly greater. I leave it for
you to see how you will
15:46 - allow duplicates. There is another
solution to this problem.
15:50 - You can perform in order traversal of
binary tree
15:54 - and if the tree is binary search tree
you would read the data in
15:57 - sorted order. In-order traversal of a
16:01 - binary search tree gives a sorted list. You can
do some hack
16:05 - while performing in order traversal and
check if you're getting the elements in
16:08 - sorted order or not.
16:10 - During the whole traversal you only need
to keep track of
16:13 - previously read node and at any time
data in a node that you're reading
16:17 - must be greater than the data in previously read
node.
16:20 - Try implementing this solution, it will be
interesting. Okay I'll stop here now.
16:24 - In cominng lessons, We will discuss some
more problems on Binary tree. 
16:28 - Thanks for watching.