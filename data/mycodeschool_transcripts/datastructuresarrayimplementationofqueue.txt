00:00 - In our previous lesson, we introduced you
to
00:03 - Queue data structure. We talked about Queue
as Abstract Data Type
00:07 - or ADT. As we know when we talk about
data structure as Abstract Data Type,
00:12 - we define it as a mathematical or
logical model.
00:16 - We define only the features or
operations available with the data
00:20 - structure,
00:21 - and do not go into implementation
details.
00:24 - In this lesson, we are going to discuss
possible implementation of a Queue.
00:28 - I will do a quick recap of what we have
discussed so far.
00:32 - A Queue is a list of collection with
this
00:35 - restriction with this constraint, that
insertion can be performed at
00:39 - one end, that we call rear of Queue
00:43 - or tail of Queue and Deletion
00:46 - can be performed at other end that we
call the front of Queue
00:49 - or the head of Queue. An insertion 
in Queue 
00:54 - is called enqueue operation. A deletion is called
00:57 - dequeue operation. I have defined Queue ADT
with these Four operations that have written here,
01:02 - in an actual implementation all these
operations will be functions, 
01:06 - front operation should simply return the
element at front of Queue
01:11 - should not remove any element from the
Queue,
01:14 - Isempty should simply check whether Queue is
empty or not
01:18 - and all these operations must take constant
time.
01:21 - Enqueue, dequeue or looking at element at front,
01:24 - the time taken for any of these
operations must not depend
01:28 - upon a variable like number of elements
in Queue
01:31 - or in other words, and complexity of all
these
01:35 - operations must be O(1).
01:38 - Okay! So let's get started, we are saying
that
01:42 - a Queue is a special kind of list, in
which
01:45 - elements can be inserted or removed one
at a time
01:49 - and insertion and removal happen at
01:52 - different ends of the Queue. We can insert
an element at 
01:56 - one end and we can remove an element
from the other end,
02:00 - just the way we did it for stack. We can
add these constraints or extra
02:04 - properties of Queue
02:05 - to some implementation of a list and
create
02:09 - a Queue. They're two popular
implementations of Queue,
02:12 - we can have an array based
implementation and we can have linked
02:16 - list based implementation.
02:18 - Let's first discuss array-based
implementation.
02:22 - Let's say we want to create a Queue of
integers.
02:25 - What we can do is we can first create an
02:28 - array of integers. I have created an array
of 10 integers here. 
02:32 - I have named this array A, now what
I'm going to do is, I'm going to use this
02:37 - array to store my Queue, what I'm going to
say is that
02:41 - at any point, some part after array
starting an index
02:45 - marked as front, till an index
02:49 - marked as rear will be my Queue.
02:52 - In this array I'm showing front of the
Queue toward left and
02:56 - the rear towards right.
In earlier examples I was showing
03:00 - front towards right and rear towards left.
03:03 - Doesn't really matter, any side can be
front and any side can be
03:08 - rear, it's just that an element must
always be
03:12 - added from rear side and must always
be removed
03:16 - from front. So if at any stage
03:19 - a segment of the array from an index
marked as front
03:23 - till an index marked as rear is my Queue
03:27 - and rest of the positions in the 
array are free space,
03:31 - that can be used to expand the Queue.
03:34 - To insert an element to enqueue, we can
increment rear,
03:38 - so we will add a new cell in the Queue
towards
03:41 - rear end and in this cell, we can write
the new value
03:45 - element to be inserted can come to this
position.
03:48 - I fill in some values here at these
positions.
03:52 - So we have these integers in the Queue and
03:55 - let's say we want to insert number 5. To
insert we will increment rear
04:01 - ofcourse there should be an available
cell in the right,
04:04 - an available empty cell in the right and
now we can write
04:07 - value 5 here. After insertion new rear index
is 
04:12 - 7, and value at index 7 is
04:15 - 5. Now dequeue means we must remove an
element from front of Queue.
04:20 - In this example, here a dequeue operation
should remove number 2 from the Queue
04:25 - to dequeue, we can simply increment front
04:29 - because at any point only the cells
starting front
04:32 - till rear are part of my Queue.
By incrementing front I have discarded
04:37 - index 2 from the Queue and we do not
care what value lies in a cell,
04:42 - that is not part of the Queue, when
we will include
04:45 - cell in the Queue we will overwrite
the value in that cell
04:49 - anyway. So just incrementing front is
good enough
04:53 - for dequeue operation. Let's quickly write
pseudocode for
04:57 - whatever we have discussed so far. In my
code I will have 2
05:01 - variables named front and rear, and
initially
05:04 - I'll set them both as -1. Let's say for
05:08 - and empty Queue both front and rear
05:11 - will be -1. To check whether Queue is empty
or not
05:15 - we can simply check the value of front
and rear
05:19 - and if they're both -1 we can say that
 Queue is empty.
05:23 - I just wrote isempty function here. -1
is not
05:27 - a valid index. For an empty Queue there
will be no front and
05:31 - rear. In our implementation we are saying that
we will represent
05:35 - empty state of Queue by setting both front
05:38 - and rear as -1.
05:42 - Now let's write the enqueue function.
Enqueue will take
05:45 - integer x as argument, there will be a
couple of conditions in enqueue.
05:50 - If rear is already equal to maximum
index
05:53 - available in array A, We cannot insert
or enqueue an element
05:58 - in such scenario we can return and exit.
06:02 - I would rather use a function named 
isfull to
06:05 - determine whether Queue is full or not.
If Queue is already full, we can't do much we
06:10 - should simply exit,
06:11 - else if Queue is empty we can add
06:15 - cell to the Queue, we can add cell
06:18 - at index 0 in the Queue, and now the
we can set value at index
06:23 - rear as x. In all other cases,
we can
06:27 - first increment rear, and
06:31 - then we can fill-in value X at index rear.
06:34 - I can get a statement a[rear] = X
outside these two conditional statements
06:40 - because it's common to them, so this is
my enqueue function.
06:44 - In the example array that I'm showing
here let's enqueue some integers.
06:48 - I'll make calls to enqueue function and
show you the simulation.
06:52 - In the figure here, let's say first I
want to insert number 2
06:56 - in the Queue, I'm making a call to
enqueue function passing
06:59 - number 2 as argument. The Queue is empty, so
07:03 - we will set both front and rear as 0.
07:07 - Now we will come to this statement, we
will write value 2 at index 0.
07:12 - So this is Queue after one enqueue
operation, front and
07:15 - rear of the Queue is same. Let's make
another call to enqueue,
07:19 - this time I want to insert number 5.
this time Queue is not empty,
07:23 - so rear will be incremented. We have
added
07:27 - a cell to the Queue by incrementing
rear and now we will write the value
07:31 - 5 at the new rear index.
07:34 - Let's enqueue 1 more number. I have 
enqueued 7.
07:38 - Let's not write dequeue operation. There will be
couple of cases in dequeue.
07:42 - If the Queue is already empty, we cannot
remove an element
07:46 - In this case we can simply print or throw
an error,
07:49 - and return or exit. There will be one more
special case,
07:54 - if the Queue has only one element. 
In this case,
07:58 - front and rear will not be -1 but they
will both be
08:02 - equal, because we are already checking
for -1 case in
08:06 - isempty function in the previous if. In
this else if we can simply
08:10 - check whether front is equal to rear
or not, if this is the case
08:14 - a dequeue will make the Queue empty, and to mark to
 Queue as
08:18 - empty, we need to set both front
and rear
08:21 - as -1. This is what we had said, that we
will
08:24 - would represent and empty Queue by
marking both
08:28 - front and rear as -1. In default or
normal scenario,
08:32 - we will simply increment front, we
should really be careful
08:36 - about corner cases in any implementation,
08:40 - that's fair most of the Bugs come. Okay,
so this finally is my dequeue function.
08:46 - In this example here at this stage, let's
say be want to perform
08:49 - a dequeue, Queue is not empty and we do not have
only one element in the Queue.
08:54 - So people simply increment front,
before incrementing we could set the
08:58 - value in this cell
09:00 - at index 0 as something, but the
value in a cell that is not part of Queue
09:05 - anymore
09:06 - doesn't really matter. At this stage it
doesn't really matter what we have at
09:10 - index 0 or index
09:11 - 3 or any other index apart the
segment between front and rear.
09:16 - When we will add a cell in the Queue, we will
overwrite the value in that cell anyway.
09:21 - Let's now perform some more enqueues
and dequeues.
09:24 - I'm enqueuing 3 and then I'm enqueuing
09:27 - 1, with each enqueue we are
incrementing rear.
09:31 - I just performed some more enqueue here. Now
let's the perform a dequeue.
09:36 - If I'll perform one more enqueue here, rear
09:40 - will be equal to the maximum index available
in the array. Let's
09:43 - enqueue one more now at this stage, we cannot
09:46 - enqueue an element anymore because we cannot
increment rear.
09:50 - Enqueue operation will fail now. 
There are two unused
09:54 - cells right now but with whatever
logic we have written,
09:58 - we cannot use these two cells that are
in the left of front
10:02 - in fact this is a real problem. As we
will dequeue more and more,
10:06 - all the cells left of front index will
never be used again they will simply be
10:11 - wasted.
10:12 - Can we do something to use these cells? Well,
10:16 - we can use the concept of a Circular
array. Circlular array is an idea that we
10:20 - use in a lot of scenarios.
10:22 - The idea is very simple, as we
traverse an array
10:25 - we can imagine that there is no end in
the array, from 0 we can go to 1, from
10:30 - 1, we can go to
10:31 - 2, and finally then we will reach the
last index in the array.
10:36 - Like in this example, when we are at index 9
10:39 - the next index for me is index 0. We
can imagine this array
10:43 - something like this, remember this is
only a logical way of looking at the
10:47 - array.
10:48 - An circular interpretation of array, if I'm
pointing to a position and my current
10:52 - position is
10:53 - i then the next position or next index
will not simply be i + 1,
10:58 - it will be i + 1 Modulo the
number of
11:01 - elements in array or the size of array.
Let's say,
11:04 - N is the number of elements in array,
then the next position will be
11:08 - i + 1 Modulo N. The modulo
operation will get us
11:12 - the remainder upon dividing by N for
11:15 - any i other than N - 1. This modulo
operational will not have any effect,
11:20 - but for i = N - 1 next position will
be
11:25 - N module N which will be equal to 0.
When you divide the number by
11:29 - itself,
11:30 - the remainder is 0. Previous
position in circular interpretation of
11:34 - array,
11:35 - will be I + (N - 1) modulo N.
11:38 - We could simply say I-1 modulo N,
just to make sure this expression inside
11:43 - the parenthesis is always positive,
11:45 - I'm adding N here. Give this some thought.
You should be able to get why it should
11:50 - be
11:50 - (i + (N - 1)) modulo N. Now
with this interpretation of array,
11:54 - we can
11:55 - increment rear in an enqueue operation
11:58 - as long as there is any unused cell in
the array.
12:01 - I'm going to modify functions in my
pseudo code now.
12:04 - Isempty will remain the same we are
still saying that, for an empty Queue
12:09 - front and rear will be -1.
12:11 - Let's scroll down and come to enqueue. Now, in
circular interpretation I will call my
12:16 - Queue full, when the position next to
rear
12:19 - in circular interpretation that we will
calculate as
12:23 - (rear + 1) modulo N, will be equal
to
12:26 - front, so we will have a situation like this.
Right now,
12:30 - the next position to rear in circular
interpretation
12:34 - is front. So there is no unused cell.
The complete
12:38 - array is exhausted. Nothing will change in
this condition.
12:41 - If Queue is empty, we can simply set
front and rear as 0.
12:45 - In the last else condition, we will
increment rear
12:49 - like this, we will say 
rear = (rear+1) modulo N
12:53 - where N is number of elements in the array.
With this much change, my enqueue function is
12:59 - good.
12:59 - Now let's make a call to enqueue and insert
something
13:02 - in this array here, I want to insert
number 15.
13:06 - We will come to this last else condition,
Rear right now is 9, so this
13:11 - expression
13:12 - will be (9 + 1) modular N, N is 10
here
13:15 - the size of this array A is 10 here.
13:19 - This will evaluate to 0, now my new rear
13:22 - is 0. I'll write number 15 here.
13:26 - Let's now see what we need to do in dequeue
function.
13:29 - Nothing will change in the first two
conditions, if Queue is already empty
13:34 - or if there is only one element in the
Queue, we will handle these cases
13:38 - in same manner in the final else when we are
incrementing front,
13:43 - we need to increment it in a circular
manner so we will say 
13:46 - fornt = (front + 1) modulo N
13:49 - where N is the number of elements in the array, 
total number of elements in the array, or size
13:53 - of array.
13:55 - Now let's perform a dequeue, we will come to
this condition front right now
14:00 - is 2 so this will be (2 + 1)
modulo 10,
14:04 - one more cell is available to us now.
14:08 - This much is the core of our
implementation. Front operation will be
14:11 - really straightforward, we simply need to
return the element at front index.
14:16 - Here also, we first need to check whether the
Queue is
14:19 - empty or not, we should return a[front] only
when
14:23 - front is not equal to -1. All these
operations all these functions that have
14:27 - written here will take constant
14:29 - time, there complexity will be O(1). We
are performing simple arithmetic and
14:34 - assignments in the functions,
14:36 - and not doing anything costly like
running the loop,
14:40 - so time taken will  not depend upon size
of Queue or some other variable.
14:44 - I leave this here it should not be very
difficult converting this pseudo code
14:49 - to a
14:50 - running program in a language of your
choice, If you want to see my code
14:54 - you can check the description of this
video for a link. Thanks for watching.