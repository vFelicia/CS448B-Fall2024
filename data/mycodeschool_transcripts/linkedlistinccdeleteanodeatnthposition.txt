00:00 - in our previous lesson we wrote program
to insert a node
00:04 - at nth position or a given position in
a list, in a linked list
00:08 - now in this lesson, we will write a
program to delete
00:11 - a node at any given position in a
linked list. So, once again I have drawn
00:16 - a linked list here. We have four nodes in
this list
00:20 - at addresses 100 200 150 and 250
00:24 - respectively so this is my example of
a linked list of integers.
00:28 - and let say we number the positions on a one
based
00:31 - index, so this is the first Node in the list
and this is the second Node
00:35 - this is the third Node and this is the fourth Node
00:38 - when we talk about deleting a Node
from the linked list.
00:42 - We will have to do two things
first
00:45 - we will have to fix the links so that
the Node is no more a part of the list
00:50 - let's say, in this case we want to delete
the node at 3rd position
00:55 - so will go to the second node. For nth Node
we will have to go
00:59 - to the (n-1)th node and we will have to
set the link part of the (n -1)th node
01:05 - as the link of the nth mode
01:08 - which will be the (n+1)th node
so we will cut this link
01:13 - and now this Node with address 150 is not
part of the linked list
01:17 - because when we will traverse the
linked list, we will go from address
01:21 - 100 to 200 and
01:23 - from 200, we will go to 250. This is
one scenario
01:28 - for deletion in which we have a node
before and a node after
01:32 - there will be special cases like we may
want to delete the node at the first
01:37 - position or the head
01:38 - itself. In that case we will have to point
head
01:42 - to the second node. We will have to build
this link
01:45 - We will talk about all these
special cases in our
01:48 - implementation. Let's first understand the
logic. Now
01:53 - fixing the links is not good enough
because all that we do when we fix the
01:57 - links
01:58 - is that we detach the node from the
linked list so that
02:01 - it is no more accessible but it is still
occupying space in the memory
02:06 - as we knoe Node is allocated space
from what we call the dynamic memory
02:11 - or the heap section of the memory. we
have talked about this earlier
02:15 - In C or C++ we have to explicitly
free this memory when we are done using
02:20 - it
02:21 - because it is not automatically deallocated
02:24 - and memory being a crucial resource we
do not want to
02:28 - consume it unnecessarily when we do not
need it
02:31 - so the second thing that we will have to
do is we will have to free the space
02:35 - that's being
02:36 - taken by the Node and that's when the
Node
02:40 - will actually be deleted from the memory
so
02:44 - let us now write code for this. I am
writing my C program here
02:48 - the first thing that I have done is I
have defined
02:51 - a Node which is a structure with two fields
02:55 - one to store data and another to store
address
02:59 - of the next node. so, the second field
is a pointer to node. Now to create a
03:03 - linked list, we will have to first create
a pointer to Node
03:07 - a variable which is pointed to Node and
that will store the
03:10 - address of the head node or the first
node in the list
03:13 - and now I want to define three functions
03:16 - first insert function that will take
03:19 - some value, some data to be inserted into
the list
03:23 - and always insert this value at the end
of the list, then I want to define
03:28 - up print function that will print all
the elements
03:31 - in the list. We have defined this
variable head as a global variable, so it
03:36 - will be accessible
03:37 - to all these functions and the third function
that I want to write is
03:41 - delete that will take the position
03:45 - n of the node to be deleted and delete
the node at 
03:49 - that particular position. We will go back
to implementing these
03:54 - methods. First I'll write the main method
so
03:57 - in the main method, first what I'll do is I'll
set head
04:01 - as NULL, so at this stage the list is empty
04:04 - and then I'll make couple of calls to insert
function
04:08 - to insert some integers in the list
04:12 - so after this fourth insert, the list will
be
04:15 - 2,4,6,5 because we're always inserting at the
04:18 - end of the list. this insert function will
insert
04:22 - the node at the end of the list
04:25 - now, what I want to do in my main method
is that I want to ask
04:29 - user for a position and
04:32 - I'll input this position from the console
and then I'll delete the node at this particular
04:36 - position
04:37 - and then I'll print the whole linked
list
04:41 - Let's also make a call to print after
04:44 - all inserts. Okay, so this is what we want
to do in our main method, we want to 
80
00:04:50,000 --> 00:04:53,090
insert 4 integers in a linked list
04:53 - to create a list. 2, 4, 6, 5 in this order
04:56 - and then I want to print the list. then
I want to input a number from the
04:59 - console
05:00 - and delete the Node that particular
position. Now, let us 
05:04 - assume that we will always give a valid
position and in my implementation also
05:09 - I will not handle the error condition
when position will not be valid
05:13 - We have seen implementation of
insert and print
05:16 - earlier, so i will not go into their
implementation details
05:20 - what I do now is I will implement delete
function
05:24 - Now in my delete function let's
first handle the case
05:27 - when there is a Node before the
Node that we want to delete
05:32 - so we'll have no (n -1)th node
05:35 - what I'll do is first i'll create a
temporary variable that is pointer to
05:39 - Node
05:40 - and point this to head and using this
96
00:05:44,410 --> 00:05:47,410)
temporary variable, we will go to (n-1)th
05:47 - Node. To go to the (n-1)th Node, we
will have to run a loop 
05:51 - n-2 times and we will have to
05:54 - do something like this temp1 = temp1->next
05:59 - Now, what I'll do is, I'll create a variable
to point 
06:04 - to the nth Node, name this temp2, and this
will be equal to
06:09 - temp1->next and now I can fix the
link
06:14 - I can say that adjust the link section,
the link
06:18 - part of  (n-1)th Node to point to
06:22 - (n+1)th Node which will be temp2->next. 
now, our
06:26 - link is fixed and this variable temp2
06:29 - stores the nth node, reference to
the nth Node, so
06:33 - we can make a call to Free function.
Free function
06:37 - deallocates whatever memory is
allocated through malloc
06:40 - if we were using c plus plus and used
06:44 - and if we would have used new operator
we should have said
06:48 - delete temp2. Okay now we should
be good
06:52 - this much code will work for scenarios
when we have
06:56 - an (n-1)th Node and even if there is
no (n+1)th node
07:00 - If (n+1)th position is null, this will
work for
07:03 - that scenario I leave that as an
exercise for you to validate
07:07 - Now, we have not handled one special case when
we want to delete the head Node, so if
07:12 - n = 1
07:13 - then what we want to do is, we just want
to set head
07:16 - as temp1->next. temp1 is right
now equal to head
07:20 - and now head has moved on to point to
the second Node
07:24 - and temp1 still points to the first
node. so
07:28 - links are fixed and we can free the
first node
07:31 - which is not detached from the linked
list because head is now pointing to the
07:35 - second node
07:35 - okay, so this is our delete function. I have
07:39 - missed one thing here. for n not equal
to 1, we should not execute this section
07:44 - of the code. So
07:45 - either we put an else statement after this
07:48 - or what we can do is, we can say return
after we execute these statements
07:53 - for this condition. Now this code should work
07:56 - if I've got everything right. so let us
now run this and see what happens
08:00 - I have already written the insert and
print functions
08:03 - I'll come back to this main function
this is my list
08:07 - 2,4,6,5 and I can enter any of the
positions - one two three or four
08:12 - so let's first say we want to delete
the head node and we are printing the list
08:16 - after deleting
08:17 - a particular Node, so the list now is
4, 6, 5. this seems to be correct
08:22 - Let us run this again and this time I
delete number 5 from position 4
08:26 - the list is now 2,4, 6 which is correct again
08:30 - similarly if I enter position 2, the list
is 2,6,5
08:34 - which is correct. so we seem to be good.
I'll quickly walk you through this code in
08:39 - the logical view
08:40 - to make thanks further clear. Let's say
08:43 - we first make a call to delete Node from
the first position
08:48 - that is we want to delete the head node.
So, in this code, what we are doing is
08:53 - we are first creating a variable temp1
which is pointer to Node
08:57 - Initially temp1 is equal to head
So, it stores the address 100,
so it points to
09:02 - the head Node
09:03 - now n =1, so we come to
this instruction
09:06 - head = temp1->next
09:10 - actually this is temp arrow dot next, but while reading we read this as 
09:14 - temp1 dot next. This is nothing but a
syntactical
09:17 - sugar for this statement (*temp1).next
09:22 - So, we are dereferencing this pointer
variable
09:26 - to go to this Node and then accessing the
next field of this node
09:30 - now we're saying head= temp1->next,
so head
09:34 - is now 200. So, we are building
09:37 - this link and breaking this link
09:40 - and now in the next line we see free(temp1)
so we want to free the memory
09:45 - which is being pointed to by this
variable temp1
09:47 - temp1 still points to this
node at address 100
09:51 - so, this node now will be cleared from
the memory
09:56 - and now we return, so this function does not
execute any further, it finishes
10:02 - its execution. Once the function
execution 
10:05 - finishes, temp1 which was a local
variable
10:08 - also gets cleared from the memory. head
is a global variable so it does not get
10:13 - cleared
10:14 - this is how we know the linked list. This
is the identity of the linked list
10:18 - this particular variable head
10:21 - let's rerun this code again and this
time I want to delete the
10:25 - Node at 3rd position in the list. I have
drawn this
10:29 - initial list. So, once again we create
this
10:32 - variable temp1. We say that the address
here is equal to 100
10:37 - so it points to the head Node or the
first Node
10:41 - and now n is not equal to 1. it is equal
to 3
10:44 - so we come to this particular loop
n is equal to 3, 
10:48 - so this loop will execute exactly once.
this statement will execute exactly once
10:54 - so temp1 will now move to address 200
10:58 - so temp one is now pointing to the
second node
11:02 - this is what we wanted to do. we 
wanted temp1 to point to (n-1)th node, n
11:07 - is 3 here. Now, we create another
variable
11:10 - another pointer to Node, temp2 and we
set this guy
11:14 - as temp1->next. temp1->next is 150. 
11:19 - so we set this guy as 150. so this guy
points to the nth node
11:24 - or the third Node. Now, in the next line
11:27 - we are saying that temp1->next
11:30 - this value which is 150 right now is now
11:33 - temp2->next, address of the (n+1)th
node or 4th node
11:37 - So this guy will now be 250
11:40 - So, we are building this link and we're
breaking this link
11:45 - so we have fixed the links and now
finally we are seeing that free the
11:49 - memory
11:50 - which is being pointed to by temp2.
so now this third Node
11:54 - the memory block will be deleted from
the memory and once this function
11:58 - execution finishes
12:00 - all the local variables temp1 and
temp2 will be cleared
12:04 - and this is what the list will be. This
Node at address 250 will now be
12:09 - the third node
12:11 - so, this was deleting a Node at a
particular position in the linked list
12:15 - we can also have a problem where we may
want to delete
12:18 - a Node with a particular value. You
can try implementing it.
12:22 - in the coming lessons, we will see more
problems are linked list
12:26 - so, thanks for watching !