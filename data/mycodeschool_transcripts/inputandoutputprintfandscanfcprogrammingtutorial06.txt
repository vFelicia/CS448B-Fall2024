00:00 - In our previous lesson,we saw how we can declare 
00:03 - and initialize variables of different
types to store data
00:08 - to be used in a program and we also saw
how we can use
00:12 - printf function to print data stored in
a variable.
00:15 - Now in this lesson,we'll see how we can
take data
00:18 - as input from user of the program,and
00:22 - we already know of printf() that can be
used to print
00:26 - output,but we will talk about printing
output in a little more detail.
00:30 - In this program,that I'm showing you
here I'm not doing something really
00:34 - meaningful.
00:35 - What I'm doing is,I am declaring a
varible named
00:38 - a of type int,which is basically
00:41 - reserving some space in computers memory,
00:44 - to store an integer and we can access
00:47 - or refer to this memory location with
name a,
00:50 - and then we are filling in value 12 in this
variable 
00:54 - In memory,the value will actually be
present in binary.
00:57 - In my logical representation of memory,
I would always
01:01 - show data the way,it's understood in the 
real-world.But we must remember dat
01:06 - any kind of data is encoded and stored
01:09 - in binary.Different data types at
encoded differently,but ultimately in
01:14 - memory,
01:15 - everything would be in binary.We will
discuss encoding mechanism for
01:19 - different datatypes
01:20 - in later lessons.Coming back to the program as I was saying,
01:24 - we're not doing something really
meaningful,here by declaring and
01:28 - initializing a valuable and then
01:30 - printing the value in it. We're not
solving a problem here.
01:33 - With whatever we have learnt so far,
let's write a simple program to solve
01:37 - a real problem.I want to write a
program to find
01:40 - product of two numbers or rather product
of two integers.
01:44 - I have erased everything from inside the
main function here and now I'll write
01:48 - code to find and print product of two
numbers.
01:51 - I'll first write a statement to declare three
variables of type
01:55 - int named a,b and c.
01:59 - We can declare multiple variables in
same statement.
02:02 - We should first write the data type space
02:05 - and then variable names separated by commas.
02:08 - And of course,we should have a semicolon
at end of the statement.
02:12 - I am also showing these variables in 
memory here.
02:15 - Now,I have written two statements to fill
in values
02:19 - in a and b.I am filling in 12 in a and
14
02:23 - in b.And now in this statement c
02:26 - equal a asterisk b,what I'm doing is I 
am calculating
02:31 - product of values stored in a and b.
Asterisk
02:35 - is symbol for multiplication operator
and we are filling in the product of
02:39 - a and b in c and now we can print
02:44 - value in c using printf().Printf()
function,if you remember this from
02:48 - previous lesson,
02:49 - is used to print a formatted string.First
argument to printf() function should be
02:55 - a string constant or string literal.A
string constant is created by putting
03:00 - a sequence of characters within double
quotes.
03:03 - String constant,that we have passed to
printf() function here has two characters
03:08 - percent and d.Now,what printf() function
basically does is
03:14 - it prints the string constant but it may
not print the string constant as it is.
03:19 - Before printing it applies a set of
rules,
03:22 - and does some formatting.When printf()
would see
03:25 - a percent d in the string constant,it
would expect
03:29 - another argument of type Integer
corresponding to this percent d,
03:33 - and it would replace percent d with 
03:36 - value of this integer.So,what should be the
output of this printf() statement that
03:40 - I have written here.
03:41 - Well,in the string constant,we only have
a percent
03:44 - d,this percent d will be replaced by
value in c.
03:48 - And value in c is 168,so
03:51 - 168 will be printed on screen.I'll just put
a
03:55 - return 0 in here,and now if
I'll
03:58 - run this program,then this is what I'm
getting.
04:01 - Now,in the printf() if I would
pass something like
04:05 - product equal percent d as first
argument,
04:08 - and once again for the percent d.I am 
passing c as second argument
04:12 - and then output of this particular printf()
would be
04:16 - product equal 168.Only the percent d
has been replaced with value in c.
04:22 - And everything else is same.Everything else
in the
04:25 - string constant is printed as it is.Now,
I want to write my printf() statement 
04:30 - like this and I want you to guess the
output of this printf() statement.
04:35 - What do you think,should be output of
this printf() statement ?
04:39 - Now,we have three percent d in the string 
constant and in total we are passing
04:43 - four arguments to printf(),apart from the
string constant.We are passing
04:48 - three integers one corresponding to each
percent d.
04:52 - While formatting,printf() will replace
this first percent d
04:56 - with value in a.So,first percent d
05:00 - will be replaced by first argument after
the string constant,
05:03 - and then this second percent d will be
replaced by
05:07 - value in second argument,that is value
in b.
05:11 - and third percent d will be replaced by
value in C.
05:15 - If I run my program,this is how my
output will look like.
05:19 - Okay,so we have a program here,that's
calculating product of two numbers
05:23 - a and b,but we are setting the values of a and b
05:28 - in code itself.Ofcourse,I can change
the code,if I want different values for
05:32 - a and b.
05:33 - But,ideally my program while its
executing
05:37 - should ask the user to input a and b.
05:41 - Now,what I'll do here,is at first I'll
erase these two lines,but I'm setting
05:45 - values of
05:45 - a and b.I'll keep everything else
05:48 - and now off to the declaration,I'll make
a cause to a special function.
05:53 - in stdio.h library.stdio.h is 
05:57 - already included here and this function
06:00 - is named scanf().There are two arguments
to scanf().First argument
06:06 - just like printf(),is a string constant
and it should not be that difficult to
06:10 - guess,that you're passing some format
here
06:13 - and second argument is variable a 
preceded by an
06:17 - ampersand sign.I'll talk about why I
am putting an ampersand before
06:21 - a in some time.What I'll do now,is now I'll 
write one more scanf() statement here.
06:25 - And this time,the second argument is
ampersand b.
06:29 - Now,I want to run this program and show
you what will happen.
06:33 - When I'm running the program,nothing is
coming on my command line or console.
06:37 - I have a printf() in my program,but
nothing is getting printed.
06:41 - What's happening here,is that program
execution has paused
06:44 - at this line at this first scanf().
06:47 - And program is expecting user to type in
and enter something
06:51 - in this command line or console for
this scanf().
06:55 - in the format bust,scanf() has two arguments.
06:59 - In first argument to scanf(),which is
our string constant.
07:02 - As you can see,we have passed percent d
,so program
07:06 - is expecting user to type in only a
number.
07:09 - Formatting rules for printf() and scanf()
are same
07:13 - just a bit,printf() prints things in a
format.
07:16 - scanf() reads data in a format.What I'll do
here is I'll just
07:20 - type in an integer and I'll
07:23 -  press enter and nothing is getting
printed even now.
07:27 - Now,the program is expecting me to type
in and enter something corresponding to
07:31 - the second scanf().
07:33 - Once again,it should only be a number
07:36 - So,I'll type in another number here and
,now that I'm pressing
07:39 - enter,this is what I'm getting.
07:42 - Output of my printf() is a equals 24
07:45 - ,b equals 15 and a x b to be
07:48 - equal 360.So,when the control has
reached
07:51 - printf(),value in a is 24
07:55 - ,value in b is 15 and value in c is
07:58 - 360.What has happened here is that when,
we have entered the first number
08:03 - corresponding to
08:04 - the first scanf(),this number has been
filled in
08:08 - a,and when we have entered the
second number corresponding to the
08:11 - second scanf()
08:12 - ,this number has been filled in b.So as
we can see
08:16 - scanf() can be used to read input from
programs command line or console
08:21 - corresponding to each percent d in string
constant passed to scanf().
08:26 - we must have another argument,that
should be
08:29 - a variable of type integer preceded by
an ampersand
08:33 - ,and the value read for this percent d
will be filled
08:36 - in this variable.Just like printf(),we
could have a scanf() with multiple percent 
08:41 - d
08:41 - in the format passed to scanf().
08:44 - We mostly do not put arbitary
characters.
08:47 - We mostly put the placeholders for
variables.
08:51 - If you remember other place holders from
previous lessons,then
08:54 - we used percent f for float data type,
08:58 - that can be used to store a real number,we
use percent c for 
09:04 - a character and there are a lot more.We will
get to know them later,
09:08 - so in scanf() corresponding to a percent
d,we must have
09:12 - an argument that should be name,often
integer variable preceded by an
09:16 - ampersand.
09:17 - Corresponding to a percent f,we would
have to pass
09:20 - a variable of type float preceded by
an ampersand,
09:24 - and similarly corresponding to a percent
c,we would have to pass
09:28 - a character preceded by an ampersand.
These place holders are same for printf()
09:32 - and scanf().In printf()
09:34 - you do not put an ampersand before the
variable name,but in scanf()
09:38 - you put an ampersand before the variable name.
Now,as I was saying
09:42 - in format string passed to scanf(),we 
would mostly have these placeholders
09:46 - and white spaces.It won't make much
sense having characters
09:50 - not forming a placeholder,if I run
this program
09:54 - as for the format passed to scanf(), I should
type in an integer
09:59 - then a space and then another integer.
10:02 - But a space in scanf(),a space in format 
string of scanf()
10:07 - discards multiple contiguous white
spaces,so what I can do is I can type a
10:11 - number of spaces here
10:12 - and then type in 15 and now if I'll press
enter,
10:17 - then also a and b have been filled
properly.
10:20 - so scanf() is not strict about a single
space
10:23 - in format string.It accepts multiple
spaces
10:26 - against a single space in format string
.Spaces
10:30 - and end of line characters,when you press
enter and
10:33 - end of line character goes as input.
These characters are treated as
10:37 - delimiters between values.Even if I
would type in
10:42 - the first integer and then type in some
10:46 - end of line characters by pressing enter,
and then type in the second integer
10:50 - ,then also a and b will be filled
properly.
10:54 - A space in format string of scanf()
will actually
10:57 - accommodate all contiguous white spaces
and
11:01 - end of line characters before the next
value.
11:04 - You can write a scanf() like this,but I
prefer writing one scanf() for each
11:08 - variable.
11:09 - So,I'll revert back to two scanf() here.And,now I want to do one more thing to
11:14 - make this program better
11:15 - before this first scanf(),I want to write
a printf()
11:19 - ,saying enter a and after the first
scanf() and before the second scanf(),I
11:24 - want to write
11:25 - another printf() saying enter b.Now,
let's run this program and see what
11:30 - happens.
11:30 - We are first printing enter a and then we
have paused for the user to enter
11:36 - the number.I'll type in a number here and press
enter and now we are first printing enter b
11:41 - and then we are pausing
11:43 - for the user to enter a second number and
,on pressing enter,I'm getting
11:48 - output of the third printf().
11:49 - This looks cool because now our program
11:52 - is printing a message and asking the
user
11:55 - to input the numbers.Okay,now I want to
answer a question
12:01 - that I had left earlier.Why are we
having to put an
12:04 - ampersand before the variable name
in call to scanf() ?
12:08 - To understand the ampersand,we will
have to go into details of
12:12 - how memory is managed for execution of a
program.
12:16 - A program will have multiple function
calls.
12:19 - Program execution always begins with the
main function.
12:22 - So,the first function call that will be
made automatically when the program
12:26 - starts
12:27 - will be a call to main function and then
any function
12:31 - can make calls to other functions.So,
here as we can see
12:35 - main function is making calls to these
two library functions
12:38 - printf() and scanf().Now,when a 
function is called
12:42 - some amount of memory is allocated
12:45 - specifically for execution of that
particular function call.
12:49 - And this memory is reclaimed
when function called finishes.
12:53 - I have cleaned up everything from the
memory and,Now let's try to understand
12:57 - what I'm saying
12:58 - visually.When a function is called,some
amount of memory is allocated
13:02 - specifically for execution of that
particular function call.
13:05 - Let's say the program has just started
execution so
13:09 - main function has been called.Let's say
this block
13:13 - in the memory is for execution of main
function.Now,
13:16 - a variable declared inside main function
13:19 - will get space inside this block of
memory.We have three variables in main
13:24 - a,b and c.These three will live inside this
memory allocated for main.
13:31 - A variable declared inside a function is
called
13:34 - local valuable and we can access it and
write to it from
13:38 - only within the function.When
that variable
13:42 - is passed as argument to a function.Like
here in this last call to printf(),we are 
13:46 - passing
13:47 - a,b and c as arguments,then all that
happens is
13:50 - the values are copied to local variables
13:54 - in called function.So printf() will just
13:58 - receive the values in three local
variables.printf()
14:02 - cannot modify a, b and c of main printf(),can
modify its
14:07 - own copy if it wants to.Now,with scanf()
14:10 - we want to fill in data in local
variables of
14:13 - main with the first call to scanf().We
want to write
14:17 - to a of main.To do this,what we do is
14:20 - we'd pass the addresss of a to scanf().
Every variable 
14:24 - would have an address in memory and
address of a variable can be passed as
14:28 - argument.
14:29 - Let's say,a is at byte address 200.
14:32 - Now,when we are saying ampersand a here
14:35 - in the call to scanf(),what we're doing
is we're passing
14:39 - value 200 which is the address of a
14:42 - and scanf() is receiving it in a local
variable.
14:46 - Now,scanf() has reference 
14:49 - to a.In C,a valuable that stores
address of other variable
14:53 - is called a pointer.So,scanf() has
14:57 - a pointer to a and using this pointer,it
can access
15:01 - and modify value in a and this is how scanf()
will be able to write
15:05 - something here.if you want to understand
this in detail, you can check the
15:09 - description of this video
15:11 - for a link to a lesson on pointers.
15:15 - So,in printf(),we are passing values
15:18 - in local copies,but in scanf() we're
passing
15:22 - adress,so scanf() can access the
variable in main.
15:25 - If you're not able to understand some of
these concepts,
15:28 - that I just explained then you can just
let go.
15:32 - I'll explain this concept in a lot more
detail in later lessons.
15:35 - For now,you just need to understand how
to make calls to printf() and scanf().
15:40 - That is how to read input and print
output.
15:43 - Using printf() and scanf(),we are
reading and writing
15:47 - to command line,console or text window
15:50 - ,whatever you call it.scanf() is
receiving the type in text from command
15:55 - line
15:56 - and printf() is displaying output on
command line.
15:59 - Input and output can happen in multiple
ways.
16:03 - In the beginning,we were filling data
in code itself.
16:06 - We were setting values of a and b in
code itself.
16:10 - You cannot expect normal user to make
changes
16:14 - in code and then compile and run it.Only
your programmer friend can do it.
16:18 - So,that was not a good way.Next we have
used a
16:22 - scanf() entry into functions to read and
write
16:26 - text from command line and this looks
cool when the input
16:30 - using keyboard on command line.Then this
is referred to as
16:34 - reading from standard input and when we
write to command line
16:38 - ,then it's called writing to standard 
output.
16:42 - Another way to input can be a file that
our program can read.
16:46 - And program can also write back to a
file.A modern day application can also
16:50 - take input from something like
16:52 - a scanner and output can also be printed
16:56 - using a printer.Through out this lesson,
through out this series,
17:00 - we're going to use standard input and
output.We're going to use
17:03 - scanf() and printf().We will have a couple
of lessons and reading
17:07 - and writing to file as well.Okay,I'll
stop here now.In our next lesson,I will
17:11 - discuss
17:12 - operators and expressions.This is it for
this lesson.
17:16 - Thanks for watching !