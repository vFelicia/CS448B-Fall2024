00:00 - In our lesson so far we have seen how we can
work with pointers in some of the basic scenarios
00:08 - but there are some scenarios where pointers
can be really puzzling & one such scenario
00:13 - is when we want to use pointers to pointers.
In this lesson we are going to see how we
00:20 - can use a pointer to pointer Let us assume
that this is a logical view of computer's
00:27 - memory & each partition here is one byte of
memory now we know that each byte of memory
00:32 - has an address, we have drawn the memory horizontally
here, let us assume that the address increases
00:38 - as we go from left to right. So if this byte
is at address 200, the next byte would be
00:44 - at address 201 & the next byte would be at
address 202 & so on Now lets say in my programme
00:52 - I have declared an integer variable named
X & maybe I have initialized it as 5. now
01:02 - when the programme will run, some amount of
memory will be allocated for this variable
01:07 - x. in a typical architecture in a typical
compiler, integer is stored in 4 bytes, so
01:14 - 4 byte will be allocated for x. so, Lets say
these 4 bytes at address 225, this block of
01:22 - 4 bytes, starting address 225 is allocated
for x & the values stored in this block of
01:29 - 4 bytes for x is 5. now the next thing that
I want to do is I want to declare a pointer
01:37 - variable that will store the address of x.
now to store the address of an integer we
01:42 - will have to declare a pointer to integer
something like this we need to put an * sign
01:48 - in front of the variable name. now what will
happen is that some amount of memory will
01:53 - be reserved for this variable p in a typical
architecture. Pointer is also stored in 4
01:59 - bytes so let's say we get this block of 4
bytes at address 215 for p & now I want to
02:07 - write a statement like this so I want to fill
in the address of x in p & that's how p points
02:14 - to x & operator gives us the address of a
variable now one important thing here, we
02:21 - are able to store the address of x in p because
p is of type pointer to integer. If p was
02:29 - of type pointer to character or pointer to
some other some other variable, this statement
02:34 - p=&x would not have been valid. so if I have
to write down the types of these two variables,
02:41 - then x is an integer & p is pointer to integer
or I can also say that p is int star or int
02:49 - asterisk & why pointer variables are strongly
typed why do we need a pointer to integer
02:56 - to reference or store the address of an integer
it is because we don't just store the address
03:02 - of a variable in a pointer variable we also
use the pointer variable to dereference the
03:10 - address & write some value there. So if I
write a statement like this, this value here
03:15 - at address 225 , this x is now modified. now
can I create a pointer to this variable p,
03:23 - which itself is a pointer to integer Well
yes we actually we can do so so let's say
03:28 - we want to create a variable named q, that
will store the address of p now what will
03:34 - be the type of this variable we need a pointer
of a particular type to store the address
03:40 - of a particular type of variable, so to store
a pointer to integer, we will have to say
03:46 - that we want a pointer to pointer. so we will
put two ** sign in front of a variable name
03:54 - & now this variable q can store the address
of p so with this first line with this int
04:03 - **q we created q. lets say we created q at
205 & now we are saying that q will store
04:12 - the address of p so q points to p & the type
of q is int **. We put two *. Simple way to
04:25 - read this is that the type of variable x is
integer so to store the address of x we will
04:30 - need a pointer of type int * so we will put
a star to say that this is a pointer to that
04:38 - particular type & to store the address of
p we will need a pointer to int * so we will
04:44 - put one extra * to say that this is a pointer
to int star & we can go on like this lets
04:51 - say we want to declare a pointer to pointer
to pointer so int ** is pointer to pointer
04:57 - & we will put one more * we can put these
three * immediately after this key word int
05:03 - or we can put it immediately before the variable
name like we have done in the case of q here
05:09 - let's say we define r as int *** so lets say
r gets this address 230 in the memory now
05:16 - r is of type int *** so it can store the address
of int ** so it cannot store the address of
05:27 - x or p the statement something like r =&q
will be valid now I have translated my previous
05:38 - rough code into a working c programme. Let
us assume that this programme is working as
05:44 - per this memory sketch that we r showing in
the right now I will write some print statements
05:51 - and you need to guess the out puts. So basically
you have to assume that these variables x
05:57 - p q & r are allocated these addresses what
we r showing here in the right so the first
06:03 - print statement that I am going to write is
I want to print *p & this one should be simple
06:11 - for you *p would be value stored at address
in p so this will be 6 now the next statement
06:18 - that I want to print is *q so *q will be a
value at address stored in q address stored
06:26 - in variable q is 215 so this is nothing but
the value of p so this will be 225 & now I
06:36 - want to print **q so I want to do de referencing
twice first I want to go to *q, *q is this
06:44 - address 225 & now I want to look at the value
at address 225 so this one will be 6 we could
06:53 - have avoided writing this parentheses here,
we could have said **q only & that would have
07:01 - also that would have meant the same but it's
a good practice if we are using this asterisk
07:07 - operator to use parentheses wherever we can
do it because some times when we r also using
07:14 - other operators we are not sure about the
precedence & we want to avoid unwanted behaviors
07:23 - now what about these two print statements
**r & ***r, *r means value in q which will
07:31 - be 215 & then further one more dereferencing
will take us to value in p which is 225 & one
07:40 - more dereferencing will take us to value in
x which will be 6 if u see this is really
07:45 - interesting from r we r using one * operator
& we are able to go to q then we are using
07:52 - the *operator twice & we reach p & then we
r using the * operator thrice & we reach x.
07:59 - Lets make some more changes in this code & run
this in a real compiler so what I'll do here
08:05 - is I'll write a statement like this & then
after this statement I'll print the value
08:14 - in x. If u run this now as you can see *p,
**q & ***r all these 3 values are 6 the address
08:25 - will not be same as we had shown in the example
for obvious reasons & as u can see we are
08:32 - able to modify x by doing this chain of de
referencing using this variable r. if we would
08:40 - write something like **q = let's say something
like this. Now *p is also referencing x & **q
08:53 - is also dereferencing x sorry we are dereferencing
here so any guesses what will be the output
08:59 - of this last print statement Well if u see,
x is incremented by 2 here so this was pointer
09:06 - to pointer I recommend that you write some
of this code yourself & play a little bit.
09:13 - In the coming lessons we will use pointer
to pointer in some real problem scenarios.
09:18 - So thanks for watching