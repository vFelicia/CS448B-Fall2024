00:00 - In our lessons on linked list so far, we
have implemented some of the
00:04 - basic scenarios
00:06 - like uh... inserting a node in linked list
00:09 - and deleting a node from linked list
00:11 - In this lesson
00:12 - we will write code
00:14 - to reverse a linked list
00:16 - This is one of the most
00:17 - favorite interview questions
00:19 - and this is
00:21 - a really interesting problem
00:23 - so let me first define the problem. Let's say we  have been given a link to this
00:27 - list of
00:27 - integers
00:29 - like this
00:30 - so this is our input. We have four nodes in
this linked list
00:34 - at addresses hundred, two hundred
one fifty and two fifty respectively.
00:39 - I always write these addresses in the logical view because
00:42 - it's really important
00:43 - we visualize how things are in the memory
00:46 - and uh... what is what?
00:48 - Like this first node,
00:50 - that we also call the head node is being pointed
00:54 - by this particular variable named head
00:56 - so this variable is basically storing
the address of the head node
01:00 - Now, this variable is only the pointer, this is
not the head node itself.
01:03 - And we do not have any other identity
of the linked list
01:07 - except the address of the head node.
01:09 - So, given a linked list like this
01:11 - if we have to reverse it
01:12 - and by reversing we do not mean
moving around data we cannot move
01:17 - 5 at
01:18 - address 100
01:19 - 2 at address 250
01:21 - and do something like this
01:22 - we actually have to adjust the links
01:25 - so our output
01:26 - should be something like this,
01:29 - the head pointer should point to this
address two fifty
01:34 - and we should go like  250 to 150, 150 to 200
01:38 - and this node at address 100
01:40 - should have
01:40 - address 0,
01:42 - or null.
01:43 - In each of these nodes this first field in red is the data part
01:47 - and the second field is the address part.
01:48 - So, this is what we will get when we'll
01:51 - reverse the list.
01:52 - there are two approaches to solve this
problem
01:55 - one is an iterative approach where we'll be using a loop
01:58 - We'll
01:59 - traverse through the list
02:01 - and at each step we will revert
02:03 - one of the links.
02:05 - Another solution is
02:06 - using recursion.
02:08 - In this lesson, we will
02:09 - try to understand the iterative solution.
02:12 - So, coming back to our input list
02:15 - the iterative solution is relatively easier to understand
02:19 - what we can do is we can traverse the whole list
02:22 - and uh... as we go to
02:23 - each node
02:25 - we can adjust the link part of that node
02:28 - to make it
02:28 - point to the
02:29 - previous node instead of the next node.
02:32 - So, we will start at the first node
02:34 - At each step we want to reverse the link, so we want  to make the node point
02:39 - to the previous note instead of the
02:41 - next node.
02:42 - For the first node there is no previous node,
02:46 - so lets say the previous node is NULL,
02:47 - and now we want to cut this particular
link
02:50 - and we want to build this
particular link. So, we will simply
02:53 - change the address field to 0
02:56 - and we have reversed the link part of
this particular node.
02:59 - And now, we will go to the next node in the list.
03:03 - We will come to this node.
03:04 - Of course, the question would be how
would we go to the next node if
03:08 - we have
03:08 - broken this link here!
03:10 - We will come back to that in the
implementation details.
03:13 - Let's say
03:14 - we are able to traverse the list and go to each of the nodes at each step.
03:18 - Let's say we store all the relevant information to do that
03:22 - in some temporary variables.
03:24 - Now, this node again we will reverse the links,  it was the link so the address part will be set as hundred
03:28 - here.
03:30 - Now, we will go to the next node at address hundred and fifty,once again to
03:34 - reverse the link, we will set the address as
03:36 - 200 here.
03:38 - So, we will break this link and
03:41 - basically we are building this link,
03:43 - and now we will go to
03:45 - address two fifty, the next node
03:47 - and we will set the address one fifty here
03:49 - so we will cur this link
03:51 - and build this link!
03:53 - And finally, when we have reached the last node, we will adjust the address
03:59 - in the head variable
04:01 - to two fifty. So,this particular variable, this particular pointer
04:05 - will point to this node at address 250.
04:08 - And, our linked list is reversed now!
04:12 - So, let us implement this particular logic
in the real C program.
04:16 - I will redraw the original input list,
04:19 - in my C code,
04:21 - i would define node
04:22 - as a structure
04:24 - like this!
04:25 - This is how we have defined a node in our
previous lessons.
04:29 - So, there will be two fields,
04:31 - uh... one
04:32 - to store the data which will be of
type integer and another to store the
04:35 - address of the next node
04:38 - We will name this field 'next' of type
04:41 - pointer to node,
04:42 - and let's say,
04:44 - head is a global variable,so, head is a pointer to node, head is a variable
04:48 - which is a pointer to node/
04:50 - And, it is a global variable. So, it is accessible to all the functions.
04:55 - We do not need to pass it around to
functions,
04:58 - and now, all I want to do in my code is that,I
want to write a reverse function
05:02 - that will reverse
05:03 - the linked list which is pointed to by
this particular pointer.
05:08 - As we said, we'll traverse the
whole list and at each step
05:12 - we will modify the link field of the
node to make it point to the
05:16 - previous node instead of the next node.
05:19 - So, how do we traverse the list?
05:22 - We would traverse the list in our C code,
05:24 - something like this,
05:26 - we will first take a variable which will be
05:29 - pointer to node
05:30 - Let's say we will name
05:31 - it temp
05:32 - uh... then first we will set temp to head
05:36 - By saying this, we will mean
05:38 - temp points to
05:40 - the first node.
05:41 - And then, we will run a loop like this. 
We will say that
05:45 - while temp is not equal to NULL,
05:47 - take temp to the next address with a
statement like
05:52 - temp=temp.next
05:53 - uh... in our problem here, we don't just
have to look at what's the list
05:57 - as we traverse the list we have to
05:59 - uh... reverse the links so we have to
set the address field of a
06:03 - particular node
06:04 - as address of
06:06 - the previous node
06:07 - instead of the next node.
06:08 - Now in a linked list, we would always know the address of the next node but
06:12 - we would never know the address of the
previous node,
06:15 - so as we traverse the list, we will have to keep
06:18 - track of the previous node in another
variable.
06:20 - So, what i'll be doing, is something
like this.
06:24 - Now, I will also declare a variable named
06:26 - previous
06:27 - and initially set it to NULL,
06:29 - because for the first node or the
head node,
06:32 - the previous node is NULL.
06:34 - And now, in my loop, we will have to
update both these variables,
06:39 - and the variable
06:40 - temp that will store the
06:41 - current node and the variable prev
06:45 - that will store the address of the previous node
06:48 - and now in my loop i can do something
like this
06:51 - At each step,
06:52 - if temp is our current node, we are
06:55 - traversing the list
06:57 - then we will say that
06:58 - temp.next is equal to previous
07:01 - So, we will set the link part of the
current node as the address of the
07:04 - previous node.
07:05 - In our example here, at the
07:07 - first step
07:08 - we will say that,
07:10 - temp.next will be 0.
07:13 - NULL is nothing but address 0.
07:15 - So, we will cut this link
07:17 - and we will build
07:18 - this link.
07:19 - Now, we should be able to
07:21 - move temp to two hundred and we should
be able to move previous to hundred.
07:25 - Now, in the next step
07:26 - but there is a problem
07:28 - as soon as we adjusted the link of
this particular node at address hundred
07:33 - to make it point to NULL,
07:35 - we lost the address of the next node.
So how do we move temp
07:40 - to this particular node at address two hundered.  We cannot say that temp =
07:43 - temp.next.
07:44 - And now,
07:45 - if we say temp=temp.next, now we will go to NULL.
07:49 - So, this is a problem
07:51 - so at each step in our iteration before we
07:54 - set the link field of  the
07:56 - the current node to make it point to the
07:58 - previous node
07:59 - we should store the address of the next node
08:02 - in a temporary variable,  in another
temporary variable,
08:05 - So, what I will do here is something like
this
08:08 - first of all i want to name this particular variable temp
08:12 - as current
08:13 - to mean that
08:14 - this is the current node at each stage
in my iteration
08:18 - so we initially set current to head and
then
08:22 - we are running the loop as while current is not
equal to NULL,
08:25 - and then i have also declared one more temporary pointer variable named next
08:30 - what i will do at
08:32 - each step in my iteration inside the while
loop
08:35 - is that first
08:37 - I will say that next=current.next
08:40 - So first I will store the address of the next node in this particular
08:44 - variable next.
08:46 - So in our example here, for the first node initially, things will look,
08:50 - something like this. Now we can set
uh... link part of the current node as the
08:54 - address of the previous node
 with a statement like this
08:58 - So, when we will write the address 0 here, initially
09:01 - we will break this link, and
09:03 - create this link
09:05 - Now, we will not loose the information
about the next node,
09:08 - now we can redefine our previous and
current
09:11 - so we will first move
09:12 - previous to current
09:14 - and then we will move current to next
09:17 - Please note that this particular variable next is a local variable
09:21 - in the Reverse function
09:23 - and when we say something like current.next we mean the
09:26 - link field in the node,
09:28 - well when we simply say next, we mean this particular local
09:33 - pointer variable, so they're different
09:35 - this is not current.next, actually
this is current -> next
09:38 - which is an alternate syntax for
09:41 - *(current).next so we use *
operator to de- reference
09:45 - that address
09:46 - and then we access the next field for
the sake of saying we say,  current.next
09:51 - or temp.next
09:53 - uh... so with these two lines in our loop
09:55 - we are resetting out current and previous pointers.
09:58 - This is how we are traversing the list.
10:00 - Now,  if you see in the next iteration
10:03 - current is 200, not equal to NULL
10:06 - NULL is zero
10:07 - so we will go to this particular
statement
10:10 - next is equal to current.next.
10:12 - So, next will now store the address hundred
and fifty,
10:15 - and not we will say current.next is equal to
10:17 - previous. So, we will cut this link,
10:19 - uh...previous is hundred right now so we will set hundred here.
10:23 - So basically,  we will build this particular
link
10:26 - and then we will move
10:27 - then we will first move previous to current
10:30 - and then move current to next.
10:32 - And, we will go on like this.
10:44 - So finally,
10:45 - we will reach a stage like this when current will be equal to NULL, we will come
10:49 - out of the loop,
10:50 - and when we will come out of the loop
10:52 - this particular variable
10:53 - previous, this particular pointer
previous will store the address of the last
10:58 - node.
10:59 - And, there is one more thing remaining
here.We need
11:03 - to adjust this particular variable head
11:06 - uh... this link at this stage does not
exist
11:09 - and in my code I will say
11:11 - head should now be equal to
11:13 - the address in variable
11:14 - previous!
11:15 - So, head is now 250
11:18 - this is our new head,
11:20 - and now our list is
11:22 - reversed
11:23 - uh... there are a couple of things that
i want to point out here
11:27 - one thing is that
11:28 - we must see that our
implementation is working for all test
11:31 - cases and so we must also verify it for
11:34 - special or corner test cases.  In this
case corner test case will be
11:39 - when the list is empty.
11:41 - In that case head will be NULL.
11:43 - or, when the list is having only one node
11:46 - if you see this particular
implementation will work for these two
11:50 - scenarios
11:51 - and give it some time and you
11:53 - should be able to figure it out
11:55 - let's not run this code with
11:56 - complete implementation of all the
functions to
11:59 - insert and print nodes.
12:01 - In my code here,  uh... i have written Reverse function
12:05 - to accep the address of the head node as
argument
12:09 - and then return the address of the head 
node after modification of the list
12:14 - after reversal of the list
12:15 - and then I have written the the main method in
which head as a local
12:19 - variable
12:21 - and then i'm using couple of
12:22 - insert functions and making couple of
calls to insert function
12:27 - insert function also takes two arguments
12:29 - the address of the head node and the data
 to be inserted and
12:32 - it returns back
12:33 - the address of  the head node
12:36 - it will either be modified or not modified
12:38 - uh...lets say we are inserting this at the end of the list
12:42 - 2 4 6 8
12:44 - and then we are making call to the
12:47 - print function which we have written
12:48 - to print the
12:50 - elements in the list
12:51 - and then i'm making a call to reverse
and finally printing again
12:55 - my logic of the reverse function remains the same except that i've
12:58 - changed
12:59 - the method signature
13:02 - and in the end
13:02 - I am returning head,
13:05 - which will return the address of the
head node
13:08 - let's say we have written all the insert and print functions correctly
13:13 - these are the two functions insert and print
so let's now run this code and see what
13:17 - happens before the list is reversed the list is two four six eight and after
13:22 - the list is reversed the output is eight six
four two
13:25 - uh... let us try for the case the list has only one element in
13:29 - the list
13:31 - so i will remove, i will comment out these three insert
insert statements and this also seems to
13:36 - be working.So, this was reversal of the linked list through iteration.
13:41 - In the next lesson, we will write code to reverse linked list using recursion.
13:46 - So, thanks for watching!