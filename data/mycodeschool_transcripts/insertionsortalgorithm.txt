00:00 - In our lessons on sorting algorithms so far,
we have talked about two of the sorting algorithms
00:06 - - selection sort and bubble sort.
00:08 - Now, in this lesson we are going to talk about
another sorting algorithm named insertion
00:13 - sort.
00:15 - Insertion sort is not the best sorting algorithm
in terms of performance, but its a little
00:20 - more efficient than selection sort and bubble
sort in practical scenarios.
00:25 - Insertion sort is also pretty intuitive sorting
technique.
00:28 - So, lets see what it is.
00:30 - To explain the logic of insertion sort.
00:32 - i'll once again use the example of cards.
00:34 - So, let's say we have a set of cards in our
hand and we want to arrange these cards in
00:41 - increasing order of rank.
00:42 - There are couple of intuitive ways to sort
a set of cards in our hand.
00:47 - One of the things that we can do is initially
we can keep all the cards in our left hand
00:52 - and we can start taking cards one by one from
the left hand and we can start building a
00:57 - sorted arrangement in the right hand.
01:00 - Our first card is 9 and there is no other
card in right hand.
01:04 - So, 9 will simply go into the right hand.
01:06 - Now, we will take the next card in our left
hand which is 3 in this case.
01:11 - Now, when we will take 3 to the right hand,
we will insert it before 9 to make sure that
01:16 - the cards are sorted.
01:18 - At any stage during this whole process, the
left hand will be unsorted and the right hand
01:23 - will be sorted.
01:24 - Now, the next card that we will pick is 6.
01:27 - Now, when we will six to the right hand it
will have to be inserted between 3 and 9 and
01:34 - now the last card that we will pick will be
4.
01:38 - And 4 will have to be inserted between 3 and
6 in the right hand.
01:43 - And finally we will have a sorted arrangement
in the right hand.
01:47 - I have used 2 hands here, but if you see thus
can be done i none hand also.
01:52 - The idea is pretty simple.
01:54 - What we are basically doing is, we are dividing
the set of cards into two subsets - a sorted
02:00 - subset or a sorted part and an unsorted subset
or unsorted part.
02:05 - Initially, all the cards are in unsorted subset.
02:08 - And the sorted part is empty.
02:10 - And we are picking up one card from the unsorted
part at a time and inserting it into the sorted
02:17 - part.
02:18 - Let's say we have something like this.
02:19 - We have a boundary here and let's say cards
to the left of this line, this vertical line
02:25 - are sorted and cards to the right of this
vertical line are unsorted.
02:28 - So, initially all the cards are in unsorted
part.
02:32 - Now, we will pick up one card at a time and
insert it into the sorted part.
02:38 - If there is just one card, we simply move
it.
02:41 - Now, we pick up the next card from the unsorted
part.
02:45 - It's 3.
02:46 - It will be inserted before 9 in sorted part.
02:49 - Now, we will pick 6 and 6 must be inserted
between 3 and 9 and finally we will take 4
02:56 - and 4 must go between 3 and 6.
02:58 - It should be inserted between 3 and 6.
03:01 - And we are done once our unsorted subset is
empty.
03:04 - Now, when we want to write a program to sort
a list, we can do something similar to what
03:09 - we did for the cards.
03:10 - So, let's say we want to sort a list of integers
given to us in the form of an array, let's
03:16 - call this array A.
03:18 - We have 6 elements in the array, so we have
indices from 0 to 5.
03:22 - What we can do is we can start by saying that
we will divide the array in to two subsets.
03:27 - Initially, elements till index 0 will be part
of sorted subset or sorted half because if
03:33 - you have one element in a set, the set is
always sorted and all other elements are part
03:40 - of unsorted subset.
03:42 - And now we will go on picking elements from
the unsorted subset and we will keep on inserting
03:47 - them into the sorted subset.
03:49 - So, we will kind of keep expanding the sorted
subset till unsorted subset becomes empty.
03:55 - At any stage let's say the cells in blue are
part of the sorted subset.
04:00 - Now, at this stage, I'll pick up 2 which is
the first element in the unsorted subset.
04:06 - Programmatically, this will mean storing the
value in some variable.
04:10 - let's say the name of the variable is value.
04:12 - So, all we have done is we have said something
like value = A[1], but for the sake of understanding,
04:18 - lets assume that we have taken out 2 from
that position and we have created a hole there
04:23 - at that particular position.
04:25 - Now, what we will do is to insert 2 into the
sorted part, into the sorted subset, we will
04:31 - shift all numbers greater than 2 in the sorted
part by one position to the right.
04:37 - We have only one element at this stage in
the sorted subset - 7 which is greater than
04:43 - 2, so 7 will be shifted one position towards
right and the hole will go to position 0.
04:50 - And now, we will fill up 2 at position 0.
04:52 - we will fill up 2 in the hole.
04:54 - And now we are sorted till index 1.
04:56 - Now, once again we will pick up the first
element from the unsorted part.
05:01 - So, we will create a hole like this.
05:03 - Remember, there is no actual taking out of
4 from this position, we are just filling
05:09 - up 4 in another variable and assuming that
there is a hole at that particular position.
05:14 - Now, once again we will shift all the numbers
greater than 4 by one position to the right.
05:19 - we will do so one by one.
05:21 - We will start at position 1 and see if the
number is greater than 4, 7 is greater than
05:26 - 4, so 7 will be shifted to index 2 and the
hole will now move to index 1.
05:32 - Now, we will look at 2, 2 is not greater than
4.
05:35 - So, no more shifting is needed, we will simply
put 4 at index 1.
05:40 - And now we are sorted till index 2.
05:42 - And now we will pick 1 from the unsorted part
and once again we will start shifting all
05:48 - the elements greater than 1 in the sorted
subset one position towards right.
05:54 - 7 is greater than 1, so we will shift it and
we will, the hole will now move to index 2.
06:01 - Number 4 is also greater than 1, so it will
also shift.
06:04 - number 2 is also greater than 1, so hole will
shift to 0, and we do not have any number
06:10 - greater than 1 to be shifted.
06:13 - So, we will move 1 to this hole and now we
are sorted till index 3.
06:18 - And we will repeat the same insertion logic
for 5 and 3 as well.
06:22 - for 5 we will have to shift only 7 and for
3 we will have to shift 7,5, and 4.
06:30 - So, finally 3 will go at index 2.
06:34 - So, finally we have a sorted list.
06:37 - This particular in-place logic of shifting
and inserting elements to sort a list is insertion
06:44 - sort algorithm.
06:45 - And now, let's quickly write pseudo code for
this algorithm.
06:48 - I'll write a function named InsertionSort
that will take two arguments - an array and
06:54 - the number of elements in the array.
06:56 - let's say the name of the array is A and the
number of elements in the array is n.
07:00 - Now, initially we are saying that we are sorted
till index 0.
07:04 - So, we will pick up elements from 1 till n-1
and at each step we will insert the element
07:11 - at its appropriate position in the sorted
subset.
07:14 - So, in our code we will run a loop starting
index 1 till n-1 and first we will create
07:23 - a hole by taking out the value to insert in
another variable.
07:28 - So, temporarily, we will keep A[i] in this
particular variable.
07:32 - And then, I'll take another variable to mark
the position of the hole.
07:36 - At this stage, the hole is at index i and
now we need to shift all the elements greater
07:42 - than the value to be inserted one position
to the right.
07:46 - While hole is greater than 0 and the element
at index hole -1 is greater than value, we
07:54 - will shift the element at index hole-1 to
the hole.
07:58 - So, now our new hole will be index hole-1.
08:04 - When we will find a smaller element than value
in the sorted subset, this particular condition
08:12 - will be false, we will exit the while loop
or we will exit the while loop when hole will
08:17 - be equal to 0, so there will be no more element
to shift and finally when we will come out
08:22 - of the while loop, we will put the value into
the hole.
08:29 - And this is our pseudo-code for insertion
sort.
08:31 - i'll quickly walk you through this particular
code and show a simulation with this particular
08:36 - example.
08:37 - So, we are running this code with this particular
array.
08:40 - We will start with i = 1, so value will be
2 and hole will be index 1.
08:45 - And now we come to the while loop, hole is
not 0, so we can be sure that there is an
08:50 - element before it and we can access the element
at index hole -1, hole -1 is 0 and the element
08:57 - there is 7 which is greater than the value
2.
09:02 - I'll mark the hole with this color - orange.
09:04 - And now we come here.
09:05 - We will say A[hole] , the element at index
hole should be element at index hole-1.
09:10 - So, 7 will now be written at index 1 and our
imaginary hole will shift to index 0.
09:18 - and now in the while loop, this condition
will be false, hole = 0, so we will come here.
09:25 - We will fill up 2 at this particular position
at index 0.
09:28 - And now, i will be incremented.
09:30 - So, value will be 4 and hole will be index
2.
09:34 - 7 is greater than 4, so we will shift it and
the imaginary hole will go to position 1 and
09:40 - now A[hole-1] which is 2 is not greater than
value, so we will come out of the while loop
09:47 - and we will write 4 at this particular position.
09:50 - And we will go on like this.
09:55 - For 1, we will shift all the numbers in the
sorted subset.
10:02 - So, finally we will have a sorted array.
10:08 - Sometimes, the hole may not shift even by
one position.
10:12 - We will not even go inside this while loop.
10:14 - In that case, it will mean just taking out
the value and inserting it again into the
10:18 - hole.
10:19 - It will happen when the number to be inserted
will already be at its appropriate position.
10:24 - So, this is pseudo-code for insertion sort
algorithm for you.
10:28 - Let's now try to analyze the time complexity
of this algorithm.
10:31 - We can try calculating the running time expression
for this algorithm.
10:36 - Simple statements in a program execute in
constant time.
10:39 - By simple statements, we mean statements having
simple operations like assignment, arithmetic
10:45 - or logical operations like these are simple
statements.
10:49 - let's say these statements will take some
constant time C1, they'll together take some
10:53 - constant time C1, these two simple statements
will together take some constant time C2,
10:59 - and this particular statement will take some
constant time C3.
11:02 - Now, for our algorithm, these two lines will
always execute n-1 times, and how many times
11:09 - will these two lines execute inside the second
loop.
11:12 - Well, it depends.
11:14 - it depends upon the input.
11:15 - When we will have a sorted array, then we
will not go inside this while loop even once
11:21 - because this particular condition will never
hold true and this particular statement with
11:25 - cost C3 will also execute n-1 times.
11:29 - So, overall time taken in the best case will
be equal to (C1+C3)*(n-1).
11:34 - There will be some additional cost to increment
counters and all or to do this comparisons
11:41 - inside this condition for loops.
11:45 - Lets assume that they are accounted for in
C1 and C2 respectively.
11:49 - This one should be n-1 in bracket.
11:51 - So we have a polynomial like an+b where a
and b are some constants in terms of C1 and
11:56 - C3 and whenever we have a polynomial like
this for the running time, it belongs to the
12:01 - set big-oh of the highest order term in the
polynomial.
12:05 - So, this will be O(n).
12:07 - so, insertion sort is O(n) in best case.
12:11 - We will have a worst case when we will have
a reverse sorted array something like 5,4,3,2,1.
12:17 - In that case, for i = 1, the statements inside
the while loop will be executed once, we will
12:24 - have one shift.
12:25 - For i =2, we will have 2 shifts and we will
go on like this for i=3, we will have 3 shifts
12:30 - and for i = n-1, we will have n-1 shifts.
12:34 - So, overall cost will be something like (C+C3)(*(n-1)
and {1+2+3+...n-1}C2.
12:49 - And if we will evaluate this arithmetic progression,
we will get n*(n-1)/2 and when we will reduce
12:57 - this whole expression further, we will get
a polynomial something like an^2 + bn + c
13:03 - where a,b and c will be some constant, some
constants in terms of C1,C2 and C3.
13:09 - And this will belong to the set O(n^2) which
is another way of saying that for very high
13:15 - values of n, the rate of growth will be pretty
similar to the growth of n^2.
13:22 - These lower order terms will not matter.
13:24 - If you are not aware about time complexity
analysis and big-oh notation, we have a complete
13:29 - series on time complexity analysis.
13:32 - You can find a link to it in the description
of this video.
13:34 - In average case, for ith position, we will
make i/2 shifts and if we will try to calculate
13:41 - the time expression, it will again be some
polynomial of form an^2 + bn +c.
13:46 - So, for average case also, we will be O(n^2).
13:50 - Even though insertion sort is also O(n^2)
for worst and average case, the number of
13:56 - comparisons and shifts in insertion sort in
all practical scenarios is a lot less than
14:02 - selection and bubble sort.
14:03 - So, is considered to be better than selection
and bubble sort.
14:06 - So, this was insertion sort and its time complexity
analysis.
14:09 - Thanks for watching !