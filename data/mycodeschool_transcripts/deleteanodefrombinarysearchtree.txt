00:00 - In this lesson, we're going to write code
to delete a node from binary search tree.
00:04 - In most data structures deletion is
tricky.
00:08 - In case of binary search trees too, it's
not so straightforward.
00:12 - So let's first see what all
complications
00:15 - we may have while trying to delete a
node from binary search tree.
00:18 - I have drawn a binary search tree of
integers here.
00:21 - As we know in a binary search tree for
each node
00:25 - value of all nodes in its left subtree
is lesser
00:28 - and value of all nodes right
subtree is greater.
00:32 - For example, in this tree if I'll pick this
node with value 5
00:37 - then we have 3 and 1 in its left
subtree which are lesser
00:41 - and we have 7 and 9 in its right
subtree
00:44 - which are greater, and you can pick any
other node in the tree and this property
00:48 - will be true else the tree is not a BST.
Now when we need to delete
00:53 - a node, this property must be conserved.
Let's try to delete some nodes from this
00:58 - example tree and see if we can
01:00 - rearrange these things and conserve the
property of binary search tree or not.
01:04 - What if I want to delete this node the
01:08 - value 19. To delete a node from tree
01:11 - we need to do two things, we need to
remove to reference of the node
01:15 - from its parent so the node is detached
from the tree.
01:19 - Here we will cut this link we will
set right child of
01:24 - this node with value 17 as null
and the second thing that we need to do
01:28 - is
01:29 - reclaim the memory allocated to the
node being deleted.
01:33 - that is wipe off the node object from memory.
01:36 - This particular node with value 19 that
you're trying to delete here 
01:40 - is leaf node. It has no children and
even if we take this guy
01:45 - out by simply cutting this link that is
01:48 - removing its reference from its parent
and then
01:51 - wiping it off from memory there is no
problem,
01:55 - property of binary search tree that for
each node value of nodes in left
02:00 - should be lesser and value of nodes in
right should be greater
02:03 - is conserved. So deleting a leaf node, a
node
02:07 - with no children is really easy. In this tree,
these four nodes with values
02:11 - 1, 9, 13 and 19 are leaf nodes.
02:14 - To delete any of these, we just need to
cut the link
02:18 - and wipe off the node that is clear it
from memory.
02:21 - But what if we want to delete a non leaf
node,
02:25 - what if in this example we want to
delete this node with value 15,
02:29 - I can't just cut this link because
02:32 - if I'll cut this link, we will detach not
just
02:35 - the node with value 15 but this
complete subtree.
02:39 - We have two more nodes in the subtree
we could have had
02:43 - a lot more. We need to make sure that all
other nodes
02:46 - except the node with value 15 that's been
deleted
02:49 - remain in the tree. So what do we do now.
02:52 - This particular node that we're trying
to delete here has two children
02:57 - on two subtrees. I'll come back to case
of node with two children later
03:02 - because this is not so easy to crack.
What we want to discuss first
03:05 - is the case when node being deleted
would have
03:09 - only one child. If the not being deleted
would have only one child
03:14 - like in this example this node with value 7
03:17 - this guy has only one child. This guy has
a right child but does not have left
03:21 - child.
03:22 - For such a node what we can do is we can
link its parent
03:25 - to this only child, so the child
03:29 - and everything below the child we could
have some more nodes below 9 as well
03:33 - will remain attached to the tree and
only the node being deleted
03:37 - will be detached. Now we're not losing
any other node
03:40 - than the node with value 7. This is my
tree after the deletion.
03:45 - Is this still a binary search tree. Yes, it
is.
03:48 - Only the right subtree of Node with value
five has changed.
03:52 - Earlier we had 7 and 9 in right subtree of 5
03:56 - and now we have 9 which is fine. What
if we were having some more nodes below
04:01 - 9.
04:02 - Here in this tree, i can have a node in left of
9
04:06 - and the value in this node has to be
lesser so than 12,
04:09 - greater than 5, greater than 7 and lesser than 9.
04:13 - We are left with only 1 choice. We can only
have 8 here,
04:17 - in right we can have something lesser
than 12 and greater than 5, 7 and
04:22 - 9
04:22 - all in our between 9 and 12. Okay
so if the original tree was this much
04:27 - after deletion
04:29 - this is how my tree will look like. Okay
so are we good now.
04:33 - Is the tree in right a BST. Well yes, it is.
04:37 - When we are setting this node with
value 9 as right child of
04:40 - the node with value 5. We are basically
setting
04:43 - this particular subtree as right subtree
of the node with value 5.
04:49 - Now this subtree is already in right of 5
04:52 - so value of all nodes in this subtree is
already
04:55 - greater than 5 and the subtree itself
of course is a binary search tree.
05:00 - Any subtree in a binary search tree
will also be a binary search tree,
05:04 - so even after deletion, even after the
re-arrangement
05:08 - property of the tree that for each node,
nodes in left
05:11 - should be lesser and nodes in right should
be greater in value
05:15 - is conserved. So this is what we need to
do to delete
05:18 - a node with just one child or a node
with just
05:22 - one subtree connect its parent to 
its only child
05:26 - and then wipe it off from memory. There are
only two nodes in this tree
05:30 - that have only one child, let's try to
delete this
05:33 - other one with value 3. All we need to do
here is
05:37 - set 1 as left child of 5.
05:41 - Once again if there were some more nodes
below 1,
05:44 - then also there was no issue. Okay so now
we're good for two cases, we good for
05:49 - leaf nodes
05:50 - and we are good with nodes with just one
child
05:53 - and now we should think about the
third case, what if
05:56 - a node has two children, what should be
do in this case.
06:00 - Let's come back to this node value 15
that we were trying to delete
06:03 - earlier.With two children we can't do
something like
06:06 - connect parent to one of two children.
While trying to delete 15
06:10 - if we will connect 12 to 13.
06:14 - If we will make 13 to right child of 12
06:17 - then we will include 13 and anything
below 13
06:21 - that is we will include the left subtree
of
06:24 - 15 but we will lose the right subtree a
15
06:28 - that is 17 and anything below 17.
06:31 - Similarly, if we will make 17 the
right child
06:35 - then we will lose to left subtree of 15
that is 13 and
06:39 - anything below 13. Actually this case is
tricky
06:43 - and before I talk about a possible
solution, I want to insert some more
06:47 - nodes here.
06:48 - I want to have some more node in subtrees
of 13 and 17
06:52 - the reason I'm inserting some more nodes
here is because
06:55 - I want to discuss a generic case and
that's why I want
06:58 - these two subtrees to have more than one
node.
07:02 - Okay coming back when I'm trying to
delete this node
07:05 - my intent basically is to remove this 
value 15 from the tree.
07:10 - My delete function will have signature
07:14 - something like this. It will take pointer
reference to the root node
07:18 - and value to be deleted as argument. So
here,
07:21 - I am deleting this particular node because
I want to remove 15 from the tree.
07:26 - what I'm going to do now is something
with which I can reduce case 3
07:30 - to either case 1 or case 2. I'll wipe off
15 from this node
07:35 - and I'll fill in some other value in
this node. Ofcourse I can't fill in 
07:39 - any random value.
07:40 - What I'll do is, I'll look for the minimum
in right subtree of this node
07:45 - and I'll fill in that value here. Minimum
in right subtree of this node is 17.
07:50 - So I have filled 17 here. We now have
two nodes with
07:55 - value 17 but notice that this node
07:58 - has only one child. We can delete this
node
08:02 - because we know how to delete a node with
only one child
08:05 - and once this node is deleted my
tree will be good.
08:09 - The final arrangement will be a valid
arrangement for my BST,
08:13 - but why minimum in right subtree, why not
value in any other leaf node or any
08:18 - other node with one child.
08:20 - Well we also need to conserve this
property that for each node,
08:24 - nodes left should have lesser
value nodes in right should have
08:27 - greater value.
08:29 - For this node if I'm bringing in the
minimum from its right subtree
08:34 - then because I'm bringing in something
from its right subtree
08:37 - it will be greater and the previous
value 17 is greater than 15.
08:41 - So all the elements in left ofcourse
will be lesser
08:45 - and because it's the minimum in right
subtree,
08:48 - all the elements in right of this guy
would either be greater or
08:52 - equal.We will have a duplicate that
will be equal.
08:55 - Once the duplicate is removed everything
else will be fine.
08:59 - In a tree or subtree if a node has
minimum value
09:03 - it won't have a left child because if
they're is a left child
09:06 - there is something lesser and this is
another property that we're exploiting.
09:10 - Give this some thought. In a tree or
subtree node with minimum value
09:15 - will not happen left child, there may or
may not be a right child.
09:19 - If we would have a right child, like
here we have a right child.
09:23 - So here we are reducing case 3 to case 2.
09:27 - If there was no child we would have
reduced case 3 to case 1.
09:32 - Okay so let's get rid of the duplicate.
I'll build a link like this
09:36 - and after deletion this is what my tree
will look like.
09:40 - So this is what we need to do in case
3, we need to find a minimum in right
09:44 - subtree
09:45 - of targeted node then copy or fill in
this value
09:48 - and finally we need to delete the
duplicate or the node with
09:52 - minimum value from right subtree. There
was another possible approach here
09:57 - and I must talk about it. Instead of
going for minimum in right,
10:01 - we could also go far maximum any left
subtree.
10:05 - Maximum left subtree would ofcourse be
10:08 - greater than our equal to all the values
in left,
10:13 - maximum left subtree of node with value
15 is 14.
10:17 - I'm copying 14 here. Now all the nodes in
left a lesser than equal to 14
10:22 - and because we're picking something from
left subtree it will still be lesser
10:26 - than
10:27 - the value being deleted. 14 is less than
15. So all the nodes in this right
10:31 - subtree will still be
10:33 - greater and if we're picking maximum
in a tree or subtree then
10:37 - that node will not have right child
because if we have something in right we
10:42 - have something greater,
10:43 - so the value can't be maximum. The node may
have left child.
10:47 - In this case a node with value 14
doesn't have a left child
10:52 - so we are basically reducing case 3 to case
1.
10:56 - I'll simply get rid of this node.
10:58 - So we are looking good even after deletion.
In case 3,
11:02 - we can apply any of these
methods and this is all in logic part.
11:07 - Let's now  write called for this logic.
I'll write c++
11:11 - and we will use recursion if you're not
very comfortable applying recursion on trees
11:16 - then make sure you watch earlier lesson
in this series. You can find link to them
11:20 - and description of this video.
11:21 - In my  Code here i have defined node as
11:24 - a structure with three fields. We have 1
field to store data and we have 2 fields
11:29 - that are pointers to node to 
11:31 - store addresses of left and right
children and I want
11:35 - to write a function named delete that
should take
11:38 - pointer to root node and the data to be
deleted as argument,
11:42 - and this function should return pointer to
root node
11:45 - because that root may change after
deletion. What we're passing to delete
11:49 - function is only
11:50 - local copy of root's address. If the
address is changing
11:54 - we need to return it back. To delete a
given value or data to the first need to
11:59 - find it in the tree and once we find the
node containing
12:02 - that data, we can try to delete it.
Remember only identity of tree
12:06 - that we pass to functions is address
of the root node
12:10 - and to perform any action on the tree we
need to start at root.
12:13 - So let's first search for the node with
this data. First I'll cover a corner case.
12:19 - If the root is null that is if the tree
is empty,
12:22 - we can simply return. I can say return
root or return null here, they will mean the same
12:27 - because root is null, else if the data
12:30 - that we are looking for is less than
the data in root
12:33 - then its in the left subtree. The problem
can be reduced to deleting the data are
12:38 - from left subtree.
12:40 - We need to go and find the data in left
subtree,
12:43 - so they can make a recursive call to
delete function passing address of
12:47 - left child and the data to be deleted.
12:51 - Now the root of the left subtree that is
the left child of this
12:55 - current node may change after deletion
12:58 - but the good thing is, the delete
function will return address of the
13:02 - modified
13:02 - root of the left subtree. So we can
set the return as
13:06 - left child of current node. Now
13:10 - if data that we're trying to delete
13:14 - is greater than the data in root,
13:17 - we need to go and delete the data from
right subtree,
13:21 - and if the data is neither greater
13:24 - nor lesser that is if it's equal then
we can try deleting the node containing
13:29 - that data. Now let's handle the 3
cases 1 by 1.
13:32 - If there is no child we can simply delete
that node
13:36 - what I'll do here is that first wipe off to
node from memory
13:40 - and this is how I'll do it. What we have in
root right now is address of
13:44 - to node to be deleted. I'm using to
delete operator here
13:48 - that's used to deallocate memory of
an object in heap.
13:51 - In C you would use free function.
13:55 - Now root is a dangling pointer because
object in heap is deleted
13:59 - but root still has its address. So
14:02 - we can set root as null, and now we can
return root.
14:06 - Reference of this node in its parent
will not be fixed here.
14:11 - Once this recursive call finishes
14:14 - then somewhere in these 2 statement in
any of these two statements
14:18 - in any of these two else ifs the link
will be corrected.
14:22 - I hope this is making sense. Okay now
let's handle other cases.
14:26 - If only the left child is null then
what I want to do is
14:30 - I first want to store the address of
current node that I'm trying to delete
14:35 - in a temporary pointer to node and now
14:39 - I want to move to root, this pointer
named
14:44 - root to the right child, so the right child
becomes
14:49 - the root of this subtree and now we can
delete
14:52 - the node that has been pointed to
by temp.
14:57 - We will use to delete operator. In C we would
be using free function.
15:01 - and now they can return root.Similarly
if the right child is null,
15:06 - I'll first store address of current
root in
15:10 - a temporary pointer to node then I'll make
the left child new root of the
15:13 - subtree
15:14 - so we will move to the left child and then
I'll delete the previous
15:18 - root whose address I have in temp and
finally I'll return root.
15:23 - Actually we need to return root in
all cases, so i'll remove this
15:27 - return statement
15:28 - from our all these if and else if and
15:31 - write one return root after
everything.
15:35 - Let's talk about the 3rd now. In case
of two children
15:38 - what we need to do is, we need to
search for
15:42 - minimum element in right subtree of the
node that we're trying to delete.
15:45 - Let's say this function findmin will
you give me address of the node with
15:49 - minimum value in tree or subtree,
15:52 - so i'm calling this function findmin and
I'm collecting the return
15:56 - in a pointer to node named
temp.
16:00 - Now I should set the data in current
node that i am trying to delete
16:04 - as this minimum value and now the
problem is getting reduced to
16:10 - deleting this minimum value from the
right subtree of current node.
16:14 - With this much code I think I'm done with
delete function.
16:19 - This looks good to me. Let's quickly run
this code on an example tree and see if
16:23 - this works or not.
16:24 - I have drawn a binary search tree here.
Let's say these values
16:27 - outside these nodes are addresses of the
nodes.
16:31 - Now I want to delete number 15 from
this tree,
16:34 - so I'll make a call to delete function
passing
16:38 - address of the root which is
200 and 15
16:41 - the value to be deleted. In delete
function for this particular call
16:46 - control will come to this line, a
recursive call will be made.
16:51 - Execution of this call delete 200 , 15
will
16:55 - pause and it will resume only after this
function below
16:58 - delete 350 , 15 returns.
17:01 - Now for this call below we'll go inside
the third else
17:05 - in case 3, here we will find with
minimum value in right 
17:09 - which is 17 which is 400, the
value is 17
17:13 - address is 400. First we will set the
data in node 350 as 17
17:18 - and we are making a recursive call
to delete 17 from
17:22 - right subtree of 350. We have only one
node in right subtree of 350.
17:27 - Here we have case 1. In this call will
simply delete the node at 400
17:32 - and return null. Remember root will be
returned in all calls
17:36 - in the end.
17:38 - Now delete 350 , 15 will resume
17:41 - and in this resumed call, we will set
address of
17:45 - right child of node at 350 as null.
17:48 - As you can see the link in parent is
being corrected,
17:51 - when the recursion is unfolding and the
function call
17:54 - corresponding to the parent is
resuming and now this guy can return,
17:59 - and now in this call, we will resume
at this line.
18:03 - So right child of node at 200 will
set as 350.
18:07 - It's already 350 but it will be written
again
18:10 - and now this call can also finish. So I
hope you got some
18:14 - sense of how this recursion is working.
You can find link to all the source
18:18 - code
18:18 - and code to test the delete function
in description of this video.
18:22 - This is it for this lesson. 
Thanks for watching.