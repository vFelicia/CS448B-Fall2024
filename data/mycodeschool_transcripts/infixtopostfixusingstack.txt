00:00 - In our previous lesson, we saw how we can
evaluate prefix and postfix expressions,
00:05 - now in this lesson we will see an efficient
algorithm to convert infix to postfix. We
00:10 - already know of one way of doing this. We
have seen how we can do this manually. To
00:15 - convert an infix expression to postfix, we
apply operator precedence, and associativity
00:21 - rules. Let's do the conversion for this expression
we have written here. The precedence of multiplication
00:27 - operator is higher. So, we will first convert
this part B*C. B*C will become BC*. The operator
00:37 - will come in front of the operands. Now, we
can do the conversion for this addition. For
00:42 - addition, the operands are A and this postfix
expression. In the final step we can get rid
00:49 - of all the parentheses. So, finally this is
my post fix expression.
00:53 - We can use this logic in a program also. But,
it will not be very efficient. And the implementation
00:59 - will also be somewhat complex. I am going
to talk about one algorithm which is really
01:04 - simple and efficient and in this algorithm
we need to parse the infix expression only
01:09 - once from left to right. And, we can create
the postfix expression. If you can see in
01:14 - infix to postfix conversion, the positions
of operands and operators, may change but
01:20 - the order in which operands occur from left
to right will not change. The order of operators
01:27 - may change. This is an important observation.
In both infix and postfix forms here, the
01:33 - order of operands as we go from left to right
is first we have A, then we have B and then
01:39 - we have C. But, the order of operators is
different. In infix, first we have + and then
01:46 - we have multiplication. In postfix, first
we have multiplication and then we have addition.
01:52 - In postfix form we will always have the operators
in the same order, in which they should be
01:57 - executed. I am going to perform this conversion
once again but this time I am going to use
02:02 - a different logic. What I will do is, I will
parse the infix expression from left to right.
02:08 - So, I will go from left to right, looking
at each token that will either be an operand
02:13 - or an operator. In this expression we will
start at A, A is an operand. If it's an operand
02:21 - we can simply append it in the postfix string
or expression that we are trying to create.
02:27 - At least for A it should be very clear that
this is nothing that can come before A. Okay,
02:31 - so the first rule is that if it's in operand,
we can simply put it in the postfix expression.
02:37 - Moving on, next we have an operator. We cannot
put the operator in the postfix expression,
02:43 - because we have not seen it's right operand
yet. While parsing we have seen only it's
02:49 - left operand. We can place it only after it's
right operand is also placed. So, what I am
02:56 - going to do is I am going to keep this operator
in a separate list or collection and place
03:01 - it later in the postfix expression when it
can be placed and the structure that I am
03:06 - going to use for storage is stack. A stack
is only a special kind of list in which whatever
03:12 - comes in last goes out first. Insertion and
deletion happen from the same end. I have
03:19 - pushed + operator onto the stack here. Moving
on, next we have B which is an operand. As
03:25 - we had said operand can simply be appended.
There is nothing that can come before this
03:30 - operand. The operator on the stack is anyway
waiting for the operand to come. Now at this
03:37 - stage, can we place the addition operator,
to the postfix string. Actually, what's after
03:43 - B also matters. In this case, we have this
multiplication operator after B, which has
03:49 - higher precedence and so the actual operand
for addition is this whole expression B*C.
03:55 - We cannot perform the addition until multiplication
is finished. So while parsing, when I am at
04:02 - B and I have not seen what's ahead of B, I
cannot decide the fate of the operator in
04:07 - the stack. So, let's just move on. Now, we
have this multiplication operator. I want
04:12 - to make this expression further complex to
explain things better. So, I am adding something
04:17 - at tail here in this expression. Now, I want
to convert this expression to postfix form.
04:23 - I am not having any parentheses here. We will
see how we can deal with parentheses later,
04:28 - let's look at an expression where parentheses
does not override operator precedence. Okay,
04:34 - so right now in this expression while parsing
from left to right, we are at this multiplication
04:39 - operator. The multiplication operator itself
cannot go into the postfix expression because
04:46 - we have not seen it's right operand yet. And,
until it's right operand is placed in the
04:50 - postfix expression, we cannot place it. The
operator that we would be looking at while
04:55 - parsing. That operator itself cannot be placed
right away. But, looking at that operator,
05:01 - we can decide whether something from the collection,
something from the stack can be placed into
05:06 - the postfix expression that we are constructing
or not. Any operator in the stack having higher
05:12 - precedence than the operator that we are looking
at, can be popped and placed into the postfix
05:19 - expression. Let's just follow this as rule
for now and I will explain it later. There
05:25 - is only one operator in the stack and It is
not having higher precedence than multiplication
05:30 - so we will not pop it and place it in the
postfix expression. Multiplication itself,
05:36 - will be pushed. If an element in the stack
has something on top of it, that something
05:41 - will always be of higher precedence. So, let's
move on in this expression now. Now, we are
05:46 - at C, which is an operand, so, it can simply
go. Next, we have an operator subtraction.
05:54 - Subtraction itself cannot go but as we had
said if there is anything on the stack having
06:00 - higher precedence than the operator that we
are looking at, it should be popped out and
06:05 - it should go and the question is why? We are
putting these operators on the stack, we are
06:11 - not placing them on the postfix expression
because we are not sure whether we are done
06:15 - with their right operand or not. But after
that operator, as soon as I am getting an
06:21 - operator of lower precedence, that marks the
boundary of the right operand. For this multiplication
06:27 - operator, C is my right operand. It's this
simple variable. For addition, B*C is my right
06:35 - operand because subtraction has lower precedence.
Anything on or after that cannot be part of
06:42 - my right operand. Subtraction, I should say
has lower priority because of the associativity
06:48 - rule. If you remember the order of operation,
addition and subtraction have same precedence
06:53 - but the one that would occur in left would
be given preference. So, the idea is anytime
07:00 - for an operator, if I am getting an operator
of lower priority, we can pop it from the
07:06 - stack and place it in the expression. Here,
we will first pop multiplication and place
07:12 - it and then we can pop addition and now we
will push subtraction onto the stack. Let's
07:20 - move on now. D is an operand. So, it will
simply go. Next we have, multiplication. There
07:26 - is nothing in the stack having higher precedence
than multiplication. So, we will pop nothing.
07:34 - Multiplication will go on to the stack. Next,
we have an operand. It will simply go. Now,
07:40 - there are two ways in which we can find the
end of the right operand for an operator.
07:45 - a is if we get an operator of lesser precedence,
b if we reach the end of the expression. Now,
07:51 - that we have reached end of the expression,
we can simply pop and place these operators.
07:56 - So, first multiplication will go and then
subtraction will go. Let's quickly write pseudo
08:03 - code for whatever I have said so far and then
you can sit with some examples and analyse
08:08 - the logic. I am going to write a function
named infix to postfix that will take a string
08:14 - exp for expression as argument. For the sake
of simplicity, lets assume that each operand
08:21 - or operator will be of one character only.
In an actual implementation you can assume
08:25 - them to be tokens of multiple characters.
So, in my pseudo code here, the first thing
08:31 - I will do is, to create a stack of characters
named S. Now, I will run a loop starting 0
08:38 - till length of expression -1. So, I am looking
at each character that can either be an operand
08:45 - or operator. If the character is an operand
we can append it to the postfix expression.
08:52 - Well, actually I should have declared and
initialized a string before this loop. This
08:58 - is the result string in which I shall be appending
else if exp[i] is operator, we need to look
09:06 - for operators in the stack having higher precedence.
So, I will say while stack is not empty, and
09:13 - top of stack has higher precedence. And let's
say this function HasHigherPrecedence will
09:18 - take two arguments, two operators. So, if
the top of Stack has higher precedence than
09:26 - the operator that we are looking at. We can
append the top of stack to the result which
09:31 - is the variable that will store the postfix
string. And, then we can pop that operator.
09:38 - I am assuming that this S is some class that
has these functions top and pop and empty
09:44 - to check whether it's empty or not. Finally,
once I am done with the popping, Outside this
09:49 - while loop I need to push the current operator.
S is an object of some class that will have
09:56 - these functions top, pop and empty. Okay,
so this is the end of my for loop. At the
10:03 - end of it, I may have some operators left
in the stack. I will pop these operators and
10:08 - append them to the postfix string. I will
use this while loop. I will say that while
10:13 - the stack is not empty, append the operator
at top and pop it. And, finally after this
10:21 - while loop I can return the result string
that will contain the postfix expression.
10:27 - So, this is my pseudo code for whatever logic
I have explained so far. In the logic, I have
10:33 - not taken care of parentheses. What if my
infix expression would have parentheses like
10:38 - this? Their will be slight change from what
we were doing previously. With, parentheses
10:43 - any part of the expression within parentheses
should be treated as independent complete
10:49 - expression in itself. And, no element outside
the parentheses will influence its execution.
10:56 - In this expression, this part A + B is within
one parentheses. It's execution will not be
11:02 - influenced by this multiplication or this
subtraction which is outside it. Similarly,
11:09 - this whole thing is within the outer parentheses.
So, this multiplication operator outside,
11:17 - will not have any influence on execution of
this part as a whole. If parentheses are nested,
11:24 - inner parentheses is sorted out or resolved
first,and then only outer parentheses can
11:29 - be resolved. With parentheses, we will have
some extra rules: we will still go from left
11:34 - to right and we will still use stack. And,
let's say I am going to write the postfix
11:40 - part in write here as I create it. Now, while
parsing, a token can be an operand or operator
11:48 - or an opening or closing of parentheses. I
will use some extra rules. I will first tell
11:54 - them and then I will explain. If it's an opening
parentheses, we can push it onto the stack.
12:00 - The first token here, is an opening parentheses.
So, it will be pushed onto the stack. And,
12:05 - then we will move on. We have an opening parentheses
once again, so once again we will push it.
12:10 - Now, we have an operand. There is no change
in rule for operand. It will simply be appended
12:15 - to the postfix part. Next, we have an operator.
Remember, what we were doing for operator
12:21 - earlier. We were looking at top of stack and
popping as long as we were getting operator
12:27 - of higher precedence. Earlier when we were
not using parentheses, we could go on popping
12:33 - and empty the stack. But, now we need to look
at top of stack and pop only till we get an
12:39 - opening parentheses. Because, if we are getting
an opening parentheses, then it's the boundary
12:44 - of the last opened parentheses and this operator
does not have any influence after that, outside
12:51 - that. So, this + operator does not have any
influence outside this opening parentheses.
12:57 - I will explain this scenario, with some more
examples later. Let's first understand the
13:02 - rules. So, the rule is, if I am seeing an
operator, I need to look at the top of stack.
13:07 - If it's an operator of higher precedence,
I can pop and then I should look at the next
13:12 - top. If it's once again an operator of higher
precedence, I should pop again. But, I should
13:17 - stop when I see an opening parentheses. At,
this stage we have an opening parentheses
13:22 - at top, so we do not need to look below it.
Nothing will be popped anyway. Addition however,
13:28 - will go on to the stack. Remember, after the
whole popping game, we push the operator itself.
13:33 - Next, we have an operand. It will go on, we
will move on. Next, we have a closing of parentheses.
13:40 - When I am getting a closing of parentheses,
I am getting a logical end of the last opened
13:45 - parentheses. For part of the expression, within
that parentheses, it's coming to the end.
13:51 - And, remember what we were doing earlier,
when we were reaching the end of infix expression,
13:55 - we were popping all the operators out and
placing them. So, this time also we need to
14:00 - pop the operators out, but only those operators
that are part of this parentheses that we
14:07 - are closing. So, we need to pop all the operators
until we get an opening parentheses. I am
14:13 - popping this + and appending it. Next, we
have an opening of parentheses, so I will
14:19 - stop. But, as last step I will pop this opening
also. Because, we are done for this parentheses.
14:25 - Okay, so the rule for closing a parentheses,
is pop until you are getting an opening parentheses
14:29 - and then finally pop that particular opening
parentheses also. Let's move on now. Next,
14:35 - we have an operator. We need to look at top
of stack. It's an opening of parentheses.
14:41 - This operator will simply be pushed. Next,
we have an operand. Next, we have an operator.
14:47 - Once again, we will look at the top. We have
multiplication, which is of higher precedence.
14:52 - So, this should be popped and appended. We
will look at the top again. Again, it's an
14:56 - opening of parentheses, so we should stop
looking now. '-' will be pushed now. Next,
15:02 - we have an operand. Next we have a closing
of parentheses. So, we need to pop until we
15:06 - get an opening. '-' will be appended. Finally,
the opening will also be popped. Next, we
15:12 - have an operator and this will simply go.
Next, we have an operand. And, now we have
15:17 - reached the end of expression. So, everything
in the stack will be popped and appended.
15:22 - So, this final is my postfix expression.
I will take one more example and convert it
15:27 - to make things further clear. I want to convert
this expression. I will start at the beginning.
15:32 - First, we have an operand. Then this multiplication
operator, which will simply go onto the stack.
15:38 - The stack right now, is empty. There is nothing
on the top to compare it with. Next, we have
15:43 - an opening parentheses which will simply go.
Next, we have an operand it will be appended
15:49 - and now we move on to this addition operator.
If this opening parentheses was not there,
15:54 - the top of stack would have been the multiplication
operator which has higher precedence. So,
15:59 - it would have been popped. But, now we will
look at the top and it's an opening parentheses.
16:05 - So, we cannot look below. And we will simply
have to move on. Next, we have C. I missed
16:11 - pushing the addition operator last time. Okay,
after C, I have this closure. So, we need
16:17 - to pop until we get an opening. And, then
we need to pop one opening also. Finally we
16:23 - have reached the end of expression. So, everything
in the stack will be popped and appended.
16:28 - So, this finally is my postfix part, postfix
form. In my pseudo code, that I had written
16:35 - earlier, only the part within this for loop
will change to take care of parentheses. In
16:43 - case we have an operator, we need to look
at top of the stack and pop but only till
16:49 - we are an getting opening parentheses. So,
I have put this extra condition in the while
16:53 - loop, this condition will ensure that we stop
once we get an opening parentheses. Right
16:59 - now, in the for loop we are dealing with operand
and operators, we will have two more conditions:
17:04 - If its an opening of parentheses, we should
push. Else, if it's a closure, we can go on
17:10 - popping and appending. Let's say this function
IsOpeningParentheses will check whether a
17:15 - character is opening of parentheses or not.
In fact we should use this function here also
17:20 - when I am checking whether current token is
opening or not. Because, it could be an opening
17:25 - curly brace or opening bracket also, this
function will then take care. Let's say this
17:30 - function will take care. And, similarly for
this last else if, we should use this function
17:35 - IsClosingParentheses. Okay, things are consistent
now. After this while loop in the last else
17:42 - if, we should do one extra pop. And, this
extra pop will pop the opening parentheses.
17:49 - And, now we are done with this else if. And,
this is closure of my for loop. Rest of the
17:57 - stuff will remain same. After the for loop,
we can pop the left overs and append to the
18:03 - string. And, finally we can return. So, this
is my final pseudo code. You can check the
18:08 - description of this video for a link to the
real implementation, actual source code. Okay,
18:13 - So, I will stop here now. This is it for this
lesson. Thanks, for watching.