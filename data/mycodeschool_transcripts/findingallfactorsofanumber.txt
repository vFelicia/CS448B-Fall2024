00:00 - In this lesson, we will solve a very simple
problem. Given a number n which is a natural
00:06 - number, we want to find out all its factors.
For example, if n is lets say 12, then its
00:16 - factors are 1 and 1 divides all natural numbers.
2, 3, 4 , 6 and 12. So, 12 has 6 factors in
00:29 - all. These 6 numbers divide 12. Ok, so if
we have n = 17, we will have only two factors
00:38 - - 1 and 17. That's because 17 is a prime number.
If n is 36, then the factors would be 1,2,
00:46 - 3, 4, 6, 9 , 12 , 18 and 36. So, there are
9 factors of 36. So, how do we solve this
00:58 - problem programatically. The simplest approach
is trial division. What we can do is we can
01:05 - try dividing n by all numbers starting 1 to
n and find out all the factors. So, algorithm
01:13 - would go like lets say we start with an empty
list named A and then we run a loop starting
01:21 - 1 all the way till n. So, for i starting 1
to n, if i divides n or in other words n modulo
01:32 - i is 0, then we add i to list A. So, once
we exit this loop, the list A has all the
01:40 - factors of n. Now, there is a simple observation
here. A number is always divided by 1 and
01:48 - itself. Apart from 1 and itself, the smallest
factor that it can have is 2 and the largest
01:55 - factor that it can have will be n/2. There
would be no factor of n other than n itself
02:03 - after n/2. So, we can improve this algorithm
a little here. What we can do is lets say
02:10 - instead of starting with an empty list we
start with 1 and n already in the list and
02:17 - then we can run our loop through 2 to n/2.
We do not run the loop all the way till n.
02:25 - This is definitely better than running loop
till n. Now, what will be the running time
02:32 - of this algorithm. We have a loop running
till n/2. So, the time taken is proportional
02:38 - to n which in other words, we also say that
this is big-oh of n in terms of time complexity.
02:46 - Can we do something better than this. Well,,
lets see. As we know and as we had discussed
02:52 - in our previous lessons on primality testing
also, if there is a number a that divides
02:57 - number n, then there is another number b equal
n/a that also divides n. The factors of a
03:06 - number always exist in pair and we call them
co-factors. We always have a relationship
03:11 - like a*b = n. For example, if we pick up the
case of 36 here, then if a =1, then b = 36/1
03:20 - which is 36. if a is 2, b would be 18. if
a is 3, b would be 12. if a is 4, b would
03:31 - be 9. And if a is 6, then b is also equal
to 6. This happens only when a is square root
03:40 - of n, so in this case 6 is square root of
36. So, in the case when a is not equal to
03:46 - b, and lets say if a is the smaller one in
the pair, if a < b, then a is less than square
03:54 - root of n and b is always greater than square
root of n. And if a is equal to b like in
04:00 - the case of 6 here, then they are both equal
to square root of n. We can use this property
04:07 - to improve our algorithm. So, what we can
do now is we can again start with an empty
04:12 - list and we can run the loop from 1 to square
root of n, so we say for i starting 1 to square
04:23 - root of n, if i divides n , or if n modulo
i is 0, then we add i to list a and we also
04:34 - add n upon i to list A. So, this will be our
a and this will be our b. Ok, we could have
04:43 - chosen to start with 1 and n in the list initially
only, then we would be running the loop starting
04:50 - 2, but if we are running the loop starting
1, then 1 and n will also come into the list
04:57 - in the loop itself. Now, there still is one
issue with this code. We have not handled
05:04 - the case when a =b, so when a is equal to
b, using this algorithm we will add the factor
05:11 - twice in the list. So, we need to only a little
change to handle this. We need to say that
05:19 - if i is not equal to square root of n, which
will be the case when a will be equal to b,
05:26 - then only add n/i to list A. As we know when,
the co-factors are equal, then the factor
05:36 - is square root of n. Now, a couple of things
here. I have only written a pseudo-code. In
05:42 - an actual program, A can be an array or A
can be any other dynamic list available in
05:48 - your language like vector in C++. When we
are adding the elements, we are not adding
05:53 - them in a sorted order. So, the factors in
the list will not appear in an increasing
05:59 - order. If we want a sorted list, then we need
to do some modifications to the algorithm
06:05 - to add the factors in a sorted manner. I leave
that as an exercise for you. Ok, so what will
06:11 - be the running time or the time complexity
of this algorithm. We have a loop running
06:16 - 1 to square root of n. So, clearly the time
taken here is proportional to square root
06:21 - of n. We have just one loop running till square
root of n. Or in other words, this is big-oh
06:26 - of square root of n in terms of big oh notation.
The time complexity is O(sqrt(n)). big-oh
06:35 - of square root of n is a lot lot lot better
than O(n) algorithm, any big-oh of n algorithm.
06:42 - So, this was finding out all the factors of
a number. In the next lesson, we will see
06:47 - algorithm to find out prime factorization
of a number. So, thanks for Watching !