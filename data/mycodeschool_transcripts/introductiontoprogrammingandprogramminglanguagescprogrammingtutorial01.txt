00:00 - Hello everyone. In this lesson, and in
this series of lessons we are going to
00:04 - introduce you
00:05 - to computer programming through 'C'.
00:09 - 'C' is a computer programming language.These
lessons are meant for someone with
00:14 - very little are no prior experience in
programming. We are going to keep our
00:18 - assumptions really low, we will start with
the basics
00:22 - and carry everyone along. Okay so let's
get started
00:26 - unlike most other machines that can
perform
00:29 - a finite set of predefined tasks a
computer
00:32 - is a general purpose machine that can
perform
00:36 - any computational task. All you need to
do is
00:40 - you need to give it a program which
00:44 - is nothing but a set of instructions to
perform a task.
00:47 - A computer is nothing in itself
00:51 - without programs, all the tasks are
performed through programs.
00:54 - A modern-day computer would have
hundreds and thousands of programs
00:58 - in it. There are programs that manage the
hardware resources of the computer
01:03 - we call such programs system programs.
And
01:07 - then there are programs that perform
your favorite tasks,
01:10 - we call them application programs like
a web browser
01:13 - that you use to browse the internet or a
text editor
01:17 - that you use to create a document. And if
any of these programs
01:21 - cannot perform the task that you want to
perform you can write your own program
01:26 - and that's what we're going to learn in
this series of lessons,
01:29 - writing and executing your own program.
01:33 - As we saw a program is a set
01:36 - or sequence of instructions that you
would give to the computer
01:39 - and the computer would execute those
instructions.
01:43 - Now in what language can I give these
instructions to the computer.
01:46 - Can I give these instructions in a natural
language
01:50 - like English? You must have heard that
01:53 - a computer understand binary, binary
is the language of computers.
01:57 - Binary is a number system that has
only two digits
02:02 - zero and one. The number system that
02:05 - we use has ten digits from 0 to 9 and
we call it decimal number system.
02:12 - So why does computer understand binary
or rather
02:16 - why are computers designed to understand
binary
02:19 - and the reason is binary is really
easy to simulate in
02:24 - actual physical design of things in real
hardware.
02:27 - Computer is an electrical device and
it's really easy to create
02:32 - the logic of zero and one in an
electrical circuit.
02:36 - For example if current is
02:39 - flowing through some wire we can say
that it's a 1
02:43 - and if current is not flowing we can
say that
02:46 - it's a 0. If there is some potential
difference
02:49 - across a capacitor we can say that
it's a 1
02:53 - and if there is no potential difference
we can say that its
02:56 - a 0. In general '1' can correspond
to something that exists
03:02 - and '0' can correspond to something
that does not exist.
03:05 - '1' can correspond to some condition
being true
03:09 - and '0' can correspond to that
condition being false.
03:12 - At lowest level in a computer any
communication
03:16 - has to happen in binary or any data
has to be stored in binary.
03:21 - You can use a bunch of wires together to
communicate
03:25 - or signal something or you can use a
bunch of capacitors together to store
03:29 - some data.
03:30 - In actual physical design there may be
other ways
03:34 - to communicate or store some information
but logically it has to be binary,
03:39 - a bunch of one's and zero's put
together. If we use only one wire or one
03:45 - capacitor we can
03:46 - signal or store only two possible
values
03:49 - zero and one. But let's see if
03:53 - we use two wires or capacitors
together we can signal or store four
03:58 - possible combinations or four possible
values
04:02 - in binary 00,01,
04:05 - 10 and 11. A binary digit is also
called
04:10 - a bit, if you have only one bit
04:13 - you can have two possible values and if
you have two bits
04:18 - you can have four possible values each
bit can either be 0 or 1.
04:23 - 1 is also called 'set' bit
04:26 - and 0 is also called 'unset' bit.
04:30 - If we have three bits, lets say each cell
that I have drawn here in this
04:35 - figure is a bit position then at each
position
04:38 - we have two choices.We can either have
0
04:42 - or a 1 and corresponding to these choices.
We will
04:45 - have two choices for the next position
and corresponding to a combination of
04:49 - these two positions we will have two
choices for the next position. So
04:54 - if we have three bits we can have eight
possible binary values.
04:58 - These are eight possible values with three
bits, in decimal this is 'zero' this is
05:03 - 'one'
05:04 - this is 'two' and so on. In general
05:07 - if we have n bits we can have two to the
power
05:10 - 'n' possible permutations and
combinations of zero's and one's.
05:15 - We can have values from zero till two to
the power
05:19 - 'n-1', for 'n' equal 3 we can have values
from 0 to 7 for 'n' equal 4 we can
05:25 - have
05:25 - values from 0 till 15 and we can go
on.
05:29 - For more on binary number system and
things like how to convert
05:33 - a number from binary to decimal and
vice versa
05:36 - you can check the description of this
video for some lessons.
05:40 - Now coming back to how computer would
understand and execute
05:44 - instructions, core part of the computer
that
05:48 - executes all the instructions is called
05:51 - the central processing unit or CPU.
05:55 - Sometimes we simply call it the
processor and
05:58 - it's not the big case or box of your
desktop computer it's often
06:02 - misunderstood like that.
06:03 - A modern-day CPU is a very small
integrated circuit
06:07 - that would look something like this,
Intel is one of the companies that make
06:11 - CPU's.
06:12 - So CPU is the guy who has to execute
your instructions.
06:16 - Now each instruction to the CPU has to
be
06:20 - a pattern of bits a pattern of one's and
zero's.
06:24 - But an instruction cannot be any random 
pattern of bits
06:27 - it has to be in a certain format so that
the CPU is able to decode
06:32 - and execute it. A set of specifications
are laid out for a CPU
06:37 - and your instructions must follow the
specifications,
06:40 - for example specification can be that
any instruction to perform
06:45 - an arithmetical or logical operation
must be
06:48 - in 20 bits. Let's say the cells in the
figure that I have drawn here
06:53 - are bit positions in a binary number. Now
specification can be
06:57 - and this is just an example that out of
these 20 bits
07:00 - first four bits or leftmost four bits
07:04 - must be a binary code for the
operation that you want to perform.
07:09 - We typically write shortcut 'opcode'
07:12 - for operation code and operation
codes will also be specified.
07:17 - Let's say operation code for 'Add' in
four bits
07:20 - is 0001, let's say 
operation code for subtraction
07:24 - is 0010 and there can be
other operations like
07:28 - comparison let's say comparison is 0101.
07:32 - So if we want to have an instruction to
add two numbers
07:35 - these four bits must be 0001
07:39 - and let's say rest of the specification is
that the next
07:43 - 8 bits must be the first operand.
07:47 - The numbers upon which you perform
operations are called operands.
07:50 - The next eight bits can be the second
operand.
07:54 - Let's say you want instruction to add
numbers 4 & 5.
07:59 - Then 4 in binary is 100
08:03 - rest of these bits will be 0 and
5 in binary
08:07 - is 101  and rest of these bits 
will be zeros,
08:11 - leading zeros will not mean anything. So
what you have here
08:16 - in 20 bits is an instruction to add
numbers 4 & 5
08:21 - according to an example specification
that I have picked.
08:24 - So here is the deal this is the language
that the machine actually understands
08:29 - and executes instructions in binary
as per some laid out specifications.
08:35 - The bits in instruction maps to some
physical design
08:38 - in circuit and we do not need to go into
those details.
08:42 - Such an instruction in binary is often
called
08:46 - machine language instruction, machine
language because it can be interpreted
08:50 - and executed by the machine or more
specifically
08:53 - the CPU. Two CPU's can have entirely
different architectures
08:58 - and entirely different specifications
for
09:01 - instructions. So machine language
instruction for one CPU architecture
09:06 - may not work for another CPU
architecture.
09:09 - There was a time when programs where
literally
09:12 - written in machine language, it was a
very tedious and error-prone process.
09:17 - Think about it, you would constantly have
to look at the specifications for
09:22 - binary codes for various operations and
commands.
09:25 - The program will not be human readable
you will not be able to figure out the
09:28 - logic
09:29 - by just looking at a program. Some
improvement came with development of
09:34 - assembly language. In assembly language
we can have a more human-readable
09:38 - representation
09:40 - of a machine language instruction, for
example
09:43 - if this is the machine language
instruction
09:46 - with one opcode and two operands
09:50 - then in assembly language the same
instruction can be written in a more
09:54 - readable form.
09:55 - We can write some keywords for opcode
say
09:59 - for example if this is opcode for
addition we can write
10:03 - Add and then we can write the operands
as well as constants in decimal,
10:08 - operand one is 4 and operand two is
5.
10:12 - One can write an instruction like this
in assembly language
10:15 - the improvement that you're getting is
instead of writing operation codes and
10:18 - commands
10:20 - in binary you are writing some keywords
which will make some sense.
10:24 - Instead of writing 0001 for addition
we are writing
10:27 - add keyword and instead of writing
constants
10:31 - as binary numbers we're
writing constants
10:35 - in decimal. But wait a minute didn't I
say that
10:38 - CPU that has to execute all the
instructions
10:41 - will understand only machine language
instructions.
10:45 - This guy is shouting it out loud here that
I can execute
10:48 - only machine level machine language
instructions so how can we write program
10:52 - in assembly language or whatever we are
talking here.
10:55 - Well you can write your logic in
assembly language
10:59 - and then you can pass the assembly
language instructions
11:03 - to a program named assembler
11:06 - and this assembler will generate
machine language instructions
11:11 - corresponding to the assembly language
instructions.
11:14 - So basically someone wrote a program
named assembler
11:18 - and with assembler programmers could
write a little more readable
11:21 - instructions in assembly language.
11:23 - But there was a problem with assembly
language, assembly language
11:27 - is strongly mapped to machine language
it's just that some
11:31 - binary codes in machine language
become keywords
11:34 - in assembly language. So just like
machine language
11:38 - assembly language instructions will also
vary from one
11:41 - CPU architecture to another.So if you
would
11:45 - try to port your assembly language
code from
11:48 - one architecture to another the same
program may not run.
11:52 - You may have to rewrite your program
according to a new set of specifications.
11:57 - So both assembly and machine language
are specific
12:00 - to architecture of machine. Such languages
the instructions in which depend
12:04 - upon
12:05 - the architecture of machine or more
specifically the architecture of CPU
12:10 - have been called low-level languages.
12:13 - There was need for programming languages
that would not be
12:16 - specific to architecture of machine, such
programming languages were called
12:20 - high-level languages. A high-level
language is supposed to have
12:25 - more elements of natural language and
it's supposed to make
12:29 - the life of a programmer a lot more easier
because he will not have to care about
12:33 - all the detailed low level specifications of the
machine.
12:36 - And now let's talk about high-level
languages, high-level languages give you
12:40 - abstraction from machine architecture,
12:42 - so many high-level languages have been
developed
12:45 - till date I would name some of them. We
have C
12:50 - finally it took the name of 'C' after so
long we have 'C++' we have 'Java' we
12:55 - have
12:55 - 'Python' and couple of old ones like
'FORTRAN',
12:59 - 'Basic' and the list goes on. FORTRAN was
the first high-level language
13:04 - developed by IBM. Now even with
high-level languages we cannot skip
13:09 - the basic rule that finally the
instructions that will be executed
13:14 - have to be in machine language.
13:17 - There are two possible execution models
for high-level languages.
13:20 - Some languages are called compiled
languages,
13:24 - for these languages we would have a
program that we would call
13:27 - compiler. Compiler will be different for
different languages.
13:32 - It will also be different for different
machine architectures.
13:35 - Compiler will take your program written
in a high-level language.
13:38 - We typically say that it takes your
source code
13:42 - written in a high-level language and
generates machine code,
13:46 - set of instructions that can be executed
directly
13:50 - by the CPU. C is example of the
combined language
13:54 - how it typically works is that to the
compiler
13:57 - you would give a file or a group of
files containing your program in
14:01 - high-level language.
14:02 - Let's say app.c is the find that will
contain a program in C,
14:06 - the compiler widget generate another
file
14:10 - that will be executable on the machine.
Let's say it will create something like
14:15 - app.exe,
14:15 - exe files are executable files on
Windows machine.
14:20 - The process of generating executable
files from source code written in
14:25 - high-level languages
14:26 - is called compilation basically compiler
performs compilation.
14:30 - There is another execution model for
high-level languages. Some languages
14:34 - are called interpreted languages, for
interpreted languages
14:38 - we need to use programs that we call
interpreters.
14:41 - Unlike compilers interpreters do not
generate
14:45 - executable codes that can be
executed separately.
14:49 - An interpreter takes source code in a
high-level language
14:52 - analyzes it and runs it within itself,
14:56 - no executable file is created program is
executed within the interpreter.
15:00 - We will not go into the details of how
it really happens.
15:03 - Python is an interpreted language 
theoretically  any language can be compiled
15:08 - or interpreted but practically
languages fall into one of these
15:11 - categories,
15:12 - either they are compiled or interpreted. So
there are so many high-level languages
15:16 - and we are saying that we will learn
programming through C.
15:19 - First of all why there are so many
languages and which language is good.
15:23 - Actually there is no good or bad
language, some languages were written to
15:27 - overcome the limitations in previous
languages.
15:30 - Some languages were written to make a
certain set of tasks
15:33 - easier but as such basic constructs and
primitive are
15:37 - same in most languages and what you
can do in one language
15:41 - can be done in another language. There
would be very few exceptions.
15:44 - If someone knows one of the programming
languages really well
15:48 - it will be very easy for him to pick on
another programming language.
15:52 - And now let's talk about C, C was
developed around
15:55 - year 1970 by a great computer scientist
named
16:00 - Dennis Ritchie. Dennis Ritchie is also the
creator of UNIX operating system,
16:04 - in fact UNIX operating system was
written in C.
16:07 - C is a high-level language and it
needs compilation.
16:10 - C is still a very famous programming
language
16:14 - and most of the other famous programming
languages like C++,
16:18 - Java or C sharp derive their basic
structure derive their basic constructs
16:23 - from C. So if you know the syntax of C
16:26 - it's really easy to on board these other
languages
16:29 - at least for the basics and C gives
you a lot of
16:33 - low-level control on machine. Some people
say that C is somewhere
16:37 - in between a low-level language and
high-level language.
16:40 - So working with C will give you a lot of
insight into computer architecture
16:44 - and I think it's good for a Computer
Science Engineer.
16:48 - So we should be clear in this series of
lessons we're going to learn programming
16:52 - through C. To learn any language we should
learn some vocabulary
16:56 - some grammar basically we should have
some set of rules
16:59 - some syntax some semantics. Of course the
rules for a programming language will be
17:04 - much more stricter
17:05 - than rules for a natural language. A
programming language cannot be ambiguous
17:10 - like
17:10 - natural language. We will get started
with all of these things
17:14 - in our next lesson. We will also write 
our first C program in next lesson.
17:18 - This is it for this lesson Thanks for
watching.