00:00 - In this lesson and in this series of lessons
we are going to talk about sorting algorithms.
00:06 - Sorting as a concept is deeply embedded in
a lot of things that we do.
00:11 - It's quite often that we like to arrange things
or data in certain order.
00:16 - Sometimes to improve the readability of that
data, at others to be able to search or extract
00:22 - some information quickly out of that data.
00:24 - For example, something as simple as, when
we are playing a card game, even though the
00:28 - number of cards in our hand is really less,
we like to keep our hand of cards sorted by
00:34 - rank or suit.
00:35 - So, let's say, this is our hand of cards and
we would like to keep it in increasing order
00:41 - of rank, then the arrangement will be something
like this.
00:45 - Now, have a look at this, when we go to a
travel site to book a hotel ,then the site
00:51 - gives us all these options of sorting the
hotels by price from low to high or by star
00:56 - rating or by guest rating.
00:58 - So, right now I have my option sorted by guest
rating, So, the hotel with the highest guest
01:03 - rating is at the top.
01:05 - I may be on a budget and I may want to avail
the cheapest option.
01:09 - So, I would sort the hotels by price from
low to high and now, the cheapest hotel will
01:15 - be at the top.
01:16 - And, I may still try to strike a balance between
rating and price.
01:21 - So, sorting is a really helpful feature here
and there are so many places where we like
01:27 - to keep our data sorted.
01:29 - Be it the language dictionary where we want
to keep the words sorted so that searching
01:33 - a word in the dictionary is easy or something
like a medal tally where we want to know to
01:39 - see team is at the top and which team is not
performing so well!
01:44 - If we want to define sorting formally, then
sorting is arranging the elements in a list
01:52 - or collection in increasing or decreasing
order of some property.
01:58 - The list should be homogeneous, that is all
the elements in the list should be of same
02:03 - type.
02:04 - To study sorting, to study sorting algorithms,
most of the times we use a list of integers,
02:10 - and typically we sort the list of integers
in increasing order of value.
02:15 - So, if we have a list of integers like this,
2,3,9,4,6 then sorting it in increasing order
02:21 - of value, will mean rearranging the elements
like this.
02:27 - Sorting the list in decreasing order of value
will mean something like this, and as we have
02:31 - said in the definition , we can sort on any
property!
02:34 - What if we want to sort this list on the basis
of let's say, increasing number of factors.
02:40 - So, the number with lesser number of factors
is towards the beginning of the list.
02:45 - If you see, 2 has got only 2 factors, 1 and
2 itself.
02:50 - 3 has also got 2 factors, 1 and 3 itself.
02:53 - 9 has got three factors, 1, 3 and 9 itself.
02:57 - 4 has got 3 factors, 1, 2 and 4 itself.
03:00 - 6 has got 4 factors, 1,2,3 and 6 itself.
03:05 - A sorted list is the permutation of the original
list, When we sort a list, we just rearrange
03:11 - the elements.
03:12 - Now this was a list of integers.
03:15 - We may have a list of any data type.
03:17 - We may want to sort a list of strings or words
in lexicographical order, the order in which
03:23 - they will occur in dictionary.
03:24 - A list of strings like this in lexicographical
order will be arranged in this order.
03:30 - And we may have a list of complex data type
as well.
03:33 - A hotel object in the Hotel list, that we
had seen earlier, was a complex type.
03:39 - Hotel will have many properties, like it's
price, it's distance from the city center.
03:45 - guest rating, it's star rating and the list
can be sorted on any of these properties.
03:51 - Sorted data is good, not just for presentation
or manual retrieval of information, even when
03:56 - we are using computational power of machines,
sorted data is really helpful.
04:01 - If a list is stored in computer's memory as
unsorted, then to search something in this
04:06 - list, we will have to run Linear Search.
04:08 - In linear search, we start with the first
element of the list and keep scanning the
04:12 - whole list, until we get the element that
we are looking for, so, in the worst case
04:17 - when an element will not be there in the list,
we will compare it with all the elements in
04:22 - the list, we will scan it with whole list.
04:24 - So, if there are n elements in the list, we
will make n comparisons in the worst case.
04:30 - And, think about the kind of data, modern
day computers deal with.
04:34 - If this n is really large, if we take n= 2
to the power 64, and imagine that 1 comparison
04:42 - takes 1 milli second, then we will take 2
to the power 64 milli seconds.
04:47 - If you try to convert this to seconds, hours,
days and so on, this will amount to some years.
04:54 - If our list however is sorted, we can us something
called binary search, and with binary search
05:01 - it the size of the list is n, it will take
only log of n to the base 2 comparisons to
05:07 - perform a search.
05:08 - So, if n is equal to 2 to the power 64, we
will take only 64 milliseconds.
05:14 - I had taken n equal 2 to the power 64 earlier,
to be able to perform this log quickly.
05:21 - Sorting as a problem is well studied and a
great deal of research has gone into devising
05:25 - efficient algorithms for sorting.
05:28 - In this series of lessons we are going to
study, analyze, and compare these sorting
05:33 - algorithms.
05:34 - Some of the sorting algorithms that we will
be talking about, that we will be analyzing
05:38 - about are Bubble Sort, Selection sort, Insertion
Sort, Merge Sort, Quick Sort, Heap Sort, Counting
05:45 - Sort, Radix Sort and this is not all.
05:48 - There are more.
05:49 - And, you can imagine how important sorting
as a problem is.
05:52 - We have so many algorithms for sorting that
have been designed over a period of time.
05:57 - We often classify sorting algorithms based
on some parameters.
06:01 - The first parameter that we want to classify
upon is time complexity which is the measure
06:07 - of rate of growth of time taken by an algorithm
with respect to input size.
06:13 - Some algorithms will be relatively faster
than others.
06:18 - The second parameter that we use for classification
is space complexity or memory usage.
06:24 - Some sorting algorithms are in place, they
use constant amount of extra memory to rearrange
06:30 - the elements in the list, while some sorting
algorithms like merge sort, use extra memory
06:36 - to temporarily store data and the memory usage
grows with input size.
06:43 - The third parameter that we talk about is
stability and this one will take some explanation.
06:49 - Suppose we have a set of cards like this,
and we want to sort these cards in increasing
06:55 - order of rank.
06:56 - We have one 3 of Diamond, we have one 9 of
Spade, and we have two 6's, one of club and
07:04 - another of heart.
07:05 - One possible permutation will be this, the
cards are sorted by rank,we have got 3,6,6,9.
07:13 - But if you see, in the original list, 6 of
Club was coming earlier than 6 of Hearts.
07:19 - But, when we have this permutation which is
a sorted arrangement, 6 of hearts, this particular
07:27 - card, has come before 6 of clubs.
07:29 - A stable sorting algorithm in the case of
equality of key, or the property upon which
07:35 - we are sorting, preserves the relative order
of elements.
07:38 - So, if the key is equal, if an element was
coming before in the original list, it will
07:44 - also come before in the sorted list.
07:46 - A stable sorting algorithm guarantees that.
07:49 - So, if we will use stable sorting algorithm
, we will get this particular permutation.
07:54 - 6 of club will be before 6 of hearts.
07:59 - The next parameter of classification is whether
a sort is internal sort or external sort.
08:05 - When all the records that need to be sorted
in the main memory or RAM, then such sort
08:12 - is internal sort and if the records are on
auxiliary storage like disk and tapes, quite
08:19 - often because it's not possible to get all
of them in the main memory in one go, then
08:24 - we call such a sort external sort.
08:27 - There is one more parameter upon which we
may classify sorting algorithms, and it is
08:32 - whether algorithm is recursive or non recursive.
08:37 - Some sorting algorithms like Quick Sort and
Merge Sort are recursive while other like
08:42 - Insertion Sort and Selection sort are non-recursive.
08:46 - We will study all these properties in detail
as we will study these individual algorithms.
08:52 - This is it for a basic introduction, Thanks
for watching!