00:00 - Hi, Today we are going to solve an interesting
problem. Given an array, we have to find a
00:07 - sub-array whose sum is maximum among all possible
sub-array sums. This sub-array will be referred
00:13 - to as the Maximum Sum Sub-array or the MSS.
a over here is an array of size 10. It's indices
00:22 - are marked from zero to nine over here. In
this problem the array can have both positive
00:28 - and negative values. A sub-array is defined
as a continuous part or section of the given
00:34 - array. As you can see, -5, 7, 6 form a sub-array.
The sum of this given sub-array over here
00:43 - would be 8. In this lesson, we consider sub-arrays
to have at least 1 element. The sub-array
00:50 - that would give the maximum sum is from 7
to 11 with a sum of 19. Now let me take one
00:59 - more example, to make things more clear. b
is an array with all negative values. Therefore
01:05 - it's MSS would be -1 it's highest value. Instead
if the array contained all positive values
01:14 - we will have the whole array as our MSS. Now
the first approach that we are going to discuss
01:20 - over here is a brute-force algorithm. We are
going to form all possible sub-arrays, find
01:28 - their sum, and find it's maximum. i.e we are
going to form sub-arrays of size 1, 2 and
01:37 - so on. Let us see this algo in action. We
will take a variable called answer (ans).
01:46 - As we iterate through each sub-array, we will
calculate each of it's sum. Answer will store
01:52 - the maximum of these sums seen so far. i.e
each time we calculate the sum of a sub-array,
02:00 - compare it with the value in answer. If it
is greater, then we update answer with the
02:06 - sum that we just computed. So before we form
sub-arrays and start finding the sum, we initialise
02:12 - answer with a Highly negative value. INT_MIN
is a MACRO available under the climits header
02:19 - in the C++ language. This represents the minimum
value that can be stored in an integer variable.
02:27 - Different languages have different ways to
represent this constant. We start with a high
02:31 - negative value because we want a value which
is lesser than all possible sums in answer.
02:39 - For instance if answer was zero and the array
was filled with negative values then finally
02:44 - we will have zero in answer and not the real
maximum. So first we have sub-arrays of size
02:51 - 1. We find it's sum and update answer with
it's maximum. Then we move on to sub-arrays
03:00 - of size 2, we find each of it's sum and then
update answer with the maximum of answer and
03:07 - the sums. We move on to sub-array of size
3 and finally sub-arrays of size 4. Now that
03:17 - we've seen the algorithm in action, let us
see how we can code this. I'll be using C/C++
03:22 - code throughout this lesson. Maximum_Sum_Subarray
is a function which accepts an array and it's
03:29 - size as it's parameters and returns an integer
value, the sum of the Maximum sum subarray.
03:38 - First we iterate over all possible sub-array
sizes. Starting at 1 and ending at n. Then,
03:44 - we iterate over all possible start indices
for these sub-arrays starting from 0 till
03:51 - n-1. This condition checks whether the sub-array
that we've got is a valid sub-array. For instance,
03:59 - in the previous example that we saw, if the
sub_array_size was 2 and the start_index 3,
04:06 - we will have an invalid sub-array and we need
to ignore it. Once we get a valid sub-array
04:11 - we need to calculate the sum. We iterate from
the start index of the sub-array, till the
04:17 - last index of the sub-array which is [start_index+sub_array_size-1].
To calculate the MSS we need to take the maximum
04:26 - value of sum. Answer is initialized to INT_MIN
available under the climits header which is
04:32 - a high negative value. In the end answer will
contain our MSS which we will return. Now
04:39 - let us calculate the time complexity of this
function. If you do not know how to calculate
04:43 - time complexity, please refer to our videos
on that. The link is available in the video
04:49 - description. We have 3 loops over here each
of time complexity O(n) and since it's nested
04:56 - the overall time complexity is O(n^3). Now
we can see how we can improve our algorithm
05:03 - reducing the computations by either using
previously calculated values or by changing
05:09 - the order in which we do some specific tasks.Now
when we considered sub-arrays starting at
05:15 - the same index, we were calculating the sum
from the start separately for each sub-array.
05:22 - This was because we considered sub-array size
first and then the start index. But if you
05:28 - notice over here the sum of each of these
sub-arrays is it's previous sum plus the last
05:35 - element of the sub-array. i.e to calculate
the sum of the sub-array of size k, we take
05:43 - the sum of sum-array of size k-1 at the index
i and add the last element to it. For each
05:51 - sub-array of size k we save k-1 iterations
every time saving valuable computation time.
06:00 - So now let us see how we can implement this
new approach and how it improves our time
06:05 - complexity. So instead of deciding upon the
sub-array sizes, we'll decide on the start
06:11 - indices first. We iterate over all possible
start indices and then we iterate over all
06:18 - possible sub-array sizes. It ranges from 1
to n. And again we have to check if the sub-array
06:24 - that we have is a valid sub-array or not.
Now since we'll be taking the sum of our previous
06:30 - sub-array, sum is declared outside the sub-array
loop. To sum we will add the last element
06:37 - of each new sub-array which is basically sub_array_size-1
since array_size-1 is the last element of
06:45 - any array. Finally we use a variable called
answer to take the maximum of all the sums
06:51 - and return it. Now for the time complexity
of the given function we have two O(n) loops
06:58 - both of which are nested. Therefore the overall
time complexity is O(n^2). So we reduced the
07:05 - time complexity from O(n^3) to O(n^2) by making
a simple observation. Next we are going to
07:13 - look at a technique called divide and conquer
where we will divide our problem into sub-problems
07:19 - and use their results or use their answers
to compute our answer for the main problem.
07:26 - Coming back to our previous example, let us
divide the array into two. Left Half. And
07:32 - right Half. Now imagine that we know their
results already. Now imagine x is the array
07:40 - that we have and y is a sub-array of x which
is the answer that we need. Now let us figure
07:48 - out what are the possibilities for y's position
in x. For our first case, y which is the Maximum
07:56 - sum sub-array of x could lie completely in
the left half. In that case the answer is
08:05 - already computed. Similarly y could lie completely
in the right half of x. In that case also
08:13 - we have our answer computed. The last possibility
is that y lies in both left and right half.
08:21 - i.e the start index of y lies in the left
half and the end index lies in the right half.
08:28 - So if indeed this was the case, we need to
figure out the best possible answer where
08:33 - the start index lies in the left half and
the end index lies in the right half. Now
08:40 - we are going to figure out the best possible
start and end indices independently. Starting
08:46 - from the rightmost point in the left sub-array,
we'll figure out what is the best possible
08:51 - sum we can get. Similarly starting from the
left most point in the right sub-array, we
08:57 - figure out what is the best possible sum in
the right. Therefore the sum of the best possible
09:04 - sub-array whose start index lies in the left
half and the end index in the right is simply
09:09 - the sum of these two variables. At each step
we recurse over the left and right half of
09:15 - the array. Now we have reached to a case where
we have an array of size one. This will be
09:23 - the base case of our recursion. When there's
only one element in the array, the value itself
09:30 - is the MSS of that array. Now we have an array
whose left MSS is 3 and right MSS -2 and the
09:42 - best possible sub-array through the middle
as 1. Therefore the MSS of this array is 3
09:50 - which is the maximum of all these 3 values.
Similarly we have an array whose left MSS
10:01 - is 5, right MSS -1 and the best sub-array
through the middle as 4. Therefore the answer
10:07 - that we'll get from here is the maximum of
these 3 values which is 5. Finally we have
10:15 - the answer as 6, which is the maximum sum
sub-array for this given array. Let us look
10:23 - at how we can implement this solution. First
we take care of the base case condition. When
10:29 - n is 1 the element itself is the answer. Then
to divide the array into 2 we calculate m,
10:37 - the size of the left sub-array. We recurse
over the left half of the array. For that
10:43 - we call the same function with the same array
pointer but the size of the left array. Then
10:48 - to recurse over the right half of the array,
we increment the array pointer by m, the size
10:55 - of the right half will simply be n-m. To calculate
the leftsum and rightsum value just like how
11:01 - we saw before, I've declared two variables.
Both of them are initialised with the most
11:07 - minimum possible value. Sum will take care
of all the intermediate sums. To find the
11:14 - rightsum value we start from the left most
point in the right subarray and find sum of
11:19 - all sub-arrays starting at that point. And
then we take the maximum of all those values
11:24 - and store it in rightsum. After reseting the
sum variable we start with the rightmost point
11:30 - in the left sub-array and do the same to calculate
leftsum. Finally the answer will be maximum
11:37 - of left_MSS , right_MSS and sum of leftsum
and rightsum. Let us try and analyse the time
11:43 - complexity for the divide and conquer technique
that we have used over here. Let T(n) be the
11:49 - time it takes for completion of a program
with an array of size n. When n is equal to
11:55 - 1 we have the base case where we do constant
number of operations. Then we recurse over
12:02 - the left half and right half each of size
n/2 and combining the two loops we do operations
12:11 - proportional to the size of the array. Writing
that mathematically we have T(n) equals c
12:18 - when n is equal to 1 denoting constant time
operations and when n is greater than 1, we
12:24 - have 2T(n/2) + c'n. On solving this recursion
we get that T(n) is equal to cn + c'nlog(n).
12:35 - In the big-o notation it is nothing but nlogn.
The recursion over here is very similar to
12:43 - that of merge sort algorithm. If you do not
understand how this recursion works, or how
12:49 - we derived this time complexity of this function,
please refer to the videos on merge sort for
12:54 - that. We have so far seen 3 techniques for
solving this problem. Next we are going to
12:59 - see an approach called Kadane's algorithm.
In this algorithm over here we are going to
13:05 - solve this problem in a much more simpler
manner. i.e Just by going through the array
13:11 - once, we will calculate what is the MSS of
that array. We are going to find the MSS of
13:19 - this given array. Initially we start with
an empty sub-array and as we keep discovering
13:26 - elements we will try and add it to this sub-array.
We will also keep track of this sub-array.
13:33 - This value will help us determine whether
we can add a new value to the sub-array or
13:40 - we reset the sub-array to the empty sub-array
that we started with. The original algorithm
13:46 - assumes that there is at least one positive
element in the given array. So we can safely
13:53 - initialise the value of sum to 0 which is
the sum of an empty sub-array. Now when we
14:01 - start iterating, we will add the element to
our sub-array. If the new sum of the sub-array
14:10 - is positive we will keep the element in the
sub-array and move on. Now since the maximum
14:18 - value of sum will be the MSS of our array
we need another variable to keep track of
14:23 - the maximum. Now moving on to the next element,
we see that adding that value to our sum,
14:31 - sum becomes negative. In that case we reset
the sub-array to the initial empty sub-array.
14:39 - Moving on adding the next value we get a positive
value in sum. So we keep the value in the
14:44 - sub-array and update answer to maximum of
answer and sum. The next element makes sum
14:53 - negative, therefore we reset the sub-array.
Now let us quickly look at how this algo works
15:00 - for the rest of the array. Since these two
values keep the sum positive we keep adding
15:06 - it to the sub-array. As long as sum remains
positive we will keep adding the element to
15:13 - the sub-array. And when sum falls negative
we reset the sub-array to the empty sub-array
15:21 - that we started with. In an array at an index
i, sum will try to calculate the MSS ending
15:29 - at i. i.e Of all the sub-arrays which end
at i, sum will try to calculate which is the
15:37 - best possible MSS. Now since we have the MSS
ending at i to form the MSS ending at i +
15:45 - 1, we can add to the MSS ending at i. The
MSS ending at i could be both positive or
15:55 - negative. If it was positive I can add my
current array value to it and try to get a
16:01 - better answer in the future, but if it was
negative, I am always better off by not considering
16:08 - that sub-array. That is why when we get a
negative value in sum, we reset it to the
16:15 - initial empty sub-array that we started with.
In all other cases we keep adding it to the
16:22 - sub-array. Let us see how we can implement
this solution. I start with two variables
16:28 - answer and sum just like how we saw before.
Answer will keep track of the maximum values
16:34 - of sum which will finally contain the MSS.
We iterate over the array once visiting every
16:42 - element just once. As we saw previously if
adding it to the previous sum my sum remains
16:50 - positive i will add the element to the sub-array.
Here it is just represented by adding the
16:56 - value of the to the variable sum. In the other
case we have to reset it to the empty sub-array.
17:05 - Here it is represented by resetting the sum
value to zero. We take the maximum of sum
17:12 - in answer and finally return the MSS of the
given array. Now let us quickly calculate
17:19 - the time complexity of this given function.
Since we visit every element in the array
17:24 - just once the overall time complexity is O(n).
The original Kadane's algorithm works only
17:34 - if the array contains at least one positive
element. So if the array were to contain all
17:40 - negative values, we need to have a separate
check, checking if all the values are negative
17:46 - and then return the maximum if that was the
case. So having a quick recap we saw four
17:54 - approaches. The first approach was a n^3 approach
where we saw all different possible sub-arrays
18:01 - and took the maximum. We later improvised
with a n^2 approach and then we used the Divide
18:08 - and Conquer technique to arrive at a nlogn
solution and finally we saw the Kadane's algorithm
18:15 - which runs in O(n) time. All the code that
has been shown in this video tutorial will
18:22 - be available in github. The links will be
posted in the video description. Thank you.