00:00 - Hello everyone ! We have been talking about
data structures for some time now.
00:04 - As we know, data structures are ways to store
and organize data in computers.
00:09 - So far in this series, we have discussed some
of the data structures like arrays, linked
00:13 - lists and in last couple of lessons, we have
talked about stack.
00:18 - In this lesson, we are going to introduce
you to Queues.
00:20 - We are going to talk about Queue ADT.
00:25 - Just the way we did it for stack, first we
are going to talk about queue as abstract
00:30 - data type or ADT.
00:33 - As we know, when we talk about a data structure
as abstract data type, we define only the
00:38 - features or operations available with the
data structure and do not go into implementation
00:44 - details.
00:45 - We will see possible implementations in later
lessons.
00:49 - In this lesson, we are only going to discuss
logical view of queue data structure.
00:54 - Ok ! so let's get started.
00:56 - Queue data structure is exactly what we mean
when we say queue in real world.
01:01 - A queue is a structure in which whatever goes
in first, comes out first.
01:08 - In short, we call Queue a FIFO structure.
01:11 - Earlier, we had seen stack which is a last-in-first-out
structure which is called a last in first
01:18 - out structure or in short LIFO.
01:21 - A stack is a collection in which both insertion
and removal happen from the same end that
01:28 - we call the top of stack.
01:29 - In queue however, an insertion must happen
from one end that we call rear or tail of
01:37 - the queue and any removal must happen from
the other end that we can call front or head
01:45 - of the queue.
01:47 - If i have to define queue formally, as an
abstract data type, then a queue is a list
01:55 - or collection with the restriction or the
constraint that insertion can be and must
02:02 - be performed at one end that we call the rear
of queue or the tail of queue and deletion
02:09 - can be performed at other end that we can
call the front of queue or head of queue.
02:15 - Lets now define the interface or operations
available with queue.
02:20 - Just like stack, we have two fundamental operations
here.
02:23 - An insertion is called Enqueue operation.
02:26 - Some people also like to name this operation
push.
02:30 - Enqueue operation should insert an element
at tail or rear end of queue.
02:36 - Deletion is called Dequeue operation.
02:39 - In some implementation, people call this operation
pop also.
02:44 - Push and pop are more famous in context of
stack.
02:48 - Enqueue and Dequeue are more famous in context
of Queues.
02:51 - While implementing, you can choose any of
these names in your interface.
02:55 - Dequeue should remove an element from front
or head of the queue.
03:00 - And Dequeue typically also returns this element
that it removes from the head.
03:06 - The signatures of Enqueue and Dequeue for
a queue of integers can be something like
03:11 - this.
03:12 - Enqueue is returning void here while Dequeue
is returning an integer.
03:18 - This integer should be the removed element
from the queue.
03:22 - You can design Dequeue also to return void.
03:25 - Typically a third operation front or Peek
is kept just to look at the element at the
03:31 - head.
03:32 - Just like the top operation that we had kept
in stack.
03:36 - This operation should just return the element
at front and should not delete anything.
03:42 - Ok, we can have few more operations.
03:45 - We can have one operation to check whether
queue is empty or not.
03:49 - If queue has a limited size, then we can have
one operation to check whether queue is full
03:55 - or not.
03:57 - Why I am calling out these alternate names
for operations is also because most of the
04:02 - time, we do not write our own implementation
of a data structure.
04:07 - We use in-built implementations available
with language libraries.
04:12 - Interface can be different in different libraries.
04:14 - For example, if you would use the in-built
queue in C++, the function to insert in push
04:22 - which in C# its Enqueue.
04:25 - So, we should not confuse.
04:28 - I'll just keep more famous names here.
04:30 - OK ! so these are the operations that i have
defined with queue ADT - Enqueue, Dequeue,
04:37 - Front and IsEmpty.
04:38 - We can insert or remove one element at a time
from the queue using Enqueue and Dequeue.
04:45 - front() is only to look at the element at
head.
04:48 - InEmpty is only to verify whether Queue is
empty or not.
04:53 - All these operations that i have written here
must take constant time or in other words,
04:59 - their time complexity should be big-oh of
one.
05:03 - Logically, a queue can be shown as a figure
or container open from two sides.
05:09 - So, an element can be inserted or Enqueued
from one side and and an element can be removed
05:17 - or de-queued from other side.
05:21 - If you remember stack, we show a stack as
a container open from one side.
05:26 - So, an insertion or what we call push in context
of stack and removal or pop, both must happen
05:34 - from the same side.
05:35 - In queue, insertion and removal should happen
from different sides.
05:41 - Let's say I want to create a queue of integers,
lets say initially we have an empty queue.
05:48 - I will first write down one of the operations
and then show you the simulation in logical
05:53 - view.
05:54 - Lets say i first want to enqueue number 2.
05:59 - This figure that I'm showing here right now,
is an empty queue of integers and I am saying
06:05 - that I'm performing and Enqueue operation
here.
06:08 - In a program, I would be calling an Enqueue
function passing it number 2 as argument.
06:14 - After this Enqueue, we have one element in
the queue, we have one integer in the queue.
06:18 - Because we have only one element in the queue
right now, front and rear of the queue are
06:25 - same.
06:26 - Lets Enqueue one more integer.
06:28 - Now, i want to insert number 5.
06:31 - 5 will be inserted at rear or tail of the
queue.
06:36 - Let's Enqueue one more.
06:39 - And now, I want to call Dequeue operation.
06:42 - So, we will pick 2 from head of the queue
and it will go out.
06:47 - If Dequeue is supposed to return this removed
integer, then we will get integer 2 as return.
06:55 - Enqueue and Dequeue are the fundamental operations
available with Queue.
06:59 - In our design, we can have some more for our
convenience.
07:03 - Like we have front and IsEmpty here.
07:05 - A call to front at this stage will get us
number 5, integer 5 as return.
07:12 - No integer will be removed from the queue.
07:15 - Calling IsEmpty at this stage can return us
a boolean false or a zero fro false and 1
07:23 - for true.
07:24 - So, this pretty much is Queue works.
07:27 - Now, one obvious question can be, what are
the real scenarios where we can use Queue,
07:33 - what are the use cases of Queue data structure.
07:36 - Queue is most often used in a scenario where
there is a shared resource that's supposed
07:41 - to serve some request, but the resource can
handle only one request at a time.
07:46 - It can serve only one request at a time.
07:49 - In such a scenario, it makes most sense to
Queue up the requests.
07:54 - The request that comes first, gets served
first.
07:58 - Lets say we have a printer shared in a network.
08:01 - Any machine in the network can send a print
request to this printer.
08:05 - Printer can serve only one request at a time,
it can print only one document at a time.
08:10 - So, if a request comes when its busy, it can't
be like - I'm busy, request later.
08:17 - That will be really rude of the printer.
08:19 - What really happens is that the program that
really manages the printer, puts the print
08:24 - request in a queue.
08:26 - As long as there is something in the Queue,
printer keeps picking up a request from the
08:31 - front of the queue and serves it.
08:36 - Processor on your computer is also a shared
resource.
08:38 - A lot of running programs or processes need
time of the processor and the processor can
08:44 - attend to only one process at a time.
08:47 - Processor is the guy who has to execute all
the instructions , who has to perform all
08:50 - the arithmetic and logical operations.
08:53 - So, the processes are put in a queue.
08:56 - Queue in general can be used to simulate wait
in a number of scenarios.
09:01 - We will discuss some of these applications
of queue in detail while solving some problems
09:07 - in later lessons.
09:09 - This is good for an introduction.
09:11 - In next lesson, we will see how we can implement
Queue.
09:15 - This is it for this lesson.
09:16 - Thanks for watching !