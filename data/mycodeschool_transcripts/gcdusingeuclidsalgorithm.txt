00:00 - hi everybody in this video we'll look at
00:03 - a short but very beautiful algorithm
00:05 - known as uids
00:07 - algorithm the algorithm is named after
00:10 - Greek mathematician euklid we're not
00:12 - sure who invented it but it was first
00:15 - documented by uid back in 300 BC in his
00:19 - book called elements so this algorithm
00:21 - is more than 2,000 years old and the
00:24 - reason we still use it is because it is
00:27 - the fastest way to compute the gcd of
00:30 - two numbers gcd or a greatest common
00:33 - divisor is the same concept that you
00:36 - probably learned about in school let's
00:38 - define it in a slightly more formal way
00:42 - given two numbers A and B we'll say that
00:45 - the gcd of A and B is the greatest
00:49 - number let's call it
00:52 - g that divides both A and
00:57 - B so if we had a a as
01:01 - 105 and B as say
01:05 - 350 and we did not know about ID's
01:08 - algorithm how could we compute their
01:11 - GC since GC deals with the common
01:15 - devisers of both A and B one efficient
01:19 - way of doing it would be to First
01:21 - compute all the factors of a
01:25 - 105 and after that we could then see
01:28 - which of these factors also divide
01:29 - divide 350
01:32 - perfectly at this point we have the
01:34 - common divisors of both 105 and 350 and
01:38 - we can just choose the highest number
01:40 - from the set of common devisers to find
01:43 - the gcd to find out all the factors of
01:46 - 105 we simply need to divide 105 by all
01:50 - numbers up to its own square root this
01:53 - is because the factors of any number
01:55 - occur in pairs where the product of the
01:58 - pair is equal to the number itself and
02:01 - the lower half of the pair is less than
02:03 - or equal to the square root of the
02:04 - number and the higher half of the pair
02:07 - is greater than or equal to the square
02:09 - root of the number to find out more
02:11 - about this concept you can check out our
02:13 - video finding all factors of a
02:16 - number so in the case of 105 its square
02:20 - root is roughly 10 so we will need to
02:22 - perform 10 divisions we'll divide 105
02:26 - against all numbers from 1 to 10 in
02:29 - order to find out all its devisers if
02:32 - you perform these divisions manually you
02:34 - will end up with a table like this we
02:37 - can see here that 105 has exactly eight
02:41 - divisors and these eight divisors are
02:44 - found in pairs where each pair together
02:48 - has a product of
02:50 - 105 we'll now divide 350 by all eight of
02:54 - these devisers this means we'll need to
02:56 - perform another eight
02:58 - divisions after after performing this
03:00 - eight divisions we'll see that 350 is
03:03 - divisible by exactly four of the
03:06 - divisors
03:08 - of5 so the set of common divisors of 350
03:11 - and 105 has four numbers so our gcd is
03:15 - the highest of these numbers which is
03:18 - 35 so as you saw our pretty efficient
03:22 - devisor based algorithm took us only 18
03:25 - divisions in order to compute the gcd of
03:28 - 350 and
03:30 - 105 now let's see how well ukls
03:33 - algorithm performs for the same
03:35 - example in the first step of uids
03:39 - algorithm we take the larger number
03:43 - 350 and we divide it by the smaller
03:47 - number
03:49 - 105 and compute the remainder we get a
03:53 - remainder of
03:54 - 35 for our next
03:57 - step the devisor from our first step
04:02 - 105 becomes the
04:05 - dividend and our remainder from the
04:08 - previous
04:09 - step 35 becomes the
04:13 - divisor Computing the remainder again we
04:16 - get zero for our third step we again
04:20 - follow a similar procedure this time 35
04:24 - becomes the dividend while the divisor
04:27 - is
04:28 - zero now that our divisor is zero ukids
04:32 - algorithm comes to an end and the gcd is
04:36 - simply the last dividend so our answer
04:39 - to the gcd of 105 and 350 is
04:44 - 35 so as you just saw using ukls
04:48 - algorithm we needed only two divisions
04:50 - to compute the gcd of 350 and
04:53 - 105 compare this with our pretty
04:56 - efficient divisor based algorithm which
04:58 - took 18 division
05:00 - even for the small case you can see how
05:02 - much faster uid algorithm is it was nine
05:05 - times faster in this case now that we
05:08 - have an idea of how ukets algorithm
05:10 - Works let's wipe this out and look at
05:12 - the code for ukets
05:14 - algorithm so we call our function ukl
05:18 - gcd since it computes gcd using ukls
05:20 - algorithm and it takes two integers as
05:23 - input A and B and these are the integers
05:27 - whose gcd will be computed before we
05:30 - perform the first remainder operation we
05:32 - need to set up the dividend as well as
05:34 - the divisor the dividend is the greater
05:37 - value of a and b and we accomplish this
05:40 - using the tary operator so if a is
05:43 - greater than b we choose a otherwise we
05:45 - choose B similarly we use the tary
05:48 - operator to also set up the devisor as
05:51 - long as the devisor is not zero we can
05:54 - compute our
05:55 - remainders and we use the modu operator
05:58 - to do that We Now set up the dividend
06:01 - and divisor for the next division
06:04 - operation so the dividend for the next
06:07 - operation is the divisor of the current
06:09 - operation and the divisor for the next
06:12 - operation is the remainder from the
06:14 - current operation when this Loop exits
06:17 - we know that the devisor is zero and our
06:19 - algorithm is complete and the answer
06:22 - which is the gcd of A and B lies in the
06:24 - last dividend so we can simply return
06:26 - the dividend value that we have that was
06:30 - a quick walkr of the code now let's
06:33 - track the values of the three variables
06:36 - dividend divisor and remainder for an
06:39 - example case to get a better
06:41 - understanding of how the algorithm works
06:44 - so let's take the example where a is 400
06:47 - and B is uh
06:50 - 124 of course we first execute this
06:53 - instruction which computes the dividend
06:55 - as the greater value of a and b so
06:57 - dividend gets set as 400
07:00 - and we then compute div divisor as the
07:02 - Lesser value of a and b which is
07:06 - 124 since the divisor is not equal to
07:09 - zero we enter the loop where we compute
07:12 - the remainder for the first time in this
07:14 - case it is 400 modul 124 which is
07:18 - 28 at this point the value of dividend
07:22 - gets reassigned to the current divisor
07:24 - so dividend becomes the current divisor
07:27 - which is
07:28 - 124 and the value of divisor gets
07:31 - reassigned to the current remainder so
07:33 - divisor becomes
07:36 - 28 now we go back to this Loop condition
07:39 - since the divisor is not zero we again
07:42 - enter the loop and this time we compute
07:44 - the remainder of 124 and 28 which is 12
07:49 - again we reassign dividend and divisor
07:51 - and this goes on until finally the
07:56 - deviser gets assigned a value of zero at
07:59 - this this point this while loop
08:01 - condition check fails and we come out of
08:03 - the loop and we simply return the
08:06 - current value of dividend which is four
08:09 - and this is the gcd of
08:13 - 4124 so in this example case ukets
08:16 - algorithm performed only four divisions
08:19 - to compute the gcd whereas our devisor
08:22 - based algorithm would have taken 17
08:24 - divisions to compute the same gcd so as
08:27 - you can see this ancient algorithm is
08:29 - quite f
08:30 - however it's not very useful to analyze
08:33 - the time taken for individual cases what
08:36 - is really useful is if we could compute
08:38 - the order of the time taken for the
08:41 - worst case by ID's algorithm this is
08:45 - also known as the worst case time
08:47 - complexity and is represented using the
08:50 - Big O notation if you want to know more
08:53 - about the bigo notation and time
08:55 - complexity analysis in general you can
08:57 - check out our previous video series on
08:59 - time complexity
09:01 - analysis now let's wipe this out and
09:04 - compute the time complexity of ukl
09:07 - algorithm remember that time complexity
09:10 - of any algorithm is always expressed as
09:13 - a function of its input so the time
09:15 - complexity of ukets algorithm must be a
09:18 - function of these two variables A and
09:21 - B if you look at our code above you will
09:25 - see that we have three kinds of
09:27 - operations assignment operations
09:30 - comparison
09:31 - operations and the modulo or division
09:34 - operation if we talk about infinitely
09:37 - large numbers then these operations
09:39 - would take time proportional to the
09:41 - number of digits in the number so for
09:43 - example dividing to three digit numbers
09:45 - would be quite fast but dividing to 300
09:49 - digit numbers would probably take 100
09:51 - times that amount of
09:53 - time in this code though we are not
09:56 - talking about infinitely large numbers
09:59 - we are talking about int data type you
10:02 - can see that all the variables in this
10:04 - code have data type of int on a modern
10:08 - machine in typically compiled to 32-bit
10:11 - numbers for 32-bit numbers on a modern
10:14 - machine there are microprocessor
10:17 - instructions that
10:18 - handle comparison assignment as well as
10:23 - division in constant amount of time this
10:27 - means that all the individual
10:28 - instructions
10:36 - [Music]
11:29 - let's assume that a is greater than or
11:31 - equal to B so B becomes our smaller
11:33 - number by using the result proven in the
11:37 - 1840s we can rewrite bigo X as bigo
11:41 - number of digits of B given a number B
11:44 - to compute its number of digits in the
11:47 - decimal representation we can simply
11:49 - take the logarithm of B to the base 10
11:52 - so we can rewrite big old digits of b as
11:55 - bigo log B to the base 10 since since
11:59 - we're using bigo notation the base of
12:02 - the logarithm is not very important
12:04 - since we can convert logarithms of
12:06 - different bases by multiplying with a
12:08 - constant so we can rewrite this as
12:11 - simply bigo log B so there you have it
12:15 - we have derived the time complexity of
12:17 - ukids algorithm which is bigo log B
12:20 - where B is the smaller number of the two
12:23 - numbers whose gcd is being
12:25 - derived to to understand how fast log B
12:29 - is let's remember the previous algorithm
12:33 - that we used which consisted of
12:35 - computing the devisers first the time
12:37 - complexity of that algorithm is square
12:40 - root of P I won't go into how to derive
12:43 - that you can check out our video finding
12:46 - all factors of a number to see that but
12:49 - if we were to compare square root of P
12:51 - versus log b in a table so let's say B
12:55 - is 1,000 then square root of B is
12:58 - roughly 30 whereas log B even to base 2
13:02 - is roughly 10 so for values around 1,000
13:07 - the logarithmic value is 3 times less
13:10 - than the square root value however if we
13:13 - increase B to 1 million square root of B
13:16 - goes up to 1,000 whereas log B to base 2
13:19 - just doubles to roughly 20 so now the
13:24 - logarithmic value is 50 times lower than
13:27 - the square root value as we increase the
13:30 - value of B this difference just gets
13:32 - more
13:33 - exaggerated that's it for the time
13:35 - complexity analysis of ukets algorithm
13:38 - let's take a quick look at shortening
13:40 - the code of ukets algorithm without
13:42 - affecting its time
13:44 - complexity the first method is to remove
13:47 - the assignment of Maximum value to
13:49 - Dividend and minimum value to
13:51 - divisor in its place we can simply set
13:55 - dividend to a and divisor to B so what
13:59 - what happens if a is less than b let's
14:02 - go back to our old example and instead
14:05 - of a being 400 this time let's make b as
14:08 - 400 and a as
14:10 - 124 so initially the dividend is 124 and
14:13 - the divisor is 400 we enter the loop and
14:17 - since the dividend is less than divisor
14:19 - the remainder is nothing but the
14:21 - dividend itself so remainder is
14:24 - 124 now when divider and diviser get
14:27 - reassigned the divis dividend becomes
14:30 - 400 and the divisor becomes
14:33 - 124 so our algorithm is back to the same
14:37 - state as if we had assigned dividend to
14:39 - the max value of a and b and divisor to
14:42 - the Min value of a and b it is just that
14:45 - the loop takes one extra turn after this
14:48 - the algorithm proceeds as usual to
14:50 - calculate the gcd of
14:52 - 4 we can shorten the code some more by
14:56 - replacing the dividend variable with a
14:59 - itself and replacing the devisor
15:01 - variable with B itself then the code
15:04 - would look like
15:06 - this we can also reduce the code to a
15:09 - single line which is my favorite way if
15:12 - we're ready to use recursion however
15:15 - this way also adds some space complexity
15:18 - of bigo log B and this is what the code
15:21 - looks
15:23 - like that's it for this video I hope you
15:26 - enjoyed learning about the
15:28 - implementation and time complexity of
15:30 - uket algorithm thanks for watching