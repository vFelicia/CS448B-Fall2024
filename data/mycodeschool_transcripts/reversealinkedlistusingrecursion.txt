00:00 - in our previous lesson we saw how we
can traverse
00:03 - a linked list using recursion we
wrote code
00:06 - to print the elements of linked list in
forward as well as reverse order
00:11 - using recursion we did not actually reverse
the list
00:14 - we just printed the elements in reverse
order now in this lesson we will
00:18 - reverse
00:19 - a linked list using recursion and this
is yet
00:22 - another famous programming interview
question so if we have
00:26 - an input list like this we have linked
list of integers here
00:30 - we have four nodes in the linked list
00:34 - each rectangular block here with two
partitions is a Node first field is
00:38 - to store the data and another to
store the address of the
00:42 - next node the second field stores the
address of the next node
00:45 - and of course we will have one variable
to store the
00:49 - address of the First node or head node we
name that variable head
00:53 - we may name it anything i have named it
head so this is our
00:57 - input list and after reversal our output
should be
01:01 - like this, this variable head should
store the address of
01:05 - the last node in the original list,
the last node in the original list
01:09 - was at address 250 and we will go like
from 250 to 150, 150 to 200
01:14 - 200 to 100 and 100 to null, null is
nothing but
01:17 - address zero
01:20 - we have already seen how we can
reverse a linked list
01:23 - using iterative method in one of
our previous lessons
01:27 - let us now see how we can solve this
problem using recursion
01:30 - in our solution we must reverse the
list by
01:35 - adjusting the links by reversing the
links
01:38 - not by moving around data or something
so let us first understand the logic
01:42 - that we can use
01:43 - in our recursive approach if you remember
from our previous lesson
01:47 - where we had used recursion to print the
list backward
01:52 - print the elements in reverse order then
recursion gives us a Way
01:56 - to traverse the list backward in our C or C++
program.Programatically
02:02 - Node will be a structure like this so
let's first look at the
02:06 - function from the previous lesson the
recursive function that
02:09 - was used to print the list backward to
this function we passed the address of
02:14 - a Node
02:15 - initially we pass the address of the head Node
and we have this
02:18 - exit condition if the address passed is
null
02:22 - then we simply return else we make a
recursive call and Pass the address of the
02:26 - next
02:27 - Node so main method will typically call 
Reverseprint passing it the address of
02:31 - the head node and this guy will first make
a recursive call and then
02:35 - when this recursive call finishes
then only it will
02:38 - print so I'm writing RP as shortcut 
for ReversePrint
02:43 - so the recursion will go on like this and
when it reaches this particular call when
02:48 - argument is null it will return so this
call will finish and again the control will
02:53 - come
02:54 - to this call with address 250 as
argument
02:58 - and now we're printing the value 
03:01 - of the node at address 250 which will
be four
03:05 - and then this guy finishes and then we
go ahead and print five
03:10 - and similarly we then go on to print
six and two
03:14 - so recursion kind of gives us a way to
first
03:17 - traverse the list in the forward
direction and then
03:20 - traverse the list in the backward
direction so let us now see how we can
03:25 - implement reverse function using 
recursion
03:27 - let's say for the sake of simplicity
in implementation that
03:31 - head is a global variable so it is
accessible to all the functions
03:36 - now we will implement a function named 
reverse that will take
03:41 - the address of a node as argument
initially we will pass
03:45 - address of the head node to this
function now I want to do something like
03:49 - this in my recursion I want to
03:51 - go on till the end, I want to go on
03:55 - making a recursive call till i reach
the last node, for the last node
03:59 - the link part will be null so this is my
exit condition from recursion
04:05 - on this exit condition is what will stop
us from going on infinitely in a
04:09 - recursion and what I'm doing here is
something very simple
04:13 - as soon as I'm reaching the last node
I'm modifying the
04:17 - head pointer to make it point to this
guy so the recursion will work like this
04:22 - from the main method we will call the
Reverse function passing it
04:26 - the address of the head node address 100
we will come and check this condition if
04:31 - P.next is equal to null, no it is
equal to 200 for
04:35 - the node at address 100 so this
recursion
04:38 - will go on till we reach this call,
04:42 - call to Reverse passing it address 250
04:45 - and now we will come down and now we
have come to this exit condition and now
04:49 - head will be set as P and the list will
look like this
04:54 - and now Reverse(250), the call to Reverse(250)
will finish and we will come back to 
04:59 - Reverse(150)
05:00 - their is no statement here after
05:03 - this recursive call to Reverse function
if there were some statements here
05:07 - then they would have executed now for 
Reverse(150) after we would have come
05:13 - from Reverse(250)
05:14 - and that's how we actually traverse the
list in
05:17 - reverse order if you see when Reverse(250)
05:22 - has finished the Node till
05:25 - 250 is already reversed because head is
pointing to this node and the link part of
05:30 - this node
05:31 - is set as null so till 250 we are
already reversed
05:35 - now when we come to 150 we can make sure
the
05:38 - list is reversed till 150 when we
finish the execution of Reverse(150)
05:44 -  to do that we can write
statement like this
05:48 - we will have to do two things we will
have to cut this node and make this
05:51 - cut point to this guy
05:53 - so we will build this link and we would have
to cut this link
05:57 - and make this guy point to null and
that's how
06:01 - Node till address 150 will be
reversed after we finish this call
06:07 - so I have written these three lines in
my function that will execute
06:11 - after the recursive call so
06:14 - they will execute when the the recursion is
folding up
06:17 - and we are traversing the list in the backward
direction
06:21 - so when we are executing Reverse(150)
06:25 - and we have come back to it after 
recursion we are at this particular line
06:29 - so P would be 150 and q
06:32 - would be P.next so q would be
250 so this guy is
06:37 - p and this guy is q and we are saying that
set q.next is equal to
06:41 - p so we will set this particular field
06:44 - as 100 so we are building this link
06:48 - and cutting this link and now we are saying
that set
06:52 - p.next equal null so we are building
this link
06:56 - making p.next null and now this call
to Reverse(150) finishes
07:01 - and when this call has finished the
list
07:04 - till 150 is reversed as you can see
head is 250 so from 250 we will go to
07:10 - 150 and from 150 we are going to
null
07:14 - so till 150 we have a reversed list
07:17 - so this is how things will look like when the
call to Reverse(200) finishes
07:22 - till 200 we have reversed list
07:26 - and once again we come to execution of
Reverse(100) and this is how things will
07:30 - look like finally when
07:32 - Reverse(100) finish we will return back to
the main function
07:35 - we had seen in the previous lesson that
07:38 - how things will happen in the memory
when recursion execute
07:42 - in recursion we save the state of
execution of all the function calls
07:47 - in stack section of the memory in
this function all we're doing is
07:51 - basically we are storing the addresses of
Node in a structure as we go forward
07:56 - in recursion
07:57 - and then we first work on the last
08:00 - Node to make it part of the reverse list
and then we once again come back to the
08:04 - previous node
08:06 - and we keep doing this, watch the
previous lesson for detailed explanation
08:10 - and simulation of how things will happen
in the memory
08:13 - for recursion
08:15 - there are couple of more things
here one thing is that
08:18 - instead of writing these two lines I
could write one line for these two lines
08:24 - I could say something like p->next
08:27 - ->next equal p and that would have
meant the same
08:31 - except that this statement is more of 
skated
08:35 - and there is one more thing we have
assumed that head is a global variable
08:39 - what if head
08:40 - is not a global variable this Reverse
function will have to 
08:43 - return the address of the modified head I
leave that as an exercise for you to do
08:48 - so this was reversing a linked list
using recursion
08:52 - thanks for watching