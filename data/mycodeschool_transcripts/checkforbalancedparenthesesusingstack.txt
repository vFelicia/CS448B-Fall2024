00:00 - In our previous lesson, we saw one simple
application of stack
00:03 - we saw that stack can be used to
00:06 - reverse a list or collection or may be to
simply traverse
00:10 - a list or collection in reverse order. In
this lesson, we will discuss another 
00:14 - famous problem that can be solved using
stack.
00:18 - And this is also a popular programming
interview question
00:21 - and the problem is, given an expression
in the form of
00:25 - a string comprising of let's say
constants,variables,
00:30 - operators and parenthesis and when I
say parenthesis I also want to include
00:35 - curly braces and brackets and my
definition of parenthesis.
00:39 - so my expression or string can contain
characters that can be
00:44 - upper or lower case letters, symbols for
operators
00:47 - and an opening or closing parenthesis
00:51 - or an opening or closing curly brace
on an opening or closing square
00:56 - bracket. Let's write down some expressions
here. I'm going to write
01:00 - a simple expression. We have one simple
expression with one pair of opening
01:04 - and closing parenthesis.
01:06 - Here in this expression we have nested
parenthesis.
01:09 - Now given such expressions we want to
write a program
01:13 - that would tell us whether parenthesis
in the expression
01:17 - are balanced or not and what do we
really mean by balanced parenthesis
01:21 - what we mean by balanced parenthesis
01:23 - is that corresponding to each opening
parenthesis
01:27 - or opening curly brace or opening
bracket we should have
01:30 - a closing counter part in correct
01:33 - order. These two expressions here are
balanced.
01:37 - However this next expression is
01:40 - not balanced.A closing curly brace is
missing here
01:44 - This next expression is also not balanced
because we're missing
01:48 - an opening square bracket here. This
next one is also not balanced because
01:53 - corresponding to this opening curly
brace we do not have
01:56 - a closing curly brace and corresponding
to this closing
01:59 - parenthesis we do not have an
opening parenthesis. if we are opening
02:02 - with a curly brace,we should also close
with a curly brace.These
02:06 - 2 count for each other.Checking for
balanced parenthesis is one of the
02:11 - tasks performed by a compiler, when we
write a program we often miss
02:16 - an opening or closing curly brace
or an opening or closing parenthesis.
02:21 - Compiler must check for this balancing
and if symbols are not balanced
02:27 - it should give you an error.In this
problem here
02:30 - what's inside parenthesis does not
matter,
02:33 - we do not want to check for correctness
of anything that is inside
02:37 - a parenthesis so in the string any character 
other than opening and closing
02:42 - parenthesis or opening and closing
curly brace or opening and closing
02:45 - square bracket
02:46 - can be ignored. This problem sometimes is
better stated like this
02:51 - "Given a string comprising only of
opening and closing characters
02:55 - of parenthesis braces or brackets
02:58 - we want to check for balancing". So only
these characters and their order is
03:04 - important.
03:05 - While parsing a real expression we can
simply ignore other characters.
03:09 - All we care about is these characters
and their order.
03:13 - Okay so now how do we solve this problem?.
One straight forward thing that comes to
03:17 - mind is
03:18 - that because we should have a
closing counter part for
03:22 - an opening parenthesis or opening curly
brace
03:25 - or opening square bracket what we can
do is, we can count the number of
03:30 - opening and closing symbols for each of
these
03:33 - three types and they should be equal. So
the number of opening parenthesis should
03:37 - be equal to number of closing parenthesis.
03:39 - and the number of opening curly braces
should be equal to number of closings
03:44 - curly braces and same should be true
for square brackets as well
03:47 - but it will not be good enough this
expression here
03:51 - has one opening parenthesis and one
closing parenthesis
03:55 - but it's not balanced this next one
03:58 - is balanced but this one with same number
of characters
04:02 - of each type as the second expression is
not balanced
04:06 - so this approach won't work. Apart from
count being equal that are some other
04:12 - properties that must be conserved.
04:14 - Every opening parenthesis must find a
closing counterpart to its right
04:19 - and every closing parenthesis must find
an opening counterpart
04:23 - in its left which is not true in the
first expression.
04:28 - And the other property that must be
conserved is that a parenthesis
04:31 - can close
04:32 - only when all the parenthesis opened
04:35 - after it are closed. This parenthesis has
been opened after
04:40 - this square bracket so this square
bracket
04:44 - can not close unless this parenthesis is
closed.
04:47 - Anything that is opened last
04:51 - should be closed first. Well actually it
should not
04:54 - be last opened first closed in this
example here
04:57 - this is getting opened last but this guy I
05:01 - that is open previous to this is closed
first
05:05 - and it is fine. The property that must be
conserved is that
05:08 - as we scan the expression from left to
right
05:11 - any closer should be for the previous
unclosed parenthesis
05:16 - any closer should be for the last
unclosed.
05:20 - Let's scan some expressions from left to
right and see how it's true.
05:25 - Let's scan this last one we will go from
left to right
05:29 - first character an opening of the
square bracket
05:32 - second one is an opening parenthesis
05:35 - Lets mark opening of closed parenthesis
in red.
05:40 - Okay now we have a closer here ,
the third character is a closer.
05:44 - this should be the closer for last
unclosed.
05:48 - So this should be the closer for this
one, this guy,
05:52 - this opening parenthesis. last unclosed
now is this guy.
05:58 - Next character once again is an opening
parenthesis.
06:02 - Now we have two unclosed parenthesis at
this stage and this one is the last 
06:06 - unclosed,
06:08 - the next one's a closure.So it
should be closer for the last unclosed.
06:13 - Now the last unclosed once again is the
opening of square bracket
06:17 - now when we have a closer it should be
closer
06:21 - for this guy.
06:24 - we can use this approach to solve this
problem what we can do is we can
06:27 - scan the expression from left to right
06:30 - and as we scan at any stage we can
keep track of
06:34 - all the unclosed parenthesis basically
what we can do is whenever we
06:38 - get an opening symbol an opening
parenthesis an opening curly brace or
06:43 - an opening square bracket, we can add it
06:46 - to a list. If we get up closing symbol
06:50 - it should be the closer for the last
element in the list,
06:53 - in case of an inconsistency like if
06:57 - the last opening symbol in the list is
not of the same type as the
07:00 - closing symbol or if there is no last
opening symbol at all because the list
07:05 - is
07:05 - empty. We can stop this whole process and
say that
07:09 - parenthesis are not balanced else we can
removed the last opening symbol in the
07:13 - list
07:14 - because we have got its counterpart and
continue this whole process.
07:18 - Things will be further clear if I will
run through an example.
07:22 - I will run through this last example
once again.
07:25 - We are going to scan this expression
from left to right
07:28 - and we will maintain a list to keep
track of all the
07:32 - opening parenthesis that are not yet
closed.
07:35 - We will keep the track of all the unclosed
parenthesis
07:38 - opened but not closed. Initially this
list is empty,
07:42 - the first character that we have got is
an opening of square bracket.
07:46 - This will go into the list and we will
move to the next character
07:50 - the next character is an opening parenthesis
so one stick,
07:53 - once again it should go to the list.
We should always insert at the end in the
07:59 - list.
07:59 - the next character is a closing of
parenthesis now we must look at the
08:04 - last
08:04 - opening symbol in the list and if it is
of the same type
08:08 - then we have got it's counterpart and we
should remove this.
08:12 - Now we move on to the next character
this is once again an opening
08:15 - parenthesis,
08:16 - it should go in the list at the end.
08:19 - The next character is a closing of
parenthesis so we will look at
08:23 - the last element in the list, it's an
opening parenthesis,
08:27 - so we can remove it from the list and
now we go to the last character which is
08:32 - a closing of square bracket once again
we need to look at
08:35 - the last element in the list we have one
08:39 - element only one element in the list at
this stage, its
08:42 - an opening of square bracket so once
again we can remove it from the list.
08:46 - Now we're done scanning the list and
the list is empty once again
08:51 - if everything is alright if parenthesis
are balanced
08:54 - we will always end with an empty list
08:57 - and if list is not empty then some
opening parenthesis haven't found its
09:02 - closing counterpart
09:03 - and expression is not balanced. One thing
worth noticing here is that
09:08 - we are always inserting and removing
09:11 - one element at a time from the same end
of the list
09:14 - in this whole process whatever is coming
in last in the list is going out first,
09:19 - there is a special kind of list that
09:22 - enforces this behavior that element should
be inserted and removed
09:27 - from the same end and we call it a
stack.
09:30 - In a stack we can insert and remove an
element one at a time from the same
09:35 - end in constant time. so what we can do
is whenever we get
09:39 - an opening symbol while scanning the
list we can push it onto the stack
09:44 - and when we get a closing symbol we can
check whether
09:48 - the opening symbol at the top of stack
is of the same type
09:52 - has the closing symbol, if its of the
same type we can pop,
09:55 - if it's not of the same type we can
simply say that parenthesis are not
10:00 - balanced
10:01 - I will quickly write pseudocode for this
logic
10:04 - I'm going to write a function named
CheckBalancedParenthesis() that will
10:07 - take an expression
10:09 - in the form of a string as argument.
10:12 - first of all iI will store the number
of characters
10:15 - in the string in a variable and then
10:19 - I will create a stack and I will create
a stack of characters
10:23 - and now I will scan  the expression
from left to right using
10:27 - a loop, while scanning if the character is
an opening symbol if
10:31 - it's an opening parenthesis or opening
curly brace or opening square bracket
10:36 - we can push that character onto the
stack, let's say this function
10:39 - Push() will push up character onto
10:42 - S else if exp[i] or the
character
10:46 - at ith position while scanning is a
closing symbol of
10:50 - any of the three types. We can have two
scenarios if stack is empty,
10:55 - or top of stack does not pair with the
closing symbol
11:00 - if we have a closing of Parenthesis then
the top of stack should be an opening of
11:05 - Parenthesis.
11:06 - It cannot be an opening of curly brace,
in such a scenario we can conclude that
11:11 - the parenthesis
11:12 - are not balanced else we can perform
11:15 - a pop. Finally once a scanning is over
11:18 - we can check whether a stack is empty or
not if it's empty Parenthesis are balanced
11:23 - if it's not they are not balanced.
11:26 - so this is my pseudo code let's run
through a couple of examples and see
11:30 - whether this works for all scenarios
all test cases or not.
11:34 - Let's first look at this expression, the
first thing that we're doing in our
11:38 - code is that we're creating a stack
of characters,
11:41 - I have drawn logical representation of a
stack here.
11:45 - Okay now let's scan this string, let's say
we have a zero-based index
11:49 - and a string is just are character array, we
are starting the scan and going inside
11:54 - the loop.
11:55 - This is a closing of Parenthesis
so this if statement will not hold true
11:58 - so we will go to the
12:00 - else condition and now we will go inside
the else
12:04 - to check for this condition whether stack
is empty or not
12:07 - or whether the top of stack pairs
12:10 - with this closing symbol or not, the stack
is empty,
12:14 - if the stack is empty there is no opening
counterpart for this closing symbol.
12:19 - so we will simply return false, returning
means exiting the function
12:23 - so we are simply concluding here that Parenthesis
are not balanced and
12:27 - exiting.
12:29 - Let's go through this one now, first we
have
12:31 - an opening squad bracket so here we go
to the first
12:35 - if and push, next one is an
12:38 - opening parenthesis once again it will
be pushed next one
12:42 - is a closing square bracket, so the
condition for this else if will be true we
12:47 - will go inside this
12:48 - else if, now this time to top of stack
12:51 - is an opening parenthesis it should have
12:54 - been an opening square bracket and then
only we would have
12:58 - a pair so this time also we will have
to return false
13:02 - and exit. Okay now let's go through this
one.
13:07 - First we'll have a push, the next one
13:10 - will also be a push, now next one is a
closer of parenthesis
13:15 - which pairs with the top of stack which
is opening of parenthesis
13:19 - so we will have a pop, we will go to the
next character and this one once again
13:24 - is an opening parenthesis so there will
be a push.
13:27 - next one is a closing parenthesis and
the top is an opening parenthesis ,they
13:31 - pair so there will be a pop, last
character is a
13:35 - closing curly brace so once again
we will see whether the top of stack
13:40 - is an opening curly brace or not? do we
have a pair or not?
13:43 - yes we have a pair so there will be a
pop with this
13:47 - our scanning will finish and finally
stack should be empty
13:51 - it is empty so we have balanced Parenthesis
here
13:55 - try implementing this pseudo code in the
language of your choice and see whether
13:59 - it works for all test cases or not.
14:01 - If you want to look at my implementation
you can check the description of this
14:04 - video
14:05 - for a link. In the coming lessons we will
see some more problems on stack.
14:09 - This is it for this lesson, thanks for
watching!!