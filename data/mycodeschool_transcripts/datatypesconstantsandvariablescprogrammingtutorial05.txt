00:00 - In our previous lesson,we saw the basic structure
of a C program by writing and executing a
00:06 - simple program to print "Hello World" on screen,but
printing "Hello World" on screen is not doing
00:14 - something very meaningful.In a typical task
that we would like to perform using a computer
00:20 - program,we will have some data,and then we
will have to perform some operations on these
00:27 - data.Let's try to understand this through
an example.Let's say we want to perform this
00:32 - task of calculating simple interest.The data
that we will work upon will be principal amount,which
00:40 - will be a positive number.It can be a real
number because it can have fractional part.Rate
00:46 - of interest,once again it can be a real number,because
it can have fractional part.Time(in years)
00:52 - will be a positive integer.To calculate the
interest,we will have to perform two multiplication
00:58 - operations and one division operation.We will
have to use this formula.Even if we want to
01:05 - perform all this computation manually,we will
have to collect and store all thsi data somewhere.If
01:12 - the data is not too complex,we can store it
in our own head,in our own memory,else we
01:18 - will have to write it down on a piece of paper.Now,when
we will perform an operation on data,new value
01:24 - will be created or some previous value will
be modified.Once again,all of this has to
01:29 - be stored,either in our own memory or on a
piece of paper.Now,if we will try to solve
01:35 - such a problem using a computer program,first
of all,all the data that we want to work upon,should
01:42 - go to computer's memory and if some operation
is performed,newly created data,once again
01:49 - has to be inserted,modified or updated in
computer's memory.So we must have ways in
01:55 - our program to store,access and modify data
in computer's memory.If you look at this expression
02:01 - here, (P x r x t)/100 ; P,r and t here are
variables.Variables,by general definition,
02:09 - are things that can change.In this expression,P,r
and t can be anything.100 in denominator is
02:17 - a constant.A constant is something that won't
change.100 is a 100 in any part of the world.We
02:24 - have concept of constants and variables in
programming also.You can think of constants
02:29 - as value of different types,that you can write
directly in your code in your program.An integer,a
02:36 - real number, a character or a sequence of
characters,that we call a string in programming.Names,words,phrases
02:42 - and sentences;in a program,all of these are
strings.If we use values for these different
02:50 - types directly in our code,then we call them
constants.There are defined a set of rules
02:56 - to create constants of different types and
sometimes a constant can also have a name
03:02 - or identifier.I will talk about these conceots
in a while.We can think of a variable as a
03:08 - unique name or identifier for a section of
computer's memory where we can fill in some
03:15 - data.So if p and q are two variables in my
program, you can imagine them in the memory
03:21 - like i am showing here.p is only a name for
this section of the memory and using the identifier
03:28 - p in our program,we can store some data here
in this section of the memory.Basically,we
03:33 - can read and write to this section of the
memory.Similarly,q is another variable that
03:38 - is identifier for this part of the memory.Once
again,using the identifier q,we can read and
03:44 - write to this part of the memory.In programming,quite
often we use this term identifier for name,that's
03:51 - why i am saying identifier alot of times.Once
again,to create and work with variables,we
03:57 - have to follow the rules of language.Constants
and variables in our program means to store
04:04 - and represent data.Now,data can be of various
types.Different types of data are represented
04:11 - differently.We saw some of the types while
writing these constants.Data can be a number,sometimes
04:18 - an integer,sometimes a real number.Data can
be a word,phrase or some sentence and then
04:23 - there can be all kinds of complex forms of
data and the kind of operations that you perform
04:29 - on different types is different.Moreover,any
data that has to be stored in computer's memory
04:35 - has to be binary,has to be a pattern of 1's
and 0's.Any data from the real world first
04:41 - has to be encoded or converted to binary and
then it can be stored in computer's memory.So
04:47 - there will be different encoding mechanisms
for different types of data.We will talk about
04:52 - this in detail later.For now,just understand
that different types of data are stored differently
04:58 - in computer's memory.A constant or variable
in a program must be of a defined data type.A
05:06 - programming language gives us definition for
some basic data types that we call "Primitive
05:11 - types",and then the language gives us tools
to create complex types or composite types
05:18 - using primitive types.So primitive types are
already defined in the language and composite
05:24 - types need to be defined by us.In our initial
lessons we will mostly be talking about and
05:30 - working with primitive types.Most famous primitive
data types are int for integer,char for character,float
05:41 - for real number and there's another one for
real numbers,it's called double.int,char,float,double-all
05:49 - of these are keywords.Keywords are reserved
words that are always used in a program for
05:56 - a specific purpose,with a specific meaning
so these keywords will always be used to mark
06:02 - the data type of something.There are some
other primitive types in C.We will talk about
06:07 - them later.There is one more building block
that we need to know about and then we can
06:13 - go ahead and write some programs to perform
some real computations.We must know about
06:18 - operators.Constants and variables are means
to store and represent data.Operators specify
06:26 - what to do with data,what operation to perform
with data.I will list down some of the operators.Operators
06:33 - are also of different types.We have arithmetic
operators +,- for addition and subtraction,
06:42 - * for multiplication and backslash for division
and percentile sign for modulus operation.These
06:49 - are arithmetic operators.A single = sign is
called assignment operator.It is used to assign
06:57 - value to a variable.And we have operators
that we call relational and logical operators.
07:05 - == sign is for equality operator.If you want
to compare two values for equality,you use
07:13 - == sign and this is a logical operator.And
then we have operators like  , <= and
07:21 - >=.These operators are called Relational and
Logical operators.We will get to know these
07:29 - operators when we will use them in a real
program.Constants,variables and operators
07:34 - are combined together to create mathematical
and logical expressions that would evaluate
07:42 - to something.For example: let's assume that
p and q are variables of type integer,then
07:47 - p + q will evaluate to the sum of values stored
in p and q.p + 2 will evaluate to value stored
07:57 - in p plus 2.Now 2 is a constant here.2 is
a constant of type integer and we can have
08:03 - complex exoressions also like this one to
calculate simple interest.Let's now see how
08:10 - we can use these building blocks in a real
program.I will start where I had left.This
08:14 - is the program to print "Hello World" that
we had written earlier.As we had discussed,
08:20 - a C program is organised in entities that
we call functions.We must always have a function
08:26 - named main in our program.Program execution
always starts with first statement in main
08:32 - function.There are some functions that are
pre implemented and available to us in what
08:37 - we call language libraries.To use those functions,we
need to reference the libraries to which they
08:43 - belong.This statement here #include
is referencing the library stdio.h.printf
08:53 - function that we are using here is a part
of this library.The first line that i have
08:58 - written here, is a comment in my program.Comment
in a program is a text that is ignored by
09:04 - the compiler.It is not considered for execution.You
write a comment in a program for things like
09:10 - mentioning the name of the author of the program
or for describing problem statement,or for
09:16 - explaining some part of your code all in natural
language.There are two ways to write comment.If
09:22 - you write something starting two forward slashes,then
everything starting the slashes till the end
09:28 - of that line is a comment in your program.You
can begin a comment after a C statement also.Another
09:34 - way to write a comment is start with a forward
slash and then put an asterisk sign and then
09:41 - everything after that is a comment unless
you close the comment with another asterisk
09:46 - sign and then a forward slash.Enclosure asterisk
would come first.Using this method,you can
09:53 - write a comment in multiple lines.Okay,so
what i am going to do now is, I am going to
09:58 - write a comment "using contants and variables".So
we are going to learn,how to create constants
10:05 - and variables in a program.I am going to leave
this printf statement as it is for now.To
10:12 - use a variable in a program,we first need
to declare it.To declare a variable,you write
10:18 - a statemnt like "data type space variable
name".A C statement msut always end with a
10:27 - semicolon.This statement is a variable declaration.We
have declared an integer variable, a variable
10:34 - of type integer named a.Basically, what we
have done is,we have reserved some space in
10:40 - the memory to store an integer,and we can
read and write to this memory using this variable
10:48 - name or identifier 'a'.To fill in some value
in this memory or this variable,and we can
10:56 - fill in only integer because this is a variable
of type integer. We can write a statement
11:01 - like a equal some constant and a semicolon
to end the statement.Filling in some data
11:09 - initially in a variable is called initializing
the variable.The statement a equal 12 is an
11:16 - initialization.We can declare and initialize
a variable in same statement.Instead of writing
11:23 - these two statements,we can write a single
statement like int a equal 12.So,we are declaring
11:30 - as well initializing here.12 is an integer
constant here.As we had seen,constants of
11:36 - different types are written differently.This
"Hello World" here is also a constant.It is
11:41 - a constant of type string.String is not a
primitive data type.Its a composite data type.String
11:48 - is a sequence of characters.Character is a
primitive data type.A string constant is always
11:54 - written as a sequence of characters within
double quotes.This string constant is being
12:00 - passed to printf function as argument.When
we pass something to a function, we call it
12:05 - an argument to the function.And a function
can take more than one argument.It can take
12:11 - arguments.What I am going to do is, I am going
to change this string constant.I am going
12:14 - to write a equal percent d.So i am putting
this percent sign here and then d,and now
12:23 - i am going to pass one more argument to this
function-variable a.How many arguments a function
12:29 - will take and what all arguments it will take
depends upon the definition of the function.Printf()
12:35 - can take one or more arguments.The first argument
must always be a string constant.If i will
12:43 - put a %d somewhere in this string constant,then
printf will expect another argument of type
12:50 - integer,and we can pass either a constant
or a variable of type integer.Now,when printf
12:55 - will print this string,it will replace this
%d with the value of this integer.Things will
13:02 - be clear if I will run this program.Upon running
the program,this is the output I am getting.Printf
13:08 - is printing the string but it has replaced
%d with value in variable a.This is called
13:15 - printing a formatted string using printf.If
we want to print only the value in a and nothing
13:22 - else,we can get rid of this part.And now we
are printing only the value in a.Printf is
13:27 - a magical function.It can do alot of wonderful
things.We will see all of that later.For now,this
13:34 - printf statement is printing the value in
integer variable.Okay,so we are declaring
13:40 - and initializing an integer variable and then
printing the value in that integer variable.Let's
13:45 - now create some more variables of other types.I
want to create a character variable, so I
13:51 - will type in data type char and then i need
to type in a name.I cannot use the variable
13:57 - name a again.Two variables within same function
cannot have same names.And when i say same
14:06 - names,a and A are different.You can have a
variable name as A and it's fine.Now, i can
14:14 - initialize my character variable with a character
constant.A character constant is written as
14:20 - a character within single quotes.To print
value in character variable,instead of writing
14:26 - %d,write %c and then pass the variable c as
another argument.Printf will now print the
14:35 - cahracter for you.Now , I want to create a
variable of type float.So, I'll be able to
14:40 - store a real number.Name of a variable does
not always have to be a single character.It
14:46 - can be a set of characters.The rule to create
a variable name is that you should start with
14:51 - a letter and then you can have letters,numeric
digits and one more possible character underscore.Ideally
15:01 - a variable name should be something meaningful
from real world.And there is one more rule.Your
15:06 - variable name should not be a reserved keyword
in C.Keywords are to be used for specific
15:13 - purpose in a program,like break is a keyword.So
you cannot have a variable named break.I will
15:19 - name this variable real_number.There can be
no space in a variable name,so the underscore
15:25 - character can help bridge two words.We can
intialize this variable with a constant of
15:31 - type float.And to print the value in this
variable,we need to say %f, and then we need
15:38 - to give the name of the variable as second
argument.When I am running this,as you can
15:42 - see this real number is getting printed.Ok,
so with this much, we understand how to store
15:47 - basic primitive data in variables.In our next
lesson, we will see how we can take data as
15:53 - input from user of the program.Right now,we
are filling in all data from within the program.We
16:00 - will also solve problem involving simple arithmetic.This
is it for this lesson.Thanks for watching
16:05 - !