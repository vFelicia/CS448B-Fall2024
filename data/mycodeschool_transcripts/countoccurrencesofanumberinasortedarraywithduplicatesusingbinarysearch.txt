00:00 - In this lesson, we will solve a very famous
programming interview
00:03 - question and the question is that
given
00:06 - a sorted list of integers, we want to
find out
00:11 - how many times a particular element
occurs in this list.
00:15 - So let's say we are given list in the
form of
00:19 - an array. Here we have an array of size twelve
00:23 - and the elements are in increasing order.
Now
00:27 - how many times does number five occur in
this array? 5 occur five times
00:32 - and how many times does number two
occurred in this array?
00:35 - 2 does not occur in the array. So
00:38 - we will be given any such sorted array
00:41 - A and a number X and we have to find out
how many times this number
00:46 - X exists in this array A.
00:49 - Now we want to solve this problem
00:52 - programmatically. So let us think through
the different approaches that we
00:56 - may want to follow. The simplest approach is
that they can scan the whole
01:01 - array and count the occurrences of X
01:04 - in the array. So if I have to write a
function 
01:08 - FindCount() that we will take as argument the array,
01:11 - its size n and element X to be searched
for.
01:15 - The element X for which we want to find the
count.
01:18 - so the logic would be pretty
straightforward, we will take a variable
01:22 - initially, let's say the name of the
variable is count.
01:26 - And we initialize it to zero and then we run a loop
01:29 - starting 0 till  n-1 and if
01:33 - A[i] or the element at index i is
01:36 - equal to element X,we increment count so count
becomes count+1 and finally
01:42 - when we come out of this loop,
01:42 - we return count. So we are
performing a linear search
01:48 - where we are scanning the whole
01:50 - array to search for element X.
01:53 - We could optimize this algorithm a
little bit, something like this
01:57 - because the array is sorted, once we reach the size
02:00 - when A[i] becomes greater than X,
02:03 - we can stop counting but still in the
worst-case
02:07 - this loop will run and n times when all the elements
in the array are same.
02:13 - then this loop will run n times, so in
the worst case this algorithm,
02:17 - the runnning time of this algorithm is
proportional to N.
02:21 - In other words the time complexity is
02:24 - be O(n). This is a
02:27 - very simple solution for this problem
and if you give this solution in a
02:31 - programming interview,
02:32 - the interviewer would be like "I don't
like this!"
02:36 - "Give me something better". So how do we
02:39 - find out a better solution? Whenever in a
problem we are given
02:43 - a sorted data or a sorted collection, we
should
02:46 - try to think about applying one very
famous algorithm that makes the best
02:51 - use of
02:52 - this property that the data is sorted
and this algorithm is 
02:56 - binary search. So can we make use a
binary search in this problem?.
03:02 - One thing that you can do is that using
binary search
03:05 - we can find out any occurrence of
the number X
03:08 - in the array. So let's say in this example
we want to find out
03:12 - count of number 5. So let's say we
will find out
03:15 - using binary search in O(logn)
time
03:19 - that number 5 exists at index 6.
03:22 - Now because the array is sorted, all
occurrences of 5
03:26 - will be adjacent to this. So we
can go towards higher indices,
03:30 - starting this index
03:31 - and look for all the 5 and then we
can go towards the lower indices,
03:36 - and look for all occurrences of 5 but
once again
03:39 - if the whole array is number 5 only all
elements being same
03:44 - still is a sorted array, then we will
scan
03:47 - all the elements, we will access all the
elements in the array
03:51 - and eventually the time complexity will
be
03:54 - O(n) only. The time taken will
be proportional to n only in the
03:58 - worst-case.
03:59 - So using binary search kind of does
not give us
04:02 - much advantage, if we use binary
search
04:05 - in its basic form.
04:07 - O(n) because to perform
binary search we will take O(logn)
04:12 - then to find out all the adjacent
occurrences of X
04:17 - we will take O(n) in the worst case 
so for higher values of n
04:21 - log(n) is negligible in comparison to n,
04:25 - so this is eventually O(n). We are
04:29 - not writing, writing pseudo code for this
approach. We will that as an exercise for
04:33 - you.
04:34 - With these two approaches we are still O(n)
in the worst case.
04:39 - so what do we do?. Well if you'd remember
04:42 - from our previous lessons on binary
search, we can write
04:46 - a binary search to find out the first
occurrence of an element in an array
04:51 - and similarly we can write a variation
of binary search
04:54 - to find out last occurrence of an
element in an array.
04:58 - and this forms the basis of our third
approach.
05:02 - And I'll clear some of this and make
some space. Okay so we can use one
05:06 - variant of binary search to find out
05:09 - the first occurrence of an element in array
and we can use another variation of binary
05:14 - search to find out the last occurrence
05:16 - and if we know the last and the first
index at which
05:19 - the element occurs then we also know the
count of it in the array.
05:23 - So once again we will write a method
FindCount()
05:27 - that will take an array A, its size n
05:30 - and element X and let's say we find
05:33 - the first occurrence of the element in the array,
using the method.
05:37 - FindFirst() which is a variation of
05:40 - binary search and we will use
05:44 - another method call to another variant
05:48 - of binary search that will give us the last
occurence of the element in the array
05:52 - then we can return count as last
index -
05:57 - first index + 1, and I'm not handling
the case here when the element is not
06:02 - present in the array,let's say
06:03 - we will handle it ,well in our actual
implementation.
06:07 - Okay, so that first method call if we are
using binary search will
06:11 - work in O(logn) and the second
method call to find out
06:14 - the last occurence will also work in
the O(logn).
06:17 - So overall the time complexity to find
out
06:21 - the count of an element in the array would
be O(logn).
06:24 - and that's really great. We have
described how to find out the first or the
06:30 - last occurrence of an element in a
sorted array
06:33 - using binary search. We had written the
pseudocode
06:37 - for the algorithm in our previous
lesson and
06:40 - there is a link to the previous lesson in
the description of this lesson
06:44 - but let us now go and write some
06:47 - real code to solve this problem. I will
write
06:51 - a C program.let us first write a
simple normal binary search
06:55 - and then they will modify it to find the
first or the last occurence, let's say we have
06:59 - a method BinarySearch() that gives me
07:01 - index of element X in the array. In binary
search
07:04 - we first define 2 indices low
and high to variables low and high
07:08 - initially set to 0 and n-1
07:10 - respectively and then 
we find the mid element as
07:14 - low+high/2
07:18 - and then we compared the middle element
with
07:21 - the number X and if we
07:24 - if middle element = X, we have found
our elements
07:28 - so we simply return the index mid, else
07:31 - if X < middle element
07:34 - because array is sorted, remember array
being sorted is a precondition of binary
07:38 - search
07:39 - we set high as  mid-1 kind of
saying that search
07:42 - in the segment left to the middle
element and if
07:46 - X is greater than the middle element, we
add just low to mid+1
07:50 - and we keep repeating this process
07:54 - again and again till the time we have a valid
segment
07:57 - and a valid segment is still the time
low
08:00 - <= high and if we
come out of this loop
08:05 - without finding anything then we return -1 to
say that X does not exist in it.
08:10 - Problem with this implementation is that
as soon as we find
08:15 - any X, We return. So there is no
guarantee that we will find the first
08:20 - index or the last index.
08:22 - If there are duplicates in the, duplicates
of X in the array.
08:26 - so what we do is we will, what do we do
is we will
08:30 - modify the algorithm slightly. We will have
another variable initialized to -1
08:35 - and now when we find X
08:38 - then we do not return an exit, we
update that result variable
08:43 - to kind of say that okay this is the
lowest index of
08:46 - X so far and then we continue the search
08:50 - so if we want to find out the first
occurrence then we adjust high to mid -1.
08:56 - So we update result and go on searching
towards lower end, this is lower segment
09:00 - and finally when we come out of this
loop then we return this result.
09:05 - If we do not find anything any occurrence
of X we will simply return -1
09:09 - because this was initialized to -1. Now
this implementation will give us the
09:13 - first occurrence of X in the array.
09:16 - and what if we wanted the last occurrence?.
The only difference would be that we will
09:20 - go on searching towards searching
right or higher indices so we will
09:24 - say that low = mid+1.
I'll go on searching towards the higher indices
09:28 -  
09:32 - Now I want 2 different functions for
finding out the first or the last
09:35 - occurrence
09:36 - but if you see there is differense in only
one line
09:40 - in these two implementations. So what I will
do is I will use the same function to
09:45 - retrieve both first and the last index
09:49 - based upon another argument, a flag.
09:52 - So let's say we have a flag as a
boolean parameter.
09:56 - Search first, if it is true we want to search
far the first occurrence and if it is
10:00 - false
10:01 - then you want to search for the last occurence
So if we want to search for the
10:04 - first occurence
10:05 - then we want to, in the case when
10:08 - A[mid]=X, we want to adjust
high = mid -1
10:11 - else we want to adjust low to mid+1.
10:15 - Okay let us now write the main method.
what I will do is , I will first
10:19 - initialize an array
10:22 - and I will ask the user to input a number
10:26 - X. Now we want to find out the count of X
10:30 - so we will first make a call to binary
search matter to find out the first
10:34 - index
10:34 - in the array, so we will pass the array
10:38 - A,the number of elements in the array which
is 12 and we may also calculate the
10:43 - number of elements using
10:44 - this particular equation, size of A
upon size of
10:49 - A[0], size of the number of bytes in
the whole array
10:52 - upon the number of bytes in each integer, in each
10:56 - element and we want to search for X and
we will pass
10:59 - true because in our method declaration
if this flag is passed is true then we
11:04 - search for the first index else we search
for the last index.
11:08 - Now if first index is returned as -1
11:11 - then the element is not in the array, so no
need to find the last index we can
11:15 - simply print that
11:16 - the count is 0 else we find out
11:20 - the last index and this time we make
11:23 - the call to the same function BinarySearch()
11:27 - with the only difference that this time we will pass
the flag as false.
11:31 - So we say that hey! give me the last
index and we will print
11:35 - count as last index - first index + one
11:39 - so this is our code , this is our method binary
search and we have made call to binary
11:43 - search twice
11:45 - to find out the first and the last index
and we decide first and the last index
11:49 - using this flag
11:51 - Let us now run this code and see what
happens. Let's say, we want to find out
11:54 - the count of number 3.
11:56 - then this gives us that 3 occurs
thrice which is right
11:59 - let's now try number 5 and count of
5 is five
12:04 - and lets give x =2. 2 is not
12:08 - present in that array. so the count will be
0.
12:11 - so this is an optimized algorithm to
find out count of an element in a
12:15 - sorted array.
12:16 - This is a classic implementation of
binary search
12:19 - In the coming lessons we will see more
problems on binary search.
12:22 - So thanks for watching!