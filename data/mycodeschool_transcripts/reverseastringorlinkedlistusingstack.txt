00:00 - In our previous lesson, we saw how we can
implement
00:03 - a stack, these are two popular
implementations of stack
00:07 - one using arrays and another using
linked list.
00:10 - A warrior should not just possess a
weapon
00:13 - he must also know when and how to use it.
00:16 - As programmers we must know in what all
scenarios we can use a particular data
00:22 - structure.
00:23 - In this lesson, I'm going to talk about
one simple use case of stack.
00:27 - A stack can be used to reverse
a list or collection,
00:31 - or simply to traverse a list or
collection
00:35 - in reverse order. I'm going to talk about
00:38 - two problems. Reversal of string and
00:42 - reversal of linked list and I'm going to
solve
00:46 - both these problems using stack. Let's
first discuss
00:51 - reversal of string, I have a string in
the form of
00:54 - a character array here, I have this string
"HELLO".
00:58 - A string is a sequence of characters.
01:01 - This is a C-style string. In C
01:05 - a string must be terminated with a null
character, so this last character is a
01:09 - null character.
01:10 - Reversal means characters in the array
should be
01:13 - rearranged like what i'm showing here
in the right.
01:16 - null character is used only to mark the
end of string,
01:20 - it is not part of string. Okay
01:23 - there are couple of efficient ways in
which we can reverse a string.
01:27 - Let's first discuss how we can solve
this problem using
01:30 - a stack and then we will see how
efficient it is.
01:33 - What we can do is we can create a
stack of characters,
01:37 - I'm showing logical representation of a
stack here
01:41 - this is a stack of characters and right
now it's empty
01:44 - and now what we can do is we can
traverse the characters
01:48 - in the string from left to right and
start pushing them onto the stack.
01:53 - So first 'H' goes into the stack then
the next character this
01:57 - 'E' then 'L' then we have another 'L'
02:02 - and then the last character is 'O'. Once all
02:06 - all the characters in the string
have gone into the stack
02:09 - we can once again start at the 0th index.
02:12 - Now we need to write the topmost
character
02:16 - in the stack, at this index we can get
the top most character by calling
02:21 - top operation and now we can perform a
pop
02:24 - and now we can go to the next index
fill in whatever is at top of stack
02:29 - and perform a pop again. We can go on
doing this
02:33 - until stack is not empty, so all the
positions
02:38 - in the character array will be overwritten.
So finally we have reversed a
02:43 - string here.
02:44 - In a stack whatever goes in last comes
out first.
02:48 - So if we will push a bunch of items onto
02:51 - a stack and once all items have pushed
if we will start popping
02:55 - we will get the items in reverse order.
First item pushed onto the stack
03:00 - will come out last. Let's quickly right
03:03 - code for this logic. I'm going to write
C++ here.
03:07 - Things will be pretty similar in other
languages, so it doesn't really matter.
03:11 - what I'm going to do in my code is am
going to create a
03:14 - character array to store a string and then
I will ask
03:18 - user to input a string, once I input
the string
03:23 - I would make a call to a function named
Reverse passing
03:26 - it the array and length of string
03:30 - that I will get by making a call to
string length function(strlen in C) and finally
03:34 - I'm printing the reversed
03:36 - string. Now I need to write the reverse
function.
03:39 - In reverse function I want to use a
stack,
03:42 - a stack of characters, we have already
seen how we can implement stack.
03:47 - In C++, we can create a class
named stack
03:51 - that would have an array of characters
03:54 - and an integer variable named top to
mark
03:58 - the top of stack in array and
04:01 - these variables can be private and we
can work up on the stack using these
04:05 - public functions.
04:06 - In Reverse() function we can simply create
an object of stack
04:11 - and use it. This class can be an array
based implementation of stack or
04:16 - linked list based implementation of stack
04:19 - it doesn't really matter, in C++
and many other languages
04:23 - language libraries also give us
implementation of stack
04:27 - in this program I'm not going to write
my own stack
04:30 - I'm going to use stack from what we call
standard template library in C++.
04:36 - I will have to use this includes
statement #include
04:40 - and now I have a stack class
available to me
04:44 - to create an object of this class I need
to write stack
04:48 - and within angular brackets datatype
for which we want
04:52 - a stack, then after space name or 
identifier
04:57 - with this one statement here I have
created a stack of characters.
05:00 - Let's now write the core logic this n in
the signature of reverse function is
05:05 - number of characters in string
05:07 - this array as we know array
05:11 - in C or C++ is always passed
by deference
05:14 - through a pointer, this C followed by
brackets is only
05:18 - an alternate syntax for *C.
05:22 - It's interpreted like this by the
compiler. Okay so now what I'm going to
05:26 - do is I'm going to run
05:27 - a loop starting 0 till n-1.
05:32 - So I will traverse the string from left
to right and as I traverse the string I
05:37 - will push
05:38 - the character onto stack by calling
05:41 - push function I will use a statement
like this
05:45 - once push is done and do another loop
for pop.
05:49 - I will run a loop with this variable i
starting
05:53 - at 0 and going till  n-1 and I will first
set
05:58 - C[i] as top of stack and then
06:02 - I will perform a pop operation.
06:05 - If you want to know more about functions
available with stack in
06:08 - STL like their signatures and how to use
them, you can check the description of
06:13 - this video for some resources.
06:15 - This is all I need to do in my reverse()
function. Let's run discord and see what
06:20 - happens.
06:21 - I need to enter a string. Lets enter
"HELLO".
06:25 - this is what I get as output which seems
to be correct
06:28 - let's run this again and this time I
want to enter mycodeschool
06:33 - this looks alright to so we seem to be
good
06:36 - so this function is solving my problem
of reversal.
06:39 - Let's now see how efficient it is let's
analyze its time complexity
06:44 - we know that all operations on stack
take constant time
06:48 - so all these statements within loop,
inside loop,
06:52 - will take constant time. The first loop is
running n times
06:56 - and then the second look is also running
n times,
06:59 - first look will execute in O(n)
and the second loop will also execute in
07:04 - O(n).
07:05 - The loops are not nested they are one
after another
07:09 - so in such scenario complexity of the
whole function
07:13 - will also be O(n).
07:16 - Time complexity is O(n) but
we are using some extra memory here for
07:21 - stack.
07:22 - we are pushing all the characters in the
string on to
07:25 - stack, the extra space taken in stack
will be proportional
07:30 - to number of characters in the string,
will be proportional to
07:34 - n. So we can say that space complexity of
this function
07:38 - is also O(n), in simple words
07:42 - extra space taken is directly
proportional to n.
07:45 - There are  efficient ways to reverse a
string without using extra space.
07:50 - The most efficient way probably would be
to use
07:53 - just two variables to mark
07:56 - the start and end index in the string
initially,
08:01 - let's say I am using variables i and j,
initially i for this example is 0 and j
08:06 - is 4.
08:07 - While i is less than j we can swipe the
characters at these positions.
08:13 - And once we have swapped, we can
increment i and decrement
08:17 - j , if i is less than j , we can swap again
08:21 - and once again increment i and decrement j.
08:24 - Now I is not less than j,i is equal to j.
At this stage
08:28 - we can stop swapping and we're done.
08:31 - This algorithm has space complexity O(n),
we are using constant
08:36 - extra memory here. Time complexity of
this approach
08:40 - once again is O(n). We will do
n/2
08:44 - swaps, so time taken will be
proportional to n.
08:47 - Definitely because of space complexity
this approach is better
08:51 - than our stack approach sometimes when
we know that
08:55 - our input will be very small and time and
space is not much of concern,
08:59 - we use a particular algorithm for
ease of implementation.
09:03 - for it's being intuitive, it's
clearly not the case when we're using
09:07 - stack to reverse a string
09:09 - but for this other problem, reversal of
linked list
09:13 - that we have said we will discuss using a
stack gives us
09:16 - are neat and intuitive solution. I have
drawn a linked list of integers here.
09:21 - As we knew linked list are collections of
entities as we call nodes.
09:26 - Each node contains two fields, one to
store data and other to store
09:32 - address of next node. I have assumed
that these nodes
09:36 - in this example here are at address is
100, 150, 250 and 300
09:41 - respectively. Identity of a linked list
is address of the head node.
09:45 - we typically stored this address in a
variable named head.
09:50 - In an array, it takes constant time to
access any element
09:54 - so whether it's the first element or
last element
09:57 - it takes constant time to access it, it
is so because array is stored as one
10:02 - contiguous block of memory
10:04 - so if we know the starting address of
the array,
10:07 - let's say the starting address of this
RS 400 and size of each element in the
10:11 - array,
10:12 - character takes one bite so for this
example each element is one byte
10:16 - then we can calculate address of any
element.
10:20 - So we know that 84 is at 400+4
10:24 - or 404 but in a linked list
10:27 - nodes are stored at disjoint
locations in memory,
10:31 - to access any nor do we have to start at
the head node,
10:35 - so we can do something as simple as
having 2 pointers at start and
10:40 - end and accessing the elements. We have
already seen in this series,
10:45 - two possible approaches that can be used
to reverse a linked list.
10:48 - one was an iterative solution where we
go on reversing
10:52 - links as we traverse the list
10:55 - using some temporary variables, another
solution was using
10:59 - recursion. The time complexity of
iterative solution is O(n).
11:03 - Space complexity is O(n).
11:06 - In recursive solution we do not
create
11:10 - a stack explicitly but recursive
uses the stack in computer's memory
11:16 - that is used to execute function calls
11:19 - in such a case we say that we are using
implicit stack.
11:24 - stack is not being created explicitly but
still we are using
11:28 - an implicit stack. I will come back to
this and explain in detail.
11:33 - The time complexity of recursive
solution once again is O(n).
11:36 - but the space complexity is O(n)
11:40 - this time. Space complexity is also O(n).
11:45 - Now let's see how the can use an
explicit stack to solve this problem.
11:50 - Once again I have drawn logical
representation of stack here,
11:54 - right now the stack is empty. In a
program this will be
11:58 - a stack of type pointer to Node.
12:01 - What I'm going to do now is I'm going to
traverse this linked list
12:05 - using a temporary pointer to Node.
12:08 - The temporary variable will initially
point to head.
12:11 - When we will go to a particular node we will
push the address of that 
12:15 - node onto the stack.
12:18 - so first 100 will go to stack and now we will
move to the next
12:23 - Node, now 150 will go in stack
12:26 - and now we will go to 250
12:30 - and then to the last node at
12:34 - 300. They are showing addresses here in the
stack but basically the objects
12:39 - that we are pushing are pointers to Node
12:43 - or in other words references to nodes.
12:47 - if Node is defined like this in C++
12:51 - we will have to use these statements to
traverse linked list and push
12:56 - all the references.
12:58 - Let's say head is a pointer to Node
which I'm assuming is a global variable
13:02 - that will store the address of head node.
13:06 - I'm using a temporary variable that is
pointed to Node, initially am starting
13:09 - the address of head node in this
temporary variable
13:12 - and then I'm running a loop and
13:15 - I'm traversing the linked list and as
I'm traversing
13:19 - I'm pushing the reference on to stack
once all the references are pushed onto
13:24 - stack,
13:25 - we can start popping them and as we
will pop them, we will get
13:28 - references to Nodes
13:30 - in reverse order, it would be like going
through the list in
13:34 - reverse order. While traversing the list
in reverse order we can build
13:39 - the reverse links. The first thing that'll
do is i'll take
13:42 - a temporary variable that will be
pointer to Node
13:46 - and store the address of address at
13:49 - the top of stack which right now is 300
13:53 - now I will set head as this address, so
head now becomes 300
13:58 - and then I will pop. I'm running you
through this example here
14:03 - as I'm writing code, head and temp right
now are both
14:06 - 300 and now I would run a loop
14:10 - like this, like what I have written here.
while stack is not
14:14 - empty this function empty() returns true if
stack is empty.
14:18 - I'm using stack from standard template
library in C++,
14:22 - so while stack is not empty I'm going to
say that set temp->next
14:26 - as address at top of stack.
14:30 - Basically I'm using this pointer to
Node temp
14:33 - to dereference and set this
particular address field
14:38 - right now top is 250 so I'm building
this
14:42 - reverse link next statement is a pop()
14:46 - and in the next statement am saying temp = temp->next
14:50 - which means temp will now point to this node
at 250
14:54 - stack is not empty so loop will execute
again.
14:58 - we are writing address here now
15:01 - then we should pop and then move to
15:05 - 150 using this statement temp = temp->next.
15:08 - now we are building this link popping
and then
15:12 - oops this should have been 150 and
15:16 - with the next temp =temp->next
we're going
15:19 - here, even though we have built this
link by setting this field here
15:25 - this node is still pointing to this guy
because the stack is empty now we will
15:30 - exit the loop,after the loop,
15:32 - after exit from the loop, I have written
one more  line temp->next = NULL.
15:37 - so I'm setting the last, link part of
15:41 - last node in reversed list as NULL
15:45 - finally this is my reverse function I
have assumed that head
15:49 - is a global variable and it's a
pointer to Node
15:52 - if you want a complete source code you
can check the description of this video
15:56 - for
15:56 - a link. Using the stack in this case is
making a life easier
16:00 - reversing a linked list is still a
complex problem,
16:04 - try to just print the elements of
linked list in reverse order.
16:08 - if you will use our stack it will be
really easy.
16:11 - I will stop here for this lesson, if you
know,  if you want to know what I
16:15 - meant by
16:16 - implicit stack you can once again
checked the description of this video
16:19 - for some resources
16:20 - so this is it for this lesson thanks for
watching.