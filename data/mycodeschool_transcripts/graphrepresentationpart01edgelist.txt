00:00 - Hello everyone ! In our previous lessons
00:03 - we introduced you to graphs and we also
looked at and talked about some of the
00:07 - properties of graph
00:08 - but so far we have not discussed how the
can implement graph,
00:12 - how they can create a logical structure
like graph of in computer's memory,
00:17 - So, let us try to discuss this. A graph as
we know
00:21 - contains a set of vertices and a
set of
00:25 - edges and this is how we define graph in
00:28 - pure mathematical terms. A graph G
00:31 - is defined as an ordered pair of set
00:34 - V of vertices and a set E of
00:37 - edges. Now to create and store a graph in
computer's
00:41 - memory, the simplest thing that we
probably can do
00:45 - is that we can create two list, one
00:49 - to store all the vertices and
another to store all the
00:53 - edges. For a list, we can use an array
00:56 - of appropriate size or we can use an
implementation of
01:00 - a dynamic list. In-fact we can use a
dynamic list
01:04 - available to us in language libraries,
something like
01:08 - vector in C++ or ArrayList
in Java.
01:11 - Now a vertex is identified by
01:14 - its name, so the first list the list of
vertices
01:18 - would simply be a list of names or
strings.
01:22 - I just filled in names of all the vertices
01:25 - for this example graph here. Now what
should we fill
01:28 - in this edge list here. An edge
01:32 - is identified by it's two endpoints, so
what we can do is we can create
01:38 - an edge as an object with two fields.
01:41 - We can definde edge as a structure
01:44 - or class with two fields. One to store
01:48 - the start vertex and another to store the
end vertex.
01:51 - Edge list would basically be an array
or list of this type
01:57 - struct edge. In these two definitions of
02:00 - edge that have written here, in the first
one I have used character pointers
02:05 - because in C we typically use
character pointers to store
02:09 - or refer to strings.
02:12 - We could use character array also. In C++
or Java
02:16 - where we can create classes, we have
string
02:19 - available to us as a data-type, so we
can use that also.
02:23 - So we can use any of these for the
feilds. We can use character
02:27 - pointer or character array or string
data-type, if it's available
02:31 - depends on how you want to design your
implementation.
02:35 - Now let's fill this edge list here for
this example graph.
02:39 - Each row now here has two boxes. Let's
say the first one is to store
02:44 - the start vertex and the
second one is to store
02:47 - the end vertex. The graph that we have
here is an
02:51 - undirected graph, so any vertex can be
called start vertex
02:56 - and any vertex can be called end
vertex. Order of the vertices is not
03:01 - important here.
03:01 - We have nine edges here, one between
03:04 - A and B another between
03:07 - A and C another between A
03:11 - and D and then we have B E
03:14 - and B F, instead of having B F as an
entry we could also have F B
03:20 - but we just need one of them and then
we have C G
03:24 - D H, E H
03:27 - and F H. Actually there is one more.
03:31 - We also have G H. We have 10 edges
in total here not 9.
03:36 - Now once again, because this is an
undirected graph,
03:40 - if we are saying that there is a edge
from F to H. 
03:43 - We are also saying that there is an edge from
03:46 - H to F. There is no need to have another
entry as
03:50 - H F, we will necessarily be using
extra memory.
03:54 - If this was a directed graph F H
03:57 - and H F would have meant two different
connections
04:01 - which is the start vertex which is the
end vertex
04:04 - would have mattered. Maybe in case of
undirected graphs
04:08 - we should name the fields as first
vertex and second vertex and in case of
04:12 - directed graphs
04:13 - we should name the fields as start
vertex and end vertex.
04:17 - Now our graphs here could also be a
weighted graph.
04:21 - We could have some cost or weight
04:23 - associated with the edges. As we know in
an unweighted graph cost of all the
04:28 - connection is
04:29 - equal but in a weighted graph, different
connections
04:32 - would have different weight or different cost.
Now in this example graph here, I have
04:37 - associated some
04:38 - weights to these edges. Now how do you
think we should store this data,
04:42 - the weight of edges. Well if the graph
is weighted
04:46 - we can have one more field in the edge
object
04:49 - to store the weight. Now an entry in my edge-list has 3 fields.
04:55 - One to store the start vertex, one to store
04:58 - the end vertex and one more to store the weight.
So this is one possible way of storing
05:04 - a graph.
05:04 - We can simply create two lists, one to
store the vertices
05:08 - and another to store the edges, but this
05:12 - is not very efficient. For any possible
way of storing and organizing data
05:17 - we must also see its cost and when we
say cost
05:21 - we mean two things - time cost of various
operations
05:26 - and the memory usage.
05:30 - Typically we measure the rate of growth
of
05:33 - time taken with size of input or data,
05:36 - what the also call time complexity
05:39 - and we measure the rate of growth of
05:43 - memory consumed with size of input data,
05:46 - what we also call space complexity. Time
and space complexities
05:51 - are most commonly expressed in terms of
what we call
05:54 - Big-Oh notation. For this lesson, I am
assuming that you already know about
05:59 - time and space complexity analysis and
Big-Oh notation.
06:02 - If you want to revise some of these
concepts then
06:05 - you can check the description up of this
video for link to some lessons.
06:09 - We always want to minimize the time
cost of most frequently performed
06:13 - operations
06:14 - and we always want to make sure that we
do not consume
06:17 - unreasonably high number. Okay, so
06:20 - let's now analyze this particular
structure that you're trying to use
06:24 - to store our graph. Let's first
discuss the memory usage.
06:28 - For the first list, the vertex list, least
number of rows needed
06:33 - or consumed would be equal to
06:36 - number of vertices. Now
06:40 - each row here in this vertex list is
a name or
06:43 - string and string can be of any length.
06:46 - Right now all strings have just one
character because I simply named
06:51 - the node A B C and so on but we could have
names with multiple characters
06:56 - and because strings can be of
different lenghts. All rows may not be
07:01 - consuming the same amount of memory
07:03 - like here. Here, I'm showing
07:06 - an intra-city road network as
weighted graph.
07:09 - Cities are my nodes and road distances
are my weights.
07:14 - Now for this graph as you can see names
07:17 - are of different lengths, so all rows
in vertex list or
07:21 - all rows in edge list would not cost us
same.
07:25 - More characters will cost us more bytes.
But we can safely assume that
07:31 - the names will not be too long. We can
safely assume that in almost all
07:35 - practical scenarios
07:37 - average length of strings will be a
really small value.
07:41 - if we assume it to be always lesser
than some constant
07:44 - then the total space consumed in this
vertex list
07:48 - will be proportional to the number of
rows consumed
07:51 - that is the number of vertices or
in other words we can say that
07:56 - space complexity here is Big-Oh of number
of vertices.
08:01 - This is how we right number of
vertices with two vertical bars.
08:05 - What we basically mean here is number
of elements in set V.
08:09 - Now for the edge list, once again
08:12 - we are storing strings in first two fields
of edge object.
08:16 - So once again each row here will not
consume same amount of
08:20 - memory but if we are just storing the
reference or pointer to a string
08:25 - like here in the first row instead of
having values
08:28 - filled in these two fields, we could
have
08:32 - references or pointers to the names
in the vertex list.
08:35 - If we will design things like this, each
will consume same memory.
08:39 - This in fact is better because
references in most cases would cost us a
08:44 - lot lesser than
08:45 - a copy of the name
08:47 - and as reference we can have the actual
address of the string
08:51 - and that's what we're doing when we're
saying that start vertex and
08:55 - end vertex can be character pointers
08:59 - or may be a better design would be
simply having the index of the name or
09:04 - string in vertex list.
09:05 - Let's say A is at index 0 in
vertex list and B is that index 1 and
09:11 - C is at index two
09:12 - and I'll go on like this. Now
09:17 - for start vertex and end vertex, we
can have
09:21 - two integer fields. As you can see in both
09:25 - my definitions of edge, start vertex and
end vertex
09:29 - are of type int now and in each row of edge list
first and second field
09:35 - are filled with integer values. I have
filled in appropriate values of
09:40 - indices. This definitely is a better
design
09:44 - and if you can see now each row in edge
list
09:47 - would cost us the same amount of memory.
So overall space consumed in edge list
09:53 - would be proportional to number of
09:55 - edges or in other words, space complexity
here
09:59 - is Big-Oh of number of edges. Okay, so
this is analysis of
10:04 - our memory usage. Overall space
complexity of this design
10:09 - would be Big-Oh of number of vertices
plus number of edges.
10:14 - Is thiis memory usage is reasonably high ?
Well,
10:18 - we cannot do a lot better than this if
we want to store a graph in
10:21 - in computer's memory. So we are alright in
terms of memory usage.
10:25 - Now let's discuss time cost of
operations.
10:29 - What do you think can be most frequently
performed operations
10:33 - while working with graph. One of the most
frequently performed operations while
10:37 - working with
10:38 - graph would be finding all nodes
10:41 - adjacent to a given node, that is finding
all nodes
10:45 - directly connected to a given node. What
do you think would be
10:49 - time cost of finding all nodes directly
connected to a given node.
10:53 - Well, we will have to scan the whole edge
list. We will have to perform
10:57 - a linear search. We will have to go through
all the entries
11:01 - in the list and see if the start or end
node in the entry is our given node.
11:06 - For a directed graph, we would see
if the start
11:10 - node in the entry is our given node or not
and for an undirected graph we would see
11:14 - both the start as well as the end node.
11:16 - Running time would be proportional to
number of edges
11:19 - or in other words time complexity of
this operation would be
11:24 - Big-Oh of number of edges. Okay, now
11:27 - another frequently performed operation
can be finding
11:31 - if two given nodes are connected or
not. In this case also, we will have to
11:36 - perform
11:36 - a linear search on the edge list. In
worst case we will have to look at
11:41 - all the entries in the edge list. So
worst-case running time would be
11:45 - proportional to number of edges. So for
this operation
11:49 - too, time complexity is Big-Oh of number of
11:52 - edges. Now let's try to see how good
11:56 - or bad this running time Big-Oh of number
of
11:59 - edges is. If you remember this
discussion from our previous lesson
12:03 - in a simple graph, in a graph with no self
loop
12:07 - or multi edge. If number of vertices
12:10 - that is the number of elements in set V
12:14 - is equal to n, then maximum number of
12:18 - edges would be N * N-1.
12:21 - if the graph is directed.
12:24 - Each node will be connected to every
other node
12:28 - and of course minimum number of edges
can be zero.
12:31 - We can have a graph with no edge.
Maximum number of edges
12:35 - would be N * N-1 / 2
12:39 - if the graph is undirected but all in
all if you can see
12:43 - number of edges can go almost up to
square of number of vertices.
12:48 - Number of edges can be of to order of
square of number of vertices.
12:52 - Let's denote number of vertices
here as
12:56 - v, so a number of edges
12:59 - can be of to order of v^2.
In a graph, typically
13:04 - any operation running in order of number
of edges
13:07 - would be considered very costly. We try
to keep things in order of number of
13:12 - vertices.
13:14 - When we are comparing the two running times
this is very obvious
13:17 - Big-Oh of v is a lot better than Big-Oh
v^2.
13:22 - All in all this vertex list and edge
list kind of the representation
13:26 - is not very efficient in terms of time
cost of operations.
13:31 - We should think of some other efficient
design. We should think of something
13:35 - better.
13:35 - We will talk about another possible way of
storing and representing graph
13:40 - in next lesson. This is it for this
lesson. Thanks for watching.