00:00 - in this lesson we will write a program
00:03 - to find out prime factorization of a
00:05 - number so what is factorization of a
00:08 - number factorization of a number is
00:12 - writing the number in the form of
00:15 - multiples of its factors so for example
00:18 - if we have a number 24 we can write this
00:21 - number 24 as 2 into 12 now 2 and 12 are
00:26 - both factors of 24 so this is one
00:29 - possible factorization iation and we we
00:31 - can have other possible factorizations
00:33 - for 24 as well we could write 24 as 3
00:37 - into 8 or even in terms of more than one
00:40 - factors like 2 into 3 into
00:44 - 4 now prime
00:46 - factorization as it should be obvious
00:49 - from the name itself would be writing
00:52 - the number as multiples of its prime
00:55 - factors only so for
00:57 - 24 we can have a prime factorization
01:00 - like 2 into 2 into 2 into 3 where it is
01:03 - written only in the form of multiples of
01:07 - its prime factors so this
01:10 - is prime factorization of
01:15 - 24 there is only one possible prime
01:18 - factorization of a number so even though
01:20 - in this case we could rearrange the
01:23 - factors to write it something like this
01:26 - 3 into 2 into 2 into 2
01:30 - but the factors and the number of times
01:32 - that they will appear would still be the
01:36 - same so two will always appear three
01:39 - times and three will always appear one
01:42 - times in prime factorization of 24 and
01:45 - we often write prime factorization in
01:46 - the form of exponents so we can write
01:49 - this as 2 ^ 3 into 3 ^ 1 so how do we
01:56 - find out prime factorization and we need
01:58 - to go back to our El Elementary School
02:01 - mathematics uh let's pick up another
02:03 - example this time let's say let's say we
02:05 - have the number 36 to find out prime
02:08 - factorization we try to divide a number
02:11 - by smallest possible number other than
02:14 - one so the smallest possible number
02:17 - other than one that can divide 36 would
02:19 - be
02:20 - two so we write down the divisor here
02:24 - along the vertical line and we write the
02:26 - quotient along this horizontal line so
02:28 - if we divide 36 by 2 the quotient is 18
02:32 - and anytime we pick up the divisor and
02:35 - the quotient multiplying them gives us
02:38 - the actual number so 36 is 2 into 18 now
02:42 - once again what is the smallest number
02:43 - that can divide 18 can we reduce 18 any
02:46 - further yes we can 2 can divide 18 and
02:50 - that would be the quotient would be 9
02:53 - and once again if we pick up all the
02:54 - divisors and this last number along the
02:57 - horizontal line and then multiplying
02:59 - them all gives
03:01 - us the actual number so now 36 can be
03:04 - written as 2 into 2 into 9 this is one
03:06 - possible factorization but it is still
03:08 - not the prime factorization uh because
03:11 - we can reduce N9 further now two cannot
03:14 - divide 9 but three can divide 9 so the
03:17 - smallest number that can divide 9 is
03:20 - three and that would be the quotient
03:22 - would be three now the smallest number
03:26 - that can divide three would be three
03:29 - again and we get 1 in the quotient so 36
03:32 - is nothing but 2 into 2 into 3 into 3
03:35 - into 1 and we stop as soon as soon as we
03:39 - get one because when one cannot be
03:41 - reduced any further now one is not a
03:43 - prime number the smallest prime number
03:44 - is two so in prime factorization we do
03:46 - not keep one so the prime
03:50 - factorization uh would be 36 is 2 into 2
03:54 - into 3 into 3 and if we write this in
03:57 - the form of exponents then this is 2 to
03:59 - the^
04:01 - 2 multiplied by 3 to ^
04:04 - 2 and let us now write code for this so
04:08 - I will write a function prime
04:12 - factorization that will take an integer
04:15 - n as input and print the prime
04:18 - factorization of n in exponents form and
04:23 - to find out prime factorization in
04:25 - exponents form all we need to know is
04:28 - what all are the prime factors and what
04:31 - are their frequencies like how many
04:33 - times they occur like in this example
04:36 - two occurs twice and three occurs twice
04:39 - so our logic would be something like we
04:41 - will run a loop starting two all the way
04:45 - till n and for each I we will keep on
04:50 - dividing n by I as long as we can so we
04:54 - will say that if I divides n or in other
04:57 - words n modul i is zero
05:00 - as long as we can divide n by I so while
05:04 - n modul i is zero we will keep reducing
05:08 - n to n upon I so we are kind of dividing
05:13 - n by I as long as we can now we also
05:16 - need to know the frequency of I in the
05:20 - prime factorization so we also need to
05:22 - count how many times we are able to
05:24 - divide so I will outside this y Loop
05:26 - I'll initialize a variable count and
05:29 - inside the loop I'll increment count
05:32 - so once we come out of this Loop we know
05:35 - that I is a factor and count is its
05:38 - frequency so after coming out of the
05:40 - while loop I'll print something like I
05:43 - raised to the power count and this is
05:46 - one component in the exponential
05:49 - representation of prime factorization
05:51 - let's for the sake of Simplicity say
05:53 - that we just print the pair I and
05:57 - count so we get to know that I occurs
06:00 - count number of
06:01 - times now one obvious question here
06:04 - would be how can we be sure that we will
06:07 - get only prime factors here we are
06:09 - running the loop for all values of I
06:11 - till n so we may also get a nonprime
06:14 - value of the factor well no we will
06:18 - never get a non-prime value because a
06:20 - non-prime number in this algorithm will
06:23 - never pass this particular condition it
06:25 - will never divide n and we can prove
06:28 - this using contradiction
06:30 - let's say 6 divides n now 6 is a non
06:34 - non-prime number it's a composite number
06:36 - it has two factors two prime factors 2
06:38 - and three now if at any point 6 can
06:41 - divide n 2 and three can also divide n
06:46 - but before I would be 6 we would already
06:49 - have divided n by I equal 2 and I is
06:52 - equal to
06:53 - 3 in this loop as many times as possible
06:57 - so we definitely can't divide n by two
07:00 - anymore or three anymore so this is a
07:02 - contradiction so only prime numbers will
07:05 - be able to divide n in our
07:07 - approach take some time and think
07:09 - through it it should be easy to get now
07:12 - what will be the time complexity here
07:14 - what will be the running time of the
07:16 - algorithm in the worst case when n is
07:18 - prime the fall Loop will run almost n
07:22 - times and the while loop will run only
07:25 - once so clearly the time taken will be
07:27 - proportional to n in the worst case
07:29 - and when we analyze Al algorithms it is
07:32 - always good to analyze it in the worst
07:34 - case scenario so the time complexity is
07:37 - Big O of n in the worst case can we do
07:40 - something better here well let's see let
07:43 - us simulate this algorithm using an
07:46 - example let's say n is equal to 44 and
07:50 - we want to find out prime factorization
07:51 - of 44 so I will draw one more column
07:54 - here I okay so the for Loop starts with
07:56 - i is equal to 2 and we go on to check
07:59 - you using this if condition if 2 divides
08:01 - 44 yes it does so we initialize a
08:04 - variable count so let's create a column
08:07 - for count so count is zero at this stage
08:09 - and in this while loop we keep on
08:11 - dividing n by two as long as possible so
08:16 - I is still 2 N becomes 22 count becomes
08:19 - 1 we can still divide 22 so I is 2 N is
08:22 - 11 count becomes two we cannot divide n
08:26 - by two anymore so we exit and we come to
08:28 - this print statement so we print let's
08:30 - say 2 comma 2 where 2 is the factor and
08:32 - 2 is its frequency let's say this is
08:35 - substitute for printing 2 to the^
08:38 - 2 now I becomes three can 3 divide 11 no
08:42 - we do not go inside the if statement
08:44 - count is not initialized and I becomes
08:47 - four and we go on like this because 11
08:51 - is not divided until we reach I equal
08:56 - 11 okay so now 11 divides 11 11 and N
09:00 - becomes 1 count becomes 1 and now 11
09:02 - cannot divide 1 so we print 11 and 1 the
09:06 - pair for factor and its frequency and
09:09 - after this state we exit the for Loop
09:13 - because I now becomes greater than
09:15 - n now there is one observation that can
09:18 - help us improve our algorithm once n is
09:21 - reduced to a prime number we know that
09:24 - the only Factor possible now is the
09:26 - number itself for example once n is
09:29 - reduced to 11 is in this particular case
09:32 - and we know that 11 is prime then we
09:34 - know that the only Factor left is 11 and
09:37 - we can stop evaluating afterwards now
09:40 - how do we know that n is reduced to a
09:42 - prime number we have talked about this
09:45 - earlier in our previous lessons as well
09:48 - if a number does not have any Factor
09:50 - till square root of n then it is a prime
09:53 - number so once I becomes greater than
09:56 - square root of n like in this particular
09:58 - simulation and once we reach I is equal
10:00 - to
10:01 - 4 we know that I is now greater than
10:04 - square root of N and it is still not
10:06 - dividing n so we have checked till
10:08 - square root of n there is no factor and
10:11 - the number left out is a prime number so
10:13 - we can exit at this particular
10:17 - stage so I will modify the pseudo code
10:20 - here now I'll only run my Loop till
10:23 - square root of
10:24 - N and we get out of this for Loop once I
10:29 - exceeds square root of n because at this
10:31 - stage we know that n is now a prime
10:33 - number now once we come out of this for
10:36 - Loop n is either one or N is a prime
10:40 - number so if n is not equal to one which
10:43 - will be a special case then we know that
10:45 - N is a prime number so we print n which
10:48 - is the prime factor and its frequency
10:50 - would be
10:51 - one so now this 11 comma 1 is printed
10:55 - after we exit the for Loop in our new
10:57 - algorithm okay writing this pairs is
11:00 - substitute for writing something like 2
11:02 - ^ 2 into 11 ^ 1 you can modify the
11:06 - algorithm to print something like this I
11:09 - leave that as an exercise for you now
11:11 - the time complexity in this particular
11:13 - case here we are running the loop the
11:15 - for Loop in the worst case close to
11:18 - square root of n times and while loop
11:21 - will not matter in the worst case so in
11:23 - the worst case the time taken is
11:24 - proportional to square root of n so this
11:26 - is Big O of square root of n in terms of
11:29 - time complexity so this was prime
11:31 - factorization there are other
11:33 - interesting algorithms to find out prime
11:35 - factorization it is a very famous
11:37 - problem in number Theory I encourage you
11:39 - uh to study all those we will see more
11:41 - of these problems on number theory in
11:43 - the coming lessons so thanks for
11:45 - watching