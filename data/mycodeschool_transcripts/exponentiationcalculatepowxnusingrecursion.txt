00:00 - In this lesson, we will try to solve another
problem using recursion and the problem is
00:04 - that given two positive numbers - X and N,
we want to calculate x to the power n and
00:12 - x to the power n is nothing but n times x
multiplied to itself.
00:18 - So, there are n Xs, lets say in this expression
and to calculate x to the power n, we perform,
00:27 - if we simply keep on multiplying with x all
the time, exactly n -1 multiplications.
00:34 - And if we want to write a program to calculate
x to the power n , the simplest thing that
00:39 - comes to our mind is that we can start with
a variable, say we want to start with a variable
00:45 - result, initialize it to 1 and then we can
simply run a loop from 1 to n and keep multiplying
00:52 - result with x.
00:53 - So, result becomes result*x.
00:57 - In this case you are performing n multiplications
because you are initiating the variable to
01:03 - 1 instead of x, but it also takes care of
the condition when n is equal to 0 and as
01:08 - we know x to the power 0 or any number to
the power 0 is 1.
01:15 - And as we can see for an input n, we are running
the loop, we are running just one loop n times,
01:22 - so it should be pretty evident that the time
taken here in this particular case would be
01:26 - proportional to n or we can also say that
the time complexity of this algorithm would
01:33 - be O(n).
01:35 - Now, Albert and Pinto and two students of
MyCodeSchool and they have been given the
01:41 - assignment to calculate x to the power n using
recursion.
01:45 - So, once again Albert and Pinto come up with
two different solutions and let us see what
01:51 - their solutions are.
01:53 - To solve a problem using recursion, we first
need to define a recurrence relation or a
01:58 - recursive definition.
01:59 - So, Albert says that hey, x to the power n
can be written as x*x^(n-1) and this is true
02:07 - for all n greater than 0.
02:10 - For n = 0, x to the power 0 is simply equal
to 1.
02:14 - So, x to the power n being equal to x into
x to the power n-1 is a recurrence relation
02:21 - because x^n is expressed in the form of x^(n-1)
and this second condition is our base condition.
02:29 - So, let us see what Albert's implementation
is.
02:33 - Albert writes a function Pow that takes two
arguments - x and n and we are only writing
02:40 - pseudo-code here and the function goes like
- if n is 0, then simply return 1, else return
02:51 - x into and we make a recursive call here to
calculate x to the power n minus one.
02:57 - So, we pass arguments x and n-1.
03:02 - And this is Albert's implementation.
03:05 - And this will work fine for all n greater
than or equal to 0.
03:09 - So, using this algorithm, if you want to calculate
say x to the power 8, we make a recursive
03:17 - call first to calculate x^7, and then x^7
goes on to make a recursive call to calculate
03:23 - x^6.
03:25 - And we keep on making recursive calls till
X^0 and X^0 simply returns 1 and at this stage
03:34 - the recursion terminates.
03:37 - Now, let us see Pinto's solution.
03:40 - And Pinto is a little smarter.
03:43 - He says that x^n can be written as x^(n/2)*
x^(n/2) if n is an even number.
03:55 - And X^n is equal to x*x^(n-1) if n is odd.
04:01 - And X^n is equal to 1 for the simple case
or the base case of n = 0.
04:08 - So, we kind of have 2 different recurrence
relations for two different cases.
04:15 - And let us see how the program looks like.
04:17 - So, Pinto also writes a method Pow that takes
two arguments x and n.
04:24 - And his program also goes like if n is zero,
then return 1, else if n is even and we can
04:33 - also say , if n modulo 2 is 0, then first
calculate x^(n/2) and then store it in a variable.
04:43 - So let's say we have a variable y in which
we store x^(n/2) by making a recursive call
04:52 - to calculate x^(n/2).
04:53 - So, this is a recursive call.
04:55 - And we return y*y.
04:59 - Now, instead of writing these 2 statements
here, we could also have simply written that
05:06 - return pow(x,n/2)* pow(x,n/2) but that would
have been very bad because in that case, we
05:14 - would make two different calls to calculate
the same value which will be unnecessary redundancy.
05:19 - So, if we would want to calculate x^8, we
would make 2 calls to calculate x^4 and then
05:25 - multiply them.
05:27 - So, we make just one call and store it and
then simply multiply it to calculate the square.
05:34 - And finally,. if n is odd which will be our
final condition, then we simply return x*x^(n-1)
05:46 - and this also works fine for all n >= 0.
05:49 - So, now when we want to calculate x^8, then
we make a call to x^4 , so instead of reducing
06:00 - this to x^7, we reduce the problem to calculate
x^4 and further x^4 recursively makes a call
06:07 - to calculate x^2 and then we go on like x^1
and x^0.
06:14 - So, while Albert's program goes kind of nine
steps here in this structure called the recursion
06:23 - tree, Pinto's program only goes 5 steps in
this recursion tree and if we analyze the
06:32 - recurrence relation of these 2 algorithms,
then Albert's algorithm , the time taken by
06:40 - it is proportional to n or it is bi-oh of
n or order of n in terms of time complexity
06:48 - and Pinto's program is order of log of n in
terms of time complexity.
06:55 - How Albert's program is order of n algorithm
and how Pinto's program is order of log n
07:00 - algorithm is something that we will explain
in another lesson, we will try to deduce it
07:06 - mathematically, but as we can see that Pinto's
program which is order of log n is lot more
07:14 - efficient than Albert's program.
07:16 - Now couple of things here.
07:17 - When we are trying to calculate exponents,
then in a real program, an integer variable
07:25 - which is stored in 32 bits is able to store
decimal numbers of only 9-10 digits while
07:34 - x^n can be really really large.
07:36 - So, lets for the sake of algorithmic understanding,
assume that we have a machine where all this
07:42 - storage and calculations, arithmetical calculations
is not a problem.
07:47 - So, this was exponentiation.
07:49 - In another lesson, we will try to solve a
very similar problem, modular exponentiation
07:54 - and we will also mathematically deduce the
time complexity of these recursive algorithms.
08:00 - So, Thanks for watching !!