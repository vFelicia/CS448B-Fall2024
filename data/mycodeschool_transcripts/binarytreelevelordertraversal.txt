00:00 - In this lesson, we are going to write code
for level order traversal of a binary tree.
00:04 - As we had discussed in our previous lesson,
in level order traversal, we visit all nodes
00:09 - at a particular depth or level before visiting
the nodes at next deeper level.
00:16 - For this binary tree that I am showing here,
if I have to traverse the tree and print the
00:21 - data in nodes in level order, then this is
how we will go.
00:24 - We will start at level 0 and print F and now
we are done with level-0, so we can go to
00:30 - level 1 and we can visit the nodes at level
1 from left to right.
00:36 - From F we will go to D and from D we will
go to J. Now level 1 is done, so we can go
00:41 - to level 2.
00:43 - So, we will go like B, E, G and then K and
now we can go to next level.
00:50 - A, C, I and finally we will be done at H.
his is the order in which we should visit
00:57 - the nodes, but the question is, how can we
visit the nodes in this order in a program.
01:02 - Like linked list, we can't just have one pointer
and keep moving it.
01:05 - If I'll start with a pointer at root, lets
say I have a pointer named current to point
01:11 - to the current node that I am visiting, then
its possible for me to go from F to D using
01:17 - this pointer because there is a link.
01:19 - So, I can go left to D. But from D, I cannot
go to J because there is no link from D to
01:25 - J. The only way we can go to J is from F and
once we have moved the pointer to D, we can't
01:31 - even go back to F because there is no backward
link from D to F. So, what can we do to traverse
01:38 - the nodes in level order.
01:40 - Clearly, we cant go with just one pointer.
01:43 - What we can do is, as we visit a node, we
can reference or address of all its children
01:48 - in a queue, so we can visit them later.
01:51 - A node in the queue can be called discovered
node whose address is known to us, but we
01:56 - have not visited it yet.
01:58 - Initially, we can start with address of root
node in the queue to mean that initially this
02:03 - is the only discovered node.
02:06 - Lets say for this example tree, address of
the root node is 400.
02:11 - And I'll assume some random addresses for
other nodes as well.
02:15 - I will mark a discovered node in yellow.
02:17 - Ok, now initially I am enqueuing the root
node and by storing a node in the queue, I'll
02:23 - mean storing the address of the node in the
queue.
02:25 - So, initially, we are starting with one discovered
node.
02:29 - Now as long as the queue has some discovered
node, at least one discovered node i.e as
02:34 - long as the queue is not empty, we can take
out a node from the front, visit it and then
02:40 - enqueue its children.
02:43 - Visiting a node for us is printing the value
in that node, so I'll write F here.
02:47 - And now, I'll enqueue the children of this
root node.
02:52 - First I'll enqueue the left child and then
the right child.
02:56 - I'll mark visited node in another color.
02:59 - Ok, now we have one visited node and 2 discovered
nodes.
03:03 - And now once again, we can take out the node
at front of the queue, visit it and enqueue
03:08 - its children.
03:09 - By using a queue, we are doing 2 things here.
03:12 - First of all, as we are moving from a node,
we are not loosing reference to its children
03:17 - because we are storing the references and
then because queue is a first in first out
03:22 - structure, so a node that is discovered first,
that is inserted first will be visited first.
03:29 - So, we will get this order that we are desiring.
03:32 - Give this some thought and its not very difficult
to see.
03:35 - Ok, so now we can dequeue and visit this node
at address 200.
03:41 - And once again, before I move on from this
node, I need to enqueue its children.
03:45 - So, now at this stage we have 2 visited nodes,
3 discovered nodes and 6 undiscovered nodes.
03:54 - And now we can take out the next node from
front of queue.
03:57 - We'll visit it and enqueue its children.
04:01 - If we will go on like this, all the nodes
will be visited in the order that we are desiring.
04:07 - At this stage, we can dequeue node at 120,
visit it and enqueue its children.
04:13 - So, we will go on like this until all the
nodes are visited and the queue is empty.
04:19 - After B, we will have E here.
04:21 - Nothing will go into the queue this time.
04:24 - Next we will have G here and the address of
I will go into the queue.
04:28 - Now, K will be visited.
04:31 - Now at this stage, we have reference to 3
Nodes in the queue.
04:34 - Now, we will visit this node at 320 with value
A. Then we have C and now we will print I
04:44 - and the node with value H, the node with data
H will go into the queue.
04:49 - Finally, we will visit this node and now we
are done with all the nodes, the queue is
04:54 - empty.
04:56 - Once the queue is empty, we are done with
our traversal.
04:59 - So, this is the algorithm for level order
traversal of a binary tree.
05:04 - As you saw, in this approach, at any time,
we are keeping a bunch of addressees in the
05:09 - memory, in the queue instead of using just
one pointer to move around.
05:13 - So, of course we are using a lot of extra
memory and I'll talk about the space complexity
05:19 - of this algorithm in some time.
05:21 - I hope you got the core logic right.
05:23 - Lets now write code for this algorithm.
05:26 - I am going to write C++ here.
05:28 - This is how I am defining node for my binary
tree.
05:31 - I have a structure here with 3 fields, one
to store data and the data-type is character
05:36 - this time, because in the example tree that
we were showing earlier, data type was character
05:41 - and we have 2 more fields that are pointers
to node - one to store the address of left
05:46 - child and another to store the address of
right child.
05:48 - Now, what I want to do here is I want to write
a function named LevelOrder that should take
05:54 - address of the root node as argument and print
the data in the nodes in level order.
06:00 - Now, to test this function, I'll have to write
a lot of code to create and insert nodes in
06:05 - a binary tree.
06:06 - I'll have to write some more functions.
06:08 - I'll skip writing all that code.
06:10 - You can pick the code for creation and insertion
from previous lessons.
06:15 - All I'll write is this function LevelOrder.
06:18 - Now, in this function here, I'll first take
care of one corner case.
06:23 - If the tree is empty i.e if root is NULL,
we can simply return, else if the tree is
06:30 - not empty, we need to create a queue.
06:33 - I'm not going to write my own implementation
of queue here.
06:36 - In C++, we can use the queue in standard template
library and to use it, first we will have
06:43 - to write a statement like #include
here.
06:48 - And now, I can create a queue of any type.
06:50 - In this function, I'll create a queue of pointer
to node with a statement like this.
06:57 - Now, as we had discussed earlier, initially,
we start with one discovered node in the queue.
07:04 - The only node known to us initially is the
root node.
07:07 - With this statement, queue.push(root), I have
inserted the address of root node in the queue.
07:13 - And now, I will run this while loop for which
the condition is that queue should not be
07:18 - empty and what I really mean here is that
while there is at least one discovered node,
07:25 - we should go inside the loop and inside the
loop, we should take out a node from the front.
07:31 - This function front returns the element at
front of the queue and because the data-type
07:35 - is pointer to node, I'm collecting the return
of this function in this pointer to node named
07:41 - current.
07:42 - Now, I can visit this node being pointed by
current and by visiting, we mean reading the
07:47 - data in that node.
07:48 - I'll simple print the data.
07:50 - And now, we want to push the addresses of
children of this node into the queue.
07:56 - So, I'll say that if the left child is not
NULL, insert it into the queue and similarly,
08:03 - if right child is not NULL, push it into the
queue or rather push its address into the
08:08 - queue.
08:09 - And I'll write one more statement to remove
the element from front of the queue.
08:13 - With call to front, the element is not removed
from the queue.
08:17 - With this call pop, we are removing the element.
08:20 - Ok, so this is implementation of level order
traversal in C++.
08:26 - You can check the description of this video
for link to source code and there you can
08:31 - also find all the extra code to test this
function.
08:34 - Lets now talk about time and space complexity
of level order traversal.
08:39 - If there are n Nodes in the tree and in this
algorithm, visit to a node is reading the
08:45 - data in that node and inserting its children
in the queue, then a visit to a node will
08:51 - take constant time and each node will be visited
exactly once.
08:55 - So, time taken will be proportional to the
number of nodes.
08:59 - Or in other words, we can say that the time
complexity is big-oh of n.
09:05 - For all cases, irrespective of the shape of
the tree, time complexity of level order traversal
09:11 - will be big-oh of n.
09:13 - Now lets talk about space complexity.
09:16 - Space complexity, as we know is the measure
of rate of growth of extra memory used with
09:22 - input size.
09:24 - We are not using constant amount of extra
memory in this algorithm.
09:27 - We have this queue that will grow and shrink
while executing this algorithm.
09:33 - Assuming that the queue is dynamic, maximum
amount of extra memory used will depend upon
09:39 - maximum number of elements in the queue at
any time.
09:42 - We can have couple of cases.
09:43 - In some cases, extra memory used will be lesser
and in some cases, extra memory used will
09:49 - be greater.
09:50 - For a tree like this where each node has only
one child, we will have maximum one element
09:56 - in the queue at any time.
09:57 - During each visit, one node will be taken
out from the queue and one node will be inserted.
10:03 - So, the amount of extra memory taken will
not depend upon the number of nodes.
10:08 - Space complexity will be big-oh of 1.
10:11 - But for a tree like this, the amount of extra
memory used will depend upon number of nodes
10:15 - in the tree.
10:17 - This is a perfect binary tree.
10:18 - All the levels are full.
10:20 - If you can see, as the algorithm will execute,
at some point for each level, all the nodes
10:25 - in that level will be in the queue.
10:28 - In a perfect binary tree, we will have n/2
nodes at the deepest level.
10:32 - So, maximum number of nodes in the queue is
going to be at least n/2.
10:37 - So, basically extra memory used is proportional
to n - the number of nodes.
10:42 - So, space complexity will be big-oh of n for
this case.
10:46 - I'm not going to prove it, but for average
case, space complexity will be O(n).
10:52 - So, for both worst and average cases, we will
be big-oh of n in terms of space complexity
10:58 - and when we are saying best, average and worst
cases here, its only going by space complexity.
11:03 - Time complexity will be big-oh of n for all
cases.
11:06 - So, this is time and space complexity analysis
of level order traversal.
11:11 - I'll stop here now.
11:13 - In next lesson, we will discuss depth first
traversal algorithms - Preorder, Inorder and
11:18 - PostOrder.
11:20 - This is it for this lesson.
11:21 - Thanks for watching !