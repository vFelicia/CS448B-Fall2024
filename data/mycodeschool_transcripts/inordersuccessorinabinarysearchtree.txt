00:00 - In this lesson, we're going to solve
another interesting problem on binary
00:03 - search tree
00:04 - and the problem is, given a node in a
binary search tree
00:08 - we need to find its inorder successor
i.e. the node that would come
00:13 - immediately after the given node in
inorder traversal of the binary search
00:17 - tree.
00:17 - As we know, in inorder traversal of a
binary tree
00:21 - we first visit the left subtree then
that root
00:24 - and then the right subtree. Left and
right subtrees are visited recursively
00:29 - in same manner. So for each node, we
first visit its left subtree
00:33 - then the node itself and then its right
subtree.
00:36 - We have already thiscussed inorder
traversal in detail in a previous lesson
00:41 - in the series.
00:41 - You can check the description of the
video of a link to it.
00:45 - Inorder implementation will basically
be a recursive function
00:49 - something like what I'am showing in right
here. There are two recursive calls in
00:54 - this function.
00:54 - One to visit the left subtree had
another to visit the right subtree.
00:59 - Time complexity of inorder traversal is
O(N)
01:03 - where n is number of nodes in the tree.
01:06 - We visit each not exactly once. So
01:09 - time taken is proportional to a
number of nodes in the tree.
01:13 - I have drawn a binary search tree of
integers here.
01:16 - Binary search tree, as we know is a
binary tree
01:19 - in which for each node value of nodes and
left his lesser
01:23 - and value of nodes in right is greater.
Let's quickly see what will be
01:27 - the inorder traversal for this binary
search tree. We will start at root of the
01:31 - tree.
01:32 - Now for any node, we first need to visit
01:35 - all nodes in its left and then only we
can visit that node
01:39 - so we'll have to go left. Basically,
01:42 - we will make a recursive calls to
go to left child of this node.
01:45 - For this guy once again we have
something left,
01:49 - so we will make another recursive call and
go to its left child.
01:53 - Now we are at this node with value 8
01:56 - and they will have to go left one more
time
01:59 - and now for this node with value 6 which
is a leaf node
02:03 - we have nothing left. So they can
simply say that it's left subtree is
02:07 - done
02:08 - and hence we can visit the guy. Visiting
for me
02:12 - is reading the data in that node. I'll
write to data here
02:16 - and now for this node, there is nothing in right
as well
02:20 - so we can simply say that it's right is also
done and now we're completely done for
02:25 - this guy.
02:25 - So recursive call corresponding to
this node
02:29 - will finish and we will go back to
02:32 - call corresponding to its parent.
02:36 - If we will come back to a node from its
left child
02:40 - then it would be unvisited because
we can't visit a node until its left is
02:44 - done.
02:45 - So when you coming back to 8, 8 is
unvisited
02:48 - so we can simply visit this node that is
02:52 - read the data in this node. When I'll 
visit a node, I'll
02:55 - paint it in yellow and now there's
nothing in right of this node
02:59 - so we can simply say that right is done.
Now we are done with this nodes, so
03:03 - call corresponding to this node will
finish and we will go back
03:08 - to its parent. Once again we're
coming back to the parent
03:13 - from the left, so the parent that
is this node with value 10 is
03:17 - unvisited.
03:18 - If we would come back to a node from
right then it would already be visited,
03:23 - so I'm visiting 10 and now we can go
to right of 10.
03:27 - So far we have visited 3 nodes.
03:30 - We first visited node with value 6 and
then be visited node to value
03:35 - 8, so 8 is successor of 6
03:38 - and then 10 is successor of 8.
03:42 - Now let's see what will be the successor
of 10. For nodes with values
03:47 - 6 and 8 there was nothing in right, so
03:50 - we were unwinding and going to the 
parent but for a node if there would be
03:55 - something in right that is if there
would be a right subtree
03:58 - and then its successor would definitely
be in its right subtree
04:02 - because after visiting that node
we will go right. Now at the stage, we
04:07 - are at this node with value 12. For this guy
04:10 - we will first go left and now we are
at node with value 11 which is
04:15 - a leaf node. There's nothing left so we
can simply say that left is done
04:20 - and we can print the data that is visit
this node so
04:24 - inorder successor of 10 is 11. Now
for node with value 11, there is nothing
04:29 - in right.
04:29 - So we will go back to this parent and
now we can visit this guy.
04:34 - So after 11, we have 12. There's nothing
in right of 12
04:39 - so called for this guy will finish and we
will go to its parent.
04:43 - Now we're coming back to 10 again but
this time from
04:46 - right so this guy is already visited. So
04:51 - we need not do anything. We can simply go to
its parent and now we are at this node
04:55 - with
04:56 - value 15. We are coming from left. This
guy is
04:59 - unvisited so we can visit it and now
we can go to its right.
05:07 - We will go on like this.Successor of 15
would be
05:12 - 16 and after 16
05:15 - we will print 17 and then
05:19 - after 17 we will print 20
05:22 - then 25 and the last element would be
05:27 - 27. So this is an inorder traversal of this
binary search tree.
05:32 - Noticed that we have printed the
integers in sorted order.
05:35 - When we perform inorder traversal on
a binary search tree
05:40 - then elements are visited in sorted
order. Now the problem is that we want to
05:45 - solve this given
05:46 - a value in the tree, we want to find
its
05:49 - inorder successor. In a binary search
tree,
05:52 - it would be the next higher value in the
tree
05:55 - but what's the big deal here.
Can't we just perform inorder traversal
06:00 - and while performing the traversal
figure out the successor.
06:03 - Well we can do so but it will be
expensive.
06:07 - Running time of inorder is 
O(N)
06:10 - and we may want to do better. Finding
next and previous element in some data
06:15 - could be a frequently performed
operation and good thing about binary
06:20 - search tree is that frequently performed
operations like
06:23 - insertion and deletion and search happen
in
06:26 - O(H) where H is height of the tree. So it
would be good if we are able to find a
06:32 - successor
06:33 - and predecessor in O(H). We always
try to keep
06:37 - a tree balanced to minimize its height.
Height of
06:41 - up balanced binary tree is log
06:44 - N to base 2 and O(log N)
06:48 - running time for any operation is
almost
06:51 - the best running time that we can have.
So can we find inorder successor in
06:56 - O(H).
06:56 - I have redrawn example tree here.
Let's see what we can to do in
07:01 - various cases.
07:02 - What node would we visit after this
node with value 10.
07:06 - Can we deduced this logically. Well, if
you remember the simulation of inorder
07:10 - traversal that we had done earlier
07:12 - and then if we have already visited this
node
07:16 - then we are done with its left subtree and
we have
07:19 - read the data in this node and we need to
go right.
07:23 - Now in the right subtree, we will have
to go left
07:27 - as long as it's possible to go and if we
can't go left anymore
07:32 - like here, there's nothing left of this
node with value 11
07:36 - then this is the node that I am visiting next.
So for a node if there
07:41 - is rightsubtree then inorder successor
would be to left most node
07:46 - in its right subtree. In a BST it would be
07:50 - the node with minimum value in its right
subtree. I would say this is case one.
07:55 - In this case, all we need to do is we
need to go as left as possible in right
08:01 - subtree.
08:01 - In a BST it will also mean finding the
minimum in right subtree
08:06 - left most node will also be the minimum
in the subtree.
08:10 - Now this is one case our node here has
right subtree.
08:14 - What would be the successor if there
would be no right subtree.
08:17 - What node would we visit after this
node with
08:21 - value 8. This guy does not have right
subtree.
08:24 - If we have already visited this guy,
then we have already visited its left
08:28 - and this node itself and there is
nothing in right, so we can see that
08:33 - right is also visited
08:34 - but we have not found a successor yet.
Now where do we go from here.
08:39 - Well, if you remember the simulation that
we had done
08:42 - earlier. We need to go to the parent of
this node
08:45 - and if we are going to the parent from
left
08:49 - which is the case here then the
parent would be unvisited.
08:52 - For this node with value 10, we just
finished its left subtree and we're coming
08:58 - back.
08:58 - So now we can visit to node. So this
is my successor.
09:02 - Let's now pick another node with no
right subtree.
09:06 - What would be inorder successor of this
node that value 12.
09:10 - What node would be visit next. Now here,
once again
09:14 - we donot have a right subtree for this
node so
09:18 - we must go back to its parent and see
if it's
09:21 - unvisited. But if we're going to
the parent from
09:24 - right, if the node that we just visited is
the right child
09:29 - which is the case here, then the 
parent would already be visited
09:33 - because we are coming back after
visiting its right subtree.
09:37 - This node must have been visited before
going right.
09:40 - So what should we do. Now the recursion
will
09:43 - rollback further and we need to go to
parent of 10
09:47 - and now we're going to 15 from left. So
this guy is
09:51 - unvisited. So we can visit this node
and this is my successor.
09:56 - If the node does not have the right
subtree, we need to go to the nearest
10:00 - ancestor for which given node would be
10:04 - in its left subtree. Here for 12
10:07 - the first went to 10 but 12 is in right
subtree of 10
10:11 - so we went the next ancestor 15
10:14 - and 12 is in left of 15, so
10:17 - this is the nearest ancestor for a
which 12
10:20 - is in left and hence this is my inorder
successor.
10:24 - This algorithm works fine but there is an
issue.
10:27 - how do we go from a node to its parent.
10:30 - Well, we can design a tree such that node
can have
10:35 - reference to its parent. So far in most
lessons, we have defined
10:39 - node as a structure with 3 fields
something like this.
10:44 - This is how we would define node in C or
C++.
10:48 - We have one field to store data and we
have two pointers to node
10:52 - to store reference or addresses
10:55 - of left and right children. Often it
makes a lot of sense to have
11:00 - one more feed to store the address of
11:03 - parent. We can design a tree like this
and then they will not have
11:06 - problem walking the tree up using parent
link.
11:10 - We can easily go to the ancestors but
what if there is no link to parent.
11:15 - In this case what we can do is we can
start at root and
11:19 - walk the tree from root to the given
node.
11:23 - In a BST this is really easy. For 12
we will start at root.
11:28 - 12 is lesser than value in root so we 
need to go left
11:32 - and now we are 10. Now 12 is greater
than 10, so we need to go right
11:37 - and now we are 12. If we will walk the
tree
11:42 - from root to the given node. We will go through
all the ancestors of two given node.
11:46 - Inorder successor would be the deepest
node or deepest ancestors in this path
11:52 - for which given node would be in left
subtree.
11:56 - 12 has only two ancestors. We have 10
12:00 - but 12 is in right of 10 and then the
15 and 12 is in left of 15
12:05 - so 15 as my successor. Now let's use this
technique to find successor of
12:11 - 6. We will first walk down from root to
this node.
12:15 - 6 is in left for all the ancestors but the
deepest ancestor for which 6 in left
12:21 - is this node with value 8. So this is my
successor.
12:25 - Remember we need to look at ancestors
12:30 - only if the is no right subtree. For 6
that is no right subtree.
12:34 - Okay so algorithm looks good. Let's now
write code for this.
12:39 - In my C++ code here, I am going
to write a function named
12:42 - Getsuccessor that will take address of
root
12:46 - node and address of another node for
which we need to find a successor
12:50 - and this function will return address
12:54 - of the successor node. We could
design this function differently.
12:58 - Instead of taking pointer to the node
for which we want to find a successor as
13:03 - argument, we could
13:04 - just take that data as argument and
for this data
13:08 - for this element we can find a successor
node and
13:12 - return its address and that's why the
return type here is
13:16 - struct node* because we will be
13:19 - returning address in a pointer or what
we can also do is, we can return
13:24 - the element itself the successor element
itself.
13:28 - We can implement with to any of these
signatures. Let's implement this one.
13:33 - We will pass the data in current node
and we will return back to address of
13:38 - the successor.
13:39 - Now the first thing that we need to do
is, we need to search the node with this
13:42 - data.
13:43 - I'm going to make call to a function
named Find
13:47 - that will take address of the root node
and the data and return me
13:51 - pointer to the node with this data. If
this function returns me null
13:55 - that is if the data not found in the
tree. We can simply
13:59 - return null else we have address of the
14:03 - current node in this pointer to node
that we have named current.
14:06 - Now in a BST this search operation will
cost us O(H)
14:10 - where H is height of the tree.
14:14 - Search in a BST is not very expensive.
14:17 - We could have avoided this search if
we would have passed
14:21 - address of the current node instead of
passing the data
14:24 - as to second argument but let's go
with this.
14:28 - Let's now find the successor of this node.
If this node has right subtree
14:33 - that is if right subtree is not null, we
need to go to the left
14:37 - most node in the right subtree. I have
declared a temporary pointer to node here
14:42 - and initially, I have set it to
current->right and with this
14:46 - while loop I'll you go to the leftmost node.
14:50 - While there is something in the left
keep going
14:53 - and finally when I'll come out of this
loop, I'll have address of left most node in
14:57 - the right subtree and I can return this
address.
15:00 - This particular node will also be the node
with minimum value in right subtree.
15:05 - I'll move this code in another function. I
have written this function name
15:10 - FindMin
15:11 - that will return node with minimum
value in a tree or subtree.
15:15 - In Getsuccessor function, I'll simply
say return
15:19 - FindMin and I'll pass the address
15:23 - of right child of current node.
15:26 - So basically, I'm passing the right
subtree here.
15:30 - Okay now let's talk about case 2.
15:33 - If they're is no right subtree, what we need
to do is we need
15:37 - to walked the tree from root till
current
15:40 - node and we need to find the deepest
ancestor for which
15:44 - current node will be in its left
subtree. What I'm going to do here is, I'm
15:49 - going to declare
15:50 - a pointer to node named successor
15:53 - and initially I'll set it as null
15:57 - and I'll have another pointer to node
named ancestor
16:01 - and initially as set this as root, and
with this while loop we will walked a tree
16:06 - till we have not reached the current
node. To walk the tree, we will use the
16:11 - property of binary search tree that for
16:13 - each node value of nodes in left is lesser
and value of nodes right is greater.
16:17 - If data in current node is less than
the data in ancestor
16:21 - then first of all this ancestor may be
my inorder successor
16:25 - because the current node is in its left.
So
16:29 - what we can do is, we can set the guy as
successor and we can go left.
16:34 - While traversing if we will find a
deeper node
16:37 - with this property that current node
will be in its left subtree
16:42 - then successor will be updated else
if the current node lies
16:46 - in right, we simply need to move right.
When
16:50 - will come out of this while loop, successor
will either been null
16:54 - or it will the address of some node. Not
all nodes in the tree will have a
16:58 - successor.
16:59 - Node with maximum value will not have a
successor.
17:02 - After coming out this while loop, we can
return the successor.
17:06 - So this is my get successor function and
I
17:09 - think this should work. You can find link
to complete source code and description
17:13 - of this video.
17:14 - Overall time complexity of this function
will be
17:17 - O(H) and this is what you wanted. We
wanted to find successor in O(H).
17:22 - Here we're already performing the
search in O(H).
17:26 - Finding minimum will also take 
O(H)
17:30 - and walking the tree from
17:33 - root to a node in BST will also take
O(H). So, overall this is
17:37 - O(H).
17:38 - If you have understood this code
this logic it then it should be very
17:41 - easy for you
17:42 - writing function to find inorder
17:46 - predecessor. I encourage you to write it.
I'll stop here. Incoming lessons, we
17:51 - will solve some more interesting
problems on binary trees and binary
17:54 - search trees.
17:55 - Thanks for watching.