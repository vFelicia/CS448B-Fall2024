00:00 - in our previous lesson we understood
some of the basics
00:03 - we understood what a computer program
is and what
00:06 - a computer programming languages
is. Basically we gave you insight
00:10 - into how things happen at lowest
level in computer architecture
00:14 - now in this lesson we're going to talk
a little bit more about architecture
00:18 - we will talk about computers memory how
programs get stored in computer's memory
00:23 - and how programs get
00:25 - executed from computers memory and then
we will
00:28 - briefly talk about what all it'll take
to learn a programming language like C
00:33 - let's start with a quick recap of what
we had discussed in our previous lesson
00:37 - a computer is a general purpose machine
that can perform
00:41 - any computational task for you. To
perform a task you need to give it
00:45 - a program which is nothing but set of
instructions to perform
00:49 - a task. the core part of the computer
that
00:52 - executes these instructions is called
central processing unit or CPU
00:58 - and CPU can execute instructions only in
what we call
01:01 - machine language which is binary
encoded as per some rules
01:06 - machine language is called low-level
programming language
01:09 - it's too cryptic to write and it varies
from one architecture to another
01:14 - but fortunately we can write our program
in what we call a high-level language
01:18 - like C
01:19 - and another program a utility program
named compiler
01:24 - would convert the source program
or what we also call the source code
01:28 - in high-level language to target machine
code
01:32 - or program in machine language
compilation is the process of creating
01:35 - an
01:36 - executable file. An executable file on
Windows machine will have extension
01:41 - exe. When you want to run a program
01:45 - even an installed program, an already
installed program
01:48 - you look for the executable file of that program
01:52 - a nice graphical
01:53 - icon in start menu or desktop, its
01:56 - only a shortcut to launch the executable
file of that program
02:00 - the storage or memory of a computer
is in multiple layers
02:03 - all the files in your computer are
typically stored
02:07 - in a hard disk drive. compiler itself
is a program so it will have an
02:11 - executable
02:12 - then you can have all kind of files. If a
program is there on your hard disk it
02:16 - does not mean that it is always running
02:18 - to run the program you double-click on
the executable file
02:22 - or a nice little icon that will be
shortcut to the executable file
02:26 - and now the program has to run. Now the
instructions in the program
02:30 - have to get executed. What happens
02:33 - is that when you run the program. Let's
say you ran
02:36 - app dot exe, the program or the set of
instructions
02:41 - is transferred to what we call random
access memory
02:44 - or RAM, the difference between RAM and
hard disk drive
02:48 - is that RAM is volatile memory
02:51 - everything in RAM is wiped off, is
cleared as soon as power is removed as
02:56 - soon as machine is turned off, but
anything in hard disk remain there even
03:01 - when machine is turned off
03:02 - There is difference between the
physical design of these two devices
03:06 - RAM is also called primary storage
and hard disk is called secondary storage
03:12 - in context of computers whenever we say
main memory
03:15 - are just memory we mean RAM, we
03:19 - mostly mean RAM. Now, how a program gets
executed
03:23 - is when instructions are loaded in RAM, they are fetched
03:27 - sequentially one at a time by the CPU
03:30 - CPU is the guy who has to execute
instructions. CPU can read from the RAM
03:34 - and
03:35 - and write back into the RAM. CPU has
some memory of its own
03:39 - but it's very less, good enough to store
information for execution of one
03:43 - instruction
03:44 - but it cannot store all the
instructions at a time. it's a small chip
03:48 - so that is not much space on it
03:50 - so instructions that will be in machine
language
03:53 - are executed one at a time, but the good
thing is that CPU can execute
03:58 - millions of instructions per second and
sometimes an instruction can be to jump
04:02 - to another instruction so in that case
04:04 - CPU will not fetch the next instruction
sequentially
04:08 - so instruction 3 could be - go back to
instruction 1
04:12 - okay, now one question will be why
can't CPU
04:15 - fetch instructions directly from hard
disk? Why do we need RAM?
04:19 - and this is because access to RAM is
a lot
04:23 - more faster than access to hard disk
04:26 - its hundreds and thousands of times
faster. If CPU will fetch directly from
04:30 - hard disk
04:31 - performance in terms of time of
execution will be terrible.
04:35 - So, this is the story. Programs are
installed
04:38 - or saved permanently in secondary
storage
04:42 - but when they are executing, they are loaded in
RAM
04:45 - when a program finishes its execution it
is cleared from the RAM, the memory in
04:50 - RAM
04:51 - is claimed back. please note that a number of
programs run in a machine at the same
04:56 - time
04:56 - CPU, RAM, all these resources are shared
by these programs
05:01 - CPU has to switch it's time between
programs
05:05 - memory has to be shared all this sharing
and switching
05:09 - is managed by a set of system programs
that we call
05:13 - operating system. Operating system is the
big brother
05:17 - who manages the execution of all other
programs. Without the will of operating
05:21 - system, no program
05:22 - can get any resource. For a program
execution,
05:26 - we need more memory than memory just for
the instructions
05:30 - We need memory for couple of other
things also and when I'll say memory, I'll mean
05:35 - RAM. This is what you call the main
memory
05:38 - as C programmers it's good to know about
memory architecture
05:42 - and we will be talking about it in more
detail later
05:45 - movie understand enough architecture now
let's now
05:49 - start looking at what all we need to
know to write
05:52 - a program in C. 'C' is a programming
language
05:55 - but let us first think about this. What
all do we need to know
05:59 - to be able to write in a natural
language like English
06:03 - First of all, we must know the English
alphabet
06:06 - set of letters in English and then we can
learn some words
06:10 - and once we learn some words we must
06:14 - learn grammar and then we can construct
some phrases and sentences
06:19 - by grammar, we basically mean a set of
rules for the language
06:23 - when we are constructing phrases or
sentences, we must follow
06:27 - the grammar. There are couple of things.
First of all
06:30 - we must use valid words. This sentence
does not make any sense
06:35 - because the words are not valid. This
sentence even though the words
06:39 - are valid once again is not a  valid
sentence
06:43 - as per English grammar, a simple
sentence like this should have
06:47 - a structure like subject verb object.
once we know how to construct phrases
06:51 - and sentences then
06:53 - we can write paragraphs, we can write
poems, we can write stories
06:57 - We can do so many things. Now to be able
to learn and write
07:01 - a program in 'C' or may be any other
programming language,
07:06 - the first thing that we need to know is
the character set that we can use to write
07:11 - that language
07:12 - in 'C', we can use English alphabet. We can
use both uppercase and lowercase letters
07:17 - things will be case sensitive
07:19 - then we can use decimal digits from 0 to
9
07:23 - and then we can use a lot of special
characters like
07:26 - hash, comma, parentheses
07:30 - a lot of them, we will learn about it as
we write some programs
07:33 - once you know the character set that
you can use, then you need to know
07:38 - how to write constants, how to create
variables
07:42 - and you need to know some of the keywords
07:45 - keywords are special words that should
always be used for a
07:49 - specific reason. Some of the examples of
keywords are
07:53 - int,  long, break
07:56 - continue, while, and there are many of
them
08:00 - but that is a finite set of keywords and
they are not too many
08:04 - like words in English Dictionary. Using
these basic elements
08:07 - and some set of rules, we can write
instructions
08:11 - or what we can also call statements
08:14 - and once we are able to write some
statements, we can organize them in a 
08:19 - structure to
08:20 - create a program
08:22 - To write a poem or story in English, it
takes more than just
08:26 - the knowledge of English language. You
need to have some more skills
08:30 - apart from language skills. Similarly,
programs
08:33 - are written to solve some problem, to
perform some task
08:37 - you must first have a computational
logic to solve a problem
08:41 - and then only you can implement it and
write a program
08:44 - For example, let's say you want to write
a program to calculate
08:48 - compound interest but you do not know
how to calculate compound interest
08:52 - you do not know the formula, so now even
if you know 'C'
08:56 - or any other programming language, you
cannot write a program to calculate
08:59 - compound interest
09:01 - so knowledge of programming languages is a
must
09:04 - to have, but it takes more time and
effort to train yourself to be able to
09:09 - design computational logic for complex
problems
09:12 - Not to worry, it's just that you need to
practice a lot to build the skills
09:17 - so this is a brief insight into what all
we need to learn to be able to solve
09:22 - computational problems through
09:24 - computer programs. In our next lesson,
we will try to understand the basic
09:28 - structure of a C program
09:30 - We will also write and execute our first C program
09:34 - This is it for this lesson. Thanks for
watching !