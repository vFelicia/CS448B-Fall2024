00:00 - Array is an important concept in computer programming
00:03 - and array is a data structure
00:06 - that is most often used to build
00:08 - complex or composite data structures like
00:11 - stacks and queues
00:13 - In this lesson we will talk about arrays and we will see
00:16 - using some programming constructs
00:19 - what all different operations we can perform
00:21 - using arrays and how
00:23 - arrays are stored in computer's memory
00:25 - We define an array as a
00:28 - collection or a systematic arrangement of
objects of the same data type
00:33 - and a typical definition or
00:36 -  declaration of
00:37 - an array
00:38 - would look something like this
00:41 - So, an array definition will have a data-type
00:45 - In this case,
00:46 - we have an
00:48 - array of integers and then we'll have the
variable name
00:51 - and we will also have
00:52 - the size of the array
00:53 - Now, where does this concept of
00:55 - array fit in programming
00:58 - Let's say, in a program we want to
01:02 - store the marks of fifty students
01:04 - in a class
01:06 - in let's say
01:07 - mathematics
01:08 - Now, in our program to store these values
01:11 - we can declare
01:13 - fifty different integers variables like
01:16 - s1,s2,s3
01:21 - all the way till s50
01:22 - so we kind of declare
01:24 - fifty different variable names
01:26 - corresponding to these fifty students
01:28 - now let's say
01:30 - we want to calculate the average marks
of all the students
01:33 - so to calculate that we will have
01:36 - something like a totla of all the
01:38 - marks
01:38 - so we'll have a variable 'total'
01:41 - this total will be equal to
01:42 - s1 + s2 + s3
01:45 - and all the way till
01:46 - s50
01:48 - and
01:49 - average would be
01:51 - totally divided by 50
01:53 - but what if we had 500 students
01:56 - or even more
01:57 - it would be very unmanageable to declare 500 variables
02:01 - and
02:02 - use them in our
02:04 - statements
02:05 - so in these cases we declare
02:07 - an array. So let's say we declare an array 's'
with a size 50
02:11 - and this array is runner of integers
02:15 - now in this case also i have fifty
different variables and I access them
02:19 - as s[0],s[1],s[2] and so on
02:24 - we start at index 0 and we go all the way till
02:28 - index forty-nine
02:30 - and our program will be something like
02:33 - we again have variable 'total'
and this time we run a loop
02:36 - from zero to forty nine and we used the
02:39 - variable i
02:41 - as index
02:43 - and keep on adding
02:44 - s[i] to total and finally we calculate
02:47 - average
02:50 - as before
02:52 - which is total upon 50
02:55 - this was an array of integers
02:57 - we can also have
02:58 - an array of float or array of character
03:02 - or an array of user-defined
class
03:06 - or structure
03:07 - and this was a simple
03:09 - one-dimensional array
03:11 - we can also have arrays of 2-dimension or 3-dimension
03:16 - let us not seen how arrays
03:18 - are stored in computers memory
03:20 - okay let's say this figure
03:22 - in the left here
03:23 - is computer's memory
03:24 - which is divided into these segments or
partitions
03:28 - and each segment is
03:29 - one byte of memory. in-fact we are only
showing a part of the memory in the
03:33 - form of these segments
03:34 - or partitions
03:36 - and that's way it is extending towards
the bottom and the top because in reality
03:40 - the memory will have
03:41 - many more bytes
03:43 - in fact computer's memory is a very large array
03:46 - of bytes
03:47 - now in computer's architecture each byte
of the memory
03:50 - has an address
03:52 - Let us assume that here bottom most byte
03:55 - which will be
03:56 - somewhere deep
03:58 - down here
03:59 - has address 0
04:01 - and as we go on towards the top we go on increasing the address like
04:05 - 1, 2 and so on
04:09 - so let's say
04:10 - for example if this particular byte
04:12 - has an address
04:13 - 100
04:15 - then this particular byte
04:16 - will have an address 101
04:17 - and we will go on like 102,103
04:21 - and so on
04:23 - and as we know in C and C++
04:26 - we have pointer variables
04:28 - that can
04:29 - store the address of
04:31 - another variable
04:33 - now when we define an array something like an integer array, let's say
04:37 - for example
04:38 - of size 4
04:40 - then
04:40 - if an integer typically takes
04:43 - four bytes of memory
04:45 - then an array of 4 integers will take
04:49 - sixteen bytes of memory
04:52 - when the program executes the computer
allocates
04:55 - sixteen contiguous bytes
04:57 - in memory
04:59 - for this array A
05:00 - so the computer kind of allocates
05:02 - 4 contiguous blocks of 4 bytes each
05:07 - the first block or the first 4 bytes will correspond to
05:10 - A[0]
05:11 - and the next four bytes or the next
block will correspond to
05:15 - A[1]
05:17 - and similarly we will have
05:18 - A[2] and A[3] as well
05:22 - now access to an element in an array or it's
modification
05:26 - all of it, all of these operations
05:28 - take constant amount of time
05:30 - and it is not a function of the size of
the array
05:33 - or in other words
05:34 - we can say that
05:36 - the time complexity
05:37 - for accessing or mortifying an element in the array is
05:40 - O(1)
05:43 - now how does this really happen ? Let's try to understand
05:46 - When we declare an array like
05:48 - say for example here we have
05:50 - declared an integer array of size 4
05:53 - then this variable A
05:55 - is nothing
05:58 - but pointer to the first element in the array
06:01 - and we can also say that
06:04 - variable A
06:06 - is a pointer that points to the
06:08 - base address of the array
06:10 - and this is better explained in a real program
06:12 - So let's go
06:15 - to a compiler and write some code
06:17 - So i will write a simple c program here
what I will you do is
06:22 - I will declare an array A of size 4
06:25 - an integer array
06:26 - and as I told you earlier
06:29 - A is
06:29 - nothing but a pointer for the first
element
06:33 - in the array so if we
06:35 - tried to
06:36 - print A and i have written a simple
printf statement which is the
06:39 - statement to
06:41 - print a variable on the console
06:43 - then this should give me
06:45 - the base address or the address of the first element in the array
06:48 - now run this program
06:50 - and we get an output
06:52 - which is equal to two nine four seven two
four zero
06:55 - and this should be the address of the first element. But how do we know that this
06:59 - is the address of the first element
07:02 - well we can print the value at this particular
address
07:05 - and as we know
07:06 - to print the value
07:08 - at an address. of pointer variable points
to
07:11 - we need to put a star in front of the
pointer valuable in C and C++
07:16 - so star A
07:18 - should give us
07:19 - the value at the base address
07:22 - the value of the first element in the array.
so *A is same as A[0]
07:29 - and let us now see 
07:30 - what we get
07:32 - okay so the
07:33 - we got an address
07:34 - in the first line and this address is different from the previous address
07:37 - because
07:38 - every time the program runs afresh
07:41 - the memory allocation will be different
07:43 - and the value that we are getting is
some garbage value
07:47 - this is happening because we have not
yet initialized or filled any data
07:51 - in the array
07:52 - so what i will do here is
07:54 - I will fill some data. Let's say A[0] is 1
07:56 - A[1] is 3, A[2] is 4 and A[3] is 5
08:01 - and now if we run this again
08:04 - the first line once again gives us the
address of the first element and the
08:07 - second line
08:08 - gives us the value of the first element
08:10 - and that's correct
08:12 - now i do something else here
08:13 - I will print
08:15 - A plus one
08:17 - and if we know the basics of pointer arithmetics
08:21 - then because A is a pointer to an integer then A plus one
08:26 - should increament the address
08:28 - by four bytes which is the size of the
integer
08:32 - and take us
08:33 - to the next integer. So
08:35 - A plus one should give us
08:37 - address of the second element in the
array
08:39 - and whether this address is correct or not
08:42 - is something that we can verify
08:44 - by looking at the value
at this particular address
08:48 - and if I am correct then
08:50 - this should be
08:51 - * of A plus one should be
08:53 - A one or the second element of the array
08:55 - Let us now run this
08:57 - okay so
08:58 - first line is the address of the first element
09:00 - and as you can see the second address
which is the address of the second
09:04 - element
09:06 - is 4 more than that as of the first
element
09:08 - and we have got the values right
09:11 - A[0] is 1 and A[1] is 3
09:14 - so now it should be evident why
accessing or modifying an element in
09:18 - array takes constant time
09:19 - when we try to access an element in the array computer first calculates the
09:24 - address of this particular element
09:26 - using base address and offset. So for
example if we want to access the fourth
09:31 - element in the array which is A[3]
09:34 - then the address is calculated from the base address by adding the offset 3 
09:39 - and the value at this particular
09:41 - location
09:42 - will give us A[3]
09:44 - all this pointer arithmetics
09:45 - that we re doing here are possible only on 
C and C++
09:49 - and if you are using the language like
java, you do not have explicit pointer variables
09:55 - but still the internal working
09:57 - of how things happen in memory
09:59 - will be pretty similar
10:01 - so this was some of the basics about arrays and how they are stored in
10:04 - memory and how
10:05 - they are interpreted
10:06 - in a computer program
10:07 - in the coming lessons we will talk more about arrays and solve
10:10 - couple of problems so thanks for
watching