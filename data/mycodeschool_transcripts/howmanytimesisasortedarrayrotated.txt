00:00 - in this lesson we will solve another
00:02 - programming interview question and the
00:04 - question is that we are given a sorted
00:07 - array that has been rotated so let's say
00:10 - we have been given a sorted array with
00:13 - these
00:14 - elements the size of the array is six so
00:17 - we have indices from 0 to 5 and let's
00:21 - say we want to rotate this array
00:23 - anticlockwise rotate this array towards
00:26 - the right so each element will shift by
00:31 - one towards the right except the last
00:33 - element which will shift to the first
00:36 - position in the array and the resulting
00:38 - array would be this and this is rotated
00:43 - once and if we rotate the array twice
00:47 - the resulting array would be this and
00:50 - this is of course rotated
00:52 - twice and such an array is often also
00:55 - called circularly sorted array so we
00:58 - have been given such a circularly sorted
01:02 - array and there is one more condition
01:04 - there are no duplicates in the array all
01:07 - the elements in the array are distinct
01:09 - so given such an array we have to find
01:11 - out how many times the array has been
01:14 - rotated so how do we solve this problem
01:18 - one thing that should be pretty evident
01:20 - is that if we know the first element or
01:23 - the minimum element of the sorted
01:25 - sequence in the array then we know how
01:28 - many times the array has been rotated
01:30 - and when we say the number of times the
01:32 - array has been rotated for this problem
01:35 - we mean rotation in anticlockwise
01:38 - direction or rotation towards right the
01:41 - number of rotations of the array would
01:42 - be the number of elements before the
01:44 - smallest element or the minimum element
01:46 - in the array so in this case there is
01:48 - only one element before two which is the
01:50 - minimum so clearly this array is rotated
01:53 - once here we have two elements before
01:56 - the minimum element so this is rotated
01:57 - twice in fact if we see then the number
02:00 - of rotations is equal to the index of
02:02 - the minimum element so our problem is
02:05 - basically finding out the minimum
02:07 - element in the array the index of the
02:09 - minimum element in the array and we are
02:11 - done we know that how many times the
02:13 - array has been rotated so how do we find
02:16 - out the index of the minimum element the
02:19 - simplest approach would be to scan the
02:22 - whole array perform what we alsoo call
02:25 - linear search and the pseudo code will
02:28 - be something like we will have two
02:30 - variables one to store the minimum
02:32 - element and another to store the minimum
02:34 - index let's say initially the first
02:36 - element is the minimum element and then
02:38 - we run a loop from 1 till n minus one
02:42 - where n is the size of the array and if
02:44 - the element at I index is less than the
02:47 - minimum we update the minimum and the
02:49 - minimum index and finally when we come
02:52 - out of this Loop we will have the index
02:55 - of the minimum element clearly the
02:57 - running time of this algorithm would be
02:59 - Big O of n the running time will be
03:01 - proportional to n now this will give us
03:04 - the correct answer this is a correct
03:06 - solution but in this solution we did not
03:09 - make use of the property of the array
03:11 - that it is circularly sorted can we use
03:14 - this property of the array and improve
03:15 - this algorithm improve the time
03:17 - complexity of this algorithm well let us
03:20 - see now we will make use of the property
03:23 - that the array is circularly sorted and
03:27 - we will use a variation a modification
03:30 - of binary search algorithm to solve this
03:33 - problem now what do we do in a normal
03:36 - binary search
03:37 - algorithm let's say we have a sorted
03:40 - array like this we first find out the
03:42 - middle element in the index uh in the
03:45 - array and then we see whether this is
03:47 - the element we are looking for or not if
03:50 - it is not the element that we are
03:51 - looking for we either go searching
03:54 - towards the left or we go searching
03:57 - towards the right BAS based upon whether
04:00 - the element that we are looking for is
04:02 - greater than or less than the middle
04:04 - element so at each step we divide the
04:08 - problem into searching something in half
04:10 - the array at each step we discard half
04:13 - of the elements we discard half of the
04:16 - search space and we keep on going until
04:19 - we find the element now in a circularly
04:22 - sorted list like this our problem is to
04:25 - find out the first element of the sorted
04:28 - sequence this particular element is kind
04:31 - of the pivot or The Junction in the
04:34 - circularly sorted array so now we will
04:37 - use a variation of binary search to find
04:39 - out this PIV element which is also the
04:41 - minimum element in the array what we
04:44 - essentially do in a binary search is we
04:47 - Define a search space a segment within
04:50 - which our desired element is probable to
04:53 - lie by two variables low and high the
04:57 - lower index and the higher index and at
04:59 - each step we either find an element or
05:02 - we reduce the search Space by half by
05:05 - discarding half of the elements in the
05:07 - segment and creating a new segment and
05:10 - now we look at the new segment we kind
05:12 - of divide the problem at each step into
05:15 - half now in this problem for each
05:17 - segment we will look at couple of
05:20 - things there can be a case when the
05:24 - lower the element at lower index is less
05:27 - than or equal to the element at higher
05:29 - index
05:30 - now this will be possible only if the
05:33 - segment is already
05:34 - sorted if the segment is already sorted
05:37 - the minimum element in the segment and
05:39 - that's what we are finding out the
05:40 - minimum element in the array and if we
05:44 - can find out the minimum element in the
05:45 - segment that will be the minimum element
05:47 - in the array as well so we will return
05:49 - simply return the index low because the
05:52 - array is already sorted so the element
05:54 - at lower index is the minimum now if the
05:57 - segment is not sorted we can calculate
06:00 - the middle index and now we try to see
06:03 - if our middle index is the pivot or not
06:06 - now how do we find out the pivot if you
06:08 - see there is a special property of the
06:10 - pivot or the minimum element in the
06:12 - array if we see the next and the
06:15 - previous elements of the pivot element
06:18 - in a circular manner so if it is the
06:20 - last element the next element would be
06:22 - the first element then for the pivot
06:24 - element both next and previous element
06:27 - in the array are greater
06:30 - than it like here 18 and five are both
06:32 - greater than two no other element in the
06:35 - array will have this property except the
06:37 - pivot element let's define this property
06:39 - as pivot property so here we calculate
06:43 - next as mid +
06:47 - 1 modulo n modulo n because if mid is
06:51 - the last index in the array we need to
06:53 - go to the first element so modular
06:55 - operation does that and previous would
06:57 - be mid minus
06:58 - one modul n and we will also add a n
07:02 - here so that mid minus one does not
07:04 - become a negative number so our case two
07:08 - is that a mid is less than or equal
07:13 - to a
07:15 - next and it's also less than or equal to
07:18 - less than or equal to the previous
07:22 - element in the circular array in the
07:24 - circularly sorted array if this is the
07:26 - case once again we have the pivot or the
07:30 - minimum element in the array so we will
07:32 - return the index made so far in these
07:34 - two cases we have found our element
07:36 - straight off and we have not felt the
07:39 - need to divide the array divide the
07:41 - search space search
07:43 - segment now if the middle element is not
07:46 - the pivot then can we use a property
07:48 - where we can say that we can discard the
07:50 - right half or we can discard the left
07:52 - half and we can go to one of the halves
07:55 - to search for the pivot element well yes
07:57 - it is possible to do so if the middle
08:01 - element the element at Mid
08:03 - index is less than or equal to the
08:06 - highest element at high index
08:10 - High then the segment starting the mid
08:12 - index and extending right towards till
08:16 - the high Index this whole segment is
08:18 - sorted and the pivot cannot exist in the
08:22 - right segment so in this case we will
08:24 - say that we need to search for the pivot
08:26 - in the left half so we will adjust high
08:29 - to Mid minus
08:31 - 1 and case 4 would be when the mid
08:34 - element is greater than or equal to the
08:39 - element at lowest index now in this case
08:41 - it is not possible that the pivot is in
08:44 - the left so we will go and search in the
08:47 - right so we will adjust low to mid +
08:51 - one so we keep reducing our segments at
08:54 - each step and try to find out the answer
08:56 - now let us simulate this uh approach
08:59 - this algorithm for this particular
09:00 - example so for this example case one
09:03 - obviously is not true initially so we
09:05 - find out the middle index now the pivot
09:08 - property is not true for the middle
09:09 - index so we look at case three when we
09:12 - look at case three we basically are
09:14 - looking whether this whole part of the
09:16 - sequence is sorted or not including 18
09:19 - and the whole elements towards the right
09:21 - so 18 is not less than or equal to 8 now
09:25 - we look look for case 4 and when we look
09:27 - for case 4 we mean to to check whether
09:29 - this complete sequence is sorted or not
09:33 - well this is sorted in fact if the array
09:36 - is not sorted then one of these two
09:39 - sequences will always be sorted you can
09:41 - pick up some of examples some examples
09:43 - and try to see and this uh is what forms
09:46 - the basis of our divide and concur
09:49 - approach this is what F the forms the
09:51 - basis upon which we discard half of the
09:54 - elements so now we need to adjust low to
09:57 - mid + 1 so we have discarded these
09:59 - elements from our search space our new
10:01 - search space is starting at two now this
10:04 - array is sorted case one is true for
10:07 - this segment sorry this segment is
10:09 - sorted so we simply return the index of
10:12 - two which is 0 1 2 3 and 4 so we return
10:15 - four here and our search is over now we
10:19 - have found the pivot element so we know
10:22 - that the array is rotated four times
10:24 - equal to the index of the pivot
10:27 - element of things about this algorithm
10:29 - this algorithm will work only if there
10:31 - are no duplicates in the array and that
10:34 - was our initial condition also in the
10:36 - problem if there are duplicates this
10:38 - reduction of search space into half is
10:40 - not possible and let us now write code
10:42 - for this algorithm and see whether it
10:44 - works or not so I will write a method
10:47 - find rotation count that will give me
10:50 - how many times uh a circularly sorted
10:53 - array a is rotated n is the number of
10:56 - elements in the array so we first Define
10:59 - low and high and then while our search
11:02 - space is valid we first see whether the
11:06 - segment is already sorted if it is
11:07 - sorted we return the lower index so this
11:10 - is our case one else we calculate mid as
11:13 - low plus high upon 2 and then we also
11:16 - calculate the next and previous of mid
11:18 - and if mid satisfies the pivot property
11:21 - we return mid else if uh the middle
11:24 - element is less than or equal to the
11:26 - higher element then we discard the right
11:29 - half
11:29 - and we adjust higher index to Mid minus
11:32 - one else if a mid is greater than or
11:36 - equal to a low then we discard the first
11:39 - half the left half if the array is not
11:41 - sorted one of these two conditions will
11:43 - always be true and only one of these
11:46 - conditions will be true not the both of
11:48 - them let's say if we are not able to
11:50 - return anything if we are not able to
11:52 - return anything within the while loop
11:54 - then we return minus one it will be
11:56 - minus one will be returned only for an
11:58 - invalid scenario when
11:59 - maybe the array is not circularly sorted
12:01 - its properties are not
12:03 - true now in the main method I have
12:06 - initialized an array of size 11 and I
12:08 - have called this function find rotation
12:10 - C and I'm trying to print the count let
12:13 - us see what happens if I run the program
12:16 - this says that the array is rotated six
12:19 - times which seems to be correct let's
12:21 - now modify this array let's run this for
12:25 - a test case when the elements are
12:27 - already sorted okay this also looks fine
12:30 - so we are good now I have used four
12:33 - cases to solve this
12:34 - problem uh there are couple of different
12:37 - other uh implementation approaches as
12:39 - well the underlying idea would be the
12:41 - same to use binary search but we can
12:44 - Implement using some different
12:46 - conditions I encourage you to try them
12:48 - out on your own or quickly Google search
12:51 - for code Snippets so this was one
12:54 - interesting problem using uh solve using
12:56 - binary search in the coming lessons we
12:58 - will see more such interesting problems
13:00 - thanks for watching