00:00 - In the previous lesson, we saw the
implementation of binary search
00:05 - in its basic form
00:07 - we solved a
00:09 - problem in which if we have
00:11 - a sorted array of integers
00:13 - something like this
00:14 - and if we want to find out whether a number
exists in this array or not
00:19 - so lets say  we want to find out whether number
00:21 - 10 exists in this array or not, then our algorithm returns us
00:25 - that 10 exists
00:27 - at index 3
00:28 - and if we want to search for a number that
does not exist
00:32 - in the array, then our algorithm
00:34 - returns us that
00:36 - the number that you're looking for does
not exist in the array, so if you want to
00:38 - search for 11 in the array, then our algorithm says that 11
00:42 - does not exist in the array
00:44 - okay so now
00:46 - i will modify this array. Now,
00:48 - this array is still sorted, but the
only difference is that we have three
00:52 - occurrences of number ten in the array
00:55 - now let's say we want to search for the number 10
00:58 - using binary search, then
01:00 - what will be the index of n that we return
01:02 - We could return 2 also
01:04 - index 2 also, we could return index 3
 also or we could return index
01:08 - 4 also
01:09 - the normal binary search implementation
that we saw previously
01:13 - exits as soon as it finds out any
occurrence of a number in the array, so
01:19 - there is no guarantee that we will
find the first occurrence or the last
01:22 - occurrence
01:23 - now in this lesson, we will see
01:25 - two different variations of binary search
01:28 - one variation will always give us the first occurrence of 
01:32 - a number in the array
01:33 - and another variation will always give us
01:35 - the last occurrence of the number
01:38 - that we are searching for in the array
01:41 - Ok, so let us first write the
01:43 - basic implementation that 
we had written previously
01:46 - I will quickly write a method binary search
 that takes three arguments
01:50 - Array A, its size n and 
01:52 - the element to be searched for 'x'
01:54 - and we will
01:55 - initialize two variables, low and high
to 0 and n-1
02:00 - to mark the segment of the array in which x is probable to lie. 
02:03 - and while low is less than or equal to high
02:06 - we calculate the middle index
02:08 - as low plus high upon two
02:10 - and then we compare x with the middle element
02:13 - and if x is equal to the middle element, 
then we have found x and our 
02:16 - search is over
02:18 - We exit from this method by returning the index mid.
02:22 - So, we are exiting as soon as we found
02:25 - as soon as we find any occurrence of x
02:27 - not necessarily the first or the last occurrence.
02:30 - but any occurrence.
02:31 - if x is less than the mid element, we adjust high to
02:35 - mid minus one
02:37 - to say that x will now, 
02:39 - x is now probable to lie
02:41 - before the mid element and the third and 
default condition is when x is greater than the 
02:44 - mid element, so in this case, we adjust low
02:47 - to mid plus one
02:50 - and if we come out of this while loop
 without finding x
02:54 - then we return -1 to say that
we could not find x in the array
02:58 - Ok, let us see a simulation of this for this
03:00 - particular example. simulation of this 
algorithm for this particular example
03:04 - I'll draw three columns here
03:06 - low
03:07 - high and mid
03:08 - and let's say the number to be searched for is
03:11 - ten. So, x is 10
03:13 - size of the array is six, so initially low is zero
03:16 - sorry, size of the array is 7
03:17 - So, initially low is 0, high is 6
03:19 - now we have started to execute this while loop
03:22 - we calculate mid
03:24 - as (low+high) upon 2, so mid would be 3
03:27 - Let's also draw a column A[mid]
03:29 - okay this looks better
03:31 - now, A[3] is 10.
03:33 - so is x equal to A[mid]
03:35 - yes it is, so we return 3
03:38 - we return 3
03:40 - and we will say that game over
03:42 - because we have found 10 in the array
and we return immediately
03:47 - we do not care that there is another 10 at index 2
03:50 - Now, if we want 
03:51 - to find out
03:52 - if we wanted to find out the first 
occurrence of 10 in the array
03:55 - we should not have said "game over"
03:58 - we should have said that ok, I have found one 10 at index 3, let me
04:02 - go and see towards the left
04:04 - if there is another 10 at any lower index
04:06 - and if it is there, I will
04:08 - return that one
04:10 - so i will modify this algorithm slightly here
04:13 - At the beginning, lets say we take a variable result
04:17 - and initialize it 
04:19 - to -1
04:21 - i'll come back to why I'm initializing it to -1
04:24 - and i'm short of space here, so i am writing 
two statements in the same line with a 
04:27 - comma
04:28 - now when the condition is that x is equal
to the middle element
04:32 - instead of returning and exiting the
execution of the function, we modify
04:37 - result
04:38 - to x
04:40 - sorry, we modify result to mid, the index at which x lies
04:43 - and we adjust high to (mid -1)
04:47 - once again, I'm short of space here so i am writing two statements in the 
04:50 - same line
04:51 - so these two statements will execute for
this condition, if x is equal to the
04:54 - middle element. Now what do i really mean
here? What i mean is that if we
04:59 - found x
05:00 - in the array
05:01 - then we have stored the index in the
variable result at which we found x
05:05 - and then we modify our segment, we
do not stop our search and
05:09 - we modify our search space
05:11 - by adjusting high to mid minus one
05:13 - so we keep on searching for x before
this mid element
05:16 - so if we see the simulation now
05:19 - then we do not stop here, we
05:20 - make high as 2
05:23 - and continue our search
05:24 - now mid would be one
05:26 - A[mid] would be 4
05:28 - I will also write the value of result at any
 stage. So, far our result is
05:32 - so far we have found
05:33 - 10 at index 3
05:35 - so our result is 3
05:36 - now for this case - low = 0 ,high = 2 and mid = 1
05:40 - we will go to the condition, this one
05:42 - when x is greater than the middle element.
So, low becomes (mid+1)
05:46 - so low becomes 2, high
05:47 - is already 2
05:49 - now mid would also be 2
05:51 - A[mid] would be 10
05:53 - now we come to this condition
05:54 - We again
05:55 - came to x equal to the middle element of
the segment. So, we now modify result
06:01 - to the new index at which we have found
06:03 - 'x'.so result will be now 2
06:06 - and high becomes (mid -1) which 
will be 1, low is 2
06:09 - now this condition low less than or equal
to high fails
06:12 - so we exit while loop here
06:15 - okay there should be one more
modification to my code, I will return
06:18 - result here
06:19 - okay so we are seeing here that
06:21 - found 10 at index 2
06:23 - so this way we have have found the first 
occurrence of element 10 in the array
06:29 - we're returning result here once we complete
the while loop
06:32 - and we are not returning the result 
06:34 - inside the loop
06:35 - result is initially -1, so
06:37 - if we do not find any 'x' it is never modified
and we return -1 to
06:41 - say that we could not find 'x' 
in the array
06:44 - and if we find any 'x' in the array and i'll put braces here to mark
06:48 - that these two statements
06:50 - execute for this if condition
06:52 - We store that index in this variable
06:54 - kind of saying that so far this is the leftmost result that i have
06:58 - and then we go on searching towards the left
07:00 - by left i mean
07:01 - towards the lower indices
07:03 - so we modify high to mid minus one
07:05 - if we find another x
07:06 - then this x is left of the previous index. So, we
07:10 - discard the previous
07:12 - result and modify our result
07:15 - okay so this is binary search to find out the
occurrence of first element in the array
07:19 - if we want to find out
07:21 - the last occurrence in the array, then
there will be only a slight modification
07:25 - to this code
07:26 - When we find 'x', we do not stop the search
like we're doing here
07:30 - and we go on searching towards the
right, towards the higher indices by
07:34 - modifying our window 
07:36 - or the segment, or the search space
07:38 - by adjusting low to (mid+1)
07:41 - by adjusting lower index to (mid +1)
07:44 - and this is the only change that we need to do
07:46 - to find out last occurrence in the array
07:48 - Ok, so let us quickly see simulation for
07:51 - this implementation also
07:53 - So once again we start with low =0, high =6
07:56 - and we also start with result = -1
07:59 - -1 means that we have not found x in 
the array so far
08:03 - now mid would be 3
08:05 - and the mid element would be 10
08:07 - We are executing the while loop here
08:09 - No, we come here to this condition. X is equal to A[mid]
08:13 - so first we modify our result
08:15 - we found a 'x' at index 3
08:18 - and then we
08:19 - modify low to mid plus one which will be 4
08:23 - so earlier our window was the whole array
08:26 - now our window or search space is this
08:28 - and we already have information about the right-most 10
08:32 - that has occurred so far
08:34 - Ok, so now, mid would be 5
08:37 - A[mid] would be 18
08:39 - Now, we go to this condition, x is less than A[mid]
08:41 - So, now high becomes mid minus 1, so we have
08:44 - this range
08:45 - our window, our search-space is now this
08:48 - and so far we have found
08:50 - one 10 at index 3
08:51 - now mid would be (5+4)/2 and if we 
take only integral part, then
08:55 - it is 4
08:56 - A[mid] would be 10
08:58 - so once again we come to the
condition when x is equal to A[mid], So 
09:01 - we modify result
09:03 - to the new index 4
09:06 - and we modify low to mid plus one. So low becomes 5
09:10 - high becomes 5
09:11 - so far the highest index of 10 that we have 
found is 4 and our search window is now
09:16 - only index five
09:17 - so mid would also be
09:19 - five and A[mid] would be 18
09:22 - now 18 is greater than 10
09:24 - So, we will again, once again go to this particular condition
09:28 - So, low is
09:30 -  still 5 and high becomes 
09:32 - 4 now
09:33 - now this is not a
09:35 - valid search space this is not a valid
segment
09:38 - low less than or equal to high
09:40 - condition fails, so we will exit the loop
09:43 - exit the while loop and
09:45 - our game is over, the result, we return whatever we have in the
09:50 - result
09:51 - so we will kind of say that found 10 
09:54 - at index 4. So, 
09:57 - this is binary search to find out the last
occurrence of an element in the array
10:03 - in a sorted array
10:05 - the time complexity of this algorithm is O(log n)
10:09 - or in other words we can say that the 
time taken is kind of
10:12 - proportional to log of n
10:15 - in the coming lessons, we will see
more variations of binary search
10:18 - we will see
10:19 - other scenarios in which binary search
10:22 - is applied
10:24 - so thanks for watching !