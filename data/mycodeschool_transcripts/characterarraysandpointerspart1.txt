00:00 - In our lessons so far, we have seen
00:03 - how the concepts of arrays and pointers
go together.
00:07 - Now, in this lesson, we are going to talk about character arrays,
00:10 - how we can work with character arrays using pointers
00:14 - Now, when we talk about character arrays in
c
00:16 - we basically want to talk about
00:18 - strings
00:20 - strings are group or set of
characters
00:24 - and real world data like
00:25 - names
00:26 - phrases and sentences, all of these
are
00:29 - strings to us.
00:31 - So, these are some of the examples of
strings
00:33 - character arrays become all the more
important because we use them to
00:37 - store strings
00:39 - and then perform a lot of operations on
strings like
00:43 - modifying a string, copying a string
00:46 - concatenating two strings or
00:48 - finding out properties of strings like
00:50 - finding out the length of a string.
00:53 - To be able to work with strings efficiently in C,
00:56 - there are a couple of things that we need to
understand
00:59 - the first thing that we
01:00 - need to understand is how we store
strings in character arrays.
01:04 - To be able to store
01:06 - a string in a character array, the first
requirement is that
01:10 - the character array should be large
enough
01:12 - to accommodate the string
01:14 - and what is a large enough character array?
01:16 - a large enough character array is a character array
01:19 - of size
01:21 - greater than or equal to
01:23 - number of characters in the string
01:26 - plus one.
01:27 - So let's say if our string is a
01:30 - name of four characters,
01:32 - uh... like john
01:33 - then the size of the array
01:35 - should be greater than or equal to five,
01:38 - and now the obvious question would be
why do we need space for one
01:42 - extra character?
01:43 - Isn't it that
01:44 - if we declare
01:45 - a character array of size four, we can
01:47 - store all the characters in
john. J will go to zero' th index
01:52 - 'O' will go at the 1th index,
01:54 - 'H' and 'N' will go at
01:56 - second and third index respectively
01:58 - So, I am storing all the data, isn't it?
02:01 - let's try to understand it this way
02:03 - Let's say we have a character array of size 8,
02:06 - uh... let's say this is a logical view of our array, C,
02:10 - and we want to store the string john in
this particular array,
02:13 - we have indices  from zero to seven
02:15 - this is an array of size eight
02:17 - so we can store 'J' at the 0th index,
02:20 - 'O' at the 1th index, 'H' at the 2th index, and  'N' at
02:24 - the 3th index,
02:25 - So, we have stored all the characters
of the string 'JOHN' in this array
02:29 - uh... but if you see we have not stored
one information
02:32 - uh... we have not stored the information
that this particular character 'N' is
02:36 - the last character in the string
02:38 - so the string ends
02:39 - at index three
02:41 - so let's see if we pass this string to
a function that has to
02:45 - print this string
02:46 - john or find out the length of the string that we have stored in the array,
02:50 - then how would the function know that the string is only till index 3, even
02:54 - though we have not filled anything in these
02:57 - indices at
02:58 - four five six and seven,
03:00 - there would be some garbage value there,
03:02 - so either we pass this extra information
03:04 - or we do something else.
03:06 - To store this information that this is
the end of the string in the character
03:10 - array,
03:10 - this is the used part of the string,
03:13 - and this is the unused part.
03:15 - We use the simple design,
03:17 - and at the end of the string in the next
position we put a null character,
03:22 - A NULL character has ASCII value zero,
03:25 - and we can
03:26 - put a NULL character
03:27 - at position four in this example
something like this,
03:30 - Within single quotes we put, a forward slash
03:34 - and number zero,
03:35 - this is NULL character.
03:37 - All the functions for string
manipulation in C
03:40 - expect that strings will be null
terminated,
03:43 - so this is a rule:
03:44 - A string in C has to be terminated by a NULL character,
03:49 - and that's why we need one extra space
03:52 - to store this null character.
03:54 - let us try to see some running code
that will help us understand this
03:57 - concept better.
03:59 - what i have done here is i have
04:00 - taken a character array of size four,
04:03 - and i have filled in the characters but I have not used any space,
04:07 - to null terminate it,
04:09 - and then I am using the printf
function, this %s tells
04:13 - that
04:14 - i want to print a string and then
I am passing this array C,
04:18 - uh...let us run this program and see
what happens,
04:21 - as we can see
04:22 - there are these bunch of characters
04:25 - that are getting printed after JOHN,
04:27 - and this is happening because we have
broken the assumption that
04:31 - for the printf function that my
04:34 - string, that our string will be NULL terminated,
04:36 - so that's why this undefined behavior
is coming
04:39 - if we change the size of the character array
to five and put
04:43 - a NULL termination something like this
04:46 - at fourth index,
04:47 - and then things will be fine
04:49 - now even if we change the size of the
array to twenty,
04:52 - printf function will print
04:54 - till it finds
04:56 - a null character.
04:57 - so it only prints the first four
characters in the array,
05:00 - and it's not just the print function
there are a bunch of
05:04 - functions we have this library string.h
05:07 - that gives us a bunch of functions
for string manipulation,
05:11 - So, all these functions assume that the function will be null terminated, So, this is one
05:15 - contract
05:16 - that we have to follow
05:18 - uh... let's say we want to use the
function strlen, string length
05:23 - to find out the
05:24 - length of the string.
05:26 - I will print something like this, lets run this
05:28 - and see.
05:30 - As you can see the output is Length=4,
05:33 - even though uh... the
05:34 - array is of size 20.
05:36 - So, string length function also counts till
it sees a null character.
05:41 - In our program instead of writing these
characters individually at these positions
05:46 - we could have used
05:48 - string literals.
05:49 - string literals are
05:51 - a group of characters
05:53 - within double quotation marks,so, we could
have written something like this
05:57 - and this would have initialized uh... C
06:00 - as this string and the null termination for
06:04 - uh... string literal is implicit.
06:06 - It is always stored with a null termination in memory,
06:10 - Remember that when we declare and initialize a character array like this,
06:15 - this has to happen in one line. We cannot
do something like this that we declare
06:19 - in one line and then we go on and modify this in the next line. This will
06:22 - be invalid
06:24 - We could also avoid writing this here,
06:27 - and this would have been fine
06:29 - In this case the size of C will be
five units
06:33 - five bytes where one byte stores one character.
06:36 - So, it would be just enough to store the
string 'JOHN'.
06:40 - So, if we try to print the size in bytes of Che using this sizeof function,
06:46 - uh... then, size in bytes is five, one character
is stored in one byte, so space
06:50 - has been allocated for five characters,
06:53 - but the length is four,
06:55 - because the null connector does not
count in the length,
06:58 - if we write something like C[4]=
07:01 - uh... this particular string literal,with four characters,
07:04 - this will give us compilation error,
because the compiler
07:07 - will force
07:09 - uh... this particular array,
07:10 - to be of minimum size five
07:13 - There is one more syntax of
initialization, we can
07:16 - put all these characters
07:18 - as a comma separated list
07:21 - within these braces,
07:22 - but in this case the null termination
will not be
07:26 - implicit. We will have to do it
explicitly
07:29 - and the size of the array has to be
greater than or equal to the number of
07:32 - characters here so it should be greater than or equal to five.
07:35 - Okay so these are some of the
ways to initialise character arrays,
07:38 - the next thing that we need to
understand is
07:42 - arrays and pointers are different types, that are used in similar manner.
07:46 - Now, what does it really mean?
07:48 - Let's say we declare a character array C1 of size 6,
07:52 - and initialize it with this string literal,
07:54 - and let us say this is how it gets stored
in the memory.
07:57 - Array is stored in one contiguous block
of memory, so let's say the first
08:01 - character is stored at address 200,
08:03 - one character is of size one byte,so the next character will be at address
08:07 - 201
08:08 - and the next will be at 202 and so on.
08:11 - Now, C1 is the variable name for this
whole array,
08:14 - now what i will do is, i will declare
08:16 - a variable which is a pointer to character, let's name this
08:20 - C[2]. So, let's say we get this variable C2 somewhere in the memory.
08:25 - A pointer variable in a typical
architecture is stored in four bytes
08:28 - So this variable will also have some
address, say this variable is at
08:32 - address four hundred. I am just picking up
these numbers for example sake. Now, what
08:36 - we can do is we can write a statement
like this C2 is equal to C1
08:40 - not even though C1 is
08:42 - a character array, is a variable name of a character array
08:45 - and C2 is variable which is pointer to character. This particular
08:49 - expression is valid.
08:50 - Just using the name of the array,
08:53 - actually returns the address of the
08:56 - first element in the array.So, what this
expression
08:59 - what this statement will do is, it will fill
in the address two hundred in C2.
09:03 - So, C2 now points
09:05 - to the first element in the array. Now,
09:09 - we can use this variable C2, which is
a character pointer
09:12 - just like C1, to
09:14 - read and write
09:15 - into the array. So, if i write something like
09:19 - print C2[i]
09:21 - let's say we want to print C2[1]
09:24 - then the output will be 'e'
09:26 - and we can even modify the array.
09:28 - Let's say we want to modify the
character at 0th index to 'A'.
09:33 - So, the string will be modified
09:36 - and will become this. When we write C2[i]
09:40 - for any position i, it is nothing but
09:43 - *(C2+i)
09:44 - So, C2 is the base address
09:46 - (C2 + i) will take you to the address of the ith element. So, in this
09:51 - case let's say C2+2 will be 202
09:53 - and if we put this * operator,we are basically
09:57 - dereferencing and finding out the value. So,
these two syntax s are alternate
10:01 - syntax s. And,
10:02 - even if it is
10:04 - an array name,
10:06 - we can write these two as substitutes
for each other.
10:09 - So, this was all the similarity in how
we
10:12 - actually use them
10:14 - use
10:15 - arrays and pointers
10:17 - to read and write. Let us now look at the
differences. We cannot modify
10:22 - anarraywith a statement like this
10:25 - C2=C1 is valid but
10:28 - C1 = C2 is not valid.
10:30 - It does not make sense, this will
give you compilation error.
10:33 - we cannot even say C1 is equal to
10:35 - C1 plus one.
10:36 - We cannot increment or decrement this variable
10:39 - C1.
10:40 - We can do it for C2 which is a pointer variable. We can say C2++.
10:44 - So, C2 now points toward the
next element. With this statement
10:48 - here all that will happen is
10:50 - C2 will become 201. So,
instead of pointing here
10:54 - it's now pointing to this particular
element 'e'. To traverse an array
10:58 - we run a loop and we use
11:00 - a local variable, lets say i and
increment it in the loop. If we have a
11:03 - pointer variable we can just keep on incrementing the pointer
11:07 - and we can traverse the list.
11:09 - We can traverse the array, we will keep doing this C2++.
11:13 - So, we must understand where we have an
array and where we have a pointer.
11:16 - What we can do with
11:17 - which one!
11:20 - And now, the next thing that we need to
understand is
11:23 - that arrays are always
11:25 - passed to functions by reference.
11:28 - Now when we pass arrays to functions we only pass the base address
11:32 - of the array in a pointer variable, and we
do not pass a whole copy of
11:36 - the array.
11:37 - The compiler does not let you do that.
11:40 - We have talked about this in detail in our previous lesson
11:43 - Arrays as function arguments
11:45 - Let us try to look through some code and try to understand this better
11:49 - In my code i have declared a character array of size 20,
11:53 - and i have stored a string of length
five in this character array
11:58 - The null termination i implicit if we are using string literal.
12:02 - Now i want to
12:02 - print this string
12:04 - but i do not want to use the library function printf.
12:07 - I want to write
12:08 - my own function print that i want to pass
this array to the function
12:13 - and this function
12:14 - should print the string part in the character array
12:17 - uh... the argument to the function
12:19 - we have talked about this earlier, can be
something like this to say that
12:23 - we are receiving an array here,
12:25 - but the compiler
12:26 - actually interprets this as this.
12:30 - So, the compiler forces that only the address of the character array
12:34 - or the address of any array
12:36 - be received
12:37 - as argument to the function,
12:39 - because arrays are large in size so
it is inefficient to create a
12:44 - copy
12:45 - of the same array for each function
12:47 - Okay, so let's writet the logic now.
12:49 - Now, this print function does not have
any idea that this particular array is
12:53 - of size 20.
12:55 - It only knows the base address.
12:57 - So, what we can do is we can have
12:59 - a variable i, initialize it to zero and we can see something
13:02 - like this
13:03 - while C[i] is not equal to null
13:06 - character, we can print
13:09 - the character C[i].
13:11 - And then we will increment i,
13:14 - and when we find
13:16 - a null character, we can come out of
this loop.
13:18 - and print an end of line.
13:20 - Once again
13:21 - this print function does not know that this character array is of size 20. It
13:25 - only knows the base address.
13:26 - and that's why
13:28 - in the printf function
13:29 - when we were not null terminating an array, we
13:32 - were printing all the garbage value
13:35 - even after the array was finished.
13:36 - Because, until we get a null character, we do not know
13:39 - when to stop and we keep on going
into
13:43 - unwanted memory locations
13:44 - Now, this code should work! Yes, this is fine!
13:48 - In my code here, I am using %c here, to say that we want to print
13:53 - character
13:54 - and C[i], we can also write
13:56 - 8(C+i) as substitute for
C[i] and that will also mean the same!
14:01 - Sometimes you will see
14:03 - this kind of syntax as we talked earlier,both of
14:06 - these syntax,  *(C+i) and C[i] are valid,
14:09 - they are the same! There is one
more thing in our code that we may do!
14:13 - We may not
14:14 - chose to have this particular
14:16 - variable i
14:17 - We could simply say that while *C
14:21 - is not equal to null, print
14:24 - *C and then increment C itself.
14:27 - And, this code will also work
14:29 - why this code will work, I leave it as an
exercise for you to think.
14:33 - In the coming lessons, we will implement more
functions
14:36 - for string manipulation.
14:37 - This is it for now! Thanks for watching!