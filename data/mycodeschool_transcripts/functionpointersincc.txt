00:00 - in this lesson we're going to talk about
function pointers
00:03 - Function pointers, as the name suggests
00:06 - are used to store address of functions.
00:10 - So far, we have used pointers mostly as
variables that would store
00:14 - address of other variables. Basically
pointers are data types that can be used
00:19 - to
00:19 - store the address of some data stored in
computer's memory or in other words
00:24 - to point to or refer to some data and it
doesn't always have to be a variable
00:29 - data could be stored as constant
also and we use pointers not just
00:34 - to store the address
00:35 - we can dereference and get the value at
whatever address the pointer is
00:40 - pointing to
00:40 - now we are saying that we can have
pointers
00:43 - that can store address of functions
or in other words can point to
00:47 - functions
00:48 - and we can use a pointer to
function to dereference
00:52 - and execute the function and  this is
really interesting
00:56 - some basic questions would pop-up. What
really would be
01:00 - the address of a function and even if
we can have pointers to functions
01:05 - what are the use cases in which we may
want to have them
01:08 - there are really interesting use cases of
function pointers we will talk about
01:12 - them later
01:13 - let's first try to understand the core
logic here. Once again, I have drawn this
01:18 - familiar diagram
01:19 - the memory that is allocated to an
application or a program can typically
01:24 - be divided into these four segments:
01:26 - we have talked about this quite a bit in
our previous session's
01:30 - okay, now a program is basically
01:33 - a set or sequence of instructions that
you would give to the computer to
01:38 - perform
01:38 - a  task. We can write our program in a
high-level language like C
01:43 - or C plus plus but at lowest level in
its
01:46 - architecture computer understands and
executes
01:50 - only binary. Any instruction that has
to be executed by the computer has to be
01:55 - encoded in binary. Of course there will
be some rules
01:59 - for encoding so what we do is we write our
program
02:03 - or set of instructions in a high-level
language like C or C plus plus
02:08 - and we pass it to a program called
02:11 - compilers as input and corresponding to
02:14 - the source code compiler generates what
we called machine code
02:18 - or executable code which is
instructions
02:22 - encoded in binary something like what
I'm trying to show here
02:27 - compiler basically takes one or more
source files
02:31 - let's say the program that have written
here is in a
02:34 - file named program dot c. Now, a
compiler for C language will
02:38 - take this file as input and create an
02:41 - executable file that will have the
machine code
02:45 - On a Windows machine executable
files has extension
02:48 - exe. An executable file will be stored
in
02:52 - disk drive or some secondary storage
device
02:56 - whenever we say memory, just memory in
context of programming
03:00 - we mean that random access memory or
RAM that we also called the main memory
03:05 - are primary storage. So whatever
application's memory we're talking about
03:10 - here will be
03:10 - a chunk of main memory. A program
03:14 - or application gets a chunk of memory
only when it starts execution
03:18 - when the application finishes execution,
this memory is claimed back
03:23 - What really happens is that when
we run a program when
03:27 - a program started execution, some amount
of a memory is allocated to it
03:31 - and that is what we're calling
applications memory here. The code or
03:35 - text segment of application's memory is
basically
03:38 - the machine code or instructions copied
from the executable file
03:43 - instructions are not executed directly
from secondary storage
03:47 - they are first copied to main
memory and then only they can be
03:51 - executed
03:52 - during program execution we need memory
not just to store
03:57 - instructions to be executed but also to
store
04:00 - a lot of data that we would work upon in
a program
04:04 - these other segments are mostly about
storing and managing data
04:09 - what I'm going to do now is I'm going to
zoom in to the code or text segment
04:14 - Let's assume that each instruction in
machine language takes
04:17 - four bytes. I'm trying to show the section
of memory storing the instructions here
04:22 - each partition here is a block of four
bytes and actress is increasing from top
04:26 - to bottom
04:28 - so we have instruction 01 at address
200 and the next instruction is
04:31 - at address 204
04:33 - and the next is at 208 and so on
04:37 - Instructions in a program are executed
sequentially
04:40 - Only exception will be when instruction
itself will say that hey,
04:45 - go to or jump to this other
instruction
04:48 - at this particular address which will
happen in case of function calls
04:53 - for example if instruction 01 at address 200 is currently executing
04:58 - by default the next instruction to be
executed
05:01 - is instruction-02 at address 204
05:04 - Unless instruction 01 is itself
something like
05:08 - go to instruction- 05 at address 216
05:12 - which will happen in case of function
calls. A function
05:16 - is nothing but a set of instructions
stored in one contiguous block of memory
05:21 - let's say this block containing
instructions 5 till
05:24 - 8 is a function. I'll name this function
05:28 - func1. Basically a function is a set
of instructions to perform
05:33 - a sub-task. In memory a function will be
one contiguous block
05:38 - with some instructions. The address of a
function what we also call
05:42 - entry point of a function will be the
address of the first
05:47 - instruction in the function. In this
example here
05:51 - address of func1 is 216
05:56 - a function call in machine language will
basically be an instruction
05:59 - to jump to entry point of some function
06:02 - to jump to first instruction in a
function
06:06 - We will not go any deeper into
architecture now, this is good enough to
06:09 - understand function pointers
06:11 - when we say function pointers store
address of functions
06:15 - we basically mean that function pointers
store
06:18 - the starting address or entry point
06:21 - of the block of memory containing all
the instructions in a function
06:25 - let's now see how the can create and use
function pointers in a C or C plus plus
06:30 - program
06:31 - I'm going to write a simple C program
here
06:34 - the first thing that I'm going to do
is I'm going to write a function named
06:38 - Add that will take two integers as argument
06:41 - and return the sum of these two
integers
06:45 - and now I'm going to create a function
pointer that should point
06:48 - to this function Add. The syntax to create
function pointer is
06:54 - first type in the return type of the
function
06:57 - to which this pointer will point. Add
will return
07:00 - int. So, I typed in int then after space
within parentheses
07:05 - type in  asterisk and then name of the
variable
07:09 - so I'm creating a pointer named 'p' and
now once again within parentheses
07:15 - type in all the argument types of the
function to which this pointer will
07:19 - point
07:20 - argument types in function declaration
should be
07:24 - exactly same as in the function to which
this pointer will point
07:28 - because both the arguments in Add function
are Int
07:31 - we have two ints in the declaration of
07:34 - function pointer also. To initialize
function pointer
07:37 - and fill in the address of a function,
we can use a statement like this.
07:42 - as we know ampersand operator gives us the address of something
07:45 - this statement p = &Add will give us the
07:49 - address of  Add in 'p'
07:52 - so 'p' now points to Add and using
07:56 - 'p', we can execute this function Add. What
I'm going to do here is that I'm going to
08:00 - declare
08:01 - an integer variable named 'c' and now
08:05 - I'm going to write a statement like this.
What I've done here is
08:08 - first I have used the asterisk operator
to dereference and get the function
08:14 - and then i have passed arguments
08:17 - just like I would do with a function
name. So, i've passed two integers - two and three
08:22 - and if everything is alright the output
of this printf statement here
08:26 - should be integer value 5. When I run
the program, this is what I get.
08:31 - So this is really cool. We just used a
function pointer to refer to a function
08:37 - and then execute the function. One thing
about the syntax of function pointer
08:41 - declaration
08:42 - We are putting the identifier or name of the
pointer within this parentheses
08:47 - if we would not use the parentheses, then
08:50 - it will mean that we r declaring
08:53 - a function that will return pointer to
integer
08:57 - in this case. If I would write something
like this, I would write a declaration
09:02 - something like this, then this is
declaring a function that would return
09:07 - pointer to integer. We can have an asterisk
just before the function name or
09:12 - we can have an asterisk  just after int.
09:15 - These 2 syntax are same, but if I would
put this
09:20 - within parentheses, then this is declaring
09:23 - a function pointer. Okay, few more things
09:27 - In this initialization here, we are using this
ampersand operator
09:31 - even if we do not use this ampersand
operator
09:35 - it will mean the same. Just using the
function name will also return us
09:40 - address of the function or in other
words, an appropriate pointer.
09:44 - To dereference, instead of using this
parentheses and
09:48 - asterisk operator with function pointer
name, we can simply use the function
09:53 - pointer name
09:53 - and this is good enough. So, we can use
function pointer name or identifier
09:58 - just like function name
10:00 - as you can see the output here is as
expected
10:03 - so we have two possible syntax
 for both referencing and dereferencing
10:08 - you can use whichever you like. The
second one is more famous
10:11 - One final thing, to be able to point to a
function
10:15 - type of the function pointer must be
appropriate, so in this declaration of 'p'
10:19 - here
10:20 - if I would change it something like
this
10:23 - then this function pointer is meant to
point to a function
10:27 - that should take two integers as
argument and should return void.
10:32 - Add function is returning int so 'p'
cannot point to Add. This will give
10:36 - me compilation error. Once again, if I will
change the declaration something like
10:41 - this
10:41 - if I will have only one argument in the
declaration of a function pointer,
10:46 - then P cannot point to Add. Okay, now
let's use some more functions with
10:51 - different signatures
10:52 - and try to execute them through function
pointers. I'm writing this function
10:56 - PrintHello
10:57 - it will simply print "Hello" on-screen. We
will have to declare
11:02 - a function pointer like this.
11:05 - and then we can initialize the pointer
and fill in the address of this function
11:11 - and now we can execute the function through this pointer
11:14 - Let's see what the output is. 
this looks alright.
11:18 - now let's say we want to say "Hello" to
someone and i'll change the signature of
11:23 - PrintHello
11:24 - To take a string as argument, the
declaration of
11:28 - function pointer will also change.
11:31 - and while calling we will have to
pass a string
11:35 - upon running this program, this is what
I get and this is also looking fine
11:40 - So this is pretty much how we can
create and use function pointers
11:43 - in C or C plus plus. Function pointers are
used in a program in interesting
11:48 - scenarios, they have interesting use cases.
11:50 - we'll talk about the use cases in next
lesson. This is it for this lesson
11:55 - Thanks for watching !