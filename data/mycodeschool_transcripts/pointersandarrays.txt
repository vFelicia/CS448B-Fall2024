00:00 - the concept of pointers and arrays
00:03 - in C or C++ go together.
00:06 - there is a very strong relationship 
between these two concepts
00:09 - and in this lesson we will be 
discussing this relationship
00:12 - when we declare an array let's say we
declare
00:16 - an Integer array A of size 5
00:20 - then we create 5 integer variables named
00:23 - A0 A1 A2 A3 ad A4
00:27 - and  now these five integers will be stored in the memory as a block
00:32 - of
00:33 - five consecutive integers something like 
this
00:36 - what we are showing here in the right if
 A0  or the first element in the
00:40 - array
00:41 - stored at address let's say address 200 and
00:44 - in a typical compile modern day 
compiler integer is stored in four bytes
00:48 - so A1 will be four bytes ahead of A0 at 204
00:53 - and A2 will be at 208 A3 will be at 212
00:57 - A4  will be at 216
01:00 - the overall size of array will be 20
bytes and these 20 bytes
01:05 - will be one consecutive block we are  only showing the section of the memory in
01:10 - which A is
01:11 - stored sometimes we also show the 
memory
01:14 - horizontally something like this from 
left to right
01:18 - we increase the address but these two 
representations are just
01:21 - for the sake of understanding let's use 
the horizontal representation of the
01:25 - memory
01:26 - this time I will show this memory a little 
more extending towards
01:30 - the right so that I can accommodate a 
couple of more variables
01:34 - let's say apart from this integer Array A
01:37 - I have an integer variable
01:40 - X and its value is 5 and let's say
01:44 - X is located at address 300 now
01:48 - let's say I have a pointer to integer P
01:51 - and in P I store address of
01:55 - X if we print P
01:58 - then the value and P would be 300 so 
this statement will print
02:03 - 300 and if we dereference P
02:07 - and try to bring the address stored  in, try 
to print the value stored
02:12 - in this location P in the value would 
be
02:16 - Five this is fine but we also know that
we can do
02:21 - an operation something like increment and decrement
02:24 - a pointer variable by a constant so we 
can do something like P equal
02:28 - the P Plus one and this will take us to
 the address of the next integer
02:32 - and because integer is four bytes so 
now P would be 304
02:37 - so if I want to print p now then the 
output should be 304  but
02:43 - if we try to dereference P now  and try to print
02:46 - * p then we do not know the value 
at this address
02:50 - so we cannot say what will be printed 
it's like
02:53 - we know that Mr ex lives at address 300 
but we do not know
02:58 - who is his neighbor who lives at address
 304
03:02 - but for this integer Array A lets us say  I'm 
writing this same integer array in the
03:07 - right here
03:08 - which is located at address 200 if I declare a pointer to integer
03:13 - P and store the address of the first
element
03:18 - by putting an ampersand operator in
front of A0
03:21 - then printing P would give us
03:25 - in this scenario the output 200 and 
printing
03:29 - *P would give us but before 
that lets
03:33 - say  we have these values in the array 
lets fill up some values in the array
03:37 - so
03:40 - *P would be 2 and if i want to print
03:45 - P plus one then the address would be
03:49 - 204 and if I dereference P+1 and try to
bring this value then
03:56 - print this value it will be Four and similarly if we 
wanted
03:59 - the third element in the array we could do 
a P plus 2
04:03 - here so using pointer arithmetic 
make sense in the case of
04:08 - pointers because in the case arrays 
because we know what
04:11 - is in the adjacent location there is 
one more property of array
04:16 - if we just use the name of the Array A
04:19 - then A gives us the pointer to the 
first element in the array so we can write
04:23 - a statement like
04:24 - P is equal to A in fact we do not 
even need to take this
04:28 - address in another pointer variable if 
we simply print A
04:33 - then this gives us nothing but the
 address of the first element in the array
04:38 - and if we want to dereference this and
04:41 - try to print *A then this will 
give us the value
04:46 - so if we want to perform something like
04:50 - we want to print A plus one then
04:53 - this will give us the address 204 and  *(A+1) will give us the
04:58 - address of the second element in the array
05:00 - value of the second element in the array. For an elemen
05:04 - in the array at index i
05:08 - we can retrieve the address of this 
particular element in the memory
05:12 - using either ampersand A[i]
05:16 - or simply A plus
05:19 - i and these two will give us the address
05:22 - of A[ i] and the value of A[ i] can be
05:26 - retrieved using either we
05:29 - simply use A[ i] or we can also use 
*
05:33 - A plus i and *(A+1)  will also 
give us the value
05:37 - now this is an important concept you can 
write
05:40 - ampersand A[i] or A plus i for each 
other and they mean the same
05:45 - and we can write A[i] or *(A+1)  for each other and they  mean the same
05:51 - tha address of the first element in the array
05:54 - can also be called the Base address and
05:57 - A simply using the variable name A
06:01 - gives us the base address of the array let us 
now
06:05 - see some code examples and try to 
solidify our concepts further
06:10 - in my program lets say we have
06:14 - and integer array A now as we said
06:18 - if we simply print A then this should 
give us the address of the first element
06:23 - in the array
06:24 - and we can also get the address of  the 
first element in the array by
06:27 - using ampersand written in front A[0]
06:31 - if I simply print A[0] it will print 
the first element in the array
06:35 - and we can also print the first element 
in the array
06:38 - by using *
06:41 - operator in front of the variable 
name A
06:45 - let us now run this and see what 
happens
06:48 - and i also need to put an endline afte r
each of these print statements
06:52 - okay so the output is that the first two 
lines are the same
06:57 - they are giving us the address  of the first 
element in array.
07:00 - and the second lines are giving us the 
value in fact
07:04 - if we run a loop like this from 0 to 4
07:08 - then they can print address of the
07:11 - element at index i as &A[i] or
07:14 - (A+i) and we can print the value of ith element as
07:18 - A[i] or *(A+i) now if we see 
the output here
07:24 - this is a fresh run a new run so old 
address allocations will
07:29 - change but if we see the address printed 
in
07:32 - two lines for A[0] is same the value 
same again for A1 address is same
07:37 - four bytes ahead of the previous address 
and the value is as expected
07:42 - and we can go on like this
07:45 - now one more thing even though just
using the variable name
07:49 - A returns us pointer to the
07:52 - base address or the address of  the first
 element
07:55 - and we can equate the variable name
07:59 - A again some pointer variable like 
this you cannot do something like
08:03 - A plus plus increment thel value of  A this 
will give us compilation error
08:07 - we can do something like P++  
once we assign
08:10 - A to some pointer variable, other pointer variable
08:14 - but incrementing A  itself would be in
valid
08:19 - so this was how arrays are stored in memory 
and how
08:23 - that addresses can be manipulated and 
how they can
08:26 - access the values using pointers
08:30 - in the next lessons in the coming lessons we will talk about
08:34 - character arrays and even talk about passing arrays
08:37 - as function arguments.so thanks fo r
watching