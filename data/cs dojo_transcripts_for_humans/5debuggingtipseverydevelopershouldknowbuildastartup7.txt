With timestamps:

00:00 - hi everyone so the other day I was
00:02 - working on my web app called edit dojo
00:05 - and I ran into a really nasty bug it
00:08 - took me a long time to solve it maybe
00:10 - like four hours you know overall it was
00:13 - just a terrible experience just
00:15 - debugging it but I decided to take this
00:17 - opportunity to you know talk about
00:19 - debugging in this video so I'm gonna
00:21 - first walk you through how I solved this
00:24 - particular bug exactly and then along
00:26 - the way I'm also gonna give you some
00:28 - general tips on debugging so you'll be
00:31 - able to use these tips on any
00:33 - programming language even though I'm
00:35 - gonna be using Python in this particular
00:37 - video okay so here's the website I'm
00:39 - making right now I'm running this
00:41 - website locally you can tell that just
00:44 - by looking at the url bar this is the IP
00:47 - address that represents my local server
00:50 - now when you scroll down on this landing
00:53 - page and when you click this button that
00:55 - says sign up signing with Twitter you
00:57 - can sign up or sign in with Twitter go
00:59 - to Twitter and then back to my website
01:01 - so that's the expected behavior but the
01:04 - problem was when I put this website on
01:06 - Heroku which is a website that helps you
01:10 - host your own website in the cloud
01:13 - I started getting a bug okay so let me
01:15 - just quickly show you what the bug was
01:17 - exactly let me go to the version of my
01:20 - website that's hosted on Heroku right
01:22 - here and when I clicked the same button
01:25 - sign up sign in with Twitter I got this
01:28 - error social network login failure and
01:31 - the funny thing was I was running
01:33 - exactly the same code for my local
01:37 - server as well as on Heroku so what's
01:40 - happening here okay so the first thing I
01:42 - thought when I got this error is that
01:44 - the obvious difference between these two
01:46 - situations is the URLs so I thought
01:50 - maybe I set up something incorrectly on
01:52 - Twitter's developer website in regards
01:55 - to the URLs and that actually brings me
01:58 - to the first step I wanted to talk about
01:59 - for debugging in general and that is to
02:03 - come up with a hypothesis and test it
02:05 - and come up with another hypothesis test
02:08 - that
02:09 - so you need to you know really think
02:11 - like a scientist when you're debugging
02:12 - and like I said the initial hypothesis I
02:15 - had for this particular bug was that
02:18 - maybe I setup something incorrectly on
02:20 - Twitter's developer website so I checked
02:22 - it and I checked you know this section
02:25 - in particular callback URL I checked if
02:29 - it's HTTPS or HTTP for example I tried
02:33 - both but none of those things worked so
02:36 - at that point I wanted to come up with
02:38 - another hypothesis but I was sort of out
02:41 - of ideas so I decided to first look into
02:44 - the code to try to see you know the
02:46 - cause of the bug but before doing that I
02:49 - wanted to you know reproduce the bug
02:51 - locally or at least reproduce something
02:53 - similar to the bottom Oakley and that's
02:56 - actually my second tip for debugging
02:57 - I think we're producing the bug locally
03:00 - is important because you know trying to
03:02 - find the cause of a bug usually takes a
03:05 - lot of trials and errors you need to you
03:07 - know sometimes play around with the code
03:08 - too and if you do it with the server it
03:12 - might take a lot of time just
03:12 - communicating with the server so ideally
03:15 - when it's possible and when it's
03:17 - convenient you should try to reproduce
03:19 - the same bug or a similar bug locally
03:22 - and then analyze it there first and in
03:25 - this particular case I just went back to
03:27 - Twitter's developer website and then I
03:30 - actually deleted one of the callback
03:33 - URLs you know the one for the local
03:35 - server and when I did that and when I
03:38 - tried the same thing again on the local
03:40 - server I actually got the same error so
03:43 - this is not necessarily the same bug but
03:46 - I thought you know once I analyzed this
03:48 - particular error I'll be able to use you
03:50 - know the inside I can get from that
03:52 - analysis to find the cause of the
03:54 - original bug so that's exactly what I
03:56 - did and to analyze the error that I just
04:00 - created on my local server more
04:02 - carefully I started reading into the
04:04 - source code and that's actually my third
04:07 - tip to read the source code carefully
04:09 - and then play around with it and this
04:12 - process was actually not that simple for
04:14 - me because I was using this pretty big
04:16 - open source library called Jango all off
04:19 - you know you don't always have to read
04:21 - the source code
04:22 - of every single library you are using
04:24 - but I think it's pretty common to have
04:27 - to be able to read other people's code
04:29 - for example if you end up working with
04:32 - other developers at work anyway I
04:34 - started looking through this codebase
04:36 - some more and I found this directory
04:39 - that says Twitter so I thought you know
04:42 - this must be at the relevant directory
04:44 - here because we're using Twitter logins
04:47 - and you know for example I found
04:49 - viewstub pi file here in the twitter
04:52 - directory and i thought it was relevant
04:54 - so what i did was i copied this file and
04:57 - then pasted a locally to override some
05:01 - of the functions in this file and i
05:04 - actually did the same thing for another
05:05 - file and i called it all these depay
05:08 - because this was built up pi within the
05:10 - awestruck tree and then you know looking
05:13 - through these two files I thought okay
05:15 - this view function right here in our
05:19 - fuse must be the view that's called when
05:23 - this URL is opened by the user that was
05:26 - sort of my hypothesis and to test that I
05:30 - decided to you know put some print
05:32 - statements here and that's actually my
05:34 - fourth tip for debugging to be able to
05:37 - use print statements effectively so let
05:40 - me show you how I usually go about using
05:42 - print statements for debugging here I'm
05:45 - just gonna write print YK one you know
05:49 - YK is my name and the reason that I put
05:51 - my name in my print statements what I'm
05:54 - debugging is so that they're very
05:56 - distinct you know sometimes there are a
05:58 - lot of things being printed into the log
06:01 - and this way it's going to be much
06:03 - easier to find my print statements and
06:05 - then the reason I put a number after my
06:08 - name is so that you know we can do
06:10 - things like print YK one here and then
06:13 - print YK 2 here and this way if we see
06:17 - both of them we'll know that you know
06:19 - both of these parts are being executed
06:21 - but if we only see YK one in the log
06:25 - we'll know that you know only this part
06:27 - is being executed but not this part so
06:30 - here just as an example we can you know
06:32 - spam this whole function with print
06:34 - statements um
06:36 - so YK three here and then YK four here
06:39 - and let's see what happens let me just
06:43 - refresh this page when I go to terminal
06:46 - I see all of these YK one two three and
06:49 - four so from that we can tell that you
06:51 - know all of these parts of this function
06:54 - are being executed and then it goes to
06:56 - self dot dispatch
06:58 - so let's look into this function okay so
07:01 - I looked into that function and then I
07:03 - kept repeating the same pattern
07:05 - basically analyze the code by using a
07:08 - bunch of print statements and then try
07:10 - to understand what's the next function
07:11 - that I should look at and then
07:13 - eventually I got to this function called
07:16 - get request token so I kept doing
07:18 - basically the same thing as what I did
07:20 - earlier for this function
07:21 - you know I added a few more print
07:23 - statements and then I decided to focus
07:25 - on this particular variable called a
07:28 - response because it looks like a
07:31 - response that we get from Twitter and
07:33 - when we try to do Twitter login and so
07:36 - I'm printing the response variable here
07:38 - after the string response so let's see
07:42 - what that looks like it's just this one
07:44 - we have response and then the response
07:47 - variable is response for three that's
07:50 - actually not that helpful so we need to
07:52 - examine it you know a little bit more
07:53 - carefully and that actually brings me to
07:55 - my fifth tip for debugging and that is
07:58 - to use a debugger effectively so just in
08:01 - case you don't know what a debugger is
08:02 - it's a way to run this code and then
08:05 - stop it wherever you want and examine
08:07 - the code more carefully so here I can do
08:10 - import PDB Python debugger and then PDB
08:15 - dot set trace and this way we should be
08:19 - able to when we refresh that page that
08:23 - we saw earlier we should be able to stop
08:25 - it right here so in terminal when you
08:28 - are in the debugger you should see
08:30 - something like this PDP PDB and then
08:33 - there are a lot of different commands
08:35 - here but the only command that matters
08:37 - here is P which you can use to print
08:41 - anything you want to print so if you do
08:43 - P response you should be able to print
08:47 - that
08:48 - and if you do a response that dict that
08:52 - Keys you'll be able to see you know what
08:55 - variables this object has and there's a
08:58 - bunch of stuff here but actually the
09:00 - only one that's important is content and
09:03 - if you do response that content actually
09:08 - responds that content this is what you
09:11 - see
09:12 - I get callback URL not approved for this
09:15 - client application which actually makes
09:18 - sense because you know I got rid of the
09:19 - URL for the local application so you
09:23 - might say you know what's the point of
09:24 - doing all of this well the point is that
09:27 - you know I'm gonna go back to the
09:29 - original code and then here what we can
09:32 - do is we can print not just response but
09:36 - also response dot content I think so
09:39 - this way we'll be able to print more
09:41 - information about the error that we are
09:43 - getting and we'll be able to do the same
09:45 - thing for our server in the cloud too
09:48 - so after that I committed all of these
09:50 - changes on git and then I pushed those
09:53 - changes to Heroku so we can test it
09:56 - there and then you know on the Heroku
09:59 - version of the website I made sure you
10:01 - know I'm still getting the same error
10:03 - and I checked the logs with this command
10:07 - and here this is what we're getting a
10:10 - response content is you know bunch of
10:13 - stuff here and then the message is could
10:15 - not authenticate you so it's obviously
10:18 - different from the error that we saw
10:20 - earlier and so I started thinking you
10:22 - know what could be the cause of this
10:24 - could not authenticate you well you know
10:27 - one common reason of not being able to
10:30 - authenticate is that the passwords are
10:32 - wrong right and it turned out when I was
10:36 - copying my Twitter Keys Twitter API keys
10:39 - from local to Heroku using this thing
10:42 - called environment variables I missed
10:45 - one letter from from one of my passwords
10:48 - and that's actually why I was getting
10:50 - this bug and that's why I ended up
10:53 - spending four hours just debugging it
10:55 - and you might say you know you could
10:57 - have checked it like in the first place
10:58 - when you got the bug but
11:00 - sometimes you just don't think of it and
11:02 - you know you end up wasting time anyway
11:05 - that's it for this video hopefully you
11:07 - learned something new today and if you
11:09 - have any other you know debugging tips
11:11 - feel free to share them in the comment
11:13 - section because you know other people
11:15 - might be able to learn from them
11:17 - and I'm gonna put the code I showed you
11:19 - today at this URL as usual and thank you
11:23 - as always for watching my videos I'll
11:24 - see you guys in the next one

Cleaned transcript:

hi everyone so the other day I was working on my web app called edit dojo and I ran into a really nasty bug it took me a long time to solve it maybe like four hours you know overall it was just a terrible experience just debugging it but I decided to take this opportunity to you know talk about debugging in this video so I'm gonna first walk you through how I solved this particular bug exactly and then along the way I'm also gonna give you some general tips on debugging so you'll be able to use these tips on any programming language even though I'm gonna be using Python in this particular video okay so here's the website I'm making right now I'm running this website locally you can tell that just by looking at the url bar this is the IP address that represents my local server now when you scroll down on this landing page and when you click this button that says sign up signing with Twitter you can sign up or sign in with Twitter go to Twitter and then back to my website so that's the expected behavior but the problem was when I put this website on Heroku which is a website that helps you host your own website in the cloud I started getting a bug okay so let me just quickly show you what the bug was exactly let me go to the version of my website that's hosted on Heroku right here and when I clicked the same button sign up sign in with Twitter I got this error social network login failure and the funny thing was I was running exactly the same code for my local server as well as on Heroku so what's happening here okay so the first thing I thought when I got this error is that the obvious difference between these two situations is the URLs so I thought maybe I set up something incorrectly on Twitter's developer website in regards to the URLs and that actually brings me to the first step I wanted to talk about for debugging in general and that is to come up with a hypothesis and test it and come up with another hypothesis test that so you need to you know really think like a scientist when you're debugging and like I said the initial hypothesis I had for this particular bug was that maybe I setup something incorrectly on Twitter's developer website so I checked it and I checked you know this section in particular callback URL I checked if it's HTTPS or HTTP for example I tried both but none of those things worked so at that point I wanted to come up with another hypothesis but I was sort of out of ideas so I decided to first look into the code to try to see you know the cause of the bug but before doing that I wanted to you know reproduce the bug locally or at least reproduce something similar to the bottom Oakley and that's actually my second tip for debugging I think we're producing the bug locally is important because you know trying to find the cause of a bug usually takes a lot of trials and errors you need to you know sometimes play around with the code too and if you do it with the server it might take a lot of time just communicating with the server so ideally when it's possible and when it's convenient you should try to reproduce the same bug or a similar bug locally and then analyze it there first and in this particular case I just went back to Twitter's developer website and then I actually deleted one of the callback URLs you know the one for the local server and when I did that and when I tried the same thing again on the local server I actually got the same error so this is not necessarily the same bug but I thought you know once I analyzed this particular error I'll be able to use you know the inside I can get from that analysis to find the cause of the original bug so that's exactly what I did and to analyze the error that I just created on my local server more carefully I started reading into the source code and that's actually my third tip to read the source code carefully and then play around with it and this process was actually not that simple for me because I was using this pretty big open source library called Jango all off you know you don't always have to read the source code of every single library you are using but I think it's pretty common to have to be able to read other people's code for example if you end up working with other developers at work anyway I started looking through this codebase some more and I found this directory that says Twitter so I thought you know this must be at the relevant directory here because we're using Twitter logins and you know for example I found viewstub pi file here in the twitter directory and i thought it was relevant so what i did was i copied this file and then pasted a locally to override some of the functions in this file and i actually did the same thing for another file and i called it all these depay because this was built up pi within the awestruck tree and then you know looking through these two files I thought okay this view function right here in our fuse must be the view that's called when this URL is opened by the user that was sort of my hypothesis and to test that I decided to you know put some print statements here and that's actually my fourth tip for debugging to be able to use print statements effectively so let me show you how I usually go about using print statements for debugging here I'm just gonna write print YK one you know YK is my name and the reason that I put my name in my print statements what I'm debugging is so that they're very distinct you know sometimes there are a lot of things being printed into the log and this way it's going to be much easier to find my print statements and then the reason I put a number after my name is so that you know we can do things like print YK one here and then print YK 2 here and this way if we see both of them we'll know that you know both of these parts are being executed but if we only see YK one in the log we'll know that you know only this part is being executed but not this part so here just as an example we can you know spam this whole function with print statements um so YK three here and then YK four here and let's see what happens let me just refresh this page when I go to terminal I see all of these YK one two three and four so from that we can tell that you know all of these parts of this function are being executed and then it goes to self dot dispatch so let's look into this function okay so I looked into that function and then I kept repeating the same pattern basically analyze the code by using a bunch of print statements and then try to understand what's the next function that I should look at and then eventually I got to this function called get request token so I kept doing basically the same thing as what I did earlier for this function you know I added a few more print statements and then I decided to focus on this particular variable called a response because it looks like a response that we get from Twitter and when we try to do Twitter login and so I'm printing the response variable here after the string response so let's see what that looks like it's just this one we have response and then the response variable is response for three that's actually not that helpful so we need to examine it you know a little bit more carefully and that actually brings me to my fifth tip for debugging and that is to use a debugger effectively so just in case you don't know what a debugger is it's a way to run this code and then stop it wherever you want and examine the code more carefully so here I can do import PDB Python debugger and then PDB dot set trace and this way we should be able to when we refresh that page that we saw earlier we should be able to stop it right here so in terminal when you are in the debugger you should see something like this PDP PDB and then there are a lot of different commands here but the only command that matters here is P which you can use to print anything you want to print so if you do P response you should be able to print that and if you do a response that dict that Keys you'll be able to see you know what variables this object has and there's a bunch of stuff here but actually the only one that's important is content and if you do response that content actually responds that content this is what you see I get callback URL not approved for this client application which actually makes sense because you know I got rid of the URL for the local application so you might say you know what's the point of doing all of this well the point is that you know I'm gonna go back to the original code and then here what we can do is we can print not just response but also response dot content I think so this way we'll be able to print more information about the error that we are getting and we'll be able to do the same thing for our server in the cloud too so after that I committed all of these changes on git and then I pushed those changes to Heroku so we can test it there and then you know on the Heroku version of the website I made sure you know I'm still getting the same error and I checked the logs with this command and here this is what we're getting a response content is you know bunch of stuff here and then the message is could not authenticate you so it's obviously different from the error that we saw earlier and so I started thinking you know what could be the cause of this could not authenticate you well you know one common reason of not being able to authenticate is that the passwords are wrong right and it turned out when I was copying my Twitter Keys Twitter API keys from local to Heroku using this thing called environment variables I missed one letter from from one of my passwords and that's actually why I was getting this bug and that's why I ended up spending four hours just debugging it and you might say you know you could have checked it like in the first place when you got the bug but sometimes you just don't think of it and you know you end up wasting time anyway that's it for this video hopefully you learned something new today and if you have any other you know debugging tips feel free to share them in the comment section because you know other people might be able to learn from them and I'm gonna put the code I showed you today at this URL as usual and thank you as always for watching my videos I'll see you guys in the next one
