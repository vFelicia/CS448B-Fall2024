With timestamps:

00:00 - hey everyone today I have a coding
00:02 - interview question that's being asked by
00:03 - Facebook in this problem you're given a
00:06 - mapping that's like this one so in this
00:09 - mapping the letter A maps to one as you
00:12 - can see and B to 2 and so on up to D
00:16 - which maps to 26 and with this mapping
00:19 - if you're given a message in a string
00:21 - for example a B you can convert it to
00:24 - another string in this case 1 2 because
00:27 - a maps to 1 and B maps to 2 and in this
00:31 - problem you're given the converted
00:33 - version of the string for example 1 2
00:35 - again let's call it data for now and the
00:39 - problem is can you write a function that
00:40 - takes this data as the input and returns
00:44 - the number of messages that could have
00:46 - been the original message or in other
00:48 - words how many ways are there to decode
00:51 - this message back to the original
00:53 - message so for example if the given
00:55 - input is 1 2 your function let's call it
00:59 - num ways of data should return 2 because
01:03 - there are 2 possible messages that can
01:07 - be encoded into one - one of them is as
01:11 - we saw earlier a B and the other one is
01:15 - actually just L because L maps to 12 and
01:21 - if you're given for example 0 1 instead
01:25 - as the data your function num ways of
01:29 - data should return 0 instead because
01:33 - there's no message that maps to 0 1 okay
01:37 - try solving this problem in off n in
01:41 - time where n is the number of letters in
01:44 - the given string data and by the way
01:46 - just for simplicity you can assume that
01:49 - the given data string has only digits
01:52 - inside you know between 0 and 9 ok pause
01:56 - the video right here if you want to try
01:57 - solving this problem by yourself and by
02:00 - the way this problem came from this
02:01 - website called daily coding problem you
02:04 - can get more problems just like this one
02:06 - through my referral and discount link si
02:09 - esto Jota io / daily anyway here's my
02:12 - solution
02:13 - I would first think about simpler
02:15 - examples so for example what if you're
02:18 - given three as the input then there's
02:21 - only one message that can be encoded
02:23 - into three and that's simply the letter
02:26 - C so your function should return one and
02:30 - what if you're given the empty string
02:32 - then the original message must have been
02:35 - an empty string as well so there's only
02:38 - one possible message here as well so
02:41 - your function should return one okay and
02:44 - what if you're given more complex inputs
02:47 - for example this one one two three four
02:50 - and five well in that case let's examine
02:53 - the input one three four and five then
02:56 - we can think about decoding it from left
03:00 - to right sequentially and at the
03:03 - beginning there are two choices the
03:05 - first one is to look at the first letter
03:08 - one by itself and then decode it back to
03:12 - a because as we saw earlier a maps to
03:15 - one and the second choice is to look at
03:18 - the first and the second letter together
03:20 - and then decode it back to L instead
03:23 - because L maps to 12 now if you go with
03:28 - the first choice and decode one to a
03:31 - then the whole message that you get by
03:34 - decoding the whole string will look like
03:37 - this it'll be a put together with
03:41 - whatever you get by decoding the rest of
03:44 - the message two three four and five and
03:46 - if you go with the second choice and
03:48 - decode one to 2l what's gonna be left
03:51 - will be three four five so the whole
03:54 - message that you get by decoding the
03:56 - whole string will be L put together with
04:00 - whatever you get by decoding three four
04:03 - five the rest of the message so actually
04:06 - the number of ways we can decode this
04:08 - message one two three four five will be
04:11 - the sum of the number of ways we can
04:14 - decode two three four five and the
04:17 - number of ways we can decode three four
04:19 - five so that's what I wrote here num
04:22 - ways of one two three four five is the
04:24 - sum of numbers of two three four five
04:27 - and numb ways of three four five and
04:29 - this is starting to look like recursion
04:32 - anyway let's take a look at another
04:34 - example what if you're given two seven
04:37 - three four five instead well you might
04:39 - say let's try the same thing so let's do
04:41 - that one way to decode this is to look
04:44 - at the first letter and then decode it
04:47 - back to B and that way the whole message
04:50 - you get by decoding the whole string
04:52 - will be be combined with whatever you
04:56 - get by decoding the rest of the message
04:58 - seven three four and five and what if
05:01 - you look at the first and the second
05:03 - letters together well there's no single
05:05 - letter in our mapping system that map's
05:08 - directly to 27 and that's just because
05:11 - we only have up to Z which maps to 26 so
05:16 - actually this is the only way to decode
05:19 - to seven three four and five so the
05:22 - number of ways of decoding this message
05:24 - to seven three four and five is
05:26 - equivalent to the number of ways of
05:28 - decoding seven three four and five and
05:32 - that's what I wrote right here let's
05:34 - take a look at just one more example
05:36 - here what if you're given a string that
05:39 - starts with 0 at the beginning well in
05:42 - that case there's no message that would
05:44 - encode into this string there are 1 1
05:47 - because no single letter maps to 0 or 0
05:52 - 1 so num ways of 0 1 1 should return
05:56 - there now using all of these let's write
05:59 - our function recursively they're
06:01 - basically two base cases here the first
06:04 - one is when the string is empty and the
06:07 - second one is when the given string
06:08 - starts with at 0 and for the recursive
06:12 - case there are two cases the first one
06:14 - being when we need to call our function
06:16 - recursively twice and the second one is
06:19 - when we need to only call the function
06:21 - recursively once ok let's see how we can
06:24 - turn this idea into code like we saw
06:27 - earlier we're going to call our function
06:28 - num ways of data and instead of calling
06:31 - this function recursively directly we're
06:34 - going to define another function let's
06:36 - call it just helper and we're gonna call
06:39 - this function recursively
06:41 - it's gonna take data the given string
06:43 - and K which is going to be a
06:46 - non-negative integer and in the helper
06:49 - function we're only gonna look at the
06:51 - last K letters of data so for example if
06:55 - the given data is let's say ABCD and if
07:00 - the given K is 3 we're only gonna look
07:03 - at the last three letters BCD and this
07:07 - way we don't have to create a new string
07:09 - every time we call our function
07:11 - recursively and this helper function
07:13 - will return the number of ways we can
07:16 - decode the last K letters of the string
07:19 - and that means from our main function
07:21 - num ways all we need to do is we just
07:24 - need to return helper of data and Dara's
07:28 - length and that's the full string okay
07:32 - now in the helper function let's take
07:34 - care of the two base cases first the
07:36 - first one was when the string is empty
07:38 - we need to return one so we're just
07:41 - going to write if K or the number of
07:44 - letters we're going to look at is 0 then
07:47 - we're gonna return 1 and the second base
07:49 - case was when the first letter is 0 we
07:53 - needed to return 0 and to do this and to
07:56 - make it just a little bit more
07:58 - convenient we're gonna define a new
08:00 - variable called s which is going to be
08:02 - the starting index of the letters that
08:04 - were examining that's there as length
08:07 - minus K and using this we can say if
08:11 - data square brackets S or the letter or
08:15 - the character at the index S of data is
08:18 - equal to 0 then we're gonna return 0 now
08:23 - the next case we need to take care of
08:25 - are the two recursive cases that we saw
08:27 - earlier the case where we need to call
08:30 - the recursive function twice and the
08:32 - case where we need to call the function
08:34 - recursively only once this is the
08:37 - notation we used earlier but since we're
08:39 - not gonna call num ways recursively
08:41 - let's fix this notation so we have
08:44 - everything consistent okay here we're
08:47 - calling the helper function recursively
08:48 - instead we're never gonna change the
08:51 - first argument
08:53 - and in this first case right here we
08:55 - have one two three four five now let's
08:58 - say K right now is five in that case
09:01 - there are two ways to go about this the
09:04 - first one is to interpret the first
09:05 - letter by itself and then decode it back
09:08 - to a and in that case we're gonna call
09:12 - helper with the same string and K minus
09:14 - 1 the second way is to interpret the
09:17 - first two letters together and then they
09:19 - code it back to L instead and for that
09:23 - we're gonna call helper with the same
09:25 - string again and K minus two so with the
09:28 - first we curse we call K minus 1 becomes
09:31 - four and we're gonna look at these four
09:34 - letters and then with the second case K
09:38 - minus two becomes three and we're gonna
09:40 - take a look at the last three letters
09:42 - let's also examine the second case
09:44 - that's one for example we have two seven
09:47 - three four five as the string and five
09:50 - as K in that case there is no letter
09:53 - that maps to 27 so we only need to say
09:57 - we need to interpret two as B and then
10:02 - take a look at the rest of the string
10:04 - the last four characters so we need to
10:07 - only call helper again with two seven
10:10 - three four five and K minus 1 which is 4
10:13 - so basically what we're gonna return
10:15 - from helper of the string and K will be
10:19 - either the sum of helper of the same
10:22 - string and K minus 1 and helper of the
10:25 - same string and K minus 2 or just helper
10:29 - of the same string and K minus 1 I think
10:32 - you'll notice that in either case we
10:34 - have helper of the same string and K
10:38 - minus 1 so let's store that in a new
10:41 - variable called result by writing
10:43 - results
10:44 - EKOS helper of data k minus 1 and then
10:47 - we need to add helper of the same string
10:50 - k minus 1 to that result only when we
10:53 - can interpret the first two letters of
10:56 - the part of the string that we're
10:58 - examining as a single letter so that's
11:01 - when the first two letters the number
11:04 - that it represents is less than or
11:06 - go to 26 and also greater than or you go
11:11 - to 10 we can check that by writing if K
11:15 - is greater than or equal to 2 and int of
11:19 - data square brackets s con s plus 2 is
11:22 - less than or equal to 26 so we need to
11:26 - first say K greater than or equal to 2
11:29 - make sure that we have at least 2
11:31 - letters in the part of the string that
11:33 - we're examining and then let's just say
11:35 - here that data square brackets
11:37 - s : s plus 2 retrieves the substring
11:40 - that we're interested in the first two
11:42 - letters of the part of the string that
11:44 - we're examining and then we need to
11:46 - convert it to an integer and make sure
11:49 - that that's less than or equal to 26 we
11:52 - don't have to worry about that part
11:54 - being greater than or equal to 10 here
11:57 - actually because that part is already
11:59 - taken care of when we check that data
12:02 - square brackets S or the first letter of
12:04 - the part of the string that we're
12:05 - examining is not equal to 0 so if it
12:08 - satisfies these two conditions
12:11 - then we'll add helper of data comma K
12:14 - minus 2 to the results and then after
12:17 - that we just need to return results now
12:20 - this solution works but it can be very
12:22 - inefficient depending on the nature of
12:24 - the input so let's see why that's the
12:27 - case and for that let's examine the
12:29 - worst case for this problem that's when
12:32 - we're given a string that solely
12:34 - consists of ones because then there are
12:37 - many many ways to interpret this string
12:39 - and if that was the case num ways of
12:42 - let's say six ones that would go into
12:45 - helper of the same string and six and to
12:49 - find the value for that we need to find
12:51 - the values for these two helper of the
12:54 - same string and five and helper of that
12:56 - string and four and here if we write
12:59 - this one hopper of six ones and six as
13:02 - age of six we'll see that to find the
13:06 - value for H of six we need to first find
13:08 - the values for H of 5 and H of 4 and to
13:12 - find the return value for H of 5 we need
13:15 - to first find the return values for H of
13:17 - 4 and H of 3 and so on and
13:20 - just like we saw in my video about
13:22 - Fibonacci sequence this is not the most
13:24 - efficient approach because we need to
13:27 - repeat some of the competition's over
13:29 - and over again for example to find H of
13:31 - 4 here and here and this actually takes
13:34 - about of 2 ^ and in time to find the
13:40 - number of ways to interpret a string
13:42 - with n letters inside and to fix this we
13:46 - can just use dynamic programming and
13:48 - memorization to do that let's say if
13:51 - we're trying to find num ways of 1 1 1
13:54 - then we'll create a new array with n
13:57 - plus 1 elements or 4 elements in this
14:01 - particular case and then we're going to
14:03 - use this to store some of the
14:04 - intermediate results from our function
14:06 - we're gonna store helper of 1 1 1 K at
14:10 - index K so if K is 1 that goes into this
14:15 - one and this way helper of 1 1 1 and N
14:19 - or the last value that we need to find
14:22 - will go into the last index of this
14:26 - array right here and with that our code
14:29 - is going to look like this this is
14:31 - almost identical to what we had earlier
14:34 - except for these orange parts and the
14:37 - first thing that's different
14:38 - well is that we change the names a bit
14:40 - you know we have none ways of DP and
14:43 - helper of DP now and in num ways of DP
14:47 - we first define a new integer array
14:50 - whose length is the original data length
14:53 - plus 1 so that's n plus 1 and then let's
14:56 - say we want to initialize every element
14:58 - of this array to now just like that and
15:01 - then we're going to put it in a new
15:03 - variable called memo and instead of
15:05 - calling helper with data and data as
15:07 - length which is what we did earlier
15:10 - we're passing memo as an argument as
15:13 - well now in helper DP after taking care
15:16 - of the base cases if we have a value
15:19 - already stored at index K of memo then
15:23 - that's not gonna be now so if memo of K
15:26 - is not now we're gonna return that value
15:28 - instead of going through the whole
15:30 - function and otherwise this is the first
15:33 - time we're
15:34 - running this function with this
15:35 - particular K so we'll find the result
15:38 - and then instead of returning results
15:40 - right away we're gonna store it in memo
15:42 - at index K and then we're gonna return
15:45 - results okay and that's my solution and
15:48 - with this solution it only actually
15:50 - takes both n in time to find num ways of
15:54 - the given string instead of two to the
15:56 - power of n that we saw earlier and by
15:59 - the way like I said earlier this problem
16:01 - came from this website called daily
16:03 - coding problem you can find a website
16:05 - through my referral link CS dojo da io /
16:08 - daily it's a website that gives you a
16:10 - daily coding problem to practice with
16:12 - and it's actually a website that's run
16:15 - by a friend of mine I used to work with
16:16 - at Google if you use my referral link
16:19 - it's gonna give you a 10% discount on
16:21 - their premium subscription but I would
16:24 - say even their free option and their
16:26 - blog articles that you're looking at
16:27 - right now are pretty good anyway thank
16:30 - you so much for watching my videos as
16:32 - always and I'll see you guys in the next
16:34 - video

Cleaned transcript:

hey everyone today I have a coding interview question that's being asked by Facebook in this problem you're given a mapping that's like this one so in this mapping the letter A maps to one as you can see and B to 2 and so on up to D which maps to 26 and with this mapping if you're given a message in a string for example a B you can convert it to another string in this case 1 2 because a maps to 1 and B maps to 2 and in this problem you're given the converted version of the string for example 1 2 again let's call it data for now and the problem is can you write a function that takes this data as the input and returns the number of messages that could have been the original message or in other words how many ways are there to decode this message back to the original message so for example if the given input is 1 2 your function let's call it num ways of data should return 2 because there are 2 possible messages that can be encoded into one one of them is as we saw earlier a B and the other one is actually just L because L maps to 12 and if you're given for example 0 1 instead as the data your function num ways of data should return 0 instead because there's no message that maps to 0 1 okay try solving this problem in off n in time where n is the number of letters in the given string data and by the way just for simplicity you can assume that the given data string has only digits inside you know between 0 and 9 ok pause the video right here if you want to try solving this problem by yourself and by the way this problem came from this website called daily coding problem you can get more problems just like this one through my referral and discount link si esto Jota io / daily anyway here's my solution I would first think about simpler examples so for example what if you're given three as the input then there's only one message that can be encoded into three and that's simply the letter C so your function should return one and what if you're given the empty string then the original message must have been an empty string as well so there's only one possible message here as well so your function should return one okay and what if you're given more complex inputs for example this one one two three four and five well in that case let's examine the input one three four and five then we can think about decoding it from left to right sequentially and at the beginning there are two choices the first one is to look at the first letter one by itself and then decode it back to a because as we saw earlier a maps to one and the second choice is to look at the first and the second letter together and then decode it back to L instead because L maps to 12 now if you go with the first choice and decode one to a then the whole message that you get by decoding the whole string will look like this it'll be a put together with whatever you get by decoding the rest of the message two three four and five and if you go with the second choice and decode one to 2l what's gonna be left will be three four five so the whole message that you get by decoding the whole string will be L put together with whatever you get by decoding three four five the rest of the message so actually the number of ways we can decode this message one two three four five will be the sum of the number of ways we can decode two three four five and the number of ways we can decode three four five so that's what I wrote here num ways of one two three four five is the sum of numbers of two three four five and numb ways of three four five and this is starting to look like recursion anyway let's take a look at another example what if you're given two seven three four five instead well you might say let's try the same thing so let's do that one way to decode this is to look at the first letter and then decode it back to B and that way the whole message you get by decoding the whole string will be be combined with whatever you get by decoding the rest of the message seven three four and five and what if you look at the first and the second letters together well there's no single letter in our mapping system that map's directly to 27 and that's just because we only have up to Z which maps to 26 so actually this is the only way to decode to seven three four and five so the number of ways of decoding this message to seven three four and five is equivalent to the number of ways of decoding seven three four and five and that's what I wrote right here let's take a look at just one more example here what if you're given a string that starts with 0 at the beginning well in that case there's no message that would encode into this string there are 1 1 because no single letter maps to 0 or 0 1 so num ways of 0 1 1 should return there now using all of these let's write our function recursively they're basically two base cases here the first one is when the string is empty and the second one is when the given string starts with at 0 and for the recursive case there are two cases the first one being when we need to call our function recursively twice and the second one is when we need to only call the function recursively once ok let's see how we can turn this idea into code like we saw earlier we're going to call our function num ways of data and instead of calling this function recursively directly we're going to define another function let's call it just helper and we're gonna call this function recursively it's gonna take data the given string and K which is going to be a nonnegative integer and in the helper function we're only gonna look at the last K letters of data so for example if the given data is let's say ABCD and if the given K is 3 we're only gonna look at the last three letters BCD and this way we don't have to create a new string every time we call our function recursively and this helper function will return the number of ways we can decode the last K letters of the string and that means from our main function num ways all we need to do is we just need to return helper of data and Dara's length and that's the full string okay now in the helper function let's take care of the two base cases first the first one was when the string is empty we need to return one so we're just going to write if K or the number of letters we're going to look at is 0 then we're gonna return 1 and the second base case was when the first letter is 0 we needed to return 0 and to do this and to make it just a little bit more convenient we're gonna define a new variable called s which is going to be the starting index of the letters that were examining that's there as length minus K and using this we can say if data square brackets S or the letter or the character at the index S of data is equal to 0 then we're gonna return 0 now the next case we need to take care of are the two recursive cases that we saw earlier the case where we need to call the recursive function twice and the case where we need to call the function recursively only once this is the notation we used earlier but since we're not gonna call num ways recursively let's fix this notation so we have everything consistent okay here we're calling the helper function recursively instead we're never gonna change the first argument and in this first case right here we have one two three four five now let's say K right now is five in that case there are two ways to go about this the first one is to interpret the first letter by itself and then decode it back to a and in that case we're gonna call helper with the same string and K minus 1 the second way is to interpret the first two letters together and then they code it back to L instead and for that we're gonna call helper with the same string again and K minus two so with the first we curse we call K minus 1 becomes four and we're gonna look at these four letters and then with the second case K minus two becomes three and we're gonna take a look at the last three letters let's also examine the second case that's one for example we have two seven three four five as the string and five as K in that case there is no letter that maps to 27 so we only need to say we need to interpret two as B and then take a look at the rest of the string the last four characters so we need to only call helper again with two seven three four five and K minus 1 which is 4 so basically what we're gonna return from helper of the string and K will be either the sum of helper of the same string and K minus 1 and helper of the same string and K minus 2 or just helper of the same string and K minus 1 I think you'll notice that in either case we have helper of the same string and K minus 1 so let's store that in a new variable called result by writing results EKOS helper of data k minus 1 and then we need to add helper of the same string k minus 1 to that result only when we can interpret the first two letters of the part of the string that we're examining as a single letter so that's when the first two letters the number that it represents is less than or go to 26 and also greater than or you go to 10 we can check that by writing if K is greater than or equal to 2 and int of data square brackets s con s plus 2 is less than or equal to 26 so we need to first say K greater than or equal to 2 make sure that we have at least 2 letters in the part of the string that we're examining and then let's just say here that data square brackets s s plus 2 retrieves the substring that we're interested in the first two letters of the part of the string that we're examining and then we need to convert it to an integer and make sure that that's less than or equal to 26 we don't have to worry about that part being greater than or equal to 10 here actually because that part is already taken care of when we check that data square brackets S or the first letter of the part of the string that we're examining is not equal to 0 so if it satisfies these two conditions then we'll add helper of data comma K minus 2 to the results and then after that we just need to return results now this solution works but it can be very inefficient depending on the nature of the input so let's see why that's the case and for that let's examine the worst case for this problem that's when we're given a string that solely consists of ones because then there are many many ways to interpret this string and if that was the case num ways of let's say six ones that would go into helper of the same string and six and to find the value for that we need to find the values for these two helper of the same string and five and helper of that string and four and here if we write this one hopper of six ones and six as age of six we'll see that to find the value for H of six we need to first find the values for H of 5 and H of 4 and to find the return value for H of 5 we need to first find the return values for H of 4 and H of 3 and so on and just like we saw in my video about Fibonacci sequence this is not the most efficient approach because we need to repeat some of the competition's over and over again for example to find H of 4 here and here and this actually takes about of 2 ^ and in time to find the number of ways to interpret a string with n letters inside and to fix this we can just use dynamic programming and memorization to do that let's say if we're trying to find num ways of 1 1 1 then we'll create a new array with n plus 1 elements or 4 elements in this particular case and then we're going to use this to store some of the intermediate results from our function we're gonna store helper of 1 1 1 K at index K so if K is 1 that goes into this one and this way helper of 1 1 1 and N or the last value that we need to find will go into the last index of this array right here and with that our code is going to look like this this is almost identical to what we had earlier except for these orange parts and the first thing that's different well is that we change the names a bit you know we have none ways of DP and helper of DP now and in num ways of DP we first define a new integer array whose length is the original data length plus 1 so that's n plus 1 and then let's say we want to initialize every element of this array to now just like that and then we're going to put it in a new variable called memo and instead of calling helper with data and data as length which is what we did earlier we're passing memo as an argument as well now in helper DP after taking care of the base cases if we have a value already stored at index K of memo then that's not gonna be now so if memo of K is not now we're gonna return that value instead of going through the whole function and otherwise this is the first time we're running this function with this particular K so we'll find the result and then instead of returning results right away we're gonna store it in memo at index K and then we're gonna return results okay and that's my solution and with this solution it only actually takes both n in time to find num ways of the given string instead of two to the power of n that we saw earlier and by the way like I said earlier this problem came from this website called daily coding problem you can find a website through my referral link CS dojo da io / daily it's a website that gives you a daily coding problem to practice with and it's actually a website that's run by a friend of mine I used to work with at Google if you use my referral link it's gonna give you a 10% discount on their premium subscription but I would say even their free option and their blog articles that you're looking at right now are pretty good anyway thank you so much for watching my videos as always and I'll see you guys in the next video
