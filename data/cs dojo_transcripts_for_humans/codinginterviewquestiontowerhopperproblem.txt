With timestamps:

00:00 - here's one of my favorite coding
00:01 - interview problems that I've seen so far
00:03 - and I'm going to call it the power
00:05 - hopper problem here and here's the
00:07 - problem you're given an array of
00:09 - integers and each integer in this array
00:13 - represents the height of the tower in
00:15 - that position so with this given array
00:18 - we have six towers with the heights for
00:22 - two zero zero two and zero and the
00:26 - numbers you see at the top are just the
00:28 - indexes for the towers and here's the
00:31 - objective of this problem you start at
00:34 - index zero just imagine you're standing
00:36 - on this tower at index zero of height
00:41 - four and you're going to jump from this
00:44 - tower to another tower to another power
00:46 - and eventually we want to see if there's
00:49 - any way to get to the end of the array
00:52 - or to be precise to outside of this
00:56 - array and the amount of steps that you
00:58 - can jump over depends on the height of
01:00 - the tower that you're standing on so for
01:03 - example if you're standing on the first
01:04 - tower at index zero because the height
01:07 - is four you're able to jump over four
01:11 - steps at most so at most you can choose
01:14 - to jump over to index four or you can
01:18 - choose to jump over to anything less
01:20 - than that
01:21 - so either index one two or three
01:24 - whatever the next step that you choose
01:27 - you're going to repeat the same process
01:28 - so for example if you choose to go to
01:31 - index one after index zero you have a
01:36 - choice between jumping over to index
01:39 - three or index two because the height of
01:41 - this tower is two so the maximum number
01:44 - of steps that you can jump is two and in
01:48 - this particular example you can jump
01:50 - from index 0 the starting point to index
01:54 - 4 by jumping over four steps which is
01:57 - the maximum steps that's allowed from
01:59 - this tower and then jump from there to
02:03 - outside of this array by jumping over
02:05 - two steps and note here that if you jump
02:09 - just one step and get to index five
02:13 - then that wouldn't clear the requirement
02:15 - because our goal is to get outside of
02:18 - this array and not just to the end of
02:21 - the array now to formalize this problem
02:24 - a little bit what we want to do is we
02:26 - want to be able to write a function
02:28 - called is halibel which takes the given
02:31 - array and returns true if it's possible
02:34 - to start at index zero and hop from one
02:39 - tower to another and eventually get
02:41 - outside of this array as we saw earlier
02:43 - is hobble of these towers should return
02:47 - true but is hobble of one zero should
02:51 - return false because with this
02:53 - particular set of towers the only choice
02:56 - here is to start at index zero and they
02:59 - help to index one and from there we
03:02 - won't be able to help anywhere because
03:04 - the height of that Tower is zero now as
03:07 - usual if you want to practice pause the
03:10 - video right here and see if you get
03:11 - solved the problem and come back to the
03:13 - video when you're done or stuck there
03:16 - are a few potential solutions for this
03:18 - problem and one of them is using a graph
03:21 - we can look at each tower as a node in
03:24 - our graph and each path each potential
03:27 - path from one tower to another as an
03:31 - edge between these nodes and using these
03:34 - we can construct a graph that represents
03:37 - the towers and the paths between them
03:40 - and the objective in this solution will
03:42 - be to find a path from the first node or
03:46 - the first tower of height for at index 0
03:49 - to the outside of this array and the
03:53 - outside of this array can be represented
03:55 - as one of the nodes once we have that we
03:59 - just need to use breadth-first search or
04:01 - depth-first search to find at least one
04:05 - path to see if we can get from the first
04:07 - node to outside of the 3 another
04:12 - potential solution to this problem is a
04:14 - dynamic programming or a recursive
04:17 - approach if you look at the original
04:19 - problem of writing a stoppable it's a
04:22 - hard problem it seems like a hard
04:24 - problem so the idea behind
04:27 - dynamic programming or recursive
04:29 - approach is to break it down into
04:31 - smaller problems and then solve those
04:33 - instead so we'll try to write a function
04:36 - called helper which takes two arguments
04:39 - powers which is the same as the original
04:42 - towers and an index value or an integer
04:47 - value which represents the starting
04:49 - index and helper of towers and the
04:52 - starting index should return true if
04:55 - it's possible to start at the given
04:57 - index in this case in x4 and help from
05:02 - this tower to maybe another tower to
05:04 - another tower and eventually get outside
05:06 - of this array in this particular case
05:09 - this should return true because it's
05:13 - obvious that we can help two steps from
05:16 - index four and get outside of this array
05:18 - and the idea of this approach is to
05:22 - write a stoppable by recursively calling
05:25 - the helper function I'm not going to go
05:28 - into too much detail here but for
05:31 - example if we already know that the
05:33 - return value for helper of towers and
05:36 - four should be true it's going to be
05:38 - easy for us easier at least for us to
05:41 - find the return value for helper of
05:44 - towers and there
05:45 - this is asking ourselves is it possible
05:48 - for us to start at index zero and then
05:52 - help to another tower maybe another
05:54 - tower and eventually get outside of this
05:57 - array so this is equivalent to in
06:00 - stoppable of towers and right away we'll
06:03 - know that it's possible for us to go
06:04 - from index 0 to index 4 just by hopping
06:09 - because the maximum number of steps that
06:12 - we can help from this tower is 4 and
06:15 - since we already know that it's possible
06:17 - for us to go from index 4 to outsiders
06:21 - array from helper of towers for we'll
06:24 - know that helper of towers and there
06:26 - should be also true now both of these
06:30 - approaches work the graph approach and
06:32 - the dynamic programming or recursive
06:34 - approach but my favorite solution to
06:36 - this problem is neither of these I'm not
06:39 - sure what I should call this so
06:41 - I'm just going to call it the simple
06:42 - approach here here's how it works
06:45 - we're going to try to write a function
06:47 - called next step which takes two
06:49 - arguments the first argument being the
06:52 - current position that you're standing on
06:53 - this and the second argument is the same
06:57 - towers as the original given powers and
06:59 - this should return the next optimal step
07:03 - given the current position so for
07:05 - example the next step of 0 and towers
07:08 - this particular hours should return for
07:11 - because the optimal next step is in x4
07:14 - and that next optimal step will be the
07:18 - next current position and we can just
07:21 - feed it back to the next step function
07:23 - to find the next optimal step after that
07:25 - so in this particular example we're
07:28 - going to feed for back into the next
07:31 - step function to find the next optimal
07:34 - step after that and next step of four
07:36 - and towers or the optimal step for in x4
07:41 - for this particular towers should return
07:44 - six because after in x4 will be able to
07:48 - just jump two steps ahead to get outside
07:51 - of this array and we are done and
07:52 - whatever is outside of this array can be
07:55 - denoted in this case with index six or
07:59 - in general with the length of the array
08:02 - as the index so how should we write this
08:05 - function next step the idea of this
08:08 - function is going to be we look at the
08:11 - starting index in this particular case
08:13 - zero and we'll ask ourselves what's the
08:16 - next step after that that'll allow us to
08:19 - go the farthest in the next step after
08:21 - that step so for example from index 0 we
08:26 - could jump one step ahead to choose in
08:28 - x1 and in that case we'll be able to go
08:31 - up unto you in x3 by jumping two steps
08:36 - ahead from index 1 if we choose index 2
08:39 - we're stuck on in x2 because the height
08:42 - of this tower is 0 and if you choose in
08:44 - x3 it's the same we're stuck on index 3
08:47 - and if we choose in x4 will be able to
08:51 - go two steps ahead by jumping two steps
08:54 - from there
08:55 - and we'll be able to get to index six at
08:58 - most so in this particular case we'll
09:01 - choose index four as the next optimal
09:03 - step because that's the next step after
09:05 - zero that'll allow us to go the farthest
09:09 - in two steps so why is that one the
09:13 - optimal next step after index zero
09:15 - here's one way to think about it if you
09:18 - choose index four as the next step the
09:21 - range of indices that we are covering
09:23 - ranges from zero through six and if you
09:28 - choose for example one in this instead
09:31 - index one instead as the next step the
09:34 - range of industries that we can cover
09:35 - ranges only from zero through three
09:39 - instead so the range that we can cover
09:42 - with index one as the next step is
09:44 - merely a subset of the range that we can
09:48 - cover with index four as the next step
09:51 - now it's possible in certain situations
09:54 - that whether we choose index 1 or index
09:57 - 4 we'll be able to get to the end of the
10:00 - array anyway but if it is the case that
10:03 - it's possible for us to choose index 1
10:05 - and get to the end of the array it must
10:08 - also be true for us to be able to choose
10:12 - index 4 and then hop to another tower
10:15 - another tower and eventually get to the
10:17 - end of the array and this is why the
10:19 - next optimal step after the current
10:21 - position is the position from which we
10:24 - can go the farthest in a single jump
10:26 - just to clarify this point a little bit
10:28 - more
10:29 - let's examine another example as you can
10:32 - see we have powers of the heights 1 3 5
10:35 - 3 1 and soon and we're trying to
10:38 - determine what the next optimal step
10:40 - should be let's say from index 1 so
10:43 - we're going to call our function next
10:45 - step of 1 and towers and as we saw
10:48 - earlier to find the next optimal step
10:50 - after that we need to find the next step
10:53 - from which we can go the farthest in a
10:56 - single jump and since we have a tower of
11:00 - height 3 we have three potential choices
11:03 - if we choose index 2 as the next optimal
11:07 - step or as the next step
11:08 - we'll be able to jump five steps ahead
11:11 - of it since the height of this tower is
11:14 - five so we'll be able to get to index
11:17 - seven after that if we choose index
11:21 - three as the next step we'll be able to
11:23 - get to index 6 and if we choose index
11:27 - four we'll only be able to get to in X 5
11:30 - after this and if you examine the ranges
11:34 - that we can cover with index 3 or in X 4
11:37 - at the next step or merely subsets of
11:40 - the range that we can cover by choosing
11:42 - in X 2 as an except so the next optimal
11:46 - step after index 1 is 2 once we have the
11:52 - next step function written writing out
11:54 - the rest of the algorithm for the e
11:56 - stoppable function that we wanted to
11:58 - write originally should be easy in this
12:00 - function will first set a local variable
12:03 - called current to 0 and we're going to
12:07 - use this variable to keep track of where
12:10 - we are standing on currently and we
12:12 - always start at index 0
12:15 - after that we'll feed the current number
12:18 - to the next step function to find the
12:20 - next optimal step in this particular
12:22 - case the next optimal step is the index
12:25 - 4 and we'll update current to that
12:28 - number so current will be 4 and we'll
12:31 - just keep repeating this process until
12:33 - we get to either outside of this array
12:37 - in that case we should return true from
12:39 - this function as we do in this example
12:41 - or we fall into one of these cells where
12:45 - the powers height is 0 in that case we
12:49 - won't be able to help anywhere else from
12:50 - there so we'll need to return false from
12:53 - this function let's see what this
12:55 - solution might look like in code we're
12:58 - going to write a function is capable
12:59 - which takes hours and returns true of
13:02 - course if it's possible to start at
13:04 - index 0 and then help over these towers
13:08 - these towers and get to the end of the
13:10 - array or to be precise to outside of
13:13 - this array the first thing we're going
13:15 - to do in this function is we're going to
13:16 - set as I said a local variable called
13:19 - current to 0 and we're going to use this
13:21 - variable to keep
13:22 - the current position and then we're
13:25 - going to run a while loop and in this
13:27 - world loop we'll update the current
13:31 - position to the next optimal step given
13:34 - the current position I the current
13:37 - position happens to be larger than the
13:40 - length of powers or equal to the length
13:43 - of the towers then that means that the
13:46 - current position is already outside of
13:48 - this array so we'll return true and then
13:51 - if that's not the case and if the
13:53 - current tower has the height 0 for
13:58 - example this one that'll mean that will
14:01 - forever be stuck there because we won't
14:02 - be able to help anywhere else from there
14:05 - so we'll return false in this condition
14:08 - that's it for this video thanks for
14:10 - watching and I'll see you in the next
14:12 - one

Cleaned transcript:

here's one of my favorite coding interview problems that I've seen so far and I'm going to call it the power hopper problem here and here's the problem you're given an array of integers and each integer in this array represents the height of the tower in that position so with this given array we have six towers with the heights for two zero zero two and zero and the numbers you see at the top are just the indexes for the towers and here's the objective of this problem you start at index zero just imagine you're standing on this tower at index zero of height four and you're going to jump from this tower to another tower to another power and eventually we want to see if there's any way to get to the end of the array or to be precise to outside of this array and the amount of steps that you can jump over depends on the height of the tower that you're standing on so for example if you're standing on the first tower at index zero because the height is four you're able to jump over four steps at most so at most you can choose to jump over to index four or you can choose to jump over to anything less than that so either index one two or three whatever the next step that you choose you're going to repeat the same process so for example if you choose to go to index one after index zero you have a choice between jumping over to index three or index two because the height of this tower is two so the maximum number of steps that you can jump is two and in this particular example you can jump from index 0 the starting point to index 4 by jumping over four steps which is the maximum steps that's allowed from this tower and then jump from there to outside of this array by jumping over two steps and note here that if you jump just one step and get to index five then that wouldn't clear the requirement because our goal is to get outside of this array and not just to the end of the array now to formalize this problem a little bit what we want to do is we want to be able to write a function called is halibel which takes the given array and returns true if it's possible to start at index zero and hop from one tower to another and eventually get outside of this array as we saw earlier is hobble of these towers should return true but is hobble of one zero should return false because with this particular set of towers the only choice here is to start at index zero and they help to index one and from there we won't be able to help anywhere because the height of that Tower is zero now as usual if you want to practice pause the video right here and see if you get solved the problem and come back to the video when you're done or stuck there are a few potential solutions for this problem and one of them is using a graph we can look at each tower as a node in our graph and each path each potential path from one tower to another as an edge between these nodes and using these we can construct a graph that represents the towers and the paths between them and the objective in this solution will be to find a path from the first node or the first tower of height for at index 0 to the outside of this array and the outside of this array can be represented as one of the nodes once we have that we just need to use breadthfirst search or depthfirst search to find at least one path to see if we can get from the first node to outside of the 3 another potential solution to this problem is a dynamic programming or a recursive approach if you look at the original problem of writing a stoppable it's a hard problem it seems like a hard problem so the idea behind dynamic programming or recursive approach is to break it down into smaller problems and then solve those instead so we'll try to write a function called helper which takes two arguments powers which is the same as the original towers and an index value or an integer value which represents the starting index and helper of towers and the starting index should return true if it's possible to start at the given index in this case in x4 and help from this tower to maybe another tower to another tower and eventually get outside of this array in this particular case this should return true because it's obvious that we can help two steps from index four and get outside of this array and the idea of this approach is to write a stoppable by recursively calling the helper function I'm not going to go into too much detail here but for example if we already know that the return value for helper of towers and four should be true it's going to be easy for us easier at least for us to find the return value for helper of towers and there this is asking ourselves is it possible for us to start at index zero and then help to another tower maybe another tower and eventually get outside of this array so this is equivalent to in stoppable of towers and right away we'll know that it's possible for us to go from index 0 to index 4 just by hopping because the maximum number of steps that we can help from this tower is 4 and since we already know that it's possible for us to go from index 4 to outsiders array from helper of towers for we'll know that helper of towers and there should be also true now both of these approaches work the graph approach and the dynamic programming or recursive approach but my favorite solution to this problem is neither of these I'm not sure what I should call this so I'm just going to call it the simple approach here here's how it works we're going to try to write a function called next step which takes two arguments the first argument being the current position that you're standing on this and the second argument is the same towers as the original given powers and this should return the next optimal step given the current position so for example the next step of 0 and towers this particular hours should return for because the optimal next step is in x4 and that next optimal step will be the next current position and we can just feed it back to the next step function to find the next optimal step after that so in this particular example we're going to feed for back into the next step function to find the next optimal step after that and next step of four and towers or the optimal step for in x4 for this particular towers should return six because after in x4 will be able to just jump two steps ahead to get outside of this array and we are done and whatever is outside of this array can be denoted in this case with index six or in general with the length of the array as the index so how should we write this function next step the idea of this function is going to be we look at the starting index in this particular case zero and we'll ask ourselves what's the next step after that that'll allow us to go the farthest in the next step after that step so for example from index 0 we could jump one step ahead to choose in x1 and in that case we'll be able to go up unto you in x3 by jumping two steps ahead from index 1 if we choose index 2 we're stuck on in x2 because the height of this tower is 0 and if you choose in x3 it's the same we're stuck on index 3 and if we choose in x4 will be able to go two steps ahead by jumping two steps from there and we'll be able to get to index six at most so in this particular case we'll choose index four as the next optimal step because that's the next step after zero that'll allow us to go the farthest in two steps so why is that one the optimal next step after index zero here's one way to think about it if you choose index four as the next step the range of indices that we are covering ranges from zero through six and if you choose for example one in this instead index one instead as the next step the range of industries that we can cover ranges only from zero through three instead so the range that we can cover with index one as the next step is merely a subset of the range that we can cover with index four as the next step now it's possible in certain situations that whether we choose index 1 or index 4 we'll be able to get to the end of the array anyway but if it is the case that it's possible for us to choose index 1 and get to the end of the array it must also be true for us to be able to choose index 4 and then hop to another tower another tower and eventually get to the end of the array and this is why the next optimal step after the current position is the position from which we can go the farthest in a single jump just to clarify this point a little bit more let's examine another example as you can see we have powers of the heights 1 3 5 3 1 and soon and we're trying to determine what the next optimal step should be let's say from index 1 so we're going to call our function next step of 1 and towers and as we saw earlier to find the next optimal step after that we need to find the next step from which we can go the farthest in a single jump and since we have a tower of height 3 we have three potential choices if we choose index 2 as the next optimal step or as the next step we'll be able to jump five steps ahead of it since the height of this tower is five so we'll be able to get to index seven after that if we choose index three as the next step we'll be able to get to index 6 and if we choose index four we'll only be able to get to in X 5 after this and if you examine the ranges that we can cover with index 3 or in X 4 at the next step or merely subsets of the range that we can cover by choosing in X 2 as an except so the next optimal step after index 1 is 2 once we have the next step function written writing out the rest of the algorithm for the e stoppable function that we wanted to write originally should be easy in this function will first set a local variable called current to 0 and we're going to use this variable to keep track of where we are standing on currently and we always start at index 0 after that we'll feed the current number to the next step function to find the next optimal step in this particular case the next optimal step is the index 4 and we'll update current to that number so current will be 4 and we'll just keep repeating this process until we get to either outside of this array in that case we should return true from this function as we do in this example or we fall into one of these cells where the powers height is 0 in that case we won't be able to help anywhere else from there so we'll need to return false from this function let's see what this solution might look like in code we're going to write a function is capable which takes hours and returns true of course if it's possible to start at index 0 and then help over these towers these towers and get to the end of the array or to be precise to outside of this array the first thing we're going to do in this function is we're going to set as I said a local variable called current to 0 and we're going to use this variable to keep the current position and then we're going to run a while loop and in this world loop we'll update the current position to the next optimal step given the current position I the current position happens to be larger than the length of powers or equal to the length of the towers then that means that the current position is already outside of this array so we'll return true and then if that's not the case and if the current tower has the height 0 for example this one that'll mean that will forever be stuck there because we won't be able to help anywhere else from there so we'll return false in this condition that's it for this video thanks for watching and I'll see you in the next one
