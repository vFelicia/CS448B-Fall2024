With timestamps:

00:01 - in this video I'm going to discuss the
00:03 - optimal solution to the maximum subarray
00:05 - problem which is called kadan's
00:08 - algorithm now let me explain what the
00:10 - maximum subarray problem is you might
00:13 - ask what's a subarray a subarray is
00:15 - basically an array within an array so an
00:18 - example of a subarray would be 21 in
00:21 - this example or just one element3 or it
00:24 - could be the whole array that's also a
00:26 - subarray but if we
00:28 - had -3 let's say and one that's not a
00:32 - subarray because a subarray needs to be
00:35 - contigous elements so a subarray is a
00:37 - set of contigous elements within the
00:39 - given array and the problem here is
00:41 - finding the subarray with the maximum
00:43 - sum here's what I mean if you look at
00:46 - this subarray 2 1 the sum is 2 + 1 = 3
00:50 - and if we look at this subarray with -3
00:53 - the sum is obviously just -3 and we are
00:57 - trying to find the one with the maximum
00:59 - sum in this example it's actually 21
01:02 - with the S three and you can check it
01:05 - yourself
01:06 - too the simplest solution to this
01:09 - problem is the Brute Force solution
01:11 - basically checking all the possible
01:13 - subarrays and picking the one with the
01:15 - maximum sum so I would check the
01:17 - subarray starting at the first
01:21 - index and then check the
01:23 - ones starting at the second index and so
01:27 - on it's a good solution but it would
01:30 - take an order of n Square time and it's
01:34 - not the optimal
01:36 - solution the optimal solution to this
01:38 - problem is what's called Caden's
01:41 - algorithm I'm going to explain the idea
01:43 - behind it first and then we're going to
01:45 - go into the actual algorithm the idea is
01:48 - very simple we're going to look at each
01:50 - index and we're going to ask ourselves
01:53 - what's the maximum subray ending at this
01:56 - index so for the first index the maximum
01:58 - subray ending ending at this index is
02:01 - obviously just
02:02 - one and for the second index the maximum
02:06 - subarray ending at this index could be
02:08 - either 13 or
02:11 - just3 and the maximum one of those is
02:18 - 13 and for the 30 next we're going to do
02:20 - the same thing the maximum Subway or the
02:24 - subarray with the maximum sum ending at
02:26 - this index could be either two
02:30 - -32 or
02:33 - 132 and the maximum one of those is two
02:37 - if you compare the sums and we're going
02:39 - to do the same thing for each index for
02:41 - the rest of the indices and at the end
02:45 - we're going to compare those subarrays
02:47 - and we're going to find the maximum one
02:48 - of those in this case that's 2 one with
02:52 - the sum
02:54 - three as you can see the idea is very
02:57 - simple but it's not very efficient
02:59 - actually at least it's going to
03:02 - take an order of n Square time but the
03:05 - interesting idea from kadan's algorithm
03:08 - is that we can do much better than that
03:10 - actually we can run it under a linear
03:12 - time so let's see how we can do it let's
03:15 - say we using the same strategy here
03:17 - we're looking at each index and we are
03:19 - trying to find the maximum subray ending
03:22 - at that index and let's say we're
03:25 - looking at the third index and we know
03:27 - what the subarray uh from the pre
03:29 - previous index is and we're trying to
03:31 - find the maximum subray for this index
03:34 - or the maximum subray ending at this
03:37 - index so the interesting idea from
03:39 - kadan's algorithm is
03:42 - that that's um that maximum subray the
03:46 - local maximum subay is either this
03:48 - element the current element or the
03:50 - current element combined with the
03:53 - previous maximum
03:55 - Subway in this case that's
03:58 - 13 we can just compare these and ignore
04:01 - all the other
04:03 - subs and that's going to be the local
04:06 - maximum subay ending at this index so
04:09 - we're going to do the same thing for all
04:11 - the
04:13 - indices except for the first one because
04:16 - the first one we just pick the first
04:17 - element as the maximum
04:19 - subray and once we did that we're going
04:22 - to pick the maximum one of those and
04:24 - that's going to be the global maximum
04:27 - subarray and this algorithm is much
04:30 - faster than the Brute Force algorithm as
04:32 - I said it runs in a linear
04:35 - time now you might ask does it actually
04:38 - work if it does why does it work so let
04:41 - me explain that let's just say we're
04:42 - given this
04:45 - array and we're looking at the nth index
04:49 - we're running kadan's uh algorithm on it
04:52 - and now we at the N index and let's just
04:55 - say the element here is
04:58 - X and and we know what the subarray
05:02 - ending at the previous index is and
05:05 - let's call it
05:07 - m and the core idea from kadan's
05:10 - algorithm was that the maximum subarray
05:14 - ending at the N index is either just the
05:18 - current element X or the current element
05:21 - X combined with M so
05:26 - MX and as you can see M could be any
05:30 - number of elements and let me prove to
05:32 - you this is in fact the case to do that
05:36 - let's just assume that this is actually
05:38 - not the case that the maximum subarray
05:42 - ending at this element is neither X nor
05:46 - MX it's actually TX or
05:50 - something and I'm going to find a
05:51 - contradiction there so the t is either
05:55 - longer than M or it has more elements
05:57 - than m or it has less
06:01 - elements it doesn't matter either way
06:04 - but T is not
06:08 - empty because if it was empty it would
06:11 - be the same as just
06:12 - X and what I'm going to show now is that
06:15 - the sum of
06:18 - TX
06:20 - is and let's denote the sum with this
06:24 - symbol is less than the sum of MX
06:31 - this is actually less than or equal to
06:33 - but this is going to show that the
06:36 - TX is not the maximum subarray ending at
06:39 - the current index n the index or at
06:42 - least it's not the unique maximum
06:45 - subarray and it's very simple to show so
06:48 - the sum of
06:52 - TX is the sum of
06:56 - t plus
06:58 - X and the sum of MX is obviously the
07:03 - sum of
07:07 - M plus
07:10 - X and because we know that m is the
07:14 - maximum sum ending at the previous index
07:17 - it's at least larger than or equal to
07:20 - the sum of T which is also a subarray
07:25 - that ends at the previous
07:27 - index and this results shows that if you
07:30 - look at these
07:33 - equations the sum of TX is less than or
07:37 - equal to the sum of
07:40 - MX which in turn shows that the maximum
07:44 - Subway ending at the current index or
07:46 - the nth index needs to be either X the
07:50 - current element or the current element X
07:53 - combined with M which is the maximum
07:56 - subray ending at the previous index if
07:59 - we were trying to find multiple maximum
08:01 - subarrays the algorithm would be
08:03 - slightly different but the idea is the
08:06 - same now that we've explored how the
08:08 - algorithm Works let's just dive into the
08:11 - code here I'm just defining my function
08:14 - and the input is going to be the given
08:17 - array and the example I'm going to use
08:20 - here is this one and the output is going
08:23 - to be the sum of the maximum subarray
08:26 - and I'm not going to worry about where
08:28 - the maximum subarray is for now first of
08:30 - all I'm going to initialize all my
08:32 - variables
08:34 - to the first element in the array and
08:37 - the max current is the sum of the
08:40 - current maximum subarray or the maximum
08:43 - subarray that ends at the current
08:45 - index and Max Global keeps track of the
08:49 - global maximum sum and since the first
08:52 - element of the array is -2 I'm
08:55 - initializing both of them to
08:57 - -2 and I'm going to going to iterate the
09:00 - index I from one
09:04 - to the length minus one so that's going
09:07 - to be in this example from one to three
09:11 - the last
09:12 - index now let's look at the second index
09:16 - the or the index one this one what we
09:19 - are asking ourselves is what's the
09:22 - maximum subarray ending at this index is
09:25 - either three or
09:28 - -23 and the larger one is or the one
09:31 - with the larger sum is three so that's
09:36 - the maximum subarray ending at this
09:38 - index and the sum of that subarray is
09:41 - three so we're going to update C and
09:44 - that's larger than the global sum so
09:46 - we're going to update that as
09:48 - well in the code that's expressed
09:52 - as Max current is the maximum of or the
09:57 - larger of AI
09:59 - and Max current plus Ai and if the max
10:04 - current is larger than Max Global then
10:06 - update the max Global so let's do the
10:10 - same thing with the other indexes let's
10:13 - look at the third index two which is
10:16 - this
10:17 - one what we're going to ask ourselves
10:19 - here is what again what's the maximum
10:22 - subrate ending at this index it's either
10:26 - two or two
10:29 - combined with the previous maximum
10:32 - Subway 32 and obviously this is the one
10:36 - with the larger sum so we're going to
10:38 - pick this one we're going to update the
10:40 - current sum and we're going to update
10:42 - the current Global sum as well and we're
10:45 - just going to do the same thing for the
10:46 - last index and for the last index the
10:50 - current sum is going to be four and
10:52 - we're not going to update the global sum
10:54 - because that's larger than the current
10:56 - sum and at the end we're going to return
10:59 - this number the global sum and that
11:02 - corresponds to the maximum Subway in
11:04 - this example
11:06 - 32 all right that's it for the video and
11:09 - I hope you liked it if you want to watch
11:11 - more videos like this you can click
11:13 - right here to subscribe to my channel
11:15 - and see you soon

Cleaned transcript:

in this video I'm going to discuss the optimal solution to the maximum subarray problem which is called kadan's algorithm now let me explain what the maximum subarray problem is you might ask what's a subarray a subarray is basically an array within an array so an example of a subarray would be 21 in this example or just one element3 or it could be the whole array that's also a subarray but if we had 3 let's say and one that's not a subarray because a subarray needs to be contigous elements so a subarray is a set of contigous elements within the given array and the problem here is finding the subarray with the maximum sum here's what I mean if you look at this subarray 2 1 the sum is 2 + 1 = 3 and if we look at this subarray with 3 the sum is obviously just 3 and we are trying to find the one with the maximum sum in this example it's actually 21 with the S three and you can check it yourself too the simplest solution to this problem is the Brute Force solution basically checking all the possible subarrays and picking the one with the maximum sum so I would check the subarray starting at the first index and then check the ones starting at the second index and so on it's a good solution but it would take an order of n Square time and it's not the optimal solution the optimal solution to this problem is what's called Caden's algorithm I'm going to explain the idea behind it first and then we're going to go into the actual algorithm the idea is very simple we're going to look at each index and we're going to ask ourselves what's the maximum subray ending at this index so for the first index the maximum subray ending ending at this index is obviously just one and for the second index the maximum subarray ending at this index could be either 13 or just3 and the maximum one of those is 13 and for the 30 next we're going to do the same thing the maximum Subway or the subarray with the maximum sum ending at this index could be either two 32 or 132 and the maximum one of those is two if you compare the sums and we're going to do the same thing for each index for the rest of the indices and at the end we're going to compare those subarrays and we're going to find the maximum one of those in this case that's 2 one with the sum three as you can see the idea is very simple but it's not very efficient actually at least it's going to take an order of n Square time but the interesting idea from kadan's algorithm is that we can do much better than that actually we can run it under a linear time so let's see how we can do it let's say we using the same strategy here we're looking at each index and we are trying to find the maximum subray ending at that index and let's say we're looking at the third index and we know what the subarray uh from the pre previous index is and we're trying to find the maximum subray for this index or the maximum subray ending at this index so the interesting idea from kadan's algorithm is that that's um that maximum subray the local maximum subay is either this element the current element or the current element combined with the previous maximum Subway in this case that's 13 we can just compare these and ignore all the other subs and that's going to be the local maximum subay ending at this index so we're going to do the same thing for all the indices except for the first one because the first one we just pick the first element as the maximum subray and once we did that we're going to pick the maximum one of those and that's going to be the global maximum subarray and this algorithm is much faster than the Brute Force algorithm as I said it runs in a linear time now you might ask does it actually work if it does why does it work so let me explain that let's just say we're given this array and we're looking at the nth index we're running kadan's uh algorithm on it and now we at the N index and let's just say the element here is X and and we know what the subarray ending at the previous index is and let's call it m and the core idea from kadan's algorithm was that the maximum subarray ending at the N index is either just the current element X or the current element X combined with M so MX and as you can see M could be any number of elements and let me prove to you this is in fact the case to do that let's just assume that this is actually not the case that the maximum subarray ending at this element is neither X nor MX it's actually TX or something and I'm going to find a contradiction there so the t is either longer than M or it has more elements than m or it has less elements it doesn't matter either way but T is not empty because if it was empty it would be the same as just X and what I'm going to show now is that the sum of TX is and let's denote the sum with this symbol is less than the sum of MX this is actually less than or equal to but this is going to show that the TX is not the maximum subarray ending at the current index n the index or at least it's not the unique maximum subarray and it's very simple to show so the sum of TX is the sum of t plus X and the sum of MX is obviously the sum of M plus X and because we know that m is the maximum sum ending at the previous index it's at least larger than or equal to the sum of T which is also a subarray that ends at the previous index and this results shows that if you look at these equations the sum of TX is less than or equal to the sum of MX which in turn shows that the maximum Subway ending at the current index or the nth index needs to be either X the current element or the current element X combined with M which is the maximum subray ending at the previous index if we were trying to find multiple maximum subarrays the algorithm would be slightly different but the idea is the same now that we've explored how the algorithm Works let's just dive into the code here I'm just defining my function and the input is going to be the given array and the example I'm going to use here is this one and the output is going to be the sum of the maximum subarray and I'm not going to worry about where the maximum subarray is for now first of all I'm going to initialize all my variables to the first element in the array and the max current is the sum of the current maximum subarray or the maximum subarray that ends at the current index and Max Global keeps track of the global maximum sum and since the first element of the array is 2 I'm initializing both of them to 2 and I'm going to going to iterate the index I from one to the length minus one so that's going to be in this example from one to three the last index now let's look at the second index the or the index one this one what we are asking ourselves is what's the maximum subarray ending at this index is either three or 23 and the larger one is or the one with the larger sum is three so that's the maximum subarray ending at this index and the sum of that subarray is three so we're going to update C and that's larger than the global sum so we're going to update that as well in the code that's expressed as Max current is the maximum of or the larger of AI and Max current plus Ai and if the max current is larger than Max Global then update the max Global so let's do the same thing with the other indexes let's look at the third index two which is this one what we're going to ask ourselves here is what again what's the maximum subrate ending at this index it's either two or two combined with the previous maximum Subway 32 and obviously this is the one with the larger sum so we're going to pick this one we're going to update the current sum and we're going to update the current Global sum as well and we're just going to do the same thing for the last index and for the last index the current sum is going to be four and we're not going to update the global sum because that's larger than the current sum and at the end we're going to return this number the global sum and that corresponds to the maximum Subway in this example 32 all right that's it for the video and I hope you liked it if you want to watch more videos like this you can click right here to subscribe to my channel and see you soon
