With timestamps:

00:00 - hey everyone in this video i'm gonna
00:02 - give you a quick
00:03 - introduction to binary search and i'm
00:05 - gonna explain how it works with some
00:07 - samba code
00:08 - and at the end of the video i'm also
00:10 - gonna show you what i would say is a
00:12 - medium difficulty problem
00:14 - which you can solve with binary search
00:16 - so suppose you're given a sorted array
00:19 - of integers
00:19 - for example this one you're also given a
00:22 - target integer
00:23 - for example this one and your task here
00:26 - is to
00:27 - find the target in the array and that's
00:30 - a problem
00:31 - you can solve with binary search and
00:33 - let's say here that you need to
00:35 - write a function called search that
00:37 - takes these two arguments the array and
00:39 - the target
00:40 - and returns the index of the target
00:43 - if the target exists in the array and if
00:46 - it doesn't
00:47 - this function should return -1 instead
00:50 - so in this particular example your
00:53 - function should return
00:54 - 6 because the index of
00:57 - the target integer 11 right here is
01:01 - 6. and one approach you can use to solve
01:04 - this problem as a comparison to binary
01:06 - search
01:07 - is called linear search the idea of this
01:10 - approach is you start at the beginning
01:14 - of the array this one right here and
01:16 - then check
01:17 - if it's our target or not and if it's
01:20 - not our target
01:22 - then we go to the next element and the
01:24 - next element
01:25 - zone until we find our target
01:30 - or we don't find our target
01:33 - but find a number that's larger than the
01:36 - target
01:37 - then we can stop the search then and
01:39 - this approach
01:40 - has the time complexity of of and
01:44 - where n is the number of elements in the
01:46 - array
01:47 - and that's because assuming that we
01:49 - don't know where the target is
01:52 - we're going to check you know a certain
01:54 - number of elements in the array
01:56 - and on average we'll need to check about
01:58 - half the elements
02:00 - because on average you know we can
02:01 - assume that the target is going to be
02:04 - in the middle of the array and so we'll
02:07 - need to check
02:09 - n over two elements
02:12 - on average and that's why we have of n
02:16 - over two in time
02:17 - which is equivalent to o of n
02:20 - okay so as a better faster alternative
02:23 - to linear search
02:24 - let's take a look at a binary search and
02:27 - to see how it works
02:28 - we're going to use this example
02:31 - of a sorted array of integers
02:35 - ranging from minus 50 to 50.
02:39 - and as you can see we have 40 integers
02:42 - here
02:43 - we're also given the integer target of
02:46 - 20. now the first step in binary search
02:50 - is to say if the target exists in this
02:53 - array
02:54 - it must be between the first element
02:57 - this element right here and the last
02:59 - element this element right here
03:01 - another way to say the same thing would
03:04 - be to say
03:06 - our initial search region is going to be
03:08 - this entire array which is between the
03:10 - first element
03:11 - and the last element we can express the
03:14 - idea
03:16 - by defining two integer variables or
03:19 - two uh pointers which
03:22 - we're going to call left and right or l
03:26 - and r so l would be zero pointing at
03:29 - this element right here
03:31 - and r would be pointing this last
03:34 - element right here
03:35 - and in this particular example the
03:37 - initial value of
03:38 - r would be 39 because the length of the
03:41 - array
03:42 - is 40 right here okay and the next step
03:44 - in binary search
03:46 - would be to check the number that's in
03:49 - the middle
03:50 - of l and r in this particular case
03:53 - that's
03:53 - this number right here and let's say as
03:56 - an example that it happens to be 10.
03:58 - then at that point since our target is
04:02 - larger than 10 we'll know that the
04:05 - target
04:06 - if it exists in this array must be
04:09 - in this region right here so that means
04:13 - we can move
04:15 - our left pointer or l
04:18 - over here and then we can keep repeating
04:22 - the same procedure
04:23 - to narrow our region more and more
04:27 - so we can check the number in the middle
04:29 - of the new value of l
04:31 - and the current value of r that's this
04:34 - number right here
04:36 - and if that happens to be larger than
04:38 - target
04:40 - that's 30 right here then we'll know
04:44 - our target must be between this current
04:47 - value of l
04:49 - and this element right here so we can
04:52 - move r
04:53 - over here so just like that we can keep
04:57 - repeating the same procedure until
05:00 - the number between l and r uh the number
05:04 - in the middle
05:05 - of l and r happens to be the target at
05:08 - that point we can uh finish running our
05:10 - function because we've already found
05:12 - that number
05:12 - or uh when
05:15 - r comes to the left
05:19 - of l kind of like that and that's
05:22 - because at that point
05:23 - our search region is empty so that means
05:26 - that
05:27 - this target number doesn't exist in this
05:29 - array
05:30 - okay so we're going to put this idea
05:32 - into code
05:33 - but first before that let's think about
05:36 - the time complexity of this approach
05:39 - well with this particular example that
05:41 - we just saw
05:43 - our search region started with 40
05:45 - elements
05:46 - and then it became about 20 and then
05:48 - about 10 and so on
05:50 - until we got down to one so the pattern
05:53 - we see
05:54 - here is we start uh with
05:57 - a search region of n elements which is
06:00 - the number of elements in the given
06:02 - array
06:03 - and then we have it and then we get the
06:06 - we get half of that and half of that and
06:08 - so on until we get one
06:10 - and i can write it uh slightly
06:13 - differently
06:14 - just like that so we have n and then n
06:17 - over two and over
06:18 - 2 to the power of 2 and so on until
06:23 - n over 2 to the power of x
06:26 - is roughly equal to 1 whatever this
06:30 - x is and now for a second
06:33 - let's say that n
06:36 - happens to be 8 that's
06:40 - 2 to the power 3 so this
06:43 - expression right here n over 2 to the
06:44 - power 3
06:46 - becomes one so that means
06:50 - if n happens to be eight we'll need to
06:52 - check
06:53 - about uh three elements
06:56 - about three elements until
07:00 - our search region becomes one you might
07:03 - say well that's more like four elements
07:05 - but i'm saying the number of elements
07:07 - that we need to check
07:08 - is roughly equal to three
07:12 - so what i just showed you here is that
07:14 - when n
07:15 - is equal to 2 to the power 3 we'll need
07:18 - to check about
07:19 - three elements and for this algorithm to
07:22 - be complete
07:23 - so if n is uh
07:26 - roughly equal to 2 to the power of x
07:29 - then we'll need to check about
07:31 - x elements so basically to find the
07:34 - number of elements
07:35 - that we need to check we only need to
07:38 - find
07:38 - x such that 2 to the power of x
07:42 - is roughly equal to n
07:45 - and if you solve this for x of course
07:48 - you get
07:49 - x being roughly equal to log 2 of n
07:53 - and so the time complexity of this
07:54 - algorithm will be
07:57 - o of the number of elements that we need
07:59 - to check
08:00 - which is of log 2 of n
08:04 - and you can rewrite it as of
08:07 - log n for short okay so what i showed
08:10 - you here
08:11 - is not an exact mathematical proof but i
08:14 - hope that at least this logic is clear
08:16 - enough to you
08:18 - anyway as an example if you had 10
08:20 - million elements
08:21 - in the given array then the number of
08:23 - elements that we need to check
08:25 - will be roughly equal to log 2 of 10
08:27 - million
08:28 - which is 23.253 and so on
08:31 - which is about 24. so if you had 10
08:34 - million elements
08:35 - in the given sortie array you need to
08:38 - check almost
08:40 - about 24 elements to find the target uh
08:43 - number that you're given now we're going
08:45 - to put our approach into
08:47 - actual code and to do that we're going
08:49 - back to our smaller example that we saw
08:52 - at the beginning of this video
08:53 - we just have eight elements in this
08:55 - array and we're also given
08:58 - the target of let's say 11 and we're
09:00 - trying to
09:01 - write our function search that takes
09:04 - these two arguments
09:06 - and by the way i'm going to show you
09:08 - some suit code
09:09 - that looks like python here but you'll
09:11 - be able to find the actual python and
09:13 - java code
09:14 - that i wrote for this at this url
09:17 - anyway the first step in this code is
09:20 - defining
09:21 - our left and right pointer
09:25 - left or l will be zero right here
09:28 - and right or r will be the array's
09:32 - length minus one so the array's length
09:35 - is 8 here
09:36 - and so r will be 7 and then
09:40 - after that we'll run a while loop
09:43 - saying while left is less than or equal
09:47 - to right
09:48 - or in other words while right
09:51 - is not to the left of
09:55 - l and we'll say while that condition
09:59 - holds
10:00 - we'll first need to find the mid index
10:04 - and that's going to be between left and
10:06 - right and that's going to be the average
10:08 - of left and right so left plus right
10:11 - divided by 2
10:12 - and if this is not an integer you can
10:15 - round it down
10:16 - to get an integer value here
10:19 - and so in this particular example we'll
10:21 - get zero
10:22 - plus seven divided by two which is three
10:25 - point five
10:26 - round it down and we get three so
10:30 - mid will be 3 right here
10:33 - and the next step after that will be to
10:36 - say
10:37 - if that element r of mid happens to be
10:41 - the target then we've found the target
10:44 - so we're going to return
10:45 - that index mid and
10:50 - else if target happens to be less than
10:54 - that element right there so if the
10:57 - target
10:58 - happens to be for example six in this
11:01 - example
11:02 - then the right pointer will be mid minus
11:06 - one
11:07 - so the right pointer will move right
11:09 - there
11:11 - and otherwise target is greater
11:15 - than that element right here so that's
11:18 - the
11:19 - example we have right here target
11:20 - happens to be greater
11:22 - than seven so then left or l
11:25 - uh will be mid plus 1 that's right here
11:29 - and then we can keep repeating this
11:31 - while loop
11:32 - until we either find
11:35 - r of mid to be target
11:39 - and at that point we can return mid or
11:43 - left will be greater than right so for
11:46 - example if the target
11:47 - happens to be let's say 12 which doesn't
11:50 - exist
11:51 - in this array then eventually l
11:56 - will come to the right
11:59 - of r or in other words left will be
12:02 - greater than
12:03 - right so at that point we'll get out of
12:06 - the while loop
12:07 - and then we can return -1 to show that
12:10 - the target doesn't exist in this array
12:14 - okay so that's how binary search works
12:17 - but if you're looking for extra practice
12:19 - i would recommend
12:20 - using my business affiliates product
12:22 - i'll algoexpert.io
12:24 - which you can find at this referral link
12:27 - of mine
12:28 - and get a discount from with my discount
12:32 - code csdojo
12:33 - they have two related problems one is
12:36 - simply
12:37 - implementing binary search and the
12:39 - second one is called shifty binary
12:41 - search
12:42 - which i think is much more interesting
12:44 - so
12:45 - in this problem uh you're given a sorted
12:48 - array
12:48 - as well as a target and you need to find
12:51 - the position
12:52 - of the target with a little bit of twist
12:55 - you could be given a sorted array just
12:57 - like that
12:58 - but you could also be given an array
13:01 - that's sorted but also shifted so if
13:04 - you're given
13:05 - for example this array and the target uh
13:08 - you can see that it's sorted
13:11 - but shifted by one just like that
13:16 - or you could be given this array
13:20 - uh which is the same array but shifted
13:22 - by a larger amount
13:26 - just like that and you don't know
13:29 - how much your array has been
13:32 - shifted by when you're given this
13:35 - problem
13:36 - so you know the problem is writing a
13:38 - function that takes these two arguments
13:40 - one of these arrays as well as the
13:43 - target
13:44 - and returns the index of the target if
13:46 - it exists and minus one if it doesn't
13:49 - you should be able to solve it and of
13:51 - log n
13:52 - anyway i personally think this is a
13:54 - pretty interesting problem
13:55 - i had a lot of fun when i was solving it
13:57 - so i would say try
13:59 - solving it yourself and if you want to
14:01 - practice
14:02 - implementing it on an interactive
14:04 - environment uh you can check out aqua
14:06 - experts website
14:08 - and they have a lot of other problems
14:09 - too like 98 other problems
14:12 - on a variety of different topics in data
14:14 - structures and algorithms
14:16 - anyway thank you as always for watching
14:19 - my videos
14:20 - and i'll see you guys in the next one

Cleaned transcript:

hey everyone in this video i'm gonna give you a quick introduction to binary search and i'm gonna explain how it works with some samba code and at the end of the video i'm also gonna show you what i would say is a medium difficulty problem which you can solve with binary search so suppose you're given a sorted array of integers for example this one you're also given a target integer for example this one and your task here is to find the target in the array and that's a problem you can solve with binary search and let's say here that you need to write a function called search that takes these two arguments the array and the target and returns the index of the target if the target exists in the array and if it doesn't this function should return 1 instead so in this particular example your function should return 6 because the index of the target integer 11 right here is 6. and one approach you can use to solve this problem as a comparison to binary search is called linear search the idea of this approach is you start at the beginning of the array this one right here and then check if it's our target or not and if it's not our target then we go to the next element and the next element zone until we find our target or we don't find our target but find a number that's larger than the target then we can stop the search then and this approach has the time complexity of of and where n is the number of elements in the array and that's because assuming that we don't know where the target is we're going to check you know a certain number of elements in the array and on average we'll need to check about half the elements because on average you know we can assume that the target is going to be in the middle of the array and so we'll need to check n over two elements on average and that's why we have of n over two in time which is equivalent to o of n okay so as a better faster alternative to linear search let's take a look at a binary search and to see how it works we're going to use this example of a sorted array of integers ranging from minus 50 to 50. and as you can see we have 40 integers here we're also given the integer target of 20. now the first step in binary search is to say if the target exists in this array it must be between the first element this element right here and the last element this element right here another way to say the same thing would be to say our initial search region is going to be this entire array which is between the first element and the last element we can express the idea by defining two integer variables or two uh pointers which we're going to call left and right or l and r so l would be zero pointing at this element right here and r would be pointing this last element right here and in this particular example the initial value of r would be 39 because the length of the array is 40 right here okay and the next step in binary search would be to check the number that's in the middle of l and r in this particular case that's this number right here and let's say as an example that it happens to be 10. then at that point since our target is larger than 10 we'll know that the target if it exists in this array must be in this region right here so that means we can move our left pointer or l over here and then we can keep repeating the same procedure to narrow our region more and more so we can check the number in the middle of the new value of l and the current value of r that's this number right here and if that happens to be larger than target that's 30 right here then we'll know our target must be between this current value of l and this element right here so we can move r over here so just like that we can keep repeating the same procedure until the number between l and r uh the number in the middle of l and r happens to be the target at that point we can uh finish running our function because we've already found that number or uh when r comes to the left of l kind of like that and that's because at that point our search region is empty so that means that this target number doesn't exist in this array okay so we're going to put this idea into code but first before that let's think about the time complexity of this approach well with this particular example that we just saw our search region started with 40 elements and then it became about 20 and then about 10 and so on until we got down to one so the pattern we see here is we start uh with a search region of n elements which is the number of elements in the given array and then we have it and then we get the we get half of that and half of that and so on until we get one and i can write it uh slightly differently just like that so we have n and then n over two and over 2 to the power of 2 and so on until n over 2 to the power of x is roughly equal to 1 whatever this x is and now for a second let's say that n happens to be 8 that's 2 to the power 3 so this expression right here n over 2 to the power 3 becomes one so that means if n happens to be eight we'll need to check about uh three elements about three elements until our search region becomes one you might say well that's more like four elements but i'm saying the number of elements that we need to check is roughly equal to three so what i just showed you here is that when n is equal to 2 to the power 3 we'll need to check about three elements and for this algorithm to be complete so if n is uh roughly equal to 2 to the power of x then we'll need to check about x elements so basically to find the number of elements that we need to check we only need to find x such that 2 to the power of x is roughly equal to n and if you solve this for x of course you get x being roughly equal to log 2 of n and so the time complexity of this algorithm will be o of the number of elements that we need to check which is of log 2 of n and you can rewrite it as of log n for short okay so what i showed you here is not an exact mathematical proof but i hope that at least this logic is clear enough to you anyway as an example if you had 10 million elements in the given array then the number of elements that we need to check will be roughly equal to log 2 of 10 million which is 23.253 and so on which is about 24. so if you had 10 million elements in the given sortie array you need to check almost about 24 elements to find the target uh number that you're given now we're going to put our approach into actual code and to do that we're going back to our smaller example that we saw at the beginning of this video we just have eight elements in this array and we're also given the target of let's say 11 and we're trying to write our function search that takes these two arguments and by the way i'm going to show you some suit code that looks like python here but you'll be able to find the actual python and java code that i wrote for this at this url anyway the first step in this code is defining our left and right pointer left or l will be zero right here and right or r will be the array's length minus one so the array's length is 8 here and so r will be 7 and then after that we'll run a while loop saying while left is less than or equal to right or in other words while right is not to the left of l and we'll say while that condition holds we'll first need to find the mid index and that's going to be between left and right and that's going to be the average of left and right so left plus right divided by 2 and if this is not an integer you can round it down to get an integer value here and so in this particular example we'll get zero plus seven divided by two which is three point five round it down and we get three so mid will be 3 right here and the next step after that will be to say if that element r of mid happens to be the target then we've found the target so we're going to return that index mid and else if target happens to be less than that element right there so if the target happens to be for example six in this example then the right pointer will be mid minus one so the right pointer will move right there and otherwise target is greater than that element right here so that's the example we have right here target happens to be greater than seven so then left or l uh will be mid plus 1 that's right here and then we can keep repeating this while loop until we either find r of mid to be target and at that point we can return mid or left will be greater than right so for example if the target happens to be let's say 12 which doesn't exist in this array then eventually l will come to the right of r or in other words left will be greater than right so at that point we'll get out of the while loop and then we can return 1 to show that the target doesn't exist in this array okay so that's how binary search works but if you're looking for extra practice i would recommend using my business affiliates product i'll algoexpert.io which you can find at this referral link of mine and get a discount from with my discount code csdojo they have two related problems one is simply implementing binary search and the second one is called shifty binary search which i think is much more interesting so in this problem uh you're given a sorted array as well as a target and you need to find the position of the target with a little bit of twist you could be given a sorted array just like that but you could also be given an array that's sorted but also shifted so if you're given for example this array and the target uh you can see that it's sorted but shifted by one just like that or you could be given this array uh which is the same array but shifted by a larger amount just like that and you don't know how much your array has been shifted by when you're given this problem so you know the problem is writing a function that takes these two arguments one of these arrays as well as the target and returns the index of the target if it exists and minus one if it doesn't you should be able to solve it and of log n anyway i personally think this is a pretty interesting problem i had a lot of fun when i was solving it so i would say try solving it yourself and if you want to practice implementing it on an interactive environment uh you can check out aqua experts website and they have a lot of other problems too like 98 other problems on a variety of different topics in data structures and algorithms anyway thank you as always for watching my videos and i'll see you guys in the next one
