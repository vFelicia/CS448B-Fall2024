With timestamps:

00:00 - hey guys this is part 2 of my
00:02 - introduction to classes and objects and
00:05 - in this video I'm gonna talk about how
00:07 - multiple classes and objects can
00:09 - interact with each other so let's get
00:11 - started now just a quick recap of the
00:14 - last video we created this class called
00:17 - robot with the three attributes named
00:19 - color and weight name was a string color
00:23 - was a string as well and weight was an
00:25 - integer and it had only one function
00:28 - called integer itself and when this
00:30 - function is run it'll just print out my
00:33 - name is name whatever the name is and
00:36 - then out of this class we created two
00:39 - objects the first one was this one a
00:42 - robot object with the name Tom color red
00:45 - and weight 30 to show that it's 30
00:48 - pounds and the second object was a robot
00:51 - object with the name Jerry color blue
00:54 - and weight 40 and we put the first
00:57 - object in this variable called r1 and
01:00 - then we put the second object in this
01:02 - variable called r2 now let's say on top
01:05 - of that we have another class here this
01:08 - class is gonna be called person to
01:11 - represent any person you want to
01:13 - represent and it's gonna have three
01:15 - attributes name which is going to be a
01:18 - string personality which is also going
01:20 - to be a string and in sitting which is
01:23 - going to be a boolean which means this
01:25 - is going to be either true or false and
01:28 - if this is true that will mean that this
01:31 - particular person is sitting and if this
01:34 - value is false that'll mean that this
01:36 - person is not sitting using this class
01:39 - we'll be able to create a couple of
01:40 - objects here as well and the first
01:42 - object here might look like this this is
01:46 - going to be a person object of course
01:48 - with the name Ali's personality
01:50 - aggressive and is sitting false so this
01:54 - person is not sitting
01:55 - she's probably standing and the second
01:58 - object here might look like this this is
02:01 - a person object with the name Vickie
02:04 - personally personality talkative and is
02:07 - sitting true and let's put the first
02:09 - object here the person named Alice
02:13 - to this variable called p1 and then
02:16 - let's put the second object here to p2
02:19 - to show that this is person 1 and this
02:21 - is person 2 and let's say this person
02:23 - class has a few methods or a few
02:26 - functions as well sit down and stand up
02:29 - all they're gonna do is gonna be pretty
02:32 - simple when you run sit down
02:34 - this function let's say this particular
02:36 - object p1 by saying P 1 dot sit down
02:40 - it'll just turn the is sitting value to
02:44 - true because that person will be sitting
02:47 - and then if the is sitting value is
02:49 - already true when you run sit down on
02:52 - that object you'll just stay at true and
02:54 - the same thing with stand up it's just
02:57 - gonna do the opposite so if we run stand
03:00 - up on p2 by writing p2 that stand up
03:03 - it's gonna turn the is sitting value to
03:06 - false and then if it's already false
03:09 - it's just not gonna do anything now
03:11 - having these two classes and these two
03:14 - sets of objects separately is fine but
03:17 - is there any way to somehow make them
03:19 - interact with each other and somehow
03:21 - show the relationships between these two
03:23 - sets of objects one situation when you
03:26 - might want to do this is for example
03:28 - when you want to say that a person a
03:30 - particular person owns a particular
03:32 - robot so for example this person named
03:35 - Becky might own this robot named Tom and
03:39 - this person how this might own this
03:43 - other robot Jerry so how can we express
03:46 - that one way to show that is having an
03:49 - extra attribute to the person class and
03:52 - that attribute might be called something
03:55 - like robot owed this is going to be the
03:59 - particular robot that's owned by this
04:01 - person and this is going to be a robot
04:04 - object so for example if you want to
04:07 - show that Alice owns Jerry which is in
04:11 - this variable called r2 you can just set
04:15 - the robot own attribute of this person
04:18 - object to r2 and this is going to show
04:22 - that p1 owns or - and then you can do
04:25 - the same thing for pizza
04:27 - Becky if you want to show that this
04:29 - person owns this robot which is in the
04:33 - are one variable you can just set the
04:36 - robot own attribute of this person to r1
04:40 - and this is one very common way of
04:43 - expressing the relationships between
04:45 - multiple classes and objects okay let's
04:48 - now see how we can actually implement
04:50 - that using code I'm gonna use Java as an
04:54 - example here but other languages like
04:56 - Python are gonna be usually pretty
04:58 - similar and let's just quickly recap
05:00 - what we did in the last video we define
05:04 - a class called robot by writing class
05:06 - robot curly brackets and this class had
05:11 - three attributes or three instance
05:14 - variables string name string color and
05:17 - integer weight and we also define a
05:20 - constructor for creating a new object
05:22 - out of this class and that one took
05:25 - three arguments string and string C into
05:28 - W and it created a new object and set
05:32 - that object's name this nut name to N
05:35 - and that object's color that new objects
05:38 - color to C and that weights the object's
05:41 - weight to W and this class had one
05:45 - method to of course introduce self and
05:47 - that one printed my name is whatever
05:51 - this object's name is and then we use
05:55 - the constructor that we define ourselves
05:57 - to create a couple of objects the first
06:00 - object had the name Tom color red and
06:04 - weight 30 and so on and then we were
06:08 - able to of course use this function into
06:10 - yourself by writing or Wanda introduce
06:13 - self and our to that inches yourself and
06:16 - just a quick note if you want to
06:18 - implement this yourself you'll be able
06:20 - to put both of these blocks of code in a
06:24 - single file and then for me I'm gonna
06:26 - call it test robot and person Java and
06:29 - you'll be able to find a link to this
06:31 - file in the description below as well
06:33 - okay moving forward to implement what I
06:36 - explained earlier each person owning a
06:39 - particular robot
06:40 - let's create a person class by writing
06:43 - of course class person curly brackets
06:45 - and then this person class will have
06:48 - these attributes string name string
06:51 - personality and boolean is sitting and
06:54 - of course boolean just means that is
06:56 - sitting will be either true or false and
06:59 - then to show that each person owns a
07:03 - particular robot we'll need to add
07:05 - another attribute of course called robot
07:07 - owned and this robot own the value of
07:10 - this attribute will be a robot object so
07:14 - that type of this attribute will need to
07:16 - be robots and then just like we did with
07:19 - the robot class we can create a
07:21 - constructor here as well this
07:23 - constructor is gonna be called a person
07:25 - because we need to call a constructor
07:27 - the same name as the class so this is
07:30 - person which takes three arguments
07:33 - string n string P and boolean I and then
07:37 - once we create this object by using this
07:40 - constructor this that name that new
07:44 - objects name will be and the given
07:47 - string and then this new objects
07:50 - personality will be P which is another
07:53 - given argument and then that objects is
07:56 - sitting attribute is sitting instance
07:59 - variable will be the given I and let's
08:02 - just quickly define the other methods we
08:04 - had in this class as well one of them
08:06 - was called sit down this is just going
08:09 - to simply set this objects is sitting
08:12 - value to true and then the opposite of
08:16 - sit down which is stand up that one sets
08:18 - this object is sitting instance variable
08:22 - or attribute to be false and note here
08:25 - that if this de is sitting is already
08:28 - false when you run stand up this is not
08:31 - gonna do anything because it's basically
08:32 - resetting this value to be false again
08:35 - okay at this point you can create a
08:38 - person object by saying new person Alice
08:42 - aggressive and false so this is going to
08:45 - create a new person object with the name
08:48 - Alice personality aggressive and is
08:51 - sitting false and we can
08:54 - sign that see a variable called p1 with
08:57 - a type person and let's the same thing
08:59 - for a second person object this person's
09:02 - name will be Becky personality will be
09:05 - talkative and she will be sitting so is
09:08 - sitting will be qu and then we're gonna
09:10 - put that in p2 after that if you want to
09:14 - show that the first person here Ali's
09:16 - owns the second robot here named Jerry
09:20 - it's gonna be pretty simple you just
09:22 - need to write p1 dot robot own equals r2
09:26 - and this sets the attribute the robot
09:31 - own attribute of P 1 to R 2 and then we
09:35 - can do the same thing for p2 as well if
09:38 - you want to show that the second person
09:40 - Becky owns the first robot Tom you can
09:45 - just write P 2 the robot own equals r1
09:48 - and that way P to sprout on attribute
09:52 - will be r1 and once you have that in
09:55 - place you'll be able to do stuff like
09:57 - this as well here I just wrote p1 dot
10:01 - robot owned dot introduced self so
10:04 - basically p1 the robot own will give us
10:07 - R 2 because that's the robot p1 owns and
10:12 - so this line is the same as saying R to
10:16 - that engine yourself so when you execute
10:20 - this line this is gonna print out my
10:23 - name is Jerry because that's the name of
10:26 - r2 and then we can do the same thing
10:29 - with p2 here the second person so once
10:33 - we write P 2 the robot own the
10:36 - introduced self p2 the robot own will
10:40 - give us R 1 so this is the same as
10:42 - saying r1 the introduced self and of
10:46 - course this line once executed will
10:49 - print out my name is Tom because that's
10:52 - the name of r1
10:53 - so that's how you can express the
10:56 - relationships between robots and person
10:58 - objects but can we do something similar
11:00 - within the same class
11:02 - so for example what if you had these
11:06 - five robots
11:08 - and each of them can be expressed as a
11:10 - robot object and what if you wanted to
11:13 - show that for example these two robots
11:15 - are friends with each other and these
11:18 - two robots are friends with each other
11:19 - and so on or it could be something like
11:22 - this robot is looking at this other
11:25 - robot and this robot is looking at this
11:29 - robot and soon how can we show something
11:32 - like this
11:33 - well it'll actually be pretty similar to
11:35 - what we saw earlier so let's take a look
11:38 - at the robot class here so far it's the
11:42 - same it's exactly the same as what we
11:44 - had earlier we have named color and
11:47 - weight as attributes and the robot
11:50 - constructor and then the introduced self
11:53 - function all you need to do on top of
11:56 - this is you just need to add an extra
11:59 - attribute called let's say looking at so
12:03 - this is going to be the robot this
12:06 - particular robot is currently looking at
12:08 - and this is going to be a robot
12:10 - object and so the type here is robot so
12:13 - if you want to say for example that the
12:16 - first robot tom is looking at the second
12:19 - robot Jerry you just need to set the
12:22 - looking at attribute of r1 to r2 you can
12:27 - do that just like that by saying r1 that
12:31 - looking at equals r2 and then if you
12:34 - want to show also that r2 is also
12:37 - looking at our one you can just write
12:39 - this r2 looking at equals r1 and that's
12:44 - it's the looking at attribute of r2 to
12:47 - r1 so that r2 is now looking at r1 as
12:51 - well so this was a little bit silly
12:53 - example you know a bunch of robots just
12:56 - looking at each other but you'll be able
12:57 - to use exactly the same idea to
13:00 - implement more realistic things too so
13:03 - for example if you're trying to
13:04 - implement a twitter-like system or an
13:06 - Instagram like system you want to be
13:09 - able to say this robot is following this
13:12 - other robots or this person is following
13:14 - this other person and then this person
13:17 - is following this person and so to show
13:20 - something like that
13:21 - you can just change the name of this
13:23 - looking at attribute from looking at to
13:26 - following and then pretty much do
13:29 - exactly the same thing as what we did
13:30 - earlier okay so that wraps up my
13:34 - introduction to classes and objects if
13:37 - there's any related topic that you want
13:39 - me to cover in the future though just
13:41 - let me know in the comment below
13:42 - and special thanks to brilliant dork for
13:45 - sponsoring this video so in my next
13:47 - video in this series I'm planning to
13:49 - cover the topic of linked lists but
13:52 - actually once you understood the
13:54 - concepts you learn in this video you'll
13:56 - be able to start learning you know more
13:58 - advanced data structures like graphs and
14:01 - trees so if you want to jump ahead and
14:03 - start learning these concepts on your
14:05 - own you might want to check out
14:07 - brilliant in their computer science
14:09 - algorithms course they have a section
14:12 - about graphs and I think this would be
14:15 - perfect for someone who's just starting
14:17 - to learn data structures and algorithms
14:18 - like I said in my previous videos
14:21 - solving poems is a really good way to
14:23 - solidify the computer science knowledge
14:25 - you've gained passively by watching
14:28 - videos or reading something I think
14:31 - brilliant can be a good complement to
14:33 - this course because it gives you a good
14:35 - way to practice what you've learned
14:36 - through solving problems so if you want
14:40 - to complement your passive learning with
14:42 - more active learning like solving
14:44 - problems just go to brilliant org slash
14:46 - CS dojo this will let them know that you
14:49 - came from here and you get 20% of their
14:52 - annual subscription through that link -
14:54 - okay thanks as always for watching my
14:57 - videos and thanks so much for being part
15:00 - of dojo gang and I'll see you guys in
15:02 - the next video

Cleaned transcript:

hey guys this is part 2 of my introduction to classes and objects and in this video I'm gonna talk about how multiple classes and objects can interact with each other so let's get started now just a quick recap of the last video we created this class called robot with the three attributes named color and weight name was a string color was a string as well and weight was an integer and it had only one function called integer itself and when this function is run it'll just print out my name is name whatever the name is and then out of this class we created two objects the first one was this one a robot object with the name Tom color red and weight 30 to show that it's 30 pounds and the second object was a robot object with the name Jerry color blue and weight 40 and we put the first object in this variable called r1 and then we put the second object in this variable called r2 now let's say on top of that we have another class here this class is gonna be called person to represent any person you want to represent and it's gonna have three attributes name which is going to be a string personality which is also going to be a string and in sitting which is going to be a boolean which means this is going to be either true or false and if this is true that will mean that this particular person is sitting and if this value is false that'll mean that this person is not sitting using this class we'll be able to create a couple of objects here as well and the first object here might look like this this is going to be a person object of course with the name Ali's personality aggressive and is sitting false so this person is not sitting she's probably standing and the second object here might look like this this is a person object with the name Vickie personally personality talkative and is sitting true and let's put the first object here the person named Alice to this variable called p1 and then let's put the second object here to p2 to show that this is person 1 and this is person 2 and let's say this person class has a few methods or a few functions as well sit down and stand up all they're gonna do is gonna be pretty simple when you run sit down this function let's say this particular object p1 by saying P 1 dot sit down it'll just turn the is sitting value to true because that person will be sitting and then if the is sitting value is already true when you run sit down on that object you'll just stay at true and the same thing with stand up it's just gonna do the opposite so if we run stand up on p2 by writing p2 that stand up it's gonna turn the is sitting value to false and then if it's already false it's just not gonna do anything now having these two classes and these two sets of objects separately is fine but is there any way to somehow make them interact with each other and somehow show the relationships between these two sets of objects one situation when you might want to do this is for example when you want to say that a person a particular person owns a particular robot so for example this person named Becky might own this robot named Tom and this person how this might own this other robot Jerry so how can we express that one way to show that is having an extra attribute to the person class and that attribute might be called something like robot owed this is going to be the particular robot that's owned by this person and this is going to be a robot object so for example if you want to show that Alice owns Jerry which is in this variable called r2 you can just set the robot own attribute of this person object to r2 and this is going to show that p1 owns or and then you can do the same thing for pizza Becky if you want to show that this person owns this robot which is in the are one variable you can just set the robot own attribute of this person to r1 and this is one very common way of expressing the relationships between multiple classes and objects okay let's now see how we can actually implement that using code I'm gonna use Java as an example here but other languages like Python are gonna be usually pretty similar and let's just quickly recap what we did in the last video we define a class called robot by writing class robot curly brackets and this class had three attributes or three instance variables string name string color and integer weight and we also define a constructor for creating a new object out of this class and that one took three arguments string and string C into W and it created a new object and set that object's name this nut name to N and that object's color that new objects color to C and that weights the object's weight to W and this class had one method to of course introduce self and that one printed my name is whatever this object's name is and then we use the constructor that we define ourselves to create a couple of objects the first object had the name Tom color red and weight 30 and so on and then we were able to of course use this function into yourself by writing or Wanda introduce self and our to that inches yourself and just a quick note if you want to implement this yourself you'll be able to put both of these blocks of code in a single file and then for me I'm gonna call it test robot and person Java and you'll be able to find a link to this file in the description below as well okay moving forward to implement what I explained earlier each person owning a particular robot let's create a person class by writing of course class person curly brackets and then this person class will have these attributes string name string personality and boolean is sitting and of course boolean just means that is sitting will be either true or false and then to show that each person owns a particular robot we'll need to add another attribute of course called robot owned and this robot own the value of this attribute will be a robot object so that type of this attribute will need to be robots and then just like we did with the robot class we can create a constructor here as well this constructor is gonna be called a person because we need to call a constructor the same name as the class so this is person which takes three arguments string n string P and boolean I and then once we create this object by using this constructor this that name that new objects name will be and the given string and then this new objects personality will be P which is another given argument and then that objects is sitting attribute is sitting instance variable will be the given I and let's just quickly define the other methods we had in this class as well one of them was called sit down this is just going to simply set this objects is sitting value to true and then the opposite of sit down which is stand up that one sets this object is sitting instance variable or attribute to be false and note here that if this de is sitting is already false when you run stand up this is not gonna do anything because it's basically resetting this value to be false again okay at this point you can create a person object by saying new person Alice aggressive and false so this is going to create a new person object with the name Alice personality aggressive and is sitting false and we can sign that see a variable called p1 with a type person and let's the same thing for a second person object this person's name will be Becky personality will be talkative and she will be sitting so is sitting will be qu and then we're gonna put that in p2 after that if you want to show that the first person here Ali's owns the second robot here named Jerry it's gonna be pretty simple you just need to write p1 dot robot own equals r2 and this sets the attribute the robot own attribute of P 1 to R 2 and then we can do the same thing for p2 as well if you want to show that the second person Becky owns the first robot Tom you can just write P 2 the robot own equals r1 and that way P to sprout on attribute will be r1 and once you have that in place you'll be able to do stuff like this as well here I just wrote p1 dot robot owned dot introduced self so basically p1 the robot own will give us R 2 because that's the robot p1 owns and so this line is the same as saying R to that engine yourself so when you execute this line this is gonna print out my name is Jerry because that's the name of r2 and then we can do the same thing with p2 here the second person so once we write P 2 the robot own the introduced self p2 the robot own will give us R 1 so this is the same as saying r1 the introduced self and of course this line once executed will print out my name is Tom because that's the name of r1 so that's how you can express the relationships between robots and person objects but can we do something similar within the same class so for example what if you had these five robots and each of them can be expressed as a robot object and what if you wanted to show that for example these two robots are friends with each other and these two robots are friends with each other and so on or it could be something like this robot is looking at this other robot and this robot is looking at this robot and soon how can we show something like this well it'll actually be pretty similar to what we saw earlier so let's take a look at the robot class here so far it's the same it's exactly the same as what we had earlier we have named color and weight as attributes and the robot constructor and then the introduced self function all you need to do on top of this is you just need to add an extra attribute called let's say looking at so this is going to be the robot this particular robot is currently looking at and this is going to be a robot object and so the type here is robot so if you want to say for example that the first robot tom is looking at the second robot Jerry you just need to set the looking at attribute of r1 to r2 you can do that just like that by saying r1 that looking at equals r2 and then if you want to show also that r2 is also looking at our one you can just write this r2 looking at equals r1 and that's it's the looking at attribute of r2 to r1 so that r2 is now looking at r1 as well so this was a little bit silly example you know a bunch of robots just looking at each other but you'll be able to use exactly the same idea to implement more realistic things too so for example if you're trying to implement a twitterlike system or an Instagram like system you want to be able to say this robot is following this other robots or this person is following this other person and then this person is following this person and so to show something like that you can just change the name of this looking at attribute from looking at to following and then pretty much do exactly the same thing as what we did earlier okay so that wraps up my introduction to classes and objects if there's any related topic that you want me to cover in the future though just let me know in the comment below and special thanks to brilliant dork for sponsoring this video so in my next video in this series I'm planning to cover the topic of linked lists but actually once you understood the concepts you learn in this video you'll be able to start learning you know more advanced data structures like graphs and trees so if you want to jump ahead and start learning these concepts on your own you might want to check out brilliant in their computer science algorithms course they have a section about graphs and I think this would be perfect for someone who's just starting to learn data structures and algorithms like I said in my previous videos solving poems is a really good way to solidify the computer science knowledge you've gained passively by watching videos or reading something I think brilliant can be a good complement to this course because it gives you a good way to practice what you've learned through solving problems so if you want to complement your passive learning with more active learning like solving problems just go to brilliant org slash CS dojo this will let them know that you came from here and you get 20% of their annual subscription through that link okay thanks as always for watching my videos and thanks so much for being part of dojo gang and I'll see you guys in the next video
