With timestamps:

00:00 - hey guys this is my dynamic programming
00:02 - tutorial with the longest common
00:04 - subsequence problem as our example now
00:08 - let me explain what the longest common
00:09 - subsequence problem is we have two
00:12 - strings let's call it P and Q and we're
00:15 - trying to find a common string and we're
00:16 - trying to find the longest one of course
00:18 - and in this case that would be B a D and
00:25 - one thing to note here is that these
00:27 - characters are not necessarily
00:29 - contiguous we're going to solve this
00:35 - problem using dynamic programming but
00:37 - let's first talk about this general
00:39 - procedure that we have that we can use
00:41 - for solving any dynamic programming
00:44 - problems so the first step is to come up
00:46 - with a recursive solution and then we
00:49 - memorize the intermediate results or
00:51 - restore the intermediate results to make
00:53 - you run faster and finally we can come
00:56 - up with something called a bottom-up
00:58 - approach and I'm going to explain what
01:00 - it means later this is an optional step
01:02 - by the way here's a recursive solution
01:07 - we're going to write this function LCS
01:09 - longest common subsequence of p0 and q0
01:13 - the two input strings and we're going to
01:15 - return the length of the longest common
01:17 - subsequence instead of the subsequence
01:19 - itself so with our previous example
01:23 - we're going to return instead of BA D
01:25 - we're going to return the length of it
01:28 - which is 3 the idea behind any recursion
01:31 - is that of course we're going to take
01:34 - down this problem into smaller problems
01:36 - and we're going to solve those instead
01:38 - and there are two cases we need to
01:40 - consider for that the first case is when
01:43 - p 0 and Q 0 and with the same character
01:47 - let's call it let's just call it X and
01:49 - there are some preceding characters
01:52 - let's call them P 1 and Q 1 they could
01:56 - be any lengths they could be empty or
01:58 - non empty what we say in this case is
02:01 - that the longest common subsequence of p
02:04 - 0 and Q 0 must end with X and so we'll
02:09 - get rid of these and we'll find the LCS
02:11 - of p1 and
02:13 - q1 and we'll append it there before X
02:17 - and that's going to be our longest
02:20 - common subsequence so that's expressed
02:22 - as LCS of p 0 and Q 0 is equal to 1
02:26 - which comes from X plus LCS of p1 and q1
02:31 - the second case is when p 0 and q0 don't
02:36 - end with the same character so let's
02:38 - just call those characters x and y and
02:41 - again there are some preceding
02:43 - characters before x and y let's call
02:45 - them p1 and q1 again that could be any
02:48 - length and what we do in this case is
02:51 - we'll say okay let's just get rid of one
02:54 - of the characters let's just say X and
02:56 - we will find the LCS of p1 and Q 0 which
03:01 - is what I wrote here and we'll do the
03:04 - same thing with Y and find the LCS of p0
03:08 - and q1 and we'll take the longer one of
03:10 - those so that's expressed as LCS of p 0
03:13 - Q 0 is equal to maximum or the larger
03:16 - one of those here's a recursive solution
03:20 - in code we define the function LCS of PQ
03:24 - n m and N and M those are integers
03:28 - they're here because I don't want to
03:30 - recreate strings every time I call this
03:33 - function here's what I mean so let's say
03:36 - P equals ABC and we have N equals 2 then
03:42 - instead of looking at the whole string
03:44 - we'll just look at the first two
03:46 - characters and it's the same thing with
03:48 - Q and M if Q is ABC and M is 1 we'll
03:55 - just look at the first character so this
03:57 - way we don't have to reproduce strings
03:59 - every time and here's our base case if N
04:03 - equals 0 or M equals 0 that means we're
04:05 - looking at an empty string so we'll just
04:08 - return 0 and I'm storing this result in
04:13 - the result variable and returning it
04:15 - here if that's not the case and if the
04:18 - first care if the last character of p
04:20 - and the last character q are the same
04:23 - we'll just return 1 plus LCS
04:26 - of PQ n minus 1 n minus 1 and if that's
04:31 - not the case the last characters are not
04:34 - going to be the same but I wrote this
04:36 - just for clarity and what we're going to
04:38 - do here is take LCS or PQ n minus 1 m
04:42 - and LCS of PQ and M minus 1 and we'll
04:46 - take the maximum one of those and return
04:49 - that here's a quick analysis over a
04:53 - recursive solution we'll look at one of
04:56 - the worst case scenarios when P and Q
04:59 - don't have any characters in common and
05:02 - we'll look at this particular example
05:04 - when P equals a a and Q equals BV B
05:09 - first we will call LCS of P Q 2 3
05:13 - because we have two characters of three
05:15 - characters and to find that we need to
05:18 - call LCS of P Q 1 3 as just abbreviated
05:22 - as L 1 3 and we'll also need to call L 2
05:27 - 2 and to find L 1 3 we need to call L 0
05:31 - 3 which is a base case and I want to and
05:35 - so that's what this diagram shows and as
05:39 - you can see the problem with this
05:41 - approach is that there are a lot of
05:42 - duplicates in our computation so we are
05:45 - computing L 1 2 twice the exact same
05:49 - competition and we're computing L 1 1 3
05:52 - times and that's why this is very
05:54 - wasteful and it's very slow in fact the
05:58 - time it takes to find the original LCS
06:00 - is about an order of two to the power of
06:03 - n plus m in the worst case scenario and
06:06 - dynamic programming says why not just
06:09 - store all those intermediate results so
06:11 - we can make this function run faster so
06:15 - now that we found a recursive solution
06:17 - we're going to memorize or store the
06:19 - intermediate results to make our
06:21 - function round faster
06:23 - here's a memorized version over previous
06:26 - recursive function the only things that
06:29 - changed from the previous function are
06:31 - these three lines and what we're doing
06:33 - here is we are storing the intermediate
06:36 - results in this array in
06:38 - two dimensional array of height and and
06:42 - with em and every time this function is
06:48 - called we ask ourselves do we or do we
06:51 - already have this result so we're
06:54 - initializing each element to undefined
06:57 - and we ask ourselves do we already have
06:59 - it and if we already have the
07:02 - intermediate results if this is not
07:04 - undefined or if it's already defined
07:06 - then return that instead of going
07:09 - through the whole function and if that's
07:12 - not the case we go through the whole
07:14 - function find the result but before we
07:16 - return it we store it in this array so
07:20 - what's the runtime for this one thing
07:22 - you can see right here is that we reach
07:24 - this last line only at most n M times
07:28 - because that's the number of variable
07:31 - combinations we have the possible
07:33 - variable combinations we have and so we
07:35 - go through this whole function only at
07:38 - most n M times and in this part we call
07:41 - LCS at most twice so the number of
07:44 - recursive calls is at most two n m times
07:49 - and each time the time it takes to
07:53 - execute each call is a constant time so
07:57 - the whole time complexity is an order of
08:02 - n times M which is much better than what
08:05 - we had before so we found a recursive
08:08 - solution and we memorized intermediate
08:10 - results and now we can come up with a
08:13 - bottom up solution which is an optional
08:15 - step in our recursive and memorized
08:19 - solutions what we did was let's just say
08:22 - for this particular example P equals a a
08:25 - and Q equals a B what we did was we
08:28 - called LCS of P Q 2 3 and we said ok to
08:38 - find this we need to call LCS of P Q 1 3
08:43 - and LCS of P Q 2 2 and so on so we
08:48 - started at the top and we went down so
08:51 - it's a top
08:52 - down approach we can also use a
08:54 - bottom-up approach so start with M
08:56 - equals 0 and N equals 0 and ask
08:59 - ourselves what LCS of P Q 0 0 that's
09:06 - what that's of course zero and these are
09:09 - going to be all zeros and we can fill
09:13 - out this whole table
09:14 - so what's LCS of P Q 1 1 for that one
09:21 - we'll be comparing just these two
09:23 - characters so that's going to be 1 in
09:25 - the code we are actually using these the
09:28 - information from here and same thing
09:31 - with N equals 1 M equals 2 we're
09:35 - comparing these three characters so
09:37 - that's going to be one that comes from
09:39 - this part so we're going to fill out
09:41 - this whole table that way
09:43 - once we fill out this whole table we can
09:46 - just look at the last value N equals 2
09:49 - and M equals 3 and that's the value we
09:51 - want in the first place all right
09:55 - hopefully you liked the video if
09:57 - anything was unclear please let me know
09:58 - and if you like this one you might also
10:01 - like this other video I have about
10:03 - dynamic programming with Fibonacci
10:05 - sequence and if you want to watch more
10:08 - videos like this one you can just
10:09 - subscribe right here and thanks so much

Cleaned transcript:

hey guys this is my dynamic programming tutorial with the longest common subsequence problem as our example now let me explain what the longest common subsequence problem is we have two strings let's call it P and Q and we're trying to find a common string and we're trying to find the longest one of course and in this case that would be B a D and one thing to note here is that these characters are not necessarily contiguous we're going to solve this problem using dynamic programming but let's first talk about this general procedure that we have that we can use for solving any dynamic programming problems so the first step is to come up with a recursive solution and then we memorize the intermediate results or restore the intermediate results to make you run faster and finally we can come up with something called a bottomup approach and I'm going to explain what it means later this is an optional step by the way here's a recursive solution we're going to write this function LCS longest common subsequence of p0 and q0 the two input strings and we're going to return the length of the longest common subsequence instead of the subsequence itself so with our previous example we're going to return instead of BA D we're going to return the length of it which is 3 the idea behind any recursion is that of course we're going to take down this problem into smaller problems and we're going to solve those instead and there are two cases we need to consider for that the first case is when p 0 and Q 0 and with the same character let's call it let's just call it X and there are some preceding characters let's call them P 1 and Q 1 they could be any lengths they could be empty or non empty what we say in this case is that the longest common subsequence of p 0 and Q 0 must end with X and so we'll get rid of these and we'll find the LCS of p1 and q1 and we'll append it there before X and that's going to be our longest common subsequence so that's expressed as LCS of p 0 and Q 0 is equal to 1 which comes from X plus LCS of p1 and q1 the second case is when p 0 and q0 don't end with the same character so let's just call those characters x and y and again there are some preceding characters before x and y let's call them p1 and q1 again that could be any length and what we do in this case is we'll say okay let's just get rid of one of the characters let's just say X and we will find the LCS of p1 and Q 0 which is what I wrote here and we'll do the same thing with Y and find the LCS of p0 and q1 and we'll take the longer one of those so that's expressed as LCS of p 0 Q 0 is equal to maximum or the larger one of those here's a recursive solution in code we define the function LCS of PQ n m and N and M those are integers they're here because I don't want to recreate strings every time I call this function here's what I mean so let's say P equals ABC and we have N equals 2 then instead of looking at the whole string we'll just look at the first two characters and it's the same thing with Q and M if Q is ABC and M is 1 we'll just look at the first character so this way we don't have to reproduce strings every time and here's our base case if N equals 0 or M equals 0 that means we're looking at an empty string so we'll just return 0 and I'm storing this result in the result variable and returning it here if that's not the case and if the first care if the last character of p and the last character q are the same we'll just return 1 plus LCS of PQ n minus 1 n minus 1 and if that's not the case the last characters are not going to be the same but I wrote this just for clarity and what we're going to do here is take LCS or PQ n minus 1 m and LCS of PQ and M minus 1 and we'll take the maximum one of those and return that here's a quick analysis over a recursive solution we'll look at one of the worst case scenarios when P and Q don't have any characters in common and we'll look at this particular example when P equals a a and Q equals BV B first we will call LCS of P Q 2 3 because we have two characters of three characters and to find that we need to call LCS of P Q 1 3 as just abbreviated as L 1 3 and we'll also need to call L 2 2 and to find L 1 3 we need to call L 0 3 which is a base case and I want to and so that's what this diagram shows and as you can see the problem with this approach is that there are a lot of duplicates in our computation so we are computing L 1 2 twice the exact same competition and we're computing L 1 1 3 times and that's why this is very wasteful and it's very slow in fact the time it takes to find the original LCS is about an order of two to the power of n plus m in the worst case scenario and dynamic programming says why not just store all those intermediate results so we can make this function run faster so now that we found a recursive solution we're going to memorize or store the intermediate results to make our function round faster here's a memorized version over previous recursive function the only things that changed from the previous function are these three lines and what we're doing here is we are storing the intermediate results in this array in two dimensional array of height and and with em and every time this function is called we ask ourselves do we or do we already have this result so we're initializing each element to undefined and we ask ourselves do we already have it and if we already have the intermediate results if this is not undefined or if it's already defined then return that instead of going through the whole function and if that's not the case we go through the whole function find the result but before we return it we store it in this array so what's the runtime for this one thing you can see right here is that we reach this last line only at most n M times because that's the number of variable combinations we have the possible variable combinations we have and so we go through this whole function only at most n M times and in this part we call LCS at most twice so the number of recursive calls is at most two n m times and each time the time it takes to execute each call is a constant time so the whole time complexity is an order of n times M which is much better than what we had before so we found a recursive solution and we memorized intermediate results and now we can come up with a bottom up solution which is an optional step in our recursive and memorized solutions what we did was let's just say for this particular example P equals a a and Q equals a B what we did was we called LCS of P Q 2 3 and we said ok to find this we need to call LCS of P Q 1 3 and LCS of P Q 2 2 and so on so we started at the top and we went down so it's a top down approach we can also use a bottomup approach so start with M equals 0 and N equals 0 and ask ourselves what LCS of P Q 0 0 that's what that's of course zero and these are going to be all zeros and we can fill out this whole table so what's LCS of P Q 1 1 for that one we'll be comparing just these two characters so that's going to be 1 in the code we are actually using these the information from here and same thing with N equals 1 M equals 2 we're comparing these three characters so that's going to be one that comes from this part so we're going to fill out this whole table that way once we fill out this whole table we can just look at the last value N equals 2 and M equals 3 and that's the value we want in the first place all right hopefully you liked the video if anything was unclear please let me know and if you like this one you might also like this other video I have about dynamic programming with Fibonacci sequence and if you want to watch more videos like this one you can just subscribe right here and thanks so much
