With timestamps:

00:00 - just like before you can control it with
00:02 - you know with your arrow keys
00:04 - and look i just need to run away from
00:08 - the snake
00:10 - everyone so it's been a while since my
00:12 - last video but
00:13 - i'm back with a new video and just a
00:16 - quick disclaimer i'm making this video
00:17 - in collaboration with replace
00:20 - so last week i was playing around with
00:23 - their website replit
00:25 - and i found this snake game someone made
00:28 - on the
00:28 - site this person's name is lorenzo
00:31 - campos i guess
00:32 - and when you play this game uh it looks
00:35 - just like a standard game standard snake
00:37 - game
00:39 - but what's cool about it is that first
00:40 - of all it's written in pure
00:42 - python and this graphics that you see
00:46 - is actually just the terminal
00:50 - so if you look into the code
00:55 - you know you can see that this person
00:57 - defines some
00:59 - constants here for the graphics and then
01:02 - there's this function that they wrote
01:06 - and this is the function for displaying
01:08 - the graphics
01:10 - and this is basically just a bunch of
01:12 - print statements
01:14 - you know in this person's code the world
01:18 - of the game is represented in this
01:20 - variable and then
01:22 - this person's saying just print
01:24 - everything from the world
01:27 - and surprisingly the graphics looks
01:30 - pretty good
01:31 - and it's pretty smooth uh so i decided
01:34 - to
01:34 - you know sort of take inspiration from
01:36 - this project
01:38 - and make my own snake game so let me
01:41 - show you what it's like
01:42 - here's the game uh you know this is my
01:46 - code
01:47 - i'm just gonna run my game and show you
01:49 - what it's like
01:51 - so as you can see it's pretty similar
01:54 - graphics wise
01:56 - to the game i i just showed you i guess
01:58 - that's partly because you know i took
02:00 - some inspiration
02:01 - from from that code and partly because
02:04 - it seems pretty natural to use you know
02:08 - these particular
02:09 - emojis like green blocks for the for the
02:11 - snake and
02:12 - the apple for the food and white blocks
02:15 - for the borders
02:17 - that seems pretty reasonable but for the
02:19 - code itself
02:20 - i wrote it from scratch and there are a
02:23 - couple of you know big differences
02:25 - from this code to you know the previous
02:27 - code i showed you
02:29 - one is that you might have noticed
02:31 - whenever you eat
02:34 - the apple you know you get a little bit
02:36 - faster and i just figured
02:37 - it's more interesting that way uh but
02:41 - the big implementation difference is the
02:43 - fact that i use this
02:45 - uh blessed library it's a python library
02:49 - for dealing with
02:50 - you know graphics in a terminal and uh
02:53 - it's pretty good
02:54 - so it's kind of similar to this other
02:57 - one called
02:57 - curses it's a built-in module in python
03:01 - and i was actually trying to you know
03:03 - make a snake game
03:05 - with curses but it didn't work that well
03:08 - with unicode
03:09 - and that's why i decided to you know go
03:12 - with blessed
03:13 - it's pretty similar but it works much
03:15 - better for unicode
03:16 - and i like it let me just show you
03:20 - how i use this library and then i'm
03:23 - going to show you the next game i made
03:25 - after this one
03:26 - so to use this library blast you know
03:29 - you just need to
03:31 - do some setup here you can you know
03:33 - browse my code
03:34 - later i think i'm going to put a link to
03:36 - that in the description
03:38 - but after some setup code you just need
03:40 - to say
03:42 - [Music]
03:43 - this thing and then make a new block of
03:45 - code this says
03:48 - take start taking input from the
03:51 - keyboard
03:52 - and then hide the cursor
03:56 - i think it makes sense and then
03:59 - we need to set up a while loop so this
04:01 - is going to be our
04:02 - you know main while loop for the game
04:05 - this just says
04:07 - while the input is not q
04:11 - keep doing the following and the
04:13 - following is
04:15 - take the input from the key the keyboard
04:18 - and put it in this variable called the
04:21 - vowel
04:21 - and then do stuff with it and that way
04:26 - you know the game runs pretty smoothly i
04:29 - would say
04:31 - uh but the thing is i i was you know
04:33 - playing
04:34 - this game on my own for a while and i
04:37 - started to think
04:38 - this is kind of boring i guess it's just
04:40 - because it's kind of you know
04:42 - predictable
04:43 - and it's just like you know what to
04:46 - expect when you're playing this game
04:48 - so i thought maybe i can make it a
04:50 - little bit different
04:51 - and i thought what if you control the
04:54 - food
04:55 - instead of the snake so that's what it
04:57 - did
04:58 - okay so with that idea here's what i
05:00 - made
05:01 - i'm just gonna go to my code and
05:04 - start it
05:08 - just like before you can control it with
05:11 - you know with your arrow keys
05:13 - and look i just need to run away from
05:17 - the snake
05:18 - and as you can see uh the snake you know
05:21 - grows
05:22 - without eating anything and someone was
05:24 - asking me why
05:26 - and i think it's because the snake is
05:28 - eating air
05:29 - that's why it's growing anyway
05:32 - it's uh it's pretty fun i'm gonna put a
05:34 - you know link to this game in the
05:35 - description just in case
05:37 - you want to play or you know check out
05:40 - the code
05:41 - and when you get eaten you're done you
05:44 - die and you lose
05:45 - but it's actually possible to you know
05:48 - beat this game
05:49 - by letting the snake sort of corner
05:52 - itself
05:54 - and like i said it's pretty fun and i've
05:57 - gotten a lot of funny comments too like
06:00 - why is this so fast and
06:04 - snake's so much faster than me i love
06:07 - how people are enjoying this game
06:09 - the intensity is real i am god in this
06:12 - game
06:13 - yes you are legendary legendary wolf you
06:16 - are
06:16 - a god in this game yep and
06:20 - i got this other comment i wanted to
06:22 - show you
06:23 - uh this person's like so basically this
06:26 - is a magical snake
06:27 - that keeps growing if it eats nothing
06:29 - and squishing itself to death
06:31 - and the only way to stop it from doing
06:33 - that is to eat the magical apple that
06:35 - can run away
06:37 - it's pretty funny i love how people
06:39 - enjoy this game
06:40 - but you know i kind of figured this game
06:42 - was pretty fun to make and also to
06:45 - play so i wanted to show you guys a
06:48 - little bit of you know what
06:49 - what went behind behind like how i made
06:52 - this game
06:52 - okay so the first thing i'm going to
06:54 - show you is how i represented
06:56 - uh this state you know the whole state
06:59 - of the game
07:00 - like where the snake is and and where
07:02 - the apple is
07:05 - uh i called uh the variable
07:09 - world let me find it here
07:12 - yeah this one right here and it's
07:15 - basically a two-dimensional
07:17 - list or two-dimensional array and to
07:21 - show you guys what it's like
07:23 - i'm just gonna comment out this whole
07:27 - block of code and then i'm gonna
07:32 - print world here
07:36 - after initializing this world so let me
07:39 - run this code and
07:41 - this is what you have so basically each
07:44 - row represents
07:45 - you know each row in the game it's kind
07:48 - of like
07:49 - a bunch of pixels so the first row is
07:52 - just
07:52 - a bunch of blocks just the borders and
07:55 - the second row
07:56 - is this one and so on and
08:00 - this one is a little bit hard to see but
08:02 - you can see you know where the apple is
08:04 - and where the snake is and
08:09 - where the empty spaces are and then to
08:13 - print this properly all i needed to do
08:16 - was
08:17 - uh just this thing
08:20 - for row in world print this
08:24 - so let me show you what that looks like
08:26 - so here
08:27 - i'm just saying join
08:30 - you know all the characters or all the
08:33 - strings
08:33 - in row with a space in between them
08:37 - and the reason i need that is because
08:40 - without a space
08:41 - it looks more squashed and i think it
08:44 - looks much better
08:46 - with a space okay so let me now quickly
08:49 - explain
08:50 - how i represented the snake how i
08:52 - represented the
08:54 - apple's position and you know i'm going
08:57 - to
08:57 - quickly explain the whole structure of
08:59 - the code and then i'm going to explain
09:01 - how i made the ai for controlling the
09:04 - snake
09:05 - so to represent the position of the
09:07 - snake
09:08 - you know you need multiple lists
09:11 - each list or each array represents you
09:15 - know the position
09:16 - of the particular block of the body
09:20 - so six five uh this one represents
09:23 - the position of the head right here
09:27 - i think it's uh zero one two three four
09:30 - five six row six of
09:33 - column uh five
09:36 - and same thing with this one six four
09:39 - would be
09:40 - right here at this block and six
09:44 - three would be this block right here
09:48 - and you know i could simply use the list
09:51 - of
09:51 - lists or like two-dimensional array and
09:54 - i think it would have been
09:56 - efficient enough but to make it extra
09:58 - efficient i used a deck here
10:01 - you know i talked about this data
10:02 - structure before
10:04 - but this data structure is basically
10:06 - good for putting things
10:09 - you know from the left hand side or the
10:11 - right hand side
10:12 - or you're taking things out from either
10:14 - side
10:15 - and that makes sense for this particular
10:18 - application
10:19 - because what we need to do if we need to
10:22 - if we want to move the snake
10:23 - to let's say over here is
10:26 - we need to say okay you know where's
10:30 - this position
10:31 - and they move the head
10:35 - over there so in that you know
10:37 - particular example that would be
10:40 - six six i think so basically we need to
10:44 - put a new position from the left hand
10:46 - side
10:47 - and take out the last position
10:50 - from the right hand side so that's why i
10:53 - figured
10:54 - a deck is a good data structure for this
10:57 - and then for food it's much simpler
11:00 - because
11:01 - you know the food doesn't grow in this
11:03 - game we only have one
11:05 - single position for the food so we just
11:07 - have
11:08 - two numbers this is the number this is
11:11 - the real number
11:12 - and this one represents where the column
11:15 - is
11:16 - and one challenge i had while making
11:19 - this game
11:21 - is that i needed to make the snake
11:24 - slower
11:25 - than the apple because
11:29 - if the snake was moving at the same
11:31 - velocity as the apple
11:34 - you know you would get caught pretty
11:35 - easily
11:38 - and so let me show you how i did that
11:41 - basically this is
11:42 - you know a turn-based game uh you know
11:45 - the whole structure of the code
11:47 - is pretty similar to what i had for the
11:49 - regular
11:50 - uh snake game you know basically i'm
11:52 - using the bless
11:54 - library and then i'm saying
11:58 - this thing that i explained earlier
12:02 - and then i have this while loop as the
12:05 - main loop for the game
12:07 - and then i'm saying you know take
12:10 - take an input from the keyboard put it
12:12 - in
12:13 - this variable called val and then do
12:16 - stuff with it
12:17 - and here basically what i'm saying is
12:21 - each turn comes
12:24 - at a frequency that's determined by the
12:26 - speed
12:27 - or by the timeout and so
12:30 - each turn comes at let's say 200
12:33 - milliseconds
12:34 - and what i decided to do is uh you know
12:38 - i'm gonna let the snake move only one
12:41 - out of two turns or three out of five
12:43 - turns
12:45 - and you know for details you can just
12:47 - look at the code
12:49 - but i made these config variables n1 and
12:52 - n2
12:53 - and this basically says the snake will
12:56 - only
12:57 - move n1 out of n2 turns and that way you
13:00 - know the snake is going to be much
13:01 - slower than the apple
13:03 - okay and the last thing i want to
13:05 - explain before i wrap up this video is
13:07 - how i made the ai for moving the snake
13:11 - so before i explain let me show you you
13:13 - can see that
13:14 - it's actually following me pretty well
13:18 - and you know if you play enough you'll
13:19 - see that it starts doing some
13:21 - stupid stuff uh but it's good enough so
13:25 - let me show you how i made it
13:28 - so the key part is uh right here
13:32 - you know first i set preferred move to
13:36 - none and then depending on some
13:38 - conditions i'm gonna
13:39 - put it to you know one of up down right
13:42 - or left
13:43 - so the first thing i'm asking uh here is
13:47 - is the absolute value of y div
13:51 - which is you know food zero
13:54 - minus head zero so that would be
13:58 - the y the difference in the row
14:02 - numbers i guess and i'm doing the same
14:05 - thing with
14:06 - x if so i'm cur i'm comparing you know
14:09 - the
14:09 - the column the food belongs to uh to the
14:12 - column
14:13 - the head of the snake belongs to so that
14:16 - would be
14:16 - xdiff and i'm saying here uh
14:20 - if the absolute value of y div is
14:22 - greater than the absolute value of
14:24 - x if you know we should make
14:28 - the snake move up or down
14:32 - and we should make the snake move
14:35 - up if the y div is less than or
14:40 - equal to zero and then down if it's the
14:43 - opposite
14:44 - and if this condition is not true
14:48 - then you know do the same thing with x
14:51 - if
14:52 - if that's greater than or equal to 0
14:55 - the snake should move to the right and
14:58 - otherwise
14:58 - the snake should move to the left so
15:01 - that's how i determine the preferred
15:03 - move and after i have a single preferred
15:07 - move
15:07 - i just combine it with all of the
15:11 - directions
15:13 - and you know the directions if you see
15:15 - it's just left
15:16 - up right down
15:19 - and basically you know what i'm going to
15:21 - do after that is i'm going to call
15:22 - call that preferred moves and then
15:26 - you know just just
15:29 - check for each move in preferred move
15:32 - if the snake is able to make that move
15:36 - and you know it's kind of stupid here
15:38 - because
15:40 - the directions uh the order
15:43 - of these directions is always going to
15:45 - be the same
15:46 - and we even have like a duplicate move
15:49 - if this is right
15:50 - where you know we have right twice in
15:53 - preferred moves
15:54 - so it's not the smartest algorithm but
15:57 - it's actually good enough you know as
16:01 - you saw
16:02 - so basically here i'm saying for each
16:04 - moving preferred moves
16:07 - check if the snake is able to make that
16:11 - move
16:12 - uh you know it's able to make the move
16:15 - if
16:15 - uh the destination is either food or an
16:18 - empty space
16:20 - and uh if not check the next move
16:24 - and then here what i'm saying is
16:27 - if the next move that we want to make
16:31 - is still none after running the for loop
16:36 - that will mean that there's no legal
16:38 - next move that the snake is able to make
16:40 - so then we break out of the for loop
16:43 - and then we just say what you want how
16:46 - did you do it
16:48 - and you know the reason i'm saying how
16:50 - did you do it here
16:51 - is because when i was playing it by
16:53 - myself
16:55 - it was like really hard uh to beat it
16:57 - actually
16:58 - at least at the beginning uh i guess
17:01 - that's that's partly because
17:02 - the snake used to be a little bit faster
17:04 - than it is now in
17:06 - in the current code uh but partly also
17:09 - because it's
17:10 - it's just it seems like a hard game and
17:12 - there
17:13 - there's some luck involved but you know
17:16 - i think if you keep playing it you'll
17:17 - eventually
17:18 - uh be able to get it okay so that's how
17:22 - i
17:22 - uh made the game uh but before i go i
17:24 - wanted to talk about
17:26 - a few things and that i learned and sort
17:28 - of relearned
17:29 - throughout this whole experience of
17:31 - building this simple game
17:33 - first of all if you make a game and if
17:36 - you find it
17:37 - boring then think about it
17:41 - how can you make it more interesting
17:42 - flip the idea maybe
17:44 - if you're the snake maybe you can be the
17:46 - food instead
17:50 - the second thing i learned is i think
17:52 - that
17:53 - even when the enemy ai is really simple
17:57 - it can you know make the game pretty
18:00 - interesting
18:01 - so when i think about games like you
18:04 - know super mario
18:05 - brothers or super mario world those
18:08 - enemies might be pretty simple like they
18:09 - might be kind of
18:10 - you know walking back and forth or just
18:12 - following you but combine
18:14 - combining that with the you know with an
18:17 - interesting environment
18:18 - i think you can make a compelling and
18:21 - entertaining experience
18:22 - and the third thing is um you know it's
18:26 - just the fact that programming is fun
18:28 - uh just making this game kind of
18:30 - reminded me of how i started
18:32 - programming you know just by making
18:34 - random things
18:35 - i don't remember if i made a game but it
18:38 - was just like you know random you know
18:39 - ruby
18:40 - and python programming and it's nice to
18:43 - be able to do that again especially when
18:45 - you share it
18:46 - and you know get some feedback anyway
18:50 - uh i'm not sure if i said it before but
18:53 - if you wanna look into the code i
18:56 - recommend
18:57 - either forking this project on this
18:59 - website replit
19:01 - or you know just you know checking out
19:02 - my code and copy
19:04 - you can copy to your local environment
19:07 - and then
19:08 - play around with it um all right
19:11 - so that's all i wanted to talk about in
19:13 - this video
19:14 - uh sorry again for for the long gap i'm
19:17 - gonna try to you know
19:18 - make more videos in the future i feel
19:20 - like i keep saying the same thing but
19:22 - you know i really mean it and
19:24 - uh thank you for waiting uh if you were
19:26 - waiting for
19:27 - this video and thank you for watching
19:30 - this video
19:31 - see you guys

Cleaned transcript:

just like before you can control it with you know with your arrow keys and look i just need to run away from the snake everyone so it's been a while since my last video but i'm back with a new video and just a quick disclaimer i'm making this video in collaboration with replace so last week i was playing around with their website replit and i found this snake game someone made on the site this person's name is lorenzo campos i guess and when you play this game uh it looks just like a standard game standard snake game but what's cool about it is that first of all it's written in pure python and this graphics that you see is actually just the terminal so if you look into the code you know you can see that this person defines some constants here for the graphics and then there's this function that they wrote and this is the function for displaying the graphics and this is basically just a bunch of print statements you know in this person's code the world of the game is represented in this variable and then this person's saying just print everything from the world and surprisingly the graphics looks pretty good and it's pretty smooth uh so i decided to you know sort of take inspiration from this project and make my own snake game so let me show you what it's like here's the game uh you know this is my code i'm just gonna run my game and show you what it's like so as you can see it's pretty similar graphics wise to the game i i just showed you i guess that's partly because you know i took some inspiration from from that code and partly because it seems pretty natural to use you know these particular emojis like green blocks for the for the snake and the apple for the food and white blocks for the borders that seems pretty reasonable but for the code itself i wrote it from scratch and there are a couple of you know big differences from this code to you know the previous code i showed you one is that you might have noticed whenever you eat the apple you know you get a little bit faster and i just figured it's more interesting that way uh but the big implementation difference is the fact that i use this uh blessed library it's a python library for dealing with you know graphics in a terminal and uh it's pretty good so it's kind of similar to this other one called curses it's a builtin module in python and i was actually trying to you know make a snake game with curses but it didn't work that well with unicode and that's why i decided to you know go with blessed it's pretty similar but it works much better for unicode and i like it let me just show you how i use this library and then i'm going to show you the next game i made after this one so to use this library blast you know you just need to do some setup here you can you know browse my code later i think i'm going to put a link to that in the description but after some setup code you just need to say this thing and then make a new block of code this says take start taking input from the keyboard and then hide the cursor i think it makes sense and then we need to set up a while loop so this is going to be our you know main while loop for the game this just says while the input is not q keep doing the following and the following is take the input from the key the keyboard and put it in this variable called the vowel and then do stuff with it and that way you know the game runs pretty smoothly i would say uh but the thing is i i was you know playing this game on my own for a while and i started to think this is kind of boring i guess it's just because it's kind of you know predictable and it's just like you know what to expect when you're playing this game so i thought maybe i can make it a little bit different and i thought what if you control the food instead of the snake so that's what it did okay so with that idea here's what i made i'm just gonna go to my code and start it just like before you can control it with you know with your arrow keys and look i just need to run away from the snake and as you can see uh the snake you know grows without eating anything and someone was asking me why and i think it's because the snake is eating air that's why it's growing anyway it's uh it's pretty fun i'm gonna put a you know link to this game in the description just in case you want to play or you know check out the code and when you get eaten you're done you die and you lose but it's actually possible to you know beat this game by letting the snake sort of corner itself and like i said it's pretty fun and i've gotten a lot of funny comments too like why is this so fast and snake's so much faster than me i love how people are enjoying this game the intensity is real i am god in this game yes you are legendary legendary wolf you are a god in this game yep and i got this other comment i wanted to show you uh this person's like so basically this is a magical snake that keeps growing if it eats nothing and squishing itself to death and the only way to stop it from doing that is to eat the magical apple that can run away it's pretty funny i love how people enjoy this game but you know i kind of figured this game was pretty fun to make and also to play so i wanted to show you guys a little bit of you know what what went behind behind like how i made this game okay so the first thing i'm going to show you is how i represented uh this state you know the whole state of the game like where the snake is and and where the apple is uh i called uh the variable world let me find it here yeah this one right here and it's basically a twodimensional list or twodimensional array and to show you guys what it's like i'm just gonna comment out this whole block of code and then i'm gonna print world here after initializing this world so let me run this code and this is what you have so basically each row represents you know each row in the game it's kind of like a bunch of pixels so the first row is just a bunch of blocks just the borders and the second row is this one and so on and this one is a little bit hard to see but you can see you know where the apple is and where the snake is and where the empty spaces are and then to print this properly all i needed to do was uh just this thing for row in world print this so let me show you what that looks like so here i'm just saying join you know all the characters or all the strings in row with a space in between them and the reason i need that is because without a space it looks more squashed and i think it looks much better with a space okay so let me now quickly explain how i represented the snake how i represented the apple's position and you know i'm going to quickly explain the whole structure of the code and then i'm going to explain how i made the ai for controlling the snake so to represent the position of the snake you know you need multiple lists each list or each array represents you know the position of the particular block of the body so six five uh this one represents the position of the head right here i think it's uh zero one two three four five six row six of column uh five and same thing with this one six four would be right here at this block and six three would be this block right here and you know i could simply use the list of lists or like twodimensional array and i think it would have been efficient enough but to make it extra efficient i used a deck here you know i talked about this data structure before but this data structure is basically good for putting things you know from the left hand side or the right hand side or you're taking things out from either side and that makes sense for this particular application because what we need to do if we need to if we want to move the snake to let's say over here is we need to say okay you know where's this position and they move the head over there so in that you know particular example that would be six six i think so basically we need to put a new position from the left hand side and take out the last position from the right hand side so that's why i figured a deck is a good data structure for this and then for food it's much simpler because you know the food doesn't grow in this game we only have one single position for the food so we just have two numbers this is the number this is the real number and this one represents where the column is and one challenge i had while making this game is that i needed to make the snake slower than the apple because if the snake was moving at the same velocity as the apple you know you would get caught pretty easily and so let me show you how i did that basically this is you know a turnbased game uh you know the whole structure of the code is pretty similar to what i had for the regular uh snake game you know basically i'm using the bless library and then i'm saying this thing that i explained earlier and then i have this while loop as the main loop for the game and then i'm saying you know take take an input from the keyboard put it in this variable called val and then do stuff with it and here basically what i'm saying is each turn comes at a frequency that's determined by the speed or by the timeout and so each turn comes at let's say 200 milliseconds and what i decided to do is uh you know i'm gonna let the snake move only one out of two turns or three out of five turns and you know for details you can just look at the code but i made these config variables n1 and n2 and this basically says the snake will only move n1 out of n2 turns and that way you know the snake is going to be much slower than the apple okay and the last thing i want to explain before i wrap up this video is how i made the ai for moving the snake so before i explain let me show you you can see that it's actually following me pretty well and you know if you play enough you'll see that it starts doing some stupid stuff uh but it's good enough so let me show you how i made it so the key part is uh right here you know first i set preferred move to none and then depending on some conditions i'm gonna put it to you know one of up down right or left so the first thing i'm asking uh here is is the absolute value of y div which is you know food zero minus head zero so that would be the y the difference in the row numbers i guess and i'm doing the same thing with x if so i'm cur i'm comparing you know the the column the food belongs to uh to the column the head of the snake belongs to so that would be xdiff and i'm saying here uh if the absolute value of y div is greater than the absolute value of x if you know we should make the snake move up or down and we should make the snake move up if the y div is less than or equal to zero and then down if it's the opposite and if this condition is not true then you know do the same thing with x if if that's greater than or equal to 0 the snake should move to the right and otherwise the snake should move to the left so that's how i determine the preferred move and after i have a single preferred move i just combine it with all of the directions and you know the directions if you see it's just left up right down and basically you know what i'm going to do after that is i'm going to call call that preferred moves and then you know just just check for each move in preferred move if the snake is able to make that move and you know it's kind of stupid here because the directions uh the order of these directions is always going to be the same and we even have like a duplicate move if this is right where you know we have right twice in preferred moves so it's not the smartest algorithm but it's actually good enough you know as you saw so basically here i'm saying for each moving preferred moves check if the snake is able to make that move uh you know it's able to make the move if uh the destination is either food or an empty space and uh if not check the next move and then here what i'm saying is if the next move that we want to make is still none after running the for loop that will mean that there's no legal next move that the snake is able to make so then we break out of the for loop and then we just say what you want how did you do it and you know the reason i'm saying how did you do it here is because when i was playing it by myself it was like really hard uh to beat it actually at least at the beginning uh i guess that's that's partly because the snake used to be a little bit faster than it is now in in the current code uh but partly also because it's it's just it seems like a hard game and there there's some luck involved but you know i think if you keep playing it you'll eventually uh be able to get it okay so that's how i uh made the game uh but before i go i wanted to talk about a few things and that i learned and sort of relearned throughout this whole experience of building this simple game first of all if you make a game and if you find it boring then think about it how can you make it more interesting flip the idea maybe if you're the snake maybe you can be the food instead the second thing i learned is i think that even when the enemy ai is really simple it can you know make the game pretty interesting so when i think about games like you know super mario brothers or super mario world those enemies might be pretty simple like they might be kind of you know walking back and forth or just following you but combine combining that with the you know with an interesting environment i think you can make a compelling and entertaining experience and the third thing is um you know it's just the fact that programming is fun uh just making this game kind of reminded me of how i started programming you know just by making random things i don't remember if i made a game but it was just like you know random you know ruby and python programming and it's nice to be able to do that again especially when you share it and you know get some feedback anyway uh i'm not sure if i said it before but if you wanna look into the code i recommend either forking this project on this website replit or you know just you know checking out my code and copy you can copy to your local environment and then play around with it um all right so that's all i wanted to talk about in this video uh sorry again for for the long gap i'm gonna try to you know make more videos in the future i feel like i keep saying the same thing but you know i really mean it and uh thank you for waiting uh if you were waiting for this video and thank you for watching this video see you guys
