With timestamps:

00:00 - you're given a sequence of characters or
00:02 - string and the problem here is writing a
00:05 - function that takes this string as the
00:07 - input and finds the longest subsequence
00:10 - within the string consisting of a single
00:13 - character in this particular example
00:15 - that's triple B right here which is
00:18 - longer than double A or double D for
00:21 - example and the return format over your
00:23 - function should be depending on your
00:25 - language either a hash table or a
00:27 - dictionary with the character as the key
00:29 - and the length as the value and if you
00:33 - want to practice pause the video right
00:34 - here and see if you can solve it and
00:36 - test your solution within 10 minutes so
00:39 - how would I solve this problem the key
00:42 - here is to go through this string only
00:44 - once from left to right so that we can
00:47 - solve this problem in Big O of N in time
00:49 - and as we go through the string there
00:52 - are only five fireballs that we are
00:54 - going to keep track of current for the
00:57 - current character that we are examining
00:59 - max count for the length of the longest
01:02 - sequence that we've seen so far
01:04 - consisting of a single character max car
01:07 - for the character that sequence is
01:09 - consisted of per curve for the previous
01:12 - character before the current character
01:14 - and count for the length of the current
01:17 - sequence that we are examining so let's
01:19 - say we're looking at the third character
01:21 - B current is B of course and max count
01:25 - is 2 because the longest sequence that
01:28 - we've seen so far consisting of a single
01:30 - character is double a right here and the
01:33 - length of that is 2 max car is a because
01:36 - that sequence is consisted of two A's
01:39 - probe car is a because the previous
01:42 - character to the current chapter that we
01:44 - are looking at is a count is one because
01:48 - that's the length of the current
01:49 - sequence of a single character that
01:51 - we're examining which happens to be here
01:53 - just a single chapter B if instead we
01:56 - were looking at this be near the end
01:58 - count would be three because that's the
02:03 - length of the current sequence that were
02:04 - examining and we'll be able to replace
02:06 - max count with three and max car with B
02:10 - and when we reach the end of the string
02:12 - we're
02:13 - max count and Max cure which are three
02:17 - and B in this example to return a
02:20 - dictionary or hash table with B as a key
02:23 - and three as the corresponding value
02:25 - let's see what this solution might look
02:27 - like in code we're going to write a
02:29 - function called longest which takes seek
02:32 - as the input and C case of course the
02:35 - given sequence of characters and just
02:37 - for convenience here I'm going to assume
02:39 - that seek is always non empty and the
02:42 - return value from this function will be
02:44 - a dictionary or hash table with the
02:47 - length of the longest sequence with a
02:49 - single character in this case 3 as the
02:52 - value and the corresponding key will be
02:54 - that character first thing we need to do
02:57 - in this function is we need to
02:59 - initialize some variables max count max
03:02 - card and pref car it doesn't matter too
03:04 - much what we initialize them to after
03:07 - that we're going to run a for loop for
03:09 - each character which we're going to call
03:11 - current in seek in the for loop will
03:14 - first check if the previous character is
03:17 - the same as the current character that
03:18 - we're looking at for example if current
03:21 - is the second d in the string then it's
03:25 - same as the previous character so in
03:28 - that case we're going to increment count
03:30 - by 1 if that's not the case if the
03:33 - previous character is different from the
03:35 - current character that we're looking at
03:37 - for example if we're looking at the
03:39 - first B right here in the string then
03:42 - we're going to reset count to be 1 so
03:45 - when we're looking at the first D right
03:47 - here we're essentially examining a
03:50 - sequence of a single character and the
03:52 - length of that is of course 1 so count
03:54 - will also be 1 but when we get to the
03:58 - second D we're looking at a sequence of
04:01 - 2 DS and the length of that is 2 so
04:05 - count will be 2 if this new count is
04:08 - larger than max count which is the
04:11 - largest count we've seen so far then
04:13 - we're going to update max count to be
04:15 - count and we're going to also update the
04:18 - corresponding character Max car to be
04:21 - the current character and after that
04:23 - we're going to update probe card to be
04:26 - the current character
04:27 - and at the end of the function of course
04:29 - we're going to return a dictionary with
04:32 - max car as the key and max count as the
04:35 - value that's my solution to this problem
04:38 - and thanks for watching

Cleaned transcript:

you're given a sequence of characters or string and the problem here is writing a function that takes this string as the input and finds the longest subsequence within the string consisting of a single character in this particular example that's triple B right here which is longer than double A or double D for example and the return format over your function should be depending on your language either a hash table or a dictionary with the character as the key and the length as the value and if you want to practice pause the video right here and see if you can solve it and test your solution within 10 minutes so how would I solve this problem the key here is to go through this string only once from left to right so that we can solve this problem in Big O of N in time and as we go through the string there are only five fireballs that we are going to keep track of current for the current character that we are examining max count for the length of the longest sequence that we've seen so far consisting of a single character max car for the character that sequence is consisted of per curve for the previous character before the current character and count for the length of the current sequence that we are examining so let's say we're looking at the third character B current is B of course and max count is 2 because the longest sequence that we've seen so far consisting of a single character is double a right here and the length of that is 2 max car is a because that sequence is consisted of two A's probe car is a because the previous character to the current chapter that we are looking at is a count is one because that's the length of the current sequence of a single character that we're examining which happens to be here just a single chapter B if instead we were looking at this be near the end count would be three because that's the length of the current sequence that were examining and we'll be able to replace max count with three and max car with B and when we reach the end of the string we're max count and Max cure which are three and B in this example to return a dictionary or hash table with B as a key and three as the corresponding value let's see what this solution might look like in code we're going to write a function called longest which takes seek as the input and C case of course the given sequence of characters and just for convenience here I'm going to assume that seek is always non empty and the return value from this function will be a dictionary or hash table with the length of the longest sequence with a single character in this case 3 as the value and the corresponding key will be that character first thing we need to do in this function is we need to initialize some variables max count max card and pref car it doesn't matter too much what we initialize them to after that we're going to run a for loop for each character which we're going to call current in seek in the for loop will first check if the previous character is the same as the current character that we're looking at for example if current is the second d in the string then it's same as the previous character so in that case we're going to increment count by 1 if that's not the case if the previous character is different from the current character that we're looking at for example if we're looking at the first B right here in the string then we're going to reset count to be 1 so when we're looking at the first D right here we're essentially examining a sequence of a single character and the length of that is of course 1 so count will also be 1 but when we get to the second D we're looking at a sequence of 2 DS and the length of that is 2 so count will be 2 if this new count is larger than max count which is the largest count we've seen so far then we're going to update max count to be count and we're going to also update the corresponding character Max car to be the current character and after that we're going to update probe card to be the current character and at the end of the function of course we're going to return a dictionary with max car as the key and max count as the value that's my solution to this problem and thanks for watching
