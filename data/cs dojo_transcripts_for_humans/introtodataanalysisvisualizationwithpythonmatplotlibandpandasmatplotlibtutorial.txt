With timestamps:

00:00 - hey everyone this is my introduction to
00:02 - their analysis slash data visualization
00:05 - with Python in this video I'm gonna
00:07 - cover why you might want to use data
00:09 - visualization and why you might want to
00:11 - use Python and map lot live for it and
00:13 - then we're gonna go over some simple
00:15 - examples of how to actually use these
00:18 - tools and then using these tools we're
00:21 - gonna do sort of a real analysis with a
00:23 - real data set at the end and in this
00:26 - video I'm only gonna cover line charts
00:28 - just to keep everything simple I'm also
00:30 - gonna put a more detailed version of
00:32 - this outline in the comment section
00:34 - below so you don't have to watch the
00:35 - whole thing
00:36 - if you don't want to okay so why should
00:38 - you use data visualization in the first
00:40 - place well error visualization is
00:43 - actually often the first step of any
00:45 - type of data analysis work whether it's
00:47 - simple there analysis or statistical
00:50 - analysis or machine learning analysis
00:52 - and the reason for that is because
00:54 - visualizing data often gives you an
00:56 - intuitive understanding of the data and
00:58 - it often helps you see patterns that are
01:01 - otherwise hard to see and we're gonna
01:03 - see an example of that later okay and
01:05 - why should you use Python for this well
01:08 - python is not the only good choice but I
01:11 - would say it's one of the best and the
01:13 - reason is first of all it's a
01:15 - general-purpose language that's pretty
01:16 - easy to use and learn and it also has
01:19 - many libraries for scientific computing
01:21 - and data science including Mapple lib
01:25 - and if you work at a company your
01:27 - company might already use Python for
01:29 - something else and if that's the case
01:31 - that's really nice because then you and
01:34 - your team are not gonna have to learn a
01:36 - totally new language to do some data
01:38 - analysis and why are we using Mapple
01:41 - live for this
01:41 - well Mapple live is not the only good
01:44 - visualization library for python but
01:46 - it's still one of the most popular
01:48 - choices and there are actually other
01:50 - libraries that are based on MATLAB so if
01:53 - you learn MATLAB
01:54 - it's gonna help you learn these you know
01:56 - other libraries for example this one
01:58 - called C born later on if you want to
01:59 - and Mapple lib is also pretty easy to
02:02 - get started with anyway let's dive into
02:05 - a demo for this demo we're gonna use
02:07 - something called Jupiter notebook and a
02:09 - few other Python libraries and we're
02:12 - gonna use anaconda
02:13 - to install them if you're not familiar
02:15 - with JIRA notebook and anaconda I have
02:17 - an explanation about them in my Python
02:19 - tutorial video so I'm gonna leave a link
02:22 - to that in the description anyway to
02:24 - install anaconda just search for
02:26 - anaconda Python or directly go to
02:30 - anaconda org and there find the button
02:33 - that says download anaconda and select
02:36 - whatever OS you are using I'm using Mac
02:39 - here and click download under Python
02:42 - three-point-something version instead of
02:43 - python 2 point something because we're
02:46 - gonna use python 3 here and select where
02:49 - you want to download this package save
02:51 - it and once it's downloaded open up the
02:54 - package that you just download it and
02:56 - then just click continue continue
02:58 - continue continue agree install for me
03:02 - only you or install on the specific disk
03:04 - it doesn't matter which one and continue
03:06 - and click install and this process is
03:09 - gonna take a while after some waiting
03:11 - you might see this prompt to install
03:13 - microsoft vs code we don't need that so
03:16 - let's just continue here and then close
03:19 - and then to launch jupiter notebook you
03:22 - can do it through this thing called
03:24 - anaconda navigator
03:25 - so just launch it like you launch any
03:28 - other application just dismiss whatever
03:31 - comes up and then click launch in that
03:35 - jibra notebook section and then you
03:37 - should see a browser window show up with
03:40 - the jupiter notebook interface now if
03:42 - you want to follow this tutorial the
03:44 - first thing you should do is you should
03:45 - create a new folder let's say on desktop
03:50 - and let's call this one data
03:53 - visualization and we're gonna put all
03:55 - our data and to put a notebook file here
03:58 - so let's first download our data to do
04:01 - that just go to CS dojo dot io slash
04:03 - data and download these two files sample
04:08 - data CSV and country's that CSV and then
04:11 - put these CSV files in the folder that
04:14 - you just created data visualization
04:16 - after that go back to the Jupiter
04:18 - notebook interface and you can just
04:21 - navigate to desktop and then the folder
04:24 - that we just created data visualization
04:27 - and to create a new jabber notebook file
04:29 - here just find the new button on the
04:32 - right and click Python 3 right now this
04:35 - notebook file has untitled as the title
04:38 - so let's change it to data visualization
04:42 - with Python click rename and you have a
04:46 - notebook called data visualization with
04:48 - Python you can check it just by going to
04:51 - desktop and then to the folder that you
04:53 - just created and you should see that
04:56 - there's a file called data visualization
04:58 - with python dot I PI and B and it's
05:01 - really important that this notebook file
05:03 - is in the same folder as the data that
05:06 - you just downloaded countries that CSV
05:08 - and the other one and once everything is
05:11 - set up just right in the first cell
05:14 - import pandas as PD this means we want
05:19 - to import a module called panels as P D
05:23 - or we want to give it sort of a nickname
05:25 - and that's going to be P D you can run
05:28 - the cell by clicking this button and now
05:30 - pandas is imported as P D and here we're
05:33 - gonna use pandas for importing and using
05:36 - some data from our CSV files and we need
05:39 - to import another module here so for
05:42 - that just right from my plot lib import
05:46 - PI plot as PRT so this says from the
05:50 - matplotlib package import PI pop module
05:54 - and then call it PLT let's run this cell
05:57 - and now PI plot is imported we're gonna
06:00 - use PI plot from Apple lib for making
06:03 - our charts so here let's first take a
06:05 - look at a really simple example of how
06:07 - to use PI plot so here I'm going to
06:10 - write x equals 1 2 3 it's a list of 3
06:14 - elements and y equals 1 4 & 9 and to
06:20 - plot this set of data you can just write
06:22 - PLT the plot X comma Y and this plots X
06:27 - on the x axis and y on the y axis and
06:30 - then you can show this graph by writing
06:33 - PLT - OH when you run the cell you
06:37 - should see a graph like this you see
06:39 - that the values of X
06:41 - our one two and three as expected and
06:44 - the values of y are 1 4 & 9 if you want
06:49 - to add a title to this graph you can do
06:51 - so by writing
06:52 - PLT dot title tests plots right after
06:57 - the plot statement before the show
06:59 - statement and then you can add an X
07:01 - label and the y they bow as well by
07:03 - writing PLT dot X label let's call the X
07:07 - label X and Quixote dot y label let's
07:11 - call it y label Y here and when you run
07:14 - this cell you see that there's a title
07:16 - called test plot and the X label called
07:19 - X and why they both called Y okay what
07:21 - if you wanted to plot multiple lines
07:23 - here well to do that let's create
07:25 - another list let's call it D and this
07:29 - one is gonna have ten five and there
07:32 - inside and to plot X and D on top of x
07:36 - and y you can just right PLT the plots X
07:40 - comma Z right after PR T dot X comma Y
07:45 - and then let's fix the Y level here to Y
07:49 - & Z and when you run this cell you
07:52 - should see these two lines so the blue
07:55 - line represents x and y and the orange
07:58 - line represents x and z so PR t dot plot
08:02 - x and z plot x on the x axis and z on
08:06 - the y axis but right now it's kind of
08:08 - hard to tell which line represents which
08:10 - data so we can fix it by adding a legend
08:14 - statement let's add that after the y
08:17 - level statement by writing quixote dot
08:19 - legend parentheses square brackets
08:23 - double quotes this is y comma double
08:27 - quotes this is Z so note here that this
08:31 - legend function takes a list as an
08:34 - argument and when you run this so you
08:37 - should see this legend that says the
08:39 - blue line is this is y and the orange
08:42 - line is this is d okay that's the basics
08:45 - of body now let's see how to load data
08:47 - from a CSV file for that you can just
08:50 - write sample and the score data equals
08:54 - d or pandas that read CSV by the way I
08:58 - just press tab here to do autocomplete
09:01 - and then parentheses sample underscore
09:04 - data dot CSV now before you run this
09:08 - cell make sure that the notebook file
09:10 - data visualization with Python that I PI
09:12 - and B is in the same folder as sample
09:16 - data dot CSV when you run this cell this
09:19 - data sample data dot CSV is loaded by
09:22 - the pandas module which we call PD and
09:25 - then it's assigned to this variable
09:27 - called sample data you can check what's
09:29 - inside this variable sample underscore
09:31 - data just by writing sample underscore
09:34 - data in this new cell and then when you
09:36 - run this cell you should see something
09:38 - like this so as you can see this data
09:41 - has three columns column a column B and
09:43 - column C and five rows and you see a
09:47 - bunch of values inside this table if you
09:49 - want to check if this set of data is
09:51 - exactly the same as the original data
09:54 - you can do so by opening up the original
09:57 - data file sample data dot CSV with Excel
10:00 - or any other spreadsheet application and
10:02 - when you open it you should see exactly
10:05 - the same data column a column B column C
10:08 - with five rows with a bunch of values
10:10 - okay the only difference that you might
10:13 - see is that in Jupiter notebook you
10:15 - might see these numbers zero one two
10:18 - three and four and these are just
10:20 - indices for the rows and you can check
10:23 - what type this variable is by writing
10:26 - type parentheses sample underscore data
10:29 - and when you run this cell it says that
10:32 - this is pandals d'accord a friend data
10:35 - frame so this is a data frame type
10:37 - that's defined by the pandas module and
10:40 - the data frame type is used to contain a
10:43 - table like piece of information just
10:45 - like this one okay now what if you
10:48 - wanted to plot data in this data frame
10:50 - for example the values of column a on
10:53 - the x-axis and column C on the y-axis
10:56 - what to do that you need to be able to
10:59 - retrieve a specific column and you can
11:01 - do that by writing sample underscore
11:03 - data dot column dot C column underscore
11:07 - C
11:07 - when you run this cell you see that a
11:10 - column see its retrieved it has the
11:12 - values 10 8 6 4 and 2 and the numbers
11:16 - you see on the left are just indices 0 1
11:19 - 2 3 & 4 just like before you can check
11:21 - what type this is by writing type
11:24 - parentheses sample data column C and
11:26 - when you run the cell you see that this
11:29 - is Parnell's duck or that series that
11:31 - series so this is basically a series
11:33 - type that's defined by the pandas module
11:36 - and it's a type that's used to store a
11:38 - series of values for example these
11:41 - values 10 8 6 4 & 2 now what if we
11:44 - wanted to retrieve a specific value out
11:47 - of this series well if you want to
11:49 - retrieve for example the second value
11:50 - here 8 you can do so by writing sample
11:53 - data column C dot I'd lock I LOC square
11:58 - brackets 1 and this retrieves the second
12:01 - value of the series 8 and if you want to
12:04 - retrieve the third value 6 you can write
12:06 - I lock 2 and that gets the third value
12:09 - and if you want to retrieve the first
12:11 - value you can write I lock 0 and this
12:14 - should give us 10 and it does ok and
12:19 - using what we've just learned here we'll
12:21 - be able to plot the data in this data
12:23 - frame so let's say we want to plot
12:25 - column a on the x-axis and column B on
12:28 - the y-axis we can do that by writing PRT
12:32 - dot plots sample data dot column a comma
12:36 - sample data dot column B and we can show
12:41 - it by writing PLT that show let's see
12:44 - how it looks we have 1 2 3 4 and 5 on
12:48 - the x-axis and on the y-axis we have 1 4
12:52 - 9 16 and 25 as expected if you want to
12:56 - add a column C to this data you can
12:58 - write PRT dot plots sample data dot
13:01 - column a so let's use column a as the
13:04 - x-axis again and the sample data dot
13:08 - column C when you run the cell you see
13:10 - that there are two lines here just like
13:13 - before if you want to make this graph a
13:15 - little bit easier to read you can add a
13:17 - titles and a legend and by the way in
13:20 - this plot function
13:21 - you can use the third argument to change
13:24 - how the plot looks so for example if you
13:27 - give it o in a string as the argument in
13:30 - the first line for column B and when you
13:33 - run the cell the plot becomes dots
13:36 - instead of just a line and there's a lot
13:38 - more you can do you can find more about
13:40 - it in the official documentation anyway
13:43 - let's move on and do sort of a real
13:45 - analysis with a real data set now for
13:47 - this analysis we're gonna use this data
13:50 - country's dot CSV it should be in the
13:53 - same folder as well and when you open it
13:55 - you should see this data so we have a
13:58 - bunch of countries and a bunch of ears
14:00 - ranging from 1952 to 2007 for every five
14:04 - years and population for each year for
14:07 - that country and you can see that there
14:09 - are a lot of rows in this data
14:11 - so let's now import that data just like
14:14 - before by writing PD or pandas that read
14:17 - CSV parentheses single quotes or double
14:20 - quotes countries dot CSV and by the way
14:24 - this is a string single quotes country's
14:27 - dot CSV and in Python you can use either
14:30 - double quotes or single quotes to
14:32 - express a string let's assign that to a
14:34 - new variable called data by writing data
14:37 - equals and when you run the cell this
14:40 - data is loaded onto data so once you
14:43 - write data in this new cell and run it
14:45 - you should be able to see this data in a
14:48 - data frame now let's say that the
14:50 - analysis we want to do here is we want
14:53 - to compare the population girls in the
14:55 - US and China now to do this analysis the
14:58 - first thing we want to do is we want to
15:00 - isolate the data for the US and China we
15:03 - can do that for the US by writing us
15:05 - equals data square brackets there that
15:08 - country EKOS United States in single
15:12 - quotes and when you run this cell us now
15:16 - only contains the data for the United
15:18 - States so let's break down this
15:20 - statement a little bit more
15:22 - let's click insert here and insert cell
15:25 - bill when you write the other country
15:27 - equals United States this actually gives
15:31 - a series of a bunch of choose and forces
15:34 - so when the roll
15:35 - is not us this gives us false and when
15:40 - it is us it gives us true we don't see
15:43 - any cheese here but there are a bunch of
15:45 - cheese here where the rows are for the
15:48 - US and then when you right there a scrub
15:50 - buckets this a series of bunch of trues
15:53 - and falses this gives us a portion of
15:56 - the data where the value of the series
15:59 - is true and that's the data for that us
16:02 - as you can see here and then we just
16:04 - assign it to this variable called us
16:07 - okay let's now do the same thing for
16:09 - China by writing China
16:11 - EKOS theta square brackets that are the
16:14 - country equals China and when you run
16:17 - this so and when you write China here
16:19 - and run this cell you should only see
16:22 - the data for China and using these two
16:25 - variables US and China will be able to
16:27 - compare their population growth so let's
16:30 - first plot u.s. population here by
16:32 - writing
16:33 - PLT dot plot us dear comma u.s. top
16:37 - population you can show this plot with
16:40 - TLT does show and when you run this cell
16:42 - used to see this graph you see that US
16:46 - dollar is party on the x-axis and US the
16:49 - population is plotted on the y-axis but
16:52 - you see this scientific notation thing
16:53 - 1e8 because the numbers are so big so
16:57 - let's divide the whole population each
17:00 - number in the series with 1 million or
17:02 - 10 to the power of 6 that's 10 star star
17:06 - 6 in python and when you run the cell
17:09 - again you now see the population in
17:11 - millions so this is 160 million and it
17:15 - goes up to I think more than 300 million
17:18 - in 2007 and let's plot China's data on
17:21 - top of the spot by writing
17:23 - PLT dot china that year actually you
17:27 - could use us that year or China that
17:29 - year because we have exactly the set of
17:31 - ears but for now let's just use China
17:33 - deer for the x-axis and China dot
17:37 - population for the y-axis and we're
17:40 - gonna divide this by 1 million as well
17:42 - to make the population show in millions
17:44 - when you run the cell you should see
17:47 - these two lines let's add a
17:49 - and titles here to make this graph
17:51 - easier to read so PLT legend parentheses
17:55 - square brackets United States and China
17:59 - and the X label PRT da hex label should
18:04 - be just here and PRT da Y label should
18:08 - be population run this cell again and
18:11 - this graph is much easier to read so you
18:14 - can see that China's population started
18:16 - out much larger than the US in 1952 and
18:19 - it seems like it's going faster as well
18:22 - now what if you wanted to compare
18:24 - instead of the absolute amount that you
18:26 - see here the percentage girls from the
18:28 - first year that we have in our data 1952
18:32 - well there are several different ways of
18:34 - doing this but I'm gonna show you just
18:35 - one way so to do that let's first copy
18:38 - this whole block of code over here now
18:42 - let's say that for each country we want
18:44 - to find the percentage girls from the
18:46 - first year so we want to set the first
18:48 - years amount to 100 as a 100% and show
18:53 - the rest of the data in percentage
18:55 - relative to the first year and we can do
18:57 - that by dividing this whole series for
19:00 - example us stop population with the
19:02 - first years population and then
19:04 - multiplying everything by 100 so to show
19:07 - you what I mean let's just create a new
19:10 - cell here above by clicking insert cell
19:13 - above here and here first I'm gonna
19:15 - write us that population and you see a
19:18 - series of population here for each year
19:21 - and the first row you see here is the
19:23 - first year's population or the
19:25 - population in 1952 I think let's insert
19:29 - a new cell below here now to retrieve
19:32 - the first years population you can just
19:35 - write us top population the Eyelock
19:38 - square brackets 0 and this gives us the
19:42 - first years population which is this
19:43 - amount then we can divide the whole
19:46 - population this whole series by the
19:48 - first years population just by writing
19:50 - us the population divided by us the
19:54 - publishing dialogue square brackets
19:56 - there and this gives us this series so
19:59 - as you can see the first year is set to
20:01 - 1 and the rest of the years are
20:03 - shown in relative amounts and if you
20:06 - multiply everything by 100 just by
20:08 - writing start 100 here you'll be able to
20:10 - show everything in percentage amounts so
20:13 - you can see that the first year is shown
20:15 - as 100% and from 1952 to 2007 which is
20:21 - the last year we have the population
20:23 - grew by 90 percent now like I said
20:25 - earlier this is not the only method to
20:27 - show the relative girls in population
20:30 - but I chose this method here because
20:32 - it's pretty simple to implement
20:33 - anyway let's copy this whole thing and
20:36 - paste it over here to replace the y-axis
20:40 - let's do the same thing for China as
20:42 - well so copy the whole thing for China
20:45 - here and then replace us with China once
20:48 - you do that let's change the population
20:50 - my label to population girls and let's
20:54 - just write first year equals 100 just
20:57 - for clarity here when you run this cell
21:00 - you should see this graph so you can see
21:03 - that even in percentage amount China's
21:06 - population grew much faster than that of
21:08 - the United States the u.s. population
21:10 - grew by 90 percent from 1952 to 2007 but
21:15 - during the same time China's population
21:17 - grew by more than 120 percent okay this
21:21 - was a pretty simple example and it
21:24 - actually came from my course called
21:25 - introduction to data visualization if
21:28 - you liked this video I'd actually highly
21:30 - recommend it it's a course with more
21:32 - videos just like this one and I cover
21:34 - more realistic and complex examples and
21:37 - more different types of data
21:38 - visualization techniques not just line
21:40 - charts so if you want to check out the
21:42 - course you can just go to CS dojo da io
21:45 - / more data you can actually take this
21:48 - course for free by signing up to plural
21:50 - sites 10 day free trial that's the site
21:53 - the course is hosted on anyway as always
21:56 - thanks for watching this video and I'll
21:59 - see you in the next one

Cleaned transcript:

hey everyone this is my introduction to their analysis slash data visualization with Python in this video I'm gonna cover why you might want to use data visualization and why you might want to use Python and map lot live for it and then we're gonna go over some simple examples of how to actually use these tools and then using these tools we're gonna do sort of a real analysis with a real data set at the end and in this video I'm only gonna cover line charts just to keep everything simple I'm also gonna put a more detailed version of this outline in the comment section below so you don't have to watch the whole thing if you don't want to okay so why should you use data visualization in the first place well error visualization is actually often the first step of any type of data analysis work whether it's simple there analysis or statistical analysis or machine learning analysis and the reason for that is because visualizing data often gives you an intuitive understanding of the data and it often helps you see patterns that are otherwise hard to see and we're gonna see an example of that later okay and why should you use Python for this well python is not the only good choice but I would say it's one of the best and the reason is first of all it's a generalpurpose language that's pretty easy to use and learn and it also has many libraries for scientific computing and data science including Mapple lib and if you work at a company your company might already use Python for something else and if that's the case that's really nice because then you and your team are not gonna have to learn a totally new language to do some data analysis and why are we using Mapple live for this well Mapple live is not the only good visualization library for python but it's still one of the most popular choices and there are actually other libraries that are based on MATLAB so if you learn MATLAB it's gonna help you learn these you know other libraries for example this one called C born later on if you want to and Mapple lib is also pretty easy to get started with anyway let's dive into a demo for this demo we're gonna use something called Jupiter notebook and a few other Python libraries and we're gonna use anaconda to install them if you're not familiar with JIRA notebook and anaconda I have an explanation about them in my Python tutorial video so I'm gonna leave a link to that in the description anyway to install anaconda just search for anaconda Python or directly go to anaconda org and there find the button that says download anaconda and select whatever OS you are using I'm using Mac here and click download under Python threepointsomething version instead of python 2 point something because we're gonna use python 3 here and select where you want to download this package save it and once it's downloaded open up the package that you just download it and then just click continue continue continue continue agree install for me only you or install on the specific disk it doesn't matter which one and continue and click install and this process is gonna take a while after some waiting you might see this prompt to install microsoft vs code we don't need that so let's just continue here and then close and then to launch jupiter notebook you can do it through this thing called anaconda navigator so just launch it like you launch any other application just dismiss whatever comes up and then click launch in that jibra notebook section and then you should see a browser window show up with the jupiter notebook interface now if you want to follow this tutorial the first thing you should do is you should create a new folder let's say on desktop and let's call this one data visualization and we're gonna put all our data and to put a notebook file here so let's first download our data to do that just go to CS dojo dot io slash data and download these two files sample data CSV and country's that CSV and then put these CSV files in the folder that you just created data visualization after that go back to the Jupiter notebook interface and you can just navigate to desktop and then the folder that we just created data visualization and to create a new jabber notebook file here just find the new button on the right and click Python 3 right now this notebook file has untitled as the title so let's change it to data visualization with Python click rename and you have a notebook called data visualization with Python you can check it just by going to desktop and then to the folder that you just created and you should see that there's a file called data visualization with python dot I PI and B and it's really important that this notebook file is in the same folder as the data that you just downloaded countries that CSV and the other one and once everything is set up just right in the first cell import pandas as PD this means we want to import a module called panels as P D or we want to give it sort of a nickname and that's going to be P D you can run the cell by clicking this button and now pandas is imported as P D and here we're gonna use pandas for importing and using some data from our CSV files and we need to import another module here so for that just right from my plot lib import PI plot as PRT so this says from the matplotlib package import PI pop module and then call it PLT let's run this cell and now PI plot is imported we're gonna use PI plot from Apple lib for making our charts so here let's first take a look at a really simple example of how to use PI plot so here I'm going to write x equals 1 2 3 it's a list of 3 elements and y equals 1 4 & 9 and to plot this set of data you can just write PLT the plot X comma Y and this plots X on the x axis and y on the y axis and then you can show this graph by writing PLT OH when you run the cell you should see a graph like this you see that the values of X our one two and three as expected and the values of y are 1 4 & 9 if you want to add a title to this graph you can do so by writing PLT dot title tests plots right after the plot statement before the show statement and then you can add an X label and the y they bow as well by writing PLT dot X label let's call the X label X and Quixote dot y label let's call it y label Y here and when you run this cell you see that there's a title called test plot and the X label called X and why they both called Y okay what if you wanted to plot multiple lines here well to do that let's create another list let's call it D and this one is gonna have ten five and there inside and to plot X and D on top of x and y you can just right PLT the plots X comma Z right after PR T dot X comma Y and then let's fix the Y level here to Y & Z and when you run this cell you should see these two lines so the blue line represents x and y and the orange line represents x and z so PR t dot plot x and z plot x on the x axis and z on the y axis but right now it's kind of hard to tell which line represents which data so we can fix it by adding a legend statement let's add that after the y level statement by writing quixote dot legend parentheses square brackets double quotes this is y comma double quotes this is Z so note here that this legend function takes a list as an argument and when you run this so you should see this legend that says the blue line is this is y and the orange line is this is d okay that's the basics of body now let's see how to load data from a CSV file for that you can just write sample and the score data equals d or pandas that read CSV by the way I just press tab here to do autocomplete and then parentheses sample underscore data dot CSV now before you run this cell make sure that the notebook file data visualization with Python that I PI and B is in the same folder as sample data dot CSV when you run this cell this data sample data dot CSV is loaded by the pandas module which we call PD and then it's assigned to this variable called sample data you can check what's inside this variable sample underscore data just by writing sample underscore data in this new cell and then when you run this cell you should see something like this so as you can see this data has three columns column a column B and column C and five rows and you see a bunch of values inside this table if you want to check if this set of data is exactly the same as the original data you can do so by opening up the original data file sample data dot CSV with Excel or any other spreadsheet application and when you open it you should see exactly the same data column a column B column C with five rows with a bunch of values okay the only difference that you might see is that in Jupiter notebook you might see these numbers zero one two three and four and these are just indices for the rows and you can check what type this variable is by writing type parentheses sample underscore data and when you run this cell it says that this is pandals d'accord a friend data frame so this is a data frame type that's defined by the pandas module and the data frame type is used to contain a table like piece of information just like this one okay now what if you wanted to plot data in this data frame for example the values of column a on the xaxis and column C on the yaxis what to do that you need to be able to retrieve a specific column and you can do that by writing sample underscore data dot column dot C column underscore C when you run this cell you see that a column see its retrieved it has the values 10 8 6 4 and 2 and the numbers you see on the left are just indices 0 1 2 3 & 4 just like before you can check what type this is by writing type parentheses sample data column C and when you run the cell you see that this is Parnell's duck or that series that series so this is basically a series type that's defined by the pandas module and it's a type that's used to store a series of values for example these values 10 8 6 4 & 2 now what if we wanted to retrieve a specific value out of this series well if you want to retrieve for example the second value here 8 you can do so by writing sample data column C dot I'd lock I LOC square brackets 1 and this retrieves the second value of the series 8 and if you want to retrieve the third value 6 you can write I lock 2 and that gets the third value and if you want to retrieve the first value you can write I lock 0 and this should give us 10 and it does ok and using what we've just learned here we'll be able to plot the data in this data frame so let's say we want to plot column a on the xaxis and column B on the yaxis we can do that by writing PRT dot plots sample data dot column a comma sample data dot column B and we can show it by writing PLT that show let's see how it looks we have 1 2 3 4 and 5 on the xaxis and on the yaxis we have 1 4 9 16 and 25 as expected if you want to add a column C to this data you can write PRT dot plots sample data dot column a so let's use column a as the xaxis again and the sample data dot column C when you run the cell you see that there are two lines here just like before if you want to make this graph a little bit easier to read you can add a titles and a legend and by the way in this plot function you can use the third argument to change how the plot looks so for example if you give it o in a string as the argument in the first line for column B and when you run the cell the plot becomes dots instead of just a line and there's a lot more you can do you can find more about it in the official documentation anyway let's move on and do sort of a real analysis with a real data set now for this analysis we're gonna use this data country's dot CSV it should be in the same folder as well and when you open it you should see this data so we have a bunch of countries and a bunch of ears ranging from 1952 to 2007 for every five years and population for each year for that country and you can see that there are a lot of rows in this data so let's now import that data just like before by writing PD or pandas that read CSV parentheses single quotes or double quotes countries dot CSV and by the way this is a string single quotes country's dot CSV and in Python you can use either double quotes or single quotes to express a string let's assign that to a new variable called data by writing data equals and when you run the cell this data is loaded onto data so once you write data in this new cell and run it you should be able to see this data in a data frame now let's say that the analysis we want to do here is we want to compare the population girls in the US and China now to do this analysis the first thing we want to do is we want to isolate the data for the US and China we can do that for the US by writing us equals data square brackets there that country EKOS United States in single quotes and when you run this cell us now only contains the data for the United States so let's break down this statement a little bit more let's click insert here and insert cell bill when you write the other country equals United States this actually gives a series of a bunch of choose and forces so when the roll is not us this gives us false and when it is us it gives us true we don't see any cheese here but there are a bunch of cheese here where the rows are for the US and then when you right there a scrub buckets this a series of bunch of trues and falses this gives us a portion of the data where the value of the series is true and that's the data for that us as you can see here and then we just assign it to this variable called us okay let's now do the same thing for China by writing China EKOS theta square brackets that are the country equals China and when you run this so and when you write China here and run this cell you should only see the data for China and using these two variables US and China will be able to compare their population growth so let's first plot u.s. population here by writing PLT dot plot us dear comma u.s. top population you can show this plot with TLT does show and when you run this cell used to see this graph you see that US dollar is party on the xaxis and US the population is plotted on the yaxis but you see this scientific notation thing 1e8 because the numbers are so big so let's divide the whole population each number in the series with 1 million or 10 to the power of 6 that's 10 star star 6 in python and when you run the cell again you now see the population in millions so this is 160 million and it goes up to I think more than 300 million in 2007 and let's plot China's data on top of the spot by writing PLT dot china that year actually you could use us that year or China that year because we have exactly the set of ears but for now let's just use China deer for the xaxis and China dot population for the yaxis and we're gonna divide this by 1 million as well to make the population show in millions when you run the cell you should see these two lines let's add a and titles here to make this graph easier to read so PLT legend parentheses square brackets United States and China and the X label PRT da hex label should be just here and PRT da Y label should be population run this cell again and this graph is much easier to read so you can see that China's population started out much larger than the US in 1952 and it seems like it's going faster as well now what if you wanted to compare instead of the absolute amount that you see here the percentage girls from the first year that we have in our data 1952 well there are several different ways of doing this but I'm gonna show you just one way so to do that let's first copy this whole block of code over here now let's say that for each country we want to find the percentage girls from the first year so we want to set the first years amount to 100 as a 100% and show the rest of the data in percentage relative to the first year and we can do that by dividing this whole series for example us stop population with the first years population and then multiplying everything by 100 so to show you what I mean let's just create a new cell here above by clicking insert cell above here and here first I'm gonna write us that population and you see a series of population here for each year and the first row you see here is the first year's population or the population in 1952 I think let's insert a new cell below here now to retrieve the first years population you can just write us top population the Eyelock square brackets 0 and this gives us the first years population which is this amount then we can divide the whole population this whole series by the first years population just by writing us the population divided by us the publishing dialogue square brackets there and this gives us this series so as you can see the first year is set to 1 and the rest of the years are shown in relative amounts and if you multiply everything by 100 just by writing start 100 here you'll be able to show everything in percentage amounts so you can see that the first year is shown as 100% and from 1952 to 2007 which is the last year we have the population grew by 90 percent now like I said earlier this is not the only method to show the relative girls in population but I chose this method here because it's pretty simple to implement anyway let's copy this whole thing and paste it over here to replace the yaxis let's do the same thing for China as well so copy the whole thing for China here and then replace us with China once you do that let's change the population my label to population girls and let's just write first year equals 100 just for clarity here when you run this cell you should see this graph so you can see that even in percentage amount China's population grew much faster than that of the United States the u.s. population grew by 90 percent from 1952 to 2007 but during the same time China's population grew by more than 120 percent okay this was a pretty simple example and it actually came from my course called introduction to data visualization if you liked this video I'd actually highly recommend it it's a course with more videos just like this one and I cover more realistic and complex examples and more different types of data visualization techniques not just line charts so if you want to check out the course you can just go to CS dojo da io / more data you can actually take this course for free by signing up to plural sites 10 day free trial that's the site the course is hosted on anyway as always thanks for watching this video and I'll see you in the next one
