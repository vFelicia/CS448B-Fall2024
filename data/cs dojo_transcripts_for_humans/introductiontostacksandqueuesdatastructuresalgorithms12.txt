With timestamps:

00:00 - hey everyone sorry about the delay but
00:02 - in this video
00:03 - i'm gonna give you a quick ish
00:05 - introduction to stacks
00:06 - queues and decks or double ended queues
00:10 - so let's get started first of all what's
00:13 - a stack
00:14 - well personally i like to think of a
00:16 - stack like a bunch of
00:18 - pancakes so just imagine for a second
00:21 - that these circles represent pancakes
00:23 - with different numbers written on them
00:26 - we could have any type of data here but
00:28 - we're using
00:29 - numbers or integers as an example here
00:32 - and one feature
00:33 - of pancakes the real world pancakes is
00:36 - that you can stack them on top of one
00:38 - another
00:40 - so just imagine that this line here
00:43 - represents
00:44 - a plate and once you have a plate you
00:46 - can have
00:48 - pancakes stacked on top of one another
00:51 - so you could have
00:52 - minus one at the bottom and then you can
00:54 - put three on top of it
00:56 - and then let's say this one nine this
00:59 - pancake right here
01:01 - and then at the top you can put this one
01:04 - and then you might say okay what if i
01:06 - wanna
01:08 - retrieve this pancake right here with
01:10 - the number three written on it
01:12 - then what you would need to do is you
01:14 - would need to
01:16 - take out this one first at the top and
01:19 - then
01:20 - this next one the nine pancake
01:24 - and then finally you can take out this
01:26 - one
01:27 - uh so that's how you know pancakes in a
01:30 - real world work
01:32 - and it's the same thing with the stack
01:34 - data structure
01:36 - so a stack is a collection of data
01:39 - in which you can only add a piece of
01:41 - data at the top
01:43 - of the structure or retrieve a piece of
01:47 - data
01:47 - from the top of the structure so
01:50 - you aren't really able to retrieve data
01:54 - from any position just like you could
01:56 - for example in array
01:58 - so another way to describe the same
02:00 - thing is that
02:02 - whatever piece of data you put in last
02:06 - will need to come out first
02:09 - so in the current structure of these
02:12 - three pieces of data
02:14 - the last piece of data that we put in is
02:17 - nine
02:18 - so that needs to come out first
02:21 - and that's sometimes referred to as last
02:24 - in first out
02:26 - okay so that's how a stack works but how
02:28 - can we
02:29 - implement it well one way to implement
02:31 - it is
02:32 - uh by using an array so
02:36 - we have an array of eight elements here
02:39 - and we're going to try to represent this
02:42 - stack right here
02:43 - to do that the first thing we'll need to
02:45 - do is we'll need to have
02:47 - a pointer or just an integer
02:50 - variable that's going to point to the
02:53 - last
02:53 - element that we put in in this data
02:56 - structure
02:58 - and let's say for now that the stack
03:01 - is empty then
03:04 - there is no last element 2.2 so we can
03:07 - initialize this variable
03:09 - to -1 or the index
03:14 - that would be here but that doesn't
03:16 - exist
03:17 - and this shows that this stack is empty
03:20 - and now
03:21 - what if we want to start putting in some
03:23 - pieces of data here
03:25 - for example -1 here then what we can do
03:28 - is move the pointer here
03:32 - again this is going to always point to
03:34 - the last element that we put in
03:36 - in this data structure and then
03:39 - put -1 here and what if we want to put
03:43 - in
03:44 - a 3 on top of -1 then we can move the
03:47 - pointer again
03:48 - again pointing to the last element that
03:50 - we put in
03:51 - and then put 3 here and then we can keep
03:54 - doing that
03:55 - if we want to put 9 here oh you can
03:58 - move uh the pointer here or increment
04:01 - pointer
04:02 - by one and then put nine
04:05 - here and what if you want to remove uh
04:08 - this number right here nine
04:10 - and to do that all you need to do is
04:13 - you need to move the pointer back by one
04:16 - or decrement this variable
04:18 - by one now you could do something
04:21 - with this number right here you know
04:23 - either erase it or change it to
04:25 - something else
04:26 - but it doesn't really matter because in
04:29 - this data structure
04:30 - we always know that the pointer always
04:32 - points to
04:33 - the number that's at the top of this
04:36 - structure
04:38 - so the numbers following this
04:41 - pointer are not relevant
04:44 - so we can keep going like this if you
04:46 - want to put in
04:48 - 2 here you can move the pointer back
04:50 - here
04:51 - and then update this number right here
04:55 - with
04:55 - two and then if you want to put nine
04:58 - again here you can move the pointer by
05:02 - one
05:02 - and then put nine here
05:05 - and throughout this explanation we saw a
05:08 - few key operations here
05:10 - one is delete sometimes it's called pop
05:15 - that's deleting or removing a number
05:18 - from this data structure
05:21 - and another one is add and that's adding
05:23 - a number on top of
05:25 - this data structure and with this
05:27 - particular implementation
05:29 - you can implement both of them in one or
05:32 - in
05:32 - a constant amount of time and that's
05:35 - assuming
05:36 - that the number of elements that we put
05:38 - in in this
05:39 - data structure doesn't exceed the length
05:42 - of the array and if it does you will
05:45 - need to either
05:46 - zero an error or make a new array
05:50 - that's longer than the original array
05:52 - and transfer all the elements from the
05:54 - first array
05:55 - to the second array and that would take
05:57 - some extra time
05:59 - anyway that's it for a stack let's now
06:01 - take a look at a queue
06:03 - the analogy i use to understand a queue
06:06 - is a bunch of people lining up
06:09 - in a line or in a queue so
06:12 - let's say we have these people with some
06:15 - numbers assigned
06:16 - to them just for convenience and they
06:19 - want
06:20 - to line up to do something for example
06:23 - to see this octopus
06:24 - for whatever reason and this octopus is
06:27 - busy so they need to line up
06:30 - and with a cube
06:33 - i think you already know how it works
06:35 - but you can
06:36 - put people in the queue or in this line
06:40 - and when the octopus is free
06:44 - uh the person that's at the front of the
06:47 - queue you can see the octopus
06:49 - and then go away and then you can add
06:51 - more people in the queue
06:54 - or more numbers in the queue and then
06:56 - the person or the number
06:58 - that's in front of the queue you can see
07:01 - the octopus
07:02 - and then go away so that's the idea of
07:05 - the queue data structure and i think you
07:08 - can see that
07:08 - uh whatever number or whatever person
07:11 - that came in first
07:13 - will go out first too
07:16 - out of this data structure and that's
07:19 - sometimes referred
07:20 - as uh first in first out okay and how
07:23 - can we
07:24 - implement this data structure one way to
07:26 - implement it
07:28 - is with an array again and this time
07:31 - we're going to have
07:33 - two pointers the first one is going to
07:36 - point
07:37 - to whatever is at the front of the queue
07:41 - or in this particular example this
07:43 - number or this person right here
07:45 - and we're going to put this one right
07:48 - here
07:48 - at zero for now and the second pointer
07:52 - is going to point to the space
07:55 - that's right after the last person or
07:58 - the last number
07:59 - in the queue and for now i'm going to
08:02 - put this
08:03 - at the same position as the first
08:05 - pointer at zero
08:07 - and let's say that the queue is
08:10 - empty right now then we're gonna make
08:14 - these pointers uh be initialized
08:17 - to both zero right here and we're gonna
08:22 - implement this data structure so that
08:24 - whenever these two pointers
08:25 - point at the same thing this q
08:29 - is empty okay now let's think about how
08:32 - we can represent
08:33 - a line of people with this particular
08:36 - implementation
08:37 - so let's say that this person comes uh
08:41 - in the line first then we can put
08:44 - number one here and then move the second
08:48 - pointer
08:49 - right here and if there's another person
08:52 - uh
08:52 - right after that let's say 42 then we
08:55 - can put
08:56 - 42 here and then move the pointer here
09:00 - again the first pointer will always be
09:02 - pointing
09:04 - at the first person in the queue or the
09:07 - front of the queue
09:09 - and the second pointer will always be
09:11 - pointing
09:12 - at the space right after the last person
09:15 - or the last number
09:16 - in the queue so let's keep going with
09:18 - this
09:19 - if 13 comes in a line
09:23 - we can put 13 here and then move the
09:26 - pointer
09:27 - move the second pointer right here and
09:29 - what if
09:30 - the octopus is free now and this person
09:33 - one
09:34 - sees the octopus and goes away
09:37 - then uh we can just move the first
09:40 - pointer
09:42 - over here and we don't really have to do
09:44 - anything
09:45 - with this number right here one because
09:48 - in this
09:49 - implementation we'll know that the q is
09:51 - only between
09:53 - these two pointers so we can just
09:56 - keep going like that and just to show
09:58 - you more examples
09:59 - if -4 comes after that we can put -4
10:04 - here
10:05 - and then move the second pointer over
10:07 - here if zero
10:09 - comes after that we can put zero here
10:12 - and
10:12 - move the second pointer over here or
10:15 - increment the second pointer by one
10:17 - and if 42 goes away we can move the
10:20 - first pointer
10:21 - over here let me just keep going like
10:24 - this
10:31 - and what if you have a situation like
10:34 - this now
10:35 - where you have three people in the queue
10:37 - 0 1 and 42
10:39 - and you want to add another person minus
10:41 - 4 here
10:42 - to do that we can put minus 4 here
10:46 - and then you would try to move the
10:47 - second pointer over here
10:50 - but that's out of bound to fix that
10:53 - you can just move this pointer back here
10:56 - at zero instead
10:58 - so you can actually visualize uh this
11:00 - array like a circular array
11:03 - where if you try to go out of bound you
11:05 - just go back to
11:07 - zero so let's just keep going like that
11:09 - uh
11:10 - if we want to put 13 after that you can
11:13 - put 13 here
11:15 - and then move the second pointer by one
11:17 - over here
11:19 - and it would work the same way for the
11:20 - first pointer too
11:22 - i've if the first pointer keeps going to
11:25 - the right
11:26 - and if it's about to go out of bound
11:30 - instead of having it go out of bound we
11:33 - can just bring it back to
11:35 - zero right here and another thing to
11:37 - note about this particular
11:39 - implementation
11:40 - is that you're only able to store almost
11:44 - n minus one elements in this data
11:47 - structure
11:47 - assuming that the length of the array is
11:50 - n
11:50 - to explain that let's consider this
11:52 - situation
11:54 - where we have the second pointer right
11:56 - here and we have
11:57 - some elements here here and
12:01 - here if you try to add one more element
12:05 - right here you would need to move the
12:08 - second pointer right here to the same
12:09 - position
12:10 - as the first pointer but we've already
12:13 - said that in this particular
12:14 - implementation
12:15 - uh if these two pointers point to the
12:18 - same thing
12:20 - this q is empty but clearly it's not
12:22 - empty
12:23 - and that's why we would need to stop
12:26 - here
12:26 - and that's why we're only able to store
12:28 - n minus 1 elements
12:30 - where the length of the array is n if
12:33 - you want to store
12:34 - more elements you will need to either
12:36 - throw an error
12:38 - or create a new array that's longer than
12:40 - the original array
12:41 - and then transfer all the elements to
12:43 - the new array
12:44 - anyway in this implementation we saw
12:48 - two key operations one is
12:52 - removing an element or a person or a
12:55 - piece of data
12:56 - from the cube and another one is adding
12:59 - a piece of data to the queue sometimes
13:01 - it's called
13:02 - dq and q
13:06 - and with this particular implementation
13:08 - assuming that
13:09 - the number of elements doesn't exceed n
13:12 - minus 1
13:13 - we can implement both of those things in
13:16 - o 1 or in constant time and that's it
13:20 - for
13:20 - a queue but let's quickly discuss
13:23 - another data structure and that's a
13:27 - deck or double ndq it's a more
13:30 - generalized
13:32 - version of the queue data structure that
13:34 - we saw
13:35 - and in this data structure deck you're
13:38 - able to
13:39 - put data and remove data from either end
13:43 - of this queue so you can remove this
13:46 - person right here
13:47 - or you can remove this person right here
13:49 - and you can add a person
13:51 - at the front of the queue or at the left
13:54 - side of the queue
13:55 - or add this piece of data at the right
13:58 - side of the queue
13:59 - and one way to implement this is similar
14:01 - to
14:02 - the implementation of the queue that we
14:04 - saw so you can use
14:06 - a circular array still and have the same
14:09 - kind of structure
14:10 - but in this new structure we're able to
14:13 - remove data
14:14 - from either end and add data
14:18 - to either n2 so you would basically have
14:22 - functions that are called something like
14:25 - add lift
14:26 - remove left add right and remove
14:29 - right sometimes they're called top left
14:32 - pop right or other names
14:34 - but you get the idea you should be able
14:36 - to
14:37 - implement all of those operations in one
14:40 - as well
14:41 - okay so that's my introduction to these
14:44 - three data structures
14:46 - but if you want to practice using these
14:48 - concepts
14:49 - one of the resources i recommend is one
14:52 - of my business affiliates algoexpert.io
14:55 - this is my referral link and this is my
14:58 - discount code cs dojo
15:00 - and there's actually an interesting
15:02 - problem that i found on this website
15:04 - for which you can use one of these
15:05 - concepts so i want to give you a quick
15:07 - introduction to that problem
15:10 - in this problem you're given a string
15:13 - of different types of brackets regular
15:16 - brackets square brackets and curly
15:18 - brackets
15:19 - and you want to write a function that
15:20 - takes a string like this
15:22 - and returns true if the brackets are
15:25 - balanced
15:26 - and false if they're not so what does it
15:29 - mean for
15:30 - these brackets to be balanced to explain
15:33 - that i think the best way to do that
15:34 - would be to give you a bunch of
15:36 - examples this one is
15:39 - balanced because there are square
15:41 - brackets inside and regular brackets
15:43 - outside this is not balanced
15:46 - obviously this is not balanced either
15:49 - because you're trying to close before
15:51 - you open
15:53 - this one's not balanced and this one
15:57 - is not balanced either because these two
16:00 - types of brackets are
16:01 - overlapping anyway you should be able to
16:03 - solve this problem
16:04 - in of and in time where n is the length
16:07 - of the string
16:08 - and of n in space as well anyway uh
16:12 - sorry about the delay again uh i'll try
16:14 - to be
16:15 - you know a little bit faster in my video
16:17 - production in the future
16:19 - but thank you so much for sticking with
16:21 - my video and
16:22 - you know my channel okay thank you as
16:25 - always for watching my videos
16:27 - and i'll see you guys in the next one

Cleaned transcript:

hey everyone sorry about the delay but in this video i'm gonna give you a quick ish introduction to stacks queues and decks or double ended queues so let's get started first of all what's a stack well personally i like to think of a stack like a bunch of pancakes so just imagine for a second that these circles represent pancakes with different numbers written on them we could have any type of data here but we're using numbers or integers as an example here and one feature of pancakes the real world pancakes is that you can stack them on top of one another so just imagine that this line here represents a plate and once you have a plate you can have pancakes stacked on top of one another so you could have minus one at the bottom and then you can put three on top of it and then let's say this one nine this pancake right here and then at the top you can put this one and then you might say okay what if i wanna retrieve this pancake right here with the number three written on it then what you would need to do is you would need to take out this one first at the top and then this next one the nine pancake and then finally you can take out this one uh so that's how you know pancakes in a real world work and it's the same thing with the stack data structure so a stack is a collection of data in which you can only add a piece of data at the top of the structure or retrieve a piece of data from the top of the structure so you aren't really able to retrieve data from any position just like you could for example in array so another way to describe the same thing is that whatever piece of data you put in last will need to come out first so in the current structure of these three pieces of data the last piece of data that we put in is nine so that needs to come out first and that's sometimes referred to as last in first out okay so that's how a stack works but how can we implement it well one way to implement it is uh by using an array so we have an array of eight elements here and we're going to try to represent this stack right here to do that the first thing we'll need to do is we'll need to have a pointer or just an integer variable that's going to point to the last element that we put in in this data structure and let's say for now that the stack is empty then there is no last element 2.2 so we can initialize this variable to 1 or the index that would be here but that doesn't exist and this shows that this stack is empty and now what if we want to start putting in some pieces of data here for example 1 here then what we can do is move the pointer here again this is going to always point to the last element that we put in in this data structure and then put 1 here and what if we want to put in a 3 on top of 1 then we can move the pointer again again pointing to the last element that we put in and then put 3 here and then we can keep doing that if we want to put 9 here oh you can move uh the pointer here or increment pointer by one and then put nine here and what if you want to remove uh this number right here nine and to do that all you need to do is you need to move the pointer back by one or decrement this variable by one now you could do something with this number right here you know either erase it or change it to something else but it doesn't really matter because in this data structure we always know that the pointer always points to the number that's at the top of this structure so the numbers following this pointer are not relevant so we can keep going like this if you want to put in 2 here you can move the pointer back here and then update this number right here with two and then if you want to put nine again here you can move the pointer by one and then put nine here and throughout this explanation we saw a few key operations here one is delete sometimes it's called pop that's deleting or removing a number from this data structure and another one is add and that's adding a number on top of this data structure and with this particular implementation you can implement both of them in one or in a constant amount of time and that's assuming that the number of elements that we put in in this data structure doesn't exceed the length of the array and if it does you will need to either zero an error or make a new array that's longer than the original array and transfer all the elements from the first array to the second array and that would take some extra time anyway that's it for a stack let's now take a look at a queue the analogy i use to understand a queue is a bunch of people lining up in a line or in a queue so let's say we have these people with some numbers assigned to them just for convenience and they want to line up to do something for example to see this octopus for whatever reason and this octopus is busy so they need to line up and with a cube i think you already know how it works but you can put people in the queue or in this line and when the octopus is free uh the person that's at the front of the queue you can see the octopus and then go away and then you can add more people in the queue or more numbers in the queue and then the person or the number that's in front of the queue you can see the octopus and then go away so that's the idea of the queue data structure and i think you can see that uh whatever number or whatever person that came in first will go out first too out of this data structure and that's sometimes referred as uh first in first out okay and how can we implement this data structure one way to implement it is with an array again and this time we're going to have two pointers the first one is going to point to whatever is at the front of the queue or in this particular example this number or this person right here and we're going to put this one right here at zero for now and the second pointer is going to point to the space that's right after the last person or the last number in the queue and for now i'm going to put this at the same position as the first pointer at zero and let's say that the queue is empty right now then we're gonna make these pointers uh be initialized to both zero right here and we're gonna implement this data structure so that whenever these two pointers point at the same thing this q is empty okay now let's think about how we can represent a line of people with this particular implementation so let's say that this person comes uh in the line first then we can put number one here and then move the second pointer right here and if there's another person uh right after that let's say 42 then we can put 42 here and then move the pointer here again the first pointer will always be pointing at the first person in the queue or the front of the queue and the second pointer will always be pointing at the space right after the last person or the last number in the queue so let's keep going with this if 13 comes in a line we can put 13 here and then move the pointer move the second pointer right here and what if the octopus is free now and this person one sees the octopus and goes away then uh we can just move the first pointer over here and we don't really have to do anything with this number right here one because in this implementation we'll know that the q is only between these two pointers so we can just keep going like that and just to show you more examples if 4 comes after that we can put 4 here and then move the second pointer over here if zero comes after that we can put zero here and move the second pointer over here or increment the second pointer by one and if 42 goes away we can move the first pointer over here let me just keep going like this and what if you have a situation like this now where you have three people in the queue 0 1 and 42 and you want to add another person minus 4 here to do that we can put minus 4 here and then you would try to move the second pointer over here but that's out of bound to fix that you can just move this pointer back here at zero instead so you can actually visualize uh this array like a circular array where if you try to go out of bound you just go back to zero so let's just keep going like that uh if we want to put 13 after that you can put 13 here and then move the second pointer by one over here and it would work the same way for the first pointer too i've if the first pointer keeps going to the right and if it's about to go out of bound instead of having it go out of bound we can just bring it back to zero right here and another thing to note about this particular implementation is that you're only able to store almost n minus one elements in this data structure assuming that the length of the array is n to explain that let's consider this situation where we have the second pointer right here and we have some elements here here and here if you try to add one more element right here you would need to move the second pointer right here to the same position as the first pointer but we've already said that in this particular implementation uh if these two pointers point to the same thing this q is empty but clearly it's not empty and that's why we would need to stop here and that's why we're only able to store n minus 1 elements where the length of the array is n if you want to store more elements you will need to either throw an error or create a new array that's longer than the original array and then transfer all the elements to the new array anyway in this implementation we saw two key operations one is removing an element or a person or a piece of data from the cube and another one is adding a piece of data to the queue sometimes it's called dq and q and with this particular implementation assuming that the number of elements doesn't exceed n minus 1 we can implement both of those things in o 1 or in constant time and that's it for a queue but let's quickly discuss another data structure and that's a deck or double ndq it's a more generalized version of the queue data structure that we saw and in this data structure deck you're able to put data and remove data from either end of this queue so you can remove this person right here or you can remove this person right here and you can add a person at the front of the queue or at the left side of the queue or add this piece of data at the right side of the queue and one way to implement this is similar to the implementation of the queue that we saw so you can use a circular array still and have the same kind of structure but in this new structure we're able to remove data from either end and add data to either n2 so you would basically have functions that are called something like add lift remove left add right and remove right sometimes they're called top left pop right or other names but you get the idea you should be able to implement all of those operations in one as well okay so that's my introduction to these three data structures but if you want to practice using these concepts one of the resources i recommend is one of my business affiliates algoexpert.io this is my referral link and this is my discount code cs dojo and there's actually an interesting problem that i found on this website for which you can use one of these concepts so i want to give you a quick introduction to that problem in this problem you're given a string of different types of brackets regular brackets square brackets and curly brackets and you want to write a function that takes a string like this and returns true if the brackets are balanced and false if they're not so what does it mean for these brackets to be balanced to explain that i think the best way to do that would be to give you a bunch of examples this one is balanced because there are square brackets inside and regular brackets outside this is not balanced obviously this is not balanced either because you're trying to close before you open this one's not balanced and this one is not balanced either because these two types of brackets are overlapping anyway you should be able to solve this problem in of and in time where n is the length of the string and of n in space as well anyway uh sorry about the delay again uh i'll try to be you know a little bit faster in my video production in the future but thank you so much for sticking with my video and you know my channel okay thank you as always for watching my videos and i'll see you guys in the next one
