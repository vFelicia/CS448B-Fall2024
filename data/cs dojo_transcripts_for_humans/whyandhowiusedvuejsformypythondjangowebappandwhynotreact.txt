With timestamps:

00:00 - in my last video I developed a Q&A
00:02 - website for coders using Django and as I
00:06 - mentioned in that video I didn't use
00:08 - view or react or anything like that just
00:10 - to keep it simple later though I decided
00:12 - to add view j/s on top of it instead of
00:16 - react so in this video I'm gonna show
00:18 - you why I decided to make that
00:20 - particular choice how I did it and what
00:23 - I was able to accomplish using it first
00:26 - of all let me show you what my use case
00:27 - was basically it's for the question page
00:32 - that shows the details of a question and
00:35 - the answers to that question and I
00:39 - wanted to use view to add this output
00:42 - and download buttons for the question as
00:46 - well as each answer what I used to have
00:49 - before is I used to have these upward
00:51 - and downward buttons for the question
00:53 - but then every time someone would click
00:55 - it it will refresh the whole page and I
00:58 - think that was ok for the question
00:59 - because there's only one question per
01:01 - page but I think it'll be pretty
01:04 - annoying for the answers because if I
01:06 - wanted to say you know upload all of
01:08 - these answers it would refresh you know
01:11 - the whole page every time for each
01:13 - answer it's not a very smooth experience
01:17 - right and the way I solve this
01:19 - particular problem
01:20 - using view is I first replaced this
01:24 - upload and download buttons for that
01:26 - question so it doesn't refresh the whole
01:28 - page and then I replicated the same
01:31 - functionality to each answer and that's
01:36 - when I needed to decide whether I wanted
01:38 - to use react view or something else and
01:41 - so let me explain why I decided to go
01:44 - with view right here actually for my
01:46 - previous project I used react and Django
01:49 - together and that kind of worked but it
01:52 - was a huge pain to set everything up so
01:55 - the approach I was using with react and
01:57 - Django is called page as a component the
02:01 - idea of this approach is to replace only
02:05 - a portion of the website for example one
02:08 - page one particular kind of page of your
02:11 - website with a react component
02:13 - so in this case I would replace just the
02:16 - question page with a reactor component
02:19 - but nothing else a different approach
02:22 - would be to replace this whole website
02:25 - with a single reactor component and that
02:27 - approach is called a single page app but
02:32 - I didn't go with that because pages of
02:34 - components
02:35 - you know replacing only one page with a
02:38 - reactor component is slightly simpler so
02:41 - that was the approach I was using but
02:43 - even with that approach it was way too
02:45 - complicated definitely a lot more
02:47 - complex than using view and the reason
02:50 - why react is more complicated is because
02:53 - with react you will need to use a lot of
02:56 - other things for example you would need
02:58 - to set up a node.js server that's
03:00 - separate from your Django server and
03:02 - then you will need to use libraries like
03:04 - babel and webpack so there are a lot of
03:06 - other things that you would need to
03:08 - learn to use other than react but with
03:12 - view it's much simpler to set it up as
03:14 - you see in a second so let me show you
03:16 - how to go about setting it up with
03:19 - Django here just for a demo I created a
03:24 - new page called tests it's at the local
03:29 - servers URL slash tests this is my local
03:33 - Dremel server and it just says hello
03:37 - it's a simple page and it's actually
03:40 - already running a view app on top of
03:42 - Django so let me show you how I set it
03:44 - up the first thing I did is I created
03:48 - this new view called test view in Django
03:51 - and this is invoked when that URL is
03:54 - called by a user and this test view is
03:58 - going to retrieve the current user and
04:00 - then it's going to render my new
04:03 - template called testa HTML using this
04:07 - context this context contains the
04:09 - username of the current user as well as
04:12 - the current user object itself so that
04:16 - this template testa HTML has access to
04:19 - those two variables so now let's take a
04:21 - look at the template that I just
04:23 - mentioned
04:24 - testa HTML it has two simple components
04:28 - three if you want to kind of counter
04:30 - everything so let me explain those the
04:32 - first one is we need to import the view
04:36 - library which is done in the simple
04:38 - statements but it's actually done in the
04:41 - head part of the HTML so we can just
04:44 - comment this out because we don't have
04:47 - to import it twice and the second part
04:49 - is the main div that we're gonna use
04:53 - that's associated with our view instance
04:56 - and the third part is the script where
04:59 - the view instance is defined so let me
05:03 - explain the script part first
05:06 - in this script section and as I said a
05:11 - new view instance is defined and it's
05:15 - assigned to a variable called app and in
05:19 - this part of the code there are a couple
05:22 - things that are defined now the first
05:24 - one is the limiters so usually we don't
05:28 - need to define the limiters explicitly
05:31 - but here we need to because the default
05:35 - delimiters of you are the same as the
05:39 - default delimiter is Django which are
05:42 - double square brackets I would double
05:44 - curly brackets so we need to use
05:46 - something else for view and that's why
05:48 - we're using double square brackets here
05:50 - instead of double curly brackets and
05:53 - this is what tells view which things our
05:59 - view variables so for example here I my
06:03 - HTML we're saying this thing message is
06:06 - a view variable it's not a regular HTML
06:09 - thing when view sees this it looks for
06:14 - this variable in the data attribute of
06:19 - this view instance so here I'm saying
06:23 - the data of this view instance is just
06:27 - one called message
06:30 - it's its value is hello another thing
06:34 - that we need to define here is this L
06:38 - which I think stands for element this is
06:41 - the element that corresponds to this
06:44 - view instance and this is the ID app and
06:50 - that refers to this div element right
06:54 - here
06:55 - so just to recap we have a new div
07:00 - element here with the ID app and that's
07:04 - associated with this new view instance
07:08 - that we just defined with the delimiters
07:10 - double square brackets and when view
07:14 - sees this thing or when your browser
07:17 - sees this part with view it says okay
07:22 - you know what should this variable be
07:24 - and it looks for it in this data section
07:27 - here and it says okay that's hello so
07:30 - this part message it's gonna be replaced
07:34 - with hello and that's why when we go to
07:38 - slash tests that's exactly what we see
07:41 - hello now I explain a lot of things here
07:46 - but I think the key point here is that
07:47 - it's much simpler to setup a view waste
07:51 - jungle than to set up reactivates jungle
07:54 - you know here all I needed
07:56 - all I needed to do is I needed to import
07:59 - view with a single line and then set up
08:03 - a new view instance and set up a single
08:05 - div element with a particular ID now
08:08 - that's it and I have a view up here you
08:11 - know I don't need to use any other
08:13 - libraries like a node.js server or Babel
08:16 - web pack so it's definitely simpler than
08:19 - react I would say anyway
08:21 - if you want to use a jungle variable
08:23 - within this view app that's pretty
08:26 - simple - the simplest way to do it it
08:29 - might not be the correct way to do it
08:31 - would be to
08:33 - in this message for example I can just
08:36 - write double curly brackets username so
08:44 - what happens with this script is when
08:47 - Django see this when Django sees the
08:49 - same plate it's gonna replace this part
08:53 - username with the actual current
08:55 - username and then when this is sent to
09:00 - the browser
09:01 - this is gonna be hello
09:05 - username whatever the user name is and
09:07 - then this part message is gonna be
09:11 - replaced with that particular string so
09:15 - if my username is let's say YK dojo I
09:18 - should see hello YK dojo here
09:23 - so again jungle replace jungle will
09:26 - replace this username with YK dojo and
09:29 - then this string becomes how I work it
09:32 - dojo and that is gonna be right here
09:37 - hello YK dojo and if I save this file
09:42 - and go to that URL that's what I should
09:45 - see right here and that's exactly what I
09:48 - see right now I'm logged in as YK dojo -
09:50 - as you can see right here so I see hello
09:54 - YK dojo - now this approach technically
09:58 - works but I would say it's a little bit
10:00 - hacky because I'm mixing jungles
10:04 - template language with JavaScript so a
10:09 - more you know clean way of doing it
10:11 - would be something like this I'm gonna
10:15 - use this jungle statements this says
10:21 - take the jungle variable username and
10:24 - then make it available to the HTML and
10:27 - to JavaScript by putting it in an
10:30 - element called username so this way we
10:35 - can make this jungle variable available
10:38 - to JavaScript and we can retrieve it in
10:41 - JavaScript with
10:44 - this little thing right here let me
10:48 - paste it here and let me explain here so
10:51 - this JavaScript statement says get this
10:56 - element that's that contains this
10:59 - variable username with document dot get
11:03 - element by ID and then get what's inside
11:05 - it and parse it so that it's available
11:08 - in this new JavaScript variable username
11:12 - so this way you know it's a little bit
11:14 - cleaner because we're separating jungle
11:17 - templating with JavaScript and now
11:21 - instead of using a jungle variable here
11:25 - directly we can use the JavaScript
11:28 - variable instead which I think it's
11:31 - cleaner like that hello plus user name
11:35 - plus let's say an exclamation mark so
11:40 - this way we should see the same thing
11:42 - because we're supplying the jungle
11:46 - username variable to JavaScript and
11:49 - we're retrieving it into a JavaScript
11:51 - variable and then we're putting it here
11:54 - into the message which is part of the
11:58 - view app here and so when this gets
12:04 - loaded that's what we should see hello
12:07 - user name exclamation mark so let's make
12:10 - sure that works by going to the same URL
12:13 - and refreshing it yeah that's what we
12:16 - see hello user name now this is the
12:20 - first basic step for setting up a Django
12:23 - and view together but if you want to
12:25 - create your own full stack app using
12:29 - this text stack this is not quite enough
12:31 - so let me try to explain those quickly
12:33 - the first thing is this statement that
12:37 - we saw earlier doesn't always
12:39 - automatically work so it worked
12:42 - he works for simple variables like this
12:45 - username which is a string but if we had
12:47 - a more complex object for example the
12:50 - current user that we were passing from
12:55 - our Django view
12:57 - it doesn't always work so I got this
13:01 - error object of type user is not JSON is
13:04 - serializable what that means is that
13:07 - jungle provides us with with a default
13:11 - serializer the serializes this object
13:15 - this given object into a JSON object
13:19 - that can be used within JavaScript but
13:23 - this default serializer doesn't always
13:25 - work so what you'll need to do instead
13:28 - is you need to set up your own custom
13:31 - serializer using jungle rest frameworks
13:35 - serializer a library and I don't have
13:39 - time to explain that right now so I'm
13:41 - gonna put you know all the relevant
13:42 - links in the description so that you
13:44 - know you'll be able to look into how to
13:47 - do that and you can look at my code as
13:51 - an example about how to do that too and
13:54 - that's what I used to serialize you know
13:57 - each answer object that's sent to my
14:01 - view app too so that my view app will be
14:04 - able to you know eat use each answer
14:07 - object as if that's an JavaScript object
14:10 - now the second thing is what if you
14:13 - wanted to send some data from view to
14:17 - jungle not just from the from Django to
14:20 - view well the first thing you want to do
14:24 - is you want to define a method in your
14:27 - view instance kind of like this methods
14:30 - and then you can define the name and the
14:33 - function so let's call it votes so let's
14:37 - let's just say this is gonna be a
14:38 - function that's gonna be called when you
14:41 - know one of the vote buttons is clicked
14:44 - for now I'm just gonna create a simple
14:48 - function that's gonna say alert the
14:54 - votes function is invoked
15:00 - and then what you want to do is you want
15:06 - to use this special attributes v on
15:10 - quick I think this is the right syntax
15:14 - and then just say booked
15:18 - so this says when this element is
15:21 - clicked this method should be invoked
15:25 - let's make sure it works so far by
15:30 - clicking it and it works when whenever
15:33 - this element is clicked that function is
15:37 - invoked and to send data or to send a
15:42 - request from view to jungle what you
15:46 - want to do is you want to use this
15:48 - library called Axios which is
15:51 - recommended by view itself and this
15:55 - library you can use it to send an AJAX
15:57 - request to the jungle server with some
16:01 - data from the view app so for example in
16:05 - this function you can just say you know
16:09 - use the Axios library to send a post
16:15 - request using an AJAX request to django
16:19 - server to either upload or download or
16:23 - cancel that boat and when when the
16:29 - jungle server handles that request and
16:31 - says okay you know that vote was
16:34 - accepted some kind of response is
16:38 - returned to the view app and within the
16:41 - view app within this function you can
16:43 - handle that request so with my
16:47 - particular app let me show you how that
16:50 - works quickly when I upload let's say
16:55 - this answer right here that request is
16:59 - sent to other jungle server when that is
17:02 - successful I can you know change the
17:05 - color of this upload button within view
17:09 - okay so all of this is pretty technical
17:13 - you might say is it really worth the
17:15 - effort and I would say in this
17:18 - particular case it definitely was so let
17:21 - me explain why there is one more sort of
17:25 - feature that I implement it you know
17:26 - related to these voting function and
17:29 - that is the point system so how that
17:33 - works is whenever you answer someone's
17:35 - question and someone else uploads your
17:38 - answer you get one point you know every
17:40 - time someone uploads your answer and
17:41 - that point is shown right here with your
17:45 - user name and your this is my point and
17:48 - this is shown in the leaderboard - so
17:52 - whoever you know answers most about most
17:57 - amount of questions and gets most amount
17:59 - of points is shown here and I found that
18:04 - it's actually pretty motivating I say
18:07 - this because as soon as I implemented
18:09 - this leaderboard and point functions I
18:12 - noticed that people started answering
18:14 - questions more so for example right now
18:17 - you know most of these questions at the
18:19 - top page have already been answered at
18:22 - least once and it seems like you know
18:24 - this leaderboard and the point system is
18:26 - a big part of it it might you know seem
18:28 - a little bit silly but it's pretty
18:30 - motivating I find for other users and
18:33 - for myself too and people sometimes even
18:35 - you know talk about it and say stuff
18:37 - like you know how can I get a point and
18:40 - by the way the answer to that question
18:42 - is you just need to answer somebody
18:44 - else's question and then somebody else
18:46 - will need to put your question I mean
18:49 - your answer so those are the main
18:52 - features that I worked on these past few
18:54 - weeks
18:55 - but there are a few other things that I
18:57 - added the one big one is the search
19:00 - function you know to search for
19:03 - questions I thought about different
19:05 - alternatives for implementing this one
19:08 - you know should I use a jungle search
19:10 - function or maybe a third third party
19:12 - such library but I decided to go with
19:16 - Google's custom search function I guess
19:20 - because it's the simplest way to
19:22 - implement it and it's free for me it's
19:25 - not perfect
19:26 - I think it's good enough for now so if
19:29 - you search for for example Django
19:31 - it's gonna show all the questions that
19:34 - are related to jungle again it's not
19:36 - perfect you know it shows like an ad
19:38 - from Google and that's not ideal but I
19:41 - think it's good enough for now and I
19:43 - wanted to have a search function as soon
19:46 - as possible and that's why I decided to
19:48 - go with this approach and you know if
19:52 - you try using this website and if you
19:55 - have bug reports or feature requests or
19:59 - anything like that you can just go to
20:01 - the source code of this page and you can
20:03 - submit a new issue right here on github
20:06 - and I'll see what I can do about that
20:09 - okay that's pretty much all I wanted to
20:11 - talk about today you know sorry for the
20:15 - delay from the last video but I'm hoping
20:17 - to you know make more progress either on
20:21 - this project or maybe start a new
20:24 - project entirely and you know talk about
20:26 - it on this channel anyway thank you as
20:29 - always for watching my videos and I'll
20:31 - see you guys in the next one

Cleaned transcript:

in my last video I developed a Q&A website for coders using Django and as I mentioned in that video I didn't use view or react or anything like that just to keep it simple later though I decided to add view j/s on top of it instead of react so in this video I'm gonna show you why I decided to make that particular choice how I did it and what I was able to accomplish using it first of all let me show you what my use case was basically it's for the question page that shows the details of a question and the answers to that question and I wanted to use view to add this output and download buttons for the question as well as each answer what I used to have before is I used to have these upward and downward buttons for the question but then every time someone would click it it will refresh the whole page and I think that was ok for the question because there's only one question per page but I think it'll be pretty annoying for the answers because if I wanted to say you know upload all of these answers it would refresh you know the whole page every time for each answer it's not a very smooth experience right and the way I solve this particular problem using view is I first replaced this upload and download buttons for that question so it doesn't refresh the whole page and then I replicated the same functionality to each answer and that's when I needed to decide whether I wanted to use react view or something else and so let me explain why I decided to go with view right here actually for my previous project I used react and Django together and that kind of worked but it was a huge pain to set everything up so the approach I was using with react and Django is called page as a component the idea of this approach is to replace only a portion of the website for example one page one particular kind of page of your website with a react component so in this case I would replace just the question page with a reactor component but nothing else a different approach would be to replace this whole website with a single reactor component and that approach is called a single page app but I didn't go with that because pages of components you know replacing only one page with a reactor component is slightly simpler so that was the approach I was using but even with that approach it was way too complicated definitely a lot more complex than using view and the reason why react is more complicated is because with react you will need to use a lot of other things for example you would need to set up a node.js server that's separate from your Django server and then you will need to use libraries like babel and webpack so there are a lot of other things that you would need to learn to use other than react but with view it's much simpler to set it up as you see in a second so let me show you how to go about setting it up with Django here just for a demo I created a new page called tests it's at the local servers URL slash tests this is my local Dremel server and it just says hello it's a simple page and it's actually already running a view app on top of Django so let me show you how I set it up the first thing I did is I created this new view called test view in Django and this is invoked when that URL is called by a user and this test view is going to retrieve the current user and then it's going to render my new template called testa HTML using this context this context contains the username of the current user as well as the current user object itself so that this template testa HTML has access to those two variables so now let's take a look at the template that I just mentioned testa HTML it has two simple components three if you want to kind of counter everything so let me explain those the first one is we need to import the view library which is done in the simple statements but it's actually done in the head part of the HTML so we can just comment this out because we don't have to import it twice and the second part is the main div that we're gonna use that's associated with our view instance and the third part is the script where the view instance is defined so let me explain the script part first in this script section and as I said a new view instance is defined and it's assigned to a variable called app and in this part of the code there are a couple things that are defined now the first one is the limiters so usually we don't need to define the limiters explicitly but here we need to because the default delimiters of you are the same as the default delimiter is Django which are double square brackets I would double curly brackets so we need to use something else for view and that's why we're using double square brackets here instead of double curly brackets and this is what tells view which things our view variables so for example here I my HTML we're saying this thing message is a view variable it's not a regular HTML thing when view sees this it looks for this variable in the data attribute of this view instance so here I'm saying the data of this view instance is just one called message it's its value is hello another thing that we need to define here is this L which I think stands for element this is the element that corresponds to this view instance and this is the ID app and that refers to this div element right here so just to recap we have a new div element here with the ID app and that's associated with this new view instance that we just defined with the delimiters double square brackets and when view sees this thing or when your browser sees this part with view it says okay you know what should this variable be and it looks for it in this data section here and it says okay that's hello so this part message it's gonna be replaced with hello and that's why when we go to slash tests that's exactly what we see hello now I explain a lot of things here but I think the key point here is that it's much simpler to setup a view waste jungle than to set up reactivates jungle you know here all I needed all I needed to do is I needed to import view with a single line and then set up a new view instance and set up a single div element with a particular ID now that's it and I have a view up here you know I don't need to use any other libraries like a node.js server or Babel web pack so it's definitely simpler than react I would say anyway if you want to use a jungle variable within this view app that's pretty simple the simplest way to do it it might not be the correct way to do it would be to in this message for example I can just write double curly brackets username so what happens with this script is when Django see this when Django sees the same plate it's gonna replace this part username with the actual current username and then when this is sent to the browser this is gonna be hello username whatever the user name is and then this part message is gonna be replaced with that particular string so if my username is let's say YK dojo I should see hello YK dojo here so again jungle replace jungle will replace this username with YK dojo and then this string becomes how I work it dojo and that is gonna be right here hello YK dojo and if I save this file and go to that URL that's what I should see right here and that's exactly what I see right now I'm logged in as YK dojo as you can see right here so I see hello YK dojo now this approach technically works but I would say it's a little bit hacky because I'm mixing jungles template language with JavaScript so a more you know clean way of doing it would be something like this I'm gonna use this jungle statements this says take the jungle variable username and then make it available to the HTML and to JavaScript by putting it in an element called username so this way we can make this jungle variable available to JavaScript and we can retrieve it in JavaScript with this little thing right here let me paste it here and let me explain here so this JavaScript statement says get this element that's that contains this variable username with document dot get element by ID and then get what's inside it and parse it so that it's available in this new JavaScript variable username so this way you know it's a little bit cleaner because we're separating jungle templating with JavaScript and now instead of using a jungle variable here directly we can use the JavaScript variable instead which I think it's cleaner like that hello plus user name plus let's say an exclamation mark so this way we should see the same thing because we're supplying the jungle username variable to JavaScript and we're retrieving it into a JavaScript variable and then we're putting it here into the message which is part of the view app here and so when this gets loaded that's what we should see hello user name exclamation mark so let's make sure that works by going to the same URL and refreshing it yeah that's what we see hello user name now this is the first basic step for setting up a Django and view together but if you want to create your own full stack app using this text stack this is not quite enough so let me try to explain those quickly the first thing is this statement that we saw earlier doesn't always automatically work so it worked he works for simple variables like this username which is a string but if we had a more complex object for example the current user that we were passing from our Django view it doesn't always work so I got this error object of type user is not JSON is serializable what that means is that jungle provides us with with a default serializer the serializes this object this given object into a JSON object that can be used within JavaScript but this default serializer doesn't always work so what you'll need to do instead is you need to set up your own custom serializer using jungle rest frameworks serializer a library and I don't have time to explain that right now so I'm gonna put you know all the relevant links in the description so that you know you'll be able to look into how to do that and you can look at my code as an example about how to do that too and that's what I used to serialize you know each answer object that's sent to my view app too so that my view app will be able to you know eat use each answer object as if that's an JavaScript object now the second thing is what if you wanted to send some data from view to jungle not just from the from Django to view well the first thing you want to do is you want to define a method in your view instance kind of like this methods and then you can define the name and the function so let's call it votes so let's let's just say this is gonna be a function that's gonna be called when you know one of the vote buttons is clicked for now I'm just gonna create a simple function that's gonna say alert the votes function is invoked and then what you want to do is you want to use this special attributes v on quick I think this is the right syntax and then just say booked so this says when this element is clicked this method should be invoked let's make sure it works so far by clicking it and it works when whenever this element is clicked that function is invoked and to send data or to send a request from view to jungle what you want to do is you want to use this library called Axios which is recommended by view itself and this library you can use it to send an AJAX request to the jungle server with some data from the view app so for example in this function you can just say you know use the Axios library to send a post request using an AJAX request to django server to either upload or download or cancel that boat and when when the jungle server handles that request and says okay you know that vote was accepted some kind of response is returned to the view app and within the view app within this function you can handle that request so with my particular app let me show you how that works quickly when I upload let's say this answer right here that request is sent to other jungle server when that is successful I can you know change the color of this upload button within view okay so all of this is pretty technical you might say is it really worth the effort and I would say in this particular case it definitely was so let me explain why there is one more sort of feature that I implement it you know related to these voting function and that is the point system so how that works is whenever you answer someone's question and someone else uploads your answer you get one point you know every time someone uploads your answer and that point is shown right here with your user name and your this is my point and this is shown in the leaderboard so whoever you know answers most about most amount of questions and gets most amount of points is shown here and I found that it's actually pretty motivating I say this because as soon as I implemented this leaderboard and point functions I noticed that people started answering questions more so for example right now you know most of these questions at the top page have already been answered at least once and it seems like you know this leaderboard and the point system is a big part of it it might you know seem a little bit silly but it's pretty motivating I find for other users and for myself too and people sometimes even you know talk about it and say stuff like you know how can I get a point and by the way the answer to that question is you just need to answer somebody else's question and then somebody else will need to put your question I mean your answer so those are the main features that I worked on these past few weeks but there are a few other things that I added the one big one is the search function you know to search for questions I thought about different alternatives for implementing this one you know should I use a jungle search function or maybe a third third party such library but I decided to go with Google's custom search function I guess because it's the simplest way to implement it and it's free for me it's not perfect I think it's good enough for now so if you search for for example Django it's gonna show all the questions that are related to jungle again it's not perfect you know it shows like an ad from Google and that's not ideal but I think it's good enough for now and I wanted to have a search function as soon as possible and that's why I decided to go with this approach and you know if you try using this website and if you have bug reports or feature requests or anything like that you can just go to the source code of this page and you can submit a new issue right here on github and I'll see what I can do about that okay that's pretty much all I wanted to talk about today you know sorry for the delay from the last video but I'm hoping to you know make more progress either on this project or maybe start a new project entirely and you know talk about it on this channel anyway thank you as always for watching my videos and I'll see you guys in the next one
