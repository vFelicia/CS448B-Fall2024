With timestamps:

00:00 - have you ever been flustered in a coding
00:02 - interview maybe was because you weren't
00:05 - able to find the right data structures
00:07 - or algorithms to use in a problem
00:08 - quickly in this video I'm going to show
00:11 - you how to find the optimal answer in a
00:13 - coding interview quickly just as an
00:17 - example let's consider this maximum sub
00:20 - array problem now what's a sub array a
00:22 - sub array is basically an array within
00:25 - an array so an example of a sub array
00:27 - would be 2 1 or it could be just one
00:30 - element negative 3 or it could be the
00:32 - whole array that's also sub array but if
00:36 - we had instead negative 3 and let's say
00:40 - 1 that's not a sub array because these
00:43 - are not contiguous elements so a sub
00:45 - array is a set of contiguous elements
00:47 - within the given array now the problem
00:50 - here is finding the sub array with the
00:52 - maximum sum here's what I mean if we
00:54 - look at this sub array 2 1 the sum is 2
00:58 - plus 1 equals 3 and if we look at this
01:02 - sub array with just negative 3 the sum
01:04 - is negative 3 and we are trying to find
01:07 - the one with the maximum sum and in this
01:10 - example it's actually 2 1 with the sum 3
01:14 - and you can check it yourself too and
01:16 - let's say you're given this problem in
01:18 - your interview and you don't know how to
01:20 - solve it and you can't figure out the
01:22 - solution right away what should you do
01:24 - about it
01:24 - there are 4 tips I want to give you here
01:27 - for finding the right solution very
01:29 - quickly
01:30 - tip number 4 is just say can I think for
01:33 - a second whenever you start thinking you
01:36 - know most candidates become completely
01:38 - silent when they start thinking and it
01:40 - could be really awkward for the
01:41 - interviewer because they don't know what
01:43 - you're doing so you should really
01:44 - clarify whenever you start thinking tip
01:49 - number three's think out loud once you
01:52 - say that phrase can I think for a second
01:54 - you should start thinking out loud
01:56 - instead of silently I know for some
01:59 - people it's easier to think silently but
02:01 - you don't have to overdo this you just
02:03 - need to let the interviewer know where
02:05 - you are in your thought process and the
02:07 - way I would do it might be something
02:09 - like this I would say okay I noticed
02:12 - that there are positive numbers
02:13 - here in this example and also negative
02:17 - numbers and if we only had positive
02:22 - numbers let's say one to one then the
02:25 - problem would be much easier because
02:27 - then the maximum sub-array would just be
02:30 - the whole array so what makes it hard is
02:34 - the fact that we have negative numbers
02:37 - so maybe we can do something separate to
02:40 - the negative numbers and the positive
02:43 - numbers in the array and when you say
02:47 - something like that the interviewer is
02:49 - going to say either okay you're going in
02:51 - the right direction or in the wrong
02:52 - direction and that's going to be really
02:55 - helpful for figuring out what the right
02:57 - solution is so you shouldn't think of
02:59 - the interview as a monologue or a solo
03:02 - problem-solving session you should think
03:04 - of it as more of a collaborative thing
03:06 - as a conversation so you shouldn't have
03:09 - to solve everything by yourself when the
03:12 - average candidate is given a problem
03:14 - they just start writing code but you
03:17 - shouldn't do that you should first think
03:18 - through examples and think of a few more
03:21 - examples then add that just given one so
03:25 - in this problem I might say okay this is
03:28 - a of course a given example but I can
03:31 - think of a few more examples what about
03:34 - all positive numbers and what about
03:37 - maybe all negative numbers and when you
03:42 - start thinking through examples you'll
03:44 - be able to think in a much more concrete
03:46 - way than trying to think of everything
03:48 - in an abstract way let's say you start
03:52 - thinking through examples and you come
03:54 - up with a solution then you should ask
03:57 - does this seem like a good strategy
03:59 - unless you're 100% sure that your
04:02 - solution is optimal and the way I would
04:05 - do it in this example might be something
04:07 - like this I would say okay my solution
04:09 - would be compare all the sub all the
04:13 - possible sub arrays so the ones starting
04:15 - at the first index and then the ones
04:18 - starting at the second index and I will
04:22 - compute the sum for each sub array and I
04:25 - will just pick the one with the maximum
04:27 - sum
04:27 - so it's a brute-force strategy and then
04:30 - I would ask to the interviewer does this
04:32 - seem like a good strategy when you say
04:34 - that you're essentially giving some
04:36 - space to the interviewer so they can
04:39 - give you feedback as to if you're going
04:41 - in the wrong direction or if your
04:43 - solution is really optimal and this way
04:45 - you don't have to waste time writing
04:47 - code because you didn't write code in
04:49 - the first place you don't have to waste
04:50 - time writing code for solution that
04:52 - doesn't work oh that's not optimal so
04:56 - just to recap say can I think for a
04:59 - second when you start thinking think out
05:03 - loud instead of silently you don't have
05:05 - to overdo this you just need to let the
05:07 - interviewer know where you are thinking
05:08 - from time to time and don't start
05:12 - writing code right away use examples
05:14 - first and finally when you come up with
05:18 - a solution
05:19 - just ask does it seem like a good
05:21 - strategy and these are more for tips for
05:24 - finding the optimal solution in a coding
05:26 - interview quickly I hope you liked the
05:30 - video if you want to watch more videos
05:31 - like this you can click right here to
05:34 - subscribe to my channel and see you soon

Cleaned transcript:

have you ever been flustered in a coding interview maybe was because you weren't able to find the right data structures or algorithms to use in a problem quickly in this video I'm going to show you how to find the optimal answer in a coding interview quickly just as an example let's consider this maximum sub array problem now what's a sub array a sub array is basically an array within an array so an example of a sub array would be 2 1 or it could be just one element negative 3 or it could be the whole array that's also sub array but if we had instead negative 3 and let's say 1 that's not a sub array because these are not contiguous elements so a sub array is a set of contiguous elements within the given array now the problem here is finding the sub array with the maximum sum here's what I mean if we look at this sub array 2 1 the sum is 2 plus 1 equals 3 and if we look at this sub array with just negative 3 the sum is negative 3 and we are trying to find the one with the maximum sum and in this example it's actually 2 1 with the sum 3 and you can check it yourself too and let's say you're given this problem in your interview and you don't know how to solve it and you can't figure out the solution right away what should you do about it there are 4 tips I want to give you here for finding the right solution very quickly tip number 4 is just say can I think for a second whenever you start thinking you know most candidates become completely silent when they start thinking and it could be really awkward for the interviewer because they don't know what you're doing so you should really clarify whenever you start thinking tip number three's think out loud once you say that phrase can I think for a second you should start thinking out loud instead of silently I know for some people it's easier to think silently but you don't have to overdo this you just need to let the interviewer know where you are in your thought process and the way I would do it might be something like this I would say okay I noticed that there are positive numbers here in this example and also negative numbers and if we only had positive numbers let's say one to one then the problem would be much easier because then the maximum subarray would just be the whole array so what makes it hard is the fact that we have negative numbers so maybe we can do something separate to the negative numbers and the positive numbers in the array and when you say something like that the interviewer is going to say either okay you're going in the right direction or in the wrong direction and that's going to be really helpful for figuring out what the right solution is so you shouldn't think of the interview as a monologue or a solo problemsolving session you should think of it as more of a collaborative thing as a conversation so you shouldn't have to solve everything by yourself when the average candidate is given a problem they just start writing code but you shouldn't do that you should first think through examples and think of a few more examples then add that just given one so in this problem I might say okay this is a of course a given example but I can think of a few more examples what about all positive numbers and what about maybe all negative numbers and when you start thinking through examples you'll be able to think in a much more concrete way than trying to think of everything in an abstract way let's say you start thinking through examples and you come up with a solution then you should ask does this seem like a good strategy unless you're 100% sure that your solution is optimal and the way I would do it in this example might be something like this I would say okay my solution would be compare all the sub all the possible sub arrays so the ones starting at the first index and then the ones starting at the second index and I will compute the sum for each sub array and I will just pick the one with the maximum sum so it's a bruteforce strategy and then I would ask to the interviewer does this seem like a good strategy when you say that you're essentially giving some space to the interviewer so they can give you feedback as to if you're going in the wrong direction or if your solution is really optimal and this way you don't have to waste time writing code because you didn't write code in the first place you don't have to waste time writing code for solution that doesn't work oh that's not optimal so just to recap say can I think for a second when you start thinking think out loud instead of silently you don't have to overdo this you just need to let the interviewer know where you are thinking from time to time and don't start writing code right away use examples first and finally when you come up with a solution just ask does it seem like a good strategy and these are more for tips for finding the optimal solution in a coding interview quickly I hope you liked the video if you want to watch more videos like this you can click right here to subscribe to my channel and see you soon
