With timestamps:

00:00 - hey everyone in my last few videos i
00:02 - made a q a website for
00:04 - quarters and i still work on it from
00:06 - time to time
00:07 - but in this video i decided to switch
00:09 - topics and
00:10 - restart my data structures and
00:12 - algorithms series
00:14 - now in a previous video which i
00:15 - published a long time ago
00:17 - we learned the linked list data
00:18 - structure it looked
00:20 - like this one where we had a bunch of
00:23 - nodes that are connected to each other
00:24 - in a single direction and each node
00:28 - in the structure had a class like this
00:30 - it's called node and it has two
00:32 - attributes
00:33 - uh integer data and next which is also a
00:36 - node
00:37 - now a tree is a similar data structure
00:40 - to a linked list and the only difference
00:43 - is that in a linked list
00:45 - each node can only link to one other
00:47 - node but in a tree each node can link to
00:49 - multiple other nodes
00:51 - so here's one example of a tree as you
00:54 - can see
00:55 - each node here is linking to multiple
00:58 - nodes
00:58 - here each node is linking to at least
01:01 - three other nodes
01:03 - and so for this particular structure
01:06 - the class of each node might look like
01:09 - this one
01:10 - as you can see this one is called node
01:12 - again and it has four attributes
01:14 - uh integer data just like before
01:16 - sometimes this one is called value
01:19 - but we're calling data here and we have
01:21 - three children
01:23 - uh all of them are nose and so for
01:26 - example
01:27 - if you look at this particular node here
01:31 - the three children are set to these
01:34 - three
01:35 - other nodes and if you look at
01:39 - this node right here this one has only
01:42 - two children
01:42 - this one and this one so if you want to
01:45 - express that in code
01:47 - you can just set the two of the children
01:50 - to those nodes and the last child
01:54 - to null or none to show that
01:57 - it doesn't exist and if you look at
02:00 - this node it doesn't have any
02:03 - children so you can set all of these
02:07 - children knows to null or none depending
02:09 - on the language
02:11 - that you're using now let's take a look
02:13 - at another example of a tree
02:16 - so this one is drawn from top to bottom
02:19 - instead of
02:20 - left to right but it has the same kind
02:22 - of structure the more important
02:24 - difference
02:24 - is that each node has almost two
02:27 - children
02:28 - here so the class of each node might
02:31 - look like
02:32 - this one instead as you can see we have
02:34 - integer data just like before
02:36 - but now we have only two children which
02:39 - we're calling left
02:40 - and right and just like this when a tree
02:43 - has
02:44 - at most true truth it's called
02:47 - a binary tree now to help you understand
02:50 - what a tree is exactly
02:52 - we're going to call this little game
02:54 - called is this a tree
02:56 - basically i'm going to show you a
02:57 - structure and you just need to answer if
03:00 - it's a tree or not
03:02 - so let me start with this one this one
03:05 - uh doesn't have integers inside them
03:07 - instead it has
03:08 - strings but of course it's still a tree
03:13 - and what about this one well it's a
03:16 - linked list
03:17 - but it's also a tree
03:20 - and the way i think about it is that
03:22 - each node
03:23 - could have multiple children
03:27 - just like that but it just
03:30 - doesn't so it's kind of a boring example
03:33 - but technically
03:34 - speaking it's also a tree and what about
03:38 - this one well it might look like a tree
03:42 - but it's not because one constraint
03:45 - of something being a tree is that there
03:47 - are no two references
03:50 - that link to the same node and these two
03:53 - references
03:54 - violate that condition and what about
03:58 - this last one well again
04:03 - it violates the definition of being
04:06 - something being a tree
04:07 - for the same reason these two references
04:10 - point to the same node so it's not a
04:14 - tree
04:15 - and another way to see that this is not
04:17 - a tree is
04:18 - that it has a cycle here and whenever
04:22 - there's a cycle
04:24 - that's not a tree so you might say well
04:27 - what is a tree exactly then well a tree
04:30 - is a structure in which there are nodes
04:33 - that are connected to each other
04:35 - and there's a way to go from the
04:38 - root node to every other node in the
04:41 - structure
04:42 - so the root node in this particular tree
04:45 - is this one
04:46 - and there's a way for us to get to every
04:49 - other node
04:50 - from the root node in this structure and
04:52 - it's the same thing
04:53 - with this tree or this linked list
04:56 - there's this root node
04:58 - and there's a way to get to every other
05:00 - node
05:01 - from the root node but as soon as there
05:03 - are two references
05:04 - in this structure that refer to the same
05:06 - node
05:07 - for example this one then it's not a
05:10 - tree anymore
05:10 - so that's basically what a tree is and
05:13 - by the way
05:14 - the root node of a tree is
05:17 - a node without any parents so what that
05:20 - means
05:20 - is that whatever the root node is no
05:24 - other node refers to that one okay
05:27 - now that you hopefully have a clear idea
05:29 - of what a tree is
05:30 - let's practice using a tree with this
05:33 - problem
05:34 - you're given a tree for example this one
05:39 - with the root being here and this is a
05:42 - binary tree
05:43 - so the class of each node will look like
05:46 - this
05:47 - it has an integer data and it has two
05:50 - children left and right and the problem
05:52 - is
05:53 - writing a function which we're going to
05:56 - call
05:56 - find sum which takes the root of this
05:59 - tree
06:00 - as the input and returns the sum of
06:03 - all the values within the street so if
06:06 - you're given this particular root
06:08 - you want to be able to return 20 from
06:10 - this function because we have
06:12 - 2 plus 3 plus 5 plus 6 plus 4 which is
06:15 - 20. and try solving this problem
06:19 - in of and in time where n is the number
06:22 - of nodes
06:22 - in this tree okay and here's my solution
06:26 - and by the way if you want to try
06:27 - running my solution
06:29 - in either python or java you can find
06:32 - that
06:32 - at this url csojo.io
06:35 - tree like i said before we're calling
06:39 - this function
06:39 - find sum and it's taking the root of
06:43 - whatever
06:44 - tree that you're given and we're going
06:46 - to implement
06:47 - this function recursively here and the
06:49 - first thing we're going to do is we're
06:51 - going to define
06:52 - the base case and that's going to be
06:55 - when the given root is null or none
07:00 - which is that the given root is just
07:03 - an empty tree for example this
07:07 - empty tree right here then the sum of
07:11 - all the values
07:12 - in this empty tree is of course zero
07:16 - so we want to return zero in that case
07:19 - and otherwise uh for example if we're
07:22 - given
07:23 - this blue height right here in this
07:25 - recursive function
07:27 - then the sum of all the nodes
07:31 - in this tree is the sum
07:34 - of this current value
07:37 - plus the sum of all the nodes in the
07:40 - right subtree
07:42 - and the sum of all the nodes in the left
07:45 - subtree we can express that
07:49 - with this one line here we're returning
07:52 - the current value or root.data
07:56 - plus the sum of uh all the nodes in the
08:00 - left subtree so let's find sum of red
08:02 - dot left
08:03 - and the sum of all the nodes in the
08:06 - right subtree
08:07 - so let's find some of that right
08:12 - this function would only take of n
08:15 - in time to execute where n is the number
08:18 - of
08:18 - nodes in the given tree and let's think
08:21 - about why
08:22 - well first we need to count the number
08:24 - of times this function is going to be
08:26 - called
08:26 - and that's going to be the number of
08:28 - nodes in the given tree
08:31 - because for each node this function
08:34 - is going to be called once plus all the
08:38 - empty nodes or these empty
08:41 - trees that i didn't draw earlier
08:44 - in this representation of the tree
08:47 - and so this function is going to be
08:49 - called at most
08:50 - about 2n times or of 2n
08:54 - times which is the same thing as
08:57 - of n times and so this function is going
09:00 - to be called
09:01 - of n times and each time this function
09:05 - is called let's think about how
09:08 - how much time it takes to execute well
09:11 - if you look at each line uh if you look
09:14 - at this line
09:15 - it only takes a constant amount of time
09:17 - or of one
09:18 - because we're simply checking uh this
09:22 - simple if condition and it's the same
09:24 - thing as
09:26 - this line it only takes off one in time
09:28 - returning zero
09:30 - and this line as well we're simply
09:33 - adding up
09:34 - these three numbers so once we have the
09:36 - results
09:37 - for these two recursive calls adding up
09:40 - these three numbers
09:42 - would only take off one in time or
09:45 - a constant amount of time and so each
09:48 - time this function is called
09:50 - it only takes one and it's called
09:54 - o of n times so multiplying them
09:56 - together
09:58 - we get the total amount of time this
10:00 - function takes to execute
10:02 - or the time complexity of this function
10:04 - and that's going to be
10:05 - of n now that's it for this problem
10:08 - and my introduction to trees but if you
10:10 - need more practice using trees
10:12 - and there's another interesting problem
10:14 - that i think is much harder
10:16 - and it's a problem i talked about a
10:18 - while ago as a coding interview question
10:21 - so i'm gonna put a link to that video in
10:23 - the description below
10:24 - anyway thank you as always for watching
10:26 - my videos and i'll see you guys in the
10:28 - next one

Cleaned transcript:

hey everyone in my last few videos i made a q a website for quarters and i still work on it from time to time but in this video i decided to switch topics and restart my data structures and algorithms series now in a previous video which i published a long time ago we learned the linked list data structure it looked like this one where we had a bunch of nodes that are connected to each other in a single direction and each node in the structure had a class like this it's called node and it has two attributes uh integer data and next which is also a node now a tree is a similar data structure to a linked list and the only difference is that in a linked list each node can only link to one other node but in a tree each node can link to multiple other nodes so here's one example of a tree as you can see each node here is linking to multiple nodes here each node is linking to at least three other nodes and so for this particular structure the class of each node might look like this one as you can see this one is called node again and it has four attributes uh integer data just like before sometimes this one is called value but we're calling data here and we have three children uh all of them are nose and so for example if you look at this particular node here the three children are set to these three other nodes and if you look at this node right here this one has only two children this one and this one so if you want to express that in code you can just set the two of the children to those nodes and the last child to null or none to show that it doesn't exist and if you look at this node it doesn't have any children so you can set all of these children knows to null or none depending on the language that you're using now let's take a look at another example of a tree so this one is drawn from top to bottom instead of left to right but it has the same kind of structure the more important difference is that each node has almost two children here so the class of each node might look like this one instead as you can see we have integer data just like before but now we have only two children which we're calling left and right and just like this when a tree has at most true truth it's called a binary tree now to help you understand what a tree is exactly we're going to call this little game called is this a tree basically i'm going to show you a structure and you just need to answer if it's a tree or not so let me start with this one this one uh doesn't have integers inside them instead it has strings but of course it's still a tree and what about this one well it's a linked list but it's also a tree and the way i think about it is that each node could have multiple children just like that but it just doesn't so it's kind of a boring example but technically speaking it's also a tree and what about this one well it might look like a tree but it's not because one constraint of something being a tree is that there are no two references that link to the same node and these two references violate that condition and what about this last one well again it violates the definition of being something being a tree for the same reason these two references point to the same node so it's not a tree and another way to see that this is not a tree is that it has a cycle here and whenever there's a cycle that's not a tree so you might say well what is a tree exactly then well a tree is a structure in which there are nodes that are connected to each other and there's a way to go from the root node to every other node in the structure so the root node in this particular tree is this one and there's a way for us to get to every other node from the root node in this structure and it's the same thing with this tree or this linked list there's this root node and there's a way to get to every other node from the root node but as soon as there are two references in this structure that refer to the same node for example this one then it's not a tree anymore so that's basically what a tree is and by the way the root node of a tree is a node without any parents so what that means is that whatever the root node is no other node refers to that one okay now that you hopefully have a clear idea of what a tree is let's practice using a tree with this problem you're given a tree for example this one with the root being here and this is a binary tree so the class of each node will look like this it has an integer data and it has two children left and right and the problem is writing a function which we're going to call find sum which takes the root of this tree as the input and returns the sum of all the values within the street so if you're given this particular root you want to be able to return 20 from this function because we have 2 plus 3 plus 5 plus 6 plus 4 which is 20. and try solving this problem in of and in time where n is the number of nodes in this tree okay and here's my solution and by the way if you want to try running my solution in either python or java you can find that at this url csojo.io tree like i said before we're calling this function find sum and it's taking the root of whatever tree that you're given and we're going to implement this function recursively here and the first thing we're going to do is we're going to define the base case and that's going to be when the given root is null or none which is that the given root is just an empty tree for example this empty tree right here then the sum of all the values in this empty tree is of course zero so we want to return zero in that case and otherwise uh for example if we're given this blue height right here in this recursive function then the sum of all the nodes in this tree is the sum of this current value plus the sum of all the nodes in the right subtree and the sum of all the nodes in the left subtree we can express that with this one line here we're returning the current value or root.data plus the sum of uh all the nodes in the left subtree so let's find sum of red dot left and the sum of all the nodes in the right subtree so let's find some of that right this function would only take of n in time to execute where n is the number of nodes in the given tree and let's think about why well first we need to count the number of times this function is going to be called and that's going to be the number of nodes in the given tree because for each node this function is going to be called once plus all the empty nodes or these empty trees that i didn't draw earlier in this representation of the tree and so this function is going to be called at most about 2n times or of 2n times which is the same thing as of n times and so this function is going to be called of n times and each time this function is called let's think about how how much time it takes to execute well if you look at each line uh if you look at this line it only takes a constant amount of time or of one because we're simply checking uh this simple if condition and it's the same thing as this line it only takes off one in time returning zero and this line as well we're simply adding up these three numbers so once we have the results for these two recursive calls adding up these three numbers would only take off one in time or a constant amount of time and so each time this function is called it only takes one and it's called o of n times so multiplying them together we get the total amount of time this function takes to execute or the time complexity of this function and that's going to be of n now that's it for this problem and my introduction to trees but if you need more practice using trees and there's another interesting problem that i think is much harder and it's a problem i talked about a while ago as a coding interview question so i'm gonna put a link to that video in the description below anyway thank you as always for watching my videos and i'll see you guys in the next one
