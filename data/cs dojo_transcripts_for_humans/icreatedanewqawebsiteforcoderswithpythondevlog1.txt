With timestamps:

00:00 - hey everyone this is the first video in
00:02 - my new series where I'm gonna do some
00:04 - development for one to two weeks and
00:07 - post a video about it and in each of
00:10 - those videos I'm gonna talk about what
00:11 - I've built why I decided to build it how
00:14 - I built it as well as some other things
00:16 - I learned along the way I'm planning to
00:18 - do it for at least five videos including
00:21 - this one but we'll see how many I'll be
00:23 - able to do after that for this week I
00:25 - made a Q&A website for coders which you
00:28 - can find at csq a IO and I wanted to
00:32 - make this website because I know that
00:34 - there are a lot of beginners and
00:36 - intermediate learners here watching this
00:38 - channel and I wanted to create a place
00:40 - where you guys can hopefully ask each
00:42 - other any coding related questions so
00:45 - let me quickly go through the tech slack
00:46 - I used for this I used Python and Django
00:50 - for back-end
00:51 - Postgres for data base Heroku for
00:53 - deployment and bootstrap for styling and
00:57 - that's it I was originally planning to
00:59 - put something like react or VJ s on top
01:02 - of it but I decided against it at least
01:05 - for for this version and I'm gonna
01:08 - explain the reasoning behind that later
01:09 - anyway let me show you what the current
01:11 - website looks like right now as you can
01:14 - see it has pretty simple styling and it
01:17 - has most things that you would expect
01:19 - from a Q&A website like a list of
01:21 - questions right here these are real
01:23 - questions from you know some of you guys
01:25 - and the ability to log in and answer
01:29 - questions if you want I think one
01:32 - interesting thing here is what it will
01:35 - look like without bootstrap and without
01:39 - bootstrap it will look like this so as
01:42 - you can see you know there's much less
01:44 - styling and it's harder to see and use
01:46 - so bootstrap definitely makes it much
01:49 - easier to you know put all the styling
01:51 - in place so it's easier to use so as I
01:54 - mentioned earlier I was originally going
01:57 - to use a JavaScript framework either
01:59 - react or PJs
02:01 - but then I was thinking about how my
02:03 - last project went basically for that one
02:05 - you know I was using Django and react
02:07 - and I did a bunch of development for a
02:10 - few months but after that I sort of
02:12 - realized
02:13 - you know maybe it's not something people
02:14 - wanted in the first place so that's why
02:16 - I stopped working on the project I
02:18 - wanted to try a different approach this
02:20 - time where I will launch this product as
02:23 - fast as possible and get feedback from
02:25 - people you know as soon as possible
02:27 - and that's why I decided to only use
02:30 - Django and no JavaScript framework this
02:33 - time so I can build it faster and I
02:35 - think this approach you know worked well
02:38 - this time so for example when I launched
02:42 - this website I didn't have any
02:44 - pagination functionality you know I was
02:47 - showing all the questions at once but
02:49 - then when I started getting more and
02:51 - more questions
02:52 - you became really Missy so I decided to
02:54 - you know build that in and then the same
02:56 - thing with these up voting and dumb
03:00 - voting functions you know for the
03:02 - question for each question I didn't have
03:05 - you before but when I started getting
03:06 - sort of lower quality questions I
03:09 - thought okay you know I need that
03:11 - functionality now so I know which
03:13 - questions are not that good and if you
03:15 - look through this website you probably
03:17 - see that there are a lot of missing
03:19 - functionalities for example
03:21 - notifications but I feel like with this
03:24 - approach you know everything I've built
03:26 - is something that's that was necessary
03:28 - for users so I feel like with this
03:32 - approach
03:32 - you know there's less risk of building
03:35 - something people don't really want you
03:37 - can you know respond to what people need
03:39 - more okay so I feel like this video is
03:41 - getting to a good length already but
03:44 - since this is mostly a python-based
03:46 - channel let me show you a few Python
03:49 - things that I've reviewed through this
03:51 - project the first thing is called f
03:54 - string which is available since Python
03:57 - 3.6 to explain that I'm gonna use my
04:00 - source code of this project which is
04:01 - available on github if you go to the
04:03 - visit up PI file within a questions
04:06 - folder you should be able to see this
04:08 - function at boot view I'm gonna show the
04:11 - same function on Visual Studio code here
04:13 - now this function both view is a
04:15 - function for handling the users requests
04:18 - for uploading or downloading a question
04:21 - and it's given the users request from
04:24 - the browser as well as the question
04:26 - Eydie and in this function in some cases
04:29 - we want to redirect the users browser
04:32 - directly back to the question page
04:35 - without doing anything else so that's
04:37 - this line right here for example and
04:39 - here we want to produce a string that's
04:43 - gonna represent the given questions URL
04:45 - that should look like slash question /
04:48 - ID whatever that ID is and if string
04:52 - right here achieves that by using this
04:56 - little F expression right here and these
04:59 - curly brackets and you know the given
05:02 - variable ID right here an ID is an
05:05 - integer here okay the next step I wanted
05:07 - to share is actually in the same
05:09 - function and that is to keep your
05:11 - function as flat as possible especially
05:13 - when you have a lot of if statements and
05:16 - if conditions so to explain what I mean
05:18 - I need to explain a little bit more
05:20 - about this function this food view
05:22 - function like I said earlier takes the
05:25 - browser to request as well as the
05:27 - question ID and if the current user is
05:30 - not authenticated then we're gonna
05:33 - redirect that user to the account signup
05:36 - page and if the current users ID is the
05:39 - same as the questions posters user ID we
05:43 - don't want a user to vote on their own
05:46 - question so we're gonna redirect that
05:49 - user to the question page without doing
05:51 - anything else and if the requests method
05:54 - is not post because we are expecting a
05:58 - post request if that's not the case
06:00 - we're gonna redirect that user to that
06:03 - question page without doing anything
06:04 - else
06:05 - - and if all of these conditions are not
06:09 - true then we're gonna update the vote
06:13 - with the update vote function so that's
06:17 - how I wrote this function but someone
06:20 - else might write it in a slightly
06:21 - different way for example kind of like
06:24 - this so let me explain this function
06:27 - here here I wrote if the current user is
06:30 - authenticated that's good then let's
06:33 - check if the current users ID is the
06:37 - same as
06:38 - the question is posters user ID and if
06:41 - that's not the case then that's good
06:43 - let's make sure the request method is
06:46 - post and if all of these are true then
06:50 - update the votes and then for all the
06:54 - other cases we're gonna deal with them
06:56 - with the else clauses right here so the
07:01 - logic of this function is the same as
07:03 - before assuming that I didn't make any
07:05 - mistake but as you can see there are a
07:07 - lot more nested if clauses here and it's
07:10 - much harder to read I think and much
07:13 - easier to make a mistake if you write it
07:14 - like that
07:15 - so ideally when you write whatever
07:17 - function you want to write it's better
07:19 - to write it more flat kind of like this
07:22 - and then try to return as soon as
07:24 - possible so that you don't have to you
07:26 - know write extra else classes here okay
07:29 - enough for Python lessons but there is
07:32 - one last step I wanted to share about
07:34 - Django so when you create a new jungle
07:37 - project make sure to start your own
07:39 - custom user model which would look like
07:43 - this from the very beginning because if
07:47 - you don't and if you use jungles
07:48 - built-in user model it's gonna be very
07:51 - painful to fix it and that's a mistake I
07:54 - made this time it's possible to fix it
07:56 - but it's super painful involving running
07:59 - some sequel queries so I would you know
08:01 - avoid that mistake anyway that's all I
08:04 - wanted to talk about in this video this
08:06 - is sort of a new format so let me know
08:07 - what you what you thought of it in the
08:10 - comment section below and thank you as
08:12 - always for watching my videos I will see
08:14 - you guys in the next one

Cleaned transcript:

hey everyone this is the first video in my new series where I'm gonna do some development for one to two weeks and post a video about it and in each of those videos I'm gonna talk about what I've built why I decided to build it how I built it as well as some other things I learned along the way I'm planning to do it for at least five videos including this one but we'll see how many I'll be able to do after that for this week I made a Q&A website for coders which you can find at csq a IO and I wanted to make this website because I know that there are a lot of beginners and intermediate learners here watching this channel and I wanted to create a place where you guys can hopefully ask each other any coding related questions so let me quickly go through the tech slack I used for this I used Python and Django for backend Postgres for data base Heroku for deployment and bootstrap for styling and that's it I was originally planning to put something like react or VJ s on top of it but I decided against it at least for for this version and I'm gonna explain the reasoning behind that later anyway let me show you what the current website looks like right now as you can see it has pretty simple styling and it has most things that you would expect from a Q&A website like a list of questions right here these are real questions from you know some of you guys and the ability to log in and answer questions if you want I think one interesting thing here is what it will look like without bootstrap and without bootstrap it will look like this so as you can see you know there's much less styling and it's harder to see and use so bootstrap definitely makes it much easier to you know put all the styling in place so it's easier to use so as I mentioned earlier I was originally going to use a JavaScript framework either react or PJs but then I was thinking about how my last project went basically for that one you know I was using Django and react and I did a bunch of development for a few months but after that I sort of realized you know maybe it's not something people wanted in the first place so that's why I stopped working on the project I wanted to try a different approach this time where I will launch this product as fast as possible and get feedback from people you know as soon as possible and that's why I decided to only use Django and no JavaScript framework this time so I can build it faster and I think this approach you know worked well this time so for example when I launched this website I didn't have any pagination functionality you know I was showing all the questions at once but then when I started getting more and more questions you became really Missy so I decided to you know build that in and then the same thing with these up voting and dumb voting functions you know for the question for each question I didn't have you before but when I started getting sort of lower quality questions I thought okay you know I need that functionality now so I know which questions are not that good and if you look through this website you probably see that there are a lot of missing functionalities for example notifications but I feel like with this approach you know everything I've built is something that's that was necessary for users so I feel like with this approach you know there's less risk of building something people don't really want you can you know respond to what people need more okay so I feel like this video is getting to a good length already but since this is mostly a pythonbased channel let me show you a few Python things that I've reviewed through this project the first thing is called f string which is available since Python 3.6 to explain that I'm gonna use my source code of this project which is available on github if you go to the visit up PI file within a questions folder you should be able to see this function at boot view I'm gonna show the same function on Visual Studio code here now this function both view is a function for handling the users requests for uploading or downloading a question and it's given the users request from the browser as well as the question Eydie and in this function in some cases we want to redirect the users browser directly back to the question page without doing anything else so that's this line right here for example and here we want to produce a string that's gonna represent the given questions URL that should look like slash question / ID whatever that ID is and if string right here achieves that by using this little F expression right here and these curly brackets and you know the given variable ID right here an ID is an integer here okay the next step I wanted to share is actually in the same function and that is to keep your function as flat as possible especially when you have a lot of if statements and if conditions so to explain what I mean I need to explain a little bit more about this function this food view function like I said earlier takes the browser to request as well as the question ID and if the current user is not authenticated then we're gonna redirect that user to the account signup page and if the current users ID is the same as the questions posters user ID we don't want a user to vote on their own question so we're gonna redirect that user to the question page without doing anything else and if the requests method is not post because we are expecting a post request if that's not the case we're gonna redirect that user to that question page without doing anything else and if all of these conditions are not true then we're gonna update the vote with the update vote function so that's how I wrote this function but someone else might write it in a slightly different way for example kind of like this so let me explain this function here here I wrote if the current user is authenticated that's good then let's check if the current users ID is the same as the question is posters user ID and if that's not the case then that's good let's make sure the request method is post and if all of these are true then update the votes and then for all the other cases we're gonna deal with them with the else clauses right here so the logic of this function is the same as before assuming that I didn't make any mistake but as you can see there are a lot more nested if clauses here and it's much harder to read I think and much easier to make a mistake if you write it like that so ideally when you write whatever function you want to write it's better to write it more flat kind of like this and then try to return as soon as possible so that you don't have to you know write extra else classes here okay enough for Python lessons but there is one last step I wanted to share about Django so when you create a new jungle project make sure to start your own custom user model which would look like this from the very beginning because if you don't and if you use jungles builtin user model it's gonna be very painful to fix it and that's a mistake I made this time it's possible to fix it but it's super painful involving running some sequel queries so I would you know avoid that mistake anyway that's all I wanted to talk about in this video this is sort of a new format so let me know what you what you thought of it in the comment section below and thank you as always for watching my videos I will see you guys in the next one
