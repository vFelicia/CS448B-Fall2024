With timestamps:

00:00 - here's a coding interview question from
00:02 - Google this is a fairly simple problem
00:04 - so it's probably a sort of question
00:06 - that's often asked on the phone
00:08 - interview and here's the problem you're
00:11 - given a string and you're supposed to
00:13 - write a function that takes the string
00:15 - and returns the first recurring
00:17 - character in that string so for example
00:20 - if you're given this string as the input
00:22 - ABC a there's only one recurring
00:25 - character in the string a so your
00:28 - function should return a if you're given
00:32 - this string BC ABA you see that there
00:36 - are two recurring characters B and a and
00:40 - the first recurrent character is B so
00:44 - you sort of return be from your function
00:47 - if you're given this string ABC there is
00:50 - no recurring character in this string so
00:52 - your function should return either now
00:55 - or none depending on the language that
00:58 - you're using now for practice I do
01:01 - recommend that you pause the video right
01:02 - here think about it for a second and
01:04 - then come back to the video now when
01:07 - you're given this problem initially you
01:09 - may come up with a naive solution like
01:11 - this one in our naive solution we're
01:13 - going to first check the first character
01:15 - in the given string for example this
01:18 - string on the screen the first character
01:21 - in the string is d and we're going to
01:23 - ask ourselves is there another
01:26 - occurrence of the same character D in
01:28 - the subsequent characters we can check
01:30 - this character by character and the
01:33 - answer is no there's no other occurrence
01:36 - of D so we can move on to the next
01:39 - character B and then we can go through
01:42 - the same process ask ourselves is there
01:45 - another occurrence of B in the
01:47 - subsequent characters check that
01:49 - character by character and once we get
01:52 - to this other occurrence of B we'll know
01:55 - that B is the first recurring character
01:57 - in the string so we can just return B
02:00 - from our function and we're done with
02:03 - this naive solution we're essentially
02:05 - checking every potential pair of
02:07 - characters in the string to see if there
02:10 - is any recurring character and so the
02:13 - number
02:13 - of pears we need to check with this
02:15 - naive solution would be and choose two
02:19 - or n times n minus 1/2 which is equal to
02:26 - Big O of N squared and so the time
02:30 - complexity or the run time for this
02:32 - algorithm would be Big O of N squared
02:34 - let's see if we can do any better than
02:36 - that
02:37 - and here's a more efficient solution to
02:40 - this problem instead of checking every
02:42 - potential pair of characters we're going
02:44 - to go through this string only once from
02:46 - left to right character by character and
02:49 - as we see a character we're going to
02:52 - store it in a data structure such as a
02:55 - set a dictionary or hash table to show
02:58 - that we've seen this character already
03:00 - so for example when we're examining the
03:03 - first character D we're going to store
03:06 - it let's say in a hash table and in a
03:09 - hash table we need a key value pair so
03:12 - we're going to use the character as the
03:13 - key and the value could be anything but
03:16 - let's just use one here to show that
03:18 - we've seen this character once and when
03:21 - we go to the next character in this case
03:23 - B right here we need to first ask
03:26 - ourselves have we seen this character
03:29 - already before this character and we can
03:32 - do that with this hash table and the
03:36 - answer is no because B is not in this
03:38 - hash table yet so we're going to put B
03:42 - in this hash table as the key and the
03:45 - value will be 1 again to show that we've
03:48 - seen this character once we'll keep
03:51 - going like that until we get to a
03:53 - character that we've seen already which
03:56 - is the second occurrence of B right here
03:58 - in this case and we'll know that we've
04:02 - seen this character already because it's
04:04 - already in the hash table of course and
04:08 - at that point we can return B in this
04:12 - particular case from our function and
04:13 - we're done with this solution because we
04:16 - only go through this string once from
04:18 - left to right the time complexity or the
04:21 - runtime for this algorithm is Big O of n
04:24 - where
04:24 - and is the number of characters in the
04:26 - string now let's see what this solution
04:28 - by look like in code we're going to
04:31 - define our function first recurring
04:34 - which takes the given string of course
04:37 - for example this one and we turns the
04:39 - first recurring character in that string
04:42 - we're going to use suit code to explain
04:44 - this code the first step in our function
04:47 - is to define counts which is the
04:51 - dictionary or the hash table we're going
04:53 - to use to keep track of each character
04:56 - that we've seen and then we're going to
04:58 - run a for loop for each character in the
05:01 - given string or fork our in given string
05:05 - and then if this character char is
05:08 - already in the dictionary or the hash
05:10 - table then that means this is the first
05:13 - recurring character so we turn that
05:15 - character and if not for example if
05:18 - we're examining this first character in
05:21 - this particular example D put that
05:23 - character as a key in this dictionary or
05:27 - hash table and the value corresponding
05:30 - to that will be 1 and again this value
05:34 - could be anything but I'm just using one
05:36 - to show that we've seen this character
05:38 - once and here you might notice that I'm
05:40 - not using an else statement here but
05:44 - that's just a style issue so you could
05:47 - use it if you'd like to now after this
05:49 - for loop if we haven't returned yet that
05:52 - means that there is no recurring
05:53 - character in the string so in that case
05:56 - either return none or no depending on
06:00 - the language and that's my solution
06:01 - alright guys thanks so much for watching
06:04 - this video
06:05 - one interesting variation to this
06:07 - problem is to find the first non
06:10 - recurring character in the string
06:11 - instead of finding the first recurring
06:14 - character I covered that problem and
06:16 - many other problems in my brand new
06:18 - udemy course 11 essential coding
06:21 - interview questions in which I cover 11
06:23 - of the most essential coding interview
06:25 - questions to master for your next coding
06:27 - interview there's a discount code below
06:30 - in case you're interested in taking the
06:31 - course ok thanks so much and I'll see
06:34 - you soon

Cleaned transcript:

here's a coding interview question from Google this is a fairly simple problem so it's probably a sort of question that's often asked on the phone interview and here's the problem you're given a string and you're supposed to write a function that takes the string and returns the first recurring character in that string so for example if you're given this string as the input ABC a there's only one recurring character in the string a so your function should return a if you're given this string BC ABA you see that there are two recurring characters B and a and the first recurrent character is B so you sort of return be from your function if you're given this string ABC there is no recurring character in this string so your function should return either now or none depending on the language that you're using now for practice I do recommend that you pause the video right here think about it for a second and then come back to the video now when you're given this problem initially you may come up with a naive solution like this one in our naive solution we're going to first check the first character in the given string for example this string on the screen the first character in the string is d and we're going to ask ourselves is there another occurrence of the same character D in the subsequent characters we can check this character by character and the answer is no there's no other occurrence of D so we can move on to the next character B and then we can go through the same process ask ourselves is there another occurrence of B in the subsequent characters check that character by character and once we get to this other occurrence of B we'll know that B is the first recurring character in the string so we can just return B from our function and we're done with this naive solution we're essentially checking every potential pair of characters in the string to see if there is any recurring character and so the number of pears we need to check with this naive solution would be and choose two or n times n minus 1/2 which is equal to Big O of N squared and so the time complexity or the run time for this algorithm would be Big O of N squared let's see if we can do any better than that and here's a more efficient solution to this problem instead of checking every potential pair of characters we're going to go through this string only once from left to right character by character and as we see a character we're going to store it in a data structure such as a set a dictionary or hash table to show that we've seen this character already so for example when we're examining the first character D we're going to store it let's say in a hash table and in a hash table we need a key value pair so we're going to use the character as the key and the value could be anything but let's just use one here to show that we've seen this character once and when we go to the next character in this case B right here we need to first ask ourselves have we seen this character already before this character and we can do that with this hash table and the answer is no because B is not in this hash table yet so we're going to put B in this hash table as the key and the value will be 1 again to show that we've seen this character once we'll keep going like that until we get to a character that we've seen already which is the second occurrence of B right here in this case and we'll know that we've seen this character already because it's already in the hash table of course and at that point we can return B in this particular case from our function and we're done with this solution because we only go through this string once from left to right the time complexity or the runtime for this algorithm is Big O of n where and is the number of characters in the string now let's see what this solution by look like in code we're going to define our function first recurring which takes the given string of course for example this one and we turns the first recurring character in that string we're going to use suit code to explain this code the first step in our function is to define counts which is the dictionary or the hash table we're going to use to keep track of each character that we've seen and then we're going to run a for loop for each character in the given string or fork our in given string and then if this character char is already in the dictionary or the hash table then that means this is the first recurring character so we turn that character and if not for example if we're examining this first character in this particular example D put that character as a key in this dictionary or hash table and the value corresponding to that will be 1 and again this value could be anything but I'm just using one to show that we've seen this character once and here you might notice that I'm not using an else statement here but that's just a style issue so you could use it if you'd like to now after this for loop if we haven't returned yet that means that there is no recurring character in the string so in that case either return none or no depending on the language and that's my solution alright guys thanks so much for watching this video one interesting variation to this problem is to find the first non recurring character in the string instead of finding the first recurring character I covered that problem and many other problems in my brand new udemy course 11 essential coding interview questions in which I cover 11 of the most essential coding interview questions to master for your next coding interview there's a discount code below in case you're interested in taking the course ok thanks so much and I'll see you soon
