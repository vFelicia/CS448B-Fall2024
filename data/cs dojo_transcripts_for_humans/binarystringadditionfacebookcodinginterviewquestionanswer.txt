With timestamps:

00:00 - hey everyone so a few days ago i asked
00:02 - some of you guys if you want to see a
00:04 - video about a coding tv question and you
00:06 - basically said yes so here it is
00:09 - this is a question that's been asked at
00:11 - facebook among other companies
00:13 - and the question is this
00:16 - you're given two strings each one
00:19 - representing a binary number for example
00:21 - one zero and one and you need to write a
00:23 - function that adds them together so one
00:25 - zero plus one should be
00:27 - one one
00:28 - just as an example
00:30 - and you need to do it in a way
00:32 - that doesn't
00:34 - convert these strings into numbers
00:38 - and we're going to call this function ba
00:40 - and that condition of not converting
00:42 - them into numbers is kind of silly but
00:45 - that's just the question
00:47 - another example would be this one 101
00:49 - plus 1 to 1 should be 1 0 1 0. and if
00:52 - you want to try solving this problem by
00:54 - yourself pause the video right here and
00:57 - feel free to use these unit tests that i
01:00 - wrote for this problem i'm going to put
01:02 - a link to that in the description of
01:03 - this video
01:04 - and here's my solution the way i thought
01:07 - about this problem is how would i solve
01:09 - this problem if it was on paper
01:12 - well i would you know write down these
01:14 - two numbers and then i would check the
01:17 - last digits first
01:20 - and then i would go from there you know
01:22 - just check them one by one
01:24 - and try to construct the result that way
01:27 - and so we need to
01:30 - create
01:31 - a new variable whether it's on paper or
01:34 - in your code
01:35 - uh called result let's say and we're
01:38 - gonna start it with an empty string
01:41 - and then we're going to have another
01:43 - variable called carry which is going to
01:45 - keep track of if we have
01:47 - a carry
01:48 - of 1 or not so this is going to be
01:50 - either true or false
01:53 - and then in this particular case we're
01:55 - starting with these two digits
01:58 - and the result is empty right now and
02:00 - then we go
02:02 - to this one
02:04 - the result
02:06 - becomes zero and the carry
02:08 - becomes true
02:10 - and then we can keep going that way
02:12 - the result becomes one because we have
02:14 - carry and we have
02:16 - these two digits there on zero
02:18 - and then we can go to the next digits
02:22 - so this is the basics of my solution
02:25 - and i think one thing to note is that
02:28 - it could potentially complicate things
02:31 - if one string is
02:32 - longer than the other one for example
02:34 - like this and you know
02:37 - there are ways to deal with this case
02:39 - but to simplify our code a little bit
02:42 - i'm going to make sure that b1 is longer
02:46 - or the same length
02:47 - as b2 and if that's not the case we're
02:50 - just gonna
02:52 - swap these two variables
02:54 - okay so let's dive into my solution in
02:56 - python here like i said earlier i wrote
02:58 - a bunch of unit tests for this so we
03:01 - have
03:02 - ba of one and zero one plus zero should
03:04 - be one one plus one should be one zero
03:07 - one one one one should one one one plus
03:10 - one should be one zero zero and so on
03:14 - and currently from my function i'm
03:16 - returning one so some of these tests
03:19 - most of these tests should fail
03:22 - and that's actually true my tests are
03:25 - failing
03:26 - and now i'm gonna write my solution
03:29 - like i said the first thing i want to do
03:31 - is i'm going to make sure
03:34 - that
03:36 - length of b1 is greater than or equal to
03:39 - b2
03:42 - so if that's not the case
03:45 - b1's length is less than
03:48 - b2's length
03:50 - then i'm going to swap
03:53 - these two variables
03:55 - just like that
03:58 - and then
04:00 - like i said earlier i want to start at
04:02 - the last digit
04:04 - of the last digits of these two numbers
04:07 - and then
04:08 - i want to go to the left one by one just
04:11 - like that
04:13 - and to do that what i'm going to do is
04:15 - i'm going to say
04:17 - 4
04:18 - i in range of length of
04:22 - b1
04:23 - so this way
04:24 - with this example
04:27 - i would go from
04:29 - zero to one to two to three so zero one
04:32 - two three
04:33 - and we just need to
04:35 - convert it in a way that that it goes
04:37 - from three to two to one to zero
04:42 - to do that we can just do
04:45 - len b1
04:47 - so the length of b1 minus 1 minus
04:50 - i
04:52 - and i'm going to call this new variable
04:56 - i1
04:57 - and we can make sure that this is
04:59 - correct
05:00 - by checking that when i is 0 so when we
05:03 - are starting this for loop
05:05 - length of b1
05:07 - is 4
05:09 - and so i1 is going to be 3 which is this
05:12 - one
05:13 - and we can do the same thing with
05:15 - b2 by saying i2
05:19 - equals length of b2
05:22 - minus 1 minus i
05:25 - and when b1 is longer than b2
05:29 - i2
05:31 - is going to be
05:32 - a negative number at some point but if
05:34 - that's the case we can just ignore it
05:37 - and before this for loop we need to
05:40 - define
05:42 - result and carry
05:44 - carry is going to be false initially
05:47 - and for result
05:49 - i'm going to use a list or an array
05:52 - depending on
05:53 - what language you're using
05:55 - so this is going to keep track of the
05:57 - digits in the result
05:59 - and then
06:00 - we're going to convert it into a string
06:02 - later
06:04 - and then in the for loop what i'm gonna
06:06 - do in each loop is i'm gonna count
06:11 - ones
06:12 - and i'm gonna set it to zero at the
06:14 - beginning
06:16 - so as an example if we're looking at
06:19 - these two strings
06:20 - and when i is zero so when the loop
06:23 - starts we're looking at
06:25 - these two digits this one and this one
06:29 - and we can see that we have
06:31 - two ones
06:33 - and if we have carry
06:35 - we it's sort of like having three ones
06:38 - and you know here
06:39 - the problem is a little bit vague
06:42 - but i think it's okay to do this because
06:44 - we're not converting you know these
06:46 - strings into numbers we're just counting
06:49 - the number of ones here
06:51 - so i'm just going to go with this
06:53 - so after that i'm going to say if
06:56 - the current
06:57 - digit
06:58 - that we're looking at from b1 is
07:03 - one
07:05 - then
07:10 - add one to
07:12 - count once
07:14 - and do the same thing with
07:17 - b2
07:22 - but here we'll need to say if i2
07:26 - is less than
07:28 - zero we're going to ignore it so we need
07:30 - to add this condition that says if i2 is
07:34 - greater than or equal to zero and
07:38 - if that digit is one then add one to
07:41 - count one
07:42 - and then if carry is true
07:45 - we're going to add one to count ones as
07:48 - well
07:50 - and then after that
07:52 - depending on the value of count ones
07:55 - we can add a different different digit
07:58 - to result
08:00 - so we're going to do that with
08:02 - if count
08:03 - one's
08:04 - mod two
08:06 - is zero
08:08 - so if count once is even
08:11 - then that means it's either zero or two
08:14 - so in that case
08:16 - we're going to add
08:18 - zero
08:19 - two results
08:22 - and else we're gonna add
08:27 - 1 to the result
08:31 - and then if count once
08:33 - is greater than
08:36 - 1
08:37 - then the carry should be true so we're
08:39 - going to set carry
08:41 - to
08:42 - true
08:44 - and that's it for the for loop and after
08:46 - the for loop we're going to check if
08:48 - carry is true
08:51 - if carry is true we should append
08:56 - one
08:57 - to the result
09:00 - and right now result is reversed
09:03 - so we need to we we need to reverse it
09:06 - back
09:07 - with result.reverse
09:10 - and then we need to convert it
09:12 - into
09:13 - a string
09:14 - with an empty string.join
09:17 - result and then we can just return that
09:20 - okay so hopefully this is gonna work
09:22 - let's see by running this function
09:25 - and it does i
09:27 - passed all the tests
09:29 - okay so that's it for this video uh
09:31 - sorry it's been a while since my last
09:32 - video but let me know if you have any
09:34 - video requests for the future
09:37 - and i'm gonna
09:39 - clear this
09:40 - and
09:42 - turn this back to the code i had so that
09:45 - you can practice if you want to practice
09:46 - by yourself i'm gonna put this in the
09:48 - description below thank you as always
09:50 - for watching my videos and i'll see you
09:52 - guys in the next one

Cleaned transcript:

hey everyone so a few days ago i asked some of you guys if you want to see a video about a coding tv question and you basically said yes so here it is this is a question that's been asked at facebook among other companies and the question is this you're given two strings each one representing a binary number for example one zero and one and you need to write a function that adds them together so one zero plus one should be one one just as an example and you need to do it in a way that doesn't convert these strings into numbers and we're going to call this function ba and that condition of not converting them into numbers is kind of silly but that's just the question another example would be this one 101 plus 1 to 1 should be 1 0 1 0. and if you want to try solving this problem by yourself pause the video right here and feel free to use these unit tests that i wrote for this problem i'm going to put a link to that in the description of this video and here's my solution the way i thought about this problem is how would i solve this problem if it was on paper well i would you know write down these two numbers and then i would check the last digits first and then i would go from there you know just check them one by one and try to construct the result that way and so we need to create a new variable whether it's on paper or in your code uh called result let's say and we're gonna start it with an empty string and then we're going to have another variable called carry which is going to keep track of if we have a carry of 1 or not so this is going to be either true or false and then in this particular case we're starting with these two digits and the result is empty right now and then we go to this one the result becomes zero and the carry becomes true and then we can keep going that way the result becomes one because we have carry and we have these two digits there on zero and then we can go to the next digits so this is the basics of my solution and i think one thing to note is that it could potentially complicate things if one string is longer than the other one for example like this and you know there are ways to deal with this case but to simplify our code a little bit i'm going to make sure that b1 is longer or the same length as b2 and if that's not the case we're just gonna swap these two variables okay so let's dive into my solution in python here like i said earlier i wrote a bunch of unit tests for this so we have ba of one and zero one plus zero should be one one plus one should be one zero one one one one should one one one plus one should be one zero zero and so on and currently from my function i'm returning one so some of these tests most of these tests should fail and that's actually true my tests are failing and now i'm gonna write my solution like i said the first thing i want to do is i'm going to make sure that length of b1 is greater than or equal to b2 so if that's not the case b1's length is less than b2's length then i'm going to swap these two variables just like that and then like i said earlier i want to start at the last digit of the last digits of these two numbers and then i want to go to the left one by one just like that and to do that what i'm going to do is i'm going to say 4 i in range of length of b1 so this way with this example i would go from zero to one to two to three so zero one two three and we just need to convert it in a way that that it goes from three to two to one to zero to do that we can just do len b1 so the length of b1 minus 1 minus i and i'm going to call this new variable i1 and we can make sure that this is correct by checking that when i is 0 so when we are starting this for loop length of b1 is 4 and so i1 is going to be 3 which is this one and we can do the same thing with b2 by saying i2 equals length of b2 minus 1 minus i and when b1 is longer than b2 i2 is going to be a negative number at some point but if that's the case we can just ignore it and before this for loop we need to define result and carry carry is going to be false initially and for result i'm going to use a list or an array depending on what language you're using so this is going to keep track of the digits in the result and then we're going to convert it into a string later and then in the for loop what i'm gonna do in each loop is i'm gonna count ones and i'm gonna set it to zero at the beginning so as an example if we're looking at these two strings and when i is zero so when the loop starts we're looking at these two digits this one and this one and we can see that we have two ones and if we have carry we it's sort of like having three ones and you know here the problem is a little bit vague but i think it's okay to do this because we're not converting you know these strings into numbers we're just counting the number of ones here so i'm just going to go with this so after that i'm going to say if the current digit that we're looking at from b1 is one then add one to count once and do the same thing with b2 but here we'll need to say if i2 is less than zero we're going to ignore it so we need to add this condition that says if i2 is greater than or equal to zero and if that digit is one then add one to count one and then if carry is true we're going to add one to count ones as well and then after that depending on the value of count ones we can add a different different digit to result so we're going to do that with if count one's mod two is zero so if count once is even then that means it's either zero or two so in that case we're going to add zero two results and else we're gonna add 1 to the result and then if count once is greater than 1 then the carry should be true so we're going to set carry to true and that's it for the for loop and after the for loop we're going to check if carry is true if carry is true we should append one to the result and right now result is reversed so we need to we we need to reverse it back with result.reverse and then we need to convert it into a string with an empty string.join result and then we can just return that okay so hopefully this is gonna work let's see by running this function and it does i passed all the tests okay so that's it for this video uh sorry it's been a while since my last video but let me know if you have any video requests for the future and i'm gonna clear this and turn this back to the code i had so that you can practice if you want to practice by yourself i'm gonna put this in the description below thank you as always for watching my videos and i'll see you guys in the next one
