With timestamps:

00:00 - hi everyone so in this video I'm gonna
00:02 - show you five of the problem-solving
00:04 - techniques I use the most often when I
00:06 - try to solve pretty much any coding
00:08 - entropy problem and I'm gonna show them
00:10 - to you in the context of trying to solve
00:12 - a specific problem so let's get started
00:15 - okay so here's the problem we're gonna
00:18 - try and solve today you're given two
00:20 - integer arrays for example these two
00:22 - right here and you're also given a
00:25 - target which is just a number let's just
00:28 - say that the problem here is writing a
00:30 - function that takes these three pieces
00:32 - of information and returns a pair of
00:36 - numbers that you can make from these two
00:38 - arrays whose sum is the closest to the
00:41 - target so in this particular example you
00:44 - want to be able to find either this pair
00:47 - right here three-and-twenty or this
00:51 - other pair right here five and twenty
00:54 - and that way you'd get the sum of either
00:58 - 23 or 25 and that's the closest you can
01:01 - get to 24 because there is no pair of
01:04 - numbers you can make out of these two
01:06 - arrays that add up to 24 exactly and
01:09 - here just for simplicity let's just
01:11 - assume that the two given arrays always
01:14 - have the same length so let's think
01:16 - about this problem okay so whenever I
01:19 - try to solve a coding interview problem
01:21 - the first thing I like to do is I like
01:23 - to come out with a brute force solution
01:25 - in this particular case naive brute
01:28 - force solution might be to check every
01:31 - single pair so that would be despair
01:33 - despair despair and so on and then this
01:37 - pair despair despair and just like that
01:40 - you can check every single pair and
01:42 - since there are N squared
01:44 - possible pairs like that assuming that
01:47 - the length of each array is n this
01:50 - solution would take of N squared in time
01:54 - so this is just a simple brute force
01:56 - solution but this might be actually all
01:59 - you need depending on the particular
02:00 - interview so what I would do is I would
02:03 - then ask the interviewer or something
02:05 - like you know this is just a brute force
02:07 - solution but should I maybe look for a
02:09 - more efficient solution
02:11 - and if the interviewer says yes you know
02:14 - you should look for more optimal
02:15 - solution then we can go to the next step
02:17 - and here's the next step and by the way
02:20 - these are actually the steps I
02:22 - personally took to solve this particular
02:25 - problem
02:26 - so what I did after you know thinking of
02:29 - the brute force solution is I started
02:31 - thinking of a simpler version of this
02:33 - problem you know as we saw earlier the
02:36 - problem was to find a pair of numbers
02:37 - whose sum is the closest to the target
02:40 - so I thought maybe a simpler version of
02:43 - this particular problem would be to find
02:45 - a pair of numbers whose sum is exactly
02:48 - equal to 24 and that's what I started
02:51 - thinking about and here's the solution I
02:53 - came up with for that problem first of
02:56 - all we're gonna initialize an empty set
02:58 - and then we're gonna go through the
03:01 - elements in the first array we're gonna
03:04 - put all of these elements in this set
03:07 - and after that we're gonna go through
03:10 - the elements in the second array and as
03:13 - we do we're gonna check if there's any
03:15 - pair that adds up to the target exactly
03:18 - 24 in this particular case so when we
03:21 - were looking at for example this number
03:23 - four right here we'll just ask ourselves
03:26 - is there a number 20 in the first array
03:29 - and that's easy to check and just by
03:32 - checking if there is 20 in the set and
03:35 - if there is that's the answer we can
03:37 - just return 20 and 4 and if not we can
03:42 - just go to the next element which is 1
03:45 - in this particular case and we can just
03:47 - repeat the same thing you know ask
03:48 - ourselves is there a number 23 in the
03:51 - set and if there is that's the answer
03:54 - and then just go through the entire
03:55 - array just like that and this solution
03:58 - would take off end in time because we
04:01 - only need to go through each of these
04:03 - arrays just once and once you have a
04:06 - solution to the simplified version of
04:08 - the original problem you might actually
04:11 - be able to use the insights that you get
04:13 - from that to solve the original problem
04:15 - and for this particular case here's what
04:19 - I thought I thought to solve the
04:21 - original problem we need to just ask
04:23 - ourselves
04:24 - is there a pair of numbers that add up
04:27 - to 24 exactly and if there isn't you
04:30 - know we just need to ask ourselves the
04:32 - same question with different numbers how
04:35 - about you know 25 and what about 23 and
04:38 - so on and as long as we keep increasing
04:41 - this range pretty much forever I guess
04:44 - we'll eventually find the right solution
04:46 - and you know each of these steps takes
04:49 - over n in time
04:51 - so the entire time complexity of this
04:54 - solution would be of x times n where X
04:59 - is the number of times we need to repeat
05:01 - this procedure in that particular case
05:03 - and here in this particular case X is
05:06 - just 2 because you know we will only
05:09 - need to ask ourselves about 24 and then
05:12 - either 23 or 25 and this right here
05:16 - might be actually a pretty good solution
05:18 - so I would sort of you know repeat the
05:21 - procedure as what I did earlier you know
05:24 - I would ask the interviewer I think this
05:26 - is a pretty good solution but should I
05:28 - maybe look for a different solution if
05:30 - the interviewer says yes you should look
05:32 - for a different solution then we'll go
05:34 - to the next step after this for the next
05:37 - step we're gonna use my tip number three
05:39 - which is to think about the given
05:42 - problem using simple examples maybe
05:45 - simpler ones than the given example
05:47 - using those examples try noticing a
05:51 - pattern so as we saw earlier the given
05:54 - example was this one you know it's
05:56 - pretty simple already but you might want
05:58 - to come up with an even simpler example
06:00 - to make it easier to think about this
06:02 - problem so that might be something like
06:05 - this for example so as you can see these
06:09 - arrays each of them has only four
06:11 - elements instead of six and let's say
06:14 - the target should be 13 and when I came
06:18 - out with this example I thought you know
06:21 - these two arrays are small enough so
06:23 - that it's pretty easy to compute the sum
06:25 - of every single pair and I thought maybe
06:29 - using that information I'll be able to
06:31 - spot some kind of pattern so that's what
06:34 - I started doing first of all I made a
06:36 - diagram like the
06:38 - one as you can see you know the first
06:40 - array seven for 110 is right here on the
06:43 - y-axis you might say and four five eight
06:46 - seven is on this axis you know I just
06:49 - made this diagram on paper and then I
06:51 - started computing the sums of each pair
06:54 - like seven four seven and five seven
06:57 - eight and seventy seven and so on
06:58 - and then I realized it's probably better
07:01 - to sort these arrays first before
07:03 - computing the sums so that it's gonna be
07:06 - easier to spot a pattern so that's what
07:08 - I did as you can see each of these
07:10 - arrays have been sorted 1 4 7 10 and 4 5
07:14 - 7 8 and once I had this on paper
07:17 - I started computing the psalms again
07:21 - and once I computed all the sums it was
07:24 - pretty easy to see what the correct
07:26 - solution was in this particular example
07:28 - the target sum is 13 so the correct
07:31 - solution would be any of these four
07:34 - values right here so you know the
07:37 - correct solution would be any one of
07:39 - these pairs for 877 and so when I saw
07:44 - this the only sort of pattern I saw was
07:47 - that these solution values seem to align
07:51 - themselves in this kind of direction you
07:54 - know that's pretty vague and I had no
07:57 - idea you know if that was gonna be
07:59 - useful at all for trying to solve this
08:01 - problem when I was trying to solve it so
08:03 - I kept thinking about this problem a
08:05 - little bit more and the next thing I
08:07 - thought was what if we don't know any of
08:09 - the sums for any of the pairs yet then
08:12 - we might randomly check one of the pairs
08:15 - let's say four and five right here and
08:17 - you know compute the sum for nine and I
08:21 - realized that as soon as we know that
08:22 - this is nine we don't have to check this
08:25 - cell anymore and that's because this
08:29 - array right here is sorted so if you go
08:31 - to the left and this matrix of sums this
08:36 - son right here is definitely gonna be
08:38 - less than this sum 9 whatever and this
08:41 - sum is so we can mark that as definitely
08:45 - not announcer you know using what's the
08:47 - X right here and we can do the same
08:49 - thing for this cell as well you know
08:51 - because this array is sorted if you go
08:54 - up the sum will be less than 9 which is
08:58 - less than the target so this sum will
09:01 - definitely not be an answer because it's
09:03 - gonna be farther from the target than
09:05 - this sum so we can mark that as X now
09:09 - you know it's not announcer and we can
09:11 - do the same thing for this cell as well
09:13 - for the same reason and after that we
09:16 - might randomly check this sum this pair
09:19 - 7 and 7 and we find that this is 14 of
09:23 - course using the same logic once we know
09:27 - that this is 14 we don't have to check
09:30 - these three cells anymore
09:32 - and that's because these three sales if
09:34 - you check the sum that's going to be
09:36 - greater than 14 which is greater than 13
09:39 - so these sums are going to be farther
09:42 - from the target then this sum that we
09:45 - checked 14 okay so I think this insight
09:48 - is a little bit more helpful than what
09:51 - we had earlier but for me personally
09:54 - just having this insight alone was not
09:56 - quite enough to actually start forming a
10:00 - solution so I went to my next step which
10:03 - is to use some form of visualization so
10:07 - we already started visualizing this
10:08 - problem a little bit but I decided to
10:11 - visualize this problem with a much
10:13 - bigger example you know to gain some
10:15 - more insights so let's say that these
10:18 - are and just like what we saw earlier
10:20 - the two arrays that were given and these
10:22 - are raised let's say are already sorted
10:24 - so these numbers and that are
10:27 - represented by Y go up in this direction
10:30 - that's how it's story and these numbers
10:33 - represented by X go up in this direction
10:37 - and let's say that the target sum that
10:40 - we're looking for is 70 so with this
10:43 - example just like we did earlier we
10:46 - might check a random pair and the sum
10:48 - for it let's say we check on this sum
10:52 - you know this number and this number
10:55 - whatever they are and the sum happens to
10:58 - be 60 and once we know that at this song
11:01 - right here is 60 we'll know that we
11:04 - don't have to check these numbers
11:05 - anymore because these sums are gonna be
11:09 - less than 60 which is gonna be farther
11:12 - from the target and the same thing with
11:15 - these numbers and all of these numbers
11:17 - so at that point we can make we can mark
11:21 - all of those sales as definitely not the
11:24 - answer that we're looking for and after
11:26 - that we might check this sum right here
11:29 - and if the sum of these pairs this
11:32 - number and this number whatever they are
11:34 - happens to be 68 since that's less than
11:38 - symmetry we'll be able to tell that we
11:41 - can mark all of these numbers as not an
11:44 - answer
11:44 - and if we want we can just keep going
11:47 - like that so we might check this son
11:50 - right here and if that happens to be 80
11:53 - which is greater than 70 we'll know that
11:55 - all of these these cells are not the
12:00 - answer that we're looking for so let's
12:02 - mark those as not an answer either and
12:05 - basically we can just keep going just
12:07 - like that so as you can see all of these
12:11 - numbers are less than the target and all
12:15 - of these numbers are greater than the
12:17 - target and this blue region and the
12:20 - orange region represent you know the
12:23 - cells that we don't have to check
12:24 - because we know that our answer doesn't
12:27 - lie in there so I actually made this
12:31 - kind of diagram on paper when I was
12:32 - trying to solve this problem and just by
12:34 - looking at it I thought I'm starting to
12:37 - see you know the same kind of pattern as
12:39 - what we saw earlier so just looking at
12:43 - this black region of possible answers I
12:45 - thought this region you know seems to
12:48 - form itself in this kind of shape and
12:51 - this is you know kind of similar to what
12:53 - we saw earlier with a simple example so
12:56 - just looking at it I thought you know
12:58 - maybe we can start from the top right
13:01 - corner of this region and then somehow
13:03 - navigate ourselves through this region
13:06 - to find our answer I'm using that bit of
13:10 - insight I was actually able to come up
13:12 - with my solution for this problem so let
13:15 - me show you that solution right now okay
13:17 - so let's say we have the same kind of
13:19 - setup as before we have the two arrays
13:21 - represented by y's and x's
13:24 - and let's say that these are already
13:26 - sorted we've already sorted them and you
13:29 - know Y is go up in this direction and X
13:32 - is go up in this direction and the
13:35 - target that we're looking for is 70
13:37 - again now to begin our search we're
13:41 - gonna check the top right corner and
13:42 - let's say that the sum of that pair this
13:46 - number and this number right here
13:47 - happens to be 60 which is less than
13:50 - savory of course then at that point
13:52 - we'll know that all of these pairs are
13:55 - not the answer now
13:57 - looking for after that we can you know
14:00 - mark those as not our uh sir and check
14:02 - this number so go down one cell and then
14:05 - check this number and if that happens to
14:08 - be less than seventy again let's say 62
14:11 - we can do the same thing mark those
14:14 - cells as not our answer and then you
14:17 - know keep track of this number two and
14:19 - after that we're gonna go down one cell
14:22 - again and if that happens to be greater
14:25 - than seventy let's say 75 we'll know
14:28 - that all of these cells are not the
14:30 - answer that we're looking for we can
14:32 - basically you know keep going like that
14:34 - you know check this number if that
14:36 - happens to be less than 70 we're gonna
14:39 - mark these numbers
14:41 - that's not our answer and so on so just
14:44 - like that we can you know complete our
14:46 - search in this zigzag kind of way and as
14:50 - we go through that we can you know keep
14:52 - track of the pair that we've seen so far
14:55 - whose sum is the closest to the target
14:58 - okay and once I come up with a solution
15:00 - like that and according it to me
15:02 - what I'd like to do is I like to test my
15:07 - solution on a few examples and I highly
15:10 - recommend doing this too so let's say
15:12 - that you know we're gonna test our
15:14 - solution with the example that we came
15:17 - up with earlier and as we saw earlier
15:20 - with these two arrays and the target of
15:23 - 13 there were four correct solutions
15:26 - these four pairs right here so let's see
15:29 - if we can find you know one of them with
15:31 - this solution so let's set this up the
15:35 - same way as before we're gonna you know
15:37 - sort these arrays first and then you
15:40 - know we can visualize them this way so
15:43 - the first array 741 10 is sorted and
15:46 - then laid out here on the y-axis and the
15:49 - second array 4 5 8 7 is sorted and then
15:52 - laid out on this axis the first step of
15:55 - our solution is checking the top right
15:58 - corner so we're gonna ask yourselves
15:59 - okay what's the sum of this pair right
16:02 - here and that's of course 9 you know 1
16:04 - plus 8 is 9
16:06 - and at that point because this is less
16:08 - than the target well know that we don't
16:10 - have to check these cells anymore so
16:14 - after that we're gonna go down to this
16:16 - cell right here what's the sum of four
16:18 - and eight that's twelve and that's still
16:21 - less than the target so we're gonna
16:23 - we're gonna mark these cells
16:25 - that's not our answer and then war go
16:27 - down and then that's 15 which is greater
16:31 - than the target so we're gonna mark this
16:33 - one it's not our answer so we can just
16:36 - basically keep going like that and then
16:39 - we'll end up going through this kind of
16:43 - path and if we keep track of you know
16:46 - the first closest target that we see or
16:49 - the first spare whose sum is the closest
16:52 - to the target that's gonna be at this
16:55 - number right here twelve so from our
16:57 - solution we're gonna return four and
17:00 - eight and if we want to return you know
17:02 - all of these answers we can also do that
17:05 - just by keeping track of you know the
17:08 - closest all of the closest pairs anyway
17:11 - at that point personally I would be
17:13 - comfortable enough with the solution so
17:15 - I would find the time complexity and the
17:19 - space complexity which happened to be of
17:21 - n log N and of n assuming that you use
17:26 - an off of n log and sorting algorithm
17:28 - and after that I would just start coding
17:31 - and if you're not like 100% sure with
17:34 - your solution one more technique you can
17:37 - use is you can say something like I'm
17:40 - pretty comfortable with the solution so
17:42 - I think I'm gonna start writing some
17:44 - code and you know try to observe the
17:46 - interviewers face if the interviewer
17:49 - looks pretty happy like happy enough
17:50 - then you can start writing some code and
17:53 - for this particular solution if you're
17:56 - curious about how I would actually
17:58 - implement it you can check out my
17:59 - solution code in Python and Java at CES
18:04 - those of that io / problem okay so
18:06 - recently a lot of people have been
18:08 - asking me for advice on how to get
18:10 - better at problem solving and honestly I
18:13 - think the best way is to just you know
18:15 - solve a lot of problems and
18:16 - ocelots and for that I actually want to
18:19 - recommend two pieces of resources the
18:22 - first one is my udemy course called 11
18:25 - essential coding interview questions and
18:27 - you know coding exercises this course is
18:30 - intended for beginners to intermediate
18:31 - learners and in this course I cover 11
18:35 - of the most frequently asked questions
18:37 - with some coding exercises in Python and
18:40 - Java the second one is this website
18:43 - called daily coding problem it's
18:45 - actually run by a friend of mine who I
18:47 - used to work with at Google and what I
18:49 - really like about them is the fact that
18:51 - they provide a pretty detailed solution
18:53 - for each of their daily coding problems
18:55 - and that solution is actually only
18:58 - available in their premium subscription
19:00 - but I would say even their free
19:02 - subscription and you know their blog
19:04 - articles are pretty helpful anyway thank
19:08 - you as always for watching my videos and
19:10 - I'll see you guys in the next one

Cleaned transcript:

hi everyone so in this video I'm gonna show you five of the problemsolving techniques I use the most often when I try to solve pretty much any coding entropy problem and I'm gonna show them to you in the context of trying to solve a specific problem so let's get started okay so here's the problem we're gonna try and solve today you're given two integer arrays for example these two right here and you're also given a target which is just a number let's just say that the problem here is writing a function that takes these three pieces of information and returns a pair of numbers that you can make from these two arrays whose sum is the closest to the target so in this particular example you want to be able to find either this pair right here threeandtwenty or this other pair right here five and twenty and that way you'd get the sum of either 23 or 25 and that's the closest you can get to 24 because there is no pair of numbers you can make out of these two arrays that add up to 24 exactly and here just for simplicity let's just assume that the two given arrays always have the same length so let's think about this problem okay so whenever I try to solve a coding interview problem the first thing I like to do is I like to come out with a brute force solution in this particular case naive brute force solution might be to check every single pair so that would be despair despair despair and so on and then this pair despair despair and just like that you can check every single pair and since there are N squared possible pairs like that assuming that the length of each array is n this solution would take of N squared in time so this is just a simple brute force solution but this might be actually all you need depending on the particular interview so what I would do is I would then ask the interviewer or something like you know this is just a brute force solution but should I maybe look for a more efficient solution and if the interviewer says yes you know you should look for more optimal solution then we can go to the next step and here's the next step and by the way these are actually the steps I personally took to solve this particular problem so what I did after you know thinking of the brute force solution is I started thinking of a simpler version of this problem you know as we saw earlier the problem was to find a pair of numbers whose sum is the closest to the target so I thought maybe a simpler version of this particular problem would be to find a pair of numbers whose sum is exactly equal to 24 and that's what I started thinking about and here's the solution I came up with for that problem first of all we're gonna initialize an empty set and then we're gonna go through the elements in the first array we're gonna put all of these elements in this set and after that we're gonna go through the elements in the second array and as we do we're gonna check if there's any pair that adds up to the target exactly 24 in this particular case so when we were looking at for example this number four right here we'll just ask ourselves is there a number 20 in the first array and that's easy to check and just by checking if there is 20 in the set and if there is that's the answer we can just return 20 and 4 and if not we can just go to the next element which is 1 in this particular case and we can just repeat the same thing you know ask ourselves is there a number 23 in the set and if there is that's the answer and then just go through the entire array just like that and this solution would take off end in time because we only need to go through each of these arrays just once and once you have a solution to the simplified version of the original problem you might actually be able to use the insights that you get from that to solve the original problem and for this particular case here's what I thought I thought to solve the original problem we need to just ask ourselves is there a pair of numbers that add up to 24 exactly and if there isn't you know we just need to ask ourselves the same question with different numbers how about you know 25 and what about 23 and so on and as long as we keep increasing this range pretty much forever I guess we'll eventually find the right solution and you know each of these steps takes over n in time so the entire time complexity of this solution would be of x times n where X is the number of times we need to repeat this procedure in that particular case and here in this particular case X is just 2 because you know we will only need to ask ourselves about 24 and then either 23 or 25 and this right here might be actually a pretty good solution so I would sort of you know repeat the procedure as what I did earlier you know I would ask the interviewer I think this is a pretty good solution but should I maybe look for a different solution if the interviewer says yes you should look for a different solution then we'll go to the next step after this for the next step we're gonna use my tip number three which is to think about the given problem using simple examples maybe simpler ones than the given example using those examples try noticing a pattern so as we saw earlier the given example was this one you know it's pretty simple already but you might want to come up with an even simpler example to make it easier to think about this problem so that might be something like this for example so as you can see these arrays each of them has only four elements instead of six and let's say the target should be 13 and when I came out with this example I thought you know these two arrays are small enough so that it's pretty easy to compute the sum of every single pair and I thought maybe using that information I'll be able to spot some kind of pattern so that's what I started doing first of all I made a diagram like the one as you can see you know the first array seven for 110 is right here on the yaxis you might say and four five eight seven is on this axis you know I just made this diagram on paper and then I started computing the sums of each pair like seven four seven and five seven eight and seventy seven and so on and then I realized it's probably better to sort these arrays first before computing the sums so that it's gonna be easier to spot a pattern so that's what I did as you can see each of these arrays have been sorted 1 4 7 10 and 4 5 7 8 and once I had this on paper I started computing the psalms again and once I computed all the sums it was pretty easy to see what the correct solution was in this particular example the target sum is 13 so the correct solution would be any of these four values right here so you know the correct solution would be any one of these pairs for 877 and so when I saw this the only sort of pattern I saw was that these solution values seem to align themselves in this kind of direction you know that's pretty vague and I had no idea you know if that was gonna be useful at all for trying to solve this problem when I was trying to solve it so I kept thinking about this problem a little bit more and the next thing I thought was what if we don't know any of the sums for any of the pairs yet then we might randomly check one of the pairs let's say four and five right here and you know compute the sum for nine and I realized that as soon as we know that this is nine we don't have to check this cell anymore and that's because this array right here is sorted so if you go to the left and this matrix of sums this son right here is definitely gonna be less than this sum 9 whatever and this sum is so we can mark that as definitely not announcer you know using what's the X right here and we can do the same thing for this cell as well you know because this array is sorted if you go up the sum will be less than 9 which is less than the target so this sum will definitely not be an answer because it's gonna be farther from the target than this sum so we can mark that as X now you know it's not announcer and we can do the same thing for this cell as well for the same reason and after that we might randomly check this sum this pair 7 and 7 and we find that this is 14 of course using the same logic once we know that this is 14 we don't have to check these three cells anymore and that's because these three sales if you check the sum that's going to be greater than 14 which is greater than 13 so these sums are going to be farther from the target then this sum that we checked 14 okay so I think this insight is a little bit more helpful than what we had earlier but for me personally just having this insight alone was not quite enough to actually start forming a solution so I went to my next step which is to use some form of visualization so we already started visualizing this problem a little bit but I decided to visualize this problem with a much bigger example you know to gain some more insights so let's say that these are and just like what we saw earlier the two arrays that were given and these are raised let's say are already sorted so these numbers and that are represented by Y go up in this direction that's how it's story and these numbers represented by X go up in this direction and let's say that the target sum that we're looking for is 70 so with this example just like we did earlier we might check a random pair and the sum for it let's say we check on this sum you know this number and this number whatever they are and the sum happens to be 60 and once we know that at this song right here is 60 we'll know that we don't have to check these numbers anymore because these sums are gonna be less than 60 which is gonna be farther from the target and the same thing with these numbers and all of these numbers so at that point we can make we can mark all of those sales as definitely not the answer that we're looking for and after that we might check this sum right here and if the sum of these pairs this number and this number whatever they are happens to be 68 since that's less than symmetry we'll be able to tell that we can mark all of these numbers as not an answer and if we want we can just keep going like that so we might check this son right here and if that happens to be 80 which is greater than 70 we'll know that all of these these cells are not the answer that we're looking for so let's mark those as not an answer either and basically we can just keep going just like that so as you can see all of these numbers are less than the target and all of these numbers are greater than the target and this blue region and the orange region represent you know the cells that we don't have to check because we know that our answer doesn't lie in there so I actually made this kind of diagram on paper when I was trying to solve this problem and just by looking at it I thought I'm starting to see you know the same kind of pattern as what we saw earlier so just looking at this black region of possible answers I thought this region you know seems to form itself in this kind of shape and this is you know kind of similar to what we saw earlier with a simple example so just looking at it I thought you know maybe we can start from the top right corner of this region and then somehow navigate ourselves through this region to find our answer I'm using that bit of insight I was actually able to come up with my solution for this problem so let me show you that solution right now okay so let's say we have the same kind of setup as before we have the two arrays represented by y's and x's and let's say that these are already sorted we've already sorted them and you know Y is go up in this direction and X is go up in this direction and the target that we're looking for is 70 again now to begin our search we're gonna check the top right corner and let's say that the sum of that pair this number and this number right here happens to be 60 which is less than savory of course then at that point we'll know that all of these pairs are not the answer now looking for after that we can you know mark those as not our uh sir and check this number so go down one cell and then check this number and if that happens to be less than seventy again let's say 62 we can do the same thing mark those cells as not our answer and then you know keep track of this number two and after that we're gonna go down one cell again and if that happens to be greater than seventy let's say 75 we'll know that all of these cells are not the answer that we're looking for we can basically you know keep going like that you know check this number if that happens to be less than 70 we're gonna mark these numbers that's not our answer and so on so just like that we can you know complete our search in this zigzag kind of way and as we go through that we can you know keep track of the pair that we've seen so far whose sum is the closest to the target okay and once I come up with a solution like that and according it to me what I'd like to do is I like to test my solution on a few examples and I highly recommend doing this too so let's say that you know we're gonna test our solution with the example that we came up with earlier and as we saw earlier with these two arrays and the target of 13 there were four correct solutions these four pairs right here so let's see if we can find you know one of them with this solution so let's set this up the same way as before we're gonna you know sort these arrays first and then you know we can visualize them this way so the first array 741 10 is sorted and then laid out here on the yaxis and the second array 4 5 8 7 is sorted and then laid out on this axis the first step of our solution is checking the top right corner so we're gonna ask yourselves okay what's the sum of this pair right here and that's of course 9 you know 1 plus 8 is 9 and at that point because this is less than the target well know that we don't have to check these cells anymore so after that we're gonna go down to this cell right here what's the sum of four and eight that's twelve and that's still less than the target so we're gonna we're gonna mark these cells that's not our answer and then war go down and then that's 15 which is greater than the target so we're gonna mark this one it's not our answer so we can just basically keep going like that and then we'll end up going through this kind of path and if we keep track of you know the first closest target that we see or the first spare whose sum is the closest to the target that's gonna be at this number right here twelve so from our solution we're gonna return four and eight and if we want to return you know all of these answers we can also do that just by keeping track of you know the closest all of the closest pairs anyway at that point personally I would be comfortable enough with the solution so I would find the time complexity and the space complexity which happened to be of n log N and of n assuming that you use an off of n log and sorting algorithm and after that I would just start coding and if you're not like 100% sure with your solution one more technique you can use is you can say something like I'm pretty comfortable with the solution so I think I'm gonna start writing some code and you know try to observe the interviewers face if the interviewer looks pretty happy like happy enough then you can start writing some code and for this particular solution if you're curious about how I would actually implement it you can check out my solution code in Python and Java at CES those of that io / problem okay so recently a lot of people have been asking me for advice on how to get better at problem solving and honestly I think the best way is to just you know solve a lot of problems and ocelots and for that I actually want to recommend two pieces of resources the first one is my udemy course called 11 essential coding interview questions and you know coding exercises this course is intended for beginners to intermediate learners and in this course I cover 11 of the most frequently asked questions with some coding exercises in Python and Java the second one is this website called daily coding problem it's actually run by a friend of mine who I used to work with at Google and what I really like about them is the fact that they provide a pretty detailed solution for each of their daily coding problems and that solution is actually only available in their premium subscription but I would say even their free subscription and you know their blog articles are pretty helpful anyway thank you as always for watching my videos and I'll see you guys in the next one
