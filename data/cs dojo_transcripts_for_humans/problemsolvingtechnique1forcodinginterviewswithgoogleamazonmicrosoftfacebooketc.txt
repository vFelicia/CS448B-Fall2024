With timestamps:

00:00 - in the next few videos I'm going to
00:02 - introduce you to the three
00:03 - problem-solving techniques I've
00:05 - personally used to get the recording
00:07 - interviews with companies such as Google
00:09 - and also to be a better software
00:11 - developer in general the first tip I
00:14 - want to give you is to think on paper
00:16 - when I say think on paper
00:18 - I don't literally mean when you get a
00:20 - coding interview problem take out a
00:22 - piece of paper out of your pocket or
00:23 - whatever and start writing down your
00:25 - thoughts right there this is more about
00:28 - how you think about the problem and not
00:30 - about using physical paper per se so to
00:34 - see what I mean exactly let's take a
00:36 - look at one example of this suppose
00:38 - you're given this problem in which
00:40 - you're supposed to write a function that
00:42 - takes an array of integers and finds two
00:46 - integers out of that array that multiply
00:49 - to 20 together so with this example with
00:52 - this given array you can see that 4 & 5
00:56 - here multiply to 20 together so that's
00:59 - the pair you need to find when a typical
01:03 - candidate is given this problem they
01:05 - might start writing some code right away
01:07 - to solve this problem but that's not
01:09 - necessarily the right thing to do before
01:12 - you start coding you want to make sure
01:14 - that you have the right solution in
01:16 - concept one way to do this is ask
01:19 - yourself how would I solve this problem
01:21 - on paper so imagine writing down this
01:24 - array on a piece of paper then you're
01:28 - trying to find a pair of numbers that
01:29 - add up to that multiply to 20 in this
01:33 - array again I don't mean that you need
01:35 - to write this down on a piece of paper
01:37 - literally but I think this is a good way
01:39 - to think about this problem without
01:41 - going into too much implementation
01:43 - detail at the beginning then you might
01:45 - say for example well I can look at each
01:47 - item and ask myself for example for two
01:51 - at the top is there number 10 in this
01:54 - array so check these numbers one by one
01:57 - and check if any of them is 10 and the
02:01 - answer is no so let's go to the next
02:03 - number look at number four here and ask
02:06 - myself is there number five here because
02:09 - four and five would multiply to 20
02:12 - together and then week
02:13 - check these numbers now and once we get
02:17 - to five we'll just return this pair of
02:19 - numbers four and five and we're done so
02:22 - this is one potential solution to this
02:24 - problem and this way you can explain it
02:26 - without using any computer science and
02:28 - this is how you can come up with a
02:31 - solution without going into too much
02:33 - implementation detail you might also ask
02:36 - yourself what if you had an array which
02:38 - is much longer than this one you might
02:42 - have for example
02:43 - 1,000 items in this array then the
02:46 - previous solution of checking every
02:48 - potential pair of numbers to see if they
02:52 - multiply to twenty would be a lot of
02:54 - work so ask yourself again how would I
02:57 - solve this problem on paper you can
03:00 - imagine a very long piece of paper with
03:02 - a thousand numbers what I would do for
03:05 - this problem is I would write down each
03:07 - number I see
03:09 - by going to these numbers one by one on
03:13 - a separate piece of paper so when we see
03:17 - two right down to right here and when we
03:20 - see four right down four and so on and
03:23 - whenever we see a new number for example
03:25 - five right here
03:26 - I would ask myself what's the number
03:29 - that would multiply to 20 with five the
03:32 - answer is of course four so we can
03:35 - instead of going through this whole
03:37 - array we can just check this separate
03:39 - piece of paper and ask myself is there
03:42 - four already or have we already seen the
03:45 - number four the answer is yes so we can
03:48 - just return four and five from this
03:51 - function and we're done this way with
03:54 - this solution we don't have to check
03:56 - every single potential pair in this
04:00 - array to see if they multiply to twenty
04:03 - once you have this basic strategy down
04:05 - which you can use on paper you can then
04:08 - translate this into data structures and
04:11 - algorithms using your computer science
04:14 - knowledge with this solution a good data
04:17 - structure to use to keep track of each
04:19 - number we've seen might be a hash table
04:22 - or dictionary for example to recap the
04:26 - idea of this
04:27 - Josie is to think about how to solve the
04:29 - given problem in concept first or on
04:32 - paper first then think about how to
04:35 - translate this into data structures and
04:37 - algorithms using your computer science
04:40 - knowledge I would even say you shouldn't
04:42 - start coding until you go through this
04:45 - whole process first unless the problem
04:47 - is so easy that you're fairly certain
04:50 - that your solution is correct and
04:52 - optimal right away now this is actually
04:55 - something I used for my daily work as a
04:58 - software developer at Google to whenever
05:01 - I had a complicated problem to solve
05:03 - I would first take out a piece of paper
05:05 - and think about it on paper this time
05:07 - literally on a physical piece of paper
05:10 - and then I would consider multiple
05:13 - solutions and make sure that I knew how
05:15 - to solve the problem first before I
05:17 - actually put it in code so this is a
05:20 - technique that's not only useful for
05:22 - coding interviews but also to be a
05:25 - better software developer in general -
05:27 - ok guys thanks so much for watching this
05:30 - video this video was actually an excerpt
05:33 - from my brand new course on udemy 11
05:36 - essential coding interview questions in
05:38 - which I cover 11 of the most essential
05:40 - coding interview questions to master for
05:42 - your next coding interview if you're
05:44 - interested in taking this course there
05:46 - is a link with a discount code glow in
05:48 - the description alright I'll see you
05:50 - soon

Cleaned transcript:

in the next few videos I'm going to introduce you to the three problemsolving techniques I've personally used to get the recording interviews with companies such as Google and also to be a better software developer in general the first tip I want to give you is to think on paper when I say think on paper I don't literally mean when you get a coding interview problem take out a piece of paper out of your pocket or whatever and start writing down your thoughts right there this is more about how you think about the problem and not about using physical paper per se so to see what I mean exactly let's take a look at one example of this suppose you're given this problem in which you're supposed to write a function that takes an array of integers and finds two integers out of that array that multiply to 20 together so with this example with this given array you can see that 4 & 5 here multiply to 20 together so that's the pair you need to find when a typical candidate is given this problem they might start writing some code right away to solve this problem but that's not necessarily the right thing to do before you start coding you want to make sure that you have the right solution in concept one way to do this is ask yourself how would I solve this problem on paper so imagine writing down this array on a piece of paper then you're trying to find a pair of numbers that add up to that multiply to 20 in this array again I don't mean that you need to write this down on a piece of paper literally but I think this is a good way to think about this problem without going into too much implementation detail at the beginning then you might say for example well I can look at each item and ask myself for example for two at the top is there number 10 in this array so check these numbers one by one and check if any of them is 10 and the answer is no so let's go to the next number look at number four here and ask myself is there number five here because four and five would multiply to 20 together and then week check these numbers now and once we get to five we'll just return this pair of numbers four and five and we're done so this is one potential solution to this problem and this way you can explain it without using any computer science and this is how you can come up with a solution without going into too much implementation detail you might also ask yourself what if you had an array which is much longer than this one you might have for example 1,000 items in this array then the previous solution of checking every potential pair of numbers to see if they multiply to twenty would be a lot of work so ask yourself again how would I solve this problem on paper you can imagine a very long piece of paper with a thousand numbers what I would do for this problem is I would write down each number I see by going to these numbers one by one on a separate piece of paper so when we see two right down to right here and when we see four right down four and so on and whenever we see a new number for example five right here I would ask myself what's the number that would multiply to 20 with five the answer is of course four so we can instead of going through this whole array we can just check this separate piece of paper and ask myself is there four already or have we already seen the number four the answer is yes so we can just return four and five from this function and we're done this way with this solution we don't have to check every single potential pair in this array to see if they multiply to twenty once you have this basic strategy down which you can use on paper you can then translate this into data structures and algorithms using your computer science knowledge with this solution a good data structure to use to keep track of each number we've seen might be a hash table or dictionary for example to recap the idea of this Josie is to think about how to solve the given problem in concept first or on paper first then think about how to translate this into data structures and algorithms using your computer science knowledge I would even say you shouldn't start coding until you go through this whole process first unless the problem is so easy that you're fairly certain that your solution is correct and optimal right away now this is actually something I used for my daily work as a software developer at Google to whenever I had a complicated problem to solve I would first take out a piece of paper and think about it on paper this time literally on a physical piece of paper and then I would consider multiple solutions and make sure that I knew how to solve the problem first before I actually put it in code so this is a technique that's not only useful for coding interviews but also to be a better software developer in general ok guys thanks so much for watching this video this video was actually an excerpt from my brand new course on udemy 11 essential coding interview questions in which I cover 11 of the most essential coding interview questions to master for your next coding interview if you're interested in taking this course there is a link with a discount code glow in the description alright I'll see you soon
