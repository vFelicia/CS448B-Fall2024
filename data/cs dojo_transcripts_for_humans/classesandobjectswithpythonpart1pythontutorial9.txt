With timestamps:

00:00 - hey guys in this video I'm gonna give
00:02 - you a quick introduction on how to use
00:04 - classes and objects in Python I'm going
00:07 - to assume that you're already familiar
00:08 - with these concepts so if you're new to
00:11 - you know the concepts of classes and
00:13 - objects
00:14 - I'd recommend my introduction to classes
00:16 - and objects video first okay so here's
00:19 - the class we want to create it's gonna
00:21 - be called robot and it will have three
00:24 - attributes or three instance variables
00:27 - name color and weight those are the name
00:30 - of the robot the color of the robot and
00:33 - weight of the robot and then it's gonna
00:35 - have one function into yourself where
00:38 - when you run this function it'll just
00:41 - print out my name is the name whatever
00:44 - the name is and from this class we want
00:47 - to create these objects the first object
00:50 - will look like this it's gonna have the
00:53 - name Tom the color is gonna be read in a
00:56 - string and the weight will be 30 to show
00:59 - that it's 30 pounds it's gonna be an
01:01 - integer and we're gonna put this object
01:04 - in a variable called r1 and the second
01:07 - object we're gonna create will look like
01:10 - this this robot will have the name Jerry
01:13 - the color will be blue and weight will
01:16 - be 40 and then we're gonna put this
01:18 - object in a variable called r2 so let's
01:22 - now see how we can create this class
01:24 - called robot and these two objects out
01:26 - of that class in Python the first thing
01:29 - we need to do here is of course we need
01:31 - to create a class for that you can just
01:34 - write class robot :
01:36 - and notice here that our here is
01:39 - capitalized and then for spaces after
01:41 - that and we're gonna implement the
01:44 - function we saw earlier in to do itself
01:46 - for that you can just write def
01:48 - introduce underscore self parentheses :
01:53 - and four more spaces after that and then
01:56 - print double quotes my name is plus self
02:01 - dot name and this keyword here self is
02:05 - sort of like this in Java and it will
02:09 - refer to whatever object we're running
02:11 - this function on so for example
02:14 - if we run this function engine yourself
02:15 - on an object whose name is Tom this is
02:19 - gonna print out my name is Tom because
02:22 - self will refer to that object now this
02:26 - function you know if you see it looks
02:28 - like a regular Python function we're
02:30 - defining a function called introduce
02:32 - self and then below that we have some
02:34 - implementation but actually when this
02:37 - function is within a class when this
02:39 - function is a method of a class you need
02:42 - to add an additional argument and that's
02:45 - going to be call itself so this self is
02:47 - exactly the same as this self right here
02:49 - so in Python basically you need to add
02:52 - this additional argument called self to
02:55 - every method you want to add to this
02:56 - class and once you run this block of
02:59 - code this class is gonna be created and
03:01 - you might say what about the attributes
03:04 - like the name weight and color we're
03:07 - gonna worry about that later so let's
03:08 - run this block of code for now now that
03:11 - we have defined this class we'll be able
03:13 - to create an object out of this class to
03:15 - do that you can just write our 1 equals
03:19 - robot parentheses again note that the
03:23 - word robot is capitalized here and this
03:25 - simply says create a new object with the
03:28 - class robot and here you're using the
03:31 - default Python constructor for this
03:34 - class robot and to set the attributes
03:37 - you can just write or one dot name
03:39 - equals Tom I want the color equals red
03:44 - and r1 dot weight equals 3 and when you
03:49 - run this so a new object has been
03:51 - created it's assigned to r1 and then its
03:54 - attributes have been set and then if you
03:57 - want to run this function into yourself
03:59 - on this object you can just right or one
04:02 - dot introduce self parentheses and you
04:06 - don't need to pass in any arguments here
04:08 - and when you run this cell what's gonna
04:11 - happen is it's gonna go into this part
04:14 - of the code and then self will refer to
04:17 - r1 and so this part of the code will
04:19 - look like print my name is r1 dot name
04:23 - and r1 dot name is of course Tom here so
04:26 - it should print
04:28 - my name is Tom let's see if it works and
04:31 - I did we see my name is Tom right here
04:33 - and just like that you can create
04:35 - another object - let's go back into this
04:38 - cell let's write our two eCos robots
04:42 - this will create a new robot object and
04:45 - then let's set its attributes to so our
04:49 - two names echoes Jerry our two the color
04:53 - equals blue and our 2.8 equals 30 let's
04:58 - actually set the weight of our two to 40
05:00 - like we saw earlier and once you run
05:03 - this cell you'll have an object in r1
05:06 - and another object in r2 with different
05:09 - sets of attributes of course and then at
05:12 - this point you should be able to run or
05:14 - what introduce self and our to the
05:17 - introduced self so the first line should
05:20 - print my name is Tom just like we saw
05:22 - earlier and then the second line should
05:25 - print my name is Jerry instead so let's
05:28 - see if we can get that and that's
05:31 - exactly what we see okay going back a
05:33 - little bit when you see this block of
05:36 - code that we use to create these two
05:38 - objects you might say well that's not
05:41 - great because here we're writing our
05:44 - want name equals Tom but if we may spell
05:48 - the word name for example if we wrote
05:51 - our one dot name e equals Tom it's gonna
05:55 - stop working because if you look at this
05:57 - function in particular in this class
05:59 - we're writing here print my name is self
06:03 - dot name and this piece of code
06:06 - basically depends on us writing the
06:09 - attributes name name correctly for it to
06:12 - work what I mean by that is for example
06:15 - you know if you misspelled the word name
06:17 - by writing R 1 dot name equals Tom the
06:22 - attribute called name does not exist in
06:24 - this object anymore so we can actually
06:27 - see what's gonna happen if we try that
06:29 - so let's run this cell again and this is
06:32 - not gonna give us any error because when
06:34 - you write R 1 dot name equals Tom the
06:37 - attribute called name E is just defined
06:39 - and then the value Tom is
06:41 - set for that but when you run this block
06:44 - of code or Wanda introduce self let's
06:47 - comment out the second line and let's
06:49 - focus on the first line when you run
06:51 - this part you'll say attribute error and
06:54 - it says Robert as an object has no
06:57 - attribute name and that's because it has
07:00 - the attribute name e but it doesn't have
07:03 - the attribute name so this is probably
07:05 - not the best way to deal with different
07:07 - attributes we have let's see how we
07:09 - might be able to fix that and the way
07:11 - you can fix it is basically by using a
07:14 - constructor and in Python you can create
07:17 - a custom constructor with this keyword
07:20 - underscore underscore in it and ask
07:22 - underscore underscore so there's the
07:25 - word in it and it's surrounded by pairs
07:28 - two pairs of underscores and then
07:30 - parentheses and let's have this function
07:33 - take three arguments give a name given
07:37 - color and given weight so these are the
07:42 - name color and weight we want to set for
07:44 - this particular object that we are
07:46 - trying to create and then we can write
07:48 - here self dot name equals give a name
07:51 - self dot color equals given color and
07:55 - self dot weight equals given weight and
08:00 - this block of code of course says set
08:04 - this object that we are just creating
08:07 - set that object's name to give a name
08:10 - and set that object's color to given
08:12 - color and set the object's weight to
08:15 - given weight and earlier I said you need
08:18 - to add this self keyword this additional
08:22 - argument to every function we define in
08:25 - this class and the constructor is no
08:28 - exception so you actually need to write
08:30 - self as the first argument and then the
08:34 - arguments that you want to add in and
08:37 - actually just like many other languages
08:39 - a common practice here is to name these
08:42 - arguments exactly the same as the
08:45 - attributes that we want to set you don't
08:48 - have to do it but that's just a style
08:50 - thing so let's just do that
08:52 - let's change give a name to name
08:54 - and then given color to color and given
08:57 - weight to wait and once you run this
09:02 - block of code this class is going to be
09:05 - refreshed with a new constructor once we
09:08 - have a custom constructor in our class
09:11 - the default constructor that we used
09:13 - will stop working so let's just comment
09:16 - out this block of code and then let's
09:18 - rewrite it using our new constructor for
09:22 - that you can just write R 1 equals
09:24 - robots parentheses Tom comma red comma
09:30 - 30 let's capitalize Tom here and then R
09:34 - 2 equals robot Jerry comma blue comma 40
09:40 - and these two pieces of code do exactly
09:43 - pretty much the same thing as what we
09:46 - saw earlier but as you can see this is
09:49 - much cleaner because you don't need to
09:51 - specify the attribute names manually
09:54 - every time and just to reiterate just to
09:57 - sort of clarify this line R 1 equals
10:00 - robot Tom red 30 will create a new robot
10:04 - object and then it'll set Tom as its
10:08 - name because Tom will go in here as the
10:11 - name argument and then LLL go in here
10:14 - self dot name and self again will refer
10:16 - to the object that we're creating so
10:18 - it's sort of like saying R 1 dot name
10:21 - equals name or one dot color equals
10:24 - color just like we did earlier here and
10:26 - of course it's the same thing with our
10:28 - two okay and to make sure we don't have
10:31 - anything left from the previous code we
10:34 - were using let's go to kernel and click
10:38 - restart and clear output this is gonna
10:41 - clear out every variable we define
10:44 - earlier and then let's load this class
10:47 - again and let's run this cell and at
10:50 - this point we should have r1 and r2
10:53 - objects defined so we should be able to
10:55 - run our one dot engine yourself and our
10:58 - tada introduce self and that should
11:01 - print exactly what we saw earlier my
11:04 - name is Tom and my name is Jerry so
11:06 - let's see if that works
11:07 - and it does all right you'll be able to
11:10 - find links to the sample code I used in
11:13 - this video in the description below and
11:15 - if anything was unclear in this video
11:18 - please let me know in a comment below as
11:19 - well because you know I might be able to
11:21 - adjust that in the next video and in my
11:24 - next Python tutorial video I'm planning
11:26 - to cover how multiple classes and
11:29 - objects can interact with each other in
11:31 - Python so look out for that as well and
11:33 - I'll see you in the next video

Cleaned transcript:

hey guys in this video I'm gonna give you a quick introduction on how to use classes and objects in Python I'm going to assume that you're already familiar with these concepts so if you're new to you know the concepts of classes and objects I'd recommend my introduction to classes and objects video first okay so here's the class we want to create it's gonna be called robot and it will have three attributes or three instance variables name color and weight those are the name of the robot the color of the robot and weight of the robot and then it's gonna have one function into yourself where when you run this function it'll just print out my name is the name whatever the name is and from this class we want to create these objects the first object will look like this it's gonna have the name Tom the color is gonna be read in a string and the weight will be 30 to show that it's 30 pounds it's gonna be an integer and we're gonna put this object in a variable called r1 and the second object we're gonna create will look like this this robot will have the name Jerry the color will be blue and weight will be 40 and then we're gonna put this object in a variable called r2 so let's now see how we can create this class called robot and these two objects out of that class in Python the first thing we need to do here is of course we need to create a class for that you can just write class robot and notice here that our here is capitalized and then for spaces after that and we're gonna implement the function we saw earlier in to do itself for that you can just write def introduce underscore self parentheses and four more spaces after that and then print double quotes my name is plus self dot name and this keyword here self is sort of like this in Java and it will refer to whatever object we're running this function on so for example if we run this function engine yourself on an object whose name is Tom this is gonna print out my name is Tom because self will refer to that object now this function you know if you see it looks like a regular Python function we're defining a function called introduce self and then below that we have some implementation but actually when this function is within a class when this function is a method of a class you need to add an additional argument and that's going to be call itself so this self is exactly the same as this self right here so in Python basically you need to add this additional argument called self to every method you want to add to this class and once you run this block of code this class is gonna be created and you might say what about the attributes like the name weight and color we're gonna worry about that later so let's run this block of code for now now that we have defined this class we'll be able to create an object out of this class to do that you can just write our 1 equals robot parentheses again note that the word robot is capitalized here and this simply says create a new object with the class robot and here you're using the default Python constructor for this class robot and to set the attributes you can just write or one dot name equals Tom I want the color equals red and r1 dot weight equals 3 and when you run this so a new object has been created it's assigned to r1 and then its attributes have been set and then if you want to run this function into yourself on this object you can just right or one dot introduce self parentheses and you don't need to pass in any arguments here and when you run this cell what's gonna happen is it's gonna go into this part of the code and then self will refer to r1 and so this part of the code will look like print my name is r1 dot name and r1 dot name is of course Tom here so it should print my name is Tom let's see if it works and I did we see my name is Tom right here and just like that you can create another object let's go back into this cell let's write our two eCos robots this will create a new robot object and then let's set its attributes to so our two names echoes Jerry our two the color equals blue and our 2.8 equals 30 let's actually set the weight of our two to 40 like we saw earlier and once you run this cell you'll have an object in r1 and another object in r2 with different sets of attributes of course and then at this point you should be able to run or what introduce self and our to the introduced self so the first line should print my name is Tom just like we saw earlier and then the second line should print my name is Jerry instead so let's see if we can get that and that's exactly what we see okay going back a little bit when you see this block of code that we use to create these two objects you might say well that's not great because here we're writing our want name equals Tom but if we may spell the word name for example if we wrote our one dot name e equals Tom it's gonna stop working because if you look at this function in particular in this class we're writing here print my name is self dot name and this piece of code basically depends on us writing the attributes name name correctly for it to work what I mean by that is for example you know if you misspelled the word name by writing R 1 dot name equals Tom the attribute called name does not exist in this object anymore so we can actually see what's gonna happen if we try that so let's run this cell again and this is not gonna give us any error because when you write R 1 dot name equals Tom the attribute called name E is just defined and then the value Tom is set for that but when you run this block of code or Wanda introduce self let's comment out the second line and let's focus on the first line when you run this part you'll say attribute error and it says Robert as an object has no attribute name and that's because it has the attribute name e but it doesn't have the attribute name so this is probably not the best way to deal with different attributes we have let's see how we might be able to fix that and the way you can fix it is basically by using a constructor and in Python you can create a custom constructor with this keyword underscore underscore in it and ask underscore underscore so there's the word in it and it's surrounded by pairs two pairs of underscores and then parentheses and let's have this function take three arguments give a name given color and given weight so these are the name color and weight we want to set for this particular object that we are trying to create and then we can write here self dot name equals give a name self dot color equals given color and self dot weight equals given weight and this block of code of course says set this object that we are just creating set that object's name to give a name and set that object's color to given color and set the object's weight to given weight and earlier I said you need to add this self keyword this additional argument to every function we define in this class and the constructor is no exception so you actually need to write self as the first argument and then the arguments that you want to add in and actually just like many other languages a common practice here is to name these arguments exactly the same as the attributes that we want to set you don't have to do it but that's just a style thing so let's just do that let's change give a name to name and then given color to color and given weight to wait and once you run this block of code this class is going to be refreshed with a new constructor once we have a custom constructor in our class the default constructor that we used will stop working so let's just comment out this block of code and then let's rewrite it using our new constructor for that you can just write R 1 equals robots parentheses Tom comma red comma 30 let's capitalize Tom here and then R 2 equals robot Jerry comma blue comma 40 and these two pieces of code do exactly pretty much the same thing as what we saw earlier but as you can see this is much cleaner because you don't need to specify the attribute names manually every time and just to reiterate just to sort of clarify this line R 1 equals robot Tom red 30 will create a new robot object and then it'll set Tom as its name because Tom will go in here as the name argument and then LLL go in here self dot name and self again will refer to the object that we're creating so it's sort of like saying R 1 dot name equals name or one dot color equals color just like we did earlier here and of course it's the same thing with our two okay and to make sure we don't have anything left from the previous code we were using let's go to kernel and click restart and clear output this is gonna clear out every variable we define earlier and then let's load this class again and let's run this cell and at this point we should have r1 and r2 objects defined so we should be able to run our one dot engine yourself and our tada introduce self and that should print exactly what we saw earlier my name is Tom and my name is Jerry so let's see if that works and it does all right you'll be able to find links to the sample code I used in this video in the description below and if anything was unclear in this video please let me know in a comment below as well because you know I might be able to adjust that in the next video and in my next Python tutorial video I'm planning to cover how multiple classes and objects can interact with each other in Python so look out for that as well and I'll see you in the next video
