With timestamps:

00:00 - hey guys here's my dynamic programming
00:02 - tutorial with the zero-one knapsack
00:04 - problem as our example let me explain
00:08 - what the knapsack problem is first we
00:11 - have a certain number of items let's say
00:15 - we have n items or five in this case
00:18 - five items and each item has an
00:21 - Associated weight and value with it so
00:25 - the first item weighs one kilogram and
00:27 - is five dollars and the second item ways
00:30 - to kilograms and it's worth three
00:33 - dollars and the problem is we're trying
00:36 - to decide which items to put in our
00:39 - knapsack which can only carry a certain
00:43 - amount of weight let's say 10 kilograms
00:45 - we can only carry ten columns and we're
00:48 - trying to maximize the total the total
00:50 - amount of value that we carry with those
00:53 - items so for each item we're going to
00:56 - decide do we put it in the knapsack or
00:58 - outside the knapsack so let's just say
01:01 - yes or no or we could write it as one if
01:05 - it's in knapsack or no if it's not in
01:09 - the knapsack and our first class it
01:12 - looks very hard because if we make this
01:14 - decision for every item the total number
01:17 - of solutions the total number of
01:18 - potential solutions is gonna be two to
01:21 - the power of n or two to the power of
01:23 - five in this case but actually we can do
01:27 - much better than that with dynamic
01:28 - programming and you see how you can do
01:31 - it in a second here's a common procedure
01:33 - in dynamic programming we first come up
01:36 - with a recursive solution and then we
01:39 - memorize or store some of the in
01:41 - terminate results to make it run faster
01:43 - the third optional step is coming up
01:47 - with a bottom-up approach but I'm not
01:50 - gonna do that just for simplicity sake
01:52 - for this particular case so here's our
01:54 - naive recursive solution the idea is
01:57 - we're gonna start with the last item and
01:59 - we're gonna move down the list and we
02:02 - ask ourselves for where the pointer is
02:04 - are we gonna put this item in the
02:07 - knapsack or not so for the first
02:10 - settlement of course that's yes or no
02:12 - and we'll also keep
02:14 - talk of how many items we have left to
02:16 - consider or you can see as the position
02:20 - of the pointer as well so it starts with
02:22 - five and we'll keep track of the amount
02:26 - of capacity we have left that starts
02:30 - with ten in our example 10 kilograms and
02:32 - the value we have so far
02:36 - starts with zero and if you said no for
02:39 - the first item or the last item this
02:42 - item then n becomes 4 we're essentially
02:48 - moving this pointer to the left so that
02:52 - becomes 4 and C capacity doesn't change
02:56 - so that's 10 and the value doesn't
02:59 - change so that's still 0 and if we said
03:03 - yes and becomes 4 we we have 4 items
03:08 - left to consider the capacity becomes 10
03:11 - minus 5 equals 5 we can still carry 5
03:16 - kilograms and the value becomes 0 plus 2
03:21 - equals 2 and for each decision we ask
03:27 - ourselves for the fourth item are we
03:30 - going to put this in the knapsack or not
03:34 - so that's yes or no again so we keep
03:38 - repeating this process until we get to
03:41 - the last item this one so that's the
03:45 - idea behind our recursive solution but
03:48 - it works slightly differently in the
03:49 - code so let's see how that works so
03:52 - here's how our recursive solution works
03:54 - in our code we define this function KS
03:58 - knapsack that takes two variables the
04:00 - first variable is the position of the
04:03 - pointer that we're looking at or the
04:04 - number of items we have left to consider
04:06 - and the second variable is the amount of
04:09 - capacity we have left so the first call
04:12 - for this example is going to be cast of
04:15 - 5 because we have 5 items left to
04:18 - consider and 10 because we have 10
04:21 - kilograms in our capacity and here's our
04:24 - base case if N equals 0
04:27 - means we have no items left to consider
04:29 - and if C equals zero we don't have any
04:32 - capacity so we just return zero and from
04:36 - this function we're returning the
04:38 - optimal value that we can achieve with
04:40 - this pair of variables instead of the
04:42 - list of arguments itself so if you want
04:45 - to do that you'll need to change the
04:46 - code a little bit now if the current
04:48 - items weight is larger than our current
04:52 - capacity then we can't put it there so
04:54 - we just move the pointer to the left and
04:57 - we call this function again and if
05:01 - that's not the case
05:03 - we'll try both put in the item in the
05:05 - knapsack and not putting it there so if
05:08 - we don't put the item in your knapsack
05:09 - then we just call the same function with
05:12 - the same variables again with the
05:15 - pointer moved to the left and if we put
05:18 - it there
05:18 - will count in the current items value
05:22 - and we'll add it to this recursive call
05:25 - where the pointer is moved to the left
05:28 - and the capacity left is reduced by the
05:33 - current items weight and we'll just take
05:35 - the maximum one of those to get the
05:38 - optimal value by the way our values are
05:41 - stored in this array that starts with a
05:45 - dummy variable and our actual values so
05:49 - that's 5 3 5 3 2 and the reason is
05:54 - because when we have say the second
05:56 - element we can just call V of 2 and we
06:01 - get the right element the right value
06:05 - and it's the same thing with the weights
06:07 - so it also starts with a dummy variable
06:11 - and then actual weights so this is how
06:16 - our solution works but it's very very
06:18 - slow and let's see why that is if you
06:21 - think about the worst case scenario we
06:23 - try for the last settlement
06:25 - we try yes or no and then for the second
06:29 - last element we'll try puttin that item
06:32 - in there and not putting it there and so
06:35 - on
06:36 - so we're basically trying every possible
06:38 - case so the time
06:41 - plexy for this algorithm will be
06:43 - exponential which is very bad
06:46 - dynamic programming says we can do
06:49 - better than that by memorizing or
06:51 - storing some intermediate results or by
06:54 - noticing that there are some duplicates
06:56 - in our computation so here's how we can
07:00 - do it we have here a function that's
07:04 - almost exactly the same as what we had
07:06 - earlier except for these three lines and
07:10 - the first thing to notice here with the
07:13 - previous function we had is that there
07:15 - are only n times C possible variable
07:19 - pairs that we could have so in the
07:22 - example we had earlier this would be
07:24 - just 10 times 5 times 10 which is 50
07:30 - possible variable pairs and what we were
07:33 - doing here is we are storing the results
07:35 - of this function in a two-dimensional
07:38 - array with the height N and with C and
07:43 - we initialize it to undefined the
07:46 - outside function and then when we call
07:48 - this function if the result is already
07:53 - stored for that particular variable pair
07:56 - then we just return that instead of
07:58 - going through the whole thing and if
08:01 - that's not the case we'll go through the
08:02 - whole thing and before we return the
08:05 - result will store it in the array so we
08:07 - can reuse it later so what's the runtime
08:11 - for this function the first thing to
08:12 - notice to find that is that we reach
08:15 - this line only at most n times C times
08:19 - so we go through this whole thing at
08:21 - most n times C times and every time we
08:25 - go through this function the maximum
08:27 - number of recursive calls we make is
08:29 - just twice in this case this one on this
08:32 - one so the maximum number of times we
08:35 - call this function itself is about two
08:38 - times and C or just an order of NC and
08:41 - the time it takes to execute each car or
08:46 - time per call is just a constant time
08:52 - so that total amount of time it takes to
08:55 - execute this whole thing is just an
08:58 - order of NC which is much much better
09:01 - than the exponential time of complexity
09:03 - we had earlier all right hopefully you
09:06 - liked the video you might also like my
09:09 - other video about dynamic programming
09:11 - with maximum subsequence as our example
09:14 - and if you want to watch more videos
09:15 - like this one you can subscribe right
09:18 - here and see you soon

Cleaned transcript:

hey guys here's my dynamic programming tutorial with the zeroone knapsack problem as our example let me explain what the knapsack problem is first we have a certain number of items let's say we have n items or five in this case five items and each item has an Associated weight and value with it so the first item weighs one kilogram and is five dollars and the second item ways to kilograms and it's worth three dollars and the problem is we're trying to decide which items to put in our knapsack which can only carry a certain amount of weight let's say 10 kilograms we can only carry ten columns and we're trying to maximize the total the total amount of value that we carry with those items so for each item we're going to decide do we put it in the knapsack or outside the knapsack so let's just say yes or no or we could write it as one if it's in knapsack or no if it's not in the knapsack and our first class it looks very hard because if we make this decision for every item the total number of solutions the total number of potential solutions is gonna be two to the power of n or two to the power of five in this case but actually we can do much better than that with dynamic programming and you see how you can do it in a second here's a common procedure in dynamic programming we first come up with a recursive solution and then we memorize or store some of the in terminate results to make it run faster the third optional step is coming up with a bottomup approach but I'm not gonna do that just for simplicity sake for this particular case so here's our naive recursive solution the idea is we're gonna start with the last item and we're gonna move down the list and we ask ourselves for where the pointer is are we gonna put this item in the knapsack or not so for the first settlement of course that's yes or no and we'll also keep talk of how many items we have left to consider or you can see as the position of the pointer as well so it starts with five and we'll keep track of the amount of capacity we have left that starts with ten in our example 10 kilograms and the value we have so far starts with zero and if you said no for the first item or the last item this item then n becomes 4 we're essentially moving this pointer to the left so that becomes 4 and C capacity doesn't change so that's 10 and the value doesn't change so that's still 0 and if we said yes and becomes 4 we we have 4 items left to consider the capacity becomes 10 minus 5 equals 5 we can still carry 5 kilograms and the value becomes 0 plus 2 equals 2 and for each decision we ask ourselves for the fourth item are we going to put this in the knapsack or not so that's yes or no again so we keep repeating this process until we get to the last item this one so that's the idea behind our recursive solution but it works slightly differently in the code so let's see how that works so here's how our recursive solution works in our code we define this function KS knapsack that takes two variables the first variable is the position of the pointer that we're looking at or the number of items we have left to consider and the second variable is the amount of capacity we have left so the first call for this example is going to be cast of 5 because we have 5 items left to consider and 10 because we have 10 kilograms in our capacity and here's our base case if N equals 0 means we have no items left to consider and if C equals zero we don't have any capacity so we just return zero and from this function we're returning the optimal value that we can achieve with this pair of variables instead of the list of arguments itself so if you want to do that you'll need to change the code a little bit now if the current items weight is larger than our current capacity then we can't put it there so we just move the pointer to the left and we call this function again and if that's not the case we'll try both put in the item in the knapsack and not putting it there so if we don't put the item in your knapsack then we just call the same function with the same variables again with the pointer moved to the left and if we put it there will count in the current items value and we'll add it to this recursive call where the pointer is moved to the left and the capacity left is reduced by the current items weight and we'll just take the maximum one of those to get the optimal value by the way our values are stored in this array that starts with a dummy variable and our actual values so that's 5 3 5 3 2 and the reason is because when we have say the second element we can just call V of 2 and we get the right element the right value and it's the same thing with the weights so it also starts with a dummy variable and then actual weights so this is how our solution works but it's very very slow and let's see why that is if you think about the worst case scenario we try for the last settlement we try yes or no and then for the second last element we'll try puttin that item in there and not putting it there and so on so we're basically trying every possible case so the time plexy for this algorithm will be exponential which is very bad dynamic programming says we can do better than that by memorizing or storing some intermediate results or by noticing that there are some duplicates in our computation so here's how we can do it we have here a function that's almost exactly the same as what we had earlier except for these three lines and the first thing to notice here with the previous function we had is that there are only n times C possible variable pairs that we could have so in the example we had earlier this would be just 10 times 5 times 10 which is 50 possible variable pairs and what we were doing here is we are storing the results of this function in a twodimensional array with the height N and with C and we initialize it to undefined the outside function and then when we call this function if the result is already stored for that particular variable pair then we just return that instead of going through the whole thing and if that's not the case we'll go through the whole thing and before we return the result will store it in the array so we can reuse it later so what's the runtime for this function the first thing to notice to find that is that we reach this line only at most n times C times so we go through this whole thing at most n times C times and every time we go through this function the maximum number of recursive calls we make is just twice in this case this one on this one so the maximum number of times we call this function itself is about two times and C or just an order of NC and the time it takes to execute each car or time per call is just a constant time so that total amount of time it takes to execute this whole thing is just an order of NC which is much much better than the exponential time of complexity we had earlier all right hopefully you liked the video you might also like my other video about dynamic programming with maximum subsequence as our example and if you want to watch more videos like this one you can subscribe right here and see you soon
