With timestamps:

00:00 - hey guys this is my introduction to
00:02 - dynamic programming with Fibonacci
00:04 - Sequence as our
00:06 - example now what's fibon sequence it's a
00:09 - sequence of numbers that start with ones
00:11 - at the beginning two ones at the
00:13 - beginning and after that we just add the
00:16 - previous two numbers to get the next
00:18 - number so 1 + 1 = 2 and 1 + 2 =
00:23 - [Music]
00:25 - 3 and 2 + 3 = 5 and so on and the
00:30 - problem here is finding the nth
00:33 - Fibonacci number so if n is six the six
00:38 - Fibonacci
00:39 - number is just
00:41 - eight the most naive approach we can
00:44 - think of for this problem is a recursive
00:46 - one so in this code I'm defining my
00:49 - function here fib and if n is equal to
00:54 - one or two we just return one which is
00:57 - base case and that corresponds to the
00:59 - first two
01:00 - elements and if that's not the case
01:03 - we're just going to return the sum of
01:05 - the previous element and the second
01:07 - previous element so this approach works
01:10 - but the thing is this is very very
01:12 - inefficient let's see why that's the
01:15 - case here's a quick analysis of the
01:17 - naive recursive approach that we just
01:19 - talked about let's just say as an
01:21 - example we are trying to find the six
01:23 - fibon number to do that in this approach
01:26 - what we do is we ask ourselves what's
01:28 - the fifth F number number and what's the
01:31 - fourth FIB not number and when we know
01:33 - what they are we add them together to
01:35 - find the sixth fibon Notch number and to
01:37 - find the fifth Fage number we need to
01:39 - find the fourth fan number the third
01:41 - Fage number and then add them together
01:44 - that's what this diagram shows and as
01:46 - you can see the problem with this
01:48 - approach is that there are a lot of
01:50 - duplicates in our computation for
01:52 - instance to find the third fiban number
01:55 - we're repeating the same process three
01:58 - times and to find the fourth fibon
02:00 - number we're repeating the same
02:02 - competion
02:03 - twice and that's why this is very slow
02:06 - and in fact the time it takes to find
02:09 - the n f number is about an order of 2 to
02:12 - the^ of N and dynamic programming says
02:16 - we can do much better than that just by
02:17 - storing all those intermediate
02:20 - results so here's one very simple
02:22 - dynamic programming
02:24 - solution in this example we're going to
02:26 - assume that n is larger than two just
02:29 - for simplic s and let's just say we're
02:32 - trying to find the six fibach number as
02:35 - our previous
02:36 - example and the first thing we do is we
02:39 - initialize an array of the same size as
02:43 - the given number and we are initializing
02:46 - it to zeros here but it doesn't matter
02:49 - if we initialize it to ones or negative
02:53 - ones and obviously the first two
02:55 - elements need to be
02:58 - one and we're going to iterate this I
03:01 - from two which corresponds to the third
03:03 - element here to n minus one which
03:07 - corresponds to the last element
03:10 - here and for each I we're going to
03:13 - populate it with the sum of the previous
03:17 - number and the second previous
03:20 - number so for the third element we get 1
03:23 - + 1 = 2 and for the fourth element we
03:27 - get 1+ 2 = 3
03:30 - and five and so
03:32 - on and at the end we're just going to
03:35 - return the last element in the array
03:37 - which is eight in this
03:39 - case this is a much better solution than
03:41 - the previous solution to find N's fibon
03:44 - number it only takes a linear time so
03:47 - it's much
03:50 - faster but you might say oh but we are
03:53 - using all this extra space and if you
03:55 - don't like that that's fine you can just
03:57 - store the last two elements instead of
03:59 - of everything and you can save some
04:01 - space that way as
04:03 - well that's it for my video If you like
04:06 - this video you might also like my video
04:08 - about the maximum subarray problem for
04:11 - which you can also use a dynamic uh
04:13 - programming solution and if you want to
04:15 - watch more videos like this one you can
04:18 - just click right here to subscribe to my
04:20 - channel and see you soon

Cleaned transcript:

hey guys this is my introduction to dynamic programming with Fibonacci Sequence as our example now what's fibon sequence it's a sequence of numbers that start with ones at the beginning two ones at the beginning and after that we just add the previous two numbers to get the next number so 1 + 1 = 2 and 1 + 2 = 3 and 2 + 3 = 5 and so on and the problem here is finding the nth Fibonacci number so if n is six the six Fibonacci number is just eight the most naive approach we can think of for this problem is a recursive one so in this code I'm defining my function here fib and if n is equal to one or two we just return one which is base case and that corresponds to the first two elements and if that's not the case we're just going to return the sum of the previous element and the second previous element so this approach works but the thing is this is very very inefficient let's see why that's the case here's a quick analysis of the naive recursive approach that we just talked about let's just say as an example we are trying to find the six fibon number to do that in this approach what we do is we ask ourselves what's the fifth F number number and what's the fourth FIB not number and when we know what they are we add them together to find the sixth fibon Notch number and to find the fifth Fage number we need to find the fourth fan number the third Fage number and then add them together that's what this diagram shows and as you can see the problem with this approach is that there are a lot of duplicates in our computation for instance to find the third fiban number we're repeating the same process three times and to find the fourth fibon number we're repeating the same competion twice and that's why this is very slow and in fact the time it takes to find the n f number is about an order of 2 to the^ of N and dynamic programming says we can do much better than that just by storing all those intermediate results so here's one very simple dynamic programming solution in this example we're going to assume that n is larger than two just for simplic s and let's just say we're trying to find the six fibach number as our previous example and the first thing we do is we initialize an array of the same size as the given number and we are initializing it to zeros here but it doesn't matter if we initialize it to ones or negative ones and obviously the first two elements need to be one and we're going to iterate this I from two which corresponds to the third element here to n minus one which corresponds to the last element here and for each I we're going to populate it with the sum of the previous number and the second previous number so for the third element we get 1 + 1 = 2 and for the fourth element we get 1+ 2 = 3 and five and so on and at the end we're just going to return the last element in the array which is eight in this case this is a much better solution than the previous solution to find N's fibon number it only takes a linear time so it's much faster but you might say oh but we are using all this extra space and if you don't like that that's fine you can just store the last two elements instead of of everything and you can save some space that way as well that's it for my video If you like this video you might also like my video about the maximum subarray problem for which you can also use a dynamic uh programming solution and if you want to watch more videos like this one you can just click right here to subscribe to my channel and see you soon
