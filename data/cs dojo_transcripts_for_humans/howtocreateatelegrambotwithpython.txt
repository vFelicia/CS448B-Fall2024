With timestamps:

00:00 - before we get into the video let me just
00:02 - quickly explain how this video came
00:03 - about so recently I started working at a
00:06 - startup called webolite and through them
00:09 - I was introduced to Jacob from Clarity
00:11 - quarters and he proposed that he makes a
00:15 - tutorial video right here on CS dojo and
00:18 - when I asked my Twitter followers if
00:20 - it's something they want to see they
00:22 - basically said yes and that's why I
00:24 - decided to post it right here so let's
00:27 - just get started
00:28 - one thing that I find very useful about
00:30 - Python scripts is having some type of a
00:32 - script that can send you an alert or you
00:34 - can ping for information back now I've
00:36 - done this in videos with an SMS alert
00:38 - and different things like that but it
00:40 - either costs something or there's
00:42 - workarounds that are kind of country
00:43 - based that doesn't work for all the
00:45 - viewers so what we're going to do today
00:46 - is set up a telegram bot that does
00:48 - something similar in just a couple lines
00:50 - of python so if you don't have a
00:53 - telegram account you want to go ahead
00:54 - and sign up for one and you'll come to a
00:56 - kind of starting screen like this it's
00:58 - free so go ahead and grab it now we need
01:00 - to get an API key to work with telegram
01:02 - so we're going to search for bot father
01:04 - bot fathers telegram's official bot for
01:07 - handing out API keys so even though
01:09 - we're going to create our own custom bot
01:11 - we're going to get an API key from
01:13 - botfather you can see it'll show up here
01:16 - go ahead and click on that it says some
01:18 - things that this bot can do we're going
01:19 - to go ahead and hit start and you can
01:21 - see here the different things that that
01:24 - we can ask for here and there is a
01:28 - I think it's new but we'll just try it
01:30 - so you're gonna do Slash new bot
01:33 - and then it says what do you want to
01:34 - call it so you can pick whatever name
01:35 - you want this doesn't have to be unique
01:37 - so ours is going to be
01:39 - tutorial bot
01:42 - now this next one does have to be unique
01:44 - so it's going to say if the bot already
01:46 - exists and it has to end with bot so we
01:48 - can do our something like Clarity
01:52 - tutorial underscore bot and you got to
01:55 - remember it because we gotta find it
01:56 - later so
01:58 - you can see that that worked it was
02:00 - unique if it wasn't unique it's going to
02:02 - say that that bot already exists try and
02:03 - create another one and you can just pick
02:05 - a different bot name here so you can see
02:07 - now we have this HTTP API access token
02:11 - now you're gonna have to get your own so
02:13 - don't copy mine here
02:14 - and we are going to use that so you're
02:17 - going to go ahead and select that entire
02:20 - line here all the way over and then we
02:23 - can go ahead and minimize this
02:25 - now for our program here we're going to
02:29 - do it I'm gonna do it in replit for a
02:31 - couple of reasons one you can duplicate
02:33 - my code fully and run it in the exact
02:35 - same environment that I did
02:37 - you can also run this locally or however
02:39 - you want uh replit offers some paid
02:42 - packages to run the spot 24 7 and
02:44 - different things like that there's also
02:45 - some workarounds to run it 24 7 for free
02:48 - so that's that's the route we're gonna
02:50 - go here so you can set this up locally
02:52 - and follow the exact same steps I'm just
02:55 - going to do it in wrap lit there'll be a
02:57 - link in the description if you want to
02:58 - copy my code so we're going to go ahead
02:59 - and do create a new replit it's in
03:02 - Python obviously
03:03 - we're going to do telegram bot
03:07 - and then we can go ahead and add in
03:08 - we're going to add in one package that's
03:10 - going to help us work with that API so
03:11 - what we're going to do here is we're
03:13 - going to find our package so I clicked
03:15 - on this button there's a couple here
03:17 - options here for different apis that you
03:19 - can use the one I chose to use that
03:21 - worked really nicely with replit or
03:24 - whatever environment you're going to
03:26 - work with is pi telegram bot API and you
03:31 - can see it's in version 3.77 so in the
03:34 - future if this doesn't quite work you
03:35 - want to make sure you get the same
03:36 - version as me kind of hug that version
03:38 - but also make sure when you're searching
03:40 - for this package that you're not getting
03:43 - one of these others that aren't the
03:44 - right thing we're talking about this is
03:46 - like 0.0.4 so make sure you have the
03:49 - right bot now if you're in a different
03:50 - environment if you're in just your
03:52 - traditional local environment you can
03:53 - just do your pip install like you
03:55 - normally would
03:56 - so I'm going to go ahead and hit that
03:57 - plus button and it's going to install my
03:59 - package for me
04:00 - and we can go ahead and go back in our
04:02 - main project now if you're working with
04:03 - a free version of replit all these are
04:06 - going to be public the code that you're
04:08 - writing so you don't want to put your
04:09 - API key directly in the program itself
04:12 - so what we're going to do is we're going
04:13 - to add another file up here and we're
04:15 - going to call this dot EnV
04:18 - y now what that's going to do it's going
04:20 - to give us a private place to store that
04:21 - API key that isn't shared so I'm going
04:23 - to say API underscore key I'm going to
04:26 - do all capitals just because it's a
04:28 - constant and then I'm going to paste in
04:30 - that API key and then I can save this
04:34 - now to get that API key into our program
04:36 - we can actually import OS and then we
04:39 - can set our API key equal to os.get EnV
04:45 - NV
04:47 - and then just the key name so remember
04:49 - we call it API underscore key
04:53 - cool now we have our API key in our
04:55 - program as well
04:58 - we're also going to import telebot here
05:02 - perfect that's it so now we can go ahead
05:05 - and set up the basics of our bot I'm
05:06 - going to send you I'm going to set the
05:08 - most simplistic bot you can and a couple
05:10 - different things so I'm going to use
05:12 - Yahoo stocks to kind of pull in data
05:14 - just to showcasing you can use this for
05:16 - whatever data you're trying to pull in
05:18 - so I'm going to show you how to send a
05:20 - message to the bot and it sends
05:22 - something back to you sends information
05:23 - back to you so how the Bots work and
05:26 - we're going to start with just a reply
05:28 - so we're going to send it something it's
05:29 - going to reply the same thing back to us
05:31 - so we're going to do atbot Dot message
05:34 - underscore Handler so this is the kind
05:38 - of setup that handles the different
05:39 - commands that come into the bot we're
05:41 - going to look out for a command
05:43 - and the command that I want to look out
05:45 - for is greet so when we send a command
05:49 - of greet we want the bot to do something
05:51 - back and then you define your function
05:54 - of what you want to do right underneath
05:55 - that
05:56 - you can call this function whatever you
05:58 - want I'm going to mimic that from above
06:00 - and just call it greet I'm going to pass
06:02 - in our message so this is when it has a
06:06 - message that has a command of greet
06:07 - which I'll show you in a minute it's
06:08 - going to run this function and it's
06:10 - going to pass in the message as well now
06:13 - we can just do bot dot reply to
06:17 - we're going to reply to that message
06:22 - with hey how's it going so this is going
06:24 - to be our basic setup for the first
06:26 - couple lines of our bot here
06:30 - and also we don't want to forget to
06:32 - create our bot as well so we're going to
06:34 - say bot equals telebot
06:37 - dot telebot watch your capitalization
06:41 - here
06:42 - and then we're going to pass in our API
06:44 - key now we got to set this bot to keep
06:46 - looking out for messages as well so
06:48 - we're going to say bot dot pulling
06:51 - so this is going to keep checking for
06:53 - messages
06:54 - you could look up in the documentation
06:56 - I'm not sure how often it checks it
06:57 - seems pretty instant so I'm sure it's
06:59 - every couple seconds or whatever
07:01 - but that's fine for us so now that we
07:04 - have everything here we can go ahead and
07:05 - run this script
07:07 - you can see it doesn't do anything right
07:09 - because it's just it's just pulling for
07:11 - information but we haven't sent anything
07:12 - to our bot yet
07:14 - so the one thing that we need to do is
07:17 - start a conversation with our bot so
07:20 - ours was Clarity tutorial underscore bot
07:23 - so what I'm going to do is I'm going to
07:25 - search for that
07:27 - and you're you're going to search for
07:28 - whatever you named yours
07:31 - and you can see that here's our bot
07:33 - we're going to click on that we're going
07:35 - to start a conversation
07:37 - Now commands start with the slash symbol
07:40 - so you remember in our program now we
07:42 - don't have to do them all as commands
07:44 - but we set up the first kind of test as
07:46 - a slash greet so we're going to try that
07:49 - so we're gonna go slash greet
07:55 - and of course coding is really fun so
07:57 - you're
07:59 - commands really matter here this is
08:01 - commands with an S we'll change that
08:03 - let's stop this we'll restart our bot
08:08 - and pretend I didn't send like eight
08:10 - messages trying to figure that out
08:16 - and you can see that if we use the
08:18 - Correct capitalization we get the
08:20 - response that we are looking for here
08:21 - you can see it says hey how's it going
08:24 - which is what we typed as our response
08:27 - so we have a working bot set up here
08:31 - and this is how you're going to use
08:32 - commands to kind of get text into your
08:34 - Bot itself
08:36 - now you probably noticed that it used a
08:38 - reply line so it copied my message from
08:41 - above into the actual message it sent
08:44 - that's because we use the reply to one
08:47 - that you'll see that's very common is
08:49 - also to
08:51 - we'll copy this
08:54 - let's call this hello
08:58 - we'll say hello here if you say hello
09:01 - we'll call this function hello and
09:04 - instead of reply to let's do send
09:07 - message
09:08 - so what we can do is do send underscore
09:11 - message instead
09:14 - now this you it has to know what chat
09:17 - it's in so we need the chat ID now
09:20 - luckily we can get that off the message
09:22 - itself so we can do message.chat.id
09:27 - now if we stop this and run it now we
09:30 - should have a command that we can run
09:31 - with hello no capitals here
09:37 - you can see now it doesn't have the re
09:40 - it's not replying to a certain message
09:42 - it's just prompting to actually send
09:44 - that message cool so let's do something
09:46 - kind of useful now uh I wanted to use a
09:49 - library that I don't have to set up an
09:51 - API key or anything like that just for
09:53 - ease of use so if you want to Ping for
09:55 - different information follow along
09:56 - exactly with me here see how I do it
09:58 - from Yahoo and then Branch out and do
10:00 - whatever you want and make sure to share
10:02 - it so we can all see how you did it that
10:04 - sort of thing
10:06 - so I'm going to grab the Yahoo API here
10:10 - so I'm going to pull in Yahoo finance
10:13 - and then I'm going to walk you through a
10:15 - function that I created to grab
10:18 - the Wall Street bet stock so if you've
10:20 - been following Reddit and all the
10:21 - craziness with GameStop and different
10:23 - stocks like that I want to create a
10:25 - function that whenever I ping it it
10:27 - sends me the last three days worth of
10:30 - stock prices for their favorite stocks
10:32 - like AMC uh GameStop and Nokia
10:37 - so here's the function that I use to
10:40 - create this and we'll take a look at it
10:42 - here
10:44 - so what I did was I added another
10:46 - command function so we're going to have
10:48 - to use the Slash and WSB I'm going to
10:50 - show you how you can do something
10:51 - without a command next but we're going
10:53 - to do one more command here so this is
10:55 - slash WSB standing for Wall Street bets
10:58 - and what it does it runs this get stock
11:00 - function
11:01 - we're going to pull in a response that's
11:03 - just where I saved all my data back when
11:06 - I get responses and then you can choose
11:08 - whatever stocks you want to put in here
11:10 - I put the three Wall Street bet stocks
11:12 - that I see that are most popular with
11:13 - them
11:14 - then for each stock I'm pulling in data
11:17 - off of Yahoo so this is where I call the
11:20 - Yahoo finance API so I'm saying download
11:23 - the ticker and the ticker that I'm
11:25 - choosing is one of these three it's
11:27 - rotating through those each time it's
11:29 - getting a period of two days and it's
11:30 - giving you the one day price so that's
11:33 - the data I'm getting back that data is a
11:36 - panda's uh data frame that you can kind
11:37 - of check out and look at but essentially
11:39 - it's just going to have this data in it
11:41 - I'll show you a pop-up here to kind of
11:43 - show you what the data frame looks like
11:45 - we're going to reset that index so what
11:48 - that does instead of the date being the
11:49 - index is going to reset the index to be
11:51 - zero on the side and then we can pull
11:52 - the date out of that information so then
11:55 - my response is going to be the stock
11:57 - this is an F string so we're putting in
12:00 - the stock name
12:01 - and then we're going to append that to
12:02 - our stock data frame
12:04 - and then for each row so for each row of
12:07 - information for that stock we're going
12:09 - to pull out the close price and round it
12:11 - to two decimal points and we're going to
12:13 - format the date in month slash day so
12:16 - that's what we're doing on this line and
12:17 - then we're going to add that to our
12:19 - response append the stock price
12:23 - then just print out a blank line after
12:26 - each stock
12:28 - so now after we have all of our stocks
12:31 - information I do something a little
12:32 - special here I'm adding in some spacing
12:35 - just to make it look right on the output
12:37 - on telegram itself it gets all kind of
12:39 - jumbled up so what I'm doing here is I'm
12:42 - adding the column headers and I'm making
12:44 - sure that each of them have 10 spaces so
12:47 - they're kind of lined up and then I'm
12:50 - doing another 10 spaces for the next
12:52 - column another 10 spaces for the next
12:53 - column so we got the stock name the
12:55 - first date and then the most recent date
12:58 - and then I'm just simply sending that in
13:01 - a message in a response so that's it
13:02 - that's how we created that function
13:05 - now we can go ahead and stop this if we
13:07 - run it again then let's open up our
13:10 - emulator here and we'll do slash WSB
13:13 - whoops we in we installed some other
13:16 - libraries so we gotta wait until it
13:17 - actually starts running here I got a
13:19 - little impatient drink some coffee it's
13:21 - not tea I'm not sent Dex
13:24 - then you'll see that it still did run
13:26 - our function after we uh finally got the
13:28 - data it's printing out to console I just
13:30 - had that for some debugging and things
13:31 - like that but if you open up our
13:34 - tutorial bot you can see that when we
13:36 - send it slash WSB it sends us back a
13:40 - response with the data we requested so
13:43 - you can see here these are like the
13:44 - column headers it has stock 0331 and
13:48 - 0401 which is last two days the US
13:51 - market was open and then the stock
13:53 - prices for those stocks the formatting
13:55 - is a little weird because telegram's a
13:56 - little finicky about how things are
13:58 - structured so you can play with that a
14:00 - little bit and make it better I'm going
14:01 - to show you one more and that is how to
14:04 - not use a command so we don't want to
14:06 - use slash anymore say say you want to do
14:08 - something custom like you want to say
14:10 - some type of code so you want to say
14:12 - like stop a price space and then a stock
14:15 - name or something and then you want to
14:16 - get data back
14:18 - so here's the setup we're going to use
14:20 - for this next part it's a little
14:23 - different so we're going to use message
14:25 - Handler again but we're going to use the
14:26 - function keyword and then we're going to
14:28 - create a custom function
14:30 - now that custom function when it returns
14:33 - true then whatever's inside of here
14:35 - where I said pass that will run so your
14:39 - function is going to either return true
14:41 - or false based on the message and then
14:44 - if it's true it'll run whatever you want
14:46 - to create
14:48 - that might be a little confusing but
14:50 - we'll go ahead and walk through it here
14:52 - my function so this is to return true or
14:55 - false so this is to decide if this send
14:57 - price actually runs or not so our
15:01 - function that we want to control that is
15:02 - called stock request so what I wanted a
15:06 - stock request to look like I'll pull one
15:07 - up on the screen is to have price
15:10 - space and then a stock name so what we
15:14 - do here is we test to see if it's
15:16 - possible that this is a stock request so
15:18 - what I do right away is I do request I
15:21 - take the message and the text from the
15:23 - message and I split it and when you
15:25 - split with the default parameters it
15:27 - splits it based on Spaces
15:29 - so what it's going to do here is it's
15:31 - going to split it up into as many spaces
15:33 - as it has so if I say uh price space gme
15:37 - space hello world it doesn't matter the
15:40 - it's going to break it into those first
15:42 - two chunks so what I'm saying is the
15:44 - length of those chunks I have to have at
15:47 - least two right because if I have price
15:49 - space and then the stock name that's
15:52 - going to be two so I'm going to make
15:54 - sure it's at least of length two at
15:56 - least has one space in it
15:58 - then I'm going to take the request that
16:00 - first space I'm going to lower case it
16:03 - so in case you do price with a capital P
16:05 - it'll still work and I'm going to say if
16:08 - it's not in price
16:10 - so if it's not at least of a link to
16:13 - or if the first word isn't price we're
16:16 - going to return false because we don't
16:18 - want to run it
16:19 - anything else is going to return true so
16:21 - if it does have price as the first word
16:24 - and it does have at least two items in
16:28 - the message itself then we're gonna run
16:31 - send price
16:33 - so now we can fill out this function
16:35 - below here I'll copy pasta a little more
16:37 - and then walk you through it
16:40 - so remember we're doing something here
16:42 - that could cause an error if we weren't
16:44 - validating before this is only going to
16:46 - run if we have a zero index which is
16:49 - price and a one index of something so I
16:53 - can go ahead and safely try to grab out
16:55 - the one index because I know this
16:57 - wouldn't run if we didn't have a one
16:59 - index because we tested for it up here
17:02 - so my request is going to be the one
17:05 - index I know the price is at the zero
17:07 - index now what's at the one index we
17:09 - don't know we hope it's a stock ticker
17:12 - so if it isn't a stock ticker Yahoo is
17:15 - just going to return no data and we can
17:17 - send that back that we didn't recognize
17:18 - the stock symbol or whatever
17:20 - so what we're going to do here you can
17:22 - see instead of putting in a ticker I use
17:24 - whatever the user sent in request and
17:27 - I'm gonna get one minute data chunks and
17:31 - I'm gonna get five minutes worth of that
17:34 - data so essentially we're going to get
17:35 - the last one minute stock price of
17:38 - whatever ticker they want to put in
17:40 - so this could be useful like during the
17:42 - actual trading Day stuff like that
17:44 - so here's my check when I get that data
17:47 - back I'm making sure the size is greater
17:49 - than zero if the size is less than zero
17:51 - we're just going to send back that we
17:52 - didn't get any data if the size is
17:55 - greater than zero then we know we got
17:56 - some stock information back and we're
17:58 - going to go ahead and format that I'm
18:00 - going to do something very similar to
18:02 - what I did before so I won't break it
18:03 - down too much but I'm essentially making
18:05 - a format a date this time I do it a
18:07 - little differently because it's minute
18:08 - data instead of daily data so I'm going
18:10 - to pass back a month a day
18:13 - uh the 12 hour time frame and the
18:16 - minutes and then AM or PM I'm going to
18:19 - set the index blah blah and then
18:21 - eventually I'll send the message
18:23 - so let's go ahead and try this out so we
18:25 - can stop here
18:27 - we can run it again now remember we
18:30 - picked the format we could pick this to
18:32 - be whatever we want so we are going to
18:35 - start this command with price do space
18:37 - and then whatever we want to uh whatever
18:41 - we want to look up so let's try a new
18:44 - one let's get a popular one so we'll go
18:46 - price Tesla
18:48 - and you can see now we get a now you
18:51 - could have a nice title here or
18:52 - something that would have looked nicer
18:53 - now that I'm now that I'm looking at so
18:55 - we know we're looking at test layer but
18:57 - you can see we got the last five minutes
18:58 - worth of data now the Market's closed so
19:00 - we saw the actual last five minutes of
19:02 - the day uh if the if it was a live
19:05 - market you would see the last five
19:06 - minutes now but we got those prices here
19:09 - so let's try another one we'll say price
19:12 - some garbage
19:13 - and you can see that we got no data back
19:15 - because it wasn't a real stock symbol
19:17 - let's try one more so we're gonna say
19:19 - price
19:20 - gme and then this is my favorite stock
19:25 - so what's gonna happen here is it's
19:27 - gonna break up this and it's gonna still
19:29 - pass our validation right the first
19:31 - index well nope
19:33 - now it will the first index is price and
19:36 - then the second is going to be a stock
19:37 - ticker and it's going to ignore
19:38 - everything else in the statement so it
19:40 - is still going to give us back the data
19:42 - I hope and you can see that we did get
19:43 - our data back now if you like this video
19:45 - if you want us to do a couple more
19:47 - things with telegram we got a few more
19:48 - ideas here let us know in the comments
19:50 - what you want to see and we'll put it in
19:52 - the next video the one thing that you
19:54 - want to note here is if you're on a free
19:56 - account of replit this is going to fall
19:58 - asleep after a certain period of time if
20:00 - you're on a paid version of the account
20:02 - you can get a trial that you can go down
20:04 - to always on and turn this on and that
20:06 - will leave your Bot running 24 7. now
20:09 - there are some workarounds for this as
20:11 - well that I will show in the next
20:13 - telegram video
20:14 - along with anything else you would like
20:16 - me to show in the comments below give
20:19 - this a shot let me know what you think
20:20 - and until next time keep coding

Cleaned transcript:

before we get into the video let me just quickly explain how this video came about so recently I started working at a startup called webolite and through them I was introduced to Jacob from Clarity quarters and he proposed that he makes a tutorial video right here on CS dojo and when I asked my Twitter followers if it's something they want to see they basically said yes and that's why I decided to post it right here so let's just get started one thing that I find very useful about Python scripts is having some type of a script that can send you an alert or you can ping for information back now I've done this in videos with an SMS alert and different things like that but it either costs something or there's workarounds that are kind of country based that doesn't work for all the viewers so what we're going to do today is set up a telegram bot that does something similar in just a couple lines of python so if you don't have a telegram account you want to go ahead and sign up for one and you'll come to a kind of starting screen like this it's free so go ahead and grab it now we need to get an API key to work with telegram so we're going to search for bot father bot fathers telegram's official bot for handing out API keys so even though we're going to create our own custom bot we're going to get an API key from botfather you can see it'll show up here go ahead and click on that it says some things that this bot can do we're going to go ahead and hit start and you can see here the different things that that we can ask for here and there is a I think it's new but we'll just try it so you're gonna do Slash new bot and then it says what do you want to call it so you can pick whatever name you want this doesn't have to be unique so ours is going to be tutorial bot now this next one does have to be unique so it's going to say if the bot already exists and it has to end with bot so we can do our something like Clarity tutorial underscore bot and you got to remember it because we gotta find it later so you can see that that worked it was unique if it wasn't unique it's going to say that that bot already exists try and create another one and you can just pick a different bot name here so you can see now we have this HTTP API access token now you're gonna have to get your own so don't copy mine here and we are going to use that so you're going to go ahead and select that entire line here all the way over and then we can go ahead and minimize this now for our program here we're going to do it I'm gonna do it in replit for a couple of reasons one you can duplicate my code fully and run it in the exact same environment that I did you can also run this locally or however you want uh replit offers some paid packages to run the spot 24 7 and different things like that there's also some workarounds to run it 24 7 for free so that's that's the route we're gonna go here so you can set this up locally and follow the exact same steps I'm just going to do it in wrap lit there'll be a link in the description if you want to copy my code so we're going to go ahead and do create a new replit it's in Python obviously we're going to do telegram bot and then we can go ahead and add in we're going to add in one package that's going to help us work with that API so what we're going to do here is we're going to find our package so I clicked on this button there's a couple here options here for different apis that you can use the one I chose to use that worked really nicely with replit or whatever environment you're going to work with is pi telegram bot API and you can see it's in version 3.77 so in the future if this doesn't quite work you want to make sure you get the same version as me kind of hug that version but also make sure when you're searching for this package that you're not getting one of these others that aren't the right thing we're talking about this is like 0.0.4 so make sure you have the right bot now if you're in a different environment if you're in just your traditional local environment you can just do your pip install like you normally would so I'm going to go ahead and hit that plus button and it's going to install my package for me and we can go ahead and go back in our main project now if you're working with a free version of replit all these are going to be public the code that you're writing so you don't want to put your API key directly in the program itself so what we're going to do is we're going to add another file up here and we're going to call this dot EnV y now what that's going to do it's going to give us a private place to store that API key that isn't shared so I'm going to say API underscore key I'm going to do all capitals just because it's a constant and then I'm going to paste in that API key and then I can save this now to get that API key into our program we can actually import OS and then we can set our API key equal to os.get EnV NV and then just the key name so remember we call it API underscore key cool now we have our API key in our program as well we're also going to import telebot here perfect that's it so now we can go ahead and set up the basics of our bot I'm going to send you I'm going to set the most simplistic bot you can and a couple different things so I'm going to use Yahoo stocks to kind of pull in data just to showcasing you can use this for whatever data you're trying to pull in so I'm going to show you how to send a message to the bot and it sends something back to you sends information back to you so how the Bots work and we're going to start with just a reply so we're going to send it something it's going to reply the same thing back to us so we're going to do atbot Dot message underscore Handler so this is the kind of setup that handles the different commands that come into the bot we're going to look out for a command and the command that I want to look out for is greet so when we send a command of greet we want the bot to do something back and then you define your function of what you want to do right underneath that you can call this function whatever you want I'm going to mimic that from above and just call it greet I'm going to pass in our message so this is when it has a message that has a command of greet which I'll show you in a minute it's going to run this function and it's going to pass in the message as well now we can just do bot dot reply to we're going to reply to that message with hey how's it going so this is going to be our basic setup for the first couple lines of our bot here and also we don't want to forget to create our bot as well so we're going to say bot equals telebot dot telebot watch your capitalization here and then we're going to pass in our API key now we got to set this bot to keep looking out for messages as well so we're going to say bot dot pulling so this is going to keep checking for messages you could look up in the documentation I'm not sure how often it checks it seems pretty instant so I'm sure it's every couple seconds or whatever but that's fine for us so now that we have everything here we can go ahead and run this script you can see it doesn't do anything right because it's just it's just pulling for information but we haven't sent anything to our bot yet so the one thing that we need to do is start a conversation with our bot so ours was Clarity tutorial underscore bot so what I'm going to do is I'm going to search for that and you're you're going to search for whatever you named yours and you can see that here's our bot we're going to click on that we're going to start a conversation Now commands start with the slash symbol so you remember in our program now we don't have to do them all as commands but we set up the first kind of test as a slash greet so we're going to try that so we're gonna go slash greet and of course coding is really fun so you're commands really matter here this is commands with an S we'll change that let's stop this we'll restart our bot and pretend I didn't send like eight messages trying to figure that out and you can see that if we use the Correct capitalization we get the response that we are looking for here you can see it says hey how's it going which is what we typed as our response so we have a working bot set up here and this is how you're going to use commands to kind of get text into your Bot itself now you probably noticed that it used a reply line so it copied my message from above into the actual message it sent that's because we use the reply to one that you'll see that's very common is also to we'll copy this let's call this hello we'll say hello here if you say hello we'll call this function hello and instead of reply to let's do send message so what we can do is do send underscore message instead now this you it has to know what chat it's in so we need the chat ID now luckily we can get that off the message itself so we can do message.chat.id now if we stop this and run it now we should have a command that we can run with hello no capitals here you can see now it doesn't have the re it's not replying to a certain message it's just prompting to actually send that message cool so let's do something kind of useful now uh I wanted to use a library that I don't have to set up an API key or anything like that just for ease of use so if you want to Ping for different information follow along exactly with me here see how I do it from Yahoo and then Branch out and do whatever you want and make sure to share it so we can all see how you did it that sort of thing so I'm going to grab the Yahoo API here so I'm going to pull in Yahoo finance and then I'm going to walk you through a function that I created to grab the Wall Street bet stock so if you've been following Reddit and all the craziness with GameStop and different stocks like that I want to create a function that whenever I ping it it sends me the last three days worth of stock prices for their favorite stocks like AMC uh GameStop and Nokia so here's the function that I use to create this and we'll take a look at it here so what I did was I added another command function so we're going to have to use the Slash and WSB I'm going to show you how you can do something without a command next but we're going to do one more command here so this is slash WSB standing for Wall Street bets and what it does it runs this get stock function we're going to pull in a response that's just where I saved all my data back when I get responses and then you can choose whatever stocks you want to put in here I put the three Wall Street bet stocks that I see that are most popular with them then for each stock I'm pulling in data off of Yahoo so this is where I call the Yahoo finance API so I'm saying download the ticker and the ticker that I'm choosing is one of these three it's rotating through those each time it's getting a period of two days and it's giving you the one day price so that's the data I'm getting back that data is a panda's uh data frame that you can kind of check out and look at but essentially it's just going to have this data in it I'll show you a popup here to kind of show you what the data frame looks like we're going to reset that index so what that does instead of the date being the index is going to reset the index to be zero on the side and then we can pull the date out of that information so then my response is going to be the stock this is an F string so we're putting in the stock name and then we're going to append that to our stock data frame and then for each row so for each row of information for that stock we're going to pull out the close price and round it to two decimal points and we're going to format the date in month slash day so that's what we're doing on this line and then we're going to add that to our response append the stock price then just print out a blank line after each stock so now after we have all of our stocks information I do something a little special here I'm adding in some spacing just to make it look right on the output on telegram itself it gets all kind of jumbled up so what I'm doing here is I'm adding the column headers and I'm making sure that each of them have 10 spaces so they're kind of lined up and then I'm doing another 10 spaces for the next column another 10 spaces for the next column so we got the stock name the first date and then the most recent date and then I'm just simply sending that in a message in a response so that's it that's how we created that function now we can go ahead and stop this if we run it again then let's open up our emulator here and we'll do slash WSB whoops we in we installed some other libraries so we gotta wait until it actually starts running here I got a little impatient drink some coffee it's not tea I'm not sent Dex then you'll see that it still did run our function after we uh finally got the data it's printing out to console I just had that for some debugging and things like that but if you open up our tutorial bot you can see that when we send it slash WSB it sends us back a response with the data we requested so you can see here these are like the column headers it has stock 0331 and 0401 which is last two days the US market was open and then the stock prices for those stocks the formatting is a little weird because telegram's a little finicky about how things are structured so you can play with that a little bit and make it better I'm going to show you one more and that is how to not use a command so we don't want to use slash anymore say say you want to do something custom like you want to say some type of code so you want to say like stop a price space and then a stock name or something and then you want to get data back so here's the setup we're going to use for this next part it's a little different so we're going to use message Handler again but we're going to use the function keyword and then we're going to create a custom function now that custom function when it returns true then whatever's inside of here where I said pass that will run so your function is going to either return true or false based on the message and then if it's true it'll run whatever you want to create that might be a little confusing but we'll go ahead and walk through it here my function so this is to return true or false so this is to decide if this send price actually runs or not so our function that we want to control that is called stock request so what I wanted a stock request to look like I'll pull one up on the screen is to have price space and then a stock name so what we do here is we test to see if it's possible that this is a stock request so what I do right away is I do request I take the message and the text from the message and I split it and when you split with the default parameters it splits it based on Spaces so what it's going to do here is it's going to split it up into as many spaces as it has so if I say uh price space gme space hello world it doesn't matter the it's going to break it into those first two chunks so what I'm saying is the length of those chunks I have to have at least two right because if I have price space and then the stock name that's going to be two so I'm going to make sure it's at least of length two at least has one space in it then I'm going to take the request that first space I'm going to lower case it so in case you do price with a capital P it'll still work and I'm going to say if it's not in price so if it's not at least of a link to or if the first word isn't price we're going to return false because we don't want to run it anything else is going to return true so if it does have price as the first word and it does have at least two items in the message itself then we're gonna run send price so now we can fill out this function below here I'll copy pasta a little more and then walk you through it so remember we're doing something here that could cause an error if we weren't validating before this is only going to run if we have a zero index which is price and a one index of something so I can go ahead and safely try to grab out the one index because I know this wouldn't run if we didn't have a one index because we tested for it up here so my request is going to be the one index I know the price is at the zero index now what's at the one index we don't know we hope it's a stock ticker so if it isn't a stock ticker Yahoo is just going to return no data and we can send that back that we didn't recognize the stock symbol or whatever so what we're going to do here you can see instead of putting in a ticker I use whatever the user sent in request and I'm gonna get one minute data chunks and I'm gonna get five minutes worth of that data so essentially we're going to get the last one minute stock price of whatever ticker they want to put in so this could be useful like during the actual trading Day stuff like that so here's my check when I get that data back I'm making sure the size is greater than zero if the size is less than zero we're just going to send back that we didn't get any data if the size is greater than zero then we know we got some stock information back and we're going to go ahead and format that I'm going to do something very similar to what I did before so I won't break it down too much but I'm essentially making a format a date this time I do it a little differently because it's minute data instead of daily data so I'm going to pass back a month a day uh the 12 hour time frame and the minutes and then AM or PM I'm going to set the index blah blah and then eventually I'll send the message so let's go ahead and try this out so we can stop here we can run it again now remember we picked the format we could pick this to be whatever we want so we are going to start this command with price do space and then whatever we want to uh whatever we want to look up so let's try a new one let's get a popular one so we'll go price Tesla and you can see now we get a now you could have a nice title here or something that would have looked nicer now that I'm now that I'm looking at so we know we're looking at test layer but you can see we got the last five minutes worth of data now the Market's closed so we saw the actual last five minutes of the day uh if the if it was a live market you would see the last five minutes now but we got those prices here so let's try another one we'll say price some garbage and you can see that we got no data back because it wasn't a real stock symbol let's try one more so we're gonna say price gme and then this is my favorite stock so what's gonna happen here is it's gonna break up this and it's gonna still pass our validation right the first index well nope now it will the first index is price and then the second is going to be a stock ticker and it's going to ignore everything else in the statement so it is still going to give us back the data I hope and you can see that we did get our data back now if you like this video if you want us to do a couple more things with telegram we got a few more ideas here let us know in the comments what you want to see and we'll put it in the next video the one thing that you want to note here is if you're on a free account of replit this is going to fall asleep after a certain period of time if you're on a paid version of the account you can get a trial that you can go down to always on and turn this on and that will leave your Bot running 24 7. now there are some workarounds for this as well that I will show in the next telegram video along with anything else you would like me to show in the comments below give this a shot let me know what you think and until next time keep coding
