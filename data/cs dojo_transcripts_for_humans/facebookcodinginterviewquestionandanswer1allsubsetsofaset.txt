With timestamps:

00:00 - here's a coding interview problem from
00:02 - Facebook you're given an array of unique
00:04 - items so there are no duplicates in this
00:07 - array and you're supposed to write a
00:09 - function that takes this array of unique
00:11 - items or you can see as a set of unique
00:14 - items given in an array format and your
00:17 - function should find all of its subsets
00:20 - so for example one potential subset is
00:23 - an empty set and another subset of this
00:28 - entire set is the given set itself one
00:33 - two and the two other subsets or single
00:37 - item subsets one and two now your
00:40 - function doesn't have to return anything
00:43 - but it's supposed to print out all of
00:45 - the subsets in say standard output and
00:48 - you can print them in any order you like
00:51 - so if you decide to print the empty set
00:54 - you'll have an empty line to represent
00:57 - the empty set and if you decide to print
00:59 - a set of one after that you'll have one
01:03 - comma and with a set of two you have to
01:07 - come up I'm ending these lines with a
01:10 - comma just for simplicity just so that
01:12 - it's easier to implement your function
01:14 - and if you print one two at the end
01:17 - you'll have 1 comma 2 comma so that's
01:21 - the problem again you can print them in
01:24 - any order you like so think about this
01:26 - problem for a second pause the video
01:28 - right here and then come back to the
01:29 - video now the first thing you might
01:32 - consider when you think about this
01:33 - problem is how many subsets are there
01:36 - for the given array or for the given set
01:38 - the answer is there are two to the part
01:41 - and subsets where n is the number of
01:45 - items in the array so this is going to
01:48 - be 2 to the power of 2 which is 4 if n
01:52 - is equal to 2 as in this example 1 and 2
01:57 - and let me quickly explain why that's
01:59 - the case let's say we're trying to
02:01 - construct a subset out of the given
02:04 - array for example 1 & 2 for us to do
02:07 - that there are a few decisions that we
02:09 - need to make first of all should we
02:11 - include 1 the first item
02:13 - in this new subset that we are trying to
02:16 - construct and then the second decision
02:18 - that we need to make is should we
02:19 - include two in this new subset so there
02:23 - are two decisions that we need to make
02:25 - and for each decision or for each item
02:28 - there are two available choices so the
02:31 - total number of available choices for us
02:33 - as we try to construct a new subset from
02:37 - this given array is 2 times 2 which is 4
02:41 - this number right here and it's the same
02:44 - when we are trying to construct a subset
02:46 - out of an array of n items as well there
02:50 - are 2 choices that we could potentially
02:52 - make for each item and since there are n
02:55 - items there are 2 to the Parv and
02:57 - potential choices or 2 to the power of n
02:59 - potential subsets if we visualize this
03:02 - process it might look like this with
03:05 - this idea we can construct all of the
03:08 - subsets by starting with an empty set
03:10 - and I'm going to use this example 1 & 2
03:13 - to explain this idea once we have an
03:16 - empty set we need to ask ourselves
03:18 - should we add 1 to this set the empty
03:23 - set and if the answer is no we'll still
03:25 - have an empty set and if the answer is
03:28 - yes we'll have a set of 1 after that for
03:31 - each of those subsets or each of those
03:34 - sets we need to ask ourselves
03:36 - should we add 2 to each of those sets if
03:41 - the answer is yes
03:42 - we'll have a set of 2 if we start with
03:45 - an empty set and a set of 1 & 2 if we
03:49 - start with a set of 1 and so on
03:51 - and this way we can construct all of the
03:54 - four subsets for this particular example
03:57 - so when you see this graph you might say
04:01 - well it looks kind of like a recursion
04:03 - tree so maybe we can solve this problem
04:05 - somehow using recursion let's see what
04:09 - the solution might look like now I'm
04:11 - going to explain my solution in suit
04:13 - code I'm going to write a function
04:15 - called all subsets which is going to
04:18 - take given array as the input for
04:21 - example 1 & 2 disarray and it's not
04:24 - going to return anything but it will
04:26 - print out
04:27 - all of its subsets to construct all of
04:30 - its subsets as I mentioned earlier we're
04:32 - going to start with an empty set so the
04:35 - first step in all subsets is going to be
04:38 - initialized an empty set but to
04:41 - represent each of these sets for example
04:43 - this empty set and this set of one we're
04:47 - going to use an array instead of a set
04:49 - data structure and it's going to be
04:52 - clear why we are doing this later so for
04:54 - example if you have a set of two and if
04:57 - you're given this array one and two a
04:59 - set of two can be represented with null
05:02 - and two now means that one is not in
05:07 - this set and two means that two is in
05:10 - this set and this way we can represent
05:12 - any subset of this array with an array
05:15 - of the same length so to initialize this
05:18 - initial empty set at the beginning of
05:21 - all subsets we can initialize an array
05:24 - whose length is the same as given arrays
05:28 - length or a given array that length and
05:30 - the content could be anything but it can
05:33 - be for example now now if the given
05:36 - arrays length is 2 and we're going to
05:39 - define a helper function which is going
05:42 - to call itself recursively we're going
05:44 - to call it helper and it's going to take
05:47 - three arguments give an array which is
05:49 - the given array which never changes
05:51 - subsets which represents the state of
05:54 - the current subset that we're
05:56 - constructing so for example this empty
05:59 - subset or this set of one represented in
06:02 - an array format an eye is going to
06:06 - represent the index of the current item
06:09 - that we're examining so if I is equal to
06:13 - 0 for example that means that we're
06:15 - trying to decide if we should include
06:17 - this item in the current subset that
06:20 - we're trying to construct and if I is
06:23 - equal to 1 that means that we're
06:26 - currently examining this item at index 1
06:29 - now the first thing we need to do in the
06:32 - helper function is we need to check if I
06:35 - is equal to given arrays length or a
06:38 - given array length if
06:40 - the case for example in this example if
06:43 - I is equal to two which is given arrays
06:47 - length that would mean that I is
06:49 - pointing outside of array which means we
06:52 - already went through this whole array
06:53 - and finished constructing one of these
06:56 - subsets so at that point we can just
06:59 - print the current subset we have with
07:02 - say print subset of subset and here I'm
07:07 - assuming that we've already defined a
07:09 - function called print set which prints
07:12 - out all of the non null items in the
07:15 - given subset array and of course in our
07:18 - main function
07:19 - our subsets after defining an empty
07:22 - subset represented as an array and
07:25 - assigning it to subsets we need to call
07:28 - the helper function with given array the
07:32 - empty subset and 0 and of course we need
07:34 - to start with 0 because that's the first
07:36 - index now in the helper function if I is
07:40 - not equal to given arrays length yet for
07:43 - example if we're right here where I
07:46 - would be 1 what should we do if I is
07:49 - equal to 1 that means that we're trying
07:51 - to decide if we should include 2 in this
07:55 - subset that we're constructing so we'll
07:58 - need to call helper twice recursively
08:01 - once without adding two and the second
08:04 - time after attitude to this subset now
08:07 - to represent the first two recursive
08:09 - call where we don't add the current item
08:12 - that we're examining to the subset we
08:15 - can just set the item at the current
08:18 - index in the subset array to now we can
08:22 - do this with subset square brackets I
08:24 - equals now and after that we can call
08:28 - helper recursively with given array
08:31 - subset which is the updated subset I
08:34 - plus one to go to the next index and to
08:37 - represent the second recursive recall
08:39 - where we do add the current item that
08:42 - we're examining to the subset we can set
08:45 - the item at index I in the subset array
08:48 - to the current item for example 2 we can
08:52 - do this with of course subset
08:54 - square brackets I eCos given array
08:56 - square brackets I and then just like
08:59 - before called helper again recursively
09:01 - with given array subset and I plus one
09:04 - and that's my solution but what's the
09:07 - benefit of using an array instead of a
09:09 - set structure to represent each subset
09:12 - the benefit is that it becomes easier to
09:15 - keep track of the current state of the
09:17 - subset by using an array instead of a
09:20 - set structure for example subset might
09:23 - start at now now but as we go down this
09:26 - recursion tree at this point when we are
09:30 - here
09:30 - it'll be now two and you might ask what
09:34 - happens once we go down this branch the
09:37 - second recursive call from the first
09:39 - call well at that point we don't have to
09:42 - worry at all about the current state of
09:45 - this array because once we get to the
09:48 - end of this tree will override every
09:51 - single element anyway so for example
09:53 - once we get here this element will be
09:57 - overriding with one and this element
10:00 - will be now so as you can see by using
10:03 - an array we have to worry less about
10:06 - what the state of this subset looks like
10:09 - or how the state has been affected by
10:12 - previous recursive calls and this is not
10:15 - necessarily the case with a set
10:17 - structure it is possible to implement
10:19 - these functions using a set structure
10:21 - but it's just that if you do that
10:23 - you need to be extra careful about which
10:26 - recursive calls are made before which
10:28 - ones now once you understand that
10:31 - solution I'd recommend that you try
10:32 - solving this problem with an iterative
10:34 - solution instead so try solving this
10:37 - problem without recursion at all and
10:39 - once you have a good solution with that
10:41 - let me know in the comment section below
10:43 - also if there's any other interview
10:46 - question I should cover in the future
10:47 - let me know at CES dojo dot io /
10:50 - contribute where you can let me know the
10:53 - question anonymously ok I'll see you in
10:56 - the next video

Cleaned transcript:

here's a coding interview problem from Facebook you're given an array of unique items so there are no duplicates in this array and you're supposed to write a function that takes this array of unique items or you can see as a set of unique items given in an array format and your function should find all of its subsets so for example one potential subset is an empty set and another subset of this entire set is the given set itself one two and the two other subsets or single item subsets one and two now your function doesn't have to return anything but it's supposed to print out all of the subsets in say standard output and you can print them in any order you like so if you decide to print the empty set you'll have an empty line to represent the empty set and if you decide to print a set of one after that you'll have one comma and with a set of two you have to come up I'm ending these lines with a comma just for simplicity just so that it's easier to implement your function and if you print one two at the end you'll have 1 comma 2 comma so that's the problem again you can print them in any order you like so think about this problem for a second pause the video right here and then come back to the video now the first thing you might consider when you think about this problem is how many subsets are there for the given array or for the given set the answer is there are two to the part and subsets where n is the number of items in the array so this is going to be 2 to the power of 2 which is 4 if n is equal to 2 as in this example 1 and 2 and let me quickly explain why that's the case let's say we're trying to construct a subset out of the given array for example 1 & 2 for us to do that there are a few decisions that we need to make first of all should we include 1 the first item in this new subset that we are trying to construct and then the second decision that we need to make is should we include two in this new subset so there are two decisions that we need to make and for each decision or for each item there are two available choices so the total number of available choices for us as we try to construct a new subset from this given array is 2 times 2 which is 4 this number right here and it's the same when we are trying to construct a subset out of an array of n items as well there are 2 choices that we could potentially make for each item and since there are n items there are 2 to the Parv and potential choices or 2 to the power of n potential subsets if we visualize this process it might look like this with this idea we can construct all of the subsets by starting with an empty set and I'm going to use this example 1 & 2 to explain this idea once we have an empty set we need to ask ourselves should we add 1 to this set the empty set and if the answer is no we'll still have an empty set and if the answer is yes we'll have a set of 1 after that for each of those subsets or each of those sets we need to ask ourselves should we add 2 to each of those sets if the answer is yes we'll have a set of 2 if we start with an empty set and a set of 1 & 2 if we start with a set of 1 and so on and this way we can construct all of the four subsets for this particular example so when you see this graph you might say well it looks kind of like a recursion tree so maybe we can solve this problem somehow using recursion let's see what the solution might look like now I'm going to explain my solution in suit code I'm going to write a function called all subsets which is going to take given array as the input for example 1 & 2 disarray and it's not going to return anything but it will print out all of its subsets to construct all of its subsets as I mentioned earlier we're going to start with an empty set so the first step in all subsets is going to be initialized an empty set but to represent each of these sets for example this empty set and this set of one we're going to use an array instead of a set data structure and it's going to be clear why we are doing this later so for example if you have a set of two and if you're given this array one and two a set of two can be represented with null and two now means that one is not in this set and two means that two is in this set and this way we can represent any subset of this array with an array of the same length so to initialize this initial empty set at the beginning of all subsets we can initialize an array whose length is the same as given arrays length or a given array that length and the content could be anything but it can be for example now now if the given arrays length is 2 and we're going to define a helper function which is going to call itself recursively we're going to call it helper and it's going to take three arguments give an array which is the given array which never changes subsets which represents the state of the current subset that we're constructing so for example this empty subset or this set of one represented in an array format an eye is going to represent the index of the current item that we're examining so if I is equal to 0 for example that means that we're trying to decide if we should include this item in the current subset that we're trying to construct and if I is equal to 1 that means that we're currently examining this item at index 1 now the first thing we need to do in the helper function is we need to check if I is equal to given arrays length or a given array length if the case for example in this example if I is equal to two which is given arrays length that would mean that I is pointing outside of array which means we already went through this whole array and finished constructing one of these subsets so at that point we can just print the current subset we have with say print subset of subset and here I'm assuming that we've already defined a function called print set which prints out all of the non null items in the given subset array and of course in our main function our subsets after defining an empty subset represented as an array and assigning it to subsets we need to call the helper function with given array the empty subset and 0 and of course we need to start with 0 because that's the first index now in the helper function if I is not equal to given arrays length yet for example if we're right here where I would be 1 what should we do if I is equal to 1 that means that we're trying to decide if we should include 2 in this subset that we're constructing so we'll need to call helper twice recursively once without adding two and the second time after attitude to this subset now to represent the first two recursive call where we don't add the current item that we're examining to the subset we can just set the item at the current index in the subset array to now we can do this with subset square brackets I equals now and after that we can call helper recursively with given array subset which is the updated subset I plus one to go to the next index and to represent the second recursive recall where we do add the current item that we're examining to the subset we can set the item at index I in the subset array to the current item for example 2 we can do this with of course subset square brackets I eCos given array square brackets I and then just like before called helper again recursively with given array subset and I plus one and that's my solution but what's the benefit of using an array instead of a set structure to represent each subset the benefit is that it becomes easier to keep track of the current state of the subset by using an array instead of a set structure for example subset might start at now now but as we go down this recursion tree at this point when we are here it'll be now two and you might ask what happens once we go down this branch the second recursive call from the first call well at that point we don't have to worry at all about the current state of this array because once we get to the end of this tree will override every single element anyway so for example once we get here this element will be overriding with one and this element will be now so as you can see by using an array we have to worry less about what the state of this subset looks like or how the state has been affected by previous recursive calls and this is not necessarily the case with a set structure it is possible to implement these functions using a set structure but it's just that if you do that you need to be extra careful about which recursive calls are made before which ones now once you understand that solution I'd recommend that you try solving this problem with an iterative solution instead so try solving this problem without recursion at all and once you have a good solution with that let me know in the comment section below also if there's any other interview question I should cover in the future let me know at CES dojo dot io / contribute where you can let me know the question anonymously ok I'll see you in the next video
