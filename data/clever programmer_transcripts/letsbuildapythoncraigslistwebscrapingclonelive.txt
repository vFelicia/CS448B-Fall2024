00:00 - okay three two one what's up guys I hope
00:05 - I'm live this is Kazi from clever
00:07 - programmer calm this is aaron from
00:11 - clever programmer calm in this video we
00:16 - are going to be making a craigslist app
00:19 - clone okay it's gonna look like this i'm
00:22 - gonna do this quickly so you guys can
00:24 - start seeing this this is what its gonna
00:25 - look like what we're gonna build we're
00:28 - gonna be doing it with Python and Django
00:30 - alright so we're gonna be using Django
00:32 - we're gonna be using Python we're gonna
00:34 - be using beautifulsoup and web scraping
00:36 - and the end result instead of something
00:39 - looking like this when you type in ping
00:41 - pong which looks like garbage
00:46 - it's instead going to look like this
00:49 - okay another thing when you type in
00:54 - something like a Python tutor it looks
00:59 - like this which is not very pretty here
01:02 - when you type in a Python tutor is gonna
01:05 - be much much much prettier okay like
01:08 - this so which one do you prefer this one
01:11 - or this one I think we all prefer this
01:15 - one probably people are gonna say the
01:16 - other one justice yeah okay cool so
01:20 - that's what we're gonna be building who
01:23 - did I do the shortcut I hope so
01:25 - that's what we're gonna be building what
01:28 - is up everybody people are excited
01:30 - they're jumpin on epic code is on tech
01:33 - boilers is on made more gear Abdulla
01:36 - alright guys we're gonna be building
01:38 - this live together I hope you guys enjoy
01:41 - it and then yeah if our mic or anything
01:45 - is off or whatever just let us know is
01:48 - the chat okay are you able to go into
01:51 - the what did you do oh by the way guys
01:54 - any questions that you guys have just
01:55 - drop it in the in the chat we were more
01:58 - than yep we're looking for really cool
02:01 - questions as well so yeah make your make
02:03 - your questions great guys don't ask
02:05 - stuff like Python versus Java I'm gonna
02:07 - ignore it like brain-dead questions
02:10 - don't ask them
02:12 - ask more beautiful questions and you'll
02:15 - get more beautiful answers right right
02:16 - right up here with with Kazi and and and
02:21 - and Frankie and Frankie Frankie that's
02:23 - right so we got code okay so now we're
02:26 - gonna switch the thing and we're gonna
02:28 - go here all right now I'm gonna I'm
02:30 - gonna go and do that okay so basically I
02:49 - I think you guys get the idea it's gonna
02:52 - be you can open that up again so I can
02:54 - see Craigslist app I'm just gonna put it
02:58 - here so you guys can see it it's gonna
02:59 - have a search functionality like this
03:03 - okay search functionality like that it's
03:06 - gonna have a bar okay and then when you
03:10 - type something in is gonna spit back out
03:12 - the end results right here like this
03:15 - okay that's what we're doing but there
03:19 - are multiple technologies that we're
03:21 - gonna be using in this okay so there's
03:22 - gonna be like multiple different things
03:24 - so for example we're gonna have Frankie
03:28 - what are we gonna have what's one thing
03:29 - we're gonna have in here
03:30 - well images images cool but what
03:33 - technologies are using what programming
03:34 - language were using Python Python oh
03:36 - yeah I want you to jump in this to what
03:38 - other what's what other technology
03:40 - stacks are we using not C++ cool yeah
03:48 - what else
03:49 - HTML yep unless the other one for
03:52 - anything HTML and JavaScript okay a
03:56 - little little bit right I mean when
03:58 - actually be coding JavaScript actually
03:59 - uh we're staying away from JavaScript
04:01 - probably nothing wrong with JavaScript
04:04 - but we're just not using it don't need
04:06 - it and then we have databases so we're
04:09 - gonna be using like something with
04:10 - databases this app oh this app is also
04:13 - gonna be hosted online so which one of
04:17 - you knows what we're gonna be using to
04:18 - host it online
04:19 - mm-hm do you know
04:21 - sorts of an h heroku oh holy crap
04:25 - Frankie knows his stuff besides just
04:27 - Camus though hell yeah
04:29 - there we go so we got here oku as well
04:32 - and that looks pretty good right are we
04:36 - missing something
04:37 - mmm bootstrap stuff oh yeah Sofer front
04:42 - end we're actually gonna be using
04:43 - materialized yeah which is like
04:45 - bootstrap would not yeah it's a it's a
04:52 - CSS by by Google and it's it's pretty
04:55 - nice actually it's very beautiful so
04:57 - we're gonna using materialized and then
04:59 - we're gonna be using obviously things
05:01 - like beautifulsoup
05:02 - to do web scraping beautifulsoup I guess
05:08 - I should probably just write web
05:10 - scraping because everybody gets that
05:12 - yeah um yeah what else other libraries I
05:22 - think that's it besides Craigslist
05:25 - Craigslist itself but that's just the
05:27 - website yeah yep so that's pretty good
05:35 - cool so that's what we're gonna be
05:37 - building yup
05:41 - beautiful Oh check here
05:44 - what is happening okay we got a bunch of
05:48 - people jumping on here that's great
05:50 - alright so let's go and now we're gonna
05:56 - start coding this thing up guys now one
06:00 - really crappy thing that actually
06:01 - happened recently with Aaron and I was
06:06 - we were working on this application and
06:08 - we spent about two days recording we
06:12 - have about 12 hours of footage with the
06:14 - camera and 12 hours of screencast and
06:17 - between two days we spent probably
06:19 - fifteen hours building this application
06:21 - for you guys and what ended up happening
06:23 - was the hard drive that we had got
06:26 - messed up and so what did you end up
06:30 - doing
06:31 - the SS Dean it was an SSD actually to
06:34 - the shop went to several different ones
06:37 - it turns out that SSDs are a little bit
06:39 - harder to maintain and to fix so at the
06:43 - end of the day we we figured out that we
06:45 - probably have to spend about more than
06:47 - $1,000 to get the data back and it takes
06:50 - more than a week to do it as well on a
06:52 - $200 hard drive on a $200 hard drive so
06:54 - yeah so we just doing it again on live
06:56 - stream in two hours be much better than
06:58 - doing all that yeah so we're just gonna
07:00 - do it on live stream yeah and yeah let's
07:04 - let's go so you guys can follow along
07:07 - okay so for anybody who's gonna wanna
07:09 - have replay value out of this is we're
07:13 - gonna drop the code the github
07:14 - repository or whatever like in the
07:17 - description so you guys can have access
07:19 - to it whenever you want and that way
07:23 - you'll have the code and and and for now
07:26 - you guys can just try to follow along
07:27 - with us okay okay so we're gonna build
07:32 - out a new project in pycharm so I use
07:39 - pycharm guys you guys can use really
07:41 - whatever you want
07:42 - yeah I'm Travis guilty I've never used
07:44 - Python with my life but now that cause
07:46 - you show me how it is like vyas could
07:59 - know a lot of people know it yes quite
08:01 - is everybody knows what Visual Studio is
08:03 - you have Visual Studio is really great
08:08 - yeah and Visual Studio is very light and
08:11 - beautiful but it's um but it's not like
08:14 - a full-on
08:15 - IDE you know because they're just like
08:18 - editors yeah okay so let's open up and
08:25 - start a new project so I'm gonna go to
08:27 - my command line now let's just make sure
08:31 - that showing the right boat whoops yeah
08:36 - those are the little mistakes on and
08:37 - watch out for there we go
08:39 - yep
08:41 - okay so if I'm coding on this screen and
08:44 - there's no code mm-hmm let me know okay
08:51 - yeah the delays is gonna take a second
08:56 - okay so we're gonna I'm gonna go to my
08:58 - github and I'm gonna create a repository
09:01 - we'll call it what should we call it
09:03 - code daddy's list yeah yeah so this is a
09:08 - code daddy's guys it's a code daddy's
09:10 - series that's what we call it we're
09:11 - gonna go either live or create
09:14 - applications together we are the code
09:16 - daddies this is Frankie this is Aaron
09:18 - this is Kazi let's go okay so I just
09:21 - created the directory just in case you
09:23 - guys don't know how these commands were
09:25 - working we'll open up the finder so you
09:28 - can see but basically I just created
09:32 - code daddy's list right there like that
09:36 - okay cool cool so we got this I'm gonna
09:41 - now another thing I'm gonna do is I have
09:43 - Conda so let's create a virtual
09:45 - environment oh I'll make this bigger so
09:47 - it's easier to see for everybody okay so
09:51 - now I'll make a virtual environmental -
09:53 - Conda create name and we're gonna call
09:58 - this generally I like to call the
10:00 - virtual environment the same as the
10:03 - folder name so we're gonna name it that
10:05 - and I'm just gonna install Python 3 in
10:07 - it for now oh wait yes I like to create
10:13 - virtual environment so everything is
10:15 - nice and packaged in one place okay just
10:23 - be aware this part is blocked yeah this
10:25 - part of the street oh the Brea the right
10:29 - side just be aware okay thank you I'll
10:33 - kind of stay out of there yeah if it's
10:35 - ever getting blocked like let me know
10:36 - from there and also they'll let us know
10:38 - in the chat yeah yeah okay so now I've
10:45 - activated the virtual environment as
10:47 - well cool okay now let's go inside of
10:53 - that directory
10:56 - seedy are you kidding me what are you
11:01 - doing
11:02 - seedy code
11:05 - daddy's list okay we're in there and now
11:10 - we're gonna start creating actually I
11:12 - just lied to all of you guys I'm gonna
11:14 - delete that list because this is a
11:18 - Django project so we actually need to
11:20 - run a Django command to create that
11:21 - folder so what I all I did right now is
11:23 - I just removed that folder okay so we're
11:26 - gonna use a Django command now I have to
11:28 - see what's said Django command that we
11:30 - use here Django admin there we go it's
11:33 - like Django admin start project I just
11:36 - did something called reverse search
11:37 - which is super super useful
11:38 - it's ctrl R so do that like if you guys
11:42 - are watching this actually write that
11:43 - command down it's super useful for the
11:45 - command lines one of the most useful
11:46 - command lines to know control R okay
11:52 - control arm all right
11:54 - Django admin start project and we'll
11:55 - call it code daddy's list like that
11:58 - oh let's install Django pip install
12:03 - Django yeah you can just like run that
12:15 - what the hell's going on
12:17 - Django and command not found Django
12:23 - installed in the virtual environment is
12:25 - it when you create the virtual
12:27 - environment it might not be installed I
12:29 - did install it just now fehb install
12:31 - Django I miss that step yeah Django
12:35 - admin start project running into
12:47 - problems very early on
12:55 - jingle - admin or something is that what
12:57 - it is okay Django admin start project oh
13:09 - it is - you're right
13:17 - Django and man like that okay so now it
13:22 - got created we'll go to code
13:25 - daddy's underscore list okay now there's
13:29 - some kind of django Django admin this is
13:38 - start app or something like that some
13:43 - there is another one these are ones like
13:48 - you always kind of look up these are
13:50 - just to kind of kick start off the
13:52 - project and then once this project has
13:53 - started you can actually just focus on
13:55 - the coding part of it just start at
13:59 - something like start app I think start
14:04 - app so what it is Django admin start app
14:10 - app name so that's what it is okay stop
14:20 - the pack search Django admin start app
14:26 - and we'll just call it my app all right
14:32 - now we're gonna open this up in PyCharm
14:36 - this will also help you guys learn
14:39 - Python pretty well so let's open up code
14:44 - daddy's list will do a new window
14:54 - all right so this is what your guys's
14:57 - directory and everything should look
14:59 - look like as of now okay good point
15:05 - thank you for actually pointing that out
15:07 - because on the live stream it will
15:09 - actually look tiny
15:10 - I'm blurry and blurry so I'll go and at
15:20 - 20
15:28 - I think this will be a lot better right
15:31 - I just made it huge okay now a few
15:38 - things for pycharm we're gonna go into
15:40 - project I'll go in project interpreter
15:43 - and I'll pick this code daddy's List
15:45 - environment that I made so pie chart is
15:48 - pretty smart it kind of detected it
15:49 - already so it it already kind of has it
15:52 - selected to that and then I'm gonna go
15:55 - in the build and exit build languages
15:57 - and frameworks I'll go in Django and it
16:00 - also knows it's a Django project it
16:02 - knows the root of the project
16:04 - it has django support enabled and this
16:07 - is the script cool this is great
16:13 - actually
16:13 - that's awesome yeah i love it
16:22 - okay let's some said another one move
16:28 - this here let's move this guy here okay
16:36 - so because we just built this app
16:39 - recently we're gonna be referring to a
16:42 - lot of code on our end we're gonna be
16:44 - referring to a lot of code from the app
16:46 - that we built but we'll try to walk you
16:48 - guys through it step by step so it makes
16:50 - a lot of sense to you as you're watching
16:51 - it okay so let's kind of build let's run
16:58 - the let's just run the server and see if
17:06 - things are up and running as of now so
17:10 - go ahead hi thon terminal and I'll be
17:12 - like Python managed up py runs server
17:20 - that file has a bunch of useful tools in
17:24 - there and then you just like call it and
17:26 - then it does a bunch of Django still for
17:27 - you so right now we're doing run server
17:29 - so now that we created the Django
17:31 - directory we can just run server and
17:32 - then it just starts running like it's
17:34 - like the basic framework as you can see
17:36 - right there on the screen like it's just
17:37 - working like our website is already up
17:39 - in hosted
17:39 - and all that yeah now it's not most yeah
17:41 - a local local local yes exactly yeah
17:46 - so our and it says install worked
17:48 - successfully so at this point that's the
17:50 - screen you should be seeing okay if
17:52 - you're not seeing this screen then
17:54 - something is off okay so make sure
17:56 - you're seeing that screen okay so we
18:01 - have this up and running
18:04 - now let's uh let's go and create pretty
18:13 - soon what we want to do is we want to
18:15 - create templates so then we can actually
18:17 - render like a basic template that's that
18:19 - when we go to the home page that's the
18:22 - template that shows up so the way that
18:25 - those directories work is I believe you
18:29 - want to create your templates file if I
18:31 - look at the project it should be in the
18:33 - root folder you should have templates so
18:35 - that's what we're gonna do I'm gonna go
18:36 - to my root I will right click here I'll
18:39 - create new directory and I'll say
18:42 - templates okay so we have templates now
18:48 - inside of templates I'm gonna have my
18:49 - app and inside of my app I'm gonna have
18:52 - other stuff so in templates I'm gonna do
18:56 - new first I'll create a base dot HTML
19:01 - base and let's call it the code daddy's
19:09 - list in the title and then we'll just
19:11 - say h2 will give it like testing to see
19:15 - if this works like that okay now this is
19:20 - not just gonna render automatically we
19:23 - have to create a view map a URL and like
19:27 - really make sure that it's it's working
19:30 - but few things we want to do in settings
19:32 - whenever whatever app you guys have here
19:34 - you want to register it in your settings
19:36 - so you got to go to your settings you
19:37 - got to register that app so installed
19:40 - apps we want to install our app that we
19:45 - created like that yeah the cool thing
19:48 - about Django is if you have an operating
19:50 - directory fool he made you can maybe
19:51 - just pop pop it in and then add it to
19:53 - the installed apps and then it's pretty
19:54 - much that's it yeah 99% done you might
19:56 - have to tweak a couple things here and
19:57 - there it was like I don't know I don't
20:00 - want to a hundred percent but I mean
20:02 - it's pretty much on your person yeah
20:03 - yeah like Django does a lot of stuff
20:06 - like automatically so that's what's cool
20:08 - about it
20:09 - okay there are a few things that like
20:11 - you should just literally copy and paste
20:13 - that you should have so that's exactly
20:15 - what we're gonna do so we're gonna go
20:16 - into settings from my previous project
20:19 - and you you want to have like this
20:23 - templates line and this problem you
20:26 - might not need the project route line
20:27 - but let's get this template line and
20:29 - we're gonna paste it here because you
20:32 - want your Django to know where your
20:36 - template is stored okay this is how
20:40 - Django will know and all this is saying
20:42 - is like hey just join the base path with
20:44 - templates so now it's able to find where
20:47 - this templates is and then we got to add
20:50 - this template dur to I believe here so I
20:56 - got a new template dirt like that okay
21:00 - so that's one thing you got to do
21:02 - template dirt and then another thing
21:05 - that you want to do is you want to kind
21:06 - of add static as well because later
21:08 - we're gonna need static so I like to
21:10 - just take care of this in the start cuz
21:12 - this is one of those things that's like
21:13 - super freaking annoying if you don't get
21:15 - it right so I got that static line I got
21:20 - my template der based or static is gonna
21:22 - be my style sheets and things like that
21:24 - so when I'm creating graphics for my web
21:26 - app yep we're gonna create a home view
21:38 - and all this is gonna do is gonna return
21:41 - render and request and it will render
21:47 - the home page so or the base HTML so I'm
21:52 - gonna do temp there's a templates or do
21:54 - I just do I think I can just do based at
21:57 - HTML so this is where you see this is
22:00 - where PyCharm is really jacked right
22:02 - this
22:03 - a string but as I'm writing it and
22:05 - because it can detect it through Django
22:09 - it's coming up and it's also telling me
22:12 - what the argument is right so I can also
22:14 - just I can also like name these
22:17 - arguments yep so right here so I can
22:24 - actually go to that file if I hold
22:26 - command I can click it I've wanted that
22:31 - encoding for like the longest time like
22:33 - even I just like wanted to know like
22:35 - where a variable was assigned or
22:36 - something instead of like searching but
22:38 - I want to see like where things are
22:39 - happening if I can just click on a
22:40 - variable be like oh this variable is set
22:41 - before up here or something like that
22:43 - that's pretty much what that is so pi
22:45 - chat my turn is a pretty beastly about
22:57 - to tell you you just actually put visual
23:00 - things there or what's up cuz in android
23:03 - it's a little bit you can't have to do
23:04 - it more manually yeah yeah there's like
23:08 - one file for everything and everything
23:09 - file does something different with
23:10 - django Django it's kind of cool because
23:13 - you as as soon as you do that Django
23:15 - start admin command or whatever and it
23:17 - kind of structures the stuff for you out
23:20 - of from right from the right off the bat
23:22 - so you don't have to do a lot of work by
23:25 - yourself okay so we got our base HTML
23:30 - now we got a map some URL stuff to it
23:33 - and then we'll be good so I'll in under
23:36 - this thing called my app I will create a
23:39 - I will create a new Python file it's
23:45 - gonna be called URLs okay so you should
23:48 - have two URLs you should have one URLs
23:51 - under code daddy's list and you should
23:53 - have one URLs not py under my app okay
23:57 - let me go to our URLs in the test app or
24:04 - sorry the my app version of this
24:19 - yep okay URLs cool so basically all this
24:28 - is saying is if somebody goes to the
24:30 - home page just to route the view route
24:35 - the view to the home view okay so if
24:38 - somebody goes to a path that's empty so
24:40 - for example this means like clever
24:41 - programmer calm you know that's it not
24:46 - clever programmer calm slash something
24:48 - this just means clever programmer calm
24:50 - so somebody's going to just clever
24:51 - programmer calm well then what I want
24:54 - you to do is go to this view that does
24:57 - this stuff okay so that's kind of all
25:01 - we're doing here so I'm gonna copy this
25:03 - and then we're gonna paste it here we're
25:08 - gonna say from import view so we can
25:11 - have our views and then I'm gonna say
25:12 - from Django dot URLs import path okay
25:22 - alright and then we want to do URL
25:24 - patterns URL patterns equal to there
25:35 - so this should be looking good and then
25:38 - what is in URLs here kind of like some
25:42 - similar stuff include my app dot URLs
25:48 - okay
25:50 - admin site cool so this is another
25:52 - important one we'll add that one right
25:54 - about now oh that one is there what were
26:15 - you what were you saying right now so
26:27 - yeah so I'll show you what the admin
26:30 - when you so I'll show you Django comes
26:32 - with a built-in admin okay so so I'll
26:36 - show you what that means in just a
26:37 - second so we're gonna do Python manage
26:39 - that py create super user oh wait hold
26:45 - on Python manage that py make Mayan
26:48 - creations Python manage that py migrate
26:53 - cool so now that we have migrated now
26:57 - let's create so this is the initial
26:58 - migration right you see 0 0 0 1 under
27:01 - Sorna initial so now we should have this
27:03 - thing called migrations over here now we
27:06 - can create a super user I will call the
27:10 - username admin email address this and
27:15 - then admin again sure cool so now if I
27:23 - go run server and I go back here and I
27:25 - go boom and I go slash admin you'll see
27:28 - it takes us to an admin and if I log in
27:31 - takes us inside on the backend and if I
27:34 - go users there's one user that we just
27:36 - created a called admin but we don't
27:40 - really have anything else
27:44 - how was it how was it this this kind of
27:49 - comes built in with the Python Django
27:52 - built into us this is what what I like
27:54 - about it now if I go to models right and
27:57 - I build like a basic thing so what is it
28:00 - class models that model okay so will
28:03 - create like something called search and
28:04 - I'll do models dot model and okay and
28:16 - basically we'll copy these two lines
28:23 - whoops okay so we got so basically all I
28:29 - did is I'm like hey create so I'm gonna
28:31 - create a database called I'm gonna
28:34 - create a model called search and then I
28:36 - want you to call one of the fields in
28:38 - there like search and I can even call a
28:40 - like search field but let's just say
28:42 - search and I'm saying make all search
28:48 - takes in so search imagine it's like
28:50 - that bar right there so all it does is
28:52 - it just takes in like some input okay
28:56 - that's it and then we should have like
28:59 - one that like timestamps when it was
29:01 - created
29:03 - okay so I'll go here will grab this one
29:07 - and I'll paste it here okay so now
29:16 - whenever you add new stuff to the
29:18 - database what you want to do is you want
29:20 - to make sure that you migrate it to the
29:24 - Python database otherwise it doesn't get
29:26 - stored what I'm gonna do is I'm gonna do
29:28 - a Python manage make migrations and then
29:32 - I'm gonna do CC create new model created
29:37 - yep now the migration is done right so
29:41 - we're gonna go run run server like that
29:45 - I'll hit refresh oh okay so now we're
29:49 - gonna go to UC admin py right from
29:54 - import models and then I'm gonna say
29:57 - it's something like admin dot register
30:04 - board models dot search something like
30:11 - that
30:15 - hold on how is this written admin dot
30:21 - site admin dot side to register and then
30:26 - from dot models import search yeah
30:32 - okay so now when I go here and refresh
30:37 - models is not defined literally it's
30:43 - right here
30:44 - oh my bad
30:51 - so the server stop running let's run it
30:54 - again so now you see it says my app is
30:58 - here because we I integrated it into
31:01 - that interface so we don't have to
31:03 - create an interface for it if we don't
31:05 - want to we can just use Django's like
31:07 - built-in but an interface for work or
31:11 - your app yeah so it's like showing us
31:13 - that database that we created of
31:14 - searches so now whatever you search
31:16 - it'll get stored in here okay yep so
31:22 - it's just kind of getting stored in
31:24 - there automatically and you see how it's
31:31 - as searches like that which is kind of
31:33 - wrong because if it has multiple
31:35 - searches it'll say like that because all
31:39 - what it's trying to do is just trying to
31:40 - put an S in front of it so for certain
31:43 - things it won't work like for search it
31:45 - searches with the es so then there's a
31:48 - little trick we can do which is called
31:50 - we go here we click class meta and then
31:54 - in class meta you want to do what is it
31:57 - verbose name plural and then you just
32:00 - say searches like this go back it's
32:04 - gonna be searches it's it models are
32:14 - like what's in your database yeah you
32:16 - can think of it like a Excel spreadsheet
32:18 - okay so this searches that I just put
32:21 - here it's a column in Excel spreadsheet
32:23 - called searches it's this is actually
32:28 - this is a really good thing that you
32:30 - just brought up so we can actually show
32:34 - it visually right so we can actually
32:39 - model our database code Daddy's list
32:45 - database right searches and then what
32:53 - was the other field we put in there you
32:54 - remember search and what else
33:00 - yep so there are two things that go in
33:04 - there
33:04 - so this sheet is gonna be called like
33:07 - search this is like the search database
33:11 - and it contains searches and it contains
33:14 - when it was created right so for example
33:17 - a search might be like ping pong and
33:19 - then it'll store and say like it was
33:22 - created on August 7th 2019 and and then
33:27 - the specific time right whatever time I
33:30 - down to the nanosecond like it was crazy
33:33 - yeah so that's how you do searches and
33:37 - you got created and and every time
33:39 - somebody like makes a query
33:41 - it'll get stored in okay few things when
33:48 - I add in something here blah blah and if
33:51 - I hit enter you see it says search so I
33:54 - go in and searches it says search object
33:56 - 1 you click into and that tells you what
33:58 - that object contains right it even has
34:03 - these breadcrumbs
34:04 - click searches and I'm gonna click into
34:06 - this it goes deeper search objects like
34:08 - right there
34:08 - so just called breadcrumb so what we
34:10 - want to do is we don't like what it's a
34:12 - search object we want to we wanted to
34:14 - just show us what that is in English
34:18 - yeah so I can I'm gonna do this and I'm
34:21 - gonna say return
34:30 - well the dot format self dot search
34:39 - okay let's see if that does the trick
34:41 - there we go okay so I'm just saying
34:50 - whatever the search was created like
34:51 - returned the search field of it and then
34:54 - it goes okay got you yep
35:02 - instead of like it's saying some weird
35:05 - thing like object how's the chat going
35:07 - bro like keep me up tell me what's going
35:09 - on is anybody asking questions what's
35:11 - happening okay cool nothing's going on
35:26 - chat okay cool so this okay so this is
35:32 - what's creating that string now dad is
35:36 - looking good the next thing we want to
35:39 - do is let's add wait what should we do
35:46 - on the next thing oh yeah let's render
35:49 - the front end now like the basic
35:51 - template that we made remember we made
35:53 - the base this thing so let's render this
35:58 - so now I should render testing to see if
36:01 - this works so we'll go to views it's
36:04 - saying it's gonna render it and then our
36:08 - URLs are looking pretty good so let's
36:15 - give it a try now
36:22 - nope that's not working views
36:46 - I want to do include and then how do you
36:58 - yeah so I want to I want to say
37:01 - something like this from my app import
37:08 - views and then I want to say if the path
37:15 - is this then I want you to include the
37:21 - URLs from my app dot URLs like that I
37:33 - think that should work there you go
37:37 - so we're saying if the path is like
37:40 - empty just referred to the URL mapping
37:43 - that I did in my my app you dot slash
37:47 - URLs that py so now anytime I go to this
37:50 - so here's how it works right when I go
37:52 - to this empty thing it goes to this view
38:00 - and it goes oh the path mashed is empty
38:03 - so then run the home function from views
38:06 - so now let's go to home and home says
38:08 - render the base HTML and basis you knows
38:10 - this okay so that's how would I try to
38:20 - draw it board yeah I think so basically
38:29 - like the very basic idea of what
38:31 - framework is just you specify your URLs
38:33 - right and then specify your model your
38:36 - data first like what kind of data you
38:38 - want and how it's gonna be and then you
38:39 - have your else and where anywhere else
38:41 - just go to some code and I get word
38:44 - renders some front-end stuff let you see
38:45 - email JavaScript CSS whatever you need
38:47 - yeah so URL to code for you so basically
38:52 - like URL
38:56 - to code and then something happens and
38:59 - then front end you look at that code
39:01 - calls the front end code which you like
39:03 - display some HTML line you can like
39:04 - write well you go to this URL run this
39:06 - code do this stuff call these libraries
39:08 - and then display all this stuff yep and
39:11 - then that's really it you're just like a
39:13 - website just consists of a bunch of URL
39:15 - is right so that's kind of makes sense
39:17 - okay so now this is rendering that's
39:21 - pretty good okay what what other
39:29 - functionality should we add now let's
39:31 - compare to this should we add more of
39:36 - the front-end let's start with that we
39:40 - started when you started with your to do
39:43 - this out okay so let's start with the
39:45 - front-end right yeah yeah cool there's
39:48 - not to-do list app there's no to-do list
39:50 - out there it's just Craigslist app
39:52 - there's no to-do list app yeah yeah so
39:59 - we're pretty much gonna be doing it so
40:01 - now we're gonna just build out the front
40:04 - end of this app so let's go ahead and do
40:09 - that okay so you're gonna need a static
40:14 - folder okay which contains your CSS and
40:19 - then you're gonna need some front-end
40:23 - stuff and your index and in your search
40:26 - all right so let's create our static
40:29 - folder now and we're gonna have the
40:31 - style sheet in there and your static if
40:36 - you notice it has to be created at your
40:40 - root directory okay so we're gonna
40:44 - create static for ourselves in that root
40:47 - directory like that and inside of the
40:53 - static will add another directory gonna
40:55 - call CSS and then inside of here we'll
40:59 - have a stylesheet and it's gonna be
41:01 - called style
41:06 - okay and I'm gonna go ahead and steal my
41:09 - stylesheet because otherwise this
41:11 - tutorial will literally take 20 days
41:19 - okay I'll explain some of this stuff but
41:25 - yeah other stuff is actually not that
41:27 - necessary for you to know there's
41:29 - actually you don't even have to do a lot
41:31 - you actually can pretty much leave your
41:33 - stylesheet empty as of now okay like
41:37 - I'll actually say for now you could if
41:39 - you're following this tutorial you kind
41:42 - of leave your app stylesheet empty so as
41:44 - we're building it I'm just gonna leave
41:46 - it empty as if now oh and then one thing
41:53 - always kind of do this always like sync
41:55 - your project with github so I'm just
41:57 - gonna do it you can follow along you
41:59 - don't have to like do everything but you
42:02 - should do some of it okay so I'm gonna
42:05 - create a git ignore file first this is
42:07 - important get ignore I'll add an idea in
42:11 - here so it removes any JetBrains stuff
42:13 - and then I'll write Python and then I
42:17 - will hit generate so now it won't add
42:20 - any like dumb stuff to my git I'll go
42:23 - create a github repository repository
42:28 - new new and what should we call it code
42:34 - daddy's list mm-hmm like that cool I'll
42:38 - initialize this repository with the
42:41 - readme and we'll do create cool now I
42:47 - will go like that I'll say git remote
42:57 - first I gotta get in it huh what the
43:05 - hell I had that's weird
43:11 - I had Xcode okay this is super annoying
43:18 - if you keep tapping enter really fast
43:20 - and then it asks for a yes or no and if
43:22 - you miss it then you got to start all
43:24 - over again
43:41 - this is fun if you get all into the end
43:48 - with the spaces then it kicks you out
43:49 - yeah because it knows you were trying to
43:51 - skip it fast so you have to hit enter
43:54 - all my goodness yes if you're watching
43:59 - this and replay to skip this part
44:00 - probably there goes my monetization type
44:10 - print to print anything else by tapping
44:14 - agree you're agreeing great agreed okay
44:19 - get in it
44:20 - there we go see how easy that was if
44:22 - your gate doesn't look that cool like
44:25 - mine does it's because you're on the
44:26 - poor version you have to get Z sa z SH s
44:31 - free so you get Z SH but if you're on
44:34 - Windows you're gonna not be able to get
44:36 - it which most of you are so the Windows
44:40 - command line sucks as pure garbage I'll
44:42 - throw your windows laptop out get a
44:44 - [ __ ] Mac you're you're gonna have so
44:49 - much not still sucks it's garbage
44:51 - you're garbage unless you're a
44:53 - professional developer even then is
44:55 - gonna give you a lot of pain
44:56 - so I just throw your windows computer
44:58 - out make your life easier or learn how
45:00 - to use vagrant and then you'll be in a
45:02 - much better position okay learn vagrant
45:05 - it'll help you but in between answer use
45:10 - baboon like get a good command line for
45:13 - Windows and then you have a chance okay
45:15 - otherwise every tutorial you're gonna
45:17 - try to follow you're gonna have so much
45:18 - trouble you're not getting able to
45:19 - follow it so that's why I say that all
45:24 - right let's continue so we did get in it
45:26 - and now we want to make sure that let's
45:31 - see what's happening here okay so dot
45:35 - idea should actually be ignored
45:45 - like this should be being ignored so now
45:48 - I'm gonna try again
45:50 - yeah now the idea isn't showing up now
45:52 - only the good stuff is showing up great
45:57 - so I'm gonna do get Ad dot git commit
46:02 - initial commit and then we will do get
46:10 - pull or git remote add origin and I will
46:16 - paste the URL here's the URL okay so now
46:26 - if I do get remote - git remote - V you
46:30 - will see that the remote the repository
46:37 - is linked the one that we just created
46:39 - remember so now it's linked right now
46:42 - it's empty right once I push the code
46:44 - all of my code should be here that's in
46:46 - the code daddy's list right now this is
46:49 - so annoying stop showing his stupid
46:51 - error okay git add nothing is being
46:59 - blocked right Oh dudes arm commands
47:03 - being kind of blocked or make it smaller
47:11 - maybe it looks good whenever ok get so
47:25 - that's looking good now what we want to
47:28 - do is git push get pull origin master
47:35 - I'm still probably getting blocked
47:37 - they're refusing to merge unrelated
47:41 - histories
47:44 - okay how about get push
47:56 - it was giving me a problem with
47:59 - basically this readme dot MD which is
48:02 - almost empty so I can literally go and
48:07 - delete this I don't I don't need this
48:09 - right now
48:11 - okay get push origin master get push
48:19 - i'll force the issue get push force
48:22 - origin master and now when i refresh all
48:27 - of my code should be here just like that
48:30 - now I'll create a readme as well and all
48:37 - it'll say is this is a let's do that
48:42 - because it's a markdown file this is a
48:46 - craigslist clone called code
48:54 - daddy's list okay now we'll add it say
49:02 - add readme get push origin master so now
49:08 - when i refresh this you will see the
49:10 - readme file get rendered here soon there
49:14 - it is so this is a Craigslist clone
49:17 - called code daddy's list okay I don't
49:22 - know why I didn't register it as
49:23 - markdown but whatever I don't care all
49:27 - right so let's go back to what we were
49:34 - building what part should we add now
49:39 - Frankie you tell me
49:47 - maybe the banner on the top or maybe so
49:52 - start with a banner yeah okay so we'll
49:56 - start with the banner there's like a
50:09 - black bar at the bottom so like it
50:10 - doesn't matter what happens to the
50:11 - webcam but it's blocking all commands
50:13 - that you're typing in because I don't
50:21 - know what Aaron's talking about dude
50:22 - this is YouTube yeah this is oh this is
50:25 - how it looks on YouTube all the ways
50:27 - there's a little bar at the bottom dude
50:29 - there's no black font you know what I'm
50:32 - talking about useful yeah cool so let's
50:41 - add the snapper yeah yeah okay okay
50:48 - where do we go these things
50:55 - we add them to the search you like
50:58 - preferably yourself to do all these
51:01 - things all these methods and callbacks
51:04 - that get the min and Max value or
51:06 - actually start doing the the visual
51:08 - stuff first cuz you know sometimes you
51:10 - start doing all the functionalities and
51:11 - then you get wrapped up in that and then
51:13 - you get a little bit confused when
51:14 - adding the visual parts of it right what
51:17 - do you do
51:17 - I personally is cutting off right there
51:22 - on the screen so it's blocking all the
51:24 - commands I don't know what's going on
51:26 - but all that on that word is getting cut
51:32 - off like read off here right I know why
51:34 - because we have it zoomed in on OBS so
51:39 - what I can do is just move to screen oh
51:46 - yeah a lot of the bottom is getting cut
51:49 - out a lot
51:52 - now it should be better no no it's gonna
51:56 - be completely better yeah you'll see
52:00 - yeah I'll come up in like a few seconds
52:02 - yep okay so yeah that's a good question
52:08 - my answer to that to be honest and you
52:10 - might have to come in here a little bit
52:12 - cuz you now work right so my answer to
52:18 - that is I generally like to do the
52:22 - backend stuff first I hate the front-end
52:24 - because like okay think about this right
52:28 - on front-end you're putting like a
52:30 - pretty button and then you're trying to
52:32 - change colors for like eight hours yeah
52:34 - right like that's not you're not making
52:36 - that much actual progress whereas on the
52:39 - backend you're like actually making all
52:41 - the progress like that's where all the
52:43 - functionality so I like to just do the
52:44 - backend and then front end like you can
52:47 - do it anytime that's like the easy part
52:49 - and then start that's not a real friend
52:53 - developers gonna get triggered yeah I
52:56 - don't care
52:56 - there should that's easy work okay so
53:05 - I'll just hire out front-end developer
53:09 - from up work
53:12 - okay so we got so let's build out the
53:16 - bed but I want to build like the
53:18 - front-end so people can see it
53:19 - you know everybody's watching it cuz
53:21 - that's they'll find it cool so let's
53:23 - build out like basic front-end
53:25 - functionality here alright so in our
53:32 - base side HTML what we want to add is
53:35 - the materialized theme okay so I'm gonna
53:40 - I'm gonna add that in okay so I'm gonna
53:43 - basically copy a lot of this code like
53:45 - you need static files you need load
53:47 - static so that that stuff just does some
53:51 - basic stuff I'll go here
53:56 - some basic stuff got it yep we're gonna
54:00 - call it uh Co daddy's list okay so a lot
54:09 - of these commands kind of just like come
54:11 - these are boiler plates I am here I'm
54:16 - linking to my stylesheet which is here
54:20 - here I'm adding materialized CSS so
54:25 - materialized is pretty cool materialized
54:32 - code right here okay this is what gives
54:42 - the style yeah it looks like this
54:50 - ugliest [ __ ] yeah once you have it
54:53 - styled materialize it won't look like
54:54 - this anymore you'll you can add cooler
54:57 - stuff you have to build things from
54:59 - scratch you know I hate building things
55:01 - right it's just like somebody spent a
55:04 - lot of time writing CSS and like stored
55:06 - it as a library and then made functions
55:08 - and stuff like easier for you to call
55:11 - yeah oh not just beginners dude a lot of
55:20 - developers do this [ __ ] like I'm like
55:23 - CSS like how long does it take to
55:24 - remember all the little syntax and if
55:26 - you're off by one little space and this
55:28 - and that and then you have two more like
55:29 - the arbitrary name of the of the field
55:31 - and then it's like Oh was it character
55:33 - size or you can rule your life away that
55:35 - way yeah - sighs or was it character dot
55:37 - size or character space side like what
55:40 - or under slight you waste all this time
55:42 - for nothing
55:43 - yeah it's just useless ginger-beer by
55:46 - the way guys yeah because there's like
55:48 - five five ways of doing the same things
55:51 - yeah crazy yes it's a stupidest thing I
55:54 - think this is why most developers are
55:56 - not actually good even when they're good
55:59 - because they're doing stuff like I was I
56:01 - build better apps some of my like
56:03 - mentors who I was paying and they had 35
56:07 - years of experience in coding and they
56:08 - were fast as [ __ ] they were amazing but
56:11 - the reason why I built better things as
56:14 - I just used libraries look I just use
56:16 - better resources whereas they kind of
56:19 - got off on the fact that they could
56:20 - build it from scratch and like write the
56:22 - algorithm for the CSS and I'm like feel
56:24 - smart or just use flexbox you know you
56:26 - can get a PhD degree in math and like
56:28 - figuring out how the Flex like you know
56:30 - remember we were talking about how the
56:32 - sizing works of the images or you just
56:35 - use flexbox I never use my like don't
56:41 - use your brain when you're coding like
56:43 - unless you absolutely have to like copy
56:47 - paste Stack Overflow it's like literally
56:54 - obviously you know there's a joke it
56:57 - says there is like beginners copy paste
57:01 - or something like that and then they're
57:03 - like pros know what to copy paste and
57:05 - where to paste it you know what to copy
57:07 - and where to paste it so you still have
57:11 - to be smart in like where your copy
57:13 - pasting and how it's working but I don't
57:16 - use my brain power until it's a new
57:19 - problem I'm solving I don't like to use
57:21 - my brain power for just random stuff so
57:24 - like all of this stuff like front like
57:26 - this what we're gonna be building right
57:27 - now most of it it's like okay I have a
57:29 - design in mind that kind of looks pretty
57:31 - and I just want to move on follow it and
57:34 - then move on and then where I really
57:36 - want to think and problem-solve is where
57:38 - there are unique things like the web
57:40 - scraping part you actually problem-solve
57:42 - outside of that you don't need to keep
57:44 - problem-solve everything from scratch so
57:48 - there we have it these are our style
57:50 - sheets that we're gonna be needing for
57:51 - this let's just run server for now and
57:57 - see what's happening style sheets
58:01 - working
58:02 - how long does it take to land your first
58:05 - clients web developer if you just start
58:07 - today
58:07 - um fast did you do it I did it I got my
58:10 - first client in three months three
58:12 - months yeah but you were busting your
58:14 - ass yeah so for normal people you have
58:16 - to do like 10 hours of coding every day
58:19 - for six months and maybe you'll get a
58:22 - client I just did 15 to 18 hours a day
58:26 - for every day for a really long time
58:29 - yeah so that helped me improve a lot
58:33 - faster you know like okay guys let's
58:39 - move on to the next portion what's the
58:42 - portion we should move on to now all
58:44 - right
58:44 - add in the bar right okay cool let's add
58:48 - in that nav bar so luckily the nav bar
58:52 - code kind of comes with this app I'm
58:56 - just gonna copy paste it from here
58:58 - this is the nav bar code so there's a
59:03 - container class and then a nav wrapper
59:07 - class okay so there these are two
59:09 - classes we're using and then what this
59:13 - is saying is that right code daddy's
59:15 - list the URL the link is just home the
59:19 - link is route yeah you know okay perfect
59:23 - on mobile move it right and then just
59:26 - write home on the right hand side and
59:29 - then the link should just take you to
59:30 - the home route cool HTML so there it is
59:43 - when I click it takes me to the home
59:45 - page click it the reason why I added
59:47 - container here guys is because whoops if
59:54 - I remove this right I have it like this
59:58 - when it's not in the container you see
60:00 - how it's just wide container just
60:02 - contains everything you want to put
60:04 - everything in a container because you
60:05 - want to be able to manage it later
60:09 - interactive well still interactive it's
60:12 - not that it's not interactive it's just
60:16 - all in container that does like this is
60:19 - a container and now everything that goes
60:21 - will go within here from here yeah you
60:26 - could make the container wide open like
60:28 - if everything's in a container you have
60:30 - control over that container you don't
60:31 - have control over well okay so guys
60:48 - here's the here's though if you can't
60:51 - wait for the source code here's the one
60:53 - that's already up there so if you go to
60:56 - Craigslist scraper it's not here but
61:02 - this one you're gonna have trouble
61:03 - making it work but yeah go ahead and use
61:05 - this one if you want if you can't wait
61:07 - this is the link just look at the link
61:10 - in the URL up there that shouldn't be
61:11 - fine okay
61:15 - but just wait for us to make this one
61:19 - that we're working on right now because
61:20 - that's gonna be the clean one wait
61:23 - somebody already started oh [ __ ] Stewart
61:29 - Stewart is on it okay cool so we got
61:37 - this now what we want to do is we want
61:40 - to add you want to add search bars and
61:41 - stuff like that mm-hmm
61:43 - okay so we're gonna add search bars and
61:45 - stuff like that okay so you got a
61:50 - container okay we got this container
61:57 - right here this container should really
61:59 - be just all of them so like this code
62:01 - should actually be better the container
62:04 - should just be at the top right there
62:05 - and then everything else should just be
62:08 - and underneath it and then this should
62:09 - just not have the container like this so
62:14 - basically the change we're gonna make to
62:16 - our app right now is we're just going to
62:18 - remove this container and we're gonna
62:21 - add one
62:23 - container right here okay whoops
62:35 - like that okay let's just double-check
62:39 - this is working oh that does not look
62:46 - like it's working bad idea let's add
62:53 - this container here anyway and we'll
63:01 - probably gonna have to remove this
63:02 - container at the top yep
63:04 - boom let's remove dad's for now boom
63:10 - there we go
63:11 - back to back to where we were guys okay
63:20 - so there we go now okay so I'm gonna
63:36 - copy paste this part and then I'll
63:37 - explain it as I go okay well we're
63:41 - trying to do here is I get I'll put one
63:45 - just so you can get the idea
63:53 - no no no no no no no no no no no okay so
63:59 - I wanted to write what do you want to
64:01 - search for on code daddy's list we don't
64:05 - need that line that says testing to see
64:10 - if this works we're gonna need we have
64:18 - body right there we have body ending
64:19 - here and Wiser's complaining stop
64:23 - complaining what does it say element div
64:27 - is not closed okay there we go
64:38 - cool refresh
64:40 - okay that's gone so all we've done is
64:42 - we've added this and then we've added
64:43 - this okay now for this what we're using
64:46 - is something called flex box flex box
64:49 - allows you to add images where they
64:51 - don't get like here we'll go to code pen
64:55 - IO on our flex box automatically
64:58 - changing its size automatically and want
65:00 - to close it more automatically
65:02 - automatically it's figuring it out on a
65:04 - mobile device and it's keeping each
65:08 - thing equally separated automatically so
65:10 - instead of having to do some complex
65:11 - math flex box just makes it super easy
65:14 - yeah like literally coding this yourself
65:17 - would probably take days and weeks to
65:18 - get it all correct
65:32 - okay so there you have it right and now
65:36 - when we're doing this it's automatically
65:38 - changing everything is working now
65:40 - what's what would happen normally here
65:42 - is like these will be images or whatever
65:43 - so if you're having images you want them
65:46 - to be in a flexbox contained not super
65:50 - messy all over the place it contains and
65:53 - then it makes it just it understands how
65:56 - bullet points work and images work and
65:58 - things like that yeah so let's get out
66:01 - of there so that's why we're using
66:02 - flexbox okay so what I've done here is
66:07 - this part right here right over it says
66:09 - div class row so for a flexbox what you
66:12 - need is you always need one everything
66:17 - that's like in a row here this is one
66:18 - row then you can have another row so
66:20 - then every the second row will be like
66:22 - below heat this one okay yeah so we have
66:29 - one row and then in that row you want to
66:32 - put like hot what's look what's the size
66:34 - of the thing that you want so you could
66:36 - have like s4 or you could do s12 and now
66:41 - change the size so if I go here it'll
66:44 - change the size of it or if I go four
66:46 - it'll know what to do okay so like if
66:50 - you keep changing the size of it you
66:52 - could have like ten images in a in one
66:55 - row or if you change the size of it you
66:58 - could have only two images in a row
66:59 - because each image is gonna be huge
67:01 - it's the I'm saying to that to the
67:03 - number that you're right so you want to
67:05 - make the column debase on that right so
67:08 - I chose us for what's happening over
67:11 - here is the following this is what I did
67:15 - so I wanted to get this I want to get
67:21 - this icon hmm okay well how do I
67:24 - actually get this icon so when I go on
67:36 - components icons okay icons cool so it's
67:41 - like yeah like how do I get these icons
67:43 - right Wow
67:44 - if I go to lightning or if it's called
67:48 - flash underscore on and when I do
67:55 - inspect here it kind of shows like what
67:57 - they did to bring it so they did a
68:00 - material icons medium icons em right
68:12 - they just have the pictograms slash like
68:15 - icons like built in and you can just use
68:17 - them so for example I can just pop this
68:20 - icon in go to the code and hit refresh
68:25 - and like it's there right so that's the
68:29 - that's a really cool thing about it
68:31 - which it which is awesome you can just
68:34 - use but these are materialise icons so i
68:37 - don't even have to do anything extra I
68:38 - have to go to like there's there's this
68:41 - website for icons for front-end you
68:44 - don't have to go there you just get them
68:45 - from here
68:45 - and then what I did is I gave that icon
68:48 - a color so I gave it the specific color
68:50 - that's why it looks like this instead of
68:54 - black right and then it's called flash
68:56 - on okay and then I wrote some copy frags
69:00 - list web scraper Craigslist web scraper
69:04 - and then I wrote some more copied right
69:05 - underneath it that says scrape away
69:07 - right here with a beautiful gooey cool
69:13 - alright so now I'm gonna go ahead and
69:19 - I'm gonna copy one more guy from my app
69:27 - that I created earlier
69:34 - okay filter your searches we built in
69:38 - functionality filter based on pricing
69:40 - and then I'm gonna copy one more guy
69:58 - okay yeah just please make sure that
70:01 - it's good just make sure it's good if
70:06 - it's not good then let me know but I'm
70:11 - not coding there right and that's where
70:16 - it cuts off yeah but I'm not touching
70:18 - most stuff up there so it's okay I'm
70:20 - fine because otherwise I would have the
70:22 - I can't zoom out anymore of the screen
70:24 - so something has to give like the bottom
70:27 - has to give or the top has to give and I
70:28 - realize bottom is more important most of
70:32 - the times okay so we got so I added all
70:38 - of those in Nautilus refresh we got all
70:41 - the icons and everything cool so now
70:45 - what we need is the search bar okay
70:55 - another thing you want to do guys is the
70:59 - following we also need this script by
71:02 - the way and right before body tag right
71:11 - cool yep and then we want to put
71:15 - everything in a container starting from
71:17 - here so I'm gonna go here and I'll say
71:19 - div say class equals container boom
71:31 - pace well there we go okay all right
71:40 - and now what I want to do is I want to
71:44 - turn base a dot html' into something we
71:47 - can keep using in all or other templates
71:49 - so we want to create like a base dot
71:53 - HTML and then we wanna be able to just
71:55 - use it everywhere so we're gonna create
71:58 - this thing called block content and end
72:00 - block content so we don't have to it's
72:05 - according to like the DRI principle
72:07 - do not repeat yourself there okay so I'm
72:20 - gonna go in templates we will create
72:23 - another directory you should be called
72:25 - my app I guess and then inside this
72:28 - directory we'll create a HTML file and
72:30 - it'll be called new search dot HTML
72:39 - based hTML is gonna be the home home
72:41 - page and then if you create a new search
72:44 - then the new search page is gonna open
72:46 - yeah open up somewhere else yep but
72:49 - because beta even the new search page
72:51 - should inherit a lot from base HTML
72:53 - we're gonna we're gonna do something a
72:55 - little bit yeah so we have the new
72:59 - search dot HTML now we want to be able
73:03 - to create a view for it so then we can
73:05 - actually go to it at some point
73:07 - so you see how the container brought
73:09 - everything in in that was why we did it
73:13 - okay so let's go to views define what
73:21 - did we call it in this app new search
73:27 - George
73:28 - so request and then we'll say return ok
73:35 - and we'll say
73:40 - my app slash new search okay now we just
73:47 - need to create a URL for it I'm gonna go
73:51 - here and I'll say if anybody goes to new
73:54 - search like this this yeah yeah you're
74:02 - getting it right awesome I love it we're
74:05 - gonna say go to the new search function
74:07 - that we created and we're gonna give it
74:09 - a name of new search okay so now if I go
74:18 - to slash new search as it being rendered
74:27 - blank
74:29 - okay let's refresh it's all here so we
74:33 - want to do instead is we want to inherit
74:36 - from X we want to extend base dot HTML
74:42 - new search and then outside of that
74:45 - we'll want to say new search ok so now
74:53 - what you're gonna see something cool
74:54 - happen where the house where do the hell
74:59 - does this a new search
75:01 - Oh yep we're gonna create um we're gonna
75:04 - do start or wait what is it start block
75:09 - content or block content like that and
75:13 - then we're gonna say end block and I'm
75:14 - gonna put it in there right and now boom
75:19 - okay so you know how in the base we said
75:23 - block and the block so what's happening
75:26 - is it's inheriting everything from the
75:28 - base and anything that goes in between
75:30 - here it's added on right so for example
75:35 - if I show you the code it's pretty much
75:36 - gonna be the same code except for
75:38 - whatever is in [ __ ] sandwich in between
75:39 - block content and block content
75:42 - everything in the new search is gonna be
75:44 - to keep the base HTML template going yep
75:48 - so okay now if I do view page source
75:53 - probably have to come more this way if I
75:56 - go into page source you see how the code
75:59 - is the same as basis HTML yeah even the
76:02 - script part is here the only thing
76:05 - that's new is it ok so that is looking
76:15 - great our new search template is working
76:26 - but now what we want to do is we want to
76:27 - create like a form so people should be
76:30 - able to type stuff in there and then hit
76:32 - submit on it action is where once you
76:39 - submit that form what URL it takes you
76:41 - to so we want to do is like how does it
76:47 - work URL new search like this bad I
76:55 - think
77:00 - there okay and then we got to have a
77:06 - method and the method is gonna be post
77:10 - okay when you do forms you want to do
77:13 - not get method but post methods we will
77:17 - have some input and the input will say
77:23 - type text and then we'll say name is
77:27 - search and then we'll say Val Val you
77:32 - search something like that actually when
77:37 - you just need placeholder I think okay
77:42 - so now search with the placeholder you
77:46 - see the placeholder yep I don't need
77:51 - this guy anymore I can just have this
77:53 - but now we need a button so we are gonna
78:03 - do input type submit okay and then we'll
78:12 - give it a name of submit there so CSRF
78:21 - verification failed all that means is we
78:24 - just need to add is CSRF token in Django
78:28 - security feature and then as soon as you
78:30 - add it this should go away okay oh let's
78:34 - try again
78:40 - that's it you don't have to add a
78:42 - functionality to the button what the
78:44 - hell CSRF token is missing
78:49 - interesting it's lowercase with
78:53 - underscore right okay si s RF or si si s
79:00 - RF ya CSRF token hold on what templates
79:13 - new search
79:32 - that's what I had earlier oh maybe I
79:41 - just need to like start the server again
79:49 - there it's fixed so now it's sending
79:53 - okay now it's sending the actual post
79:55 - request I think what you can do is like
79:57 - you can go inspect and you can go in
80:00 - network and I think if I hit submit it
80:04 - shows you new search like what was
80:06 - submitted preview you can do headers and
80:08 - it says it was a post request 200 it got
80:13 - sent correctly like if I change it to a
80:15 - get request and I hit it you know and I
80:20 - click it they'll show me like preview
80:23 - what it was it shows me what it was and
80:24 - then it says probably have to refresh it
80:28 - or something or whatever but you get the
80:33 - idea right requests remote address and
80:35 - then it tells me all this other
80:37 - information with it like if I did hello
80:41 - and I hit enter then you'll see not only
80:45 - will I get this but I'm sure that I will
80:49 - also get the value that was in that
80:52 - field search so I wrote hello right yeah
80:56 - I just got access to that hello so
80:59 - that's how you will pull this data out
81:01 - so by just putting a button on the
81:03 - actual form mm-hmm by default if you
81:06 - like did you actually put the the method
81:09 - to submit it or you can just choose it
81:11 - to submit it yep
81:12 - you just choose it to submit it an HTML
81:14 - comes built-in or that functionality
81:22 - from the Java class from your java
81:25 - classes that you made you know
81:32 - damn that's painful dude well we got to
81:38 - do some flutters stuff too at some point
81:42 - okay so we got this we're just gonna
81:45 - keep search functionality for now what
81:53 - does this look like okay it's got a
81:55 - container right so that's probably why
81:57 - it looks like that so our base HTML
82:05 - there's a container here and then it
82:08 - ends right here so I'm gonna end the
82:09 - container here that way everything is
82:12 - wrapped inside of that container there
82:16 - you go
82:17 - looks better now okay so we have the
82:21 - search functionality we have the ugly
82:23 - submit button I'm sure we can get a
82:26 - better prettier button
82:27 - let's look oh my god these look juicy
82:30 - right yeah let's use these [ __ ] the ones
82:33 - we hook the one you were using
83:00 - thanks materialise let's just make sure
83:09 - that it's working as expected let's go
83:12 - Network hit this new search pose oh wait
83:24 - oh there we go Fifi cool cool got it man
83:32 - that's nice
83:35 - send what if I did flash on what that
83:41 - work you can like add stuff because the
83:54 - button is like a container itself is
83:56 - like a little container what it is it's
83:59 - just a box so you can put whatever you
84:00 - want inside love that okay so that's
84:06 - great what else do we need Kazi man you
84:21 - demand yeah yeah will be recorded yeah
84:24 - guys just do me a favor guys our YouTube
84:27 - is [ __ ] dying for some reason I know
84:29 - what's happening it's that [ __ ] like
84:32 - here I'm gonna pull up some socialblade
84:35 - I know what the hell is happening guys
84:37 - like we're producing more content than
84:39 - we've ever had and YouTube is about to
84:42 - die look at this I have zero idea why
84:46 - we're producing so much content just so
84:50 - if you could just do us a favor please
84:52 - give it a like or share it or something
84:55 - but like we really need your help
84:56 - because YouTube is just choking us we're
84:59 - producing original content we're working
85:01 - our ass off to make really good content
85:04 - for you guys but YouTube just keeps
85:06 - choking us so if you could just like it
85:08 - and then share it that'd be awesome
85:09 - let's continue making this [ __ ] app
85:11 - I'm pumped
85:15 - okay materialise have any nicer search
85:19 - functionalities or whatever yeah or it's
85:27 - fine I guess
85:32 - a little bit shorter yeah it's not bad
85:34 - right it's fine
85:40 - freeloader Hotels preloader Oh - yeah
85:52 - but then how do I stop it
85:55 - yeah but how I I want to think about it
86:02 - okay guys but let's let's just focus on
86:04 - what we were working on what's
86:07 - collections that looks fun components
86:13 - and buttons all right so we have a
86:16 - good-looking front end over here
86:19 - somebody just sent it like that right
86:21 - now thank you so much appreciate your
86:22 - face appreciation the face buddy thank
86:30 - you yeah that's great okay
86:35 - so now we got this foreign button now
86:37 - all we need to do is when somebody types
86:39 - in should we just now get to the part
86:42 - where somebody types in spits back some
86:44 - kind of results or something okay so
86:51 - let's create the front-end for it -
86:55 - we'll just do the front-end part right
86:57 - now so let's go - how did we okay
87:07 - alright so let's going to views and what
87:10 - we're gonna hopes wrong views views what
87:16 - we'll do is we'll just pull data out of
87:18 - the search bar for now so whatever you
87:21 - put in the search bar let's pull that
87:23 - out okay okay so what we'll do yeah so
87:29 - we'll say new search is equal to oh
87:32 - let's not call it the function name
87:33 - because it could get pretty recursive
87:34 - okay
87:36 - yeah okay request our post get new
87:43 - surgery oh no I just searched
87:46 - yep so what we're doing is we're pulling
87:50 - out what happens when I go late so we're
87:55 - going here and we're getting this okay
87:59 - so this is request because it's a
88:03 - request and then we do dot post because
88:05 - it's a post request
88:18 - so it's a post request right that's what
88:20 - we do dot post and then we do not get
88:22 - and then we're like search okay this get
88:24 - is not to be confused with the post
88:26 - method and get method this is get as in
88:29 - Python dictionary get because request
88:32 - that post returns dictionary yep it
88:37 - confused me too until I just taught it I
88:39 - like teaching
88:41 - yes because you don't really like
88:43 - actually think about it
88:44 - no I know for HTTP requests it's always
88:47 - all caps so I when I see get I just get
88:51 - when I see all caps then I think HTML
88:53 - yeah every HTTP makes sense okay all
88:59 - right so we're getting this so I'll do
89:01 - prints search just so we can see it in
89:04 - the console if somebody types it in I'll
89:06 - do this and submit and a few few write
89:10 - Python tutor it's a mint Python tutor so
89:16 - we're getting access to it now we're
89:17 - gonna send this to our front end okay so
89:19 - I called this variable stuff for
89:21 - front-end I make it real easy so we're
89:26 - gonna call it we're gonna say search was
89:31 - the variable search okay later we're
89:34 - gonna be adding more stuff to it so let
89:36 - me just make the dictionary look like
89:37 - this okay and then we're gonna send this
89:41 - to our front end so we'll say con this
89:45 - is gonna be a context dictionary so I'm
89:47 - gonna say stuff for front end then well
89:50 - I'm gonna go into new search and I'll
89:52 - just say that Oh
90:02 - this form should be rendered in bass
90:10 - this should this should be getting
90:12 - rendered in bass I'm pretty sure because
90:16 - bass needs to have the search
90:17 - functionality and otherwise it's like
90:18 - silly you know what I mean yep and so
90:29 - now what we're gonna do is you could
90:35 - never get there in the first place right
90:37 - you would have to like hard-code type in
90:39 - new search at the top which it won't
90:41 - make much sense okay so we're gonna say
90:45 - what are we gonna say oh yes so we have
90:49 - access to that variable so let's just
90:52 - print it out search and now when I go
90:58 - here and I hit refresh and I do if I go
91:02 - back to the home page and I go hello
91:10 - yeah it's like actually writing it into
91:13 - HTML so now what I'll do is I will add
91:16 - h2 here like this I'll add another h2
91:21 - right there and now look big and now
91:26 - what I'll do is style text-align:center
91:30 - so now it's gonna be centered and now
91:34 - another thing I want to do is if I'm
91:36 - writing like this or whatever right if
91:39 - I'm doing Python to tur it looks silly
91:44 - right so what I want to do is pass it
91:48 - the filter called title so then what
91:50 - that does is that no matter how you
91:51 - write it
91:52 - it'll title it just forces like Python
91:55 - which you every word per like that right
91:58 - I'll still do it okay
92:05 - we're so fast dude who's making apps us
92:08 - fast nobody pretty ups playbacks
92:28 - dude if we hit thousands in the live
92:31 - stream every time playbacks that's
92:33 - pretty good it's really good
92:34 - and then concurrent viewers I guess we
92:37 - can solve this problem too at some point
92:39 - because if we just keep coding people
92:40 - are just gonna keep coming in you know
92:42 - oh I guess we could have told our pipe
92:46 - Instagram to like swipe up or something
92:48 - who cares
92:51 - alright let's go alright alright
92:58 - tiny reg I mean okay so know what we're
93:13 - gonna be doing is I'm just gonna make a
93:19 - simple card for you guys right now so
93:21 - you guys can get the idea of what we're
93:23 - about to do okay a lot of this code
93:29 - before you start freaking out and sort
93:32 - of panicking this is coming from a
93:35 - little bit of here okay
93:38 - well we wanted to do is we wanted to
93:40 - make like when we get the results back
93:42 - we wanted to get them in like card
93:44 - format so like the Craigslist picture
93:48 - could show up here and then the text
93:50 - could show up right underneath it and
93:51 - then the link would show up right
93:52 - underneath that and that would look
93:54 - really really cool that's kind of what
93:56 - we wanted to do there's like a grid of
93:59 - course yes so that's kind of what that's
94:01 - all we're gonna do right now we're just
94:03 - gonna like add that grid of cards that's
94:06 - it okay except nothing will be all of
94:12 - these will be you know
94:14 - just right now we'll have it be like
94:17 - this okay so test everything will link
94:33 - just back to the homepage for now and
94:35 - then it'll be like test price okay
94:44 - so if we go back hit refresh
94:47 - oops okay so we don't have an image but
94:55 - if we were to add
95:03 - another one of these guys and then
95:05 - another one of these guys this is how
95:12 - it's looking right now right well that's
95:15 - because we don't have flexbox no we
95:18 - don't have Rohit oh so we need a row
95:23 - above this class equals row okay okay
95:38 - there we go
95:41 - you don't have to specify columns to do
95:46 - that what's up you know in columns you
95:50 - use as four rows you do that hold on let
95:54 - me just see what's happening right now
95:55 - something is were awfully wrong okay
95:59 - so div div class card card imaged if
96:08 - those card content content okay so now
96:15 - this needs to end right there
96:22 - yeah Rhaego we're missing a closing tag
96:25 - for almost all of them I think right
96:28 - there yeah that would make sense the
96:33 - other makes a lot of sense there we go
96:40 - so this is what its gonna look like
96:43 - we're pretty close we can add some dummy
96:47 - images in so let's just go get a puppy
96:50 - image go here we'll grab this I'm gonna
96:58 - do copy image address so if I do paste
97:02 - it should take me directly to it I used
97:11 - to do that too yeah I used to do that
97:13 - too Thanks yep so we're gonna go here
97:18 - paste it and delete this then copy this
97:22 - and then paste this and delete this go
97:26 - here you go here paste enter all the dog
97:34 - will do puppy so it looks like we
97:37 - actually searched it up even though we
97:40 - didn't okay now we actually need to add
97:45 - the real functionality we've added the
97:47 - front end and let's add functionality
97:54 - for the code for the beautifulsoup part
97:58 - of it now so we're gonna go views I'm
98:01 - gonna go right here now so from Jango
98:04 - from PS for import beautiful soup so
98:12 - what's cool about
98:13 - pycharm is it recognizes what the hell
98:17 - is giving me an error so it's not even
98:19 - so it's not even recognizing the module
98:21 - so I can just hold option hit enter and
98:23 - it tells me is like you want to install
98:25 - it although I coul install it okay just
98:31 - got an error that's pretty good
98:34 - can no modulename be s for all right so
98:38 - let's go just I'm gonna do pip install B
98:41 - s4 so clearly as a model marginal
98:48 - ambience for yep I'm also gonna need
98:55 - requests library so I'm going to import
98:57 - requests and it doesn't know what it is
99:00 - so I'm gonna do install request please
99:03 - don't leave me errors okay good
99:05 - installed okay great so now we have a
99:13 - bunch of things installed I'm gonna
99:14 - create pip freeze requirements dot txt
99:21 - so I just created a requirements file
99:24 - right here that has all my dependencies
99:26 - that I just installed okay okay so now
99:35 - I'm gonna just do a git add I'm gonna do
99:37 - get commit and I'll say add front-end
99:43 - and requirements file requirements and
99:49 - then I'll do get push origin master so
99:54 - now this code is here you guys can go to
100:01 - this code at any time and you know see
100:07 - my requirements file that we just build
100:09 - you guys can go and see the templates to
100:12 - what we're doing in here base HTML
100:14 - everything okay okay making good
100:23 - progress so far guys okay
100:30 - so let's add let's add some beautiful su
100:37 - functionality now so I'll do what was
100:42 - the URL for the Craigslist thing that we
100:44 - had another thing
100:47 - don't actually need this okay so so
100:55 - let's build it out guys
100:57 - so here's okay so if I go to a homepage
100:59 - of Craigslist this is what it looks like
101:01 - if I type in Python tutor it builds out
101:05 - this query if I remove this from this
101:11 - ampersand argument yeah that still works
101:14 - and if I actually remove so this is this
101:17 - is like a really tricky part but I'm
101:19 - making your life a lot easier we're
101:20 - making it a lot easier because we went
101:22 - through this pain if I actually even
101:23 - remove this BBB part and I just hit
101:28 - slash and I hit enter now it still works
101:32 - okay so that's the base URL we're
101:36 - actually going to use now you're not
101:39 - gonna use this Los Angeles dot
101:41 - craigslist.org one it's obviously gonna
101:44 - be for you whatever is local to you okay
101:47 - from us Los Angeles is local so that's
101:49 - why by default by default it's Los
101:52 - Angeles here okay
101:55 - for you guys it's not gonna be that so
101:58 - build it out how it would be for you
102:02 - okay so here's what I'm gonna do I'm
102:08 - gonna call it like base URL or something
102:10 - paste it here base Craigslist URL I
102:17 - guess I'll call it and I want to remove
102:20 - the query because query can change at
102:23 - any time so I'll do this so then it's
102:27 - dynamically generated okay
102:33 - and now we're gonna do what does it data
102:40 - is equal to request dot get
102:46 - what tells it hmm we're not gonna worry
102:53 - about min and Max price right now are
102:58 - you yeah yeah yeah I just want to get
103:02 - just want to get yeah so we have to I
103:05 - guess build it out but right now let's
103:08 - just do Python tutor so let's go python
103:11 - tutor and i'll hit enter so let's just
103:14 - copy what we have here and paste it and
103:23 - we'll call this response okay then we'll
103:28 - have data is equal to response text and
103:33 - then I'm just gonna do print data like
103:36 - so okay and now let's go here let's hit
103:45 - refresh oh because it's probably not a
103:49 - request
103:50 - oh it's requests that get because we're
103:55 - using the library
104:04 - so there we got we got the
104:12 - html/css as you guys can see here so
104:23 - look at this okay you see what it says
104:26 - Ivy League tutor exclamation mark
104:28 - calculus algebra Ivy League tutor so
104:37 - it's doing it's finding it for its so
104:39 - we're getting that data right now yeah
104:42 - well now takes a search term and then it
104:44 - pops it into this that URL that we did
104:46 - up here it just pops it into the query
104:47 - and then it goes to that URL which is
104:50 - that the Craigslist URL and then it's
104:52 - just getting all that you stable all
104:53 - from that page that has all the Python
104:54 - tubes and it just dumps the HTML out and
104:56 - then from there we can get all the
104:58 - wicked pissah and I mean go to we can go
105:00 - further into further links and stuff
105:02 - from that HTML because everything's
105:03 - listed oh man it's so good to be a
105:06 - programmer bro so crazy do people even
105:10 - know how to do this not all right so we
105:17 - will now we're gonna try hard coded this
105:19 - query except now we're gonna build we're
105:21 - gonna use the dynamic one that we have
105:23 - here okay so we'll build it okay
105:41 - so I'll just call it final URL I guess
105:45 - and what its gonna be is is gonna be the
105:50 - base URL and also guys this is this is
105:57 - kind of a cool thing so you should get a
105:59 - - it is yeah from request compact import
106:10 - quote plus again from request comp at
106:16 - import quote plus so what this actually
106:21 - does is if you write something like this
106:25 - oh yeah it'll put automatically plus
106:31 - signs in there yeah because it turns it
106:33 - into a URL because if I have this here
106:35 - and I knew Python tutor you see how it
106:39 - like automatically puts a percent twenty
106:41 - yeah that's what you want something to
106:44 - build that for you so when we get it
106:46 - from the search term like when somebody
106:48 - types in something like Python tutor
106:50 - here you want this effectively to turn
106:53 - into percent twenty yeah and quote plus
106:57 - will automatically handle handle like
106:59 - all these cases for you so don't madly
107:02 - manually go into the string and search
107:04 - for all spaces and then input a percent
107:06 - twenty because that's just silly and
107:07 - there's a lot more cases right so if I
107:10 - do print plus search you'll see what
107:15 - happens i'll unprinted will do a baba
107:20 - like that or wait that won't work
107:22 - will do python tutor on the loose see
107:32 - that python tutor on the loose and then
107:36 - there's like
107:41 - probably not dots right cuz that's not
107:45 - part of watch I don't know how you see
107:50 - so it's like turning it into something
107:52 - that'll work as a actual you know what I
107:59 - mean like look right it's actually work
108:04 - so that's the beauty of quote Plus and
108:10 - the final URL is going to be we're just
108:12 - gonna do we can just use a join method
108:20 - okay you are all done oh yeah
108:22 - so we're just gonna use string
108:25 - concatenation a little bit here and I'm
108:32 - gonna say this comma
108:47 - oh yeah this is gonna be base Craigslist
108:50 - dot format then I'm gonna do quote plus
108:54 - search okay
108:58 - the print final URL so now you're gonna
109:02 - see what it does
109:03 - are you on on it already so the search
109:07 - will be that that's what those little
109:16 - brackets if you put in a string I didn't
109:18 - know you knew this much broke smarter
109:22 - than he looks you know you know you're
109:24 - faster than him when he wasn't picking
109:26 - this up as fast right all right so let's
109:37 - um so now it's a clickable link that's
109:39 - how accurate it is okay so we're getting
109:44 - our final URL for so now to response we
109:49 - don't need to send this we just get
109:51 - response our final URL okay then
109:56 - response we'll get that data and then we
109:59 - can print it out which is just HTML and
110:01 - then we're free to scrape it's great
110:04 - that data for other images for the
110:05 - prices the text everything yeah for
110:11 - every single so when you scrape is it
110:13 - like do you actually have to report
110:14 - something else to scrape or is it just
110:16 - like kind of like you're looking for
110:19 - keywords and then like using the
110:23 - limiters to get out of to take off the
110:25 - things that you don't need a beautiful
110:29 - soup um what it does is it just takes a
110:31 - fat web page of just raw HTML and then
110:34 - it just creates an object so you can go
110:36 - into HTML just be like Oh find this find
110:38 - this tag with this name boom spit out
110:41 - the text find this find this image tag
110:43 - with all the last thing boom just print
110:46 - the image out so the beautiful soup
110:47 - takes just a bunch of HTML in and then
110:49 - you can dig through it using a beautiful
110:51 - soup you could do it by hand but why
110:54 - would you do that yeah yeah you did like
110:56 - parse you have like parse the HTML it's
110:58 - just like
110:59 - just don't do it yeah yeah I just don't
111:05 - like Nike but better
111:08 - so one basic functionality of a database
111:11 - that I'll yeah so so basically I'll add
111:15 - basic functionality of the database so
111:21 - you can actually go like oh cool we're
111:23 - using a database so also from import
111:27 - models okay and then we'll just do here
111:34 - every time the new search happens we'll
111:36 - do models dot search dot objects don't
111:40 - create and then we'll create it
111:43 - search is equal to search okay
111:47 - so what it's so what it's doing is it's
111:51 - going to this models here it's creating
111:58 - a search object where the argument is
112:00 - search and this search is what's gonna
112:03 - be fed into that object reads an object
112:06 - of search yep yep that's it that's it so
112:10 - now here's what's gonna happen okay if I
112:12 - do balloon I'm gonna do puppy I'm gonna
112:18 - do Frankie and now when I go to 127 uh
112:23 - slash admin searches all of it is here
112:29 - the power of a database yeah and now you
112:32 - can do like autocomplete and stuff based
112:34 - on most popular searches because you
112:36 - have all this data
112:43 - it's good stuff man I want to start
112:46 - streaming to 24 hours a day like
112:49 - literally nobody can keep up unless
112:50 - you're watching it 24 hours
112:52 - oh man we'll be creating a one app a day
112:55 - in the gym while we're at the gym okay
113:01 - so yeah that's looking good don't need
113:07 - this anymore
113:16 - all right now what we need to do is we
113:20 - need to know sort of doing stuff with
113:23 - the data that we're actually getting all
113:29 - right so let's see here this we inspect
113:34 - we select this tool over here zoom in so
113:39 - everybody can see this tool is called
113:42 - select an element in the patient inspect
113:44 - it please use Chrome never use Safari
113:46 - everybody very important
113:48 - click hover and it tells us that this is
113:53 - actually a result title class ok and see
114:08 - that result title so now yeah I have to
114:14 - first of all create a soup object I'm
114:15 - going to do soup is equal to beautiful
114:18 - soup I'm gonna feed it the data and I
114:20 - will say features is equal to HTML dot
114:23 - parser yeah cool that's doing is just
114:26 - parsing that you know yeah yeah a
114:31 - beautiful soup object which kind of just
114:33 - like in types encapsulate all the HTML
114:35 - data into its tags so it's like in a
114:37 - bunch of like nested parts in code
114:39 - though instead of just raw a raw string
114:41 - of HTML yeah it spits it spits it into
114:46 - the HTML parser and then yeah it just
114:47 - creates a beautiful soup object to
114:50 - easily access everything so I'll go soup
114:53 - dot find all where it's an a tag and
115:00 - then the class is actually result -
115:06 - title is is link so I'm saying find all
115:14 - the links where the classes result title
115:17 - so find all of that and now I'll do
115:21 - print post titles
115:24 - okay let's go and go Python tutor
115:32 - it was crazy like doing everything in
115:34 - first try now it's like going [ __ ]
115:36 - ham I'm making it look way too easy
115:41 - this [ __ ] that that took us like five
115:43 - hours to figure out bro code and also
115:50 - just like I done it before yeah like
115:53 - I've solved this problem before this
115:54 - took so frickin long to figure out the
115:56 - patterns because you got to like study
115:57 - the patterns and like drilling down and
115:59 - that is like tricky now we're pretty
116:07 - [ __ ] good but like you but yeah but
116:11 - this is just like it's even faster yeah
116:17 - so now what I can do is we're getting
116:20 - the title so now what I'll do is I'll
116:22 - say print out the zero it's one okay so
116:30 - it's printing out only one of the items
116:32 - from that list so what we're getting
116:34 - back is actually a list of tags okay so
116:37 - I'm saying just print out one of them
116:39 - the first one that you get so you can
116:41 - see we're getting here result title this
116:46 - is the data ID this is the link okay
117:09 - cool so so we know this is the title
117:14 - right here okay how do how do we get it
117:17 - well I think we can just do text that
117:20 - text because it's just a text there it
117:25 - is yep okay which is really where it's a
117:30 - statistics tutor Excel SPS data or
117:33 - Python undergrad grad level that's that
117:37 - yep so this is how we find all the
117:40 - titles then we'll do something similar
117:43 - to get what else is there so result
117:47 - title the link right well the link is
117:51 - easy because I think we literally have
117:53 - access to the link so for example if I
117:57 - undid this stuff and we oh yes so yeah
118:06 - we can do dot get href like that so if i
118:10 - refresh this and i go here that's right
118:14 - there so i can click it it'll take me to
118:17 - that post yep that's easy so there's a
118:31 - result info which is another thing that
118:34 - we need because we need the info of okay
118:43 - we also need access to the result bro
118:47 - because
118:55 - yeah result well that's uh that's gonna
119:04 - have I think the images and stuff in
119:06 - there no a gallery empty okay let's go
119:20 - here result okay so we're gonna need a
119:33 - result row okay so I'm not gonna do a
119:46 - lot of the filtering crap because that's
119:48 - where it gets like really complex and
119:50 - for this live stream I just want to keep
119:52 - it like simpler because otherwise we're
119:54 - gonna be here till [ __ ] two am
119:55 - explaining what we did because it gets
119:58 - pretty involved so we're gonna just make
120:00 - the simpler version of the app and the
120:02 - final version you can get it from okay
120:07 - so we also need access to the listings
120:14 - where else do we use it yeah yeah so we
120:19 - need access to the entire listing so
120:20 - then we can go through it and get result
120:23 - title and all that stuff okay yeah this
120:28 - is this is the most important part
120:30 - remember where we had to go through all
120:32 - of it at the same time
120:34 - mm-hm and that epiphany we kind of
120:37 - understood it like a lot later like
120:39 - hours and hours later so but just to put
120:44 - it in simple terms when requiring
120:45 - through this we want to go through it
120:46 - like the entire thing at the same time
120:48 - hopefully yeah that probably doesn't
120:50 - make that much sense to people but
120:52 - that's okay
120:52 - just take our word for it you want to
120:56 - you want the project and portfolio or
120:57 - not
121:03 - all right so okay here are the post
121:11 - listings now will you'll be able to do
121:15 - is you'll be able to get the result of a
121:21 - listing okay so if I did post listings
121:27 - of zero and you'll be able to get the
121:34 - URL and you will be able to get the
121:43 - price okay I'll explain this in just a
121:56 - second and you'll ask people to get the
121:59 - post text oh man the image ID part new
122:14 - soup
122:43 - yeah bro let's scrap it hell yeah
122:46 - I think he meant to say let's scrape his
122:48 - guy how fun not [ __ ] u DJ Harden you
122:55 - know Sam block him delete him from the
122:58 - back this is a this is not a democracy
123:06 - yeah okay so post listings of zero and
123:14 - you'll you'll see what it all does okay
123:17 - yeah print post title whoops
123:29 - URL price okay
123:35 - so I'll type in ping-pong here and
123:38 - you'll see what I mean okay look you got
123:43 - the title
123:44 - you got the URL man's way too you know
123:50 - then you got the price okay oh just you
123:59 - know what it actually looks like on
124:00 - Craigslist see this is what it looks
124:06 - like yeah we're not here to question it
124:14 - it's the will of
124:23 - Craig Craig himself yeah there's a will
124:28 - of Craig himself show me you bought you
124:36 - God alright so basically what we're
124:43 - doing guys is we're getting the post
124:45 - listing and then from the post listing
124:49 - I'm we're getting the post title the URL
124:50 - in the price okay because whatever we're
124:54 - getting the post listings from the
124:55 - result row result row contains the
124:58 - information of result title the link and
125:00 - the price see what I'm saying okay now
125:05 - the now the part that gets a little
125:17 - involved guys is the image part so let's
125:24 - do that last let's do everything and
125:25 - make that last just how just leave the
125:27 - dummy image for now okay fine yeah and
125:29 - then fine
125:34 - cool yeah all right so now that we get
125:40 - the post listings all we got to do is
125:42 - just like store that data center to the
125:44 - front end loop through it okay so let's
125:46 - just do that for now so we'll create a
125:50 - basically we're gonna start as we go
125:55 - through it we're gonna start appending
125:57 - it to something okay
125:59 - so here's what we're gonna do we're
126:01 - gonna create a thing called final
126:03 - postings which is gonna be an empty list
126:09 - then I'll save for post in
126:17 - post listings final poll
126:24 - basically I'm going to do it is post
126:32 - title is equal to post dot find so this
126:39 - is gonna be this line basically only
126:42 - difference is that they're just gonna
126:50 - say post okay this is gonna say URL this
126:57 - is gonna say price and here it's gonna
127:02 - say
127:20 - makes sense so I'm just gonna loop
127:24 - through each post and then I'm gonna
127:26 - print out its text get its other thing
127:29 - not print out but like post title is
127:32 - gonna be the title yeah you're doing all
127:34 - this into a final yeah and I mean the
127:37 - dude you're really good how much have
127:39 - you coded couple years what [ __ ] man why
127:44 - are you guys so nonchalant bro like
127:46 - you're good like you're good no no
127:49 - better [ __ ] that [ __ ] you you're good
127:52 - smarter than you look he's really good
127:57 - you guys need to like own it more like
128:00 - you guys need to go crazy because other
128:03 - people don't understand like when you
128:05 - say it like that everybody thinks oh you
128:06 - you're an idiot
128:08 - that's what Aaron thinks when you're
128:16 - like yeah yeah you know yeah that code
128:18 - not that much like you it's like I think
128:22 - you're an idiot
128:23 - like you probably don't know [ __ ] that's
128:24 - why I never talked about coding with you
128:26 - in my whole life it's cuz if you if you
128:28 - know the basics of like a language you
128:30 - pretty much know write code all around
128:32 - yeah yeah catch up to it yeah okay so
128:39 - I'm gonna delete all these cuz uh we
128:42 - don't need these anymore and then I'm
128:44 - just gonna go here and I'm gonna say
128:50 - final postings dot append post post
128:57 - title I think I created a tuple right so
129:01 - it's gonna be a tuple you'll see why
129:03 - it's gonna be a tuple of three right now
129:06 - post URL and then it's gonna be like
129:08 - post price
129:19 - okay
129:22 - what the hell is happening
129:30 - he's good
129:33 - [Laughter]
129:42 - these guys because these guys woman who
129:44 - flex on them you know like I didn't want
129:46 - to code I just wanted to give them some
129:48 - advice how do you make money but
129:51 - everybody but they just how do they get
129:54 - but like they just really want me to
129:56 - flex on them so I'll flex on them and
130:02 - now I got my vim like look at what I'm
130:05 - doing different okay alright so we have
130:08 - our final postings now in our stuff for
130:10 - front-end we need to actually pass it
130:12 - like this just just give up dude your
130:44 - ears don't work alright so let's just do
130:50 - this I literally yelled it in his ear
130:58 - it's much louder for him alright
131:02 - whatever
131:02 - so we got final postings that's pretty
131:08 - good
131:15 - show me what you got stupid stuff so now
131:23 - I'll go to the new search folder
131:25 - okay and what I'm gonna do here is
131:29 - pretty much right here for now I'm gonna
131:31 - write a for loop it's gonna look pretty
131:33 - ugly but it's gonna be like for post in
131:40 - final postings okay then I'm gonna have
131:45 - n for like that and then I'm gonna say
131:52 - post dot zero
132:11 - good practicum practice uh you kind of
132:17 - have to but otherwise it's all gonna be
132:18 - on one line look ugly
132:19 - you all right okay there we go
132:28 - Lana everything is getting done in one
132:31 - try I'm loving this don't worry about it
132:39 - there's no API we're beautiful scooping
132:41 - it I mean souping it alright so here we
132:45 - got boom all the posts yep all the the
132:49 - the title right
132:51 - the okay well that's not gonna work cuz
132:58 - there's no price yeah I got a right to
133:02 - fix that code okay so tutors don't have
133:03 - a price right so basically we're gonna
133:05 - say if post fine it's gotta make it
133:11 - check first PO if
133:20 - if post-op yeah post out fine you don't
133:26 - you don't need the dot Tex get rid of
133:27 - the dot text oh yeah good call yep so
133:33 - basically if it has a price
133:35 - because certain things don't have a
133:36 - price so if it has a price then do this
133:41 - otherwise price is equal to n /a yeah or
133:49 - I mean should I say post price good
134:03 - catch dude you're my dude but much but
134:10 - that's but that's the thing dude basics
134:13 - is where people don't have any intuition
134:17 - anyways let's try Python tutor there we
134:22 - go na na na for any of them that don't
134:25 - have price which is all of them but if
134:27 - we do ping pong will have damn damn but
134:32 - a boom right what yeah what seriously
134:41 - good car because therefore because the
134:44 - dudes giving his entire balcony plus a
134:47 - ping-pong table plus centered in our
134:48 - parking lot man I need an Advil
135:04 - okay let's power through it boys almost
135:09 - there we should have some music man some
135:12 - like epidemic sound like legal don't
135:15 - worry don't put it now these little cult
135:17 - coders freak out when you put on [ __ ]
135:19 - music so I don't put it right now
135:27 - he's the beatboxer Frankie also knows
135:30 - how to beatbox you know what's cool
135:35 - about this look dude it can read PyCharm
135:40 - and Django I can hit [ __ ] play and
135:43 - they'll like run the code that's what
135:45 - I'm saying bro you're a little touch bar
135:55 - see how it's working
136:01 - boom see see how good it is python tutor
136:09 - okay there we go
136:10 - so now what we want to do what is this
136:14 - weird error I'm getting bro forget this
136:24 - I'm just gonna stop this one cuz I
136:27 - wasn't getting any errors when I was
136:29 - running from here Java tutor okay yeah
136:40 - we're there cool so we're getting all
136:45 - this data to our front end which is what
136:47 - we needed so now all we do is we just
136:52 - have to render it in a pretty way okay
136:55 - so we're gonna write this same type of
136:58 - for loop except now what we'll do is
137:01 - we'll go from here to here paste it okay
137:14 - remove post your post one right and what
137:18 - I'll do is for the link is gonna be
137:22 - actual link of the post that's in
137:27 - position one position zero position like
137:30 - post your post one post two okay so this
137:34 - is gonna be post dot one that's the URL
137:37 - okay this is the source of the
137:41 - image we don't have the image right now
137:43 - so for image is just going to be puppies
137:44 - for now they're hard-coded end again URL
137:50 - so this is gonna be post dot one again
137:53 - and then here is where the price is like
138:00 - that so the price is going to be post
138:02 - dot two and this since this is a title
138:16 - is going to be post dot zero okay like
138:22 - that now another thing we need to do is
138:25 - we need to wrap it in a row so we're
138:28 - gonna paste a row up here after the for
138:31 - loop ends we're gonna end the row div we
138:35 - can remove all of these lines here
138:46 - okay and that's it okay now what we want
138:59 - to do is some of their sizes change you
139:02 - see their sizes like some is like some
139:04 - are bigger some are smaller so what we
139:06 - kind of did is we kind of have like this
139:08 - crappy solution which is pretty much fix
139:12 - the height of the card and the card
139:14 - image so pretty much forget all of this
139:16 - stuff down here you don't need that but
139:20 - just take this stuff from up here we're
139:22 - gonna take it we're gonna go to our
139:23 - style dot CSS and paste it in here okay
139:26 - and this stuff doesn't just render right
139:32 - away so we need to actually do a hard
139:34 - refresh and all kinds of weird stuff
139:36 - need to stop running it ooh we're
139:41 - getting a weirder 304
139:58 - so it's finding it get as 200 but it's
140:03 - still not showing it
140:17 - so this is the thing with the statics
140:20 - static websites like sometimes it just
140:22 - won't show you when you make a static
140:26 - change sometimes it just doesn't render
140:28 - until a lot later ping-pong
140:38 - all right I'm not gonna worry about it
140:40 - too much right now because it should be
140:42 - working
140:43 - it isn't our style she was
140:48 - I don't even how we fixed that do you
140:50 - remember how we fixed that there was
140:51 - like a weird yeah it just took a while -
140:54 - didn't you like stop the server and
140:56 - start again right it has to like stop
140:59 - and you got to start it and then it has
141:02 - to because I know the code is correct
141:11 - yeah the first time I took forever okay
141:14 - whatever that's that's not that
141:16 - important of a part so now we got to get
141:21 - images right for this image part is the
141:23 - most complex it's the most complicated
141:25 - this is where web scraping this is where
141:28 - problem-solving comes in this is where
141:30 - you actually need to use your brain yeah
141:35 - it really was so I wish you guys get to
141:37 - see our full video like a month later
141:40 - once her hard drive is fixed cuz all of
141:43 - it got deleted 15 hours of content got
141:45 - deleted but we'll try to show you what
141:48 - we can write here okay so some funky
141:57 - things
142:01 - there were some weird findings that we
142:03 - made it's almost like we had to figure
142:09 - out some really weird hacks so like look
142:21 - at this each yeah each post has multiple
142:23 - images and we thought it'd be as easy as
142:26 - like oh these images are hosted out of a
142:28 - URL just like the puppy image and then
142:30 - just how him like all listed in the HTML
142:32 - but they weren't like these image tags
142:34 - didn't even exist in the HTML web page
142:36 - for some reason yeah and we don't know
142:37 - why we couldn't they exist under this
142:39 - class called
142:40 - swipe which you can't you can't access
142:43 - you can never access this class from
142:45 - beautiful shoot directly no like
142:47 - beautiful soup like skips over it for
142:48 - some reason yeah literally like you just
142:50 - don't it's impossible to access it with
142:52 - beautiful soup like it doesn't exist so
142:54 - we're like okay well then how the hell
142:55 - did we get the images and we had the
142:58 - final just really convoluted way of
142:59 - getting it but there's like a there's
143:01 - like a little trick we're gonna show you
143:02 - how to get it and we're only gonna get
143:04 - one image so we're just gonna ignore all
143:05 - of them we're just even get the first
143:06 - image to keep it simple yeah even that
143:08 - it's still like it's this little trick
143:10 - that we had to figure out it's actually
143:12 - pretty cool yeah it's pretty insane okay
143:15 - so now all right holy [ __ ] dude
143:24 - this image is just right here oh yeah
143:27 - obviously they're all right here but you
143:28 - can never access to know because vehicle
143:30 - Zoop ignores that entire div swipe okay
143:35 - so this is so this is the first thing we
143:38 - noticed about Craigslist images they're
143:40 - hosted on this pattern where this is
143:44 - some ID and then they're all like under
143:48 - underscore 300 by 300 hard-coded okay so
143:52 - boom right there so this is why they're
143:54 - all have the same size on the page so
143:56 - that was like the first detective thing
143:58 - that we noticed also this needs to be at
144:00 - the bottom
144:05 - I chopped off on the street a little bit
144:07 - not from the bottom oh yeah dad the
144:10 - right side is yeah just maybe just drag
144:12 - the bar over a little bit they can see
144:15 - wasn't he getting chopped off even more
144:17 - when it was actually on the right side
144:19 - like that okay let's see sorry guys we
144:24 - have a little bit of a delay so we just
144:25 - want to see you guys are seeing the
144:26 - right things it was pretty good yeah you
144:32 - can see most of it hi all right so this
144:36 - is the URL now what we noticed the
144:41 - craziest thing we noticed will save you
144:43 - long like the long story we'll make it
144:45 - short for you okay there's something
144:47 - called data IDs and you'll never
144:50 - associate that with an image like why
144:52 - the [ __ ] would an image be on our data
144:54 - IDs like that's the last place you look
144:56 - for an image right so it doesn't make so
144:58 - you can't actually access this image
145:01 - link from beautiful suit which is super
145:03 - annoying but you can access the data IDs
145:05 - so what's what's a funky like if you
145:08 - have to pause it here and see if you can
145:10 - see a pattern here with images and data
145:12 - IDs you should do that right now here's
145:15 - a pattern we noticed everything has
145:19 - multiple images right so data IDs since
145:22 - this has three images notice that
145:24 - there's one two and three data IDs right
145:27 - another thing I want you to notice is
145:29 - for this first image is the same as the
145:32 - first ID except there's a one colon here
145:36 - which is not present here right but then
145:39 - everything else is the same okay
145:41 - also there are these commas that we got
145:43 - to get rid of because there are no
145:45 - commas in the actual URL right so we're
145:48 - like okay let's actually take this guy
145:51 - over here from here to here let's copy
145:54 - it let's go here double click go here
146:00 - paste it hit enter don't go here
146:09 - so that's actually where the image data
146:11 - is we're just given these IDs we don't
146:13 - actually have the full URLs yeah so at
146:15 - least so given the IDS we're like okay
146:18 - we can generate the actual images so
146:21 - we've had to create a base URL for the
146:24 - images just like we did for the
146:26 - Craigslist query yeah very similar thing
146:29 - we got to construct the URL ourselves
146:34 - it's crazy right so it's gonna be 300 by
146:40 - 300 like that you have you know dot
146:42 - splits yet man oh my god
146:44 - yeah wait till you see that parsing the
146:46 - string to get the to get the idea of the
146:48 - correct ID that's cool okay so we got
146:52 - our base image URL now what we want to
146:55 - do is get the image from the result you
147:05 - get the data ID from the result row and
147:09 - we don't want to get multiple we just
147:10 - want to get the first image we don't
147:11 - really care about all of them so what
147:15 - we'll do here is something like this so
147:26 - we want to say if it has an image okay
147:36 - so in the result image class if the data
147:39 - IDs exist then what I want you to do is
147:44 - to post image is actually going to equal
147:47 - two
147:57 - I like that okay and now we don't want
148:03 - to get all of the data IDs because that
148:05 - might be like for image IDs or five
148:07 - image IDs we just want to get one image
148:09 - ID okay
148:11 - so what I'll do here is I'll just print
148:13 - this for now I'll go like that and we're
148:18 - gonna go here and we're gonna write ping
148:20 - pong and hit enter and we'll go down
148:24 - here and what the hell
148:49 - [Music]
148:54 - let's see wait let me see so if post are
148:59 - fine if the data's I did IDs exists then
149:01 - you want to find so it means you get did
149:06 - IDs no get did IDs is a string so when
149:10 - you I just rang oh that's the annoying
149:16 - part about it this is annoying part
149:18 - about it it's not so like it doesn't
149:20 - give so it doesn't give you a list of
149:23 - multiple IDs it literally gives you one
149:26 - day ties okay right smart okay so that's
149:35 - what we get so now if I actually print
149:41 - post image which should be fine I think
149:47 - well since I'm gonna be printing it so
149:49 - many times let's just go here and print
149:51 - it okay
149:57 - it's get doing it every single time so
150:02 - there it is that's one string a lot of
150:06 - images there right this is like I got
150:08 - lots of I got lots of post listings so
150:11 - like the last post listing probably has
150:13 - like like many images like 12 images in
150:17 - 8 images something like that right so
150:19 - what I want to do is I wanna just get
150:21 - the first one well how do I get that so
150:24 - what I'm gonna do is we're gonna do dots
150:27 - split on this and we're gonna split it
150:29 - by commas first yeah Christ first cuz
150:35 - you want to split the string into a list
150:37 - of the things separated by commas yep
150:39 - so then it actually turns into a list
150:43 - you did good like he's good yeah so once
150:55 - we do comma then what happens is that we
150:59 - effectively get a list that actually
151:02 - looks a lot like we actually get a list
151:07 - that looks like this now so then we can
151:13 - actually index it by the first item and
151:15 - the second item and a third item so so
151:18 - now if I do zero
151:22 - yeah so now will happen is if I go here
151:26 - and I hit refresh advert
151:40 - Python tutor on the loose or else no not
151:43 - so look now for each of them is just
151:45 - giving me one but I still got to get rid
151:47 - of the one in : so we got it now now dad
151:56 - split it by 1 and : no I just called oh
152:06 - yeah
152:07 - call splitted by call you know you could
152:08 - do 1 : and then ya would act the same
152:13 - way so we're gonna split it now by the
152:17 - colon so now I mean it's gonna create
152:22 - dad into a list so like for example
152:24 - first it was doing this right then we
152:29 - said okay give us just a first item from
152:32 - here so then when it ended up doing was
152:33 - it said okay you got it but now what
152:37 - we're gonna do is we're gonna say yo
152:41 - give us like that one colon and then is
152:51 - gonna give us all yeah so separated by
152:58 - colons so now we're gonna do that but
153:01 - we're gonna say give us the second
153:03 - element from that so there so now we're
153:16 - getting all the IDS right
153:18 - and now the post image URL is actually
153:22 - going to be the base image URL format it
153:28 - with the post image you are oh wait I D
153:38 - I guess so here's what's another cool
153:41 - thing about my charm is if I do FN shift
153:43 - f6
153:48 - I'll change it everywhere everywhere in
153:50 - every file every project but like
153:52 - intelligently so if it's the scope is
153:54 - here and won't change it out here I
153:56 - think you already know these things okay
154:00 - [ __ ] kid
154:02 - alright so we're almost there okay so
154:12 - this is happening so now let's just
154:14 - print it before we go onto the next step
154:20 - print click Oh click right so this is
154:29 - freaking awesome
154:31 - oh wait I'm calling both of these post
154:36 - image URLs this is actually the post
154:40 - image ID this is the URL okay so now I
154:53 - have to actually append this too to the
154:56 - list so if we find the image this is
155:02 - what should happen but if we don't find
155:03 - the image we also want to give it image
155:05 - okay so the image that we want to give
155:08 - it is we saw this we saw Craigslist
155:12 - gives us to anything that doesn't have
155:14 - an image just like this type of thing
155:17 - okay so then we do that so then we say
155:20 - yo if you find it then give me the image
155:23 - otherwise give me this garbage where do
155:29 - these spaces come from bro
155:35 - okay
155:38 - no image or actual equals post amen your
155:45 - whoa okay what the hell is happening oh
155:55 - so then what we say is append post image
155:59 - URL so now there are four things that
156:01 - the final postings has as a tuple title
156:04 - URL price post image URL okay so now
156:10 - it's sending it to the front end so
156:12 - basically we go to our new search and
156:15 - now anywhere there's a dog crap right
156:21 - that is right this actually pays
156:29 - everything off now that he appreciates
156:31 - what we've done post dot three there we
156:41 - go so now when we go back we refresh
156:47 - there you go now if you click here it'll
156:52 - take you to the thing so much better
156:56 - let's dude it's code daddy's little
157:00 - parcels from scratch because Craigslist
157:05 - is untouchable Craig the guy all right
157:10 - now we're gonna host it on Heroku get
157:17 - add git commit add Craigslist search
157:27 - functionality get push origin master
157:35 - okay kids now what we need to do is we
157:40 - need to create this proc file okay so
157:45 - you copied
157:46 - so basically we go to the root we create
157:51 - a file
157:52 - we call it proc file we paste this we
157:57 - change this test app to code
158:00 - daddy's list like so then we go to
158:07 - settings and we do the following
158:12 - settings we go here and we add this line
158:17 - of code and we go here and then we add
158:25 - this line at the top okay like this now
158:32 - it's gonna need you to install pip so
158:34 - you got to do pip install Django Heroku
158:39 - okay now you're gonna run into this ugly
158:45 - looking error how do we fix this error
158:51 - oh man I'm not okay hold on pip install
159:05 - pip installed Django Heroku
159:16 - wait order my PG admin go
159:19 - I literally install it a few days ago
159:31 - okay so what I recommend is you go and
159:34 - install PG AG how to host Jango Heroku
159:38 - app you're gonna run into my blog post
159:42 - which is incredible it has a lot of
159:45 - claps on the left hand side as you can
159:47 - see thanks bro and basically what you
159:52 - want to do is you want to do all this
159:54 - stuff right here okay so we're gonna do
159:57 - that
159:59 - so install so this is what I said to do
160:05 - this the easiest way to install PG admin
160:07 - on your computer okay where the hell
160:13 - does PG admin man open it
160:23 - copying PG admin so I'm gonna open PG
160:28 - admin until then I'm gonna pip install
160:31 - gonna corn pip install current done pip
160:38 - installed Django Heroku which still
160:40 - shouldn't work because I'm waiting on
160:42 - the PG admin which is taking it sweet
160:44 - ass time so yeah we'll just wait
160:58 - damaged and can't be opened this is the
161:02 - part where you lost me I still know how
161:04 - to deploy Heroku
161:05 - yeah well now it's gonna be recorded so
161:07 - everybody can watch it oh boy I'm gonna
161:11 - go read that blog post take some of
161:18 - those those green tea mints they all
161:19 - suffice for now right some green tea
161:22 - mochi yo hook me up with the white board
161:24 - dude number three great oh my god are
161:29 - you serious hold on blow up everything
161:43 - prepared for this moment
161:45 - [Laughter]
161:50 - it did work before it before you even
161:53 - did it you already worked because I
161:56 - pressed it no no it's already there and
162:05 - for that you need PG admin basically
162:11 - what you need is Postgres okay if you
162:17 - have Postgres you're good to go but it's
162:21 - a nightmare to install it it's a
162:23 - nightmare of install pip install psycho
162:24 - PG - you're not gonna be able to get it
162:26 - right but if you just download it from a
162:29 - GUI it makes your life so much easier
162:31 - just go install like three Postgres
162:34 - database tool that exists online and
162:37 - that's gonna make your life a lot easier
162:39 - okay and then we're gonna install
162:41 - everything else I'm using anaconda right
162:43 - now which also makes things easier this
162:47 - is the longest verifying I've ever seen
162:49 - in my whole life dude this is crazy
162:54 - verifying PG admin yeah we have done all
162:59 - of these things
163:03 - create a search functionality does this
163:05 - we have web scraping beautiful soup
163:07 - using materialized pretty much done with
163:09 - the app now we just want to host it on
163:12 - your Roku yeah forgot the dog pictures
163:17 - yeah doggies
163:25 - I can't ride on out of drug doggies
163:33 - right guys so we're almost done okay
163:36 - we're waiting for this thing to install
163:40 - because it's just taking it sweet sweet
163:44 - little time which sorry we're admiring
163:51 - our own live stream yeah
164:03 - somebody left for lunch priorities are
164:06 - out of order brah what is this
164:14 - everyone needs presents it's probably
164:17 - brought how he was like how all right ed
164:24 - so me by Roshan hello monkey bender
164:27 - hello hello goop something glub glub
164:40 - well they're here verifying that a
164:42 - purple light goes off the whole time
164:44 - no just like yeah playbacks is crazy but
164:55 - the concurrent viewers are late yeah are
165:06 - you serious dude like are you actually
165:09 - [ __ ] serious
165:14 - let's look up other Postgres off GUI Mac
165:19 - options close to us app
165:30 - all right guys I'm gonna say [ __ ] you to
165:34 - PG admin and I'm gonna install post
165:37 - ghost app in the meantime hopefully a
165:39 - little work a lot faster god damn PG
165:44 - admin shame on your verification is it
165:58 - open already wow it was installed and
166:01 - opened and initialized boom there we go
166:07 - Rafa kasi Postgres template you click
166:10 - into it and I'll do stuff this is
166:12 - awesome yeah just a session ok
166:38 - okay I guess Conda install psycho PG too
166:41 - was the answer so that works this is why
166:44 - anaconda is freaking awesome now let's
166:46 - try pip install Django Heroku cuz pip
166:50 - just sucks sometimes n lay you need to
166:53 - do something to get past it okay so this
166:57 - should be working now great stop okay
167:03 - what else do we need now we need to
167:04 - freeze our requirements that's important
167:09 - we need to Heroku login so there we go
167:16 - we're logging in I'm logged in now and
167:21 - then what we need to do is Heroku create
167:28 - and after this what I need to do is add
167:32 - a database create a new Postgres
167:34 - database for your app that's hosted
167:35 - online on Heroku so then it can store
167:38 - all those pieces of information now make
167:42 - sure you run migrations so let's do that
167:52 - okay Heroku run Python man make my
167:57 - operations can't open file
168:08 - huh does that mean
168:53 - Oh committed the file okay get Ad get
168:57 - commit what are the changes get and get
169:06 - commit get ready for Heroku get push
169:15 - origin master
169:34 - there are no migrations to make o'mara
169:47 - ad metaclass
169:54 - master
170:09 - huh that is a really weird error
170:49 - scaling dinos couldn't find that process
170:58 - should be logged in already
171:07 - oh I don't think I even did get push
171:09 - Heroku master yet but I that doesn't
171:20 - come first I don't think so
171:31 - 1,700 man
171:40 - we're trying to host it once it works we
171:43 - will be able to link you guys so you
171:44 - guys can actually see this app we're
171:47 - pretty close yeah hold on Deva the Divya
172:03 - you Frankie
172:27 - so we're alive this app guys is actually
172:33 - live as we speak it's on Heroku you can
172:38 - actually go to this URL right now which
172:40 - I don't think they can see yet
172:42 - can you just type that URL in can you do
172:44 - something okay yeah I just add it in the
172:46 - channel just look at it you gentle - see
172:53 - man
173:22 - there it is
173:35 - you guys you guys can now actually go on
173:39 - it but if you type something in it won't
173:42 - work because I'm having a problem with
173:44 - the database Heroku run Python some
173:54 - problem happening with the migrate
173:55 - command on Heroku was just super weird
174:05 - so now migrate works okay so basically
174:09 - if it doesn't work you push first and
174:12 - then you migrate after so this app guys
174:19 - now should be working perfectly if you
174:21 - hit Python tutor it works
174:23 - wow it's online anybody can use it from
174:25 - any computer in the world
174:47 - yeah works for everything if you look up
174:50 - Borderlands 3 and like if you go here
174:57 - $360 right if you click into it it'll be
174:59 - $360 nice alright guys there you have it
175:04 - this app is completed the link isn't can
175:08 - you add the link in the description as
175:10 - well or not right now yeah
175:12 - can you pin that as a comment or
175:14 - something okay guys camera guys we hope
175:33 - that you enjoyed it we do that's pretty
175:37 - funny so really really fun thank you
175:41 - guys so much for watching we love your
175:43 - face the link is gonna be in the
175:45 - description the link to the github
175:48 - repository is gonna be in the
175:49 - description and I'm gonna go eat some
175:51 - food and advil my brain is about to
175:55 - explode I love you guys if you enjoyed
175:57 - it in the next video
176:01 - good