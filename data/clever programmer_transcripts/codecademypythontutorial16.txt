00:00 - hey guys what is up this is kazzy from
00:03 - cleverprogrammer.com and you are
00:05 - watching codecademy python part
00:10 - 16.
00:12 - yeah
00:13 - yeah i think it's 16 for sure okay so
00:17 - let's get started
00:20 - yeah this is getting complicated guys i
00:23 - i tell myself i have to remember it's
00:25 - part 15 or part 16 and then i forget so
00:29 - we're getting far along that's a good
00:31 - thing
00:32 - and you're getting far along that's even
00:34 - better
00:35 - i'm excited for you
00:37 - if you've gotten to part 15.
00:40 - okay
00:41 - so
00:42 - um don't tap yourself on the back yet do
00:45 - it maybe at the end of this tutorial
00:47 - hopefully we'll finish all of this and
00:49 - get started on battleships so they want
00:51 - us to do a lot of things here
00:54 - so they showed us two methods to print
00:56 - out items from a list which is exactly
00:58 - what i showed you guys in the last video
01:00 - remember
01:01 - so that's what they're effectively doing
01:03 - here
01:04 - um either just make that
01:07 - access that element directly
01:10 - right
01:10 - that definition of item came up of
01:12 - distinct physical object
01:15 - so either access that item in a list
01:17 - directly or access it using its index
01:20 - and then you can call the list and call
01:23 - and pass in the index
01:26 - when you're indexing the list and then
01:28 - print get access to each element that
01:30 - way
01:31 - method one is useful to loop through the
01:33 - list but it's not possible to modify the
01:35 - list this way
01:36 - so there yeah so that's true you can
01:39 - actually modify
01:41 - the list this way
01:44 - if you want to modify the list you have
01:46 - to know the index of that element and
01:49 - then you can change that index
01:52 - okay
01:54 - for example
01:59 - if i get access to this element directly
02:02 - let's say i'm looping through for item
02:04 - in n
02:06 - print
02:07 - uh or n
02:09 - i don't know equal or sorry yeah let's
02:11 - say item
02:13 - equals item plus one and then
02:16 - um i don't know i print out n
02:23 - three is still three even though i told
02:26 - three to increment itself by one but
02:29 - what actually happened is that this list
02:32 - got passed and
02:33 - we got a three just by itself
02:36 - and then it went okay the new definition
02:39 - of item is equal to what item was three
02:42 - plus one so now item is four
02:44 - and that variable item is just a
02:46 - variable by itself it's not really
02:48 - connected to the list in any way so what
02:50 - you want to say
02:52 - here is for
02:54 - i in range
02:57 - len of n
02:59 - this
03:00 - translates to 0 1 and 2.
03:03 - i've already shown you
03:06 - how that works but just to be
03:09 - just to kind of reiterate
03:11 - len of n this is 357 well length of 357
03:16 - is simply 3. range of 3 gives you a list
03:20 - that's like this
03:22 - with 3 elements in it
03:24 - okay
03:25 - and then i will say
03:27 - n of i equals n of
03:30 - or i'm sorry i
03:34 - um
03:35 - plus one
03:36 - now if i print n you'll see this will be
03:39 - four this will be six and this will be
03:40 - eight just like here okay make sure you
03:43 - really understand that concept okay one
03:45 - loop you go through in this indices and
03:48 - the other loop you go through the actual
03:50 - element itself
03:53 - all right
03:54 - so
03:57 - now they're telling us a lot of things
03:58 - to do create a function that returns a
04:00 - sum of a list of numbers okay so it
04:03 - sums these guys and returns it so define
04:07 - define a function called total that
04:09 - accepts one argument called numbers
04:12 - it will be a list so we are expecting
04:14 - numbers to be a list
04:17 - inside the function create a result
04:19 - create a variable called result and set
04:21 - it to zero using one of the two methods
04:23 - above iterate through the numbers
04:26 - list so i'm going to say
04:28 - 4 i in range
04:31 - 0 through and i'm just writing 0 just to
04:34 - be very verbose as to what i'm doing
04:37 - it's not necessary at all if i want to
04:38 - go one step further i can even say start
04:41 - is equal to zero and stop is equal to
04:44 - that
04:44 - but um
04:46 - i'm not gonna go that crazy
04:48 - normal way would just be to pass in the
04:50 - length but i'm gonna just specify that
04:52 - hey i'm starting from zero
04:55 - and i'm going to pass in len of numbers
05:03 - which is whatever the list you pass that
05:05 - function
05:07 - and we're going to say that
05:10 - for each number we're going to as it
05:11 - added to results so i'm going to say
05:13 - result plus equals or result is equal to
05:15 - result plus
05:18 - that list
05:19 - indexed by that
05:22 - index that we loop through
05:25 - so you know this will be like first i
05:28 - will be zeroth uh element right i will
05:31 - be the zeroth element and numbers of
05:34 - zero will give you three
05:36 - then i will be the second element in the
05:39 - list that that will be 1 and numbers of
05:42 - 1
05:43 - might give you back 5. we're assuming
05:44 - that we passed in this list 2 numbers
05:48 - and then it will be 2
05:51 - so it will say at indic2 give me what
05:54 - numbers is and we'll get back 7.
05:57 - so on and so forth i'll go through this
05:59 - algorithm really quickly with you guys
06:00 - after we're finished writing it
06:03 - and then at the end return result
06:06 - because i really want to make sure that
06:09 - there's not a single part that we are
06:11 - skipping over
06:13 - then create a function called create a
06:15 - function called total that adds up all
06:17 - the elements of an arbitrary list and
06:18 - returns that count using the existing
06:20 - code as a hint use a for loop so it can
06:22 - be used for any size list
06:26 - so
06:27 - this will work
06:28 - let's take it to the ripple and
06:32 - do
06:33 - print
06:35 - our function total let's pass in the
06:37 - list n
06:39 - and let's run it let's see what it does
06:41 - 3 plus 5 plus 7 is indeed 15 and that's
06:45 - what we got right over here okay
06:48 - how did it work well let's see n is
06:51 - three five seven
06:53 - passing three five seven to this guy
06:56 - a length of three five seven evaluated
06:59 - to three
07:00 - range from 0 to 3 evaluated to 0 comma 1
07:03 - comma 2
07:05 - the first time in the loop i is 0
07:08 - numbers of 0 numbers of 0 evaluates to
07:12 - uh
07:13 - numbers evaluates to 3 comma five comma
07:16 - seven
07:17 - uh
07:18 - this list
07:20 - indexed by the for the by the zeroth
07:23 - element gives you back three
07:25 - result
07:26 - is zero zero plus three gives you 3 and
07:29 - now result is 3. then the loop happens
07:35 - again and now this time i is actually 1
07:40 - numbers of 1
07:41 - gives you back
07:44 - a five here
07:45 - result which was
07:49 - three here
07:50 - it's going to be three plus five three
07:52 - plus five is going to give you back
07:53 - eight and now you're gonna have eight
07:56 - here it's gonna keep doing that until at
07:58 - the end
08:01 - result will give you back
08:05 - 15
08:06 - and then
08:08 - since that function returns 15
08:11 - this whole thing gets evaluated to 15
08:14 - and it prints it out to the screen which
08:16 - is how you get to see it and screen is i
08:19 - think right above me so it gets printed
08:21 - out to the screen right there
08:23 - okay
08:25 - all right
08:29 - another way to do this is just to get
08:31 - the element
08:32 - uh directly here it makes more sense to
08:35 - get it directly so i would actually say
08:38 - for
08:38 - number in
08:39 - [Music]
08:41 - numbers
08:43 - uh result is equal to result plus number
08:46 - i think this is a much easier way to
08:48 - write this
08:49 - and it's better
08:51 - for this one because we don't care about
08:53 - the indices
08:55 - but let's go back to that because i
08:57 - think they're gonna make us use it
08:59 - using strings and lists and functions
09:03 - now let's try working with strings
09:05 - so you can do the same thing and do that
09:08 - with strings as well
09:10 - but you can't change values of strings
09:13 - because it's they're immutable
09:16 - we'll find out what that means create a
09:18 - function that concatenates strings so
09:21 - we're going to create a function that's
09:22 - going to keep looping through and adding
09:24 - the strings together that shouldn't be
09:25 - that hard if you guys really think about
09:27 - it you can do it yourself so take a stab
09:30 - at it first and then watch me do it so
09:32 - i'm going to say define
09:34 - string adder uh takes in
09:37 - list of strings
09:41 - and what it will do is
09:43 - for
09:44 - uh each string in the list of strings
09:48 - it's going to
09:50 - uh final string is going to be i'm going
09:53 - to start it off as an empty string
09:55 - so what it's going to do is every time
09:59 - it gets a string i'm going to say that
10:02 - increment the final string
10:04 - um by the final string plus the new
10:08 - string that we add
10:09 - okay and then at the end i'm going to
10:11 - say return the final string so
10:14 - let's create
10:16 - um
10:18 - grocery list let's say
10:22 - or let's just say groceries is equal to
10:26 - banana
10:28 - apple
10:30 - avocado
10:32 - maybe i misspelled that
10:34 - and berries okay
10:38 - and then let's say
10:40 - four
10:42 - or we don't have to actually write
10:43 - anything we've already wrote it let's
10:44 - call our string adder function
10:47 - on
10:48 - groceries
10:50 - and let's make sure to print that
10:53 - and let's run it let's see what happens
10:55 - and you get a banana then it adds apple
10:58 - to it and then it does all that okay
11:01 - if i wanna
11:03 - do it in a little bit of a better way i
11:05 - can say add an
11:07 - additional space at the end of each
11:11 - one so you'll get that space here but
11:14 - you also get that space right here which
11:16 - you don't really need but
11:17 - it's still cool
11:18 - you get these spaces here okay
11:21 - how does this work well let's go through
11:23 - it really quickly so groceries is just
11:27 - that list this gets passed into our
11:29 - function
11:31 - final string is just an empty string in
11:33 - the start
11:35 - and then what we do is that for each
11:37 - string in that so the first time string
11:39 - is banana
11:40 - and final string is an empty string and
11:43 - so it adds
11:44 - banana to that empty string now this
11:47 - empty string is banana
11:50 - um
11:51 - right banana
11:53 - this whole thing actually translates to
11:55 - banana with a space at the end
11:58 - so
11:59 - our final string is actually
12:01 - that
12:03 - then what happens is as we get to the
12:06 - second element apple
12:10 - actually we gotta
12:12 - yeah it's gonna get tricky to do but
12:15 - let's go let's just go back
12:18 - okay
12:20 - oops let's go back to the part where i
12:22 - had the list there cool
12:24 - so the second element in the string is
12:26 - gonna be an apple we have banana here so
12:29 - i'm just gonna leave that
12:31 - and then string is going to be
12:35 - apple
12:37 - this part was banana with a space
12:41 - and then we add empty space here so this
12:43 - effectively turns into
12:46 - banana
12:48 - space apple
12:50 - space and end
12:52 - and so then this guy is now
12:55 - that
12:56 - okay
12:57 - and
12:58 - this that's the way you get banana and
13:00 - apple and then it adds avocados and
13:02 - berries and it adds a space at the end
13:06 - cool
13:09 - okay
13:10 - so we created a pretty nice function and
13:13 - that's effectively what they want us to
13:14 - do so what i'm going to say
13:17 - is i'm probably just going to copy this
13:19 - guy and
13:21 - oops
13:24 - just copy this guy and maybe paste it
13:26 - here
13:28 - the function is called join strings so
13:30 - we're going to say join strings and
13:31 - what's the argument they want accepts an
13:33 - argument called words everywhere i have
13:35 - lists of strings
13:37 - i'm gonna call it words
13:39 - and for now this would make more sense
13:41 - to call it a word here
13:46 - word um no actually
13:49 - yeah
13:50 - word
13:55 - inside the function create a variable
13:57 - called result and set it to an empty
13:59 - string iterate through the words list
14:00 - that's exactly what they're saying right
14:03 - create a thing
14:04 - called the result and make it
14:07 - that
14:08 - instead of final string call it result
14:14 - right
14:17 - okay
14:19 - and iterate through the words list and
14:20 - append each word to
14:28 - result and finally return the result
14:33 - don't add spaces between the joined
14:36 - strings so we're not adding any spaces
14:37 - here right otherwise i would do
14:39 - something like this but i'm not
14:43 - cool okay
14:45 - and it works so you see michael and then
14:48 - it says lieberman
14:50 - yeah
14:52 - okay
14:53 - a little foreshadowing i'm gonna show
14:54 - you guys a really cool and advanced
14:56 - trick to do this
14:58 - a cool way to join all the
15:01 - things in the list
15:03 - is actually to do
15:05 - um this thing called dot join
15:08 - and then pass in that list
15:11 - so what this does
15:12 - is um
15:14 - it joins all the items in the list
15:17 - by this thing here so you can have this
15:19 - thing here be whatever you want
15:23 - uh i'm gonna have it be a space i'm
15:25 - going to say print so you're going to
15:27 - see what i mean in just a second here
15:33 - so you see it actually
15:35 - joined all the
15:36 - elements right each element banana apple
15:38 - avocados berries by this empty space
15:41 - here because i said give it to me by
15:43 - empty space
15:44 - let's say i told it to join it by this
15:47 - it would do just that
15:50 - so this is kind of a nice thing to uh to
15:53 - think about because if you're like
15:54 - creating a game like rock paper scissors
15:57 - maybe it's nice to have each thing
15:59 - separated and decorated in a way so when
16:01 - a person is somebody's playing your game
16:03 - it looks nice it looks formatted even if
16:06 - you're making just a text based game not
16:08 - you know fancy graphics
16:10 - you can still use these things to make
16:12 - it look nice you know you can have rock
16:15 - with some spaces in between and then
16:16 - scissors so it looks nice and separated
16:18 - just just some things to keep in mind
16:21 - but this is a little advanced and cool
16:23 - trick to
16:24 - know about
16:26 - okay
16:27 - lit using lists of lists and functions
16:33 - cool let's get to that
16:36 - using two lists as two arguments in a
16:39 - function
16:41 - so
16:42 - [Music]
16:44 - what does that even mean well it's
16:46 - really quite simple
16:50 - okay i'm going to define some function
16:52 - called join list
16:54 - and i'm going to say m comma n and i'm
16:56 - going to do return
16:58 - m plus n let me show you guys something
17:01 - cool
17:02 - skip
17:05 - so i'm just going to open up my idle
17:07 - here which is the same thing as having
17:09 - my rupple open but again i just like to
17:11 - open up multiple things so you guys know
17:13 - that you can do things multiple ways
17:16 - plus i'm just showing you in python two
17:19 - so
17:20 - in python two or three is actually the
17:21 - same thing if you have two lists you can
17:23 - just add them together
17:26 - plus
17:28 - four five six it just uh concatenates
17:31 - the list together that's it okay pretty
17:33 - simple right so if you wanted to join
17:35 - lists just use the plus operator it
17:37 - knows what to do it adds them together
17:40 - and then just return it so it's
17:42 - literally two lines of code
17:44 - oh wow they actually did the same
17:46 - example as us i wasn't even thinking
17:48 - about that that's hilarious i didn't
17:50 - even read all of this that's really cool
17:56 - so let's run it and you will see
17:59 - that that's what you got
18:01 - okay you can call these variables here
18:03 - whatever you want remember
18:05 - just as long as you are consistent
18:10 - i should still give you back the right
18:11 - answer i just called it mnn i'll call pq
18:15 - a b whatever you want really
18:19 - so
18:20 - let's take this code and put it in here
18:23 - and let's just call it um
18:26 - pq and the only reason i'm calling it
18:28 - different than this is so you don't get
18:30 - confused and think oh these two things
18:32 - have to be the same as the parameters no
18:34 - they don't
18:36 - it's q
18:37 - okay very easy
18:39 - start next lesson
18:41 - using a list of lists in a function so
18:44 - now they're having you do two loops
18:46 - uh what does this mean all right i'll
18:48 - show you just a second here
18:52 - okay four list in list of lists print
18:56 - list
18:57 - so what they're doing is let's say i
19:00 - gave you
19:02 - this list
19:04 - that contains how many elements
19:07 - take a guess
19:09 - it contains only two elements okay the
19:12 - first element in this list is this list
19:15 - here this is the first element
19:17 - and the second element in the list is
19:20 - this list here
19:21 - okay
19:22 - so that comma is telling you since
19:25 - there's only one comma separating these
19:26 - two items it's telling you that they're
19:28 - only two items
19:30 - okay
19:32 - so what does that mean well
19:35 - we're going to loop through
19:37 - what we want to do is loop through this
19:40 - and print out all the items in the first
19:42 - list and then continue looping and then
19:44 - print out all the items in the second
19:46 - list
19:47 - how
19:48 - the heck would we do that
19:50 - well first of all let's just write
19:53 - for lists and lists of lists right this
19:54 - is a variable list of lists lists of
19:56 - lists let's run it let's see what it
19:58 - prints out
19:59 - so effectively what it did is it passed
20:02 - uh
20:03 - you know that is that the first uh
20:06 - element is going to be one comma two
20:07 - comma three so this list comes one comma
20:10 - two comma three which is why up there
20:13 - you see one comma two comma three being
20:15 - printed out the first time and the
20:17 - second time the second element is
20:19 - four comma five comma six and so it
20:21 - prints out
20:23 - four comma five comma six which is why
20:25 - you see that as well right up there
20:28 - four comma five comma six okay
20:31 - but we want to print out one two three
20:33 - line by line and then four five six how
20:36 - in the world do we do that well let's
20:38 - try this
20:40 - let's say
20:41 - uh well how we would normally do that if
20:44 - we were just given one list so let's say
20:45 - for item in one comma two comma three we
20:49 - would simply do print
20:51 - item
20:53 - and that would give us one comma two
20:55 - comma three but here we have
20:58 - a list of lists
21:00 - so
21:01 - the first time it's a little complicated
21:03 - but it's actually quite simple because
21:06 - you're getting back a list so you can
21:08 - still loop through that right
21:11 - so we're imagining that we get back
21:13 - let's say one comma two comma 3. well
21:15 - you can do just that loop so you can say
21:18 - for item in
21:21 - that list
21:23 - print
21:24 - item
21:25 - so what will the loop do
21:27 - here's what it will do
21:30 - it will list of lists as that so the
21:32 - first time list is going to be 1 comma 2
21:35 - comma 3
21:37 - right 1 comma 2 comma
21:39 - 3
21:40 - for item and list
21:43 - so
21:44 - for item in that list is going to be the
21:46 - first item is going to be 1
21:49 - or i'm sorry 1 like that and it's going
21:51 - to print out 1 to the screen
21:54 - then
21:56 - it's not going to go back to line three
21:58 - it's gonna actually just keep traveling
22:00 - between line four and five till the loop
22:02 - here has ended okay it's gonna keep
22:04 - going
22:06 - like that then it's gonna go back to the
22:08 - outer loop on line three
22:10 - so next time the
22:12 - element is going to be 2 is going to
22:14 - come down here
22:16 - and uh you know since this variable is
22:18 - actually item this is item the second
22:21 - time in the loop this is going to be 2
22:23 - and it's going to print out 2 which is
22:25 - you're gonna get this
22:26 - then it's gonna be again item item so
22:29 - both of these are gonna be
22:31 - three the last time
22:33 - and it's gonna print out three then it's
22:35 - gonna see that this loop is over because
22:37 - this is finished
22:39 - so
22:46 - it's gonna go back up here
22:49 - okay
22:50 - the outer loop is not over because it
22:52 - only became the first element it now
22:54 - needs to become the second element it
22:56 - needs to run through the second element
22:58 - so now
22:59 - it's gonna be four
23:00 - four five six
23:04 - right
23:06 - since this variable is lst or a list
23:12 - this is this this is going to be the
23:14 - same thing
23:16 - first so now we come to the second for
23:18 - loop here on line four item is gonna be
23:20 - four
23:22 - the first time and so we're going to
23:24 - print out four then item is going to be
23:26 - five we're gonna print out five and then
23:29 - item is gonna be six we're gonna print
23:31 - out six
23:36 - loop is over right so
23:38 - this kind of thing goes away
23:41 - um and then the we come to the outer
23:43 - loop and python realizes like oh
23:46 - we
23:47 - are done running through that outer list
23:52 - and we're finished
23:54 - and the program is going to be over at
23:56 - that point
23:57 - at that point okay so essentially what
23:59 - we did just to recap is
24:02 - looped through the outer list with the
24:04 - outer for loop and then once we got the
24:07 - inner list which was the first element
24:09 - then we looped through the inner list
24:11 - till the inner list was completed
24:13 - then we went back to the outer list and
24:15 - checked hey are there any more lists in
24:18 - there to loop through when we found
24:20 - another list we went to the inner loop
24:23 - and kept looping through that inner list
24:25 - okay
24:26 - so enough of the theory let's check if
24:28 - it
24:30 - works
24:33 - let's run it and you get back one two
24:35 - three four five six
24:40 - okay
24:41 - so
24:43 - it's called flatten
24:44 - so here's what they want us to do create
24:46 - a function called flatten
24:49 - that takes a single list
24:53 - um so
24:55 - and concatenates all the sub lists that
24:57 - are part of it into a single list so
24:59 - what we want to do is since we see one
25:01 - two three four five six seven eight nine
25:03 - all of that we wanna be able to turn it
25:04 - into
25:06 - um
25:09 - one two
25:11 - three four five six seven eight and nine
25:15 - into one list okay even if we have a
25:17 - hundred lists we wanna just turn all of
25:20 - that into one list
25:22 - so flatten
25:25 - one argument called lists
25:30 - and
25:32 - this is going to be pretty
25:34 - simple
25:37 - but let's let's go through what they're
25:39 - saying here make a new list called
25:41 - results
25:43 - so this is going to be an empty list
25:45 - and what we're going to do is we're
25:46 - going to iterate through
25:48 - lists so i'm going to say for
25:52 - numbers in lists
25:57 - that's what it says right iterate
25:58 - through lists call the looping variable
26:00 - number so the looping variable can be
26:02 - anything i'm going to call numbers here
26:04 - is going to be list so for numbers and
26:06 - lists
26:07 - now i'm going to iterate through numbers
26:09 - four
26:11 - number in numbers
26:15 - for each number appended to results
26:17 - results dot append
26:19 - number
26:21 - and then ultimately i'm going to say
26:22 - return results
26:27 - cool
26:29 - i think there's an easier way to do this
26:32 - as well which i'll show you guys
26:36 - after yes we earned the badge lists and
26:40 - functions we've completed it
26:41 - congratulations we've completed this
26:43 - course epic
26:46 - so now you can pat yourselves on the
26:48 - back i know you've been like holding it
26:50 - in right because at the start of the
26:52 - video i was like don't pat yourselves on
26:54 - the back so go ahead and pat yourselves
26:56 - on the back
26:57 - relax you know stretch whatever you have
27:00 - to do take a break walk around
27:02 - cool off your brain a little bit
27:05 - and then come back because we're not yet
27:07 - done so we're gonna go through it
27:10 - okay
27:12 - how did this how the heck did this thing
27:14 - work this is the crazy thing about them
27:16 - right
27:17 - they show you all of this stuff and then
27:19 - they're not going to explain how each
27:21 - step works
27:22 - because you could have just easily coded
27:24 - this by following their steps without
27:26 - even thinking how to do it
27:29 - all right so here's what's happening
27:31 - we're creating an empty list we loop
27:34 - through each element in that list so
27:35 - let's say the first element is actually
27:37 - a list
27:38 - so it would be better to call this
27:40 - variable list in lists rather than
27:42 - numbers because that's silly
27:46 - so
27:47 - the first time we loop through
27:50 - uh n which is these lists right over
27:53 - here right
27:54 - this is a list containing lists so the
27:57 - first time we loop through it
28:00 - okay let's just let's just walk it walk
28:02 - through it okay
28:04 - i'm gonna
28:05 - we call n here
28:07 - all right
28:08 - that's n
28:09 - we pass that into our uh lists variable
28:12 - and our argument now we have pass in
28:15 - list of lists again this function
28:17 - took only one argument keep that in mind
28:20 - this whole thing is just one list
28:23 - uh containing multiple lists inside of
28:25 - it result boom we initialized it to an
28:27 - empty list
28:29 - so what we did is we did that
28:32 - okay list is not that thing
28:34 - so for list in that
28:37 - the first element
28:40 - is a list one two three
28:43 - and list is one two three here as well
28:46 - number the first time we loop through is
28:48 - one
28:50 - and one we append one right here
28:54 - then the second time number is two it's
28:56 - two we append two right here then it's
28:59 - three right this three right here
29:01 - three three we append three loop ends
29:05 - what do we do
29:07 - we go to the outer loop we change these
29:09 - variables back to what they were
29:11 - number
29:14 - list
29:18 - number
29:22 - lists
29:25 - or sorry that's list this is list
29:28 - okay now
29:29 - our inner loop ended but our outer loop
29:32 - did not end because it only went through
29:34 - the first element we still have one more
29:36 - element left the second element in that
29:38 - is this guy here
29:42 - so the first number in that list is four
29:44 - four we append we go up here we append
29:47 - four then the second element in that guy
29:49 - is five we go and we append
29:51 - five
29:52 - then the next one is six
29:55 - we append six
29:58 - um
29:59 - seven
30:01 - results out of pen seven
30:04 - eight
30:06 - right results dot append
30:09 - eight
30:11 - and then it's nine and results data pen
30:14 - nine
30:16 - and it says return results
30:19 - so this function actually gets
30:21 - evaluated to that
30:24 - and then we call the print function on
30:25 - that list and
30:27 - uh you see that output on the screen
30:30 - okay so if i ran all of this
30:39 - make sure to put uh
30:41 - parentheses there and if i ran all of
30:43 - this you see a list one two three four
30:45 - five six seven eight nine that's how it
30:47 - actually worked
30:49 - now why i said there's an easier way to
30:51 - do this is what i would do is very
30:53 - simple
30:55 - i would say
30:56 - instead of doing an inner loop i would
30:58 - just say results that append
31:01 - um
31:03 - this gets a little bit complicated
31:06 - but so i'm not going to do it but it
31:08 - would essentially be
31:10 - uh element at index 0 plus the element
31:14 - at index 1.
31:16 - um
31:17 - so
31:19 - element at current index basically
31:22 - plus element at
31:25 - uh
31:27 - next index
31:28 - so what that means is in this giant list
31:31 - here it would do current index so let's
31:34 - say our index was at zero because this
31:36 - is this list is at position zero and
31:38 - this list um
31:40 - this element here is at position one so
31:42 - what it would essentially do is
31:45 - that
31:47 - plus
31:48 - that
31:53 - and this would automatically give you
31:56 - one list
31:58 - containing
32:02 - that
32:03 - okay
32:04 - and
32:07 - and it would just add it
32:10 - okay and then at the end you could do
32:12 - results of one
32:15 - or results of zero
32:17 - and get the final result but that just
32:19 - actually that complicates it a little
32:21 - bit
32:22 - um
32:23 - however
32:24 - um that would save you kind of going
32:26 - through another inner loop
32:28 - but you would have to do a different
32:30 - kind of loop for what i was saying
32:32 - because you need access to the indices
32:34 - so you actually need to do a loop with
32:35 - the range
32:37 - function
32:39 - okay so hopefully you understand how
32:42 - that worked let's take a look at our
32:45 - course page
32:47 - because we're done with lists and
32:49 - functions we're at 52 percent slowly but
32:52 - surely we're getting there
32:54 - and we're going to be at a really fun
32:56 - part in the next video we're going to be
32:57 - going through battleship and how to
32:59 - create an actual game how great is that
33:03 - then we have unit 8 left
33:05 - unit 9 is going to be awesome
33:07 - unit 10
33:09 - i was thinking about skipping it but i'm
33:11 - gonna do it last because it's
33:14 - not useful
33:15 - so we're gonna actually get to more fun
33:17 - parts first that's what that means for
33:19 - you
33:21 - other than that that's it for this video
33:23 - guys you're watching um
33:26 - codecademy part 16
33:29 - right this is kazi from
33:30 - clevverprogrammer.com
33:32 - please subscribe please like the video
33:35 - if it really helped you share it with
33:37 - whoever you want or maybe don't share it
33:40 - maybe that's your secret way of getting
33:41 - better at programming
33:43 - whatever's the case i hope you're
33:45 - enjoying yourself
33:46 - more than anything else and then i hope
33:49 - you're learning as well
33:52 - have a good rest of the week and i will
33:55 - see you in the next video codecademy
33:57 - part 17
33:59 - okay take care