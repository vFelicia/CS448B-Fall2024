00:00 - hey guys what is up this is kazy welcome
00:02 - to another part of code academy this is
00:05 - going to be part four so um we're going
00:08 - to start that in just a little bit but
00:10 - hopefully you guys have had something to
00:13 - eat maybe you have a coffee with you
00:16 - right now because as we get into this uh
00:19 - it's going to get a little bit longer
00:21 - right so and you want to be able to sit
00:24 - through it and maybe even go for a
00:25 - little bit longer so hopefully you uh
00:28 - feel full and you're not t tied and
00:31 - we'll we'll get going through this thing
00:33 - all
00:34 - right and a lot of you since I'm
00:36 - recording this in August of
00:39 - 2016 a lot of you are probably going to
00:41 - college so this is a good time to work
00:44 - with courses like these and follow these
00:46 - types of tutorials so you can also get a
00:49 - head start in your computer science
00:50 - classes or at least know what's to come
00:53 - if you are going to take computer
00:54 - science class later on sorry that took
00:57 - way too long let's jump right into it
00:59 - python 19%
01:02 - boom okay so we're going to break it
01:05 - down we finally entered the pig latin uh
01:10 - translator now let's take a let's take
01:14 - what we have learned so far and write a
01:16 - pig Latin
01:17 - translator great sounds
01:20 - good let's see how Pig Latin
01:23 - Works where you move the first letter of
01:25 - the word to the end and add a so python
01:29 - becomes
01:30 - y python
01:33 - a so we took this P we added it to the
01:37 - end so it became yon p and then we added
01:41 - a y to it
01:42 - okay so that's what pigl uh is so the
01:47 - first thing before you start coding is
01:48 - really understand make sure you
01:51 - understand in English what they're
01:52 - telling you to do okay because I
01:54 - remember when I was doing this pig latin
01:56 - thing a long time ago I didn't grow up
01:58 - in America so I didn't that was I didn't
02:00 - know what Pig Latin was so I started
02:03 - coding right away and it turned out that
02:06 - I ended up doing some kind of stupid
02:08 - solution that didn't work out at the end
02:10 - and I ended up wasting my time because I
02:12 - did not understand the problem itself so
02:14 - half the battle is understanding the
02:16 - problem so let's go and do uh let me
02:19 - give you something like Pig okay how
02:22 - what would you convert it
02:24 - to if you said it would convert to GI I
02:30 - p a y you're correct okay so once again
02:35 - I turned it backwards and added ay okay
02:40 - cool so it sounds simple enough let's
02:44 - work through it
02:48 - so say we have something like
02:51 - um I don't know I have bananas right
02:55 - what I want to be able to do is put that
02:57 - take that b and put it all all the way
03:00 - to the end right and then add an ay to
03:04 - whatever it
03:05 - is so let's say I you know I take that
03:09 - bananas and again it's going to be a n a
03:13 - n as s b followed by ay right so just so
03:18 - we have a written example maybe we can
03:20 - even put it in our multi-line comment
03:24 - block or we don't have to be that fancy
03:26 - we can just use our single line comments
03:30 - just to show us how this program
03:32 - actually
03:33 - works so they say step one ask the user
03:37 - to input a word in
03:39 - English so we are going to say user
03:43 - input is equal to Raw
03:47 - input right and please enter your word
03:56 - here so raw input what does it do it
03:59 - takes out a prompt it makes your
04:01 - programs really fun right it takes out a
04:04 - prompt and it lets the user put in
04:07 - whatever word they want to put in and
04:08 - whatever word they put in your variable
04:11 - user input will become that
04:14 - so I'm going to copy this
04:17 - and I
04:19 - will show
04:22 - you how this actually works so let me
04:25 - open up
04:28 - python I do this thing so I can activate
04:31 - python 2 because that's what they use
04:34 - but you don't need to worry about it if
04:36 - you have a Mac you can just type in
04:38 - Python I'm going to do user uncore input
04:42 - is equal to Raw input right and it tells
04:44 - me please enter your word here so I'll
04:46 - type in
04:48 - Bobby right and now if I look at what
04:51 - user input is it's going to tell me
04:53 - Bobby so that makes my programs fun
04:57 - because it waits for the user to type
04:59 - something in and then it runs
05:01 - it
05:04 - cool all right make sure the user
05:07 - entered a valid word so we have to make
05:10 - sure that it is a word right it's not uh
05:14 - they didn't put in something random so
05:16 - they didn't put in I don't know nothing
05:20 - like just an empty
05:22 - string convert the word from English to
05:27 - piglin okay so what whatever the user
05:30 - inputs we're going to take the first
05:32 - letter and put it all the way at the end
05:36 - okay how would we do that
05:39 - H well we can try to do some string
05:43 - slicing okay we can say last
05:47 - letter let's first try it in the
05:49 - terminal okay so let's say user
05:52 - input is Bobby right I'm not going to
05:55 - press enter because it's already Bobby
05:57 - so if I put in user input put you can
06:00 - see it's pooby h so what do I do now
06:05 - okay let's take the uh let's take the
06:09 - first letter and save it and we'll call
06:11 - it last letter and what we're going to
06:15 - do is we're going to take user input and
06:19 - we're going to take its first spot okay
06:22 - user input's first spot is actually
06:26 - B
06:28 - okay now if you look at the last letter
06:31 - it's going to be telling us what the
06:32 - first spot is the reason why I'm calling
06:34 - it the last letter is because I'm going
06:36 - to later move it and make it the last
06:39 - letter okay now we want to keep the ABI
06:43 - part right Obby y so we would like to
06:46 - keep this
06:49 - part this is something we can do using
06:52 - string slicing in
06:54 - Python so I can say that give me user
06:59 - input
07:00 - from 0 to
07:03 - five if I say 0 to six it's going to
07:07 - still give me all the way up to the end
07:09 - which is B if I said Give Me 0 to three
07:13 - you can see that it gives me the first
07:14 - three
07:16 - letters okay or if I leave it blank it
07:19 - actually gives me from zero all the way
07:23 - to the end okay so what I want to do is
07:26 - I don't want the first letter because
07:28 - I've already saved it so I'm going to do
07:31 - one and just hit enter here and you can
07:35 - see that it's showing me
07:38 - Obby that's great we want this plus the
07:43 - first letter we saved so we can do last
07:47 - letter okay so now we're getting the
07:51 - first all of the first letters except
07:55 - for the very first one and we're getting
07:58 - the first one to be at the
08:00 - end now all we need to do is just add an
08:03 - ay at the end okay so I can simply go
08:07 - plus a
08:11 - y okay and it want they want us to do
08:14 - that in short casing so we'll do that in
08:16 - short casing and that's really our
08:18 - algorithm now we just need to summarize
08:21 - our steps and that's our algorithm for
08:23 - pig latin okay for those of you who are
08:26 - like what the heck is this thing that KY
08:29 - is using us my name is kazy just in case
08:31 - you guys didn't
08:33 - know I'm using the terminal to run my
08:36 - commands interactively if you have an
08:39 - idle you can use an
08:41 - idle or you can go to that website I
08:44 - showed you
08:47 - reel.it and do all your stuff here okay
08:50 - find python go to languages find Python
08:54 - and simply do everything that I was
08:56 - doing but you can do it here I just like
08:58 - to use the terminal
09:01 - so we're going to summarize our steps
09:03 - right we said we're going to save the
09:06 - last letter so we're going to say last
09:08 - letter is equal to user inputs first
09:12 - letter and now we're going to
09:16 - say let's see what we said
09:19 - here pretty much that thing there so
09:22 - we're going to say user input so
09:25 - whatever the user actually input in the
09:27 - start Plus
09:31 - and we want whatever the user input from
09:34 - one all the way to the
09:36 - end plus last
09:39 - letter so we're going to attach on the
09:42 - last letter plus a
09:46 - y and we want to make sure we type in
09:49 - print and that's it convert convert the
09:53 - word from English to
09:57 - pigl okay double check checking not sure
10:00 - what they mean by the Second Step
10:03 - because we can get pretty advanced in
10:04 - that but let's just
10:07 - see okay let's cross our fingers hit
10:11 - save and submit let's see what it says
10:13 - let's
10:14 - do um what's the example they gave us
10:18 - let's do python just like this said
10:19 - right
10:21 - python beautiful next lesson we did it
10:25 - guys
10:26 - boom move on
10:30 - a Hoy or should I say a Hoy ah I get it
10:35 - they're doing some pig lad and stuff
10:36 - there now let's warm up by printing a
10:39 - welcome message for our translator users
10:42 - please print the phrase Pig
10:45 - Latin okay so they want us to print the
10:48 - phrase Pig
10:58 - ltin
11:01 - where do
11:02 - we Pig
11:09 - L I'm not sure what they want us to do
11:12 - here it looks like you printed please
11:13 - enter your word here oh okay so in here
11:16 - they want us to do Pig Latin Pig
11:22 - Latin okay that's weird but
11:26 - sure input next we need to add ask the
11:29 - user for input so you see they're going
11:31 - to use raw input
11:33 - here in the above example raw input
11:36 - accepts a string prints it and then
11:38 - waits for the user to type something and
11:41 - press enter right so it waits for people
11:45 - whenever you do raw input like if I did
11:47 - raw input
11:49 - here it waits for a person to type in
11:51 - something blah blah blah blah but
11:53 - whatever I just typed got wasted because
11:56 - I didn't use a variable to store it now
11:58 - I can never
11:59 - use that information again it's gone
12:02 - right so if I wanted to save that
12:05 - information I can do X is equal to Raw
12:09 - input and I can type in that same
12:11 - garbage that I typed last time now when
12:13 - I type in X you can see that it's
12:15 - showing me that value now whenever I
12:17 - type in X I'm getting the stuff that the
12:19 - user
12:21 - input but it's not very intuitive right
12:23 - when I run raw
12:25 - input well if you use somebody else's
12:29 - program and it was using a line like raw
12:31 - input and then you know it let you type
12:33 - in whatever you
12:34 - want you could just be looking at the
12:37 - screen and going what the heck does he
12:39 - want me to type he or
12:41 - she well that's why we put in something
12:45 - in raw input that tells the user what
12:47 - you are expected to
12:49 - type okay so
12:52 - please enter your favorite food right
12:58 - now when you see the value of raw inp
13:00 - put and you're the user using it not the
13:02 - person who coded it right you're just
13:04 - using this app or one of your users is
13:07 - using this app that you created and now
13:10 - they can read it and go oh I see what
13:13 - you're saying please enter your favorite
13:15 - food sure I'll enter my favorite food
13:18 - whatever right I love Thai fried rice so
13:21 - much so I'll type that
13:24 - probably
13:26 - cool in The Interpreter python will ask
13:29 - blah blah online for use raw input enter
13:31 - a word to ask the user to enter a word
13:34 - save the results of raw input in a
13:37 - variable called
13:41 - Original
13:44 - okay we will create a variable like
13:48 - original and use raw
13:53 - input enter a
13:57 - word boom
14:01 - okay enter a word
14:03 - hello
14:05 - cool check yourself wait how many things
14:08 - do we have
14:12 - here okay
14:16 - cool all right now we need to ensure
14:19 - that the user actually typed something
14:22 - so here they're checking if the length
14:24 - of the string is greater than
14:27 - zero how that works works
14:32 - is length of
14:37 - something gives you what the length of
14:39 - that thing is so this whole thing turns
14:42 - into a
14:44 - number and so if the length of a string
14:47 - is greater than zero well that's not an
14:50 - empty string anymore that means a user
14:52 - actually typed in something so we
14:56 - essentially want to make sure if it's
14:57 - greater than zero
14:59 - that will tell us that the user typed in
15:02 - something
15:05 - okay length of nothing is going to give
15:07 - you zero okay so that's why we're going
15:10 - to use an if else conditional block like
15:12 - this now write an if statement that
15:14 - verifies as the string has characters
15:17 - add an if statement that checks if that
15:19 - length of original
15:21 - variable is greater than zero don't
15:24 - forget the
15:25 - colon if the string actually has
15:28 - characters in print the user's word
15:31 - otherwise an L statement please print
15:34 - empty cool simple simple enough okay
15:40 - again anytime you feel like you want to
15:41 - take on a challenge on your own while
15:43 - you're watching this video pause the
15:45 - video and try it on your own first and
15:47 - then watch me do it because it always
15:49 - looks really easy if I'm doing something
15:51 - but if you don't know it then it's going
15:53 - to be really hard okay um but practice
15:56 - working on it on your own then if you
15:59 - fail come watch this and pick up things
16:02 - from it
16:05 - okay all right so if length of original
16:09 - is greater than
16:11 - zero then print
16:16 - original else
16:19 - print
16:21 - empty so I'm used to using Python 3 so
16:24 - you'll always see me putting parentheses
16:26 - around the print because print is a
16:28 - function
16:30 - function
16:32 - hello cool start next
16:36 - lesson now they want us to check do is
16:39 - Alpha so this is a function to check if
16:43 - something is uh I
16:47 - believe non-letter characters so you
16:50 - have to make sure that it's contains it
16:53 - returns false that it has non-letter
16:57 - characters okay so some weird symbols or
17:00 - something let's make sure the word user
17:03 - enters contains only alphabetical
17:05 - characters which means boom
17:09 - right so on and so forth use n to a
17:14 - second condition so basically what they
17:17 - want us to do is um join these two
17:20 - statements with an and or these
17:23 - conditions so this whole thing is called
17:25 - a condition okay now we're going to use
17:28 - an and to join another
17:31 - condition so we're going to say dot
17:33 - original is Alpha
17:35 - okay um not
17:40 - Alpha and that should be good
17:43 - right it looks like your code does not
17:46 - print when original is only made of oh
17:49 - Alpha is really for
17:52 - alphabetical character so we do want it
17:55 - to be
17:57 - right
17:59 - okay cool start next lesson so here you
18:02 - want to do and original is Alpha
18:06 - boom pop quiz when you finish one part
18:09 - of your program it's important to test
18:10 - it so we are going to write some kind of
18:13 - tests for this take some time to test
18:16 - your current code try some inputs that
18:17 - should pass that and some that should
18:19 - fail enter some strings that contain
18:22 - non-alphabetical characters and an empty
18:26 - string okay so we're going to try to
18:28 - test this thing now I'm going to try
18:30 - something that's not a string so I'm
18:32 - just going to hit
18:34 - enter okay it said empty very smart I'm
18:38 - going to hit X I'm going to try it
18:40 - again I really want to try to break this
18:42 - thing right I want to do
18:44 - numbers hit
18:46 - enter it said empty that's wrong it
18:49 - should not say empty it should say
18:50 - something
18:51 - like those were not alphabetical
18:54 - characters but that's okay for
18:57 - now okay okay now we can get to start
19:00 - translating Pig Latin let's review the
19:02 - rules for translation you move the first
19:04 - letter of the word to the end and then
19:05 - append the suffix a something that I
19:08 - realized a little while ago I went ahead
19:10 - of myself and solved the entire Pig
19:12 - Latin I think that we were not supposed
19:15 - to do that till later because I was
19:17 - wondering I'm like they didn't even show
19:18 - you guys raw input so hm but it's okay
19:22 - cuz you guys are ahead of the curve now
19:24 - no worries we'll keep
19:27 - going all right all right so we know the
19:30 - rules we discussed it in detail let's
19:33 - create a variable to hold our
19:35 - translation suffix create a variable
19:37 - named pyg and set it equal to the suffix
19:39 - a
19:42 - y um variable named
19:46 - pyg suffix a y
19:52 - okay word up let's simplify things by
19:54 - making the letters in our word word
19:57 - lower case so we're going to first take
19:59 - the thing and we're going to make it
20:00 - lowercase so we're going to go original
20:04 - is equal to original. lower okay so
20:07 - essentially we just make it lower or how
20:10 - I like to do it is lower right there as
20:13 - soon as we get it much
20:16 - better all right you can see first
20:18 - letter second letter third letter so on
20:21 - and so forth creates a variable called
20:24 - word that holds the lowercase conversion
20:28 - of original
20:29 - so effectively what that does is if
20:30 - somebody puts in something in all caps
20:33 - it's going to turn everything into a um
20:36 - small
20:39 - letters create a new variable called
20:41 - first that holds word of zero the first
20:44 - letter word so you can see how I did it
20:46 - earlier they're now doing it pretty much
20:48 - the same way so we're going to
20:52 - go okay even though I like to do it like
20:55 - this I cannot because they want me to
20:57 - create a variable called word
20:59 - so word is just original but
21:03 - lowercase and first is words first
21:07 - letter so we're saving that first letter
21:09 - because we want to move it all the way
21:12 - to the
21:13 - end cool save and
21:17 - submit start next
21:20 - lesson now that we have the first letter
21:23 - stored we need to add both the letter
21:25 - and the string stored in pyg to the end
21:28 - end of the original string remember how
21:32 - to
21:33 - concatenate strings together basically
21:36 - it's adding strings together okay
21:38 - concatenate is a big word all it means
21:40 - is string plus another string that's
21:45 - it they're showing an example greeting
21:48 - name greeting plus name that would give
21:51 - you hello
21:54 - Dy okay so on a new line after you
21:57 - created the first variable create a new
21:59 - variable called new word and set it
22:01 - equal to the concatenation of first of
22:04 - word first and
22:07 - pyg
22:09 - okay
22:11 - so let's go here because I want it to
22:14 - check our if thing is the
22:17 - word so we're going to create a new word
22:20 - and it's basically concatenation of word
22:26 - plus um first plus P this should not be
22:31 - the whole thing but let's give it a
22:33 - try
22:36 - cool all right well done now we have the
22:40 - first letter showing up both at the
22:41 - beginning and near the end that's
22:47 - great but the problem is it's showing up
22:50 - both at the beginning and near the end
22:53 - we only wanted to show near the end not
22:57 - the beginning right that's not the part
22:58 - we care
23:00 - about cool first we create a variable s
23:03 - and give it the string
23:08 - Charlie all
23:10 - right okay let's do
23:17 - that next we use the first letter of
23:20 - Charlie okay so they created uh they're
23:22 - just showing you here I don't think I
23:24 - need to actually write it
23:25 - down so they created Charlie they used s
23:29 - of zero to get the first letter of
23:32 - Charlie that c right there and then they
23:35 - used one through four to effectively get
23:38 - H
23:40 - A of Charlie
23:48 - okay set new word equal to the slice
23:52 - from the first index all the way to the
23:53 - end of new word use one colon Len of new
23:57 - word to do this
24:01 - cool set new word equal to the slice
24:03 - from the first index all the way
24:06 - use so what they want us to do is
24:10 - do
24:15 - this okay so new word is now equal to
24:20 - one Len
24:25 - new
24:27 - okay
24:31 - um okay Len of new word is just a trick
24:34 - that they're using which is to get the
24:37 - length of the actual word so however
24:39 - long new word is l of new word will
24:42 - essentially get that number so if
24:44 - it's four letters combined with a Y
24:47 - turns into six now line of new word is
24:50 - going to give you six so this whole will
24:52 - turn this whole thing will turn into one
24:54 - colon six
24:56 - okay um your code did not run to end see
25:00 - the console window for the
25:04 - message what is the error
25:08 - um syntax error that's
25:11 - weird where is the syntax error I do not
25:15 - see
25:22 - it um I'm pretty sure that colon is
25:27 - fine
25:30 - there is no syntax error here
25:35 - what okay let me try this line in my
25:40 - terminal H interesting syntax
25:49 - error what is going on
25:57 - here
26:01 - oh I'm being
26:07 - silly okay you have to index a existing
26:11 - thing right like you can't just ex you
26:14 - can't just index nothing so you can't
26:16 - just do one colon 4 that doesn't make
26:18 - sense you have to do one colon 4 of
26:20 - let's say this word and now that'll
26:23 - equal to something
26:25 - like
26:27 - YT AG
26:29 - right four means up to but not including
26:32 - so it's actually up until
26:35 - three so we have to actually index new
26:38 - word the reason why I keep these is so
26:41 - you can see that people can make
26:43 - mistakes right I can easily edit this
26:45 - part out but I will not because a lot of
26:48 - us go through this thinking process and
26:50 - I don't want you to think that I'm some
26:51 - kind of like Immortal being right just
26:53 - cuz I have a little bit of Head Start
26:54 - than you might have in computer
26:56 - programming so we all go go through some
26:58 - silly mistakes even programmers and
27:00 - professional software developers so it's
27:03 - okay to just be like okay made a mistake
27:05 - moving on it's not a big deal okay
27:10 - hello cool easy testing testing is this
27:15 - thing on so I think after this I'm going
27:17 - to end this part of the tutorial cuz Pig
27:20 - Latin is going to be over and we'll
27:22 - start the next
27:23 - part yay you should have a fully
27:26 - functioning Pig Latin translat
27:28 - test your code thoroughly to be sure
27:31 - everything is working smoothly you'll
27:32 - also want to make sure any print
27:34 - statements you were using to help debug
27:37 - now might be a good time to add some
27:39 - comments too make sure your code is
27:41 - clean commented and fully functional is
27:44 - just as important as writing it in the
27:45 - first
27:46 - place okay so we have this a thing that
27:51 - we add at the end right there
27:55 - py we put the first letter right before
27:58 - the AY which is how we're supposed to do
28:00 - it we put that word there and then
28:03 - effectively on line 13 what we're doing
28:06 - is we're just removing the first letter
28:09 - that's all that we're doing there's
28:10 - nothing special about that line there's
28:12 - not some other brilliant stuff that
28:13 - we're doing so if I gave you new word if
28:17 - I said it's equal to like let's say Y
28:20 - what was it
28:22 - y think it was like yon P ay right
28:28 - except our new word is like this after
28:33 - line 12 so what our line 14 does is
28:37 - essentially
28:39 - now right let me comment this out
28:44 - now new word is equal equal so it's
28:51 - essentially
28:54 - um
28:56 - y okay that's what it does it says take
29:00 - this word start from the letter one
29:04 - position one and go all the way to the
29:06 - end that's
29:08 - it typing in Len new word here is the
29:11 - same thing as not typing in anything
29:13 - here which is a lot easier but they just
29:17 - I don't know want to be fancy or
29:19 - something but cool uh let's type in
29:22 - Python and we should get back okay we
29:25 - never typed in a print statement but if
29:27 - we did new word would be python let's
29:30 - just do it just in
29:33 - case
29:34 - print new word right what's the point of
29:37 - writing our program when it doesn't even
29:40 - print anything so we want to make sure
29:42 - that we see that beautiful thing printed
29:46 - beautiful hit next we are done with that
29:50 - section we are on to functions
29:52 - congratulations for everybody that made
29:53 - it here any questions comments concerns
29:58 - put it down in the YouTube section below
30:01 - or if you you're seeing this video on my
30:03 - website clever
30:04 - programmer um make sure you comment down
30:07 - there below so yeah ask feel free to ask
30:10 - any questions other than that I will see
30:12 - you in code cademy part five take care
30:16 - and have a wonderful day