00:00 - hey guys now we're going to start the
00:02 - really interesting stuff we're going to
00:03 - start doing some problems and so you
00:06 - guys can actually do it okay now this is
00:08 - the part where you get involved into
00:10 - this process so if you were passively
00:13 - learning up until now stop now and start
00:18 - actively being part of this okay because
00:20 - that's how you will truly learn so let's
00:22 - start off by I'm going to give you guys
00:24 - problems to do but first I want to show
00:26 - you how it's structured so then when you
00:29 - read those problems you're not just
00:30 - sitting there like what is going on I
00:32 - want you to start understanding how to
00:34 - problem solve and then I'll give you
00:36 - guys exercises that you can solve on
00:37 - your own and then I'll provide you a
00:39 - solution so let's get started let's say
00:41 - I give you a
00:42 - function called uh
00:46 - sum two okay and it Returns the sum of
00:53 - two numbers okay so let's just make it a
00:58 - little bit more clear
01:03 - a function called sum two that takes
01:06 - in two inputs and it returns a sum of
01:13 - uh those two numbers okay that's the
01:19 - thing that's what it's saying now your
01:22 - job would be to break this down so how I
01:24 - would break this down and I would say
01:26 - here's what the input does it takes two
01:29 - things let's call it num one num two or
01:34 - let's not be lazy and say number one and
01:36 - number
01:38 - two and then output is just number one +
01:45 - number two okay so it takes those two
01:49 - numbers and it returns them so it helps
01:52 - me break this whole sentence into
01:55 - something that I can code much easier
01:57 - okay and then a name of the function
02:00 - function name is called sum
02:04 - 2 okay so now I know what the output of
02:08 - it is like kind of how it's done what
02:11 - the input it expects now I'm going to
02:14 - try to see if I can create some examples
02:16 - of what it should look like so I want to
02:18 - be able to say sum two give it some
02:21 - number like one and
02:24 - two so this is how I'll actually use it
02:28 - okay
02:30 - and then my expected output should be
02:34 - three right if I take one and two if I
02:37 - give it one and two it should add it and
02:39 - it should return three all right that's
02:43 - my expected output okay so now let's get
02:47 - to coding this kind of function if you
02:50 - give it something like 100 and then you
02:52 - give it 200 here it should return 300 so
02:56 - here's our work Define sum two I want to
03:00 - give it one and two or sorry I want to
03:02 - give it number one I want to give it
03:04 - some number uh some another variable
03:07 - called number two and I want to say
03:09 - return number one plus number
03:13 - two all right and now let's test it out
03:16 - I'm going to give it if you just Define
03:18 - a function and don't do anything else
03:20 - notice what happens when I run it I get
03:22 - none nothing happen it's like defining a
03:25 - variable if I say x is equal to 5 it
03:28 - doesn't actually run and give you
03:29 - something something it just makes X5 so
03:32 - function gives names to like blocks of
03:35 - code all right now let's print it out
03:39 - let's call the function sum two on a
03:42 - number one and two and let's see if it
03:44 - matches our expectations and it gives us
03:47 - back three okay
03:50 - now let's do it on another one 100 and
03:56 - 200 right it gave us back 300 that's
04:00 - good it's taking those two numbers and
04:01 - returns them well how does it work when
04:03 - we call the function with 100 and 200 as
04:06 - inputs it goes back to the definition of
04:08 - the function puts in 100 for number one
04:11 - right it puts in this 100 for number one
04:14 - and puts in this 200 for the second
04:16 - second
04:17 - number so everywhere it sees number one
04:19 - it just replaces with 100 everywhere it
04:22 - sees number two it replaces with 200
04:25 - okay
04:27 - so this happens and then this happens
04:29 - happens okay it does
04:33 - 300 all right that's the result of
04:36 - calling the sum to function so this part
04:39 - evaluates to 300 and then it puts that
04:43 - part out to the screen okay and that's
04:45 - the same logic that gets applied for 1
04:47 - comma
04:49 - 2 Okay so this was the example in the
04:54 - next video I want to give you your very
04:56 - first problem okay so I hope you're
04:58 - excited and let's go from
05:02 - there