00:00 - in this video you're going to be
00:01 - building Instagram web 3.0 adapt using
00:03 - infuria on the ethereum blockchain
00:06 - you're going to be able to upload images
00:07 - create posts on the blockchain and
00:09 - verify them using etherscan and other
00:10 - and other users will be able to come
00:12 - over and retrieve and view those images
00:13 - and kind of only fan style they will be
00:16 - able to tip you so that's uh let's go
00:18 - ahead and jump straight into the build
00:19 - all right let's go ahead and get started
00:21 - building the Instagram clone so as usual
00:25 - step number one is always going to be
00:27 - using our custom made clever programmer
00:30 - CLI tool well obviously without the
00:32 - quote that would be helpful
00:34 - so pop in your name and email
00:37 - obviously in the other order and then
00:40 - you can just start typing Instagram and
00:42 - it will show up right there and as you
00:44 - can see it literally just opened up
00:46 - infuria
00:47 - go ahead accept that and if you don't
00:51 - have an account yet you can go ahead and
00:53 - sign up right here I'm already logged in
00:55 - so I'm just going to go ahead and click
00:57 - dashboard but once you sign in this is
00:59 - basically the screen that's going to
01:01 - greet you and here you can see I have a
01:04 - couple of projects from before but we're
01:07 - not going to be using that now so you
01:09 - can go ahead in the top right corner go
01:11 - ahead and generate new key you want to
01:14 - select web3 API which
01:17 - it says 4 Milli ethereum because if you
01:19 - are now supporting a bunch of random
01:23 - chains so I don't even know how many
01:25 - chains they do support but you will see
01:26 - inside so I'm just going to type in
01:29 - Instagram and then hit create and then
01:32 - yeah these are all the chains they
01:34 - supports inferior is jacked this is the
01:37 - key that you're going to be needing so
01:39 - go ahead and copy that you can just
01:42 - press that and then we'll say copy them
01:44 - point and we'll actually wait a little
01:47 - bit until the CLI tool finishes setting
01:50 - up our project and once we're there
01:52 - we're going to continue now once you see
01:55 - opening the S code and ready and
01:58 - actually it opened up on my other screen
02:01 - but here it is the Instagram clone
02:04 - starter files and everything and you can
02:07 - go ahead and double check that all the
02:09 - node modules are installed so like you
02:11 - should see it here and then you should
02:13 - see it there
02:14 - and that should be basically
02:16 - pretty much enough to go with let's go
02:19 - ahead and spin this application up so
02:22 - what I'm going to do is use the built-in
02:23 - terminal in here and I'm going to use
02:25 - that to CD into without the caps lock
02:29 - see it into my next app and then once
02:32 - I'm in there I can just go ahead and
02:33 - type in yarn Dev
02:35 - and as usual
02:37 - our next application is up and running
02:39 - now I'm going to need a chrome for that
02:41 - let's go ahead and grab that Chrome
02:45 - and I'm going to put it right here
02:48 - little window management there and let's
02:51 - go ahead and just type in localhost
02:54 - anyways here's the Instagram clone and
02:56 - this is what we're going to be using to
02:58 - build on top of and with that let's go
03:00 - ahead and get started building the
03:02 - contract
03:03 - all right now let's go ahead and get
03:05 - started setting up all the ethereum
03:08 - related stuff wait let's just put a
03:10 - contract on the ethereum blockchain and
03:13 - to do that we're going to use truffle so
03:17 - we're just I'm just going to type in
03:18 - Shuffle in it oh actually I shouldn't
03:20 - have done that all right cut all of it
03:23 - like the video is starting now
03:25 - actually it's starting now all right
03:27 - let's go ahead and just build this
03:29 - contract and get everything onto the
03:31 - ethereum blockchain so what I'm going to
03:33 - do is just create a brand new folder in
03:36 - here I'm just going to type in truffle
03:38 - app and then using my terminal I'm going
03:40 - to go into truffle app and then just
03:42 - type in truffle init ah no need for four
03:46 - no need to no need to force it
03:49 - so that should be taking Eric care of it
03:52 - pretty soon all right back to folder
03:55 - creation
03:56 - so now that I have my new folder wait
04:00 - all right so let's go ahead and add a
04:02 - new folder which I'm just going to call
04:04 - truffle app and using my terminal I'm
04:09 - just going to go in there and you can go
04:12 - ahead and set up a brand new truffle
04:14 - project that will be very easy to deploy
04:17 - onto the blockchain using truffle so
04:21 - we're going to type in truffle then it's
04:22 - space period
04:24 - and that should be a pretty fast thing
04:27 - to do now there's a few things that
04:29 - we're going to be doing so step number
04:31 - one go into your migrations folder so
04:34 - don't worry about that file you won't
04:36 - have it and in your migrations folder
04:38 - you want to add a new file that will
04:41 - call zero one underscore deploy.js
04:45 - and actually before we set that up one
04:49 - more thing I like to do is just get
04:51 - started with the contract so what you
04:53 - can type in is Shuffle create check and
04:56 - then just say inspect
04:58 - Instagram like that and that all like
05:01 - basically just create a new solidity
05:03 - file with all the basic stuff I'm gonna
05:06 - go ahead and zoom in for you making it
05:09 - nice and big that's what she said so now
05:12 - that there's that's out of the way we
05:14 - can go into our deep deploy file and
05:17 - we'll need to import that same contract
05:20 - that we just created so const Instagram
05:23 - he calls and instead of like regular
05:25 - required we're going to use artifacts
05:28 - supplier
05:29 - and we're going to go and we're going to
05:31 - go ahead and say module exports and
05:35 - Export the deployer itself we're not
05:37 - going to be using this for a little bit
05:39 - this is just to set up set the contract
05:42 - up to be able to deploy and it's such a
05:44 - quick thing that I figured like I'll do
05:46 - it now and usually I forget it if I do
05:49 - it after I finish the contract so I just
05:51 - wanted to get it out of the way and now
05:53 - let's go we're actually going to start
05:55 - typing solidity code so before we go
05:58 - ahead before we do anything what we're
06:01 - really going to do is update the version
06:03 - of the solidity or update the solidity
06:06 - version we're going to be using and
06:08 - that's going to be 0.8.17 that is
06:11 - currently the latest one at the time of
06:13 - shooting which you can see September 29
06:15 - 9 A.M or like almost 10 at this point
06:19 - and we're actually not going to use the
06:21 - Constructor at all however what we're
06:24 - going to have is we're going to have a
06:26 - struct which you should just think about
06:27 - it as like an object we're going to have
06:30 - image objects that we'll have to
06:32 - predefine and they will have an ID they
06:36 - will have an image URL which we're just
06:39 - going to call URL then obviously they
06:42 - will have a caption and they will have
06:44 - and because this Instagram will actually
06:47 - allow users to tip each other we'll
06:50 - actually store the total tip tipped
06:55 - amount basically there and then you also
06:57 - want which obviously shouldn't really be
07:00 - a string it should be a un256 so I don't
07:03 - know what I did there but then you want
07:05 - to have an author that's going to be
07:07 - payable because the contract will
07:10 - actually figure out all the tip
07:13 - transferring things so it will act as
07:15 - like stripe sort of thing is it gonna be
07:17 - a payment processor as well and so we're
07:19 - just going to call it author and then I
07:23 - like to create an address
07:25 - an array of addresses of all the tippers
07:28 - so Tipper addresses like that and so
07:32 - that will be our image oh yeah the
07:34 - errors what do I so that's cool and
07:36 - there's going to be a few more things
07:37 - that we're going to be setting up so
07:39 - we're gonna have a u in which will be a
07:41 - public number and that just that's gonna
07:44 - literally take care of the amount this
07:48 - is going to count how many images we
07:50 - have so this is going to be an index and
07:52 - that's the that's what we're going to
07:54 - implement and use it as ID later on dude
08:00 - and so one more thing we're going to be
08:02 - adding is a mapping and that mapping is
08:06 - all it's going to do is we'll be able to
08:08 - fetch individual images using this
08:10 - mapping so we're going to have the ID
08:12 - that we're going to map to an image
08:15 - which would be a public public variable
08:18 - and you should just think about it as
08:19 - like a tuple or some sort so this
08:22 - mapping will look like that and we're
08:24 - gonna have two more events that we're
08:26 - gonna get started with so event number
08:29 - one is going to be image created that we
08:32 - obviously going to fire off when we
08:35 - create an image so you're going to have
08:36 - an ID for that you want to have the URL
08:39 - in there you want to have the caption
08:42 - and caption like that and you want to
08:47 - have the address
08:48 - payable
08:50 - and it's going to be the author so
08:53 - that's basically all it is all it is to
08:55 - it actually you should rate the lines
08:57 - unlike me
08:59 - I'm not entirely sure why is that it
09:01 - thinking that there is some sort of
09:03 - trolling comma there but
09:05 - clearly not a trailing comma
09:08 - that's a trading comma now that's all
09:12 - right whatever we're going to leave it
09:14 - it's gonna figure itself out I don't
09:15 - care let me figure it out and then we're
09:17 - gonna have an image tipped variable
09:20 - which will have another uint ID which
09:25 - image was specifically tipped you want
09:28 - to put the URL there so whoever is
09:30 - looking at at ether skin is going to see
09:33 - that okay this is the actual image I'm
09:36 - gonna have the caption you want to have
09:38 - the current tip that was actually
09:41 - awarded to you're going to have the
09:43 - current tip stored which like you can
09:47 - literally see the current person how
09:48 - much the current person have actually
09:50 - donated to that author and then I'm
09:53 - gonna have the total tip yep and then we
09:56 - can just put the address payable once
09:59 - again
10:00 - like that
10:02 - so break those lines again
10:04 - all right let it figure itself out I
10:07 - don't really know
10:08 - what is happening oh it says okay
10:10 - expected that guy semicolon and yeah
10:13 - that's actually something that I keep
10:15 - messing and I keep forgetting to put
10:16 - semicolons but in solidity you cannot
10:19 - get away with it you have to be
10:21 - organized to get out the oldest and by
10:23 - the way usually this is the point where
10:25 - I go ahead and get started with the
10:27 - remix ID but we're just gonna we're just
10:29 - gonna go through this whole thing fast
10:30 - today this is a little more advanced
10:33 - compared to all the other builds so
10:35 - we're just gonna have them you can just
10:36 - check out our Channel and there's a
10:38 - couple other videos right before this
10:40 - one that was again taught by me and that
10:43 - will give you a full breakdown of every
10:45 - single line that is that we covered just
10:47 - here but basically what you will do if
10:50 - you what you would be able to do if we
10:53 - were to test everything out is just get
10:56 - back completely empty values We're not
10:58 - gonna do that we're going to go ahead
10:59 - actually cut this whole thing out like
11:02 - after the semicolon thing let's just cut
11:04 - this out there's no reason to all right
11:06 - so before we test this trick out what
11:10 - you want to do is we should just create
11:11 - an upload image function which will be
11:14 - public and we'll have to pass in two
11:18 - things for that string memory and by the
11:21 - way this is just some random solicit
11:23 - thing like you like sometimes you need
11:25 - memory first strings but sometimes you
11:27 - don't and there's no explanation for
11:30 - that or at least I haven't found any but
11:32 - yeah so usually when we're declaring
11:35 - stuff you don't need to use memory but
11:37 - everywhere else you do but you only need
11:40 - to use it with strings so let's jump
11:41 - that's some interesting thing and so
11:43 - we're gonna pass in two strings from the
11:45 - memory or something one of them is going
11:47 - to be underscore image URL and the other
11:49 - one is going to be underscore caption
11:52 - and so this is going to be a public
11:54 - function meaning every anyone or any
11:58 - user can actually go ahead and invoke
12:01 - this function or use this function and
12:03 - so we're gonna and so what we're gonna
12:06 - do is we're gonna need to make sure that
12:09 - the person who is trying to do our
12:12 - Instagram app is actually in fact a real
12:16 - user and not just some random got that
12:19 -  why is my dude ever since Microsoft
12:23 - is doing anything they just up
12:26 - like why can't I turn my co-pilot off
12:29 - all right disable oh reload obviously
12:34 - all right all right so before we
12:36 - actually start type up the functionality
12:39 - of this before we actually finish up the
12:42 - function we're going to make sure that
12:44 - the person who's trying to the person
12:46 - who is trying to upload an image is in
12:48 - fact a real person because you could
12:50 - come in with a dummy or like a fake
12:54 - wallet and that's not what we want to do
12:56 - so we want to prevent that any kind of
13:00 - like random address would be able to be
13:02 - able to want to prevent any kind of
13:04 - random address to interact with our
13:05 - contract and if that would have would
13:08 - happen we can just say invalid will
13:11 - address so we actually need the user to
13:15 - have a valid ethereum wallet so that's
13:18 - just that's the only thing that this
13:20 - thing is doing here now you want to go
13:23 - ahead and increment image count straight
13:25 - away because if you start with zero that
13:27 - will have a bunch of baked in uh zeros
13:30 - and whatever like starter or like
13:32 - initialized values that we're not want
13:35 - to use and we don't want to have that on
13:37 - our front end so we're going to start
13:39 - with the index of number one which I
13:42 - know is a little weird because if you're
13:44 - a programmer you start counting from
13:45 - zero and so once we incremented it we
13:48 - want to save that into the mapping that
13:50 - we just created so I'm going to pass we
13:52 - want to say images image count which in
13:55 - turn we have right here so images image
13:58 - account we're going to pass in the ID
14:01 - itself and you want to create an image
14:04 - struct in there
14:06 - and so we're gonna we're gonna we're
14:08 - gonna start mapping all these values
14:10 - so I'm just gonna go ahead copy it down
14:12 - here just so we can see it and put them
14:15 - there
14:16 - so we can map them one by one so you're
14:18 - gonna make sure that all these Val
14:20 - so you're gonna make sure that all these
14:22 - values actually map to the values that
14:25 - you are storing inside of the mapping so
14:28 - initially you want to store or to start
14:32 - up with so the first value is going to
14:33 - be the ID so what's the id it's image
14:36 - count the second value is going to be
14:39 - our URL so that's something that we pass
14:41 - in so we're just going to use that and
14:43 - we're going to have to have the caption
14:45 - and then we're gonna total tip starting
14:48 - out obviously is going to be zero and
14:50 - the address payable author so the
14:53 - basically the person who is going to be
14:56 - the owner or the author of this post is
14:58 - the message sender the person who is
15:00 - uploading this so we're just going to
15:02 - say payable and because we want to make
15:06 - sure that later on we can transfer funds
15:08 - to this account
15:09 - and so we just passing a massive sender
15:11 - massive sender and then you want to
15:14 - create a new address array that is empty
15:18 - and that's how you do that in solidity
15:19 - for about the comma and as you can see
15:23 - you gotta positionally you're going to
15:26 - correct the you're going to correct the
15:27 - position all of your variables that you
15:30 - keep passing in make sure they are good
15:33 - with the struct you defined earlier on
15:35 - now first up the semicolon once again
15:38 - not surprising and then there's one more
15:42 - function that we're going to go ahead
15:44 - and create right now and that's going to
15:47 - be tip image owner and so we're going to
15:50 - pass in a un256 which is just going to
15:54 - be the image ID and it's going to be
15:56 - once again a public however this one is
15:58 - going to be payable meaning that this
16:01 - actually will process payments this will
16:04 - charge users and then transfer money so
16:06 - that's all that's all that literally
16:07 - does so before before you do any kind of
16:10 - like guard guard Clauses or anything
16:12 - we'll have to create a local instance of
16:15 - the of the image we are trying the user
16:18 - is trying to tip so we're going to
16:19 - attach that from the images mapping and
16:22 - then we're going to pass an D and that
16:24 - way we're this will contain the local
16:28 - instance of the of that image that is
16:31 - being tipped at the moment now guard
16:34 - Clauses there's a couple of them so we
16:37 - went so you want to make sure that the
16:40 - tip amount oh so you want to make sure
16:43 - that the ID that is being passed in is
16:45 - greater than zero okay you cannot tip on
16:48 - the zeroth or like first image because
16:51 - that is cut that is that only has dummy
16:53 - data in it that has a null address so
16:56 - that's going to cause errors so you want
16:58 - to make sure it's not the ID is not zero
17:00 - it's greater than zero now you also want
17:02 - to make sure that the ID why did I do a
17:06 - line break but the ID has to be smaller
17:10 - or equal to in the image count actually
17:13 - I shouldn't allow
17:15 - we'll sign there and so this is how our
17:17 - first guard Clause will look like the
17:19 - second one is going to make sure that
17:22 - whoever is tipping is actually tipping
17:24 - more than zero so it's going to be
17:27 - message that value has to be greater
17:30 - than zero so maybe I should write that
17:33 - and then and then you can just put in
17:35 - whatever error message here so if a pip
17:39 - must three greater than zero and then
17:45 - let's add another message here too
17:47 - invalid image ID like that put the
17:51 - semicolon app is otherwise the errors
17:53 - I'm going to go anywhere and then you
17:55 - also want to make sure that the person
17:57 - who is tipping I almost said the person
17:59 - who's tripping huh so the person who's
18:02 - tripping is not the same as the author
18:07 - and so that's why we created the local
18:08 - instance here before we even started
18:11 - with the guard party so method sender
18:13 - cannot equal to underscore image author
18:18 - all right that's that I think is pretty
18:21 - self-exposed not to worry like it would
18:23 - just burn gas for no apparent reason but
18:25 - maybe someone wants to do that so I
18:27 - don't know not in this app though so you
18:29 - want to put in an error message which is
18:31 - going to be owner cannot tip their own
18:36 - image
18:37 - put that semicolon out call it a day
18:40 - there's your guard Clauses that's
18:42 - basically going to make sure that
18:44 - whatever kind of transaction is going to
18:45 - come through is going to be valid now
18:48 - before you do anything before you do any
18:50 - of the administrative stuff you want to
18:53 - make sure that the owner actually does
18:56 - get the let's get the funds intended to
18:59 - be sent so straight away transfer the
19:02 - message.value and right after that we're
19:05 - going to go ahead and get start
19:06 - documenting this entire situation that
19:09 - was happening so we're gonna need to
19:10 - increase the total tip
19:12 - so it's gonna we're gonna say plus
19:14 - equals mass value and that basically
19:18 - means it's probably means the same as it
19:21 - does in JavaScript it takes the current
19:22 - value adds the new value to it and then
19:25 - saves it back to the original now you
19:27 - also want to make sure that we save
19:29 - everything to the mapping itself to so
19:33 - we'll have to we'll have to save this
19:35 - newly freshly updated total tip uh total
19:38 - tip amount back to our mapping so image
19:43 - ID is going to be the local oops it's
19:47 - going to equal to the local image
19:49 - instance that we just modified now you
19:53 - might be wondering like why we even
19:54 - created these events here let's go ahead
19:57 - and actually emit them right now and
19:58 - we're going to be using that I forgot
20:01 - them to be honest up here so we're gonna
20:03 - do them both but that you can completely
20:05 - skip on them you can like literally
20:07 - remove these it's just like a nice touch
20:09 - to to use these events and basically
20:12 - what it will do do is later on unlike
20:14 - ether skin whatever you'll be able to
20:16 - see a more humanly readable version of
20:20 - what actually happened and you don't
20:22 - have to figure out by transaction ID and
20:24 - whatever kind of stuff because that
20:26 - would literally make it impossible this
20:28 - way there are like some sort of data
20:30 - like you think of it actually you know
20:32 - what think of it as a console logging
20:34 - but like for the blockchain and that
20:37 - should pretty much explain itself like
20:39 - why it's important it but once again if
20:41 - you don't want to you don't have to it's
20:44 - just something that that I think is
20:46 - pretty that I think is pretty important
20:48 - all right so you're going to save the ID
20:51 - will and once again you want to map the
20:53 - update values that you're passing into
20:55 - whatever you define up there so you need
20:58 - ID you need the URL so I'm just gonna
21:00 - try to position the screen like that so
21:03 - we're going to say image dot URL and you
21:06 - want to go and say image dot caption I'm
21:11 - going to say image total tipped
21:15 - message.value which is going to equal to
21:17 - the current tip so actually that oops
21:20 - actually that should be like in before
21:23 - total dip what just happened there
21:26 - so put messages of value there and then
21:29 - say image dot total tip and then you
21:33 - want to say image author
21:36 - let's just double check we got ID we got
21:39 - URL caption current tip total tip and
21:43 - then the author nice
21:45 - all right cool there you got in addition
21:47 - whatever line breaking everything pretty
21:49 - or clicked in perfect all right next up
21:52 - let's go let's actually emit the other
21:54 - event as well which I forgot oops
21:58 - so that's going to be image created and
22:02 - yeah that basically just went through
22:04 - right through it so we got ID we got URL
22:06 - we got caption and author
22:08 - now that's that's interesting so we're
22:10 - gonna need to update those and I'm just
22:13 - gonna pass in everything that we passed
22:16 - in there that was like an interesting
22:18 - okay and finally let's go ahead and emit
22:22 - image created Which hat which has all
22:24 - these four items and my autocomplete is
22:27 - doing weird stuff so I'm just gonna go
22:30 - oh this is prompting me to jump through
22:33 - them thank you so we got image URL
22:36 - you're gonna pass in the caption which
22:38 - is going to be under score caption and
22:41 - then you want to pass in the pay your
22:43 - ball message sender
22:47 - that should technically take care of it
22:49 - there's a comma missing there semicolon
22:51 - good and that is basically it that's
22:54 - your contract we're gonna go ahead and
22:56 - test it out test everything out go ahead
22:59 - deploy it and then just finish out the
23:01 - app real fast
23:04 - all right now let's go ahead and test
23:06 - out this contract that we just built and
23:09 - let's go ahead and deploy it as you
23:11 - probably have seen probably a couple
23:12 - other videos we are using remix IDE
23:15 - which is pretty cool because they have
23:18 - this extension for vs code so you want
23:21 - to go ahead download it if you haven't
23:22 - done that already and if you did
23:25 - that's your icon go ahead open it up you
23:28 - want to set the compiler version
23:30 - to 0817 and then activate the tab now
23:36 - let's see what it does
23:37 - and once again if you haven't seen any
23:40 - other tutorials this might be new
23:42 - but we are going to be using ganache for
23:45 - we're going to be using ganache as our
23:47 - local blockchain so basically to get it
23:50 - you can just go to trufflesweet.com
23:53 - download it right here and then you can
23:55 - go ahead install and then basically this
23:59 - is what we will get and if if you're new
24:01 - to this just hit quick start when it
24:03 - prompts you and then you're going to be
24:04 - seeing a screen like this
24:07 - just going to go ahead click connect and
24:10 - then moving on let's just straight away
24:12 - compile this contract let's see if there
24:14 - are any errors in there
24:16 - seems like everything is good to go as
24:18 - you can see right here and let's deploy
24:20 - it let's see what could happen oh let me
24:23 - deploy it again cut it and let's deploy
24:25 - it let's see what could have what could
24:27 - go wrong so we got a few things over
24:31 - here we got image count which currently
24:33 - when you hit call it says zero let's see
24:36 - images see what do we got there yeah
24:39 - this is the base data that I was talking
24:42 - about and this is what we're not going
24:43 - to render on the front end but
24:46 - let's go ahead and now add a new image
24:49 - I'm just going to use double data as
24:52 - usual because these are like literal
24:54 - actual strings so wait where is this so
24:58 - here I'm not gonna put in like a real
25:00 - help but you can do it if you want to so
25:03 - I'm just gonna say URL in here and then
25:06 - caption here are actually my image URL
25:11 - and my image caption and let's go ahead
25:15 - and hit transact let's see what happens
25:17 - all right all kinds of guest lighting
25:19 - that's perfect and let's see what do we
25:22 - got we're gonna go ahead and grab the
25:26 - number one image and as you can see it
25:29 - we are returning everything perfectly
25:31 - there is the URL caption total tip
25:34 - Perfect all right let's go ahead and tip
25:37 - and we're gonna add the value of I don't
25:40 - know let's just put in like some bold
25:42 - numbers like two e 20 e oh and you want
25:45 - to make sure it's set to Ether otherwise
25:47 - it's going to go in the way you also
25:49 - have to change the the wallet you're
25:52 - using
25:53 - so what we're expecting is from this
25:55 - wallet to this wallet 20 eth goes or
26:00 - gets transferred basically so I expect
26:02 - this to go down by 20 eighth and I
26:04 - expect this to go up by 28th so I expect
26:07 - this to be at 86 eth and this to be 68
26:11 - basically a value change actually that's
26:13 - a little weird so I'm just gonna go with
26:15 - 15. all right so a new one I expect the
26:20 - upper one to go down to 53 and the lower
26:24 - wait no go up
26:27 - go up to 83 and the up the lower one I
26:31 - expect it to go down to 73. all right
26:34 - let's see if that goes through or not
26:38 - and let's hit transact
26:40 - and there you go
26:42 - it just went through so yeah that that
26:45 - apparently worked in terms of
26:46 - transaction and if we call on it again
26:51 - then you can see the total tip there's
26:53 - this big old number that starts with a
26:55 - 15. the reason for that is in ethereum
26:58 - land and solidity as I've said it a
27:01 - couple of times you always have to
27:03 - operate within way or like in ways
27:06 - instead of paying dollars you would have
27:07 - to pay pennies let's invert that
27:11 - way too ether converter oh there it is
27:16 - and I'll just paste it in and there you
27:18 - go now you can see it's 15 ether that
27:21 - seems pretty promising there's nothing
27:24 - really much to talk about here so I'm
27:25 - just going to go ahead close it that was
27:27 - the testing and now let's go ahead and
27:29 - deploy
27:30 - all right now with all that done there's
27:33 - only the only thing really left is to
27:36 - deploy so once again we're going to be
27:39 - using truffle for that it's time and
27:43 - here it is this is your extension you
27:45 - want to go ahead and download and then
27:46 - there's your icon that it's going to
27:48 - produce once it's downloaded yeah let it
27:52 - just set itself up and this is not gonna
27:54 - be here for you if it's your first time
27:56 - but you can just go ahead hit connect
27:58 - that work and then hit ganache paste in
28:01 - basically this RPC server link so
28:04 - there's that and then for infuria I have
28:07 - a wrong I have the wrong project
28:08 - connected so I'm going to go ahead and
28:10 - select info right there and because I
28:13 - wear the authenticated myself with
28:15 - infuria it already fetched all the
28:18 - projects that I have so I'm just going
28:20 - to go ahead select Instagram however if
28:22 - that's your first time there's probably
28:24 - oh there
28:27 - there's probably a little pop-up window
28:29 - right here hit sign up right there
28:31 - that'll open up infuria and then you're
28:34 - good to go now
28:36 - truffle
28:37 - oh so now what we're going to do next up
28:40 - is we're going to go ahead and right
28:42 - click on Instagram solidity and let's
28:46 - see what the terminal says back to us
28:49 - I'm just going to make it big
28:51 - that's what she said so it says
28:53 - everything is up to date I don't really
28:55 - like that because that usually means
28:56 - that in the build folder there is no
28:58 - there's no API which we definitely do
29:01 - need while it's still here in artifacts
29:04 - it's formatted a little differently so
29:06 - I'm just going to go ahead and see the
29:08 - track
29:09 - and then trust for build so that's
29:13 - basically gonna get it done anyways
29:15 - whoops okay so it says pragma solidity
29:18 - is no bueno that's probably because my
29:22 - compiler version is not correct so
29:25 - that's something you want to make sure
29:27 - that is correct
29:28 - let's go ahead hit 17. actually let me
29:32 - just search for it in in here so you
29:35 - want to search for compiler
29:37 - and then using remote version yeah
29:40 - yeah so that basically should take care
29:43 - of it now one more place where it could
29:45 - go wrong is the Truffle config file
29:49 - where oh yeah there you go where the
29:51 - version is 0.8.16
29:55 - so let's fix that and probably the
29:57 - reason for that is
29:59 - um it is best to go live with
30:02 - one version just below the latest one
30:04 - it's because everything is so new and so
30:06 - early we're gonna go with the latest
30:09 - like living carelessly so let's go ahead
30:12 - and say truffle
30:14 - was it compile I think so there you go
30:18 - okay
30:19 - what is truffle build okay so as you can
30:22 - see there are two ways to compile as of
30:24 - right now however when you use truffle
30:27 - build this is just a PA so feel free to
30:30 - skip it oh this is just a PSA so feel
30:33 - free to skip it but uh in the sixth like
30:37 - basically version six of truffle truffle
30:39 - build will be deprecated the more you
30:42 - know
30:42 - all right so we got the API now we're
30:46 - gonna go ahead and copy it into utils
30:49 - right there so it's nice
30:52 - so there's your new instagram.json file
30:55 - and right before we actually move
30:57 - anywhere further
30:59 - I just want to go ahead and set up our
31:01 - front end to be able to interact with
31:03 - this
31:04 - oh skip that cut that and so with that
31:07 - done it is time to go ahead and like
31:09 - finally actually deploy it so if you
31:12 - don't have anything connected if it's
31:15 - your first time and you haven't worked
31:17 - with inferior before
31:18 - oh not and I caught that too so I'm just
31:21 - going to go ahead click click right
31:23 - click on it or right click on it and
31:24 - then just go ahead and deploy it to my
31:26 - ganache so that's this guy over here
31:29 - let's see what happens there looking
31:32 - good
31:33 - finish running and whenever it says the
31:35 - config file has incorrect format like
31:37 - just skip it it's being too sensitive I
31:39 - don't know why that's happening but
31:41 - there's no problem there finish running
31:43 - deploy succeeded this is your contract
31:47 - address you want to go ahead and copy
31:49 - so I'll save that and not even in your
31:52 - truffle config you want to go into a
31:54 - constants file and paste it right into
31:56 - address the reason we are using this
31:58 - instead of the one we're going to be
32:00 - deploying to the test net is local is
32:03 - always faster especially in blockchain
32:05 - like 10 times more true but we're not
32:09 - gonna stop right there we are definitely
32:11 - deploying it to a test net as well so
32:15 - right click on Instagram again
32:19 - and just type in Girly
32:21 - and truffle configuration file not found
32:24 - that's not true for sometimes if your
32:26 - truffle app is in a separate folder
32:28 - sometimes this extension
32:30 - sees that as an error or something so in
32:33 - those cases you can just go back into
32:36 - your terminal and then
32:38 - CD into that folder
32:41 - CV into your Shuffle app
32:43 - typing code space period and that'll
32:46 - open up a new vs code inside of that
32:49 - folder so in this case let's just do
32:52 - that no no hard feelings deploy the
32:56 - contract
32:57 - let's see what's going to happen yup
32:59 - there you go there's your value and
33:02 - if it's your first time you're going to
33:04 - want to use the paste mnemonic and then
33:06 - go into your Chrome click metamask where
33:09 - you already have an account that is
33:12 - connected that has girly eat in it so
33:14 - you can find faucets for that on the
33:16 - internet anywhere basically hit settings
33:18 - go into security and privacy and then
33:21 - under your reveal secret recover a
33:24 - phrase you will have those 12 words that
33:27 - you shouldn't share with anyone after
33:29 - you got that
33:30 - oh I didn't mean to do that after you
33:33 - say that that window that I just popped
33:35 - up will will pop up as well once you
33:38 - pasted it there and then you can just
33:40 - save this file somewhere so you will
33:42 - have it just like I do so let's do it
33:44 - once again and once you saved it it's
33:47 - going to be showing up right there and
33:49 - then once you hit that
33:51 - it's going to go through the whole
33:52 - deployment process again now it'll be
33:55 - loading for a little bit and you will
33:57 - need to install from this notification
33:59 - thing so you just want to click that and
34:02 - then install that dependency and then
34:05 - you should be good to go
34:06 - all right after a quick coffee break we
34:09 - just got our contract address so copy
34:12 - that and then you can literally close
34:13 - this window it's just something unique
34:17 - and then you can paste it right up above
34:20 - here and what I like to do
34:22 - is Type in the exact page the exact same
34:25 - and then just paste it right there and
34:27 - after that you can type in Burly so that
34:30 - you know later on that's your Gertie
34:32 - deployment and then after this you're
34:35 - going to say either local or ganache or
34:37 - whatever you want but basically this
34:39 - will allow you to switch between the two
34:41 - really easily or if you were to deploy
34:44 - it your front end to somewhere you can
34:46 - somewhere that has a local and a online
34:50 - for online environment handling you can
34:54 - little you can put these in as
34:55 - environment variables for the separate
34:58 - for now it's good for us we can get 99
35:01 - of everything done just like this
35:04 - and so with that our contract is
35:07 - deployed and it's time to connect our
35:09 - wallets to the application
35:12 - okay let's go ahead and connect that
35:15 - wallet right here now there's a few
35:18 - things that we're going to be importing
35:19 - for that
35:20 - so
35:21 - as follows the new chain configure
35:24 - chains create client and
35:29 - from five which you already have
35:31 - installed so don't worry about that then
35:33 - we're gonna need
35:35 - the styles for rainbow so important
35:42 - yep and styles dot CSS and then a bunch
35:47 - of things from Rainbow so we're gonna
35:49 - get default wallets
35:53 - right there the rainbow kit provider and
35:55 - dark
35:57 - theme and all this is coming from
36:01 - that thing right there now two more
36:04 - stuff is inferior provider not that not
36:08 - from there wag me slash providers slash
36:13 - and then I'm just gonna duplicate this
36:16 - line and change this to Json RPC
36:20 - and this is going to be Json IPC
36:22 - provider like that now a few things that
36:26 - we're going to need to configure we're
36:28 - gonna need
36:29 - we're gonna need chains and we're gonna
36:32 - need provider
36:33 - and all this is going to come from after
36:36 - we desstructured them from configure
36:38 - chains and these are going to be two
36:41 - arrays all right so first one chain
36:44 - these are going to be the chains and
36:46 - these are going to be chain dot girly
36:48 - and chain Dot Low thermostat just like
36:52 - that and then we're going to need the
36:54 - provider now there's going to be two
36:56 - providers that we already set up so
36:59 - first of all we're going to need to set
37:01 - the priority to one meaning inferior
37:04 - will be used as our main provider and
37:07 - we're going to provide an API key for it
37:09 - which we I believe I said we're going to
37:12 - set it up but then we never ended never
37:14 - set it up actually so it's going to be
37:17 - coming from process environment dot if
37:20 - you're uh underscore API
37:23 - and so the way you do it is by going
37:27 - here and then I think I said you should
37:30 - copy this thing and we're gonna need it
37:32 - so yeah now this is the time where we're
37:33 - gonna need it
37:34 - so in your next step just create a new
37:36 - file and name
37:39 - it.elu.local and then in there if you're
37:42 - on the score API
37:45 - and that's where the value of it is
37:46 - going to go and you will have to restart
37:48 - your server
37:51 - let's do that real quick and now that
37:53 - way it's all loaded in and all ready to
37:57 - go now option two
37:59 - because local isn't really provided by
38:02 - inferior it's uh it's something but not
38:04 - we're gonna have to custom ADD the new
38:08 - RPC server so before we do that priority
38:11 - two and then we're gonna have our PC
38:15 - and we're going to Define chain that
38:19 - uses the RPC and there we go now
38:23 - for this we probably already went
38:25 - through it once but here it is you
38:28 - wouldn't need that link so copy that guy
38:33 - it there and that should be good to go
38:36 - so why are we putting it twice
38:39 - wait oh it needs to be lowercase so like
38:42 - that all right so that should
38:45 - technically take care of a lot of things
38:47 - here
38:48 - all right and we're gonna see it in
38:51 - action in just a second just first
38:53 - create the connectors these this is like
38:57 - a bunch of boilerplate code that just
39:00 - makes it super easy to work for the
39:02 - rainbow and later on you're gonna
39:03 - understand
39:05 - happening and it's going to say and
39:09 - we're just gonna pass in all the change
39:10 - so this here we created the chains
39:13 - themselves and then here we're gonna
39:16 - pass it in and these are this is what
39:18 - makes these the chain selector this is
39:21 - going to config this is going to create
39:23 - the chain selector so that's what that's
39:26 - what's happening there
39:28 - and then one more thing just gonna be
39:31 - whacking fig and you guessed it
39:35 - it's not coming from let me config it's
39:38 - gonna be create client and I'm gonna
39:40 - enable auto connect so that any user
39:44 - come coming in don't have to keep
39:46 - connecting their wallets all the time
39:47 - and then you want to pass in your
39:49 - connectors and you're going to pass in
39:52 - the provider you created now a few
39:55 - things that we're gonna need to do now
39:57 - we're going to have to wrap the entire
39:59 - app with this so that the entire
40:02 - metamask energy is just flowing through
40:05 - our app so black May config and then
40:10 - you're going to say client and that's
40:12 - going to be the Dragnet config we just
40:15 - created like that without typos paste it
40:18 - and then wrap it around the app and then
40:20 - next up you're going to have a rainbow
40:22 - kit provider
40:25 - which we will need the chains
40:28 - so how's that mean and then a theme
40:32 - which will be dark theme make that a
40:36 - function and then you can enable cool
40:38 - mode it's just a nice little animation
40:41 - that I really love how I usually like so
40:44 - that's basically it in terms of let's
40:46 - see what do we got change dot map is not
40:49 - a function
40:50 - oh because you have to pass in all of
40:52 - them so like I was passing in this guy
40:55 - but in reality you gotta pass in this
40:57 - guy with a plural that should have
40:59 - solved it let's just double check
41:00 - refresh okay we're good to go there and
41:04 - now if you go into your header and like
41:07 - somewhere here are you import connect
41:10 - button and then place that button
41:13 - connection button or and then place that
41:16 - place that button connection right after
41:18 - this AI outline thingy like that that
41:22 - should give you that exact account that
41:24 - exact button and because already
41:27 - connected and the auto connect is
41:29 - enabled that's what's showing up but
41:31 - there you go that's what you will see
41:33 - probably if you haven't connected it to
41:36 - this application yet there you go there
41:39 - is and then I'm gonna hit connect
41:43 - once again and that's it that's
41:46 - basically it and then here are all the
41:49 - chains and these are the wrong chains so
41:51 - that's weird
41:52 - that honestly is probably because this
41:55 - inferior API key doesn't resolve itself
41:58 - so let's try again one more time and if
42:02 - I refresh
42:04 - okay that's still not working
42:06 - oh once again I passed in the wrong
42:09 - chain here yeah it's pretty easy to mess
42:11 - up so just want to make sure like you
42:14 - use chain in a singular when you import
42:16 - it and then when you generate create the
42:19 - array of chains but then from that that
42:22 - point on you will want to use it as a
42:26 - plural so from that you will need those
42:29 - and so you will have to pass in with
42:32 - overall and there you go now it's fixed
42:34 - and it's dark mode and you saw the cool
42:36 - mode how like the little sprinkle
42:38 - animation so that's it for connecting
42:41 - the wallet and now it's time for the
42:45 - functionality
42:48 - all right now with that all done it is
42:51 - time we go ahead and set up our context
42:53 - that will literally take care of all
42:55 - kinds of blockchain connection I'm gonna
42:58 - close all these random folders and I'm
43:01 - just gonna go ahead and create a context
43:03 - folder in which I'm gonna have a contest
43:07 - njs file now
43:10 - this is where all the magic is gonna
43:11 - happen and so let's go ahead and import
43:13 - create context
43:16 - use context
43:18 - try to make no typos in there use State
43:22 - and use effect
43:24 - weird Auto conversion all right all this
43:27 - is coming from react
43:29 - and then we're gonna need to import
43:31 - create contract
43:34 - which
43:35 - is not exactly tied to the context
43:38 - itself but we're going to be using this
43:39 - later and I'll just forget to import it
43:42 - so we're just going to do it now
43:44 - it's just easier for everybody trust me
43:46 - and then we're on the same note we're
43:48 - gonna import use account from Acme and
43:53 - then we're going to import Trump Kate
43:55 - Heath address
43:57 - from
43:58 - truncate that Dash address now you also
44:02 - want to import post because it's a
44:04 - toasty app
44:05 - yeah from the ACT
44:08 - hostify just like that and then you also
44:12 - want to import grab three from that
44:14 - three
44:15 - all right all this is nice and cool but
44:18 - let's actually create the context once
44:21 - finally so we're going to create app
44:23 - context
44:25 - using the create context thing that we
44:27 - just imported and then we're going to
44:30 - create an app provider
44:33 - which will take in children and now
44:36 - there's going to be no children sex
44:38 - trafficking or any of that stuff
44:40 - chill
44:41 - now we're gonna have a return clause in
44:44 - the return clause in there just like
44:47 - that open close friends app and app
44:51 - context dot provider value put two
44:56 - objects there because one of them is
44:58 - going to indicate that this is
44:59 - Javascript and the other one is going to
45:00 - indicate that this is actually factually
45:03 - in fact a object and then in between
45:07 - there goes the children
45:09 - with an N at the end all right and then
45:12 - we're going to make a hook out of it
45:15 - because that's useful so we're gonna say
45:17 - use up context contact like
45:22 - open close create that for okay that
45:24 - function and we're going to return use
45:27 - context and pass in out of context what
45:32 - so you might be asking what is all this
45:34 - stuff that's going on here just chill
45:36 - basically what's happening is we this is
45:39 - a bunch of boilerplate code that you
45:41 - will need to run your context and to
45:43 - have like Global globally available
45:45 - functions and variables and all that
45:48 - kind of stuff and yeah that comes with
45:50 - all this stuff so once again you're
45:52 - going to need a you're gonna need this
45:54 - bad boy hook to make it easier later on
45:58 - to interact with it now
46:00 - what I also like to do is just create a
46:03 - test test variable that literally only
46:05 - does it says test and then export it
46:09 - right away here now the reason we're
46:12 - going to do that is we're going to test
46:14 - this mess this guy out so
46:16 - let's import that app provider right
46:20 - there and then we're going to wrap it
46:22 - around the app itself so look right
46:26 - there it's perfect and then go into your
46:28 - index file and here you can go ahead
46:31 - import use up context so the hook that
46:35 - we created
46:36 - and then you want to go ahead and
46:38 - destruction test from use up context
46:42 - just to double check that the context
46:45 - setup and all that is working perfectly
46:48 - so go into your inspector and then onto
46:52 - your console and you should see test
46:54 - pretty soon oh wait it would be helpful
46:57 - if I actually console log it out without
47:00 - that you're not going to see it all
47:01 - right there you go now you can see it's
47:03 - working perfectly and that is basically
47:06 - all the contacts that you will need to
47:08 - set up for this build and I'm just going
47:10 - to go ahead and move all the all the
47:13 - testing stuff and with that said
47:16 - let's upload some images
47:19 - right so for the rest of the app we are
47:21 - mainly going to stay in the context file
47:24 - so let's actually just jump straight
47:27 - into it get started with a couple of
47:30 - view States and then we're just going to
47:32 - go out eventually to other files to
47:37 - import everything that we create here so
47:39 - we're going to have a use state that is
47:42 - going to start out as an empty
47:45 - empty array oops
47:48 - and then another one that is going to be
47:51 - our user address and that's going to be
47:55 - helpful to just so we're going to have
47:58 - one central place where we're going to
48:01 - take store our user wallet address of
48:05 - the person that actually signed up or
48:07 - signed in to our app and you want to fix
48:12 - all the typos because that's not helpful
48:14 - if you have them
48:15 - so before we go any further further
48:17 - let's actually literally store the user
48:19 - address so for that we're going to use a
48:22 - use effect hook so it gets updated every
48:24 - single time the user is changing in fact
48:28 - their wallet that is being connected so
48:31 - you wanna you wanna destructure address
48:33 - from use account
48:35 - like that and then set up a use effect
48:38 - hook that is clinged onto that specific
48:41 - variable and then whenever that changes
48:44 - and whenever that changes you want to
48:46 - set the user address to truncate ether
48:50 - and pass an address so what that's going
48:53 - to look like this truncating thingy is
48:56 - just you know make it shorter because if
48:57 - you remember and you go into a constants
48:59 - file this is how one ether address looks
49:02 - like now
49:03 - it's fine but in our app it's gonna look
49:06 - something like oops something like this
49:10 - so it's like more humanly readable and
49:12 - you're like let's be real you're never
49:15 - ever going to read this whole thing I
49:16 - haven't had it so let's just let's just
49:19 - actually get rid of that useless stuff
49:22 - so now that we stored the wallet address
49:25 - let's go ahead and import it and then
49:27 - comma let's export post as well then you
49:30 - export user address I just said import
49:31 - because I don't know and right in here
49:34 - right back in your indexes file you want
49:38 - to destructure posts instead of and
49:43 - straight away let's go into our index.js
49:45 - file where I already set up this empty
49:47 - array but that's only for the like
49:50 - template that you're working on so let's
49:52 - actually change that out so we're gonna
49:55 - change that out for is
49:57 - just destructuring posts from
50:01 - the use of context like that and so that
50:05 - way it is hooked up to hooked up to it
50:07 - and now you're like now this application
50:10 - is going to be working perfectly
50:13 - however apparently we got this error so
50:15 - let's take a look at what's going on
50:17 - that is oh
50:19 - because I should have made it plural so
50:21 - posts and
50:24 - like that
50:25 - see there you go that fixed it so that
50:28 - seems good and then whenever we and then
50:30 - as soon as we start uploading posts it's
50:32 - going to start fetching them or like
50:34 - whenever we Implement that function but
50:38 - it's going to be taken care of pretty
50:39 - fast so the app is by Design dynamic and
50:43 - so before we actually start uploading
50:45 - images there's going to be one more
50:48 - thing that I want to set up and that is
50:50 - all the functions so we're going to have
50:52 - a get all images and this is going to be
50:56 - useful just so we map out we're going to
50:58 - be working with and so we're going to
51:01 - have an upload
51:03 - image equals async open called function
51:07 - counts like that
51:09 - and then we're going to have one more
51:11 - which is going to be tipping the owner
51:13 - so tip owner is in sync open close and
51:18 - then there's your function all right so
51:21 - each of these are going to be separate
51:22 - section in this video and we're gonna go
51:24 - ahead and finally focus on this guy now
51:27 - to make the application completely
51:29 - dynamic
51:30 - right after everything is done in the
51:33 - uploading right after the app itself is
51:35 - done uploading what you want to do is
51:38 - call immediately the get all images
51:40 - function so that's what we're going to
51:43 - get started we're going bottom to top
51:45 - now the one thing you want to make sure
51:47 - is having guard Clauses and dry catch
51:51 - try catch Clauses in your application
51:54 - whenever you're working with blockchain
51:56 - I can't emphasize it enough that is
51:58 - super crucial and it will make or break
52:00 - your entire application if the
52:02 - transaction fails the if the Ethan wolf
52:06 - is going to be completely lost and if
52:08 - you like do all these like guarding
52:10 - steps that might save it from from my
52:13 - save your customers from losing their
52:15 - money so we got money on the line we're
52:18 - going safe so we're gonna say if there
52:20 - is no address is connected obviously at
52:23 - that point like there is nothing there's
52:26 - no money to you no money to lose but
52:28 - then again random error messages so you
52:32 - wanna you wanna you wanna keep that
52:34 - stuff safe so now what you want to do is
52:37 - say cons and contract and we're going to
52:40 - create a contract instance right here
52:43 - for this specific function
52:46 - and let's take a look at what that does
52:48 - so that's actually happening in the
52:50 - constant file so let's create contract
52:52 - thing
52:53 - is destructing the ethereum object from
52:56 - the from your window which is basically
52:58 - the code snippet that metamask injects
53:00 - into your application and if that is
53:02 - present and if that is valid then you
53:05 - it's going to create a web 3 item or
53:08 - like a web 3 instance using that that
53:10 - code and web3 is just a SM npm package
53:15 - is called web3js and that just enables
53:18 - you to interact with the blockchain
53:20 - however it needs a couple things
53:22 - one obviously a wallet connection and
53:24 - then it's going to create a whole
53:26 - contract interface for you based on the
53:28 - ABI that you pass in so that's the
53:32 - Instagram Json file that we put in here
53:34 - earlier and that is the address that we
53:36 - put right here that's pretty much it
53:39 - actually doesn't need these addresses
53:42 - don't even have to be exported but it's
53:45 - just nice I think
53:46 - yeah it seems to be working without
53:48 - exporting perfect so there's no need to
53:51 - use now back in your context
53:53 - so that's you're going to store that
53:55 - contract interface that that function
53:58 - generates
53:59 - and next up I'm going to create a data
54:02 - object or we're going to get started
54:05 - interacting with the truck itself so
54:09 - we're going to invoke one of its methods
54:12 - and that's going to be let's see what
54:15 - they will create I believe it is upload
54:17 - image yes
54:18 - so if you go back there oh it's just to
54:22 - close the line but you can just paste it
54:24 - there so there's like there's no typo
54:27 - options and then you will need to pass
54:28 - an image URL
54:31 - and you will need to pass that caption
54:32 - now these will be coming from the front
54:35 - end so you're gonna need to pass them
54:36 - right there so we expect those to to be
54:40 - passed into this function so they can be
54:42 - passed over there and so
54:44 - it's going to be helpful there and
54:47 - because it is a function that creates
54:50 - and pushes data onto the blockchain you
54:52 - will actually have to pay gas fees for
54:55 - it and the address that we'll need to
54:57 - pay the gas fees is going to be user
55:01 - address
55:02 - this guy right there
55:04 - I wanted to put like a comma that's fine
55:07 - and then we'll have to start we'll we're
55:09 - gonna need to specify some gas that's
55:11 - going to be
55:12 - this is gonna be three million and but
55:15 - don't worry about it it's in Whey it's
55:16 - like a lot less like it it looks like a
55:18 - big number but it's not that big of a
55:20 - number
55:21 - and and because we want to make this
55:24 - application as safe as possible I like
55:26 - to create a try catch function as I said
55:29 - earlier so I'm just gonna do that and
55:31 - then catch her like that
55:35 - and then pencil put it out on the
55:38 - console just in case you want to
55:41 - put it out on the console so you can
55:44 - debug if there's any errors going on so
55:47 - air that message
55:49 - like that and then just wrap this entire
55:51 - thing around it nice and then to make
55:55 - this application super interactive we
55:57 - set up toast messages and toastmessage
56:01 - is basically just these little nice
56:03 - thingies that you're going to see in a
56:04 - little bit Ah that was well explained
56:07 - anyways that's like a little loading
56:09 - animation that's going to watch the
56:12 - promise go through and all the all the
56:13 - back end stuff and then it's just going
56:15 - to be like super interactive so the
56:16 - users will be able to see exactly what
56:18 - is happening all right so let's set that
56:21 - up that's called toasted I think
56:23 - I think the package is called react
56:25 - cultify which we actually imported
56:28 - so let's just take a look at how it
56:30 - looks like if you go to mpmgs.com it's
56:33 - going to be right there
56:34 - yeah these are the toast messages and
56:37 - you can come here figure it out and then
56:40 - do all kinds of modifications to it make
56:42 - them yours customize it and this is
56:45 - exactly what we're gonna have wrong
56:46 - Arrow type
56:48 - anyways going back here we're going to
56:50 - say toast dot we're going to say
56:52 - toes.promise and then passing data which
56:56 - by the way is going to be a promise
56:58 - because the contract method and whatever
57:00 - is returning a promise and then here
57:03 - there's going to be three options so
57:05 - there's one when the promise is pending
57:09 - and then there's gonna be another one on
57:11 - the promise as resolved and then there's
57:15 - going to be one
57:16 - when there is an error so these are the
57:19 - three cases and then you can just pass
57:21 - in strings and I have these pretty for
57:24 - me so I'm just going to copy paste them
57:26 - but you can customize your messages
57:28 - completely and as much as one you can
57:32 - literally just load in random stuff
57:34 - there for now just for time saving
57:36 - reasons I want to put like a little X
57:39 - there so there we go that should
57:42 - technically be just perfectly enough to
57:44 - get started with the offloading images
57:47 - now one more thing I want to do before
57:49 - we do anything because if you remember
57:51 - we're gonna use the localhost because
57:53 - that's still a little bit faster than
57:55 - any kind of testnet and so we're gonna
57:58 - need to connect this function to that
58:00 - button right there so for that
58:03 - export this guy
58:04 - and then in your Heather you're going to
58:07 - need to import it so next
58:10 - so we've got the context import and then
58:13 - we're gonna have to destruction so
58:17 - upload image
58:19 - pulls ease up context just like that
58:24 - it's actually the wrong one oh this is
58:26 - actually the wrong file oh
58:28 - whenever I import or open header cut
58:30 - before that it doesn't even need to be
58:33 - opened so once you export it upload
58:36 - images or upload image you know open the
58:39 - file uploadmodal.js
58:41 - and import use app context and then from
58:47 - that you want to de-structure this
58:50 - specific function so you can move that
58:52 - once and then just paste upload image
58:55 - equals use app context just like that
58:59 - that should pretty much take care of
59:01 - this whole thing it says the function
59:04 - takes in zero parameter it's going to go
59:06 - away in a little bit this is just like
59:08 - my call Quality checker
59:09 - okay let's see if that helps okay
59:12 - perfect now it's gone it just has to
59:14 - realize it takes a little bit of time
59:15 - that's fine anyways so now it should be
59:18 - hooked up to that button actually what
59:21 - this was already hooked to that so what
59:24 - we're gonna do is
59:26 - I have this nice rug right here
59:28 - that's gonna be my first it's gonna be
59:31 - my first image that I upload
59:33 - so wait for that little uploader thingy
59:35 - to finish
59:37 - hit done because there's no need to crop
59:39 - there and then this is my first
59:43 - post or whatever hit submit okay
59:46 - provided address is invalid
59:49 - all right whoever's editing I'm
59:51 - debugging cut this
59:52 - okay so I figured out the area
59:55 - it's it's dumb it's really dumb so you
59:58 - see here when we set the user address
60:00 - that's actually going to be a truncated
60:02 - address and that's not gonna work here
60:05 - you need the full address here so you
60:07 - want to put that in there instead of the
60:10 - truncated one
60:12 - yeah if you caught it by yourself like
60:14 - good it was a pretty weird error all
60:18 - right so let's try again uploading that
60:20 - same image once again
60:22 - and there we go hit done all right my
60:26 - first post
60:29 - that's better confirm image uploaded
60:33 - successfully
60:34 - okay
60:35 - so I mean I guess it's time to fetch
60:37 - that
60:39 - all right so we've got our image
60:40 - uploaded
60:41 - allegedly
60:43 - let's figure out if we can fetch it and
60:46 - actually show it out on the screen so
60:49 - we got to get all images actually should
60:52 - be firing immediately and there's one
60:54 - more thing or one more place where I
60:56 - want to oh
60:58 - and there's one more thing where I want
61:00 - to fire this function off and that's
61:02 - basically every single time whenever
61:05 - someone opens this app so it's gonna be
61:08 - another use effect and in here we're
61:11 - just going to go ahead and paste this
61:13 - and call it once so that should
61:15 - technically call this function every
61:18 - single time somebody turns this app on
61:20 - we'll just confirm that whatever yeah
61:22 - console logging object perfect
61:25 - so that is working as designed
61:28 - however now what you want to do is make
61:31 - sure that the person that there is
61:33 - somebody logged in actually we don't
61:35 - have to make sure that's completely
61:37 - that's not necessary at all however
61:39 - we're gonna need to create a new
61:41 - instance because the other one is unique
61:43 - to that function and it's getting
61:45 - scrapped right after that function has
61:47 - run
61:48 - and then we're gonna be doing some
61:50 - interesting things
61:51 - so what we want to do is let me just
61:54 - show you in the salty Lydia file so if
61:56 - you remember we are tracking how many
61:58 - images do we got and then we are also
62:01 - tracking it in a mapping so every single
62:03 - ID has an image linked to it so what
62:05 - we're going to do is fetch this number
62:07 - and then we're going to Loop through
62:10 - this mapping and that's how we're going
62:12 - to get each image one by one all right
62:15 - so to do that we're going to say cons
62:17 - image count
62:19 - we're going to say away contract methods
62:24 - and we're going to say image count
62:26 - and we're going to say call because we
62:29 - are just reading from the blockchain
62:30 - that completely will work now let's go
62:33 - ahead and console log out how many
62:36 - images do we got it's image count like
62:40 - that we should see a one right there so
62:43 - that's perfect that's working as we
62:45 - wanted it to work and we're gonna
62:48 - now what we're going to do is whenever
62:50 - we fetch one image by one image we're
62:52 - going to store them and we're going to
62:54 - push them into a temporary
62:57 - I'm going to put them into a temporary
62:58 - array that we're just going to have
63:00 - while we're here and then we're going to
63:04 - and then we're going to save that or a
63:07 - temporary array into our you state
63:11 - so how that's going to go is we already
63:13 - have the image count and so now we
63:15 - already have the temporary array so now
63:18 - it's time to actually get started
63:20 - looping so for index equals one
63:24 - semi column and then I lost them or
63:28 - equal to or actually index is less than
63:31 - or equal to image count like that
63:35 - semicolon and then index
63:38 - it's pretty basic it's super beginner
63:40 - friendly there should be no issues
63:42 - we're just gonna call the mapping
63:45 - function and so it's going to be cons
63:47 - image
63:49 - weight contract
63:51 - methods dot images and then we're going
63:55 - to pass in Index right there
63:57 - and we're just going to call it so once
63:59 - again we're just reading from the
64:00 - blockchain no transaction needed and
64:03 - then what you're going to say is new
64:05 - posts dot push and we're gonna say
64:09 - because if you remember
64:12 - actually let me actually let me just
64:13 - show you but if you remember these this
64:16 - image this whole image object is a
64:19 - little bit weird let's see what is
64:21 - happening here
64:22 - all right forget our live keyword right
64:24 - there
64:25 - so let's try again all right there you
64:27 - go
64:27 - so I'm gonna make this big
64:30 - that's what she said and if I zoom in as
64:33 - you can see every single prop and detail
64:36 - is being returned twice you get this
64:39 - like weird object type of thing with
64:42 - actual named like the name props so what
64:45 - you want to do is go for these because
64:47 - these are like way more easy like way
64:49 - easier to read as a human and so we're
64:52 - just going to save those everything else
64:54 - and go out the window so we're gonna
64:56 - have an ID which is gonna be image.id
64:59 - like that URL
65:01 - image URL
65:03 - caption image dot caption
65:07 - and then you're gonna have total hit
65:09 - which is imaged total tipped and then
65:13 - you're going to have an author which is
65:15 - going to be the image.author so that's
65:18 - pretty easy that's self-explanatory I
65:20 - think there's not too much to understand
65:23 - about there there's gonna be a weird
65:25 - move that I'm going to be doing here and
65:27 - by the way we're going to wrap all this
65:29 - into a try catch in a little bit
65:31 - but after like outside of this for Loop
65:34 - what you want to do is I'm going to say
65:36 - set post and now this is when we are
65:39 - going to update the state itself so what
65:41 - you want to do is say new host dot
65:44 - reverse
65:46 - or actually let's not do that right now
65:48 - so let's just be happy a little bit
65:50 - because we have our new post we have the
65:53 - post that we just uploaded there now
65:56 - what you expect from Instagram is that
65:58 - newer posts and I know the algorithm and
66:01 - everything it doesn't do it that way
66:03 - we're not gonna mess with it this is
66:05 - like a true real real Instagram that
66:09 - we're gonna have here so I'm just gonna
66:11 - so what we expect is the newer posts are
66:14 - going to be showing up on top of older
66:16 - posts so what I'm going to do is let's
66:18 - go ahead and I'm gonna get another rug
66:21 - image and it's funny because in crypto
66:24 - land if they steal your money it's
66:27 - basically a rock pool ah am I making fun
66:31 - of other people's losses yes I am all
66:34 - right so here what I'm gonna do is just
66:38 - paste that image there and then zoom out
66:40 - because why was I zoomed in so hard
66:43 - and let's go ahead and upload an other
66:45 - image so done and this is my second post
66:50 - on the top so I expect it to show up on
66:53 - the top right
66:54 - so confirm that full screen metamask and
66:58 - then if you scroll down it's below it's
67:00 - at the bottom that's not how we wanted
67:02 - to do I already spoilered it but
67:04 - basically what you need to do is just
67:06 - reverse that array and so that way the
67:10 - newer posts are going to show up at the
67:12 - top
67:13 - all right so we are like pretty much
67:15 - right there the only thing now that we
67:18 - have to implement is literally just
67:20 - tipping and once we are done with that
67:22 - this application is complete
67:25 - all right now we are at the very last
67:28 - step we are at the Tipping
67:30 - functionality of this very application
67:33 - and this is your time to grab another
67:36 - coffee because we're gonna need to be
67:38 - alive and we're gonna need to be awake
67:41 - to test out all the functionality that
67:44 - we will have so
67:45 - with that all that random jargon that I
67:48 - just said and even I don't know what I
67:50 - just said
67:51 - with all that done one more thing this
67:53 - all has to go into a try catch so before
67:56 - we go any further
67:57 - try catch
68:00 - I don't I can't even type it catch like
68:03 - that error
68:05 - Dot message so like I said everything on
68:09 - the blockchain goes into a try catch
68:12 - there you go there it is now it's cool
68:15 - all right let's go ahead and implement
68:17 - the tip owner functionality of this all
68:21 - right so this is our very last function
68:23 - and
68:24 - what we're gonna get started with is
68:27 - once again
68:28 - creating a new contract and in this case
68:31 - we will need the address so we'll have
68:34 - to actually guard for that too so if
68:37 - there is no address we're just going to
68:38 - return and skip it and before I forget
68:41 - it let's just export this tip owner
68:44 - function all right so we got our
68:46 - contract instance we got everything we
68:49 - need we can get started so good old try
68:52 - catch because you don't want you don't
68:55 - want to mess with errors here event
68:57 - message
68:59 - so that's all cool and then what we're
69:01 - gonna do here is we're just gonna have a
69:03 - hard-coded amount of tip that one user
69:07 - can do or like one user can send to
69:09 - another one you can make this actually
69:11 - it could be your homework to make this a
69:14 - as a dynamic thing but for now we're
69:17 - just gonna go with a hard-coded one and
69:19 - we'll see how easy it is to make it make
69:21 - it Dynamic so what you want to do is you
69:24 - want to convert any kind of and like I
69:26 - said before so what you want to do
69:27 - because I said it earlier solidity only
69:30 - works with weight which is like a super
69:32 - small ether ether amount so you will
69:35 - have to convert it now well how you do
69:38 - it is you get a pass in a string of The
69:40 - Ether value and then actually and then
69:43 - actually specify that you are passing an
69:45 - ether all right and so that's that way
69:48 - this ether amount is going to be
69:50 - converted to whey as it says there all
69:54 - right so there's your amount and so that
69:56 - is what we are going to be sending as a
69:59 - tip in this application but like I said
70:01 - you can specify it you can add like a
70:03 - little model which like which like pops
70:05 - up and then the user can choose how much
70:07 - they can tip
70:08 - 55 like at all the restaurants and so
70:12 - what you want to do is going to be like
70:15 - relatively close to what we have here
70:17 - all right so actually from just just for
70:20 - pattern recognition stake you want to go
70:23 - ahead and try it using this thing now
70:25 - there's going to be one more thing that
70:27 - you will have to adhere which is value
70:30 - and so once you add that and you figure
70:32 - out what's going to be the value of the
70:34 - key which we call the value there's a
70:36 - lot of values so we want to have a value
70:38 - here which will have a number in there
70:42 - but you want to pass in a variable so
70:44 - you go ahead try it out and then pause
70:47 - it pause this video because I'm going to
70:49 - go into the solution right now all right
70:51 - so if you try it out and you failed no
70:54 - worries I used to fail with ethereum all
70:56 - the time in fact I still do in fact I
70:59 - still pause it whenever I get an error
71:01 - and then I spend two hours to debug it
71:03 - so that's fine you just don't see it
71:05 - because it's off camera
71:06 - anyways what we're going to do here is
71:09 - we're going to create a transaction
71:10 - which will be a con which will be
71:13 - interacting with a contract methods
71:16 - you'll know that let's go copy function
71:18 - name
71:19 - which is tip image owner what is it
71:22 - there it is and then we'll just go call
71:26 - that and then we'll have to pass in the
71:29 - image ID all right so that's something
71:32 - we're gonna have to do so we're gonna
71:33 - need to we're going to need the front
71:35 - end to pass it in here into the contact
71:39 - cell so that we can pass it over
71:41 - and it's because we are actually
71:44 - creating data onto the blockchain and
71:46 - we're like sending them we're going to
71:48 - use the word we're gonna need to use the
71:50 - method send down there
71:52 - so the origin is going to be or the
71:55 - sender is going to be the address and
71:57 - then once again not this address the
72:00 - truncated thing because it's going to
72:02 - err out again like last time I'm gonna
72:06 - go with the usual gas value 3 million
72:09 - like that and then this is the key one
72:13 - the the amount
72:15 - so basically this will specify that
72:18 - there's going to be a value that the
72:21 - user will have to pay that's the big
72:22 - number that kept showing up as zero
72:25 - so we're going to need to pass this in
72:28 - here and that way you're going to
72:30 - actually transfer funds towards the
72:32 - owner of the image you want to tip it
72:34 - will actually transfer funds to the
72:36 - owner of the image you want to tip now
72:39 - you can set a guest limit of null and
72:44 - then just call it
72:45 - and now
72:47 - to make it toasty I'm gonna use the
72:50 - toast dot promise method
72:54 - and we're passing TX as in transaction
72:57 - and then create the usual object and
73:00 - like last time I have the three case
73:03 - scenarios typed up there so I'm just
73:06 - going to paste it here but basically you
73:07 - want to have a pending text you want to
73:09 - have a success stack text and you want
73:11 - to have an error text and basically that
73:15 - is pretty much the application so let's
73:17 - go ahead and test this out and actually
73:19 - I have to test out the error itself if
73:22 - you remember wall it says please connect
73:24 - your wallet that's interesting so
73:27 - there's a little bit of a bug there
73:29 - we're gonna fix that in just a second
73:30 - and it's also here so that's also
73:33 - interesting so there's like a few
73:35 - Dynamic stuff that we're gonna have to
73:37 - fix all right so let's do that before we
73:40 - mess with any kind of tipping all right
73:43 - so one of them is going to be in the
73:45 - right suggestion bar
73:48 - nope so one of them is going to be in
73:50 - the home right bar now in here we will
73:54 - need to import the use of context
73:58 - so basically the app context hook
74:01 - like that and then we're going to
74:04 - destructure user address
74:07 - from that from the contract context
74:10 - like that and that should update this
74:14 - guy okay so that's pretty good and then
74:16 - there's this one more thing we need to
74:19 - update
74:20 - that's going to be inside a feed
74:23 - and inside action buttons no it's going
74:27 - to be inside of caption now in caption
74:31 - we expect to have a username I don't
74:34 - think that's what we send it that's how
74:37 - we set it there so let's take a look at
74:39 - how we have it in context
74:42 - I actually cut everything yo cut
74:44 - everything where I open a caption so
74:46 - that's not an implementation there okay
74:49 - so for whoever is editing it cut this
74:51 - part out where I first from the point
74:53 - where I first opened item and caption
74:56 - and all this stuff so the only thing
74:58 - that I want to fix here with them is
75:02 - this use of context stuff everything
75:04 - else will be coming and even this stuff
75:06 - is going to be coming from the CLI so
75:09 - they don't have to fit and then back to
75:11 - the video right now all right so with
75:13 - that fix we should be pretty much good
75:15 - to go so grab this tip owner and we're
75:19 - gonna go to the item file now in here oh
75:23 - okay and we're gonna be going to the
75:26 - action buttons file right there so
75:29 - there's this error that's going on here
75:31 - that's because once again I set up this
75:33 - dummy function there just so it doesn't
75:35 - like completely go nuts so instead I
75:37 - have an error now you're gonna have to
75:39 - import use up contact here and I think
75:42 - you see the pattern here so once again
75:45 - destructure it and then use a context
75:50 - oops and that should be good to go now
75:52 - let's move that let's paste it back no
75:55 - errors there so that should in theory
75:58 - make everything work so there is all
76:02 - that's pretty much all the application
76:04 - now I'm just gonna try to tip to my own
76:06 - image and if everything is set up
76:08 - correctly this should throw an error so
76:11 - let's try that I'm confirm and there you
76:15 - go there is the error and it says owner
76:17 - cannot tip their own image so it worked
76:20 - it is working perfectly yeah there's the
76:23 - air that's cool and so what I'm gonna do
76:25 - instead is go ahead and
76:28 - switch my switch my wallet and there's
76:31 - my new balance
76:33 - so that's nice and also you can see how
76:36 - the profile image is like changing so
76:38 - that's actually tied to that's so that's
76:41 - actually tied to the wallet address all
76:43 - right let's try tipping hit confirm and
76:46 - there you go tip send so that
76:49 - technically means that there was a tip
76:51 - amount sent here
76:53 - .01 e so let's actually do this again
76:56 - let's just double check how much we're
76:58 - sending because I completely forgot it's
76:59 - a con and yeah 0.1 so what I'm expecting
77:03 - from this next stack test because we
77:06 - haven't tested it is it goes down we
77:08 - didn't set up expectations so this is
77:10 - supposed to go down to
77:12 - 83.62 and this should go up to
77:16 - 0.98 so let's uh let's stick again but
77:19 - this time that image hit confirm and
77:23 - let's do it there you go there it is it
77:25 - is working perfectly it is beautifully
77:28 - built so there you have it that is your
77:31 - Instagram clone with tipping function
77:33 - smell the built in and that's pretty
77:36 - much it about your app and once again as
77:39 - I mentioned it earlier you can go into
77:40 - your constants and then just switch out
77:42 - the deployment now keep in mind that if
77:44 - you're switching out the deployments to
77:46 - the girly one you will have to re-upload
77:48 - images and your friends and whoever
77:49 - you're sharing this with are going to
77:51 - have to upload images as well and you
77:54 - also will have to post this website
77:57 - somewhere on the internet
77:59 - but basically that's it that's it for
78:01 - the tutorial I hope you enjoyed it let
78:03 - me know Down Below in the comments
78:04 - whether you like it or not and don't you
78:07 - dare tell me anything negative because
78:09 - I'll find you anyways that said go ahead
78:11 - smash that like button and subscribe to
78:13 - the channel and I'll see you in the next
78:14 - one