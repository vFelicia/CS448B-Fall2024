00:00 - hey guys what is up this is kazy from
00:03 - clever program.com and you are watching
00:07 - codeacademy Python
00:09 - tutorial
00:11 - 17 all right cool get excited
00:16 - because just to show you where we're at
00:19 - you know I'm sure you already know and
00:21 - you're just waiting for this part but
00:23 - we're at 50 about 50 something perc and
00:27 - uh we are currently at battleship
00:30 - now just a little bit of an aside
00:33 - something really well not really but a
00:35 - little sad happened I so I recorded this
00:39 - video that's why we're at 36% of
00:41 - Battleship I recorded that video um it
00:44 - was about 30 minutes long however it got
00:47 - deleted so we're just going to go
00:49 - through it again all right but I'm just
00:51 - going to focus on making it even better
00:53 - this time so you guys are going to get
00:56 - the best of everything so just ignore
00:58 - the 36% imagine that it's at 0% so we're
01:00 - going to go to part one you see all
01:04 - those tick marks ignore those we're
01:06 - going to start from part one okay
01:08 - welcome to Battleship because that's
01:09 - where you guys are and I care more about
01:11 - that rather than where I'm at
01:14 - okay so in this project we will build a
01:17 - game called Battleship how does this
01:20 - game work well this game works very
01:23 - simply um it's basically like a 5x5 grid
01:26 - and you got to hide your ship somewhere
01:28 - and then other people try to shoot at it
01:30 - and if they guess correct they get to
01:32 - hit and sync your ship okay just in case
01:35 - you've never played it so let me show
01:37 - you an example of it on uh the board so
01:40 - I've already copied this from my
01:42 - previous video and um we're going to
01:45 - demonstrate a um a board a 5x5 board
01:50 - using a python list within lists okay so
01:53 - this is a big list uh that contains
01:56 - these five rows here okay so this is
01:59 - representing kind of like a
02:01 - 5x5 how this list looks in reality is
02:05 - like this just so you guys are not
02:08 - confused um it's actually like this okay
02:11 - there are no spaces anywhere it's like
02:14 - you can even assign it to a variable but
02:17 - I want to make it look
02:19 - nice and look in that way cuz it's hard
02:23 - to read otherwise what's going on okay
02:26 - for human beings not for computers for
02:28 - computers it's still the same thing
02:31 - um and effectively let's say I hid my
02:33 - ship at uh Row three right this is let's
02:36 - say row two CU this is row zero and
02:39 - let's say this is Row one and this is
02:41 - row two and this is column two this is
02:45 - column 0 column one and column two so
02:49 - let's say I hid my ship in row two
02:52 - column 2 you would go here and let's say
02:55 - you took a guess and you guessed that I
02:57 - had my ship here and you hit that that
03:00 - spot you probably have 10 guesses or
03:03 - something like that oh actually it says
03:04 - right here the player will have 10
03:06 - guesses to try to sync the ship and if
03:08 - you guess that spot then you get to hit
03:10 - my ship and sync it but I'm not going to
03:13 - let you do that I'm going to try to hide
03:14 - my ship really well I'm okay at this
03:17 - game not really I suck okay so to build
03:21 - this game we will use our knowledge of
03:23 - lists right here I'm reading
03:25 - conditionals and functions in Python
03:27 - basically what they're showing you is
03:29 - hey with what we've learned so far we're
03:32 - going to use that to create something
03:33 - more powerful something even something
03:36 - really good so that's why we're working
03:38 - on a project we're effectively taking
03:40 - the knowledge that we have and putting
03:42 - it to some use uh a practical thing so
03:45 - to speak
03:47 - okay um all right so I'm going to save
03:50 - and submit and start next
03:52 - lesson okay getting our feet wet the
03:54 - first thing we need to do is to set up
03:56 - the game board so is initially it was
04:00 - like that the only reason you saw it
04:02 - completed was cuz I've completed it
04:04 - earlier so what I'm going to do is hit
04:06 - reset
04:07 - code and simply it says create a
04:10 - variable board and set it to equal an
04:13 - empty list so what I alluded to
04:16 - earlier um in this part right here
04:19 - welcome to Battleship so right before
04:21 - this what I alluded to was a board right
04:24 - that has 5x5 so that's effectively what
04:27 - we're going to be doing so board but we
04:30 - started off with an empty
04:31 - list start next lesson now it says make
04:34 - a list what is this part over here right
04:37 - what is this showing me well all this
04:40 - does is it puts together a list with
04:43 - just let's say you have one
04:46 - o well it'll just make a list with five
04:48 - O's
04:51 - okay you see that right here makes a
04:53 - list with five O's so what we want is we
04:56 - want to create a board if we want to
04:58 - create a grid we need this to to happen
05:00 - five times so we need to create five
05:01 - different lists with O's in them and
05:05 - um and store that in a list of lists
05:08 - okay so for
05:13 - example it should kind of look like
05:16 - this but we need all of this to be one
05:20 - thing and tied together so we need to
05:22 - put all of this in just one list okay
05:26 - effectively we're going to see how we do
05:28 - that um
05:30 - they're going to show us so I'm going to
05:32 - say save and okay so here create a 5x5
05:35 - grid um what they're doing here is just
05:38 - that so let's paste this code let's run
05:40 - it and let's do
05:42 - print
05:44 - board okay so what's going on here oh
05:48 - I'm sorry we have to reset this code but
05:52 - here's how I went about it okay I'm
05:53 - going to do this live for and I don't
05:56 - care about this variable I'm not going
05:57 - to use it so I'm just going to name it
05:59 - score you can name it I you can name it
06:01 - whatever you want but if I never if
06:03 - there's ever a time I'm not using the
06:06 - looping variable I write an underscore
06:08 - and that's how you're supposed to do it
06:10 - according to python conventions uh or
06:12 - the pep 8 that's something you guys are
06:14 - going to learn about later uh there's a
06:16 - whole thing on styling your code so
06:20 - right now just focus on writing code but
06:22 - later you want to focus on how to write
06:24 - clean code that other people can read
06:26 - and it's easy to understand even for
06:28 - yourself when you come back later rather
06:30 - than a bunch of junk for example uh sure
06:33 - you can say a is equal to 5 and X is
06:37 - equal to five on the same line but
06:39 - that's annoying to read and no
06:42 - pythonista this and they'll yell at you
06:45 - for it so much better is just that it's
06:47 - easier to read okay so I'm going to do
06:50 - for blank in
06:53 - range and I'm going to do range of five
06:57 - so I want this Loop to run five times
06:59 - right range 0 to 5 will effectively
07:05 - create that list up to five but not
07:08 - including five this is the reason why
07:10 - we'll Loop through five
07:13 - times this underscore is going to be
07:15 - zero the first time then one then two
07:17 - then three then four you get the idea
07:18 - but we're not going to be using that
07:20 - underscore that's why I named it
07:21 - underscore and I'm going to say
07:25 - print
07:27 - o Time 5
07:30 - okay well what is this going to do
07:32 - you're going to
07:35 - see I'm sorry actually yep so you see
07:39 - that right there it just printed it out
07:41 - and making it o every time right so
07:45 - let's go back to how the code was and
07:48 - all I did was just that except I added
07:52 - an append to it all right so all they
07:55 - want us to do is use range to Loop okay
07:58 - so I'm I'm going to use range to loop
08:00 - from 0 to 5 and I'll simply say that to
08:06 - board right append
08:10 - that
08:12 - so now we're going to have a list
08:15 - containing five lists inside of it okay
08:18 - because remember this creates a list so
08:20 - we're going to keep going through the
08:21 - loop and creating lists inside of
08:23 - that and you effectively have that board
08:26 - that we were talking about how did this
08:27 - work well UND score was Zero the first
08:31 - time and then we came down here not like
08:34 - we need this zero at all and we just
08:37 - simply
08:38 - appended this list right there to the
08:42 - board like that then we looped again and
08:46 - underscore was one next time and then we
08:49 - appended this list right over here to
08:53 - the board then we Loop through it again
08:56 - and then we simply appended
09:00 - right this part evaluates to this part
09:03 - evaluates to this and we simply appended
09:07 - that to the board
09:10 - and effectively what ends up
09:14 - happening what ends up happening at the
09:17 - end of it is that board is equal
09:21 - to let me just make it
09:26 - clear oops
09:33 - okay ultimately board is equal to this
09:36 - thing that we were talking about earlier
09:38 - and this just showed us how to create a
09:40 - 5x5 board like that okay so this thing
09:42 - here uh is the same thing right that
09:45 - thing up there above my head in the
09:48 - terminal right here is the same as what
09:51 - the board is I just spaced it out nicer
09:54 - so as a human being you could synthesize
09:56 - that information uh in an easier way and
09:59 - just tell right off the bat that's five
10:00 - rows rather than really squinting your
10:03 - eyes here and going okay there's a comma
10:06 - right here so this whole part is the
10:09 - first element this whole part is the
10:11 - second element this whole part is the
10:13 - third element and so on and so forth
10:15 - okay hopefully that makes sense so we're
10:18 - going to Simply I think copy paste the
10:21 - code and that should be good enough and
10:25 - then we should just print I don't know
10:27 - if we have to print board
10:29 - inside the loop use a pend um a list
10:32 - containing five zeros to board just like
10:34 - in the example above note that it's O's
10:36 - not zero so actually it's an O and I do
10:38 - have an O I just said zero for no reason
10:41 - and we'll just print it for fun to see
10:43 - what it looks like okay right
10:46 - there start next check it twice so again
10:50 - I'm going to reset the code use the
10:52 - print command to display the contents of
10:55 - the board okay great job now that we
10:57 - have built our board let's show it off
10:59 - throughout our game will want to print
11:00 - the game board so the player can see
11:03 - which locations that they have already
11:05 - guessed regularly printing the board
11:07 - will help us debug our
11:11 - program so when we're creating this
11:13 - program constantly printing out the
11:15 - board will help us identify if there are
11:18 - potentially any errors or if we're
11:20 - messing up with our logic
11:22 - somewhere right it'll visually just show
11:24 - us however the easiest way to print the
11:26 - board would be to have python displayed
11:28 - for us using the print command let's
11:30 - give that a try and see what the results
11:31 - look like is this useful way to print
11:33 - our board for battleships
11:36 - so when we create a board using this
11:39 - algorithm right here the simple Loop
11:41 - that keeps appending um lists of O's to
11:45 - the board and essentially creating five
11:47 - rows let's look at it is this look
11:50 - nice heck no it looks hideous right it
11:54 - looks really really bad you have to
11:56 - squint your eyes to see the commas to
11:59 - see the rows where anything is and if
12:01 - you were playing a game here nobody
12:03 - would want to play your game if you were
12:04 - showing this to your friends they would
12:05 - not be your friends anymore bad things
12:08 - would happen right your family would be
12:09 - like we don't like this guy anymore so
12:13 - you want to make it in a way so it is
12:16 - easy on the eyes right your friends have
12:19 - fun when they're trying this out and
12:21 - even you yourself could have fun and be
12:23 - proud of showing them something
12:26 - cool so let's go back here and let's try
12:29 - to make this better so when it prints it
12:31 - out it does not look like this it looks
12:34 - a lot better all right so let's go save
12:38 - and submit code and let's start next
12:40 - lesson and I'm simply going to uh reset
12:44 - the code
12:47 - okay so now we're going to create custom
12:49 - print now we can see the contents of our
12:51 - list but clearly it would be easier to
12:54 - play the game if we could print the
12:55 - board out like a grid with each row on
12:57 - its own line first delete your print
13:00 - statement that's what it tells us to do
13:02 - then Define a function named print
13:05 - board and with the single argument board
13:08 - inside the function write a for Loop
13:10 - that iterates um through each
13:13 - row and print that out to the screen
13:17 - call your function on board
13:20 - okay just like that let's take it and
13:24 - try it out and let's see what happens
13:27 - all right so how did this happened we
13:29 - got five rows and we didn't get the
13:32 - outer list we just got the five inner
13:35 - rows how did that happen let's talk
13:37 - about it really
13:39 - quickly here we created the board you
13:41 - already know how we did that here we
13:43 - already created this thing that gives
13:46 - us
13:48 - essentially
13:53 - that okay so this Loop alone creates all
13:58 - of that but how did we do it so we
14:01 - printed it out really nicely well let me
14:03 - show you so this was board right that's
14:05 - what we created oops that's what we
14:09 - created and what happened was where
14:12 - board was we got that part right there
14:14 - right so we basically passed that board
14:16 - to
14:18 - our um function call right here now it
14:22 - went to the definition of the function
14:23 - with the same
14:26 - board and how what does that function
14:29 - tell uh us to do well that function
14:32 - tells
14:33 - us that for each row in
14:39 - there right so what is row let's
14:42 - actually bring that up so it's a little
14:43 - bit um easier to read what's going on
14:47 - still not really easy
14:50 - but so what is
14:52 - happening right we have that
14:56 - board right there and we have that board
14:58 - right right here so the first time we go
15:00 - through the loop the row is actually
15:03 - this thing here and then we say print
15:07 - that and it outputs this row right over
15:10 - here okay then the next time we go
15:12 - through the loop row is simply this row
15:16 - out of that
15:18 - list so row becomes that guy and we say
15:22 - print that guy and that's how you get
15:24 - the second
15:25 - row okay I'm going to remove
15:29 - that giant board because it's confusing
15:31 - so I'm going to just step you through it
15:33 - then the third time we go through
15:34 - remember it's this board that we passed
15:37 - into our
15:38 - function row iterates over this list and
15:41 - the next time it's the third element in
15:43 - the list then row is the fourth element
15:45 - and then finally row is the fifth
15:47 - element in that list and it prints it
15:50 - out line by line this way you don't get
15:53 - to see the outer list kind of
15:56 - cool and let's save and submit MIT and
15:59 - we got each row cool let's start next
16:02 - lesson now printing pretty we're getting
16:06 - pretty close to a playable board but
16:07 - wouldn't it be nice to get rid of those
16:09 - quote marks and commas we're storing our
16:11 - data as a list but the player doesn't
16:13 - need to know that
16:14 - and check that out isn't that amazing
16:18 - right over here look what they're
16:20 - showing you this is exactly what I was
16:23 - showing you guys in the last
16:26 - video so you can call me Mystic Mac
16:29 - because I predict these things right
16:32 - that's what Conor McGregor would say um
16:35 - so you know I'll take credit where it's
16:38 - due so um yeah that feels pretty good we
16:42 - were we were uh trying this part out
16:44 - right here earlier right and they're
16:46 - showing us this now so you're going to
16:48 - see how this is useful and literally it
16:51 - was these examples that I was showing as
16:53 - well one was with an empty space in
16:55 - between and then another one I showed
16:57 - was with four hyphens but they have
16:59 - three hyphens here and I was talking
17:02 - about creating a game and showing it
17:04 - nice and here they are creating
17:06 - battleships and showing it nice okay I
17:08 - didn't check this earlier but I am going
17:11 - through it now and I saw that they have
17:13 - it so let's keep going through
17:17 - it um okay how does this work well we
17:20 - have this list ABC D if we
17:22 - call this join weird thing uh if we call
17:27 - join with that space on this list
17:30 - letters well what it does is it gives
17:32 - you back a space b space c space d it
17:37 - joined every letter with a space in
17:39 - between that's what this is saying hey
17:41 - join every letter in the list with the
17:43 - space in between that's the space in
17:46 - between and this part is saying join
17:48 - every letter with three hyphens in
17:49 - between whereas so you can see a three
17:52 - hyphens B three hyphens C and three
17:54 - hyphens in
17:56 - D so we want to turn each row into o and
18:02 - nothing else okay simple let's go in
18:07 - here and let's
18:11 - try let's try Board of zero right if we
18:15 - did Board of zero what would we get we
18:18 - should get back the first element in the
18:20 - board which is that guy right there what
18:23 - was the error list indices must be
18:25 - integers or slices not tupal
18:30 - what is it
18:33 - saying oh we didn't put commas here
18:36 - right so that's
18:38 - what here we
18:41 - go so the zeroth element will give you
18:44 - that guy this the first element will
18:46 - give you that guy second element will
18:48 - give you that guy
18:50 - so um okay
18:53 - now let's
18:57 - called join on that
19:04 - list so all those O's are
19:07 - together all those O's are together if I
19:11 - called join on the entire board you'll
19:14 - get an
19:15 - error because you can put strings
19:17 - together but you can't put lists
19:19 - together right you're passing it the
19:21 - entire board so what it's trying to do
19:24 - is put all of these guys together
19:27 - separated by a space that doesn't make
19:29 - sense it's trying to do
19:37 - this like literally all these guys with
19:41 - the space that makes no
19:43 - sense what does that thing I don't know
19:47 - so it's not a string so you can't do
19:50 - arbitrary operations to
19:53 - that okay so we are going to essentially
19:58 - do the same thing so for zero we're
19:59 - going to join it by spaces and then for
20:02 - one we're going to join it by spaces and
20:04 - for two we're going to join it by spaces
20:06 - and for three we're going to join it by
20:07 - spaces and so on and so forth
20:10 - forth all right let's let's do just that
20:13 - for Row in
20:14 - board
20:16 - for um let's see I'm getting each
20:20 - row and
20:22 - for I can say numbers in
20:27 - row
20:29 - um I can
20:30 - say uh join
20:35 - numbers say print and let's run it let's
20:38 - see what
20:40 - happens okay is that what we wanted no
20:44 - so let's go back and debug and let's see
20:47 - what happened so for row and board let's
20:48 - first print row let's take it one step
20:50 - at a time instead of doing two Loops
20:53 - right
20:54 - away so you can see that we get these
20:57 - guys right over over here so we're
20:59 - getting one row at a time well let's try
21:03 - this let's do
21:07 - join on that row let's try that let's
21:09 - see what
21:11 - happens and there we
21:14 - go right we got the row and then we just
21:18 - simply joined each row and that's it and
21:20 - then we just Loop through and did that
21:21 - for every single list in the list board
21:25 - this is called a two-dimensional AR
21:28 - array it's a little Advanced concept but
21:29 - you guys are getting access to it right
21:31 - now that's called a grid and that's a 2d
21:35 - array or a 2d list okay array in other
21:38 - languages it just means a list in Python
21:41 - okay so that is uh why it's called 2D is
21:45 - because you have lists within lists and
21:48 - for another reason that I'll show you
21:50 - that you can access things by row and
21:52 - column okay for for instance if you
21:55 - wanted to access that X right there
21:59 - right how would you do it um you would
22:03 - you would see what row it's in so zero 1
22:06 - 2 3 and what column it's in so you'd go
22:10 - 0 1 2 3 it's in third row and third
22:13 - column and the basic idea is row comma
22:17 - column will give
22:19 - you um
22:22 - the item you are looking for in a 2D
22:30 - list okay or or a grid okay this is an
22:34 - important note write it down or write it
22:37 - down by hand or write it down in your
22:39 - Evernote or whatever thing you use
22:41 - because that's important so for example
22:44 - I can do Board of three row and three
22:50 - column and I can print it out and you
22:53 - will see that I get back that
22:55 - X right this x right there
22:58 - so if I comment out these
23:01 - guys and if I change that X to something
23:04 - else you can see that I get that
23:06 - something
23:08 - else okay how does that work well board
23:12 - three this row will get me this entire
23:16 - list and now inside of this entire list
23:19 - I have to access the 0 one 23 index
23:26 - so right the this essentially that whole
23:29 - thing
23:30 - is this right here and to get hidden
23:33 - from that I just have to do
23:36 - three okay
23:38 - so I can just do that right
23:42 - here they're equivalent
23:48 - okay all right
23:55 - cool all right so
24:00 - let's try
24:02 - that okay uh we should just do that to
24:07 - our um function okay so we're going to
24:10 - go in here and go in here and just just
24:15 - do that to our
24:18 - function cool so now we get a nice board
24:21 - and remember we don't need to show the
24:24 - person right it says
24:26 - here um um we're storing we're storing
24:30 - our data as a list but the player
24:31 - doesn't need to know that remember the
24:33 - player doesn't need to know that you're
24:35 - storing it as a list you want to show it
24:37 - to them in a nice userfriendly way
24:39 - imagine if on your iPhone every time you
24:42 - had to put a number in you saw some kind
24:44 - of dictionary you don't see any
24:46 - dictionary in here right even
24:48 - though when you're storing numbers in
24:50 - your iPhone it's storing it in a
24:53 - dictionary like a key value pair but you
24:55 - don't see a squiggly and then only after
24:57 - after that squiggly you can put your
24:59 - name right just to recall dictionary
25:01 - would work like this key comma value so
25:05 - it's not like you have to write your
25:07 - name exactly right here and then put it
25:11 - as a string right you as a matter of
25:14 - fact don't even know what's going on in
25:16 - the back end and you just get to do
25:19 - stuff from a nice user interface and
25:21 - then on the back end it knows it's a
25:22 - dictionary and on the back end it knows
25:24 - it's a
25:25 - list same idea is working here
25:28 - effectively okay we are creating a list
25:32 - for the back end but your user doesn't
25:34 - need to know that and it doesn't look
25:36 - boring and annoying to the user anymore
25:38 - it looks nice it looks easy it's easy on
25:40 - the eyes I see the 5x5 really cool okay
25:44 - let's start next
25:46 - lesson uh reset code and let's check out
25:50 - what they're talking about here so
25:51 - they're talking about random that's
25:54 - awesome again same thing is going on
25:57 - here right from from random import Rand
25:59 - int again you guys from like import that
26:04 - import magical command again these
26:06 - people right they were staying up late
26:09 - at night eating ramen noodle writing
26:12 - this code right they probably lost
26:15 - friends while they were working on these
26:16 - giant projects and they you know their
26:20 - their relationships got destroyed but
26:23 - they did they gave all those sacrifices
26:25 - for us and if we don't understand this
26:28 - import command we're letting all of
26:31 - these amazing brilliant coders
26:32 - sacrifices go in vain you guys so
26:36 - understand how import works because
26:39 - import will change your life and why
26:42 - it's so important is you're getting to
26:44 - use Geniuses code right people who are
26:47 - really smart and wrote brilliant code
26:49 - and wrote These really useful
26:52 - libraries you get to just say import and
26:54 - now you can use all of their code
26:56 - without having to know how that code
26:57 - code Works cool so effectively what
27:00 - we're doing here is that from random
27:04 - module we're importing a function called
27:07 - Rand int which is random
27:10 - integer what it does is you give it a
27:12 - range and it's inclusive on both ends
27:15 - and it picks a point what does that mean
27:17 - if you give it zero and one it could
27:18 - pick zero and it could pick one both
27:21 - okay it's not that it goes up to but not
27:24 - including the one like how we're used to
27:28 - in a lot of python things so uh just to
27:31 - show you how this works um I'm again I
27:34 - could use repple it to show you but I
27:36 - also want to use uh other things so you
27:39 - know that you can use multiple things
27:40 - for
27:42 - this um and I have examples up there but
27:44 - I'll show you right down here from
27:46 - random import Rand int and effectively I
27:50 - can do Rand int 0 to 6 and I can keep
27:54 - running
27:56 - it yeah and you see that you got six
27:59 - indeed and you got zero and you got
28:02 - numbers in between you got 2 2 1 one 4
28:04 - every time you get um it generates a
28:08 - number randomly whoops so it could be
28:11 - the same number or it could be a
28:13 - different number okay it's it's random
28:15 - it's pretty
28:16 - random so why is that important well
28:20 - check it out that's what we're going to
28:23 - use right this it says hide excellent
28:26 - now let's hide our battleship in a
28:28 - random location on the board since we
28:31 - have a two-dimensional list remember we
28:34 - talked about the 2D list right before
28:36 - this we'll use two variables to store
28:39 - the ship's location ship row and ship
28:41 - column you remember I showed you list
28:45 - row column that's the trick we're going
28:48 - to use to store our hidden
28:51 - variable so let's say that we had that
28:54 - board that we created earlier right a
28:57 - few times times this board right here
28:59 - ooh not X's I want all of those To Be
29:03 - Strings so let's somehow bring that code
29:07 - back that generates that
29:09 - board
29:13 - um okay
29:18 - so that creates the
29:22 - board I don't need this for
29:26 - now print
29:28 - board
29:32 - okay all right so what did we do we
29:35 - imported the random uh Rand in function
29:38 - from random module and we initialized
29:41 - board to be an empty list then we went
29:43 - ahead and constructed the board which is
29:45 - the 5x5 grid with five O's uh in each
29:48 - row and now we're just going to print
29:50 - out that board so you can see that right
29:52 - over here this is a 5x5 grid just trust
29:55 - me and I've already shown you multiple
29:57 - times
29:58 - s so well what we want to do is we want
30:02 - to be able to place our hidden item in
30:04 - there um or let the computer pick a
30:07 - hidden item in there and then we have to
30:09 - guess where it is okay so how do we do
30:13 - that well check it
30:15 - out um what I can do is I can place
30:21 - hidden item and then print board after
30:24 - that and you'll see the difference
30:26 - between the two boards
30:28 - okay um I'm going to do new line new
30:31 - line so it separates it out and now I
30:34 - will
30:35 - do
30:37 - Board of uh row two and column 3 and I'm
30:43 - going to set it equal to Hidden so the O
30:46 - in row two row two is right here and
30:49 - column 3 is right over here is going to
30:51 - set this right here to Hidden the word
30:55 - hidden and you're going to see the
30:57 - difference so that's the top board right
31:01 - this is line 10 printing out the board
31:02 - that we constructed the regular board
31:05 - this prints out uh two uh new lines
31:08 - that's why there's a little segregation
31:11 - there and then this part here prints out
31:14 - the board and you can see
31:16 - 23 is actually hidden well these numbers
31:21 - that are generated by ourselves here two
31:23 - and three we need these to be generated
31:25 - randomly okay so we're going to use
31:28 - effectively what we can do is use Rand
31:30 - int here directly to generate a number
31:33 - between 0 and four and including 0 and
31:36 - four this means that it generates five
31:38 - numbers right 0 1 2 3 4 that's five
31:42 - numbers if you put five here that would
31:44 - be wrong because you can't possibly go
31:47 - to row six you understand because we
31:50 - start from row zero when we're in
31:53 - indexing so we can do that here and we
31:55 - can do Rand int of Z 0 comma 4 here as
31:58 - well what each time this is going to be
32:01 - generating some number from 0 to 4 and
32:03 - each time this is going to be generating
32:05 - a number between Z and four so let's
32:07 - check it out now hidden is going to be
32:09 - in a different position every time right
32:11 - hidden is here now hidden is here now
32:15 - let's check where hidden is it hidden is
32:17 - right over
32:18 - here okay but to make this code a little
32:21 - bit cleaner what we're going to do is
32:24 - we're going to sign those variables okay
32:26 - so I'm going to say random row equals
32:29 - Rand
32:31 - int 0a 4 and I'm going to say random
32:34 - column is equal to Rand in 0a
32:38 - 4 and here I'm simply going to say a
32:42 - random row and here I'm simply going to
32:45 - say random column okay and every time I
32:49 - print it
32:51 - out you can see that hidden right here
32:54 - is in a different location effectively
32:56 - every time so you wanted the computer to
32:59 - be automatically able to pick where
33:01 - hidden is so when you're playing um and
33:04 - you guess that location you can sync the
33:07 - ship so we're not going to have it
33:09 - actually say hidden cuz then obviously
33:12 - you know where it is but I'm just
33:13 - showing you for now how random works and
33:17 - how changing things in a 2d list works
33:21 - okay so all of that is great but what if
33:23 - the board is a different size it's not a
33:25 - 5x5 Grid it's a 6x6 six grd or whatever
33:28 - how do you know instead of four what to
33:30 - put there well how are we getting this
33:33 - four and how can we programmatically get
33:35 - it every time we'll just get the length
33:37 - of what the board is right and this
33:40 - should give you five because there are
33:42 - five elements in the list board right
33:45 - element one element Two element three
33:49 - element 4 and element five so length of
33:52 - board should evaluate to
33:55 - five but remember remember putting five
33:57 - here would be incorrect and the reason
34:00 - is because now Rand int is giving you
34:02 - numbers from 0 to five including zero
34:07 - and five and that's six total options
34:09 - and you can never go to row six or
34:12 - column six for that matter so what we're
34:14 - going to do is len board minus one and
34:18 - Len
34:19 - board minus one right and this should
34:24 - give us what we want effectively okay
34:27 - every time you'll see hidden changing
34:28 - every
34:30 - time right hidden is changing cool let's
34:34 - go back Define two new functions random
34:37 - row and random C that take that each
34:39 - take board as input okay they just want
34:41 - us to Define it as a function So Random
34:45 - row
34:48 - board and return random integer between
34:53 - zero and Len of board minus
34:57 - one and effectively random coal board
35:02 - that takes in board and
35:04 - returns random integer between zero and
35:07 - Len of board minus one okay that's where
35:12 - they got Len of board minus one call
35:15 - each function on board so now we're
35:17 - going to call each function on board and
35:19 - we're going to
35:20 - say
35:25 - um
35:29 - we're going to say
35:30 - random I was just reading uh just in
35:33 - case I missed anything in their
35:34 - instructions but uh it doesn't look like
35:36 - it random row pass it the board that we
35:39 - created this is the board that we
35:41 - created up here okay these four lines
35:44 - effectively or three lines of
35:46 - code create construct the entire board
35:48 - for the
35:50 - game and I'm going to do
35:53 - that I need one parentheses
36:02 - okay cool and we can see what this is
36:07 - doing join print right here we got to
36:11 - make sure that we do
36:15 - print so what is that effectively doing
36:20 - these functions just return an integer
36:22 - okay if you give them board they just
36:24 - return return an integer so so we give
36:27 - it a board we give it that 5x5 grid each
36:30 - containing five uh each list containing
36:33 - five O's strings and then what it does
36:36 - is it takes that board it returns its
36:39 - length minus one which in this case
36:40 - would be 0 to 4 and that simply
36:43 - evaluates to some random integer like
36:46 - let's say two and so this part might
36:48 - just evaluate to two and this part might
36:50 - evaluate to some number like zero for
36:53 - column and it might be some zero column
36:56 - and that way we have our random row and
36:58 - our random
36:59 - column and then we can later use it for
37:03 - whatever reason okay so for this part
37:06 - I'm going to stop it right here and
37:09 - we're going to continue in our next
37:11 - video so please if you haven't yet
37:14 - please subscribe like the video or if
37:16 - you could please share it with whoever
37:18 - you know or maybe don't share it that's
37:21 - maybe your secret of getting better at
37:24 - programming whatever the case may be
37:27 - this is ky from clever program.com you
37:29 - just finished watching part 17 I will
37:32 - see you in code cademy Python tutorial
37:36 - part
37:38 - 18