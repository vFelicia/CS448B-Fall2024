00:00 - in this video you'll build the discord
00:02 - web 3.0 blockchain app using next.js
00:04 - you'll learn how to set up and run a
00:06 - decentralized database node with gun.js
00:09 - we'll use the context api to manage the
00:12 - state inside of react.js you're also
00:14 - going to add authentication to this app
00:15 - just like all the other apps using
00:17 - metamask of course we're gonna be using
00:19 - sanity as our backend database you're
00:21 - also gonna be using grok to query in
00:23 - this database and lastly we're gonna
00:25 - deploy this app to the web you know it
00:28 - using versailles with that said if
00:29 - you're excited i'm excited now before we
00:32 - get into it go ahead and smash that like
00:34 - button and if you do here is a picture
00:36 - of a panda i always got to give you guys
00:38 - something special okay turn that thing
00:39 - blue let's keep going all right now
00:41 - let's go ahead and demo the discord app
00:43 - so check it out look at this it looks
00:46 - just like discord and now if i go ahead
00:48 - and change my channels on the side look
00:51 - at that little nice little transition
00:52 - and that bubble effect that that happens
00:54 - it's a nice front-end effect now i can
00:56 - go to different channels also it
00:58 - requires me to log in and authenticate
01:00 - myself with uh metamask so let me
01:02 - actually go ahead and log in cool now
01:05 - that it's allowed me to get in let me go
01:07 - ahead and start clicking the different
01:08 - channels that are available to me so i
01:10 - can actually click the build space
01:12 - channel or any other channel that i want
01:14 - let's go ahead and send a message so i
01:17 - can just send a message there you go i
01:18 - just said hello all right let's say hey
01:20 - what's going on this is qazi boom so you
01:22 - can see i can actually send messages i
01:24 - can send messages inside of different
01:26 - channels all of this is actually being
01:28 - run on decentralized node using gun.js
01:31 - which is super freaking cool so we are
01:33 - back and it's kind of happening in the
01:35 - blockchain and then we have also our own
01:38 - backend with sanity storing our users
01:40 - and the channels on there as well with
01:42 - that said if you're excited here's one
01:44 - cool thing i'm gonna tell you for this
01:45 - video your instructor is gonna be a
01:48 - world-class instructor his name is lance
01:50 - and he's one of our boot camp
01:52 - instructors at clever programmer
01:53 - teaching the front end mastery boot camp
01:55 - and um you know what if this video
01:57 - doesn't get a thousand likes we might go
01:59 - ahead and fire lance he might not make
02:01 - it okay so his job depends in your hands
02:04 - this is for lance guys this is not for
02:06 - me anymore this is for him with that
02:08 - said i'm going to send it over to him
02:09 - and you are going to start building this
02:11 - app right now all right lance here let's
02:13 - go ahead and get started i'm going to be
02:14 - coding this project today so what we're
02:16 - going to do first and let's create our
02:17 - project folder and let's call it discord
02:19 - clone blockchain once that's done let's
02:21 - head over inside that folder and let's
02:22 - set up a couple things here so real
02:24 - quick i'm gonna set up three folders the
02:25 - first one is gonna be our client folder
02:27 - which is where which is where our next
02:28 - js app will live then i'm gonna be
02:30 - setting up our server folder followed by
02:31 - that let's set up the studio folder
02:33 - beautiful once that's done i'm gonna
02:34 - head over to my vs code beautiful so
02:36 - once i have all that set up i'm gonna go
02:38 - ahead go into the client folder and
02:39 - let's create our next js app so i'm
02:41 - gonna do npx create next app at latest
02:44 - just like this hit enter boom all right
02:45 - once that's loading i'm gonna head over
02:46 - into i'm gonna leave the clan folder and
02:48 - head into the studio folder let's go
02:49 - ahead and set up sanity right so just
02:51 - like before if you guys watched our
02:52 - twitter clone video we're gonna go ahead
02:54 - and go to cindy.io cleverprogrammer and
02:56 - here are the instructions to set up
02:58 - sanity right it's important that you
03:00 - guys make sure you have the cli tool as
03:01 - well as when you do send the init what
03:03 - make sure you put the code coupon clever
03:05 - programmer because you're gonna get a
03:06 - bunch of free stuff provided by sanity
03:08 - so make sure you do that thank you
03:09 - sanity so i'm gonna go ahead and since i
03:10 - already installed sandy i'm gonna do
03:12 - sanity init boom all right we're setting
03:13 - up a new project i'm already logged in
03:15 - so i'm gonna keep the project name the
03:16 - same i'm going to say discord clone
03:18 - blockchain now it's going to ask you
03:19 - what kind of project this is so i'm just
03:21 - going to say clean project with no
03:22 - predefined schema we're going to be
03:24 - making our own all right next thing
03:25 - let's head over to our server folder in
03:27 - the terminal and let's just set up our
03:28 - server with yarn you guys remember this
03:30 - is a decentralized chat app right it's a
03:32 - discord clone we're going to be making a
03:34 - decentralized discord app right so what
03:36 - does that mean that means all the data
03:37 - from our app is not going to be stored
03:39 - in one centralized place right it's
03:41 - going to be set up on an ecosystem of
03:43 - nodes okay and these nodes are going to
03:45 - be talking to each other and constantly
03:47 - syncing up data right this can model
03:49 - what you guys know as a relational
03:50 - database this server utilizes gun.js i
03:52 - want you to think of gunjs as a open
03:54 - source firebase or we can even call it
03:56 - like a decentralized dropbox right so
03:58 - each node is going to hold a user it's
04:00 - going to point to another user if we're
04:02 - going to have conversations with them
04:04 - then we're going to set up one of the
04:05 - servers here we're going to set up
04:06 - qazi's node here this is going to be our
04:07 - node i'm going to be calling it the qazi
04:09 - gun node let's go we're just going to
04:11 - set a couple things just like so so i'm
04:12 - just going to be doing this and once
04:14 - that's done our server folder set up for
04:15 - now we'll get back to it the next thing
04:17 - i want you guys to do with me is let's
04:19 - set up first cell okay once that's done
04:20 - if it asks you where what directory is
04:22 - your code located your next app lives in
04:23 - the client so make sure it points to the
04:25 - client folder all right so i'm just
04:26 - going to do a couple things just like
04:27 - this do burst cell dev boom so now it's
04:29 - available and ready to go let's head
04:31 - over to our local host 3000 what you're
04:32 - going to see here is a starter next js
04:35 - app along with all the pages and
04:36 - everything set up right here just like
04:38 - so let's go over and set up sanity now
04:40 - let's head over to our studio folder
04:41 - you're going to notice the schema.js
04:43 - right here let's just remove all these
04:44 - comments here and clean it up so let's
04:45 - create our own schemas the first thing
04:47 - i'm going to create is this user schema
04:49 - right i'm just going to paste this right
04:50 - here boom so right here we have the name
04:52 - the wallet address and the profile image
04:54 - all of these are the properties of the
04:55 - user that we need to keep track of all
04:57 - right and every time we make a schema
04:58 - i'm going to go ahead and import that
04:59 - user schema right here and every time
05:01 - you guys make a schema go ahead and put
05:03 - the name of that schema right here let's
05:04 - create one more i want to make the
05:06 - conversations schema right so keep in
05:08 - mind that another thing we got to keep
05:10 - track of in store is any of the
05:12 - conversations you have with users if
05:13 - it's a personal message like a direct
05:15 - message or if it's just a group chat so
05:17 - we'll go ahead and set it up right here
05:18 - like this as you can see the important
05:20 - ones about conversations is the room
05:21 - name the room id the image and if the
05:24 - conversation is a direct message or if
05:26 - it's not just like before add that
05:28 - schema to our schema js and there you go
05:30 - sanity set up to start sanity just do
05:32 - settings start and if you guys head over
05:33 - to localhost 3333 you're going to see
05:35 - this nice tool right here to see all the
05:38 - schemas we set up right so if i click
05:40 - into users obviously there's no users
05:41 - yet so i can go ahead and create one and
05:43 - all the properties that i set up are
05:44 - here as well the name the wallet address
05:46 - that we're gonna tie to a user to log in
05:48 - and then a nice beautiful profile image
05:50 - right here let's go and with that
05:52 - sandy's all set up next thing guys let's
05:54 - go ahead and set up our gun node server
05:56 - right so i'm going to make a server.js
05:58 - i'm going to add type module and from
06:00 - there let's go ahead and add express
06:02 - cores and obviously gun.js once you
06:04 - added those i'm gonna go import them
06:06 - just like so now i'm gonna set up
06:07 - express just like this okay cool now
06:09 - express is all set up now that express
06:11 - is set up let's go get our gun node up
06:13 - and running i'm gonna be using heroku to
06:14 - run our gun server as you can see i've
06:16 - made one before let's go make one
06:18 - together you can call it discord gun
06:20 - node like so right so create app this is
06:21 - simple guys let's just follow the
06:23 - instructions here for heroku install the
06:25 - cli tool log into heroku alright once
06:27 - that's done i'm gonna go ahead and
06:28 - create a new git repository within this
06:30 - folder and run these next few commands
06:31 - one really important step guys right
06:33 - here let's add a git ignore file and
06:34 - let's just ignore all the node modules
06:36 - we're installed here because you know if
06:38 - we were to push all those node modules
06:40 - it's going to be the end of the world if
06:41 - we were to install all those node
06:42 - modules right this project is literally
06:44 - going to be full to the brim with all
06:45 - the modules we installed so let's not do
06:47 - that let's ignore all the node module
06:49 - files in the get ignore once that's done
06:51 - we're going to add all the files commit
06:52 - them and then push to heroku cool now
06:54 - that i'm done with that i'm just going
06:54 - to double check and make sure it's
06:56 - deployed with heroku logs right here
06:58 - looks like we're all set up let's go one
06:59 - more thing by the way we can go over to
07:00 - settings on roku node and we're gonna
07:02 - see this link here in our discord gun
07:04 - settings you're gonna see this url here
07:06 - by the section that says domains copy
07:08 - this link we're gonna be using it for
07:09 - later all right so once you deployed
07:11 - your gun server onto heroku let's hop
07:13 - into our next js app and go into the
07:15 - index.js right here right as you can see
07:17 - with nextjs it uses modules for css
07:20 - right instead of the traditional.css
07:22 - file we do module.css right and that's
07:24 - why you see stuff like styles.you know
07:26 - class name for us in home we're going to
07:28 - create a
07:29 - styles.wrapper div right and here this
07:31 - is going to contain a couple things
07:33 - essentially it's going to contain our
07:34 - whole app so after you set up your
07:36 - wrapper dip i'm going to be making a
07:37 - main div within the main div there's
07:39 - going to be a couple things here too one
07:40 - thing i want to stress is that in the
07:42 - wrapper div this is where the sidebar
07:43 - component is going to go and within the
07:45 - main div which is inside the wrapper
07:46 - that's where the conversations list and
07:48 - the chat view component is going to go
07:50 - all right obviously we don't have those
07:51 - components just yet so let's focus on
07:53 - one of them the first one i'm going to
07:54 - focus in right now is let's add that
07:56 - sidebar component so i'm going to be
07:58 - making a components folder and let's
07:59 - just set up sidebar within that so
08:01 - sidebar dot js component so there's our
08:03 - sidebar js component not head over to
08:05 - index right because every time you make
08:06 - a component you have to import it right
08:08 - here so i'm gonna say sidebar and just
08:10 - place it like so okay really quick back
08:12 - in our sidebar js i'm going to import
08:14 - anything i might need so i'm going to
08:15 - import the styles here any react hooks
08:17 - that i'm going to use later on and after
08:19 - that let's go ahead up and set up the
08:21 - css module for this sidebar now the css
08:23 - for the sidebar is just going to be this
08:24 - right here it's going to be the wrapper
08:26 - and of course if you're going to make a
08:27 - css for the wrapper you have to label
08:30 - the div name styles.wrapper there you go
08:32 - and if you save this you can see there's
08:33 - our component right it's kind of cut off
08:35 - but it says sidebar so after you set up
08:37 - the styling for the sidebar let's go
08:38 - back into our index.js and write
08:40 - something on our main i'm just going to
08:42 - say conversation list chat view just
08:44 - uncomment that you'll see this is kind
08:45 - of like the format of it the sidebar has
08:47 - its own spot and conversation list chat
08:49 - view is on the top right there and
08:51 - that's because of the css right here uh
08:52 - really quickly i'm gonna hop into my
08:54 - global css and just insert here this is
08:56 - gonna give us the body background color
08:58 - and you're gonna see it's gonna look
08:58 - just like discord if you were to open up
09:00 - discord right now you'd see that it has
09:02 - this light gray for the conversation
09:04 - list to chat view and on the left where
09:05 - the sidebar is that's gonna be like a
09:07 - darker gray which is all the css you
09:08 - need is going to be right here feel free
09:10 - to pause the video if you need to but
09:11 - let's move forward so let's just travel
09:13 - with me over to here on the sidebar and
09:15 - once you're on the sidebar i'm going to
09:16 - go ahead and set up my react hooks right
09:18 - so really quickly that's just going to
09:20 - be my use router and my use state so
09:22 - really quickly if you don't know if
09:23 - you're not familiar with use router all
09:25 - that is it's just a hook from next js
09:27 - right you can see it's from next router
09:28 - all it does is help guide and direct the
09:30 - user to the different pages on our app
09:32 - right so if i were to click on my
09:33 - conversation with kazi for example it's
09:35 - gonna click into the url the page that
09:38 - holds our chat messages right cool so
09:40 - i'm gonna set up the hooks just like so
09:42 - and after that let's create an object
09:43 - for now i'll call it dummy channels and
09:44 - as you can see it's gonna be an array of
09:46 - objects the idea with the array of
09:48 - objects here is that each object is
09:50 - going to represent a channel right if
09:51 - you guys are familiar discord if you
09:53 - look over onto discord you see those
09:54 - circles on the sidebar that is what our
09:56 - dummy channels quote unquote are so i'm
09:58 - going to go ahead and import all the
09:59 - assets i have right for each channel
10:01 - right i call them avatar one through
10:02 - four and of course once you put it into
10:04 - your folder we gotta import each image
10:06 - so i'm gonna import each image right now
10:08 - okay once that's done each object in
10:10 - this gonna array is gonna represent that
10:11 - channel so that's why they have an id a
10:13 - name and the avatar that corresponds
10:15 - with it so let's go ahead and make four
10:17 - since i have four images all right and
10:18 - i'm gonna go fix up the properties of
10:20 - each all right so for this last one i'm
10:22 - gonna call it build space shout out
10:23 - build space if you're watching this you
10:24 - can name these channels whatever you
10:26 - want guys right if you want to pretend
10:27 - that you're talking to elon musk on
10:28 - discord or pretending that you're
10:30 - selling a bunch of entities go for it
10:31 - it's your project right i encourage you
10:33 - guys to customize this make it your own
10:34 - and show us all right send it over to
10:36 - clever program right so i'm going to
10:37 - name this chill random in general and
10:39 - that should be good for now obviously
10:40 - just fix these avatars right here and
10:42 - let's go we're going to take that array
10:43 - and set it up and initialize our use
10:45 - state so that when you write the word
10:46 - channels after this point it's going to
10:48 - be that array of objects with me so far
10:50 - awesome so what i want to do next is
10:52 - basically map through that array of
10:53 - objects and for each channel i want to
10:55 - create a room avatar component right
10:58 - obviously i don't have the room avatar
11:00 - component yet but let's just go ahead
11:02 - and set up some things first before i
11:04 - make okay for each room avatar i'm gonna
11:06 - be passing down these props right here
11:07 - which is just gonna correspond to you
11:09 - know the object of the channel right i'm
11:11 - gonna be passing down the key the id the
11:12 - avatar and name all right let's go ahead
11:14 - and make that room avatar component now
11:16 - should look a little something like this
11:17 - and of course import that component onto
11:19 - our sidebar js so if you see on my
11:21 - window right here for every single
11:23 - object in my array i'm making a room
11:25 - avatar component and that's why you see
11:27 - room avatar i have a tub avatar avatar
11:29 - on the sidebar right this isn't very
11:30 - pretty right now but let's go ahead and
11:32 - use those props that we're passing down
11:34 - so to do let's go over to my room avatar
11:36 - component also don't forget to make a
11:38 - room avatar css file right and this is
11:41 - the styling that you're going to need
11:42 - from it the wrapper the room avatar
11:44 - before the room avatar after right when
11:46 - we hover over it the image itself when
11:48 - you hover over the image all these
11:49 - things all right feel free to pause the
11:50 - video and make sure you have all of that
11:52 - css if you want to look just like ours
11:54 - and from there once we create the room
11:55 - avatar css module i'm going to go back
11:57 - into avatar and in the parenthesis let's
11:59 - go ahead and destructure those props if
12:01 - you look these are the props that i have
12:02 - here and those are the keys that i want
12:04 - to be destructuring from the props
12:05 - object so let's get the id avatar the
12:07 - name boom so now when i'm in room avatar
12:10 - i can reference that and get each value
12:12 - of the object that i want right and i'm
12:13 - going to be adding the div wrapper that
12:15 - we need right here if you notice there's
12:16 - on click right here and with the
12:17 - function of change url right we don't
12:20 - have that function just yet but the idea
12:22 - is that if i click on the profile
12:24 - picture of build space right here what's
12:26 - going to happen is that it's going to go
12:28 - and open up the chat that i have with
12:30 - build space right and not only that it's
12:31 - going to change the url up at the top
12:33 - right here to say something along the
12:35 - lines of you know channel slash load
12:36 - space right you're gonna see it in a
12:37 - second but let's just set that up right
12:39 - there right and within this wrapper div
12:41 - right and you're gonna see it just in
12:42 - seconds so real quick i'm just gonna
12:43 - make the change url function up at the
12:45 - top right here on line six and then from
12:47 - there within the wrapper div let's put
12:49 - all the necessary things we need i'm
12:50 - gonna place those props where i want the
12:52 - first thing is going to make a div
12:53 - called room avatar which is going to
12:54 - hold the image of each channel and there
12:57 - we go so once that's done let's go ahead
12:58 - and work on the change url function and
13:00 - remember the use router hook that i
13:02 - talked about earlier let's go ahead and
13:03 - utilize it right so if you look at the
13:05 - top i am importing use router here as
13:06 - well and from here you want to do
13:08 - router.push right and something along
13:10 - the lines of this right what this does
13:11 - essentially is that like i said when i
13:13 - click we are going to direct the user
13:15 - right with the id the channel id that it
13:18 - has along with name right of the channel
13:20 - right so if you take a look save this
13:22 - hop on back to my web page and you're
13:24 - going to see a bunch of images now all
13:26 - right so let me refresh this real quick
13:27 - so once i load up my page now you can
13:29 - see all the images are loaded up on the
13:30 - sidebar it's looking a lot more closer
13:32 - to this score isn't this exciting right
13:33 - so like i said if i click one of these
13:35 - right for example chill alright it's the
13:37 - channel it has the id and the name right
13:39 - i'm doing this by passing down each prop
13:41 - and making each of these room avatar
13:43 - components diamond and over here this is
13:45 - the example with build space it says
13:46 - channel 4 name build space on my url
13:48 - nice
13:49 - after the sidebar let's work on the next
13:51 - component guys so the next component i
13:53 - want to make is the conversation list
13:55 - component so i'm going to write
13:57 - conversation list js okay after that's
13:59 - done let's go ahead and make a
14:01 - conversation list css module okay and in
14:04 - the conversation list css module you're
14:06 - just going to copy all the css that i
14:08 - have here this is going to have the
14:09 - styling for each conversation list right
14:11 - all the elements within again feel free
14:13 - to pause the video if you want to have
14:14 - the same styling as we do okay once you
14:16 - guys set up the conversation let's hop
14:17 - back over to the component itself and
14:19 - let's get ready the imports that we are
14:21 - going to use all right like i said we're
14:23 - going to be adding the imports that
14:25 - we're going to need later just like
14:26 - before right which is going to be the
14:27 - styles and any hooks i'm going to use
14:29 - and then the next thing i'm going to do
14:30 - is import all the assets that i'm going
14:32 - to use as well all right and the assets
14:33 - i'm going to use are these icons over
14:35 - here so i'm going to make an icons
14:36 - folder and and put all those icons in
14:38 - that folder next thing i want to do is
14:40 - import those assets into our component
14:42 - and then i'm going to hop over into line
14:44 - eight and add all the necessary dibs
14:46 - that i need right so as you can see i'm
14:48 - gonna add a conversations div and within
14:50 - that div i'm gonna make conversations
14:52 - list top okay once that's done go back
14:54 - into your index.js and let's just
14:55 - quickly import that conversation list
14:57 - and bam right you can see that i have an
14:59 - input right here that says a placeholder
15:01 - that says find or start a conversation
15:03 - and that's going to show up right here
15:05 - to the right of your sidebar right there
15:06 - it looks just like discord they have
15:08 - this little like another sidebar
15:10 - technically with that's going to have
15:11 - the friends the nitro and it's going to
15:12 - hold all your direct messages all right
15:14 - that's what we're going to be doing
15:15 - right now let's make a conversations
15:17 - container and this container is going to
15:18 - hold all those assets that are talking
15:20 - about right so it's going to be that
15:22 - friends image svg and also that nistro
15:25 - svg so i'm going to insert those images
15:26 - right here and i'm going to set up my
15:28 - image with these properties that i have
15:29 - here give it this height and width there
15:31 - you go all right when i hit save you
15:32 - look over here i'm just going to draw it
15:34 - over here you can see those two images
15:35 - there's the right here and there's the
15:36 - natural one right over here boom so one
15:38 - thing that's left now is to add a little
15:40 - text that mentions those things friends
15:42 - nitro okay after that let's go ahead and
15:44 - work on the direct messages section so
15:46 - to do that let's make a div let's write
15:48 - direct messages and the idea with this
15:49 - div it's going to contain any of the
15:51 - direct messages that i have ongoing
15:53 - right so the idea here is remember the
15:55 - dummies channel the array of objects
15:57 - that i made we're going to do something
15:58 - super similar right you can essentially
16:00 - just copy it over right and instead of
16:02 - channels right i'm going to call this
16:03 - dms dummy dms right and instead of room
16:06 - ids right since this is dms you can just
16:08 - leave it this as id and obviously we're
16:10 - not going to change the room name to
16:11 - just name because this is a personal
16:13 - message between two users right and go
16:15 - ahead and change the actual values of
16:17 - those names so i'm gonna put my team we
16:18 - got kazi we got david and of course we
16:21 - got frankie so shout out to team cp okay
16:23 - cool so once you guys set up that object
16:24 - i'm gonna go ahead and come down here
16:26 - and i'm gonna map through that array of
16:28 - objects once again all right and the
16:29 - idea here is for for every dm we're
16:32 - gonna make a dm card component oh and
16:34 - really quickly one thing i forgot to do
16:35 - was hdm is gonna have an avatar
16:37 - associated with it so let's just use the
16:39 - same avatar as imported from the sidebar
16:41 - and i'm just gonna paste them onto here
16:43 - nice okay cool so now the images should
16:45 - work one more thing i have to do is set
16:47 - up my use state hook right and again
16:49 - with the u state hook go ahead and
16:51 - inside the parenthesis of the use state
16:53 - put dummy dms okay once you do that
16:55 - every time i see the word dms that's
16:57 - gonna dms that's gonna hold the array of
16:59 - objects so now we can actually map
17:01 - through that array since it's an array
17:02 - method and from there you can set it up
17:04 - just like so so for every dm like i said
17:06 - before let's make adm which i'm going to
17:09 - set up real quick right here and bam
17:11 - there we go all right and for every dm
17:12 - card let's put in these props all right
17:15 - it's going to have passed out name the
17:16 - id of the avatar and one thing i want to
17:18 - point out real quick is that each time
17:20 - you map through an array of objects be
17:22 - sure to include this index parameter
17:24 - that i have right and that's going to be
17:26 - the key right in react each of these
17:28 - elements here need a key to go along
17:30 - with it so that's going to help react
17:32 - render all those components all right so
17:33 - i'm just going to set it up key equals
17:35 - index okay cool now that's done let's
17:36 - just set up the styling for our dm card
17:38 - and it should look something like this
17:40 - all right it's going to be the class dm
17:42 - card status when you nice some some nice
17:44 - styling to when you hover over it the
17:46 - container write some opacity for the
17:48 - name a status all that nice stuff go
17:50 - ahead and copy it like so all right now
17:52 - that we got this down let's go ahead and
17:53 - set up the divs that we need for the dm
17:54 - card cool so this dm card it's gonna
17:56 - have the same thing as before when we
17:58 - click it direct us to a unique dynamic
18:01 - page route with you know the user's id
18:03 - and the name in the url basically the
18:05 - same thing as the sidebar it's going to
18:07 - be a lot of the same code guys so i'm
18:08 - just going to do that right now don't
18:09 - forget to put any of the inputs you need
18:11 - like the styles and of course
18:12 - destructure the props that you passed
18:14 - down from dm card so what that looks
18:16 - like is name status avatar and id
18:18 - awesome all right the image component
18:20 - right here is just gonna take all the
18:22 - destructure props that i need right the
18:24 - height 48 and the width of 40. cool and
18:26 - if i save you can see it right there on
18:27 - direct messages right so the next thing
18:29 - i need to do is we need the names to
18:31 - associate with these direct messages so
18:33 - i'm just gonna put another div or the
18:34 - status and another p tag right here to
18:37 - put the names so there it is there's my
18:38 - team they're right there in my direct
18:40 - messages i can send them a message right
18:41 - now if i wanted to all right cool let's
18:42 - move forward to the next thing okay guys
18:44 - before i move on i want to just fix up a
18:46 - couple of styling things right here so
18:48 - you see over here in my conversation
18:50 - list i have some css variables all right
18:52 - i kind of want to change them to the
18:54 - color right here so what i want to do is
18:55 - really quickly fix up some things so i
18:57 - want to head over to conversation list
18:58 - css module and just change the
19:00 - background color of the conversations
19:02 - div and the conversation list top to
19:04 - this one right here awesome next thing i
19:05 - want to do is i want to grab the cover
19:08 - color from here and just copy that and
19:10 - change that variable of the elements
19:11 - container hover to this one beautiful
19:13 - next thing you want to do is grab this
19:15 - color this nice deep gray and change the
19:18 - background of the body to that deep
19:20 - right and the font size the ones over
19:22 - here basically i'm going to be copying a
19:23 - lot of things from the root and changing
19:25 - a lot of the css variables back to this
19:27 - awesome so that looks like it's done no
19:30 - more css variables right there and we
19:32 - should be good to go so let's move on to
19:33 - the next part cool so the next thing we
19:35 - want to do is create this final
19:37 - component in index right i have it set
19:40 - up before it was the chat view so let's
19:41 - write chat view dot js set it up real
19:44 - quick like so i'm gonna go ahead and
19:45 - create a chat view css file and i'm just
19:48 - gonna include these styles right here i
19:50 - just chat view and message container
19:52 - cool now that i have those styles we can
19:54 - go back into the chat view component and
19:56 - actually add those divs okay awesome one
19:58 - thing i want to do is set up another
19:59 - component here actually called chat
20:01 - header right if you look at the discord
20:03 - app that i have right there's going to
20:05 - be well there should be a header up here
20:07 - that's going to hold all of those other
20:09 - icons that we added to our assets folder
20:11 - as well as the connect our wallet which
20:14 - is essentially going to be how we're
20:15 - going to authenticate our user so i'm
20:17 - going to quickly import all those assets
20:19 - and icons into my chat header and then
20:22 - i'm just going to include the chat
20:23 - header css file now for the chat header
20:25 - there's a couple things i want to put
20:26 - here this is going to be a bunch of
20:28 - styling like so awesome right we have
20:30 - the header itself the room name
20:32 - container the styling of the svg's title
20:35 - the button styling and much more so be
20:37 - sure to take a look at all of this pause
20:39 - the video if you need to let's just jump
20:40 - right into the next part okay so of
20:42 - course we made the chat header component
20:43 - but let's also not forget to import this
20:46 - chat header right into chat view back
20:47 - over to chat header component and i'm
20:49 - just going to add the room name div
20:51 - right in here it's going to include an
20:53 - image along with this h3 that's going to
20:56 - tell us the room name right for now
20:59 - we're going to make it static i'm just
21:00 - going to call it room name eventually
21:02 - we'll make this a little bit more
21:02 - dynamic to the user that we clicked look
21:05 - at that there's our room name like i
21:06 - said before it's going to be static for
21:08 - now but depending on who i click that
21:09 - room name should change to the person i
21:11 - click so if i click go ahead and click
21:13 - david right that room name if i point an
21:15 - error right here should now be david but
21:17 - for now let's leave it stacked and let's
21:18 - work on the rest of this component right
21:20 - so right now you guys remember we're
21:22 - going to be using metamask to connect
21:24 - our wallet to this discord clone right
21:27 - that's essentially what we're going to
21:28 - use to authenticate the user make this
21:30 - feel really web point web 3.0 first
21:32 - thing we want to do is set up the div 4
21:34 - the wallet button create the you know
21:36 - the button styling itself right and when
21:38 - i click it it should run a connect
21:40 - wallet function which i'll set up much
21:41 - later and if you see what i wrote here i
21:43 - wrote khan's dummy account as well as i
21:46 - imported the eth logo right so the idea
21:49 - here is when i make this variable called
21:51 - dummy account the equivalent of me
21:52 - logging in and that's my wall address
21:54 - for now we have a static one right and
21:55 - what i want to do in this line right
21:58 - here is essentially set up some
21:59 - conditional rendering that if i have an
22:02 - account right then we can load and
22:04 - change the html to show wallet address
22:07 - with that logo that i imported right and
22:09 - it should look a little something like
22:11 - this all right but real quick let me
22:12 - just fix up the name of dummy account
22:15 - back into current account to keep it the
22:16 - same const current account change both
22:19 - of these right here and now take a look
22:20 - at that wow all right so whenever i do
22:22 - connect my wallet the html and css will
22:24 - change to this specific thing right here
22:27 - so it looks like we log it's looking
22:28 - good so far so what i'm going to do is
22:29 - add the rest of the icons by putting it
22:32 - into images don't forget to also input
22:34 - this nice search bar right right next to
22:36 - the add friend and dm button there will
22:39 - be this input for the search bar and
22:41 - what i'm gonna do is hop over to globals
22:43 - and include this css for the so once
22:46 - that's done i hit save and look at it
22:47 - it's gonna go from that white to this
22:50 - color right here nice are you guys
22:52 - excited because this is essentially the
22:53 - front end of the discord clone let's go
22:55 - ahead and work on a couple more
22:56 - functionality with that done i'm gonna
22:58 - go ahead and go to our chat view and
23:00 - remember the messages container that we
23:02 - made we're gonna add stuff to our
23:04 - messages container div right what i'm
23:06 - gonna add there is this component i'm
23:07 - gonna make i'm gonna call it message
23:09 - form okay after creating that message
23:11 - form i'm gonna go make the message form
23:13 - css and add the following styles all of
23:16 - these styles here are divs that i'm
23:18 - gonna be making later inside my message
23:20 - form but for now i'm just gonna import
23:22 - that css file moving on in the message
23:24 - form div here line five let's create the
23:27 - form now so i'm just gonna be writing
23:29 - form here and the idea with this
23:30 - component this is where on the discord
23:32 - app where you see that little box at the
23:34 - bottom where you're going to type in all
23:35 - your beautiful messages to your friends
23:38 - right and obviously around that form is
23:40 - going to be a bunch of different icons
23:42 - which i'm going to be setting up okay
23:43 - and i'm going to call that for in that
23:45 - form i'm going to give it a class name
23:46 - of chat input container cool let's
23:49 - import the rest of the icons that i need
23:51 - as well as the image from next where i
23:53 - can place the image from there i'm going
23:55 - to make another div within the form
23:56 - called chat input and then within that
23:58 - div let's make the svg container this is
24:00 - where all those images are going to go
24:02 - inside okay and in that container what
24:04 - i'm going to do is create that input box
24:06 - and i'm going to call that
24:08 - styles.chat input all right after adding
24:10 - the input tag i'm going to go ahead and
24:12 - add a bunch of divs with all the rest of
24:14 - the icons all in svg containers right we
24:18 - have like the gif the gif icon the
24:20 - sticker icon and the smiley icon all
24:22 - right here all right and if i hit save
24:23 - it looks like i have an error i forgot
24:25 - when i imported the styles i called it
24:26 - message from this just should be message
24:29 - form bam so now if i save this this
24:30 - should work and let me just full screen
24:32 - this wow look at that it's the exact
24:34 - chat box from and you're free to type
24:36 - stuff but at the moment we can't still
24:37 - send any messages to anyone all right so
24:40 - let's move on cool so once you guys made
24:41 - the message form the next part is we
24:44 - want to be to do some user
24:45 - authentication using metamask right so
24:48 - right now we want to do user
24:49 - authentication using metamask so in
24:51 - order to do that we need to use context
24:53 - right what context does it essentially
24:55 - lets us keep track of state throughout
24:58 - our app right what this does is let's
25:00 - say oh you're not logged in and you're
25:02 - trying to get to a certain channel or
25:04 - chat you won't be able to access it
25:06 - because it's gonna check if you're
25:07 - logged in all right and if you're not
25:08 - logged in i'm gonna have to kick you out
25:09 - i'm sorry but that's what's gonna have
25:11 - to happen and that's just best practice
25:13 - so let's go ahead and in my client
25:14 - folder let's set up a context folder
25:17 - okay so in that context folder let's
25:19 - make a context.js after making the
25:21 - context.js i'm just gonna import all the
25:23 - necessary hooks that i'm going to use
25:25 - for react okay and that and those hooks
25:27 - include create context use state use
25:29 - effect and use reducer right so if you
25:32 - didn't know use reducer stores and
25:34 - updates the state kind of like you state
25:36 - does except that the parameters it takes
25:38 - in is a reducer function as well as the
25:40 - initial all right this is what's going
25:41 - to help us update our context another
25:44 - thing i'm going to do is import our use
25:46 - router as well as importing gun js all
25:49 - right so gun js is not installed
25:51 - currently into our next app so what i'm
25:53 - going to do is hop over to my terminal
25:55 - and just add that with yarn so i'm gonna
25:56 - do yarn add gun and there we go all
25:59 - right so now that that's installed we
26:00 - can import gun safely knowing that we
26:02 - have it and it's all good okay cool so
26:04 - once you import all of those things i'm
26:06 - gonna go ahead and create our discord
26:09 - contacts right so i'm going to say
26:10 - export cons discord context equals
26:13 - create context so that's our discord
26:15 - context and remember that heroku url i
26:17 - told you guys to save well we're going
26:19 - to use it now so paste it and put it
26:20 - into a string and i'm going to just wrap
26:22 - it into an array just like so and then
26:24 - let's put parentheses around that as
26:25 - well right the idea here is i'm going to
26:27 - make a variable called gun so constant
26:30 - equals gun parentheses and it's the url
26:33 - that i'm passing right so it looks it
26:34 - should look something like this and you
26:36 - should be good to go after that i'm
26:37 - going to be setting up the reducer just
26:38 - like this and one thing to note about
26:40 - the reducer is that it's going to take
26:42 - in an initial state and a couple of
26:43 - actions so if you look here in that
26:45 - first if statement i have an action in
26:48 - my try block called clear and if you
26:49 - look at the return basically clearing
26:51 - out my messages making sure that the
26:53 - messages array our state that'll keep
26:55 - track of is back to empty all right if
26:56 - you look at the next if statement if the
26:58 - action that i'm trying to execute is add
27:00 - right let's return the messages whatever
27:03 - we currently have and add that new
27:05 - message onto that array right so what
27:07 - that should look like visually is if you
27:09 - see on my discord app if someone says
27:11 - hey what's up and then i say not much
27:12 - how's it going right that's me adding a
27:15 - message to the messages already alright
27:16 - and that's what that action is going to
27:18 - do right there and obviously this catch
27:19 - block right here is if there's any at
27:21 - all errors right it's just going to
27:22 - console log the error for me right so
27:24 - that's me defining the actions right
27:26 - over my reduce okay next i'm going to
27:28 - set up the discord provider and it's
27:30 - going to take in children right it's
27:32 - also going to return the discord context
27:34 - provider and put the children in between
27:36 - that all right so i'm going to write
27:37 - children like this and cool and if you
27:39 - notice the value over here is empty
27:41 - we're going to leave that empty for now
27:43 - but just know that whatever i pass into
27:44 - value it's going to be what i have
27:47 - access to globally right for example it
27:49 - would be the room name the current user
27:51 - right any functions that i want access
27:53 - to right that's the whole point of us
27:55 - using context so that i can access state
27:57 - anywhere in my app because it's global
28:00 - so for now let's see that empty and
28:01 - let's move on all right so inside just
28:03 - discord provider at the top here i'm
28:05 - just going to add a bunch of state like
28:07 - this all right and what you'll notice is
28:09 - these are all the things that i want to
28:10 - keep track of using state so you'll see
28:11 - like current account the room name that
28:14 - we're in the message text itself all
28:16 - right and obviously the current user
28:18 - okay once that's done i'm gonna go back
28:20 - down here above the return and i'm just
28:21 - gonna make a check if wallet is
28:23 - connected this function is gonna be
28:25 - asynchronous and all it does is
28:27 - literally checks if our wallet is
28:28 - connected all right right you can verify
28:30 - it and set the current account to that
28:32 - and if it's not you know make sure it's
28:34 - an error right maybe put like please
28:35 - sign in or anything something like that
28:37 - but for now we'll just console log error
28:38 - all right so now i'm going to finally
28:39 - use that use effect hook and essentially
28:41 - what this use effect hook is doing is
28:43 - that whenever that component loads right
28:45 - it's going to immediately run check if
28:47 - wallet is connected right what that
28:48 - means is if i go to a different page
28:50 - we're going to check if the wallet is
28:51 - connected if i go to this page i want to
28:53 - check if the wallet is connected that
28:54 - way is if you log out and then you go
28:56 - into a different page you shouldn't see
28:58 - the stuff if as if you were logged in
28:59 - all right we're going to constantly
29:00 - check and validate the wallet right so
29:02 - i'm going to make another function here
29:04 - and it's just going to be called create
29:06 - user account this also is going to be an
29:08 - asynchronous function and it's just
29:09 - going to do exactly what it says if we
29:11 - do not have an account right this should
29:13 - help create the account and store it
29:15 - into sandy and you're gonna notice
29:17 - something here too within line 42 you'll
29:19 - see create user account and then we're
29:20 - putting in the wallet address that's
29:22 - what's running right that's not a hook
29:23 - that's just the check create user
29:25 - account that i just made right because
29:27 - if the wallet is correct is connected
29:29 - you want to set that current account and
29:31 - if it doesn't have an account already
29:32 - we're going to create that user account
29:33 - so i just pasted this in this is the
29:36 - connect wallet function right it's also
29:38 - asynchronous and essentially this is me
29:41 - if i click that button this is what's
29:42 - going to help me connect that wallet all
29:44 - right so in the try block it's going to
29:46 - get the address and then if that addre
29:49 - if that address array is the length of
29:50 - it is greater than zero we're just going
29:52 - to set the current user to the address
29:54 - that i picked awesome so that should be
29:56 - it for now all right we'll get back to
29:57 - this i want to quickly go over to my api
29:59 - folder right here and we don't need this
30:02 - hello js that i have here and boom so
30:04 - once i delete that let's make a new file
30:05 - in the api folder and let's call this
30:07 - the create user.js file right what we
30:10 - want to do here is basically talk to
30:12 - sandy like you know if i create a user
30:14 - right i want to be able to add that user
30:17 - document into sanity right with all the
30:19 - information passed in right so again we
30:21 - also have to set up sanity into our
30:23 - client so on my terminal i'm just gonna
30:25 - add at yarn add at sanity client amazing
30:28 - cool so once that's installed hopping
30:30 - over back to create user.js what we want
30:32 - to do in this create user.js file is
30:34 - that when i create a user by connecting
30:36 - my wallet for the first time i want to
30:38 - make sure that a user doc is created
30:40 - right and that document that i created
30:42 - is just added into sanity all right the
30:44 - cool thing about sand is once we create
30:45 - this user doc if we were to run this
30:47 - function again it's not going to make a
30:48 - new one because it automatically checks
30:50 - if it's already exist right but first we
30:51 - have to set it up so what i'm going to
30:53 - do is create this anonymous function set
30:55 - up the user address like this and over
30:57 - here i'm going to write cons userdoc
30:59 - equals this object alright so this is me
31:01 - in line 4 that's basically me creating
31:03 - the user document object right and
31:05 - passing in the user address as the id
31:08 - now i'm just gonna make a lib folder in
31:09 - this folder i'm gonna put client.js and
31:12 - this is where my sanity client is
31:13 - essentially going to live and in my
31:15 - client.js i'm gonna import the sanity
31:17 - client that we and set up the object
31:19 - like so one thing that to note here is
31:21 - that we're going to need our project id
31:23 - and as well as an access token right and
31:25 - it's best practice to not just put your
31:28 - access tokens and ids or anything
31:30 - sensitive information that's unique to
31:31 - you onto the javascript folder itself
31:34 - what you're going to need to do is make
31:35 - an env file so let's go ahead and make
31:37 - that our env file alright so once i
31:39 - import sanity client i'm going to hop
31:41 - over to center.io so log into sandy
31:43 - right here and you're going to click on
31:45 - the project we created and hop on over
31:47 - to project id do you see this right here
31:48 - it says project id copy the clipboard
31:51 - and in our env file i'm just gonna type
31:53 - out sanity underscore project id
31:55 - underscore equals the project id that i
31:58 - write so let's go ahead and get our api
32:00 - token go ahead and check editor and for
32:02 - name we can just put client go ahead and
32:04 - hit save alright as you save it's going
32:05 - to generate this token here this is what
32:07 - you want to add to your env file as well
32:10 - so what i'm going to call this one is
32:11 - sanity token and set it equal to the
32:14 - token itself awesome one last thing i
32:16 - want to do real quick is add the course
32:18 - origin right basically this everything
32:21 - here are hosts that can connect to the
32:22 - project api so that's going to include
32:25 - versailles right so i'm going to write
32:26 - for sell that app like this and one more
32:29 - thing is we should also add a local host
32:31 - here localhost should also be able to
32:33 - connect to our project api let's go so
32:36 - now that set it up it's looking good so
32:37 - far so hopping over this okay so now
32:40 - that we stored everything we need to in
32:42 - our env file let's hop over back into
32:44 - our sanity client object and let's call
32:47 - the things we need so if you look over
32:48 - here i just pasted it in right we're
32:50 - gonna need in our sanity client object
32:52 - we need to have a key or project id and
32:54 - here this process that enb that's where
32:56 - we're just going to call anything i need
32:58 - so what i'm calling from the env file is
32:59 - the right if you look down below for the
33:01 - key of token that's where i'm going to
33:02 - call it the token that i need all right
33:04 - so i'm just going to set that up now
33:05 - back to our create u.js let's import
33:07 - that very same client at the top
33:09 - beautiful so import client from the
33:11 - library all right so within our
33:13 - anonymous function underneath the user
33:15 - doc let's add a nice catch block and
33:17 - basically let's wait and see and use
33:19 - that client so if the user does not
33:22 - exist we're going to create the user doc
33:24 - or what essentially whatever we passed
33:26 - in and what we're passing in as you can
33:27 - see is user doc all right and then we're
33:29 - going to just send the status of
33:30 - successful and of course if there's an
33:32 - error for any sort we're just going to
33:34 - console log the error and just send that
33:36 - error as well so this is what i mean all
33:37 - right if the user doesn't exist let's
33:39 - create the user doc if not carry on okay
33:41 - and that's for creating a user the other
33:43 - schema if you remember the other
33:45 - document that we're probably gonna have
33:46 - to create is the conversation one right
33:49 - and there's a little note here about
33:51 - whether the conversation is a dm or if
33:53 - it's like a group chat or something so
33:54 - in our api folder i'm gonna go ahead and
33:56 - create a new file i'm gonna call that
33:58 - the create dm dot js okay so just like
34:02 - with the create user here we're gonna be
34:05 - creating the conversation document right
34:07 - so again we need to import the let's go
34:09 - ahead and make this anonymous anonymous
34:11 - function grabbing the user address and
34:13 - then in line six i'm going to set up our
34:15 - conversation document that i'm creating
34:17 - right with the type obviously going to
34:18 - be conversations the id is the user
34:20 - address that i got awesome and there we
34:23 - go cool if the conversation doc doesn't
34:25 - already exist it's going to create it if
34:26 - not carry on cool so we created the dmjs
34:30 - so here i'm going to be setting up a
34:31 - query i'm going to import the client at
34:33 - the top here and my idea with this is
34:35 - that i want to query for all
34:36 - conversations that aren't dm so what
34:38 - does that mean it's going to mean any
34:40 - channels that are like group messages
34:42 - any let's call like servers on discord
34:44 - that we're going to get and it's going
34:46 - to fetch all of those conversations
34:47 - associated with that user and so that's
34:49 - why inside this async function if it's
34:51 - successful if the promise is successful
34:54 - we're going to fetch all of those
34:55 - conversations that aren't dms right and
34:58 - when we query them we'll also get the
34:59 - room id the room name and their avatar
35:02 - okay after that i'm also going to get dm
35:04 - so i'm going to create a file called get
35:06 - dms.js and this is going to be different
35:08 - than channels because i want in this one
35:10 - i'm going to be querying for all the
35:12 - conversations that are dms right these
35:14 - are the personal messages right my
35:15 - direct messages with cards and my direct
35:17 - messages with david right so that's what
35:19 - i'm going to set up here and again set
35:21 - up that same anonymous asynchronous
35:23 - function all right it's going to have
35:24 - the same try catch block right if
35:26 - successful get me all those direct
35:28 - messages and if not send me an error one
35:31 - more thing i want to add to this file
35:33 - because one thing to note is that if
35:34 - it's a conversation one thing to note
35:36 - that if it's a channel that i clicked
35:38 - into the properties of that will be
35:40 - different if it's a channel the
35:41 - properties of that document our avatar
35:43 - name and id right if it's just if it's
35:46 - just a conversation like a personal
35:48 - message between users right i don't want
35:50 - to have the properties of avatar name
35:52 - and id what i'm going to do in line 15
35:54 - is get that response map through that
35:56 - response and for every item in that
35:57 - response let's convert avatar to just
36:00 - image name to name and id to wallet
36:04 - address and specifically i think i mean
36:06 - room name to name okay and once that's
36:08 - successful we'll just send a status of
36:10 - 200 and that's the only difference with
36:12 - that and we should be good to go cool
36:13 - one of the last things i'm going to do
36:14 - is just make another file called get
36:17 - current user this one is going to get
36:19 - the current user from sanity and i'm
36:21 - going to set it up just like how we did
36:23 - with get channels all right so that
36:24 - means importing the client once again
36:26 - making this asynchronous function and
36:28 - inside the in synchronous function
36:30 - setting up a query that's gonna look for
36:32 - users right and the wallet address
36:35 - awesome so that's it so there we go i
36:37 - set up that don't forget to add the
36:39 - catch block to fetch that user if it's
36:41 - and also the catch with them okay so
36:44 - looks like that's all the functions we
36:45 - have for sanity now that that's set up
36:47 - we can finally get back to our
36:48 - context.js and if you're still watching
36:50 - this video go ahead and drop a like down
36:52 - below right you made it this far so i'm
36:54 - gonna be hopping over back to context.js
36:55 - and let's go finish out our create user
36:58 - function so in my create user function
37:00 - if i'm not logged in i'm just gonna i'm
37:02 - gonna set the edge case right there if
37:04 - that doesn't exist we're just gonna
37:05 - return and after that i'm gonna go set
37:07 - up this try catch right and if the
37:09 - promise is successful right we're gonna
37:11 - set up the user address to be the user
37:13 - address that we have okay and here i'm
37:15 - actually gonna have another try catch
37:17 - within the first all right this time if
37:19 - you look i'm gonna be making a fetch
37:21 - call to where right i'm going to be
37:22 - making a fetch call to the next public
37:25 - api url right and that's going to be
37:27 - coming from my env file which isn't
37:29 - really set up yet so let's just do that
37:30 - so in my emv file i'm going to write
37:32 - next next public api url and let's just
37:34 - set this to localhost 3000
37:37 - api awesome right so what essentially
37:39 - this is doing is letting us create the
37:42 - user right and posting it right posting
37:44 - it to where to sanity right we set up
37:46 - that function earlier to create the user
37:49 - under our api folder once we create a
37:51 - user account what this is going to do is
37:52 - post that user document into sanity as
37:54 - well all right and then again right
37:56 - underneath that nested try i'm going to
37:57 - add another child but this is also going
37:59 - to post all of the dm so it's going to
38:02 - create the dm document for us and that's
38:04 - gonna go into sanity as well okay just
38:06 - so to quickly recap so now that that's
38:08 - all set up when we log into metamask for
38:10 - the first time a user is created right
38:13 - once that user is created it's gonna
38:14 - create a document with all the
38:16 - information passed in it's gonna post
38:18 - that document onto our sanity database
38:20 - okay and the next thing we have to do is
38:21 - remember that value remember in our
38:23 - discord context provider where i said
38:25 - we're gonna leave the value empty for
38:26 - now we're gonna add stuff to it i'm
38:28 - gonna add all these values into here
38:30 - right we have the current account the
38:31 - room name the message text the state the
38:34 - gun the connect wallet user and the
38:36 - current user many more everything i put
38:38 - here is going to be accessible to me
38:40 - globally anywhere in my app all right so
38:43 - let's take advantage of that that's
38:44 - exactly why we use context here so let's
38:46 - go ahead and do that so let's get back
38:47 - to our chat header right and above our
38:49 - chat header let's import anything we
38:51 - need to use context which is just going
38:53 - to be import use context and actually
38:56 - our discord context itself cool so let's
38:58 - utilize use contacts in line 17 and i'm
39:01 - just going to take these states that i
39:03 - want to keep track of right now which is
39:04 - just the room name the current account
39:06 - and the connect wallet function okay i'm
39:09 - going to pass in the room name so in
39:10 - line 22. and you're going to see
39:11 - something here connected wallet is
39:13 - actually great even though it says over
39:14 - here if i highlight styles that
39:15 - connected wallet because that's because
39:16 - it's a different thing right the styles
39:18 - that connect while it or styles that
39:20 - connected wallet is just that is what it
39:22 - is it's just a css class name right the
39:25 - connect wallet that i'm getting from use
39:26 - context this is the state that i passed
39:28 - in is the function that's going to
39:29 - actually connect my wallet to the
39:31 - account so what i'm going to do is in
39:33 - that same div let's add an on click
39:35 - right that's going to run the connect
39:37 - wallet when i click this button all
39:39 - right so let's demo that right now of
39:40 - course it doesn't work the first time
39:42 - all right we got an error of cannot
39:43 - destructure property room name and let's
39:46 - take a look oh i see okay i'm just
39:47 - taking a look at context my room name is
39:50 - set up over there okay i think one thing
39:52 - i need to do is go to your underscore
39:54 - app.js and let's just wrap the main
39:57 - component around with our discord
40:00 - provider all right so i'm going to
40:01 - import that discord provider and import
40:03 - use router like okay i'm just going to
40:04 - clean this up a bit and there we go so
40:06 - now if i hit save let's take a look now
40:08 - okay now just says initial state is not
40:10 - defined and if i look at the error there
40:13 - oh my bad guys let me just insert the
40:15 - initial state so i forgot in my
40:16 - context.js right we also have to define
40:18 - the initial state which was i had this
40:20 - right it's that messages array so up
40:22 - over here i'm just going to say the
40:24 - const initial state equals the object
40:27 - messages and it's just going to be the
40:29 - value of an empty array so now when i
40:30 - save let's go right cool so it's going
40:33 - to prompt me to connect my wallet and go
40:35 - ahead and click it i click next and
40:37 - voila i am logged in right and my wallet
40:40 - address is up there we don't need to use
40:41 - the static dummy address any longer all
40:44 - right cool this is looking good guys i'm
40:46 - excited let's move on now that we set up
40:48 - user authentication all of our contacts
40:50 - we can go ahead and let's just go ahead
40:52 - and get the convo lists from standard
40:54 - right so whenever you log in with your
40:55 - account you should have your own unique
40:57 - conversations going on right your own
40:59 - unique channels your own unique personal
41:00 - messages your own unique yeah right so
41:02 - right now if you look at the app we just
41:04 - have the static ones that we made you
41:05 - know i have my team and my direct
41:07 - messages and just like random stuff here
41:09 - in the channel so let's actually make my
41:11 - dynamic unique conversations list but
41:13 - before we get into that let's just go
41:14 - set up a couple things over here let's
41:16 - finish out the create user account and
41:18 - in the parameters let's just write this
41:19 - user address equals current account
41:21 - awesome and then after we look into our
41:23 - sanity once we finally log in with our
41:25 - wallet you're gonna see something called
41:27 - unnamed as the user document right this
41:29 - unnamed thing here is what we created
41:31 - when we first connected our wallet right
41:33 - over here is the wallet address that i
41:35 - have and again just no profile image set
41:37 - up so we can actually set that up all
41:38 - through sanity which is nice so and here
41:40 - i'm just gonna name this all right i'm
41:41 - impersonating qazi today just like how
41:43 - i'm taking over his youtube channel
41:45 - awesome right there's the profile image
41:46 - it pops up nicely over there so now this
41:49 - user is named quasi with this wallet
41:51 - address and this nice profile picture
41:53 - okay cool let's hop back over to here
41:55 - and in our conversations if you remember
41:57 - we also created a conversations document
42:01 - when we connected our wallet right and
42:03 - for this time this one's going to be
42:04 - called untitled right and in here we
42:06 - don't have any like rooms or
42:08 - conversations associated with the user
42:10 - just yet but we can now set it up right
42:12 - here so here this is also the user
42:13 - reference that i was talking about
42:14 - earlier and that's where we can
42:16 - reference any of the users involved
42:17 - right so right now the only user we have
42:19 - is qazi and that's okay okay hopping
42:21 - back into the code here we're gonna be
42:22 - working on the sidebar so if you
42:24 - remember we have a bunch of dummy
42:26 - channels like so we have the general the
42:28 - random the chill and build space right
42:30 - these are static right this is going to
42:32 - show up regardless of who logs in all
42:34 - right and one of the first things i'm
42:35 - going to do is in the sidebar component
42:37 - itself in here in line 38 i'm going to
42:39 - be making a used effect in that use
42:41 - effect i'm going to set up a try catch
42:43 - block and in that try block i'm going to
42:45 - be making an api call right that's going
42:47 - to get all the channels okay and once i
42:50 - get that response.json data back and i
42:52 - store it in a variable called data here
42:54 - i'm going to set my state and set
42:56 - channels to that array of objects yeah
42:58 - of course i'm going to be making that
43:00 - api call but there's no real
43:01 - conversations going on so once i have my
43:04 - data and i set channels with it there's
43:06 - not going to be any conversations going
43:07 - so let's create them just like we
43:08 - created just like we set up causes let's
43:11 - create a conversation right now i'm
43:13 - going to be calling this one build space
43:15 - okay and the room id i'm going to call
43:17 - it b space and just drag this image i
43:19 - have of their very nice unicorn logo all
43:21 - right once that's done document is
43:22 - published let's also set up another
43:24 - really cool organization let's call them
43:26 - cover programmer and just write cp as
43:28 - the room id and we'll have our cp logo
43:31 - with kazi's beautiful face there it is
43:33 - and of course we don't check that this
43:35 - is a dm because this is a channel all
43:37 - right because remember the way we handle
43:38 - the state it's going to be a little
43:39 - different cool so we're going to get
43:40 - this error real quick because of the
43:43 - invalid source prop let's just take a
43:45 - look in order to fix this area i'm going
43:46 - to go ahead and go to
43:48 - next.config.js just like so add in this
43:52 - images and add this domain here and also
43:54 - of course add in the cd cdn sanity.io
43:57 - all right these are all the things that
43:58 - you need so just copy that like what i
44:00 - have here and i'm just going to restart
44:02 - my server all right now that my server
44:03 - is hey let's go right i can see
44:05 - everything up here as i draw this arrow
44:07 - now i can click on cp the url is still
44:09 - dynamic because i set that up before
44:11 - right and i can also talk to build space
44:13 - right here so what's up build space cool
44:14 - so yeah you can just click around all
44:15 - the css and songs working you can hover
44:17 - over it looks really nice right and now
44:19 - let's head over to our conversations
44:21 - list and i essentially want to do the
44:22 - same thing with our direct messages
44:25 - right so as before we have dummy
44:28 - channels right if i highlight this this
44:30 - is dummy channels we don't need that
44:31 - anymore we're going to be just pulling
44:34 - from our sanity database awesome so i'm
44:36 - just going to erase that you know our
44:37 - use date to an empty array so that even
44:39 - if we don't have anything we are still
44:41 - able to map it we're not going to get
44:42 - any reading map of undefined errors cool
44:45 - so literally just copy paste that same
44:46 - use effect except this time it should be
44:49 - get dms all right and if you're going to
44:51 - see the dms is going to get pulled quasi
44:53 - because that's the only user involved
44:55 - right now awesome so if you ever want to
44:57 - populate your direct messages just
44:59 - create a bunch of users a bunch of user
45:01 - documents with different people and
45:03 - that's what's going to populate in your
45:04 - direct messages so that's how you pull
45:06 - the convo list from sanity don't forget
45:09 - guys this is an amazing sick project
45:12 - feel free to customize it make it feel
45:13 - like your own add the people your
45:15 - favorite people add me add frankie qazi
45:18 - let's go oh and one for one more thing i
45:20 - forgot to do was actually fill in that
45:22 - change url function inside dm card so
45:25 - that when i do click quasi it has that
45:27 - custom url link here with this arrow it
45:29 - says nice so i can click on build space
45:31 - cloud programmer quasi and the url the
45:33 - page itself is gonna change all right so
45:36 - after you're done being able to pull the
45:38 - convo list from sanity let's go dive
45:41 - into our message form and in the message
45:43 - form component i'm gonna import our
45:45 - contacts here so i'm going to import use
45:47 - contacts and import discord contacts as
45:50 - well now i'll actually use that hook
45:52 - here and set it up so in line 12 i'm
45:55 - going to be pulling a bunch of different
45:57 - variables from our discord contacts that
45:59 - being this message placeholder and among
46:02 - other things cool so now that my
46:03 - contacts is set up i'm going to write a
46:05 - function called send message this
46:07 - function is going to run every time i
46:09 - hit enter i should send the message that
46:11 - i typed in so what i want to do is add
46:13 - this event prevent default and if the
46:16 - message text is empty or just return and
46:19 - do nothing okay once that's done go down
46:21 - into the input here and let's add a
46:22 - couple more attributes to this such as
46:25 - giving it a value equal to the message
46:27 - text attribute call disabled and set it
46:29 - to current account.name and this on
46:32 - change right here so that every time i
46:34 - make a change to the input we're going
46:35 - to be updating our set message text
46:38 - state to be what i typed and of course
46:40 - we'll have the placeholder cool so go
46:42 - back to your send message function and
46:44 - here i'm going to make a variable called
46:46 - messagesref all this does is gets a
46:48 - reference to the room name using gun.js
46:52 - right and room name being the
46:53 - conversation that i clicked okay so next
46:56 - i'm gonna make an object called new
46:57 - message and that new message object is
46:59 - gonna have a couple things like sender
47:01 - which is gonna be set to the current
47:02 - user.name avatar which is gonna have the
47:05 - avatar of the current user and of course
47:07 - if if there is no avatar we're just
47:09 - going to set it to this random one here
47:10 - okay the most important thing that we
47:12 - need from this new message is actually
47:14 - in the content key we want the message
47:16 - text right and we want to use dot trim
47:18 - because we want to remove the white
47:19 - spaces at the beginning and end of it so
47:21 - we can clean it up a bit and just some
47:23 - bonus keys right here for created that
47:25 - which is going to keep track of when the
47:27 - message was created cool okay moving
47:30 - into context.js what i want to do is
47:32 - just add another use effect into my
47:34 - context.js file so in this use effect if
47:37 - there is no current user we're just
47:39 - going to return if there is i want to do
47:41 - this try catch block right essentially
47:43 - with this try catch block i'm going to
47:45 - be making a fetch call to our api and
47:49 - i'm going to be getting the current
47:50 - user's data right and if it's successful
47:53 - i want to set that into this data
47:55 - variable and once that's successful i'm
47:58 - going to get the response.json and wait
48:01 - for that to return and set it equal to
48:03 - data and update my set current user
48:05 - state with that data of course when i'm
48:08 - working on functions we have to make
48:09 - sure that the function itself is
48:11 - asynchronous so i'm going to add the
48:12 - async at the top of this anonymous
48:15 - function and we should be good to go
48:16 - okay then i'm going to add the current
48:18 - account into the dependency module down
48:20 - here at 47 and if you didn't know if you
48:22 - put anything to this dependency module
48:24 - what it's going to do is if the current
48:26 - account changes we're going to run the
48:28 - use effect all over again right so if
48:30 - for whatever reason the current account
48:31 - changed it's going to run the if
48:33 - statement it's going to check if there
48:34 - is a current account if it's an actual
48:36 - truthy value and if it does exist right
48:38 - we're going to do the try catch block
48:40 - that we have set up here so essentially
48:42 - every time i change the current account
48:44 - it's going to run and get that user data
48:47 - okay i'm going to add another use effect
48:49 - over here and in this use effect i'm
48:50 - going to set it in the dependency to
48:53 - router.query okay and in here i'm going
48:55 - to set up a couple things and set a
48:57 - bunch of state essentially what we want
48:59 - to do this is that we're going to query
49:00 - the room that is clicked and set that as
49:02 - the room name after that we're going to
49:04 - use dispatch to run the clear action
49:08 - which is going to clear the current data
49:10 - and after we clear the current data
49:11 - we'll set the placeholder in the input
49:14 - to say message you know whoever we
49:16 - clicked all right and of course whenever
49:17 - you're switching messages that input box
49:19 - should be empty right if i type hello
49:21 - and i'm messaging clever programmer and
49:23 - i switch to build space that input
49:25 - should be empty it shouldn't be a hello
49:27 - on there still so i'm going to set the
49:29 - message to empty as well cool so over
49:31 - here in line 56 i'm going to be creating
49:33 - another function i want to create a
49:35 - function called get message right it's
49:37 - going to do exactly what it sounds like
49:39 - in the get messages function i'm going
49:41 - to be querying for three things and
49:42 - storing them into the variables right
49:44 - i'm gonna be querying the name and the
49:45 - room id i'm also setting up my messages
49:47 - ref again and getting all the messages
49:50 - in reference to okay after i set up
49:52 - those variables i'm actually gonna map
49:54 - through the messages and i'm going to
49:56 - add all this data onto here all right
49:59 - i'm going to add where the sender is the
50:01 - content the avatar the created and
50:03 - message id okay once i set up those
50:05 - variables i want to go down in line 61
50:07 - and just type in
50:11 - once messagesref.map.once this is going
50:12 - to do is essentially just map through
50:14 - the messages ref and after it maps to
50:16 - the messages ref what i'm going to do is
50:18 - run the dispatch and run the add action
50:22 - which is going to add this data down
50:25 - right it's going to add who the sender
50:27 - is what the message content is set the
50:30 - message avatar that created that and the
50:31 - message id so i'm just going to write
50:33 - test oh look at that all right it
50:35 - actually just that's not supposed to
50:36 - happen right when i wrote test and i
50:38 - press send and actually just reset the
50:40 - page so i'm just going to go ahead and
50:41 - check my message form and this event
50:44 - prevent default should be stopping that
50:47 - refresh oh there we go i forgot there we
50:49 - go so what i need to do to fix that
50:51 - error of sending a message and the whole
50:53 - thing refreshing itself we need to
50:55 - remember to put an on submit onto the
50:57 - form why because whenever you press
50:59 - enter with a form it's actually going to
51:01 - refresh your whole page and when you're
51:02 - using a bunch of state like that you
51:04 - don't necessarily want to do that
51:05 - because it's going to reset so what
51:06 - we're going to do here is set up so that
51:08 - on submit we're going to send the
51:11 - message all right and we're going to be
51:12 - passing in the event right and this is
51:14 - where the event is coming from so now
51:16 - with that set up right when we pass down
51:18 - the event we can the
51:20 - event.preventdefault will actually just
51:22 - prevent the default action which is the
51:23 - refresh of the page so understanding
51:26 - what line 23 does is going to be really
51:28 - helpful okay so i'll hit save and type
51:30 - it in i wrote hi cool so it's not
51:33 - refreshing but i'm also just not seeing
51:35 - any of the messages just yet but it is
51:37 - going somewhere but it does look like
51:38 - it's going somewhere all right so i'm
51:39 - just going to take a look at the chat
51:40 - view component and in the chat view
51:42 - component let's just finally add our
51:44 - context so again use context and discord
51:48 - context and in line eight i'm just going
51:50 - to be grabbing the state from our
51:51 - discord context here after that i'm
51:53 - going to be creating a function called
51:55 - formatted messages right essentially
51:57 - what this function is going to do it's
51:58 - going to get all the messages from the
52:00 - state it's going to filter them right
52:02 - using dot filter and within that filter
52:04 - only bring back the ones that belong and
52:07 - i want to use that filter and based on
52:09 - where they belong let's just return the
52:11 - ones that are in the selected channel
52:13 - right because there's going to be a
52:13 - bunch of messages in our state i only
52:16 - want the messages let's say of build
52:17 - space if i click build space and i only
52:19 - want the messages of the ones from
52:21 - clever programmer if i click clever
52:22 - programmer all right and what that would
52:24 - look like is something like this okay
52:27 - and i'm not realizing we also still need
52:29 - to work on the messages container all
52:32 - right so let's hop over to the chat view
52:34 - you want to start working on this all
52:36 - right so in the messages container here
52:38 - we're going to take the formatted
52:39 - messages array function and then that's
52:41 - going to return and after it returns
52:43 - that array we want to map through it
52:45 - right so it's only going to contain the
52:47 - messages that are relevant to the room
52:50 - okay and for each message in that array
52:52 - i want to create a message card in your
52:55 - components folder let's just create a
52:57 - new file called
52:58 - messagecard.js okay set up the message
53:01 - card component and in the chat view
53:03 - let's just import the component here
53:05 - okay and i'm just gonna paste that
53:06 - message card component like so right and
53:09 - within for every message card component
53:11 - that we make i want to pass down key and
53:14 - the rest of these props like the avatar
53:16 - the sender a timestamp and the content
53:19 - okay next step i'm going to add the
53:22 - message card css and it's going to
53:23 - include the styles right here awesome
53:25 - and moving on for the message card let's
53:27 - add those divs with the styles that we
53:30 - set up so i'm going to make a div called
53:31 - message card and within that message
53:34 - avatar container if you guys could
53:35 - imagine the code really quickly when you
53:37 - write into discord every time you send a
53:39 - message on discord your profile pictures
53:41 - should appear to the left of what you
53:43 - wrote and if someone replies to you
53:44 - their profile picture should appear to
53:46 - the left of what they wrote so this is
53:48 - how the divs are going to be set up in
53:50 - the message card component all right so
53:52 - let's just use the next image and insert
53:55 - that inside the container and up here
53:57 - you'll notice i added the image the next
54:00 - image up here the import statement for
54:02 - the next image and then let's just
54:04 - destructure those props that we passed
54:06 - down so that we can use them and then in
54:08 - between our message avatar container
54:10 - let's actually insert that image and
54:12 - pass in the avatar and the sender has
54:15 - the alt okay cool and then in another
54:17 - div still inside the message card i
54:19 - wanted these this div for the message
54:21 - details right information for the sender
54:24 - small timestamp as well and the most
54:26 - important part the content of the
54:28 - message itself okay one thing i forgot
54:30 - to do is really quick let's go over to
54:32 - our context.js and add the slash gun
54:35 - once the slash gun is there we can go
54:37 - ahead and erase this message ref after
54:39 - you add the slash gun in this use effect
54:42 - here in context.js we also need to be
54:45 - able to get message all right we need to
54:47 - put get messages into that use effect so
54:50 - that it runs when the component mounts
54:52 - awesome right so the only error i'm
54:54 - gonna should see now is that styles is
54:55 - not defined in my message card so if i
54:58 - look at my message card really quickly
55:00 - ah i see we don't we forgot to import
55:02 - the styles for the message card so i'm
55:04 - gonna quickly do that import styles from
55:07 - message card module boom and i hit save
55:10 - and there we go there it is and there we
55:12 - go there's all the messages that i wrote
55:14 - earlier hi hello message hello all of
55:17 - that stuff all right let me just go
55:19 - ahead and full screen this app i'm gonna
55:21 - click on clever programmer what's up cp
55:25 - fam is this working let's go
55:28 - there it is right i can head over to a
55:30 - different conversation i can head over
55:32 - to my direct messages i can say hello
55:35 - decentralized app are you with me right
55:38 - and there it is folks our decentralized
55:40 - chat app our discord clone i hope you
55:43 - guys enjoyed this is sick isn't this
55:46 - awesome cool so hopefully you guys made
55:47 - it to the end of the video and if you
55:49 - did leave a comment down below and send
55:51 - us your projects i'd love to see what
55:53 - you guys made if you were able to make
55:54 - it peace
55:56 - all right and the only thing we have to
55:58 - do now guys is let's deploy this project
56:00 - to first cell so what i'm gonna do right
56:02 - now is go to my terminal and type in
56:03 - vercell and would you look at that it's
56:05 - building it's just a couple more seconds
56:07 - until we have a full project and bam do
56:09 - you see that link to deploy to
56:10 - production let's copy this link and i'm
56:12 - gonna hop back into my window and paste
56:14 - it right here oh let's go
56:16 - good morning test test i'm about to say
56:18 - yo
56:19 - we are live boys and that's it now that
56:22 - you deployed the app this app is online
56:24 - you guys have your very own
56:25 - decentralized discord clone and not only
56:28 - that you guys learned a little bit about
56:29 - gun js as well as practicing using
56:31 - sanity so a lot of valuable skills here
56:33 - i encourage you guys to make it your own
56:35 - you know talk to whoever you want
56:36 - customize it this this is your app so if
56:39 - you guys made it to the end of this
56:40 - video don't forget to drop a like you
56:41 - know what help me save my job if you
56:43 - liked me explaining this code and be
56:44 - sure to watch our twitter clone it's
56:46 - gonna be up here right here watch our
56:47 - twitter clone add this to portfolio i'll
56:49 - see you guys next time
56:51 - [Music]