00:00 - hey guys what is up this is kazy from
00:03 - clever program.com and welcome to
00:06 - another episode of Code Academy this is
00:09 - code academy Python tutorial part 19 all
00:13 - right so let's get
00:16 - started last time we left off on um
00:21 - let's just double check where we left
00:22 - off so we did um it's not cheating
00:25 - debugging you win danger not again so we
00:29 - have made made it all the way to test
00:32 - run we're almost getting completed with
00:35 - our um game okay so let's go here and
00:39 - run it let's see what
00:41 - happens so it says make sure you play it
00:44 - a couple of times and try different
00:46 - kinds of incorrect guesses this is a
00:48 - great time to stop and do some serious
00:52 - debugging so I encourage you guys to try
00:55 - to debug this on your own as well
00:58 - meaning uh run it and try a bunch of
01:00 - different uh inputs and see what it what
01:02 - it gives you okay in the next step we'll
01:05 - move on and look at how to give the user
01:07 - for guesses to find the battleship
01:10 - thoroughly test your game make sure you
01:12 - try a variety of different guesses and
01:14 - look for any errors in the syntax or
01:16 - logic of your
01:18 - program so what we'll do is we'll copy
01:21 - all this code we'll come over here and
01:23 - we'll run
01:26 - it it tells us that the code is wrong
01:29 - which it is because um in Python 3 you
01:33 - need to put parentheses after
01:35 - print print again another print that's
01:41 - wrong
01:43 - um hopefully every other print is right
01:46 - let's check it out raw input is not
01:48 - defined because in Python 2 again uh
01:52 - it's not raw input it's just
01:56 - input it's easier right you don't have
01:59 - to say raw input every
02:03 - time let's see what other errors are
02:05 - there let's run it okay cool the game
02:08 - ran and it goes you missed my battleship
02:10 - you missed my battleship I don't like
02:12 - this part right it says you missed my
02:14 - battleship
02:17 - twice um however that's good that's
02:20 - right cuz we did miss the battleship the
02:22 - battleship was located in 42 and we took
02:25 - a turn in column four row four and
02:28 - column four which is
02:30 - uh right over here right it's the
02:32 - absolute last
02:34 - one um just to let you know it's row
02:38 - zero Row one row two Row three row four
02:42 - column Zer column 1 column 2 column 3
02:46 - and column 4 so we have missed the ship
02:49 - what do we do well we simply guess again
02:53 - however it should be reducing the number
02:55 - of guesses So eventually uh you run out
02:57 - of guesses right after four guesses you
02:59 - should should run out so try to go ahead
03:02 - and make that part of the game a hint
03:04 - I'll give you is if things are repeating
03:06 - it sounds like a loop so you may have to
03:08 - put the entire thing in some kind of a
03:10 - loop um one suggestion on how to do that
03:14 - is um indent everything and then like do
03:17 - like a while loop or like a for
03:20 - Loop um okay let's just uh and maybe if
03:27 - while guesses is is less than or equal
03:30 - to four Run the game Run the entire
03:33 - logic of the game and then maybe
03:35 - decrement the number of guesses every
03:37 - single time you run through the loop
03:38 - right so if you haven't guessed
03:41 - correctly it decrements it by one for
03:44 - example it should be like guesses um
03:47 - minus equal 1 or guesses is equal to
03:50 - guesses minus one right this means
03:52 - you're decrementing guesses by
03:55 - one okay
03:58 - so this is the case here but it says you
04:01 - missed my battleship twice and it also
04:03 - marks the spot X which is good which is
04:05 - fine so it either looks like we don't
04:09 - need this or it looks like we don't need
04:11 - this block right there okay so I think
04:15 - I'm going to go ahead
04:17 - and remove this lse statement
04:21 - here um and just move these back and
04:26 - let's check it out and let's see what
04:28 - happens
04:37 - whoops let's see if this logic is
04:40 - correct or if it's
04:42 - false okay we missed a battleship it
04:44 - says you missed a battleship and it gave
04:46 - us an X so we ran the game one time and
04:49 - we guessed something wrong it gave us
04:52 - perfectly the answer that it should give
04:54 - us you missed my battleship and it
04:56 - marked that x uh that spot with an X now
04:59 - let's try guessing something off the
05:02 - board okay we guessed off the board but
05:06 - it gave us an answer that perhaps we did
05:09 - not want which is uh saying list index
05:14 - out of error line 32 gave us the error
05:18 - so this means that when we guess off of
05:20 - the
05:22 - board um that check needs to run before
05:26 - it starts indexing it here online 30 to
05:30 - so what it did is it did
05:32 - five five and it goes there's no such
05:37 - list as uh there's no such row as board
05:40 - five so it just pooped out right over
05:43 - here and gave us an error which means
05:45 - that we should stop the program before
05:48 - it gets to that line so I'm going to put
05:50 - that
05:51 - part
05:52 - here and I'm going to put this
05:56 - part
05:58 - um
06:00 - here okay
06:03 - so check if you guessed correctly and if
06:06 - you did I say congratulations you sank
06:08 - my battleship check if you guess within
06:11 - the boundaries and if you did I said um
06:14 - oops that's not even if you did guess
06:16 - outside of the boundaries then oops
06:18 - that's not even in the
06:19 - ocean uh so I'm going to say
06:24 - elsf okay now check if you've already
06:27 - guessed at that spot and and then uh
06:31 - lastly uh just go you missed my
06:34 - battleship and Mark that spot with an X
06:37 - okay so I'm just going to write little
06:39 - comments above here to help
06:41 - you uh you know a lot of the times don't
06:44 - just think in code because that'll
06:46 - confuse you right you'll be like uh
06:49 - guest row equal equal ship row and guess
06:53 - coal equal equal ship coal and it can
06:56 - get confusing if you have to think like
06:58 - that every single time
07:00 - of course the first few times you have
07:02 - to go through your code you have to like
07:05 - really strain and squint your eyes and
07:07 - see what's actually happening but then
07:09 - make a note for yourself so then when
07:11 - you're thinking about it and you want to
07:14 - go through it quicker you can just
07:16 - really quickly know in English what it's
07:18 - doing so that's what I'm going to
07:20 - do uh this checks if you
07:25 - guessed uh
07:28 - correctly right that if condition this
07:31 - checks if
07:35 - um you guessed within the 5x5
07:42 - grid
07:45 - um
07:47 - this checks if you have already guessed
07:52 - in that
07:58 - location
08:02 - this
08:03 - um tells you you tells you you
08:09 - missed and it marks that spot as X okay
08:15 - so in English you know what each of
08:17 - these if statements and uh these
08:20 - conditions are doing now let's run our
08:22 - code and let's see what happens 44 it
08:24 - says you missed my battleship which is
08:26 - what it should do let's guess 55 it says
08:29 - oops that's not even in the ocean and
08:32 - this time notice that the entire program
08:36 - did not poop out and gave us a giant red
08:40 - error uh freaking out the users and
08:43 - making them run away making your friends
08:45 - jump off and attack you uh because they
08:48 - saw a lot of red on the screen right
08:51 - sometimes it can make you red is not a
08:53 - pleasant color to look at a lot of the
08:54 - times so uh avoid getting attacked by
08:57 - friends and and um and don't freak out
09:01 - your users okay so that's why we catch
09:06 - that condition on line 35 before it goes
09:09 - to Line 39 and tries to index it and
09:12 - give give an error the program
09:14 - effectively uh tells you this and stops
09:17 - right here okay all right so we have
09:20 - checked it enough times let's simply go
09:25 - next you sunk my
09:27 - battleship play it Sam you can
09:29 - successfully make one guess in
09:31 - Battleship but we'd like our game to
09:33 - allow the player to make up to four
09:35 - guesses before they lose okay so here
09:37 - they are showing you a loop um and add a
09:40 - four Loop that repeats guessing and
09:42 - checking part of your game for four
09:44 - turns like the example above at the
09:46 - beginning of each iteration indent
09:48 - everything that should be repeated okay
09:50 - now the important part is to think about
09:52 - what is something that needs to be
09:55 - repeated so from without thinking about
09:57 - coding and everything just just think
09:59 - about logically what is something that
10:01 - has to be repeated what should the user
10:04 - be allowed to repeat for example do we
10:06 - need to create the board over and over
10:09 - again probably not so this part of the
10:13 - code where you create the board over and
10:15 - over again should not be repeated do you
10:19 - need to uh hide the ship over and over
10:22 - again every return no you just hide the
10:25 - ship once so the part where
10:29 - you set the randomness over here right
10:33 - you figure out randomly where to place
10:36 - that you don't need to uh worry about
10:39 - that part L of board it should be like
10:41 - this
10:42 - actually so this part does not need to
10:45 - be in the loop should the user be
10:47 - allowed to guess over and over again yes
10:50 - they should this print statement should
10:52 - not be here should be above
10:56 - here okay should the user be allowed to
10:58 - guess row and guess column again and
11:00 - again yes they should right um also
11:04 - after every guess should we check if the
11:07 - guess is
11:08 - correct yes we should should we check
11:12 - after every guess that it's within the
11:16 - boundaries yes we should should we check
11:20 - uh every guess that it's that location
11:23 - has already been been guessed at yes we
11:27 - should and should we uh after every
11:31 - guess should we um if if the user missed
11:34 - should we let them know you missed and
11:36 - Mark that spot as X yes we should this
11:39 - means that this entire part of the code
11:43 - needs to be uh uh in a loop because it
11:46 - needs to happen over and over again so
11:48 - what I'll say is for turn in range
11:57 - 4
11:59 - okay this means and instead of saying
12:02 - four turn in range four I don't like
12:05 - that I think wild Loop
12:08 - is H let me think about this both of
12:11 - them will work but I don't want it
12:20 - to run for four times only even if you
12:24 - guess like I I don't want it to run four
12:27 - times
12:29 - um only for four times even if you guess
12:32 - outside of the boundaries I think that
12:33 - if you guess outside of the boundaries
12:35 - it should just not count it and let you
12:37 - move again so I would like to propose a
12:40 - while loop let's see later how they do
12:41 - it but I would like to propose a while
12:43 - loop so I'll say I'll create a variable
12:46 - called uh guesses and I set it to zero
12:50 - and then I will say that while
12:54 - guesses is less than um four
12:59 - keep playing this game and when should
13:01 - you decrement a guess here the game
13:04 - should just end so I will say break
13:08 - right just break out of the loop the
13:09 - game is over so break is a command that
13:12 - would do it or what I can just do is
13:14 - make guesses is equal to four or
13:16 - something here so that way when the loop
13:19 - happens again uh it'll say four is less
13:22 - than four and this will give you a false
13:26 - and then the loop won't
13:27 - run so those are two ways to do it um
13:32 - I'll put this in comments and I'll just
13:34 - put a break here cuz it's a little
13:36 - easier to read I don't encourage putting
13:38 - breaks a lot in code because usually
13:42 - when you're relying too much on uh this
13:45 - kind of thing like break usually it
13:47 - means that there's something wrong with
13:49 - your logic okay and there is definitely
13:52 - a better way to overcome that so don't
13:55 - use break as a crutch all the time the
13:57 - only reason I'm using using it here is
14:00 - because you guys haven't practiced
14:02 - enough with functions and all of this
14:04 - this game should really be a function so
14:06 - instead of uh us printing this part out
14:10 - we should be returning it and then
14:13 - return automatically ends the program or
14:15 - that function and therefore you don't
14:17 - need to write a
14:19 - break but since we are just printing out
14:22 - congratulations you sank my ship I'm
14:24 - just going to put a break here okay cuz
14:26 - we're not dealing with functions here
14:28 - cuz outside of function return does not
14:30 - work okay just for you curious people if
14:34 - I did return um it would say return
14:37 - outside of a function okay and if I did
14:40 - uh Define sum of a comma b or let's not
14:45 - call function sum cuz sum is a
14:46 - predefined thing so let's say sum of
14:49 - nums uh a comma
14:51 - B return this does not give you an error
14:55 - cuz return um is inside of a function
14:58 - function anyways let's keep
15:01 - going so all right now let's go down
15:05 - here should I should I increase the
15:07 - number of guesses here no because I want
15:10 - the user to just play again without any
15:12 - penalties if they guess outside of the
15:13 - range okay but I do want to let them
15:16 - know oops it's not even in the ocean all
15:18 - right let's go here if you've already
15:20 - guessed in that location should the turn
15:23 - be taken from you no you should just be
15:25 - allowed to guess somewhere else cuz that
15:28 - would be annoying if you've already
15:29 - guessed in that spot and then you guess
15:31 - there again and it takes another turn uh
15:33 - but if you missed a battleship then
15:35 - definitely one turn should be counted
15:37 - that turn should be counted so here I
15:40 - can simply say guesses plus equals 1
15:43 - which is a shorthand notation for
15:44 - incrementing uh the number of guesses or
15:47 - I can say guesses is equal to guesses +
15:50 - one and if I run this uh you will
15:55 - see
15:57 - um so it says you guess that one already
16:00 - right constantly uh so stopping us we
16:03 - already know the answer so but I won't
16:05 - guess 2 one for now I'll just get guess
16:08 - three and one it says you missed my
16:09 - battleship if I said 31 it says you
16:11 - guessed that one already 31 is right
16:13 - here and if I say 44 it's going to say
16:16 - you've guessed that one already 44 now
16:18 - let's do 43 oh I'm sorry that doesn't
16:21 - even make sense uh it's out of the index
16:25 - so it should have given us an error Okay
16:28 - so R what did we do wrong
16:31 - [Music]
16:37 - here this should be an or not an end
16:40 - that's
16:45 - wrong yes um that should definitely be
16:49 - an or because only one of these has to
16:52 - be true uh because what happened here is
16:55 - it went 43 and four
17:01 - um or
17:03 - actually yeah only one of these has to
17:05 - be false okay so let's run it again if I
17:08 - try 43 and four now it should not give
17:10 - me an
17:11 - error
17:13 - okay so um in that one both of them have
17:17 - to be false in this one only one of them
17:19 - has to be false so that's why you have
17:20 - an or which is helpful and then it goes
17:22 - in here and then checks it and prints it
17:25 - out
17:27 - okay
17:29 - okay I'll guess 44 if I guess 44 again
17:31 - it says you guessed that already 44 is
17:33 - right
17:34 - there whoops right there um I can do 4
17:38 - three I can do 4 two I can do 4 one and
17:42 - you can see that I've guessed four tries
17:45 - and now the program has stopped running
17:47 - automatically so great we are really
17:49 - close now at the end I would just want
17:51 - to say something like hey if guess is
17:54 - you know something like just checks if
17:56 - guesses is four then I want you to say
17:58 - that hey the game is over um and you
18:01 - never guessed anything correctly and you
18:04 - suck no that would be evil I don't want
18:07 - to say that but I can definitely say Hey
18:09 - you guessed it incorrectly um and you've
18:11 - run out of turn something simple right
18:13 - there right if guesses is equal to
18:16 - four uh
18:19 - print uh game is
18:27 - over
18:28 - you have run out of
18:32 - turns okay so if we play this game now
18:36 - and I go oh I'm sorry four so this time
18:39 - it didn't give me an error right it goes
18:41 - oops it's not even in the ocean which
18:43 - means I just get to play again that's
18:45 - nice um four 4 43 42 41 and it goes game
18:51 - is over you have run out of turns I
18:54 - think that's a complete game but let's
18:56 - see what they say
18:58 - add a for Loop um at the beginning of
19:01 - each iteration print turn turn plus one
19:04 - to let the player know what turn they
19:05 - are
19:06 - on okay so they're having us do this in
19:10 - a really um odd way I would say
19:18 - and okay let's keep going through it
19:22 - so let's put it all of this in a loop
19:25 - okay what are the parts that we want in
19:27 - a loop
19:29 - H we definitely don't want it randomized
19:31 - every time we
19:34 - do we don't want it to have print the
19:36 - answer every single
19:39 - time
19:41 - um okay they're also giving you a nice
19:43 - little note everything from here should
19:45 - go on uh in your for Loop right so we
19:49 - should say
19:53 - four
19:55 - turn in range four and effectively what
19:59 - they want to do is just print
20:02 - out the turn you're on that should be
20:05 - the last part of the statement uh the
20:08 - entire code here so wow this is okay U
20:13 - so I should say
20:15 - print what should I say print turn + one
20:19 - okay which means
20:24 - that um the first time it's zero so you
20:27 - don't want it to to see to tell you turn
20:30 - zero that doesn't make sense so it's
20:31 - whatever turn it's on it just should
20:33 - increment it by one as simple as that
20:35 - because this range here right turn is
20:38 - going to be going through this
20:39 - range first time turn is going to be
20:42 - zero then it's going to be one then it's
20:43 - going to be two then it's going to be
20:44 - three what you wanted to say the first
20:46 - time it prints it out is 1 2 3 and then
20:49 - four that's why you're just uh adding
20:51 - that plus one
20:53 - okay um Bueno let's keep
20:57 - going your code looks a bit off check
21:00 - the hint if you need help um invalid
21:03 - literal for INT with base 10 where what
21:06 - line is the code uh error coming from
21:09 - line
21:09 - 31 H what is the oh uh cuz I gave it an
21:14 - empty thing so it gave me an
21:16 - error okay uh 43 44 43 and okay that
21:22 - worked but clearly you can see that the
21:25 - game is flawed it did not stop you and
21:28 - say hey you guessed that one
21:31 - already game over if someone runs out of
21:34 - guesses without winning right now the
21:36 - game just exits it would be nice to let
21:38 - them know why so we'll want to put it
21:40 - under the else that counts for
21:43 - misses so I don't like how their logic
21:46 - is laid out I like my logic much better
21:49 - much much much easier to read it's not
21:51 - like nested El's underneath each other
21:54 - right who who nests an if statement who
21:58 - NE yeah like an if statement under an
22:02 - else which is under an
22:04 - if what the heck yeah this is
22:09 - weird Okay so we'll want to put it under
22:12 - the else that accounts for misses what
22:15 - is the else that accounts for misses so
22:18 - this is the else that I see that
22:20 - accounts for misses right right
22:22 - here uh just in case you guys got
22:25 - confused with this line it just means uh
22:28 - if guest row is between zero and four
22:30 - and then this part means if guest column
22:32 - is between zero and four and or here
22:36 - right which is the same thing as guess
22:38 - Ro not in range five or guess Cole not
22:40 - in range five but my way of writing it
22:43 - is better and more readable and you guys
22:45 - should follow that rather than this
22:47 - weird obsc obscure way
22:52 - okay we'll want to print the message no
22:55 - matter what the cause of the mess
22:59 - we'll want to put it under the else that
23:01 - accounts for
23:02 - misses um since our return variable
23:06 - starts at zero and goes to three we will
23:09 - want to end the game when turn equals
23:12 - three okay that makes sense uh add an if
23:15 - statement that checks if the user is out
23:17 - of
23:18 - guesses um okay
23:21 - so put it under the else that counselor
23:23 - misses put it after the if else uh if L
23:26 - if else statement is to check for the
23:29 - reason the player missed we want game
23:30 - over to print regardless of the reason
23:32 - if turn equals three print game over
23:34 - okay simple
23:37 - enough if turn equal equal
23:42 - 3
23:43 - print game over
23:47 - right so let's play the game again it's
23:49 - two and four if I guess it obviously the
23:51 - game ends I found it but I won't do that
23:53 - I would say 4 four then I will say
23:56 - 43 and then I will say for two and then
24:00 - I will set for one
24:05 - and it says game over right there
24:11 - okay
24:16 - Simple Start next lesson almost there we
24:20 - can play Battleship but you'll notice
24:22 - that when you win if you haven't already
24:24 - guessed four times the program asks you
24:27 - to enter her another guess what would
24:29 - rather have happen is for the program to
24:32 - end it's no fun guessing if you know
24:34 - you've already sunk the ship so what is
24:38 - happening currently is even if you got
24:39 - it right the program keeps
24:41 - running however in hours you can see
24:44 - that we put a break here so if we guess
24:48 - at 43 the program ends right our ours
24:52 - the one we made together is way more
24:54 - intelligent and more
24:56 - readable okay
24:59 - we' out but what we rather have is okay
25:02 - we can ask we can use a command break to
25:06 - get out of a for Loop you can call me
25:09 - Mystic Mech right um add a break under
25:13 - the wind condition the loop after a
25:17 - wi Okay add a break under the wind
25:21 - condition
25:26 - H what if where's the wind condition
25:28 - wind condition is right here and add a
25:31 - break right break boom done it's just
25:34 - hard to read cuz it's like so congested
25:36 - and they don't let you like what I want
25:39 - to be able to do is squeeze the code and
25:42 - give it more width so you can read the
25:45 - code properly it's kind of annoying how
25:47 - it is because the lines are running
25:50 - across and all kinds of weird
25:54 - stuff okay so now if you guess correctly
25:57 - it says congratulations you sunk my
26:00 - battleship to your Battle Stations
26:03 - congratulations you have
26:06 - finally oh I'm sorry let me read that
26:08 - again I messed it up you have a fully
26:11 - functional Battleship
26:12 - game play it a couple of times and get
26:15 - your friends to try it out two don't
26:17 - forget to go back and remove the
26:19 - debugging output that gives away the
26:21 - location so what that what does that
26:23 - mean where are we printing it out Delete
26:26 - line 23 and 24 right because you don't
26:30 - want them to know where the hidden ship
26:33 - is you may want to take some time to
26:35 - clean up and document your code as well
26:38 - again guys we did it beautifully look at
26:40 - that we documented our code dis checks
26:42 - if you guess correctly this checks blah
26:44 - blah blah this checks blah blah blah and
26:47 - here we can say this checks if you have
26:51 - run out of guesses so this means that
26:55 - you have documented your code and we've
26:58 - cleaned it
26:59 - up so this is a
27:02 - version that you guys should use let's
27:05 - say
27:07 - share um and then let's do I'm going to
27:10 - copy that I'm going to
27:13 - share let's save
27:17 - it I guess you can get it at that
27:22 - link but let me see what happens if I
27:26 - refresh
27:28 - um or I
27:30 - go yeah so I guess if I don't change
27:33 - this exact link you should be able to
27:35 - get access to this very
27:44 - link now let me check if oh whoops let
27:48 - me check if that one too is still a link
27:53 - that's
27:56 - there okay okay beautiful enjoy the full
27:59 - game is right there for your use and you
28:01 - can run it right here in this repol it
28:04 - enjoy kids no Enjoy clever
28:11 - programmers or call you cuz you're one
28:14 - person when you're going to playing it
28:15 - so enjoy clever programmer very smart
28:18 - for using this link it will live
28:21 - on all
28:25 - right when you are done playing
28:27 - Battleship and are ready to move on
28:29 - click save and submit code save and
28:32 - submit
28:35 - code okay we guessed it wrong let's see
28:38 - if we can win against
28:42 - him oh I'm sorry I guessed it
28:45 - wrong uh two it didn't give me an error
28:48 - that's
28:51 - okay no I missed the ship so these are
28:55 - my guesses x x x X but looks like I
28:59 - missed the one fun feature you
29:01 - should add at the end is maybe at the
29:04 - end once the game is over reveal the
29:05 - position where it was stored I think
29:08 - that's uh a little bit more fun to be
29:11 - honest extra credit you can also add on
29:15 - to your battleship program Pro um
29:18 - Battleship program to make it more
29:20 - complex and fun to play here are some
29:22 - ideas for enhancements maybe you can
29:24 - think of some more make multiple
29:26 - battleships
29:27 - you'll need to be careful because you
29:29 - need to make sure that you don't Place
29:31 - battleships on top of each other on the
29:32 - game board you'll also want to make sure
29:35 - that you balance the size of the board
29:37 - with the number of ships so the game is
29:39 - still challenging and fun to
29:42 - play so 0 one multiple battleships what
29:47 - if I can hide three or four battleships
29:49 - right that will be
29:54 - fun so um right now it's a 5x5 grid if
29:58 - you put 25
30:01 - ships well it's not going to be very
30:04 - hard to play right five where did I get
30:07 - 25 from 5 by five that gives you 25 that
30:10 - means that on the grid there are 25
30:13 - squares so if you pick 25 ships now the
30:16 - game is going to be really easy cuz
30:18 - every guest is going to guess a ship and
30:20 - sync it down so what they're saying is
30:22 - that hey if you want to pick more ships
30:24 - then maybe have a bigger board so it's
30:26 - still challenging got it cool point two
30:28 - make battleships of different sizes this
30:30 - is trickier than it
30:32 - sounds so maybe a battleship can um you
30:36 - know row column two and two and a row
30:40 - column three or yeah two row two and
30:45 - maybe column um I'm confusing you guys
30:49 - let's just look at a board so you can
30:52 - have a ship hidden here and here you
30:55 - know it can be a ship of length too so
30:57 - it can be in row zero column 2 and Row
31:01 - one column um two okay you can have a
31:06 - vertical uh ship or you can have a
31:09 - horizontal ship that is placed this way
31:12 - maybe it can be of length three uh maybe
31:15 - you can have multiple ships of different
31:17 - sizes in real Battleship one of your
31:19 - ships is pretty long like five or four
31:22 - spaces other ones are three and some are
31:24 - like one so that would make the game
31:27 - more fun but also a lot more challenging
31:29 - right a lot diff more difficult to kind
31:31 - of
31:33 - code um need to be vertically or
31:36 - horizontal touching and you'll need to
31:38 - make sure you don't accidentally place
31:41 - part of a ship off of the side of the
31:43 - board meaning you don't place a ship
31:45 - like here um and then like do one square
31:48 - to the right of it which doesn't exist
31:51 - make your game a two-player game so make
31:54 - it a two-player game uh that's another
31:56 - thing that you can
31:58 - do and uh so basically both people maybe
32:01 - get to put a ship and then one guy takes
32:03 - a turn and then the other guy takes a
32:04 - turn so on so forth use functions to
32:07 - allow your game to have more features
32:08 - like rematches statistics and more cool
32:13 - so you can allow you can click like
32:16 - rematch and the game starts again and
32:19 - then it prints out statistics like you
32:21 - know Johnny ship uh
32:24 - synced Bobs my names are Terri
32:28 - but okay Johnny synced Bob's ships right
32:32 - Johnny synced three of Bob's ships in
32:34 - like the last two games and Bob ship
32:37 - synced seven of Johnny ships in the last
32:39 - two games or whatever and who won how
32:42 - many games and you know what's the
32:45 - average games that this person has won
32:47 - against him and whatever you you guys
32:49 - get the idea some of these options will
32:52 - be easier after we cover Loops in the
32:53 - next lesson think about coming back to
32:55 - Battleship after a few more less lessons
32:57 - and see what other changes he can make
33:00 - so great job so far everybody I'm going
33:03 - to save and submit we have gotten the
33:06 - badge Battleship let's hit next we'
33:09 - finished this
33:10 - course let's go back to the course
33:14 - page if you guys are interested uh leave
33:17 - in the comments below maybe if you want
33:18 - to see how to make that Battleship game
33:21 - and then we can definitely walk through
33:22 - it and make it but it's extra credit so
33:25 - I'm going to skip it for now and we're
33:26 - going going to go on to loops loops are
33:28 - amazing you guys know I already love
33:30 - them and they allow they want you to do
33:33 - specifically Loops here while Loops for
33:36 - loops and then they're going to give us
33:38 - a lot more practice so that's going to
33:39 - be a tremendous amount of
33:42 - fun great job everybody for making it
33:44 - here so far if you like this video
33:47 - please go like it and otherwise uh and
33:50 - also subscribe to the channel if you
33:52 - haven't already other than that this is
33:55 - code academy python part 19 and I will
33:58 - see you in the next video code academy
34:02 - Python tutorial number 20 all right
34:06 - everybody take care and I'll see you
34:08 - there