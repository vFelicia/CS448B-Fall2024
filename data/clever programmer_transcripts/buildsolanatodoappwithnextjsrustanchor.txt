00:00 - solana to do app you'll build a to do
00:02 - web 3.0 adapt with nextgs on the solana
00:05 - blockchain after you'll learn how to
00:08 - create your program on the solana
00:10 - blockchain using the anchor framework
00:12 - called rust we'll then show you how you
00:14 - can store the data on chain basically
00:17 - you'll be making a fully decentralized
00:19 - database that'll be verified by solana
00:21 - we're going to be using quick node as
00:23 - our rpc node provider to access the
00:25 - blockchain you'll use the solana
00:28 - playground to compile and deploy your
00:29 - smart contract we'll use phantom wallet
00:31 - to authenticate our users that sign in
00:34 - we'll use the salon a web 3 package to
00:36 - interact with our smart contract in the
00:37 - blockchain it'll make your life a lot
00:39 - easier okay you'll be able to view and
00:41 - confirm these transactions over the
00:43 - solana explorer to verify that they are
00:46 - indeed 100 real now before we get
00:49 - started make sure you smash that like
00:52 - button turn it blue turn it white
00:54 - whatever you want to do with that's fun
00:56 - but just make sure you smash it we're
00:57 - going to provide you with our own cli
00:59 - tool okay and what that's going to do is
01:01 - going to give you all the front end
01:04 - fully built
01:05 - so before you even actually write a line
01:08 - of code okay all of that is going to be
01:09 - given up front to you so that way you
01:11 - can focus only on the smart contract and
01:13 - the blockchain part with that said i'm
01:16 - gonna hand you over to your instructor
01:19 - lance for the rest of this video who is
01:20 - phenomenal and he's gonna help you build
01:23 - this project on solana get ready to have
01:26 - your mind blown take it away lance what
01:29 - is up youtube it's lance again i know
01:31 - it's been a while but i've been working
01:33 - on this very special app just for you
01:34 - guys so as you can see this is a simple
01:38 - to do app but guess what it's using the
01:40 - solana blockchain like kazi said so
01:42 - let's just do a quick demo we already
01:44 - have a deployed app on netlify and as
01:46 - you can see i'm logged in with phantom
01:48 - what happens if i'm not logged in though
01:50 - let me disconnect and let's hit refresh
01:53 - boom if you're not connected at all you
01:55 - won't see an input format here like you
01:57 - saw an input field it's not going to be
01:58 - there anymore this button is going to be
02:00 - there instead
02:01 - and another thing is if you want to
02:04 - initialize a user you won't be able to
02:06 - until you connect your wallet so let's
02:08 - say
02:09 - i have a new wallet so let's go to
02:12 - wallet number one and let's select the
02:14 - wallet
02:15 - and log in it's gonna ask if this is
02:17 - okay we're gonna hit connect
02:19 - and as you can see
02:20 - there's no to-do's right because i just
02:22 - connected my wallet it then checks on
02:25 - the smart contract if there's any to do
02:26 - accounts with that and since there's not
02:28 - any even users
02:30 - it's not going to get anything all right
02:32 - let's see if we're on our console if we
02:33 - see anything it's going to say account
02:35 - does not exist
02:36 - all right there's no account with this
02:38 - right here so we need to do is
02:40 - initialize an account so when we
02:41 - initialize the account we always have
02:43 - whenever we're writing to the blockchain
02:45 - it's going to take some of our solana
02:47 - let's go ahead and hit approve
02:48 - and you saw it for a second inched out a
02:50 - bit but there we go
02:52 - right now we can see the input field so
02:54 - now
02:55 - we have a user we should be able to make
02:57 - to do so let's do our first to do and
03:01 - hit enter all right again whenever we're
03:03 - writing we're making a to-do account on
03:05 - chain let's hit approve and bam there we
03:08 - go there's our first to do but that's
03:10 - not all this can do it's all managed on
03:12 - the back end and by back end solano
03:14 - blockchain let's hit approve to change
03:16 - this to completed there you go
03:18 - and we can also delete it another cool
03:21 - part guys is when you delete it we
03:22 - actually get some solana back the solana
03:24 - you spent to store that to do account on
03:27 - chain is now going to get refunded when
03:29 - you close that account we're not
03:31 - deleting we're closing that account
03:32 - so let's hit approve
03:34 - and bam it's gone so that's the demo i
03:37 - can't wait to get in on all the cool
03:38 - things that i've learned so let's see
03:41 - and get started coding
03:43 - all right guys so let's get started with
03:44 - the build the first thing i want you
03:45 - guys to do is open up your terminal and
03:47 - go into the folder that you want to
03:49 - create this project in once you're there
03:51 - all you have to do is type in npx clever
03:54 - programmer
03:55 - at latest what this does is let you use
03:58 - our powerful cli tool that's going to
04:00 - get you guys the starter files that you
04:02 - need to start this project so let's go
04:04 - ahead and hit enter and as you can see
04:06 - all you have to do to use our cli to is
04:08 - put in your email so i'll put landsat
04:10 - clever programmer
04:11 - i'm going to put in my name lance
04:13 - and then
04:14 - select the project you want to start and
04:16 - obviously we did spotify and tic-tac
04:18 - together let's go ahead and click solana
04:20 - to do
04:20 - and all you have to do now is wait and
04:23 - you'll see vs code automatically open up
04:26 - through our cli tool so i'll check back
04:28 - in when it's done
04:30 - all right so as you can see it's ready
04:32 - to go and it opened up vs code for me so
04:35 - if you look this is our solana to do app
04:37 - it's just a next.js project with
04:40 - a bunch of components the index and
04:43 - styling already done for you guys the
04:45 - main reason you clicked on this video is
04:46 - because you want to learn how to create
04:48 - on the solana blockchain so we're not
04:50 - going to focus too much on the next js
04:52 - part you guys know how to build this
04:53 - video app but if you do want to learn
04:55 - how to build a regular nexus 2 app come
04:57 - check out our other videos on that topic
04:59 - here we're just going to show you what
05:01 - this to-do app looks like with nextgs
05:03 - and how to implement a solana backend
05:06 - and when i say backend the salon of
05:08 - blockchain okay so let's take a look
05:10 - around if you don't have any node
05:12 - modules for whatever reason you can go
05:14 - ahead and open your terminal and type in
05:17 - cd into the app and type in yarn to
05:20 - install all those modules as you can see
05:22 - i have them so i'm good to go another
05:24 - thing that you could do while you're
05:25 - here is go ahead and type in the command
05:28 - yarndev if you want to run the project
05:30 - locally so i'm going to write yarndev
05:32 - and let me just set up my windows real
05:33 - quick
05:34 - all right so all i did was move my code
05:36 - to the side and put my window here and i
05:38 - can just type in localhost 3000 and
05:42 - let's see the app voila beautiful
05:44 - nothing app like i said it just contains
05:46 - the starter files but if you did want to
05:48 - see it we're going to have this
05:49 - initialize button right here so let's
05:52 - take a look see you have this initialize
05:54 - button
05:55 - when we first open up the app you don't
05:57 - have an account just yet you have a fan
05:59 - you'll have a phantom which i'll talk
06:01 - about later but you won't have an
06:02 - account just yet i demoed this earlier
06:05 - but for now
06:06 - it has a static initialize you can see
06:09 - there's already to do items we can mark
06:11 - the to-do we can delete that to do
06:13 - and just like the demo previously
06:16 - if you notice though if i refresh
06:18 - that whole thing gets reset right
06:20 - because again this is static data there
06:22 - is no back end to this so with that said
06:25 - you guys are all set up with the starter
06:26 - files like i said we want to take our
06:29 - regular app and implement a solana
06:31 - backend to it before we get to that we
06:33 - should understand how our app works so
06:34 - when i change stuff you're not
06:36 - completely lost you with me cool so
06:39 - if you guys have experience with any
06:41 - react app or nextjs app let's understand
06:44 - the parent and child relationship of the
06:46 - components okay so
06:49 - if you look under the pages folder of
06:51 - your app and you see something that says
06:53 - underscore this is what i'll call the
06:55 - top level component as you can see i
06:57 - already have some notes here this is
06:58 - where we're going to connect our phantom
07:00 - wallet to our app
07:02 - and we're gonna put it and wrap it
07:04 - around
07:05 - this component here because this
07:06 - component right here
07:08 - is the html of our entire app
07:10 - okay
07:12 - so
07:13 - if the app is the top level component
07:14 - let's draw that out
07:16 - ready so if i'm gonna make a little
07:18 - square here this is our app
07:21 - all right
07:22 - app
07:23 - okay
07:24 - so if that's the top level component
07:27 - what is the child of app
07:29 - can you guys tell me
07:31 - you got it it would be component but
07:33 - we're not going to say we're not going
07:34 - to draw a child and we're not going to
07:35 - call it component technically this
07:37 - component is index.js you could view it
07:40 - as this index.js what does this index.js
07:44 - have so if app is the top level
07:46 - component and we're putting our entire
07:48 - app in here
07:50 - inside this app
07:52 - lives oh there's an arrow on this so let
07:54 - me draw an arrow
07:55 - right inside this app his child let's
07:57 - undo that
07:59 - it's right right here
08:00 - index
08:02 - dot js so then you might be asking
08:03 - yourself lance what's in the index.js
08:06 - let's take a look
08:07 - right if the index.js is
08:11 - this whole entire app should i be able
08:14 - to see the input in the app yes or no
08:17 - yes should i be able to see this
08:19 - to do item yes should i be able to save
08:22 - this whole section yes that's all in
08:24 - this index.js can i prove it to you let
08:26 - me show you so i'm just going to go it's
08:28 - that let's take a look
08:29 - all right so let's look for this input
08:30 - field that i see if you look
08:33 - there it is on line 20
08:35 - there's the input field if i were to
08:37 - erase this
08:38 - save it's gone right just the css on the
08:41 - background is there
08:42 - okay but now if i ask you guys where in
08:45 - the code
08:46 - can you find me
08:47 - this guy learn front end let's find that
08:50 - piece of code
08:51 - all right so i'm scrolling
08:53 - i'm scrolling i'm scrolling
08:55 - and i reach the end i don't see it but
08:57 - what's this
08:58 - do you have loading right which is
09:00 - another component i made
09:01 - and within that it's wrapped around to
09:03 - do section what's to do section what do
09:06 - you guys think let's take a look see
09:08 - this is how you can read and understand
09:09 - somebody else's code
09:11 - so to do section is a component that
09:14 - lives inside index but what does it do
09:16 - okay so these are called props i'm
09:18 - passing it to do's prop and i'm passing
09:21 - incomplete to-do's and completed to-do's
09:24 - if the developer has good naming
09:26 - convention it should be easier to
09:27 - understand so it says incomplete and
09:28 - completed
09:30 - which of these is the incomplete which
09:31 - of these is the completed right so this
09:33 - is the incomplete oh that's big let's go
09:36 - undo that's incomplete
09:38 - and this is the completed right so how
09:41 - many to do sections do we have
09:43 - yes you got it there's two
09:46 - to do sections so let me prove it to you
09:48 - guys look at that there's one to do
09:51 - section and there's two to do sections
09:53 - did i make two separate ones that create
09:55 - two components no i reused the
09:57 - components that's kind of the power with
09:58 - react here i was able to reuse one
10:01 - component
10:02 - and pass it two different props
10:04 - alright you see that and completed
10:07 - cool so let's illustrate that
10:09 - relationship right here so let's draw
10:11 - another rectangle we'll actually just
10:12 - use our arrows first i like the arrows
10:14 - let's start right here boom
10:17 - and boom
10:18 - right
10:19 - one is
10:20 - to do section
10:22 - and the other is also a to do section
10:24 - right
10:25 - okay
10:26 - to do section
10:28 - and let's move it
10:31 - to do section
10:33 - can i paste it nope
10:35 - awesome
10:36 - let's do another one
10:38 - to do
10:39 - section
10:40 - okay
10:41 - this one though
10:43 - has completed
10:46 - and
10:46 - this one
10:48 - has incomplete
10:50 - and we're passing it as to do so does
10:52 - everyone understand this relationship so
10:54 - far the top level app contains the index
10:56 - component and the index contains to two
10:59 - to do sections one with incomplete to
11:01 - do's one with completed two so then
11:03 - let's figure out what's inside this to
11:05 - do section and just to show you guys
11:07 - what does this to-do section mean i'm
11:09 - gonna switch around my windows real
11:10 - quick all right so i just switched the
11:12 - windows around let me draw out for you
11:14 - guys what is to do section
11:16 - so
11:17 - this ink to do section right here the
11:19 - incomplete one is literally
11:22 - this
11:23 - section right here all right what about
11:26 - this one the completed one it's this
11:28 - right here they have similar css i'm
11:30 - just using it for two different purposes
11:32 - one holds incomplete one holds completed
11:34 - got it but there's components that live
11:37 - inside here there's one more component
11:40 - in here so let's take a look at that so
11:41 - to take a look at what components are in
11:43 - there we can go to our vs code this is
11:46 - called to do section right we can do go
11:48 - into the components folder go into to do
11:50 - and let's click to do section and as you
11:52 - can see it's kind of hard to see because
11:53 - of my little drawing but in to do
11:55 - section there is to do list
11:58 - has
11:59 - is gonna pass down the incomplete or the
12:01 - completed to do's so let me draw you
12:04 - that up for you okay so you can see the
12:06 - h1 right here kinda hard to see but
12:08 - that's the tasks here that's the
12:10 - completed here
12:11 - okay but to do list what's to do list i
12:14 - scroll down so you don't hurt your eyes
12:16 - anymore to do list
12:18 - let's change it to this color right here
12:20 - to do list is just
12:22 - these guys right there's another
12:24 - component that holds
12:26 - the list of to do's right and i'm going
12:27 - to draw the outline on this too okay
12:30 - cool and if you already understand all
12:32 - these react concepts go ahead skip the
12:35 - video to when i start connecting the
12:36 - phantom wallet okay so every to-do
12:39 - section will have a to-do list that's
12:42 - essentially what i'm saying
12:43 - so this has to do list
12:46 - this has a to-do list
12:48 - okay i'm going to draw that out now
12:50 - boom
12:52 - and boom
12:53 - okay let's add some text
12:55 - to do
12:57 - list
12:58 - and also a to-do list
13:00 - these are both one component but they're
13:02 - holding different things this is holding
13:04 - incomplete still completed right nothing
13:06 - not confused yet
13:08 - so that's the to-do list
13:10 - okay
13:11 - without going into my code
13:13 - if this blue here is to-do list is there
13:16 - any components inside of this box right
13:19 - here can you see one
13:21 - all right you got it if you said
13:24 - this right here this to do item
13:27 - you freaking got it that is another
13:29 - component and again we're reusing that
13:32 - component right here same component i
13:33 - didn't make a whole new html and css
13:35 - just for that so essentially for every
13:37 - incomplete to do that we passed down
13:40 - here
13:41 - for every to do
13:43 - create
13:44 - one
13:45 - to do item so
13:46 - in other words if there's four
13:48 - incomplete to do's guys
13:50 - how many to do items are we making four
13:54 - exactly so
13:55 - you can look at it like this
13:57 - within this to-do list if i draw where's
14:00 - my arrow there's going to be four to do
14:03 - items
14:04 - how many completed to-do's are in this
14:07 - to-do list do you write it there's two
14:09 - this one will have two
14:11 - right and then i'll just draw the
14:13 - squares it's gonna look like this one
14:14 - two three four
14:16 - one two
14:18 - and that right there is the parent and
14:21 - child relationship of the component
14:23 - right so
14:24 - if i got my in where did i get my
14:27 - incomplete to do's from so this guy
14:29 - right here
14:30 - oops let me get my pencil
14:32 - so if i ask you guys this right you have
14:34 - the visual save this picture if you're
14:37 - going to get confused later but if i ask
14:38 - you guys where did this incomplete to
14:40 - do's come from
14:42 - do you think i'm did i make it in to-do
14:44 - list
14:45 - no did i make that incomplete to-do in
14:48 - my to-do item no i didn't make it there
14:51 - it didn't just appear here it actually
14:53 - came from index so if i asked you how
14:55 - can i change the incomplete do's where
14:57 - are we looking
14:58 - we're looking
15:00 - right
15:01 - in here if i want to change the
15:02 - incomplete to do's and that's why i made
15:04 - you go through this i know that was a
15:05 - lot but if you survive and you
15:07 - understand everything i'm saying we are
15:09 - in great shape guys and if you didn't
15:11 - get it don't worry just rewind play it
15:12 - again maybe draw it out yourself
15:14 - but this is a relationship save this and
15:16 - i'm not gonna i'm gonna be referring to
15:18 - this relationship later in the video
15:20 - cool
15:21 - so if you got that let's get started
15:23 - with the web3
15:25 - awesome so another question that you
15:26 - guys might have is where did those
15:28 - incomplete to do's come from as you can
15:30 - see we passed in those two those
15:32 - incomplete and complete to do's as the
15:34 - word to do but if we go up a level if
15:36 - you remember that's a do section
15:38 - right there was
15:40 - index i believe so let's go here and on
15:43 - index
15:44 - we passed those to-do's at with the
15:46 - incompleted ones and the completed ones
15:49 - but where the hell lands did these come
15:50 - from i asked you guys it says it comes
15:52 - from index so let's scroll to the top of
15:54 - index and let's look at line nine and if
15:57 - you look at all these things add static
16:00 - input initialize static user
16:02 - you'll see
16:03 - completed to-do's and incompleted i
16:06 - don't know why it keeps doing that sorry
16:07 - guys and completed to do's and in
16:10 - complete to-do's
16:11 - but where do those come from so if you
16:12 - keep scrolling to the right you're gonna
16:14 - see that it's gonna be equal to
16:17 - use to do right used to do is our custom
16:20 - hook that we also gave you guys and that
16:23 - is where a lot of the logic of
16:24 - connecting our app is going to go so
16:27 - where does used to do come from as you
16:28 - can see it's highlighted in line 2.
16:30 - import that hook from our hooks folder
16:34 - and get the 2.js so let's figure out
16:36 - what that is
16:37 - so if we go to our hooks folder click to
16:39 - do.js here you can see
16:42 - right a lot of code right but this is
16:45 - where a lot of the logic lives so this
16:46 - is where our states live this is where
16:48 - our data lives our static data this is
16:51 - where our use effect lives and we can
16:53 - just store it here and only import what
16:55 - we need to our main app you with me
16:57 - awesome so if you look at line 13 this
16:59 - is where our static data do
17:02 - static data lives and it mocks how the
17:06 - solana blockchain data is stored right
17:08 - so it's an array of objects
17:11 - right and this first object is a to do
17:14 - item right so there's going to be an
17:16 - account
17:17 - and that account has an object that has
17:19 - the index
17:20 - the content and the marked
17:23 - so
17:24 - if i wanted to change learn front end to
17:26 - something else let's say i don't like it
17:28 - all i have to do is change this right
17:30 - here right now to
17:32 - learn salon all right
17:34 - let's save it there
17:36 - boom it changed it's not learn front
17:38 - anymore awesome let's say i change the
17:40 - mark to true
17:42 - let's change it to true
17:43 - look at that learn solana is down here
17:45 - and complete it how does it do that
17:46 - automatically lance that's magic all
17:48 - right luckily for you we already set
17:50 - that up so if you scroll all the way to
17:51 - the bottom as you can see there's all
17:53 - the states there's our use effect
17:55 - there's the functions that we're gonna
17:57 - make for the blockchain later but i want
17:59 - you to look at this line 146
18:02 - the incomplete to do's is a variable
18:05 - where i'm gonna filter our static data
18:08 - and if it's incomplete make a new array
18:12 - of to do's with only the incomplete
18:15 - same thing with the completed here
18:17 - all right this time the filter is for
18:19 - the completed ones
18:20 - right and that's why right
18:23 - if you take those variables come to 149
18:26 - return anything you want to bring
18:28 - outside of this
18:30 - js file so i want to bring all of these
18:32 - things including
18:34 - the incomplete oops
18:36 - the completed and the incomplete to do's
18:39 - and that's where they're coming from so
18:40 - if that's a question you might have
18:41 - that's right there you go if you want to
18:43 - add more functions to bring out we're
18:44 - going to add them to this line right
18:46 - here so we're going to change these
18:48 - static to do functions into normal
18:50 - functions
18:51 - okay to deal with the data that we're
18:54 - going to put on the salon chain cool so
18:56 - now that's out of the way i want to set
18:58 - up
18:59 - some things that we're going to need to
19:01 - talk to the blockchain and one of those
19:02 - things it's called an endpoint so if i
19:04 - get to draw this visually we have our
19:06 - app this is this square
19:08 - and then we have let's draw a different
19:10 - color
19:11 - we have the solana blockchain right here
19:14 - all right so let's draw it up the solana
19:17 - blockchain and we have let's bring it
19:19 - back to this color our app so if this is
19:22 - where it is how can we
19:24 - talk to the solana blockchain how can we
19:26 - even get data from here
19:28 - all right we're going to need something
19:29 - called an endpoint right so we need an
19:32 - endpoint
19:34 - right an endpoint is basically a node
19:37 - that lives on the blockchain that we can
19:39 - connect to and retrieve any data from it
19:41 - so
19:42 - our end point of today we're going to be
19:44 - using
19:45 - quick node all right if you guys haven't
19:47 - used heard quick no before if you
19:48 - remember our spotify video to get
19:50 - started with quick node go ahead and
19:52 - click the link in description so that
19:54 - you can sign up and start using their
19:55 - endpoint
19:56 - and the cool thing about quicknote is
19:58 - that they just released a free tier so
19:59 - no need to put in your credit card all
20:01 - you have to do is sign up by putting in
20:03 - your name so i'm just go ahead and do
20:05 - that and i'm gonna hit create account
20:07 - there you go so i successfully create an
20:08 - account and all you have to do is resend
20:11 - your verification email so that you can
20:12 - create your endpoint and that's one of
20:14 - the awesome things about quicknow they
20:15 - make it nice and easy for you to connect
20:17 - to the chain and they provide support
20:19 - for solana because only a few endpoints
20:21 - provide solana at this current point in
20:23 - time
20:24 - so i'm going to verify my email real
20:25 - quick and i'll jump right back in
20:27 - nice so now that i'm all verified with
20:29 - my email make sure you create an
20:31 - endpoint and click solana and as you can
20:34 - see quicknote provides support for a lot
20:36 - of different change you can see ethereum
20:38 - binance even bitcoin at the moment so
20:40 - let's go ahead and click solana because
20:42 - that's what we're working on
20:43 - and the main thing here is that we're
20:45 - working on the devnet if you're not sure
20:47 - what the devnet is it's exactly what it
20:49 - sounds like it's a playground for anyone
20:51 - who wants to test stuff or learn stuff
20:53 - and it says it right here
20:55 - you can test users token holders app
20:57 - developers or validators so let's hit
20:59 - that one and hit continue
21:01 - and bam configure any add-ons right
21:04 - quicknote also has an nft fetch tool we
21:07 - don't need that for this specific
21:08 - project let's just go ahead and hit
21:10 - continue and as you can see there's
21:12 - different plans right
21:14 - we can just
21:15 - go ahead and click continue
21:17 - all right and if you ever wanted to make
21:18 - even bigger projects if you're a company
21:20 - a startup out there and you want to need
21:22 - and you know you need to make more calls
21:24 - or you want even faster performance they
21:26 - have other plans out there that might be
21:28 - best suited for you for us beginners
21:30 - though we're going to be using their
21:31 - free plan and let's go ahead and go to
21:33 - endpoint
21:34 - and there we go we have it so the http
21:37 - provider and the wss provider is what
21:39 - we're going to be using for later so
21:42 - keep that tab open
21:43 - we're gonna we're set up for a quick
21:44 - note the next thing we're gonna need
21:46 - that to use to set up is something
21:48 - called phantom wallet if you guys are
21:50 - coming from solidity or ethereum this is
21:53 - your version sauna's version of metamask
21:55 - so if you go to
21:56 - phantom.com extension you're going to be
21:59 - taken to this google chrome store go
22:01 - ahead and install it from chrome
22:04 - awesome once you're done you can go
22:06 - ahead and click phantom
22:08 - and then create your wallet you can name
22:10 - it whatever you want but the main thing
22:12 - is click on the settings right here
22:14 - and make sure right you can see
22:16 - currently connected on devnet it's not
22:18 - going to be that by default so what
22:20 - you're going to need to do is change
22:21 - your network and make sure you're on
22:24 - devnet if you put devnet for quick node
22:26 - you should put devnet for phantom right
22:29 - because that's what you want to connect
22:30 - to so i'm on devnet my phantom download
22:33 - i have the extension and now
22:36 - let's get to coding
22:37 - so now that we're going to get started
22:38 - with coding let's say you're coding this
22:40 - project up and you made a mistake and
22:42 - you want to revert back to an old
22:44 - version that's where version control
22:46 - comes in so
22:47 - if you realize with our cli tool you
22:49 - actually just get cloned automatically
22:51 - so if you look at my app let's press
22:54 - ctrl j or command j and let's just kill
22:57 - the terminal
22:58 - and then let's try to get push right if
23:02 - i get push
23:03 - it's going to say everything up to date
23:04 - for me because i have permission on this
23:06 - repo but if you guys did a good push
23:08 - you're gonna notice it's gonna fail
23:09 - because you don't have access to push to
23:11 - our repo so what you guys should do is
23:13 - let's show you guys how to make your
23:15 - very own repo with these files that way
23:19 - you can save your any version that you
23:20 - make and revert back if you need to all
23:22 - right this is good good practice if you
23:24 - want to become a developer so
23:26 - i'm going to do is get over to github
23:29 - and let's go ahead and create a repo
23:31 - there's multiple ways to create your own
23:32 - repo you can do it within the command
23:34 - line you can even use get kraken if you
23:36 - have it right but for my beginners out
23:38 - there all you have to do is create a new
23:39 - repository like this okay so for this
23:42 - pository name i'm going to say solana
23:45 - to do
23:46 - dap right
23:48 - cool and after that's done you don't
23:50 - have to put a description you can make
23:52 - it public and you don't have to put in
23:54 - this stuff because if you don't put any
23:55 - of those things you click create
23:57 - repository and you ever get lost github
24:00 - is nice enough to tell you how to make a
24:02 - new people on the command line vice
24:04 - versa what i'm going to show you though
24:06 - is how to take
24:07 - this current repo right from our vs code
24:10 - this one right here
24:11 - and push it to this repo to make it your
24:14 - own
24:15 - okay so to do that it's very simple
24:18 - let's go ahead and make this guy bigger
24:19 - now and within here we're just gonna
24:21 - write
24:23 - simple command git remote dash set oh
24:26 - sorry get remote space set
24:29 - dash url
24:31 - origin all right i'm creating a new
24:33 - origin to push these changes too so i'll
24:36 - have to do
24:37 - after the word origin is click space and
24:40 - then i will need the link from this one
24:42 - click copy this link right here
24:45 - copy it
24:46 - and then you go you can go back to your
24:47 - command line
24:49 - and right click and i'm gonna hit enter
24:51 - and there we go so if i say git status
24:53 - now right you're gonna see that the
24:55 - package json change and the hooks change
24:57 - because i remember i modified that hook
24:59 - so all you have to do is do these simple
25:01 - commands to get add dot
25:05 - alright and if you do get status again
25:06 - you'll see that those files changes have
25:09 - been added but you still have to commit
25:10 - them so i can say updated
25:13 - static
25:14 - data right now we can do a git
25:17 - push okay now if i refresh here
25:20 - look at that this is my own repo right
25:22 - this should have worked for you and
25:24 - don't worry you didn't steal code you
25:26 - can see over here our boy david one of
25:28 - our developers is one of the contributor
25:30 - is because he set up this nice project
25:32 - for us and you can see our comment here
25:34 - at updated static data is within that
25:36 - app and you can see it's within the
25:38 - hooks
25:39 - right with that you have your own repo
25:41 - you don't have to be scared about losing
25:42 - code or messing it up you can always
25:44 - revert and do some version control with
25:46 - github so that's my quick lesson on
25:47 - github another reason we set this up is
25:50 - because we can actually deploy our
25:52 - projects right away as you saw in the
25:53 - demo
25:54 - okay to do that we're going to be using
25:57 - netlify so i'm going to go ahead and
26:00 - click the netlify link in description
26:02 - where it's going to be
26:04 - ntl.fyi clever and it'll lead you to
26:06 - this page and if you don't have an
26:07 - account go ahead and sign up now using
26:10 - this link and after that
26:13 - i'll meet back up with you
26:14 - awesome so i'm all logged in and
26:16 - everything while you're here make sure
26:17 - you connect to github with your netlife
26:19 - account because it's gonna make this
26:21 - next step a lot easier what i'm about to
26:22 - do is make it so that i'm going to
26:24 - deploy our project right here right now
26:26 - and every time we push a change to
26:28 - github
26:29 - the live site will also update so we
26:31 - don't have to redeploy or anything like
26:33 - that netlify takes care of it so what
26:36 - you need to do is make sure you install
26:39 - netlify right by saying npm install
26:42 - netlify
26:44 - g what this does is in installs the
26:46 - netlife cli tool globally so that you
26:49 - can use their commands so i already have
26:52 - it but i want to install it with you
26:52 - guys just because i want to be a part of
26:54 - it
26:55 - all right once that's done you can go
26:57 - ahead and type in the word netlify in
26:59 - your command line all right if you type
27:01 - this you can see all the different
27:03 - commands that you have access to now
27:05 - that you have this installed all right
27:07 - the one that we want to look at is this
27:09 - one login we're logged in here but you
27:11 - want to log in through here just in case
27:13 - and instead of writing netlife there's
27:14 - actually a cool shortcut you could do
27:16 - you can just write n t l
27:19 - and then all of a sudden you can just
27:20 - type in the command you want so i want
27:22 - login right this will make sure that i'm
27:24 - logged in
27:25 - through the cli
27:26 - right so already logged in
27:28 - and if you're not go ahead and do that
27:30 - now
27:31 - awesome so i'm already logged in the
27:33 - next thing you need to do is to
27:35 - initialize it so let's do ntl init hey
27:37 - there we go so you see these options
27:39 - what would you like to do we want to
27:42 - create and configure a brand new site so
27:44 - let's hit enter okay
27:46 - let me bring this up
27:48 - right it's going to ask you about the
27:50 - team right i only have my own team all
27:52 - right and here is where you put the site
27:54 - name so i'll call it solana
27:57 - dash to do
27:59 - all right keeping it the same naming
28:00 - convention hit enter
28:02 - boom and now it's going to say what's
28:04 - the base directory right you're going to
28:06 - see projects front end
28:08 - you're going to see projects funnel make
28:10 - sure this is at the app
28:12 - to enter
28:13 - right your build command it's a next app
28:15 - so it's going to be next build
28:17 - all right directory to deploy and it
28:18 - should be the current directory that are
28:20 - on so make sure you're doing this in the
28:22 - app folder
28:23 - okay i'm going to enter here and there's
28:26 - an essential next.js plugin we can just
28:28 - hit y and hit enter okay cool so now the
28:32 - next steps is what to do is write in a
28:34 - git push okay oh and yeah every time
28:37 - like i said every time we push new
28:38 - changes then it will redeploy it live so
28:41 - let's just make a change here a quick
28:43 - one we're going to go into todo.js and
28:45 - add a space and that's considered a
28:47 - change so we can do a get status and
28:49 - you'll see
28:50 - right well one the git ignores change
28:52 - but also the to do.js let's hit save
28:55 - get status again
28:57 - there you go to do js so we'll just add
29:00 - those changes commit those changes
29:03 - right and for this commit message we can
29:05 - say add
29:06 - netlify
29:08 - see
29:12 - all right and then we do a good push
29:14 - awesome so now it's pushed it should
29:16 - trigger the deployment of our site so
29:18 - let's hit refresh here and we can see
29:20 - solana to do dap
29:21 - right and we'll take a look
29:24 - and now
29:25 - we will wait for it to deploy
29:27 - alrighty so it looks like after some
29:29 - time the deployment is done and if you
29:31 - see this link right here you can
29:33 - literally send this link and put it on
29:34 - your portfolio and it will show you the
29:37 - app live all right so if i hit
29:39 - initialize bam right this is a live link
29:42 - every time i push my changes this will
29:44 - also get updated so that is awesome
29:47 - all right so we don't need to worry
29:48 - about any other setup we can
29:50 - now worry about setting up the solana
29:53 - part of this now all right so let's
29:55 - clean up a little bit over here this is
29:56 - our live link that's not reflective of
29:58 - our current changes at the moment so i'm
30:00 - just going to x out all the tabs we
30:02 - won't need
30:03 - you can x this out
30:05 - we'll save this for later but here we go
30:07 - so if we do yarn dev again
30:10 - right we can refresh this now
30:12 - and bam so
30:14 - one thing that this app is currently
30:15 - missing is that phantom wallet
30:17 - connection that i was talking about
30:19 - earlier the idea is that we want to
30:21 - connect our phantom all there should be
30:23 - a button right over here
30:25 - that's going to show what phantom while
30:27 - it's connected and it's going to ask us
30:29 - to connect in the first place
30:31 - okay so that's what we're going to set
30:32 - up now so let's go ahead and do that
30:34 - one of the first things that we're going
30:35 - to need to do is make this smaller
30:38 - and extend our code because we're going
30:40 - to be focused on the code now and let's
30:42 - go ahead and press command b or control
30:44 - b
30:45 - and go to your components
30:47 - and in your components folder we're
30:49 - going to make a new file and we're going
30:50 - to call this
30:51 - wallet
30:53 - connect
30:54 - provider
30:56 - dot
30:56 - js
30:58 - okay
30:59 - cool
31:00 - so
31:01 - again we're not going to focus too much
31:03 - on the react part what we want to do is
31:05 - import a couple different things we're
31:06 - going to import
31:08 - wallet
31:10 - adapter network right from solana wall
31:13 - adapter base right what these next
31:15 - couple imports are all essential so that
31:17 - we can connect any solana wallet to our
31:20 - app specifically we're going to be using
31:22 - phantom
31:23 - okay from there we're going to import
31:25 - and destructure we're going to get
31:27 - connection
31:28 - provider i'm not going to hit tab yet
31:30 - because there's another thing i want to
31:31 - import
31:32 - and wallet
31:34 - provider
31:35 - okay those are the two things we're
31:36 - going to need and this is going to come
31:38 - from
31:39 - solana
31:41 - at solana
31:42 - wallet adapter base oh i'd have to react
31:45 - actually there's a couple different ones
31:47 - wallet
31:48 - adapter
31:50 - and then react
31:51 - okay
31:52 - the next one
31:54 - is going to be
31:55 - import
31:57 - wallet modal provider right this is how
32:00 - we get the modal from
32:03 - solana
32:04 - uh wallet react ui i believe yep there
32:08 - you go next one this one's kind of a
32:10 - beefy one
32:11 - this one's gonna be import
32:13 - glow
32:14 - wallet adapter
32:17 - we also got phantom
32:19 - wallet
32:20 - adapter
32:21 - and we're going to use slope
32:23 - wallet adapter so these are the other
32:24 - wallets but again just in case you guys
32:27 - want to use a different one but i just
32:29 - want these three
32:30 - and i'll stop right there wallet adapter
32:33 - now we have so we're only we're not
32:34 - going to use all of these we're just
32:35 - going to use one we're going to do from
32:38 - at solana
32:40 - wallet adapter wallets all right so
32:42 - these are all the wallets right if you
32:44 - wanted to use a different one you could
32:46 - but we're pretty much going to use this
32:47 - one only
32:48 - okay
32:49 - and let's see if there's anything else
32:51 - there is
32:52 - import oh yeah cluster
32:54 - api url from solana web 3.js awesome
32:58 - there we go cool
33:00 - so
33:00 - to get started with this oh and also
33:02 - there's a one react hook we'll need and
33:04 - if you're familiar with it it's going to
33:05 - be that use memo again
33:07 - okay from react
33:09 - let's go all right so we got all the
33:10 - imports out of the way now for the
33:12 - actual code what we're going to do is
33:14 - write export const
33:16 - export const and we're going to write
33:18 - wallet
33:19 - connection provider right while connect
33:22 - provider if you remember this is what
33:24 - we're gonna wrap around the app the
33:26 - whole app so that we can use all these
33:28 - imports and make it really easy i don't
33:30 - have to write any login logic at all
33:33 - we're just importing everything we need
33:34 - and it's gonna do it all for us you're
33:36 - gonna see it's pretty awesome so while
33:38 - the connect provider that's what i'm
33:39 - going to call it and it's going to take
33:41 - in a function
33:43 - with the argument of children and we're
33:46 - going to do
33:46 - an arrow function
33:48 - and there we go all right there's our
33:50 - wallet connect provider
33:52 - and from here we can say const
33:54 - network and it's going to equal
33:57 - wallet adapter network right so now
33:59 - we're making use of that first this is
34:01 - where we define what network can we on
34:02 - and by network i mean testnet devnet
34:04 - mainnet so if you remember from earlier
34:06 - we're on the devnet and that's our
34:08 - network
34:09 - right this next point all right we're
34:11 - going to say cons endpoint equals use
34:14 - memo all right
34:16 - and then inside this memo it takes an
34:18 - arrow function
34:19 - boom
34:20 - and then say
34:21 - if
34:23 - network right is equal to
34:25 - walletadapternetwork.devnet
34:28 - what is this saying i'm just saying if
34:30 - my network is devnet right
34:33 - then we should return our endpoint and
34:36 - here is where we can actually use that
34:38 - quick note endpoint oh we gotta make
34:40 - this bigger you can actually see it
34:43 - there you go we can copy this
34:45 - and that's it right that's where quick
34:47 - note comes in clutch we can just put in
34:49 - a string here and paste that in there
34:52 - that is our
34:53 - network right it's called cold weathered
34:56 - layer yours might be different right but
34:58 - this is how we can connect to the chain
35:00 - all right amazing so now that quick
35:02 - notes are already set up and ready to go
35:04 - all we have to do is
35:06 - go below here
35:08 - in between this curly bracket and
35:09 - parenthesis we're going to put actually
35:11 - no we have to return something first we
35:13 - have to return
35:14 - that cluster api url and pass in network
35:18 - because that's the devnet all right and
35:21 - over here
35:22 - let's see am i missing something nope
35:24 - comma and then we can say bracket
35:27 - network
35:28 - there we go awesome so there it is
35:31 - conditional statement if it's devnet
35:33 - we'll use this endpoint that's all it is
35:36 - okay and then return this and there we
35:38 - go
35:39 - okay cool so this is still with all in
35:41 - the connection provider
35:43 - we want to make a variable here called
35:45 - wallets
35:46 - right and we say equals use memo and
35:50 - again memo takes in that anonymous
35:52 - function
35:53 - and all we have to write in here
35:55 - is just
35:56 - new phantom
35:59 - wallet adapter
36:00 - and then put this right here so let's
36:02 - say you don't want to use phantom you
36:03 - want to use give people options right
36:05 - this is also a cool thing if you want to
36:07 - give them options that have glow you can
36:10 - say new glow wallet adapter like here
36:13 - and then don't forget the parentheses
36:15 - okay so that's what you have to do if
36:16 - you want to do that but i don't have to
36:19 - because i'm just using phantom
36:21 - and this actually should all be an array
36:22 - now that i'm thinking about it
36:24 - so put all the wallets you want to put
36:26 - in that array and you should be good to
36:28 - go
36:28 - okay i'm trying to see if there's
36:30 - anything else
36:31 - oh yeah we do need this comma network
36:34 - okay
36:35 - cool and i know i'm writing a lot of
36:36 - code but we're going to see if this
36:38 - works or if this is causing any errors
36:40 - once i set it up yep so for example
36:42 - wallets was spelled wrong
36:44 - wallets there you go
36:45 - cool
36:46 - all right
36:48 - still within this curly bracket we want
36:50 - to return something we're going to
36:51 - return
36:53 - and here is where all the other imports
36:54 - are going to come into play right we
36:55 - want to make it so if i click this
36:57 - button a moda will pop up with the
36:59 - wallets and then i can click on phantom
37:01 - to connect to it to set up all of that
37:03 - we don't have to write anything
37:04 - necessarily besides just using it so
37:06 - let's set up our connection provider
37:08 - here's where we put it in our endpoint
37:10 - we can say endpoint pass that in as a
37:12 - prop then we can get our wallet provider
37:15 - yep just like that
37:17 - and if you type in wallets pass in all
37:20 - the wallets that we're using only using
37:22 - one and this another cool thing you can
37:24 - also write here is auto connect so if
37:25 - it's already connected like it's already
37:27 - established that you connected it before
37:29 - it will automatically connect it which
37:30 - is pretty sick
37:31 - so now we can do a wallet modal provider
37:34 - right so this is the modal part of our
37:36 - wallet
37:37 - and we can pass in the children yes
37:40 - okay and that's it i believe that's
37:43 - everything we'll need and if there's
37:44 - anything that comes up error wise we'll
37:46 - see it when i try to set this up all
37:47 - right so we're not completely done we
37:49 - set up the component
37:50 - but it's not being in use just yet
37:53 - so like i said we want to wrap this
37:55 - whole provider around in our entire app
37:57 - so if you remember our little tree that
37:59 - we drew it's going to be under pages and
38:02 - underscore app is where we want to do
38:04 - all the magic so the first thing that
38:06 - was needed is we need to import that
38:08 - wallet
38:09 - connection or connect provider right
38:12 - from that
38:14 - components slash wallet connect provider
38:17 - i'm pretty sure it's the same name if
38:19 - there is an error it's probably going to
38:20 - be a spelling one and another thing that
38:22 - we're going to need is the solana wallet
38:24 - css that we need to import so that is
38:27 - going to be import at
38:29 - solana
38:30 - wallet adapter
38:33 - react it's not this it's ui to get the
38:36 - ui and then you need the styles.css
38:38 - without it it's gonna look really funny
38:39 - it's just a button so let's hit save all
38:42 - right yep and we're not using we're not
38:44 - wrapping it just yet so let's wrap it
38:46 - let's say
38:48 - wallet
38:49 - connect provider
38:51 - and let's wrap
38:53 - the entire thing
38:54 - okay cool and if i hit save look at that
38:58 - so something popped up when i hit save
39:00 - my phantom wallet automatically is
39:02 - asking me to log in saying enter my
39:03 - password the cool thing is it's doing
39:05 - this but we don't have an actual button
39:07 - associated with it just yet so let's add
39:10 - that button now
39:11 - and to add that button if you remember
39:13 - if that button is not an app or should
39:15 - it be it should be next to this
39:16 - initialize button and the input
39:19 - so if you don't know
39:20 - it's actually going to be an index right
39:22 - if we take a look at the code if you
39:23 - want to understand it if there's
39:25 - somebody initialized
39:26 - then load that input that you saw
39:29 - if initialized is false it's a state
39:32 - then you should see the initialize
39:34 - button and then to the next initialize
39:36 - button right where the exact spot where
39:38 - i want it to be right here
39:39 - is this right here wallet multi button
39:43 - okay
39:44 - what is a wallet multi button lance i'm
39:46 - glad you asked well it's something we
39:47 - imported from solana wallet adapter
39:50 - which is essentially
39:52 - what's allowing us
39:53 - to have a button right there so let's
39:55 - save this right here
39:56 - hey there we go you see it select wallet
39:59 - right so
40:00 - this is possible because of that
40:02 - provider so if we go back to app.js real
40:04 - quickly guys and we remove the solana
40:07 - wallet css for example
40:09 - look at that it's ugly but since we
40:11 - imported the css it's nice and all of
40:13 - that wallet connect provider code that
40:15 - we selected or set up is connected to
40:18 - this button i didn't have to write no
40:19 - logic i just had to set up some
40:21 - boilerplate code isn't that awesome so
40:23 - if i click connect wallet here is the
40:25 - detected wallets right just the phantom
40:27 - one connect should ask me to log in
40:29 - actually
40:30 - so let's put test one two three four
40:32 - and bam so it's connecting let's see if
40:35 - it refreshes there you go so now i'm
40:36 - connected right so this wallet is
40:38 - officially connected to the app right if
40:40 - i were to disconnect it
40:43 - and i switched my wallet the cool thing
40:45 - about phantom you can actually have
40:46 - multiple wallets if i go to wad3 right
40:48 - this is chc 3k select wallet boom ch3k
40:54 - so now i'm connected to wallet number
40:55 - two all right so whatever wallet you
40:56 - want to log in with go ahead and do that
40:58 - i'm gonna stick with four
40:59 - since that was the one we were using
41:01 - before
41:02 - no pun intend
41:03 - so connect and bam there we go we have a
41:06 - phantom login button
41:09 - alright so now that phantom is connected
41:11 - to our app we have the ability to run
41:14 - transactions using our wallet as you can
41:16 - see i can actually spend my for solana
41:19 - with our app now
41:20 - so later in the video i want to show you
41:22 - how to get more teslan up but for now
41:23 - let me show you the latest technology
41:25 - right here and it's called solana
41:27 - playground so if i make this a little
41:29 - smaller you can see this is what you'll
41:31 - call the smart contract for the people
41:34 - coming from solidity this is like remix
41:36 - you can write your smart contract here
41:38 - and deploy it to the blockchain and then
41:39 - later in the video i'll show you guys
41:40 - how to connect it with our front-end app
41:43 - got it cool so typically with a smart
41:46 - contract you wouldn't make a to-do app
41:49 - as the contract but we're going to use
41:50 - that for my beginners out there to
41:52 - understand how the smart contract works
41:55 - okay so what i'll hear
41:57 - let me just give you a quick tour this
41:59 - is going to be the idea of our program
42:01 - and here is the actual program itself
42:04 - right and solana they're called programs
42:06 - so
42:07 - here this is the hello anchor the
42:09 - default program and has one function and
42:11 - it's called initialize okay and every
42:15 - function usually comes with a struct so
42:17 - this is the initialize function and
42:19 - here's the initialize struct right and
42:21 - this is what this contains right a new
42:23 - account a sign in system program don't
42:26 - worry we'll go into more detail later
42:27 - but what i want you guys to do right now
42:29 - is let's select all of it and let's go
42:31 - ahead and click delete because we're
42:33 - going to do this from scratch let's hit
42:35 - delete
42:36 - and there we go
42:37 - cool
42:38 - so another thing that i'm going to do is
42:39 - i'm going to create a couple different
42:41 - files and you don't have to understand
42:44 - what they do just yet these are what
42:45 - i'll call given files so let's get
42:48 - started all right so i added the given
42:51 - files that we'll need so i'll make this
42:52 - smaller because we can full screen this
42:54 - now because we're not going to write any
42:56 - code with our next app like i said
42:57 - that's done we just got to set up the
42:58 - back end so you can make this smaller
43:01 - for now let's take a little bit of a
43:03 - tour so if i open this up you're going
43:04 - to see three extra files on top of the
43:07 - lib.rs lib.rs think of this as the main
43:10 - file all the smart contract logic goes
43:12 - here think of the rest of these files
43:15 - right like constant error and states
43:18 - think of these as
43:20 - modules that i'm going to import
43:22 - to the lib.rs so if you think about it
43:25 - that way then you can let's take a look
43:27 - at them so if you look at
43:28 - constants.rs you can see there's some
43:31 - code in there same thing with error same
43:33 - thing with states right you what you
43:34 - need to know is understand what they're
43:36 - for so the easiest one to understand is
43:38 - error.rs
43:39 - right error is a file that holds all the
43:42 - error messages how do i know it's
43:45 - because right here it says message
43:46 - already marked and that's the error name
43:49 - right that's all it's doing
43:51 - for example if i were to do as completed
43:54 - right initialize mark this as completed
43:56 - can i mark this as completed again no so
43:58 - we should get an error message that says
44:00 - already marked and that's what this is
44:02 - doing it's holding all those types of
44:04 - errors we could run into if you have
44:05 - more you can add one right here just
44:07 - copy this same format
44:09 - okay another thing that's easy to
44:11 - understand is something called states.rs
44:13 - the name of this file doesn't matter
44:15 - that much you can change this to extra
44:16 - structs more.rs and you understand is
44:19 - what the hell is a user profile and what
44:21 - the hell is a to do account again if you
44:23 - want to learn how to read someone else's
44:24 - code if you look at to do count here
44:27 - it has a type of u8 right when you're
44:30 - working with rust or anchor if you're
44:32 - familiar with typescript at all it shows
44:34 - you the type of this what i'll call key
44:36 - for now so u8 means unsigned integer of
44:40 - eight bytes right so it's a small
44:42 - for you to understand what this is think
44:43 - of to do count what is to do count if
44:45 - there's a user with to do count what
44:47 - does that mean so if my user has a to-do
44:50 - count of zero how many to-dos does it
44:52 - have
44:53 - it has zero to-do's right so this is
44:56 - just a number that shows how many
44:58 - to-do's does this user have what was
45:00 - their last to-do count like number and
45:02 - what's their authority and i'll dive
45:04 - into more on authority later but that's
45:06 - what user profile think of it as the
45:08 - user that's logged in because if i
45:10 - connect my wallet should i see
45:13 - causes to do or should i see my to-do's
45:16 - my to-do's right so we have to generate
45:18 - a unique user profile
45:20 - on the back end
45:21 - you with me so far so with that logic
45:23 - what's to do account
45:25 - right so if you look at the naming here
45:28 - content
45:29 - is similar to our static data right
45:32 - content was like the learn solana
45:34 - all right what is the task idx is the
45:36 - index and marked it's a boolean so if
45:39 - it's a boolean that means it could be
45:40 - true or false so now do you see where
45:42 - the static data helps us now so this
45:44 - represents one to do
45:46 - right for every
45:48 - to do item we want to make an account on
45:51 - the blockchain right so we can have
45:53 - several to do accounts and each to do
45:55 - account is going to hold this
45:57 - information and there's also several
45:59 - user profiles
46:00 - that can generate their to-do accounts
46:02 - they have the authority so the authority
46:04 - of this account is going to be depend on
46:07 - the author we're going to store who made
46:09 - that to do as well okay user profile
46:11 - struct to do a construct okay next thing
46:15 - is the constants.rs you don't need to
46:16 - worry too much about this but we're
46:18 - going to use this later when it comes to
46:20 - seeds so just remember user state and to
46:22 - do state for testing purposes later
46:25 - cool so with that out of the way
46:27 - that's the introduction the cool part
46:29 - about
46:30 - solano playground is that you don't have
46:31 - to install anchor to your vs code you
46:34 - can build and deploy it from here you
46:35 - can also
46:36 - test your functions and that's what's
46:38 - super powerful i actually know the lead
46:40 - developer for this his name is acharon
46:42 - and he has helped me and walked me
46:44 - through how to use this okay
46:46 - cool so shout out to acheron main thing
46:49 - that i want to get over with you now is
46:51 - let's start coding the contract
46:53 - all right so if you want to get started
46:55 - writing up your smart contract the first
46:57 - thing you got to write in line one is
46:58 - something called use
47:00 - anchor
47:02 - lang
47:03 - clint colon prelude so let's break this
47:05 - down so far i'm not going to go over
47:07 - every single thing because sometimes you
47:09 - need to understand russ to fully
47:11 - understand it but
47:13 - what you can understand about anchor
47:14 - lang is that it's a library right i want
47:16 - to use this library and when i do call
47:18 - in it's basically saying give me
47:20 - everything in anchor lang and get me
47:22 - prelude this could be different things
47:24 - you could this could be signer there's
47:25 - different things that you can get from
47:27 - anchor lang but prelude is going to give
47:29 - you a lot of different things that we
47:31 - can use all at once so then if i do
47:33 - colon colon star i'm saying give me
47:35 - everything from prelude all right that's
47:38 - all it is don't look too much into it
47:40 - usually if you see the other files it's
47:42 - using
47:42 - that same library you with me
47:45 - cool
47:46 - so next thing you want to do is
47:48 - as you can see we have error we have
47:49 - constants you have states but do they
47:51 - exist in the lib.rs just right now
47:55 - they don't so how do we bring them into
47:56 - the lib.rs i'm glad you asked because
47:59 - it's going to be pub mod for module
48:01 - constant and one thing i'll say this
48:03 - right now is with rust and anchor which
48:06 - is the language that the solana runs in
48:08 - natively you've had to put these
48:10 - semicolons right we got away with these
48:12 - in javascript where we don't have to put
48:13 - them but with some languages you need to
48:15 - put a semicolon to indicate that it's
48:17 - the end of the coding line so if you
48:19 - don't have this you'll get an error
48:21 - so go ahead and add pub mod constant and
48:24 - then to get the rest of them i'm going
48:26 - to type them in okay then pop them on
48:27 - states
48:29 - cool so we have these three files
48:33 - but one thing if you want to use
48:35 - something from constants let's say for
48:37 - example i want to get this variable user
48:38 - in order to use it in lib.rs i would
48:41 - have to say constant colon user tag to
48:44 - use it get me user tag
48:46 - from constant but that could be annoying
48:48 - because especially if i write some long
48:50 - piece of code it could look really hard
48:52 - to read the readability goes down but if
48:54 - you don't want to do it there's a nice
48:55 - thing called use crate
48:57 - right it's basically you can look like
48:58 - it look at this as destructuring if that
49:00 - makes sense to you we can say use create
49:03 - colon constant colon colon star
49:06 - all right we can get everything from
49:08 - constant and then we can say comma error
49:11 - right column colon star same thing with
49:14 - states colon colon star perfect and
49:17 - semicolon right there so basically when
49:19 - you use crate crate if you don't know if
49:23 - you guys know what package json is right
49:25 - crate is essentially your npm packages
49:27 - right so this is the modules that i want
49:29 - to use get me everything from those
49:31 - modules so instead of writing constant
49:33 - colon colon user tag i can just say user
49:37 - tag underscore tag and it knows what i'm
49:39 - talking about that's all that's
49:41 - happening from lines 1 through six
49:44 - right
49:44 - use crate puts these guys into this
49:48 - scope
49:49 - awesome another standard thing that it
49:51 - has is a declare underscore id and then
49:54 - a bang here here you're gonna put in
49:57 - whatever program id this comes with i
49:59 - have the finish code right
50:02 - over here i saved the id if you want to
50:04 - use
50:05 - my program id you'd put this but you
50:07 - should generate your own program id
50:09 - right so if i were to go to build go to
50:13 - extra right go to uh program you can get
50:16 - a new one by clicking new here right but
50:18 - there's nothing there's nothing in the
50:19 - smart contract yet so let's not build
50:21 - anything so for now we can leave this
50:24 - blank
50:25 - okay this is just going to tell us hey
50:26 - what's the id of this program
50:28 - awesome so now let's get to the actual
50:31 - smart contract itself we can call it we
50:33 - can do hashtag
50:34 - square
50:35 - like brackets program right
50:38 - every time you see like a hashtag
50:39 - brackets and then something in here
50:41 - that's what you call a
50:43 - macro all right a macro it's just
50:45 - something that's rust specific and
50:47 - underneath this there's a bunch of under
50:49 - the hood code that makes things a lot
50:51 - easier for us it's pretty powerful think
50:53 - of it like a black box and if you look
50:55 - into that black box it does a bunch of
50:56 - different things right we can spend a
50:58 - whole lesson on the different macros but
51:00 - i would refer to the anchor docs if you
51:03 - want to understand more about this i'm
51:05 - only going to tell you what you need to
51:06 - know so what you need to know about
51:07 - program is that everything underneath
51:10 - this right here is related to this
51:12 - program so we can say pub mod and then
51:14 - the name of your program i'll call it
51:15 - clever to do and then put curly brackets
51:18 - right there
51:19 - and everything within this scope is part
51:22 - of our smart contract you could say
51:24 - okay so what do you want to do with this
51:26 - smart contract let's do some pseudocode
51:27 - guys right so in our front end what are
51:30 - we doing that's what a good question
51:31 - asks if you want to make it all back-end
51:33 - specific and by backing i mean
51:34 - blockchain what kind of features do we
51:36 - need so let's hit refresh
51:37 - right so one thing i'll notice is that
51:39 - we'll need
51:40 - this button right here on the blockchain
51:43 - as well in our contract we need to be
51:45 - able to initialize the user
51:47 - all right so we need to be able to
51:49 - initialize the user so let's write that
51:52 - initialize a user all right what should
51:54 - that initialize user do
51:56 - it should add
51:58 - a
51:59 - user profile right remember what a user
52:01 - profile is right it's something we keep
52:02 - track of to the blockchain
52:05 - right and right we don't want to just
52:07 - add a user profile because if you look
52:08 - at our states is there a number
52:10 - associated with to do count no it just
52:12 - says it has a type of u8 but it does it
52:14 - could start at five it could start at
52:15 - zero we can say add values right for the
52:20 - default
52:21 - data you know what i mean by that for
52:23 - the default data the to do count when i
52:25 - first initialize the user should be
52:27 - zero
52:28 - right last to do zero
52:30 - authority that's going to be your
52:33 - wallet address so if i click this select
52:36 - wallet it's going to be this that's our
52:38 - authority cool so we want to initialize
52:40 - that
52:41 - in our function what else do we want to
52:43 - do with this smart contract
52:45 - you want to let's take a look
52:47 - be able to add a to-do add what to do
52:50 - right now
52:51 - it's done statically you want to be able
52:53 - to add it to do but where are we adding
52:54 - a to-do
52:56 - towards we want to add a to-do to the
52:58 - blockchain do we have any structure that
53:00 - represents a to do
53:02 - we do it's going to be in states so
53:05 - right we want to add a to-do and we'll
53:07 - flash all of these out later on we want
53:09 - to add a to-do
53:10 - can you think of anything else
53:12 - we want to be able to market to do as
53:14 - completed attitude is done
53:15 - right
53:17 - market to do and this is something cool
53:19 - right there's actually a way to remove a
53:21 - to-do from the blockchain if you know
53:22 - anything about blockchain at all you
53:24 - can't actually delete data like remove
53:27 - data from the blockchain but there is a
53:29 - workaround to remove the to do so you
53:31 - don't see it anymore right you can close
53:34 - the pda the profile derive account right
53:36 - you're going to see me hear me say pda a
53:37 - couple times all right so these are the
53:39 - three main functions that we want to
53:40 - create and like you saw earlier we want
53:43 - to create structs
53:44 - for each of these functions
53:46 - okay
53:47 - so the process that we're going to do is
53:49 - create the function create the struct
53:52 - and then test that's how you should be
53:54 - making and crafting these contracts okay
53:57 - so cool so let's talk about initializing
53:59 - a user
54:00 - so one of the first things we can do i
54:02 - can delete all this for now
54:04 - all right just so we don't get lost in
54:05 - the sauce so we have
54:07 - all the logic within the scope can i use
54:12 - anything from these libraries in this
54:14 - scope all right if you said no you're
54:16 - correct why can't i use
54:18 - a user tag in here for example
54:21 - that's because use crate brings it to
54:25 - this scope everything up here if you
54:27 - want to bring it into this scope you're
54:28 - going to do something called
54:30 - use super
54:32 - right and then do colon colon star and
54:35 - then semicolon right use crate brings
54:38 - everything to this scope usual lets you
54:40 - bring everything into this scope so now
54:42 - you can say user tag here and it knows
54:44 - what it's doing
54:46 - if you don't have this let's say it's
54:47 - gone you'd have to do the constant clone
54:50 - thing again then it knows what it's
54:51 - talking about
54:52 - all right it's just a way to import them
54:54 - into the scope and another thing i want
54:56 - to point out you don't have to make
54:58 - separate files you can technically put
55:00 - everything in line like this so constant
55:03 - and then say user tag const constant
55:05 - user and basically this is how we did
55:07 - spotify and tech talk we're getting
55:08 - better we're improving so we don't need
55:10 - to do this in line but you could if you
55:11 - want to okay awesome so we have use
55:14 - super we're good to go on that
55:16 - right hit enter here and to make a
55:18 - function on anchor you can say pub fn
55:22 - this represents a function right and say
55:24 - initialize
55:27 - underscore user right the naming doesn't
55:29 - matter you can call it whatever
55:32 - but it's just like any other function so
55:33 - this is an argument here or you can put
55:36 - arguments here
55:37 - so i'm just going to format it like so
55:39 - and what does this take in it's going to
55:40 - take in context
55:42 - right
55:44 - and because we're specifying the type
55:46 - the context is what the context that
55:48 - it's expecting is something called
55:51 - initialize user right there's usually a
55:53 - struct associated with the function not
55:56 - every time this could actually be blank
55:58 - but
55:59 - this time we want to give context on
56:00 - what initializing a user is
56:03 - okay so it's going to take in some
56:04 - context and then from there you want to
56:06 - do dash arrow then result
56:09 - right what do we get from this the
56:10 - result is written like this
56:13 - and here we define what this function
56:14 - does so other than this
56:16 - result here or putting the type it's
56:19 - just like a function in javascript right
56:21 - here is where we write the logic right
56:23 - so it'd be like write logic here
56:27 - you with me
56:28 - i hope it's not too bad guys all right
56:30 - so what we want to do here is initially
56:33 - let me play space initialize
56:36 - user profile with default data okay you
56:39 - guys know what this means this means put
56:41 - the to do get the user profile and mark
56:44 - it as zero so if i were to do pseudocode
56:46 - do i have access to user profile here
56:49 - you might say yes because we're
56:50 - importing states but i'd say not yet
56:53 - because i need to do something with our
56:55 - argument our context but and does
56:58 - initialize user exist
57:00 - nah it doesn't exist yet so let's make
57:02 - it exist so right now we have what i'll
57:04 - call the skeleton of the function it's
57:06 - all set up we just have to write the
57:07 - logic but before we write the logic we
57:09 - want to do something with this struct so
57:12 - let's define a struct right now so i'm
57:14 - going to wait a second okay and now
57:16 - let's make a stroke and to make a struct
57:19 - you want to have this right here so you
57:21 - want to derive parentheses accounts
57:24 - right
57:25 - and again this is a macro and you don't
57:27 - have to entirely fully understand what
57:29 - this does yet if you did want to learn
57:31 - more you can search up this macro on
57:33 - anchor documents
57:34 - but i'm only going to tell you what you
57:35 - need to know and what i need to know is
57:37 - that you also want another one here
57:38 - called instruction parentheses all right
57:42 - everything that comes from this macro is
57:45 - going to be related to what you put
57:47 - under it so underneath these two things
57:49 - i'm going to put pub struct or this is
57:51 - how you create a struct public structure
57:53 - and it's going to be called the same
57:55 - name as this so now it'll exist
57:58 - initialize
58:00 - all right
58:01 - and another thing you want to put here
58:02 - is apostrophe info right
58:05 - i ask developers anchor developers what
58:08 - this means and from what they tell me
58:10 - it's very rust specific it's called a
58:12 - lifetime variable
58:14 - with rust it's not like javascript if i
58:16 - were to create a array in memory right
58:18 - let's say let's make this text
58:20 - let
58:21 - array
58:23 - equals one two three right if i were to
58:26 - make that state of code this array will
58:29 - live on forever until i do something
58:31 - with it with rust you need to let us the
58:34 - memory know when does this array exist
58:37 - otherwise it's just going to just take
58:38 - up space and there's a lot of data can
58:41 - make performance a lot worse with rust
58:43 - but since it's a lower level language
58:45 - you can put a lifetime variable with the
58:47 - struct and only exist as long as it
58:50 - needs to that's all you need to know
58:51 - that's the basis you don't have to go
58:53 - into the technicality of it just know
58:54 - that info is important for this
58:57 - okay hope i didn't lose you with that
58:59 - there's initialize user that's done
59:02 - cool so within these two curly brackets
59:04 - is the scope of the struct let's define
59:07 - what the hell this structure is we're
59:08 - going to put another macro here we're
59:10 - going to call it count
59:12 - mute right anytime you see mute this
59:14 - means immutable and that it can change
59:16 - so what can change here it's going to be
59:18 - the authority all right
59:20 - who has the authority to initialize the
59:23 - user and if you ask them if you ask me
59:25 - or mr b colon the authority is going to
59:28 - be whatever wallet is connected
59:30 - that guy is in charge of the user
59:33 - profile or that user account
59:35 - okay so the type that we're expecting
59:37 - for the authority is gonna be signer and
59:40 - then the lifetime variable info again
59:43 - okay and then you're gonna put a comma
59:45 - awesome so let's break down what we have
59:46 - so far where the hell does designer come
59:49 - from lance you're probably like i'm so
59:50 - lost lance i'm overwhelmed don't worry
59:52 - about it let's break it down designer
59:54 - doesn't exist but do i have to make that
59:56 - i'll let you know you don't have to make
59:58 - it right where is designer coming from
60:00 - it's actually coming from anchor lane
60:01 - right it's not it's got prelude but you
60:03 - can also get signer from here it's built
60:05 - in
60:06 - so that's why the libraries and the
60:08 - macros makes it easier we can just say
60:09 - signer here signer just represents who's
60:12 - approving these transactions who's
60:14 - approving initialize user the signer is
60:17 - okay
60:18 - cool now we need to create we need to be
60:21 - able to generate what the user profile
60:23 - is so to do that we need to define this
60:26 - right here
60:27 - hashtag brackets account and parentheses
60:30 - right similar to this but we're not
60:32 - going to put mute here there's actually
60:34 - actually some things that we need to
60:35 - initialize right you're going to see
60:36 - this with a lot of different structs
60:38 - so you're going to see init almost every
60:40 - single time you're going to see seeds
60:43 - and this is going to equal an array
60:45 - right so let's just break down what
60:46 - seeds is there's a whole algorithm to
60:48 - generate a unique seed the easiest way
60:51 - for me to visualize this is simple
60:54 - to visualize this what i like to do is
60:56 - do you guys remember dice bear we might
60:57 - have used this in an earlier video to
60:59 - generate a random profile picture right
61:01 - so let's say i type the letter
61:04 - l this is my input for the seed and that
61:07 - will generate a random picture based on
61:10 - what i inputted here so if i put the
61:12 - word lance
61:13 - that's the picture that lance comes up
61:15 - with right if i put lance 1 2 3 that's
61:17 - the profile picture that i create with
61:19 - seeds
61:20 - here we want to generate a unique oh you
61:23 - want to take the seat put the c's in
61:24 - here and it will generate a random
61:26 - string of like random letters and
61:28 - numbers based on what you put here
61:30 - okay
61:32 - so what we want to put for the seeds is
61:34 - user
61:35 - tag right so now we're using that
61:37 - constant from here right and we can use
61:38 - it because of use create and use super
61:40 - all right so we got user tag
61:42 - another thing that we're going to use to
61:44 - generate a unique uh i'll call profile
61:45 - picture or string is going to be and the
61:49 - authority so what it'll generate from
61:51 - these seeds is it's going to take a user
61:53 - tag it's going to take the authority
61:55 - right but we can't just write authority
61:56 - we just have to write authority.key
61:59 - built-in method dot as
62:01 - ref
62:02 - boom
62:03 - okay all you need to know is that this
62:05 - will generate a new thing so you can
62:06 - look at this it's like me writing user
62:09 - state right and you're wondering why i'm
62:11 - using user state if you look at constant
62:14 - here user tag hold user state that's
62:16 - string and it's going to come into play
62:18 - later for testing then you want to put
62:20 - in the authority
62:22 - the authority key and that's going to be
62:24 - like a random set of letters and numbers
62:26 - right it's going to be your public key
62:27 - so let's just say it's 1 2 3 and this
62:30 - would be the unique string that it
62:31 - generates for the user profile okay this
62:34 - is what it's going to create
62:36 - if you understand that we can keep going
62:38 - so after you put what you're going to
62:39 - put as the seeds put a comma
62:42 - and then put this magic word called bump
62:44 - the cool thing about bump is that it's
62:46 - going to generate the user profile in
62:48 - this case our user account
62:50 - and based on that it's going to check
62:51 - does this
62:52 - account exist does this profile picture
62:55 - exist
62:56 - if it does exist already bump will bump
62:58 - it up one be like does this one exist
63:01 - what if it does it's say let's say it
63:02 - does all right okay one two four exists
63:04 - what about one two that exists let's say
63:06 - one two six if that doesn't exist that's
63:09 - what it's going to use so that's what
63:10 - bump is for so you don't have any
63:11 - duplicates okay you can also code up
63:13 - your own bump by the way if you don't
63:16 - code up your own bump then it's gonna do
63:18 - it there's like a default bump here
63:20 - okay cool and next we can set specific
63:23 - attributes we can say that the payer of
63:25 - this who's gonna pay for this is the
63:27 - authority
63:28 - right
63:29 - is the authority and another thing
63:31 - that's very rust specific is that you
63:32 - need to tell your code how much space
63:35 - does this take up with javascript i can
63:38 - put any size array any size data right
63:41 - with rust you have to say how much space
63:44 - is this going to cost so that russ knows
63:46 - exactly what's going on when you have
63:48 - errors so rust is a lot better for error
63:49 - handling let's put space
63:52 - and it's going to be 8
63:53 - plus td all right
63:56 - mem
63:57 - size underscore of colon and then you
64:00 - know again you don't have to don't get
64:01 - lost or scared by this it's basically
64:02 - just getting the size of
64:05 - right the user
64:07 - profile hey
64:09 - where does user profile come from guys
64:10 - user profile is coming from the states
64:13 - so however big user profile is wait
64:16 - where am i however big user profile is
64:19 - that's the space it takes
64:21 - eight plus the size of whatever user
64:22 - profile is
64:24 - okay
64:25 - so that's that was all set up the next
64:27 - thing we're gonna need is pub
64:30 - user
64:31 - profile all right all that information
64:33 - it's related to whatever is underneath
64:35 - it so the user profile that you get is
64:37 - gonna be stored in something called a
64:39 - box right it's just a place to store
64:41 - memory store a place in memory
64:44 - that russ can point to and what you need
64:46 - to worry about is that it's going to
64:46 - have be an account
64:48 - the lifetime variable of info
64:50 - and the user profile struct
64:54 - okay i know that was a mouthful this is
64:56 - a lot but basically there's a box in
64:59 - memory
65:00 - that holds an account and in that
65:02 - account holds our user profile that's
65:04 - what this
65:05 - is expecting that's the type it's
65:07 - expecting i didn't say equals keep in
65:08 - mind it didn't say equals i said that's
65:11 - what to expect from this user profile so
65:12 - if i get anything other than this that's
65:14 - going to generate an error
65:15 - but it won't so other than that let's
65:17 - put some space here and then say pub
65:19 - system underscore program and that's
65:22 - simple you're just going to use this
65:23 - program struct again given to us
65:26 - you don't have to create it and it's
65:28 - going to take in this system
65:30 - cool this one is not as important
65:33 - but um
65:34 - it's it's needed so system program is
65:36 - program info system and there we go
65:39 - that's the struct for initialize user
65:41 - it's all done right our goal now
65:44 - is to use that information
65:47 - right of this struct
65:49 - and add this
65:51 - logic to it so our internet initialize
65:53 - user is related to our user profile so
65:55 - if i say it's something like ctx if i
65:57 - were to print this
65:58 - i would get the this struct so let's do
66:01 - something with it so the first thing i
66:02 - want to do right
66:04 - is say
66:06 - ctx right dot accounts right this is how
66:09 - we get it ctx is the initialize user
66:12 - dot account is what guys
66:14 - what do you think accounts is
66:16 - right you see that there's accounts
66:18 - right here so if i wanted the authority
66:20 - how would i get the authority we could
66:22 - say dot authority all right and if i
66:24 - wanted the key like the number
66:26 - specifically you can say dot key and
66:28 - there you go all right so that's an
66:30 - example of how to use stuff within the
66:32 - struct right we don't we can use this
66:34 - for later all right so the first thing
66:36 - i'll do in this function is let
66:39 - user
66:40 - profile
66:41 - okay this is not new we're creating a
66:43 - variable right not bad and i'm setting
66:45 - this variable equal to
66:48 - and mute all right this is new
66:50 - all right and mute is letting russ know
66:53 - that this variable can change
66:55 - if you don't put mute here and you try
66:57 - to change it later russ will panic it's
66:59 - called and he'll be like hey what you
67:00 - doing with that variable we don't want
67:02 - that we're like yo yo yo i will let you
67:04 - know that n mute this can change right
67:06 - so if this can change uh we want to set
67:09 - this variable user profile
67:12 - to the user profile so how do we get
67:14 - these protocol we can get it from our
67:15 - context we can get it from the struct to
67:17 - get into inside like another layer
67:19 - inside of it we can do accounts
67:22 - right and then we can do dot let's take
67:24 - a look
67:25 - user profile right because it's going to
67:27 - generate a user profile for us so the
67:29 - user profile is getting stored in that
67:32 - variable
67:34 - i hope you're following along guys
67:36 - so
67:36 - there we go
67:38 - make a variable called user profile get
67:40 - me
67:41 - that user profile
67:42 - and store it in there
67:44 - the powerful thing about this and now
67:45 - it's easier to read all right if i say
67:47 - user profile profile
67:50 - dot to do count
67:53 - right
67:54 - where have you seen this before getting
67:55 - user profile dot to do count i'm getting
67:57 - it i have access now that's the keyword
68:00 - to this
68:01 - right
68:02 - so if we're initializing if we're
68:04 - initializing the to do count what should
68:06 - it be what should this
68:08 - be equal to zero
68:11 - is it clicking now all right let's say
68:13 - you every time you initialize zero you
68:14 - want to do count to start at five how
68:16 - would we do that
68:18 - you'd say equals five right but that
68:19 - doesn't make sense with our app they
68:20 - should all start with zero
68:22 - there you go and we just gotta do this
68:23 - for the rest of the data so if we look
68:25 - we should initialize the last to do and
68:27 - we should also listen to uh initialize
68:29 - who the authority is so let's do that
68:31 - i'm gonna scroll down so
68:34 - right if i go here ah we can just put it
68:36 - all together we can say uh user
68:39 - profile right that's the variable name
68:41 - and how do i get the last to do
68:44 - last underscore to do you guys are
68:45 - getting it
68:46 - and what should this be it should be
68:47 - defaulted to zero let's put our
68:49 - semicolons
68:51 - and then there's one more at the top was
68:53 - user
68:54 - profile dot authority what's the
68:56 - authority of this user profile account
68:58 - and you actually know the answer to this
69:00 - one i showed it i gave you a preview
69:02 - so i'm gonna give you guys one three
69:03 - seconds one
69:05 - two three if you got the answer you're a
69:08 - freaking pro all i have to do is say
69:09 - context all right got accounts
69:12 - and then
69:13 - dot authority
69:15 - so you can say dot
69:16 - authority and if you want the actual key
69:18 - you can say dot t
69:21 - wham bam there we go so now we
69:23 - successfully initialize the user profile
69:26 - with
69:27 - default
69:28 - data and it's reusable to any account
69:32 - right that's the power and then
69:34 - afterwards we need uh some sort of like
69:37 - return and you can use something called
69:39 - okay it's gonna return either if this
69:41 - all works or not so if it's all good
69:43 - this logic is all sound right you can
69:45 - just say okay here one small thing is
69:47 - like if you wanted to return like 5 or
69:49 - 10 from this function you can just put
69:51 - that here and that's what you get back
69:53 - but we're not really necessarily
69:54 - returning anything we just need to
69:56 - initialize these values
69:58 - with me so far
70:00 - awesome but guess what guys that's it
70:01 - that's our first function right that's
70:03 - the initialize user and that's the
70:05 - struct we should be able to test it now
70:08 - so let's go ahead and do that
70:10 - now to get started with testing there's
70:11 - a couple things you need to do like you
70:13 - saw we don't have a new program id and
70:15 - we haven't even built or deployed this
70:17 - contract to even test it so if you see
70:18 - program is not built one of the first
70:20 - things you have to do is see this not
70:22 - connected if it says not connected click
70:25 - on it and make sure you
70:27 - have a playground wallet playground
70:29 - there's a playground wallet that lives
70:30 - in salona playground that you can use
70:33 - you can't do anything locally but it's
70:34 - good to save it so let's hit save just
70:36 - in case but you can also hit continue
70:39 - i'm not going to do anything with that
70:40 - key pair but you can see connected to
70:42 - playground wallet and this is
70:45 - the website's wallet address that i'm
70:46 - connected to that's my wallet address
70:48 - right now it's not phantom it's the
70:50 - built-in salon playground
70:52 - all right so now that we're connected i
70:54 - have two solana right if i want to get
70:57 - more
70:58 - the cool thing is i can do solana
71:00 - airdrop
71:02 - two it's gonna retract request some
71:03 - solana and there you go now i have four
71:06 - solana as you can see right there so
71:07 - that's awesome it's all built in and
71:08 - another thing you wanna make sure is
71:10 - that you're in devnet right because
71:11 - that's the network we're working on
71:13 - and then from there go to here
71:15 - and let's go to extra program
71:17 - credentials and let's say you want to
71:19 - make a new id or new program and you
71:22 - already have an existing one you just
71:24 - have to click new and it's going to
71:26 - generate a new program id for you all
71:28 - right it's right here
71:29 - okay
71:30 - you need to have the authority yep
71:32 - let's go ahead we can copy it here or
71:34 - you don't have to it's going to put it
71:35 - automatically that's our new
71:37 - address and what we need to do now is
71:39 - let's hit build
71:41 - and when we hit build this is where all
71:43 - the errors are going to come up and if
71:45 - there's no errors it's going to say
71:46 - build successful i wouldn't be surprised
71:48 - if there's any errors mostly because i
71:50 - often forget the semicolons that's me
71:52 - being a javascript nude so there we go
71:55 - so a method not found in initialize user
71:58 - let's go ahead and try to troubleshoot
71:59 - this okay a couple different things
72:02 - unused imports
72:05 - oh i see on resort import crate got it
72:09 - all right so we got a couple errors and
72:10 - again that's usually if because i missed
72:12 - a semicolon or spelled something wrong
72:14 - so let me just double check my code
72:17 - oh yeah so it told me that i need to add
72:19 - another semicolon here and i'm getting a
72:21 - lot of errors and that's because
72:23 - oh yeah so you add a colon here if you
72:25 - copied everything like i did i was
72:26 - missing a colon here
72:28 - it's colon and i got a lot of errors
72:30 - because there's a semicolon missing
72:33 - ah so there's a semicolon here it said
72:36 - error let's go ahead and hit bill let's
72:38 - see if it's successful now hey look at
72:40 - that build successful right there's only
72:42 - one warning and that's because it's
72:44 - saying hey uh you imported this error
72:46 - but you're not using it and that makes
72:48 - sense because i haven't got to the error
72:50 - handling yet
72:51 - but that's just a warning so we can just
72:53 - deploy this as is
72:54 - right and we have our new program id
72:56 - let's go ahead and hit deploy let's see
72:59 - if we can deploy it
73:00 - awesome so it just told us we're poor
73:02 - because the deployment cost 4.86 and i
73:05 - only have four salon so if you remember
73:07 - you can use this cli right here and say
73:10 - solana airdrop 2.
73:12 - and this is how we can give our
73:13 - playground wallet some solana right when
73:16 - it comes to our phantom wallet i'll show
73:17 - you a different way how to do that later
73:20 - okay cool so it's using our salon player
73:21 - i have six sold now now let's hit deploy
73:24 - and let's watch the magic happen
73:26 - yep so this could take a couple minutes
73:27 - depending on the size and you know the
73:29 - network at the moment
73:31 - and i'll check back when it's done all
73:33 - righty so it's almost done now and let's
73:35 - give it a second
73:37 - bam deployment's successful as you can
73:39 - see it took my solana and it refunded it
73:41 - it was saw two and then it became four
73:43 - cool
73:44 - the cool thing about solana and the
73:45 - difference between this and solidity is
73:47 - that usually with solidity when you
73:49 - deploy a smart contract you can't change
73:51 - it anymore you can't change what it does
73:53 - with solana you have an ability to
73:56 - upgrade it right so that's like
73:57 - redeploying it with changes so we're
73:59 - going to do upgrading later for now
74:01 - we're just going to test the initialize
74:03 - user so how do we do tests with salon
74:05 - right it's good to test you know the
74:06 - functions that you create so you know if
74:08 - it works so we go in and test now we can
74:10 - talk right because you can see the
74:11 - instructions is initialize a user
74:14 - and the accounts that this can create is
74:16 - a user profile yeah and it's a do
74:19 - account right and we know what these are
74:21 - right so if
74:22 - the test is what helps me understand the
74:25 - code so if you're watching this right
74:26 - now and you're like lance i am so lost
74:29 - the test is what can really help you
74:30 - understand what the hell is going on so
74:32 - if you do fetch all user profiles or
74:35 - user accounts
74:36 - from that are created from this contract
74:39 - let's fetch them should there be any
74:40 - let's find out let's do fetch all and
74:42 - look at that there are no users that
74:45 - were created with this contract okay but
74:48 - what about to-do's are there any to-do's
74:51 - that live on this contract just yet you
74:53 - tell me
74:54 - right let's see if you're correct
74:56 - bam there's no to-do so
74:58 - if i want to create a user profile like
75:00 - you saw there was none
75:01 - how do we get them that's where this
75:03 - function comes in we got to initialize a
75:05 - user so let's go ahead and test it all
75:08 - right so we're going to go ahead and
75:09 - test initialize the user we know what it
75:12 - does because we made it together and
75:13 - it's going to take in an authority right
75:15 - so what is an authority the authority is
75:18 - who's ever the address the wallet
75:20 - address whoever is logged in so we can
75:21 - put my address
75:23 - right if you're talking about phantom it
75:24 - would be this address is the authority
75:26 - that's initializing
75:27 - right and for the user profile where
75:29 - does this user profile that's where this
75:31 - host section is we generate a unique
75:34 - user profile
75:35 - based on these seeds right the user tag
75:38 - seed and the authority key all right
75:41 - remember we're going to generate a
75:42 - unique profile or in this case a unique
75:44 - user profile okay so we connect that now
75:47 - that you know what it means and we want
75:48 - to do from seed so seed one is what
75:51 - it's user tag but that's a variable what
75:54 - is user tech all right what's what's the
75:55 - type is it a string a number let's check
75:57 - our constant
75:59 - it is a string and we don't want to
76:01 - write user tag we want to write user
76:03 - state so that's why i wrote it on
76:06 - dispair we want the string user state
76:08 - here
76:08 - and then we want to add another seed
76:10 - right because it takes two
76:12 - it takes in the authority key so this
76:15 - add seed
76:16 - what do you think is the type of the
76:17 - second seed is our authority a string
76:20 - number bytes right it's going to be pub
76:23 - and for pub key i'm going to copy
76:25 - authority right here
76:26 - because it's going to be the same
76:28 - and paste it so there we have our
76:30 - program id that's the that's the next
76:32 - thing it takes in but it's not part of
76:33 - the seeds then we hit generate
76:36 - and there you go it generated a unique
76:38 - public key for our user profile this is
76:42 - the address of our user profile on the
76:44 - blockchain
76:45 - and we can reference it later all right
76:47 - so now all i have to do is hit test and
76:49 - hopefully it passes if we did everything
76:51 - right so let's test if our function
76:52 - works let's go it says initialize user
76:55 - passed right so what does that mean what
76:57 - does that mean for us guys it means we
76:59 - successfully create a user profile
77:02 - where's the proof lance i don't
77:03 - understand let's go to user profile and
77:05 - now let's fetch all the accounts that we
77:07 - created with the contract there we go do
77:09 - you see it guys we have one one entry
77:11 - one user this is his public key all
77:14 - right that's his this is the account
77:16 - this is his authority and the last to do
77:18 - and it's to do count is zero we
77:20 - successfully initialized a user so
77:23 - if you understood at least half of that
77:25 - or this helped you right we're gonna
77:27 - rinse and repeat this process for the
77:29 - next two functions so i hope you're
77:31 - ready let's get started
77:34 - all right so with that out of the way
77:35 - let's get on to the next function right
77:37 - so with initialize user not only did we
77:39 - like we initialized the user but we also
77:42 - added a user account
77:44 - to our contract right so fetch all again
77:46 - we have one user the next thing we want
77:48 - to do is how do we add a to-do item
77:51 - right so the next function
77:53 - we're going to write it down here
77:55 - we're going to say
77:56 - pub fn
77:59 - add underscore to do right
78:02 - so there we go
78:04 - cool so we add function we take
78:06 - parentheses that's the function name and
78:08 - again this function what is it supposed
78:10 - to do it's supposed to add a to-do count
78:13 - to our smart contract or to the
78:15 - blockchain rather
78:17 - okay so what we should should happen
78:19 - after we run this test we should see
78:21 - uh one to do item for every single to do
78:24 - okay cool
78:26 - so let's get started building the
78:28 - skeleton of this function as you know
78:30 - i'm gonna hit enter here and say context
78:32 - all right it's gonna take in context
78:34 - right and context is gonna be what right
78:37 - so based on this last one should this be
78:39 - blank
78:41 - no there should be a struct associated
78:43 - with it right and it's going to be add
78:45 - to do
78:46 - that's the context of this right next is
78:49 - going to be a comma right
78:52 - so it's going to take in another one
78:54 - we're going to say
78:55 - underscore content right is going to be
78:58 - a what what's the type of content right
79:00 - if you're not sure
79:02 - if you remember our states here
79:05 - content is what type
79:07 - string all right so when we add it to do
79:09 - we should also be able to input the
79:13 - string all right
79:14 - i want to say yeah there you go
79:16 - so it's going to take into context and
79:18 - it's also going to be like hey what is
79:20 - the actual to to-do you want to add all
79:22 - right so if it's learn solana this is
79:24 - where it'll go underneath content
79:26 - cool
79:28 - after that we can add the arrow and then
79:31 - we can say our result again right do you
79:33 - see how there's a lot of like
79:34 - boilerplate code because that's why i
79:35 - don't want to focus too much on the
79:36 - little stuff right you'll understand
79:38 - them as we keep testing and practicing
79:41 - together
79:42 - okay so there was a result and what do
79:44 - we want to do here right
79:47 - we want to
79:48 - fill the to-do struct
79:52 - with the proper
79:55 - values right so what does that mean
79:56 - right
79:57 - so if we go to to do account what should
79:59 - be content
80:00 - content should be whatever we passed in
80:02 - as the string all right we should
80:04 - initially figure out the index all right
80:06 - so we need a way to
80:07 - uh keep track of the index right index
80:10 - is zero index is one
80:11 - and we also need to initialize if it's
80:14 - completed or not right so what should be
80:15 - the default boolean for marked right
80:19 - if you said false you got it right
80:21 - because if the default was true
80:24 - we'd only have completed ones at the
80:26 - start right if you want to only see
80:28 - uncompleted ones you want to initialize
80:30 - them as false
80:31 - alright so that's the pseudo code of the
80:33 - function you with me
80:35 - so you want to fill the destruct with
80:37 - the proper values and i will say to do a
80:40 - count
80:41 - right with the proper values
80:43 - okay so
80:45 - this is the skeleton of the app the next
80:47 - thing we did was we created the struct
80:49 - so we can understand what we can play
80:50 - with
80:52 - okay so i'm going to scroll down
80:54 - we're going to create the add to do
80:57 - struct so i'm going to do kind of
80:58 - something similar we're going to make
81:00 - that macro we're going to say derive
81:02 - let's get accounts into here
81:04 - and we also want to get instruction
81:07 - right instruction
81:10 - okay and underneath this
81:12 - is important so we'll say pub struct and
81:14 - what's the name of this struct
81:15 - right it's going to be add to do
81:18 - so we're going to call this one
81:20 - add
81:21 - to do
81:22 - right
81:24 - that's why i was very like slow with
81:26 - this struct because it's essentially the
81:28 - same thing just whatever's relevant to
81:30 - do account now instead of user profile
81:33 - okay so this is what i had to do let's
81:36 - make the scope of it which is right here
81:39 - and we can do another account right
81:42 - this time right we're going to have a
81:44 - couple different things right so okay
81:46 - initialize it automatically but we want
81:47 - to play enter
81:49 - and we want to make this mutable because
81:51 - it could be a different um
81:53 - user profile that's controlling this ad
81:55 - to do right we want to give it some
81:58 - seeds all right remember this and the
82:00 - seeds this is all this stuff is for the
82:03 - user profile associated with this to do
82:06 - which is going to be the same as before
82:08 - so it's going to be add
82:09 - user tag onto here
82:11 - and
82:12 - the authority
82:13 - dot key
82:15 - remember this one needs a dot as
82:17 - ref as well with parentheses
82:19 - okay
82:21 - so so far this
82:22 - is similar to this right now
82:25 - right
82:26 - and then we want to add our bump
82:29 - and then we want a has
82:31 - one equals authority
82:34 - okay
82:36 - awesome
82:38 - there you go and underneath this right
82:40 - we did all of this just to say
82:43 - uh that's related to the user profile
82:46 - which again expects a type of
82:48 - a box
82:50 - that holds an account that holds
82:53 - what what does this guy hold it holds
82:56 - a user profile
82:59 - okay cool
83:01 - all right so now we have the user
83:02 - profile associated with the to do
83:04 - next thing we're going to need is the
83:07 - actual to do account itself right so
83:09 - where this one generated a user profile
83:11 - we want to generate a to-do account
83:14 - right so to generate that one we're
83:16 - going to take
83:17 - an account again parentheses this is
83:19 - going to be similar here we want all of
83:21 - these the init and stuff like that so
83:23 - hit enter
83:24 - [Music]
83:26 - why does it look like this
83:28 - should be a different color
83:34 - strange but we'll figure it out later
83:36 - let's do just hashtag
83:39 - account
83:41 - [Music]
83:46 - oh i see it's because we never closed
83:48 - this properly
83:50 - there you go that looks better
83:52 - cool so thank god for color coding we're
83:53 - going to do this we're going to hit
83:55 - enter
83:56 - this one's going to have in it because
83:57 - we want to initialize it
83:59 - seeds equal to and this time it's
84:02 - different all right
84:03 - we're not going to put user tag here
84:05 - we're going to look at constants we want
84:07 - the to do tag and to do tag
84:09 - when we test it we're going to write to
84:11 - do state instead
84:13 - okay
84:14 - so let's go down inside these seeds we
84:17 - want to do tag which holds the string
84:22 - all right
84:23 - we want the authority dot key
84:27 - hold on
84:30 - the authority
84:31 - dot key
84:33 - parentheses and remember there's that
84:34 - dot as underscore ref that we need
84:38 - and then there's one more thing we need
84:42 - we're also going to need and right here
84:45 - the user profile right this is why we
84:48 - have to set it up earlier dot last to do
84:51 - all right what was the last
84:52 - index of that user right last to do
84:56 - index of that user
84:57 - right and then we want to store that as
85:00 - a u8 an integer
85:02 - and dot as underscore
85:05 - right
85:06 - so this all this information just to
85:08 - generate the next to-do account all
85:12 - right so don't forget to put end user
85:13 - underscore profile
85:15 - dot last to do as you ate as ref and at
85:18 - the very end there's the squeeze in this
85:19 - little comma here that's easy to miss
85:21 - hit enter
85:24 - cool
85:26 - all right so i'm gonna look to you guys
85:27 - what do we usually put after seeds you
85:29 - got it john it's gonna be bump and i
85:32 - hope all the giants that watch this are
85:33 - like huh
85:34 - and so there's a bump in here
85:36 - and another unique thing is we're gonna
85:38 - put payer
85:40 - is equal to authority
85:43 - all right
85:43 - there's specific like um i don't want to
85:45 - call it traits but specific things that
85:48 - you want to put in here that specify
85:50 - what it is so has one
85:51 - right is equal to authority right the
85:53 - payer is going to be the authority right
85:55 - there's different special cases here
85:57 - they all do different things i don't
85:58 - want to focus too much on what they do
86:00 - but it adds specific properties
86:03 - essentially all right so remember we
86:05 - have to find the space on this one how
86:07 - much space is to do a count take well to
86:09 - get the size of something we need to do
86:11 - all of this stuff
86:13 - this is how you can easily get the size
86:15 - of something
86:17 - with rust and anchor so you can say
86:19 - whatever the size of
86:20 - to do account is
86:22 - and then call it and then we also need
86:24 - that plus 8. i forgot that
86:26 - all right it's the same thing as last
86:27 - time step i put the plus a first doesn't
86:29 - really matter still adds up to the same
86:31 - thing
86:32 - so that's the space and all of this
86:35 - right underneath that should put the
86:37 - to-do account
86:39 - so we can reference it later and just
86:41 - like before it's going to be in a box
86:43 - right it's going to take in
86:45 - info
86:46 - that's how long it lives for and account
86:49 - holds the to-do account
86:52 - beautiful
86:54 - awesome
86:55 - now let me just look up here to
86:57 - reference what else do i need i need uh
86:59 - oh i need the authority
87:01 - yeah the authority and i also need the
87:03 - system program so let's add those next
87:05 - and again or it doesn't necessarily
87:07 - matter here
87:08 - what matters is if you put these on top
87:10 - of it so this we do need the mute one
87:13 - and then we can put pub authority
87:15 - is just like before just look up for
87:18 - reference signer
87:21 - signer
87:23 - uh info
87:26 - there we go cool so that's the authority
87:27 - set up let's also set up the
87:29 - system
87:30 - program
87:32 - and that simply is just going to be
87:34 - program
87:36 - info
87:38 - and
87:39 - voila
87:43 - okay
87:44 - i think that's it for the ad to do
87:46 - struct now we're gonna use all this
87:48 - information here to make the logic of
87:51 - our function
87:52 - and our function is to fill a to-do
87:54 - account with the proper values kind of
87:56 - like initialize user right so we gotta
87:58 - essentially create oh and fill up the
88:01 - to-do
88:02 - account with values right so we'll put
88:05 - in what the authority is for this to do
88:07 - item
88:07 - fill in the index
88:09 - fill in what's the string and initialize
88:11 - this to
88:12 - false okay you still that's that was me
88:14 - checking if you're still with me
88:16 - all right
88:17 - cool so we're gonna add it to do
88:19 - here
88:20 - [Music]
88:22 - and here we go so essentially the same
88:23 - thing let's write it up
88:26 - so first just like before we want to get
88:28 - a variable that holds the to-do account
88:30 - and the user profile right so let's say
88:33 - let to do underscore account that's our
88:35 - variable is equal to right and how do we
88:38 - get
88:39 - the to-do account
88:41 - all right that's our context
88:43 - you remember it's going to be ctx
88:45 - right and the cool part is
88:47 - um that can to do account be unique and
88:50 - can it change yeah all right we can have
88:52 - multiple to-do accounts so you want to
88:54 - make sure you add and mute or else we're
88:56 - gonna run into some errors
88:58 - so i'll just say
88:59 - context.accounts right and then how do
89:02 - we get to do account
89:04 - scroll scroll we can just say dot to do
89:07 - account
89:09 - dot to do underscore
89:12 - and there we go
89:14 - so we got that
89:16 - we also need access to user profile so
89:19 - just like before we can store that in a
89:20 - variable so let's do that
89:22 - say let
89:24 - user underscore profile
89:28 - is equal to
89:29 - and mute because it's mutable
89:31 - let's get it from our context right how
89:33 - come i can get user profile
89:35 - from add to do
89:36 - that's weird right i thought i'd have to
89:38 - get you know initialize user well if you
89:41 - look at add to do
89:42 - we set up user profile too right we
89:44 - didn't initialize it right there's no
89:46 - init here right we're just getting it
89:48 - right getting that user profile
89:51 - we're referencing it
89:53 - so all we have to do is say user profile
89:55 - contacts accounts and then we labeled it
89:58 - the same way user profile
90:00 - right so that's a cool way to get user
90:02 - profile without you know referencing
90:04 - this
90:04 - struct okay
90:06 - and now uh now that we have
90:10 - initial we'll just put this comment and
90:12 - put it here
90:13 - we can say uh initialize
90:16 - variables right so now we can take these
90:18 - variables and do stuff with it right so
90:21 - if if i were to print out to do account
90:24 - i would see an object with all these
90:26 - things but do these have any values no
90:28 - so we can give it values all right so
90:30 - let's start with the easy one you guys
90:31 - should be able to do this
90:33 - to do account
90:34 - dot content all right what should that
90:37 - equal
90:38 - all right it should equal whatever you
90:40 - want to do so if i put a string here
90:42 - that says learn solana right
90:45 - every time i added to do
90:47 - what to do items would i have right
90:49 - every single time i had to do i'll have
90:51 - learn salon learn salon right so if you
90:52 - want a visual representation of what
90:54 - this does
90:55 - if i ran this function and tested it i
90:57 - would have a to do item with learn
90:59 - solana
91:01 - learn oh it's not text
91:03 - with
91:04 - learn salon right if i ran that code
91:07 - again would i get a unique one yes or no
91:10 - no i would get another one
91:12 - that's learned salon if i do this again
91:14 - learn salon they're all the same i don't
91:16 - want them to be the same how do i make
91:17 - them different
91:18 - right
91:20 - we want to
91:21 - make this dynamic so instead of learn
91:23 - solana we should write
91:26 - underscore content where am i getting
91:28 - underscore content lengths
91:30 - i'm getting it as an argument from our
91:32 - function right if this is looking scary
91:34 - to you right we can look at it like this
91:40 - all right how many parameters does this
91:41 - function take
91:43 - right it's taking
91:44 - you know just two parameters context and
91:47 - content and we're using that content
91:49 - here
91:51 - right that's not too bad yeah
91:53 - so if the content is that let's
91:55 - initialize
91:56 - the rest of the things here
91:58 - okay i'm gonna put it the order that we
92:00 - listed so it looks nice so the first
92:02 - thing is the authority so let's do to do
92:04 - all right account how do i get the
92:06 - authority
92:09 - now you're catching on it's dot
92:10 - authority what what should we put as the
92:13 - authority we can say context that
92:15 - accounts
92:16 - right just like before
92:18 - dot authority dot key
92:20 - authority
92:24 - okay don't forget the semicolons i
92:25 - always forget those
92:27 - bam
92:28 - okay after we got the authority the next
92:29 - thing we want is to do
92:31 - account we want the index
92:34 - right the index
92:35 - is equal to
92:37 - right
92:39 - the user
92:40 - profile dot last to do
92:43 - right so i'm making use of something
92:45 - here right i'm using the user profile
92:47 - that last to do
92:48 - all right last to do is something again
92:50 - comes from the user profile and it's
92:52 - interesting because i'm not using to do
92:53 - count
92:54 - right
92:55 - the reason why i'm using last to do
92:57 - because i want to store the latest
92:59 - number because when we go when it comes
93:01 - to count that's going to change
93:04 - right the account is going to change
93:06 - so this is for the account one is just
93:09 - saying the number that it is
93:11 - okay
93:12 - so all you need to know is that it's
93:14 - helpful if you do it this way you don't
93:16 - have to but you can't okay so then
93:18 - content is next we did that and now you
93:21 - want the to do underscore count dot
93:23 - marked
93:24 - and remember i said what do we want do
93:26 - we want a dynamic value or do we want a
93:29 - static value for this
93:31 - so if you said static ding ding ding you
93:33 - got it it's going to be false
93:35 - all right because every to-do i create
93:37 - is going to be dynamic but will always
93:39 - be incomplete
93:41 - until i mark it as completed right so
93:44 - it's a lot of like being able to
93:46 - visualize the logic within your app
93:49 - okay
93:50 - so we're not done quite yet right we
93:53 - want to be able to increase
93:55 - to do
93:57 - index
93:58 - for the pda and remember pda is the
94:00 - account the profile derived account
94:02 - right so we want to say that user
94:05 - right let's say
94:07 - if there's two accounts there's the
94:09 - lance account there's a kazi account
94:11 - right
94:12 - if i'm on lance
94:14 - and i added to do
94:16 - should causey's profile
94:18 - be incremented should his to do count
94:20 - increase
94:21 - no only lance's so to increase the
94:25 - 2d to do idx for the pda
94:28 - we can say user profile underscore last
94:30 - to do is equal to
94:32 - right
94:33 - the user
94:35 - underscore profile
94:37 - type last to do but we're not done we
94:39 - want to do dot here all right dot
94:42 - checked underscore add
94:44 - one and
94:46 - dot right we can press enter unwrap
94:50 - all right
94:51 - looks scary but all it's doing is check
94:54 - if i can increment the to do right
94:57 - because remember it's only up to
94:59 - uh on u8 right which means on inside
95:01 - integer uh eight right so check if i can
95:04 - add increment it and if it's true we're
95:07 - gonna increment by one
95:09 - and then unwrap is essentially just
95:11 - unwrapping it you don't need to
95:12 - understand that just yet just know that
95:14 - it's helpful to add right here
95:17 - okay so this is how you can increment
95:19 - really easily with rust i'm saying that
95:22 - the user profile to do is going to be
95:24 - whatever it is plus one if i can do it
95:27 - yeah
95:28 - cool
95:29 - we want to do the same thing right to
95:31 - increase
95:32 - the total to do count
95:36 - right
95:37 - cool
95:38 - so we can say user underscore profile
95:42 - dot to do underscore account is equal to
95:45 - user underscore profile dot to do
95:48 - underscore
95:50 - all right so i updated the last to do
95:51 - let's also update the to do count right
95:53 - there's two things keeping track of the
95:54 - number i'll use them for different
95:56 - things
95:57 - all right so we're going to say dot
95:58 - checked
95:59 - add
96:01 - one same thing
96:03 - oh and also don't put a semicolon here
96:05 - because they're going to end up the
96:06 - whole line this dot unwrap is chained
96:08 - onto this so essentially
96:10 - you can do it like this
96:12 - but since there's no semicolon right
96:14 - this will work the same
96:16 - so you can say dot unwrap again
96:19 - make that blank and you want to make
96:21 - sure you close it here don't close it
96:22 - here
96:24 - okay
96:26 - so we increase the index
96:28 - right and we also increase the total
96:30 - count right so this last to do is for
96:32 - the index
96:33 - to increment the index this is just
96:35 - saying how many it is right because the
96:36 - index can be different from the total
96:39 - amount right you can have seven to do's
96:42 - but the last index could be six
96:43 - depending on what we delete right i
96:45 - could delete this one and mark this one
96:48 - and we'd have random indexes
96:52 - okay you follow them cool so what's the
96:54 - last thing i'll need it's going to be
96:55 - the ok
96:57 - right
96:58 - and i don't want to necessarily return
96:59 - anything
97:01 - there you go that's add to do
97:03 - i don't think i need anything else
97:06 - [Music]
97:08 - see this string and here perfect okay
97:11 - now the moment of truth guys let's go
97:13 - ahead and build
97:14 - to see if we get any errors and we might
97:16 - you know me
97:18 - there we go uh we have
97:20 - one error
97:22 - instruction
97:24 - in this scope okay
97:27 - let's see it might be a spelling error
97:29 - this time actually based on that
97:31 - so we have
97:32 - instruction and instructon
97:36 - right there you go
97:37 - so maybe if i fix that that would help
97:40 - let's hit build again
97:43 - a build successful so if you look over
97:47 - here in our test you'll see add to do
97:49 - right uh but you'll see that it's not
97:52 - deployed just yet right we didn't
97:54 - upgrade and if we upgrade we're gonna
97:56 - get some some more salon all right but i
97:58 - believe we can still test this so let's
98:00 - go ahead and test that
98:02 - all right so let's go ahead and upgrade
98:04 - our contract because we did make some
98:06 - upgrades we added to do struct and we
98:08 - added a add to do function so if we hit
98:11 - upgrade you might not be able to afford
98:13 - it
98:14 - might cost more than it's a bigger size
98:15 - file
98:16 - as you can see deploying
98:18 - okay looks like it's going through so
98:19 - i'm going to let it upgrade
98:21 - okay
98:22 - looks like it's almost done
98:24 - okay deployment successful and we got
98:27 - refunded some solana that's awesome
98:29 - cool so now
98:31 - this is live on the blockchain every
98:33 - time you upgrade and deploy your smart
98:34 - contract it's living on the blockchain
98:37 - and it's just waiting for us to call
98:39 - upon it and use any of the functions so
98:41 - let's go over to tests and let's go
98:43 - ahead and try to add a to-do right and
98:45 - if you notice there's three accounts
98:47 - this time user profile the to-do account
98:50 - and authority right
98:52 - there's
98:53 - three things now for this function and
98:56 - let's see what else now that's pretty
98:58 - much it so all right to do it to test it
99:00 - is just fill in all these things so
99:01 - let's say the to do item is
99:04 - test
99:05 - add to do
99:07 - right for accounts
99:08 - how do we get a user profile
99:10 - okay so we got the content the next
99:13 - thing we have to do is the user profile
99:15 - to do account and authority so this is
99:18 - the tricky part about testing
99:20 - for user profile when i make it do i
99:22 - need to generate a brand new user
99:24 - profile yes or no you tell me okay if
99:27 - you said no
99:29 - you're correct i don't want to generate
99:31 - a new user profile so then if i don't
99:33 - generate a new one what should i put
99:34 - here should i put
99:36 - my wallet address not necessarily what
99:38 - you want to put for user profile
99:40 - is
99:41 - any user that you have right so let's
99:43 - check user profile let's check facial
99:46 - and there you go so
99:48 - for user profile we can use this public
99:51 - key all right you might be asking why do
99:53 - i know it's not my address by the way
99:54 - because this is the wallet address if
99:56 - you're a member of the playground
99:58 - i know because if i were to paste that
100:00 - here my address and click fetch you're
100:03 - gonna see a given account is not a user
100:05 - profile so that doesn't go there if i do
100:07 - fetch all right that was this was my
100:09 - address what we're going to need is this
100:11 - public key this is the user profile how
100:13 - do i know
100:14 - if i were to erase this paste it here
100:16 - and just fetch that only that
100:19 - i'll get just that object so that's the
100:21 - correct user profile right
100:24 - so this is essentially
100:26 - right
100:27 - the initialized user so if i'm already
100:29 - initialized and i'm the lance
100:31 - this is lance
100:33 - using lance to create a to-do all right
100:35 - if it was a different if it was like
100:37 - this whatever this is somebody else
100:39 - creating a to-do right so you want to
100:40 - put
100:41 - that user profile
100:43 - okay
100:44 - cool so for to-do account this one do i
100:47 - need to generate it or is it already
100:49 - given to me
100:50 - the answer is we need to generate it
100:52 - because it's just like before there's a
100:54 - couple different seeds that we need to
100:55 - add so how many seeds do we need to add
100:57 - one
100:58 - two
100:59 - three all right this is a number we have
101:01 - to add a number as a ref
101:03 - okay so for the two account let's do
101:05 - from seed the first one is a string
101:08 - all right so remember before when we
101:09 - went to um what's it which one was it i
101:12 - think it was constant we did user state
101:14 - because that's the string that lives
101:15 - inside user tag what we need now is to
101:17 - do state
101:19 - let's get to do statement open here to
101:21 - do underscore state that's the string
101:24 - all right we need to add another seed
101:27 - and the next one we need to add is
101:30 - where is he where is he right here
101:33 - the authority so remember which type was
101:35 - authority it was pub key
101:37 - and now what's the authority of this all
101:39 - right if you don't know if you don't
101:41 - remember what authority we're using
101:42 - let's take this
101:44 - and let's go to
101:46 - fetch right we fetched it the authority
101:48 - of this specific user profile
101:51 - is this a z thing which is actually your
101:53 - wallet address anyway so you could copy
101:55 - it or you could just put your wallet
101:56 - address in there right
101:59 - boom all right that's in there we need
102:01 - to add one more seed right and that's
102:04 - going to be what this user profile lasts
102:06 - to do like what was the number of their
102:08 - last to do that's why it's important to
102:10 - update it and if you remember it does
102:12 - lance have any to do's after we
102:15 - initialized it that's the steps
102:17 - no so let's add one more seed this is a
102:20 - number and we're gonna put zero
102:22 - so if i set everything correctly we can
102:24 - hit generate
102:26 - right so there's a to-do account and the
102:28 - last but not least is the authority so
102:30 - the authority
102:32 - right is going to be essentially the
102:33 - same thing as my address
102:35 - all right we can check that right here
102:37 - authorities that and if this works this
102:39 - should pass let's hit test hey
102:42 - let's go i'm so excited i love seeing
102:44 - tests pass i also like seeing tests fail
102:46 - because then you can like understand it
102:48 - a little bit better but if yours passed
102:50 - should we have a to-do account let's
102:51 - find out let's do fetch all
102:53 - this was blank before give it a couple
102:55 - seconds
102:56 - nope just an error
102:59 - look at that guys we have successfully
103:01 - one to do account right one to do item
103:04 - what's the content of this to do it's
103:07 - test ad to do is it completed guys
103:09 - it's not completed and there you go we
103:12 - us doing this fetch all
103:13 - is how we fetch all of them in here
103:16 - every time we connect our
103:18 - user and we initialize it we'll always
103:21 - fetch the to-do's automatically that's
103:22 - why in our solana playground we don't
103:24 - need a fetch to do function that's the
103:26 - awesome part about this it's done in a
103:28 - super smart way so there we go we just
103:30 - tested the test we just tested the ad to
103:32 - do it works we have one to do with an
103:34 - index of zero
103:36 - amazing
103:38 - okay so now that add to do is working we
103:40 - only have two more functions left to go
103:42 - guys you guys are doing so good so far
103:45 - all right so the next thing let's work
103:47 - on let's go back here let's make this
103:50 - smaller again
103:51 - the next thing i want to work on is
103:54 - marking the to-do right so if we go here
103:57 - underneath this function
103:59 - perfect we want to create the mark to do
104:01 - function so how do we market to do all i
104:03 - have to do to get started is type in pub
104:06 - fn mark to do so let's write pub
104:09 - and fn for function
104:10 - mark underscore to do this is just the
104:13 - name
104:14 - and it's going to take in what
104:16 - right i think you guys know the answer
104:17 - it's going to take in context what is
104:19 - context right is this gonna
104:22 - matter right the context that we're
104:23 - taking in is a struct mark to do does
104:26 - the struct exist yet not yet it will
104:29 - right what else does it take in it's
104:30 - gonna take in the to do
104:33 - index right this is not referencing the
104:36 - struct of the to do account this is just
104:38 - a parameter that's labeled to do index
104:40 - all right what's the type that we're
104:42 - expecting guys let's see if you know
104:43 - this one
104:44 - right if you said you ate you're
104:46 - freaking genius
104:47 - so this mark to do takes two things the
104:50 - context
104:51 - and the index
104:53 - okay it's good to know next thing result
104:56 - result
104:58 - oh this thing parentheses bam then curly
105:02 - brackets
105:03 - this is the skeleton of the function
105:06 - okay the next thing we got to do though
105:08 - is before we write any logic is let's
105:10 - figure out what this struct is
105:12 - okay so we want to create a mark to do
105:14 - struct so it's going to go all the way
105:16 - down here
105:18 - and i'm going to put move a little bit
105:19 - faster guys because at this point you
105:21 - guys should be recognizing the pattern
105:23 - so to get started off we're going to
105:25 - derive what
105:26 - we're going to derive accounts
105:28 - now what else we're going to do we're
105:29 - going to
105:30 - get the instruction all right what's our
105:33 - instruction going to take in i'm taking
105:35 - to do idx what's the type of it ua
105:39 - okay
105:40 - what is needs what needs to go under
105:42 - here
105:43 - destruct what's the name of our strength
105:46 - mark
105:47 - to do
105:48 - how long does our struct live
105:50 - info
105:51 - right that's the lifetime
105:53 - okay there we go these curly brackets
105:56 - represents what is this truck made out
105:58 - of
105:59 - awesome so we need to do here is we want
106:02 - to get that uh user reference to user
106:04 - profile again right so if you remember
106:06 - how do we get a reference to user
106:08 - profile from ad to do it's going to be
106:10 - literally the same thing i think you can
106:12 - literally copy paste this
106:14 - but i'll just write it out okay so let's
106:16 - do
106:16 - account parentheses
106:18 - uh there's like the suggestion there we
106:20 - don't need it we can say mute because it
106:22 - could be mutable
106:23 - all right we can say seeds all right
106:26 - what are the seeds for user profile
106:28 - you guys know
106:30 - user tag
106:31 - right and what else
106:33 - authority
106:35 - cool
106:35 - awesome
106:37 - and that's it don't forget the comma
106:38 - here uh after seeds what do we usually
106:41 - write here we have bump
106:43 - okay and then
106:45 - another thing that's important the
106:46 - unique
106:47 - thing here is that has one there should
106:49 - only be one authority that can
106:51 - work with this user profile and you can
106:54 - set it to authority
106:55 - okay cool
106:57 - who is gaining
106:59 - like who where is this all for i mean
107:01 - it's going to be for pub user profile
107:04 - all right and there you go and what is
107:06 - the type that it's expecting uh it's
107:08 - going to be in a box
107:10 - it's going to hold in a box is holding
107:12 - an account and that account
107:14 - has info and inside that account is user
107:18 - profile
107:19 - boom boom
107:20 - okay cool
107:22 - yep
107:23 - it's exactly the same as before
107:25 - okay so we have user profile the next
107:28 - thing we want is actually just a
107:30 - reference to the to do account as well
107:32 - right because for this truck we need to
107:34 - know who is the user profile associated
107:37 - and what is the to-do account that we
107:39 - want to mark all right to get a
107:40 - reference to that we're going to do an
107:42 - account here
107:44 - right
107:44 - and uh
107:46 - it's going to be similar i don't want
107:47 - that default one
107:49 - let me mute
107:50 - seeds equal to
107:53 - so do we use user tag nope
107:55 - we'll use to do tag
107:58 - and this is the same though it's going
107:59 - to take an authority dot key
108:01 - dot as underscore ref
108:04 - right
108:05 - parentheses it's also going to take the
108:08 - to do uh index
108:11 - yeah to do
108:13 - index
108:14 - right and then we need a dot as ref
108:16 - that's that's gonna be how i can read it
108:19 - boom so that's all the seeds that we're
108:21 - gonna need for that
108:22 - comma
108:24 - right what do we need here
108:25 - bump
108:26 - okay
108:27 - and again uh for this to do account
108:30 - should only be one authority so has one
108:32 - and the target of this has one is gonna
108:35 - be authority
108:36 - okay
108:37 - uh and again authority doesn't really
108:38 - exist just yet
108:39 - we're gonna make it in a second
108:41 - cool all of this
108:42 - is associated with this to do account
108:45 - which again lives which is expecting a
108:47 - type
108:49 - which is a box
108:50 - that's holding an account
108:52 - that is
108:55 - info and specifically that account is
108:57 - the to do account
108:59 - okay
109:00 - and now we can do the default stuff
109:02 - which i could copy paste again if you
109:04 - want to guys i'll just write it out so
109:06 - you can catch up
109:08 - account
109:09 - mute
109:10 - because it can change authority
109:13 - is the signer which comes from anchor
109:16 - lang remember
109:17 - right
109:19 - and
109:20 - we also have the pub system
109:22 - program
109:23 - all right
109:24 - cool so i'm just typing it all out info
109:27 - comma
109:29 - system
109:30 - just like before
109:31 - and comma
109:33 - i don't think i need to put a comma here
109:34 - as well
109:35 - all right so let me just double check
109:37 - that this is the same
109:39 - yes sir okay cool
109:41 - and there we go that is the mark to do
109:43 - struct right we have a reference we have
109:45 - user profile we have a to-do account the
109:47 - authority the system program all within
109:49 - the struct so now
109:52 - time for the fun part using that
109:54 - in here
109:55 - so this is one of our
109:57 - simpler functions right because what's
109:58 - the goal of mark to do right we want to
110:01 - change
110:02 - uh marked
110:04 - to
110:05 - true
110:06 - right
110:07 - or in other words
110:08 - mark to do as completed
110:11 - yeah is that making sense okay so
110:13 - usually what i like to do is like to
110:15 - make a variable that holds a reference
110:17 - to it
110:17 - and say that is equal to
110:20 - and mute tx right that's the context
110:23 - all right how do i get into the actual
110:26 - to do account you can do without
110:27 - accounts
110:28 - dot to do account and we can do that
110:30 - because that's within the struct
110:33 - all right to do accounts in there
110:35 - okay
110:37 - semicolon
110:38 - and let's see uh
110:40 - oh remember our errors we're finally can
110:43 - use our error right our error.rs we want
110:45 - to use
110:46 - already marked right
110:48 - cool so we can say require
110:50 - bang right
110:52 - if the to do
110:55 - count
110:56 - dot marked right
110:58 - is already marked
111:00 - we can say to do error
111:02 - and from to do error which error do we
111:04 - want let's see our error we want already
111:07 - marked
111:08 - right so i'm saying from
111:10 - the to-do error object get me already
111:14 - marked
111:15 - all right so it's going to run it's
111:16 - going to check that and if that's true
111:18 - then it's going to say it's already
111:19 - marked
111:20 - okay
111:21 - uh here we can just mark the to-do which
111:23 - should be pretty simple
111:25 - mark to do
111:26 - how do i get the marked key
111:29 - right
111:30 - how do i get marked
111:32 - pretty simple we can say
111:35 - to do a count right because we have a
111:37 - variable dot
111:39 - marked and what should this be
111:41 - it should always be true right because
111:44 - we can only mark them as completed we
111:45 - can't mark it to do as uncompleted if
111:48 - you wanted to mark it as like you want
111:50 - to be able to toggle
111:52 - then you can do something like this to
111:53 - do account.marked right this is a not
111:57 - which makes it the opposite all right
111:58 - and i'm telling you these things because
112:00 - the whole point of this video is to show
112:02 - you
112:04 - how it works right you don't need to
112:06 - know all the complicated algorithms and
112:08 - deserialization that happens with anchor
112:11 - right what you should know though is
112:13 - what you need to change to get your
112:14 - result right if you don't want an index
112:16 - which you put instead right if you want
112:18 - to make it so that you can toggle and to
112:21 - do instead of mark to do or you can do
112:23 - this right for me i don't want to make
112:25 - it simple let's just say when i mark it
112:27 - to do we're just going to switch it to
112:29 - true okay and when we're done what do we
112:31 - put here
112:32 - okay okey-dokey
112:34 - guess what guys that's it that's mark to
112:36 - do all right pretty simple all i have to
112:38 - do now is let's test if it works so one
112:41 - of the first tests i do is let's run
112:43 - build
112:44 - all right build
112:45 - i got an error
112:47 - c
112:48 - to do account
112:50 - marked true okay so it's unexpected
112:52 - token i see
112:54 - it's telling me
112:56 - that in mark to do they should have a
112:58 - semicolon essentially and now let's see
113:00 - if that fixes it
113:02 - build
113:02 - build successful all right so our build
113:05 - is successful one thing we want to do is
113:07 - also upgrade our contract right and
113:09 - deploy it so that it lives on the
113:11 - blockchain all right you don't have to
113:12 - do this but when you're whenever you
113:14 - want to make a change you added a change
113:16 - to your smart contract and you want to
113:17 - redeploy it
113:18 - click upgrade
113:20 - cool so we'll wait for this and let's go
113:21 - ahead and test it
113:23 - all right so let's go ahead and test our
113:25 - mark to do deployment was successful
113:28 - let's go to test you can see mark to do
113:30 - is there and now this is the argument so
113:32 - if remember what mark to do takes in it
113:34 - takes in the index of the one you want
113:36 - to mark so you need to know what to do
113:38 - you want to mark
113:39 - and it also takes in the accounts right
113:42 - so what accounts do you need to know
113:43 - it's going to be the user
113:45 - the to-do account and who's the
113:47 - authority right so we have access to all
113:49 - of these if you forget oh you can go to
113:52 - do account and do a fetch all right so
113:54 - there we go this is the authority all
113:57 - right this is the to do account
114:00 - and the user associated with we can do a
114:03 - fetch all for the user all right that's
114:05 - going to be this this is the user
114:07 - profile so let's put in some things here
114:09 - we're again for the arguments
114:10 - zero right because we only have one to
114:12 - do pretty simple
114:14 - user profile i want to generate a new
114:16 - user profile i already have one user
114:19 - and that user profile was this pub key
114:22 - right here
114:23 - it should be this
114:25 - okay and we can paste that in there
114:27 - cool what's the to-do account what's the
114:29 - to-do
114:30 - address right so if you remember the
114:32 - to-do address if you go under to do
114:35 - account you do the fetch all this right
114:37 - here is the to do account
114:39 - that was generated from last time
114:42 - all right we could put that there and
114:44 - who's the authority who has it the
114:45 - authority to do all this that should be
114:47 - my address because if you look under to
114:49 - do account who's the authority
114:51 - az3x if i go to
114:54 - this right here oops if you go to
114:56 - authority right here do my address az3x
114:59 - okay
115:00 - so that's everything you need i don't
115:01 - need to generate any fancy seed stuff i
115:03 - already have all that information let's
115:05 - go ahead to test and mark to do is
115:07 - completed and just to double check if
115:09 - you look what's the status of this to do
115:12 - false currently
115:14 - all right let's hit test
115:15 - okay it passed awesome so now we can do
115:19 - a fetch all
115:21 - and look at that it's true so we
115:22 - successfully marked the to do on the
115:25 - blockchain as true
115:27 - right and another cool thing is if you
115:28 - know the public key or the to-do account
115:31 - address you can just paste it here
115:33 - and hit fetch and it'll just fetch you
115:36 - just the to-do account
115:37 - all right just the authority just the
115:39 - idx content marked
115:41 - awesome
115:42 - so hope that makes sense to you we got
115:43 - one more function let's go ahead and
115:45 - keep crushing it
115:47 - all right are you guys ready for the
115:48 - last function on the smart contract i
115:50 - know i am let's go ahead to our lib
115:52 - again put this down and let's
115:55 - go
115:56 - so we have mark to do the last function
115:58 - is let's remove the to-do or delete the
116:01 - to-do right
116:02 - this one function is kind of special
116:04 - right it's special because the name is
116:07 - very misleading right this is going to
116:09 - be called remove to do
116:12 - right but what this actually does is
116:14 - decrement
116:15 - the to do count right that's the logic
116:17 - of this function right but how do we
116:20 - delete it to do right there's a
116:21 - workaround like i said in the blockchain
116:23 - you can't really delete anything you
116:25 - store on there that's the whole point
116:27 - it's persistent right but there is ways
116:29 - to uh get around that and close the
116:33 - account
116:34 - right so that's what we're going to show
116:36 - you how to do now
116:37 - so for remove to do it takes in a
116:40 - context just like before right and you
116:42 - guys are familiar with the format it's
116:44 - going to take in the context of a struct
116:46 - do we have a struct that we want to you
116:48 - know use with this
116:49 - not exactly yet it's going to be called
116:51 - remove to do though
116:52 - and it's also going to take in an index
116:55 - if i ask you guys why is this remove to
116:57 - do going to take an index
116:59 - of u8 why do you think
117:02 - it's because
117:03 - we want to know what exactly which to do
117:05 - you want to make if i had five to do is
117:06 - how would you know you gotta pass in the
117:08 - index okay so then it's going to take in
117:10 - result
117:12 - boom boom
117:14 - and curly brackets here
117:16 - that's the skeleton of the function and
117:18 - like i said uh what we want to do with
117:20 - this logic is
117:22 - decrement
117:23 - the total to do count right
117:27 - so it's not really deleting there's no
117:28 - deleting in this function itself
117:31 - the closing of the account
117:33 - right is going to happen elsewhere it's
117:35 - going to happen all within the struct 2
117:36 - which is the cool part let's go ahead
117:38 - and make the struct
117:39 - so to make the struck we'll scroll all
117:41 - the way to the bottom here
117:43 - and what we want to do
117:44 - is the same old same one we want to
117:46 - derive
117:47 - the accounts
117:49 - right
117:50 - we want to
117:52 - get instruction
117:54 - instruction i hope i spelled it right
117:56 - and the instruction is going to take an
117:58 - index again so let's put idx
118:00 - expect a u8
118:02 - an unsigned integer
118:04 - and the important part is what you put
118:06 - under here so
118:08 - that's all going to be related to remove
118:10 - to do and then we can say info
118:14 - all right
118:15 - and then
118:16 - put these curly brackets and anything
118:18 - within these curved brackets is the
118:19 - scope of the structure
118:21 - okay so what do we need in this struct
118:23 - we want to get accounts again
118:26 - all right
118:27 - we're not count account parentheses
118:30 - and let's set it up so we want to get
118:32 - what we want to get user profile
118:34 - and to do account again we didn't use
118:36 - user profile last time but it's good to
118:38 - have you know referenced all of these so
118:40 - we have mute here the seeds
118:43 - what sees does user profile take in do
118:46 - you remember
118:47 - all right at this point it should be
118:48 - obvious it's user tag and authority dot
118:51 - key dot as
118:53 - ref
118:54 - [Applause]
118:57 - okay so we have seeds and then we got to
119:00 - bump right next available and there's
119:02 - only should have one authority so we
119:04 - could say has one
119:05 - authority
119:07 - okay
119:09 - and then underneath this is where we put
119:10 - user profile the type
119:13 - you guys should know the type by now
119:15 - okay
119:18 - info
119:20 - and it's going to take user profile and
119:22 - let's close it off
119:25 - awesome so that's the user profile we
119:27 - also want the to do
119:29 - to do accounting associated so we have
119:32 - this
119:33 - nope this
119:35 - mute
119:36 - and this is the key part right here
119:38 - right so remember this has all this
119:40 - stuff has to do with the user profile
119:43 - right this specifically has to do with
119:44 - the to-do account itself
119:46 - and the remove function
119:49 - right if i scroll back up like i said
119:51 - it's not actually deleting anything in
119:53 - here
119:54 - the deleting or the removing is coming
119:57 - from it's going to be closed within the
119:59 - context
120:00 - and by context
120:02 - i mean this struct all right if you're
120:04 - with me so far this is where we can
120:07 - close the to-do account right we opened
120:09 - its to-do account we put one on there on
120:11 - the blockchain there's only one right
120:12 - now
120:12 - to close it right we can do that through
120:15 - here so we can say close
120:17 - it's a special property right just like
120:19 - has one
120:20 - and
120:21 - the close the target right of this close
120:24 - is the authority who can close it uh
120:26 - another thing cool about closing a to-do
120:28 - account is that you actually get
120:29 - refunded your solana this is new like
120:31 - that's awesome so if you you're gonna
120:33 - spend solana to store stuff on the chain
120:35 - or that's how you're able to store stuff
120:37 - you spend stuff you spend a small fee
120:40 - right when you close the account solana
120:41 - will give it back to you because you're
120:42 - no longer using their space
120:45 - okay so we can do seeds all right so now
120:47 - that's able to close when this context
120:50 - is run
120:52 - now it's able to close we need the seeds
120:54 - for it and the seeds for a to do account
120:56 - is to do tag
120:59 - the authority
121:02 - dot key
121:04 - dot as underscore ref
121:07 - and the to do idx i believe as ref okay
121:11 - so we and
121:12 - uh brackets to do
121:14 - underscore idx
121:17 - dot add underscore to ref parenthesis
121:19 - then don't forget that comma there cool
121:22 - so again after the siege what do we
121:24 - usually have underneath there guys
121:27 - bump
121:28 - okay and again has one we need that
121:31 - right here because it shouldn't be one
121:32 - authority
121:34 - the target of has one is authority just
121:35 - like this
121:36 - cool
121:37 - [Music]
121:38 - awesome all right so now we have a
121:40 - closable
121:41 - to do account right
121:44 - so if we do
121:45 - box because it's the type that's
121:47 - expecting
121:48 - info
121:50 - comma and this you're right to do count
121:53 - close close
121:54 - boom
121:55 - okay last thing we'll need right here is
121:58 - the authority and the system program you
122:01 - guys know this one now let's account
122:03 - make it mutable
122:05 - and you can say pub
122:07 - authority
122:08 - signer
122:10 - info
122:12 - okay
122:13 - cool now let's get the system program
122:16 - one system underscore program
122:18 - say program
122:20 - info
122:22 - system
122:26 - okay cool
122:28 - all righty so that is it that's the
122:29 - remove to do struct right we're able to
122:32 - close the account and get some solana
122:34 - back right we'll see that later on when
122:35 - we hook it up to the front end
122:37 - right
122:38 - so i'm excited about that and then we
122:41 - can go ahead and write the logic for the
122:43 - remove to do function
122:45 - all right so for the remove to do
122:46 - function there's no deleting like i said
122:48 - i keep saying it over and over so you
122:49 - guys remember we're really just
122:51 - decrementing the total to do count so
122:54 - in order to do that do we need to
122:57 - get the to-do account or should we work
122:58 - with the user profile
123:01 - right which one has the to do count
123:04 - and the answer is
123:05 - user profile that's the one we really
123:07 - need so
123:09 - let's go back to the function let's get
123:11 - user profile usually i store it in a
123:13 - variable
123:14 - and set this equal to and how do we get
123:17 - it
123:17 - all right try to pause the video and do
123:19 - it yourself if you understand
123:21 - if not don't worry it's
123:24 - andymu.ctx for the contacts write the
123:26 - remove to do context and within that
123:28 - context
123:30 - we have a user profile
123:33 - all right so let's look at that then
123:35 - so accounts dot user underscore profile
123:40 - boom all right so now that we have that
123:41 - stored in the variable we can edit it
123:44 - and i don't have to put space here
123:45 - actually
123:46 - say user
123:47 - underscore profile
123:50 - dot how do we get to do count
123:52 - to do underscore count
123:55 - you with me
123:56 - so user
123:58 - uh so user profile dot to do count is
124:00 - equal to
124:02 - all right you're gonna see it's similar
124:03 - to before user profile
124:05 - dot to do count
124:07 - right and then we can do a dot checked
124:11 - here all right remember we did dot
124:12 - checked add well there's actually a dot
124:14 - check sub there's actually multiple
124:15 - checks right that's built into anchor
124:18 - all right and then you also want to do
124:20 - on
124:21 - wrap and then semicolon here right and
124:24 - notice something
124:25 - i'm only
124:27 - decrementing the to do count
124:29 - and not the last to-do right last to-do
124:32 - like i said is really just last to-do
124:34 - index right we can preserve
124:38 - the
124:39 - the latest index number in last to do
124:42 - and to do count is how many total to
124:44 - do's currently
124:46 - i hope that's clear now
124:47 - okay and i just want to put a comment
124:49 - here right
124:51 - no
124:53 - need to decrease last to do index right
124:57 - because that doesn't make sense all
124:59 - right this should even though
125:00 - the count can be different from how many
125:02 - indexes are where that existed right and
125:06 - also
125:07 - the to do pda
125:09 - is already closed
125:12 - in context all right so what's actually
125:14 - removing to do is like i said
125:17 - down here
125:19 - this close all right then it's a unique
125:21 - part of this macro
125:23 - okay
125:24 - and if you want to learn more about it
125:25 - search up close on anchor docs and you
125:28 - can read about more about what it does
125:29 - and what other properties you can do
125:31 - like has one enclosed
125:33 - okay for now this is all you need to
125:34 - know and what's the last thing i'm
125:36 - missing guys
125:38 - yes
125:39 - you guys know
125:40 - it's okay
125:42 - cool
125:43 - [Music]
125:44 - amazing guess what guys we're done with
125:47 - the smart contract right we just need to
125:48 - test if remove to do works
125:50 - and then we just have to hook it up to
125:52 - the front end and we're done
125:54 - so let's go ahead and test remove to do
125:57 - so part of testing is being able to
125:59 - build successfully so let's go ahead and
126:02 - build and see if we can run into any
126:03 - errors
126:05 - all right build successful that's what
126:06 - you'd like to see and again we're seeing
126:07 - a warning to do index because in that
126:10 - function mark to do and remove to do
126:12 - we're not actually
126:13 - using to do index but it's needed when
126:16 - we pass it in in the front end so don't
126:18 - worry about those warnings as long as
126:19 - you see build successful we're good to
126:21 - go and if we're okay with everything we
126:23 - need to upgrade and redeploy our smart
126:25 - contract like before
126:27 - luckily this might be the last time we
126:29 - upgrade our contract because after this
126:32 - we just need to hook it up to the front
126:33 - end so i'm gonna let this deploy and
126:35 - i'll check in with you guys in a bit
126:37 - all right deployment successful we go
126:39 - over to our test feature
126:42 - and we have removed to do and remove to
126:44 - do takes an argument what is the index
126:47 - of our to do
126:48 - zero right because only have one at the
126:50 - moment with this smart contract what is
126:52 - the user profile do i need to generate a
126:54 - new one i do not we can figure that all
126:56 - out here so let's go
126:58 - let's do a fetch at all so we can
127:00 - remember
127:01 - fetch all cool
127:03 - awesome so the user profile that's
127:05 - generated right
127:07 - is gonna be this the h6 right here i'm
127:10 - gonna hit copy and you can hit paste
127:13 - right here
127:14 - what's the to-do account i already have
127:16 - a to-do account that we want to delete
127:17 - it's just this one to do and that's
127:19 - gonna be this public key right here and
127:20 - if you double-click it actually just
127:22 - highlights it for you it's a cool
127:23 - feature on solano playground and if we
127:25 - hit paste
127:26 - there you go the authority if you
127:29 - remember we can double check this with
127:30 - the address who has the authority with
127:32 - this it's the wallet address
127:34 - right that was initialized
127:37 - okay so
127:39 - for authority we can just put my address
127:43 - okay and i want to make sure this is
127:44 - testing remove to do
127:46 - so let's go ahead and close this and if
127:49 - you look
127:50 - if i fetched all the studios i only have
127:52 - one if i remove this to do and close it
127:55 - how much should i have so let's go ahead
127:57 - and hit test
127:58 - let's go remove to do passed so it
128:00 - should close this to do account and we
128:02 - if i fetch all now
128:04 - nothing it's gone we successfully
128:06 - removed to do our contract is all done
128:10 - and since we deployed this and upgraded
128:12 - it it lives on the blockchain so what we
128:14 - need to do now is we need to go right
128:16 - back into vs code right
128:19 - and hook it up with our front end so you
128:22 - guys ready for the last stretch give
128:23 - yourself a pat on the back if you made
128:25 - it this far i want you guys to comment
128:27 - atron or i we love atron it's going to
128:30 - be like this let me show you guys
128:32 - if you guys comment this text
128:35 - we love atron i know you made it this
128:38 - far in the video atron is the lead one
128:40 - of the lead developers who made this
128:41 - wonderful tool solana playground
128:43 - right and i've been talking with him
128:45 - constantly and he's been helping me
128:47 - figure out how this works so shout outs
128:48 - to the developer for that it was a big
128:51 - help
128:52 - so now
128:53 - let's get coding and connect our front
128:55 - end
128:56 - okay so here we are back on vs code and
128:59 - all we need to do now is hook up our
129:01 - smart contract to our front end and what
129:04 - you need to know is this folder right
129:06 - here so let's take a look we need to
129:07 - take a look at this constants folder
129:10 - and input all the information you need
129:11 - like again this constant folder is given
129:14 - right but to set it up it's pretty
129:15 - simple
129:16 - here we're just importing pub key from
129:18 - solano web 3 and we're exporting all
129:22 - right this looks this should look
129:23 - familiar this is the address
129:25 - of your smart contract that you want to
129:28 - grab from the blockchain so we're going
129:29 - to change this and another one is this
129:31 - two dot json it's this one was given we
129:34 - want to change this to our idl from the
129:37 - smart contract so let's go ahead and do
129:38 - that right now
129:40 - so what i'm going to do is i'm going to
129:41 - get back our
129:43 - app right here
129:44 - and i'll make this smaller so we can see
129:46 - both
129:47 - and then we could do something like this
129:49 - bam
129:50 - okay
129:51 - cool
129:52 - so let's get the id
129:54 - and let's insert that let's double click
129:56 - this
129:57 - copy and now we're going to grab this
130:00 - program
130:02 - delete that
130:03 - paste there you go so constants is good
130:05 - we're using and now i know we're using
130:07 - this specific program right another
130:09 - thing that we're going to need to do is
130:11 - get the idea so how do we get the idea
130:13 - we're going to need to pull this by back
130:15 - in
130:16 - go into this toolbar right here
130:18 - click extra
130:19 - and idl right so you need to export this
130:23 - or you'll get this idl.json and if you
130:26 - double click it it should open it in vs
130:28 - code and it should look like this all
130:30 - right so we can make this a little bit
130:31 - smaller if you do alt z and take a look
130:34 - at this you don't have to understand
130:35 - what it is but if you take a look this
130:37 - is like essentially all the information
130:39 - about the program if you're coming from
130:41 - solidity think of this as the abi
130:44 - yeah
130:45 - so go ahead and control a
130:47 - right and then we're going to press
130:49 - command b
130:51 - and make sure you copy this and then
130:53 - your to-do.js json well your 2.json
130:57 - right you want to control a this delete
130:59 - it
131:00 - and paste what you copied from that idea
131:03 - anytime you change up your program or
131:05 - your smart contract you always have to
131:07 - update it with the matching idl this is
131:10 - how you do it
131:11 - okay so now we can minimize this and go
131:14 - ahead and open it
131:16 - cool
131:18 - and now let's see
131:20 - perfect so we have our constants updated
131:23 - and the code that we're going to be
131:25 - using is going to be all in this to
131:27 - do.js the majority of the logic of
131:30 - connecting
131:31 - our app to the blockchain is going to be
131:33 - in to do.js
131:35 - so one of the first things that we're
131:36 - going to do is just take a look at the
131:38 - imports right we're getting anchor we're
131:41 - using a use effect use memory state this
131:44 - is our solana program right that's from
131:46 - constance here's our rdl it's called to
131:48 - do idl
131:49 - toast helps with success messages right
131:51 - it gives us little notifications
131:53 - system program youtube8 we're all going
131:55 - to be using that later
131:56 - okay
131:57 - awesome
131:58 - so this is our dummy to-do's one of the
132:01 - first things that i want to start
132:02 - working on is this use effect right here
132:05 - so let's go ahead and work on that
132:07 - all right so we're in our to do js hook
132:11 - and with this use effect we're going to
132:12 - set up the logic about finding the user
132:16 - profiles and the to do accounts if you
132:18 - remember on the solano playground we
132:20 - were able to fetch all of those by
132:22 - clicking fetch all right here we're
132:25 - going to use our front end to fetch them
132:27 - and see if a profile exists a user
132:29 - profile and if a user profile exists
132:33 - then let's get all the to do accounts
132:35 - associated with that profile right
132:37 - that's essentially a mouthful but
132:39 - essentially let's write it in comments
132:41 - fetch
132:42 - user
132:44 - a user profile
132:46 - if there is a profile
132:49 - then
132:50 - get its
132:52 - to-do accounts right that's the first
132:54 - step of this
132:56 - and if there is no user profile then you
132:59 - should just have the initialize state to
133:01 - false and we should be able to
133:03 - initialize user so we can be able to
133:05 - initialize user later right now we're
133:06 - just fetching stuff
133:08 - okay so we can remove this static thing
133:11 - right for now let's go ahead and start
133:13 - coding so the first thing i want to do
133:14 - is use effect if you don't know what use
133:16 - effect is it's a react hook that
133:18 - essentially when you load the page this
133:20 - is the code that's going to run what i
133:21 - want to run when i load up the page or
133:23 - my app i'm going to run a function
133:25 - called find profile accounts right this
133:27 - is finding user profiles it's going to
133:30 - make asynchronous
133:32 - cool
133:33 - and essentially we're going to say if
133:36 - program right so if if program if you're
133:38 - wondering what the hell is program let's
133:40 - scroll up to the top
133:41 - and let's see okay it's not the top here
133:44 - it's actually should be down here
133:47 - program is this right we're using memo
133:49 - to get anchor right to and this anchor
133:51 - wallet is essentially just getting the
133:53 - program
133:54 - all right and this says anchor wallet
133:55 - but this is just wallet okay it could
133:58 - just be wallet
133:59 - here we are passing in the program id
134:03 - the idl and storing all that information
134:06 - within program so if that exists if
134:08 - there is a program with all those
134:09 - information it all matches up
134:11 - and
134:13 - we have a public key
134:16 - all right so if that program exists
134:18 - and we are connected with our wallet
134:20 - address
134:21 - and
134:23 - transaction is not pending right there's
134:25 - no ongoing transactions and transaction
134:28 - pending is just a state don't need to
134:29 - worry about it
134:30 - we want to do something so if we have if
134:33 - the smart contract exists if there is a
134:35 - public key that exists and if there's
134:37 - nothing pending right now
134:39 - let's go ahead
134:40 - and do a try catch
134:42 - okay
134:43 - so the catch if there's an error right
134:46 - we just for now let's just console.log
134:49 - error what's the error
134:50 - okay
134:52 - cool
134:53 - awesome
134:54 - for the try though what we want to try
134:56 - is for one set loading
134:59 - to true
135:00 - okay so if you remember in our index
135:04 - we have this loading
135:06 - and this loading is a component and the
135:09 - loading js it basically just says
135:11 - loading right when there's a transaction
135:12 - happening we have some reusable ui that
135:15 - just indicates hey something is loading
135:16 - so something's loading
135:18 - and while something is loading here is
135:20 - the fun part we're going to say const
135:23 - profile pda
135:26 - and profile
135:28 - bump
135:29 - all right
135:30 - now this is called destructuring and
135:32 - we're going to structure find program
135:34 - address sync and that is a function
135:38 - and it's going to take in an array of
135:41 - utf-8 dot encode
135:44 - user
135:45 - state right where have we seen that
135:47 - before all right user state all right
135:50 - and then from there we want public key
135:53 - dot to buffer
135:56 - and we also want to close this bracket
135:58 - right here and then comma
136:00 - program
136:02 - dot program id
136:05 - okay
136:06 - cool so that's that all right from there
136:08 - let's say const profile account right is
136:12 - equal to await again
136:14 - program.account.user
136:17 - profile
136:18 - dot fetch right and here's where we're
136:20 - gonna put the profile
136:22 - pda
136:23 - okay you guys got that
136:25 - cool so essentially we're gonna get pda
136:28 - and bump from our program and then from
136:30 - there we're going to
136:32 - get the profile account is going to be
136:35 - equal to
136:36 - what we get back from fetching it so
136:38 - this is our fetch right here so we're
136:39 - fetching to see
136:40 - if that user is initialized if not right
136:44 - it's not going to go through so
136:47 - if they were able to get data right
136:48 - remember when we did fetch we saw
136:51 - nothing sometimes because there was no
136:52 - user but when there was a user we were
136:54 - able to see one object so essentially if
136:58 - there is a profile account
137:00 - all right
137:01 - we're going to
137:03 - set the last to do remember what last to
137:05 - do is
137:06 - right and if profile account
137:08 - holds the pro the user profile how do i
137:11 - get the last to do of the user profile
137:13 - it's going to be profile.account dot
137:16 - last to do
137:18 - right so if you understood the
137:19 - structures before uh we're kind of
137:22 - taking what we know about the structures
137:23 - and getting what we need so i'm saying
137:24 - the last to do in my
137:26 - state and then you want to set
137:29 - initialize to true because if there is
137:31 - an account that means they're already
137:32 - initialized we can set that to true
137:35 - and then after that
137:37 - we can say
137:38 - so we have the account initialized
137:41 - we now want to get all the to do's with
137:43 - that account so let's say constitute
137:45 - equals
137:46 - await program right our program
137:49 - dot account dot to do
137:51 - account
137:53 - right it should probably be
137:55 - dot to do account
137:57 - yep that's what it's called
137:59 - dot
138:00 - oh right this is like the fetch all
138:02 - button that you saw
138:03 - and now we're gonna implement something
138:05 - called an author filter all right that's
138:07 - given you don't have to worry too much
138:08 - about what it does at the moment
138:10 - all right if you look under i believe
138:12 - utils off
138:13 - uh index yeah there's the author filter
138:16 - all right we're using that here that's
138:18 - just gonna help us get what we need
138:20 - and within alt author filter pass in the
138:23 - public key
138:24 - dot to string it just helps us get what
138:27 - we need
138:28 - okay
138:29 - okay
138:30 - so if this works we should have all the
138:32 - to do's associated with our authority
138:36 - and if we do have those we want to set
138:38 - our state to to do accounts
138:42 - right i don't know if you remember
138:44 - earlier this use effect it had set to do
138:46 - is two
138:48 - dummy to do's right
138:50 - that was the static data
138:52 - right that's what we were setting to use
138:54 - for now now that we have actual data
138:56 - that we can look at we can set this to
138:58 - to do accounts
139:00 - there we go
139:01 - all right and then we can have an else
139:02 - statement here
139:04 - if there is no profile account let's set
139:06 - initialized to false that means hey you
139:09 - connected your phantom wallet but you
139:11 - never initialized the user just yet all
139:13 - right so this is all setup stuff
139:15 - okay
139:16 - so then the error cancel log catch error
139:19 - you also can set initialize to false
139:21 - here
139:22 - and we can set the to-do's right if
139:24 - there's a failure should we pass in to
139:26 - do accounts no we should pass in empty
139:29 - array now there's also a finally here
139:31 - and when it's all said and done set
139:33 - loading
139:34 - to false right because we're downloading
139:36 - something awesome
139:37 - and then when that's done it's the if
139:40 - statement
139:42 - um this is
139:44 - the function
139:46 - all right all we did was write the
139:47 - function find profile accounts
139:50 - we haven't exactly called it so let's
139:52 - call it here find
139:53 - profile accounts
139:55 - and from here
139:56 - we can say
139:58 - uh public key
140:00 - right this is called the dependency
140:02 - module and whatever changes if this
140:04 - changes use effect will run again so if
140:06 - we change wallets it's gonna fetch for
140:08 - us
140:09 - all right if the smart contract program
140:12 - changes it's gonna fetch the to do's if
140:14 - for whatever reason a transaction is
140:16 - pending
140:17 - it will change the to-do's all right
140:19 - i'll fetch the to-do's again all right
140:20 - so this is how it's going to
140:21 - automatically load it without us
140:22 - refreshing every single time
140:24 - so that's the reason for this use effect
140:27 - let's go ahead and hit save
140:29 - and the last thing we're going to need
140:30 - is to bring find profile accounts all
140:32 - the way to the bottom actually i take
140:34 - that back we actually don't need to
140:35 - bring it
140:36 - the use effect is just going to run
140:38 - because we're running used to do so this
140:40 - should be fine another thing that i want
140:41 - to do is if it's initialized right
140:46 - then let's show the array
140:49 - right
140:50 - else
140:51 - console.log
140:53 - not yet initialize so we should see this
140:55 - if the use effect is running properly so
140:58 - what i'm going to do
140:59 - is i'm going to open up solana
141:00 - playground and let's see if it works
141:03 - okay so if you want to run your program
141:05 - we can use darndev but since we also
141:07 - installed 905 we can also do mtl dev
141:11 - oops and
141:13 - tl dev
141:16 - cool
141:17 - awesome it's going to open up for us
141:18 - when you use ntl div it's on 888.
141:21 - there we go so let's select the wallet
141:23 - let's click phantom
141:25 - that's going to ask me for my password
141:27 - connect there we go
141:29 - okay cool so let's inspect element here
141:31 - let's see if the use effect is running
141:32 - properly
141:34 - account does not exist that makes sense
141:37 - well that's actually good it's actually
141:38 - true there is no error this is coming
141:41 - from
141:41 - our console log
141:43 - okay
141:44 - awesome
141:45 - and as you can see at the moment if i
141:47 - click initialize it doesn't actually
141:49 - use our selena playground initialize
141:51 - user it's using the static one which is
141:54 - going to load to do's but we removed the
141:56 - dummy to do so that's why we don't see
141:57 - anything here so let's set up initialize
142:00 - user function now
142:02 - all right so before we get started let's
142:03 - quickly understand how this works so
142:06 - what i'm going to do
142:07 - is let's make the code bigger
142:09 - and we want to initialize user so what
142:11 - function initializes the user well we
142:14 - have one here initialize
142:15 - static user right
142:18 - so this is what's happening in our code
142:20 - i hit refresh
142:21 - i can hit initialize and this is what
142:23 - happens just set initialize to true
142:25 - that's not really helpful when we're
142:27 - going to connect our code to the
142:28 - blockchain but we do want right let's
142:30 - get rid of this guy and we can't get rid
142:32 - of this guy just yet we got to make a
142:34 - new function we're going to say const
142:37 - initialize
142:39 - not stat not static user just initialize
142:42 - user itself okay and this function is
142:45 - going to be asynchronous because we're
142:46 - going to need to
142:47 - make a function call to the blockchain
142:50 - right we gotta wait for a response
142:52 - okay
142:53 - so in this function the first thing you
142:55 - want to do is
142:57 - check if you know the program exists
143:00 - program exists
143:02 - and wallet is connected like there is a
143:06 - public key connected
143:08 - right
143:09 - then right
143:11 - we want to
143:13 - run
143:14 - initialize
143:16 - user
143:17 - from
143:18 - smart contract all right this is the one
143:20 - that we made on solana playground we run
143:22 - this initialize user this frontend
143:24 - function calls the backend function does
143:27 - that make sense cool it's not going to
143:29 - look exactly like this but that's the
143:30 - gist of it
143:31 - okay
143:32 - so let's go ahead and do that the first
143:34 - thing we're going to do is if
143:36 - program
143:37 - and
143:38 - public key so both have to exist
143:40 - we're going to do a try catch
143:42 - all right
143:43 - error
143:45 - awesome so we have a try catch just like
143:47 - that
143:48 - and for the error for now let's just
143:51 - console.log
143:53 - the error
143:54 - okay and then for the try what we want
143:55 - to do is one set transaction pending to
143:59 - true right because now there's a
144:00 - transaction pending
144:02 - and while the transaction is pending we
144:04 - need to do the fine program addressing
144:06 - thing again so let's do cons
144:08 - let's get the profile pda again so to do
144:11 - that we need profile pda comma profile
144:14 - bump then we can say equals find program
144:17 - address sync
144:18 - and this is where we add the utf encode
144:21 - stuff so we can do the brackets
144:23 - all this is
144:24 - is lets us let our front end understand
144:27 - what's coming through so we're going to
144:29 - encode
144:30 - the user
144:31 - state
144:33 - comma and then we're going to public key
144:35 - dot to buffer okay
144:38 - close the bracket
144:40 - program.program id
144:42 - that's it
144:43 - cool so now we have that done
144:46 - here is where we're going to start
144:47 - making that transaction
144:49 - so to do that we can say const tx is
144:52 - equal to ntx stands for the transaction
144:55 - transaction we want is to await
144:58 - program and remember when i say program
144:59 - what does that mean
145:01 - that means the program that i wrote
145:03 - right the one that i wrote in constant
145:05 - all right program
145:07 - dot methods
145:08 - this is how we can get access
145:12 - to
145:13 - our smart contract functions yeah so dot
145:15 - methods right and from here we can do
145:18 - any method we want so we can do
145:19 - initialize
145:20 - uh user for example
145:22 - right and call it like this all right
145:24 - you can even format it like this just
145:26 - like how we did in our smart contract
145:28 - same thing
145:29 - initialize user
145:31 - right so we're calling the initialize
145:33 - user function here we put any arguments
145:36 - does it take in remember the arguments
145:37 - that it takes in it doesn't take any
145:39 - besides context
145:41 - here's our context we're going to do
145:42 - accounts
145:43 - right
145:45 - object here
145:46 - user
145:47 - profile
145:49 - is equal to the profile pda the
145:52 - authority
145:53 - is going to be a public key
145:55 - and the system program
145:57 - is going to be the system program
146:00 - dot program id
146:03 - okay so essentially this is our context
146:06 - and then from there we want to do our pc
146:10 - all right
146:11 - all this just to connect to the
146:12 - blockchain so this is our back end stuff
146:14 - this is us interacting with the backend
146:16 - you got it so after that's all said and
146:19 - done all right we can go ahead
146:22 - and we can go set initialized to true
146:25 - right because if this is successful
146:27 - right we're waiting for this to run if
146:29 - it's successful then that means we
146:31 - successfully created a user this is us
146:33 - like running the test except for you
146:34 - know real life
146:36 - and then we have toast here remember it
146:38 - gives helps us give messages we can say
146:40 - success
146:42 - fully
146:43 - initialized
146:45 - okay
146:46 - and that's it for the try for the error
146:48 - we can add that toast now
146:50 - toast.error
146:52 - error dot to string whatever the error
146:54 - is and then stringify it
146:56 - and then
146:57 - there is a finally that we can add here
147:00 - we can set transaction pending
147:03 - to
147:04 - false
147:05 - okay
147:06 - and that should be it for initialize
147:08 - user now here's the next part it's
147:10 - important to understand this because
147:12 - we're going to repeat this process for
147:13 - the rest of our smart contract functions
147:15 - for initialize user right it's you can
147:17 - see it's grayed out right we defined
147:19 - what the function is but we haven't
147:21 - passed it down
147:22 - right so if i go down here
147:25 - this is where we're going to return
147:26 - everything i want to bring out of this
147:28 - file so as you can see
147:31 - right
147:32 - initialize static user
147:34 - was passed down and that's why i can use
147:36 - it on my app so if i want to add a new
147:38 - thing in here i can put comma
147:41 - initialize user
147:43 - all right save that boom
147:45 - now my question is to you guys
147:47 - can i initialize the user now using the
147:49 - smart contract
147:51 - let's click on it
147:52 - nothing right why though why is it still
147:54 - doing the static initialize
147:57 - well that's because
147:59 - if you guys go over to your index.js not
148:01 - this one
148:03 - the page index
148:05 - you'll see something right
148:07 - when i click initialize on click what
148:09 - happens let's find that button
148:11 - the button should be right here all
148:13 - right here's the initialize button and
148:14 - let's look at the on click
148:16 - the on click is initialize
148:19 - oh it's glitching out
148:21 - initialize
148:22 - static user that's why it's not
148:25 - running a solana transaction
148:27 - and so how can i make it
148:29 - turn into the regular one can i just do
148:30 - this
148:31 - right not quite because it's gonna say
148:34 - give us an error
148:35 - it's gonna be like initialize user is
148:37 - undefined unless i defined it earlier
148:39 - all right that's fine
148:41 - oh okay cool
148:42 - so initialize static user is grayed out
148:45 - but we still have
148:47 - where is it
148:48 - initialize
148:50 - user
148:51 - oh it's both wrong
148:53 - yeah
148:54 - it doesn't exist
148:55 - right so if i click it
148:57 - yeah initialize user is not defined how
148:59 - can i bring
149:00 - initialize user here do you remember our
149:03 - custom hook used to do everything we
149:04 - returned is up here
149:06 - just add it onto here so just say
149:08 - initialize user hit save
149:10 - now let's make this bigger all right so
149:12 - let's just do the whole process again i
149:14 - refresh
149:15 - right the first thing our app does it
149:17 - checks if a wallet is connected and if
149:19 - it is it's going to get the to-do's if
149:21 - it's initialized all right so let's
149:23 - connect our wallet
149:25 - okay we're connected right but there's
149:27 - no user associated
149:29 - if i untick inspect element i hit
149:31 - console not sources console there's no
149:34 - account that exists with this right
149:36 - so if i hit initialize
149:39 - oh initialize user is not a function
149:40 - that's not good
149:42 - so that's our first error let's go ahead
149:43 - and take a look at that
149:45 - initialize user is not a function
149:48 - let's go back here yep spelled it wrong
149:50 - here that would help
149:52 - initialize
149:54 - initialize
149:55 - okay now let's save it
149:57 - right that's why spelling is important
149:58 - guys let's hit initialize
150:01 - and we should get a different error now
150:03 - program methods initialize you see look
150:05 - the spelling on my code is wrong too so
150:08 - let's go back there let's go to to do's
150:11 - yeah so i'm trying to call a method
150:13 - called int intel
150:15 - right so it needs i
150:17 - all right because in our salon
150:18 - playground everything is spelled
150:19 - correctly so let's hit save
150:21 - all right
150:22 - this got bigger let's try this one more
150:24 - time
150:25 - all right so after i fix all the
150:26 - spelling click this button
150:28 - hey okay look this this is our
150:31 - transaction right here it's asking us to
150:32 - sign and approve that we want to
150:34 - initialize the user let's hit approve
150:37 - okay
150:38 - let's hit refresh
150:40 - hey okay it was supposed to refresh it
150:42 - on its own but sometimes the state
150:43 - glitches right but as you can see
150:46 - we don't have the initialize button
150:48 - anymore why not because
150:50 - if the user exists
150:52 - we don't see initialize button that's it
150:55 - right if i refresh this now
150:57 - no initialize button right you saw it
150:59 - for a second but then it updated if i
151:01 - disconnect my wallet and refresh
151:03 - there's an initialize button but i can't
151:05 - initialize right
151:07 - unless i'm connected right so that's all
151:09 - we did that's the setup we did right
151:11 - it's already initialized when i connect
151:13 - my wallet we're good to go all right so
151:15 - we can successfully initialize our user
151:17 - with our front end you know cool part
151:20 - about what we just did is that we just
151:21 - have to repeat that process for all the
151:23 - other methods right so we successfully
151:25 - are able to initialize a user right but
151:27 - if i do something like this and hit
151:29 - enter
151:30 - right
151:31 - this isn't going to work anymore now we
151:33 - can't add it to do anymore because we're
151:36 - not working with static data we're
151:37 - working with the blockchain all right so
151:39 - let's go ahead and do that so what we
151:40 - can do we can make this guy smaller
151:43 - again
151:44 - and we can actually just make this
151:45 - completely smaller
151:47 - and just work with the code
151:49 - okay cool so we initialized the user
151:52 - let's go ahead and
151:53 - add a to-do let's add that functionality
151:56 - in
151:57 - all right so above add static to do
151:59 - we're going to make another function
152:00 - called
152:01 - i had to do
152:02 - right so add to do is our frontend
152:04 - function that's going to call our method
152:06 - on the blockchain
152:07 - all right so it's
152:08 - asynchronous and again same checks here
152:12 - if there's a program
152:13 - if there's a wallet
152:15 - all right
152:16 - let's do something
152:17 - and what we want to do is a try catch
152:20 - with an error
152:21 - and with that error we can just console
152:23 - log it
152:24 - and i can set up the next thing we're
152:25 - going to use toast toast
152:27 - dot
152:28 - error is whatever the error is dot 2
152:31 - string
152:32 - okay
152:33 - awesome
152:34 - so what do we want to try with add to do
152:36 - if you take a look at initialize user
152:38 - what do we do after in this try catch
152:40 - all right it's going to be a lot of the
152:41 - same thing
152:42 - so what we need to do
152:44 - in this try is just set transaction
152:47 - pending
152:48 - to true
152:49 - all right did i send it to false later
152:52 - initialize user set transaction oh yeah
152:55 - to false okay for now it's true right
152:57 - because we're running a transaction
152:59 - okay
153:00 - and then after that we need the pda
153:02 - stuff right for the we need to get the
153:04 - user profile
153:05 - so let's get cons
153:08 - profile
153:09 - pda
153:11 - and the bump profile bump
153:13 - and this is going to equal the same
153:14 - thing as before
153:16 - find program address this long thing
153:18 - let's just paste it
153:20 - okay
153:21 - okay and then we also want to get all
153:24 - the to do accounts
153:25 - so
153:27 - in this next line we're going to say
153:29 - const
153:30 - oops const
153:31 - to do
153:32 - pda to do bump right
153:36 - and this is going to be equal to the
153:37 - same thing i'm going to just paste it
153:39 - because it's pretty long oops
153:41 - it's going to be this right here i'm
153:43 - going to just paste it because it's
153:44 - going to be pretty long but i'll just
153:46 - explain to you it's find program address
153:49 - sync again
153:50 - we're going to encode it to get
153:51 - something understandable this time we
153:53 - want to do state right because it's to
153:54 - do account
153:55 - still buffer the public key and we just
153:58 - need to get the un8 array oops from last
154:01 - to do right so
154:03 - don't need to worry about it we're just
154:04 - getting the last to do for later
154:07 - and
154:08 - awesome
154:09 - another thing that we're going to need
154:10 - is the const content
154:13 - right well actually no we don't even
154:14 - need content anymore we want to get the
154:17 - input
154:18 - from that form that we had to remember
154:20 - that input field and i wrote like learn
154:22 - solana on it we want to get that input
154:24 - and attach it to our add to do method
154:28 - call you understand what i said let's
154:30 - see if you do
154:31 - all right so if you remember let's bring
154:33 - back our front end
154:35 - if you remember
154:36 - this
154:38 - input field right
154:40 - if i write something like uh finish
154:43 - connecting
154:44 - front end right
154:46 - whatever i just wrote is stored in a
154:49 - state called input right so that means
154:51 - there's a string out there called finish
154:53 - connecting front end in a state called
154:54 - input
154:56 - and that state is also existing here
154:58 - there's an input state all right so
155:00 - theoretically if i were to console log
155:02 - input
155:03 - you'd see
155:04 - the finish hooking up front end or
155:06 - whatever right so that's that's what we
155:08 - need to know
155:09 - so let's take what we know with that
155:11 - and
155:12 - what we want to say is here
155:14 - if there is an input right if there's no
155:17 - text in there right this isn't going to
155:18 - run but if there is text in there
155:21 - what we want to do now is
155:23 - set
155:24 - oops actually no if there's an input
155:26 - right we should be able to just call the
155:28 - method so let's just say
155:29 - um
155:30 - await
155:32 - program
155:33 - dot methods
155:35 - all right and then we can do dot
155:37 - add to do
155:38 - right i think i have to make this uh
155:41 - asynchronous no okay cool
155:43 - dot add to do right because that's what
155:46 - it's called uh let's put a capital here
155:48 - i'm gonna put
155:49 - parentheses and it's gonna take in
155:52 - oops it's going to take in
155:55 - one parameter do you remember what
155:56 - parameter add to do takes all right it's
155:58 - going to take in content so what we're
155:59 - going to put is content then input all
156:02 - right because we're going to add it to
156:03 - do so if there is something in that
156:05 - input field take what's ever in there
156:08 - and
156:08 - run it as
156:10 - content for the ad to do
156:12 - all right that's all it is so then we
156:14 - can just do dot accounts
156:16 - right so here's our context and we can
156:18 - say the user profile
156:21 - is profile pda
156:23 - right just like before this time it's
156:25 - different because we have a to-do
156:26 - account now so to do account
156:28 - is whatever we grabbed here right to do
156:31 - pda to do pda
156:33 - and the authority
156:35 - is still our public key
156:37 - so we can still write public key here
156:39 - and the system program oops not that
156:41 - system program system
156:43 - program
156:44 - is
156:46 - system program dot program id
156:49 - awesome
156:50 - okay uh last thing we need to do our pc
156:53 - here
156:54 - okay that's necessary and after that we
156:56 - can do toast.success
156:59 - successfully
157:00 - add it to do
157:02 - hey all right let's put a period here
157:05 - okay i think that's it for that uh now
157:08 - it's just up to
157:10 - the
157:11 - input
157:12 - okay cool so if if there's an input
157:15 - run the add to do put pass in the input
157:18 - here's the context rpc success okay that
157:21 - should work looks good to me
157:23 - toast error and then just to finally
157:25 - here let's do finally
157:27 - and let's do set transaction pending
157:31 - to false right because there shouldn't
157:32 - be a transaction pending anymore
157:34 - awesome so we have the ad to do but you
157:36 - see it's grayed out why is it greyed out
157:39 - right why is it grayed out
157:41 - that's because we need to return it so
157:43 - next to initialize user let's add to do
157:47 - all right if you return it here
157:49 - right back in your index page guys
157:52 - at the top make sure add to do exist
157:54 - here as well
157:55 - so let's check
157:57 - we have
157:58 - add to do right we have mark to do and
158:01 - we have removed to do already set up for
158:02 - you guys all right we just as you can
158:04 - see they're still grayed out so how can
158:06 - we implement it all you need to do is
158:08 - find where add static to do is
158:10 - okay let's find it should be in the form
158:13 - there it is so add static to do we don't
158:15 - need this anymore we want
158:17 - add to do we want to run that function
158:19 - instead
158:20 - it makes sense okay let's just test out
158:23 - our app
158:24 - all right let's do this
158:26 - awesome
158:27 - and let's just run through the whole
158:28 - process right so let's disconnect real
158:30 - quick refresh boom
158:32 - we can't initialize because our wallet's
158:33 - not connected
158:35 - click next select wallet select phantom
158:37 - and let's say uh my first to do let's
158:40 - hit enter what just happened right so
158:43 - that's our first error you saw that it
158:44 - refreshed why did it refresh though
158:47 - why do you think it refreshed
158:49 - right
158:50 - it refreshed because if you look on
158:52 - index
158:53 - let me make it easier for you guys to
158:54 - see if you look at index there's a form
158:56 - here and it's on submit
158:58 - every time we submit something with the
159:00 - form it's going to automatically refresh
159:02 - that's the behavior of submitting right
159:04 - but we don't want that behavior so we
159:06 - can actually do something pretty cool so
159:08 - if you notice
159:09 - on the static version of this function
159:11 - there's we're passing in an e for event
159:14 - and doing something called e dot prevent
159:16 - default all right it's going to prevent
159:18 - the default action of that function
159:21 - so for the default action of a form is
159:24 - refreshing so we need to add that here
159:26 - as well so let's add e
159:28 - and then from there we can do e dot
159:30 - prevent default
159:32 - save right and that should carry over
159:34 - right since we passed it all down
159:36 - and now let's hit refresh just to make
159:38 - sure and let's do
159:40 - create
159:42 - to do
159:43 - let's just do create to do for
159:44 - simplicity let's hit enter now
159:47 - hey our transaction is there we're going
159:49 - to spend this much solana it's not a lot
159:51 - at all
159:52 - right so that we can store this to do
159:55 - on chain right it's actually connected
159:57 - to a backend sick so let's hit approve
159:59 - and now let's see if it works
160:01 - that was interesting right you saw a
160:02 - little something happen over there
160:04 - right and we also saw that the create to
160:06 - do is still here right
160:08 - this is all part of the learning
160:09 - experience but as you can see create to
160:10 - do is there now and when i refresh that
160:13 - disappears
160:14 - uh we can make this more smoother right
160:17 - by playing with our states
160:19 - so let's go back to add to do real quick
160:22 - all right add static notice how we set
160:24 - input to clear right
160:26 - so
160:28 - if it's successful we can set
160:29 - transaction to false and set input
160:32 - to clear right it's going to clear that
160:34 - input for us
160:35 - all right so now that that's there let's
160:37 - see let's add another one let's say
160:40 - master
160:41 - solano hit enter
160:43 - and approve
160:44 - hey look at that right it cleared our
160:46 - input because that's what the line that
160:47 - we just added and it set transaction
160:50 - pending to true and now
160:52 - it's automatically updated right we can
160:54 - add to do's this is awesome right can we
160:56 - mark to do's though
160:57 - well we can but this is only on the
160:59 - front end if i were to you know figure
161:02 - fetch this to do account it's still
161:04 - going to say uh
161:05 - you know false
161:07 - right
161:08 - when i refresh you can see that it's not
161:10 - actually completing them does that make
161:12 - sense so that means we have to update it
161:15 - on the back end alright so luckily we
161:17 - have a function that we created already
161:18 - that's going to do just that so let's go
161:20 - ahead and do that
161:21 - alright let's go ahead and do the next
161:22 - function
161:24 - i'm going to make this bigger
161:26 - perfect
161:26 - so we had to do
161:28 - now we want to mark be able to mark it
161:30 - to do on the back end right because we
161:32 - can only change it on the front end so
161:34 - let's go ahead const mark to do
161:36 - is equal to an asynchronous function
161:40 - like so
161:42 - one thing that we will need to pass in
161:44 - for mark to do is the to do
161:47 - pda all right we need to know what the
161:50 - to-do account associated right what to
161:52 - do account
161:53 - or essentially what to do
161:55 - and
161:56 - what to do index this is just parameters
161:59 - they don't mean anything just yet
162:00 - okay
162:01 - cool the rest is pretty standard we're
162:03 - gonna do the if program thing again
162:06 - and public key
162:07 - okay then we do a try catch
162:09 - the error is gonna be the same as the
162:11 - other ones
162:12 - we're going to do the console.log error
162:15 - and we're also going to run toast dot
162:18 - error
162:19 - is going to be
162:21 - yeah error going to be error
162:24 - dot to string like that
162:26 - okay awesome and then for the try
162:29 - we have to get the
162:32 - profile pda again and we don't
162:33 - necessarily need the to do pda this time
162:36 - so let's go ahead and do that
162:38 - so we're gonna do what i do again let me
162:40 - see
162:41 - set transaction pending okay cool i
162:43 - remember now
162:44 - you want to set transaction pending
162:46 - again
162:47 - to true
162:48 - you want to set loading right because we
162:51 - want to this might take a while so let's
162:52 - set loading to true and let's get our
162:54 - const profile pda again
162:57 - and profile
162:59 - i mean we're not if you notice i'm not
163:00 - really using bump it's just there in
163:02 - case we need it so you can remove it if
163:04 - you want
163:05 - so
163:06 - find program address sync it's going to
163:08 - be the same thing as previously
163:10 - all right we're going to get user state
163:13 - public key to buffer and program id
163:15 - awesome
163:16 - let me just double check to make sure
163:17 - that's correct find program just sync
163:21 - okay that looks right to me
163:22 - awesome so remember after we usually do
163:24 - this
163:25 - here is where we're going to call our
163:26 - method
163:27 - from our smart contract so to do that
163:30 - let's do an awake here wait program is
163:33 - the program
163:34 - to get all the functions in that program
163:36 - you say that methods right then you can
163:39 - hit enter here and then you can say the
163:41 - method that you want to call which was
163:43 - mark
163:44 - to do okay
163:46 - and mark to do
163:47 - is going to take in what do you remember
163:49 - and think back to our solana playground
163:52 - what did it take in it took in
163:54 - to do
163:56 - idx
163:58 - all right
163:59 - cool and for the accounts
164:01 - right
164:02 - it's just gonna be the
164:04 - user profile pda cool part is to do
164:08 - account it's just going to take in the
164:10 - to do pda parameter
164:13 - there you go now it's not granting okay
164:15 - and then for the authority
164:17 - all right it's going to be public key
164:20 - and for the system program
164:24 - system program
164:26 - dot program
164:28 - id
164:29 - alrighty so that is it is there anything
164:31 - else we need to do guys
164:33 - yes you didn't let me down mark it's
164:35 - going to be dot rpc all right shout out
164:37 - to all the monks we do toast dot success
164:41 - and then we can do here
164:43 - string
164:44 - successfully
164:47 - marked
164:48 - to do exclamation point because i'm
164:49 - excited
164:50 - so let's hit save
164:52 - and oh yeah we need the final here
164:54 - because finally
164:56 - when it's done we're going to set
164:57 - loading
164:59 - to false
165:00 - and we're gonna set
165:02 - transaction pending
165:04 - to false as well
165:06 - okay
165:07 - now we wrote the instructions for this
165:09 - function but it's still great because
165:11 - we're not using it anywhere how do we
165:13 - use it add it to the return or add it to
165:15 - the tele
165:17 - all right so add it to the tele mark to
165:18 - do
165:19 - hit save and if every time you return
165:21 - something here
165:23 - you have to pull it out to where you
165:25 - want to use it so are we saying mark to
165:27 - do here and i think we are
165:29 - yes we are oops sorry guys yes we are
165:32 - mark to do right there all right it's
165:34 - grayed out because i haven't used it in
165:35 - my code so let's figure out where were
165:37 - you saying mark to do
165:39 - so think back to our parent child
165:42 - relationship all right
165:44 - can i find mark to do an index
165:47 - do you want a reference to the app let's
165:48 - take a look right like can i find
165:51 - this mark to do button
165:53 - in my index
165:55 - no i can't because there's a to do
165:56 - section here alright so let's go to do
165:58 - section there so let's go to to do
165:59 - section right the child of index is to
166:03 - do section
166:04 - okay
166:05 - and notice how it's passing in an action
166:08 - the action is going to be marked to do
166:10 - how do i know go back to index all right
166:12 - look look at this first to do section
166:14 - i'm passing the incomplete to-do's and
166:16 - the action that i'm passing is mark
166:18 - static to do for the completed to do
166:19 - section
166:20 - i'm passing remove static to do so this
166:22 - is the one i'm working on so the first
166:24 - thing i want to do is take out this
166:26 - static to do and now put mark to do and
166:29 - that's our action now
166:31 - right so when i go to this component
166:33 - underneath like if you open this action
166:36 - up you'd see that it actually says mark
166:37 - to do
166:39 - right so we're taking that mark to do
166:41 - and passing it into to-do list follow
166:44 - that graph if you have it handy go ahead
166:46 - and open it up
166:47 - so it's going to do list right
166:49 - notice how it's still action so
166:52 - underneath action if you open it up it's
166:54 - still marked to do and let's see where
166:57 - is the action and it's going to go into
166:58 - to-do item
167:00 - and we're passing that action so we
167:01 - passed down props like three times right
167:04 - so that means all the way at the bottom
167:06 - of to do item is right here cool
167:09 - and if you remember here's a memory test
167:12 - mark to do
167:14 - takes in how many parameters or
167:15 - arguments
167:17 - takes in two
167:18 - right we wrote it as to do pda right or
167:20 - in other words we can just write public
167:23 - key here okay we can say public key
167:25 - because we're also passing that down
167:28 - all right and just for the sake of
167:30 - simplicity we also want that public key
167:32 - for removing it to do so for mark to do
167:34 - it's going to be this a public key it's
167:36 - going to be this okay
167:38 - awesome
167:39 - okay
167:40 - so
167:41 - now we're talking right we're passing in
167:42 - two things
167:43 - mark to do is set up
167:45 - now it's the moment of truth okay let's
167:48 - go ahead and bring this guy in let's do
167:51 - something like this
167:53 - cool so which one you want to mark guys
167:55 - you want to master solana all right
167:56 - let's see if that works let's click on
167:58 - this
167:59 - hey so that's see this loading right
168:00 - here that's our loading state component
168:02 - loading in
168:03 - and here right we can store or not store
168:07 - but we're going to mark
168:08 - that to do item as true so if it's true
168:10 - it should move down that proof
168:13 - let's go master solana is completed and
168:15 - remember that problem when i refreshed
168:17 - it goes back i said it again refresh
168:20 - it's still completed because our back
168:22 - end our to-do account on the blockchain
168:25 - is telling us that it's still completed
168:27 - it's persisting
168:29 - so that's awesome and i'm not going to
168:30 - be able to delete it to do because it's
168:33 - not set up yet so that's the last
168:34 - function are you guys ready for the last
168:36 - hook after this we're pretty much done
168:39 - all right everyone we're in the end game
168:41 - now so i moved back to our to do.js
168:44 - right i'm above remove stack to do in
168:46 - line 245 for me
168:49 - and all we need to do is say const
168:51 - remove
168:52 - to do right we don't want the static one
168:54 - this time and say async
168:56 - it's going to take two parameters again
168:58 - to do pda is what we'll call it and to
169:01 - do
169:02 - idx all right from there
169:05 - we're just going to set up the skeleton
169:06 - of the function
169:07 - like this
169:09 - and let's write the logic
169:10 - all right as you can see all the heavy
169:12 - lifting is on the smart contract itself
169:15 - so all we need to do
169:17 - is hook it up so if you say if program
169:19 - again and the usual if public key as
169:22 - well
169:23 - what do we do next set transaction
169:25 - pending to true
169:27 - what else do we do guys what else do we
169:28 - need any states that we need to update
169:30 - while we're here
169:31 - yes
169:32 - set loading a lot of coding is actually
169:34 - patterns
169:35 - all right so if you follow this pattern
169:37 - what should come next
169:39 - exactly you want the profile pda so i'm
169:41 - just going to paste that here because
169:43 - it's the same thing i wrote every single
169:44 - time const profile pda and bump and then
169:48 - just do find program address sync
169:50 - and get all of this stuff
169:52 - good to go awesome so if we have those
169:56 - we can say await program what's program
169:59 - alright it's the solana program we wrote
170:00 - together
170:01 - if i want to get the functions from that
170:03 - program since it's public we can do dot
170:05 - methods
170:06 - and here we can do dot remove
170:08 - to do
170:10 - and this is going to take in a parameter
170:11 - if you remember think back to solana
170:13 - playground all right takes in
170:15 - but to do
170:16 - idx
170:18 - all right so this is not grayed out
170:19 - anymore
170:20 - cool
170:21 - and for the accounts right we're going
170:22 - to do a dot accounts here
170:24 - this is essentially the context if we
170:26 - say user profile
170:28 - is the profile pda
170:30 - the to do account
170:32 - is going to be the to do pda that we
170:34 - pass in
170:35 - all right it's not going to be called to
170:37 - do pa it's going to be called the public
170:39 - key later on you'll see
170:40 - the authority
170:42 - colon public key and we just need system
170:45 - program i believe so let's do system
170:48 - program like so and capital s system
170:51 - program
170:52 - dot program
170:54 - id
170:55 - and voila
170:57 - okay so after that accounts there's one
170:59 - more thing we do
171:00 - dot rpc
171:02 - and we just use toast toast dot success
171:06 - i can say successfully
171:09 - removed
171:11 - to do
171:12 - okay
171:13 - and after that
171:15 - oh
171:16 - i forgot guys why don't you say
171:17 - something this should all be under a try
171:19 - all right so all that code we just wrote
171:22 - copy it all the way up from toast to set
171:24 - transaction cut
171:26 - go over here paste
171:28 - that's all in a try
171:29 - right
171:30 - and we want to catch an error
171:33 - if there's an error we're just going to
171:35 - console.log it
171:36 - it's all same stuff as before
171:38 - toast.error
171:40 - and we can say error.tostring
171:43 - and yeah cool so then we have finally
171:45 - again
171:46 - we can say set loading is what guys is
171:49 - it false or true
171:50 - all right false
171:52 - you got it i almost tricked myself
171:54 - set transaction pending though is false
171:56 - or true
171:57 - false
171:58 - hey okay that's it that's it for remove
172:01 - to do it's grayed out because we didn't
172:03 - use it anywhere else we just wrote the
172:05 - instructions we want to go over here
172:07 - but comma remove
172:10 - to do
172:11 - okay
172:13 - okay after that where do we need to go
172:15 - all right we are exporting it on our
172:17 - hook now we need to
172:19 - place it where it's relevant and
172:21 - remember i already set it up for you
172:22 - remove to do is right here still grayed
172:23 - out though
172:24 - where do we need to replace it
172:26 - where do we need to replace it
172:28 - you see it
172:30 - over here so it's very similar in terms
172:32 - of passing it down just like mark to do
172:35 - we want to put remove to do right here
172:37 - so remove the static word this is our
172:39 - new function our bigger and more awesome
172:41 - function remove to do
172:43 - okay
172:44 - are we done yes or no
172:46 - all right if you said yes
172:48 - you got it why are we done though
172:50 - because the way we set it up to pass it
172:52 - down
172:53 - it's still consistent it's reusable it's
172:55 - nice and dynamic
172:57 - let's prove it so i'm passing an action
173:00 - prop called remove remove to do as an
173:02 - action prop
173:04 - and it's going to go into do section to
173:05 - remember that for later remove to do has
173:07 - a new name it's called action so we go
173:10 - to let's do component go to do section
173:13 - and now we're getting that action right
173:16 - and we're taking it and passing it down
173:18 - to its child to do list and we're going
173:21 - to call it action action still action
173:24 - okay so to do list so in to do list take
173:27 - that action pass it to to do item as
173:30 - action keeping the same name
173:32 - okay and then from the list we got to do
173:34 - item the action is gonna run handle
173:38 - remove to do a different one and this is
173:40 - the actual function itself okay this is
173:43 - the remove to do just renamed all right
173:45 - has two names
173:47 - and pass in public key and idx that's
173:49 - still the same so this is essentially
173:50 - the same thing except here we can
173:52 - identify if it's removed to do right the
173:54 - trash icon should remove it to do and
173:57 - the other button
173:58 - should add a to do i'm going to add it
174:00 - to mark it to do
174:02 - right
174:03 - handle mark to do right here
174:04 - okay
174:05 - if you notice
174:07 - i didn't add any new code here right i
174:10 - just walked you through how it's getting
174:11 - passed down so let's bring back our
174:14 - front end or our local host
174:16 - it's going to say remove to do is not
174:17 - defined that's fine
174:19 - it might be because of spelling let's go
174:20 - back to index
174:22 - remove to do
174:23 - is it on here i could just warn was on
174:25 - here
174:26 - remove to do is that the same
174:29 - oh yeah it should be defined
174:30 - so that must mean in our to do just
174:33 - oh removed to do there we go let's save
174:36 - that and that would definitely help
174:39 - and now
174:40 - no more errors
174:42 - all right
174:43 - so what we need to do now is let's
174:45 - refresh this
174:46 - just for safety and
174:48 - if this works we're done let's click the
174:50 - trash icon
174:52 - approve transaction and look at this we
174:54 - get the solana back we used to store
174:56 - that account because remember we're
174:58 - closing the account right so we're gonna
175:00 - get some background approve
175:02 - and there you go we only have one to do
175:05 - item
175:06 - let's freaking go guys we finished the
175:08 - to-do app you made it this far into the
175:10 - video all we have to do left is let's
175:12 - celebrate by pushing our changes to your
175:15 - repo right so we don't lose anything
175:18 - let's go ahead and do that now
175:19 - let's do this
175:21 - and let's go ahead and say get status
175:23 - all right you can see all the things we
175:24 - changed we added a lot and it's been a
175:26 - while since we did this hit add
175:28 - hit commit and we can just it only has
175:30 - one commit message finished to do app
175:32 - hopefully you guys stopped and pushed
175:34 - your changes while i was teaching
175:36 - so let's do git push now
175:39 - awesome and since we pushed to our repo
175:42 - guess what
175:43 - when you go back to here
175:45 - go to your netlify
175:47 - let's go to netlify
175:49 - let's log in
175:50 - let's go with github
175:52 - our solana to do app
175:54 - should be building now see how it's
175:56 - automatically building our live site is
175:58 - updating to the latest version of our
176:00 - repo
176:01 - and once that's done you have your live
176:03 - to do app and it should work just like
176:05 - this and again quick demo if i
176:07 - disconnect
176:08 - you'll go back to the normal page
176:11 - oops oh yeah that's right we got to make
176:12 - sure we're still running
176:14 - let's go back real quick
176:15 - let's do a uh ntl dev
176:19 - okay ntl dev open this up for us
176:22 - okay and you can see
176:24 - it's nothing
176:25 - and if i connect my wallet that's wallet
176:27 - number four but what if i used a
176:28 - different wallet let's try it wallet
176:30 - number three
176:31 - i have less solana here
176:33 - let's refresh just in case
176:35 - select wallet
176:37 - and let's put in the password for wallet
176:39 - number three
176:40 - and let's prove this connect and bam if
176:43 - you remember we only had one to do in
176:45 - wallet number four
176:46 - but as you can see
176:48 - there's no to do's right because every
176:50 - wallet that connects to our app is going
176:53 - to have their own set of to-do accounts
176:55 - how awesome is that we did that using
176:58 - the solana blockchain so let's approve
177:01 - right
177:02 - there we go and let's see unique
177:05 - to do
177:07 - and let's hit approve
177:08 - unique to do all right let's disconnect
177:11 - all right let's switch to wallet number
177:12 - four again let's see if we see that
177:14 - cool connect wallet
177:16 - bam no you need to do
177:18 - that's it guys you made a successful
177:21 - solana to do dap
177:24 - all in one go so i hope you guys enjoyed
177:26 - the video my goal with these is if you
177:28 - learn anything at all even if it's just
177:30 - a little bit i'm happy so stay tuned for
177:33 - our next salon video and see you guys in
177:35 - the next one
177:36 - peace