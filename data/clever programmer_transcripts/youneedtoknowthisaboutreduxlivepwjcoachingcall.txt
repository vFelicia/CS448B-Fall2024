00:00 - [Music]
00:06 - what's going on guys welcome to
00:08 - another video and today i'm excited to
00:11 - drop another
00:12 - coaching for on the channel and today
00:14 - we're going to be covering a bunch of
00:16 - redux stuff and a bunch of value based
00:18 - propositions
00:19 - so get excited it's going to be a fun
00:21 - video
00:22 - and without further ado let me go ahead
00:24 - and introduce
00:25 - the amazing community that we have over
00:27 - at profit with javascript say hello guys
00:31 - yo hey
00:34 - that's it let's go
00:37 - that's what i'm talking about guys let's
00:39 - go that's the energy
00:41 - that we want to get started yeah it's
00:44 - cool
00:44 - awesome stuff guys nice
00:49 - all right now guys i've literally we
00:51 - were having a great conversation before
00:53 - we've literally started going live so
00:55 - i'm gonna go ahead and literally carry
00:56 - on from where we were going off
00:58 - and we are we were pretty much answering
01:00 - questions so guys let's jump straight
01:01 - back into that so
01:02 - we started off with priyanshu had a
01:04 - question and then uh whoever was about
01:07 - to ask question afterwards
01:08 - go feel free after after pre-entry so
01:11 - you
01:11 - shoot yeah so i was asking about
01:14 - typescript so
01:15 - like i've done a lot of javascript now
01:17 - and i'm also going to do a lot of it
01:19 - again but typestrip is like something
01:21 - like a strongly typed language and
01:23 - and it has a lot of concepts of classes
01:24 - and object-oriented programming in
01:26 - general so
01:27 - like although it is a very evolving
01:29 - language it hasn't evolved yet
01:31 - people are still trying to learn
01:33 - typescript and like getting a hand in it
01:35 - and but i don't know the future of it so
01:38 - like if you could just introduce us with
01:40 - it and like the future of it and
01:42 - everything like that yeah
01:43 - so if if you guys don't know what
01:45 - typescript is you have javascript
01:46 - javascript's the language that we code
01:48 - in whenever we're doing like web
01:49 - development or
01:50 - the brains behind web development uh
01:52 - typescript if you've come from
01:54 - a language like java or
01:58 - c sharp or something like that you'll
02:00 - notice that in those languages
02:01 - you have things like uh you have to
02:03 - define the type
02:05 - of a variable so you have like string
02:08 - number integer double float things like
02:11 - that you have all sorts of types now the
02:13 - reason why
02:13 - is because it's meant to be a strongly
02:15 - typed language right so
02:17 - it's strongly typed because notice how
02:19 - in javascript all you have to do is sort
02:21 - of type in
02:22 - const name equals priyanshu and it just
02:25 - works
02:26 - right but if you was going in typescript
02:28 - you'd have to say const name
02:29 - colon and then you would say string and
02:32 - then you would say parenting and then
02:34 - what would happen is if i tried to give
02:36 - um if i tried to give oh nice corey's in
02:39 - the house
02:40 - what's up dude uh yeah but if i went to
02:42 - go ahead and give
02:43 - um let's go ahead and say i tried to
02:46 - give
02:46 - a constant name so imagine that i'm just
02:48 - going to go ahead and you guys can
02:50 - see my screen right let me go ahead and
02:51 - share it now so you guys can see this
02:54 - yeah so imagine like we had um
02:58 - something like this we had kant's name
02:59 - and then so this is what we're used to
03:01 - right
03:02 - so this kind of thing in typescript you
03:05 - basically have it like this
03:06 - uh i can't remember the exact syntax
03:08 - what i think is that yeah uh
03:10 - i think it's that yeah um because i used
03:13 - to code quite a bit anybody it's been a
03:14 - while
03:14 - um but let me go ahead and freeze it
03:17 - nice oh man
03:18 - okay yeah so there we go so you'd have
03:21 - to do this but now imagine if i went
03:22 - ahead and did this right so i went and
03:24 - did
03:25 - something like this uh what's going to
03:26 - happen it's going to freak out it's
03:28 - basically going to say no no no
03:29 - this doesn't work because we're
03:31 - protecting uh
03:32 - against this sort of this sort of
03:34 - headache but we don't want to have we
03:36 - don't want to allow for anything but a
03:38 - string inside of it
03:39 - so this is the benefit of oops it's the
03:42 - benefit of typescript
03:43 - right and there's also a bunch of other
03:45 - stuff there's like classes
03:46 - i mean you get classed in javascript but
03:48 - there's also like a um
03:50 - i used it so much a while back but kind
03:52 - of
03:54 - arrow functions are part of javascript
03:56 - um but but there are a bunch of things
03:57 - involved in typescript but what we'll do
03:58 - is we'll have a deep dive one day on
04:00 - typescript
04:00 - and we can pretty much go through that
04:02 - but to answer your question priyanshu
04:04 - um so the future of sort of typescript
04:07 - and what is it about
04:08 - um wait where's uh they move everything
04:12 - also i just have like one other thing a
04:15 - lot of
04:15 - uh companies like fan companies use
04:19 - uh typescript so i mean i think there is
04:22 - a still
04:23 - a bright future for typescript there's a
04:26 - definitely a bright future for
04:27 - typescript 100
04:28 - the the thing i would say for
04:32 - uh production environments building in
04:34 - typescript is actually really powerful
04:36 - right it's really powerful because
04:39 - you're protecting your code base and the
04:40 - thing is when you introduce typescript
04:42 - you can either do it at the beginning so
04:44 - you can either build the project
04:46 - from ground up with typescript that way
04:48 - is that's kind of the
04:49 - but be careful by the way so whenever
04:51 - you use typescript there's also
04:53 - a type of um a variable called any
04:56 - right so you get string number and you
04:58 - can also have any now any stands for
05:01 - it's kind of like you're kind of going
05:02 - back to javascript then because you're
05:04 - letting any
05:04 - type of variable like yeah you're
05:07 - letting any sort of um
05:09 - any value go into uh that that variable
05:12 - so it could be a number it could be a
05:13 - string
05:13 - so you you want to kind of stay away
05:15 - from that otherwise it kind of defeats
05:16 - the purpose so you want to kind of give
05:17 - everything set values but
05:19 - don't want to get too far into it but
05:21 - the main sort of takeaway from this
05:23 - is yes typescript is here to stay uh it
05:26 - has a place
05:27 - and it's very very powerful but the main
05:29 - thing is for example if i was to get a
05:30 - freelancing job right now would i code
05:31 - it in typescript
05:32 - no why because it adds quite a bit of
05:35 - time on to the build
05:37 - it complicates the build it adds
05:39 - maintainability to
05:40 - the build i wouldn't sort of scream
05:43 - against it
05:44 - but i wouldn't personally do it now um
05:47 - in the new build for a client if only
05:50 - unless they requested typescript
05:52 - or if it was for a team effort or
05:54 - something like that would i recommend it
05:56 - if i was to go into a team so i've
05:57 - actually gone into a team before
05:59 - and um and implemented typescript when
06:02 - they didn't have typescript so i
06:03 - actually went in
06:05 - and i said to them i think typescript
06:07 - would benefit
06:08 - the team because basically by
06:10 - introducing types you pretty much
06:11 - eradicate a ton of bugs because it no
06:14 - longer
06:15 - it sort of prevents you from it prevents
06:18 - um
06:19 - how do i make a gallery yeah it
06:20 - basically prevents you from having like
06:22 - you know uh
06:23 - unexpected variables being sort of used
06:25 - when they shouldn't be
06:26 - um but you can pretty much you can you
06:29 - can introduce typescript halfway through
06:31 - a project so imagine you've got a huge
06:32 - javascript project
06:34 - you can actually go ahead and slowly
06:36 - translate
06:37 - files to typescript you can also do that
06:40 - uh and that's it
06:42 - with uh es with uh react
06:45 - yeah so remember javascript is the
06:47 - language the react is just the library
06:49 - in javascript
06:50 - so think of it this way so you've got um
06:54 - um let me show my screen
06:58 - okay so imagine think of it this way
07:00 - right so you've got
07:02 - you've got so many keyboard shortcuts so
07:05 - you've got uh javascript
07:06 - right this is like the brains of web
07:08 - development we all know this
07:10 - we all love this right and then you
07:12 - basically have
07:13 - um so then you have react and react all
07:17 - reactors is a library
07:19 - that uses javascript right now
07:22 - typescript
07:22 - is basically like they call it a
07:24 - superset which means it's basically just
07:26 - an
07:26 - upgrade of it basically adds on stuff to
07:29 - javascript right absolutely
07:31 - all the types of code all the javascript
07:32 - code is actually valid right like just
07:34 - like
07:34 - json is valid to javascript it's like
07:37 - javascript so i didn't type script
07:39 - yeah so to remember every single thing
07:42 - that is in typescript it remember
07:44 - it has javascript inside of it so it
07:46 - says it's javascript with extra stuff
07:49 - that's all the way that's all you need
07:50 - to think which means if you write code
07:53 - in this
07:53 - in typescript you have to do something
07:56 - called a transpile step transformation
07:58 - transpilation or step right
08:01 - now do you need to know exactly what
08:03 - this means no it basically just means
08:05 - that
08:05 - there's a step involved which converts
08:08 - this code
08:09 - to typescript to javascript sorry
08:11 - because this doesn't run in the browser
08:13 - this is code that we write and then
08:15 - there's a step which basically converts
08:17 - all of this stuff
08:18 - to this stuff but we don't see that step
08:20 - is in you just kind of implement it or
08:22 - you use like a template or something
08:23 - like that
08:24 - but we're not going to get into that
08:25 - right now but the main point is this
08:27 - browsers run javascript
08:29 - we code in typescript and then this this
08:31 - special magic
08:32 - makes this code work in a browser okay
08:35 - so that's how it works yeah so that's
08:37 - how it works um
08:39 - but let's go ahead and oh my god
08:42 - thank you my question was um
08:46 - sonny my question was we we've got react
08:49 - node.js and javascript okay now node.js
08:53 - i'm not sure where it fits into the
08:55 - equation
08:57 - i thought it's a front-end stuff that my
08:59 - mind is saying is back-end
09:00 - because i thought it renders javascript
09:04 - but where does it actually fit in and
09:05 - i'm i'm listening and i'm seeing that
09:08 - people are
09:09 - studying node.js i thought it just
09:12 - something sitting there waiting to
09:14 - receive
09:15 - uh javascript commands am i right uh so
09:18 - the way it works
09:19 - is you're close you're very close and it
09:21 - is a confusing thing
09:22 - i think it's you're not the only one
09:24 - who's going to be confused about this so
09:25 - um
09:26 - pretty much uh yeah this will be up to
09:28 - help you out um
09:29 - i hope a few people so again share my
09:32 - screen boom let's go back to the drawing
09:33 - board
09:34 - so imagine you've got um
09:37 - the question was node.js what is it
09:39 - right so in encoding you've got front
09:41 - end
09:41 - and you've got oh god's sake god damn it
09:44 - you've got front end
09:46 - up front end and you've got back end
09:49 - right
09:50 - um uh back end now in an app what does
09:53 - this look like front end is basically
09:55 - where the phone is
09:56 - so this is where like the phone the
09:57 - desktop whatever it is this is where the
09:59 - client goes
10:00 - and sort of like plays around with the
10:01 - app so it's got some kind of header
10:03 - it's got some buttons on the screen it's
10:05 - got for uh you know this is your web
10:06 - page
10:07 - right so this is the web page so
10:10 - web page uh so this is your front end so
10:13 - the the the
10:14 - the person's gonna play around with your
10:15 - front end now that sounds bad
10:18 - um and then you've got the back end
10:20 - right
10:23 - i just realized
10:27 - and we're on youtube so yeah
10:30 - um then you've got the back end which
10:32 - i'm not going to say that
10:39 - and it's just something else right okay
10:42 - okay
10:44 - and then you've got the back end so here
10:46 - you've got this will be like the server
10:48 - right
10:48 - now on the front end you've got uh the
10:51 - so
10:51 - everything runs javascript okay so when
10:54 - we're talking about
10:55 - no okay so so javascript runs on the
10:58 - front end and it also runs on the back
11:00 - end
11:00 - right you can use python and stuff like
11:03 - that on the back end but we're going to
11:04 - assume that we're using javascript
11:05 - across the entire
11:06 - interface right so on the front end you
11:08 - would have react
11:10 - so here you would have react okay you'd
11:12 - have react and then that would render
11:13 - out this beautiful
11:14 - front end that we would basically go
11:16 - ahead and build now on the back end
11:18 - you don't have react react is a
11:20 - front-end library that uses javascript
11:22 - on the back end we have a runtime
11:24 - environment called node.js
11:26 - and all that this does is it basically
11:28 - node.js is basically like
11:29 - imagine it's like an environment that
11:31 - basically just runs on this server so
11:33 - it's like it's an environment that just
11:35 - runs here and it lets you
11:37 - execute javascript right so all you need
11:40 - to know
11:40 - is that whenever you see react it's
11:42 - always front-end whenever you see
11:43 - node.js
11:44 - always back-end right so about why
11:48 - people learn why do people learn node.js
11:50 - do they
11:51 - they say they are learning node.js is it
11:53 - just for
11:55 - cli like command line or has node.js got
11:59 - a language that you've got with it uh so
12:01 - remember node.js is javascript
12:03 - so when if you learn some javascript on
12:05 - the front end you're going to be able to
12:06 - use it in the back end as well
12:08 - but what you need to remember is so
12:09 - let's say we had a web page right and
12:11 - let's go ahead and say like this had
12:12 - some kind of booking system so
12:14 - i went ahead and said like same say this
12:16 - was airbnb so i go ahead and i input
12:17 - some
12:18 - i want to stay in london for three
12:19 - nights and then i click book
12:21 - right so i'm gonna go ahead and click
12:22 - book over here now
12:24 - when i click book it makes some kind of
12:27 - request to some kind of server
12:30 - right and on this server we could have
12:31 - like mongodb
12:33 - run it like we can have some kind of
12:35 - database we could have firebase at the
12:36 - back
12:37 - we could have a few things at the back
12:38 - right and what we do
12:41 - is basically like when we book it it
12:42 - sends something called a request now
12:45 - this is where you might hear the term of
12:47 - api so you might hear like an api being
12:49 - used now an api all it means is
12:51 - how things communicate like from the
12:53 - front end to the back end
12:54 - right now the benefit of an api is that
12:58 - companies so imagine you want to
13:00 - basically talk to paypal
13:02 - you want paypal in your website then
13:04 - paypal provides you an api which
13:06 - means that you can talk to um the the
13:08 - paypal backend
13:10 - sure right and then they will basically
13:12 - allow they'll provide you instructions
13:14 - on how you send things over to their
13:15 - backend and then how it comes back to
13:17 - you
13:18 - right now we can also build the entire
13:20 - back end uh
13:21 - which is which is what we pretty much do
13:22 - in a lot of cases so i would recommend
13:24 - if you're kind of confused
13:26 - and it still doesn't make sense the two
13:28 - takeaways from this right
13:30 - react always front end right so whenever
13:32 - you hear this
13:33 - it's always front end right never get
13:36 - that too confusing that'll sort of
13:37 - simplify everything node.js
13:39 - is always backend and this this
13:42 - but sony when we are using node.js like
13:44 - it can be used for many different
13:46 - content stuff like we can
13:48 - like without node you cannot do react
13:49 - you cannot do electron
13:51 - no no see that that's where you that's
13:53 - where the confusion comes in that's
13:54 - incorrect
13:55 - the back end is node node.js is not
13:58 - a language node.js is something called a
14:00 - runtime environment which means that
14:02 - you would have a server like running in
14:04 - like aws or firebase or something like
14:06 - that or like a cloud function
14:08 - the environment would be node.js
14:11 - right now this is only running
14:14 - javascript so remember
14:16 - every underneath the hood imagine like
14:18 - these are just two different cars
14:19 - right so you've got like a car running
14:21 - react you've got a car running no
14:23 - i mean this is not it's not the same
14:24 - thing but i think of it that way right
14:26 - and under the hood
14:27 - is javascript every time right so
14:30 - whenever using react or node.js
14:31 - but remember uh in order to run
14:34 - any sort of like code on a backend
14:37 - server
14:37 - you need node.js running on that server
14:40 - right so you need nodejs or
14:42 - dino is now popular you can run dino on
14:45 - the backend server and then run your
14:46 - javascript on that um and but on the
14:49 - front end
14:49 - you don't so browsers by the browsers
14:52 - like have
14:53 - a support javascript out of the box they
14:55 - let you sort of run
14:56 - javascript on a browser which is why
14:59 - every single web page we use
15:00 - has javascript um and then we can use
15:04 - libraries such as react
15:05 - to go ahead and build these like really
15:06 - nice web pages yeah
15:09 - so javascript
15:13 - yes and the reason why is because you
15:14 - can do front-end development and
15:16 - back-end which is why we call it full
15:17 - stack
15:18 - because it's the entire stack yeah
15:21 - so adding adding to that analogy we also
15:24 - use
15:25 - v8 engine inside of node and react
15:29 - yeah so remember try not to get confused
15:32 - with the
15:32 - the engines just yet like all that stuff
15:35 - uh that's just like the sort of versions
15:37 - and stuff like that and
15:38 - and certain every time there's an
15:40 - upgrade for example i think it's in like
15:41 - version 8 and above you could start
15:43 - using optional training or something
15:44 - like that or
15:46 - there was a certain version where you
15:47 - had to be at to use like new features of
15:49 - of javascript but the point is is that
15:52 - that's like a separate thing but yes
15:54 - to answer your question um your that's
15:57 - where you basically would have
15:58 - you you would set the engine inside of
16:00 - package.json so you'd usually do that
16:02 - inside of
16:03 - package.json and that's where you'd set
16:05 - something called an engine but in this
16:07 - case guys if you if you don't know what
16:08 - i'm talking about don't even worry about
16:09 - that
16:10 - for now just know that about this stuff
16:12 - and this is what makes more
16:13 - this is what you need to focus on so we
16:15 - have front end we have back-end
16:17 - and node.js is like uh iis
16:20 - or like apache in the lamp stack is that
16:23 - correct
16:24 - um okay so yes
16:29 - because is also a web server apache is
16:31 - also web server and node.js is also like
16:33 - uh
16:34 - acts
16:45 - so this is just running your javascript
16:47 - phone from the server
17:03 - the same way the server is also an
17:05 - operating system
17:07 - so like and on that server like linux
17:10 - you install
17:10 - apache or the nginx which will run your
17:13 - services you can run php also on that
17:15 - one then yeah
17:19 - and honestly i wouldn't get too involved
17:21 - with
17:22 - um with um uh
17:26 - like apache and that stuff because that
17:28 - goes into devops territory
17:29 - which is something you can move into in
17:31 - in time and kind of get involved with
17:33 - now top tip for you guys for everyone
17:35 - watching even on youtube
17:37 - um if if you do want to sort of branch
17:40 - out and sort of you want to up your
17:42 - income
17:43 - devops is is an area where there's a lot
17:45 - of money like is
17:46 - that's just something which i'll say so
17:48 - i actually sort of like took on a
17:49 - responsibility in my first job of just
17:52 - one of the developers touched all the
17:53 - devops stuff so i pretty much just
17:55 - shadowed him so i pretty much sat next
17:56 - to him i was like dude just show me what
17:57 - you do
17:58 - and uh i picked up on a lot of devops
18:00 - stuff and
18:01 - the pay is really high for devops work
18:04 - and it's also it's pretty cool stuff
18:05 - what you can do at devops now devops is
18:07 - just kind of like i'm not going to get
18:08 - into devops today
18:09 - but you can go ahead and check it out
18:10 - but devops is sort of
18:12 - more of the the the pipeline of when you
18:16 - push
18:16 - code what happens how is it sort of like
18:19 - pushed in how do how do you sort of like
18:21 - scale deploy
18:22 - that sort of stuff is always your
18:23 - deployment yeah it's all that sort of
18:25 - continuous integration mainly yeah so
18:28 - continuous integration
18:29 - things like that yeah yes and cd yep ci
18:32 - cd pipelines
18:33 - i have one question yeah like i
18:37 - i work in asp.net as a full stack so
18:40 - there the build time of our application
18:43 - is quite high
18:44 - okay so how can we compare that build
18:47 - time because it
18:48 - every time it when we build something so
18:51 - it takes a toll on the developer like
18:53 - you have to wait for this much time
18:55 - every time you build so in a large
18:58 - uh um like an organizational level
19:00 - project
19:01 - so what is the if it's a big project
19:04 - suppose say one gig
19:05 - or higher so what is the build time or
19:08 - what can be approximately
19:10 - the build time is it fast or is it slow
19:13 - according to your experience so that's a
19:16 - very
19:17 - broad question because uh if we build an
19:20 - app right now the build time's going to
19:21 - be
19:22 - super quick there's not much to compile
19:24 - there's not much to add in right
19:25 - if you have loads of pro like you can
19:28 - have something called husky which is
19:30 - where before you push your code it runs
19:32 - a bunch of checks and it runs a bunch of
19:34 - like
19:34 - they're called um pre-commitments
19:38 - so you can do test scenarios and things
19:39 - like that but you can have a bunch of
19:41 - stuff like that
19:42 - involved and and you can have loads of
19:43 - different things like which happen
19:45 - um when you basically go ahead and and
19:49 - commit
19:49 - and stuff like that um and you can also
19:52 - have
19:53 - a bunch of a bunch of other stuff happen
19:55 - when you push some code so
19:56 - but the thing is is that look when you
19:58 - have a build step it depends on on sort
20:00 - of like
20:01 - if your code is getting so let's say all
20:02 - your code was written in typescript
20:04 - then um it would pretty much it would
20:07 - pretty much be a case of uh
20:09 - uh it would take longer because it has
20:11 - to transpile all of the code
20:13 - so you see what i mean it depends it
20:14 - really depends on what what is in your
20:16 - build
20:17 - right really depends on that sort of
20:18 - stuff um
20:20 - but with that said that's a really good
20:22 - question actually um
20:24 - and also um i see comments coming
20:27 - through on on
20:28 - on youtube as well so we i can see you
20:30 - guys on there
20:31 - but this is mainly focused towards the
20:33 - people's attention so ask a quick
20:34 - question about reaction
20:35 - go for it yeah um so basically i so i
20:39 - started learning javascript
20:40 - and then i think i discovered reacts a
20:43 - little bit too early and i dived into
20:45 - reacts
20:46 - and i just loved react and react is
20:48 - amazing yeah
20:49 - um and one of the main reasons i joined
20:51 - the the bwj was because
20:53 - i was lacking a lot of the javascripts
20:56 - um building
20:57 - websites in javascript yep but my
20:59 - question is should i
21:01 - keep specializing in react yup
21:04 - and not focus like so so much in
21:07 - building websites
21:08 - with pure javascript because i feel like
21:10 - it's a lot easier to build
21:12 - a website to react than it is with
21:14 - javascript
21:15 - um so i was wondering is it is it good
21:18 - to specialize
21:19 - mainly in reacts and follow reacts like
21:21 - properly
21:22 - yeah so really good question i think
21:25 - that's going to help a lot of people
21:26 - but the question is pretty much should
21:28 - he stay on like web pure web devs or
21:30 - html css javascript or
21:32 - specialize in react right now what i
21:35 - would say is
21:36 - i okay so to answer your question in an
21:38 - example
21:39 - i never write websites anymore in pure
21:42 - html css javascript
21:44 - ever nice ever ever ever right i i
21:47 - always use
21:47 - react yeah because yeah it's just so
21:50 - much easier i literally do npm
21:52 - uh create react app npx create react app
21:54 - and boom i'm up and running
21:56 - and even today i'm going to show you
21:57 - guys the template for redux
21:59 - and pretty much you can go ahead and it
22:00 - just goes ahead and um
22:02 - sets everything up for you right now
22:04 - remember
22:05 - there's a few things that you need to
22:06 - consider when you're doing any of this
22:07 - stuff so why did react
22:09 - get popular it's because it
22:12 - it's so quick and easy to get up and
22:15 - running
22:16 - it's pretty much plug and play and it's
22:18 - very lightweight
22:20 - so so if you need react-room you can
22:21 - plug it in if you don't need it you
22:23 - don't need it it's going to make your
22:24 - website quicker without it right as in
22:26 - it's not going to slow it down much with
22:27 - it but the point is that you only have
22:29 - what you need
22:30 - whereas with angular and things like
22:31 - that it's very heavy you have to have
22:33 - pretty much taken everything and then
22:34 - kind of go with it that way
22:36 - so my advice would be
22:39 - specialize in react and the payoff would
22:42 - be
22:43 - a lot greater than sort of trying to
22:45 - branch out and this is also asking
22:47 - answering a question of
22:48 - which framework slash library should i
22:50 - learn like
22:51 - should i learn view or shall i angular
22:53 - and react maybe i should learn both and
22:55 - no i would say specialized because if
22:58 - you if you can provide a tremendous
23:00 - amount of skill
23:01 - in one thing then you're going to
23:03 - basically be worth
23:04 - a lot more right so so so remember like
23:08 - and the one thing
23:09 - which is which is really good for you
23:11 - guys right now is that
23:12 - you you're actually a very lucky point
23:15 - where
23:15 - react is so you can be super specialized
23:19 - in react
23:20 - and it's worth a huge amount and it's
23:22 - pretty much
23:23 - it is here to stay like i'm telling you
23:24 - it's going to be here for quite a while
23:26 - like react
23:27 - and then the benefit and the beauty is
23:29 - is that because it's full stack
23:30 - the skills you're going to require when
23:32 - you do react
23:34 - are going to be very much cross you can
23:36 - pretty much go ahead and like
23:37 - if i need to code in python now i can
23:40 - pretty much go ahead and pick it up
23:41 - really quick
23:42 - like i really don't need to kind of like
23:44 - go back and kind of
23:45 - expand ages i kind of because because
23:47 - you know the programming principles and
23:49 - you've practiced it you've done full
23:50 - stack development
23:51 - so you've done front end back end it
23:54 - does really after that point it doesn't
23:55 - matter
23:56 - really what's being used the things
23:58 - which might differ
23:59 - react is going to stay for a very long
24:01 - time on the front end
24:02 - um you're going to have iterations like
24:05 - server-side rendering things like that
24:07 - which are definitely worth investing in
24:10 - i'd say so
24:10 - to answer your point as well
24:12 - specializing in react is one thing but
24:14 - sort of taking it to the next level
24:15 - learning about server-side rendering and
24:17 - react
24:18 - things like that like next js pre-act
24:21 - they're gonna be quite beneficial
24:22 - because you can go ahead and say to a
24:24 - company
24:25 - rather than your website taking like uh
24:28 - a few like 500 milliseconds now it will
24:31 - take 200 milliseconds now that might not
24:32 - sound like a big deal
24:34 - but when you've got millions of
24:35 - customers or something like that okay it
24:37 - literally makes it like it is ridiculous
24:40 - how much money
24:41 - that that translates to for a company
24:43 - which means
24:44 - imagine you can basically go ahead and
24:46 - say okay i'm going to make your website
24:48 - load this much quicker
24:50 - right now you can ask for whatever you
24:52 - really want you can ask
24:53 - it really doesn't matter about the money
24:55 - if you said i want 30 grand extra
24:57 - they're going to be like well you're
24:58 - going to save us this much and trust me
25:00 - when i say they're making a lot more
25:01 - than 30 grand
25:02 - from the trade-off right in a lot of
25:04 - these cases so uh i'd say specialized
25:06 - yeah that was a really good question
25:08 - dude that makes that makes me really
25:09 - happy because i'm i
25:10 - i think for me at least react is so much
25:12 - easier to build websites like yeah
25:14 - so much easier i mean even with css
25:16 - handling and things like that it's going
25:17 - to be uh
25:18 - yeah 100 like uh it's just something
25:20 - that's another thing
25:21 - we want to add a point to sunny's point
25:24 - hey hi
25:25 - hey dude how's it going so i actually
25:28 - wanted to add a point to what just sunny
25:30 - said yeah
25:31 - he said like react is so powerful
25:33 - actually what happened was a company was
25:35 - asking for
25:36 - uh angular weather like for an angry
25:38 - developer i said i'm
25:40 - like specialized in react and they still
25:42 - wanted me to go further with their
25:44 - interviews they were like
25:45 - dude can you just make uh this happen
25:46 - with react and they took it seriously
25:48 - and they were even
25:49 - ready to pay me more for uh reacting one
25:52 - of the interviews actually
25:53 - oh man so so the original job wasn't
25:56 - even for react
25:57 - no no the position was for an angular
26:00 - developer
26:00 - nice and i applied i told man i can't do
26:03 - this i can't do in react it's like
26:05 - i can't switch from react to angular
26:07 - that's not the
26:08 - way so they were like um okay
26:11 - interesting so can you make it
26:12 - they challenged me actually can i make
26:14 - it in so i have an
26:16 - interview around for tomorrow maybe it's
26:18 - the second last round
26:19 - awesome and it's around so i have a
26:22 - pretty
26:22 - big challenge in front of me dude well
26:24 - we've been like good luck one
26:26 - and two i think that's awesome like and
26:28 - that's not that's not the first time
26:30 - that's not the first time i've heard
26:31 - that as well that's
26:32 - that's yeah honestly like let's see
26:34 - you've got the whole community behind
26:36 - you dude
26:36 - um and and i would say that's not the
26:38 - first time i've heard that as well
26:40 - that's really a common thing as well
26:41 - like i've
26:42 - had so many people who that our
26:45 - companies are
26:46 - offering an angular position and what
26:49 - tends to happen is that you say like oh
26:50 - yeah i know react and then they're like
26:52 - oh actually
26:53 - um yeah you know like go ahead and do it
26:54 - with react because we kind of like react
26:56 - we just never we didn't make the jump
26:58 - yet
26:58 - so uh a lot of places are like that um
27:01 - i think that helped a lot of people out
27:03 - so thank you for that um
27:05 - somebody i just want to add one one
27:08 - question
27:08 - from so this is from somebody on youtube
27:10 - and i think it's actually a really good
27:11 - question
27:12 - it says um for enterprise application
27:15 - development
27:15 - angular is better had this question in
27:18 - the interview so
27:19 - i disagree i disagree because okay split
27:21 - it this way um
27:22 - just think about what's in practice as
27:24 - in companies that are using this stuff
27:26 - um and you guys might not be able to see
27:28 - this right now but it's pretty much i
27:29 - just highlighted a little question um
27:31 - but is it all they're saying is angular
27:32 - is better for bigger companies
27:34 - and the point is um so i actually worked
27:37 - inside of tesco now if you guys don't
27:38 - know what tesco is
27:39 - tesco is like the walmart in america so
27:42 - if you do you guys know what walmart is
27:43 - right like that
27:45 - right yeah exactly so like it's
27:47 - basically like walmart it's a huge
27:49 - shopping complex pretty much right
27:51 - around the world yeah exactly right
27:53 - around the world as well right
27:54 - now exactly so
27:57 - thailand even the thailand website one
27:59 - of my good friends
28:00 - i actually brought him on a coaching
28:02 - call early on uh he was working on the
28:04 - thailand
28:04 - integration in tesco so i'm good friends
28:07 - with that guy who done that stuff for
28:09 - tesco so it's pretty cool right like and
28:11 - and
28:12 - all of tesco uh the entire tesco website
28:14 - is react
28:16 - right so every single thing is react so
28:19 - to answer that question um no it doesn't
28:22 - matter about
28:23 - size sunny uh yes powerful yeah yeah so
28:26 - related to the pedro's
28:27 - question about direct jazz so actually
28:30 - other cases
28:31 - in production where you prefer using
28:35 - uh just paper js css and html
28:39 - uh compared to react or just there are
28:42 - no such cases since
28:44 - uh for production i mean not for
28:45 - learning projects yeah but
28:47 - especially for production maybe for us
28:49 - even small website for a small content
28:51 - website yeah
28:53 - where it doesn't have any connection
28:54 - with uh ipi and javascript
28:57 - yeah i would say uh
29:00 - honestly no i mean like what i would say
29:02 - is
29:03 - to answer your question in a more in a
29:05 - more focused way
29:07 - no to there's not a need for doing it in
29:10 - pure html css javascript
29:12 - but there is a need in some cases to do
29:15 - very sort of uh granular javascript
29:20 - tasks
29:20 - so so your understanding of pure
29:22 - javascript sometimes is needed
29:25 - so it's a pure javascript meaning like
29:27 - dom manipulation so like as in
29:29 - how to find elements on a web page
29:30 - things like that sometimes you need to
29:32 - get a bit hacky
29:33 - with javascript right it says so you
29:35 - kind of so it's kind of a balance of
29:36 - knowing
29:37 - enough but they're not getting too
29:39 - bogged into sort of like
29:41 - um as in the point is that everything
29:44 - can be built with react but your
29:45 - understanding of javascript you should
29:47 - sort of dial it into a point where
29:49 - you're comfortable manipulating the dom
29:51 - you're comfortable manipulating things
29:52 - like that and
29:53 - right it's still based in javascript so
29:55 - yeah yeah
29:56 - exactly like it's going to be kind of um
29:59 - but yeah
30:00 - you never i never ever find myself in
30:01 - situations where i'm like you know i
30:03 - should do this in pure html css
30:04 - javascript
30:05 - if i see if i see somebody's built a
30:07 - website in that
30:08 - i either a run the other way or b
30:11 - i pretty much would propose that we
30:13 - rebuild in in in something that react
30:15 - but i wouldn't
30:16 - really take on anyone who who who's
30:18 - doing that approach yeah
30:22 - react is that you can integrate vanilla
30:25 - js
30:25 - and html all into one file
30:28 - yeah yeah yeah so you see jsx exactly
30:32 - jsx is super valuable
30:34 - even if even if i for instance
30:37 - if i have a lot of uh content on the
30:39 - website uh
30:41 - let's say i have like a lot of pages
30:43 - there for my website with the content
30:45 - so uh in that case i'm gonna use
30:48 - react.js but
30:49 - uh anyway it contains a lot of html
30:53 - pages uh in the
30:54 - in the directory right anyway yeah so
30:57 - remember
30:58 - have you have you done uh have you done
31:00 - any other clones yet
31:02 - out of curiosity not really not
31:05 - practically enough okay so one thing i
31:06 - would say is
31:07 - it would really benefit you to to to go
31:10 - through the clones at some point
31:11 - because you'll see how it will answer
31:13 - your question on on having several pages
31:16 - because everything in react is component
31:18 - based which means even every single web
31:20 - page
31:20 - that you kind of would be looking at say
31:22 - you have the the home page the contact
31:23 - me page
31:24 - the my account page would pretty much be
31:26 - a component inside of react
31:28 - and then you use react router to render
31:30 - the separate pages and then they do
31:32 - very clever things like lazy loading
31:34 - like things like that so
31:35 - it only loads what it needs to load
31:39 - until the point at which you need that
31:41 - page and then it will go ahead click it
31:42 - and it's super fast
31:44 - like um but but i would recommend
31:46 - looking into react router
31:48 - because that's going to show you how to
31:49 - have several pages on the website and i
31:51 - would also
31:52 - recommend um oh okay yes and nars
31:55 - actually said we need to enable pasco
31:57 - okay yeah so you guys are right uh we'll
31:59 - fix that
32:00 - in the next call um but also um
32:03 - i would recommend the clones are really
32:05 - going to help you sort of uh answer that
32:06 - question
32:08 - yeah cause that's that's a good point
32:09 - does does it make a difference because
32:11 - you know obviously you'd have like one
32:13 - html file for
32:14 - like the homepage and then an html for
32:16 - the contact page but in react you would
32:18 - have
32:19 - like a bunch of different components per
32:20 - page does that slow down like if i would
32:23 - have like
32:24 - imagine like 20 components in the main
32:26 - page and then in the second page we have
32:28 - another 20 components would that slow
32:30 - down
32:31 - or or is it still is still really fast
32:35 - um so no no it would be really fast
32:39 - uh i want to say facebook has
32:42 - almost 37 components that's true that's
32:45 - a good point
32:45 - yeah so that's a really good yes i think
32:47 - literally the examples are really good
32:49 - at sort of demonstrating it but
32:50 - um no so everything is react is very
32:54 - clever
32:54 - at staying optimal it's very very tight
32:57 - because he only renders
32:58 - he only renders what he needs to render
33:00 - each time yeah that's that's a good
33:01 - point yeah
33:02 - yeah it only runs that's why they use
33:04 - microservice architecture
33:06 - dedicated to a particular purpose or
33:08 - particular service
33:09 - yeah and that's how facebook keeps it
33:11 - it's super neat and clean
33:13 - exactly and they also uh have
33:16 - uh interestingly enough they actually
33:17 - have so micro service architecture
33:20 - something which i recommend everyone go
33:21 - ahead and read up on it's
33:22 - quite a valuable thing to know about but
33:24 - they also actually have um
33:26 - front end micro services now which is
33:29 - even
33:30 - which is quite crazy enough like uh
33:32 - where pretty much they
33:33 - they can scale up scale down on the
33:35 - front end
33:36 - components and then you have component
33:38 - libraries it gets really
33:40 - it gets really kind you can optimize
33:42 - everything put it that way
33:43 - um but for for you guys when you're
33:46 - learning react the only one thing i
33:48 - would say at this point that you should
33:49 - worry about optimizing
33:51 - is use of um a keys
33:54 - so you know whenever you have like a a
33:56 - list or an array
33:58 - make sure you're using the correct keys
34:00 - now a key
34:01 - a good key is not the same key for
34:02 - everything right
34:04 - a key the whole purpose of a key is to
34:05 - be unique right
34:07 - so to be unique now if you don't know
34:09 - what i'm talking about just
34:10 - pretty much we'll get into all that
34:11 - stuff that was the question i asked a
34:13 - couple weeks ago yeah yeah exactly i
34:15 - remember it came up in the core yeah
34:16 - yeah um
34:24 - and then we'll jump into the bone all
34:26 - right yeah i was wondering for two days
34:29 - yeah like uh what are the things i need
34:31 - to learn to means like
34:32 - be a front job ready front end developer
34:36 - so job ready front end developer all
34:38 - right um
34:39 - okay so it's it's a pretty big question
34:43 - but i would pretty much just go ahead
34:45 - and just do a quick whiteboard session
34:46 - on it so yeah
34:48 - so things you're gonna need things you
34:50 - need as
34:51 - front end oops front end
34:55 - dev all right now what i would say is we
34:58 - actually create a whole youtube video on
34:59 - this me and kazi
35:01 - um go ahead and check that out yeah yeah
35:04 - i went through all those things like
35:05 - because but i was like wondering about
35:08 - like uh
35:09 - i need to learn all those things yeah if
35:11 - you could like
35:12 - write down the list yeah okay yeah
35:16 - so remember like try not to get it so so
35:18 - always
35:19 - keep an open mind because even what i
35:21 - write on this list could be outdated
35:22 - tomorrow
35:23 - right as in it gets very it's very
35:25 - quickly moving so i'll show you some
35:27 - tactics to stay ahead of the curve
35:28 - but html this is your fundamentals this
35:31 - stuff has to know
35:32 - you need to know this stuff right and
35:34 - i'm not saying you need to know it to a
35:35 - point where you're a master because
35:36 - even never consider yourself a master i
35:39 - still don't
35:40 - would i still don't call myself an
35:41 - expert ever in in react
35:43 - i literally always keep like a beginner
35:45 - mindset of like no i can learn more
35:48 - like as an or never have like oh i know
35:50 - this stuff you know i know
35:51 - i know javascript like you always want
35:53 - to keep sort of an open mind to that
35:54 - stuff so
35:55 - uh hate this is going to be your
35:56 - fundamentals now inside the course
35:58 - we we cover a lot of this fundamental
36:01 - stuff inside of like modules one
36:03 - two three upwards right so you can
36:04 - pretty much go ahead and use that to
36:06 - to strengthen this uh i would recommend
36:08 - using things like flexbox foggy to go
36:10 - ahead and work on like
36:12 - your your flexbox skills because that's
36:13 - super useful
36:15 - um css grid is another one which will
36:18 - bring i think we should do a whole
36:19 - coaching session on css grid because
36:21 - it's kind of
36:22 - an intricate thing but it's really
36:23 - powerful even i always kind of forget
36:26 - how to use it and then i have to
36:27 - do it like a little refresher course
36:28 - before i use it i wanted to ask like
36:30 - uh should i just go with the flex work
36:32 - for now and after learning a few things
36:34 - a few more things
36:35 - then i go for css grid or yeah like
36:37 - after learning
36:38 - yeah yeah go with flexbox uh
36:41 - all my clones that i that i use uh are
36:44 - flexbox
36:45 - and and they look beautiful so
36:46 - everything's pretty much in that so
36:48 - the next thing is so once you get to a
36:50 - pretty comfortable point with this
36:52 - right with hdmi css javascript literally
36:54 - now people there's always a popular
36:56 - question and everyone sort of asked me
36:57 - like
36:58 - um so so something like when should i
37:00 - when do i know when i'm ready for react
37:02 - or maybe i jumped in to react too quick
37:05 - honestly like if you can get a web page
37:07 - up right so you literally imagine you
37:08 - you built out a web page
37:10 - and then you you were able to get um you
37:13 - you got some text on the top you pretty
37:15 - much had like a button
37:16 - um and then when i clicked this button
37:18 - uh i got like some output so it was like
37:20 - oh my god you clicked the button like
37:22 - wow it clicked right now to get that
37:25 - working
37:26 - it's going to use a javascript now i
37:27 - literally tell people they're like no
37:29 - sunny like that that can't be enough i'm
37:31 - not joking when i say like if you
37:33 - like once you literally get some css
37:35 - working on this page make it look a bit
37:36 - neat
37:37 - you have a button it outputs some stuff
37:40 - you pretty much connected html css and
37:42 - javascript together
37:43 - right i would say don't waste any more
37:45 - time just kind of like jump into react
37:47 - because you're still going to be
37:48 - learning this stuff
37:50 - but like why delay it like why kind of
37:52 - go the old school route and relearn
37:54 - everything and do it
37:55 - just just start using react and my best
37:57 - advice would be do it with the clones
37:59 - and pick up on pattern recognition
38:01 - pattern recognition meaning
38:03 - um you're going to start to see trends
38:05 - you're going to start to see like
38:06 - patterns
38:07 - with what we do in every build it's
38:08 - going to help you sort of advance
38:10 - so react is going to be very important
38:11 - there now react
38:13 - goes it breaks down into like a bunch of
38:15 - things so remember like i said it's a
38:16 - library
38:17 - so it's a very lightweight library react
38:20 - right
38:20 - um now uh it consists of a bunch of
38:25 - things inside of it so you've got like
38:27 - if i want page rooting right so if we
38:30 - need
38:30 - if we need like multiple pages in an app
38:33 - then i would go to react router right so
38:37 - react
38:38 - router if i need
38:41 - [Music]
38:43 - like if i need data management inside of
38:45 - an app
38:46 - right it says in so i need to like sort
38:48 - of handle the flow of data in an app
38:50 - i would recommend learning the react
38:52 - context api first
38:54 - right and then i would recommend
38:57 - learning
38:58 - redux right so this is like part one
39:03 - and then this is part two and now many
39:05 - people are like yeah but suddenly
39:06 - everyone uses redux in professional
39:08 - environments
39:09 - but all i'm gonna say is like trust me
39:11 - when i say you're gonna save a huge
39:13 - amount of headache and time
39:15 - learn this first understand how the
39:18 - pattern works
39:18 - with like the way you dispatch actions
39:21 - there's a reducer what the heck is a
39:22 - reducer
39:23 - all that sort of stuff like understand
39:25 - how it works because this is a really
39:27 - easy and quick to integrate
39:28 - again all of that stuff is in the clones
39:31 - and we have like 25 clones now
39:33 - so you literally have 25 pieces of
39:35 - content to go ahead and
39:37 - practice this stuff through and then i
39:40 - would say
39:41 - once you understand the pattern then
39:43 - move to redux and today we're going to
39:44 - be covering redux we're going to be
39:45 - going into a deep dive into redux
39:47 - and i'm going to show you a bunch of
39:48 - different things inside of redux and how
39:50 - we can go ahead and work because
39:52 - redux is something again like i said
39:54 - it's going to bring you the most value
39:56 - when it comes to actually applying to
39:57 - the job
39:58 - so what's most important in this point
40:00 - so i'm trying to not list too much
40:02 - because i want it to be actionable right
40:04 - so i would say at this point react is
40:06 - definitely going to be like this is
40:07 - where your monies are
40:09 - yeah so if you can pretty much get this
40:10 - down you're gonna be you can pretty much
40:12 - get on the way to making some money
40:13 - now um a part of a front-end developer
40:17 - is making things look beautiful
40:19 - right if you if you're a front-end
40:20 - developer and and stuff looks really
40:22 - ugly all the time chances are like
40:25 - your trust value kind of comes down
40:27 - people are like oh yeah
40:28 - do i really want him to build a an app
40:30 - that looks like
40:31 - it's meant to be facebook but it looks
40:33 - like an old-school 1990s
40:35 - like piece of crap like no you don't
40:37 - want that right
40:38 - so i would recommend really diving in
40:40 - getting your flexbox down
40:42 - right look into things like material ui
40:45 - so material um material ui
40:50 - material ui now this is
40:53 - what's up we also have chakra that's
40:56 - another ui library for react if anyone's
40:57 - interested you can check it out
40:59 - oh yeah so chakra there's a few that are
41:01 - out now remember
41:02 - these are the reason why i say these are
41:04 - good these are good for personal
41:06 - projects to make things look really
41:07 - beautiful to get things looking a nice
41:09 - kind of way but
41:10 - the point of using design libraries and
41:12 - stuff like that is because
41:14 - is that you're gonna start to see trends
41:17 - you're gonna start to see what's in
41:18 - fashion because literally just like
41:21 - you paint a house and you know like
41:23 - sometimes grey's in fashion and you get
41:25 - like houses where like
41:27 - uh everyone starts to paint their houses
41:29 - like inside interior gray and you're
41:30 - like okay
41:31 - well that's kind of a thing now like
41:33 - it's the same thing in web development
41:35 - right it's the exact same thing in web
41:36 - development like
41:37 - the the web kind of goes in and out of
41:39 - fashion and
41:40 - you basically need to keep up with that
41:42 - so i'm going to give you guys a little
41:44 - trick right now uh what you can do is
41:46 - you can go ahead and check out
41:48 - um this website so this is a really good
41:51 - website i actually teach a lot of
41:53 - my one-on-one students says so
41:55 - dribbble.com
41:56 - now dribble's amazing because like let's
41:58 - say you you want to build an app or
41:59 - you've got a freelance client who wants
42:01 - to go ahead and do some kind of like
42:03 - they come up to you and say hey sonny i
42:04 - want to build like a
42:06 - um a financial app right
42:10 - then i would literally come in here and
42:12 - look there's they've got some designs
42:14 - for a financial app
42:15 - right so now you've got some kind of
42:18 - inspiration now did i pay for any of
42:19 - this nope i just pretty much came on
42:21 - this website it's free
42:22 - but notice the design so let's look at
42:24 - this design for a sec right
42:26 - very flat very flat you don't see 3d
42:29 - buttons you don't see like
42:30 - 3d things everything's kind of like
42:32 - crisp and flat
42:34 - right the colors are sort of like
42:36 - matching and things like that now
42:37 - let's go ahead and look at an app like
42:40 - let's go ahead and go over
42:42 - to here right so you've got like a
42:44 - gadget store out
42:45 - now what do we notice here oh again
42:47 - everything's flat
42:49 - right yeah it's following this flat
42:51 - there's not an overload of colors
42:53 - there's like a powerful use of white and
42:54 - then they sort of splash colors in
42:56 - at different points and you can start to
42:59 - tell but and the reason why this is so
43:00 - powerful is because this is the current
43:03 - trend so the current trend the current
43:05 - in
43:05 - right now is modern flat design
43:09 - yeah so flat ui so i and this this is
43:12 - something which we always see when
43:13 - people
43:14 - tend to build their um uh when they tend
43:17 - to build their sort of like portfolios
43:19 - and stuff is i see like 3d buttons and
43:21 - when they hover over it the button kind
43:22 - of pops out a little bit
43:24 - and as much as we love that uh it's sort
43:27 - of
43:27 - against what's in fashion right now
43:29 - right so it's kind of like
43:31 - instead what's in fashion right now is
43:32 - if you go to like let's go ahead and
43:34 - quick
43:34 - quickly have a chicken check out
43:35 - material ui let's go ahead and do button
43:37 - and you guys will see like look at when
43:40 - i click this button
43:41 - you're gonna see like a ripple effect
43:43 - yeah so this is like google's sort of ui
43:45 - library
43:46 - and you see this is like this sort of in
43:48 - it's a very sort of nice beautiful sort
43:49 - of like very simple
43:51 - but elegant design right so all this
43:54 - stuff
43:55 - is if you just want to be a front-end
43:56 - developer it's crucial in understanding
43:58 - this stuff
43:59 - now going back to what we were doing so
44:02 - again
44:02 - master get really dialed in on this
44:05 - stuff and react
44:06 - right don't over complicate it because i
44:09 - saw like even previously when when you
44:11 - first asked a question there was like a
44:12 - huge list of things right
44:14 - remember just like pedro said the goal
44:17 - is not to be like a master of every
44:19 - single thing
44:21 - is to to really harness your skill set
44:24 - and and and build your skill in in in
44:26 - our case react
44:27 - right and use things as you need it
44:30 - because i'm
44:31 - like if i was to say to you hey um
44:34 - it's kind of cool to go ahead and check
44:35 - out a vr react library
44:37 - you'll be like oh that's sick like yeah
44:39 - but i mean that's going to come in handy
44:40 - one day
44:41 - but i can guarantee pretty much hardly
44:43 - any client is going to come to you and
44:44 - say i want a vr library
44:46 - it's going to be very rare so you see
44:48 - like it's all about picking and choosing
44:49 - what you're going to be using most
44:51 - in this case this is going to be pretty
44:52 - much the main things you should dial in
44:55 - on
44:55 - before progressing anywhere further
44:58 - hey sunny i have a good question is
45:00 - bootstrap used much anymore
45:03 - uh so yes it is used um bootstrap is
45:07 - they recently actually just got rid of
45:08 - jquery support inside of bootstrap so
45:10 - that's really interesting
45:12 - um so a lot of you guys might have heard
45:14 - of jquery in web development world
45:16 - jquery now is no longer supported in
45:18 - bootstrap 5
45:19 - which is telling you something it's
45:21 - basically jquery is slow
45:23 - javascript's involved you can pretty
45:24 - much do everything if you see
45:26 - code written in jquery just know
45:30 - that that's not a good thing right
45:32 - that's not a good thing now
45:33 - to see code written in jquery you can
45:35 - pretty much refactor everything
45:38 - to go ahead and and make it like es6
45:40 - javascript
45:41 - um and i always do that and i always
45:43 - sort of like have a go at somebody if
45:45 - they do it in in in jquery because it's
45:47 - not a good practice right to go ahead
45:49 - and do that
45:49 - so um i don't even look at what if it's
45:51 - jquery yeah i think when his days are
45:53 - gone
45:54 - yeah i actually to be honest it's true i
45:57 - really
45:57 - can can you bring up that screen that
45:59 - you had uh yeah sure dude
46:01 - uh not the dribble not the dribble this
46:04 - one
46:05 - no the tools yeah thanks yeah so go
46:07 - ahead screenshot this guys if you need
46:08 - to
46:09 - um yeah so so that's gonna be i have a
46:12 - question
46:13 - yeah like
46:16 - all the full stack
46:20 - positions are asking about
46:23 - docker is it possible to have a lecture
46:27 - about docker
46:28 - oh about docker yes
46:31 - right so so a full okay so this is
46:34 - something interesting as well so most
46:35 - full stack positions will say to you
46:37 - like oh yeah docker
46:38 - right they'll list that in the tools of
46:40 - things to use now truth be told
46:42 - yes i've used docker in the past um but
46:45 - do i know how to use docker off the top
46:46 - of my head nope
46:47 - like if you ask me like i said do you
46:49 - remember how to do i remember
46:50 - docker compose up and down uh beyond
46:53 - that like because i really don't
46:55 - remember i only
46:56 - i literally use it as and when i need it
46:59 - or if a company is using it i will use
47:00 - it uh i
47:02 - i don't think it's the skill you should
47:04 - be prioritizing your time towards
47:06 - it so it's in a sort of let's imagine
47:08 - you've got a month three months
47:10 - right and you've you've got dedicated
47:12 - time towards three months what are you
47:13 - going to learn in three months
47:14 - i wouldn't even have docker on my list
47:16 - um i would literally have react react
47:18 - react
47:19 - and i would literally just push all of
47:21 - my my time and everything into react
47:24 - into back end full stack development and
47:26 - things like that because
47:27 - that's going to bring you the most value
47:30 - towards a client towards a company
47:32 - towards anyone like out there who wants
47:34 - to hire you
47:35 - whereas if you said hey i'm really good
47:36 - at docker trust me like
47:38 - the chances are they've already set the
47:39 - docker stuff up
47:41 - right you literally just have to go in
47:43 - and just run a command and it'll just
47:44 - pull everything up
47:45 - um but uh i definitely am i'm happy to
47:48 - do it but
47:49 - again i'm always sort of like trying to
47:52 - like resolve the sessions around what's
47:54 - going to bring everyone the most value
47:55 - and in this case
47:56 - things like redux i think which every
47:58 - single person on this call will benefit
48:00 - from redux
48:02 - um so it's always trying to figure out
48:03 - that balance of you know
48:05 - trying to get the most value happening
48:07 - but um and also
48:09 - uh oliver gomez on youtube dropped a
48:11 - good comment he said docker is not
48:12 - necessarily
48:13 - list for devops yeah it's more of a
48:15 - devops orientated
48:16 - uh tool as well so chances are you can
48:19 - have it
48:20 - yeah you're gonna have a devops guy and
48:22 - that devops guy is gonna pretty much
48:23 - have it right up and running now again
48:25 - if you know it it's gonna be valuable
48:27 - but i wouldn't put your time towards it
48:29 - uh at this point so sonny quick
48:33 - comment i don't know if it's a question
48:35 - you just mentioned like you know the
48:37 - full stack development
48:38 - you have to learn both sides of the coin
48:41 - right you need to be
48:43 - you need to know react first off and
48:44 - then you have the css component
48:47 - and so when you're is it
48:50 - will it be a fair statement to say that
48:52 - when you try to be a full stack
48:54 - developer
48:55 - you're trying to be a jack of all master
48:57 - of none
48:58 - and and sort of just know enough
49:02 - to kind of delve into it and get the job
49:04 - done
49:05 - or as you said you know how how far
49:08 - along
49:08 - do you should you be in css like you
49:10 - just said how to how to make the
49:12 - site look pretty that's not that's uh
49:15 - it's not possible for everyone right
49:18 - unless uh yeah i would i would say so
49:20 - again
49:21 - when i first started coding react this
49:23 - is full transparency so it makes
49:24 - it kind of gives you guys some reality
49:26 - towards it my css was crap
49:28 - they didn't look anything like the
49:30 - sights i'm building right now honestly i
49:32 - i kind of thought like i don't want to
49:34 - learn css like i
49:35 - really don't care but when i put time
49:37 - and effort into it
49:38 - it it really did kind of pay off in
49:41 - terms of value because
49:42 - if you show a beautiful website to
49:44 - someone that's going to
49:45 - grab them right they're going to be like
49:47 - oh this is nice you know like this is
49:49 - awesome but if you show them a website
49:51 - and you're like
49:51 - oh so this is doing this on the back end
49:53 - and it's functioning in this kind of way
49:54 - and it's really cool and
49:56 - it's kind of like you kind of lose them
49:57 - right like i said if but if it looks
49:59 - beautiful and then it does stuff
50:00 - then they're like okay i'm listening
50:02 - like i'm always all right
50:04 - now uh to answer joe's question um
50:07 - pretty much
50:08 - uh what he asked is like should should
50:10 - we learn like if we sort of put our
50:12 - attention towards being full stack
50:14 - developer are we going to sort of not
50:15 - specialize because we're going to try
50:17 - and be a jack of all trades
50:18 - now the beauty of javascript is this
50:22 - right i would say again this is why i
50:24 - love firebase firebase
50:26 - is really awesome because you can pretty
50:27 - much put your time and attention towards
50:29 - front-end development
50:31 - right and you can power it with firebase
50:33 - so you don't have to focus too much on
50:35 - back-end stuff
50:36 - right but what i would say is you'll
50:38 - reach a point
50:40 - where you naturally kind of need to do
50:44 - stuff for example
50:45 - processor payment so whoever done the um
50:48 - the amazon build so i'm not talking
50:50 - about the standard build but the five
50:52 - day
50:52 - challenge one if you guys did that then
50:55 - pretty much go ahead and
50:56 - you'll see that we we use cloud
50:58 - functions to run
51:00 - a backend express uh server so there's
51:03 - no js running in firebase cloud
51:05 - functions which is the back end
51:07 - and then we pretty much have everything
51:09 - everything running on that now
51:10 - my advice would be this start with react
51:13 - build websites
51:14 - make them look good make them be
51:15 - functional make them do everything
51:17 - learn things like redux that's what i
51:20 - did for my first job
51:22 - i was not even sort of like fully i had
51:24 - java background
51:25 - but i pretty much did a lot of um
51:28 - uh react uh i pretty much just kind of
51:31 - self-taught react
51:32 - to to a very sort of like kind of
51:34 - average level
51:36 - i'd say and then i went into a full
51:37 - stack position so i just got thrown in
51:39 - the deep end now
51:40 - this will answer your question because i
51:42 - knew react which is javascript
51:45 - i was able to break down the back end
51:47 - and pretty much understand node.js
51:49 - and i was able to go ahead and look at
51:51 - what they're doing and then you sort of
51:52 - everything becomes about like logical
51:55 - flows and things like that like
51:57 - uh what is happening when they send data
52:00 - here
52:01 - you just pretty much follow the code and
52:03 - you pretty much see okay so this is kind
52:05 - of happening i can read it because it's
52:06 - javascript
52:07 - i code in javascript because i do react
52:09 - you see all right
52:10 - so the beauty is if if you're coding in
52:13 - front and react stuff
52:14 - you're going to be better at node.js if
52:17 - you're cutting a node.js
52:18 - back back and stuff you're going to be
52:19 - better front-end so it's kind of like
52:20 - this is the beauty they said like it's a
52:22 - full-stack
52:23 - natural cycle so but my advice would be
52:26 - stick to front end first and then kind
52:27 - of move to back end
52:29 - gotcha yeah should i watch sunny's clone
52:32 - i am like i apply
52:34 - uh flex to each and every div that
52:36 - exists like even if i don't need to i
52:38 - just apply div
52:39 - then flex every day rosa
52:43 - i apply flex to each and every div that
52:45 - exists right now after watching upload
52:48 - yeah i would say it's a balance it's a
52:50 - balance between having
52:52 - less code which is which is clean and
52:55 - functional
52:56 - remember more code doesn't mean better
52:57 - code right like
52:59 - you want code which is like literally
53:00 - you could look at it now i read a book
53:03 - and it was like uh
53:04 - and it was like literally like a little
53:05 - snippet and it was it literally changed
53:08 - my entire
53:08 - sort of perception on this stuff because
53:11 - all the books said
53:12 - was all like oh whatever i read it was
53:14 - like a quote or something and it was
53:15 - pretty much like
53:16 - comments are and comments are bad
53:18 - and i was like
53:19 - that doesn't make sense but the point
53:21 - was that
53:22 - the reason why they said that is because
53:25 - your code
53:26 - itself should be so readable and
53:29 - functional
53:30 - that by looking at your code i should be
53:32 - able to figure out what's going on
53:33 - and and since that happened it's true
53:35 - like if i if i have to read a line of
53:37 - code
53:38 - which is a comment you see it's kind of
53:40 - adding to complexity
53:42 - like it adds an extra step for another
53:44 - developer to come in and look at it but
53:45 - if your code is
53:46 - off the bat named correctly the
53:47 - variables make sense
53:49 - it's not just like const a equals b it's
53:51 - like
53:52 - well what the heck is that like if it's
53:54 - like const name equals sunny
53:55 - it's very clearly a name and it's got
53:58 - the values on it like it's very clear
53:59 - right um so so that's my uh
54:03 - that's my take on sort of like making
54:04 - code that's what makes you a good
54:07 - developer as opposed to somebody who's
54:10 - very junior like is and that's where the
54:12 - sort of differentiation starts to come
54:13 - in as well
54:14 - um i saw a good question by oliver gomez
54:17 - and he said
54:18 - let me see if i can find it it's on
54:20 - youtube it was um
54:22 - i think i've lost it uh oh yeah what's
54:25 - your take on graphql did tesco use
54:26 - graphql
54:27 - yeah so tesco did use graphql um
54:30 - graphql is a query language for
54:33 - databases
54:34 - um we're not going to go into graphql
54:35 - now but yes to answer the question
54:37 - graphql is something which is quite a
54:39 - valuable skill to have
54:40 - um and i would definitely say if you've
54:43 - got spare time
54:44 - it's definitely not going to harm me to
54:45 - go ahead and learn graphql
54:49 - yep uh yeah do i need to it means like i
54:52 - don't know about this
54:53 - means like these things so as i'm just
54:55 - asking you just tell me if i need to
54:57 - learn
54:57 - like for my front-end uh development job
55:00 - uh do i need to learn like
55:01 - a rest api uh
55:04 - yeah because think of it this way you're
55:06 - gonna you're gonna build a
55:08 - like you're gonna build a front end you
55:10 - may not be doing front end stuff but
55:11 - you're gonna be talking to a back end
55:13 - right you're gonna be talking to a back
55:14 - end of some kind
55:16 - can you guys hear me yeah yeah
55:20 - he's frozen
55:24 - joe i'm going to make you co-host dude
55:26 - you're just a natural
55:27 - like yeah um yeah so so
55:30 - um to answer your question trophy uh so
55:35 - uh what was the question actually just a
55:38 - minute let me complete
55:39 - like there is like in on the list like i
55:41 - went through
55:42 - four and five videos all those videos
55:45 - that clever programmer had uploaded
55:47 - and from that i have made list like rest
55:49 - api
55:50 - graphql server side rendering and
55:52 - node.js
55:53 - no but you see dude what you've done is
55:55 - you just picked out the sort of hot
55:56 - like hot topics right now how many of
55:59 - the builds have you done how many clones
56:00 - have you done
56:01 - no i have just started out so i just
56:02 - want to like have an overview of all the
56:05 - things so that i could just
56:06 - complete the clones first yeah yeah so
56:08 - literally like just
56:09 - i am i'm yeah i'm not just starting
56:11 - means like i'm just starting out so
56:14 - i just want to get over like what are
56:15 - the things i need to learn
56:17 - so to keep it simple to keep it simple
56:20 - stop over complicating it like screw
56:23 - thinking about server side rendering if
56:24 - you haven't done a clone yet like
56:26 - don't even worry about self sign
56:28 - rendering i i don't even build apps
56:30 - since i said rendering unless i need to
56:31 - like because in all like
56:32 - if i have to tesco had server side
56:34 - rendering so i worked on server side
56:35 - rendering
56:36 - in my own clients and my own freelance
56:39 - stuff i don't really do it like as in
56:41 - only if they request it as a special
56:42 - thing in which case i'll bump the price
56:44 - and i'll do it
56:45 - for them but um
56:49 - truth be told like i said what i would
56:50 - say is honestly go and
56:52 - start building the clones from from like
56:55 - from and you'll start to see
56:57 - patterns and it will answer a lot of the
56:58 - questions that you have
57:00 - but that's the best thing you can do
57:02 - right now
57:03 - don't worry about writing lists don't
57:05 - worry about like do i need to know this
57:06 - this
57:07 - is because knowing things
57:10 - in isolation isn't going to help you
57:12 - build a product or a service right
57:14 - knowing knowing how and and and in what
57:17 - ways to break down a problem
57:19 - and and apply that in practice that's
57:22 - how you go ahead and become a developer
57:24 - a developer isn't somebody who can code
57:27 - and just sort of like
57:28 - write right line off the line of code a
57:30 - developer a good developer is pretty
57:31 - much somebody who can just say like
57:33 - okay you have a problem and you want to
57:35 - build a product to solve a problem
57:37 - and i know some stuff some some some
57:40 - stuff in programming which is going to
57:41 - help you
57:42 - fix that problem right exactly and then
57:46 - when you start thinking like that it
57:47 - changes everything and it starts to
57:49 - become
57:49 - it's all about what value you can bring
57:51 - as opposed to i can code
57:53 - right yeah okay funny yeah
57:56 - uh one more question and then we're
57:58 - going to jump in so let's go
58:02 - so it was just like people are always on
58:05 - to like asking like it's not me who's
58:06 - asking about it it's like the people who
58:08 - are asking that
58:09 - whether they should master wordpress and
58:11 - uh stuff like that or
58:12 - whether they should come to javascript
58:14 - like what's the value of javascript when
58:15 - wordpress and wix are there like
58:17 - seriously
58:18 - some people people are asking me that so
58:20 - let me just answer them
58:23 - yeah so actually that's a that's a good
58:25 - shot so these are this is these are two
58:27 - good points here
58:28 - so okay it's all down to goals right
58:31 - what is your goal
58:32 - as in like if your goal is to to make
58:34 - money and to sort of go ahead
58:36 - and uh to basically take on a bunch of
58:38 - clients
58:39 - and build them sites that they can
58:40 - easily maintain and and sort of you know
58:43 - go ahead and launch as a site then i
58:45 - would say
58:46 - if speed is what you're looking for
58:48 - speed ease of use
58:50 - and sort of maintainability and so on
58:52 - wordpress yeah then then wordpress
58:54 - wordpress is something which is again
58:55 - like
58:56 - like like joe said like it's gonna be
58:57 - something which is it's it's very simple
59:00 - to get up and running
59:01 - um i personally haven't done much
59:03 - wordpress i've done it like here and
59:04 - there when i needed to
59:06 - uh like a client offered me a certain
59:08 - amount of money so i was like screw it
59:09 - why not like i might as well go ahead
59:10 - and take his job
59:11 - so i pretty much did it um but if you
59:13 - but a lot of people i know
59:15 - become so good at wordpress that they
59:17 - can just accept a job boom
59:19 - they do that job except another job do
59:21 - it technology job do it before you know
59:23 - it they've cleared like 20 000
59:24 - in a month and i'm not joking like i've
59:26 - seen people do that and then
59:27 - it's like wow okay so it really doesn't
59:29 - matter if you're doing javascript
59:31 - whatever if you're clearing that kind of
59:32 - money
59:33 - then you're you're doing something right
59:35 - so
59:36 - i would say wordpress is something which
59:39 - is uh
59:40 - it's definitely there's value in it
59:41 - right shopify is another one which is
59:44 - actually not spoken about enough shopify
59:46 - is something which if you get good at
59:47 - shopify
59:48 - there is so many e-commerce websites out
59:50 - there or like what i would say is
59:52 - recommend is if you guys are actually
59:53 - have sort of an entrepreneurial mindset
59:55 - and you kind of want to do something
59:56 - outside the box or
59:57 - sort of want to start your own little
59:59 - company up or something like that i
60:00 - would recommend honestly find
60:02 - local businesses near you and this is
60:03 - something which garyvee sort of proposes
60:05 - as well
60:06 - like go ahead find local businesses
60:08 - around you and for example let's say you
60:10 - found a bike shop and they have a
60:11 - terrible website
60:12 - yeah go ahead implement an entire little
60:15 - build in shopify
60:16 - be like look this this will collect
60:18 - payments you can pretty much add
60:20 - products you can add the bikes you can
60:22 - add parts
60:22 - it pretty much manages all your
60:24 - customers it does everything for you
60:26 - i've built it for you uh you can decide
60:28 - what you want to pay me if you want to
60:29 - have it
60:30 - yeah and pretty much do that enough
60:32 - times and
60:34 - one you're going to learn the skills to
60:35 - sort of close clients you're going to
60:36 - learn how to sort of build that sort of
60:38 - soft skill approach
60:39 - pair that with the soft skills book by
60:41 - john thomas and you have a really nice
60:42 - thing
60:43 - yeah i started reading it really good
60:46 - right
60:48 - yeah really really good book so i would
60:50 - say that's one thing so wordpress is
60:52 - going to be useful in that sense shopify
60:54 - again
60:54 - something which is going to be again if
60:56 - you if your goal is money then honestly
60:58 - that's kind of a good way to go
60:59 - right then you can sort of build up some
61:01 - money built which buys you time and then
61:03 - of course you can go ahead and learn
61:05 - something like react and build your
61:06 - skills when you have that time
61:08 - but some of that some people are
61:09 - definitely sort of more they need to
61:11 - make money quick so
61:12 - wordpress shopify good approaches to
61:14 - solving that now another thing
61:16 - is um webflow webflow's relatively new
61:19 - i've seen loads of adverts on it
61:21 - webflow allows you to do the entire
61:23 - process so you can pretty much design
61:25 - the app so imagine a client came to you
61:27 - and said like i want an app bill
61:29 - you can pretty much go ahead and say to
61:30 - them okay i'm going to design it in web
61:32 - flow
61:33 - i believe you can do that pretty quickly
61:35 - in web flow i think that's what they
61:36 - kind of built it for as well
61:38 - and then you can pretty much like design
61:40 - and then like it builds the front end
61:42 - for you
61:43 - yeah exactly it like builds the html css
61:47 - javascript everything
61:49 - and like clean code yeah exactly like it
61:52 - will go ahead and um
61:53 - it would go ahead and actually build it
61:55 - out for you as well so that's going to
61:56 - be really really handy
61:58 - and then you can it will basically take
61:59 - that design that you can pretty much
62:01 - show the mock up
62:02 - sort of that sort of stuff and then you
62:04 - can go ahead and um
62:06 - translate that to code now that actually
62:08 - plugs and plays i think you can actually
62:10 - you can convert the code to react i
62:12 - think as well in workflow i'm not sure
62:13 - but i think you can do that
62:14 - they also got cms which means that you
62:16 - can actually manage data flow and stuff
62:17 - like that
62:18 - with webflow and then you can actually
62:20 - deploy with
62:21 - webflow so you see things like uh
62:24 - shopify things like
62:26 - um webflow things like um
62:29 - um the other one um what was the first
62:32 - one we said
62:33 - wordpress wordpress yeah so all that
62:35 - stuff all that stuff is that good if you
62:37 - want to make money as a freelancer and
62:39 - that sort of route
62:40 - um and again and now suddenly i can
62:42 - guarantee you that there are going to be
62:43 - people in the comment section
62:45 - who's just going to be like oh then why
62:47 - are we learning react why are we
62:48 - learning javascript are we learning
62:49 - everything like that so
62:50 - you you should i think that that would
62:52 - be helpful for some people yeah i would
62:53 - say like in that case
62:55 - honestly guys like again it comes down
62:56 - to the point where like all you could
62:58 - pretty much go ahead and learn
63:00 - just like you could become a css guru
63:03 - and
63:03 - and and you could get paid bucks for
63:06 - being so good at css and not know
63:07 - anything about react
63:08 - but you're just a css guru like you see
63:11 - it really doesn't matter sometimes about
63:13 - the skill
63:14 - it's about how much value that skill can
63:16 - translate to and provide someone else
63:18 - what's up corey he did um yeah so it's
63:22 - all about like sort of like how much
63:24 - that that value can bring to someone
63:25 - else and that's going to pretty much
63:26 - determine
63:27 - what the what the sort of return will be
63:29 - for you so it doesn't matter whether
63:30 - it's wordpress or something
63:31 - but the reason why react is so hot is
63:33 - because react is the number one most
63:34 - wanted language so the jobs are
63:36 - flying right now the pay is huge it's
63:38 - fun to code and react
63:40 - it's extremely powerful you can take
63:42 - react go ahead and take it to
63:44 - react native pretty much build ios
63:46 - native apps android apps
63:48 - uh you can build web apps you see like
63:50 - it's immensely powerful and you can
63:52 - pretty much do everything
63:53 - in webflow you still have restrictions
63:55 - like because then you're still pretty
63:56 - much using a drag-and-drop sort of
63:58 - with some custom coding you can still
64:00 - probably add in but
64:02 - um you need to make sure that like again
64:04 - if your
64:05 - clients are for example before uber was
64:08 - built
64:09 - you you wouldn't go on web clone kind of
64:10 - build uber right
64:12 - like as in you see what i mean like you
64:14 - see there's a need
64:15 - to know bespoke programming uh to solve
64:19 - bigger problems bigger that clears a lot
64:21 - of stuff out for some people because
64:23 - some people are just like okay i'm gonna
64:25 - learn wordpress and i'm gonna
64:26 - like just get coding in the trash i'm
64:29 - just gonna do all this all day
64:30 - and it's not just about that it's about
64:32 - the uniqueness like react is highly
64:34 - customizable and
64:36 - i'm it i might be wrong but sometimes
64:38 - wordpress might not be that customizable
64:39 - say that
64:40 - you're building the next uh uber as you
64:42 - said or something like airbnb
64:44 - yeah well maybe sometimes wordpress
64:46 - might be helpful but
64:47 - most of the times you want to enable
64:51 - extreme amount of customization and for
64:52 - that purpose i don't think that anything
64:54 - is better than code itself
64:55 - yeah so it's a balance between code and
64:58 - value as in like
64:59 - if i would i'd recommend literally i
65:02 - would actually recommend
65:03 - if your if your route is to go in
65:05 - freelance and take on jobs and wordpress
65:08 - is a quicker way of pumping out websites
65:10 - go ahead and learn wordpress you know
65:12 - but um in terms of landing a
65:14 - full position uh learning wordpress
65:17 - isn't going to get you
65:18 - like a secure job it's in like it may
65:21 - get you a job somewhere
65:22 - but in terms of in comparison to react
65:24 - it's not even close
65:26 - um purpose is like the quick solution to
65:28 - anything like you're building a
65:30 - e-commerce website just quickly quickly
65:31 - do do a shopify thing and then you could
65:34 - say that you were in for the long term
65:36 - then of course react yeah exactly
65:40 - i have one question for this uh
65:42 - regarding this only okay see uh
65:44 - as far as clients are concerned when
65:45 - clients have certain requirements
65:47 - then we sometimes refer shopify or vex
65:50 - or wordpress
65:50 - and we can make them make him a website
65:53 - for as he wanted
65:54 - but when his his needs are something
65:56 - different he says that i want certain
65:58 - different customization as per his
66:00 - different needs then sometimes these
66:03 - kind of website don't have
66:04 - those specifications in that scenarios
66:08 - if you are a person who has got
66:10 - knowledge of react
66:11 - so does the knowledge of react is useful
66:13 - there we can customize
66:15 - uh these platforms wordpress vx websites
66:19 - so remember like you nee you need to
66:21 - remember that like every single
66:24 - conversation encounter client is
66:26 - different which means that like
66:28 - if somebody comes to you with a
66:29 - wordpress website you can't just be like
66:31 - okay i'm going to somehow plug react in
66:32 - you see i mean like as in
66:34 - if they have a wordpress website you
66:35 - probably chances are you're going to
66:36 - just be adding to their wordpress
66:37 - website and adding functionality and
66:39 - stuff like that
66:40 - i haven't worked with i mean you might
66:42 - be able to combine the two i haven't
66:43 - done that but
66:44 - the point is is that like if you have
66:46 - freelance clients if you have
66:48 - uh somebody who just comes to you and
66:49 - says i have an idea
66:51 - and i want to execute it on because a
66:53 - lot of times when i have conversations
66:55 - with a client
66:56 - it's pretty much kind of a conversation
66:58 - of remember we
67:00 - look at it in terms of we know that okay
67:02 - there's a react we know there's
67:03 - wordpress we know their shopify right
67:05 - but somebody might have an idea and they
67:08 - might have some money and they might be
67:09 - like look i just want to get this thing
67:10 - built i have an idea i have a vision of
67:12 - what i want
67:13 - i have no idea about tech and all this
67:15 - stuff so then it's up to you to say like
67:18 - it's up to you to be then kind of put
67:20 - yourself in a position to say like
67:21 - okay if it's an e-commerce website
67:23 - they're after maybe shopify is going to
67:24 - help them out
67:25 - right maybe shopify is going to be the
67:26 - quickest most reliable scalable route
67:29 - they pretty much can go from zero site
67:32 - to up and running selling products
67:34 - within a day now if you said to do the
67:37 - same thing and react
67:38 - i can't guarantee you'll be a day and it
67:39 - probably looked like if it was in
67:41 - the day um
67:42 - as compared to shopify it would look
67:44 - literally perfect
67:45 - in a day like like if you put the work
67:47 - in so you see
67:48 - the trade-offs can be it can be in that
67:50 - sense but that's all the questions we're
67:52 - going to take for now guys
67:53 - let's go ahead and let's jump into some
67:55 - functional stuff um because
67:58 - that was an awesome that was actually an
68:00 - awesome q a and if you're watching this
68:01 - on youtube and you found value
68:03 - go ahead and smash thumbs up dude that
68:06 - was at least 500
68:08 - i swear awesome dude nice
68:12 - um right so now uh i'm actually having
68:14 - fun today because i've got um
68:16 - yesterday just to tell you guys a little
68:18 - quick break before we go into that
68:20 - i actually went ahead and bought a um so
68:23 - so i had a mouse right
68:25 - and i i use this mx master mask and it's
68:27 - how i do all the drawing and stuff like
68:28 - that
68:28 - it's called these buttons on and stuff
68:30 - like that but yesterday i was sitting
68:32 - there
68:32 - doing a like doing a bit of work and
68:33 - then the thing died
68:35 - and i was like i couldn't figure out why
68:36 - i died and i charged it and everything
68:38 - so oh yeah
68:39 - pedro uses it as well and uh i freaked
68:41 - out and i was like i'm going live
68:43 - tomorrow how am i gonna draw on the
68:44 - screen without my mouse
68:45 - and um i ordered it and luckily amazon
68:48 - saved the day with the new one so this
68:49 - is a new
68:50 - new version so it's it's so good
68:54 - yeah this is mx monster three super
68:56 - silky yeah
68:57 - yeah so believe it or not i bought my
69:00 - own mouse like literally for my own
69:02 - money i bought it
69:03 - well done i was on basics yeah it was
69:05 - like a need for me because i was like
69:07 - making websites and like web designs
69:09 - sorry
69:10 - instagram posts so i needed it so i just
69:12 - i just said
69:13 - i said to my dad that hey i need it and
69:16 - i want that price for my
69:17 - competition of from my school and i got
69:20 - some money from there
69:21 - so i just said i just told him that i'm
69:22 - gonna order it and i just ordered it and
69:24 - it was like a great feeling like
69:26 - ordering my first thing on my own and
69:28 - this is highly valuable you know like my
69:29 - sister is using it all day all night
69:31 - yeah i'm using it all day so honestly
69:33 - for me yeah
69:34 - and this is something i want to start
69:36 - off with with this this next portion
69:37 - guys
69:38 - so the next thing we're going to talk
69:39 - about is things which can make your life
69:40 - easier in terms of coding and stuff like
69:42 - that so like
69:43 - it's pretty much i'm going to show you
69:44 - the development environment so that you
69:45 - guys can code easier but
69:47 - literally like like uh priyanka said
69:48 - like it's it's like an investment in
69:50 - yourself to sort of like
69:52 - upgrade your equipment so in this case
69:53 - like a mouse right we all
69:55 - overlook a mouse we all use a track but
69:57 - i don't need a mouse like
69:58 - the point is that like this little thing
70:01 - speeds up my entire world makes my life
70:03 - so easy to suck like anything like
70:06 - moving one component from another damn
70:08 - it was so hard yes
70:10 - how people do using things like touchpad
70:13 - it's so hard
70:14 - to be fair i've used i i do even when
70:17 - i'm like uh on a plane or something like
70:18 - that i just literally use
70:19 - touchpad so and whatever works for you
70:22 - make it work
70:23 - but what i would say is is this is
70:25 - something that kazi actually sort of
70:27 - drilled into my head and it's changed my
70:29 - entire outlook and since i've done it
70:30 - the returns have been nothing but great
70:32 - for me so if you
70:34 - are on a debate right so let's say you
70:36 - want your you need a screen
70:37 - right you need a new screen and and
70:39 - right now you're just working off one
70:41 - screen and you have the money
70:42 - or and but you're on the fence and
70:44 - you've kind of been debating for a while
70:45 - we've all been there right we've all
70:47 - been in that situation
70:48 - um i get off the damn fence and just buy
70:51 - the screen
70:51 - like this is this is issue what i'm
70:53 - saying like i know it can be a
70:54 - conversation of i'm literally the person
70:56 - who was sitting there because i'm like
70:57 - carl
70:58 - it's expensive man you know like that
71:00 - mic right yeah like it's in this
71:02 - yeah this mic isn't i remember when kazi
71:04 - said like should we upgrade it i was
71:05 - like you know
71:05 - dude it's expensive like the headset's
71:07 - expensive like this
71:08 - lighting everything's kind of pricey but
71:10 - then it's like invest
71:12 - in your yourself invest in your skill
71:14 - set like i know someone said the lights
71:15 - yeah okay the lights are fancy my
71:16 - girlfriend brought me those
71:18 - um but they look cool
71:19 - [Laughter]
71:22 - yeah but like things like like literally
71:24 - like the mouse things like your screen
71:27 - like in front of me i have a huge ultra
71:28 - wide right now and it was an investment
71:30 - and since i've had this ultra wide i
71:32 - pumped out 25
71:34 - clones so it's literally a case of like
71:38 - do you see what i mean like
71:40 - and if i didn't have the the screen i'm
71:42 - telling you the clones would have taken
71:43 - me a lot longer
71:44 - and it would have been a lot tougher to
71:45 - go ahead and do that so
71:47 - i would recommend that you do just like
71:48 - if you're on the fence with things like
71:50 - that
71:50 - get off the fence and invest in yourself
71:52 - and and the returns come
71:54 - like this is don't even like stress
71:55 - about it like the returns will come
71:57 - because
71:57 - it will speed up your productivity speed
71:59 - up your skill with that said
72:01 - let's go ahead and jump in into today's
72:03 - session so
72:05 - um so i want to show you guys so
72:08 - yesterday um
72:09 - yesterday last week we talked about
72:11 - redux right now
72:13 - redux if we we all know i'm not going to
72:15 - go into the pattern of redux but i'm
72:16 - going to show you use cases of redux
72:18 - and then afterwards because it's
72:19 - recorded you guys can pretty much go
72:21 - ahead at your own pace go ahead and and
72:23 - do stuff um
72:24 - uh and kind of run through it um give me
72:26 - two seconds guys
72:28 - uh still fun fact maybe i kept just me
72:31 - oh we just
72:31 - like made after so long oh nice um
72:36 - so so now guys um we're gonna go ahead
72:38 - and click getting started with redux
72:40 - okay so this is it now redux getting
72:43 - started has never been easier than it is
72:45 - right now
72:45 - so we literally do npx create react app
72:48 - we name it and then use use
72:50 - this command dash dash template redux
72:52 - and it will set everything up so i'm
72:53 - going to go ahead copy this
72:55 - pull up a terminal right pull up a
72:57 - terminal so
72:59 - yeah again
73:02 - let me go ahead and say terminal there
73:05 - we go
73:06 - and here i'm going to go and here
73:09 - i'm going to say the app is called let's
73:12 - just call it um
73:12 - oh i'm not going to do it here actually
73:14 - i'm going to go ahead and do a directory
73:18 - so let me go into
73:22 - yeah well it's another good skill to
73:24 - master the command line if anyone's
73:26 - interested they should
73:26 - definitely do it because you can do so
73:28 - much with the command line
73:30 - yeah command line literally it's going
73:31 - to be it's going to be an investment in
73:33 - yourself to go ahead and do that because
73:35 - if yeah put it that way that's another
73:37 - test if you feel really uncomfortable in
73:39 - the command line
73:40 - i've been there trust me i was once at a
73:42 - point where um
73:44 - uh i literally remember i was in
73:46 - university and again
73:47 - i am somebody like disclaimer who went
73:50 - to university and i wouldn't even
73:51 - recommend
73:52 - somebody else to go to university now i
73:54 - think what you're doing right now
73:56 - by being here by literally just being
73:58 - surrounded by people who want to learn
74:00 - and who are actually taking action is
74:03 - much more valuable than any sort of
74:06 - degree or masters or anything and take
74:08 - it from somebody who did the
74:09 - degree did the masters did all that
74:11 - i wouldn't go like if if i knew i knew
74:13 - now i would have saved the money
74:15 - and i would have just like did a course
74:17 - like this i would have gone ahead and
74:18 - just
74:18 - actually done stuff as opposed to um
74:22 - you know uh doing it that way so there's
74:24 - actually a big quantity about this and
74:26 - i would like to say to anyone who is
74:28 - like in the fans of going to college or
74:31 - not
74:31 - so if you're going to a college like a
74:33 - community college or something
74:35 - don't go for it just invest in yourself
74:36 - in something else but if you're getting
74:38 - an offer from something like stanford or
74:40 - harvard
74:41 - why aren't you in it seriously like
74:43 - that's that's the level of colleges that
74:44 - you're targeting
74:45 - and if you're getting those jobs then if
74:47 - you're getting those offers then
74:48 - don't miss it yeah exactly stanford and
74:51 - like harvard and those type of colleges
74:53 - are really expensive
74:55 - shoe but yeah it's worth it it's worth
74:57 - it i mean it still depends
74:58 - on what the situation honestly i would
75:00 - say is it
75:02 - isn't like the industry still expects
75:05 - like you to have like a degree
75:06 - and masters and you know kind of thing
75:17 - is because it's not about the degree
75:18 - it's about the experience yeah
75:20 - exactly if you could tell them that you
75:22 - can work on a website you can do a bunch
75:24 - of stuff
75:24 - like you know redux you know this that
75:26 - that means a lot more honestly
75:28 - when i used to interview people who are
75:30 - coming uh to join like
75:31 - the company that i was in and things
75:32 - like that i wouldn't even kind of i
75:34 - don't i didn't even care about the
75:35 - degree that they did like it might
75:37 - and anyone who said like oh you need a
75:39 - first class degree to be here
75:41 - i kind of i don't want to be a part of
75:42 - that team like because because that's
75:44 - not
75:44 - a good developer space in my opinion
75:47 - like the people who say like you don't
75:48 - actually need a degree but like what do
75:50 - you know
75:50 - have you got the open mindset of
75:52 - learning that's the team you want to be
75:53 - a part of
75:54 - right not the team that's like oh what's
75:56 - your gpa what's your like
75:58 - you know it's just like it's just silly
76:01 - you know so
76:02 - um let's go ahead and jump into this so
76:05 - yo i'll keep hearing someone say hello
76:10 - um oh okay awesome making sure you can
76:11 - hear me oh yeah
76:13 - yeah yeah we can hear you i had a
76:15 - question
76:16 - who is that nathan okay what's up nathan
76:20 - so um i'm new this my first day
76:23 - and it's supposed to be an onboarding
76:25 - welcome dude yeah
76:26 - yeah but i the link for the onboarding
76:28 - on facebook is not working
76:30 - the onboarding was actually i think
76:36 - because there was some scheduling this
76:38 - is just only for this week
76:40 - and you're right nathan the onboarding
76:42 - calls always on a monday
76:44 - but for this week i think there was some
76:46 - sketchy scheduling conflict and
76:48 - i think rishi sent out a thing on slack
76:51 - yeah rishi sent that
76:52 - uh morning was today at nine yeah
76:56 - today at nine so as far as i was aware
76:59 - the onboarding was at nine
77:01 - uh am pst and then it was a two-hour
77:03 - onboarding and then it would have been
77:04 - the coaching call so
77:05 - i'll catch up with rishi afterwards and
77:07 - figure out what happened there but
77:08 - regardless
77:09 - uh welcome nathan uh welcome to the
77:11 - course and also there will be an
77:12 - onboarding
77:13 - uh i would speak to rishi about that but
77:15 - just keep an eye out in the chat
77:17 - and and you'll you'll you'll see the
77:18 - onboarding okay
77:20 - yeah and my last question is
77:23 - um what got me to really sign up for the
77:25 - course was the clones that you
77:26 - you make yeah and i was wondering how
77:29 - did you get the
77:30 - clone to look exactly like the existing
77:32 - one
77:33 - the the css and the styling and the
77:35 - assets and all that
77:37 - um so it's literally a case of uh of
77:40 - dialing in on on skills like flexbox
77:42 - dialing in on css skills and that sort
77:44 - of stuff and then actually going ahead
77:45 - looking at the final product in some
77:47 - cases i would inspect the actual website
77:49 - see what
77:49 - see what they use see what colors
77:51 - they're using use color pickers and
77:53 - things like that
77:53 - match it closely to what they do and
77:56 - what i'll do is i'll even stream it one
77:57 - day when i'm building
77:58 - live um i think that'll be cool for
77:59 - everyone to see yeah you'll see the
78:01 - reality
78:02 - of the build um so uh
78:06 - i know there's an app called site sucker
78:08 - yeah which literally will
78:10 - suck everything like the assets the
78:12 - designs and everything no
78:13 - so i don't use anything like that and
78:15 - then to be honest what they do is that
78:17 - it's not going to give you a proper code
78:19 - base or like anything it's going to give
78:21 - you like some weird
78:22 - um because a lot of these sites don't
78:24 - actually it's kind of it's server side
78:26 - rendered and delivered
78:28 - so even what you get is it's not going
78:30 - to be the actual site
78:31 - because when you look go on the site it
78:33 - pulls the information they need so
78:35 - the way it wouldn't actually suck the
78:36 - site in the correct way so um
78:38 - yeah i actually go ahead and i just
78:39 - visually look at the site and i'll kind
78:41 - of clone it
78:42 - like and i'll build it that's dope
78:44 - thanks dude
78:45 - yeah all right sonny you you you use
78:47 - inspect to kind of see what they're
78:49 - doing right like how nice does it
78:51 - i do expect i do in the beginning i did
78:53 - in the beginning and i got really good
78:55 - at kind of getting a knack for it
78:56 - and then but what i'll do is i'll show
78:58 - you guys um
79:00 - i think what i'll do is either on twitch
79:02 - or on youtube or something
79:03 - but when i do a build um maybe not this
79:06 - week because we've got two big videos
79:07 - this week thursday friday
79:09 - um but what i'll do is i'll go ahead and
79:11 - stream it and that will be really handy
79:13 - for you guys to go ahead and see the
79:14 - reality of what's behind the scenes when
79:16 - i get stuck what i do
79:17 - and that sort of stuff because trust me
79:19 - there are times where it's like four
79:20 - hours five hours i'm saying i'm just
79:21 - coding
79:22 - and i'm going to a little zen state um
79:25 - and i just kind of chuck music on and
79:26 - you know he's just code
79:28 - um so cool yeah yeah good features sunny
79:31 - yeah yeah i added i added uh i added a
79:33 - user authentication and assigning page
79:35 - to the
79:36 - netflix clone that we did and it looks
79:39 - it took me a while but i managed to make
79:41 - it look exactly like the sign in page
79:43 - nice practice to do that dude that's
79:46 - awesome man and that's what i would say
79:47 - is that literally take the clone
79:49 - and go with it and build things on top
79:51 - like pedro did like literally go ahead
79:52 - and do it like let you go ahead and take
79:54 - it to that next level
79:55 - and that's going to be the difference of
79:57 - what actually goes ahead and takes it
79:59 - from
79:59 - you just clone something to you
80:01 - remembering now because you probably
80:03 - would have had to
80:04 - extend on it add on things really
80:05 - understand the code to kind of go ahead
80:07 - and build on it
80:08 - so that's dope dude and i'd recommend
80:09 - everyone does that if you work on a
80:10 - clone
80:11 - um yeah awesome so with that said let's
80:14 - go ahead and
80:15 - create a react app so i'm going to go
80:17 - ahead and do mpx create react app
80:19 - and i'm going to name the app this is a
80:21 - redux tutorial
80:23 - um i'm going to say template redux and
80:25 - then i'm going to hit enter
80:27 - and all this is going to do is it pretty
80:28 - much create react app is
80:30 - a tool provided by facebook it pretty
80:32 - much goes ahead and sets up the entire
80:35 - react app and then the dash dash
80:37 - template redux
80:38 - basically sets it up in a way of
80:41 - um having everything oriented around
80:45 - redux like sort of so for those of you
80:47 - who don't know
80:48 - what redux is redux is essentially when
80:50 - we have data inside of an app so i'm
80:51 - going to give this a quick rundown
80:53 - because we do explain this in quite a
80:54 - lot of videos um
80:57 - but redux is essentially when you have
80:59 - an app so in react you have
81:01 - component based design right so
81:02 - everything's components so if you have a
81:04 - header it's a component
81:06 - if you have um if you have a
81:09 - product it's a component things like
81:11 - that so when you have a component-based
81:13 - design um
81:14 - imagine the first thing you have is the
81:16 - app component right this is the first
81:17 - thing that loads
81:18 - and everything is kind of like generated
81:20 - underneath this now obviously you can
81:21 - change
81:22 - this so it's not the app component but
81:24 - i'm just sort of assuming that we don't
81:26 - and then imagine like underneath this
81:27 - you had like a header so let's go ahead
81:29 - and say we had like a header
81:31 - we had um a few other things so we had a
81:33 - header we had like a sidebar
81:35 - oh man you get really quick at doing
81:38 - this stuff
81:38 - but like still you never get it
81:41 - rightfully but sidebar
81:42 - and then underneath that imagine like
81:44 - inside the sidebar you had like things
81:45 - like um
81:47 - yeah some let's just exaggerate and
81:49 - phenomenally say product right
81:51 - for some reason in the sidebar you have
81:52 - a product so it could be like an adverb
81:55 - so weird
81:55 - yeah and then like here i mean in in
81:57 - some cases you have the adverts where
81:59 - they have products inside the sidebar
82:01 - um so so here you could do this for
82:03 - example and then say inside the header
82:05 - um or like let's just say here you have
82:08 - um
82:10 - let's just call it let's call it a
82:11 - checkout page right so imagine you've
82:13 - got another page which is checkout
82:15 - now here imagine you have products as
82:17 - well right so you see like
82:19 - uh component-based design the beauty and
82:22 - benefit of it is that you can write one
82:23 - component
82:24 - aka this one this one and this one
82:27 - and um it's pretty much so this one this
82:30 - one and this one
82:31 - and it's pretty much a case of you just
82:33 - reuse the component right
82:35 - now imagine we log in right so let's go
82:37 - ahead and say we have
82:38 - another component over here and this
82:40 - one's called login
82:41 - right so this is a login component now
82:44 - when we log in
82:45 - i have the user at this point so imagine
82:48 - i log in
82:48 - i now have a user but my user in the
82:52 - code is over here
82:54 - so he's literally over here as in like
82:56 - he's in some kind of variable and the
82:57 - login component
82:59 - now there's a we can basically go ahead
83:01 - and pass it down
83:02 - so we can kind of like have a variable
83:04 - here pass it down
83:06 - set the user and then we have access to
83:07 - it here and then i can pass it down here
83:09 - pass it down here to the product imagine
83:11 - we needed the user's information
83:13 - whenever we
83:14 - we interacted with the product then i
83:16 - would pass it down here then i would
83:17 - also pass it
83:18 - all the way over here and here now you
83:20 - can see what happens is the user kind of
83:22 - gets
83:22 - thrown everywhere right it's kind of a
83:25 - headache and we call this
83:26 - headache prop drilling so whenever you
83:28 - run into something like this
83:30 - we call it prop drilling and this is a
83:32 - headache we don't want to do that right
83:34 - because then what happens is
83:34 - the user goes from here to like here to
83:38 - here
83:38 - uh it goes down here and it just becomes
83:41 - messy and then you get this nasty like
83:43 - tree of
83:44 - crap going on and you don't want that
83:46 - instead what we do is we we introduce
83:48 - something like a data layer so imagine
83:50 - that we wrap the entire app
83:52 - yeah and this is essentially just think
83:53 - of this as just call it redux
83:55 - no okay so let's just say redux and the
83:58 - purpose of redux is that when we log in
84:00 - what i can do is i can basically throw
84:02 - the user into this layer
84:04 - right so the user's now just thrown into
84:06 - this layer now this layer obviously
84:08 - surrounds the entire app which means
84:10 - that what i can then do is i can do
84:12 - powerful stuff like
84:14 - i can do powerful stuff like pretty much
84:16 - because the user's in the data layer so
84:18 - it's pretty much around the app
84:20 - if i need it here i can just pull the
84:22 - user in at this point
84:24 - you see um so here i can actually just
84:26 - go ahead and grab the user i don't need
84:27 - to do any of this
84:28 - weird sort of pulling it around even
84:31 - here if i need the user i can just go
84:32 - ahead and pull the user
84:33 - right and it works two ways so like
84:36 - imagine
84:36 - if at this point i add a product to the
84:39 - basket
84:40 - i can just add the product to the basket
84:41 - and then in here i can pretty much have
84:43 - a basket
84:44 - and we modify the basket and now if i
84:46 - need the basket for some reason in the
84:48 - header
84:48 - you know like in some in some apps like
84:50 - amazon you have the basket icon in the
84:52 - header
84:53 - i can pretty much just go ahead and pull
84:54 - it from here so i can just go ahead and
84:56 - say give me the basket from here
84:58 - so you see like it creates this uniform
85:01 - um this this very maintainable
85:05 - structure to our code where basically we
85:08 - can pass
85:08 - a variable in a global like fashion so
85:12 - pretty much
85:13 - if we have a variable over here i just
85:14 - throw it inside the data
85:16 - or it's either redux the redux store we
85:19 - call it or slices of the store
85:21 - and then pretty much you can just use it
85:23 - wherever you need to use it
85:24 - okay so we pretty much just went ahead
85:27 - and created
85:27 - the the react app so i'm gonna go cd
85:30 - redux tutorial
85:31 - and now i'm inside now i'm gonna show
85:33 - you guys a little trick
85:34 - so i'm gonna go ahead and say code and i
85:36 - use the insider's edition
85:38 - but you guys it would just say code dot
85:40 - so code dot
85:41 - but i'm going to do code insiders dot
85:44 - and that will go ahead and pull up
85:45 - a uh a visual like a video studio code
85:49 - uh again i'm using the inside edition
85:51 - you guys will have the normal one
85:53 - and here you'll pretty much have
85:55 - everything set up for you so i'm going
85:56 - to go ahead and make this a bit easier
85:57 - for you guys to read
85:58 - by popping it over here and in order to
86:01 - do code
86:02 - don't you have to add it to your path
86:04 - first yes you do
86:05 - so in order to do that you have to do
86:07 - command shift p
86:09 - right and then type in shell command and
86:12 - in again because i'm using the beta
86:14 - version it'll say inside
86:15 - install code inside this command and
86:17 - pass but for you guys it will say
86:18 - install
86:19 - code command in path you need to do that
86:21 - before you do that little trick
86:23 - okay so that's going to help you guys
86:25 - out a lot
86:26 - you don't need that in windows by the
86:28 - way you don't need that in windows
86:31 - yeah because probably because microsoft
86:32 - made it you know it might
86:34 - just be a built-in function no no it by
86:36 - default it adds it to path
86:38 - while installing nice yeah that's yeah
86:41 - that's what i'm saying
86:41 - because it's like windows yeah it did
86:44 - not work for me
86:45 - when i had powershell i was having
86:47 - issues and i helped sayuri the other day
86:49 - she was having the same issue
86:51 - she has even she was on a windows 10
86:52 - machine and she was using powershell as
86:55 - a team
86:57 - so we had to we had to add a small thing
86:59 - to our path
87:01 - you found it on on stack overflow and
87:03 - then it got working
87:04 - yeah you have to add like a an alias or
87:07 - something
87:09 - there is an option at the bottom in the
87:11 - installer that you add to the path
87:13 - there is a tick box i highly recommend
87:16 - for windows users to use the bash
87:18 - terminal because it has all the
87:20 - functionalities and uses the same
87:21 - commands as linux
87:23 - and excel for circles so yeah exactly
87:26 - yeah you don't need to use sudo yeah but
87:27 - it's it's basically the same but it's
87:29 - very useful
87:31 - exactly now guys for this next bit i'm
87:34 - going to do a deep dive
87:35 - so i'm literally just going to go ahead
87:37 - and i'm going to mute
87:38 - everyone and again you can unmute
87:40 - yourselves if you need to
87:42 - ask questions and stuff like that but
87:43 - we're going to go heavy on this bit so
87:45 - this is focus mode so literally everyone
87:48 - like get ready because it gets quite
87:50 - heavy right so it's going to get quite
87:52 - heavy and in terms of like understanding
87:54 - things like that so i just want you guys
87:55 - don't even try and follow along because
87:57 - remember it's recorded so you can
87:58 - literally go ahead and watch the video
88:00 - back at another time
88:01 - do at your own pace but at this point i
88:02 - want you guys to really really focus
88:04 - because it's about to get really
88:05 - really sort of intense at this point so
88:07 - save all the questions for the end so
88:08 - you so you're not interrupted
88:10 - yes so let's try and save the questions
88:12 - to the end and then what i would say is
88:13 - if there are good questions uh uh any
88:16 - other co-hosts or
88:17 - uh it will be awesome if you just
88:18 - literally just kind of get a few of them
88:20 - on on sort of slack or something like
88:21 - that and we can pretty much just
88:23 - you know sort of pile them up dope so
88:26 - with that said guys
88:27 - now what we're going to do is we go into
88:28 - our source i press command j
88:30 - or control j if you're on on windows and
88:32 - then you're going to go ahead and do npm
88:34 - start
88:35 - okay now this is going to spin up the
88:36 - app um
88:38 - and then what i'm going to do is make
88:39 - myself a little bit smaller in the
88:40 - corner so that way everyone on youtube
88:42 - doesn't get blocked as well
88:44 - okay and now um okay so i've got another
88:47 - app running i was doing another job so
88:50 - this is going to run on 3001 now
88:52 - so what we're going to do now is i'm
88:55 - going to go to
88:56 - app.test i'm going to get rid of the
88:58 - app.test.js i don't really want test
89:00 - files i don't want
89:00 - i'll keep the logo for now because i
89:02 - want to show you guys something
89:04 - get rid of setup tests right so it says
89:07 - compiled successfully so i go back here
89:09 - and boom we have the first app running
89:11 - now you can see this is what this is is
89:13 - a counter app so i've got a plus
89:15 - i've got minus and i've got an add
89:18 - amount and add async so let's go ahead
89:20 - and add two
89:21 - and you see it adds two every time if i
89:23 - go ahead and change it to 20
89:25 - click add adds 20 to that amount right
89:28 - if i click add async
89:30 - it you see there's like a delay because
89:32 - asynchronous anything asynchronous
89:34 - means that there's like a delay so
89:35 - imagine we're making like a network
89:37 - request or something
89:38 - like that then um it has a little delay
89:41 - before it goes ahead and does it so
89:44 - what makes this different to the
89:47 - original create react app basically the
89:50 - value here
89:51 - is not stored inside of simple state
89:54 - it's stored inside of the redux store
89:57 - okay
89:58 - so it's inside of the redux store and
89:59 - i'm going to go ahead and just quickly
90:00 - get rid of this get rid of
90:02 - this so this is actually stored inside
90:05 - of the
90:06 - redux store so this right here
90:10 - this this counter is actually going to
90:12 - go ahead and it's part of that data
90:14 - layer so remember we we drew out that
90:16 - sort of
90:16 - data layer where we had the um the the
90:19 - apps and remember you had like all the
90:21 - components
90:22 - like in that i drew out and then you had
90:23 - that data layer that wrapped it right
90:26 - so this number is pretty much stored in
90:28 - that data layer
90:29 - and it's stored as the calendar i
90:31 - believe right
90:32 - and then what we do is when we need it
90:34 - we just pull it from the the redox store
90:36 - so i'm going to go ahead and clear this
90:38 - um there we go yeah
90:41 - nice so
90:45 - so what i'm going to do now is going to
90:47 - go to our code
90:49 - and i'm going to go ahead and check it
90:51 - out so app.js so i'm going to command j
90:53 - to hide that
90:54 - and here you can see we've got a bunch
90:55 - of stuff happening in here so this is
90:57 - pretty much edit
90:58 - app and save to reload so you can see
91:00 - this is where we're seeing all of this
91:01 - stuff
91:02 - now you see at the top we've got this
91:04 - counter component so what i'm going to
91:05 - do is
91:06 - and this is also an example of me going
91:08 - through code that
91:09 - imagine like i had never seen this
91:10 - before because last time i had the
91:12 - coaching calls the first time i actually
91:14 - saw this template so
91:15 - i'm going to show you guys how i would
91:16 - jump through it so i'm going to hold
91:17 - command and just click it
91:19 - and it takes me to the countdown file
91:21 - now inside of here i can see a bunch of
91:23 - stuff now
91:24 - naturally you're going to freak out
91:25 - you're going to go oh my god what the
91:26 - heck is going on in here
91:27 - right but what i would say is don't
91:30 - freak out
91:31 - you're going to see things like selector
91:33 - right selector is something which we're
91:34 - going to talk about
91:35 - um we're going to see things like
91:37 - dispatch uh dispatch is something we're
91:39 - going to talk about
91:40 - and then you see things like use state
91:42 - now eusta is obviously a react
91:43 - hook now react hook is something that um
91:47 - and also thank you very much
91:48 - iron 26 for the nice words on youtube um
91:51 - so uh usa is something called a react
91:54 - hook and now for example remember we
91:56 - said
91:56 - how we had those components earlier
91:58 - right so you had those different
91:59 - components
92:00 - on a web page now if we have a component
92:03 - each component can have like a little
92:05 - memory
92:05 - right so it can have its own little
92:06 - memory so this one imagine this one had
92:08 - like a little counter in it
92:10 - right so it had like a number one and
92:12 - this one had like a number four and this
92:13 - one had like a number i don't know it
92:14 - could be three
92:15 - for example right and they had like a
92:17 - plus and minus button on each one
92:19 - now each one can have its own memory and
92:21 - we call this
92:22 - state okay so it's the state of the
92:25 - component
92:26 - so in this case it could be like um the
92:29 - state let me go ahead and admit
92:30 - we have the state of the component so
92:32 - here
92:34 - we can have like this one is also going
92:36 - to be the state okay
92:38 - so state
92:40 - yeah and then we can also that's how
92:43 - every sort of component
92:45 - has can keep track of what's going on so
92:47 - what you see here pretty much
92:49 - is something called state okay now
92:52 - let's go ahead and dive a bit more in so
92:53 - we can see we've got a button with a
92:55 - plus
92:56 - a button with a minus and then we've got
92:58 - a span tag with the number in
93:00 - so this bit here is referring to
93:04 - this bit over here yeah so you've got
93:07 - the plus
93:08 - you've got the button the minus and
93:10 - you've got the count in between it right
93:12 - now if you don't believe me i can go
93:13 - ahead and prove it so i say
93:15 - um told you i'm not lying
93:21 - um probably spotlighting wrong but
93:23 - anyway uh let's go
93:24 - refresh see i told you i'm not lying and
93:26 - it's there okay
93:28 - so we can see that that's pretty much
93:29 - where the code's running so honestly i
93:30 - would say when you're even going through
93:32 - your code yourself
93:33 - make sure you actually go ahead and
93:35 - literally do stuff like that because it
93:36 - will help you understand that okay
93:38 - that's where it's happening too you know
93:40 - um
93:42 - but what i would say is uh yeah so we
93:44 - have that and then we have set in
93:45 - current amounts at decrement amount
93:47 - so at this point we can leave ignore all
93:50 - this stuff what i'm interested in is
93:51 - this plus
93:52 - and minus right now the way redux works
93:56 - right is again remember we had those
93:58 - components
93:59 - so we had things like little components
94:01 - and then we had that little tree
94:02 - remember we had like the app.js
94:04 - at the top and we had a bunch of stuff
94:06 - underneath it where everything gets
94:07 - rendered
94:07 - and then we have the data layer right
94:10 - now remember when we had the login so
94:12 - imagine like we have the login
94:14 - uh the user gets like pulled in from the
94:16 - login component then we basically push
94:18 - that into the data layer now in order to
94:20 - do this
94:21 - we do something called we dispatch so we
94:24 - dispatch the user into the data layer
94:26 - right so this when we refer to this
94:30 - as a what we do is we dispatch an action
94:34 - right and then think of it as this
94:37 - entire
94:38 - data layer um oh nyam thank you very
94:41 - much for a donation
94:42 - because you are doing an amazing job
94:43 - request you please make a live trading
94:45 - website and like robin hood
94:46 - okay we could do that um thank you dude
94:49 - uh so
94:50 - we we can dispatch an action and this
94:53 - this data layer has to kind of like
94:56 - listen
94:57 - to what's going on it needs to like have
94:59 - some kind of idea as to like okay
95:01 - you just dispatched some kind of like
95:04 - set the user action so i need to know
95:07 - what to do with that so what we do is we
95:08 - call that reducer
95:10 - right and this basically has something
95:12 - called a reducer and what the reducer
95:13 - does
95:14 - is it just basically listens
95:19 - for actions right so this is the job of
95:22 - a reducer
95:24 - it just listens for actions so we have
95:26 - this dispatching of actions
95:28 - we have a reducer which listens to
95:30 - actions and then remember the final part
95:32 - of the flow is like say this component
95:34 - needs the
95:35 - user then we have a way of mapping it
95:38 - right so then we have the user itself so
95:40 - in our content in our example
95:42 - we had the count right so over
95:45 - here we're using some kind of count now
95:48 - you can see
95:49 - this is where that sort of this is where
95:51 - that mapping is happening so you see
95:53 - where we have this over here where it
95:56 - maps
95:57 - back into the source so remember here we
96:00 - we logged in
96:01 - we just like dispatched imagine like
96:02 - this was the counter we
96:04 - press plus or minus we're dispatching a
96:06 - new value
96:07 - for the counter so i'm going to go ahead
96:09 - and change this now to be counter so
96:11 - it's relevant to what we're talking
96:12 - about
96:12 - so counter and then here we're pulling
96:14 - from the counter
96:16 - right now to get the information we
96:19 - typically good practice is to use
96:21 - something called a selector
96:22 - right so we use a selector
96:26 - to pull this information from
96:29 - the store from the redux store okay
96:33 - now you don't have to use a selector you
96:35 - can you can literally just kind of
96:36 - grab it in a different way but selector
96:38 - is a good practice to use okay
96:40 - so you can see we've kind of got a few
96:42 - different things happening here we've
96:43 - got like this one
96:45 - this two and then this three right and
96:48 - this is kind of
96:50 - what forms the this is when i was saying
96:53 - remember i was talking about a pattern
96:54 - before
96:55 - and how once you know that pattern you
96:58 - can pretty much go ahead and use it
96:59 - regardless if you're doing react context
97:00 - api or regardless if you're doing
97:02 - redux right so in this case number one
97:05 - would be dispatch the action so let's go
97:07 - ahead and say that this had a plus
97:08 - this had a minus right so uh in our
97:11 - context
97:12 - we would talk about um boom
97:15 - in our in our case we have here the plus
97:18 - button
97:19 - is where we would dispatch right so
97:21 - let's go ahead and make it so imagine
97:22 - this was a plus button
97:23 - right you would basically increment the
97:26 - counter
97:27 - and that would push an action in and
97:29 - it'll be some kind of increment action
97:30 - so you see here
97:31 - we're dispatching and increment right
97:34 - so again don't worry too much about like
97:37 - oh that what what code is he using there
97:39 - just remember
97:40 - try and get a grasp of the the pattern
97:42 - that i'm talking about right
97:43 - so we have this so when we click that
97:46 - plus button
97:47 - right so i'm going to change the car
97:48 - seat so when we click that plus button
97:50 - it dispatches that that increment
97:52 - counter
97:52 - right so going back here oops going back
97:55 - here it dispatches the increment counter
97:57 - on click
97:58 - of that button right and then the same
98:00 - happens for minus but we dispatch
98:02 - a decrement uh action right now
98:05 - where does this get like listen to like
98:08 - and and and
98:09 - and we'll we'll touch on this in a
98:10 - second but
98:12 - we actually use the count value here so
98:14 - remember we dispatch some kind of count
98:16 - of
98:16 - and then we kind of pull it in here and
98:18 - obviously we've named it incorrectly
98:19 - here it should actually be count so
98:21 - let's go ahead and fix that so it's
98:22 - clear um
98:24 - and then we got this and then now you
98:27 - see here we've got the actual count
98:28 - itself and remember like i said
98:30 - we we use a selector to go ahead and get
98:34 - the account now again don't worry about
98:35 - the code
98:36 - just try and remember that this is the
98:37 - pattern that we're doing so we use a
98:38 - selector to pull the information
98:40 - from the redux store so don't worry
98:42 - about the middle step
98:43 - just just remember we dispatched an
98:45 - action it changed the redux store
98:47 - and then we use the selector to go ahead
98:48 - and pull it inside of
98:50 - wherever we need it and in this case
98:51 - we're just pulling it inside of that
98:53 - piece of text
98:54 - here so it's like here right now with
98:58 - that
98:58 - said we how does number two happen so
99:01 - where
99:01 - where does the the action translate to
99:04 - actually changing the data layer and
99:06 - that's
99:07 - that's where the reducer happens right
99:08 - so to jump into that we're going to go
99:11 - into
99:11 - features we're going to go into counter
99:14 - and we're going to basically just look
99:16 - at their code and we're going to see
99:17 - what's going on so
99:18 - it's counter slice and this is where the
99:21 - magic happens right
99:23 - so in redux the way it works is it's
99:26 - good practice to split up so imagine
99:29 - where imagine this data layer this huge
99:32 - little layer right
99:33 - uh what what it's good practice in relax
99:35 - to split the data layer up into
99:36 - something called slices
99:38 - right so we can split it up into sli so
99:40 - split
99:41 - uh layer into slices now what do we
99:44 - split into
99:45 - usually it's context specific which
99:47 - means that if we have
99:48 - information about a basket i would have
99:50 - a basket slice
99:52 - if we have information about the user i
99:54 - would have a user slice
99:55 - so imagine like this this is like an
99:57 - onion right and it has different layers
99:59 - of it
100:00 - so inside of that layer you can have
100:03 - information
100:03 - purely about the basket inside of
100:05 - another layer you can have information
100:06 - purely about the user
100:08 - okay but in our case we've just got one
100:10 - for the counter so it literally does
100:11 - nothing but
100:13 - has information regarded around the
100:15 - counter
100:16 - okay now um
100:20 - now with that what we're going to do is
100:23 - this is again
100:24 - this is like boilerplate code so it's
100:26 - not in this case
100:27 - we don't want to we don't really care
100:29 - too much about going ahead and
100:31 - and uh this this this sort of coaching
100:34 - call isn't about sort of
100:35 - diving into exactly the line of code
100:37 - it's about understanding how to use the
100:39 - code from the template and then reuse it
100:41 - as we need it and then you understand
100:42 - the pattern
100:44 - and once you understand the pattern it's
100:45 - very easy to go ahead and do things
100:47 - as custom as you need it right so this
100:50 - is what we're going to name the slice
100:52 - so this is counter the initial value so
100:54 - imagine that data layer that slice
100:56 - in the in the data layer that needs an
100:58 - initial value so in our case it's going
101:00 - to have a
101:00 - value of zero right so we're giving the
101:03 - counter
101:04 - a value of zero um and then what we're
101:08 - going to say
101:09 - is in this case i wouldn't i mean i
101:11 - personally wouldn't call it
101:13 - value here so i would say
101:16 - i'm going to change this i would call it
101:18 - count i would this is a bad example they
101:20 - shouldn't
101:20 - do this i don't even think that's a good
101:23 - value i would call it count
101:25 - right so in our case we have an initial
101:27 - state and the count is zero
101:28 - right so we're talking about this count
101:29 - so then it needs some kind of
101:31 - beginning value in the upload so we're
101:33 - going to give it zero
101:34 - now this is where part two happens
101:37 - reducer
101:38 - so remember we dispatch an action when
101:39 - we click that button so
101:41 - part two is where we listen for the
101:43 - action okay
101:44 - so here we have different types of
101:47 - actions
101:47 - so we have one action called increment
101:49 - we have one action called decrement
101:51 - and then we have that special one
101:52 - increment by a certain amount
101:54 - right so the increment by a certain
101:56 - amount is actually where this
101:58 - magic happens so where you can pretty
102:01 - much go ahead and pass it a value
102:03 - and it goes ahead and modifies the store
102:04 - based on that right
102:06 - now let's go back to our code uh
102:09 - let's give it one sec god it really
102:12 - drives you out when you're talking
102:15 - okay we're back um so we have like three
102:18 - actions right we have increment we have
102:20 - decrement we have increment by amount
102:22 - so you can see each one all it takes as
102:25 - this sort of argument
102:26 - is it just needs to know what the
102:28 - current state is so which is why
102:30 - this is called an arrow function it just
102:31 - takes the state now again the state
102:34 - is not the global state it's the select
102:36 - a state for that slice
102:39 - so in this case we have the um the
102:41 - counter slice right so we have the
102:43 - counter
102:44 - slice right so in this case
102:47 - the counter and then we're creating a
102:49 - size so it's called the counter slice
102:50 - okay and then we give it a name which
102:53 - makes sense so in this case counter
102:55 - right so
102:56 - um right so now what we're going to do
102:59 - is
103:00 - here we pretty much have these these
103:02 - three actions
103:03 - and then we export them so that way we
103:04 - can use them outside of the app
103:06 - right so here you can see counter
103:07 - slice.actions and again
103:10 - uh like even here for example this is a
103:12 - clear example of where
103:14 - it doesn't make sense because we don't
103:16 - see dot actions anywhere
103:17 - but this is something where that redux
103:19 - there's something that is called the
103:21 - readouts toolkit
103:22 - and it makes our job a little bit easier
103:24 - because it basically goes ahead and
103:26 - they give us access to things like the
103:28 - actions right so we just define it in
103:29 - here
103:30 - and then they pretty much make it in
103:31 - this very neat format so what we do is
103:33 - we go ahead and export it when we need
103:35 - it
103:36 - and then you can ignore this one for now
103:38 - the increment async so forget about that
103:39 - for now
103:40 - but then what we do is so i want to show
103:43 - you guys so when i click this
103:45 - it's actually dispatching an event
103:47 - called increment
103:48 - right now if you don't believe me i'm
103:50 - going to actually go ahead and show you
103:51 - the exact
103:53 - where it does that so what we can do is
103:55 - we can aim we can go ahead and right
103:57 - click and click inspect
103:59 - and then what we can do is we can go to
104:00 - the this top thing here
104:02 - click that and click on redux you need
104:04 - to install something called the redux
104:06 - devtools
104:07 - right the redux dev tools are going to
104:09 - be really handy for you guys so it's
104:11 - this right here redox dev tools
104:14 - yeah so go ahead and install that and
104:16 - that's going to make your life a lot
104:18 - easier when it comes to debugging redux
104:19 - and they're very powerful tools as well
104:22 - so now to prove to you so inside the
104:24 - code
104:25 - we had inside accountant.js when we
104:27 - click the button so on click
104:29 - it says dispatch right and look and
104:31 - hooks
104:32 - anything with use dispatch use state use
104:36 - whatever it is it's called a react hook
104:38 - and they only exist in the functional
104:39 - component not class based
104:41 - we're going to touch on that somewhere
104:42 - else right
104:43 - [Music]
104:45 - but um so now what we're going to do is
104:49 - uh here we we we have this dispatch
104:52 - right so
104:53 - again don't worry too much about what's
104:55 - going on here i'm just trying
104:56 - you just want to go ahead and
105:00 - practice the use case of it and now
105:02 - trust me
105:03 - i know it's it's a bit kind of like oh
105:06 - what's going on here
105:07 - right i know that it's kind of like i
105:09 - don't fully get it
105:10 - but the way that you're gonna get it is
105:12 - play with it so
105:13 - literally when you watch this video back
105:16 - play
105:17 - with this and see for yourself like get
105:19 - it working to
105:20 - as you need to get it working and then
105:22 - pretty much go ahead and it will make
105:23 - sense
105:24 - like that but assuming that you're gonna
105:26 - get it in one go and if you don't get it
105:28 - by watching this video
105:29 - it's just the wrong way of thinking
105:31 - right it doesn't really work like that
105:33 - right so here what we do is when we
105:35 - click that plus button we're going to
105:36 - dispatch an increment action now to
105:37 - prove that it does that
105:39 - i'm going to click plus and look counter
105:41 - increment
105:42 - so it just said inside the counter piece
105:44 - of state and increment action was f
105:46 - uh fired off and then you can see the
105:49 - really nice thing about the dev tools
105:51 - is actually shows you the counter piece
105:54 - of stay
105:55 - and the count changed from zero to one
105:57 - and if i click it again
105:58 - and i click this one you see it changed
106:00 - from one to two
106:03 - and then you can see it change from two
106:04 - to three now the awesome thing about
106:05 - devtools is you can go back in time so
106:07 - if i click this one and click jump
106:08 - it actually rewinds the app so you see i
106:11 - can actually go ahead and rewind the app
106:13 - to different points
106:14 - and you can pretty much debug it in this
106:16 - way which is really awesome right
106:18 - now so so it dispatches right so
106:21 - remember we talked about
106:23 - it dispatches the action and the reducer
106:25 - listen so now let's take a look at the
106:26 - reducer
106:27 - so we just dispatched the increment
106:28 - action and then here
106:30 - rem all it's doing is saying okay now go
106:33 - to the state
106:34 - go to the count and get
106:37 - so state.com plus equals one
106:41 - so basically go ahead and add one to it
106:42 - so if i change this to like two
106:44 - for example now every time i dispatch
106:48 - that increment action it should add two
106:52 - right and now there is something that we
106:55 - need to know about inside of
106:56 - so you would have seen me in react
106:58 - context api or if you
106:59 - do any of the clones you would have seen
107:01 - me never ever
107:02 - manipulate things like this directly
107:05 - right and that's what this big comment
107:06 - here is for because what we try to do
107:09 - and this is something which you may go
107:11 - over your head right now but it will
107:12 - make sense at some point in the future
107:15 - we do something called um we don't like
107:17 - to mutate
107:19 - the state directly right we don't we
107:21 - never like to do this we never like to
107:22 - do like constant name equals
107:24 - um sunny or something like this um or i
107:27 - mean even if you do like that
107:29 - and then you we don't ever like to do
107:30 - like this
107:33 - right because this is called like it
107:35 - goes against immutability
107:37 - and basically immutability just means
107:39 - that you shouldn't really go ahead and
107:42 - um you shouldn't really have to go ahead
107:44 - and um
107:45 - and change stuff like this especially
107:47 - when it comes to your state your state
107:49 - should be like
107:50 - every change that happens in your state
107:51 - should be like a copy
107:53 - so it should be like every time a change
107:55 - happens
107:57 - and to prove that the reason why it
107:59 - works is because look every time a
108:01 - change happens it basically copies it
108:03 - and creates a whole new piece of like a
108:05 - whole new slice of state
108:07 - and replaces it with that slice of state
108:09 - and that's why we can go back in time
108:11 - inside of our app right that's the only
108:13 - reason why i can go back in time is
108:14 - because if we have those copies
108:16 - right and that's really really good
108:18 - practice of and you might be thinking
108:19 - hang on but
108:20 - it doesn't make sense because it's not
108:22 - going to use up a lot of memory and
108:23 - stuff like it doesn't they do it in a
108:24 - very clever way
108:26 - um so here what we say is change the
108:28 - state
108:30 - by plus equals one and then decrement as
108:32 - you can imagine it's just doing the same
108:34 - thing but it's doing negative
108:35 - like minus equal one and then increment
108:37 - by amount
108:38 - takes the state and it also takes
108:40 - something called an action
108:42 - right now this is the cool part now what
108:44 - we can do is we can actually combine
108:46 - logic inside of our app and what we can
108:48 - say is okay so the state
108:50 - uh dot count plus or equal to the
108:53 - action.payload now
108:55 - where does this get fired off so let's
108:56 - see where increment by amount gets filed
108:58 - so let's go to our counter
108:59 - and we can see here is where add amount
109:01 - actually gets fired off so if i change
109:02 - this to like 20
109:04 - 1000 or something like that you see it
109:05 - actually gets added there so
109:07 - let's go ahead and find it so down here
109:09 - we can see increment by amount
109:12 - right and then what they're doing is
109:13 - they're passing a number in
109:15 - and they're just doing some fancy stuff
109:16 - here says they're saying convert it to a
109:18 - number
109:19 - the increment amount and the incorrect
109:21 - amount is just simply an input field so
109:23 - this num this box right here
109:25 - so this is pretty much just like one or
109:27 - something like that
109:28 - and then it's going to convert it to a
109:29 - number and just add it there
109:32 - and then what we're going to say is
109:33 - dispatch increment by amount and then
109:35 - you see
109:36 - like these ones right we don't even
109:38 - though it takes state
109:39 - we don't pass the state in so in relax
109:41 - we don't do that right we just
109:43 - it's very clever it knows what it's
109:44 - doing right but when we have
109:46 - something called a payload what you can
109:48 - do is you can just pass the payload here
109:50 - so for example in this case if i was to
109:53 - change this to increment by amount six
109:56 - right now it's going to ignore whatever
109:57 - value i put inside of here and she's
109:59 - going to
109:59 - add on six right and you can see if i
110:02 - click increment by amount if i check the
110:04 - action that got dispatched
110:05 - it dispatched an increment by amount and
110:07 - the payload was six
110:09 - right so if i go back now and check
110:12 - inside of counter slice
110:13 - you see because state remember we don't
110:15 - pass the state redux does some clever
110:17 - stuff on the back end so it knows
110:18 - like what the state is and things like
110:20 - that but the action
110:22 - we have something called the payload and
110:24 - that is what we just passed in
110:26 - as a parameter here okay so we've got
110:28 - number increment by amount like that
110:30 - now what i'm going to do is i'm actually
110:32 - going to go ahead and create
110:34 - an entire new slice of state and i'm
110:36 - basically going to have something
110:37 - else so we can pretty much see this from
110:39 - the ground up so
110:40 - inside of app.js and on top of
110:42 - everything i'm going to have
110:46 - h2 saying this is a
110:50 - this is my name right and then
110:54 - let's go have a look our code so this is
110:56 - my name
110:57 - and then i'm going to have an input
110:59 - field underneath it so i'm going to have
111:00 - an input
111:01 - type is text and it's going to have some
111:03 - kind of input so this is my name so
111:05 - i'm gonna the goal here is to say sunny
111:08 - hit enter and then i should see sunny
111:10 - pop up here when i click the button
111:12 - right so i need to have some kind of
111:13 - button here
111:15 - and this button will basically just go
111:16 - ahead and say update
111:18 - name in the redux store
111:22 - okay now how do we go ahead and create a
111:24 - slice of state
111:26 - wire up the button use like all the
111:28 - things we need to use to keep track of
111:30 - what i'm typing in and stuff like that
111:32 - and do all that so that's what i'm going
111:33 - to show you now right and this will
111:34 - actually go ahead and show you how to
111:36 - create an entire piece of state just
111:37 - like the counter was
111:39 - and then we're going to basically change
111:40 - it to do what we need to do here
111:42 - so the first thing we need to do is go
111:44 - ahead and map our input so here
111:47 - every time i type in this field i need
111:49 - to know what i'm typing in so
111:50 - the way we do it is we we go ahead and
111:53 - introduce something called state so
111:55 - const and here i'm going to say the
111:57 - input so this is how you write
111:59 - a variable in react think of it like
112:01 - that you say input
112:02 - and then the convention is you say set
112:04 - whatever the name must have set input
112:06 - you say use state
112:09 - and then this has an initial value of
112:11 - blank because we typically don't have
112:13 - anything written in here so the initial
112:15 - value is blank
112:16 - and then we have to import it from react
112:18 - so this should have just gone
112:19 - here actually it didn't import it
112:21 - correctly but
112:24 - that's a clean way of doing it and now
112:26 - what we do is
112:27 - this is something which you would have
112:28 - picked up on if you've seen the clones
112:30 - but if you haven't seen the clones i
112:32 - recommend you go back re-watch them and
112:34 - and this will make a lot of sense but
112:36 - inside the input what you want to do is
112:37 - you say value
112:38 - of the input is our input variable right
112:41 - now notice what happens now if i go
112:43 - ahead and type in so i'm banging on the
112:45 - keyboard but nothing's changing over
112:46 - here
112:47 - right nothing changes over here that's
112:49 - because
112:50 - we need to actually keep track of what's
112:52 - going on so we say on change
112:53 - every time the user types in it fires
112:56 - off an event
112:57 - so this is an arrow function and then
112:59 - what we're going to say here
113:01 - is yeah we say exactly we say set input
113:04 - and we say event dot target dot value
113:07 - and what this is saying is
113:08 - set the input to whatever the the user
113:10 - is typing in so event.target.value is
113:12 - just
113:13 - a way of saying get the value of what
113:14 - they typed in and then what this does is
113:17 - every time i type in it goes ahead and
113:19 - set input is how we modify our value
113:21 - in in the sort of the react way and then
113:24 - this will cause the input to change
113:25 - which means it re-renders and
113:27 - it shows you so now if i say sunny so
113:29 - you see it starts to work
113:30 - right because it's actually mapping to
113:32 - the react state right
113:34 - now the next bit so i know when i click
113:37 - this now
113:39 - the goal that we want is when i click it
113:41 - it should say sunny
113:42 - and then that would like be our test
113:45 - case of saying okay sunny was
113:46 - successfully added to the store
113:48 - and you might be wondering yeah but
113:49 - something this isn't how real apps work
113:51 - no
113:51 - trust me just understand fundamentals to
113:54 - this level
113:55 - and then really get the pattern kind of
113:57 - dialed in literally do it on the most
113:59 - silly basic examples
114:00 - but get that repetition ingrained and
114:03 - then you'll start to know the pattern
114:05 - and then it re then you start to build
114:06 - on it right but
114:08 - what we're going to do now is we have a
114:11 - folder here called counters right
114:13 - so what i'm going to do is i'm going to
114:14 - create another folder called um
114:16 - is it is it count is there another photo
114:18 - here no
114:20 - it's on the photo so here i'm going to
114:22 - say
114:25 - no so it's not actually okay so here i'm
114:27 - just going to create another piece of
114:28 - state and i'm going to call this one
114:30 - um let's call this one the
114:34 - the user because there's a user slice so
114:37 - everything about the user right so we're
114:38 - going to call it user
114:40 - and then what i'm going to do is i'm
114:41 - literally going to copy
114:43 - whatever was inside no sorry this
114:45 - shouldn't be um
114:47 - i'm going to call this one the user
114:48 - slice sorry
114:50 - this is going to be the user slice and
114:51 - i'm going to one way is i'm going to
114:52 - grab all of the code from counter slice
114:54 - and i'm going to paste it here
114:56 - because i'm assuming that i'm a complete
114:58 - beginner and i have no idea how to
115:00 - implement redux i'm just copying the
115:01 - template
115:02 - and i'm figuring it out as i go so this
115:04 - is a good way of learning
115:06 - so what i would say at this point go
115:08 - here you want to change this to be
115:10 - user size so if we click command d it
115:13 - does multitab and we've got counter
115:15 - slice here count the slice here
115:16 - and count the slices we're going to
115:18 - change this to be user
115:19 - slice and you see it changed in all
115:21 - three places right
115:23 - then i'm going to go here and change the
115:24 - name of that piece of state to be
115:26 - user now in here we're going to have an
115:30 - initial state for that that for that
115:32 - user and we're going to basically say
115:33 - the user
115:34 - by default is going to be uh no so it's
115:37 - going to be nobody
115:38 - right um and then what we're going to do
115:41 - is we don't need
115:42 - a decrement we don't need an increment
115:44 - by amount we don't really care about any
115:45 - of that
115:46 - in this case i want an action called
115:49 - let's just call it set user so we're
115:52 - gonna have a new action
115:53 - called set user right and this one's
115:55 - gonna take a
115:57 - um a uh so let's see how they did it
116:00 - before they took an action
116:02 - so here we're gonna go ahead and this
116:04 - will take an action
116:05 - okay so have this this and they'll take
116:07 - an action now remember the action took a
116:09 - payload last time so you could pass
116:11 - something along with it and in the
116:12 - previous example it was a number
116:14 - in this example we're going to pass a
116:16 - string which is going to be the user's
116:18 - name
116:19 - so here i'm going to say we're going to
116:22 - get rid of all of this and get rid of
116:23 - all this stuff i'm going to say
116:25 - when you get a set user action so for
116:27 - example when this comes in when we get a
116:30 - set user action
116:31 - which it dispatches in action we're
116:32 - going to say the reducer listens for the
116:34 - action so this is where we listen for it
116:36 - so when you get that set user action
116:39 - we're going to say go ahead and
116:41 - state.user
116:43 - should now equal so state.user should
116:47 - now
116:47 - go ahead and equal the action dot
116:51 - payload
116:52 - right so we're just going to use this as
116:53 - a basic example
116:55 - and now what we can do is i need to go
116:58 - ahead and change this
117:00 - to be exported so we don't have this
117:02 - stuff anymore and it's no longer called
117:03 - increment it's called set user
117:05 - so what we've done is we created a
117:07 - function that we can go ahead and use
117:08 - outside
117:09 - so we can listen to uh to when this
117:12 - action gets dispatched remember we need
117:13 - to listen to it
117:15 - and then we need to export it so and
117:17 - again we don't need we don't need this
117:19 - increment async and here remember the
117:22 - selector
117:23 - is the final part where we actually pull
117:25 - the value back in so we need to create a
117:27 - selector here so i'm going to create one
117:28 - go ahead and get rid of this comment
117:29 - here and you can see our code is
117:32 - actually pretty simple
117:33 - it's actually pretty simple i know that
117:35 - understanding is a bit complicated but
117:37 - the code itself is actually super clean
117:38 - right
117:39 - so this is our selector and here we say
117:41 - select user i'm going to say
117:43 - and this goes ahead and gets a state but
117:44 - instead of doing state dot counter
117:46 - because it's not the counter slice
117:48 - anymore and the reason why it was called
117:50 - counter before
117:51 - is because the name here was counter
117:53 - right
117:54 - so here it's user so it's going to be
117:56 - state dot user
117:59 - dot or in this case it's going to be the
118:01 - user right but in this case what i'm
118:02 - going to do is i'm going to change this
118:03 - to be name
118:05 - yeah so inside the user slice we're
118:06 - going to have a name variable because
118:08 - that's kind of confusing
118:09 - and then here we'll have set name and
118:12 - then here we'll have set name that kind
118:13 - of makes
118:13 - a bit more sense otherwise it's going to
118:15 - it's going to be confusing for you guys
118:16 - so we're going to say select
118:18 - name and then here it says
118:20 - state.user.name
118:22 - right now we've actually prepared
118:25 - everything
118:26 - so what we can do is we can go into app
118:30 - and then you see we actually have this
118:32 - store.js file
118:33 - and we didn't look at this one before
118:35 - but you see what the store.js file does
118:38 - is it's basically where we combine all
118:40 - of those different slices which make up
118:42 - this
118:43 - thing right here right this this layer
118:46 - this data layer
118:47 - so here is where we basically pulled in
118:49 - the counter slice
118:50 - right so what i'm going to do is i'm
118:52 - just choosing to copy this i'm going to
118:53 - change it to
118:54 - instead of count and reduce i'm going to
118:55 - say user reducer and we're going to pull
118:57 - it from the user
118:58 - slice right and here
119:02 - oh is inside of her is inside of a
119:04 - camera
119:05 - folder okay i'm not going to change that
119:07 - now but we shouldn't be inside of it we
119:08 - can't afford it it should be inside of
119:09 - its own folder
119:10 - um but what we're going to do now
119:13 - is we're going to say
119:17 - we're going to go ahead and add a user
119:19 - slice we're going to say the user slice
119:21 - should use the user reducer and that's
119:24 - what we need to do to connect it so now
119:26 - this doesn't have one layer in it it has
119:28 - two slices
119:29 - one for the counter and one for the user
119:32 - right
119:33 - and inside of counter size we handle all
119:36 - the stuff which could
119:36 - potentially change the counter inside
119:38 - the user slice we have all the stuff
119:40 - which could potentially change the name
119:42 - now if any of you guys have done the
119:43 - builds you would
119:45 - at this point start to see where there's
119:47 - slightly some benefit to doing it this
119:49 - way because you would see that the codes
119:50 - kind of split up based on the different
119:52 - contexts
119:53 - right it's split up based on like um and
119:55 - i see like cyrus like kind of it was
119:57 - like a tick moment there he was like
119:58 - okay that makes a big sense
120:00 - yeah because like it splits up based on
120:02 - like based on the context and it kind of
120:04 - makes your code a bit more simple to
120:05 - understand right
120:06 - so at this point we have set name and
120:09 - what we're going to do is we're going to
120:10 - go to
120:10 - app.js not app.js yeah app.js
120:14 - and what i want to do is i'm going to go
120:16 - into counter.js and see how they
120:17 - actually used everything
120:18 - because i want to use all the stuff as
120:20 - well so i'm going to pull my
120:22 - app.js here i'm going to put it aside
120:26 - maybe so we can see now
120:27 - so on my left i've got counter the js
120:30 - this is where we have all the sort of
120:32 - counter logic here and i'm basically got
120:35 - an app.js i've got this is my name the
120:37 - input and that button
120:38 - where we want that test right the angle
120:40 - is i'm going to have a h2 tag
120:42 - or underneath it which is basically
120:43 - going to say
120:45 - the name if there is one okay so here
120:48 - if i do h1 the goal is to have like a
120:51 - name
120:52 - pop up here right so in this case it's
120:54 - going to bug out it's like oh there's no
120:56 - name
120:57 - which is understandable right we didn't
120:59 - have a name so what we need to do is we
121:01 - need to do a few different imports first
121:03 - now i'm going to first go ahead and do
121:06 - import
121:07 - and i'm going to import the selector so
121:10 - that way i can actually use the user so
121:11 - i'm going to say select user or select
121:13 - name sorry it was select name
121:15 - from and this is from the
121:18 - user slice so this is actually from user
121:24 - uh sorry this one should be inside of um
121:27 - features forward slash counter forward
121:30 - slash
121:30 - user slice okay so select name
121:35 - and now what we can do is we can use
121:37 - this
121:38 - so we can use this line of code so we
121:41 - can say
121:41 - cons oh god what we're done yeah
121:45 - copy this line and i can change it for
121:47 - as we need it so i need to import
121:49 - use selector so i've imported it from
121:52 - react redux
121:54 - right and then instead of this it's
121:56 - going to be the
121:57 - name and we're going to use that name
122:00 - selector to go ahead and grab the value
122:02 - so what this does now is it should
122:04 - actually go ahead and get that name for
122:06 - us and it puts inside this variable
122:08 - and what i can do is down here i can
122:10 - have a big h1 let's just say h1 and the
122:12 - same name
122:13 - so if i do this now there's no error
122:16 - which is actually a good sign
122:18 - right so if i go ahead and look at the
122:20 - state right now you see i've got two
122:22 - slices in the state
122:23 - right so inside that state remember we
122:25 - set up two sites where the counter
122:27 - with the name and the user which was the
122:29 - initial value was no
122:31 - now to show you that this is actually
122:32 - correct and it's not lying and it's not
122:34 - sort of
122:34 - like i'm not faking this let's go back
122:36 - to our
122:37 - user slice and let's change the initial
122:39 - value to
122:41 - um let's go ahead and say sunny like
122:44 - this right
122:45 - now the initial value is sunny so you
122:47 - see it's actually pulling it from our
122:49 - on from our our um our reducer right
122:52 - so that's going to basically go ahead
122:55 - and and
122:56 - it proves that it's working at this
122:57 - point right so
123:00 - what we're going to do now is we're
123:01 - going to map it so we want this to be be
123:03 - node to begin with
123:04 - but when we hit that button i want to
123:06 - set the name based on whatever the
123:08 - user's typed in
123:09 - okay so that's the next part and you can
123:11 - see that like
123:12 - this is what i'm trying to show you guys
123:13 - here is that this is kind of the
123:15 - approach that you're gonna need to take
123:16 - when you're sort of breaking down a
123:17 - problem so
123:18 - it might not always be a case of um
123:21 - like very clear thinking and you you're
123:23 - probably watching at this point and be
123:24 - like oh like i have no idea how the
123:26 - hell i'm gonna actually do that in
123:27 - production or i don't know how i'm going
123:29 - to actually use that
123:30 - trust me just break it down practice
123:32 - with these kind of examples
123:34 - and once you get that pattern going
123:36 - right literally build
123:38 - silly apps like to do apps and things
123:40 - like that with it right like get things
123:42 - like that built
123:43 - and trust me like that the confidence
123:45 - comes up and you start to solve more
123:47 - complicated problems
123:48 - and we can get more kind of fine-grained
123:50 - into that sort of stuff but
123:52 - at this point what we're going to do is
123:54 - we're going to go ahead and you are like
123:56 - setting up
123:56 - boilerplates and redux yeah so
124:00 - a lot of people hate setting up the
124:01 - boilerplate including me i hated setting
124:03 - up the boilerplate but
124:04 - if you go ahead and use this template
124:06 - way it actually sets it up
124:08 - with the latest sort of hooks and stuff
124:11 - like that
124:12 - um so this is if you've used redux
124:14 - before anyone in the comments or
124:15 - anything that has used redux before
124:17 - you notice this looks a bit different
124:19 - because this is like the sort of cutting
124:20 - edge frontline stuff this is where
124:22 - they're using hooks they're using all
124:23 - the modern
124:24 - stuff so yeah so what we're going to do
124:27 - now
124:28 - is i need to get that action right so
124:30 - i'm going to go here and i'm also going
124:31 - to import
124:32 - not just select name i'm going to import
124:35 - the set
124:36 - names remember inside a user slice we
124:38 - had this
124:39 - right here so we had the set name so i'm
124:42 - going to go here and i'm going to import
124:43 - that
124:44 - into my code and what we can do is
124:47 - remember in order to be able to push
124:49 - something into
124:50 - the data layer i need something called a
124:52 - dispatch dispatch is basically how you
124:54 - dispatch it inside the data
124:56 - so to get the dispatch we just use this
124:58 - nice little command here
125:00 - so we say cons dispatch equals
125:03 - use dispatch i need to just import that
125:05 - from react redux
125:06 - and now we have it so now i have that
125:09 - gun that allows us to shoot values into
125:10 - the data layer
125:12 - and then what i can say is when i click
125:15 - that button
125:16 - so let's go ahead and say on click right
125:20 - i wanna so let's just let's create a
125:22 - function called handle click
125:23 - right so everything kind of happens here
125:25 - so i'm gonna create a quick function up
125:26 - here saying handle click
125:28 - and this is basically gonna it's not
125:30 - gonna take an event and basically when
125:32 - we click that button
125:33 - let's just test it and say uh you
125:35 - clicked me so just see if it actually
125:37 - comes through
125:38 - right so that's the first thing i'll do
125:40 - so i'll go here console
125:42 - click it and it says you clicked me
125:44 - right
125:45 - now i want to test it and see if it
125:47 - keeps track of if our state over
125:49 - previously if i click it and say you
125:51 - clicked me and then it should say the
125:53 - name so let's go ahead and do this we
125:54 - say
125:55 - you clicked me input because the input
125:57 - is what we mapped
125:58 - that that entry field to so if i save
126:01 - that
126:01 - go back and here i say sunny
126:04 - update name so you see you clicked me
126:06 - sunny and if i change this to like
126:08 - um priyanshu say it says update name
126:11 - you click me pre-entry right so you see
126:13 - like it changes based on this value now
126:16 - now that's cool but we want to push that
126:18 - value into the data layer
126:20 - and then it should re-render and show it
126:21 - big and nice here
126:23 - now to do that it's actually pretty
126:25 - simple because we've set everything up
126:27 - now
126:27 - we go ahead and we just say dispatch
126:30 - because we want to dispatch an action
126:32 - so literally we're at this point now so
126:34 - when i click that button on the dispatch
126:36 - in action and i want to dispatch the
126:38 - set name action and i want to pass
126:41 - in a payload right and the payload i
126:44 - want to pass in
126:45 - is going to be the input so whatever
126:48 - their users typed in
126:50 - right so let's get rid of the console
126:51 - log and now what should happen is
126:53 - this dispatches the set action with the
126:56 - input
126:56 - right this goes ahead and gets picked up
126:59 - inside the reducer
127:00 - so the reducer goes whoa whoa you just
127:02 - shot an action so it's gonna go into
127:04 - step one we're gonna dispatch the action
127:05 - step two the reducer is gonna hear
127:07 - it and it's gonna say okay change the
127:10 - state dot name
127:11 - to whatever you passed in so in this
127:13 - case we pass the input in
127:16 - then the selector is used to
127:19 - pull the information back into wherever
127:21 - we need it
127:22 - so we we pull it in here so use selector
127:26 - and you can see we render it here which
127:27 - means react is very clever it will
127:29 - re-render
127:30 - where it's need where it needs to
127:31 - re-render so at this point what we can
127:33 - do
127:33 - is we can go ahead and test it
127:37 - so now if i go ahead and say sunny
127:40 - update name oh nice if i go ahead and
127:43 - say like
127:44 - alex boom
127:47 - and this is fully getting updated in the
127:49 - react store uh redux store right now so
127:51 - if i go to redux
127:52 - i can see look it's shooting off a set
127:54 - name action
127:55 - so let's go ahead and shoot another one
127:57 - off to prove it let's just go ahead and
127:59 - say
127:59 - um it's going to say hardeep and i'm
128:02 - going to update
128:03 - name in the redux store so this one
128:06 - right here right
128:07 - so let's look at the action and it says
128:08 - type was user it was inside the user
128:11 - slice
128:12 - it was a set name action so you see they
128:15 - even have really nice naming here
128:17 - and the payload was hardy right now
128:20 - the reducer picked out and if we click
128:22 - on the diff it shows what changed inside
128:24 - the state which is
128:25 - awesome so it showed that it was alex
128:27 - and it changed too hardy
128:29 - right and then what's really cool is
128:31 - that i can actually go back in time and
128:33 - i can change it back to those values
128:35 - right which is really nice um now that's
128:38 - literally that's in a nutshell like
128:43 - i know it seemed like a lot right but
128:45 - when you actually break this down
128:46 - once you know that pattern right once
128:49 - you know that
128:50 - pattern and what i'm going to do is i'm
128:51 - going to show you guys uh if i type in
128:53 - redux right here
128:57 - give me two seconds two seconds and i'll
128:59 - answer a question
129:00 - so you see here guys where we have the
129:05 - this right here yeah where we have
129:08 - this where it says redux right oh come
129:10 - on
129:13 - yeah redux right here
129:16 - yeah so think about what's happening
129:18 - here so look
129:20 - just like i said before so this is the
129:22 - diagram so view is the component
129:24 - store is what gets changed and then you
129:27 - have an action which gets fired off
129:28 - so an action which gets fired up i
129:30 - prefer my diagram i think it's a little
129:31 - better than that diagram
129:32 - um so we have the action gets fired off
129:36 - uh that's step one step two a reducer
129:39 - picks up on it
129:40 - right so reducers kind of sitting there
129:42 - inside there they're listening
129:44 - right step three it manipulates the
129:46 - store in some way so in this case
129:48 - uh in our sort of uh in our situation
129:52 - it manipulated the store at this point
129:53 - so remember state
129:55 - is state is the same as store in this
129:57 - case it should stores an easier way to
129:59 - think of it
130:00 - um and then this is where the
130:02 - manipulation happens
130:03 - and then the selector is the final part
130:06 - where it connects back so you remember
130:09 - you kind of have this cycle right here
130:10 - right
130:11 - where basically goes round and round and
130:13 - round like and it kind of keeps on
130:14 - happening
130:15 - um so if we go back and see so we
130:18 - subscribe
130:18 - and that the subscribe is the selector
130:21 - and then you see we're back to square
130:22 - one
130:22 - dispatch and you just have this is the
130:25 - pattern i'm talking about
130:26 - right now you can learn this pattern in
130:28 - the clones so if you're literally
130:30 - looking
130:30 - uh thank you wifey mohammed
130:33 - he says you're doing a great job and you
130:35 - donated two dollars thank you dude um
130:37 - so if you learn this pattern this is the
130:41 - pattern
130:41 - which makes that which will be the
130:43 - difference between you landing
130:45 - a job potentially and not landing the
130:47 - job and
130:48 - i'm kidding you not that this is the
130:49 - pattern that she's gonna actually do
130:50 - that so this
130:51 - this is super valuable to know redux
130:55 - right this pattern right here um why
130:58 - is it so valuable is because you can
131:00 - pretty much scale up an app
131:01 - pretty much with this with this um uh
131:04 - with this
131:04 - uh sort of foundation underneath it so
131:07 - once you have this in place
131:09 - i know it looked like we did a lot but
131:11 - if you get really fast to this honestly
131:13 - look at this
131:13 - this is not actually that much code and
131:15 - it's very scalable
131:17 - right and the best part is like you have
131:20 - a very simple store
131:21 - where pretty much this is where you
131:22 - combine all the see that it just says
131:24 - configure store
131:25 - the reducer we're just passing this
131:27 - stuff right now redux is a lot more
131:29 - powerful than just this
131:31 - you can do things like middleware which
131:33 - means that every single time
131:35 - uh something goes in so imagine imagine
131:38 - i went ahead and
131:40 - middleware in redux is something really
131:42 - powerful for example every time i
131:43 - dispatch an action
131:44 - i could put a point like a process here
131:47 - which says
131:48 - only do the next step if they're
131:51 - authenticated
131:52 - for example so you can do stuff like
131:54 - that in redux
131:55 - right so it's very powerful you
131:56 - literally can go into every in very
131:58 - intricate
131:58 - parts of it and it's also very good for
132:00 - network requests async
132:02 - stuff like that now what i want all of
132:05 - you to do
132:06 - is go ahead and actually give this a try
132:09 - okay so like i want you guys to
132:11 - to to go ahead and like afterwards in
132:14 - your own time
132:15 - in your own space like go ahead and give
132:17 - this a try this is going to give you
132:18 - so many different skills by doing this
132:20 - like this run through what we did today
132:22 - because
132:23 - what it shows you is is we used we used
132:25 - react state
132:26 - here to keep track of what the user was
132:28 - typing in
132:29 - we used the redux store to go ahead and
132:32 - do the entire
132:34 - uh dispatching in action right we
132:36 - dispatched an action into a store
132:38 - we created a new reducer we created a
132:40 - new slice of state
132:41 - right we now understand somewhat more of
132:44 - the concept of what slices are inside of
132:46 - a
132:47 - inside of this redux layer and the whole
132:49 - purpose of slices is so that you don't
132:51 - have all the code in one place
132:53 - because as your code base gets bigger
132:56 - like i don't want to see
132:57 - every single action in one place i just
132:59 - want to see all the actions for a user
133:01 - all the actions for the counter or the
133:03 - actions for the basket
133:05 - right and if you add a new feature on
133:07 - think about it if you have a team of 100
133:09 - developers but everything is nicely
133:10 - divided up
133:12 - can you see how easy it would be to work
133:13 - on the same stuff at the same time
133:15 - right or like all on different areas
133:16 - because you your code is structured in
133:18 - such a way
133:19 - that it allows you to sort of have that
133:21 - sort of working uh harmony between
133:23 - each other so this is actually a really
133:27 - really good um
133:29 - sort of exercise for every single person
133:31 - to go ahead and try
133:32 - i recommend that you all go ahead and
133:34 - give this a try and pretty much
133:36 - and you're going to run into bugs you're
133:38 - going to run into problems
133:39 - um and that's why the learning sort of
133:42 - comes in right that's where you sort of
133:43 - pause the video you dive in you sort of
133:45 - you you research about redux and that
133:47 - this pattern and the pattern that i'm
133:49 - talking about is this one
133:50 - now i don't take it lightly when i say
133:52 - that that's so valuable like as in
133:54 - honestly it reduxes the
133:55 - remember we talked about the skills that
133:57 - a front-end developer needs to go ahead
133:59 - and sort of succeed
134:00 - in in their career to get you
134:02 - kick-started if you go ahead and sort of
134:04 - practice
134:05 - all so this is my this is my hack for
134:07 - you guys right
134:09 - um if you want to really sort of get an
134:12 - edge right now in terms of what what's
134:14 - going to put you in the best position
134:17 - to get a job right um so pedro says i
134:20 - just struggle with the syntax like what
134:22 - to write i get the concept but not yet
134:23 - how to use it so
134:24 - 100 understand what you're saying i
134:27 - literally would look like for example i
134:29 - if you asked me to write that stuff off
134:31 - the top of my head i wouldn't know i
134:32 - would forget like that's why i use the
134:34 - template
134:34 - and i just pretty much copied this stuff
134:36 - and i just repurposed it
134:38 - to solve the problem yes yeah now
134:42 - um so what i would say is in terms of
134:45 - understanding syntax it's never about
134:47 - remembering
134:48 - the the point here is that if you if you
134:50 - understand that pattern that we spoke
134:52 - about
134:52 - right that that sort of circular pattern
134:54 - that we that we sort of discussed
134:56 - then it really doesn't matter about um
134:59 - it doesn't really matter about the
135:00 - syntax for example it you could you
135:03 - could
135:03 - go away from coding for an entire year
135:06 - and come back
135:07 - and and what you'll find as well guys is
135:09 - that this is a very modern approach to
135:12 - doing redux
135:13 - this is using hooks it's using a lot of
135:14 - stuff but what you might see in in
135:16 - actual production is something called
135:17 - map state to props
135:18 - match this map dispatch to perhaps right
135:21 - it's
135:22 - and what we will do we will go through
135:24 - that at some point but at this point i
135:25 - just want you to use the elegant way
135:27 - the really new way the nice way because
135:29 - this is the simplest way of doing it
135:31 - um but but if you practice with this
135:35 - you'll understand what that stuff is
135:37 - doing because it doesn't matter about
135:38 - the syntax at that point because you
135:40 - know what's happening but under the hood
135:42 - once you once you kind of get your head
135:43 - around what's going on under the hood
135:45 - the rest isn't really as important right
135:49 - um uh so hey
135:52 - yeah i just have one question then i
135:54 - have to leave
135:55 - okay um so when you're sharing your uh
135:57 - screen on react to the app
135:59 - you can share it yep yep
136:03 - so in the input field uh
136:06 - in your react app redux your app
136:10 - yep on the web browser web browser uh
136:13 - okay
136:13 - so boom boom yep
136:16 - on your react yeah they're in there in
136:19 - foot field
136:20 - if you put uh spaces will it still
136:22 - capture the
136:24 - space or i mean empty space
136:27 - completely empty was it like this
136:30 - uh if you clear that up and then just
136:33 - hit space
136:34 - i mean and then hit button will it
136:36 - capture
136:37 - so yeah it would say let's do like a ton
136:39 - of space so again this is something
136:41 - this now leads into something called uh
136:43 - validation so like this is where you
136:45 - would protect
136:46 - against that sort of thing so what you
136:48 - could do here is you can actually
136:50 - disable the button so i'm going to show
136:51 - you a quick hack
136:52 - right now and it's not a difficult hack
136:54 - you literally go ahead go to app.js
136:56 - go to your button and you say disabled
137:00 - if there is no input
137:03 - and now check this out so okay so
137:06 - this is in the buy now in the clone
137:09 - right we did the same thing
137:10 - yeah yeah the amazon clone for the buy
137:13 - now so that
137:14 - we don't hit it multiple times yeah
137:16 - exactly so you can do it there but you
137:17 - see it doesn't protect against the
137:18 - spaces you're gonna have to
137:20 - there is a way to do that as well but
137:22 - the point is that this will protect you
137:23 - from updating
137:24 - a blank value so there is a way of doing
137:26 - the blank spaces as well
137:27 - or you could do something called trim so
137:29 - it's dot trim
137:30 - uh and then execute like the function
137:33 - and that will actually trim out the
137:34 - white space
137:35 - um but yeah so that's how you would go
137:37 - ahead and do that
137:38 - um okay thank you so much and thank you
137:40 - everyone i just have to leave now
137:42 - gotta go oh dude one sec before you go
137:44 - that's how i just fixed it
137:45 - so if you you see if i do the space and
137:48 - i add
137:48 - uh so when i did disabled uh you see
137:51 - here
137:52 - input dot trim that trims basically
137:55 - yeah okay cool yeah all right thank you
137:58 - welcome dude
137:59 - um nice so yeah so as like going back to
138:02 - pedro's question so
138:04 - again yeah so it really doesn't matter
138:05 - at that point about this the syntax just
138:07 - try and learn the concept which is why
138:09 - i teach the react context api first and
138:12 - how deep in the comments said this is a
138:13 - lot similar to react
138:14 - context api i'm seeing the pattern here
138:17 - redux is a little bit harder than
138:19 - context api in my opinion yes
138:21 - so redux is a little bit more of a step
138:23 - up which is why i say
138:25 - because redux you now have multiple
138:26 - slices of state but trust me when i say
138:29 - that's actually a lot better
138:30 - right you actually want to do that you
138:31 - want to have your code split up in that
138:33 - way
138:34 - um but there is more code to write okay
138:36 - there's actually more code to
138:38 - write um so i would say learn the react
138:41 - context api
138:42 - because you'll notice if you've used if
138:44 - you've done the clones you would have
138:45 - seen like some kind of similarity
138:47 - between the dispatch
138:49 - the sort of pulling it in um and that
138:51 - sort of like that sort of pattern you
138:53 - would see a similarity between the two
138:55 - um and then once you know that it's it's
138:57 - not going to be like a a strange thing
138:59 - right
139:00 - priyanji says i was not able to
139:01 - understand syntax although the main
139:02 - thing that was i got the good grasp of
139:04 - data and i learned about the basic
139:05 - structure redux
139:06 - that's why that's what matters yeah
139:07 - exactly dude like sonny i have a
139:09 - question
139:10 - yeah so this template thing is using the
139:13 - map connect
139:14 - map state to plots and that connect
139:16 - function of the typical redux stuff
139:18 - under the hood
139:19 - or it is something different so what's
139:21 - the difference between the typical
139:22 - uh redux style and this template the way
139:25 - to think of it
139:26 - is rather than so
139:30 - if you have you ever coded in have you
139:32 - ever done a class-based component versus
139:34 - a functional in react
139:36 - yeah uh so in a class so for those of
139:39 - you who haven't even
139:40 - right in class-based components you have
139:42 - things like um you have different
139:44 - together yeah you have like you mean no
139:47 - not setters and getters but like you
139:50 - would have
139:51 - like you would have like a a different
139:54 - way of writing
139:55 - in a class-based component whereas in
139:57 - functional components you just use hooks
139:59 - right use the use state hook to prepare
140:00 - a piece of state
140:02 - now the the reason why this makes it so
140:04 - simple is because it actually sort of
140:06 - eradicates a lot of mistakes like if
140:08 - you've if you've ever done a class based
140:10 - component you'll notice that when you do
140:11 - this dot set state
140:13 - there's a lot more room for error
140:15 - whereas when
140:16 - yeah there's bindings there's this this
140:19 - keyword that throws everyone off
140:21 - right so i've never been able to
140:23 - understand it to be honest
140:25 - i don't i don't think any developer
140:26 - truly understands this
140:28 - but um the main point is is that like
140:31 - it's just more
140:32 - room for error right now that's why like
140:34 - obviously
140:35 - hooks was uh an advancement in sort of
140:38 - react so it was something which came out
140:40 - afterwards
140:41 - and it was something which made
140:42 - something
140:44 - it made it a lot easier for you to go
140:45 - ahead and code functionally now it makes
140:48 - it a lot more
140:50 - easy to write your code in a much more
140:52 - understandable way for example the
140:53 - dispatch right
140:54 - like here for example let me go ahead
140:56 - and show my screen again
140:58 - the dispatch over here you'll notice
141:01 - that like all it does is it just says
141:04 - use dispatch
141:05 - we don't even need to know what else
141:06 - happens like they've made it
141:08 - that simple right it's a hook and sure
141:11 - you can go ahead and click into it and
141:12 - then use
141:12 - i mean don't do that because you need
141:14 - another script for that but
141:16 - um this is basically like use selector
141:19 - for example
141:20 - they've made it to a point where you
141:21 - literally just pass in
141:23 - um like your selector and even today we
141:26 - actually covered something called
141:27 - selectors
141:27 - which is something which we we didn't i
141:30 - didn't actually know about until
141:32 - quite late on in my first job uh thank
141:34 - you so much carlos by the way uh proper
141:36 - react you're making things so easy to
141:37 - grasp
141:38 - i need to take a little break i'm going
141:40 - to go ahead and bring that on screen now
141:41 - um
141:41 - you make things so easy to grasp i have
141:43 - to take a little break from com ai to
141:45 - master this gold piece of state stuff
141:46 - from redux thanks
141:47 - you're welcome dude and thank you so
141:49 - much for the donation that's awesome man
141:51 - i'm glad you found some value in that um
141:54 - but yeah so what i would say is
141:57 - um there's a few different concepts here
141:59 - that we need to like sort of bear in
142:01 - mind right like
142:02 - in react so the golden nuggets of
142:04 - today's session right
142:06 - so if what i would sort of tell you to
142:08 - focus your time on right now
142:10 - is the following so i want you guys to
142:13 - go ahead and
142:14 - things to focus on okay
142:19 - so some things to focus on now
142:22 - one is uh html css
142:26 - js right the better you get any of this
142:29 - stuff
142:29 - though the more it's going to benefit
142:31 - you in the long run right it's going to
142:32 - it's always going to come back in full
142:34 - circle and help you out in some way or
142:35 - shape or form so here that's going to be
142:38 - something which is always going to
142:40 - benefit you as a developer now two we
142:42 - have obviously we talked we spoke about
142:44 - react right so obviously today's session
142:45 - was entirely in react
142:47 - um so that's going to help push us far
142:49 - right now this
142:50 - is where we sort of mentioned redux and
142:52 - redux was to solve the problem of oops
142:55 - redux was to solve the problem of uh
142:57 - managing data within the app so we went
142:59 - over the sort of data flow inside of an
143:01 - application and how you can use it
143:03 - to make your app more maintainable to
143:06 - make it more sort of split
143:08 - in a way that makes more sense so inside
143:10 - of redux we had a few things we had
143:13 - all i'm going to say here is master the
143:15 - pattern
143:16 - right then the syntax doesn't matter
143:18 - right so this is number one master that
143:20 - pattern that we spoke about today
143:22 - because then once you know that pattern
143:23 - the the syntax regardless of if it
143:26 - changes or like we use
143:27 - we're now using hooks and before it was
143:29 - class-based stuff it really doesn't
143:31 - matter after that
143:32 - point if you know the pattern and which
143:34 - and you know the sort of fundamental of
143:36 - how redux works
143:37 - really isn't going to matter past that
143:38 - point so that's going to help you
143:40 - in in sort of grasping the concepts of
143:44 - redux we also talked about something
143:46 - today called selectors
143:48 - so selectors are insane they are
143:50 - something which i wish i used
143:52 - a lot more of early in my career because
143:55 - they do make your code and even when i
143:56 - do freelance projects i
143:58 - always use selectors now because they
144:00 - literally
144:01 - trust me build your code right not in a
144:03 - way that just works
144:05 - build it right from the get go and it
144:06 - will save you so much hassle and pain
144:08 - down the line
144:10 - um and then inside of react as well two
144:12 - fundamentals i want you guys to master
144:15 - so two fundamentals
144:19 - this stuff here is number one
144:22 - is state inside of an app
144:25 - inside of a component and number two
144:32 - number two is props
144:35 - that's so disproportionate anyway um
144:38 - and number two is props right now props
144:40 - we didn't cover too much today but
144:42 - these two things inside of react are
144:44 - going to be
144:45 - essential for you to sort of like to to
144:48 - push your react skills further right
144:50 - so with this set and obviously we spoke
144:52 - about things like flexbox
144:54 - and things like that which is obviously
144:55 - going to help your design skills sort of
144:57 - go to the next level when it comes to uh
144:59 - css
145:00 - sorry for the squiggly line yeah so you
145:02 - can see today so i want you guys to
145:04 - focus on
145:05 - the fundamentals things like flexbox and
145:07 - if you haven't already played it
145:09 - go ahead and check out oh no oh yeah go
145:12 - ahead and check out
145:13 - um flexbox foggy don't underestimate
145:15 - this game guys
145:16 - like i kid you not it taught me flexbox
145:18 - a game taught me flexbox
145:20 - and i went back to that game several
145:22 - times and it and i promise you it really
145:24 - did make me
145:24 - like the the reason why i'm so good at
145:26 - flexbox now is because
145:28 - of that game um it's just
145:30 - flexboxfoggy.com i think or google it
145:33 - honey i have a question regarding uh
145:35 - flexbox
145:36 - okay there are things and designs that
145:39 - can be done by flexbox
145:41 - uh so usually they say online that
145:45 - it's better to use grid is that true
145:49 - yeah so that you can you can definitely
145:51 - achieve some
145:52 - powerful designs with flexbox um
145:56 - you can achieve some really powerful
145:57 - design with css grid it really depends
145:59 - on your sort of like your requirement
146:01 - but don't underestimate flexbox because
146:03 - i i'm not sure if i'm allowed to do this
146:05 - but i'll show you guys
146:06 - but i'll show you a company that i
146:07 - worked at before right so it's mister
146:09 - because they say that that uh that the
146:13 - flags is uh unidirectional and not
146:16 - multi-binary
146:17 - yeah honestly dude i like don't even
146:20 - worry about the jargon like if if it can
146:22 - make the thing look in
146:23 - a certain way that's what you need to
146:25 - worry about like in this case so i'll
146:27 - show you an example so i built this
146:28 - webpage for
146:29 - this was one of the companies i worked
146:30 - at once so it's pretty sick
146:32 - like nice little ui and stuff like that
146:34 - and then if you go down here
146:36 - so i built this section here and i
146:38 - remember we had the exact same
146:40 - discussion that you you mentioned now
146:41 - and they were like
146:42 - um the designer had all these funky
146:44 - designs right and they were like
146:46 - uh oh no we can't we can't really have
146:48 - that design because
146:49 - flexbox isn't gonna allow it and i was
146:51 - like no no no let me see if it actually
146:53 - we can do this right
146:54 - so this is all done with flexbox
146:58 - and breakpoints right so so what i'm
147:00 - gonna show you now
147:01 - is look when it resizes right so
147:03 - everything that you're about to see
147:05 - is done with flexbox and breakpoints
147:08 - so look at that it resizes to that size
147:10 - and then as it gets smaller
147:12 - boom it starts to resize and look at
147:16 - that
147:16 - everything you see there and that and
147:18 - and these are not like
147:20 - these are individual circles so
147:24 - and then you can get really granular
147:26 - with the designs
147:27 - and and like that's a design which if
147:30 - you had sort of
147:31 - originally looked at you'd be like okay
147:33 - there's no way i can build that with
147:34 - flexbox
147:36 - right this was actually built with
147:38 - flexbox and it uses a combination of
147:40 - flexbox
147:41 - uh in particular uses the order um
147:45 - the special thing called order inside of
147:46 - flexbox and it uses some kind of
147:48 - some positioning here as well um but
147:50 - this is kind of an advanced case of
147:52 - using it but
147:54 - you can see like it's extremely powerful
147:56 - so never underestimate
147:58 - it because you can really get some funky
148:00 - designs out of it
148:01 - um and there's also like at one point
148:03 - i'll show you something called storybook
148:05 - storybook is how i built all of these
148:07 - components
148:08 - literally without even looking at any of
148:10 - the other uh the
148:12 - the rest of the web page you build it in
148:13 - isolation and it teaches you very good
148:16 - responsive principles and stuff like
148:17 - that but that's a that's a conversation
148:18 - for another day
148:20 - um but yeah so just to sort of
148:23 - wrap up again the fundamentals we have
148:25 - the flexbox
148:26 - um we have like redux master the pattern
148:28 - and what i would say is like i always
148:30 - teach it this way
148:31 - learn react context api first and then
148:34 - move to redux because you're going to
148:35 - get that pattern a lot easier
148:37 - and the implementation of react context
148:38 - api is kind of simple compared to this
148:40 - but
148:41 - with the template yes this is cool but
148:43 - like um pedro said
148:44 - and a few others said the syntax is kind
148:46 - of confusing whereas in the react
148:48 - context api is kind of easier to grasp
148:50 - so i'd say use that approach first and
148:52 - then kind of go with this and then
148:54 - react fundamentals i want you guys to
148:56 - kind of dial down on the two
148:57 - main fundamentals of state and props
148:59 - these two are going to take you so far
149:00 - and you need to know these in order to
149:02 - sort of build out the web page because
149:03 - remember
149:04 - it's like building a house if your house
149:05 - is weak on the fundamentals
149:07 - like you haven't got a solid ground the
149:09 - house is eventually going to sink or
149:10 - it's going to break somewhere
149:12 - and trust me it will happen at some
149:13 - point like you might not see it now
149:16 - but it will come to a point where you're
149:18 - going to go ahead and
149:20 - be like oh the app works it's fine but
149:21 - you're going to reach a point where
149:22 - everything starts to like break and it's
149:24 - kind of like holding on by a thread
149:26 - and that's where you don't want to be
149:28 - right um so that's going to help you out
149:30 - a lot
149:31 - um so with that said
149:35 - um uh i'm gonna take i'm gonna take
149:38 - two questions and then we're gonna wrap
149:40 - up so two questions and then complete uh
149:42 - completely wrap up
149:43 - but has anyone got a final two questions
149:46 - and then we'll go ahead and
149:48 - and and finish up there funny i do have
149:50 - a question
149:51 - once you uh learn context uh
149:54 - and then you learn redux and you're
149:56 - comfortable with both
149:58 - should we stick with redux since it
150:00 - allows you to scale once you get past a
150:02 - certain point
150:03 - um okay so it's a very good question um
150:06 - so personally what i would say is is
150:09 - building your skill set on redux is
150:11 - going to make you
150:12 - it's going to provide a lot of value in
150:14 - commercial environments production
150:16 - environments
150:17 - i still use the react context api for
150:19 - freelancing jobs for example i took on a
150:21 - freelancing job not long ago
150:22 - i used the react context api because it
150:24 - was just the easier thing to use
150:26 - right it was quicker for me to build
150:29 - i was able to get the exact sort of
150:30 - functionality that i needed and i didn't
150:32 - need to over complicate the build so i
150:33 - used react context api
150:35 - but like i said but once you get that
150:37 - pattern dialed in really doesn't matter
150:39 - what syntax what method you're using
150:42 - but to be honest they've made the redux
150:44 - so easy with the new toolkit
150:46 - i mean like if i needed to create
150:48 - something a little bit more
150:49 - you know like a little bit more sort of
150:51 - intense i actually probably would use
150:52 - redux now because it
150:53 - before the resistance was higher because
150:56 - the entry was kind of like you know it
150:58 - was really long to get everything set up
151:00 - now you just run that one command and
151:01 - the entire template is up and running so
151:04 - uh before they didn't have that so i
151:05 - would have always gone with the context
151:06 - api but
151:07 - now i would say in terms of your value
151:10 - as a developer
151:11 - redux is going to push you really far
151:12 - away yeah
151:15 - awesome dude that was a good question um
151:18 - any one
151:18 - final question guys hey sonny what are
151:21 - the implementations of redux are you
151:22 - planning to include in the modules
151:25 - um so modules right now again like any
151:28 - any heavy node.js
151:29 - um type of interaction so so right now
151:33 - we're still working out the module sort
151:35 - of syllabus for react because it's quite
151:37 - a lot that we
151:38 - there's a lot to break down in terms of
151:40 - how we sort of teach it what's the best
151:42 - way to teach it and we're using these
151:43 - calls as a good sort of like filters to
151:45 - understand
151:46 - where the sort of trigger points are
151:48 - where students find it difficult where
151:50 - students find resistance
151:52 - so it would most likely eventually be a
151:54 - case of react basics teaching you sort
151:56 - of the a to b
151:57 - in terms of react then it will sort of
151:59 - teach you the
152:00 - kind of react context api route and then
152:03 - some kind of demo project
152:04 - and then kind of progress into your
152:06 - redux build and show that kind of
152:08 - project and then you'll sort of see the
152:09 - progression that i'm talking about
152:11 - um and then eventually like the final
152:13 - project will be some
152:14 - some full something like an amazon clone
152:17 - full stack with redux
152:18 - uh you know yeah and honestly what i
152:20 - would say is don't even wait for the the
152:22 - react modules dude i would say
152:24 - the react challenge has everything and
152:26 - what i would say is take it upon
152:28 - yourself
152:29 - uh to go ahead and literally clone the
152:32 - so so if you and this is a good example
152:35 - exercise for anyone
152:37 - right now is go ahead do the template
152:39 - that we did today
152:40 - and then repurpose it for the amazon
152:42 - clone if you can get that working i
152:44 - guarantee you your redux will be dialed
152:47 - in
152:47 - and you would have different slices for
152:49 - different pieces of states that is an
152:50 - awesome exercise for anyone who wants to
152:52 - really push your knowledge right now
152:54 - and sort of like because that's going to
152:55 - really excel you in terms of because
152:56 - it's going to be something which is
152:58 - going to really push you in terms of
152:59 - understanding and
153:00 - where things you know like it's going to
153:02 - really push you in that level
153:04 - and it's going to it's gonna be a very
153:05 - very good exercise for you to do
153:08 - today
153:13 - yeah today was about um uh redux today
153:17 - yeah so the main difference i'm sorry go
153:19 - ahead no so you can
153:22 - uh so the main difference you would say
153:24 - with between
153:26 - context api and redox is that the redux
153:29 - allow you to
153:30 - create multiple slices but contacts api
153:33 - doesn't no so you can is that the right
153:36 - understanding then
153:36 - you can do it with with the uh react
153:38 - context api but react context api wasn't
153:41 - built for this like it wasn't really
153:43 - built to be used in that way i've
153:44 - modified it in a way to make it
153:46 - do the exact same job in a very easy
153:48 - snippet of code
153:49 - um so when you say modified is it more
153:52 - more
153:53 - uh not manageable type of code that you
153:56 - create
153:56 - yeah i would say so redux is built to
153:58 - scale it's built to
154:00 - you can definitely do it with react
154:01 - context api uh redux has a lot and and
154:04 - remember what we spoke about today was
154:06 - a direct comparison of what react
154:08 - context api offers against redux
154:11 - redox offers a ton more in terms of
154:13 - middleware
154:14 - in terms of extra things that you can
154:16 - plug into your redox just like you can
154:17 - plug things into react
154:19 - redux itself has a bunch of like it's so
154:21 - well
154:22 - built out in terms of community you have
154:24 - just plug and play basically yeah you
154:26 - have redux
154:26 - thunk you have redux offline which
154:28 - handles offline data
154:30 - persistence all that sort of stuff is
154:31 - now sort of supported and
154:33 - they have immense like documentation
154:35 - around it and it's it's a really really
154:37 - um
154:38 - uh well supported uh uh library module
154:41 - whatever the hell we want to call it
154:44 - companies
154:52 - yeah it would be redux that they would
154:53 - list exactly so
154:55 - my um my approach is
154:58 - learn the react context api to
154:59 - understand the pattern and then
155:01 - transition
155:02 - across the redux and you'll find the
155:03 - transition easy
155:05 - um otherwise if you jump straight to
155:06 - redux it's like trying to
155:08 - like you can't even walk yet and you're
155:10 - trying to sprint
155:11 - you see like it's going to be it's going
155:13 - to be a very big jump i'm not saying
155:14 - it's impossible
155:15 - but it's going to be something which is
155:17 - going to be a lot more resistant you're
155:18 - going to face a lot more resistance and
155:19 - like difficulty in an understanding as
155:22 - opposed to
155:23 - and this is take it from someone who
155:24 - went the hard route in the beginning
155:27 - and this would this would ease your
155:28 - transition by doing the react context
155:30 - api
155:30 - then progressing to uh their redux
155:34 - cool don't yeah
155:39 - so remember it'll be straight on youtube
155:42 - right now
155:43 - and what we're doing is we're dialing in
155:44 - the process to get it up on the
155:46 - on pwj um like as quick as possible as
155:49 - well we're trying to work on that in
155:51 - terms of
155:51 - we're working with the customer support
155:52 - team to make that really quick and easy
155:54 - um there's been a bunch of headache with
155:56 - the even with the waiting room stuff
155:58 - from updates so we're just trying to fix
156:00 - a lot of technical
156:01 - technical stuff while carrying on the
156:03 - content
156:06 - the youtube link uh if you check if you
156:08 - type in cover program i'll go ahead and
156:10 - drop in the zoom chat right now
156:12 - um but yeah so so remember these chats
156:15 - you can pretty much just go ahead and
156:16 - watch
156:16 - on youtube um but yeah yeah that was so
156:19 - sonny this will be the norm going
156:20 - forward all the calls will be
156:22 - on simultaneously are streamed on
156:24 - youtube and
156:26 - then so the the reason i'm saying is if
156:29 - it's on youtube
156:30 - there's less less of a headache because
156:31 - people keep asking for this
156:33 - and if you're already pushing it to
156:34 - youtube then no worries right yeah so
156:36 - there's two reasons right away
156:38 - one is uh it it's going to help a lot
156:41 - more people too
156:42 - uh and if anyone who's got the questions
156:45 - as opposed to like
156:46 - uh like but then you get the coaching
156:48 - calls on youtube it's not the same like
156:49 - trust me it's not the same
156:51 - to be inside the corn to ask questions
156:53 - and to be inside the community and
156:54 - things like that
156:55 - is you have a lot of value here you also
156:58 - have like direct access to each other
157:00 - you have direct success
157:01 - access to a lot more also it's something
157:03 - we're trialing we're testing it out for
157:05 - now
157:05 - it doesn't we're not saying yes we're
157:07 - going to be putting every coaching call
157:09 - in the future
157:10 - on on youtube but remember every on
157:13 - youtube there's only limited calls on
157:15 - on pwj you have all the previous calls
157:17 - as well
157:18 - that you can go back on and check out as
157:20 - well so yeah
157:22 - and also everyone on youtube go ahead
157:24 - and smash the thumbs up button
157:25 - if you enjoyed that yeah if you have
157:28 - room for one more question
157:30 - let's do it one more question and we're
157:31 - done yeah
157:33 - yeah so uh you were saying in uh redux
157:36 - like it's like a
157:37 - layer of onion right yeah and for each
157:39 - context we are having various slices
157:42 - right so now in this case like we're
157:44 - having the counter
157:46 - but we might have uh multiple variables
157:48 - also in
157:50 - one particular slice right so do i do it
157:53 - in the initial state i create an object
157:55 - inside it or should i
157:57 - how do i how do i encounter like if i'm
158:00 - facing such a
158:02 - case scenario how do i encounter that so
158:05 - you do it like this you pretty much just
158:07 - have initial state
158:08 - the name age you'll have things like the
158:10 - name age
158:11 - let's just say height uh
158:15 - you'll have the i'm not 20 by the way
158:18 - yeah
158:20 - there we go um and then you can have
158:22 - like a city london
158:24 - or something like this okay um
158:28 - and then basically what you could do is
158:30 - uh if i show you inside the app quickly
158:33 - um now if we go to the state you see
158:36 - inside the user
158:37 - we have the variables okay yeah
158:40 - so sunny in that in in that right there
158:42 - where you
158:44 - the initial state that could be a a
158:46 - database call
158:47 - where you're getting all that
158:48 - information uh on load
158:50 - and you know instead of hardcoding it
158:52 - here no so so you want to set the
158:54 - initial state
158:55 - always here and then inside of your app
158:57 - you would have a user effect which would
158:59 - make a call
159:00 - upon loading oh gotcha yeah so you want
159:03 - to want to do that and then you kind of
159:04 - then you kind of like um
159:06 - uh it really depends right so so you can
159:10 - sometimes you have middlewares as well
159:12 - which handle this this kind of comes
159:14 - down to architecture which kind of gets
159:15 - a little bit more complicated but
159:17 - try and keep it simple for now but to
159:19 - solve the problem at this point use a
159:20 - use effect
159:22 - okay yeah um thanks
159:25 - perfect okay with that said guys what's
159:28 - up
159:29 - uh yeah sony i'm just asking uh
159:32 - about these hoops yeah accused effect
159:35 - are you gonna plan
159:36 - on this that you will gonna teach the
159:38 - books
159:39 - like on a separate call yeah so in fact
159:43 - in fact what i would recommend you
159:45 - really heavily do and this will provide
159:46 - you with a huge amount of value
159:48 - is for for hooks and things like that go
159:51 - ahead and check out
159:53 - uh previous coaching calls and also go
159:55 - ahead and check out the
159:56 - clones on the clones guys the clones are
159:59 - so valuable
160:00 - like i'm not doing those clones will
160:02 - teach you everything they will teach you
160:04 - because because it's one thing to teach
160:06 - you it right but if you see it being
160:08 - used in all sorts of scenarios
160:10 - it just shows you okay i can use it like
160:12 - this i can use it like this i can use it
160:14 - like this
160:14 - this is how i write it and then you get
160:16 - pattern recognition which means that
160:18 - even if you don't recognize the syntax
160:19 - you know that okay he's using a used
160:21 - state hook he's using a user factor
160:23 - that's what that does that's what this
160:25 - does so the clones
160:27 - there's like 25 clones up on youtube
160:28 - right now i'd recommend checking
160:30 - all of them in your own time um and also
160:32 - i would recommend also
160:34 - checking the previous coaching calls
160:36 - because there are some coaching calls
160:37 - that i actually went through hooks just
160:40 - purely hooks
160:41 - um uh but but for sure like there will
160:43 - be definitely like top-up taster
160:45 - sessions of hooks and things like that
160:47 - here
160:48 - yeah because i recommend that especially
160:50 - for the like
160:52 - when we move from the class based
160:54 - component to the functional component
160:55 - yeah
160:56 - so what exactly on which which
160:59 - syntax is representing like use effect
161:03 - if i do a multiple job yeah like
161:06 - component date mount
161:07 - component exactly yeah so these kind of
161:10 - concepts we
161:11 - want to understand because this is the
161:13 - main like subscribing when we used to
161:16 - we should subscribe when we should
161:18 - unsubscribe
161:19 - this is actions like that yeah this is
161:21 - all going to be part of react basics
161:23 - which is
161:24 - the module that we're going to be
161:25 - dropping soon in in pwj
161:27 - so i'm working on that now but at the
161:30 - same time i'm shooting
161:31 - the videos on thursday friday for
161:32 - discord imessage so there's quite a lot
161:34 - of like content as well as
161:36 - a gazillion tech issues um
161:40 - behind the scenes so so really trying to
161:42 - like pump out the content for you guys
161:43 - uh
161:44 - so to get you guys as much value as
161:46 - possible but um
161:48 - a hundred percent i agree with you uh
161:50 - and also just to answer your question
161:52 - all of those lifecycle hooks that you
161:53 - mentioned component demand component
161:54 - will
161:55 - component should update and all those
161:57 - things every single one
161:59 - gets replaced with use effect which is
162:01 - nice yeah so every single one gets
162:03 - replaced with use effect
162:06 - but how many times we use it we have to
162:09 - understand that
162:10 - because the use case like if you will
162:12 - the use case
162:13 - for one example so the use case
162:17 - like the use case that's what i'm saying
162:19 - so the use case
162:20 - is going to be the best way of
162:22 - demonstrating that is because
162:23 - even if i was to explain it in a call
162:26 - the best
162:27 - thing for you to do is go through those
162:29 - clones honestly because you'll see
162:30 - so many use effect use cases in those
162:33 - clones i
162:34 - i demonstrate on on different builds
162:36 - different cones different
162:38 - different scenarios and we used tons of
162:41 - different use effects throughout that
162:43 - um so i would definitely go ahead and
162:44 - check that out yeah um
162:47 - awesome okay with that said guys i'm
162:49 - gonna call it on questions there
162:51 - i hope you guys enjoyed that call um
162:54 - awesome
162:54 - yeah awesome bro
163:00 - i love that guys and also upper react
163:02 - always drives value man
163:05 - thank you
163:08 - thank you so much guys every so pretty
163:11 - much and and thank you also for
163:12 - accommodating today
163:13 - because it was a change of plan but you
163:15 - guys are awesome you guys stuck around
163:17 - and sort of
163:18 - stick to stuck to the end so really
163:20 - appreciate and love all of you guys and
163:22 - like i said go ahead and do go through
163:25 - this entire build in your own time
163:27 - and if you can and you want a challenge
163:30 - literally try and do a redux conversion
163:31 - of the amazon clone that'll be an
163:33 - awesome challenge for you guys
163:34 - but with that said everyone on youtube
163:36 - as well if you enjoyed that smash the
163:37 - thumbs up button because it'll just help
163:39 - the video go out to more people
163:40 - and it'll help we're almost at 800k
163:42 - subscribers which is insane
163:44 - um we're like a few few away from it so
163:48 - uh thank you so much guys and um
163:52 - yeah i know right thank you so much guys
163:55 - and uh i will see you in the next
163:57 - coaching call
164:00 - actually i'll see you this week on
164:01 - thursday and friday yeah
164:13 - and for everyone on youtube if you guys
164:15 - enjoyed that
164:16 - stick around make sure you subscribe
164:18 - we're almost 800k
164:20 - so if you want to be a part of that
164:22 - literally just hit the subscribe button
164:23 - make sure you subscribe to the
164:24 - notifications
164:25 - and also guys smash the thumbs up button
164:27 - so that the video goes out to you as
164:29 - many people as it possibly can
164:31 - really appreciate and love all of you
164:32 - guys and i will see you next time
164:34 - signing out peace