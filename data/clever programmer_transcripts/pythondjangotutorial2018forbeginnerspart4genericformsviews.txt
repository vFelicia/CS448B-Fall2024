00:00 - hey guys what's up how's it going this
00:03 - is Kazi from clever programmer calm
00:05 - welcome back to another episode with
00:09 - writing your first jingo app part 4
00:12 - following the official jingo
00:14 - documentation so let's continue and kick
00:17 - ass alright so we're continuing a web
00:20 - poll application and it will focus on
00:22 - simple processing simple form processing
00:25 - and cutting down our code so the big
00:28 - things we're gonna be doing is how do
00:30 - you add a form that where you can submit
00:33 - information to so basically it's gonna
00:36 - be a form it's gonna have radio buttons
00:38 - you're gonna pick your choice you're
00:40 - gonna click on it and then you're gonna
00:41 - be able to send that data over that's
00:44 - number one big thing we're gonna be
00:45 - doing the second big thing we're gonna
00:47 - be doing is cutting down our code using
00:51 - something called Django's a generic
00:54 - views they are super super powerful and
00:58 - it makes your code a lot more readable
01:01 - and it stops you from doing the same
01:03 - thing over and over again okay so it
01:07 - makes things a lot simpler for you it
01:09 - does have a little bit of magic involved
01:11 - but hey that's what I'm here for and I'm
01:13 - gonna break it down so let's jump right
01:16 - into it alright so writing a simple form
01:20 - I'm gonna cop this guy and then I'm
01:22 - gonna break it down to you you my friend
01:24 - should not be copying your learning this
01:26 - stuff you should be writing this down
01:27 - line by line and going hmm how does this
01:30 - work ah that's how it works
01:34 - Oh huh and then you should be googling
01:38 - it and looking it up okay for me I know
01:42 - how this works I don't want to waste my
01:44 - time gonna copy paste it and then break
01:46 - it down for you
01:47 - capiche let's get going alright so let's
01:51 - pop open our atom and we will go into
01:55 - our detailed HTML and we're gonna put
02:00 - this over that okay
02:02 - so what is going on at a higher level we
02:04 - have a for our heading 1 so this is
02:07 - where what the specific question is okay
02:10 - so what's up what's cracking what's
02:12 - popping things like that
02:13 - right here this line is saying hey man
02:16 - look if there any error messages I just
02:18 - want you to freaking show them that's
02:20 - all and this guy over here is just a
02:23 - form where you actually submit and vote
02:25 - okay at a high level that's all that's
02:27 - happening okay now getting down more
02:30 - into the code level this is pretty
02:33 - self-explanatory is just edge one tax
02:35 - it's just HTML here is a little bit of
02:38 - Django going on so here we're saying if
02:41 - there are there is an error message and
02:43 - then show it okay and show it covered in
02:47 - strong tax so it looks nice and then
02:50 - here's where we're creating a form so we
02:52 - start the form tag here and end the form
02:55 - tag here the action is to go to this
02:59 - specific URL so trigger this URL so
03:03 - basically action means what the heck
03:05 - happens when you submit a form right
03:08 - what's an example of a form you every
03:11 - almost every website has it okay so you
03:13 - going on Instagram and logging in you
03:15 - are submitting a form you logging in on
03:18 - YouTube you logging in on Facebook you
03:20 - are submitting a form you posting a
03:23 - status hitting post you are submitting a
03:25 - form okay so that's essentially what's
03:28 - going on so what we can say here for
03:31 - action once you submit a form what
03:33 - should happen okay one thing you could
03:36 - do here is just type in facebook.com so
03:38 - once you submit this form it just takes
03:40 - you to facebook.com okay you can
03:42 - certainly do that except in our
03:44 - application what you want to do is once
03:46 - somebody submits a form you want to send
03:48 - them over to some other part of your app
03:50 - with that information with that data for
03:53 - example if somebody adds shoes to their
03:58 - cart it then takes them to the new page
04:00 - with the information where they're
04:02 - previously added shoes to their cart and
04:04 - then shows the shoes and the shirt and
04:07 - the tie on the Pursey to checkout page
04:10 - okay that's essentially how you use
04:13 - forms in real life okay so here we have
04:16 - it - hey take me to the vote view okay
04:22 - or the vote function in our views file
04:24 - cool
04:27 - CSRF token so there's something called
04:29 - cross side I forget what it fully stands
04:34 - for let's take a look at it they mention
04:36 - it cross-site request forgery zou kay so
04:39 - it's a security mechanism and all you
04:42 - have to do is really not to worry about
04:44 - it too much
04:45 - all you have to do is just add that
04:46 - token okay so actually that's it that
04:49 - token doesn't even need an end that's it
04:51 - this is just a line that you add usually
04:53 - when you're adding django forms unless
04:55 - you're using something like crispy forms
04:57 - which is again outside the scope of this
04:59 - tutorial so that's what this line is
05:02 - here we're doing a simple for loop
05:04 - okay the for loop goes through all the
05:06 - question choices and what our question
05:10 - choice is well remember each so you have
05:13 - question and then one question can have
05:15 - multiple answers to it those answers are
05:18 - the things that yet I've voted on so
05:20 - what we're doing now is listing out all
05:22 - of those answers or those or those
05:25 - choices and and and and I'll show you
05:29 - right now how it'll actually look okay
05:33 - so let's go ahead and check out what
05:35 - this looks like so now we're gonna go
05:38 - over to our app and let's say I click on
05:41 - what's cracking and you can see it says
05:43 - what's cracking followed by vote right
05:45 - underneath it okay let's go - what's up
05:49 - what's up has two choices remember I had
05:52 - not much and the sky those are two
05:54 - possible answers kind of funny I don't
05:58 - know which one I like more but yeah you
06:01 - could you could vote on one and then you
06:04 - could certainly hit vote okay
06:06 - yours is not gonna look as big as mine
06:08 - that's because I have it zoomed in so
06:10 - you could see on my 5k iMac Retina
06:13 - screen and you could pick whichever one
06:15 - you want that's it and then you hit vote
06:17 - boom okay you're voting on question one
06:20 - it redirect you to that cool so that was
06:25 - that the radio buttons are coming from
06:27 - these lines okay how's this working
06:29 - input type radio' when you do this then
06:32 - it creates those radio buttons on the
06:34 - side okay I for ID something you don't
06:38 - have to worry about too much but for ID
06:40 - just using the built-in Django template
06:42 - in systems for loop counter so I'll give
06:45 - the ID one-two-three-four as it's
06:47 - looping through and yeah value is just a
06:51 - choice that ID and name we're just
06:54 - calling a choice name is very important
06:57 - once you get this on the server side the
07:00 - back end you could reference this post
07:02 - data using that particular name okay so
07:05 - you're gonna be able to do something
07:06 - like request I post bracket choice okay
07:10 - and then label for that's just for
07:13 - labeling purposes again not incredibly
07:16 - important to what we're doing and then
07:18 - we end the loop right over here and then
07:21 - right over here we're saying this form
07:23 - is basically what we're saying is like
07:28 - put that submit button and then just
07:31 - call it vote okay so that's why you see
07:35 - you know if I called it something else
07:37 - and saved it and refresh now it calls
07:39 - with that so here we're saying call it
07:42 - vote and then for type we're gonna say
07:45 - it's a submit button so the type we're
07:47 - just gonna give a submit so once you hit
07:49 - it it sends that information over to the
07:53 - next page cool let's go back to our
07:57 - tutorial alright so that's pretty much
08:00 - what is gonna explain to us but let's
08:01 - just see and make sure we're not missing
08:03 - anything right so the value of each
08:08 - radio button is associated is associated
08:11 - question choices ID the name of each
08:14 - radio button is choice yep
08:16 - that means when somebody selects one of
08:19 - the radio buttons and submit the form
08:20 - we'll send the post data choice where a
08:24 - number is the ID of the selected choice
08:27 - this is the basic component of HTML
08:29 - forms okay
08:31 - we said the forms action to that
08:33 - particular URL and we said method is
08:36 - equal to post so here's another
08:38 - important thing to note this is pretty
08:39 - important whenever you're generally
08:42 - submitting data or filling out a form
08:45 - and sending it over you want to use post
08:48 - requests because it's safer and it's
08:52 - better you don't want to be using get
08:53 - requests
08:54 - when you're sending data over because
08:56 - it's insecure and you could get screwed
08:59 - okay
09:00 - so simply put as opposed to yet it's
09:04 - very important because the act of
09:06 - submitting this form will alter data
09:08 - server-side whenever you create a form
09:10 - that alters our data server-side use
09:13 - method post' this tip isn't specifically
09:15 - Django is just good web development
09:17 - practice for loop counter indicates how
09:21 - many times the four tag has gone through
09:23 - its loops okay
09:24 - I've explained this already since we're
09:28 - creating a post form we need to worry
09:31 - about cross-site request forgeries and
09:33 - I've already gone over this as well okay
09:35 - and that's why we're using CSRF token
09:40 - all right now let's create a Django view
09:43 - that handles and submitted data and does
09:45 - something with it or remember in
09:47 - tutorial 3 we create a URL con for the
09:49 - that includes this line so we already
09:52 - have this line we don't have to add it
09:54 - so if I go to my URL stop py you'll see
09:57 - four votes I have this line right over
09:58 - here and so should you
10:02 - alright now let's add the now that we're
10:06 - gonna create a real version for our vote
10:08 - so up until now we had a functionality
10:11 - for a vote but it was just dummy
10:13 - placeholder didn't really do anything
10:15 - okay so now we're gonna actually add
10:17 - real functionality what are the few
10:19 - things we need that we don't have let's
10:21 - see we will need HTTP response redirects
10:24 - because we don't have that so we're
10:26 - gonna put that in all right we're gonna
10:30 - save what else do we need we need from
10:33 - Django dot URLs import reverse so we're
10:36 - gonna add that in and hit save and then
10:41 - that's essentially essentially and then
10:43 - it except we're gonna have a choice
10:45 - right here safe cool okay now we're
10:49 - gonna go in our vote and we need to add
10:51 - all of this code okay and I'll break it
10:54 - down for you right about now okay so
10:57 - what's going on here question we get
11:02 - that particular question or we throw a
11:04 - 404 error we then
11:09 - get the answers for that particular
11:12 - question okay or select a choice one
11:16 - specific choice that's what we get okay
11:18 - so for example whether the choice is
11:22 - gonna be the sky or whether the choice
11:25 - is gonna be something else right it's
11:27 - not going to show it to me right now
11:28 - because the app is offline right now the
11:31 - server is closed but since we had two
11:34 - choices and you could vote for this
11:35 - choice or this choice how are you gonna
11:38 - know which one is sent right so that's
11:39 - what we're trying to pick here which
11:42 - ever choice you select the radio button
11:44 - next to that's whose primary key we're
11:49 - gonna be passing in and how we get that
11:52 - is request that post choice request that
11:55 - post is just a dictionary and you could
11:58 - index you could get pull out the key
12:00 - choice from that okay just to have it
12:05 - make sense let's see let's run this code
12:08 - so what is it saying the problem is
12:11 - right here alright we're gonna run this
12:13 - code cannot import name reverse HTTP 404
12:21 - let's see where that error is coming
12:24 - from AHA right there reverse okay and
12:31 - you could still have HTTP 404 not a
12:34 - problem all right
12:35 - so let's go back to our app let's go to
12:37 - what's up and also let's go back to this
12:43 - save it come back let's refresh I should
12:46 - say vote here now when I hit the sky
12:49 - we're gonna see what happened so I'm
12:51 - gonna hit inspect here and our console
12:54 - pops up right we're gonna go to sources
12:57 - console is looking pretty insane right
13:01 - now but that's fine I'm gonna click on
13:02 - network and we're gonna click vote so
13:05 - we're just voted for this guy okay now
13:09 - in our network let's see if we can zoom
13:12 - out a little bit because it's a little
13:14 - too crazy
13:20 - all right so in our network we can see
13:23 - that the requests Methodist Post right
13:25 - and we can actually check out the
13:28 - response and in this case it says the
13:30 - response failed let's click here right
13:35 - now when I click results because it was
13:38 - sent to results it says you're looking
13:40 - at the results of question one right so
13:42 - there is a response and now if I look in
13:44 - the headers it tells me the request
13:47 - method right now is get and it tells me
13:49 - kind of all the things that go along
13:50 - with it right so let's try it out again
13:53 - let's pick another question not much and
13:56 - vote let's see what happens
14:01 - so 302 found right okay
14:06 - so let's go here preview response failed
14:09 - to load response data if I go in results
14:11 - it's showing me or looking at the
14:13 - results of question number one okay so
14:15 - pretty much it says the same thing and
14:17 - it's giving my statuses what do these
14:19 - mean we're gonna break it down a little
14:21 - bit later okay
14:22 - so let's go back to our tutorial and go
14:30 - down index.html okay so this is looking
14:35 - good our views it's looking fine cool
14:41 - now so yeah so basically we're selecting
14:44 - the specific choice from here whatever
14:47 - we get we send over in our request and
14:51 - then we throw an accept choice that we
14:55 - throw an exception here okay
14:58 - and we also check for if like the choice
15:01 - does not exist or if there's an Kier and
15:06 - in the case that the choice does not
15:09 - exist we return polls slash detailed
15:12 - HTML we render that and we return that
15:18 - question object and for our error
15:21 - message we say that you didn't select a
15:24 - choice okay so if you somehow it's
15:26 - selected you know nothing and otherwise
15:30 - if we have
15:31 - selected it and we haven't ran into this
15:33 - issue what we want to say is for that
15:35 - particular choice we want to upload it
15:37 - by one so we're incrementing the vote
15:40 - count by one we want to save it and then
15:43 - we redirect okay so we're gonna go into
15:46 - more depth of that but let's just check
15:49 - this part out one more time
15:51 - refresh
15:53 - let's hit inspect let's go to network
16:02 - let's select the sky let's click vote so
16:07 - you can see okay so that's that's
16:09 - exactly what I needed here it's a little
16:12 - hard to see though so you can see when I
16:15 - scroll all the way down that it actually
16:18 - pulls out the form data and it's telling
16:21 - me that the choice I selected was the
16:24 - second choice right that's the important
16:27 - part
16:27 - and it also has a CSRF middleware token
16:30 - which remember we did CSRF underscore
16:33 - token that's where it's generating that
16:35 - from but the choice is the most
16:37 - important one so whether it was choice
16:38 - one or is chose two and we're picking
16:41 - this based on the choice ID okay so
16:45 - that's essentially what's happening now
16:46 - if I go back and I pick not much and I
16:48 - vote and when I go back up to vote and I
16:51 - go all the way down you'll see that it's
16:52 - showing me choice one right so that's
16:55 - the thing that we're actually pulling
16:56 - out so this will essentially turn to a
16:58 - one or a two that's what I was trying to
17:01 - get at earlier but it was just my screws
17:02 - too big so it was hard for me to show it
17:06 - but that's what gets selected here and
17:08 - once this a value to something like a 1
17:11 - or something like a 2 this whole thing
17:13 - evaluates to that specific question
17:16 - object and then we up vote it and then
17:23 - we save it and then we redirect okay the
17:26 - reason why you so when you're done with
17:29 - all of this you don't want to say hey go
17:31 - back to the home page or you don't want
17:33 - to just say like a render the home page
17:35 - because if the user refreshes it'll keep
17:38 - submitting that data over and over again
17:41 - so like imagine right if you were about
17:45 - to
17:46 - pay for your credit card and you buy
17:50 - like whatever right you buy shoes or you
17:53 - buy grocery if you refresh like
17:57 - something happens during half of it then
17:59 - it gets submitted but then you go back
18:01 - and you refresh or you resubmit it
18:03 - shouldn't let you resubmit and pay again
18:05 - right every time you refresh and then
18:08 - all of a sudden you're charged like $300
18:10 - or what if you were on an online trading
18:14 - app and you just put down like $3,000
18:17 - for Bitcoin and then you refresh or you
18:20 - go back and forward a page and it
18:22 - resubmit three thousand and three
18:23 - thousand dollars again you're gonna run
18:26 - out of money pretty fast right nine
18:27 - thousand dollars like that so it's a
18:29 - pretty serious issue so what you want to
18:31 - do instead is redirect this prevents
18:35 - data from being posted twice if a user
18:37 - hits the back button okay there's a
18:41 - better way to do redirect which I think
18:43 - they'll show us later but it's
18:45 - essentially I think from shortcuts you
18:46 - can pull out redirect and just call
18:49 - redirect and it's much simpler but they
18:51 - do it this way she to be response
18:53 - redirect reverse and then take me to the
18:56 - results view right so it takes you back
18:58 - to this results view and for argument it
19:02 - just passes in the question ID cool so
19:07 - that's looking good now let's play
19:12 - around with it and let's just check out
19:14 - what happens so I've already voted for
19:15 - like one or two questions multiple times
19:18 - let's see what's going on on our
19:20 - database I'm gonna go in Python manage
19:22 - that py shell so we're gonna do is from
19:24 - polls that models I'm gonna import
19:28 - choice and I'm also gonna do from polls
19:33 - dot models import question question dot
19:39 - objects
19:41 - dot get let's say we want to get our
19:44 - first question or whatsup question and
19:47 - we're gonna save this question as like Q
19:51 - or something and now what I'll do is
19:53 - I'll do Q that choice underscore set
19:55 - that all
19:59 - now show me all the choices or answers
20:03 - for it and then I'll pull out the sky
20:07 - one and then for the sky one we can see
20:10 - it's vote count in models I forget what
20:13 - is the vote or is it votes so you can
20:16 - see that it has two votes and then the
20:18 - other one there's one also has two votes
20:23 - so it's a tie okay so both have two
20:25 - votes so you see that what we're doing
20:28 - on our front end and we're voting it's
20:30 - actually being counted here okay usually
20:33 - where it says choice underscore set
20:35 - that's kind of weird so how you want to
20:38 - say it is like Q dot choice says and
20:41 - again like I've mentioned in our four at
20:44 - the end of our first video like if you
20:46 - want to change that I'm not gonna change
20:48 - it now just to stay consistent with
20:49 - Django's official Docs but essentially
20:53 - like right in here right right on the
20:55 - top we can actually write something
20:57 - called related underscore name and then
21:00 - fix this issue like right there call it
21:04 - something like related underscore name
21:06 - and give it Joyce says okay something
21:12 - like that but we're not gonna do it
21:14 - right now we're gonna stick to a
21:15 - Django's name because otherwise I'll
21:17 - have to make migrations and things like
21:18 - that everything is fine for now I'm
21:21 - gonna exit out of this and I will just
21:23 - do Python manage that py run server and
21:26 - just go back to using our regular app
21:29 - cool all right so now let's see what
21:33 - they want us to do so that's all good
21:35 - that's working all right let's see what
21:39 - they're saying here request that post is
21:41 - a dictionary like object lets you access
21:43 - submitted data by key name yep so that's
21:46 - how we we use a choice key name requests
21:51 - at post values are always strings cool
21:56 - note that jingle also provides requests
21:58 - I get that's by default that's there but
22:03 - we're explicitly using requests our post
22:05 - and our code to ensure that data is only
22:07 - altered via post call
22:11 - we'll raise a cure if choice wasn't
22:13 - provided and post a dub dub of code
22:16 - checks for Kiara right over here
22:21 - Andrey displays the question form with
22:23 - an error message if choice isn't given
22:25 - after incrementing the choice count the
22:28 - code returns an HTTP response redirect
22:30 - rather than a normal redirect this
22:35 - redirect takes a single argument the URL
22:38 - to which the user will be redirected see
22:39 - the following point for how we construct
22:41 - the URL in this case and you should
22:45 - always return an HTTP response redirect
22:48 - after successfully dealing with post
22:50 - okay we're using reverse function
22:56 - constructor this function helps avoid
22:58 - having to hard code a URL in the view
23:00 - function it is given the name of the
23:02 - view that we want to pass control to and
23:04 - the variable portion of the URL pattern
23:07 - that points to that view cool so right
23:10 - here now after somebody votes in a
23:15 - question the vote view redirects to the
23:17 - results page for the question let's
23:19 - write that view so now it should point
23:24 - us back to the results and we're gonna
23:25 - write it okay so here is what it should
23:29 - be looking like let's check our results
23:34 - just pop that bad boy whoops pop that
23:38 - boy right in here and we just say get
23:41 - that particular question or other
23:45 - Westerwelle 404 and once you get it take
23:50 - me to and once you get that question
23:57 - take me to Roselle's dot HTML so you can
23:59 - already see there are some similarities
24:01 - right like here there's a similarity and
24:04 - here there's a similarity both of these
24:06 - have to do with getting that one
24:08 - particular question so think of it like
24:11 - you're getting the result detailed view
24:16 - for both of them but in one you're
24:19 - sending me to detail that HTML on the
24:21 - other one you're selling sending me two
24:22 - results at HTML
24:24 - okay and we're gonna kind of address
24:33 - this issue of like our code being a
24:36 - little bit repeated this is almost
24:40 - exactly the same as a detailed view from
24:43 - tutorial three the only difference is a
24:44 - template name will fix this redundancy
24:46 - later
24:46 - so they mentioned that now let's create
24:48 - a pole slash results dot HTML so we're
24:53 - gonna go in and create new file I'm
24:57 - gonna call it resolves dot HTML just
25:00 - like that I'll paste it here and we'll
25:03 - go to our app and will vote for the sky
25:09 - and then it'll take us to the results of
25:11 - what's up and look at that not much it
25:13 - says two votes on the sky three votes
25:15 - vote again and then it takes me back to
25:17 - the vote and I'll vote for not much all
25:20 - right so it's coming out pretty cool so
25:22 - far all right is this is exciting guys
25:24 - this is exciting so now what is this
25:30 - code saying let's read our code that
25:32 - we've just added header unordered list
25:35 - unordered list the loop is saying go
25:37 - through all of the choices or all of the
25:40 - answers I don't know why they call it
25:42 - choice I just think is a bad name and
25:46 - get that choices choice text put two
25:50 - dashes in between it so for example this
25:53 - would turn this whole thing would turn
25:55 - into like the sky or not much followed
25:59 - by the number of votes followed by it's
26:01 - saying vote choice out votes pluralized
26:05 - right so what this is doing is it's
26:09 - either gonna put an S here or not so for
26:14 - example let's go here so if you only had
26:18 - one vote it wouldn't this would turn
26:20 - into nothing and if you had multiple
26:24 - votes it would turn into it would put a
26:28 - s here okay so it's a pretty cool way of
26:32 - pluralizing something but you're doing
26:36 - choice dot votes
26:37 - so this will evaluate to like let's say
26:39 - three and then you're piping it over to
26:43 - pluralize and then PluralEyes will be
26:45 - like hey yes you should pluralize it and
26:47 - put an S here and then I'll put like an
26:50 - ass like that
26:50 - okay cool would that said that ends a
26:54 - four loop so you're doing not too much
26:57 - here and then what you say is like hey
26:59 - you want to vote again and how you how
27:01 - you're doing that is you're just
27:02 - providing a link to the tax vote again
27:05 - and it'll essentially take you to the
27:09 - detailed view of that particular
27:10 - question okay so if I hit vote again it
27:16 - takes me to the detail view of that
27:18 - question what's up not much
27:19 - vote it takes me to the results view if
27:23 - I hit vote again it takes me in a detail
27:24 - view click here takes me to the results
27:27 - view so this app is starting to have
27:30 - some functionality again so again that's
27:32 - pretty cool let's go here and let's
27:35 - check out now go to poll slash one in
27:38 - your browser and vote in the question we
27:40 - did it gets updated each time you vote
27:43 - if you submit the form without having
27:45 - chosen a choice you should see the error
27:47 - message okay so let's see if we can try
27:51 - to do that let's hit vote and it says
27:53 - you didn't select a choice perfect
27:55 - that's exactly what we wanted note the
28:02 - code for our vote view does have a small
28:04 - problem it first gets the selected
28:07 - choice object from the database then
28:11 - computes the new value of votes and then
28:14 - it saves it back to the database if two
28:17 - users of your website try to vote at
28:19 - exactly the same time this might go
28:21 - wrong the same value let's say 42 will
28:25 - be retrieved for votes then for both
28:27 - users the new value of 43 is computed
28:30 - and saved but 44 would be the next
28:32 - expected value this is called a race
28:36 - condition if you're interested you can
28:38 - read avoiding race conditions using F to
28:41 - learn how you can solve this issue okay
28:43 - that's a little bit advanced it would
28:45 - have to be literally at the same like
28:47 - fraction of a second could it happen yes
28:51 - you're trying to scale your app to a lot
28:53 - of users yes should you worry about it
28:55 - right now
28:55 - hell no so let's continue alright so
28:59 - remember what I mentioned in our view
29:01 - some of the code is looking similar like
29:03 - here these are detailed views right
29:05 - they're showing the specific question
29:07 - and they need one specific question
29:11 - looks a little redundant right and then
29:13 - we're using also a specific question
29:16 - like allowing us to vote here but these
29:18 - there's a little bit of redundancy going
29:20 - on so how can we address this how can we
29:23 - manage this in a better way
29:25 - well luckily for you Jango has something
29:28 - called generic views these are
29:30 - class-based views that essentially have
29:35 - you once you use them you don't have to
29:37 - write that much real code it just does a
29:39 - lot of the things auto magically in a
29:41 - pretty intelligent way so I like this
29:44 - and check it out all right the detail
29:48 - and results views are very simple as
29:50 - mentioned above but they're redundant
29:54 - okay the index view which displays a
29:57 - list of polls is similar these views
29:59 - represent a common case of basic web
30:01 - development getting data from the
30:03 - database according to a parameter passed
30:05 - in the URL loading a template and
30:08 - returning the rendered template so we
30:11 - pass stuff and we get it from the URL
30:13 - and then we load up a template and we
30:15 - return the render template that's
30:17 - essentially what we have been doing and
30:19 - when I said return the render template
30:21 - another way to say it is returning that
30:24 - HTML file you're looking for right or
30:25 - that page on the front end that you see
30:27 - because this is so common Django
30:29 - provides a shortcut called generic views
30:32 - system generic views abstract common
30:35 - patterns to the point where you don't
30:37 - even need to write Python code to write
30:39 - an app you can literally be sleeping and
30:41 - the app just writes itself
30:44 - let's convert our poll app to use the
30:47 - generic view system so we can delete a
30:48 - bunch of our own code we'll just have to
30:50 - take a few steps to make the conversion
30:53 - we will 1 convert the URL conf
30:57 - delete some of the old unneeded views
31:00 - and introduce new views based on
31:02 - generics generic
31:04 - Chango views all right read on for
31:09 - details okay so why the code shuffle
31:11 - what they're basically saying is hey you
31:14 - should know basic math before you start
31:16 - using a calculator so why did we do this
31:19 - up until this point only to now refactor
31:22 - our code will we have to refactor our
31:24 - code all the time no you will not
31:27 - next time when you are doing your app
31:28 - you already know how class-based views
31:30 - work you'll start from more generic
31:33 - class-based views so basically what
31:38 - they're saying is like hey look we don't
31:39 - want to just give you the calculator
31:40 - before you even can do basic 2+2 or in
31:43 - my case in one of my videos I think I
31:45 - had to do 2,000 divided by 10 on a
31:48 - calculator that was a pretty sad moment
31:52 - and that has a lot of upvotes
31:55 - it makes me sad to this day I wish my
31:58 - editor took it out oh well you don't
32:01 - always get what you want in life but
32:02 - Jango generic views comes pretty close
32:05 - so let's keep going
32:06 - all right amend URL Conte first open the
32:09 - pull slash URLs that py you're on conned
32:12 - then change it like so so we're gonna go
32:17 - in pull /url s dot py and I'm just gonna
32:21 - paste it over this bad boy and explain
32:23 - what the heck we just changed right so
32:25 - besides the fact that we took out some
32:27 - notes what else just changed so let me
32:30 - let me take this out so you can kind of
32:32 - see it side by side and really see what
32:36 - changed so if you look at this index
32:40 - thing all it's changed
32:42 - before it was just dot index now it's
32:44 - index view dot as view detail view as
32:48 - view results view dot as view and those
32:53 - are the middle arguments that change
32:55 - right what are the other arguments that
32:57 - change everything after the name all the
33:00 - name keyword arguments remained the same
33:03 - but there was something else that
33:05 - changed so here it says question
33:06 - underscore ID everywhere but in the new
33:09 - one it says peek hey everywhere if you
33:11 - notice right so that's another big
33:14 - change to keep in the back of your
33:18 - 4head all right that's what they
33:24 - mentioned over here cool so that's
33:28 - essentially what we're gonna be focusing
33:29 - on here so here we still have question
33:33 - ID okay now when we're using these
33:35 - generic views they take things in as pk
33:39 - and they'll explain that later now we
33:40 - need to make changes to our views we're
33:42 - going to remove our old index detail and
33:46 - results views and use Django's generic
33:48 - views instead to do so open them and
33:51 - change it like so so we definitely need
33:55 - this generic thing so we're gonna do
33:57 - we're gonna go to our views and here
34:00 - we're gonna do from Django dot views
34:02 - import generic alright so we got that
34:05 - other things that we need now we need to
34:08 - make a class here so I'm gonna
34:10 - completely remove this guy and add a
34:12 - little class here how will this work
34:17 - it'll automatically know which template
34:20 - to use based on this variable these
34:23 - variables are not just random you can't
34:26 - just call it this it will not work these
34:30 - variables have to have this specific
34:33 - name for them to work okay this is
34:35 - something important for you to remember
34:37 - Django does have a bit of magic but once
34:40 - you learn how it works it'll be really
34:43 - really helpful okay so template
34:46 - underscore name you have to use this
34:48 - variable we assign it to the index.html
34:52 - for a context object name we say latest
34:57 - question list and for a query set we're
35:00 - just returning the last five published
35:02 - published options okay so this we're
35:06 - saying only be referenced if somebody
35:09 - says this so when somebody says this you
35:13 - can get me that okay
35:15 - let's go in our class detail view so for
35:22 - our detail all we need to write is
35:23 - instead of doing this get object 404
35:26 - passing the question passing the primary
35:29 - kiemce all that stuff
35:31 - and saying render requests followed by
35:33 - the context dictionary and all that it's
35:38 - pretty simple how is it working well
35:41 - it's actually pretty cool okay so let's
35:47 - go back to our URLs and since we're
35:50 - passing PK right in here it already has
35:53 - it you don't even have to pass it as an
35:54 - argument or anything which model again
35:57 - these variable names matter we're
35:59 - telling it use the question model so
36:02 - it's directly communicating with this
36:04 - model right over here template name we
36:07 - just give it the template name and
36:09 - that's it it knows what to do okay
36:11 - pretty beautiful now let's do the same
36:14 - thing for a results view so it's gonna
36:16 - change from this obfuscated looking code
36:19 - to something pretty simple check it out
36:23 - clean right looks a lot cleaner no need
36:26 - for requests and question ID no need for
36:31 - a get object or 404 no need for passing
36:35 - in question or primary key no need for
36:38 - saying render request and passing in a
36:42 - context dictionary it just does it all
36:44 - automatically and then vote we're gonna
36:49 - keep it the same okay we're gonna hit
36:52 - save now we're using two generic views
36:56 - here list view and detail view
36:57 - respectively those two views abstract
37:00 - the concept of display a list of objects
37:02 - that's one concept so list view is gonna
37:06 - do that and then the other concept is
37:09 - display a detail page for a particular
37:11 - type of object so are you looking at the
37:15 - home page of Instagram or are you
37:18 - clicking into one particular post on
37:20 - looking at its detail a generic view
37:25 - needs to know what model it will be
37:27 - acting upon this is providing using the
37:30 - model attribute which is this the detail
37:34 - view generic view expects a primary key
37:37 - value captured from the URL to be called
37:39 - pk that's why here it has to be called
37:42 - pk
37:44 - so we have changed question underscore I
37:46 - need to peek here for the generic views
37:48 - but not for the non generic view by
37:53 - default the detailed generic view uses a
37:56 - template called app name slash model
37:59 - name underscore detailed HTML in our
38:03 - case it would use the template the
38:06 - following template right so if I go in
38:08 - my views pull so app name our app name
38:11 - is pulls slash results that HTML so
38:15 - slash slash the model name dot HTML okay
38:20 - in our case we just called it results at
38:24 - HTML the template name attribute is used
38:28 - to tell Django to use a specific
38:30 - template name instead of the
38:31 - auto-generated default template name we
38:34 - also specify the template name for the
38:36 - results list view this makes sure that
38:38 - the results view in the detail view have
38:40 - a different appearance when rendered
38:41 - even though they're both a detail view
38:44 - behind the scenes so they're both a
38:46 - generic detailed view okay
38:50 - similarly the list view generic view
38:53 - uses a default template called similar
38:56 - to the other one we use template name to
38:59 - tell list view to use our existing one
39:01 - so by using template name right over
39:05 - here
39:06 - we're telling it which one to use
39:08 - specifically in previous parts of the
39:12 - tutorial the templates have been
39:14 - provided with a context that contains
39:16 - the question and latest question list
39:19 - context variables for detail view the
39:22 - question variable is provided
39:23 - automatically so the question variable
39:26 - is provided automatically instead of us
39:28 - even having to pass it as in as a
39:30 - context dictionary because generic views
39:33 - are smart since we're using a Django
39:37 - model our models called question Django
39:40 - is able to determine an appropriate name
39:42 - for the context variable that's why it
39:44 - would pull out question this would be
39:48 - the variable name that you can use
39:50 - automatically on your front-end in your
39:54 - templates however for list view the
39:58 - generated context variables question
40:00 - underscore list so if it's a list of
40:02 - things right like the list of choices or
40:04 - those answers it would call them
40:08 - question underscore list to override
40:11 - this we provide the context underscore
40:13 - object underscore name attribute so we
40:15 - override it and we give it our own name
40:18 - if we didn't give it our own name we'd
40:19 - have to access it using question or
40:21 - score list but by giving it our own name
40:24 - now we can access it on our template
40:27 - side as latest question list okay
40:31 - specifying that we want to use latest
40:34 - question list instead as an alternative
40:37 - approach you could change your templates
40:38 - to match the new default context
40:40 - variables but it's a lot easier to just
40:42 - tell Jango to use a variable that you
40:45 - want run the server and your new polling
40:48 - app based on generic views so let's
40:50 - actually give it a try my server is
40:53 - indeed running I'm gonna refresh I'll
40:55 - take a vote and it voted correctly I'll
40:58 - vote for the sky and it looks like it
41:00 - votes correctly I will go to the polls
41:03 - like homepage just polls and it shows me
41:07 - all the detail views for all of them
41:09 - right what's new and when I go on what's
41:12 - up not only does it show me the detail
41:14 - view but it also shows me the choices
41:16 - that go along with it
41:19 - so working fan in a fantastic way
41:23 - alright so that's it for a django
41:28 - tutorial part 5 I hope that you found it
41:31 - informative I hope that you found it
41:33 - fascinating it awesome I'm glad you're
41:37 - enjoying this so far we do have a new
41:42 - course coming up called the profitable
41:45 - programmer so if you're serious about
41:47 - your web development you want to take it
41:48 - to the next level you want to become
41:50 - badass at Django you want to learn how
41:52 - to get clients you want to learn how to
41:55 - become a freelance web developer in less
41:58 - than 90 days you want to create apps and
42:00 - do all these things right you want a
42:02 - deep dive perfect this is the course for
42:05 - you go to this link ok put in your email
42:10 - join the VIP wait
42:11 - it's absolutely free I'll give you I'll
42:14 - let you download your Python earning
42:16 - potential calculator for absolutely free
42:18 - as my gift to you and then when this
42:21 - course opens up you will be the first to
42:25 - know about it ok that's it for this
42:26 - video thank you so much for watching as
42:28 - always I loved your faces off and I'll
42:30 - see you in the next video