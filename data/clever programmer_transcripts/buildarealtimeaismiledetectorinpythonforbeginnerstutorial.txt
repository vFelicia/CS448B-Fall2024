00:00 - yo where we are gonna be building a
00:02 - real-time ai smile detection app in
00:05 - python i am sunny and today i am here
00:08 - with
00:10 - aaron what's up guys remember me the
00:12 - python guy apparently
00:14 - super pumped guys super super pumped for
00:17 - today aaron what are we building today
00:20 - uh all right can they see my screen
00:22 - right now uh
00:24 - coming through now yeah
00:25 - let me pause this
00:27 - like mute this
00:28 - all right guys so this is what we're
00:29 - building i got my little app here and i
00:32 - got a little space detection app let me
00:34 - go ahead and share the screen one sec
00:36 - all right
00:37 - let's go
00:40 - yep they can see you
00:42 - all right here's my face and
00:46 - when i smile
00:49 - it should be able to notify uh detect
00:51 - that i'm smiling and then it displays i
00:52 - mean it's bugging out a little bit right
00:54 - now
00:55 - so go ahead and froze my hey look at
00:56 - that there we go guys
00:58 - and what we do how are we getting that
01:00 - to work right now
01:02 - uh this is the code bro that's how this
01:04 - stuff works
01:07 - what are we using that's pretty much
01:10 - so that's we're using ai right and we're
01:12 - using what what in particular to get
01:13 - that working
01:15 - uh opencv so we're gonna be using the
01:17 - open computer vision library um as usual
01:20 - if you guys are watching the other
01:21 - couple streams in similar but uh this
01:23 - one has some cool some cool
01:24 - optimizations in uh in the code so it's
01:27 - pretty short so it's pretty powerful
01:28 - library i mean what 50 lines of code
01:31 - with comments and spaces so yeah pretty
01:33 - bite-sized but you can do some cool
01:34 - stuff with it awesome dude
01:37 - okay so let's go back to us guys there
01:40 - we go nice so let's go ahead and see
01:43 - where everyone's at nice we've already
01:44 - got 250 people in here that's dope hope
01:47 - you guys
01:49 - okay okay this is the first time guys me
01:52 - and aaron are going live together so
01:53 - this would be exciting
01:55 - yeah first time very first time exactly
01:58 - and also guys i'm not actually a python
02:00 - developer so many of you guys know me
02:02 - for react so this will be cool for me as
02:03 - well so i've never done machine learning
02:05 - with python so i'm excited for today um
02:08 - yeah let's go sunny let's do it so aaron
02:10 - let's go ahead and like let's just jump
02:12 - straight in i think yeah
02:14 - all right yeah let's get straight to the
02:17 - to the project okay so
02:19 - uh here's the stream
02:21 - all right got a little presentation here
02:22 - for you guys let's just start off to get
02:23 - a little bit of context
02:25 - um
02:26 - so smile detection with python all right
02:32 - uh first of all you just wanna you know
02:34 - pay uh pay respects to the joker himself
02:37 - the the infinite smiler i mean
02:39 - he's always smiling but really not
02:41 - the legend heath ledger
02:43 - residents rest in peace bro but uh yeah
02:46 - guys just make sure you're spying a lot
02:48 - because it's important it's good for
02:50 - your mental health and people will
02:51 - probably like you more or just think
02:53 - you're freaking crazy
02:56 - so how are we going to do this
02:58 - uh sunny smiles a lot i've noticed so
03:01 - you can be blessed with his super white
03:03 - teeth it's a british thing
03:05 - now you guys just misspelled words
03:07 - that's all it is the spelled word
03:10 - all right so how are we gonna do this so
03:11 - you guys guessed it
03:14 - it's all um all things go to machine
03:16 - learning okay all thanks go to machine
03:18 - learning so we're gonna be doing that
03:19 - we're not gonna be training anything but
03:21 - we're gonna be doing some pretty crafty
03:22 - stuff uh in the app with some
03:24 - pre-trained models this time it gets a
03:25 - little bit fancy here and there but um
03:27 - i'll explain how it's how it's happening
03:29 - so
03:30 - here's a quick code breakdown of our app
03:32 - i just kind of want to give like the
03:33 - overall idea of the code logic just so
03:36 - that people
03:37 - um have some context going before we
03:39 - start coding because i don't like when
03:40 - they just jump in they're like oh what
03:42 - are we doing but this kind of gives you
03:43 - a holistic view so
03:45 - uh so step one
03:47 - the very first thing we gotta do is uh
03:50 - find faces in our photo in our case it's
03:52 - gonna be a frame from the webcam that's
03:54 - what i'm gonna be using an app but here
03:56 - awesome uh the first thing you want to
03:58 - do is find
03:59 - yeah you want to find faces and that's
04:01 - using the heart algorithm
04:02 - what is the algorithm
04:05 - yeah so i'm not actually going to be
04:07 - explaining the algorithm in this video
04:09 - but if you want to know how the
04:10 - algorithm actually works in depth you
04:12 - can watch the
04:13 - uh our face detection video for our car
04:16 - and pedestrian tracking video uh from a
04:19 - week or a couple weeks back and in those
04:22 - two videos i explained them in depth uh
04:24 - different explanations in both at the
04:26 - face detection it's at the end um and
04:28 - then the other video it's at the
04:29 - beginning but if you want to actually
04:30 - see how it works you can go watch those
04:32 - videos those are cool but this app's a
04:33 - little bit longer the more complicated
04:35 - so i'm just glossing over it okay
04:37 - awesome also i just want to say so step
04:39 - one is find the faces so at this point
04:41 - we're literally just finding the face
04:43 - right so we're not actually finding that
04:45 - yeah no smiles yet so
04:47 - so you want to find just the face like
04:48 - that yep step one that step find the
04:51 - face very simple yep and then we also
04:53 - want to crop it out just so we're
04:54 - dealing with this okay okay
04:57 - uh step two
04:59 - we want to find smiles within those
05:00 - faces because i mean it's pretty rare
05:02 - you have a smile outside of the face i
05:03 - mean maybe if you had like some dentures
05:05 - lying around or like a weird
05:06 - piece of art on the wall but i mean nine
05:09 - times out of ten a smile is always going
05:11 - to be within a face yeah okay again this
05:13 - is the heart algorithm so again if you
05:14 - want to see how it works it's uh
05:16 - it can it's just
05:18 - generic object detection
05:20 - um but we can detect smiles on the faces
05:22 - okay so we just
05:23 - detect the smile there
05:25 - then
05:26 - then step three
05:28 - all we need to do is just put the rest
05:29 - of the image back
05:31 - get rid of that bounding box and give it
05:33 - a nice little label on the bottom
05:35 - because this makes more sense you know i
05:36 - mean you could have a box around the
05:37 - mouth i guess that's kind of cool but
05:39 - this is cooler because then you just
05:40 - kind of want to know if the face is
05:41 - smiling or not it just seems more more
05:43 - human so that was the design choice
05:45 - there for the app nice and that's really
05:47 - it guys so yeah i noticed you basically
05:50 - you found the face first and then what
05:52 - then we found the smile within that box
05:55 - right
05:56 - yep and then why did why do we do that
05:59 - instead of just doing the whole um
06:02 - you'll actually see uh once we get to
06:05 - there okay uh a lot of a lot of yeah a
06:07 - lot of ai stuff you kind of need to get
06:10 - clever with the optimizing and
06:12 - um layering different layers because if
06:14 - we did smile detection just everywhere
06:15 - the performance is actually really
06:17 - really terrible okay so i'll show you
06:19 - guys that
06:20 - i'll show you guys that uh once we're
06:22 - coding and then you'll see because it's
06:24 - actually pretty accurate like when i'm
06:25 - running the code
06:27 - yeah well here so i actually ran it here
06:29 - on the i mean here it's a little bit bad
06:30 - because it's blurry the lighting's bad
06:32 - but i just wanted to run it on this gift
06:33 - before to show you that it's kind of
06:35 - working like when he's smiling you can
06:36 - kind of see it picking it up a little
06:38 - bit here and there
06:39 - um but on the webcam it's pretty
06:41 - accurate
06:42 - so yeah you'll see you'll see how ass
06:44 - though
06:45 - how ask the performance is if you run it
06:47 - on the whole thing but there's there's a
06:48 - little trick to make it like really
06:49 - really accurate
06:50 - so
06:51 - guys let's get to the code yeah so guys
06:55 - for this just all we ask is that before
06:57 - we get started just smash the thumbs up
07:00 - button
07:01 - what we got here what was that
07:04 - yeah i had the i have the other from the
07:06 - car and pedestrian tracking i just
07:07 - forgot to delete it
07:10 - anyways
07:12 - um
07:14 - yeah so let's get to the code okay uh
07:16 - real quick guys before we start though
07:18 - just got a donation dude from tushar
07:20 - near us he says character doing a
07:22 - shackle sign with his hand saying cool
07:24 - oh
07:24 - okay no he actually sent in something uh
07:27 - we can't actually see it properly on the
07:29 - super chat guys but it's some guy waving
07:31 - cool so thank you for that cheers
07:35 - all right
07:36 - uh real quick sonny um you want to show
07:38 - them the stream about the the free
07:40 - training yeah real quick yes let's do it
07:43 - guys so we have a free python
07:46 - masterclass that i recommend everyone
07:48 - goes ahead and signs up to you uh i
07:50 - haven't actually got the link aaron uh
07:52 - i've got the i've got profit with one
07:54 - second let me go ahead and show this
07:56 - so guys let me go do you mind just
07:58 - slacking me the link for the
08:01 - where's it
08:03 - yeah or i can do it you just share my
08:04 - screen and then i can go through it
08:06 - let's do it
08:08 - yeah yep
08:11 - there we go there we go can they see
08:13 - my screen they got you yeah what's up
08:15 - guys so
08:17 - uh
08:18 - so if you guys are interested in
08:19 - learning how to actually make a um make
08:22 - a living from python then we have a free
08:24 - python training here that teaches you
08:26 - the three secrets of how to become a
08:27 - python freelancer so link is in
08:29 - description you can click down there to
08:31 - check it out um or if you just want to
08:33 - jump straight to our python course and
08:34 - we also have a course which teaches you
08:36 - how to do that as well this is a paid
08:38 - course though so if you're interested in
08:39 - that there's also the link in
08:40 - description okay a lot of cool stuff in
08:42 - here free trainings uh
08:44 - private communities weekly live calls um
08:46 - with a couple instructors and yeah feel
08:48 - free to check it out
08:50 - but
08:50 - other than that let's just get to the
08:51 - code okay guys also guys just want to
08:54 - point out one thing with that said the
08:56 - something that i really want to point
08:57 - out that i think is always cool is that
08:59 - we actually offer weekly live training
09:01 - calls in that program so if you do want
09:03 - to go ahead and like and you get a bit
09:04 - bored of the sort of udemy courses that
09:06 - you see online then make sure you go and
09:08 - check it out but before any of that
09:10 - be sure to sign up to that free training
09:12 - guys because it's completely free so you
09:13 - have nothing to lose go ahead and check
09:15 - it out if you enjoy the video
09:17 - awesome
09:19 - all right
09:21 - let's do it dude all right man is the
09:22 - focus back on my screen the focus is
09:24 - back on your screen
09:26 - let's go guys okay so
09:29 - uh let's just jump right in all right so
09:30 - remember we're going to be finding faces
09:32 - first and then from there finding smiles
09:33 - and layering it over so this is the full
09:35 - app again opencv very powerful uh we can
09:38 - do some stuff in a pretty short app um
09:40 - so first thing is you're gonna need to
09:42 - download um
09:44 - a couple files these are in the in the
09:45 - description down below so just go to
09:47 - those web pages and download these two
09:49 - xml files to start out i'll explain this
09:50 - in a second
09:52 - and once you've done that
09:54 - uh you just need to make a python file
09:56 - so start with a small detector.pi yep um
10:00 - and actually i think i'll just i'll just
10:02 - code in here yeah let's do that it's
10:04 - always nice to see a bit of fresh code
10:08 - yeah oh yeah of course but i was gonna
10:09 - make a new file but i and i'm not
10:11 - feeling it so we'll just pretend this is
10:14 - a new file okay so just make it make a
10:16 - new file in a new directory um we just
10:19 - got another donation as well we got
10:21 - vishal s dropped a 20 rupees superchat
10:24 - thank you very much dude and
10:26 - dropped another one thank you guys sure
10:29 - thanks to sure thank you
10:31 - everyone
10:32 - appreciate that
10:34 - much appreciated man yeah all right so
10:38 - let's get started okay so
10:40 - first thing we're gonna need to do is
10:42 - install opencv if you don't already have
10:44 - that so i think that is through the
10:46 - command well let me quit out of this
10:49 - there we are hey
10:52 - get out of that
10:54 - um you're gonna need to install it from
10:56 - pip install opencv dash python okay i'm
10:59 - new to python so what is pip firstly
11:02 - like for for those that don't know
11:05 - uh python
11:08 - uh i forget what it stands for but it's
11:09 - it's a package oh package installer
11:11 - python or something okay so it's like
11:13 - it's a bit like npm then right
11:16 - yeah yeah so it just allows you to
11:17 - install
11:18 - um a bunch of libraries that are for
11:21 - python so there's pip there's anaconda
11:23 - um there's homebrew there's a there's a
11:25 - few you can use to download different
11:27 - things but we're just using pip it's the
11:29 - it's the simplest one in my opinion so
11:31 - yep just run pip and then this is a
11:32 - command install and then we're going to
11:34 - be installing opencv dash python it
11:36 - might be python opencv just try both and
11:38 - the one that works works and if you're
11:40 - having issues with that then adding
11:41 - headless at the end
11:43 - um can sometimes fix stuff
11:45 - but yeah just do that or do a google
11:46 - search if you really can't figure it out
11:47 - once you have opencv installed
11:49 - then um then we can start coding okay
11:52 - yep so
11:54 - um you can we can just import cb2 so
11:57 - that's the very first step it's just
11:58 - importing
11:59 - um opencvs this two is uh the second
12:02 - version there's the second version of
12:04 - cv2 i actually don't know why it's like
12:05 - that but cv2 is the library for opencv
12:08 - okay and let's just start with
12:12 - uh this just to make sure that our code
12:14 - is running correctly so open cv2
12:17 - yeah i mean import cv2
12:19 - and then
12:21 - it's big enough
12:22 - yeah and that's how we run our python
12:23 - very right
12:25 - script we write python with the file
12:27 - name dot pi and that's it right
12:30 - yep just make sure you're in the same
12:31 - directory so in my case i'm actually um
12:34 - in a folder but and then make sure
12:35 - you're in a folder here if you guys
12:36 - don't know how to do that then
12:39 - um i mean
12:42 - yeah i don't want to make this too much
12:43 - of a command line
12:44 - thing but cd is change directory yep
12:47 - yeah so actually let me just go back
12:49 - here
12:50 - so see i'm on the desktop here you
12:51 - probably
12:52 - um will actually
12:54 - you'll probably be here when you open
12:56 - your terminal it might look different
12:57 - but you'll probably want above the
12:58 - desktop you're going to want to put cd
13:00 - and then just type in desktop to go to
13:02 - your desktop
13:03 - i'm in the desktop and then from there
13:05 - you're going to want a cd to
13:08 - open cv well this is the name of my
13:09 - folder it's opencv default uh smile
13:11 - detection and then from there now i'm in
13:13 - this folder and then i can run this
13:15 - command okay because the file is located
13:17 - okay
13:19 - yeah i don't know so
13:21 - smart detector dot pi
13:22 - yep and if we run this
13:25 - it should just print what's up because
13:26 - that's all we have in here okay so it's
13:28 - working correctly um that also means
13:30 - this is working correctly it'll pop an
13:31 - error for you if you don't actually have
13:33 - it installed correctly but this one it
13:34 - just doesn't say anything if it says
13:36 - nothing you mean you got it installed
13:37 - correctly if it says something you gotta
13:39 - install it correctly go ahead
13:40 - all right
13:41 - so let's just move on okay let's do it
13:44 - let me pull some of these code from down
13:46 - here so
13:47 - first thing i said is we're gonna
13:48 - actually start with just the face
13:50 - section so let me copy the comments as
13:51 - well just so like we have a nice
13:54 - um
13:55 - nice app with comments and everything
13:57 - nice
13:58 - so face
13:59 - classifier
14:01 - all right so here this is a pre-trained
14:03 - model for detect faces like all the
14:05 - fancy machine learning stuff happens in
14:06 - here it's just a bunch of numbers that
14:08 - the image gets passed through and then
14:09 - it tells you face or not that's all it
14:11 - is you pop in an image to this and then
14:13 - it says yes or no and it gives you an
14:15 - answer right again if you want to see
14:17 - how this is actually made the whole
14:18 - algorithm step by step without
14:20 - everything that's happening inside the
14:21 - computer then you can go watch one of
14:22 - the other
14:23 - face detection or car and pedestrian
14:25 - tracking videos yeah i think it's worth
14:27 - saying let's just start with just just
14:29 - like uh from my understanding all right
14:31 - like a classifier is something where we
14:33 - have like some kind of input right
14:36 - and then we have this model so in this
14:37 - case we have the har cascade frontal
14:39 - face so some kind of like model is is
14:42 - inside of that classifier and then so
14:44 - let me go ahead and i'm just dropping on
14:46 - the screen so we have some kind of model
14:47 - and then from that so we have some kind
14:49 - of input right
14:51 - then we have a model and then we have
14:55 - a sec
14:56 - and then we have some kind of output and
14:57 - what would that output say whether like
14:59 - a certain value which says if you're
15:01 - smiling or not right
15:03 - yeah literally just a one or a zero yeah
15:05 - it'll just say yeah one or yes or no but
15:08 - yeah but well technically it'll give you
15:10 - coordinates on your image of where the
15:12 - box is around the face
15:14 - in practice but i mean basically it just
15:16 - kind of says yes or no okay um
15:20 - kinda i mean it the implementation is
15:22 - different but the idea is it'll just say
15:23 - smile or not smile that's all it'll say
15:25 - right so we have some kind of input a
15:27 - classifier which is what we're using
15:28 - here which is our cascade and then some
15:30 - kind of output which is
15:32 - whether it's telling us if it's smiling
15:33 - or not or some kind of coordinate but
15:35 - that's that's how it roughly works guys
15:37 - so as aaron said you pretty much this is
15:39 - the line of code to go ahead and get
15:40 - that working nice yep carry on
15:42 - yeah actually i guess i can explain a
15:44 - little tiny bit technically if you have
15:46 - a whole entire image or a frame from the
15:48 - video
15:49 - then it will look over every little box
15:51 - inside that and then it'll tell you if
15:53 - each boxes of different sizes if that's
15:55 - a face or not or if that's a smile or
15:57 - not no so that's what it's actually
15:58 - saying if it's a yes it sends you the
16:00 - coordinates within the whole image of
16:02 - the little box and then that's how we
16:04 - draw the little box because we have the
16:05 - coordinate and we can just draw a box at
16:06 - that coordinate so that's actually
16:08 - what's happening so
16:10 - it's the whole image and then you just
16:12 - go over the whole thing and then choose
16:14 - it like no no no no no no oh found a
16:15 - face that's a yes give me the coordinate
16:17 - and then no no no again so if there's
16:18 - multiple faces it'll find multiple faces
16:20 - as well awesome okay so it's not just
16:22 - one phase we can support mobile faces
16:24 - are nice so yeah we
16:26 - just dropped a 100 rupee donation says
16:29 - thank you so much for sharing awesome
16:30 - thank you dude let's carry on thank you
16:34 - yeah here actually let's uh let's run
16:36 - the code really quick yep um i want to
16:38 - show it with two faces i didn't show
16:40 - with two oh nice yeah i should have
16:41 - shown it with you real quick i can just
16:43 - use my phone
16:48 - there we go well i mean hopefully it
16:50 - works it might bug out because one of
16:51 - them is an image yeah but we'll see
16:55 - oh nice
16:57 - that's dope dude
16:59 - this is smiling yeah and it's real time
17:01 - and it's quite performant like that's
17:03 - that's pretty like fast like it's as you
17:05 - move your phone around if you try and
17:06 - move it around fast
17:08 - yeah look at that that's just smooth
17:10 - nice
17:12 - okay and so there's some kind of loop
17:14 - i'm guessing this running or like some
17:15 - kind of thing that's going to happen
17:16 - there yeah
17:18 - yeah we're just pulling out the let me
17:20 - clear this we're just pulling out the
17:22 - the webcam footage okay
17:24 - webcam it's the easiest way to get some
17:26 - real-time footage yeah i mean this could
17:27 - be a security camera could be a whatever
17:30 - but
17:31 - in our case we're just gonna be using
17:33 - the webcam go ahead nice all right so
17:36 - let's do that next let's just pull out
17:37 - the webcam and show you how to get the
17:38 - webcam with opencv if you guys are
17:40 - watching the other streams you guys know
17:41 - how to do this you'd be very comfortable
17:42 - by now it's the third time we're doing
17:43 - it
17:44 - but
17:45 - let's just do this
17:48 - right there
17:50 - and this is the best way to do it
17:51 - because then there's no typos and i
17:53 - don't embarrass myself all right sonny
17:55 - that's true
17:57 - i'm sure that happens a lot yeah anyways
18:00 - so this is how you want to grab your
18:01 - webcam um we just call it webcam with
18:04 - variable you need to have a variable for
18:05 - that because this is how we access all
18:06 - the webcam stream footage
18:08 - uh but really it's just video capture so
18:11 - um you just call the opencv library dot
18:14 - video capture and if you put zero this
18:16 - is the webcam but you could actually
18:17 - also put like something like whatever
18:19 - dot mp4 okay you could also get video
18:21 - files and run it on there
18:23 - um like that joker like the joker one
18:25 - that i had yeah over here this is how i
18:27 - did that i just imported this file
18:29 - and then i ran it through and then i
18:31 - recorded it and put it back here but for
18:33 - us
18:34 - zero is webcam nice go ahead so it's
18:37 - popping zero
18:38 - and
18:40 - let's just
18:42 - uh i think you see that m show okay
18:46 - no no no not dim show uh
18:48 - what is it
18:49 - i always get confused between
18:51 - between uh footage and
18:53 - yeah it is m show okay
18:55 - i always get confused between um
19:00 - images
19:01 - so
19:03 - yeah show the current frame so let's
19:05 - just pop in a quick loop and just show
19:07 - the webcam live to the screen okay so
19:10 - and from here then it should be
19:13 - uh we should clean up i think it's
19:14 - destroy all windows yeah cv2
19:17 - and and uh
19:19 - oh okay you have to release the webcam
19:20 - as well yes
19:22 - yeah i just clean i mean you technically
19:23 - don't have to but i mean it's just like
19:25 - good practice so this here is what's
19:26 - actually going to show so while true
19:29 - um we're just going to be
19:31 - uh
19:32 - showing the frame oh i forgot another
19:33 - line of code we're actually going to
19:34 - need
19:35 - um
19:37 - one more this is actually a big chunk
19:39 - side let me go line by line let me just
19:40 - get this last one here yep
19:42 - get it here it is
19:44 - i read the current frame
19:48 - all right nice let me go line by line
19:50 - because this this kind of was a big
19:51 - chunk so what's happening here is after
19:53 - we get the webcam the webcam variable
19:56 - um
19:57 - uh how we how we get a frame is we
20:00 - actually
20:01 - uh actually let me just show this real
20:02 - quick so let me
20:04 - comment out all this just so that we can
20:06 - go step by step it's a better way doing
20:08 - this on the fly guys
20:10 - yeah
20:11 - so here here we go look at this single
20:13 - line here ignore everything after that
20:15 - okay okay
20:16 - um we can
20:17 - okay we'll do this why
20:21 - the way i like to do it
20:23 - code completed so if this prints
20:25 - yeah it means if it prints then there's
20:27 - no errors because it's at the end but so
20:30 - this is how we actually read the webcam
20:32 - so you call dot read on the webcam and
20:35 - what this returns is a tuple so this is
20:37 - actually a two a two tuple so this is
20:40 - the first one first element this is the
20:42 - second element okay
20:44 - and
20:45 - oops
20:46 - what this is this is just a boolean of
20:48 - if it was a successful frame read or not
20:50 - and the second one is
20:53 - uh the actual frame so this is like an
20:54 - image that we can actually
20:56 - um run things on so let's actually just
20:58 - show that okay now i can grab the
21:01 - cv2.imageshow but right there
21:05 - and this is the name of the window so i
21:07 - just put y so serious but you can put
21:08 - smile detector if you want yup okay
21:12 - and let's go back to the terminal
21:14 - oops
21:15 - what did i do
21:21 - there we go small detector yep
21:24 - and
21:25 - there's oh i forgot one more so
21:27 - after this you're going to need to run
21:31 - cv2.weight key okay and what does this
21:34 - do let's
21:36 - what this does is so what happens is
21:39 - we get the webcam okay and then we call
21:42 - webcam.read which is just reading from
21:44 - the webcam stream
21:46 - and it'll get the first frame the very
21:47 - first frame of the webcam video yeah and
21:49 - then if it succeeded now but ignore this
21:51 - for now it'll get the first frame then
21:53 - from here it'll say cv2.imageshow
21:56 - image show means it'll show that image
21:58 - to the screen
21:59 - we're going to show frame what the and
22:01 - then the window name will have small
22:03 - detector like up here at the top of the
22:04 - window will be small detector nice the
22:06 - thing is this shows only for a split
22:08 - second as long as it needs to and then
22:10 - it quits out right what this does is it
22:12 - says let's wait for a key before we
22:14 - continue to the end of the program so
22:15 - it'll stay open till we press a key okay
22:17 - this basically means display
22:19 - right okay so this is so this means that
22:21 - without this line of code it pretty much
22:23 - hides it super quick so now we're saying
22:25 - wait until wait until you press a key on
22:26 - your keyboard to hide it right
22:28 - yeah pretty much and this is here
22:30 - because once we're going frame by frame
22:32 - you don't want to be pressing a key
22:33 - every time the frame changes it's going
22:35 - to automatically change in real time
22:36 - okay so we really only need this for
22:39 - uh this case of doing just the the first
22:41 - frame of the image so let's run this
22:44 - and
22:45 - [Music]
22:46 - see what happens there we go so that's
22:48 - the first frame
22:49 - okay so like it's not an actual video
22:51 - it's just one frame okay um but we're
22:53 - gonna wrap this in a loop and then we'll
22:55 - see it in real time okay oh i see okay
22:58 - so you just got a single frame okay i
23:00 - got you i'm with you yep
23:01 - yep yep because dot read will read a
23:03 - single frame okay and then it keeps
23:05 - track of where it is so every time it
23:06 - calls dot read it'll read the next frame
23:08 - next next frame so we just wrap this in
23:10 - a loop and that's how we can get the
23:11 - real time webcam footage right so i'm
23:13 - just going right reads a single frame
23:15 - right read single frame oops
23:18 - yeah nice okay you're taking notes for
23:20 - them yeah
23:22 - there we go awesome nice bro i'm running
23:24 - out of coffee this is uh
23:26 - this is a disaster
23:30 - so this makes sense yeah we're going to
23:31 - read a single frame and then we're going
23:33 - to wrap it in some kind of loop so we
23:34 - get that real-time functionality
23:37 - exactly which is what we're going to do
23:38 - down here uh so let's get back to
23:41 - here now but i'm just going to plug in
23:42 - things one by one
23:44 - so like i said uh just a webcam and then
23:46 - read a single frame display that frame
23:48 - and then display that frame like wait
23:50 - until a key is pressed before you hide
23:52 - before you hide the frame okay so now
23:54 - all we want to do is just
23:56 - pop this in a loop okay
23:58 - so we got the webcam here now
24:01 - um the loop is going to be here because
24:03 - once we have the webcam we want to keep
24:05 - calling.read on each frame over and over
24:07 - again yeah okay so we will just want to
24:09 - run this forever and that's why it's a
24:10 - while true loopy it's going to run
24:11 - forever until we're done
24:13 - um so let's
24:15 - pop all of
24:16 - this into there
24:20 - and
24:22 - uh from here i'll let me get the clean
24:24 - up code okay so this here at the end let
24:26 - me let me show you guys this real quick
24:29 - this here is just some cleanup okay so
24:31 - it's not super important it's kind of
24:32 - boring code but i'm just going to say at
24:33 - the end of the whole app you want to
24:35 - make sure you have a webcam dot release
24:37 - it's just letting the operating system
24:38 - know that hey this app is done using the
24:40 - webcam free up all resources so that
24:42 - something else can use like zoom or
24:44 - skype can now use the webcam without any
24:46 - uh memory issues go ahead
24:48 - and then
24:50 - and then the last thing is uh cv2 to
24:53 - destroy all windows so this just kind of
24:55 - closes all windows to make sure
24:56 - nothing's still open okay because
24:58 - sometimes that happens
24:59 - yeah this is a cool little thing i
25:00 - forgot about what i found recently so
25:02 - very handy
25:04 - yeah
25:05 - um okay so after this then
25:09 - we get a webcam we have a while loop and
25:12 - same exact thing so this should work the
25:13 - only caveat is uh if this is empty it's
25:16 - gonna
25:17 - keep waiting for a key press so let's
25:19 - let's run this and then i'll show you
25:21 - how that works
25:23 - so here we go it's a frozen frame but as
25:26 - i press a key it keeps going to
25:28 - different iterations of loops so it
25:29 - keeps running
25:30 - it keeps
25:33 - yeah and each time i hit it it gets the
25:35 - current frame because it's calling dot
25:37 - read all right so calls.read on the
25:39 - frame yep dot free and if i spam it
25:43 - and then kind of like real time but
25:45 - that's annoying so what we actually want
25:47 - to do is
25:49 - yeah what we actually want to do is dot
25:50 - weight key actually just waits until the
25:52 - key is pressed uh forever but if we put
25:55 - something in here this is how many
25:56 - milliseconds it'll wait before it
25:57 - automatically goes by right so if we put
25:59 - one it'll automatically spam a key every
26:02 - one millisecond and
26:04 - that's kind of like the behavior if i
26:06 - put like a million then it would just
26:07 - wait a million that'd be too long would
26:09 - be like 10 minutes yeah but if i just
26:11 - put one millisecond now when i run this
26:13 - this should be updating every
26:15 - millisecond by itself and i should be in
26:16 - real time so let's give it a shot nice
26:19 - well let me quit out let me quit out of
26:20 - the old one
26:23 - oh wait i gotta i gotta kill it one
26:24 - second
26:28 - how do you kill it in uh uh it should be
26:30 - as h it should be ctrl c yeah so if you
26:33 - just spam ctrl c sometimes it takes a
26:35 - little bit
26:38 - uh
26:40 - oh it's not working
26:42 - i'll just force quit yeah also guys you
26:44 - just want to drop in before wiring
26:46 - sorting now we have one comment over
26:48 - there there's one
26:50 - jazz says bernard you people are really
26:52 - amazing awesome i have no words to
26:54 - express my feelings it's only because of
26:55 - you people today i got a job at google
27:00 - at google he got a job at google did
27:03 - that's insane
27:05 - damn
27:06 - like seeing that holy crap i couldn't
27:08 - even get a job of google what is
27:10 - bro bro get this guy on the stream he
27:11 - should be teaching not me i know yeah
27:15 - we love that guys and we also got
27:17 - another donation from tech programmer
27:20 - thank you very much dude we massively
27:22 - appreciate that and also yeah it's
27:23 - amazing guys drop us questions in the
27:25 - chat and we'll literally we'll be happy
27:27 - to answer it as the stream goes on we
27:29 - really love when you guys engage with us
27:31 - and let us know yeah
27:33 - yeah hey whoever landed the job at
27:35 - google send uh send me and send me a dm
27:37 - on instagram and then uh we want to hear
27:39 - a little about your story that's awesome
27:40 - oh yeah that's exciting yeah what was
27:42 - his name sunny what did he say he said
27:44 - yeah let me go ahead and find it again
27:46 - so what is his name
27:48 - i don't have it on i don't think so i've
27:50 - just popped it open it says
27:52 - [Music]
27:54 - well meek ajax got it all right we'll
27:56 - meet yeah we'll be expecting you to dm
27:58 - us okay yeah awesome yeah i'm the google
28:01 - guy yeah i'm the google guy
28:03 - that's insane dude we love that nice
28:06 - kind of jealous actually yeah you soured
28:09 - my mood
28:10 - [Laughter]
28:12 - that's amazing great that's exciting we
28:14 - have another awesome comment by she goes
28:16 - you guys are just amazing i've learned a
28:18 - lot from this live stream your work is
28:20 - very inspiring thank you so much that's
28:22 - awesome dude thank you for watching
28:26 - all right let's go all right let's go
28:28 - yeah yeah it did the control c didn't
28:30 - work so i don't know what's happening
28:31 - but i just killed it manually yeah
28:34 - um
28:35 - so where were we before i got distracted
28:38 - oh i was running uh the frames yeah so
28:40 - when i run this again
28:41 - it should actually refresh every
28:43 - millisecond by itself okay so that's how
28:45 - we fetch this
28:46 - let's run this
28:48 - and go back here
28:50 - and there we go
28:51 - so i'm feeding the webcam footage i mean
28:54 - opencv is getting the webcam footage the
28:56 - webcam stream and it's just displaying
28:59 - it in this window and then i called it
29:01 - smile detector right
29:03 - okay so
29:04 - so that that by putting one inside of
29:06 - the weight key that's pretty much saying
29:08 - every second every second like go to the
29:10 - next frame right
29:12 - yeah like it says only wait for one
29:14 - second it says wait for one second then
29:16 - press it press a key like like a fake
29:18 - key like a pretend key and then it
29:19 - presses a key every one second
29:21 - okay so
29:22 - this waits one this way it's one
29:24 - millisecond yeah but nothing waits
29:26 - infinitely nice that's the difference
29:28 - awesome or ten we could do ten ten
29:30 - milliseconds is fast so this would still
29:32 - work but it doesn't really matter
29:33 - awesome
29:34 - all right yep
29:36 - nice
29:38 - and
29:39 - okay let's see if it'll kill
29:41 - okay so now control c is working nice i
29:43 - don't know what this red thing means
29:44 - sunny sunny had me installed this weird
29:46 - shelting zsh i've only used it like once
29:48 - but i ran away but he says it's colorful
29:50 - yeah usually i think that's when your
29:51 - branch is dirty i think so i mean that's
29:54 - usually
29:56 - something like that yeah yeah
29:59 - yeah i changed the i probably changed
30:01 - the code in here and then it changed but
30:02 - no big deal just ignore this like the
30:04 - color of the arrow
30:06 - but
30:07 - yeah let's just move on okay
30:09 - so
30:10 - i can actually get rid of
30:13 - this stuff because it actually pulled
30:15 - everything out so now we're back to the
30:18 - code ran without errors
30:20 - nice
30:22 - okay uh here let me just pop in some
30:25 - comments
30:27 - we have 350 people watching right now so
30:30 - thank you so much for watching and yeah
30:32 - if you're enjoying what you what you're
30:34 - seeing right now um with the face
30:36 - detection you think it's pretty cool all
30:37 - we ask is that you just smash the thumbs
30:39 - up button and that will help this video
30:40 - get out to more people
30:42 - nice
30:43 - yeah
30:44 - yeah like smash the track pad like slam
30:46 - your mouse just
30:48 - hit it as hard as you can
30:54 - domestic violence and domestic pilots in
30:56 - the software program
31:01 - that's a terrible joke but
31:03 - uh
31:04 - so yeah this is step one all right so we
31:06 - go we got the webcam footage in here all
31:08 - right you guys should be comfortable
31:09 - with this if you guys done this before
31:10 - pretty straightforward
31:12 - now uh one sec one check we want to put
31:14 - in though is actually this
31:17 - so i mean it wasn't it wasn't breaking
31:19 - before but we do want to put in a check
31:21 - here
31:22 - right here so after we read the the
31:23 - frame
31:24 - okay the first frame with the dot read
31:26 - method the first variable or i mean the
31:28 - first element is actually a boolean of
31:31 - if the read was successful or not okay
31:33 - so all i want to do is put yeah because
31:35 - sometimes it might bug out um what the
31:37 - webcam is usually fine but for a video
31:39 - file if you're reading in an mp4 or
31:41 - something like you put a video file in
31:42 - here like sometimes if one of the frames
31:44 - is corrupted or whatever then um it'll
31:46 - not work so just kind of put a safe
31:48 - check in here so
31:50 - if it wasn't a successful successful
31:52 - frame rate just break out of this while
31:54 - loop and just like abort the program and
31:55 - it'll go down to here and close
31:56 - everything so that it doesn't break it
31:58 - just kind of quits so
32:00 - yep that's that's all that is just a
32:02 - quick quick little
32:04 - aaron somebody asked a decent question
32:06 - they said how can i install the face xml
32:08 - file so the one that we used at the top
32:10 - where did you actually get that from
32:12 - again
32:13 - uh the opencv github document uh
32:16 - github repo so they they provide all of
32:18 - that the link is in the description so
32:20 - you can just go down and scroll to the
32:21 - bottom and just download this uh the
32:24 - face xml file there's also a smile one
32:26 - but we haven't gotten there yet we're
32:27 - going to be using both we need both to
32:29 - make this work um you'll see you guys
32:31 - will see later why that is yeah but
32:35 - yeah let's just continue let's do it
32:38 - uh-huh so after we get the frame read
32:41 - and we have this little check here
32:42 - then uh let's actually start detecting
32:44 - faces okay so if you guys watch the face
32:46 - detection video you guys already know
32:47 - how to do this pretty straightforward
32:49 - it's a very similar but there's a little
32:51 - trick here that you guys are probably
32:52 - going to blow your minds at some point
32:55 - hopefully
32:56 - but but maybe not
32:59 - okay so after we got the frame
33:02 - to actually run
33:04 - face detection on the current frame
33:06 - using this xml we need to use i mean
33:09 - we're using opencv of course it's a very
33:11 - simple
33:12 - code it's just like detects faces pretty
33:13 - much
33:14 - but we do need to
33:17 - yeah we do need to change the frame to
33:19 - black and white though this is just an
33:21 - optimization
33:22 - because um in a black and white image
33:24 - you can still you can still tell what a
33:26 - face is you know if a human can can
33:28 - still tell then the computer can still
33:29 - tell and then there's less data to deal
33:30 - with but the actual like you know
33:34 - recognition ability of a face isn't
33:37 - hindered by it being black and white so
33:38 - we just converted to black and white to
33:40 - greatly optimize it it increases it by a
33:42 - lot actually because
33:44 - rgb has three channels black and white
33:46 - only has one channel that's super
33:48 - interesting i had no idea that that
33:49 - would be an optimization so we're making
33:51 - a grayscale so that it actually reduces
33:53 - like the sort of not that the amount of
33:55 - processing they have to do on the the
33:56 - video
33:58 - yeah because you're kind of just like
33:59 - jumbling rgmb together into one number
34:02 - you know red green and blue because then
34:04 - you can just kind of be like oh then you
34:05 - can just play with brightness you can be
34:06 - like okay um somebody's eyes look a
34:09 - little bit darker than their bright
34:10 - cheeks something like that
34:13 - nice
34:14 - or somebody's eyebrows are darker than
34:16 - the forehead you can just you just want
34:17 - to see the relationship of brightness
34:18 - between different areas on the thing and
34:20 - those all added together if you do it
34:22 - enough
34:23 - you'll eventually define a face like
34:25 - okay eyebrows darker than forehead
34:27 - eyebrows darker than nose
34:29 - lips a little bit darker than cheeks
34:30 - eyes a little bit darker than cheeks
34:32 - stuff like that like hairline a little
34:34 - bit darker
34:35 - than um if you have dark hair so like
34:37 - it's just those kinds of things over and
34:38 - over um you eventually can can
34:42 - um explain to a computer what a face
34:43 - looks like after thousands of those
34:45 - little relationships
34:46 - or car or pedestrian or anything or a
34:48 - smile in this case also like teeth you
34:50 - know yeah teeth are lighter than your
34:52 - lips so like it would understand what a
34:54 - smile is nice okay that's awesome i
34:57 - would never have thought i'd be
34:58 - optimizations that's that's cool also
35:00 - just to jump in chin moy khalia says
35:02 - again because of you i'm able to make my
35:04 - college fees by freelancing just want to
35:07 - throw that in
35:08 - i love stuff like that
35:10 - thank you dude i feel like these people
35:11 - are making making more money than us
35:13 - like kind of kind of upset
35:23 - helping a guy make money so he can go to
35:25 - school to learn from people that are not
35:27 - us
35:27 - is that is that actually a win for us
35:29 - sonny is that actually a win for us
35:31 - let's think about this for a second i
35:32 - think we should come to the stream
35:36 - abort yeah
35:38 - nice cut off signals
35:41 - oh got it
35:43 - what i love though anyways is that is
35:45 - this like literally so few lines of code
35:47 - to get this all working
35:49 - yeah that's what i love about it too and
35:51 - then if you if you optimize everything
35:53 - under the hood which is how you should
35:54 - be doing stuff like if you use like c or
35:56 - c plus plus under the hood um then it's
35:59 - still pretty fast but you can be very
36:00 - expressive with your stuff i think
36:01 - that's why they choose it for machine
36:03 - learning because there's a lot of weird
36:05 - yeah there's a lot of weird nasty stuff
36:08 - and you actually see the power of python
36:09 - here later
36:10 - on if this was written in javascript
36:13 - it'd probably be like two or three times
36:14 - as long you know like yeah
36:16 - maybe not yeah i could vouch for that
36:18 - yeah
36:20 - of course this is this is nice and clean
36:23 - compared to javascript
36:24 - all right let's carry on yeah i don't
36:26 - like javascript yeah yeah
36:29 - i know no javascript is amazing sonny i
36:31 - don't want to hurt your feelings i know
36:33 - it's gonna make me hook out guys
36:36 - you might
36:37 - you just see a video yeah
36:39 - reconnecting it
36:43 - nice
36:44 - all right let's go sunday sonny's the
36:46 - hulk that's his nickname
36:49 - um
36:50 - but
36:51 - yeah let's continue on so once it's gray
36:53 - once it's gray okay this is actually a
36:54 - requirement like opencv you have to take
36:56 - it um and so
36:58 - oh i should explain all this so what
37:00 - this is is opencv has a
37:03 - function called convert color which just
37:04 - allows you to convert the color of an
37:06 - image um to to black and white or back
37:09 - and forth or just the red channel or
37:10 - just a blue channel you can do all
37:11 - different kinds of things but in our
37:13 - case we just want to change something
37:14 - from a color image
37:16 - to
37:17 - um gray okay
37:19 - well this is a bgr which is rgb
37:21 - backwards and then two gray so that's
37:24 - all this means there's like different
37:25 - encodings we can use so we're gonna be
37:27 - using this one to convert this from a
37:28 - color image to gray so let's actually
37:31 - run this now go ahead and
37:33 - actually what we need to display the
37:35 - actual black and white frame
37:37 - i feel like i've done this a bajillion
37:38 - times because i actually have it might
37:39 - be boring some people who've seen the
37:40 - other streams but whatever
37:43 - and there we go
37:44 - black and white
37:46 - webcam yep so you can still tell that
37:48 - this is a face you can still tell but my
37:50 - mouth is smiling
37:52 - so we don't need color to be already
37:54 - stuff it actually looks like it's
37:55 - smoother it actually looks a bit
37:57 - smoother when it is yeah
37:59 - because there's there's only a third of
38:00 - the data you know with color you have
38:02 - three channels or four channels actually
38:05 - there's a brightness channel as well
38:06 - yeah um but on this one it's just the
38:08 - brightness channel that's nice that's it
38:10 - so it's actually four times as fast
38:12 - because there's one channel versus four
38:14 - channels
38:15 - awesome
38:18 - and let me just quit out on the terminal
38:21 - control c
38:23 - and let's just clear this up because
38:25 - it's getting messy nice
38:27 - all right so there we go black and white
38:29 - frame now it's literally as simple as
38:31 - popping this grayscale frame into
38:34 - our
38:35 - um classifier for faces yeah and it'll
38:38 - spit out the coordinates of where my
38:39 - face is and then we can just draw a
38:41 - rectangular on my face and bada bing
38:42 - bada boom that's a face detector
38:45 - um that's the first and then we gotta do
38:47 - smiles you have to like overlap them in
38:48 - some weird way and there's some cool
38:49 - little there's a little trick i'll show
38:50 - you guys later that is critical for this
38:52 - to work and then some tuning you have to
38:54 - tune some variables at the end too which
38:57 - actually make it work properly but i
38:58 - love how simple you make it like yeah
39:00 - you know we just gotta use this machine
39:02 - learning classifier and then you know
39:04 - we're gonna get some coordinates back
39:05 - and then we just gotta draw a box around
39:06 - the face
39:08 - you gotta do that you've gotta have an
39:10 - infinite loop
39:14 - i mean i'm explaining every line so i
39:16 - feel like people can follow along if
39:17 - they know python if not then uh
39:20 - you know i'll fire myself yeah donald
39:22 - trump
39:23 - nice
39:26 - yeah so let's go down here
39:29 - and actually
39:30 - just detect faces okay let's do that
39:34 - here
39:35 - i might go a little bit faster because
39:36 - i'm just kind of this this is like
39:37 - repeating the face detection stream yeah
39:39 - we haven't even gotten to the smile
39:40 - stuff yet but here here's the line for
39:42 - detecting the actual faces okay so
39:46 - yep so how this is going to work is we
39:48 - have our classifier up here okay face
39:50 - detection face detector which we created
39:54 - from this xml file which has like all
39:55 - the data about like what a face actually
39:57 - looks like depending on the brightness
39:59 - relationships like we talked about okay
40:01 - um like and then from there so we have
40:03 - this the space detector now with this
40:05 - face detector
40:06 - okay with this face detector we can call
40:08 - a function called detect multi-scale
40:11 - okay okay and then it just takes in an
40:13 - image and then
40:14 - um so what this will do it will
40:17 - uh tell us where all the faces are in
40:19 - this image okay it'll say oh there's a
40:21 - face here there's a face here there's a
40:23 - face here and that's what it'll do
40:26 - so is it retaining an array
40:29 - yes an array of points okay an array of
40:32 - rectangles so the reason it's called
40:34 - detect multi-scale is because you just
40:36 - want to detect
40:38 - uh faces of any scale so if there's a
40:40 - small face you want to detect a small
40:42 - face if there's a big face you want to
40:43 - take the big big face
40:44 - and you want to detect multiples of them
40:46 - so you detect all of them that's why
40:48 - it's called detect multiscale
40:50 - because we can really pop in we can use
40:52 - i mean we can use any detector like we
40:54 - have a dog detector or a cat detector we
40:55 - could also detect multi-scale of cats or
40:57 - dogs okay so that's why it's called that
41:00 - nice okay
41:02 - [Music]
41:03 - so it takes in a frame a black and white
41:05 - frame and then uh it'll say okay at
41:08 - these at these places there are faces in
41:10 - this image and that's what this is so
41:12 - this is just an array of points yeah uh
41:14 - in my case there's it's going to be
41:15 - array of length one because there's only
41:17 - one face but when i had the joker on the
41:18 - face um when i had joker on my on the
41:21 - screen too yeah and look let me pull
41:23 - real quick then there would actually be
41:25 - so when there was both of us
41:27 - yeah then there would be these faces
41:29 - would be a length two because there's
41:30 - two faces in the
41:32 - the
41:33 - in the video go ahead it makes sense
41:35 - okay
41:36 - yep so from there
41:38 - uh let's just print out actually
41:42 - uh faces okay so this is just gonna be a
41:44 - list
41:46 - let's just show this and it's going to
41:47 - spam the terminal here
41:50 - over and over again because we're in an
41:51 - infinite loop remember
41:53 - so as i'm here oh nice you can see the
41:56 - you can see the location of my face is
41:58 - being detected and then it's just being
42:00 - spit out here okay so like x y
42:03 - coordinates you know like blah blah blah
42:05 - yeah and then from this we can just draw
42:08 - a rectangle on the face
42:10 - that's it
42:11 - that's clean man i was expecting like
42:14 - some really intense stuff for that
42:15 - that's super clean how it comes back
42:17 - like
42:18 - yeah yeah that's it so it's it's uh it's
42:21 - a list
42:22 - of lists so if there's two faces so
42:24 - actually watch this
42:28 - now there's two faces hey
42:31 - look at that
42:32 - see how there's two faces on the screen
42:34 - yeah
42:35 - and then when i get rid of it we're back
42:36 - to one phase the list is length one now
42:39 - the list of of length two
42:42 - and
42:43 - that's nice okay quiet
42:45 - and if there's three then you know three
42:47 - if there's a bajillion
42:49 - yeah
42:50 - we're in the matrix you know mr anderson
42:53 - agents going i think it's what i'm
42:55 - saying guys like just from like that
42:58 - classifier you're able to do all of this
43:00 - so this is just the power of machine
43:02 - learning like and like
43:04 - this is a face detector a human face
43:06 - detector but you could easily go and
43:07 - pick up like a dog detector put that
43:10 - here and i guess it would do the same
43:11 - thing right
43:13 - you can detect anything so
43:15 - a hard cascade is a single algorithm
43:17 - that can detect any arbitrary object so
43:19 - basically we're you're like if the
43:21 - computer was a person we're literally
43:23 - downloading this is what a face looks
43:24 - like into its brain that's literally
43:26 - what this is doing you just have to
43:28 - teach this before we give it to it so
43:30 - this was a result of machine learning
43:32 - with a bunch of face images that
43:34 - somebody created and it takes probably
43:35 - like a few hours or a few days to
43:38 - create it but then once it's created
43:39 - then anybody can use it so that's kind
43:41 - of the power of it awesome got you
43:44 - yep and of course heart cascade is just
43:46 - one algorithm for for object detection
43:49 - whether whatever object happens to be in
43:50 - our case of face or smile yeah there's
43:52 - many algorithms but this is the simplest
43:54 - and oldest one it's actually based on
43:55 - viola jones um these names probably mean
43:58 - nothing but if you don't look it up look
43:59 - up viola jones algorithm yeah and then
44:02 - um our cascade so these are just names
44:04 - of people who came up with them back in
44:05 - like the 70s or 60s or whatever nice but
44:08 - awesome
44:10 - smart smart people yeah very smart
44:11 - people
44:12 - so
44:13 - okay so that's the face so uh from here
44:16 - we just want to draw those rectangles
44:18 - back on the image here and then when we
44:21 - show it then it'll actually have the
44:22 - rectangles drawn on this as well instead
44:24 - of just showing just the raw frame okay
44:26 - so
44:28 - that's really all we're doing uh then
44:30 - from there then we can get to the smile
44:31 - stuff so at this point we probably
44:33 - should just at the beginning oh if you
44:34 - want to get to the smile part just skip
44:35 - ahead but it's too late this is a stream
44:37 - yeah for anybody watching the replay but
44:40 - i mean i guess it is what it is yeah
44:41 - yeah we got 45 at 0.45 45 minutes or so
44:45 - like that's when we start the smart
44:46 - stuff so yeah we can add that in the
44:48 - comments afterwards
44:50 - uh yeah let's put the timestamps and
44:52 - then you know like the youtube has that
44:53 - nice that thing now or like where the
44:55 - play bar is like segmented that thing
44:57 - might blow exactly yeah that's insane
44:59 - bro you should do that that would be a
45:00 - cool clone to do you should be like
45:02 - youtube you know segmentation clone like
45:04 - you scrape out like the the stuff and
45:06 - you segment the video or something i
45:07 - don't know would it be cool yeah
45:11 - all right stay tuned tomorrow for that
45:12 - because sonny's a beast can code things
45:13 - in five minutes
45:15 - guys just as another reminder we
45:17 - actually have quite a few people on this
45:18 - live stream right now tomorrow if you're
45:20 - excited
45:21 - we are building a whatsapp clone so we
45:24 - are building a whatsapp phone tomorrow
45:26 - it's going to use firebase it's going to
45:27 - have a real-time chat functionality so
45:29 - if you're excited about that smash the
45:31 - thumbs up and make sure you set a
45:32 - reminder
45:35 - have you quoted imessages yet in the
45:36 - imessage clone no that's a good idea
45:39 - yeah we'll do that as well yeah
45:42 - you should do that because either
45:42 - facebook messenger but you should do
45:44 - imessage too instead of whatsapp you
45:46 - know what i mean what's happening more
45:47 - internationally yeah yeah
45:50 - forget the android people
45:54 - all right okay so now what we want to do
45:56 - is we just want to run
45:58 - um we just want to draw some rectangles
46:00 - on the frame so i'm going to kind of go
46:01 - over this quickly if you're getting
46:02 - confused then
46:04 - um again there the other videos go a
46:06 - little bit
46:07 - uh slower to explain this in detail but
46:09 - i'm just going to go a little bit faster
46:11 - okay because we're going a little longer
46:13 - longer than i thought it's already been
46:14 - an hour bro yeah but
46:17 - uh so are we going to do like i said
46:19 - faces is a list of points so we just
46:21 - want to iterate over all of the points
46:23 - so although the faces that the the
46:25 - algorithm found it's just kind of list
46:27 - let's just iterate over all of them and
46:29 - pull out those points so like i said
46:31 - there's four points here for each face
46:33 - so um we're just gonna iterate over all
46:35 - of them okay
46:37 - so uh the first point is x the x
46:40 - coordinate the second point is the y
46:41 - coordinate this is the top left point of
46:43 - the face
46:45 - yep
46:46 - and then this is the width
46:48 - and this is the height of how big that
46:51 - uh square a rectangle should be so for a
46:53 - face it's squares by default but for
46:55 - smiles it can be any shape rectangle so
46:58 - it just gives us like the width and
46:59 - height of the rectangle so we're given a
47:00 - point and a height from that from there
47:02 - that's all we need to actually draw it
47:04 - because we can say at this point go this
47:05 - far and then go down and you can just
47:07 - you can you can figure out the rest with
47:08 - math which is what we're going to do
47:10 - here go ahead okay
47:12 - nice
47:14 - so here
47:15 - uh cv2 allows you to draw stuff on
47:17 - frames so like like this we can draw
47:20 - rectangles we can also put text on the
47:21 - screen which is how i put the smiling
47:23 - little thing uh when it says smiling so
47:25 - you can also put text we'll do that
47:26 - later but for now we're just going to
47:27 - draw a rectangle okay so the way this
47:29 - works is you just give it the image you
47:31 - want to pop it on so in our case we want
47:33 - to we want to draw the rectangle back on
47:35 - the colored frame not the grayscale
47:36 - frame but the colored frame oh let's see
47:39 - okay
47:40 - because we're only doing the
47:41 - calculations on the grayscale on the
47:43 - grayscale frame because the coordinates
47:45 - and everything is exactly the same but
47:46 - once we have the data of where the face
47:48 - is we can just use the color again
47:50 - so
47:51 - it's an optimization yep because you're
47:52 - doing the calculations on the black and
47:54 - white image but then we're actually
47:55 - still only seeing the color image which
47:57 - is what you want okay
48:01 - and for rectangle all you need is the
48:03 - top left point and bottom right point of
48:05 - the rectangle for it to draw because
48:07 - those two points it makes it easy to
48:09 - draw the rectangle so the top left point
48:11 - like we mentioned is x y that's what we
48:13 - have here
48:14 - then the bottom right point is just
48:16 - going to be
48:17 - x y but you add the width and the height
48:19 - to the correct coordinate so
48:21 - uh x you want to go an extra width
48:24 - because that's the width of the
48:25 - rectangle just go you just add w to it
48:28 - okay and then why you just want to add
48:29 - the height to it and those two together
48:31 - will be the bottom right point of the
48:32 - rectangle okay if you guys don't know
48:34 - this then just like look at your
48:35 - geometry yeah brush up a little bit
48:37 - x plus width and then y plus the height
48:40 - and that will give us the square right
48:41 - like the rectangle sorry yep yep go
48:43 - ahead yup square right in our case it'll
48:45 - be a square but uh any rectangle you can
48:47 - draw any rectangle go ahead and what's
48:50 - the numbers on the right so what are
48:52 - these this so this is rgb the color of
48:54 - the rectangle okay um well technically
48:57 - bgr because it's backwards and opencv uh
48:59 - this is just a random color you can put
49:01 - whatever you want you can play these can
49:02 - go from zero to 255. okay uh you can use
49:05 - whatever color you want but i just chose
49:07 - this as a nice green color okay because
49:09 - like it kind of like it matched nicely
49:11 - with the joker the joker screenshot so
49:13 - this is just a random green color you
49:14 - can use use this if you want but um you
49:17 - use whatever color you want then this is
49:18 - just the thickness of the rectangle okay
49:21 - nice so four pixels thick that's all so
49:23 - this is just like customization stuff
49:25 - this one line is going to draw the
49:27 - rectangle on that on that frame yep
49:31 - yep i'm just gonna draw on that frame
49:32 - well a single face on that single frame
49:34 - yeah so we're gonna draw all the faces
49:36 - on the frame then we're gonna display
49:37 - that frame nice and then on the second
49:39 - frame it'll detect all the faces in the
49:41 - second frame and then
49:43 - show all the faces in the second frame
49:45 - and then again third frame because we're
49:47 - in remember we're in another loop so
49:48 - this is a nested loop yeah and then
49:51 - there's going to be another nested loop
49:52 - within this one which is going to be
49:54 - crazy later on but yeah
49:56 - okay let's go ahead and run this to see
49:58 - if we can actually see the the
49:59 - rectangles that you just you just talked
50:01 - about
50:02 - yeah definitely so
50:03 - um displaying the colored frame here
50:05 - which is what we drew the rectangles on
50:07 - colored frame yeah and let's just run
50:10 - this
50:13 - as you can see here
50:14 - um this is the x point this is the y
50:16 - point yep this is the width this is the
50:19 - height
50:20 - nice and faces are always squares by
50:22 - default because that's just the
50:24 - parameter they set so you can see the
50:25 - width and height is always the same
50:28 - with height is always the same but
50:29 - different sizes sometimes because detect
50:31 - multi-scale it can be smaller or bigger
50:33 - okay awesome
50:36 - let's run this and there we go magic oh
50:39 - snap dude
50:41 - that's insane in javascript that would
50:43 - be like
50:45 - 30 lines of code
50:47 - you know just yeah yeah
50:48 - i know yeah it'd be something you know
50:50 - yeah like i really do come back to
50:52 - python a bit like whoa
50:56 - yeah man you know you can do web
50:57 - development with python too you know you
50:58 - don't actually need javascript you know
51:00 - you just do use django
51:05 - i'll fight you and i'll fight you and
51:06 - nas both yeah you might have a green
51:08 - circle around your face but you took it
51:09 - to the hook
51:10 - [Laughter]
51:13 - yeah with no legs right
51:16 - there's an enjoying goat guys i think we
51:18 - should just tell the community like
51:19 - sunny's good is so much stuff so when he
51:21 - joined the team a few months back
51:23 - um i was like one day we're on a team
51:25 - meeting i was like yo sonny you're so
51:26 - good at everything there has to be
51:28 - something effed up about you but he
51:30 - lives in uk we're all in los angeles so
51:32 - kazi was like hmm you know we've never
51:34 - seen sonny's legs and we're like he must
51:36 - be in a wheelchair or something like
51:38 - there's something there every everyone
51:40 - thinks i don't have legs
51:43 - but
51:44 - that's just a joke because he never seen
51:45 - his legs so he's always insecure and
51:47 - showing his legs in the in the video
51:49 - chats like yeah
51:50 - but guys at least at least today
51:53 - i i'm not the only one wearing a black
51:55 - shirt
51:56 - so you know
51:58 - is that is that a thing are you always
51:59 - wearing a black shirt that's always a
52:00 - thing dude everyone's always like yes
52:02 - and he's awesome he doesn't have any
52:03 - other shirts besides black t-shirt
52:05 - he's like he's like steve jobs wears a
52:08 - whole um uh you know what's it called um
52:11 - yeah
52:12 - right yeah roll neck and then they're
52:13 - like sonny wears a black t-shirt every
52:15 - single time
52:18 - wears a blue t-shirt right yeah like a
52:20 - gray t-shirt it saves you time in the
52:22 - morning guys so that's why
52:26 - technically this is dark gray it's not
52:28 - black so you're still by yourself sonny
52:30 - oh
52:33 - but uh anyways let's get back to this so
52:34 - that's the face detection app basically
52:36 - you just repeated the face detection
52:37 - video but
52:39 - whatever
52:40 - so now
52:41 - um that's pretty good so like wouldn't
52:44 - wouldn't a small sector be as simple as
52:45 - just changing this out for a smile and
52:47 - writing the same thing
52:49 - well yeah let's try it
52:50 - i mean you would you would think so you
52:52 - would think so but you guys about to see
52:55 - some really really weird crap
52:57 - and then
52:58 - really really cool trick to fix that
52:59 - weird crap
53:02 - which is
53:03 - interesting it's a smart thing to do
53:05 - so
53:06 - let's
53:07 - create our smile detector okay yep so
53:10 - they smoke all correctly yeah
53:13 - there we go smile detect so same exact
53:16 - thing uh we're gonna be using hard
53:17 - cascade and
53:19 - um to detect faces but we can also use
53:21 - you use it to detect smiles so in this
53:24 - case there's another file in description
53:25 - it's just called the hard
53:27 - dot smile i think let me double check
53:29 - down here
53:30 - yeah our cascade underscores smile yeah
53:33 - and we just use this pre-trained
53:34 - classifier instead so this took a bunch
53:36 - of images of people smiling with their
53:37 - teeth showing
53:38 - it doesn't it doesn't detect like
53:40 - regular smells that good it's mostly
53:42 - like teeth smiles
53:44 - um from the training data but you can
53:46 - teach you to do both but in our case you
53:47 - kind of have to show your teeth for it
53:48 - to work like really well
53:51 - but that's there
53:52 - so
53:53 - why don't we just use this instead of
53:55 - the face like because it's detecting the
53:57 - face so well right like it was tracking
53:58 - my face perfectly and if there's
53:59 - multiple faces yeah shouldn't be able to
54:01 - detect miles too
54:03 - yeah supposedly supposedly
54:05 - so let's go down this code and make the
54:07 - changes okay so we have to we we get the
54:09 - webcam uh we would iterate over every
54:12 - frame
54:13 - we want to read every frame in each
54:15 - iteration and then a little check and
54:17 - then frame grayscale uh so we get the
54:20 - current frame you change the grayscale
54:22 - now instead of detecting faces let's
54:24 - actually detect
54:26 - oops
54:28 - smiles okay nice okay
54:32 - like smiles and instead of on face
54:34 - detector let's call smile detector
54:36 - and we want to call it on this on the
54:37 - same frame so grayscale frame yeah
54:40 - and then again let's just copy this
54:43 - exact code
54:44 - but
54:46 - instead of um and we can use the same
54:48 - variables because this and this loop
54:50 - will never overlap like this loop will
54:52 - completely finish before this loop
54:53 - starts so we can we can use the same
54:55 - variables which is fine okay keep it
54:57 - nice and clean looking yup there's no if
54:59 - it was nested we cannot because then
55:01 - they would get um they'd fight over the
55:04 - variables but
55:06 - loop completes before this even starts
55:08 - so it's okay to use the same variables
55:09 - here right um but instead of faces let's
55:12 - draw smiles
55:14 - okay
55:15 - so now this is going to be so this is
55:17 - what it's doing the same exact thing
55:18 - it's going to find all the smiles in the
55:20 - image and then return a list of points
55:22 - the exact same thing
55:24 - upper left hand point um upper left hand
55:26 - point here and then the width and height
55:28 - of the smile in this case it's going to
55:30 - be like a horizontal rectangle instead
55:31 - of a square okay
55:33 - so it's returning the same thing right
55:35 - the same coordinates uh the same form
55:40 - yeah it's going to look just like this
55:41 - but instead of giving us the coordinates
55:43 - of faces it's going to give us the
55:44 - coordinates of smiles it's like just a
55:46 - different rectangle on the image it's
55:48 - smaller around the mouth and it's like
55:50 - horizontal looking right uh let's change
55:52 - the color though i had a pre
55:54 - uh
55:55 - this color okay that's the color i chose
55:57 - this is like a nice red color yeah
56:00 - and because right now it's the same
56:01 - color as the face but i want to change
56:02 - it to this red color go ahead uh like i
56:05 - said bgr
56:06 - so r is at the end that's why it's so
56:08 - high so it looks more red because the r
56:10 - channel is the highest right okay
56:13 - red
56:14 - so let's run this and let's
56:17 - um let's actually not draw the sm the
56:19 - faces let's just get rid of the faces so
56:21 - i'm not even going to draw the faces
56:22 - okay so we're just going to we should
56:24 - just see
56:26 - okay
56:26 - yeah so not even faces it should just
56:28 - have things of smiles on my face right
56:31 - okay i mean they just have rectangles
56:32 - around the smile on my face yeah so
56:34 - let's run this
56:37 - and
56:38 - whoa voila as you can see it's working
56:41 - perfectly
56:43 - holy crap okay so this is what this one
56:45 - okay this is what you meant by it's just
56:48 - a lot it doesn't work for yeah yeah
56:51 - it doesn't it does not work but it does
56:55 - uh and i'll explain that in a second and
56:56 - how that actually works but as you can
56:58 - see right now the default it's like this
57:00 - isn't even working properly like what
57:01 - the hell like how
57:03 - like
57:04 - okay it is it's actually getting my
57:05 - smile look at my smile
57:07 - i was actually getting the smile yeah
57:09 - it's actually getting it so it's smart
57:11 - enough to find it but there's a lot of
57:12 - false positives like it thinks this
57:14 - stuff over here like this little window
57:16 - sill is there because it probably thinks
57:17 - this white is like teeth and this is my
57:19 - lip or something but i mean there's also
57:21 - getting things here on the freaking
57:23 - freaking curtain which makes no sense
57:24 - you know like
57:25 - like what
57:26 - i mean this may be a little bit too like
57:28 - it looks like the upper teeth and the
57:29 - lower teeth and the little gray line is
57:31 - like maybe the gap between the teeth a
57:32 - little bit and you kind of understand
57:34 - maybe we just built a ghost detector or
57:36 - some
57:39 - yeah that's what they said in the face
57:40 - detection video or the pedestrian
57:42 - tracking but yeah the point is this is
57:44 - working like ass okay yeah uh so how do
57:47 - we fix this it's like this isn't even
57:49 - working
57:50 - um
57:51 - first let me explain why this is
57:52 - happening
57:53 - so there's a there's probably a couple
57:55 - reasons why i saw it this is happening
57:56 - and i'm gonna explain both
57:58 - okay
57:59 - uh first thing is so let's just quit out
58:01 - of this first
58:03 - so why is this performing so
58:05 - yeah i realize it's
58:07 - fine
58:09 - it's fine
58:11 - first reason is to be honest uh faces
58:14 - are one of the very first things that
58:15 - people detected from the beginning um
58:18 - that's like the very like that it's like
58:20 - the coolest thing to detect to start
58:22 - with and it's very has like a very
58:23 - defining feature like detecting squares
58:25 - or detecting a soccer ball is kind of
58:27 - like okay it's kind of cool i guess
58:29 - um i think a face is like pretty cool
58:32 - right so there is a lot more data in
58:35 - this trained algorithm than there is
58:37 - anything else so there was actually just
58:39 - more phase data and this was just
58:41 - trained better than smile was to begin
58:43 - with so that's the first reason why face
58:45 - detection was working so well because it
58:47 - ran out more data for longer while this
58:49 - one probably didn't get much data nice
58:51 - okay just because
58:53 - yeah it's like okay if you want to have
58:54 - like a left finger fingernail detector
58:57 - like there's not going to be as much
58:58 - data as faces just because pieces are
59:00 - cooler or like a blade of grass detector
59:01 - like who codes that yeah you don't want
59:03 - to take vigilance and also bleeding guys
59:05 - like if you think about it a face has so
59:07 - many features you have like you have
59:09 - your eyes you have loads of things which
59:11 - which basically are going to tell that
59:12 - model that okay we can be sure that
59:14 - that's a face whereas a smile has a lot
59:16 - less to look for like you just have
59:18 - pretty much like the curvature of your
59:20 - smile that's why it kind of it can
59:21 - easily get confused like the lamp behind
59:23 - aaron has like a little curvature to it
59:25 - so it could get confusing nasa smile
59:27 - whereas a face has several different
59:28 - reference points so it will look for in
59:30 - terms of features so just something to
59:32 - bear in mind as to why you would get
59:34 - that
59:37 - that was the second point i was gonna
59:38 - make you stole it out of my mouth but
59:40 - that was absolutely correct guys yeah
59:42 - exactly what i was gonna say is yeah
59:43 - there's less features
59:45 - like detecting a tooth
59:47 - is much harder than detecting a face
59:49 - because how do you detect the tooth it's
59:51 - just like a it's just a flat white thing
59:53 - with like a specific shape but it's
59:55 - harder to detect yeah like it might get
59:57 - it might get a tooth and a marshmallow
59:59 - mixed up but it wouldn't get a face in a
60:01 - marshmallow mixed up unless you're the
60:03 - michelin man
60:05 - but uh or the or the or the pillberry
60:07 - tilbury uh guy you know the little
60:09 - little bakery guy but
60:12 - but yeah that's the point that sunny
60:14 - made right that's the second point so
60:15 - first one is face probably just has more
60:17 - data overall just because it's a more
60:19 - defining object and it has more
60:20 - emotional cache to humans so it's like
60:22 - cool let's detect faces but also it just
60:24 - has more data that i can go by to
60:26 - determine hey is this a face or not
60:27 - versus a smile you're kind of limited
60:29 - nice
60:30 - go ahead
60:32 - so that is absolutely correct so that's
60:34 - why it's performing like ass i mean it
60:36 - could be better it could be better if
60:38 - they trained it better with more data
60:40 - yeah
60:41 - but even then it's still hard harder to
60:43 - detect than a face right so how do we
60:45 - get around this well
60:47 - um
60:48 - first of all there's different
60:49 - parameters we can do so you can actually
60:52 - be like hey if uh something only counts
60:54 - as a smile if there's like two or three
60:57 - things around it that are also a smile
60:59 - because then it kind of thinks okay if
61:00 - this area kind of has like four smiles
61:02 - detected then it's a smile but if it's
61:04 - just one random thing that might kind of
61:06 - be a smile but there's only one instead
61:08 - of like four yeah then um you can go
61:10 - okay that's not small enough so like
61:12 - there's kind of like a redundancy okay
61:14 - code one more time explain that visually
61:16 - right so like here we're just getting a
61:18 - bunch of stuff okay
61:20 - yep um so but you can see like this
61:22 - random one over here just getting
61:24 - they're blipping up every now and then
61:26 - yep
61:27 - so so are you used to trying to say that
61:29 - you can get rid of those right so in a
61:31 - simple sort of like in a one sentence
61:33 - sort of answer like rather than checking
61:35 - the entire sort of webcam view we kind
61:39 - of want to narrow down that that sort of
61:41 - selection down to just your face right
61:45 - um not quite there that's the other
61:46 - optimization i'm gonna show but what i'm
61:48 - saying is um see how there's like random
61:50 - boxes showing up over here yeah like by
61:53 - themselves we can kind of get rid of all
61:54 - the standalone ones that just kind of
61:55 - flash really quick okay but if there's a
61:58 - big group
61:59 - yeah if there's a big group of boxes
62:01 - overlaid on top of each other though we
62:03 - can kind of say the chances of that
62:04 - actually being a smile is a little bit
62:05 - higher like up here
62:07 - we could maybe boil this down to like
62:09 - one smile we'd be like okay there's
62:10 - freaking seven boxes here this is
62:12 - probably a smile there's seven here this
62:14 - is probably a smile there's a bunch here
62:16 - there's probably a smile
62:17 - um but these little ones on the sides
62:19 - that are flashing randomly you can say
62:21 - now we don't want those right and we can
62:23 - actually get rid of that is there some
62:24 - kind of sensitivity or or yep that's all
62:27 - it is it's just a sensitivity number and
62:28 - you have to tune it to faces so you find
62:31 - the perfect number which i'll show you
62:32 - guys in a little bit um but we can
62:34 - actually do that so let's add that in
62:36 - and you won't see that much of an
62:38 - improvement here on this but i'll show
62:40 - you guys um
62:42 - the second optimization which is going
62:44 - to clean everything up and make it go
62:46 - from complete ass to super super
62:48 - accurate which is pretty impressive nice
62:50 - so
62:52 - um
62:53 - detect so this happens in the detect
62:56 - multiscale okay so there's two different
62:59 - things called or two different
63:00 - parameters you can use called
63:02 - min neighbors and scale factor okay okay
63:06 - so
63:07 - let's get these yep
63:11 - up here
63:13 - here we go so this let me actually type
63:15 - it out so this is going to be
63:17 - uh scale
63:19 - factor okay i think i might have spelled
63:22 - it
63:23 - and then this is going to be
63:25 - min
63:26 - neighbors
63:28 - okay i'm it might be the wrong spelling
63:30 - so it might not work but let's just try
63:32 - it
63:33 - so what this is gonna do is it says
63:34 - skill factor this is an optimization to
63:37 - how much you want to blur the image
63:39 - because if you blurred this image you
63:41 - can still kind of tell it's a face if
63:42 - you don't blur it too much okay and then
63:44 - if you blur it that's another
63:45 - optimization on top of the black and
63:46 - white okay you can kind of like
63:48 - generalize and then you can kind of
63:50 - compare the the data a little bit more
63:51 - um
63:52 - because there's less data but you can
63:54 - still kind of tell it's a face so you
63:55 - want to kind of optimize this basically
63:57 - this scale factor is blur like how much
63:58 - do you want to blur the image
64:00 - to make it easier to detect faces and
64:02 - kind of like
64:03 - um get the defining features in
64:05 - brightness
64:06 - um
64:07 - or or not so the higher this number then
64:09 - the more it'll get blurred so i found
64:11 - the 1.7 is the best right
64:14 - so just just to be clear there so you're
64:16 - saying essentially to blur
64:18 - the the the sort of the entire frame so
64:20 - that way it will be easier to detect
64:22 - facial features as opposed to like a
64:24 - curtain or like a lampshade
64:27 - yeah because you get a lot of rid of a
64:29 - lot of the details which are unimportant
64:30 - so like if there was like a 4k image and
64:32 - there's a lot of details then it can get
64:34 - very confused with the data but if you
64:36 - blur it enough you can kind of if you
64:38 - blur it like a crapload you can kind of
64:39 - be like okay um there's kind of a blurry
64:42 - face in the middle and then everything
64:43 - else is just like a blurred mess in the
64:45 - background so it actually kind of like
64:47 - contrasts like the objects you're gonna
64:49 - be like okay there's a face and then
64:50 - there's a bunch of blurred background
64:52 - you can't even tell if it's curtain or
64:53 - wall or whatever but you can kind of be
64:54 - like okay there's a face here go ahead
64:56 - okay nice
64:58 - so that's the idea if you can blur it
65:00 - down more you can actually detect faces
65:01 - even better yeah then mid neighbors is
65:03 - what i was just talking about um there
65:05 - has to be 20 neighboring rectangles in
65:08 - total in that little area for it to
65:09 - actually count as a smile okay so this
65:12 - would if this was one then literally
65:13 - just everything would be passed through
65:15 - but if you make this higher then it's
65:16 - like okay there needs to be a lot of
65:18 - redundant rectangles on this one little
65:20 - area for this to actually be a smile so
65:22 - it's like i found 20 smiles in this
65:23 - little region of the image because
65:26 - they're all overlapping it has 20
65:28 - neighbors the minimum minimum amount of
65:30 - neighbors of a rectangle needs to be 20
65:32 - for it to actually be counted as a smile
65:35 - so this will help a little bit
65:37 - yeah let me show you guys
65:39 - and then um
65:40 - well actually not even at all like well
65:42 - actually it helps a lot oh one sec one
65:44 - more than two more all right so
65:47 - there we go right
65:48 - yep right back
65:51 - there you go so as you can see okay it's
65:54 - actually it's actually better
65:57 - a lot better but i mean
66:00 - yeah there's still a few things so here
66:01 - yeah i don't know why it's so fixated on
66:03 - this light
66:08 - it's probably thinking that this is
66:09 - teeth it's probably looking for like a
66:11 - yeah a horizontal line of white so it's
66:13 - thinking this is t
66:15 - okay that way i mean like you can see
66:17 - why the lamb i mean the top left is a
66:20 - bit of a weird one
66:23 - yeah but i mean you can kind of see like
66:24 - this little white oval and my teeth look
66:26 - similar yeah yeah yeah so it's probably
66:28 - trying to find like teeth and then the
66:29 - curvature of your mouth okay yeah
66:32 - [Music]
66:33 - so something like that uh so that works
66:35 - really really well so like a lot of fine
66:37 - tuning needs to be done for things to
66:38 - work properly so just that little change
66:40 - there that worked way better than when i
66:42 - was testing it but uh i mean that's
66:44 - amazing so um tuning tuning different
66:47 - numbers can actually play a big big role
66:49 - in that so like maybe like in a real
66:51 - world application if you're detecting
66:53 - smiles you would want to save these
66:54 - numbers okay and be like okay for smiles
66:57 - always use these parameters this is like
66:59 - additional machine learning on top of
67:02 - all the the crazy numbers machine
67:03 - learning that's in here you have this
67:05 - plus a little bit more so this is kind
67:07 - of like this is kind of like manual
67:08 - machine learning you manually went
67:10 - through and tested a bunch of different
67:12 - sensitivities and you used your eyes to
67:14 - be like okay
67:15 - this is actually machine learning so
67:17 - that you actually taught the computer
67:19 - that these two numbers are closer to a
67:21 - smile than anything else so this is like
67:23 - manual machine learning that that you're
67:24 - doing okay pretty cool yeah nice
67:29 - um okay now going forward uh another
67:31 - optimization that we can do is actually
67:34 - get rid of uh these these errors because
67:37 - like sunny said and what i said in the
67:39 - slides is smiles only show up in faces
67:42 - yeah so why don't we instead of
67:44 - trying to get it across the entire frame
67:47 - just find a face and then only run small
67:49 - detection within that face yeah because
67:51 - we already already did the work of the
67:53 - face detection so why don't we do that
67:55 - that's awesome and that's what we can do
67:57 - next because
67:58 - it makes it faster and more accurate
68:00 - yeah when i first thought about i kind
68:01 - of thought that like oh we're just going
68:03 - to slap a model on the entire webcam and
68:05 - they'll figure it out but guys you have
68:06 - to be prepared like
68:09 - take it in mind that you you there's a
68:11 - lot to processing remember in the
68:13 - beginning we said like you pretty much
68:14 - have some kind of input your model and
68:16 - then some kind of output so if you can
68:18 - reduce the amount of input going into
68:20 - the model you can actually speed up the
68:22 - entire thing a lot more like and it's
68:24 - drastically going to be faster and it's
68:26 - also going to be like more reliable in
68:28 - terms of we're only going to select
68:29 - aaron's face and then find the smile
68:30 - inside there
68:32 - so something yeah yeah
68:35 - yeah on the self-driving car live stream
68:37 - we did the car and pedestrian tracking
68:39 - one you can see a really good example of
68:40 - this in real time when we're doing it
68:42 - because there's so many cars on a
68:44 - highway so some highway footage there
68:45 - are so many cars and a lot of
68:46 - pedestrians because because here you're
68:49 - only detecting like two or three
68:50 - yeah but in those there's like 10 cars
68:53 - and 20 pedestrians so it was going crazy
68:55 - um when you when you do that one when
68:57 - you um scale it down so if you blur the
69:00 - image more it's faster if you make it
69:01 - black and white it's faster
69:03 - and then some other optimizations you
69:04 - can actually see the footage gets played
69:06 - back really really fast so that's a good
69:07 - visualization if you go check it out go
69:09 - watch that stream too it's nice it's
69:10 - badass as well yeah go check that one
69:12 - out guys i'm gonna watch out now as well
69:14 - after this
69:16 - somebody's not watching my content i
69:18 - know i do i do i'm the guy smashing the
69:20 - smashing the dislike i'm joking
69:23 - wow okay
69:25 - go up this morning he was like aaron i'm
69:26 - really grumpy i don't want to do the
69:27 - stream and i was like bro i need you i
69:29 - don't have my internet stuck
69:31 - i need you man and then uh then he's
69:33 - like now now he's all in a better mood
69:35 - because he's been hanging out with me
69:37 - it's fun
69:38 - we'll definitely do some more streams
69:40 - yeah this will be cool we can even
69:41 - probably do some kind of python react
69:43 - you know like yeah let's do that we
69:46 - could like tie it together like do like
69:47 - a cool front end app with uh javascript
69:50 - and we can have some cool like back-end
69:51 - python stuff like happening like this
69:53 - you know yeah like
69:55 - a front-end thing where you click like
69:56 - smile detector face detector you know
69:58 - like car pedestrian detector and have
70:00 - like different you pick different files
70:01 - and it feeds it in yeah something some
70:04 - people like that exactly that was
70:05 - awesome uh aaron quick question here
70:07 - from shantao he says is it beginner
70:09 - friendly so just maybe a quick answer to
70:12 - that
70:13 - is this video beginner friendly or is
70:15 - the other ones yeah like just for anyone
70:17 - that's new to the video who might have
70:19 - joined afterwards is this video beginner
70:21 - friendly like do you need to know python
70:22 - before you do this
70:24 - yes you need to know python but if you
70:26 - know like for loops and all the basic
70:27 - python stuff and how to like call
70:29 - functions then no you know i teach you
70:31 - the rest from there but you do need i
70:33 - don't teach the basics here so you gotta
70:34 - learn the basics then you can come back
70:36 - if you're if you're a complete from zero
70:38 - beginner no if you're just a beginner
70:39 - who knows python but you haven't coded
70:41 - much then yes you can go through this
70:42 - yeah and also just worth mentioning guys
70:44 - i don't code much python but i know
70:46 - javascript so coming to this is actually
70:48 - super super simple in terms of how
70:50 - aaron's broken it down so if you have
70:51 - any coding experience then yeah you can
70:53 - do this so definitely go ahead and do it
70:55 - yeah very straight
70:57 - awesome so i popped back in the faces so
70:59 - let's do this now okay yep let's go back
71:01 - to the
71:02 - terminal
71:04 - and run it again and now we should have
71:07 - uh error oh because i commented out
71:10 - faces so it's giving me an error because
71:12 - i'm trying to use faces here yeah when i
71:14 - commented it out let's just get rid of
71:15 - that and
71:18 - run it again
71:20 - so there we go
71:21 - so we got the faces here and the smiles
71:24 - nice hey look at that
71:27 - yep awesome but i mean it's still
71:29 - getting this you want to get rid of all
71:30 - these random ones yeah so what we can do
71:32 - like i said is we can actually just run
71:34 - small detection within this window
71:36 - instead of the whole frame which is a
71:37 - smart optimization because i mean in the
71:40 - real world you wouldn't see a smile out
71:41 - in the middle of nowhere unless it was
71:43 - like a piece of art or like dentures or
71:44 - something you know but generally
71:47 - smiles only show up within a face so
71:50 - that's why um we can do this nice okay
71:54 - yep and then i actually showed the
71:56 - effect effectiveness of that too i'll
71:58 - get rid of these tuned parameters and
71:59 - actually show you how well that works
72:02 - okay um yeah i mean it kind of works
72:04 - well but those like these scaling
72:06 - factors the sensitivity plus the that
72:08 - little trick together makes it super
72:10 - accurate from what we had before just
72:11 - like
72:12 - freaking right all over the frame just a
72:14 - single smile like
72:16 - like we tune that down from just two
72:18 - little things so that's it's like really
72:20 - smart clever things to to make your code
72:22 - work using something that doesn't work
72:24 - and making it work yeah with a few
72:25 - numbers awesome yeah
72:28 - so let's continue okay so how do we
72:31 - actually
72:32 - make it so that we only check within a
72:35 - face if there's a smile okay
72:38 - so like like we said we're in the the
72:40 - global loop here that is looping over
72:42 - the entire frame we read the frame so
72:44 - from here we keep going down blah blah
72:47 - and then we get to
72:49 - faces okay
72:50 - okay
72:52 - oops run small detection within each of
72:53 - the faces uh
72:55 - run face detection so some of these
72:57 - comments might have not made sense the
72:58 - entire time because i kept
73:00 - popping them so this is what i had
73:02 - before run face detection but now we
73:05 - want to actually do this within each of
73:08 - those faces this is what we're currently
73:09 - going to be installing so how do we do
73:11 - that okay
73:13 - let's look at it just from here
73:15 - so we we we're in the frame
73:18 - and then we find all the faces and we
73:21 - have all the boxes of frames so we have
73:23 - the box of of a face so we have the box
73:25 - of what a face is yeah we draw that box
73:28 - right okay
73:29 - but we have this box so this is actually
73:32 - the box we want to look at this is
73:33 - actually the sub image of the whole
73:35 - image that we want to find smiles we're
73:37 - actually giving it right here
73:39 - but
73:41 - so
73:42 - we can actually just be like okay
73:43 - instead of looking at the whole frame
73:45 - just look at this rectangle for the
73:47 - smiles instead okay and that's what
73:49 - we're gonna do so how do we do that
73:51 - there could be multiple smiles within a
73:53 - face though right if i mean not
73:55 - technically but if there's errors like
73:57 - it might detect like a little just
73:59 - before your mouth so you just want to
74:01 - make sure you find all of them so what
74:03 - we're going to do is we're actually
74:04 - going to have
74:05 - another loop in here
74:08 - is be nested because within a face you
74:10 - have to find all the smiles okay so
74:12 - we're actually going to need to
74:14 - um
74:18 - find the x y um width height of each
74:20 - smile within the face so same thing
74:22 - we're just nesting it okay does that
74:23 - make sense so far yeah quick thing is
74:25 - though because
74:27 - yeah quick right this is a python
74:28 - question so you have uh
74:31 - are your variable names not going to
74:32 - clash here or is it going to be in a
74:34 - scope they will okay no they will they
74:36 - will right um i believe i'm 99 sure i
74:39 - didn't even try because i thought they
74:40 - would uh but i'm pretty sure they will
74:42 - so what you can do is you could use like
74:44 - capital letters or something i believe
74:45 - it's case sensitive yeah but you
74:47 - probably don't want to do that what i
74:48 - did is just a little sloppy but i just
74:50 - did this okay
74:52 - just so they don't contend but it keeps
74:53 - it simpler because if you start doing
74:55 - stuff like this the codes start looking
74:56 - really hard on the eyes yeah um because
74:58 - this is so so clean you know x y x plus
75:01 - w y plus h yeah keep it nice and clear
75:04 - but if we started doing this then it
75:05 - would look like
75:06 - you know over again x smile plus y smart
75:09 - like yeah it starts looking like that
75:11 - yeah so
75:13 - yeah so i just did this just uh it's a
75:15 - little bit messier but it's it's still
75:17 - easy to understand i just added an
75:18 - underscore to the end okay okay
75:22 - um
75:25 - so we're going to need to look over
75:28 - uh
75:29 - the face okay okay um
75:33 - i mean i should probably talk about
75:34 - getting the subset first uh let me go
75:36 - over the logic first so what we want to
75:38 - do is you want to find
75:40 - uh in the face okay so you want to find
75:43 - all the smiles in the face okay so
75:47 - uh find
75:49 - all smiles in the face
75:52 - okay so we're gonna do this doesn't
75:53 - exist yet but i'm just using this as a
75:55 - placeholder thing for right now this
75:56 - code will not work because it's
75:57 - currently broken yeah and then just draw
75:59 - um draw
76:01 - all the rectangles around
76:07 - the smile okay or the rectangles just
76:10 - like that
76:13 - oh shut up dude
76:16 - must be an american thing okay
76:21 - yeah let's just do this so it doesn't
76:22 - break
76:25 - uh oh yeah i was making fun of your
76:27 - spelling before right yeah
76:29 - oh god that's hilarious
76:31 - that backfired didn't it
76:33 - anyways so this is the kind of idea
76:35 - we're going to iterate over
76:37 - um all the faces and then with each of
76:38 - all within each of those faces we're
76:40 - going to find all the smiles okay
76:42 - and then we just want to draw the
76:43 - rectangle in there so kind of slimmer to
76:45 - what we did here actually okay the only
76:47 - caveat is you have to change the the
76:49 - names here yeah
76:51 - um so why don't we do that actually let
76:52 - me just
76:54 - uh copy this down here so this is the
76:56 - same exact code as we had before we just
76:58 - want to draw
77:00 - a rectangle around the smile okay
77:03 - okay and then instead of x y
77:06 - uh w and h it's just gonna be this
77:09 - okay just add the underscores to the end
77:11 - okay
77:13 - it's kind of hard on the eyes but if you
77:14 - space it out like this it's not too bad
77:16 - so so just to bring everyone to speed
77:19 - right now we had a an initial loop which
77:22 - was going through all of the faces
77:24 - and then so that was the first one on
77:27 - line 28 so i was going through all the
77:29 - faces and then on line 34
77:32 - we're going through the individual face
77:34 - that it detects because you might have
77:36 - more than one place
77:37 - and then we're doing a rectangle around
77:39 - that individual face
77:41 - right
77:42 - uh no uh within each of those faces you
77:45 - want to find all the smiles and draw a
77:48 - rectangle around all those smiles
77:52 - so what we're going to want to do is
77:54 - um
77:57 - we're going to want to actually not run
77:58 - this here
78:00 - we're going to want to run this
78:02 - oops
78:03 - we're going to want to run this
78:06 - here okay
78:09 - okay yep
78:11 - well actually not here uh that's
78:13 - incorrect
78:14 - um but i need to explain something else
78:16 - first
78:17 - where do we get actually where do we get
78:19 - the face from is that like placeholder
78:21 - for now or that's
78:23 - yeah i'm about to explain that this is
78:25 - the tricky part and this is the really
78:26 - cool part so let's just pretend
78:28 - that
78:30 - the face equals this for now okay this
78:32 - code doesn't actually work but this is
78:34 - what it is in flavor okay yeah just
78:36 - pretend this code does not work this
78:38 - code does not work but this is the idea
78:40 - we want the face to be this little mini
78:43 - sub image within the whole image because
78:45 - this is the current face like the little
78:47 - square that surrounds the face so you
78:49 - want this to be like a little image but
78:51 - the thing is
78:52 - um
78:53 - you can't just pass in
78:55 - like these
78:58 - uh detect multi-scale and get the get
79:00 - the smiles out of this we have to do
79:01 - some crafty stuff here with the array
79:03 - and and slicing but just this is the
79:05 - idea is that clear sunny yep yep
79:09 - oh yeah if it makes sense to you then
79:10 - hopefully it's kind of putting into an
79:12 - object right
79:15 - kind of well what we're going to do is
79:16 - we're just going to slice into into the
79:18 - image and get like a sub image in some
79:19 - cool way i'll show in a bit but i just
79:21 - want to show the overall logic first
79:22 - before you do that yeah
79:24 - yep so let's walk through this again so
79:26 - yeah we have all the faces here then we
79:28 - draw the rectangle around the face
79:31 - then we say okay get this little square
79:33 - image instead of the whole frame just
79:34 - get this little square now within this
79:37 - little square use that to detect
79:39 - multiscale so we want instead of looking
79:40 - at frame grayscale we want to actually
79:42 - look at the face
79:44 - okay
79:46 - so let's
79:47 - um
79:50 - uh of course we have to go to grayscale
79:51 - again though for for the same reason we
79:53 - have to convert this face because if
79:55 - this was if this was a color image then
79:58 - we would need to change the face to a
79:59 - black and white color image like
80:01 - actually let me show you here this is
80:02 - actually a good uh
80:05 - thing so i said step one okay we want to
80:07 - find faces in our image yep okay
80:10 - then
80:11 - step two
80:13 - get just this so that we don't we don't
80:15 - have to search we don't have to search
80:16 - the whole image instead of searching the
80:17 - whole image we're only going to search
80:19 - within this face
80:20 - so now this is we're doing that because
80:21 - we were getting like random sort of
80:24 - findings outside the face yeah okay
80:27 - yeah we're kind of just eliminating
80:28 - everything outside of the face as
80:30 - automatically no even if it says yes
80:32 - it's going to say no because we know
80:34 - that smiles only show up on faces right
80:36 - okay then step two we find smiles within
80:38 - those faces so we're only going to
80:39 - search within these bounds
80:41 - and then at the end we'll do a nice
80:43 - little labeling that we haven't gotten
80:44 - to yet go ahead okay
80:47 - but
80:48 - yeah so the idea is the face
80:50 - this is going to be
80:54 - this
80:55 - okay okay so this is so this is frame
80:57 - this is the whole frame this is the face
81:00 - okay so we need to get it but it's still
81:02 - color so we need to make this black and
81:03 - white as well just the same as the other
81:05 - image yeah so let's
81:07 - go back
81:08 - and
81:09 - um
81:10 - call
81:11 - or is it let me just copy
81:15 - paste this
81:22 - and change it to
81:24 - face grayscale okay so phase grayscale
81:28 - uh is going to be
81:31 - the face so same idea here we have the
81:34 - face the colored face but now we want to
81:35 - change the black and white so we use the
81:37 - convert color function again okay and we
81:40 - pass in the face the color face we say
81:43 - change it from color to gray okay and
81:45 - save it as face grayscale right okay
81:49 - then now in the small detector now
81:51 - instead of detecting it on the whole
81:52 - grayscale frame
81:54 - let's only run it on the grayscale face
81:57 - go ahead okay
81:59 - yep right there
82:01 - and now now this should be working but
82:04 - the only caveat is this doesn't exist
82:06 - yet properly this doesn't actually work
82:08 - but this is the general idea so once we
82:10 - have um this then we can run the smile
82:12 - detector
82:13 - only on the face there
82:15 - okay and then
82:17 - uh then then we can draw all the
82:19 - rectangles
82:20 - um around the smiles within that face
82:22 - after we find the coordinates of smiles
82:25 - so
82:26 - it's actually going to be
82:27 - smiles right i'm with you now they
82:29 - should be a little more clear yeah
82:31 - awesome
82:33 - great so yep find faces draw the
82:35 - rectangles get the little face change
82:38 - the little face to grayscale run smile
82:40 - detector on that little face then draw
82:42 - all the rectangles on that little face
82:44 - go ahead and then
82:46 - and that's how we're gonna get uh this
82:48 - kind of behavior
82:50 - okay awesome so you can see how there's
82:52 - no no red boxes outside of the face it's
82:54 - only within the face yep
82:57 - yep you you said yep like a bajillion
82:59 - times on the stream bro
83:02 - yep all right yep i was gonna say but
83:04 - the one thing i'm kind of confused on so
83:05 - we have the oh okay no i see now because
83:09 - you're doing it on face grayscale and
83:11 - then that's where smiles comes from okay
83:13 - no that makes sense cool got you yeah
83:16 - so
83:17 - you're writing smiles on the face you're
83:19 - not running smiles on the whole frame
83:21 - yeah that's why i was a bit lost
83:24 - yeah so that's there um so this should
83:27 - work in theory right but the thing is
83:29 - uh this doesn't work so how do we do
83:31 - this one little line of code so this is
83:33 - a little tricky i'm gonna have to
83:34 - explain it but it actually is just a one
83:36 - liner can we can actually achieve this
83:38 - but i need to explain how it's done and
83:39 - there's some weird um details that i'm
83:41 - gonna explain
83:43 - um
83:44 - so let's get rid of this okay run
83:46 - smaller sizes with each of those faces
83:48 - because
83:49 - we actually just copied that from over
83:51 - here we just added the underscores at
83:52 - the end so we don't overlap with the
83:54 - variable names
83:55 - this remains unchanged we still want to
83:58 - still want to display the current frame
83:59 - and the weight key of one millisecond
84:01 - and then release everything at the end
84:02 - of the auto
84:04 - but how do we do this okay
84:07 - so
84:09 - um
84:10 - we have the frame
84:12 - right we have the overall frame
84:15 - but uh and then we also have the face
84:17 - xywh
84:19 - so how do we
84:22 - get a sub image of
84:24 - um this whole image like if you have a
84:26 - big image like right here
84:28 - you have a big image how do we find this
84:31 - sub image
84:33 - how do i cut out just that image right
84:37 - yeah cut out that image right
84:40 - um there's there might be like a sub
84:42 - image function opencv but i didn't want
84:44 - to do it that way because i wanted to
84:44 - show you guys this smarter way of doing
84:46 - it
84:47 - or maybe more efficient way
84:49 - it's it's a little bit different so
84:51 - uh do you are you guys familiar with
84:53 - slicing in python i mean if you know the
84:55 - basics of
84:56 - python okay i mean i'm new to python so
84:59 - i even even if you run through that it'd
85:01 - be kind of cool to see
85:03 - you got it yeah okay so let's look at
85:05 - this little environment here let me open
85:06 - up a python environment completely
85:08 - separate you start python and this is
85:10 - python2 it's fine though python 2 is
85:12 - fine okay
85:13 - it's the same thing so let's say we have
85:15 - a list okay yep and let's just call it
85:19 - um
85:20 - [Music]
85:21 - list
85:23 - let's just call it l okay whatever so we
85:25 - have a list let's call it color of
85:27 - colors
85:29 - uh i'm trying to think
85:31 - well people yeah yeah yeah yeah colors
85:33 - let's do colors let's just do red
85:37 - blue
85:39 - oh yeah blue
85:40 - green
85:41 - yellow
85:43 - black
85:45 - white that's good okay so we have six
85:48 - six colors here okay this is a good
85:49 - length list okay
85:51 - and let's hit enter uh
85:54 - red
85:55 - oh because it needs to be strings i was
85:57 - just wondering i was like can you do
85:58 - that in python
85:59 - i want to see if you could do that yeah
86:01 - nice okay
86:03 - one second yeah little mistake
86:06 - there there we go
86:09 - okay now we have a list of strings
86:12 - colors
86:13 - plural
86:15 - got it yep colors okay there we go so
86:17 - now we have our list okay we have a list
86:19 - called colors and it has all these in
86:20 - here
86:22 - now as you know
86:23 - we can index in two colors with a zero
86:26 - and we would get what sunny
86:28 - you'd get the red
86:30 - absolutely yeah and we can index that
86:32 - one blue get blue
86:35 - and two to get green so on and so forth
86:37 - okay so you can index pretty
86:38 - straightforward
86:40 - in python you can also slice
86:42 - okay so
86:43 - you can get instead of just indexing at
86:45 - the first one or just the second one you
86:46 - can actually get a subset of it you can
86:48 - get like
86:49 - the first three so you could say like
86:51 - from point zero
86:53 - for two points forward from point zero
86:55 - get me like red blue green or something
86:57 - like that
86:58 - exactly we could get like just these two
87:00 - or we could get just these three or we
87:02 - could get just these four
87:04 - um it's called slicing because you can
87:06 - slice up the list into like some some um
87:09 - you can trim it to whatever you want
87:10 - okay
87:12 - so the way you do that is you use a
87:13 - colon okay you put a colon
87:16 - here and then you just put the first and
87:19 - the last
87:20 - so very simple
87:21 - it's so nice and hyphen dude
87:24 - i know man that's why javascript sucks
87:27 - slicing in javascript a little bit more
87:29 - confusing but yeah that makes sense for
87:30 - you
87:31 - yeah that's all it is so what this is
87:32 - saying is for in colors
87:35 - give me the sub list from zero to three
87:37 - so it'll have red which is zero it'll
87:40 - have blue which is one it'll have green
87:42 - which is two
87:43 - and it won't have yellow which is three
87:45 - so it includes the first one but does
87:47 - not include the last one right so it's
87:49 - gonna give us element zero element one
87:51 - and element two but not a limit three so
87:53 - zero one and two it should give us
87:56 - this as a list
87:58 - when i hit enter okay red blue green
88:01 - i'm gonna hit it that's exactly what you
88:02 - get okay nice
88:05 - that's how you slice
88:06 - um of course if i what is this so zero
88:10 - one two
88:11 - three four five if i put five it would
88:14 - ignore white so let's try that
88:16 - that would give us everything except for
88:18 - the white but if i put six
88:20 - okay then it would actually which
88:22 - doesn't exist then it should give us all
88:24 - of it or it might break let me see if it
88:25 - breaks
88:27 - no it doesn't so there's a safe check so
88:29 - 6 goes past here and it'll
88:32 - give you everything up to 6 because this
88:33 - is 5. nice um alternatively
88:36 - because this is the maximum list you can
88:38 - just not give it and it'll just say 0 to
88:40 - the end of the list oh nice okay
88:44 - and vice versa you could even be like
88:46 - beginning of the list up to four i've
88:48 - seen that in a tutorial somewhere that's
88:50 - nice yeah awesome
88:52 - yep you can just do that so this is like
88:54 - zero this is the same as saying zero to
88:55 - four yep um it's cool stuff like that uh
88:59 - one more cool thing i want to teach you
89:00 - guys is
89:01 - you can actually be like from zero to
89:03 - six and you can actually add another
89:05 - colon
89:06 - okay
89:07 - and what this is is the stride so if you
89:10 - put two it's going to skip every two
89:13 - so this one this this would actually
89:15 - give us red
89:17 - stride of two instead of if it was a
89:18 - stride of one it would give us every one
89:20 - but straight up two will give us red and
89:22 - then skip one then green skip one black
89:25 - so this should give us red green black
89:27 - okay
89:29 - there you go that's insane dude i love
89:32 - that
89:33 - right right yeah that's nice um yeah
89:35 - it's cool so red green black and again
89:37 - if i put a stride of three it would jump
89:40 - in groups of three so it would go red
89:42 - skip skip yellow skip skip nothing it
89:45 - would just be red yellow
89:47 - so let's try this
89:49 - there you go
89:50 - and then again if you did if you did
89:52 - straddle four it would go red skip skip
89:54 - skip black
89:56 - skip and then nothing else so this would
89:57 - just be red black nice boom but guys
90:01 - that's how you do that that's something
90:02 - new even for me like slicing in python
90:04 - so if you guys found that useful what
90:06 - can they do aaron
90:08 - um they can uh send a money request to
90:11 - my uh
90:12 - request to my paypal
90:15 - yeah spend the money request so much now
90:17 - you guys can smash the like button uh
90:19 - show us if you guys if your minds are
90:20 - blown just show us um tell us in the
90:21 - comments or if i'm being boring and
90:23 - going over basics
90:25 - but oh yeah guys i think that's awesome
90:27 - honestly because like i didn't actually
90:28 - know that you could do that in python so
90:30 - awesome to see how you do that nice
90:32 - and we're not even done yet bro we're
90:34 - only halfway there look at this watch
90:36 - this so this is called striding this is
90:38 - called slicing the first colon is
90:40 - slicing the second colon is called
90:42 - striding because you wanted to define
90:44 - your stride okay you can be like if a
90:46 - strata one is the same as not having a
90:48 - stride at all yep and if you delete it
90:50 - like having like we said it's like
90:52 - having nothing there okay one by default
90:55 - the cool thing is you can also reverse a
90:58 - list
90:59 - by using negative numbers
91:01 - so now
91:02 - instead of going from zero to six you'll
91:04 - go from six to zero and this will
91:06 - actually reverse the whole list
91:08 - no way
91:10 - wait oops
91:11 - um
91:12 - let's try this
91:14 - there we go so now it's reversed
91:16 - what
91:17 - uh
91:18 - here let me actually explain that so
91:20 - yeah um actually this didn't work i made
91:22 - a mistake there so zero to six yeah um
91:24 - this determines the direction of this of
91:26 - the stride so it's still gonna go from
91:28 - index zero which is red
91:30 - to index six or five which is white but
91:33 - it's going in the right direction should
91:35 - you have done you're starting zero zero
91:38 - exactly bro exactly should done six zero
91:40 - because negative means you wanna go in
91:42 - the left direction so you want to start
91:43 - from index six
91:45 - um which is really well actually that's
91:47 - incorrect you want to start from index
91:49 - five because remember the first one is
91:51 - inclusive yeah so you want to start from
91:53 - index five it'll include it and it'll
91:55 - exclude this last one
91:56 - code kodi joshi actually pointed out in
92:00 - the comments nice he goes also that
92:01 - reverses the list nice yeah awesome yep
92:04 - so if you did that then um it'll go
92:06 - through the reason um this isn't going
92:08 - the first one red at the beginning is
92:10 - getting deleted remember blue there's
92:11 - supposed to be a red at the end but it's
92:13 - getting deleted because it doesn't
92:14 - include zero so you could technically
92:16 - put negative one
92:18 - okay
92:19 - and then um okay it doesn't work but i
92:22 - mean i thought it would but if you just
92:24 - like if you just omit it and don't have
92:26 - it there at all then it kind of says
92:27 - like
92:28 - um
92:29 - to go from the beginning all the
92:31 - beginning but don't stop at zero go like
92:32 - one further okay so this is kind of
92:34 - similar to like not like when you omit
92:35 - it you just kind of like go to the end
92:37 - when there's not a number there nice so
92:39 - this would be reversing the lip
92:42 - reversing the list i've been talking too
92:43 - much one second that's really powerful
92:45 - that's massively powerful because even
92:46 - in javascript like to reverse a list you
92:48 - can do i mean there are tricks around it
92:50 - but it's not as clean as that like
92:53 - that's that's really nice yeah
92:55 - yeah so python makes it nice for like
92:57 - dealing with complex problems which
92:59 - happens a lot in machine learning you
93:00 - want to be able to express these ideas
93:02 - really simply so
93:04 - this looks simple but when you have to
93:05 - do like crazy slicing and like like
93:07 - seven dimensional arrays on like
93:09 - different images of like think think
93:11 - things this adds up quickly so it's
93:13 - difficult in python and impossible in
93:14 - javascript so that's why python is the
93:16 - best sunny crossover
93:20 - if we do a collab with like a reaction
93:24 - it's gonna be bickering the whole time
93:25 - this fight
93:28 - like es6 is better than this
93:30 - slicing
93:33 - that's what's not a beach
93:37 - but yeah so that's that's slicing and
93:39 - striding and using negative strides okay
93:40 - so very very cool there nice
93:42 - um
93:44 - so we can do that and then of course we
93:46 - can omit uh omit both of them and by
93:49 - default because it's negative it'll just
93:51 - start because it's negative it'll start
93:52 - from the right most spot and go to the
93:54 - left because negative means going to the
93:55 - left so this will also work for
93:57 - reversing a list so this is how you can
93:59 - reverse any list in python with one
94:00 - little line so
94:02 - you have colors yeah
94:05 - and then you have colors at negative one
94:07 - so this
94:08 - and this are reversed got you cool stuff
94:11 - awesome
94:12 - now
94:13 - i'm gonna talk about slicing
94:15 - multi-dimensional arrays which is what
94:17 - an image is you can actually slice an
94:19 - image by using the same thing
94:21 - and just get a sub multi-dimensional
94:24 - array from that big array by using the
94:26 - same thing okay so that's why this is
94:29 - relevant
94:30 - so let's say you had
94:33 - um
94:36 - a multi-channel ray because this this
94:38 - can be kind of hard to explain visually
94:40 - with this example
94:41 - uh
94:43 - okay let's clear let's quit out of this
94:45 - okay clear
94:48 - seller
94:49 - clear
94:50 - and then let's go back into python
94:55 - let's have
94:59 - a multi-dimensional array okay yup and
95:04 - let's have one two three four
95:10 - okay
95:11 - yup
95:13 - five six seven eight
95:15 - because this is and one array with three
95:18 - arrays inside of it so far and four
95:21 - okay we've got four right 14 16. so this
95:23 - should be like
95:25 - a um
95:27 - it might be it's going to be kind of
95:28 - hard to do it in here can i can you have
95:30 - like a new line on here
95:33 - i mean if you log in now if you do mra
95:36 - actually let me
95:37 - let me um
95:41 - i kind of want to explain this
95:43 - uh
95:45 - i don't want to i don't want to dirty i
95:46 - don't want to start editing stuff in
95:48 - here because it might get confusing yeah
95:50 - also guys i just wanted to say we just
95:52 - are nearly about to hit 800 likes so
95:55 - massive thank you guys and if you
95:56 - haven't already smash the thumbs up
95:58 - because aaron's about to drop some
95:59 - knowledge on python tricks and tips
96:02 - nice holy crap
96:04 - uh actually let's just try to jump into
96:05 - the code i feel like people probably
96:06 - understand slicing enough at this point
96:08 - to like like translate over the ideas
96:10 - like i don't want to drag on too long
96:11 - because i spent 20 minutes explaining
96:13 - slicing yeah so this is this is the goal
96:16 - we have a frame
96:18 - we have
96:19 - a face in that frame with our
96:20 - coordinates how do we get this as an
96:23 - image
96:24 - of here as a sub image well we can just
96:26 - use slicing with these numbers to slice
96:29 - a portion of this frame which is just a
96:31 - multi-dimensional array okay
96:33 - and that will actually give us an image
96:35 - instead of just this point because all
96:37 - we have is points and then we're
96:38 - actually drawing a rectangle on it
96:39 - ourself
96:41 - uh up here we're just drawing a
96:42 - rectangle around it but we actually want
96:43 - to get like the full image like all the
96:44 - pixel data of this bounding box okay so
96:48 - the way we do that is instead of doing
96:50 - it this way we actually want to have the
96:52 - face be
96:54 - um a slice so what you want to do is you
96:56 - want to take the frame
96:58 - okay
96:59 - and for a multi-dimensional array
97:02 - you can actually slice in both
97:04 - dimensions so what we could do is we
97:06 - could be like okay from zero to the end
97:08 - in the x dimension
97:10 - and from zero to the end in the y
97:12 - dimension
97:14 - remember how to slice okay so this will
97:16 - just this will just say get the whole
97:18 - frame this is actually the same thing as
97:20 - representing the whole frame because
97:22 - from zero you're getting every single
97:24 - um
97:25 - you're getting every single uh column
97:27 - and every single row and every single
97:29 - column i'm getting the x and y confused
97:31 - i gotta double check which one is which
97:33 - but we'll try both we'll learn together
97:35 - we're fresh together
97:36 - but uh one is x and one is y
97:39 - and um of course if you had like a 3d
97:41 - three dimensional thing then you could
97:42 - even slice it in three dimensions like
97:44 - if you had a cube
97:45 - and then you want to like find like some
97:47 - subset some cube in there or some
97:48 - rectangle inside there you could also
97:50 - slice that way okay the idea is this
97:52 - zero to the end and zero to the end this
97:54 - will give us the full frame
97:56 - um
97:57 - so you can probably see where i'm going
97:58 - with this uh all we need to do is just
98:01 - utilize these four numbers to actually
98:02 - define the exact frame the exact
98:05 - subframe of the full frame that we want
98:07 - okay
98:08 - yep and so that's really simple i mean
98:10 - all you want to do is just slice so
98:13 - um where do we want to start so from the
98:15 - beginning the top left corner of it is
98:18 - going to be
98:19 - uh
98:20 - x
98:21 - okay
98:22 - and then x plus
98:25 - width
98:26 - okay that's it and then in the y
98:28 - direction we're going to have y and y
98:30 - plus height
98:32 - that's that's literally it okay so we're
98:34 - going to slice this whole frame and get
98:36 - the sub frame of x x plus w and y y plus
98:40 - h
98:40 - but i'm pretty sure this is backwards i
98:42 - think y needs to come first
98:44 - um
98:46 - i think i just eliminate something so
98:48 - i'm pretty sure y has to come first and
98:50 - then of course if we had a z coordinate
98:51 - as well you would want to do like
98:54 - uh z and then z plus depth or something
98:56 - but we don't have this we're not doing
98:58 - crazy like 3d modeling here we're just
98:59 - doing images but i mean i'm just showing
99:01 - here um that you can do this
99:04 - one thing i do need to point out very
99:06 - very very important is this does
99:08 - actually not work this does not work in
99:11 - vanilla python
99:13 - the reason this does work
99:15 - is because opencv is built on numpy and
99:18 - numpy this works this works in numpy
99:21 - numpy is a library for dealing with
99:23 - numbers and matrices um in python very
99:26 - powerful and it allows you to do cool
99:27 - stuff like this but this is not in
99:29 - vanilla python so that's why in this
99:30 - terminal it wasn't going to work and i
99:32 - didn't want to explain it here because
99:33 - this wouldn't actually work you need to
99:35 - import numpy which is just
99:37 - um
99:38 - numpy like that okay i mean i guess i
99:40 - could have uh defined it here so let me
99:43 - actually show this a little bit uh yeah
99:45 - cause i'm i kinda get it and then
99:47 - there's a little bit of a gap so yeah
99:48 - it'll be handy to go through this yeah
99:51 - yeah
99:52 - um but i think i think it's like a
99:55 - pretty print in in numpy i think it's
99:57 - isn't it oh print f is
99:59 - variables
100:01 - yeah what is it what is the numpy
100:03 - nice print
100:08 - uh how to pretty print a numpy array
100:10 - without scientific notation
100:12 - asking if this live will be saved yes
100:14 - this will be available afterwards all of
100:17 - the live streams are available
100:18 - afterwards guys
100:20 - yeah
100:21 - format i mean there might not be a
100:23 - pretty way to print it that's the thing
100:25 - i didn't think there was that's why i
100:26 - can't remember
100:29 - uh
100:31 - i don't need this let's try bigger
100:32 - matrix
100:33 - yeah i gotta do some some crazy um
100:36 - stuff
100:37 - yeah
100:39 - actually let me just have like is there
100:40 - like a grade of numbers
100:42 - and maybe uh what are we trying to show
100:44 - right now
100:46 - um you wanted to see how how this is
100:48 - getting sliced right yep i think i think
100:50 - maybe we could do it here i think it
100:52 - might be clear on just on the terminal
100:56 - okay the thing is i don't know how to
100:57 - print
100:58 - um
100:59 - okay or let's just try it yeah let's
101:00 - just try it yeah
101:02 - from here so you guys can kind of see
101:03 - like it's not nice and formatted like
101:05 - vertically i was hoping we could like
101:06 - ver because this is a four by four four
101:08 - by four uh
101:10 - um two-dimensional matrices yeah because
101:12 - we have a list of length four and each
101:15 - of those there's a list of length fourth
101:16 - in those so it's like a four by four box
101:18 - actually if we layer these on top of
101:20 - each other okay but
101:22 - we can actually slice like i said using
101:25 - the comma and colons somebody said np
101:28 - dot array
101:29 - i'm not sure if np dot array
101:31 - that's what it is you just print um
101:34 - np dot l so thank you cody joshi for
101:37 - that so he says np
101:39 - dot uh array and then open parentheses
101:42 - and then square brackets inside
101:46 - uh
101:51 - wait what
101:52 - no i know i know i know what he's saying
101:53 - it's coming back to me
101:55 - because i haven't used numpy in a few
101:57 - weeks so i kind of forget it can you
101:59 - type it uh is it in the comments you
102:01 - could do four line in array
102:04 - ah i don't know i don't iterate over it
102:05 - you know yeah i think it's um
102:10 - array.l or something
102:12 - yeah
102:16 - numpy
102:19 - pretty print array
102:24 - i mean we're back here
102:26 - what did he say
102:31 - mp first
102:33 - and then so then you would end up doing
102:35 - numpy dot array so you could do
102:37 - numpy.org
102:38 - would you numpy the ori oh yeah because
102:40 - yeah you import numpy
102:42 - so remember
102:45 - or just or just uh no no i think you do
102:47 - numpy dot array and then open
102:49 - parentheses l
102:53 - ah there we go
102:55 - thank you guys that's awesome i thought
102:58 - it was pretty print but i mean that's
102:59 - that's the
103:00 - normal yeah
103:02 - all right there we go so this was
103:03 - talking about we have a double double uh
103:05 - two-dimensional array here yeah uh four
103:07 - by four so this is easier to visualize
103:08 - what i was trying to do from the
103:09 - beginning yeah oh god
103:12 - guys i think i think he deserves a
103:13 - thumbs up for that
103:16 - terrible
103:19 - oh we'll hire him have him teach it yeah
103:21 - number three nice
103:24 - um
103:25 - i don't know it wasn't popping up
103:26 - because yeah remember it was something
103:28 - simple with the array but they're like
103:30 - iterating through all the crap i'm like
103:31 - okay i don't want to have to do all that
103:32 - again
103:33 - but
103:34 - anyways
103:35 - uh so here the way we can slice this is
103:37 - you can go by the y dimension then the x
103:39 - dimension so
103:42 - um let's just slice this so let's start
103:45 - with
103:46 - the y dimension let's just get the
103:49 - first two okay okay
103:53 - um so this is the first dimension so
103:54 - what we're doing here is we're getting
103:55 - the first element and the second element
103:57 - so in this over array we're getting the
103:59 - first element which is this list and the
104:00 - second element which is this list okay
104:03 - is that clear yep and now so we we're
104:07 - getting this
104:10 - now what if we wanted to get like this
104:11 - three four and the seven eight as like
104:13 - the the sub sub array of the whole thing
104:16 - then all we wanna do is just pop in a um
104:20 - i don't know
104:26 - oh
104:29 - i think we
104:30 - are no
104:32 - is it element two oh wait we want to go
104:33 - from element two we're back okay we're
104:36 - back
104:37 - i think i lost you for a second aaron
104:38 - you'll be drunk
104:40 - we lost the stream for a sec uh i don't
104:42 - know if it was i think it was skype i
104:43 - think it might have just been skype
104:46 - oh it just broke down for a sec yeah all
104:48 - right we're good
104:50 - anyways um so
104:53 - if we have uh the first two elements
104:55 - here
104:56 - um slicing from zero to two
104:58 - one two three four and five six seven
105:00 - eight we're essentially getting these
105:01 - first two the first is like elements
105:03 - because zero up to two but not including
105:05 - two yeah uh now if we wanna get this sub
105:07 - array three four seven eight then we're
105:09 - going to need to further
105:11 - uh well actually let's do this sub array
105:12 - two three six seven okay how would we
105:14 - get this out of this whole thing okay
105:16 - well again it's just gonna be a simple
105:18 - slice
105:19 - um
105:20 - but within each of these arrays this is
105:23 - element zero and this is element one so
105:25 - we wanna go from element one to element
105:28 - uh two but this isn't included so
105:30 - element three
105:32 - um will give us these two if we say
105:34 - element three right
105:35 - yeah
105:37 - it makes sense sunny yep we're good
105:39 - and this but i think it might be
105:41 - backwards yeah it's backwards so um when
105:43 - you're adding when you're adding uh
105:45 - dimensions to the array you need to
105:47 - actually go in reverse order so it's
105:49 - going to be like
105:50 - this
105:51 - okay so this will give us from these two
105:54 - to these two and then also
105:56 - of these first two rays okay i believe
105:59 - yeah i mean it might might break
106:01 - uh indices
106:03 - do you have questions
106:07 - huh do you have to use the opencv
106:10 - opencv is built on nonpart number i mean
106:12 - will they utilize numpy opencv is but
106:14 - you're inside of um
106:17 - you're inside of it yeah that's what
106:18 - screw me up yeah because i need to call
106:20 - the numpy stuff yes there might be some
106:22 - numpy dot um
106:25 - everybody
106:27 - yeah numpy dot array l and then you do
106:29 - what you did l
106:31 - yeah because it's a numpy
106:36 - getting turned around over and over
106:40 - still not working
106:42 - um
106:43 - i should have brushed up on my numpy
106:45 - syntax before this i wasn't expecting to
106:47 - show it in here i was just gonna show
106:48 - the opencv part uh but
106:52 - all right okay guys let's investigate
106:53 - together so
106:55 - whenever you forget code just you know
106:57 - go to google and and figure it out um
107:00 - how to
107:02 - display numpy
107:04 - uh
107:07 - i mean subreddit should work i just i
107:09 - don't know why it's not working because
107:10 - it was working in the uh open cv here
107:14 - oh maybe you gotta do uh
107:17 - frank face numpy ray well let's let's
107:20 - display the type so this should be a
107:21 - numpy array so let's print
107:23 - the type just make sure that typing is
107:25 - all correct so when we
107:27 - actually somebody said store that in a
107:29 - variable and then use that so i think
107:32 - what we need to do is memory thing yeah
107:34 - how about even you see have it as you
107:35 - had it before it's a number array but
107:38 - have the square brackets outside the
107:39 - parentheses
107:41 - the score back it's outside the
107:42 - parenthesis uh
107:44 - no so you know you've got um nump.ral
107:50 - yeah
107:51 - yeah do that and then have the square
107:52 - brackets outside the parentheses
107:57 - outside the parentheses what do you mean
107:58 - the score brackets like so did you numpy
108:00 - them right
108:02 - yeah l and then
108:04 - and then out so outside that bracket so
108:06 - i have l inside the brackets
108:08 - yeah outside the brackets have square
108:10 - brackets
108:11 - so so now on the right right so on the
108:13 - right uh put the square brackets and do
108:15 - one three zero two well that one no
108:16 - that's outside the parentheses
108:19 - outside the parentheses yeah
108:21 - oh just index like this directly i think
108:24 - this might actually work
108:25 - no no i was saying so so i have numpy.a
108:28 - l
108:32 - yeah and then and then change them print
108:34 - yeah and then get rid of the parentheses
108:36 - just make square brackets there oh
108:39 - dang
108:40 - coding in this terminal is terrible
108:42 - yeah
108:43 - no yeah like that maybe that will work
108:45 - yeah
108:47 - hey there we go okay because then you
108:49 - then you're doing it on the object yeah
108:51 - you're getting back
108:53 - yeah but i mean this is also wrong this
108:55 - is uh index you get raw
108:57 - yeah you get all turned around with
108:58 - these numbers um okay let's let's try
109:00 - the other way around
109:03 - zero and two
109:06 - one and three
109:09 - two three six seven let's see
109:12 - there we go
109:13 - nice all right we finally got it guys so
109:15 - the ordering is
109:17 - um if you wanted to get this sub array
109:19 - then
109:20 - in numpy using raw numpy if you're to do
109:22 - it then you need to use the numpy dot
109:23 - array
109:24 - um get the list so this is um
109:28 - because l is just what is l l l yeah l
109:31 - is just a raw python list
109:33 - okay so we have to convert it to an
109:35 - array here yeah you have to explicitly
109:38 - convert it to an array by using
109:39 - numpy.array change this and then once
109:41 - it's in numpy form then you can index it
109:43 - like i was saying you can't actually do
109:44 - this on vanilla python yeah so that's
109:46 - where
109:47 - not enough coffee man i run out of
109:48 - coffee and now and and what we're doing
109:50 - with that indexing is we're saying get
109:52 - the first and second array inside of the
109:55 - the sort uh overall array and then we're
109:58 - saying
109:59 - slice it to get the the the first and
110:02 - second
110:03 - uh
110:04 - first and second in the um y direction
110:06 - so in the y direction you know going top
110:08 - and bottom
110:09 - then we want to get the first and second
110:12 - and then in the x direction you want to
110:14 - go from index one to three so we're
110:16 - getting these two and then from one to
110:18 - three it's going to be these two
110:22 - sunny is also becoming pro in python hey
110:25 - let's go
110:28 - yeah but not not as pro as the guy that
110:30 - was helping me out because i'm just here
110:32 - forgetting about numpy
110:35 - it's been a bit
110:37 - but
110:42 - oh
110:45 - i think we lost aaron again but just
110:48 - treat him he's back
110:50 - this three
110:52 - i think i lost you for a second aaron
110:54 - we're back we're back
110:56 - oh my god this internet man
110:59 - also just
111:00 - yeah just want to add a comment here so
111:02 - sarah rajput says hello there i recently
111:04 - joined pwj community it's awesome and
111:06 - i'm really excited welcome dude i love
111:08 - seeing our own students on the on the
111:09 - streams we can see here
111:20 - so here um this is a casting
111:24 - list this python list
111:27 - okay
111:28 - aaron's internet is being a little janky
111:31 - or is it me i'm not sure if it is
111:34 - connecting
111:36 - uh
111:38 - all right now we have it did it cut the
111:40 - stream no no i don't think it's kind of
111:42 - the stream i think it's uh
111:44 - it's okay good yeah
111:48 - just lagging
111:51 - don't worry let's go let's carry on yeah
111:53 - we'll carry on sunny
111:54 - yep
111:56 - okay okay got it
111:59 - i think it's the shoddy
112:01 - yeah i i can't hear you man you can't
112:04 - hear me
112:06 - okay cool
112:07 - so
112:08 - like
112:09 - the lag i think there's a huge lag
112:12 - okay oh we've lost we've lost aaron on
112:15 - the stream okay so aaron do you want to
112:16 - share your screen
112:22 - yeah can you hear
112:24 - yeah
112:30 - uh bear with us guys a little bit of an
112:32 - internet
112:34 - moment
112:35 - i'm not sure if phil or aaron okay i
112:38 - think we're back
112:39 - yeah i've got you now i've got you can
112:40 - you
112:43 - back sonny
112:44 - yeah all right good good yeah i think
112:46 - there's a internet hiccup there can you
112:48 - hear me oh dude
112:50 - before yeah so can you hear me now
112:56 - yep what's happening what's happening
112:57 - yeah we just got a 50 i think it's
113:00 - mexican dollars super chat from jessica
113:03 - apollina saying i love your streaming i
113:05 - don't have lots of professional
113:07 - experience in python although i'm fond
113:09 - of learning and build my personal
113:10 - projects huge huge thank you jessica
113:13 - that's that's insane we massively
113:15 - appreciate you watching this and yeah
113:17 - like hope keep on enjoying the content
113:19 - that's that's insane i love that
113:21 - especially when we just had some some
113:23 - streaming difficulties but we're back
113:25 - we're back nice
113:28 - let's go and coding difficulties yeah
113:31 - like
113:32 - i'm running on three hours of sleep bro
113:34 - this is not yeah why did i do this
113:37 - uh but
113:38 - um what was that saying so yeah here in
113:40 - the numpy i ironed this out so the issue
113:43 - was making was this is a python list but
113:45 - you got to make sure i'm pilot so you
113:46 - gotta pop into the right function and
113:48 - then from there you can slice in this
113:49 - manner
113:51 - so what i want to make that that
113:52 - parallel here an opencv it's much easier
113:54 - because everything is a
113:57 - numpy array by default like the frame
113:59 - here is this is a numpy array so you can
114:01 - just slice it normally
114:03 - um instead of having to do the whole the
114:05 - whole numpy you have to actually make a
114:07 - numpy right yourself okay
114:09 - um but i'll try not to forget that again
114:13 - um but yeah so this numpy array and then
114:14 - we slice it like this and again so we're
114:16 - going to do the y direction first and x
114:18 - direction second so this is actually the
114:20 - correct way of doing this
114:22 - back coming back to our application okay
114:24 - so
114:25 - let's delete this out
114:27 - and
114:28 - the sub
114:31 - frame
114:33 - using
114:36 - high
114:37 - uh
114:38 - n dimensional
114:40 - slicing
114:41 - nice okay all right that might be kind
114:43 - of big
114:44 - but
114:45 - there we go
114:47 - yep so opencv built a numpy superpower
114:50 - and uh going forward this should work so
114:52 - let's walk through this again just to
114:54 - touch base again because that was a long
114:55 - ass tangent these streams go on way too
114:56 - long
114:58 - just want some breakfast don't worry
115:00 - everybody get all the faces
115:03 - within the frame
115:09 - yeah i can't even see the stream because
115:10 - i'm just in my code but i'm trusting you
115:12 - there's we have like two viewers right
115:14 - two no no no we're good we got we got
115:16 - about 250 people doing dude watching
115:21 - dope yeah lag is super bad like you
115:24 - reply like six seconds
115:26 - yeah i know but it's okay so just keep
115:28 - going keep going keep going we're good
115:31 - um
115:33 - all right sonny i don't know if it's a
115:36 - holy crap this internet man
115:39 - really killing that uh any anyways so
115:42 - let me i'm just gonna keep talking and
115:43 - that way it's like an on
115:46 - so we get the faces we find the the
115:48 - frame we use numpy slicing to get just
115:51 - the face
115:52 - and then we convert just the face to
115:54 - grayscale
115:55 - yeah and then once we have just the face
115:57 - of grayscale then we can run the small
115:59 - detector on that little face
116:01 - and then print all the rectangles around
116:02 - those smiles and this
116:12 - out of here god damn it there we go
116:16 - yep
116:19 - we we we're there yep we're there
116:22 - that's sunny awesome
116:24 - so quit out let's run this one more time
116:25 - and see if it works
116:29 - hey dude there we go got it something
116:32 - something's uh
116:34 - yeah
116:36 - i think the x and y
116:40 - yeah so this is the one last thing i
116:42 - want to say um the area that's happening
116:44 - here is
116:46 - um so we're finding the faces right in
116:48 - front of the faces we're drawing the
116:49 - face uh we're drawing the rectangle
116:51 - around the face okay we're drawing a
116:53 - rectangle around my face
116:54 - that's the first step
116:56 - yep second step is we're getting the
116:59 - face here so we're creating the subarray
117:01 - and then we are searching for the
117:05 - um
117:06 - i mean we're making a grayscale and then
117:07 - we're searching for the smiles within
117:09 - that face once we get those coordinates
117:11 - those are correct the issue is we're
117:14 - actually drawing the rectangle on the
117:16 - frame instead of on the little face
117:20 - so
117:21 - um the reason reason here is we're
117:23 - getting coordinates so within the face
117:25 - it's a little square right it's a little
117:26 - tiny square yep um when we run smiles on
117:29 - this little tiny square we're getting
117:31 - some coordinates back
117:33 - um in of like from for those smiles does
117:35 - that make sense sunny yep that makes
117:38 - sense so like
117:39 - actually it might be easier to explain
117:41 - here on the
117:43 - uh here
117:45 - so here
117:47 - holy crap
117:49 - here uh we're getting getting the
117:53 - face first and then get the sub image
117:55 - and then and then we want to find the
117:57 - smiles in here so the thing is because
117:58 - this is the sub image the xy point is
118:01 - actually pretty small it's starting from
118:03 - here and we're gonna say okay go down
118:05 - this much y and go across this much x
118:07 - this is the top left point and this is
118:09 - the bottom right point and we can draw
118:11 - this the thing the problem is i was
118:13 - actually drawing this rectangle based on
118:16 - these coordinates so this was offset way
118:18 - up here in the left so it was actually
118:20 - taking
118:21 - this um y and this x and drawing it on
118:23 - the big big frame oh actually
118:27 - yeah we actually want to draw it within
118:28 - the little face
118:29 - so how we fix that i mean this actually
118:32 - doesn't matter too much because we're
118:33 - going to get rid of it and show small
118:35 - anyways but it's just for additional
118:37 - purposes
118:38 - yeah and so i think it is a game of mine
118:40 - i think it is important some people
118:41 - might want to show that that rectangle
118:43 - you know yeah
118:45 - yeah yeah
118:47 - so we need to do is in smiles when we
118:49 - draw the rectangle instead of drawing it
118:51 - on frame right we actually want to draw
118:53 - it on the face so we take this sub image
118:56 - and we draw it on the face because
118:58 - before
119:00 - here
119:01 - oops
119:02 - when i smile
119:04 - see it's dry like if you took this if
119:06 - you took this green square and put it in
119:08 - the top left you can kind of see that
119:09 - that's where my face would be my smile
119:11 - go ahead you see yeah yeah so we're just
119:14 - drawing it on the wrong frame right now
119:16 - if we go back here and we quit out
119:19 - uh
119:20 - if we quit out
119:23 - just interrupt that
119:26 - then
119:27 - we can actually draw it on the face
119:28 - instead so this is another thing i want
119:31 - to say so the face is actually just a
119:34 - subarray of frame like i said okay but
119:37 - the thing is when you slice like this
119:39 - i believe you're actually just accessing
119:41 - the actual memory of this full frame so
119:43 - you're not making a copy you're not like
119:45 - saying oh this uh this is
119:49 - a new subarray that's equivalent to like
119:51 - this little range but you're actually
119:52 - saying just get me this portion of
119:54 - memory in this weird slice because you
119:56 - have direct access to the memory like
119:57 - that with numpy okay so if i change this
119:59 - data within here if i change the data of
120:02 - the frame within here then it'll
120:04 - actually change it on the mainframe as
120:06 - well because we're just saying okay this
120:07 - little slice of the whole frame um this
120:10 - editing this in here will also edit this
120:12 - which means editing the face will still
120:14 - edit the frame so we can still we can
120:16 - draw on the face which will work
120:18 - uh if you draw on the face then it'll
120:20 - actually also draw on the on the the
120:22 - master frame okay even though we're not
120:24 - drawing on the frame so that's that's
120:26 - how that works there because when you
120:27 - when opencv draws a rectangle it's
120:29 - actually just going into
120:31 - the the memory and just like changing
120:33 - the memory there right here
120:36 - yep
120:37 - so
120:38 - now let's try one more time
120:41 - and
120:43 - oh hey
120:45 - hey
120:46 - with that said guys we just hit over 850
120:49 - likes just push that to 900 and if you
120:51 - found that cool and aaron and aaron guys
120:54 - aaron just debugged everything in front
120:56 - of you so i think he deserves a smasher
120:58 - thumbs up one and just some just some
121:00 - numpy nightmare man yeah syntax
121:03 - numpy nightmare exactly that's the one
121:05 - thing i hate about numpy i wish they had
121:07 - i wish they had some nice like easier
121:09 - syntax to
121:11 - but it's all like function based that's
121:12 - the one downside but i know i mean numpy
121:14 - is awesome yeah
121:16 - you fixed it exactly so that's the main
121:18 - thing
121:19 - thanks thanks uh with help from the
121:20 - community yeah
121:22 - shout out shout out to whoever that was
121:24 - i couldn't find it on google and i was
121:25 - like i give up
121:28 - not important
121:31 - but anyways
121:33 - uh from here um now though but i mean
121:35 - this is cool but i mean this is kind of
121:37 - just like the same as face detection or
121:38 - car pedestrian tracking
121:40 - but it's like outlining it but i think
121:42 - it'd be more cool if it like just
121:43 - detected that i was smiling and put the
121:45 - word smiling underneath because you're
121:47 - only concerned with smiles if it's like
121:48 - a face you're like oh this face is
121:50 - smiling or this face is not smiling yeah
121:52 - so i think it's cool to um do that
121:54 - instead
121:55 - so let's do that next nice let's quit
121:58 - out of here
121:59 - and the very last thing we're going to
122:01 - do is instead of
122:03 - drawing this
122:04 - okay instead of drawing the rectangles
122:06 - around the smiles at all we're not even
122:09 - going to do that we're just going to
122:10 - completely ignore drawing the rectangles
122:13 - um i mean it was relevant because i want
122:14 - to show you the cool little like offset
122:16 - thing how the memory is actually being
122:17 - being saved here when you slice it's the
122:19 - same exact memory so it goes into the
122:21 - same memory and changes it
122:23 - um but i do want to show you how to put
122:25 - some text so i don't i want to avoid
122:27 - another syntax mistake the
122:29 - i'm the master
122:31 - copy paster
122:33 - uh yeah i think it was massively
122:34 - valuable to show them how to draw the
122:36 - actual smile because then it gives them
122:38 - context as to what we're gonna do next
122:40 - yeah
122:42 - yeah so i got rid of drawing the smile
122:43 - because i don't want that there
122:45 - but now i pasted this
122:47 - ugly looking thing here so
122:50 - what this is is now instead of drawing
122:53 - the rectangle around the smile i want to
122:55 - actually draw
122:57 - the word smile
122:59 - uh i mean write the word smile smiling
123:02 - okay i have it right here smiling
123:03 - underneath the little
123:05 - um
123:07 - portion so like when i go here you can
123:08 - see smiling pops up for a few seconds
123:10 - that's that's what we're gonna be doing
123:11 - now instead of having the right i think
123:12 - you're gonna have an error because you
123:14 - said if smile length if length of smile
123:17 - so go back to the code is it meant to be
123:19 - plural if length of smiles because
123:21 - you've done smiles array
123:25 - um
123:26 - yeah i think so yes so length of smiles
123:28 - is greater than zero yeah nice yeah
123:30 - because uh let me just double check yeah
123:32 - because down here i think i used
123:34 - um yeah yeah you smiled singular yeah so
123:37 - yeah
123:38 - uh
123:40 - so yep so pretty much all i'm gonna say
123:42 - is if length of smiles is greater than
123:44 - zero because remember smiles is a list
123:46 - of all smiles it found within the face
123:49 - if it's greater than zero which means
123:50 - there's one or more smiles then we're
123:52 - just gonna put some text on the screen
123:54 - so this is very simple this whole thing
123:55 - here is just displaying the word smile
123:57 - at some coordinate so similar to a
123:59 - rectangle
124:00 - it's cv opencv.put text we're going to
124:03 - put text on the frame okay and that's
124:06 - the first thing the image the second
124:07 - argument is going to be the words you
124:09 - actually want to put so i'm going to
124:10 - just going to put smiling yeah or you
124:12 - can put like why so serious or something
124:14 - okay and then next is
124:16 - next is the location the top left point
124:19 - of where you want to display the text
124:22 - so in my case since i want to put the
124:25 - word smiling just outside the
124:27 - the green box of the whole face i'm
124:29 - going to use
124:30 - the green box coordinates
124:32 - okay okay
124:33 - so i want to put it below it so the x
124:36 - coordinate will be the same um but the y
124:39 - coordinate will be y coordinate plus the
124:41 - height right so i'm just going to
124:42 - actually draw this as you do it on the
124:44 - screen yeah because i think it might be
124:45 - handy
124:46 - so carry on talking over and i'll draw
124:48 - like as we do it
124:50 - i have it here if you want to yeah
124:52 - we can use and explain it here yeah
124:53 - let's do that yeah
124:55 - yeah so um we have the coordinates so we
124:58 - know this this picture is smiling but we
125:00 - also but we want to put the word smiling
125:03 - down here instead of having this we want
125:06 - to have this yep so if we have um we
125:10 - know this is a yes so we know to display
125:12 - smiling then but how do we get the
125:14 - coordinates of this
125:16 - so we have the coordinates of the whole
125:17 - face which is what we want so why don't
125:19 - we just have the use this top lift point
125:21 - to figure out how to get down here so we
125:23 - have the top left point which is x
125:25 - so we can just say at x is where you
125:28 - want the top left point of the text to
125:29 - start at x yep but then the y point we
125:32 - don't want it to start here because it
125:33 - would say smiling up here so we add
125:35 - um
125:36 - y this is y yeah plus h plus the height
125:39 - right so y
125:41 - and then we're saying plus the height
125:43 - which is this so like y which is going
125:45 - to be right here yeah and then i added
125:47 - and then i added 40 just to have a
125:49 - little bit so it's not touching the box
125:51 - i just added a little bit
125:52 - and then that's it so this is this point
125:54 - is going to be x
125:55 - and then y
125:57 - plus h
125:58 - plus a little bit more right so you guys
126:02 - exactly we have x and y in the corner uh
126:04 - just go back to that that side for a
126:05 - second
126:07 - uh so we've got x and y in the corner
126:09 - and then we go we've got we're doing y
126:10 - plus the height and that gets us to the
126:12 - bottom of the box and then you see
126:14 - aaron's got smiling exactly but if he
126:16 - didn't add the 40 it would be sitting on
126:18 - top of the green right now or like oh
126:21 - yeah pretty much on top of it so it
126:22 - would just be touching yeah so we want
126:24 - to add 40 to basically get push it past
126:26 - that little bit extra so yeah awesome
126:28 - nice yup and that's really it guys so
126:32 - as you can see that's going to be the x
126:34 - is the same and then y plus h plus 40 is
126:36 - right there so that's the top left point
126:38 - where the text is going to start
126:40 - then from there
126:41 - font scale is just the size of the font
126:43 - so size three
126:45 - um and then the font face is just the
126:47 - font you want to use so
126:49 - um
126:50 - opencv has different fonts so
126:52 - uh that font is called font underscore
126:54 - hershey underscore plain uh it's the one
126:56 - that looked the nicest you're kind of
126:57 - limited on the fonts but i mean it gets
126:58 - the job done and then last is the color
127:01 - so
127:02 - bgr again but all three are maxed out so
127:05 - this will be white because if all three
127:07 - channels are at maximum brightness 255
127:09 - then it'll just be white nice so
127:13 - if we run this
127:14 - hopefully with no hiccups
127:16 - before you run it before you run it we
127:17 - actually just got a superchat from
127:19 - velocity trading he says my girlfriend
127:22 - introduced me to your videos she is a
127:24 - data scientist in nvidia and she loves
127:26 - your content on react yeah shout out to
127:28 - her princy thing that's amazing thanks
127:31 - sonny yeah thank you yeah and look at
127:33 - that how crazy is that it's like two
127:35 - worlds came together react yes now we're
127:36 - talking about data scientists where the
127:38 - majority of data scientists code with
127:40 - python so yeah this is this is dope
127:43 - it's awesome yeah you should do a collab
127:45 - with her
127:46 - like a
127:48 - react data science project yeah
127:50 - but
127:52 - nice awesome awesome people are showing
127:56 - sonny the love the hulk you get a you
127:59 - should like you should demand people in
128:00 - the comments call you the hulk anybody
128:02 - who wants to call sonny by the hulk i'll
128:04 - pop that in the comments right now going
128:06 - forward we'll legally change his name to
128:07 - the hulk because he can handle anything
128:09 - except standing we have papa react we
128:12 - have was it the react god now we have
128:14 - the hulk
128:17 - the react called
128:18 - yeah god
128:20 - yeah it's just hulk just talk the
128:21 - british proper hulk
128:23 - um
128:24 - where were we so
128:27 - yeah so we're gonna we're gonna draw
128:29 - smiles underneath the face instead of
128:31 - actually drawing the box well let's put
128:33 - both for now just for demonstration
128:34 - purposes nice
128:38 - let's run this
128:39 - there we go
128:41 - hey
128:42 - ah nice that's awesome dude
128:46 - yeah
128:48 - it looks a bit like that horror game you
128:49 - know that that slender man
128:51 - that's what the text looks like
128:55 - yeah yeah oh the slenderman text yeah
128:58 - the smiling i mean
129:01 - that's awesome dude
129:03 - and then now if we just get rid of the
129:06 - if we get rid of the
129:09 - um drawing on the rectangles then it
129:11 - should work
129:12 - nice guys if you find that cool because
129:14 - it is it's like look at this look if now
129:17 - we should see no rectangle
129:19 - but we should see
129:21 - the smiling which means that we have
129:22 - that finished sort of hey look at that
129:25 - that's that's that's nice dude
129:27 - that's awesome
129:29 - and even if we have two faces on there
129:31 - because we have that loop it will
129:33 - actually go ahead and do it for a second
129:35 - face as well right
129:37 - i will yeah so let's uh let me just get
129:40 - and guys i wish there was a way to get
129:41 - your face on the screen too but the
129:42 - stream tech kind of limits that but
129:44 - yeah let's go ahead and see it wait look
129:47 - at that nice that is awesome guys if you
129:51 - think that's cool smash the thumbs up
129:52 - man that is awesome
129:54 - and if you haven't already and you are
129:57 - following me and aaron on instagram go
129:59 - ahead and shoot us a story right now so
130:01 - this is my tag and this is aaron's tag
130:03 - right over here so my tags over here
130:05 - aaron you just point somewhere down
130:07 - there
130:08 - you'll see it
130:09 - uh yeah so go ahead and shoot a story
130:12 - and um yeah tag us in there and let us
130:14 - know that you're watching
130:16 - and yeah you guys can we can have a chat
130:18 - with you guys if you found that cool
130:20 - i think that yeah
130:22 - like it's so impressive like how many
130:24 - lines of code was it in total
130:26 - oh even when you zoom in look at
130:28 - that and guys that's a really good
130:29 - example bro because they're showing the
130:31 - actual dynamic width and height changing
130:34 - yeah yeah that's awesome
130:38 - all right the wheel man cool 900
130:41 - likes as well guys that is insane thank
130:43 - you guys
130:47 - but yeah guys that's pretty much the
130:51 - completed app um
130:53 - and there's other things you could
130:54 - probably do to clean up the code you
130:55 - could probably pop some of this stuff in
130:56 - a function you know i just kind of
130:57 - blobbed it all in one go um so not very
131:00 - good code design here
131:01 - uh but other than that yeah i mean we
131:03 - went over the using the face detectors
131:06 - and small detectors using xml files
131:08 - which are pre-trained if you learn how
131:09 - these actually work then you can go
131:10 - watch the other streams
131:11 - for the actual algorithm
131:13 - um
131:14 - of how that works uh we captured the the
131:17 - webcam footage we're iterating um
131:19 - forever until we're done with the webcam
131:21 - footage we're reading every frame one by
131:23 - one and then for the current frame we
131:26 - are doing a quick check to make sure the
131:27 - frame is good to go
131:28 - then from the frame we're creating the
131:30 - green the frame grayscale so that we can
131:32 - optimize it and we can um speed up the
131:34 - process and the calculations uh once we
131:36 - have a grayscale frame then we find
131:38 - faces within that frame
131:41 - then from all the faces we want to
131:43 - actually draw the rectangle around each
131:45 - face
131:45 - nice and then from each face you want to
131:48 - create the subarray using the numpy
131:50 - slicing here the
131:52 - the um which is numpy under the hood so
131:54 - we got the little sub right here which
131:55 - is the same
131:56 - um data in memory as the regular frame
131:58 - so when we edit this little sub ray it's
132:00 - still going to edit the mainframe yep
132:02 - the main frame then then we change the
132:04 - face to grayscale um so we can run small
132:07 - detection on the face
132:09 - and then from there
132:12 - um
132:13 - uh once we have that then we can just
132:15 - label it as hey we found a smile
132:18 - instead of drawing the rectangles right
132:21 - so
132:22 - remember guys what we did that nested
132:24 - approach for when we were drawing uh
132:26 - where did that happen again aaron so
132:27 - where we avoided doing it for everything
132:30 - we did it for just the smiles it was
132:33 - line 38 right
132:36 - yeah yeah
132:37 - nice
132:39 - that's so cool and then
132:41 - we put the text there and then um at the
132:44 - end then once we have once we have the
132:47 - once we found the face drew the
132:48 - rectangle found the smiles wrote the
132:51 - word smiling once we've done all that
132:53 - and we've edited the complete frame and
132:54 - all the the correct rectangles and words
132:57 - are on the frame at the right locations
132:58 - at the very end of all that at the end
133:00 - of the end of the detection we uh use
133:04 - cv2.imageshow just to show the frame and
133:06 - then we wait for one millisecond and
133:08 - then we repeat to the second frame so
133:10 - all of that's happening every single
133:11 - frame all of this code
133:13 - dude it's insane like if you actually
133:15 - think about it like let's say we went
133:17 - ahead and got rid of the comments and we
133:18 - got rid of everything
133:20 - that's so little code to get that
133:23 - powerful functionality happening all
133:25 - right so let's actually do that yeah so
133:26 - let's make this super optimal
133:28 - nice yeah guys drop in the comments how
133:30 - many lines of code you think this might
133:32 - be if we can if we can do that before
133:34 - aaron gets to the top
133:36 - i'm gonna say maybe like 30 i'd say
133:39 - maybe
133:43 - i think it'll be that around there this
133:44 - is insane that like if you used to do
133:46 - this kind of thing in like javascript
133:47 - you would have to write more and i'm a
133:49 - big fan of javascript but i will say it
133:51 - first time like in python you can get a
133:53 - lot of power out of this uh we're just
133:55 - having small amount of code so that's
133:56 - that's still oh again
133:58 - okay
134:03 - anybody anybody want to put money down
134:06 - yeah
134:06 - just do it dude
134:08 - 22 bro
134:10 - i mean this doesn't even count this
134:11 - doesn't even count holy crap that's
134:14 - insane and actually this because it's
134:16 - just a break statement you could
134:17 - probably get away with doing this i mean
134:18 - probably not good but i'm cheating
134:20 - because i just fell off
134:21 - that's insane we have machine learning
134:24 - ai
134:25 - everything involved in that at like 22
134:29 - 21 lines of code
134:30 - so yeah oh man shaw was close he said
134:33 - that 25 abbas abdelius of 32 young ipsec
134:38 - guys it's less than we all thought like
134:39 - somebody wrote one i don't think we
134:41 - could do one
134:42 - i mean just pop this in a function you
134:44 - know just oh yeah
134:50 - that's insane i love that dude that's so
134:52 - so cool man like um
134:55 - yeah
134:56 - that's awesome and guys i think this
134:57 - also goes to show you
134:59 - how
135:00 - yeah
135:01 - there you go that's the hack to
135:03 - everything guys one line
135:05 - nice
135:08 - i'm doing it bro i'm doing it one second
135:10 - just for that guy because i got nothing
135:12 - better to do with my life i see a lot of
135:14 - people saying like this is like calling
135:16 - uh the ha cascade ai isn't really ai
135:19 - guys anything you have when you have a
135:21 - classification model that is kind of
135:24 - that comes under ai and trusted take it
135:26 - from a guy who's done a masters in this
135:27 - stuff like you it is a like that is that
135:31 - is what we classify yeah yeah if you
135:32 - wanna if you wanna go see how these are
135:35 - actually generated because we did just
135:36 - download this and just used it but if
135:38 - you want to actually see how you create
135:39 - this like how you can train anything to
135:41 - like like recognize what pepsi cans
135:44 - recognize uh coffee mugs whatever you
135:46 - want then i explained that in the face
135:48 - detection video this is like an
135:49 - extension using smiles but i explained
135:51 - that in face detection and the car and
135:53 - pedestrian tracking of like actually how
135:54 - the algorithm actually how the computer
135:56 - actually learns this like how the hell
135:58 - does the computer take an image and know
136:00 - how does the brain like how does it use
136:02 - its brain to figure out what it is so i
136:04 - i explained that there um but it is ai
136:06 - because this is how computers can learn
136:09 - it's not just random
136:10 - stuff
136:11 - yeah and that's the powerful thing guys
136:13 - like once you have trained models and
136:15 - like a lot of people i think even in
136:16 - firebase there's a bunch of like uh
136:18 - trained models that you just have access
136:20 - to
136:20 - which i'll be dropping some videos on so
136:22 - thumbs up if you if you're excited for
136:24 - that but um yeah like you can pretty
136:26 - much go ahead and use pre guys to train
136:29 - a model from by yourself you need to
136:31 - take a long time yeah you need a massive
136:33 - amount of data that's why things like
136:35 - tesla everything gets better over time
136:38 - because you get more data over time
136:40 - which means the model can get more
136:41 - accurate
136:42 - yeah so like it's not super feasible for
136:44 - us to train our own um if you understand
136:47 - how the algorithm works and then you
136:48 - utilize it that's really all you need to
136:50 - know to innovate we could technically i
136:52 - could technically go and take fake like
136:54 - get faces from the internet a bunch of
136:56 - different faces a bunch of different
136:57 - smiles and find those pictures and trim
136:59 - them all myself get the data set and
137:00 - then run it through some some training
137:02 - software to do it but then even that
137:04 - that's just an extra step of just taking
137:05 - images plugging into this this thing and
137:07 - then going up if you actually want to
137:09 - code up this algorithm that gets pretty
137:11 - deep and nasty i did it i did that at my
137:13 - schooling at georgia tech um it's
137:15 - interesting and fascinating but it's a
137:16 - big headache so like why reinvent the
137:18 - wheel so we're doing that here but if
137:19 - you want to get down in the nitty-gritty
137:21 - then uh by all means go through it
137:23 - there's a there's a free computer vision
137:24 - course from georgia tech on udacity you
137:27 - can look it up it's called computer
137:29 - vision they talk about all this stuff in
137:30 - complete detail they talk about other
137:32 - object tracking like common filters and
137:35 - uh cnns which are convolutional neural
137:37 - networks which is another way to do like
137:38 - tracking and object detection um but her
137:41 - cascade is just the simplest way that
137:42 - i'm showing you because you just
137:43 - download this one file and then you pop
137:45 - it into opencv and it's all nice and
137:47 - free and easy to use
137:48 - but yeah if you do want to get deep in
137:51 - you don't do like legit ai this is just
137:53 - this is like baby stuff compared to real
137:55 - stuff like even me i haven't done too
137:57 - much i haven't worked at tesla on
137:58 - self-driving cars unfortunately i wish i
138:00 - have
138:00 - but um you can get some you can get go
138:03 - pretty deep so if you want to check that
138:04 - out then by all means go check out
138:05 - opencv the opencv course
138:08 - and uh
138:09 - feel free to just go ham yeah for those
138:12 - of you who are javascript developers you
138:14 - can use something like tensorflow
138:16 - tensorflow is pretty much a very similar
138:18 - thing to what we used here but it's not
138:19 - cv2 it'll be tensorflow and then you can
138:22 - actually go ahead and get models just
138:24 - like the hard cascade and you pretty
138:26 - much plug them into your tensorflow and
138:27 - do the same thing as what we did today
138:29 - so
138:29 - why challenge everyone on this stream
138:32 - right now to go and do is actually go
138:33 - ahead and like follow along this
138:35 - tutorial build your get it working on
138:37 - yourself but go ahead and swap the um
138:40 - the hard cascade one that you're using
138:41 - and try and detect like an i or
138:43 - something like that that'd be kind of
138:44 - cool yeah yeah yeah there's there's
138:46 - literally an i one like if you just
138:48 - google it the opencv documentation or
138:50 - the gitpo github repo there's the i1
138:52 - where you can detect eyes as well
138:54 - um we could even do it really quickly
138:56 - why don't we just do it on the fly
138:57 - really quick as a bonus i'm supposed to
138:58 - be done here but let's uh let's do it i
139:00 - did i'm because i actually have because
139:02 - i have it downloaded already the eye
139:04 - because i was going to do that but i was
139:05 - like ah it's not important for small
139:07 - detection but
139:08 - let's do it really quick okay what time
139:10 - is it it's
139:11 - 41 okay i'm gonna how fast can we do
139:14 - this let's do it
139:16 - all right boom i dot xml
139:18 - uh
139:23 - let's get him in that flow state
139:26 - uh eye detector so we're going to want
139:28 - to get is
139:31 - okay so the face we have the face face
139:34 - grayscale smiles smile detector
139:38 - eyes
139:41 - is going to be
139:43 - um
139:48 - eyes will be eye detector dot detect
139:52 - multi
139:54 - scale
139:56 - face
139:57 - gray scale
139:59 - and uh skill factor i don't i didn't
140:01 - tune the eyes so like it might not work
140:03 - but um
140:06 - yeah we'll just we'll see how it goes so
140:07 - eyes equals that yep then we're going to
140:10 - want to draw the smiles and then also
140:13 - we're going to want to draw the eyes
140:16 - and
140:19 - eyes yeah and why don't we just go
140:21 - double this is very sloppy but i mean i
140:23 - just
140:27 - well actually i can just use this
140:29 - because the for loops aren't overlapping
140:30 - so let's just leave it like this yeah
140:32 - and then
140:34 - um the i
140:36 - okay and let's just change this to
140:40 - 255
140:42 - 25 and 255
140:46 - in
140:46 - eyes grayscale
140:49 - so this should work
140:51 - nice
140:53 - i mean it should let's see if it works
140:55 - guys if it works
140:57 - destroy that thumbs up button because
140:58 - aaron just done that on the fly like oh
141:01 - the eye is not defined i have a typo
141:03 - somewhere oh i was going to say that
141:05 - yeah because you have the eye but we
141:06 - need to splice it um slice it sorry
141:08 - right
141:11 - oh oh um no i mean the face
141:14 - okay that's what it takes
141:22 - oh snap dude
141:27 - eyes look kind of similar sometimes you
141:28 - know
141:30 - you can kind of see
141:31 - yeah let's try to tune it we gotta tune
141:32 - it a little bit let's tune the variables
141:34 - a little bit and see if we can get it
141:35 - working better
141:37 - so
141:38 - that's what that's where these two
141:39 - things come in handy scale factor and
141:41 - mid neighbors so i'm there's probably
141:42 - some ideal number let's just try like i
141:44 - don't know 1.3 and
141:47 - 10 and see what happens okay
141:50 - like some iron man video
141:54 - okay
141:55 - okay not quite not quite let's try 1.1
141:59 - and 10.
142:04 - oh again that dude
142:09 - so what what what was the phone i just
142:10 - need to i just because i'm asian
142:13 - but if i open my eyes big
142:16 - it works it's not creepy as hell but
142:20 - like big eyes big smile then it can get
142:22 - it it can get it nicely that is awesome
142:27 - the greatest ever let's get this to 1k
142:29 - likes everyone i think we do
142:32 - yeah this this kind of stuff this kind
142:34 - of stuff is what snapchat and instagram
142:35 - use on their filters you know like when
142:36 - you like vomit the rainbow and stuff
142:38 - they're like ah and then when they see
142:40 - it they can locate it and have it like
142:42 - drip down stuff like that so this is
142:44 - actually what's going on behind the
142:45 - scenes when using a snapchat filter like
142:46 - the selfie camera and you have like the
142:48 - crazy filters over your face this is
142:50 - what it's doing behind the scenes it
142:52 - might be using convolutional neural
142:54 - networks instead of hard cascades but
142:56 - this is similar principles yeah they
142:58 - would have a model that's already
143:00 - sitting there that's already ready and
143:01 - it's just the input would be the camera
143:02 - that you're seeing output being that
143:04 - little tongue
143:05 - emoji or like the dog thing whatever
143:06 - you're using yeah
143:08 - nice
143:11 - yep that's it
143:14 - and about what that took four minutes to
143:16 - get the eye up and running so it's the
143:18 - power of python and having pre-trained
143:20 - of course if you train yourself it's
143:21 - going to take hours or days or weeks if
143:24 - you have to get your own data it depends
143:25 - where you did if you're taking your own
143:26 - photos with your own phone
143:30 - you gotta it's gonna take forever
143:32 - or you can just what people have done
143:34 - you got some you got some good comments
143:35 - coming in and says aaron you are awesome
143:38 - aaron
143:40 - apparently not at numpy
143:43 - whoever in the comments i don't know who
143:44 - you were but dave's man you saved you
143:45 - saved my ass man or man or woman whoever
143:48 - that was
143:48 - much appreciated i could stop
143:50 - embarrassing myself
143:51 - the greatest ever says that's amazing
143:53 - information i'm gonna squeeze that in
143:55 - when i'm being interviewed that's that's
143:57 - awesome dude that would impress them
143:58 - yeah we'll impress them this is the real
144:00 - smile look
144:01 - look at that
144:05 - it's so funny
144:08 - that's nice we could we could even be
144:10 - like we could even like have a diamond
144:12 - changing like smiling and wide-eyed
144:14 - like or unasianified or something you
144:16 - know it could be like smiling and have
144:17 - like another piece of text like
144:18 - unasianified underneath let's do that
144:20 - dude you know what you could do i reckon
144:22 - there's probably some kind of model
144:25 - there which tells you the ethnicity of
144:26 - someone and then you have the
144:28 - sensitivities based on ethnicity
144:31 - oh that would be it'll be hilarious but
144:33 - let's just here let's just look at this
144:35 - code if length of
144:36 - eyes i mean is that racial profiling is
144:39 - that like racist no i mean
144:42 - i mean we've got one we've got one asian
144:44 - we've got one
144:46 - brown
144:48 - asian applied let's just do
144:50 - so literally the greatest never just
144:51 - said unagi unified
144:56 - there we go here let's try this right
144:58 - aaron you're a good teacher i like it
145:00 - nice
145:02 - oh wait uh i think we need to tune this
145:05 - a little bit better to eyes needs to be
145:07 - maybe
145:08 - 20. let's try this and this is way too
145:11 - much let's try
145:13 - 90
145:14 - and quit this out
145:16 - here
145:24 - [Laughter]
145:29 - i love that
145:38 - that's i think that tune a little bit
145:40 - more let's try uh let's try 30.
145:43 - bro i'm still there i'm supposed to go
145:44 - work out with my friend but that's what
145:46 - i supposed to leave 20 minutes ago but
145:48 - this the numpy thing you know i really
145:49 - put a cog but
145:51 - whatever
145:54 - oh man
145:55 - oh wow
145:56 - tyler shaw says that's the most amazing
145:58 - live video of programming ever we love
146:01 - that dude that's insane that's furious
146:03 - with my eyes bro
146:07 - and look at the light on my face better
146:15 - so funny i'm having so much fun with
146:17 - this man i wish i could uh
146:19 - send it to you but yeah i do got to get
146:21 - going no oh dude you've crushed that and
146:24 - you we didn't even plan on getting the
146:25 - eyes done so we got the eyes in there i
146:27 - mean yeah that's the power of
146:28 - pre-trained models they also have like
146:30 - dog and cat let me just pull up the open
146:31 - cv real quick where did my chrome go oh
146:34 - it's in full screen
146:35 - so if you just go to opencv
146:38 - um har github
146:41 - then you go here hard cascades they have
146:43 - all these pre-trained opencv is like
146:45 - open source so it's free and low weight
146:48 - uh the algorithms and stuff they use at
146:49 - facebook and snapchat like in instagram
146:51 - for real like they're trained even
146:53 - better than these are that's why they're
146:54 - so much more accurate these are just
146:55 - kind of like halfway there but they're
146:57 - also like pretty old but here here's the
146:59 - i
147:00 - um i tree eyeglasses i don't even know
147:02 - what this is
147:04 - uh this is the frontal face default
147:05 - we're using for frontal face there's
147:07 - other frontal faces see how much is
147:09 - frontal cat face
147:11 - uh full body this is what used for the
147:12 - pedestrian tracking
147:14 - um
147:15 - for cars i had to download a har xml
147:17 - file from somebody else it wasn't
147:18 - provided by opencv but you can go you
147:20 - can find other trained models too like
147:22 - is once an xml file is created from any
147:24 - object section then you can just
147:26 - download and use it for yourself so like
147:28 - here
147:29 - uh
147:29 - like this is literally what i typed in
147:34 - there har car has hard cascade xml fire
147:37 - i went here i clicked on it
147:40 - and then i um
147:42 - i literally just downloaded the xml file
147:45 - uh from some it's somewhere linked in
147:47 - here but you can find the xml file once
147:48 - you find it so like literally it could
147:50 - be anything it could be like like what
147:51 - else what else besides car is cool to
147:53 - identify
147:54 - um um
147:57 - our cascade file
148:00 - uh i mean that one might not exist but
148:02 - i mean
148:04 - here soccer ball cascade so use yeah
148:07 - there soccer ball cascade.xml
148:10 - and then so this could probably detect
148:11 - soccer balls in a video without a video
148:14 - or something like that so like it's
148:16 - generic object detection you can you can
148:18 - detect any object um any arbitrary
148:20 - pattern yeah in a in a frame so that's
148:23 - the power of that using using what aaron
148:25 - just showed you that you can easily
148:27 - detect like some balls you know like
148:32 - are your your balls round like a soccer
148:34 - ball or are they
148:36 - are they excited like a rugby or
148:38 - football
148:42 - yeah but here there's hard cascades
148:43 - there's also some here there's hog
148:45 - cascades so hog stands for
148:49 - hog is like another way to do it it's
148:51 - like optimization for horror or some
148:52 - something i forget what it stands for
148:54 - but it's another augmentation algorithm
148:56 - thing that you can use
148:58 - um but here we have all these
149:00 - and then there's cats and uh
149:03 - or if you go into hog what is in here
149:06 - pedestrians okay
149:08 - but
149:09 - yeah guys that's that's it smile
149:11 - detection and asian detection asian
149:13 - asian person detection in um in python
149:16 - awesome guys if you guys enjoyed that
149:18 - let's give aaron a massive thank you
149:20 - because i think he crushed it today with
149:22 - that and even i learned so much with
149:24 - this uh tutorial today so like i thought
149:27 - it was cool thank you aaron that was
149:28 - amazing dude
149:29 - welcome sunny thanks for streaming for
149:30 - me because my computer is a computer is
149:32 - a rock
149:34 - sorab singh says aaron and sunny looking
149:35 - for some more in the future cheers yeah
149:38 - we will definitely be doing more that
149:39 - was fun definitely yeah i am planning on
149:41 - doing some tensorflow because i've kind
149:42 - of exhausted this opencv stuff we got
149:44 - three streams on it but i do want to get
149:46 - into tensorflow maybe even pi torch yeah
149:48 - um like you mentioned so maybe in the
149:50 - next few weeks stay tuned for that i
149:52 - might have like a tensorflow like crash
149:53 - course stream or something like that
149:54 - yeah they will actually train a model
149:56 - ourself with uh with somebody else's
149:58 - picture data i'm not gonna do it myself
150:00 - yeah but i'll find some online data set
150:02 - of a bunch of images and we can maybe
150:04 - train something and you can watch the
150:06 - neural net get created and then we could
150:07 - do something like this again that would
150:09 - be dope dude that would be awesome yeah
150:11 - i think um also worth mentioning guys
150:13 - for anyone who joined and maybe missed
150:15 - this in the beginning
150:16 - um aaron what what's in what's what's
150:19 - lingering in the description right now
150:22 - uh yeah so yeah yeah if you guys like
150:24 - coding in python if you enjoyed this and
150:26 - want to do this for a living then that's
150:27 - what we do a clever programmer so we
150:28 - teach people how to take their coding
150:30 - skills and make money from it
150:32 - as uh web developers with javascript as
150:35 - python developers python freelancers
150:37 - whatever it is you want like automating
150:39 - stuff with python or whatever then go
150:42 - check the link in the description
150:43 - there's a free training that teaches you
150:44 - how to do that and then there's also a
150:46 - full-blown course that you can join if
150:48 - you want to
150:49 - invest some money into that in time and
150:50 - actually
150:52 - pursue becoming a python developer as
150:54 - your career choice if not then feel free
150:56 - to enjoy your free content that's what
150:57 - this is here for you know make asian
150:59 - stupid stupid ass apps like this
151:02 - yes
151:05 - [Laughter]
151:07 - my mom would smack me yo respect your
151:09 - culture
151:10 - okay
151:11 - i love you mom you eaten the whole race
151:14 - yes yes
151:15 - you get a plus a minus means death
151:18 - yes
151:19 - yes
151:20 - and then i dropped out of school and she
151:22 - killed me
151:22 - [Laughter]
151:24 - that's that's truly unanimous then
151:28 - ah yeah that's the truth isn't it yeah
151:30 - we're all dropouts here aren't we
151:33 - that's awesome dude i think if there's
151:35 - aaron got any last few things you want
151:37 - to add oh we also got a donation thank
151:39 - you saurabh singh just dropped a nice
151:40 - little donation there appreciate that
151:42 - dude
151:44 - and lots of wicked comments coming in
151:45 - yeah nice i think the last thing with
151:48 - hilarious would be uh actually get rid
151:50 - of the boxes
151:52 - what was that and then um
151:54 - it would be hilarious to get rid of the
151:55 - boxes and just have like the full clean
151:56 - app let's do this last demo because i'm
151:59 - i'm all hyped
152:01 - what's that
152:02 - hey
152:04 - let me go ahead and try it on that
152:06 - there we go
152:16 - i think i think it's okay when you when
152:18 - you're you're the same race it's all
152:20 - good
152:22 - have
152:23 - if i'd uh anyways okay i'm going to stop
152:26 - goofing around because now we're just
152:28 - wasting time all right yeah so if you
152:30 - guys want to check out the the free
152:31 - training or the course then it's in the
152:32 - description um if not then keep watching
152:34 - our daily streams i think we've been
152:36 - going for what like four weeks now
152:37 - straight
152:38 - i think it's longer dude i think we've
152:39 - gone over
152:40 - a month and a half now
152:42 - yeah
152:43 - how have you not run out of like project
152:45 - ideas dude we have so many project ideas
152:48 - now still to come like tomorrow's a big
152:50 - build another massive build coming up so
152:52 - we'll be amazing what's that yeah yeah
152:54 - we have what's up tomorrow stay tuned
152:56 - guys go ahead and literally set a
152:58 - reminder on your phone right now for
153:00 - that and we're doing that
153:02 - was it in i think it's
153:04 - 10 9 15 est and 6 15 bst that's my time
153:10 - yeah uh yeah so awesome guys hope you
153:13 - guys enjoyed that and with that said uh
153:16 - make sure if you're not following us
153:17 - already go ahead and check us out we're
153:18 - always posting some content so you've
153:20 - got me and aaron over there we'd love to
153:21 - have a chat with you guys but yeah i
153:23 - think i think aaron needs to go and hit
153:25 - uh hit a workout
153:27 - yeah eat some food more coffee
153:30 - totally sleep deprived
153:31 - but yeah guys thanks for joining me in
153:33 - sunny and coating this up there's a lot
153:35 - of fun and uh we'll do it again
153:36 - featuring some time right hulk that's it
153:38 - dude we'll do it again samurai
153:41 - yeah yeah
153:43 - yeah
153:45 - what
153:46 - time alright guys peace out peace out
153:49 - guys thank you bye