00:00 - welcome to another web 3 slash
00:02 - blockchain project that we're going to
00:04 - be building using infuria this project
00:07 - is going to be a lottery dab now there
00:10 - are gaming companies out there like
00:12 - crypto games using something similar the
00:15 - point of this is you have multiple users
00:17 - enter each of who pays in ethereum a
00:20 - certain amount in the pot and at the end
00:23 - you pick a winner and you randomly
00:25 - select the winner and that Winner Takes
00:27 - the entire pot but we're just gonna have
00:29 - fun with it and learn web 3 by building
00:31 - this lottery app now let's go ahead and
00:34 - kind of demo what the app looks like so
00:36 - here's the app I'm going to I currently
00:38 - have no players inside here right you
00:40 - can see that I have zero players at the
00:43 - bottom so I'm going to go ahead and with
00:45 - one of my accounts I'm going to enter
00:47 - this
00:48 - okay and then we're gonna add in uh one
00:51 - person okay and so I'm going to log in
00:54 - here cool and now we have one person and
00:58 - I'm gonna enter with that account cool
01:01 - so let's go ahead and do that I'm gonna
01:02 - enter boom I'm in and now let's go ahead
01:06 - we're gonna speed up through this
01:07 - process so we can go faster I'll just
01:09 - pay higher gas fee now I have entered as
01:13 - a user and you can see at the bottom
01:14 - that I'm inside now I'm going to enter
01:17 - with a second account so let's go ahead
01:19 - repeat the same exact process and we'll
01:21 - enter it all right now we're gonna enter
01:23 - a second user so I'm gonna go ahead to
01:26 - my metamask I'm gonna speed up and do
01:28 - the same thing and Boom at the bottom
01:29 - you can see that the second user has
01:32 - been added to this Lottery and each of
01:34 - them added Point fifteen point zero one
01:37 - five eighth to the lottery and at the
01:40 - end of this what you'll notice is we
01:42 - have a winner and that winner which is
01:45 - this account right over here he won all
01:48 - of that is okay so that's how this will
01:52 - work next up what we need to do is we
01:55 - need to sign up for infuria and the
01:57 - reason why we need to do that is so we
01:58 - can actually build this app it's going
02:00 - to be completely free and it's going to
02:02 - allow you to build your web3 app and
02:04 - scale it as much as you want so I want
02:07 - you to go to the URL in the description
02:10 - below okay we've given it to you you'll
02:13 - get to this landing page of inferior and
02:15 - then just hit sign up at the top once
02:18 - you do that just make sure you create an
02:20 - account under get started for free pop
02:22 - in your email and your password and once
02:25 - you're done doing that it's going to ask
02:26 - you to verify it then just simply go
02:28 - ahead verify your account and then it'll
02:30 - take you to this next page okay Pick
02:32 - Your Role Etc which organization you can
02:35 - pretty much pick whatever you want hit
02:36 - submit for the network we're going to
02:39 - choose the web3 API formerly ethereum
02:41 - and for name we're going to say
02:43 - production and then just hit submit okay
02:45 - once you're done with that it's going to
02:47 - bring you to this page at this this
02:48 - point this is where you are you can take
02:51 - a look around but your job here is done
02:53 - you don't really need to do anything
02:54 - else with that said we're going to
02:57 - continue and next up work on installing
03:00 - metamask now we're going to go ahead and
03:02 - install metamask if you already know how
03:03 - to install and use it just skip this
03:05 - part timestamps for below I'm going to
03:07 - keep going so go to metamask on Google
03:10 - find it as a Chrome extension hit add to
03:13 - Chrome and what you want to do after you
03:15 - add it to Chrome is just hit agree with
03:18 - everything so it takes you to the next
03:20 - part and this is the important thing
03:22 - that I need you to do once you are on
03:24 - this page where it says new to metamask
03:26 - do not pick no I already have a secret
03:28 - recovery phrase choose yes let's get set
03:32 - up create a wallet there and then pop in
03:34 - your password and the important thing
03:36 - we're going to really need is this
03:37 - mnemonic phrase that it gives you AKA or
03:40 - secret recovery phrase this is the
03:43 - important part because in this app in
03:46 - this app that you're going to be
03:47 - building you're are going to need access
03:49 - to this so make sure if you already have
03:51 - an existing account make sure you have
03:53 - the secret recovery phrase if you don't
03:54 - have a secret recovery phrase or you
03:56 - forgot it just make a new account right
03:58 - now
03:59 - okay and then follow along that way it's
04:01 - going to ask you to confirm your secret
04:03 - security phrase and then it's going to
04:05 - ask you to safely store it somewhere
04:07 - then in your account you're going to
04:09 - notice that you don't have any other
04:10 - accounts like any other networks you
04:13 - only have the ethereum mainnet so what
04:15 - you want to do in that case is you want
04:17 - to go to you want to click where it says
04:19 - show slash High test networks and go to
04:22 - your advanced settings and in there you
04:25 - want to say show test Network so make
04:28 - sure that's turned on and make sure the
04:30 - show conversion on test networks is also
04:32 - turned on and now when you hit X and you
04:35 - hit your networks you can see that all
04:37 - these other test networks are there like
04:39 - Robson and Gorly Etc alright so type in
04:43 - robsten faucet because what we want to
04:45 - do is we want to get some free robsten
04:47 - which is essentially ether okay and
04:50 - that's how you're going to be able to
04:52 - play with this app and do stuff with
04:54 - this app so go to disrupts and test that
04:55 - faucet go ahead to your metamask and you
04:59 - can pin it just like I did here right
05:01 - click and copy the account address and
05:04 - paste this account address and say give
05:06 - me robsten eth it's going to give you
05:08 - the Robson eth you could see that we got
05:10 - 10 Robson eighth right here now I do
05:13 - want to highlight something here you
05:15 - will see Robson will shut down in Q4
05:17 - okay so it's going to be shutting down
05:20 - soon but what we're showing you here is
05:22 - just as easy to do with the gwirly test
05:25 - Network as you can do with robston so
05:28 - you could follow along and you could
05:29 - just do it with quarterly okay
05:32 - so yeah so if you're watching this after
05:35 - 2022 just do that you should be fine
05:37 - with that said we're going to keep going
05:39 - and now we get to the coding part now
05:41 - open up your command line and we're just
05:44 - gonna go ahead and get your entire
05:46 - project set up some key notes that I
05:48 - want to show you is I want you to go
05:50 - ahead and do into your GitHub folder or
05:53 - wherever you store all of your stuff and
05:57 - then I want you to use npx clever
05:59 - programmer now before I continue the
06:01 - benefit of doing this way is we are
06:04 - giving you all of the assets for you
06:07 - know just giving it away for you okay so
06:10 - you're gonna have access to all of the
06:11 - assets you will have access to the
06:15 - styling of this app you will have access
06:18 - to the components inside of this app and
06:21 - you know majority of front end you'll
06:24 - get access to okay which you won't get
06:27 - access to are things like blockchain and
06:29 - smart contract because in this project I
06:31 - don't want to focus so much on the front
06:33 - end part otherwise this tutorial would
06:35 - be 9 hours 10 hours long we want to
06:37 - focus more on the interesting aspects of
06:39 - this project which are it's the smart
06:41 - contract the blockchain parts so that's
06:43 - what we're going to be focusing on more
06:44 - and we're giving away a lot of this and
06:46 - if you do npx clever programmer you'll
06:49 - automatically get access to all of these
06:51 - things for this project for this Lottery
06:54 - dap okay so we're making your life a lot
06:57 - easier so do npx clever programmer at
06:59 - latest
07:00 - and then it will install it globally and
07:04 - then just go ahead pop in your email and
07:07 - what you want to do
07:09 - after you put in your email is It'll ask
07:11 - you for your name and then simply go
07:13 - ahead and choose the project so here I
07:16 - want you to go ahead and choose the
07:17 - lottery app
07:19 - go to that okay select it and then
07:22 - you're just going to hit enter now it's
07:24 - going to initialize your project it's
07:26 - going to give you the front end right
07:27 - it's going to install all of the
07:29 - dependencies
07:30 - and it's also going to tell you to smash
07:33 - that like button while you wait so go
07:34 - ahead do that right now while it's
07:36 - loading it also automatically there's a
07:39 - fancy thing that we've added to it it
07:40 - automatically opens up your Visual
07:42 - Studio code if it gives you an error
07:44 - there or doesn't work for you somehow
07:46 - just go there and open up this folder
07:49 - inside of your Visual Studio code and
07:51 - there you go there's your project your
07:53 - lottery app
07:54 - there you go okay this is your starter
07:56 - now all I want you to do is go ahead and
07:58 - do yarn Dev
08:01 - and it should open it up
08:03 - on your right hand side or just open it
08:06 - up in Chrome on your Local Host 3000
08:09 - okay and uh just get to the part where
08:11 - your app is up and running okay
08:14 - so there you go that is the starter okay
08:17 - if it doesn't error out it's telling you
08:19 - that hey this is working all the styling
08:21 - is here and everything is here and this
08:24 - blank page here with this color that's a
08:28 - good sign that means your starter is
08:30 - completely working so good job and with
08:33 - that said we're gonna go ahead and
08:36 - continue building all right now what I
08:37 - want to show you is that at any given
08:39 - time I don't want you to get stuck all
08:43 - right I do not want you to get stuck so
08:45 - what we have done for you is this thing
08:48 - that you got from npx clever programmer
08:50 - if you're a more advanced user you are
08:52 - sitting on a branch right now called CLI
08:55 - starter and there's a branch of this
08:57 - project that's called I believe main
09:00 - right the main one the main branch
09:02 - actually has the solution so at any
09:05 - given point you could switch to that
09:07 - branch and get the solution okay this is
09:09 - the branch you're currently on by
09:11 - default because all you did from the CLI
09:13 - tool was clone this repo on your
09:16 - computer okay so let's just walk through
09:18 - it and you could also go to this
09:19 - repository from the link in the
09:21 - description below so it has a solution
09:23 - on there so you could do it that way too
09:24 - just click uh use one of the links in
09:26 - the description below and you can see
09:28 - that we have all of the code right there
09:31 - right I could click into context and I
09:33 - can click context.js and it will give
09:34 - you the entire solution for this project
09:38 - okay so there you go
09:40 - uh this is just a thing that's made
09:42 - available to you to get answers to get
09:45 - unstuck at any given point just wanted
09:47 - to highlight that with that said now
09:49 - we're going to start building these
09:51 - smart contract
09:53 - um and this is going to be a really fun
09:55 - process because we're going to do it
09:56 - step by step so let's go all right now
09:58 - what we're going to do guys is we're
10:00 - gonna go ahead to
10:02 - remix IDE
10:06 - a remix IDE which is a phenomenal online
10:10 - ID if and it's completely free for
10:14 - writing smart contracts and iterating
10:16 - and getting live instant feedback for
10:19 - everything that you're doing so go ahead
10:21 - there okay and start coding online click
10:24 - that
10:25 - and it'll bring you to their page just
10:27 - hit accept cool hit next blah blah blah
10:30 - and then you should be good to go
10:33 - okay uh here you're going to choose a
10:37 - workspace name
10:39 - all right you could call it Lottery
10:41 - we'll call it Lottery dap and then on
10:44 - the left hand side you will see that it
10:46 - populated it with some dummy contracts
10:50 - and stuff like that just to kind of get
10:51 - you started okay so close the scripts
10:54 - tab close the test tab go into contracts
10:57 - and inside of contracts we're going to
11:00 - make a contract
11:02 - and it's going to be called lottery.sol
11:05 - okay so lottery.solidity contract
11:08 - great
11:09 - now that we're doing this let's go ahead
11:13 - on the left hand side and I'm going to
11:15 - click on that third Tab and we're going
11:18 - to choose Auto compile and for the
11:21 - version we're going to choose
11:23 - 0.8.15 plus that's the version
11:27 - let's go back to our
11:29 - lottery.soul
11:33 - and here first of all the first thing we
11:35 - do always is pick the license so we're
11:37 - just going to choose the MIT license for
11:39 - this one
11:40 - we're gonna pick our solidity version at
11:43 - 0.8.15
11:47 - we're going to create a contract called
11:49 - Lottery
11:54 - and in this contract okay the first
11:56 - things that we're going to create are
11:58 - State and some storage variables that
11:59 - are going to be necessary for us so
12:02 - let's create a owner we're going to need
12:04 - to keep track of our owner
12:06 - let's create also a
12:10 - player's array
12:12 - okay
12:13 - that's where all of our players are
12:16 - going to go inside of
12:18 - let's also go ahead and create a
12:20 - Winner's array
12:22 - and then we're going to go ahead and
12:25 - create a lottery ID which we will keep
12:30 - track of okay and now I'm going to go
12:34 - ahead and explain
12:36 - something special for you okay so for
12:38 - example
12:39 - I told you that these are the variables
12:41 - and variable names here right but I
12:43 - didn't explain to you
12:46 - would address public address payable
12:48 - public is so let's go ahead and do that
12:49 - now address as a special data type in
12:53 - solidity which refers to you know
12:55 - anytime you see a wallet address that's
12:57 - like that that's there's a specific data
12:59 - type for that that's not just a string
13:01 - okay in JavaScript you'll store that as
13:03 - a string but in solidity you store that
13:04 - as an actual data type
13:07 - public here means everybody will have
13:09 - access to these variables meaning that
13:12 - even outside of the smart contract you
13:14 - could access them okay so that's why
13:16 - it's Public Public public
13:19 - so you could make it private as well
13:22 - which would mean that we can't access it
13:23 - from outside but in this case we don't
13:25 - need to do that okay so that's the word
13:26 - public okay so hopefully that handles
13:29 - that situation now
13:31 - what is this uh thing called payable
13:34 - payable means that
13:36 - these contract addresses are put in a
13:39 - way where we can pay them or we can send
13:41 - money to them all right now payable
13:45 - means these are the guys that are uh you
13:48 - know where we can actually send them
13:50 - money okay so that's why this address
13:53 - type is a payable type because any of
13:56 - these players we want to be able able to
13:58 - send them money based on if they won the
14:00 - lottery or not okay that's what's
14:01 - happening there this empty open close uh
14:05 - array that you see over here that
14:08 - basically says that this data type is
14:11 - going to be an array of addresses
14:14 - meaning that they're going to be
14:16 - multiple addresses in here so players
14:19 - variable isn't just going to be like one
14:22 - random zero x dot dot dot address
14:25 - it means it's going to be an array of
14:27 - addresses so it's going to look more
14:29 - like this comma 0x dot dot dot comma
14:33 - 0x0x after you get the idea right with
14:36 - multiple addresses there
14:38 - okay so that's what's happening inside
14:42 - of this array it's going to be an array
14:44 - of addresses
14:45 - then we have array of winners the reason
14:48 - why we're not making this public or
14:50 - sorry uh not making this payable is
14:53 - because they've already won so we don't
14:57 - want to be able to pay them
14:58 - programmatically or at all because
15:00 - they've already gotten the money
15:04 - and then we have Lottery ID which is an
15:07 - integer
15:09 - because it's going to be zero when you
15:12 - know it's the first Lottery then it's
15:14 - going to be one on the second Lottery
15:16 - two on the third Lottery Etc and we'll
15:19 - show you how to do that as well
15:22 - all right let's keep going with this
15:25 - so once I'm done with that
15:29 - we're going to create a Constructor
15:32 - and this Constructor this runs when the
15:36 - contract is deployed
15:38 - okay so let's create a Constructor here
15:43 - we're going to go ahead and say
15:46 - owner is the message sender AKA whoever
15:49 - Crea uh you know created the contract
15:53 - whoever was like logged into their
15:55 - metamask
15:57 - and was the person that created the
15:58 - contract
16:00 - um at the time that the contract was
16:01 - created okay
16:05 - that's gonna be set as the owner so what
16:08 - construction Constructor means that this
16:11 - piece of code is going to run right when
16:16 - this contract is deployed so the very
16:18 - first time this contractor is deployed a
16:20 - contract is deployed it'll run and then
16:22 - this part will never really run ever
16:24 - again it'll only run once when the
16:26 - contract is deployed if you have
16:28 - experience with the react think of it
16:30 - kind of like your kind of like your use
16:36 - um you know your use effect hook where
16:38 - it fires off once the page loads and
16:41 - then if you don't have any dependencies
16:42 - it doesn't fire off again right kind of
16:45 - like that except it just runs once
16:47 - forever even if you refresh the page
16:51 - and we're gonna set the lottery ID to
16:53 - zero because that's what we want to
16:55 - initialize it to be
16:58 - next up we're going to create the enter
17:00 - function so this will be the function
17:02 - that allows a user to really enter the
17:06 - lottery
17:08 - so let's go ahead say function enter
17:11 - and I'm going to set the public function
17:15 - okay
17:17 - and I'll explain why we're saying
17:19 - payable afterwards
17:21 - this function we want to make sure that
17:24 - we require the message value is you need
17:28 - to put in basically what we're seeing
17:29 - here is hey you need to put in more than
17:32 - 0.5
17:34 - uh one eth okay so if you're gonna if
17:39 - you're gonna put some money in the pool
17:41 - make sure it's more than 0.1 ether
17:45 - because you can't just put like baby
17:47 - money in that right where we're here to
17:49 - play the big boys are here the big boys
17:51 - and the big girls are here
17:53 - I don't want to get canceled like Andrew
17:54 - Tate
17:57 - um so here then once we do that we want
18:01 - to do players.push
18:03 - and we want to push the address of
18:06 - whoever was like the logged in user in
18:07 - metamask whenever you see message.sender
18:09 - think the current logged in user with
18:12 - metamask okay that's the easy way I
18:14 - think about it and so I'm pushing
18:16 - whoever was currently logged in and
18:18 - entered the lottery
18:19 - boom add them to the players array
18:23 - that's what we're doing all right so now
18:25 - what's special about this function and
18:27 - why we're calling payable right here is
18:30 - because
18:31 - this function
18:33 - by doing payable here means you can
18:35 - actually kind of quote unquote pay this
18:37 - function okay when you call this
18:40 - function you could enter and you could
18:43 - literally pass it like to eth so think
18:46 - of it like that you're almost calling
18:47 - the function you can pass it a certain
18:49 - amount of eth and that ether you pass
18:52 - this function it will actually store
18:56 - that
18:57 - inside of the contract address okay so
19:02 - the contract address so think of the
19:04 - contract address like just another
19:05 - wallet just like kind of how you have a
19:07 - wallet contract address kind of has a
19:10 - built-in wallet and so the money is
19:12 - going into the contract pool okay so
19:14 - that's how the money is going uh into
19:17 - the pool
19:19 - and then we just make sure that the
19:23 - message value
19:25 - right is greater than 0.1 ether and then
19:28 - if it is we go great we add that to our
19:33 - players array that we created up at the
19:35 - top
19:35 - and we want to make sure it's payable so
19:38 - that whoever entered the player's array
19:40 - is a payable address
19:43 - okay so that way we can pay them out
19:45 - later
19:47 - one thing to note here is if you didn't
19:49 - have the word payable here you wouldn't
19:51 - be able to require message.value okay
19:55 - all right
19:56 - so that is that is the you know the
20:00 - heart of that enter function now let's
20:02 - go ahead and test it out
20:04 - so by the way here's a really cool thing
20:08 - about remix right look at that it just
20:10 - gives us so many accounts
20:13 - and all of them have a hundred ether in
20:15 - it so you don't have to go to a faucet
20:18 - get ether in your wallet do all this
20:21 - garbage you just have it here right away
20:25 - ready to go so that makes our lives very
20:28 - easy
20:29 - okay let's go ahead and I'm gonna take
20:33 - this account the 0x5 B3 account and with
20:37 - that account I'm going to go ahead and
20:39 - deploy this smart contract so let's go
20:42 - ahead and hit deploy now you'll notice
20:44 - that when it deployed it took some
20:47 - amount of ether out of my account to be
20:51 - able to deploy
20:53 - okay now the smart contract is deployed
20:57 - now we have this function enter and
20:59 - we'll try to run this function enter
21:04 - I just tried to run it do you notice
21:06 - what just happened right when I try to
21:08 - run it I got into this error over here
21:13 - and this error basically saying hey
21:16 - you don't have more than 0.1 ether
21:20 - okay so we need to actually send it some
21:22 - money before we can run it
21:26 - so we got this error and we're not very
21:30 - happy right because you don't like when
21:31 - you get errors but this happened because
21:33 - we're not giving it more than 0.1 ether
21:37 - equal to or more than so what I'm going
21:39 - to do here is I'm going to go grab value
21:41 - and sometimes this is a little buggy in
21:43 - remix IDE so just command a like select
21:47 - it and then hit delete backspace and
21:50 - then you can like hit one or something
21:52 - or hit the arrow at the top and then
21:54 - it'll actually increment the value so
21:55 - sometimes this bugs out
21:57 - make sure you get the one there and then
21:59 - change it to Ether once you're done
22:01 - doing that
22:03 - and now go down and hit enter and let's
22:05 - see what happens and boom look at that
22:08 - we were entered into the lottery so let
22:10 - me ask you a question
22:12 - if I pooled one eighth and I entered
22:16 - into the lottery What's the total
22:17 - Lottery pool right now I'll give you
22:20 - five seconds to try to answer this five
22:21 - four three two one
22:26 - I really hope you said one okay I really
22:29 - hope you did
22:30 - because it's one person and one person
22:32 - entered with one eth so we have one
22:35 - total pool
22:36 - okay great I'll ask you this question
22:38 - again when another person and and enters
22:40 - so keep your answer ready
22:43 - I'm gonna go ahead and choose a
22:45 - different account so I'm gonna choose
22:46 - the zero x a B8 account with a hundred
22:51 - ether because I'm a big boy
22:54 - we're gonna scroll down and I'm gonna
22:55 - hit enter and let's see what happens I
22:58 - got an error because I didn't add any
23:00 - value I didn't pull any money
23:03 - so let's go ahead and pull it I'm gonna
23:05 - go one and then let's click enter there
23:08 - we go we just entered it with one eth
23:14 - okay so now the total amount of the pool
23:18 - is two eth
23:22 - okay
23:24 - now let's go ahead and grab all the
23:26 - players that are currently entered so we
23:28 - can see their wallet addresses
23:31 - all right so forget players I'm going to
23:34 - write this function it's going to be
23:36 - called surprise surprise get players and
23:39 - it's going to be just a public view
23:40 - meaning it doesn't really do anything it
23:43 - just shows stuff
23:45 - what we're going to be returning here is
23:48 - a array of payable addresses
23:51 - and just write memory because otherwise
23:53 - you're going to get an error
23:56 - and at the bottom I want to say return
23:59 - players okay so we're going to return
24:02 - players that's all it does
24:06 - those are the players that we're going
24:07 - to be returning that we initialized and
24:09 - you know at the top
24:11 - okay great
24:13 - so now that this function is made let's
24:15 - go ahead and kind of re-enter so we're
24:19 - going to delete the smart contract that
24:21 - we previously had because we're going to
24:23 - need to redeploy this new smart contract
24:26 - because we just made changes to it
24:30 - so I'm going to choose my 0x5b wallet to
24:35 - deploy it with
24:37 - we just deployed the smart contract it
24:39 - it is deployed let's click it so it
24:41 - expands and here I have my get players
24:44 - function as you can see
24:48 - I have an array of addresses that is
24:51 - currently empty and it's a zero because
24:53 - there are no players in the pool right
24:55 - now right
24:56 - now I'm going to go ahead and enter with
25:00 - one eth with my you know the owner the
25:03 - owner is going to come in and enter it's
25:05 - like the dude who owned the basketball
25:07 - team right jumps down and starts playing
25:10 - with Steph Curry you know and uh they're
25:14 - team members so that's what's Happening
25:15 - Here the guy who created the lottery is
25:17 - playing the lottery
25:19 - a little conflict of interest there but
25:21 - it's fine now I'm going to choose a
25:22 - second address
25:24 - and hit
25:26 - enter okay with the one eth now we got
25:29 - two players
25:31 - okay let's see who
25:33 - um and yeah when I hit players right
25:35 - boom we could see the two players are
25:37 - showing up so this function get players
25:40 - is working perfectly
25:43 - that is amazing now we're going to write
25:45 - a new function called get balance and it
25:49 - will get the balance of the pool aka the
25:51 - balance of the contract address so if it
25:54 - has to eat it needs to show to eth
25:59 - so what we're going to say is return
26:00 - address this dot balance why am I
26:03 - writing the keyword this this refers to
26:05 - this specific contract address
26:09 - the contract it refers to this contract
26:13 - the one you're writing okay so it'll
26:15 - return the balance that this contract
26:17 - has that's how we get it
26:19 - now let's delete our contract let's go
26:22 - back to our Xerox 5B account which won't
26:24 - be called Xerox 5B on yours because
26:26 - it'll probably be something different
26:27 - right we all get different addresses
26:29 - with different you know with 100 eth in
26:30 - it
26:32 - um let's go and hit deploy again
26:36 - so you can see you have a bunch of
26:38 - deploy you have your deployed contract
26:39 - and now you can see to get balance which
26:42 - I saw nicely hovered over for you
26:45 - then we are going to let's see then
26:49 - we're going to put in one eth into the
26:51 - pool
26:52 - let's hit enter so I joined with one
26:54 - eighth so the owner jumped in again with
26:57 - one eth and let's go and see
27:01 - what happens when this other guy jumps
27:04 - in with one eighth let's hit enter so
27:06 - now two people have jumped in with one
27:08 - eighth let me ask you a question
27:09 - currently what's the pool size
27:12 - how much eth is in there I'll give you
27:14 - five seconds five four three two one
27:18 - I hope that you said to eat because one
27:21 - plus one is two okay if you didn't get
27:24 - that right you my friend have much
27:27 - bigger problems than learning blockchain
27:29 - okay so I'm I would be really worried if
27:33 - you didn't get that answer right you
27:35 - look yourself in the mirror and oh yeah
27:37 - okay so it's showing that we have two
27:39 - eth but it's showing like two trillion
27:41 - or two billion each and the reason why
27:44 - it's doing that most likely is because
27:45 - it's showing that in way
27:49 - okay
27:51 - yeah so away is like a very small unit
27:54 - right ways like if
27:57 - think of way as you have sense think of
28:00 - eth as dollars you have dollars and then
28:02 - you have cents but something even
28:04 - smaller than ascent
28:06 - because like you know just to expand on
28:09 - this analogy right one dollar is a
28:11 - hundred cents so an eighth might be a
28:13 - hundred way even though one eighth is
28:15 - way bigger than a hundred weights way
28:18 - bigger
28:19 - there you go and now I'm writing a
28:22 - comment for you letting you know that
28:24 - solidity Works in way so it's written
28:27 - out and extremely obvious to you so you
28:30 - just have no chance of missing that
28:32 - piece of information now we're going to
28:35 - get lottery ID
28:37 - and I'm going to create this function
28:40 - it will be called get lottery ID
28:44 - and this will be a very simple function
28:46 - so it's going to be public view returns
28:48 - and we're going to return an integer
28:53 - and we're going to if you see uint it
28:55 - just means an unsigned integer and that
28:57 - means it could be negative or positive
28:59 - but literally whenever I say int just
29:02 - thank you and keep your life easy
29:05 - and then we're going to go ahead and do
29:06 - return Lottery ID so very very simple
29:09 - because we have made this variable up at
29:11 - the top here on line nine and we're
29:13 - simply returning it on line 36.
29:16 - so in order to test this get lottery ID
29:20 - we need to delete our current smart
29:23 - contract
29:24 - we need to go back
29:26 - and then we're going to deploy our smart
29:28 - contract
29:30 - so let's hit deploy it's been deployed
29:31 - successfully you can see at the bottom
29:33 - it's there and now you can click get
29:35 - lottery ID and it shows you that the
29:37 - current lottery ID is zero which makes
29:39 - sense because in the Constructor we
29:42 - defined it to be zero right boom there
29:46 - we go hand in the brain
29:50 - we defined it to be zero
29:53 - okay
29:55 - perfect now we'll make a new function
29:57 - and this will allow us to get a random
30:00 - number this is going to be a helper
30:02 - function for picking a winner
30:05 - so I'm going to create this function and
30:08 - we're going to say get random number
30:12 - and it's just going to be a public view
30:14 - it's not going to mutate any data so
30:16 - it's not going to cost us anything okay
30:18 - and it's going to return an integer
30:23 - and it's going to return a random number
30:26 - and what we'll do
30:29 - so I'm going to get so caccac is going
30:32 - 256 is going to help us generate a
30:35 - random number and to be technically
30:37 - accurate it's going to be a pseudo
30:40 - random number which you know if a really
30:43 - professional hacker tried to destroy
30:45 - your app or hack your app that probably
30:47 - could so if you're work building a
30:50 - production you know app and you need
30:52 - this random number to be truly random
30:54 - then you should look into chain link and
30:57 - how you could set this up with them okay
30:59 - I wouldn't try to do this yourself using
31:02 - sudo code okay
31:05 - so we got yeah so we're gonna go ahead
31:08 - and we're gonna take the ABI and we're
31:10 - gonna say in code pact we're going to
31:12 - pass it the owner of the smart contract
31:16 - and then we're going to give it a
31:17 - block.time stamp so we're just going to
31:19 - give it some unique pieces of
31:21 - information like the owner and the time
31:23 - stamp
31:25 - and we're hoping that that information
31:28 - when we give it to it it'll encode it
31:31 - it'll use the algorithm Keck 256 to kind
31:35 - of scramble it and then we'll call
31:37 - integer on it because we'll and at that
31:40 - point we'll assume it'll give us
31:41 - somewhat of a random looking number
31:44 - would would you know fairly weird
31:47 - obfuscated information that we're giving
31:49 - it so that's how we create a random
31:52 - number
31:53 - I wish they just had
31:55 - math.random because this is ridiculous
31:58 - right but we're early so we got to pay
32:01 - the price for being this early
32:04 - um
32:05 - all right let's go ahead and delete our
32:08 - smart contract that we had deployed
32:11 - and now we're gonna pick a winner that's
32:14 - that's what we're going to be doing okay
32:15 - but let's go ahead and test or get
32:18 - random number first so I'm going to
32:19 - deploy our smart contract let's go down
32:21 - and you can see get random number it
32:24 - functions right there let's click it
32:26 - let's see if anything happens
32:28 - whoa something did happen it gave us
32:31 - this massive random number I mean that
32:34 - would have been crazy can you imagine if
32:36 - I asked you to guess that number
32:38 - how screwed you would have been
32:40 - holy but Jesus that is an insane number
32:43 - to guess
32:46 - so for us I mean you know the
32:48 - pseudo-random number is pretty darn good
32:51 - okay Keck hack is doing something useful
32:59 - okay
33:00 - let's go ahead and write this pick
33:02 - winner function and
33:04 - I'm going to call it pick winner
33:07 - it's going to be public
33:10 - we're going to require that the person
33:14 - who can pick the winner
33:16 - is the owner
33:19 - nobody outside of the owner should be
33:21 - allowed to pick the winner
33:23 - and even the owner will get to pick the
33:26 - winner randomly
33:30 - so that's what we're doing require and
33:32 - we want to say hey make sure that the
33:34 - current logged in metamask user AKA
33:36 - message.sender
33:38 - you know or whatever wallet you're using
33:40 - is the owner of the address okay and I
33:44 - believe we assigned the owner when the
33:47 - Constructor happened right when the when
33:49 - we when we deploy the smart contract
33:54 - and then we're going to create a random
33:57 - index using the get random number
34:00 - function we made
34:02 - and then we're going to do module
34:04 - players dot length and here's what's
34:06 - happening here okay let's say you have
34:11 - you know you have uh five players or two
34:14 - players Ryu and you have Ken okay from
34:17 - Street Fighter
34:19 - get random index whenever you run this
34:21 - function it'll either get you zero or
34:24 - one
34:27 - or zero or one okay literally just those
34:30 - out of those two numbers it'll randomly
34:32 - pick between those two now let's say
34:34 - that you had also Zangief
34:37 - now this random number will get you a
34:40 - number between 0 1 and 2 randomly
34:44 - between these Okay so
34:49 - that part of how so remember how get
34:52 - random number was giving you this big
34:54 - giant number well you might be thinking
34:56 - how the heck is going is that going to
34:59 - give us a
35:01 - index number like zero one or two how is
35:04 - it doing that
35:06 - that is the magic of this modulo
35:08 - players.length operator is very nice
35:11 - and modulo allows us it's a remainder
35:16 - okay that's what it technically
35:17 - mathematically speaking module is just a
35:20 - remainder so if you did three divided by
35:21 - two you'd get a remainder of one but
35:23 - another way to think about is this
35:25 - allows you to wrap around whatever you
35:26 - give it so if you give it like two or
35:29 - number three right then effectively
35:32 - you're taking this giant number you're
35:35 - dividing it by three
35:37 - and you'll have some remainder left over
35:40 - there'll be always between zero one or
35:42 - two so that's the trick we're doing here
35:44 - the way I like to think about it
35:47 - is if I give it three it'll always wrap
35:49 - around give me between zero one and two
35:51 - it'll always always do that if I give it
35:54 - a module like module allows me to wrap
35:56 - things around okay
35:58 - whatever mental framework you want to
36:00 - use to understand that that's fine but
36:02 - but at a higher level if we ignore all
36:04 - this nerdy crap just know that random
36:06 - index gives you between 0 1 and 2 or
36:09 - whatever the length of that array
36:11 - players array is so if that player array
36:14 - is a hundred items in there or 100
36:16 - players in there playing the lottery
36:19 - then it will be between 0 to 99
36:22 - and they'll pick a number between
36:25 - um you know that entire range of zero
36:27 - through 99 okay
36:33 - all right
36:37 - and then we're going to
36:39 - grab the Rand a random player
36:43 - and transfer them
36:45 - the funds
36:47 - of this contract so remember address
36:52 - this dot balance
36:55 - okay
36:58 - all right so there we go this allows us
37:01 - to take the funds from our contract
37:04 - address
37:06 - okay so let's say that we have this our
37:08 - big pool right and it has all of the
37:10 - Monies
37:12 - then we have this like array of players
37:16 - right player one player two player three
37:18 - we randomly select let's say this player
37:22 - three
37:23 - right and then because of this here dot
37:26 - transfer
37:28 - we are able to take that player three
37:32 - right and and let's say that they have
37:34 - they're a real person they're very happy
37:37 - then we send them the funds okay that's
37:41 - this is what's happening guys There's
37:43 - real live stuff happening you're
37:45 - changing people's lives writing this
37:47 - code so don't just think of it like
37:48 - random nerdy math numbers somebody will
37:51 - be able to use this one day and get
37:53 - money in the bank account and then you
37:55 - know they can provide for their little
37:57 - tiny children or much smaller than them
38:00 - this is not to scale
38:02 - but yeah because that would be a huge
38:04 - face right if you're a little child I
38:06 - was six years old was smaller than your
38:09 - face
38:09 - that would have been that would be crazy
38:13 - um
38:14 - unless you're Shaquille O'Neal
38:17 - so
38:19 - now we're gonna go and uh grab the
38:23 - winners and push the player
38:26 - that was the winner okay so the the the
38:30 - person that we chose
38:32 - to win we're going to push that winner
38:35 - onto the array so you know and in other
38:38 - words this part over here players random
38:41 - index okay this weird looking code that
38:44 - just really means winner
38:46 - okay and so all we're doing here is
38:49 - we're just pushing that winner
38:51 - okay that's what's happening hopefully
38:52 - that's not too scary or weird or freaky
38:56 - what the heck is this
38:57 - okay whatever
39:00 - I don't know maybe I maybe I'll use it
39:02 - one day for something but for now let's
39:04 - keep going
39:06 - all right now we have Lottery ID and
39:09 - what I want to do is every single time
39:11 - you've picked the winner well at that
39:13 - point essentially the lottery is done
39:15 - the current lottery is done
39:17 - so when the current lottery is done
39:20 - at that so at that point I think we
39:22 - should increment the lottery ID by one
39:24 - because now
39:26 - you know you're technically on the
39:28 - second Lottery because the first Lottery
39:31 - is over people have been paid out got
39:34 - their money and
39:35 - Life's good
39:38 - and last thing we want to do is remember
39:40 - that players array we had like the
39:44 - current active players that were playing
39:46 - the lottery well we need to clear that
39:49 - array so we're going to write this
39:51 - function it's going to allow us to do
39:52 - that so imagine you had this array with
39:54 - player one comma player two but this
39:56 - function is not going to allow you to do
39:59 - is really just turn it into an empty
40:00 - array that's all
40:02 - okay and not function but we're just
40:05 - going to take our variable players that
40:08 - we had initially written and we're going
40:10 - to just reassign it and give it a new
40:12 - definition and we're just going to say
40:14 - hey become an empty array I wish
40:16 - solidity could just make it easy for you
40:18 - okay what we're really writing here
40:20 - before I write it and and freaks you out
40:22 - here's what we're really writing players
40:24 - equals MTR rate that is it okay in
40:28 - JavaScript that is what you would do and
40:29 - you would move on
40:31 - in solidity they want you to just go
40:34 - through a lot of pain and uh be super
40:37 - verbose with what you're doing but I
40:39 - understand why to make your code less
40:41 - error prone you know add and type safety
40:45 - increases the speed I understand but
40:48 - it's still kind of annoying from a
40:49 - developer experience perspective so
40:51 - that's all you're doing here you're just
40:53 - saying hey
40:54 - players should be a new thing and it
40:58 - should be a array of address payables
41:00 - and currently it's at size zero meaning
41:03 - it's just currently empty we're making
41:05 - it empty okay
41:07 - great
41:08 - okay
41:10 - now let's go ahead and play with this
41:13 - new function that we made so let's
41:14 - deploy the smart contract let's go make
41:16 - sure that it's deployed and it's showing
41:18 - us and you can see we have pick winner
41:21 - looking orange looking really nice
41:24 - all right so I just want to kind of take
41:27 - a quick pause here and explain what's
41:29 - what are what what the heck is that
41:32 - I just explain what all of this is right
41:34 - why are these blue so what does blue
41:36 - mean
41:37 - why is that one orange what does that
41:39 - mean okay and and then red so blue means
41:42 - these are our getters
41:44 - these are just your public view
41:46 - functions that don't change any data
41:49 - don't change anything
41:51 - rather they return something okay so
41:54 - these are our getters
41:56 - and then orange
41:58 - are our setters
42:01 - that is where you're changing data and
42:04 - mutating data AKA like we're mutating
42:07 - and we're changing the definition of the
42:09 - word players we're mutating winners
42:11 - because we're adding a player to the
42:15 - Winner's array
42:17 - we're taking laundry idea and we're
42:19 - incrementing it by one so there's a lot
42:22 - of mutation happening
42:24 - and then this red over here
42:28 - it's a legendary weapon
42:30 - orange for to me used to mean a
42:33 - legendary weapon in the game Borderlands
42:35 - so orange is a very special color but
42:37 - that's not what it means here okay and
42:39 - then red here means it's a payable uh
42:41 - it's there's some payment action money
42:44 - stuff is happening okay that's
42:47 - that's as far as I know when I find out
42:50 - new information I'll let you know
42:52 - so the color coding kind of makes it
42:54 - nice you could look at it visually and
42:56 - know kind of what's Happening
42:58 - all right now we're gonna try this okay
43:01 - so let's go ahead and deploy this smart
43:03 - contract uh or sorry we've deployed it
43:06 - but let's enter it with one eth as our
43:10 - you know as an owner
43:12 - and then I'm going to go to another uh
43:15 - pick another wallet
43:18 - and I'm going to put in one eighth here
43:20 - and I'm going to go ahead and enter as
43:23 - well
43:24 - so now I've entered here so the pool
43:26 - size now should be two eth
43:29 - and okay actually let's go and enter
43:31 - with the third person account as well so
43:34 - let's hit enter and now we have three
43:36 - people in the pool so that's pretty good
43:38 - let's do get players and look at that we
43:41 - have three players it's kind of hard to
43:43 - tell but it's three players
43:48 - all right so there we go let's hit get
43:51 - balance and take a look at that right
43:53 - Lottery idea is zero balance is three
43:56 - eighth okay this is in way so obviously
43:59 - it's gonna be like crazy right because
44:00 - this is the sense incense and ether
44:03 - ethereum is dollar
44:04 - this is going to be a way bigger number
44:09 - here is
44:11 - all of the addresses right so these are
44:12 - three addresses so here you see the one
44:15 - comma and then two commas right so that
44:16 - means one address two addresses three
44:18 - addresses so three players are in three
44:21 - is the eighth and we will now be picking
44:25 - the winner
44:27 - so let's go ahead and pick the winner
44:31 - soon
44:32 - okay
44:34 - now notice that I'm on the smart uh
44:37 - notice that I'm on a wallet that is not
44:40 - the owner remember the owner was the
44:43 - first one we used okay the owner was a
44:45 - zero x5b3 one but I'm not on that I'm
44:49 - not on the owner so remember our smart
44:53 - contract says if you're not the owner
44:55 - you should not be able to pick the
44:56 - winner so let's see if we can pick the
44:59 - winner
45:01 - so I'm going to go down and I'm gonna go
45:04 - and try to hit
45:07 - um pick winner
45:08 - and notice right when I clicked pick
45:10 - winner I actually got an error at the
45:13 - bottom
45:16 - this error means that I'm not the owner
45:20 - so it's not allowing me to pick it
45:22 - remember for a pick winner you can see
45:25 - only the owner of contract can pick
45:29 - winner
45:30 - that's what line 47 is saying
45:34 - so I'm going to go up at the top and
45:36 - change my wallet address to the owner of
45:39 - this smart contract that was deployed
45:41 - now let's go down now let's pick winner
45:44 - and boom look at that we see that green
45:48 - tick mark and that means
45:52 - we were able to select the we were able
45:55 - to pick a winner now notice that when I
45:57 - say get players
45:59 - there are no players there's zero
46:01 - players empty and that makes sense
46:03 - because
46:06 - we on line 54 of our code
46:09 - after the lottery winner has been picked
46:12 - we set the players to be an empty array
46:16 - if you get the lottery ID well look now
46:18 - it's a lottery ID one so that's really
46:22 - cool and when I hit get balance balance
46:25 - is zero because there's no more money in
46:27 - the pool
46:29 - all of the winner has been picked and
46:31 - that winner got all of the eighth
46:36 - okay next up we're going to make a
46:38 - function that's going to be called get
46:39 - winners
46:41 - and this way we'll see who won
46:45 - get winners will be you know we'll do a
46:48 - re public view returns here it's going
46:50 - to be an address of winners
46:53 - all right there you go so now we're just
46:55 - gonna return winners so it's going to be
46:57 - an address you know it's going to be in
46:59 - a address of arrays
47:02 - and you could see an array of addresses
47:05 - I'm sorry what the heck and that's what
47:07 - winners is that's what we're returning
47:09 - and so you could see on line 59 we're
47:10 - just returning the winners okay when we
47:12 - created that variable earlier
47:15 - all right and let's go delete that smart
47:18 - contract we need to deploy a new smart
47:20 - contract well because we made changes to
47:22 - it it's a different one than that
47:24 - deployed one
47:26 - let's go and go to Xerox five I mean for
47:30 - you it's going to be something different
47:30 - right but I'm gonna go to that account
47:32 - and I'm gonna hit deploy
47:34 - so the smart contract has been deployed
47:36 - I'm going to pick one ether and I'm
47:39 - going to come to my deployed contracts
47:40 - and I'm going to enter the lottery
47:43 - and I'll pick another account and I'll
47:45 - also put in one ether and I will enter
47:48 - the lottery
47:50 - and I'll pick a third account put one
47:52 - ether enter the lottery
47:54 - once I've entered the lottery I'll get
47:56 - players you can see it's three players
47:58 - right now I will say get winners there's
48:00 - no winners you could see the array of
48:02 - addresses is empty
48:04 - and Lottery is currently zero
48:07 - now we're going to go to the owner
48:08 - because only the owner could pick the
48:10 - winner so I'm going to say pick winner
48:12 - the winner has been selected great now
48:15 - let's go ahead and get players players
48:16 - are empty because now the lottery is
48:18 - over
48:19 - let's check get winners and look at that
48:22 - guess who won the game is rigged boys
48:26 - and girls that's why I told you don't
48:29 - let the owner hop into the lottery it is
48:31 - it's just gonna be a massacre right the
48:34 - owner of course wins because it's it's
48:36 - rigged and it's pseudo-random you know
48:39 - hell yeah pseudo random right the owner
48:41 - always wins that's what happens so
48:44 - lessons to learn right it's a huge
48:46 - conflict of interest the dude who made
48:48 - the lottery don't let them jump into the
48:49 - lottery
48:51 - but yeah
48:52 - um there you go owner was picked and oh
48:55 - wow what a coincidence check who the
48:57 - owner is the owner is the same dude that
48:59 - freaking won okay there we go
49:03 - all right uh yeah very good so with that
49:07 - said you are done essentially with the
49:10 - smart contract part how does it feel do
49:13 - you feel special
49:14 - because you should feel very special
49:16 - this is a huge task that you just
49:18 - completed
49:19 - and this was awesome I think I hope you
49:22 - had as much fun as I had going through
49:25 - it with you and picking up these things
49:27 - and sharing these with you I think it's
49:29 - just so cool like this part of web3 is
49:31 - pretty cool and I think
49:34 - um yeah I hope you learn anyways we're
49:36 - now going to take this smart contract
49:39 - that you built and start bringing it
49:40 - into our development environment inside
49:43 - of you know whatever you're using visual
49:45 - studio code or whatever ID you use to
49:47 - code we're going to bring it in there so
49:49 - then our entire app could build off of
49:51 - this but
49:52 - I like this flow a lot build on
49:55 - something like remix IDE so you have
49:57 - that iterative instant feedback loop so
49:59 - you can keep iteratively building
50:01 - building building building once you're
50:02 - done building the smart contract bring
50:05 - that back into your app
50:07 - cool with that said let's continue
50:09 - all right so now what we want to do is I
50:12 - want to take all of this and move it
50:13 - into my coding environment so I'm going
50:16 - to copy the whole damn thing okay darn
50:19 - thing let's copy it let's go back to our
50:21 - app and inside of my app I'm going to
50:23 - make a new folder at a global level and
50:26 - I want to call it my back end AKA my
50:28 - blockchain AKA my smart contract part
50:30 - okay because we don't have a real you
50:32 - know traditional back end as in Firebase
50:34 - or super bass or you know mongodb or
50:38 - MySQL or postgres or whatever in this
50:40 - case our backend is going to be the
50:42 - blockchain that's where we're storing
50:43 - our data and running our app from so
50:46 - let's go to our command line now and I'm
50:48 - going to CD into our backend folder now
50:51 - first thing we want to do all right so I
50:52 - have this blockchain part now I want to
50:54 - do Truffle in it however most likely you
50:58 - on your computer might not have it
50:59 - installed okay
51:01 - um and maybe I might not even have it
51:03 - installed so first thing we want to do
51:05 - is make sure we install it so let's go
51:07 - ahead and do npmi down G okay I'll just
51:11 - zoom in here so you could see the
51:13 - command that I'm actually typing and I
51:16 - know my mouse is blocking this but it's
51:18 - a dash G okay and then we're gonna do
51:20 - truffle okay and then I want you to go
51:23 - ahead and hit enter and it will and
51:25 - start installing it okay there we go so
51:28 - let's go ahead install truffle all right
51:31 - it's doing its thing it's installing all
51:34 - of the dependencies that truffle comes
51:36 - with truffle is very very helpful in
51:38 - developing and deploying smart contracts
51:40 - makes our lives very easy hey let's go
51:43 - and install this once it's done
51:45 - installing I'm gonna now say Truffle in
51:47 - it make sure you're in the back end
51:48 - folder very important make sure you're
51:50 - in the backend folder hit truffle init
51:52 - and once you do that it will go ahead
51:54 - and scaffold an empty project for you so
51:56 - now you can see that you have contracts
51:58 - migrations tests truffle all of that
52:01 - stuff now in your migrations you have no
52:02 - migrations okay in your contracts you
52:05 - have no contracts you'll have to start
52:06 - by creating a smart contract so we'll
52:09 - hit new file we'll call it lottery.sol
52:11 - and now we're going to go to our remix
52:13 - IDE we're going to grab that contract
52:16 - address that we had gotten so let's go
52:17 - ahead select everything and let's go and
52:19 - copy it and we're going to bring it and
52:21 - we're going to paste it inside of our vs
52:23 - code lottery.sol file so now we have
52:26 - access to it on you know inside of our
52:28 - project let's go to the migrations we're
52:30 - going to hit new file and I'm going to
52:32 - say one underscore deploy.js and inside
52:35 - of this what I want to do is I want to
52:37 - say cons Lottery and I want to say
52:39 - artifacts that require Lottery some of
52:41 - this code is going to be new and weird
52:43 - just write it and you'll start getting
52:45 - used to it okay but don't you don't need
52:46 - to worry too much about understanding
52:48 - this because it's not that important you
52:50 - write it once and then you're done and
52:51 - you can kind of copy and paste it for
52:53 - all your future projects and you should
52:54 - be good okay and we're going to export
52:57 - the following module it's going to be a
52:59 - function that's going to take in a
53:00 - deployer and then we're going to take in
53:02 - whatever we're trying to deploy and
53:03 - we're going to deploy it and pass in our
53:06 - Lottery artifact all you need to
53:08 - understand about that is that piece of
53:10 - thing that we wrote is going to help us
53:12 - deploy our lottery.smart contract and
53:15 - the benefit of deploying it is just like
53:16 - the web 2 deployments it will deploy it
53:19 - to the ethereum network meaning that
53:22 - anybody will be able to actually access
53:24 - it you know almost like it's a website
53:26 - or an API that's publicly available okay
53:29 - that's what a smart contract does now
53:32 - let's go into our truffle config file so
53:35 - I'm going to go and scroll all the way
53:36 - down in my truffle config file so it's
53:39 - this file right here so let's scroll
53:41 - down and I'm I just want to fix the
53:44 - version so version right now is
53:47 - 0.8.16 I'm looking at my English little
53:49 - tiny Bulldog pudgy please baby don't do
53:52 - that
53:53 - her name is pudgy and we're going to
53:56 - change it to 0.8.15 because that's the
53:58 - version we're using and that is it for
54:01 - moving it into your Visual Studio code
54:03 - into your own
54:05 - um you know development environment so
54:08 - at this point you're done doing that
54:09 - next up we're going to set up the
54:11 - Truffle extension let's go
54:13 - now we're going to set up our truffle
54:16 - extension so the first thing you want to
54:18 - do when you're setting up a truffle
54:19 - extension is obviously you need to
54:22 - install truffle from the extensions okay
54:24 - go ahead type in truffle and there you
54:28 - go truffle for vs code now what is
54:30 - truffle it is incredibly powerful
54:33 - software built by consensus and what it
54:35 - allows you to do is in you know
54:38 - basically uh integrate your smart
54:40 - contract with infuria in a very very
54:43 - easy way and deploy to their Network
54:45 - okay and it just makes your smart
54:46 - contract deployment building of it
54:49 - incredibly easy so make sure you're
54:52 - using this for pretty much almost all of
54:53 - your you know solidity projects so at
54:56 - the bottom left click truffle and go
54:58 - into that extension
55:01 - and that error at the bottom if it pops
55:04 - up for you just ignore it it's not
55:05 - important now what you're going to click
55:07 - on is you're going to create a new
55:09 - network so hover on that create a new
55:11 - network and you're going to choose
55:12 - inferior service
55:15 - and then inferior will pop up and it'll
55:16 - ask you to sign in Click sign in and all
55:19 - I want you to do is go ahead and hit
55:21 - authorize at the bottom here so you make
55:24 - sure that you sign in and I'll hide
55:26 - myself so you can see that authorize
55:27 - button okay there we go
55:29 - all right
55:32 - um so let's keep going here okay once
55:34 - you authorize and that was Kevin and me
55:36 - on the call that you saw on Zoom okay
55:39 - all right so let's go here yep so now it
55:42 - will say you are signed in beautiful and
55:45 - you can exit out once you've signed in
55:47 - now at the top here it's going to ask
55:50 - you to put your project name so go ahead
55:52 - and put your project name we're just
55:54 - going to call it all right so I'm going
55:56 - to type in Lottery and then just hit
55:58 - enter once you type that in and then you
56:00 - could choose this project as public
56:02 - fantastic now at the bottom in the
56:05 - networks you see it says Lottery and
56:07 - it's showing us that it's connected to
56:09 - multiple networks on layer 1 and layer
56:11 - 2. and if you go to your infuria
56:13 - dashboard you'll also be able to see
56:15 - this project there now I'm going to go
56:16 - inside of my contract and what I want to
56:18 - do is right click on my lottery.sol and
56:23 - go and choose build contract so there
56:26 - you go build contract so click that and
56:30 - then once you once it starts building it
56:33 - for you just simply wait and go in your
56:37 - vs code and choose truffle for vs code
56:39 - for your outputs you can actually see
56:41 - the output I'm going to drag this up now
56:44 - and we'll wait for it and now it says
56:46 - command finish running so now it's built
56:48 - our smart contract and next after we've
56:50 - built it we're going to deploy it
56:53 - so then click deploy go ahead and choose
56:56 - your project so since we're on the
56:58 - robston one choose inferior Lottery
57:00 - Robson INF underscore Lottery underscore
57:03 - Robson choose that that's going to be
57:05 - your deploy destination okay and now
57:07 - it's going to say hey enter gas price
57:09 - just hit enter so you can leave it as
57:11 - default and here you're going to pop in
57:15 - your mnemonic okay so hopefully you've
57:18 - copied your mnemonic from earlier
57:19 - remember when you made your wallet yeah
57:21 - that if you didn't do that go ahead and
57:23 - create a brand you know either find a
57:25 - mnemonic for an existing wallet that you
57:27 - have or create a new wallet and grab
57:29 - that while it's mnemonic this is going
57:31 - to be very important and then paste that
57:33 - mnemonic here once you paste that
57:35 - mnemonic it's going to ask you to save
57:37 - and I want you to just save it as you
57:40 - know kind of wherever you want to save
57:41 - it it doesn't really matter I'm going to
57:43 - save it on my account in desktop and I'm
57:46 - just going to call it key dot ends it's
57:49 - really just short for Kevin and then
57:52 - wait for it to deploy at the bottom it's
57:56 - loading okay deploying takes a little
57:59 - bit of time so we're going to keep
58:00 - waiting for the deployment boom there we
58:03 - go it says deploy succeeded finished
58:06 - running command now grab that contract
58:09 - address that we got from our deployment
58:11 - copy that and now you can go over into
58:14 - you know we're create a new folder and
58:17 - we'll call this utils at the top level
58:19 - make this folder inside of it we're
58:22 - going to put a new file and it's going
58:23 - to be constance.js and inside of this
58:26 - file we can say export cons contract and
58:29 - we can say contract address and then
58:31 - boom we can paste that contract address
58:33 - okay that we copied there we go now our
58:35 - app will have access to this contract
58:37 - address now go into your back end go
58:39 - into your build and grab lottery.json
58:43 - and copy it then go in utils and paste
58:46 - that file so now we just pasted
58:48 - launcher.json and while we're doing this
58:51 - is because we will need access to our
58:52 - Abi and this has the entire ABI in there
58:56 - okay now we're also going to import in
59:00 - our constants file we're going to import
59:01 - our ABI from Lottery Json
59:04 - and then we're going to export
59:07 - that API yeah as well so now we're just
59:10 - going to do
59:11 - export cost contract API and we're just
59:14 - going to say abi.abi that should do the
59:16 - trick
59:17 - with that said we're all set up our
59:20 - front end now is plugged in and
59:23 - connected to our smart contract and
59:24 - backend we have access to everything now
59:27 - we're going to start creating the
59:30 - lottery from react and start doing the
59:32 - front end stuff okay let's get to it now
59:35 - let's go ahead and actually factually
59:37 - connect our back end and front end okay
59:41 - up until now we kind of pull that
59:42 - information a contract address now we'll
59:44 - actually like create a lottery helper
59:46 - function that connects it let's go into
59:49 - utils I'll create a new file we'll call
59:52 - this file Lottery
59:54 - contract.js and in here I want to do the
59:57 - following I want to import my contract
60:00 - address and my contract ABI from the
60:05 - Lord from my constants okay because my
60:08 - constants have access to all of this
60:10 - information once I have access to that
60:12 - I'm going to create my lottery contract
60:14 - and it will be doing in the following
60:18 - way okay we'll say hey return to me a
60:20 - new web3
60:22 - eth contract and you're going to take in
60:25 - the contract API and you're going to
60:27 - take in the contract address and with
60:30 - that said that is it so with this
60:34 - thing that we've made now we'll be able
60:37 - to actually access this in other files
60:40 - and use our Lottery contract and at this
60:44 - point you could add the export
60:46 - but we're going to add the export later
60:48 - and this is just going to be a helper
60:49 - function we'll be able to use throughout
60:51 - our entire app with that said let's move
60:54 - on and let's start working on the actual
60:56 - header in our app all right now we're
60:59 - going to be building the header and
61:01 - here's what it will look like
61:03 - boom
61:05 - boom all right so this is the header
61:08 - that we're gonna be building on the
61:09 - connect wallet button so I'll put it
61:11 - here as just like a reference point that
61:13 - we can use as we continue building so
61:16 - let's go ahead and continue building
61:18 - here all right so I'm going to pop in
61:21 - and I'm going to say header okay and
61:24 - make sure you are in your index.js file
61:27 - and we're going to import header from
61:30 - components header okay then just write
61:32 - down header there okay this is a
61:35 - component we've already made for you
61:37 - inside of if you're going to the
61:39 - components folder you'll see header.js
61:41 - it's pretty much already built but it
61:44 - does have some to-do's so it does ask
61:46 - you there are things that you're going
61:47 - to need to do in there to add
61:49 - functionality so it says get the connect
61:50 - wallet and address from blah blah and
61:53 - then on line eight it has another to do
61:55 - replace a static address so we've added
61:57 - these to-do's for you to make your life
61:59 - easier and then we have context as well
62:02 - so here's our context.js file so so
62:06 - let's go ahead and work inside of our
62:08 - context file and we're going to keep
62:13 - track of the user's address we also will
62:16 - want to add functionality for connect
62:18 - wallet so the user could log in and it's
62:20 - going to be an async function
62:23 - and we're going to say if the window is
62:27 - undefined okay
62:30 - and window ethereum is undefined so
62:34 - meaning that you know you're not on
62:36 - metamask or whatever and then we'll do
62:39 - else and we'll just say hey please
62:41 - install metamask let's add a try catch
62:44 - in between those if statements and we
62:47 - will try catch it in the following way
62:49 - so we'll have we'll console log the
62:52 - error and then inside of our try we want
62:56 - to request wallet connection and so how
62:58 - we do that is we want to do
63:01 - window.ethereum.request method eth
63:03 - underscore request accounts that'll
63:05 - allow us to request wallet connection
63:07 - okay that's that brings up the little
63:09 - pop-up in metamask and then next up we
63:13 - want to create a web 3 instance so let's
63:15 - do web3 equals new web3 and we want to
63:18 - pull it from window dot ethereum let's
63:20 - go ahead and import web3 from web3
63:25 - great let's keep track of a couple of
63:27 - other states here so we're going to keep
63:29 - track of a web 3 State and we're going
63:32 - to use that hook right here and we're
63:33 - going to say set web 3 to whatever we
63:36 - defined web3 to be right right above on
63:38 - line 19 and then we want to have
63:41 - accounts and we want to pull all of the
63:44 - accounts from that user's metamask like
63:47 - whatever they connected whatever
63:48 - accounts are connected and we're going
63:50 - to set the address to be the zeroth
63:53 - account like the first account that they
63:55 - selected okay now go to Lottery contract
63:58 - and here I'm going to export default and
64:01 - we're going to export our Lottery
64:03 - contracts so we have access to it
64:05 - outside of our utils file for lottery
64:09 - contract and we're gonna actually you
64:12 - know what rename it let's rename it to
64:14 - create Lottery contract that would be a
64:17 - good renaming for this
64:21 - let's go ahead and set a state here on
64:24 - line 9 and we're going to set a state
64:26 - for lottery contract
64:29 - okay so we can keep track of everything
64:30 - that's happening because the lottery
64:32 - contract can get updated so that's why
64:34 - we need to keep track of the state now
64:36 - in line 24 I want to say set Lottery
64:38 - contract okay to create Lottery contract
64:42 - and we're going to pass it web 3 that we
64:44 - just got and then what we want to do is
64:46 - we want to say hey window.etherium Dot
64:49 - on accounts changed
64:53 - all right
64:54 - and we want to run this async function
64:57 - in here
64:59 - so whenever the accounts change then I
65:03 - want you to get accounts and set the
65:04 - address to account zero so if the user
65:06 - changes their account picks a new
65:08 - account this will do it okay this will
65:11 - automatically update it without
65:13 - necessarily having to even refresh the
65:15 - page or do anything because it's an on
65:16 - change it's kind of a listener here next
65:19 - up what we want to do is in our provider
65:22 - we want to pass this around so we want
65:25 - to pass connect wallet function that we
65:27 - created around so our entire app has
65:29 - access to it and then we want to pass
65:31 - the current address around so our app
65:33 - has access to it okay
65:36 - so let's go to our header function now
65:39 - and inside of our header function you
65:42 - can see it says Hey to do get the
65:43 - connect wallet and address from context
65:47 - so now we're going to go ahead and get
65:49 - that we're going to finish that to do so
65:51 - I'm going to say connect wallet and then
65:53 - address and we'll say use app context
65:56 - okay let's fix the yep address right
65:59 - there
66:00 - remove that address we don't need that
66:02 - and
66:03 - yeah on line 18 we want to say hey if
66:07 - the
66:08 - use your card so you can see on line
66:11 - eight we have a to-do that says replace
66:12 - the static address or the currently
66:14 - logged in user so on line 18 we had a
66:17 - static address and now what we're saying
66:19 - is hey if the there is an address
66:22 - meaning there is a logged in user then I
66:25 - want you to show the user card
66:27 - with the following address otherwise I
66:29 - want you to show the connect wallet
66:31 - button okay so we're going to say
66:33 - address we're going to pass it the
66:34 - address and then for our connect wallet
66:37 - button we'll say hey
66:40 - um yeah made the connect wallet function
66:42 - should be the connect wallet function
66:44 - that we got from the top okay so that's
66:46 - what we're going to pass in as a connect
66:47 - wallet prop
66:48 - okay great so we've made fantastic
66:51 - progress on it so far let's go ahead and
66:53 - hit refresh and there we go our Lottery
66:56 - dap is showing up and now let's see if
66:59 - when we hit connect wallet if it runs
67:02 - okay so it didn't work right now so
67:04 - let's see what's going on
67:06 - so let's go to our connect wallet button
67:09 - component in components and it has a
67:12 - couple of to-do's for us okay
67:15 - so we need to destructure connect wallet
67:17 - because that's what we're passing it
67:20 - and we need that function to run on
67:23 - click okay so let's go ahead and set
67:25 - that up so for the button we're going to
67:27 - give it on click
67:28 - and we're simply going to say hey
67:31 - run the connect wallet function that we
67:33 - wrote when you do on click so as soon as
67:35 - you click that metamask will then pop up
67:37 - okay so that is how we're connecting
67:40 - that functionality and here's our user
67:43 - card
67:44 - component that we have made
67:46 - and we need to destructure the prop the
67:49 - address prop that we gave it okay so
67:52 - that this has access to the address and
67:55 - we need to render the user's address in
67:57 - here so right now we just have some
67:59 - dummy address
68:01 - let's remove that dummy address and
68:03 - let's render the user address in there
68:05 - and we'll just say address just like
68:06 - that
68:07 - okay great now let's go ahead and we'll
68:10 - full screen this so we could see it
68:12 - let's hit connect wallet boom look at
68:14 - that right metamask just opened up we'll
68:17 - type in our password and let's see if
68:19 - this works
68:20 - great it worked and there you go right
68:23 - you can see welcome you could see the
68:25 - current user's wallet address and let's
68:27 - see if it's the actual current user or
68:29 - if it's doing some kind of dummy data
68:31 - thing and look at that 0xa right 0x a it
68:35 - is the current user we'll switch users
68:36 - as a zero
68:38 - um X31 or whatever let's switch to 0x35
68:42 - Let's refresh right let's connect and
68:44 - look at that right it changed the user
68:46 - to zero x35 and so you could see that
68:49 - this app works completely well with this
68:52 - it's picking up the current logged in
68:54 - User it's changing the state when we hit
68:57 - login connect wallet it changes it to
68:59 - the Welcome State it can change the
69:02 - current active user it has allowed us to
69:04 - bring up metamask and unbring it up and
69:07 - basically it's you know authentication
69:10 - at this point of the app is working so
69:12 - fantastic job if you got to this part
69:15 - now we're going to continue and we're
69:18 - going to start adding in the lottery
69:19 - card so you can enter the lottery let's
69:21 - go
69:22 - all right now let's go and work on the
69:25 - lottery card first thing I need to do is
69:27 - actually write the write out the lottery
69:29 - card component and then you're going to
69:31 - add in all the functionality we're going
69:32 - to add it together so let's go Lottery
69:34 - card right here and we and if you run
69:37 - this we get an error which says Lottery
69:39 - card is not defined what we have to do
69:42 - is we have to import Lottery card so
69:44 - that way we actually have access to it
69:46 - and we're going to import it from
69:48 - components slash Lottery card okay there
69:51 - you go we've already made this component
69:53 - for you now this component is coming in
69:55 - with dummy data
69:57 - it's coming in with dummy data and you
69:59 - can see that we got 10 eighth we got a
70:02 - winner last like who won the lottery
70:04 - last and we can pick our winner so let's
70:08 - go to context.js and inside of our
70:11 - context
70:12 - we want to do the following
70:14 - I want to
70:15 - all right so I'm going to say Lottery
70:18 - pot and we're going to say set Lottery
70:21 - pot so I'm going to keep track of the
70:23 - lottery pot state
70:25 - and we're going to start the state as
70:28 - empty
70:29 - and then we're also going to keep track
70:31 - of the lottery players okay it's going
70:34 - to be an empty in an array of players
70:36 - we're going to also
70:39 - keep track of who won last and
70:44 - yeah okay and then we're gonna keep
70:47 - track of the lottery ID which Lottery
70:49 - are we on are we on lottery 0 1 2 3 4
70:52 - Etc let's go ahead and now we're going
70:55 - to write our enter Lottery function and
70:58 - I'm going to say enter Lottery this is
71:00 - going to be async and we're going to
71:02 - wrap it in a try catch we're just going
71:05 - to console log the error just a good
71:06 - habit to get into and then in the try
71:09 - what I want to do oh copilot is telling
71:13 - me everything
71:14 - I'm going to grab my lottery contract
71:17 - and I'm going to call the enter Lottery
71:19 - function that I created on the back end
71:21 - okay it's called enter
71:23 - okay and then we're going to send and
71:27 - send is going to take in the following
71:30 - information into account it's going to
71:31 - take in the from address it's going to
71:33 - take in the value and so I'm just going
71:36 - to pass it a very small amount of ether
71:38 - as value because that's what I want to
71:41 - put in the pot okay
71:43 - this is the minimum amount that I could
71:46 - put in the pot and then we're converting
71:47 - it to whey because that's what it wants
71:49 - on the back end all right now for gas
71:52 - we're going to just pick 300 000 or
71:55 - whatever that is
71:58 - um okay so it's going to be gas in Whey
72:00 - or way and then we got the gas price
72:03 - here and gas price is going to be null
72:06 - now we want to also export this function
72:09 - so let's put enter Lottery inside of the
72:11 - app context and now we'll have access to
72:14 - enter lottery in our other files so
72:17 - let's go to our Lottery card and now we
72:20 - get the data needed from Context so now
72:23 - we're dynamically getting all of the
72:25 - data so let's go ahead and import our
72:27 - use app context from context
72:30 - and we will say use app context and
72:35 - we're going to destructure the following
72:36 - properties enter Lottery okay and that's
72:39 - kind of it that's all we need and where
72:42 - we have that enter button happening
72:44 - that's where we want our function to
72:45 - fire off that we just created so I'm
72:48 - going to say on click enter Lottery okay
72:51 - now let's go ahead and try that connect
72:53 - wallet login and then we're going to hit
72:55 - enter and now we should have entered
72:57 - Lottery
72:58 - and let's see what is happening
73:00 - we're currently getting some error that
73:02 - says cannot tell you cannot read from
73:06 - undefined so we're going to import
73:07 - create Lottery contract from okay from
73:12 - where let's see
73:14 - from our utils okay from dot dot slash
73:19 - utils slash and we're going to say
73:21 - Lottery contract okay that's what we're
73:24 - getting it from now let's scroll down
73:26 - and let's say 0.1 ether instead of 0.01
73:30 - ether
73:31 - for our value that we pass
73:34 - and now let's hit enter so that way
73:36 - we're just passing in a bit more ether
73:38 - into the pot let's hit enter and boom
73:41 - okay that worked let's hit confirm
73:45 - okay let's see what happens so let's
73:48 - take a look at the Smart contract here
73:50 - okay our dummy data of 10 East is still
73:52 - there so that's not going to change but
73:54 - our smart contract looks like it has
73:56 - entered so our enter function worked it
73:59 - didn't fail so that's a great sign and
74:03 - you can see that we put in 0.1 Ross pen
74:06 - here Robinson okay
74:08 - now with that part we're done now we're
74:12 - going to make it so we actually update
74:14 - the lottery pot let's go ahead and do
74:16 - that
74:17 - all right let's go and update our
74:20 - Lottery pot now
74:21 - okay so let's go inside of our context
74:25 - and we're gonna update the lottery card
74:27 - dynamically
74:29 - using our contract
74:32 - okay so that way where it says 10 eighth
74:33 - we need that to update dynamically and
74:38 - not for us to have to manually hard code
74:40 - it and fix it okay so I'm going to make
74:43 - update Lottery function here
74:47 - and this is going to be an async
74:49 - function and I'm going to say hey if the
74:51 - lottery contract exists
74:56 - okay then I want you to
74:58 - create a pot
75:00 - and I want you to go and get me to get
75:03 - pot method and since we're using web3
75:05 - you got to do dot call to actually call
75:07 - your method
75:10 - okay and then whatever we get from our
75:12 - pot we're going to set
75:14 - Lottery pot to that
75:21 - okay let's use a use effect hook and
75:23 - inside of this use effect hook we're
75:25 - going to make Lottery contract a
75:26 - dependency so whenever our Lottery
75:29 - contract changes our app should you know
75:31 - our use effect hook should fire off and
75:33 - our app should dynamically update and
75:35 - when it does we should update the
75:37 - lottery so then we run the update
75:39 - Lottery function
75:43 - all right now in our context we also
75:46 - need to make sure that we
75:48 - um export Lottery pots or other files
75:50 - have access to it Lottery pot
75:53 - dynamically render the lottery okay
75:56 - so we're going to destructure in Lottery
75:58 - card our Lottery pot as well
76:03 - and where it says 10 eth we're going to
76:06 - dynamically now write Lottery pot there
76:09 - and it's going to pull from our Lottery
76:11 - pot and put that there
76:16 - foreign
76:18 - let's set it to be zero eighth when it
76:21 - starts so now you can see it says zeroes
76:24 - okay I'm going to make it a string
76:26 - and then it will dynamically update
76:29 - once we have something in the pool
76:33 - so let's go ahead and connect wallet
76:35 - hmm interesting okay got dot get pod is
76:38 - not a function
76:40 - all right get pot is not a function so
76:42 - it's let's see it's get balance
76:45 - okay there we go and so we just got the
76:48 - balance and look at that so on our back
76:50 - end right on our smart contract
76:51 - blockchain part it's get balanced that's
76:53 - what the function is
76:55 - so now you can see that when I say get
76:58 - balance I'm getting all of this money in
77:00 - way and so it is a massive massive
77:04 - amount and that's not what we want so we
77:07 - need to actually convert it back into
77:09 - ether so we're going to say web3utils
77:11 - dot from way
77:13 - okay
77:16 - and when you do Dot from way
77:19 - it allows us to convert it back into
77:22 - ether that's the really nice thing about
77:24 - that
77:25 - so it knows that it's getting way
77:29 - all right now let's go ahead and run
77:31 - this and boom that is so clean right now
77:35 - we can see that it's 0.1 eth that's
77:38 - showing up and we'll write the word eth
77:41 - at the end of that there you go now it
77:44 - says 0.1 eighth so now our app is
77:46 - dynamically updating super cool let's
77:49 - now update the lottery ID
77:52 - now we are going to update and render
77:54 - the players so they actually show up on
77:57 - screen when they enter let's go into
77:59 - index.js and we have a to-do here that's
78:02 - very nicely written for us and I'm going
78:04 - to say
78:05 - table
78:07 - all right
78:08 - and this is a table that we've already
78:10 - made for you so import table from
78:13 - components table
78:16 - all right so yeah so we're going to get
78:18 - the table make sure you've also gotten
78:20 - the you know Styles make sure you have
78:22 - the Styles obviously
78:23 - and there we go look at that our table
78:26 - is already showing up at the bottom hey
78:28 - nice oh wait I'm hiding everything so
78:31 - I'm gonna hide myself give me one second
78:33 - here
78:34 - okay I'm gonna hide myself here real
78:36 - quick so you can kind of see it so there
78:38 - we go right we got the player showing up
78:42 - now
78:43 - I'm gonna make myself tinier
78:45 - okay let's go back and let's go inside
78:48 - of our table and here we can actually
78:51 - map we need to map through the players
78:53 - and loop through it so our to-do is
78:56 - telling us bring in the players data
78:58 - from Context so we need to get the
79:00 - players data so let's go inside of our
79:02 - contacts and get access to all of the
79:05 - players
79:07 - all right so in update Lottery I'm going
79:09 - to also write a player's method
79:12 - um and I'm going to say hey set the
79:14 - players to and let's go talk to our back
79:16 - end or blockchain part so I'm going to
79:18 - say going to the lottery contract going
79:20 - to the methods grab the get players
79:22 - method and call it and whatever that
79:25 - returns let's set that as our player so
79:27 - it's going to return an array let's set
79:29 - that array as our Lottery players
79:32 - okay and we can even console log this
79:34 - out so you could see it here
79:39 - all right there you go at the bottom you
79:41 - can see that we got an array of players
79:42 - it only had one item in that array and
79:44 - you could see that we had this guy right
79:47 - there
79:48 - okay and that's the guy that's currently
79:50 - actually logged in so it is working
79:54 - all right now let's go ahead and Export
79:55 - Lottery players in our provider so that
79:58 - we have access to another files
80:00 - right and now let's go to our table.js
80:06 - and I'm going to
80:09 - basically say inside of the loop here
80:11 - okay or inside of uh the div there
80:16 - but first i'm gonna pull my data from my
80:20 - context all right so let's say use app
80:22 - context and we're going to destructure
80:25 - Lottery players
80:27 - okay that's the one that we're
80:28 - destructuring there
80:30 - and now I'm just going to say hey in
80:32 - players row just show Lottery players
80:35 - okay let's do that
80:38 - we're going to say hey if La if Lottery
80:40 - players exist then I want you to Loop
80:44 - through those players and show me those
80:46 - players okay create a table Row from
80:49 - each of them and then show them to me
80:51 - and we're just going to make index the
80:53 - key for player we're just going to pass
80:55 - in the player okay that's it
80:57 - but if they don't exist and obviously
81:00 - just show me dummy data
81:02 - okay or don't show me anything at all
81:05 - so we're going to say style of no
81:06 - players and we'll send no players yet
81:08 - now when we run this you could see that
81:11 - it's actually already dynamically
81:13 - pulling in user information because you
81:14 - could see this is the guy right there
81:17 - and you can see 0xa1 f a blah blah blah
81:20 - so if this is working perfectly
81:23 - let's go inside of table row
81:26 - and you can see that we're destructuring
81:28 - the player and we're truncating that
81:30 - player's address
81:31 - okay that's what's shortening that
81:33 - address right so you can see that
81:35 - address is being shortened right there
81:36 - that's how that's happening
81:38 - okay
81:39 - it's because we have that function
81:40 - truncate that we're calling on it okay
81:42 - now let's say we change our wallet
81:44 - address and see what happens
81:47 - boom okay let's go ahead and hit reject
81:50 - there
81:51 - cool
81:54 - all right you can see we have 0.1 eighth
81:56 - and you could see our user address is
81:59 - still 0xa because that's the player
82:01 - that's that has actually entered 0x35
82:05 - has never entered this dap it's Lottery
82:08 - okay but now let's say that we do enter
82:10 - let's see what happens now
82:13 - so I'm going to hit confirm
82:16 - okay we'll speed this up I'll just put
82:18 - in high gas prices so I could speed it
82:20 - up
82:21 - and looks like it went through
82:24 - now we'll refresh the page and boom
82:28 - there you go all of the players are
82:30 - showing up and they are being rendered
82:33 - dynamically how freaking cool is that so
82:36 - with that said we're pretty much done
82:38 - with that part just remove the part
82:41 - where it says you know 0.015 eth and we
82:45 - just hard coded it to 0.1 eth so right
82:49 - here we could hard code it with 0.1 each
82:51 - because in this app the only pool like
82:55 - the only amount you can enter with is
82:56 - 0.1 eighth so we know guarantee the 0.1
82:59 - need so I don't need to pull data
83:00 - dynamically I can just hard code 0.1
83:03 - each here and be accurate because you
83:06 - can't do more or less than that okay so
83:09 - with that said we're done with this part
83:10 - now we're on to the last and most
83:13 - exciting part which is we gotta pick our
83:15 - winner so let's go
83:17 - all right time to pick the winner so
83:21 - here we go
83:24 - let's go into our Lottery card here you
83:27 - can see I have my pick winner
83:29 - okay
83:30 - so we need to add functionality for this
83:33 - let's go into context JS first we're
83:35 - going to write our function pick winner
83:37 - that allows us to pick our winner let me
83:39 - put a little space after my comments
83:42 - because I'm a professional
83:44 - and then we're gonna say hey pick winner
83:47 - function is going to be an async
83:51 - all right so here basically what we're
83:54 - gonna do is I'm gonna write a simple try
83:56 - catch and obviously it's console logger
83:59 - error
84:00 - and then in my try catch I want to say
84:04 - I want to Define my transaction
84:07 - and I want to go into my lottery
84:10 - contract and I want to pick the winner
84:14 - okay and I need to send so to pick the
84:17 - winner I need to send it the from
84:19 - address I need to send it the gas and
84:23 - all the other things that it needs okay
84:24 - so we're just going to pick 300 000 way
84:26 - gas price is going to be null
84:28 - and that's that's it okay pick winner is
84:32 - going to pick randomly and the reason
84:35 - why it needs the from address is
84:37 - remember it's checking for if you are
84:39 - the owner if you're not the owner then
84:42 - it won't work
84:45 - all right and then what we want to do is
84:49 - once we get the winner we want to update
84:51 - the lottery okay so we want to actually
84:54 - at this point we want to first update
84:56 - the lottery okay so we want to run or
84:58 - update Lottery function and that way it
85:01 - will automatically update all of the
85:02 - data on our Lottery card you know the
85:05 - current wallet address the current users
85:08 - Etc let's export this pick winner
85:10 - function so other files have access to
85:12 - it
85:14 - let's go to our Lottery card and here
85:18 - I'm going to get access to this okay so
85:20 - let's go ahead and destructure
85:23 - pick winner
85:25 - and then we're gonna go ahead and do on
85:27 - click pick winner okay there we go so
85:30 - now we entered our on click we gave our
85:32 - on click the pick winner so let's go and
85:34 - now choose pick winner and we'll soon
85:38 - see what happens okay and let's also
85:40 - update the wallet address for our last
85:42 - winner so we're gonna you know create
85:45 - that function too at some point okay so
85:48 - let's go ahead and set the last winner
85:50 - to be whoever the last winner was so
85:52 - luckily in our blockchain we've already
85:53 - made that smart contract and so I'm
85:56 - going to go to my lottery contract and
85:58 - the methods and I'm going to extract my
86:01 - get winners all right so we are getting
86:04 - our we're calling our get winners method
86:08 - from our smart contract which gets us
86:11 - all of the winners and then from here
86:13 - what we want to do is we want to extract
86:15 - the last one it's going to be an array
86:17 - so let's go ahead and console log this
86:20 - and we're going to console log
86:23 - um our last winner
86:25 - so let's go ahead and do that
86:27 - and let's make it an array so let's go
86:30 - to on line 12 and let's make it a empty
86:32 - array by default
86:34 - all right now let's log in so now
86:36 - everything got updated right right when
86:38 - I logged in all the users got updated
86:40 - Etc
86:42 - and let's see if the last winner is
86:45 - showing up so I'm gonna go here
86:47 - we're going to look at our console
86:50 - and you can see on the right hand side
86:52 - that
86:54 - right now it says length is zero
86:59 - okay
87:01 - so
87:03 - so right now we since we haven't picked
87:05 - a winner it's just saying zero but once
87:07 - we picked it pick a winner it's going to
87:09 - show an array of who won last okay so
87:13 - let's go ahead and do last winner here
87:16 - okay and I'm just gonna write last
87:18 - winner there okay
87:20 - and so
87:22 - yeah let's take a look at it and now we
87:24 - can see that it's showing us an array of
87:27 - people
87:29 - those are players right the array that
87:32 - you're seeing with the actual wallet
87:33 - addresses those are actual players but
87:36 - the one where you're seeing empty that's
87:38 - where it's a winner and it's because
87:39 - nobody has a one yet so we're gonna need
87:41 - to run our one pick winner function
87:44 - first and then it'll tell us
87:48 - so let's go ahead to our Lottery card
87:50 - and we're going to dynamically render
87:52 - the last winner as that note says
87:54 - because right now it's hard coded
87:56 - so let's go and grab our last winner so
87:59 - we're gonna say on line 23
88:02 - actually first let's destructure our
88:04 - last winner so we have access to it
88:06 - we'll go in our context and we'll make
88:07 - sure we're exporting our last winner
88:09 - okay
88:11 - and then we want to do the following
88:14 - we want to say hey if the last winner is
88:15 - there then show all of this div and
88:17 - everything that's happening underneath
88:19 - okay so I'm going to say not last winner
88:23 - okay so if basically
88:26 - so if last Runner does not exist then I
88:30 - want you to do the following
88:32 - if it doesn't exist then I want you to
88:35 - create a div with
88:38 - uh we're going to say style.winner and
88:40 - here we're just going to say no winner
88:42 - yet and then if it does exist then I'm
88:46 - going to do the whole winner thing
88:49 - Okay cool so let's see what's happening
88:53 - here so if there is a winner then I want
88:57 - you to if there's no winner then I don't
88:59 - wanna I want you to say no winner yet if
89:01 - there is a winner then I want you to
89:03 - show uh a address okay show the the
89:06 - Winner's address now here you can see it
89:08 - says no winners yet that is perfect okay
89:11 - that is what we want when we're doing
89:13 - this right now now I'm going to click
89:15 - pick winner
89:17 - and make sure you're the owner account
89:19 - when you say pick winner
89:21 - and then I want you to go ahead and hit
89:24 - confirm
89:27 - okay
89:28 - and let's see we're still waiting let's
89:32 - see let's speed it up for pick winner
89:33 - I'm gonna put High money into it
89:36 - speeding and speeding it up ah it failed
89:39 - so let's see why it happened ah because
89:41 - I was not the owner right that's why it
89:44 - failed now I'm the owner now let's pick
89:47 - and let's see what happens
89:49 - so I'm going to hit confirm here
89:52 - and then we're gonna see if we can speed
89:54 - up the contract addresses let's speed
89:56 - them up let's put it on high perfect
89:59 - Boom the winner is picked let's go and
90:03 - now you can see user address is empty
90:05 - because new the player players are now
90:09 - wiped out because the last lottery is
90:11 - over right now we're in a new lotteries
90:13 - that makes sense why I got wiped out now
90:16 - for last winners it shows us a hard
90:18 - coded thing it's saying the Pod is zero
90:20 - so that's good okay lottery number
90:22 - incremented by one however our last
90:25 - winner okay it says no winner yet
90:28 - sorry actually it says we have zero x
90:31 - one two three blah blah blah so it's not
90:34 - showing us who the actual last winner
90:36 - was we need to update that because we
90:38 - have left it hard coded remember
90:40 - so we need to go and fix that on line 29
90:42 - okay we're going to take that wallet
90:45 - address and we're going to replace it
90:48 - with the actual winner so
90:53 - yep okay
90:56 - there we go that's our last winner we're
90:58 - exporting our last winner as well now
91:01 - let's go here
91:02 - okay we have access to our last winner
91:04 - so all I'm going to do is I'm going to
91:06 - replace all of that and I'm going to say
91:08 - last winner
91:10 - okay and it says address match is not a
91:12 - function
91:13 - okay so since it's an array
91:15 - we're going to go ahead and say last
91:17 - winner
91:18 - and I'm going to get the last item from
91:22 - that array okay so all I'm doing here is
91:24 - I'm getting the last item from that
91:27 - array so let's say I have 10 winners
91:29 - well since I want to get the most recent
91:32 - winner I'm going to grab the last
91:34 - element out of that array okay and to
91:37 - just kind of visually
91:38 - see it for yourself it's like if I have
91:40 - David Kevin
91:43 - and if I want to get the last winner
91:45 - here
91:46 - well I want to be able to do you know
91:49 - let's say that this is called winners I
91:53 - want to be able to do winners
91:55 - and get me cozy so I want to do winners
91:58 - of two okay in other words I want to do
92:01 - winners of dot length because dot length
92:06 - and actually I want to do length minus
92:07 - one right because that'll actually get
92:11 - me the last possible item so if I do
92:14 - winners.length I get three I subtract 1
92:17 - I get two this whole thing turns to two
92:20 - winners of two is cozy okay since we
92:23 - start at zero one two yeah okay
92:27 - so I'm going to write that then let's go
92:30 - ahead and do -1
92:32 - okay great
92:34 - now let's connect wallet and there we go
92:38 - our last winner the actual factual
92:42 - person now one is now showing up how
92:45 - beautiful is that let's click enter to
92:49 - enter the lottery so now we're basically
92:51 - doing the last final demo run and let's
92:53 - test if this whole thing works okay
92:56 - let's click enter
93:00 - all right I'm gonna speed it up speed it
93:04 - up speed it up speed it up there we go
93:06 - okay so now it looks like I have entered
93:08 - successfully it did cost me some robston
93:11 - to do that because I pulled the money
93:12 - let's refresh and you can see 0.1 eth is
93:15 - there and you can see the new user is
93:18 - showing up there at the bottom beautiful
93:20 - then let's go ahead into our metamask
93:23 - I'm going to switch my account to a
93:26 - different account and inside of this
93:30 - account I will hit enter
93:31 - okay let's go ahead and hit confirm
93:35 - all right and once I hit confirm here
93:37 - let's wait for it we'll speed it up okay
93:39 - let's speed it up speed it up and then
93:41 - we'll hit save and it looks like I have
93:44 - entered with that one as well so let's
93:45 - refresh the pool size the pot size is
93:49 - 0.2 each
93:50 - both of the users that are current
93:54 - players are showing up as players and
93:58 - then we got our last winner showing up
94:00 - as well so this is amazing so far you
94:03 - guys now we have to switch to the owner
94:05 - of the contract smart contract address
94:07 - and then we gotta go and pick our win
94:10 - okay once you are the owner and then you
94:13 - go ahead and pick winner now we'll just
94:16 - wait and wait for that bad boy to speed
94:18 - up okay let's pick the high highest gas
94:21 - price possible speed it up speed it up
94:23 - speed it up speed it up
94:25 - and let's see what happens boom look at
94:28 - that right all the players got wiped
94:31 - because the lottery is successfully over
94:32 - the number for the lottery ID at the top
94:36 - incremented automatically the last
94:39 - winner was updated to whoever won and
94:42 - always remember whenever the owner jumps
94:45 - into the lottery I mean the chances of
94:47 - the owner winning are massive yeah the
94:50 - game is rigged so be careful letting the
94:53 - owner jump into the lottery
94:55 - all right with that said I hope that you
94:59 - enjoyed this so very much as much as I
95:02 - did make sure if you did Smash that like
95:05 - button subscribe to the channel if you
95:07 - haven't already and with that said I
95:09 - hope you enjoyed it put on your
95:10 - portfolio show it off to people and good
95:13 - luck in your web 3 Journey this is qazi
95:15 - I love your beautiful face and as always
95:17 - I'll see you in the next video