00:00 - sunny what's up guys how's it going oh
00:02 - man I have hidden you my friend - give
00:05 - me one second I'm gonna have to show you
00:08 - there we go
00:09 - how's it going guys my name is sunny I'm
00:11 - a react developer and I'm pumped for
00:13 - today Kazi yeah this is gonna be awesome
00:17 - guys we are hoping that we are perfectly
00:20 - live everywhere but this is going to be
00:23 - us building it to do app with react and
00:26 - firebase from scratch we're gonna be
00:28 - doing it live this is going to be
00:30 - completely beginner-friendly so if this
00:33 - is your first time learning about react
00:35 - or firebase or whatever you are fine if
00:37 - you're more intermediate or advanced and
00:39 - you want to learn firebase and react
00:41 - you're also in the right place we got 92
00:46 - concurrent viewers right now oh nice he
00:59 - did he send a messenger out nice awesome
01:02 - so we're up to 160 guys this is amazing
01:04 - once we get started we're just gonna
01:06 - straight-up keep going until it's
01:09 - completely built and live so what I will
01:11 - tell you to do is in the meantime we're
01:13 - just gonna wait a little bit to make
01:14 - sure everybody is here and live and then
01:17 - it's up to you whether you want to build
01:18 - this app live with us or you want to
01:21 - just sit here and watch it that's right
01:26 - nice okay so we are live on all
01:30 - platforms that is sick let's see if we
01:32 - can maybe we can show some of these
01:33 - people's the messages let's go yeah
01:37 - awesome guys how is everybody doing here
01:39 - oh nice Kiska is on here awesome
01:43 - abdullah what's up abdullah let's go
01:46 - awesome abdullah is here says humma-nah
01:49 - what's up dude nice yeah oh you can see
01:53 - my screen right sunny yeah I can see a
01:55 - screen I've got the comments up as ah so
01:57 - you can see nice nice cristobal says
02:00 - best teacher sick
02:01 - okay guys oh you guys can hear that you
02:06 - can't hear that a little click sound
02:08 - right
02:08 - i turned it off so i think we should be
02:10 - good to go
02:12 - awesome are you guys excited to get
02:15 - started on this project drop it in the
02:18 - comments below let us know damn dude
02:26 - everyone's floating in how many people
02:28 - we are now we are at 264 nice yeah
02:37 - so this is sick all right guys we're
02:42 - just gonna get started and jump into it
02:45 - what do you say son you want to get
02:46 - started dude I'm ready let's go okay
02:49 - let's do it so I'm gonna get off of go
02:54 - back into visual studio code yup live on
02:58 - all platforms also dope okay
03:03 - and here we go sharing the screen now
03:08 - and popping up the picture-in-picture
03:13 - give me one second sunny what I'm
03:15 - actually going to do is I'm just gonna
03:19 - make sure that we have we're properly
03:22 - nice and zoomed in awesome okay right
03:30 - there
03:39 - all right guys just want to make sure
03:44 - that this is as smooth of an experience
03:47 - for all of you guys as possible this is
03:49 - our first time doing a joint live event
03:53 - like this so just make us and if you
03:56 - guys enjoy this we'll keep these things
03:58 - coming so we know them to do
04:00 - yeah really our goal is to be able to do
04:02 - it like every day honestly like that's
04:04 - where we want to want exactly - Oh
04:07 - awesome
04:08 - all right Sonny let's go I think we're
04:10 - good just let me take away my text
04:15 - overlay actually I'm gonna just hide it
04:17 - for now yep - so you know is it still
04:24 - hiding some of the screen you see what
04:26 - I'm saying
04:28 - let me have a look so it's hiding a
04:31 - little is cropping a tiny bit of the
04:32 - window right now
04:33 - yeah that's what I'm trying to
04:35 - understand like why it's doing that
04:38 - because so if you go oh we're good
04:43 - actually we're good now we're good I
04:44 - think okay yeah we'll also zoom this in
04:47 - a little bit more so everybody it's
04:49 - easier for everybody to see is this good
04:54 - for you guys to see all right I think
05:01 - we're good to go let's let's just go
05:03 - let's do it
05:04 - so cause yes to everyone what we build
05:06 - in today we're gonna be building a to-do
05:09 - list app with react and firebase this is
05:12 - actually something I'm really excited
05:14 - about because you have been teaching a
05:16 - bunch of react recently and yeah well
05:20 - sorry I'm like super pumped about it
05:22 - because react is just so fast and also
05:24 - firebase excites me much more than
05:26 - freaking Amazon AWS cuz I hug Lee and so
05:31 - I really want to learn how to use fire
05:33 - store database on firebase and react so
05:36 - I'll ask you questions kind of along the
05:38 - way awesome let's do that so for those
05:41 - of you who don't know what react is it's
05:44 - pretty much it's a library and it just
05:46 - wraps the web development languages so
05:48 - web development is just HTML so yeah
05:50 - in JavaScript reactors like a library
05:53 - that Facebook built and it's widely used
05:56 - it's very popular and it's super
05:58 - powerful and you're gonna see that today
06:00 - and we're gonna combine that with
06:02 - something that Google bill which is
06:03 - called firebase and that's gonna allow
06:05 - us to have a complete fully fledged app
06:08 - that we're gonna deploy and every single
06:09 - one of you guys can hop on to you and
06:11 - play around with awesome that's right
06:20 - and guys if you're wondering how we're
06:22 - doing this right now this is called vs
06:23 - code live share so right now me and Kazi
06:25 - can both code in real-time on the same
06:28 - terminal I'm the same coding platform
06:30 - which is insane and this we're gonna
06:32 - give you guys a really cool experience
06:34 - and we can show you how to do this if we
06:36 - get enough time in the same localhost
06:41 - exactly yeah awesome all right so how
06:47 - did you in the beginning okay so let's
06:49 - get started so now where should we start
06:51 - what's the first best place to start
06:53 - should we set up our fire should we set
06:56 - up our firebase or should we just set up
06:59 - our front end first and then set up our
07:01 - firebase what would you recommend so the
07:04 - first thing that I usually do whenever
07:06 - we start a react project is pretty much
07:07 - use something called create react app
07:09 - and what that is it's basically Facebook
07:11 - built this starter package which all you
07:13 - need to do is run one command in the and
07:15 - the terminal and that's gonna start
07:17 - everything up for you and give you a
07:19 - starter template so the way we're gonna
07:21 - do that is if you just go into your
07:22 - terminal now yep yep and let's type in
07:27 - npx space create react up with dashes
07:32 - between them and which we call a app
07:36 - okay can we just put it here no so you
07:40 - actually just put the name here also
07:44 - here you just put to do that so we could
07:46 - call this one is all right so we're
07:51 - inside of react to do right now yeah and
07:54 - then we're good here if we just don't
07:56 - have a space so yeah reacted you up cool
08:00 - so like this or do you want me to still
08:04 - right the next thing yes I want you to
08:07 - put the name next to it like this so
08:09 - we'll have something like this so to do
08:10 - I got it that's what we typically do
08:13 - yeah yeah
08:13 - so guys MPX is something called node
08:16 - package executor and it's just gonna
08:18 - basically go and find this package the
08:21 - one that Facebook created called create
08:22 - reactor and then of course you just hit
08:25 - enter on the keyboard and what this is
08:28 - gonna do now is inside of this folder
08:30 - it's gonna sell everything that we need
08:33 - to get our first react project started
08:35 - which is a really really handy thing it
08:38 - installs all of the packages that we
08:39 - need to get started with it it actually
08:41 - gives us a really nice starting template
08:43 - and then from there we can start coding
08:46 - for many of you guys that don't know
08:48 - what react is or I've never used it
08:49 - before it was really really cool to go
08:52 - and look at something called component
08:54 - based design and that's something which
08:56 - we're gonna show you today and I think
08:58 - everyone's gonna enjoy that because it's
08:59 - really really powerful and it means that
09:01 - you only have to write a small amount of
09:03 - code to get a lot out of it yeah so why
09:06 - that's starting up Kazi let's go ahead
09:08 - and set up firebase cool I think I just
09:11 - zoomed in somehow again so I'm gonna
09:13 - have to zoom out and then zoom yep cool
09:18 - dope all right so I'm on firebase calm
09:22 - yep so what you want to do now is I
09:25 - think I can see the overlays on the
09:27 - screen right now okay yeah I'll just
09:30 - move those it says camera effects and
09:34 - things like that okay no we're good
09:36 - we're good
09:36 - yep so if you go to console yep so those
09:40 - are gonna show to us sunny like worried
09:43 - we can see it but like nobody can
09:45 - actually see that got you okay okay
09:48 - nice so now what we need to do guys all
09:50 - you need to sell firebase is completely
09:53 - free so don't stress about having to put
09:55 - your credit card details in and
09:56 - everything like that firebase is a free
09:58 - service you just need to have a gmail
09:59 - account come over to where we are right
10:02 - now and then you just want to click on
10:03 - add project okay dope so I'm gonna click
10:07 - this right here yep and we're gonna
10:11 - throw in an aim for our project all
10:13 - right what do you want to call it we're
10:15 - gonna call it to do
10:16 - ah CP yeah perfect
10:21 - oh yeah and enable Google Analytics for
10:25 - this project uh we can do yeah let's
10:28 - leave on okay nice and you just want to
10:32 - select your default account there we go
10:34 - okay and just like that it's gonna start
10:37 - creating the project and guys firebase
10:39 - is not just like a back-end so it's not
10:42 - just something like a database it's like
10:44 - a suite of tools so not only can you
10:46 - have a database where you can host your
10:48 - information your user information
10:50 - it handles things like authentication
10:51 - you can deploy your website and it's
10:53 - super easy to do that and on top of that
10:56 - you can do some crazy stuff like machine
10:58 - learning it's really really insane what
11:00 - you can do here so let's just click on
11:02 - continue okay also and now I'm stuck
11:10 - with Python it's okay because even if
11:13 - you're using Python and you learn what
11:15 - we're about to do today you can do the
11:16 - same exact setup well actually is that's
11:20 - not true right you told me yesterday
11:21 - we're talking you said you cannot use
11:23 - firebase with Python right I think you
11:26 - can actually use firebase with Python
11:28 - yeah you can if you've got Python app so
11:31 - as I say you've got a Python app which
11:33 - is a back-end service yeah you can
11:35 - definitely connect to firebase from that
11:38 - yep oh okay can alright okay yes oh yeah
11:41 - so if you guys are using Python you
11:43 - learn what we're doing today you can
11:45 - actually combine firebase and maybe even
11:47 - react with your Python apps and like
11:50 - just make them like the front-end
11:52 - amazing and even the backend amazing
11:55 - exactly that Yuri says I I enrolled into
11:58 - pwj good vibes nice oh so nice okay so
12:03 - what's next
12:04 - right so next what we want to do is go
12:07 - over to that little cog icon on the top
12:09 - left so I'll sign here icon there we go
12:12 - and then project settings uh-huh and all
12:16 - we need here is that we need like a key
12:17 - right which is gonna tell our app how to
12:19 - connect to firebase so right now you see
12:22 - where it says at the bomb it says there
12:23 - are no apps in your project yep you
12:25 - wanna click on the one which has a
12:27 - symbol for web dev so it's the third one
12:29 - on the right
12:30 - this one not you that's right yep and
12:33 - then you want to give it a name here
12:36 - this name doesn't matter too much you
12:38 - can be anything you want and should I do
12:41 - also set up firebase hosting or just do
12:43 - register yeah yeah that's set up
12:45 - firebase hosting and that's really
12:47 - important because that's gonna allow us
12:48 - to actually be able to deploy so that
12:52 - everyone can use this once we're done
12:53 - okay and so then click alright let's
12:55 - just wrap great yeah
12:58 - and then that will set that up for us
13:02 - and the next one so this one we can
13:04 - actually ignore so this is how you
13:06 - include all of the firebase code into
13:08 - your project but because we're using
13:10 - react react uses something called node
13:12 - modules so they're basically like
13:14 - prepackaged bundles of code and we
13:17 - install them with something called NPM
13:19 - so we don't actually need to do this
13:20 - step and I'll show you how we do that
13:22 - inside of our code afterwards so we can
13:24 - click Next on this step got it so this
13:28 - one's important right now so here what
13:30 - you want to do is you want to click the
13:31 - copy you want to open up your terminal
13:34 - so you can either do this in vs code or
13:36 - you can do it in a separate terminal and
13:37 - what you're gonna do is just paste that
13:39 - come on and install that and what this
13:42 - says is whenever you have NPM install
13:45 - with that little dash G it means install
13:48 - this package across your entire computer
13:50 - so it doesn't matter if we're inside of
13:51 - this project it doesn't matter if we're
13:53 - inside of a different project we're
13:55 - always gonna have access to firebase
13:57 - tools right now now we need firebase
13:59 - tools okay so in this case you need to
14:01 - write sudo yeah so you need to have sudo
14:05 - in the beginning because when you do
14:06 - things like this you need admin
14:08 - privileges yeah yeah and some people are
14:10 - asking so mark johnson has how long is
14:13 - the PWG course and is this something I
14:15 - can do at my own pace and time mark yes
14:18 - so pwj course you can definitely do it
14:21 - at your own pace and time it's now we
14:24 - have turned it into a membership so you
14:27 - know as long as you remember you can
14:28 - just go at it at your own pace and AJ
14:32 - asked is it react or react native sunny
14:35 - so that's a really good question
14:37 - it's react what we're doing now but once
14:39 - you learn this you can use react native
14:41 - so just to tell you guys what the two
14:43 - are we
14:43 - practice for when you're doing web
14:45 - development so any website is going to
14:47 - be using react if you're using the
14:48 - library but if you want to then deploy
14:51 - say for example to iOS or Android apps
14:53 - then you would use something called
14:54 - react native but right now we're just
14:56 - doing pure react man this thing keeps
14:59 - doing this weird zoom thing like it
15:02 - keeps messing up to zoom and so maybe oh
15:06 - yeah I just wanted to show entire screen
15:08 - and then zoom in and I think then this
15:11 - should be good to go now wherever I go
15:13 - it should be good ok awesome great yeah
15:16 - nice so we install this what's going on
15:19 - yeah so we installed that and then next
15:21 - we need to actually log into our
15:22 - firebase hosting so back in this go back
15:25 - to the command line this to firebase
15:26 - login uh-huh and then let's type in Y so
15:31 - that Wi-Fi yes and then this will pop up
15:33 - a little window just need to sign into
15:35 - your account so they actually take all
15:38 - the headache out of it so this is
15:40 - literally as simple as it gets to set
15:41 - things up and then you go there you go
15:43 - so we've logged into our account we will
15:46 - follow will do the rest of the steps
15:48 - afterwards because this is gonna be
15:50 - deploying the website mm-hmm
15:52 - yes we can we can carry on with this
15:54 - once we've actually got the site built
15:56 - so this could continue to console great
16:00 - so here's the magic so you see where it
16:03 - says firebase SDK snippet what we want
16:05 - to click on config yeah and this object
16:11 - is basically the magic which connects
16:14 - our react up to our firebase back-end so
16:17 - this is gonna be crucial right now for
16:19 - this config and what we want to do now
16:22 - is now that we have access to this we
16:24 - can actually go back to the app and then
16:25 - we can implement this afterwards but we
16:28 - should have got everything set up so
16:29 - let's go over to our folders right now
16:32 - yeah yeah and in the command line what
16:36 - we want to do is because we ran create
16:39 - reactor we just wonder if we want to go
16:41 - into the folder that it created the
16:42 - project in so if we type in LS in the
16:45 - terminal we should be able to see
16:46 - there's an app so you can see it says
16:48 - to-do app so if you just want to go
16:50 - inside of to do up yep nice and then
16:54 - what you want to do is when guys
16:56 - whenever you set up
16:57 - got a project it's so easy to get it
16:59 - started all you need to do is write MPM
17:01 - stop and it will spin the app up it will
17:04 - get everything running so now let's
17:06 - start off let's start the app by running
17:07 - NPM stop nice we got three hundred
17:10 - forty-five people live right now awesome
17:14 - insane nice so yeah a few people said
17:19 - please zoom out of there
17:20 - someone said please zoom in a bit I
17:22 - think what we do zoom in on the code
17:26 - because I think that it might be a
17:27 - little small but we can double check
17:29 - that yeah there you go so this is the
17:32 - react template that we get started off
17:34 - with so if you guys have made it to this
17:35 - point awesome okay and you can watch
17:43 - this later it'll be recorded we'll leave
17:45 - it up so yeah you can watch it live or
17:47 - record it but I mean we would want you
17:49 - to watch it live and the reason is well
17:51 - you can actually like engage and ask
17:53 - questions and we can answer those
17:54 - questions that's a huge plus but if you
17:56 - have to go to sleep or whatever and you
17:57 - have to wake up tomorrow and do it
17:59 - that's fine too yeah exactly so so this
18:03 - will be up for you guys to go at your
18:04 - own pace with and you can keep pausing
18:06 - the video and carry on so now what we're
18:09 - gonna do is we're gonna actually look at
18:10 - the code the files so if you go to the
18:12 - left where it says open editor so you
18:16 - see the top left yep you wanna click on
18:19 - drop down actually this click on react
18:22 - five is to do that cool so and then
18:25 - there's open up to do up so now this is
18:27 - our sort of folder structure so we can
18:29 - delete index or Jase outside because
18:31 - that was something we made before yeah
18:33 - yeah so this is gonna be all the code so
18:36 - this just set some base rules so that
18:38 - nobody breaks the project and just knows
18:40 - where to go from here so never touch
18:43 - node modules is the safe way of thinking
18:45 - of it the only way we're going to touch
18:46 - that is if we do commands in the
18:48 - terminal but right now the one that
18:50 - we're interested in is all of the things
18:52 - we're interested is inside of source
18:54 - ok so let's click into SRC and what I
18:58 - like to do is we just saw they created
19:01 - that app right with the spinning react
19:02 - logo I like to clean things up so it
19:04 - becomes a fresh template and what we do
19:07 - here is is Esteli the test js4 so
19:11 - gonna be running here in cats right now
19:13 - also let's delete that let's delete the
19:16 - set up test JS file uh-huh yep
19:21 - let's delete the logo door SVG which is
19:24 - that little really and I love that logo
19:28 - okay we can keep it if you want and then
19:31 - this go to your app Doge is okay not
19:34 - deleting that one right no no and then
19:38 - what you want to do now is because we've
19:39 - deleted the app we need to basically
19:41 - what I do is I get rid of everything
19:43 - inside of the div so everything inside
19:46 - of the outside div let's just get rid of
19:48 - that yeah and then I'll put a h1 tag and
19:52 - I'll just say hello world so well and
20:00 - then you see on line two we need to get
20:02 - rid of that because we deleted the logo
20:03 - file awesome all right what online to
20:11 - now you see in the terminal it says no
20:13 - such file logo to SVG so we have to get
20:16 - rid of that yeah and there we go so
20:18 - right now we have a warning but let's
20:20 - ignore that for now it's because we're
20:21 - using an emoji but there we go that's
20:23 - our starting point for the app I usually
20:26 - clear the CSS files as well but we can
20:28 - do that afterwards because why not i
20:30 - keeps everything centered which is
20:31 - easier to see okay dope so let's get
20:35 - started on actually building the to do
20:37 - up mm-hmm right yep one sec let's go to
20:42 - app yes okay so what we need is a few
20:47 - things and what I like to do here is I
20:49 - just like to sort of frame the the app
20:51 - first so we have a rough outline of what
20:53 - the app looks like and what its gonna do
20:56 - and then we're basically gonna power up
20:58 - with firebase and make it super powerful
21:00 - so the first thing we're gonna do is add
21:03 - an input field so we want to have an
21:05 - input field so let's do this
21:07 - an input field is self-closing so let's
21:10 - do it like this so you have an input
21:12 - field and the second thing we're gonna
21:13 - have is a button and that button is
21:15 - gonna be simple it's just gonna say
21:17 - something like add to do alright and now
21:21 - if we check our app says have a look at
21:23 - the app
21:25 - we can now see if we refresh refresh
21:29 - come up no buttons on here no okay let's
21:34 - go AB dot C AB dot CSS maybe you didn't
21:38 - save now it's here oh there we go nice
21:41 - there we go yes so now we have like it's
21:47 - broken
21:49 - so now what we want to do is we want to
21:53 - basically make this so we've got the the
21:55 - UI a very basic level done all right
21:59 - this C Kazi do you want to make this
22:01 - look really pretty with material UI
22:02 - first you get a function anyway let me
22:06 - actually think let's add basic
22:09 - functionality to it because that's what
22:11 - I like to do sometimes I'll add it like
22:13 - right now I'm just telling you what my
22:14 - gut feels and at this exact moment I
22:16 - would be just looking to add in like
22:18 - literally if I can just create a UL or
22:20 - you know those li like a regular bullet
22:23 - point list to show up then I would want
22:25 - to yeah over the material UI okay
22:29 - awesome
22:29 - yeah let's start with that so then the
22:31 - first thing we need to do is we need to
22:32 - understand so what we kind of want to do
22:35 - is let's just do another baseline for
22:36 - the app so we're gonna have a let's say
22:39 - a unordered list and then inside that
22:42 - unordered list we're gonna have a bunch
22:44 - of list elements right yeah so this one
22:46 - could be like take dogs for a walk and
22:50 - then we can have another one which is
22:51 - gonna be like take the rubbish out take
22:55 - yeah nice and then if we save that and
22:59 - run that so yeah you have to save it on
23:02 - your machine
23:02 - otherwise it won't take effect mm-hmm
23:04 - okay save got it yeah save and let's
23:08 - have a look hold on if I do this yep yep
23:15 - I can a you oh that is interesting cuz
23:18 - I'm I'm on my Yeti so I'm muting it oh
23:22 - really yeah the month so the mic is
23:26 - muted right now so probably you can hear
23:28 - me from Skype because it's probably
23:30 - picking up my computer sound but let you
23:33 - keep probably cannot hear me on the live
23:35 - stream actually so let me actually just
23:36 - take a look
23:38 - and let me pop open the audio no not
23:41 - that one
23:42 - that one time No
23:54 - yeah so Cena Sherrod says cause your
23:57 - voice is so low so I think it is yeah
23:59 - you're all right yeah it's gone a bit
24:01 - low right now
24:03 - yep this is a nice comment that amana's
24:05 - put let's see if we can add it says the
24:08 - real power to react yes is we can create
24:11 - a full stack application with just oh I
24:13 - can actually move his comment up oh this
24:16 - would just react in firebase without
24:18 - anything else like the back end and blah
24:20 - blah blah that's right
24:23 - that's awesome good guys yep I was just
24:27 - gonna say it is a sunny is that because
24:29 - with with firebase you just speak
24:33 - through API endpoints instead of like
24:36 - you know either having a ORM or like
24:38 - sequel and stuff like that so firebase
24:42 - think of it this way so like they took
24:44 - all of the complexity so where we were
24:47 - to where we traditionally would need an
24:49 - API to talk from our front end to our
24:51 - back end yeah they took all of that and
24:53 - they basically just made it so that all
24:56 - you need to do now is install a package
24:58 - a node module package called firebase
25:00 - into your project yeah and then you just
25:03 - import that so you say import firebase
25:05 - from firebase and the top and then you
25:07 - can actually just like communicate from
25:09 - the front end directly to the back end
25:11 - through your front end code which
25:13 - usually wasn't the case before you would
25:15 - have to do a request to the backend to
25:17 - push they are in I'd have to do a
25:19 - request for them refetch but they've
25:20 - taken all of that complexity out and on
25:22 - top of that they made it real time so
25:24 - you get real-time information which is
25:26 - insane actually I just got a great idea
25:28 - so what I'm gonna do is as you are
25:33 - speaking I'm going to write out some of
25:37 - the stuff you're saying and then we can
25:39 - actually just publish it as an article
25:41 - afterwards nice yes do it the heart
25:46 - state could use that with 5/8 awesome so
25:52 - let's see everyone says hey Kazi hey
25:54 - Sonny Sam what's up Sam now the audio is
25:57 - good can you set the syntax to
25:59 - JavaScript react for Jessa syntax on
26:00 - whole completion yes you can
26:03 - Visual Studio code is actually really
26:04 - clever at picking up what language
26:06 - you're doing so usually when you
26:08 - create react up everything gets out for
26:10 - you so you don't have to worry about all
26:12 - of that okay nice dope so this is where
26:15 - we'll take notes as we go along so
26:17 - everybody can visually see the notes
26:19 - with us I think this just makes it very
26:21 - easy for everybody this is also yeah yep
26:26 - okay nice my audio yes so now I think
26:29 - but okay go ahead go ahead
26:31 - yeah so why does it say is in that list
26:33 - it would be really handy underneath of
26:35 - react to just do a little bullet point
26:37 - saying we used create reactor because
26:39 - that's the fundamental starting point to
26:41 - get the app running okay yeah so we'll
26:46 - add that into the list afterwards okay
26:48 - so nice let's get started so what we
26:50 - want now is we want it to be basically
26:53 - when we type in the input field and then
26:55 - we click the add to do button we want it
26:57 - to push into that list right yeah and
27:00 - the way we do that in react is react has
27:04 - two fundamentals that we just need to
27:06 - learn about so one is called state and
27:09 - the other one is called props will touch
27:11 - on props in a second but state is really
27:13 - where the magic kind of happens and what
27:17 - we could when we say state what we can
27:18 - think about is pretty much like a
27:20 - short-term memory so if we refresh the
27:23 - page the state is cleared so it's non
27:25 - persistent which means that if we were
27:26 - gonna click refresh the state gets
27:27 - cleared so you need to remember that
27:28 - that's one of the important things
27:30 - somebody just said react hooks yes
27:33 - reactants is this new implementation in
27:36 - react where we're they're basically
27:38 - pushing for this very like nice concise
27:40 - code so we will be using reactants in
27:42 - this so the state gets cleared off to
27:44 - refresh props will touch on afterwards
27:47 - let's go bouncing a bit let's jump back
27:52 - to the code uh-huh and what we're gonna
27:56 - do now is we're gonna set up a piece of
27:59 - state and the way we do that is you can
28:02 - see guys so right now imagine in react
28:05 - everything is component based right so a
28:08 - quick run-through of what is actually
28:10 - happening here is the app component
28:12 - which is basically referring to the
28:14 - entire component that you're seeing on
28:15 - the page it returns some C HTML but this
28:19 - is special HTML guys this is called JSX
28:22 - which means that if we want to actually
28:24 - run some JavaScript here we can do that
28:26 - by simply having these curly braces not
28:29 - and in these cutting prices you can
28:31 - actually run some JavaScript which is
28:32 - really powerful
28:33 - okay I might just show us like 1+1 like
28:37 - show us the result of that with javis
28:38 - like adding it in there okay so let's do
28:41 - Const let's do some and it's just do
28:44 - equal 1 plus 1 aha and they say hello
28:47 - ever programmers and then we want to pop
28:49 - out the Sun yep somehow we can also just
28:51 - do some math in there right we could
28:52 - even type in 1+1 right there yep like
28:56 - you do that okay let's do that
28:57 - cool and so let's save that and this
28:59 - right let's check it uh-huh so there we
29:03 - go hi beautiful
29:06 - so we can actually run dynamic
29:08 - JavaScript with JSX which is really
29:10 - powerful and right now what we're gonna
29:12 - do is we are going to create some yep so
29:17 - run dynamic JavaScript with JSX and JSX
29:23 - whenever you see that just think of it
29:25 - as like javascript and the cross is like
29:27 - a hybrid with HTML so you've got this
29:29 - wicked little hybrid right cool nice and
29:35 - what we're gonna do now is we're gonna
29:37 - basically set up some States so remember
29:38 - state is like short-term memory and its
29:41 - component specific so right now when we
29:43 - add state to the app component it's
29:45 - gonna be short-term memory for the app
29:47 - component so what we're gonna do now is
29:49 - we're gonna set that up and here is the
29:52 - syntax to set up a piece of state so we
29:55 - write Const which is basically setting
29:57 - up a variable and the syntax for how we
29:59 - do it is we're gonna say let's call it
30:01 - to deuce so here we have our list of two
30:04 - dues which is going to be an array and
30:06 - whenever we use a used state hook it's
30:10 - called we need to basically have our to
30:12 - do variable so the traduz variable and
30:14 - then we need something that we can cool
30:17 - that isn't gonna allow us to change that
30:20 - variable and the reason why we need this
30:21 - is because react is very clever in how
30:23 - it rear Enders yeah so we call this
30:25 - usually the standard of doing this is
30:28 - usually have set and then you have to do
30:31 - so it's set with your variable name
30:33 - camel cased and then you say use state
30:36 - like this and what we're gonna do is we
30:39 - need to basically say you stay and then
30:40 - we basically have the initial value
30:42 - which is an empty array so our two dues
30:45 - is gonna start off with an empty array
30:47 - here and because we're using this use
30:51 - state hook so this is basically
30:53 - something that react gives us which is
30:55 - basically that one piece of that one
30:57 - little function called used a is gonna
30:59 - set up that short-term memory for us so
31:01 - to actually bring that into our code we
31:04 - just need to go to the top here and we
31:05 - just need to import it so like that
31:09 - so now we've actually set up some
31:11 - short-term memory for the app which is
31:13 - literally that simple and what we can do
31:15 - now is we can actually test this so we
31:18 - can go over to our list so element one
31:21 - second one second hold on so here we
31:23 - added this here right the two dues yeah
31:26 - okay and then so only few things that we
31:28 - have added is you state and then this
31:30 - over here yeah exactly just two things
31:33 - that we've added to set up the
31:35 - short-term memory and so two dues
31:37 - variable is like is an array yep exactly
31:41 - cool and this will basically add things
31:45 - to it kind of like live or but in the
31:47 - short-term memory because yeah this
31:51 - would be like a little record of in the
31:53 - short-term memory of what the two dues
31:55 - are got it okay cool nice and what we're
31:59 - gonna do now is where previously we had
32:02 - these things hard-coded like take dogs
32:04 - for a walk take the rubbish out now what
32:06 - we're gonna do is we're gonna basically
32:08 - cut this and we're gonna put it inside
32:10 - of our array as a string so that's one
32:13 - of the tasks and this one we're gonna
32:16 - have here nice as a second thoughts I
32:18 - see what you're doing okay so like it
32:21 - current yeah right now to do's basically
32:24 - starts with do I have my app screen
32:27 - brush on this computer I don't okay but
32:30 - like this variable to do's is an array
32:33 - that is starts off with this right dog
32:35 - take dogs for a walk take the rubbish
32:37 - out or whatever right exactly
32:39 - god yeah and then what we can do is
32:41 - using the set to do this variable like
32:43 - we can keep appending things to this
32:45 - array like but kind of on the fly
32:48 - exactly not even
32:50 - regretfully want to change to do is we
32:52 - have to use that to do this diet so yeah
32:54 - we can add things to the array without
32:55 - hitting refresh that is sick because
32:57 - then that allows me to like do
32:59 - everything super fast right instead of
33:01 - having to like send it to my back-end
33:03 - and then hit refresh and all of that
33:05 - exactly
33:07 - I remember it's short term so if we do
33:09 - append something as soon as we hit
33:11 - refresh it's gone this state is gonna go
33:13 - back exactly like the front end but it's
33:17 - not as soon as you hit refresh that
33:19 - array is gonna be gone forever got it so
33:21 - during that time but what I would need
33:23 - to do is send it back to my database in
33:26 - that time yes got exactly that cool yeah
33:29 - so then the next time oh yeah keep going
33:32 - keep going
33:33 - so the next step now is basically we we
33:36 - have this list right we have this list
33:38 - of to do is we just want to basically
33:39 - run a small little loop right which is
33:43 - gonna go through the list of items in
33:45 - the inside of the to do array and its
33:47 - gonna populate this list just like we
33:49 - saw it before so right now what we're
33:51 - gonna do is we're gonna use that JSX
33:53 - power that we talked about before so
33:55 - these curly braces and we're gonna say
33:57 - to do's and then there's a very powerful
33:59 - es6 function like a looping function
34:03 - called map and map basically goes
34:06 - through that array and it basically goes
34:08 - through the array gives you the element
34:10 - of the first element of the array so in
34:12 - this case take dogs for a walk and then
34:14 - you can do some stuff with that right
34:15 - and you can return like a little element
34:17 - so in our case we're gonna return the
34:18 - first last list item so this one and
34:21 - then it's gonna go through it again get
34:23 - the second one so take the rubbish out
34:24 - and then we can return the second this
34:26 - time so how do we do that we say to do
34:28 - is map and then we do something here
34:32 - called an arrow function so the way we
34:35 - write an arrow function is when we go
34:37 - through the to do store to do surae we
34:40 - want to get every single to do so
34:42 - singular so bear in mind that this is
34:44 - the array and this is each item in the
34:47 - array so that's why we have to do and
34:48 - then we have an arrow and then we have a
34:52 - normal parantheses so we have this and
34:54 - this means that we're gonna return some
34:56 - HTML and what we're gonna do here is
34:59 - we're actually gonna say list so we're
35:01 - gonna return a list I am
35:03 - and then inside of here we're gonna have
35:05 - JSX and we're gonna just put the to do
35:07 - nice so now what what this little piece
35:10 - of code is doing is it's going through
35:12 - the array so the the to do array it gets
35:16 - the first one so take dogs for a walk
35:18 - yeah and then it pops it in here and
35:19 - then it pushes this element out so then
35:21 - we would at this point have the first
35:23 - element and then it would loop through
35:24 - get the second one pop out a list
35:26 - element and get the second one got it so
35:29 - let's save that do me a favor real quick
35:32 - yo can you speak to them just about the
35:35 - overall what we're doing and I'm gonna
35:38 - download app real quickly so then I can
35:41 - actually annotate over the screen out so
35:43 - then they can get visual aid as they're
35:45 - watching okay
35:46 - yeah so for those of you guys who are
35:51 - new right now or you just want to go
35:53 - over a fresher own what we're doing we
35:55 - are using firebase and react so react is
35:58 - a front-end library and we're using it's
36:01 - built by Facebook it basically think of
36:03 - it this way web development consists of
36:05 - three languages HTML CSS and JavaScript
36:08 - and what we're doing with that is we are
36:11 - essentially just making it so that we
36:15 - are wrapping that inside of a library
36:17 - could react and react is gonna allow us
36:20 - to build a really really powerful to-do
36:22 - list app and not just a to-do list up
36:24 - guys Instagram tinder uber all have
36:27 - amazing applications Facebook the entire
36:30 - Facebook app is being rewritten with
36:31 - react right now all of that is done in
36:35 - react so it's a very very powerful
36:37 - library and what we're gonna do once we
36:40 - have that once we have that working is
36:42 - connect that app to firebase which is a
36:46 - service provided by Google and it allows
36:49 - us to do a bunch of powerful things like
36:51 - host our applications our react app
36:54 - online it allows us to have a database
36:56 - it allows us to have authentication so
36:59 - you can log in you can do a bunch of
37:00 - things like that and it's all real time
37:02 - which and the real time part is the
37:04 - really nice part when were using react
37:07 - and when we're using firebase so imagine
37:09 - we have the two dudes in our app and
37:11 - let's say some of the users so once we
37:14 - deploy this you guys can actually try us
37:16 - out yourself
37:17 - but when we deploy this live we are
37:19 - going to actually have it so that
37:21 - whenever somebody adds it to do it's
37:24 - gonna pop in onto your screen and
37:26 - there's no more additional code that you
37:27 - need to do in order to get that working
37:29 - so let's go through some of the comments
37:32 - and let's see what everyone's saying so
37:33 - we've got let's have a look what is
37:35 - react hooks so react hooks is something
37:39 - which is provided by so react hooks are
37:41 - relatively new guys and what they do is
37:44 - they're very basically small snippets of
37:46 - code which basically look like the
37:49 - honestly honestly don't look like you
37:50 - don't have to write much code for a
37:52 - reactor hook to work so one of the ones
37:53 - that we just used was something could
37:55 - use state and they basically behind the
37:58 - scenes is gonna set up the state it's
38:00 - gonna do a bunch of stuff for us but
38:02 - before we had react hooks we had to use
38:04 - like class-based components and a lot
38:06 - more complicated logic but then the guys
38:08 - over at Facebook said hang on this is
38:10 - too complicated this make it simple and
38:12 - they came up with react hooks and now
38:15 - react hooks on my best friend I love
38:17 - react Turk's you can even write your own
38:19 - react turks and it becomes quite
38:21 - powerful so you see you can need okay so
38:24 - our cash ji says you need to use a
38:27 - Django rest framework a create an API
38:29 - and then use react to communicate
38:30 - between the API so this is something
38:33 - which I get a lot in the coaching cause
38:34 - a lot of people so just to clear this up
38:38 - react is a front-end react when we talk
38:42 - about react we're talking about the
38:43 - front end okay
38:45 - Django when we talk about Django we're
38:47 - talking about our back-end so like a
38:48 - sort of service on the backend right now
38:52 - what we tend to do previously is have a
38:55 - react front end and a Django back-end or
38:58 - you can have a node.js JavaScript
39:00 - back-end and then you would have an API
39:02 - which allows you to talk between them
39:03 - right but with firebase we actually
39:06 - don't even need the backend we kind of
39:08 - we just have this front-end and then we
39:10 - basically connect that to firebase and
39:12 - they take away all of the headache for
39:14 - us so that's what they wanted to do by
39:17 - introducing firebase they wanted it to
39:19 - be a super easy and fast solution to
39:21 - getting around a headache there we're
39:24 - good to go now I can easily annotate on
39:27 - the scroll awesome so nice
39:30 - nice so what we just did now is we added
39:34 - our first piece of state code that
39:35 - reduce yep at the top and then we map
39:39 - through them to get each of the to do so
39:41 - take dogs out for a walk that's like the
39:43 - rubbish out it's gonna go through that
39:44 - so now if we save this and we load it we
39:47 - should be able to see what we previously
39:49 - saw before nice and just to prove that
39:54 - this is actually true Kazi let's go
39:56 - ahead and add another string inside of
39:58 - our state okay I'll add it here
40:04 - Kazi wants to live stream today awesome
40:12 - oh don't say look at that nice okay so
40:17 - now what yeah so now we're looping is we
40:20 - want to basically showing it yeah goes
40:23 - up I just want to emphasize guys that
40:25 - like it's we're not hard coding anything
40:27 - it's like actually looping through our
40:29 - array and then writing each one of these
40:32 - out from that like loop that we wrote
40:35 - exactly yeah cool nice so now what we
40:41 - want to do is have it so that he doesn't
40:43 - have to hard code it every time but when
40:45 - we type in the input field and click the
40:46 - button or we click the enter key we want
40:49 - it to basically push and append into
40:51 - that array right yeah so the first step
40:54 - in react is again we need some kind of
40:57 - short memory short-term memory to
40:59 - remember what we actually type into the
41:00 - input so if we just scroll up a little
41:02 - bit and we go to line 6 and now what
41:06 - we're gonna do is we're gonna add
41:07 - another piece of short-term memory and
41:09 - this is gonna the the pure purpose of
41:11 - this piece of State is going to be to
41:13 - remember what they type in the input so
41:15 - here I'm gonna say input and I'm gonna
41:17 - say set input which is the convention
41:19 - that we use when we're writing a hook
41:20 - and then we say you state so this is
41:23 - exactly the same what we did for the for
41:25 - the first scenario guys with the to Do's
41:27 - but this time we're initializing input
41:30 - with an empty string because when you
41:31 - first land on the page it should be
41:33 - empty right yeah so we do that and now
41:37 - we have my favorite so just to be clear
41:39 - when you say input you're talking about
41:41 - this over here so this
41:43 - should be empty exactly cool because
41:45 - this is not working right if I hit add
41:47 - to do that doesn't do anything yet
41:49 - exactly it doesn't do anything and we
41:51 - want it to basically push into that list
41:53 - and then rerender everything dynamically
41:55 - so this is the bit where everyone like
41:58 - if your rewatching this afterwards just
42:00 - pause it make sure you get this bit
42:02 - correct because this is where everyone
42:03 - tends to go a little bit wrong but what
42:05 - we need to do now is we need to connect
42:06 - the input to our piece of state right
42:11 - and es6 javascript allows us to do this
42:14 - really really nicely and the way we do
42:17 - that is we say this input should have a
42:19 - value of our input state so we're saying
42:23 - right at this point that we're mapping
42:26 - our input in the state to this input
42:30 - field right now if you save this Kazi
42:33 - and you go back and try and type in what
42:36 - happens so let me save and then go here
42:39 - and type right I can't type so nothing's
42:44 - happened I literally nothing's happening
42:45 - because what would you yeah so nothing's
42:48 - happening here so like even if you type
42:49 - nothing's gonna get pushed in there so
42:52 - the reason why that's actually happening
42:53 - now if we go back to the code yeah
42:56 - that's because we're setting the value
42:58 - here to be the value in our state which
43:02 - is at this point we're saying is always
43:04 - blank so that's why no matter what you
43:06 - type it will stay blank got it okay oh
43:08 - it keeps making it blank okay yeah so
43:12 - that's the sort of that's step one that
43:14 - we need to do and the second step is
43:16 - every time you type what I need to do is
43:19 - update the state to tell react hang on
43:22 - you just changed the input so we need to
43:24 - keep track of that got it right yeah so
43:26 - here what we do we go to our input and
43:28 - we do we use something called on change
43:31 - and unchanged is a function which is
43:35 - part of an input and basically allows us
43:37 - to basically capture the event that gets
43:40 - fired off every time you press a key
43:41 - inside of the input alright and this
43:45 - gives us something called an event so
43:47 - here we could just say event so every
43:49 - time you press a key on the keyboard it
43:52 - fires off this thing called an event and
43:54 - what we do is we use something in ES
43:56 - scored an arrow function and we say when
43:58 - that event gets fired off yeah set the
44:01 - input to the event and then basically
44:07 - this bit doesn't make sense to a lot of
44:08 - people but it will make sense once we
44:09 - explain it so it's we're basically
44:11 - saying get the event that gets fired off
44:14 - yeah get the target so the target means
44:17 - oh we've got some web stuff there so
44:19 - event and then get the target which is
44:23 - the input field that we're typing in and
44:26 - then we're saying get the value of that
44:28 - okay so basically whatever I type is
44:31 - gonna get stored in this variable input
44:33 - and then that's and basically you're
44:36 - saying set that input to whatever the
44:38 - whatever I'm typing at that time exactly
44:42 - so every single time you type it's gonna
44:44 - get updated here and because we're
44:46 - updating the value it gets represented
44:49 - here because it reacts quite clever
44:51 - right when we use this set input it
44:53 - knows that we just changed the input so
44:55 - it knows to re-render this impact eyes
44:57 - this is what's amazing about react yeah
44:59 - so before if I had to write the word
45:01 - sunny what would happen is like I would
45:03 - write s but then it would delete it and
45:04 - then I would write O and it would kind
45:07 - of delete that yep but right now what
45:10 - we're doing is like if I'm actually
45:11 - writing this it will make sure to leave
45:13 - it there like all of it at the same time
45:15 - okay exactly so now if we save this and
45:19 - we try it
45:19 - uh-huh so let's save it let's go back
45:22 - and hey okay cool so now it's actually
45:26 - keeping it is yep yep so now it looks
45:30 - like similar to what we done before but
45:32 - instead we actually have that input in
45:34 - racial term memory now so we can use it
45:36 - like literally this variable is getting
45:39 - it like it's creating a variable you
45:41 - could we see it could be console.log it
45:43 - around here yeah we can yeah so if you
45:46 - do a console.log okay so put a little
45:50 - gun emoji right here nice I like to add
45:55 - funny little emojis next to my print
45:57 - statements it just visually pops it out
45:59 - so do i that's awesome yeah and then
46:02 - you're gonna click the inspect ok let's
46:04 - go to and guys you should really get
46:07 - used to using the inspector because just
46:09 - for
46:10 - bugging just for everything it's gonna
46:12 - be your best friend so console.log
46:14 - everything we always console.log to back
46:18 - to the regular view so you click on if
46:22 - you go close out of the cellphone I see
46:26 - there's like crazy devices that are here
46:29 - yeah you can actually set like a bunch
46:32 - of the phone so I think on the right the
46:34 - comments and reactions are covering it
46:35 - right now you're gonna click that little
46:37 - cross uh-huh yep and then you wanna
46:42 - click on you see on the bottom left
46:43 - right now you've got a blue icon that's
46:45 - highlighted so next two elements yeah
46:48 - you click that and that gets it out of
46:51 - the responsive view got it perfect yeah
46:56 - mm-hmm and there we go so now you guys
47:00 - see that little like emoji right here
47:02 - and now if I right nice there we go so
47:06 - now I can say that we clever programmer
47:10 - damn that is so fast it's crazy right
47:16 - and guys notice how there's no
47:18 - refreshing on the page yeah yeah so it's
47:27 - awesome
47:28 - okay great so now isolating and what we
47:33 - want to do now is basically we have the
47:35 - input value so we just want it so that
47:39 - whenever we click the button to add it
47:41 - to do it's gonna push it into the field
47:43 - right so what I tend to do here is you
47:46 - can either do it in line where we have
47:48 - the button here or I like to make a
47:50 - little function just called Const and we
47:53 - can just say in this case it's just call
47:55 - it add to do this is gonna be the add to
47:57 - do function and this function so we're
48:00 - gonna use es6 arrow syntax for writing
48:02 - functions here and the way we do that is
48:05 - we just write so it takes an event so
48:07 - most like anything with like an input or
48:10 - a button whenever we have like an
48:12 - unchanged or on click
48:13 - they typically fire off events yep so
48:16 - this one takes an event and this is the
48:19 - code little snippet of code that's gonna
48:20 - get fired off so this will fire
48:24 - when we click the button we click the
48:27 - bun there we go
48:28 - so now what we want to do is we need to
48:30 - basically say we need to connect that to
48:33 - our function so we say on click oops on
48:35 - click and we're gonna say add so you add
48:39 - to do there we go
48:41 - I yeah and now just to test it just like
48:44 - Ozzy said before it's always good
48:45 - practice to do console.log and then here
48:47 - you could just do something like a lien
48:50 - and then you could say it's nice yeah so
48:58 - I would save that and then just test it
49:00 - so that way we can see if it's actually
49:01 - reaching that point and whenever we
49:05 - click that add to do button this should
49:07 - console.log right exactly just make sure
49:11 - you've saved the yep there we go ok cool
49:14 - so now add to do I'm working nice there
49:18 - we go
49:18 - so then we have lo alien emoji coming up
49:21 - so we know that the functions connected
49:23 - now wait hold on this might be really
49:25 - hard for people to see I just realized
49:27 - that there we go right there we go nice
49:30 - zoom and maybe even more to be honest
49:33 - okay so there there we go yeah cool
49:37 - awesome
49:38 - so now what we want to do is this is
49:41 - where we need the the sort of the fancy
49:43 - logic to say push it inside of the list
49:45 - and before it used to be a quite a
49:47 - headache to do this but with es6 so like
49:50 - whenever I say yeah 6 by the way guys
49:51 - it's like the new JavaScript standard so
49:53 - you get es6 yeah 7 every year they sort
49:56 - of upgrade JavaScript and that's the set
49:58 - of standards everyone sort of abides by
50:00 - so every year you get more supercharged
50:02 - features so whenever I say es6 that's
50:04 - what I'm referring to
50:06 - so now what we're gonna do is we're
50:07 - gonna use the set to dues function so
50:11 - what we're gonna say here is we want to
50:13 - basically update the to dues width and
50:17 - the way we do this so this very very
50:19 - close attention to so we need to
50:21 - basically set the to dues to an array so
50:24 - we're gonna say to an array but we need
50:26 - to keep whatever we have in the array
50:27 - currently so we're gonna use something
50:29 - called a spread and what spread does is
50:33 - we say that's sick because that's
50:35 - basically like you
50:37 - appending it or pushing it to the end of
50:40 - the current state exactly not exactly
50:44 - okay if we if we were just to do set to
50:47 - dues and then add a new string it's
50:48 - gonna forget about what's already in the
50:50 - short term memory yes we need to say
50:51 - literally imagine you're spreading out
50:54 - the current contents inside of this
50:55 - array and then we basically wouldn't
50:59 - have it so that we would have here we
51:02 - would have comma and then here would be
51:04 - the new to do so here is the new to do
51:08 - so here would be the new to do right but
51:09 - what is our new to do it's pretty much
51:11 - what we have inside of input right now
51:13 - yeah so it would be whatever we've typed
51:15 - in right so here we just put input nice
51:20 - yeah
51:21 - and that would actually say if we save
51:23 - that we hold on so this input is what is
51:29 - populating what is yeah so what's
51:34 - happening here is basically oh I got it
51:38 - so this is like what previously already
51:40 - exists and this is saying I push
51:42 - whatever you have in the input exactly
51:46 - that so imagine where we have take the
51:48 - dogs for a walk take the rubbish out
51:49 - literally imagine you're spreading that
51:52 - out into your current array is somebody
51:55 - said the link in the description is now
51:56 - working and I know hold on give me let
52:01 - me give that a try as well one second
52:03 - that story Chris Farley says what
52:05 - version of JavaScript should I learn
52:06 - when I'm getting started any suggestions
52:08 - you can learn like honestly just learn
52:10 - it's working right yeah I just learned
52:12 - the most modern version of JavaScript
52:14 - maybe it's not working on Facebook so
52:16 - check that because he it seems like he's
52:18 - messaging from Facebook so yeah yeah I
52:22 - would recommend learning the most modern
52:24 - version of JavaScript you will be fine
52:27 - with that and those are the things that
52:28 - we cover in our course profit with
52:31 - JavaScript and today is actually the
52:33 - last day of July for sale so if you guys
52:35 - are enjoying this and you want to like
52:36 - learn how to be able to build these
52:38 - things and make an income you should
52:39 - check out that link in the description
52:42 - below outside of that we're just gonna
52:44 - keep going and build this full app so a
52:46 - great question awesome
52:50 - yes so we were on the setting to setting
52:55 - the to do so we have the array we have
52:58 - the spread which is saying keep whatever
53:00 - we currently have in our short term
53:01 - memory and then we're gonna append to do
53:04 - append the input sorry so does that make
53:07 - sense yep yep that makes nice so if we
53:11 - save that and then we can give that a
53:12 - try and then look what magic happens now
53:15 - to test had to do oh that is nice
53:21 - whoa had to do this is awesome but now
53:27 - even so if I hit refresh everything goes
53:29 - away because it's short term memory it's
53:32 - in a is just in a state it's not in our
53:37 - database yet so it's not permanent but
53:39 - even with that it's like so fast so
53:41 - front end is looking pretty awesome
53:44 - so again GC right this is awesome why
53:47 - doesn't why when I hit enter why doesn't
53:49 - that work do I have to do something
53:51 - special to make that one yes that's a
53:53 - really good question so what we're gonna
53:55 - do now is we're gonna upgrade this so
53:57 - that we have it so when we press ENTER
53:58 - it submits that ad to do is it because
54:00 - also or
54:02 - what was that sorry is it because this
54:04 - is not a form and yes exactly
54:08 - okay or is it because we don't have the
54:10 - submit thing yeah so exactly it's a it's
54:13 - because it's a form so do you know how
54:15 - to do that um not at the top my head
54:18 - probably like at the forum
54:20 - yeah encapsulated would form yep so
54:24 - that's exactly right so you and add a
54:25 - form you just literally do what you said
54:27 - so you go here you add a form you
54:29 - basically put all of your content inside
54:31 - of it because it's a button you don't
54:33 - also need submit either right because
54:35 - the button will do the same job as a
54:37 - submit so you do need to tell the form
54:40 - that it's type is a submit yeah so now
54:43 - so that way that's the one is gonna go
54:45 - to okay nice notice no it's this now so
54:49 - say you see what happened there you're
54:50 - typing it in and because it's submitting
54:53 - so this is a really important point
54:55 - which a lot of people get stuck on yeah
54:57 - because it's um submit so it's a form
55:00 - I'm submitting it and then the whole
55:01 - page is refreshing
55:03 - so exactly and now yeah yeah we don't
55:07 - want things to refresh you told me that
55:08 - like that's we hate refreshing so does
55:11 - that mean I need to like what
55:12 - preventdefault or what is it that I need
55:15 - to do to make sure that that doesn't
55:16 - happen exactly that so basically where
55:20 - we have our submit so submit is firing
55:22 - off the ad to do function right so if we
55:24 - scroll up a little bit okay and then so
55:27 - we're where we fire off the ad to do
55:29 - functions to this function here we
55:31 - actually need to prevent default
55:33 - behavior so we can get rid of this
55:34 - comment now or we can keep that comment
55:36 - if we want and here we can just say
55:38 - event dot prevent default and what this
55:41 - is gonna say is it's gonna say don't
55:44 - refresh the page when you submit because
55:46 - in react we don't want to refresh your
55:47 - we're controlling everything on the page
55:49 - and we're using react to do things so
55:51 - now what this will do is it'll stop the
55:53 - refresh which means that our behavior of
55:55 - appending to the to-do list can happen
55:57 - as it as it would normally yeah and
56:02 - that's really important guys because so
56:04 - many people get stuck on that all right
56:06 - I'm gonna put that in as a note in here
56:08 - too because that's actually pretty
56:10 - important even for myself
56:12 - let's see if it I think that's fine okay
56:18 - cool so that's awesome so let's go back
56:20 - now if I hit if I hit save here and then
56:23 - I come back here and I hit test okay
56:26 - cool right so the next question is is
56:29 - that why is it not clearing on input we
56:33 - would have to probably clear it every
56:35 - time we submit right yeah so any idea
56:39 - where we would roughly do that okay so
56:42 - where I would do it is I would make the
56:45 - yeah once are probably in here in this
56:48 - function add to do and what I would want
56:51 - to do is just like set it back to this
56:54 - empty state so I don't know the best way
56:57 - to do that like would it be
56:58 - I don't know set in yo to blank again
57:04 - perfect that's exactly what you do
57:06 - really yeah that's exactly nice so guys
57:09 - I'm learning what's cool about this is
57:11 - this is real time it's not like a
57:13 - rehearsed so I'm actually cuz I'm very
57:16 - fascinated by
57:17 - react and I want to learn it and Sonny
57:18 - knows it so well I'm actually live
57:20 - learning it with you guys together so if
57:23 - you're new and you're picking it up like
57:25 - I'm picking it up myself sure I have
57:26 - experience with some other programming
57:28 - languages like Python but I'm having a
57:30 - lot of fun like picking it up so that's
57:32 - why I'm asking so many questions
57:33 - now hopefully is bringing you guys value
57:35 - oh yeah that's awesome oh so nice it's
57:40 - clearing it up ok love it nice so
57:47 - somebody just asked now why do we need
57:51 - form when we can do it with a normal
57:53 - button so the reason why we we wrapped
57:55 - in a form was so that naturally when
57:58 - you're typing in a form you usually hit
58:00 - the enter button and you want that to
58:02 - submit the the input filled right so
58:04 - that's why we wrapped it in a form and
58:06 - that's how you get that behavior that
58:08 - we're all used to if you don't have that
58:10 - then when you click the enter key it's
58:11 - not gonna submit the form so that's a
58:14 - good question yeah input cool awesome
58:26 - right so now I guess we're onto the fun
58:29 - part so we can do a few things right now
58:31 - oh we have $2.00
58:34 - oh nice that is saying oh that's such a
58:37 - good question as well cause you want to
58:38 - jump on that question nice thank you low
58:41 - low let me actually hit this that is so
58:44 - cool
58:44 - so they said self-taught boot camp or a
58:49 - degree explain so my personal opinion on
58:53 - this is I'm I mean I'm self-taught
58:56 - completely as a developer and when I say
58:58 - self-taught I mean yes I got help with a
59:01 - bunch of mentors along the way I did go
59:03 - to a college and I was pursuing my
59:06 - degree but I quickly was realizing that
59:10 - a lot of the theoretical stuff and the
59:12 - things that I was building there were
59:13 - not that helpful to me so I ended up
59:15 - choosing my own path of learning by
59:18 - myself and getting clients so for me it
59:20 - was self-taught but I mean I'm sure
59:22 - there's a lot of value in boot camp and
59:24 - you know getting a degree as well but
59:27 - what are your thoughts Sonny so I think
59:30 - I was a really good
59:31 - a way of answering it to be honest I was
59:33 - the same as Kazi I started self-taught I
59:35 - pretty much got a book from the
59:37 - bookstore the Apple bookstore told
59:39 - myself Java I would honestly recommend
59:41 - guys because I've done a degree approach
59:43 - as well so my viewpoint on this is
59:46 - honestly from what I spent getting a
59:49 - degree and doing that as compared to
59:51 - sort of a bootcamp or doing things
59:53 - practically myself I would highly
59:55 - recommend going for the boot camp first
59:57 - because it gives you a lot more
59:59 - practical hands-on sort of approach as
60:02 - opposed to just theory in a degree so I
60:05 - would recommend the approach that I
60:07 - would always give is give a boot camp a
60:09 - try first so self teaching to give it a
60:11 - boot camp a try first because it now
60:13 - with the internet and with all of the
60:14 - courses available including clever
60:16 - programmer we just have so much at our
60:18 - disposal so give that a try first before
60:21 - you even consider a degree if you feel
60:23 - like you honestly I would recommend a
60:25 - degree maybe for machine learning for
60:27 - those really in-depth things but as per
60:29 - coding I would recommend a boot camp
60:30 - because you're so involved and you're so
60:34 - immersed in a coding boot camp that's
60:35 - what I love about it it's like eight to
60:37 - ten hours a day so definitely I think if
60:40 - you have to pick between a college or a
60:41 - boot camp I would agree like go to a
60:44 - boot camp
60:45 - exactly exactly that was a really good
60:50 - question
60:52 - so now let's basically so we have two
60:57 - options now we can basically either
60:59 - create a component for each of the two
61:01 - dues or we can introduce material UI so
61:05 - you can't cause we wanna do material UI
61:08 - right so right now the app looks a bit
61:11 - ugly we want it to look really nice
61:13 - right yeah so what we can do with a
61:15 - reactive and this is what I love about
61:17 - react is many of you guys are used to
61:20 - Google's sort of look and feel right so
61:23 - we actually know that to be something
61:25 - called material UI so to install this
61:27 - into our project it's gonna be super
61:29 - simple what we need to do is MPM install
61:31 - material UI core so that first command
61:34 - so if you just want to copy that go over
61:36 - to vs code and I think we have to open
61:39 - up a set okay but yeah you could do up
61:40 - we just have to make sure we restart the
61:43 - app when we do that yeah
61:44 - so what this is gonna do now is it's
61:47 - gonna install all of the material UI
61:49 - core soil elements into the project so
61:52 - this includes buns it includes a bunch
61:54 - of stuff like that but that means that
61:56 - we can get a really nice clean looking
61:58 - app so I'm just gonna open up material
62:01 - UI as well on my computer so I can see
62:03 - what's going on and if you just want to
62:05 - go over to material UI click on the left
62:07 - side the sidebar cause a nice lawyer
62:10 - that he just subscribed that's awesome
62:13 - awesome nice so what do you want me to
62:15 - do go to materials Oh yep so you click
62:18 - on the Left little drop-down so the
62:20 - little sandwich bar and then you wanna
62:22 - click on components uh-huh and here
62:24 - you'll get a list of everything inside
62:26 - of here you can click on button so let's
62:29 - start off with something simple like a
62:30 - button and now you can see you get all
62:33 - of these beautiful bars and even when
62:34 - you click it look what happens on the
62:35 - primary button this default secondary do
62:38 - you get that little ripple effect as I
62:40 - clean yeah you get really clean sort of
62:43 - UI and now you can see examples of how
62:44 - we actually code that so right now with
62:47 - the primary button if we just copy and
62:49 - paste that code that's what I want and
62:52 - I'll just go to our button and actually
62:54 - what I'll do is I'll paste it like this
62:57 - exactly and then let me see type submit'
63:03 - yep so and then on that lake I'm gonna
63:08 - put the on click on in this too perfect
63:11 - and then we can actually yeah we just
63:13 - want to change the text to do that's it
63:16 - and then this one I'll just comment oh
63:19 - how do I if you want to comment here if
63:23 - you press command for size
63:25 - yep done yeah okay so I think this
63:28 - should
63:29 - oh I have to also import it right or no
63:32 - exactly yep so now you see that if you
63:35 - ever have an input area it comes up in
63:36 - the terminal so to import this I'll show
63:39 - you a little trick so know that you
63:43 - don't need to do that one there's your
63:44 - buddy down fpm yep so you can either do
63:46 - that a little bit there so import button
63:48 - but you know what I'll show you a little
63:50 - trick to this you don't even have to do
63:52 - that if you go back to your your code
63:54 - and you just go to button and you
63:56 - basically press
63:58 - Oh spacebar control spacebar and then if
64:02 - you go oh no I think you have to maybe
64:05 - it's not so if you go to the end of
64:08 - button so next to the end so just to
64:12 - scroat next to the button yeah and then
64:14 - you want to do control spacebar now okay
64:19 - so it's not doing it but usually what
64:20 - happens is is right next to the end so
64:22 - inside of the brackets we can do an
64:24 - import for now you do a normal import
64:26 - but sometimes vs code allows you to base
64:28 - basically we'll bring that in for you
64:29 - yeah like so if we say all right yeah
64:32 - for save and now it should be good to go
64:35 - let's hit refresh yep so I think we need
64:39 - to run the app I think you stopped
64:40 - running it cause II maybe no that is so
64:51 - fast bro did you realize how when you
64:54 - click Add to do you actually submit an
64:57 - empty value to your list oh material ui
65:01 - does that by default no so that's not
65:04 - material UI that's actually something we
65:06 - need to account for so what we want to
65:09 - do is whenever there's no what are you
65:12 - saying
65:13 - so if you click on add if you click on
65:16 - add to do now watch how an empty the
65:18 - element gets added to your list so you
65:20 - see if you scroll down now okay you've
65:22 - got gaps you see you've got gaps in the
65:24 - list yeah uh-huh yeah so we don't want
65:27 - that to happen because you don't want to
65:29 - have those gaps you don't want to have
65:30 - actually adding empty thanks to my array
65:34 - of - dues right yeah so right now it's
65:37 - actually adding empty things so the way
65:39 - we sort of fix that I think is super
65:40 - easy is you go to the bone can we see it
65:44 - first because I don't I want to see it
65:46 - first
65:47 - like can I print like I just want to
65:50 - kind of console that log to dues yeah I
65:55 - just take a look at what you're actually
65:56 - saying so I can understand okay test ID
65:59 - to do I mean is it actually adding
66:05 - because I don't see no survived no so
66:07 - right now is adding it correctly but if
66:08 - you say that if you spam the add to do
66:10 - button without typing anything
66:11 - input phone so so if you hit the app to
66:14 - do bond oh that's what you mean that
66:17 - makes a lot of sense sense so we don't
66:20 - worry nee we don't want that to happen
66:21 - right so the way that we fix that is we
66:25 - disable the button if the input is blank
66:28 - right
66:30 - aha if you go to button so on line 24
66:33 - and exactly exactly like disable at some
66:38 - point and it's like not inputting yep I
66:46 - was not just remember but it makes sense
66:49 - ooh oh that is clean look nice right Wow
66:57 - that is fancy a normal so now we have no
67:01 - lovely fitly okay cool yeah yo Candice
67:07 - just said she signed up for the profit
67:09 - with JavaScript course oh nice super
67:15 - welcome to the course yeah pumped to
67:17 - have you that is amazing thank you so
67:19 - much for joining it really means a lot
67:22 - we're good and you'll see you in these
67:25 - calls every single week multiple
67:27 - actually three or four calls like these
67:29 - inside of the program and then yeah you
67:32 - guys gonna be building projects in that
67:33 - program every single week exactly
67:36 - awesome
67:37 - okay so what's right so now in this add
67:40 - one more element so I'm gonna add some
67:42 - just I've just searched something called
67:45 - form control inside of material UI so
67:49 - I'm gonna go here I'm just gonna paste
67:50 - it yep so it's this code right here and
67:53 - then it's just straighten this up and
67:55 - basically this one's really nice right
67:57 - so I'm gonna clean this up we don't need
67:58 - any of these extra bits and bobs so we
68:00 - don't need the ID we don't need this one
68:02 - for now yeah and we don't need we don't
68:06 - even need this so basically now what we
68:08 - want to say is here the input label is
68:11 - just gonna say no right so now we're
68:14 - gonna also have it's like how our our
68:16 - input looks really ugly right now we're
68:18 - gonna improve and make our input look
68:20 - pretty exactly so we're gonna say write
68:23 - a to-do and then in the input so
68:25 - we just need to grab all of the stuff
68:27 - that we had in our previous input and
68:28 - just chuck it over here now and guys you
68:33 - see how me and cause you're coding at
68:35 - the same time that's amazing that's all
68:37 - through vs code live share yeah that is
68:40 - so exciting
68:42 - nice so now we need to import all of
68:44 - these things so we can just do we can go
68:47 - to the top we can do import so is ups we
68:50 - say import form control we need to
68:54 - import import animal yeah nice so if we
68:59 - save that this D structure is nice in
69:02 - yeah yeah sex really no really nice so
69:08 - check you see the way the text kind of
69:18 - went up so when your cursor is not on
69:20 - there it says right where to do and then
69:23 - it moves up by itself so everyone just
69:25 - said I just joined profit of a
69:26 - JavaScript nice nice
69:39 - someone said which code error is this
69:41 - this is V s code yeah you guys yeah nice
69:45 - so that we have already an app which is
69:48 - looking a lot more better just with
69:50 - material UI and that's an example of how
69:52 - you don't need to rewrite the book on
69:54 - this stuff like you can just reuse
69:55 - design libraries from people like Google
69:58 - and you can start taking their code so
70:01 - you don't have to write all this stuff
70:02 - from the phone which is amazing so i
70:05 - think i think there's actually one for
70:06 - list elements i'm not yeah there is one
70:08 - cluster do you want to do that or you
70:09 - leave that one no no let's do that
70:11 - because this looks really ugly right now
70:13 - okay so what we're gonna do is before we
70:16 - do that let's actually have it as a so
70:20 - right now we're rendering on line 36 in
70:23 - our code we're rendering a list of -
70:26 - duze right line 36 yeah yeah so right
70:30 - here we're rendering a list of - deuce
70:32 - but react has this amazing thing called
70:35 - components right now components
70:37 - basically allow us to write
70:39 - a component that we write once and then
70:41 - we can reuse it so yes we can we can do
70:47 - that but then what I was gonna say is we
70:49 - actually maybe write a component and
70:51 - then inside that component we use
70:53 - material UI so we can show props okay
70:55 - yeah and then we can show how material
70:56 - or how components work - yeah okay
71:01 - awesome
71:02 - so for now what we're gonna do is we're
71:04 - gonna basically create a component which
71:06 - is gonna replace this and then if we
71:08 - ever want to change how our to-do looks
71:09 - we just go to that component so what
71:11 - we're gonna do now is we're gonna create
71:12 - a new new file on the Left called to do
71:17 - Jas yeah so if you want to just create a
71:20 - new one Kazi on the Left uh-huh so here
71:22 - add a new file and we're gonna call it
71:25 - to do and like this right yeah yeah
71:29 - exactly yeah who do to do input or
71:33 - something right not just to do no no it
71:36 - would be a to do because what this
71:37 - components gonna resemble a to do on the
71:40 - screen so that's why we're gonna row
71:43 - right just like one yeah exactly
71:45 - it'd be like one row exactly all right
71:48 - so in this case so what I want to show
71:50 - you as well as well is basically there's
71:51 - this amazing snippet called es7 so if
71:55 - you go to extensions right now we can
71:57 - just give them a quick demonstration of
71:58 - this one so go to your extension on the
72:00 - left okay
72:05 - extensions wait wait where do you want
72:07 - me to go app GS
72:09 - so that ya know so you see the
72:11 - extensions on the sidebar right so that
72:14 - little square box yeah that one there
72:16 - yep that's on there yeah and then you
72:18 - type in es 7 there so es 7 by the way
72:21 - this is the plug-in guys we're using to
72:23 - be able to be on the same visual studio
72:28 - code exactly so here you want to type in
72:31 - es 7 yep and click that and then you see
72:35 - that top one yeah seven react Redux
72:38 - snippets right yeah I just want you to
72:39 - click install on that okay so guys a
72:42 - million people download this and it's so
72:44 - so powerful right now because we always
72:46 - forget how to write the code for a
72:48 - component right so let's go back to our
72:49 - to do Jess
72:52 - yep and now all you need to type Kazi is
72:55 - our f c/e
72:58 - yeah and then press enter and that is
73:03 - really crazy all right how that's so
73:06 - cool is it react framework control I
73:10 - don't know what is but what is react
73:13 - functional component with an export
73:16 - beautiful beautiful beautiful okay great
73:19 - I love that nice and then what we're
73:22 - gonna do now is basically we want to
73:24 - have also you if we're also another one
73:28 - that we recommend you guys get is
73:30 - prettier yeah definitely so this is a
73:33 - really good one to use for your code as
73:35 - well but okay yeah yeah because I will
73:40 - save you guys doing the whole like
73:41 - indentation headache that we all hate
73:43 - doing another really like is bracket oh
73:47 - yeah that's really under this is super
73:50 - super helpful when you are looking at
73:52 - your code and you want to know like
73:53 - which brackets you guys see how it's
73:55 - like colored how this yes imagines this
73:58 - yellow here and this pink parenthesis
74:00 - matches this pink parenthesis here
74:02 - because once your code starts to get
74:05 - more and more involved it starts to get
74:07 - very confusing in JavaScript like what's
74:09 - ending where so like this yellow starts
74:12 - and end this yellow over here
74:14 - that's amazing they change that now it's
74:17 - actually much cleaner than it used to be
74:18 - nice okay so now what we wanted now what
74:23 - we want to do is go to app DOJ's and we
74:29 - want to grab the code that we have for
74:31 - our list element so this one here we're
74:32 - gonna copy that go over to our to-do
74:34 - element yep and we're just gonna paste
74:38 - it here right now obviously we are using
74:43 - a dynamic variable here code to do right
74:45 - so we don't actually have access to that
74:47 - right there and so what we're gonna do
74:50 - is we're gonna use something called
74:51 - props now guys a component is something
74:55 - that we write once but we can use
74:56 - several times in several places so we
74:59 - can reuse a component and then but we
75:00 - only have one piece of code to change
75:02 - that component
75:04 - props stands for properties and allows
75:06 - us when we're using a component allows
75:08 - us to differentiate one component from
75:11 - another so in this case the to do itself
75:13 - the to do title would be the prop that
75:16 - we're going to use right so here what we
75:18 - can do is we can write props and then
75:20 - here we just write props dot to do so
75:24 - that's how we use props in in react
75:26 - right now the next step is naturally
75:29 - okay we're passing through props but how
75:31 - do we actually call out to do now so if
75:34 - we go back to your apt or Jas hold on
75:37 - I'm trying to think so what are we gonna
75:39 - pass and props so I'm gonna pass the
75:43 - entire we're gonna pass the entire array
75:48 - of two dues or what is it that what is
75:49 - props going to be so prop is props can
75:54 - be anything you want they can be just
75:55 - like how a div has a bunch of attributes
75:58 - so you can have on click can I have
75:59 - class names okay it's literally gonna be
76:01 - like this right so we're going it in our
76:03 - case so we're going to just be passing
76:06 - it the to do so the actual tie over the
76:09 - text so in this case we could even call
76:11 - it text so we can say text so we're
76:13 - gonna okay okay got it so that makes
76:15 - sense so we're gonna give it a to do and
76:17 - then we're gonna do to do that text now
76:21 - we're gonna say prop star text because
76:22 - props is a set word right so we can call
76:25 - this this is a diet we can actually call
76:27 - this anything we want we can call this
76:29 - yeah you can do that but the thing is
76:31 - right you don't actually want to call it
76:33 - to you otherwise it's gonna get very
76:34 - confusing yeah because I'll show you why
76:37 - is because when we go to do this yeah
76:40 - let's go to app DOJ's
76:42 - and when we actually use our to do so
76:46 - here when we do this when we say to do
76:48 - this is how we do it we say to do and
76:51 - then we just do a closing right like
76:53 - that right
76:53 - yeah and now remember we the prop was
76:56 - called text right yeah but we want the
76:58 - value of it to be the to do do you see
77:02 - what we did though
77:08 - so what we're saying here is it what
77:11 - makes actually easy is if you grab to do
77:13 - Jess and pull it to the right side of
77:15 - your screen then we can have both things
77:16 - open at the same time so split your
77:20 - window so yeah let's just drag that over
77:23 - to the right side and then let's do come
77:25 - on B to hide the side bar so come on B
77:31 - the shortcut yeah and there we go so now
77:32 - you can see we have app door Jess if we
77:34 - just pull over to do Jess yep so you can
77:36 - see now yeah where we have the so you
77:40 - see on the right side yeah we have props
77:45 - text yeah right aha so text is you see
77:49 - that the prop is so props or whatever we
77:52 - pass through here so we can have a prop
77:53 - called a we can have a prop called B I
77:57 - see makes a lot of sense
77:59 - okay okay that makes a ton of sense okay
78:01 - so now if I just so this text is what
78:05 - let me actually do the again this text
78:08 - is basically what's right over here
78:11 - right exactly
78:13 - oh yeah and props is bit this guy is
78:16 - like whatever is like to-do list
78:19 - attributes right or to-do list props are
78:23 - exactly yeah cool got it okay okay cool
78:27 - somebody just said I really want to
78:29 - bring my jazz level up and folks
78:30 - interacts when he is the bomb thank you
78:32 - this might be the ticket if he has a big
78:34 - part of the pwj team so honestly we're
78:36 - we're always running reactor me and
78:38 - cause he always coding react we have
78:39 - coaching calls on react so for sure if
78:42 - you're on the level up your react game
78:43 - then pwj is in profit a javascript we
78:46 - are teaching react with combined react
78:49 - as a fundamental part of the course so
78:51 - every single week you guys are building
78:53 - full-on react apps in the profit with
78:56 - JavaScript course and once again um
78:59 - today is the last day of the sale so if
79:01 - you're interested in it I'm not trying
79:02 - to push it I'm just saying like the
79:04 - price will go up tomorrow like midnight
79:07 - tonight so if you're thinking about it
79:09 - probably said is the chance to pull the
79:10 - trigger yeah and guys just to mention we
79:13 - actually have a gree act coaching call
79:16 - tomorrow
79:16 - so actually times really well
79:18 - like it would just be silly for you to
79:20 - not be in the program so like you should
79:23 - just join it and then if you don't like
79:25 - it 29 days later you can cancel it but
79:27 - like it's it's the most unbelievable
79:29 - program so at this point if you are
79:31 - hooked by this and you're seeing value
79:33 - click the link join the program and then
79:36 - come back and watch this training with
79:39 - us
79:40 - exactly it's in the description so go
79:42 - click the link in the description it
79:44 - will take you straight to it
79:45 - read it up click the button buy it join
79:48 - the community and then come back to this
79:49 - training yeah I think some people are
79:52 - having problems clicking the link so
79:54 - it's not actually a clickable link so if
79:56 - that's the case guys just copy really
79:59 - can you see that yeah you can't actually
80:00 - even I can actually click that link so
80:03 - maybe that's why it's very very
80:05 - problematic ok let me see let me see
80:10 - what is happening oh okay I got to
80:16 - change that right now because that's
80:17 - that's really bad yeah awesome welcome
80:25 - to the team ank's and hopefully I'll see
80:28 - you in the coaching good tomorrow
80:30 - awesome someone asked a good question so
80:37 - why are you doing that how quickly
80:38 - explain so what's the difference between
80:40 - functional components and cost-based
80:41 - components which one should I use so and
80:44 - do where do I need to learn hooks Oh
80:46 - hooks belong to functional components
80:48 - that's to answer your first question
80:50 - class-based components so guys if you
80:53 - need to know this answer because a lot
80:55 - of people ask it you're gonna need to
80:56 - know both as your fundamentals and we do
80:58 - teach both functional components are the
81:01 - new way of writing the components
81:03 - they're very clean they're very slick
81:05 - what we're doing right now is functional
81:07 - components most companies that you join
81:09 - will have a code base written in the old
81:11 - stuff so class-based components so
81:13 - you're gonna need to know both but it's
81:15 - not affair and honestly once you know
81:17 - one it's very easy to pick up the other
81:19 - one yeah alright go so if you actually
81:23 - go and click the link on YouTube right
81:26 - now it will work awesome now it's
81:30 - working yes you know we're gonna all
81:32 - so we just gotta update it in a few
81:34 - different places so I'm gonna update it
81:36 - right now in the Facebook group as well
81:40 - and just make sure it it also works
81:42 - they're nice so now the also if any of
81:46 - you guys are on Instagram kya say
81:49 - Instagram story right now make sure you
81:50 - tag clever cause II have a cozy and ssss
81:55 - Sangha and then just last guys know that
81:57 - you're watching we love to engage with
81:59 - you guys speak to you guys and
82:00 - instagrams a really good platform for us
82:02 - to reach out and talk to you guys
82:04 - yeah and tag us and what are our tags so
82:09 - I am clever cause II and then you are
82:12 - funny saying no it's ssssss Sangha so
82:17 - it's for esa's Sangha yeah last one
82:21 - there we go make sure you give us a
82:23 - shout out and then we can reach out and
82:25 - have a chat with you guys yeah yeah we
82:28 - reach out know some people just please
82:29 - yeah reach out with the reach out with
82:32 - this that's gonna be awesome we're gonna
82:33 - share your story and we're gonna put it
82:34 - on our Instagram story nice okay dope
82:40 - so let me oh wait I was actually sharing
82:43 - that the whole time but apparently I
82:45 - wasn't sharing anything so here you can
82:47 - reach us at Instagram go here and tag us
82:50 - here's it at clever cause II for me and
82:53 - then here's Sonny Stanga yep so okay
83:01 - cool all right go for it
83:04 - it's nice so now what we've done is we
83:07 - created to do component we passed in the
83:10 - text prop right and we gave it the value
83:13 - of to do which is basically going to be
83:15 - the value so it'll be taking the dogs
83:16 - out for a walk or whatever you put
83:17 - inside of your to do so now if we
83:21 - actually save this and run this oh we
83:23 - might actually have to import our to do
83:25 - so if you go to the top cause II yep yep
83:30 - and just do import to do from so
83:32 - important to do is it uh it's not so no
83:39 - no you have to do in a separate ones
83:40 - that we import to do and then from and
83:43 - then we use some so you need to do the
83:46 - directory so our current directory for
83:48 - slash good to do yeah and you don't
83:50 - actually need the Jess anymore so it's
83:52 - actually really clean how we do that
83:54 - yeah and now what we done is we put in
83:56 - the are the to do that we just created
83:58 - and it should be working now so if we
84:01 - give that a save and we give that run oh
84:03 - did you add it in already somewhere here
84:06 - oh you did yeah yeah you did okay clean
84:10 - so if we go back and we check no have a
84:13 - look at this so awesome right wait hold
84:16 - on it worked
84:19 - yep so if we try and type in something
84:22 - else like ABC
84:25 - there we go okay so it's not pretty yet
84:28 - but yes there's not pretty but now what
84:32 - we just did is we actually just moved
84:34 - all of the code over to a separate
84:36 - component so it's actually the cleanup
84:39 - process okay so let me just write that
84:43 - down as well as a note so break your
84:47 - code up into
84:53 - okay cool nice awesome
84:57 - okay so now what we're gonna do is now
84:59 - the really nice part is is that we're
85:01 - gonna actually upgrade this to do a
85:03 - component to have material UI but all of
85:07 - the code now that we have to handle is
85:08 - just this which is really clean right we
85:11 - don't have to worry about all the other
85:12 - code we just add it here and everything
85:14 - will work for us yeah that's perfect
85:16 - that's perfect we can add as much
85:18 - complexity as we want but it's real it's
85:21 - not gonna be all in that same app.js
85:23 - file exactly that is really a benefit
85:28 - really here is not just that it's a
85:30 - different file so your code is clean
85:32 - it's actually that it will render
85:35 - separately from the rest of whatever is
85:38 - happening in your different components
85:39 - your app GS or whatever so even if this
85:44 - is loading it won't cost your entire app
85:46 - to not load right it will everything
85:48 - else will still load and then your
85:50 - component will keep loading and it will
85:52 - like get refresh later exactly yeah
85:56 - exactly this is super clean like it's
85:58 - gonna be really really nice to use what
86:01 - I'm gonna do now is I'm actually gonna
86:02 - copy a snippet I've got from material UI
86:05 - so what we're gonna do is we're going to
86:06 - change the divs to be list and we're
86:10 - gonna just grab this and we're gonna I
86:13 - got this from material UI Docs so these
86:15 - are a bunch of elements right now we
86:17 - don't really need the avatar I guess at
86:20 - this point I guess we can kind of leave
86:23 - that one for now so have a look so yeah
86:28 - we can leave that one for now so we can
86:29 - get rid of this one we can get rid of
86:32 - this one so list item avatar and then
86:35 - here what we can do is we can just have
86:37 - so see list item push this in and what
86:44 - are for our text what we want to do is
86:46 - we just want to have the primary text
86:50 - could say like to do and then the
86:52 - secondary text could be our actual to do
86:54 - text some prop start text so something
86:57 - like this so I've just looked at the
86:59 - docs in material UI and I pretty much
87:01 - seen an example and I've repurposed it
87:03 - for what
87:05 - we won here so well now to get this
87:07 - working we just need to import all of
87:10 - the right dependencies so I'm gonna do
87:13 - basically what we've done in the other
87:15 - ab KS and we do an import and rather
87:18 - then this is what we employed inside of
87:20 - the apt or jest but in this case we just
87:22 - need to do these ones so list list item
87:26 - list item text nice yeah and if we save
87:32 - that and we run that if everything went
87:35 - well it should be looking beautiful oh
87:37 - look at that nice Oh clean okay test
87:41 - right oh nice okay this yeah and
87:45 - obviously we can enhance that as we want
87:47 - we can make it centered we can do a
87:49 - bunch of stuff and you know what let's
87:52 - actually try and give it that avatar so
87:54 - there's a list item avatar let's try and
87:57 - give it this one so this might actually
87:58 - be really nice if we did even put a
88:00 - little box around it if we want later
88:02 - yeah exactly so let's do that and give
88:07 - that a girl that's not and then we need
88:10 - to quickly import yeah yeah that's crazy
88:17 - what is that shortcut maybe it's not I
88:19 - have it not set up in this one yeah yeah
88:22 - usually it's quite a nice one where you
88:24 - basically you will go to the end of the
88:27 - line so if you go to where my cursor is
88:30 - right now so if you go here rad all
88:34 - missing imports oh click that did that
88:39 - what's that one I mean I think we had
88:40 - all the imports already so let me try it
88:42 - so I just deleted why don't you you know
88:45 - source action add all missing imports
88:48 - huh but if you click on so if you go to
88:51 - the end of the line and you do control
88:52 - spacebar so you're right where my cursor
88:55 - is so not outside the bracket but inside
88:57 - so inside nice yeah oh there we go
89:01 - that's it yeah that okay clean it and it
89:05 - would actually do it for sometimes you
89:07 - have to go down one okay yeah so doesn't
89:11 - always work but it's quite a nice woman
89:13 - it does know it's working so we put this
89:15 - awesome oh nice yeah and then I'll go to
89:17 - list item tag
89:20 - nice okay cool
89:22 - so this is good to go now list item list
89:26 - item tax all of that yeah awesome so if
89:30 - we go in the our image icon is not
89:33 - employed so it's image icon the table
89:37 - image icon
89:38 - alright that's from iio that's from a
89:40 - different thing so we'll leave that
89:41 - actually maybe that one would you just
89:43 - for now yeah so that's from a different
89:46 - dependency so we haven't actually
89:48 - installed that one okay so there we go
89:53 - awesome okay cool yeah so now what we're
89:59 - gonna do is we are going to what is just
90:02 - a surprise go ahead what were you gonna
90:06 - say I'm just gonna session the primary
90:08 - text be props that text yeah we can
90:11 - change up agenda I just quotes quickly
90:14 - so back to text we don't need this
90:18 - second bracket okay and then this will
90:22 - just be like let's just put like dummy
90:25 - deadline yeah oh nice yeah that's a good
90:30 - use case yeah awesome okay that looks
90:35 - pretty yeah and a quick sort of like tip
90:41 - here so now say we want to star that
90:42 - list to be centered right haha so every
90:46 - component can have its own CSS so here
90:48 - let's create a new file on my man this
90:50 - quote oh I didn't know you could you
90:52 - could do up but if we were gonna do this
90:54 - we could import forward slash to do dot
90:57 - CSS so we need to make a file called to
90:59 - do CSS all right give me one second Mark
91:02 - Johnson is asking preview videos of pwj
91:06 - course so we don't currently we're not
91:08 - doing preview videos though that could
91:09 - be a good idea maybe we could put some
91:11 - preview videos yeah but if you go to the
91:14 - page that we have in the link like
91:16 - underneath this video that will
91:19 - basically show you what the whole course
91:21 - is about and I have a full video
91:22 - explaining all of the things that you
91:25 - actually get from the program so if I
91:28 - were you mark I would just check that
91:29 - out and then you know just jump in the
91:31 - program
91:32 - and from there you can decide how you
91:34 - like it and you can cancel at any time
91:36 - yeah awesome what were we doing no we
91:45 - were saying we were trying to enter it
91:48 - so we're trying to Center it yes sir
91:50 - so we just create a file called ugss
91:52 - okay so we will create that file to do
91:56 - to do dot CSS what's the reasoning
92:00 - behind every filename being like
92:02 - capitalize like that yeah so it's a good
92:05 - question so that it's kind of it's a
92:08 - standard really so that way you can
92:10 - quickly identify what is a component so
92:12 - if you know is all of the components
92:14 - here to do apt ojs they all have
92:18 - capitals right so as long as you have a
92:20 - capital and you stick to that standard
92:22 - especially when it grows so it gets
92:24 - quite big your project especially when
92:26 - you're in a production environment yeah
92:27 - it's very quick to then see what's a
92:29 - component and what's not okay that's
92:31 - this or reasoning yeah okay
92:33 - all right let's keep it going let's keep
92:34 - it going cuz right now we're at 208
92:36 - viewer so I just want to make sure
92:37 - everybody can get as much spot i'll slow
92:40 - my questions down a little bit so if we
92:43 - go to to do CSS and now inside of to do
92:47 - ojs yeah I'm going to add a class name
92:49 - to the list so I'm going to say class
92:51 - name equals and let's just call it to do
92:55 - I can't this is working okay you're
92:58 - writing right here okay yep and then
93:01 - here we just inside of to do dot CSS now
93:03 - I'm just adding that CSS row and here
93:06 - I'm gonna say text a line it's
93:09 - text-align:center and this may be do it
93:12 - this might do it it depends on how we've
93:14 - set things up but let's say what to do
93:17 - and save and the to do died Jess got it
93:20 - and then let's go back alright okay so
93:26 - this is this happens typically because
93:28 - we have a component inside of so
93:30 - material UI has a bunch of rules that's
93:33 - built into it so I think one of them
93:35 - might actually be centering what we'll
93:38 - do is I think this actually keep this to
93:40 - the end so we can style it at the end
93:43 - yep because we can even host
93:46 - right now if we want or I mean we can
93:48 - even start connecting firebase to it now
93:50 - yeah let's do that for now so this is
93:53 - scary do this for now okay so what we're
93:56 - gonna do now is remember guys in the
93:58 - beginning what we did is we set up
93:59 - firebase and we got config so a little
94:02 - config right yeah and what we need to do
94:05 - now is actually connect that config so I
94:07 - want you to do is create a file called
94:09 - firebase jeaious and this is the
94:13 - beautiful part because right now it's so
94:16 - quick to do this right so that's the
94:18 - config right
94:19 - but what we're gonna do now is I have a
94:21 - little snippet of code that I always use
94:23 - so I think it's let me get one second to
94:29 - do so I always have this snippet of code
94:31 - that I use and you guys need to do is
94:32 - actually just copy this so pause the
94:35 - video copy out what I've written here
94:37 - and we'll explain exactly what it's
94:38 - doing so this snippet right here so if
94:43 - we basically so this one right here so
94:48 - it says comment out at the top right now
94:50 - and so this is what its gonna do is it's
94:53 - gonna import firebase so we need to
94:54 - actually install firebase so cause if
94:57 - you wanna install firebase to the
94:58 - project okay so let me go to firebase oh
95:03 - nice mark Johnson I totally just joined
95:06 - no I
95:08 - that is awesome so if you want to go to
95:12 - notify base here so if we go to MPN we
95:15 - need to do is NPM I and then firebase so
95:20 - inside of a terminal the NPM I firebase
95:25 - and what that's gonna do is gonna
95:26 - install all the firebase dependencies
95:28 - inside of our project nice okay so why
95:31 - that's happening what we can do is we
95:33 - can carry on so we then have this
95:35 - command is firebase initialize app so
95:37 - this is something that firebase gives us
95:38 - and all we need to do is that config
95:41 - that cause he grabbed earlier all we
95:43 - need to do is basically just copy that
95:44 - so we can we can here this for a sec and
95:46 - then we can basically just paste that
95:47 - inside of here and that's like our key
95:50 - so that's gonna be the key that gives us
95:52 - the basic all that is gonna connect
95:54 - everything that we need to do is gonna
95:56 - connect everything so it's basically the
95:58 - key to our back-end
95:59 - and here we don't need to we don't need
96:02 - these services so I'm gonna get rid of
96:03 - this and all we're saying here is we're
96:08 - saying using the firebase app that we
96:11 - just initialized so this one right here
96:13 - we're connecting to firestorm and we're
96:16 - basically just storing that in a
96:17 - variable called DB and then on line 18
96:19 - so if you scroll down yeah on line 18 if
96:22 - we export that so that way anywhere else
96:25 - in our reactor we can just import it and
96:27 - then we have access to the DB so first
96:30 - so fine store here guys whatever but you
96:34 - okay
96:35 - firebase on Google Chrome okay so
96:42 - firebase has a database so if you click
96:45 - on the left the database tab left got it
96:49 - yep and then you click on fire store so
96:53 - it will say create database uh-huh and
96:57 - then you wanna click on the start in
96:59 - test mode yep and click Next
97:03 - yep here you can say it USN true it
97:08 - doesn't really matter to be honest okay
97:10 - what we're gonna do guys this is setting
97:11 - up the entire sort of database back-end
97:13 - so the real time database query is just
97:17 - getting set up right now and it's sort
97:19 - of doing all this for us
97:20 - just from what we just did there so once
97:24 - that's done we should be able to
97:26 - actually start using our database and
97:29 - guys your minds gonna be blown when you
97:31 - see how simple the code is to get it
97:33 - working I like it always it amazes me
97:36 - yeah I'm really really pumped it's
97:40 - really really nice
97:41 - so Abdul said ydb inside of x4 so that's
97:45 - just a syntax you can actually write a
97:48 - different way you can do it like this
97:49 - you could say export default DB so let's
97:52 - just write it like that for now that
97:54 - means that we can import it easier so
97:56 - that's something called import-export
97:58 - which I'd recommend we do teach you in
98:00 - the course but I recommend you check up
98:02 - on on what an import and export is and
98:04 - you'll be able to explain what a default
98:06 - and all those things are yeah nice
98:09 - because yeah because one thing I learned
98:11 - about react is like if he didn't do this
98:13 - export line over here then in our other
98:16 - files we won't be able to use this exact
98:18 - DB exactly yep perfect wherever playing
98:23 - it yeah nice so the database is also
98:26 - beautiful so fire store has a structure
98:29 - of collection document collection
98:31 - document collection document and it sort
98:34 - of goes on forever what is a collection
98:35 - it's just like an array and then inside
98:37 - of the collection you just have an array
98:40 - so in our case if you click on start a
98:43 - collection and our collection is gonna
98:47 - be code - duze right yeah so you could
98:49 - go next and then the first document if
98:52 - we just we don't have to type in the
98:53 - auto ID but in the field what we're
98:55 - gonna do is text so remember guys that's
98:58 - how we sort of set it up so text can be
99:00 - like take the dogs out for a walk or it
99:01 - could be like we could even call it oh
99:03 - no three yeah we can call it a task or
99:05 - at any value yeah or to do and the value
99:09 - should be the actual to-do itself so
99:11 - take dogs out or something like that
99:16 - nice and click Save Hey look at that I
99:21 - love my emojis nice and then look at
99:24 - that that's already in the database it's
99:26 - got a field it's got a value and so
99:28 - forth so now I guess our mission is to
99:32 - connect our reactor to this database and
99:34 - start pulling it in so that if we open
99:37 - up apt or Jess so do you remember when
99:43 - we set up the initial state right for to
99:48 - do is we actually hard-coded the
99:49 - beginning values right yep yep we did so
99:53 - if we go to the top so yeah so we
99:55 - actually hard-coded these but now
99:56 - instead of we're gonna get it from the
99:58 - database yes exactly
100:01 - mhm so now if we press come on be you'll
100:04 - be able to hide the sidebar and it
100:06 - should give you some more screen yeah
100:09 - there you go and then so now what we're
100:11 - gonna do is we can get rid of this
100:13 - console log for now so what we're gonna
100:15 - do is we actually want the two dues to
100:17 - be empty initially right we don't want
100:19 - them to have anything inside and then
100:22 - what we're gonna use is we need to now
100:24 - so this this actually run the scenario
100:27 - I had so when the app loads so when the
100:29 - app loads we need to listen to the
100:35 - database and fetch new to dues as they
100:39 - get refreshed right as they get added
100:41 - removed right so when the app loads we
100:46 - need to listen to the database and we
100:48 - need to basically just say fetch all the
100:50 - to dues as we add and remove them right
100:52 - and we want that information to go right
100:55 - into our to dues so that's the mission
100:58 - and I've always recommend just writing a
100:59 - small comment as to what you're trying
101:01 - to achieve before you start coding and
101:05 - what the way we're gonna do that is
101:06 - we're gonna use something called a use
101:07 - affect so here we do something called a
101:10 - use fetch so just like how you state
101:12 - setup it's a it's a hook which sets up
101:15 - state inside of our app a user fact is
101:18 - basically something which we we call it
101:22 - so it's a hook and basically it runs
101:24 - once when the app loads so and the
101:28 - syntax for it is we basically have a
101:29 - user fact and then we have a function
101:33 - and then we have dependencies so I'll
101:35 - explain what these are and we also offer
101:37 - a place it as we need to so the function
101:39 - we write as an error function so you
101:41 - just do this and honestly all you need
101:45 - to know at this point is that this loads
101:48 - so this code here fires when the app
101:53 - loads so when app Doge is so when the
101:55 - component that we're in when it loads
101:57 - this code here is gonna fire and this
102:00 - dependencies right here you basically
102:03 - have an array here and whatever is
102:05 - inside this array so if you leave the
102:07 - array blank right now it's gonna run
102:09 - once when app DOJ's loads right if you
102:14 - put a variable inside of here it's gonna
102:16 - run once when the app loads and then
102:18 - whenever any variable changes whenever
102:21 - like say for example if I put input in
102:23 - here every time so when the app loads
102:26 - it's gonna fire it off yeah every single
102:28 - time the input loads it's gonna fire it
102:30 - off as well so you see it's very
102:31 - powerful so yeah so basically this of I
102:34 - it took me a while to wrap my mind
102:36 - around this before but basically how I
102:39 - think of this is
102:40 - for example if he made it to whenever
102:42 - this input variable happens the use
102:47 - effect would be firing every single time
102:49 - I type here because I'm changing the
102:51 - input but if he so then the input
102:54 - actually is the dependency if he has no
102:57 - dependency meaning he just has that like
102:59 - empty array what that means is like the
103:02 - only time it fires is when i refresh the
103:05 - page or I start the page but after the
103:08 - page is started it will actually like
103:11 - never fire again based on any it's not
103:15 - watching for any changes anymore
103:17 - exactly I think we actually need to run
103:20 - the app maybe are we doing that yeah
103:22 - okay we also yeah yeah keep going
103:24 - nice awesome so in this case we actually
103:27 - just want to run the snippet of code
103:30 - once when the app DOJ's loads and never
103:32 - again because we want to attach a
103:34 - listener to the database one time we
103:37 - don't want to keep attaching a listener
103:39 - because it's gonna get really stressful
103:40 - for the browser we just need one
103:41 - listener which says hey when the
103:43 - database changes ping me the new stuff
103:46 - right nice so the way we do that now is
103:48 - we need to import that special DB that
103:52 - we set up earlier so we say which say
103:55 - import DB from and then remember at the
103:59 - file that it was inside of what's
104:01 - firebase and here what we do is we just
104:05 - do this now so we say database dot
104:08 - collection so remember we set up that
104:11 - collection earlier which was - duze yep
104:14 - hey everyone's on the core nice
104:16 - oh if a day raised up collection did you
104:18 - also call me cute earlier what was up
104:22 - she also said you were cute earlier
104:24 - that's a that's a nice girlfriend guys
104:27 - that's my girlfriend guys it's up man so
104:32 - we've got database collection - deuce
104:34 - yeah and what that is gonna then do is
104:37 - we need to now say so this is a bit that
104:40 - sort of just takes a little bit of
104:41 - getting used to so every single time the
104:44 - database changes if we want to fire off
104:46 - some kind of event all right and the one
104:49 - that we're really interested in
104:51 - something called on snapshot
104:53 - Yeah right so that means that every
104:55 - single time it changes yeah it fires off
104:58 - a snapshot and imagine the snapshot is
105:00 - like literally imagine a camera right
105:02 - yeah so every single time the database
105:03 - changes it snaps it and it gives you
105:06 - that snapshot right and whatever you
105:08 - decide to do with it is up to you but
105:10 - it's just going to snap it and give you
105:11 - that snapshot so in this case we do
105:13 - snapshot and then we need to have some
105:16 - code run whenever that happens here so
105:18 - now what do we do with this snapshot and
105:21 - this is the part which is a very slick
105:23 - es6 line of code but we'll break it down
105:25 - so what we're gonna do is we're gonna
105:26 - say set the to Do's so we want to set
105:32 - the - duze - and now this is a bit which
105:35 - gets quite intricate so we're gonna say
105:36 - snapshot dot Docs so this is gonna say
105:41 - all of the docs so remember when Kazi
105:43 - added a task yeah all I could to do
105:45 - inside of that collection yeah
105:47 - so we're saying go and get all of the
105:48 - docs and then we're gonna say map
105:50 - through every single one of the docs or
105:52 - in this case right now Doc's is every
105:54 - single to do that I've added to the
105:56 - database right now it's only one that
105:58 - I've added exactly got it yeah
106:01 - so I'm mapping through all of the docs
106:02 - and then we're gonna say for every
106:04 - single doc because remember the syntax
106:06 - for this is you've got the plural here
106:08 - and the singular here so every time you
106:10 - loop through for every single doc in
106:12 - this case right set it inside of - duze
106:17 - yep so so we're saying that so right now
106:20 - this is kind of like the the more
106:23 - complex bit here so we're saying
106:24 - snapshot Doc's don't map through all the
106:27 - docs so for every single doc I want to
106:29 - then do doc dot data which then
106:32 - basically gives me an object back of all
106:35 - of the properties so the only property
106:37 - that cause he added earlier was one to
106:41 - do right take take out the dog yeah take
106:44 - out the dog but the key for that that
106:46 - field was to do right yep yep so the key
106:50 - was to do but remember dr. day is just
106:52 - gonna give us back an object all right
106:54 - so we need to match this sort of the
106:57 - previous shape that we had earlier which
106:59 - was like strings yeah so ABC and then
107:04 - like DF for example so now what we want
107:06 - to do is well
107:07 - say dr. data dot to do all right so
107:10 - we're gonna say go through every single
107:13 - doc right which is basically all of the
107:15 - to do is get the to do filled and it
107:18 - basically bubbles up so this is gonna
107:20 - bubble up into an array right and then
107:23 - we're setting that to become the two
107:25 - dues
107:31 - so does that is that and this is a bit
107:34 - which is like this is really sort of
107:36 - more of an intricate part where right
107:39 - now what we're doing here and we can
107:40 - actually console.log this to make this a
107:41 - bit clearer yeah so what we're gonna do
107:44 - here is if I just do console.log
107:47 - yeah and I do this so let's do snapshot
107:49 - don't you do is right hold on okay so
107:53 - this part here is getting that specific
107:55 - to do and so so I'll show you actually
108:03 - if we don't add the to do what does this
108:05 - return what is this whole thing like
108:07 - what is this thing inside of the
108:09 - parentheses here gets evaluated to once
108:11 - this entire loop finishes running so I
108:15 - we've console updates to save it and run
108:17 - it and you'll see okay yeah that's the
108:20 - best way to see it and then you can play
108:21 - around with what you get back refresh so
108:23 - now if we yep so if we refresh so whoa
108:30 - that just happened okay so firebase does
108:33 - not contain a d4 oh because we need to
108:35 - save the the firebase file uh-huh okay
108:39 - so if you notice guys whenever you don't
108:42 - save a file it's got that little circle
108:43 - so that's sometimes what happens so use
108:46 - effect also we need to import use
108:48 - effectors are inside of apt Oh Jess yeah
108:52 - also so that say if you click it again
108:55 - and you go down one yep there you go use
108:58 - oh no it is still not there yeah so
109:01 - sometimes that doesn't work via use
109:03 - effect nice okay so so can you see it
109:11 - actually grabbed that the take dogs out
109:13 - right yeah so so it doesn't take dogs up
109:17 - like if it takes dog out from my
109:19 - database that is sick
109:21 - yeah that's beautiful okay all right
109:25 - well well what we want what we kind of
109:28 - want to do here is let's let's make the
109:31 - console a little bigger so we can just
109:33 - see yeah so it's made the console a
109:36 - little bigger and then what I'm gonna do
109:37 - here is I'm actually gonna remove the
109:40 - code that sets the to do so we're just
109:41 - gonna be console logging all right so
109:43 - we're actually not gonna do
109:44 - anything functionally we just want to
109:46 - see what's inside of dr. data here
109:48 - uh-huh okay right so now if we refresh
109:51 - do after I have to hit save to right yep
109:55 - we have to save and then we go back when
109:56 - we refresh so now if you go so you see
110:00 - there you go so that little object in
110:02 - there in the console yeah right here
110:04 - that's basically the collection you see
110:06 - that it gives us back like an array of
110:09 - objects ah so this is an array so this
110:12 - will return to us an array of objects
110:14 - that piece yeah basically when I do set
110:18 - to dues then it said the to dues to that
110:21 - array of objects yes but if we did that
110:25 - so that's the bit with that that's where
110:27 - everyone makes a little error so if we
110:29 - did this right so this wouldn't work
110:32 - because ours are too dues are only right
110:36 - now set to handle a raise not array of
110:40 - objects exactly so that's why when we
110:44 - map we're accessing the to do so I would
110:46 - have to make sure that in here somewhere
110:48 - when I'm looping through I need to
110:50 - access the object so yeah you could
110:53 - either do it here oh you can actually do
110:56 - it so you can either pass the entire
110:59 - object here uh-huh oh you can just get
111:01 - the two dues which would actually work
111:03 - with what we currently built okay so
111:06 - this will give us back strings right oh
111:07 - oh okay okay that's why I was confusing
111:10 - because you didn't do dot to do here you
111:13 - didn't do this yeah exactly
111:15 - okay I was just trying to show you that
111:16 - it was an object that comes back cool
111:18 - cool cool okay and okay awesome got it
111:20 - so then this basically is just at the
111:22 - end of the day like a flat array with no
111:25 - objects yeah okay exactly it's a flat
111:27 - array of strings right nice okay I would
111:30 - recommend that you usually do pass back
111:32 - the whole object because then you can do
111:34 - more complicated right now this allows
111:36 - us to read from the database yeah but
111:40 - are we gonna the next step is gonna be
111:42 - to also have like that two-way sync so I
111:44 - have when I actually write stuff on my
111:46 - react app it also adds it to the
111:48 - database yes exactly so this is where
111:52 - it's really beautiful right because this
111:55 - piece of code right here is doing all of
111:58 - listening right so it's always going to
112:00 - listen to whether or not it gets updated
112:02 - whether or not it gets changed it's just
112:05 - gonna say whenever there's a snapshot so
112:07 - whenever anything changes in that
112:08 - database if we push it if we do anything
112:10 - it's just gonna basically fire this line
112:12 - of code off yeah right yeah and so this
112:15 - is actually all the hard works kind of
112:17 - done at this point so we can actually
112:19 - get rid of this so now so as soon as the
112:22 - app loads now so if you save this and we
112:24 - go back to our as soon as it loads it
112:26 - would actually refresh and then it would
112:28 - show us the the stuff that's in our
112:31 - database you know default okay so like
112:34 - for example if I just went in here and
112:36 - like I added another no so you would add
112:39 - another document so on the Left yep
112:42 - you're at a document okay and you had to
112:46 - do yeah and then and guys this is
112:49 - real-time so he's not gonna refresh
112:50 - right now he's gonna just pretty much
112:53 - add this to the DB and it's gonna be in
112:54 - real time gonna get added to our Oh dad
112:58 - is crazy it's crazy right I didn't even
113:01 - refresh yeah it's just an instant thing
113:05 - so now we have this one literally three
113:08 - lines of code guys and it's just like
113:10 - literally two lines of code if you think
113:12 - about it oh my that's just been
113:13 - everything that is beautiful
113:15 - which is insane right it is so beautiful
113:18 - yeah okay
113:19 - and the crazy part is adding the to do
113:22 - is even easier now all right so now if
113:25 - we go to our add to do function so on
113:28 - line 22 yep and then we have a look here
113:32 - right yeah so now what we want to do is
113:33 - rather than sort of manipulating our
113:35 - local state right yeah we we of course
113:38 - want to clear the input because that's
113:39 - local it's what we do locally but let's
113:42 - get rid of our our console logs for now
113:44 - and what we're gonna do here is we're
113:47 - just gonna say DB yeah doc oops DB doc
113:52 - collection mm-hmm to do's and when we
113:57 - click the add to do button we're just
113:59 - gonna literally do this when I say add
114:00 - open right and we pass it an object all
114:06 - right and remember your yield is gonna
114:08 - be to do yeah and I'm gonna let you
114:11 - finish it off
114:12 - so what's the value gonna be value is
114:15 - going to be whatever the input is
114:18 - exactly so it's going if you want this
114:21 - yep yeah in this case would be perfect
114:27 - yeah I mean I think that's a sign of
114:29 - code yep okay right yep now we don't
114:33 - have to worry about spreads and
114:34 - everything because what this is gonna do
114:36 - is it's gonna basically add to the DB
114:38 - yeah which then fires off a snapshot yep
114:42 - which then oh wow that's so nice because
114:47 - as soon as this happens this it's
114:50 - changed so on snapshot because it takes
114:52 - a new snapshot and then it just Maps oh
114:56 - wow that's beautiful so this is just one
114:58 - line of code and now I can add things to
115:00 - it already yeah exactly that is insane
115:04 - blowing okay so if I do live call rocket
115:10 - emoji and then I had to do holy crap
115:13 - it's right there and if I go here it
115:18 - would be in this yep so live call right
115:20 - here oh my god what's wrong okay eat a
115:26 - banana now you might be wondering why it
115:35 - sort of popped in at a different point
115:37 - each time yes because it generates a
115:39 - random ID right and it sorts our sablée
115:43 - Oh
115:45 - for exactly okay got it so I can I get
115:47 - so the easiest thing would be like I
115:50 - want the most recent to be at the top
115:51 - yeah so that should just be like a
115:55 - simple sort by cuz I'm sure it's
115:57 - creating a timestamp field right in the
115:59 - back created on that you would think it
116:01 - was but right now what we're gonna do is
116:04 - we actually need to we do need to
116:06 - actually add a timestamp yeah so we're
116:08 - gonna add a time some every time we push
116:10 - something in and what we need to do here
116:12 - is firstly we need to import a firebase
116:15 - at the top so could we need access to
116:17 - firebase because we need remember
116:19 - whenever we do a timestamp guys we
116:21 - actually want to get not our time stamp
116:24 - but firebase is
116:26 - of times done right yeah in that way no
116:30 - matter if cause he pushes it in America
116:32 - or I push it in London arts our server
116:34 - time stamp will be the same so it's
116:36 - always gonna be correct mm-hmm
116:38 - all right otherwise it could have timing
116:40 - issues so at the top of the file we're
116:41 - gonna say import firebase from firebase
116:45 - yeah the actual dependency we want and
116:48 - then we basically just need to get the
116:50 - the timestamp value so here I'm gonna do
116:53 - firebase
116:55 - da I think it's firestore and then I
116:58 - think it's I just need to check this one
117:01 - one second I need to I I think Google
117:04 - this piece of code and the guys it's
117:05 - always normal to do that by the way like
117:07 - nobody remembers this stuff fully off
117:09 - the top of their head so firestore I
117:11 - need the server timestamp awesome so
117:15 - earlier just right now we had mark
117:18 - Johnson he joined that was super cool so
117:22 - thank you for jumping in and he was like
117:24 - I went ahead and joined it to try and
117:26 - test it out for 30 days yeah I
117:27 - challenged you test it out I mean a
117:29 - stress test it just make sure you come
117:32 - to every call we have like three to four
117:34 - live calls every single week succumb to
117:36 - those be a part of the slack community
117:37 - go through the modules like really
117:39 - extract a value out of the program and
117:42 - you're gonna be mind blown by it exactly
117:45 - because we always say it's always about
117:48 - how much effort you you put into the
117:50 - course which is going to determine how
117:52 - fast your progression is so I tend to
117:53 - those live calls make sure you're there
117:55 - every single time and just show up and
117:57 - the results will come yeah awesome nice
118:00 - so now if we go back to the code I found
118:03 - the code that we were looking for if we
118:07 - go to app Doge is yeah so you see this
118:10 - here it says firebase dot fire store dot
118:12 - field value server timestamp right got
118:15 - it
118:15 - now this is something that is that
118:17 - finally this is this is uh this is
118:19 - firebase is server right this is our yes
118:23 - okay this is where our app is hosted yes
118:26 - there's gonna be if where the day is
118:28 - stored the timestamp of that server yeah
118:31 - okay yeah and the reason why we use this
118:34 - is because when we push in no matter
118:36 - where we are in the world where we push
118:37 - in that timestamp is going to be
118:39 - consistent with ever
118:40 - run yeah right so what we might need to
118:43 - do now is actually delete all the
118:44 - current to do is because they're not
118:45 - gonna have time stamps so if we go into
118:48 - fires store and we just go there what we
118:52 - can do is a shortcut for this is if you
118:53 - go on the three dots on the top right so
118:55 - those three dots click delete collection
118:58 - and just type introduce ya to dues we
119:03 - can delete the collection and once you
119:04 - guys if there's no collection even if we
119:06 - push the collection in it will create
119:08 - one for us does it does it still keep
119:10 - them somewhere and like could you like
119:12 - restore it or is it just gone gone like
119:15 - so as far as I'm aware it's gone gone
119:18 - dang I think there is a robot mechanism
119:20 - so you don't actually need to do to do
119:22 - sir you don't need to create another one
119:23 - oh wait because I was gonna show you how
119:26 - it works even without it so oh because
119:28 - yeah I mean yeah we shouldn't have to
119:30 - right because they'll create a
119:31 - collection on the fly if it doesn't
119:33 - exist is that what it does exactly that
119:35 - is another emoji plug-in I'm using by
119:39 - the way guys it's called it's called
119:41 - rocket emoji it's fantastic get it it's
119:46 - Matthew Palmer net so crazy it's for Mac
119:51 - not for PC find something on PC but it's
119:53 - absolutely awesome so I just hit colon
119:55 - and then I'll just write my whatever
119:56 - rocket or whatever word and then it like
119:58 - pops it up
119:59 - yep exactly yeah awesome so now if we go
120:06 - to the react app you know so here so
120:09 - yeah back to the code so where we do the
120:13 - on snapshot all we need to do now to
120:15 - sort it is crazy
120:16 - what we need to do is just do order why
120:20 - we say order by and order by takes two
120:24 - parameters right it takes so it's just
120:27 - like a chaining right so we say order by
120:28 - the first parameter is like to do it's
120:33 - gonna be the actual cookie you do yep so
120:36 - the key is to do in this case right so
120:39 - remember while we sewing it by the tit
120:41 - to do or the time stamp the times the
120:44 - time stamp yes so this bit will be the
120:47 - time stamp yep and then you would have
120:49 - ascending or descending
120:51 - so hello I see okay descending
120:54 - would be a sin descending right-t
120:56 - something because because the most
120:59 - recent one is gonna be the highest value
121:01 - yeah
121:03 - so that's correct then right descending
121:06 - yeah that should be correct so now if we
121:09 - save that and give that a go hopefully
121:11 - everything's done well so here we go so
121:17 - I tried a and Z just because I wanted to
121:21 - see if it does it automatically but it
121:22 - doesn't it just does it by timestamp oh
121:26 - by the way cause II it didn't do it by
121:29 - your value last time alphabet it did it
121:31 - by the idea generated for that document
121:34 - I don't understand what so if you go to
121:39 - fire store now yeah but the collection
121:42 - and refresh because you're gonna have to
121:44 - refresh this hunt together they're not
121:45 - made with react so you see each of these
121:51 - have a unique ID right yeah and then
121:54 - they get by themselves that's what it
121:57 - was sorting by a alphabetically the
121:59 - unique ID beautiful so wait hold on oh
122:03 - that it's that's what I was doing before
122:06 - but right now it's doing it by timestamp
122:09 - right exactly yeah okay cool yeah
122:13 - awesome nice so yeah somebody said hey
122:18 - Sonny put the order as an input so the
122:20 - user can choose whether to view in
122:22 - descending ascending that's genius
122:23 - I think we should try that this this
122:25 - I've never done that let's try that out
122:27 - that's really good let's do um so this
122:30 - go back to the code and this add a quick
122:32 - sort of drop-down I guess uh-huh so if
122:34 - so this how do you do an input inputs is
122:38 - it switch switch oh you're trying you're
122:42 - gonna do some fancy e note stuff by the
122:45 - way son CER joined welcomes ANSI oh nice
122:49 - welcome also let's try this out so let's
122:54 - do something like actually know this
123:00 - first year's deploy it and then we'll
123:01 - give that a go because that's a really
123:02 - nice idea but I think deploying it would
123:04 - be a cooler thing to try first yeah
123:07 - we can add the delete functionality to
123:09 - what is this complaint that's happening
123:12 - actually I can just ignore that right
123:14 - yeah so this is actually quite an
123:16 - important thing right this is um
123:19 - well the keys are important and react
123:21 - further for the sort of demonstration of
123:24 - this like for going through this demo I
123:26 - don't think we would go through
123:27 - everything on the keys because I think
123:28 - it might take a bit time but I'll show
123:30 - you actually how we could do this I mean
123:32 - with you know cuz we're gonna add
123:33 - deleting we do you need to add keys
123:35 - anyway okay yeah we can do that it's
123:38 - good let's give it a go then yeah so
123:40 - what we'll do now is let's first do a
123:43 - deployment and then we'll add the delete
123:45 - functionality yeah yep let's do it down
123:48 - so to deploy is so simple firebase
123:52 - deploy that's it literally so now if you
123:55 - want to go to your terminal yeah yep and
123:59 - what we need to do now is do something
124:01 - called firebase space in it right and
124:06 - this is gonna pop up the firebase CLI so
124:09 - it's a really nice sort of user
124:10 - experience here now what we want to do
124:11 - is just go to hosting and press spacebar
124:14 - and not fire store or anything else
124:17 - because we've already set that up yeah I
124:19 - mean fine store so if you add this here
124:21 - what it's gonna do is it's gonna give
124:23 - you a filed it's to determine like
124:25 - security roles yeah so if you want to
124:27 - apply like security rules to your
124:28 - database that's where you could bring it
124:30 - in here but we can do that later if you
124:32 - want but I mean I haven't actually
124:33 - tinkered too much with the rules but god
124:35 - hosting is that is where we do it here
124:37 - so if you do hosting and then press
124:38 - Enter cool and then you just click on
124:41 - use existing project cool and we find
124:45 - the one that we have there mr. to-do app
124:47 - CP right yeah and then here this bits
124:52 - really careful guys you have to type in
124:53 - build yeah so this is a reacting so we
124:57 - all of our build stuff goes into your
124:58 - photo code build so yeah we do that and
125:01 - then here it's so react is a single page
125:04 - app which means all of the entire app
125:07 - loads in one go so here we want to click
125:09 - yes yes oh really oh yeah yes okay
125:15 - because by default it's a no so you
125:17 - can't just hit enter here yeah you would
125:20 - have to
125:21 - - yes yeah cool and then there we go
125:24 - so now what we need to do is run two
125:28 - commands one off to another so the first
125:30 - command is gonna be MPM run build so if
125:33 - you wanna run that one first and what
125:35 - that's gonna do guys is this basically
125:37 - gonna so one whenever we're coding react
125:39 - we have a bunch of extra stuff that
125:41 - happens right we have hot reloading we
125:43 - have all this extra stuff and that's
125:45 - basically gonna allow us to have a
125:46 - really nice developer experience so
125:48 - every time cause he saves the file it
125:50 - reloads and it refreshes so that way we
125:52 - can develop easier that stops quite
125:54 - heavy so we don't want those features
125:57 - when we deploy it right so what we do is
125:59 - we do NPM run build and basically it
126:02 - wanders up our entire app into a really
126:05 - really efficient tiny package yep right
126:09 - and then when it has that tiny tiny
126:11 - package then we deploy that tiny package
126:14 - so that goes into the build folder so
126:16 - now you can see on the Left we have a
126:17 - build folder and we don't touch the
126:19 - folder we don't really look into it but
126:21 - this is what gets generated this is what
126:24 - gets generated by NPM run build so once
126:26 - we have that now we do something called
126:28 - firebase deploy and what that's gonna do
126:31 - is it's going to basically go to our
126:33 - build folder find the contents and then
126:36 - deploy it oh nice the most simple
126:39 - deployment I've ever seen in my life
126:41 - Dan so now if you click on posting URL
126:44 - that's a live link guys that's a live
126:47 - link which is completely free what your
126:51 - guys jump on this app right now it's
126:53 - live so let's paste that into the
126:56 - comments let's see everyone get your
126:58 - side put this in the comments Frankie
127:01 - you can I can't
127:03 - okay else like you else like you here I
127:05 - got I got it
127:07 - so Frankie here I just liked you you can
127:10 - drop it in the chat for everybody and
127:13 - guys if you like this and find this cool
127:16 - throw a story on Instagram and tag us
127:18 - when you see everything flying through
127:20 - yeah it'd be awesome to see that oh yeah
127:23 - because we'll have everybody starting to
127:25 - write on here right yeah that would be
127:28 - insane right yeah we had a hold on we
127:30 - had a mark
127:32 - Johnson just enrolled in pwj nice sensi
127:40 - just enrolled in pwj oh we got people
127:45 - here now they're saying yo it's almost
127:47 - like a chat app right look at that we
127:50 - basically have a job to do out nice yeah
127:55 - awesome that's actually fast maybe we
127:58 - should have started to somebody said
128:00 - subscribe to clever programmer Sam says
128:02 - hey somebody says by the course alright
128:06 - maybe we should have started with this
128:08 - you know next time like have everybody
128:11 - start that would have been yeah yeah
128:15 - nice and guys this is showing you how
128:18 - powerful this is right now like there
128:20 - was no service setups there was no like
128:22 - headache and sort of intricate setting
128:24 - up it's literally a case of we just
128:27 - deployed it we had it connected to fire
128:29 - store and look at this everyone from
128:31 - around the world is all check it out so
128:33 - somebody that there's a react worth to
128:34 - trouble
128:34 - 100% 100% is worth learning is one of
128:39 - the most I think Kazi is one is the most
128:43 - highly demanded framework a lot yeah
128:45 - look at look at all these records that
128:47 - are coming in though yeah seriously guys
128:51 - this is like react is one of the hottest
128:55 - trends in the world right now it's one
128:58 - of the things that it's the most looked
128:59 - up and it blew my mind when I started
129:02 - building things with it myself and I I
129:05 - mean I'm really excited right now
129:07 - because I'm actually learning all these
129:09 - skills too about how to actually use
129:11 - react to host it on firebase to have a
129:14 - full crud functionality within your app
129:16 - it kind of blew my mind how simple this
129:18 - was because whether you use Python and
129:20 - Django or you use any other whatever you
129:24 - use making to-do list apps and all of
129:26 - this stuff you have to add so much
129:27 - tedious functionality to make it fully
129:30 - crud enabled even if it's like with the
129:32 - REST API and you have to have so many
129:34 - new routes and so much stuff and this is
129:36 - just single page because normally sunny
129:38 - what you have to do is like you got to
129:40 - create all these like different pages
129:41 - and then you got to have all these
129:42 - different endpoints like slash delete
129:45 - and slash
129:45 - create and this was exactly honestly the
129:48 - simplest one that I've ever seen yeah
129:52 - and guys its production ready so if you
129:55 - get a client who wants you to build a
129:57 - website your turnaround time here is
130:00 - ridiculously fast Wow like you can get
130:03 - this running very quick let's say like
130:05 - Kazi wants to update something in the
130:06 - webpage now and change it and fix it all
130:09 - he has to do is make the change npm run
130:13 - build and firebase deploy and the things
130:15 - done Wow
130:16 - that's fans in sane that is fantastic
130:19 - I mean I love that they're actually
130:21 - writing on here so how can we add the
130:23 - delete functionality yeah awesome
130:26 - so Abdullah said guys pose for the photo
130:29 - nice gonna give you five seconds five
130:35 - five four three two so now if we want to
130:48 - add a delete functionality so this is
130:50 - gonna take a little bit of work right
130:51 - really
130:52 - so I say that but it's actually not that
130:55 - much good so yeah now what we need to do
130:57 - is we need to remember we were doing it
130:59 - to a flat array here right yup so now
131:03 - what we want to do is we need that
131:05 - object so we actually we we need we can
131:07 - keep this structure but we need the ID
131:11 - right uh-huh because we need to know
131:13 - which document it is that we really ya
131:18 - know which document which ID to delete
131:21 - right yeah so here what we can do now is
131:24 - we can actually do so this is again we
131:27 - already understand what this bits doing
131:28 - so we kind of just need to create an
131:31 - object right so it's gonna be an object
131:33 - and here what we're gonna do is we're
131:35 - gonna say that object is gonna have a
131:37 - key with to do right and that's gonna
131:40 - have what we had previously
131:41 - right but it's also gonna have an ID and
131:45 - this ID is gonna be dock door ID so what
131:49 - we're doing here now is we're not just
131:52 - having the flat structure that we had
131:53 - before you have an object whether to do
131:57 - yes
131:58 - is what we had before
131:59 - but we also have the ID got it yep and
132:03 - and we're still gonna have array of
132:04 - objects right yes so now we're gonna do
132:08 - an array of objects but if we save this
132:11 - now it's going to break so it's going to
132:13 - break now because the it is passing
132:17 - through an object now in our component
132:19 - yep right so insan line 48 now we now
132:24 - this is now an object where we have to
132:26 - do to do and then we have to do the ID
132:29 - all right my bad so so if this once it
132:33 - starts running is actually going to
132:35 - break
132:35 - so Chad William says can you get a job
132:37 - after taking this course actually it's a
132:40 - really good question because a lot of
132:41 - people actually get jobs while they're
132:42 - on the course or they get clients while
132:44 - they're on the course right by the
132:45 - seventeen-year-old he's landed his own
132:48 - coaching client which is insane he's
132:50 - actually on the court - right yeah I'm
132:53 - an earth actually landed 180 dollars
132:55 - from a coaching call which is insane
132:57 - guys yeah yeah so you can definitely do
133:00 - that that's crazy
133:02 - yes so if you go back now cause you to
133:05 - you so it says to do you need to save
133:08 - this yep uh-huh okay save saved save and
133:12 - now it will error out so if we go back
133:14 - to our code it's going to what happens
133:18 - this is gonna freak out in a second and
133:20 - it's gonna say well you're passing an
133:23 - object object is not a child or some
133:24 - kind of crazy error is gonna pop up it's
133:29 - now yeah see like it's bugging out it's
133:30 - like fully are bugging out right yeah so
133:33 - as you see this objects are not valid as
133:36 - a reaction to this is happening because
133:37 - we're now passing an object so if we go
133:42 - back to the code apt yes line 48 so now
133:46 - to do is no longer a string right haha
133:49 - so to do is actually an entire to do so
133:52 - if we now if we pass in to do yeah yeah
133:55 - so if we go inside of our to do
133:57 - component also integer dot yes to do
134:02 - that Jace got it okay by the way I'm
134:04 - following you so I think if you go to it
134:06 - I'll go to it on Oh awesome so now you
134:11 - see where we have props
134:12 - here we had props text before now it's
134:15 - props dot to do yep dot that got to do
134:20 - remember that's what the key is right
134:21 - yep yep yep so this is like really like
134:23 - this is the text part and this is the to
134:26 - do object
134:27 - yes exactly okay and now what we're
134:31 - gonna do now is every single to do is
134:33 - gonna have a button on it right and this
134:37 - one is gonna say delete me yep right
134:42 - yeah and basically we're gonna have a
134:45 - function which is gonna be up here which
134:48 - is a say Const you don't actually even
134:49 - need a function but I will show you how
134:51 - we can write this but here we're gonna
134:53 - say Const and this one's gonna say
134:55 - delete you know what I'm going to show
134:58 - you how we can do this without even a
135:00 - function so we can do it in line so here
135:04 - what we're gonna say is we're gonna say
135:05 - unclick right
135:07 - unclick so let me click this button I'm
135:10 - gonna say yeah that makes it that's
135:11 - that's a really good way to do it on
135:13 - click like basically remove it yeah
135:17 - so unclick and then here what we're
135:19 - gonna do is we need we need a DB so we
135:22 - need to say import DB from firebase so
135:26 - you can say from firebase and guys
135:29 - remember this is our local firebase not
135:32 - the dependency firebase yeah all right
135:34 - so this is our PO that we created and
135:35 - then here we're gonna say DB drop
135:38 - collection thought to do as introduced
135:42 - and then we're gonna say delete and then
135:45 - delije is basically going to have I
135:48 - think here we literally do props dot to
135:53 - do dot oh no sorry sorry not that one we
135:57 - don't do that we say go to the doc with
136:00 - the ID so props to do the ID you go to
136:04 - that ID and then we just say delete and
136:08 - that's it that should literally do it I
136:09 - think that's a identifier expected this
136:12 - is because we have we need to wrap this
136:14 - inside of a print so break it here and
136:19 - then we do this that's wait why are
136:22 - there two squigglies
136:25 - because we were I think I think we
136:29 - didn't import the button that's why
136:30 - actually wait I don't what the hell so
136:33 - another so to get rid of these for a sec
136:36 - I'll show you I the reason why it's
136:37 - freaking out right now is because we
136:39 - haven't imported this so yeah there you
136:45 - go okay cool yeah so now we're just
136:48 - running the jump okay yeah there we go
136:50 - that makes a lot more sense we need to
136:52 - import the material you I yeah say I'm
136:55 - missing why don't you put a bin icon
136:56 - yeah that's what I want to do that's I
136:58 - just put like a X emoji but we're gonna
137:00 - put like an icon yeah and we're actually
137:03 - going to show you how you can use
137:04 - material UI icons which would be even
137:06 - don't let modo
137:07 - so let's refresh this and see what
137:09 - happens I'm refreshing you need to save
137:12 - apt yes cause otherwise it's not gonna
137:15 - yeah okay there we go and now we should
137:20 - have done everything right so it's gonna
137:22 - be to do and then to do don't to do yeah
137:25 - so okay so we're here yeah when I try to
137:32 - write it just kind of crashes oh oh all
137:36 - the delete Me's are right there yes oh
137:39 -  you go woah it's actually deleting
137:43 - it
137:44 - I think it's deleting it
137:50 - yeah no it is deleting it so I tell you
137:52 - what cause if you put one window on the
137:55 - on the right for the firebase app and
137:57 - then you just keep hitting delete and
137:59 - have the react app on the left you
138:02 - should be able to see the actual
138:03 - database showing red lines where it
138:05 - deletes it AHA okay so now if I hit
138:09 - delete oh there are so large it might
138:12 - not be a case of yeah so if you just
138:15 - spam the delete one so yeah so you keep
138:20 - going to Lee and so it's gonna delete
138:22 - eventually to a point I think yeah it's
138:25 - gonna get to a point we're not gonna see
138:26 - it cuz there's so many things yeah yeah
138:29 - it's definitely doing it yeah
138:32 - is deleting it oh I saw it on the red
138:35 - you see the red I saw the red yeah
138:38 - so it is actually deleting it delete my
138:41 - message please
138:43 - nice nice right so that's actually
138:48 - honestly insane because from one line of
138:50 - code we literally just delete things and
138:53 - we did that by using the ID of the to do
138:56 - yeah right so yeah if we want to use the
139:01 - icons it's very simple and material UI
139:04 - they've got an icon packed so if you go
139:06 - into Google and just type in material UI
139:08 - icons so what you need to do is do an
139:16 - NPM I and then you need to install the
139:20 - package so when you go into that one
139:21 - you'll see you see that material UI
139:23 - icons so you need to the NPM I am here
139:30 - my two URI cons yeah nice and that will
139:40 - install of the icons and to actually use
139:43 - them it's super simple
139:45 - so now if we actually go back to that
139:47 - page that you're on and type in bin or
139:50 - delete so these guys are going what's up
139:57 - so if you go to material UI they're
140:00 - spamming this a lot so let's just shut
140:03 - it down is there a way we can undo it
140:07 - so under playing it so if you go to
140:11 - whoever yo just stop your spammy
140:15 - messages okay so if you're this
140:18 - up for everybody we're gonna ban you
140:20 - from the account you know from the
140:22 - YouTube account so if you're if you if
140:24 - you want to do that just don't be here
140:26 - please we want to just make a good
140:27 - environment for every single person but
140:30 - in the music I'm Frankie can you make
140:31 - can you make a few people admins and
140:34 - then just tell them like they have
140:35 - permission to kick anybody out that's
140:37 - actually causing a bad experience cuz
140:39 - somebody keeps spamming Ahamed ill and
140:40 - all this stuff so just kick a dil out as
140:43 - well and then anybody else was doing
140:44 - that because we just want the
140:46 - environment to be really really good you
140:48 - know
140:50 - exactly yeah okay go ahead go ahead
140:54 - yeah because we don't want it to be spam
140:55 - guys and we just want it to be a good
140:57 - good environment for everyone to sort of
140:58 - learn from is the difference between
141:00 - when you do something for free when you
141:02 - have paid like you never have this
141:04 - happen right so that's why in the
141:06 - program when you actually join profit
141:08 - with JavaScript it's a very clean
141:10 - community and we keep it very organized
141:11 - because if somebody does that yeah we
141:13 - will literally throw them out of the
141:14 - course on the same second
141:16 - so that's never gonna happen there's but
141:18 - that even goes for girls guys like a lot
141:20 - of girls actually you're in the course
141:22 - and there's people that say
141:22 - inappropriate things we don't tolerate
141:24 - anything so it's a completely safe
141:27 - comfortable environment for everyone to
141:30 - be a part of once you're inside the
141:31 - course right yeah yeah because I mean
141:34 - really we will fly to your house and
141:36 - kick in your door if you are acting like
141:40 - that around other people because people
141:42 - are above everything exactly yeah
141:46 - so now what we want to do is we
141:50 - installed the icon pack a Chad just
141:53 - joined a welcome to the program that's
141:55 - awesome
141:59 - okay cool Steve intros coaching cool
142:02 - yeah yeah you're you're doing your react
142:05 - coaching call tomorrow right Sonny yeah
142:07 - nice yeah okay app 7:00 p.m. PST
142:10 - that's it okay 7:00 so sure 7:00 p.m.
142:14 - PST isn't that late or is a 12 p.m. I
142:17 - think is 12 p.m. est so your time is 12
142:20 - p.m. you 11 a.m. I think
142:23 - okay okay got it got it 11:00 yeah
142:25 - Pacific got it and 7 p.m. your time yep
142:28 - that's it so if we let's go to material
142:32 - UI on the website uh-huh let's click on
142:38 - so material UI yep the docks and then
142:41 - you see where was the icon 1 so you see
142:44 - a right tab the one on the most right
142:46 - you got meteor UI yeah so you click on
142:49 - another so at the top tab so you've got
142:51 - a tab open material icons material ok
142:55 - right here yeah so you see search icon
142:58 - so this is like a little search drawl
142:59 - right so if you click it if you type in
143:02 - bin
143:03 - to lead it forever so that's a good one
143:06 - yeah so now you see it's gonna import
143:08 - that right ooh clean so clean guys like
143:11 - it's crazy I'll clean this is so now you
143:13 - go into the to do Jas that's all right
143:17 - so it wouldn't be here would be inside
143:18 - of the to do yeah you'd put inside it to
143:20 - do jazz and then here you wanna do
143:25 - import and then you want to chuck it and
143:26 - - yep
143:28 - what was that shortcut that you showed
143:30 - me that switches between recent files
143:32 - yeah come on P yeah command P and then
143:36 - what you just let go of it let go of
143:41 - what come on P so you press come on P P
143:44 - twice so press con PP yeah oh that's it
143:48 - they go nice yeah this is awesome like I
143:52 - always switch between two recent files
143:54 - oh that's really sick that's quite handy
143:57 - for being fast so now all we need to do
144:00 - is type in literally so we're delete
144:03 - forever icon if you just replace button
144:06 - so you see where you've got button yep
144:08 - so you don't even need to do that
144:11 - honestly you could just you see if you
144:13 - if you highlight a button yeah do that
144:15 - and then literally make button self
144:18 - enclosing so you don't have any text for
144:20 - the button so we can get rid of all the
144:23 - text and all of the right stuff oh nice
144:26 - so make it a self enclosing attribute so
144:29 - oh so like okay so you mean like
144:32 - basically do whoops
144:36 - do something along the lines of that so
144:42 - is that what you mean yeah exactly yeah
144:45 - okay yep cool and is it is it easy to
144:49 - underplay the app or no yeah I think it
144:53 - is quite simple if you go to the
144:54 - firebase console we can we should be
144:56 - able to see there I think there is a way
144:59 - to do that yeah or we could just deploy
145:01 - a dead version of it so it stops there
145:04 - so if you go to on the left and you go
145:07 - to hosting so hosting you know hosting
145:12 - right here yeah you see one of the
145:15 - deployments of that so
145:17 - oh you need to go back to hosting so
145:21 - yeah that one and then it will refresh
145:24 - and now you see you've deployed it the
145:26 - bomb but if you go to so the three
145:30 - arrows the three dots are three dots see
145:35 - on the way it says epic Kazi a clever
145:37 - programmer calm uh-huh then you go like
145:40 - that and then let's see so really
145:45 - storage things so now what I think we'll
145:48 - do instead is pretty much have it so
145:50 - well I mean what we could do is we could
145:52 - actually deploy a bugged out version so
145:55 - we'll do that quickly to stop everyone
145:57 - sort of spamming it okay yeah yeah so if
146:00 - you let's just quickly do this so we'll
146:02 - basically have it so I will disable the
146:04 - form and all of this so in a projects
146:08 - I've just disabled the form so I pretty
146:10 - much like just commented it all out yeah
146:13 - and then I'm gonna do so you need to do
146:19 - it in the in the terminal okay you just
146:21 - need to do NPM run build so if you do
146:24 - ampere mumbled and and uh-huh
146:27 - firebase deploy yeah now this would it
146:32 - will rebuild and deploy until shortcut
146:35 - this guy is a really handy trick is if
146:36 - you go package Jason now cause it yeah
146:40 - and then you see in package Jason on the
146:43 - left so on that the file the
146:45 - package.json file yep yeah so that
146:48 - command those two commands what we can
146:50 - do is we can actually combine it and
146:52 - make a command here called deploy nice
146:55 - nice nice nice oh yeah and then do you
146:57 - have to install also react scripts or do
146:59 - we already have that I know it
147:02 - automatically does that when you use
147:03 - creator yeah the reason why we don't
147:05 - want to put a lock on databases cuz we
147:08 - still want to use it you we still want
147:10 - to use the database yeah but like the
147:13 - online version is gonna be bugged out
147:14 - now so nobody will be able to use that
147:16 - but the actual version will be fine I
147:19 - mean I've got an idea like maybe in the
147:22 - future what we can do is like deploy it
147:25 - in a way where anybody who comments
147:27 - anything that's like
147:30 - bad then it can kind of just filter that
147:35 - you know it just has like natural
147:36 - language processing I'm sure there's
147:38 - probably just a really easy way to add a
147:40 - filter we should do that actually you
147:43 - know we should we should have a a cloud
147:44 - function which runs every time somebody
147:47 - brings a message in yeah check if it's
147:50 - uh that's a that's a good use case
147:52 - because literally we need that yeah
147:56 - that'd be awesome we should definitely
147:57 - build that yeah who did that I'll be
147:58 - nice
148:01 - awesome so now if you wanted to run that
148:04 - call you the NPM run deploy and it would
148:05 - do that but it's all ready to play the
148:07 - thing is is that some people have a
148:08 - cached version oh it only be internet
148:11 - refresh they actually does I assume but
148:14 - yeah but I should should fix it mainly
148:16 - okay change now or else yeah exactly
148:23 - cool so I think what we'll be doing now
148:26 - let's go to your localhost
148:27 - yep okay so NPM stop mm-hmm did we
148:34 - install react scripts or did it already
148:36 - come with it it automatically comes with
148:39 - it when we do NPM I thought when we use
148:42 - create react up it automatically sets
148:44 - everything up okay yeah oh I need to
148:46 - uncomment this there we go so if you
148:49 - saved that phone Oh
148:50 - so we're save app to jet uh-huh yep and
148:54 - then come back so now yes you see that
148:58 - no delete icon
148:59 - yep nice nice if I click it it goes away
149:03 - Oh clean yeah so you can add some CSS
149:07 - rules around it which changes it to a
149:08 - point uh which is kind of cool so that
149:12 - way it looks a bit more interactive and
149:13 - you can have it so they like it gets a
149:15 - little bigger and you so hover over I
149:16 - mean the main main thing right now the
149:18 - only big thing that's left from this is
149:20 - to be able to edit an existing to do
149:24 - okay so editing an existing to do is
149:27 - more but I'm actually sure let's figure
149:30 - out that one so we would need to either
149:34 - do a modal yeah or something like that
149:37 - would pops up yeah I can do something
149:39 - like that or we could do a
149:43 - [Music]
149:45 - wanna see me let me have local material
149:48 - you either see what models they have
149:49 - material you I am model there's a few
149:53 - ways you could do this one okay so let's
149:57 - have a look so modal simple model okay
149:59 - yeah so let's use this as an example so
150:02 - we're gonna have a button on D to do
150:05 - yeah so if we go to our to do component
150:07 - let's okay hold on or to do component
150:11 - yep yeah so every component is gonna
150:15 - basically have a module attached to it
150:17 - right so it's gonna have a nice you're
150:19 - not just joint that's awesome welcome
150:21 - Jana nice welcome
150:24 - awesome so now what we're gonna do is
150:27 - we're gonna have a modal so let's just
150:30 - have so you you can't ever have two
150:34 - things
150:35 - next siblings you have to wrap it in
150:37 - something called a rack fragment uh-huh
150:39 - you see like to zoom in so what I'm
150:41 - gonna do is have a modal outside so you
150:43 - see this see what modal and then what
150:48 - we're gonna do is this is just code from
150:50 - material you are guys and what this is
150:53 - gonna say is this is gonna be a piece of
150:55 - state which basically tells us if the
150:56 - modal's open or not and this is gonna be
150:59 - a function which is basically gonna
151:01 - handle what happens when you open the
151:03 - model so I will get the code for that
151:06 - here so if I do this now and I have it
151:09 - here so handle open handle closed and
151:11 - then I do Const so we need to keep track
151:14 - of what open is right so we need a piece
151:16 - of state mm-hmm so you stay and then
151:21 - this is gonna be by default it's gonna
151:22 - be false because it's not going to be
151:24 - open right yeah so handle open handle
151:29 - closed so right now this just makes it a
151:31 - bit simpler because we just call that to
151:33 - open it we call that to close there nice
151:35 - its ability you could just do it like
151:38 - this you could just literally do on
151:39 - closed e set open to be closed and then
151:44 - we don't need this pair code okay great
151:46 - and then open with the same thing yeah
151:49 - yeah and the same so we want it to open
151:51 - this is the thing way we want it to open
151:54 - when they click and edit
151:56 - button so when they click a button so
151:57 - right now we just have a simple button
151:59 - right edit me so idea and then here
152:01 - we're gonna have on okay lay thank you
152:04 - war war p9p and t9 that's life he's in
152:09 - profitable shortcut program thank you by
152:12 - the way so yeah he's really good nice
152:15 - yeah here we have set open to be true so
152:21 - that way we want that modal basically
152:23 - just to pop up when the person clicks it
152:27 - right yeah so then we're gonna have
152:30 - simple modal was a simple modal it's a
152:33 - good one second I'm just trying to find
152:36 - the code for it so bully okay so now I
152:41 - just want to test this so I want to say
152:43 - let's just have a div inside of here and
152:45 - it's just cool like an h1 saying open
152:48 - and then we're gonna have a we're gonna
152:53 - have here a button which when you click
152:56 - that button it's just gonna say on click
152:58 - it's gonna close it for us so I'm gonna
153:00 - say on click II set open to be false so
153:05 - now we've got a button inside of our
153:07 - modal because this is the body of the
153:08 - modal right it pops up yeah I'm a modal
153:15 - not a model oh yeah
153:20 - and then here on close so now if we
153:22 - actually run this so we save this and
153:24 - run this okay save it oh we need to do
153:27 - the imports yeah we need to the imports
153:29 - so you stay we need to import it here so
153:33 - model and then where's you also date you
153:39 - state it's it's up it's already there
153:42 - just that I think yeah you know the
153:44 - modal model is here too now nice so now
153:48 - if we run them so another thing I didn't
153:51 - fancy I know right oh boy look at that
153:58 - modal I mean it's popping up so I'm
154:00 - pumped I can I'm gonna click out of it
154:02 - it goes away yeah awesome right so
154:05 - obviously we can style it we can make it
154:09 - look really pretty
154:09 - right now it's quite ugly but we can
154:12 - make it look really nice afterwards yeah
154:14 - so no we want to do is we need it
154:19 - shouldn't it look somewhat normal it's
154:21 - coming out of material UI right yeah
154:24 - because we're not actually using so they
154:25 - have something called modal style so if
154:27 - we implement that so I will send you a
154:29 - link for the if you just go to google
154:34 - and type in material UI modal you'll see
154:36 - where I'm at uh-huh yep
154:47 - and there you go so that's where I'm at
154:48 - now so I was just looking at some
154:50 - example code so I was like eh you see
154:52 - where it says toggle the code snippet
154:54 - okay modal right there editing code
154:58 - sandbox by the way code sandbox is
154:59 - freaking awesome you guys
155:01 - yes that's a really good way of playing
155:03 - around with this yeah actually by the
155:05 - way sunny maybe in the future we should
155:07 - be really using code sandbox to do this
155:09 - type of stuff cuz then that would be
155:11 - cool
155:12 - literally everybody could follow us
155:14 - along that's true yeah that's very true
155:17 - is it read-only
155:19 - can we do like a read on anything well
155:20 - they can't write on our thing like they
155:23 - would have to fork it oh nice okay yeah
155:26 - that's really good the same update in
155:28 - real time like if I was to come to yours
155:30 - oh yeah I mean for us I think it would
155:34 - be updating in real time and then for
155:37 - them it would just be like if they want
155:39 - to change the write the code they won't
155:40 - have access to write the code they would
155:41 - have to fork it or something that would
155:44 - be awesome yeah we should definitely do
155:45 - our next time yeah yeah cuz then I guess
155:48 - then people won't have to suffer this of
155:50 - stying up headache you know follow us
155:54 - along as we're building it exactly okay
155:58 - let's just see where they've get the
156:00 - styles from now so you can see in if you
156:04 - go to show the source of that code so
156:06 - that it over here in its package okay so
156:12 - you see here yeah so you see the motor
156:16 - right styles right here and it says yeah
156:19 - and inside of the modal so on at the
156:22 - bottom do you see where
156:23 - the modem on the screen holy yeah
156:26 - it's crazy right
156:27 - what is this recursive models great and
156:32 - they all like nested correctly as well
156:34 - which is crazy so now if you go to the
156:37 - bomb uh-huh
156:39 - so you see the body right that little
156:41 - body object on line 45
156:44 - yep that's rendered in line 66 inside of
156:48 - the modal right uh-huh
156:49 - and if you see on the body so 46 to 52
156:56 - right they say div style equals modal
157:00 - style and class name equals classic
157:02 - paper right yeah so modal style is using
157:06 - something called if you follow the code
157:08 - up it goes up and it gets modal style
157:10 - which is a bunch of random stuff so
157:13 - we're gonna ignore the get modal stuffs
157:14 - we're gonna ignore modal stuff now we're
157:16 - gonna get class name that's the one
157:18 - we're interested in yeah right so they
157:21 - use something they've got a hook called
157:23 - use styles so if you scroll up yeah so
157:26 - we're basically gonna implement that so
157:28 - in order to do we need to do yeah we
157:31 - need to basically add that so at the top
157:34 - above our function yep there you go and
157:37 - here we need to basically inside here we
157:40 - do Const classes equals use styles I
157:45 - think that's it and then here I think we
157:49 - have to import that I don't know what
157:51 - the import was was it so it's important
157:58 - we'll make the code available for this
158:00 - later I just I think like aren't we
158:02 - gonna have problems with sharing api's
158:05 - yeah I mean I'm not sure if they cuts
158:08 - off after a certain time so what we
158:10 - could do you guys is we'll actually
158:12 - upload the code
158:14 - I mean how will we give it to them
158:17 - that's the thing so what we'll do is
158:20 - we'll upload it in a public repo but on
158:22 - the config part all you need to do is
158:25 - sell a firebase like for set of fibers
158:28 - yourself and then on the config part you
158:31 - just need to basically where we got the
158:32 - key so that config stuff you just copy
158:34 - and paste your one inside of there so
158:37 - so what we'll do is after this video is
158:39 - done in the description underneath the
158:41 - video we will put the link to the code
158:44 - and then you can go there so if you're
158:45 - watching this right now as a replay you
158:48 - can like in the description it'll be
158:50 - there and then you can just like get the
158:52 - code from there exactly yeah
158:55 - yeah so at the top I just imported make
159:00 - styles uh-huh yeah so I just imported
159:05 - mix tiles at the top yeah and then we
159:08 - use that in this line of code here yeah
159:10 - and then so that's a hook and this is
159:12 - basically how you style things in
159:13 - material UI guys so that's actually the
159:15 - documentation which is told us to do
159:16 - that if we then save this and we run it
159:20 - if we should now have the styles that we
159:23 - saw roughly roughly I mean it may be
159:25 - full screen but it will roughly work
159:30 - okay there okay so I think maybe one
159:33 - second is it saved correctly let me see
159:38 - I'll go to app just save is there like
159:44 - anything else I have to save besides to
159:45 - do an app oh we didn't have the classes
159:48 - so the actual modal has no Constitution
159:50 - at the moment so you see the body right
159:53 - now yeah yeah yeah you need to do
159:55 - classes that paper right yeah there we
159:57 - go yeah there we go
159:59 - this oh nice there we go that's clean
160:10 - nice okay now what we're gonna do is we
160:16 - are going to hook up the actual logic
160:19 - for this so right now the buns empty
160:21 - guys because we have no text in it so if
160:24 - I say update update to do and this is
160:28 - gonna be not a normal button but a
160:30 - material UI bun so we're gonna say
160:32 - button I'm gonna import that from the
160:35 - top yes we already imported that so now
160:38 - we've got the material UI button but
160:40 - remember guys when we click update to do
160:42 - we don't just want it to do this right
160:44 - we don't want to just close the modal we
160:46 - actually want to execute an update
160:48 - function right yeah so this create a
160:50 - function
160:51 - we're gonna call this update to do all
160:54 - right and what this is gonna do now is
160:55 - it's gonna basically do this so it will
160:57 - set this open to false so we'll do that
161:00 - but we're also going to do a bunch of
161:02 - stuff is when I say update the to do so
161:05 - update the to do
161:07 - yep with oops with the new input text
161:12 - right yeah which means that we also need
161:16 - the input text here well we need an
161:19 - input field right we need some kind of
161:21 - input here yeah yeah so what we're gonna
161:24 - do now is remember before what we done
161:26 - is we previously had we needed to do
161:30 - there's a few steps that we need to do
161:31 - to get this right so if we scroll up to
161:33 - 922 the first step was we prepare a
161:36 - piece of state so remember I was input
161:38 - set its input set input and then we
161:43 - basically start this off with a blank
161:45 - string right then we go down to line 42
161:50 - and we basically say the value is input
161:55 - and remember what this this did at this
161:57 - point was it locked the input yeah
162:00 - remember because it's constantly
162:02 - assigned to that blank value that we
162:04 - initialized it with rightly right then
162:06 - what we need to do is do an unchanged so
162:08 - every single time you type if fires off
162:11 - an event and then what we're doing is
162:14 - we're setting the inverted a event to be
162:16 - the event or I get that value yes
162:19 - exactly
162:21 - value and now that pieces leaning about
162:25 - here I think that's just it's bugging
162:29 - out but it's not actually a bug like
162:31 - that should work yeah okay yeah
162:35 - sometimes it gets a little slow on like
162:37 - the learning but there we go so you have
162:40 - an event and what that's gonna do is
162:41 - it's gonna update the inputs and now we
162:44 - have the input over here right the
162:46 - outside of the update to do function in
162:48 - line 31 got it okay yeah so we need
162:54 - access to our DB which we've already
162:56 - done we've already put in so we're gonna
162:57 - say DB doc collection - duze yeah now
163:02 - because we're inside about to do
163:04 - we already have the ID pastor as a
163:06 - prompt so we're gonna say to do da know
163:10 - so sorry
163:11 - props dot to do dot ID yeah right
163:16 - so that's how we did the delete before
163:18 - right and then before remember we did
163:19 - like a delete here right so the way you
163:23 - update things in firestore is you say
163:26 - set yeah and you pass in whatever you
163:30 - want to pass in but you have to include
163:33 - an option here so afterwards there's a
163:36 - second parameter here yeah and they see
163:38 - in and basically it's an option and what
163:40 - you need to say is merge true what this
163:44 - starts here is it prevents you from
163:47 - overwriting what was already in there so
163:52 - say for example if I was to write like a
163:55 - ah 3 it's not gonna update the to do
163:59 - it's not gonna remove the to do key is
164:01 - just gonna like add the key a like
164:05 - appended essentially okay exactly and
164:08 - then if it found the key that match they
164:10 - would update yeah okay so like for some
164:12 - reason if you wanted to add like a time
164:14 - just all you want to update the
164:15 - timestamp of it and not that to do in
164:18 - this case what it would do is like
164:19 - remove the to do but then you do merge
164:23 - true then it will actually just append
164:25 - the time stamp to the to do exactly and
164:28 - that's a really good point you mentioned
164:29 - time stamp because here when we update
164:31 - it we not truly want it to pop to the
164:33 - top what happens another question is
164:36 - what happens if I see what you're saying
164:40 - so you want to update the timestamp of
164:42 - the updated right yeah but I think for
164:46 - now we'll leave it so we can see it in
164:48 - the rows so if you use the same key of
164:51 - to do then it will just update to do
164:53 - right yeah exactly okay okay say for
164:57 - example I didn't have this and I used to
164:59 - do it will do this but then it will get
165:00 - rid of any other fields that are in
165:02 - there uh-huh okay so to do a what input
165:06 - yeah right and then what we need to do
165:10 - is so that actually does it right so
165:13 - that's going to update the the field and
165:14 - then we've set over then we close the
165:16 - modal but isn't input
165:18 - go ahead go ahead no just I say one more
165:22 - thing is you know the input initially
165:25 - right we actually wanted what we can do
165:29 - is because we already have the prop
165:31 - which is the to do text right we could
165:34 - actually do something like this we could
165:35 - say props door actually I will leave
165:38 - that for now we'll leave that for now
165:39 - but what we could do is we could say
165:41 - input value we'll try it we can try it
165:44 - winter week it is because a props door
165:46 - to do what to do I don't know if that
165:49 - will work but we can see if it were I
165:51 - will try it you know so what that's
165:54 - gonna do is the initial value of the
165:55 - input would be the today's value yeah
165:59 - all right yeah well actually no no bear
166:02 - yeah what we'll do instead we'll leave
166:04 - this blank we'll go down to our import
166:07 - on 947 uh-huh and we'll set the
166:10 - placeholder we'll say a placeholder to
166:12 - be prop start to do yeah thought to do
166:15 - and now what this will do is so when we
166:17 - run the code SAVE we save this and run
166:19 - it this would be really nice now so if
166:24 - we click edit you see it gave us the
166:28 - placeholder as the initial value now and
166:30 - we were ready to do perfect that's all
166:32 - good and then you see okay so that was
166:38 - interesting so the reason why but if you
166:41 - was to refresh now so go back to that if
166:44 - you refresh yeah so delete this thing
166:47 - he's saying bad things so it didn't
166:49 - actually do it as we wanted it to do so
166:51 - did you click on oh okay yeah we don't
166:55 - actually even fire off update to do oops
166:57 - yeah yeah so right now we just closed so
166:59 - update to do we need to connect to our
167:02 - code on line 48 yep there that's why it
167:06 - wasn't very off yes we need to save that
167:08 - and then it should do it now yeah
167:15 - whoo clean line all right oh look at
167:24 - that nice okay I like that and you can
167:29 - do the whole wrapping it in a form and
167:31 - everything like that to get the inter
167:33 - functionality
167:33 - okay got it that's awesome
167:37 - you know so crazy right so now we have
167:40 - full crud functionality yeah essentially
167:43 - at this point we got full crud
167:46 - functionality and basically what what do
167:48 - we have we have a full I mean actually
167:51 - we can even write this down because I
167:53 - think it's nice to see it in writing but
167:57 - essentially what we have done up until
167:59 - now is we have a firebase and this is
168:05 - also our database right yep
168:09 - the base is our database onions are
168:11 - hosting yep it's hosted online yeah okay
168:19 - what other things do you have so it has
168:22 - what that we have full UI functionality
168:27 - yo material UI for the designs material
168:32 - UI for the design yeah we have so that's
168:46 - top of that we have own controls we have
168:51 - material for designs so in I think use
168:55 - react and then react has a bunch of side
168:56 - like underneath points so we actually
168:58 - used react hooks okay so under react we
169:05 - can basically go
169:10 - so react looks we used yeah
169:14 - underneath folk so underneath it's full
169:18 - underneath firebase we can have a
169:20 - real-time database yeah so real-time
169:26 - database so and the crazy thing is guys
169:28 - I don't think you want to sound like
169:29 - we're building a real-time database is
169:31 - actually harder than you think if you do
169:34 - it the traditional way you have to have
169:36 - WebSockets you have to have like yeah
169:38 - usually you'd use something called
169:39 - socket die oh yeah and you'd have to set
169:42 - up like a two-way sync between your
169:43 - back-end and front-end yeah and you have
169:46 - to kind of maintain what's going on with
169:47 - I mean even right now I feel like it's
169:49 - so hard for us even we're hosting our
169:52 - data warehouse on redshift right and
169:56 - we're using what is Postgres the
169:59 - databases on Postgres and like I'm
170:01 - having so much trouble figuring out how
170:02 - to have a two-way sync so I can like
170:04 - update it from other places and there's
170:07 - no easy way at all yeah just so that
170:11 - people for people who don't know John I
170:12 - explained what redshift is and what
170:14 - Postgres is right so redshift is
170:18 - basically an Amazon Web service Amazon
170:21 - has you know Amazon this is called
170:24 - Amazon Web Services and yeah they have
170:28 - something called redshift and this is
170:30 - essentially a Postgres database when I
170:33 - say a database just imagine a giant
170:35 - excel sheet like that can hold you know
170:38 - insane amount of data like for example
170:40 - and when I try to upload like a 10
170:42 - megabyte file to my excel sheet or a
170:44 - Google sheet it crashed so when you need
170:47 - something bigger than that with more
170:49 - functionality you're probably gonna be
170:50 - looking for a real database you know and
170:53 - so Postgres allows you to have like
170:56 - petabytes of data you know Walmart is
170:59 - hosted on redshift exactly yeah
171:03 - so that's and then it allows you to do a
171:05 - lot of things like add things delete
171:07 - things edit things you know the basic
171:09 - functionality that you would expect from
171:11 - database exactly and just to mention
171:16 - there Postgres is a sequel database what
171:20 - we what we just used now is more
171:23 - closer to something could and no sequel
171:25 - database well what fire store did right
171:28 - so firebase initially had something
171:31 - called the real time database and you
171:32 - guys might accidentally use this instead
171:34 - that's a no sequel database which is
171:36 - essentially a Jason tree it's just a
171:39 - massive jason tree whereas the sequel
171:41 - database has a lot of structure to it
171:43 - right yeah fire store was sort of and
171:47 - they realized that a no sequel database
171:49 - wasn't as powerful as a sequel database
171:52 - why is it has built a custom yeah why is
171:55 - that why is a sequel database not as
171:57 - power or a no sequel is not as powerful
172:00 - as sequel database so think about it
172:03 - this way in a sequel database because
172:04 - there's so much structure right you have
172:06 - tables you have all these things you can
172:08 - perform quite complicated queries and
172:10 - you can join tables and you can do a
172:12 - bunch of indexing right yeah now in a
172:14 - know sequel database because you
172:16 - essentially just have a Jason tree yeah
172:19 - there's no clear way to index or search
172:21 - which makes searching for things really
172:23 - inefficient yeah so what they did by it
172:26 - was they combined the two and they
172:28 - basically came up with the would not
172:30 - really combine the two but they they
172:31 - enhanced a no sequel database with this
172:34 - collection document collection document
172:36 - approach which allows you to have all of
172:38 - the benefits of no sequel uh-huh but you
172:41 - can also have really complicated
172:42 - indexing so you can search for things
172:45 - you can do order by you can do all of
172:47 - these nice and it works and yeah it's
172:49 - really really it's really proud because
172:51 - I actually use then the no sequel
172:53 - database before I use firestorm so you
172:55 - try to join if you try to join the
172:57 - tables on like two different things that
172:59 - and they don't exist like because you
173:05 - know you know yeah
173:06 - what happens there so there's a
173:09 - completely different architectural
173:11 - mindset when you think of a sequel
173:12 - database compared to like a no sequel
173:14 - yeah a no sequel you are completely
173:17 - responsible for how you build it write a
173:19 - sequel database you pretty much have and
173:22 - also tier access sir I have one question
173:24 - yeah shoot your questions will answer
173:25 - them Norris
173:27 - so sequel database you have very clear
173:30 - structure you have primary keys and
173:31 - tables you have foreign keys which link
173:33 - to other tables there's a very clear
173:36 - definition of how
173:37 - should be laid out right yeah in no
173:39 - sequel there is no structure there is
173:41 - actually a case of what is good practice
173:43 - what is bad practice so let's say in
173:45 - sequel databases you do something called
173:48 - normalization right normalization is
173:51 - basically removing all of the repeated
173:54 - data right so you don't want to have
173:56 - repeated date or in a sequel database
173:59 - however when you have a no sequel
174:03 - database yeah it's actually weirdly good
174:07 - practice to sometimes have let's say we
174:10 - had a collection of users yeah and we
174:13 - had like users and their information
174:15 - inside of each document now let's say we
174:17 - have the collection of messages right
174:19 - yeah in every single message we could
174:22 - literally have the users ID inside of
174:25 - the messages to correspond to the user
174:27 - right now you could also do it the other
174:30 - way so inside of all of the users you
174:32 - would have another collection with the
174:34 - message IDs so at this point you have
174:36 - two places where you've got repeated
174:38 - information yeah but because of the way
174:40 - that a no sequel database works that
174:43 - works better do you see what I mean I
174:45 - see if there's a much bigger
174:47 - architectural decision when you when you
174:49 - use a no sequel database but honestly
174:51 - guys when you're starting off it's a
174:53 - case of you run into these problems
174:55 - naturally so it's not a thing that you
174:58 - need to really like kind of worry about
174:59 - like a 4-man and everything okay awesome
175:02 - so what else is left for what we're
175:04 - doing right now so I guess like the
175:08 - styling of the app is is something which
175:11 - we could mess around with but otherwise
175:13 - functionality-wise function I think we
175:15 - have a yeah we have a complete built
175:17 - firebase app awesome primers react up it
175:20 - has full credit for a material UI it's
175:23 - using the latest es6 standards with
175:25 - react hooks yeah and it clearly
175:28 - demonstrates how easy is to deploy how
175:29 - easy is to get up and running and guys
175:32 - this is completely free so if you want
175:34 - to have this and build this I highly
175:36 - recommend you build it add it to a
175:38 - personal portfolio which is also hosted
175:40 - on firebase and then you pretty much
175:43 - have something to add to your CV which
175:46 - you can use and this is really
175:47 - impressive guys if you show up to a job
175:49 - interview with this there
175:51 - we'll be impressed they will be like wow
175:52 - this the because this is quite
175:54 - cutting-edge stuff right like cozy when
175:56 - when I first sort of introduced you to
175:59 - fire basin and react well I was your
176:01 - initial reaction I was really I mean my
176:05 - initial reaction was like I didn't want
176:07 - to learn react I'm like managed can we
176:09 - just do this with Python and once I
176:12 - started getting into react and I started
176:15 - picking up things it really blew my mind
176:17 - especially just because once I learned
176:19 - about components and how their work the
176:22 - development is so clean and then my apps
176:24 - are so fast and then you know adding
176:27 - like the fire base on top of it I mean
176:29 - and everything just happens in real time
176:31 - dad is freaking mind-blowing yeah that's
176:35 - and once you really see that for the
176:36 - first time especially once we deploy and
176:39 - everyone sort of using it that's usually
176:40 - the sort of like WoW moment everyone
176:42 - sort of realizes that's really where it
176:46 - clicks as to how powerful is with so
176:48 - little code which is amazing of topic
176:50 - but it's half past 4:00 in the morning
176:52 - 4:30 in the morning where she is at and
176:55 - she's like I'm currently watching this
176:56 - no regrets that was nice yeah that's
177:03 - awesome so guys at this point what I
177:05 - would say is like look the app is ready
177:06 - to build on your you have an app that
177:08 - completely works it's bill would react
177:11 - firebase is material UI you can improve
177:14 - it and you can build things on top of
177:16 - this if you want to you could take it
177:17 - really to the next level but I think and
177:19 - we're gonna wrap up this tutorial right
177:22 - yeah I think so okay so what we're gonna
177:25 - do is we're gonna wrap this tutorial up
177:27 - and what I recommend you guys do at this
177:29 - point is if you got value out of this
177:31 - and you thought that this was awesome
177:33 - wait till you actually join the profit
177:36 - with JavaScript course because in that
177:38 - in that program we go deep like you get
177:41 - all the 15 modules you get all of the
177:43 - training I mean maybe I can even show it
177:45 - on the screen yeah that'd be awesome
177:48 - other okay cool
177:52 - so let me go ahead and share that with
177:55 - you guys so this is the profit
177:58 - JavaScript course you guys you know this
178:01 - fourth of July sale is coming to an end
178:03 - in ten hour
178:04 - some would recommend you check that out
178:06 - but you know go ahead check this program
178:08 - out some of the things that arm makes it
178:11 - different from any other program is
178:12 - really like the fact that you have
178:15 - success coaches that are with you so
178:18 - Sonny like can you tell me a little bit
178:21 - about the success coaches part yeah so
178:23 - success coaches are really where I
178:25 - personally feel like your development
178:28 - your like progression as a developer
178:30 - excels because a success coach is
178:33 - somebody who's gonna give you one-to-one
178:34 - personalized video feedback for every
178:36 - single assignment you do guys so every
178:39 - single time you attend let's say a live
178:41 - coaching call and we set some homework
178:42 - when you submit that homework it's not
178:44 - an automated system it's actually
178:46 - somebody checking your code and giving
178:49 - you one-to-one personalized video
178:51 - feedback and that's gonna help you
178:52 - become such a better developer because
178:55 - they're gonna recommend what the latest
178:56 - standards are if you what you did well
178:58 - what could be improved you're gonna have
179:00 - all of that one-to-one to of
179:03 - communication and feedback and not only
179:05 - that the energy between the successes
179:07 - success coaches in the community is
179:09 - amazing so you constantly have an army
179:11 - of success coaches to ask for help
179:13 - support and not only that guys you have
179:15 - me Kazi nas all the people on all the
179:18 - coaches on the course you constantly
179:20 - just start a message there's no like
179:22 - hierarchy you can pretty much message
179:24 - anyone
179:24 - whenever you