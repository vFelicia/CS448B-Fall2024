00:00 - guys how's it going this is qazi from
00:02 - cleverprogrammer.com where you learn to
00:05 - code smarter
00:06 - in this video what I want to talk about
00:08 - is something super awesome
00:11 - so I want to start it I wanted to start
00:13 - a new series and I've been thinking
00:15 - about doing this for quite some time
00:18 - and basically I'm gonna go on
00:20 - codefight.com and fight a bunch of
00:22 - people okay what does that mean well
00:26 - toadfights.com or codefight.com is a
00:29 - website where you go and challenge other
00:31 - people to programming challenges and
00:33 - then you both are given a time and so
00:35 - whoever does it faster and with less
00:37 - bugs wins they try to keep their
00:41 - problems pretty simple they're not too
00:43 - hard
00:44 - so it's mostly just having fun
00:47 - another reason why I want to do this is
00:49 - because I play chess a lot so in chess
00:52 - it's really useful to watch a
00:54 - professional player play these really
00:56 - short games two minute five minute games
00:58 - and by watching you just get to learn a
01:01 - lot so I'm hoping that
01:03 - you get to watch me like play against
01:05 - other people and see how I do I might
01:08 - lose I might win who knows but you'll be
01:11 - learning kind of how to think about code
01:12 - and how to make it play for you and
01:15 - maybe you can go on this website and
01:17 - play for yourself too
01:19 - all right so other than that let's get
01:23 - started we're gonna make this pretty
01:25 - damn fun
01:26 - so let's go here oops so many tabs man
01:32 - I think it's called codefights.com
01:35 - hopefully I'm right
01:37 - yes codefights.com here we go
01:41 - so I just got a bunch of points for some
01:44 - reason and
01:46 - can I change my name let me change it to
01:48 - clever programmer
01:50 - there we go
01:56 - all right so whatever I don't care I can
02:01 - keep my name the same
02:02 - let's see improve and Challenger coding
02:05 - skills while unlocking Arcade map that
02:08 - sounds like a lot of fun
02:10 - but what I want to do is
02:13 - Head to Head let's do it baby let's do
02:16 - it
02:17 - let's fight
02:19 - so we're gonna fight against a random
02:21 - opponent and I'm gonna try to rip them
02:24 - shreds
02:26 - or her but that doesn't sound nice
02:29 - that's not what's gonna happen okay I'm
02:31 - probably gonna lose
02:34 - okay so I'm gonna try to talk through it
02:36 - a little bit but if I can't I'll try to
02:39 - talk through it through it later so at
02:41 - the bottom you can see that I have 52
02:42 - seconds it's incredibly not smart to
02:46 - skip these uh time you you should just
02:48 - use this time to think about and read
02:51 - through this problem before you get
02:52 - started because if you skip this time
02:54 - then you'd have to understand the
02:56 - problem in the round and you'll lose a
02:58 - lot of time so I've already lost 30
03:00 - seconds talking to you guys let's figure
03:01 - it out
03:02 - consider an arithmetic expression in the
03:04 - form of a hashtag B is equal to C check
03:07 - whether it's possible to replace a
03:08 - hashtag with one of the four signs to
03:11 - obtain a correct expression this is a
03:13 - pretty difficult problem arithmetic
03:16 - expression ABC is true we can replace
03:18 - hashtag with a plus
03:21 - sign
03:23 - to obtain 2 3 equals five
03:27 - okay so basically it should be like a
03:31 - question mark a b gives you C okay
03:33 - that's what it should say a question
03:35 - mark B gives you C so what operator can
03:40 - you put in this question mark that'll
03:42 - give you back the result okay so let's
03:45 - see they're giving us some time here
03:48 - uh and they have some test results at
03:50 - the bottom that we can also uh run
03:53 - against and check if our answer is
03:55 - correct or not so let's figure it out
03:58 - okay
03:59 - what is it saying let's write some stuff
04:02 - down my comment was there and that was a
04:05 - problem but if I do float or not there
04:09 - but if I do float here
04:12 - I know that it should be correct
04:15 - okay
04:18 - all right so we got this one right and I
04:20 - got a hundred points on this so let's
04:22 - move on
04:24 - I am going to say that
04:28 - uh okay let's just rate it up it was
04:31 - really I forgot that you can't do
04:33 - comments comments count as a source code
04:36 - line which is kind of annoying
04:39 - okay so given length of triangle size
04:43 - check if it is I sauces isosceles
04:48 - hmm we should get some music in here
04:51 - right
04:55 - but not gonna worry about that right now
04:57 - because on my chess Channel I ended up
04:59 - getting some copyright issues
05:01 - so we're gonna stay away from music for
05:03 - a second but in the next videos we'll
05:05 - probably have music
05:06 - okay
05:08 - so I have sides four three two the
05:10 - output should be isosceles triangle size
05:12 - is equal to false 535 the output should
05:15 - be that
05:19 - um
05:22 - how is isosceles triangle described I
05:25 - think it's if the
05:30 - two sides are equal and one is different
05:32 - right so I basically have to check that
05:36 - what do I have to check I have to
05:37 - basically check that I have three inputs
05:41 - and
05:43 - um
05:44 - what should I say
05:47 - what should I say about it
05:52 - in isosceles triangle you have to have
05:54 - two sides equal and one side different
05:56 - okay so let me just read my test cases
06:00 - just to make sure that that's right
06:01 - false
06:04 - true
06:05 - okay so what code do I write to make
06:09 - sure that that is the case
06:13 - hmm
06:22 - so if I sort them
06:25 - then that should mean
06:27 - how does sort get is it sort does it
06:30 - sort here let's just check if sort sort
06:32 - the dot sort method sorts it in an
06:35 - ascending order or descending order
06:37 - so I just want to double check that so
06:39 - let's call this X and call or sorry what
06:42 - am I doing X is equal to this list
06:45 - and then let's sort X and let's call X
06:48 - and let's see what it does and okay when
06:50 - you call sort on a list it essentially
06:53 - puts in an ascending order
06:56 - the dot sort method so if it's an
06:59 - ascending order then I know that
07:09 - either the first two are equal and the
07:12 - last one is different or the last two
07:14 - are equal and the first one is different
07:18 - um
07:21 - is there a smarter way to check this
07:24 - can I call Unique elements and get back
07:33 - if my number of unique elements is two
07:37 - right if I have
07:40 - one two and three the other guy is at
07:43 - score 200 so he's winning right now but
07:45 - let's just go through this and let's see
07:47 - maybe we will win so if I call Unique
07:50 - elements I should get back three unique
07:52 - elements right if I call set on it
07:55 - now what if I call sets on this
07:59 - right I get back two unique elements and
08:02 - in the case that I get two unique
08:04 - elements then I know it's an isosceles
08:05 - triangle because two sides are the same
08:07 - and one side is different that's what
08:09 - two unique elements would mean so I
08:11 - think I am just going to uh you know I
08:15 - don't even need that sort line that they
08:16 - have up at the top I'll say if
08:19 - the length of
08:23 - calling set on sides is equal to two
08:28 - then essentially give me true
08:31 - I actually don't need any of this code I
08:34 - can just write a one line solution and
08:36 - that should work right I can essentially
08:39 - remove all this code and I can say
08:41 - return Len of
08:44 - sort or sorry what was it again Len of
08:51 - um set of the size is equal to two
08:56 - and that should return true or false
08:59 - yeah so I said but basically you can see
09:02 - it's whining that it needs to be exactly
09:05 - that line those amount of lines
09:07 - okay a fun problem
09:11 - and I'm gonna give it a thumbs up good
09:13 - job guys that was good okay now we are
09:16 - on round three and the the score is
09:18 - equal so far so he has 200 and I have
09:21 - 200 and we are on round three so let's
09:24 - let's check it out
09:26 - so what do I want to do here I want to
09:28 - check if it's increasing sequence if it
09:30 - is I return true if it isn't then I
09:33 - return false
09:34 - how would I check if something is an
09:36 - increasing sequence so here
09:38 - this is strictly increasing sequence uh
09:41 - one is less than three Which is less
09:44 - than eight here two is not less than two
09:48 - so we just stop and we return false
09:51 - right because two is not less than two
09:52 - and here two is less than three so this
09:55 - is fine but this part is not fine
09:58 - so essentially I need to write something
10:00 - like a bubble sort if you guys know what
10:02 - that is you'll be on the same page as me
10:04 - but if you don't essentially I want to
10:06 - go I want to do pairwise iteration and I
10:08 - want to check each of them against each
10:10 - other okay so let's go and write
10:14 - something like that I want to go check
10:15 - each of them at the same time and check
10:17 - if the previous one
10:20 - um is smaller than the next one if it
10:23 - isn't then I just want to return false
10:25 - okay
10:28 - uh so I'm gonna let's I'm gonna write a
10:30 - little bit of fancy fancy schmancy code
10:33 - here so I want to say previous comma
10:36 - next
10:38 - in
10:40 - zip
10:43 - sequence
10:46 - starting from one all the way to the end
10:52 - no that would be no no it should be
10:54 - actually all the way up to the end but
10:58 - excluding the last one and then I want
11:01 - to say sequence from one to all the way
11:03 - to the end
11:05 - and then I want to say so my previous is
11:10 - going to be the previous guy next is
11:12 - going to be the next guy in the list and
11:13 - I want to just go and check them against
11:15 - each other
11:16 - if previous
11:19 - um
11:20 - right if I if not so if previous is not
11:23 - less than next
11:26 - then return false
11:30 - and if you make it past all those checks
11:32 - I want you to return true okay
11:36 - so this is going to work and you can see
11:40 - that I passed all of those and I'll hit
11:42 - submit
11:43 - so I got 500 points he's a 200 I got 300
11:47 - points for the last one and I got done
11:49 - before him as you can see
11:52 - I will go in a little bit more depth
11:54 - depth and explain it this was great uh
11:57 - required
11:59 - knowledge uh bubble sword type of stuff
12:05 - like pairwise iteration right
12:08 - and I'll hit next
12:10 - and so
12:12 - okay I won why did I win
12:16 - well it'll go over and explain it okay
12:18 - so check it out I got a beautiful badge
12:21 - I'm at trainee for 20 wins so
12:24 - you can play me okay I'm not mean I'm
12:28 - not gonna be mean I'll like write nice
12:29 - responses to you and tell you where you
12:31 - could have done better or hey you might
12:33 - just come and crush me who knows
12:35 - uh let's share this on where should we
12:39 - share it let's share it on Google
12:42 - we did something cool right let's just
12:44 - share it
12:45 - oh I have to write my own comment
12:48 - look at that beautiful coffee drinker
12:52 - all right let's get out of here next and
12:55 - close beautiful
12:58 - that's awesome so why did I win because
13:00 - he took 27 minutes to complete it and I
13:03 - took 11 minutes
13:05 - so I'm going to explain the last bit to
13:08 - you guys and if I remember I will simply
13:12 - put it in as a note note for you that
13:15 - you can actually look at
13:20 - so the last problem was check if things
13:22 - are an increasing sequence right so
13:24 - check
13:26 - strictly
13:27 - increasing sequence
13:30 - so what did I write here
13:33 - this cryptic looking code
13:36 - well here's how this works okay here's
13:40 - how this function works
13:42 - first of all you have to understand how
13:44 - zip Works zip runs through two lists at
13:48 - the same time that's what I like about
13:50 - lists so let's say that you have a list
13:53 - called one two three four five
13:56 - or
13:59 - um let's just make it like something
14:00 - different okay let's just say something
14:02 - like this
14:04 - 18 5 7 and that okay uh let's call this
14:10 - list prices
14:11 - and then you have a list called fruits
14:13 - and let's uh let's call it banana we
14:17 - have apple pretty expense expensive
14:19 - Apple fifteen dollars we have another
14:21 - thing for five dollars kiwi uh we got
14:25 - strawberry for seven dollars and then we
14:29 - have uh apricot
14:32 - running out of fruits here so this maps
14:35 - to like banana this maps to this right
14:38 - like they're in this each position like
14:41 - zero position matches zero position
14:42 - first matches first
14:44 - um so what I'm gonna do is I'm gonna
14:47 - run through both of these lists and
14:49 - print out banana in its price at the
14:51 - same time how am I gonna do that I'll
14:52 - just do this I'll say a price
14:54 - a comma fruit in zip
14:59 - and I will say the list prices and then
15:03 - the list fruits and I will say print
15:05 - price
15:07 - comma fruit right so I'll hit run and
15:11 - you can see that it prints the price and
15:12 - it prints the fruit okay and it iterates
15:15 - through both of the lists at the same
15:17 - time
15:18 - so that's what's nice about zip
15:21 - um right it'll it's the zeroth index of
15:25 - the list that starts with 10 and then
15:26 - it's at the zeroth index of fruits at
15:30 - uh index zero and so the first time we
15:34 - iterate through the list price becomes
15:36 - ten fruit becomes banana
15:39 - and the string banana I'm just lazy to
15:41 - put quotes around it but fruit is banana
15:44 - okay I'll just put it
15:46 - and price is 10. okay and that's why you
15:51 - get this out there
15:53 - so that's what zip does it allows you to
15:55 - iterate two through two things so what
15:57 - did I do what is this part here and why
16:01 - is that so nice here's what it does okay
16:03 - so I want to check uh strictly
16:06 - increasing sequence I'll actually leave
16:08 - this here for you guys like as notes or
16:10 - something so I'll just say price comma
16:12 - fruit
16:14 - um how to use zip function
16:18 - and
16:20 - now let's talk about it okay so for
16:26 - what was I talking about okay so here
16:28 - let's say you have numbers and you have
16:30 - them like this one
16:33 - five
16:37 - um six and then let's say you have four
16:40 - okay
16:41 - and what you want to do is go through it
16:44 - and say that this is not in an incr um
16:46 - strictly increasing sequence right
16:48 - because you can see that it's not one
16:50 - five six four
16:53 - this is not higher than six so this is
16:56 - not in a in a strictly increasing
16:59 - sequence right so not a strictly
17:02 - increasing sequence
17:06 - so what do I want to do I want to
17:08 - iterate through this and just check each
17:10 - of these I want to check one against
17:12 - five and see if one is less than five if
17:15 - it is I want to go on to the next
17:17 - iteration I want to check five against
17:18 - six if five is less than 6 then I want
17:22 - to move on then I want to check six
17:23 - against four if six is less than four I
17:26 - want to move on however in this case 6
17:27 - is not less than four I want the
17:30 - iteration to stop and I want it to
17:32 - return false at this point when we're
17:34 - running the function so how do I iterate
17:37 - through this in a nice way well you can
17:39 - use all kinds of indices and stuff and
17:42 - if you write this in C C plus plus
17:43 - you're gonna have some like ugly code
17:45 - but it'll work but you have to do a
17:47 - bunch of funky stuff but in Python you
17:50 - can have some really elegant pythonic
17:51 - ways to run through this uh essentially
17:54 - it's called pairwise iteration right so
17:56 - I'm doing I'm iterating pairwise so I
17:59 - want to do one five then five six then
18:02 - six four it's almost like a design
18:03 - pattern it's something that um you you
18:06 - have to do quite a bit so it's good to
18:08 - understand how pairwise iteration works
18:11 - so what I did with this sequence of up
18:14 - to negative one and sequence starting
18:15 - from one to the end is this I take this
18:18 - list and what is sequence of one
18:21 - sequence of one or sequence of up to
18:24 - negative one is this
18:27 - that okay so that's that list and then
18:31 - what sequence of one to the end right
18:34 - one all the way to the end it's
18:38 - it's this it's um
18:41 - whoops
18:46 - I want to start from this to five six
18:48 - four now if I iterate through this list
18:51 - you can see that I have one comma five
18:54 - one and five right here so zip will
18:56 - allow me to get one and five at the same
18:59 - time
19:00 - then you can see that the next pairwise
19:02 - iteration is right here five and six zip
19:05 - will allow me to look at five and six at
19:07 - the same time it'll be at the index one
19:08 - in both of those lists
19:11 - and then at the end I want to go through
19:12 - the pair six and four and six and four
19:14 - is right there so by constructing this
19:18 - and using zip on it I get to iterate
19:20 - through both of them at the same time
19:22 - okay
19:24 - and then I can like check if uh so and
19:27 - then I just label them
19:29 - so previous here right if I'm
19:33 - if I'm zipping through this
19:37 - right if this is like this
19:42 - foreign
19:52 - if I'm zipping through here previous is
19:54 - going to be one and next is going to be
19:57 - 5 and then I just checked previous
19:58 - against next as you can see here so I
20:00 - say is previous less than next and I say
20:04 - if previous is not less than next then I
20:08 - want you to return false and stop right
20:10 - there okay and essentially that means if
20:13 - previous is equal to or greater than
20:15 - and that would imply that we don't have
20:18 - a strictly increasing sequence
20:20 - so you can see that's what I do here and
20:22 - then I return false uh so yeah if I did
20:26 - previous right if I had if not previous
20:30 - less than next what would this mean okay
20:33 - so I I iterate through it the first time
20:35 - I have this being one and I have this
20:38 - being five right one from here and five
20:40 - from here I'm iterating through both of
20:42 - the lists at the same time using the zip
20:44 - function
20:46 - is one less than five yes it is so not
20:51 - true gives you false so we don't execute
20:53 - line six you know the return false
20:55 - statement then we go back in the for
20:57 - Loop then previous becomes five next
20:59 - becomes six so this is five and next is
21:04 - six whoops it's five less than six yet
21:08 - is yes it is so not of that gives you
21:10 - false and this whole thing of value is
21:13 - still false which means that you don't
21:15 - execute the block
21:17 - the body of the if statement and then we
21:21 - run through it one more time and
21:22 - previous becomes six and next becomes
21:26 - four
21:27 - and six is less than four is false right
21:31 - so that's false calling not on false
21:34 - gives you true this whole thing
21:36 - evaluates to a true and then ultimately
21:40 - it executes the body of the if condition
21:43 - and you get back false
21:47 - okay
21:49 - so
21:50 - that's what it was
21:53 - uh that's what my code was doing I'm
21:55 - just gonna leave these comments I don't
21:57 - know how useful these are but I'll just
21:58 - leave it
22:01 - um that's essentially what my code was
22:03 - doing and it was able to get a list and
22:07 - check if it was a strictly increasing
22:09 - sequence
22:10 - all right
22:12 - so hopefully you guys enjoyed it if you
22:14 - loved it or you liked it comment or
22:18 - subscribe or like or share whatever you
22:20 - got to do
22:22 - have any questions post them up there
22:25 - I'm really crazy about this I love
22:27 - responding to every single person I mean
22:29 - I would even like go to the point of you
22:32 - know just helping you out like tell you
22:34 - what code to write and you know really
22:36 - help you out so I don't want you to be
22:37 - stuck
22:38 - talk to me okay if you're ever stuck
22:41 - I am here for you that's what I do okay
22:43 - I love doing this I absolutely love
22:46 - coding there's probably nothing more
22:47 - than coding that I love right now I like
22:50 - Jiu Jitsu but I like coding more
22:53 - so yeah hopefully this makes sense if it
22:56 - hurts your brain that's totally fine
22:58 - especially this pairwise iteration thing
23:00 - it would kind of suck understanding it
23:03 - at first you can be like oh my God my
23:05 - brain hurts but once you get it it's so
23:07 - nice it's so nice you guys you're gonna
23:09 - you're gonna love it you're gonna enjoy
23:10 - it a lot
23:11 - these are the type of questions that
23:13 - coding interviews are going to ask you
23:14 - if you're going to a coding Boot Camp or
23:16 - you're trying to get a coding job
23:18 - they're going to ask you these kind of
23:19 - questions so it's good to get exposure
23:21 - to them in a playful way right you're
23:24 - not reading it from a book I mean look
23:26 - at how fun it was we went online we
23:28 - competed against some random person and
23:30 - we had time constraints and then we beat
23:32 - them and it was awesome and now we're
23:34 - just talking about it it's much better
23:36 - to do it like this rather than being
23:38 - forced to have it shoved down your
23:40 - throat you know because you're trying to
23:43 - cram it in to get your new job or
23:46 - something so by making it fun and play
23:49 - you'll actually learn it rather than
23:51 - learn it in school or some academic
23:53 - setting where you're not having fun okay
23:56 - so this is helpful for you if you're a
23:57 - college student if you're thinking of
23:58 - changing careers or if you are even in
24:02 - high school or younger you know this is
24:03 - just helpful to you this is going to
24:05 - make you a better coder
24:07 - in all of that stuff
24:11 - all right guys I love you guys so much
24:14 - um I'll try to put this in I'll try to
24:17 - put this let me name it right now code
24:20 - fight
24:22 - Session One
24:26 - okay
24:27 - for a clever programmer
24:30 - and I'll save this for you guys and I'll
24:32 - put it in the links in the YouTube link
24:35 - or if you're watching it on my website
24:36 - cleverprogrammer.com and you guys can
24:39 - watch it and enjoy alright bye