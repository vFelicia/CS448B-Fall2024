00:00 - do arrays and objects ever stress you
00:02 - out are you ever sitting there thinking
00:03 - like what's wrong with me why don't i
00:05 - get it maybe i should have been smarter
00:07 - maybe i should have became a doctor like
00:09 - my dad told me well not anymore things
00:11 - like mapping and filtering and reducing
00:15 - and all kinds of other stuff that might
00:17 - give you a headache i promise after this
00:19 - video that won't be the case anymore in
00:20 - this video you're gonna go from very
00:23 - beginner concepts of arrays and objects
00:25 - all the way to more intermediate and
00:27 - might i even say advanced because there
00:29 - are some higher order functions like
00:31 - mapreduce filter that we're gonna learn
00:33 - about and those are going to be very
00:35 - very very helpful and i will also tell
00:37 - you this a lot of the way that you've
00:39 - been doing things like summing up
00:41 - numbers or whatnot are actually wrong
00:44 - and outdated and you shouldn't be using
00:45 - that anymore javascript now has a more
00:48 - functional way of doing things and so
00:50 - even if you're more intermediate or
00:51 - advanced i bet you'll learn something
00:53 - new and there are mistakes you're making
00:55 - that this video will help you stop
00:56 - making with that said this video will
00:58 - have exercises for you to do for arrays
01:00 - and objects so you can get your skills
01:02 - up smash that like button and with that
01:04 - said let's just get into it if you're
01:06 - wondering who i am i'm rafikaze i'm the
01:08 - founder and ceo of clever programmer
01:11 - and the first thing we're going to do
01:12 - when we start this
01:14 - is i want you to go ahead and open and
01:16 - go to replit.comreplit.com
01:18 - [Music]
01:21 - because there you can actually code
01:23 - along with me in javascript and it's a
01:26 - full ide and it's very easy very fast
01:28 - and it's completely free so make sure
01:30 - you just go to replay.com right now and
01:32 - just follow along with me as we code the
01:34 - rest of this in the video that you're
01:36 - gonna be watching is actually a clip of
01:38 - me teaching a javascript course but if
01:41 - you just follow along from complete
01:43 - scratch and you just open up your own
01:45 - replica you should be able to follow
01:47 - along if you want access to that
01:49 - specific javascript course that's also
01:52 - completely free and we'll link it down
01:54 - below and you can go ahead and fork that
01:56 - rupple which means that you just get
01:58 - access to that entire course and all the
02:00 - content and all the materials you could
02:02 - reference it but i want you right now
02:04 - starting from complete scratch just go
02:06 - to replay.com and start from complete
02:07 - scratch with that said let's just jump
02:09 - right into the video all right so now
02:11 - let's jump in and start talking about
02:13 - arrays and right before we do that let's
02:15 - go ahead and comment out every single
02:17 - line that is still running so line 108
02:20 - for me i'm going to comment out and i'm
02:22 - also going to comment out line 121 and
02:24 - so when i hit run nothing should be
02:26 - coming out to my console perfect my
02:28 - console is looking crispy clean that's
02:31 - exactly what we want
02:33 - so
02:33 - let's go ahead and start working on
02:36 - arrays i'm going to go here i'm going to
02:38 - say arrays
02:40 - okay
02:41 - and why do you need a raise well what if
02:43 - you want to hold multiple different
02:44 - things how are you going to do that so
02:46 - if you have groceries right in a
02:48 - variable you could only have one grocery
02:50 - like a fruit but arrays allow you to
02:52 - have multiple things so for example i
02:54 - could have an array that has a banana
02:57 - it also has
02:58 - um
02:59 - apple
03:01 - okay i can also have orange okay
03:05 - we can also have a pair
03:08 - all right i could have groceries like
03:09 - this and you could write the words too
03:11 - so this is just a string and i decided
03:12 - to put an emoji in it but you could
03:14 - decide to put like the actual word pair
03:17 - here if you want but i just think that
03:18 - this looks
03:19 - prettier right so that's why i'm having
03:22 - it like this
03:23 - now if i'm doing
03:26 - all right and remember to just put a
03:27 - const here okay so we're just going to
03:28 - say cons groceries and
03:31 - here we go we have all of these
03:34 - you know we got a banana we got an apple
03:36 - we got all this awesome stuff in our
03:38 - groceries right now let's console log
03:40 - groceries
03:41 - okay
03:42 - and let's hit save and let's see what
03:44 - happens i'm going to move this here and
03:46 - boom you can actually see that it
03:48 - printed out all of the groceries okay
03:50 - now how do i get
03:52 - just a banana if we if i want right so
03:54 - if you click it it shows you the zeroth
03:56 - element is a banana the first is the
03:59 - apple the second is orange and the third
04:02 - is pear okay and remember everything in
04:04 - coding when you start counting it
04:06 - usually starts from zero
04:08 - so it goes zero one two three
04:10 - and the length of this is four okay
04:12 - because there's four items in here four
04:14 - grocery items now
04:17 - how can we get just a banana if we want
04:20 - just a banana how do we do that well
04:22 - here's what we do we go console.log
04:24 - groceries we put this bracket and we do
04:27 - zero okay and let me hit save and let's
04:30 - see boom we just got the banana okay
04:33 - well what if i want an apple what do i
04:35 - do can you take a guess i'll give you
04:37 - five seconds see if you could write that
04:39 - yourself five
04:41 - four three
04:43 - two
04:44 - one
04:45 - all right let's do it so you would have
04:47 - to put in a one here okay so boom let's
04:49 - do that let's do a one let's hit save
04:52 - and boom you see we got an apple now how
04:55 - would i get not the orange but the pair
04:59 - so how would i get the pair make sure to
05:00 - count correctly zero one two three right
05:03 - how would i get the pair what do i need
05:04 - to put in these brackets to get that
05:06 - pair i'll give you five seconds here
05:08 - five four
05:10 - three two one all right let's do it
05:15 - we would do three
05:16 - okay
05:17 - and you can see that we got the pair
05:20 - okay so again this is zero this is one
05:24 - this is two and this is three okay if we
05:26 - want to get the orange we would simply
05:29 - pop in a two here okay let's give that a
05:32 - try make sure you're coding along with
05:34 - me and you're just exercising with me
05:35 - okay make sure you're not just passively
05:37 - watching this make sure you're coding
05:39 - along with me every single step of the
05:42 - way that's how you're gonna get better
05:43 - so this is called indexing okay this is
05:46 - like you grab one of the indexes okay so
05:48 - here i'm getting grabbing
05:51 - grab the second
05:53 - or like the third index in this case
05:55 - okay um
05:57 - or second index okay grab the second
05:59 - index
06:00 - that's basically what we're doing here
06:02 - or grab the second item if you want to
06:04 - say it in a more human language but in
06:06 - programming this is a zeroth index this
06:09 - is the first second third so if you ever
06:11 - hear like hey it's in the first index or
06:13 - the third index that just means where
06:16 - its position is in an array okay and
06:19 - arrays are really really cool and um
06:21 - i'll show you a lot more about them soon
06:24 - all right so take a look at that right
06:26 - at the bottom you can see
06:28 - that and let me remove let me cons let
06:31 - me comment out this line here okay and
06:33 - let's run it again
06:34 - and i'll move this up over here it's
06:37 - easier to see but take a look at this
06:39 - right over here
06:41 - before we add the cookie and we console
06:45 - log this out notice that there's no
06:46 - cookie in here right but after we do the
06:49 - push and we console log it out watch
06:52 - what happens
06:53 - now we have a cookie that's added that
06:55 - wasn't there before so that's what push
06:57 - does push adds things on to the end of
07:00 - the
07:01 - array okay so try adding something else
07:05 - try adding a chocolate try adding
07:08 - uh a blueberry try adding something and
07:11 - see what happens and see if you could do
07:12 - it yourself okay so add something more
07:14 - here let's you give this a try so i'll
07:16 - give you five seconds five four three
07:19 - two one all right now let's try adding
07:22 - something together so i'm gonna say
07:23 - groceries dot push okay and we're gonna
07:25 - say
07:26 - i'm gonna do let's do
07:28 - blueberries okay
07:30 - and then i'll console log here paste it
07:33 - here hit save and run
07:36 - and check it out we got
07:39 - we got one
07:40 - the regular
07:42 - uh groceries array
07:44 - then we got this with the cookie this
07:47 - time okay and then we push the blueberry
07:49 - and you can see there's a blueberry at
07:51 - the end there
07:53 - so that's how the push method works okay
07:55 - great so let's um comment out
07:59 - all of these for now all the console
08:02 - logs so if you run your code you should
08:04 - see basically nothing okay it should be
08:06 - empty just like this
08:07 - perfect now what we want to do
08:10 - is we want to try grabbing like what if
08:13 - i only wanted the banana
08:16 - okay what if i only wanted the banana
08:19 - and the apple
08:20 - okay those are the only two things or
08:22 - the orange and the pear and that's all i
08:24 - wanted okay well for this there is a
08:28 - method
08:29 - called
08:30 - slice
08:31 - okay so we're going to do that so we're
08:33 - going to says groceries
08:35 - and i'm going to say slice and i'm going
08:37 - to say 0 to 2 and let's see what happens
08:39 - okay and let's make sure we do console
08:42 - wrap this in console.log because
08:44 - otherwise it won't show it to the screen
08:46 - let's hit command enter or ctrl enter
08:48 - and boom look at that we're getting
08:50 - banana and apple
08:52 - so it's starting from zero including
08:55 - zero okay so basically what we're saying
08:58 - is start from zero
09:00 - inclusive
09:03 - and
09:04 - up to
09:05 - two okay but but not including two
09:09 - okay so basically it's giving you the
09:11 - the index this is giving you is either
09:13 - zero or one that's the index it's giving
09:15 - you so it's either giving you this
09:17 - or that okay so if you want to get the
09:20 - first two elements you can do it like
09:21 - this okay up to two if you want to get
09:23 - three elements you do this
09:25 - okay so if i run this it's gonna give me
09:27 - three elements if i do four and run it
09:30 - watch what happens it's gonna give me
09:32 - pretty much all of the elements right if
09:33 - i hit five it's gonna give me the cookie
09:36 - as well that that we added
09:38 - and if i do six it's going to give me
09:40 - all the way up until the blueberries
09:42 - that we've added because we still have
09:43 - the push grocery stop push there
09:46 - boom so you can see the blueberries so
09:48 - when i do zero to six it's gonna go from
09:50 - zero to actually the fifth index and
09:53 - give me
09:54 - uh up to that point cool all right now
09:56 - question for you what if i wanted not
09:59 - from zero but if i want it from
10:02 - right here the pair
10:04 - until the blueberry so what if i wanted
10:06 - this part of
10:09 - the array can you splice that and get
10:11 - that out of the array for me please take
10:13 - a few seconds take five seconds
10:15 - five four three two one and let's work
10:20 - on it together okay so i'm gonna try and
10:23 - i'm gonna do okay let's do up to six
10:29 - one two three four five
10:31 - okay like that
10:32 - this is just an example
10:34 - so let's do console.log
10:36 - and we're gonna do groceries dot slice
10:39 - and i'm gonna say
10:42 - so let's actually count together okay so
10:44 - we have
10:46 - zero one
10:48 - thank you baby appreciate it
10:50 - two
10:50 - three okay so basically we're gonna say
10:53 - give us from three
10:55 - two
10:56 - four
10:58 - five and six
11:01 - but it's gonna go up until five
11:04 - okay
11:05 - perfect so let's go ahead and do that so
11:08 - i'm gonna go
11:09 - zero
11:10 - sorry three two six and let's see if
11:13 - this gives us what we want so i'm gonna
11:15 - hit run and boom it gives us from a pear
11:19 - to a blueberry let's try another example
11:22 - okay keep doing this with me don't get
11:23 - lazy on this keep trying this with me
11:25 - while i take a sip of my water that my
11:28 - girlfriend brought me but try getting me
11:30 - apple to a pair okay try getting me
11:33 - this
11:34 - right over here okay take a second
11:39 - um and see if you can get me those three
11:42 - right here okay so take about five
11:44 - seconds
11:45 - all right
11:46 - five
11:47 - four or take take a little bit longer
11:50 - while i sip this water
11:52 - okay
11:58 - so let's give that a try
12:00 - i'm gonna go ahead and do i'm gonna
12:02 - change this to a
12:04 - one because one will get me the apple
12:07 - and it'll be zero
12:08 - one two three and four one ahead of the
12:11 - one that we need okay and let's go four
12:14 - let's hit run
12:16 - and i get apple to appear exactly like i
12:18 - wanted right it was that
12:21 - that's what i
12:22 - wanted and that's what we got
12:27 - perfect
12:28 - very very good very good okay let's keep
12:31 - making progress now all right so now
12:33 - before we graduate from uh
12:36 - slice and uh if you notice that i
12:39 - changed my shirt i just had to do an
12:41 - interview because they were because my
12:43 - girlfriend is a wow superhero she's
12:45 - candy crush
12:47 - and um they're doing a documentary on
12:49 - her so i had to go do the interview and
12:50 - i had to change my shirt because i
12:52 - wanted something black and my previous
12:53 - shirt was yellow and nice and poppy and
12:55 - so i don't know why i'm telling you that
12:57 - but
12:58 - i thought you should know let's go back
13:00 - all right
13:02 - um so here
13:04 - groceries slice so this is good but
13:08 - before we graduate i'm going to teach
13:09 - you about two different array methods
13:11 - okay so there's a couple of array
13:12 - methods that i want you to know so
13:14 - we went over slice we went over push
13:17 - i want you to learn index of and i want
13:21 - you to learn
13:23 - uh length okay
13:25 - this is probably the most like one of
13:28 - the most common ones length uh so let's
13:30 - just go through it together real quick
13:32 - so now i'm going to say console.log and
13:34 - we'll do groceries
13:36 - okay
13:37 - and i'm going to do index of and what
13:40 - index of does it it will give me the
13:42 - index of these fruits okay
13:45 - so let me just comment out these i
13:48 - comment these slices out here so i'm
13:50 - going to hit run
13:52 - let's just do
13:53 - let's just run that one so we can see
13:55 - all of our
13:56 - groceries or fruits
13:58 - perfect and so index of what it's going
14:00 - to do is if i ask for the index of
14:02 - orange it's going to literally give me
14:03 - what the index of that is so can you
14:05 - tell me what the index of the orange is
14:06 - for example banana is zero apple is one
14:09 - so orange is you guessed it too
14:12 - so let's see what it says
14:14 - all right so let's uncomment these lines
14:17 - and let's go here and we're gonna pop in
14:19 - orange here
14:20 - okay and we're gonna say hey what's the
14:22 - index of this orange let's run it
14:24 - and i just gave back two
14:26 - all right let's ask it about the pair
14:29 - and let's run it and it give back three
14:31 - because this is three okay so that's
14:33 - what index of does helpful to kind of
14:35 - know you won't be using it too often i
14:37 - mean honestly when i'm coding majority
14:39 - of the times i don't use it but i just
14:41 - thought since this is the array section
14:43 - i cover these methods because they're
14:44 - going to be helpful for you all right
14:46 - i'll comment this out for now so index
14:48 - of and then the other method you need to
14:50 - know is dot length okay so that one is
14:52 - going to be important so let's go ahead
14:53 - and do console.log
14:56 - groceries and can you guess what length
14:58 - is going to tell you
14:59 - dot length length starts from 1
15:03 - and so it will take the overall length
15:05 - of this so however many items are in
15:07 - here is going to give you that back so
15:09 - let's count one two three four five six
15:14 - so length is going to give you back
15:17 - six
15:18 - all right let's give it a try and let's
15:20 - run it boom there we go see that six
15:22 - right there
15:24 - that's it that's that's what uh that's
15:27 - what length does
15:28 - okay perfect so now we can basically say
15:31 - you've graduated from arrays yay good
15:35 - job there's a bunch more to it but this
15:37 - is just an over simplified you know what
15:40 - arrays can do
15:42 - you'll learn a lot more about arrays a
15:44 - lot better once we get to the loops
15:46 - because there's a lot of cool things you
15:48 - could do with arrays they're like my
15:50 - favorite thing in coding i think arrays
15:52 - are literally my favorite thing and next
15:54 - up we're going to start learning about
15:56 - objects okay so let's go ahead and start
15:58 - learning about them now all right now
16:00 - let's talk about objects so here's the
16:02 - first thing we're going to do we're
16:03 - going to comment out line 144 and 135 so
16:06 - there's nothing being printed okay let's
16:09 - go ahead and hit run and look at that we
16:10 - have nothing coming out to the console
16:12 - log that's perfect all right now let's
16:14 - go ahead and let's talk about objects
16:17 - objects are really really important and
16:19 - they're really awesome so in just one
16:21 - second we're gonna work on right when i
16:23 - snap my fingers we're gonna work on a
16:25 - new object all right this is the object
16:27 - we're gonna be working on so as you can
16:30 - see here we have mr leonardo dicaprio he
16:34 - is our he's our object in this case and
16:37 - he has a couple of properties so his
16:39 - properties are he has a name so if you
16:41 - do person.name you know that should we
16:44 - need to set that to leonardo
16:46 - and then his shirt here will be white
16:50 - okay because if you can actually see his
16:52 - shirt is
16:53 - white back there so we need to create an
16:55 - object that actually represents that so
16:57 - let's go ahead and do that now so i'm
17:00 - going to put him
17:01 - over here kind of in the corner so you
17:03 - can see him now let's create an object
17:05 - to represent that so we're going to say
17:07 - const person and object is created by
17:09 - doing these squigglies okay so these
17:11 - squigglies represent an object so so far
17:14 - right here we have created essentially
17:16 - an empty object
17:19 - now what we're going to do is we're
17:20 - going to add some properties
17:23 - to that
17:24 - person object okay so we're going to add
17:27 - a name so the name of this person in
17:30 - this case will be leonardo
17:32 - and shirt will be white
17:35 - this is an object if i format this you
17:38 - see this is how an object looks if you
17:40 - want to make it look a little bit like
17:41 - prettier and kind of how you know pros
17:44 - write prose would probably make it look
17:46 - like that okay kind of how it looks like
17:48 - here so open squiggly close squiggly it
17:51 - doesn't matter if you have it on the
17:52 - same line or you don't okay so it
17:54 - doesn't really matter which way you have
17:56 - it
17:56 - both ways will work all right now this
17:59 - here pretty fairly represents what we
18:02 - have over here you have a person object
18:05 - the name is leonardo shirt is white now
18:07 - let's go ahead and console.log and
18:09 - access some of the properties of this
18:11 - object that we created so we're gonna do
18:13 - person.name and when i console this
18:15 - you're gonna see that the person name
18:17 - and i'm gonna move this up here okay
18:19 - when i when i run this you can see that
18:21 - the person name is indeed leonardo kind
18:24 - of just like what we wanted right in the
18:26 - start and can you guess what person that
18:29 - shirt is gonna give me when i type that
18:31 - in and when i hit run take a guess
18:35 - exactly you're gonna get white okay just
18:38 - like we had expected here because those
18:40 - are the properties and that's how you
18:42 - access them so that's how objects work
18:45 - so first let's learn different ways of
18:47 - accessing this object okay dot notation
18:50 - versus bracket notation these both of
18:53 - these you should know okay so how do you
18:55 - access objects so you're right now
18:57 - you're using a dot notation now here's
18:59 - an example of a bracket notation let's
19:02 - do console.log and we're going to say
19:04 - person and we're going to do name like
19:06 - this
19:07 - and let's run it and boom you also get
19:10 - leonardo right over here well give it a
19:13 - try try doing the shirt but with the
19:15 - bracket notation try accessing it i'll
19:17 - give you five seconds five four three
19:20 - two one all right let's see if you got
19:23 - it so i just triple clicked to copy and
19:26 - then i did command c to copy and then i
19:27 - went down and command v to paste you
19:29 - could do ctrl c or ctrl v to copy and
19:31 - paste and then double click the name
19:33 - inside here change that to shirt hit
19:35 - command s or ctrl s if you're on windows
19:37 - to save and automatically run apparently
19:40 - it's not automatically running so let's
19:41 - run click the button here or command
19:44 - enter and boom you can see that the
19:46 - shirt is coming out white right so we
19:48 - got different ways access an object
19:51 - that's really good now there are
19:53 - different ways to assign
19:55 - things to an object as well so for
19:56 - example i could give him a phone number
19:58 - okay so i could actually do person.phone
20:01 - so notice we don't actually have phone
20:03 - in here and i can do phone and we could
20:06 - give him a number
20:09 - like that
20:10 - okay
20:11 - person.phone and then we're gonna go
20:13 - ahead and do console.log
20:16 - and we'll say person. let's go ahead and
20:19 - try it let's see what happens and boom
20:22 - you can see that we actually get that
20:24 - phone number right there but also you
20:27 - can actually console log the entire
20:29 - person as well so you can see what that
20:30 - looks like so let's go console log
20:32 - person let's go ahead let's hit run
20:35 - and you can see
20:36 - you can see this object right over here
20:39 - name shirt phone so now this object has
20:42 - all of the things and it didn't have
20:45 - that before so it's kind of like how in
20:48 - arrays we were almost doing like push
20:50 - it's kind of like that but like it's
20:52 - just you're creating a new key on the
20:53 - fly and giving it a property another way
20:56 - you could actually create that property
20:58 - is by putting this in bracket notations
21:00 - as well because you could go like this
21:02 - bracket notation and say hey person
21:04 - phone is actually equal to this hit run
21:06 - and watch what happens boom you got the
21:08 - same thing and that also works so both
21:11 - work okay the reason why we're putting
21:13 - the phone number in quotes by the way as
21:15 - in we're making it a string is because
21:17 - if you didn't do that it would try to
21:19 - subtract it will do 1 minus 2 2 2 minus
21:22 - 3 3 3 minus 4 4 4 and evaluate to a
21:26 - big negative number
21:28 - that's not what we want right so put
21:30 - that in quotes because we want the exact
21:33 - phone number and phone numbers or
21:34 - strings all right so now let's say you
21:36 - want to create another person okay so
21:39 - i'll give you an exercise for you to do
21:40 - and let's go ahead and do this
21:42 - right now so i'm going to give you a
21:43 - different person with different name and
21:46 - different shirt and i'm going to need
21:47 - you to create an object a person object
21:50 - that represents that okay so you can
21:52 - call that object person2 all right so
21:54 - let's go ahead and do that here you're
21:56 - going to call this object person 2.
21:59 - all right so now instead of leonardo
22:00 - dicaprio you're going to get somebody
22:02 - better yours truly
22:04 - and you have the object right over here
22:07 - okay so this is the object that you have
22:09 - and these are the properties that this
22:11 - object have okay so try to see
22:14 - if you can make this object by yourself
22:17 - either pause my video
22:19 - or take a couple of seconds right now to
22:21 - do this but i'm gonna start doing this
22:23 - in five four three two one okay let's do
22:27 - it
22:28 - so i'm gonna basically there's a const
22:30 - person two
22:31 - and i'm going to say name is causey
22:34 - right and make sure to put a comma so
22:36 - after every property right so let's go
22:38 - through an object
22:40 - so we have squiggly bases squigglies in
22:43 - the start and closing okay instead of
22:45 - brackets
22:46 - object arrays have brackets
22:49 - and then you have a key and a value all
22:52 - right so objects are key
22:54 - value pairs
22:57 - all right so you have a key here and a
22:59 - value here a key here and a value here
23:01 - okay
23:02 - so
23:03 - a key you can also sometimes call it a
23:05 - property okay so here the key is name
23:08 - and the key is shirt okay and name and
23:11 - shirt is also the property so you could
23:12 - say kind of both ways
23:15 - so you put in the key right person name
23:18 - and you get back the value which is
23:20 - actually the name
23:21 - right you do the same thing here with
23:22 - the phone
23:24 - so you take your object
23:26 - you put in the key
23:27 - right and then that key unlocks and we
23:30 - set this value for that key
23:32 - again we do person.phone so we did the
23:34 - object and the key
23:36 - and then the key gives us the value
23:39 - right and kind of think of it like
23:40 - opening a lock all right so name here so
23:43 - this is the first key value the second
23:44 - key value we're going to set is shirt
23:47 - is black
23:48 - okay and uh that's it that's the way you
23:52 - represent this object right so if we do
23:53 - console log person2
23:56 - and run it
23:58 - boom you can actually see that it's
24:01 - showing you
24:02 - quasi uh and shirt is black okay that's
24:06 - super cool and uh if i change this to
24:09 - you know what if i want quasi's name
24:11 - what if i only want the name can you try
24:13 - that for me if i only want the name
24:16 - boom hopefully you got this correct okay
24:18 - let's run it and now we're getting the
24:20 - name well what if i want the shirt as
24:22 - well
24:24 - same idea right if i run this we're
24:26 - going to also now get the shirt so shirt
24:28 - color
24:29 - and we got it as black let's turn this
24:31 - into a function that then
24:33 - says
24:34 - hi my name is qazi and my shirt is
24:37 - black okay so let's go ahead and create
24:39 - a function okay so remember how we
24:42 - create functions right there different
24:43 - ways you could do function
24:45 - or you could do the
24:46 - fancy way like this
24:50 - we'll call this function introducer
24:52 - because it introduces you to other
24:54 - people okay
24:55 - and this is gonna take in
24:58 - let's say we can give it a
25:00 - shirt
25:02 - and it will also take in a name so let's
25:05 - go name and shirt okay
25:07 - and if we want to turn this whole thing
25:08 - into oh sorry whoops and we're going to
25:10 - do
25:11 - if you want to do error functions this
25:13 - is how we're going to do them okay so
25:14 - we're going to go ahead and say
25:17 - name comma shirt and we're going to do
25:19 - arrows like this i'm going to go here
25:22 - all right now
25:23 - the final sentence that we're going to
25:25 - return
25:26 - right is going to basically be remember
25:28 - template literals all right so let's use
25:30 - the template literals again and we're
25:32 - gonna say
25:33 - hi my
25:34 - name is name
25:36 - okay and we're just gonna say name like
25:38 - this for now my name is name and the
25:41 - color of my shirt is whatever the color
25:45 - of your shirt is okay so in this case it
25:47 - should be like black so here let's say
25:49 - if we had it hard coded it would be like
25:51 - this but we don't want it hardco um we
25:54 - don't want it hard coded right
25:56 - so we're going to do here is name we're
25:58 - going to make it dynamic we're going to
26:00 - send name
26:01 - and remember and see if you can make
26:03 - this shirt dynamic as well boom we're
26:06 - going to say sure
26:07 - and we're going to save this into a
26:09 - variable called intro so const intro is
26:12 - equal to that uh but we're going to make
26:14 - an object first so just so you can keep
26:17 - practicing an object okay so we're
26:19 - basically going to say we're going to
26:21 - create a
26:22 - cons person object and this object is
26:25 - going to have a key name and the value
26:28 - of that key is also going to be named
26:30 - because that's what we're passing it i'm
26:31 - just going to say name right here and
26:33 - it's also going to have a shirt and
26:34 - that's just going to be the shirt that
26:36 - we pass it okay so these are
26:38 - values that we're giving it
26:40 - these are the actual keys that are hard
26:42 - coded okay so these will stay the same
26:44 - these will be exactly name and exactly
26:46 - shirt and this part will be dynamic
26:48 - these are the values that we give it and
26:51 - so then we're gonna
26:52 - in order to get this person's name
26:55 - remember what we have to do right it's
26:57 - person dot
26:59 - name perfect and now how are we gonna
27:01 - get this shirt we're gonna do person dot
27:03 - what person dot shirt perfect good job
27:07 - if you
27:08 - kept up with that okay so we're creating
27:10 - an object right here and we're creating
27:13 - the intro and now we're just gonna say
27:14 - return the intro all right
27:17 - that's our function and let's give it a
27:19 - try
27:20 - so let's go console.log let's call our
27:23 - function introducer and let's give it a
27:25 - name quasi and let's give it a shirt
27:28 - color and we'll say black and let's run
27:31 - this
27:32 - and look at that right we're getting hi
27:34 - my name is kazi and the color of my
27:37 - shirt is black beautiful so we're using
27:39 - template little i mean this is advanced
27:42 - this is awesome if you're doing this
27:44 - good job for doing this this is using
27:46 - this is a
27:47 - es6 error function right this function
27:50 - has
27:51 - two arguments
27:53 - and you created an object in here
27:56 - and then you're using template literals
27:59 - so there are a lot of concepts in here
28:01 - that you're doing so great job on
28:03 - following along and doing this with me
28:05 - even if you didn't get it it's good that
28:08 - you're you know you just followed along
28:10 - and like did it and hopefully you got it
28:12 - working on your computer like that's
28:13 - what's really important so here i have
28:16 - this and if i if i show you right hi my
28:18 - name is kazi and the color of my shirt
28:19 - is black now let's go ahead and comment
28:22 - out all the other stuff that we had here
28:23 - right so i'm going to comment this out
28:26 - um you can leave this or comment it out
28:28 - i'll just comment it out you can comment
28:30 - out pretty much
28:32 - all of this
28:34 - okay and i'll comment out this person
28:36 - right here too and we'll just hit run
28:39 - and it should just say hi my name is
28:40 - kazi and the color of my shirt is black
28:42 - okay so the only console log that should
28:44 - be happening is the one coming from this
28:46 - function this function is super cool
28:49 - because this function is like creating
28:50 - an object and then doing the template
28:52 - literals accessing data from that object
28:55 - very nice okay this is a very very nice
28:58 - uh well-written function so good job if
29:01 - you got here so far now try
29:03 - see if you can now do this call the same
29:06 - function but see if you can call it on
29:08 - leonardo and with the shirt being white
29:10 - so give that a try i'll give you five
29:12 - seconds five four three two one all
29:17 - right let's do it together so i'm gonna
29:18 - say console.log we're gonna say
29:20 - introducer
29:22 - and we're gonna see leonardo here
29:24 - right and the shirt color is going to be
29:28 - white
29:29 - these arguments have to match right so
29:31 - this matches that
29:33 - and then this matches that okay so these
29:36 - arguments the order here matters okay
29:39 - and uh let's run this and let's see if
29:42 - it does the leonardo one as well and it
29:44 - does hi my name is leonardo and the
29:46 - color of my shirt is shirt okay so we
29:50 - probably gotta say white here hi my name
29:52 - is leonardo and the color of my shirt is
29:53 - white beautiful
29:56 - this is doing exactly what we want we're
29:57 - going to go ahead and comment this out
29:59 - and so far you're doing absolutely
30:02 - fantastic
30:03 - all right now let's take this even a
30:06 - step further let's say that we want to
30:08 - have this person but we also want to
30:10 - calculate and have their net worth okay
30:13 - so i'm going to go ahead and refresh
30:14 - this page and let's just uncomment the
30:17 - quasi in black here perfect my name is
30:19 - kazzy and the color my shirt is black
30:21 - blah blah perfect we want to say
30:24 - uh this person has certain assets okay
30:27 - so assets they have is like let's say a
30:29 - hundred thousand dollars all right and
30:31 - the debt they have is fifty thousand
30:33 - dollars
30:34 - so
30:35 - if you want to calculate the net worth
30:37 - it's really easy it's just assets minus
30:38 - debt or assets minus you know you could
30:40 - say let's say liability all right
30:43 - so
30:44 - it's how much basically money do you
30:46 - have and then how much debt do you have
30:47 - it's very simple for an average person
30:48 - so if you want to calculate your net
30:49 - worth you could do that right now like
30:51 - it's very easy you could have a negative
30:52 - net worth or a zero net worth and if you
30:54 - have a positive net worth that's
30:55 - incredible so here you would have a net
30:58 - worth of fifty thousand right hundred
30:59 - thousand minus fifty thousand we could
31:01 - do that right and so we could say and my
31:03 - net worth is and i could do this and i
31:06 - could basically say uh person.assets
31:09 - minus person dot liability liabilities
31:15 - and paste that there okay
31:17 - so let's run this and let's see what we
31:19 - get hi my name is kazi and the color of
31:21 - my shirt is black and my net worth is
31:23 - fifty thousand dollars we could put a
31:25 - dollar sign here right and we could say
31:28 - we could say we you don't need to say
31:30 - usd but you could if you want and it
31:32 - says my name is blah blah my net worth
31:33 - is 50 000 usd so this dollar sign is uh
31:37 - pretty much
31:38 - to actually put a dollar sign and then
31:40 - the next dollar sign and squigglies are
31:42 - to basically say hey i'm writing
31:44 - javascript let's make this even nicer
31:46 - i'm going to teach you how to create
31:48 - methods inside of an object okay and
31:51 - anytime you've seen dot met something
31:53 - that's usually a method okay when you're
31:57 - calling it so like math.floor remember
32:00 - when you saw math.floor math.floor this
32:03 - is a method if you didn't have this math
32:06 - part here and it was just like this this
32:08 - would be a function and if this open
32:10 - close parenthesis weren't here this
32:11 - would be a property so i know it can be
32:13 - confusing but here's a great example all
32:16 - right you have an object right here
32:18 - properties are just with dot to car.name
32:21 - car.model those are all properties right
32:23 - but
32:24 - methods are car.start with the open
32:26 - close print card.drive open close print
32:28 - car.break open close paren so methods
32:30 - look like this all right so just kind of
32:32 - take a mental screenshot of this for now
32:34 - all right so here's what we're gonna do
32:36 - here's a really cool thing and kind of
32:38 - advanced thing that you could do with
32:39 - objects so i can actually create a net
32:41 - worth field and what this will do is
32:44 - what i essentially want to do is i'm
32:45 - going to say hey assets minus
32:47 - liabilities but if i do this i'm going
32:49 - to run into a problem okay so let's try
32:52 - that so let's remove all of this and
32:54 - let's paste just
32:55 - netperson.net worth and let's see what
32:57 - happens if we run this and it says
33:00 - assets that's not defined and you're
33:02 - probably thinking wait access is defined
33:03 - right here so why isn't it just using
33:06 - assets this is that's not how it works
33:08 - so in when you're defining an object
33:10 - because all of this is happening at the
33:11 - same exact time this isn't like created
33:15 - yet and so it doesn't know so what you
33:17 - want to be able to do is you want to be
33:18 - able to say person dot assets but it
33:21 - also won't really know that so here's
33:24 - the hack here's a way that we do this
33:25 - okay so we're going to create a function
33:27 - and yes you can actually store functions
33:30 - inside of objects which is kind of crazy
33:32 - open close paren all right we're just
33:34 - going to do this this is going to be
33:35 - your net worth function what it's going
33:37 - to do is it's going to return and we're
33:40 - going to say this dot assets minus this
33:43 - dot liabilities this thing is kind of
33:46 - weird but what this is referring to is
33:48 - this specific person object that you've
33:50 - created so it's literally like imagine
33:52 - plugging in person.assets and
33:54 - person.liabilities okay but you're going
33:56 - to use this this whole thing here is
33:58 - going to become 100 000 and this entire
34:01 - thing is going to evaluate to 50 000 and
34:03 - then this thing is going to evaluate to
34:04 - 50 000 like this and then once you
34:06 - return this it's going to pop up in your
34:08 - console so let's go back
34:10 - boom this assets sold liabilities and
34:13 - net worth is a method so even though
34:15 - we've defined as a function it is a
34:17 - method and i'll show you why because now
34:19 - in order to call it if you do person not
34:21 - net worth watch what's going to happen
34:22 - it's not going to work let's run it and
34:25 - we just got
34:26 - hi my name is kazi and the color of my
34:28 - shirt is black and my net worth is
34:29 - function return assets so it just like
34:31 - just like spit out this entire function
34:34 - that's not what we want we want the
34:36 - actual result so we need to call this
34:38 - method and this is how you call it okay
34:41 - boom you call it just like a function
34:43 - but because it has a dot here it's
34:44 - called a method so the person has a net
34:47 - worth method
34:49 - now let's run it and watch what happens
34:51 - boom
34:52 - right my name is causing color my shirt
34:53 - is black and my net worth is 50 000
34:57 - and now to make this code even more
34:58 - dynamic assets and liabilities should be
35:02 - passed by the user okay so that could be
35:04 - like another thing that that might be
35:06 - nice right now it's hardcoded but that's
35:07 - okay we can just kind of leave it as is
35:09 - just to kind of show you that you could
35:11 - do some more advanced stuff with objects
35:13 - all right so let's run this okay and if
35:15 - you change the name it'll also work
35:17 - change the assets liabilities you'll get
35:19 - different numbers all right so if you
35:20 - got this far great job uh we're gonna
35:23 - hit run on this to just make sure we
35:25 - we're gucci but if you got this far
35:28 - you're almost an object master so good
35:32 - job okay
35:33 - you probably don't know like everything
35:35 - there is to know about objects okay but
35:36 - like you know more than 98 of the
35:39 - population so you should be proud of
35:42 - yourself give yourself a pat on the back
35:44 - right about now go ahead and do that for
35:46 - me and and you're beautiful and you
35:48 - matter
35:49 - and i'm happy that you're here so thank
35:51 - you warms my heart
35:52 - all right with that said let's continue
35:55 - all right now let's keep having more fun
35:57 - with the arrays because the more
35:59 - practice you get with arrays and loops
36:01 - the better of a programmer you're going
36:03 - to become because honestly that's like
36:05 - 90
36:06 - of what you're doing in programming
36:07 - you're usually getting max a lot of data
36:10 - and you're looping through it and you're
36:11 - doing something to it okay that's like
36:13 - super common and so let's just get a
36:16 - bunch of different practices in all
36:18 - right so
36:20 - we're gonna go ahead and make another
36:22 - function and uh this function we're
36:24 - gonna make is going to be called letter
36:26 - counter okay so let's go letter
36:28 - counter okay you can also call it
36:30 - counter whatever you want and
36:33 - we're going to use it making an error
36:35 - function
36:36 - all right and basically what this
36:38 - function is going to do is it's going to
36:40 - take a look and see how many
36:43 - letters are in a given phrase okay so if
36:46 - i gave it a phrase
36:47 - let's say khan's phrase is equal to
36:50 - hey can you
36:52 - go to grocery
36:55 - store
36:57 - okay whatever
36:58 - all right this will go through this
37:00 - whole thing and it will basically just
37:02 - just count how many letters there are
37:04 - okay let's call it how many letters
37:08 - and so you're just gonna go through and
37:10 - this is gonna be a one there's gonna be
37:11 - a two this is gonna be a three a four a
37:15 - five for the empty space six seven eight
37:18 - nine so you can do this you can count an
37:20 - empty space as a letter that's totally
37:22 - fine so think about how you're gonna
37:23 - write a function like this right think
37:25 - about what are you gonna need to do well
37:27 - you're gonna need to loop through this
37:29 - and the cool part is you can actually
37:31 - loop through these types of phrases you
37:33 - can loop through strings as well first
37:34 - let's comment out um anything we kind of
37:37 - have up here okay perfect and now in
37:40 - here i'm gonna go ahead and i'm gonna
37:42 - say let's let's write a loop okay i'm
37:45 - gonna say for
37:46 - letter in phrase and let's see if this
37:49 - works and let's do console log and we'll
37:51 - say letter okay and let's hit run and
37:53 - let's see what happens okay it's running
37:55 - okay so what we need to do in order to
37:57 - make sure that this actually runs is we
37:59 - need to call this function that we just
38:01 - made right so let's go right here and
38:02 - i'm going to say console.log and we're
38:04 - going to say how
38:06 - many
38:07 - letters okay and let's just call that
38:09 - function
38:11 - and there we go okay one two three four
38:13 - five
38:14 - and then it ends with um undefined okay
38:18 - all good so this keeps looping through
38:20 - and then it just prints out the letter
38:22 - that's what we're looking for right and
38:23 - we actually don't even need to call
38:25 - console.log here because we're printing
38:27 - out from the function so let's try
38:28 - running this and now you see there's no
38:30 - undefined right and we we go from 0 to
38:33 - 40. but it needs to start from a 1.
38:37 - and if you think you're getting this or
38:39 - you know how to kind of solve this or if
38:41 - you even want to try i highly recommend
38:44 - you just pause my video right here and
38:45 - actually give this a try okay go ahead
38:48 - and try to like do this on your own and
38:50 - then you can come back to this but i
38:51 - want you to get a ton of practice with
38:54 - this stuff because that's how you're
38:55 - gonna get better not just by watching me
38:58 - but by doing it with me that's how
38:59 - you're going to get better
39:02 - so if we want to count the the letters
39:05 - in here right or this this how many are
39:08 - in there we can't start counting from
39:10 - zero okay
39:12 - so what i'm going to do is we can just
39:15 - make it where if i'm getting
39:17 - uh
39:18 - a letter here right oh and if you were a
39:20 - little bit confused like wait how are we
39:23 - when we run this
39:24 - how are we getting the numbers
39:27 - with this four
39:28 - loop right so you can also say for cons
39:30 - letter and if you change this to of
39:33 - because remember i taught you like i
39:35 - taught you four of loops earlier
39:38 - so if you do letter of phrase you're
39:41 - actually gonna and you run this you're
39:42 - gonna get letters
39:44 - the actual letters
39:45 - all right if you run um
39:48 - letter in phrase it's gonna get you the
39:51 - index at each one of those
39:53 - right so if you wanna get 41 well what
39:56 - we want to do is
39:59 - uh just do
40:03 - letter plus one
40:05 - okay so this will just increase it by
40:07 - one whatever it is
40:09 - and if
40:11 - and for whatever reason this letter
40:13 - thinks it's a string so it was doing
40:15 - that weird thing where it's attaching
40:18 - you know
40:19 - zero plus one is zero one and one
40:22 - plus one is one one it's attaching
40:24 - itself so it thinks letter is a string
40:26 - so just type cast it into a number so
40:29 - force it to be a number
40:31 - and then
40:32 - you get this okay so this is like
40:35 - one very silly way of doing this and you
40:36 - get oh i get 41 at the end so that's it
40:39 - that's how i'm getting my
40:41 - this is how i'm counting my letters but
40:42 - there are better ways i'm going to show
40:44 - you in just a second
40:45 - all right so now let's talk about better
40:47 - ways of doing this yeah so what we want
40:49 - to do is
40:52 - we want to have we want to set a
40:54 - variable here that let's say is so we're
40:57 - going to say let
40:59 - uh result equals zero okay
41:04 - let's go here and we're going to go
41:06 - we're basically going to say
41:09 - result is equal to
41:12 - number and we're going to call index and
41:13 - we're going to say plus 1. because all
41:15 - we're doing here
41:17 - is the loop already allows us to get up
41:19 - up to 41 right so we know that this is
41:21 - the correct answer all we want to do
41:24 - is store that correct 41 in result
41:27 - and then at the end of this loop
41:29 - we want to just return that result at
41:32 - the
41:32 - end that's all we're looking to do
41:36 - okay so
41:37 - because okay so i'll give you an example
41:39 - okay let's just do
41:41 - result is index
41:44 - and here let's just return result
41:47 - let's remove this line
41:49 - well we can keep that line so you can
41:51 - just see how the loop looks
41:54 - and we're gonna run this function but
41:56 - wrap it in console log all right
41:58 - actually we can do a trick here to make
42:01 - this look really nice so here we have
42:03 - return result right in order to make it
42:05 - we want to make it look like this result
42:07 - is 40. so there's a nice trick we can do
42:10 - in our return
42:11 - and we can basically say we can return
42:14 - it as an object so when you print it out
42:17 - the object is going to look really nice
42:18 - like this
42:20 - right
42:22 - and then there's a even nicer shortcut
42:24 - where if you just add in
42:27 - one thing and wrap it up in an object
42:30 - it's going to automatically set this as
42:32 - the key
42:34 - and
42:35 - use this as a variable for value so it's
42:37 - going to set the word result as the key
42:40 - and use the value 44 from this so it's a
42:44 - super cool little hack
42:46 - and you can use this pretty often so
42:49 - let's run this
42:50 - and boom you can see that result in this
42:52 - case is 40. so now you can see that
42:54 - result is returning
42:56 - pretty much the last value in this
42:59 - entire thing that we get right when we
43:02 - print out our uh indices
43:05 - so these are this is you know this is
43:07 - like
43:08 - basically saying this is zero this is
43:10 - one this is two
43:12 - but we just want to start it off with
43:14 - the one so
43:16 - um
43:17 - let's go ahead and all we need to do
43:19 - here to index is
43:21 - we just need to add a one to it and also
43:24 - remember we need to wrap the index in a
43:26 - string
43:27 - just like this oh sorry not in a string
43:29 - i'm sorry wrap index in a number because
43:32 - it is a string okay so we need to
43:34 - typecast it
43:36 - let's run this and boom you get result
43:38 - is 41. right so
43:42 - now
43:43 - phrase we can change the phrase right
43:46 - and again
43:47 - how many letters is a function that
43:49 - takes in the phrase so let's make this
43:51 - let's extract this argument out now
43:55 - and instead we'll put phrase over here
43:58 - and we'll pass it in the phrase okay so
44:01 - the function itself shouldn't have to
44:04 - worry about the phrase it should just
44:06 - wait for what the user is going to give
44:08 - it as a phrase and it says result is 41.
44:10 - now imagine i change this and i go
44:12 - prompt the user
44:14 - for
44:15 - you know
44:16 - write your phrase
44:18 - okay and now let's run this and now this
44:21 - pop-up happened at the top so i'm going
44:23 - to write my phrase
44:25 - i am wearing a nice green
44:29 - shirt
44:32 - right so when we do that
44:35 - let's go ahead and run this
44:37 - and i hit okay
44:40 - and let's see what happens here
44:44 - let's hit okay
44:45 - and right when i hit okay boom we got
44:47 - 31.
44:49 - all right so that
44:50 - that phrase has 31 characters
44:54 - now here's something sad i'm gonna tell
44:56 - you
44:57 - you can actually replace there is a
44:59 - method for strings
45:01 - that allows you to calculate the total
45:03 - of uh you know see the length of a
45:05 - string
45:06 - and that is just
45:08 - dot length okay so for example if i well
45:12 - we don't open up a shell let's just stay
45:13 - here so say i have a string here
45:16 - okay let's zoom in so you can see that
45:18 - better
45:19 - all right so say i have a string here
45:21 - that is
45:23 - banana if i just call dot length on this
45:26 - and run this you notice it'll give me a
45:28 - six
45:30 - okay
45:32 - and uh let's call let's say
45:37 - banana wants to know
45:40 - your slogan
45:41 - dot length it'll give me back 32 so a
45:45 - dot length is a property
45:49 - on anything that's of type string you
45:52 - can call anything that's a string you
45:54 - can call dot length on it okay
45:58 - and that returns the final answer
46:00 - so let me zoom out here which means
46:02 - which means i could actually remove my
46:05 - entire code
46:06 - right
46:08 - and basically just say
46:11 - the result is phrase.length
46:14 - change this whole thing with one line of
46:17 - code hit run
46:20 - write your phrase
46:23 - it's going to say something crazy and
46:25 - let's see if it can calculate it fast
46:26 - and it did and it goes result is 107
46:30 - okay
46:31 - but let's write it in our way because
46:34 - remember that's the way you learn how to
46:36 - do it and right now it's important for
46:38 - you to manually learn to do these things
46:41 - because i want you to develop and focus
46:43 - on your skill set then once you get
46:45 - better
46:46 - normally what you would do
46:48 - is
46:49 - you know
46:51 - javascript string
46:53 - um length you will just like google this
46:56 - okay and see if that exists and you'll
46:58 - google this and you'll go somewhere and
47:01 - it will say that let's see
47:03 - w3schools is usually a really good
47:05 - resource
47:06 - and it's just showing you text make a
47:09 - text let it equal to hello world
47:12 - let length be text.length and it also
47:14 - allows you to try it yourself so you can
47:16 - always click that and you could hit run
47:18 - right and boom it says 12 here and what
47:20 - if i change this to something random and
47:22 - let's hit run and you can see it says 38
47:26 - right over there yeah
47:28 - so
47:30 - uh this is how you would normally do it
47:32 - in real life
47:34 - you just google these things you have to
47:35 - memorize anything okay but right now i'm
47:39 - just kind of getting used to having you
47:40 - get used to exercises do them yourself
47:43 - okay now let's build it up and take it
47:44 - up a notch okay so let's
47:47 - let's uh make a function
47:49 - that sums things okay that's also going
47:51 - to require loops
47:52 - and arrays
47:54 - so i'm going to go ahead and we're going
47:56 - to comment this out and we're going to
47:58 - comment this out so we're going to go
48:00 - const uh sum array
48:04 - it's going to take in some numbers
48:07 - and
48:08 - we're going to have a result we're going
48:11 - to say
48:13 - let result equals zero
48:15 - okay
48:16 - and then we're going to have some kind
48:17 - of for loop action going on here and
48:20 - then we're gonna
48:22 - return the
48:23 - result and let's just do this trick like
48:26 - that we did last time and
48:28 - something is gonna go in the for loop
48:30 - okay something is gonna go inside of the
48:31 - for loop oh sorry we forgot to put the
48:34 - arrow functions not bad arrows there we
48:36 - go and what's going to go inside of this
48:38 - for loop is basically going to be
48:40 - imagine this right imagine how we would
48:41 - do this manually so say we have uh
48:45 - these numbers or let's say we have these
48:47 - numbers okay this we know that this
48:49 - should if we ever have 1 2 3 4 we know
48:52 - that this should equal to 10.
48:56 - now how are we going to actually sum
48:58 - this up in normal life what would our
49:00 - pattern be well i probably have some
49:03 - variable let's just call it result and i
49:05 - would
49:06 - set it to
49:08 - zero in the start or i might set it to
49:11 - whatever this number is right over here
49:14 - okay so you could you could do either or
49:16 - but let's just start it with being a
49:18 - zero okay so it starts off being a zero
49:20 - then what we do is we loop through and
49:23 - we make the result becomes one then we
49:26 - loop through again and we do one plus
49:29 - two and then result becomes two oh sorry
49:32 - three then we loop through again and we
49:35 - already have this three here so we add
49:38 - three to this three right here
49:40 - so we add this to that
49:42 - and we get result is equal to six and
49:44 - then we add four to that and we get ten
49:47 - so that's how we would do it kind of as
49:48 - a human being if we were to do it like
49:50 - manually
49:51 - and do it with each step and that's how
49:53 - we're gonna do it with our computer
49:54 - we're just gonna have it loop through
49:56 - and keep adding these numbers okay so
49:58 - let's go ahead and now write that loop
50:00 - so again try to give this a try and see
50:02 - if you can do this yourself okay because
50:04 - what you've learned so far you should be
50:06 - able to come very close to solving this
50:08 - so take five seconds to do it and also
50:11 - pause your pause my video in these five
50:12 - seconds to try it yourself so five four
50:15 - three
50:16 - two
50:17 - one
50:18 - all right let's get back to it so here
50:20 - we go
50:21 - i'm gonna say
50:23 - for
50:24 - const
50:25 - number of numbers
50:28 - all right and let's just call console
50:30 - log number
50:32 - and uh let's call our function console
50:36 - sum array
50:38 - okay and
50:39 - let's give it an array so we're going to
50:41 - have we're going to give it this array
50:42 - of no it's going to be called nums okay
50:45 - let's remove
50:47 - let's comment out all of this because we
50:48 - don't need that and let's pass our
50:52 - summary nums and let's just run this
50:55 - okay so we get back one two three four
50:57 - because it's looping through and
50:59 - printing number out each time
51:01 - so if i give it an array of one two
51:03 - three four it goes okay number is one
51:05 - the first time print it out number is
51:08 - two the second time print it out numbers
51:10 - to read the third time print it out so
51:11 - on and so forth
51:13 - all right so it's printing this out
51:15 - result is still saying zero so now what
51:17 - we need to do is we need to increment
51:19 - our result so let's go ahead and do that
51:23 - now okay so again try to give this a try
51:25 - and now we're going to do this so all
51:27 - i'm going to say is i'm going to say
51:28 - result and i'm going to say result
51:30 - plus
51:32 - and we're going to do
51:34 - whatever is the new number that i'm
51:36 - getting okay
51:38 - and let's just see if this works and i'm
51:40 - going to hit run
51:42 - and it says result is 10. interesting
51:44 - did that really work well let's try it
51:46 - with and let's add 5 to this array and
51:49 - let's see if that works and i'm going to
51:51 - hit run and we should get 15
51:53 - and boom result is 15. beautiful okay so
51:57 - let's see
51:58 - um
51:59 - how this is happening what is going on
52:02 - all right so let's do something to
52:03 - visualize this code and see exactly how
52:07 - this works i'm going to copy this let's
52:09 - go over to
52:10 - pythontutor.com all right and then hit
52:12 - enter once you're in pythontutor.com
52:15 - you're going to go to related services
52:17 - where it says javascript tutor okay and
52:19 - click that this website is awesome so
52:22 - paste your code
52:24 - and uh just for simplicity sake i'm
52:26 - going to remove any console log because
52:28 - we don't really need that it's going to
52:29 - help us visualize so
52:31 - there's going to be no need for that and
52:33 - we don't need any comments either it's
52:34 - unnecessary for you to remove it but i'm
52:36 - just going to remove that for simple
52:37 - simplicity sake
52:39 - then hit this big button here that says
52:41 - visualize execution so let's click it
52:44 - okay perfect all right
52:47 - now
52:48 - on the left hand side is going to be our
52:50 - code on the right hand side is going to
52:52 - be visualizing exactly how this code is
52:54 - running
52:55 - very important to notice
52:57 - also
52:59 - this red
53:00 - arrow
53:01 - means the next line to execute so which
53:05 - is the next line of code it's gonna
53:06 - execute okay so it's already telling us
53:08 - that this is
53:09 - gonna be when i hit run or when i hit
53:12 - next to step through this this is the
53:14 - line of code that the computer is going
53:16 - to run
53:17 - and we're just going to go through step
53:19 - by step and see exactly which line runs
53:22 - exactly when
53:23 - and green arrow will mean
53:26 - the line that was just previously
53:28 - executed
53:30 - cool
53:30 - so this is our function let's walk
53:32 - through this all right so let's go ahead
53:34 - and hit next okay
53:36 - so now it sees we have a function called
53:38 - sum array and
53:40 - boom it's like okay i got you there it
53:43 - is there it is i see it let's hit next
53:45 - again
53:46 - now it's on const uh
53:49 - const nums as you can see right here
53:50 - right so this is the line that's about
53:52 - to execute next so let's hit next and it
53:55 - goes okay i see that there is a variable
53:57 - called nums and it's inside of this
54:00 - array okay or it's this array right here
54:02 - it refers to this array and this is the
54:04 - global frame because this is
54:07 - uh these are all variables that are
54:08 - outside of this function so these are
54:11 - accessible from anywhere and from
54:13 - everywhere okay and we'll talk more
54:15 - about scope in the upcoming videos now
54:17 - next line is going to execute is it's
54:19 - going to call this function summary with
54:21 - the argument nums okay and then our
54:24 - entire function is going to start
54:25 - running so let's hit next cool
54:28 - so now we're inside of our function and
54:30 - the first line of our function is just
54:32 - about to run
54:34 - so the first line is going to be what
54:36 - result is
54:37 - cool so let's uh right now result is
54:39 - undefined okay but once this line runs
54:42 - here result is going to have a value so
54:44 - let's hit next
54:45 - and boom result is now set to zero
54:48 - now
54:50 - okay so this green is just showing you
54:51 - the last line that ran
54:53 - now the red is showing you that we're
54:55 - about to start running our for loop and
54:58 - we're just gonna be teeter-tottering in
54:59 - between
55:00 - this line the for loop line line four
55:03 - and line five and line four and line
55:04 - five and line 4 and line 5. until the
55:06 - entire loop is done then we're gonna go
55:08 - to this line here and return the result
55:10 - at the end okay which and again remember
55:13 - uh you know we're going to touch base on
55:15 - scope
55:16 - but if you put this if you put things in
55:18 - the wrong scope wrong things will happen
55:20 - for example if you put this result
55:22 - inside of this these squigglies here
55:24 - right this is just going to keep
55:25 - returning every single result but that's
55:27 - not what we want we want to return the
55:29 - results after this entire for loop is
55:31 - done right and then we want to return
55:34 - this result okay
55:35 - so let's run through this and see what
55:37 - happens okay so right now it doesn't
55:39 - know what number is either
55:41 - okay but it does know it results as zero
55:43 - and it also knows that numbers
55:46 - refers to this array right here okay
55:49 - let's hit next
55:50 - okay
55:52 - boom
55:53 - boom boom all right there we go
55:55 - and now it says number is one perfect
55:59 - that's exactly what we wanted right
56:00 - number is one because the first time
56:02 - we're going through the array right it's
56:04 - a one that's why that's where the number
56:06 - is coming from now let's see what it's
56:08 - going to do the result so watch what's
56:10 - going to happen it's going to do results
56:11 - going to be 1 this time so it's going to
56:13 - do 1 plus or sorry result is zero right
56:16 - now so i'm going to do zero
56:17 - plus the number one
56:19 - okay let's try that and now you can see
56:21 - result is one let's do it again now
56:24 - number is two so two plus one result is
56:27 - going to be
56:28 - three okay
56:31 - three plus three result is going to be
56:33 - six
56:34 - six plus four result is going to be
56:37 - 10. okay and notice how it was just like
56:40 - boom boom boom boom it's just these
56:42 - lines running over and over again right
56:45 - and now the result is 15 now the loop
56:48 - ends because there are no more numbers
56:49 - to loop through
56:51 - and we go to result
56:53 - result is 15
56:55 - and then we return the result at the end
56:57 - return value
56:59 - right and the return value here in this
57:01 - case is
57:04 - this object it was of type object
57:07 - and it says result is equal to 15.
57:13 - so there you have it a full
57:15 - visualization of a for loop exactly how
57:18 - it works and what is happening and
57:20 - hopefully that clarifies things for you
57:23 - a lot further
57:25 - so i want you to try something
57:27 - try writing this function some array
57:31 - by yourself from scratch
57:33 - and i know we just did the answer
57:36 - but i want you to give it a try without
57:38 - referring to this and see if you could
57:40 - create this function by yourself and if
57:43 - you could that would be fantastic and
57:45 - just give it give it give it a shot
57:46 - right and if you could get this working
57:48 - see you know that would be absolutely
57:50 - amazing and then check back with this
57:52 - and see how far you got all right let's
57:54 - do some
57:55 - more exercises with loops
57:58 - arrays objects whatever right because
58:00 - this is going to make you so much better
58:02 - so
58:03 - let's make a function called max
58:05 - supposed to const let's say find max
58:09 - okay or you could call it max as well
58:11 - and it's going to take in numbers and
58:14 - it's going to have um let's say
58:17 - uh cons result and then
58:21 - it's gonna return the result
58:23 - okay and then we're gonna have
58:27 - something some loop stuff happen here
58:29 - okay some loop stuff and here's how the
58:32 - algorithm is gonna work okay imagine we
58:34 - have an array of
58:36 - you know let's just say one
58:38 - two
58:40 - three and four and five okay imagine we
58:43 - have this array right here and let's
58:45 - just put commas here
58:46 - because that's how the array would look
58:48 - have these commas and what we're gonna
58:51 - do is we're initially gonna set result
58:53 - to one and then we're gonna loop through
58:54 - and we're gonna say hey it's two greater
58:57 - than one
58:58 - check these
59:00 - if it is then result set it to two
59:03 - okay then loop again
59:06 - all right is three greater than two
59:10 - if it is then set result to this then
59:13 - check between these two numbers if four
59:15 - is greater set four if five is greater
59:17 - set five
59:18 - and then once the loop is done it's
59:20 - going to return the biggest number
59:22 - okay
59:23 - and now imagine if you know in in
59:27 - let's say there was a case where we had
59:29 - a
59:30 - one here
59:31 - okay let's see if it would work if that
59:33 - same algorithm would work there
59:35 - okay set one to the biggest set one
59:39 - to result okay great
59:41 - now check between these twos two greater
59:44 - yes then make two the result okay then
59:47 - check between these
59:49 - is three greater okay make three the
59:51 - result check between these
59:53 - is four greater okay make four the
59:55 - result
59:56 - check between these is one greater
59:58 - no then don't make one the result keep
60:02 - for the result right and and then that's
60:04 - how we're we end up with four so that's
60:07 - kind of the algorithm that we would do
60:09 - okay now we just have to code it up so
60:12 - we're basically gonna say set result not
60:14 - to zero okay because imagine
60:17 - what if you had an array with only
60:20 - negative numbers in it well then zero
60:21 - would be the biggest number so that's a
60:23 - common trap do not set result to zero
60:26 - we're gonna instead say
60:28 - results is the first item of this array
60:32 - okay we're assuming we're getting back
60:33 - an array or we're getting an array here
60:36 - okay
60:37 - and then we're gonna say is loop so
60:39 - we're gonna say we're gonna write a four
60:41 - of loop const number of numbers
60:44 - and basically we're going to say if
60:47 - number is
60:49 - greater than result
60:51 - in that case what do we want to do
60:54 - we want to set result to that number
60:56 - that we just found
60:58 - and at the end
60:59 - when we're done with this loop we just
61:02 - simply
61:02 - return the result okay so let's go ahead
61:05 - and give this a try
61:06 - and let's comment out anything else that
61:08 - we might have running okay we don't have
61:10 - anything else running so we're oh we do
61:13 - so let's
61:14 - comment out these lines right here and
61:16 - let's just go console.log and i'm going
61:18 - to say max and let's give it numbers
61:20 - like one two three four
61:22 - five
61:23 - and let's see what it returns as the max
61:25 - aha yeah so this is not a const let's
61:28 - make this a let because we are going to
61:29 - be changing result okay so this error is
61:32 - saying assignment to constant variable
61:34 - so all it's saying is hey you cannot
61:37 - redefine a constant so that's why i'm
61:39 - changing it to a let now you can
61:41 - redefine it right here and we should be
61:43 - good and let's do that trick again let's
61:46 - return result as an object so it looks
61:49 - nice when we print it and you can see
61:50 - result is five now imagine we have one
61:53 - comma two one two so the max in this
61:57 - array is what
61:58 - it is a
62:00 - it's the four so let's
62:02 - see if it gives us a four
62:04 - yes it does beautiful look at that let's
62:06 - go 20 now
62:08 - and 10. and let's see if that works
62:11 - beautiful and now let's make this array
62:14 - now let's make this massive right like
62:15 - let's just
62:18 - um yeah let's let's take this right here
62:22 - and let's just paste a couple of times
62:24 - and run it and look at that it says
62:26 - result is 20 and if i make this
62:29 - a 3 over here and run it
62:32 - boom result is 30 i mean it will find it
62:34 - wherever the max is it will find that
62:37 - max right so this is a really nice
62:40 - function that we have created now let's
62:42 - keep building on this okay so this is
62:44 - all going to be making sense and trust
62:46 - me it's going to be so important for you
62:47 - once you start getting to
62:49 - building projects and doing those types
62:52 - of exercises you're going to wish that
62:54 - you spent the time to learn this because
62:56 - this is going to be a complete game
62:58 - changer for you all right so our max
62:59 - function is done
63:01 - let's work on a different function now
63:03 - and what this function will do is
63:06 - it will
63:08 - calculate frequency okay so let's go
63:10 - ahead and try that so we're going to say
63:12 - const
63:14 - frequency okay it's going to take in
63:18 - uh let's say a phrase
63:21 - that somebody will say and it'll tell
63:23 - you how many times
63:25 - uh that phrase or that or sorry that
63:28 - that letter occurs okay so let's just
63:30 - say
63:31 - letter frequency
63:33 - okay so what does that mean so say i
63:36 - said
63:37 - haha
63:38 - here's what it should return
63:40 - okay so if i call the function letter
63:42 - frequency on the word haha here's what
63:45 - it should return it should return
63:47 - an object and the object should say h
63:51 - occurs twice
63:52 - and a
63:54 - occurs twice
63:56 - that's what it should return so
63:59 - how do we
64:00 - create this function so it does that if
64:03 - you want to give it a try you can this
64:05 - will be hard because you'll need to use
64:07 - your object knowledge as well that we
64:09 - put together a while ago
64:11 - but this will be using you know summing
64:14 - up numbers looping through things
64:16 - iterating and all kinds of stuff like
64:17 - that and so
64:19 - uh incrementing variables it's going to
64:20 - be a tough one if you try to solve it
64:22 - yourself but you should give this a try
64:24 - right about now and we'll continue in
64:26 - five seconds five four three two one
64:30 - let's continue
64:32 - so i have letter frequency how do i
64:34 - determine this
64:36 - okay let's figure it out together
64:38 - first let's just go ahead and call this
64:40 - function so we're just going to say
64:42 - letter
64:43 - frequency and we're going to give it
64:44 - that phrase haha like this
64:48 - and uh let's console log that phrase
64:51 - let's delete that line and let's just
64:53 - make sure that this letter frequency is
64:55 - running okay haha is showing up perfect
64:57 - now what do we want to do
64:59 - we're we're getting haha
65:01 - well we need to actually start writing a
65:04 - for loop that will start going through
65:06 - all of those letters because that's
65:07 - going to be important
65:09 - okay
65:10 - so let's go ahead and write a for loop
65:12 - i'm going to say four letter const
65:15 - letter
65:16 - of phrase and let's just go console.log
65:19 - and we're just going to console.log each
65:21 - letter and let's see what we get
65:23 - we get h a h a
65:25 - okay great now this is where
65:27 - objects are going to start becoming very
65:29 - very handy because
65:31 - you know key value pairs are going to be
65:34 - absolutely clutch for this
65:37 - arrays are not a good solution for this
65:39 - okay but like objects are objects are
65:41 - also great for storing you know
65:43 - information in your phone book like on
65:46 - my iphone
65:47 - when i'm going through that is being
65:49 - stored in an object okay that's why i
65:52 - have you know my name
65:53 - my you know i could look up somebody by
65:55 - their name their phone number etc and
65:57 - objects are great for that so we're
66:00 - gonna go and look at something in the
66:02 - console okay and that's going to make
66:04 - our lives a lot easier so say we have
66:06 - something called
66:08 - word and this word has let's actually
66:11 - give it let's actually call it frequency
66:13 - right or freak um
66:16 - and let's say this frequency has
66:19 - that the h is
66:22 - once
66:22 - and that's it okay so it has one h in
66:24 - there now if we have a word like haha or
66:28 - whatever right or if we want to just
66:29 - check
66:30 - yo is h inside of the frequency
66:35 - we're actually able to check that and it
66:37 - goes yes h actually exists because it
66:39 - can if you do h and frequency what it
66:42 - does is it looks for
66:43 - h as a key
66:45 - ins and searches all the keys inside of
66:48 - an object
66:49 - okay so it goes yes h exists
66:52 - and uh if i go
66:54 - you know because of the word haha does a
66:56 - exist in frequency and when i look it
66:58 - says
66:59 - no that a does not exist that's actually
67:02 - false
67:03 - so using this we're actually able to see
67:05 - if we've already stored something in our
67:08 - object or not because the way that we
67:10 - want to do this is we want to go and say
67:12 - okay so say we have the word haha then i
67:16 - want to have a object
67:18 - i'll just write it out here and it
67:20 - should loop through
67:22 - and in the first loop it should notice
67:24 - that there's a letter h so as soon as i
67:26 - notice the letter h i make a key for h
67:30 - all right and because i know it showed
67:32 - up once i set it to one so i go that key
67:36 - is equal and it has a value of one now
67:40 - then i loop through that
67:42 - other word again and this time i see
67:45 - that we have a okay perfect
67:48 - well have i seen a before
67:51 - no i haven't so then i set a to one
67:54 - and so far so good okay then we loop
67:57 - through the third time and i see h again
67:59 - well i've already seen this before
68:02 - so what do i do if i've seen this before
68:05 - am i gonna go ahead and make another h
68:08 - and then set that to one you can't do
68:10 - that because in objects you can't have
68:12 - the same key repeating twice so we have
68:14 - this key here this key here so what will
68:17 - happen instead is we will end up
68:20 - overwriting this key
68:22 - and just do h is one
68:24 - and that's what it was in the first
68:25 - place but that's not the result we want
68:27 - we actually want to
68:29 - we actually want to increment this key
68:31 - right here
68:32 - this h1 right so we want to increment
68:35 - this one
68:36 - by doing plus one and making it a two so
68:39 - how do we do that well what we do is we
68:41 - go
68:42 - hey does h already exist and we do this
68:45 - little checker here right there
68:47 - and if it says yes h already exists then
68:50 - we go go to h and and and add one to its
68:54 - value so it goes okay i'm gonna go ahead
68:57 - and i'm gonna do that
68:59 - so we go to this and this becomes a two
69:02 - right and then we go to the fourth
69:04 - letter in haha
69:06 - and we do the same thing and we go hey
69:08 - does a actually exist in frequency and
69:11 - in this case it's supposed to be a true
69:14 - and it goes yes a does exist and so if
69:17 - that's true
69:18 - we then go okay find the existing a find
69:21 - its value and increment its value by one
69:24 - and then we get two
69:26 - oh okay so that's how that works that's
69:28 - how that works
69:30 - so let's go ahead and basically say that
69:32 - algorithm
69:34 - but in code this time
69:36 - so first we're gonna make a frequency
69:39 - make
69:40 - frequency object
69:42 - and that's gonna store all the memory
69:44 - slash all the data of what it has seen
69:47 - so far
69:48 - okay so this is so make a frequency
69:50 - object okay it's going to be called
69:51 - frequency
69:53 - kind of like we did here okay but in the
69:55 - start it's just going to be empty it's
69:57 - going to be an empty object
69:59 - then we obviously loop through all the
70:01 - letters of the phrase
70:03 - and we check if that letter that we
70:06 - found in phrase does that already exist
70:08 - in
70:10 - frequency so
70:12 - check if letter exists in frequency
70:18 - so you make sure to you know we're kind
70:20 - of writing pseudo code right now because
70:22 - we're just writing it kind of like code
70:24 - but in english and then later you just
70:26 - turn it into
70:28 - code and then you're done so if we check
70:30 - if the letter exists in frequency okay
70:33 - what next
70:35 - well if it exists remember if it exists
70:38 - we're gonna increment by one
70:42 - otherwise we set it to 1.
70:45 - so let's write that check if letter
70:47 - exists in frequency
70:49 - if it exists so this is going to be
70:51 - indented because this is going to be
70:53 - nested inside of this if condition and
70:55 - we're going to say if it exists well
70:57 - then
70:59 - increment
71:02 - the value
71:04 - by one
71:05 - otherwise
71:11 - set it set
71:16 - the value to one
71:19 - okay that's essentially all we're doing
71:22 - and so now take take some time to see if
71:25 - you can actually write this as code and
71:27 - then obviously at the end we're just
71:29 - going to return that frequency that we
71:31 - created okay so we're going to return
71:33 - that frequency so const or let's go let
71:36 - frequency
71:39 - equal an empty object
71:42 - so see if you could code up the rest of
71:44 - this okay take maybe
71:46 - a minute or five minutes or whatever and
71:48 - even if it takes you 20 minutes it's
71:49 - totally fine because this is normal okay
71:52 - you're not supposed to get it this fast
71:53 - this is supposed to take you a lot of
71:55 - time
71:56 - but take some time i'll give you five
71:57 - seconds to pause the video and try it on
71:58 - your own five four three two one
72:02 - all right let's do it together now
72:05 - check if the letter exists i'm going to
72:06 - say how do i check well i just checked
72:08 - by doing letter
72:11 - in frequency okay does that letter exist
72:13 - in frequency this will evaluate to true
72:16 - or if false that's it i'm going to say
72:18 - if
72:20 - letter is in frequency
72:23 - then
72:23 - do the following
72:25 - okay then we're going to say increment
72:26 - the value by plus one so how do we do
72:29 - that let's do that right now
72:31 - we're just going to say frequency
72:36 - of that letter so we're creating a new
72:38 - key on the fly
72:40 - and we're going to say equal to
72:47 - whatever it was before
72:50 - plus one
72:52 - okay so it's like whatever frequency
72:55 - of the letter previously was just like
72:58 - incremented by one okay if it doesn't
73:00 - exist which is the only other scenario
73:04 - then what we can actually say
73:06 - is we can go and say hey set the
73:09 - frequency
73:11 - of that letter
73:12 - to one
73:13 - that's it
73:15 - and then we just return that frequency
73:18 - okay so let's try it on this word
73:21 - haha and see what we get
73:24 - and look at that we get h is 2 and a is
73:28 - 2.
73:29 - that's crazy right like we just coded
73:31 - that out from scratch and it works so
73:34 - nicely and let's try
73:37 - um lol what are you
73:40 - doing
73:42 - later tonight lol
73:44 - haha
73:47 - okay
73:48 - let's run this
73:50 - and it just runs through every single
73:52 - letter right here
73:54 - and it says l happens about five times
73:58 - is that true let's see l
74:01 - so one two
74:04 - and then we got
74:06 - three
74:08 - four five yep so that looks like it
74:10 - happens five times and it says how many
74:12 - times o happens and it says how many
74:14 - times a comma happens how many spaces
74:16 - there are
74:17 - and it just shows you the whole freaking
74:19 - thing right
74:21 - so
74:22 - frequency is working as expected now one
74:24 - thing i'm going to show you is called
74:27 - incr these are incremental operators
74:30 - okay at least that's what i call them
74:32 - and they are plus plus
74:35 - minus minus
74:37 - plus equals
74:40 - okay um plus equals one and so
74:44 - these are incremental operators they're
74:46 - really really helpful and make
74:48 - everything shorter so for example this
74:50 - over here
74:52 - you won't ever see it written like this
74:54 - if somebody's coding this up they're
74:56 - gonna write this like this
74:59 - okay so it's gonna say plus equal one so
75:02 - plus equal one is the same thing as
75:04 - frequency letter
75:05 - is equal to frequency letter plus one so
75:08 - these two
75:09 - are equal and i just want you to kind of
75:11 - get used to seeing them okay and we can
75:13 - go and change
75:15 - some of our stuff
75:17 - above as well so like where it says
75:19 - result equals result plus number
75:21 - right
75:22 - how could we change this here
75:25 - try it on your own take about five
75:26 - seconds and this you should be able to
75:28 - do in five seconds five four three two
75:31 - one
75:32 - you could change this with a plus equal
75:35 - all right
75:36 - incrementing it like that okay
75:39 - and if you're incrementing something by
75:41 - one here's the cool thing you could also
75:44 - just do
75:45 - frequency plus plus
75:48 - and that just this just means that
75:49 - you're incrementing frequency by one so
75:52 - let me try hitting run
75:54 - you can see that this works right
75:56 - you can hit one run on this and you can
75:59 - see that this also works and gets the
76:01 - same result
76:02 - and we can you know
76:04 - or you can go back to the oldest one and
76:06 - see we get the same results so it's a
76:08 - matter of preference you never want to
76:10 - write it the long way
76:12 - you won't ever see it written the long
76:14 - way and you could write it in between
76:16 - these two ways so you could go plus
76:17 - equals one or you could go plus plus
76:19 - either work
76:20 - okay so i just thought you should know
76:22 - those you could also go minus minus and
76:25 - that will like decrement it
76:28 - okay and um
76:30 - you know
76:31 - so i'll just leave this as plus equals
76:34 - one for you just so you can wrap your
76:36 - mind around this
76:37 - and get used to seeing it okay so these
76:40 - are incremental operators they're very
76:42 - very useful and
76:44 - very commonly used
76:46 - now i'm going to remove all these
76:48 - comments or i can just leave them here
76:50 - if because you know this might
76:52 - this might kind of hurt your brain a
76:54 - little bit how's this frequency thing
76:56 - working so i'm going to leave that here
76:58 - for you all right now let's just keep
77:00 - building on this and let's keep taking
77:02 - it a step further so now instead of
77:04 - letter frequency
77:06 - let's
77:07 - improve our our skills and and do
77:10 - something called word frequency okay so
77:12 - we're going to build a new one i'm going
77:14 - to say const
77:15 - word frequency
77:17 - and see if you can try to challenge
77:18 - yourself to take a stab at this phrase
77:23 - and then we're gonna run this function
77:25 - okay
77:26 - and we're gonna do the similar similar
77:29 - type of approach we're going to create
77:30 - frequency here as an empty object and
77:33 - we're going to return frequency at the
77:35 - end
77:36 - all right
77:37 - um and
77:39 - inside of here we're going to do our
77:42 - like coding okay this is where we're
77:43 - going to be doing our logic now
77:46 - here's the one interesting part here
77:48 - i'm going to comment this out
77:50 - obviously let's comment that out let's
77:53 - go ahead and console.log word frequency
77:55 - to make sure it's running
77:57 - and let's give it a phrase the phrase is
77:59 - lol
78:00 - what is going on
78:03 - lol what
78:05 - law let's just say that okay lol what
78:07 - lol so we know that if we run that
78:10 - here's what we should get so
78:14 - if i run this function so let's have an
78:16 - example and this is also really good for
78:18 - documentation because
78:20 - by looking at this people can know
78:22 - how to call your function and then what
78:24 - your function actually returns at the
78:26 - end so i'm going to say word frequency
78:29 - and if i call this function with this
78:31 - phrase law what law
78:34 - it will return the following it'll say
78:37 - lol
78:40 - occurs twice
78:42 - and
78:44 - what
78:45 - occurs one time
78:47 - okay just like that
78:50 - and um this is what it should return so
78:54 - how do we make it so it does that well i
78:56 - wanna i have to teach you a couple of
78:58 - things for this so say i have a phrase
79:01 - and let's go phrase is equal to lol what
79:05 - lol
79:06 - so what we would really love
79:10 - for to happen is imagine we had an array
79:13 - and it had a it had things like this
79:19 - that'd be really nice because if we loop
79:22 - through something like that right in an
79:24 - array it would just
79:25 - loop through the words and we want to
79:27 - loop through the words instead of
79:29 - letters that's the only difference here
79:31 - between last exercise and this exercise
79:34 - okay so how then the question is how do
79:37 - we get it into an array so we can loop
79:38 - through it because
79:39 - if you try to loop through it in a
79:41 - string watch what's gonna happen okay so
79:43 - if you try to loop through in a string
79:45 - it's gonna loop through and print out
79:47 - every single letter from here
79:49 - so let's try to write a loop and loop
79:51 - through this i'm going to say
79:53 - 4
79:56 - letter
79:57 - in phrase
80:02 - console.log letter
80:05 - okay and we're gonna hit enter we're
80:06 - gonna close the parentheses and run this
80:09 - right and it's just gonna oh sorry not
80:11 - not in let's run that loop again and say
80:14 - of
80:20 - of
80:22 - and it's just going to print out every
80:23 - single letter well that's going to be
80:25 - confusing because it's going to
80:26 - count letters for us and instead what we
80:28 - want to do is we want to count words
80:30 - entire words right and words in this
80:32 - case are separated by what what's a
80:35 - common thing all of these words are
80:36 - separated by
80:37 - take i'll give you a hint they're
80:39 - separated by
80:41 - these spaces
80:43 - okay
80:44 - so we can do something cool in
80:45 - javascript we can turn this into an
80:47 - array
80:48 - um and if we turn this into an array so
80:51 - let's say i give you phrase and if i
80:53 - call dot this method got split on it
80:55 - it's a string method and i say split it
80:58 - by spaces and i hit enter watch it what
81:01 - it's going to do it's going to turn that
81:02 - into an array and now that array very
81:05 - clearly has three items and if i loop
81:07 - through through these items watch what's
81:09 - going to happen so
81:11 - i'm just going to call it array
81:13 - okay and then let's just loop through
81:15 - this f4
81:16 - word and array
81:19 - console.log
81:20 - word
81:21 - i'm sorry i'm just used to python so
81:23 - it's for of of
81:26 - of of
81:27 - so for word of array
81:29 - yeah law what law so look at that i'm
81:32 - actually looping through
81:34 - the words in that array and i can now in
81:37 - my object see if this word exists and if
81:41 - it does exist then i can increment it by
81:44 - one and if it doesn't exist then i can
81:46 - just set it to one so it's the same
81:49 - exact thing but just with words this
81:51 - time and all you have to do is turn it
81:54 - into an array of words and then you're
81:56 - good so let's give it a try now
81:59 - what we know so we're gonna once we get
82:01 - our phrase
82:02 - okay what's the first thing we're gonna
82:03 - do to it what's the first thing we're
82:05 - gonna do to that phrase to turn it into
82:07 - an array
82:08 - we're gonna do phrase dot split
82:12 - yeah this is going to turn it into an
82:14 - array but we need it to be separated by
82:17 - what it's separated by spaces in this
82:20 - case okay
82:22 - so boom this is going to give us what we
82:25 - need so now let's
82:26 - let's go ahead and um
82:29 - i'll do
82:31 - let's just call this words
82:33 - okay
82:35 - and um
82:36 - now
82:37 - let's console.log
82:41 - these words
82:43 - and hit run and watch what happens now i
82:45 - hit run and watch i got lol what lol
82:49 - okay
82:49 - if i have hello here and i run it
82:53 - lol hello yeah so now it's doing what we
82:56 - wanted to do now the algorithm is going
82:59 - to be pretty much the same as letter
83:02 - frequency
83:03 - very very similar to that so we're gonna
83:06 - basically use like a similar
83:09 - similar formula okay that we did here
83:13 - so we're gonna say
83:15 - we're already creating that frequency
83:17 - object there yeah
83:18 - and then we are returning it that's good
83:21 - so we're doing that here too we're
83:23 - creating it and we're returning it so
83:24 - that's good
83:26 - and we're gonna do the same thing so
83:28 - we're gonna say for const word
83:31 - of
83:32 - words okay let's just console log the
83:35 - words for now and let's just see
83:38 - what it's console logging so let's run
83:40 - it
83:41 - and you can see that it goes lol perfect
83:44 - every word and we're going to do the
83:46 - same thing check if it exists in the
83:48 - frequency if
83:50 - word and frequency
83:53 - then
83:54 - we're going to say
83:56 - we're going to increment it by 1.
83:59 - so we're going to go
84:01 - frequency
84:03 - word
84:04 - plus equals one
84:06 - else
84:08 - frequency
84:10 - word
84:12 - set it to one
84:14 - and at the end return frequency so let's
84:17 - try this
84:18 - and boom look at that lol is twice what
84:20 - is one time and it's already working
84:23 - right that's crazy so let's go
84:26 - yo yo yo and let's run it and here we're
84:28 - gonna see that yo is coming out three
84:31 - times lol is coming out two times and
84:32 - one is what is coming out one time so
84:36 - i mean this is so cool we just made it
84:38 - but
84:39 - there's something we can do to make it
84:41 - even better
84:43 - i want you to notice the similarities
84:45 - between this
84:47 - and the letter frequency
84:49 - thing that we wrote yeah and instead of
84:51 - calling it letter frequency let's just
84:53 - call it i mean actually let's leave it
84:55 - as letter frequency that's fine
84:58 - but they're very similar right the code
85:00 - here is very very similar to the code we
85:02 - have here for example
85:05 - we're creating a frequency object we're
85:07 - creating a frequency object
85:09 - we're returning frequency we're
85:12 - returning frequency
85:14 - right
85:15 - we're
85:16 - we have a loop that we go through we
85:18 - have a loop that we go through
85:21 - if it's detected in the frequency
85:23 - incremented by one
85:25 - if it's detected in frequency
85:27 - incremented by one
85:29 - uh if it's not detected set it to one if
85:31 - it's not detected set it to one i mean
85:34 - my gosh there must be something we could
85:36 - do because
85:38 - it looks pretty much like the same exact
85:40 - thing
85:41 - and watch there's something brilliant
85:43 - that we can do so we can actually delete
85:45 - this entire for loop
85:48 - let's get rid of this console log
85:51 - we can delete this
85:53 - let's get rid of this return here
85:56 - let's get rid of this frequency here
86:00 - and the only new thing we need in this
86:03 - is we just need to
86:04 - split it by
86:07 - spaces to break it into words
86:09 - right and let's go const words
86:12 - sorry i keep forgetting the cons
86:14 - sometimes
86:17 - and all we do here
86:18 - okay this is going to be so beautiful is
86:23 - we call our letter frequency function
86:26 - that we created earlier and we just pass
86:28 - it words
86:29 - and then ill know what to do with it
86:32 - so it goes in here
86:34 - and then it has instructions for what we
86:36 - need to do
86:37 - right and all we need to do here is just
86:39 - say return
86:41 - so let's try running this
86:43 - and look at that you guys we are getting
86:46 - the same exact answer and it is
86:49 - completely correct yo is three times
86:52 - what is once lol is two times okay
86:56 - now
86:57 - this is if this is not blowing your mind
87:00 - think about it like this when you go to
87:01 - google right and you type in kanye west
87:05 - and it starts auto completing it's using
87:08 - the same thing because it knows
87:10 - what are the things that are being
87:12 - searched frequently
87:14 - and because it knows their frequency
87:16 - it's showing them here so for example
87:18 - maybe this search over here
87:21 - right this kanye west runway
87:23 - that might be done let's say 10 times
87:26 - kanye west net worth
87:29 - might be done five times kanye west's
87:32 - girlfriend might be searched three times
87:35 - okay it's it's just an object
87:37 - and then google is sorting it and
87:40 - showing you based on the ones that were
87:42 - the most frequent that's the really cool
87:45 - part and this is why
87:47 - you know once you learn this here all
87:49 - you need to do is be able to attach a
87:50 - front end like this and boom your apps
87:52 - are going to be absolutely amazing and
87:54 - mind-blowing so let's try this now okay
87:57 - let's try our own function with
87:59 - different inputs we're going to say
88:01 - const user input is prompt
88:06 - uh write your
88:08 - sentence
88:10 - right
88:11 - and we're going to replace this with
88:14 - whatever the user types in so we're
88:15 - going to say user input here
88:18 - and call this and
88:20 - yeah let's go ahead and run it write
88:21 - your sentence and we're just going to
88:23 - say
88:25 - um
88:26 - [Music]
88:27 - kanye
88:29 - west
88:31 - has great music
88:36 - but west side
88:38 - is
88:40 - greater
88:42 - than
88:43 - greater
88:44 - than east side yeah because i live on
88:47 - the west coast in california and then
88:49 - you got all these people in new york and
88:52 - i like that my time gets back
88:54 - i get my three hours back when i come to
88:57 - california instead of losing my three
88:59 - hours when i go to new york so
89:02 - if you're in new york
89:04 - and you want to earn three hours
89:06 - back of your life forever come to
89:08 - california
89:11 - so let's try this
89:13 - yeah and um
89:15 - probably the only thing that occurs
89:17 - twice is
89:19 - west i imagine okay
89:21 - and then let's just write kanye is also
89:25 - the goat
89:26 - the goat
89:28 - that's not gonna work the goat okay
89:30 - let's set the goat
89:32 - and let's hit okay and run it and uh it
89:36 - came back
89:37 - all right and it broke it down
89:39 - and you can see it did a full breakdown
89:41 - of every single word kanye is two west
89:44 - is two
89:45 - houses one great is one music is one but
89:48 - is one side is one is two
89:50 - and the code is two thus two and it did
89:54 - it all so fast and so quick
89:56 - all right so we did a lot of
90:00 - challenges and exercises and if you
90:02 - wanna deep dive and do like a full on
90:05 - boot camp and master arrays
90:08 - and objects then i recommend you
90:10 - deep dive into exercises okay where
90:14 - we'll have
90:15 - additional exercises for you and lance
90:19 - he is going to be your boot camp
90:21 - instructor for those okay so if you want
90:23 - to become a like a legend
90:25 - he's going to help you turn into a black
90:27 - belt my job is to take you from white
90:29 - belt turning into a blue belt he will do
90:31 - that so if you want to for example you
90:33 - know because i'm going to move on to
90:35 - different topics now but if you want to
90:37 - just keep exercising this
90:40 - you can do that
90:41 - you can do that by going into say this
90:43 - exercises folder on the left hand side
90:46 - by the time you're watching this
90:47 - tutorial we'll have bunch of more
90:48 - exercises right now we have this one
90:50 - here that says convert convert hours to
90:52 - seconds you click that okay and then
90:55 - lance has this exercise prepared for you
90:58 - there's a rebel that you'll have to copy
91:01 - okay and paste in your urls and you'll
91:04 - be able to fork this and be able to code
91:06 - it on your own so this is the ripple
91:08 - that lance has created and if you want
91:10 - to be able to do it on your own hit fork
91:12 - at the top okay
91:14 - and then you can actually run this
91:17 - uh repl
91:20 - okay
91:20 - and uh you can write your code here and
91:22 - you could write your solution here okay
91:24 - and
91:25 - what lance will also be doing with some
91:27 - of these exercises he'll also have a
91:29 - link at the top of the loom video where
91:31 - you'll be able to click and watch his
91:33 - video explaining that exercise
91:35 - explaining that project in detail as
91:37 - well okay so
91:39 - think of him as a
91:41 - solid
91:42 - um you know boot camp instructor that
91:45 - just like kind of dives deep in with you
91:47 - all right so that those are going to be
91:49 - the extra resources available to you
91:52 - with that said
91:53 - with that said
91:55 - you're doing
91:56 - amazing pat yourself on the back i mean
91:59 - wow you're doing an excellent job so far
92:02 - by being here you're putting in the work
92:04 - you're putting in the effort i mean you
92:05 - could be doing so many things you could
92:07 - be playing with your kids right now you
92:08 - could be
92:09 - outside hang out with your friends
92:12 - you know
92:13 - you probably got off of work and you're
92:15 - putting in that time to learn this i
92:17 - mean that's huge dedication you're
92:19 - taking time away from all this other
92:21 - stuff you could be doing and doing this
92:22 - and now granted coding is a lot of fun
92:25 - but if you're in this stage i know
92:26 - you're doing it for learning and i tip
92:29 - my
92:30 - proverbial hat to you
92:32 - um huge props for making it this far
92:36 - with that said let's keep on rocking and
92:38 - rolling
92:39 - that was a lot i hope you enjoyed
92:41 - watching that video and learning more
92:44 - about javascript smash the like button
92:46 - if you haven't already make sure to
92:48 - subscribe to the channel because this is
92:49 - a channel where we help you become an
92:52 - incredible developer i love your
92:53 - beautiful face and as always i'll see
92:55 - you in the next video