00:00 - hey what's up guys aaron here from
00:03 - clever programmer and today we're going
00:05 - to be talking about something called
00:07 - sets in Python so let's get started so
00:12 - [Music]
00:17 - first of all a set is just like a list
00:20 - or a tuple as I explained in previous
00:22 - videos but a little bit different so we
00:25 - already um ate up all the options
00:26 - earlier right so list use brackets okay
00:29 - tuples use parentheses so what's the
00:31 - only thing left oh yeah
00:33 - braces so you might be thinking okay so
00:35 - what if I put something in braces and
00:36 - that's exactly what a set is in Python
00:39 - okay so a set is basically it's another
00:42 - way to group a bunch of things together
00:44 - in Python if you will have a bunch of
00:46 - things together but what's special about
00:48 - them besides the braces so to code them
00:52 - out besides those is you cannot have
00:54 - duplicates in a set all right you cannot
00:58 - have any duplicates so if I had the
01:01 - number is 1 through 10 in the set and
01:03 - then I tried adding 10 again it would
01:05 - just ignore it and it wouldn't add it to
01:06 - the set but if I tried to add 11 then it
01:08 - would add it to the set um set can grow
01:11 - and can grow and get smaller as well I
01:15 - believe but so it's not like a tuple
01:19 - it's not like an strain like a tuple but
01:21 - you can so you can add things to it but
01:23 - you cannot have any duplicates and it's
01:28 - also unordered that's the thing let's
01:30 - try to remember it took me it took me a
01:31 - little bit
01:31 - it is unordered so you cannot iterate
01:34 - through it in any particular order so
01:36 - you cannot be like Oh set at 0 equals
01:38 - this set at 1 equals this like you did
01:40 - with lists and tuples so that's another
01:42 - difference but the main thing is that it
01:44 - doesn't have any duplicates so one
01:46 - really cool thing you can do with sets
01:48 - is actually have a list that has
01:50 - duplicates in it all of whatever it is
01:53 - that you want and then change it to a
01:56 - list cast it to a list
01:57 - no sorry cast it to a set I talked about
01:59 - casting rulers you can actually cast
02:01 - things to a set you can cast a list to a
02:03 - set and a set to a list and what that
02:05 - will do what i just said is if you have
02:06 - a list with duplicates cast it to a set
02:08 - the set will get rid of all the
02:10 - duplicates automatically and then you
02:11 - can cast it back to a list
02:12 - and all of a sudden you got rid of all
02:14 - the duplicates in your list so that's
02:16 - all that's a very very common thing you
02:17 - do with sets but cells can also do a lot
02:21 - more let's explain what I just I just
02:24 - said though so let's say we have a set s
02:26 - equals let's just have a set of mono
02:35 - fruits let's go open Anna actually Lucy
02:40 - is blueberry and raspberry okay so we
02:46 - just have two different types of berries
02:47 - here so that's a set we can print out a
02:50 - set just like a list or a tuple I'll
02:53 - show you that real quick yes it'll have
02:55 - braces see braces here not not brackets
02:57 - or parenthesis but braces and we have
03:00 - two different two different things here
03:03 - in the set its unordered
03:04 - so you actually yeah it's a it's a
03:07 - random order they they're made in a
03:09 - random order but as you can see here
03:11 - raspberry is the second element but when
03:12 - it's printed it actually prints this
03:14 - first like what what gives and then see
03:16 - here now it's it reversed its order so
03:18 - it just it it spits out a random order I
03:20 - don't know what determines that but the
03:22 - point here is that a set is just like a
03:24 - bag of things like if you had a bag of
03:26 - different things you just chuck them all
03:28 - in there it's just there's no order to
03:30 - it it's not like a nice sequential kind
03:32 - of one thing two things three thing for
03:35 - thing five thing okay
03:37 - so let's just try to add something to
03:39 - this set okay so let's say we have
03:41 - blueberry and we have raspberry let's
03:43 - try to add something unique so this
03:45 - function that you can run on the set or
03:47 - any set is just add so you you are right
03:51 - the set here so set dot add and then you
03:53 - can add anything you want to this so
03:55 - let's add strawberry
03:56 - okay a third kind of berry and run this
03:58 - and as you can see I had a set here that
04:01 - has two two types of berries and then I
04:04 - add a third type of berry and which is
04:06 - different than these two so it added it
04:08 - and as you can see when I print it out
04:09 - it's um all three berries are here okay
04:13 - you can also add other data types it
04:17 - doesn't always have to be strings you
04:18 - can have a bunch of different things in
04:20 - there so we can just add four and then
04:22 - boom four pops up and as you can see in
04:24 - a random order let's
04:25 - again random order run it again random
04:27 - order okay so that's the ad but let's
04:31 - try to add let's try to add not
04:38 - strawberry so we're getting rid of this
04:39 - so now that said only has two things in
04:40 - it again um let's try to add blueberry
04:45 - okay oops
04:50 - if we run this this is actually not
04:53 - going to do anything because it's going
04:54 - to notice that this blueberry is already
04:56 - in the set and it's going to ignore it
04:58 - so let's head run and as you can see
05:03 - nothing was added to it if this was a
05:04 - list then the this element W that we
05:08 - have here would have been added to this
05:10 - to the list as well but this is a set so
05:13 - it didn't get added let's actually I
05:22 - want to show you guys that that little
05:23 - duplicate example that's a pretty cool
05:25 - example so let's say we had a list of
05:27 - just numbers okay one one two two one I
05:33 - can type it out one two three three four
05:37 - four four five okay so as you can see we
05:42 - have a duplicate of three here and to
05:44 - duplicate force here if we printed this
05:47 - out you guys can believe me that it'll
05:49 - look just like this right if I printed
05:50 - out this list so I'm not gonna bother
05:52 - printing that out okay but what if we
05:53 - wanted to get rid of all the duplicates
05:55 - what could we do well I said earlier
05:57 - that we can actually put it in a set we
06:00 - can cast it to a set and then cast it
06:03 - back to a list and then we'll have a
06:04 - list like a rid of all the duplicates so
06:05 - let's just say all casting first of all
06:10 - we go like this and then we pop the list
06:13 - in there so we can say no duplicate set
06:22 - this is just the variable name equals
06:24 - set of L so what what this is going to
06:27 - be is going to be a set of this lists
06:30 - without any duplicates so let's see what
06:31 - that looks like print no duplicate set
06:35 - okay
06:37 - and this just come with you so you don't
06:39 - get confused let's run this right let's
06:42 - get rid of this whole thing oh I'll
06:44 - think of a different example later so
06:46 - let's run run this okay so we have this
06:48 - list here 1 2 3 3 4 4 4 5 and then we
06:51 - casted it to a set and then we print it
06:54 - out that set here and as you can see we
06:56 - have a set because there's braces um but
06:58 - it got rid of all the duplicates okay
07:00 - there's no duplicates in here same deal
07:02 - if I had if I had um ABC and even double
07:08 - quotation marks ABC cuz those are
07:09 - equivalent and then I run this only one
07:11 - of these is going to be chosen a random
07:13 - one I believe let's run this and as you
07:16 - can see ABC is is there but it got rid
07:21 - of the duplicate here because these two
07:22 - strings are equivalent um but then you
07:27 - also want to cast it back to a list so
07:29 - we can just go like this simply like
07:31 - this no duplicates it and then we can
07:34 - say no duplicate list alright that makes
07:39 - sense yeah I should I don't know I I
07:41 - tend to use L for like lists and stuff
07:45 - it's probably not the best idea but it's
07:46 - a bad habit I'm trying to kick if you
07:48 - can avoid developing it in the first
07:49 - place I'm not doing a very good idea
07:50 - right now by being a bad example but
07:52 - maybe actually like name it of something
07:56 - like this okay list of numbers why don't
07:58 - we do to do this now I might as well do
08:00 - it now okay guys list of numbers like
08:02 - that so we have a list of numbers and
08:03 - let's get rid of this crap so that this
08:06 - makes sense we have a list of numbers
08:07 - here and then we create a set from that
08:09 - list of numbers with no duplicates and
08:11 - then we see what that set looks like um
08:12 - actually we don't need to see what this
08:14 - set looks like let's just get rid of
08:19 - these
08:21 - boom like that and then and then we
08:27 - casted the set back to a list so now the
08:30 - this list here actually should be this
08:33 - list without any duplicates so let's see
08:34 - what that looks like and as you can see
08:36 - we have a list here like a rid of all
08:37 - the duplicates here so now what you can
08:39 - finally do is actually just change it so
08:42 - list of numbers you can actually just
08:45 - say is equal to no duplicate list and
08:47 - what this will actually do is actually
08:50 - overwrite this one so list of numbers so
08:54 - what this does is let's say you had a
08:55 - list of all these numbers and you want
08:56 - to give it of the duplicates and just
08:58 - completely delete them like let's say
08:59 - you had a bunch of names and a database
09:01 - and you had you had duplicate or a bunch
09:02 - of people in a database you know
09:04 - duplicate records and you didn't care
09:05 - about the duplicate records you just
09:06 - delete them or you had a bunch of videos
09:08 - in a file on your computer and then put
09:10 - two of them are exactly the same and you
09:11 - don't need you don't need the duplicates
09:13 - you can just delete them okay if you
09:15 - don't need those you can do something
09:16 - like that and um you can do something
09:22 - like that and I'll get rid of all the
09:23 - duplicates that might be something
09:24 - actually very useful for this new course
09:26 - we have coming out called how to
09:27 - automate stuff with Python if we're
09:30 - going through file directories and
09:31 - deleting duplicates and whatnot but yes
09:33 - that's might actually come into play
09:34 - there there's something to note there
09:35 - but yeah so those are sets there are
09:38 - also some pretty cool functions and
09:41 - methods you can run on sets because are
09:45 - you guys familiar with Venn diagrams
09:47 - let's let me pull up all image here so
09:49 - Venn diagrams okay diagram so these
09:55 - things here okay you see this thing here
09:57 - you remember these two circles modeling
09:59 - this in school and it's like oh there's
10:00 - like everything and set a the thing
10:02 - instead be and then there's an overlap
10:04 - this is actually what sets are for okay
10:07 - this is what sets are used for in Python
10:10 - so you can actually have sets of things
10:11 - like this and do logic like this like
10:13 - okay there's all these people and then
10:15 - let me think of a better example
10:17 - actually okay yeah I thought of an
10:19 - example let's go back here let's get rid
10:21 - of all this okay remember sets have
10:23 - braces so we're going to be we're going
10:25 - to be creating a a we're gonna have two
10:29 - different libraries okay so let's have
10:32 - library 1 equals a set
10:34 - of oh no Harry Potter Harry pooper I'm
10:44 - actually five I am
10:46 - I'm not 24 I'm five can't multitask
10:50 - hunger games sure hunger games and Lord
10:53 - of the Rings okay so we have a 1 set
10:56 - here and then we have library 2 and then
11:01 - we're gonna have a different set of
11:02 - books here so we're gonna have Harry
11:04 - Potter okay and we're going to have
11:08 - Romeo Romeo and Juliet alright so we
11:13 - have these two separate libraries that
11:15 - have a bunch of books in them these are
11:17 - just strings we just using strings to
11:18 - like signify books and now we have two
11:22 - separate sets and we want to start doing
11:24 - this Venn diagram kind of logic so
11:25 - there's a bunch of different functions
11:26 - you can run okay on on sets to figure
11:30 - out the overlaps and whatnot so let's
11:32 - let's start with I already went over add
11:34 - right I believe you can you can run yeah
11:37 - yeah I did I did you can add things to
11:38 - it to a set by just going like this and
11:40 - only get added if it's not already in
11:42 - this set but first let's let's try this
11:45 - so we listen we have library one okay
11:47 - and then we could um we first of all you
11:51 - can just add two sets together okay you
11:53 - can add two sets together to put it all
11:55 - together but also it'll get rid of
11:56 - duplicates so you notice here how
11:58 - there's Harry Potter and both of these
12:00 - sets so one of these will actually get
12:03 - ignored and then when we add these
12:06 - together it's actually gonna have
12:07 - everything in here and this one Plus
12:09 - Romeo and Juliet it's just gonna ignore
12:10 - this Harry Potter or you're just gonna
12:12 - ignore this very part what if what did I
12:13 - do
12:15 - so let's just try that so you this the
12:18 - function is called Union Union is just a
12:20 - word that you use in in math when it
12:26 - comes to Venn diagrams like that kind of
12:27 - math I figure what it's called
12:29 - discrete math or something um it's
12:32 - unrelated but you can you can add two
12:35 - sets together and that's what you need
12:36 - that so Union just means you're gonna
12:37 - Union them together and Union
12:39 - okay so library 1 Union library 2 or
12:45 - lie-berry - just like that okay
12:48 - and we just call it the town okay let's
12:55 - just yeah I'm gonna say that there's two
12:56 - libraries in a town so I'm all but okay
12:59 - how about this all books in town that
13:03 - makes sense so if we have a town with
13:05 - two different libraries and we want to
13:06 - get all the books in the town without
13:07 - any duplicates then we can get the
13:09 - entire book list by just doing something
13:10 - like this you could go library one Union
13:13 - Library - or you can do library - dot
13:15 - Union Library one it doesn't really
13:17 - matter because it's the same same
13:19 - operation both ways
13:20 - let's hit run there I didn't print it
13:22 - out prints all books in town now let's
13:29 - hit run and as you can see oh let's go
13:31 - here now now as you can see it created a
13:34 - set combining both libraries but it got
13:37 - rid of the duplicate Harry Potter so
13:39 - that's what Union does and the power of
13:42 - a set there's some other other methods
13:45 - and functions I'm going to go over to so
13:47 - um instead of Union what else do we have
13:49 - I had to have it written down here on
13:51 - the side okay
13:54 - now we are going to if okay let's say we
13:59 - wanted to find the books that were at
14:01 - both libraries okay so we can be like
14:03 - okay um like if you if you just want to
14:08 - find the books that are both libraries
14:09 - so at both libraries I don't actually
14:12 - know why you would want to do this in
14:13 - real life like why do you want to know
14:14 - which books or maybe okay yeah I guess
14:17 - that makes sense if you want to be like
14:18 - okay if this one library burns down yeah
14:22 - it took a dark turn but if one library
14:25 - burnt down what books are you gonna have
14:26 - in other libraries as well okay that
14:31 - they're like backed up then you can so
14:33 - you can actually just run this function
14:35 - instead of Union it's going to be
14:37 - intersection okay so this is
14:40 - intersection this means what is it both
14:42 - in both sets so what you're gonna get
14:45 - here is we're going actually going to
14:47 - get Harry Potter because this is the
14:50 - only thing that is in both sets
14:51 - everything else is gonna be ignored this
14:53 - is going to be ignored and this is going
14:55 - to be ignored but Harry Potter is
14:57 - the intersections like when you have a
14:59 - Venn diagram remember you have some
15:00 - things in one circle and other thing
15:02 - than another circle you would have
15:03 - Hunger Games and Lord of the Rings on
15:05 - one side and then Romeo and Julia on the
15:07 - other side and you'd have a Harry Potter
15:08 - in the middle where they were they um
15:10 - overlap you know what I mean
15:13 - so that that's what's gonna happen let's
15:16 - just just run it and you can see how it
15:18 - uh or the rubber were at both libraries
15:21 - how it looks as you can see we get a set
15:24 - of just Harry Potter because that's the
15:26 - only thing that was common here if I if
15:28 - I also had a Hunger Games down here then
15:29 - this will be Harry Potter and Hunger
15:31 - Games okay you're getting the
15:32 - intersection um another another thing
15:35 - you can do is actually get the
15:37 - difference what difference does is it
15:39 - tells you everything in this set that's
15:41 - not in the other set okay so um if we
15:46 - have library one which has Harry Potter
15:48 - Hunger Games and Lord of the Rings and
15:49 - then we use the difference with Harry
15:51 - Potter from Romeo and Juliet then it's
15:53 - going to ignore the Harry Potter and
15:55 - actually just get the difference we're
15:56 - actually only gonna get a Hunger Games
15:57 - Lord of the Rings or only get Romeo and
15:59 - Juliet we're not gonna get all of it oh
16:00 - just just this part or just this part
16:03 - you're getting the difference like
16:04 - what's different about the sets that's
16:05 - where you're getting the difference okay
16:07 - so let's just call this diff okay diff
16:15 - equals library one difference library
16:18 - two so let's run this and see what pops
16:20 - out so as you can see Lord of the Rings
16:22 - and Hunger Games pop out pops out
16:24 - because we called library one and we
16:26 - want to see the difference with library
16:27 - two because library two has Harry Potter
16:29 - in it then we ignore it because um it
16:31 - has this in common so it just gets this
16:33 - if we reverse this then you would
16:35 - actually get Romeo and Juliet instead of
16:38 - Hunger Games and Lord of the Rings you
16:39 - see how that works so yeah these are
16:43 - pretty much sets there's a bunch of
16:45 - functions that you can use there's much
16:46 - more I'm just going over all the all the
16:48 - main ones in these videos but those are
16:52 - the oh there's actually one more called
16:53 - clear but I'll leave that up to you to
16:55 - go figure out what that does look in the
16:56 - Python documentation for sets and see
16:58 - what the function dot clear does
17:01 - probably you probably already guessed it
17:03 - yeah it clears out the set and make it
17:05 - completely empty but go and try it out
17:07 - yourself maybe code it up but those are
17:09 - sets in Python
17:11 - very useful for getting rid of
17:12 - duplicates remember that that's one of
17:14 - the most common uses of it but also if
17:16 - you're doing things like you're doing
17:17 - like some weird logic things are running
17:19 - some like really weird algorithms like
17:22 - I've done some before of my schooling
17:24 - but they're they're very handy thing to
17:26 - know no that's that's that sets are the
17:29 - braces one and that therefore getting
17:30 - rid of duplicates I probably said that
17:31 - three hundred times right now but yeah
17:33 - getting rid of duplicates that's the
17:34 - main use that I know I'm sets are useful
17:37 - so that's it for this video guys thank
17:39 - you for watching and I will see you guys
17:41 - next time good bye
17:43 - [Music]