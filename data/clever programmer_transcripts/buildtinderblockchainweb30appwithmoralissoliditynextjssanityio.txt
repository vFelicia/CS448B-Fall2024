00:00 - in this video you'll build tinder
00:01 - blockchain web 3.0 app using next.js
00:04 - we'll use metamask to wrap the entire
00:07 - app up in authentication we'll use
00:09 - morales to authenticate the users who
00:11 - actually sign in we'll be using morales
00:13 - because it's a web3 development platform
00:15 - so especially if you're a web 2
00:17 - developer it makes it really easy to
00:19 - interface with web3 and blockchain
00:20 - without writing a single line of
00:22 - solidity then we'll create a profile for
00:24 - each user using sanity io as our backend
00:27 - oh and here's something cool that we're
00:29 - going to be doing when two users match
00:31 - we'll mint an nft for them using oralis
00:34 - and solidity we'll use the so-called
00:36 - gasless minting method to mint our nfts
00:39 - that way our users don't pay a
00:40 - ridiculously high gas fee for minting
00:43 - nfts we'll use open zeppelin to make
00:45 - sure our nfts are compliant with the
00:48 - erc721 method last but not least you'll
00:51 - be able to view your very own nfts on
00:54 - openc and by the way before we start
00:56 - here's something you don't have to pay
00:57 - gas fees for the like button smash that
01:00 - oh my god
01:02 - a few moments later well here smash the
01:05 - like button turn it blue and we'll get
01:07 - the video started one eternity later
01:11 - right before we get started and start
01:12 - coding i just want to let you know that
01:14 - we're doing a collab with buildspace
01:16 - which is one of the best website
01:18 - education platforms in the world and you
01:20 - guys are going to be getting nft that
01:22 - proves you completed this project and
01:24 - it's going to be in collab with bill
01:25 - space and clever programmer it's going
01:27 - to look sick buildspace also has an
01:29 - incredible community of web3 developers
01:31 - who you can learn together with in their
01:33 - discord and they're very active last but
01:35 - not least buildspace is also helping new
01:38 - web 3d developers like yourself get
01:40 - matched up with top tier companies like
01:43 - adidas or alchemy for premium high
01:46 - contracts and i'm talking about ten to
01:47 - twenty thousand dollars a month
01:49 - contracts and their vision is amazing i
01:51 - even met their ceo barza and he's just
01:53 - an incredible amazing human being so i'm
01:55 - really excited about this collab and the
01:56 - best part for you guys it's completely
01:59 - free all you have to do is just go down
02:00 - below click the link in the description
02:02 - it's going to take you to a landing page
02:03 - and it's going to ask you to connect
02:04 - your wallet and once you connect your
02:06 - wallet you're good to go and then when
02:07 - you do this build and you complete it
02:08 - that wallet will be able to verify you
02:10 - did it you'll get your own nft and
02:12 - you'll get the entire community and
02:13 - everything that goes with it okay so
02:14 - again it's completely free go ahead sign
02:16 - up for that right now and with that said
02:17 - let's just jump right into the video so
02:19 - here we have the tinder app i'm gonna go
02:22 - ahead and sign in with metamask so i'm
02:24 - gonna connect my metamask make sure it's
02:26 - there let's go ahead and sign in and
02:28 - boom confirm boom i'm in now i can see
02:31 - my matches i can swipe right i can swipe
02:33 - left whichever way i want now i can go
02:34 - into my database on sanity and you can
02:36 - see for rafikaze here the three likes
02:38 - that i have those are all the three
02:40 - people that i swipe right on so now they
02:42 - show up we can also go and see the other
02:44 - people and see which likes do they have
02:47 - so now let's say i sign in with another
02:49 - account so i sign in with danielle's
02:50 - wallet let's go and see what she has so
02:53 - let's say she swipes left on vicky she
02:56 - swipes right on kazi now boom we go back
02:58 - to danielle and in danielle's likes you
03:00 - can actually see rafikaze just showed up
03:03 - now i can go back to rafikaze and i can
03:05 - see danielle just showed up under office
03:07 - kazi's likes because it's a match now
03:08 - okay so it's a match on both ends now
03:10 - that we have a match to happen boom look
03:12 - at that it just minted an nft based on
03:15 - that specific match and that
03:17 - is actually called rafikaze and danielle
03:20 - smith right it's happened because of the
03:22 - match it tells you when it was created
03:24 - the standard is erc 721 just like i said
03:28 - we're using open zeppelin to do that and
03:30 - i can go back and forth between each of
03:32 - the accounts i'll copy this account
03:33 - paste this address and i'll go to
03:35 - rafikaze on openc and boom you can see
03:37 - that for rafikaze it has that nft as
03:40 - well how freaking cool is that both of
03:42 - those accounts get a matching nft if
03:44 - you're excited about building this
03:45 - project i'm excited without any further
03:47 - ado your instructor for this is going to
03:50 - be once again lance so i'm gonna send it
03:52 - over to lance make sure this video gets
03:53 - over a thousand likes so he can keep his
03:55 - job because i told him any of these
03:57 - videos gets under a thousand likes he's
03:58 - fired so make sure you smash that like
04:00 - button i'm gonna send over lance lance
04:02 - take it over and start coding this bad
04:03 - boy up what is up guys welcome back to
04:06 - another video lance here again and i'll
04:08 - be walking you guys through the tinder
04:10 - clone blockchain so let's get started so
04:12 - the first thing we're going to do is hop
04:14 - over to your terminal mine's right here
04:16 - and let's get right into it by making a
04:18 - folder so hop over to your terminal
04:20 - let's create our project folder so go
04:22 - ahead and type this command what this
04:23 - will do is create a folder called tinder
04:26 - clone blockchain we can go ahead and cd
04:28 - into that folder and in here we want to
04:31 - be creating our next js app so to do
04:34 - that we can type in this command and
04:35 - you're going to write npx create next
04:37 - app at latest and don't forget to put a
04:39 - space dot because the space dot what
04:41 - this will do is create the next.js app
04:44 - and put all the files inside this folder
04:46 - that we just created okay so go ahead
04:48 - and hit enter and let all of that
04:50 - download cool now that's done hop over
04:52 - to your vs code and you can actually
04:54 - open your code open that folder so what
04:56 - i'm going to do is open folder and if i
04:58 - click select folder you will see all the
05:00 - project files of our next area that has
05:02 - happened here the next thing we're going
05:03 - to need to do is create a couple folders
05:06 - so since you're here make sure you
05:07 - create a studio folder in the studio
05:10 - folder this is where we're going to be
05:11 - setting up our database and of course
05:12 - we're going to be using sanity okay and
05:14 - then next you want to do is create
05:16 - another folder make sure it's at the
05:17 - root of your project this one is going
05:19 - to be called smart contract in this
05:21 - video we're actually going to be making
05:23 - a smart contract in solidity and
05:25 - deploying that smart contract to the
05:27 - blockchain so that's what we're going to
05:29 - be setting up in this smart contract
05:31 - folder okay now that we have that done
05:33 - we can actually open our terminal within
05:35 - our vs code and let's go ahead and set
05:37 - up sanity with our database so what
05:39 - we're going to do is if you look at this
05:41 - the path we can go into our studio
05:42 - folder so now i'm in my studio folder
05:44 - and like i said let's set up sanity here
05:46 - so in order to set up sanity what we can
05:48 - do is open up your browser and we can
05:50 - type sanity.io
05:52 - cleverprogrammer and once you're there
05:54 - you're gonna all the instructions that
05:55 - you need are gonna be right here if you
05:57 - don't have the client installed go ahead
05:58 - and type in this command into the
06:00 - terminal and then afterwards go ahead
06:02 - and type in this command here to
06:04 - initialize sanity in the studio all
06:06 - right so if you look this is the command
06:08 - right here and by doing this and adding
06:10 - our coupon code you're gonna get all
06:12 - these bonus stuff right here provided to
06:14 - you by sandy we're gonna get more api
06:16 - requests and overall just a better
06:17 - experience with the free plan so
06:19 - definitely take advantage of this and go
06:21 - ahead and hit enter awesome so we're
06:23 - gonna make a project name keep it the
06:25 - same name as our folder tinder clone
06:26 - blockchain you can hit yes for the
06:28 - default data set make sure it's the same
06:30 - path and what we want from here is a
06:33 - clean project with no predefined schemas
06:36 - okay it's linking dependencies awesome
06:38 - so if you look in the studio file all
06:39 - the sanity stuff is set up and all you
06:42 - need to do is go back to your browser
06:43 - and you can go ahead and log in to your
06:45 - account and you're gonna see that my
06:47 - project is now there notice how it says
06:48 - the boosted free plan that's how it
06:50 - knows it comes with the extra stuff all
06:52 - right so you can click into it and see
06:53 - everything you need like the project id
06:55 - which we're gonna need for later once
06:57 - that's done we can go ahead and click in
06:59 - our terminal and type in yarndev okay so
07:01 - once sanity is installed we can see the
07:03 - out of the studio into the main folder
07:05 - and then we can type in yarn okay and if
07:08 - you look local 3000 is going to be our
07:10 - starter next js app right here amazing
07:12 - let's go ahead and set up tailwind now
07:14 - so this is our next js app now let's go
07:16 - ahead and set up tailwind so what i'm
07:18 - going to do if you want to set up
07:19 - tailwind what you need to do is type in
07:21 - tailwind next js because tailman
07:23 - actually provided some really nice
07:25 - documentation and how to tell when css
07:27 - with your next app so we're going to be
07:29 - using this as a reference for the
07:30 - following steps but i can also walk you
07:32 - guys through it so the first thing you
07:34 - want to do is to copy this npm okay and
07:37 - for me i'm using yarn so instead of npm
07:39 - style what i'm going to say is yarn add
07:41 - d and install these three things
07:43 - tailwind post css and auto prefixer so
07:46 - i'm gonna get that command ready and you
07:48 - can go ahead and hit enter now all this
07:50 - should go in the root of your folder not
07:52 - the studio not the smart contract folder
07:54 - the tinder chrome blockchain folder
07:56 - awesome once that's done i want to do
07:57 - the next command which is just this npx
08:00 - tailwind css init with this will just
08:02 - initialize tailwind to our project and
08:04 - also to create these two files
08:06 - tailwind.config.js
08:08 - and post
08:09 - css.config.js so what you need to do is
08:11 - go ahead and find that tailwind.config
08:14 - and you're going to need to add these
08:16 - two lines into your content array at
08:19 - module exports so what i'm going to do
08:21 - is press enter here paste and there you
08:23 - go it looks good so that's in there the
08:24 - last thing we need to do is put in these
08:27 - three directives so you can copy this
08:29 - this one's gonna go in the global.css
08:32 - notice how there's a bunch of starter
08:33 - files here we can go ahead and take a
08:35 - rid of that and put the directives on
08:37 - top and hit save once that's done let's
08:39 - reset our terminal and type in yarn dev
08:41 - again and now our project is installed
08:44 - with tailwind css so now that tailwind
08:46 - is set up let's go ahead and set up our
08:49 - smart contract side of things so in
08:52 - order to do that let's open up our
08:53 - terminal again and let's make sure let's
08:55 - make sure we're inside our smart
08:57 - contract folder so we're cd into it and
08:59 - then when you're in your smart contract
09:00 - folder we're gonna be using hard hat
09:03 - okay and to set up hardhat i'm just
09:04 - gonna go into my terminal and type in
09:07 - npx hardhat okay and what you want to do
09:09 - is create a basic sample project enter
09:12 - add a git ignore and just say sure
09:14 - awesome so if you're unfamiliar with
09:16 - hard hat all it is is an ethereum
09:18 - development environment and we use this
09:19 - to compile the contracts that we create
09:21 - to then deploy them to the network of
09:24 - our choice next you want to do is in
09:26 - this same folder we want to do yarn add
09:28 - at open blend
09:31 - contracts okay so type in this command
09:33 - into your terminal and hit enter what
09:35 - this will do is install open zeppelin
09:37 - and you know if you're not sure what
09:38 - open zeppelin is when you create a smart
09:40 - contract we need a standard to follow so
09:42 - the standard that we're gonna be
09:43 - following it's gonna be called
09:45 - erc721 and that is the standard for
09:48 - non-fungible tokens a term that you guys
09:50 - might have heard is erc20 which works
09:52 - with fungible tokens or whenever real
09:55 - money is involved so make sure you add
09:57 - open zeppelin and let's go ahead and set
09:59 - up the smart contracts so now if you
10:01 - look with hard hat initialized if you
10:02 - look into the folders let's make this
10:04 - bigger with hardhat initialize you're
10:06 - going to see in the smart contract
10:07 - folder a couple things notice the
10:08 - contracts the scripts everything else so
10:11 - if you look at the contracts folder
10:12 - you're greeted with this boilerplate
10:14 - code all right and there's also some
10:15 - extensions notice how it's all grayed
10:17 - out and all just one color what you need
10:19 - to do if you see this is go to
10:21 - extensions and type in solidity all
10:23 - right you're gonna see something by juan
10:24 - blanco go ahead and install that all
10:27 - this is an extension to provide solidity
10:29 - support for vs code and solidity is what
10:32 - we use to type smart contracts for
10:35 - ethereum okay so once it's installed if
10:37 - i go back to the greeter.sol notice how
10:39 - we have solidity support now awesome so
10:42 - as great as this is we don't need it
10:43 - we're gonna be making our own smart
10:45 - contract our own smart contract today so
10:47 - i'm just going to make a new solidity
10:48 - file and i must call it tinder erc7
10:52 - and make sure you add the dot soul
10:54 - extension to make sure it's a solidity
10:56 - file awesome so once that's done you
10:58 - always want to use a license when you're
11:00 - making a solidity contract so what you
11:03 - need to do is just type in this right
11:05 - here awesome next thing you want to do
11:07 - is type in the version of solidity that
11:09 - you're using i'm going to say pragma
11:11 - solidity and you can go with this if
11:14 - you're watching this video this is one
11:16 - of the current versions of you
11:17 - can use which just signifies hey i want
11:20 - to tell my computer that i want a
11:22 - version of solidity that is this and
11:25 - higher okay cool next thing we need to
11:27 - do is remember how we installed open
11:29 - zeppelin we're going to add the import
11:31 - statements to import our standardized
11:33 - contract which again is erc 721 which
11:36 - works with non-funchable tokens okay
11:38 - next thing we have to do is let's set up
11:40 - our contract but to start creating our
11:42 - smart contract i want to say contract
11:44 - and then the name of my contract and
11:46 - then you can say is erc 721 url storage
11:51 - okay there we go awesome so if this
11:53 - doesn't make any sense to you if you
11:55 - guys are familiar with classes at all
11:57 - you can think of this as class tinder
11:59 - extends this all right to give you a
12:01 - direct example it's saying class ferrari
12:04 - extends car which basically means that
12:08 - this ferrari is going to be built off a
12:11 - object so in this case our contract is
12:13 - going to be built on top of the erc720
12:16 - standard okay and now let's start coding
12:18 - up our contract the first thing we're
12:19 - going to do is create a variable so to
12:21 - create a variable in solidity you're
12:23 - going to need to type in and declare the
12:25 - type which i'm going to say is you n256
12:28 - and i'll call it tinder token id if
12:31 - creating smart contracts is interesting
12:32 - to you be on the lookout for our future
12:34 - tutorials coming out real soon but for
12:36 - today i'm going to be teaching you guys
12:37 - a little bit about creating smart
12:39 - contracts so after you make that number
12:40 - variable we're going to do is set up
12:42 - this constructor okay that's our
12:43 - construction next thing we're going to
12:45 - do is set up our function all right so
12:47 - once the constructor is done let's go
12:48 - ahead and set up our actual function of
12:51 - our smart contract and to create a
12:53 - function in solidity it's going to be
12:54 - similar to what you've seen with
12:55 - javascript you can just say function
12:57 - mint nft the name of the function and
13:00 - the only difference that you're going to
13:01 - notice is the way we type in our
13:04 - parameters to create a function utility
13:06 - it's going to be similar to javascript
13:08 - in the sense that you say function and
13:09 - then the function name the difference is
13:11 - this is that you have to declare the
13:14 - type of the parameter so this address
13:16 - here is the type of this parameter of
13:18 - user one is there's a user two and then
13:20 - we have the token uri that we're also
13:22 - gonna pass in another thing that you're
13:24 - gonna see is that we label public on our
13:26 - functions so awesome once that's done
13:29 - our function is set up let's go ahead
13:30 - and type in the instructions of our
13:32 - function which is just going to be this
13:34 - piece of code right here all right so
13:35 - just to break down what's going on this
13:37 - underscore mint is a method that's
13:39 - actually just going to mint an nft right
13:41 - so just to talk about what this whole
13:43 - thing is supposed to do is we're going
13:45 - to be making the tinder clone let's say
13:47 - we have bob and she matches with someone
13:50 - named just if bob and jessica both like
13:52 - each other what we're going to do is
13:53 - actually create an nft representing that
13:56 - they matched and this nft representing
13:58 - the match will go to both of their
14:00 - wallet addresses which is super cool so
14:02 - this function is going to mint those nft
14:05 - for those two users so this first
14:08 - section over here is underscore mint
14:10 - which actually is the minting of the
14:12 - nfts to this user that we passed in so
14:15 - notice how it says user one and we're
14:17 - going to give that nft an id all right
14:20 - and this is just the variable that we
14:21 - set up earlier which let's say it starts
14:23 - at zero i'm minting nft for bob and with
14:27 - the token id of zero cool the next
14:29 - direct line is the set the token uri you
14:33 - can look at the token uri as a json that
14:35 - has the information of the nft so this
14:38 - is where the this token ui is where the
14:40 - information will go of the image and
14:42 - let's say the description which will
14:44 - you'll see on openc so what this method
14:46 - does set token uri is going to grab an
14:48 - nft with this token id which we know was
14:51 - zero that we set up and it's gonna pass
14:53 - in the information like the description
14:55 - and the image of it afterwards we're
14:57 - gonna increment the token id because the
14:59 - next time i meant i don't want to give
15:00 - this the same idea of zero we already
15:02 - have one so this will ensure that it's
15:04 - gonna be the next id awesome over here
15:06 - it's gonna be the same exact thing so if
15:08 - you understood what i just said let's go
15:10 - over it it's the mint function which is
15:12 - going to mint an nft to this user
15:13 - passing in the token id which now is
15:15 - going to be one by the way and then
15:16 - we're going to set the token uri which
15:18 - is going to find an nft with that id of
15:21 - one and pass in token's information like
15:24 - the image and description and of course
15:26 - increment it awesome i'm super excited
15:28 - because this is creating a smart
15:29 - contract that we're actually going to
15:30 - deploy to the network on the blockchain
15:33 - so again if you're excited about this be
15:35 - on the show on the lookout for more
15:36 - tutorials by clever programmer coming
15:38 - out soon cool so once you have this code
15:40 - you successfully created our smart
15:41 - contract for this project the next thing
15:43 - you're going to need to do is hop over
15:45 - to scripts and we're going to create a
15:47 - deploy script to actually deploy this
15:49 - contract to the blockchain awesome so
15:52 - let's delete this sample script which
15:53 - we're not going to really need and in
15:55 - that scripts folder let's create a new
15:56 - file and i'm going to call it deploy.js
15:59 - makes sense okay now in the deploy.js we
16:02 - want to make sure we're getting ethers
16:03 - from hardhat which we set up and what i
16:05 - want to do is set up a function so what
16:07 - i'm going to do is i'm going to call
16:08 - this function main and this main
16:09 - function is going to be asynchronous and
16:11 - we're going to set up a couple things
16:12 - here okay cool so we're going to set up
16:14 - two variables here the first one is
16:16 - going to be called tinder factory all
16:17 - this is going to do is get the smart
16:19 - contract we created with this name and
16:21 - it should be the same name of the name
16:23 - of your contract so double check that
16:24 - once we get that contract the next thing
16:26 - we want to do is to take that contract
16:29 - and deploy it okay and when we deploy
16:32 - that we're going to store it in this
16:34 - variable right here all right the next
16:36 - thing i want to do is let's console log
16:38 - the tinder contact address that we get
16:40 - back and if you save that address that
16:42 - it showed that is going to be the
16:43 - address of where the contract lives on
16:46 - the blockchain which you might want to
16:48 - save for the future so after that's done
16:51 - let's actually run our main function and
16:53 - we can do that by typing this if our
16:56 - request to deploy is successful then
16:58 - we're going to exit if not we'll catch
17:00 - the error and display the console log
17:02 - with the error and then exit with one
17:04 - awesome and that's the deploy.js okay so
17:07 - once you set up your script the next
17:09 - thing you want to do is set up alchemy
17:11 - so if you're unfamiliar with alchemy is
17:13 - it essentially gives us developers the
17:15 - tools to communicate with the blockchain
17:17 - itself you can think of it as the api
17:20 - that's going to help us make requests to
17:22 - do stuff on the blockchain okay so open
17:24 - up your browser and let's go ahead and
17:26 - set up alchemy so head over to
17:28 - alchemy.com we can go ahead and log in
17:30 - and what we can do is click this create
17:32 - app give it the same name and you want
17:34 - to make sure you're doing ethereum and
17:36 - what we're going to be working on is not
17:38 - the main net is we're going to be using
17:39 - rinkaby which is just the test network
17:42 - for ethereum the reason why we're using
17:43 - rinkeby is because if we deploy to the
17:44 - main net we're going to have to use real
17:47 - ethereum to pay for the gas fees of
17:50 - deploying our contract so again we don't
17:52 - have as much to do that we're going to
17:54 - be using the test net rinkaby because
17:56 - i'll show you guys how to get fake
17:57 - ethereum that you can use and play with
17:59 - so make sure the chain is ethereum the
18:01 - network is ranking and go ahead and
18:03 - click create once that's done you can
18:05 - click on your tinder clone blockchain
18:07 - project click view key and what we're
18:09 - going to need to save is this http key
18:12 - go ahead and click copy and in your
18:15 - smart contract folder at the root of the
18:17 - smart control folder we're going to make
18:18 - a dot env okay and in that emv file
18:22 - we're going to just type this in and say
18:24 - alchemy api url equals and it's going to
18:27 - be the key that you type and another
18:28 - thing that we're going to show you guys
18:30 - another thing that we need to keep in
18:31 - our environment variables is going to be
18:34 - this rinkaby private key right which is
18:36 - going to be the private key of your
18:38 - wallet that you're going to use to drain
18:41 - and pay for the deployment of the smart
18:43 - contract it'll make more sense in a bit
18:44 - but let's worry about the alchemy api
18:46 - url which i said is going to be this api
18:49 - key so go ahead and copy that over okay
18:52 - go ahead and click save and let's talk
18:54 - about how to get the private key of your
18:56 - wallet address okay so i'm just gonna
18:58 - make this bigger and what we're gonna do
19:00 - is if you guys aren't familiar we're
19:02 - gonna be using metamask as our wallet so
19:04 - what you need to do is make sure you
19:06 - have the metamask chrome extension so
19:08 - i'm gonna set it up here which i don't
19:10 - have it set up on this browser so i'll
19:11 - set it up with you guys oops so you're
19:13 - going to type in metamask extension for
19:15 - chrome and if you click this you can see
19:17 - add to chrome right here okay awesome
19:20 - there's our meta mask it has been added
19:22 - to chrome now we can go ahead and get
19:23 - started and we can just create a wallet
19:26 - awesome let's put in a password and this
19:29 - is just a burner wallet for me so i'm
19:30 - just gonna put in whatever okay this is
19:33 - how to secure your wallet whenever you
19:34 - make a wallet there's gonna be a secret
19:36 - recovery phase that is like 12 words
19:38 - don't share that to anybody because that
19:40 - is the master key to your wallet and
19:42 - funds so these are my secret words for
19:44 - this wallet i go can go ahead and copy
19:46 - this and save this it's okay if you guys
19:48 - know this as i am never going to use
19:49 - this wallet awesome so i'm going to next
19:52 - and again we just have to put in those
19:54 - words so mine was this and again i'm
19:56 - just going to skip up the setup this is
19:57 - how you set up a meta mask okay once
19:59 - that's done you set you successfully set
20:01 - up your metamask awesome and now you can
20:04 - access out and if you just look at your
20:05 - extensions go ahead and pin this so it's
20:07 - just easily available and if you click
20:09 - your meta mask this is it this is my
20:11 - account as you can see i have zero
20:12 - ethereum and that's because that's how
20:15 - much ethereum i have on the main net and
20:17 - we need to be on the rinkeby testnet so
20:19 - what you guys need to do to get on the
20:20 - rinkyb testnet is to go ahead and go to
20:24 - settings go to advanced click on show
20:27 - test networks all right turns this on
20:29 - and then when you click on this drop
20:31 - down menu you should be able to click
20:33 - rinkeby and there we go awesome so now
20:36 - you might be wondering all right lance
20:37 - if you have to use test ethereum to
20:40 - deploy your contract to pay for the gas
20:42 - fees how do i get ethereum from my
20:45 - wallet i got you okay what you need to
20:46 - do is copy this and type it in the
20:48 - browser this is called a faucet and what
20:50 - this will do is send you 0.1 test
20:53 - ethereum that we can use okay so it says
20:56 - please connect your wallet we can do
20:58 - that now that we set it up click connect
20:59 - this is my wallet address account one
21:01 - next connect and there you go it's going
21:03 - to automatically populate your wallet
21:04 - address here make sure the network says
21:06 - ethereum wrinkby make sure you click
21:08 - point one test ethereum we don't need
21:10 - the 10 less 10 test link click on that
21:13 - robot you have to do the not annoying
21:15 - captcha at all let's click send request
21:17 - then it's gonna stay waiting for
21:18 - confirmation and once that's done we
21:20 - should see that we have the tested
21:22 - theory okay request complete now we can
21:24 - see if we have ethereum if i click my
21:26 - wallet look at that point one ethereum
21:28 - point eth so 0.1 each should be enough
21:31 - to deploy our contract but just to be on
21:34 - the safe side i'm going to repeat this
21:36 - process six to seven times i'll have
21:39 - that 0.6 ethereum which is nice so now
21:42 - to do the part that we originally wanted
21:43 - to do which is to get our private key of
21:45 - this wallet so that we can use it we can
21:48 - click account details and click export
21:50 - private key type in the mass password of
21:52 - this account and there you go this is
21:54 - our private key make sure you don't
21:56 - share this with anybody hit copy done
21:58 - and bring it over to your env file paste
22:01 - it so in your emp file awesome okay next
22:04 - thing you want to do is in your terminal
22:06 - let's actually run hard hat and deploy
22:09 - our smart contract by typing this
22:11 - command awesome so what i wrote is npx
22:13 - hard hat run scripts slash deploy.js
22:17 - network ring could be all that's saying
22:19 - is basically use hard hat to run our
22:21 - deploy.js and deploy it to the rinkeby
22:24 - test network like i mentioned before
22:27 - okay and before you actually run that
22:28 - command we also need to set up our hard
22:30 - hat config so to do that we can clean
22:32 - this up a bit by erasing all of this
22:35 - code lines three to eight and then from
22:36 - here we need to require this all right
22:39 - so this you can keep next we need to
22:41 - require this on if you don't have this
22:43 - don tev installed go ahead and install
22:45 - it to terminal and then after that let's
22:47 - actually import our keys our environment
22:50 - variables like this so all we did so far
22:52 - was use this to get access to our env
22:55 - files then we're actually getting our
22:57 - env variables over here and storing it
23:00 - like this so and the next thing you want
23:01 - to do is have this export okay so in
23:05 - this export make sure it's solidity 0.84
23:09 - just to double check it's the latest
23:10 - version of the time of this recording
23:12 - and in the networks key here set it to
23:15 - rink b and the url will be the alchemy
23:17 - one and the account will be the private
23:20 - key that we set up so essentially this
23:22 - private key whoever you set it up as is
23:24 - going to be paying for any of the gas
23:26 - fees for our app and as well as
23:28 - deploying our contract so go ahead and
23:30 - hit save now that it's set up then we
23:32 - can run this npx hard hat command let's
23:34 - hit run okay let's double check this
23:36 - error in error invalid url okay and just
23:39 - double check that it's the right url
23:41 - it's the http one from alchemy i hit
23:43 - save back to hardhat and let's try to
23:45 - run that again okay there we go nice and
23:47 - we got our tinder contract address so go
23:49 - ahead and save this so you remember
23:51 - where our contract is located on the
23:53 - blockchain and what that is how we set
23:56 - up the smart contract folder now let's
23:58 - get to coding up the front end all right
24:00 - everybody so once the smart contract
24:02 - side of things is set up we can go ahead
24:03 - and start working on our next js app so
24:05 - in this section make sure your terminal
24:07 - is running so that you can see your next
24:08 - js app and let's hop over to this pages
24:12 - folder and click on
24:13 - index.js and what could do is actually
24:16 - highlight everything from lines 7 to
24:20 - lines 67 all right so all it's left with
24:22 - it should just be this return and for
24:24 - now we can actually just clean out the
24:26 - top of okay cool so what we do want to
24:28 - put here is our divs that we're going to
24:30 - set up all right so you notice there's
24:31 - error because there's nothing here but
24:33 - what we're going to do is just this okay
24:34 - so i'm going to make a div and i'm going
24:35 - to give it the class name of style dot
24:38 - oops style dot wrapper all right if you
24:41 - guys know tailbone and all this is how
24:42 - we use tailwind css we're going to have
24:44 - predefined class names that have styling
24:47 - attached to the class name if you use
24:49 - bootstrap at all it's going to be very
24:50 - similar so at the moment we don't have
24:52 - style wrapper setup but i'm just setting
24:54 - it up now and then we're going to create
24:55 - the styling for it later okay so this is
24:57 - my wrapper it's going to have the whole
24:59 - component in here and within that
25:01 - wrapper we'll have the header component
25:03 - okay this is going to be header and like
25:05 - i said before we don't have a header
25:07 - component just yet so we can go ahead
25:08 - and comment this out okay the next thing
25:10 - you need to do is right under this
25:11 - header component there's actually
25:12 - another div that we need this one is
25:14 - going to have a class name style dot
25:17 - cards contain this container div is
25:20 - going to have our card component as well
25:22 - that we're going to make okay and like i
25:24 - said before these components don't exist
25:26 - i'm just setting that up so we can
25:27 - comment that out there we go that's
25:29 - going to be our index so the next main
25:30 - thing we're going to need to do is make
25:32 - our style object like i said before this
25:35 - class name will take the styling of the
25:37 - style object that i set up which is
25:39 - going to be this there's going to be a
25:41 - tailwind cheat sheet that you can look
25:42 - up and it's going to be obvious what it
25:44 - does here so this is the css for it the
25:46 - wrapper and cards container and when i
25:48 - say style.wrapper this div will take
25:50 - that css and that's what makes tailwind
25:53 - awesome because you can scale and code
25:55 - up css a lot easier and we should see
25:58 - nothing here awesome so now let's
26:00 - actually make our components the first
26:01 - one i'm going to make is our header
26:02 - component so let's go ahead and make
26:04 - that folder and make sure it is in the
26:07 - root let's say components in that
26:09 - components folder let's go ahead and
26:11 - make a header.js okay and in the
26:14 - header.js i'm going to go ahead and save
26:16 - this command there we go we have our
26:18 - header component okay and from here i'm
26:20 - going to set up the dibs that go along
26:22 - with it feel free to pause the video if
26:24 - you need to get the divs okay so i just
26:27 - finished typing up the menu items so
26:29 - just to take a quick break and talk
26:30 - about what we did i made a div class
26:31 - name which is going to be the wrapper of
26:33 - this whole header component then we have
26:35 - a div with main which is going to have
26:37 - the image of the logo the fire the nice
26:40 - fire logo of tinder and we have the
26:43 - tinder text which is going to say just
26:45 - the name of the company which of course
26:47 - is tinder and then on the left menu we
26:49 - have what you'll see at the top products
26:52 - learn safety support download if you
26:53 - guys hop over to tinder.com this is what
26:56 - you would see in the menu so that's the
26:57 - left menu on the right we'll have
26:59 - english and the login button so i'm
27:01 - gonna head and work on that next it's
27:03 - gonna be last name and like i said this
27:05 - will be the right menu and in the right
27:07 - menu there's just this one text that
27:09 - just says english and basically what
27:11 - you'll see on the right menu is the
27:13 - login button but if the user is logged
27:15 - in we should see that the user's account
27:17 - information on the right instead of the
27:19 - login button so to do that we're going
27:20 - to set up something called conditional
27:22 - rendering so i'm just going to add that
27:23 - in right now and like i said feel free
27:25 - to pause the video if you need to stop
27:27 - and take a look okay and just to clean
27:28 - this up a bit let's take a look at what
27:30 - i wrote like i said we have the english
27:33 - here which is just and it's usually in
27:34 - all caps and to the right of the english
27:37 - on the right menu we'll see the login
27:39 - button but if we are logged in we should
27:42 - see all the stuff right here and we
27:44 - should see the current accounts
27:45 - information at the moment we don't have
27:47 - all that set up yet so we can comment
27:49 - this out and we're gonna bring it back
27:51 - when i do set up morales later on but
27:53 - for now we just need the login button
27:56 - and just a note for later the user
27:58 - logged in the button is swapped for
28:01 - current account okay awesome so we'll
28:03 - save that and then i'm just going to
28:05 - move my browser and now let's actually
28:07 - import this component to our index.js so
28:10 - to do that we can actually bring this
28:12 - back out and at the top here we can say
28:15 - this import header from components
28:18 - header okay and we get the styles not
28:19 - defined here because if you remember in
28:21 - our header js we set up a bunch of
28:22 - styles but we never made that so let's
28:24 - go ahead and type up those styles so all
28:27 - you need to do that is come to the top
28:28 - of the component and say cons style here
28:32 - you can use tailwind to set up the
28:34 - styling for each of these class names
28:36 - like the wrapper the main the text right
28:38 - so i'm just going to set it up one by
28:40 - one plus we have the wrapper this is the
28:42 - css we're going to add some flex
28:43 - properties to this and for the main
28:44 - we're going to have an item center and
28:46 - take gap 4. tinder text just going to be
28:49 - semi-bold and make sure it has the
28:50 - cursor pointer over it for the left menu
28:53 - we're just going to have a gap of 8
28:54 - pixels and the text is large and then
28:56 - for the menu items we're going to have a
28:58 - cursor pointer and when we hover it the
29:00 - text should be red and here is the
29:02 - duration of that hover awesome okay next
29:05 - up is the right menu which is going to
29:07 - be similar to left on you except it's
29:08 - going to have a 3 gap and an item center
29:10 - and the last thing we'll need for now is
29:12 - the auth button which is the logon
29:15 - button itself okay and this one is going
29:17 - to be background white and the text is
29:19 - going to be red and when you hover over
29:20 - it it's going to change so if i save
29:23 - taking a look at the browser it's going
29:24 - to have a good idea there we go there is
29:26 - our tinder awesome so there it is next
29:28 - thing we're going to do is we need to
29:29 - add the logo onto here so what we need
29:32 - to do that is set up the image and i
29:35 - have the image commented out in order to
29:37 - use image in next.js we have to do a
29:39 - couple imports so we have to import
29:42 - image from next image to actually use to
29:44 - actually see what we're working with the
29:46 - next thing you want to do is to import
29:48 - the fire from the from our assets now
29:51 - you guys might not have assets but if
29:53 - you can clone it to our repository we'll
29:55 - have we'll provide you with the assets
29:56 - folder with all the pictures you need
29:58 - okay cool so this fire is the logo of
30:00 - the tinder app so let's comment out the
30:02 - image and now we can actually insert
30:04 - that the necessary stuff for that okay
30:06 - and all you need to do is add this to
30:08 - the image which is going to give the
30:10 - source of the fire of the logo add the
30:12 - alt property and actually give it a
30:14 - height and width i'll hit save there it
30:15 - is there is our tinder
30:18 - fire logo looks very nice and if you
30:20 - remember we are going to come back to
30:21 - this when we set up our context and
30:23 - there you go this is our nice tinder app
30:25 - and just to show you that the login
30:27 - button is going to change when i log in
30:30 - so if i click login it's not going to
30:31 - work because it's not defined but if i
30:33 - clicked it and i logged in a user here
30:36 - so let me show you what that might look
30:38 - like now we can actually set that up now
30:39 - now that you understand what this is
30:41 - supposed to be so i'll just actually
30:43 - erase this login and then we can bring
30:45 - this back in okay so like i said before
30:47 - this whole thing just means if there is
30:50 - a current account load up the styling
30:52 - with morales and have all of this passed
30:55 - in but if there is not just have the
30:58 - login button so at the moment we
30:59 - actually don't have an image from
31:01 - morales so we can comment that out and
31:03 - we need to add the styling which is just
31:05 - going to be these two things right here
31:07 - okay and we're going to current account
31:09 - is not defined and that's because we
31:10 - don't have current account set up so for
31:12 - now we can just make a variable called
31:14 - kant's current account and set this
31:16 - equal to our wallet address just for now
31:19 - all right so now it's going to be static
31:20 - later on we'll make it more so now
31:22 - taking a look look at that all right we
31:24 - can see that over there set up if you
31:26 - look this is what it looked like if i
31:27 - log in we have our wallet address
31:29 - abbreviated and also our login button is
31:32 - now swapped out for a log output okay so
31:35 - now if i were to remove a current user
31:37 - let's say we don't have a current user
31:39 - or in other words this doesn't exist
31:41 - it's empty then we have conditional
31:44 - rendering to take out that little thing
31:46 - and set back login back in there okay
31:49 - amazing and with that said that's the
31:50 - header component all right after you
31:52 - guys finish the header component let's
31:54 - work on the next thing so going back to
31:56 - index that we have this card component
31:59 - that we need to make this card component
32:01 - is going to be what we see on the tinder
32:03 - app right here it's going to be this
32:04 - nice square it's going to hold the
32:06 - person that we can swipe right or swipe
32:08 - left on okay let's go ahead and make
32:10 - that component i'm going to go into my
32:12 - components folder and let's just make it
32:13 - right here so i'm gonna say card dot js
32:16 - cool then we're gonna do the ra fce to
32:19 - make the component clean this up a
32:20 - little bit and we should be good to go
32:22 - awesome there you go so there's the card
32:24 - next thing we're gonna have to do is
32:25 - actually install react icons so what
32:29 - we're going to do is temporarily stop
32:31 - our terminal and just do yarn add react
32:34 - dash icon once that's done we can do
32:37 - your dev again load up our page it's
32:39 - already running refresh this and here we
32:41 - go it's back up online so now that we
32:43 - have react icons let's actually import
32:45 - one of the icons over here cool import
32:48 - this tinder from react icons si and now
32:50 - let's work on our divs so the first one
32:53 - i'm going to make is this one right here
32:55 - this one's going to be our wrapper that
32:57 - we usually do
32:58 - wrapper and inside that style rod
33:00 - wrapper we're going to have a component
33:02 - that we're going to set up later and
33:03 - this is going to be that card header
33:05 - okay i'm just going to make the card
33:07 - header component and of course that we
33:08 - don't have this yet so we'll save it
33:10 - after that we have another div in here
33:11 - this one is the card me after the card
33:14 - main we're gonna have another div here
33:15 - it's gonna be style got no more wrapper
33:18 - awesome and then here we can add that
33:21 - react icon okay then we also need this
33:23 - div right here for no more text just
33:25 - show that there's no more profiles in
33:26 - our location if there is not and we can
33:28 - just format it like this if there is
33:30 - more then we can do this class two curly
33:32 - brackets and do styles dot swipes oops
33:35 - styles dot swipes containing the
33:37 - container that's going to hold all our
33:39 - swipeable things and once you make that
33:41 - div we can add this piece of code here
33:43 - it's our
33:44 - cards.data.map we don't have this
33:46 - functionality yet but just know that in
33:48 - this container we want to map through
33:51 - our cards data and for every single card
33:53 - we want to make the tinder card item so
33:56 - we don't have that set up yet so i'm
33:57 - just going to keep it commented up and
33:58 - the last thing we're going to need is
34:00 - this card footer component okay and
34:02 - again we're going to be setting that up
34:04 - later nice so there is our component
34:06 - let's start working on the styling with
34:08 - tailwind and say style equals our object
34:10 - okay and then for the wrapper we're
34:12 - going to add this css we're going to put
34:14 - a flexbox property of column rounded
34:15 - edges overflow hidden and then for card
34:18 - main this piece of code one for card
34:20 - main we'll add this flux one relative
34:22 - justify content to center it and the
34:25 - normal wrapper is gonna have this okay
34:27 - and then the rest of the css will be
34:29 - like so all right to take a moment to
34:31 - take a look but it's in the logo you're
34:33 - just going to make the text red and add
34:35 - that and for the normal text that should
34:36 - be white and for the swipes container
34:38 - we're going to do an overflow hidden and
34:40 - get the full width and height awesome
34:41 - and hit save and now let's start working
34:43 - on the components within here so let's
34:45 - work on the card header so what i'm
34:46 - going to do is go into my components
34:48 - make a new file this one is card okay
34:51 - set up your card header and let's do
34:53 - some code so the things that we're going
34:54 - to import into the card header which is
34:56 - at the top of our card is these images
34:59 - right here we want to be able to get the
35:01 - profile pic from the assets folder and
35:04 - the logo from our asset folder the next
35:06 - thing we're going to need is the
35:07 - notifications icon from react we need to
35:10 - get import image from next so that we
35:12 - can use images and that'll be it for now
35:14 - okay now i'm gonna set up our card
35:15 - header component and all we need to do
35:17 - is clean it up so give this a class name
35:20 - and you guessed it this is gonna be our
35:22 - style dot okay and here i'm gonna
35:24 - actually use the image already and we're
35:26 - gonna pass this image some props so for
35:28 - the source i'm gonna put profile pic for
35:30 - now and then for the rest of it we're
35:32 - just gonna give it the css property so
35:34 - with the 40 a height of 40 an alt or
35:36 - profile picked and this is the class
35:38 - name for the image awesome the next
35:40 - image i'm going to add is actually just
35:41 - the logo and of course the source of
35:43 - this is gonna be the logo itself okay
35:45 - with a height of 150 and a width of 200
35:47 - and give this the class name of that and
35:50 - the last thing here is going to be the
35:52 - bottom we're going to add another div
35:54 - and this is going to be the flex items
35:55 - okay i'm just going to clean this up a
35:57 - bit and there you go so we're making a
35:58 - div called flex flex items we're gonna
36:00 - make a div which is just gonna literally
36:02 - not take a style object we're just gonna
36:03 - directly style it like this and flex it
36:05 - center and it's gonna tint the
36:07 - notifications and this right here okay
36:09 - so i hit save now that we've finished
36:11 - the card header we can go implement it
36:13 - back in so going back to our index.js
36:16 - let's bring in the card by importing it
36:19 - import card from components and before
36:22 - we save that we actually need to go a
36:23 - card and import the card header now
36:25 - import card header okay save that and
36:28 - i'll save this and then we get an error
36:29 - make sure it says style not styles okay
36:32 - and then of course in our card header
36:33 - don't forget to put the style object of
36:35 - the card header which again i'm just
36:37 - going to put it right here i don't want
36:39 - to spend too much time on css because we
36:41 - got a tinder app to build and there you
36:43 - go so all it is is just adding the
36:44 - wrapper css making sure that the profile
36:46 - image covers it and it's rounded we have
36:48 - the logo and just add the rest of these
36:50 - so take a quick look at it i pressed alt
36:52 - c you can see this is the styling that
36:54 - we're going to add now if i say a there
36:56 - is supposed to represent you tinder
36:59 - notifications and no more profiles in
37:01 - your locations because we don't have any
37:03 - users set up just yet so there you go we
37:04 - have our tinder card we have the header
37:06 - let's work on the footer next so if you
37:08 - remember the footer is located in the
37:10 - card itself which is going to go in the
37:12 - bottom right here and that's going to
37:13 - have your options to swipe right or left
37:15 - so let's work on that so in your
37:17 - components folder make card footer js
37:20 - okay and here are a fce set up clean up
37:23 - your component and we can go start
37:25 - making those divs okay so now that we
37:26 - finished the card footer the only thing
37:28 - we need to make now is the tinder card
37:32 - item component the tinder card item
37:34 - component is going to be component that
37:36 - shows that card's data so like it's a
37:38 - picture of me my age and it's going to
37:40 - have all the reactions that you can have
37:42 - or go back so let's create that by
37:44 - making another component i'll call this
37:46 - one tinder card js awesome so set up
37:49 - your component okay cool so the first
37:51 - thing i'm gonna do in this tinder card
37:53 - item component is import all the react
37:56 - icons okay there we go it's gonna be
37:59 - these right here this is gonna be all
38:00 - the reactions from there let's start
38:02 - setting up our code so from here in the
38:05 - stiff we're actually going to give it
38:06 - the class name of style.wrapper again
38:09 - the interesting about tinder card item
38:11 - is that we're going to be importing
38:13 - tinder card from an npm package for this
38:17 - app we're going to be installing an npm
38:19 - package called react tinder card what
38:22 - that package does is lets us code and
38:24 - incorporate that swipe or swipe left
38:27 - functionality in react so what we're
38:29 - going to do is go into my terminal and
38:31 - type in yarn add react dash tinder card
38:35 - okay once that's done another thing i'm
38:37 - going to add to this import is the
38:38 - tinder card that i was talking okay so
38:40 - import tinder card from react under card
38:42 - and once you do that i want to tell my
38:44 - react app that everything here is part
38:47 - of that tinder card that i can swipe
38:49 - right or left it so i want to wrap that
38:51 - inside the tinder card so i'll say
38:54 - tinder card close it and like i said we
38:56 - want to put the wrapper so everything
38:58 - inside here is part of the center card
39:00 - makes sense let's move on so with the
39:02 - tinder card it actually comes with a few
39:04 - attributes that we need to set up first
39:06 - things first is let's set up the class
39:08 - name style dot tinder card wrapper okay
39:12 - another attribute that we're going to
39:14 - add is a unique attribute to this tinder
39:16 - card that we're getting and it's going
39:17 - to be called prevent swipe and inside
39:20 - has the value we're going to put quotes
39:22 - up quotes down this does is when i take
39:25 - my card and drag it up or swipe it down
39:28 - nothing will happen we're going to
39:29 - prevent that functionality from
39:30 - triggering anything because the only
39:32 - functionality you want is the swipe
39:34 - right and the swipe left so to do that
39:36 - we set this up next we're going to add
39:38 - another attribute it's called on swipe
39:40 - which is the function that we are going
39:42 - to run when we swipe okay and the
39:45 - function is called actually on switch
39:47 - okay and obviously we don't have the
39:49 - entry function just yet so for now let's
39:51 - just make that function here what this
39:53 - function is it's our onswep function
39:55 - that takes in a direction and if the
39:56 - direction is right we want to handle
39:59 - that right swipe this handle right swipe
40:01 - isn't a function on my component but
40:03 - it's a function that we're going to be
40:04 - making later and then pulling from our
40:06 - context so let's comment that out for
40:08 - now okay coming back to line 23 let's
40:10 - continue building this out so the next
40:13 - div inside the wrapper is going to be a
40:15 - div and we're going to call it
40:16 - style.space okay and install that space
40:19 - is actually going to be our div that
40:21 - holds our name here is going to be where
40:23 - we put our name and for now let's make
40:26 - it static by saying my name okay
40:28 - underneath my name i'll have a span
40:30 - which is just going to hold my age and
40:32 - i'll put 99 because i am almost 100
40:34 - years old okay next to the div called
40:37 - style.space we're going to make another
40:38 - div and in this day this is where the
40:40 - wallet address is going to go so
40:42 - style.wallet
40:44 - address and of course that is not quotes
40:46 - that's just going to be class name so
40:48 - then inside that wallet address div this
40:50 - is where that user's wallet address will
40:53 - go so if there's a user let's call her
40:55 - daniel smith and it's gonna show her
40:57 - picture her name and actually her wallet
41:00 - address so for now that's gonna i'm
41:01 - gonna hard code it by putting my wallet
41:03 - address in here and of course when we do
41:05 - pull it dynamically we're going to
41:07 - abbreviate it so something like that
41:09 - okay that's the wallet adjust the next
41:11 - thing i'm going to make is a div for the
41:13 - reactions container and as you can
41:15 - assume this container is going to hold
41:17 - all the reactions that we can have for a
41:20 - person whether that's liking them so i'm
41:21 - just going to set up the first one the
41:23 - first reaction is going to be this which
41:25 - if we click it it's going to trigger a
41:26 - go back function which again is not set
41:29 - up yet a go back function okay so each
41:31 - of these divs inside the reactions
41:34 - container is going to represent a
41:36 - different reaction and there should be
41:38 - four of these guys so i'm just gonna
41:39 - fill the rest of them out now and i'm
41:41 - just gonna clean up my code okay this is
41:43 - all the reactions take a moment to see
41:46 - one's the different code that i have
41:47 - here okay just gonna clean up my code a
41:49 - little bit add an extra dip and here it
41:51 - is okay last thing i have to do now is
41:53 - just set up our styling so i'm just
41:55 - gonna make that style object and i'll
41:57 - start slow and then slowly populate the
41:59 - style so the first thing i want to think
42:01 - about is the tinder card wrapper which
42:03 - is just going to have the full width and
42:05 - full height and give it the absolute
42:07 - property i'm just going to have the
42:08 - wrapper with also full width and height
42:10 - overflow hidden and make sure you don't
42:12 - repeat the background and of course
42:14 - center it and keep it the position
42:15 - relative if we make the other one
42:17 - absolute okay next is just the space
42:19 - it's going to have a flex plus flex
42:21 - property of justified between and then
42:23 - it's just small styling of all the
42:24 - little details like the name the age
42:27 - pallet address and then from there we're
42:29 - going to style the reactions container
42:31 - that's going to hold all of our options
42:33 - which is going to have a flex property
42:34 - justify between with full pixels 2 and a
42:37 - gap of 5 buttons container and then i'm
42:39 - going to add the rest of them which is
42:40 - the button symbol back colors the x
42:42 - colors the star colors and the lightning
42:44 - color okay so go ahead and save that
42:46 - we're not going to see anything yet on
42:48 - our app because we need to import it to
42:50 - our card so what we're going to do is
42:52 - actually import the tinder card item and
42:55 - if you look looking into line 27 we have
42:58 - our swipes container and we're going to
42:59 - be mapping through our cards data and
43:02 - our cards data is essentially our list
43:03 - of users we don't have that set up yet
43:06 - so what i'm going to do instead is let
43:07 - me show you guys what one cartender card
43:09 - item would look like the difference
43:11 - between now and before is that this data
43:13 - in this component is static and that
43:16 - there's also no background image so once
43:18 - we set up that tinder card item go ahead
43:20 - and click save and make sure your
43:22 - terminal is running down below so that
43:24 - when you hit save there it is like i
43:26 - said this is an example of what the card
43:27 - would look like but as you can see
43:29 - there's no picture in the background
43:31 - because we haven't set that up yet so
43:33 - let's do that right now so hopping back
43:35 - to tinder card item if you see where the
43:37 - wrapper is this is where that background
43:39 - image is supposed to go so if i want to
43:41 - put that background image there and
43:42 - underneath the class name let's add some
43:44 - inline styling to insert a background
43:47 - image so to do that i'm going to have to
43:49 - write something like this background
43:51 - image and later on we're going to
43:52 - replace this with something dynamic but
43:55 - for now we can just type in url quotes
43:58 - and then let's get a picture in there so
44:00 - just for fun let's go to unsplash.com
44:02 - get a stock image i'm gonna type in dog
44:05 - any dog lovers in chat comment down
44:06 - below if you have a bet so i'm gonna do
44:08 - is copy image address and paste that
44:10 - right here hit save okay and if all is
44:13 - there it is beautiful lance and he is 99
44:17 - years old it's a dog and hits his wallet
44:20 - address isn't this awesome and look at
44:22 - that we can actually drag it left drag
44:23 - it right and if you press left and
44:25 - there's nothing left it's going to show
44:27 - that there's no more profiles in your
44:28 - location and now if you refresh the
44:30 - picture comes back and our front end is
44:33 - pretty much done next thing we need to
44:35 - do is start setting up a lot of the
44:36 - backend so go ahead and swipe right on
44:38 - my beautiful dog here and let's get
44:40 - right on and let's move on so now the
44:42 - next thing we should start doing is
44:44 - setting up our contacts folder so what
44:46 - i'm going to do is go over to your
44:48 - project create a folder called context
44:51 - and in this contacts folder we're going
44:53 - to make a file called
44:56 - tindercontext.js okay enter awesome so
44:59 - what we're going to do in this file is
45:00 - we're going to set up using react's
45:02 - context api all this does is lets us
45:05 - pull data from anywhere in our component
45:08 - as opposed to the other way which is
45:10 - passing down data down through props
45:12 - we'll have access to anything we put
45:14 - into our contact anywhere in our project
45:17 - so to get started doing that i'm going
45:19 - to import a couple of things like these
45:21 - three things use state create context
45:23 - and use effect and try that explanation
45:26 - again so the next thing we need to do is
45:27 - after we import these three things is i
45:30 - want to install faker.js if you're not
45:32 - familiar faker.js is an npm package that
45:36 - we can use to generate a random name and
45:39 - we'll be using it to get generate a
45:40 - random name so to install it you're
45:42 - gonna have to do with this command so to
45:44 - install it you're going to have to type
45:45 - in this command yarn add faker js slash
45:49 - faker okay make sure you do that in your
45:51 - root folder and once that's done we can
45:53 - actually import faker from figure 2s
45:55 - okay cool we have that done and whenever
45:58 - you're setting up context the next thing
45:59 - you need to do is declare the variable
46:01 - that's going to hold that context and
46:03 - set it equal to create context
46:06 - parentheses okay the next thing we need
46:08 - to do is set up that provider so i'm
46:10 - going to say export contender provider
46:13 - and set it equal to the function cool a
46:16 - couple things we need to do is we also
46:17 - want to be exporting the tinder context
46:20 - as well because we're going to use it
46:21 - later and this tinder provider is going
46:23 - to take in children okay awesome and
46:26 - within this provider eventually we're
46:28 - going to have a return here that we're
46:30 - going to set up later okay we want to
46:31 - set up in this provider is a couple use
46:34 - states which i'll explain as i paste it
46:36 - in so i set up three use dates here each
46:39 - of these things are going to be keeping
46:40 - track of different variables one of them
46:42 - is the cards data which is essentially
46:45 - each user that we're able to swipe
46:48 - through labeled as a card so if you
46:50 - remember when i refresh this nice
46:52 - picture of my dog is a card all right so
46:55 - i set up three use dates here and with
46:57 - these three states i'm going to be
46:58 - keeping track different things so the
47:00 - first one i'm keeping track of is the
47:03 - cards data you can think of the cards
47:05 - data as the users that i can swipe
47:07 - through so if you think if you look back
47:09 - at the app with my nice dog lens this is
47:11 - considered so this would be one card in
47:13 - the data and at the moment now there's
47:15 - zero card state and left in the cards
47:16 - data so that's what we're gonna set up
47:18 - with state here next one is the current
47:20 - account and also current user awesome
47:22 - okay with that out of the way the next
47:24 - thing i want to do is in your return is
47:26 - let's set up the tinder contacts
47:28 - provider so what we need to do is type
47:30 - in tinder contacts dot provider and in
47:34 - between that provider it's gonna take
47:36 - children as well okay the next thing we
47:38 - need to do is inside add a couple
47:41 - attributes to this tinder provider and
47:44 - that attribute is going to be value okay
47:46 - keep this in mind everything inside this
47:49 - value is going to be what we pass in to
47:52 - make that variable okay so for now we'll
47:55 - leave it blank but i'll come back to
47:56 - that in a second we have to do next is
47:59 - actually wrap our entire app with the
48:02 - tinder provider that we set up so to do
48:05 - that we need to go into this underscore
48:07 - app.js and we need to okay and to get
48:10 - the provider remember we exported it so
48:12 - that means we are able to import that
48:15 - tender provider that's going to be from
48:17 - our contacts okay now that's imported we
48:20 - can actually place it down here and then
48:22 - in between that is where our app is
48:24 - going to go hit save that should be good
48:27 - for now okay with that our contacts is
48:29 - set up and we're going to be adding way
48:31 - more to this as we go all right guys
48:33 - once you set up your context the next
48:36 - thing that we're going to start adding
48:37 - to this context is actually morales if
48:40 - you guys haven't heard of morales it is
48:41 - a web development platform and if you
48:43 - ever heard of firebase morales is
48:45 - essentially the firebase of crypto all
48:47 - right morass gives you manage backend
48:49 - that you can use for your blockchain
48:50 - project and one of the key features that
48:52 - we're going to use the morales today is
48:54 - authenticating a user so the first thing
48:57 - we're going to have to do is go to
48:58 - terminal and install morel so i'm going
49:00 - to hop into my terminal here you can
49:02 - type in yarn pad react dash morales once
49:06 - that's done we can come to the top here
49:08 - and import use morales from remounts
49:11 - just like that okay and just like we
49:12 - would with react hooks we want to set up
49:14 - that instance of morales i'm going to
49:16 - copy this and paste it here we want to
49:19 - pull these three these structure these
49:21 - four things from morales so that we can
49:23 - use them in our app authenticate is
49:24 - authenticated user and morales equals
49:28 - use morales awesome okay we can do next
49:30 - is set up a bunch of different functions
49:32 - so the first one i'm going to make is
49:34 - const check wallet connection and this
49:36 - is going to be an asynchronous function
49:37 - and what this function is going to do is
49:39 - literally what it sounds like it's going
49:40 - to check if a wallet is connected the
49:43 - really awesome thing about morales is
49:44 - that it actually knows in the background
49:47 - if a wallet is connected to our
49:49 - blockchain app that we're creating so if
49:52 - is authenticated which we're pulling
49:54 - from morales is true that we are
49:56 - connected then we're going to get that
49:57 - user address and set our current account
50:00 - to the address and afterwards we're
50:02 - going to make a request to create that
50:04 - user profile down below now if you
50:06 - remember our current account is just
50:07 - going to hold our address and the
50:08 - difference with current user it's going
50:10 - to have all the user data in current use
50:12 - okay and of course we need an else
50:13 - statement here set current account to
50:15 - none because there shouldn't be an
50:17 - account if no one is authenticated
50:19 - awesome so here's the next function that
50:21 - we're gonna create it's gonna be called
50:22 - connect wallet so if the first one is
50:24 - checking if a wallet is connected this
50:26 - one is literally what it sounds like
50:27 - this one is literally just gonna connect
50:29 - the wallet itself so if we are not
50:31 - authenticated that's what this
50:32 - exclamation point means set up a try
50:34 - catch and we're gonna await authenticate
50:37 - with the signing message of login using
50:39 - morales and of course if anything goes
50:41 - wrong we're going to catch that and
50:42 - print that error okay the last thing we
50:44 - need to do is disconnect the wallet so
50:47 - the disconnect wallet is a smaller
50:49 - function it's just going to look like
50:50 - this where it's asynchronous like the
50:52 - others and it's gonna
50:53 - wait for the morales user to log out and
50:56 - also set the current account to blank on
50:59 - rn okay once that's done let's actually
51:01 - use this use effect hook that we pulled
51:03 - at the top here and i'm gonna say use
51:05 - effect takes two parameters gonna be the
51:07 - side effect that we want to perform plus
51:09 - the this dependency what we want to do
51:11 - in this use effect is actually just
51:13 - check if the wallet is connected anytime
51:15 - we load the component we should be
51:16 - checking if the wallet is connected the
51:18 - next thing i want to do is to check if
51:19 - it's authenticated and if it is
51:21 - authenticated i want to grab that user
51:24 - data during user.get and also get that
51:27 - same for the current user so if it's
51:29 - authenticated then we also want to make
51:31 - a request for that data notice how this
51:33 - one says request users data and this one
51:35 - requests current user data this function
51:37 - it doesn't exist yet but we're going to
51:39 - use this to grab all the users that we
51:42 - can swipe left and right in except for
51:45 - us otherwise we'd be swiping on
51:47 - ourselves because we're in the database
51:48 - as well so we're actually making a
51:50 - separate call in this function which is
51:52 - just going to grab me and not everybody
51:54 - else so this is to ensure that we can
51:56 - separate the user that is signed in
51:58 - versus the rest of the people that we
52:00 - have on our database cool and then in
52:02 - the dependency module we just want to
52:03 - check whenever is authenticated changes
52:06 - this use effect is going to run the next
52:08 - thing i want to do is add in those
52:10 - functions to our value here because
52:12 - remember i said earlier whatever we pass
52:15 - into value of this provider we can
52:17 - actually use these functions anywhere in
52:19 - our app when we need it right so we're
52:21 - also going to get current account and
52:23 - current user and that should be good for
52:25 - now one more thing that you have to do
52:27 - when working with morales is that you
52:28 - actually have to wrap your app around
52:30 - their provider so that we can
52:32 - essentially wrap morales around our app
52:34 - just like we did with tinder provider go
52:36 - into your underscore and what we want to
52:38 - do is and what we want to do is import
52:41 - the morales provider from dash morales
52:44 - and let's wrap our app with that same
52:47 - provider okay take our app and post
52:50 - paste it inside here and i'm just gonna
52:51 - clean it up a bit there we go and we
52:53 - should be good to go nice so now that
52:55 - morales is set up what i'm gonna do is
52:57 - hop over to the header component because
53:00 - now that we created our contacts we can
53:02 - actually apply some of the functions
53:04 - that we set up so what i want to do now
53:06 - is come to the top here and we're going
53:07 - to import a couple things the first
53:09 - thing that i want to import is use
53:11 - context from react this lets us use any
53:14 - of the context files that we created
53:16 - it's a react hook that lets us set it up
53:18 - okay the next thing we want to do is
53:20 - import the tinder context itself this is
53:23 - what we're going to pass in to use
53:24 - context to signify that hey i want all
53:27 - the variables inside here that we
53:29 - created inside this context okay and
53:31 - then coming down to the header at the
53:33 - top level of our function just paste in
53:35 - this all this means is i want to use
53:38 - these specific variables the connect
53:40 - wallet current account and the
53:42 - disconnect wallet as our contacts and
53:45 - set that equal to use context because
53:47 - these are the things that i want to pull
53:49 - from that page okay so now that's there
53:51 - we could actually use this remember how
53:53 - we have conditional rendering here where
53:55 - a current account is this we can
53:56 - actually start to remove that because we
53:58 - have that current account what i'm going
53:59 - to do next is i'm going to update this
54:02 - div here and it should just look like
54:04 - this all i'm doing is adding some more
54:06 - conditional rendering that if there is a
54:08 - current account we're gonna change the
54:11 - styling of the wrapper if there's not
54:12 - we're just gonna keep the background
54:14 - transparent fixed okay awesome you can
54:16 - also comment back out this image and now
54:18 - our on clicks that we set up earlier
54:20 - should work like the disconnect wallet
54:22 - and then the on click for the connect
54:24 - wallet should work as well so remember
54:26 - to reset your terminal because we
54:27 - installed morales so i'm just going to
54:29 - do just that okay i know why i'm getting
54:30 - this error it's because we installed
54:32 - react dash morales but we also need to
54:34 - install just morales itself so don't in
54:36 - your terminal also do yarn ad okay now
54:39 - let's try it okay i'm gonna do yarn dev
54:41 - oh i see okay oh that's right i forgot
54:44 - when we put in our provider we need to
54:46 - make a app we need to make a project on
54:49 - the morales website itself and we have
54:51 - to include that in here inside the
54:53 - provider so i forgot to do that so let's
54:55 - go ahead and set that up so go ahead and
54:57 - go to morales.hill and this is how we're
55:00 - going to set it up just to sign up for
55:02 - free create account let's create a new
55:04 - server and if you remember we're not the
55:06 - doing this on the main net we're going
55:08 - to use the testnet and we're going to
55:09 - use rinkaby and add an instance
55:12 - select your region let's do new york oh
55:14 - yeah many colors we should name this
55:15 - tinder loan blockchain and we're going
55:18 - to add the instance okay cool this is a
55:20 - really cool thing that ross does is that
55:22 - it shows you servers that you have and
55:25 - if you look morales has so many other
55:27 - things that you could do such as
55:29 - different plugins that you can add by
55:30 - going to the plugin store you can also
55:32 - implement cloud functions here which is
55:34 - awesome there's a lot of things that
55:35 - morales does underneath the hood that
55:37 - makes this experience of you developing
55:39 - on the blockchain okay awesome so that's
55:42 - the dashboard we don't really need to do
55:44 - any of that we can just go to view
55:45 - details and what we need is the server
55:48 - url and the application id okay yeah so
55:52 - we just need the server ul url and the
55:54 - app id okay so you can literally write
55:56 - that here server url paste in that once
55:59 - that's done the next one is the app id
56:02 - which is just going to be this paste
56:03 - that in save second app okay so no major
56:08 - errors if i click log in let's see what
56:10 - happens nice look at that when i click
56:12 - log in on my metamask popped up you just
56:14 - put in your password okay hit next
56:16 - connect and this is the await
56:18 - authenticated message that we set up
56:19 - that we can see here click sign letting
56:22 - not letting morales know that they can
56:24 - have the app permission with this wallet
56:26 - and we have this request user data is
56:29 - not defined and that's fine because we
56:31 - have it set that up at least we know the
56:33 - login is working so we can continue
56:34 - working on that let's go okay so i'm
56:37 - just going to quickly disconnect yeah so
56:39 - this error is normal that's because we
56:41 - don't have the request users data is set
56:43 - up just yet but after you put in the
56:45 - information to the provider analysis
56:47 - setup okay like i said if you see this
56:50 - error that's totally fine that's because
56:52 - we don't have this request users data
56:54 - function or this request current user
56:56 - data if you remember this use effect is
56:57 - constantly checking if the wallet is
56:59 - connected so it can't complete a test so
57:01 - for now if you don't want to see this
57:02 - error let's actually just comment that
57:04 - use effect out and our beautiful pages
57:06 - back so the next step that we're going
57:08 - to do now is set up sanity sanity is our
57:11 - database which is going to store all the
57:13 - different users including you so that we
57:15 - can pull that data and actually get
57:17 - these requests working okay so to set up
57:19 - sanity that's going to be in our studio
57:21 - folder okay go to your studio folder hop
57:24 - into the schemas portion and tap click
57:26 - on the schemas.js here you're going to
57:29 - see the template for creating a schema
57:31 - which i'm going to clean up right now
57:32 - okay once that's done any schema that we
57:34 - create we should import here so that it
57:36 - can get concat to our schema types so
57:38 - here at this point i'd start thinking of
57:40 - what do i want to store in my database
57:41 - and like i said i want to store users so
57:43 - in my schemas folder let's create a file
57:46 - and i'll call this user schema.js like
57:49 - so and to set up this file we need to
57:51 - write export const user schema the same
57:54 - name equals the object of what we want
57:57 - user object to look like so it's gonna
58:00 - take in some keys and values that i'm
58:01 - gonna write now and i'll explain it in a
58:03 - second cool so the first three things
58:05 - here is just the name of our schema the
58:07 - type that is notice how it's a document
58:09 - and the title of it which is going to be
58:11 - capital users the fields is what are the
58:14 - actual fields or properties of a user
58:18 - right so if you think about it the first
58:20 - field that i care about and a user is
58:22 - going to be the name all right and when
58:24 - you do that you have to identify the
58:26 - type which is the string and the title
58:28 - which is just the capital version okay
58:29 - another thing that's important is going
58:31 - to be a user's wallet address okay as a
58:34 - bonus we're going to keep track of the
58:36 - profile image that they can have that
58:38 - the users can have which is nice and the
58:40 - last thing is going to be the likes okay
58:43 - the likes are important because every
58:44 - single time i like a user so if you look
58:46 - to the right if you like my pug here
58:48 - that user is going to be registered in
58:50 - this array of the users that i like so
58:53 - that's why in here you're going to see
58:54 - this reference to the user right so it's
58:56 - going to be filled with users that you
58:59 - liked inside here and it's going to have
59:01 - a reference to that unit okay so all of
59:03 - these fields are what's important to the
59:05 - user and make sure you're exporting them
59:07 - because back in the schema.js we're
59:09 - going to be importing all right so what
59:11 - we're going to do is simply just import
59:13 - that user schema from the path here and
59:16 - in this dot concat since it's the only
59:19 - thing we can just put user schema here
59:22 - like so awesome and there you go our
59:23 - standard data database is structured and
59:25 - set up and good to go all right so once
59:27 - you made that schema.js file and setting
59:30 - up the user schema the next thing we
59:31 - want to do is let's make a lib folder so
59:34 - going to the top level of my app again
59:36 - let's make a folder not in studio up
59:38 - here let's call it lib now in that lib
59:41 - folder we're going to make a file and
59:42 - we're going to call it sanity.js
59:44 - we just want to import sanity client
59:46 - from at sanity client and we're going to
59:49 - also export const the actual sandy
59:52 - client itself and if you see something
59:54 - like this process that envy project id
59:56 - we actually need to set that up as well
59:58 - so let's go ahead and do that so i'm
60:00 - just going to make a new file not in the
60:02 - lip folder at the root of our project
60:04 - and we'll see e and b dot local sorry
60:06 - going to be dot e and b dot local and we
60:08 - can hop back over to sanity get that
60:11 - project id and say something like this
60:13 - sanity underscore project equals that
60:16 - project id equals this so once you get
60:18 - your project id the next thing you want
60:19 - to do is hop over to api click add token
60:23 - you can just say whatever you want for
60:25 - the name and click editor hit save this
60:28 - line of text is what we want and we can
60:29 - say sanity underscore token question
60:33 - equals and that whole string awesome so
60:35 - save and now we have that env file so
60:38 - that when we go to lib this is actually
60:41 - going to use the process.emp file okay
60:44 - so once that's done the next thing we
60:46 - need to do is set up a bunch of our api
60:49 - routes these api routes is where what
60:51 - we're going to use to communicate with
60:54 - our sanity database and pull what we
60:56 - need from them so what i need to do is
60:58 - we can actually just delete hello.js and
61:00 - set up a couple things inside okay so
61:02 - going back to our app the first api
61:04 - route we're going to set after deleting
61:06 - the hello.js is go to your api folder
61:08 - and let's make a new file and let's call
61:10 - it create user.js okay what this is
61:13 - going to do is literally create a user
61:15 - insanity so if i do create user on
61:18 - sanity equals async set that up and
61:21 - every single time we make a function at
61:24 - these api routes we actually have to
61:25 - import the client from our live folder
61:28 - okay from there we need to set up a try
61:31 - catch block which is going to look
61:32 - something like this and that's the
61:33 - parameters we're going to put rec and
61:35 - res and if you look in this try block
61:38 - all i'm doing is creating a user
61:40 - document and sending that over to sanity
61:43 - with this as our fields the wallet
61:44 - address of that user the name of that
61:46 - user and the id will also be that wallet
61:48 - address and of course we're going to
61:50 - define our type which is the user doc
61:51 - okay next thing we want after this try
61:53 - catch is this await the sanity has this
61:56 - nice thing if the user does not exist
61:58 - insanity it will actually create that
62:00 - user if it does it will leave it alone
62:03 - okay and of course if it's successful
62:05 - put a rest status of 200 and when
62:07 - everything does will go wrong we need to
62:09 - add a catch down below okay last thing
62:11 - at the bottom you have to export default
62:14 - create user on sanity okay the next
62:15 - route i'm going to set up is the fetch
62:18 - current user data so it's going to be
62:20 - just that current
62:22 - userdata.js and every single route we
62:24 - make is going to import that client we
62:26 - set up it's going to have another
62:28 - function here that's just going to be
62:29 - getuserinfo and within that function i'm
62:31 - going to set up a try catch which is
62:34 - going to make this query okay as you can
62:36 - tell from this function what i'm going
62:38 - to be grabbing from sanity is the
62:41 - current active account so if i'm logged
62:44 - in this is going to query for my user in
62:48 - our sanity database okay cool after that
62:50 - i'm gonna make a variable called
62:52 - sanityresponse and just store what we
62:54 - get back from that query okay and if all
62:56 - goes well that's just gonna be a status
62:58 - of 200 and underneath we can have a try
63:02 - catch oops and just make sure that all
63:03 - that code goes inside the char block
63:05 - okay so our constant response and that
63:07 - res status is going to go over here just
63:09 - adjust my browser a bit boom and of
63:11 - course underneath the try is going to be
63:13 - the catch okay and if anything goes
63:15 - wrong we'll catch that send a status of
63:17 - 500. so that's the fetch current user
63:19 - data next i would like to add is to
63:21 - fetch the users fetching the current
63:23 - user but i also want to be able to query
63:25 - for the rest of the users in the
63:27 - database so i'm just going to say fetch
63:29 - users.js
63:31 - do the same things import the client
63:33 - again set up my function and you guessed
63:35 - it this is also going to have a try
63:38 - catch block okay in this try block like
63:40 - i said i'm going to be querying for all
63:42 - of the users except for myself otherwise
63:46 - i'm going to be logged in and i'm also
63:48 - pulling me from the database so all the
63:50 - users except for myself or in other
63:51 - words except for the user that's logged
63:53 - in okay so just like the last one i want
63:56 - to make a variable called the sanity
63:58 - response which is just gonna hold what i
64:00 - get back from my query that i set up
64:02 - okay and if it's successful send a
64:04 - status of 200 and if it's not the status
64:08 - should be 500 nice the next thing i want
64:10 - to make a file here called check matches
64:13 - client use this function set up to try
64:15 - catch again this time we'll just set
64:17 - this to catch first there we go and for
64:19 - the try this is the query that we're
64:21 - going to use okay with this query i'm
64:23 - going to begin looking in the users and
64:25 - getting the liked user and again let's
64:28 - save that response in a variable called
64:31 - sanityresponse i also want to set up a
64:33 - variable called is match and this is the
64:35 - important part right here which is i'm
64:37 - going to loop through the array of users
64:42 - look at their likes because every user
64:44 - has a likes array if you remember from
64:45 - our schema and for each user in that
64:48 - array i want to check if that user liked
64:53 - me because if we both liked each other
64:55 - then that match should be true so
64:56 - essentially i'm looking in the likes
64:58 - array if the user that i liked also
65:00 - liked me back and what did we do when
65:02 - that's successful you guys are crushing
65:04 - it it is send a status of 200 once again
65:07 - okay and one thing that we can't forget
65:09 - about all these api routes is that we
65:11 - need to be exporting all of these now
65:13 - that's another thing that we need to
65:14 - think about is how are we going to save
65:17 - that if you remember in every user has a
65:20 - likes property that has the array of all
65:22 - the users that they like this route is
65:24 - going to help us post that user into
65:26 - that array so make a file in your api
65:28 - folder called savelike.js
65:30 - at this point you guys know the drill
65:32 - import the client set up the function
65:34 - the difference though is what's in this
65:36 - try block is we don't necessarily have
65:38 - to make a query what we want to do is
65:40 - type in this code right here which is
65:42 - we're going to wait for our client get
65:43 - the current user and again oh it's
65:46 - missing if this is missing we're going
65:47 - to have it but it's probably not the
65:49 - next thing is we're going to insert
65:50 - that user right we're inserting a
65:52 - reference and putting that into the legs
65:55 - array because we want this to reference
65:57 - the user that they liked in our database
65:59 - and after that we're going to do a
66:00 - commit and that's how we add and save
66:03 - that we have on our app okay last thing
66:05 - export deficit like cool so it looks
66:08 - like all those api routes are set up now
66:11 - let's actually take advantage of those
66:12 - routes and if you remember we were
66:13 - setting that up in context so going back
66:16 - to our tinder context.js
66:19 - we have all these functions and we
66:20 - currently comment out the use effect but
66:22 - now we're going to get it up and running
66:23 - soon okay so remember the request user's
66:26 - data remember all these functions here
66:28 - that says request something we're going
66:30 - to set up some of those functions now
66:31 - the first one i'm going to make is this
66:34 - this one is a function called request to
66:36 - create a user profile and of course it's
66:38 - going to be asynchronous and this one's
66:40 - going to be asynchronous and it's going
66:41 - to take in parameters of a wallet
66:43 - address and name we're going to set up a
66:44 - try catch i'm just going to finish up
66:46 - the catch part of it since it's going to
66:48 - be standard and it's just going to say
66:50 - console.log console.error the error
66:52 - awesome in the try block remember that
66:54 - api route that we set up we want to call
66:56 - it here first thing i want to do in this
66:58 - try block is make an await call to that
67:02 - api route of create a user all right so
67:04 - in this create user this is us creating
67:06 - a user on sanity and we have to set a
67:08 - pass in a couple things inside this
67:10 - fetch call so put a comma inside the
67:13 - before the closing parenthesis had these
67:15 - curly brackets here and we're going to
67:17 - add the rest of the stuff now okay what
67:19 - you're going to need is all of this the
67:21 - method is going to be post this has your
67:23 - header we're going to stringify that
67:25 - user wallet address key to be the wallet
67:28 - address that we passed in when we call
67:29 - this and the name is just going to be
67:31 - the same as the name okay okay the next
67:33 - function that we're going to make is
67:35 - this one called request current user
67:36 - data make sure it's asynchronous as well
67:39 - and this one's only going to take in a
67:40 - wallet address set up your try catch
67:42 - finish out your catch and then in this
67:44 - one we want to be fetching the current
67:46 - user and we have an api route for that
67:48 - which is going to be this we're going to
67:50 - call that api of fetch current user data
67:52 - passing in the active account so fetch
67:55 - the current user with this matching
67:57 - wallet address which should be there if
67:58 - we created a user profile already okay
68:00 - and if that's done make a variable
68:02 - called data and save the response.json
68:05 - in that variable data
68:06 - and then now that we got that user we
68:09 - want to be able to set that user in our
68:12 - state and pass in data.data and then our
68:16 - cache is there and we should be good to
68:18 - go and this last function called const
68:21 - request users data and this is the other
68:23 - route that we have that gets all the
68:25 - users except for the one that is active
68:28 - because remember in that route we said
68:29 - get all the users except for the current
68:31 - active account so again saving making a
68:34 - variable called data saving the
68:35 - response.json there and setting the
68:37 - cards data to be just that go ahead and
68:40 - hit save and now looking at our use
68:41 - effect the request users data should be
68:44 - there as well as the request current
68:46 - user data should be there as well so if
68:47 - i hit save hopefully this works okay oh
68:49 - i'm getting issue called oh it's not
68:51 - configured under your images oh okay
68:53 - that should be an easy fix if you go to
68:55 - your next js.config you need to add
68:58 - morales in there as well let's take a
69:00 - moment to debug a couple things if
69:02 - you're seeing this error can't resolve
69:03 - saying the client that's because we got
69:04 - to make sure we have that installed so
69:06 - let's go ahead and do that so let me
69:08 - just take this moment to debug a couple
69:09 - of things we're getting a couple errors
69:11 - here the first one is if you see this
69:13 - can't resolve santa sanity client that
69:15 - probably means we did you don't have
69:16 - that installed like i don't have that so
69:18 - let's quickly install that do yarn add
69:20 - at sanity
69:22 - client inside your project folder okay
69:25 - once that's done run up your project
69:26 - again and let's see what the next error
69:28 - is let's go ahead and refresh this okay
69:29 - the next one it says invalid source this
69:31 - one should be a quick fix this one we
69:33 - have to go to our next.config.js
69:36 - and put morales in there so if you see
69:38 - this error this just means in your next
69:40 - js config we have to allow the images
69:42 - from sanity and also we're going to do
69:44 - images from morales as well so what we
69:47 - need to do is add a images key here put
69:49 - an object and put domains that we'd like
69:52 - to add and it's going to be this array
69:54 - and inside this array we're going to put
69:56 - these as our domains okay and that
69:58 - should do it let's see what else that we
69:59 - can come back what else do we need oh
70:02 - and again after you set up that config
70:04 - we have to restart the server so again
70:06 - i'm going to cancel it and look at my
70:08 - terminal i'm just going to do yarn dev
70:10 - once again okay let it compile hit
70:12 - refresh and we should be good to go
70:14 - awesome so there it is there's our
70:16 - lovely app and you can see we're
70:17 - actually logged in and if we hit log out
70:19 - let's see if anything happens hey
70:21 - nice work so if i log in we should get
70:24 - prompted by metamask soon as there's an
70:25 - error log in there we go so i hit log in
70:27 - it's going to ask me to connect with my
70:29 - metamask account connect here's the
70:31 - message that we sent just giving
70:32 - morale's permission to have access to my
70:35 - information with this wallet and there
70:37 - you go i am logged in awesome this is
70:40 - amazing so what we could do now is go
70:43 - over to our header and let's work on
70:45 - making the current account even more
70:48 - dynamic so let's just recap quickly on
70:50 - what we have going on so far this is our
70:52 - tinder app we have sanity which is going
70:55 - to show us all the list of users and
70:57 - currently if i go to studio and say
71:00 - sanity start to start obscenity go to
71:02 - studio and go ahead and type in sanity
71:03 - start and let's take a look at our users
71:06 - okay and we will be able to see it at
71:08 - localhost 333 awesome we can go ahead
71:11 - and log in to my clever programmer
71:13 - account there you go so remember we only
71:14 - made a user schema so that's why we see
71:16 - this and we should see gregory bosco
71:19 - which is actually just me because this
71:21 - is my wallet address this name comes
71:23 - from what we set up earlier with
71:24 - faker.js just to generate a random name
71:26 - for now okay and we can double check
71:28 - that this is my wall address and there
71:29 - we go cool so what we need to do now is
71:32 - populate our users oops what we need to
71:35 - do now is add some more users here
71:37 - besides ourself so that we can have more
71:39 - people in our cards data so i'm going to
71:41 - take a moment to create a couple meta
71:43 - mask wallets and then log in so that we
71:45 - can populate our users okay once you're
71:47 - done signing in you should see about six
71:50 - people i'm gonna go ahead and update
71:51 - these and add some images all right so i
71:54 - finally finished setting up the dummy
71:56 - user data and added an image for each of
71:58 - those users so what we need to do next
72:00 - is hop over to your context and remember
72:03 - how we're storing all the query for
72:05 - those users in cards data we need to
72:07 - pass that into our provider so what i'm
72:09 - going to do is go over to value and
72:11 - let's make cards data global okay once
72:14 - that's global think about where we're
72:16 - going to import it and we're going to be
72:17 - importing that in card as you can see
72:20 - we're mapping through the card's data
72:21 - and for every user or essentially card
72:23 - we're going to make a tinder card item
72:25 - right now we just have a static one over
72:27 - here so what we need to do is import our
72:30 - context so to do that we just need to
72:32 - get use context from react then we also
72:35 - need to import the tinder context okay
72:39 - once that's done you can hop over to
72:41 - here and set up the contacts hop over to
72:44 - line 19 and we can set up our contacts
72:47 - like and i want to get cards data from
72:49 - our tinder card text that's what this
72:51 - line means so now that we have it we can
72:53 - actually uncomment this out take out the
72:56 - tinder card item because we don't need
72:57 - that static one anymore and the next
72:59 - thing we need to do is if you notice we
73:01 - are actually passing in the individual
73:04 - card to that card item and the key next
73:07 - step would be to go to your tinder card
73:09 - item js and accept those props which is
73:11 - just going to be card and wherever we
73:13 - have something static let's make it
73:15 - dynamic with the card procs so instead
73:18 - of this beautiful picture of this pug we
73:20 - want to be using the image from that
73:22 - card which is just going to be card oops
73:24 - which we need to make a template
73:25 - literate for and say card dot image okay
73:29 - next thing you want to also do is you
73:31 - don't need this style static wallet
73:34 - address you can actually just get the
73:36 - card wallet address like okay you just
73:38 - need to insert this piece of code right
73:40 - here it's going to grab whatever cards
73:42 - while the dress that is and slice it so
73:44 - that it looks nice and formatted like
73:46 - that okay the next thing you want to
73:47 - also do is the name which is just curly
73:50 - brackets card dot and as i was saying
73:52 - there's no age property but if there was
73:54 - if we did add one we could put card that
73:57 - age in here as well so once that's done
74:00 - and everything is set up make sure the
74:02 - image url looks like this let's hit save
74:05 - hey
74:06 - there we go look we got qazi in the
74:08 - house and he is there awesome so if i
74:11 - swipe left we should see the rest of our
74:13 - users there's me there's other randomly
74:15 - generated users and there you go no more
74:17 - users in the area notice how many users
74:20 - there were if i refresh this there's one
74:23 - two
74:24 - three
74:26 - four five there's a total of six users
74:30 - in our database so if i go to desk go to
74:32 - users notice which one i didn't see you
74:34 - didn't see daniel smith because i am
74:36 - currently logged in as daniel smith and
74:38 - that's because what i set up with the
74:40 - query we want to get users except for
74:42 - the current user so that's why you
74:43 - didn't see daniel smith there because
74:44 - i'm daniel smith okay awesome okay and
74:47 - with that we have this amazing app that
74:49 - can actually pull users go ahead and
74:52 - feel free to customize this with anybody
74:54 - you want it doesn't have to be these
74:56 - dummy users that i set up which is
74:57 - what's super cool about programming so
74:59 - the next thing you want to do is set up
75:01 - so when i swipe that's going to get
75:03 - added as a like so at the moment it
75:05 - doesn't do anything when i swipe so
75:06 - let's go ahead and set that up like i
75:08 - was saying before we're able to get all
75:09 - these users here and now what we need to
75:11 - do is add that swipe right functionality
75:14 - so that swipe right functionality is
75:16 - going to be over here which we made a
75:18 - function called on swipe if the
75:19 - direction is right then we're gonna use
75:21 - the hand swipe function at the moment we
75:24 - don't have that so let's set that up in
75:26 - our context okay and i can just make it
75:28 - right here in between disconnect wallet
75:30 - and the request to create user profile
75:32 - i'm just going to say cons handle right
75:34 - swipe equals async and this function
75:37 - okay it's going to take two parameters
75:38 - first one being the card data and also
75:40 - the current user's address current user
75:44 - address okay what we essentially want to
75:46 - do is something in three parts the first
75:48 - thing you want to do is create a
75:50 - variable called like data and set it
75:51 - equal to this object where the key of
75:53 - left user is the card data's well
75:56 - addressed basically if i like quasi here
75:58 - i want to get save his wallet address as
76:00 - the liked user and we're going to save
76:02 - the current user with my address or
76:04 - who's ever logged in okay from there i
76:07 - want to set up a try catch and of course
76:09 - in the error it's going to be pretty
76:10 - standard
76:11 - console.error now here is where the
76:14 - important stuff happens in the try block
76:16 - we need to have a fetch okay it's going
76:18 - to be an await and what we're going to
76:19 - fetch is the api route to save like
76:23 - which we set up previously okay and we
76:26 - get that route and we're also going to
76:28 - pass something else in with that fetch
76:30 - which is going to be all of this all
76:32 - right because what we want to do is post
76:35 - that save like so what i'm going to do
76:36 - is set a variable called response to an
76:38 - await which is going to fetch check
76:40 - matches if you guys remember check
76:42 - matches what it's going to do is let's
76:43 - say i like to quasi right when i swipe
76:46 - right on kazi what's going to happen is
76:47 - we're going to check if qazi liked me
76:50 - back we're going to do that with this
76:52 - route right here okay so inside that
76:54 - batch we also got to pass this in which
76:56 - is going to be similar to what we have
76:58 - okay next i want to create a variable
77:00 - called response data and set that to
77:02 - response.json next i also want to have a
77:05 - match status and set that equal to
77:07 - response data.data is match all right
77:10 - don't forget to close that and the next
77:12 - part is if there is a match and qazi did
77:14 - like me back we can count to logic which
77:16 - we don't have to do and we can also just
77:18 - make a variable called mint data and
77:20 - that's gonna be an object with the
77:21 - wallet address and it's gonna have an
77:23 - array of for this example it's gonna
77:25 - have the array of the liked user and
77:27 - also address and for the names it's
77:29 - going to have the liked user's name
77:30 - which in this case could be kazi and
77:32 - also my name and we're going to need
77:34 - that information for our nft that we're
77:36 - creating from this so we're saving that
77:38 - in a variable called mint data and we're
77:39 - still within the if statement we're
77:41 - going to have another fetch call okay
77:43 - and this fetch call it's gonna request
77:46 - to mint match nft but we haven't set up
77:48 - that api route just yet but in the
77:51 - meantime i'm just gonna set it up and
77:52 - still within that fetch this stuff is
77:54 - gonna be pretty standard but also pass
77:56 - in that mint okay there we go and now
77:57 - just to recap what we just did this is
77:59 - the handle right swipe function it takes
78:02 - into parameters cards data and current
78:05 - user address and make sure it's card
78:08 - data and current user okay once the
78:10 - function runs it's going to make an
78:12 - object called like data which stores the
78:15 - wallet address of the person that i
78:16 - liked and my wallet address after that
78:19 - we have a try catch and it's going to
78:20 - save that i liked this person okay from
78:23 - there we're also going to make another
78:25 - fetch call that's going to check if that
78:27 - person i liked also liked me back we'll
78:30 - save that response in response data and
78:32 - then we also want to make a variable
78:34 - called match status which is going to be
78:36 - equal to the status of if there is a
78:38 - match or not so if there is a match
78:41 - status would be true which means this if
78:42 - statement would run so in other words if
78:45 - there is a match the feeling is mutual
78:47 - we're going to convert it to this mint
78:48 - data object which is the data for the
78:52 - nft that we're going to mint right from
78:54 - there we're going to call mint match nft
78:56 - which is essentially going to start the
78:59 - process of minting the nft that shows
79:01 - that me and another person matched so
79:04 - once that's done that is the handle
79:07 - right swipe so we can copy that and
79:09 - bring it down to our provider once you
79:12 - pass it into the provider now that
79:14 - function is global and it can be called
79:16 - anywhere as long as we import the
79:18 - contacts so let's go ahead and import
79:20 - that context because we need to put it
79:22 - in our on swipe function so go back to
79:24 - your tinder card item js to go back to
79:26 - your tinder card item.js let's import
79:30 - that use context we also want to be
79:32 - importing our tinder contacts so that we
79:34 - can set it up and at the top level of
79:36 - this card we can remove some console
79:38 - logs and we want to make sure to get
79:40 - handle right swipe and current account
79:43 - from the contacts let me just double
79:45 - check that i'm passing current account
79:46 - yes i am going back to the card we want
79:48 - to get to those two the function and
79:50 - that variable from our tinder context so
79:53 - in our on swipe function we can take
79:55 - this guy right out and you can see that
79:56 - we're passing in the card that i swiped
79:58 - right on and the current account of the
80:00 - user so it's saved awesome the only
80:02 - thing that's left now is when i swipe we
80:05 - want to trigger our smart contract and
80:08 - mint the nft to the user now that your
80:10 - onswipe function is working if you look
80:12 - into the browser and click on quasi and
80:15 - swipe right on him we should see that
80:17 - user in the likes right so keep in mind
80:20 - who's logged in for me it's danielle
80:22 - smith and if you look there's quasi all
80:24 - right let's go here back to the app i'll
80:26 - say no to me let's say yes to olga all
80:28 - right so swipe right take a look and
80:30 - there it is we're actually storing all
80:32 - of that users likes that is amazing cool
80:36 - so now that's done what we need to do
80:37 - now is set it that if there is a match
80:40 - we need to be able to mint the nft
80:43 - showcasing that these two users are a
80:46 - match all right in this section i'm
80:48 - gonna be showing you guys how to
80:49 - actually mint the nft if there's a match
80:52 - so let's recap on what we have so far we
80:55 - have this handle swipe function and
80:57 - there's definitely a couple parts to it
80:59 - the first one is creating that like data
81:01 - creating that like data when i swipe
81:03 - right once i have that like data i want
81:05 - to save that like into sanity and that's
81:08 - what we see here in our studio and we
81:10 - see that reference to the user in the
81:11 - likes array of that user document that's
81:14 - why we see kazi and olga here after we
81:16 - save that like the next thing you want
81:17 - to do is make a request to check the
81:20 - matches check matches is exactly what it
81:22 - sounds like and it's going to grab query
81:25 - all the users except for that liked user
81:28 - and check in the array of each user if
81:30 - they like them in other words when
81:32 - danielle likes qazi it's going to check
81:35 - if qazi also liked any users like
81:38 - danielle smith and if they did there
81:39 - should be a match okay and then we start
81:41 - that response in response data and we're
81:44 - also going to store the match status in
81:46 - here now this is where it starts to get
81:47 - important because this third part we
81:49 - need to set up still so if the match
81:51 - status is true there is a match we're
81:53 - going to create the mint data the mint
81:56 - data is just essentially the person you
81:58 - like swallowed address and your wallet
82:00 - addressed and the person's name and your
82:02 - name danielle's wallet address kazi's
82:04 - was the dress danielle's name and qazi's
82:06 - name okay next thing we have here is the
82:09 - api request to mint the match nft that's
82:13 - created when there's a match like i said
82:15 - this one this route is not created yet
82:18 - so go ahead and hop into your api folder
82:20 - under pages so go to pages then api and
82:23 - then let's create a file and let's call
82:25 - it mint match
82:28 - nft.js so now we're in the mintmatch
82:30 - nft.js at this point all of the front
82:33 - end is done the rest of the things we
82:35 - need to do is the back end it's more
82:37 - specifically the mint match nft which
82:40 - all it does is makes a request to our
82:42 - back end and literally communicates with
82:44 - the smart contract that we were created
82:46 - way in the beginning and to do that
82:48 - we're going to use morales to help us
82:49 - out so let's set up a couple things so
82:52 - going into my terminal we can stop the
82:54 - project for a second and we need to do
82:56 - yarn add ethers and morales if you
82:58 - haven't done so already okay that way we
83:01 - can now that we made sure we imported it
83:03 - we can actually take those two imports
83:05 - right here the next thing we need to
83:07 - import is this line at the top notice
83:09 - how it says import tinder address and
83:11 - tinder abi at the lib constants at the
83:15 - moment remember way back in the
83:16 - beginning when we deployed our smart
83:18 - contract and it returned a little
83:20 - address if you have that saved you need
83:22 - to go to your lib folder and let's make
83:24 - a folder called constance.js and in your
83:27 - constants.js you want to do export cons
83:31 - tinder address okay and grab that tinder
83:35 - address and go ahead and grab that
83:36 - tinder address that we made all the way
83:38 - back in the beginning of this tutorial
83:40 - and if you don't you're in luck because
83:42 - we can actually just create another one
83:43 - we just have to deploy our smart
83:44 - contract again just keep in mind every
83:46 - time you deploy something to the
83:48 - blockchain you do have to pay the gas
83:50 - fees but luckily we gave ourselves a lot
83:52 - of fake ethereum if you did that step so
83:54 - what we need to do now is actually cd to
83:57 - the smart contract and run hard hats to
83:59 - deploy that contract okay cd into the
84:02 - smart contract folder and if you
84:04 - remember the command is npx hard hat run
84:06 - script slash deploy.js and make sure
84:09 - you're deploying that conjuring to the
84:10 - rinkeby test network hit enter and as
84:12 - you can see at the top here this is the
84:15 - contract address after it's deployed if
84:18 - you ever redeploy your contract because
84:20 - if you forgot it for whatever reason
84:22 - make sure you update the constants.js to
84:24 - match that contract so i'm going to hit
84:26 - quote paste there we go so i'm just
84:28 - going to clear that and going back to
84:30 - the mint match nft you're going to see
84:31 - something called tinder abi to get the
84:34 - tinder avi what you need to do is go
84:37 - into your smart contracts folder and go
84:39 - underneath artifacts folder and then go
84:42 - into contracts you're going to see two
84:44 - things at this point which is the tinder
84:47 - erc721.json and the tinder erc720 dot
84:51 - dbg get the json do not get the dbg all
84:55 - right just get this one it's tinder erc
84:57 - erc721.json and copy that into your lib
85:01 - folder so there should be three things
85:02 - in your lib folder and that's going to
85:04 - be the tinder
85:06 - erc721.json constants.js sending.js and
85:11 - file what you need to do now is go back
85:13 - into constants and let's actually get
85:16 - that tinder that get the api from it
85:18 - okay so at the top move the tinder
85:20 - address to line three and we could just
85:22 - say import tinder abi from that path
85:26 - okay so now that we imported it we can
85:28 - actually use it and i'm just going to
85:29 - edit my browser real quick let's make
85:30 - this a lot bigger and so it's going to
85:32 - be mostly coded and now that we imported
85:33 - it we can say export contender
85:36 - underscore avi set this equal to tinder
85:39 - abi.avi awesome now that's done going
85:42 - back into our api for the mint match
85:45 - this is going to make a lot more sense
85:47 - this is what we're actually importing
85:48 - from that constants folder okay the next
85:50 - thing we got to do is let's create the
85:52 - mint match nft function synchronous and
85:56 - we can put rec and res as the parameters
85:59 - okay the first thing you want to do is
86:01 - set up morales and to do that it's just
86:03 - going to be this piece of code await
86:05 - morale start with the server url the app
86:08 - id and the master key notice how it's in
86:11 - these process.emv variables if you don't
86:13 - have that set up go ahead and go into
86:15 - your enb file and set that up now i
86:17 - think i need to set it up myself so i'm
86:19 - going to go into i'm going to go into my
86:22 - env folder i only have sani set up so
86:24 - let's get the rest of it done so what we
86:26 - need from this is the morale server url
86:28 - we need the app id and we also need the
86:32 - master key all right so let's go ahead
86:33 - and grab that to get all three of those
86:35 - things you can just hop over to your
86:37 - morales login okay and once you log in
86:39 - you can just click view details and all
86:41 - the things you need is going to be in
86:43 - the view details like it says it right
86:44 - here here's the application everything
86:46 - you need is going to be in the view
86:47 - details button here's the server url
86:49 - which you can just paste in here the
86:51 - application id and the master key this
86:54 - is going to connect your memoral server
86:56 - to your app so that we can use it to
86:58 - communicate with your smart contract so
87:00 - once those env variables are set up that
87:02 - means these process that envs are gonna
87:05 - be active okay so now that you've
87:07 - started morales the next thing you want
87:08 - to do is make a variable called const
87:11 - metadata what we're doing here is
87:12 - creating a variable called metadata and
87:14 - essentially storing all the data that we
87:17 - want to include as part of the nft and
87:19 - if you take a look that's going to be
87:21 - this stuff right here the metadata of
87:23 - the nfc that we want to create is always
87:24 - going to have the name of the users that
87:27 - matched it could be qazi and somebody
87:30 - else you could the description is going
87:32 - to have the two names as well followed
87:34 - by a message that just says just match
87:37 - okay and the last thing that's important
87:39 - here is this image every nft is going to
87:41 - have the same image it's stored in this
87:44 - ipfs so you don't have to insert an
87:46 - image this one is already hosted and
87:48 - we'll just point to it and that's the
87:50 - image of your nft that's already going
87:51 - to be handled for you awesome next
87:53 - you're going to make a variable called
87:54 - t2 toa and you're going to set it equal
87:57 - to this piece right here essentially
88:00 - this is an abbreviation from binary to
88:02 - ascii to explain this at a high level
88:05 - all it is takes that metadata and turns
88:07 - it into a string make a buffer for it
88:09 - and then encode it to a base64 string
88:11 - that we can use once that's done we're
88:13 - gonna use morales to save that file to
88:16 - save that variable into a file and store
88:18 - that into a variable called const
88:21 - metadata file and then we need to save
88:23 - that metadata into ipfs and again since
88:26 - this is a backend application we need to
88:28 - use the master key that we set up
88:30 - earlier and set it to true now we
88:32 - actually have the metadata uri which
88:34 - i'll store in that variable and setting
88:35 - it equal to the metadata file dot f ipfs
88:39 - next thing we're going to do is set up
88:40 - the provider this is so that we can work
88:42 - on the rinkeby test net that's why i
88:45 - have the chain id of four and just in
88:46 - case the name of it rinka b and for that
88:49 - we're actually using alchemy to help us
88:51 - talk to the blockchain so again make
88:53 - sure you have the alchemy api and if you
88:55 - don't go ahead and set it up now and you
88:58 - should have that alchemy api your url
89:00 - set up inside your smart contract folder
89:02 - because we set it up way in the
89:03 - beginning but if you haven't go ahead
89:05 - and do that our provider setup we want
89:07 - to set up a variable called kant's
89:09 - wallet provider cons wallet with
89:12 - provider set that equal to this if you
89:15 - guys didn't know the app we just created
89:17 - has gasless transactions just to explain
89:20 - it real quick anytime you do something
89:22 - on the blockchain you have to pay for
89:24 - gas this app has gas list transactions
89:26 - because anytime there is gas fees it's
89:29 - going to be paid for by the owner of the
89:31 - contract address which is going to be
89:33 - that first wall that we set up which is
89:35 - why we made the wallet private key so
89:37 - whatever you put as your wallet private
89:38 - key they're going to be paying for all
89:39 - the gas fees so that your users don't
89:41 - have to which is super nice so make sure
89:44 - like i said before the wallet that you
89:45 - provided here has a bunch of test
89:48 - ethereum that you can work with just in
89:49 - case anything goes wrong and nice cool
89:52 - so all you need to do now is get that
89:54 - contract pass in all of this make sure
89:56 - your tinder address is the right address
89:58 - of the contract you have your abi set up
90:01 - and your wallet with provider which is
90:03 - going to hold your wallet that's going
90:04 - to pay for all the necessary gas fees
90:07 - okay i'm going to be making a variable
90:08 - called const tx set that equal to and a
90:11 - weight if you notice here we have weight
90:14 - contract dot mint nft all right we're
90:16 - actually grabbing we're invoking the
90:18 - tinder contract we created and running
90:21 - the mint nft function with these three
90:23 - parameters the first user's wallet
90:25 - address second user was wild address and
90:28 - that metadata this is the description in
90:31 - the image that we set up at the top
90:32 - which comes from here and if you
90:34 - remember that function then the function
90:36 - that we're invoking is this one which is
90:37 - going to mint an nft to both users that
90:40 - you can actually that you can actually
90:42 - view on openc nice so going back to mint
90:45 - match nft we're going to wait for so all
90:47 - in all this tx variable is just going to
90:49 - run our mint nft function from our smart
90:51 - contract okay then we're going to do a
90:54 - const here tx equals a weight tx.weight
90:57 - thing that might be confusing is that
90:58 - those two weights here this weight is
91:00 - just gonna wait for this command to
91:04 - finish the tx that wait is gonna wait
91:06 - for the smart contract on the block
91:08 - train to finish running essentially
91:10 - think about it this is waiting in web 2.
91:12 - this is the weights for web3 cool and if
91:15 - that's successful and i'm just gonna
91:16 - clean this up a bit and if all is
91:18 - successful we're going to send res dot
91:21 - status of 200 saying that it was a
91:23 - success and at the bottom we always
91:26 - export default to route cool so that
91:29 - should be it for the mint match nft like
91:30 - i said this is very back and heavy at
91:33 - this point okay i set up a couple
91:35 - console logs here so that when i run
91:36 - this in my back end we'll see all these
91:39 - messages in case something goes wrong
91:40 - along the way what i'll do now is hop
91:42 - over to my sanity and let's just review
91:44 - and let's make a match remember the
91:46 - matches i was logged in as danielle
91:48 - smith i liked two users i liked kazi and
91:51 - olga what i'm going to do now is log in
91:53 - as olga and then swipe right on danielle
91:55 - so that it will trigger the mismatch
91:57 - function which will then trigger the
91:59 - mint match function and by there we
92:01 - should see all the console logs so make
92:02 - sure you go back to your app and log out
92:05 - i'm already logged out now so what i
92:07 - need to do is log in so just to make
92:09 - sure to figure out which user you want
92:11 - to log into you can click on the user
92:13 - you want to log in and make sure it's
92:14 - the wallet address of it so mine is all
92:17 - x902
92:19 - so that's the wallet i need to sign into
92:20 - so i'm gonna hit lock and there's a
92:22 - couple options looking for all x902 this
92:25 - is olga i'll hit next connect signature
92:28 - request and bam so now i should be
92:30 - logged in as olga and that means i won't
92:33 - see i shouldn't see myself because i
92:36 - should see all the users except for the
92:37 - person logged in so again swipe left
92:39 - there you go so remember dan smith
92:41 - danielle smith is who liked us to lock
92:44 - her back we're going to see if the match
92:46 - function works so i'm going to swipe
92:47 - right okay it's checking matches oh no
92:50 - it just says check matches it's
92:52 - successful so again swipe left until we
92:54 - get to danielle okay so we got to
92:56 - danielle let's go ahead and swipe mint
92:58 - match nft and looks like we got an error
93:01 - cannot read property undefined to hex
93:04 - string okay so i think i got a handle of
93:06 - what the issue is what the issue is in
93:08 - your emv local we need to have the
93:11 - alchemy api url and the wallet private
93:14 - key in there as well i forgot we have it
93:17 - in an emv file in our smart contract
93:19 - folder as but you want to take those and
93:21 - put it into the local env this one and
93:24 - change the rinka b underscore private
93:26 - key to wallet private key that's the
93:29 - reason why it wasn't working so let's
93:30 - just recreate that one more time and
93:32 - let's see if it works right so what i'm
93:34 - gonna do is remove olga's like and hit
93:38 - publish so now it looks like she never
93:40 - liked any users so we can set up that
93:42 - match function once again i'm logged in
93:44 - as olga let's just do a yarn dev anytime
93:47 - you fix your emv files you need to
93:49 - restart your terminal so i'm gonna start
93:52 - yarn dev okay it's compiling hit refresh
93:54 - it's stitch i never logged out so it
93:56 - should remember that i'm logged in nice
93:58 - so i'm all good today and let's go match
94:01 - with danielle so let's say no to all
94:03 - these beautiful people we're at danielle
94:05 - and let's keep an eye on the console so
94:07 - swipe we're gonna save that like it's
94:09 - gonna go through check matches it didn't
94:11 - go through let's try this again okay
94:13 - cool so i restart my terminal i'm logged
94:15 - in as olga let's go match with danielle
94:18 - so i'm going to say no to all these
94:19 - beautiful people once we get to danielle
94:22 - to make it a match let's swipe right so
94:24 - we're saving the like we're checking the
94:25 - matches we're minting the match nft we
94:29 - get the console log this okay this is
94:31 - the provider this oh this is the
94:33 - transaction receipt nice okay this last
94:36 - console log here is this tx receipt so
94:39 - that means all of this process went
94:41 - through and it was working and if you
94:43 - guys want to see the nft we can actually
94:45 - see it by going into openc openc is a
94:48 - marketplace that showcases what nfts you
94:52 - owned if you remember we're on the test
94:54 - net so we need to go to the testnets
94:56 - version of openc and whenever you deploy
94:58 - to the blockchain depending on what
95:01 - chain you're on it's going to take a
95:02 - couple minutes for it you actually to
95:04 - see it so what you need to do is log in
95:06 - to the users that have the nft which is
95:08 - for me olga and i'm logged in already
95:11 - and if i click on profile hey there it
95:13 - is this is my match danielle smith and
95:15 - olga all right this is the unique nft
95:17 - and with the description that we set up
95:19 - and this is the image that's hosted
95:21 - let's brickin go we have this beautiful
95:24 - tinder clone that we can use feel free
95:27 - to customize it make it make your own
95:29 - dating profile and once you deploy this
95:31 - project online to either versailles
95:33 - netlify go ahead and share it with your
95:35 - friends and tell them to connect their
95:37 - metamask and each time they log in
95:39 - they're going to be part of the users
95:40 - this is going to be a fun project to
95:42 - make and add to your portfolio i hope
95:44 - you guys made it to the end of this
95:46 - video comment down below goldfish so
95:47 - that i know that you made it to the end
95:49 - of the video and you completed this
95:51 - project so thanks for watching be sure
95:52 - to keep a lookout for our future on web
95:54 - 3.0 it's been a pleasure working with
95:56 - you guys see you next time