00:00 - hey you welcome back in this video we're
00:03 - gonna do part two of the official Django
00:07 - tutorial we have already done quite a
00:10 - bit of stuff right we've gone our local
00:12 - servers started but what we want to do
00:15 - now is in this video we're gonna
00:17 - actually cover our admin interface and
00:21 - we're gonna actually start playing
00:22 - around with it so it's gonna be pretty
00:23 - exciting I hope you're willing and
00:26 - excited to see how that works okay and
00:28 - we're gonna go through this one a little
00:30 - bit faster so okay so first thing we
00:33 - want to do is like look at the database
00:35 - setup which you can frankly ignore if
00:38 - you're new but later on like this is
00:41 - something that you should read but for
00:43 - now we're only gonna focus on this
00:45 - command it says python manage that py
00:47 - migrate okay so this is a complete
00:49 - continuation from the last video okay so
00:51 - make sure you're caught up on everything
00:54 - from part one I'm gonna open up Adam and
00:56 - I'm gonna break out of this by doing
00:58 - ctrl C and I will do Python manage that
01:00 - py migrate and it should give you a
01:03 - bunch of okay's and what that did is
01:06 - created these tables that weren't
01:09 - created before okay so they're all
01:11 - created like stuff with user names and
01:14 - emails and permissions and all the stuff
01:16 - that it has to do on the back end okay
01:19 - alright and from here we're gonna go on
01:25 - and we're gonna try to now create models
01:28 - alright so well define your models
01:30 - essentially your database layout with
01:32 - some additional metadata how django
01:38 - models work is their philosophy follows
01:41 - the DRI principle which stands for do
01:43 - not repeat yourself which is a really
01:45 - common commonly used acronym in the
01:48 - programming world and it emphasizes
01:52 - using logic that helps you never really
01:56 - repeat yourself right so for example
01:59 - just to give you a simple example
02:00 - imagine if you have to print out a
02:05 - letter or print out the word boom 100
02:09 - times you could keep writing print boom
02:12 - boom print boom or you could do it in
02:15 - the dry way which is write a for loop
02:18 - that prints it out 100 times okay so
02:21 - that way it allows you to stop yourself
02:23 - from repeating and just helps you do it
02:25 - at once
02:26 - now when you start abstracting it and
02:29 - taking it to a higher level that might
02:31 - mean taking your code from basic basic
02:34 - code and modularizing it into a function
02:37 - or into a class or into a package things
02:40 - of that nature okay and that's the same
02:42 - philosophy Django goes off on so instead
02:44 - of like repeating yourself over and over
02:46 - again it lets you create a class which
02:48 - it then creates models out of and
02:50 - handles a lot of that stuff for you okay
02:54 - so we're gonna create this these models
02:58 - okay and basically what we're gonna be
02:59 - working on in our simple poll app we're
03:01 - gonna create two models question and a
03:03 - choice a question has a question and a
03:06 - publication date so I'll almost imagine
03:08 - like a spreadsheet let's say you create
03:10 - a new sheet in the spreadsheet and you
03:12 - call the sheet question you have column
03:14 - one that says question text column two
03:17 - that has a publication date so question
03:19 - text on your first row might be what the
03:22 - hell is going on and the publication
03:24 - date may be like February whatever and
03:27 - your next question might be like when is
03:29 - Kazi gonna make the next piece of
03:31 - content stop making all these crazy
03:33 - videos where he's outside talking to the
03:35 - camera and then your publication date
03:37 - next to it right so that's how I want
03:41 - you to picture when we create these
03:42 - models all right with that said let's
03:45 - move on a choice is gonna be its own
03:49 - spreadsheet or its own sheet okay and
03:51 - basically what it does is a choice has
03:54 - two fields the text is a choice and a
03:55 - vote tally okay so the check text and
03:59 - the vote tally and then the question
04:02 - that you get to choose it is actually
04:04 - referenced from the question model okay
04:08 - so let's actually now write this code
04:09 - out so let's go to our polls and I'm
04:12 - just gonna copy pasted it I recommend
04:13 - that you actually write it out because
04:15 - it's really helpful exercise for you but
04:18 - just for a time I'm gonna go through it
04:21 - faster so we're gonna put it I'm gonna
04:24 - paste it right here okay I'm gonna say
04:25 - it all right now we have to activate our
04:33 - models okay so I'm going to go into my
04:35 - settings my side slash settings and
04:39 - inside of here I want to tell Django
04:42 - that we actually have this app installed
04:45 - okay so what I want to do is pulls dot
04:49 - apps dot I think it's polls config like
04:54 - that
04:54 - okay and make sure to put a comma after
04:56 - it because after all it is a list with
04:58 - one two three four five six seven
05:01 - elements okay so now Django knows to
05:07 - include the polls app let's run another
05:09 - command so up until now Django had no
05:11 - idea what this thing that you created
05:13 - this pulls app but now that you went in
05:15 - my site and added this under settings
05:18 - and added to your installed apps now it
05:20 - knows that it's actually there okay it's
05:23 - equivalent of kind of like let's say you
05:25 - downloaded an app on your Mac or your
05:28 - windows but you never installed it right
05:30 - like downloaded a game but you never
05:32 - installed it's kind of like that so we
05:34 - just installed it by doing this okay and
05:38 - now what we want to do is let's run
05:39 - another command Python manage that py
05:42 - make migrations polls okay so I'm gonna
05:46 - come into my command line and again to
05:49 - activate your virtual environment you'll
05:51 - do source activate followed by the name
05:54 - of your virtual environment and to
05:56 - deactivate your virtual environment you
05:58 - will do source deactivate if you're on a
06:00 - Mac if you're on Windows then all you
06:02 - need to do is activate followed by the
06:04 - name of your virtual environment so in
06:06 - this case it'll be my site ok so um
06:10 - since I'm already activated on my
06:12 - virtual environment I'm just gonna do
06:14 - Python and manage that py make
06:16 - migrations polls and now you see that it
06:22 - says create model choice create model
06:24 - question add field question to choice
06:27 - okay alright by running make migrations
06:35 - are telling Jango that you've made some
06:36 - changes to your models in this case
06:39 - you've made new ones and that you'd like
06:41 - the changes to be stored as a migration
06:42 - cool and this is effectively what the
06:46 - sequel will look like for this so this
06:50 - is not something you have to worry about
06:51 - if you're a beginner and you don't even
06:53 - know its sequel is totally fine but if
06:54 - you have a little bit of experience
06:56 - check it out what's really cool is like
06:58 - bunch of this code that you would
07:00 - normally add like generally anything to
07:02 - do with databases requires you to know
07:04 - sequel or write sequel okay SQL and
07:09 - queue for you to write raw SQL it looks
07:12 - pretty complicated right like for
07:14 - example if you go here there's a lot
07:15 - going on if you write sequel every day
07:19 - may not be that big of a deal but it's a
07:21 - lot going on
07:22 - whereas Django it's automatically
07:25 - generating all this code for you and you
07:27 - don't actually even have to worry about
07:29 - it I just showed it to you so you can
07:30 - see what it actually looks like on the
07:33 - back end so that's what they're showing
07:35 - here and we're not just gonna we're not
07:39 - gonna worry about that and since we made
07:41 - the migrations we're gonna commit those
07:43 - migrations to our database by doing
07:45 - Python manage py and typing in migrate
07:48 - okay so now that says applying pols
07:50 - initial and it says okay if I go to my
07:53 - migrations I can also see this specific
07:56 - migration that I made okay and I can
07:58 - read this migration whenever I want do
08:01 - not mess around with this file too much
08:02 - unless you know exactly what you're
08:04 - doing oh okay okay cool and now we're
08:09 - gonna play with the API
08:11 - another thing about migrations when you
08:13 - get a little bit more advanced it allows
08:15 - you to update your database without ever
08:19 - losing track of it
08:20 - so flask has kind of a weird migration
08:23 - thing going on whereas Django kind of
08:25 - comes with it and so it's database is a
08:27 - lot easier to play around with like it
08:31 - says migrations are very powerful let
08:33 - you choose your models over time as you
08:34 - develop your project without the need to
08:36 - delete your database or tables and make
08:38 - new ones that's generally what you have
08:40 - to do if you're working with you know
08:43 - like just kind of working from scratch
08:45 - it specializes in upgrading your
08:47 - database live without losing data so
08:50 - again there's gonna be really
08:52 - powerful and helpful as you get more
08:54 - advanced and as you do more things with
08:55 - models
08:56 - so now let's play around with the API
08:59 - that actually Django gives to us for
09:03 - free
09:03 - alright so we don't actually have to
09:05 - write it it just kind of comes with it
09:07 - so I'm gonna go and instead of just
09:09 - typing in Python I'm gonna do Python
09:13 - manage dot py shell okay and here I will
09:19 - do from pulls on models import question
09:23 - comma choice and then now we can play
09:27 - around with it so since we don't have
09:28 - any questions in our system yet when we
09:31 - actually look up questions and the
09:33 - objects for it it should show us empty
09:35 - right because we didn't create any thing
09:38 - from in the question model okay so if I
09:41 - do this at all it should show us none
09:44 - and that's exactly what it's showing us
09:45 - like hey the query set is actually empty
09:48 - now what we want to do is create a new
09:50 - question alright
09:52 - Django expects a time date use times
09:55 - under now instead of this and it'll do
09:57 - the right thing okay
09:58 - so we're gonna go from Django dot utils
10:01 - import timezone okay and what is our
10:07 - question take remember if we look in our
10:09 - questions model it takes two things it
10:12 - takes a question text and a publication
10:14 - date and that's what we want to give it
10:18 - to create a new question object okay so
10:25 - pretty much type that in and what is it
10:27 - saying it's saying hey I'm creating a
10:30 - question object this question class
10:35 - essentially takes in a few things
10:38 - question text and publication date and
10:40 - I'm using keyword arguments so I'm put
10:43 - in question underscore text equals so
10:46 - for the question text it takes in a car
10:48 - field so let's go actually here in
10:51 - models and you can see that it takes in
10:53 - a character field right here and that's
10:55 - why I'm actually passing it in as a
10:57 - string and then publication date takes
10:59 - in date time field and that's why I'm
11:01 - passing in the timezone dot now object
11:06 - okay and just gonna hit enter here and
11:10 - now queue is created so I should be able
11:14 - to do something like well let's follow
11:18 - along with their documentation is saying
11:19 - but if we actually do this now right
11:21 - question not objects dot all let's see
11:24 - if it shows us so that's because we
11:26 - haven't saved this yet so once we save
11:28 - it is gonna show up in our as one of our
11:32 - created objects for a question so let's
11:35 - follow along so now that says save the
11:37 - object into the database you have to
11:38 - call save explicitly so we're gonna do
11:40 - that I'm gonna say Q dot save and let's
11:45 - try it again
11:45 - and now look it shows us that there is
11:49 - indeed one question and it even has a
11:52 - number an extra at one okay but it's not
11:56 - very helpful because it's not showing us
11:57 - what that question is or it's not giving
12:00 - us a very easily readable name when we
12:02 - actually use this API so I'll show you
12:05 - guys how to overcome that too alright so
12:09 - now it has an ID if you do queue that ID
12:11 - it'll show you its ID it says access
12:14 - model field values via Python attributes
12:18 - so I could do Q dot question text so
12:22 - that question text right there and it'll
12:25 - show us like what's new and I can do Q
12:27 - dot publication date and it'll show me
12:31 - the date as a day time object 2018 -
12:36 - which is February 19th and let's go down
12:42 - here and we can even change the values
12:47 - by changing the attributes and then
12:48 - calling save on it okay so for example
12:51 - before we had the question that's what's
12:53 - new we can now save that question is
12:55 - what's up okay so for example I can do
12:57 - queued question underscore text is equal
13:02 - to what's up okay so that how yep and I
13:08 - can do Q dot save and now if I do Q dot
13:11 - question text you'll see that it
13:15 - actually says what's up right
13:19 - displays all the questions in the
13:21 - database so now if I again do this which
13:23 - you've seen it'll show me all of the
13:26 - questions right now we only have one
13:27 - question okay so if I wanted to add
13:30 - multiple questions I could do that
13:33 - you know let's say that we add q2 and
13:39 - then I do q3 and then I go right over
13:44 - here instead of saying what's new say
13:48 - what's popping like that hit enter and
13:53 - now if I do question dot objects dot all
13:58 - you can see that it shows me oh sorry I
14:00 - have to save Q 2 dot save Q 3 dot save
14:05 - and now if I do this you'll see that it
14:09 - shows me I have one question two
14:11 - questions three questions and I can even
14:13 - say for a question and questioned
14:19 - objects dot all I can loop through it
14:24 - print question dot question underscore
14:30 - text like that and if I run that I loop
14:34 - through all of these and then they'll
14:36 - print out the question text okay so you
14:38 - can do it this is just like playing
14:41 - around with its API and kind of getting
14:43 - comfortable with it okay and it's close
14:45 - wait a minute
14:46 - question isn't a helpful representation
14:49 - of this object so let's fix that by
14:51 - editing the question model in the thing
14:55 - so that's what I was talking about right
14:57 - like they're saying it in their
14:59 - technical terms basically what they're
15:01 - saying is like hey look this looks ugly
15:02 - as hell and doesn't give us any
15:04 - information like what this is about so
15:07 - let's make it into something that a
15:09 - human can read and be like okay I get
15:12 - what this question is and it's readable
15:13 - right so that's what we want to do all
15:16 - we need to do is add a string method
15:19 - okay so we're gonna add string
15:21 - representation to it you'll see what I
15:22 - mean in just a second so right now it
15:25 - just shows us like blob like whatever
15:28 - right well we're gonna do is under the
15:30 - class
15:31 - question we're gonna add a string method
15:35 - like that
15:36 - okay and it's gonna take in self and
15:39 - then we're gonna say a return solve that
15:42 - question or score tax like that okay so
15:46 - instead of showing us this wouldn't it
15:49 - be nicer if it showed us that question
15:51 - because that's a much easier way of
15:53 - identifying what that question is when
15:56 - you're just looking at the list it's
15:57 - just more readable that way okay and
16:00 - we're gonna do the same thing with
16:03 - choice we're just gonna go here create a
16:05 - function or create a method because
16:08 - we're inside of a class and I will say
16:11 - self and I'm gonna say return salt self
16:15 - dot what do I want to do here choice
16:18 - underscore text all right and I don't
16:23 - think I have to suit here let's try it
16:31 - okay cool so now it's important to add
16:36 - string methods to your models not only
16:37 - for your convenience when dealing with
16:40 - interactive prompt but also because
16:41 - object representations are used
16:43 - throughout Django's automatically
16:45 - generated admin so later when we go and
16:49 - I show you the admin this is actually
16:51 - gonna be helpful there because then when
16:53 - we're reading these names the admin is
16:56 - gonna be using it all the however we're
17:00 - showing it in the console right now is
17:02 - gonna be showing it on our admin
17:03 - interface right so like imagine if you
17:08 - created an app and you gave it to your
17:11 - client where it's like a blogging app
17:13 - right or if it's ecommerce app you don't
17:17 - want them to go to the store and when
17:19 - there's aren't differentiate between
17:20 - items it just says item one item two
17:22 - item three item four it'd be much nicer
17:24 - if it says like bicycle or watch or
17:28 - iPhone X or whatever they're selling
17:31 - right it'll be easier for them to
17:33 - identify that's essentially what we're
17:34 - doing right here note that these are
17:38 - normal Python methods let's add a custom
17:41 - method just for demonstration so they're
17:44 - adding a new
17:45 - a method here so we're gonna do that I'm
17:47 - gonna go into my models and we will
17:51 - import date/time at the top and then
17:55 - we're also going to import timezone oops
17:58 - right underneath this guy and we will
18:02 - add this method under a question okay
18:04 - okay so what's published recently is a
18:10 - method in the question class so you can
18:12 - do like Q dot was published recently and
18:16 - it'll tell you it what it's gonna do is
18:18 - gonna basically tell you true or false
18:20 - okay so I think what it's checking for
18:23 - is like if it was published within one
18:25 - day or later than 24 hours let's see
18:28 - what this say no the edition of import
18:32 - and to and from Django does import time
18:35 - zone to reference pythons standard
18:37 - date/time module on Django's time zone
18:39 - related utilities respectively save
18:43 - these changes and start a new Python
18:46 - interactive shell by running Python
18:47 - manage that py shell again now because
18:50 - we didn't make any changes to the models
18:53 - we just added new methods we don't have
18:56 - to migrate this to our database all we
18:59 - need to do is just like exit out of this
19:01 - shell and just like come to it again I'm
19:04 - gonna do exit open closed paren and I'm
19:06 - just gonna do Python manage that py
19:08 - shell again and then let's see if we can
19:14 - get that command
19:15 - yeah front pulls out models so basically
19:19 - from this file pulls dot models I'm
19:22 - importing this class question and this
19:25 - this model choice model both our models
19:29 - classes whatever and make sure our
19:33 - string our addition is working ok so now
19:36 - what we're gonna try to do is do the
19:37 - same thing except this time it's not
19:39 - gonna show us question whatever is gonna
19:42 - actually show us the text of each
19:43 - question so there you go what's up
19:46 - what's new what's poppin ok much easier
19:49 - for us to see this okay
19:52 - so again think of it like if you had a
19:54 - fighter database instead of it saying
19:55 - fighter one fight or two fight or three
19:57 - it show it to you as
19:59 - can Ryu and like Sagat Gengo provides a
20:05 - rich database lookup API is entirely
20:07 - driven by keyword arguments okay so you
20:09 - can do something like hey I want you to
20:12 - filter by where the ID is one so it'll
20:15 - give me that specific question only or I
20:16 - can say filter by ID - and it'll give me
20:19 - the question that has idea of - okay
20:21 - or I can filter by question text that
20:24 - says new inside of it or what's new
20:27 - inside of it just like it's showing me
20:31 - here like if so let's try this one okay
20:34 - so question text starts with what okay
20:38 - so let's see so far all of these start
20:41 - with the what so it's gonna show us all
20:43 - three but what if I do
20:45 - instead of starts with I say contains
20:48 - and I say open okay there's only one
20:54 - question that's a that contains that
20:56 - okay then later we can provide a
20:58 - front-end to our client where you can
21:01 - links in the search bar type it in but
21:04 - on the back end we're using this
21:06 - contains method to find the exact thing
21:10 - that you need and then return there's a
21:12 - response from our HTML file get the
21:17 - question that was published this year
21:19 - okay so let's get the question I was
21:21 - published this year we're gonna do this
21:23 - we're gonna say current year is timezone
21:26 - now that year so that's gonna get
21:29 - basically 2018 right if I do current
21:32 - year it'll say 2018 and question that
21:36 - objects that get where the publication
21:39 - date year is the current year okay so
21:44 - let's do that get returned more than one
21:52 - question it returned three so because we
21:54 - have multiple questions instead of one
21:58 - ours is gonna be different than theirs
22:01 - very slightly okay so four hours since
22:04 - it matches all of them and gets like yo
22:06 - what's going on I'm matching all of them
22:07 - so but nothing to worry about it's still
22:10 - working for us
22:12 - if you request an ID that doesn't
22:15 - doesn't exist it will raise an exception
22:16 - so for us we do have ID too so it won't
22:19 - raise an exception but like let's say
22:21 - that we try to find something with an ID
22:23 - of four or five sorry we have to do get
22:30 - it's gonna raise an exception okay also
22:39 - for this
22:39 - let's try so what would happen if
22:42 - instead of that get we use filter would
22:44 - we get an error or would we get
22:46 - something in return we would get
22:48 - something in return which is like all of
22:50 - these that match it okay so the
22:52 - difference between filter is like return
22:54 - everything that matches and get is like
22:57 - get one and if more than one matched and
23:00 - like throw an error or something like
23:02 - that
23:04 - okay so look up by a primary keys the
23:09 - most common use case so Django provides
23:11 - a shortcut for a primary key lookups a
23:14 - falling question the falling is
23:15 - identical to questions that objects that
23:18 - get ID so PK which is a primary key okay
23:22 - so every model will have a primary key
23:27 - so for example question will have a
23:30 - primary key choice will have a primary
23:32 - key and think about this is like let's
23:34 - say you have a database with people in
23:37 - it right or employee names well what if
23:40 - you have two john smith employees right
23:43 - out of a hundred employees or but if you
23:44 - have two apple watches in your ecommerce
23:46 - store that you're selling that have the
23:48 - same name or the two people that have
23:50 - the same name how are you gonna
23:51 - differentiate what if they have the same
23:54 - email address or whatever right so you
23:56 - need one thing that's always always
23:58 - always always unique so if you can't
24:00 - rely on their first name last name or
24:02 - email address or whatever else one thing
24:04 - you can always rely on is a primary key
24:07 - it could be a automatically generated
24:10 - key from Python and could be like random
24:14 - words or whatever right Django will
24:17 - handle the primary keys for you
24:19 - everything will have a primary key even
24:21 - if it doesn't show it to you on the back
24:22 - end this way you can always find
24:25 - you know the unique way of referring to
24:28 - something okay all right so let's go
24:36 - here saying that make sure our custom
24:38 - method worked
24:39 - so it says cute objects I got peak it
24:42 - one okay so basically what I'm gonna do
24:44 - is go here and say hey get me the object
24:50 - where the primary key is one and save it
24:53 - as cue and now I'm gonna ask if q was
24:56 - published recently okay
24:59 - and it says true okay cool so that's the
25:04 - result we got give the question question
25:07 - a couple of choices the create call
25:10 - constructs a new choice object does
25:12 - insert statement as the choice is set
25:14 - available choice and returns a new
25:16 - choice object Jango creates a set to
25:20 - hold other side of foreign key relation
25:21 - question show between we access via the
25:24 - API alright so we're gonna do this guy
25:27 - again if you haven't done so already
25:32 - display any choices from the related
25:34 - objects set so we don't have any choices
25:37 - so far okay
25:38 - we're right now basically voting for
25:42 - questions kind of like you can upvote
25:45 - comments on YouTube so now we're gonna
25:49 - create three choices so queue that
25:53 - choice set dot create so we're gonna
25:55 - take a question which is our first
25:57 - question which was like what's up and
26:00 - we're gonna create choice text is equal
26:03 - to not much with zero votes okay and you
26:09 - can see choice has a field called votes
26:11 - and then it has choice texts so our
26:15 - first answer to that question what's up
26:18 - it is not much but we're saying like
26:21 - look it only has 0 votes okay
26:31 - okay and now we're gonna create another
26:35 - choice but called the sky what's up the
26:40 - sky I mean guess that's kind of funny
26:42 - I say the ceiling and then here's
26:46 - another one that is and we're gonna
26:49 - restore this one actually SC oh okay
27:05 - there we go okay so now choice objects
27:12 - have API access to their related
27:14 - question objects okay so now if I do see
27:16 - dot question so even though I've created
27:21 - this model from choice you know you'd be
27:24 - looking at it be like hey how does it
27:26 - have access to the specific question
27:28 - like how did it access this field here's
27:32 - how I did it because we're saying in
27:33 - this question go to the foreign key and
27:37 - the foreign key is this model over here
27:40 - when I do choice that question it'll go
27:45 - and get the question from up there
27:46 - that's essentially what it's doing okay
27:48 - so that's what when I do see that
27:50 - question that's what's happening it's
27:52 - referencing and getting me back this
27:55 - object okay and vice versa so you can
27:59 - also reference from question you could
28:01 - reference choice question objects get
28:05 - access to choice objects okay so they
28:07 - both have access to each other kind of
28:10 - like you can have a book and you know
28:13 - like who was the author of this book so
28:16 - that relation goes to the author and
28:18 - then you can say like this author has
28:21 - which books and it can relate back to
28:23 - the books alright so now we're gonna see
28:28 - how many choices we have and so we have
28:31 - not much is one choice the other one we
28:36 - have is the sky and then the other
28:39 - choice that we have is
28:40 - just hacking again all of these have
28:42 - zero votes as we see right here and
28:46 - we're gonna say Q dot choice underscore
28:49 - set dot counts so this is just a count
28:55 - that there are actually three choices
28:58 - the API automatically follows
29:01 - relationships as far as you need use
29:03 - double underscores to separate
29:05 - relationships this works as many levels
29:07 - deep as you want there's no limit find
29:09 - all choices for any questions whose
29:11 - publication date is in this year reusing
29:14 - the current year variable we created
29:15 - above okay so I can say choice that
29:19 - objects are filter question double
29:22 - underscore means like you are kind of
29:26 - going backwards
29:27 - so we're saying question and then we're
29:31 - going publication date okay so actually
29:34 - we're going this question here and then
29:36 - we're going to publication date and then
29:38 - checking the getting the year of that
29:41 - publication date okay so let's try that
29:45 - right over here so it's gonna get us all
29:49 - the questions that are from this current
29:52 - year so it should get us all three of
29:56 - these let's delete one of the choices
29:58 - use delete for that so now what I can
30:01 - say is I can get the question that
30:05 - starts with just hacking right and how
30:09 - do I do that I say cute a choice set da
30:12 - filter by we're choice text starts with
30:17 - just hacking okay so it's only gonna get
30:21 - one question that has just hacking in
30:23 - there and if I do see you'll show you
30:25 - which one it is and now to delete it all
30:27 - I do is C dot Tooley again I'm copy
30:32 - pasting copying and pasting for time
30:35 - purposes saving time but for yourself
30:39 - like take the time to actually write all
30:42 - of this out okay this is very very
30:44 - helpful for you so now that I deleted it
30:48 - showed me that it's deleted and if we
30:50 - actually check again right
30:54 - it'll only show us these two choices
30:56 - right here okay now we're gonna get into
31:03 - a pretty exciting part which is
31:05 - introducing the Django admin and we're
31:08 - actually gonna just touch on it a little
31:10 - bit and let's get started this is a
31:13 - super cool part philosophy for
31:16 - generating admin sites for your staff or
31:18 - clients to add change and delete content
31:21 - is tedious work that doesn't require
31:23 - much creativity okay
31:25 - it's usually like a pretty rinse and
31:27 - repeat process it's frustrating it's
31:30 - boring you can make mistakes it takes a
31:34 - lot of time and development and which
31:37 - means like ill cost your client a lot
31:39 - and it slows down your development speed
31:43 - for that reason Django entirely
31:45 - automates creation of admin interfaces
31:47 - for models okay so let's check it out
31:52 - the admin isn't intended intended to be
31:55 - used by site visitors it's for site
31:58 - managers okay so now we're gonna create
32:00 - an admin user I'm gonna do Python manage
32:03 - that py create so we're gonna exit out
32:06 - of this I'm gonna do Python and use that
32:08 - py create super user and I'll leave this
32:13 - blank I'll use this email
32:19 - and even though it's not gonna show you
32:22 - anything here it's still typing in your
32:24 - password so don't worry about that okay
32:28 - so you can put in whatever as your email
32:31 - whatever as your username and now the
32:34 - final step is to answer your entry your
32:36 - password I have and now lets us start
32:38 - the development server so we're gonna do
32:40 - just that I'm gonna start the
32:41 - development server
32:42 - we're gonna go to Chrome we're gonna go
32:45 - to our local app on 127 0.01 colon 8000
32:51 - port instead of polls I'm actually gonna
32:54 - go to admin and when I go to admin look
32:57 - it brought up this nice interface that
33:00 - you and I did not make we didn't make
33:03 - this beautiful looking form where when
33:06 - you hover over login it like turns dark
33:09 - and looks good and we didn't add
33:15 - functionality that adds security right
33:19 - we didn't add this thing where passwords
33:21 - automatically looks like dots so nobody
33:24 - can see it all of this keep in mind is
33:26 - just automatically generated when I
33:29 - click login boom here's the
33:32 - administrator interface okay so as the
33:35 - admin you can change your password you
33:37 - can log out you can check who are the
33:40 - users so here's one user you can like go
33:43 - into this user and like delete this user
33:45 - or change the permissions of this user
33:51 - right so you can go and be like boom
33:52 - it's not a super user anymore or it's
33:55 - not a staff anymore it's not active
33:57 - anymore or you can go in here and like
33:59 - change all kinds of permissions like can
34:01 - delete choice can add a question but
34:03 - cannot like delete a question can change
34:06 - a session but cannot delete a content
34:09 - type you know you can get like as
34:11 - specific with it as you want and this is
34:16 - just for the model that we have
34:18 - registered users but imagine later when
34:20 - if we register our choice model and
34:23 - whatever those will all show up right
34:25 - over here and any in recent actions that
34:27 - you do actually show up on the right
34:29 - hand side so imagine like somebody
34:31 - deleted something you're like
34:32 - what the hell happened like one part of
34:35 - our app or this website is now broken
34:38 - well if you go into recent actions
34:40 - you'll see what took place and exactly
34:42 - who did it and who'd hold responsible
34:44 - for that I think that's pretty cool
34:46 - right and it comes built-in right out of
34:48 - the gate that's one of the reasons why
34:50 - Django is such a powerful tool and it
34:53 - fosters productivity and effectiveness I
34:58 - believe over any other framework right
35:01 - and that their tagline which is awesome
35:04 - its Django is for perfectionists with
35:07 - deadlines and that's what I believe in -
35:09 - like if I have to put a project together
35:11 - and I'm doing something solo I'm going
35:13 - Django all day baby but you know if
35:17 - you're working on some long-term project
35:19 - you know you're gonna be doing for a
35:21 - long time and nothing else really
35:24 - matters then yeah you can choose
35:25 - whatever you want but I like speed I
35:27 - like productivity I like to take my
35:29 - ideas from my head and launch them
35:30 - online fast alright with that said let's
35:34 - go back and see what they're saying so
35:37 - we go to our admin enter the admin site
35:40 - and now it says make the pull app
35:43 - modifiable in the admin how do we do
35:45 - that we're gonna take these three lines
35:47 - of code so I'm gonna go into my pull
35:49 - slash admin and this line is already
35:54 - added so I'm not gonna add it in from
35:56 - dot models import question okay so
36:01 - basically what I'm saying is from this
36:04 - directory get the models so right here
36:09 - and import the class question from the
36:12 - models okay so import the question model
36:15 - and then I'm gonna say register that
36:20 - model inside of admin so check out what
36:23 - happens okay this is super super cool
36:26 - check it out I'm gonna hit save and
36:31 - let's go back to our app and let's hit
36:35 - refresh and look at that it's here so
36:38 - that questions model is the one we made
36:41 - it shows under polls questions and you
36:44 - can see all of those questions what's
36:46 - poppin what
36:46 - new you can go in and you can change the
36:48 - text I can change it to like what's
36:52 - cracking right I can hit save and now
36:58 - it's changed and if I go to my if I
37:01 - start Python manage that py shell from
37:07 - polls dot models import question
37:14 - question dot objects all right look it
37:20 - says what's cracking so what we actually
37:23 - changed from the GUI interface with our
37:25 - mouse and our keyboard is now showing up
37:29 - in our database in our local database
37:31 - the sequel Lite database actually being
37:34 - stored on our computer this database is
37:35 - not online yet so pretty freakin cool
37:39 - right how quickly and how effectively it
37:42 - works so I'm going to exit out of this
37:44 - I'm gonna run my server again and we're
37:48 - gonna go back to the app refresh cool
37:51 - and like let's see what they're saying
37:53 - now that we have registered question
37:55 - Django knows that it should be displayed
37:58 - on the admin index page and it is right
38:01 - and I showed it to you and we went
38:02 - inside of it and we saw question text
38:04 - and we saw a date published and we can
38:06 - actually change the date published and
38:08 - everything now things to note here the
38:10 - form is automatically generated from the
38:13 - question model so this form is
38:16 - automatically generated we didn't eat
38:18 - generate anything the different model
38:20 - fuel types daytime filled and car filled
38:23 - so remember we had one of the models as
38:27 - a date time filled and the other one is
38:29 - car filled and you can see where it says
38:31 - date published look date field right and
38:34 - for question text is just a straight-up
38:36 - character field or what you know in
38:38 - Python to be as a string these
38:42 - correspond to the appropriate HTML input
38:45 - widget each type of field knows how to
38:47 - display itself in the Django admin
38:49 - pretty cool each date/time field gets
38:52 - free Java Script shortcuts woohoo free
38:55 - Java Script shortcuts that's awesome to
38:58 - normally you'd have to write
39:00 - javascript for all this stuff but like
39:01 - look at this okay so let's say I go to
39:02 - what's cracking and I click here boom
39:05 - look at this beautiful day time picker
39:08 - thing opens up and you could pick today
39:10 - or you could pick another date and like
39:12 - automatically pick it and you could pick
39:15 - the time and that's cool this is this is
39:18 - something you'd have to write a lot of
39:19 - manual JavaScript for that's
39:21 - automatically written for you dates get
39:26 - a today shortcut and calendar pop-up and
39:28 - times get a now shortcut and convenient
39:30 - pop-up that lists commonly entered times
39:32 - the bottom part of the page gives you a
39:34 - couple of options right so save saves
39:37 - changes and return so the change list
39:39 - page for this type of object so you can
39:41 - do save or you can do save and continue
39:43 - editing so continue editing the same
39:45 - page or you can do save and add another
39:47 - so add a new question and go write or
39:50 - you can do delete which displays a
39:52 - delete confirmation page so check this
39:54 - out okay normally when you hit you have
39:57 - to add all this functionality plus when
39:59 - you hit delete you have to then remember
40:01 - to add a confirmation thing to it and
40:04 - they have it automatically so if I had
40:05 - delete it'll be like are you sure you
40:08 - want to delete the question what's
40:09 - cracking all of the following or related
40:12 - items will be deleted questions one so
40:15 - only one question and objects what's
40:18 - cracking you can say yes I'm sure
40:20 - or no take me back now notice it's
40:23 - showing the question as what's cracking
40:25 - that's because of your string method
40:27 - that you added your STR method if you
40:29 - did not have that it would not show like
40:32 - what's cracking it was show like
40:34 - question one and you would just have to
40:36 - use your memory to remember that I'm
40:37 - gonna say no take me back and it'll take
40:39 - me back okay cool
40:41 - oh let's go back let's see what they're
40:44 - saying here and then if the value of the
40:48 - date publish doesn't match the time you
40:49 - created it probably means you forgot to
40:51 - set the time we can also set the current
40:55 - time zone right so it's not a big deal
40:57 - if I go in history here it says I
41:01 - changed at 3:00 a.m. it's not 3:00 a.m.
41:03 - right now so that means like I need to
41:05 - go inside of my settings and in my time
41:08 - zone and change
41:09 - what my time zone is so for example I
41:12 - think there's like America / Los Angeles
41:17 - something like that Oh actually work
41:21 - sweet for yourself just look up like
41:24 - time zone
41:27 - Django time zone settings and then find
41:30 - yours and put that in for me I put this
41:32 - in and it fixed my time instantly right
41:35 - okay so yeah essentially that's it for
41:41 - part two I hope you thought it was
41:43 - phenomenal
41:44 - I mean this this is so cool you guys and
41:47 - Django is just so powerful so that's it
41:50 - for this part guys I really hope you're
41:52 - excited about this thing we're gonna go
41:54 - on to part three but before I end this I
41:57 - do gotta let you know that if you are
41:58 - serious about web development becoming a
42:01 - web developer that gets paid what--he's
42:03 - does what he deserves you want to learn
42:05 - more in depth about Django and take your
42:07 - game to the next level I have my new
42:10 - course coming out it's called the
42:12 - profitable programmer I only open it up
42:14 - a couple of times in a year okay so it's
42:17 - a pretty exclusive course if you want to
42:19 - join it go to this link or I'll have it
42:22 - below in the description as well and
42:25 - join the VIP waitlist which is free to
42:29 - join you'll be the first one to know
42:31 - when the course opens up and plus as my
42:33 - gift to you I'll give you the top
42:35 - resources I use to become a software
42:37 - developer in less than three months okay
42:40 - and you're gonna have access to that for
42:44 - free okay all of that I'm gonna give it
42:46 - to you as a gift to join the VIP
42:48 - waitlist that's it for this video and
42:50 - I'll see you in the next video for those
42:55 - of you guys wondering what the hell is
42:56 - this choice top set thing it actually
42:58 - comes built-in and you can actually
42:59 - change that by passing in a related name
43:02 - keyword argument when you're creating
43:04 - the question attribute and you could
43:07 - give it whatever name you want