00:01 - what is uh people of the world
00:04 - how are you doing this fine morning
00:07 - we left off at infinite loops oh where
00:11 - are my manners
00:15 - this is qazi from cleverprogrammer.com
00:18 - and you are watching codecademy python
00:21 - tutorial
00:23 - number 21 okay
00:25 - awesome now that we got out of the way
00:28 - how are you doing hopefully you're doing
00:31 - awesome
00:35 - we
00:36 - back to where we were supposed to be we
00:38 - are part five infinite loops okay we
00:41 - just finished talking about infinite
00:42 - loops
00:44 - infinite loops was this concept of
00:46 - horrible destruction and your code
00:49 - running forever
00:51 - i showed you that my browser just
00:52 - crashed and that was terrible and it can
00:55 - cause problems in your computers too
00:58 - however it's fun you can do that to your
01:00 - friends write the
01:02 - uh open up their terminals write an
01:04 - infinite loop and then watch them
01:06 - struggle
01:07 - um
01:09 - but don't do that to maybe you're really
01:10 - close do that maybe two only you're
01:12 - really close friends not your
01:13 - acquaintances
01:16 - so we found out what's wrong with
01:18 - infinite loops and what are some common
01:21 - errors that can cause it for example not
01:23 - paying attention to if this is a less
01:26 - than sign or greater than sign right
01:30 - not paying attention to whether you're
01:32 - incrementing it and
01:33 - decrementing it
01:35 - that can cause a problem right for
01:37 - example if you want to go if you want to
01:39 - go less less less less less to meet your
01:41 - condition let's say you got to get all
01:42 - the way down to zero and you're
01:44 - currently at 10 you want to keep going
01:46 - and reaching zero so you want to
01:48 - decrement right go down to zero
01:51 - but if you get confused and you write a
01:53 - plus one there and you keep going 10 11
01:55 - 12 13 14 and so on and so forth now
01:57 - you're going in the wrong direction
01:59 - you're gonna run an infinite loop okay
02:02 - let's click start next lesson
02:05 - break
02:07 - so here we're going to talk about breaks
02:09 - breaks generally avoid them okay my
02:12 - advice to you generally means bad logic
02:15 - you didn't account for something
02:18 - can 99.99 percent of the times be
02:20 - avoided with the right logic
02:23 - however
02:24 - it's a simpler way to let you break out
02:27 - of things right
02:29 - it's sometimes useful if you really need
02:31 - to use it
02:33 - break is a one-line statement that means
02:35 - exit the current loop so yeah it just by
02:37 - it just forces the loop to end without
02:40 - relying on some kind of logic it just
02:41 - goes break okay
02:44 - so here what we're saying if i'm reading
02:46 - this code is
02:47 - a while true which means just run
02:50 - forever there's nothing that can change
02:52 - this true right you it's not a variable
02:54 - you can't say
02:55 - right you can't go true it
02:57 - true is equal to false that won't work
03:00 - it's kind of like saying 5 is equal to
03:02 - false you can't assign to these things
03:06 - and it'll just keep running forever okay
03:09 - so
03:10 - actually let me check if i'm what i'm
03:12 - saying is actually true
03:16 - yeah so it's a keyword you can't assign
03:18 - to a keyword okay
03:21 - now
03:22 - what happens in this loop well we print
03:25 - count count is zero the first time then
03:27 - we increment count by one
03:29 - and then we check hey is count greater
03:31 - than or equal to 10 meaning it's count
03:33 - 10 or 10 11 12 13 all up to infinity
03:37 - it goes no that's not the case because
03:40 - count is zero the first time right so
03:43 - it's zero
03:44 - and
03:45 - this condition evaluates to false which
03:48 - is why
03:49 - this part of the loop up with this part
03:50 - of this condition does not run if it did
03:53 - run it'll exit the loop
03:55 - eventually count keeps getting
03:56 - incremented we get it to be nine
03:58 - eventually count is 10. it prints out 10
04:01 - to the screen
04:02 - it says 10 is equal to 10 plus 1 which
04:05 - makes count 11.
04:07 - count is now 11. just just recall that
04:10 - plus equals is the same thing as count
04:12 - plus one
04:14 - okay that's how you should try to write
04:16 - it
04:17 - for now
04:18 - and here we're saying
04:20 - if 11 is greater than or equal to 10
04:23 - this is a true statement we break and we
04:26 - end the loop okay that's what that means
04:30 - so
04:33 - first create a blah blah the simplest
04:36 - way shown
04:37 - using an if statement you define the
04:39 - stopping condition so here's our
04:40 - stopping condition but do notice we
04:43 - still have a stopping condition that
04:44 - we're using here right
04:46 - and inside the if you write break
04:48 - meaning exit the loop break just means
04:51 - exit the loop the difference here is
04:53 - that this loop is guaranteed to run at
04:55 - least once
04:56 - so this is a way you can guarantee to
04:59 - run a loop at least once kind of like
05:01 - do while loop in java or c
05:04 - c plus plus
05:07 - because
05:08 - remember sometimes your loop might not
05:10 - run at all right like if you had a
05:11 - condition while count is greater than 10
05:15 - what if count was a hundred
05:18 - your loop will not run
05:20 - so if you wanted your loop to run
05:22 - definitely at least one time for
05:25 - whatever reason
05:26 - then this would be the way to go about
05:28 - it i still don't like it
05:30 - you should try to avoid it
05:32 - see what the break does feel free to
05:34 - mess around with it but make sure you
05:36 - don't cause an infinite loop click save
05:38 - and submit code when you're ready to
05:39 - continue let's save and submit
05:42 - so we've figured out what it does
05:44 - while slash else so you can combine an
05:47 - else statement with the while loop this
05:49 - is actually something
05:52 - for some reason i recently learned
05:56 - because it's pretty esoteric at least i
05:58 - don't see it much being used
06:00 - and i was solving a problem programming
06:03 - problem and i saw that you can combine
06:06 - the else statement with a while loop you
06:08 - can also combine an else statement with
06:11 - a for loop just like um you can combine
06:14 - else with the if statement so how does
06:16 - how that works is
06:18 - if the while condition is ever false and
06:21 - you break out of the loop then you just
06:23 - run the else part
06:25 - okay
06:27 - so let's check it out and how it works
06:30 - so we're gonna
06:31 - just run it a few times sometimes before
06:33 - you even read it if you know
06:37 - generally it's a good idea to try to
06:38 - walk through it before you run it but
06:40 - sometimes just run it and see what it
06:42 - does and then you can start to get an
06:44 - idea of it
06:46 - all the print statements right these are
06:48 - python 2 print statements i'm converting
06:50 - it to python 3 so we can run it properly
06:54 - let's check it out
06:55 - print another print statement
06:59 - okay
07:01 - hopefully
07:02 - all right lucky numbers three numbers
07:04 - will be generated if one of them is a
07:05 - five you lose one three six none of them
07:08 - was a five
07:10 - two four two we win two one two six we
07:13 - win
07:14 - four one four we went geez it's never
07:16 - five huh
07:19 - okay sorry so we finally lost
07:23 - how does this work
07:25 - okay
07:26 - so
07:27 - let's come down to the part where it
07:29 - says
07:31 - while and the else part
07:34 - okay
07:35 - so if count is not less than three right
07:38 - if this statement ever evaluates to a
07:42 - false right then what happens what if
07:45 - count is currently
07:47 - not less than three but three itself
07:50 - that means the loop has already run
07:52 - how many times
07:55 - three times right i think they do that
07:57 - in german or something or when they ask
07:59 - for drinks or whatever they go like this
08:01 - like get me three drinks
08:04 - i don't know they do that somewhere
08:05 - correct me
08:06 - um
08:08 - i'm a little geographically challenged
08:10 - so
08:11 - okay so
08:12 - zero one
08:14 - and two is effectively runs three times
08:16 - so if the while
08:18 - the count ever gets to three from zero
08:19 - that means it's run three times already
08:22 - and then it goes while three is less
08:23 - than three three is not less than 3 that
08:25 - evaluates to a false so then it sends
08:27 - you to the part where it says you win
08:29 - okay
08:31 - so here's how it works
08:33 - if
08:35 - we randomly generate a number between 1
08:38 - and 5
08:39 - rand int the function randint right here
08:43 - randint it does not include the
08:45 - endpoints it goes from the start up to
08:48 - but not including the last part
08:50 - for example if i copy this code and i
08:54 - open up my python terminal doesn't
08:56 - matter 2.7 python 3.4 it does not matter
09:02 - and i just run this right so i import
09:04 - the random module that
09:06 - people wrote while getting their
09:07 - relationships destroyed and eating ramen
09:09 - noodle in hundreds and thousands of
09:11 - hours
09:12 - you just stole their code by writing in
09:14 - one line
09:16 - oh um
09:18 - the other way random ran in does include
09:21 - it ran range
09:23 - does not include it okay so you'll never
09:25 - get a six if i do two here you'll never
09:28 - get a two you'll just get a one forever
09:30 - so randint actually does include it
09:35 - what i should like learn my python right
09:38 - i don't understand it so again these are
09:40 - one of those things i'm glad these these
09:43 - things get caught on camera and i won't
09:45 - edit them out because this is so common
09:48 - right they asked einstein
09:51 - how many feet are in a mile and he goes
09:53 - i don't know
09:54 - and he says i don't care because i don't
09:57 - want to use my brain to memorize
10:00 - a bunch of irrelevant facts i want to
10:02 - use it to think so here
10:05 - i don't want to just memorize everything
10:07 - usually what programmers do is
10:09 - even programmers who program every day
10:12 - you know
10:13 - and we do it as a job
10:16 - will if all almost always go and look it
10:19 - up some documentation just to make sure
10:21 - that what they're doing they're doing it
10:22 - correctly okay so these things
10:25 - not everybody has them memorized so
10:27 - that's why you refer to the
10:28 - documentation and just double check so
10:30 - anyways this will guess a number from
10:33 - one to six including one and six
10:35 - then it gets printed out if that number
10:37 - that was guessed was five then it goes
10:40 - you lose and it breaks out of the loop
10:41 - and everything stops
10:44 - if this uh and then
10:46 - after all of that it just increments
10:48 - count by one okay
10:50 - so if
10:51 - obviously this if condition hasn't run
10:54 - if count ever gets incremented by one
10:56 - obviously the if condition hasn't run
10:57 - because if it had the loop would have
10:59 - been over and you would have never
11:01 - gotten to line 14.
11:03 - then it goes again generates a number if
11:05 - it was not five then it increments count
11:08 - by one if it was not five again it'll
11:10 - increment count by one eventually when
11:12 - count is first time count is zero then
11:14 - it's one then it's two
11:16 - and if it hasn't met this if condition
11:20 - and uh it hasn't evaluated to true for
11:23 - the first three times of the loop
11:25 - then you
11:26 - this part evaluates to a false and you
11:29 - get to the else part of the loop and it
11:31 - says you went okay
11:35 - so
11:36 - let's go
11:39 - back
11:41 - and just run it
11:43 - so we made sure we understood it then
11:45 - just run it and go okay all right we're
11:47 - done
11:48 - your own while
11:49 - else so now we write our own now you
11:51 - should be able to make a game similar to
11:53 - the one in the last exercise the code
11:55 - from the last exercise is below
11:57 - so you guess guess guess if you don't
12:00 - guess correctly you lose eventually
12:02 - after a certain number of times
12:05 - uh and you do guess is equal to intra
12:07 - input which means that i take your input
12:11 - and i convert it to a string right so
12:14 - here
12:17 - right instead if i did int
12:20 - it won't actually show you but if i do
12:25 - let's say user
12:27 - is equal to this
12:29 - and i say five and i do type of user so
12:32 - what type of
12:34 - what was the type of the answer and if i
12:36 - just print that user it'll show you that
12:37 - it's five and it says the type is int
12:40 - but if i don't wrap it in integer
12:42 - function
12:44 - then what it shows you effectively is uh
12:47 - if i do user it shows you that it's a
12:49 - string five
12:51 - right and if i do type of user
12:53 - and it's a string type not an type which
12:56 - is why you need to wrap it into an
12:58 - integer function
13:00 - remember raw input turns user input into
13:03 - a string we use int to make it a number
13:06 - again okay so that's essentially what's
13:09 - going on there
13:10 - use a while loop to get the user
13:13 - to let the user keep guessing so long as
13:15 - guess is left is greater than zero so
13:17 - while is greater than zero keep running
13:19 - which means that we're probably going to
13:21 - be decrementing it every single time
13:23 - right just to think about it if guess is
13:25 - left is three next time guess is left is
13:27 - two then it's one then it's zero
13:30 - meet some kind of condition and then
13:31 - loop should stop
13:34 - ask the user for their guess just like
13:36 - the example above if they guessed
13:37 - correctly print break
13:40 - let's start coding this up so we're
13:42 - going to say while guesses
13:44 - left is greater than zero
13:48 - and i'm just gonna write this part right
13:49 - here for now left minus equal one
13:52 - sometimes i just write this part right
13:54 - away
13:55 - so i know my loop will stop at some
13:58 - point because i do know i want to make
14:00 - it stop and i don't want an infinite
14:01 - loop so i write my breaking condition
14:04 - right away and then i'll like most of
14:06 - the times write my code in between that
14:08 - so i'll write my code for example now
14:10 - here because i know i'm safe and my loop
14:13 - will stop
14:15 - okay so use a
14:17 - all right ask the user for their guess
14:19 - i'll say guess
14:20 - is equal to ant raw input
14:24 - and i will say please enter
14:28 - your guess
14:31 - this little space is nice so user can
14:33 - type when the user is about to type
14:35 - their cursor is blinking where my cursor
14:37 - is right now but if i didn't have the
14:39 - space their cursor would be where my
14:41 - cursor is right now that would look
14:42 - weird i also put the colon here because
14:44 - sometimes people will do this
14:47 - and it's weird when it says please enter
14:49 - your guess
14:50 - end of sentence and you're typing right
14:52 - there it's a little confusing so colon
14:54 - makes more sense it's a better user
14:57 - interface
14:58 - two parentheses to close off the right
15:00 - input function parentheses and then the
15:03 - second parenthesis to close off the
15:05 - integer int function parentheses okay
15:09 - if they guess correctly print you in
15:12 - okay so if guess is equal equal
15:16 - to uh the random number that was
15:19 - generated
15:20 - then print
15:23 - you win
15:24 - okay
15:26 - and then break out of the loop
15:32 - okay else
15:34 - print
15:37 - you lose
15:41 - okay
15:42 - so this part what happens it keeps
15:44 - running and then once the
15:46 - the wild condition evaluates to once the
15:49 - wild condition evaluates stuff falls it
15:51 - prints out this part let's step through
15:53 - the code line by line guess is this so
15:56 - the user gets to type in something once
15:58 - that user types in something it goes
16:01 - hey
16:02 - let me see if your guests match the
16:04 - random number that i picked from 1 to 10
16:07 - inclusive
16:08 - so let's say the random number was 5. so
16:11 - it goes let's see if you put in 3 is
16:12 - that equal to 5 nope so
16:16 - it does not break out of the loop and it
16:17 - also does not say you win so we keep
16:20 - going you get to guess again and it
16:22 - decrements guesses left by one so
16:24 - guesses left initially was three then
16:26 - the next time will be two
16:28 - it goes here asks for the user input
16:31 - you put in a guess
16:33 - it checks if your guess was equal to the
16:35 - random number which again was probably
16:37 - five right
16:38 - we're not changing random number every
16:40 - time
16:41 - we picked it to be five initially and it
16:44 - stays as
16:46 - five the entire time the only thing is
16:47 - changing is guesses now let's say you
16:49 - guessed four
16:51 - so this part evaluates to false so it
16:53 - does not run the that block here goes to
16:55 - line 13. decrements guess is left by one
16:57 - so now guess is left uh goes from two to
17:00 - one
17:01 - eventually when guess is left is zero
17:04 - zero is not strictly greater than zero
17:06 - that evaluates to a false
17:09 - which means we go to the else part and
17:11 - uh you know none of this block of code
17:13 - runs we go to the else part and it just
17:15 - says you lose
17:16 - okay
17:17 - so that is it for that let's check it
17:20 - out
17:21 - uh please enter your guess
17:24 - we'll say three
17:26 - oh look at that i guess correctly the
17:27 - first time
17:29 - so the random number was actually three
17:31 - i had a one out of
17:34 - ten chance or sorry
17:36 - one two three
17:38 - one two three yeah yeah i'm not gonna
17:40 - count it i do know it's actually ten so
17:42 - i had a one out of ten chance to guess
17:44 - it right and i did all right
17:48 - now for loops
17:51 - so we just ended the section on while
17:53 - loops that's great
17:56 - so i think a perfect thing to do here is
17:58 - actually just end this video because
18:01 - we've completed a while loop section
18:04 - this way you get to practice some while
18:06 - loops in the comments below you can also
18:08 - put some while loops that you have made
18:10 - like actually put them down there and
18:12 - i'll comment and i'll tell you if
18:13 - they're wrong or if they're right or if
18:15 - they're cool and they'll also give other
18:17 - people an idea of what to do okay
18:20 - that way you guys can collaborate right
18:22 - here
18:23 - and
18:24 - if you um yeah so we're gonna continue
18:26 - from the next one so this is it this is
18:29 - qazi from cleverprogrammer.com if you
18:31 - enjoyed the video please give it a
18:32 - thumbs up subscribe make sure to
18:35 - subscribe so you can keep getting these
18:37 - amazing videos
18:38 - other than that i will see you in the
18:41 - next video codecademy python tutorial
18:43 - number
18:44 - 22. whoosh