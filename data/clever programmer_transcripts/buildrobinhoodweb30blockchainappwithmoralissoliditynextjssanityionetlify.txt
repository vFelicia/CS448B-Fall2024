00:00 - in this video you'll build the robinhood
00:02 - web 3.0 dap with nextgs and react i'm
00:05 - going to show you how to create your own
00:07 - smart contract with solidity we'll then
00:09 - use open zeppelin to ensure that your
00:11 - coins are actually compliant with erc20
00:14 - standard will even build a dex or a
00:16 - decentralized exchange that lets you
00:19 - actually trade tokens within your own
00:22 - app you'll use hard hat to actually
00:23 - compile and deploy your smart contracts
00:26 - we'll use morales to actually
00:27 - authenticate every single user that
00:30 - signs in we'll also use morales to
00:32 - interact with our smart contract and
00:34 - morales is basically a web3 platform
00:37 - that lets you interface with smart
00:39 - contracts and things like solidity in a
00:41 - really easy fashion and pretty much with
00:43 - like one line of code you could have a
00:45 - bunch of your app already working with
00:46 - your authentication already working
00:48 - we'll use the context api to manage our
00:50 - state inside of react we'll use sanity
00:53 - io as our database to store our users
00:56 - information and transactions after
00:58 - they've logged in you'll be able to view
01:00 - and confirm any of these transactions
01:03 - over ether scan to find out that they
01:05 - are 100 real once again we'll be using
01:08 - the rinkybee test network which is built
01:10 - on the ethereum blockchain last but not
01:12 - least we'll then deploy this app using
01:15 - netlify to the interwebs meaning your
01:18 - friends and your buddies can go and
01:20 - actually go to the website blah blah dot
01:22 - com and actually open an interface with
01:25 - your own dap so if you don't know what a
01:28 - dap is dap stands for a decentralized
01:30 - app and it's another way of saying oh
01:31 - app but that's just web three so your
01:34 - very own dab deployed to netlify with
01:36 - all of this so i hope you're excited to
01:39 - get started
01:45 - right before we get started and start
01:47 - coding i just want to let you know that
01:48 - we're doing a collab with buildspace
01:50 - which is one of the best website
01:52 - education platforms in the world and you
01:54 - guys are going to be getting nft that
01:56 - proves you completed this project and
01:58 - it's going to be in collab with bill
02:00 - space and clever programmer it's going
02:01 - to look sick build space also has an
02:03 - incredible community of web3 developers
02:05 - who you can learn together with in their
02:07 - discord and they're very active last but
02:09 - not least build space is also helping
02:12 - new web3 developers like yourself get
02:14 - matched up with top tier companies like
02:17 - adidas or alchemy for premium high
02:20 - contracts and i'm talking about ten to
02:21 - twenty thousand dollars a month
02:23 - contracts and their vision is amazing i
02:25 - even met their ceo farza and he's just
02:27 - an incredible amazing human being so i'm
02:29 - really excited about this collab and the
02:30 - best part for you guys it's completely
02:33 - free all you have to do is just go down
02:34 - below click the link in the description
02:36 - it's gonna take you to a landing page
02:37 - and it's gonna ask you to connect your
02:38 - wallet and once you connect your wallet
02:40 - you're good to go and then when you do
02:41 - this build and you complete it that
02:43 - wallet will be able to verify you did it
02:44 - you'll get your own nft and you'll get
02:46 - the entire community and everything that
02:48 - goes with it okay so again it's
02:49 - completely free go ahead sign up for
02:50 - that right now and with that said let's
02:52 - just jump right into the video what is
02:54 - up guys welcome back to another video
02:56 - lance here again notice anything
02:57 - different i know we got the face cam
02:59 - today i'm not gonna waste any more of
03:01 - your time let's get started with the
03:02 - video the first thing i want you guys to
03:03 - do is to open up your terminal and let's
03:06 - create our project folder so our project
03:08 - folder i'm just going to write it out
03:10 - here let's call it robinhood clone
03:13 - blockchain okay cool once you make that
03:15 - folder cd into it by saying cd folder
03:18 - and if you didn't know we're gonna be
03:19 - making this project using next.js and to
03:21 - make an xjs app all you have to do is
03:23 - write the command and px create next app
03:27 - at latest make sure you put space dot
03:29 - because what this will do is take those
03:30 - starter next.js files and put it into
03:33 - the folder that we just created so i'm
03:35 - going to go ahead and hit enter putting
03:36 - on your computer this may take a couple
03:37 - of minutes to install to install all the
03:39 - dependencies that we need awesome so it
03:41 - looks like it's done installing all its
03:43 - dependencies and since we're here in the
03:45 - terminal let's set up the rest of our
03:47 - folders that we need so for now i want
03:49 - to set up our studio folder so i'm going
03:52 - to say make directory studio and in the
03:54 - studio folder this is where we're going
03:56 - to be setting up our database and of
03:57 - course we're going to be using sanity.io
03:59 - so make the studio folder and let's also
04:02 - make our smart dash contract folder if
04:05 - you guys watched our previous video the
04:07 - tinder clone we saw that in that folder
04:09 - we put all our solidity contracts so
04:11 - we're going to be doing that again today
04:12 - but way more solidity so if you enjoyed
04:14 - that stay tuned for when i code this up
04:16 - i'll teach you guys how to deploy those
04:17 - smart contracts onto the blockchain so
04:21 - i'm making a smart contract folder what
04:23 - we can do next is hop over to vs code
04:25 - and click open folder and make sure you
04:27 - open your project awesome and now by
04:30 - opening this folder you should see on
04:32 - the left hand side bar right here all
04:34 - the next jsf files along with the two
04:36 - folders that we created so next we can
04:38 - hop over to your browser and type this
04:41 - in the url i'm going to write sanity dot
04:43 - io slash clever programmer sanity is the
04:46 - database we're going to use and to get
04:48 - started with sanity they were very nice
04:50 - and gave us a couple commands on how to
04:52 - install it so the first thing you want
04:53 - to do if you don't have sanity installed
04:55 - is type in npm install dash g at sanity
04:58 - cli i already have it installed so what
05:01 - i'll do is i'll do the next line which
05:02 - is going to be this right here so
05:04 - opening your terminal in your vs code cd
05:07 - into your studio folder in your studio
05:09 - folder like i said this is where we're
05:11 - going to be setting it up so type in
05:13 - that command and initialize sanity by
05:15 - saying sanity init coupon space clever
05:18 - programmer by doing that you get the
05:20 - boosted free plan which includes all
05:22 - these nice stuff that sanity provided
05:24 - for us so thank you sandy what we're
05:26 - going to do is hit enter and by hitting
05:28 - enter it's going to recognize that
05:29 - you're going to make a sanity project so
05:31 - for the project name you can keep it the
05:33 - same name as our folder so i'm going to
05:34 - say robinhood clone blockchain awesome
05:37 - next is going to ask you a couple
05:39 - questions you're going to be saying yes
05:40 - to most of these so use the default data
05:42 - set configuration go ahead and say yes
05:44 - this is the project output you can go
05:46 - ahead and confirm and for the select
05:48 - project template make sure you click
05:50 - clean project with no predefined schemas
05:52 - i just want to make sure that it's clean
05:54 - and i can just write whatever schemas
05:55 - that i want to make so it's going to be
05:57 - resolving those dependencies which also
05:58 - might take a second depending on your
06:00 - computer all right so looks like it's
06:01 - done installing its dependencies and
06:03 - it's initialized so what you guys can do
06:05 - is hop over to sanity.io go ahead and
06:08 - log in when you log in you should be
06:10 - able to see the project that you just
06:11 - created and if you put in our coupon
06:13 - code you're gonna notice that it's gonna
06:14 - say boosted free that's how you know it
06:16 - has all the nice stuff so if you click
06:18 - on it here's all the information of that
06:20 - sanity project so last thing i'll do for
06:22 - now is i'm just going to cd back into
06:25 - our main folder and go ahead and type in
06:28 - yarn dev or npm run dev if you're using
06:30 - npm so i'm going to hit enter this is
06:32 - how we're going to run our next js app
06:34 - and usually it's going to be on
06:36 - localhost 3000. so go ahead and type
06:39 - that into your command line or just
06:41 - control click and when it's done
06:42 - compiling we should see our nextjs app
06:44 - and there we go there's our next.js app
06:46 - and of course we can't forget that we're
06:48 - going to be using morales to help build
06:51 - out our app first thing you want to do
06:52 - to start using morales is to head over
06:54 - to this website t dot morales.io slash
06:57 - clever once you're there you'll be
06:59 - greeted with this amazing screen go
07:00 - ahead and sign up to get started i'm
07:02 - just going to log in awesome and once
07:04 - you've logged in you should see a page
07:06 - similar to this and if you're watching
07:07 - this and you're not sure what morales
07:09 - it's actually one of the leading web
07:10 - development platforms that helps
07:11 - developers create decentralized apps
07:14 - really quickly and easily what does that
07:16 - mean if you're going to go about this
07:17 - like a traditional way of making a
07:19 - decentralized app you'll probably
07:20 - connect to some sort of rpc node and
07:23 - create infrastructure on it meaning
07:25 - you'd have to write your own apis you'd
07:27 - have to set up your own queries for the
07:29 - user's transactions for example and
07:31 - depending on how much experience you
07:33 - have that might take you a long time
07:34 - you're essentially just reinventing a
07:36 - wheel that's already there with morales
07:38 - it makes it simplifies that process and
07:41 - makes gives us the tools to set up all
07:43 - those things easily if you guys are
07:45 - familiar with firebase think of morass
07:47 - as the firebase for crypto right so how
07:50 - can i get started the first thing that
07:52 - you're going to probably want to do is
07:53 - create a server so to create a server
07:55 - there's this nice little button right
07:56 - here click that and depending on what
07:58 - whether you're coding on the mainnet or
08:00 - test net or a local dev chain server go
08:02 - ahead and click that option for this
08:04 - project specifically i'm going to click
08:05 - test net server and then here you can
08:07 - write out some the name of your instance
08:10 - i'll just call it test app for demo
08:11 - purposes select the region that's most
08:13 - relevant to you mine's new york and
08:16 - you're going to see a couple different
08:17 - chains here reason for that is because
08:19 - morales is actually cross chain all
08:21 - right a good way to explain it ivan
08:23 - himself said this is think of it think
08:25 - of morales like a window computer that
08:27 - you bought it runs on the windows
08:29 - operating system and let's say a new
08:30 - printer comes out you're not worried
08:32 - that your computer can't use that
08:33 - specific printer that's not compatible
08:35 - right no matter what pc you buy the
08:37 - printer will still work same thing with
08:39 - morales no matter what chain you're
08:41 - working on morales should be working
08:42 - that's their vision and their goal and
08:44 - here are the couple things they have set
08:46 - up right now so we're going to be using
08:48 - the rinkeby test net so let's click on
08:49 - that and there we go we have a server of
08:51 - that and then you'll see your server
08:53 - that you created right here you can
08:54 - click view details and any relevant
08:56 - information you need especially if
08:58 - you're going to use morales you're going
08:59 - to have to put like a little provider
09:00 - around it you'll need to pass in the
09:02 - server url and the app id you'll find it
09:04 - right here cool and speaking of the rpc
09:07 - nodes there's a little section right
09:08 - here on the sidebar that morass has
09:10 - called speedy nodes and depending on
09:12 - what network you need to connect to you
09:14 - can use this as the rpc url so here you
09:17 - go there's the one for winkerby awesome
09:18 - all right coming back to the servers i'm
09:20 - going to take a look at the server that
09:21 - i made previously robinhood cloned
09:23 - blockchain and if you click on the drop
09:25 - down you can click this dashboard menu
09:27 - and look at that right so the moment you
09:29 - set up your server and somebody logs in
09:32 - for example somebody logged into our app
09:34 - we're going to have the etherdress
09:36 - stored onto the morales database and the
09:39 - best part of that database is that we
09:40 - can use that and query it within our own
09:42 - app so you have access to all the users
09:46 - and their contract addresses right you
09:47 - can have access to their balance right
09:49 - we can use morales to authenticate a
09:51 - user so you can see from my project that
09:53 - i was building we have three users
09:55 - registered with it and all of this is
09:56 - accessible and if you're wondering how
09:58 - we can use it for your apps we're going
09:59 - to demo some other features today and
10:02 - morales themselves also have amazing
10:04 - documentation on how to do different
10:06 - things as well as a youtube channel that
10:08 - also talks about this more in depth but
10:09 - if you look a look at for example and an
10:11 - example here's how to integrate morales
10:13 - with metamask all i have to do is call
10:14 - the authenticate function and that's it
10:16 - that's all you have to write isn't that
10:18 - insane so morales also has a database
10:20 - that you can use and it just essentially
10:22 - makes the user experience and the
10:24 - developer experience a lot more simpler
10:26 - and easier so that we can just focus on
10:28 - making our apps the best so it sounds
10:29 - like moroz can do a lot but guess what
10:31 - it can do more you can also use cloud
10:34 - functions that you can set up with the
10:35 - server on top of that mouse also has
10:38 - plug-ins all right if you go to the
10:39 - plug-in store morales is working with a
10:41 - bunch of different companies to give you
10:43 - developers even more tools to make your
10:46 - apps even more amazing for example
10:49 - there's this one-inch morales plug-in
10:50 - that basically integrates the five-slash
10:52 - deck dex aggregator that one inch uses
10:54 - to any project one cool thing i noticed
10:56 - here too there's also pinata ipfs
10:59 - enables interaction with the api from
11:01 - pinada so a bunch of cool things
11:03 - happening at morales and there's more
11:04 - plugins to come so that's my spiel on it
11:07 - let's move on to the next part in this
11:08 - build we'll also be deploying the app to
11:11 - netlify so to do that pop over to this
11:13 - link as well it's going to be
11:15 - ntl.fyi
11:17 - clever hit enter you're going to be sent
11:19 - to this page go ahead and sign up and
11:21 - make an account with mfi okay i already
11:22 - have an account so i'm just going to log
11:24 - in awesome and when you log in you're
11:25 - going to be greeted with this page and
11:27 - you might be asking what is netlify and
11:29 - if you haven't heard of it netlify is a
11:30 - web hosting and automation platform that
11:33 - accelerates development productivity or
11:35 - in short you can take any code that you
11:38 - make such as this and host it on a
11:39 - website that's easily shareable and
11:42 - anybody can see your work they make that
11:43 - process super simple and easy to get
11:46 - started deploying your app to netflix
11:47 - the first step you're going to have to
11:48 - do is make sure you take your next js
11:51 - app and add it to github alright once
11:54 - you've added it to github go over to
11:56 - sites and click add a new site and one
11:58 - of the ways netlify makes this process
12:00 - really easily is that if you already
12:01 - have your project up on github you can
12:04 - click import an existing project right
12:06 - connect it to github click your profile
12:08 - or organization and if i type in robin
12:11 - for robin hood i'll click on this all
12:13 - right make sure that this says yarn run
12:15 - build and all i have to do guys is just
12:16 - click deploy site and it's going to
12:18 - deploy your website for you and soon
12:21 - there's going to be a link that i can
12:22 - click and see the nice work that i made
12:25 - and every time you push to this github
12:27 - repo it's gonna redeploy with those
12:29 - updates so that's amazing let's get to
12:31 - coding next let's install tailwind with
12:34 - next.js luckily tailwind made this super
12:36 - nice documentation on how to get
12:38 - tailwind with nexjs okay so we're going
12:41 - to be using this as a reference but i'll
12:43 - be walking you guys through it as well
12:45 - so the first thing you want is install
12:47 - these three things tailwind css post css
12:50 - and auto prefixer so make sure you stop
12:52 - your terminal temporarily or open
12:54 - another one so you can install it so i'm
12:56 - just going to copy this and if you use
12:58 - npm type npm install and then the rest
13:00 - of the command but i'll be using yarn so
13:02 - i'm going to say yarn add okay so
13:04 - install those three things once that's
13:06 - installed go ahead initialize tailwind
13:08 - by saying npx tailwind init p okay and
13:11 - you're gonna see that it created a
13:13 - tailwind.config.js
13:16 - go ahead and click that file and what we
13:18 - need to copy is these two strings within
13:20 - this array so you can copy that and go
13:23 - into your right here enter paste and
13:25 - then save and the last thing is we need
13:27 - these directives to our css we can also
13:30 - just copy this go into your styles
13:32 - folder click on globals.css
13:34 - here you're going to see some default
13:35 - styling we don't really need those so
13:37 - i'm just going to delete that paste the
13:38 - directives into that file and let's hit
13:41 - save okay once that's done let's run our
13:44 - build process and load up our webpage
13:47 - hey there we go so it looks slightly
13:48 - different that's because i delete the
13:49 - styling but you should know that
13:51 - tailwind is now installed in this
13:53 - section i'm going to be setting up the
13:54 - front end of our robinhood app so what
13:57 - we're going to do hop over to your pages
13:59 - and let's start coding in our index.js
14:02 - you're going to notice all these default
14:04 - things and that's actually why we see
14:06 - all this welcome to next gis
14:07 - documentation stuff like that we can do
14:10 - is let's clean it up by removing
14:12 - everything we can also delete all these
14:13 - imports because i'm going to be adding
14:15 - maya so if you know anything about
14:17 - tailwind at all is that we can style our
14:20 - divs by writing in their class name and
14:23 - we can define those stylings at the top
14:25 - right here so what i want my first div
14:27 - to be we can just change this one i
14:29 - usually do styles dot wrapper okay and
14:33 - usually how it works is at the top here
14:35 - you can say something like cons styles
14:38 - equals and then if i put wrapper here
14:40 - you can now add css to it so that you
14:42 - would see that screen so if i say
14:43 - something like this i'm setting the
14:45 - width and height and adding some flex
14:47 - properties to it i'm not going to
14:48 - explain every single css i do here
14:50 - because then this video would be eight
14:51 - hours long if you do want to learn more
14:53 - about tailwind css go ahead and type in
14:56 - this tailwind cheat sheet and you can
14:58 - basically understand what i'm typing in
15:01 - each time also feel free to pause the
15:02 - video if i move too fast let's move on
15:05 - yeah so if you go to tailwind cheat
15:06 - sheet you should be able to understand
15:08 - how to do different things like for
15:09 - example display flex instead of if you
15:11 - wanted to get the flex property this is
15:13 - how you would write dot flex or you
15:15 - could just write flex let's set up our
15:17 - divs and components inside this wrapper
15:20 - div we're actually going to have a
15:22 - header component and i don't have any of
15:24 - these components set up so what i like
15:26 - to do is start to wireframe and plan it
15:28 - out in my head or write it down so for
15:30 - now we're going to have a header
15:31 - component here and since it doesn't
15:33 - exist leave it commented out okay in the
15:35 - next line we can make another div let's
15:36 - give that one a class name of styles dot
15:40 - main container okay and then within that
15:42 - div we're gonna make a couple more so
15:44 - this one's gonna be called
15:45 - styles.portfolio amount container this
15:47 - div is gonna be holding the amount of
15:49 - eth within it so i'm gonna say div class
15:52 - name and this one's going to be the
15:54 - portfolio amount because in robin hood
15:56 - you're going to see a nice portfolio and
15:58 - a lot of this data is going to be static
16:00 - all right the main point of this
16:01 - functionality is to showcase the trading
16:04 - aspect so that one's going to be static
16:06 - next thing we're going to do is class
16:07 - name your portfolio percent so i'm going
16:09 - to say styles.port
16:11 - folio percent and again start a hard
16:14 - coded value of zero zero zero zero eight
16:18 - and you can do plus here a lot of this
16:20 - styling is based off the actual robin
16:22 - hood so it's gonna look just like that
16:23 - app okay and then underneath that i'm
16:25 - making a span and this band is gonna
16:27 - have a class name as well of
16:29 - styles.past and then you can put past
16:31 - hours and closing openings okay cool and
16:33 - then from here i'm just going to have a
16:35 - regular div no class name it's just used
16:38 - as a container and within that div we're
16:40 - just going to be we're going to make
16:41 - another one called classname
16:43 - dials.chart container so this is going
16:45 - to be where our chart goes okay and like
16:47 - i said since it's going to be where our
16:48 - chart goes i'm going to have another
16:50 - component in here which is going to be
16:52 - portfolio chart okay next i'm going to
16:55 - make another div this div is going to
16:56 - have a class name of buying power
16:59 - container so it's going to be styles dot
17:01 - buying power and just like the name
17:03 - implies you should be able to see the
17:05 - buying power amount so inside that div
17:08 - you can type in the div with the class
17:10 - name of buying power title so we'll say
17:12 - styles that buying power title and in
17:15 - that div you can put the text buying
17:17 - power set up another div this one is
17:19 - going to be called buying power amount
17:21 - so you say styles buying power and again
17:24 - put in this text 12 eth and then the
17:27 - next line outside of the buying power
17:29 - container i want a class name of styles
17:33 - this one this div is going to be called
17:34 - notice this div is going to have two
17:36 - children and we're going to call it
17:38 - notice container inside notice container
17:41 - though it's going to be notice title and
17:43 - within notice titles we can put send
17:45 - nice and in the next line it's going to
17:47 - have a sibling which i'll call the
17:49 - notice message okay and notice message
17:52 - what it's going to say is transfer your
17:54 - funds and then underneath the transfer
17:56 - your funds here as another sibling it's
17:58 - going to be the component where it's
18:00 - going to have a component called by
18:02 - tokens so we're going to put by tokens
18:05 - and this component it's going to have
18:06 - the functionality of actually buying
18:09 - tokens and exchanging and make sure all
18:11 - of these have styles on them otherwise
18:13 - it's gonna say it's not defined okay
18:15 - cool so it looks like that's fine so
18:16 - it's closing div closing the next thing
18:18 - is we're gonna have a notice component
18:20 - here so we can type notice so if you're
18:22 - noticing funny so what i'm doing here is
18:24 - just setting up my components so that
18:26 - for later i can just add that in it also
18:28 - helps me give an idea of what i want to
18:30 - put as a component in here so in this
18:33 - line in line 39 for me i'm going to have
18:35 - another div okay and this div is going
18:37 - to have styles dot write main and within
18:41 - that we're going to have another div and
18:42 - inside the right main div is going to
18:44 - have all the items so i'm going to say
18:46 - styles.right main item and inside the
18:48 - right main item is you guessed it the
18:51 - actual item so i'm going to say
18:52 - styles.ido title and the title will be
18:55 - crypto currencies okay and then what i
18:57 - want to put inside the right main item
19:00 - is a react icon so what we're going to
19:02 - do is actually install react icons so
19:04 - temporarily i'm going to stop right here
19:06 - for a second and be sure to install
19:09 - react icon so i'm going to say yarn add
19:11 - react dash icon then after that's
19:14 - installed we can reset our terminal say
19:16 - yarn div head over to the top and let's
19:19 - import the icons that i want to use
19:21 - which are just going to be these two by
19:23 - dots horizontal rounded and the ai
19:25 - outline plus and like i said the
19:26 - siblings to the item tile is going to be
19:29 - the react icon okay and then this is the
19:32 - closing div for the right main item okay
19:34 - and i'm just gonna make a comment here
19:36 - is this is where we want to map through
19:38 - our coins and when i say coins these are
19:40 - the coins that we currently have and i
19:42 - want to be able to see each asset so map
19:45 - through coins and for every coin make an
19:50 - asset component okay but that's gonna be
19:51 - my little note for later so i'm gonna
19:53 - make another comment here and we'll just
19:55 - have one asset to start with just to
19:58 - give you guys an idea of what we're
19:59 - doing so i'm just gonna say acid like
20:00 - there cool
20:02 - and then over here make another div give
20:04 - it the same class name of styles dot
20:07 - right main item class name item title
20:11 - all right you're gonna notice that's
20:12 - pretty much the same thing and don't
20:13 - forget to put a styles dot item title
20:15 - and the item title of this specific one
20:18 - is gonna be called lists okay and we're
20:20 - going to include that react icon that i
20:21 - was telling you about this one is the ai
20:24 - outline plus awesome so that should be
20:26 - it for maine let me just double check my
20:28 - closing divs i see the problem i
20:30 - actually forgot one more div guys it's
20:32 - actually in between the main container
20:34 - is all this stuff inside main container
20:36 - there should actually be a left one
20:37 - because we've been making the forgot to
20:39 - include this so inside here i'm going to
20:41 - say styles dot left main and hit enter
20:46 - you'll notice this closing div alright
20:47 - so keep track of where that is we're
20:49 - gonna put that somewhere else but for
20:50 - now just to organize ourselves highlight
20:53 - everything up until the notice and hit
20:56 - tab because this closing div should
20:58 - actually belong to the left main one so
21:01 - what i'll do is actually close it right
21:03 - here so now take out that closing div
21:05 - that i told you to keep track of and
21:06 - you'll see that the matching closing div
21:08 - for the left container the left main is
21:10 - right there cool so i'm going to save
21:12 - that and now we're actually missing a
21:14 - div for the main container so that's
21:16 - just going to go in between here so this
21:18 - one should line up with notice and just
21:20 - add another div for the main container
21:23 - and the main div for this one i'm gonna
21:25 - go right here there we go i'm also gonna
21:27 - indent right main to keep it organized
21:29 - nice there we go that's more like it so
21:32 - now everything's good we just have to
21:33 - add the left main container because we
21:36 - forgot to do that side once that's done
21:37 - let's add all the rest of the styling
21:39 - using tailwind and it already has the
21:42 - names you just have to give styling to
21:43 - the names for example this main
21:45 - container you're going to give it the
21:47 - css don't forget to add commas here we
21:49 - go awesome you can see how each time i
21:51 - add css this is what it's doing it's
21:54 - reacting to my page we're going to give
21:56 - the left main some flex properties with
21:58 - three and fourth quarters height full
22:01 - and give it an overflow of scroll
22:04 - and the portfolio mount container it's
22:06 - gonna look like okay and like i said
22:08 - feel free to pause the video if you need
22:10 - to get the actual typing if you want to
22:12 - learn more about tailwind css the best
22:14 - way for you to do it is to study it on
22:16 - the cheat sheet there's no way you can
22:17 - memorize every single property the only
22:20 - way that you can get better is by just
22:21 - writing your own css over so after that
22:24 - with that said i want to be moving a
22:25 - little bit faster let me get the rest of
22:27 - the portfolio mounts in here okay cool
22:29 - see this is what it does okay next the
22:32 - past hour tech scary of 400 the chart
22:34 - container is going to have this text
22:36 - justify content center with full height
22:39 - one third text white and the buying
22:41 - power container is actually going to
22:43 - have a lot of css as well which is going
22:45 - to look like this don't forget to
22:47 - include the quotes and the comma okay
22:49 - looks like we're getting there so that's
22:51 - the buying power container let's start
22:53 - the buying power title and the amount
22:54 - which is going to be simply just the
22:56 - text of white font the font bolder and
22:58 - the text to be large for the buying
23:00 - power amount the text is also going to
23:01 - be white the font will be bolder and the
23:03 - text is going to be extra large okay
23:05 - then we have the notice amount which is
23:06 - going to have this flex and border and
23:08 - the rest of the css next is the notice
23:10 - container with a flex of one then we
23:13 - have the notice title with the gray text
23:15 - white with the font bold so there's
23:16 - notice tca okay and let's do the right
23:18 - main next which is going to have all of
23:20 - this there's a css for the right main
23:23 - and the right main item and two more
23:25 - guys it's gonna be the item title and
23:28 - the more options and that should be all
23:30 - the css for the index if you're
23:32 - wondering why it looks like this that's
23:34 - because in remember in our global css we
23:37 - deleted all the starter files we
23:39 - actually have some styling that we want
23:40 - to include which is going to be all of
23:42 - this so take a moment take a look html
23:45 - padding zero margin zero this is the
23:47 - font family the main thing is the
23:49 - background color black and let's just
23:51 - hit save there it goes now it's looking
23:53 - a lot more like robin hood if i make
23:55 - this just a little bit wider there we go
23:57 - okay it's a start so let's build on from
23:59 - here all right so in this section we're
24:01 - going to be working on the header
24:03 - component if you remember anything about
24:05 - robinhood there's a couple things that
24:07 - go at the top here along with a login or
24:10 - logout button that you should see so to
24:12 - get started working on that let's
24:13 - remember where our header component is
24:15 - all right so going back into the
24:16 - index.js if we look scroll down with all
24:19 - our css and html if you look over here
24:22 - for me line 34 this is where our header
24:24 - component is going to go which makes
24:26 - sense it's going to go above our main
24:27 - container which is all of this so what
24:29 - we need to do is over here let's create
24:32 - a folder called components so not in
24:35 - styles in our main folder let's make a
24:36 - folder called component okay and inside
24:38 - that folder is obviously where all our
24:41 - components go so inside our components
24:42 - folder i'm gonna make a
24:44 - header.js cool so in that header.js
24:48 - let's set up our component and once you
24:50 - make your component we can actually
24:52 - import that in our index so what i'm
24:54 - going to do is comment this out and at
24:56 - the top here i'm going to put it above
24:58 - icons i'm going to say components and
25:00 - say import header from components and
25:03 - you should see it it's going to be
25:04 - somewhere up here but because the text
25:06 - is black it's not going to show up all
25:08 - right there it is if i highlight you can
25:09 - see the header right there awesome it's
25:11 - going to look a lot better when we style
25:12 - it so let's get working on it so head
25:14 - over to header.js next you want to do is
25:16 - import these two things right here for
25:19 - now right which is going to be import
25:21 - image from next image and the react icon
25:24 - that i told you to demo so hit save and
25:26 - let's work on some dibs so for this main
25:28 - div i'm just going to format it real
25:30 - quick and let's change the name i'm
25:31 - going to call this div class name and
25:34 - this one's going to be called container
25:35 - and again if we're using tailwind we
25:36 - have to say styles.container and then
25:38 - within that we're going to make another
25:40 - div this one's going to be class name
25:42 - left header so i'm gonna say styles.left
25:44 - okay inside is where the image goes but
25:46 - right now we haven't fully set that up
25:48 - yet there's gonna that's where the image
25:50 - is gonna go and you're gonna see styles
25:51 - not defined if you save because we
25:53 - haven't made their styles object after
25:55 - the left header we're going to make
25:56 - another div here and this one will be
25:58 - styles.wrapper a style is that search
26:00 - wrapper okay inside that div will be
26:03 - something called styles that search
26:06 - input container input and then within
26:09 - that very div i'm gonna have a react
26:12 - icon of ai outlines with this class name
26:14 - and then we'll have another one it's
26:16 - gonna have a sibling of styles search
26:19 - input wrapper all right so we have a
26:21 - search input container and you guessed
26:23 - it inside that container inside that
26:25 - wrapper will be the input which for now
26:27 - i can put a placeholder of search
26:31 - dot dot dot and i can just extend my
26:33 - code just a little bit search that and
26:35 - let's include a class name for him which
26:37 - will be
26:38 - styles.search input nice and you can
26:41 - actually make input self closing i'm
26:42 - going to do forward slash closing okay
26:44 - cool so that's it for the input wrapper
26:47 - all right so then here in line 19 for me
26:49 - i'm going to make another one this one
26:50 - will be styles and styles header is
26:53 - going to contain everything on the right
26:55 - side which would be like the one the
26:57 - text that says rewards cash i believe
26:59 - portfolio message and as well as the
27:01 - login logout button all right so we're
27:03 - gonna make four divs each with the class
27:05 - name of styles that's something what
27:06 - i'll do is copy that boom that's four
27:08 - this one's gonna be the same one they're
27:10 - actually all gonna be the same i should
27:11 - have done it that way menu item styles
27:13 - that menu item sells that menu item and
27:17 - just one more menu okay and like i
27:19 - mentioned before this one's gonna be
27:20 - rewards we got the portfolio in the
27:22 - house
27:23 - cash money just cash and then just
27:26 - messages oops messages okay cool and
27:29 - then it has one more sibling actually
27:30 - and like i said this is where the login
27:32 - log out button goes and what we'll have
27:34 - here is some conditional rendering all
27:36 - right so i'm gonna type it up and i'll
27:38 - explain it in a second okay so what i
27:40 - did i just inserted this div called
27:41 - another menu item and it's gonna have an
27:43 - on click of connect wallet obviously we
27:46 - don't have the function connect wallet
27:48 - just yet but just know that if i press
27:50 - login that's when we should connect our
27:51 - meta mask into our app all right so let
27:53 - me just play with that for a second hit
27:55 - save on we need to create our styles
27:57 - object so at the top here oops so at the
27:59 - top here in line four for me i'm just
28:01 - going to hit enter a few times and let's
28:02 - make our styles object for tailwind
28:05 - start off with the css for our container
28:07 - which is going to have a flex with
28:09 - screen and that's your height with a
28:11 - black background awesome i'm going to be
28:13 - moving a little quick with the css like
28:14 - i mentioned previously that's going to
28:16 - be the left header with the flex of one
28:18 - logo which will have object cover and a
28:21 - cursor pointer now let's get all the
28:22 - search stuff out the way and all the
28:24 - search stuff oops and now let's get the
28:26 - search stuff out of the way so if i hit
28:28 - paste here you can see this is all the
28:30 - search wrapper css that's included this
28:32 - is the input container you can't see
28:34 - it's going to have a text white item
28:36 - center flex 1 ml64 border gray 400
28:41 - mr64 this is the hover css when i hover
28:44 - over it and this is the timing of that
28:47 - hover and give it a rounded over there
28:49 - cool then we have just a search icon
28:50 - which is pretty simple to make it gray
28:52 - and the wrapper also grey with this with
28:55 - width search input it's going to have a
28:57 - background that is transparent with no
28:59 - outline and the full width all right
29:01 - last thing it's going to be the right
29:02 - header and the menu item okay there we
29:05 - go and if we look it's looking a lot
29:07 - better and we can also see that the
29:08 - login is also there too okay and like i
29:11 - said we want to make it so that and to
29:12 - talk about what i was saying earlier
29:14 - when i press log in think about what
29:16 - should happen i should log in with
29:17 - metamask and once i do log in should it
29:20 - still say login no it should say log out
29:22 - and if it's cool we could show our
29:24 - information on the side just to indicate
29:26 - that we signed it so what i want to do
29:28 - there there to set it up is actually i
29:30 - want to make some space here just to
29:33 - separate it for you guys all right let's
29:34 - do some conditional rendering i want to
29:36 - have something called is authenticated
29:38 - right if us is authenticated is true so
29:41 - it is authenticated and i said if it's
29:44 - true then i can load all this css here
29:48 - which i'm going to put it like this okay
29:50 - then we're going to have another one is
29:52 - authenticated is not true right if it's
29:55 - a falsie value then what should we load
29:57 - should we load the login button or the
29:59 - log output that's right the log in
30:01 - alright so then i'm going to add the
30:02 - login back in and then i can move this
30:04 - extra one right here i'm just going to
30:06 - format this make it look a little bit
30:07 - pretty put these together save awesome
30:10 - and then we're going to error because
30:10 - there's no such thing as is
30:12 - authenticated so for now let's just make
30:14 - it static here and say conf is
30:16 - authenticated equals false all right and
30:18 - when i say it's false what should load
30:20 - the login because we're not logged in so
30:22 - if i made that bigger there we go now
30:24 - look what happens if i say true you'll
30:26 - get the formatted account it's not
30:27 - defined right because let's also define
30:29 - our formatted account for now to make it
30:30 - static cons formatted account and that's
30:33 - gonna be your meta mask all right so i'm
30:35 - just going to log in real quick and
30:36 - click copy and i can just probably put
30:38 - this in there and hit save and there it
30:40 - is it's super long because that's about
30:42 - how long the wallet address is when we
30:43 - say formatted account we're probably
30:44 - going to do something to give it just a
30:46 - little bit more of a nicer readability
30:48 - which is probably something similar to
30:49 - this and there you go so when we log in
30:52 - we should see the logout button and our
30:54 - account and if authenticated is false
30:57 - right we should see login and we
30:59 - shouldn't be able to see our information
31:02 - okay cool so this is stuff we need to
31:03 - change later so if i make a not make
31:05 - dynamic awesome so the only thing we're
31:07 - missing is we should have actually a
31:08 - little logo here and to do that you're
31:10 - gonna need some assets so the next thing
31:12 - we have to do is let's get our image up
31:14 - and running and what i'm gonna do is
31:16 - utilize my assets folder all right so
31:18 - the only thing i have in my assets
31:20 - folder is just this logo that i pulled
31:22 - from robinhood so all you need to do is
31:24 - just search up the robinhood logo and
31:26 - just insert that logo into our app so i
31:27 - have it in here under my assets folder
31:29 - and again if you want to use images in
31:31 - next.js you have to make sure to import
31:34 - image from next image right the next
31:36 - step would be to actually just import
31:37 - the logo right from that same spot so
31:40 - i'm going to say import logo from and
31:42 - then the path of your assets folder
31:44 - which is going to be dot assets slash
31:47 - logo cool so now it's imported and to
31:49 - use it is to comment out in this area
31:53 - right in line 30 for me i'm just going
31:54 - to say image self closing give it a
31:57 - source and we can give the source the
31:59 - same name as the import and the last
32:01 - thing i want to hear is they can
32:02 - actually define the width and height of
32:04 - the image inline which i'll just say 100
32:06 - and also the width will be the same 100
32:10 - and this also has a class name
32:12 - styles dot logo okay go ahead and save
32:16 - and then if we open our app it should
32:18 - look like so amazing there it is should
32:21 - be good to go and that's gonna be the
32:23 - front end for the header we're gonna be
32:25 - hopping back and forth between the
32:26 - header and the index as we go especially
32:29 - after we set up context so let's work on
32:31 - the next thing okay so now that we have
32:33 - that done hop over to your index.js and
32:35 - let's look at the next component we have
32:36 - to make so there is our portfolio chart
32:38 - the next component that we have to make
32:40 - is the buy tokens component so this
32:43 - component right here is going to be the
32:45 - functionality or what token i want to
32:48 - buy and exchange for so it's going to be
32:50 - the same process as we did with the last
32:52 - two which is to go your components
32:54 - folder and literally make that by
32:57 - tokens.js buy tokens.js set up your
33:00 - component hit save and now we can import
33:03 - set component so i'm going to uncomment
33:05 - and this is how you make a component so
33:08 - we can come to the top here be sure to
33:10 - organize it so i'm going to move this
33:12 - import here and i'm going to say import
33:14 - by tokens from this path okay cool all
33:17 - right and if i highlight this we can
33:18 - actually see the buy tokens right here
33:20 - it's not visible because the default
33:22 - color of this is black but once we add
33:24 - styling we should be able to see it here
33:26 - so under transfer funds we should see
33:29 - some options and we can decide what we
33:31 - want so let's get started i'm gonna mix
33:33 - it up this time let's actually make our
33:34 - styles object first so i'm gonna do
33:36 - styles equals like okay and we're going
33:38 - to have a class a div called input
33:41 - amount and it's just going to have this
33:43 - kind of styling so i'm going to make
33:44 - this a little bit bigger so we can see
33:46 - hit alt z how's that so this is the
33:48 - style we're going to put for input
33:49 - amount oops okay there you go so that's
33:51 - the styling for input amount you're
33:52 - going to include all the next thing you
33:54 - want to do is the form container that
33:57 - we're going to have the css for this is
33:58 - pretty simple it's just going to have a
34:00 - flex of item center next is going to be
34:02 - a diff called select which is just going
34:04 - to have this and lastly there's gonna be
34:06 - something called options which is gonna
34:07 - have pretty similar css as well okay now
34:09 - that our css is done once i set up the
34:11 - divs they'll already be styled so now
34:13 - let's set up the divs okay let me just
34:15 - clean up this line right here and the
34:17 - main div that we actually want to put is
34:19 - actually the main div that we want to
34:21 - put is going to be a form and in this
34:24 - form we can do a class name and this is
34:26 - we can call it styles.form
34:29 - container all right so we made that
34:30 - styling over here we are now using that
34:33 - and giving that style over to form
34:34 - container now we can insert a div within
34:36 - that form again and now after you do
34:39 - that we can insert a div in that form
34:41 - this one isn't going to have a specific
34:43 - div name it's going to have just
34:45 - straight up css from tailwind and this
34:48 - div will have this styling all right
34:50 - full width full selects column and item
34:52 - center next we're going to have a select
34:54 - here with the class name styles
34:58 - dot select right so that means it's
35:00 - going to take up all of this styling
35:01 - that we set up okay and we're gonna come
35:03 - back to select but this will be it for
35:05 - now so opening up select inside of it
35:08 - we're gonna have some options in options
35:11 - this is where you can decide what kinds
35:13 - of tokens do you want to trade and of
35:16 - course they're all going to have a
35:17 - styles that and of course they're going
35:18 - to have all have styles of options for
35:21 - the class name so depending on how many
35:22 - options you want you can make a bunch of
35:24 - these so i have about so i'm just going
35:27 - to make sure i'm about to make four
35:29 - three okay and here we can actually
35:31 - define our options so let's say we could
35:33 - have for example bitcoin let me try it
35:35 - again so for this part we can actually
35:37 - define our options i'll say btc for
35:39 - bitcoin i'll say for ethereum we could
35:41 - have some soul for solana and we can
35:44 - have some usdc one thing to note is that
35:46 - we're gonna be building this using
35:48 - solidity which runs on the ethereum
35:50 - blockchain so it's not gonna be the
35:52 - actual tokens but we can simulate an
35:54 - exchange so instead of changing these
35:57 - actual coins we're gonna have tokens
35:58 - with the same name so keep that in mind
36:00 - we're doing that and just to finish this
36:02 - up give it a value equals of the same
36:05 - name so these all should have value
36:07 - which should just be the same ptc and
36:09 - usd after the closing of after the
36:11 - closing date of select we'll have an
36:13 - input right here and input can actually
36:16 - be a self-closing tag meaning we can
36:17 - just add a forward slash here but in
36:19 - this input i want to give it a couple
36:21 - things so i'm just going to give it a
36:22 - placeholder amount this is the amount
36:24 - that you want to exchange and since it's
36:26 - gonna have a couple of things i'm just
36:28 - gonna make it look nicer like this and
36:29 - it's gonna have a class name of styles
36:32 - dot sorry this is gonna have a class
36:34 - name styles dot input type equals text
36:37 - and like i said we're to be coming back
36:39 - to this section but that's going to be
36:41 - it for now after that we can just have a
36:42 - button here the class name styles that
36:45 - notice cta which we're not going to
36:47 - actually have anywhere but it'll make
36:49 - sense in a second type equals submit and
36:52 - eventually we want to add an on click in
36:54 - here all right so i'll just sign up and
36:56 - the idea is once we click the button
36:58 - we're going to mint those tokens as we
37:00 - send it as we send each so we're
37:02 - purchasing them so we don't have this
37:04 - mid function so we don't have this myth
37:06 - function just yet so i'm just going to
37:08 - comment it up earlier and the last thing
37:09 - we need to and before i continue on this
37:11 - all this should go inside button so let
37:14 - me just clean it up and inside that
37:15 - button after cool i'm just going to
37:17 - clean up like that we'll leave the on
37:19 - click for later actually and in this
37:20 - button it should just say send and all
37:22 - right it's not gonna and also it's gonna
37:24 - think these are undefined so we can
37:25 - actually delete these for now so i'm
37:27 - gonna delete the values because they
37:28 - don't have any meaning to them just yet
37:31 - so go ahead and delete those values and
37:33 - save and this is what you should have
37:35 - look at that nice little chart right
37:36 - here btc and what we're gonna see is the
37:39 - different options once we have the value
37:42 - but if you look for now it's like this
37:44 - now you can see ptc ethol and you can
37:46 - also input the amount that you want so
37:48 - at the moment there is no functionality
37:50 - but we'll work on it cool so for now
37:52 - that's the buy tokens component okay and
37:54 - that is the by tokens component if you
37:57 - notice i'm not seeing the the correct
37:59 - styling that's because these all need to
38:01 - be in wrapped in curly brackets yep so
38:04 - wrap them in curly brackets but also
38:06 - take out the quotes and they should be
38:08 - working just fine okay so i'm just going
38:10 - to clean this up i hit save now there we
38:13 - go that's more like it so there we have
38:14 - it that is the by tokens component the
38:17 - front end part of it that is the buy
38:19 - tokens component it's pretty soon we're
38:21 - going to be working on the functionality
38:22 - of all this so i can switch to eth
38:24 - solana usdc you can put the amount up
38:27 - that you want you can put the amount
38:28 - that you want and there you go that is
38:30 - the buy tokens component and there we go
38:33 - all right so we're almost done coding up
38:35 - the front end we only have a couple more
38:37 - components to go so going to index we're
38:40 - going to see that the notice.js is going
38:42 - to be the next component we'll make so
38:44 - same process go to your components
38:46 - folder type in notice.js set up your
38:49 - component next you want to import that
38:51 - same component at the top here so i'll
38:53 - say import notice from components and if
38:56 - you hit save you're not going to see
38:57 - anything but notice should be at the
39:00 - bottom hit save and if you want to see
39:02 - the notice component just uncomment and
39:04 - if we hit save you're going to notice
39:05 - the notice all right there it is all
39:07 - right it looks like that because there's
39:08 - not any styling on it so let's get
39:10 - started on that so i'm going to start
39:12 - with the styling first since there's not
39:13 - a lot of css so i'm just going to say
39:15 - con styles and the css that's going to
39:17 - have is going to be just this cool all
39:20 - right so it's going to have a notice
39:22 - with the css the notice container of
39:24 - flex 1 the title will have this grey
39:26 - text message will be white with the font
39:28 - of bold and the noted cta will also be
39:31 - bold with green and a cursor pointer so
39:34 - if i hit save it will still look like
39:36 - this because we don't have any of the
39:38 - divs the styles that we set up so i'm
39:41 - going to clean this up just a bit and
39:42 - i'll say div with the class name of you
39:45 - guessed it styles dot notice saving now
39:48 - it's going to make that box right
39:50 - everything we add because it has the
39:51 - tailwind already it'll already have the
39:53 - styling when you see it okay so within
39:54 - that then we have the div with the class
39:57 - name with the class name of
40:00 - styles.notice container and inside of
40:03 - that one this one's going to be called
40:05 - styles.notice title which will just say
40:07 - fund your account okay the sibling to
40:11 - that will be another one called notice
40:14 - styles notice message the message is
40:17 - gonna be this whole sentence which is
40:19 - just your bank account is ready fund
40:22 - your robinhood account to begin trading
40:24 - okay i'm just going to clean it up a bit
40:26 - there we go and then you're going to
40:28 - have a div here that's going to have the
40:30 - class name of the notice cta so it's
40:33 - going to say styles.notice and it's
40:35 - going to just say once cool there we go
40:38 - and one thing we could do is actually
40:39 - copy this css for our styles in by
40:44 - tokens because then you can see the nice
40:46 - send button over there awesome so this
40:47 - is looking a lot better now let's work
40:49 - on the last component all right you guys
40:51 - ready for the last component of the
40:53 - front end let's go so the first thing
40:55 - i'll do is head over to index and notice
40:58 - something that all the asset component
41:01 - is living in the right main what is the
41:03 - right main that's going to be all of
41:04 - this stuff that's just going to show
41:06 - let's say i have funds in bitcoin it's
41:08 - going to show a chart with how well
41:11 - bitcoin is doing okay so what does that
41:12 - tell me it tells me that we're also
41:14 - going to chart js react charts js in
41:16 - here as well so we don't have this
41:18 - component so let's comment it out create
41:20 - the component so assets dot js so save
41:25 - once we comment it out we can import it
41:27 - import assets from here and also it's
41:30 - assets with an s so let me fix that
41:33 - there we go and you can see that the
41:34 - assets component is taking up space here
41:37 - and if you remember the little note we
41:39 - want to map through our coins and our
41:41 - coins is going to be all of these guys
41:43 - and for every asset we have we're going
41:46 - to have a chart over here so we're going
41:48 - to start with one static one so you guys
41:50 - get an idea of how it's supposed to look
41:53 - so let's create start creating our
41:54 - assets component and the first thing we
41:56 - need to do is import that line from
41:59 - react.js as well as
42:02 - the import chart from charges auto from
42:05 - portfolio chart okay cool and again
42:07 - bringing in the styles there isn't much
42:09 - more css it's just going to have all of
42:12 - this a wrapper css like usual the name
42:14 - is going to be bold the chart will have
42:17 - a width of 36 and the height will be
42:19 - full a price and a percent like okay to
42:23 - set up the divs i'm just going to do
42:25 - something like this and this main div
42:27 - here is going to be our wrapper so let's
42:28 - set that up styles.wrapper inside the
42:31 - wrapper is our container
42:33 - styles.container and inside the
42:35 - container and inside the container it's
42:37 - going to be
42:38 - styles.name and here we want the coins
42:42 - so if you remember the coin is supposed
42:44 - to represent whether the component has
42:46 - btc ethol or usdc for now i'm just gonna
42:50 - hard code it like i said i'll just put
42:52 - coin symbol so we're gonna get errors
42:54 - because it's undefined still within the
42:56 - wrapper but as a sibling to the
42:58 - container we'll have the chart so this
43:00 - one's gonna have styles dot chart and in
43:03 - here this is where the line component
43:05 - and the line component is gonna work the
43:07 - same way as it does in portfolio so it's
43:09 - gonna have a data value options a width
43:12 - of 400 oops not a width width of 400
43:15 - height of 150 there we go and one more
43:18 - thing this actually is supposed to have
43:20 - an empty div wrapped in it for some
43:22 - spacing just to help with the css so so
43:25 - it goes closing opening of the chart
43:27 - line closing of the chart and then the
43:30 - closing of that and then still in the
43:32 - wrapper we'll have another one this
43:34 - one's gonna be the price so i'm gonna
43:36 - say styles.price
43:38 - with the div with the price that we pass
43:40 - in with the class name of the styles
43:43 - that percent okay i'm just gonna clean
43:45 - this up one second because this div will
43:48 - also have some inline styling that says
43:50 - the color some inline styling that says
43:53 - that the color will change from green to
43:56 - this color depending on the price
43:58 - depending on the value of it so if that
44:01 - change is less than zero in the
44:03 - negatives it should be red and if it's
44:04 - not it should be good so i'm just going
44:06 - to say coin dot change and then at the
44:09 - end percent to concatenate a percent to
44:11 - the end of it awesome and if you hit
44:13 - save you're going to get an error
44:14 - because this doesn't have any of the
44:18 - coin properties passed into it another
44:20 - thing we need to do is set up the line
44:22 - data and the options just like we did
44:24 - with the chart in portfolio so to do
44:27 - that i'm going to hop all the way over
44:29 - here since to do that i'm going to make
44:31 - some space in between this two these two
44:33 - lines and before that we can destructure
44:36 - it so that when i pass down stuff it'll
44:38 - be easier i'll say the coin is this then
44:40 - the price is going to be this and then
44:41 - that's how we're going to use all of
44:42 - that all right cool so coming into line
44:44 - 16 for me i want to set up my line so
44:46 - i'm going to say const data equals an
44:49 - object again with the labels and the
44:51 - labels is actually just an array with
44:54 - these empty books okay the next thing is
44:57 - the data sets which is an array that has
44:59 - an object and remember this is going to
45:00 - control the styling of my chart so just
45:03 - to paste that in looks like that awesome
45:05 - and just making the options which is
45:08 - going to be exactly the same as the
45:10 - portfolio chart which is just options
45:12 - which is object plugins legend display
45:14 - false one thing to remember that in the
45:16 - data sets key there should be another
45:18 - key within here that's gonna have an
45:20 - array with the different points like
45:22 - this one that says 40 that's done
45:24 - because i've said 40 here and then the
45:25 - last one is done because i said 70 here
45:27 - so if you want to make different points
45:29 - in the chart you can hard code that
45:31 - value or we can actually give it a
45:33 - random number and we can control the
45:36 - range of that random number what i'm
45:38 - saying is this is going to end up being
45:40 - an array filled with random numbers how
45:42 - can we make that more dynamic you can
45:44 - run this function that i'm gonna set up
45:46 - right now called random number okay
45:48 - again this function does not exist yet
45:50 - so let's create it so i'm gonna make a
45:52 - function which is just gonna look
45:54 - something like this okay and let's set
45:55 - up that data array that i want to end up
45:58 - returning and what i could do is create
46:00 - a simple for loop right with our
46:01 - initializing with that initialize at
46:04 - zero and when i is less than nine keep
46:06 - looping and of course we're going to
46:08 - increment what i want to do is let's
46:10 - make a random number and to get a random
46:12 - number in javascript we can actually use
46:15 - math.random so this will generate a
46:17 - random number actually between 0 and 1.
46:20 - what does that mean it could be 0 0.5
46:23 - 0.66789
46:25 - what we can do then is this times 100
46:28 - right so we can get a number between 0
46:31 - and 100 okay and then what i want to do
46:33 - from there is remember how i said we
46:35 - could get decimals too we can remove
46:37 - each decimal by just getting a
46:39 - math.floor so let's say the answer
46:41 - between 0 to 100 is going to be
46:44 - 7.9999 math.4 we'll just make that seven
46:47 - so no decimals and what we want to do is
46:49 - for every time in the loop we want to
46:52 - essentially destructure data and add
46:55 - that random number to it so how many
46:57 - numbers will we end up with is going to
46:59 - be determined by this condition so if
47:02 - it's i is less than nine this loop will
47:04 - run nine times and each of those nine
47:06 - times add a random number to the data
47:08 - array and once that's done looping we
47:10 - can return set data okay and again if i
47:13 - hit save we're still going to get
47:14 - undefined because we haven't passed down
47:17 - coin or price we've accepted those props
47:20 - we've put those props down somewhere
47:22 - here we never set it to assets so what
47:24 - i'll do is hop over to the index and
47:26 - let's hard code a coin and let's say
47:28 - this is my btc and again that doesn't
47:31 - exist yet so we'll make it the string
47:33 - and the price of this btc which is not
47:36 - reflective of what it is now it's just
47:38 - gonna
47:39 - 0.89 okay for example so let's hit save
47:41 - let's also hit save on assets and we're
47:43 - going to see set graph color is not
47:44 - defined oh that's right because we have
47:46 - to also make a function to set the graph
47:48 - depending on if it's the right one
47:50 - because if i look in my assets mindset
47:53 - graph color the background color is
47:55 - going to depend on the function right so
47:57 - we're calling random number to get that
47:59 - value and we're also calling the graph
48:00 - color just to fix that let's just make
48:02 - that function set graph color equals
48:05 - arrow function okay it's gonna work
48:07 - similar to before we're gonna we care
48:08 - about the change and if it's less than
48:10 - zero you want it to be this color that i
48:13 - have right here if it's anything else
48:15 - which means if it's greater than zero we
48:18 - wanna return this color hey so there you
48:20 - go there's our chart all right so if i
48:21 - make this a little bit bigger you can
48:23 - see our nice chart and this is supposed
48:25 - to represent bitcoin and here are the
48:26 - random numbers that it's generating
48:28 - right we have a 46 a 9 an 81 20. this is
48:31 - just to simulate the fluctuation the
48:34 - volatility of cryptocurrency right and
48:36 - if we had multiple assets we can make a
48:39 - whole bunch let me just showcase what it
48:40 - would look like if i map through four
48:43 - coins so if i do something like this
48:45 - there's four give it different
48:47 - properties just to distinguish them
48:49 - different prices remember what would
48:51 - happen if it's less than zero like we're
48:52 - in the negatives right let's do a whole
48:55 - nine for what that one's booming and
48:57 - there we go and there's our nice chart
48:59 - cool awesome so it looks like that is
49:02 - the front end let's move on to the next
49:05 - section okay we are continuing to work
49:08 - on our back end and let's go ahead and
49:10 - set up our schemas on sanity so to do
49:14 - that we need to head into our studio
49:16 - folder now and click in the folder that
49:18 - says schemas and click schema.js notice
49:21 - how this is the default schema.js which
49:24 - gives you some really helpful comments
49:26 - on what you need to do here what i'm
49:28 - going to do is clean this up and i'll
49:29 - start explaining what we need to do next
49:31 - cool so to clean the first game up we
49:33 - can get rid of all those comments all
49:34 - you need to know is that we need to put
49:36 - whatever schema we create inside this
49:40 - array right here and if you didn't know
49:42 - is a schema is just essentially how you
49:46 - want to structure the data you need to
49:48 - store in your database what does that
49:50 - mean going in this schema folder let's
49:52 - create a file and i'm going to call it
49:54 - user
49:55 - schema.js okay and this user schema.js
50:00 - it's gonna look similar like this as a
50:01 - prototype so i'll walk you guys through
50:03 - first thing you're gonna do is export
50:05 - const user schema all right this is
50:07 - gonna equal into an object and this
50:09 - object is going to represent what we
50:12 - want our user to look like so once you
50:14 - clean out all the comments your
50:16 - schema.js should look something like
50:17 - this all you need to know is that we're
50:19 - going to create a bunch of schema files
50:21 - and we're going to import them into here
50:24 - in this array what you need to start
50:25 - thinking is what kind of things do you
50:27 - want to store in your database so head
50:29 - over to schemas and create new file i
50:31 - want to say it's user schema dot js okay
50:35 - based off the name you can assume that
50:37 - we're going to be storing users based on
50:40 - this schema so what kind of fields and
50:43 - values should we store in the database
50:46 - so as i'm typing it's going to make a
50:48 - little bit more sense so we're going to
50:49 - say export const user schema awesome i'm
50:51 - going to say equals object and what
50:53 - we're going to do is put a key called
50:55 - name and we're just going to say users
50:56 - then there's something called a key for
50:58 - title which is going to be something
51:00 - similar but usually it's followed with a
51:01 - capital say capital letter users and the
51:04 - type of this is going to be a document
51:06 - if you guys don't know what a document
51:07 - is it's essentially a lightweight record
51:10 - with fields and values but you can look
51:12 - at it as an object so here are the
51:14 - fields and let's define the fields of
51:16 - all right we can define each key or each
51:18 - field by an object so this first one the
51:21 - first field that i care about for a user
51:23 - is going to be that user's address or
51:25 - his wallet address so we can say name
51:28 - address title wallet address and
51:30 - remember title should be capital and
51:32 - i'll always include the type so the type
51:35 - the data type of the address is usually
51:37 - going to be in a string so let's define
51:38 - that here okay moving on the next thing
51:40 - that i care about in this user is going
51:42 - to be its user name so for name you
51:45 - simply put user name with title we're
51:47 - going to say user space capital name and
51:50 - for type it's going to be string awesome
51:52 - okay next every time you make an
51:55 - exchange that's considered a transaction
51:57 - so if i'm logged in we want to be able
52:00 - to save each transaction underneath the
52:02 - user there should also be a reference to
52:04 - any of the tracks transactions that user
52:06 - made so what we could do here is have a
52:09 - field literally called transactions
52:11 - transactions and title is gonna be
52:14 - capital okay and the type of this is
52:16 - gonna be array so my idea here is every
52:19 - user is going to have an array that
52:21 - contains each transaction that user made
52:24 - so you can do a comma here and add an of
52:26 - which also has an array 2
52:28 - type reference okay cool all right so
52:31 - all i'm doing here is making a user
52:33 - schema.js and having a reference to
52:36 - another file that we're going to create
52:38 - called transactions okay so let's go
52:40 - ahead and do that but before we do that
52:42 - don't forget to hop back over into here
52:44 - and import the user schema.js so we're
52:48 - gonna import user schema press tab and
52:50 - it should look something like that and
52:52 - don't forget we need to import it like
52:54 - so awesome so now it's part of our
52:56 - sanity database and now let's make the
52:58 - next one all right so once you add user
53:00 - schema into here let's hit save now
53:01 - let's move on to the next file i'm going
53:03 - to say new file i'm going to call this
53:05 - transaction schema.js
53:07 - okay we're going to store what we're
53:09 - going to set up here is how do we want
53:10 - to store the transactions that we make
53:13 - all the exchanges so similar to what we
53:16 - did before export constraints action
53:19 - schema similar to what we did before
53:21 - export cons transaction schema and then
53:23 - do something like this equals object
53:26 - okay then we're gonna have a name will
53:27 - be transactions title also transactions
53:30 - with a capital t oh make sure that this
53:32 - guy there we go and the type is also
53:35 - gonna be a doc then we're gonna do
53:37 - fields and let's define the keys of the
53:40 - transaction which is going to be tx hash
53:43 - which stands for transaction hash being
53:45 - string okay next is going to be the from
53:47 - address who are we getting the money
53:50 - from and the title is going to say from
53:52 - a wallet that type is going to be a
53:53 - string okay we also want to store the
53:55 - two address and the title is going to be
53:57 - to wallet address with the type of
54:00 - string next we'll have the amount of the
54:02 - transaction title what's the amount
54:05 - number so then we have the amount and
54:07 - then we also have the timestamp which is
54:09 - actually gonna have a type of date cool
54:11 - so that's everything in the transaction
54:13 - schema make sure you have the export
54:15 - cons so that we can import it in our
54:17 - schema.js and it's gonna look like this
54:19 - and you can add that to the concat like
54:22 - so okay and that's it for setting up the
54:24 - schemas what i'll do right now is make
54:25 - another terminal and cd into your studio
54:28 - let's start let's do a sanity start what
54:30 - sanity start does it's gonna set up
54:32 - sanity and you're gonna be able to see
54:34 - your studio on localhost 3333 and when
54:37 - you go over there you're gonna see the
54:38 - desk it's gonna ask you to log in and
54:40 - this is the desk where you can see if i
54:43 - click users we'll see the list of users
54:45 - at the moment there's no documents yet
54:46 - but if you wanted to we can actually
54:48 - create one and test it out that's one
54:50 - thing that's really nice about sanity
54:51 - and their studio here is very easy to
54:53 - use okay cool and with that sanity setup
54:56 - okay after we set up our schemas the
54:58 - next thing we have to do is create a lib
55:01 - folder so what i want to do is click
55:03 - this make sure it's not going into
55:05 - studio actually this should actually be
55:06 - at the root of your folder so i'm right
55:08 - over here write the word lib inside this
55:10 - lib folder we're going to write sanity
55:12 - client dot js the reason we do this is
55:15 - because we have to set up our sanity
55:17 - client here and that's going to help us
55:19 - communicate with our database when we
55:21 - make our api routes so we're going to do
55:23 - import sanity client from at sanity
55:27 - client so i'm going to say import
55:29 - sending client from the client and then
55:30 - we can just do export const client
55:33 - equals sanity client
55:35 - it's going to look like that and to set
55:37 - it up put inside an object and write
55:40 - these keys you're going to say project
55:42 - id with the value of your sanity project
55:46 - id for one second so what you want to do
55:48 - here is actually put in your project id
55:50 - so if you look in our browser click on
55:52 - your project this is what we need to put
55:55 - in here and you can simply just paste it
55:57 - like so but best practice is to actually
55:59 - put your project ids your api tokens or
56:02 - anything like that and a dot env file so
56:05 - let me take this opportunity to create
56:06 - that file so go to the root of your
56:07 - folder here we can write in our env
56:09 - folder we can write sanity underscore
56:12 - project underscore id set it equal to
56:15 - your
56:16 - project id so for me that's going to be
56:18 - this and underneath we also need sanity
56:21 - underscore token to get the api token
56:23 - all you need to do is click this api tab
56:26 - scroll down over here and click add api
56:29 - token and you can just do editor and you
56:31 - can i just usually just write token here
56:32 - go right whatever hit save this long
56:35 - string of text is what we need and you
56:37 - can hit paste on there hit save the
56:39 - reason why we put it in a dot env
56:40 - because if you put it into your github
56:42 - people won't have access to your keys
56:44 - and your tokens so once we have that
56:46 - done we can actually just do process dot
56:48 - env dot sanity under store project id
56:52 - all right make sure it's the same name
56:53 - of what we set up for that environment
56:55 - you can say the data set is production
56:58 - api version will be b1 and this token
57:02 - here is going to be api token which is
57:04 - also just which is simply just process
57:06 - that in b dot sanity underscored okay
57:09 - and then the
57:11 - the end will be false okay go ahead and
57:13 - hit save now we can start using this
57:15 - client for our api right so let's go
57:16 - ahead and set that up you can find the
57:18 - api inside the pages folder so if you
57:20 - look inside the pages folder you'll see
57:22 - this api folder and if you look in the
57:23 - api folder you'll see a hello.js we can
57:26 - actually delete the hello.js because
57:28 - this is just the default one from next
57:30 - remove that and let's make our own so
57:33 - clicking into the app api we can say new
57:36 - file and we can say this api route is
57:38 - going to be create user.js
57:41 - what this does is it's going to let us
57:43 - talk to sanity and help us create a user
57:46 - and store it on our database so the
57:48 - first thing you want to do in order to
57:49 - do that would be to import the client
57:52 - from our lib folder after that we can
57:54 - say we can make an asynchronous function
57:56 - after that we can make an asynchronous
57:58 - function and each of these will have a
57:59 - try catch and for the catch all you have
58:02 - to do is res.stat of 500 which means
58:05 - it's an internal server error if we're
58:07 - in the catch and what we want to do is
58:09 - send a message like so awesome so that's
58:12 - going to be our catch block let's start
58:13 - working on the try block which is going
58:14 - to say const user doc because remember
58:17 - we want to every time we create a user
58:19 - we want to post that user doc into our
58:22 - database so what you need to do is pass
58:24 - in all the correct keys so the type of
58:27 - document that i want to add is the users
58:29 - and the id of that user is we're going
58:32 - to get from the wallet address so we can
58:34 - say rec dot body dot address and the
58:37 - username is going to be unnamed we can
58:40 - later change this in our desk at
58:42 - localhost 3333. and the address of this
58:45 - is just going to be rec.body.wallet
58:48 - okay cool and don't forget at the very
58:51 - bottom here we want to export default
58:53 - create user and every time you make a
58:56 - emv file you have to also reload your
58:58 - project so i'm just going to cancel my
59:00 - terminal and start it up again awesome
59:02 - it's up and running we have our live
59:04 - folder and we started making our api
59:07 - routes next thing i want to do is let's
59:09 - set up our contacts folder after we
59:12 - finish setting up our sani client let's
59:13 - go ahead and set up our context if
59:16 - you're not sure what context is what
59:18 - we're going to do is we're going to
59:18 - utilize the context api from react which
59:21 - lets us take our functions and our
59:23 - variables and lets us access them
59:25 - anywhere into our app so the first thing
59:27 - i want to do is set that up is let's
59:28 - create a new folder at the root and we
59:30 - can call it content inside that context
59:32 - we'll make a new file and let's call
59:34 - that robin hood content to get started
59:37 - using context what we need to do is
59:40 - import create context okay and while
59:42 - we're here we're also going to import
59:44 - use effect and use state from react okay
59:47 - next thing we'll do is let's actually
59:48 - create our context and store that in a
59:50 - variable called robinhood contacts next
59:53 - let's set up our provider which we can
59:54 - do by saying export const robinhood
59:57 - provider and it's going to take in
59:59 - children like so what i want to do next
60:00 - is let's set up our return what this is
60:02 - going to return is the robinhood context
60:06 - dot provider okay and in between the
60:08 - provider it's going to take in children
60:11 - as well the important thing here is
60:12 - actually go inside the opening tag of
60:14 - the provider we're gonna add an
60:16 - attribute called
60:18 - value whatever we pass into value is
60:20 - going to be global and we can access it
60:23 - anywhere in our app so keep that in mind
60:25 - i'm gonna be slowly adding things in
60:27 - here as i fill out the context and when
60:29 - you set up the provider the next step is
60:31 - head over to your pages folder and then
60:34 - head over to underscore app.js and we
60:36 - need to wrap our components with that
60:38 - robinhood context provider so i'll do is
60:41 - i'll set that up right now okay now i
60:43 - clean it up the first step is to import
60:45 - that robinhood contact provider okay so
60:47 - once i clean it up the next step is to
60:50 - import the robinhood provider and you
60:52 - can say from our contacts okay now that
60:55 - it's imported wrap go ahead and wrap
60:57 - your components with the provider by
61:00 - wrapping the provider around our app
61:02 - it's gonna let those variables we pass
61:03 - into value be global so the next section
61:06 - we're gonna be working the login and log
61:08 - out functionality we're going to use for
61:10 - that is something called morales and if
61:11 - you're not sure morales is it's a web
61:13 - development platform think firebase for
61:16 - crypto it's going to allow us to manage
61:18 - our backend and give us tools such as
61:20 - user authentication which we're going to
61:23 - use now so to set up morales head over
61:25 - to your contacts folder and hop over to
61:27 - your browser and go to morales.io
61:31 - right cool and it's going to ask you to
61:32 - sign in if you haven't already make an
61:34 - account and what you want to do is
61:35 - create a new server go ahead and click
61:38 - test nets because if you didn't know
61:40 - we're going to be working on the test
61:41 - net because we need we're going to be
61:43 - working on a test net so that we don't
61:44 - have to use our real money and our real
61:47 - ethereum for our project so i'll go
61:49 - ahead and click rinkeby and you can name
61:51 - your server robinhood clone blockchain
61:54 - the region put the region you're from
61:55 - and again for the network you can click
61:57 - rinkeby i'm gonna go ahead and add
61:59 - instance there it is cool so mouse is
62:01 - really cool because you can have a
62:02 - number of plugins to help you with your
62:05 - app you can also take a look at their
62:07 - awesome dashboard and they support cloud
62:09 - functions all we're going to need for
62:10 - later is under view details we're going
62:12 - to need the url the app id and the
62:14 - master key keep that in mind but for now
62:17 - going back to our context let's go ahead
62:19 - and set up morales okay to set up
62:21 - morales we're going to need to do
62:22 - something we need to add morales to our
62:25 - app so we're going to say yard add react
62:27 - dash morales space all right so we're
62:29 - installing two things react dashboards
62:31 - and morales itself okay once that's done
62:33 - you can start your server up again and
62:35 - what we need to do is in order to use
62:37 - morales is actually import something
62:39 - called use morales from react and now
62:42 - that we imported use morales let's grab
62:44 - a couple of things from use morales okay
62:46 - so what we're going to grab from morales
62:48 - is is authenticated authenticate user
62:51 - logout morales and enable web3 okay
62:54 - morales has this really cool thing that
62:56 - will already check and listen in the
62:58 - backend if a wallet is connected to the
63:02 - app so we want to utilize that for our
63:05 - login and log out button so let's
63:07 - actually make that function and if you
63:09 - remember we called it connect wallet
63:11 - okay and in this connect wallet function
63:13 - we can just use a lot utilize
63:15 - authenticate just like that and now
63:16 - let's work on sign out which will just
63:18 - be con sign out equals arrow function
63:20 - and what we're going to do for sign out
63:22 - is just simply use the log out function
63:24 - for morales look at that so morales
63:26 - makes it super easy to authenticate a
63:29 - user which is super nice and that's all
63:31 - we have to do for that all right coming
63:32 - over to line 11 in my app let's set up a
63:36 - couple use effects because now we want
63:38 - to check if the user is logged in
63:40 - because if the user is not logged in
63:42 - they shouldn't be able to use our app so
63:44 - to check for that i want to have a user
63:45 - effect here in this use effect all we
63:47 - have to do is write an if statement and
63:49 - we can just is authenticate is
63:51 - authenticate is going to be true or
63:52 - false depending on if the user is logged
63:55 - in so if the user is authenticated or
63:58 - logged in we can just get their wallet
64:00 - address so to do that i'm going to make
64:02 - a variable called account equals
64:04 - user.get and you type in eth address and
64:08 - that's how we can get their wallet
64:09 - address we can just store it in the
64:10 - variable here the next step is let's
64:12 - make a variable called formatted account
64:14 - and we want to format that account if
64:16 - you remember what i set up in header we
64:18 - want to see the one x dot dot dot and
64:21 - then the last few letters of your wallet
64:22 - address because we don't want the whole
64:23 - thing we're gonna format that account
64:25 - okay then we wanna set formatted
64:28 - accounts right so we don't have that
64:29 - state yet but remember we imported use
64:31 - state so while we're here we can
64:32 - actually set up those state variables so
64:34 - the state variables we're gonna select
64:36 - for now it's just gonna be kant's
64:38 - current account set current account and
64:40 - format account and set formatted there
64:42 - we go now that after we slice this we
64:43 - can set the formatted account to the
64:47 - format account okay and i don't want to
64:50 - make these the same name that could get
64:51 - a little confusing so i'm going to call
64:52 - this one format account and that's
64:54 - actually what we want to pass in format
64:56 - okay there that's a lot cleaner and not
64:58 - only that we also have to set the
65:00 - current account all right so now after
65:03 - you do this the formatted account will
65:04 - be whatever this is and the current
65:07 - account will be just account which is
65:09 - going to have the wallet address and in
65:11 - the dependency module obviously is
65:13 - authenticated and enable web3 awesome
65:16 - the next thing you want to do is let's
65:18 - have another use effect but the purpose
65:20 - of this one is if that user if this is
65:23 - the first time that user is logging into
65:25 - our app we want to create that user in
65:28 - our sanity database so we're going to
65:30 - make use of that api route we set up
65:32 - earlier with create user so to do so
65:34 - let's set it up so if there is no
65:37 - current account or in other words if
65:39 - current account does not exist you can
65:41 - just return so we're going to make that
65:43 - asynchronous function like so and all
65:45 - it's going to do is create a variable
65:47 - called response and set that equal to
65:50 - a fetch call of our api route that we
65:53 - said okay and it's gonna have a method
65:54 - of post because we're adding a user
65:56 - document to our database you're gonna
65:57 - pass in these headers and for the body
66:00 - we just wanna pass in the current
66:01 - account as the wallet address so we can
66:03 - store it store the value in there cool
66:05 - and then lastly set up your dependency
66:07 - module and this user user effect should
66:10 - run when current account changes okay
66:13 - that seems pretty good for now and
66:14 - remember the value attributes i was
66:15 - telling let's pass in a couple of things
66:17 - to get this log up and login function
66:19 - working so we can type in connect our
66:21 - connect wallet function our sign out
66:23 - function number to put commas you can
66:25 - pass in current account is authenticated
66:29 - formatted account and that should be
66:31 - good for now okay go ahead and hit save
66:33 - and you're gonna notice when you've been
66:34 - saving that there's this little error
66:36 - down here one second oh whoops i'm
66:38 - missing something here i need to have
66:40 - another closing parenthesis to close off
66:42 - my asynchronous function there we go and
66:44 - then in between here it should actually
66:45 - be data equals await
66:48 - response.json because i want to make
66:49 - sure to turn this file into a json file
66:51 - there you go that looks a lot better so
66:53 - now we shouldn't see as quickly here and
66:54 - i hit save yeah as i was saying before
66:56 - you're going to see a little bit of an
66:58 - error here that's because just like the
67:00 - provider in our app.js we need to pass
67:02 - down a morales provider okay so it's
67:05 - going to be a similar process we just
67:06 - have to say import morales provider from
67:10 - react
67:11 - morale okay cool and then i'm just gonna
67:14 - indent this because we're gonna put
67:16 - provider around this whole thing copy it
67:19 - okay amazing and not only that we
67:20 - actually have to pass in a couple things
67:22 - in that provider and remember i told you
67:24 - the details about your robinhood clone
67:26 - we're gonna use some of that now so what
67:28 - we want to do is type in server url and
67:30 - set that equal to your url and we also
67:33 - want to pass down app id set that equal
67:36 - to your app id okay beautiful
67:38 - beautifully okay it's compiling and
67:40 - let's go no more errors that looks good
67:42 - to me so now that we set up our provider
67:44 - let's go ahead and go into our header js
67:46 - and i already started but let's import
67:48 - that use context from react i already
67:51 - started but you want to import use
67:53 - contacts from react so we can utilize
67:54 - the context we adjust another thing that
67:56 - we're going to need to import is let's
67:58 - specifically import robinhood context
68:01 - from our contacts folder and now that we
68:03 - pass those two things underneath the
68:05 - header component we can say something
68:07 - like const object equals muse context
68:11 - hook pass in robin hood context and now
68:14 - whatever we put from value we can
68:16 - actually just pull it straight from our
68:17 - context here so what do we want in the
68:20 - header we want a couple things so i'm
68:22 - going to start formatting it like so i'm
68:24 - going to say get me the connect wallet
68:26 - the sign out function the current
68:29 - account state the is authenticated and
68:32 - the formatted account and i didn't see
68:33 - the pop-up for current account uh
68:36 - probably because we're not going to use
68:37 - later but let's see if we're going to
68:38 - use that but these are the things we're
68:39 - probably going to use so let's take a
68:40 - look and these aren't these are not
68:42 - highlighted because we're actually
68:43 - already using them if you remember
68:44 - connect wallet comes from this on click
68:47 - for the logo for the login so that's why
68:50 - so now these functions in here already
68:52 - exist right even the sign out for the
68:54 - logout it already exists and is
68:55 - authenticated is not grayed out mostly
68:58 - because we're actually the reason it
69:00 - didn't give us any errors before is
69:02 - because when i put is authenticated i
69:04 - had like a static value but now we don't
69:06 - need that anymore so we can go ahead and
69:08 - delete this and if we hit save should
69:10 - see our app so let's see what's going on
69:12 - do some debugging lock screen ah i put
69:14 - uh s authenticated i use effect so let's
69:17 - go back to our context let me fix my
69:19 - spelling guys if you want to put just
69:21 - either not that compile next up what's
69:23 - our next there oh can't perform on
69:25 - unmounted component hey there we go now
69:27 - we're talking so now let's just see if
69:29 - the login and log out function works if
69:31 - i click login oh nice we got the meta
69:34 - mask in here and i made several accounts
69:36 - if you guys remember watching the tinder
69:37 - clone i made several accounts feel free
69:40 - to choose one i'm going to connect with
69:41 - account one it says sign hey okay look
69:44 - and there it is the log out button the
69:46 - login button is now log out and this is
69:49 - actually my wallet address let me just
69:51 - double check that by clicking nice so
69:53 - we're actually logged in the next thing
69:55 - i want to check is our sanity database
69:58 - so i'm going to go over here and let's
70:00 - just make sure we do sanity start oh
70:02 - sorry i'm going to another terminal and
70:04 - it's actually cd into our studio and
70:06 - then we can do sanity start again if you
70:08 - haven't done so already because if we
70:10 - logged in and this was my first time
70:12 - logging in we should be able to see a
70:14 - user and a user with the username
70:16 - unnamed okay our studio successfully
70:18 - compiled all we need to do is go to
70:20 - localhost 333 so i'm going to click that
70:22 - let's click on users no documents of
70:26 - this type okay that's interesting let's
70:28 - just double check our client yeah so i
70:30 - refresh the page and says module not
70:32 - found oh sanity let me just install that
70:34 - again and let's see what happens all
70:36 - right so that's done installing let's
70:38 - open up the localhost pic3 again let's
70:41 - try this again should log out i gonna
70:43 - make sure my metamask is not okay
70:45 - disconnect this to double check cool and
70:48 - we're not logged in i'm gonna hit
70:49 - refresh and let's try this again so
70:51 - again what should happen is if i log in
70:53 - it should create account insanity so i'm
70:55 - just checking the console anything going
70:57 - on nope okay we hit log in we have a
70:59 - notification from metamask what count i
71:01 - want to connect it let's do the first
71:03 - connect there's the signature request
71:05 - creating user we went to try block and
71:08 - then it didn't finish sending out a
71:10 - response so i think the issue is forgot
71:13 - to put something in here all right we
71:14 - need to write an await actually in a way
71:17 - client dot create if not exist because
71:21 - sandy actually has this really cool
71:22 - function that if the user doesn't exist
71:24 - that's how we can create one okay so let
71:27 - me try that again log out double check
71:29 - behind disconnecting our metamask wallet
71:32 - there you go that's why you always got
71:33 - to double check your code it's not
71:34 - connected let's hit a refresh now let's
71:37 - try this again login hit next connect
71:40 - and this should work
71:42 - oh and a weight isn't allowed in the
71:43 - non-async function there you go so let's
71:45 - add the async to this and that shouldn't
71:47 - be adding a user let's hit log out again
71:50 - disconnect that meta mask double check
71:52 - all right guys third time's the charm we
71:53 - got this i made sure it's asynchronous
71:55 - we added the away we're using the client
71:58 - or using the method create if not exist
72:00 - passing in the user doc this should work
72:02 - so login connect create a user let me
72:04 - just check my sanity oh it's there let's
72:07 - go
72:08 - let me just open this up loading the
72:09 - document let's go it's there okay cool
72:12 - so we have the wallet address stored the
72:14 - username is unnamed and that's exactly
72:17 - what we should be seeing so now we're
72:18 - able to restore that so i think the only
72:21 - thing i'm missing is probably because i
72:23 - don't have a res dot send so i'm gonna
72:25 - do a res dot send that's that status
72:27 - where is that status of 201 dot send
72:31 - message and we can say it's a big
72:33 - success let's just add that line in
72:34 - there and that's named this user yep and
72:36 - this isn't going to mean much but we can
72:38 - just say lights amazing okay cool you
72:40 - say success spell that right cool and
72:42 - just because i'm excited i want to try
72:44 - out the logging and logging out one more
72:46 - time this time let's do account 2. so
72:48 - it's not connected let's make this nice
72:50 - and big for the demo let's see if
72:52 - account two can log in all right nice
72:55 - and refreshed hit login this time we'll
72:57 - connect account too and what we should
73:00 - see when we log in is this and since
73:02 - he's never logged in before this should
73:03 - actually create an account sign head
73:05 - over to here oh snap we got user two
73:09 - that's his wallet address unnamed
73:11 - because that's the default name we put
73:12 - and we should see that nice over here
73:14 - let's go so now you can log in you can
73:16 - send this to your friends they can log
73:18 - in with their metamask and it will store
73:20 - that user into the data and if you look
73:22 - in our console we used to have the api
73:24 - result without sending a response if we
73:26 - add the out of that line and now it just
73:28 - says create a new user and that's our
73:30 - console log beautiful so that is the
73:32 - login and logout functionality all right
73:34 - in this section i'm gonna be showing you
73:36 - guys how to create a smart contract so
73:38 - all we need to do is hop into your
73:40 - terminal and cd to that smart contract
73:42 - folder we just set up next you just have
73:44 - to write a command called npx hard hat
73:47 - okay and if you don't know hard hat is
73:49 - an ethereum development environment
73:50 - which lets us compile our contracts and
73:53 - helps us deploy them into the blockchain
73:56 - so all to do is write this npx hardhat
73:58 - and you're gonna see this little menu
73:59 - you can create a basic sample project
74:03 - okay make sure that this is the path
74:04 - enter add a git ignore then it's gonna
74:07 - tell us to can install these
74:08 - dependencies right and i'm gonna be
74:10 - using and i usually use yarn so i'm just
74:12 - gonna do a yarn add and we can install
74:14 - this
74:15 - save div need hard hat we need add
74:18 - nominee collapse waffle chai okay this
74:22 - and lastly we need ethics all right so
74:24 - i'm going to hit enter and i'm just
74:26 - going to give this a couple minutes and
74:27 - we'll cut back when it's done hey there
74:29 - we go all right so it looks like it's
74:30 - done you click onto your patchworks json
74:32 - you should see all of these files you
74:34 - should see that nomiklabs we see chai we
74:38 - see waffles ethers and
74:41 - looks like we're missing one more
74:42 - missing one more we need yarn hard hat
74:44 - of course yarn there you go but that
74:47 - looks a lot better you might add one
74:48 - more package but let's move on to the
74:50 - next so this is all the packages that
74:52 - you need for hard hat the next thing
74:54 - that's not included with hard hat is
74:57 - going to be something called open
74:58 - zeppelin open zeppelin is a library that
75:01 - we can use that helps us standardize our
75:04 - contracts and it's going to make it a
75:05 - lot easier to build them so what we need
75:07 - to do is add that as well we're going
75:08 - and it's just going to be at open
75:11 - zeppelin
75:13 - contracts so it's going to be open
75:14 - zeppelin two peas slash contract awesome
75:17 - that should be all the dependencies that
75:18 - we then we should be good to go all
75:20 - right cool so what we can do now is in
75:22 - your smart contracts folder go into
75:23 - contracts and you're going to see this
75:25 - greeter.sol this
75:27 - reader.sol means solidity and this is an
75:30 - example of what a standard contract
75:32 - might look like all right we won't need
75:34 - it because we're going to be building
75:35 - our own let's go ahead and click delete
75:37 - awesome and then in case you guys don't
75:39 - have it be sure you have an extension
75:41 - called solidity by one blanco which
75:44 - provides ethereum facility support for
75:46 - visual studio code so if you get this
75:48 - extension you hop back over to your
75:50 - contracts and let's click new file and
75:53 - here we're going to make a contract
75:55 - that's going to exchange our ethereum
75:58 - for that for example if we have
75:59 - something called a btc.sol that's going
76:02 - to represent us getting uh bitcoin
76:04 - tokens for our ethereum so one thing to
76:06 - keep in mind what we're exchanging here
76:08 - isn't actual bitcoin or solana we're
76:11 - going to be working on what's called the
76:13 - test network of ethereum and it's called
76:15 - b and it didn't know solana and bitcoin
76:17 - are completely different blockchains but
76:19 - what i want to do is simulate what an
76:21 - exchange would look like but all on the
76:23 - wrinklebee test net so i'm going to call
76:25 - this btc dot so and just for better
76:28 - naming i'm just going to make it a
76:29 - capital b tc there you go cool someone
76:31 - called this btc though and if you didn't
76:33 - know in solidity we always have to
76:34 - specify the version absolutely that
76:36 - we're using and we can just say solid
76:38 - pragma solidity and greater than 0.84 so
76:42 - it's compatible with this version enough
76:44 - essentially oops it's safe next thing i
76:46 - want to do is let's import our open
76:48 - zeppelin and we want to import the erc20
76:51 - and this contracts accessible on a
76:53 - bulldog so right because our contracts
76:56 - are going to be the erc20 standard which
76:58 - usually has to do with money and
77:00 - exchanges all right so to set up a smart
77:02 - contract all to do is simply write
77:03 - contract all right contract and then the
77:05 - name which we put as btc and then you
77:08 - have to say is
77:09 - erc20 all right this just means that
77:11 - this contract is the erc20 standard that
77:14 - we're getting from open zeppelin if you
77:16 - guys are familiar with class-based
77:17 - components it's like uh class ferrari
77:20 - extends car right we're inheriting car
77:23 - class and building on top of it our
77:25 - ferrari but this time we're building a
77:26 - btc contract which is built on top of
77:29 - the erc20 standard makes sense cool so
77:31 - we also want to make an ownable right
77:33 - and we can say constructor because we
77:35 - can own this token and then we can just
77:37 - set it up like this erc20 here we can
77:39 - say quotes the btc and what we want it
77:43 - to look like when we own it is btc like
77:45 - this expected strength input there you
77:48 - go nope we don't need the space here you
77:49 - can just do that that's just setting up
77:51 - our constructor and now we can actually
77:53 - set up our mint function what we want to
77:55 - happen is call and run our contract we
77:58 - want to be able to mint those btc tokens
78:03 - to the user after sending some so we can
78:05 - say address two and another thing about
78:08 - salinity is that you need to specify the
78:11 - type right not like javascript or you
78:13 - can just write let num and it can be a
78:14 - string or a number right here you're
78:16 - saying you're specifying the parameters
78:18 - that this parameter is going to be an
78:20 - address type this amount parameter is
78:23 - going to be an integer that's 256 okay
78:25 - next thing i want to do is make this
78:27 - function public so that we can use it
78:29 - anywhere so that we can call it and then
78:31 - we can do underscore mint two and a
78:33 - month okay and another thing to note
78:35 - about solidity is that they should
78:36 - always be having semicolons when you end
78:39 - it it's a lot more strict notice how we
78:40 - have it here and here all right that's
78:41 - something we should do okay so after we
78:44 - set up our min function we also need to
78:46 - receive let's want to write receive
78:49 - actually oops receive external and
78:52 - payable awesome that's going to be
78:54 - important for later there you go once
78:55 - that's done this is the btc.soul which
78:58 - is essentially just a contract where we
79:00 - can exchange our eth for so whatever
79:03 - coins that you want to exchange or
79:05 - simulate the exchange of you want to
79:07 - create that contract so i'm just going
79:09 - to do the same thing making a new file
79:11 - again and i'm going to call this one i'm
79:13 - going to call this one doge coin that's
79:16 - seoul and essentially it's going to be
79:17 - the same thing so if i paste this i'm
79:19 - pasting the bitcoin contract the only
79:22 - difference that's important is that you
79:24 - have to change this to dogecoin and the
79:26 - abbreviation to the same abbreviation of
79:28 - what you want which is going to be cool
79:30 - so think about what coins do you want to
79:31 - simulate the exchange of or you can just
79:33 - copy and code along with me that's
79:34 - bitcoin it's dogecoin let's simulate
79:36 - solana and just to reiterate this is not
79:39 - actually solana this is going to be a
79:41 - token that represents solana in our
79:43 - exchange and again just going to paste
79:44 - it change the btc to solana change the
79:48 - abbreviation to and just now i'm
79:51 - thinking about it the btc that sold
79:52 - should actually be bitcoin it should be
79:54 - the name of our token okay cool just
79:57 - update it okay cool you can just do one
79:59 - more smart contract and this one will be
80:02 - usdc so i'll make it like this usdc
80:05 - that's all okay cool you can hit paste
80:07 - you can label this as u usdc as usdc
80:13 - save there you go so we have all four
80:15 - smart contracts these are going to
80:16 - represent tokens that we can exchange
80:19 - with our ethereum now that we're done
80:21 - creating our smart contracts let's go
80:23 - over to our scripts folder this is where
80:24 - we can make a script that deploys each
80:27 - contract onto the blockchain so we have
80:30 - a scam a sample script here we can go
80:32 - ahead and delete that we're going to
80:33 - make our own and in the scripts folder
80:35 - i'm going to click new file and i'm
80:37 - going to write
80:38 - deploy.js awesome so now i'm in the
80:41 - deploy.js and since i'm here we're going
80:43 - to need a couple things so the first
80:44 - thing i want to do in the deploy.js is
80:46 - say const ethers equals require hardhat
80:50 - awesome once we do const ethers require
80:52 - hardhat let's go ahead and set up a main
80:55 - function it's going to be asynchronous
80:58 - essentially we want to do is grab each
80:59 - of our smart contracts and deploy them
81:01 - to the blockchain so we have to grab
81:03 - each one so let's start with dogecoin
81:05 - for example so if i say doge factory
81:08 - factory equals and await weight ethers
81:12 - dot get contract factory and then you
81:15 - could just say the name of your contract
81:17 - here so for me i can say awesome so
81:19 - that's the name of our contract i think
81:21 - i really like this actually cool okay
81:23 - that's right constog factory equals
81:25 - weight ethers get contract factory doj
81:28 - amazing but like i said you want to do
81:29 - that for each one what you want to do is
81:31 - then say cons contract equals weight
81:35 - doge factory the variable we set up
81:37 - that's deployed okay from here we can
81:39 - just have a console log that says
81:42 - dogecoin deployed to and then we could
81:45 - say the address that we have which is
81:47 - dogecoin contract because once it gets
81:49 - deployed it's going to point to the
81:51 - address of our contract on the
81:52 - blockchain and we should be able to
81:54 - count to log back and save it because
81:56 - we're going to need it for later okay
81:57 - and like i said we want to do this for
81:58 - every single contract so i'm just going
82:00 - to repeat this process fourth time so
82:01 - i'm going to copy the doge factory as a
82:05 - example and i'm just going to change all
82:06 - the name so this one can be bitcoin
82:09 - factory bitcoin contract this one can be
82:12 - the solana factory alana contract the
82:16 - usdc factory usdc contract and you get
82:20 - the idea so i'm going to quickly change
82:21 - all the names hit save and there you go
82:23 - it's all set up now next thing you want
82:25 - to do is have this async function that
82:27 - it's going to wait for the main function
82:29 - to run and if it's successful we exit
82:31 - with zero and if there's an error at all
82:32 - with this maybe we're gonna exit with
82:34 - one okay that looks good so far gonna
82:36 - hit save so after you finish your deploy
82:38 - script go ahead and open your browser
82:40 - and what we want to do is head over to
82:42 - alchemy if you don't know what alchemy
82:44 - is it essentially gives us developers
82:46 - the tools to communicate to the
82:48 - blockchain think of it as an api to make
82:50 - requests for us to do things and
82:52 - interact with the network so i'm going
82:54 - to head over to alchemy right now and
82:56 - you need to make an account and log in
82:57 - and actually my past projects is over
82:59 - here we're going to make a new app so
83:01 - you can name this the same thing
83:02 - robinhood clone blockchain descriptions
83:04 - you want to make sure that we're the
83:06 - chain is ethereum and that the network
83:09 - is going to be rinkaby like i've
83:11 - mentioned in my past video we're going
83:14 - to be working on the renko beats net
83:16 - because otherwise we'd be using our real
83:18 - money our real ethereum to deploy these
83:20 - contracts because every time we deploy
83:22 - the contract there's something called
83:24 - gas fees which is something we have to
83:25 - pay to use the blockchain right so we
83:27 - want to be using renkobi because we can
83:29 - actually get fake ethereum if you want
83:30 - to see how to get thick ethereum be sure
83:32 - to watch our video on the tinder clone
83:34 - where i show you guys how to get fake
83:35 - ethereum so i'm just going to go ahead
83:36 - and create the app awesome and what we
83:38 - need is to view the right so we need the
83:41 - api key and the http okay so now that
83:45 - you know what that is we can actually go
83:46 - to the root of our smart contract folder
83:49 - now i want to make a file and we're
83:51 - going to have a dot env here as well and
83:54 - if we have an env file here we need to
83:57 - be able to import it to our config.js
84:01 - here so i'll talk about that in a moment
84:03 - but let's just add yarn add this
84:05 - dependency d-o-t-e-n-d so that we can
84:08 - import environment variables to that
84:10 - config awesome okay cool now that since
84:13 - now this is installed let's work on
84:15 - setting up our config and you're gonna
84:17 - see there's a bunch of starter stuff
84:18 - here we can actually just delete all of
84:20 - this keep the top two all right and here
84:22 - we're gonna import that alchemy alchemy
84:24 - api url okay so let's set up those
84:27 - variables by going into the dot e and b
84:29 - okay so your dnv file next thing you
84:31 - have to do is to get the keys so if you
84:35 - click on the right one so we did
84:36 - robinhood up here you're gonna see the
84:38 - api key the http awesome what we need is
84:41 - the http the alchemy api url so we're
84:44 - just going to write just that alchemy
84:46 - underscore api underscore url equals and
84:49 - then just paste that on there the next
84:51 - thing you'll need is your wallet private
84:53 - key so you'll say wallet underscore
84:55 - private key okay that equals and then to
84:57 - get your private key click your meta
84:59 - mask oops not that you want to click on
85:01 - these three dots click on account
85:03 - details and click export private key it
85:05 - will then ask you to put in your
85:06 - password awesome and you'll get this
85:08 - little thing right make sure you don't
85:10 - share your private key to anybody else
85:12 - because then they can steal assets from
85:14 - your account this is just a burner
85:15 - account so don't really mind much if you
85:17 - guys do anything with that and make sure
85:19 - you don't share your private key to
85:20 - anybody else because they can steal your
85:22 - assets which is why we put it in a dot
85:24 - env file so that when you upload this to
85:26 - github or anywhere else they can't see
85:28 - it so go back to your hardhat.config and
85:31 - what we can do is remember the the dotan
85:34 - nev thing that we installed earlier i'm
85:36 - not sure if we did this already but
85:37 - paste that so we can access the univ
85:40 - file go to your module that exports and
85:42 - then you can write a key called networks
85:44 - okay set that to an object here let's
85:46 - define all the networks we're using
85:48 - which is just rinkaby so i can say
85:50 - rinkaby url and the url is going to be
85:52 - alchemy right api underscore url that's
85:55 - the variable we set up next we're going
85:57 - to just do an account it's going to be
86:00 - an array and this is where you put your
86:01 - wallet so you can say wallet underscore
86:04 - private key okay and while we're here
86:06 - you just want to make sure that
86:08 - everything is correct so what i'm going
86:10 - to do is double check my contracts which
86:12 - is going to be
86:13 - btc.soul and i also took the liberty of
86:16 - deletingthegreeter.sol in between so
86:18 - once you do that i'll double check that
86:20 - the contract says the right name
86:21 - contract btc is erc20 double check with
86:24 - dogecoin after you double checked
86:26 - everything i added this dot deploy to
86:29 - make sure each contract gets deployed i
86:31 - can go down to my terminal now and run
86:33 - this command npx hard hat run script
86:36 - slash deploy.js network ring could be
86:39 - all right what's this going to do is
86:40 - it's going to use hard hat to run our
86:43 - deploy.js script and if we know that in
86:46 - turn this will run each contract and
86:47 - deploy it to the blockchain so i'm going
86:49 - to hit enter and this should work and if
86:51 - it takes a while that's probably because
86:52 - it's communicating with the blockchain
86:54 - because ring coupe is just a little slow
86:56 - when it makes transactions so opening up
86:58 - my metamask this is how much ease i have
86:59 - currently and you could probably speed
87:01 - this up for you guys so you don't have
87:02 - to wait as long as me all right we got
87:03 - bitcoin solana come on one more don't
87:06 - fail me now hey and we got dc
87:09 - let's go so all of our contracts
87:12 - actually live on the blockchain right
87:14 - now isn't that insane and you could tell
87:16 - because this is the actual contract
87:18 - address right we're getting the bitcoin
87:20 - contract address so it's important that
87:22 - you guys actually save all these
87:24 - addresses because that's what we're
87:25 - going to reference later with our
87:28 - robinhood app so what i'm going to do is
87:30 - remember your lip folder let's go to
87:32 - your lip folder this should only be
87:33 - sanityclient.js in there we're gonna add
87:35 - a new file and we're gonna call it
87:37 - constance.js
87:39 - yep sounds about right and what we wanna
87:41 - do now is something like this export
87:43 - const and then say something doge
87:45 - address okay we're going to save each
87:47 - one into a variable all right so write
87:49 - it like that you can go ahead and copy
87:52 - each one so this guy is dogecoin right
87:55 - because we want to reference the right
87:56 - contract with our app so export const
87:58 - bitcoin equals that and i'll just start
88:01 - writing everything out export solana
88:03 - okay cool awesome we're not done just
88:05 - yet the next thing i want to do is we
88:07 - actually need to get the abi from each
88:10 - contract it's going to be important for
88:12 - later and to find that open your smart
88:14 - contracts folder right go into your
88:16 - artifacts and go into the contracts
88:18 - there again in that artifacts folder and
88:20 - if you open up btc.soul we want to copy
88:24 - each.json into our cons into our lib
88:27 - folder so i'm just going to copy each
88:28 - one make sure you get the dot json and
88:30 - not the dot dbg dot json get the dodges
88:33 - okay and paste it cool so now you have
88:35 - those four you don't need the greeter
88:37 - that's all one because that was the
88:38 - default solidity contract from earlier
88:40 - that i deleted in between so what i want
88:42 - to do now is go to your constants we
88:44 - need to actually still get the abi from
88:46 - that dot json so we could do that by
88:48 - saying doge from dot forward slash
88:51 - dogecoin.json import bitcoin from dot
88:54 - forward slash btc btc.json and you get
88:56 - the idea so now that we imported each
88:58 - file let's extract the api from them so
89:01 - you could say export const doj abi
89:03 - equals doge right that's what the import
89:06 - dot api and that's it so do that for
89:08 - each one again so once you have all that
89:09 - while you're exporting all the variables
89:11 - let's move on to the next section all
89:13 - right in this section i'm going to be
89:15 - showing you guys how to do the swap
89:17 - token functionality and how to save our
89:19 - transactions onto sanity so before i do
89:21 - that i actually want to take a look at
89:22 - our code and take a step back and fix up
89:25 - a couple things before moving on sounds
89:26 - good awesome so hop over to with me to
89:28 - swap tokens js if you remember earlier
89:31 - we were using the create user route help
89:33 - with our login and log out functionality
89:35 - but if you look at this file the swap
89:37 - tokens.js
89:38 - in your api folder this controls how we
89:41 - can save a transaction document and
89:43 - store all our transactions now taking a
89:45 - look at it you might notice that we
89:47 - actually need to make this an arrow
89:48 - function and if you were getting any
89:50 - errors up into this point it's probably
89:52 - because we had to finish out finish out
89:54 - our try block you wanted to say await
89:55 - and then use this nifty little method
89:57 - that sanity has called
89:59 - client.create if not exists right and
90:03 - then you want to pass in our text
90:04 - document sanity is super cool because it
90:07 - actually has a method that checks if
90:09 - this document is already is being if
90:11 - this document is already being stored
90:12 - and if it's not being stored already
90:14 - it's just going to make it if it is it's
90:16 - going to ignore it so this is really
90:18 - nice and then we can also have a
90:20 - res.status right 201 send and what it's
90:24 - going to send is an object with a
90:26 - message with a message that says success
90:30 - and just to make sure i like to have
90:31 - this console log and we can just say a
90:33 - string something like swap tokens was a
90:37 - success okay so that make sure you have
90:39 - that it looks exactly like mine so
90:41 - there's no any no errors or anything
90:43 - like that the next thing i want to do is
90:45 - i want to finish out the context
90:48 - okay so hop over to the robin hood
90:50 - context with me and i'm going to make it
90:52 - bigger since this is the main focus at
90:54 - the moment and the first thing you're
90:55 - going to want to do is import all of our
90:58 - smart contracts and their abis so if you
91:00 - remember in your
91:02 - if you remember we find these in our lib
91:04 - folder right everything in our
91:06 - constants.js we're going to need all of
91:07 - this so make sure it says everything
91:10 - properly like dojbi bitcoin abi solana
91:13 - avi usdc and so forth because that's how
91:15 - you're going to be importing these make
91:17 - sense cool so hop over to robinhood
91:19 - again set it up and we can do something
91:21 - like dojbi we can say bitcoin abi solana
91:25 - abi and what else did we have usdc okay
91:29 - and then after that just get all the
91:30 - addresses as well since we're here so
91:32 - doge address bitcoin address barcelona
91:36 - and oops and usdc okay this will only
91:39 - work if you have it the same way you're
91:42 - exporting it so
91:44 - notice how i said bitcoin api instead of
91:46 - btc abia make sure it matches what you
91:48 - wrote in your constants folder okay then
91:50 - you can just say from dot dot forward
91:52 - slash lib slash constants cool so now
91:55 - that's done hop over to line 20 to 21
91:59 - with me and let's add the rest of our
92:01 - states so what i'm going to add now is
92:04 - const coins coin select and of course
92:07 - set coin select and we can set the
92:09 - default to doge what this is doing it's
92:12 - just a state variable that i'm using to
92:15 - keep track of what coin am i selecting
92:18 - here this is represented by coin select
92:20 - that's why if i click something here i
92:22 - see set coin select is not awesome cool
92:24 - so that's coin select another one we're
92:25 - gonna have is something i'll call two
92:27 - coin i'm gonna make another options menu
92:30 - which i'll explain in a couple minutes
92:32 - but just know that this is also gonna
92:33 - keep track of a coin another coin that
92:36 - i'm selecting and it's gonna be empty
92:38 - okay next we also need to keep track of
92:41 - what our current balance is and we can
92:43 - set that equal to empty a string as well
92:46 - and last but not least we also want to
92:48 - keep track of an amount set amount
92:50 - equals cool when that should be all the
92:53 - states that we need time to work on the
92:54 - rest of the functions all right so that
92:56 - should be all the states for now next
92:58 - thing we should do is let's update our
93:00 - use effect so if you look over here one
93:02 - thing that should be is this should
93:03 - actually be and then come under the
93:04 - setcurrent account now let's just make a
93:06 - variable called current balance okay and
93:09 - then what we're going to do is we're
93:10 - actually going to use morales to get our
93:13 - metamasks current balance so we can do
93:15 - that by doing morales.web3apr.account
93:19 - then from there we could do a get native
93:21 - balance we could see the suggestion
93:23 - right there cool and then we can pass in
93:25 - there's an object it says rinkaby oh
93:28 - sorry it should actually be an object
93:29 - that says chain and then specify ring
93:31 - could be and then the address of that
93:34 - account should just be the current
93:36 - account which should be cool and that's
93:37 - how we make a call with morales to get
93:40 - the meta masks current balance awesome
93:42 - all right cool and after that on line 39
93:45 - we're gonna make another variable called
93:46 - balance to eth because when we get our
93:49 - native balance with morales it's going
93:51 - to be in a way we also got to confront
93:53 - that back to ether so we can do that by
93:55 - saying morales dot units
93:57 - from way and then we can target our
94:00 - balance by saying current balance okay
94:02 - and after that we're going to make a
94:04 - variable called format balance and
94:06 - that's going to equal our balance to eth
94:09 - and i want to parse float it parse float
94:11 - and since i don't want a lot of decimal
94:13 - places i actually just want the first
94:15 - threes okay that's not too bad so to say
94:18 - dot two fixed okay last but not least
94:20 - set balance to formatted balance awesome
94:23 - and that should be a good use effect
94:25 - okay let me just double check if there's
94:27 - anything here i need no looks pretty
94:29 - good cool all right so let's set up the
94:31 - rest of our functions now so coming
94:32 - above connect wallet let's make a
94:35 - function called the contract address get
94:38 - contract address okay the get contract
94:40 - address is exactly what it sounds like
94:42 - and depending on what coin i select it
94:46 - should grab the corresponding abi and
94:49 - the current corresponding address so if
94:51 - i get bitcoin i should get bitcoin and
94:53 - again it's not going to work because we
94:54 - haven't set it up but like i said we can
94:56 - just express that using conditions so if
94:58 - i say if coin select equals something
95:02 - like btc we should get bitcoin address
95:06 - simple enough so what you could do is
95:08 - simply just copy that and restructure it
95:10 - cool so we should have four btc we also
95:13 - have dosh return doj address okay if any
95:16 - of these are misspelled or typed wrong
95:18 - it's going to cause some issues so if i
95:20 - say seoul say solana address and this
95:24 - one if i say usd usdc address all right
95:28 - yeah so it should return whatever we
95:30 - typed here notice how it's not grayed
95:32 - out we're actually using awesome okay
95:34 - after that i wanted to explain that i'm
95:36 - going to make another drop down here so
95:37 - there should be one drop down right this
95:39 - is going to be the coin or token that i
95:42 - want to change and then there's going to
95:44 - be a second drop down under here which
95:46 - is going to be the token that i just
95:48 - want to swap to so if i were to show
95:51 - that i'd go over to the buy tokens
95:52 - component and you see where it says
95:55 - select here now we can actually just
95:56 - copy that i copy from the opening select
95:59 - to the closing select and in the next
96:01 - line literally just paste it in there so
96:03 - there should be two and here you can
96:04 - actually erase that eth option so we
96:07 - have btc doge soul usdc and this one
96:09 - should have btc east dodge soul and usd
96:12 - okay so save and if you look there we go
96:14 - there should be two here this is gonna
96:16 - be the coin select it's been tracked
96:18 - with the coin select state and this
96:19 - one's gonna be tracked with two coin so
96:21 - what we're gonna need is a function that
96:24 - also gets the two address right because
96:26 - we have a function for get address so
96:28 - going back to our contacts let's make a
96:31 - const get to address all right just
96:34 - gonna do the functionality why it's
96:35 - gonna do the same thing all right which
96:36 - is going to be depending on the coin
96:38 - select get those addresses okay one
96:41 - thing we're missing is we need a const
96:43 - get 2 abi which is going to get the abi
96:46 - of the coin that i want to get from so
96:48 - this one okay equals arrow boom and this
96:51 - should be the same thing right if
96:53 - coincidence all right and if remember
96:54 - this is to get two address this should
96:56 - actually be two coins that's what i'm
96:57 - saying boom one second yeah these
96:59 - shouldn't say coin select it should
97:00 - actually say two coin right we're gonna
97:03 - use that state or keep track of right
97:05 - here and in the get to avi it should be
97:08 - the same thing if the two coin is any of
97:10 - these we should be the addresses boom
97:13 - oops so you can actually fix this really
97:15 - quickly by highlighting address pressing
97:17 - command d or control d and then just
97:19 - moving your cursor like and i can just
97:20 - erase all of it cool so that didn't fix
97:22 - all of them but we can fix i'm gonna try
97:24 - that again so there's a quick way to fix
97:25 - this what you can do is highlight
97:26 - address and press ctrl d or command d
97:29 - press backspace to erase all the
97:30 - addresses that you highlighted and i can
97:32 - just switch all of them to abi and we're
97:34 - good to go hey and we're actually using
97:36 - all the imports amazing cool yeah so
97:38 - these are our helper functions that
97:40 - we're going to need for our mint
97:42 - function so let's actually work on that
97:44 - mint function now so coming down below
97:46 - here i want to say const mint equals
97:49 - async function all right and if you
97:51 - confused right now the min function is
97:54 - going to run right when i press oops and
97:57 - if you're confused at all the mint
97:58 - function is going to run when i press
98:00 - send because the idea is if i want mine
98:04 - because the idea is if i want ethereum
98:06 - it's not going to work the idea is if i
98:07 - want to switch my doge for
98:09 - bitcoin i should be able to send my doge
98:13 - to my dogecoins to the bitcoin contract
98:16 - and then get mint those bitcoin send
98:18 - them over to me okay so in this mint
98:20 - function whenever we do asynchronous
98:22 - functions we usually have a try catch
98:24 - here that i'll set up now it's gonna say
98:26 - error boom and in the catch you can just
98:29 - have console error and say error dot
98:32 - message that's it for the catch the most
98:34 - important part of this is going to be
98:35 - that try block the most important part
98:37 - of this is going to be that try block so
98:38 - coming down to the mint function if the
98:42 - coin select equal to ethereum right
98:45 - because if you remember how our app
98:46 - works we are using ethereum to get these
98:50 - tokens right these we don't have this
98:51 - right at all right away we have to use
98:53 - ethereum and pay with the smart contract
98:57 - to get these tokens minted from there
98:59 - once i do have doge for example i can
99:02 - trade that for any of soul tokens all
99:04 - right then it becomes like a whole token
99:06 - exchange all right so we can do that's
99:07 - why i also have eth here instead of here
99:09 - because we can't switch swap our tokens
99:11 - for east at the moment okay cool so if
99:13 - the coin select is eth right i don't
99:15 - want to swap tokens i actually just want
99:17 - to send ethereum to that contract so i
99:20 - can get tokens so the first thing i'll
99:22 - do is have another if statement if is
99:24 - authenticated if not is authenticated
99:27 - return and that's it this is just
99:29 - checking if the user is not logged in we
99:31 - shouldn't be able to run the min
99:32 - function so that's the edge case there
99:34 - next thing we could do is having to wait
99:36 - for
99:36 - morales.enable web sure we enable web3
99:40 - and then we can say the contract address
99:42 - right the contract address of what we
99:45 - want is going to be equal to whatever
99:48 - get contract address gets and try that
99:50 - again all right after you do
99:51 - morales.enableweb3 the next thing you
99:53 - want to do is create a variable here and
99:54 - call it contract address because in this
99:57 - variable it's going to be equal to get
100:00 - to address so depending on what's
100:02 - selected here it's going to get that
100:04 - contract so that would be saying if this
100:06 - was ethereum i'm going to be getting
100:07 - doge with that i'm going to be getting
100:08 - doge with that all right so that's why
100:10 - we're setting it equal to get to address
100:12 - and i probably should spell this right
100:13 - get contract address and after that we
100:15 - should also get the avi const api is
100:18 - going to be equal to get to api all
100:20 - right because again if i'm if the second
100:22 - option selected is doge we should get
100:25 - doge's contract address and doge's abi
100:28 - make some space here i want to make a
100:29 - variable called options and this is
100:31 - going to be important because this is
100:32 - what i'm going to be passing in okay so
100:35 - i'm going to be making a variable called
100:36 - option set it equal to an object because
100:38 - we're going to be passing in all of
100:39 - these things here so contract address is
100:41 - just going to be set to contract address
100:44 - and the function name is actually going
100:45 - to be mint okay and the abi will be the
100:48 - abi and the params here you can say two
100:51 - is going to be the current account and
100:53 - the amount you set it to morales units
100:56 - dot token you say 50. cool all right
101:00 - that's the param all right afterwards
101:02 - underneath here in line 101 after the
101:05 - options object we can run a function
101:07 - called send eth at that send and this
101:10 - doesn't exist yet but we're going to
101:11 - make it much later and that's how we're
101:13 - going to send money over okay next thing
101:15 - we want to do const transact transaction
101:17 - noise equals awaits morales dot execute
101:21 - function and this is where we packed in
101:23 - the options okay next we'll have our
101:26 - receipt here equal to weight transaction
101:29 - weight four oops they should say const
101:31 - all right and then lastly we're going to
101:33 - have a save transaction function and
101:35 - again this doesn't exist yet either but
101:36 - it's going to make use of our api route
101:38 - and you want to pass in receipt dot
101:40 - transaction hash the amount and the
101:43 - receipt to cool and that's just the if
101:45 - statement the next thing is if coin
101:48 - select isn't ethereum then we're doing a
101:50 - regular token to token which means we
101:52 - should run the swap tokens function
101:54 - which we have to make ourselves later on
101:56 - and also run the save transaction and
101:59 - it's pretty much the same thing you do
102:00 - receipt transaction hash the amount and
102:03 - receipt cool so notice how we have a
102:05 - couple of helper functions we still have
102:07 - to make so let's work on that now okay
102:09 - coming down here in between connect
102:11 - wallet and the min function i'm gonna
102:13 - make another one called const swap
102:16 - tokens so like i said if the coin select
102:18 - is not ethereum we should just do a
102:20 - token to token swap so what we'll have
102:23 - here is actually make this a synchronous
102:25 - and then try catch it's gonna be error
102:28 - console dot error error message awesome
102:32 - all right cool now working on the try
102:34 - block if again check if they're
102:36 - authenticated return edge case is done
102:38 - now we can just do first thing we want
102:40 - to do is no weight morales.enable
102:43 - web3 after you enable web3 the next
102:45 - thing you want to do is have another
102:46 - edge case here if the coin select is
102:48 - equal to the coin right if both drop
102:51 - downs equal each other like it does
102:53 - nothing should happen we shouldn't be
102:54 - able to swap tokens with the same tokens
102:56 - like the same thing right so here's that
102:58 - edge case if coin select is equal to two
103:00 - point you also just want to return
103:02 - nothing should happen all right so then
103:03 - the last thing that could possibly
103:05 - happen is if the coin select doesn't
103:06 - equal two coin which means we're just
103:08 - doing the swap so we can just say const
103:10 - from options right this is the similar
103:13 - to what we're doing with the mint
103:14 - function mint function we want to make
103:16 - an options object this one's going to be
103:18 - the options object for the from so we
103:21 - can say type erc20 is going to be
103:24 - morales units token the amount and 18.
103:28 - all right this amount is going to be the
103:30 - state that's passed in which is coming
103:32 - from whatever number we put in the
103:34 - amount input field okay cool then we
103:36 - have to put in the receiver so if i say
103:39 - receiver that's going to be the get
103:41 - contract address and the contract
103:42 - address gonna be get contract cool all
103:45 - right so then we need the cons to mint
103:48 - options right because you should look at
103:49 - it like this if i have for example
103:51 - solana it's going to be broken but if
103:53 - i'd salon it to dope i'm going to send
103:54 - my solana tokens to the doge contract
103:57 - address and get and then that contract
103:59 - address mint new doge tokens to send to
104:02 - me that's the goal so we need these two
104:04 - mint options where you say contract
104:06 - address is the get to address the they
104:09 - get two address function name should
104:12 - just be mint because we're running the
104:14 - mint function of that and the avi of
104:17 - this contract is going to be the same as
104:19 - the get 2 api and the params it's just
104:21 - going to be the 2 current account that's
104:24 - who we're sending these tokens to and
104:25 - the amount of tokens is going to be the
104:27 - amount we passed in so that's going to
104:28 - be units again that token amount cool so
104:32 - we got the from options and we got two
104:34 - mint options next we need a couple
104:35 - variables here which is from transaction
104:37 - equals await or alice.transfer and then
104:40 - pass in from options okay cool is that
104:42 - we also need to store the mint
104:44 - transaction and do an await
104:46 - [Music]
104:47 - execute function and pass the two mint
104:50 - option okay and then now we need to
104:52 - store the receipt so if i do the from
104:54 - receipt set it equal to wait from
104:56 - transaction and actually do a dot week
104:58 - on a really high level the dot weight is
105:00 - basically an await but for the
105:02 - blockchain i want to wait for it to
105:04 - finish and also wait for it over here
105:06 - okay also do the same thing for the two
105:08 - receipt to mint transaction and then we
105:11 - can also console log the from receipt
105:13 - and to receipt just to see it okay cool
105:16 - so that is the swap tokens all right
105:18 - there's a couple more we need to make
105:20 - the next helper function i want to make
105:22 - it's called the send also asynchronous
105:25 - cool so usual suspects here if not
105:27 - authenticated just and then const
105:30 - contract address equals the get to
105:33 - address right because when we're sending
105:34 - eth the only address that we care about
105:36 - is the address that i want to get tokens
105:39 - of so if i'm using eth i'm going to get
105:41 - dogecoins if i select doge so i need the
105:43 - two address here set up our options
105:45 - again and type is going to be native and
105:47 - the amount this actually controls the
105:49 - amount of ether sending for each token
105:51 - and basically each transaction every
105:54 - token is going to cost every time i make
105:56 - a transaction to mint these tokens it's
105:57 - just going to cost point zero one each
105:59 - you can change this value to whatever
106:00 - you want for the sake of doing this over
106:02 - and over again i make it really cheap so
106:03 - i can do multiple tests so make an
106:06 - amount to 0.01 eth to as the price to
106:10 - mint these tokens and then we could do a
106:12 - receiver it's just going to be the
106:13 - contract address okay next is a const
106:15 - transaction save that transaction with
106:17 - the morales dot transfer options now
106:20 - pass it in there in the transaction
106:23 - variable it's variable and of course we
106:26 - also have to run save transaction okay
106:28 - all right so that's the send eth
106:30 - function last helper function we need to
106:31 - make is the save transaction function
106:35 - yep this is going to be calling our api
106:37 - route so let's make it asynchronous all
106:39 - right we actually don't need to try
106:40 - catch actually what i'll do for this one
106:42 - is the first thing i'm going to write is
106:43 - an await and it should call our api
106:46 - route which is just api
106:48 - swap i believe yep you can add a comma
106:50 - here and pass in a couple of things all
106:52 - right a couple things we need to write
106:54 - is what's our method it should be post
106:55 - because i'm adding uh a transaction
106:58 - document to send headers all right
107:00 - content type this one is pretty standard
107:02 - content type is colon application
107:06 - so that's the headers then there's a
107:08 - body key which we can oops not that
107:10 - should be an object should be body then
107:13 - we want a json.stringify and what we
107:15 - want to stringify is this object so tx
107:18 - hash is going to be just t xhash and
107:20 - then from is going to be current account
107:23 - two is going to be two address nope and
107:26 - amount is going to be parse float and
107:29 - all right and if you remember when we
107:31 - call save transaction it takes in a
107:33 - couple parameters so we have to define
107:35 - those parameters so this is going to be
107:36 - the tx hash of the amount and who we're
107:39 - sending to yup and that's all the things
107:41 - we're going to fill out here in the box
107:42 - cool all right cool so after that's
107:44 - pretty much everything in the context
107:46 - that we need the next thing we have to
107:47 - do is make sure you go into value here
107:51 - and pass it in as value because that's
107:52 - going to make it global to the rest of
107:54 - our account of our app so i'm just going
107:55 - to say set amount mint we need the set
107:59 - coin select we need the point select
108:02 - balance swap tokens amount 2 coin and 2
108:06 - coins awesome so add all those variables
108:09 - into value to make it global throughout
108:11 - our app and at this point everything
108:13 - should be glowing amazing cool there's
108:16 - not much left guys there's actually
108:18 - almost done with our app so let's move
108:20 - on to the next part all right so after
108:21 - you add all these variables we're
108:23 - actually almost done guys so if you made
108:25 - it this far into the video comment down
108:27 - below something like gorilla so if i see
108:29 - a gorilla in the comments i know that
108:31 - you guys watched the whole way through
108:32 - and you made it this far okay so let's
108:34 - see how many comments we get if i don't
108:35 - see any then i know you guys are not
108:37 - really watching this so let's crush
108:39 - these builds next thing is let's head
108:40 - over to pages and go to your index if
108:44 - you remember in your index we have
108:45 - something called the assets and i'm
108:47 - gonna bring up the browser page again
108:49 - and look something like this so this
108:51 - right here is our assets component right
108:54 - now we have about four
108:56 - static these actually should be a little
108:58 - bit more dynamic in the sense that i
109:00 - want to get the top 15 coins and show a
109:03 - little nice graph on them all right we
109:04 - do that by making an api call to an api
109:08 - call to coin ranking and we got that
109:11 - through rapid api so the first thing you
109:12 - want to do is end your terminal real
109:14 - quick and just do a yarn add axios to
109:17 - make this call okay and while that's
109:18 - installing head over to google and then
109:20 - you can do coin ranking rapid api okay
109:24 - it's going to be loading it's going to
109:26 - ask you to log in and once you log in
109:28 - you should be able to see your api key
109:31 - and we're basically going to use all
109:32 - this to get the coin rankings okay all
109:36 - right looks like axios is done okay it
109:38 - looks like axios is done and the next
109:39 - thing you want to do is go to your emp
109:42 - file and let's add another variable
109:44 - called coin ranking host set that equal
109:48 - to whatever is up here you don't need
109:50 - the quotes you can just get the coin
109:51 - rank and stuff so this is your host then
109:53 - we can do a coin underscore ranking and
109:56 - key set that equal to this whole key
109:59 - right here and again you're not going to
110:00 - see this key until you sign up so go
110:03 - ahead and do that put it into your
110:04 - environment variables hit save and yarn
110:08 - dev again in your terminal so we can
110:09 - load that dot env see loaded env file
110:12 - okay and then what you want to do next
110:13 - is hop over to your index.js we're going
110:15 - to use get static props for this so
110:17 - notice how in the host i'm calling the
110:19 - environment variables host and key and
110:22 - then the important part that you need to
110:23 - know is this return props and then
110:26 - destructure coins if you are familiar
110:28 - with destructuring props it's working
110:29 - the same way i can come up to home right
110:31 - here say coins and cons a lot of coins
110:34 - and you should see what we're getting
110:36 - back from the api call okay cool and
110:38 - another important note is come below
110:41 - here in line 12 for me and let's import
110:43 - axios from axios okay so i'm gonna hit
110:46 - save and hit refresh and we should see
110:49 - about 50 yep and we actually don't need
110:51 - this many coins that would be a lot of
110:53 - assets for our app i only need 15 so
110:56 - while we're here at the top let's do
110:57 - another import and import use state and
111:00 - while we're here let's get use context
111:02 - as well okay cool so once that's done we
111:04 - can also import our robinhood contacts
111:07 - so come below down here and let's set up
111:09 - that state this say my coins and notice
111:12 - how i'm not using my coins because i
111:14 - know i'm not going to need to update my
111:16 - state this is the only time i'm going to
111:18 - do that and the initial state actually
111:19 - is going to be an array which uses the
111:21 - spreader operator to slice it and only
111:24 - get the first 15. so then oops so if you
111:28 - do that and then on the next if i could
111:30 - get to the next line hold on i could do
111:31 - it then on the next line we can
111:33 - console.log my coins to see what we get
111:35 - back oh it should be points inspect and
111:38 - you can see that we actually got 15
111:41 - points i'll refresh this so it looks a
111:42 - little bit cleaner boom 15 we can use
111:44 - that and that's what we want for this
111:46 - sidebar here so you remember how it
111:48 - works it's using these static assets
111:51 - let's map through my coins instead so my
111:53 - coins dot map and for every coin in my
111:57 - coins i want to set up a couple things
112:00 - so it's gonna look like this let price
112:01 - equals the parse float of the coin dot
112:06 - price it's gonna grab the price value
112:08 - parts float it set its price because
112:10 - what i can do from there is do a price.2
112:13 - fixed right because it's gonna be some
112:14 - sort of decimal that i want to be
112:17 - reduced to two decimal places and then
112:19 - we can return in assets and the key of
112:21 - this we can actually use the uuid the
112:24 - coin will be exactly the same as and the
112:27 - price will be the same as the price that
112:29 - i just formatted so hit save bam look at
112:32 - that doesn't that look nice guys all
112:34 - right this is feeling a lot more like
112:35 - robin hood right we get the different
112:37 - kinds of graphs the red or the green
112:38 - depending on if it's over under amazing
112:41 - cool so now that we have all these
112:42 - assets here the next thing i'm looking
112:44 - at is if you look it says 23 each this
112:47 - is supposed to represent how much
112:48 - ethereum i have in my portfolio and i
112:50 - wish i had 23 heath but that's not the
112:52 - truth so let's fix that oh we can do
112:54 - this by coming down below remember how
112:56 - we imported context we can actually pull
112:58 - from our context and say let's get the
113:00 - balance from our robinhood context this
113:03 - is how we can do it now that we have the
113:05 - balance variable we can insert that
113:07 - wherever we need so go to where it says
113:09 - 23 and i'll just insert balance there
113:12 - and if i hit save i'm logged in bam
113:14 - that's how much ether i have we're good
113:16 - to go awesome all right and now the only
113:17 - thing is left to do is let's set up the
113:20 - swap tokens feature you ready all right
113:23 - guys we are at the finish line now and
113:26 - i'm going to head over to buy tokens.js
113:29 - and the very first thing i'm going to do
113:31 - is let's get our contacts in here so
113:33 - curly brackets use context and whenever
113:36 - we do that we also need the context that
113:38 - we want to use which is robinhood from
113:40 - here let's take the variables that we'll
113:42 - need which is going to be const and i'm
113:44 - going to take a couple on this one so we
113:46 - can just do equals to use context right
113:48 - so the ones that we're going to take
113:50 - from this is authenticated
113:52 - set amount mint set coin select coin
113:56 - select two coin i believe oh and of
113:59 - course set two coin okay might not need
114:01 - coin and set two coin one set yep so
114:03 - this makes sense coin select it's
114:05 - actually anytime says two coin here this
114:07 - actually should be two coins so this
114:09 - should be two coin and this should be
114:12 - set to yep and this one should be coin
114:14 - select and set coin select there should
114:17 - be coins and two coin now we're using
114:18 - everything looks good okay all right so
114:21 - now that we have all of that i had a
114:23 - bunch of like state variables or default
114:26 - variables here we can take that out now
114:28 - that we're actually importing all that
114:29 - stuff hit save you should get no errors
114:31 - because we're pulling those variables
114:33 - and i want to double check something in
114:36 - my smart contract folder in my scripts
114:39 - deploy make sure that all of this is
114:41 - correct we deployed our contract it has
114:44 - the right names like i'm saying bitcoin
114:46 - solana usdc getting the right ones usdc
114:49 - so on a btc and it's going to be based
114:51 - on what you put here construct solana
114:53 - construct dogecoin construct usdc and
114:56 - some kind of cool so that looks fine the
114:58 - next thing i'm worried about is probably
115:00 - just in our robinhood context okay all
115:03 - right i guess the only thing enough to
115:04 - do is just to test it can we switch to
115:06 - eth yep no errors can i switch to usdc
115:09 - awesome cool let's just run the function
115:11 - so if you look in our metamask currently
115:13 - this is how much ether i have and if you
115:15 - look at my assets we don't see any of
115:17 - the tokens but if you do want to see the
115:19 - tokens are you need to import them so
115:21 - let me show you how to do that so
115:22 - remember our constants folder in our lib
115:24 - folder all right this is why i told you
115:26 - to save all the contract addresses so
115:28 - open it up so let's say i pull this
115:30 - contract address copy import tokens if
115:33 - you paste that contract address notice
115:35 - how it already takes up the symbol and
115:37 - the token decimal right now awesome so
115:39 - if i import tokens i should have zero
115:41 - doge because i actually do have zero
115:43 - doge with this wallet next let's get our
115:45 - bitcoin token and i'm just gonna make
115:47 - this bigger it's easier so now our goal
115:49 - like i said we are getting tokens by
115:52 - sending ethereum to them first that's
115:54 - the first exchange and then once we get
115:56 - the tokens we can simulate a dex by
115:58 - swapping token token so let's do it this
116:00 - way i'm gonna do
116:02 - ethereum and select some solana so i'm
116:05 - gonna give this a try so ethereum to
116:07 - solana let's say 50 and here goes
116:10 - nothing i press send okay cool so the
116:12 - first issue that i have there i'm gonna
116:14 - hit reject because that doesn't that's
116:16 - that shouldn't refresh so you saw that
116:18 - refresh that means every time i press
116:20 - send or submit the form is reloading the
116:23 - page you never want that what we should
116:25 - do is go to buy tokens and i think i
116:28 - know what the issue is yeah so the type
116:30 - equals submit here you could say
116:32 - type equals but and that should prevent
116:34 - the refresh so i'm going to go to eth to
116:36 - solana send 50 percent there we go so no
116:40 - if refresh happened i can make this
116:41 - bigger now yeah we should have two first
116:44 - one if you see a mint here that's a good
116:45 - sign so let's hit confirm all right and
116:47 - then this is a contract interaction
116:49 - which is also a good sign and since
116:51 - we're talking to the blockchain it's
116:52 - going to take a couple minutes to get it
116:54 - oh 15 transactions yeah it's definitely
116:56 - not 15 transactions that we just did
116:58 - let's take a look hey look at that we
117:00 - got solana boys so now that we got
117:02 - solana we can ask ourselves what if we
117:04 - want to take some of our solano and
117:06 - exchange it for bitcoin all right so
117:07 - let's change it to seoul btc and let's
117:10 - just send something weird like 13. let's
117:12 - see if that's possible okay oh look at
117:14 - that transfer that's good 13 soul
117:16 - confirm and then the mint that's also
117:18 - good because like i said when i transfer
117:21 - solana i need to mint 13 bitcoin tokens
117:24 - okay transactions confirmed oh snap
117:27 - there it is there's our exchange guys
117:29 - look at that more transactions confirm
117:31 - but with that everything will work you
117:33 - can get your bitcoin get
117:35 - usdc you can get your usdc traded in for
117:38 - seoul and that's it that's the robin
117:41 - hood app okay all that's left to do now
117:43 - is let's deploy this on to netlify right
117:47 - wasn't this awesome leave a comment down
117:48 - below if you were able to finish it if
117:50 - you love learning about solidity and how
117:52 - to exchange tokens it's only going to
117:54 - get more in depth from here a clever
117:55 - programmer so be on the lookout for
117:57 - those videos let's go on to the next
117:58 - step and deploy this to netlify all
118:00 - right with that said that's the app guys
118:02 - that's it so now that it's done the only
118:04 - thing that's left to do is let's deploy
118:06 - our app using netlify you're not
118:08 - familiar netlify is an amazing website
118:11 - that makes it so simple to take your
118:13 - builds and apply and deploy it online so
118:15 - that you can send it to your friends
118:17 - show your family this really cool thing
118:19 - that you made so let's do that go to add
118:22 - new site and let's import an existing
118:24 - project what's going to make nullify
118:26 - super awesome is that we can use our
118:29 - github to deploy our projects alright so
118:32 - for me i'm going to use my clever
118:33 - programmers and count and i want to get
118:36 - that robin hood clone that we worked on
118:37 - yep cool let's do build command should
118:40 - be yarn run build and let's deploy site
118:44 - okay when you're deploying your site one
118:46 - thing i'm realizing is you actually
118:47 - should set up our environment variables
118:49 - here so when you say edit variables what
118:51 - you want to do is set that up so the
118:54 - only thing that's going to give us a
118:55 - problem is the api calls so to do that
118:58 - i'm going to do coin ranking host and
119:01 - for that you need to put in the host
119:03 - which is just gonna be this um where'd
119:05 - he go ah paste yep new variable coin
119:08 - ranking underscore key it's gonna be the
119:11 - key cool and let's hit save all right
119:13 - now that's done yeah this is what i'm
119:15 - gonna say the deploy block the deploy
119:18 - logs and just wait for this to run oh if
119:20 - i build complete okay i'm just going to
119:23 - tap publish deployed click on this
119:26 - website and we're in let's go what's up
119:29 - awesome look at this our website is up
119:32 - and running and let's say this link
119:34 - right here is the one that you can
119:35 - actually send and people will see this
119:37 - exact page so make sure you deploy your
119:40 - app and if you don't like the name we
119:41 - can actually change it that's another
119:42 - amazing thing about netlify i can go to
119:45 - site overview review go to site settings
119:48 - site details change site name and let's
119:50 - name it we can say robinhood clone
119:53 - blockchain and if i hit save as long as
119:55 - the name is not taken now when you type
119:57 - in this website url this is what you're
119:59 - gonna see you're gonna see my robinhood
120:02 - clone so be sure to use netlify take
120:04 - advantage of it and send us your links
120:07 - put this in your portfolio show it to
120:09 - your co-workers your friends and they'll
120:10 - be pretty impressed that you can
120:12 - exchange so that's going to be it for
120:14 - today's video be sure to keep on a
120:16 - lookout for our upcoming web 3 solidity
120:18 - tutorials and we might be doing some
120:19 - videos on solana as well so be on the
120:22 - lookout for that and i'll catch you guys
120:24 - in the next video peace