00:00 - hey guys what's up this is kazy from
00:03 - clever program.com and you are watching
00:06 - codeacademy
00:09 - part
00:12 - 14 yeah you guys
00:15 - excited um I hope you guys are really
00:18 - excited cuz now we're about to get to
00:20 - even more exciting stuff so check it out
00:24 - 46% complete that's almost we're we're
00:27 - halfway there but keep in mind
00:30 - there's one of those uh bitwise stuff
00:33 - which is kind of weird I'm almost
00:35 - thinking to skip it cuz it's so
00:37 - esoteric um so we're actually probably
00:41 - closer to 100% than you might
00:45 - think okay we've completed all these
00:48 - parts we've completed some of really
00:51 - tough stuff and getting started is
00:53 - really the hardest part as you start to
00:56 - get better at and understanding how
00:58 - computer programming is working
01:00 - you can figure lots of the other stuff
01:02 - out easier much easier okay so let's
01:05 - keep going here we finished student
01:08 - becomes teacher that was a big one
01:10 - that's why it was a unit uh in itself
01:13 - self and we got to lists and functions
01:17 - now so this is going to be great it says
01:20 - lists and
01:21 - functions now that you've learned about
01:24 - list let's turbocharge them with
01:27 - functions turbocharge with functions
01:30 - that sounds great and after that that
01:32 - sounds even more epic Battleship but one
01:36 - thing at a time let's continue on with
01:38 - list and
01:41 - functions unit 7 okay list accessing
01:44 - this is simple stuff we've already done
01:47 - it who are they kidding right oh add
01:51 - your code here this said print the
01:54 - second element so n of one
01:57 - print put parentheses around cuz I'm
01:59 - trying to train you for Python
02:04 - 3 simple we keep getting this badge over
02:07 - and over again I love it though list
02:11 - element modification okay element
02:14 - modification change the element to
02:16 - something else so I don't know on line
02:20 - three multiply
02:23 - the second what does it say multiply the
02:26 - second element so that by five so be n
02:30 - of 1 * 5 or time equals 5 but you
02:35 - know let's just use the long hand
02:37 - notation here to do this
02:41 - because like that book Learn Python the
02:44 - Hard Way always try to do things the
02:46 - harder way first then you'll really get
02:49 - it and then the shortcuts and everything
02:51 - will come more
02:53 - naturally overwrite the second element
02:55 - with that
02:56 - result
02:58 - wait I
03:00 - did yep print out the list okay
03:05 - great okay so you see that was pretty
03:08 - simple n was equal to 135 I multiplied
03:11 - the second element by five and now
03:13 - that's a result a lot of people make
03:15 - this mistake this is not changing what n
03:21 - of one was right this element right here
03:24 - this is just taking that element and
03:26 - multiplying by
03:28 - five does it does nothing by itself let
03:32 - me just show you this is a point I do
03:33 - want to elaborate and not take for
03:35 - granted cuz it is
03:38 - confusing if I did this right first of
03:41 - all it wouldn't show you anything at all
03:44 - but if I put in a print statement you
03:47 - can see that all it does is it just
03:49 - multiplies that by
03:51 - 15 you're not actually saying hey change
03:54 - the value of it so if I print out the
03:57 - list n you'll see that n is is still 135
04:01 - you didn't actually change what the
04:03 - first element was so that's why you have
04:05 - to go here and change n of 1 to be equal
04:09 - to n of 1 * 5 how I read it is hey the
04:15 - new n of one is going to be what n of
04:17 - one was SL is Time
04:21 - 5 so now n of one is in incremented
04:26 - by uh itself being multiplied by five
04:31 - all right let's keep rolling here
04:33 - appending to a list we've already seen
04:36 - that append it says append the number
04:38 - four and. a pen 4
04:41 - easy easy
04:45 - sley whatever that means removing
04:47 - elements from a list the exercise this
04:51 - exercise will expand on ways to remove
04:54 - items from a list you actually have a
04:55 - few options first a list called n so you
04:58 - can do pop and pop removes an item from
05:01 - the end of a list so let me show
05:04 - you if I did print and
05:08 - pop here's what it
05:10 - does it pops off the element and then
05:14 - prints it out now why that's important
05:17 - is check it out if I do print n
05:19 - here what pop actually does is now the
05:23 - new list is going to actually be
05:26 - 13 and it prints that result so it
05:28 - literally like break SL pops it out at
05:32 - the end of the list and and then it
05:36 - shows it to the screen so I almost think
05:37 - of it like pop just put his hand in the
05:39 - bucket of the list 135 took five and
05:43 - just shot it out and since we use the
05:45 - print function it took the five and shot
05:47 - it out to the screen and it got pasted
05:49 - into the terminal right here which is
05:51 - where it's showing and it's not in the
05:52 - list that bucket anymore okay so I'll
05:56 - prove it to you by running this code
05:58 - here and you will see oh I'm sorry
06:01 - actually I have to put the five back in
06:03 - I'll prove it to you by running this
06:04 - code here and you will see that original
06:07 - list was 135 but after the N being
06:10 - popped and we print out n you see that
06:13 - the pop printed out the five and then uh
06:16 - print n should have printed out 135 but
06:18 - because pop had already taken out five
06:20 - and threw it smacked it against the
06:23 - screen now the list only has one three
06:26 - two elements left in it okay that's the
06:28 - function pop that's what it does it's a
06:30 - method but I don't want to confuse you
06:33 - guys with too much terminology right now
06:35 - easy way to think about it is if it has
06:37 - a DOT it's most likely a method and
06:39 - otherwise it's a function just for
06:42 - now um okay n.p index will remove the
06:47 - item at index from the list and return
06:50 - it to you so you can also say hey
06:53 - instead of Pop which by default Returns
06:56 - the last element so in this case pop
06:57 - automatically puts in a two here because
07:02 - 0 1 and five is at location two so if
07:08 - you don't put anything it automatically
07:10 - puts in a two there but if I do index of
07:12 - one you'll see that pop actually puts it
07:14 - hand hands in a bucket takes out the
07:17 - three which is the U First index item
07:21 - and smacks it out to the screen because
07:23 - of print and then that item is not in
07:25 - the list anymore so you can see it right
07:28 - here
07:30 - right 15 it didn't it printed out the
07:32 - three at the top it popped it out and
07:34 - then it just printed out five in the
07:36 - list okay so we can do that and we can
07:39 - also do remove now what's the difference
07:41 - between pop and remove remove takes out
07:45 - that item but it doesn't actually remove
07:47 - it from
07:48 - that um or sorry it actually removes the
07:52 - item but it doesn't hold it anywhere so
07:55 - pop when you pop it out right it let's
07:59 - say we do uh X is equal
08:02 - to n of pop and that's it right and then
08:07 - I do print
08:11 - X and then okay sure I'll I'll do print
08:13 - n as
08:16 - well so what this does is this item got
08:19 - popped out and turned into five and then
08:22 - it printed out the X which is why you
08:23 - get a five and then I printed out the
08:24 - list and the print list is 1 comma 3 but
08:27 - with remove it doesn't make that item
08:29 - usable it doesn't return an item it just
08:33 - removes the item so if I try to end out
08:36 - remove um we actually have to pass in an
08:39 - index so if I give it index two
08:46 - right it it'll store none
08:49 - here okay so if I did n. remove one or
08:54 - if I did end that oh sorry in uh remove
08:57 - method does not take in index indices it
09:00 - actually takes in the number you want to
09:03 - give it so I I want to give it let's say
09:05 - five for sure right it look for that
09:07 - five and you'll remove it but it doesn't
09:10 - pop it out so you X is
09:13 - actually you know none because there's
09:16 - nothing it just removes that item from
09:18 - the list and that's it so when you use a
09:20 - remove function it doesn't make sense to
09:22 - actually store it anywhere is just for
09:25 - removing that item from the list okay
09:27 - whereas pop pops It Off also pop takes
09:30 - in an
09:31 - index great and then there is delete
09:35 - which is like pop in that it will remove
09:36 - the item at the given index but it won't
09:40 - return it so the only way it's like pop
09:43 - is because they're both taken an
09:45 - index but it doesn't actually uh return
09:48 - anything so for example if I
09:52 - call if I did delete the
09:57 - item and
10:01 - two and I print
10:04 - n well that item is gone but if I did X
10:07 - is equal to that and did print
10:10 - X let's see what we get here you
10:14 - actually it says invalid syntax it
10:16 - doesn't even allow you to do
10:18 - that okay so when you use delete you can
10:22 - only just do it on a line of its own
10:24 - pretty much and it doesn't return
10:26 - anything it just removes that item from
10:28 - the list to me I would use delete that's
10:31 - a nice way to delete an
10:33 - item um and remember when you're making
10:36 - games or anything more complicated it
10:38 - doesn't always have to be integers that
10:39 - you're deleting right so don't think of
10:41 - it like when would I need to delete a
10:43 - number
10:45 - well sometimes you might have some more
10:47 - complicated information in there you
10:49 - might have um you're let's say you're
10:52 - making a video game and it has a list of
10:54 - characters well let's say that two of
10:56 - those charact it's a two versus two
10:58 - whatever game fighting game or whatever
10:59 - if one of the character dies one side
11:02 - only has one character and the other
11:03 - side has two characters well from that
11:05 - list where you only have one character
11:08 - left you're going to
11:09 - delete the character from that list okay
11:13 - you're still using the same data
11:14 - structures even if you're making really
11:16 - complicated games in the back end you're
11:18 - still using dictionaries and lists and
11:20 - all those kind of things okay remember
11:22 - that and if you want to look more into
11:23 - making games with python there's a very
11:26 - great python Library called py game so
11:30 - go there and play around with it if you
11:32 - want and you can make really cool games
11:35 - I have made a few games from that as
11:37 - well all right remove the first item
11:41 - from the list and using either pop
11:43 - remove or delete so I'm just going to
11:46 - use delete because it makes the most
11:49 - sense and it's the easiest to
11:53 - understand right delete it looks like
11:56 - your list is 1 three instead of 35 oh
11:59 - they want us to remove the first
12:04 - element okay congratulations we have
12:07 - finished this section great next up is
12:10 - function
12:11 - recap so a lot of things here but let's
12:14 - get on to the next
12:17 - section all right changing the
12:20 - functionality of a
12:23 - function functionality of a function
12:25 - that's a bit wordy there in this
12:28 - exercise you will just be making a minor
12:30 - change to a function to change what the
12:33 - function
12:34 - does change the function so the given
12:36 - argument is multiplied by three and
12:38 - returned
12:40 - again they're using terminology here um
12:45 - uh programming specific
12:47 - terminology not to necessarily throw you
12:50 - off but to just get you attuned to how
12:55 - programming terminology works and that
12:57 - you start paying attention to it okay at
12:59 - first you might be like what it's like
13:02 - sometimes mathematicians when they're
13:03 - using something like given this
13:06 - conjecture uh according to proposition
13:08 - three we have the following proof you
13:12 - know a intersects
13:14 - B so we're going to try to demystify all
13:17 - of this and simplify what is an argument
13:19 - it's whatever you put in the parenthesis
13:21 - okay if you have something comma and
13:23 - another argument that's now you have two
13:25 - arguments okay these are
13:27 - arguments um function this is the name
13:30 - of your function this is the argument
13:33 - that it takes mean that's the
13:34 - information it's dependent on for this
13:35 - function to run right if you wanted to
13:38 - calculate a trip to a uh to some other
13:41 - country you would have to take into
13:43 - account how much the plane ticket costs
13:45 - how much um the hotel there costs how
13:50 - much you're going to spend there so
13:51 - automatically that function is depending
13:52 - on three inputs okay so that's the
13:56 - function being defined here and now here
13:58 - they're calling the function so what
14:00 - they're saying is change the function so
14:01 - the given argument is multiplied by
14:03 - three in return everything is fine
14:06 - except they're taking the argument which
14:07 - is the X and they're adding it by three
14:11 - so what they're doing is if I
14:14 - did so I made number is equal to 5 let
14:17 - me just put it here for Simplicity sake
14:19 - and I pass
14:21 - in I pass in five to our function what
14:24 - is it going to do it's going to change
14:26 - this x with our number which is five
14:28 - it's going to put a five there it's
14:30 - going to do five 5 + 3 gives you eight
14:32 - and it's going to return it right so
14:34 - let's check it out we got back eight we
14:37 - want to make it so instead of being
14:39 - added by um adding by three we multiply
14:42 - by three it's as simple as changing the
14:44 - plus sign to an asterisk you get back a
14:47 - 15 let's give it a try and I can
14:50 - guarantee you that we are
14:53 - correct guarantees next more than one
14:57 - argument that this excise exercises to
14:59 - recap how to use more than one argument
15:01 - in a function define a function okay
15:04 - simple okay two arguments in a function
15:07 - I've given you this problem before but
15:08 - I'm going to give it to you again try to
15:10 - do it without looking at
15:12 - anything make a function that takes in
15:14 - two arguments and returns their sum or
15:17 - make a function that takes in two
15:18 - arguments A and B and returns their
15:20 - multip multiplication or their
15:23 - product do it
15:25 - quickly all right I'm going to show you
15:29 - I'm going to define a function sum a
15:31 - comma B
15:33 - returns oops return a plus b now to use
15:38 - this function I'm just going to say sum
15:39 - of 2 comma 5 I'm going to say print and
15:43 - you're going to see that's going to Gave
15:44 - Me 2 + 5 which is 7 um for the
15:47 - multiplication one I will say define
15:51 - multiply did I spell it right no I did
15:53 - not multiply a comma B return a * B and
15:58 - and I can say print
16:02 - multiply 2 comma 5 which should give me
16:05 - back a nice 10 so that therefore I get a
16:08 - seven and a 10 here function it's very
16:13 - simple Define a function called add
16:14 - function that has two parameters X and Y
16:16 - and adds them together the function name
16:20 - uh should be add function has two
16:22 - parameters and added them together
16:24 - simple Define add function two
16:28 - parameters
16:29 - I can call these parameters whatever I
16:32 - want okay just to prove a point here a
16:35 - ridiculous point a lot of people think
16:37 - that it has to do with these parameters
16:39 - names and that they should match your
16:41 - definition no these are arbitrary which
16:44 - means that you just make them up
16:45 - whatever you want whatever you feel like
16:47 - that
16:48 - day okay but don't make it so confusing
16:52 - that when somebody else is reading your
16:53 - code is like what is this what is this
16:56 - language this person is using
16:59 - all right
17:02 - return
17:05 - This
17:07 - plus
17:09 - this okay and it's going to say I'm
17:14 - right well of course I'm
17:16 - right okay but that should really be
17:20 - wrong because that's a terrible names
17:22 - let's make the name simpler we can call
17:24 - it MN if we want it to be consistent
17:27 - with everything else
17:29 - we can call it A and B I Like A and B
17:32 - for
17:33 - this but if it was really up to me I
17:36 - would actually call it num
17:39 - one um maybe like this and num two and
17:45 - then say num one plus num
17:48 - two okay or if I really want it to be
17:52 - very clear with what's going on I would
17:54 - call it number one plus number two and
17:57 - now this re read really nicely we're
17:59 - defining an ad function that takes in a
18:01 - number one and a number two and returns
18:04 - number one plus number two it's really
18:06 - easier to read Than A and B some
18:08 - arbitrary variables all right start next
18:11 - lesson string and functions write a
18:13 - function called string function that
18:15 - takes in a string argument and then
18:17 - returns that argument concatenated with
18:20 - the word world don't add a space before
18:25 - World takes in a string and then returns
18:28 - that AR concatenated with the word world
18:31 - okay simple let's try it let's create a
18:34 - function that takes in an input and add
18:37 - something to it so let's say that we
18:39 - took in whatever we took in we wrote
18:44 - um ice cream next to it okay if we
18:47 - wanted to so we would just simply
18:50 - say oh sorry I would Define the function
18:52 - define string function and it would take
18:56 - in something and and what it would do is
19:01 - return something
19:04 - plus is not an ice cream that's what I
19:08 - wanted to
19:09 - say okay with the
19:12 - period let's run it oh yeah print Python
19:17 - 3 you got to put parenthesis
19:21 - parentheses hello is not an ice
19:24 - cream because we took the string
19:26 - function passed in hello to it what it
19:29 - did is went up to the string function
19:32 - put in hello for something and
19:34 - everywhere it saw something it put hello
19:36 - there if you put hello right here now it
19:39 - says hello plus is not an ice cream
19:41 - notice I put a little space here if I
19:43 - didn't put that space right there you
19:46 - would see okay first of
19:51 - all okay so let's say I didn't put this
19:53 - space here you'd see
19:56 - Hello is not an ice cream right next to
19:58 - each other so I put a space there it
20:00 - makes it
20:01 - nice okay and if I want it to be fancier
20:05 - and
20:06 - use string well this is I think this is
20:10 - pretty simple let's just leave it at
20:12 - that okay so did you I I I just want to
20:16 - make sure you understand what we did
20:18 - okay so again put in hello for n right
20:22 - this is n so this is hello string
20:26 - function gets called on hello this
20:28 - parameter takes in that hello and then
20:31 - returns hello plus whatever we want to
20:34 - put there so now you try doing this one
20:37 - on your own and then watch the
20:39 - video all right so I'm going to Define
20:41 - it right here Define string
20:44 - function takes in
20:47 - something
20:49 - returns something plus they want us to
20:52 - say
20:55 - world that's it don't forget to add a
20:58 - space before World you see that don't oh
21:02 - it
21:03 - says wait don't add a space before
21:09 - world
21:10 - oh so I guess they want you to do it at
21:13 - the same
21:15 - location all right hello world look at
21:18 - that introduction to using functions
21:21 - with lists nice so now we have a
21:25 - function right here Define list function
21:28 - it takes in something we're assuming
21:30 - that something right now is a list and
21:32 - it returns that and we're creating a
21:35 - list and outside of the function and
21:38 - then we're printing out the result of
21:40 - calling that function and passing in
21:42 - that list so what happens is that n is
21:45 - this it goes to that replaces this with
21:48 - the list and then it returns that list
21:51 - this whole thing just turns into that
21:53 - list and gets um or I'm sorry this whole
21:56 - thing gets turned into that list and
21:58 - because of that that gets printed out to
22:00 - the screen 357 so let's run this one
22:03 - really
22:05 - quickly okay fairly
22:10 - simple using an element from a list in a
22:14 - function passing a list to a function
22:16 - will store it in the argument just like
22:19 - with a string or a
22:21 - number
22:26 - Okay so
22:28 - what are they saying
22:30 - here passing a list to a function will
22:34 - store it in the
22:37 - argument so basically what they're
22:39 - saying is that if you pass it in here
22:42 - this argument here you know this x is
22:44 - stored that argument is stored you know
22:46 - so that list is stored in the
22:49 - argument all
22:51 - right what they're showing here is
22:54 - something really
22:55 - simple we have okay it's kind of cool
22:59 - and so let's talk about
23:04 - it right so this argument here is just
23:07 - an arbitrary argument if you gave it a
23:09 - number it would be really confused on
23:11 - line two because let's say you gave it a
23:13 - five it would come down here and it
23:15 - would say give me the zeroth index of
23:19 - five and then it'd be like what am I
23:22 - what the heck am I talking about that's
23:23 - doesn't make any sense and the program
23:25 - would poop out and give you a giant red
23:27 - error saying you can't index an
23:30 - integer right if I open up my terminal
23:33 - and showed you really quickly it said
23:35 - like in object is not subscriptable
23:37 - right right here it'll like start
23:40 - crying so we're assuming that we're
23:42 - getting a list so let's say if you got a
23:44 - list
23:46 - here then this part turns into a list 5
23:50 - comma 4 and calling zero on this list
23:53 - getting the zeroth index of that well
23:55 - that simply evaluates to five
23:58 - and that actually gives us back
24:00 - something nice so imagine we created a
24:02 - list called numbers and we pass that
24:04 - list to the function first item it would
24:08 - go up to that items would be stored as
24:11 - this list right here 279 and on 279 we
24:15 - would get the zeroth index of 27 and9
24:18 - what's the zeroth index of 27 and9 it's
24:22 - two this would get evaluated to two and
24:26 - that would get shot out to the screen so
24:29 - let's see it in slow
24:31 - motion all right sorry I'm not going to
24:34 - go into post production make it slow
24:35 - motion but you hopefully got my
24:39 - point all right let's keep rolling
24:43 - change line two so that list function
24:45 - returns only the items stored in index
24:47 - one of X rather than the entire X
24:51 - list so we are going to pull out index
24:55 - one so if we pass it in this list it
24:57 - would pull pull out 5 but when will this
25:01 - it's also always good to think about
25:03 - when will this program poop out you know
25:06 - why because if you have friends who are
25:08 - programming you want to crack their code
25:10 - and you want to ha break their code to
25:12 - embarrass them and also hopefully to
25:16 - teach them a not teach them a lesson but
25:18 - to maybe help them find a bug so they
25:20 - can fix it and there are also jobs
25:22 - called programming testers who make a
25:25 - ton of money every year so programming
25:28 - testing is an actual job so their job is
25:31 - to try to see what edge cases break the
25:34 - code so it's a good idea to try to break
25:36 - the code all the time either you can
25:38 - make fun of your friends or get a
25:40 - high-paying job or both so the case
25:45 - where this would break the code is if I
25:47 - gave it a list of only one element it
25:50 - will try to index the second element
25:53 - because it has a one right here and it
25:54 - will poop out and give an error I can
25:56 - also give it a list with no elements I
25:59 - can also what if I gave it a set uh a
26:02 - dictionary what if I gave it uh an
26:06 - integer right or a float number all of
26:10 - those would give you back errors if I
26:12 - gave it a
26:14 - string right like hello that would work
26:17 - because you can index a string so it
26:19 - would pull out the e but if I gave it a
26:22 - string with only one letter in there it
26:24 - would poop out
26:26 - right so just
26:29 - to uh just be aware of that um okay this
26:33 - should be good we gave it 357 it went up
26:36 - here pulled out the first uh second
26:38 - element five or the index one and
26:41 - returned it very simple modifying an
26:44 - element of a list in a
26:47 - function okay so we're just modifying an
26:51 - element of a list okay so basically
26:54 - let's say that we have this list 357
26:57 - right what we want to be able to do is
26:59 - pass it to a
27:01 - function and have it change one of the
27:04 - values inside of that list to something
27:06 - else permanently so let's say right now
27:08 - this is five once I take this list and
27:12 - dump it into my function machine that
27:14 - CHS out some kind of output so I dump it
27:17 - into my function machine my function
27:19 - machine takes this uh list and makes
27:23 - changes one of the elements and then
27:25 - Returns the list okay so let's say
27:28 - that I wanted everything every number in
27:31 - my thing to be multip multiplied by
27:33 - three or I wanted one of the numbers to
27:35 - be completely changed uh and multiplied
27:38 - by three so let's say I take
27:40 - Define uh a changer I'm just going to
27:43 - call it changer and it's going to take
27:46 - in some list I just say list one and
27:49 - I'll take the list one's uh second item
27:53 - and or sorry the second item and
27:56 - multiply it or sorry yeah multiply it by
27:59 - five and change it like
28:04 - permanently right so since I want to
28:07 - change it permanently what I'm saying is
28:09 - that the new list one so the new second
28:12 - element of that list is what that
28:14 - element was up to this point multiplied
28:17 - by five okay so and and here I'll I
28:22 - don't have to return anything I can just
28:25 - say print uh list one right that's it
28:29 - and I can say print list one here as
28:33 - well just so it can print out and show
28:35 - you how the changes took place and here
28:38 - I can Define some
28:40 - list um I'm not going to call list one
28:43 - because I don't want you guys get
28:44 - confused that um function arguments have
28:47 - to match the variable names outside of
28:49 - the function sometimes people get
28:51 - confused with that so I'm not going to
28:53 - make it list one just to not confuse you
28:55 - but list one would be a perfectly good
28:57 - name name I'm just going to call it list
28:59 - underscore and I'm going to say this
29:02 - list
29:03 - is you know has has uh three elements in
29:07 - it and I'm going to call them a changer
29:09 - function on this
29:11 - list so let's run it and you can see
29:15 - that it was 54 and five but after it got
29:18 - thrown into my function changer right
29:20 - this machine and then it once it goes
29:22 - into this machine the machine is
29:24 - like like it does something to it for
29:26 - three whole lines right 2 3 4 but really
29:29 - the third line does something to it so
29:31 - it takes it and it turns up that one of
29:34 - the numbers in it and mutates it changes
29:37 - it to something else and so now that
29:39 - four is now at 20 and then it takes that
29:42 - and you know just returns it or whatever
29:43 - and that's it we're done so they're
29:46 - they're just kind of showing you that
29:47 - here and actually they're giving you um
29:50 - example that does just that so it takes
29:54 - in the zeroth element and multiplies it
29:57 - by two so it takes in the first element
29:59 - multiplies it by two that's really what
30:01 - they're doing okay so we're going to
30:04 - change it so that add three to the item
30:07 - at index one of the
30:09 - list so we're going to
30:12 - take this is index or sorry this is
30:15 - index one and we're going to add three
30:19 - to it right we're not just doing this
30:23 - because this will just take that number
30:25 - and if it's five we'll just do 5 plus
30:27 - and 8 and done you're not saying that
30:30 - hey um make the first
30:33 - element 8 you're just saying take the
30:36 - first element and just add three to it
30:39 - and then what do don't even print it
30:41 - don't do anything to it just add three
30:43 - to it so it'll it'll go sure it'll do
30:45 - that on the back end but it won't that
30:48 - statement won't be useful to you so you
30:51 - want to say do that to X of one what x
30:55 - of one was up to this point
30:59 - um or I'm sorry the new X of one should
31:02 - be what it was up to this point plus
31:03 - three
31:05 - okay store that result back into index
31:09 - one and we did all that on line two and
31:12 - return the list so return X in this case
31:15 - terrible terrible names but that's okay
31:19 - so you can see that we passed at the
31:21 - list 357 but we took the second element
31:24 - incremented it by three and made the
31:27 - five into an 8 and kept the rest of the
31:30 - list the same okay where are we we're at
31:35 - modifying an element of a list and we're
31:38 - in the section introduction to using
31:40 - functions with
31:42 - lists let's see how long the next part
31:45 - is so we're going to finish this part
31:47 - and this will be the last part of uh
31:50 - this video and this is code academy
31:54 - python part
31:56 - 14 hard to keep track of this now but
32:00 - this should be the last thing we're
32:02 - going to do and then I'll see you guys
32:03 - in the next video so let's keep going
32:05 - through this right here all right you
32:08 - can also append or delete items of a
32:10 - list inside a function just as if you
32:12 - were manipulating the list outside of a
32:14 - function so you guys have already seen a
32:16 - little bit of how we do aend and delete
32:18 - items and remove and pop and so on and
32:21 - so forth Define a function called L list
32:25 - extender Define list extender that takes
32:29 - in that has one parameter LST is a
32:32 - common way of saying list in Python the
32:34 - reason why we don't say actually list is
32:36 - because list is a defined
32:38 - word so that's why we try to stay away
32:40 - from
32:41 - that right just like Dell is a defined
32:44 - word or print is a defined word uh Tuple
32:48 - is a defined word so we try to stay away
32:50 - from using the defined words because we
32:52 - don't want to change the meaning of
32:53 - something that already exists in Python
32:56 - itself so
32:58 - LST and inside the function a pen number
33:01 - nine to the list so we're going to do
33:03 - list do or I'm sorry list. aen n so that
33:08 - will add attach on a nine so if we pass
33:10 - it this list then it would just tack on
33:14 - a nine like
33:16 - that and then return the modified list
33:19 - so return what will happen if I had to
33:22 - break it down n is equal to this it'll
33:24 - pass that into the function list
33:26 - extender it will come up here pass that
33:28 - list in right there uh it would take
33:32 - this list and do do append on it and
33:34 - append a nine to it and now this list
33:37 - effectively becomes that and then it
33:41 - [Music]
33:43 - returns it returns that list with the
33:46 - nine at the end of it now let's check it
33:48 - out don't take my word for it let's
33:51 - prove it by running
33:54 - this and you can see that we have added
33:57 - a nine congratulations guys we've
33:59 - finished this section this is it for
34:02 - this video this is kazy from clever
34:05 - program.com and this is the end of code
34:08 - academy part
34:10 - 14 I will see you guys in the next video