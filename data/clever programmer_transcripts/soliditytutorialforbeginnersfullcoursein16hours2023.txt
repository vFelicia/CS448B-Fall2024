00:00 - in this video we're going to be going
00:01 - over the very basics of solidity so if
00:04 - you haven't done any solidity projects
00:06 - before this is the video where you want
00:09 - to start and this is where you will
00:10 - understand how you can transition from
00:12 - being just a JavaScript developer now
00:14 - becoming a blockchain developer and
00:16 - learning the skill of solidity I will be
00:18 - teaching you things like the variables
00:20 - the different data types arrays structs
00:23 - mappings everything that you need to get
00:25 - you up to speed you will be building
00:27 - your own Hello World app which will
00:30 - deploy to the ethereum blockchain using
00:33 - infuria so without further Ado let's go
00:35 - ahead and get started alright let's get
00:37 - started with the very Basics so let's
00:39 - just build a Hello World app with
00:42 - solidity that's where everybody starts
00:44 - right what you want to do is go to
00:46 - Google and search for remix ethereum ID
00:49 - stuff like that but basically what
00:52 - you're looking for
00:53 - is this this result all right so this is
00:57 - what we're going to be using or you can
00:58 - just type it in remix ethereum.org
01:01 - and so that's the online ID for ethereum
01:06 - or solid data development
01:08 - and this is how it looks when you open
01:10 - it up so you can just safely close that
01:12 - home page
01:14 - doesn't really matter and what you want
01:16 - to do is delete that hello world file
01:19 - I'll just show you how to create a new
01:21 - one
01:21 - so you can just right click delete it or
01:24 - I think even the delete button works too
01:27 - so what you can say is right click on
01:29 - the contracts folder so basically the
01:32 - enclosing folder
01:33 - and just hit new file and then you can
01:36 - type in hello world at Sol
01:39 - and this is where your code will go so
01:41 - this is just an online IDE to help you
01:45 - learn solidity later on we're going to
01:47 - be moving over back to vs code so first
01:51 - we're going to need to specify the spdx
01:53 - license and that basically all it does
01:57 - is
01:58 - intellectual property I'm sure you
02:00 - already know it it has to be licensed
02:02 - somehow and solidity requires that it is
02:06 - being licensed so I would just recommend
02:09 - you start working with MIT licenses that
02:12 - just open sources it and anyone can do
02:15 - anything with your app but you're not
02:17 - liable for it I'm thinking I think not
02:20 - legal advice
02:21 - moving on you will want to specify the
02:25 - solidity version that you're going to be
02:27 - working with which is 0.8.0 however
02:31 - there's the little up Caro carrot in
02:35 - front of it and that means that any
02:37 - version above 0.8.0 will work with this
02:41 - app so if your compiler is set point set
02:43 - to 0 8 16 or something that will work
02:46 - with this app perfectly
02:48 - now moving on every contract needs a
02:52 - contract object and you will need to
02:53 - specify the name of it so that's going
02:55 - to be hello world and in there for
02:58 - starters let's just create a variable
03:00 - we're going to go over what variables
03:03 - and data types are in solidity but here
03:06 - we're just going to use a string and
03:08 - let's just name it greetings so first
03:10 - you say the type then you say the name
03:13 - and then we're going to create a
03:15 - Constructor now the Constructor is a
03:17 - function that only runs once and when
03:21 - you deploy the app so when you deploy it
03:22 - Constructor runs and that's it you
03:24 - cannot run it again but it's good for
03:26 - like setting values such as our
03:28 - greetings variable
03:30 - and we can just give the value of hello
03:33 - world to it and it should be good I also
03:36 - want to mention that in solidity you
03:39 - need to add semicolons at the end of
03:41 - each line unlike JavaScript
03:43 - here is recommended and I think it also
03:46 - even fails if if you don't do it now
03:50 - we're going to also create a function
03:51 - here and I will just be say hello
03:54 - function it will be a public view
03:56 - function that will return a string from
03:58 - the memory I just want to pause here for
04:00 - a quick second let's just go through
04:02 - what what means what
04:04 - so function that's that means that it's
04:07 - a function say hello is the name of the
04:08 - function and after the function name you
04:11 - have to put the open and closing
04:12 - brackets after that comes public now
04:15 - public means that you can call this
04:17 - function from outside of this contract
04:20 - if you were to say private or internal
04:23 - you wouldn't be able to do that and in
04:25 - this case it makes sense because you
04:27 - want to be able to call it from the
04:29 - outside if you don't
04:30 - then you can just say public a private
04:33 - or internal next view means that this is
04:36 - a read-only function meaning that it
04:38 - will not be able to change any values or
04:41 - do any kind of permission
04:43 - things so if you were to give a new
04:46 - value for to grading inside this
04:49 - function that would throw you and
04:51 - returns means that you have to specify
04:53 - what this function will return
04:56 - and then string memory so string the
04:59 - data type of what will be returned and
05:01 - memory is an interesting one so strings
05:03 - can be stored in multiple places in
05:05 - solidity such as memory storage and
05:08 - other places it doesn't really matter
05:11 - just use memory every time you return a
05:14 - string reason is a solidity doesn't
05:17 - support returning Dynamic values in
05:19 - functions so that's why you need to
05:21 - specify memory and so this function all
05:24 - it will do is it will just return
05:25 - Greetings or greeting and that's pretty
05:28 - much this is now on the left hand side
05:31 - there is that solidity deployment icon
05:35 - and that's what we'll be using to deploy
05:38 - this now you can you have to make sure
05:40 - that in the contract drop down you
05:42 - select the right contract once you have
05:44 - multiple files in there it'll it'll make
05:47 - sense to double check it now it's
05:48 - obviously hello world only because
05:49 - that's the only file you have
05:51 - and let's just hit deploy and see what
05:54 - happens now we just deployed it and
05:57 - it's actually quick here unlike
06:00 - the actual ethereum blockchain because
06:02 - here it's a virtual blockchain it just
06:05 - works quick
06:06 - so there you go and if you go down to
06:08 - deployed contracts and open that open
06:10 - the drop down there is your deploy
06:13 - contract and you can just click say
06:15 - hello that means that's just trying to
06:17 - simulate you calling the say hello from
06:20 - outside the contract so let's click that
06:23 - and there you go there is Hello World
06:25 - being returned
06:27 - that's pretty much all this app does but
06:30 - let's just change the greeting value to
06:32 - let's just say hello
06:34 - and if you redeploy it again because
06:37 - here every time you make a change to the
06:39 - contract you have to redeploy the
06:41 - contract otherwise it will use the
06:43 - previous instance it's called commit so
06:46 - you have to always commit to use the
06:48 - latest versions you just keep deploying
06:49 - it every time you make a change and now
06:52 - it will return hello so that's pretty
06:54 - much the hello world now let's move on
06:57 - all right let's go over the
07:00 - most basic data types in solidity
07:03 - so I'm just going to go ahead create a
07:05 - new file in the same contracts folder
07:07 - and then just select that so it will be
07:09 - data types.sol
07:12 - usual xpdx license pragma solidity every
07:15 - single file requires it so you will need
07:17 - to specify it here as well
07:20 - now the contract here will be called
07:22 - data types it doesn't actually matter
07:25 - we're not like this is not going to be
07:27 - used anywhere but just for
07:29 - organizational
07:31 - just for the sake of organizing it let's
07:33 - just call it data types
07:35 - and let's start with the first one it's
07:37 - gonna be you win256. that is a integer
07:41 - and that is a positive integer number
07:44 - that you can sort store here and
07:46 - basically the largest number is 2 to the
07:49 - power of 256 minus one which is a pretty
07:53 - big number you're not going to be using
07:55 - it all but it is capable of storing that
07:58 - now I want to say that solidity doesn't
08:01 - support
08:03 - facility doesn't support floating Point
08:05 - numbers so we're gonna skip that
08:08 - and now we're just gonna go with the
08:10 - booleans right now so that
08:12 - self-explanatory if you know coding you
08:14 - know it's true false that's it but here
08:16 - we call it Bool and then there is string
08:19 - I think we or everybody knows strings
08:21 - it's a regular text
08:24 - or special characters whatever let's
08:26 - just ring of characters all right so
08:29 - next up is addresses and that is
08:32 - specific to solidity now address is used
08:34 - to store
08:36 - wallet addresses
08:38 - or contract addresses or any kind of
08:40 - ethereum address it and here we're going
08:43 - to have a payable keyword in there so
08:46 - that's just going to specify that this
08:48 - contract is able to send ethereum or ERC
08:52 - token or any token to that address and
08:55 - you also and also make sure that you
08:56 - have you typecasted as a payable so
08:59 - payable parentheses and then paste the
09:02 - address and that will be your address if
09:04 - you don't do that this contract will not
09:07 - be able to send any currency to that
09:10 - address all right moving on last one for
09:12 - this one is bytes32 and you can just
09:16 - think of it as a 32 character long
09:18 - string
09:19 - all right now let's take a look at what
09:22 - type of arrays do we have because that
09:24 - is a little confusing sometimes so far
09:27 - it's the same basically what you do is
09:30 - you specify the data type of the array
09:33 - so if you say un256 and then put the
09:36 - open closing square brackets that will
09:39 - mean that it will be an array of hue in
09:41 - two five sixes so like basically
09:43 - positive integers up to
09:46 - a lot
09:48 - then you can do the same thing with
09:49 - Bulls you can do the same thing with
09:51 - strings
09:53 - and you can do the same things with
09:55 - address payables and if you do payable
09:58 - addresses then the
10:00 - square brackets go after payable not
10:03 - after address that's something to look
10:05 - out for the same typecasting of
10:08 - addresses the payable stuff is applied
10:10 - here as well and that is pretty much all
10:13 - you need to do about or need to know
10:15 - about arrays now you might be having the
10:16 - question that
10:17 - can you put multiple data types into one
10:21 - array a short answer no long answer yes
10:24 - it's getting to the very complicated
10:27 - parts and it is about the best practice
10:29 - to use structs for that which we're
10:32 - going to cover in a little bit I would
10:34 - say you can technically do it but you
10:37 - never really need it so I wouldn't
10:39 - really try to do it all right let's move
10:41 - on
10:42 - all right let's go over mappings now
10:45 - this is again something that is very
10:47 - specific to solidity and only available
10:49 - in solidity and it's a weird data type
10:52 - so you declare it by saying mapping and
10:55 - then you say this
10:57 - basically you'll Define two data types
11:00 - that are going to be mapped one to the
11:01 - other so in this case we're mapping a
11:04 - uint to a string and now you might have
11:06 - a question why is it not a u in 256 u in
11:09 - 256 and U in are the same sometimes
11:12 - these compilers add the two five six
11:14 - sometimes they're not it's whatever it's
11:16 - interchangeable really so in this case
11:19 - what we're gonna do is map a number to a
11:22 - string you should think of it as like
11:24 - key value pairs is going to be public
11:26 - meaning it's going to be accessible from
11:28 - the outside world and by the way the
11:30 - less mapping creates its own function so
11:33 - you don't see it but it's like under the
11:35 - hood if you deploy it you're going to be
11:37 - able to call this my map thing so let's
11:39 - take a couple let's take a look at a
11:40 - couple of examples let's say let's say
11:43 - you're keeping track of
11:45 - the name of every user who uses your app
11:48 - so that would be this would be a perfect
11:51 - mapping for that so what it would look
11:53 - like is you would say one that says
11:55 - quasi two Kevin three David that's
11:59 - basically how you should think of these
12:01 - mapping all right so let and let's say
12:04 - you wouldn't just want to add some value
12:05 - to it so let's say how you interact with
12:08 - it
12:09 - so we're going to say function add value
12:12 - and you will need to pass in a uint
12:14 - which is going to be the key which is
12:16 - one two three whatever
12:18 - and the string that what you want to
12:20 - pass in or you want to map to that key
12:24 - and this is going to be public and this
12:27 - is how you do it so basically you say my
12:29 - map and then you pass in the key and
12:31 - then you pass in the value
12:33 - so let's say number four John is using
12:36 - the app
12:37 - you will call the add value function
12:40 - and then for the key you're going to
12:43 - pass in four and for Value you're going
12:45 - to pass in John
12:47 - so once again juancazi two Kevin three
12:50 - David four John now this is going to be
12:52 - new item
12:54 - now let's say you just want to return
12:56 - one of the functions you want to figure
12:58 - out who was the fourth person that used
13:00 - your app so you will just pass in key as
13:03 - it like four as a as the key and you're
13:07 - just gonna say my map return my map key
13:10 - and it will return you John
13:13 - and let's say you want to remove that
13:14 - because John is not using your app
13:16 - anymore again you pass in four as the
13:18 - key
13:19 - and you're going to say delete my map
13:21 - key that's it that's pretty much it and
13:24 - John is gone rhyme so let's take a look
13:27 - at it in action
13:29 - I was just passing zero Kevin transact
13:32 - you're gonna say get value you pass in
13:34 - so you're interested in what's happening
13:37 - or what what is stored what is mapped to
13:40 - zero
13:41 - and it returns Kevin as perfect and one
13:45 - doesn't really return anything
13:47 - and you're Now You're Gonna Save one to
13:49 - David and transact now it will return it
13:53 - and let's say you want to delete Kevin
13:55 - you're gonna say delete zero
13:57 - and now zero is not going to return
14:00 - anything so it's just gonna say you know
14:01 - to string
14:03 - and that is pretty much all you need to
14:04 - know about mappings I know it's a pretty
14:07 - complicated and doesn't make sense for
14:09 - the first time but as you start using it
14:11 - it will make all the sense and it's
14:13 - actually really useful data structure
14:15 - all right with that said let's move on
14:17 - to the next part all right now let's
14:19 - talk about structs structs is basically
14:22 - if you're coming from the JavaScript
14:23 - world it's an object that went to the
14:26 - gym and got buff and has all these super
14:28 - powers
14:29 - so in the me so why you can create
14:31 - objects with structs it also creates a
14:34 - custom data type so let's take a look at
14:36 - it
14:37 - so you're going to say struct person and
14:40 - here's where the magic starts to happen
14:41 - so you will open up an object you will
14:44 - say string name
14:46 - un256h and bull has driver's license it
14:51 - reminds me like a class
14:53 - so you have all these attributes of a
14:55 - person
14:56 - and now what you're going to say is
14:58 - person my person slow data type variable
15:02 - name
15:03 - and now you're going to create an
15:04 - instance of it so you're going to be
15:06 - passing in a name which is going to be
15:08 - Alice she's 30.
15:10 - and she has a driver's license so that
15:13 - is your person and this is your struct
15:16 - this is pretty much how you get started
15:19 - and let's move on to functions
15:22 - all right let's go over the if else
15:24 - statement in solidity this is going to
15:27 - be very explain
15:29 - this is going to be very similar to how
15:31 - it is in JavaScript
15:33 - so let's take a look here's my Hello
15:35 - World app just pasted it for the
15:37 - boilerplate you can say controls rename
15:39 - it let's just say we have a number which
15:42 - is five and we're going to say if the
15:44 - number is less than five then
15:46 - specify to do something else if if it is
15:49 - if it equals five then do another thing
15:53 - and there's obviously the else Clause
15:55 - that will just catch everything else so
15:57 - that's pretty much the syntax let's put
16:01 - it into a function
16:03 - and we're gonna this is going to be
16:05 - we're gonna call it check num and it
16:07 - will return a bull
16:09 - and so there's our if else statement
16:13 - and yeah if it is less than five then
16:16 - let's just return false then we can
16:18 - return true if if it equals five
16:22 - and otherwise let's just return false
16:24 - that is pretty much it
16:26 - will be able to integrate it to your app
16:29 - all right now let's go over four loops
16:32 - so I'm just going to paste in the
16:34 - previous contract and let's just rename
16:36 - it remove all the useless stuff so we'll
16:39 - all we have is just the boilerplate so
16:41 - that's cool and now we're going to
16:43 - create a
16:44 - an array of numbers and just name it
16:48 - numbers because that looks tough looks
16:51 - mandatory all right now let's create a
16:53 - Constructor that takes in an array of
16:55 - numbers again
16:57 - and all we're going to do is we're just
16:59 - going to set the value
17:01 - of the constant
17:03 - of the variable to the
17:06 - value of the array that we just send in
17:09 - so basically we're just setting the
17:10 - value of numbers
17:12 - all right now let's actually Loop
17:15 - through it so we're going to say new
17:16 - function some with Loop for Loop public
17:19 - view returns and okay so we're gonna
17:22 - have a sum
17:24 - which is it will just start out as zero
17:27 - and let's Loop through it so it's very
17:29 - similar to what JavaScript for Loops are
17:32 - I think it's almost the exact same if
17:35 - not the exact same
17:36 - and that is pretty much it it would just
17:39 - go through all the numbers summarize
17:41 - them up and then return these sum to you
17:44 - so
17:45 - let's deploy it now okay initially it
17:48 - aired out and that's because we haven't
17:50 - passed in the array was looking for so
17:53 - we need to pass in that array we're
17:55 - going to say one two three four five
17:57 - whatever transact now at this point the
18:01 - Constructor has run and the numbers
18:03 - arrays value is the one two three four
18:06 - five
18:07 - that we just passed in and now let's go
18:10 - through it so we're going to be able to
18:12 - fetch the numbers so the zeros
18:15 - at the zeroth index it's going to be one
18:18 - that's cool because that's correct
18:21 - and now we're just gonna hit a sum and
18:23 - it turns out to be 15. so that worked
18:26 - perfectly now let's move on to while
18:28 - loops
18:29 - all right so this next one while Loops
18:32 - this is gonna be again the exact same
18:34 - thing as in JavaScript so we're gonna
18:36 - once again just assume that number of
18:39 - arrays so we're going to have the index
18:42 - variable and we're gonna have the sum
18:45 - variable just like
18:47 - in any other loop
18:49 - and now we're going to say while open
18:51 - the Open brackets I is less than the
18:54 - number length I'm just gonna add it to
18:57 - the numbers and then iterate the
19:00 - iterable now we're going to return the
19:03 - sum and that is pretty much this
19:06 - function Let's test it out
19:08 - and it works perfectly just as expected
19:11 - now there's another one
19:13 - that is the do while
19:15 - and I actually don't really recommend
19:18 - using it it doesn't really make sense
19:20 - why it even exists but
19:22 - it is one of the loops so let's go over
19:24 - it
19:25 - now we're going to say do then
19:29 - then do the summarizing stuff and then
19:31 - we're gonna check whether the index is
19:33 - less than the
19:35 - numbers length and then return the sum
19:37 - now you might be asking what's the
19:38 - difference between the two the do while
19:40 - runs ones regardless of of the condition
19:43 - while the while actually checks the
19:45 - condition first and then runs the
19:48 - function
19:49 - based on whether that condition is true
19:51 - or not it's knocking on the door and
19:54 - then entering the room if you're let in
19:57 - that's the while or like similar to the
19:59 - while loop and then the do while is like
20:01 - you just go in take the door with you
20:04 - and then just like hey is it okay that I
20:06 - came in pretty much that's the biggest
20:08 - difference between the two that's pretty
20:10 - much it I don't recommend using do while
20:11 - let's move on
20:13 - all right now this might sound a little
20:15 - repetitive but I never actually
20:17 - explicitly explained what's the
20:19 - difference between the two so I'm going
20:21 - to show you two different functions and
20:24 - I'm gonna quick type them out
20:26 - nice
20:28 - so the second one we already saw it and
20:30 - I already explained what the view
20:31 - returns is it basically means that this
20:33 - function all it will do
20:36 - is return something it is a read-only
20:38 - function that just reads States from the
20:42 - contract or memory or all these things
20:44 - and then returns it to the to the front
20:46 - end
20:47 - now
20:48 - if you want the function to be able to
20:51 - change values or mutate values all you
20:55 - need to do is just simply leave out the
20:57 - view and then you can do your thing if
21:00 - it's not returning anything
21:02 - again just leave it out and you're not
21:06 - gonna need you you're not gonna need to
21:08 - worry about it
21:09 - now you can also have a function
21:12 - that only views and doesn't return
21:15 - anything
21:16 - I'm not I can't really think about use
21:19 - case for that but that is the syntax
21:21 - would be correct and you can also have a
21:24 - function
21:24 - that mutates states but returns
21:29 - something so there are like four types
21:31 - we just went over two main ones the two
21:34 - extremes so that is pretty much all this
21:37 - part is now let's go over to the last
21:39 - part which is function modifiers and
21:41 - that's pretty much the basics
21:44 - all right now this one function
21:46 - modifiers this is going to be a useful
21:48 - one let's just say you want to make sure
21:51 - that whoever is interacting with your
21:53 - contract is the owner of the contract
21:56 - like it's like some admin privileges so
21:58 - you will say you will create a modifier
22:01 - and you can just name it only owner and
22:04 - then you're going to say require message
22:06 - sender equals owner now who's the owner
22:10 - we'll specify that later let's just type
22:12 - it out and then we're gonna say if the
22:15 - use if the message center is not the
22:17 - owner
22:18 - then we can just reject it with this a
22:21 - nice little error message and then
22:23 - underscore semicolon now we're going to
22:26 - say the owner will be this or that
22:29 - address so we can just specify it or you
22:32 - can you can set it later in the
22:34 - Constructor so whoever is deploying the
22:37 - contract will dynamically be the owner
22:39 - but for now let's just specifically say
22:41 - that address is the owner of this
22:43 - contract now what will happen is
22:46 - whenever every function that uses this
22:49 - only owner modifier will be
22:52 - first running the require statements
22:55 - let's talk about the require
22:56 - D basically requires a condition to be
23:00 - true meaning the message sender so
23:02 - whoever is trying to interact with the
23:04 - contract the wallet that is trying to
23:05 - interact with the contract call a
23:07 - function send money to the contract
23:09 - anything anything that involves a user
23:13 - and this contract that is the message
23:15 - sender that wallet is the message sender
23:17 - so if that wallet address is not the
23:20 - same as specified on line six
23:23 - as that is the owner then that function
23:27 - has to fail and send back the you are
23:30 - not the owner a string is an error
23:32 - message and after that whatever else is
23:35 - in the function that will run that's
23:38 - what the underscore semicolon means so
23:40 - let's take a look at what if the get
23:43 - number function is only going to be
23:45 - accessible from now on
23:47 - by the owner so that means that no one
23:51 - else is going to be able to get the
23:53 - number
23:54 - which is five right here so no one else
23:57 - is going to get that response back
24:00 - but this one address that is specified
24:02 - right here
24:04 - so what's going to happen is
24:06 - when somebody calls this function this
24:09 - line will run first then this line
24:12 - because this is here so if this some
24:14 - underscore semicolon was before the
24:18 - required statement then this would
24:19 - require return this number first and
24:21 - then check whether the message sender is
24:24 - the owner but for security reasons
24:26 - that's not great so this is how you
24:28 - modify these functions and the reason
24:30 - why they exist is you might have
24:32 - multiple functions you want to make sure
24:34 - only the owner is able to access
24:36 - so at that point
24:39 - you can just keep using it keep reusing
24:42 - it like and obviously the modifier
24:45 - doesn't know doesn't have to be only
24:47 - owner in this case it was the easiest
24:49 - easiest example but you can also say
24:52 - modifier
24:54 - add two numbers and then it will just
24:56 - add one and two and then that runs
24:58 - before every single function call where
25:00 - you use that modifier so it can
25:02 - literally be that you would do multiple
25:04 - times it is recommended that you just
25:07 - put it into a modifier and then just
25:08 - keep using that
25:10 - in the functions
25:12 - let's take a look at it in action so we
25:14 - have the contract deployed
25:17 - and we're going to say get add two
25:19 - numbers we're just going to pass in
25:20 - three there nice it will add it to mean
25:23 - my number so now it's going to be eight
25:25 - and when you say get number because this
25:29 - wallet on the because this panel on the
25:32 - left hand side is not hooked up to the
25:33 - same metamask wallet now it says you are
25:36 - not the owner and it just threw an error
25:40 - however if I copy this account address
25:43 - here with that button and then just
25:45 - paste it now all of a sudden it will
25:47 - work so let's take a look at it we will
25:50 - have to deploy it again and then add the
25:52 - two numbers and let's see what what
25:55 - happens and now it return the
25:57 - now it returned the value so that is
26:00 - pretty much how it works all right now
26:02 - remember at the very beginning of the
26:04 - video we just went on to remix IDE now
26:07 - we're going to come back to vs code
26:09 - because I'm pretty sure you want to be
26:11 - able to eventually connect your app
26:14 - to a front end
26:16 - and even in all our tutorials that's how
26:18 - we do it let me just show you the whole
26:20 - workflow of solidity and if you're a
26:22 - very if you're a super beginner don't
26:23 - worry about it you can come back to it
26:25 - later when you're using it I just want
26:27 - to give it to you so that you are able
26:29 - to use it whenever you need to so what
26:32 - we're going to do is I'm going to show
26:33 - you how you can deploy your hello world
26:37 - solidity contract
26:39 - to the ethereum blockchain so we're
26:41 - going to be using the girly test net and
26:44 - there are multiple test Nets right now
26:46 - Gurley is the best one so I just
26:48 - recommend you use that
26:50 - and so the first step that we're going
26:51 - to be doing is we're going to say
26:53 - Truffle in it so you obviously need the
26:56 - Truffle CLI
26:58 - and so we're gonna say Truffle in it and
27:00 - we're gonna say hello world so that will
27:04 - go ahead and in two seconds create you a
27:07 - sample project and so in here you have
27:10 - all these folders and you don't need to
27:12 - worry about any of them so what we're
27:14 - going to say is Hello World dot Sol so
27:18 - far I'm pretty sure it's it makes sense
27:21 - and now just go over to your remix IDE
27:24 - copy here your code all right now that
27:27 - is here
27:28 - that's actually set up our
27:31 - deployment so what we're going to do is
27:33 - there's a link in the description that
27:35 - takes you to infuria and once you create
27:38 - your account which you which is
27:40 - completely free just go ahead click it
27:42 - they hooked you up with the best RPC URL
27:45 - so let's go ahead and once you're in
27:48 - here you can click create new API key or
27:52 - this might be in the middle so you can
27:53 - just say web3 API now this is this all
27:57 - this does is it will give you access to
27:59 - all the
28:01 - blockchains and everything that infuro
28:03 - has access to and infur is implementing
28:05 - and they are constantly adding new
28:07 - Services Under in their projects so
28:10 - we're gonna say my project let's just go
28:13 - hello world and I recommend you never
28:16 - put any spaces in these projects names
28:19 - later it might cause an issue when
28:21 - you're like doing all kinds of
28:23 - Integrations between vs code and
28:25 - inferior because you can do that
28:27 - so let's just go ahead hit create and as
28:30 - you can see this is where everything is
28:32 - at so
28:33 - these are all the services infuria is
28:36 - currently supporting so you have
28:38 - ethereum you have polygon optimism
28:41 - arbitrum Palm I don't even know any of
28:44 - these no actually I do but you have all
28:48 - these and you obviously have all the
28:50 - mainnets test Nets and everything so
28:53 - we're gonna go ahead select girly
28:55 - because that is our RPC URL here's your
28:59 - API key everything is ready to go they
29:01 - even give you these nice little
29:04 - command line tools so you can use it
29:06 - with that all right now let's come back
29:08 - to our vs code
29:10 - and you should install the
29:14 - truffle extension for vs code
29:16 - and here is everything you need for that
29:20 - to work so what we're going to do is we
29:22 - will connect Now using these this
29:24 - network tab to inferior so we're going
29:27 - to say connect to network
29:29 - the provider will be infuro
29:31 - and I need to sign into my inferior so
29:35 - that's cool now I'm just gonna go ahead
29:37 - open it
29:39 - that will take me to an inferior oauth
29:41 - page
29:42 - if you're already logged into inferior
29:44 - you're pretty much good to go
29:47 - if you're not it will make you sign in
29:49 - and then this is what you will see
29:51 - basically you're just gonna you're just
29:53 - gonna give access to trough give truffle
29:55 - access to your infuro by the way they
29:57 - are
29:58 - under the same umbrella it's nice you
30:00 - just hit authorize and your vs code is
30:03 - pretty much ready now you can close this
30:06 - page go back
30:08 - and it already shows you it will fetch
30:11 - all your projects or you can just go
30:13 - ahead and create a new project here and
30:15 - that will show up on your inferior so
30:17 - basically the two are linked together
30:18 - hit select the hello world and if you
30:22 - click on if you're a service here you
30:24 - should be able to see Hello World or
30:26 - whatever you name your all right now
30:28 - let's actually deploy this contract so
30:30 - let's see what do we got so in truffle
30:33 - it shows up there is your hello world
30:35 - solidity file I'm just going to go ahead
30:37 - select that and then there is this nice
30:39 - little deploy button
30:41 - and we're going to select the girly
30:43 - Network and by the way it fetches from
30:45 - inferior cell that's super cool let's
30:47 - just hit enter
30:49 - and it says unable to locate
30:51 - configuration file okay so the reason
30:52 - for that is
30:55 - this extension only looks in this root
30:58 - folder so what I will do
31:01 - is I'm going to say open folder
31:03 - and I'm going to navigate to my Hello
31:05 - World folder and then just open that
31:09 - so now it should work all the extensions
31:12 - are going to load in a second
31:14 - and now truffle will be ready to go so
31:16 - I'm gonna
31:18 - I'm gonna go ahead and hit deploy right
31:20 - now
31:21 - so let's hit that now it will show you
31:23 - all again all the networks that is
31:26 - available so you just want to make sure
31:28 - you select the one that is the inferior
31:30 - hello world world girly you definitely
31:33 - don't want to do mainnet because that's
31:34 - going to cost you a lot of money
31:36 - and I was going to ask for a gas price
31:38 - leave that empty don't worry about it it
31:41 - will just do some smart clever stuff if
31:43 - you leave it empty and now we'll have to
31:46 - set up a mnemonic now I already have it
31:48 - set up and here's what you will need to
31:50 - do to be able to have it set up and
31:52 - saved so you will want to say pace
31:54 - mnemonic I wouldn't recommend generating
31:56 - one because then it will be hard to add
31:58 - new ease to it because now you're going
32:00 - to have to pay gas fees for deployment
32:02 - so we're going to say paste now it's
32:04 - going to ask for the mnemonic
32:06 - and
32:08 - I'm going to open up my Chrome
32:10 - and if you don't know the mnemonic
32:12 - that's the secret recovery phrase I'm
32:14 - not going to show you mine but here it
32:16 - is basically so you open up your
32:17 - metamask
32:19 - and then open up settings
32:22 - and then in security and privacy the
32:24 - first option is reveal secret recovery
32:27 - phrase everything that is in there you
32:29 - just go ahead paste it in this thing and
32:32 - if you don't have a metamask yet it's
32:35 - basically free from the Chrome web store
32:37 - you just download it hit next next
32:39 - accept and you already have a meta mask
32:43 - wallet so that's pretty much it now
32:46 - you're gonna go ahead whatever it is
32:49 - pasted there
32:50 - hit and hit return it will pop open a
32:54 - finder window for you so you can save
32:56 - the mnemonic and that way you will have
32:59 - it just like me how I do
33:02 - right there
33:04 - so you can select that and that will go
33:06 - ahead and start deploying your hello
33:08 - world project
33:11 - and I will say it might say that it
33:14 - needs this HD wallet provider so let's
33:16 - just hit install on that
33:19 - so it will take a little bit of time to
33:21 - install that and then deploy my contract
33:24 - all right now as you can see there are
33:25 - multiple errors and there was one
33:27 - mistake that I made too first of all
33:28 - let's go through the air it took me a
33:30 - little bit to debug it but basically
33:32 - what's hap what's happening for me
33:34 - sometimes is this truffle HD wallet
33:37 - provider it doesn't always install so
33:39 - what you need to do is just copy this
33:42 - font this command the sudo npmi etra4 HD
33:46 - wallet Dash provider and the version and
33:50 - then just paste it there give it admin
33:51 - permissions if it will go through
33:53 - there's some excess issues that it was
33:56 - not able to resolve so with that this
33:58 - should be handled now the next thing
34:01 - that I missed that I forgot is now
34:03 - actually by the way I always forget it
34:05 - so it's just something I do on a daily
34:07 - basis is in the migrations folder we
34:10 - will need to create a new file that will
34:12 - be one zero one underscore deploy.js
34:16 - now this will help truffle to deploy our
34:20 - contract so what it what we need to do
34:22 - here is we need to import the hello
34:25 - world artifact
34:28 - from the contract that we just created
34:30 - and notice how I'm keeping the same
34:32 - casing that I had with the file name so
34:35 - it's because I used Capital H and
34:38 - capital W I'm going to be using it here
34:40 - as well
34:42 - and once that's done we're going to say
34:44 - module
34:45 - dot exports
34:47 - and then pass in deployer as an argument
34:50 - for the function and we're going to say
34:53 - deployer dot
34:55 - deploy and then pass in hello world
34:59 - that's pretty much it actually we can
35:02 - just do it as a one-liner that should be
35:04 - pretty much everything and now it should
35:06 - be able to deploy so let's go ahead here
35:09 - again click deploy so you will have to
35:12 - always select girly but after that it
35:14 - will remember if you once try to deploy
35:17 - it it will always remember the mnemonic
35:21 - and now it's deploying and looks like
35:23 - there are no more errors so that should
35:26 - be good and if you see stuff like this
35:29 - where it like starts counting the blocks
35:31 - that's usually good and as you can see
35:33 - deploy has succeeded it finished running
35:36 - the command so with that is pretty much
35:38 - this tutorial now we're going to include
35:40 - a couple of builds at the end of this
35:42 - video go ahead watch that what uh learn
35:46 - how solidity Works in actual projects
35:49 - this was a good foundation now it's time
35:51 - that you go ahead go out and apply these
35:55 - skills that I just taught you so with
35:57 - that said thank you so much for watching
35:59 - I'll see you in the
36:01 - see you in the belt
36:03 - it's for solidity do you want to finally
36:05 - understand it and wrap your brain around
36:07 - it well guess what we are going to build
36:09 - a to-do list app together in my opinion
36:12 - this is one of the best ways to learn
36:15 - how solidity Works how smart contracts
36:18 - work is this app the scope is small it's
36:21 - a simple app yet it's very powerful and
36:23 - effective and it'll get you to
36:25 - understand how a lot of functionality
36:27 - and solidity Works how can we use
36:29 - solidity along with truffle to make our
36:31 - smart contracts how do we add a task and
36:35 - delete a task and show all of the tasks
36:38 - how do we add a task so that it actually
36:41 - adds it on to the blockchain and when
36:44 - you get all the tasks your front end
36:46 - will go to your back end or your
36:49 - blockchain and get all the tasks from
36:51 - there this app will also have full on
36:54 - authentication built into it which
36:56 - essentially means that you'll be able to
36:58 - use metamask or any type of ethereum
37:01 - wallet and log in and log out and this
37:04 - app will only show you your tasks so any
37:08 - other users can't see your tasks and
37:11 - cannot delete your tasks so I think it's
37:13 - a very powerful app I hope that you're
37:15 - excited to use it and with that said
37:17 - let's
37:19 - um smash that like button so this video
37:20 - goes out to as many people as possible
37:22 - and in just a second we're gonna go
37:24 - ahead and demo this app also just real
37:27 - quick want to give a huge shout out to
37:29 - code with kavit who made the video to do
37:32 - app with react and solidity so huge
37:35 - shout out to that a lot of the
37:36 - inspiration comes from that I reference
37:38 - the code from there okay but I just
37:41 - added in next.js a lot of our front end
37:44 - completely custom front-end and we
37:46 - wanted to add in our own explanation so
37:47 - you could learn salinity step by step
37:49 - but if you want to check out also his
37:50 - video go check it out he's absolutely
37:52 - awesome with that said let's get back
37:54 - into the video
37:55 - now let's go ahead and demo the app so
37:58 - the first thing I'm going to do is I'm
38:00 - going to connect my wallet and you can
38:02 - see metamasks popped up over here on the
38:04 - right hand side I will select an account
38:06 - select whichever one you want and I will
38:09 - connect and boom look at that our app is
38:14 - up and running and it's like hey what's
38:15 - up Kevin or Causey or whatever your name
38:18 - is right we'll go there and now I can
38:21 - add tasks walk my dog at 1pm which is
38:25 - actually something I have to do and then
38:28 - hit this plus sign right here and watch
38:30 - this we're actually adding it to our
38:32 - blockchain so now metamask pops up to
38:35 - ask for authentication if we want to do
38:37 - this I will hit confirm and it has been
38:41 - added onto the blockchain and it is a
38:45 - actual task that is created let's go
38:47 - ahead and create another task I'm going
38:49 - to go ahead and eat my food at 5 PM okay
38:53 - let's go ahead and hit Plus on here and
38:56 - now just watch what happens okay let's
38:58 - hit confirm there we go it has been
39:01 - confirmed the front end is looking
39:03 - pretty nice but the main point of this
39:05 - app is not the front end it's that you
39:07 - could actually using solidity add tasks
39:11 - and things to the blockchain and it will
39:13 - really clarify and make you understand a
39:16 - lot of things of how solidity works and
39:19 - how smart contracts really work now if I
39:22 - hit delete on here this icon right there
39:25 - you'll still actually delete that so
39:28 - I'll hit delete and then let's wait a
39:30 - little bit and let's refresh and let's
39:32 - see if it's been removed okay boom I hit
39:35 - delete and now it actually asks me to
39:38 - make sure that it's confirmed and now
39:41 - once I confirm it okay you got to give
39:44 - it some time before it will actually
39:46 - just completely get rid of it because we
39:48 - are removing it we have to let the block
39:51 - our back end on the blockchain side know
39:54 - that we're actually going to be getting
39:55 - rid of it and now it's basically gone
39:58 - and this is happening on the blockchain
39:59 - sites I'll show you how we're doing this
40:01 - on the blockchain side so you can
40:03 - understand and since it's on blockchain
40:05 - you're not technically completely
40:07 - deleting it but we're filtering it out
40:09 - on the Block end and so you'll get to
40:11 - learn how to do that so
40:13 - this is the app I think it's really cool
40:15 - I think you can have a lot of fun
40:16 - building this with me with that said
40:19 - let's just start building this bad boy
40:21 - up now all right now make sure to click
40:23 - the link in the description below this
40:25 - is completely free and this is a
40:27 - template that I created for you solidity
40:29 - with the to-do list and it's going to
40:31 - have next.js and Tailwind CSS and all
40:34 - the front end code essentially just
40:36 - ready because I would just give it away
40:37 - I would want you to Simply focus on the
40:41 - web3 and the blockchain part so this
40:43 - Rebel for you will have all of that code
40:46 - already there and then you can only work
40:49 - on the solidity part okay so make sure
40:52 - to go here and if you want to use this
40:54 - make sure to hit Fork Rebel because
40:56 - that's the only way you'll be able to
40:58 - code in here and use this template okay
41:01 - and the link will be below and it'll be
41:04 - join.raplet.com
41:06 - CP solidity Dash to do so you could type
41:10 - that in or just click the link in the
41:12 - description all right with that said I'm
41:14 - gonna go ahead and Fork this ruffle and
41:18 - once I've forged this it should bring
41:20 - you to a page like this and all this
41:23 - means now is you can actually code here
41:26 - and so the benefits of this Rebel that
41:29 - I've sent you to is in this one you will
41:32 - have nexjs already installed all right
41:36 - you'll have Tailwind
41:38 - CSS already installed and configured all
41:42 - the front-end code is already completed
41:45 - so you won't really have to do any of
41:47 - the front end code okay majority of the
41:50 - front end code is complete okay let's
41:51 - not say all because there is still
41:53 - you're gonna still need to write
41:54 - front-end code that needs to interface
41:56 - with the back end okay so that's done
42:00 - truffle has been installed so truffle is
42:03 - I'll show you how to install it but I
42:05 - installed it already for you because it
42:07 - takes a really long time to install so
42:09 - I'm like hey I'd rather just have that
42:11 - process speed up okay this is done this
42:14 - is done most of this is done and then
42:17 - this is done okay so that's the real
42:19 - benefit of this Rebel that you're
42:22 - actually looking at all right so let's
42:24 - get started with that said what I'm
42:26 - going to do now is I'm going to walk you
42:28 - through majority of the code okay what's
42:32 - there so far and what you should find in
42:34 - here because you should find a client
42:36 - folder and that should have all of your
42:38 - front-end code okay so I'm going to walk
42:40 - you through that a little bit and then
42:42 - I'm going to walk you through some other
42:43 - stuff but first just make sure in your
42:45 - package manager all I want you to do is
42:48 - install truffle so you can type in
42:49 - truffle and normally what would happen
42:52 - is you'd have a plus sign here to
42:53 - install it you don't right now like plus
42:56 - sign like this you don't right now
42:57 - because already installed okay so that's
43:01 - already done so let's go here the next
43:03 - thing I want to show you is in your
43:05 - client front end in your package Json
43:08 - you're going to need access to some
43:10 - libraries like react icons or next or
43:13 - some Tailwind stuff that's already there
43:17 - for you okay so you don't have to
43:19 - install it you could yarn it but you
43:22 - don't even need to do that because like
43:23 - the node modules are already there as
43:25 - well so you should be good to go on that
43:28 - end so react icons you already have it
43:30 - then Auto prefix for post CSS until when
43:33 - CSS because these are all the things you
43:34 - need for CSS this the Tailwind files you
43:38 - need for so yeah your Tailwind is ready
43:41 - to go cool so that was one thing I had
43:43 - to explain to you now let's walk through
43:46 - the actual app so let's first take a
43:49 - look at it so you should be able to CD
43:51 - right now into your app into client and
43:55 - then just do yarn Dev and that should
43:57 - start running your app so let's take a
44:00 - look you can also open it in a new tab
44:03 - if you want to just fully see it it
44:06 - takes a second to just be a little bit
44:07 - patient and there you go your app is up
44:11 - and running okay you could zoom out if
44:13 - you want I'm going to zoom in because
44:15 - I'm on a big screen so I want you to see
44:16 - this and right now writing on your app
44:19 - will not work because that's the back
44:22 - end part and you haven't added any
44:24 - back-end code so really nothing is going
44:26 - to happen okay it's just gonna refresh
44:28 - and that's it yeah right now there's no
44:30 - front end so whatever you do nothing is
44:32 - really going to happen but you have the
44:34 - nav bar right here you have the entire
44:36 - to-do list app you have this to do thing
44:39 - and then you have this plus button right
44:41 - over here so that's mainly the front end
44:43 - right now so let's go back and what I
44:48 - want to show you is these are all the
44:50 - components that I've already created for
44:53 - you okay so the connect wallet button
44:56 - navbar all of those are there okay so
44:59 - navbar
45:00 - task to-do list so those are already
45:04 - there for you okay connect wallet button
45:08 - and wrong Network message now
45:10 - some of this stuff you're probably like
45:12 - okay how do I see the wrong Network
45:15 - message or connect wallet button because
45:16 - I don't see them right now so here's how
45:18 - you can see them so let's go into our
45:20 - Index this is the main file where
45:22 - everything is happening these are all
45:25 - the notes for the app but I'm going to
45:27 - just walk you through them together so
45:28 - we won't need them so I'm going to get
45:31 - rid of them okay and let me just walk
45:34 - you through the entire code base okay so
45:37 - let's put that here and let's just walk
45:39 - through the entire code base now all
45:42 - right so we're importing some of the
45:44 - components that we had made but here's
45:46 - what I want you to actually see all
45:48 - right the main part of the logic so
45:49 - these are functions that are just going
45:51 - to be empty all right these are
45:53 - functions you're going to have to
45:55 - complete these are the back end
45:57 - functions so connecting the wallet being
46:00 - able to get all the tasks from the back
46:02 - end being able to add a task to the back
46:05 - end and being able to delete a task from
46:08 - the back end so this is all back end
46:10 - related it okay all three of these
46:12 - functions so when I say backend in this
46:13 - case it's the blockchain part
46:16 - this connect wallet function is going to
46:18 - just simply be connecting wallet to
46:20 - metamask to any type of ethereum erc20
46:23 - wallet whatever all right so those are
46:26 - the ones that we're going to work on and
46:29 - this is the other main part that I have
46:31 - already handed over to you so this over
46:35 - here this div there's not much to really
46:37 - worry about here but this is really
46:39 - styling it if I get it rid of all of The
46:41 - Styling here it's just going to look
46:43 - like out of whack right so that's just a
46:46 - wrapper that's all that's doing so I'm
46:48 - going to bring that back and that'll
46:49 - just contain the app put it in the
46:51 - middle add a color in the background
46:53 - centralize things so that's what that's
46:55 - doing okay so now you can even pretty
46:57 - much not really worry too much about
47:00 - this piece of code this piece of code
47:03 - the main piece of code that I want you
47:05 - to focus on now and worry about is this
47:08 - guy right over here okay and that's
47:11 - really the main logic of the app so far
47:13 - which is hey check if the user is logged
47:16 - in and if they're not logged in show
47:18 - them the connect wallet button okay so
47:20 - here I can make a user B let's just fake
47:24 - a not logged in use sir and what that
47:27 - will look like how we can do that is
47:29 - just remove that Boolean that
47:31 - exclamation mark let's remove that
47:32 - exclamation mark so it just says is user
47:34 - not logged in so now it is true that the
47:37 - user is not logged in okay and if that's
47:40 - the case then show The Connect wallet
47:42 - button so that's why it's showing that
47:45 - button right there and now we the other
47:48 - situation we have is hey is this the
47:50 - correct Network okay so basically if the
47:53 - user if we go back to the other
47:55 - situation okay which is the user is this
47:59 - basically says the user is currently
48:00 - logged in okay because there's a double
48:02 - negation here negation here so it just
48:04 - means the user is logged in so if the
48:06 - user is logged in we bypass this
48:08 - component we don't do this we do the
48:11 - else statement okay so this is our else
48:14 - statement so if the user is logged in
48:16 - then we want you to ask one more
48:18 - question is this the correct network if
48:21 - we're on the correct Network which in
48:23 - this case is going to be the rinky B
48:25 - test Network then show the to-do list so
48:28 - then show this but if we're not on the
48:30 - correct Network so I can mimic that as
48:33 - well by just adding exclamation mark
48:35 - here and saying we're on the wrong
48:37 - Network so if we're on the wrong Network
48:39 - then it's going to not render the to-do
48:43 - list but render the wrong Network
48:46 - message component and this is a pretty
48:48 - simple component there's not much going
48:51 - on here and just says please connect to
48:52 - the ring could be testnet and and reload
48:55 - the page so this means you try to
48:56 - connect to some other network like raw
48:59 - spin or something else
49:02 - so that's what's happening there right
49:04 - if the user is not logged in and this is
49:09 - not the correct Network then show the
49:12 - wrong Network message okay so those are
49:14 - the three components and you can toggle
49:17 - them really easily by just removing if I
49:19 - remove both of these right then that
49:21 - means the user is not logged in and
49:23 - it'll show us the connect wallet button
49:25 - if the user is logged in then it'll show
49:28 - us and it's the correct Network then
49:30 - it'll show us to-do list and the to-do
49:32 - list pops up so just play around with
49:33 - that so you can just understand the
49:35 - logic that's happening here okay because
49:37 - that's the really kind of important part
49:39 - and then of course we're going to make
49:42 - this more dynamic because right now this
49:44 - is just hard coded here but we're gonna
49:46 - actually get access to the user using
49:48 - their ethereum wallet so you're going to
49:50 - need to complete the connect wallet
49:52 - function for that okay and then you'll
49:55 - be able to actually keep track of the
49:56 - logged in user and then where it says is
49:59 - this a correct Network same thing it's
50:02 - you're just going to pull that
50:03 - information from connect wallet and your
50:06 - connect wallet will be able to tell you
50:08 - if this is on ring could be the user
50:10 - logged in or the user logged in
50:12 - somewhere else okay so the connect
50:13 - wallet function will take care of both
50:16 - of these
50:17 - states that you need to be really
50:19 - tracking okay these are also going to be
50:21 - States right or so we're going to be
50:23 - using a little bit of react for that
50:26 - so for now what we're going to do is
50:28 - we're going to go ahead and Tackle
50:30 - really the most difficult part first
50:32 - which is we're going to be going ahead
50:35 - and making our smart contract first
50:37 - because really majority of this code
50:39 - like especially all these parts right
50:41 - here they're really going to depend on
50:44 - what your back end is like AKA what your
50:47 - smart contract is like because here you
50:49 - it's like imagine writing code without
50:51 - knowing what your API is going to look
50:53 - like everything you're going to write is
50:54 - going to be wrong so we're going to make
50:56 - our back end first and the API or
50:58 - whatever first and then from the front
51:01 - end we'll simply just interface with it
51:03 - okay so I hope that gives you a lot more
51:07 - clarity of what we're doing and now
51:10 - we're gonna go ahead and do that okay so
51:14 - let's go and create a back end now so
51:16 - this is our front end okay this is our
51:18 - client front end we're going to create a
51:20 - new folder okay at the global level I'm
51:23 - going to hit folder and make sure it's
51:25 - not in side of client make sure it's
51:27 - outside of client and this folder we're
51:30 - going to just call it our backend or the
51:32 - blockchain part okay and we're going to
51:35 - go ahead into our command line and we're
51:37 - just going to CD into that so hit Ctrl C
51:40 - to end hit CD dot dot so you can
51:43 - actually get out of it and now we're
51:45 - gonna go CD back end okay and now if
51:49 - you're in your back end now we're going
51:51 - to go ahead and say Truffle in knit
51:54 - okay so just type in Truffle in it all
51:56 - right so once you do Truffle in it if
51:59 - you look in your back end you already
52:00 - you have files now so you have truffle
52:02 - config you have a test file a migrations
52:05 - contracts another reason why I'm doing
52:08 - this on replit is you don't have to
52:11 - worry about this installation nightmare
52:13 - that often happens while you're coding
52:15 - Along on a Mac or a Linux or a Windows
52:18 - and you can get a solidity thing to
52:21 - install or a truffle thing to install or
52:23 - next install so everything is already
52:25 - installed and there for you okay so just
52:27 - make sure that you've forked the correct
52:29 - template and again it's in the
52:31 - description if you missed out on that
52:32 - earlier alright so I've done Truffle in
52:34 - it now my like template project is ready
52:39 - to go now we're gonna basically go ahead
52:41 - and create a smart contract so this line
52:44 - over here that says truffle
52:47 - create contract your contract name we're
52:50 - going to go ahead and use that command
52:53 - to create our new contract okay and
52:55 - that's going to create a scaffold of a
52:57 - contract so just like Bare Bones
52:59 - contracts I'm going to go ahead and say
53:00 - truffle create contract and then we're
53:03 - going to go your and sorry not your but
53:06 - we're going to say task contract okay
53:07 - because we're going to make a contract
53:10 - for our tasks so essentially we're
53:12 - getting a back end for our tasks all
53:14 - right let's do that okay so this
53:16 - contract will allow you to create a task
53:19 - and add a task and show tasks and filter
53:22 - tasks it's going to be all task related
53:24 - now if I look inside of my contracts I
53:28 - will see task contract dot Sol okay so
53:32 - let's go inside of here and now it's
53:35 - going to be the really meaty fun part
53:37 - because we're actually just going to be
53:38 - writing a lot of our logic here for our
53:43 - code okay so this is going to be all of
53:44 - our backend logic so it's going to be
53:46 - actually a really important part great
53:48 - let's walk through everything step by
53:50 - step because especially if you're new to
53:52 - solidity I just want to make sure that
53:54 - you understand every possible thing okay
53:56 - so I'm going to zoom in so everything is
53:58 - super nice and clear all right first
54:00 - thing right here this is oftentimes you
54:02 - will see it in solidity just add in some
54:04 - kind of license okay so just you can
54:07 - copy paste this exact one right should
54:09 - be there already now the solidity
54:12 - version that we want is a specific
54:14 - version in this case and I want
54:17 - 0.8.15 okay this is a version that I
54:19 - want every single line of solidity that
54:22 - you end you have to end it with a
54:23 - semicolon if you don't you will get an
54:26 - error or your app will break okay so
54:28 - that's important and here whenever
54:31 - you're actually writing a solidity file
54:32 - you pretty much always have to do
54:34 - contract task contracts so imagine like
54:37 - this is function or a component past
54:40 - contract when solidity you say contract
54:42 - and then this Constructor we don't need
54:45 - it so we can actually get rid of that
54:47 - Constructor okay in here we're going to
54:50 - have two events so I'm gonna have an add
54:52 - task event and is going to take in a so
54:56 - let me write it like regular JavaScript
54:58 - first so so it's going to take in a
55:00 - recipient and it's going to take in a
55:03 - task ID okay so this is how you might
55:07 - write something in JavaScript or you're
55:09 - like okay I'm creating a function or
55:10 - whatever and this function takes called
55:13 - it's called add task and it takes in two
55:15 - parameters recipient and task ID except
55:17 - in solidity you have to say those their
55:20 - types so recipient will be a type
55:22 - address okay so those wallet addresses
55:26 - like whatever the wallet address is like
55:29 - those are specific types of solidity and
55:31 - you refer to them as address and then
55:34 - task ID is going to be an unsigned
55:36 - integer okay so we will say u in and
55:40 - then we're also going to need an event
55:41 - for delete task okay and delete task is
55:44 - going to ask for a task ID and it's
55:46 - going to ask for if it's deleted or not
55:49 - the task is deleted or not okay and task
55:53 - ID is going to be auint okay and then
55:56 - this is going to be can you guess if
55:58 - something is a true or false also what
56:00 - data type is that if you guess Bool good
56:02 - job okay so that's going to be a Boolean
56:04 - all right now we're going to create a
56:09 - data type that's going to represent the
56:10 - following structure so let's go into our
56:13 - index file and I just want to kind of
56:15 - show this to you in index our tasks will
56:20 - have the following structure so this is
56:22 - an array of tasks but this is an object
56:26 - or in in solidity you might call this a
56:29 - map or a struct this is this right over
56:32 - here okay is an object here right
56:34 - JavaScript this is what one task will
56:37 - look like it'll have an ID text and
56:40 - whether it's deleted or not okay so
56:43 - that's what one task looks like so if I
56:46 - go ahead and I go back to my task
56:48 - contract you could do command P for what
56:50 - I did and then just type in task
56:52 - contract okay so we're gonna now create
56:55 - a structure that mimics what we saw so
56:58 - I'm going to go ahead and do struct and
57:01 - task and this structure is just going to
57:05 - say hey it's going to take these are the
57:08 - keys okay so we're gonna have an ID
57:09 - we're gonna have task text and we're
57:13 - going to have is deleted okay and the
57:16 - last thing you want to tell the struct
57:17 - is what are the data types of each of
57:20 - these so for ID my data type is a uint
57:23 - for tasks text is going to be type
57:25 - string and for the is deleted it's going
57:28 - to be a Boolean okay so in solidity if
57:33 - you want to create let's say something
57:35 - with an object right if you want to
57:37 - create a task like if I go back to this
57:40 - task right here if I want to create a
57:42 - task like this so let's copy this and
57:45 - let's come back into our task contract
57:47 - and let's paste it if I want to create a
57:49 - task like that I can use a struct to
57:52 - create that exact task so I can go task
57:54 - and then let's say I pass it a one I
57:58 - pass it clean and let's say I pass it
58:01 - false sorry zero it's going to create
58:05 - that exact task so this is going to
58:08 - return and turn into an object okay so
58:10 - it's almost like you're calling a
58:12 - function or whatever okay it's a
58:13 - Constructor it's a task and then it'll
58:16 - spit back out that okay so that's how
58:20 - that's why you need structs and when you
58:23 - use a struct you will get back what we
58:25 - call an object in JavaScript okay this
58:28 - is just to give you a little reference
58:29 - okay so I'll leave that reference up
58:33 - here and this is a task okay this is
58:36 - what a task will look like okay great so
58:39 - we have our task struct and now what we
58:42 - want to do is we want to have an array
58:45 - that is filled with tasks so when you're
58:49 - creating that you're going to basically
58:51 - say hey I want to create a so let's just
58:54 - do it this way okay so I'm going to
58:55 - create an array called tasks in
58:58 - JavaScript you would just do this but
59:00 - here this is not JavaScript right so I
59:03 - want an array called tasks now what I
59:06 - want it to be is I want it to be of I
59:10 - want it to be an array okay and it's
59:14 - going to have it's gonna be an array and
59:17 - it's going to be filled with these
59:19 - objects okay so if you try to put
59:22 - integers into this array tasks so for
59:25 - example let's just say you try to do
59:26 - tasks dot push so let's say you have
59:29 - this variable tasks available to you now
59:31 - okay and let's say tasks is an array now
59:36 - if you try to do task stop push and put
59:38 - a one it's going to go it's going to
59:40 - give you an error because it's going to
59:42 - say hey that's not the type that you
59:44 - told me the type that you told me it's
59:46 - gonna this is the type this is what it
59:49 - should look like but now if you actually
59:51 - put let's say something that looks like
59:53 - this in here if you try to push this
59:56 - it's going to accept it it's gonna go
59:58 - yes this exact thing okay this is an
60:01 - integer this is a string for task as a
60:06 - Boolean yes I will accept it and it will
60:08 - add it okay so you're creating these
60:11 - strict types so it's like typescript if
60:13 - you've ever used it and then we're just
60:15 - going to say this is private meaning
60:16 - that anybody outside of this function
60:19 - should not have access to it okay and
60:22 - then we're going to create a mapping
60:24 - which is going to be helpful for task
60:26 - two owner so we'll say mapping and I'll
60:29 - say units 256 address
60:34 - task to owner so I know this is probably
60:38 - like what the heck is this all this part
60:41 - means so this part right over here is
60:43 - just a variable okay we're just saying
60:45 - hey create initialize a variable called
60:47 - task to owner
60:49 - and the type that it's going to have is
60:50 - this and all this means that anytime you
60:53 - create task to owner you're going to
60:56 - have an object that looks like the
60:57 - following the key this represents this
61:01 - part right here represents a key right
61:04 - over here represents an address okay
61:09 - obviously and an address might look like
61:11 - those wallet addresses might look like
61:14 - that okay so here let's just say that
61:18 - this is the wallet address of qazi which
61:20 - is me okay and then we go boom all right
61:24 - task to owner and then boom we will have
61:28 - another task like this oh not in the
61:31 - same thing but let's just say we have
61:33 - another task and this is Task one and
61:36 - this is David okay so how this will work
61:40 - is imagine this you have two tables okay
61:43 - and on the left hand side we have a
61:46 - table called tasks and then a right hand
61:48 - inside we have a table called owners
61:51 - okay and so say walk the dog might be a
61:55 - task and then here on the right hand
61:58 - side for owners you have all the owners
62:00 - like qazi whatever
62:02 - but the way that we're storing it is in
62:04 - the following way so we're giving this
62:06 - task an ID of zero
62:09 - so we're going to set the task ID here
62:12 - is zero walk the dog and inside of
62:16 - owners we're going to say the idea of
62:18 - zero belongs to let's say qazi and
62:21 - almost like in SQL this will allow us to
62:23 - do an inner join and match all these
62:25 - tasks so this way the app will have
62:28 - proper authentication and it'll show me
62:30 - only my tasks not somebody else's for
62:33 - example if for one we had clean dishes
62:36 - but that was like David created that
62:39 - then this would basically say hey this
62:42 - was created by David okay so then when
62:46 - qazi logs in qazi will only see walk the
62:49 - dog and when David walks in he will only
62:51 - see clean the dishes okay so the ID
62:55 - inside of the task and this ID this key
63:01 - over here these are the two pieces of
63:05 - the puzzle that allow us to do an inner
63:07 - join and find and the who the tasks
63:11 - belongs to so this is a structure this
63:14 - is what mapping blah blah whatever is
63:16 - okay this is what it'll look like so
63:18 - I'll get rid of that for now okay cool
63:20 - now next up we're going to create a
63:23 - function and this function we'll call it
63:26 - add task all right let's keep on rocking
63:28 - and rolling here so our add task
63:31 - function that we're going to make is
63:33 - going to take in a task text and it's
63:36 - going to take in is deleted okay so
63:39 - here's what I want you to imagine right
63:41 - now this function that we're actually
63:43 - creating here right now we can actually
63:45 - call this function from our front end
63:48 - okay so imagine that we're going to be
63:49 - calling this from our front end at some
63:51 - point and how we're going to be calling
63:53 - this from front and at some point is
63:55 - going to look like this from our front
63:56 - end we're going to do task contract dot
64:00 - add task function and then from our
64:04 - react slash next.js code we're going to
64:08 - pass in a a text like walk the dog and
64:13 - then we're going to pass in is deleted
64:16 - as false or true so we're gonna let's
64:17 - say pass in like this is not currently
64:19 - deleted this is so deleted is deleted as
64:21 - false so this is add task function or
64:25 - method or whatever you want to call it
64:27 - that we are creating that we could
64:30 - interact with eventually from our front
64:31 - end not right this second okay so that's
64:34 - what we're writing just keep that in
64:36 - mind all right now since this is
64:38 - solidity we have to tell it what types
64:40 - these are so task text
64:42 - this is a string and when you do string
64:45 - you sometimes have to write memory there
64:47 - so we'll just write that and then this
64:49 - one is a Bool okay so that's what that
64:53 - is all right so we're done with that
64:56 - part now what we want to do is we want
64:59 - to basically say that this function is
65:01 - external so we have access to it from
65:03 - outside of this too and external
65:06 - basically means that this function isn't
65:09 - really doing isn't really returning
65:11 - anything in this case Okay so we're
65:14 - gonna go ahead and say we're going to
65:16 - create task ID and what will task ID be
65:20 - so think about it like this okay say you
65:22 - have an array of tasks so you have an
65:24 - array of tasks and that array looks like
65:26 - this
65:27 - like this filled with these tasks okay
65:31 - so we got task one we got task two task
65:35 - three what we want to do is we want to
65:37 - generate task IDs here right and we want
65:42 - to generate preferably a unique task ID
65:44 - most of the time and we also want to
65:48 - just make it simple like the first one
65:49 - should be zero the next one should be
65:51 - one the next one should be two so on and
65:53 - so forth this is easy what we could do
65:55 - is say that this array is called tasks
65:58 - what we could do is we could just say
66:00 - when we're creating this task we could
66:02 - just for the ID we could just say hey
66:05 - grab the tasks and grab its dot length
66:09 - so if I get this task's length well I
66:12 - get zero well when I get this tasks
66:16 - length the second time I get one when I
66:18 - get the tasks like the third time what
66:20 - do I get hopefully you guessed it okay
66:23 - you get a two right simple we're just
66:26 - gonna say it's going to be tasks.length
66:28 - okay and we're pulling the tasks from
66:31 - there make sure to put a semicolon so it
66:34 - doesn't error out next up what we're
66:36 - going to do is whatever task the user
66:39 - passed in we need to append that to our
66:42 - tasks array right that's made up of
66:45 - these task objects okay so I'm going to
66:48 - say tasks dot push and now we're going
66:51 - to create that object okay so I'm going
66:54 - to say task Constructor then give it the
66:57 - task ID that we just created right there
67:01 - we're going to give it the task text and
67:03 - then the is deleted task text and is
67:07 - deleted so this will push it on and
67:10 - basically what this is doing is this
67:13 - right here will basically get simplified
67:16 - to that right there okay one task is
67:20 - going to create one object one map all
67:23 - right next up we need to set up that
67:26 - database of task to owner so create that
67:29 - relationship so I'm going to say task to
67:32 - owner okay and I'm gonna give it a task
67:35 - ID for task owners remember this
67:38 - variable that we made task to owner and
67:40 - so it's going to take a uint right and
67:44 - the unit in this case will be zero for
67:48 - this task for the next tax is going to
67:50 - be one for the next task is going to be
67:52 - two and this over here needs to be
67:55 - whoever the user is okay so user is
67:59 - going to go right there okay the logged
68:01 - in user in this case we're just going to
68:04 - say message it's on sender this is a
68:06 - special thing in solidity MSG message
68:09 - and then if you do dot sender it'll get
68:11 - the wallet address of whoever was
68:13 - currently logged in let's put a
68:15 - semicolon here let's put a semicolon
68:18 - here okay and then we can even emit this
68:21 - and we can say omit add task and I can
68:25 - send message sender and then give it a
68:27 - task ID remember we created this event
68:29 - at task and now we can emit it but we
68:32 - just need to give it an address for the
68:34 - recipient so this is the recipient and
68:37 - then this is the task ID right giving it
68:40 - that task ID perfect so in terms of add
68:44 - task function our add task function at
68:46 - this point is complete I'm going to
68:48 - remove these tasks at the bottom or I
68:50 - can leave it and just comment it out all
68:53 - right the next function that we need to
68:55 - add is our get tasks function okay or
69:00 - get my tasks function so let's go ahead
69:03 - and do that so I'm going to say function
69:05 - I'm going to say get my tasks and we're
69:09 - going to say external view returns and
69:13 - we can even say what this will return
69:14 - and this will return a task like object
69:18 - okay and now let's open this function up
69:22 - and start writing okay so we're going to
69:24 - create a variable called temporary okay
69:26 - and so temporary is just going to be an
69:28 - array and what we want to do is we want
69:31 - to keep pushing new tasks to it that are
69:35 - of that owner okay so temporary will
69:39 - filter for the owner and for non-deleted
69:42 - tasks okay so get my tasks we want to do
69:45 - is we want to get tasks that let's say
69:50 - that have that are mine and not yet
69:54 - deleted okay so temporary okay and it's
69:58 - gonna give a new task like object we'll
70:01 - instantiate it like this okay and this
70:04 - array that we want so temporary is going
70:06 - to be an array and this array that we
70:08 - want so in solidity you could give a
70:10 - size of the array so if I said array of
70:13 - let's just say 2 or whatever or 2 right
70:16 - here then what will happen is I will get
70:19 - an array of size 2 and no bigger like it
70:23 - can't go bigger than size two it has a
70:25 - fixed amount of slots and so what I'm
70:27 - going to just say here is tasks.length
70:29 - why because I want this array
70:32 - to be obviously no longer than there are
70:35 - tasks that wouldn't make sense and this
70:38 - temporary here it's going to be this
70:42 - it's going to be an array of these these
70:46 - tasks okay and we're just going to say
70:48 - memory perfect okay and let's put a
70:51 - semicolon there let's put a semicolon
70:54 - here if you miss any semicolons it will
70:56 - break so just keep making sure to put
70:57 - semicolons everywhere all right now
71:00 - we're going to set up a counter that I'm
71:02 - going to set to zero and then we're
71:04 - going to write Loop through this and so
71:07 - I'm going to say
71:08 - for U int I equals zero while I tasks
71:13 - dot length Okay I plus why are we doing
71:16 - this we're going to Loop through all of
71:18 - our tasks and then we're just going to
71:20 - keep adding them to Temporary and we're
71:23 - going to do a check here so I'm going to
71:24 - say if task to owner
71:27 - of that specific task is equal to the
71:31 - message just sender meaning if this is
71:33 - my task so let's say that there is a
71:37 - task owner that has a key of zero right
71:41 - and so if we look at that and we go and
71:44 - get the key of zero and we go okay the
71:46 - task is whatever if this is going to
71:49 - turn it into its value is going to be an
71:52 - address and if that address of that task
71:56 - matches the address of who's logged in
71:58 - then that means this is these are my
72:01 - tasks okay and we're going to add in one
72:04 - more check
72:05 - and we're going to say hey check if
72:08 - tasks is deleted is false so making sure
72:12 - giving me tasks that are not yet deleted
72:15 - let me zoom out just a little bit so
72:17 - give me tasks that are not deleted okay
72:19 - so if this is the case what I want you
72:23 - to do is set that task in that specific
72:26 - position this is just a way of writing a
72:29 - push okay this is just another way of
72:31 - writing a push I want you to get used to
72:32 - it because in solidity this is like
72:35 - pretty common people do it like this or
72:37 - you're just really basically saying in
72:39 - the zeroth position place this in the
72:42 - first position of that temporary array
72:45 - place this so if you imagine temporary
72:48 - is an array of size two so let's just
72:51 - say it's empty empty right now what this
72:53 - is saying is hey go to position zero so
72:55 - this is position zero and then set that
72:58 - to that specific task so tasks text
73:01 - hello is deleted
73:04 - false whatever so add that task there
73:07 - and then go again loop again and then if
73:10 - you find my task again that's also not
73:12 - deleted at that here okay so that's
73:15 - what's temporary is and then we just
73:18 - increment the counter by one so we will
73:20 - do counter Plus
73:22 - okay so let's get out of this and then
73:25 - all we're going to do is we're just
73:27 - going to spit it out in something called
73:30 - result and result is going to be the
73:33 - length of the counter not the length of
73:36 - the entire array so result is just going
73:38 - to be so if my tasks were two and the
73:42 - total tasks were maybe 10 then this
73:44 - result is only going to be of size 2 and
73:48 - we'll Loop through this so I will say I
73:50 - is equal to zero I is less than counter
73:54 - I plus and then I'm just going to say it
73:57 - for a result of I just set it to be if
74:00 - whatever is in temporary of I okay and
74:03 - then at the end we're simply just going
74:05 - to go ahead and return result okay so
74:09 - that's my function here's my Loop then I
74:13 - do my loop again and then I return my
74:15 - result okay so that's what's happening
74:17 - there just make sure to put semicolons
74:19 - in all the right places don't miss any
74:21 - semicolon that's how I call this on my
74:23 - colon okay great so we're good with get
74:27 - my tasks okay the next one that we're
74:29 - going to work on is add task where does
74:32 - the whole tract end so let's see
74:35 - contract and right there okay cool let's
74:38 - go here and we're gonna go ahead and say
74:41 - function and it's going to be a new
74:43 - function we're going to make and this
74:44 - function is only going to be for
74:46 - deleting tasks because we already have a
74:49 - way to add the task we already have a
74:51 - way to get our tasks now all we need to
74:54 - do is be able to delete tasks okay so
74:57 - I'm going to go ahead and say task ID is
75:00 - delete task once a task ID it also wants
75:03 - is deleted or not okay so we can just
75:06 - say Bool and does make it external great
75:10 - now I'm going to say if the task to
75:14 - owner so it's basically if it's if I am
75:18 - authenticated to be viewing this or
75:20 - doing stuff with it so if this is my
75:22 - task that was given then what I want you
75:26 - to do is get that task ID and set its is
75:31 - deleted to be is deleted whatever was
75:35 - passed in which you honestly don't even
75:37 - have to be past this it should just be
75:39 - set to false but like you could do it
75:41 - like this as well that's fine and you
75:43 - can set it to true I'm sorry true so
75:45 - just locate it's deleted as true and
75:48 - then we just emit the events okay this
75:51 - is not completely necessary but you
75:53 - could do this now basically just so you
75:55 - can visualize what's happening is from
75:57 - the front end how we're going to call
76:00 - any of these functions from the front
76:02 - end we want to be able to just do task
76:06 - contract that delete ask and then we
76:09 - give it a task so we give it like an ID
76:11 - so we give it zero I'm just mapping this
76:14 - to that and then we give it this so we
76:17 - just go true so that just means hey I am
76:20 - confirming that I want to delete this
76:22 - specific task and I'm saying 0 comma
76:25 - true and then it will confirm and then
76:28 - delete that task okay but realistically
76:31 - all we're doing is we're not
76:33 - really deleting tasks all we're doing is
76:36 - setting its deleted value to true and
76:39 - then in our get my tasks we're just
76:42 - filtering for it we're just really
76:45 - there's just a filter okay and that
76:46 - filter all it does is it just doesn't
76:49 - show you anything that has the deleted
76:53 - value set to True okay so the filter is
76:56 - filtering is happening here specifically
76:59 - right okay make sure it's not deleted is
77:02 - what that line is saying and then here
77:04 - we're just marking so think of it like
77:06 - we're just labeling it as deleted and
77:09 - then we're just filtering it because on
77:11 - the blockchain you can't really delete
77:13 - anything all right cool and then now we
77:15 - can get rid of this so with that said
77:17 - our smart contract part that we wanted
77:20 - to write our smart contract is done all
77:23 - right so if you've gone here really good
77:25 - job awesome job and now we're going to
77:28 - go ahead and move forward okay now we're
77:31 - almost ready to interact with it from
77:34 - the front end we're very close but not
77:37 - completely there yet so what we have to
77:40 - do is get it ready to be interacted with
77:42 - from the front end so we'll need really
77:46 - two things we'll need a contract address
77:49 - a diploid contract address we need to
77:52 - deploy this okay so that means almost
77:54 - imagine like you're deploying it to the
77:56 - web and then you can access it from your
77:58 - front end okay or you're deploying it
78:00 - then the second thing we need is access
78:02 - to a which if I want to make your life
78:05 - really simple is literally just an ape
78:08 - that will allow you to use all these
78:09 - methods okay so we need this and we need
78:13 - ABI okay I luckily for us gets created
78:18 - pretty easily in the back end okay I'll
78:21 - show you where that gets created once we
78:23 - go ahead and create it for now the most
78:26 - important thing is we need to get a
78:28 - deployed contract address all right now
78:31 - here are the steps that we're going to
78:32 - take so in our back end let's go ahead
78:34 - to our migrations and in here we're just
78:38 - going to rename this to task contract
78:40 - everywhere so task contract that should
78:43 - be task contract and that should be task
78:45 - contract once we're done with that we're
78:48 - just going to download this entire
78:50 - project so everything from Rebel okay
78:53 - we're going to download it as zip on our
78:55 - local computer because for this part we
78:57 - need two Terminals and then Rubble
79:00 - replace currently you can have two
79:02 - terminals open at once and so I'm just
79:04 - going to go ahead and download it and
79:06 - then we can use it locally if you have
79:08 - ever if you ever have problems with
79:09 - downloading just simply refresh your
79:12 - Ripple and then just go ahead and try
79:16 - downloading again and then it should be
79:19 - fine all right so now we have this ZIP
79:21 - file let's go ahead and open this up
79:23 - this ZIP file once it's opened up in
79:26 - your command line I want you to go ahead
79:28 - and CD into it so let's go to our
79:30 - downloads and we're gonna find where
79:32 - that is so so solidity template 2 or
79:35 - whatever okay so I'm going to go ahead
79:37 - and do template let's see if it's CD
79:41 - solidity template two perfect so now I'm
79:45 - inside of this okay folder
79:49 - and now once you're here
79:52 - first things we want to do is this we
79:54 - want to go ahead and install truffle if
79:58 - you don't have it on your local computer
79:59 - just do yarn Global add truffle okay or
80:04 - ndx Global or npm Global at install
80:07 - truffle whatever okay so you're gonna
80:10 - need that okay you need to add it
80:11 - globally you can't if you do it locally
80:13 - it still won't work so make sure you
80:15 - install it globally and then it'll work
80:17 - okay so now we installed truffle
80:20 - globally now what you want to do is CD
80:23 - into the backend folder
80:25 - and you want to do truffle dashboard and
80:28 - this is super cool it'll actually open
80:30 - up a truffle dashboard and you want to
80:33 - deploy it with your own specific wallet
80:36 - address so it allows you to do that so
80:37 - you can actually click metamask here all
80:40 - right and then it says Hey confirm that
80:42 - you're on rinky B Network and yeah I
80:45 - believe that we are so let's connect it
80:47 - okay so now it says there's a green sign
80:51 - here that says connected zoom in there
80:54 - perfect okay so now that it's connected
80:57 - I can get out and I can just hit confirm
81:00 - okay great so now this is good now let's
81:03 - open up our command line we'll leave
81:04 - this dashboard running and just open up
81:07 - a new tab okay so open up a new tab so
81:10 - this one is running or open up a new
81:12 - terminal whatever you want to do is
81:13 - whatever is easier for you okay now we
81:16 - CD into that same place
81:18 - solidity is seeding to back end and what
81:22 - we want to do now
81:23 - is go ahead and do truffle migrate Dash
81:27 - Network
81:28 - dashboard okay so this will compile all
81:32 - our contracts so there's an error you
81:34 - forgot to put semicolon so I'm going to
81:37 - go ahead inside of our contracts and
81:39 - I'll also make sure to put a semicolon
81:41 - here and here okay but more importantly
81:43 - we need to actually fix that on our
81:45 - local file so let's go ahead into our
81:48 - task contract dot Sol and let's see if I
81:52 - can open it with code Runner because
81:54 - it's just quick you could do it with vs
81:56 - code whichever one it doesn't really
81:58 - matter
81:59 - okay and I'll go right there wherever
82:02 - I'm doing the emits and put a put a
82:06 - semicolon here and a semicolon here and
82:09 - just save it okay I'm gonna get out okay
82:12 - let's open up our terminal again and
82:14 - let's try it one more time now it's
82:16 - deploying it look at that already
82:18 - popping up over here that is pretty
82:21 - freaking cool huh waiting for
82:23 - transaction signature please check your
82:25 - wallet for a transaction approval
82:27 - message okay so we're gonna go ahead and
82:29 - now hit process so let's hit process
82:32 - boom or wallet just opened up go ahead
82:34 - and hit confirm okay and now it's just
82:38 - deploying it to the internet okay or the
82:42 - blockchain rather and boom there you go
82:44 - it's been deployed now the very
82:47 - important thing that we need here is the
82:49 - contract address so double click copy
82:51 - that because that's what you're going to
82:52 - need okay everything else you don't
82:54 - really need right now let's go back to
82:57 - our replit and let's open up our shell
83:01 - feels like a ritual
83:03 - feels like a crazy ritual seating to
83:06 - back end okay all right now that I'm
83:09 - inside a rebel and I'm in back end I'm
83:11 - just gonna go ahead and do truffle
83:13 - compile so now once I compile it's going
83:17 - to make my API for me so let's go ahead
83:21 - and see that build contracts boom we
83:25 - have our task contract right here and
83:28 - taskcontract.json that's our ABI AKA our
83:32 - API and what we're going to need to what
83:35 - allows us to be able to talk to this
83:38 - from our front end okay so with that
83:41 - said that is successfully compiled we're
83:44 - done with that now let's go ahead inside
83:48 - of our client folder so let's go here
83:51 - and we're going to go ahead and create a
83:53 - new file and this file we're going to
83:55 - call it config.js
83:58 - so just pretend like I didn't have this
84:00 - file okay so we're going to create a new
84:02 - one didn't mean to have that file okay I
84:04 - shouldn't have that file okay so let's
84:06 - just pretend you never saw that all
84:09 - right and go into clients and you're
84:11 - gonna make it because you're not gonna
84:12 - come with the config file okay so let's
84:15 - go ahead and by the time you're seeing
84:17 - this tutorial that problem should
84:19 - already be fixed and you shouldn't even
84:20 - have a config file so it's great all
84:22 - right now in the config file what I need
84:25 - to do is I need access to that specific
84:29 - contract address that I had copied
84:31 - earlier if you don't have it copied
84:33 - earlier just go ahead double click here
84:36 - copy it now okay and there you go that's
84:40 - the address so just do export const con
84:43 - task contract address
84:47 - equals that okay and this is going to be
84:51 - pretty important so make sure you leave
84:53 - that in your config file okay because
84:56 - this is the contract address we're going
84:57 - to need to be able to speak to it from
84:59 - the front end so almost imagine like
85:00 - this is your access token okay you're
85:03 - gonna need access to your access token
85:06 - now let's go ahead into our index.js and
85:09 - now we're ready to actually start
85:10 - writing up all of our code so we're
85:12 - going to go ahead and import task ABI
85:15 - and we can just say from and we want to
85:18 - get to our task API is coming from our
85:22 - back end
85:24 - taskcontract.json right here so we just
85:26 - need to import this file task
85:29 - contract.json so we got to go into
85:31 - backend and then inside of back end
85:34 - where do we need to go into we need to
85:36 - go into build and then inside of that
85:38 - when you're doing contracts and then go
85:41 - taskcontract.json okay if you copy link
85:44 - to that should that's actually a
85:46 - different link that's not the path so
85:48 - ignore set that cool
85:51 - all right there you have it so now we're
85:53 - importing that address okay that's one
85:55 - thing that we need access to the other
85:57 - thing we're going to need access to is a
85:59 - contract address so let's go ahead and
86:01 - do import task contract address from and
86:06 - this is much closer to us it's just in
86:08 - our config Js
86:11 - you can hit that over there to just
86:14 - purify your code all right now that we
86:16 - have our task API and we have our task
86:20 - contract address
86:21 - now we're really ready to actually
86:24 - finish writing all this code because
86:27 - those are really some of the main things
86:29 - that we needed access to all right first
86:32 - thing we're going to do is Implement our
86:34 - connect wallet function okay because
86:36 - that's going to be kind of the Sim one
86:39 - of the simplest simpler ones and one of
86:41 - the most important and the first thing
86:43 - that happens so for that we're going to
86:45 - need ethers okay and ethers is something
86:50 - that you'll have to install if you don't
86:53 - have it already so we could just go and
86:56 - check if we have it all right let's get
86:59 - to work on connecting our wallet so the
87:02 - first thing I'm going to do is I'm going
87:04 - to pop it into a try catch block We'll
87:08 - add the catch as well okay is going to
87:12 - be just simple it's going to be hey
87:14 - there's an error just say error okay
87:17 - cool and then in the try we're gonna
87:21 - basically write all of our logic so I'm
87:23 - going to say hey grab ethereum from
87:26 - window so whenever metamask actually
87:28 - like latches on so to speak on your app
87:32 - so whenever you like log in with
87:35 - metamask or whatever the window like the
87:38 - Chrome window or the Safari window or
87:40 - whatever you actually have access to a
87:43 - variable called ethereum okay so you
87:46 - could actually destructure that it
87:48 - becomes a property of window you could
87:50 - destructure that out of window okay so
87:53 - we're going to grab access to ethereum
87:54 - and then we're going to say if ethereum
87:58 - does not exist so it's like value is
88:00 - null or whatever then we're just gonna
88:02 - say metamask not detected
88:06 - and then we're just gonna end the whole
88:09 - thing just hit return it's kind of like
88:10 - a guard Clause okay just make sure
88:12 - that's there
88:13 - all right we're gonna check the chain ID
88:16 - and we're gonna get it from ethereum our
88:19 - request and the method that we're
88:22 - looking for here is going to be eth
88:25 - chain ID okay that'll get us the
88:30 - whatever chain somebody logged on with
88:32 - that specific chain ID okay and then we
88:36 - can just say hey this person connected
88:38 - to chain and then we can just write a
88:42 - chain ID okay great
88:45 - so let's go ahead and set a rinky B
88:48 - chain ID and rinky between ID is 0x4
88:51 - okay that will make sure that the user
88:53 - is on ring can be indeed rinky B is a
88:55 - test Network and it's also what my what
88:58 - I named my cat after and then we're
89:01 - basically going to say hey whatever the
89:03 - chain ID that the user selected if
89:05 - that's not the same as the rinky B chain
89:07 - ID and in that case you're not you're
89:12 - not connected to the rinkabee test net
89:15 - right and then we want to now start
89:18 - getting some State variables into play
89:20 - so let's go ahead and create a couple of
89:21 - State variables we'll just start off
89:23 - with const correct Network we'll have
89:27 - set correct that work okay and this we
89:32 - could set it as false and the start the
89:35 - network that's selected is Fault like
89:38 - not the right one but then when it's set
89:40 - up correctly we're just gonna go ahead
89:42 - and call this and say true because it's
89:45 - going to be the correct one and then
89:47 - we're just gonna end this function
89:49 - because we got the wallet and we got the
89:52 - chain so there's nothing to do anymore
89:54 - just end everything
89:56 - if that's not the case then basically
89:59 - we're gonna hold on let's see oh I'm
90:02 - sorry this should be false because
90:04 - you're not connected to the ring could
90:06 - be test now and then this one should be
90:09 - true okay that means yes we are
90:12 - connected correctly so there we go true
90:14 - okay once that's done let's get our
90:17 - accounts now okay so account is this if
90:21 - I open up my metamask yeah I guess I can
90:24 - open up my meta mask here as well Mount
90:26 - three right so that's an account out of
90:29 - many other accounts so you can see I
90:32 - have multiple other accounts right one
90:34 - two three whatever
90:36 - so we're going to say accounts and we're
90:38 - going to await and do an
90:41 - ethereum.request okay and we'll say
90:43 - method on this one is gonna be let me
90:47 - hide this you can see clearly method is
90:49 - going to be eth request accounts all
90:52 - right once you do that it'll request the
90:55 - accounts and it'll open up that modal
90:57 - where it like hovers over and my modal I
91:00 - mean this thing right when metamask
91:02 - actually pops open so that's what that
91:04 - will do and then we want to do is we
91:06 - want to say found accounts and show the
91:11 - zeroth account or whatever the account
91:13 - that the user pretty much selected okay
91:15 - and once the account is set then we need
91:18 - to actually keep track of the account as
91:20 - well so let's go ahead and add a few
91:22 - more
91:23 - State variables so here I'm going to
91:25 - have is user logged in or not because we
91:29 - need to know that so we're going to say
91:31 - set is user logged in initial state is
91:35 - going to be false obviously let's also
91:38 - go ahead and import you state because
91:41 - we're going to need access to that so
91:42 - let's just do you state hit enter and it
91:46 - imported it
91:47 - all right so this user logged in perfect
91:50 - and then the next one where I'm going to
91:52 - need access to is current account okay
91:56 - so we can actually say current account
91:59 - Set current count and make the current
92:03 - account empty and so we can say the user
92:08 - is logged in at this point so I can say
92:11 - this is true and at this point
92:14 - current account we have access to that
92:16 - as well so we can actually say Set
92:19 - current account and we can actually give
92:20 - it accounts of zero okay so both of
92:23 - those things are now done and at this
92:26 - point we're done with the connect wallet
92:28 - function okay now all we want to do is
92:31 - we want to connect the connect wallet
92:32 - function to our component connect wallet
92:35 - button so let's pass this function down
92:38 - because we're going to need access to it
92:40 - in this component so I'm going to say
92:41 - connect wallet give it connect wallet or
92:47 - function okay so we're giving it this
92:49 - function now let's go to connect wallet
92:51 - button and we can destructure that
92:53 - connect wallet and then we can add an on
92:57 - click method so you see I even have
93:00 - these nice little notes here for you so
93:02 - you can just go on click and just say
93:06 - connect wallet so basically just run
93:08 - that function and I click it now let's
93:12 - see if we've done it correctly because
93:14 - if we've done it correctly it should be
93:16 - working perfectly okay so let's go ahead
93:19 - and say the user is currently not logged
93:23 - in so let's remove that and let's see
93:25 - what happens so I'll hit Refresh on here
93:27 - okay let's go ahead and open our Ripple
93:31 - make sure you do yarn CD into clients
93:33 - and then do yarn Dev that should pop it
93:36 - open okay we should have a button coming
93:38 - up here anytime now all right we have
93:41 - this button right there let's go ahead
93:43 - and click that and boom look at that
93:46 - that popped open that is very nice let's
93:50 - make sure that we're looking at our
93:51 - console log as well okay connected to
93:54 - Cheon I misspelled it but whatever you
93:56 - get the point chain let's hit so this
93:59 - console log worked okay let's hit next
94:01 - let's hit connect and boom found a
94:05 - shrinkaby right that is awesome let's go
94:09 - back let's disconnect our account so we
94:12 - can go ahead click that fox go ahead and
94:15 - hit disconnect account you could change
94:18 - your chain as well so you could change
94:19 - from ring could be test Network so make
94:21 - sure you have Rin could be test Network
94:22 - right so if you don't have wrinkly test
94:25 - Network you're gonna go ahead and click
94:27 - you're gonna click here you're gonna
94:29 - click show and hide test networks and
94:32 - then you're gonna turn on test networks
94:34 - and once you do that these test networks
94:37 - should show up otherwise you can go
94:40 - inside of your settings go in advanced
94:42 - and you could scroll down and you could
94:45 - see where it says show test that works
94:47 - and you could turn it on that way as
94:48 - well okay now let's say you do raw spin
94:51 - or whatever you connect the wallet and
94:53 - it says hey you're not connected to the
94:56 - ring to be test right so that error
94:58 - comes up right away and catches it so it
95:00 - seems like we are ensuring that the user
95:04 - is indeed connecting with rinka B test
95:07 - Network and then it pops it up and then
95:09 - it allows you to connect we can hit
95:11 - connect and boom there we go and then it
95:13 - pulls the account that you connected
95:15 - with specifically so far it's working
95:18 - beautifully all right next up since
95:21 - we're done with our connect wallet
95:22 - function and it works perfectly next up
95:25 - we need to work on get all tasks so we
95:28 - should be able to get all of our tasks
95:30 - or rather let's actually first add the
95:33 - ability to add a task okay so let's look
95:36 - at this code right here note right here
95:37 - it says add tasks from Front End onto
95:40 - blockchain so we all we need to do is we
95:43 - need to just complete this function now
95:45 - Okay add task how is that task going to
95:49 - work first of all we're going to go
95:50 - ahead and prevent default because it's
95:53 - going to be a form we're going to fire
95:54 - off on and this will avoid a refresh
95:57 - okay so this is avoid refresh that's all
96:03 - all right and then and then what we want
96:06 - to do is we want to do we want to create
96:09 - a task okay and this task is going to be
96:12 - the text is going to be whatever the
96:14 - user inputs so this is going to be a
96:16 - state variable that we're going to keep
96:18 - track of and this will be false because
96:21 - whenever you create a task initially
96:22 - that it is deleted will be false so
96:26 - let's go back up let's keep track of
96:28 - input as well so we're going to say
96:30 - input set input and use State use State
96:35 - and it's going to be empty okay all
96:38 - right so there we go and then what we're
96:41 - going to do is we're going to try we're
96:43 - going to have a try catch block here
96:45 - okay and the catch is just going to be
96:47 - simple the catch is just going to catch
96:49 - the error and then it's going to just
96:52 - console log the error okay
96:55 - okay all right so now for our TA for our
96:58 - try block rather
96:59 - we need to pull some of this code is
97:02 - going to be repetitive some of it you've
97:03 - already written we're going to get
97:04 - access to ethereum and then what we're
97:07 - going to say if ethereum so if it exists
97:10 - and your log ethereum is there
97:13 - then what I want to do is I'm going to
97:15 - grab the provider so we're going to do
97:17 - ethers dot providers dot web3 provider
97:22 - and give it ethereum okay so in other
97:26 - words we're going to give it like it's
97:27 - really metamask even though it says
97:29 - ethereum here this is like actually meta
97:32 - mask okay so that's really what's
97:35 - happening here so this is really
97:36 - metamask and we're passing it the
97:38 - metamask provider okay hopefully that
97:40 - clarifies it for you and then what we're
97:43 - going to say is going to say hey grab
97:44 - the signer aka the person who just
97:47 - signed it and then we're gonna call the
97:50 - our task contract okay now we're ready
97:53 - and we're going to do newly there's
97:56 - contract and so we need to create this
97:59 - contract we're going to get our specific
98:01 - contract so for our specific contract
98:04 - it's going to need access to our
98:07 - contract address is going to need access
98:10 - to our ABI okay and then we're also
98:15 - going to need access to our signer so
98:20 - now this will allow us to get access to
98:23 - task contract and all of its methods
98:25 - like add task delete task get my tasks
98:30 - everything that we created in our smart
98:32 - contracts if I go to our Sol file or
98:36 - task contract file this will have access
98:38 - to all of these now okay so let's go
98:42 - back to our index all right now that we
98:44 - have access to all of this since this is
98:46 - the add task function which method do
98:50 - you think we'll need to call after we
98:52 - get access to all of this simple after
98:55 - this we need to actually call our task
98:58 - contract dot add task and we need to
99:02 - grab our task text give it that and we
99:06 - need to give it is deleted okay so here
99:09 - for example is our task this will be the
99:12 - input that the user gives and this by
99:14 - default will be false
99:16 - okay great task and we can then do you
99:21 - know since this is going to be a promise
99:22 - we can then just get the response you
99:25 - don't really need to do much with the
99:27 - response and now we'll just set task set
99:31 - tasks rather and so make sure we we want
99:34 - to create a a state variable that keeps
99:37 - track of these tasks as well so we're
99:39 - going to say tasks set tasks okay I'm
99:42 - going to say you state and in the start
99:46 - it's just going to be an empty array and
99:48 - so we're going to say set tasks and now
99:50 - we're really just going to say whatever
99:51 - tasks was previously plus that new task
99:55 - we just added so this is really just
99:57 - appending to our task array okay that's
100:00 - really what it's doing and then we can
100:02 - say console log completed task or
100:07 - added task okay perfect and then what we
100:11 - want to do is we want to add a whoops
100:14 - I'm going to add a DOT catch and we want
100:18 - to say it error and then just console
100:21 - log the error okay perfect so we have
100:25 - this if and then to this if we want to
100:28 - write an else and we just want to say
100:30 - console log ethereum object does not
100:35 - exist okay so just in case we like don't
100:37 - get that ethereum object cool so now we
100:42 - can actually add a task and all we need
100:45 - to do is we need to connect it to our
100:47 - front end all right so what does that
100:50 - mean what that means is let's go ahead
100:53 - and let's put it in a state of that the
100:56 - user is logged in so I'm going to go
100:59 - ahead and hard code that oh sorry
101:02 - actually we don't even need that anymore
101:03 - we could actually put the actual Dynamic
101:05 - State and we can just say is user or
101:07 - logged in and if the user is not logged
101:12 - in then they'll show up this button and
101:14 - then if the user is logged in then it'll
101:16 - take us to the next thing okay so let's
101:18 - go ahead hit connect wallet
101:20 - let's go ahead and drive without this
101:23 - let's refresh okay great and let's see
101:27 - are we actually connected or are we not
101:29 - connected okay cool we are connected
101:31 - let's change this let's use your logged
101:33 - in save it let's go back boom now let's
101:37 - see what happens once we connect so I'll
101:39 - go ahead hit connect wallet let's choose
101:42 - connect and boom it brings me in okay so
101:45 - this is the final version and we can
101:47 - leave it like this okay so this is
101:48 - already working dynamically if I
101:51 - disconnect it should take me back to the
101:54 - home page so let's go here let's try
101:56 - disconnecting okay let's refresh boom it
101:59 - brought me back to the home page now
102:01 - let's try it one more time try
102:03 - connecting and it brought me back to the
102:06 - to-do list app page okay so our is user
102:09 - logged in like that one is working
102:11 - correctly now for this add task this
102:15 - function needs to fire off when we add a
102:18 - task but when I do this and I hit Plus
102:21 - but the thing is that this plus sign
102:23 - doesn't have a on click functionality so
102:26 - we need to keep track of whatever the
102:29 - user is typing in here plus we need to
102:32 - actually when the user clicks this we
102:34 - need to add an on click functionality
102:36 - and we need our add task function to
102:38 - actually fire off when the user actually
102:40 - clicks that and right before we do that
102:43 - let's just go ahead and make this
102:46 - dynamic as well so I'm going to say
102:47 - correct Network question mark That's it
102:50 - okay so this part is now fully Dynamic
102:53 - and it's working okay so now going back
102:56 - to our add task right our to-do list
102:59 - let's go into our to-do list component
103:01 - our to-do list component has a form and
103:05 - then it has this plus button so we have
103:08 - these little notes Here Right that says
103:10 - hey take the input from here because
103:12 - this is the actual input and the form
103:15 - part and then it says hey add an on
103:18 - click right here to that Circle
103:20 - okay so that's that Circle right there
103:23 - so we're going to add both of them so
103:27 - the first thing we need to do is we
103:28 - actually need to update the input from
103:31 - the user okay so we're gonna go back to
103:34 - our index and we need to actually pass
103:38 - the set input hook
103:40 - set input that way we can actually
103:43 - update the input based on whatever the
103:45 - user finds right the set input so that's
103:47 - one thing we also need to give it the
103:50 - add task function so let's go ahead and
103:52 - go add task
103:54 - okay so now we've given it both let's go
103:57 - back into to-do list and let's
103:59 - destructure set input
104:01 - endless destructure add task now let's
104:06 - go down and one more actually thing we
104:09 - need to give it to is input because
104:11 - to-do list is going to need access to
104:13 - whatever the input is at any given time
104:15 - so let's go ahead and send it input as
104:19 - well okay let's go back to our to-do
104:22 - list all right now right here I'm going
104:24 - to say value is input and then we need
104:29 - to on change so we're going to say on
104:31 - change okay set input to be the target
104:36 - value okay so whatever we're typing in
104:39 - so this is like a pretty common react
104:40 - thing if you're fuzzy on this like you
104:43 - could watch my other React videos and
104:45 - next videos I go more into detail on
104:48 - this type of stuff and boom so that
104:50 - should take care of whatever I'm typing
104:52 - in okay and then the plus button we need
104:56 - to add the add task function to it so we
104:59 - need to go on click add tab ask okay so
105:04 - that's about it okay that's about it so
105:08 - let's go ahead and let's go write the
105:12 - word eat a cookie let's hit the plus
105:15 - button and let's see if anything happens
105:17 - boom look at that it popped open and
105:21 - it's asking for a confirmation and it's
105:23 - gonna charge me something I'm gonna hit
105:24 - confirm and you can see in the console
105:27 - log it says added a task that is so cool
105:30 - so we were able to actually add a task
105:33 - either cookie eat a brownie okay that's
105:36 - a second task let's click plus sign and
105:38 - it's working let's go here and let's hit
105:41 - confirm boom you can see that it says
105:44 - added task was ran twice so we ate a
105:48 - cookie eat a brownie eating lots of food
105:51 - here now you might be wondering hey how
105:53 - come all tasks are not showing up that's
105:55 - because we didn't actually finish
105:56 - writing that method so once we finish
105:59 - writing that method it will actually
106:01 - work okay
106:03 - and now if you're wondering hey why does
106:05 - it log us back out we need to actually
106:07 - just write a use effect hook
106:09 - okay so we're going to go ahead and say
106:11 - use effect let's import it and what we
106:15 - need to say in our use effect Hook is
106:18 - simple we just need to run our connect
106:21 - wallet right when our app runs so now if
106:25 - I refresh logged in automatically okay
106:28 - very nice all right great so far
106:33 - app is looking very good it's doing what
106:35 - we needed to do but now what we need to
106:37 - do is we need to be able to retrieve all
106:40 - of those tasks and then show them onto
106:42 - the screen all right now let's go ahead
106:44 - and get all of our tasks okay so this is
106:48 - like really one of the key methods that
106:51 - we're gonna create because it's going to
106:54 - get obviously all of our tasks so some
106:56 - of the code is going to be repetitive
106:58 - and for that we can just copy this so
107:01 - let's actually first write our try block
107:04 - and our get tasks so let's go here I'm
107:07 - going to say try and then catch and
107:09 - whatever error we get we're just gonna
107:12 - console log that error okay and now in
107:16 - this try catch block some of the code is
107:18 - going to be simple for getting up to the
107:20 - task contract so I'm going to copy this
107:23 - and paste it
107:25 - so this gets us the task contract
107:28 - address
107:29 - why is it complaining there we go okay
107:32 - cool and now we need to actually get all
107:34 - of the tasks so we need to go ahead and
107:37 - say let all tasks and I'm going to say
107:41 - await task contract dot get my tasks and
107:46 - then we can just say set tasks to all
107:49 - tasks just like that all right else
107:52 - ethereum object does not exist okay boom
107:57 - there we go so that right there
108:01 - should actually just get all of our
108:03 - tasks for getting all of our tasks we're
108:04 - setting all of our tasks so now all we
108:07 - actually need to do is in our to-do list
108:09 - well our to-do list need ask act needs
108:13 - access to our tasks and then we need to
108:16 - destructure it here tasks and I have
108:20 - these notes here that says hey just Loop
108:23 - through all the tasks using the task
108:25 - component so we're going to go ahead and
108:27 - just do that now so in our to-do list
108:30 - let's go right there and I'm going to
108:32 - say
108:33 - tasks.map and for each item I want you
108:37 - to do the following okay you're going to
108:40 - call the task component all right it's
108:44 - going to be self-closing and then the
108:46 - properties we're going to give it is for
108:48 - key is going to be just item.id
108:51 - task text is going to be item.task text
108:55 - and on click we're going to give it on
108:58 - click but for now let's leave it okay so
109:00 - on click delete task that's what we're
109:03 - going to do so I'm just going to leave
109:04 - that commented out cool now it's okay
109:06 - task could not find this component so we
109:09 - need to actually just import this
109:11 - component and then we should be good
109:14 - so we have created this task component
109:17 - right over here okay so we just need to
109:20 - import that so import task from task all
109:24 - right and that should get access to it
109:27 - and then we just render out the task
109:29 - component and now let's take a look so
109:31 - let's go back to our app let's hit
109:33 - refresh and let's see if it gets if it's
109:36 - able to pull any of the tasks that we've
109:39 - created thus far ah I discovered it okay
109:42 - so we have to actually call get my tasks
109:45 - because they're never called it so how
109:47 - will it know so we need to get all tasks
109:50 - like pretty much right when our app
109:52 - loads and then it's going to get all the
109:53 - tasks and then it's going to do the
109:54 - thing okay there we go that was the
109:57 - problem that was happening because you
109:58 - can even see it says hey get all tasks
110:00 - is declared but it's actually never ever
110:02 - used so let's bring that bad boy back
110:04 - let's go here let's refresh and let's
110:08 - see fingers crossed hopefully our tasks
110:10 - should show up all right so we're making
110:13 - some progress
110:14 - so it's not writing out what those tasks
110:17 - are okay so something is happening with
110:19 - a task text let's just take a look task
110:23 - text is the input of the user yep also
110:29 - at the end what we need to do of this
110:31 - add task that we actually forgot to do
110:34 - at the end was we need to make sure that
110:36 - once you hit submit you just reset it to
110:39 - empty like this okay once you're done
110:42 - writing the task just set it to empty
110:44 - okay let's try eat a cookie let's try
110:47 - now and let's hit this okay let's hit
110:51 - confirm and let's see if we have better
110:54 - luck this time we do not have better
110:56 - luck this time all right let's to debug
110:58 - this problem let's just add a console
110:59 - log here and say hey just console log
111:02 - all tasks and now when you go back
111:04 - actually and if you refresh watch what's
111:06 - gonna happen keep an eye on the console
111:08 - log and look at that okay so I'm going
111:12 - to make it a little bit bigger so you
111:15 - can see that's what he said and here you
111:18 - can see that I have all my tasks showing
111:21 - up okay eat a cookie eat a brownie eat
111:24 - more eat a cookie so lots of cookie
111:26 - eating tasks right there and then we
111:29 - have task text that you could see there
111:32 - so our tasks are working correctly
111:36 - they're just not showing up the way that
111:40 - we want them to so we'll fix that now so
111:43 - basically what this tells me is that
111:45 - it's just not being rendered out on the
111:47 - front end so for example if we follow
111:49 - the logic down we're passing tasks to-do
111:52 - list so let's go inside of to-do list I
111:54 - command click it we're destructuring
111:56 - tasks and then We're looping through
111:59 - tasks so the culprit might be this task
112:01 - component let's command click into this
112:04 - and if we look here this is the
112:07 - component that should actually be
112:09 - showing the task because this here is
112:12 - the task component right there this
112:15 - specifically so why is it not showing
112:16 - the task I don't see task text anywhere
112:19 - even though we're passing a tasks test
112:21 - it's not really doing anything with it
112:24 - so we need to actually destructure and
112:27 - go task text and then we need to
112:30 - actually show that task text right here
112:32 - task text
112:34 - so once we do that let's go back and
112:37 - look at that here we go let's say drive
112:41 - a Ferrari that's a task let's add it in
112:45 - so so good thing was it was a front-end
112:47 - problem was in a back end problem our
112:49 - back end was working perfectly and boom
112:51 - drive a Ferrari now we need the last
112:54 - thing we need is to make these delete
112:55 - buttons work so let's go ahead and add
112:59 - the delete functionality okay now let's
113:01 - add the delete task functionality so for
113:04 - delete task functionality it's not this
113:07 - one is not going to be super complicated
113:09 - this one is actually going to be fairly
113:11 - like straightforward what we need to do
113:13 - is there's going to be some bits of
113:16 - repetitive code like for example our try
113:18 - catch blocks rather try and then we're
113:21 - going to say catch error and then just
113:23 - say console log error okay and then we
113:26 - actually need to get access to our task
113:29 - contract address so we're just going to
113:30 - repeat this piece of code right here all
113:34 - right so this just runs and the whole
113:36 - point of this is to get us access to our
113:38 - task contract address let's close out
113:41 - this if statement right here and else
113:45 - will just be console log ethereum does
113:49 - not exist or whatever okay and now
113:52 - within this if statement is where all
113:54 - the magic is going to happen and we're
113:57 - gonna go ahead and delete the task so we
114:00 - can just say oh wait task contract dot
114:03 - delete task and when you delete a task
114:06 - we're going to give it a key okay that
114:08 - key is actually going to be passed in
114:11 - already okay that key is basically going
114:13 - to be like this so for example if you
114:15 - delete this task right over here this
114:17 - task already probably has the key of
114:19 - five because we gave it that key if I go
114:22 - to our to-do list we gave it that key
114:25 - right over here the item.id and the ID
114:28 - is incrementally Loops from zero one two
114:30 - three four five six so on and so let's
114:32 - go back into our index so that key is
114:36 - already there so we're going to give it
114:37 - that key so it's like giving it hit
114:39 - delete the eat the cookie task AKA
114:42 - delete the task with the ID of zero and
114:45 - set its deleted value to True okay so
114:48 - now it's deleted value is set to true so
114:50 - we're going to do this okay and then
114:53 - what we want to do is we're just to say
114:54 - let
114:55 - all tasks okay and you could store this
114:58 - so you could say const cons delete task
115:02 - transaction and you could console log
115:05 - and say
115:06 - successfully deleted and then pass in
115:10 - that transaction and let's put a little
115:12 - Tada Emoji in there and then we're just
115:16 - gonna go ahead and await
115:19 - task contract and get all of our tasks
115:21 - again get my tasks okay and then set all
115:25 - of these tasks so now we're gonna set
115:27 - all of the new tasks because now it's
115:30 - going to send it to our back end so
115:32 - we're just labeling a task as quote
115:34 - unquote so we label a task as hey this
115:38 - is marked as deleted then we send it to
115:41 - our back end filters it once it filters
115:44 - it okay so once we're done it filters it
115:47 - we on our front end retrieve all of the
115:50 - tasks again from our back end or
115:52 - blockchain part and then we just set
115:54 - those as the new tasks and then we're
115:57 - done okay so this is the delete task
116:00 - functionality and delete task
116:02 - functionality is now completed now who
116:05 - needs access to delete tasks or to-do
116:08 - list is going to need access to delete
116:11 - task and the reason for that is our
116:15 - component task is going to need access
116:17 - to it okay so it's like a little bit of
116:18 - prop girl filling but not too crazy so
116:23 - let's go ahead and do delete task
116:26 - okay and then let's go to our task
116:28 - components and we're gonna go ahead and
116:31 - say on click right on click we are going
116:36 - to delete task and give it the item dot
116:40 - ID that's it okay and that should really
116:43 - delete it so let's go ahead and drive a
116:46 - Ferrari let's go ahead and delete this
116:48 - task okay let's go ahead and refresh
116:51 - save a few times and delete okay nothing
116:54 - is happening right now so what's the
116:56 - problem delete task okay we're
116:59 - destructuring delete task let's go into
117:02 - index we're passing delete task is being
117:05 - passed so all of that is good actually I
117:09 - don't think we need to add this here we
117:11 - need to actually give
117:13 - this on click all right so we're going
117:16 - to need to give this on click to delete
117:18 - task so we're going to go ahead and say
117:20 - we're gonna pass this function delete
117:22 - task and we're going to pass that down
117:25 - so I don't think we need to actually add
117:26 - that here
117:28 - so let's go to our delete our task
117:31 - component now okay let's go to our task
117:33 - component inside of our task component
117:35 - let's go ahead and delete task let's
117:37 - destructure delete task okay and then
117:40 - here we're going to add an on clicks on
117:42 - the garbage can as well on click takes
117:44 - place and we're going to go ahead and
117:46 - say delete task
117:48 - okay on click that's what should happen
117:49 - now let's give it a try I think this is
117:52 - to me is looking right now let's go
117:54 - ahead and click drive a Ferrari try to
117:56 - delete it so refresh we get an error it
117:59 - should show us what error is to oh yeah
118:02 - we need to give it the specific Item ID
118:05 - so let's go ahead and do actually what
118:08 - we could do is we could do it this the
118:10 - other way let's go back to our to-do
118:15 - list and here we're actually going to
118:17 - give it an on click and the on click
118:20 - here is going to be delete task and that
118:24 - specific item.id and it was going to
118:27 - task let's go ahead and destructure on
118:31 - click and then we're going to give it
118:33 - the on click okay so that way we have
118:36 - access to Item ID and we don't have to
118:37 - like destructure and pass down the item
118:40 - id Okay cool so let's go and try it now
118:44 - remove drive a Ferrari and there we go
118:48 - now it's popping up beautiful let's go
118:51 - ahead and hit confirm on that so that
118:53 - transaction it says successfully deleted
118:56 - okay now if I go ahead and refresh my
118:59 - app
119:00 - okay let's see sometimes it takes a
119:03 - second so let's give it some time and
119:06 - there you go okay so yeah while it says
119:08 - successfully deleted and you get the
119:10 - transaction ID on the blockchain it
119:12 - still needs to verify it that takes some
119:15 - time so once it's fully verified it can
119:18 - not then it deletes it so now when I
119:20 - refresh and I go here you see the
119:23 - Ferrari one is actually gone so now if I
119:25 - create a new task let's go ahead and hit
119:28 - the plus sign so when I hit confirm this
119:31 - will add the task okay boom we're we got
119:34 - a new task and now I can actually hit
119:37 - let's go ahead and refresh and of course
119:40 - when you task go okay now it's actually
119:43 - there so even creating tasks takes a
119:46 - second okay so that's why you have to
119:47 - wait a little bit and now I can actually
119:49 - remove it okay so successfully removed I
119:52 - have the hash the removal but it's going
119:55 - to still verifying on the back end right
119:58 - the blockchain side so see now the new
120:01 - task has been deleted and it is not
120:03 - there Guy this is amazing if you've gone
120:08 - to so far huge props to you all right so
120:11 - I really hope you guys enjoyed building
120:13 - that to-do list app and you got to learn
120:15 - a ton of solidity con Concepts how smart
120:19 - contracts work how you actually
120:21 - interface your front end with the
120:22 - blockchain component it's mind-blowing
120:25 - stuff and we had authentication in there
120:28 - so if I actually log out and I log in as
120:30 - a different user you won't see these
120:33 - tasks there and you won't be able to
120:35 - delete these tasks and you won't be able
120:37 - to interface with them so we have all of
120:39 - that and then some and it was so quick
120:41 - and so nice and we didn't even use a
120:44 - database which is mind-blowing and cool
120:46 - I hope you enjoyed it huge credit and
120:49 - shout out to code with kavit you should
120:51 - check out also his video huge shout out
120:54 - to him so for a lot of the ideas in this
120:56 - video and some of the code for the code
120:58 - for the smart contract and a lot of
121:01 - inspiration okay so that was really
121:03 - awesome and so thank you code with
121:05 - Kavita the huge shout out to you and
121:07 - again guys as always I love your
121:09 - beautiful face thank you so much for
121:11 - watching and I'll see you in the next
121:14 - video Welcome to another web three slash
121:18 - blockchain project that we're going to
121:20 - be building using infuria this project
121:23 - is going to be a lottery dab now there
121:26 - are gaming companies out there like
121:27 - crypto games using something similar the
121:30 - point of this is you have multiple users
121:33 - enter each of who pays in ethereum a
121:36 - certain amount in the pot and at the end
121:38 - you pick a winner and you randomly
121:41 - select a winner and that Winner Takes
121:42 - the entire pot but we're just gonna have
121:44 - fun with it and learn web 3 by building
121:47 - this lottery app now let's go ahead and
121:50 - kind of demo what the app looks like so
121:52 - here's the app I'm going to I currently
121:54 - have no players inside here right you
121:56 - can see that I have zero players at the
121:58 - bottom so I'm going to go ahead and with
122:01 - one of my accounts I'm going to enter
122:03 - this
122:04 - okay and then we're gonna add in uh one
122:07 - person okay and so I'm going to log in
122:10 - here cool and now we have one person and
122:14 - I'm gonna enter with that account cool
122:16 - so let's go ahead and do that I'm gonna
122:18 - enter boom I'm in and now let's go ahead
122:22 - we're gonna speed up through this
122:23 - process so we can go faster I'll just
122:25 - pay higher gas fee now I have entered as
122:28 - a user and you can see at the bottom
122:30 - that I'm inside now I'm going to enter
122:33 - with the second account so let's go
122:35 - ahead repeat the same exact process and
122:37 - we'll enter it all right now we're gonna
122:39 - enter a second user so I'm gonna go
122:41 - ahead to my metamask I'm gonna speed up
122:43 - and do the same thing and Boom at the
122:45 - bottom you can see that the second user
122:47 - has been added to this Lottery and each
122:50 - of them added
122:52 - 0.15.015 each to the lottery and at the
122:56 - end of this what you'll notice is we
122:58 - have a winner and that winner which is
123:00 - this account right over here he won all
123:04 - of that is okay so that's how this will
123:08 - work next up what we need to do is we
123:10 - need to sign up for inferior and the
123:13 - reason why we need to do that is so we
123:14 - can actually build this app it's going
123:16 - to be completely free and it's going to
123:18 - allow you to build your web3 app and
123:20 - scale it as much as you want so I want
123:23 - you to go to the URL in the description
123:26 - below okay we've given it to you you'll
123:28 - get to this landing page of inferior and
123:31 - then just hit sign up at the top once
123:33 - you do that just make sure you create an
123:36 - account under get started for free pop
123:38 - in your email and your password and once
123:40 - you're done doing that it's going to ask
123:42 - you to verify it then just simply go
123:44 - ahead verify your account and then it'll
123:46 - take you to this next page okay Pick
123:47 - Your Role Etc which organization you can
123:50 - pretty much pick whatever you want hit
123:52 - submit for the network we're going to
123:54 - choose the web3 API formerly ethereum
123:57 - and for name we're going to say
123:58 - production and then just hit submit okay
124:01 - once you're done with that it's going to
124:02 - bring you to this page at this point
124:04 - this is where you are you can take a
124:07 - look around but your job here is done
124:09 - you don't really need to do anything
124:10 - else with that said we're going to
124:13 - continue and next up work on installing
124:15 - metamask now we're going to go ahead and
124:17 - install metamask if you already know how
124:19 - to install and use it just skip this
124:21 - part timestamps for below I'm going to
124:23 - keep going so go to metamask on Google
124:25 - find it as a Chrome extension hit add to
124:29 - Chrome and what you want to do after you
124:31 - add it to Chrome is just hit agree with
124:34 - everything so it takes you to the next
124:36 - part and this is the important thing
124:38 - that I need you to do once you are on
124:40 - this page where it says new to metamask
124:42 - do not pick no I already have a secret
124:44 - recovery phrase choose yes let's get set
124:48 - up create a wallet there and then pop in
124:50 - your password and the important thing
124:52 - we're going to really need is this
124:53 - mnemonic phrase that it gives you AKA or
124:56 - secret recovery phrase this is the
124:59 - important part because in this app in
125:02 - this app that you're going to be
125:03 - building your going to need access to
125:05 - this so make sure if you already have an
125:07 - existing account make sure you have the
125:09 - secret recovery phrase if you don't have
125:10 - a secret recovery phrase or you forgot
125:12 - it just make a new account right now
125:14 - okay and then follow along that way it's
125:16 - going to ask you to confirm your secret
125:19 - security phrase and then it's going to
125:20 - ask you to safely store it somewhere
125:22 - then in your account you're going to
125:24 - notice that you don't have any other
125:26 - accounts like any other networks you
125:28 - only have the ethereum mainnet so what
125:30 - you want to do in that case is you want
125:33 - to go to you want to click where it says
125:35 - show slash High test networks and go to
125:38 - your advanced settings and in there you
125:41 - want to say show test Network so make
125:43 - sure that's turned on and make sure the
125:46 - show conversion on test networks is also
125:48 - turned on and now when you hit X and you
125:50 - hit your networks you can see that all
125:53 - these other test networks are there like
125:55 - Robson and Gorly Etc all right so type
125:58 - in robsten faucet because what we want
126:00 - to do is we want to get some free
126:02 - robsten which is essentially ether okay
126:05 - and that's how you're going to be able
126:07 - to play with this app and do stuff with
126:09 - this app so go to disrupts and test that
126:11 - faucet go ahead to your metamask and you
126:15 - can pin it just like I did here right
126:17 - click and copy the account address and
126:19 - paste this account address and say give
126:21 - me robsten eth it's going to give you
126:24 - the Robson eth you could see that we got
126:26 - 10 Robson 8th right here now I do want
126:28 - to highlight something here you will see
126:31 - Robson will shut down in Q4 okay so it's
126:34 - going to be shutting down soon but what
126:37 - we're showing you here is just as easy
126:38 - to do with the gwarly test Network as
126:42 - you can do with robsten so you could
126:44 - follow along and you could just do it
126:45 - with quarterly okay
126:47 - so yeah so if you're watching this after
126:50 - 2022 just do that you should be fine
126:53 - with that said we're going to keep going
126:55 - and now we get to the coding part now
126:57 - open up your command line and we're just
126:59 - gonna go ahead and get your entire
127:01 - project set up some key notes that I
127:04 - want to show you is I want you to go
127:05 - ahead and do into your GitHub folder or
127:09 - wherever you store all of your stuff and
127:12 - then I want you to use npx clever
127:14 - programmer now before I continue the
127:17 - benefit of doing this way is we are
127:19 - giving you all of the assets for you
127:23 - know just giving it away for you okay so
127:25 - you're gonna have access to all of the
127:27 - assets you will have access to the
127:30 - styling of this app you will have access
127:33 - to the components inside of this app and
127:36 - you know majority of front end you'll
127:40 - get access to okay which you won't get
127:42 - access to are things like blockchain and
127:44 - smart contract because in this project I
127:47 - don't want to focus so much on the front
127:49 - end part otherwise this tutorial would
127:50 - be 9 hours 10 hours long we want to
127:52 - focus more on the interesting aspects of
127:54 - this project which are it's the smart
127:56 - contract the blockchain parts so that's
127:58 - what we're going to be focusing on more
128:00 - and we're giving away a lot of this and
128:02 - if you do npx clever programmer you'll
128:04 - automatically get access to all of these
128:07 - things for this project for this Lottery
128:09 - dap okay so we're making your life a lot
128:12 - easier to do npx clever programmer
128:14 - latest
128:16 - and then it will install it globally and
128:19 - then just go ahead pop in your email and
128:22 - what you want to do
128:24 - after you put in your email is It'll ask
128:27 - you for your name and then simply go
128:29 - ahead and choose the project so here I
128:31 - want you to go ahead and choose the
128:33 - lottery app
128:34 - go to that okay select it and then
128:37 - you're just going to hit enter now it's
128:39 - going to initialize your project it's
128:41 - going to give you the front end right
128:43 - it's going to install all of the
128:44 - dependencies
128:46 - and it's also going to tell you to smash
128:48 - that like button while you wait so go
128:50 - ahead do that right now while it's
128:51 - loading it also automatically there's a
128:54 - fancy thing that we've added to it it
128:56 - automatically opens up your Visual
128:57 - Studio code if it gives you an error
128:59 - there or doesn't work for you somehow
129:01 - just go there and open up this folder
129:04 - inside of your Visual Studio code and
129:06 - there you go there's your project your
129:08 - lottery app
129:10 - there you go okay this is your starter
129:12 - now all I want you to do is go ahead and
129:14 - do yarn Dev
129:16 - and it should open it up
129:18 - on your right hand side or just open it
129:21 - up in Chrome on your Local Host 3000
129:24 - okay and uh just get to the part where
129:26 - your app is up and running okay so there
129:30 - you go that is the starter okay if it
129:33 - doesn't error out it's telling you that
129:35 - hey this is working all the styling is
129:37 - here and everything is here and this
129:40 - blank page here with this color that's a
129:43 - good sign that means your starter is
129:46 - completely working so good job and with
129:48 - that said we're gonna go ahead and
129:51 - continue building all right now what I
129:53 - want to show you is that at any given
129:55 - time I don't want you to get stuck all
129:58 - right I do not want you to get stuck so
130:00 - what we have done for you is this thing
130:03 - that you got from npx clever programmer
130:05 - if you're a more advanced user you are
130:08 - sitting on a branch right now called CLI
130:10 - starter and there's a branch of this
130:13 - project that's called I believe main
130:15 - right the main one the main branch
130:17 - actually has the solution so at any
130:21 - given point you could switch to that
130:22 - branch and get the solution okay this is
130:25 - the branch you're currently on by
130:26 - default because all you did from the CLI
130:28 - tool was clone this repo on your
130:31 - computer okay so let's just walk through
130:33 - it and you could also go to this
130:35 - repository from the link in the
130:36 - description below so it has a solution
130:38 - on there so you could do it that way too
130:40 - just click uh use one of the links in
130:42 - the description below and you could see
130:43 - that we have all of the code right there
130:46 - right I could click into context and I
130:48 - can click context.js and it will give
130:50 - you the entire solution for this project
130:53 - okay so there you go
130:55 - uh this is just a thing that's made
130:57 - available to you to get answers to get
131:00 - unstuck at any given point just wanted
131:02 - to highlight that with that said now
131:05 - we're going to start building these
131:06 - smart contract
131:09 - um and this is going to be a really fun
131:10 - process because we're going to do it
131:12 - step by step so let's go all right now
131:13 - what we're going to do guys is we're
131:15 - gonna go ahead to
131:17 - remix IDE
131:19 - [Music]
131:21 - all right so we're gonna go to remix IDE
131:23 - which is a phenomenal online ID if and
131:27 - it's completely free for writing smart
131:30 - contracts and iterating and getting live
131:32 - instant feedback for everything that
131:34 - you're doing so go ahead
131:36 - there okay and start coding online click
131:39 - that
131:40 - and it'll bring you to their page just
131:43 - hit accept cool hit next blah blah blah
131:46 - and then you should be good to go
131:49 - okay uh here you're going to choose a
131:52 - workspace name
131:54 - all right you could call it Lottery
131:56 - we'll call it Lottery dap and then on
131:59 - the left hand side you will see that it
132:01 - populated it with some dummy contracts
132:05 - and stuff like that just to kind of get
132:06 - you started okay so close the scripts
132:09 - tab close the test tab go into contracts
132:13 - and inside of contracts we're going to
132:15 - make a contract
132:18 - and it's going to be called
132:19 - lottery.sol okay so lottery.solidity
132:22 - contract
132:23 - great
132:25 - now that we're doing this let's go ahead
132:28 - on the left hand side and I'm going to
132:30 - click on that third Tab and we're going
132:33 - to choose Auto compile and for the
132:36 - version we're going to choose
132:38 - 0.8.15 plus that's the version
132:42 - let's go back to our
132:44 - lottery.soul
132:48 - and here first of all the first thing we
132:50 - do always is pick the license so we're
132:52 - just going to choose the MIT license for
132:54 - this one
132:55 - we're gonna pick our solidity version at
132:58 - 0.8.15
133:02 - we're going to create a contract called
133:04 - Lottery
133:09 - and in this contract okay the first
133:11 - things that we're going to create are
133:13 - State and some storage variables that
133:15 - are going to be necessary for us so
133:17 - let's create a owner we're going to need
133:19 - to keep track of our owner
133:21 - let's create also a
133:25 - player's array
133:27 - okay
133:28 - that's where all of our players are
133:31 - going to go inside of
133:33 - let's also go ahead and create a
133:35 - Winner's array
133:38 - and then we're going to go ahead and
133:41 - create a lottery ID which we will keep
133:45 - track of okay and now I'm going to go
133:49 - ahead and explain
133:51 - something special for you okay so for
133:53 - example I told you that these are the
133:55 - variables variable names here right but
133:58 - I didn't explain to you
134:01 - what address public address payable
134:03 - public is so let's go ahead and do that
134:05 - now address is a special data type in
134:08 - solidity which refers to you know
134:10 - anytime you see a wallet address that's
134:12 - like that that's there's a specific data
134:14 - type for that that's not just a string
134:16 - okay in JavaScript you'll store that as
134:18 - a string but in solidity you store that
134:19 - as an actual data type
134:22 - public here means everybody will have
134:24 - access to these variables meaning that
134:27 - even outside of the smart contract you
134:29 - could access them okay so that's why
134:31 - it's Public Public public
134:34 - so you could make it private as well
134:36 - which would mean that we can't access it
134:38 - from outside but in this case we don't
134:40 - need to do that okay so that's the word
134:41 - public and so hopefully that handles
134:44 - that situation now
134:46 - what is this uh thing called payable
134:49 - payable means that these contract
134:52 - addresses are put in a way where we can
134:55 - pay them or we can send money to them
134:57 - all right now payable means these are
135:01 - the guys that are up you know
135:04 - where we can actually send them money
135:06 - okay so that's why this address type is
135:08 - a payable type because any of these
135:11 - players we want to be able able to send
135:13 - them money based on if they won the
135:15 - lottery or not okay that's what's
135:16 - happening there
135:17 - this empty open close uh array that you
135:21 - see over here that basically says
135:25 - that this data type is going to be an
135:27 - array of addresses meaning that they're
135:31 - going to be multiple addresses in here
135:33 - so players variable isn't just going to
135:36 - be like one random zero x dot dot dot
135:39 - address
135:40 - it means it's going to be an array of
135:42 - addresses it's going to look more like
135:44 - this comma 0x dot dot dot comma 0x times
135:48 - dot zero Etc I think you get the idea
135:50 - right with multiple addresses there
135:53 - okay so that's what's happening inside
135:56 - of this array it's going to be an array
135:59 - of addresses
136:00 - then we have array of winners the reason
136:03 - why we're not making this public or
136:05 - sorry uh not making this payable is
136:08 - because they've already won so we don't
136:12 - want to be able to pay them
136:13 - programmatically or at all because
136:15 - they've already gotten the money
136:19 - and then we have Lottery ID which is an
136:22 - integer
136:24 - because it's going to be zero when you
136:27 - know it's the first Lottery then it's
136:29 - going to be one on the second Lottery
136:31 - two on the third Lottery Etc and we'll
136:34 - show you how to do that as well
136:37 - all right let's keep going with this
136:39 - so once I'm done with that
136:44 - we're going to create a Constructor
136:47 - and this Constructor this runs when the
136:50 - contract is deployed
136:53 - okay so let's create a Constructor here
136:57 - we're going to go ahead and say
137:01 - owner is the message sender AKA whoever
137:04 - Crea uh you know created the contract
137:08 - whoever was like logged into their
137:10 - metamask
137:12 - and was the person that created the
137:13 - contract
137:15 - um at the time that the contract was
137:16 - created okay
137:20 - that's gonna be set as the owner so what
137:23 - construction Constructor means that this
137:26 - piece of code is going to run right
137:30 - when this contract is deployed so the
137:33 - very first time this contractor is
137:34 - deployed a contract is deployed it'll
137:36 - run and then this part will never really
137:38 - run ever again it'll only run once when
137:41 - the contract is deployed if you have
137:43 - experience with the react think of it
137:45 - kind of like your kind of like your use
137:50 - um you know your use effect hook where
137:52 - it fires off
137:54 - once the page loads and then if you
137:56 - don't have any dependencies it doesn't
137:57 - fire off again right kind of like that
138:00 - except it just runs once forever even if
138:03 - you refresh the page
138:05 - and we're going to set the lottery ID to
138:08 - zero because that's what we want to
138:10 - initialize it to be
138:12 - next up we're going to create the enter
138:15 - function so this will be the function
138:16 - that allows a user to really enter the
138:21 - lottery
138:23 - so let's go ahead say function enter
138:26 - and I'm going to set the public function
138:30 - okay
138:32 - and I'll explain why we're saying
138:34 - payable afterwards
138:36 - this function we want to make sure that
138:39 - we require the message value is you need
138:43 - to put in basically what we're seeing
138:44 - here is hey you need to put in more than
138:47 - zero point
138:49 - uh one eth okay so if you're gonna if
138:54 - you're gonna put some money in the pool
138:55 - make sure it's more than 0.1 ether
139:00 - because you can't just put like baby
139:02 - money in that right where we're here to
139:04 - play the big boys are here the big boys
139:05 - and the big girls are here
139:08 - I don't want to get canceled like Andrew
139:09 - Tate
139:12 - um so here then once we do that we want
139:15 - to do players dot push
139:18 - and we want to push the address of
139:21 - whoever was like the logged in user in
139:22 - metamask whenever you see message.sender
139:24 - think the current logged in user with
139:26 - metamask okay that's the easy way I
139:28 - think about it and so I'm pushing
139:31 - whoever was currently logged in and
139:33 - entered the lottery
139:34 - boom add them to the players array
139:37 - that's what we're doing all right so now
139:39 - what's special about this function and
139:42 - why we're calling payable right here is
139:44 - because
139:46 - this function
139:47 - by doing payable here means you can
139:50 - actually kind of quote unquote pay this
139:52 - function okay when you call this
139:55 - function you could enter and you could
139:58 - literally pass it like to eth so think
140:00 - of it like that you're almost calling
140:02 - the function you can pass it a certain
140:04 - amount of eth and that ether you pass
140:07 - this function it will actually store
140:10 - that
140:12 - inside of the contract address okay so
140:16 - the contract address so think of the
140:19 - contract address like just another
140:20 - wallet just like kind of how you have a
140:22 - wallet contract address kind of has a
140:24 - built-in wallet and so the money is
140:26 - going into the contract pool okay so
140:29 - that's how the money is going uh into
140:32 - the pool
140:34 - and then we just make sure that the
140:37 - message value
140:40 - right is greater than 0.1 ether and then
140:43 - if it is we go great we add that to our
140:47 - players array that we created up at the
140:49 - top
140:50 - and we want to make sure it's payable so
140:52 - that whoever entered the player's array
140:55 - is a payable address
140:58 - okay so that way we can pay them out
141:00 - later
141:01 - one thing to note here is if you didn't
141:04 - have the word payable here you wouldn't
141:05 - be able to require message.value okay
141:09 - all right
141:11 - so that is that is the you know the
141:14 - heart of that enter function now let's
141:16 - go ahead and test it out
141:19 - so by the way here's the really cool
141:22 - thing about remix right look at that it
141:25 - just gives us so many accounts
141:27 - and all of them have a hundred ether in
141:30 - it so you don't have to go to a faucet
141:32 - get ether in your wallet do all this
141:36 - garbage you just have it here right away
141:39 - ready to go so that makes our lives very
141:43 - easy
141:43 - okay let's go ahead and I'm gonna take
141:48 - this account the 0x5 B3 account and with
141:52 - that account I'm going to go ahead and
141:54 - deploy this smart contract so let's go
141:57 - ahead and hit deploy now you'll notice
141:59 - that when it deployed it took some
142:01 - amount of uh ether out of my account to
142:06 - be able to deploy
142:08 - okay now the smart contract is deployed
142:11 - now we have this function enter and
142:14 - we'll try to run this function enter
142:18 - I just tried to run it do you notice
142:21 - what just happened right when I try to
142:22 - run it I got into this error over here
142:27 - and this error basically saying hey
142:30 - you don't have more than 0.1 ether
142:34 - okay so we need to actually send it some
142:37 - money before we can run it
142:41 - so we got this error and we're not very
142:44 - happy right because you don't like when
142:46 - you get errors but this happened because
142:48 - we're not giving it more than 0.1 ether
142:51 - equal to or more than so what I'm going
142:54 - to do here is I'm going to go grab value
142:56 - and sometimes this is a little buggy in
142:58 - remix IDE so just command a like select
143:01 - it and then hit delete backspace and
143:04 - then you can like hit one or something
143:06 - or hit the arrow at the top and then
143:08 - it'll actually increment the value so
143:10 - sometimes this bugs out
143:11 - make sure you get the one there and then
143:13 - change it to Ether once you're done
143:15 - doing that
143:18 - and now go down and hit enter and let's
143:20 - see what happens and boom look at that
143:22 - we were entered into the lottery so let
143:25 - me ask you a question
143:26 - if I pooled one eighth and I entered
143:30 - into the lottery What's the total
143:32 - Lottery pool right now I'll give you
143:34 - five seconds to try to answer this five
143:36 - four three two one
143:40 - I really hope you said one okay I really
143:43 - hope you did
143:45 - because it's one person and one person
143:47 - entered with one eth so we have one
143:49 - total pool
143:51 - okay great I'll ask you this question
143:52 - again another person and and enter so
143:55 - keep your answer ready
143:58 - I'm gonna go ahead and choose a
143:59 - different account so I'm gonna choose
144:01 - the zero x a B8 account with 100 ether
144:05 - because I'm a big boy
144:08 - we're gonna scroll down and I'm gonna
144:10 - hit enter and let's see what happens I
144:13 - got an error because I didn't add any
144:15 - value I didn't pull any money
144:17 - so let's go ahead and pull in I'm gonna
144:19 - go one and then let's click enter there
144:22 - we go we just entered it with one eth
144:28 - okay so now the total amount of the pool
144:32 - is two eth
144:36 - okay
144:38 - now let's go ahead and grab all the
144:40 - players that are currently entered so we
144:42 - can see their wallet addresses
144:46 - all right so for get players I'm going
144:48 - to write this function it's going to be
144:50 - called surprise surprise get players and
144:53 - it's going to be just a public view
144:55 - meaning it doesn't really do anything it
144:58 - just shows stuff
144:59 - what we're going to be returning here is
145:03 - a array of payable addresses
145:06 - and just write memory because otherwise
145:08 - you're going to get an error
145:10 - and at the bottom I want to say return
145:13 - players okay so we're going to return
145:16 - players that's all it does
145:20 - those are the players that we're going
145:21 - to be returning that we initialized and
145:23 - you know at the top
145:25 - okay great
145:27 - so now that this function is made let's
145:30 - go ahead and kind of re-enter so we're
145:34 - gonna delete the smart contract that we
145:36 - previously had because we're going to
145:37 - need to redeploy this new smart contract
145:40 - because we just made changes to it
145:45 - so I'm going to choose my 0x5b wallet to
145:49 - deploy it with
145:51 - just deployed the smart contract it it
145:54 - is deployed let's click it so it expands
145:56 - and here I have my get players function
145:59 - as you can see
146:02 - I have an array of addresses that is
146:05 - currently empty and it's a zero because
146:07 - there are no players in the pool right
146:09 - now right
146:11 - now I'm going to go ahead and enter with
146:14 - one eth with my you know the owner the
146:17 - owner is going to come in and enter
146:19 - it's like the dude who owned the
146:21 - basketball team right jumps down and
146:24 - starts playing with Steph Curry you know
146:27 - and uh they're team members so that's
146:29 - what's Happening Here the guy who
146:31 - created the lottery is playing the
146:32 - lottery
146:33 - a little conflict of interest there but
146:35 - it's fine now I'm going to choose a
146:37 - second address
146:39 - and hit
146:41 - uh enter okay with the one eth now we
146:43 - got two players okay let's see who
146:47 - um and yeah when I hit players right
146:49 - boom we could see the two players are
146:51 - showing up so this function get players
146:54 - is working perfectly
146:57 - that is amazing now we're going to write
147:00 - a new function called get balance and it
147:03 - will get the balance of the pool aka the
147:06 - balance of the contract address so if it
147:08 - has to eat it needs to show two eth
147:13 - so what we're going to say is return
147:15 - address this dot balance why am I
147:17 - writing the keyword this this refers to
147:19 - this specific contract address
147:24 - the Contra it refers to this contract
147:27 - the one you're writing okay so it'll
147:29 - return the balance that this contract
147:31 - has that's how we get it
147:34 - now let's delete our contract let's go
147:36 - back to our Xerox 5B account which won't
147:38 - be called 0x5 Beyond yours because it'll
147:40 - probably be something different right we
147:42 - all get different addresses with
147:43 - different you know with 100 eth in it
147:46 - um let's go and hit deploy again
147:50 - so you can see you have a bunch of
147:52 - deploy you have your deployed contract
147:54 - and now you can see the get balance
147:56 - which I saw nicely hovered over for you
147:59 - then we are going to let's see then
148:03 - we're going to put in one eth into the
148:05 - pool
148:06 - let's hit enter so I joined with one eth
148:09 - so the owner jumped in again with one
148:11 - eighth and let's go and see
148:16 - what happens when this other guy jumps
148:18 - in with one eth let's hit enter so now
148:20 - two people have jumped in with one
148:22 - eighth let me ask you a question
148:23 - currently what's the pool size
148:26 - how much eth is in there I'll give you
148:28 - five seconds five four three two one
148:32 - I hope that you said to eth because one
148:35 - plus one is two okay if you didn't get
148:38 - that right you my friend have much
148:41 - bigger problems than learning blockchain
148:44 - okay so I'm I would be really worried if
148:47 - you didn't get that answer right you
148:49 - look yourself in the mirror and oh yeah
148:51 - okay so it's showing that we have two
148:53 - eth but it's showing like two trillion
148:56 - or two billion eth and the reason why
148:58 - it's doing that most likely is because
149:00 - it's showing that in way
149:03 - okay
149:05 - yeah so away is like a very small unit
149:08 - right ways like if
149:11 - think of way as you have sense think of
149:14 - eth as dollars you have dollars and then
149:17 - you have cents
149:18 - but something even smaller than ascent
149:20 - because like you know just to expand on
149:23 - this analogy right one dollar is a
149:25 - hundred cents so an eighth might be a
149:27 - hundred way even though one eats is way
149:30 - bigger than a hundred weights way bigger
149:33 - there you go and now I'm writing a
149:36 - comment for you letting you know that
149:38 - solidity Works in way so it's written
149:41 - out and extremely obvious to you so you
149:44 - just have no chance of missing that
149:47 - piece of information now we're going to
149:49 - get lottery ID
149:51 - and I'm going to create this function
149:54 - it will be called get lottery ID
149:58 - and this will be a very simple function
150:00 - so it's going to be public viewer
150:02 - returns and we're going to return an
150:04 - integer
150:07 - and we're going to if you see uint it
150:09 - just means an unsigned integer and that
150:11 - means it could be negative or positive
150:13 - but literally whenever I say int just
150:16 - thank you and keep your life easy
150:19 - and then we're going to go ahead and do
150:20 - return Lottery ID so very very simple
150:23 - because we have made this variable up at
150:25 - the top here on line nine and we're
150:27 - simply returning it online 36.
150:31 - so in order to test this get lottery ID
150:34 - we need to delete our current smart
150:37 - contract
150:38 - we need to go back
150:40 - and then we're going to deploy our smart
150:42 - contract
150:43 - so let's hit deploy it's been deployed
150:46 - successfully you can see at the bottom
150:47 - it's there and now you can click get
150:49 - lottery ID and it shows you that the
150:51 - current lottery ID is zero which makes
150:53 - sense because in the Constructor we
150:56 - defined it to be zero right boom there
151:00 - we go a hand in the brain
151:04 - we defined it to be zero
151:07 - okay
151:09 - perfect now we'll make a new function
151:11 - and this will allow us to get a random
151:14 - number this is going to be a helper
151:16 - function for picking a winner
151:19 - so I'm going to create this function and
151:22 - we're going to say get random number
151:26 - and it's just going to be a public view
151:28 - it's not going to mutate any data so
151:30 - it's not going to cost us anything okay
151:32 - and it's going to return an integer
151:37 - and it's going to return a random number
151:40 - and what we'll do
151:43 - so I'm gonna get so cat cat is going 256
151:47 - is going to help us generate a random
151:50 - number and to be technically accurate
151:52 - it's going to be a pseudo random number
151:54 - which you know if a really professional
151:57 - hacker tried to destroy your app or hack
152:00 - your app that probably could so if your
152:03 - work building a production you know app
152:06 - and you need this random number to be
152:07 - truly random then um you should look
152:10 - into chain link and how you could set
152:11 - this up with them okay I wouldn't try to
152:14 - do this yourself using sudo code okay
152:19 - so we got
152:21 - yeah so we're gonna go ahead and we're
152:23 - gonna take the ABI and we're gonna say
152:24 - in code pact we're going to pass it the
152:27 - owner of the smart contract
152:30 - and then we're going to give it a
152:31 - block.time stamp so we're just going to
152:33 - give it some unique pieces of
152:35 - information like the owner and the
152:37 - timestamp
152:39 - and we're hoping that that information
152:42 - when we give it to it it'll encode it
152:45 - it'll use the algorithm Keck 256 to kind
152:48 - of scramble it and then we'll call
152:51 - integer on it because we'll and at that
152:54 - point we'll assume it'll give us
152:55 - somewhat of a random looking number
152:58 - would would you know fairly weird
153:01 - obfuscated information that we're giving
153:03 - it so that's how we create a random
153:06 - number
153:07 - I wish they just had
153:09 - math.random because this is ridiculous
153:11 - right but we're early so we got to pay
153:15 - the price for being this early
153:18 - um
153:19 - all right let's go ahead and delete our
153:21 - smart contract that we had deployed
153:25 - and now we're gonna pick a winner that's
153:27 - that's what we're gonna be doing okay
153:29 - but let's go ahead and test or get
153:32 - random number first so I'm going to
153:33 - deploy our smart contract let's go down
153:35 - and you can see get random number it
153:38 - functions right there let's click it
153:40 - let's see if anything happens
153:42 - whoa something did happen it gave us
153:45 - this massive random number I mean that
153:48 - would have been crazy can you imagine if
153:50 - I asked you to guess that number
153:52 - how screwed you would have been
153:54 - holy but Jesus that is an insane number
153:57 - to guess
154:00 - so for us I mean you know the
154:02 - pseudo-random number is pretty darn good
154:05 - okay Keck hack is doing something useful
154:13 - okay let's go ahead and write this pick
154:16 - winner function and
154:18 - I'm going to call it pick winner
154:21 - it's going to be public
154:24 - we're going to require that the person
154:28 - who can pick the winner
154:30 - is the owner
154:33 - nobody outside of the owner should be
154:35 - allowed to pick the winner
154:37 - and even the owner will get to pick the
154:39 - winner randomly
154:44 - so that's what we're doing require and
154:46 - we want to say hey make sure that the
154:48 - current logged in metamask user AKA
154:50 - message.sender
154:51 - you know or whatever wallet you're using
154:53 - is the owner of the address okay and I
154:58 - believe we assigned the owner when the
155:01 - Constructor happened right when the when
155:03 - we when we deploy the smart contract
155:08 - and then we're going to create a random
155:11 - index using the get random number
155:13 - function we made
155:16 - and then we're going to do module
155:18 - players dot length and here's what's
155:20 - happening here okay let's say you have
155:24 - you know you have uh five players or two
155:27 - players Ryu and you have Ken okay from
155:30 - Street Fighter
155:33 - get random index whenever you run this
155:35 - function it'll either get you zero or
155:38 - one
155:40 - or zero or one okay literally just those
155:44 - out of those two numbers it'll randomly
155:46 - pick between those two now let's say
155:47 - that you had also Zangief
155:51 - now this random number will get you a
155:53 - number between 0 1 and 2 randomly
155:58 - between these Okay so
156:03 - that part of how so remember how get
156:06 - random number was giving you this big
156:08 - giant number well you might be thinking
156:10 - how the heck is going is that going to
156:12 - give us a
156:14 - index number like zero one or two how is
156:18 - it doing that
156:19 - that is the magic of this modulo
156:22 - players.length operator is very nice
156:25 - and modulo allows us it's a remainder
156:29 - okay that's what it technically
156:31 - mathematically speaking module is just a
156:33 - remainder so if you did three divided by
156:35 - two you'd get a remainder of one but
156:37 - another way to think about it is this
156:38 - allows you to wrap around whatever you
156:40 - give it so if you give it like two or
156:43 - number three right then effectively
156:46 - you're taking this giant number
156:49 - you're dividing it by three
156:51 - and you'll have some remainder left over
156:54 - there'll be always between 0 1 or 2. so
156:57 - that's the trick we're doing here the
156:58 - way I like to think about it
157:00 - is if I give it three it'll always wrap
157:03 - around give me between zero one and two
157:05 - it'll always always do that if I give it
157:07 - a module like module allows me to wrap
157:09 - things around okay
157:11 - whatever mental framework you want to
157:14 - use to understand that that's fine but
157:16 - but at a higher level if we ignore all
157:18 - this nerdy crap just know that random
157:20 - index gives you between 0 1 and 2 or
157:23 - whatever the length of that array
157:25 - players array is so if that player array
157:27 - is a hundred items in there or 100
157:29 - players in there playing the lottery
157:32 - then it will be between 0 to 99
157:36 - and they'll pick a number between
157:39 - um you know that entire range of zero
157:41 - through ninety nine okay
157:46 - all right
157:50 - and then we're going to
157:53 - grab the Rand a random player
157:57 - and transfer them
157:59 - the funds of this contract so remember
158:05 - address this dot balance
158:08 - okay
158:12 - all right so there we go this allows us
158:15 - to take the funds from our contract
158:18 - address
158:19 - okay so let's say that we have this our
158:22 - big pool right and it has all of the
158:24 - Monies
158:26 - then we have this like array of players
158:30 - right player one player two player three
158:32 - we randomly select let's say this player
158:36 - three
158:37 - right and then because of this here dot
158:40 - transfer
158:42 - we
158:43 - are able to take that player three right
158:46 - and and let's say that they have they're
158:48 - a real person they're very happy
158:51 - then we send them the funds okay that's
158:54 - this is what's happening guys There's
158:56 - real life stuff happening you're
158:58 - changing people's lives writing this
159:00 - code so don't just think of it like
159:02 - random nerdy math numbers somebody will
159:05 - be able to use this one day and get
159:07 - money in the bank account and then you
159:09 - know they can provide for their little
159:11 - tiny children or much smaller than them
159:13 - this is not to scale
159:16 - but yeah because that would be a huge
159:18 - face right if you're a little child I
159:20 - was six years old was smaller than your
159:22 - face
159:23 - that would have been that would be crazy
159:26 - um
159:27 - unless you're Shaquille O'Neal
159:31 - so
159:32 - now we're gonna go and uh grab the
159:37 - winners and push the player that was the
159:41 - winner okay so the the the person that
159:44 - we chose
159:45 - to win we're gonna push that winner onto
159:49 - the array so you know in another words
159:52 - this part over here players random index
159:55 - okay this weird looking code that just
159:58 - really means winner
159:59 - okay and so all we're doing here is
160:02 - we're just pushing that winner
160:04 - okay that's what's happening hopefully
160:06 - that's not too scary or weird or freaky
160:09 - what the heck is this okay whatever
160:13 - I don't know maybe I maybe I'll use it
160:15 - one day for something but for now let's
160:18 - keep going
160:20 - all right now we have Lottery ID and
160:23 - what I want to do is every single time
160:25 - you've picked a winner well at that
160:26 - point essentially the lottery is done
160:29 - the current lottery is done
160:31 - so when the current lottery is done at
160:34 - that so at that point I think we should
160:36 - increment the lottery ID by one because
160:38 - now
160:39 - you know you're technically on the
160:42 - second Lottery because the first Lottery
160:44 - is over people have been paid out got
160:47 - their money and
160:49 - Life's good
160:51 - and last thing we want to do is remember
160:54 - that players array we had like the
160:57 - current active players that were playing
160:59 - the lottery well we need to clear that
161:03 - array so we're going to write this
161:04 - function it's going to allow us to do
161:05 - that so imagine you had this array with
161:07 - player one comma player two but this
161:10 - function is not going to allow you to do
161:12 - is really just turn it into an empty
161:14 - array that's all okay and not function
161:18 - but we're just gonna take our variable
161:21 - players that we had initially written
161:23 - and we're going to just reassign it and
161:25 - give it a new definition and we're just
161:27 - going to say hey become an empty array I
161:29 - wish solidity could just make it easy
161:31 - for you okay what we're really writing
161:33 - here before I write it and and freaks
161:36 - you out here's what we're really writing
161:37 - players equals empty array that is it
161:40 - okay in JavaScript that is what you
161:42 - would do and you would move on
161:45 - in solidity they want you to just go
161:47 - through a lot of pain and uh be super
161:50 - verbose with what you're doing but I
161:53 - understand why to make your code less
161:54 - error prone you know add and type safety
161:59 - increases the speed I understand but
162:01 - it's still kind of annoying from a
162:03 - developer experience perspective so
162:05 - that's all you're doing here you're just
162:06 - saying hey
162:08 - players should be a new thing and it
162:11 - should be a array of address payables
162:14 - and currently it's at size zero meaning
162:16 - it's just currently empty we're making
162:18 - it empty okay
162:20 - great
162:22 - okay
162:24 - now let's go ahead and play with this
162:26 - new function that we made so let's
162:27 - deploy the smart contract let's go make
162:29 - sure that it's deployed and showing us
162:31 - and you can see we have pick winner
162:35 - looking orange looking really nice
162:38 - all right so I just want to kind of take
162:41 - a quick pause here and explain what's
162:42 - what are what what the heck is that
162:45 - I just explain what all of this is right
162:47 - why are these blue so what does blue
162:49 - mean
162:50 - why is that one orange what does that
162:53 - mean okay and and then red so blue means
162:56 - these are our Getters these are just
162:58 - your public view functions that don't
163:01 - change any data don't change anything
163:04 - rather than return something okay so
163:08 - these are our getters
163:09 - and then orange
163:12 - are our setters
163:14 - that is where you're changing data and
163:17 - mutating data AKA like we're mutating
163:20 - and we're changing the definition of the
163:22 - word players we're mutating winners
163:24 - because we're adding
163:26 - a player to the Winner's array
163:30 - we're taking laundry ID and we're
163:33 - incrementing it by one so there's a lot
163:35 - of mutation happening
163:38 - and then this red over here
163:42 - it's a legendary weapon
163:44 - orange for to me used to mean a
163:46 - legendary weapon in the game Borderlands
163:48 - so orange is a very special color but
163:50 - that's not what it means here okay and
163:52 - then red here means it's a payable uh
163:54 - it's there's some payment action money
163:57 - stuff is happening okay that's
164:01 - that's as far as I know when I find out
164:03 - new information I'll let you know
164:06 - so the color coding kind of makes it
164:08 - nice you could look at it visually and
164:10 - know kind of what's Happening
164:12 - all right now we're gonna try this okay
164:14 - so let's go ahead and deploy this smart
164:17 - contract uh or sorry we've deployed it
164:20 - but let's enter it with one eth
164:22 - as our uh you know as the owner
164:25 - and then I'm going to go to another uh
164:29 - pick another wallet
164:31 - and I'm going to put in one eighth here
164:33 - and I'm going to go ahead and enter as
164:36 - well
164:37 - so now I've entered here so the pool
164:39 - size now should be two eth
164:42 - and okay actually let's go and enter
164:45 - with a third person account as well so
164:47 - let's hit enter and now we have three
164:49 - people in the pool so that's pretty good
164:51 - let's do get players and look at that we
164:55 - have three players it's kind of hard to
164:57 - tell but it's three players
165:01 - all right so there we go let's hit get
165:04 - balance and take a look at that right
165:06 - Lottery idea zero balance is three
165:10 - eighth okay this is in way so obviously
165:12 - it's gonna be like crazy right because
165:13 - this is the sense incense and ether
165:16 - ethereum is dollar
165:18 - this is going to be a way bigger number
165:22 - um here is
165:24 - all of the addresses right so these are
165:25 - three addresses so here you see the one
165:28 - comma and then two commas right so that
165:30 - means one address two addresses three
165:31 - addresses so three players are in three
165:35 - is the eth and we will now be picking
165:39 - the winner
165:40 - so let's go ahead and pick the winner
165:44 - soon
165:45 - okay
165:47 - now notice that I'm on the smart notice
165:51 - that I'm on a wallet that is not the
165:53 - owner
165:54 - remember the owner was the first one we
165:57 - used okay the owner was a zero x5b3 one
166:00 - but I'm not on that I'm not on the owner
166:04 - so remember our smart contract says if
166:07 - you're not the owner you should not be
166:09 - able to pick the winner so let's see if
166:12 - we can pick the winner
166:14 - so I'm going to go down and I'm gonna go
166:17 - and try to hit
166:20 - um pick winner and notice right when I
166:23 - clicked pick winner I actually got an
166:26 - error at the bottom
166:29 - this error means that I'm not the owner
166:33 - so it's not allowing me to pick it
166:36 - remember for a pick winner you can see
166:38 - only the owner of contract can pick
166:42 - winner
166:43 - that's what line 47 is saying
166:47 - so I'm going to go up at the top and
166:49 - change my wallet address to the owner of
166:52 - this smart contract that was deployed
166:54 - now let's go down now let's pick winner
166:57 - and boom look at that you see that green
167:01 - tick mark and that means
167:05 - we were able to select the we were able
167:08 - to pick a winner now notice that when I
167:10 - say get players
167:12 - there are no players there's zero
167:14 - players empty and that makes sense
167:16 - because
167:19 - we on line 54 of our code
167:22 - after the lottery winner has been picked
167:25 - we set the players to be an empty array
167:29 - if you get the lottery ID well look now
167:31 - it's a lottery ID one so that's really
167:35 - cool and when I hit get balance balance
167:38 - is zero because there's no more money in
167:40 - the pool
167:42 - all of the winner has been picked and
167:44 - that winner got all of the eighth
167:49 - okay next up we're going to make a
167:51 - function that's going to be called get
167:53 - winners
167:54 - and this way we'll see who won
167:58 - get winners will be you know we'll do a
168:01 - re public view returns here it's going
168:03 - to be an address of winners
168:06 - all right there you go so now we're just
168:08 - gonna return winners so it's going to be
168:10 - an address you know it's going to be in
168:12 - a address of arrays
168:15 - and you could see an array of addresses
168:18 - I'm sorry what the heck and that's what
168:20 - winners is that's what we're returning
168:22 - and so you could see on line 59 we're
168:23 - just returning the winners okay when we
168:25 - created that variable earlier
168:28 - all right and let's go delete that smart
168:31 - contract we need to deploy a new smart
168:33 - contract well because we made changes to
168:35 - it it's a different one than that
168:37 - deployed one
168:39 - let's go and go to Xerox five I mean for
168:43 - you it's going to be something different
168:43 - right but I'm going to go to that
168:45 - account and I'm going to hit deploy
168:47 - so the smart contract has been deployed
168:49 - I'm going to pick one ether and I'm
168:52 - going to come to my deployed contracts
168:53 - and I'm going to enter the lottery
168:56 - and I'll pick another account and I'll
168:58 - also put in one ether and I will enter
169:01 - the lottery
169:03 - and I'll pick a third account put one
169:05 - ether enter the lottery once I've
169:08 - entered the lottery I'll get players you
169:09 - can see it's three players right now I
169:12 - will say get winners there's no winners
169:14 - you could see the array of addresses is
169:16 - empty
169:17 - and Lottery is currently zero
169:20 - now we're going to go to the owner
169:21 - because only the owner could pick the
169:23 - winner so I'm gonna say pick winner the
169:25 - winner has been selected great now let's
169:28 - go ahead and get players players are
169:29 - empty because now the lottery is over
169:32 - let's check get winners and look at that
169:35 - guess who won the game is rigged boys
169:39 - and girls that's why I told you don't
169:42 - let the owner hop into the lottery it is
169:44 - it's just gonna be a massacre right the
169:47 - owner of course wins because it's it's
169:49 - rigged and that's pseudo-random you know
169:52 - hell yeah pseudo random right the owner
169:54 - always wins that's what happens so
169:57 - lessons to learn right it's a huge
169:59 - conflict of interest a dude who made the
170:01 - lottery don't let them jump into the
170:02 - lottery
170:03 - but yeah
170:05 - um there you go owner was picked and oh
170:08 - wow what a coincidence check who the
170:10 - owner is and the owner is the same dude
170:12 - that freaking won okay there we go
170:16 - all right uh yeah very good so with that
170:20 - said you are done essentially with the
170:23 - smart contract part how does it feel do
170:25 - you feel special
170:27 - because you should feel very special
170:29 - this is a huge task that you just
170:31 - completed
170:32 - and this was awesome I think I hope you
170:35 - had as much fun as I had going through
170:38 - it with you and picking up these things
170:40 - and sharing these with you I think it's
170:42 - just so cool like this part of web3 is
170:44 - pretty cool and I think
170:47 - um yeah I hope you learn anyways we're
170:49 - now going to take this smart contract
170:51 - that you built and start bringing it
170:53 - into our development environment inside
170:55 - of you know whatever you're using visual
170:58 - studio code or whatever ID you use to
171:00 - code we're going to bring it in there so
171:02 - then our entire app could build off of
171:04 - this but
171:05 - I like this flow a lot build on
171:08 - something like remix IDE so you have
171:10 - that iterative instant feedback loop so
171:12 - you can keep iteratively building
171:13 - building building once you're done
171:15 - building the smart contract bring that
171:18 - back into your app
171:19 - cool with that said let's continue
171:22 - all right so now what we want to do is I
171:25 - want to take all of this and move it
171:26 - into my coding environment so I'm going
171:28 - to copy the whole damn thing okay darn
171:31 - thing let's copy it let's go back to our
171:33 - app and inside of my app I'm going to
171:36 - make a new folder at a global level and
171:39 - I want to call it my back end AKA my
171:41 - blockchain AKA my smart contract part
171:43 - okay because we don't have a real you
171:45 - know traditional back end as in Firebase
171:47 - or super bass or you know mongodb or
171:51 - MySQL or postgres or whatever in this
171:53 - case our backend is going to be the
171:55 - blockchain that's where we're storing
171:56 - our data and running our app from so
171:59 - let's go to our command line now and I'm
172:01 - going to CD into our backend folder now
172:04 - first thing we want to do all right so I
172:05 - have this blockchain part now I want to
172:07 - do Truffle in it however most likely you
172:10 - on your computer might not have it
172:12 - installed okay
172:14 - um and maybe I might not even have it
172:16 - installed so first thing we want to do
172:18 - is make sure we install it so let's go
172:20 - ahead and do npmi Dash G okay I'll just
172:24 - zoom in here so you could see the
172:26 - command that I'm actually typing and I
172:28 - know my mouse is blocking this but it's
172:30 - a dash G okay and then we're gonna do
172:33 - truffle okay and then I want you to go
172:36 - ahead and hit enter and it will and
172:38 - start installing it okay there we go so
172:41 - let's go ahead install truffle all right
172:44 - it's doing its thing it's installing all
172:47 - of the dependencies that truffle comes
172:48 - with truffle is very very helpful in
172:51 - developing and deploying smart contracts
172:53 - makes our lives very easy okay let's go
172:56 - and install this once it's done
172:58 - installing I'm gonna now say Truffle in
173:00 - it make sure you're in the back end
173:01 - folder very important make sure you're
173:03 - in the backend folder hit truffle init
173:05 - and once you do that it will go ahead
173:07 - and scaffold an empty project for you so
173:09 - now you can see that you have contracts
173:11 - migrations tests truffle all of that
173:13 - stuff now in your migrations you have no
173:15 - migrations okay in your contracts you
173:18 - have no contracts you'll have to start
173:19 - by creating a smart contract so we'll
173:21 - hit new file we'll call it lottery.sol
173:24 - and now we're going to go to our remix
173:26 - IDE we're going to grab that contract
173:28 - address that we had gotten so let's go
173:30 - ahead select everything and let's go and
173:32 - copy it and we're going to bring it and
173:34 - we're going to paste it inside of our vs
173:36 - code lottery.sol file so now we have
173:38 - access to it on you know inside of our
173:41 - project let's go to the migrations we're
173:43 - going to hit new file and I'm going to
173:44 - say one underscore deploy.js and inside
173:48 - of this what I want to do is I want to
173:50 - say cons Lottery and I want to say
173:51 - artifacts that require Lottery some of
173:54 - this code is going to be new and weird
173:55 - just write it and you'll start getting
173:57 - used to it okay but don't you don't need
173:59 - to worry too much about understanding
174:00 - this because it's not that important you
174:02 - write it once and then you're done and
174:04 - you can kind of copy and paste it for
174:05 - all your future projects and you should
174:07 - be good okay and we're going to export
174:09 - the following module it's going to be a
174:12 - function that's going to take in a
174:13 - deployer and then we're going to take in
174:15 - whatever we're trying to deploy and
174:16 - we're going to deploy it and pass in our
174:19 - Lottery artifact all you need to
174:21 - understand about that is that piece of
174:23 - thing that we wrote is going to help us
174:24 - deploy our lottery.smart contract and
174:27 - the benefit of deploying it is just like
174:29 - the web 2 deployments it will deploy it
174:32 - to the ethereum network meaning that
174:35 - anybody will be able to actually access
174:36 - it you know almost like it's a website
174:39 - or an API that's publicly available okay
174:42 - that's what a smart contract does now
174:44 - let's go into our truffle config file so
174:47 - I'm going to go and scroll all the way
174:49 - down and my truffle config file so it's
174:51 - this file right here so let's scroll
174:54 - down and I'm I just want to fix the
174:57 - version so version right now is
174:59 - 0.8.16 I'm looking at my English little
175:02 - tiny Bulldog pudgy please baby don't do
175:05 - that
175:06 - her name is pudgy and we're going to
175:08 - change it to 0.8.15 because that's the
175:11 - version we're using and that is it for
175:14 - moving it into your Visual Studio code
175:16 - into your own
175:18 - um you know development environment so
175:20 - at this point you're done doing that
175:22 - next up we're going to set up the
175:23 - Truffle extension let's go
175:26 - now we're going to set up our truffle
175:29 - extension so the first thing you want to
175:31 - do when you're setting up a truffle
175:32 - extension is obviously you need to
175:34 - install truffle from the extensions okay
175:36 - go ahead type in truffle and there you
175:40 - go truffle for vs code now what is
175:43 - truffle it is incredibly powerful
175:45 - software built by consensus and what it
175:48 - allows you to do is in you know
175:50 - basically uh integrate your smart
175:53 - contract with infuria in a very very
175:55 - easy way and deploy to their Network
175:57 - okay and it just makes your smart
175:59 - contract deployment building of it
176:01 - incredibly easy so make sure you're
176:04 - using this for pretty much almost all of
176:06 - your unicolidity projects so at the
176:09 - bottom left click truffle and go into
176:11 - that extension
176:14 - and that error at the bottom if it pops
176:16 - up for you just ignore it it's not
176:17 - important now what you're going to click
176:19 - on is you're going to create a new
176:22 - network so hover on that create a new
176:24 - network and you're going to choose
176:25 - infuro service
176:27 - and then inferior will pop up and it'll
176:29 - ask you to sign in Click sign in and all
176:32 - I want you to do is go ahead and hit
176:34 - authorize at the bottom here and so you
176:36 - make sure that you sign in and I'll hide
176:38 - myself so you can see that authorize
176:39 - button okay there we go
176:42 - all right
176:44 - um so let's keep going here okay once
176:47 - you authorize and that was Kevin and me
176:49 - on the call that you saw on Zoom okay
176:51 - all right so let's go here yep so now it
176:55 - will say you are signed in beautiful and
176:58 - you can exit out once you've signed in
177:00 - now at the top here it's going to ask
177:02 - you to put your project name so go ahead
177:05 - and put your project name we're just
177:07 - going to call it all right so I'm going
177:09 - to type in Lottery and then just hit
177:10 - enter once you type that in and then you
177:13 - could choose this project as public
177:14 - fantastic now at the bottom in the
177:17 - networks you see it says Lottery and
177:20 - it's showing us that it's connected to
177:21 - multiple networks on layer 1 and Layer
177:23 - Two And if you go to your inferior
177:25 - dashboard you'll also be able to see
177:27 - this project there now I'm going to go
177:28 - inside of my contracts and what I want
177:31 - to do is right click on my lottery.sol
177:34 - and go and choose build contract so
177:39 - there you go build contract so click
177:42 - that and then once you once it starts
177:45 - building it for you just simply wait and
177:49 - go in your vs code and choose truffle
177:51 - for vs code for your outputs you can
177:53 - actually see the output I'm going to
177:55 - drag this up now and we'll wait for it
177:57 - and now it says command finish running
178:00 - so now it's built our smart contract and
178:02 - next after we've built it we're going to
178:04 - deploy it so then click deploy go ahead
178:08 - and choose your projects since we're on
178:11 - the robston one choose inferior Lottery
178:13 - Robson INF underscore Lottery underscore
178:15 - Robson choose that that's going to be
178:18 - your deploy destination okay and now
178:19 - it's going to say hey enter gas price
178:21 - just hit enter so you can leave it as
178:23 - default and here you're going to pop in
178:27 - your mnemonic okay so hopefully you've
178:30 - copied your mnemonic from earlier
178:32 - remember when you made your wallet yeah
178:33 - that if you didn't do that go ahead and
178:36 - create a brand you know either find a
178:37 - mnemonic for an existing wallet that you
178:39 - have or create a new wallet and grab
178:42 - that while it's mnemonic this is going
178:44 - to be very important and then paste that
178:45 - mnemonic here once you paste that
178:47 - mnemonic it's going to ask you to save
178:49 - and I want you to just save it as you
178:52 - know kind of wherever you want to save
178:53 - it it doesn't really matter I'm going to
178:55 - save it on my account in desktop and I'm
178:58 - just going to call it key dot ends it's
179:01 - really just short for Kevin and uh then
179:05 - wait for it to deploy at the bottom it's
179:08 - loading okay deploying takes a little
179:11 - bit of time so we're going to keep
179:13 - waiting for the deployment boom there we
179:15 - go it says deploy succeeded finished
179:18 - running command now grab that contract
179:21 - address that we got from our deployment
179:23 - copy that and now you can go over into
179:26 - you know we're create a new folder and
179:29 - we'll call this utils at the top level
179:32 - make this folder inside of it we're
179:34 - going to put a new file and it's going
179:36 - to be constance.js and inside of this
179:38 - file we can say export cons contract and
179:41 - we can say contract address and then
179:43 - boom we can paste that contract address
179:45 - okay that we copied there we go now our
179:47 - app will have access to this contract
179:49 - address now go into your back end go
179:52 - into your uh build and grab lottery.json
179:55 - and copy it then go in utils and paste
179:59 - that file so now we just paste the
180:01 - laundry.json and while we're doing this
180:03 - is because we will need access to our
180:05 - Abi and this has the entire ABI in there
180:09 - okay now we're also going to import in
180:12 - our constants file we're going to import
180:13 - our ABI from Lottery Json
180:16 - and then we're going to export that API
180:20 - yeah as well so now we're just going to
180:23 - do
180:23 - export cost contract API and we're just
180:26 - going to say abi.abi that should do the
180:28 - trick
180:29 - with that said we're all set up our
180:32 - front end now is plugged in and
180:35 - connected to our smart contract and back
180:37 - end we have access to everything now
180:39 - we're going to start creating the
180:42 - lottery from react and start doing the
180:45 - front end stuff okay let's get to it now
180:47 - let's go ahead and actually factually
180:50 - connect our back end and front end okay
180:53 - up until now we kind of pull that
180:54 - information the contract address now
180:56 - we'll actually like create a lottery
180:58 - helper function that connects it
181:01 - let's go into utils I'll create a new
181:03 - file we'll call this file Lottery
181:06 - contract.js and in here I want to do the
181:10 - following I want to import my contract
181:12 - address and my contract ABI from the law
181:18 - uh from my constants okay because my
181:20 - constants have access to all of this
181:22 - information once I have access to that
181:24 - I'm going to create my lottery contract
181:26 - and we'll be you doing it in the
181:30 - following way okay we'll say hey return
181:32 - to me a new web3
181:34 - eth contract and you're going to take in
181:37 - the contract API and you're going to
181:39 - take in the contract address and with
181:42 - that said that is it so with this
181:46 - thing that we've made now we'll be able
181:49 - to actually access this in other files
181:52 - and use our Lottery contract and at this
181:56 - point you could add the export
181:58 - but we're going to add the export later
182:00 - and this is just going to be a helper
182:02 - function we'll be able to use throughout
182:03 - our entire app with that said let's move
182:06 - on and let's start working on the actual
182:08 - header in our app all right now we're
182:11 - going to be building the header and
182:13 - here's what it will look like
182:16 - boom
182:17 - all right so this is the header that
182:21 - we're going to be building on the
182:22 - connect wallet button so I'll put it
182:23 - here as just like a reference point that
182:25 - we can use as we continue building so
182:28 - let's go ahead and continue building
182:30 - here all right so I'm going to pop in
182:33 - and I'm going to say header okay and
182:37 - make sure you are in your index.js file
182:39 - and we're going to import header from
182:42 - components header okay then just write
182:45 - down header there okay this is a
182:47 - component we've already made for you
182:49 - inside of if you're going to the
182:51 - components folder you'll see header.js
182:53 - it's pretty much already built but it
182:56 - does have some to Do's so it does ask
182:58 - you there are things that you're going
183:00 - to need to do in there to add
183:01 - functionality so it says get the connect
183:02 - wallet and address from blah blah and
183:05 - then on line eight it has another to do
183:07 - replace a static address so we've added
183:09 - these to-do's for you to make your life
183:11 - easier and then we have context as well
183:15 - so here's our context.js file so so
183:18 - let's go ahead and work inside of our
183:20 - context file and we're going to keep
183:25 - track of the user's address we also will
183:28 - want to add functionality for connect
183:30 - wallet so the user could log in and it's
183:33 - going to be an async function
183:35 - and we're going to say if the window is
183:39 - undefined okay
183:42 - and window ethereum is undefined so
183:46 - meaning that you know you're not on
183:48 - metamask or whatever and then we'll do
183:51 - else and we'll just say hey please
183:53 - install metamask let's add a try catch
183:56 - in between those if statements and we
183:59 - will try catch it in the following way
184:01 - so we'll have uh we'll console log the
184:04 - error and then inside of our try we want
184:08 - to request wallet connection and so how
184:10 - we do that is we want to do
184:13 - window.ethereum.request method eth
184:15 - underscore request accounts that'll
184:17 - allow us to request wallet connection
184:19 - okay that's that brings up that little
184:21 - pop-up in metamask and then next up we
184:25 - want to create a web 3 instance so let's
184:27 - do web 3 equals new web3 and we want to
184:30 - pull it from window.ethereum let's go
184:32 - ahead and import web3 from web3
184:37 - great let's keep track of a couple of
184:39 - other states here so we're going to keep
184:41 - track of a web 3 State and we're going
184:44 - to use that hook right here and we're
184:45 - going to say set web 3 to whatever we
184:48 - defined web3 to be right right above on
184:50 - line 19 and then we want to have
184:53 - accounts and we want to pull all of the
184:56 - accounts from the user's metamask like
184:59 - whatever they connected whatever
185:00 - accounts are connected and we're going
185:02 - to set the address to be the zeroth
185:05 - account like the first account that they
185:06 - selected okay now go to Lottery contract
185:10 - and here I'm going to export default and
185:13 - we're going to export our Lottery
185:15 - contract so we have access to it outside
185:17 - of our utils file for lottery contract
185:22 - and we're gonna actually you know what
185:24 - rename it let's rename it to create
185:26 - Lottery contract that would be a good
185:30 - renaming for this
185:33 - let's go ahead and set a state here on
185:36 - line 9 and we're going to set a state
185:38 - for lottery contract
185:41 - okay so we can keep track of everything
185:42 - that's happening because the lottery
185:44 - contract can get updated so that's why
185:46 - we need to keep track of the state now
185:48 - in line 24 I want to say set Lottery
185:50 - contract okay to create Lottery contract
185:54 - and we're going to pass it web3 that we
185:56 - just got and then what we want to do is
185:58 - we want to say hey window.etherium Dot
186:01 - on accounts changed
186:05 - all right
186:06 - and we want to run this async function
186:09 - in here
186:11 - so whenever the accounts change then I
186:15 - want you to get accounts and set the
186:16 - address to account zero so if the user
186:18 - changes their account picks a new
186:20 - account this will do it okay this will
186:23 - automatically update it without
186:25 - necessarily having to even refresh the
186:26 - page or do anything because it's an on
186:28 - change it's kind of a listener here next
186:31 - up what we want to do is in our provider
186:34 - we want to pass this around so we want
186:37 - to pass connect wallet function that we
186:38 - created around so our entire app has
186:40 - access to it and then we want to pass
186:43 - the current address around so our app
186:45 - has access to it okay
186:48 - so let's go to our header function now
186:51 - and inside of our header function you
186:54 - can see it says Hey to do get the
186:55 - connect wallet and address from context
186:59 - so now we're going to go ahead and get
187:01 - that we're going to finish that to do so
187:03 - we're going to say connect wallet and
187:04 - then address and we'll say use app
187:06 - context
187:08 - okay let's fix the yep address right
187:11 - there remove that address we don't need
187:13 - that and
187:15 - yeah on line 18 we want to say hey if
187:19 - the
187:20 - user card so you can see on line eight
187:23 - we have a to-do that says replace the
187:24 - static address or the currently logged
187:26 - in user so on line 18 we had a static
187:29 - address and now what we're saying is hey
187:32 - if the there is an address meaning there
187:35 - is a logged in user then I want you to
187:37 - show the user card
187:39 - with the following address otherwise I
187:41 - want you to show the connect wallet
187:43 - button okay so we're going to say
187:45 - address we're going to pass it the
187:46 - address and then for our connect wallet
187:49 - button we'll say hey
187:52 - um yeah made the connect wallet function
187:54 - should be the connect wallet function
187:56 - that we got from the top okay so that's
187:58 - what we're going to pass in as a connect
187:59 - wallet prop
188:00 - okay great so we've made fantastic
188:03 - progress on it so far let's go ahead and
188:05 - hit refresh and there we go our Lottery
188:08 - dap is showing up and now let's see if
188:11 - when we hit connect wallet if it runs
188:14 - okay so it didn't work right now so
188:16 - let's see what's going on
188:18 - so let's go to our connect wallet button
188:21 - component in components and it has a
188:24 - couple of to-do's for us okay
188:27 - so we need to destructure connect wallet
188:29 - because that's what we're passing it
188:31 - and we need that function to run on
188:34 - click okay so let's go ahead and set
188:37 - that up so for the button we're going to
188:39 - give it on click
188:40 - and we're simply going to say hey
188:42 - run the connect wallet function that we
188:45 - wrote when you do on click so as soon as
188:47 - you click that metamask will then pop up
188:49 - okay so that is how we're connecting
188:52 - that functionality and here's our user
188:55 - card
188:56 - component that we have made
188:58 - and we need to destructure the prop the
189:01 - address prop that we gave it okay so
189:03 - that this has access to the address and
189:06 - we need to render the user's address in
189:09 - here so right now we just have some
189:11 - dummy address
189:12 - let's remove that dummy address and
189:15 - let's render the user address in there
189:16 - and we'll just say address just like
189:18 - that
189:19 - okay great now let's go ahead and we'll
189:22 - full screen this so we could see it
189:23 - let's hit connect wallet boom look at
189:26 - that right metamask just opened up we'll
189:29 - type in our password and let's see if
189:30 - this works
189:32 - great it worked and there you go right
189:35 - you can see welcome you could see the
189:37 - current user's wallet address and let's
189:39 - see if it's the actual current user or
189:40 - if it's doing some kind of dummy data
189:43 - thing and look at that 0xa right 0x a it
189:47 - is the current user we'll switch users
189:48 - as a zero
189:50 - um X31 or whatever let's switch to zero
189:53 - x35 let's refresh right let's connect
189:55 - and look at that right it changed the
189:57 - user to zero x35 and so you could see
190:00 - that this app works completely well with
190:03 - this it's picking up the current logged
190:06 - in User it's changing the state when we
190:08 - hit login connect wallet it changes it
190:10 - to the Welcome State it can change the
190:13 - current active user it has allowing us
190:16 - to bring up metamask and unbring it up
190:18 - and basically it's you know
190:20 - authentication at this point of the app
190:23 - is working so fantastic job if you got
190:26 - to this part now we're going to continue
190:28 - and we're going to start adding in the
190:30 - lottery card so you can enter the
190:32 - lottery let's go
190:34 - all right now let's go and work on the
190:36 - lottery card first thing I need to do is
190:39 - actually write the write out the lottery
190:41 - card component and then you're going to
190:43 - add in all the functionality we're going
190:44 - to add it together so let's go Lottery
190:46 - card right here and we and if you run
190:49 - this we get an error which says Lottery
190:51 - card is not defined what we have to do
190:53 - is we have to import Lottery card so
190:56 - that way we actually have access to it
190:57 - and we're going to import it from
190:59 - components slash Lottery card okay there
191:02 - you go we've already made this component
191:04 - for you now this component is coming in
191:07 - with dummy data
191:08 - it's coming in with dummy data and you
191:11 - can see that we got 10 each we got a
191:13 - winner last like who won the lottery
191:15 - last and we can pick our winner so let's
191:19 - go to context.js and inside of our
191:22 - context
191:23 - we want to do the following
191:25 - I want to
191:27 - all right so I'm going to say Lottery
191:30 - pot and we're going to say set Lottery
191:33 - pot so I'm going to keep track of the
191:34 - lottery pot state
191:36 - and we're going to start the state as
191:39 - empty
191:41 - and then we're also going to keep track
191:43 - of the lottery players
191:45 - okay it's going to be an empty in an
191:46 - array of players
191:48 - we're going to also
191:51 - keep track of who won last and
191:56 - yeah okay and then we're gonna keep
191:59 - track of the lottery ID which Lottery
192:01 - are we on are we on lottery 0 1 2 3 4
192:04 - Etc let's go ahead and now we're going
192:07 - to write our enter Lottery function and
192:09 - I'm going to say enter Lottery this is
192:11 - going to be async and we're going to
192:14 - wrap it in a try catch we're just going
192:16 - to console log the error it's just a
192:18 - good habit to get into and then in the
192:20 - try what I want to do oh copilot is
192:23 - telling everything
192:26 - I'm going to grab my lottery contract
192:29 - and I'm going to call the enter Lottery
192:31 - function that I created on the back end
192:33 - okay it's called enter
192:35 - okay and then we're going to send and
192:39 - send is going to take in the following
192:41 - information into account it's going to
192:43 - take in the from address it's going to
192:45 - take in the value and so I'm just going
192:47 - to pass it a very small amount of ether
192:50 - as value because that's what I want to
192:52 - put in the pot okay
192:54 - this is a minimum amount that I could
192:57 - put in the pot and then we're converting
192:59 - it to whey because that's what it wants
193:01 - on the back end all right now for gas
193:04 - we're going to just pick 300 000 or
193:07 - whatever that is
193:09 - um okay so this is going to be gas in
193:11 - Whey or way and then we got the gas
193:15 - price here and gas price is going to be
193:17 - null now we want to also export this
193:20 - function so let's put enter Lottery
193:22 - inside of the app context and now we'll
193:24 - have access to enter lottery in our
193:27 - other files so let's go to our Lottery
193:30 - card and now we get the data needed from
193:33 - Context okay so now we're dynamically
193:35 - getting all of the data so let's go
193:37 - ahead and import our use app context
193:39 - from context
193:42 - and we will say use app context and
193:46 - we're going to destructure the following
193:48 - properties enter Lottery okay and that's
193:51 - kind of it that's all we need and where
193:53 - we have that enter button happening
193:55 - that's where we want our function to
193:57 - fire off that we just created so I'm
193:59 - going to say on click enter Lottery okay
194:02 - now let's go ahead and try that connect
194:04 - wallet login and then we're going to hit
194:06 - enter and now we should have entered
194:08 - Lottery
194:10 - and let's see what is happening
194:12 - we're currently getting some errors it
194:14 - says cannot
194:15 - tell you cannot read from undefined so
194:18 - we're going to import create Lottery
194:20 - contract from
194:22 - okay from where let's see
194:25 - from our utils okay from dot dot slash
194:30 - utils slash and we're going to say
194:33 - Lottery contract okay that's what we're
194:35 - getting it from
194:36 - now let's scroll down and let's say 0.1
194:39 - ether instead of 0.01 ether
194:43 - for our value that we pass
194:45 - and now let's hit enter so that way
194:47 - we're just passing in bit more ether
194:49 - into the pot let's hit enter and boom
194:52 - okay that worked let's hit confirm
194:57 - okay let's see what happens so let's
195:00 - take a look at the Smart contract here
195:01 - okay our dummy data of 10 8 is still
195:03 - there so that's not going to change but
195:05 - our smart contract looks like it has
195:07 - entered so our enter function worked it
195:10 - didn't fail so that's a great sign and
195:14 - you can see that we put in 0.1 Ross pen
195:17 - here Robinson okay
195:20 - now but that part we're done now we're
195:23 - going to make it so we actually update
195:25 - the lottery pot let's go ahead and do
195:27 - that
195:29 - all right let's go and update our
195:31 - Lottery pot now
195:32 - okay so let's go inside of our context
195:36 - and we're gonna update the lottery card
195:38 - dynamically
195:41 - using our contract
195:43 - okay so that way where it says 10 eighth
195:45 - we need that to update dynamically and
195:49 - not for us to have to manually hard code
195:52 - it and fix it okay so I'm going to make
195:55 - update Lottery function here
195:58 - and this is going to be an async
196:00 - function and I'm going to say hey if the
196:02 - lottery contract exists
196:07 - okay then I want you to
196:09 - create a pot
196:11 - and I want you to go and get me the get
196:14 - pot method and since we're using web3
196:17 - you got to do dot call to actually call
196:19 - your method
196:21 - okay and then whatever we get from our
196:24 - pot we're going to set
196:26 - Lottery pot to that
196:32 - okay let's use a use effect hook and
196:34 - inside of this use effect hook we're
196:36 - going to make Lottery contract a
196:38 - dependency so whenever our Lottery
196:40 - contract changes our app should you know
196:42 - our use effect hook should fire off and
196:44 - our app should dynamically update and
196:47 - when it does we should update the
196:49 - lottery so then we run the update
196:50 - Lottery function
196:55 - all right now in our context we also
196:57 - need to make sure that we
196:59 - um export Lottery pots or other files
197:02 - have access to it Lottery pot
197:04 - dynamically render the lottery okay
197:07 - so we're going to destructure in Lottery
197:09 - card or Lottery pot as well
197:14 - and where it says 10 eat we're going to
197:17 - dynamically now write Lottery pot there
197:20 - and it's going to pull from our Lottery
197:22 - pot and put that there
197:28 - foreign
197:29 - for lottery pot let's set it to be zero
197:32 - eighth when it starts so now you can see
197:34 - it says series okay I'm going to make it
197:36 - a string
197:37 - and then it will dynamically update
197:40 - once we have something in the pool
197:44 - so let's go ahead and connect wallet
197:46 - hmm interesting okay got dot get pot is
197:49 - not a function
197:51 - all right get pot is not a function so
197:54 - it's let's see it's get balance
197:56 - okay there we go and so we just got the
197:59 - balance and look at that so on our back
198:01 - end right on our smart contract
198:03 - blockchain part it's get balance that's
198:05 - what the function is so now you can see
198:07 - that when I say get balance I'm getting
198:10 - all of this money in way and so it is a
198:14 - massive massive amount and that's not
198:17 - what we want so we need to actually
198:18 - convert it back into ether so we're
198:21 - going to say web3utils dot from way
198:24 - okay
198:27 - and when you do Dot from way it allows
198:32 - us to convert it back into ether that's
198:35 - the really nice thing about that so it
198:37 - knows that it's getting way
198:40 - all right now let's go ahead and run
198:42 - this and boom that is so clean right now
198:46 - we can see that it's 0.1 eth that's
198:50 - showing up and we'll write the word eth
198:52 - at the end of that there you go now it
198:55 - says 0.1 eighth so now our app is
198:58 - dynamically updating super cool let's
199:00 - now update the lottery ID
199:03 - now we are going to update and render
199:06 - the players so they actually show up on
199:08 - screen when they enter let's go into
199:10 - index.js and we have a to-do here that's
199:13 - very nicely written for us and I'm going
199:15 - to say
199:16 - table
199:18 - all right
199:19 - and this is a table that we've already
199:21 - made for you so import table from
199:25 - components table
199:27 - all right so yeah so we're going to get
199:29 - the table make sure you've also gotten
199:31 - the you know Styles make sure you have
199:33 - the Styles obviously
199:35 - and there we go look at that our table
199:37 - is already showing up at the bottom hey
199:39 - nice oh wait I'm hiding everything so
199:42 - I'm gonna hide myself give me one second
199:45 - here okay I'm gonna hide myself here
199:47 - real quick so you can kind of see it so
199:49 - there we go right we got the player
199:52 - showing up now
199:54 - I'm gonna make myself a tinier
199:56 - okay let's go back and let's go inside
199:59 - of our table and here we can actually
200:02 - map we need to map through the players
200:04 - and loop through it so our to-do is
200:07 - telling us bring in the players data
200:09 - from Context so we need to get the
200:11 - players data so let's go inside of our
200:13 - contacts and get access to all of the
200:16 - players
200:18 - all right so an update Lottery I'm going
200:20 - to also write a players method and I'm
200:24 - going to say hey set the players to and
200:26 - let's go talk to our back end or
200:28 - blockchain part so I'm going to say go
200:30 - into Lottery contract going to the
200:31 - methods grab the get players method and
200:34 - call it and whatever that returns let's
200:37 - set that as our player so it's going to
200:38 - return an array let's set that array as
200:41 - our Lottery players
200:43 - okay and we can even console log this
200:45 - out so you could see it here
200:50 - all right there you go at the bottom you
200:51 - could see that we got an array of
200:53 - players it only had one item in that
200:55 - array and you could see that we had this
200:58 - guy right there
200:59 - okay and that's the guy that's currently
201:01 - actually logged in so it is working
201:05 - all right now let's go ahead and Export
201:07 - Lottery players in our provider so that
201:09 - we have access to another files
201:11 - right and now let's go to our table.js
201:17 - and I'm going to
201:20 - basically say inside of the loop here
201:22 - okay or inside of uh the div there
201:27 - but first i'm gonna pull my data from my
201:31 - context all right so let's say use app
201:33 - context and we're going to destructure
201:36 - Lottery players
201:38 - okay that's the one that we're
201:39 - destructuring there
201:41 - and now I'm just going to say hey in
201:43 - players row just show Lottery players
201:46 - okay let's do that
201:49 - we're going to say hey if La if Lottery
201:51 - players exist then I want you to Loop
201:55 - through those players and show me those
201:57 - players okay create a table Row from
202:00 - each of them and then show them to me
202:02 - and we're just going to make index the
202:04 - key for player we're just going to pass
202:06 - in the player okay that's it
202:08 - but if they don't exist then obviously
202:11 - just show me dummy data okay or don't
202:14 - show me anything at all
202:15 - so we're going to say style of no
202:17 - players and we'll send no players yet
202:19 - now when we run this you could see that
202:22 - it's actually already dynamically
202:24 - pulling in user information because you
202:25 - could see this is the guy right there
202:28 - and you can see
202:29 - 0xa1fa blah blah blah so this is working
202:33 - perfectly
202:34 - let's go inside of table row
202:37 - and you can see that we're destructuring
202:39 - the player and we're truncating that
202:40 - player's address
202:42 - okay that's what's shortening that
202:44 - address right so you can see that
202:46 - address is being shortened right there
202:47 - that's how that's happening
202:49 - okay it's because we have that function
202:51 - trunk kit that we're calling on it okay
202:53 - now let's say we change our wallet
202:55 - address and see what happens
202:58 - boom okay let's go ahead and hit reject
203:01 - there
203:02 - cool
203:05 - all right you can see we have 0.1 eighth
203:07 - and you can see our user address is
203:10 - still 0xa because that's the player
203:12 - that's that has actually entered 0x35
203:15 - has never entered this dap it's Lottery
203:18 - okay but now let's say that we do enter
203:21 - let's see what happens now
203:24 - so I'm going to hit confirm
203:27 - okay we'll speed this up I'll just put
203:29 - in high gas prices so I could speed it
203:31 - up
203:32 - and looks like it went through
203:35 - now we'll refresh the page and boom
203:39 - there you go all of the players are
203:41 - showing up and they are being rendered
203:44 - dynamically how freaking cool is that so
203:47 - with that said we're pretty much done
203:49 - with that part just remove the part
203:52 - where it says you know 0.015 eth and we
203:56 - just hard coded it to 0.1 eth so right
204:00 - here we could hard code it with 0.1 each
204:02 - because in this app the only pool like
204:06 - the only amount you can enter with the
204:07 - 0.1 each so we know guaranteed a 0.18 so
204:10 - I don't need to pull data dynamically I
204:12 - can just hard code 0.1 eth here and be
204:15 - accurate because you can't do more or
204:18 - less than that okay so with that said
204:20 - we're done with this part now we're on
204:22 - to the last and most exciting part which
204:24 - is we gotta pick our winner so let's go
204:28 - all right time to pick the winner so
204:32 - here we go
204:34 - let's go into our Lottery card here you
204:38 - can see I have my pick winner
204:40 - okay
204:41 - so we need to add functionality for this
204:43 - let's go into context JS first we're
204:46 - going to write our function pick winner
204:48 - that allows us to pick our winner let me
204:50 - put a little space after my comments
204:53 - because I'm a professional
204:55 - and then we're gonna say hey pick winner
204:58 - function is going to be an async
205:02 - all right so here basically what we're
205:05 - gonna do is I'm gonna write a simple try
205:07 - catch and obviously it's console logger
205:10 - error
205:11 - and then in my try catch I want to say
205:15 - I want to Define my transaction
205:18 - and I want to go into my lottery
205:21 - contract and I want to pick the winner
205:24 - okay and I need to send so to pick the
205:28 - winner I need to send the from address I
205:31 - need to send it the gas and all the
205:34 - other things that it needs okay so we're
205:35 - just going to pick 300 000 way gas price
205:37 - is going to be null and that's that's it
205:41 - okay pick winner is going to pick
205:43 - randomly and the reason why it needs the
205:46 - from address is remember it's checking
205:48 - for if you are the owner if you're not
205:52 - the owner then it won't work
205:56 - all right and then what we want to do is
206:00 - once we get the winner we want to update
206:02 - the lottery okay so we want to actually
206:05 - at this point we want to first update
206:07 - the lottery okay so we want to run our
206:09 - update Lottery function and that way it
206:11 - will automatically update all of the
206:13 - data on our Lottery card you know the
206:16 - current wallet address the current users
206:18 - Etc
206:19 - let's export this pick winner function
206:22 - so other files have access to it
206:24 - let's go to our Lottery card and here
206:28 - I'm going to get access to this okay so
206:31 - let's go ahead and destructure
206:34 - pick winner
206:35 - and then we're going to go ahead and do
206:37 - on click pick winner okay there we go so
206:40 - now we entered our on click we gave her
206:43 - on click the pick winner so let's go and
206:45 - now choose pick winner and we'll soon
206:48 - see what happens okay and let's also
206:51 - update the wallet address for our last
206:53 - winner so we're gonna you know create
206:56 - that function too at some point okay so
206:59 - let's go ahead and set the last winner
207:00 - to be whoever the last winner was so
207:02 - luckily in our blockchain we've already
207:04 - made that smart contract and so I'm
207:06 - going to go to my lottery contract and
207:09 - the methods and I'm going to extract my
207:11 - get winners all right so we are getting
207:15 - our we're calling our get winners method
207:19 - from our smart contract which gets us
207:22 - all of the winners and then from here
207:24 - what we want to do is we want to extract
207:26 - the last winner it's going to be an
207:27 - array so let's go ahead and console log
207:30 - this and we're gonna console log
207:34 - um our last winner
207:35 - so let's go ahead and do that
207:38 - and let's make it an array so let's go
207:40 - to on line 12 and let's make it a empty
207:43 - array by default
207:45 - all right now let's log in so now
207:47 - everything got updated right right when
207:48 - I logged in all the users got updated
207:51 - Etc
207:52 - and let's see if the last winner is
207:55 - showing up so I'm gonna go here
207:58 - we're gonna look at our console
208:01 - and you can see on the right hand side
208:03 - that
208:04 - right now it says length is zero
208:10 - okay
208:12 - so
208:14 - so right now we since we haven't picked
208:16 - a winner it's just saying zero but once
208:18 - we picked it pick a winner it's going to
208:19 - show an array of who won last okay so
208:24 - let's go ahead and do last winner here
208:26 - okay and I'm just gonna write last
208:28 - winner there okay
208:31 - and so
208:33 - yeah let's take a look at it and now we
208:35 - can see that it's showing us an array of
208:38 - people
208:39 - those are players right the array that
208:42 - you're seeing with the actual wallet
208:44 - addresses those are actual players but
208:46 - the one where you're seeing empty that's
208:48 - where it's a winner and it's because
208:50 - nobody has a one yet so we're gonna need
208:52 - to run our one pick winner function
208:55 - first and then it'll tell us
208:58 - so let's go ahead to our Lottery card
209:00 - and we're going to dynamically render
209:03 - the last winner as that note says
209:05 - because right now it's hard coded
209:07 - so let's go and grab our last winner so
209:09 - we're going to say on line 23
209:12 - actually first let's destructure our
209:15 - last winner so we have access to it
209:16 - we'll go in our context and we'll make
209:18 - sure we're exporting our last winner
209:19 - okay
209:21 - and then we want to do the following
209:24 - we want to say hey if the last winner is
209:26 - there then show all of this div and
209:28 - everything that's happening underneath
209:30 - okay so I'm going to say not last winner
209:34 - okay so if basically
209:37 - so if last one or does not exist then I
209:41 - want you to do the following
209:42 - if it doesn't exist then I want you to
209:45 - create a div with
209:48 - uh we're gonna say style.winner and here
209:51 - we're just gonna say no winner yet and
209:54 - then if it does exist then I'm going to
209:57 - do the whole winner thing
210:00 - Okay cool so let's see what's happening
210:04 - here so if there is a winner then I want
210:07 - you to if there's no winner then I don't
210:09 - wanna I want you to say no winner yet if
210:11 - there is a winner then I want you to
210:13 - show uh a address okay show that the
210:16 - Winner's address now here you can see it
210:19 - says no winners yet that is perfect okay
210:21 - that is what we want when we're doing
210:23 - this right now now I'm going to click
210:25 - pick winner
210:27 - and make sure you're the owner account
210:29 - when you say pick winner
210:32 - and then I want you to go ahead and hit
210:35 - confirm
210:37 - okay
210:39 - and let's see we're still waiting let's
210:42 - see let's speed it up for pick winner
210:44 - I'm gonna put High money into it
210:46 - speeding and speeding it up ah it failed
210:49 - so let's see why it happened ah because
210:52 - I was not the owner right that's why it
210:54 - failed now I'm the owner now let's pick
210:58 - and let's see what happens
211:00 - so I'm going to hit confirm here
211:02 - and then we're gonna see if we can speed
211:05 - up the contract addresses let's speed
211:07 - them up let's put it on high perfect
211:09 - Boom the winner is picked let's go and
211:13 - now you can see user address is empty
211:15 - because new the player players are now
211:19 - wiped out because the last lottery is
211:22 - over right now we're in a new lotteries
211:24 - that makes sense why I got wiped out now
211:26 - for last winners it shows us a
211:28 - hard-coded thing it's saying the Pod is
211:30 - zero so that's good okay lottery number
211:33 - incremented by one however our last
211:35 - winner okay it says no winner yet
211:38 - sorry actually it says we have 0x123
211:42 - blah blah blah so it's not showing us
211:45 - who the actual last winner was we need
211:47 - to update that because we have left it
211:49 - hard coded remember
211:51 - so we need to go and fix that on line 29
211:53 - okay we're gonna take that wallet
211:55 - address and we're going to replace it
211:58 - with the actual winner so
212:03 - yep okay
212:06 - there we go that's our last winner we're
212:09 - exporting our last winner as well now
212:11 - let's go here
212:12 - okay we have access to our last winner
212:14 - so all I'm going to do is I'm going to
212:16 - replace all of that and I'm going to say
212:18 - last winner
212:20 - okay and it says address match is not a
212:22 - function
212:23 - okay so since it's an array
212:26 - we're gonna go ahead and say last winner
212:29 - and I'm going to get the last item from
212:32 - that array okay so all I'm doing here is
212:34 - I'm getting the last item from that
212:37 - array so let's say I have 10 winners
212:40 - well since I want to get the most recent
212:42 - winner I'm going to grab the last
212:45 - element out of that array okay and to
212:47 - just kind of visually
212:48 - see it for yourself it's like if I have
212:51 - David Kevin
212:53 - and if I want to get the last winner
212:55 - here
212:57 - well I want to be able to do you know
212:59 - let's say that this is called
213:01 - winners
213:03 - I want to be able to do winners
213:05 - and get me cozy so I want to do winners
213:09 - of two okay in other words I want to do
213:12 - winners of dot length because uh dot
213:16 - length and actually I want to do length
213:17 - minus one right because that'll actually
213:21 - get me the last possible item so if I do
213:25 - winners.length I get three I subtract 1
213:27 - I get two this whole thing turns to two
213:30 - winners of two is cozy okay since we
213:33 - start at zero one two yeah okay
213:38 - so I'm gonna write that then let's go
213:40 - ahead and do minus one
213:42 - okay great
213:44 - now let's connect wallet and there we go
213:48 - our last winner the actual factual
213:52 - person now one is now showing up how
213:56 - beautiful is that let's click enter to
213:59 - enter the lottery so now we're basically
214:01 - doing the last final demo run and let's
214:03 - test if this whole thing works okay
214:06 - let's click enter
214:11 - all right I'm gonna speed it up speed it
214:14 - up speed it up speed it up there we go
214:16 - okay so now it looks like I have entered
214:18 - successfully it did cost me some robston
214:21 - to do that because I pulled the money
214:22 - let's refresh and you could see 0.1
214:25 - eighth is there and you can see the new
214:27 - user is showing up there at the bottom
214:30 - beautiful then let's go ahead into our
214:33 - metamask I'm going to switch my account
214:36 - to a different account and inside of
214:40 - this account I will hit enter
214:42 - okay let's go ahead and hit confirm
214:45 - all right and once I hit confirm here
214:47 - let's wait for it we'll speed it up okay
214:50 - let's speed it up speed it up and then
214:51 - we'll hit save and it looks like I have
214:54 - entered with that one as well so let's
214:55 - refresh the pool size the pot size is
214:59 - 0.2 each
215:01 - both of the users that are current
215:04 - players are showing up as players and
215:08 - then we got our last winner showing up
215:10 - as well so this is amazing so far you
215:13 - guys now we have to switch to the owner
215:15 - of the contract smart contract address
215:17 - and then we gotta go and pick our win
215:20 - okay once you are the owner and then you
215:23 - go ahead and pick winner now we'll just
215:26 - wait and wait for that bad boy to speed
215:28 - up okay let's pick the high highest gas
215:31 - price possible speed it up speed it up
215:33 - speed it up speed it up
215:35 - and let's see what happens boom look at
215:38 - that right all the players got wiped
215:41 - because the lottery is successfully over
215:43 - the number for the lottery ID at the top
215:46 - incremented automatically the last
215:49 - winner was updated to whoever won and
215:52 - always remember whenever the owner jumps
215:55 - into the lottery I mean the chances of
215:57 - the owner winning are massive yeah the
216:00 - game is rigged so be careful letting the
216:03 - owner jump into the lottery
216:05 - all right with that said I hope that you
216:09 - enjoyed this so very much as much as I
216:12 - did make sure if you did Smash that like
216:15 - button subscribe to the channel if you
216:17 - haven't already and with that said I
216:19 - hope you enjoyed it put on your
216:20 - portfolio show it off to people and good
216:23 - luck in your web 3 Journey this is qazi
216:25 - I love your beautiful face and as always
216:27 - I'll see you in the next video we're
216:31 - gonna be building the venmo Clone with
216:35 - solidity and infuria this is going to be
216:38 - a very powerful dab that you're going to
216:40 - learn how to build from scratch we're
216:42 - going to be coding up the react part
216:43 - along with the smart contract and the
216:46 - blockchain part there are a lot of
216:47 - Concepts you're going to master as a
216:49 - result of this from blockchain Concepts
216:51 - to programming Concepts but more
216:54 - importantly I think you're gonna have a
216:55 - lot of fun and you're gonna learn that
216:57 - building blockchain apps don't have to
216:59 - be a painful experience they can
217:00 - actually be quite a pleasant experience
217:02 - so while my fire is burning behind me
217:05 - let's have a Fireside app building
217:08 - session with that said smash that like
217:10 - button turn it blue or white depending
217:12 - on if you're in the light theme or the
217:14 - Dark theme on YouTube subscribe to the
217:16 - channel because this is where we help
217:17 - you become a developer and a web3
217:19 - developer and let's get straight into
217:22 - the video step number Uno which is we're
217:25 - going to sign up on infuria it is
217:28 - completely free it is a RPC node
217:31 - provider and it will make your life so
217:33 - easy okay so that's what we're gonna use
217:35 - when we're building our dap so go ahead
217:39 - to the link below that we've provided
217:41 - for you okay use that special link that
217:43 - way we'll know that you're coming from
217:45 - this video it will be helpful for infuro
217:48 - to know this
217:49 - um and yeah just click the link in the
217:52 - description below okay it's going to be
217:53 - infuro dot IO whatever that's going to
217:55 - be the link click that below and go to
217:58 - this page right here hit sign up once
218:01 - you're on this page all right and then
218:03 - just create an account so I'm just going
218:05 - to create my account right here hit our
218:08 - resend emails it'll send you a
218:09 - confirmation go to your email address go
218:12 - ahead and confirm that bad boy once
218:14 - you're done it's going to send you to
218:16 - this page Pick Your Role so let's say
218:18 - you're an engineer okay slash developer
218:21 - solo freelance whatever and pick your
218:24 - category and then just hit next all
218:27 - right now you're going to create your
218:28 - first project so you're going to do web
218:29 - 3 API formerly ethereum and the last
218:33 - part you're going to do is my first
218:35 - project name it whatever you want I'm
218:36 - just calling it my first project okay
218:38 - all right so there you go now we don't
218:40 - need to touch this in here okay
218:41 - everything you can leave as is because
218:43 - we're going to use an extension later
218:45 - called truffle and that will allow us to
218:48 - interact with inferior and pull all of
218:51 - this information okay so there you go
218:53 - your project should be created in here
218:55 - my first project okay and that's
218:58 - effectively it okay so make sure you go
219:00 - ahead and do that and I'll see you in a
219:03 - second all right so here is the a demo
219:06 - of this app so take a look at it right I
219:09 - am here on my venmo clone the first
219:12 - thing I need to do is actually go ahead
219:13 - and connect my wallet so I'm just going
219:15 - to type in my password on metamask and
219:17 - log in once I am logged in I'll just hit
219:20 - I'll connect both of my you know any of
219:22 - one of my accounts I'll just start with
219:24 - the account one in this case once I'm in
219:26 - you could see on the left hand side that
219:29 - I have all these transactions going
219:31 - through and it's showing the notes as
219:33 - well so here what we're going to do is
219:35 - I'm logged in currently okay so you can
219:37 - see my metamask wallet and you can see
219:39 - that I'm connected okay and here's my
219:42 - other account so here's account two
219:44 - right and then here's my first account
219:46 - and I'll paste in the second account
219:48 - that I want to send my money to and I
219:51 - will drop a message okay you could send
219:53 - your ethereum to really anybody that you
219:56 - want but I'm just going to send it to
219:57 - this address I'm going to say here's
219:59 - some money now metamask opens up and it
220:01 - asks hey do you want to do this are you
220:03 - sure blah blah blah yes I'm sure I'm
220:05 - gonna put in my password all right it's
220:07 - telling us about the gas fees let's hit
220:09 - accept Okay it's doing a little loading
220:11 - all right blah blah blah contract
220:13 - interaction go down hit confirm and
220:16 - we'll wait a couple of seconds here okay
220:18 - let's wait and it says pending so I'll
220:20 - speed it up contract interaction okay
220:22 - we'll speed it up and boom it's done
220:25 - look at that on the left hand side it
220:27 - loaded right away it says here's some
220:29 - money and you can see it says four
220:31 - seconds ago that is beautiful okay and
220:35 - again now I can switch the account as
220:37 - well so I could go to a completely
220:38 - different account okay and I could send
220:41 - money to the other account so I can
220:43 - change accounts and send money to
220:45 - wherever I want okay so I'll refresh you
220:47 - can see that the account just changed
220:49 - over here okay it's a completely
220:50 - different account as you can see let's
220:52 - keep going I'll paste the account number
220:54 - and I'll say thanks for the money and
220:56 - I'll send some money in return okay
220:58 - thanking the person for sending me some
221:01 - money there we go and now we'll hit
221:03 - confirm and let's wait for it wait for
221:06 - it sending and I'll hit speed up
221:08 - contract interaction is done and look at
221:11 - that right away it shows up all the way
221:14 - at the bottom bottom right it says
221:16 - thanks for the money beautiful so there
221:18 - you go I hope that you're excited about
221:20 - this project this will be the venmo
221:22 - Clone that you will be building I hope
221:24 - you're excited it's going to be
221:25 - happening with solidity so with that
221:27 - said let's just rock and roll and right
221:29 - before we get started ladies and
221:30 - gentlemen I just want to give a huge
221:32 - shout out to this man right over here
221:34 - I'm new to the screen screen thing but
221:36 - JavaScript Mastery uh a lot of the smart
221:40 - contract part is from his video called
221:43 - Crypt uh where he built the
221:45 - portfolio so definitely check it out
221:48 - we'll Link in the description below uh
221:50 - it is an awesome resource and on top of
221:52 - that we built our own styling and
221:54 - everything and then converted it into
221:56 - this beautiful venmo app that you see in
221:58 - this video so with that said let's get
222:00 - back into the video shout out to JS
222:02 - Mastery all right now open up your
222:04 - command line and let's go ahead and what
222:08 - we're gonna do is I want you to just
222:10 - write npx clever programmer this is a
222:12 - clever programmer npm package that we
222:14 - have made and the benefit of this
222:16 - package is really that it actually gives
222:18 - you everything you need so we're giving
222:19 - away The Styling a bunch of the app
222:21 - assets and we just make the whole app
222:24 - really really simple for you all you
222:26 - have to do is just type in that command
222:28 - it will install it for you okay and once
222:32 - you're done installing it make sure that
222:34 - it's going to ask you hey which uh
222:37 - what's your email address just pop in
222:38 - your email address and then after that
222:41 - is going to ask you for your name and
222:43 - it's going to ask you for what project
222:45 - you would like to initialize so for
222:46 - example in this case we're building the
222:48 - venmo app so make sure to just
222:50 - initialize venmo it will initialize a
222:52 - whole bunch of helpful files for you so
222:55 - that we don't have to spend a bajillion
222:57 - years trying to build this app you know
222:59 - the styling will already be done we'll
223:01 - do the interesting more fun infuria
223:03 - slash web 3 solidity Parts okay is this
223:06 - really the focus of this video right so
223:09 - boom there we go it uh
223:12 - now it's installing it and setting it up
223:15 - on your computer it's getting the
223:16 - dependencies for you so this is the
223:18 - magic of when you set it up with npx
223:21 - clever programmer okay it's going to
223:22 - basically start the project and it's
223:26 - gonna automatically open it up for you
223:28 - okay if it's giving some kind of error
223:30 - or whatever just understand that all
223:31 - we've done is we've cloned the repo put
223:33 - on your computer so you could point and
223:35 - click and kind of go inside of it as
223:36 - well if you wanted to okay so let's go
223:39 - ahead and now see what is happening all
223:42 - right now that the project is opened up
223:44 - what I want you to do is just open up
223:45 - the terminal and I want you to type in
223:47 - yarn start that will install start your
223:50 - server okay that'll start your project
223:52 - now just go ahead and I want you to open
223:55 - up your localhost 3000 okay and you
223:57 - could put it on the side of your
223:58 - computer like this all right so on the
224:01 - left hand side your server is running on
224:03 - the right hand side your app should be
224:05 - up and running so that's where you
224:06 - should be at and let's go to index.js
224:09 - okay and you can also go into your
224:13 - app.js and you can see that this is a
224:15 - regular react file right pretty much
224:17 - vanilla
224:19 - except the only difference is really
224:21 - we've given you a lot of the styling all
224:22 - right so let's keep rocking and rolling
224:25 - here
224:26 - okay on the left hand side you will see
224:28 - in Source you have assets components and
224:31 - styles and normally you won't have
224:33 - assets or components like that's
224:35 - something we've created for you and
224:36 - given you and in Styles we've created
224:38 - extra styling for you as well okay so
224:40 - that's the structure so we're going to
224:42 - go into our app.js and we're going to
224:44 - delete everything in anything that's
224:47 - inside of that class name app div okay
224:50 - remove go ahead and remove everything so
224:52 - now your app should be this blank canvas
224:54 - we're going to get rid of the logo.svg
224:57 - as well we don't need that let's refresh
225:00 - and again your app should just be not
225:02 - giving any errors but also not really
225:03 - showing you anything okay now inside of
225:06 - that Dave we're gonna basically just put
225:08 - in hello world and once you do that that
225:11 - is enough for this part we're already
225:13 - ready to get started with the web 3 and
225:16 - truffle and inferior part I hope you're
225:18 - excited let's just get to it alright so
225:20 - here we are
225:22 - now we're going to be getting on to the
225:24 - Truffle part okay we're going to be
225:25 - setting truffle up and we're going to be
225:27 - setting in Fiora up so let's go here now
225:29 - in the main directory what I want you to
225:32 - do is create a new folder
225:34 - okay and we're going to call it back end
225:36 - AKA blockchain part so in this case our
225:39 - back end part is really going to be our
225:40 - blockchain part AKA our smart contract
225:43 - part okay so let's go into our back end
225:45 - but what's cool about this when you're
225:47 - in the blockchain world is like you
225:49 - don't really need to deal with Firebase
225:51 - or
225:53 - uh it's funny I'm saying Firebase and a
225:55 - fire behind me but like you know your
225:56 - back end isn't the traditional mongodb
225:59 - or Firebase your back end is the
226:01 - blockchain okay that's where you're
226:03 - storing your your data majority of the
226:05 - times all right let's go ahead okay so
226:08 - let's go ahead and now I want you to
226:09 - type in truffle init okay
226:13 - um and before we actually do that do
226:15 - that let's go ahead and make sure we're
226:17 - in our C back end so go ahead and do CD
226:19 - back end for me once you're in there I
226:22 - want you to type in truffle init by the
226:24 - way quick thing if you don't have
226:26 - truffle installed put in this Command
226:28 - right here and that will install truffle
226:30 - for you and if that doesn't work Google
226:32 - it with that said let's keep on going
226:34 - okay so after you do truffle init it
226:37 - will pretty much set this up for you
226:39 - okay and kind of
226:40 - initialize the repository for you on the
226:43 - left hand side a couple of things should
226:45 - happen okay you should have this
226:47 - contracts part the migrations part and
226:50 - test part get built out and truffle
226:53 - config should start showing up so before
226:55 - your back end should have been empty but
226:57 - after doing this you should have these
226:59 - three folders plus that one file ready
227:01 - to go okay now inside of your contracts
227:04 - you have something called migrations
227:05 - okay so that's what's going to be there
227:07 - and then also you have a migration
227:10 - folder that will have your initial
227:12 - migration okay this is what you're going
227:14 - to be using pretty much to deploy your
227:16 - contracts afterwards as well so all of
227:19 - this information is pretty important now
227:21 - inside of your contracts you're going to
227:22 - create a new file and that's where we're
227:24 - actually going to create our smart
227:26 - contract okay
227:28 - so let's go ahead and call it
227:30 - transactions.soul dot Sol okay Sol is
227:33 - short for solidity and then we're just
227:36 - going to put in a little license here
227:37 - and we're going to say spdx okay Dash
227:41 - license and since this one is not
227:44 - licensed the identifier we're going to
227:46 - pass it is unlicensed okay and then that
227:48 - warning at the top you know is basically
227:51 - taken care of so you could just say hey
227:53 - it's unlicensed that's totally fine all
227:55 - right next up we're gonna go ahead and
227:57 - make a contract and we're going to call
227:59 - it transactions all right now that we
228:01 - got our transactions contract just we're
228:04 - just going to leave it at the blank
228:06 - right now okay and then what we're going
228:08 - to do is here's what I want you to do
228:09 - okay I want you to go ahead and get this
228:13 - extension truffle okay so at the bottom
228:15 - left you see that I have this truffle
228:17 - and extension okay right over here
228:20 - okay that's the extension that I want
228:22 - you to get right so what you're going to
228:24 - do is go to your extensions you can also
228:25 - do command shift X or Ctrl shift X go
228:28 - into your extensions type in truffle and
228:30 - just go ahead and install truffle okay
228:33 - truffle for vs code this one right here
228:36 - and then once you have it installed go
228:38 - to your truffle extension okay and it's
228:41 - gonna make your life really easy when
228:43 - you're developing this is really nice
228:44 - and what we're going to do is we're
228:46 - going to go ahead and hit connect to
228:47 - network and then it's going to ask you
228:48 - do you want to use the ganache service
228:50 - or you want to use inferior service or
228:52 - other the one we want to use is we want
228:54 - to use the inferior service right over
228:57 - here okay so go ahead choose inferior
229:00 - and then I want you to go ahead and
229:01 - choose sign in so let's go ahead click
229:04 - sign in and then just simply sign into
229:07 - your inferior account okay if you don't
229:09 - have an inferior account just make a new
229:11 - inferior account because you're going to
229:12 - need that for this app and excuse my dog
229:16 - she's a little crazy bulldog and she's
229:18 - wild so she'll be barking in the back
229:20 - but we'll ignore her all right here you
229:23 - have
229:24 - um this little air thing showing up you
229:26 - could ignore that it's not important
229:27 - here okay it pops up all the time but it
229:29 - doesn't really matter all right all this
229:32 - stuff pops up here and all I want you to
229:34 - do now is uh simply just go scroll to
229:37 - the bottom and hit authorize okay now
229:40 - that that's done it says you are signed
229:41 - in you can now close this page so simply
229:43 - go ahead close this page okay and now at
229:46 - the top here it's going to ask you to
229:48 - put in the project name okay right right
229:51 - over Yonder boom right there okay so go
229:54 - ahead put in your project names I'm
229:57 - gonna just simply say
229:59 - uh venmo clone or whatever okay so let's
230:02 - go ahead and write that in venmo Clone
230:06 - all right and then hit enter and then
230:09 - we're gonna just make this project
230:10 - public because there's no reason to make
230:11 - it private okay and now you can see on
230:14 - the left hand side we can see inferior
230:15 - service showing up and now I'm going to
230:17 - go to inferior.io and on here let's go
230:20 - ahead and click uh start innovating
230:23 - button okay so go ahead and click that
230:25 - and right when we click it you could see
230:27 - that we see that there's event McClone
230:29 - okay this is the one that we created
230:31 - from our command line little tool thing
230:33 - that popped up over here and now it says
230:35 - this project is active it was created
230:37 - today and boom okay this is good to go
230:41 - right now it should have zero requests
230:42 - okay and on the left hand side you could
230:44 - see that if you click your inferior
230:46 - service and then McClone you can see all
230:48 - the networks you have access to so
230:49 - mainnet you have access to quarterly
230:51 - rain can be rosben and then Layer Two
230:53 - you have access to all these other Main
230:54 - and test Nets okay so with that said
230:57 - you've done a wonderful job now we're
230:59 - gonna move on and we're gonna start
231:01 - working on the smart contract so let's
231:04 - get to that in the next part all right
231:07 - right here we go now we're on the fun
231:09 - part we're going to be making our own
231:11 - contract okay so let me take the photo
231:13 - away and I'll show you why I have that
231:15 - photo in just a second but let's go
231:17 - ahead and work on our smart contract
231:20 - here okay so let's go inside of
231:21 - transactions and
231:24 - I'm going to add in a very specific
231:28 - version of solidity here so we're going
231:29 - to go ahead and choose a specific
231:32 - version of solidity so I'm going to put
231:33 - a carrot and do
231:35 - 0.8.15 okay that's the version I want
231:38 - you to use and usually the first line of
231:41 - code in any solidity app is usually that
231:43 - pragma solidity blah blah put your
231:45 - version okay so go ahead and do that
231:46 - then inside of my contract I want to do
231:49 - a un-256 and I want to have transaction
231:52 - count this variable here will be keeping
231:55 - track of how many total transactions we
231:57 - have at any given time all right let's
232:00 - keep going now just so you understand
232:02 - what I mean by this okay I'm going to
232:03 - bring this into the view so remember in
232:06 - our finished version of the app we'll
232:08 - have a transaction or a transfer and
232:11 - then we'll have multiple transactions so
232:14 - that transaction count will be keeping
232:16 - track of how many times the user for
232:18 - example sends a particular like sends
232:21 - transactions right so if we've sent five
232:23 - or ten transactions and all users have
232:26 - sent 10 transactions and the transaction
232:28 - count will be 10. so just keeping track
232:31 - Global track of the count of
232:33 - transactions okay the next step what
232:35 - we're going to do is we're going to
232:36 - create an event that will be fired when
232:39 - a transaction is made okay so for
232:41 - example we're going to say event and I'm
232:43 - going to say transfer and here's what I
232:46 - want transfer to do so I want to show
232:48 - who the transfer is from okay uh the
232:51 - receiver okay who received the
232:53 - transaction the amount of the
232:55 - transaction and the message of the
232:57 - transaction and just you can understand
232:59 - what this means from is going to be this
233:02 - address of the user that's logged in
233:04 - okay receiver is going to be who you're
233:06 - sending it to amount is going to be the
233:10 - amount that you want to send and then
233:12 - the message is going to be this right
233:14 - here okay but now when you're using uh
233:17 - languages like solidity or whatever you
233:18 - have to Define data types so I know that
233:21 - this is a string data type so I'm going
233:22 - to say string
233:24 - the amount I know is going to be an
233:27 - integer okay so I'm going to go ahead
233:29 - and say int all right now if you have a
233:31 - little bit of programming experience you
233:33 - might be like wait a minute qazi how the
233:34 - heck is a Mount uh int a uint by the way
233:38 - is unsigned integer meaning it could be
233:40 - negative and you might be like wait how
233:42 - the heck is an integer if this is 0.002
233:45 - under the hood everything is being
233:47 - calculated in the smallest denominator
233:50 - in ethereum which is way so away is much
233:54 - smaller number so under the hood it's
233:56 - not actually
233:58 - um in decimals it's just showing you
234:01 - here in decimals because this is not in
234:03 - way okay so uh there's actually no float
234:07 - type in um solidity which is pretty
234:10 - interesting but yeah all right and then
234:13 - we're good with adding all of that stuff
234:15 - and the last thing we're going to add in
234:17 - our event actually is the time stamp so
234:20 - that thing is the thing that's not
234:23 - visible right now so for example
234:25 - timestamp isn't showing up in anywhere
234:28 - uh in any of those okay so time stamp
234:31 - what we're doing is under the hood
234:33 - right when the user hits send we're
234:36 - gonna log that time so let's just say
234:38 - it's like you know it's 12 33 a.m and
234:42 - this dude is sending some money to his
234:44 - friend
234:46 - um for cleaning what kind of friend does
234:49 - he have that cleans at 12 33 a.m I don't
234:52 - know he's sending the friend some money
234:54 - for some okay we don't know what it
234:56 - is uh he maybe maybe gave him some food
234:59 - and now he's he's paying his friend at
235:02 - 12 33 am and that time stamp we're gonna
235:05 - log
235:06 - and it's gonna get log low key under the
235:08 - hood and we're gonna pop that in right
235:10 - there okay that is going to be attached
235:12 - to right when the user clicks send okay
235:15 - just to kind of give you a little
235:16 - insight onto what we're doing here all
235:17 - right now the next thing we're gonna do
235:19 - is uh we're gonna create a struct
235:22 - okay of the transaction that we will be
235:25 - storing on chain okay and um structs as
235:28 - kind of an ugly name and it makes things
235:31 - sound confusing but it's really just a
235:33 - structure or like a data type here and
235:35 - so we're just going to say hey when you
235:37 - see a transaction or a transfer this is
235:40 - the type of stuff it's going to have
235:42 - inside of it okay so expect it to have a
235:45 - sender expect it to have a receiver
235:47 - expect it to have an amount you know
235:50 - expected to have a message and expect it
235:53 - to have a time stamp okay that's all
235:55 - we're saying here Saul the rest of what
235:58 - we're saying here is about these data
236:01 - types okay so the main thing I want you
236:03 - to notice is sender receiver amount
236:05 - message timestamp those are all the
236:07 - things that are happening here okay now
236:09 - what what is this other stuff addresses
236:12 - a specific data type inside of solidity
236:15 - when for wallets it understands it when
236:18 - you say address okay same thing for the
236:20 - receiver it's not just a string so it
236:23 - understands how dresses work underneath
236:25 - the hood all right and then amount is in
236:28 - int
236:29 - string message is a string and then time
236:32 - stamp we're gonna make it a uh in 256.
236:35 - now you might be wondering uh why is
236:39 - this you in 256 and why is this int just
236:42 - by itself
236:43 - if you don't say 256 and you just use
236:46 - int like this
236:48 - by default it's actually in 256 okay so
236:52 - both of these are both of these here are
236:54 - actually in 256. okay so that's really
236:56 - the one thing I want to clarify here
236:57 - okay beautiful so now that we're done
236:59 - with that now we're going to create an
237:01 - array of those transactions okay so the
237:05 - strings are the structure we make we're
237:07 - going to make an array out of that so
237:09 - let's go ahead I'm going to say transfer
237:10 - struct and let's go ahead and rename it
237:12 - and call it transfer struct the reason
237:14 - why we're going to call it that is such
237:16 - a very clear that it is a struct okay
237:20 - and then when you get better as a
237:22 - developer you could just call it
237:23 - transfer or you could call it
237:25 - transaction okay that should be fine
237:30 - now we're going to create a variable
237:32 - called transactions and here's the
237:34 - interesting part about this okay we're
237:36 - declaring a variable called transactions
237:38 - but we're saying that this variable here
237:40 - is going to be an array of transfer
237:44 - structs meaning it's probably going to
237:47 - look like an array okay an array and
237:50 - it's going to contain these transfer
237:52 - struct objects so it's going to
237:54 - basically contain you know if you're a
237:56 - JavaScript or react person imagine this
237:58 - so imagine
237:59 - um I have my receiver and the receiver
238:01 - is zero X blah blah blah I have my
238:04 - sender Xerox blah blah I have my uh not
238:09 - sender I believe it's from
238:11 - one of those and then I have my uh let's
238:15 - say my message and it's hello
238:19 - okay
238:21 - and then
238:23 - you know and that's just like one
238:25 - transfer struck let's say okay and I
238:27 - know the transfer struct has some more
238:29 - stuff but let's just say for
238:30 - simplicity's sake this is one transfer
238:32 - struct and then there's more transfer
238:34 - structs so in a classic JavaScript
238:37 - scenario imagine that you really have an
238:41 - array of objects okay and more
238:44 - specifically the objects will represent
238:47 - the transfer struct meaning that
238:49 - whatever Keys the transfer struct has
238:51 - these objects will have and if you don't
238:53 - put that in if you have an object that
238:56 - doesn't have those keys it'll error out
238:58 - okay so uh there's a lot of type safety
239:01 - into the code and that way your code
239:04 - will have less bugs and errors but at
239:06 - the cost of like really being very
239:08 - verbose and explicit
239:10 - um up front cool okay so let's keep
239:14 - going now what we're going to do is
239:16 - we're going to make a function uh to add
239:18 - a transaction to the array to the
239:21 - blockchain okay with our struct
239:23 - so let's create this function and we're
239:25 - going to call it add to blockchain but
239:29 - really what this function is doing is
239:30 - adding you know essentially it's adding
239:32 - a transaction to the blockchain that's
239:35 - what we're doing
239:42 - we're going to create a so the variable
239:46 - here that we're creating is called
239:47 - receiver
239:49 - all right so here the actual variable
239:52 - here is receiver okay that's the main
239:54 - thing these two are these two are think
239:57 - of them like data types okay address is
240:00 - a data type and payable is a special
240:02 - keyword that makes it so you could
240:04 - actually pay the receiver that's it
240:08 - okay let's keep going so address payable
240:10 - receiver then we're going to have an
240:12 - amount we're going to have our message
240:16 - as well okay so but for this one we're
240:19 - going to say string memory message don't
240:21 - ask me why you have to say memory if you
240:23 - don't write memory you'll get an error
240:25 - so just write memory string memory
240:28 - message okay
240:31 - all right then all we want to do is we
240:34 - want to say public meaning that even
240:37 - outside of the smart contract you should
240:39 - be able to actually call this function
240:41 - so we have access to it all right and um
240:45 - payable keyword means okay that the
240:48 - receiver is actually able to receive
240:50 - ether from the sender okay so something
240:52 - I said earlier but this is just to make
240:55 - it really verbose and clear for you and
240:57 - copilot wants to do a lot of stuff but
240:59 - we're going to skip that now here's what
241:01 - happens in this function when we are in
241:03 - this function what we want to do is when
241:05 - a user calls this function meaning
241:07 - you're calling your function add
241:09 - transaction right well the first thing
241:11 - you want to do is we want to increment
241:12 - the transaction count by one right that
241:14 - should be obvious it's like I'm adding a
241:16 - new transaction to the blockchain
241:17 - increment the the count of and the
241:21 - number of transactions okay and then
241:23 - what I want you to do is take the
241:25 - transactions array that I created
241:26 - earlier push a new uh transaction to it
241:31 - okay and all we're all we're pushing to
241:35 - that array is literally from my
241:37 - JavaScript World okay my JavaScript
241:39 - peeps you're literally just sending an
241:42 - object okay this object is going to be
241:44 - like uh
241:45 - sender Xerox something uh you know
241:49 - receiver 0x something message hello
241:53 - whatever okay timestamp timestamp some
241:57 - Unix
241:58 - Unix timestamp okay so that's all you're
242:02 - sending okay so this over here uh is a
242:06 - Constructor transfer structure is a
242:08 - Constructor and once you pass it all of
242:11 - this information it's going to literally
242:13 - make an object for you at the end of the
242:15 - day that's all it's doing and message
242:17 - does tender just in case you're
242:19 - wondering what it is you know when
242:21 - you're signing with metamask
242:24 - so like when you're doing this thing
242:26 - with metamask right
242:28 - where you're literally signing
242:32 - yeah
242:34 - that is what refers to the message dot
242:37 - sender okay so the dude that's logged in
242:39 - with metamask and hitting send and then
242:42 - hitting confirm it's pulling that dude's
242:45 - account address okay from message.sender
242:48 - now if you're wondering how it's pulling
242:50 - the receiver it's pulling okay for so
242:54 - this is the sender and then this guy who
242:56 - we're sending it to is the receiver okay
242:59 - the amount that we have okay wherever
243:02 - the amount is let's just set that set
243:03 - amount that's going to be the amount
243:05 - that it's pulling and then the message
243:07 - is whatever message you wrote in and the
243:10 - timestamp is like the exact moment you
243:13 - added it to the blockchain okay so
243:16 - that's why we're getting it from the
243:17 - special keyword block and this MSG is
243:21 - also a special keyword in solidity so
243:23 - both of these block and MSG is a special
243:26 - keyword okay my big head is blocking
243:29 - some of that stuff so there you go
243:31 - that's what I was showing you like that
243:32 - little transaction there is the amount
243:35 - okay now I'm going to hide it again
243:37 - because I like myself uh being huge like
243:41 - a big giant on the screen so I'm gonna
243:43 - make this small and I will hide it away
243:46 - from you and I'll just bring this back
243:48 - for now and let's keep going okay all
243:51 - right and then next up what we're gonna
243:52 - do is we're gonna omit the event we
243:55 - actually created earlier so we want to
243:58 - emit the transfer event we created okay
244:01 - so let's go ahead and just omit that
244:03 - event we're going to give it the sender
244:05 - receiver amount message block timestamp
244:07 - and all that good stuff it's the
244:09 - equivalent of doing the you know a
244:14 - console log let's say all right so let's
244:16 - keep going over here and we got our
244:19 - amount we got all of that okay I'm just
244:21 - gonna check if I'm on the right solidity
244:22 - version I am yep so there you go that's
244:25 - your emit event that you're gonna have
244:27 - there okay now we're gonna write a
244:29 - function to actually get all of the
244:31 - transactions from the blockchain so
244:34 - let's go ahead and do that so I'm going
244:35 - to call this function get all
244:37 - transactions and I'm going to give it a
244:39 - public View and we're going to return a
244:42 - transfer struct that's the data type
244:43 - we're going to return and we're going to
244:45 - actually return so think of like we're
244:47 - going to return an array of objects and
244:49 - the array of objects is going to be of
244:51 - type transfers or transactions okay and
244:55 - we're just going to put memory there
244:56 - because if you don't put that you get an
244:57 - error so just put it okay and then we're
245:00 - going to return transactions at the end
245:02 - of the day and um yep and then we're
245:04 - gonna make another function and this
245:06 - function is going to get the number of
245:07 - transactions and we'll say get
245:10 - transaction count okay and uh again it's
245:13 - going to be a public function and it's a
245:16 - view so for review we're telling we're
245:19 - telling the blockchain hey there's no
245:20 - transaction happening here we're not
245:21 - going to be changing the data so you're
245:22 - not gonna don't you don't need to charge
245:24 - us here for anything it's just going to
245:26 - be a view and then public is so you can
245:29 - access it from outside returns is what
245:31 - data type and what specific things are
245:33 - we going to return so we're going to
245:35 - return an integer and then I can just go
245:37 - ahead and say return transaction count
245:39 - and that's about it so
245:42 - yeah and then lastly what I want to you
245:45 - know just explain really is the view
245:47 - keyword right that basically means that
245:50 - the function can only be used to view
245:53 - the data all right that's that's all
245:55 - that means all right and that means that
245:59 - no ether is needed to run this function
246:01 - okay that's something that I want to
246:03 - highlight to you
246:05 - with that said we are done with the
246:08 - contract part now
246:11 - we just sit back
246:13 - we watch the firework and it's time to
246:16 - deploy the contract let's go alright now
246:19 - that you've made the contract it's time
246:21 - to deploy your contract okay it would be
246:24 - kind of like if you had all this wood
246:26 - behind you but you never lit it on fire
246:29 - okay if you didn't do that what's the
246:31 - point of having a fireplace it's useless
246:33 - so when you have a contract there's no
246:36 - point to just having a contract it's
246:38 - like having a bunch of wood we've got to
246:40 - deploy it okay we gotta at the fire we
246:42 - gotta turn it into a fireplace and
246:43 - that's what makes it usable by everybody
246:46 - in the world including yourself so let's
246:48 - go and do that now so what I'm gonna do
246:50 - the first thing inside of contracts you
246:52 - see transaction here I'm gonna hover
246:54 - over it and I'm gonna right click okay
246:57 - I'm gonna right click and what that will
247:00 - allow me to do all right so now what
247:02 - we're gonna actually do is inside of our
247:04 - migrations folder we're going to create
247:06 - a new file okay so let's go ahead
247:10 - and let's create a new file and before
247:13 - we do that go into your one underscore
247:16 - initial migration copy everything inside
247:19 - of that and then I want you to go ahead
247:21 - make a new file 2004 deploy.js paste all
247:25 - of that and everywhere it says
247:27 - migrations we're going to change that
247:29 - with
247:30 - transactions okay so you could also do
247:33 - right click and rename all occurrences
247:36 - or you can just do this in this fancy
247:37 - way or you could use the shortcut
247:39 - command D which on Windows I believe
247:41 - might be control d
247:43 - that right there okay that should allow
247:46 - you to do that multi-select on
247:49 - everything let's keep going and now what
247:51 - we're going to do is we're going to
247:53 - right click on our transactions right
247:57 - here
247:58 - okay and I'm going to choose build
248:01 - contracts now if you're wondering how do
248:04 - I have this build contracts right here
248:07 - it's only possible you guys if you have
248:10 - this truffle extension okay if you don't
248:13 - have the Truffle extension okay this
248:15 - extension right over here if you don't
248:17 - have that the build contract right here
248:20 - will not show up okay so make sure you
248:22 - have it okay so we're gonna hit build
248:24 - contracts now my contract has started
248:26 - building
248:27 - so we'll keep going through it okay it's
248:30 - going to take a second to build and
248:32 - here's what happened okay I just ran
248:35 - into a little bit of an error let's go
248:37 - ahead and I'm going to choose truffle
248:40 - for vs code so go click output and then
248:43 - here choose truffle for vs code so we
248:45 - can actually see what the error is okay
248:46 - and here I'm checking to find we're
248:48 - checking to find what the error is and
248:50 - it says hey there might be something you
248:52 - need to fix in truffle config so I'll
248:54 - show you what we need to do so first
248:56 - choose truffle for vs code scroll down
248:59 - until you can see the error and you can
249:01 - see the error says truffle is currently
249:02 - using soul
249:04 - uh solidity version
249:07 - 0.8.11 and it does not match what we
249:10 - have inside of our file right there so
249:14 - let's go ahead
249:16 - to our truffle
249:18 - config.js right here and fix this
249:21 - problem
249:22 - okay so let's go truffle config and
249:25 - scroll down to line 84-ish and where it
249:28 - says version you see it says
249:31 - 0.8.11 go ahead and change that to
249:35 - 0.8.15 okay so we're going to go choose
249:38 - just put a 5 there let's hit save okay
249:42 - and now let's try to deploy this again
249:45 - and see if it works
249:48 - okay it's going through
249:50 - and let's see okay it looks like we have
249:53 - a build folder now that's starting to
249:55 - show stuff so that's a really good sign
249:57 - and there we go you could see it says
249:59 - compiled successfully using Soul version
250:02 - 0.8.15 okay so our contract is now
250:06 - deploy uh sorry it's built now all we
250:09 - need to do is let's go ahead and right
250:11 - click on transactions and this time
250:13 - we're going to choose deploy contracts
250:16 - so let's choose that okay now here I
250:21 - make an error okay so I choose the
250:25 - robsten network but I don't want you to
250:27 - choose the Robson Network do not choose
250:29 - this choose Gorly okay so I want you to
250:32 - choose the gwarly network that's the one
250:38 - okay that's the one I want you to pick
250:40 - don't pick Robson just want to make that
250:44 - super super clear so in your case you
250:47 - should be picking you should be picking
250:49 - that guy right over Derek Worley once
250:52 - you click it it's going to ask you to
250:54 - paste your mnemonic now remember earlier
250:56 - in the video when you made your wallet
250:59 - with metamask that's when it gives your
251:01 - mnemonic it tells you to write it down
251:03 - so grab that mnemonic that it gave you
251:06 - and I want you to bring that here and
251:08 - paste it here okay so we're going to
251:10 - paste our mnemonic now and it's going to
251:12 - ask you to save it now you can save it
251:14 - anywhere you want okay
251:16 - so I'll just go to my own folder here
251:19 - and I'm just going to hit key dot end
251:22 - and there we go we've saved it and at
251:24 - the bottom you should see it's saying
251:26 - deploying contracts okay and your
251:29 - project name is going to be different
251:30 - than mine for you should say deploying
251:32 - contracts to venmo clone okay I just
251:35 - have to create another project because I
251:36 - was getting some errors or whatever but
251:38 - hopefully you won't be getting errors if
251:41 - you are also getting the same errors
251:43 - then it might actually help you to
251:46 - create a new project okay so just a
251:47 - little note for you and pretty soon this
251:51 - um deploying will be completed and it is
251:54 - okay so now that the deployment is
251:55 - completed it gives you this very
251:58 - important contract address you're going
252:01 - to need access to this so hover on to
252:03 - this and I want you to copy it okay this
252:07 - is a very important contract address
252:09 - and then I want you to go ahead and grab
252:13 - this contract address okay
252:15 - so let's go ahead and grab this contract
252:18 - address and what we're going to do is
252:20 - we're going to make in our source folder
252:23 - we're gonna make a new
252:25 - folder and we're going to call it
252:29 - um we're gonna not a new file we're
252:31 - gonna call it make a new folder we'll
252:32 - call it utils
252:34 - okay and inside of utils I'm going to
252:36 - make constants and inside of there I'm
252:39 - going to save
252:41 - a new constant constant file it's going
252:43 - to be called constance.js
252:46 - and inside of this file we're going to
252:48 - make a contract address and we're going
252:50 - to paste the contract address in front
252:51 - of it now a little note for you just put
252:54 - const here I forgot to put that okay so
252:57 - just put const contract address and
253:00 - we'll come back to this file and we'll
253:02 - fill it fill it out completely okay
253:04 - all right so with that said right now
253:07 - you're doing great your contract is
253:09 - deployed so congratulations because
253:12 - that's a huge part of the process and at
253:15 - this point we're pretty much done with
253:17 - the smart contract blockchain part
253:19 - pretty much completely and now we're
253:22 - gonna do the fun front-end part where
253:24 - we're going to connect to this back end
253:26 - and then now we're going to really make
253:27 - the app sing so I hope you're excited
253:29 - I'll see you in a second all right now
253:30 - what we're going to be building is going
253:32 - to be the nav bar okay so it's going to
253:35 - be the nav bar we're going to build for
253:36 - our project this is what it's going to
253:38 - look like so boom right there okay
253:41 - that's what it's going to look like
253:42 - right there
253:43 - so that's the target that's what we're
253:46 - building remember it's not built yet
253:47 - okay it's just a photo so I'm going to
253:50 - leave that here as a target of what
253:53 - we're building
253:54 - or actually let's leave that here so
253:56 - that could be like a use as a reference
253:57 - point okay so now let's go ahead and
254:00 - build it together all right first thing
254:02 - I'm going to do I'm going to go inside
254:03 - of source okay inside there let's go
254:07 - into our app.js
254:10 - and inside my app uh what I want to do
254:13 - is let's go ahead and remove everything
254:16 - from the top and I'm going to say import
254:18 - Style
254:20 - from
254:22 - dot slash style slash app dot module.css
254:24 - okay that's where a lot of the uh
254:27 - styling we've already written for you so
254:29 - it's in there
254:31 - go ahead and call the class we're going
254:34 - to use this a wrapper okay and we're
254:36 - going to inside of our wrapper we're
254:37 - gonna put in our header and inside of
254:40 - our header we'll put in our nav bar okay
254:42 - now no nav bar is going to show up so
254:44 - once I hit run on this we're gonna
254:47 - really when we do yarn start we're gonna
254:49 - get an error okay and the reason why
254:52 - we're getting in getting gonna get an
254:53 - error is because we never imported it
254:55 - okay so let me actually move this a
254:56 - little bit out of the way here as you
254:58 - can see a navbar is not defined so now
255:02 - what we want to do is in components you
255:04 - could actually see that we have created
255:05 - navbar inside of components right so
255:07 - we're just gonna go ahead import that
255:10 - right over there import navbar from dot
255:13 - slash components slash navbar
255:17 - okay and now that it's imported let's go
255:21 - into our nav bar and we're not getting
255:22 - an error anymore let's build out our nav
255:24 - bar from scratch
255:26 - let's get in our navbar styles that
255:30 - we've already made
255:31 - and for this nav we're gonna say
255:35 - navigation container for styles
255:38 - and then we're gonna make a container
255:41 - div inside
255:43 - and then inside of that we're going to
255:46 - use the logo image class logo container
255:49 - rather okay and then we go we run that
255:52 - and we get an error all right so let's
255:55 - go ahead we're getting a error here
255:57 - right this is not loading the logo we'll
256:00 - fix that in a second first let's just go
256:02 - ahead and give it a class name and we're
256:04 - going to say Styles dot logo image for
256:07 - the style on this okay and let's fix
256:09 - this source so we're going to change the
256:11 - source to
256:13 - dot dot slash assets
256:16 - slash venmo logo.svg still not loading
256:20 - okay so let's drag the assets folder and
256:24 - we'll move the assets folder inside of
256:27 - our public folder there we go and now we
256:32 - change it now we run and look at that
256:34 - venmo is showing up that is beautiful
256:36 - okay so let's continue all right now
256:39 - we're going to add in an actions
256:41 - container
256:42 - and we're going to say hello and then
256:45 - we're going to give it an accent color
256:46 - and this is where the user address will
256:49 - go so we're going to say hello comma
256:51 - user address okay
256:53 - and remember right we're mapping it to
256:56 - this one that's our reference point so
256:57 - we got that part now we got the hello
257:00 - part okay and then we have the user
257:02 - address
257:03 - there now we're going to put a hand wave
257:05 - and last but not least we do need to put
257:08 - the image the circular image that we
257:11 - have so let's go ahead and do that
257:13 - okay so we're going to first get our
257:15 - down icon okay because we need that icon
257:18 - for right here okay so let's call our
257:21 - Chevron down icon let's give it a arrow
257:24 - down icon styling and let's make it a
257:27 - self-closing tag
257:29 - okay now we're getting an error can't
257:31 - resolve hero icons so obviously what we
257:33 - need to do is we need to install this
257:35 - package right here and
257:37 - let's run it
257:40 - cool now it's showing up
257:42 - so you should have this package already
257:44 - installed when you do npx clever
257:46 - programmer you get all the dependencies
257:48 - installed by default so just make sure
257:51 - you add in the slash outline and then
257:53 - you should be good to go
257:55 - all right the last thing we need to add
257:56 - is the image so let's go and do
257:59 - styles.avatar container so I'll make a
258:01 - new div and then inside of this div
258:03 - we're going to put an image
258:05 - and this image we're going to give it
258:07 - Avatar image style uh make it a
258:10 - self-closing tag as well and the source
258:12 - okay is going to be this specific Source
258:16 - right here at yiang dot me slash
258:19 - avatar.jpg okay you can get your image
258:22 - from wherever you want Yap is somebody
258:24 - who just works with us on the clever
258:25 - programmer team and so that's the image
258:28 - we're using you can use your image or
258:30 - anybody else's image right
258:33 - and boom look at that okay let's get to
258:36 - the end of this
258:37 - boom right if I show you this look at
258:40 - that right
258:41 - we started with that reference and we
258:44 - got pretty much a one-to-one match so
258:47 - that is absolutely phenomenal we are
258:49 - done with our navbar uh and now it's
258:52 - time to move on and add our wallet
258:54 - connection let's go now what we want to
258:56 - work on is the metamask connect wallet
258:58 - functionality so basically we want to be
259:00 - able to do this thing okay where
259:03 - you it'll pop up connect with metamask
259:05 - It'll ask for your account you'll be
259:07 - able to hit next and then move on to the
259:10 - next part okay so let's go ahead and
259:12 - start working on this bad boy now there
259:15 - is no front end part to this so just
259:17 - letting you know that there is a
259:20 - there this is going to be mostly a
259:22 - backhand thing we're going to be doing
259:23 - for connecting to wallet because this
259:25 - front end is meta masks like default uh
259:29 - front end when you open metamask okay
259:32 - all right so make a new folder called
259:34 - context and you're going to make it
259:36 - inside of your source
259:38 - okay inside of this context I want you
259:40 - to hit new file and then in there we're
259:42 - going to put context.js all right go
259:46 - ahead and import use effect and we're
259:48 - going to put in use State and create
259:50 - contacts from react okay just like that
259:53 - and then go ahead and do import ethers
259:56 - from ethers because we're going to need
259:58 - access to that okay and let's go ahead
260:00 - and do export cons transaction context
260:04 - okay and create context so we're going
260:07 - to need access to all this data in our
260:09 - other files that's why we're creating
260:12 - this context here so we can do that all
260:14 - right we're going to create a
260:15 - transaction provider here which is going
260:17 - to take in children children is going to
260:19 - be the entire app and what I'm going to
260:22 - say is I'm going to hit return and I'm
260:25 - going to say transaction context
260:27 - context.provider and we're going to give
260:29 - it a value and right now we're going to
260:31 - leave the value kind of empty okay and
260:33 - we're just going to pass in children in
260:35 - between and make sure you have the tag
260:37 - saying transaction call context.provider
260:39 - okay that's what the tags should be
260:41 - saying all right let's go back yep let's
260:45 - go right there and in our index.js what
260:49 - we're going to do is let's go and do
260:51 - transaction Provider from dot slash
260:53 - contact slash context and uh we're gonna
260:57 - create a transaction provider in our
260:59 - index.js and wrap up the entire app
261:02 - inside of it okay that's what we're
261:04 - doing
261:05 - so make sure you put your app here
261:06 - transaction provider and import your
261:09 - transaction Provider from Context uh
261:11 - with that said let's go back to our
261:14 - context and we're gonna create we're
261:17 - gonna keep track of the current account
261:19 - and we're going to see if the current
261:20 - account is logged in or not okay the
261:23 - default state is just going to be blank
261:26 - empty string we're going to have a
261:28 - function which is going to be check if
261:30 - wallet is connected
261:31 - it's going to be an async function
261:34 - okay and what we're going to do is we're
261:36 - going to create a try catch block here
261:38 - and under the catch we're just going to
261:40 - console log the error and in the try
261:43 - what I want to do is I want to say hey
261:46 - if ethereum does not exist here and you
261:50 - might be wondering where is ethereum
261:51 - coming from we're going to get we're
261:54 - going to destructure ethereum from
261:56 - window window is a global JavaScript
261:58 - object that we have access to and if
262:00 - ethereum does not exist and return
262:02 - Please connect metamask that means
262:04 - metamask is not connected please install
262:06 - metamask that's what the error we want
262:08 - to say and then what we're going to do
262:10 - is we're going to create accounts
262:12 - and we're going to await the ethereum
262:14 - request and the method is eth underscore
262:16 - request accounts and then we want to do
262:19 - is we want to say if the accounts length
262:21 - meaning if the accounts exists then set
262:24 - the first account as the main account so
262:27 - maybe you choose five accounts the first
262:30 - one you chose is the one that gets
262:31 - chosen because we can only choose one
262:33 - account and then we if no accounts are
262:36 - found we're just going to say no
262:37 - accounts found
262:39 - let's create a use effect hook that's
262:41 - going to fire off every single time the
262:42 - page refreshes
262:44 - and we're just going to run this
262:45 - function check if wallet is connected
262:47 - every single time the page refreshes
262:49 - okay then next up what we're going to do
262:52 - is we're going to create a connect
262:53 - wallet function
262:55 - all right now we're going to create this
262:57 - connect wallet function this is going to
262:58 - be pretty much copy paste so honestly
263:00 - you can copy paste there's really just
263:02 - going to be very very minimal difference
263:04 - from this function and the other one but
263:06 - this is more so just a little
263:08 - technicality okay so you're going to be
263:10 - writing the same thing that you just
263:11 - wrote okay so nothing really new here
263:14 - um and then you could see that it popped
263:17 - up so I'll remove this from here you
263:18 - could see that it popped up the wallet
263:20 - and you can connect to it right so we
263:22 - can see it running we can see our
263:25 - um connect functions running okay let's
263:28 - keep going and then we're going to set
263:30 - the current account to zero the only
263:31 - difference is we're going to do a window
263:33 - location reload this is just to kind of
263:35 - catch any edge cases and make sure there
263:37 - are no errors happening so just put in
263:39 - the window.location.reload you should be
263:41 - fine and let's keep going okay next up
263:44 - what we're going to do is we're going to
263:46 - throw a new error if there is an error
263:48 - okay and we're going to say no ethereum
263:50 - object found okay object
263:54 - um okay so make sure you pass in the
263:57 - connect wallet to your transaction
263:59 - context provider because now your entire
264:01 - app will have access to the connect
264:03 - wallet function that you've made
264:05 - foreign
264:07 - so let's go back to our navbar.jsx now
264:12 - we're going to start using all of this
264:14 - stuff that we got okay so let's go ahead
264:16 - and use it so let's make sure that okay
264:19 - everything is looking good here connect
264:21 - wallet ah we want to not just get
264:23 - connect wallet but we also want to get
264:25 - access to the current account the the
264:27 - current user that's logged in so let's
264:29 - go ahead import transaction context from
264:31 - our context and let's get the use
264:34 - context hook as well from react
264:37 - and then we will use the context hook
264:40 - we'll pass in and we'll say hey we want
264:43 - to use our transaction context we
264:44 - created we're going to destructure our
264:46 - current account and connect wallet from
264:47 - that and then we want to wrap the entire
264:50 - app up in certain
264:52 - um
264:53 - in this conditional here in this turning
264:55 - operator
264:56 - okay so you want to say hey if the
264:58 - current account is logged in then show
265:00 - this otherwise showed that
265:01 - all right so I'm going to take
265:03 - essentially what is the home page I'm
265:05 - going to cut that bad boy and we're
265:07 - going to paste it in here because hey if
265:09 - the current account is logged in then
265:10 - show this
265:12 - okay otherwise show a button that says
265:16 - connect wallet okay so our connect
265:18 - buttons give it the styling of connect
265:19 - button and then on click we're going to
265:21 - say connect wallet
265:23 - all right and let's take a look at
265:26 - what's happening okay so let's open up
265:28 - our metamask here let's go to our
265:30 - metamask let's go to uh where it says
265:33 - connected let's click the collapsible
265:35 - Three Dots and let's disconnect
265:38 - okay so now that we disconnect let's
265:40 - refresh our page and you can see that it
265:44 - brings up the connect wallet again and
265:46 - if I remove the connect wallet you can
265:48 - see that there's a button right behind
265:49 - it all right so now I'm going to hit
265:51 - that next button right there and you can
265:54 - see I just got connected okay and
265:57 - basically everything that I'm doing is
265:59 - working okay beautiful so our check if
266:02 - wallet is connected fires off every
266:04 - single time we refresh the page so there
266:07 - you have it you did a fantastic job
266:09 - building this wallet connection so far
266:11 - next up we're going to shorten the
266:13 - addresses let's go and do that now the
266:15 - next thing we're going to be building is
266:16 - a shortener so we're going to take a big
266:19 - address turn it into a small one let's
266:21 - go ahead and do that so I've drawn this
266:24 - out for you here this is what it's we're
266:26 - going to be doing we're going to take an
266:28 - address it looks like this and we're
266:30 - going to turn it into that okay so let's
266:33 - go ahead and do that now
266:35 - so let's make a shortener and once we
266:38 - make that shortener then what we can do
266:40 - is we can actually show that user
266:42 - address right there otherwise this would
266:43 - be too big right and it wouldn't fit
266:46 - so let's go to where we have user
266:48 - address and I'm gonna change that and
266:52 - I'm going to go ahead and say current
266:54 - account okay so now you can actually see
266:58 - that our app is showing us
267:02 - this okay that's what you should be
267:03 - seeing right now because pulling it
267:06 - directly from the current account
267:07 - now what I want to do is let's go inside
267:10 - of my utils and in there I'm going to
267:12 - add shortenaddress.js
267:14 - [Music]
267:15 - and I'm going to say export const
267:17 - shorten address and it'll take in an
267:20 - address
267:21 - and here's what will what it will do
267:24 - okay so it'll we'll say first
267:27 - and then we'll create another variable
267:29 - called last so first we'll just take the
267:31 - first five uh strings so like
267:35 - 0x35d okay so we're gonna put that and
267:38 - then last is just gonna take the last
267:40 - four essentially
267:42 - okay and then we're just going to say
267:44 - first dot dot dot last all right so you
267:47 - got your first and last here let's go
267:49 - back and now we're going to use this URL
267:53 - shortener or
267:54 - a wallet address shortener I mean on
267:58 - current account let's import our bad boy
268:00 - shorten address and make sure you import
268:03 - it from the right place okay so let's
268:04 - just go ahead and import it from utils
268:06 - slash shorten address that's where we've
268:09 - put it and then we're just going to call
268:11 - our shorten address pass it our current
268:14 - account and we should be Gucci
268:17 - here we go look at that we got it right
268:20 - you could see it right over here and you
268:23 - can see that we've went from this to
268:25 - that beautiful so we're done with
268:28 - shortening stuff now we are going to
268:31 - work on our transaction form so the
268:33 - users could put in stuff
268:35 - and then you know be able to pay other
268:38 - people let's go all right now time to
268:40 - make our transaction form this is what
268:43 - you're going to be building by the end
268:45 - of this one okay so
268:47 - we're gonna be building this form now
268:49 - yes it looks ugly hideous but don't
268:51 - worry about that we're going to
268:53 - initially build it without styling and
268:54 - then we're gonna make it look pretty
268:57 - okay so don't worry about that I'm Gonna
269:00 - Leave This bad boy
269:02 - kind of like floating here for reference
269:04 - as we go through this
269:07 - um and yeah let's rock and roll
269:10 - so I'm gonna go into app.js okay and
269:14 - inside of here let's go ahead and um
269:19 - all right so I'm gonna add in
269:20 - transaction form here okay if you don't
269:22 - have man container activity container
269:24 - make sure you add all of these here as
269:26 - well okay but transaction form as I'm
269:28 - going to be adding now obviously it's
269:30 - going to give an error it says
269:31 - transaction is not defined so at this
269:33 - point you know what the error is right
269:34 - you know what this means if you see that
269:36 - error clearly you didn't import
269:38 - something so just go ahead start your
269:40 - import process we're going to go ahead
269:42 - and do transaction form yeah and we're
269:44 - going to grab it from our transaction
269:46 - form component that we've made now I
269:49 - want you to go ahead into your
269:50 - transaction form okay and uh all right
269:54 - so we have the transaction form here it
269:56 - should be pretty much empty let's go
269:58 - ahead and build it out now okay so we're
270:02 - gonna grab a transaction.n module.css
270:06 - all right so now that I've got my
270:07 - transaction styling let's go ahead I'm
270:10 - going to create a div and in here we're
270:12 - gonna say container
270:14 - okay and then we're going to
270:18 - grab make an H3 it's going to be form
270:21 - title and we're going to send payment
270:23 - and request it says Styles is not
270:25 - defined okay let me go ahead and fix
270:27 - that styles.form title there we go and
270:30 - now it's starting to show up
270:32 - okay so send payment slash requests
270:36 - next up I'm going to create a form
270:37 - inside of there we're going to have a
270:39 - form container inside of there I'm gonna
270:41 - have a swap container and then we're
270:43 - going to add in our switch vertical icon
270:45 - and you'll see what this so This icon is
270:48 - this bad boy right here
270:51 - okay so just keep in mind this is what
270:54 - we're making okay this is a target so we
270:56 - got a form container we have a swap
270:59 - container right and inside of that we
271:02 - have a swap Icon now we're probably
271:04 - going to write swap two Slash from okay
271:07 - so just keep remember this is our
271:10 - reference point okay let's go ahead and
271:12 - do styles.swap text and it's going to be
271:15 - swap two Slash from and now we can see
271:17 - it on our screen that's looking good
271:20 - okay let's keep going I'll put this here
271:23 - because I think this will be fine there
271:25 - not in the way of anything
271:27 - all right and then we're gonna create a
271:30 - form body here
271:31 - okay and then inside of there we're
271:34 - gonna add in
271:36 - a form input container
271:40 - okay and then we're going to give it an
271:42 - H4 and the H4 we're going to assist form
271:45 - input title
271:47 - okay and we're just gonna say two so who
271:50 - are you sending your money to right
271:52 - that's where that goes
271:54 - and then the next part we're going to be
271:56 - doing obviously is going to be this
271:57 - message part
272:00 - okay so that's going to be also an input
272:02 - the type is going to be text and we're
272:05 - going to have autocomplete false
272:07 - all right let's keep going for input
272:09 - container and I'll get rid of this and
272:12 - move it over
272:13 - and this is going to be an H4 as well
272:16 - form input title and we're going to say
272:18 - amount
272:19 - and we're going to have input here
272:23 - okay and class name for this one is
272:26 - going to be form input and type is going
272:29 - to be a number okay so once you choose a
272:31 - number
272:32 - it will give you just make sure
272:34 - autocomplete is off on there and instead
272:37 - of amount we're going to send message
272:39 - and
272:41 - instead of that we're going to change it
272:43 - to text okay
272:46 - and then underneath that we're actually
272:48 - going to make our amount
272:52 - so let's go ahead and do form footer
272:56 - let's give it an H4 I'm going to say
272:58 - footer title is amount so there we go
273:00 - amount is showing up now all right and
273:03 - then we're gonna have a div here and
273:05 - we're going to put a footer container
273:06 - and then I'm going to put an amount
273:08 - container div inside of there and then
273:11 - I'm going to put an input container
273:12 - inside of that
273:14 - okay and we want to put a icon here
273:18 - currency dollar icon which is this icon
273:23 - right there
273:26 - okay
273:27 - and then we're going to do Styles dot
273:29 - dollar icon so now it's showing up on
273:32 - the screen you should be able to see it
273:34 - okay I'm gonna get rid of this guy here
273:36 - for a second
273:37 - okay next up we want to make our we want
273:40 - to make this look a little bit better
273:42 - and then we want to make our send button
273:43 - so I'm gonna paste the same input
273:46 - styling except we're going to change
273:47 - this to a number
273:49 - and there we go since we added our form
273:51 - input styling it fixed it and made it
273:53 - wider I'll hide myself here
273:56 - all right so now I've changed it to a
273:58 - number
273:59 - and then what I want to do is I want to
274:02 - create a button and this button is going
274:03 - to be sent okay and we're going to make
274:06 - it a send button that's the styling I'm
274:08 - going to give it okay now it's looking
274:10 - much better make it type submit and when
274:13 - it comes to our form
274:14 - you know this is what it's looking like
274:16 - right now that's about it okay for our
274:19 - form so
274:20 - if you got to this part great job
274:23 - you've done an amazing job now next up
274:26 - we're going to be working on the
274:27 - activity header let's go all right next
274:30 - up
274:32 - that right there is what we're gonna be
274:35 - building right now the activity header
274:37 - okay so there's gonna be a lot of fun to
274:40 - build and I hope you're gonna learn a
274:43 - bunch of things out of this but with
274:45 - that said let's get to it let's start
274:47 - building that bad boy okay so I'll bring
274:49 - it right over here so you could have
274:50 - like a frame of reference here as we
274:52 - build it and let's go so I'm gonna go
274:55 - into my app.js and I'm gonna hit import
274:58 - activity
275:00 - okay and then let's open up our tabs
275:02 - here
275:03 - and in files you can see I have a folder
275:05 - called activity and then I have activity
275:07 - card okay so let's go ahead and import
275:10 - that so I'm going to go ahead import
275:12 - activity card from dot slash components
275:15 - activity activity card okay
275:17 - all right so now it's been imported and
275:20 - now we're gonna start building this out
275:23 - right over here
275:24 - close everything out
275:26 - all right so I'm gonna pop in my
275:28 - activity card here
275:30 - okay pretty soon it will actually start
275:32 - showing up and I'll leave it just here
275:34 - as a reference
275:35 - so let's go into our activity card and
275:38 - now we're going to build it out from
275:39 - scratch okay so let's go ahead and
275:41 - import styles
275:43 - from
275:44 - Styles and activity module.css okay make
275:48 - sure you do dot dot slash dot dot
275:50 - because we have to go back out to
275:51 - directories okay then we're going to
275:54 - return a container and then inside of
275:57 - that div
275:59 - we're going to have another div and just
276:01 - going to be a tab container okay and
276:03 - then in there we're going to put a P tag
276:05 - and we're going to have a tab title
276:07 - activity so that's going to be this part
276:10 - right over here where it says activity
276:12 - okay so boom right there it's showing up
276:14 - okay after activity
276:17 - we want to add a new class name and
276:20 - we're going to do Styles dot navigation
276:23 - container okay inside of that we're
276:26 - going to add in
276:28 - navigation item and then we're going to
276:31 - do data Dash current so just so you
276:34 - understand what this data.current is
276:36 - that this is how it will give it this
276:38 - active styling over here
276:40 - okay so that's how we do that
276:43 - all right let's keep going I'm gonna
276:45 - make a globe icon let's go ahead and
276:47 - import it from the top it's a globe icon
276:49 - from here icon slash react slash outline
276:53 - and then we're gonna go and do
276:56 - styles.navigation icon okay just like
276:58 - this
276:59 - and then let's create another div here
277:02 - we're going to give it a class name and
277:04 - I'm going to say navigation item and in
277:06 - here we're going to put a user icon and
277:10 - just so you know what this icon will be
277:12 - it'll be this icon right over here right
277:14 - Globe icon is this guy here user icon is
277:17 - that guy
277:18 - okay so once we add in that icon let's
277:21 - go ahead and we're going to add another
277:23 - navigation item and this one is going to
277:25 - be a user group icon the third icon
277:29 - all right and you could see all of these
277:32 - being added here okay so let's go ahead
277:34 - and boom it's showing up that's great
277:36 - let's go all the way at the bottom we're
277:38 - going to add another div and for this
277:40 - I'm going to give it a Styles and say
277:42 - feed list
277:44 - okay let's go to our index.js
277:46 - and here I'm going to remove import from
277:50 - index CSS so I'm going to remove the
277:52 - global styling that we were doing
277:53 - everywhere and I'm going to change that
277:56 - and we're going to go ahead and say
277:58 - go into our Styles and grab our
278:00 - global.css so now when we do that boom
278:04 - look at that the entire app styling is
278:06 - looking beautiful our form is looking
278:08 - beautiful so that Global styling there
278:11 - fixed almost everything okay so now in a
278:14 - full screen it look at how much better
278:15 - that looks right it's beautiful and like
278:18 - our Target that we had here is matching
278:21 - what we've built there so with that said
278:23 - we are done with this activity header
278:26 - part great freaking job and next up
278:29 - we're going to work on our transactions
278:32 - let's go quick thing that I want to
278:34 - highlight earlier when we created that
278:37 - send button the problem that was
278:38 - happening with that was it was like
278:40 - overflowing and doing all kinds of weird
278:41 - stuff so I just need you to go in your
278:44 - Styles and go into your transaction
278:46 - Styles
278:48 - transactions.module.css and we're just
278:49 - going to change something inside of our
278:51 - container so here uh for our container
278:55 - we're just gonna make the width
278:57 - 400 pixels okay if you didn't have that
279:01 - already change it to 400 pixels and then
279:04 - you shouldn't have any problems
279:06 - whatsoever you should be good to go okay
279:08 - all right let's keep on going now so now
279:11 - our button looks really good our send
279:13 - button looks awesome no problems anymore
279:15 - okay let's now go to our context and get
279:20 - to work on setting up our smart contract
279:22 - that's the big main thing that we need
279:24 - to do now
279:25 - okay so we're gonna keep track of some
279:29 - states so let's just Define all of those
279:31 - here
279:32 - so the to address we're going to keep
279:34 - track of that state the amount we're
279:38 - going to keep track of that state as
279:40 - well all right so we're going to keep
279:41 - track of this amount State obviously
279:43 - right let's keep going yeah default it
279:45 - to zero because it's an amount it's a
279:47 - number it's not a string so we're not
279:48 - going to have it empty message we're
279:50 - going to leave the message blank to
279:52 - start off with okay we're going to keep
279:54 - track of our loading State and obviously
279:57 - in the start it's false it's not loading
279:59 - and uh we're gonna keep track of our
280:02 - transaction count
280:04 - because we want to know how many
280:05 - transactions we have okay and um yep and
280:08 - by default we're not going to set it to
280:10 - zero or anything by default what we're
280:12 - actually going to do is we're going to
280:14 - pull it from local storage okay so that
280:18 - is a very clean way of doing it we're
280:20 - going to pull it from local storage uh
280:22 - so when a page refreshes or whatever by
280:25 - default we're going to pull it from
280:26 - local storage and then otherwise we're
280:28 - going to pull it dynamically okay now
280:31 - what we want to do is let's go down and
280:33 - we're going to check if transaction
280:35 - exists we're going to create this
280:36 - function
280:37 - and this is really a getter and Setter
280:40 - function that we're making here okay so
280:42 - let me write that down here it's going
280:43 - to be a getter and Setter function
280:46 - and what this function will really do is
280:50 - we want to get a transaction count so
280:55 - okay so this is gonna here's another way
280:57 - of saying this right get and set
280:59 - transaction count
281:01 - that's what this function really does so
281:03 - what we want to do is we want to get the
281:04 - transaction count and once we get it we
281:06 - want to set it in our local storage okay
281:10 - now where are we getting this
281:12 - transaction count from we're going to be
281:14 - getting this transaction count right
281:16 - from our back end our blockchain smart
281:20 - contract part all right so that's what
281:22 - we're that's what's really happening
281:24 - here okay so let's keep going with this
281:26 - function check if transaction exists
281:28 - we're going to go async on this bad boy
281:31 - and it's going to be a try catch and
281:33 - we're going to say hey if we have
281:35 - ethereum meaning if uh you know
281:38 - so this is saying if you have metamask
281:40 - installed then go ahead and do the
281:43 - following then we're going to go ahead
281:45 - and create transaction contract and
281:47 - we're going to create the ethereum
281:49 - contract now this is going to be a
281:51 - helper function we'll create in a second
281:52 - so don't worry when it gives you an
281:54 - error don't freak out not a big problem
281:56 - so let's go ahead and actually create
281:59 - this ethereum contract function now and
282:03 - really this is just a boilerplate code
282:04 - for connecting a smart contract that
282:07 - you've made on the blockchain side to
282:08 - your front end so versus doing that
282:10 - connection part right now
282:12 - okay so let's go ahead and I'm going to
282:14 - set our provider and we're going to
282:17 - choose the metamask as our provider so
282:19 - we're going to say ethereum then we're
282:21 - going to get our signer and this is
282:22 - going to be our provider.getsigner so
282:24 - this is whoever's signing the contract
282:26 - meaning like the logged in user the
282:29 - metamask and then what we want to do is
282:31 - we want to get the transactions contract
282:34 - okay and so let's go to ether's contract
282:36 - and we need to give it our contract
282:39 - address okay we need to give it our
282:41 - contract address and we need to give it
282:43 - our contract API and we need to give it
282:46 - our signer and then we're going to
282:49 - return this transactions contract okay
282:51 - so now contract address and contract ABI
282:54 - those are things that we're going to go
282:56 - ahead and set it up so let's go and get
282:58 - uh on line three let's go ahead and
283:00 - import contract address from utils
283:02 - constants and then we're also going to
283:05 - go ahead and get let's go to our
283:08 - um let's see where we're at let's go to
283:10 - build so we're going to our backend
283:12 - blockchain part let's go to build and
283:14 - let's go to transaction and let's copy
283:18 - that so what we've copied here all right
283:21 - so what we've just copied is all of all
283:23 - of the contents inside of that
283:25 - transactions file okay so uh we're just
283:27 - going to create that same file inside of
283:30 - here okay so let's go and now paste all
283:34 - of that boom there we go so now that
283:37 - I've pasted it so just copy uh click
283:40 - right click on noodles right and you're
283:41 - just going to hit paste it's gonna paste
283:43 - the transactions.json that we copied
283:45 - over earlier let's go to our constant.js
283:49 - and we're gonna go ahead and say export
283:51 - const contract address so we get access
283:54 - to this and then we're gonna do the re
283:57 - the following okay we're also going to
283:59 - import ABI inside of here from our
284:02 - transactions.json and we're going to
284:05 - export our API our contract API so we
284:09 - have access to it in our other files so
284:11 - make sure you do abi.abi at the end
284:14 - let's go to our uh let's go to our
284:18 - context okay and inside of there let's
284:21 - pull contract address and contract ABI
284:24 - and now let's scroll down to our check
284:27 - if transaction exist function and here
284:29 - we're going to do the following okay
284:31 - let's go ahead and do current
284:33 - transaction count and we're going to
284:34 - await this and I'm going to say
284:36 - transaction contract uh transaction
284:39 - count okay or sorry dot get transaction
284:41 - count rather
284:43 - okay this is the function that we have
284:45 - on the blockchain side so I can show you
284:48 - that let's go to our back end let's go
284:49 - to our contracts let's go to our
284:51 - transactions here and boom you can see
284:54 - our get transaction count all right so
284:56 - we got the transaction count on our back
284:58 - end right that's what we're interfacing
285:00 - from our front end so that's freaking
285:02 - exciting because we're literally going
285:04 - from our front end going to our
285:06 - blockchain part using the blockchain
285:08 - solidity function to get the data
285:10 - retrieving that and then putting it out
285:12 - on the front end I mean I don't know
285:14 - that is pretty freaking cool like that's
285:17 - super super exciting right so that's why
285:19 - the away promise needs to happen because
285:22 - we're doing a bunch of stuff
285:24 - asynchronously here and then once we
285:26 - pull that bad boy we're gonna go ahead
285:28 - and in our local storage we're gonna set
285:31 - that item and we're going to say
285:33 - transaction count all right so now we
285:36 - got our current transaction count okay
285:37 - so we have a current transaction count
285:39 - which is we get our account first so
285:42 - then current transaction count becomes a
285:44 - number like let's say eight or something
285:46 - and then we on line 70 right we set in
285:51 - our local storage and we set the key
285:54 - with transaction count and we said the
285:56 - value
285:57 - to that okay so whatever that may be
286:00 - eight or five or whatever however many
286:02 - transactions have happened
286:04 - okay and uh that's looking really really
286:07 - solid to me okay and then now let's go
286:10 - to our you know use effect hook that we
286:12 - created earlier where we added check if
286:14 - wallet is connected now let's go ahead
286:16 - and add check if transactions exist so
286:19 - basically anytime we Refresh on our page
286:21 - that function should fire off and work
286:24 - and you could also you know check in
286:27 - your console log what it's returning and
286:29 - it'll show you it's returning like a
286:31 - number okay however many transactions
286:33 - you have like three or four or five or
286:35 - whatever
286:36 - okay so with that said
286:38 - um now the last part that we want to add
286:40 - to this is we want to fire off this use
286:42 - effect hook every single time
286:43 - transaction count changes and the cool
286:46 - part about this is whenever there's a
286:49 - new edition a new
286:52 - transaction that occurs your page will
286:55 - automatically refresh and show that
286:57 - transaction okay so that's what's
286:59 - happening great job on that now the next
287:01 - thing that we're gonna add is the
287:03 - ability to send money send ethereum
287:06 - let's get to it all right time to send
287:09 - some money so let's get into it
287:12 - okay so let's go and add the ability to
287:17 - be able to send money okay this is going
287:19 - to be important and when I said money I
287:21 - mean ethereum so let's create a function
287:24 - we'll call it send transaction async
287:28 - okay and um here's what we're gonna do
287:31 - we're going to add a try catch block
287:33 - here and if it's an error then obviously
287:35 - just show an error okay if it's not an
287:37 - error then try all right so here I'm
287:41 - gonna say hey if metamask is installed
287:43 - then I want you to go ahead and add in
287:47 - this transaction contract and create it
287:49 - okay so we're just going to create the
287:50 - transaction contract
287:52 - and then what I want to do is I want to
287:54 - have a parsed amount here
287:57 - okay and we're gonna do it with ether's
287:59 - utils and I'm going to parse the ether
288:03 - and I'm going to parse the amount that
288:05 - was passed so if the user gave us a
288:08 - certain amount we're just going to pass
288:09 - it in here so that utils up parse ether
288:13 - amount what that's really doing is if I
288:15 - go here online to a eth dash convert so
288:19 - just go to eat that can eat Dash
288:21 - converter.com and here if I put in like
288:25 - a small amount of eth like 0.001 it'll
288:28 - convert it to whey so it'll convert it
288:30 - to whatever way that is okay so that's
288:33 - really what that function is doing okay
288:36 - because remember there's no floating
288:38 - amounts there's only integers then I'm
288:41 - going to
288:43 - request so I'm going to wait ethereum or
288:45 - metamask in this case and method is
288:48 - going to be send transaction
288:51 - and we're going to give it params params
288:53 - is going to be an array of object in
288:56 - this case and we're gonna say we're
288:59 - gonna give it a from address
289:02 - all right so here we go right so we put
289:04 - our gas just for gas just put 0x52 all
289:08 - right so this basically right here 0x528
289:11 - is just a short nice way of saying
289:13 - something like hey I'm I want to pay
289:14 - like 21 000 way or whatever in gas to
289:17 - just cover some basic amount of gas okay
289:19 - that's really what it is
289:20 - and then just choose value parse them
289:22 - out so we got our from which is a
289:24 - current account which is this bad boy
289:26 - right here that's logged in the 2 is
289:29 - going to be whoever fills out the form
289:31 - or like whoever we're sending it to for
289:33 - the form
289:34 - uh we have we're just gonna pay this
289:36 - amount of gas every single time the
289:38 - value is going to be the parsed amount
289:41 - and then we're going to turn it into hex
289:44 - all right so that just converts it to a
289:46 - hexadecimal that's it but we don't
289:48 - really need to worry too much about it
289:49 - we're going to create a transaction hash
289:51 - and that's going to be from the
289:53 - transactions
289:55 - transaction contract and we're going to
289:58 - do dot add to blockchain okay so
290:00 - basically
290:01 - you know that's where we're doing
290:04 - you know Trend uh send transaction okay
290:06 - that's really what we're doing
290:08 - and we're going to pass in our address
290:10 - to our parsed amount our message and
290:15 - then yeah that's pretty good okay those
290:19 - are all of the things that we're going
290:20 - to send
290:22 - then we're going to set is loading to
290:24 - True while that's sending and then we
290:28 - can say loading and then we're going to
290:30 - put a transaction hash all right now
290:34 - what we want to do is we want to await
290:36 - the transaction
290:37 - hash here and just do transaction
290:40 - hash.weight and then once we're done
290:43 - with that we're going to assist success
290:44 - transaction hash and then we want to set
290:46 - the loading to false because loading is
290:49 - done we were none waiting for it
290:52 - and transaction count at the end is
290:56 - going to be updated so now we're going
290:58 - to going to get the updated transaction
291:00 - count okay and then once we get that
291:03 - we're going to set the transaction count
291:05 - to whatever the new transaction count is
291:09 - and we're going to convert that into a
291:11 - number
291:12 - so it comes as like a big int or a big
291:15 - number so we just cast Typecast to like
291:18 - a regular number and then we're fine and
291:20 - then we're just going to do this window
291:21 - location reload thing to make our app
291:23 - more robust and then we're going to add
291:24 - an else here and I want to say you know
291:27 - if that doesn't work then No ethereum
291:29 - Object okay meaning like no matter mask
291:30 - or whatever and it doesn't work
291:33 - cool with that said we are done adding
291:35 - that send functionality now it's really
291:37 - just adding in the UI the beautiful
291:39 - front end for the form everything is
291:42 - ready to go and then we should be able
291:43 - to send money and see everything okay
291:45 - let's go ahead and do that now all right
291:46 - now the functionality we're going to add
291:49 - is really where we add real
291:52 - functionality to the form meaning that
291:54 - when you actually put in an address and
291:56 - you put in a message and you put an
291:57 - amount it will actually open up metamask
292:01 - and then ask for you to confirm and then
292:04 - you're actually able to send the
292:06 - transaction so that is the functionality
292:08 - that we will now add with that said
292:11 - let's get into it
292:12 - so let's get started from where we had
292:14 - left off
292:15 - we created our send transaction function
292:18 - now all we need to do is make sure that
292:20 - in our context we actually pass it so
292:22 - our the rest of our app has access to
292:23 - send transaction function so go ahead
292:26 - and do that and then I'm going to go
292:28 - into my transaction form
292:30 - and inside of my transaction form we're
292:33 - going to use our use context hook and
292:36 - get access to the transaction context
292:38 - and I'm going to destructure send
292:40 - transaction function from there set
292:42 - address to address to and set amount
292:45 - hook okay and the amount hook and
292:47 - message set message Etc right so we
292:49 - we're just going to get access to kind
292:51 - of all of that stuff and we need to send
292:54 - that stuff over too so just make sure
292:55 - you copy all of that and you paste it
292:57 - here so you want to make sure that in
293:00 - your contacts you're actually passing
293:01 - all of that information right the set
293:03 - address to hook the address to set
293:06 - amount hook amount State message set
293:09 - message all of that okay so we're going
293:12 - to go ahead and do that okay cool now
293:15 - that we're doing this let's go ahead and
293:18 - make sure that we write our handle
293:20 - submit function okay and in this we're
293:23 - going to take the event okay and the
293:26 - first thing we're going to do is prevent
293:27 - default and what that does is it makes
293:29 - sure that you don't refresh the page
293:31 - doesn't refresh once you hit submit
293:33 - and we're going to say hey if the
293:36 - address doesn't exist or amount doesn't
293:38 - exist
293:39 - all right so we're gonna say if none of
293:42 - these exist then just do nothing okay
293:44 - just ignore that okay we only want this
293:47 - to work if those exist and so basically
293:51 - this is like a guard Clause that we're
293:53 - adding here and then
293:55 - uh if none of those are true then
293:57 - obviously we're going to send the
293:58 - transaction okay so the transaction is
294:00 - going to send when these things exist
294:02 - okay and then we're just gonna for the
294:04 - input
294:05 - um for our Forum title we're just going
294:07 - to say value uh is the address to okay
294:11 - so that's the address to right here and
294:14 - we're going to say on change we're going
294:17 - to set the address to whatever you're
294:18 - typing in the two
294:20 - and then we're going to do the same
294:21 - thing for our message and then we're
294:23 - going to do the same thing for our
294:24 - amounts right now we're working on our
294:26 - message okay value on change same idea
294:30 - and then we're going to do the same
294:32 - thing for amount it's going to be
294:33 - literally the same pattern okay so let's
294:35 - go ahead and do that for amount on
294:37 - change set amount Target value okay good
294:40 - good old react stuff and if you're
294:43 - wondering yes yes my hair did change
294:46 - okay I went to get a haircut in between
294:50 - the shoot so shout out haircut gang if
294:53 - you saw this
294:55 - you know not most people will make it to
294:57 - this part but if you're one of the lucky
294:59 - few good job
295:01 - all right let's keep going let's wrap up
295:03 - this entire bad boy that we have written
295:05 - in a form and we're gonna add a handle
295:08 - submit to that form okay so the handles
295:10 - the function essentially that we created
295:12 - right here so this form is going to be
295:15 - looking for when you press that juicy
295:16 - send button when you send that send
295:18 - button when you send that send button
295:21 - I'm into so when you click that send
295:22 - button your send transaction or whatever
295:25 - function will handle submit function is
295:27 - going to run okay but let me ask you is
295:30 - it going to run right now that this is
295:32 - empty I'll give you four seconds to
295:34 - answer that four three two one no it
295:38 - will not well the function will run but
295:40 - it won't send the transaction right
295:42 - because there's nothing here so that
295:44 - won't happen but
295:46 - if you have all of these filled out and
295:50 - then you hit send will it run I'll give
295:51 - you four seconds to answer that four
295:53 - three two one hopefully said yes and yes
295:56 - if you have it filled out it will send
295:58 - so let's keep on rocking and rolling
296:00 - here and let's open up our console on
296:02 - the right hand side okay and then we're
296:05 - gonna go to our code
296:07 - um just on change with the capital c
296:10 - okay so that that's where the error was
296:12 - coming from so just make sure it's a
296:13 - Capital C that you have cool all right
296:16 - now it looks like it's working now let's
296:19 - go ahead and type in our to address
296:22 - ignore my dog
296:24 - she's a little baby bulldog she's wild
296:26 - all right there we go we got our two
296:28 - address sometimes you know I order
296:30 - ubereats they show up at the door to
296:32 - drop the food and then she just starts
296:34 - barking and I'm sick and tired of having
296:37 - to edit that out so you guys are just
296:39 - Gonna Hear What I Hear at my house every
296:40 - day so if you got to this dog barking
296:42 - part feel free to comment that as well
296:44 - and um
296:46 - yeah let's write our message have a
296:48 - great day and we're gonna put in some
296:50 - amount and we're gonna hit send and now
296:52 - notice
296:53 - it is opening up Madame mask how
296:56 - beautiful is that let's hit confirm
296:58 - there we go metamask is popping up I
297:01 - will make myself tiny here so you can
297:04 - see confirm boom look at that and the
297:08 - loading transaction hash is showing up
297:11 - to that is nice right that was real
297:15 - clean and there the transaction has
297:18 - taken place right and if we go to the
297:20 - other account or resent this money it
297:23 - looks like we got the eth
297:25 - so we are now able to send money I mean
297:29 - 99.9 of the functionality of our venmo
297:32 - app is complete you know functionality
297:34 - wise but now we still gotta make sure
297:37 - that we render the recent activity and
297:38 - we show all that stuff so I hope this
297:41 - was exciting to you I hope this
297:43 - enlightened you and with that said let's
297:45 - keep on rocking and rolling next up the
297:47 - component we're going to make is this
297:50 - guy right over here okay this is going
297:53 - to be your recent activity slash recent
297:57 - transactions component so you know what
297:59 - who's making the recent uh transactions
298:02 - right this is what you see on venmo as
298:04 - well so let's go ahead and work on that
298:06 - component now
298:10 - get rid of this here and let's go I'm
298:12 - going to pop this in the purple thing in
298:14 - the back is not really what you're
298:16 - actually going to be adding okay that's
298:17 - just like interesting looking padding
298:19 - that I added but this is the part that
298:21 - you're actually going to be building
298:23 - yeah I just wanted to make sure like I
298:25 - want money to just make it stand out
298:28 - Okay cool so let's go ahead and work on
298:31 - this now
298:33 - all right
298:34 - let's go into our
298:36 - activitycard.jsx and inside of my
298:39 - activity card let's go and import my
298:42 - contacts from react
298:45 - and then the next thing I want to do is
298:48 - I'm going to get my transaction context
298:50 - from my context file
298:54 - will get shortened address from utils
298:58 - okay it's gonna be slash util slash
299:01 - shorten address
299:03 - yep
299:06 - just like that and then we're going to
299:09 - uh pull transactions and current account
299:12 - from our context let's go and get all
299:15 - transactions inside of our context let's
299:19 - go and get all of the transactions so
299:21 - it's going to be async it's going to be
299:23 - a try catch here we're going to console
299:25 - log the error and then we're going to
299:26 - say hey if metamask is installed
299:29 - I want you to create the transaction
299:30 - contract and we're going to create the
299:32 - ethereum contract
299:36 - once that's done we're going to get the
299:38 - transactions okay so we're going to say
299:40 - const available transactions and we're
299:43 - just going to await the transaction
299:45 - contract and we're going to call the get
299:47 - all transactions function which is on
299:50 - our back end okay so in our blockchain
299:54 - part
299:55 - so if we go to our transactions.sol you
299:58 - can see we have get all transactions
299:59 - right there and it's a view function and
300:02 - it Returns the transactions
300:04 - we're gonna say
300:06 - get us these structured transactions all
300:09 - right so basically structured
300:11 - transactions all we're doing is we're
300:12 - transforming the data that we're getting
300:14 - and so I'll kind of explain to you what
300:16 - I mean by that right let's go ahead and
300:18 - write this
300:20 - um okay so we are now just going to pull
300:24 - our address to from there
300:28 - this is the um
300:30 - transaction receiver okay that's the who
300:34 - we're sending it to okay uh next up
300:36 - we're going to get our address from and
300:38 - that's a transaction sender
300:41 - and then we have our amount or actually
300:44 - in this case let's just do our time
300:46 - stamp and uh let's call our time ago
300:49 - that we got imported or added earlier
300:51 - all right and we're gonna say dot format
300:56 - okay and I'm going to create a new date
301:00 - in here and we're just going to put in
301:01 - the transaction
301:03 - okay dot timestamp so each transaction
301:05 - will have a timestamp from the
301:07 - blockchain and I believe the blockchain
301:09 - puts their transactions in Unix all
301:12 - right so
301:14 - all right so there we go you heard that
301:17 - confirmation in there uh our developer
301:19 - confirmed with us that it is UNIX our
301:22 - developer being your boy Kevin
301:24 - and basically if you pass it that Unix
301:28 - right and you give it as a number
301:31 - and uh we pass it to new date all right
301:34 - so what what the what the multiplied by
301:37 - a thousand Shenanigans is because you're
301:38 - getting a you okay here it's annoying
301:40 - you don't really need to worry about it
301:42 - but I'll tell you anyways you're getting
301:43 - Unix in milliseconds so in order to turn
301:47 - it into Unix in seconds you multiply
301:49 - that bad boy by a thousand now it turns
301:52 - into Unix seconds you give the unit
301:56 - seconds to your new date time object it
301:59 - turns it into a daytime object then you
302:01 - call time ago format on that daytime
302:04 - object and it knows how to turn it into
302:06 - a time ago naturally you know written
302:08 - language kind of like here
302:10 - where you're seeing uh you know 23
302:14 - minutes right there or 31 seconds right
302:17 - there that's what time ago does
302:19 - oh okay there we go all right so we're
302:21 - gonna say comma mini here
302:24 - all right the mini is a time ago thing
302:26 - so you can give it mini so that means
302:28 - that it's in instead of minutes or mins
302:30 - it's going to say m or s for seconds
302:35 - okay there we go and then message
302:39 - we will call it
302:42 - transaction.message okay so now that
302:44 - it's
302:45 - uh restructured like this or AKA
302:48 - transformed you won't have to Loop
302:50 - through and go transaction dot receiver
302:52 - transaction.sender you can actually just
302:54 - Loop through and go dot address to dot
302:56 - address from dot timestamp so it'll be
302:59 - much cleaner so your code won't look
303:00 - like
303:02 - transaction.transaction.receiver pass in
303:05 - your amount will parse ins and we will
303:07 - give it the transaction amount in HEX
303:10 - and we will divide it by 10 to the power
303:15 - of
303:16 - 18. so if you're looking at this and
303:19 - you're like what kind of ninjutsu
303:21 - garbage is this
303:23 - um I'll explain real quick we are going
303:25 - my friend from
303:28 - way this is like the ugly stuff about
303:31 - blockchain I don't know why they do all
303:33 - this trash like this development
303:35 - experience is going to get better at
303:36 - some point but that's what it is right
303:38 - now it's in way and we're converting it
303:40 - to eth so remember when we went from
303:41 - like a really tiny 0.002 number and
303:44 - return it to like a 10 billion way
303:46 - number when we went to eat
303:48 - dashconverter.com well now for the front
303:51 - end we got to go from way back into eth
303:55 - and show it to the user okay so we're
303:57 - reversing that all right hope that makes
304:01 - sense
304:01 - okay let's keep on rocking and rolling
304:05 - all right and then we're gonna import
304:06 - time ago from JavaScript time ago and we
304:10 - will also import
304:12 - en from Joshua time ago Locale okay and
304:15 - then we're going to add that Locale to
304:18 - the time ago
304:20 - and we'll say time ago and we'll make it
304:24 - a uh e-n-u-s okay so then it'll look
304:27 - like American time zones
304:30 - okay
304:31 - um and time ago if you're looking for it
304:34 - right in your package.json
304:37 - we have it either added and if we don't
304:39 - have it added we can just go ahead and
304:41 - install it now okay so in our command
304:43 - line we're going to go ahead and say
304:44 - npmi and we're going to go ahead and say
304:48 - JavaScript and just do Dash
304:52 - time ago beautiful hit enter and now it
304:55 - will install it all right so basically
304:57 - now guys we have it installed
305:00 - okay and once it's installed your time
305:03 - ago is going to work okay let's keep on
305:06 - going through this all right let's go
305:08 - down and we're going to add our set
305:11 - Trend we use our set transactions hook
305:13 - that we got earlier
305:16 - or actually let's define it here so I'm
305:19 - going to say transactions and set
305:20 - transactions and in the start is going
305:23 - to be an empty array
305:25 - okay it's going to be an empty array
305:28 - and then what we're going to do is we're
305:30 - going to set the transactions to
305:32 - structured transactions uh and else
305:34 - we're going to say No ethereum Object
305:36 - okay and in our context provider make
305:39 - sure you also export this value so we're
305:43 - going to say transactions let's pass it
305:44 - to our app so we have access to
305:46 - transactions everywhere else in the app
305:49 - now inside of our activity card you can
305:52 - see that we're extracting transactions
305:54 - all right guys so there we go okay so
305:57 - now transactions will make more sense
305:58 - right because we're pulling it out
306:00 - because we actually have access to it
306:02 - and now this feed list that we have
306:04 - inside of that feed list we're going to
306:08 - all right so we're going to go ahead and
306:09 - do transactions.nap
306:11 - and now we just want to Loop through and
306:14 - render those transactions out this is
306:15 - like mainly the front end part here okay
306:17 - so we're gonna go ahead and destructure
306:20 - an ID and address from our timestamp our
306:25 - message our address from
306:29 - all right so we destructured all of this
306:31 - stuff
306:33 - id address from timestamp message
306:35 - address to Etc
306:37 - um and then we're going to also get the
306:40 - index okay okay so we got this right now
306:44 - We're looping through this and now let's
306:48 - go and render this out so I'm going to
306:51 - do an implicit return here right arrow
306:54 - and then parentheses is an implicit
306:55 - return okay so there we go now class
306:59 - name so key is going to be the index
307:01 - right that's why we pull the index when
307:02 - we were looping and then we want to give
307:04 - it a class name a feed item
307:08 - for this here
307:11 - class name here we're going to give it a
307:14 - styles.avatar container okay and we're
307:17 - going to give it an image and it's going
307:19 - to be an avatar image and for Source
307:21 - we're going to Generate random Avatar
307:24 - all right guys so now you know Generate
307:27 - random Avatar obviously doesn't exist
307:29 - but we're gonna go ahead and uh create
307:32 - that now so let's go ahead and do
307:33 - Generate random Avatar and this function
307:37 - it's going to work in the following way
307:40 - we're going to say random Avatar and I'm
307:43 - going to randomly pick
307:45 - a number between one and a thousand okay
307:48 - I'm going to be using this as my seed
307:50 - number and we're gonna use this diespare
307:54 - API which is very nice
307:56 - okay and um we're going to pop in the
308:00 - random Avatar that's how we're getting
308:01 - this by the way this is using the uh
308:05 - dyspare API okay that's how we're
308:07 - getting all of this
308:09 - and how it works is you give it a random
308:12 - seed so we're just going to give it a
308:14 - random Avatar plus current account and
308:16 - we're gonna say
308:19 - um dot SVG at the end of it
308:23 - okay and um there we go all right so now
308:26 - it will generate a random Avatar every
308:28 - single time and make sure we're gonna
308:31 - create another div and this one is going
308:33 - to be feed details so the point of this
308:37 - is so we can actually see the
308:40 - details part
308:43 - okay so here we have uh you know this
308:48 - this uh feed details is going to be
308:51 - obviously the details part that we're
308:52 - going to be adding to this okay
308:54 - okay and then we're gonna have e a feed
308:57 - author
308:58 - that's where we're going to put the
309:00 - wallet and shortened address so there we
309:02 - go we got the shortened address so we're
309:04 - going to put the shortened from address
309:06 - and then we're going to put the
309:07 - shortened to address so that will say
309:10 - you know from and then it'll say two
309:12 - okay so there we go that's very nice and
309:16 - then what we want to do is we want to
309:18 - add a span tag here
309:20 - and we want to do created at so this is
309:23 - going to be our time stamp here which is
309:25 - 23 minutes or 31 seconds
309:28 - Etc
309:29 - and we're going to put our timestamp
309:32 - there
309:34 - okay right here
309:37 - we're going to put a globe icon right
309:39 - next to it just like this so that's why
309:41 - we're doing this globe okay and let's go
309:43 - class name we're gonna go Styles dot
309:47 - feed author or sorry dot feedbody in
309:49 - this case actually and for the feed body
309:52 - we're going to add in a message so this
309:54 - is the message like have a great day or
309:56 - thanks for the ether
309:58 - all right
310:00 - perfect
310:03 - uh
310:05 - all right let's make another div and for
310:08 - this one I'm going to give it the feed
310:13 - CTA so this is going to be the call to
310:16 - action or these buttons like like and
310:18 - comment
310:20 - just like how we have on venmo and we're
310:22 - going to give it a heart icon and we're
310:24 - going to give it a like icon for that
310:26 - one and for the next one we're going to
310:28 - give it
310:30 - and just so you could see right there we
310:32 - go that's the heart icon so I'll leave
310:35 - this here so you can kind of see the
310:37 - heart icon and the other icon actually
310:40 - let's put it here why not so you can see
310:42 - it okay
310:45 - um so we got the like icon and then we
310:47 - got the comment icon
310:51 - all right let's go ahead and refresh our
310:54 - app let's see here
310:56 - actually let's go to our activity card
310:59 - or sorry let's go to our context here
311:02 - and inside of our context I'm going to
311:04 - go to around line 47 where in my check
311:07 - if wallet is connected function and
311:08 - we're gonna get access to all of our
311:11 - transactions
311:12 - okay so let's call that function get all
311:14 - transactions
311:16 - all right and
311:19 - let's just make sure I'm in a full
311:21 - screen and let's check here
311:24 - if it's pulling it through it's giving
311:26 - us an error it says cannot read
311:28 - undefined okay so hold on let's see
311:31 - what's going on here
311:34 - all right let's look for it all right so
311:35 - it was a tight it's actually a typo here
311:37 - so amount dot underscore hex it's amount
311:41 - dot underscore hex on line 140. so that
311:45 - fixed it there we go we're getting all
311:47 - the transactions and our transactions
311:48 - are showing up I mean that is nice that
311:51 - looks beautiful
311:54 - okay that looks great and you could see
311:56 - oh wow you could see right address from
311:59 - you can see address true the amount sent
312:01 - message and timestamp and all of that is
312:04 - showing up here
312:05 - so this is really really good so far
312:08 - let's go to our account one
312:10 - and we're gonna copy okay
312:14 - I'm going to paste the account two's
312:17 - address so we can send them the money
312:18 - we'll put in a message
312:21 - thanks for the ether there we go and we
312:24 - will put in
312:25 - some eth
312:28 - and let's go down and send it let's hit
312:31 - confirm
312:32 - look it says loading so you could see
312:34 - that right away okay let me hide myself
312:36 - so you can see loading right away there
312:37 - we go and once the loading is done we
312:40 - could speed it up right once the loading
312:43 - is done
312:44 - boom right there there you go now the
312:48 - transaction is showing up how freaking
312:50 - beautiful is that that is fantastic so
312:53 - great work on that so far that is
312:56 - wonderful and with that said we're done
312:58 - with this part at this point we're
313:00 - pretty much done with the entire app
313:01 - we're just gonna put the finishing
313:03 - touches and we're good to go so I'll see
313:05 - you in just a second all right so now
313:08 - we're gonna pretty much just be demoing
313:09 - the app but you might have noticed that
313:11 - I have this ad thing here now this is
313:16 - pretty much just react I'm not gonna go
313:18 - ahead and build this out it's gonna be a
313:20 - challenge for you to build out and add
313:23 - to this app if you get stuck you can
313:25 - always just check out to the main branch
313:28 - because if you did npx clever programmer
313:30 - right for this project you can check out
313:32 - the the main branch that always has the
313:34 - full solution right now you're on the
313:36 - CLI starter Branch so you are doing this
313:38 - from scratch yourself okay so if you can
313:40 - always switch there and then code
313:44 - um or sorry find the solution but I
313:46 - would say you know everything you need
313:48 - to know at this point to be able to put
313:50 - this together okay or make a ad looking
313:52 - thing similar to this and you should
313:55 - give it a try okay you already have the
313:57 - assets and everything like that
313:59 - so I'm just going to go ahead and demo
314:02 - the rest of the app so like let's just
314:03 - play around with the app right and let's
314:05 - just make sure that it works I'm gonna
314:06 - go right here I will click into account
314:09 - one I'll try to send some transactions
314:11 - over to another account let's go ahead
314:15 - and um refresh the page you can see the
314:18 - avatars changed right the logos the
314:21 - random generated avatars have changed
314:23 - we're pulling in the transactions the
314:25 - time stamps or the transactions are
314:27 - showing up I'll put in a new address
314:30 - here we'll put in a message and then
314:32 - we're going to go ahead and put in the
314:34 - amount
314:36 - let's see if it works with Emojis okay
314:38 - so I'll put in an emoji here ah no Emoji
314:41 - showed up oh well let's hit send and
314:44 - let's go ahead and hit confirm there we
314:47 - go we'll go ahead ahead and hit confirm
314:50 - and look at that it's loading loading
314:52 - loading loading right
314:54 - and let's see
314:57 - okay an account three or account two yep
315:01 - the money has gone and without even
315:03 - refreshing the page you can see that it
315:05 - says 26 seconds ago thanks for dinner
315:08 - all right so there you go that is your
315:12 - entire app so with that said I really
315:15 - really freaking hope that you enjoyed
315:18 - building this from scratch I hope you
315:20 - get to deploy it I hope you you know
315:23 - share in the comments that you did it I
315:25 - mean I'm really excited that you were
315:26 - able to follow along build this you
315:28 - should be very proud of yourself if you
315:30 - enjoyed this video smash that like
315:31 - button turn it white turn it blue
315:33 - depending on if you're using dark mode
315:36 - or light mode on your YouTube subscribe
315:38 - to the goddamn Channel I love your
315:39 - beautiful face this is Causey and as
315:41 - always I'll see you in the next video
315:45 - what's up guys in this video you'll
315:47 - build openc blockchain web 3.0 app with
315:51 - next JS this is version two of open C so
315:54 - this is going to be a lot more stable
315:55 - and we're going to be using some really
315:57 - cool tools to build this you don't want
315:58 - to miss it you're going to be using
316:00 - Tailwind to style this app you're gonna
316:02 - learn how to create your own Marketplace
316:04 - on the blockchain using third web we'll
316:07 - be connecting to the blog action Through
316:09 - The Cutting Edge in fura RPC nodes you
316:13 - definitely want this technology in your
316:14 - repertoire you'll then create your own
316:16 - nft collection and mint your very own
316:18 - nfts in this app you'll also be able to
316:20 - list and buy nfts on your own
316:23 - Marketplace using the third web SDK
316:25 - We'll add authentication to this app
316:27 - using metamask and the best part we'll
316:30 - be building this entire project using
316:33 - replit as our online IDE and the main
316:36 - benefit of it is you'll be able to
316:38 - follow along and guaranteed every single
316:40 - one of you will be able to follow along
316:42 - because most of the times things get
316:43 - lost in installation your versions are
316:46 - off and most people just fall off for
316:49 - that reason but with replit you'll be
316:51 - able to follow along click one button
316:52 - fork araple and boom you can follow
316:54 - along literally everything that we're
316:56 - doing without having to worry about
316:57 - something not working okay I hope you're
316:59 - excited because then we can work
317:01 - together build a project so you can add
317:02 - it to your portfolio and you can then go
317:04 - towards getting a job with that said
317:06 - here's one really the important thing
317:09 - that I need you to do if you want to
317:10 - build this project you want to get that
317:12 - job and you want to level up your career
317:13 - I'm going to put this link and says
317:15 - join.replet.com CP Dash open C that's
317:18 - the link it's also in description go
317:20 - ahead on there right now as you have
317:22 - this video open don't close out of this
317:24 - video click that right now and hit fork
317:26 - okay make sure you hit that fork right
317:28 - there because that's how we'll be able
317:30 - to work together and that will have
317:32 - already your next app reinstalled it'll
317:34 - already have all your dependencies
317:35 - installed it'll have your third web sdks
317:37 - installed it'll have everything that you
317:39 - need installed ready to rock and roll so
317:42 - then you can just quickly follow along
317:44 - with the tutorial build the app without
317:45 - worrying about any of the headache and
317:47 - you'll be good to go okay so go ahead
317:49 - click the link hit for create an account
317:51 - and then boom you're ready to go follow
317:53 - alongs on one tab then you'll have your
317:55 - replit the other tab you'll be coding
317:57 - along with my YouTube video so with that
317:59 - said I hope you're excited smash the
318:01 - like button and let's go right into the
318:03 - video what is up YouTube It's Lance a
318:06 - couple hours from the future and I just
318:07 - wanted to take the time time to showcase
318:09 - the beautiful app that we'll be making
318:11 - together so as you can see this is the
318:13 - connect metamask button and once you
318:15 - click it you'll be prompted to connect
318:17 - your wallet and if I hit next here and
318:19 - then I hit connect
318:20 - bam we're instantly into the app that
318:23 - we'll be making so if you take a look
318:25 - down these are all the crypto punks
318:28 - available in our Marketplace together
318:29 - and guess what these are real nfts that
318:32 - live on the blockchain if I were to
318:34 - click any one of them like say this one
318:37 - I get directed to a dynamic page with
318:40 - all the information in the URL right if
318:44 - I go back and I click on another one
318:46 - let's click the clown one
318:48 - look at that generates a unique URL for
318:52 - every nft you create so it's dynamic as
318:54 - well then now for my favorite part I can
318:57 - click this buy now and it's for .02 e if
319:01 - I click buy now
319:03 - look at that I'm buying it for literally
319:05 - what I listed it as so get excited guys
319:07 - if I were to hit confirm
319:10 - there we go I can just check my metamask
319:12 - account
319:13 - you can see that it's pending
319:15 - and there we go and now it's done
319:17 - pending so that means the transaction
319:19 - was confirmed I lost 0.02 eth meaning we
319:23 - were able to purchase these nfts here
319:25 - and if I were to go back
319:27 - you give your app a second
319:29 - look at that the clown one that we just
319:31 - bought is removed from the marketplace
319:32 - as it should so do you guys want to
319:34 - learn how to build your very own
319:35 - Marketplace I know I would let's get to
319:38 - the video so to get started we're going
319:40 - to be using replit.com for this and if
319:42 - you're unfamiliar all replied is it's an
319:44 - in-browser IDE where you can write code
319:47 - in one thing that makes replicate unique
319:49 - is that it's online so anything that can
319:52 - connect to a web browser for example
319:54 - your phone and tablet you can write code
319:56 - in right another the cool thing that I
319:58 - like about replit is that you can manage
320:00 - your environment so any node.js
320:02 - libraries you're missing you can use
320:03 - replica to manage that as well one thing
320:05 - I want to add to that I like is that
320:08 - once you're done with your project all
320:09 - you need to do is do one click and you
320:12 - can make it public and shareable to all
320:14 - your friends like I always say so
320:15 - without further Ado all you need to do
320:17 - to sign up is go ahead and click on the
320:20 - link provided over here
320:22 - and sign up for an account I already
320:24 - have an account so I'm going to click
320:25 - log in and once you click that link and
320:28 - make an account you should be directed
320:30 - to that GitHub Rebel awesome so you
320:34 - should see this page right here and it
320:36 - should say opencv2 YouTube what you want
320:38 - to do is just click Fork Ripple what
320:40 - this does is essentially clones the
320:42 - current Rebel and adds it to your
320:44 - account alright so now I should have a
320:47 - Ripple myself
320:49 - okay there you go it's up and loading
320:51 - and you should be greeted by this long
320:53 - readme and that's because now you guys
320:57 - have the starter next JS app already set
320:59 - up for you guys so the cool part is if
321:01 - you go to package.json you'll see that
321:03 - you don't have to install any packages
321:05 - yourself right so you could do this all
321:07 - manually but because you forked a rebel
321:10 - all this is right here the only thing
321:12 - that you'll need to do is hop over to
321:13 - the shell and just type in the command
321:15 - yarn to install all the packages that
321:18 - are here and we should be seeing some
321:20 - node modules come up
321:22 - boom so once that's done we should have
321:24 - all the modules that we need and we
321:27 - should be able to do a yarn dip so I'm
321:30 - just going to go ahead and clear my
321:31 - terminal you can do that by clicking
321:32 - this trash can right here and we should
321:34 - be good to go all right so let's type in
321:36 - yarn Dev to see our project cool and let
321:39 - it compile and boom just like any other
321:41 - IDE we can load and preview our project
321:44 - right here so you can see welcome to
321:46 - next.js so if you did want to edit what
321:48 - we have so far I would just go to index
321:50 - and just to show you guys it still all
321:52 - works the same if I go to next.js here
321:54 - change this to clever programmer
321:58 - boom it gets updated and we see welcome
322:00 - to clever programmer so that's the setup
322:02 - for replit I'm gonna go ahead and get
322:04 - started on setting up a third web so
322:06 - we'll be back in this in a second all
322:08 - right so as mentioned before we are
322:10 - going to be using third web for this
322:12 - project so go ahead and go to your
322:14 - browser and type in thirdweb.com
322:17 - cleverprogrammer so you press enter and
322:19 - now you're gonna see this screen where
322:21 - it's going to say connect your wallet so
322:23 - if you didn't know we're going to be
322:24 - using metamask for this as well and if
322:26 - you haven't already I'm going to show
322:27 - you guys how to set up metamask okay so
322:30 - one of the first things is metamask
322:32 - works really well with chrome so if
322:33 - you're not on a Chrome browser go ahead
322:35 - and switch to it now and then come back
322:37 - cool you're here awesome so now that
322:38 - you're here to just get started you can
322:40 - type in metamask Google Chrome extension
322:43 - all right you don't have to type in this
322:44 - whole thing whatever you type that gets
322:46 - you to this specific page you should be
322:48 - good to go right because metamask for
322:50 - those of you who are unfamiliar metamask
322:51 - is a wallet where you can store all your
322:53 - cryptocurrencies it works really well
322:55 - with ethereum at the moment so make sure
322:58 - you have it installed I already have it
322:59 - installed and as you can see here it's
323:01 - going to ask for a password so if I type
323:02 - in my password boom I'm already logged
323:04 - in so as you can see I'm already logged
323:07 - in and for you guys you're gonna notice
323:08 - that you're probably going to be on
323:10 - ethereum mainnet when you first make
323:12 - your metamask account this is the main
323:15 - Network for ethereum so you're going to
323:17 - be using real ethereum if you connect to
323:19 - here so if you look I click this I don't
323:21 - have any real ethereum so I'm going to
323:22 - say zero right if you're developing on
323:24 - this you want to be using their test
323:26 - Network right so specifically we're
323:28 - going to be using rinket B so if you
323:30 - don't see Rin could be here what you're
323:31 - going to need to do is click on this
323:33 - little circle here and scroll to
323:34 - settings and you're going to see a tab
323:36 - called Advanced and once you get to
323:37 - Advanced just scroll all the way down to
323:39 - see show test networks make sure this is
323:42 - on and then you should be able to click
323:44 - this drop right hit save exit out click
323:46 - this drop down then you are officially
323:48 - on the rinka bead test now and as you
323:50 - can see I already have some ethereum on
323:51 - here so if you're wondering all right
323:53 - Lance we're on bring could be testnet
323:54 - how can I start get started with this
323:57 - wallet and start getting ethereum what
323:58 - you can do is copy this link right
324:00 - faucets dot chain dot link slash rinkaby
324:04 - right because like you said like you saw
324:05 - we're on the rink of B test net and you
324:07 - want to be sending your wallet if it's
324:09 - on test ethereum so what you can do is
324:11 - make sure while it's connected usually
324:12 - it asks so it's c o or zero X1 is
324:16 - connected let's click metamask is that
324:17 - the same one yes it is so make sure your
324:20 - wallet address is connected I don't need
324:21 - any test link I just need eth click I'm
324:24 - not a robot right so let's remember how
324:26 - much eth I have right now 0.42 all right
324:28 - let's send request okay waiting for
324:30 - confirmation okay cool request complete
324:32 - 0.1 eth was sent to my account because
324:35 - we're on the test net you can send
324:36 - yourself an unlimited amount of Youth
324:38 - and I recommend you do this about like
324:40 - five to seven times just so you don't
324:41 - have to come back to the faucet later
324:43 - especially when you're testing okay so
324:45 - I'm gonna hit close and now if I check
324:46 - my balance on my wallet I have 0.52 each
324:49 - now Okay cool so what I'm going to do
324:50 - now is do this a couple times and I'll
324:52 - come back when I have a couple eats to
324:54 - spend okay so I was able to just do this
324:56 - one more time it takes a little bit to
324:57 - get eighth so I'm going to stop for now
324:59 - and then if I need more I'll come back
325:01 - and get some more later alright so once
325:03 - that's done you have metamask now you
325:05 - have some ethereum you can connect your
325:07 - wallet so I'm going to say connect and
325:09 - click the wall of your choice and again
325:10 - we're using metamask so cool you'll get
325:12 - this little notification and basically
325:14 - just sign saying that you're okay with
325:16 - connecting to third web with metamask
325:18 - and now we can get started and before I
325:21 - move on I want to talk about third web
325:23 - just a little bit and you've seen us use
325:24 - Thurber before but if you weren't there
325:26 - for those videos third web is
325:27 - essentially a software that helps you
325:28 - build manage and create projects easily
325:32 - so if you remember our previous videos
325:34 - we had to create some of our smart
325:35 - contracts ourselves but with third web
325:37 - it does a lot of the heavy lifting for
325:39 - you and I highly recommend this to
325:41 - beginners because look how simple it is
325:43 - to create a smart contract right I'm
325:44 - going to show you you click deploy a new
325:46 - contract and over here you can see a
325:48 - list of pre-built contracts like I said
325:51 - there's a bunch of pre-built contracts
325:53 - so depending on what you want to do it's
325:54 - going to help you set it up so for
325:56 - example what we're going to be focusing
325:57 - on to day is the nft collection right so
326:00 - we're going to be able to create a one
326:02 - of one collection of one of one nfts for
326:05 - example if you think of board API club
326:06 - or crypto punks we're gonna be
326:08 - essentially I'm going to be showing you
326:10 - guys how to make your own collection
326:11 - another thing that's important that we
326:13 - want to show off with this build is
326:15 - we're going to be making our very own
326:17 - marketplace right with the marketplace
326:19 - we can set up you can set up listings we
326:21 - can set up auctions to buy and sell your
326:24 - nfts and it's going to be directly
326:26 - linked to whatever collections that we
326:28 - create so these are the two main things
326:30 - that you want to focus on so let's get
326:31 - started so I'm going to click the deploy
326:33 - now for nft collection and here we can
326:36 - give a name for our collection so take
326:37 - note of what you see here so we're
326:39 - making an nft collection right so the
326:41 - image and name is for what's the name of
326:43 - your collection so what I'm going to
326:45 - call this is I'm going to be calling
326:47 - this collection crypto punks is a
326:49 - popular nft collection and that's what
326:51 - we're going to be modeling it after so I
326:53 - think I believe it's written like punks
326:55 - cool and then for the image what we
326:57 - could do is actually you get the image
326:59 - from openc so I'm going to openc.io
327:02 - and one thing I want to mention is you
327:04 - don't have to make this crypto pumps I'm
327:06 - using crypto punks as an example to
327:08 - model after feel free to put your own
327:10 - unique nfts and use this as your own
327:13 - project all right so like I said let's
327:15 - keep going with this crypto punks cool
327:17 - and what we could do is right click this
327:19 - and save image as so I'm going to click
327:22 - that and again what we could do is click
327:25 - the folder that you want to save it on
327:26 - I'm going to say crypto punks Collection
327:29 - image right name it whatever you want
327:31 - I'm gonna hit save and let's see what we
327:33 - can do here so now that I have that
327:35 - saved go to where it says image upload
327:37 - file and just find the PATH where it is
327:39 - so it's right here I click open and Bam
327:42 - that's going to be our image for the
327:43 - collection all right for the description
327:45 - you can pretty much copy what they have
327:47 - here and again if you're making your own
327:49 - nft collection this is your chance to
327:51 - tell me a little bit about what it does
327:52 - let's see what is the symbol for crypto
327:54 - punks see do they have a symbol I don't
327:57 - think it matters too much what I'll do
327:58 - is just abbreviate it the symbol you can
328:00 - put it whatever you want and I'll put
328:01 - just CP for crypto pumps everything else
328:04 - is going to be determined like this
328:06 - recipient address who is going to get
328:08 - revenue from these assets it's going to
328:10 - be me because I'm creating this
328:12 - collection who's gonna get royalties and
328:13 - royalties are essentially just anytime
328:15 - there's a transaction made on this
328:17 - collection you should receive a little
328:19 - bit of the cut right or if you want it
328:21 - to be somebody else and not the one who
328:22 - created a collection you can change that
328:24 - here okay then you can put how much
328:25 - percentage of royalties of each
328:27 - transaction that will give you I'm just
328:29 - gonna do like 10 okay for platform fees
328:32 - who's going to be playing any of the
328:33 - platform freeze on this account you can
328:36 - just say the one who made it so now this
328:38 - part is important important because now
328:40 - you have to Define what Network slash
328:41 - chain you're working on so if I click
328:43 - select Network let me just exit out
328:45 - click select Network you can see how we
328:48 - can connect this to ethereum right the
328:50 - main net this is where all that you see
328:53 - on openc is right like for example board
328:55 - eight dot clubs on there the actual
328:57 - crypto pumps is on there so if you're
328:59 - making you're ready for production you
329:00 - can use the mainnet for me like I said
329:02 - we're just developing on the test net so
329:05 - I'm going to click rinkaby and I'll just
329:06 - hit deploy now cool so metamask is going
329:08 - to pop up and then it's going to say
329:09 - deploy proxy cool this is how much eth
329:12 - it's going to cost and since we're gonna
329:13 - test now it's gonna not gonna cost much
329:14 - you can go ahead and hit confirm hey
329:16 - let's go so we successfully deployed our
329:19 - smart contract for nft collection and
329:22 - now third web gives you this nice little
329:23 - dashboard where you can mint uh your new
329:26 - nfts right so let's say I want to make
329:28 - more of these guys right I can just
329:30 - click mint which I'll show you guys in
329:31 - just a second but let's take a tour so
329:33 - for permissions you can actually add
329:35 - other people onto this collection to
329:38 - help you mint nfts determine who create
329:40 - new tokens on this contract and that's
329:42 - what the symbol was for you can also
329:44 - transfer tokens on this contract and set
329:46 - all those permissions in terms of code
329:48 - right they updated their documentation
329:51 - here so if you wanted to do any of these
329:53 - things they show you the code and if
329:54 - you're coding in Python they also
329:56 - provide the equivalent there so for
329:58 - example I want to transfer a single nft
330:00 - we're going to need the snippet silk
330:02 - code in in our main project what we can
330:04 - do now is let me show you guys how to
330:06 - Mint more nfts into your collection very
330:08 - cool so setting up that collection was
330:10 - super easy let me just show you how easy
330:12 - it is to now mint unique one of one nfts
330:14 - so to add to this collection you're
330:16 - going to see this beautiful mint button
330:18 - let's go ahead and click it and here
330:20 - same as before we just have to fill out
330:21 - this form that third web provides us so
330:24 - let's say I want to make an nft and
330:27 - again we're modeling cryptopunks so
330:29 - let's click this first guy this is
330:31 - crypto Punk number two number 2025 so
330:34 - let's copy this go to dashboard and just
330:36 - paste that as the name right for media
330:38 - all we have to do is right click this
330:40 - guy save image and again I'm just going
330:42 - to save it all in my folder crypto
330:43 - plunks save and let's say same name
330:45 - let's see if it saves awesome so with
330:48 - that said we can upload the file and
330:50 - there it is so for the description you
330:52 - can give any description you want I
330:53 - don't believe they have a description
330:54 - you just see just created by all right
330:56 - that's fine let's copy that and for
330:58 - traits right this is the cool thing it's
331:00 - so easy to give your nfts traits then to
331:03 - setting it up manually on your own you
331:05 - can just say give it trades like Mohawk
331:07 - dark right two attributes small Shades
331:09 - right so we'll just give this one small
331:12 - Shades oh cool oh actually no it should
331:14 - be the other way around it should be the
331:16 - property is accessory accessory and I'll
331:19 - say small Shades because that's the
331:22 - accessory it has it also has other
331:23 - accessories like my heart dark type mail
331:25 - all right just for fun I'll just do a
331:27 - type and we'll do I don't believe this
331:28 - has to be all capital so let me just
331:30 - make it lowercase
331:31 - accessory and type all right cool I feel
331:34 - a lot better about that again you can
331:35 - add as much properties as you want
331:36 - depending on how unique you want your
331:38 - nft to be but once it's done you can
331:40 - mint to the NFC and just for the quickly
331:42 - you can give it advanced metadata like a
331:44 - background color or just an external URL
331:47 - so let's click mint nft there's now the
331:49 - little message here is mint2 you're
331:51 - going to see the estimated gas fees
331:53 - let's go ahead and hit confirm okay
331:54 - there you go nft minted successfully and
331:57 - let's see if it'll show up if I hit
331:59 - refresh does take a couple seconds
332:00 - because we are working on the test net
332:02 - oh there it is there it is crypto Punk
332:05 - number
332:06 - 2025 this is a description and here are
332:09 - the properties and notice that it's in
332:11 - an array of an object right of objects
332:15 - cool and you can also see who it's owned
332:16 - by and then you can transfer this to
332:18 - other wallets so say like I made this
332:20 - nft and I wanted to give it to somebody
332:22 - off the bat just put in their wallet
332:23 - address here and just hit transfer all
332:25 - right there's also the option to burn it
332:27 - if you don't need it anymore if you
332:28 - don't want it so there you go that's how
332:30 - you create an nft so what I'm going to
332:32 - do is create just a couple more maybe
332:34 - like two or three more so when we make
332:36 - the front end of our app you should be
332:38 - able to see a couple different ones okay
332:40 - so let's do that together
332:43 - let's add basically this row so I'm just
332:46 - going to do this guy wow this one's
332:47 - worth 20.24 e it's literally no joke
332:50 - okay cool let me hit copy same process
332:52 - guys we're just gonna paste this name
332:54 - let's also save the image while we're
332:56 - here this is the one before it
332:57 - apparently the 2024 go and I believe
333:00 - this is all the same that's the
333:01 - description of this one and just for fun
333:03 - let's give it a traits accessory goat I
333:05 - love it accessory oh this is a cool
333:07 - thing because we use the accessory trait
333:10 - before in our collection third web
333:11 - understands that we can just use that
333:13 - again so click accessory and again it
333:15 - doesn't have small Shades it has nerd
333:17 - glasses but I like the go to attribute
333:19 - so I'm just going to say goat and we
333:21 - also have type right and recognizes type
333:23 - which is pretty cool and no so I'm going
333:25 - to hit nft metamask shows up then we hit
333:27 - confirm and just repeat that two or
333:30 - three more times ham bam how sick is
333:32 - that we got two now we have two nfts for
333:34 - our crypto Punk collection and I'm just
333:36 - gonna go ahead and make the rest of them
333:39 - awesome so we have this person and it's
333:42 - gonna be 2023 the want to save this
333:44 - upload file this is 2023 it looks like
333:48 - we're going backwards and description
333:50 - it's the created by okay accessory what
333:52 - do they have as accessory green eye
333:54 - shade let's do a messy hair or actually
333:56 - mole that's an interesting one add row
333:58 - and yes this is the first female one
334:00 - let's do female
334:03 - there you go and just simply mint nft
334:06 - once again now one thing I want to
334:07 - mention while this is loading it's not
334:09 - only images you can upload for as media
334:11 - you can also do audio video HTML if you
334:14 - are familiar with crypto punks at all no
334:16 - crypto pumps if you're if you're
334:17 - familiar with Neo Tokyo at all that's
334:19 - just literally code as the nft which you
334:22 - will own if you purchase it you're not
334:24 - really just limited to just pictures or
334:26 - pngs cool so that's another one and
334:28 - while that's loading we can go ahead and
334:29 - set up the last one I'll do which will
334:31 - be oh this is different crypto pug 2046
334:34 - okay there we go oops we don't have an
334:36 - image just yet save image as okie dokie
334:39 - upload file 2046 we need that created by
334:43 - clown eyes now that one's a unique one
334:45 - so accessory yes is Clan
334:48 - cloud
334:52 - blue
334:54 - okay
334:56 - let me add bro
334:59 - and again type female and recognize type
335:02 - next and we can put email and mint yeah
335:05 - and if you remember in our old videos
335:06 - third web looked a lot different that's
335:08 - because they updated it and basically
335:10 - revamped their code as well as their
335:12 - dashboard to give you a lot more
335:13 - features and make this whole process a
335:15 - lot more streamlined so with that we
335:17 - have officially four nfts in our
335:19 - collection and as you can see well the
335:22 - process for this is we'll make the
335:23 - collection we set up the marketplace and
335:25 - essentially pull all that information
335:26 - from third web to our application
335:29 - alright so that's it for minting nfts
335:31 - all right so let's say you want to make
335:33 - an nft Marketplace that hosts your nft
335:35 - collections right so all you have to do
335:37 - is come back to the dashboard and click
335:38 - deploy a new contract right and there's
335:40 - our cryptophones collection click deploy
335:42 - new contract and let's scroll down to
335:44 - the bottom and click this one that says
335:46 - your very own Marketplace and again if
335:48 - you're curious about more things that
335:50 - you could do that I haven't gone over
335:51 - you can click this learn more button and
335:53 - you can find out a lot more about this
335:56 - under documentation cool so let's go
335:58 - ahead and deploy now and let's create
336:00 - that Marketplace so here we can call it
336:04 - open C Clump all right because that's
336:06 - where we're getting it from yep open C
336:08 - clone and for the image I just have this
336:11 - CP logo here that we could use and you
336:14 - can just put anything for description
336:15 - right this is an open C column
336:23 - awesome and here's the platform freeze
336:26 - again don't need to worry about that we
336:27 - can go ahead and put this on the ring B
336:30 - test net because that's where our other
336:31 - collections are so I'm going to hit
336:33 - deploy now nice there is our metamask
336:35 - notification asking us to sign I'm gonna
336:37 - hit confirm because it's okay and boom
336:39 - successfully deployed contract so now
336:42 - again similar kind of dashboard we have
336:44 - the overview permissions embed code
336:46 - right so what we want to do is list the
336:49 - nfts we want to showcase on that
336:51 - Marketplace what that means is if you go
336:53 - to openc right if we go to again like
336:57 - crypto phones I think I was just there
336:58 - actually awesome but yeah so all the
337:00 - crypto punks over here are the ones that
337:02 - are listed we want to do something
337:04 - similar and tell third web but hey these
337:06 - are the nfps that I want to make
337:07 - available to purchase so if I click new
337:10 - listing here you're going to see this
337:11 - load and look at that of our nfts that
337:14 - we ever made and if you see these this
337:15 - is from our Tinder clone that we've made
337:18 - a while back so again ignore those what
337:20 - you really care about is these right so
337:22 - let's go ahead and make 224 available
337:25 - right and here the listing type we can
337:27 - put Direct in direct it means you can go
337:29 - directly to the buyer who if they buy it
337:32 - auction means you can put it up for bid
337:34 - and people can bid on it and obviously
337:36 - the biggest bid wins but we're only
337:37 - going to Showcase direct right now for
337:39 - the currency this is all the ones that
337:41 - it supports we can say eth and listing
337:43 - price we can say oh one or actually a
337:47 - point
337:48 - zero zero two e or one e okay pretty
337:51 - cheap but again this is on the test net
337:52 - and I only have so much ethereum to work
337:54 - with you can make this price whatever
337:56 - you want so just for fun I'll just do
337:58 - this point zero one so let's create the
338:01 - listing to confirm okay I'll hit confirm
338:03 - okay successfully created listing as you
338:05 - can see and again it just takes a second
338:07 - to show up and there it is crypto Punk
338:10 - 2024 and it's on our nft Marketplace
338:14 - called openc clone so there it is all
338:16 - you have to do now is put the rest of
338:18 - our entities on the marketplace so keep
338:21 - in mind this is not just for the
338:22 - collection as you can see I could put
338:24 - our Tinder nfts up here as a listing it
338:26 - doesn't it's not it's not exclusive to
338:28 - one collection so I'm gonna do the
338:30 - second one 2025 listing price point zero
338:34 - one as well and let's make a difference
338:36 - let's make it this one's slightly more
338:38 - expensive 0.05 and hit confirm and one
338:41 - cool thing is you can use your own
338:42 - custom currency right so if you wanted
338:44 - to use tokens to buy it we can set that
338:46 - up awesome another successfully created
338:47 - listing and notice how we didn't have to
338:49 - write any solidity at all or any smart
338:52 - contracts for that matter their web
338:54 - manages this and helps out with their
338:57 - pre-built contract okay and while the
338:59 - other ones are loading I'm gonna set up
339:00 - the rest of them let's do this crypto
339:02 - Punk this one will be cost zero youth
339:05 - which might be confusing actually so I
339:06 - see we denied the cross listing price
339:08 - point zero three great listing the third
339:10 - one is created we have one more it's
339:12 - this one the 2023 one and this will be
339:15 - probably our most expensive one it's
339:16 - going to be 0.09 okay that was the last
339:19 - one and once it loads that's gonna be
339:21 - all the setup for third web we don't
339:23 - need to come back here unless you want
339:25 - to add more nfts to your collection or
339:27 - add another collection so like I said I
339:29 - hope this was pretty simple for you guys
339:31 - again this is what I recommend if you're
339:32 - just getting started for my beginners
339:34 - out there and for my more advanced
339:35 - developers out there you can do a lot
339:37 - more customizations with the code if
339:39 - you're more familiar with it cool so
339:41 - let's get to the rest of the project
339:43 - awesome so after that's all said and
339:45 - done we should be finished when it comes
339:46 - to the third web dashboard side of
339:48 - things if I ever did want to make a new
339:50 - nft for you guys we can just hop back
339:52 - onto here and just add it so what I'll
339:53 - do is X out anything we don't need and
339:56 - luckily since I saved it I'll just paste
339:57 - back our replit project right here cool
340:00 - and if you ever see this binoculars over
340:02 - here that just means we need to run yarn
340:05 - Dev again let's do yarn dip and we're
340:07 - back see there's a little welcome
340:08 - message welcome to clever programmer so
340:10 - like I mentioned earlier in the video we
340:13 - already have package.json here with all
340:15 - the third web dependencies to get
340:17 - started all we have to do is come into
340:19 - app and we can just start importing them
340:20 - okay so what I'm going to do is come at
340:22 - the top here and we can go ahead and
340:24 - import a couple of things from third web
340:26 - I'm going to be needing chain ID and
340:28 - third web provider all right I gotta
340:31 - make sure I spell this right third web
340:32 - provider there you go capital P right we
340:35 - need the provider because we need to
340:36 - wrap our app with this provider so that
340:39 - we can use third web in our app right
340:41 - chain ID is we got to specify what
340:44 - network we're using and if you remember
340:45 - we're using the Rincon B test net and
340:47 - pass that along to the so you're gonna
340:49 - see me do that in just a second we just
340:50 - need to write from at thirdweb Dash Dev
340:53 - slash react okay awesome let it compile
340:57 - and it should fix itself on that while
340:59 - it's doing that though we can wrap this
341:00 - in parentheses it's telling me import
341:02 - info is not defined which doesn't make
341:04 - sense because this is import so maybe
341:06 - just doing quick refresh is going to fix
341:08 - that awesome so yeah you can refresh it
341:10 - through here where it looks like we're
341:11 - good to go let's set up the provider now
341:13 - I'm just going to say third I'm gonna
341:15 - say third web provider and let's put the
341:18 - component in between them and I think
341:20 - I'm missing an e there you go awesome
341:22 - see no errors we're good to go oops
341:24 - didn't mean to click that let's uh hit
341:25 - refresh cool and now we can pass in that
341:29 - chain ID so what we want to do is hit
341:31 - enter a couple of times I'll press space
341:32 - twice and let's write this attribute
341:34 - called desired chain ID and what we want
341:37 - to put in here is the chain that we're
341:40 - importing from third web and we can say
341:42 - dot ring could be to specify the network
341:44 - now to get connected to the network
341:46 - we're gonna need to use something or a
341:48 - specific RPC to get connected to
341:51 - rinconvi right what we're going to be
341:52 - using is something called infuro awesome
341:55 - so as I was saying in order to get
341:57 - connected to the network we're going to
341:59 - be needing to set up some sort of RPC
342:01 - node and to do that yourself would take
342:03 - a lot of work on infrastructure in
342:05 - creating it luckily there is a service
342:07 - that isn't going to allow us to connect
342:09 - directly to the network to do that we're
342:11 - going to be using something called
342:13 - inferior so head over to this link I'm
342:15 - going to type in over here it's going to
342:16 - be infuro.io is the main website and
342:19 - once you head over there go ahead and
342:21 - connect create an account with them and
342:23 - once that's done let's visit the
342:25 - dashboard and again if you aren't
342:26 - familiar with it we can use inferior to
342:28 - connect to an ethereum Network in
342:30 - seconds as you can see here without
342:32 - creating our own RPC node which is going
342:34 - to save us a lot of time so to get
342:37 - started we're going to have to create a
342:39 - new project on here which is pretty
342:40 - simple underneath the product here is
342:42 - all the things that it supports so we
342:44 - just want to worry about ethereum and
342:45 - for the product name let's create one
342:48 - with called openc clone oops and let's
342:50 - hit create bam Okay cool so these are
342:53 - the main things these are the endpoints
342:54 - that we can use to connect to the
342:56 - network if I were to use this one for
342:58 - our project we'd be connected directly
343:00 - to the mainnet of ethereum we don't want
343:02 - to do that we're working on the test net
343:03 - and more specifically this one right
343:05 - here good old Rincon B so what we'd want
343:07 - is that first link all you need to do is
343:09 - hit copy right come over to not that one
343:11 - to here and for the third web provider
343:13 - pass in that endpoint so type in chain
343:16 - RPC do these double curly brackets and
343:19 - let's define this chain ID right here so
343:22 - chain ID dot ring could be and then
343:24 - let's put colon and let's put quotes
343:26 - here and paste in inferior API link
343:29 - right here luckily uh inferior runs on a
343:32 - freak plan so we have a bunch of calls
343:34 - so we don't need to worry about running
343:35 - out of API calls with them so let's go
343:37 - ahead oh we don't even have to hit
343:39 - refresh because there's no errors and if
343:41 - there's no errors we're good to go so
343:42 - that's going to be it for the app let's
343:44 - head over to the index and make some
343:46 - progress over there awesome so clicking
343:48 - index now we can get rid of all of the
343:51 - starter nextgi stuff so go over to line
343:53 - 66 and eight highlight all of that and
343:56 - press backspace all right as you can see
343:59 - we will have this right here and let's
344:01 - also get rid out of styles we can get
344:04 - rid of image and get ahead okay cool now
344:07 - we'll see Styles is not defined that's
344:09 - okay because we're going to be using
344:10 - Tailwind
344:11 - one thing that I can fix right off the
344:13 - bat is this div is not going to be
344:15 - called container I'll call it wrapper
344:16 - and it's not style it'll be style so if
344:18 - you do know Tailwind we're going to be
344:20 - saying con style here and this will be
344:22 - the style object where we can Define our
344:25 - classes like wrapper sounds good cool
344:27 - the main reason we set up the provider
344:29 - is so we can get started with third
344:31 - width so get started with third web
344:32 - let's import two things from there and
344:34 - we're gonna import
344:36 - all right before I get too excited I'm
344:38 - gonna make this smaller and let's
344:40 - increase the size now let's import use
344:42 - address oops use address and something
344:46 - called use metamask and this is all
344:49 - coming from the third web
344:51 - third web
344:53 - bash Dev slash react
344:56 - Yep looks like we're all good just to
344:59 - quickly explain these are two hooks that
345:01 - third web provides for us to make user
345:03 - authentication a lot simpler if you
345:05 - don't know what I'm saying right now
345:06 - with our app openc we want users to be
345:09 - able to log in using their metamask that
345:11 - we set up third web makes it Easy by
345:14 - letting us use a hook to do just that so
345:16 - it's better for me to just show you by
345:18 - writing out a button here that says
345:20 - connect metamask okay there's our button
345:24 - I can click on this nothing's gonna
345:25 - happen because we're going to need to
345:27 - make an on click
345:29 - before I make on click though let's make
345:31 - a variable and let's call it const
345:34 - connect with metamask and that variable
345:37 - is going to be set equal to the hook
345:39 - that we imported use metamask cool now
345:42 - let's add on click
345:45 - all right oops I'll click is actually
345:47 - like this and when we click we want to
345:50 - run connect with metamask which
345:53 - essentially just holds a function that
345:55 - lets users authenticate with just this
345:58 - one line of code really so let me show
346:00 - you what I mean by hopping over to this
346:02 - link right here and you're going to see
346:04 - connect metamask this link right here is
346:07 - the deployed live link of your Rebel
346:09 - that you can send to your friends like I
346:11 - always say and they can see what you've
346:13 - been up to so for me there is the
346:15 - connect metamask button if I click on it
346:16 - it's going to ask me to connect with
346:18 - minimas I'll say next connect boom so
346:21 - now I'm connected right how do you know
346:23 - I'm connected that's what this second
346:25 - Hook is for use address so one way to
346:28 - see connected is going to be you know it
346:30 - says connected right here right on your
346:32 - metamask so just for the example I'll
346:34 - disconnect or log out and we'll do it
346:36 - again after implementing this hook so we
346:38 - can say const address equal to use
346:42 - address awesome and if you want to know
346:46 - what addresses we can simply just
346:47 - console log it right here so let's
346:49 - cancel logit console.log address cool
346:52 - I'll hit refresh over here and you can
346:55 - see that our console log is telling us
346:56 - that address is undefined you can even
346:59 - see it over here if this is what you're
347:01 - used to more I could Refresh on the site
347:03 - I'll click inspect and I'll say console
347:05 - and again undefined when does that
347:08 - change it's going to change when I
347:09 - connect metamask to my app right so once
347:12 - I connect one of my wallets look at that
347:14 - it's no longer undefined it's going to
347:16 - be ox1c and if you remember what my
347:19 - wallet address is it actually starts
347:21 - with ox1c so that tells me that this
347:24 - address variable is going to be
347:25 - undefined until the user is log in so we
347:28 - could use that for Advantage to
347:30 - authenticate a user so that's super sick
347:32 - look at how much code that wrote just to
347:34 - authenticate user now time to show you
347:36 - how to put it all together cool so that
347:38 - was the hooks there's one trick that I
347:40 - want to show you and I'm going to have
347:41 - to go over these function based
347:43 - components right here so just view with
347:46 - react you can either do things class
347:48 - based or function based this is function
347:50 - based and one key thing is that it also
347:53 - just returns something called jsx which
347:55 - is essentially just HTML that we can
347:57 - write JavaScript in so with that said
347:59 - within this same function we can have
348:03 - another function right so I'm going to
348:05 - say const auth is equal to all right
348:09 - it's a function and what this is going
348:11 - to return is the connect metamask button
348:14 - so now we're removing this and putting
348:17 - that in here okay cool so then what are
348:19 - we turning for home for home just for
348:21 - now it's going to change it's going to
348:23 - be a fragment okay and then in this
348:26 - fragment for now let's just input hello
348:30 - so let's see what happens I'll hit
348:32 - refresh here and we should see Hello yep
348:34 - there it is all right even though I have
348:37 - auth here we're not seeing the connect
348:38 - metamask one that's because I'm not
348:41 - calling the function anywhere all right
348:43 - I'm going to show you guys a neat trick
348:45 - that you can do with something called a
348:47 - ternary statement okay we don't know
348:49 - what a ternary statement is it's
348:52 - essentially a true false or a condition
348:54 - that we can check for too we can do
348:56 - something called conditional rendering
348:58 - with that so remember address right this
348:59 - is going to be undefined until I logged
349:01 - in or in other words if I say address
349:03 - here I'm basically using the address as
349:06 - a condition if a dress exists then right
349:09 - that's this question mark I want to load
349:11 - a div here that says we are logged in
349:15 - okay if address doesn't exist and it's
349:18 - undefined which means we're not
349:19 - connected we should load the auth okay
349:23 - cool and if I load the auth what is auth
349:26 - it's this function right here and what
349:28 - does this function return it returns jsx
349:31 - so that's why we see connect metamask
349:34 - here right so if you go into the main
349:36 - page it said logged in because we are
349:38 - logged in let's actually log out now
349:40 - disconnect look at that the second we
349:43 - disconnected the connect metamask on the
349:45 - game so how do we log into our app this
349:48 - is very basic connect meta mask let's
349:51 - click next let's click connect and boom
349:53 - we're logged in on a very simple way I
349:56 - just showed you guys how to authenticate
349:57 - a user feel free to use this for any
349:59 - project that you have that uses metamask
350:02 - so now that's out of the way let's go
350:04 - ahead and style our object so I'm going
350:05 - to do is say wrapper and let's add a
350:07 - comma here and what we want to do for
350:09 - the wrapper is just going to be Flex H
350:11 - screen items Dash Center and a justify
350:16 - Dash center right we just added flexbox
350:17 - let's hit refresh and we gave it a
350:21 - centered items and justify Center that's
350:23 - why you'll see connect metamask is
350:25 - directly in the center right here so if
350:26 - I refresh the bigger one too you'll
350:28 - notice that it still has the login
350:30 - button over here and again it's really
350:32 - small because it's just like that but if
350:35 - I were to disconnect now you'll see the
350:37 - connect meta mask is in the middle yeah
350:39 - awesome so then what we could do next is
350:42 - after the on click let me just format
350:44 - this what I want to see now is our
350:47 - button have some styling right so to
350:49 - give our button styling let's give this
350:51 - a class name
350:52 - you can set it equal to all right style
350:55 - dot connect wallet button okay oh just
351:00 - realized this shouldn't be there let's
351:02 - separate cool that makes more sense now
351:04 - and here's that little arrow that says
351:06 - we're inside this button still paste
351:09 - boom I like that better cool and with
351:11 - Tailwind all we have to do is Select
351:13 - that class connect wallet button and
351:15 - then we could say I don't know BG blue
351:18 - for example just to show you oh BG blue
351:20 - and then give it a number there you go
351:22 - so now the background is blue so now you
351:24 - can see that I'm selecting this class
351:26 - and I'm styling it down all right so now
351:28 - for the actual styling of this that's
351:30 - just going to be rounded LG order is
351:34 - going to be border black order
351:38 - black px10 and we can say py5 you can
351:43 - also give this a nice transition and
351:44 - we'll say transition all and we'll say
351:47 - hover background black so stop there for
351:50 - a second we hover over it so you could
351:52 - see it turns black all right this
351:54 - doesn't make much sense but I can give
351:56 - you a little preview we're going to be
351:58 - adding a light and dark mode to our app
352:00 - so what I'm going to do next is pretty
352:03 - much style it as if it was one of the
352:06 - themes and you'll see that in a second
352:07 - so if I do hover text white oops now it
352:12 - makes a little bit more sense all right
352:13 - however text white and once we add a
352:16 - dark theme to this right I can write
352:17 - something like dark is hover and then I
352:21 - say background what so this is now you
352:24 - can see that it's thinking that the
352:26 - default theme is dark which is why we're
352:28 - seeing the text turn to White we can
352:31 - just double sure make sure as if I do
352:33 - red 500 here you'll see what I mean
352:35 - there we go cool but notice it's funny
352:37 - because if I remove the this dark now
352:39 - it's just gonna be the default right
352:41 - there's no theme involved so once I
352:43 - theme then I'll add the rest of this
352:45 - time with me so far awesome all right
352:48 - one thing I want to showcase is this
352:51 - real quick so let's just run through the
352:52 - demo once again here's our connect
352:54 - metamask button connect our wallet and
352:58 - we see this rudimentary logged in when
353:01 - we're connected what I want to show is
353:03 - if I disconnect I already have the
353:05 - component that's going to replace this
353:07 - right here so if you look in components
353:09 - you look into home you look into index
353:13 - you're going to see that there's a bunch
353:15 - of code already filled out the main
353:16 - focus of this is to show up how to make
353:18 - nfts and mint them and buy and sell them
353:20 - the front end part of this is only
353:23 - secondary so that's why we're okay with
353:24 - giving some running away if you do want
353:26 - to learn more about front end be sure to
353:28 - watch our other Builds on that topic so
353:31 - as you can see this is all given away
353:33 - it's pretty much follow the same concept
353:34 - that we've done before with tailwind and
353:37 - if you want to know what it does just
353:38 - mess around and calm it up but again
353:40 - main focus is the web 3 stuff
353:43 - like I said since this component's
353:44 - already made we can already use it so to
353:46 - use it since we're exporting default we
353:48 - can name that index anything we want so
353:51 - I'll say I'll call it Main and we'll say
353:53 - from dot dot components slash home home
353:57 - is not a component it's a folder and
353:59 - this is cool if I don't specify it's
354:01 - just going to take the index and what I
354:04 - want to happen is if there is an account
354:06 - connected load that very same main
354:09 - component yep and if you see this module
354:12 - not found top navbar layout that's
354:15 - totally normal while you're building
354:16 - with me because top nav bar layout
354:18 - doesn't exist yet alright that is
354:20 - something we'll make together I'm not
354:21 - giving that away I can't make it too
354:22 - easy so to fix this I'm just going to
354:25 - hop over to home index and let's just
354:28 - comment that top net bar layout
354:31 - and since we took out the comment we
354:34 - also have to remove it here and let's
354:36 - just comment out by doing something like
354:38 - this okay star forward slash and there's
354:42 - a closing one to this which will also be
354:44 - oops curly bracket forward slash okey
354:48 - dokey let's hit Refresh on this guy okay
354:49 - connect metamaskmon in on the preview
354:51 - that's fine what I really care about is
354:54 - this openc one all right so let's make
354:56 - this guy a little bit bigger let's do
354:58 - the split screen Style just like any
355:00 - other ID
355:01 - so let me just inspect element let's see
355:03 - what's going on here okay set refresh
355:06 - connect metamask totally fine set
355:08 - connect next boom okay awesome you're
355:12 - probably like whoa where did all this
355:13 - come from like I said this is part of
355:16 - that home Index right here all of that
355:19 - is set up it's getting static
355:20 - information so don't worry this isn't
355:22 - coming from third web it's just a
355:24 - placeholder for now and again if you
355:26 - don't for me these images aren't showing
355:28 - up because I need to import those assets
355:30 - but for you guys it should be already be
355:31 - there once you Fork it so don't worry
355:33 - about that okay so I just quickly paused
355:35 - it to get all the assets now all I have
355:37 - to do is just add them in there there's
355:39 - eth logo there should be a logo there
355:41 - should be a rap teeth logo and just in
355:44 - case other side Creator as well awesome
355:46 - so now this should show up let's refresh
355:49 - it and Bam bam there we go cool and if
355:52 - you're wondering why this is white once
355:54 - we have a theme that should also fix it
355:57 - let's take out this dark right here just
356:00 - make a note of that to put it back in
356:01 - there and actually let's go ahead and
356:03 - bring that back and as a temporary fix
356:05 - this will be fixed once we build out the
356:07 - app more but for now what we could do is
356:10 - head over to globals and let's just make
356:12 - the background black temporarily boom
356:15 - there we go so that looks a lot more
356:17 - accurate to what we want
356:20 - okay and then also temporarily what I
356:23 - want to do is let's go press Ctrl F find
356:25 - text anytime it says text let's just try
356:28 - to make the text white text
356:31 - okay this one is text Gray let's make it
356:35 - text oops text white Creator name and
356:39 - then we have a blue one that can stay
356:41 - blue but this one right here let's make
356:44 - it X Y okay there's no description
356:46 - container you just see it but when it
356:47 - does come it'll be fine verified should
356:49 - be blue I think this is description
356:51 - container that should be white actually
356:54 - no that could stay gray cool all right
356:56 - cool I think I'm okay with this for now
356:58 - this is a lot bit easier to read let's
357:01 - find where 10K items is now because
357:03 - that's what I want to make white as well
357:04 - items so we have image collection status
357:08 - listings oh I see now it's coming from
357:12 - collection stats that's right so what we
357:14 - can do is go to files click collection
357:16 - stats and now we can go looks like these
357:19 - are directly styled totally fine no need
357:22 - to worry about that cool all right
357:24 - that's enough styling for now with that
357:26 - being said that's gonna be the index of
357:29 - our app now that that's done what I want
357:30 - to do next is start start working on
357:33 - seeing the listing of our app right the
357:36 - actual functionality and start
357:38 - integrating what we did in the third web
357:40 - dashboard over here so to get started
357:42 - I'm going to open up files again and
357:44 - we're going to need to see our home that
357:47 - we have set up for you guys and if you
357:49 - take a look at home and you scroll down
357:50 - you're gonna notice that there's another
357:52 - thing that was commented out from the
357:54 - beginning and that was listing is what
357:56 - holds all the nft cards it's not the nft
358:00 - card component itself but it contains
358:02 - them so that's what we're going to be
358:04 - making today so what I'm going to do is
358:06 - if you take a look listings from
358:08 - listings right so that means we should
358:09 - make that component right here so within
358:12 - home let's click add a file and then
358:14 - we're going to say listing
358:17 - dot JS boom so now we have listings.js
358:22 - and all we have to do now is create that
358:25 - function based component so I can say an
358:28 - arrow function all right and it always
358:30 - returns Js X if it's a component and
358:34 - then from here let's just get the import
358:37 - set up so let me just get the divs oops
358:39 - not the fragment we need actual divs
358:41 - here I'll just make it like this for now
358:43 - there we go and I'll just write the word
358:45 - listing here so we know okay last thing
358:48 - in order to start using this component
358:50 - we need to export it so let's do an
358:52 - export default listings
358:55 - cool so we have the component set up
358:57 - let's head back to home and import this
359:01 - guy back in now it should work and now
359:04 - we should get our listing back okay
359:07 - let's take this guy out and oh expected
359:10 - oh cool there it is there's listings
359:13 - right it's all the way over there
359:14 - because we don't have any sort of
359:16 - styling for it just yet so what I'm
359:18 - going to do is go back to listing and
359:20 - we're going to be working primarily on
359:22 - this component itself so I'm just going
359:25 - to make the window a lot smaller so that
359:27 - you guys can see how's that okay cool
359:29 - now to get started let's import some
359:31 - hooks okay so let's import the most
359:35 - common hooks for react which is going to
359:37 - be use effect and you state I'm going to
359:40 - do from react okay and we also want to
359:43 - convert link from next link
359:47 - cool and here is the key hook that we
359:50 - want to use here it's going to be
359:51 - something called use Marketplace all
359:55 - right so you're seeing the pattern third
359:56 - web provides for us a bunch of hooks
359:58 - that make working with nfts and
360:02 - marketplaces a lot more easier if this
360:04 - is a main interest of you guys so we're
360:06 - going to use use Marketplace from third
360:08 - web and you can kind of assume what use
360:10 - Marketplace does it's going to allow us
360:12 - to get to the marketplace we've created
360:15 - and add it to our app okay so what we're
360:19 - going to want to do next is set up any
360:21 - hooks so the first thing I want to do is
360:24 - Let's Make a variable here I want to say
360:26 - const market place is equal to use
360:30 - market place and let me just show you
360:33 - what it console is all right anytime
360:34 - you're not sure what something is it's
360:36 - pretty smart to just want to log it and
360:38 - see what's up
360:40 - let's see something's going on here oh
360:42 - okay so it's we're not logged into
360:44 - metamask use Marketplace is not defined
360:47 - oh okay I see spelling capital P and we
360:50 - have to log back in because it looks
360:51 - like I logged up oh I see so it's
360:53 - actually not capital P should be
360:55 - lowercase and now we should be good all
360:57 - right no errors refresh for good luck
360:59 - and bam we're backed in there's no
361:02 - problem with news Marketplace awesome
361:04 - but I'm also console logging these
361:05 - Marketplace so let's see if we can see
361:07 - it and if you see listing here use
361:09 - Marketplace is undefined right that's
361:12 - because these Marketplace is a hook
361:14 - that's going to take in a contract
361:16 - address so let's just quickly get our
361:19 - open C clone this is the name of our
361:21 - marketplace right underneath is the
361:23 - contract address which is essentially
361:25 - where on the blockchain are contract
361:27 - lives so what will happen if I pass this
361:31 - in then I refresh Let's see we got oh we
361:34 - got an I8 so that's good all right so
361:36 - the fact that we don't have undefined is
361:38 - a good sign because that means let's use
361:41 - Marketplace is working right so in here
361:43 - we can find all the information that we
361:45 - need any functions like get all right
361:48 - that we might be using well there's one
361:50 - that we're going to need get active
361:51 - listings which we're not seeing just yet
361:53 - but let me just show you how to use this
361:55 - object all right so we now use
361:57 - Marketplace is getting this Marketplace
361:59 - what we can do now is make a function
362:02 - called get listings all right got
362:05 - listings is a function that I'm creating
362:07 - right that's going to grab the
362:10 - marketplace get the active listings
362:13 - which is going to be these guys and
362:16 - store it in state all right so before I
362:18 - start in state let's set up that
362:20 - function so again this is get listings
362:22 - I'm going to do a try catch and catch is
362:25 - going to take in an error and if there
362:27 - is an error we're going to console that
362:29 - logs there
362:31 - okay and then for to try let's do a cons
362:34 - list is equal to a weight which means
362:37 - we're going to wait for this uh function
362:39 - or method to finish before moving on to
362:41 - the next step
362:42 - marketplace.get active listings all
362:46 - right it's going to be a method within
362:47 - Marketplace okay no errors and then
362:50 - let's see if we can console log list
362:52 - right after cool and we're not actually
362:54 - running the function it you know why
362:56 - this is just me creating the
362:58 - instructions but I haven't told my
362:59 - computer when touring that's where the
363:02 - use effect is going to come in handy you
363:04 - don't know it's a react hook that lets
363:06 - you perform side effects or functions at
363:09 - any point during the component's life
363:10 - cycle basically when do you want to run
363:13 - a function if you want to run a function
363:14 - when the component loads you can use
363:16 - effect for that and that's pretty much
363:17 - what I want to do so let's set up the
363:19 - use effect to set up these effect it's
363:21 - going to look something like this and as
363:23 - an argument it's going to take in two
363:25 - parameters so we're going to take in a
363:28 - Anonymous function here that's the first
363:30 - one and this function is going to
363:32 - represent what do you want to do or
363:34 - again like what I said the side effect
363:35 - and for the side effect I'm going to
363:37 - call get listings yeah and if I'm
363:40 - calling get listings all right I'm going
363:42 - to have a second parameter that needs
363:43 - effect which is this array this is
363:45 - called the dependency module basically
363:47 - it says when the page first loads run
363:50 - this and don't run it any other time
363:51 - okay
363:52 - let's hit refresh here and
363:55 - there is but looks like it did log me
363:57 - out so let's just connect again and
363:59 - we're back in business that's the
364:01 - inspect element or console logging list
364:03 - oh we got an array of four right this
364:07 - makes me happy because now I can
364:09 - literally see each asset or each nft
364:13 - right there's four nfts this zero one is
364:16 - oxa right oh x a that's the actual
364:19 - contract address how do I know let's see
364:21 - if I can take a look right this is
364:24 - cryptopunk 224. oh there it is there's
364:27 - the asset the actual description of it
364:28 - so the name is 224. so it matches up 0 0
364:33 - 224. so if you see all your nfts that
364:36 - you minted this is a great start because
364:38 - the next thing I want to do is start to
364:40 - display them the thing is though we're
364:42 - not actually saving them in a state
364:44 - right all we're doing is console logging
364:46 - right so like let's say you know it's in
364:48 - the list but if I were to console log
364:49 - list out here we'd see comma outside
364:52 - we're going to see list is not defined
364:55 - did you see that that's because this is
364:57 - local to this function meaning I can't
365:00 - console log list so how do we bring it
365:02 - outside and into our app that's where
365:04 - the other hook comes in use state right
365:06 - so let's set up our use State I just
365:09 - like to set this up at the very top here
365:11 - I can say const array is equal to that
365:15 - hook okay now this array here right it's
365:18 - not a traditional like array that we're
365:20 - used to basically it's destructuring the
365:24 - array that comes from used it you state
365:26 - if you were to console log used it it's
365:28 - going to show you an array undefined and
365:30 - a function right you can take those two
365:33 - things out by giving it a placeholder or
365:36 - name so I'm going to call that first
365:38 - item in the array listing or listings
365:41 - and the function I'm going to give the
365:43 - name I'm going to call it set listing so
365:45 - let me take out this console log so we
365:46 - don't see any more errors
365:48 - and let me also initialize the state so
365:51 - remember how I said listings if I were
365:53 - to console this is undefined right let
365:55 - me show you listings and now if I
365:58 - inspect element you should see undefined
366:00 - for listing yep listings undefined the
366:03 - reason undefined is because we didn't do
366:05 - something called initializing our state
366:06 - which is going to come here so if I say
366:08 - number four here look at that listings
366:11 - has the value of four I've defined it
366:13 - what it's going to start at but if I
366:15 - were to do set listings that's how I
366:18 - change the four to something else maybe
366:20 - I want it to be a six I'll do set
366:22 - listings parentheses four right there's
366:24 - a couple of little nuances with use
366:26 - state but to use it properly right I
366:29 - want the use state to be an empty array
366:32 - reason being is because the type that
366:34 - I'm expecting this to actually be is an
366:37 - empty array and when we map through
366:38 - something it wouldn't cause any errors
366:40 - if the array is empty okay with me so
366:43 - far awesome so now listings is an array
366:46 - now how do we set that listing you can
366:49 - do that by instead of console logging a
366:51 - list here what if I use that function
366:53 - that I was talking about set list so now
366:55 - if I do set listings here if you look
366:57 - it's no longer an empty array and it
366:59 - might be confusing right because we were
367:01 - console logging in the list so why don't
367:03 - we just refresh it we're not console
367:04 - logging list anymore so we shouldn't see
367:06 - an array from that we should see an
367:08 - array right because of this line it was
367:11 - empty but once we ran our use effect
367:13 - that runs this get listings now I can
367:17 - call console log listings anywhere in my
367:20 - app cool you get the idea awesome right
367:23 - so if I did want to put it in my jsx I
367:26 - could I can map through this and make an
367:28 - nft card for each nft cool so that's the
367:33 - functionality I'm going to what I'm
367:35 - going to do next is let's work on the
367:37 - jsx what I'm going to do next is X out
367:39 - this console because now we have the
367:41 - idea and to work on the jsx let's start
367:45 - naming our divs right so we don't need
367:47 - this listing anymore we do need to get
367:49 - started though is our style object all
367:52 - right so we'll come to the top here make
367:55 - some space cons style is equal to object
367:58 - all right so now when I say
368:00 - style.wrapper or something like that
368:01 - we're not going to get any errors which
368:03 - is beautiful so like I just said the
368:06 - first div oops the first div is going to
368:09 - be style dot wrapper okay and let's see
368:13 - style that wrapper cool what I want to
368:16 - do with this wrapper is something like
368:18 - we did before and it's going to be
368:20 - called conditional rendering because
368:22 - depending on the condition I'm going to
368:24 - render different jsx so basically if the
368:27 - listings dot length is greater than zero
368:31 - right if I ask you guys when is the
368:32 - listings that length zero yep exactly
368:35 - you got it Joseph right when you look at
368:39 - this array when it first loads we had
368:41 - the empty array so what's the length of
368:42 - that it's going to be zero when is the
368:44 - length greater than zero that's when use
368:46 - effect runs our function and we load it
368:49 - with our four listings so basically what
368:51 - I'm saying is once we have our listings
368:54 - loaded in what do we want to do a
368:56 - question mark is the event what I want
368:58 - to do is jsx so temporarily I'll put a
369:02 - fragment here and I'll say oops and I'll
369:05 - say oops put listings here yeah just for
369:09 - now just to get the idea but once that's
369:12 - done I'll close off that parentheses and
369:15 - then I'll say if listings.length is zero
369:18 - then we can have this little loading
369:21 - screen so I'll say div load it okay oh
369:24 - and I think I still need this
369:25 - parenthesis here wait okay so we still
369:28 - need loading and let me just fix this
369:29 - parentheses real quick should be a quick
369:31 - fix it's just an extra parenthesis right
369:33 - here and Bam Okay cool so which one do
369:36 - you think is loaded put listings here or
369:37 - loading and if you said put listings
369:40 - here you'd be correct I can see it right
369:41 - there I can use my pen so I can show you
369:44 - guys there it is put listings here right
369:47 - that's because the listing loaded but
369:49 - let's see if you guys can spot the
369:51 - loading okay loading right right there
369:53 - and then put listings here that means
369:54 - it's a little it cool so we just have
369:57 - something to load while we get our
369:59 - listings what I want to do is obviously
370:01 - make this a lot nicer right we don't
370:02 - want this this text what I want to do is
370:05 - map through it all right so what I can
370:08 - do is put this curly bracket here and
370:11 - let's do a listings question mark dot
370:14 - map okay and then from here to use the
370:17 - map we need to takes in an anonymous
370:19 - function and now we could get started
370:21 - cool so carrying on if I want to make
370:24 - the return implied of an error function
370:26 - I actually don't need this one this
370:28 - curly bracket right here what I really
370:30 - need though is another parenthesis right
370:32 - just to match up with this one
370:35 - cool so now I can get started basically
370:38 - if you don't know what map is it's going
370:39 - to iterate through an array and you can
370:42 - give each item in that array a name so I
370:45 - could call it item but really each item
370:47 - is a listing right this is just the
370:48 - variable name and what I'm saying here
370:50 - is for every listing I'm going to make
370:54 - oops I'm going to make nft card
370:58 - component so let's see if this works out
371:01 - say refresh oh it wants me to connect
371:03 - loading nft card here nft card nft card
371:06 - here why do I see four nft cards here
371:08 - that's because there are four items in
371:11 - this array and for every item in the
371:14 - array I'm making this div right the
371:18 - difference now is I want to be making a
371:19 - component instead of a doom right so
371:21 - it's making a component we're gonna have
371:23 - to create that component so I'm not
371:26 - going to style it yet but I'm going to
371:27 - quickly set up that component by going
371:29 - into home clicking it and adding a new
371:31 - file the new file is just simply going
371:34 - to be called
371:35 - nftcard.js cool and then we set up the
371:38 - empty card const and ft card equal to
371:42 - empty array and returns jsx and you can
371:46 - put a div here that says ft card
371:49 - component all right so we know it's
371:50 - there and we also need to export default
371:53 - and ft card so that we can import it
371:57 - awesome that's done let's head back to
372:00 - the listings and let's import it all
372:03 - right and that's pretty much the last
372:04 - import NFC card from dot forward slash
372:07 - nft
372:10 - cool they should just get refreshed and
372:12 - the T card is not defined oh I must have
372:16 - spelled it wrong let's see what we got
372:17 - yep there's my camel case should be fine
372:21 - now yay okay cool we're good to go get
372:24 - back to that listings and we can see an
372:27 - ft card here but let's try now to write
372:30 - nft card
372:33 - yes so now it doesn't say nft card here
372:35 - it says nft card component so now again
372:37 - with that same logic for every listing
372:40 - in the array we will make nft card
372:42 - component so now let's build on this
372:44 - right to build on it what I want to
372:46 - happen now is let's use that link for
372:48 - what we're going from next and in that
372:50 - link it's going to take in an href that
372:54 - href is going to have a template literal
372:58 - here so basically what's going to happen
372:59 - is if I click that nft card I should be
373:02 - taking taken to a page that has that nft
373:07 - card on itself so if I were to go to for
373:11 - example let's go back to openc actually
373:13 - open C search up crypto punks what I
373:17 - want to simulate is if I were to click
373:18 - on an nft card we should see the nft
373:21 - cards page and that's what the Euro URL
373:24 - that we want to copy here right it's
373:26 - going to be assets the listings contract
373:29 - address and then I believe this right
373:31 - here is the listing ID so we're gonna
373:33 - copy that same structure so if you
373:36 - remember it's going to be slash assets
373:38 - slash curly bracket uh dollar sign color
373:41 - bracket which is a template literal and
373:43 - it's going to take listing right how do
373:45 - we get that listing in the arrays
373:47 - contract address well you're gonna have
373:49 - to call the object and do something
373:50 - called dot notation which is dot asset
373:53 - contract address which will then return
373:56 - the value at this key which will be
373:59 - something like this what is this n of T
374:01 - nfts contract address or in other words
374:03 - where does this nft live on the
374:05 - blockchain Okay cool so we have that
374:08 - we're not done yet though because
374:09 - there's another slash and we're going to
374:12 - write a template literal and how do we
374:14 - get the ID of the listing if you
374:15 - remember how we got the listings
374:17 - contract address listing has an
374:19 - attribute just called ID and now we're
374:22 - good and to get to that link we're going
374:25 - to need an a tag within in between this
374:28 - link here so a this is an anchor tag
374:30 - right we don't need to put an href on
374:32 - this because it's taking care with next
374:33 - it's going to make that page and put
374:36 - that nft card in there cool all right so
374:38 - now if I click this oops not only do we
374:40 - need an href here we're also going to
374:42 - utilize a function that's within map
374:44 - right anytime you map through an array
374:47 - and make a component or generate jsx
374:49 - it's going to need a unique key prop so
374:52 - what we could do is for another
374:54 - parameter in map called index it doesn't
374:57 - have to be called index it can be called
374:58 - key but basically for every listing it's
375:02 - going to generate a number one an
375:04 - increment two three four so we're going
375:06 - to use that to Advantage by saying the
375:08 - next line here key is equal to
375:11 - index okay that should be it now let me
375:15 - just test if it's clickable hey page not
375:18 - found but let's look at the URL all
375:19 - right let's make this bigger does it
375:21 - match up to what we want it's our
375:22 - website slash assets contract address
375:24 - and two all right that's the ID of the
375:28 - card we clicked and again it's going to
375:29 - say page not found it's because we
375:31 - didn't make that page yet so that's
375:33 - totally fine but we just know that it's
375:35 - set up for that okay amazing all right
375:38 - so there's our nft card components let's
375:40 - see is there anything else that I need
375:42 - to do no what I'm going to do is I think
375:44 - it doesn't really matter that much but I
375:46 - want to put the key at the top here cool
375:49 - should be the first thing I'm pretty
375:51 - satisfied with the functionality I'm
375:53 - just going to quickly add The Styling
375:55 - now which it's not going to take much as
375:57 - you saw we only made a wrapper div so
375:59 - that's what I'm going to write here
376:00 - wrapper
376:03 - and the wrapper is going to have
376:04 - marginato and it's gonna take in a grid
376:07 - Max with fit then we can give it a flex
376:11 - of one followed by a grid column dash
376:16 - one all right this is us formatting the
376:19 - listing so you can see each nft card
376:21 - nicely all right from there it's going
376:24 - to have a gap of eight gap of 8 p-10 a p
376:29 - Tash 24 and MD grid Dash columns and I
376:34 - am using grid to style this listing but
376:36 - you could use flexbox or you could use a
376:38 - combination of both you could still use
376:40 - whatever styling fits you if you're more
376:42 - experienced and again this is for
376:43 - beginners if you don't have experience
376:46 - feel free to just follow what I write
376:49 - and in other videos I'll go more in
376:51 - depth of what the styling does oh the
376:54 - grid Dash columns Dash three whoops and
376:57 - then let's make extra large
376:59 - columns-4 I could do 2XL grid columns
377:03 - Dash five okay cool this should be good
377:06 - unless I spelled anything wrong but as
377:09 - you can see look at our nft card
377:10 - component it's now in this nice row
377:13 - right you can imagine those cards being
377:14 - in there but look what happens the way I
377:16 - styled it it's pretty responsive if this
377:18 - is the width it's going to show all the
377:20 - components in a line if I make it
377:22 - smaller like this then it's going to go
377:24 - back into this kind of column that's the
377:25 - cool part about grid so that's what all
377:28 - this does and let me just double check
377:30 - is that everything I think so so cool
377:32 - there you have it guys that's the
377:34 - listing component so we're getting
377:36 - closer and closer to actually displaying
377:38 - the nft but we know that the piece of
377:40 - data is here so let's work on the nft
377:42 - card next
377:43 - okay so working on the nft card one
377:45 - thing I want to do is pass down some
377:47 - props to that nft card
377:50 - right so what do I mean you can pass
377:52 - down information to components or to a
377:55 - component's child using something called
377:57 - props right so if I ask you guys what is
378:00 - listing right you know that listing
378:03 - right it's inspect element
378:06 - listing is going to be each individual
378:09 - item in the array and for each
378:11 - individual item I will make a unique nft
378:13 - card that's why we see four but for
378:15 - every nft card I want to pass down
378:19 - that list basically pass down this
378:23 - object to the individual nft the unique
378:26 - nft all right so if I do something like
378:28 - this
378:30 - [Music]
378:31 - okay no errors I just passed down this
378:35 - first n of T to
378:38 - that first nft card I just passed down
378:41 - that second entity to the second nft
378:43 - card right so in theory
378:45 - if I were to go to the entity card
378:47 - component
378:49 - how can I get that listing right I can't
378:51 - do console.log listing let's say
378:53 - something like listing is undefined
378:55 - ready
378:56 - yeah listing is not defined so how do I
378:58 - get it so you saw me you saw me pass
379:02 - down the prop to the nft card I then
379:05 - have to I call accept the prop so to
379:08 - accept the prop you just have a props
379:11 - here and now we can cancel out that's
379:13 - what the parameter is for in the
379:15 - function based component so I say
379:16 - console.props
379:18 - shouldn't have any errors anymore it
379:19 - must mean to connect short loading
379:22 - and nft card component all right I'm
379:25 - also going to just comment out the
379:27 - listings because we get the idea
379:29 - let's clear up our console
379:31 - okay cool
379:33 - let's do a console and now we see a lot
379:36 - of objects right that's supposed to
379:38 - represent
379:40 - bam our props
379:42 - there it is right
379:44 - so there's our listing and each nft card
379:47 - is going to have the each you know
379:50 - entity so there's crypto Punk 2024 as
379:53 - the first object
379:54 - then we have cryptopunk 124 again right
379:57 - it's just repeating sometimes
379:59 - let me see you shouldn't have all 2024s
380:04 - ah there it is 2025 finally there's some
380:06 - duplicates here if I open up this one
380:09 - 20 25.
380:10 - I think it just did it three times for
380:12 - each but it didn't actually generate
380:14 - that 2046. so you get the idea it's
380:16 - console logging that nft card
380:19 - that's how you get a props but how do I
380:20 - get the actual uh contract adjusted each
380:25 - or in other words the information that I
380:27 - need
380:28 - well if you look at the object if I do
380:31 - something called props right
380:35 - dot listing
380:37 - right
380:38 - then I should just be the object
380:42 - let me just see inspect element
380:44 - all right we're breaking down this
380:45 - object
380:46 - now it's just the asset instead of an
380:48 - object with the listing but now we want
380:51 - to know I want to get to the asset
380:54 - okay so I'm Dot props.listing.asset
380:57 - there we go so now it looks a lot more
380:59 - clear this is the asset itself right but
381:01 - what if I just want the name you can dot
381:03 - name so this is practicing dot notation
381:05 - for the new people getting into uh
381:09 - development right it's not necessarily a
381:11 - blockchain thing cool so now we got all
381:13 - the names 24 25 46 and 23. I'd always
381:16 - prints it twice for some reason so if I
381:18 - wanted to display the name right instead
381:21 - of saying nft card component here what
381:24 - if I just take whatever in the console
381:25 - so I know the console log is showing it
381:27 - like eight times but
381:29 - if I put this here as a div look what
381:32 - happens
381:33 - look at that so now we're getting closer
381:35 - and closer to what the final product is
381:38 - supposed to look like which is crypto
381:39 - Punk and showing all of the names but
381:42 - what if I wanted the price well you did
381:44 - the same thing that price instead of
381:45 - name or a buyout currency whatever it is
381:48 - although it is going to be annoying if I
381:50 - have to write props.listing dot blah
381:52 - blah blah blah blah but we can make it
381:54 - shorter by taking advantage of it and
381:56 - doing something called the structure so
381:59 - let's put this back to nft card
382:00 - component and let me show you what I
382:02 - mean so
382:03 - if you remember in
382:06 - listings we destructured an array by
382:09 - saying const array equals use state
382:11 - right we can also destructure objects
382:14 - all right to the structure objects
382:16 - put the object here
382:18 - and then
382:19 - say the key name that you want to pull
382:22 - out so I'm going to say listing right
382:24 - all right that's this part here
382:26 - so now you're going to see that props is
382:27 - not defined first reason is because
382:30 - there is no crops object that I'm
382:33 - putting passing here but if I were just
382:35 - to remove that whole thing and just say
382:37 - listing the asset.name
382:39 - all right then refresh this for good
382:40 - luck
382:41 - connect metamask
382:43 - loading boom there's nft card component
382:47 - and we still
382:49 - get the name without saying prop so
382:51 - later on when I'm you know putting
382:53 - everything in its jsx form right I don't
382:56 - have to say prop so let me just show you
382:58 - what that would look like now
382:59 - yep so if I had multiple keys I would
383:02 - just destructure all of them here
383:04 - and again it's all personal preference
383:06 - but as you can see there it is and
383:09 - there's all the names still same thing
383:10 - different way many ways to do one thing
383:12 - I personally like this way so this is
383:15 - what we're gonna do so I don't need to
383:16 - console log anymore because I think you
383:18 - guys get the idea
383:19 - cool
383:21 - so now that we have props out of the way
383:25 - and you understand it let's go and work
383:27 - on our Imports which is going to be
383:29 - image from next image
383:32 - and we can also import
383:37 - a i outline heart
383:41 - from react Dash icons yeah
383:46 - awesome
383:47 - and while we're here let's make that
383:49 - style object so we won't get that style
383:52 - undefined air again
383:53 - set the skeleton up for it and now
383:56 - right we're going to write the rest of
383:58 - the jsx all right no hardcore
384:00 - functionality here just go to all front
384:02 - end and I'm not going to spend too much
384:04 - time explaining it because I want to get
384:07 - to the functionality that's what you're
384:08 - here for you clicked on this video
384:09 - because the blockchain
384:12 - cool
384:13 - so setting up the main div again
384:18 - nope
384:19 - there you go
384:20 - what I want to do is give this guy a
384:22 - class name
384:24 - nope
384:25 - class name is equal to
384:28 - style dot wrapper okay and then within
384:31 - that div we have another one this one is
384:33 - going to be
384:34 - oops
384:36 - class name keep doing that class
384:39 - Nami
384:41 - equal to style dot image container
384:46 - okay and in that div this is where we're
384:49 - going to make use of that image
384:51 - and in this image
384:53 - we want to make
384:56 - class name
384:58 - of style dot entity image but not only
385:02 - that we want to say the source of this
385:04 - image it is right we're going to make
385:06 - use of a listing now all right you ready
385:08 - listing dot asset dot image right so
385:12 - based on this what do you think it's
385:13 - going to give us right the actual image
385:15 - itself and we need to style it or else
385:18 - it's going to be
385:19 - varying in size but we'll say 340 that's
385:22 - what I have for you width is equal to
385:29 - 340
385:31 - and ALT equals to nft cool
385:35 - so
385:37 - click connect metamask let's see if it
385:39 - works cross fingers crossed
385:41 - send valid source prop oh okay cool it's
385:45 - because we have to configure our next
385:46 - config which is totally fine
385:48 - okay so let me just double check let's
385:51 - go scroll down here go to next config
385:53 - and let's see what we got
385:56 - yep that's why so if you want to use
385:58 - images what we're going to have to do is
386:00 - tell our next app hey these images at
386:03 - this URL is okay so we want to say
386:06 - images domains and right here and I have
386:10 - the list that we're going to want to use
386:14 - all right it should be all of this boom
386:16 - this Google user content.com and the
386:19 - Gateway ipfs cdn.io
386:23 - so
386:24 - there you go so now it should be fine
386:26 - I'm going to head back over to the nft
386:28 - card page
386:30 - and let's see what happens
386:32 - and refresh
386:33 - okay connect my mask fingers crossed oh
386:37 - what
386:37 - it should be good to go I'm not sure
386:40 - what's happening
386:41 - let me try to reset the server
386:44 - so what I'll do is hit refresh here
386:47 - on the actual page itself
386:49 - yep and it's going to say can't find
386:50 - Ripple no problem at all
386:52 - you have to do a yard
387:00 - let it compile for a second and once you
387:02 - see that white screen feel comfortable
387:04 - doing this
387:05 - and we should refresh this
387:08 - okay connect meta mask loading okay
387:11 - let's go we got pictures and I like that
387:14 - way better than it's saying nft card so
387:16 - for every nft card
387:18 - we make that and
387:21 - mechanic also it's clickable and it
387:23 - leads to the page but again page doesn't
387:25 - exist yet but we're getting so much
387:26 - closer right I have a saying where if
387:29 - not out of 10 times your coding you feel
387:31 - like a dog but if one of the 10 times
387:33 - you feel like a G right
387:35 - then
387:37 - it's all worth it so I get excited when
387:39 - things are working
387:40 - or if I fix an error
387:43 - okay so that looks pretty good to me I'm
387:46 - gonna go ahead and go back to not pages
387:48 - to the nft card right because we're not
387:51 - done yet as excited as I am I wanna add
387:54 - some more styling to this
387:56 - okay so all we did was just image
387:58 - container and I'm acting like I won the
388:00 - championship but that's okay
388:03 - all right so we got this image container
388:05 - here
388:06 - this is the closing div for it and we
388:09 - can make some space and what I want to
388:11 - do is make another div
388:13 - this one I think it has the name of nft
388:19 - lower container
388:21 - all right and it has children of its own
388:24 - that are right over here which is div
388:28 - style dot info container or nft bow
388:33 - content
388:35 - okay
388:36 - and we're gonna have a div here this one
388:39 - isn't gonna have a name but what it does
388:41 - take though
388:42 - is color brackets and I'm going to say
388:45 - listing dot asset dot collection if
388:49 - there is a collection associated with
388:52 - this then we're gonna do and
388:54 - if there is a collection associated with
388:56 - this then we're going to load
388:58 - this jsx
389:00 - okay
389:01 - div class name
389:04 - then we'll say
389:06 - equal to style dot collection
389:11 - title right the collection that the nft
389:13 - is associated with
389:15 - then here we're gonna click in unless a
389:18 - listing attribute again we're listing
389:20 - key which is going to be listing asset
389:23 - question mark dot collection question
389:26 - mark that name so if it has an if there
389:29 - is an asset if there is a collection
389:30 - then just get the name
389:33 - okay
389:34 - then close the div and I'm going to say
389:37 - div
389:38 - over here after the parentheses curly
389:40 - bracket
389:41 - and say class
389:43 - name is equal to
389:46 - style dot nft title and this is where we
389:49 - did it before how do we get the name of
389:51 - each listing it's listing that asset
389:53 - that name
389:56 - cool
389:58 - and it should lead to a closing div
390:00 - closing div we lost the connection
390:03 - bam look at that crypto pump hopefully I
390:06 - can grab this too
390:08 - awesome
390:09 - so from there we can say div
390:12 - class name
390:13 - and this is going to be the price
390:15 - container so I'll say style that price
390:17 - container right because each nft should
390:19 - show how much it's worth yeah
390:21 - and they have a class name
390:25 - equal to style dot price title and we'll
390:30 - say bye at
390:33 - okay and then as a sibling of that div
390:37 - this one is going to be called
390:39 - the wrapped image container oh this
390:43 - should be in the code brackets
390:45 - style dot w-e-t-h which stands for
390:48 - wrapped teeth image container and then
390:51 - image
390:52 - and just like before we're gonna set it
390:54 - up
390:55 - you just need to start up with a height
390:58 - it's gonna be way smaller in the picture
391:00 - because it's just the logo logo of rap
391:02 - teeth
391:03 - and source
391:06 - oh I still should do the width which is
391:08 - going to be the same with
391:10 - and the source is simply just going to
391:12 - be dot forward slash
391:15 - rap e type boot okay with logo dot SVG
391:21 - let's hope it's in the right spot and
391:23 - for the alt
391:24 - it should just be with
391:27 - so that's the image tag after the image
391:29 - tag though
391:30 - and say div
391:32 - and get this one's going to call it
391:34 - price value
391:35 - okay and listing dot buyout currency we
391:39 - need the buyout
391:41 - threats and if you're wondering how I
391:43 - know this is because I already looked at
391:45 - the object and I just looked at the
391:47 - properties and was like oh that's the
391:48 - attribute I need or the key I need at
391:51 - that value
391:52 - so uh that's how you can do it yourself
391:55 - so again if this token is there let's do
391:57 - a display right
392:00 - which will then have quality div closing
392:03 - div and a closing dip right we're not
392:06 - done yet at this point we want
392:10 - we want to make use of the an icon right
392:13 - I think I imported already but it's this
392:15 - heart AI outline heart
392:17 - we're going to be inserting that really
392:19 - soon
392:20 - style dot likes container
392:23 - right there's no actual functionality to
392:26 - this it's just front end and again not
392:28 - the main focus of this build but it does
392:31 - enhance
392:32 - and makes our project look very nice
392:35 - so style dot art icon
392:38 - all right so we're giving the react icon
392:40 - some styling as well
392:43 - and underneath you could say div
392:45 - this one a class name of style
392:48 - dot like counter right
392:51 - and there's a fun way we we get the
392:53 - amount of likes is we do a like listing
392:56 - dot asset
392:58 - stats
393:00 - dot favorites
393:02 - critical way give your question question
393:04 - mark zero
393:06 - okay so then it should be closing dip
393:07 - golden dip put a difficulty dip and bam
393:11 - that is all the jsx
393:13 - and now let's see how
393:16 - ugly or beautiful my bad it is
393:18 - using a relevant image yep I figured as
393:21 - much that's because let's see where it
393:24 - is in Source I mean in public
393:27 - use logo
393:30 - did something I didn't like oh
393:33 - okay yeah it doesn't need a DOT here it
393:35 - should have a leading slash
393:37 - and see if it works oh connect metamask
393:39 - fingers crossed
393:41 - hey and there it is there's the image
393:43 - she looks beautiful amazing so we gotta
393:47 - do last now is give this some styling
393:53 - so first thing I'm gonna do to get
393:55 - started with the styling on with
393:56 - Tailwind is just wrapper and then we'll
393:59 - say relative give it a flex box property
394:03 - by saying Flex
394:05 - say height is
394:07 - 150 pixels
394:09 - and the width of this each card is going
394:12 - to be 340 pixels
394:15 - okay give it a cursor
394:17 - pointer as well
394:20 - now after the cursor pointer let's give
394:23 - it a flex direction of the column
394:26 - and we'll say it rounded LG oh wrapper
394:29 - is I think wrapper is not defined
394:32 - okay so wrapper is defined okay let's
394:34 - just strange all right rounded LG
394:38 - and you could do background white
394:41 - okay Shadow LG there we go starting to
394:45 - see it now transition all
394:49 - duration Dash 300
394:52 - hover
394:54 - shadow
394:55 - 2 XL and dark
394:58 - remember we have a theme that we change
395:01 - from light to dark and that's why the
395:03 - CSS might not look consistent because
395:05 - again we haven't set up the theme
395:07 - BG Dash
395:10 - #but it'll all be fixed once I finish
395:12 - this up so bear with me three three
395:16 - three three I think that's all the
395:18 - threes in here
395:19 - okay cool yeah so I took up that dark
395:22 - property didn't take the background
395:24 - white it thinks it's in dark mode so it
395:26 - did that
395:27 - okie dokie
395:29 - so after that let's do image container
395:33 - an image container all it needs is a all
395:36 - right three four
395:38 - and an overflow hit it
395:43 - pretty much it for image container
395:45 - let's reload the page all right I also
395:47 - want to show you too that the grid is
395:48 - still working oops with our app
395:51 - yep there we go and it's done it's you
395:53 - can see that still needs some spacing in
395:54 - between all that
395:56 - there we go so we'll say
395:58 - next is the nft image itself that we
396:01 - need to style
396:02 - it's gonna be rounded
396:06 - large and then let's do an object cover
396:10 - oh we're still looking for image you
396:11 - never realized
396:12 - yep nft image exists
396:15 - then we can do nft lower container
396:19 - and lower container is going to have
396:22 - Flex property
396:23 - and it'll be height dash one fourth Flex
396:28 - Direction column
396:30 - and give it Justified
396:32 - between
396:34 - p-4 so let's check that out
396:37 - okay
396:38 - looks less cut off which is good
396:41 - and we got collection title
396:44 - okay and collection title is gonna have
396:46 - some small text
396:48 - and the text will be Gray
396:51 - 500 and dark like when the theme is dark
396:55 - the text should be Gray 400.
396:59 - okay nft title is going to be text
397:05 - sem let's get the font to build
397:09 - okay for our price container
397:13 - it'll be Flex property Flex column
397:17 - items
397:18 - and right you can see all the everything
397:20 - moving around here
397:22 - okay
397:23 - justify Center to Center that
397:27 - okay and space Dash Y dash one
397:31 - let me just refresh this
397:34 - okay it's still looking a little funky
397:35 - press container price title
397:38 - text SM
397:41 - for Price title
397:43 - actually price is still extra small
397:45 - and let's do font light
397:48 - for Price Tag
397:49 - and take a look at that
397:52 - okay still filling out the page
397:56 - say something
397:58 - okay that's
398:01 - I have a typo somewhere
398:03 - it's all good let me just see the legs
398:05 - container itself container
398:12 - should be like a container
398:13 - yep
398:15 - there is
398:17 - that last container it's gonna take a
398:18 - flex property item Center justify Dash
398:22 - and and space Dash X-2 hope to
398:26 - and it will take in the heart archon
398:28 - remember we have this styling of this
398:31 - react icon
398:32 - that one will have oops H3
398:36 - with three text
398:39 - Gray
398:41 - and b500
398:43 - I remember if the the theme is dark we
398:45 - want the gray to be
398:47 - text
398:49 - 400.
398:50 - cool then we have likes
398:53 - counter
398:56 - enter
398:57 - and likes counter is going to have text
398:59 - extra small
399:01 - text Gray 500 again
399:03 - if it's light
399:05 - and if it's dark
399:11 - so obviously styling is a little strange
399:14 - here so let me see what I can do about
399:15 - that
399:16 - might be
399:17 - typing something wrong so I'm just going
399:19 - to double check if I missed something
399:22 - lower container all right yeah that's
399:25 - there
399:26 - what about info container oh okay I see
399:29 - the problem now I don't have nft info
399:32 - container
399:36 - that one is going to have a flex and
399:38 - this is where we can justify between
399:41 - okay cool now it's more aligned awesome
399:44 - and I'm not too happy with the styling
399:47 - just yet because this should be next to
399:50 - each other and that's the Wii
399:52 - image container
399:55 - and let's see oh okay yeah that'll help
399:59 - we should get the styling for this so
400:02 - let me just style that real quickly wrap
400:05 - teeth image container
400:10 - okay there you go
400:13 - all right and the reason why it's not
400:16 - lined up is because you have to give
400:18 - this a flex property
400:20 - uh let's do an item center right because
400:22 - now there we go that's more like it boom
400:25 - and now the logo is smaller because by
400:27 - default the line items is going to be
400:30 - stretch but if you do item center it's
400:32 - not stretched anymore so that's why it's
400:33 - smaller
400:34 - then we can do a justify and let's give
400:36 - it some space
400:38 - spacing of X2
400:41 - hey okay that's a lot better and again
400:43 - the text ideally should be white but
400:45 - that is just a theme thing that we'll
400:47 - fix at the end other than that this
400:49 - should be the styling of it so it's not
400:51 - perfect it's not super responsive but if
400:53 - you put some space here this is what the
400:56 - demo looks like awesome
400:58 - there we go okay words coming together
401:00 - we have the nft cards in place and I
401:04 - think that's it for the nft card cool so
401:07 - what I'm going to do next is head over
401:09 - to pages and go into the app once again
401:11 - and I'm sick of not having the theme so
401:15 - let's just get the theme provider in
401:16 - there so let's import theme provider and
401:20 - this is going to help us switch from
401:21 - light mode to dark mode and the really
401:24 - cool part is that it comes in next theme
401:28 - okay next thing you want to do is take
401:30 - that theme proprietor and wrap that
401:32 - around our app as well go ahead enter
401:34 - here the theme provider boom and let's
401:38 - put that component and wrap it inside
401:41 - that
401:42 - okay
401:43 - cool
401:46 - see if that gave us any issues reading
401:48 - some oh that's why my terminal has died
401:52 - let me bring it back in here let's do a
401:54 - yarn depth okay and once we see it
401:56 - loading that's a good sign we can
401:58 - refresh this page and no errors yes okay
402:02 - so the theme provider is successfully
402:04 - wrapped within our app and one thing I
402:07 - could do is test something out now that
402:09 - the theme provider is there I don't have
402:12 - to worry about that background being
402:14 - white or black I can just remove this
402:18 - awesome cool it should just take what
402:21 - the system is what my system is so for
402:24 - example if I go to the header which was
402:26 - provided let me see there's something
402:28 - called use theme right and use theme
402:30 - comes from next themes the same place
402:32 - where the provider came from and
402:34 - essentially what I have set up here is
402:36 - the current theme is going to equal the
402:40 - theme right from theme provider and it's
402:42 - going to be if it's equal to the system
402:45 - then we're just going to use whatever
402:47 - the system theme is system theme is
402:49 - whatever I have set up if I'm on dark
402:51 - mode or not else we're gonna just check
402:53 - what the theme is if it doesn't equal it
402:54 - okay awesome so again if the current
402:57 - theme is dark this is the where the
402:58 - header stuff comes in you're gonna see
402:59 - that Moon icon if I click it turns to
403:01 - light so very cool on that end and look
403:05 - at that the text is now what it's
403:07 - supposed to be as well as this so this
403:09 - is a lot easier on the eyes and that's
403:11 - how we set up the theme provider now
403:13 - heading back to the home folder and
403:17 - going into the index right we had
403:21 - another thing in here called top nav bar
403:24 - layout I think it's time we make it so
403:26 - let's go ahead and make tap nav bar
403:27 - layout component and this component is
403:30 - going to come from a folder that we're
403:33 - gonna call layouts right so we don't
403:35 - have that folder just yet so we're gonna
403:37 - need to basically select and make a new
403:40 - folder but not in components preferably
403:42 - I just want to make a new folder alright
403:45 - so let's click out of that folder and
403:47 - say new folder and this one will call
403:49 - layouts cool so now we have a layouts
403:51 - folder and inside this layout folder now
403:54 - we can make top nav bar
403:58 - layout.js dot JS okay cool now we have
404:03 - the top nav bar layout JS let's make
404:05 - this temporarily small and then we could
404:07 - say function or other words cons top nav
404:12 - bar layout set this equal to return and
404:16 - I'll say div top nav bar yeah and let's
404:21 - also export default top bar layout and
404:25 - this is layout layout okay that's gonna
404:28 - be it for now let's try to see if we can
404:30 - comment it in our index of home is it
404:34 - supposed to be here I don't think so X
404:35 - this out cool so I just moved it outside
404:37 - over there awesome what I was saying was
404:39 - I wanted to go into index and I wanted
404:42 - to uncomment this guy all right it's
404:45 - back in oh I see let's quickly go out to
404:47 - layouts and let's make this equal to the
404:51 - anonymous function I think they'll be a
404:53 - lot more happy if I do that and going
404:55 - back to components home index cool so
404:58 - let's work on this I wanted to wrap the
405:00 - tap nav bar layout around the home okay
405:04 - awesome all right cool don't worry if it
405:06 - looks like that for now we're going to
405:08 - fix up the top nav bar layout because we
405:11 - need to style it so let me go back to
405:13 - the layout let's go ahead and click that
405:15 - and let's get to work okay cool so if
405:18 - you see this again like I said don't
405:19 - worry I want to show you guys what top
405:22 - navbar layout is doing and we can do
405:24 - this by opening up the main project so
405:27 - this is the main project right now it
405:30 - says Doodles here because that was the
405:32 - original and I'm taking the third web
405:34 - contract address and that's why we see
405:36 - this same things so that's it this is
405:39 - the finished build and if I were to open
405:42 - up vs code and let me just remove top
405:45 - nav barley out by commenting it out
405:47 - comment it out comments out the import
405:49 - if I hit save look what this appears
405:50 - over here boom so we can tell that the
405:53 - top nav bar layout is responsible for
405:55 - holding the header or at least that top
405:58 - part so let me just bring it back in and
406:00 - Bam there it's back in there okay so
406:02 - that tells me top nav bar has the header
406:05 - Okay cool so now we can exit up let's
406:08 - check if we have a header right if you
406:11 - look over here header is already done
406:13 - for you as I showed you guys before so
406:15 - this is one of the stuff that we're
406:16 - giving away so what we could do is just
406:19 - import that in here so I'll say import
406:22 - from components slash header slash
406:26 - header oops head
406:29 - okay so it's resolving it and here's the
406:31 - key here it's going to take in children
406:33 - right and what I want to do is call the
406:37 - header here let's see if it shows up
406:38 - that's the real test oh that's right
406:41 - this needs to be a fragment because it
406:43 - needs a parent div nice okay cool we
406:45 - have the open C header set up already
406:48 - this is just we gave to you nothing too
406:50 - special Mostly just front end until I
406:52 - click on this and look at that boom
406:54 - right awesomeness all right so we have
406:56 - light mode and dark mode set up that
406:58 - functionally functionality was given to
406:59 - you guys if you want to understand how
407:01 - it works like I showed you it's simply
407:04 - an on click on the moon icon and if we
407:07 - click it we set theme right we're using
407:09 - you state here to light and if it's
407:11 - light then that theme provider takes
407:13 - place right remember the CSS that says
407:15 - dark that's why we set it up so now it
407:17 - would change cool so definitely if you
407:20 - understand that or if you want to study
407:21 - it more you feel free to take this code
407:23 - and play with it and put it in your own
407:25 - projects so that is the header and the
407:28 - light in dark mode but we aren't quite
407:30 - finished yet one thing I wanted to do
407:33 - was in listing not listening sorry index
407:36 - top nav bar layout there's this pretty
407:39 - neat trick here where I pass in children
407:41 - I pass in children and what you could do
407:43 - now so that we can see the crypto punks
407:46 - and the all the stuff that we worked on
407:47 - before is say main here and then you
407:50 - pass in the children hope not children
407:53 - and look at that connect metamask is on
407:55 - there all right I click on this it's on
407:57 - there I click on this and look my page
408:00 - is up and running I can hit this and it
408:02 - switches right I think it's because I
408:04 - also messed with the styling so let's go
408:06 - ahead and continue Okay cool so if what
408:10 - we learned is that if I write main here
408:11 - I pass in and destructure children I put
408:14 - that children there we should be able to
408:16 - see our app and we have a nice header to
408:19 - go along with it right it's getting
408:20 - really close to the finished project but
408:23 - that is top nav barleya it's getting
408:25 - really close like I just said but one
408:27 - thing that we're missing is I can't
408:29 - click on an individual nft right it
408:32 - should lead to a page with just that
408:34 - image and we should be able to buy it
408:36 - that's the whole reason you're here you
408:38 - want to see how can I make my own nfts
408:40 - my own collection my own Marketplace and
408:42 - how can I go about buying them so I'm
408:45 - going to show you guys how to set up
408:46 - that page and one of the first things we
408:48 - will do is go to pages and what I want
408:51 - to do is make a new file here or
408:54 - actually a new folder right because with
408:56 - next.js you can directly make a page by
409:00 - writing it in here so I could say
409:02 - something like let's add file say
409:05 - lance.js all right so if I say lance.js
409:07 - here and then I make this a component I
409:09 - can say const lens equals Arrow function
409:13 - boom return
409:16 - div oops lens page so save that let's go
409:22 - ahead and go on to here and just add
409:24 - that route oh yeah export default can't
409:26 - forget about that
409:30 - I think I might actually have to be a
409:32 - capital oh no it doesn't have to be
409:33 - awesome so look at that I just made a
409:36 - brand new page that or route that users
409:38 - can go to on app so replit.co Lance will
409:42 - take you to the lens page and just
409:44 - regular react we'd have to use something
409:46 - called react router and set up the
409:48 - routes that way next.js handles that for
409:50 - you which is awesome so again I'm just
409:52 - going to delete this because we don't
409:53 - need it so now let's take this what I
409:56 - just set up to 100 and let's make a
409:59 - dynamic right so if this if I made a
410:01 - page or a file called Lance that takes
410:04 - me to slash Lance but if I make a folder
410:07 - now we're making we're essentially
410:09 - setting up a route for assets oops oh
410:12 - what is this oh we're gonna need to do
410:14 - this because it is a okay I see the
410:17 - problem now so if I make a folder I
410:19 - can't do the assets slash what I want to
410:22 - do right away I'm going to have to make
410:23 - an assets folder and once I make the
410:25 - assets folder from there I have an
410:28 - assets route I should have it at least
410:30 - let me just double check to make sure
410:32 - yeah there's no page found for this but
410:35 - I'm essentially setting up a route here
410:36 - remember if we click on a nft card right
410:40 - where the route that it takes us is
410:41 - slash assets slash that nfts contract
410:45 - address right so to emulate that or set
410:48 - up that route right inside this assets
410:51 - folder I'm going to need to make another
410:53 - folder right but the folder is going to
410:56 - be called brackets address this is how
410:59 - we make it Dynamic cool so bracket
411:01 - address but if you look there's one more
411:03 - thing it takes the zero here is the
411:06 - token ID So within that folder there we
411:09 - can have a file and that file is going
411:11 - to be token
411:14 - id.js and if I were to type that route
411:16 - right now it wouldn't work because again
411:18 - token ID touches isn't set up so again
411:22 - same way I got the Lance page working we
411:24 - can just set up a function based
411:26 - component here I can say const nft
411:29 - because every thing in this page is
411:31 - about the One Singular n of T so I can
411:34 - just call it content of T and make sure
411:36 - you return a div so I'll just make a div
411:39 - for now and we'll say nft page and then
411:43 - we want to export default nft so with
411:46 - that hey there we go we got nft page
411:49 - right we made a dynamic route so this
411:54 - when I go to click on that nft that I
411:56 - did before that first one you can see
411:58 - that at that route the URL is dynamic
412:01 - it's going to show that nfts contract
412:03 - address and its ID and if I were to go
412:06 - back and click this guy 2025 it still
412:10 - takes me to the nft page even though
412:12 - right the URL at the top is different
412:16 - they all lead to the same thing so we
412:18 - have a dynamic route but now instead of
412:21 - a static page we need a dynamic page so
412:23 - that's what we're going to be working on
412:24 - next okay cool cool all right so the
412:27 - goal to make this static nft page
412:29 - Dynamic is we got to set up the
412:32 - individual nft details and essentially
412:35 - get them on this page so to do that
412:38 - let's set up a couple Imports actually
412:40 - so the things I want to import are react
412:43 - hooks these ones use state to use effect
412:45 - you guys are pros at this now and react
412:47 - and we can import another hook right
412:50 - called use router this one's coming from
412:52 - next so next route what I plan to do
412:55 - with use router is you see how this
412:58 - already has the contract address and the
413:00 - ID we can basically get the ID or
413:03 - address from the route and use that to
413:07 - get that listing it's kind of it's kind
413:10 - of kind of interesting way more kind of
413:12 - smart way I'd say to get the nft that we
413:15 - clicked Okay cool so that's going to be
413:18 - explained later but we also need to get
413:20 - import use address and use marketplace
413:25 - right so this should familiar but we're
413:27 - going to probably make another get
413:28 - listing function so this comes from
413:30 - third web Dash Dev slash react okay cool
413:35 - and another thing that we're going to
413:36 - need is something called big number from
413:39 - ethers right there's something that we
413:41 - want to format using big number so that
413:44 - we can read it a lot better in our code
413:46 - and we're gonna get that from ethers
413:48 - cool so we should have ethers because it
413:50 - comes with the forkable Ripple that you
413:52 - guys did so we should be good to go
413:54 - awesome another thing we'll need is top
413:57 - nav bar layout I guess top nav bar
413:59 - layout because we should still see that
414:02 - header at the top right so to get to
414:04 - that route it's actually got the CD out
414:05 - of this folder which will take us to
414:07 - address which will take us to assets
414:09 - which will take us to the main thing and
414:11 - then we go to app layout and get the top
414:13 - nav nav bar layout oh that JS let's see
414:18 - if that's it happy with that am I
414:20 - missing something top number player from
414:22 - Top nav bar layout okay maybe I went one
414:25 - oh it's layout okay cool we're just
414:26 - missing the S because the folder was
414:28 - called layouts that makes sense cool and
414:31 - what I could do is wrap this whole thing
414:33 - and make top nav bar layout the parent
414:36 - div okay top bar layouts and you can
414:39 - take a guess what this is going to do
414:42 - and boom we have a header now for each
414:44 - nft page right so I guess the flow would
414:46 - be something like this I go back here I
414:48 - click on this first nft and we still
414:50 - should have the header and that makes
414:52 - sense okay I think the next uh I think
414:56 - the next smart thing to do now is let's
414:58 - create the skeleton of our jsx where
415:00 - we're going to need to make a bunch of
415:02 - components that make up the nft details
415:04 - such as an image or the info and the
415:10 - sales info so I'm just going to lay out
415:11 - the skeleton now all right so to help me
415:14 - plan out what we should do next or for
415:16 - you guys to visualize right so let's
415:17 - make the jsx and again if I'm making jsx
415:20 - I forgot we're gonna need to make our
415:22 - style object
415:23 - can't Style equals object
415:26 - okay so the very first child of top
415:30 - number Leia should be class name
415:33 - I guess style dot wrapper you got it
415:36 - Hassan okay now for loading
415:43 - right we're gonna say
415:46 - div
415:47 - IDE
415:49 - okay expected oh yeah yeah so this is
415:53 - again this is a ternary statement I'm
415:54 - getting error because I only made the if
415:56 - there is loading right then reload this
416:00 - if there isn't something called loading
416:02 - then what I want to do is load something
416:05 - else the nft image itself so let's
416:07 - quickly set that up just dummy data for
416:09 - now nft info
416:15 - so now the issue is that loading is not
416:17 - defined right yeah loading is basically
416:20 - just a state that I have at the top here
416:21 - so let's set it up by saying cons
416:24 - loading okay set loading is equal to use
416:28 - state right so the default of loading I
416:31 - want it to be false all right so look
416:33 - how it shows nft info like why do you
416:36 - think it shows nft info that's because
416:38 - if loading is false right load nft info
416:41 - if loading is true that means we are
416:44 - loading something set it to True right
416:46 - reason for that is because it takes a
416:47 - while for us to grab the information and
416:51 - then put it there so you don't want
416:52 - people to see a blank page you want to
416:53 - let them know that there's loading so
416:54 - again if you want to make it more fancy
416:56 - and build on top of this instead of just
416:58 - a div that says loading you can add like
417:00 - a little loading screen which we've done
417:02 - before Okay cool so let's fit this back
417:04 - to false because that's what I want so
417:06 - now that you get the idea of what I'm
417:08 - doing here it's a more conditional
417:09 - rendering with a ternary what I want to
417:11 - do next is flesh out the nft info right
417:15 - because it's more than just that so
417:17 - let's take out this give this a class
417:19 - name of style dot nft container because
417:24 - this what I want to load if we're not
417:26 - loading right is going to be the an
417:29 - effective that holds the nft okay where
417:32 - is the code bracket for this okay cool
417:34 - awesome now there's some details on the
417:36 - left of the container inside so let's
417:39 - make a div just for that that's style
417:42 - dot left container okay now in that left
417:45 - container we want the element that's in
417:48 - there div class name style dot left okay
417:53 - and within that div we have our very
417:57 - first component it doesn't exist yet so
418:00 - let me comment it out so it's going to
418:02 - be something like this
418:04 - okay and this component doesn't exist
418:06 - yet but it's going to be nft image all
418:09 - right so inside the container we'll hold
418:11 - the image of the nft that I clicked
418:14 - which should be the first one based on
418:16 - this cool so let's set the skeleton up
418:18 - okay cool
418:20 - so next I'm gonna come below right here
418:22 - and let's set up another div
418:27 - so if that's the nft image this one is
418:31 - also a left element here and inside this
418:33 - left element will have another component
418:36 - but this is not an empty image this is
418:39 - nft details another component that we'll
418:43 - have to make later but you get the idea
418:45 - as I flesh it out okay so closing div
418:47 - closing div let's have the right
418:50 - container set up now so we have a left
418:53 - container usually that means we have a
418:54 - right one so let's style this and call
418:57 - it right okay okay cool I don't know why
419:01 - it's like that maybe if I do this it
419:03 - looks a lot nicer nice
419:05 - in that right container another
419:07 - component goes in here and this one is
419:09 - nft basic info okay another component
419:13 - and a sibling inside that same div it
419:16 - should be in line no it's not it's going
419:19 - to be another one which is going to be
419:21 - where we can buy out fat nft so we're
419:25 - getting close to that buying function
419:26 - now we just gotta set up a page for it
419:28 - long name I guess
419:33 - inside the buyout container oops we'll
419:36 - have another
419:38 - T which is gonna be nft
419:41 - sales info Okay cool so after sales info
419:45 - that closes then we got closing div
419:47 - closing div how did I get here take me
419:50 - back to the assets sorry okay cool boom
419:53 - awesome so yeah this one is closed then
419:57 - we have closing div closing div clothing
419:59 - div and then this should end that jsx
420:03 - the JavaScript inside the jsx then we
420:05 - should have div then top nav bar layout
420:07 - awesome cool so let's see where is this
420:10 - error coming from it should be Style
420:13 - expected but got style oh it's the bio
420:16 - container oh there's been equals here
420:19 - module build failed to refresh hey okay
420:22 - cool if you've seen nothing that makes
420:24 - sense because none of the components are
420:26 - made what I'll do is set up the image
420:28 - and the nft details next
420:31 - now I want to set up the nft details and
420:33 - that's gonna be its own folder under
420:35 - components we have a header folder home
420:37 - folder let's go ahead make a new one
420:40 - nft
420:42 - okay and then within that folder we're
420:44 - gonna make the components from top down
420:46 - so the first thing will be nft image
420:50 - okay so let's add a file then I'll call
420:52 - this nft image dot Js
420:56 - cool so now that we're here
420:59 - make that smaller and let's start some
421:02 - imports let's get image from next image
421:05 - we will also get a react icon from here
421:08 - a i
421:10 - outline heart
421:12 - and from there we do react Dash icons
421:15 - slash AI
421:17 - boom so all those components are there
421:20 - set up the style object
421:22 - and let's also create the components
421:25 - let's say const nft image
421:32 - okay and we'll say
421:36 - return
421:39 - and we'll make that first do
421:42 - image goes here
421:44 - Okay cool so we have that component all
421:46 - set up now what I want to do is head
421:48 - over back to layouts not layout sorry
421:53 - into our assets token address
421:56 - and we can comment this guy out so let's
421:58 - take this here
422:00 - and what we could do now is import nft
422:03 - image
422:04 - so nft image from
422:07 - the path is really long again
422:10 - got the forward slash 10. forward slash
422:13 - component all right so now we're at the
422:15 - components folder so we need to get into
422:17 - nft details and then we can get to the N
422:21 - app t h
422:24 - okay
422:25 - see if it pops up
422:28 - oh my server might have died let me just
422:30 - restart it
422:37 - because I was AFK
422:42 - okay let them just hit Refresh on this
422:45 - type is invalid ah okay
422:48 - I do know one thing that I did forget I
422:50 - always forget
422:52 - this one right here needs to be export
422:55 - default nft
422:59 - hey okay image goes here
423:02 - right so now our nft image is all set up
423:05 - cool
423:06 - okay I just want to talk about how that
423:08 - this nft image should hold you know the
423:12 - assets that I clicked image so to do
423:14 - that we're gonna have to pass it down so
423:17 - we need to head back into that file and
423:21 - just temporarily
423:23 - and a t image let's pass down a prop and
423:25 - you guys don't want to pass down a prop
423:27 - now it's going to be image is going to
423:29 - be what what contains that image it
423:31 - should be listing which I believe we
423:33 - should have asks access to oh we don't
423:36 - Okay cool so that's that means we have
423:37 - to do that next
423:39 - okay so before I could have so much fun
423:41 - and get the listing we're gonna need to
423:44 - set up a function so remember use
423:46 - address and use Marketplace
423:48 - we're going to use that to make the get
423:50 - listing function again
423:52 - okay
423:53 - then we do a try catch in there just
423:56 - like before
423:57 - the only difference that you may notice
423:59 - is that when we are getting the listing
424:02 - and we're waiting for it to happen we
424:04 - will set loading to true all right so
424:06 - we'll see that loading
424:08 - screen happen and while it's loading we
424:10 - can have cons listing right a weight
424:13 - Marketplace and that Marketplace await
424:16 - space market place and Marketplace is
424:20 - holding
424:21 - the you should hold the use Marketplace
424:25 - which I actually need to set up
424:27 - so cons Marketplace
424:29 - it's equal to use Marketplace and it
424:33 - should have the address
424:36 - let's copy that over
424:38 - then we'll do cons address
424:40 - set that equal to use address
424:43 - cool kind of similar to before so now
424:46 - Marketplace should exist and we can get
424:49 - the listing
424:51 - so if you remember the last time we used
424:52 - get listing we passed in this contract
424:55 - address but that's the whole marketplace
424:57 - right we don't want to do that we just
424:59 - want to get the singular nft to get that
425:03 - we're going to need the token ID
425:06 - so if we go over here
425:08 - the token ID of this first one is going
425:11 - to be zero and that makes sense but we
425:13 - can't just pass in zero here we're going
425:16 - to get the direct token ID we're going
425:18 - to make it Dynamic otherwise every
425:19 - single time we're just getting the
425:20 - zeroth one all right to get it Dynamic
425:23 - that's where use router comes along
425:26 - okay so let's go head over to my state
425:30 - here
425:31 - and just to clean this up a bit we can
425:33 - put all these variables within the nft
425:38 - underneath the stick
425:40 - okay oh and forward here let's finish
425:42 - this up console log error sorry about
425:45 - that guys I don't know if you were able
425:46 - to pick it up from the mic but there was
425:48 - somebody mowing their lawn next door but
425:51 - where was I so we have this get listing
425:53 - async error All I'm gonna do is just hit
425:56 - refresh
425:57 - Okay cool so left hand side expression
426:00 - must be a variable or a property
426:03 - access all right
426:05 - so let's just take a look
426:07 - cons get listing just take up all of
426:11 - this
426:12 - and then say
426:14 - how about that
426:21 - oh yep the same thing as before
426:23 - lowercase b
426:26 - and use Marketplace
426:28 - lowercase b
426:30 - that always gets me awesome so this is
426:32 - good let's have async here how do you
426:35 - like that nice okay no more issues with
426:38 - that let's go back to making the
426:40 - function
426:41 - so I think I'll piss oops
426:43 - I'll piss the rest of this here and hit
426:46 - erase there cool so all I did was just
426:48 - put back the try catch
426:51 - return statement is not allowed here
426:54 - or return statement okay I have an extra
426:57 - curly bracket that might have been the
426:59 - error from before
427:00 - and let's just refresh
427:03 - cool there we go so now we have the get
427:05 - listing function it does what it did
427:07 - last time set loading to True which is
427:09 - different and then I was saying how this
427:12 - Marketplace get listing we want to pass
427:14 - the ID how do we get that ID like I said
427:18 - use the router
427:20 - so now
427:21 - what I want to do is go to under address
427:26 - or actually no it doesn't really matter
427:28 - where but I want to put this underneath
427:29 - the other hooks let's say const router
427:33 - equals to eu's router
427:36 - okay
427:37 - and
427:39 - now that we have a router here we want
427:41 - to query this right here and get the
427:44 - token ID all right and that's what this
427:47 - Dynamic essentially placeholder is
427:50 - representing so let's see if we can get
427:51 - it let's see const
427:53 - we called it token ID
427:56 - both capital
427:58 - is equal to router dot query
428:01 - okay and let's cancel log that token ID
428:04 - now cancel that log token ID
428:07 - inspect element you're gonna have a lot
428:09 - of console logs
428:10 - hey there you go so if I refresh just
428:13 - for fun boom undefined right it's
428:16 - undefined until the page loads we grab
428:20 - the token ID the token ID is zero so
428:22 - that's how we can use our URL here and
428:26 - query it so that we can pull our
428:28 - information that way I don't have to
428:30 - pass down every little thing I can just
428:32 - make use of our Dynamic route
428:35 - cool
428:36 - I won't have to hard code zero on here
428:38 - either
428:39 - so what we need to do next is remember
428:42 - that big number thing we're going to use
428:44 - that in the market
428:48 - so I'm going to say inside get listing
428:50 - is big number Dot from token ID
428:56 - okay
428:57 - cool
428:59 - and once that's done we will set the
429:02 - listing to be
429:04 - whatever we get back from this so I set
429:07 - listing to listing
429:08 - and we also want to set loading to false
429:13 - okay
429:14 - uh and again is this function running or
429:16 - not if I ask you guys what do you think
429:17 - yes or no
429:19 - no I just made the instructions if I
429:21 - wanted to run I'm going to start using
429:23 - the use effect to run it when the the
429:25 - page loads right so let's use use effect
429:29 - I'll say use effect here
429:32 - takes two parameters
429:34 - the function that you want to perform
429:37 - and also the dependency module which I
429:39 - only wanted to run once so we leave the
429:41 - dependency module empty then we can say
429:43 - get listing here
429:45 - and over here let's console log listing
429:50 - okay
429:52 - listing is not defined
429:54 - that's right
429:56 - we need to make the state for it so
429:59 - let's set the state so that function
430:00 - actually isn't doing anything let's do
430:01 - const
430:03 - Ing and set listing
430:06 - okay now we are all up to speed
430:08 - and the default should be just empty it
430:12 - can be undefined
430:13 - because I'm not expecting an array on
430:15 - this time so let's see the console yes
430:18 - there you go all right so if I hit
430:20 - refresh here
430:22 - let's run get listing
430:25 - um and just see if this is running
430:27 - console.log okay it's running
430:31 - okay running and now we got it right so
430:33 - when I console listing this is it this
430:36 - right here is the object of our asset so
430:38 - when I say listing dot asset we get this
430:41 - object if I say listing.asset.name it
430:44 - will give me the name of that crypto
430:46 - Punk
430:47 - so yeah I know what this is running now
430:48 - so we'll erase that
430:50 - we can also get rid of the console log
430:52 - listing
430:53 - and let's see what else we could do here
430:55 - I do want to add one more use effect
430:58 - okay
431:00 - and
431:01 - this use effect is going to have if
431:05 - there is no address
431:10 - if there's no address then we want to do
431:13 - a router
431:15 - dot replace and take us back to home
431:19 - and this is going to check every time
431:21 - the address changes
431:26 - all right so I think it took us back to
431:28 - home right now that's fine connect
431:29 - metamask
431:31 - uh also I can turn this to a one-liner
431:33 - because there's not much code in this
431:35 - that's why I do that you can have
431:37 - a one-lined if statement I don't need to
431:39 - put the curly brackets cool let's click
431:41 - crypto Punk 225
431:44 - address is not defined should be
431:49 - oh a dress with two S three S's
431:53 - okay connect metamask
431:55 - I
431:56 - nice cool so if the address changes
431:59 - we'll just get sent back to the main
432:01 - page and we'll probably have to click
432:03 - the connect metamask button again
432:05 - amazing
432:06 - Okay cool so now we got index one as we
432:09 - saw in the console because I clicked
432:10 - that asset at index one
432:13 - okay
432:15 - what we could do next
432:17 - let's see and our TV image is set up
432:21 - I think that should be fine what I want
432:23 - to do next is make sure we're passing it
432:26 - to nft image right we can say image is
432:29 - equal to
432:30 - all right what is the variable listing
432:33 - listing
432:34 - question mark if that's their asset if
432:36 - it has one dot image cool
432:39 - so we pass that down as a prop
432:42 - guys if you remember earlier how do we
432:43 - accept that prop and see it in the
432:45 - console
432:46 - exactly we're going to go back to nft
432:48 - detailed nft image
432:50 - we will then accept the prop
432:53 - so we can destructure it and get the key
432:55 - which is image then let's console log
432:58 - the image
433:02 - so let's see and hope for the best we
433:04 - should see the image for the first one
433:05 - we might not be able to tell it it's the
433:07 - right one the Gateway ipfs
433:09 - oops looks like I downloaded
433:11 - but we'll open it in photos I guess okay
433:13 - it doesn't support it right so that
433:15 - didn't work but there is an easy way to
433:17 - see this all right since we uploaded the
433:19 - image
433:20 - we can just quickly put that in here
433:22 - temporarily
433:24 - say SRC equals
433:27 - pinch
433:28 - will it load
433:30 - oh yeah it's going to need alt property
433:32 - I know I know alt equals
433:39 - image is missing Source property so what
433:43 - do you call this then
433:45 - very strange
433:46 - oh okay I guess it's because the image
433:50 - doesn't load right away so let me just
433:52 - try to wrap this in color brackets
433:54 - I'll say if there is an image
433:57 - then we should load it
433:58 - yeah
433:59 - I'll connect another mask
434:01 - crypto Funk 246
434:04 - okay
434:06 - image with source
434:08 - must use width height okay that's fine
434:11 - that's better than seeing that there's
434:13 - no Source property
434:14 - so I'll just give it the height that I
434:16 - wanted to give it which is 448 and
434:19 - height of the same size
434:22 - are we good now
434:23 - metamask fine
434:25 - and take me to the nft
434:28 - yes okay cool so we saw that I click on
434:32 - the nft I clicked on this one and I got
434:34 - that image at the dynamic URL right just
434:37 - to prove that it's not static and I'm
434:39 - not lying let's click on this one 223
434:42 - hey there we go so this is the basic
434:44 - idea what we want to do now is flush out
434:47 - the jsx to what it's supposed to be so
434:49 - the first thing I'll do is
434:51 - cut this out because we are going to use
434:53 - it later but not right now so I'm gonna
434:55 - say class name
434:57 - style dot wrap
435:03 - okay we got the wrapper and now we can
435:06 - do class name
435:07 - or nft header to be exact
435:11 - here we can have an image oops
435:14 - an image
435:15 - this is just going to hold the eth logo
435:18 - so we'll give it a height
435:20 - we'll say 20.
435:22 - and a width with the same length
435:25 - okay and then the source like I said
435:26 - it's the eighth logo so let's do
435:28 - forward slash eth Dash
435:31 - logo dot SVG
435:34 - then we got kicked out it's okay
435:38 - [Applause]
435:41 - okay that's pretty good for me
435:44 - closing image tag and then the divs let
435:47 - me just get us back in there
435:49 - okay connect to metamask
435:51 - the first one
435:52 - cool there's the eth logo I'm pretty
435:54 - happy with that then another div
436:03 - okay this one will be called
436:06 - style dot likes counter or container
436:10 - sorry
436:11 - okay and then in between
436:13 - I want to have the AI outline heart
436:19 - yep we imported that just to double
436:20 - check
436:21 - then we want class name is equal to
436:25 - style dot heart icon
436:29 - okay and The Sibling for that will be
436:32 - div with the class name of this one is
436:36 - going to be likes count there's one on a
436:37 - sticking out
436:39 - oh and this one should be wrapped in
436:41 - curl brackets
436:44 - okay
436:45 - style dot likes
436:47 - cut all right
436:49 - this one will be hard-coded
436:52 - but if you guys want you can always add
436:54 - your own like functionality and then
436:56 - make this dynamic AI outline heat there
437:01 - you go heart
437:02 - kicked out
437:04 - boom okay
437:06 - nice
437:07 - heart 200 okay
437:10 - then we have closing div here
437:12 - stick those two together but in between
437:15 - that one all right I want another div
437:17 - and this is where our image is going to
437:19 - go
437:20 - sorry luckily I should have it pasted
437:22 - still yep
437:23 - tab
437:25 - so if there's an image all right if that
437:27 - exists and it's already loaded then load
437:30 - the image itself so there we go it's
437:34 - beautiful that's our nft page awesome
437:37 - okay now for some of the styling we got
437:40 - our boy rapper once again
437:43 - and he's just gonna be rounded LG
437:46 - I'll put a combo here
437:48 - give him a border and now this dark
437:50 - thing should start working border
437:52 - transparent
437:55 - and also a dark
437:57 - BG
438:00 - Dash
438:02 - hashtag
438:04 - 3133 now
438:07 - cool
438:08 - okay
438:09 - yep we're in dark mode so that makes
438:11 - sense why we see it then we do nft
438:14 - header
438:15 - this should have Flex as a property
438:18 - I Wanna Give it an item Center
438:21 - and then adjustify
438:23 - between
438:26 - okay I can do p dashboard
438:28 - cool spread that out a bit
438:31 - let's work on the Lex container likes
438:33 - next legs container
438:35 - that one would be Flex items Center
438:39 - justify and space Dash X-2
438:45 - likes container is not defined
438:47 - what do you call this
438:50 - it's fine
438:51 - okay cool Gucci let's do a heart icon
438:57 - and we'll do
438:58 - [Applause]
439:00 - hide a five with a five text Dash gray
439:04 - Dash 500 and a dark
439:08 - text Gray and it should be 400 like we
439:11 - always did like we did before
439:13 - the heart archon we can do likes count
439:16 - next
439:17 - and likes count is just gonna have the
439:19 - text that is small make it like semi
439:22 - bold so we do font semi bold here
439:24 - do text Gray 500 and guess what happens
439:28 - if it's dark it's going to be text Gray
439:31 - 400. okay cool
439:35 - okay and I know you can't see it but
439:37 - once we start giving the container some
439:39 - color it will start to show up
439:42 - oh hold on this is the vs code we need
439:45 - this one so now we have nft image
439:50 - this will be rounded BG
439:53 - I'm sorry rounded Dash B I mean
439:57 - large and an object
440:00 - okay
440:01 - okay
440:02 - so that's gonna be it for the nft image
440:05 - for now let's work on the nft
440:08 - info and then we can do the buy
440:10 - functionality okay don't worry about the
440:13 - styling just yet it's gonna all gonna
440:15 - come together once we make all the nft
440:17 - details components what I care about
440:19 - right now is showing you guys how to buy
440:21 - nfts so to buy the entities that we've
440:24 - created we're gonna have to hop back
440:26 - into the assets page so where is Pages
440:29 - assets and we are back amazing so just
440:34 - to recap real quick we made in a t image
440:37 - next thing I want to make is nft sales
440:40 - info because this is what contains the
440:43 - functionality so the first thing we'll
440:46 - have to do is create a function on here
440:47 - that we can pass down so we have cons
440:49 - get listing but now we need to make the
440:53 - function to actually purchase the entity
440:55 - so it's const by nft and same deal async
441:02 - okay and when we buy energy NFC who
441:05 - should have a try catch block
441:13 - as a quick note for buy nft we're going
441:15 - to be using the third web use
441:17 - Marketplace hook once again and and I
441:20 - know a lot of third web makes it a lot
441:22 - easier for developers to get started
441:23 - with coding but third web is going to
441:26 - have and does have a lot more features
441:28 - that we could Implement if you wanted to
441:30 - take the scale even higher so I did
441:31 - mention an auction you can do a wait
441:34 - list you can do a delayed reveal so
441:37 - those are some features that we're going
441:38 - to be messing around with and you can
441:39 - look more into on the third webs
441:41 - documentation without further Ado let's
441:43 - just console log the error okay and then
441:46 - from here in the buy nft let's go ahead
441:49 - and await Marketplace again right
441:52 - Marketplace is the variable with the
441:54 - hook dot buy out listing right this is a
441:57 - method which is going to let us buy
441:59 - right the listing with that token ID all
442:04 - right and then how many do you want them
442:06 - to be able to buy we'll just say pass in
442:09 - one cool so this is our function and
442:12 - again it's not running just yet what I
442:14 - want to do next is comment out sales
442:18 - info and you're going to see it doesn't
442:19 - exist and they're right we also need to
442:22 - make that component then so under
442:24 - components empty details let's add a
442:27 - file nft
442:29 - sales info I believe nft sales info.js
442:36 - okie dokie now we can say a const n of T
442:39 - sales info equal to function then let's
442:42 - say return sales info okay I won't
442:45 - forget it this time we're gonna export
442:47 - default nft sales info
442:51 - and right back into our Pages let's go
442:55 - ahead and Import nft Sales info so nft
442:58 - sales info from dot slash dot dot
443:03 - forward slash dot slash components I
443:05 - know it's really long components slash
443:07 - nft sales info okay I'm gonna go ahead
443:11 - and refresh module can't find nft sales
443:15 - info interesting pretty sure I did
443:18 - export default module not found oh it's
443:22 - the folder went out of there okay cool
443:25 - for some reason nft card is in here
443:27 - right now d card should be in there
443:29 - let's expand this okay so that's the
443:31 - same okay then what's the issue here oh
443:34 - okay I see now
443:47 - it's slash component slash nft details
443:50 - right there's another folder in that
443:51 - path oh yeah and we can't just return
443:53 - sales info I'll put that in a div
444:04 - text constant does not match you HTML
444:07 - okay sales info all right we're good to
444:10 - go so with sales info we can hop back to
444:15 - our index sorry and not index pages on
444:18 - the assets and we want to pass down two
444:21 - things the first thing we want to pass
444:22 - down it needs to know how much does this
444:25 - nft cost so to do that I'm going to say
444:27 - price is going to be listing because
444:29 - that holds the information dot buy out
444:33 - currency value per token then we also
444:37 - want buy nft to equal the function that
444:40 - we just made by nft awesome so those
444:43 - props are passed but you're not going to
444:44 - see it in sales info because now we need
444:46 - to make use of it okay I just jumped
444:49 - back into sales info and and now let's
444:52 - destructure this is the first time you
444:53 - can destructure more than one thing from
444:55 - an object so the first one thing I want
444:56 - is price and then the buy nft function
445:00 - so just to prove to you we're getting
445:01 - those props that's console log price and
445:03 - buy nft
445:06 - see what we get
445:08 - let's hit refresh it might bring us back
445:10 - and it should have a price for us we
445:12 - will separate it first the price okay so
445:15 - it shouldn't be that number it should be
445:17 - this this display value we're gonna need
445:20 - to update the price so I'm gonna go back
445:21 - to the component yeah you just have to
445:24 - do one more and as like I said it's
445:26 - display value yep a lot of jumping
445:29 - around because we need to talk to the
445:31 - different parts of the component and Bam
445:33 - there you go that's the actual price
445:34 - that we set up way back
445:36 - 0.01 what I want to do next is let's set
445:40 - up a button in here all right by 1080
445:43 - and set on click set this equal to by n
445:48 - of T right because we know the function
445:49 - exists and we should also put the price
445:52 - in here let me make it H2 just make it
445:55 - nice and big price cool so connect
445:58 - metamask let's buy this guy
446:01 - cryptopunk224 and now you can see that
446:03 - the price of this is 0.01 eth and let's
446:07 - just keep in mind our listing here let
446:08 - me just refresh it's been a while since
446:10 - I've been here cool these are our
446:11 - current listings if I click buy nft
446:14 - there it is so we have the buy
446:16 - functionality working and you can see
446:18 - here that this is saying buy right and
446:20 - it's going to cost how much the same as
446:22 - displayed and we hit confirm right
446:25 - shouldn't be any errors okay cool and
446:28 - you should see in your meta mask that
446:31 - this transaction went through right we
446:32 - lost point zero one e there you go
446:35 - that's the buy functionality with third
446:38 - web we went all the way from creating
446:40 - the nft to putting it on the marketplace
446:42 - and then buying it now so all that's
446:44 - really left is to make this look really
446:46 - nice and then demo the app so the next
446:49 - few parts is just front end so let's
446:51 - walk through that part all right so
446:53 - let's go ahead and create the rest of
446:55 - the nft sales infos jsx so let me just
446:59 - clean this up real quick and then this a
447:02 - bit
447:03 - and let's get our Imports out of the way
447:05 - the Imports that we need is we're going
447:07 - to import b s credit card to front fill
447:12 - and Bs fill tag this one's gonna come
447:17 - from react icons once again and the
447:19 - specific react icons it's from is gonna
447:22 - be BS my favorite one
447:23 - so after that we're going to import a
447:26 - outline question Circle
447:30 - then we're going to do an AI outline
447:33 - clock Circle
447:35 - okay then we can do from react icon once
447:38 - again and this one is the AI one I also
447:41 - want to import image from next image so
447:44 - I say from next slash image and we
447:47 - should be good to go from there I want
447:49 - to go up into this div oh set up the
447:52 - style object and now we can start aiming
447:55 - our divs so I'll give this one Styles or
447:58 - style dot wrapper
448:02 - we don't need sales info here anymore
448:03 - and now that you guys understand this I
448:06 - feel comfortable erasing it and we'll
448:08 - put it back when it's relevant once
448:10 - again so inside the rapper div we have a
448:14 - header dip
448:19 - which inside of the header div is going
448:22 - to be header content oops style dot
448:26 - header content
448:28 - inside header content here is where our
448:30 - first react icon is going to go it's
448:33 - going to be AI outline clock Circle and
448:37 - uh these changes should be showing up so
448:39 - I'm just going to hit refresh
448:40 - expression expected oh let me see
448:46 - is it missing a dip oh I see just close
448:48 - this off and then we should be good to
448:50 - go nice makes sense oh look at that so
448:53 - remember when we purchased the nft it's
448:55 - not going to show up on here because
448:57 - once it's purchased it shouldn't be in
448:59 - our listings right it's not available
449:01 - for sale anymore so that's why we only
449:02 - see three of these so our purchase went
449:04 - through I click on this there's the
449:06 - image and we shouldn't see sales info
449:09 - there but we should see the Aeon AI
449:11 - outline clock Circle that's what we just
449:12 - inserted okay then after that it's
449:14 - closing div time and then from here
449:16 - let's make another div call this one
449:18 - style dot main container and I actually
449:22 - want to give a name to this as well so
449:25 - this one will have style dot header icon
449:29 - yeah from this point on there's not much
449:31 - functionality left we're just going to
449:33 - do a lot of styling
449:36 - so this is going to be that main
449:38 - container for our app which should hold
449:40 - all the information next to it inside
449:43 - that milk the main container we're going
449:45 - to have price info container
449:50 - someone write it out style that price
449:52 - info container okay after price info
449:56 - container now we'll have a class name of
449:59 - this one will be a template literal
450:01 - special style dot gray gray text
450:07 - and
450:09 - dial right with another template literal
450:12 - style dot style Dot header icon
450:19 - all right so what I did here is use a
450:22 - template literal to give this div to
450:25 - class names one it has gray text and
450:27 - also has the styling of header icon and
450:30 - now thinking about it this actually
450:31 - should go inside the AI outline clock
450:36 - Circle right that's what you have to
450:37 - stylings gray text and style icon cool
450:40 - so what I should go here though is price
450:43 - info container should have the other one
450:46 - which is still to be literal and it's
450:48 - going to have the gray text style dot
450:52 - create text
450:53 - and the difference between that and the
450:56 - last one that I got confused on was this
450:59 - one has style dot medium font
451:03 - and I wanted to say bayat
451:07 - okay then after we say buy it we can
451:09 - separate this and we can make a price
451:11 - container itself
451:21 - okay and then within that div what I
451:24 - want to do is make another one
451:26 - specifically an image so let's use the
451:29 - image that we're imported and this is
451:31 - where I'm going to have the wrapped eth
451:33 - logo so let's do Source equal to slash
451:36 - wrapped Heath Dash logo dot SVG okay and
451:41 - then let's give it a width and height
451:43 - width is equal to 24. oh it looks like
451:47 - it kicked me out let me just go back in
451:49 - 24.
451:51 - height equal to 24 as well
451:54 - and then for the alt you could just say
451:56 - with
451:59 - all right let's go ahead and click on
452:01 - this guy oh it says width is not defined
452:03 - oh that should be a string there you go
452:06 - makes more sense I want to hit refresh
452:08 - connect metamask okay boom we should
452:11 - only have three and there it is all
452:14 - right so after the image I did want to
452:15 - include a span here and in that span we
452:18 - can do a class name
452:21 - dial dot price
452:24 - and then we could do another price right
452:27 - here
452:28 - Okay click this hey there you go so now
452:31 - we bought the buy at and here is the
452:33 - price right it's starting to come
452:34 - together okay and after we got the price
452:37 - it's gonna be two closing divs here so
452:39 - I'm gonna make some space in between and
452:41 - let's add another class here and the
452:45 - class that I want to add is going to be
452:47 - the buttons container so Styles or
452:49 - Styles dot buttons container
452:53 - within that same div let's add a div
452:57 - with now we're going to have the
452:58 - functionality to buy this nft all right
453:01 - so it's going to need the class name
453:09 - all right and I'm just going to format
453:10 - it like so style all right this one
453:12 - actually needs two so if you want to
453:15 - give it two class names put these back
453:17 - ticks over here and start writing your
453:20 - template literal this will have the
453:22 - style of Button as well as the style dot
453:27 - purchase button
453:31 - okay
453:32 - then I just want to hit enter right here
453:34 - and then I'll say on click this is where
453:37 - we can buy nft right so we have the buy
453:39 - nft function that we imported we're
453:42 - going to add it right here and as far as
453:44 - the text goes we'll use a react icon and
453:47 - the one I want to use is BS credit card
453:51 - to front fill
453:55 - nice so this is what we're going to use
453:56 - to buy and we can give the class name
454:00 - [Music]
454:02 - style dot button icon okay let's see is
454:06 - there anything else I need for this div
454:08 - oh there's is one more right next to
454:11 - that it's a span and the span is just
454:13 - gonna have class name
454:19 - of style dot button and
454:23 - style dot offer button
454:27 - and then we can also make an offer I'm
454:29 - setting this up just in case you wanted
454:31 - to test out the auction feature you can
454:33 - create your own function to make an
454:36 - offer or a bid for that specific listing
454:39 - okay let me see did I do this right oh
454:42 - sorry this is not make offer this should
454:43 - be later this should be four by now so
454:47 - this is by now and then in my notes here
454:50 - this shouldn't be just yet they should
454:52 - actually just have vanilla styling
454:59 - and it's going to be text large font
455:02 - semi bold all right sorry about that
455:04 - guys I got way too excited there should
455:05 - be a closing div here and then in the
455:07 - next one this div is the one that has
455:10 - the offer button so I'll just set that
455:13 - up right now
455:14 - [Music]
455:15 - so temp the back ticks template literal
455:18 - style dot dollar sign template literal
455:21 - style dot offer button
455:25 - okay so there you go so this is the div
455:28 - that contains the buy now button this
455:31 - will be the div to contain the offer or
455:34 - make offer button okay that makes a lot
455:36 - more sense to me and the icon that goes
455:39 - with this is going to be another BS fill
455:42 - with the class name okay so here is
455:45 - where the span goes span class name this
455:48 - one has the same one as the last one
455:49 - it's gonna have text large font semi
455:53 - bold and make up
455:56 - there we go and there you have it that's
455:58 - the jsx and as I was trying to explain
456:01 - before this is the make offer button if
456:03 - you did want to make it clickable you
456:06 - would just add an on click to this div
456:08 - just like how we have an unclick for
456:10 - this diff to bind here you can make a
456:12 - function called make offer okay now
456:15 - let's get into the styling of this app
456:17 - now for the styling we always start with
456:19 - wrapper and let's put this right here
456:21 - and then I'm gonna write out Flex column
456:25 - divide y now we can do our border here
456:28 - and dark divide black okay then we can
456:33 - do a dark rounded LG and then a dark
456:41 - border
456:43 - black
456:47 - [Music]
456:49 - okay just let me double check real quick
456:52 - find one Board of black border dark nice
456:55 - okay so that's it for wrapper moving on
456:57 - to header
456:58 - what I'll add header is going to be Flex
457:01 - as well let's Center those items with a
457:04 - line item Center then we can justify
457:06 - between to just put space in between the
457:08 - items
457:10 - then we can do rounded T large
457:14 - then we can say pix
457:17 - px6 py4 and then dark all right for the
457:21 - Dark theme BG hashtag two six two
457:27 - a 30.
457:29 - okay awesome so there's header after the
457:33 - header we got header content
457:35 - oops I wrote headed screen header
457:36 - content
457:42 - time for header content we want to flex
457:44 - items Center and we do space x two so
457:49 - let's head our icon just want to do a
457:51 - quick refresh just check double check
457:53 - okay
457:53 - okay so far so good after header content
457:56 - let's do header icon then header icon is
457:58 - just going to be height six with six
458:03 - okay this moves a little slightly and
458:05 - then we have some stuff that is gray
458:07 - text like this one so let's set that up
458:09 - great text it's literally just gonna
458:11 - hold our favorite text Gray text Gray
458:15 - 400.
458:18 - okay let me just reload yeah notice how
458:20 - it's like gray or gray I'm not too sure
458:23 - which was like the official one I know
458:24 - it's different in some countries so let
458:25 - me know in the comments below if you
458:27 - made it this far we've done all the
458:29 - functionality I'm just walking you
458:30 - through the rest of the front end to
458:32 - make our app look pretty so if you're
458:34 - still watching this and you're listening
458:35 - to me right now I can know if you leave
458:37 - a comment down below and you say gray
458:39 - and let me know which gray too like is
458:41 - it great with the e or do you guys say
458:43 - gray with a so if I see gray in the
458:45 - comments I know you're watching the
458:46 - video so shout outs to you all right
458:48 - after grade text let's do main container
458:52 - and then let's do space Dash Y dash four
458:56 - rounded Dash B Dash large and then we
459:00 - can say px-6
459:02 - py-4 and for the Dark theme we'll have
459:05 - BG of hashtag three one three three
459:09 - three no so that should be it for main
459:13 - container let's work on price info now
459:15 - price info
459:20 - we're not even on that page anymore yep
459:22 - yep I know I know price info should have
459:24 - a column
459:31 - nice okay cool main container is looking
459:34 - good now and I believe it's price info
459:37 - container yeah
459:39 - I'm going to press info container that's
459:41 - just going to have a space Dash y-1
459:43 - [Music]
459:45 - sap c space okay cool just add a little
459:48 - bit of space there now we also have one
459:51 - for medium font
459:55 - yep if it has medium font we can just
459:59 - say one medium
460:03 - okay we also have a price container
460:05 - price container it's gonna have Flex
460:07 - items Center and a space of x dash two
460:12 - after price container let's actually
460:15 - style the price
460:17 - [Music]
460:22 - text3l font bold okay then we can do
460:25 - buttons container buttons container will
460:28 - be Flex space Dash x dash y nice then a
460:32 - button right this has a little bit or a
460:34 - lot more I mean
460:36 - button is going to have Flex with 14 REM
460:41 - items Dash Center cursor Dash pointer
460:45 - justify Dash Center and space Dash x
460:49 - dash four
460:51 - with a rounded LG py-2 and a text of
460:56 - white that's what the button has all
460:58 - right we're gonna switch it up let's
460:59 - click on this crypto Punk and boom okay
461:02 - curious about this little icon
461:06 - but we'll keep it moving after that
461:08 - let's work on the purchase button and
461:10 - remember purchase button is the one that
461:12 - lets us buy the nft which is this one
461:14 - okay and that purchase button is just
461:17 - gonna have a blue background which I
461:18 - believe is the same as the one in openc
461:20 - nice so then we can make the offer
461:23 - button and the offer button is going to
461:25 - have a border black and a PG of hashtag
461:29 - three six
461:32 - three eight four zero there we go make
461:35 - offer and the button icon is going to be
461:41 - h-6 with a width-6 okie dokie we're
461:46 - getting there I love the look of these
461:48 - buttons right it really is just like the
461:51 - open C ones I am curious about this
461:53 - because it does look a little funny
461:55 - let's see all right this is our page I
461:58 - also just brought up the finished one
462:00 - crypto punks it's looking pretty close
462:03 - I just click on this the image is not
462:06 - working on this for some reason but
462:08 - let's see yeah we're missing the sale
462:10 - ends June 1st and this question mark
462:13 - icon so I believe that should go right
462:15 - here okay we can quickly make that what
462:18 - I could do is after the AI outline we
462:21 - can have a div here
462:26 - and this is where we can use that gray
462:28 - text again with the E and then after the
462:30 - gray text I can say sale ends June 1st
462:36 - 2022 at 8 20 p.m GMT this is static if
462:41 - you wanted to make it more Dynamic you
462:43 - should find a way to get the date okay
462:46 - cool oh and I actually think this should
462:48 - go in this div
462:51 - and just take a look okay that's looking
462:53 - better yeah if you're wondering why this
462:55 - is messed up that's because we need to
462:57 - get this red portion and fix it up
463:00 - essentially it'll look back better when
463:01 - I make the rest of the nft details so
463:04 - let's see sale ends June first I also
463:06 - I'm gonna need this question mark right
463:08 - here okay let's get that working so
463:11 - let's do let's do AI outline question
463:15 - right what is it called question Circle
463:18 - question Circle
463:21 - give this man a class name style Dot
463:28 - header
463:29 - [Music]
463:30 - icon
463:36 - there we go and this should also be in
463:39 - here still yeah this shouldn't be there
463:46 - okay now it's up there cool
463:49 - there should be this background here why
463:51 - isn't that showing up that is in header
463:54 - content what we got for Adder content so
463:57 - this should have this darker gray
463:59 - background let me just double check okay
464:02 - I think there's an extra closing div
464:04 - here and that closing div should go
464:07 - right here so take that last div at the
464:09 - bottom and move it to line 33 for me and
464:12 - it should go about here this is the
464:14 - closing div for the header right so why
464:16 - isn't the header getting styled and now
464:19 - the question marks over here last name
464:21 - oh no it says class a name here Class A
464:25 - my take out class name please yes all
464:29 - right there we go there is the header
464:31 - that looks way more accurate to what we
464:34 - want awesome right again it needs to be
464:37 - kind of like smushed in more like this
464:38 - but that's totally fine okay I'll fix it
464:42 - up at the end I just want to make the
464:44 - rest of the nft details now I think the
464:46 - only thing is I want this to be spaced a
464:49 - little bit better let's see what we're
464:50 - missing in the CSS
464:53 - foreign
464:53 - [Music]
464:58 - container P Y dash y should be P Y dash
465:04 - four Once that's done nice okay there we
465:07 - go finally that's gonna be the nft sales
465:10 - info right all the front end is done for
465:13 - that let's work on the next component
465:15 - let's keep it going what I'm going to do
465:17 - next is head over to our pages and go to
465:21 - assets and then go to token ID I think
465:23 - it's time we finally do the styling on
465:25 - this because I'm starting to get annoyed
465:27 - uh this thing is looking the way it is
465:30 - so what I'll do next is start styling it
465:33 - let's give this a wrapper all right
465:35 - because that's the div we set up a
465:37 - little bit a while ago and if I do colon
465:40 - here and I say comma once I give this a
465:43 - flex you're gonna start to see how it's
465:44 - gonna form okay so I hit refresh I hit
465:47 - this buddy again and now it's not spread
465:50 - out like it was before it's flexed so
465:53 - it's gonna line it up in a that's the
465:55 - default Flex Direction but once I start
465:57 - adding everything else in here it's
465:59 - going to look a lot closer to the actual
466:02 - finished product which I have over here
466:04 - okay and then click on this person this
466:07 - is what it should look like I know the
466:08 - nft image is missing but if I were to
466:10 - expand this look at that it's pretty
466:13 - responsive once it gets to this size
466:15 - we'll start shrinking and then it's just
466:17 - this if you're on mobile so let's do the
466:20 - CSS for this I'm gonna write it out the
466:22 - first thing I want to do is the height
466:24 - of 100 VH
466:29 - and we can do an mx-auto
466:32 - and then we'll keep that flux there and
466:33 - we can do Max with Dash 2 XL followed by
466:37 - a flex column and then we can say space
466:40 - Dash Y dash 4 with P Y dash four cool
466:45 - and for our Dark theme we can say dark
466:48 - BG and do the hashtag I believe it's two
466:51 - zero two two two six afterwards there is
466:56 - something that we want to put for LG
466:57 - right when it's large we're going to
467:00 - have a Max width of none and also if
467:03 - it's large we want to do a pyo eight and
467:07 - last but not least when it starts again
467:10 - we'll do PX to 24.
467:12 - cool and this is the finished one let's
467:14 - go over here nice and centered that's
467:16 - the wrapper let me just line it up so
467:18 - now for the nft container which I
467:20 - believe is what it's called nft
467:22 - container yep we have that what I want
467:24 - to do is give it a display Flex text
467:27 - Direction column and then we can say if
467:29 - it's large we'll do a flex row all right
467:32 - it's a column until you know it's wide
467:35 - then it's going to be a row then we can
467:37 - say large
467:39 - space Dash X4 it works similar to when
467:43 - it's dark the CSS happens but when it's
467:46 - LG then that's CSS this Flex Direction
467:49 - happens okay let's do left container
467:53 - left container see set match yep left
467:57 - container and left container can have
468:00 - Flex column space Dash y dashboard left
468:04 - element then we'll have hidden and then
468:07 - make it block so now you should start to
468:09 - see a significant change with this and
468:11 - reset it hey
468:13 - it's good that we don't see it because
468:15 - when we do huh yeah yeah okay that's the
468:18 - Local Host but what about us all right
468:20 - we lost the title but here it is cool
468:23 - yeah it actually helped me realize we
468:24 - need to get the title backing up and
468:26 - running let's get the right container
468:27 - and for the right container we'll give
468:29 - it a display Flex as well Flex of one
468:32 - column and space Dash y dashboard
468:36 - alrighty after the right container we'll
468:38 - do the buy out container which will be
468:41 - Flex of one oops I keep doing that
468:43 - flexible okay now let's figure out where
468:46 - that title is should be here somewhere
468:50 - oh that's right it should be in basic
468:53 - info over here okay that's good to know
468:56 - so I'm no need to worry about seeing
468:57 - crypto punks and all this stuff just yet
468:59 - what I should worry about is my next
469:01 - component nft details what I'll do is in
469:05 - components nft details I like this name
469:08 - a lot because it's literally the folder
469:10 - nft details and this is the file nft
469:12 - details.js okay once that's made I don't
469:16 - want to lose this so what I'll do is get
469:19 - token address and put on the sidebar so
469:21 - now I don't have to open this and switch
469:22 - back and forth we can have it like so
469:24 - now for the nft details I'm going to do
469:27 - a couple Imports which is going to be g
469:29 - r text line left and then react Dash
469:34 - icon slash gr then we can import another
469:36 - react icon again my favorite to BS fill
469:40 - bookmark fill and just a heads up this
469:43 - component is going to have another
469:45 - component with inside of it
469:48 - so it's gonna there's gonna be one more
469:50 - import I'm not gonna make it yet because
469:52 - I want you guys to understand why I'm
469:53 - making in the first place so those are
469:55 - the react icons let's set up the style
469:57 - object while I'm here okay we have the
469:59 - empty style object then we can say const
470:02 - nft details and we're gonna have some
470:05 - hard-coded data right here so it's gonna
470:08 - be drop down data is equal to an array
470:10 - of objects right there's going to be two
470:13 - objects right each object represents the
470:15 - actual drop down so what I mean is if I
470:18 - go to the actual finish product if I
470:22 - highlight this is the first object in
470:24 - our drop down this is the second object
470:27 - in our drop down I'm going to show you
470:28 - guys how to make that cool and again
470:31 - this actually works if I click on this
470:32 - you can see description properties it's
470:35 - very Bare Bones but again I want you to
470:37 - take this app and take it to 11 if you
470:39 - understand it so
470:41 - for that first object you saw what the
470:43 - name was it's going to be description
470:44 - and the icon that it carries will be
470:49 - the oops not that gr text line left one
470:55 - right does that I spell it right yes I
470:56 - did sub close but it will take a class
470:59 - name of style icon and following the
471:03 - same pattern this will also have a title
471:05 - of properties like what are the
471:07 - properties of your nft icon BS fill
471:12 - bookmark fill just like that self close
471:15 - and give it the same class name as a
471:17 - book
471:20 - [Music]
471:24 - okay
471:25 - style tag
471:28 - okie dokie
471:30 - all right so there's that drop down data
471:32 - and again all of these things need a
471:34 - return and then when it's jsx we have
471:37 - the parentheses here okay for now let's
471:39 - say nft details as a placeholder and
471:42 - let's get this imported and to get it
471:44 - imported into our token ID page we have
471:47 - to export default nft details cool
471:50 - quickly hop over back to here that's
471:52 - nice and smooth we just need to import
471:55 - that component which will be in the same
471:57 - path as this so nft details from
472:03 - cut.orgs.org components slash nft
472:06 - details and Deja Vu it's going to be nft
472:09 - details
472:12 - cool I feel comfortable erasing this guy
472:14 - is this guy alive oh wait no that's the
472:17 - live one cannot resolve nft details
472:20 - right I'm assuming it's a typo so let's
472:23 - take a look details all right that makes
472:25 - sense let's check this path nft details
472:31 - let's make sure I typed the exact same I
472:33 - guess I spelled it wrong on the
472:35 - component itself but now it's all good
472:36 - let's just double check that okay cool
472:38 - hey when I make a big screen you can see
472:41 - it because that's what we have set up
472:42 - with our CSS all right so nft details is
472:45 - it in the right spot yes it is cool I'm
472:49 - getting so close guys it makes me really
472:50 - happy to see a build almost complete
472:52 - alrighty let's get back to this and now
472:55 - I feel comfortable giving it its actual
472:58 - name which is style.rapper
473:01 - okay we can erase nft details as the
473:03 - placeholder because we don't need it
473:04 - anymore and now what I want to happen is
473:08 - let's take drop down data let's make use
473:10 - of it oh no drop down data dot map right
473:15 - so remember when we map through
473:16 - something we're iterating through each
473:18 - element so how many elements are in drop
473:20 - down data correct Cody it's going to be
473:22 - two elements so if I say item I say
473:25 - index because I want to give each thing
473:27 - I render a unique index and again
473:29 - parentheses for jsx and since I'm using
473:31 - parentheses we don't need a return
473:34 - we'll do drop down right the component I
473:37 - was talking about or just for now we'll
473:39 - say uh drop down item oh yeah and let's
473:43 - fix up the map here
473:47 - I just do it reconnect metamask I've
473:50 - been clicking on 246 and again we won't
473:52 - see it because we got to make it bigger
473:54 - boom drop down item we got two all right
473:56 - two drop down items for two items in the
473:58 - array if you wanna again if you wanted
474:00 - to build this further I'd probably add a
474:02 - description that we could use later
474:06 - all right so let's go into oh yeah I
474:10 - could just go from here make this bigger
474:12 - I should go into nft details and let's
474:14 - build out the drop down component next
474:17 - oh actually better yet let's give this
474:19 - style what am I doing style is pretty
474:21 - easy it's just wrapper
474:23 - and comma here and we'll say Flex
474:25 - Direction column we're gonna do a divide
474:28 - Dash y rounded large overflow and then
474:32 - after the Overflow hit in let's do a
474:34 - border dark for our Dark theme and if
474:37 - it's dark we're gonna divide black and
474:40 - again if it's dark we're gonna do a
474:41 - border black as well followed by the
474:44 - next thing which is the icon I believe
474:47 - then for the icon there's not much to
474:50 - this one it's just the height
474:52 - five with five and then text Gray 600.
474:57 - [Music]
474:59 - okay Doki see if that made a difference
475:01 - okay cool that's the outline we expect
475:04 - all right it should be more like this
475:06 - but that's totally fine oh I see dark
475:12 - there we go that's more like it okay
475:15 - that's gonna be nft details so now if we
475:18 - wanted to start making drop down item
475:19 - I'll go back into my components make a
475:22 - new file and we'll say drop down.js
475:25 - [Music]
475:26 - cool and since I want to keep that
475:29 - whereas nft details let's also add drop
475:33 - down to our side panels all right so do
475:36 - I have two okay replace that one right
475:38 - so nft details or in that case drop down
475:41 - is in its own thing right so what is
475:43 - drop down
475:44 - if I go to the finished one it is the
475:47 - component that has the actual
475:49 - functionality of this modal right this
475:51 - drop down all right so luckily we have
475:54 - pre-installed a package for you so you
475:56 - don't have to install it and it's going
475:57 - to be called headless UI slash react so
476:00 - let's import and the thing that it's
476:02 - called it's called disclosure
476:06 - from at headless UI slash react okay and
476:10 - then there's some react icons I would
476:12 - like to install which is those arrows
476:13 - that go up and down we'll do bi Chevron
476:17 - up and the I
476:20 - Chevron down
476:22 - from react oops
476:28 - Dash icon slash bi
476:31 - set up the skeleton of style so we don't
476:33 - get Styles undefined again then we can
476:35 - say cons drop down is equal to
476:39 - right function based component I want to
476:43 - put in a return here and temporarily
476:45 - will have a drop down component so that
476:50 - we can see it okay going back to nft
476:51 - details we can import that in here so we
476:55 - can say import drop down from it should
476:58 - just be dot forward slash drop down
477:01 - [Music]
477:02 - instead of this guy I can say drop down
477:05 - like so see does he have any issues
477:07 - check the render method of nft details
477:11 - okay it was fine before
477:13 - I just didn't like the way I imported
477:15 - drop down that's fine so let's do import
477:17 - drop down from dot forward slash drop
477:21 - down
477:25 - is it like that
477:27 - okay it likes that better okay then I
477:30 - want to say drop down right here
477:35 - and a valid expected a string oh oh I
477:40 - know my kryptonite it's export default
477:42 - drop down
477:44 - [Music]
477:46 - right
477:52 - oh wait I gotta keep it consistent this
477:54 - should be drop down
477:57 - and the file okay cool this file is the
478:00 - same thing yes
478:02 - drop down component let's go okay all
478:05 - right so now for the fun part to get
478:08 - this function working alright so to get
478:11 - started using disclosure and getting
478:12 - those menus up we need to get the
478:16 - disclosure tag up and running all right
478:19 - and this is what we're essentially going
478:21 - to be the parent div of the drop down
478:22 - component and to get some functionality
478:24 - with it we're gonna say parentheses
478:27 - curly brackets open
478:31 - and then curly bracket parentheses arrow
478:35 - and then we'll say opening parentheses
478:38 - all right which then we're gonna need a
478:40 - fragment here because it needs to have a
478:41 - parent component and what we could say
478:43 - is it will have a disclosure dot button
478:46 - which is built into disclosure
478:49 - all right and for some reason it doesn't
478:52 - write the rest of it for me so I'll just
478:54 - manually write it it's fine and I'm just
478:57 - going to write the jsx for the drop down
479:01 - so this first div it's going to be
479:03 - called the button wrapper instead of
479:05 - just wrapper which then holds a dude
479:08 - with a class name
479:10 - of button left
479:17 - okay cool there's the closing tip for it
479:20 - and then in button left it's going to
479:22 - take in an icon right and the icon comes
479:26 - from something that we'll be passing
479:27 - down to drop down so that tells me I'm
479:30 - passing down props I'm already thinking
479:33 - ahead because I know the build but
479:34 - you'll see in a second for now so it
479:36 - doesn't get confusing for you guys I'll
479:38 - put a placeholder here this is where the
479:40 - icon will go okay all right next to the
479:42 - icon will be a span tag and that will be
479:45 - the name of style.title
479:49 - and this is actually where the title
479:51 - prop goes in as well but we haven't set
479:54 - up and passed pop set so title will be
479:56 - there temporarily so then it should be
479:58 - closing div followed by some conditional
480:01 - rendering so we're going to use a
480:02 - ternary again so if open is true and
480:06 - don't worry about what open is it comes
480:07 - with disclosure that's why it's in here
480:09 - so if it's open right the drop down
480:13 - all right what should we see that's all
480:15 - you need to know so if it's open we
480:17 - should see the Chevron down icon right
480:21 - else you should see the other icon all
480:24 - right so let's follow the logic with
480:25 - what I just said if it's open we should
480:27 - see the bi Chevron down
480:32 - icon and it'll be style dot right
480:36 - okay and closing time cool and else
480:39 - right of the ternary is going to be the
480:42 - bi Chevron up with the same class name
480:46 - and let me do class name equals style
480:49 - dot right and close Okay closing do
480:51 - disclosure button and now let's get the
480:54 - panels themselves which will be under
480:56 - this we'll say this closure panel and
481:00 - again it doesn't do the dot part for me
481:02 - so I'll write it myself and then we'll
481:05 - say div with class name style dot inner
481:10 - text container and it will have title in
481:14 - between but again please hold it okay so
481:16 - that's the jsx let's just take a look oh
481:18 - and what it looks like now I missed this
481:20 - guy 20 20 25 open this guy up
481:23 - a icon title and title right so this is
481:26 - where it goes so it's static right now
481:28 - we should make these more Dynamic but as
481:32 - you can see it's pretty close to the
481:33 - real thing
481:35 - yeah
481:36 - cool now before I pass stuff down let's
481:40 - just style it since we're already here
481:42 - okay so let's get started with button
481:44 - wrapper
481:45 - and button wrapper is just gonna have a
481:48 - display Flex with an align item Center
481:51 - and a justify between p dash four oh
481:55 - wait this is the finished one okay
481:56 - separated them now button left
482:00 - is also going to have a flex property
482:02 - it's items Dash Center space Dash x-4
482:06 - and we can open that up now oops you can
482:09 - actually access this tab out okay and
482:11 - then we have title
482:13 - which will have just font semi-bold okay
482:16 - all right so just a little bit Bolder
482:18 - and then the right icon will be H dash
482:21 - six
482:22 - with six text Dash gray Dash 400. then
482:28 - enter text container we'll have BG Dash
482:33 - gray 50 p dash four BG of Dash hashtag
482:39 - three one three three three nine oops
482:42 - this should have come
482:44 - and now it should stop yelling at me
482:45 - okay cool
482:47 - awesome all right so we don't see the
482:49 - icons because that's what icon should go
482:51 - and the title should be there as well so
482:53 - now let's pass down the props what's the
482:56 - smallest I can make this without not
482:58 - seeing the icons okay it's here it's the
483:00 - limit that's fine okay back to nft
483:03 - details let's pass this down
483:06 - okay the first thing I want to pass down
483:07 - is that when we map through something it
483:09 - should have a unique key prop which
483:11 - we're handling with the index from the
483:13 - map after that the title we're passing
483:16 - down is going to be the item right the
483:18 - item being this object and then how do
483:21 - we get the title if it's an object
483:22 - exactly item DOT type
483:26 - okay from there we can do an icon is
483:29 - equal to Icon or sorry item that icon
483:35 - oh yes close that off and we have two of
483:39 - these
483:41 - nice cool so it still says icon title
483:44 - because we only passed down the prop we
483:46 - now have to accept the problem so we
483:48 - accept it by destruction right here now
483:51 - we can just use it so anywhere it says
483:52 - icon I would like to replace it with
483:55 - just icon and anywhere it says title all
483:57 - right I like to replace it with there's
484:00 - a couple more
484:01 - [Music]
484:04 - cool and you can replace this with like
484:06 - description all right so if I open this
484:08 - now it says description the same as
484:09 - title and the properties of your app can
484:12 - also be here okay so you can find a way
484:14 - to make that Dynamic that will be my
484:15 - challenge for you guys but take a look
484:18 - that's looking pretty clean all right
484:20 - we're just pretty much missing this
484:23 - section right here all right so that's
484:25 - the nft details all right are you guys
484:27 - ready for our last component I know I am
484:29 - so what I'm gonna do is let's get to
484:33 - that ID page again okay address token ID
484:37 - and I feel like we should make this
484:40 - bigger make this a little smaller and
484:42 - put plop this guy right there so not to
484:45 - jump from place to place X this one or
484:47 - not we just need two cool so let's check
484:48 - on the last component we need to make
484:50 - and that's this guy nft basic info right
484:54 - here what we need to do is create that
484:58 - component so I'll be over here let's
485:00 - make a new file and I'll say nft basic
485:04 - sick info dot JS yeah entity basic
485:08 - info.js okay cool and it should be empty
485:11 - but we can set it up so now we can
485:14 - switch between the token ID and nft
485:18 - basic info okay I'll make this full
485:20 - screen and let's get these Imports in
485:22 - here so if we're working on nft basic
485:24 - info let's import the react icons we'll
485:27 - use which is bi refresh bi link external
485:32 - from react Dash icons slash bi cool
485:36 - we'll also import another set which is
485:39 - MD more revert from react Dash icon
485:44 - slash MD
485:46 - all right then we can import this Ike
485:49 - there's going to be one more component
485:50 - just like before with drop down this
485:52 - one's going to be called sub info but
485:54 - again I'll leave it out just so it makes
485:56 - sense to you guys so cons style here is
485:59 - our object skeleton then we can say
486:01 - const nft basic info equal to
486:07 - function and it returns jsx which we'll
486:12 - just say div nft info okay we also need
486:16 - to export default and a t basic oh cool
486:20 - now it's there we can bring him in and
486:24 - import it as well so nft basic info from
486:31 - slash dot dot org slash components slash
486:35 - nft details slash nft basic info you
486:41 - with me cool just checking all right and
486:44 - since we have it already here let's pass
486:47 - down the props it will need I want to
486:49 - pass in a prop with the key of name and
486:51 - it's just gonna take listing right the
486:54 - listings names how do we get to the
486:55 - listing name if you remember it's going
486:57 - to be dot asset dot name so without
487:00 - asset dot name
487:08 - hmm
487:11 - yeah I think that's pretty much it for
487:13 - nft basic info I'm gonna use this time
487:15 - to see what we made can't resolve icon
487:18 - slash bi well that's weird we use that
487:20 - already oh icons that'd probably help
487:22 - okay I like it connect metamask click on
487:26 - this one
487:27 - let it load hey nft info so nft info is
487:33 - whoops not yet nft info is all the stuff
487:36 - here like I've mentioned so if it's in
487:39 - the right place we should be good to go
487:41 - yep that's about right so I'll guess
487:44 - I'll load up the structure for it clear
487:46 - this out then I'll say class name
487:50 - oh actually nft basic info has an empty
487:55 - div as a parent and then it starts to
487:57 - have classes in here so the first class
488:00 - will be style.top container and then
488:03 - within that it will be div with the
488:06 - class name style dot collection oops
488:10 - collect icon collection Title Here the
488:13 - title will be called crypto punks not
488:15 - doodles
488:16 - all right so this is again static data
488:18 - and then we have the which will be
488:21 - Styles dot action items
488:25 - and then the action items will be a lot
488:28 - of these buttons over here so a smart
488:30 - way to do this to make use of these four
488:32 - right these four icons yep is to put
488:35 - them in Array and then map through them
488:36 - just like we did with the other object
488:38 - for the description and properties so
488:41 - let's make that array and it should be
488:43 - within here so I'll say const action
488:46 - items
488:47 - okay and that's going to be an array of
488:49 - objects all right so I know there's
488:51 - always going to be four objects because
488:52 - of the four icons so I'll just set up
488:55 - the objects boom boom boom all right now
488:58 - we just gotta fill out the objects and
488:59 - each object is going to have a title of
489:02 - Icon and we're just going to insert each
489:04 - icon for the object so the first one is
489:07 - bi refresh right and all of them will
489:10 - have the class name of style dot icon
489:14 - same kind of pattern so I guess what
489:16 - I'll copy is this part okay Coolio then
489:20 - we can do a bi link external
489:25 - paste that oh wow I didn't mean to copy
489:27 - that stuff just this well that didn't go
489:30 - according to plan okay that's better
489:32 - spacing though could use work oh no I
489:34 - guess that's just how it's going to be
489:35 - which is fine all right so for this one
489:37 - it also needs icon it's gonna be MD
489:41 - share
489:45 - this one icon will be MD
489:48 - more revert
489:51 - right and paste cool so do I have the
489:53 - right names tends to happen sometimes
489:55 - yep yep yep cool let me just say yeah
489:59 - crypto punks is right there yep and we
490:01 - don't see any of the icons because I
490:02 - haven't quite mapped them through yet so
490:04 - let's go ahead and do that
490:06 - so now we can say action items.map we're
490:09 - iterating through that array of objects
490:11 - and four every single item in that array
490:15 - I also want to generate an index main
490:18 - thing though for every item let's reuse
490:21 - some jsx so I can say div and put the
490:25 - key in here which should be the index
490:28 - then class name style dot action item
490:32 - container yep and in between here is the
490:35 - key we'll say that's the item that icon
490:38 - okay cool okay there we go finally
490:41 - something's loading it says b i refresh
490:43 - I'll go to spawner spot this right
490:45 - refresh hey all right we got all the
490:48 - action items cool so let's just see
490:51 - where this closes all right it should be
490:53 - closing div now right over here we'll
490:56 - have another div I'll give this a name
490:58 - of style dot asset title okay and I'll
491:03 - take in name which is the property that
491:05 - we passed in and here we'll have div
491:09 - with the class name style dot sub info
491:13 - container and it's going to take in a
491:16 - component so nft sub component we'll go
491:20 - here okay I'm just gonna go back to the
491:22 - place that I was which is right here
491:24 - Perfect all right we just need to style
491:26 - all of it so let's get started styling
491:29 - I'm going to say type container is flex
491:31 - items Dash Center and justify Dash
491:34 - between and then we can do collection
491:37 - title you can see how those icons move
491:39 - to side then we can say text large font
491:43 - semi bold text blue dash 500 then we
491:47 - have action items
491:49 - with flex divide Dash X divide Dash gray
491:55 - Dash 300 rounded large border gray Dash
492:01 - 300. for my action items yay okay so
492:04 - that adds a little border around the
492:06 - action items let's see what do we have
492:08 - next I action item container you know
492:10 - what since I'm down here
492:13 - let's just put that there
492:17 - okay for my action item container you
492:19 - can add a flex property here and then a
492:21 - cursor pointer just to make it feel like
492:23 - we can click on it can't forget the
492:25 - colon yep of course the point is working
492:27 - then we have an items Center and we have
492:30 - a justify Center and a p-3
492:34 - cool all right it's making it bigger and
492:37 - separated it out I like it so for the
492:39 - actual icons themselves we can say h
492:43 - tests six w-6 touch Dash gray dashboard
492:48 - 100.
492:49 - and then for the Dark theme say text
492:52 - Gray 400 asset title it's going to be
492:56 - pt-6 with a text of four XL now I'm
493:01 - going to give it a font hold let's just
493:02 - see how it looks so far oh we have to
493:05 - pass down name duh
493:06 - I wonder why I didn't say that before
493:08 - okay no worries yep fun bold looks
493:12 - pretty good that's the title I also
493:13 - wanted to add a text Gray here of 700.
493:18 - and then a dark property of gray 100
493:22 - okay then sub info container can go
493:27 - right here just reload it but I want to
493:30 - have it hidden large
493:32 - block
493:36 - all right so this doesn't exist yet but
493:40 - there is an own buy here and then when I
493:43 - make it small all that owned by
493:44 - information right here is gonna get
493:46 - hidden when it's big okay so if I make
493:49 - it small it's gone I want to make it
493:51 - large it's displayed like block cool
493:54 - for us if I click onto here we don't see
493:57 - the netsup nft sub component when I make
494:00 - it bigger then you see the NFC type
494:02 - component ah this is so cool it looks
494:04 - just like the finished thing I almost
494:05 - can confuse them okay I guess that's the
494:08 - next thing to do is just mix the
494:09 - component so I want to make the
494:11 - component let's just see I think this
494:13 - guy oh I don't want to do that nft basic
494:15 - info I took it out the folder should be
494:17 - back now I just want to go to nft
494:19 - details and just make a new file and say
494:21 - nft sub info dot JS cool and this should
494:26 - be the last component we make and what
494:29 - we can do now is import the react icons
494:36 - okay
494:37 - [Music]
494:38 - hey I feel heart is the ones that we're
494:40 - gonna use from react Dash icons slash AI
494:45 - I think that's it for imports Okay cool
494:47 - so we can say con style equals the
494:49 - skeleton and write out nft sub info
494:56 - then for the turn let's just put div
494:59 - oops
495:01 - oops div nft sub info cool export
495:05 - default nft sub info is next
495:10 - let me see if I can make this bigger
495:12 - because I want to add another page onto
495:14 - this it goes basic info if I didn't want
495:16 - to lose the pages okay there we go it's
495:20 - good to know cool so n of T sub info is
495:24 - here this is nft basic info all right so
495:27 - let's import that last component import
495:30 - nft sub info from that forward slash nft
495:36 - so cool and resolve the module and let's
495:40 - just see if it's there it is nft sub
495:42 - component that makes me happy so let's
495:45 - go to sub info and let's write out the
495:49 - good old jsx okay I'll erase this you
495:53 - know the drill classname style dot
495:55 - wrapper
495:57 - class name style dot text container and
496:01 - here we'll have it's going to be static
496:02 - but it's going to be I want to buy class
496:05 - name so we can style that Creator style
496:08 - owner and say ABC
496:11 - just a static owner and div last name
496:14 - style dot icon text info container
496:19 - here's where the icon will go hey hi
496:21 - fill I with class name style dot text
496:25 - wait no it's not text style that's the
496:28 - icon yeah there you go that makes sense
496:30 - and now then div next to that icon will
496:34 - be the style.text info so text info
496:37 - container will be 4.4 K views again
496:42 - static data
496:44 - so it should just be closing div closing
496:46 - div and then div here this one I'll call
496:50 - class name style dot eye context
496:54 - info container as well we have two of
496:56 - these and this one will have the other
496:58 - icon of heart and for the class name of
497:01 - that one it's going to be style.icom of
497:04 - course followed by another div which is
497:06 - going to be the style dot info container
497:09 - or text info sorry text info container
497:12 - with 200 favorites
497:16 - cool so it should be closing there and
497:18 - and there we go let's take a look at
497:19 - what it looks like without CSS that's
497:22 - interesting now why isn't it showing up
497:26 - it doesn't say an empty sub component
497:28 - anymore
497:30 - maybe if I restart the server oh I
497:33 - checked myself right I did I import it
497:35 - yeah I did I just didn't use it it
497:37 - should be right here
497:39 - nft sub info
497:43 - okay that's more like it we should see
497:45 - some errors I've never been so happy to
497:47 - see errors so let's see AI fill put e in
497:50 - there connect their metamask it's
497:52 - already connected so it instantly logs
497:54 - in got this guy oh there we go and T sub
497:57 - info all right let's get to work on
498:01 - styling it so I'm excited now rapper is
498:04 - going to just be Flex Space X Elon Musk
498:09 - and py-x okay then we have the text info
498:13 - container
498:14 - which is going to have text that is
498:17 - large the font will be medium the text I
498:20 - think should be Gray 500.
498:24 - and the same pattern as before if it's
498:27 - dark we don't need to be that gray so we
498:30 - can say gray 400 which is the lighter
498:32 - shade cool and then for the owner I
498:35 - believe owners next oh let me just take
498:37 - a moment to reload I didn't realize we
498:40 - need to refresh owner is not defined I
498:42 - didn't even have owner cool that's about
498:45 - right so we'll say owner now is going to
498:48 - be text blue because I want it to be
498:50 - blue and then icon text info container
498:55 - and we can say Flex oops items Center
498:59 - space Dash x dash two then I can do icon
499:04 - which is H dash seven with Dash seven
499:08 - text Dash gray 100 dark text Gray Dash
499:15 - 400. now why you don't load oh can't
499:19 - restart one
499:21 - [Music]
499:23 - and start it up
499:28 - okay
499:29 - set refresh and finally loaded oh my God
499:32 - guys that's it look at this beautiful
499:34 - front end we are good to go with the
499:36 - drop downs and everything right this is
499:39 - dynamic if I go back and load I click on
499:42 - this crypto Punk this page is loaded
499:44 - it's all set up and good for you to go
499:46 - whenever you make a new listing it
499:49 - should just appear with its own Dynamic
499:51 - page and information right here this is
499:53 - the price awesome so I think it's
499:55 - fitting if I log out and buy an nft with
499:59 - a different account so let's see if it
500:01 - all works fingers crossed disconnect
500:03 - will connect with metamask I don't want
500:06 - to be account one I want to count three
500:08 - because it has point one eighth in there
500:10 - let's hit connect so now for the very
500:12 - first time I'm logged in with a
500:14 - different account as you can see I'm on
500:16 - account three it's active oops this one
500:20 - is not connected because I'm gonna count
500:21 - one we should switch to account three
500:23 - this one's connected all right so which
500:25 - one should we buy guys did you say it
500:27 - 2046 I was thinking the same thing
500:30 - so let's see if we can buy this one
500:33 - there we go buy now actually works
500:36 - metamask lets us know that we can buy it
500:38 - for the exact same price as listed we're
500:41 - not going to get scammed and this is
500:43 - going to cost us 20 eighth it's exactly
500:45 - what we want cool so I just loaded the
500:47 - gas fees we can hit confirm and once
500:49 - that's done we just wait for this to be
500:51 - pending and Bam it's not pen anymore
500:53 - it's officially purchased when you go on
500:56 - third web you'll see that the nft is
500:58 - disappearing as well as it takes some
501:01 - time but when I go back to the main page
501:02 - oh oh wow it's actually really fast and
501:04 - so we bought the nft so it's off the
501:06 - direct listings how cool is that guys
501:09 - all of this was possible thanks to
501:11 - replit third web and infuria we've made
501:14 - the open C clone so pat yourself on the
501:16 - back if you guys made it this far
501:18 - congratulations you have a bill what we
501:20 - usually do here at clever program is we
501:21 - usually deploy our app so that you can
501:24 - share with your friends what I always
501:25 - like to say but we don't need to do we
501:28 - don't need to do that if we're using a
501:29 - replit because if I show you guys I'm
501:31 - gonna go open up a new browser with a
501:34 - different email so now it's this color
501:36 - paste in that link look at that I can
501:39 - already see my Rebel live same URL so
501:43 - that's where it's being hosted if I were
501:45 - to click connect metamask I type in my
501:47 - password and now I'm logged in with a
501:50 - completely different account and I can
501:52 - see the same listings that everybody
501:53 - else sees so go ahead what's stopping
501:56 - you from making your own nft Marketplace
501:58 - and your account so what I want to see
502:02 - from you guys now is this is a public
502:04 - Rebel that you guys can fork and I'll be
502:07 - able to see all the projects that you
502:08 - make go ahead if you haven't already go
502:11 - to this website on replit and go ahead
502:14 - and Fork this ruffle because I can see
502:16 - all the ripples you guys make and I want
502:18 - to see some variations change up the
502:20 - front end make it your own Marketplace I
502:22 - love to Showcase some of my favorite
502:24 - ones so go ahead have fun and I see you
502:27 - guys in the next video in this video
502:29 - you're going to be building uni swap
502:31 - Chrome on the ethereum blockchain using
502:33 - Euro index.js you will be able to
502:35 - convert your ethereum coins into custom
502:37 - erc20 tokens that we'll be building
502:40 - throughout this video that's uh let's
502:41 - get straight into the video alright
502:43 - ladies and gentlemen welcome back to
502:45 - another build today we are building unit
502:47 - swap as you can see in the title so
502:49 - while you're down there looking at the
502:51 - title go ahead click the first link
502:52 - right below that because that's going to
502:54 - take you to this very page where you're
502:55 - going to go ahead and sign up for
502:57 - inferior after hitting the sign in
502:58 - button you put in your name email you
503:00 - don't put in your name you just put in
503:02 - your email and then you put in a
503:04 - password and then you go ahead click
503:06 - sign up and then verify your email
503:08 - whatever answer those few questions it
503:11 - doesn't really matter it's just for
503:12 - analytics but like you can just select
503:14 - engineer and solo freelancer whatever
503:16 - applies to you and once you're good
503:19 - there you go ahead hit submit and then
503:21 - straight away You're gonna go ahead get
503:23 - started with a project now for Network
503:27 - you want to go ahead and select web3 API
503:29 - the reason is there's a bunch of chains
503:31 - that one particular thing supports and
503:34 - then for name you can put in like
503:36 - whatever I put here a production but
503:38 - like you can just put in use swap
503:39 - whatever once it's done hit submit and
503:42 - go ahead and that that's it that's it
503:44 - that's basically it
503:45 - you're done you're in you're good you're
503:48 - set now they're all your projects which
503:51 - is probably only one and if you already
503:53 - have an account just go ahead sign in
503:55 - and basically you could have skipped in
503:57 - this entire part that said let's go
504:00 - ahead and set up metamask okay next up
504:03 - you want to go to metamask.io slash
504:05 - download
504:07 - now once you're there you can just go
504:09 - ahead click that big blue button that's
504:11 - going to take you to Chrome web store
504:13 - and by the way it does build is only
504:14 - going to be working on Chrome or
504:16 - whatever browser that supports metamask
504:19 - but which is suggests chroma hit add to
504:21 - Chrome
504:22 - go through that yeah advics engine
504:24 - whatever and then once it's done it's
504:27 - going to pop open a brand new website
504:29 - for you which is just like their
504:31 - configure page and if you already have
504:33 - metamask like once again you can just
504:35 - skip ahead a couple of minutes but if
504:37 - you're new click agree and obviously
504:41 - read that we all know that's important
504:44 - and everybody reads that privacy policy
504:47 - is the most important thing you will
504:49 - ever read in your life
504:50 - not legal advice now if you happen to
504:54 - have a new computer you can just import
504:56 - your previous wallet over there but if
504:58 - you are brand new you can just click
504:59 - create new pass in a add a password that
505:02 - is go that you will have to remember
505:04 - again read the terms of use and then
505:06 - create a new wallet now I highly suggest
505:08 - you go ahead and watch that video
505:10 - because that's going to explain to you
505:11 - in thorough details and how you can keep
505:14 - your 12 phrase mnemonic safe but in
505:18 - short
505:19 - keep it safe because if someone steals
505:21 - it they will have full access to your
505:23 - wallet now quick tip
505:25 - you want to use separate wallets for
505:27 - development and for your own funds and
505:30 - then never share any kind of detail
505:31 - where your money is at and then only
505:34 - share details of wallets that you don't
505:36 - mind they get compromised now here's
505:39 - your security recovery phrase this is
505:42 - the absolute key if it gets lost you're
505:43 - done like for real without exaggeration
505:46 - so keep it a secret with that said
505:49 - though you wouldn't have to go ahead
505:50 - copy this whole thing hit next and then
505:53 - you will have to verify that you have
505:54 - that you can just copy paste it in there
505:56 - and you're good to go now once you hit
505:58 - confirm
505:59 - minimize basically takes that as your
506:02 - confirmation that you are aware of
506:04 - anything everything that I just said and
506:06 - all the terms you've used everything
506:07 - that they prompted you so once you hit
506:10 - it all done you're good to go there is
506:12 - your management now one more thing you
506:13 - want to do is because you only have
506:15 - access right now to the ethereum mainnet
506:17 - which obviously is a ton of money
506:20 - and you don't want to use that click
506:21 - that show hide right there scroll down
506:24 - all the way where you can see show test
506:26 - networks turn that thing on
506:28 - and then turn on show conversions on
506:30 - test networks that will basically show
506:32 - the dollar amount of every single
506:34 - ethereum in your wallet which is just a
506:36 - nice touch and basically they're good
506:38 - now if you scroll back up and then click
506:42 - the selector there are all your test
506:44 - networks now in this build we're going
506:46 - to be using girly so you might as well
506:48 - go ahead and
506:49 - check that off or you might as well go
506:52 - ahead and select that said let's go and
506:54 - get started coding now if you're
506:56 - familiar with us you know that we have
506:58 - our own CLI tool that makes your life
507:00 - easier and you want to go ahead and to
507:02 - use that you want to type in npx letter
507:04 - program and if you don't have it it will
507:06 - have to install itself I also recommend
507:08 - you add a at latest at the end so that
507:12 - you get the latest version of it and it
507:14 - will get it or it will
507:16 - update itself but regardless just put in
507:19 - your email address and then put in your
507:21 - name and then by the time when we shot
507:23 - this wasn't the latest version but right
507:25 - now we are supporting type search so if
507:27 - you start typing unit swap you it will
507:31 - basically just narrow down the list and
507:32 - then you can just hit return select that
507:34 - one so that's going to be something that
507:36 - that's gonna help you so anyways it's
507:39 - gonna run a couple of scripts and it
507:41 - will install all the dependencies and
507:42 - everything for you to get started and
507:45 - then open up your vs code in that
507:47 - specific project so you can just sit
507:48 - back relax care about coffee whatever
507:50 - and as you can see on my screen that's
507:53 - what's happening there now I already
507:55 - opened this guy up that is the project
507:57 - that we're going to be building on top
507:58 - of and for you to spin it up I'm just
508:01 - going to zoom in a little bit just so
508:02 - you can see it better what you can do to
508:04 - spin this up is CD into uni swap Dash
508:06 - app CD as in change directory right away
508:09 - and then in there you just type in
508:11 - yarndav npm run Dev or something but I
508:14 - just recommend you use yarn anyways once
508:17 - it's good to go you open the uh you open
508:20 - your localhost up and there is your
508:22 - project that is your starter project
508:23 - that we're going to be building on top
508:25 - of and there you go let's go ahead and
508:29 - start setting things up
508:31 - now to make things extremely easy for
508:33 - you we recommend you use truffle
508:36 - extension in your vs code so you want to
508:38 - go ahead search for truffle for vs code
508:41 - install that guy and basically they have
508:43 - an integration with infuro which we're
508:45 - going to be using today so it's a pretty
508:47 - good one and once you're there open that
508:49 - little truffle icon on the left hand
508:51 - side
508:52 - you can go ahead click that click create
508:55 - new network
508:56 - and that will
508:58 - and then select inferior service and
509:00 - then you can go ahead click sign up and
509:02 - that will just take you to infuria and
509:04 - once you're connected the two
509:06 - Services it will prompt you to select
509:09 - the project name now you can either type
509:11 - it in there or sometimes it like shows
509:14 - it up oh because we actually create you
509:17 - can just create a brand new project so
509:19 - just type in uniswap and that's going to
509:21 - be the new name of the project however
509:23 - if you want to connect it to us to an
509:26 - already existing project you can just
509:27 - hit connect to network instead and then
509:30 - that will show you the drop down which
509:32 - will enable you to select your existing
509:34 - project now once you typed in we
509:36 - recommend you use public just go just
509:38 - for easiness just to make things easier
509:40 - and then there you go there is your
509:41 - project
509:43 - all right for this next step we
509:44 - recommend you start using we recommend
509:46 - you use remix that ethereum ethereum.org
509:49 - which is by the way an online IDE just
509:52 - to create smart contracts and I'm going
509:54 - to slow down a little bit because this
509:56 - is where things are getting a little
509:57 - Advanced and these are things that might
509:59 - be new to you now if you watch a couple
510:02 - of my other tutorials I might be using
510:04 - the vs code extension for this tutorial
510:07 - we're going to be using this so if you
510:09 - want to see a familiar familiar thing on
510:11 - your screen as you see on my screen you
510:13 - might as well use remix IDE in the
510:16 - browser now to generate a new workspace
510:19 - you can either leave it on the default
510:20 - or you can just generate a new one but
510:22 - to generate a new one you can click that
510:24 - little plus icon and then just name it
510:26 - the way you want to template doesn't
510:28 - matter and in your contracts what you
510:30 - can do is right click new file and then
510:33 - just name it uniswap.sol now in this
510:37 - file is where we're going to write most
510:39 - of our contracts so starting off spdx
510:42 - license identifier MIT that you just
510:44 - need it don't question it you just need
510:46 - it if you write MIT there that basically
510:49 - it's an open source license anyone can
510:51 - use it and you don't you're not liable
510:53 - for anything that happens whatever you
510:55 - write in there the more you know now you
510:59 - have to specify the version of solidity
511:02 - you are using I see so many people trip
511:04 - up on this you don't want to mess that
511:06 - up type in 0.8.16 that was the latest
511:09 - one when we shot this tutorial well you
511:12 - will need to import though is something
511:16 - oh something from open Zeppelin now they
511:18 - have template contracts and you're going
511:20 - to be importing the erc20 contract okay
511:23 - and this is basically going to and think
511:26 - of it as like a npm package but for
511:29 - solidity we're gonna have two contracts
511:31 - in this file
511:32 - if I'm correct first contract is going
511:34 - to be we're just going to name it custom
511:36 - token and it is going to be child of
511:39 - erc20 so it's going to inherit
511:41 - everything and we're going to have a
511:42 - Constructor in there now that
511:45 - Constructor is going to require two
511:47 - inputs one of them is going to be a name
511:49 - and one of them is going to be a symbol
511:52 - now these are both are going to be
511:54 - strings and then this is going to be
511:56 - you're going to obviously pass that into
511:58 - erc20 because that has a Constructor now
512:01 - erc20 has a underscore mint function
512:04 - built in it it comes with the import so
512:07 - you don't have to import it separately
512:09 - minting requires a few more things
512:11 - minting requires someone a wallet where
512:14 - it's going where all the tokens are
512:16 - going to be minted to and then an amount
512:19 - now what is happening here is we want to
512:22 - Mint a thousand a thousand of those
512:24 - tokens however and this is something
512:26 - that I'm going to say a bunch of times
512:28 - during this tutorial now I've said it
512:29 - many times in solidity the only currency
512:33 - that is accepted and the and the only
512:35 - currency that solidity works with is
512:37 - something called way now that is
512:40 - basically all your first contracts so
512:43 - congratulations you just wrote your
512:45 - first contract that will mean a bunch of
512:48 - erc20 custom tokens into your wallet now
512:53 - you can go ahead close that artifacts
512:55 - thingy if you have Auto compile enabled
512:57 - that just that's just gonna go crazy and
513:00 - it will keep compiling your contract and
513:01 - make sure everything is good to go so as
513:03 - long as that check mark on the left hand
513:05 - side is present you're good and with
513:08 - that said let's start typing up another
513:10 - contract which we will call uni Swap and
513:13 - that will handle all the conversions and
513:15 - everything now that will require another
513:17 - Constructor
513:18 - and inside that Constructor we're just
513:20 - gonna strike start straight away with a
513:23 - for Loop now custom coin that we're
513:25 - going to create in this case coin a coin
513:28 - B coin c we're gonna start from zero and
513:31 - go all the way to go all the ways to
513:33 - tokens dot length now what is tokens yes
513:36 - good question we're gonna figure it out
513:38 - in just a second don't worry about it
513:40 - there it is it is going to be an array
513:43 - of tokens but it is going to be an array
513:46 - of strings it's basically just the names
513:49 - of every single it's not super creative
513:52 - but it guess there's not job done it
513:54 - like doesn't go all the way down to all
513:56 - the fanciness you can use this you can
513:58 - just rename it you can even call it
514:00 - Coca-Cola if you want to doesn't really
514:02 - matter
514:03 - we just wanted to go with this because
514:05 - it's simpler easier to follow especially
514:07 - if you're a beginner all right so we're
514:09 - going from zero and the max is going to
514:11 - be the length of that array you can put
514:15 - in five ten thousand two thousand three
514:17 - thousand what however many random coins
514:19 - you want to and then just like usual
514:21 - just like in JavaScript you will
514:23 - increment that I variable which is going
514:25 - to be the index now here
514:28 - you're gonna go ahead and create a new
514:30 - instance of custom token you don't have
514:33 - to import anything you don't have to do
514:34 - anything we're just going to in create a
514:37 - new instance of it meaning it will
514:39 - invoke The Constructor so you where
514:41 - you're going to see that in action in
514:42 - just a little bit so as you can see we
514:45 - are passing in two items to the
514:48 - Constructor which is tokens I and tokens
514:51 - I it's literally the same thing and if
514:54 - you look back up to line seven on my
514:55 - screen I don't know how like pitch line
514:57 - is on your screen but on my screen it is
514:59 - line seven it requires two inputs so
515:02 - that's what we are putting in here
515:04 - meaning that the coin name and the coin
515:08 - symbol in this case is going to be the
515:11 - exact same again if you're Advanced you
515:14 - can do some tricks with it but I
515:16 - recommend you just stay with this for
515:17 - now it will get the jobs done perfectly
515:21 - we want to definitely save this new
515:23 - token that we just created like right
515:26 - now in a mapping and we're going to set
515:28 - that up in just a little bit this
515:30 - mapping later on is going to enable you
515:32 - to fetch all these coins way easier than
515:36 - otherwise would be so let's go ahead and
515:38 - set up that mapping so for that we need
515:40 - to use the keyword mapping and it's
515:42 - going to be mapping a it's going to map
515:44 - a string to an erc20 token all right
515:49 - it's going to be public meaning anyone
515:51 - can use it so there's your mapping that
515:53 - we're going to use and then we will set
515:56 - up an eth value
515:57 - and that's just once again to keep
516:00 - things simple this is a beginner
516:02 - tutorial we're keeping things simple
516:04 - simple if you haven't heard of solidity
516:06 - before you're in a good place
516:08 - so we're going to set up a eth unit
516:10 - value which is going to be a u-wink what
516:13 - is a U.N it's a number and again I'm
516:16 - gonna
516:17 - I'm referring but I'm going to refer
516:19 - back to the statement that I made just
516:21 - like a minute ago
516:22 - everything is stored in weight so we're
516:25 - going to convert each unit to weight and
516:28 - if you save this website by the way
516:31 - eth-converter.com that is eat eat that
516:34 - is
516:35 - eth-converter.com that will be helpful
516:38 - for you later on so if you put in any
516:40 - kind of ether value in which case in
516:42 - this case it's going to be
516:44 - 0.000 that is
516:47 - 0.001 yeah I'm not gonna say any of the
516:51 - other numbers just copy that that's
516:52 - going to be your way value
516:55 - that we'll be saving there so that's
516:57 - going to be your base way value save it
517:00 - there it will be useful later on don't
517:02 - worry about it for now just do as is and
517:04 - then it will all come together now if
517:07 - you select that last option on the left
517:09 - hand side now we're going to go ahead
517:11 - and compile and deploy this contract
517:14 - that we just built now I also have Auto
517:16 - compiler enabled so it's automatically
517:19 - compiled but you will have an option to
517:21 - do so if you need to and then there is
517:24 - that big orange deploy button click that
517:28 - and down there on their deployed
517:30 - contracts it should show up and those
517:32 - are the two functions that are available
517:34 - right now and those are coming built in
517:36 - with erc20 and everything and the
517:39 - mapping that we created now
517:41 - little explanation here when you deploy
517:44 - a contract the Constructor runs
517:46 - immediately because in the Constructor
517:49 - we have the for Loop that will
517:51 - immediately deploy all three coins so
517:54 - you don't even have to worry about that
517:56 - and so what you can do is here fetch all
517:59 - the coins that were deployed so if you
518:01 - put in coin a which is just of the first
518:04 - coin it will return the address of that
518:07 - coin and so that's what you but that's
518:10 - what we just implemented so mappings
518:12 - works like that you gotta pass in and a
518:14 - string and it will return an erc20
518:17 - address
518:19 - so that's what you see there and then
518:20 - for tokens
518:22 - that is your that is the that is on my
518:25 - screen on in line 13 that is the array
518:28 - so you can fetch each and every single
518:31 - element like that and if you get these
518:34 - results on the left hand side after you
518:36 - deployed your contract congratulations
518:38 - time to move on all right now you have
518:42 - your custom tokens perfect each of them
518:44 - are deployed and minted thousand of each
518:47 - but
518:49 - how do you verify that you need a
518:51 - function that Returns the balance of
518:54 - each coin so I want to go ahead and get
518:57 - started creating a new function inside
518:59 - your second contract and it will call it
519:01 - get balanced now this will have two
519:03 - inputs one is the token name and the
519:06 - second is an address what's happening
519:09 - you want to get a balance all right so
519:11 - you need the wallet address which holds
519:13 - potentially that token and that's going
519:17 - to be the address and then you want to
519:18 - get you want to pass in the token name
519:20 - so let's say I have a wallet which has a
519:23 - random address and I have coin B so in
519:27 - that case I will pass in coin b as the
519:30 - first argument and I will pass in my
519:32 - wallet address as the second argument
519:34 - and all I expect to see back is just a
519:37 - number of how many ether or or of how
519:41 - many coin B do I have in my wallet so
519:45 - it's going to be a public function which
519:47 - will return a uint as I said and all it
519:52 - will do is just go through the go to the
519:54 - mapping and then pass in the token name
519:56 - so far all it would do is just return
519:59 - and address however once you got that
520:01 - address you want to call a balance of
520:04 - function and this is something that is
520:06 - coming from erc20 so this is part of the
520:09 - standard and there you're gonna pass in
520:12 - the address so it's going to be my
520:13 - wallet address that's going to go in
520:15 - there so what it will do under the hood
520:17 - it will retrieve one the token address
520:21 - so we'll know that coinb has this and
520:24 - that address and we're gonna check that
520:26 - at that address my wallet address a lot
520:29 - of addresses I know so that that coin
520:31 - address my wallet address how much the
520:33 - balance of that it scrub that
520:36 - so this will return that my wallet that
520:40 - has the second address is that will
520:43 - return the balance of the first coin
520:46 - inside of my wallet
520:49 - so let's go ahead and deploy this new
520:51 - contract
520:52 - and actually you can see all the
520:54 - instances you feel free to like keep
520:57 - removing it but you can keep it that's
520:59 - fine too again the Constructor has run
521:01 - immediately so we're not going to check
521:03 - that but you can pass in coin a right
521:06 - there to check how much coin a in your
521:09 - wallet and then you want to pass in your
521:12 - very own wallet address now you can get
521:15 - that from there from the account because
521:18 - it is not actually connected to your
521:21 - Minimus yet it is remix ID's own
521:24 - built-in environment so it gives you a
521:27 - bunch of like test tools so once you
521:29 - pass that in and hit call I'm gonna
521:31 - pause this for here for a second and you
521:33 - should pause guess how much of the of
521:36 - the coin do I have in my wallet invalid
521:39 - address perfect that's all you guessed
521:42 - am I right okay that's just because I
521:44 - have all those quotes there so let's
521:47 - just remove it it's an address it's a
521:49 - different data format I know it's
521:51 - annoying I can get around it I make
521:54 - mistakes all the time remove the quotes
521:56 - call it again
521:58 - so there you go pass that pass the
522:00 - address in and call it and if you
522:02 - thought and if you guessed zero you're
522:05 - good and with that said let's keep
522:07 - moving all right let's just create a
522:09 - function that will return the coin name
522:11 - every time you pass in the coin name
522:14 - it's precise so you want to have a
522:17 - function that will return a string and
522:18 - it takes in a string and it will return
522:21 - it the coin's name from the mapping so
522:25 - there you have it you want to type in
522:28 - token instance map token name dot name
522:32 - function and there you go if you go
522:34 - ahead and redeploy the contract
522:37 - and then go ahead test this out
522:39 - and then type in coin a it will return
522:41 - coin a
522:43 - all right so let's build the function
522:45 - that will return the custom coins
522:47 - address so we can fetch a bunch of
522:49 - things with that just by passing in the
522:52 - name so let's do that
522:54 - all right so we're gonna get started by
522:55 - just starting a new function we'll call
522:58 - it just get token address or whatever
523:00 - and it will have one input which will be
523:03 - a string and it's going to be token name
523:06 - and then it will return obviously an
523:09 - address and then all we're gonna do is
523:11 - just call the address function
523:13 - on the token instance map and then
523:16 - passing token name so literally we're
523:18 - going to use the mapping that we already
523:20 - have pass in the name and that will
523:23 - return the entire thing and we're just
523:25 - going to we're just going to need the
523:26 - address of that specific contract okay
523:29 - so let's go ahead and deploy that and
523:32 - let's see if that works so if I just
523:35 - type in coin a and then hit that there's
523:37 - my address that's uh working perfectly
523:40 - let's go ahead and get started swapping
523:42 - stuff because this is where like the
523:44 - real deal is gonna get started all right
523:46 - now we are going to get started swapping
523:49 - eth to custom coins and this is where
523:52 - the real meaty stuff is happening so you
523:55 - can come back to this if if something is
523:57 - unclear
523:58 - all right so let's just go ahead and
524:00 - create a new function it's going to be
524:02 - oh
524:04 - create a new function it's going to be
524:05 - actually a pretty simple one so we're
524:07 - going to call it just swap East to token
524:09 - and it will have one input it's going to
524:12 - be a string that's going to be the token
524:14 - name so basically what's going to happen
524:16 - is you're going to send X amount of eth
524:20 - to the contract and the token name and
524:23 - that's it and then the rest is going to
524:24 - be handled by the contract this is going
524:27 - to be a payable function because we'll
524:29 - need to send money all over the place
524:32 - and it will return a number of how much
524:35 - was actually converted we're going to
524:38 - need to have a couple of variables here
524:39 - we're going to be saving the input value
524:41 - then we're going to be saving the output
524:44 - value which is going to be input value
524:45 - slash each value and if you look up to
524:47 - my line 15 on top of the screen that's
524:50 - where my eth value is at and then we're
524:52 - going to need to make it an 18 digit way
524:55 - thing remember that's that's a solidity
524:58 - thing and then we're gonna need we're
525:00 - going to need the requirement here we're
525:02 - going to need to make sure that the
525:03 - transfer it actually happens all right
525:05 - so we're going to need to transfer from
525:08 - the coin that the user is firing we're
525:12 - going to need to pass a couple hour much
525:14 - we need to basically the output value
525:17 - amount we need to transfer it to the
525:19 - user's account all right so that's how
525:21 - we're calculating the whole thing and so
525:24 - there is and then we just return the
525:26 - output value which will just tell the
525:28 - user hey this is how much you actually
525:30 - got for your money and so there's the
525:33 - value that helps us once again convert
525:35 - between eth and the custom token and
525:38 - you're going to decide which token you
525:40 - want to get and then you're just going
525:42 - to pass it turn it into way transfer it
525:45 - over and if that's good you're getting
525:47 - ready to go all right so let's go ahead
525:49 - and actually test this out so I'm going
525:51 - to deploy it and let's see what do we
525:52 - got
525:53 - because of the Constructor I already
525:55 - have access to a bunch of Ethan and all
525:58 - these tokens so those are already there
526:00 - so let's go ahead and use that swap eth
526:03 - token function
526:04 - and so I'm going to need to type in coin
526:07 - a
526:08 - and put in a value of I don't know two
526:10 - if this is good and if let's see what
526:13 - happened so it says erc20 transfer
526:16 - amount exceeds balance so we're gonna
526:18 - need to increase that and that's because
526:20 - like initially we just started with a
526:22 - couple of coins let's just make it like
526:24 - 10 000 or something so there's like
526:27 - actual balance there all right deploy it
526:29 - again let's try it again pass in coin a
526:32 - okay it seems like it worked and now
526:35 - we're just going to go ahead and check
526:37 - the balance now it has two inputs
526:39 - remember you're gonna put in coin a and
526:42 - then uh the wallet that you want to
526:44 - check it on so put in new wallet address
526:46 - and we should get back a pretty
526:49 - interesting number in a way but it's
526:51 - going to be a one and a lot of zeros so
526:53 - let's see and there you go works
526:55 - perfectly Works beautifully now we're
526:59 - gonna need to do the swap the other
527:01 - direction you're going to need to do it
527:03 - from Custom coin to eth as well so let's
527:06 - go ahead and do that now all right let's
527:08 - say you converted too much Ethan you
527:11 - want to convert some back I got you
527:13 - start by creating a new function and
527:17 - that and that will call swap token to
527:19 - eth which will obviously just like last
527:22 - time taken one string that is the token
527:25 - name but this time it will also take in
527:27 - a u-n which will be underscore amount
527:30 - and then this will return once again the
527:33 - U in now
527:34 - we're gonna get started with some quick
527:36 - math and stuff like that so
527:38 - create a new variable it's going to be
527:41 - exact amount which is going to just
527:43 - convert it to way because what convert
527:46 - it to the 18 18 digit version the
527:48 - currency that you're passing in so
527:50 - that's always useful when you work with
527:52 - solidity and you want to go ahead create
527:54 - a new variable which is going to be the
527:57 - eth amount now it's going to be exact
527:59 - amount times The Ether value which is
528:03 - just the conversion value and then
528:05 - and we can get into business now we're
528:08 - going to need to make sure that the
528:10 - current address so meaning the current
528:12 - the contracts built in wallet has enough
528:14 - ease to enough ease to transfer over so
528:17 - you want to make sure that balance is
528:19 - greater than or equal to the amount that
528:21 - is required and if not just throw an
528:25 - error message and then after that I'm
528:27 - going to go ahead and get started
528:28 - actually transferring that money so you
528:31 - want to make it make the message sender
528:33 - address payable and then transfer the
528:35 - required amount now after that
528:39 - you want to make sure at this point that
528:41 - the transfer was successful and then you
528:43 - want to and then last but not least
528:45 - return the amount that was to be that
528:47 - was transferred over now let's go ahead
528:50 - and test this out because there's a
528:52 - couple of things that we haven't
528:53 - discussed just yet but you're gonna find
528:56 - it out real soon so let's go and um do
528:59 - the same steps so we're just going to go
529:01 - ahead convert some eth and then let's
529:04 - get the address
529:06 - so yeah there we go the ethuke token was
529:10 - successful however let's go ahead and
529:11 - start convert some of that back so yeah
529:15 - let's go with 12 coin A's let's uh let's
529:18 - transact and there you go there's some
529:20 - sort of error now don't worry about it
529:22 - it just says insufficient allowance on
529:24 - the second line at the very end that's
529:26 - something we haven't discussed yet but
529:28 - that's something that we're going to
529:29 - address right now so what you need to do
529:31 - is get the address of the coin
529:34 - like that and then we're gonna go ahead
529:37 - and interact with the coin contract
529:39 - itself as you can see on the screen
529:41 - because as of right now we are only
529:43 - interacting with the decks itself but we
529:46 - need to interact right now with the coin
529:47 - because we're gonna we're gonna need to
529:49 - increase the allowance so so put it put
529:52 - in your wallet address right there
529:55 - okay right there
529:57 - that's going to be your wallet address
529:58 - and now you're going to include increase
530:00 - the amount so that's what we need to
530:02 - specify now and just to make like things
530:05 - easy we're going to approve the entire
530:07 - balance of all the coin AIDS and then
530:09 - now it should go through so let's go
530:11 - ahead and actually hit transact and
530:15 - as you can see both of them both of the
530:19 - transactions went through and there you
530:21 - go the balance just changed by 12. you
530:24 - can see at the very end it says 88 and a
530:26 - lot of Nines in front of it so that
530:28 - means that our function worked perfectly
530:32 - in this case and just got it done so
530:36 - with that said let's go ahead and now
530:38 - enable the swapping between token custom
530:40 - token and custom token all right so far
530:43 - we have covered two of the three main
530:46 - swapping methods one just for quick
530:49 - refresh one was eth to custom token two
530:53 - was custom token to eat now we're gonna
530:55 - need to cover the custom token to custom
530:58 - token so let's say you wanna you have a
531:01 - lot of coin A's but you want some
531:02 - coinbase and you don't want to spend e
531:04 - you just want to convert coin a to coin
531:07 - B that's what's coming up
531:09 - all right so we're gonna go ahead and
531:11 - start up with our trusty function and
531:13 - then it's going to be swap token to
531:15 - token or you can name it whatever but uh
531:17 - we're gonna need two strings as input so
531:19 - there's gonna be Source token name and
531:21 - there's gonna be destination token name
531:22 - and you also want to put in an amount
531:25 - which is going to be a number now this
531:27 - is going to be once again a public one
531:28 - and we're gonna need to make sure that
531:31 - the source to connect we're going to
531:33 - need to make sure that we take out the
531:36 - amount yeah we take out the amount that
531:39 - is trying to be transferred from The
531:42 - Source wallet and we just store it in
531:44 - the contract and then we're going to
531:46 - transfer over from the central wallet to
531:50 - the user uh themselves so that's
531:52 - something a liquidated pool would be in
531:56 - a real life situation but this is going
531:58 - to be like a dumb down easier version of
532:00 - that so and now we're gonna just
532:03 - transfer over a bunch of token b or like
532:06 - destination tokens to the sender so once
532:09 - again lines for first line is just
532:11 - taking out the source token from the
532:13 - user's wallet and then second is going
532:16 - to take take the equivalent amount in a
532:19 - different token and then put it back
532:21 - into the user's wallet and that's
532:24 - basically our function so let's go ahead
532:26 - and deploy it and we're going to go
532:28 - ahead and transfer swap some eth2 to
532:32 - coin a and then now we're going to need
532:35 - to increase the balance okay there you
532:37 - go we got the balance now we're going to
532:39 - need to increase the allowance so that's
532:41 - something that we're gonna do and just
532:43 - for simplistic approve for the entire
532:46 - balance let's go ahead and test out our
532:49 - function so coin a to coin B and let's
532:52 - say we just want to try pass over a 10.
532:55 - so what we need to see now is that when
532:58 - we check on coin B's balance in our
533:00 - wallet we're gonna we should see a ten
533:03 - and there you go ladies and gentlemen
533:05 - that is a perfect solution if you see
533:08 - that it is perfect and if not just go
533:11 - back rewind where you can just double
533:13 - check that the function is perfectly
533:16 - written or if you've made mistakes
533:18 - that's that let's go ahead and keep on
533:21 - going now this is just going to be like
533:23 - a quick complimentary function we're
533:25 - just going to go ahead and double check
533:27 - that how much eth is available on the
533:31 - contract so it is going to be an easy
533:33 - actually you should go ahead try it out
533:35 - by yourself there's no input nothing one
533:38 - liner
533:39 - I think so it's like a super easy
533:41 - function Try It Out by yourself pause it
533:43 - now and then if you were able to figure
533:45 - it out good if not it's completely fine
533:47 - too let's keep on going with the
533:49 - solution
533:50 - so it's going to return a uint and what
533:53 - we're going to return is address this
533:55 - dot balance that's it and that should in
533:58 - theory return how much eth is currently
534:01 - stored on our how much it is currently
534:05 - stored on our contract wallet so let's
534:08 - go ahead deploy the new contract and
534:11 - let's see what we've got
534:12 - it'll say zero so that's perfect and if
534:15 - you were to send some in there and
534:16 - convert then it's going to be updated
534:19 - but with that said let's keep on going
534:21 - all right so now we're gonna start using
534:24 - truffle extension inside of our vs code
534:26 - and what you want to do is just copy the
534:28 - entire contract that we just wrote put
534:30 - it on your clipboard command see it and
534:33 - because we're going to be copying it
534:34 - over so in our vs code what we're going
534:37 - to do is go ahead and create a new
534:40 - contracts folder and open up the CLI
534:43 - right there and you want to install
534:44 - truffle
534:46 - so it's going to be a global install if
534:47 - you haven't done that already now is the
534:49 - time and then you want to type in
534:50 - Truffle in it and that will spin up a
534:53 - new truffle project now inside the
534:55 - Truffle project you want to go ahead and
534:57 - type in truffle create contract unit
534:59 - Swap and that will create you a new
535:02 - contract file and that is where you want
535:04 - to go ahead and paste your contract so
535:07 - as you can see definitely you have to
535:10 - make sure that the solidity version is
535:13 - perfect and then just haste the entire
535:15 - contract and there you go now you might
535:18 - be seeing this right underscore under
535:20 - the on opens Upland package and that's
535:23 - because it hasn't we haven't installed
535:25 - it yet so let's go ahead and fix that so
535:27 - it's your net and then paste at open
535:29 - Zeppelin slash contact and once it's
535:32 - done you want to right click on your on
535:35 - your solidity file and then just hit
535:37 - build contracts now if you do not have
535:40 - Shuffle extension at this point
535:42 - go back in the video I explained it
535:45 - earlier how to install it and how to set
535:46 - it up I'm gonna I'm gonna do it again
535:48 - but that is where they set up it so if
535:51 - you're skipping around it's gonna be
535:52 - like somewhere in the beginning so
535:54 - that's where you want to look for it all
535:56 - right let's go ahead and continue so you
535:59 - want to click that and then it's going
536:00 - to build and in the output you can check
536:03 - how that goes you want to see something
536:05 - like successful
536:07 - compiled successfully and then next up
536:11 - you want to hit deploy like right click
536:13 - and deploy and then select girly now we
536:16 - set this up as well and this is uh so
536:19 - don't worry about it just go back and
536:21 - check it out if you haven't done that
536:22 - already now it's asking for gas price
536:24 - leave it empty just hit return on it
536:26 - don't even worry about it and then I'm
536:29 - gonna either paste your mnemonic or if
536:30 - your body is set it up you can just use
536:33 - that configuration and then if you're
536:34 - pasting it it's going to do this and
536:37 - then once you're done
536:39 - it will go ahead and try the blade
536:41 - Howard it's not going to go through it's
536:43 - like you don't see any kind of address
536:45 - on my screen right now and that's
536:47 - because we missed out we completely
536:49 - forgot the migration as file that's
536:51 - something that like we hear a clever
536:53 - programmer every single time that is our
536:55 - signature that we try to deploy and then
536:57 - oh the migrations file so in the
537:00 - migrations folder you want to go ahead
537:01 - and create a new file which will be one
537:05 - underscore deploy and then we'll have to
537:08 - import the unit swap contract so it's
537:10 - going to be artifacts that require any
537:12 - unisplot and then just explore export
537:14 - the deployer and so then you're going to
537:17 - be good to go now try again hit deploy
537:20 - and this time it's gonna go through so
537:22 - let's speed through that real quick and
537:26 - as you can see there is my contract
537:27 - address so you want to go ahead copy
537:30 - that and then go into your unit swap app
537:32 - go into euros and then contracts.js
537:35 - close that output out and then just
537:38 - create a new variable Bowl which will be
537:40 - addressed and just save it there because
537:42 - that's going to be something that that's
537:44 - going to be the thing that we're going
537:46 - to be using now if you want to double
537:48 - check on ether scan
537:49 - currently.etherscan.io paste your
537:51 - address in you're going to see
537:53 - everything that just went through so if
537:55 - you're up to this point congratulations
537:58 - now we're going to go ahead and set up
538:00 - rainbowkin alright so you want to go
538:02 - into your app.js file and we're going to
538:04 - import a bunch of things so just hold on
538:07 - it's going to be Rainbow Dash me slash
538:09 - rainbow kid slash
538:10 - styles.css it's going to be giving us
538:13 - all the Styles and then you're going to
538:16 - copy you're going to import merge from
538:18 - low dash dot merge and then we're gonna
538:20 - this is gonna this is where it's gonna
538:23 - get started this is where it's going to
538:25 - start to be mental so
538:27 - we're gonna need get default wallets
538:29 - we're gonna need rainbow kit provider
538:31 - we're gonna need Dark theme and we're
538:33 - gonna need midnight theme actually you
538:35 - can just choose between the two we
538:37 - sometimes just look at it I don't know I
538:39 - prefer Dark theme if you're interested
538:41 - but try out midnight that's like
538:43 - completely black and then the dark is
538:45 - like dark gray
538:47 - the more you know all these are coming
538:49 - from rainbow kit now really a bunch of
538:53 - things from wag me I believe is what's
538:55 - coming up so let's chain configure chain
538:57 - create client and whack me config all
539:00 - this is coming from wag me and then
539:03 - we're going to import infuro Provider
539:04 - from wagme slash provider slash infuria
539:07 - and that is basically it now
539:11 - up until this point you need to import
539:13 - everything we're going to be using all
539:15 - of it so just pause here for a quick sec
539:18 - we'll check you of everything and let's
539:20 - keep on going then now we're going to
539:23 - destructure chains and Provider from
539:26 - configure chains and we're going to have
539:29 - two arrays in here so
539:32 - in the first array we're just going to
539:34 - put in chain.girly that means that this
539:36 - app is only going to be running on the
539:38 - early chain nothing else is going to
539:40 - work here and then for that we're going
539:42 - to be using the inferior provider where
539:45 - we need to put in an API key now we have
539:49 - it somewhere if you haven't done that
539:50 - already just place it in an EMV file and
539:54 - then you can you don't need
539:55 - you don't actually have to expose it to
539:58 - the browser that's a good thing about it
540:00 - you can just go with inferior API key
540:02 - you don't have to do next next public
540:04 - but as you can see that is how you get
540:07 - your API key so if you haven't done that
540:09 - already now is the time to do and so
540:11 - there you go
540:13 - all right next up we're going to be
540:15 - setting up the connectors for our OLED
540:19 - connection and that's that's going to be
540:21 - using get default wallets from wagme now
540:25 - we need to pass in app name that is
540:27 - going to be uni swap you can pass in
540:28 - whatever and then you're going to need
540:30 - to pass in Chains and then next up we're
540:33 - gonna have a wagme client that will use
540:36 - create client and we're going to need to
540:38 - pass in a couple things here so we're
540:40 - going to need to pass an auto connect
540:42 - you can either set it to true or false I
540:44 - prefer to be truth true but for this
540:46 - build we just use false for whatever
540:48 - reason and then you want to pass in
540:50 - connectors and the provider and with
540:53 - that all the setup is ready
540:55 - and then one last thing to set up is
540:57 - going to be we're going to make sure we
540:59 - are going to create a my theme which
541:01 - will merge midnight theme
541:04 - and
541:05 - we're going to override a couple of
541:07 - colors
541:08 - so we're gonna say we're gonna have an
541:10 - accent color of that and this is like
541:12 - completely optional this is just
541:13 - elements so there you have it extended
541:16 - extended color foreground
541:19 - accent color and now we're going to wrap
541:22 - our app in between wagmeconfig and where
541:25 - we're going to need to pass in Wagner
541:27 - client is it's like a context these are
541:29 - like contexts for our app to be able to
541:31 - access this and then we're going to
541:33 - import the or we're going to wrap the
541:36 - rainbow kit provider with the chains and
541:39 - the theme and then just and then just
541:41 - pass in and then just pass in the app
541:43 - and that is basically it now we're going
541:46 - to go ahead and actually render the
541:48 - connect button to our screen all right
541:51 - let's actually go ahead and render out
541:53 - that connect button and so this is going
541:55 - to be a quick one what you want to do is
541:57 - go into your header file inside your
542:00 - components folder and then go ahead and
542:02 - import connect button from rainbow kit
542:05 - just like that and then we already as
542:08 - you can see we have it commented out
542:10 - that's the place where you want to put
542:12 - it in as a component so that's literally
542:15 - all we do once that's there it's going
542:18 - to show up on the top right Corner no
542:20 - let's actually check it out so there you
542:22 - go literally pre-set up buy rainbow kit
542:26 - so you can already use it and once you
542:27 - hit I'm going to mask it's going to work
542:30 - perfectly so
542:32 - that's it all right let's go ahead and
542:35 - set up all the contract Builders so
542:37 - we're going to be importing a couple of
542:39 - things here so first of all we're gonna
542:41 - need ethers then we're going to need
542:43 - unisplot API from utils slash uniswap
542:47 - ABI yeah uniswap.json and then we're
542:50 - going to do the exact same for the
542:52 - custom token these are coming with the
542:55 - build all right
542:56 - now next up we're gonna we're gonna need
542:59 - two functions that will immediately
543:02 - straight away going to export so let's
543:04 - not waste any time on that first we're
543:07 - gonna have a token contract that we're
543:10 - gonna export and that'll take in an
543:12 - address and then we're going to you
543:14 - we're going to generate a provider using
543:17 - ethers the providers.web3 provider and
543:20 - that and using the window ethereum and
543:23 - what is window ethereum that's basically
543:25 - the code that is being injected by
543:28 - metamask now next up we're going to use
543:31 - that that we're just going to go ahead
543:32 - and destructure ethereum from that from
543:34 - window and if it actually exists meaning
543:37 - the user has installed metamask we're
543:40 - going to use that to generate first a
543:43 - sign so we're gonna we're gonna say
543:44 - provider.getcenter
543:46 - and all these are going to be like this
543:49 - is gonna be this is a lot of like setup
543:51 - and prep and whatever but this is
543:53 - ultimately going to be like completely
543:56 - needed in order to be able to interact
543:58 - with the contract all right so we're
544:00 - gonna join the contract reader and it's
544:03 - going to use it's going to be new
544:05 - ethers.contract and passing address
544:07 - contract ABI and assigner itself and
544:11 - then just return that bad boy
544:13 - and that's pretty much the first one now
544:15 - we're going to repeat this exact same
544:17 - process for for the unit swap contract
544:20 - itself so the decks so the first two
544:22 - lines are copy paste immediately if
544:25 - statement copy paste
544:27 - and the only two things that are going
544:30 - to change are going to be the the
544:32 - address because that's there's only one
544:35 - address in this scenario and that's
544:37 - going to be the Dax address and then
544:39 - which ABI are we actually are we passing
544:42 - it so in this case it's going to be the
544:43 - unit Swap abi.abi and then we're just
544:46 - passing the same signer that we created
544:49 - up above and then return the contract
544:51 - reader so that's pretty much it
544:54 - now we're going to set up a couple more
544:55 - helper functions and then actually put
544:58 - things into motion all right so these
545:01 - are going to be two functions that we're
545:03 - going to be setting up just so we can
545:05 - convert between eth or ether and way so
545:09 - we're going to import ethers from ethers
545:12 - and then we're gonna use that to set up
545:14 - two functions so there's we're gonna
545:15 - have one function that will be two way
545:19 - and that will take in an amount and then
545:21 - that'll take into decimals but default
545:24 - value is going to be 18 and then con
545:27 - we're just going to say cause two-way
545:31 - ether.udos.parse units and that's just
545:34 - something that like comes from ethers
545:36 - and I'm passing the amount and I'm
545:38 - passing decimals and then we're just
545:40 - going to return that now
545:43 - as a and then we're just going to return
545:44 - that as a string that is the first one
545:47 - and then the second one I'll let you try
545:49 - figure it out by yourself but it's going
545:52 - to be on the same analogy the only
545:53 - difference we're going to be passing in
545:55 - way here and then we're gonna need eth
545:57 - so I'm gonna go ahead and continue now
545:59 - so we're gonna say it's gonna be two eth
546:02 - and once again we're gonna pass in an
546:04 - amount decimals it's gonna be 18 usual
546:08 - utils.forement units and then we're
546:11 - gonna say we're gonna go to eat same
546:13 - we're gonna type the exact same thing
546:15 - all right that being said we are
546:18 - actually going to go ahead and start
546:20 - implementing the East coin functionality
546:23 - all right so let's actually let's like
546:27 - finally actually swap from E3 or custom
546:30 - tokens that we worked so hard for all
546:33 - right so you want to go into your
546:34 - queries.js file and then import a couple
546:37 - of things so pick number in ethers from
546:39 - ethers first of all and then you want to
546:41 - import contract and token contract from
546:43 - the from the contract file that we set
546:45 - up earlier so that's the like contract
546:47 - interaction interfaces functions I don't
546:50 - remember it though completely but that's
546:52 - what's basically going to allow you to
546:55 - actually interface with your contract
546:57 - and then next up
546:59 - we're going to import to eat and to wait
547:01 - so the other two helper functions that
547:04 - we just created and so here we're going
547:08 - to have the swap to eat function which
547:10 - will require a token name and amount and
547:12 - as I always say use try catch functions
547:15 - or console let the error out and then
547:17 - we're going to convert the amount to way
547:20 - because once again it's already only
547:22 - works with weight
547:23 - we're going to use the contract function
547:26 - that we set up earlier to generate a
547:28 - contract object for a unismo for us and
547:31 - then we're going to use that to actually
547:33 - handle the transaction itself so we're
547:37 - going to say contractobject.swap to
547:39 - token and passing token name and TX
547:42 - which is the way amount of the each
547:45 - amount the user passed in and then we're
547:48 - going to go ahead and generate a receipt
547:50 - by waiting for that data and then return
547:53 - it once it's done
547:55 - so that's basically it for that file now
547:58 - you want to go ahead and go over the
547:59 - swap component and scroll down to
548:01 - wherever you see functions for contract
548:03 - functionality here and then you want to
548:06 - put in create a new function that'll
548:09 - heavily rely on our setup for of the
548:12 - front end so we're going to create a
548:14 - perform swap function that's going to be
548:16 - an async function and we're gonna before
548:19 - we do anything set transaction pending
548:21 - true all right and then we're going to
548:24 - go ahead and generate a receipt we're
548:27 - going to go ahead and start create a new
548:28 - create a new variable that we're going
548:30 - to call receipt and then using
548:33 - everything that we set up earlier just
548:34 - type in uh if Source token equals eth
548:37 - and destination token token doesn't
548:40 - equal either and you would just want to
548:42 - invoke and you want to wait for the swap
548:45 - if the token function and then put in
548:47 - destination token and input value and
548:50 - like I said this whole thing is heavily
548:54 - relying on the front and we already set
548:56 - up for your convenience
548:58 - now you definitely want to make sure
549:01 - that a function is actually getting
549:02 - called so we're gonna create a new
549:05 - function that we'll call handle swap
549:08 - it's actually on my screen in on line
549:10 - 73. there was a little bit of scrolling
549:12 - so
549:13 - just wanted to help you out with that
549:15 - now
549:16 - here it's a little repetitive but just
549:19 - kind of double the check that everything
549:21 - is good to go there and then call the
549:23 - function once the once everything is
549:26 - ready now my screen on line
549:29 - 140 where you're going to pass in that
549:32 - function
549:33 - and what that basically does is that
549:37 - will fire up this function and whenever
549:39 - you hit the swap button which you
549:41 - currently cannot see because the wallet
549:43 - is not connected to the app but I'm
549:45 - going to show you just now let's go to
549:47 - this app put in a value there and then
549:51 - we're going to need to select uh tokens
549:53 - that's going to be coin a and you're
549:55 - going to connect your wallet so that's
549:57 - something you gotta do and then it
549:59 - didn't turn blue so there is some sort
550:01 - of error going on here let's let's
550:03 - actually go ahead and figure that out
550:05 - now as you can see on line 16 we have
550:08 - imported use account from wagme and that
550:11 - basically is just going to help us this
550:13 - is going to help us to check whether
550:15 - well let us be is connected or not so
550:18 - just update it on line 61 and you're
550:21 - just gonna destructure address from use
550:25 - account and that itself is going to take
550:27 - care of this whole thing the wallet is
550:29 - connected and then there you go now
550:32 - there's your swap button and then
550:34 - confirm that transaction speed it up a
550:37 - little bit because that never hurt
550:39 - and there you go
550:42 - you can try it with another amount and
550:44 - it's going to work perfectly again so
550:48 - there it is that is your function now
550:51 - we're going to go ahead and fetch
550:53 - balances of each token and render them
550:55 - out on the screen all right ladies and
550:58 - Gentlemen let's go ahead and fetch those
551:01 - balances that's going to be a little bit
551:03 - of a longer thing but yeah that's so
551:05 - that's where it's going to go now
551:08 - you want to go into your header file
551:09 - because everything is going to happen in
551:11 - our header and we're going to import a
551:13 - few things so start with use account
551:15 - from wagme and then we're going to
551:17 - import token balance from token balance
551:20 - and then we're gonna create a new use
551:23 - state which is going to be token balance
551:25 - and it's going to start out as a
551:27 - completely complete nothingness now
551:30 - you want to extract address from or the
551:33 - structure address from use account
551:36 - and then we're just going to go ahead
551:38 - and kick things off with a use effect
551:40 - which we're gonna fire off every single
551:42 - time once the address changes that is
551:45 - important because if you connect a
551:47 - different wallet to the app you want to
551:49 - see the updated balances inside that
551:53 - wallet and not the previous one so this
551:55 - is super important
551:57 - now we're going to go ahead and uh our
552:01 - we're going to update the use date with
552:04 - a bunch of jsx code in there so we're
552:07 - going to use the token balance component
552:10 - and pass in coin a and then the wallet
552:12 - address
552:13 - so we're going to repeat this a couple
552:15 - of times
552:16 - so like we because we have three custom
552:19 - coins we're gonna do this three times
552:21 - and by the way those
552:24 - um coin names are going to be strings so
552:26 - you want to make sure you have coin ABC
552:29 - and then three times the wallet address
552:31 - as as in the address
552:34 - next up you want to have a an if
552:37 - statement and make sure that it and if
552:40 - the wallet and if the user haven't
552:42 - connected their wallets then you want to
552:44 - put you want to punch out a little bit
552:46 - of a notification for them so we're
552:48 - gonna go ahead and set that up right now
552:51 - so it's going to be a toast wallet and
552:54 - it's just going to be like a toast error
552:56 - and we're gonna be like yo connect your
552:58 - wallet or something like that it's going
553:00 - to be there for two seconds and that's
553:03 - basically how it's gonna look like you
553:05 - can see it on the right
553:06 - okay so we just connected our wallet and
553:09 - now you're gonna go ahead and we
553:11 - actually have to render those components
553:13 - out so render out just put the token
553:16 - balance component and render it out
553:19 - right there but throw some sort of error
553:22 - okay so let's actually go into that
553:25 - token balance component let's see what's
553:27 - going on in there
553:29 - so we're going to need to create a
553:30 - couple things we're going to need to
553:31 - have a balance use State and we're gonna
553:34 - need to have a copy icon used to so
553:38 - there's a few things that we need to
553:40 - specify here and that will just be a
553:43 - icon that we already imported for you so
553:45 - that's going to be clipboard icon
553:47 - and then we're gonna we're gonna have
553:50 - separate we're gonna have multiple
553:51 - States we're going to have a transaction
553:53 - pending and we're going to have a not
553:55 - not pending and we're just gonna kick
553:57 - them off based on whatever uh whatever
554:00 - is suitable for the situation
554:02 - and then you also want to have a token
554:04 - address
554:06 - over there and by the way the balance is
554:08 - going to start out as an as like a dash
554:10 - string basically
554:12 - all right now we're gonna have two
554:15 - notifiers set up so that one is going to
554:17 - be in our error and this is going to be
554:20 - like a toaster just like the one before
554:23 - but this time it's gonna go for six
554:25 - seconds and that's by the way in
554:27 - milliseconds so that's why it's six
554:29 - thousand and then we're gonna have a
554:31 - success message or like a success host
554:34 - where we're going to say transaction
554:37 - complete
554:39 - and
554:40 - I mean you can go ahead and set up a
554:43 - duration for that too honestly so go
554:46 - ahead create a new function which is
554:48 - going to be fetch token balance and
554:50 - that's going to be and then we're just
554:52 - gonna kick things off with invoking the
554:54 - get token balance function which we
554:56 - imported earlier which we're gonna set
554:59 - up in a little bit and you're going to
555:01 - need to pass in a name and wallet
555:03 - address for that and then we're going to
555:05 - also need to format the balance
555:07 - and then set that balance or set the
555:10 - formatted balance to the state itself
555:13 - out so there's going to be that's how
555:16 - it's going to look like in in a little
555:18 - bit that's the that's the component that
555:20 - we're going to make a
555:22 - we're gonna have
555:23 - now we're gonna have to make we're gonna
555:25 - have to fill up with the good data all
555:29 - right so go into your queries.js file
555:31 - and we're going to go ahead and set up
555:32 - get tokenbalance function and so we're
555:35 - gonna need to call the contract there so
555:38 - we're gonna need to set up the contact
555:39 - object and just like before use the get
555:42 - balance function from a method from the
555:45 - contract balance and then create a new
555:48 - variable and then return it and that
555:50 - should basically get it every single
555:52 - time and then you're gonna need another
555:54 - one which which is going to be get token
555:57 - address and once again just go ahead try
556:00 - it out by yourself like every single
556:02 - time we create a new function I want you
556:04 - to go ahead from now on because it's
556:05 - going to be a lot of repetition so try
556:08 - it out by yourself and see if it works
556:11 - and then just come back for the solution
556:13 - so try catch console log the error out
556:16 - and then we're gonna create the usual
556:18 - contract object and then the usual way
556:21 - just call on the get token address font
556:24 - method now everything that we just
556:27 - created we're going to go ahead and now
556:28 - import from from that file so get token
556:32 - address and get token balance
556:34 - and then we're also going to set up a
556:37 - new function which is going to be
556:38 - fetching which is going to use the get
556:41 - token address function that we just set
556:44 - up so it's going to be fetch token.s
556:46 - it's going to be an async function use
556:48 - that and then whatever that thing
556:50 - returns we're going to set it to the
556:52 - state and then we're going to go ahead
556:54 - set up a use effect that will run again
556:57 - and again whenever name and the wallet
556:59 - address changes
557:01 - and if both of them exist then we're
557:04 - gonna fetch the token balances and then
557:06 - we're also going to fetch the token
557:08 - addresses and if that if they and if not
557:11 - either of them don't exist we're just
557:13 - going to set everything back to their
557:15 - normal regular or like the initial value
557:18 - and then it says ethers doesn't exist so
557:21 - let's go ahead fix that import ethers
557:23 - from ethers and that should be good
557:26 - pretty much now
557:27 - if you scroll down on my screen it's
557:30 - line 40 but in your screen but on your
557:32 - page it might be something different so
557:34 - just check out where it's at
557:36 - we have a hard-coded balance there but
557:38 - we should go ahead and now fix that so
557:41 - let's see what happens there and there
557:44 - you go ladies and gentlemen as you can
557:45 - see our previous two swaps were
557:48 - successful because you can see the 30
557:50 - coin a and the 20 coin B transactions
557:54 - that would fit there so that's basically
557:56 - it now we're gonna go ahead and display
557:59 - a success toast whenever the transaction
558:03 - succeeds
558:05 - all right let's just go ahead and set it
558:07 - up so go back to your swap component and
558:10 - as you can see we already set everything
558:12 - up for Success so now we're just gonna
558:14 - invoke everything
558:16 - so go down to your go to your perform
558:19 - swap function we should have set the set
558:22 - transaction pending state to false once
558:25 - it's done and then if the transaction
558:28 - results in a receipt and that result and
558:31 - that receipt doesn't have a transaction
558:34 - hash property then you want to go ahead
558:37 - and notify errors I've hired that off
558:40 - and then pass in receipt so everybody
558:42 - knows what's happening else
558:45 - just notify success and that should
558:47 - basically be pretty successful so let's
558:50 - go ahead and test it out so let's do
558:53 - some transactions over there
558:55 - hit confirm and let's see what do we got
558:58 - let's see if it works let's speed that
559:00 - bad boy up and any moment now and there
559:04 - you go there is your host message and
559:08 - also as you can see on the right hand
559:10 - side once I connect my wallet coin c oh
559:14 - coin bead now has 60 so
559:17 - the transaction definitely went through
559:20 - and now we have proven that it did go
559:23 - through
559:25 - all right let's go ahead and now set up
559:27 - the swapping from token or like from
559:30 - Custom erc20 token to eth so what we're
559:34 - going to be doing here is uh first of
559:36 - all close out everything we're not we
559:38 - don't need a bunch of things go into
559:39 - your query is the JS file and we're
559:41 - gonna set up two functions but let's
559:43 - start with the first one now
559:45 - so that's going to be
559:47 - swap token to eat now it's going to be
559:49 - an async function that takes in token
559:52 - name and amount and we're just gonna do
559:54 - the usual try catch a console log area
559:57 - create your contract object and then
560:00 - what we're going to do is use that
560:02 - contract object to swap token to each
560:05 - basically call that function of the
560:07 - contract so we're going to pass in the
560:09 - usual stuff to the way converted amount
560:12 - of the amount you want to convert and
560:15 - then the token name now
560:18 - it's going to be the same thing whenever
560:20 - the receipt shows up wait for it and
560:22 - then return the receipt now as you
560:24 - remember we're going to need to
560:26 - pre-approve the amount to be transferred
560:29 - so let's do that now it's going to be
560:30 - the second function so that's going to
560:31 - be increase allowance and so once again
560:35 - we're going to have oh we're gonna pass
560:38 - in the token name and the amount and
560:40 - then we're going to do the usual try
560:42 - catch console log the error and there's
560:45 - going to be a little bit of a trick here
560:46 - now so I want you to listen closely so
560:48 - we're going to Fat what we're going to
560:51 - do is we're going to determine the
560:53 - address of the uh specific coin that
560:58 - we're gonna need and then we're going to
561:00 - use that address to generate a new
561:02 - contract object and we're going to use
561:04 - that to increase the allowance all right
561:06 - so there's going to be two contract
561:08 - objects here and both we're going to be
561:10 - interacting with two contracts in the
561:13 - same function so that's how let's
561:15 - continue so we're going to use the uni
561:17 - swap contract to get the address of the
561:21 - custom tokens we're going to pass in
561:22 - token name and then we're gonna go ahead
561:25 - and generate a token contract object
561:29 - using that address that we just
561:31 - generated so that we can increase the
561:33 - allowance and so we're going to do that
561:35 - right now so using that we're going to
561:38 - go ahead and say called approve
561:40 - and so what's happening now is the
561:43 - approved function Works in a way where
561:45 - you pass in who can who can interact
561:49 - with this what who can interact with
561:51 - this coin and how much are you allowing
561:55 - them to interact with this coin so we're
561:57 - going to need to pass in two things one
561:59 - of them is going to be the unit swap
562:01 - address and the other one is going to be
562:05 - the way amount of the amount or like the
562:09 - weight converted amount of the amount
562:11 - you want to convert
562:13 - and with that being said we're pretty
562:17 - much good to go here
562:19 - all right now let's actually connect
562:21 - this with our front end so we're gonna
562:24 - go into
562:25 - our swap component and then in the
562:28 - perform swap function there is that if
562:31 - statement so you're gonna add a else
562:33 - Clause after it so we're going to say
562:36 - else if if the source token is not if
562:39 - but the destination token is
562:42 - this is what we want to do so now we're
562:44 - going to generate the receipt based on
562:47 - that and we're going to call these swap
562:49 - token eth function and now we're going
562:52 - to create the increase allowance
562:54 - function so let's go ahead and do that
562:56 - so transaction pending has to be true
562:59 - and then we're going to use the function
563:02 - that we just built and then invoked it
563:04 - and invoking and then pass in Source
563:06 - token and input value and after that
563:09 - once it's good to go might as well turn
563:11 - off the loading screen and so inside of
563:15 - handle swap I'm going to turn on and the
563:17 - loading screen again and then you want
563:20 - to check whether the wallet has some
563:23 - sort of allowance on the source token
563:25 - for the amount that you are trying to
563:28 - convert back to e oh there's a there's
563:31 - an error I'm going to make it async okay
563:33 - that's fine and after that we're good
563:36 - with loading so let's actually move that
563:39 - and then if the result is valid and
563:42 - actually called the perform swap perform
563:44 - swap function and if if not if if the
563:48 - user doesn't have allowance now we get a
563:50 - call the handle increase handle
563:52 - insufficient allowance function and to
563:55 - do that what we're going to do like we
563:57 - we already set that up ahead of time now
564:00 - we're going to just switch out the swap
564:03 - button to a different button and so
564:05 - let's go ahead and do that that's on my
564:06 - screen that's line 162 and then there is
564:10 - a swap button text whether if it's your
564:12 - increase allowance or not and if it is
564:15 - then we're going to call the handle
564:17 - increase allowance function now let's go
564:19 - ahead and try it out let's see how this
564:21 - actually works so we're going to turn
564:23 - some we're going to use 20 coin A's and
564:26 - then swap back into eth and let's see
564:28 - what happens there's some interesting
564:30 - things going on around in the background
564:32 - so that's something so we apparently
564:34 - don't really have the has wallet
564:36 - allowance function but that's completely
564:39 - fine because we're going to go ahead and
564:40 - build it now let's see what can we do
564:42 - here so we're going to pass an owner
564:44 - we're going to need the token name and
564:46 - the amount and we're going to use the
564:48 - usual try catch console log the error
564:51 - that's fine and then we're going to use
564:53 - the uniswap contract to generate our
564:56 - contract object
564:57 - and then we're gonna have an address
565:00 - obviously once again we've got to fetch
565:02 - the token address to get everything and
565:05 - then
565:06 - using the using the token contract we're
565:09 - going to double check the allowance so
565:12 - we're gonna we're literally just gonna
565:13 - fetch it so we're gonna pass an owner
565:16 - and we're gonna pass that passing the
565:18 - unit swap address and then we're going
565:21 - to convert it into a like a regular
565:24 - human number so we're gonna say that's a
565:27 - bunch of things going on there so
565:29 - basically what's happening is we're
565:31 - going to get the way amount and then
565:34 - generate a big number from it and then
565:37 - we're going to use that to generate a
565:40 - string that we'll be able to work with
565:42 - later on so just go ahead copy that and
565:45 - then feel free to spend some time
565:46 - understanding what is happening there
565:48 - and then now we're gonna go ahead and
565:51 - return the result and also export the
565:54 - function because we need to use it in
565:56 - our swap component so let's go ahead and
566:00 - try it out again so if we click swap it
566:04 - says Ops insufficient allowance or gonna
566:06 - need to increase it so we're going to go
566:09 - ahead click that okay there's some
566:11 - interesting things happening here again
566:12 - so it says API that map is not a
566:15 - function we might have made a mistake
566:16 - earlier on yeah there it is so you want
566:20 - to double check that every single time
566:22 - when you are generating a contract
566:24 - contract reader you say you import the
566:29 - Json and then dot ABI and that's what
566:31 - you're trying to interface with because
566:33 - there's a bunch of stuff that you don't
566:35 - need so let's go ahead test this out
566:38 - again so refresh real quick connect your
566:40 - wallet and then I'm gonna say 30 okay
566:43 - insufficient allowance we've seen that
566:45 - and there you go give access
566:48 - let's wait for it to go through speed it
566:51 - up if we need to and then refresh real
566:54 - quick connect your wallet again and then
566:57 - now it says Swap and if you click it
567:00 - you're gonna approve the transaction
567:03 - itself not the allowance so we should be
567:06 - pretty much good to go soon
567:08 - so let's see how that goes perfect it
567:10 - says transaction completed so
567:12 - technically we should be good let's just
567:14 - refresh real quick so connect that
567:17 - and now you see that the values have
567:21 - been updated so that's basically it now
567:24 - we're just going to implement token
567:26 - token and we're good to go all right so
567:28 - to make this work we're gonna need to go
567:30 - into our queries.js file and it's going
567:32 - to be super simple it's going to be
567:33 - super fast so just create a new function
567:36 - swap token to token as in Source token
567:39 - and destination token and amount and the
567:41 - usual try catch console log the error
567:43 - because that's usually helpful to see
567:46 - what went wrong and now you're going to
567:49 - generate the contract object as usual
567:51 - you can once again try it by yourself
567:54 - but if it doesn't if you're not that
567:57 - experienced that's fine too which is
567:58 - going to be basically the response of
568:00 - the swept function
568:02 - and then just pass in everything that we
568:04 - got obviously make sure you convert the
568:07 - amount to weight and next up
568:10 - you want to go ahead generate the
568:12 - receipt and return it now if you don't
568:15 - export the function it's not going to
568:16 - work elsewhere so go back to your swap
568:18 - component after you've done that
568:21 - end of the performance swap's next
568:23 - statement you want to have an else
568:25 - clause which has no other conditions
568:28 - basically it just in the first two we
568:32 - made sure that everything is accounted
568:34 - for so now this is the only option to do
568:37 - or the only option to have and now what
568:39 - you want to do is generate their local
568:41 - receipt for that or update the receipt
568:44 - update the receipt variable for that and
568:46 - then call the swap token the token
568:48 - function from the file that we just from
568:51 - the queries file and pass in everything
568:53 - that function is go ahead and
568:57 - see what do we need so everything should
568:59 - be ready to go pretty much so let's see
569:03 - what do we got let's turn 30 coin A's
569:05 - and just swap them over to coin B let's
569:09 - see if that works so let's hit Swap and
569:12 - okay we gotta increase the allowance
569:14 - that's perfect that's fine okay hit
569:16 - confirm let's see if it works and we can
569:19 - just speed it up see if it's to go and
569:23 - after after that's done we can actually
569:26 - go and now that we have the allowance we
569:29 - can now actually go ahead and do the
569:32 - swap and once you confirm the
569:35 - transaction it should go through pretty
569:38 - fast transaction completed
569:40 - and there you go there you have it your
569:43 - coin a and coin B is updated so ladies
569:46 - and gentlemen that is it it is a fully
569:49 - functional unit swap Decks that is able
569:53 - to convert between random erc20 tokens
569:56 - use them you can literally actually
569:59 - use this and you can transfer your eth
570:03 - into custom coins and your custom coins
570:06 - back to Ethan that custom coins between
570:08 - custom coins and then all that kind of
570:10 - stuff so you can have basically your own
570:14 - trading bot I'm not saying you should be
570:15 - doing that but with a little enhancement
570:18 - you can automate that stuff so there you
570:22 - go that's that's pretty much it and I
570:24 - hope you got some value out of this
570:26 - tutorial and with that said I'll see you
570:28 - in the next one in this video You're
570:30 - gonna be building Sushi swap in next.js
570:33 - we're gonna be using solidity we're also
570:36 - going to be using infuria to build this
570:38 - app on the ethereum blockchain we're
570:40 - also going to be using rainbow kit to
570:42 - connect our meta mask this is going to
570:43 - be an amazing build let's just get
570:45 - started all right now let's go ahead and
570:47 - get started building these Sushi swap
570:49 - cone so as always we're gonna be using
570:52 - the custom CLI tool that we built for
570:54 - you so just pop in your email name and
570:57 - then just start typing in sushi swap it
570:59 - should show up and hit return on it and
571:02 - then let it do its thing now it will
571:04 - also open up infuria for you so go ahead
571:07 - log in or make an account if you don't
571:09 - have one already and then select web3
571:11 - API as Network and then just name it
571:13 - Sushi swap or whatever you want to and
571:16 - then in the meantime time likely the CLI
571:18 - tool will be done and will open the will
571:21 - open vs code for your convenience so
571:23 - it's full screen that and go back to
571:25 - inferior you should be good to go there
571:27 - you don't need to worry about it so
571:28 - finish setting up your inferior project
571:30 - and copy your API key and that should be
571:34 - pretty much your first step all right
571:37 - now as your first step what we're going
571:39 - to be doing is we're going to be
571:40 - creating a custom token so let's just
571:43 - get started so inside your contract
571:45 - slash custom decks Sol file you can
571:49 - start typing it and just like with any
571:52 - solidity file you will need an spdx
571:54 - license identifier which is going to be
571:56 - MIT and we are going to be working on
571:59 - the 0.8.0 version of solidity so just
572:03 - use that and write the gate we're going
572:05 - to go ahead and import some open
572:07 - Zeppelin contracts and libraries so the
572:10 - first one is going to be the erc20 and
572:13 - we're also going to be importing the
572:15 - safe math Library let's just do that and
572:18 - now we're going to go ahead and actually
572:19 - create the contract the token contract
572:21 - itself so as usual we're going to be
572:24 - building on top of the erc20 library and
572:27 - we're going to have obviously the name
572:30 - and the sale of that token so let's just
572:33 - build out the contractor with those and
572:35 - then create the minting function so that
572:38 - will be that will look like that you're
572:40 - going to pass in the account and the
572:42 - amount and the amount and that is pretty
572:45 - much it we're just gonna get started
572:47 - with the custom decks in a little bit
572:49 - all right let's build the first app or
572:53 - for the custom decks so we're going to
572:55 - be using safe math in here so let's just
572:58 - import that and now we're gonna do a
573:01 - couple of pre-steps or whatever they
573:04 - they are called so we're gonna go ahead
573:05 - and create an array of strings and we're
573:08 - just gonna put in the names of the coins
573:10 - so you can rename those coins however
573:12 - you want to I'm just going to call it
573:14 - coin ABC and now I'm going to create a
573:16 - mappings later on this is going to be
573:18 - useful so what we're going to be doing
573:21 - is we're going to be mapping the actual
573:23 - ERC instances to these coin names
573:26 - themselves so mapping string to erc20
573:29 - and it's going to be public and then
573:31 - we're just gonna name it token instance
573:33 - map these are going to be the conversion
573:35 - values so one custom coin will cost you
573:40 - 0.0001 East and then one coin will cost
573:43 - you one coin so this is just for later
573:46 - for for reference and the dexis
573:48 - Constructor will will be a for Loop so
573:51 - what we're going to be doing is we're
573:53 - going to Loop through the array that
573:55 - contains the names and it's just gonna
573:57 - basically run the coin Constructor
573:59 - itself so basically let's generate a new
574:03 - token for you and then we're going to be
574:05 - minting a bunch of them into the
574:08 - contract address itself so that's what
574:09 - address dot address this means meaning
574:13 - that all the coins that are going to be
574:16 - minted and this step are going to be
574:18 - minted onto the contract itself
574:20 - so nobody's actual wallet it will be
574:23 - minted onto the contract so the contract
574:25 - will own all the tokens and you just
574:28 - want to put in like a big number like a
574:30 - huge number that's because you don't
574:32 - want to run out while you're testing
574:34 - just put in as big of a number as you
574:36 - can think of and then what we want to do
574:38 - is we want to save this token into the
574:42 - token instance map just so we have
574:44 - access to it later and we can access it
574:46 - so once you're done and your contract
574:48 - looks like this you are pretty much good
574:51 - to go okay now for the next step we're
574:54 - gonna be implementing the get balance
574:56 - function so let's just get started with
574:58 - that and that all have two arguments one
575:00 - of them is going to be token name and
575:03 - the other one is going to be underscore
575:05 - address so basically when you call this
575:08 - function you should pass in coin a and
575:11 - then whatever your own wallet address is
575:13 - so this function will return the balance
575:17 - in the given wallet of the given token
575:21 - so this will be a function that will
575:24 - return a number and so the only thing
575:27 - that we will have to implement is
575:29 - returns token instance map passing the
575:31 - token name and then balance off and then
575:34 - the address
575:36 - so if you let's say if you have five
575:38 - coin a tokens then you're passing coin a
575:40 - and your own wallet address it should
575:42 - return five so that is pretty much the
575:45 - get balance function all right let's
575:48 - test all the functionality that we
575:50 - implemented so far so first of all what
575:53 - you want to do is start your remix
575:56 - server on your in your vs code this is
575:59 - just a free ethereum remix extension and
576:03 - what you want to do is if you don't have
576:05 - ganache installed go ahead obviously
576:07 - install ganache and spin it up and then
576:10 - just make sure that the ports are
576:12 - matching so that it connects and once
576:14 - you're done with that you can go ahead
576:15 - hit compile and then hit Deploy on your
576:18 - custom decks.sol file and there you go
576:22 - you will have the the instance right
576:24 - there and there will be an issue which
576:26 - which I forgot because when you import
576:28 - from open Zeppelin you should import
576:31 - from contracts as in plural so just go
576:34 - ahead fix that really deploy the
576:36 - contract and then you should be good now
576:38 - once you're in there you will see all
576:40 - these functions that you can call
576:42 - so let's just go ahead and start
576:44 - checking out if we have all the tokens
576:47 - so the first item is going to be coin a
576:49 - coin B coin c so that works and then now
576:53 - if you want to test out get balance like
576:55 - I said a minute ago you can just pass in
576:58 - coin a and then the address which is in
577:00 - case it's going to be the the contract
577:02 - address itself and you should just get
577:04 - back the initial
577:06 - the initial number of coins that you
577:08 - minted onto the contract so you see
577:11 - those bunch of zeros after a one so that
577:14 - means this functionality is working so
577:17 - with that said let's move on all right
577:19 - now let's make a function that actually
577:21 - Returns the address of the coin so
577:25 - function get token address you will pass
577:28 - in a token name and then it will return
577:30 - an address so what we're going to say is
577:33 - return address token instance map
577:36 - and the token name that's literally all
577:38 - it is now let's go ahead and test it so
577:41 - I'm just going to go ahead redeploy the
577:43 - contract and let's try it out so I'm
577:45 - going to pass in coin a in there and
577:48 - there is your address so that is pretty
577:51 - much this function all right now
577:53 - actually let's start swapping eth to
577:56 - these custom tokens so what you want to
577:58 - do is just create a brand new function
578:00 - and we will be passing in token name
578:03 - because now this is where you're going
578:05 - to pass in coin a b or c or whatever
578:07 - this is going to be a public payable
578:09 - function that will return a number first
578:13 - of all let's create a variable and let's
578:16 - just store however much eth was sent to
578:19 - the contract so input value equals
578:21 - message.value and now what we're going
578:24 - to say is output value so basically the
578:27 - amount of coins that we'll be sending
578:29 - back to the user will be calculating
578:31 - that by saying input value.div and this
578:34 - is coming from the safe math thing so
578:37 - basically we'll divide the input value
578:39 - with the eighth value now e value you
578:43 - can just create another variable
578:44 - somewhere outside of this function and
578:46 - then just give it a value totally total
578:49 - it doesn't matter just make sure it's in
578:50 - weight and then we're going to be
578:52 - multiplying that by 10 to the power of
578:55 - the token instance map like how are the
578:57 - decimals we have with the token instance
579:00 - map token name dot decimals so these are
579:03 - all things that are coming from the a
579:06 - safe map so just feel free to pause the
579:08 - video check out what's what it is doing
579:10 - exactly and then continue from there and
579:13 - next up we're going to need to require
579:15 - that we are able to actually send that
579:18 - money so that we have that we have the
579:22 - funds in the contract to send the send
579:24 - back the output value to the user so
579:27 - that's going to be a requirement and
579:28 - then where it's going to be returning
579:30 - the output value just so the user knows
579:32 - okay this is actually how much you you
579:34 - can go ahead check your wallet now mind
579:37 - you on line 54 I have a typo in the
579:40 - required so just be mindful of that this
579:43 - test will fail but let's go ahead and
579:45 - compile there you go there's the air so
579:47 - hit compile deploy the contract and
579:50 - let's go ahead and test it out so swap
579:52 - beat the token I'm just gonna say coin a
579:55 - and then you have to pass in a value
579:57 - there so I'm just going to say ether
579:59 - point zero zero zero one whatever and I
580:02 - should technically I think be getting
580:04 - one coin a so that should be somewhere
580:07 - there so I'm just gonna paste in my
580:09 - wallet address and there it is that's
580:12 - the amount in way so that's literally
580:14 - one piece all right so with that said
580:17 - now let's go ahead and swap tokens to
580:19 - eth alright so now we're going to be
580:22 - swapping tokens back to eth so let's
580:26 - create that function we're going to be
580:28 - passing a token name and the amount and
580:30 - we're gonna be returning the obviously
580:33 - the amount of heat the user will get
580:35 - we're gonna need to do some some
580:36 - conversions here first so we're going to
580:39 - say a un256 exact amount and we're going
580:43 - to be dividing the amount that we're
580:45 - sending to the user or the user sends us
580:49 - so basically the user sends Us in way
580:51 - and we will have to convert it to eth so
580:55 - we're going to be doing that there and
580:57 - now we're going to be saying is to be
580:59 - transferred exact amount multiply by
581:02 - each value so the user sends us their
581:06 - coin in the value of way we have we
581:10 - convert it up to eth and then we're
581:11 - going to be multiplying that with the
581:13 - conversion rate so after this once this
581:16 - is done we're going to need to make sure
581:18 - that we are able to cover that a
581:21 - transaction so the contract has to have
581:24 - enough eth balance otherwise this
581:27 - transaction cannot go through if that is
581:30 - if that requirement is met we will just
581:33 - go ahead and transfer the eth that we
581:36 - need to transfer so that will happen
581:39 - through this we're going to say token
581:41 - instance map token name transfer
581:44 - transfer from from the map from the
581:46 - message sender basically the user we're
581:48 - going to be sending the amount that they
581:51 - are sending to the contract and we're
581:53 - going to be storing it and after that
581:55 - we're gonna and we're gonna be sending
581:58 - the you after that we're going to be
581:59 - sending the eth back to the user so with
582:02 - that said we're just going to return the
582:04 - value and that is pretty much this
582:06 - function now mind you this this function
582:10 - will need to be confirmed by the user
582:12 - we'll collect that on the front so now
582:15 - with that said there is only one thing
582:16 - left to do and that is to create a token
582:19 - swap function all right so the last
582:22 - thing we need to implement here in the
582:24 - contract is actually the token token
582:28 - swap so let's create the function and
582:31 - we're gonna have to pass in the source
582:32 - token name and the destination token
582:35 - name so basically which token do you
582:37 - want to convert to which token and then
582:39 - obviously the amount now this will be a
582:42 - public function and we will need to make
582:44 - sure that both the source token and the
582:46 - destination token has enough balance in
582:50 - the contract to cover this transaction
582:52 - so once that is done we are pretty much
582:55 - basically good to go and inside the
582:56 - require function we can just get done
583:00 - the e-transfer immediately and obviously
583:03 - this will need to be approved by the
583:06 - user which again will be done on the
583:08 - front end so with that said now let's go
583:10 - ahead and deploy this contract okay so
583:14 - go into your truffle config and then
583:17 - whatever is inside your networks just go
583:19 - ahead get rid of it it's not really
583:21 - necessary and once you're done just go
583:23 - into our truffle and connect to a
583:25 - network now we'll as I said earlier
583:28 - we're going to be using infuro connect
583:30 - to infuria and your sushi swap project
583:33 - that we created at the very beginning of
583:35 - this tutorial should already show up so
583:39 - once that's there you click it you're
583:41 - good to go it pretty much connects your
583:43 - vs code to that Sushi swap project and
583:45 - now if you if you start deploying the
583:48 - product by you can just say right click
583:51 - and then hit deploy you just select the
583:54 - sushi swap girly Network and then you
583:56 - should be good to go it will get get
583:58 - started everything for you now it will
584:01 - take a little bit to deploy but just
584:03 - wait for it and you should be pretty
584:06 - much ready soon and there you go if you
584:09 - see your contract address at the end you
584:12 - are good and the project has been
584:14 - successfully deployed and once you're
584:17 - done deploying we're going to be doing a
584:19 - couple things to get our front end ready
584:21 - for for this project so go into your
584:25 - build slash contracts folder and just
584:28 - copy your custom decks.json file we're
584:31 - going to be using it in a little bit and
584:33 - now go inside your Source folder and
584:36 - just create new folder called utils and
584:38 - then just paste it in there and now
584:40 - we're going to cut go ahead and copy the
584:43 - custom
584:44 - token.json file and paste that there too
584:46 - we're going to be using that in a little
584:48 - bit this is the ABI this is what will
584:51 - help our front end to interact with the
584:53 - contract now once that is done just go
584:56 - ahead create a new file contract.js
584:58 - we're going to be importing ether
585:00 - because in this project we're actually
585:02 - using ethers and now you're going to go
585:05 - ahead import custom decks ABI the file
585:07 - we just copied
585:09 - and the custom token API the other file
585:11 - is just copied so we're just going to
585:13 - import both of those
585:15 - and now we're going to create a couple
585:16 - of helper functions that we will be
585:18 - taking advantage of later on so we will
585:21 - need to create two functions one for the
585:23 - token and one for the decks itself so
585:25 - we're gonna say export cons token
585:27 - contract it will be an async function
585:29 - and we'll create a provider ethers
585:32 - provider web3 provider and then we're
585:34 - just going to pass in with node ethereum
585:35 - don't worry about that part of that
585:37 - stuff if you have metamask installed the
585:39 - ethereum object will be immediately
585:42 - injected into every single website you
585:44 - visit and now we're gonna deconstruct
585:47 - ethereum out of window and we're going
585:49 - to be working with that now you will
585:52 - need to create a signer which is going
585:53 - to be
585:55 - provider.getsigner and the provider
585:57 - again two lines above that's where it
585:58 - comes from we're going to also create a
586:01 - contract reader now this is something
586:03 - that is only possible with ethersgs so
586:06 - we're going to say new ethers.contract
586:08 - we're gonna pass in the address that
586:10 - will be created with the text and then
586:12 - we're gonna pass in custom token API AI
586:15 - because inside your file there is a
586:17 - bunch of things but we need the ABI so
586:20 - that specific part of the object and
586:23 - we're also going to pass in the signer
586:25 - that will help us later on with all the
586:27 - transactions and we're going to go ahead
586:29 - and return the contract reader now we're
586:33 - going to go ahead and repeat this exact
586:35 - same thing for the Dex contract as well
586:39 - so the only difference that's gonna
586:40 - we're gonna have is we're just gonna
586:44 - hard code the contract address so that
586:47 - comes from your output and now we're
586:50 - gonna pass in the custom decks API that
586:52 - API and with designer so with that said
586:56 - we are pretty much good with this part
586:59 - let's move on to the next all right so
587:01 - now we're gonna go ahead and set up two
587:04 - conversion functions so inside utils
587:06 - just create a new file ethers Dash utils
587:09 - JS import ethers and we're going to be
587:12 - creating a two-way and a two eth
587:14 - function these are literally just going
587:16 - to convert as the name says export
587:19 - function to way amount decimals and
587:21 - decimals by default is going to be 18.
587:23 - so you're going to pass in the amount
587:26 - you want to convert to a in ethers and
587:30 - then just use the library so
587:33 - ethers.u.ls.parse units and then it will
587:36 - just do the conversion for you so you
587:37 - don't even have to worry about that and
587:39 - then just return this string version of
587:42 - that number and then this is going to be
587:44 - the exact same thing but the other but
587:46 - in the other direction and instead of
587:48 - Parts units we're going to use the
587:50 - format units method from the ethers
587:54 - Library so that's pretty much that
587:57 - function now let's actually set up the
588:00 - metamask wallet connection as well so
588:02 - I'm just going to spin up the app and
588:04 - let's take a look at it so right now
588:06 - this is how the app looks like and
588:08 - there's your connect wallet button not
588:10 - working so far let's take a look at
588:12 - what's happening so inside of app.js
588:14 - that's all you're Imports and
588:16 - wagmeconfig and everything so as you can
588:19 - see it requires infuria to connect to
588:23 - the blockchain so copy your API key and
588:25 - go back now you want to obviously put it
588:27 - in your EnV file and then that will make
588:30 - rainbow kit work perfectly that's
588:33 - literally the only thing you have to do
588:35 - and now let's just render out the
588:38 - connect wall button and as you can see
588:40 - inside of heather.jsx down at the bottom
588:43 - you can just there's a static connect
588:45 - wallet there so let's just go ahead and
588:48 - replace that with metamask we already
588:51 - pre-built this component for you so you
588:53 - can just use it and that will go ahead
588:56 - and take care of your wallet connection
588:58 - if you and if your wallet address shows
589:01 - up at the top where the button was you
589:03 - are good to go and you can disconnect
589:05 - connect whatever wallets you want to so
589:08 - with that said let's go ahead and
589:10 - implement the conversion functions and
589:13 - we're done let's go ahead and create a
589:16 - new file in the utils folder and this is
589:18 - going to be a queries.js we're going to
589:20 - be importing big number and ethers from
589:22 - ethers and contract and token contract
589:25 - from contracts so this is what we're
589:28 - going to be using by the way to just get
589:30 - the East balance Also let's import to
589:32 - eat from the ether's utils file that we
589:35 - just created so we're going to say
589:36 - export const get balanced this is going
589:38 - to be an async function we're going to
589:40 - pass in the wallet address and the usual
589:43 - trial try catch so if if there's an
589:45 - error let's just console log it and see
589:47 - what's up and then in a try we're going
589:49 - to have a transaction that that's just
589:51 - going to convert the value or whatever
589:53 - amount so we're going to make sure that
589:55 - our wallet is connected meaning the
589:57 - ethers is not undefined after that we're
590:00 - going to go ahead create the provider
590:02 - how we already created multiple times
590:04 - and now we're going to go ahead and get
590:06 - the user's balance so we're going to
590:09 - grab the account so all the accounts
590:11 - that are connected to the app so away
590:14 - provider the list accounts and the
590:17 - user's account is very like the first
590:18 - one that is being connected and that's
590:20 - usually the active one because metamask
590:22 - sorts it like that now next up the
590:25 - balance in way is going to be
590:27 - provider.gap balance and then we're just
590:29 - passing the user address and now we have
590:32 - to convert that into East so we can use
590:35 - either the two eth function that we
590:38 - created or
590:40 - we can just type it out again and then
590:43 - we're going to be going to returning it
590:45 - however if you remember this is going to
590:47 - be a big number so later on we'll have
590:50 - to deal with this so let's go back to
590:52 - our index.js and in there we're going to
590:55 - be handling the balance so this is going
590:57 - to be an async function and this is
590:59 - going to be useful later on but
591:01 - basically
591:02 - when you try to swap you will have to
591:04 - select the source in the destination
591:05 - token and so that's what's going to get
591:07 - passed in here so if that if one of the
591:10 - tokens that the user wants to interact
591:12 - with is eth will have to get the each
591:15 - balance of the user and then display it
591:18 - so I'll show you show it to you in a
591:19 - little bit so if the first drop down is
591:22 - going to be eth we're gonna need to go
591:25 - ahead and get the balance of that and
591:29 - actually to do that let's grab the
591:32 - connected wallet so use account from
591:35 - wagme and then let's just save it so
591:37 - we're just gonna pass it in there and
591:39 - then we're gonna be setting the first
591:42 - balance to that balance and we're gonna
591:45 - convert it to a number and then cut down
591:47 - or I mean like what is it attach to
591:50 - decimals if it's the second drop down
591:53 - that is B that is selected as eth we're
591:56 - gonna get the we're gonna literally just
591:58 - repeat the same exact function but we're
592:01 - going to be saving it in obviously the
592:03 - second balance you state so now what we
592:06 - need to do is pass it into these coin
592:09 - drop downs as you can see we already
592:11 - have it highlighted for you so just find
592:13 - the find those two and then replace the
592:16 - string with the function name itself so
592:19 - just you can remove the apostrophes and
592:21 - then you should be good to go now if you
592:24 - run this app it looks like there is some
592:27 - sort of an error in our contract.js so
592:30 - let's check it out and it looks like
592:32 - that we imported the wrong file so we
592:34 - need to import custom decks.json not
592:37 - custom decks API all right let's see if
592:40 - it works so I just selected Ethan it
592:42 - doesn't seem like it's working if you
592:44 - see the balance is still zero which is
592:48 - not ideal so let's take a look at what's
592:50 - happening and apparently if we hand or
592:53 - apparently when we are selecting
592:55 - anything we are not running the function
592:58 - itself as you can see it's not even like
593:00 - completely white it's like this grayish
593:02 - color which means that vs code is
593:04 - recognizing that we are not calling that
593:07 - function so let's just pass it in there
593:09 - both in the first drop a drop drown and
593:11 - then the second drop down as well so
593:14 - with that said now this should work so
593:17 - if I'm selecting it and there you go it
593:20 - updates so as you can see now it shows
593:23 - up as
593:24 - 4.54 eth over there so that looks good
593:29 - let's move on to the next step okay now
593:32 - let's repeat that same process but for
593:34 - the custom token so inside of queries
593:36 - we're going to have another function
593:38 - that will get the custom token balances
593:40 - because we have to handle those
593:41 - differently so we're going to say get
593:43 - token balance and then we're gonna pass
593:45 - in the token name and the wallet address
593:47 - where we're interested in the balance so
593:50 - we will have the contract object
593:53 - which will be coming from the contract
593:55 - file and then we're going to use the get
593:57 - balance function that we actually wrote
594:00 - in the contract and then passing token
594:03 - name and the wallet address after that
594:05 - we're going to go ahead and return the
594:07 - balance and again this is going to be a
594:10 - big number so let's go back to index.js
594:13 - import get token balance from this
594:15 - function or from this and right down at
594:19 - handle ballot let's just add an if out
594:21 - yeah a new file statement in there let's
594:24 - go into the else statement and another
594:27 - if a statement in there and so if it's
594:30 - the first drop down then we're gonna get
594:32 - it for the first drop down if it's gonna
594:33 - be and set it as the first ballot we're
594:36 - going to be using a different we're
594:38 - going to get the balance using the
594:41 - freshly created function and then
594:43 - because it's coming back in way we'll
594:46 - have to turn it into ethers and then
594:49 - we're going to be set it as the first
594:51 - balance and then we're gonna repeat this
594:54 - same process but for second drop down
594:56 - with second balance now I'm gonna go
594:59 - ahead and cut this out so it's gonna
595:01 - disappear a little bit and then we're
595:03 - gonna may add a try catch function
595:05 - that's that's just good practice to do
595:07 - with blockchain apps so let's test out
595:11 - if it works and it looks like there are
595:14 - some errors that's because the address
595:17 - seems like it's off so that's probably
595:19 - because the user account dot address is
595:22 - how we're gonna get back the address add
595:25 - that there and when we're trying to get
595:27 - it from wag me and now it seems like the
595:30 - ethers package has not been imported so
595:33 - let's do that because that looks like
595:35 - it's going to be useful and as you can
595:38 - see now it works so eth is getting
595:41 - fetched and then we don't have any
595:42 - Bitcoin so it returns zero we don't have
595:45 - any Solana so that returns zero as well
595:48 - that looks like it's working now let's
595:52 - work on the swap functionality and we
595:54 - should be good okay so let's actually
595:57 - swap from east to custom token so let's
596:00 - create the function pass in the
596:02 - destination token name and the amount of
596:05 - eth you will want to convert usual try
596:08 - catch and then we're gonna create the
596:11 - transaction value which is we're going
596:14 - to figure it out by converting the
596:15 - amount from ether to way and then saving
596:19 - it in a object so we're going to create
596:22 - the contract object using the contract
596:24 - function we've already created then
596:26 - we'll get we'll create the data which is
596:28 - going to be await contract objects swap
596:31 - East to token and then pass in token
596:33 - name and the transaction value then that
596:36 - will generate a receipt once we wait for
596:38 - it so let's return that and then this
596:42 - function is essentially done go into
596:45 - back to your index file import this
596:47 - function and now we're going to handle
596:49 - it so handle the whole swap so try catch
596:52 - and and if either of the inputs are
596:56 - empty or if the first input is empty
596:58 - we're just going to return because
596:59 - there's nothing to do then and if the
597:02 - transfer coins from value is eth meaning
597:05 - the first value is eth and the second
597:07 - value is not eth we're going to be run
597:10 - this function so we're going to get the
597:12 - receipt from the freshly created
597:14 - function and then we're gonna say
597:16 - transfer coin to backend value and first
597:21 - input these are the these are the
597:23 - arguments we're going to be passing into
597:25 - the function so the first one is going
597:28 - to send the name the second one is going
597:31 - to send the value and there is the
597:33 - function being called and that when you
597:36 - hit that button alright so that should
597:39 - in theory work so I'm just adding
597:42 - numbers but it doesn't work yet now
597:44 - we're going to implement that it
597:47 - automatically calculates how much you
597:49 - will be getting by sending the X amount
597:51 - of eth all right so we're going to say
597:53 - handle output that will return that
597:56 - value so usual try catch and we're going
597:59 - to make sure that the first input is not
598:01 - empty and then we're going to be if the
598:04 - first one the transfer the destination
598:06 - coin is not eth and like we're going to
598:09 - make sure that it is an East to coin
598:11 - transaction and if so we're going to
598:14 - calculate the output value and that will
598:16 - be the we're going to get the first
598:18 - input converted to weight and make sure
598:20 - that we pass in 14 decimal digits and
598:23 - then convert it to eth and then we're
598:25 - going to convert it to number and add
598:28 - two and no decimal with no decimals and
598:31 - set it as the second input and that
598:33 - should in theory get it all done now
598:37 - we're going to run this same
598:38 - functionality if the values are changed
598:41 - up so if we want to transfer from Custom
598:44 - token to eth otherwise it's literally
598:47 - just the same value so if if it might if
598:50 - it's E3 obviously it's going to be the
598:52 - same value if it's token to token
598:54 - because those their value are equal it's
598:57 - going to be again the same that is good
598:59 - and up there in index we're going to be
599:03 - adding a new use effect that will
599:04 - basically just update the pen the output
599:08 - value every time either we change one of
599:11 - the drop downs or the input input boxes
599:14 - so let's test it out and it looks like
599:16 - that two-way is not defined in index.js
599:20 - so let's go ahead and import it
599:21 - apparently we forgot it and now let's
599:24 - just put in random values let's see if
599:27 - it works and it looks like it's it's
599:29 - looking so if we try to trade it looks
599:32 - like two ways again not being defined so
599:36 - apparently we have to import it into a
599:39 - query is JS as well and now it looks
599:41 - like the conversion from eth to custom
599:44 - token is working perfectly so with that
599:47 - said let's move on to converting back
599:50 - okay so before we are able able to swap
599:54 - back to eth or between tokens we'll need
599:56 - to add something called an allowance and
599:58 - that basically just allows you allows
600:02 - the app to do these sort of transactions
600:04 - so in our queries we're going to need to
600:07 - check for this allowance so we're going
600:09 - to create a function for that and we're
600:10 - going to pass in owner token name and
600:12 - amount usual try catch and then usual
600:15 - contract object get the address of the
600:17 - contract or the token so contract I'll
600:20 - mentioned get token address pass in
600:21 - token name and we're going to create a
600:24 - contract token contract object it's just
600:27 - the usual drill and for the transaction
600:29 - data we're going to be saying that token
600:32 - contract object allowance passing owner
600:34 - and the contract address and we're going
600:37 - to save the allowance and we're going to
600:40 - generate a big number from the data
600:42 - that's being returned we're going to
600:44 - convert that to way and then we're going
600:47 - to check if it's zero or below the the
600:51 - requirement require
600:52 - required amount if yes then we're going
600:56 - to return false otherwise we're going to
600:58 - return true and now we're going to
601:00 - import that has valid allowance function
601:02 - into our index and in our handle swap
601:06 - we're going to create an else statement
601:08 - and we're going to check if we have
601:11 - allowance for for the transaction to go
601:14 - and by passing in the current account
601:17 - and the with as the owner transfer coin
601:20 - from as in the like the token name and
601:22 - then the value if it returns true then
601:25 - we're good and we can go ahead execute
601:27 - the transaction otherwise we're get
601:29 - we're gonna have to just console off no
601:31 - user allowance for now and then in a
601:33 - little bit we're going to increase the
601:35 - allowance so let's see what do we got
601:37 - apparently we wrote that decimal value
601:40 - to the wrong place so let's fix that
601:43 - real quick all right let's see what we
601:45 - got and now it shows that there is no
601:47 - user allowance so that's good because we
601:50 - never increased the allowance so that's
601:51 - how it's supposed to all right now go
601:53 - back to your queries and now we're gonna
601:55 - actually increase the allowance so let's
601:58 - create a function for that and usual try
602:00 - catch pass in token name and the amount
602:03 - and we're going to say contract object
602:05 - in the usual drill import everything
602:07 - create all the objects and instances so
602:10 - we're gonna have the contract object
602:11 - address and then token contract object
602:13 - and then with data we're going to
602:16 - generate the usual stuff so now the
602:19 - transaction data will be generated by
602:24 - calling tokencontract object dot approve
602:27 - pass in the contract address and then
602:30 - the amount in way so now it looks like
602:33 - it's still not running that's because we
602:35 - haven't called it so we will have to
602:37 - import it in our index and where we
602:41 - console like no user allowance we're
602:42 - going to have to call that function that
602:44 - we just created cost receipt equals
602:47 - weight increase allowance pass in the
602:50 - token name and the value and now let's
602:52 - console log what happens and there you
602:55 - go now we have to confirm that we want
602:58 - to increase the allowance and we should
603:00 - be good to moving forward with
603:03 - converting tokens okay so the last two
603:07 - steps are swapping tokens to eth and
603:10 - then token to token they are going to be
603:12 - very similar so we're just going to
603:14 - blast through these and we're going to
603:16 - be done in a matter of minutes okay
603:19 - so in our aquarius.js we're going to be
603:21 - creating two functions the first one is
603:24 - going to be swept token swap token eth
603:27 - async function we're going to pass in
603:29 - which token do we want to and how much
603:32 - of it do we want to usual try catch and
603:35 - then just create all your objects
603:37 - generate the data however the
603:39 - transaction data is going to be using
603:42 - the swap token to eth function from the
603:44 - contract and then pass in required
603:46 - arguments a token name and the amount in
603:49 - way generating the receipt and we're
603:52 - going to return that receipt we're going
603:55 - to import this function in our index.js
603:57 - and if the user has sufficient allowance
604:01 - where we already wrote the if statement
604:03 - we're going to be calling this so let's
604:05 - remove that console log and we're going
604:08 - to be just saying conspiracy then we're
604:10 - going to save that in a variable or a
604:12 - constant and then passing the required
604:15 - arguments the name and the amount and we
604:18 - also want to run in again once we
604:21 - increase the allowance so there are two
604:23 - scenarios one the allowance is already
604:25 - there we just want to run the
604:27 - transaction otherwise we want to
604:29 - increase the allowance and then run the
604:31 - transaction so the user doesn't have to
604:33 - keep click so that looks good let's go
604:36 - ahead test it out there you go I'm
604:38 - increasing the allowance now and now the
604:41 - swap is going through so that looks
604:44 - amazing now let's go ahead and actually
604:48 - implementing the Tony token swap so for
604:51 - that we're gonna have a very similar
604:53 - function in the queries.js usual stuff
604:56 - now the slight difference is that we are
604:58 - going to have a source token and a
605:00 - destination token so we need three
605:02 - arguments instead of two we're going to
605:04 - generate the usual contract object and
605:07 - then this is going to be a swap token
605:09 - the token method that we're going to be
605:11 - calling we're gonna need to pass in both
605:13 - the source destination token and the
605:15 - amount obviously and we will generate
605:18 - the transaction receipt based on that
605:20 - and return that now we're going to be
605:22 - importing that in our index file and so
605:27 - far we only have two types of
605:29 - transactions one is when it is being
605:32 - converted to not eth and everything else
605:35 - but that's not the reality so let's add
605:38 - another if statement in after the so the
605:41 - second type of transaction that we are
605:43 - handling is the not East to eth type of
605:47 - transactions and and now we're we just
605:50 - implemented the token the token so the
605:52 - custom erc20 token to custom erc20 token
605:55 - type of transactions so we're going to
605:58 - be doing the exact same thing so we're
606:00 - going to check for a valid allowance
606:02 - based on the required arguments and then
606:05 - if we have enough allowance then we're
606:08 - going to run the function otherwise
606:09 - we're going to increase the allowance
606:12 - and that is basically the application so
606:16 - once again let's just test it out let's
606:18 - just see if everything works we're going
606:20 - to go from a custom token to another
606:23 - custom token we're going to go through
606:25 - the whole transaction flow so now the
606:28 - token spend is approved and now we're
606:31 - going to just reject it because it
606:33 - showed up as a duplicate so we're going
606:35 - to go ahead confirm it and now the
606:38 - transaction is going through that
606:40 - conversion is working so with that said
606:43 - thank you so much guys for following
606:44 - along this was an amazing build and with
606:47 - that I'll see you in the next one peace
606:49 - in this video we're going to be building
606:52 - the ubereats wet 3 Clone with next.js
606:55 - we're gonna be using infuro to connect
606:57 - it to the ethereum blockchain now we are
606:59 - going to be creating a bunch of nfts
607:01 - that will give you discounts in this app
607:03 - and we will be able to check whether the
607:05 - user has it or doesn't and then
607:07 - calculate the subtotal we're also going
607:10 - to have a bunch of goodies in this app
607:12 - so with that said let's go ahead and get
607:13 - started okay so as usual we're going to
607:16 - be using the clever programmer custom
607:19 - CLI tool that we built for you so just
607:21 - make sure you are on the latest version
607:23 - and let's go ahead and just type in npx
607:26 - lover programmer pop in your email then
607:29 - your name and then we're going to be
607:30 - selecting the solidity Uber Eats option
607:33 - and while that takes a while it'll also
607:36 - open up infuri for you so just make sure
607:39 - you have an account if you don't have
607:40 - one already and create a new
607:43 - new project but in the meanwhile
607:46 - meantime the terminal is apparently done
607:48 - and it opened up vs code so that's nice
607:52 - so let's just check out how the app
607:53 - looks like
607:55 - or don't
607:56 - and let's just go ahead create a new API
607:59 - key on inferior so we're going to be
608:01 - selecting the web3 API that is their
608:03 - combined all the chains that you will
608:06 - ever need a type of API so just name it
608:09 - whatever ubereats but just make sure you
608:12 - don't have space in between them because
608:14 - later on when you try to connect it to
608:16 - your vs code it is better not to have
608:19 - space in the project now it'll take a
608:22 - little bit to load and then this is what
608:24 - you're gonna see if you select endpoints
608:26 - that's all your RPC URLs that you will
608:29 - need all right let's go back to our code
608:32 - vs code and let's actually connect it to
608:35 - our vs code so if you don't have truffle
608:39 - already installed into your vs code now
608:42 - is the time to go ahead and do it it's a
608:43 - free extension it's just where every
608:46 - other extension is and just make sure
608:48 - you disconnect all the networks and then
608:50 - you just reconnect so you're starting
608:52 - this session with a fresh connection
608:55 - so go ahead straight away just connect
608:58 - to your infuria and uberes will pop up
609:00 - immediately and there you go that is
609:03 - everything you will need for this one
609:05 - now straight away let's go into our Uber
609:08 - Eats discount
609:09 - nft.sol file that is created by the CLI
609:13 - tool so let's go ahead and get started
609:16 - with that too let's set out the nft
609:18 - collection so we're going to be using
609:20 - solidity version zero eight zero so just
609:23 - make sure you specify that version
609:25 - and then we're going to be importing a
609:27 - couple of things from open Zeppelin so
609:29 - this is going to be an ERC 1155
609:32 - compliant token so let's import that and
609:35 - also you want to make sure that whenever
609:37 - you're importing in previous builds we
609:39 - already had these issues when you're
609:40 - importing
609:42 - you will import from open Zeppelin
609:44 - contracts not just contract okay and
609:47 - we're gonna be importing ownable
609:49 - because these nfds will have someone who
609:52 - owns them
609:53 - and let's actually create the ubereats
609:57 - discount nft that is an ownable ERC 1155
610:01 - token so it's going to be a child to
610:04 - those now we're going to create a string
610:06 - that's going to be a public string and
610:08 - that will be the token URI and we're
610:12 - also going to go ahead create a
610:13 - Constructor this is actually like
610:15 - standard nft procedures so you need a
610:18 - token URI you're gonna need the
610:20 - Constructor because that's how you
610:22 - whenever you're minting that's what's
610:24 - gonna run Constructor string memory
610:26 - token URI and then it's going to be ERC
610:29 - 1155 and then we're gonna have a mint
610:31 - function passing in the account the
610:34 - amount and this is going to be a payable
610:37 - minting function meaning the user has to
610:41 - pay for these nfts to be minted so we're
610:43 - gonna make sure that the user at least
610:45 - sends 0.01 ether otherwise we're gonna
610:50 - have to reject this minting and we're
610:53 - gonna be maintain the nfts into his or
610:56 - her account
610:58 - and we're also going to be passing in a
611:00 - couple of other attributes alongside
611:02 - with the amount so with that said that
611:05 - is your Uber Eats discount nft let's go
611:08 - ahead and move on to the next step
611:12 - all right so let's actually set up a
611:14 - couple of things for this nft
611:16 - so first off we're going to be going
611:17 - ahead and opening up our Chrome
611:20 - and we're going to be creating a ipfs
611:23 - API key the reason is when you have an
611:25 - nft you will have to sort the image
611:27 - somewhere and that's usually going on
611:30 - ipfs now
611:31 - again just don't leave any spaces in the
611:34 - project name so there you have it and
611:37 - now what we're going to be doing is
611:38 - we're going to be enabling dedicated
611:40 - gateways because that's something
611:41 - inferior can do and it's super cool so
611:44 - just pop in knit your name clever
611:46 - programmer whatever you really want to
611:50 - but what this will enable you to do is
611:53 - that it will create a subdomain under
611:55 - infuro's ipfs and that is going to be
611:58 - your own dedicated Gateway
612:01 - so once you save it
612:03 - you can go back to your vs code
612:06 - and we're going to be opening a terminal
612:10 - but you want to also make sure that you
612:12 - open it under the data folder so by
612:16 - default vs code only opens it under
612:18 - ubereats infuro so basically the project
612:21 - and then you can either CD into so just
612:25 - say CD data or just open it in the data
612:29 - folder directly
612:31 - so in there's this nice little
612:32 - Lamborghini image and the nft Json so
612:35 - the NFD Json is going to contain all
612:39 - your nft metadata and this is what we'll
612:40 - be using later so let's just rename it
612:43 - so it will be Uber's subscription
612:45 - description again a subscription for
612:48 - ubereats whatever you can that doesn't
612:51 - really matter but that's what you're
612:52 - going to show on show up on openc
612:54 - and you can also pop in your uh sub
612:57 - domain so basically what we're going to
612:59 - be doing is inside the terminal we're
613:01 - going to say inferior auth this is going
613:02 - to be creating a variable equals and
613:05 - then just the project ID column API
613:08 - Secret
613:10 - so that's exactly what's happening I
613:13 - will just save it into your terminal
613:14 - session and then you can invoke it later
613:16 - so you don't have to always copy paste
613:18 - these and then we're going to say curlex
613:20 - post so basically an API call to using
613:23 - the inferior auth authentication to this
613:26 - ipfs that impure is providing if you're
613:28 - uh ipf is the same dot impure that IO
613:31 - Colin 501 API v0 add
613:36 - and then we're going to be attaching the
613:38 - file so we're going to say that Lambo
613:41 - nft and the reason why and this is where
613:43 - it becomes important that you are in the
613:45 - correct folder
613:47 - with your terminal otherwise the lambo
613:49 - nft will obviously not be found so what
613:53 - this game is going to do is this will
613:55 - just upload the image to the ipfs now
613:58 - we're gonna have to because ipfs clears
614:01 - itself and if you pin it it won't clear
614:03 - that particular file
614:06 - so now we're going to say it's going to
614:08 - be another a post call but to slash API
614:11 - v0 pin slash add and in the arguments
614:15 - we're going to be popping in the ipfs
614:18 - we're going to say slash ipfs slash and
614:20 - whatever comes back as your hash as a
614:23 - response from the previous request just
614:25 - paste that there and that should be good
614:27 - to go once again this hash goes right
614:31 - here if it wasn't clear and then you
614:34 - will see your pins that is supposed to
614:37 - be the same hash that just came back or
614:40 - that you just pinned so
614:42 - now you can go ahead and put that at the
614:45 - end of the link and you will also want
614:48 - to make sure that you are copying your
614:51 - dedicated Gateway because that's the
614:53 - reason why we have it just paste it
614:56 - there and that will be your URL for the
615:00 - image so nice that works perfectly
615:03 - now we're going to repeat this exact
615:06 - same process but instead of the image
615:09 - we're going to be uploading and then
615:11 - pinning the nft Json file so I'm just
615:14 - going to go through this fast so we're
615:16 - going to say so instead of file limbo
615:18 - and nft we're going to say nft to Json
615:20 - the reason is
615:22 - for now we only uploaded the image but
615:25 - we haven't uploaded the metadata so now
615:27 - we created the metadata file but we have
615:29 - to upload and pin that and that's what's
615:32 - going to be used by the nft okay we
615:35 - uploaded it now let's go ahead and pin
615:37 - that guy okay there seems to be some
615:40 - sort of error
615:41 - oh and that is because there was a typo
615:43 - so if you type ifura instead of infuria
615:47 - that's obviously not going to work
615:50 - okay and now there you go it is working
615:52 - perfectly
615:54 - and
615:56 - now we're gonna create the pins XD file
615:59 - and we're just gonna paste the two we're
616:02 - just gonna paste the metadata
616:04 - location so that whenever we are
616:07 - creating the NFC we'll be pasting this
616:11 - link in there so that should be good to
616:13 - go let's move on to the next part
616:16 - Oak all right so let's now start
616:19 - converting the US dollar values into
616:22 - whey and ether
616:24 - the currency of the blockchain
616:27 - so if you're going to cart.jsx on 944
616:30 - there is a const USD to way function
616:34 - it's going to be super simple super
616:36 - quick basically we're just gonna say
616:38 - const eth equals USD USD to eth and on
616:43 - line 36 as you can see it's already
616:46 - defined what that is so you can just
616:49 - change that it's not the scope of this
616:51 - project to include the live updating so
616:53 - just move on
616:55 - now we're going to be converting it to
616:57 - whey and that's going to be
617:00 - using the ethers Library so we're going
617:02 - to say
617:04 - ethers.utls.parse ether and then just
617:06 - pass in the eth.to string or the eighth
617:10 - value as as a string because otherwise
617:12 - it might be a
617:14 - because otherwise it's a number and then
617:16 - just return way done Network it's going
617:19 - to be even easier to convert USD to eth
617:22 - because we've already done that so just
617:24 - copy that one line and we should be good
617:27 - to go
617:28 - all right so let's actually deploy these
617:31 - nfts or deploy these contracts not an
617:33 - fds obviously
617:35 - so you already have your inferior set up
617:38 - if not you can scroll back and I'm
617:40 - showing you earlier how to set it up but
617:43 - if you're this at this part of the video
617:46 - just smash the like button because
617:47 - you've already seen that
617:49 - now you can hit that deploy button there
617:52 - and that will pop up open the little
617:55 - window that you can see right now and
617:57 - we're going to be using the girly
617:58 - Network so just select that and it will
618:01 - start going ahead and deploying and
618:04 - building our contract hold on a second
618:06 - there is some interesting things
618:07 - happening there
618:09 - so it looks like there is some sort of
618:12 - issues with the import
618:15 - and the reason is we have contracts
618:18 - twice so just remove the second one or
618:20 - first one whichever basically opens
618:22 - apple and slash contract and that should
618:24 - be good in theory
618:26 - all right let's try to run it again
618:29 - looks like it's working wait a second
618:32 - okay now Uber Uber its discount nft has
618:36 - some sort of issues
618:38 - and that looks like that's a typo so
618:41 - instead of this count you want to go
618:43 - with discount with t
618:46 - or let's try again
618:48 - looking good so far
618:50 - okay so looks like we made that same
618:54 - mistake again let's fix that oh yeah two
618:57 - more places line seven and eight
618:59 - hopefully you didn't make these mistakes
619:01 - and you're already deployed but that's
619:03 - all right if you did now is the time for
619:06 - you to debug again
619:08 - interesting
619:10 - oh okay so there's you all right
619:13 - I'll learn to type at some point I'm
619:15 - sorry that's all right
619:16 - so looking good this looks way more
619:18 - promising and
619:21 - there it is I think
619:24 - yes okay yeah execute command finish
619:27 - running command so that means deployment
619:29 - is completed and we are good to move on
619:32 - to the next step
619:34 - all right so now we're gonna go ahead
619:35 - and check whether the user has a
619:38 - discount nft or doesn't
619:40 - so what we're going to do is inside of
619:42 - our cart jsx there is a use effect
619:46 - which is the check which is a which has
619:48 - a check discount function in there so
619:51 - you just want to pop in a try catch and
619:53 - obviously if if it fails then just
619:55 - console log the error
619:57 - and in a try Clause you just want to say
620:00 - provider and it will be new ethers
620:02 - provider and then pass in
620:04 - window.etherium that's the code snippet
620:06 - that uh metamask passes into the browser
620:09 - and injects it in there
620:11 - then we're going to go ahead create the
620:12 - signer
620:13 - which is going to be provider Dot
620:15 - getsigner
620:17 - and we're going to be saving the
620:20 - discount nft address
620:23 - it's going to be Uber discount
620:24 - nft.networks five which is the Gurley
620:27 - Network and then dot address so we're
620:31 - going to be looking there
620:32 - and we're going to have the discount nft
620:35 - contract passing in the discount of the
620:37 - address passing in the ABI and the
620:41 - signer
620:42 - now we're going to say Kong's balance
620:44 - equals await discount nft contract dot
620:48 - balance of and then passing the signer
620:50 - dot get signer
620:52 - signer.get address and xero so we're
620:56 - gonna console log it
620:58 - and they previously declared yeah you
621:01 - state we're gonna we're gonna save the
621:03 - actual balance so set this counted and
621:06 - we're going to be converting whatever we
621:07 - get back to a number and we're gonna say
621:10 - balance.2 string so what's going to
621:13 - happen is we're going to get back the
621:15 - balance we're going to convert it to
621:17 - string
621:19 - because otherwise it's a big number
621:21 - and convert that into an actual number
621:24 - that we can work with and if that is
621:26 - greater than zero
621:28 - and we're going to be saving a true or
621:30 - false clause whether that is greater
621:32 - than or less than zero so that's what's
621:35 - going to be in the set discounted state
621:39 - so with that said let's check it out so
621:42 - we're going to go ahead refresh the app
621:43 - and so there's one item in the cart
621:47 - I'm going to go ahead connect metamask
621:49 - with the lovely rainbow kit
621:52 - and the balance is currently zero
621:54 - meaning that I do not have the NFD so
621:57 - obviously there is zero discount being
621:59 - applied and now let's actually mint the
622:02 - nft
622:03 - all right so let's mint the nfts so
622:07 - moving it into the mint nft function in
622:11 - cart jsx we're going to go ahead create
622:13 - a provider in the try clause
622:16 - the usual drill just fetch the ethers
622:19 - provider using the injected code from
622:23 - metamask then we're going to go ahead
622:25 - create a signer which is going to be
622:27 - provider.getsigner and then create the
622:29 - address structure the address so that
622:32 - basically the girly deployment address
622:35 - of the Uber Eats discount nft and we're
622:38 - gonna be saying we're gonna go ahead
622:40 - create a contract instance so discount
622:43 - nft contract equals new ethers.contract
622:46 - passing the address pass in the ABI and
622:50 - then pass in the signer then we're going
622:52 - to go ahead and generate the transaction
622:54 - which will be discount nft contract so
622:57 - we're going to be using the mint
622:59 - function of the NFC contract passing the
623:02 - user address which we get from rainbow
623:05 - kit by the way then we're gonna be
623:07 - passing in the value so that's how much
623:11 - we're going to be paying for the the nft
623:13 - so that's going to be 0.00 ether and
623:16 - then we're going to passing it as the
623:17 - payload and now we're just waiting so
623:21 - await transaction dot weight function
623:24 - that's an async function take some time
623:26 - blockchain isn't the fastest thing in
623:28 - the world
623:29 - and we're gonna we're gonna console log
623:32 - once the nft is minted so let's take a
623:34 - look at that connecting the wallet and
623:37 - minting and it's actually and there you
623:41 - go there is the balance now mind you
623:43 - that is in way I believe so there you
623:46 - have it the nft now is minted
623:50 - all right now let's actually handle the
623:52 - purchase and once this is done we are
623:54 - actually finished with this app so there
623:57 - is a handle purchase function now inside
624:01 - there usual try catch because we are
624:03 - working with blockchain so in the try
624:05 - clause
624:07 - we're gonna go ahead create the usual
624:09 - provider we've already done this now it
624:12 - comes the address instance or the
624:15 - contract contract instance but this is
624:16 - going to be the ubereats instance on the
624:18 - other one so pass in the address ABI
624:22 - signer yada yada
624:23 - and now we're going to go ahead and
624:26 - calculate the total card value so this
624:28 - is something new that we haven't done
624:30 - before now this is going to be this is
624:33 - going to reduce a function called reduce
624:36 - from the job from JavaScript I'm sure
624:38 - you're familiar with it but basically
624:40 - all it does is it Loops through an array
624:42 - and then just adds everything up or does
624:45 - a certain thing and then we're gonna
624:47 - have two variables that we pass in and
624:49 - basically add those two together and we
624:52 - are going to have
624:53 - a starter value which is going to be
624:56 - zero so basically all that's happening
624:57 - is we have the current value and the
624:59 - previous value and we're just going to
625:02 - add the current value to the previous
625:03 - value and therefore it will be summed up
625:06 - and we always start with zero so that is
625:09 - going to be your total USD value now
625:11 - we're going to be converting in into so
625:15 - that's using the USD to wave function
625:17 - that we've already built earlier and we
625:21 - will now check whether the user has the
625:24 - nft these content ft so we're going to
625:28 - set everything up
625:29 - for that so we're going to create the
625:31 - discount nft instance using the address
625:34 - the ABI and assigner
625:36 - and we're going to check the balance so
625:39 - we're going to pass in the signer
625:40 - signers address and then zero and that
625:43 - will return the balance of that specific
625:46 - nft in the user's bullet so if the user
625:50 - has more than zero then we're going to
625:52 - be applying the discount on the total
625:56 - value or like the total whale total way
625:59 - of value that was hard to say so we're
626:03 - going to say total way and then just get
626:05 - the get 70 and we're going to be
626:07 - multiplying it with 70 and then divided
626:10 - by 100 so that will give us the 70 that
626:13 - we're looking for so the 30 discount and
626:18 - we're going to be setting the set
626:19 - discounted to true and that will update
626:22 - the dollar amount and now we're going to
626:24 - go ahead and create the transaction so
626:28 - wait ubereats contracts dot by cart
626:31 - passing the total weight value that
626:34 - either gets modified or it doesn't so if
626:38 - it does if if it doesn't it is going to
626:41 - be the full value if it does then it's
626:43 - going to be the 70 of that value
626:47 - and the parameters are going to be value
626:51 - total away gas limit a hundred thousand
626:54 - let's just increase it from the usual 30
626:57 - 000 just so we have like extra room it's
627:00 - also it's free so it's whatever
627:02 - and we're going to be setting the gas
627:04 - price to null now
627:07 - we're going to create the receipt and
627:10 - we're going to be waiting for it and if
627:13 - everything goes successfully
627:16 - we will just route back to the initial
627:18 - page of this app so this page
627:21 - technically all right now let's add all
627:24 - these things to our cart and now what
627:27 - we're going to do is as you can see
627:28 - because we've already minted this nft
627:30 - the discount is already applied you
627:33 - don't even have to worry about it and so
627:35 - now we can just say place order and
627:38 - that's the
627:39 - if equivalent of the
627:42 - 4.4.90 so let's go ahead hit place that
627:45 - order and as you can see the loading
627:47 - screen works and it just threw you back
627:49 - straight to the home page so with that
627:51 - said that pretty much wraps up this
627:53 - build thank you so much for watching as
627:55 - always if you have any questions let us
627:57 - know in the comment section down below
627:59 - with that said I'm signing out peace in
628:02 - this video we're going to be building
628:03 - the solidity stock prediction that with
628:06 - next.js we're going to be using infuria
628:09 - to build this app on the ethereum
628:10 - blockchain you're going to be able to
628:12 - make bats on the weather a stock price
628:14 - will be going up or down with that said
628:16 - let's go ahead and get started all right
628:19 - let's get started as usual with the CLI
628:22 - tool so let's just run it email name and
628:26 - this is the solidity prediction dap so
628:30 - while it gets started usually in Fiora
628:32 - sign up if you haven't done it already
628:35 - do that already create an account they
628:37 - are amazing
628:39 - and go ahead create a web 3 API just
628:42 - name it whatever you want to in this
628:44 - tutorial I'm gonna name it prediction
628:46 - dap
628:47 - and so there's your API key we're going
628:49 - to be using that later and then our CLI
628:52 - tool is about to finish so once it does
628:55 - it will open your vs code automatically
628:58 - for you so
629:00 - this is pretty much it this is your
629:02 - contacts file and let's move on to the
629:04 - next step
629:06 - okay so let's go ahead create our
629:08 - contract which is going to be
629:10 - stockprediction.sol
629:12 - and as usual we need our spdx license
629:15 - which is going to be MIT and the
629:17 - solidity version will be 0.8.0 and then
629:21 - let's go ahead start creating our
629:23 - contracts so initially we're just going
629:25 - to create all the states variables and
629:27 - structs that we're going to be using in
629:29 - this project so we're going to have an
629:32 - owner which is going to be address we're
629:34 - going to have a uint which will be the
629:38 - prediction start timer and obviously an
629:40 - end timer
629:42 - and we're going to have a current price
629:44 - and we're going to be using int instead
629:47 - of uint and that's because int can be
629:49 - negative and not just a positive
629:54 - now we're going to create our mapping
629:55 - we're going to be mapping addresses to
629:58 - ins that's going to be the bets
630:01 - and we're gonna we're gonna create an
630:02 - array of addresses and those will be the
630:06 - best and then another mapping when we're
630:08 - going to be mapping addresses to UNS and
630:11 - that will be the BET amount so basically
630:14 - what we're doing here with these
630:15 - beddings is the people who are betting
630:19 - we're gonna be mapping the
630:22 - ID of the bad Tech to these addresses
630:25 - and then the amount how much they betted
630:28 - will be also mapped to these addresses
630:32 - now let's go ahead and create a last
630:35 - check time
630:37 - and a is betting active variables as
630:40 - well the last one is going to be a bull
630:43 - first one is going to be a uint then
630:45 - we're gonna also save the last winner
630:47 - and now we're gonna get on to make the
630:49 - struct so the first one is going to be
630:51 - the BET where we're going to be saving
630:53 - the better better address and the amount
630:56 - so it could be positive and negative as
630:58 - well and then the bad info again the
631:01 - address the amount or the better address
631:06 - the amount that amount
631:09 - and we're also going to create a
631:12 - Constructor
631:13 - so the owner initial is obviously going
631:15 - to be the message sender so whoever
631:17 - deploys the contract and then the
631:20 - prediction and time will be block
631:22 - timestamp block timestamp plus five
631:25 - minutes meaning after the contract is
631:27 - deployed you people have five minutes to
631:30 - bet on the app and then the is batting
631:34 - and then the battery batting by default
631:36 - is going to be false
631:39 - all right so that's it for now let's
631:40 - move on to the next step
631:42 - check
631:44 - okay so now we're gonna fetch all the
631:46 - bets that have current currently been
631:48 - made so we're gonna create a function
631:50 - get all bets it's gonna be a public
631:52 - function that will return a bat info
631:55 - array from the memory
631:57 - so we're gonna create a all back array
632:00 - that will have a bat info struct
632:04 - and now we're gonna go through and loop
632:06 - through all the batteries so oh and
632:09 - we're basically all we're gonna do is
632:11 - we're just gonna save all the attributes
632:13 - into all bats so what we're doing is for
632:17 - better amount and bad amount we're
632:19 - literally just grabbing all the data
632:21 - from every single bet and because we're
632:24 - later gonna be saving them that's how
632:27 - we're gonna be getting them so that
632:29 - being said let's go ahead and test it
632:31 - and
632:32 - the usual drill open up remix
632:36 - in your vs code and now what we're going
632:39 - to be doing is we're going to go ahead
632:41 - and deploy this contract now
632:43 - now let's see what do we have for some
632:47 - reason it didn't deploy oh and that's
632:49 - because there is a
632:51 - typo on line number 10 so after fixing
632:54 - that let's see what we've got and we
632:57 - should get a empty array and that is
633:00 - perfect if you get that you are good to
633:02 - go
633:03 - Okay so
633:05 - now we're gonna make sure that users
633:08 - will be able to get started betting
633:10 - because if you remember by default the
633:12 - is betting active is false so
633:16 - let's go ahead and make a function and
633:19 - call it start prediction and it will
633:21 - have an argument that will be an INT
633:23 - which will be current price
633:26 - let's close that and it will be a public
633:28 - function so
633:30 - it will need to be the owner who starts
633:32 - it because obviously only the owner is
633:34 - supposed to start these bets
633:37 - and we're gonna set the current price to
633:40 - the current price that we pass in
633:44 - after that we're gonna go ahead and set
633:46 - the prediction start time to the block
633:50 - blocks current timestamp and the end
633:52 - time to whatever is five minutes after
633:55 - that
633:56 - so let's set that and after that we're
634:00 - gonna set the is betting active to true
634:03 - now next up we're going to create a
634:05 - function which will be enter bat that
634:07 - will allow the users to make a
634:10 - prediction and so that's what we're
634:12 - going to be passing in it will be a
634:14 - public payable function and will require
634:16 - that the current timestamp
634:19 - of the block is less than the prediction
634:23 - end time meaning
634:24 - the prediction has to be active
634:26 - otherwise we're going to send a error
634:29 - message
634:30 - now we also require that the user sends
634:33 - at least
634:35 - .0001 eth otherwise like it's just such
634:39 - a low amount of money that we don't take
634:40 - those bets seriously so that's better
634:43 - mount
634:44 - and we're going to save that to the
634:46 - message sender in the mapping and we're
634:49 - gonna go ahead and push the better
634:52 - or better's address into the Bettors
634:56 - array and we're also going to save we're
634:59 - also going to map the value
635:01 - to the message sender is addressed so
635:03 - the current batters address
635:06 - and with that said let's move on to the
635:08 - next step
635:09 - all right so now we're gonna make a
635:12 - couple of helper functions that we'll be
635:13 - using later on so
635:15 - that's where we're going to be
635:16 - finalizing the prediction don't worry
635:18 - about that part we'll figure it out so
635:20 - help your functions
635:21 - we're going to have one that resets the
635:24 - last winner and
635:26 - that's all it's going to do so it will
635:28 - be a public function and obviously the
635:30 - owner has to call this function and
635:33 - literally all it's going to do is it's
635:35 - gonna say last minute or equals address
635:37 - zero done
635:39 - all right next up we're gonna have an is
635:41 - prediction over a function that
635:43 - literally just checks whether the
635:45 - current block timestamp is more than the
635:48 - prediction end time meaning have we
635:51 - passed the end of the prediction and
635:54 - we'll return true or false based on
635:56 - whether it's true or not now we're going
635:58 - to also have one that Returns the pull
636:01 - amount which is literally just the
636:03 - balance of this current address
636:06 - and we're gonna have one that helps us
636:08 - find the absolute difference between two
636:11 - numbers so we're going to be passing
636:13 - into ins one of them X and Y and then
636:17 - we're gonna see which one is bigger or
636:19 - yeah bigger than the other or larger
636:20 - than the other and then if x is larger
636:23 - than x minus y if Y is larger then we're
636:27 - going to send back y minus X so
636:32 - that's literally it
636:34 - all right so let's finalize the
636:37 - prediction so we're gonna have a
636:39 - finalist prediction function which will
636:42 - take in the current price now
636:44 - we'll need to make sure that the block
636:46 - timestamp has to have or the
636:50 - when we finalize the prediction the
636:52 - block timestamp has to have already
636:54 - passed the prediction and time otherwise
636:57 - we will have to throw an error
637:00 - and we also want to make sure that the
637:02 - betting is active at this point because
637:04 - only active beddings can be deactivated
637:07 - if you're what I'm saying
637:10 - now we're just going to initialize a
637:12 - couple of values here so just like in a
637:15 - regular sorting algorithm we're gonna
637:17 - create a closest prediction a state
637:19 - which is just gonna be the first bet who
637:22 - cares and then we're gonna go to closest
637:25 - distance and we're gonna calculate it
637:28 - and we're gonna pass in the current
637:29 - price and the closest prediction in
637:32 - there and we're also going to set the
637:34 - winner now this is where the trick comes
637:37 - in because this is where we're going to
637:38 - Loop through all the BET and we're gonna
637:40 - update the these closest prediction
637:43 - closest distance and winner based on
637:47 - whether the current distance or the
637:50 - current bets distance is less than the
637:53 - current closest distance so that's what
637:55 - we are doing here in this for Loop and
637:58 - then we're gonna update the winner as
638:00 - well
638:01 - you want to also make sure that the
638:04 - winner is always payable because you
638:06 - cannot reset it later you can but there
638:09 - are like complications with that which
638:10 - we don't want to go into right now after
638:13 - that we're gonna We want to make sure
638:15 - that the pool is not empty meaning at
638:18 - least there is one bat that has a valid
638:21 - value now after that we'll also make
638:23 - sure that the winner is not just an
638:25 - address zero and if those two are good
638:29 - to go then we're going to transfer the
638:32 - pool's balance and about everything in
638:34 - there to the winner and then we're
638:37 - basically going to update the last
638:38 - winner and then just reset everything so
638:42 - prediction start time prediction end
638:44 - time current price is betting active and
638:47 - everything we just go and reset it and
638:49 - we're gonna do the same thing with
638:51 - batters as well but we have to do it one
638:54 - by one so we gotta Loop through that and
638:56 - once that is done
638:58 - we're just gonna reset
639:00 - the Batters rate as well
639:03 - and that is finalizing the prediction
639:05 - let's move on to the next step
639:07 - all right so now we're gonna go ahead
639:10 - and deploy this contract so
639:13 - let's take a look at what the
639:15 - so let's take a look at what the first
639:17 - step will be so let's go ahead and just
639:20 - connect to our inferior Network and the
639:23 - project should show up if you don't have
639:25 - it just sign into your impura extension
639:27 - and you should be good to go
639:30 - now let's go ahead deploy again with the
639:33 - extension and then just select the girl
639:34 - Network that'll be the easiest and I
639:38 - believe the only one that's still
639:39 - working
639:40 - so let's see what do we got all right so
639:42 - now it says that in line 91 there's a u
639:47 - in instead of a u in so let's fix that
639:49 - should be good try again okay now
639:53 - message value
639:55 - something's not okay there let's check
639:57 - it out let's see what do we got
639:59 - oh we gotta put in The Ether
640:02 - let's try again now the current price is
640:05 - not okay
640:06 - on line 61.
640:09 - it would be a great idea if we if we
640:11 - defined it so let's do that let's try
640:14 - again let's see if it finally works and
640:17 - it looks like there's a weird error
640:19 - going on
640:20 - so we actually took some time to figure
640:22 - it out and basically on infuri you
640:25 - shouldn't really put space in the
640:27 - project name because that could cause
640:29 - errors so let's just remove the space
640:31 - and then we should be good to go
640:34 - disconnect from it reconnect and it
640:36 - should be good and now if you deploy
640:39 - again it will go through and it will be
640:42 - perfect so
640:44 - once you're done there is your contract
640:47 - address and if you see that you're good
640:49 - to go that's it let's move on
640:51 - okay so if we're done
640:54 - deploying we're gonna go ahead and copy
640:57 - that address and then just paste it
640:59 - into our contract.js so that way it is
641:03 - updated
641:04 - and we should be good to go
641:07 - now one more thing what you want to do
641:10 - is go into your build contracts and then
641:12 - just copy the file over into your utils
641:15 - folder that's your API no need to worry
641:18 - about it it just helps you interact with
641:19 - the contract itself
641:21 - okay so let's start fetching those bets
641:24 - so let's just go ahead and spin up our
641:27 - app so this is how it looks like
641:29 - everything works metamask quality
641:31 - connects super nice changing wallets
641:33 - nice okay let's go into our context I
641:36 - have a couple of pre-made functions for
641:38 - you so you can just go ahead and fill
641:40 - those out or fill out the blanks and
641:42 - then you're good to go so inside of
641:45 - fetch bits there is a try catch function
641:48 - I'm gonna start working in there so
641:50 - we're gonna go ahead and pull in the
641:51 - contract using the create contract
641:53 - object function that we already imported
641:56 - for your convenience
641:58 - so there it is super nice it already
642:01 - uses it it already uses the address that
642:04 - you just popped in there so that's cool
642:07 - and now we're gonna do is we're gonna
642:09 - say bets equals weight contract dot get
642:13 - bet so we're already using the contract
642:15 - that we just freshly deployed so that's
642:17 - nice
642:18 - and we're gonna say formatted bats and
642:21 - we're gonna Loop through all the bets
642:24 - and each bet what we're gonna return is
642:27 - we're gonna basically we're just gonna
642:29 - organize them into like objects so we're
642:32 - gonna get the address
642:35 - the amount in a string
642:38 - and we're gonna
642:39 - get the BET amount will have because
642:43 - it's a big number we'll have to format
642:45 - it into string
642:47 - so that we can convert it into eth once
642:50 - we converted it into eth we'll need to
642:53 - convert it to a number so that we can
642:55 - fix it and make sure that it only has
642:57 - two decimals so that's a little nasty
643:01 - just pause the video and then copy
643:03 - and now we're going to update the you
643:06 - state
643:07 - and we're just going to go ahead and
643:08 - console log it so that we can double
643:11 - check that it works and inside our use
643:15 - effect that is getting fired every time
643:17 - is betting active is being changed we're
643:20 - just gonna fetch the bats and that
643:22 - should be good so let's take a look at
643:24 - how it looks like so I'm going to open
643:25 - up my console and there it is there's
643:28 - the array that is empty so that means
643:31 - the uh
643:32 - the fetching works
643:34 - alright so now we're going to go ahead
643:36 - and fetch the owner and the pool so
643:40 - let's go ahead and start filling that
643:42 - out so usually let's create the contract
643:44 - and then the owner will be await
643:46 - contract dot owner and then we're gonna
643:49 - go ahead and just update the use State
643:51 - and then again we're going to run that
643:54 - function every time the is betting
643:56 - active is being updated
643:58 - we also want to go ahead and console
644:00 - login let's go ahead test it out and
644:02 - there is the contract owner address
644:06 - which is because it's my wallet because
644:08 - I just deployed it all right let's move
644:11 - on to the next step which is fetchbook
644:14 - it's going to be very again there's your
644:16 - function just import contract and then
644:19 - who will be contract that gap pool
644:21 - amount and then we're going to convert
644:23 - it to eth and then update the price so
644:26 - let's take a look at how that looks also
644:28 - you want to fire it off in the use
644:30 - effect
644:31 - and there should be your big number
644:34 - there should be your
644:36 - amount so with that said we are pretty
644:40 - much good for this step
644:42 - okay so now we're gonna do a little bit
644:45 - of a complicated stuff so there's this
644:48 - other use effect
644:50 - so basically what here we're going to be
644:52 - doing is we're going to run it every
644:53 - three seconds and we're just gonna check
644:55 - if the betting is over so let's just do
644:58 - that real quick so that's your function
645:01 - to check if the betting is over yet or
645:03 - not and if it is then we're gonna go
645:06 - ahead and grab the is over from the or
645:09 - the is prediction over from the contract
645:12 - and basically we're just gonna go ahead
645:14 - and
645:16 - reset the timer
645:18 - clear the timer and we're gonna go ahead
645:21 - and finalize the bedding stop everything
645:23 - where it's at and grab the latest winner
645:27 - that way we can start sending the money
645:30 - to to the winner so that should be
645:33 - pretty much good to go however if the
645:36 - betting is not over that's the part
645:39 - that's being written right now then
645:41 - we're gonna go ahead and reload this
645:44 - same exact functionality again and come
645:47 - back to it again in three seconds
645:49 - so that is pretty much all it is let's
645:51 - just add a couple of console logs just
645:54 - so we can make sure that everything is
645:57 - Gucci and we can see what's happening so
645:59 - we're gonna add checking status and all
646:01 - that stuff
646:02 - and there it is it shows up that we are
646:05 - checking the status now let's add one
646:07 - more thing
646:08 - which is let's let's just console log
646:10 - the is active so we should see a bunch
646:12 - of falses every three seconds and there
646:14 - it is it shows up and it keeps updating
646:16 - so with that said let's move on
646:19 - okay so now we're gonna go ahead and
646:22 - implement the start prediction
646:25 - so usual grab the contract from the
646:29 - usual place and we're gonna have a
646:31 - another contract interaction so we're
646:34 - gonna call the start prediction function
646:36 - in there so
646:37 - we're gonna turn the coin coin price
646:40 - into way so we're gonna attach basically
646:43 - 18 decimals
646:45 - and set the gas limit to 80 000.
646:49 - now we're gonna go for and go for it and
646:52 - get the receipt so the usual
646:54 - result.weight and console log that just
646:57 - to make sure the Contracting reaction
646:59 - went through and every time we start the
647:03 - prediction we want to go ahead and reset
647:06 - the last winner so we're gonna do that
647:08 - as well
647:09 - so let's go ahead and test it out
647:12 - and if you can see in a little bit I
647:15 - just hit the start betting button and
647:19 - the contract interaction is going
647:20 - through and
647:22 - confirm
647:24 - and now it's pending
647:26 - and it will finish in a little bit so
647:29 - let's see what do we got
647:31 - and there you go the betting betting
647:34 - right now is active
647:36 - and basically I'm not gonna bore you
647:38 - with that but I was sitting around there
647:40 - for five minutes and as you can see at
647:43 - the end the betting is over so that
647:46 - seems to be working as well let's go
647:47 - ahead and now enter the bet
647:50 - okay so let's finalize the prediction
647:52 - right now so what we're gonna do is
647:54 - we're just gonna call the contract
647:56 - function that we've already written
647:59 - so we're going to say finalize betting
648:01 - or finalize prediction and then we're
648:03 - gonna have to pass in the current coin
648:07 - price so that the algorithm can decide
648:10 - who won and who didn't
648:13 - and obviously in a way so we're gonna
648:15 - set the gas limit to 200 000.
648:18 - so that's good
648:21 - and let's see what do we got so if
648:25 - everything is okay
648:27 - the automation or the app should pop
648:30 - open or metamask and as you can see
648:32 - there it is now we're gonna go ahead hit
648:34 - confirm on it and so now it's just going
648:37 - through and the funds will be
648:40 - transferred in a second and we're gonna
648:42 - see in the con in the console how the
648:45 - betting is over
648:47 - and there it is now it says false so
648:50 - that means the betting is over
648:52 - that only means one thing that we have
648:54 - to now fetch the last winner
648:57 - and so we're gonna do that with the
648:59 - usual contract interaction and we're
649:01 - gonna say contract that last winner that
649:04 - will fetch it for us and then we're
649:06 - gonna
649:07 - set it to the U state so we're going to
649:10 - truncate it so that way we don't see
649:13 - like the entire big address we're just
649:15 - seeing like the important part the
649:17 - beginning and the end
649:18 - and we're going to run that function
649:21 - and that should in theory go through so
649:24 - let's go through the whole process again
649:26 - so I'm going to go ahead and start a new
649:29 - bedding
649:31 - hit confirm on it and it will get
649:33 - started in just a little bit
649:36 - now the batting is active so that's good
649:38 - let's make some bats here now let's use
649:41 - a different account and make another bet
649:42 - and let's see what happens
649:45 - so you'd want to make sure that when
649:47 - you're testing it your bet is different
649:49 - from two separate accounts so that's
649:52 - something important to keep in mind and
649:54 - now let's use the admin account again to
649:58 - finish the betting and it will pop open
650:00 - automatically we cut it out but
650:03 - basically we set it out and so there it
650:06 - is the funds will be confirmed if you
650:09 - can see the funds are sent and there it
650:12 - is in the middle the last winner is
650:15 - being updated so that is the app thank
650:18 - you so much for watching I hope you make
650:20 - a lot of views
650:21 - I hope you got a ton of value out of it
650:24 - and with that said I'll see you in the
650:25 - next one peace in this video you're
650:28 - going to be building Airbnb with next.js
650:30 - you're going to be using solidity to
650:32 - build a contract and we're going to be
650:34 - using infuria to build this app on the
650:36 - ethereum blockchain you will be able to
650:38 - list and rent out your property you will
650:41 - also be using rainbow kit to connect
650:43 - your metamask wallet to the app itself
650:46 - so without wasting any more time let's
650:48 - go ahead and get started as usual we're
650:49 - going to be using our clever programmer
650:51 - CLI tool and after you're passing your
650:54 - email then your name you're going to go
650:56 - ahead and just type in solidity Airbnb
650:58 - or something along those lines and it
651:00 - will show up and then it will start
651:02 - installing everything and will also open
651:04 - up infuria so go ahead and just create a
651:08 - new key or sign up with them if you
651:09 - haven't done that already and just name
651:12 - your key Airbnb and then copy that key
651:15 - because we're going to be needing that
651:16 - very soon so at the very top you can see
651:19 - there is API key just go ahead copy it
651:21 - and then let's move on in the meantime
651:24 - our CLI tool will go ahead and open vs
651:27 - code for your convenience and you can
651:30 - just go ahead and get started now inside
651:32 - there you have you see there is a couple
651:34 - of files and that's where we're going to
651:36 - be working before we go ahead and get
651:38 - started just go ahead open up the
651:40 - terminal you can just hit command J and
651:42 - then check out if it runs or if
651:44 - everything is installed correctly just
651:46 - run yarn and then npm installed just for
651:49 - safety and then if everything is ready
651:52 - and good to go you should be able to
651:54 - start this app up by typing in yarn Dev
651:57 - and this is what you will be able to see
652:00 - so if you got to this point good job
652:02 - let's move on to the next step alright
652:04 - so if you so if you've seen that just go
652:06 - back to your vs code and now open up a
652:09 - new terminal or you can just stop
652:10 - running the app and then just type in
652:12 - Truffle in it that will initiate your
652:15 - truffle project which we'll be using
652:17 - throughout this project so now go into
652:19 - your contracts folder and create an
652:21 - Airbnb be a Sol file that's where we
652:23 - will be writing the contract itself and
652:26 - under that in migrations a zero one
652:29 - underscore deploy.js file will help you
652:32 - later in the build and deploy the file
652:35 - the contract itself so let's go ahead
652:37 - and create the instance of the Airbnb
652:40 - artifact and then this deployer function
652:43 - will help you actually deploy this
652:45 - contract so just type in module exports
652:47 - function deployer and then
652:49 - deployer.deploy Airbnb and then you can
652:51 - just forget about this file for the rest
652:53 - of this build because we're not going to
652:55 - be typing here anything else anymore I
652:57 - believe and uh one more setup thing that
653:00 - we need to do is just go into your
653:02 - truffle extension if you haven't
653:04 - installed it already it's available for
653:06 - free in the EVS code Marketplace and
653:09 - then just double check that under
653:10 - infuria service you actually do see
653:13 - Airbnb if you do not this is how you
653:16 - connect just hit connect hit the three
653:19 - dots hit connect to network and then
653:21 - inside and then just select inferior and
653:24 - under that your projects will be listed
653:27 - and then just select Airbnb if you if
653:30 - your projects are not listed you will
653:32 - need to sign in but it's a piece of cake
653:34 - and once you see Airbnb there you are
653:37 - good to go and we can go ahead and get
653:39 - started writing the contract
653:41 - all right let's go ahead and get started
653:43 - with the solidity contracts so
653:47 - first things first we're gonna have to
653:49 - specify the spdx license identifier
653:52 - which is going to be MIT in this case
653:54 - it's an open source project then we're
653:56 - going to be specifying the solidity
653:58 - version which is
654:00 - 0.8.16 if it's if you're on a different
654:03 - version I recommend you switch to 0 8 16
654:06 - otherwise there might be combat
654:08 - compatibility issues
654:10 - next up we're going to start the
654:12 - contract which is going to be an Airbnb
654:14 - obviously and we're going to have a
654:16 - couple of global variables in here the
654:18 - first one is going to be owner which is
654:20 - going to be a public address then we're
654:21 - going to have a counter which is going
654:22 - to be a public number and we're going to
654:25 - have rental IDs which is going to be an
654:27 - array of numbers again public now we're
654:30 - going to set up the Constructor here and
654:32 - the counter is going to start at zero
654:34 - and then the owner will always start at
654:37 - message sender so with that let's move
654:39 - on to property info struct
654:42 - now we're going to be setting that up
654:44 - right here as gonna be a struct as I
654:47 - said and it's gonna be it's gonna have a
654:49 - couple of things so it will have an
654:50 - owner it will have a guest those are
654:52 - going to be addresses and then it will
654:54 - have a name obviously a string a
654:57 - property address which is again going to
655:00 - be a string a description again string
655:03 - and an image URL which we're going to be
655:05 - stored as a string here and we're gonna
655:07 - have a booking starts at which is going
655:10 - to be a number these are going to be
655:13 - dates obviously that are going to be a
655:15 - booking ends at so this is what we're
655:17 - going to be checking later on and we
655:19 - will have a price per day and then of
655:23 - course we're going to have an ID and the
655:25 - bully a Boolean which is going to be
655:28 - checking whether or which is going to be
655:30 - storing whether the property is booked
655:32 - or not
655:34 - now next up let's go ahead and set up an
655:36 - event which is going to be called
655:38 - property listed and it will have a it
655:42 - will have a couple of properties so name
655:44 - property address description and image
655:47 - URL and then we're gonna be also having
655:50 - the price per day ID and there is an
655:53 - error which I'm not okay it's gone so
655:55 - that's good
655:56 - so that was probably a bug
655:58 - and then we're gonna have another event
656:00 - which is going to be property booked
656:03 - event
656:04 - and then we're going to be storing the
656:06 - ID guest number of days price
656:09 - and these properties in it so these two
656:12 - are basically just console logging but
656:14 - on the blockchain
656:15 - so let's move on to mapping the
656:19 - properties now we're going to go ahead
656:21 - and create a mapping and we're going to
656:23 - be mapping numbers to a property info
656:27 - and this is going to be called public
656:29 - properties
656:32 - all right now let's go ahead and build
656:34 - the list property function so first of
656:37 - all we're going to have a couple of
656:38 - things that we're going to be passing in
656:40 - here the name property address
656:42 - description image URL price per day and
656:46 - so these will be the stuff that we will
656:48 - be using to run this function this is
656:50 - going to be a public function by the way
656:51 - and we're going to go ahead and create a
656:53 - new property variable that is going to
656:56 - be local only and we're going to be
656:58 - storing that in the properties array at
657:02 - the counter index it will have a couple
657:05 - of it will obviously have every single
657:07 - and we're gonna go ahead and
657:11 - assign values to each key so we're going
657:13 - to say and then the prop new probability
657:15 - the name equals name and we go through
657:18 - the entire thing description image URL
657:20 - price per day the ID is going to be the
657:22 - the counter we're gonna have the is
657:24 - booked it starts with false and then the
657:27 - booking starts at and the ends at dates
657:31 - will will be initially zero the owner is
657:34 - going to be message sender and then the
657:36 - guest is going to be address zero which
657:38 - is just basically a plain 0x000 address
657:42 - that is just like an address zero and
657:44 - then what we're going to be doing is
657:46 - we're going to be storing the counter so
657:48 - that now that it exists we're going to
657:50 - be storing it in the rental IDs array so
657:52 - we're gonna push it there now this is an
657:55 - optional step but since we created all
657:57 - the events now let's go ahead and emit
658:00 - the property listed event and then pass
658:02 - in all the required arguments
658:05 - sort name property name property address
658:08 - description image URL price per day and
658:10 - counter and then increment the counter
658:12 - okay it says the property listed event
658:15 - is an Undeclared identifier oh that's
658:18 - because I didn't call it or I didn't
658:19 - name it properly initially so let's just
658:21 - let's just fix that and that is pretty
658:24 - much this section
658:27 - all right now let's go ahead and test
658:29 - the our newly written function
658:33 - so we're going to do is if you don't
658:35 - have it already just install the remix
658:37 - IDE extension and then set the compiler
658:40 - version to match the contract version
658:43 - and then just hit run deploy run and
658:46 - deploy and hit activate now that will
658:48 - pop this window open and then try to
658:50 - connect to the blockchain but there is a
658:52 - big chance that it cannot connect to it
658:54 - because we probably don't have ganache
658:56 - running so just open your ganache copy
658:59 - your RPC server port and then you can
659:02 - obviously put in your inferior link as
659:05 - well
659:05 - for development purposes it's easier to
659:07 - just use ganache for now and then when
659:09 - you deploy it you just deploy it using
659:11 - inferior and so you just change the port
659:13 - and once you're good just hit connect
659:16 - and there is your there are all your
659:18 - wallets and everything so now just hit
659:20 - compile on the contract and then you can
659:23 - go ahead and hit deploy as well
659:26 - now we'll flash a little bit and then
659:28 - you will be good to go you can call the
659:31 - counter it should say zero and then you
659:34 - just basically run through all the
659:36 - functions try listing a property with
659:39 - the whatever dummy data you want and
659:41 - then see what's happening now the one
659:43 - thing that I'll say though is if you try
659:45 - to put in the price in the in eth or any
659:50 - kind of like non-hole number like 0.001
659:53 - that's not going to work it can own it
659:56 - can only work with the integer so what
659:59 - you want to do is go to this
660:02 - heathconverter.com website and then
660:04 - whatever price you I imagine in ether
660:06 - just convert it to weight and then put
660:08 - that number in there and that should
660:10 - work and now if you call the properties
660:13 - properties function you should get back
660:16 - all the details and that's pretty much
660:17 - it
660:18 - alright so let's go ahead and build now
660:21 - the book property function so that will
660:25 - have a couple of arguments property ID a
660:27 - start date and they just pass those in
660:29 - so we'll be a public payable function
660:31 - because there is going to be actual
660:32 - transaction that's going to be happening
660:34 - in this function
660:36 - and so what we're going to do initially
660:38 - is we're going to calculate the number
660:39 - of days using this easy nice little
660:42 - formula and so what's going to happen is
660:44 - on the front end we're going to be
660:45 - passing an end date and start date as
660:48 - milliseconds so here we actually have to
660:51 - calculate that and because that's how
660:54 - JavaScript works and then here we just
660:55 - have to turn it into what is it actual
660:57 - days so we're going to be we're let's
661:00 - see how much
661:01 - one day is in milliseconds and that's
661:04 - the number right there that 86 4 and a
661:07 - bunch of zeros pause it here copy it
661:09 - over I'm not gonna say it out because I
661:10 - I can't even count how much that is all
661:12 - right give me a break I'm old
661:15 - so just put it there divided by whatever
661:18 - number comes out and then after that
661:20 - what we're gonna do is now that we have
661:22 - the number of days and we know based on
661:25 - the property ID how much this property
661:27 - costs per day we're gonna make sure that
661:30 - the user is sending you know enough eth
661:32 - so we're going to be using the
661:33 - properties map or the properties mapping
661:36 - to calculate that so we're going to say
661:38 - number of days times the price per day
661:41 - for that specific property
661:43 - and then that has to be less than the
661:47 - message values so basically the the
661:49 - amount of eth that the user is sending
661:52 - if not we're gonna have to reject it
661:54 - with a send more eth or whatever error
661:56 - message and then here we're going to say
661:58 - payable properties property ID owners so
662:01 - basically all the if that is getting
662:02 - sent to the contract will be transferred
662:05 - over to the owner and the entire thing
662:08 - and then we're gonna set the is book is
662:11 - booked element of the property of the
662:14 - specific property to true so that others
662:17 - cannot book for the same period
662:20 - and then we're going to save the start
662:22 - date and the end date and then obviously
662:24 - the guest as well and then we're gonna
662:27 - go ahead and run the property booked
662:28 - event and we're going to emit it
662:31 - and that is basically the function
662:34 - all right so now that we've wrote this
662:36 - function let's actually go ahead and
662:38 - test it so the usual method just open up
662:41 - the remix ID extension and then we're
662:44 - going to go ahead rebuild and redeploy
662:47 - the same contract and so you will see
662:49 - version two right there so you can
662:51 - remove version one and there it is and
662:54 - now what you want to do is because it's
662:56 - a new like you will have to list the new
663:00 - properties just pop in whatever values
663:02 - you want to basically you just want to
663:04 - have one property there just test that
663:07 - it still works everything nothing has
663:09 - broken and now we're going to be testing
663:11 - the booking so you will need two dates
663:14 - in in like millisecond ISO format and so
663:17 - here's our eighth and so I'm just gonna
663:21 - whatever copy that but you can just go
663:23 - to the same website and then use
663:25 - whatever dates you want to just put a
663:27 - start date and put an ending date there
663:29 - and then if you just try to run this
663:32 - function right now you should see an air
663:34 - air so that error is good because we
663:37 - actually haven't sent any to this like
663:39 - right now so for now just whatever value
663:42 - you want to pop in there but you should
663:45 - technically be calculating how much it
663:47 - costs per day and you just put in
663:49 - whatever value that you like make sure
663:51 - that is more than in the initial value
663:54 - or the price that you would need to pay
663:56 - and then just hit call and you should
663:59 - now see your your wallet address at both
664:02 - the owner and the guest properties and
664:05 - you should also see that the 10th
664:07 - argument which is booked that should be
664:10 - true so with that said if you see all
664:12 - those things then you're good to go now
664:14 - let's go ahead and set up the wallet
664:16 - connection for our app so we're going to
664:19 - be using wag me and rainbow kit and all
664:22 - these things with it so let's work for
664:24 - it let's go ahead and import rainbow me
664:26 - Rainbow Dash me slash rainbow kid style
664:29 - CSS and then chains configure chains
664:31 - create client and wag me config from wag
664:34 - me and then get default wallets rainbow
664:37 - kit provider Dark theme obviously you
664:40 - don't have to import Dark theme but it
664:43 - looks better from Rainbow me slash
664:45 - rainbow kit
664:46 - and then the inferior Provider from
664:48 - wagme provider infur and later in the
664:51 - video I'll be fixing that typo but that
664:53 - is actually provide durs with an S at
664:56 - the end
664:57 - so plural and then the same for a Json
664:59 - RPC provider a chains and then okay so
665:03 - let's go ahead and set up chains and the
665:06 - provider so we're going to be using
665:08 - configure chains and then just pop in a
665:11 - array of chain.gurly and chain that
665:13 - localhost so what we're going to be
665:15 - doing here is just see all the different
665:16 - chains that this application will be
665:19 - able to connect to and for each of them
665:22 - there's going to be two providers that
665:24 - we're going to be setting up
665:26 - so we're going to be using infuria to
665:28 - connect girly and then we're going to be
665:30 - using ganache to connect to the local
665:32 - chain so for inferior we need to pass in
665:35 - the inferior API key I hope you still
665:37 - have it copied on your clipboard and
665:39 - then the inferior provider will be
665:42 - traded with the with higher priority so
665:46 - let's grab the API key again if you
665:48 - don't have it so just copy that and then
665:50 - create an EnV file put it in there and
665:53 - then just make sure that the names match
665:55 - up so inferior underscore API key or
665:58 - whatever you want to but you got to make
666:00 - sure they line up between the app.js
666:03 - file and the EnV file
666:05 - otherwise there will be an error and
666:07 - then for Json RPC provider you need to
666:10 - put in obviously priority number two but
666:12 - you can just skip that and then you have
666:14 - to configure the RPC itself because aim
666:18 - viewer comes with the RBC
666:20 - but not with the API key
666:23 - the Json RPC provider is completely
666:25 - custom so for RPC just say chain and
666:29 - then hdp
666:30 - 127001 75 45 basically it's your local
666:34 - host and then just copy the link over
666:36 - from ganache
666:39 - and then we're going to create a
666:40 - connectors from get default wallets and
666:43 - then you just configure it with whatever
666:45 - app name you want to pass in Chains and
666:48 - then create a wagme client
666:50 - and then just make sure the auto connect
666:52 - is true
666:54 - that way the wallet will be connected
666:56 - automatically and then passing the
666:58 - connectors and the provider
667:00 - now you want to go down and wrap the
667:03 - component between the wagme config
667:06 - passing client and wag me client and
667:08 - then wrap rainbow kit provider around
667:11 - the component as well and then that
667:13 - should be pretty much it now
667:16 - here's the fix that I was talking about
667:18 - so just that's the error that's going to
667:21 - cause so just make sure Beam for your
667:23 - provider and the Json rpz provider you
667:25 - fix that and then put in the plural and
667:28 - that should be now good and now if you
667:31 - go over into header
667:34 - you will need you will want to import
667:36 - connect button from rainbow kit and then
667:39 - all the way at the bottom just render
667:43 - out connect button and that should show
667:45 - up right now and it should be working so
667:47 - if you disconnect or whatever your your
667:50 - wallet now you will be able to connect
667:52 - and use the rainbow library to connect
667:56 - your wallet to your app so with that
667:58 - said let's go ahead and move on
668:00 - right so now let's go ahead and using
668:04 - the wagme library we're gonna be
668:07 - we're going to be saving the address of
668:10 - the user who connected their wallet so
668:13 - we're gonna import use account from
668:14 - wagme and then just extract a dress out
668:16 - of it and that will take care of that
668:18 - will take care of literally everything
668:19 - for us and every time that address
668:22 - changes we're gonna want to run a use
668:24 - effect
668:25 - that makes sure that the address
668:27 - actually exists meaning there's a wallet
668:29 - connected to the app and then we're
668:31 - going to be saving that address in our
668:33 - set user address
668:35 - use data and the user at a few State
668:37 - just to make sure it works you can go
668:39 - ahead console log it and then you can
668:41 - run a couple of tests there it is
668:43 - there's my address I'll connect it and
668:45 - then if you change it to a different
668:48 - wallet it should update and show you a
668:50 - different address now next up what you
668:53 - want to do is go ahead create a new
668:55 - folder called utils and inside there we
668:59 - will create a constants.js file so in
669:02 - here we're going to be importing the
669:04 - contract from airbnb.json and don't
669:07 - worry about it we haven't put it in here
669:09 - yet so we're gonna put it in just a
669:11 - second
669:12 - and then we're going to import web3 from
669:14 - the web3 package and now we're going to
669:17 - go ahead and save the save the address
669:20 - of the deployed instance of this
669:22 - application however we haven't deployed
669:24 - it yet so let's go ahead and do that
669:26 - right now just go ahead and right click
669:28 - on your
669:29 - airbnb.sol and click deploy and then now
669:32 - you want to go ahead select the girly
669:33 - because we're on the girly Network and
669:35 - use inferior there's your link so just
669:37 - double check that it's there and now
669:40 - using inferior just go ahead and deploy
669:42 - this contract and in a little bit it
669:45 - should show up your freshly deployed
669:48 - nice little warm and toasty contract
669:52 - address so just pop that over there
669:54 - and now you want to go ahead and Export
669:56 - a create contract function
670:00 - so all that's going to do is it will
670:02 - extract the ethereum object from window
670:06 - and then using that it will create a new
670:09 - contract so we'll say new web3.eath DOT
670:12 - contract and then passing the AI and
670:15 - then the address so now let's actually
670:19 - put in the API in the same folder
670:21 - so inside of build slash contract
670:23 - there's the Airbnb the Json file that's
670:26 - the ABI and so we just want to go ahead
670:27 - copy that and then paste it into utils
670:30 - and there it is now you will be able to
670:33 - import it
670:35 - now there's one thing that was supposed
670:37 - to be there but for some reason it got
670:38 - deleted as a modal Styles will be
670:41 - it's not really a blockchain related
670:44 - stuff but it's just some styles that got
670:46 - deleted so just copy whatever I'm typing
670:49 - there so it'll be modal Styles and then
670:51 - content 300 pixels height and then 400
670:54 - pixels wide margin Auto margin top 150
670:57 - pixels and display flex and then for
670:59 - overlay it'll be a zero zero zero and
671:03 - then 0.7 rgba it's whatever that's fine
671:07 - just copy that and then you should be
671:08 - and now what you're gonna do is go back
671:11 - into your use Airbnb JS file and then
671:13 - import the create contract function that
671:15 - we just created in constance.js and
671:18 - right here in the use effect you want to
671:20 - set the contract and then put the create
671:23 - contract function in there just make
671:25 - sure you put the open and closing
671:27 - brackets there so that it actually runs
671:29 - and so with that said that should be
671:32 - good
671:33 - all right let's go ahead and fetch all
671:36 - the properties none of them are going to
671:37 - show up because we don't have any but
671:39 - let's still do it
671:41 - so we're gonna have a function get
671:43 - property this is going to be an async
671:45 - function because we are handling
671:46 - blockchain stuff and in there we're
671:48 - gonna have a we're gonna have a try
671:51 - catch if it goes on error we're just
671:53 - gonna console log it and I'm gonna have
671:55 - to worry about error handling for now
671:57 - I need to try
671:59 - we're going to have a number of
672:01 - properties which is basically just gonna
672:03 - fetch the counter from the contract so
672:06 - you can go back and check what that does
672:08 - but basically it's just a number
672:10 - that counts how many properties we have
672:13 - and so
672:15 - once that's done we're gonna go ahead
672:18 - and set the properties
672:20 - use state to an empty array you will see
672:22 - under you will see in a little bit why
672:25 - and so what we're going to do is now
672:27 - we're going to Loop through all of the
672:30 - properties but the way we're going to be
672:32 - doing it is we're going to have to fetch
672:34 - individually each and every single
672:35 - apartment so what we're going to do is
672:37 - go from index 0 all the way to a number
672:40 - of props
672:41 - and we're gonna call the contract that
672:43 - methods properties we're gonna basically
672:46 - fetch from the mapping every single
672:49 - property
672:51 - and whatever we get back we're going to
672:53 - need to format it because the blockchain
672:55 - sends back a bunch of random stuff with
672:58 - the useful information so we're going to
673:00 - have ID name we're gonna have
673:03 - description we're gonna have price per
673:05 - day we're gonna have ispoke and we're
673:07 - gonna have address I believe and you
673:11 - will later see it but I here I forgot to
673:15 - import IMG URL so go back copy that from
673:18 - the contract and just paste it here it
673:20 - will save you a little bit of a headache
673:22 - later but I'll show you that anyways and
673:24 - now what you're going to do is append
673:26 - the formatted property to the current
673:30 - Pro current state of the properties you
673:32 - say now what you want to do is create a
673:35 - use effect that runs every time the
673:37 - contract changes and then that use
673:39 - effect will run the get properties
673:41 - function
673:42 - so every time a new contract is loaded
673:45 - up we will be fetching all the
673:48 - properties that are and then go ahead
673:51 - console log it and if you get a empty
673:53 - array good job now let's go ahead and
673:57 - implement the add listing function so we
674:01 - don't just get an empty array
674:03 - so we're going to say cons to add
674:06 - listing equals is it will be an async
674:08 - function and we'll need to pass in name
674:10 - property address description
674:13 - image URL price per day to it and what
674:17 - we're going to do is obviously if the
674:20 - contract is
674:21 - if the contract exists
674:23 - we're going to have a try catch
674:26 - and we will be calling the contracts
674:30 - methods
674:31 - list property function and then pass in
674:33 - everything that we so name property
674:35 - address description image URL and price
674:37 - per day and then we're going to be
674:39 - sending that from the address that is
674:41 - logged in to the app for a guess where
674:44 - you can just pass in like 3 million and
674:46 - then gas limit and all and then just go
674:49 - from there
674:50 - once that once we added a new property
674:52 - you want to refresh refresh the
674:54 - properties so just run get properties
674:56 - function
674:57 - and to be able to use this function
675:00 - outside of this hook you will want to go
675:03 - ahead and Export that or return it so
675:06 - let's see if it works so I'm just gonna
675:08 - click it and something seems off so
675:11 - let's see what's up with down create it
675:12 - seems like it's not defined let's define
675:15 - it so inside of new listing form that JS
675:17 - let's create that function and you want
675:20 - to prevent default so that the page
675:22 - doesn't reload itself
675:24 - and then what we're going to do is we're
675:26 - going to calculate how much the price
675:28 - per day is in weight because if you
675:30 - remember the contract only works with
675:32 - way so we can use the web 3
675:36 - we can use the web 3 library to do that
675:38 - so
675:39 - weapery.2way and then passing price per
675:41 - day and then the original type is ether
675:45 - and so after that you can just run add
675:48 - listing pass in everything that it
675:50 - requires and now with the newly
675:52 - calculated price in way and now that
675:55 - should be good to go so now it should
675:58 - work so let's just test it just some
676:01 - dummy data upload an image
676:03 - perfect and
676:06 - let's go pay for it
676:08 - and as you can see now it was successful
676:11 - I'm gonna refresh and it looks like the
676:14 - address is not defined so let's see
676:16 - what's happening with that listings
676:18 - listing item we need an address oh yeah
676:22 - we gotta import it so let's just do that
676:24 - real quick and then the structure from
676:25 - user BMB okay that looks good and now it
676:28 - looks like the image is not loading for
676:31 - whatever reason and it says the source
676:34 - is missing
676:35 - however the sources clearly there so
676:38 - that can only mean one thing and that
676:41 - means that when we are pulling in from
676:43 - the contract we are not actually
676:45 - destructuring it so we just confirm that
676:48 - with a console log so let's actually do
676:50 - that this is what I was talking about so
676:51 - just put it there fetch the image URL
676:54 - and that should solve the issue now it
676:56 - shows up twice but if you refreshing it
676:57 - will only show up once and the app is
677:00 - good to go now we only have to book the
677:03 - property and we are ready with this app
677:05 - okay so the very last thing now that we
677:09 - need to do is being able to book the
677:12 - property so let's go ahead and go
677:13 - through that and we're done with this
677:15 - build
677:16 - so in use Airbnb we're going to create a
677:19 - new function that'll be that we'll call
677:22 - book property and it will be an async
677:25 - function with the arguments ID start at
677:28 - and end that so first we're going to
677:31 - check if we have a contract and
677:33 - everything's ready to go on the
677:34 - blockchain side and then we're gonna be
677:36 - running a try catch
677:39 - just to keep things safe now we're gonna
677:42 - have to check what the due price is and
677:44 - we're going to be using the contract for
677:46 - it however we haven't made that function
677:49 - on the contract end so let's go ahead
677:52 - and do that right now so let's go in
677:54 - there and in Airbnb Sol we're going to
677:57 - create a new function
677:59 - get due price and we're going to pass in
678:01 - three arguments ID start date and end
678:04 - date it will be public view function
678:06 - that will return a number
678:09 - so first what we're going to do is we'll
678:11 - get the property from the property is
678:13 - mapping using the ID
678:15 - then we're going to calculate how many
678:17 - days it will how many days the guest
678:20 - would like to stay using the same exact
678:23 - function formula that we already used
678:25 - and we're going to be returning the
678:27 - number of days time the price per day so
678:30 - basically the total due price that's all
678:33 - for the function will do and then we're
678:36 - gonna go ahead let's actually we're
678:37 - going to go ahead and redeploy this
678:39 - function the reason is every time you
678:41 - change something on the blockchain I
678:43 - will have to reapply it so that comes
678:46 - with having to update the contract
678:48 - address and the ABI as well so go back
678:51 - into your instance JS in the urals and
678:55 - then just update the contract the
678:57 - address cons
678:59 - and now we're gonna go ahead remove the
679:01 - original Airbnb Json and then replace it
679:04 - with the new Abi so once that all
679:08 - once all that is done we will have the
679:11 - due prize and now what we're going to do
679:12 - is using the book property function in
679:16 - the user BMB a hook we're going to call
679:19 - we're gonna go ahead and book it we pass
679:21 - in all the required data so from user
679:25 - address and then value due price because
679:27 - we now we have it so that way there will
679:29 - be no overpayment underpayment nowhere
679:32 - is there
679:33 - and passing the required gas limits and
679:36 - then once you call once you book the
679:38 - property you want to refresh the page so
679:41 - just run get properties and you should
679:43 - be good to go and uh here are the
679:45 - starting day at start day end date you
679:48 - state and everything that is being run
679:50 - in the in the booking model is just to
679:53 - show that this is how the other side of
679:55 - the app works all right let's go ahead
679:57 - and now test it so we're going to add a
679:59 - new listing just like we did last time
680:01 - so all right let's let's get all of it
680:05 - done as you can see it shows up
680:07 - perfectly and now let's go ahead and
680:08 - book it and let's see what happens so
680:11 - this is a perfect nice little is it
680:13 - perfect it's not a perfect nice little
680:15 - modal so let's just book three days and
680:18 - hit confirm and it looks like book
680:20 - property is not a function and it
680:22 - doesn't exist and that is likely because
680:25 - we haven't exported it from the hook
680:27 - let's go try it again and now it seems
680:30 - like it's going through
680:31 - and contract interaction is as you can
680:35 - see the moment it's done pending
680:38 - and you refresh the page the property
680:41 - will be unavailable so that is it that
680:43 - is the app now go ahead and feel free to
680:46 - build on top of it add new features to
680:48 - it and with that said thank you so much
680:50 - for watching see you in the next one in
680:52 - this video you're going to be building
680:54 - Instagram web 3.0 adapt using infuria on
680:57 - the ethereum blockchain you're going to
680:58 - be able to upload images create posts on
681:01 - the blockchain and verified I'm using
681:02 - etherscan another and other users will
681:04 - be able to come over and retrieve and
681:05 - view those images and kind of on the fan
681:07 - style they will be able to tip you so
681:09 - that's uh let's go ahead and jump
681:11 - straight into the build all right let's
681:12 - go ahead and get started building the
681:15 - Instagram clone so as usual step number
681:18 - one is always going to be using our
681:20 - custom made clever programmer CLI tool
681:23 - well obviously without the quote that
681:25 - would be helpful
681:27 - so pop in your name and email
681:29 - obviously yeah in the other order and
681:32 - then you can just start typing Instagram
681:34 - and it will show up right there and as
681:36 - you can see it literally just opened up
681:39 - infuria
681:40 - go ahead accept that and if you don't
681:44 - have an account yet you can go ahead and
681:46 - sign up right here I'm already logged in
681:48 - so I'm just going to go ahead and click
681:49 - dashboard but once you sign in this is
681:52 - basically the screen that's going to
681:53 - greet you and here you can see I have a
681:57 - couple of projects from before but we're
681:59 - not going to be using that now so you
682:01 - can go ahead in the top right corner go
682:04 - ahead and generate new key you want to
682:07 - select web3 API which
682:10 - says formula ethereum because if you are
682:12 - now is supporting a bunch of random
682:16 - chains so I don't even know how many
682:17 - genes they do support but you will see
682:19 - inside so I'm just going to type in
682:21 - Instagram and then hit create and then
682:25 - yeah these are all the chains they
682:26 - supports inferior is jacked this is the
682:30 - key that you're going to be needing so
682:32 - go ahead and copy that you can just
682:34 - press that and then we'll say copy the
682:36 - endpoint and we'll actually wait a
682:40 - little bit until the CLI tool finishes
682:42 - setting up our project and once we're
682:45 - there we're going to continue now once
682:47 - you see opening vs code and ready and
682:51 - actually it opened up on my other screen
682:53 - but here it is the Instagram clone
682:56 - starter files and everything and you can
683:00 - go ahead and double check that all the
683:02 - node modules are installed so like you
683:04 - should see it here and then you should
683:06 - see it there
683:07 - and that should be basically
683:09 - pretty much enough to go with let's go
683:12 - ahead and spin this application up so
683:14 - what I'm going to do is use the built-in
683:16 - terminal in here and I'm going to use
683:18 - that to CD into without the caps lock
683:21 - see it into my next app and then once
683:25 - I'm in there I can just go ahead and
683:26 - type in yarn Dev
683:28 - and as usual
683:30 - our next application is up and running
683:32 - now I'm going to need a chrome for that
683:34 - let's go ahead and grab that Chrome
683:38 - and I'm going to put it right here
683:41 - little window management there and let's
683:44 - go ahead and just type in localhost
683:46 - anyways here's the Instagram code and
683:49 - this is what we're going to be using to
683:51 - build on top of and with that said let's
683:53 - go ahead and get started building the
683:55 - contract all right now let's go ahead
683:57 - and get started setting up all the
684:00 - ethereum related stuff wait let's just
684:02 - put a contract on the ethereum
684:04 - blockchain and to do that we're going to
684:08 - use truffle so we're just I'm just going
684:10 - to type in Truffle in it oh actually I
684:12 - shouldn't have done that all right cut
684:15 - all of it like the video is starting now
684:17 - actually it's starting now all right
684:20 - let's go ahead and just build this
684:21 - contract and get everything onto the
684:23 - ethereum blockchain so what I'm going to
684:26 - do is just create a brand new folder in
684:28 - here I'm just going to type in truffle
684:30 - app and then using my terminal I'm going
684:33 - to go into truffle app and then just
684:35 - type in trouble in it ah no need for
684:38 - four no one into two no need to force it
684:41 - so that should be taking care of it
684:44 - pretty soon
684:46 - all right back to folder creation
684:48 - so now that I have my new folder wait
684:53 - all right so let's go ahead and add a
684:55 - new folder which I'm just going to call
684:57 - truffle app and using my terminal I'm
685:01 - just gonna go in there and you can go
685:04 - ahead and set up a brand new truffle
685:06 - project that will be very easy to deploy
685:09 - onto the blockchain using truffle so
685:13 - we're gonna type in truffle then it's
685:15 - space period and that should be a pretty
685:19 - fast thing to do now there's a few
685:21 - things that we're going to be doing so
685:23 - step number one go into your migrations
685:26 - folder so don't worry about that file
685:28 - you won't have it and in your migrations
685:30 - folder you want to add a new file that
685:34 - will call 0 1 underscore deploy.js
685:38 - and actually before we set that up one
685:41 - more thing I like to do is just get
685:44 - started with the contract so what you
685:46 - can type in is Shuffle create check and
685:48 - then just say inspect
685:51 - Instagram like that and that'll like
685:54 - basically just create a new solidity
685:55 - file with all the basic stuff I'm going
685:58 - to go ahead and zoom in for you making
686:01 - it nice and big that's what she said so
686:04 - now that there's that's out of the way
686:06 - we can go into our deep deploy file and
686:10 - we'll need to import that same contract
686:13 - that we just created so const Instagram
686:16 - equals and instead of like regular
686:18 - required we're gonna use artifacts
686:20 - require
686:21 - and we're going to go and we're going to
686:24 - go ahead and say module exports and
686:27 - Export the deployer itself we're not
686:30 - going to be using this for a little bit
686:32 - this is just the setup set the contract
686:34 - up to be able to deploy and it's such a
686:36 - quick thing that I figured like I'll do
686:38 - it now and usually I forget it if I do
686:41 - it after I finish the contract so I just
686:43 - wanted to get it out of the way and now
686:46 - let's go we're actually going to start
686:48 - typing solidity code so before we go
686:50 - ahead before we do anything what we're
686:53 - really going to do is update the version
686:56 - of the solidity or update the solidity
686:58 - version we're going to be using and
687:00 - that's going to be
687:01 - 0.8.17 that is currently the latest one
687:05 - at the time of shooting which you can
687:07 - see September 29 9 A.M or like almost 10
687:10 - at this point
687:11 - and we're actually not going to use the
687:14 - Constructor at all however what we're
687:16 - going to have is we're going to have a
687:18 - struct which you should just think about
687:20 - it as like an object we're gonna have
687:22 - image objects that we'll have to
687:24 - predefine and they will have an ID they
687:28 - will have an image URL which we're just
687:31 - going to call URL then obviously they
687:34 - will have a caption and they will have
687:37 - and because this Instagram will actually
687:40 - allow users to tip each other we'll
687:43 - actually store the total tip but tipped
687:47 - amount basically there and then you also
687:50 - want which obviously shouldn't really be
687:52 - a string it should be a un256 so I don't
687:55 - know what I did there but then you want
687:57 - to have an author that's going to be
688:00 - payable because the contract will
688:02 - actually figure out all the tip
688:06 - transferring things so it will act as
688:08 - like stripe sort of thing it's going to
688:10 - be a payment processor as well and so
688:12 - we're just going to call it author and
688:14 - then I like to create an address
688:17 - an array of addresses of all the tippers
688:20 - so Tipper addresses like that and so
688:25 - that will be our image oh yeah that
688:27 - errors went away so that's cool and
688:28 - there's going to be a few more things
688:30 - that we're gonna be setting up so we're
688:32 - gonna have a u-in which will be a public
688:34 - number and that just that's gonna
688:37 - literally take care of the amount this
688:41 - is going to count how many images we
688:43 - have so this is going to be an index and
688:44 - that's the that's what we're going to
688:47 - implement and use it as ID later on
688:51 - dude and so one more thing we're going
688:54 - to be adding is a mapping and that
688:57 - mapping is all it's going to do is we'll
689:00 - be able to fetch individual images using
689:03 - this mapping so we're going to have the
689:05 - ID that we're going to map to an image
689:07 - which would be a public public variable
689:10 - and you should just think about it as
689:12 - like a tuple or some sort so this
689:14 - mapping will look like that and we're
689:16 - gonna have two more more events that
689:19 - we're gonna get started with so event
689:21 - number one is going to be image created
689:23 - that we obviously going to fire off when
689:27 - we create an image so you want to have
689:29 - an ID for that you want to have the URL
689:32 - in there you want to have the caption
689:35 - and caption like that and you want to
689:39 - have the address
689:41 - payable
689:42 - and it's going to be the author so
689:45 - that's basically all it is all it is to
689:48 - it actually you should rate the lines
689:49 - unlike me
689:51 - I'm not entirely sure why is that it
689:54 - thinking that there is some sort of
689:56 - trolling comma there but
689:58 - clearly not a trailing comma
690:01 - that's a trading comma now that's all
690:05 - right whatever we're going to leave it
690:06 - it's going to figure itself out I don't
690:07 - care let me figure it out and then we're
690:09 - gonna have an image tipped variable
690:12 - which will have another uint ID which
690:17 - image was specifically tipped you want
690:20 - to put the URL there so whoever is
690:23 - looking at at etherskin is going to see
690:26 - that okay this is the actual image I'm
690:28 - gonna have the caption you want to have
690:31 - the current tip that was actually
690:33 - awarded to you're going to have the
690:36 - current tip stored which like you can
690:39 - literally see the current person how
690:41 - much the current person have actually
690:42 - donated to that author and then I'm
690:45 - gonna have the total tip and then we can
690:48 - just put the address payable once again
690:53 - like that
690:54 - so break those lines again
690:57 - all right let it figure itself out I
690:59 - don't really know
691:01 - what is happening oh it says okay
691:02 - expected that guy semicolon and yeah
691:06 - that's actually something that I keep
691:07 - messing and I keep forgetting to put
691:09 - semicolons but in solidity you cannot
691:12 - get away with it you have to be
691:13 - organized to get out with the oldest
691:15 - and by the way usually this is the point
691:17 - where I go ahead and get started with
691:19 - the remix ID but we're just gonna we're
691:21 - just going to go through this whole
691:22 - thing fast today this is a little more
691:25 - advanced compared to all the other
691:27 - builds so we're just gonna have them you
691:29 - can just check out our Channel and
691:30 - there's a couple other videos right
691:31 - before this one that was again taught by
691:34 - me and that will give you a full
691:36 - breakdown of every single line that is
691:38 - that we covered just here but basically
691:41 - what you will do if you what you would
691:44 - be able to do if we were to test
691:46 - everything out is just get back
691:48 - completely empty values We're not gonna
691:50 - do that we're going to go ahead actually
691:53 - cut this whole thing out like after the
691:55 - semicolon thing let's just cut this out
691:57 - with there's no reason to all right so
691:59 - before we test this trick out what you
692:02 - want to do is we should just create an
692:03 - upload image function which will be
692:07 - public and we'll have to pass in two
692:10 - things for that string memory and by the
692:13 - way this is just some random solidity
692:15 - thing like you like sometimes you need
692:18 - memory for Strings but sometimes you
692:20 - don't and there's no explanation for
692:22 - that or at least I haven't found any but
692:25 - yeah so usually when we are declaring
692:27 - stuff you don't need to use memory but
692:30 - everywhere else you do but you only need
692:32 - to use it with strength so that's that's
692:34 - some interesting things and so we're
692:36 - gonna pass in two strings from the
692:38 - memory or something one of them is going
692:40 - to be underscore image URL and the other
692:42 - one is going to be underscore action and
692:45 - so this is going to be a public function
692:47 - meaning anyone or any user can actually
692:51 - go ahead and invoke this function or use
692:54 - this function and so we're gonna and so
692:57 - what we're gonna do is we're gonna need
693:00 - to make sure that the person who is
693:03 - trying to do our Instagram app is
693:07 - actually in fact a real user and not
693:09 - just some random got that why is my
693:13 - dude ever since Microsoft is doing
693:16 - anything they just up
693:19 - like why can't I turn my co-pilot off
693:22 - all right disable oh
693:25 - obviously
693:28 - all right so before we actually start a
693:30 - type up the functionality of this before
693:33 - we actually finish up the function we're
693:35 - going to make sure that the person who's
693:37 - trying to the person who's trying to
693:39 - upload an image is in fact a real person
693:42 - because you could come in with a dummy
693:45 - or like a fake wallet and that's not
693:48 - what we want to do so we want to prevent
693:51 - that any kind of like random address
693:53 - would be able to be able to prevent any
693:56 - kind of random address to interact with
693:58 - our contract and if that would have
694:00 - would happen we can just say invalid
694:03 - we'll address so we actually need the
694:07 - user to have a valid ethereum wallet so
694:10 - that's just that's the only thing that
694:12 - this thing is doing here now you want to
694:15 - go ahead and increment image account
694:17 - straight away because if you start with
694:19 - zero that will have a bunch of baked in
694:21 - uh zeros and whatever like starter or
694:25 - like initialized values that we're not
694:27 - want to use and we don't want to have
694:29 - that on our front end so we're gonna
694:32 - start with the index of number one which
694:34 - I know is a little weird because if
694:36 - you're a programmer you start counting
694:37 - from zero and so once we incremented it
694:40 - we want to save that into the mapping
694:42 - that we just created so I'm going to
694:44 - pass we want to say images image count
694:47 - which in turn we have right here so
694:49 - images image count we're going to pass
694:52 - in the ID itself and you want to create
694:56 - an image struct in there
694:58 - and so we're gonna we're gonna we're
695:00 - gonna start mapping all these values
695:03 - so I'm just gonna go ahead copy it down
695:05 - here just so we can see it and put them
695:07 - there
695:08 - so we can map them one by one so you're
695:10 - going to make sure that all these Val
695:13 - so you're going to make sure that all
695:15 - these values actually map to the values
695:17 - that you are storing inside of the
695:20 - mapping so initially you want to store
695:23 - or to start up so the first value is
695:26 - going to be the ID so what's the id it's
695:28 - image count the second value is going to
695:31 - be our URL so that's something that we
695:33 - pass in so we're just going to use that
695:35 - and we're going to have to have the
695:37 - caption and then we're gonna total tip
695:40 - starting out obviously is going to be
695:42 - zero and the address payable author so
695:45 - the basics of the person who is going to
695:48 - be the owner or the author of this post
695:50 - is the message sender the person who is
695:53 - uploading so we're just going to say
695:55 - payable and
695:57 - because we want to make sure that later
695:59 - on we can transfer funds to this account
696:01 - and so we're just passing a massive
696:03 - sender massive sender and then you want
696:06 - to create a new address array that is
696:09 - empty and that's how you do that in
696:11 - solidity for about the comma
696:14 - and as you can see you gotta
696:16 - positionally you're going to correct the
696:19 - you're going to correct the position all
696:21 - of your variables that you keep passing
696:23 - in to make sure they are good with the
696:25 - struct you defined earlier on now forgot
696:29 - the semicolon once again not surprising
696:33 - and then there's one more function that
696:36 - we're going to go ahead and create right
696:38 - now and that's going to be tip image
696:40 - owner and so we're going to pass in a
696:44 - un256 which is just going to be the
696:47 - image ID and it's going to be once again
696:49 - a public however this one is going to be
696:51 - payable meaning that this actually will
696:54 - process payments this will charge users
696:57 - and then transfer money so that's all
696:59 - that's all that little it does so before
697:00 - before you do any kind of like guard
697:03 - guard Clauses or anything we'll have to
697:05 - create a local instance of the of the
697:08 - image we are trying the user is trying
697:10 - to tip so we're going to attach that
697:12 - from the images mapping and then we're
697:15 - going to pass
697:16 - be and that way we're this will contain
697:19 - the low instance of the of that image
697:23 - that is being tipped at the moment now
697:26 - guard Clauses there's a couple of them
697:28 - so we went
697:30 - so you want to make sure that the tip
697:33 - amount oh so you want to make sure that
697:36 - the ID that is being passed in is
697:37 - greater than zero you cannot tip on the
697:40 - zeroth or like first image because that
697:44 - is cut that is that only has dummy data
697:46 - in it that has a null address so that's
697:49 - going to cause errors so you want to
697:50 - make sure it's not the ID is not zero
697:53 - it's greater than zero now you also want
697:55 - to make sure that the ID why did I do a
697:58 - line break but the ID has to be smaller
698:02 - or equal to in the image count actually
698:05 - I shouldn't allow
698:07 - we'll sign there and so this is how our
698:10 - first guard Clause will look like the
698:12 - second one is going to make sure that
698:15 - whoever is tipping is actually tipping
698:17 - more than zero so it's going to be
698:20 - message that value has to be greater
698:23 - than zero so maybe I should write that
698:26 - and then and then you can just put in
698:28 - whatever error message here so a tip
698:31 - must be greater than zero and then let's
698:37 - add another message here too invalid
698:40 - image ID like that put the semicolon out
698:45 - because otherwise the area is not going
698:46 - to go anywhere and then you also want to
698:48 - make sure that the person who is tipping
698:50 - I almost said the person who's tripping
698:53 - huh so the person who's tripping is not
698:57 - the same as the author and so that's why
699:00 - we created the local instance here
699:02 - before we even started the guard plugs
699:04 - so method sender cannot equal to
699:08 - underscore image author
699:11 - all right that's that I think is pretty
699:13 - self-explanatory like it would just burn
699:16 - gas for no apparent reason but maybe
699:18 - someone wants to do that so I don't know
699:20 - not in this app though do you want to
699:22 - put in an error message which is going
699:24 - to be owner cannot tip their own image
699:30 - put that semicolon out call it a day
699:32 - there's your guard Clauses that's
699:35 - basically going to make sure that
699:36 - whatever kind of transaction is going to
699:38 - come through is going to be valid now
699:40 - before you do anything before you do any
699:43 - of the administrative stuff you want to
699:45 - make sure that the owner actually does
699:48 - get the let's get the funds intended to
699:52 - be sent so straight away transfer the
699:55 - message.value and right after that we're
699:57 - going to go ahead and get start
699:58 - documenting this entire situation that
700:01 - was happening so we're gonna need to
700:03 - increase the total tip
700:05 - so it's gonna we're gonna say plus
700:07 - equals mass value and that basically
700:11 - means it's probably means the same as it
700:14 - does in JavaScript it takes the current
700:15 - value adds the new value to it and then
700:18 - saves it back to the original now you
700:20 - also want to make sure that we save
700:22 - everything to the mapping itself to so
700:25 - we'll have to we'll have to save this
700:27 - newly freshly updated total tip uh total
700:31 - tip amount back to our mapping so image
700:35 - ID is going to be the local oops it's
700:39 - going to equal to the local image
700:42 - instance that we just modified now you
700:45 - might be wondering like why we even
700:47 - created these events here let's go ahead
700:49 - and actually emit them right now and
700:51 - we're going to be using that I forgot
700:53 - them to be honest up here so we're gonna
700:55 - do them both but that you can completely
700:58 - skip on them you can like literally
700:59 - remove these it's just like a nice touch
701:01 - to to use these events and basically
701:04 - what it will do do is later on unlike
701:07 - ether skin whatever you'll be able to
701:09 - see
701:10 - more humanly readable version of what
701:13 - actually happened and you don't have to
701:15 - figure out by transaction ID and
701:16 - whatever kind of stuff because that
701:18 - would literally make it impossible this
701:20 - way there are like some sort of data
701:23 - like you think of it actually you know
701:24 - what think of it as a console logging
701:27 - but like for the blockchain and that
701:30 - should pretty much explain itself like
701:31 - why it's important it but once again if
701:34 - you don't want to you don't have to it's
701:36 - just something that that I think is
701:38 - pretty that I think is pretty important
701:42 - So You're Gonna Save the ID will and
701:45 - once again you want to map the not the
701:46 - values that you're passing into whatever
701:49 - you define up there so you need ID you
701:51 - need the URL so I'm just gonna try to
701:53 - position the screen like that so we're
701:55 - gonna say image dot URL and you want to
701:59 - go and say image dot caption USA image
702:04 - total tipped message the value which is
702:09 - going to equal to the current tip so
702:11 - actually that oops actually that should
702:13 - be like in before total dip what just
702:17 - happened there
702:18 - so put messages of value there and then
702:22 - say image dot total tip and then you
702:26 - want to say image author
702:28 - let's just double check we got ID we got
702:31 - URL caption current tip total tip and
702:35 - then the author nice
702:37 - all right cool now you got indentition
702:39 - whatever line breaking everything pretty
702:41 - or clicked in perfect all right next up
702:44 - let's go let's actually emit the other
702:47 - event as well which I forgot oops
702:50 - so that's going to be image created and
702:54 - yeah that basically just went through
702:56 - right through it so we got ID we got URL
702:58 - we got caption and author
703:01 - now that's that's interesting so we're
703:03 - gonna need to update those and I'm just
703:06 - gonna pass in everything that you pass
703:08 - in there that was like an interesting
703:11 - okay and finally let's go ahead and emit
703:14 - image created Which hat which has all
703:17 - these four items and my autocomplete is
703:20 - doing weird stuff so I'm just gonna go
703:22 - oh this is prompting me to jump through
703:25 - them thank you so we got image URL
703:29 - you're gonna pass in the caption which
703:31 - is going to be under score caption and
703:33 - then you want to pass in the pay your
703:36 - bowl
703:37 - message sender that should technically
703:40 - take care of it there's a comma missing
703:42 - there semicolon good
703:44 - and that is basically it that's your
703:47 - contract we're gonna go ahead and test
703:49 - it out test everything out go ahead
703:51 - deploy it and then just finish out the
703:53 - app real fast
703:56 - all right now let's go ahead and test
703:58 - out this contract that we just built and
704:01 - let's go ahead and deploy it as you
704:03 - probably have seen probably a couple
704:05 - other videos we are using remix IDE
704:08 - which is pretty cool because they have
704:11 - this extension for vs code so you want
704:13 - to go ahead download it if you haven't
704:15 - done that already and if you did
704:18 - that's your icon go ahead open it up you
704:21 - want to set the compiler version
704:23 - to 0817 and then activate the tab now
704:28 - let's see what it does
704:30 - and once again if you haven't seen any
704:32 - other tutorials this might be new
704:34 - but we are going to be using ganache for
704:37 - we're going to be using ganache as our
704:40 - local blockchain so basically to get it
704:42 - you can just go to trufflesweet.com
704:45 - download it right here and then you can
704:48 - go ahead install and then basically this
704:51 - is what we will get and if you're new to
704:54 - this just hit quick start when it
704:55 - prompts you and then you're going to be
704:57 - seeing a screen like this
704:59 - I'm just going to go ahead click connect
705:02 - and then moving on let's just straight
705:04 - away compile this contract let's see if
705:06 - there are any errors in there
705:08 - seems like everything is good to go as
705:10 - you can see right here and let's deploy
705:13 - it let's see what could happen oh let me
705:16 - deploy it again cut it and let's deploy
705:18 - it let's see what could have what could
705:19 - go wrong so we got a few things over
705:23 - here we got image count which currently
705:25 - when you hit call it says zero let's see
705:28 - images see what do we got there yeah
705:31 - this is the base data that I was talking
705:34 - about and this is what we're not going
705:36 - to render on the front end but
705:38 - let's go ahead and now add a new image
705:42 - I'm just going to use double data as
705:44 - usual because these are like literal
705:46 - actual strings so wait where is this so
705:50 - here I'm not gonna put in like a real
705:52 - well but you can do it if you want to so
705:55 - I'm just gonna say URL in here and then
705:58 - caption here are actually my image URL
706:04 - image caption and let's go ahead and hit
706:08 - transact let's see what happens
706:10 - all right all kinds of guest lighting
706:12 - that's perfect and let's see what do we
706:15 - got we're gonna go ahead and grab the
706:18 - number one image and as you can see it
706:21 - we are returning everything perfectly
706:23 - there is the URL caption total tip
706:27 - Perfect all right let's go ahead and tip
706:30 - and we're gonna add the value of I don't
706:32 - know let's just put in like some bold
706:34 - numbers like two e 20 e oh and you want
706:38 - to make sure it's set to Ether otherwise
706:40 - it's going to go in the way you also
706:42 - have to change the the wallet you're
706:44 - using
706:45 - so what we're expecting is from this
706:48 - wallet to this wallet 20 uh eth goes or
706:52 - gets transferred basically so I expect
706:55 - this to go down by 20 eighth and I
706:57 - expect this to go up by 28th so I expect
707:00 - this to be at 86 East and this to be 68
707:03 - basically a value change actually that's
707:06 - a little weird so I'm just gonna go with
707:08 - 15. all right so a new one I expect the
707:12 - upper one to go down to 53 and the lower
707:17 - wait no go up
707:20 - go up to 83 and the up the lower one I
707:24 - expected to go down to 73. all right
707:27 - let's see if that goes through or not
707:31 - and let's hit transact
707:33 - and there you go
707:34 - it just went through so yeah that that
707:37 - apparently worked in terms of
707:39 - transaction and if we call on it again
707:44 - then you can see the total tip there's
707:45 - this big old number that starts with a
707:47 - 15. the reason for that is in ethereum
707:51 - land and in solidity as I've said it a
707:53 - couple of times you always have to
707:55 - operate within way or like in ways
707:58 - instead of paying dollars you would have
708:00 - to pay pennies let's invert that
708:03 - way to Ether converter oh there it is
708:08 - and I'll just paste it in and there you
708:11 - go and you can see it's 15 ether that
708:14 - seems pretty promising there's nothing
708:16 - really much to talk about here so I'm
708:18 - just going to go ahead close it that was
708:19 - the testing and now let's go ahead and
708:21 - deploy
708:23 - all right now with all that done
708:25 - there's only the only thing really left
708:27 - is to deploy so
708:30 - once again we're going to be using
708:32 - truffle for that this time and here it
708:35 - is this is your extension you want to go
708:37 - ahead and download and then there is
708:39 - your icon that it's going to produce
708:41 - once it's downloaded yeah let it just
708:44 - set itself up and this is not going to
708:47 - be here for you if it's your first time
708:49 - but you can just go ahead hit connect
708:50 - that work and then hit garage paste in
708:53 - basically this RPC server link so
708:56 - there's that and then for inferior I
708:59 - have a wrong I have the wrong project
709:01 - connected so I'm going to go ahead and
709:03 - select info right there and because I
709:05 - wear the authenticated myself with
709:08 - infuria it already fetched all the
709:10 - projects that I have so I'm just going
709:12 - to go ahead select Instagram however if
709:14 - it's your first time there's probably oh
709:18 - there
709:19 - there's probably a little pop-up window
709:21 - right here hit sign up right there
709:23 - that'll open up infuria and then you're
709:26 - good to go now
709:28 - truffle
709:30 - oh
709:31 - so now what we're going to do next up is
709:34 - we're going to go ahead and right click
709:35 - on Instagram solidity and let's see what
709:39 - the terminal says back to us I'm just
709:42 - going to make it big
709:43 - that's what she said so it says
709:46 - everything is up to date I don't really
709:47 - like that because that usually means
709:49 - that in the build folder there is no
709:51 - there's no API which we definitely do
709:54 - need while it's still here in artifacts
709:56 - it's formatted a little differently so
709:58 - I'm just going to go ahead and see the
710:01 - Trap
710:02 - and then truffle build so that's
710:05 - basically gonna get it done anyways
710:08 - whoops
710:09 - okay so it says pragma solidity is no
710:12 - bueno that's probably because my
710:15 - compiler version is not correct so
710:18 - that's something you want to make sure
710:19 - that is correct
710:21 - let's go ahead hit 17. actually let me
710:24 - just search for it in in here so you
710:28 - want to search for compiler
710:29 - and then using remote version yeah
710:33 - yeah so that basically should take care
710:35 - of it now one more place where it could
710:38 - go wrong is the Truffle config file
710:41 - where oh yeah there you go where the
710:44 - version is 0.8.16
710:47 - so let's fix that and probably the
710:50 - reason for that is
710:51 - um it is best to go live with
710:54 - one version just below the latest one
710:56 - it's good everything is so new and so
710:59 - early we're gonna go with the latest
711:01 - like living carelessly so let's go ahead
711:04 - and say truffle oh was it compile I
711:09 - think so there you go okay
711:12 - what is truffle build okay so as you can
711:14 - see there are two ways to compile as of
711:17 - right now however when you use truffle
711:20 - build this is just a PA so feel free to
711:22 - skip it oh this is just a PSA so feel
711:25 - free to skip it but uh in the sixth like
711:29 - basically version six of truffle truffle
711:32 - build will be deprecated the more you
711:34 - know
711:35 - all right so we got the API now we're
711:39 - gonna go ahead and copy it into utils
711:41 - right there so it's nice
711:44 - so there's your new instagram.json file
711:47 - and right before we actually move
711:49 - anywhere further
711:51 - I just want to go ahead and set up our
711:53 - front end to be able to interact with
711:55 - this
711:57 - skip that cut that and so with that done
712:00 - it is time to go ahead and like finally
712:02 - actually deploy it so if you don't have
712:05 - anything connected if it's your first
712:08 - time and you haven't worked with
712:09 - inferior before
712:11 - oh not and I caught that too so I'm just
712:14 - gonna go ahead click click right click
712:15 - on it or right click on it and then just
712:17 - go ahead and deploy it to my ganache so
712:20 - that's this guy over here let's see what
712:23 - happens there looking good all right
712:25 - finish running and whenever it says the
712:27 - config file has incorrect format like
712:29 - just skip it it's being too sensitive I
712:32 - don't know why that's happening but
712:34 - there is no problem there finish running
712:36 - deploy succeeded this is your contract
712:39 - address you want to go ahead and copy
712:41 - save that and not even in your truffle
712:45 - config you want to go into a constants
712:47 - file and paste it right into address the
712:50 - reason we are using this instead of the
712:51 - one we're going to be deploying to the
712:53 - test net is local is always faster
712:56 - especially in blockchain from like 10
712:59 - times more true but we're not gonna stop
713:02 - right there we are definitely deploying
713:05 - it to a test net as well so right click
713:08 - on Instagram again
713:11 - and just type in Girly
713:13 - and trophy truffle configuration file
713:16 - not found that's not true so sometimes
713:18 - if your truffle app is in a separate
713:20 - folder sometimes this extension
713:23 - sees that as an error or something so in
713:25 - those cases
713:27 - you can just go back into your terminal
713:29 - and then
713:31 - CD into that folder
713:33 - CD into your travel app
713:36 - toilet space period and that'll open up
713:39 - a new vs code inside of that folder so
713:43 - in this case let's just do that no no
713:46 - hard feelings deploy the contract
713:49 - let's see what's going to happen yup
713:51 - there you go there's your value and
713:55 - if it's your first time you're going to
713:57 - want to use the paste mnemonic and then
713:59 - go into your Chrome click metamask where
714:02 - you already have an account that is
714:04 - connected that has girly eth in it so
714:06 - you can find faucets for that on the
714:09 - internet anywhere basically hit settings
714:11 - go into security and privacy and then
714:14 - under your reveal secret recovery phrase
714:17 - you will have those 12 words that you
714:19 - shouldn't share with anyone after you
714:21 - got that
714:22 - oh I didn't mean to do that after you
714:25 - say that that window that I just popped
714:28 - up will will pop up as well once you
714:31 - paste it there and then you can just
714:32 - save this file somewhere so you will
714:34 - have it just like I do so let's do it
714:37 - once again and once you saved it it's
714:40 - going to be showing up right there and
714:42 - once you hit that
714:43 - it's going to go through the whole
714:44 - deployment process again now it'll be
714:48 - loading for a little bit and you will
714:50 - need to install from this notification
714:52 - thing so you just want to click that and
714:55 - then install that dependency and then
714:57 - you should be good to go
714:59 - all right after a quick coffee break we
715:02 - just got our contract address so copy
715:04 - that and then you can literally close
715:06 - this window it's just something unique
715:09 - and then you can paste it right up above
715:12 - here and what I like to do
715:14 - is Type in the exact page the exact same
715:17 - and then just paste it right there and
715:19 - after that you can type in Burly so that
715:22 - you know later on that's your Gurdy
715:25 - deployment and then after this you can
715:27 - just say either local or ganache or
715:29 - whatever you want but basically this
715:32 - will allow you to switch between the two
715:33 - really easily or if you were to deploy
715:36 - it your front end to somewhere you can
715:39 - somewhere that has a local and a online
715:43 - online environment handling you can
715:46 - little you can put these in as
715:48 - environment variables for these separate
715:50 - for now it's good for us we can get 99
715:53 - of everything done just like this
715:57 - and so with that our contract is
715:59 - deployed and it's time to connect our
716:02 - wallets to the application
716:05 - okay let's go ahead and connect that
716:07 - wallet right here now there's a few
716:10 - things that we're going to be importing
716:11 - for that
716:12 - so
716:14 - as follows you need chain configure
716:17 - chains create client and
716:21 - from like which you already have
716:24 - installed so don't worry about that then
716:26 - we're gonna need
716:28 - the Styles or rainbow so import
716:34 - yep and
716:37 - styles.css and then a bunch of things
716:40 - from Rainbow so we're gonna get default
716:43 - wallets
716:45 - there the rainbow kit provider and dark
716:49 - theme and all this is coming from
716:53 - bad thing right there now do more stuff
716:57 - is TeamViewer a provider not that not
717:01 - from there wag me slash
717:04 - provider is Slash and then I'm just
717:07 - gonna duplicate this line and change
717:09 - this to Json RPC
717:12 - this is going to be Json IPC provider
717:15 - like that now a few things that we're
717:19 - going to need to configure we're going
717:20 - to need
717:21 - we're gonna need chains and we're gonna
717:24 - need provider
717:26 - and all this is going to come from after
717:28 - we destructured them from
717:31 - chains and these are going to be two
717:33 - arrays all right so first one chain
717:36 - these are going to be the chains and
717:38 - these are going to be chain dot girly
717:40 - and chain dot foremost just like that
717:46 - and then we're going to need the
717:47 - provider now there's going to be two
717:49 - providers that we already set up so
717:51 - first of all we're going to need to
717:53 - accept the priority to one meaning if
717:56 - you're will be used as our main provider
717:58 - and we're going to provide an API key
718:01 - for it which we I believe I said we're
718:04 - gonna set it up but then we never ended
718:06 - never set it up actually so it's going
718:09 - to be coming from process environment
718:11 - dot if you're uh underscore API see
718:16 - and so the way you do it is by going
718:19 - here and then I think I said you should
718:22 - copy this thing and we're gonna need it
718:24 - so yeah now this is the time where we're
718:26 - gonna need it
718:27 - so in your next step just create a new
718:29 - file and name
718:31 - it.elu.local and then in there if you're
718:34 - on the score API
718:37 - and that's where the value of it is
718:39 - gonna go you will have to restart your
718:42 - server
718:43 - let's do that real quick and now that
718:46 - way it's all loaded in and all ready to
718:49 - go
718:50 - now option two
718:52 - because local isn't really provided by
718:54 - infuria it's uh
718:57 - we're gonna have to custom ADD the new
719:00 - RPC server so before we do that priority
719:04 - two and then we're gonna have our PC
719:07 - and we're going to Define chain that
719:11 - uses the RPC
719:13 - and there we go now
719:16 - for this we probably already went
719:18 - through it once but here it is you
719:21 - wouldn't need that link so copy that guy
719:25 - it there and that should be good to go
719:28 - so why are we putting it twice
719:32 - oh it needs to be lowercase so like that
719:35 - all right since that should technically
719:39 - take care of a lot of things here
719:41 - all right and we're gonna see it in
719:43 - action in just a second just first
719:46 - create the connectors these this is like
719:49 - a bunch of boilerplate code that it just
719:52 - makes it super easy to work for the
719:54 - rainbow and later on you're gonna
719:56 - understand
719:58 - and it's gonna say and we're just gonna
720:01 - pass in all the chains so this here we
720:05 - created the chains themselves and then
720:08 - here we're going to pass it in and these
720:09 - are this is what makes these the chain
720:12 - selector this is going to config this is
720:15 - going to create the chain selector so
720:17 - that's what that's what's happening
720:19 - there
720:21 - and then we're doing one more thing just
720:23 - gonna be whacking fig and you guessed it
720:27 - it's not coming home let me config it's
720:30 - gonna be create client and I'm gonna
720:33 - enable auto connect so that any user
720:36 - come coming in don't have to keep
720:38 - connecting their wallets all the time
720:40 - and then you want to pass in your
720:42 - connectors and you're going to pass in
720:44 - the provider you created now a few
720:47 - things that we're gonna need to do now
720:50 - we're going to have to wrap the entire
720:52 - app with this so that the entire
720:55 - metamask energy is just flowing through
720:57 - our app so black May config and then
721:03 - you're going to say client and that's
721:05 - going to be the Dragnet config that we
721:07 - just created like that without typos
721:10 - paste it and then wrap it around the app
721:12 - and then next up you're going to have a
721:15 - rainbow kit provider
721:17 - which we will need the chains
721:21 - so how's that mean and then a theme
721:25 - which will be dark theme make that a
721:28 - function and then you can enable cool
721:31 - mode it's just a nice little animation
721:33 - that I really love how I usually
721:36 - so that's basically it in terms of let's
721:39 - see what do we got change dot map is not
721:41 - a function
721:42 - all because you have to pass in all of
721:45 - them so like I was passing in this guy
721:47 - but in reality you gotta pass in this
721:49 - guy with a plural that should have
721:51 - solved it let's just double check
721:53 - refresh okay we're good to go there and
721:56 - now if you go into your header and like
721:59 - somewhere here or even Port connect
722:03 - button and then place that button
722:06 - connection button or and then place that
722:09 - place that button connection right after
722:11 - this AI Outline Three like that that
722:14 - should give you that exact account that
722:17 - exact button and because my metamask is
722:19 - already connected and auto connect is
722:22 - enabled that's what's showing up but
722:24 - there you go that's what you will see
722:26 - probably if you haven't connected it to
722:28 - this application yet there you go
722:31 - there's metal and then I'm gonna hit
722:34 - connect
722:35 - once again and that's it that's
722:39 - basically it and then here are all the
722:41 - chains and these are the wrong chains so
722:44 - that's weird
722:45 - that honestly is probably because this
722:47 - inferior API key doesn't resolve itself
722:50 - so let's try again one more time and if
722:55 - I refresh
722:56 - okay it's still not working
722:58 - oh once again I passed in the wrong
723:01 - chain here yeah it's pretty easy to mess
723:04 - up so just want to make sure like you
723:06 - use chain in a singular when you import
723:09 - it and then when you generate create the
723:11 - array of chains but then from them that
723:14 - point on you will want to use it as a
723:18 - plural so from that you will need those
723:22 - and so you will have to pass in with the
723:25 - raw and there you go now it's fixed and
723:27 - it's dark mode and you saw the cool mode
723:29 - how like the little sprinkle animation
723:31 - so that's it for connecting the wallet
723:34 - and now it's time for the functionality
723:40 - all right now with that all done it is
723:43 - time we go ahead and set up our contacts
723:45 - that will literally take care of all
723:47 - kinds of
723:48 - blockchain connection I'm gonna close
723:50 - all these random folders and I'm just
723:53 - gonna go ahead and create a context
723:55 - folder in which I'm gonna have a contest
723:59 - then JS file now this is where all the
724:03 - magic is gonna happen and so let's go
724:05 - ahead and import create context
724:08 - use context
724:10 - try to make no typos in there use State
724:14 - and use effect
724:17 - weird Auto conversion all right all this
724:20 - is coming from react
724:22 - and then we're gonna need to import
724:24 - create contract
724:26 - which
724:27 - is not exactly tied to the context
724:30 - itself but we're going to be using this
724:32 - later and I'll just forget to import it
724:34 - so we're just going to do it now
724:36 - it's just easier for everybody trust me
724:38 - and then we're on the same note we're
724:41 - going to import use account from Acme
724:44 - and then we're going to import Trump
724:47 - Kate Heath address
724:50 - from
724:51 - truncate that Dash address and I also
724:54 - want to import post because it's a
724:57 - toasty app
724:58 - yeah from react
725:01 - postify just like that and then you also
725:04 - want to import grab three from dot three
725:08 - all right well this is nice and cool but
725:11 - let's actually create the context once
725:14 - finally so we're going to create an app
725:16 - context
725:17 - using the create context thing that we
725:20 - just imported and then
725:24 - provider which will take in children and
725:28 - now there's going to be no children sex
725:31 - trafficking or any of that stuff
725:33 - chill
725:34 - now we're gonna have a return clause in
725:36 - the return clause in there just like
725:40 - that open close friends app and app
725:44 - context dot provider value put two
725:49 - objects there because one of them is
725:50 - going to indicate that this is
725:51 - Javascript and the other one is going to
725:53 - indicate that this is actually factually
725:56 - in fact a object and then in between
725:59 - there goes the children
726:01 - with an N at the end all right and then
726:05 - we're going to make a hook out of it
726:07 - because that's useful so we're gonna say
726:10 - use up context contact like don't open
726:15 - close create that okay that function and
726:18 - we're going to return these contacts and
726:21 - pass in off contacts what so you might
726:25 - be asking what is all this stuff that's
726:27 - going on here just chill basically
726:29 - what's happening is we this is a bunch
726:32 - of boilerplate code that you will need
726:34 - to run your contacts and to have like
726:36 - Global globally available functions and
726:39 - variables and all that kind of stuff and
726:41 - yeah that comes with all this stuff so
726:43 - once again you're going to need a you're
726:46 - gonna need this bad boy hook to make it
726:49 - easier later on to interact with it now
726:53 - what I also like to do is just create a
726:55 - test test variable that literally only
726:58 - does it says test and then export it
727:01 - right away here now the reason we're
727:04 - going to do that is we're going to test
727:06 - this mess this guy out so
727:09 - let's import that app provider right
727:12 - there and then we're going to wrap it
727:15 - around the app itself so
727:17 - look right there it's perfect and then
727:20 - going through index file and here you
727:23 - can go ahead import use up context so
727:27 - the hook that we created
727:29 - and then you want to go ahead and
727:31 - destructure tests from use up context
727:35 - just to double check that the context
727:37 - setup and all that is working perfectly
727:41 - so go into your inspector and then onto
727:44 - your console and you should see test
727:47 - pretty soon oh wait it would be helpful
727:49 - if I actually console log it out without
727:52 - that you're not going to see it all
727:54 - right there you go now you can see it's
727:56 - working perfectly and that is basically
727:59 - all the contacts that you will need to
728:00 - set up for this build and I'm just going
728:03 - to go ahead and remove all the all the
728:05 - testing stuff and with that said
728:09 - let's upload some images
728:11 - right so for the rest of the app we are
728:14 - mainly going to stay in the context file
728:17 - so let's actually just jump straight
728:20 - into it get started with a couple of
728:22 - view States and then we're just going to
728:25 - go out eventually to other files to
728:29 - import everything that we create here so
728:32 - we're going to have a use state that is
728:35 - going to start out as an empty
728:38 - empty array oops
728:41 - and then another one that is going to be
728:44 - our user address and that's going to be
728:48 - helpful to just so we're going to have
728:51 - one central place where we're going to
728:53 - take store our user wallet address of
728:57 - the person that actually signed up or
729:00 - signed in to our app and you want to fix
729:04 - all the typos because that's not helpful
729:06 - if you have them
729:07 - so before we go any further further
729:09 - let's actually literally store the user
729:12 - address so
729:13 - for that we're going to use a use effect
729:15 - hook so it gets updated every single
729:17 - time the user is changing in fact their
729:21 - wallet that is being connected so you
729:24 - wanna you wanna destructure address from
729:26 - use account
729:28 - like that and then set up a use effect
729:31 - hook that is clinged onto that specific
729:33 - variable and then whenever that changes
729:37 - and whenever that changes you want to
729:39 - set the user address to truncate ether
729:43 - and pass an address
729:45 - so what that's going to look like this
729:46 - truncating thingy is just going to make
729:49 - it shorter because if you remember and
729:50 - you're going through a constants file
729:52 - this is how one ether address looks like
729:54 - now
729:55 - it's fine but in our app it's going to
729:58 - look something like oops something like
730:01 - this so it's like more humanly readable
730:04 - and you're like let's be real you're
730:07 - never ever going to read this whole
730:08 - thing I haven't had it so let's just
730:11 - let's just actually get rid of that
730:14 - useless stuff so now that we stored the
730:17 - wallet address let's go ahead and import
730:19 - it and then comma let's export post as
730:21 - well then you export user address I just
730:24 - said import because I don't know and
730:26 - right in here write it back in your
730:29 - index CS file you want to destruction
730:32 - posts instead of and straight away let's
730:36 - go into our index.js file where I
730:38 - already set up this empty array but
730:41 - that's only for the like template that
730:43 - you're working on so let's actually
730:45 - change that out and so we're gonna
730:48 - change that out for is
730:50 - it's just destructuring posts from
730:54 - the use of context like that and so that
730:58 - way it is hooked up to hooked up to it
731:00 - and now you're like now this application
731:02 - is going to be working perfectly
731:05 - however apparently we got this error so
731:07 - let's take a look at what's going on
731:09 - that is oh
731:11 - because I should have made it plural so
731:14 - posts and
731:16 - like that
731:18 - see there you go that fixed it so that
731:21 - seems good and then whenever we and then
731:23 - as soon as we start uploading posts it's
731:25 - going to start fetching them or like
731:27 - whenever we Implement that function but
731:30 - it's going to be taken care of pretty
731:32 - fast so the app is by Design dynamic and
731:36 - so before we actually start uploading
731:38 - images there's going to be one more
731:40 - thing that I want to set up and that is
731:43 - all the functions so we're going to have
731:45 - a get all images and this is going to be
731:48 - useful just so we map out we're going to
731:51 - be working with and so we're gonna have
731:54 - an upload image
731:57 - [Music]
732:01 - and then we're going to have one more
732:04 - which is going to be tipping the owner
732:06 - so tip owner is in sync you can close
732:10 - and then there's your function all right
732:13 - so each of these are going to be
732:14 - separate section in this video and we're
732:16 - gonna go ahead and finally focus on this
732:19 - guy now to make the application
732:21 - completely dynamic
732:23 - right after everything is done in the
732:25 - uploading right after the app itself is
732:28 - done uploading what you want to do is
732:30 - call immediately the get all images
732:33 - function so that's what we're going to
732:35 - get started we're going bottom to top
732:38 - now now the one thing you want to make
732:40 - sure is having guard Clauses and try
732:43 - catch
732:44 - try catch Clauses in your application
732:46 - whenever you're working with blockchain
732:48 - I can't emphasize it enough that is
732:50 - super crucial and it will make or break
732:53 - your entire application if the
732:55 - transaction fails or the if the Ethan
732:58 - wolf is going to be completely lost and
733:00 - if you like do all these like guarding
733:02 - steps that might save it from from my
733:06 - save your customers from losing their
733:08 - money so we got money on the line we're
733:10 - going safe so we're gonna say if there
733:13 - is no address is connected obviously at
733:15 - that point like there is nothing there's
733:18 - no money to you no money to lose but
733:21 - then again random error messages so you
733:24 - wanna you wanna you wanna keep that
733:26 - stuff safe so now what you want to do is
733:29 - say cons and contract and we're going to
733:33 - create a contract instance right here
733:36 - for this specific function and let's
733:39 - take a look at what that does so that's
733:41 - actually happening in the constant file
733:43 - so let's create contract thing
733:45 - is destructing the ethereum object from
733:49 - the from your window which is basically
733:50 - the code snippet that metamask injects
733:52 - into your application and if that is
733:55 - present and if that is valid then you
733:58 - it's going to create a web 3 item or
734:00 - like a web 3 instance using that that
734:02 - code and web3 is just a
734:06 - it's an npm package it's called web3js
734:09 - and that just enables you to interact
734:11 - with the blockchain however it needs a
734:13 - couple things
734:14 - one obviously wallet connection and then
734:16 - it's going to create a whole contract
734:19 - interface for you based on the ABI that
734:22 - you pass in so that's the Instagram Json
734:25 - file that we put in here earlier and
734:27 - that is the address that we put right
734:29 - here that's pretty much it actually
734:32 - doesn't need these addresses don't even
734:35 - have to be exported but it's just nice I
734:38 - think
734:39 - yeah it seems to be working without
734:41 - exporting perfect so there's no need to
734:43 - use now back in your context
734:46 - so that's you're going to store that
734:48 - contract interface that that function
734:50 - generates
734:51 - and next up I'm going to create a data
734:55 - object or we're going to get started
734:58 - interacting with the truck itself so
735:01 - we're going to invoke one of its methods
735:04 - and that's going to be let's see what we
735:07 - will create I believe it is upload image
735:10 - yes
735:11 - so if you go back there oh it's just I
735:14 - close the line but you can just paste it
735:17 - there so there's like there's no type of
735:19 - options and then you will need to pass
735:21 - an image URL
735:23 - and you will need to pass that caption
735:25 - now these will be coming from the
735:27 - Thrones you need to pass them right
735:29 - there so we expect those to to be passed
735:33 - into this function so they can be passed
735:35 - over there and so
735:37 - it's going to be helpful there and
735:39 - because it is a function that creates
735:42 - and pushes data onto the blockchain you
735:45 - will actually have to pay gas fees for
735:47 - it and the address that we'll need to
735:50 - pay the gas Keys is going to be user
735:53 - address
735:55 - this guy right there I wanted to put
735:58 - like a comma that's fine and then we'll
736:00 - have to start we'll we're gonna need to
736:02 - specify some gas that's going to be
736:04 - this is going to be 3 million and but
736:07 - don't worry about it it's in way it's
736:09 - like a lot less like it looks like a big
736:11 - number but it's not that big of a number
736:13 - and and because we want to make this
736:16 - application as safe as possible I like
736:19 - to create a try catch function as I said
736:21 - earlier so I'm just gonna do that and
736:24 - then catch or that
736:27 - and then console put it out on the
736:30 - console just in case you want to
736:34 - put it out on the console so you can
736:36 - debug if there's any errors going on so
736:39 - air that message
736:41 - like that and then just wrap this entire
736:44 - thing around it nice and then to make
736:47 - this application super interactive we
736:50 - set up toast messages and toastmessage
736:53 - is basically just these little nice
736:55 - thingies that you're gonna see in a
736:57 - little bit Ah that was well explained
736:59 - anyways that's like a little loading
737:02 - animation that's going to watch the
737:04 - promise go through and all the all the
737:06 - back end stuff and then it's just gonna
737:07 - be like super interactive so the users
737:09 - will be able to see exactly what is
737:11 - happening all right so let's set that up
737:13 - that's called toast and I think
737:16 - I think the package is called react
737:18 - cultify which we actually imported
737:21 - so let's just take a look at how it
737:23 - looks like if you go to mpmgs.com it's
737:25 - going to be right there
737:27 - yeah these are the toast messages and
737:29 - you can come here figure it out and then
737:32 - do all kinds of modifications to it make
737:35 - them yours customize it and this is
737:37 - exactly what we're gonna have wrong
737:39 - Arrow type
737:40 - anyways going back here we're going to
737:42 - say toast dot we're going to say
737:45 - toes.promise and then passing data which
737:48 - by the way is going to be a promise
737:50 - because contract method and whatever is
737:53 - returning a promise and then here
737:56 - there's going to be three options so
737:58 - there's one when the promise is pending
738:02 - and then there's gonna be another one on
738:04 - the promise has result
738:06 - and then there's going to be one
738:09 - when there is an error so these are the
738:11 - three cases and then you can just pass
738:13 - in strings and I have these creative for
738:16 - me so I'm just going to copy paste them
738:18 - but you can customize your messages
738:21 - completely and as much as you want you
738:24 - can literally just load in random stuff
738:26 - there for now just for time saving
738:29 - reasons I want to put like a little X
738:31 - there so there we go that should
738:34 - technically be just perfectly enough to
738:37 - get started with the uploading images
738:39 - now one more thing I want to do before
738:41 - we do anything because if you remember
738:44 - we're going to use the localhost because
738:46 - that's still a little bit faster than
738:47 - any kind of Tesla and so we're gonna
738:50 - need to connect this function to that
738:52 - button right there so for that
738:55 - export this guy
738:57 - and then in your header you're going to
738:59 - need to import it so next
739:03 - so we've got the context import and then
739:06 - we're gonna have to
739:08 - destructure it so upload image
739:12 - of course use up context just like that
739:16 - it's actually the wrong one oh this is
739:19 - actually the wrong file oh
739:20 - whenever I import or open header cut
739:22 - before that it doesn't even need to be
739:25 - open
739:26 - so once you export it upload images or
739:29 - upload image you know open the file
739:31 - uploadmodal.js
739:34 - and import use app context and then from
739:39 - that you want to destructure this
739:43 - specific function so you can move that
739:45 - once and then just paste upload image
739:48 - equals use app context just like that
739:51 - that should pretty much take care of
739:54 - this whole thing it says the function
739:56 - takes in zero parameter it's going to go
739:58 - away a little bit this is just like my
740:00 - call Quality Checker okay let's see if
740:03 - that helps okay perfect now it's gone it
740:06 - just has to realize it takes a little
740:07 - bit of time that's fine anyways so now
740:10 - it should be hooked up to that button
740:12 - actually what this was already hooked to
740:15 - that so what we're gonna do is
740:19 - I have this nice rug right here that's
740:21 - gonna be my first it's gonna be my first
740:24 - image that I upload
740:25 - so wait for that little uploader thingy
740:28 - to finish
740:29 - hit done because there's no need to crop
740:31 - there and then this is
740:34 - first
740:35 - post or whatever hit submit okay
740:39 - provided address is invalid
740:42 - all right whoever's editing I'm
740:43 - debugging cut this
740:45 - okay so I figured out the area
740:47 - it's it's dumb it's really dumb to see
740:51 - here when we set the user address that's
740:53 - actually going to be a truncated address
740:55 - and that's not gonna work here you need
740:58 - the full address here so you want to put
741:00 - that in there instead of the truncated
741:03 - one
741:04 - yeah if you caught it by yourself like
741:06 - good it was a pretty weird error all
741:10 - right so let's try again uploading the
741:13 - same image once again
741:15 - and there we go hit done all right my
741:19 - first post
741:21 - it's better confirm
741:24 - image uploaded successfully
741:27 - okay
741:28 - something I guess it's time to fetch
741:30 - that
741:31 - all right so we've got our image
741:32 - uploaded
741:34 - allegedly
741:35 - let's figure out if we can fetch it and
741:38 - actually show it out on the screen so we
741:42 - got to get all images actually should be
741:45 - firing immediately and there's one more
741:47 - thing or one more place where I want to
741:49 - oh
741:51 - and there's one more thing where I want
741:53 - to fire this function off and that's
741:55 - basically every single time whenever
741:57 - someone opens this app so it's gonna be
742:01 - another use effect and in here we're
742:03 - just going to go ahead and paste this
742:05 - and call it once so that should
742:08 - technically call this function every
742:10 - single time somebody turns this app on
742:12 - we'll just confirm that whatever yeah
742:15 - console logging object perfect
742:18 - so that is working as designed
742:21 - however now what you want to do is make
742:24 - sure that the person that there is
742:26 - somebody logged in actually we don't
742:28 - have to make sure that's completely
742:29 - that's not necessary at all however
742:31 - we're gonna need to create a new
742:33 - instance because the other one is unique
742:36 - to that function and it's getting
742:37 - scrapped right after that function has
742:39 - run
742:40 - and then we're gonna be doing some
742:42 - interesting things
742:44 - so what we want to do is let me just
742:46 - show you in the salty litty file so if
742:49 - you remember we are tracking how many
742:51 - images do we got and then we are also
742:53 - tracking it in a mapping so every single
742:55 - ID has an image linked to it so we're
742:58 - going to do is fetch this number and
743:01 - then we're going to Loop through this
743:03 - mapping and that's how we're going to
743:04 - get each image one by one all right so
743:08 - to do that we're going to say cons image
743:11 - count
743:12 - we're going to say away contract
743:15 - methods and then we're going to say
743:17 - image count and we're going to say call
743:20 - because we're just reading from the
743:22 - blockchain that completely will work now
743:25 - let's go ahead and const log out how
743:28 - many images do we got it's image count
743:32 - like that we should see a one right
743:35 - there so that's perfect that's working
743:37 - as we wanted it to work now we're gonna
743:41 - now what we're going to do is whenever
743:42 - we fetch one image by one image we're
743:45 - going to store them and we're going to
743:47 - push them into a temporary
743:49 - I'm going to put them into a temporary
743:51 - array that we're just going to have
743:53 - while we're here and then we're going to
743:56 - and then we're going to save that or a
744:00 - temporary urate into our you state
744:03 - so how that's going to go is we already
744:05 - have the image count and so now we
744:08 - already have the temporary array so now
744:11 - it's time to actually get started
744:12 - looping so for index equals one
744:17 - semi column and then I lost them or
744:21 - equal to are actually index is less than
744:24 - or equal to image count like that
744:27 - semicolon and then X Plus it's pretty
744:31 - basic it's super beginner friendly there
744:34 - should be no issues we're just gonna
744:36 - call the mapping function and so it's
744:39 - going to be cons image
744:41 - weight contract not methods dot images
744:46 - and then we're going to pass in Index
744:48 - right there
744:50 - and we're just going to call it so once
744:52 - again we're just reading from the
744:53 - blockchain no transaction needed and
744:56 - then what you're going to say is new
744:58 - posts dot push and we're gonna say
745:02 - because if you remember
745:04 - actually let me actually let me just
745:06 - show you but if you remember these this
745:09 - image this whole image object is a
745:11 - little bit weird let's see what is
745:13 - happening here
745:14 - I forgot our lead keyword right there
745:17 - so let's try again all right there you
745:19 - go so I'm gonna make this big
745:23 - that's what she said and if I zoom in as
745:26 - you can see every single prop and detail
745:29 - is being returned twice you get this
745:32 - like weird object type of thing with
745:34 - actual named like the name props so what
745:38 - you want to do is go for these because
745:40 - these are like way more easy like way
745:42 - easier to read as a human and so we're
745:44 - just going to save those everything else
745:46 - can go out the window so we're gonna
745:48 - have an ID which is gonna be image dot
745:51 - ID like that URL
745:55 - caption
746:00 - and then you're gonna have total hip
746:02 - which is imaged total tipped and then
746:06 - you're gonna have an author which is
746:07 - going to be the image.author so that's
746:10 - pretty easy that's self-explanatory I
746:12 - think there's not too much to understand
746:15 - about there there's gonna be a weird
746:18 - move that I'm going to be doing here and
746:19 - by the way we're going to wrap all this
746:21 - into a try catch in a little bit
746:23 - but after like outside of this for Loop
746:26 - what you want to do is I'm going to say
746:28 - set post and now this is when we are
746:31 - going to update the state itself so what
746:34 - you want to do is say new host dot
746:37 - reverse
746:38 - or actually let's not do that right now
746:40 - so let's just be happy a little bit
746:42 - because we have our new post we have the
746:46 - post that we just uploaded there now
746:48 - what you expect from Instagram is that
746:51 - newer posts and I know the algorithm and
746:54 - everything it doesn't do it that way
746:55 - we're not gonna mess with it this is
746:57 - like a true real real Instagram that
747:02 - we're gonna have here so I'm just gonna
747:03 - so what we expect is the newer posts are
747:06 - going to be showing up on top of older
747:09 - posts so what I'm going to do is let's
747:11 - go ahead and I'm gonna get another rug
747:13 - image and it's funny because in crypto
747:17 - land if they steal your money it's
747:20 - basically a rock pool ah
747:22 - am I making fun of other people's losses
747:25 - yes I am all right so here what I'm
747:29 - gonna do is just paste that image there
747:32 - and then zoom out because why was I
747:34 - zoomed in so hard
747:36 - and let's go ahead and upload an other
747:38 - image so done and this is my second post
747:43 - on the top so I expect it to show up on
747:46 - the top right
747:47 - so confirm that full screen metamask and
747:50 - then if you scroll down it's below it's
747:52 - at the bottom that's not how we wanted
747:54 - to do I already spoilered it but
747:57 - basically what you need to do is just
747:59 - reverse that array and so that way the
748:03 - newer posts are going to show up at the
748:05 - top
748:06 - all right so we are like pretty much
748:08 - right there the only thing now that we
748:10 - have to implement is literally just
748:13 - tipping and once we're done with that
748:15 - this application is complete
748:17 - all right now we are at the very last
748:20 - step we are at the Tipping
748:23 - functionality of this very application
748:25 - and this is your time to grab another
748:28 - coffee because we're gonna need to be
748:30 - alive and we're gonna need to be awake
748:33 - to test out all the functionality that
748:36 - we will have so
748:38 - with that all that random jargon that I
748:40 - just said and even I don't know what I
748:42 - just said
748:43 - with all that done one more thing this
748:46 - all has to go into a try catch so before
748:48 - we go any further
748:50 - try catch
748:52 - I don't I can't even type it catch like
748:55 - that error
748:58 - Dot message so like I said everything on
749:02 - the blockchain goes into a try catch
749:04 - there you go there it is now it's cool
749:07 - all right let's go ahead and implement
749:10 - the tip owner functionality of this
749:13 - all right so this is our very last
749:15 - function and
749:17 - what we're gonna get started with is
749:19 - once again
749:21 - creating a new contract and in this case
749:24 - we will need the address so we'll have
749:27 - to actually guard for that too so if
749:29 - there is no address we're just going to
749:31 - return and skip it and before I forget
749:34 - it let's just export this tip owner
749:36 - function all right so we got our
749:39 - contract instance we got everything we
749:41 - need we can get started so good old try
749:45 - catch because you don't want you don't
749:47 - want to mess with errors here event
749:50 - message
749:51 - so that's all cool and then what we're
749:54 - gonna do here is we're just gonna have a
749:56 - hard-coded amount of tip that one user
749:59 - can do or like one user can send to
750:02 - another one you can make this actually
750:04 - it could be your homework to make this a
750:06 - as a dynamic thing but for now we're
750:10 - just gonna go with a hard-coded one and
750:11 - we'll see how easy it is to make it make
750:14 - it Dynamic so what you want to do is you
750:16 - want to convert any kind of and like I
750:18 - said before so what you want to do
750:20 - because I said it earlier solidity only
750:22 - works with weight which is like a super
750:25 - small ether ether amount so you will
750:28 - have to convert it now well how you do
750:30 - it is you get a pass in a string of The
750:33 - Ether value and then actually and then
750:36 - actually specify that you are passing an
750:37 - ether all right and so that's that way
750:40 - this ether amount is going to be
750:43 - converted to whey as it says there
750:46 - all right so there's your amount and so
750:48 - that is what we are going to be sending
750:51 - as a tip in this application but like I
750:53 - said you can specify it you can add like
750:55 - a little model which like which like
750:57 - pops up and then the user can choose how
750:59 - much they can tip
751:00 - 55 like at all the restaurants and so
751:04 - what you're going to do is gonna be like
751:07 - relatively close to what we have here
751:09 - all right so actually from just just for
751:13 - pattern recognition sake you want to go
751:15 - ahead and try it using this thing now
751:18 - there's gonna be one more thing that you
751:20 - will have to adhere which is Val ues and
751:23 - so once you add that and you figure out
751:25 - what's going to be the value of the key
751:27 - which we call Value there's a lot of
751:29 - values so we want to have a value here
751:31 - which will have a number in there but
751:35 - you want to pass in a variable so you go
751:37 - ahead try it out and then pause it pause
751:40 - this video because I'm going to go into
751:42 - the solution right now all right so if
751:44 - you try it out and you failed no worries
751:47 - I used to fail with ethereum all the
751:49 - time in fact I still do in fact I still
751:51 - pause it whenever I get an error and
751:54 - then I spend two hours to debug it so
751:56 - that's fine you just don't see it
751:57 - because it's off camera
751:59 - anyways what we're going to do here is
752:01 - we're going to create a transaction
752:03 - which will be a con which we'll be
752:06 - interacting with a contract methods
752:08 - you'll know that let's go copy function
752:10 - name
752:12 - which is tip image owner or that there
752:15 - it is and then we'll just go call that
752:19 - and then we'll have to pass in the image
752:22 - ID all right so that's something we're
752:24 - gonna have to do so we're gonna need to
752:26 - we're gonna need the front end to pass
752:28 - it in here into the contact cell so that
752:32 - we can pass it over
752:34 - and it's because we are actually
752:36 - creating data onto the blockchain and
752:38 - we're like sending them we're going to
752:40 - need to use the word we're going to need
752:42 - to use the method send down there
752:45 - so the origin is going to be what are
752:48 - the center is going to be the address
752:49 - and then once again not this address the
752:53 - truncated thing because it's gonna err
752:55 - out again like last time I'm gonna go
752:58 - with the usual gas value 3 million
753:01 - like that and then this is the key one
753:05 - the the amount
753:08 - so basically this will specify that
753:10 - there's going to be a value that the
753:13 - user will have to pay that's the big
753:15 - number that kept showing up as zero
753:18 - so we're going to need to pass this in
753:20 - here and that way you're going to
753:22 - actually transfer funds towards the
753:24 - owner of the image you want to tip it
753:27 - will actually transfer funds to the
753:28 - owner of the image you want to tip now
753:32 - you can set a guest limit of null and
753:36 - then just call it
753:38 - and now to make it toasty we're gonna
753:42 - use the toast dot promise method
753:46 - and I'm going to pass in TX as in
753:49 - transaction and then create the usual
753:52 - object and like last time I have the
753:55 - three case scenarios typed up there so
753:58 - I'm just going to paste it here but
753:59 - basically you want to have a pending
754:01 - text you want to have a success stack
754:02 - text and you want to have an error text
754:06 - basically that is pretty much the
754:08 - application so let's go ahead and test
754:10 - this out and actually I have to test out
754:13 - the error itself if you remember wall it
754:16 - says please connect your wallet that's
754:18 - interesting so there's a little bit of a
754:21 - bug there we're gonna fix that in just a
754:23 - second and it's also here so that's also
754:25 - interesting so there's like a few
754:27 - Dynamic stuff that we're gonna have to
754:30 - fix all right so let's do that before we
754:32 - mess with any kind of tipping all right
754:35 - so one of them is gonna be in the right
754:38 - suggestion bar
754:40 - oh so one of them is going to be in the
754:43 - home right bar now in here we will need
754:47 - to import the ease up context
754:51 - so basically the app contacts hook
754:54 - like that
754:55 - and then we're going to destructure user
754:58 - address
754:59 - from that from the contract context
755:02 - like that and that should update this
755:06 - guy okay so that's pretty good and then
755:09 - there's this one more thing we need to
755:11 - up update that's going to be inside of
755:14 - feed
755:15 - and inside action buttons no it's going
755:20 - to be inside of caption now in caption
755:23 - we expect to have a username I don't
755:27 - think that's what we send it that's how
755:30 - we set it there so let's take a look at
755:32 - how we have it in context
755:34 - I actually cut everything yo cut
755:37 - everything where I open a caption so
755:39 - that's not an implementation error okay
755:41 - so for whoever is editing it cut this
755:43 - part out where I first from the point
755:46 - where I first opened item and caption
755:49 - and all this stuff so the only thing
755:51 - that I want to fix here with them is
755:54 - this use of contact stuff everything
755:56 - else will be coming and even this stuff
755:59 - is going to be coming from the CLI so
756:01 - they don't have to fit and then back to
756:03 - the video right now all right so with
756:06 - that fix we should be pretty much good
756:08 - to go so grab this tip owner and we're
756:11 - gonna go to the item file now in here oh
756:16 - okay and we're gonna be going to the
756:19 - action buttons file right there so
756:22 - there's this error that's going on here
756:24 - that's because once again I set up this
756:26 - dummy function there just so it doesn't
756:28 - like completely go nuts so instead I
756:30 - have an error now you're gonna have to
756:32 - import use up contact here and I think
756:35 - you see the pattern here so once again
756:38 - destructure it and then use uh context
756:42 - oops and that should be good to go now
756:45 - let's remove that let's paste it back no
756:48 - errors there so that should in theory
756:51 - make everything work so there is all
756:54 - that's pretty much all the application
756:56 - now I'm just gonna try to tip to my own
756:59 - image and if everything is set up
757:01 - correctly this should throw an error so
757:04 - let's try that I'm going to hit confirm
757:07 - and there you go there's the error and
757:09 - it says owner cannot tip their own image
757:11 - so it worked it is working perfectly
757:14 - yeah there's the error that's cool and
757:17 - so what I'm gonna do instead is go ahead
757:20 - and switch my switch my wallet and
757:23 - there's my new balance
757:26 - so that's nice and also you can see how
757:29 - the profile image is like changing so
757:31 - that's actually tied to that's so that's
757:33 - actually tied to the wallet address all
757:35 - right let's try tipping hit confirm and
757:39 - there you go tip send so that
757:41 - technically means that there was a tip
757:43 - amount sent here
757:45 - .01 e so let's actually do this again
757:49 - let's just double check how much we're
757:50 - sending because I completely forgot it's
757:52 - a con and yeah 0.1 so what I'm expecting
757:56 - from this next stack test because we
757:58 - haven't tested is it goes down or we
758:00 - didn't set up expectations so this is
758:03 - supposed to go down to
758:05 - 83.62 and this should go up to
758:08 - 0.98 so let's let's tip again but this
758:12 - time that image hit confirm and let's do
758:16 - it there you go there it is it is
758:18 - working perfectly it is beautifully
758:21 - built so there you have it that is your
758:24 - Instagram clone with tipping function
758:25 - smell the built in and that's pretty
758:28 - much it about your app and once again as
758:31 - I mentioned it earlier you can go into
758:33 - your constants and then just switch out
758:34 - the deployment now keep in mind that if
758:37 - you're switching out the deployments to
758:38 - the girly one you will have to re-upload
758:40 - images and your friends and whoever
758:42 - you're sharing this with are going to
758:44 - have to upload images as well and you
758:47 - also will have to post this website
758:49 - somewhere on the internet
758:51 - but basically that's it that's it for
758:53 - the tutorial I hope you enjoyed it let
758:55 - me know Down Below in the comments
758:57 - whether you like it or not and don't you
758:59 - dare tell me anything negative because
759:01 - I'll find you anyways that said go ahead
759:04 - smash that like button and subscribe to
759:05 - the channel and I'll see you in the next
759:07 - one
759:08 - in this video you're going to be
759:09 - building eBay web 3.0 adapt using
759:12 - infuria on the ethereum blockchain we're
759:14 - going to use rainbow kit to connect our
759:16 - metamask to the entire application and
759:18 - we're going to be using web3.js to
759:20 - interact with our custom solidity
759:22 - contract deployed using infuria and
759:24 - you're going to be able to list and sell
759:26 - your items and others will be able to
759:27 - come over and buy those items from you
759:30 - using ethereum with this app so with
759:32 - that said let's just jump straight into
759:33 - it all right let's get straight into the
759:36 - eBay clone and let's build this thing so
759:39 - what I got in front of me is basically a
759:42 - terminal ready to execute some stuff all
759:46 - right so I'm going to type in MPX
759:48 - leather programmer which is our custom
759:51 - built CLI tool just for you now I'm
759:54 - going to type in my email address here
759:56 - and let's see what else do we got after
760:00 - I'll put in my name and then just hit
760:02 - eBay now what's going to happen is you
760:06 - don't see it because it's on my other
760:07 - screen but it basically opened up an
760:09 - interviewing and you want to definitely
760:10 - use this specific inferior link that
760:12 - this opened up because this will give
760:15 - you a bunch of perks now I personally
760:18 - already have an account within fewer so
760:20 - I'm just going to sign in but if you
760:22 - don't have an account yet you want to
760:25 - definitely create a new one with right
760:27 - here because it's going to give you a
760:29 - couple of perks and as you can see I
760:31 - created this eBay clone project now the
760:34 - way I did it is up here there's this
760:36 - create new key thingy which I just
760:40 - zoomed into for no apparent reason
760:41 - actually it's purple so you want to
760:44 - select web3 API formerly ethereum and
760:47 - then just give it whatever name my eBay
760:50 - project and it's gonna be like yo you
760:52 - have too many projects so I'm just going
760:54 - to hit cancel but this is literally what
760:56 - I'm gonna get now in here once you open
761:00 - it you want to hit manage key right
761:02 - there
761:03 - or it will show you this screen
761:05 - immediately and you want to go ahead and
761:07 - copy this API key this will be one of
761:11 - the most important things throughout
761:12 - this build so if you don't do anything
761:13 - just go ahead and copy this key and then
761:15 - you're you should be good no I'm just
761:16 - kidding anyways regardless of copy that
761:18 - guy yup see copied it and very
761:22 - conveniently our CLI tool has just
761:25 - finished downloading this project so
761:28 - that's cool what you can do now is
761:30 - definitely you want to check for node
761:31 - modules in here in the root folder and
761:35 - then down in the what is it next app
761:38 - folder so if you have those two node
761:40 - module folders you probably already
761:41 - ready to go now what you want to do is
761:44 - inside of next app create a new file and
761:47 - call it dot
761:49 - [Music]
761:50 - env.local that is period EnV period
761:53 - local now what you want to do is type in
761:57 - infuria and let me actually make this a
762:00 - little bigger that's what she said yeah
762:03 - should be good so what you want to type
762:05 - in is infuro underscore API underscore
762:09 - key not key or whatever and then just
762:12 - paste whatever key you've got there now
762:15 - you will also definitely keep this as a
762:17 - secret because the secret and
762:21 - um this is not going to work by the time
762:23 - you're watching this
762:24 - you can try though and if anybody gets
762:27 - access to your API key so this is your
762:29 - Warning by the way so if anybody gets
762:31 - access to your API key they will be able
762:33 - to use your inferior account which in
762:35 - turn might charge you if you are
762:38 - subscribed to paid services
762:40 - or just run all your free stuff out so
762:43 - there's that now once we've done this
762:46 - so once you open up the terminal and you
762:48 - should probably see it a keystrokes that
762:50 - I'm recording so what you can do here is
762:52 - go ahead and type in CD next Dash app
762:56 - and that will basically just navigate
762:57 - you in here so your terminal is going to
762:59 - be inside that folder and now here you
763:01 - want to type in yarn def meaning your
763:04 - Dove and that should have technically
763:08 - opened or started this tunnel for you
763:10 - and what I'm gonna do is just make
763:12 - things a little more convenient
763:14 - and if you pop it into a chrome
763:17 - congratulations you have the front and
763:19 - ready to go and this is what we're going
763:21 - to be using to build on top of after our
763:24 - coffee break
763:28 - okay this is the time to take another
763:31 - coffee break
763:33 - and go ahead and get started working on
763:35 - our
763:37 - contract so with that said go ahead and
763:39 - go into your contracts folder and inside
763:42 - there's this ebay.sol file then you want
763:45 - to come in here and this is basically
763:47 - pre-made contract that is ready for you
763:51 - all right so what can we do here so
763:54 - basically let's just go ahead hype this
763:56 - terminal because we are not going to
763:57 - need it for a little bit and what we're
763:59 - going to be doing is
764:01 - let's just actually go ahead and start
764:04 - creating our objects trucks whatever
764:05 - mappings and stuff like that that's
764:08 - interesting I have the solution on my
764:10 - other screen and it doesn't look any up
764:12 - like that but I can imagine a scenario
764:15 - when GitHub co-pilot just puts out all
764:18 - the Developers let's hold their General
764:21 - players out of their job you okay all
764:23 - right
764:24 - so let's go ahead and type in so let's
764:27 - go ahead and create a struct that will
764:29 - be called Product now that will have a
764:32 - couple of props in there so what are
764:33 - they we will have a address which is
764:37 - going to be the buyer's address so the
764:39 - person who buys the product that'll be
764:42 - the buyer and then there's going to be
764:44 - another address which is yeah this is
764:46 - going to be the seller now we're gonna
764:48 - have a uint which is going to be the ID
764:50 - of the product itself and we're going to
764:53 - have a price correct we're going to have
764:56 - another uint which we'll be reading
764:58 - these products okay I put a comma
765:01 - because it was because my error linter
765:03 - was messy it was
765:05 - and happy about the semicolon but okay
765:10 - all right let's do it that way though so
765:13 - then we're going to have a couple of
765:15 - strings here we're gonna have a name
765:17 - we're going to have a description we're
765:20 - going to have a category
765:23 - category like that and we're going to
765:26 - have an image URL
765:29 - nice it's nicely formatted now
765:32 - and next up what we're going to be doing
765:35 - is also versus like out in the wild out
765:37 - of out in the nothingness the Wilderness
765:40 - we're going to have a other U.N which
765:43 - will be product counter yeah yeah you're
765:46 - in 256 you win it's basically the same
765:49 - thing I'm just lazy person so I
765:51 - sometimes write you and but yeah anyways
765:55 - moving on you want to definitely map all
765:58 - the products
766:00 - and you want to map these product
766:03 - counter thingies so once again he went
766:06 - to
766:07 - a product and we'll be calling it this
766:11 - will be a public thing this mapping will
766:13 - be called products all right next up
766:16 - let's go actually just straight up jump
766:19 - into it and let's go ahead and create a
766:22 - new products list that guy all right so
766:25 - it's going to be list new product right
766:27 - and we will have to pass in a couple of
766:30 - things here
766:31 - so first of all we're going to need a
766:34 - name and this is the time when we're
766:37 - going to start introducing all these
766:39 - like underscores and stuff like that and
766:41 - memory maxed up we're going to have a
766:44 - description that we pass in then we're
766:47 - going to have a category that we pass in
766:50 - and an image URL that's smart that's
766:52 - actually pretty intelligent I don't know
766:54 - where my formatting went but there it is
766:56 - you also want to definitely pass in the
767:00 - price of the item price like that and
767:05 - you also want to pass in the rating of
767:09 - the item and don't leave any trailing
767:11 - commas what's up with my prettier dude
767:14 - all right there we go there we go okay
767:16 - so apparently
767:18 - okay so my pre-year apparently doesn't
767:20 - work as long as the function itself is
767:22 - like has syntax errors which is actually
767:26 - exploring all right now you also want to
767:28 - make this a public function because you
767:30 - want to definitely make sure that
767:31 - whoever is interacting with the app is
767:33 - going to be able to call this function
767:35 - so now with that we're pretty good now
767:39 - next up we're going to do is yeah we'll
767:42 - do that eventually at some yeah so next
767:45 - up what you want to do is we'll be
767:47 - creating a new instance of the product
767:49 - struct that we just did up here all
767:52 - right so this is just a definition of
767:53 - the product struck and like just defines
767:56 - what are each and every single one of
767:59 - what kind of traits will each and every
768:01 - single product have and so what we're
768:03 - going to do is we're going to say
768:05 - product
768:06 - memory because from the memory we're
768:09 - doing things and it will be a new
768:11 - product and this is a declaration and
768:13 - this will be a type product and so in
768:16 - here we're going to pass in an object
768:18 - now
768:19 - we will be having a buyer who's going to
768:22 - be address zero
768:25 - all right so let's take a look at that
768:26 - what this actually is because this is
768:27 - some sort of like basic fold address
768:30 - that is that's just a placeholder so
768:32 - let's take a look at what Google what
768:34 - father Google says especially if I was
768:37 - able to type it correctly meaning in
768:39 - solidity and so there you go the zero
768:43 - count is just a special use case
768:44 - indicate that the new contract is being
768:46 - deployed it's basically what we're going
768:47 - to be using that in this case is just
768:50 - like this placeholder that's literally
768:52 - what it means what is going to default
768:54 - back to so this is like not a like
768:56 - nobody owns this one is what I'm trying
768:58 - to say so like when you put an ad item
769:00 - out for sale there's no actual factual
769:03 - product it's like kind of like if it's
769:06 - at zero but because that's not an
769:08 - address like you got to do it this way
769:10 - all right there we go select seller
769:12 - that's going to be the message sender
769:15 - meaning the person who pops open their
769:18 - meta mask and puts out a new item for a
769:20 - listing and we're going to have a ID
769:23 - which is going to be the product counter
769:26 - and then we're going to have a price and
769:28 - from now on basically match all these to
769:32 - these guys but like down here so if that
769:36 - was weird just watch me and you'll
769:38 - understand a little bit when I meant so
769:40 - like rating it's going to be rating and
769:42 - then you're going to have name it's
769:45 - going to be name and then you're going
769:46 - to have description it's going to be
769:48 - description category and you're like and
769:50 - now we just close that guy remove the
769:52 - excess stuff and let's see what the
769:55 - issue is so this is product identifier
769:58 - not found oh what would be helpful if I
770:01 - would type without typos so product all
770:05 - right cool function stay commutable
770:07 - little restricted to view that's
770:09 - completely fine as of right now because
770:13 - right now we're not like I don't get it
770:15 - why it says that but it will go away in
770:17 - a little bit don't even worry about
770:18 - These Warnings warnings are not even
770:20 - legit so next up what you're going to do
770:22 - is you're going to say products the
770:24 - product counter is going to be new
770:28 - product so what did I just do so this
770:30 - will be the mapping all right so product
770:33 - counter
770:34 - is going to be we're going to where we
770:36 - literally have a product counter that
770:39 - starts from zero and that will be the
770:41 - index
770:42 - so that will be the ID and we'll be
770:44 - indexing through all these products so
770:46 - what we do now is we're going to have a
770:49 - tuple or like an array of tuples or
770:52 - whatever a mapping all right I'm just
770:54 - running like you fancy with all these
770:56 - parts basically so we're going to be
770:57 - creating a mapping that will be mapping
770:59 - that will map all these new products
771:01 - these guys to each product counter does
771:06 - that make sense it's like we're gonna
771:07 - have one first product two second
771:10 - product yada yada once we build out the
771:12 - entire thing it'll like all come
771:13 - together and you will understand what
771:15 - I'm talking about and then obviously you
771:18 - want to increase the product product
771:20 - counter because initially it starts out
771:22 - at zero and then the next if you didn't
771:24 - do that then and you added like a second
771:27 - product that's supposed to depict that
771:30 - you repeat the same step
771:32 - drawing skills
771:34 - on point
771:35 - so if you stay at so if you leave
771:37 - product camera at zero
771:39 - and but you don't step it up the next
771:42 - product is going to be still stored at
771:44 - zero which is obviously not ideal so you
771:47 - want to like stop it I should be able to
771:48 - pretty much be enough for now let's
771:51 - actually do one more thing which is
771:53 - going to be a really quick one so I just
771:55 - want to like create a new function
771:57 - we call get number of fraud ducts which
772:02 - is just going to be like a nicer naming
772:04 - of something we could already do because
772:06 - like whenever you
772:08 - Define a variable under the hood there's
772:11 - going to be a color view function
772:14 - created for it like immediately anyways
772:18 - we're just gonna make it nice anyways
772:21 - and we're just going to create a call
772:23 - function so that will return a you went
772:27 - and where's the T there's the T and then
772:31 - we're just going to literally return
772:34 - this guy back and that'll be basically
772:37 - what we will get started with now
772:39 - in the in a previous video and probably
772:42 - we suggested a couple times but let's go
772:45 - ahead and go into our extensions and you
772:47 - want to download ethereum remix so this
772:50 - is the guy that we are going to be using
772:51 - this is basically remix IDE baked into
772:54 - your vs code if you know what remix ID
772:57 - is this made a lot of sense to you if
772:59 - you don't know what remix IDE is I just
773:01 - saved you a ton of headache and copying
773:04 - code so don't even worry about it just
773:05 - get it this is a remix IDE for you
773:08 - all right let's go ahead and click that
773:10 - bad boy so that will be remix IDs icon
773:13 - once you install it and before you do
773:16 - anything you just want to make sure that
773:18 - the compiler version which you can set
773:20 - out heat set right here
773:22 - it currently doesn't have any kind of
773:24 - value
773:25 - so what you want to make sure is that
773:27 - there's zero eight 16 so you want to go
773:29 - ahead and select that guy and I see it
773:33 - says zero eight sixteen how cool is that
773:35 - all right let's make this small again
773:37 - okay and so now you want to click run
773:40 - and deploy and then just hit activate
773:42 - and that will basically spin up this
773:45 - thing now it also spins up your
773:48 - output but we're just gonna put that out
773:51 - of the way so what's happening here
773:53 - there's a couple of things that are
773:55 - going on so if we go back to infuria and
773:58 - hat back right into your project and
774:00 - then you hit manage key over there and
774:03 - then here you select you can go with
774:05 - mainnet but that's going to cost you a
774:06 - ton of money so I would just recommend
774:08 - going with girly and then copying this
774:11 - guy and then you can paste this RPC URL
774:13 - here now that'll help you when you're
774:17 - deploying and when you're like finished
774:19 - with the app now when it comes to
774:21 - deploying to Tesla it takes a little
774:23 - longer time so instead what we're going
774:26 - to be using is not this but what we're
774:29 - going to be using is if you go to draw
774:32 - fullsweet.com ganache
774:34 - and then you go ahead and download this
774:37 - guy right here that will download an
774:39 - application to get in a ganache
774:41 - installed all right and then once you
774:44 - install it this will come up obviously
774:46 - you will have no workspaces so what that
774:48 - means is you can just hit quick start or
774:51 - if you've been already using it you just
774:53 - click whatever workspace you got and you
774:56 - want to copy this RPC server all right
775:00 - so that's what we that's what you want
775:01 - to copy and then go back to your vs code
775:04 - and place it right here
775:06 - and then hit connect
775:08 - and so when you first
775:10 - connect your ganache to this whole thing
775:13 - this is what it will look like and so
775:16 - down here it's going to say network is
775:17 - local or custom just like it does it
775:19 - here it's like cool stuff all right you
775:23 - can also if you press command shift p
775:25 - and then you start typing in secondary
775:27 - you can open up the secondary sidebar
775:29 - thing you can just pop that output
775:32 - window right there and that will that
775:34 - way you can close it close the things
775:36 - down there and then just pull it out
775:38 - wide so you are going to be seeing
775:40 - everything now what you want to do is
775:42 - you want to have your ebay.so file open
775:44 - on the left hand side or like somewhere
775:46 - and then just make sure you selected
775:49 - that actually don't really have other
775:50 - options but just in case you do you want
775:52 - to select the correct one and then just
775:55 - hit compile let's see what it does let's
775:57 - see what it says let's see if our
775:58 - contract is good to go and ready to be
776:00 - deployed and compilation
776:02 - finished so that's cool and now what you
776:05 - can do is hit deploy and it is already
776:08 - deployed to your local blockchain
776:10 - ganache thingy so that's actually pretty
776:13 - good all right and so here are all the
776:17 - functions that you can do so as I said
776:19 - before so there we go now when you
776:22 - create now when you call this get number
776:24 - of products it's going to say zero
776:27 - interesting so I'm just going to go
776:29 - ahead and clear this output so it's
776:30 - going to be nice and clean and so
776:33 - whenever you call this get number of
776:35 - products that we just defined somewhere
776:38 - in this contract it'll return zero
776:40 - meaning we don't have a single piece of
776:42 - product that's fine let's go ahead and
776:45 - create one so we're going to give it a
776:46 - name my first product one thing you
776:50 - don't ever press command a in here if
776:52 - you do the whole screen is going to turn
776:54 - into this grayish thing and you have to
776:56 - restart remix that's a bug I would guess
777:00 - probably that's what it is don't tell me
777:02 - I didn't warn you next up you want to
777:04 - put it in put a description in so
777:07 - product description uh you know what I'm
777:11 - just gonna go with some dummy stuff so
777:12 - I'm just going to type in description
777:14 - category it doesn't really matter for
777:17 - now because we're just testing it means
777:19 - you wear out now you put things out oh
777:20 - my God where is uh where am I gonna get
777:22 - any major oil from don't worry about it
777:24 - it's just a simple string so you can
777:26 - just type in ing URL cool and then ask
777:29 - for a price
777:30 - now
777:32 - for now you're gonna get away with
777:34 - typing in one or something like that but
777:36 - later on you don't really want to do it
777:38 - because then it will cost an entirety
777:39 - ethereum so just keep that in mind and
777:42 - for rating obviously it's a five out of
777:44 - five so that's pretty cool all right so
777:47 - once you hit transact which basically
777:48 - means like post it or like put it onto
777:50 - the blockchain what you will see is a
777:52 - bunch of like addresses guests used and
777:56 - if it like doesn't look super weird it
777:58 - like naturally feels good your developer
778:01 - instincts tell you that there's no error
778:03 - in here there's probably no error in
778:04 - here and another way to check that we're
778:07 - correct and probably this is the better
778:09 - way to do without having to listen to
778:11 - your instinct is I'm just trying to find
778:14 - the optimal window stuff so I'm just
778:17 - gonna delete it again or clear the
778:19 - output again and if you hit get number
778:22 - of products it should say one
778:24 - did I just write a perfect contract in
778:26 - here and if I was to put in zero
778:31 - that should hey there you go oh my God
778:36 - look at that so that's the mapping
778:38 - that's the mapping so remember when I
778:41 - said maybe I haven't said it but
778:43 - remember when I
778:44 - Senator didn't say it that mappings
778:47 - create their own core functions
778:49 - so that's why we only created a get
778:51 - number of products thing right
778:54 - so when you create a simple variable
778:56 - that doesn't create a call function
778:58 - under the HUD but mappings do
779:00 - and so here what we did is we know that
779:03 - the first product that we put in there
779:05 - is because we're developers we start
779:07 - counting from zero zero one two three
779:09 - this is how we count
779:11 - now first product that we put in there
779:13 - has an ID of zero so this will be
779:16 - waiting for a zero
779:18 - it's about a counter again just put that
779:20 - guy in there call it and then you get
779:22 - back everything that isn't gonna that is
779:25 - that you've just saved into your product
779:28 - now
779:30 - here's everything
779:31 - Let's uh all right so with that said so
779:34 - with that it is time we go ahead and
779:37 - create a function that will allow our
779:39 - users to purchase
779:41 - these items that are listed so purchase
779:46 - I think that's how you write it item
779:49 - nice
779:50 - and that will actually be waiting for a
779:54 - you and ID so we'll have to pass in the
779:57 - ID now this is going to be a public
779:59 - payable and payable mean just means that
780:03 - oh you gotta like there's going to be
780:05 - actual factual transactions going on in
780:08 - there so you gotta basically enable all
780:11 - these functions for the function I
780:13 - realized that sounded a little weird but
780:15 - that's what it is now right in here what
780:19 - we're going to be doing is we're going
780:21 - to require a couple things so
780:24 - what we mean what I mean by requiring a
780:26 - couple things is we need a couple of
780:29 - guard functions or guard Clauses is what
780:33 - I meant and that happens with the
780:35 - require keyword so let's go ahead and
780:37 - get started with that so what we're
780:40 - gonna need is message dot sender we got
780:43 - a double we want to double check the
780:44 - price obviously that it's the correct
780:46 - price is being sent so if the message
780:50 - sender no not the message value
780:53 - is less than no equals four more I
781:00 - actually we should go with equals
781:02 - products.id so here's a tricky thing
781:04 - that's actually just generate the
781:06 - product instance in it so we're going
781:09 - into the product and then we're gonna
781:12 - say storage
781:13 - and then we're going to say product
781:15 - again because this is just going to be a
781:16 - local instance of the product itself all
781:18 - right and then we're just going to say
781:20 - products ID but it doesn't do there's a
781:23 - lot of products I'm gonna go again to
781:25 - the mapping that's products and then
781:27 - check for the ID that's being passed in
781:29 - and then I'm storing that in here
781:32 - and this is literally just the type of
781:35 - that variable and storage is that oh
781:37 - we're going to be reading from the
781:39 - storage so that's uncomment this guy so
781:41 - we're we literally need that the message
781:43 - value is the same as product dot price
781:49 - yeah and if that doesn't happen we will
781:54 - just say invalid amounts and
781:58 - for product or something and that won't
782:02 - tell the user whether they send too
782:05 - little or too much but there's a
782:07 - security feature so we're not gonna
782:09 - bother that now we also want to make
782:12 - sure that the person who's buying the
782:16 - product is not the person who is trying
782:18 - to sell it because that's like like a
782:20 - churning type of thing all right so next
782:23 - up what you want to make sure is that
782:24 - the item hasn't been purchased before
782:27 - how do we do that you ask so remember
782:30 - when we get started the buyer is going
782:32 - to be the zero guy so we also need that
782:35 - that the product the buyer equals that
782:39 - address zero because if it doesn't it
782:41 - means that somebody else has already
782:43 - purchased the item does that make sense
782:45 - so it's product buyer has to be that
782:49 - zero guy because if it isn't that means
782:52 - someone who purchased this item so item
782:56 - has been bought or something like that I
782:59 - don't know I'm just gonna say that
783:01 - whatever that was yeah that's pretty
783:05 - much what we're gonna go with for now
783:07 - and so next up you also don't want to
783:10 - buy your own stuff so message dot sender
783:12 - cannot be equal to product dot seller
783:17 - and so yeah seller cannot buy own
783:20 - product their own product
783:23 - and we could just eliminate all these
783:26 - typos all right
783:28 - so these are basically the guard causes
783:31 - that we're gonna be rolling with for now
783:33 - this should be pretty much enough for us
783:35 - to go for it now
783:37 - at Point you want to transfer over that
783:39 - item but before you do that you want to
783:42 - make sure that the product is paid for
783:45 - so here's where the payable comes in
783:49 - product.seller is going to be the person
783:52 - that receives the amount of money and
783:55 - you want to transfer that amount which
783:58 - is the message the value so basically
784:00 - what this does is this person will get
784:04 - this much in short all right so that
784:08 - being said we should technically be
784:10 - pretty good to go and move on to
784:14 - redeploy this contract onto our test
784:17 - server and then test it out once again
784:19 - so let's do that let's go into our
784:22 - ethereum let's go into our remix guy hit
784:25 - activate and let's see what do we got oh
784:28 - yeah nice the output thing came up so
784:31 - there's like all this like history and
784:34 - stuff I'm just gonna go ahead and delete
784:35 - that because we don't need any of that
784:37 - same for that same for the output
784:39 - cleaning let's just go ahead and hit
784:41 - compile and wait for it to pass oh
784:45 - convolution finished nice so that's
784:47 - pretty good and I'm just going to go
784:49 - ahead and hit deploy so there it is okay
784:53 - there's a couple of things that are
784:55 - going on in here the remix IDE is now
784:58 - recognizing our new contract so get
785:01 - number of products zero that that makes
785:03 - sense
785:04 - so we're gonna say first
785:06 - product to sell or for sale
785:10 - description you're gonna have a category
785:13 - it don't really matter it really doesn't
785:15 - actually image URL and we're going to
785:18 - set I'm just going to say 10 because
785:21 - that's going to be like very visual in
785:23 - our ganache so what we're going to be
785:27 - expecting to do is that this account
785:29 - sells the item for 10 ethereum to this
785:33 - account so I'm expecting that this
785:36 - balance will go down to 89 ethereum and
785:39 - this will go up to 69 ethereum all right
785:42 - let's do that and the rating is five
785:45 - obviously you only sell the best stuff
785:48 - nice
785:50 - so there's that and so now what I'm
785:53 - gonna be doing is just double check that
785:56 - we have the zeroth item there you go
785:59 - price ten noise so how do we purchase
786:02 - with this guy so first of all you want
786:03 - to change the account that's going to be
786:06 - interacting with the contract so we are
786:08 - in purchase mode now and what we want to
786:11 - do now is we're going to say purchase
786:13 - item zero you want to put the zero in
786:16 - there but don't hit don't hit it yet and
786:19 - here oh I think we put the price in way
786:23 - I believe so
786:25 - maybe not let's see that's probably in
786:28 - 10 way we'll see in a little bit so if I
786:31 - just put in tan
786:33 - there you go
786:34 - oh I just deployed it again okay I'm
786:38 - just going to go ahead and transact and
786:40 - it apparently went through now nothing
786:43 - really happened here wait wait we should
786:46 - technically have purchased this item I'm
786:48 - just going to clean my input and let's
786:51 - go ahead and check on the new product
786:53 - again
786:54 - so we see that the seller is still that
786:57 - person but the buyer is this guy and so
787:01 - even though we expected this to change
787:03 - this actually didn't because when you
787:06 - put in 10 here into this price thingy
787:09 - the contract is always talking in or
787:12 - like always expects these numbers or
787:15 - like whenever we're talking about values
787:17 - in way
787:19 - so what is way is like a super small
787:23 - amount basically so we're gonna say each
787:26 - converter ethereum unit converter efesh
787:29 - converter.com so basically what you want
787:32 - to do is put in 10 here and if you wanna
787:35 - if you want something to cost 10 ether
787:37 - you will want to list it at this price
787:41 - it's just like dollars and pennies and
787:44 - cents and whatever so that's basically
787:46 - what it is so you want to copy that guy
787:49 - hat back right here
787:50 - and so to be able to double check what
787:53 - is happening I'm just going to delete
787:55 - everything once again set go back to my
787:57 - original account
787:59 - and compile it again because that never
788:03 - hurts deploy this guy again because that
788:06 - doesn't hurt either and then go back
788:08 - into my eBay and then I'm just going to
788:10 - say product because I'm gonna make it
788:13 - fast description and I Glory nice
788:17 - imgurl and then price I'll just paste
788:20 - that guy there and I hit five on rating
788:23 - transact nice it went through and clear
788:26 - this call number of items we have one
788:29 - item in there zero call that guy and we
788:33 - can see that's the price so that's we
788:36 - can either copy that and paste it here
788:39 - in the value or we can just go ahead and
788:42 - type in 10 but then select ether
788:45 - and then you just want to hit zero there
788:48 - and change the account TD buyer account
788:51 - and now hit transact boom so that
788:55 - apparently went let's see what do we got
788:58 - one here so as you can as I explained it
789:01 - earlier and then put in the wrong price
789:03 - but now with the new price this went
789:07 - down by 10 ethereum and this went up by
789:09 - 10 ethereum so like rewind back if you
789:11 - don't believe me because I literally
789:13 - have video proof of this that's
789:15 - basically how our thing works and by the
789:17 - way if I want to buy it again it is
789:20 - first of all I didn't specify the amount
789:22 - so I'm just gonna put in 10 ether again
789:24 - so it doesn't it cannot send that back
789:27 - but then it says item has been bought
789:29 - and then if I wanna uh check the other
789:33 - error and then I put in yeah 10 transact
789:36 - again
789:37 - yeah item has been so like there's a
789:39 - bunch of checks that are going through
789:41 - here and because the item has been
789:43 - actually let we will not see the other
789:46 - the seller cannot buy their own item but
789:48 - like you can just create a new item try
789:50 - to buy it with the seller and then that
789:53 - will pop up so that is basically
789:55 - creating the contract that I'm testing
789:57 - it out that should technically have
789:59 - given you a pretty good understanding of
790:01 - how this whole thing works and we're
790:04 - going to be interacting with throughout
790:05 - this build so with that said I'm just
790:08 - going to go ahead now and let's deploy
790:10 - this guy
790:11 - all right now that brings us to our
790:14 - contract deployment so let's go ahead
790:16 - and at this point there's another
790:18 - extension that we're uh that we're gonna
790:20 - install so it's called truffle
790:22 - where am I even typing
790:24 - so there it is truffle now this is the
790:27 - exact one you want to install so truffle
790:30 - for vs code this will open up this will
790:33 - add this guy right here and so this is
790:35 - your personal this is going to be your
790:38 - truffle now here what you will need to
790:40 - do is if you have any kind of other
790:42 - projects a link to it or maybe not what
790:45 - you can do is you can just say connect
790:47 - to network and then just hit inferior
790:49 - service
790:50 - and then if it's your first time using
790:53 - this extension it will pop open your
790:55 - your browser and that will let you
790:57 - connect to inferior but however if you
791:00 - don't have that or however if you've
791:02 - used it already it will just fetch all
791:04 - different projects that you've worked on
791:06 - before so in my case I just connected
791:08 - the wrong project again so let's just
791:10 - repeat that one more time
791:12 - so we're gonna go with inferior and then
791:14 - hit eBay clone so now that we have eBay
791:17 - there that will basically enable us to
791:20 - go ahead and deploy everything through
791:24 - inferior's RPC URL to the girly Network
791:27 - now what that will enable us to do is if
791:30 - I go back right here and then I right
791:32 - click the eBay clone and then I go ahead
791:35 - and hit build contract that will pop
791:37 - open my and it literally just said
791:39 - everything is up today yada yada
791:41 - finished okay that's pretty good it's
791:44 - because we already compiled it with uh
791:47 - wait what is it with the remix so I'm
791:49 - just going to go ahead and remove the
791:50 - artifacts folder and now because it
791:54 - already recognized that oh we built it
791:57 - one more time there's another option
791:58 - that we can generate the API which we'll
792:01 - need it's just by typing in trouble
792:03 - compile so there's that and with that it
792:06 - just created a new builds contracts
792:08 - folder and this is your API that we're
792:11 - going to be using later on in the build
792:13 - you know what while we're at it let's
792:15 - just go ahead copy this
792:17 - file and then go back to utils in under
792:21 - next app and then just paste it there
792:22 - it's going to be helpful let's just do
792:24 - that it doesn't take much time now what
792:27 - you want to do next up is go ahead and
792:29 - hit deploy contract
792:32 - okay so once you hit that will basically
792:34 - just give you a bunch of options on like
792:36 - where you can go ahead and deploy it so
792:39 - step one we're going to go ahead and
792:40 - deploy it on girly hey what did I just
792:44 - do employ oh
792:47 - curly there you go now we want to leave
792:49 - the gas price completely alone and empty
792:52 - that's fine and in that at this point
792:55 - you can go ahead and paste your mnemonic
792:59 - or generate a new mnemonic now if you
793:01 - generate a new mnemonic that will not
793:04 - have any kind of a girly eat on it
793:06 - however if you already have a metamask
793:10 - that is connected to the girly Network
793:14 - and you unlock it
793:16 - see I have 7.3 girly eth so that's
793:19 - pretty good I can gen get that mnemonic
793:23 - from
793:25 - going here settings advanced
793:29 - not Advanced maybe security yeah and
793:34 - reveal secret recover a phrase so if I
793:36 - hit that I'm not gonna but if I hit
793:38 - that'll show me my mnemonic and then you
793:40 - can just paste it there and then you
793:41 - will it will generate you this EnV
793:43 - thingy now I've already done that so I'm
793:45 - not going to do it again but if I was to
793:47 - do it it will generate it would generate
793:49 - me a new one like this so I'm just going
793:52 - to use the one that I already saved and
793:54 - when you click that it'll take a little
793:57 - bit of a Time
793:58 - to get started with this thing now you
794:02 - want to definitely check your
794:03 - notifications because that's where this
794:06 - HD wallet provider thingy is going to
794:09 - pop up so you want to install that every
794:11 - the first time when you're deploying
794:13 - something so it'll take a little bit of
794:15 - time and then after that you are going
794:18 - to go ahead I was going to go ahead and
794:19 - deploy everything for you it still looks
794:24 - a little interesting to me
794:26 - so we're just gonna go ahead and try
794:29 - this one more time now
794:32 - oh so the reason why it like doesn't
794:36 - give you anything besides oh yeah it's
794:38 - deployed is because we don't have the
794:41 - migration set up so let's actually go
794:44 - ahead and do that
794:45 - now the way it works is you want to go
794:47 - into your migrations folder and create a
794:49 - new file that you will call one
794:50 - underscore deploy.js or whatever and in
794:53 - here you want to create I'm going to
794:55 - import eBay from the artifacts are DOT
794:58 - choir
795:00 - and then you put in eBay now this has to
795:04 - match
795:05 - with the name of the contract so you
795:08 - want to double check that if you were to
795:10 - be a rebel that uses it for naming I
795:12 - know I used to be one and then you go
795:14 - ahead and say module export async
795:17 - function deployer and then wait
795:20 - deployer.deploy eBay a lot of deploys
795:22 - deploy they play to play all right now
795:25 - you're gonna go ahead I'd like to clean
795:27 - my output a lot of times because it just
795:30 - clogs up and I don't know what ends
795:32 - where and now we can go ahead and hit
795:35 - deploy once again and when this guy runs
795:39 - through and finishes off oh it's still
795:42 - deploying okay so because it's a task
795:45 - that it actually takes quite a lot of
795:48 - time to deploy so that's completely fine
795:50 - it's running through a bunch of blocks
795:52 - so
795:53 - there's that whenever it's done it's
795:56 - going to say deploy succeeded now you
795:58 - want to scroll up to contract address
796:00 - and this is your contract address so
796:03 - just to double check let's go on to my
796:07 - Safari I'm gonna say girly
796:10 - white girly Dot etherskin.io
796:13 - and that's the official ether scan and
796:18 - there you go now as you can see done
796:21 - I just deployed this contract and if I'm
796:25 - not mistaken that's going to be my
796:27 - wallet address let's see yup that's it
796:30 - that's that there you go now you just
796:32 - deploy it to girly now the next app
796:35 - we're going to deploy it to our ganache
796:37 - as well why
796:39 - it's a pretty valid cat question reason
796:41 - why we deployed the ganache and Gurley
796:43 - as well is
796:45 - because we're not going to be changing
796:47 - anything on the contract so like right
796:49 - now we're just going to deploy it to
796:51 - girly and then we're going to deploy to
796:53 - ganache but we're going to use ganache
796:55 - throughout the build and while we build
796:57 - it because girly is a slow Network
796:59 - compared to ganache when it runs on your
797:02 - local network it's always going to be
797:04 - faster it's always going to be a better
797:06 - developer experience and I want to speed
797:08 - through this build at the end or after
797:10 - the tutorial feel free to go save this
797:13 - somewhere like you want to definitely go
797:15 - ahead and save it in your constants and
797:18 - then be like oh I don't know you want to
797:21 - be export const
797:23 - sport cons contract address or something
797:27 - like that so export comes to dress and
797:30 - then you just want to put it there but
797:32 - I'm just gonna comment it out for now
797:34 - because we're going to once again as I
797:36 - said deploy to ganache and then after
797:39 - the build is done and then you take down
797:41 - ganache you can just swap it swap out
797:43 - the address and then just make sure you
797:45 - connect the girly and you should be good
797:46 - to go switching Networks
797:48 - so once again I'm going to go ahead
797:51 - delete or empty out my output and then
797:55 - go ahead and deploy this guy now I'm
797:57 - going to type in local
797:58 - and it should be good and as you can see
798:01 - and as you can see it is like way faster
798:04 - like it's already done
798:05 - this is why we're gonna use you know so
798:08 - now I'm just going to type in export
798:09 - cause address once again bam and then
798:13 - you can put early after this and oops
798:18 - ganache after this and so that way
798:21 - you're like not gonna mess up let's play
798:23 - now the next thing that we will be doing
798:26 - is you should have already installed
798:29 - with a CLI you didn't have to do
798:31 - anything but you already have access to
798:33 - web 3 from web free you want to go ahead
798:38 - and employ import the ABI from this Json
798:41 - let's do that too so what you will say
798:44 - is contract ABI from ebay.json
798:48 - nice so next up what we will be doing is
798:53 - going to say con
798:56 - consume from window so basically this is
799:00 - just a structures ethereum from window
799:02 - window is literally all the code that's
799:04 - running in your browser and then
799:05 - ethereum is just a part of it so when
799:07 - you destructure it you will have an uh
799:10 - you will have a variable called ethereum
799:11 - all right next you're gonna say if
799:15 - ethereum
799:16 - but not with an exclamation point so if
799:20 - you have ethereum you want to go ahead
799:21 - and say const web 3 equals new web3 and
799:25 - then put in ethereum right there and
799:28 - then you want to return new
799:30 - web3. that exactly this new
799:35 - web3.east.contract and I'm passing the
799:37 - ABI and the address
799:39 - now the one thing sometimes people
799:41 - forget is the ABI file itself has a
799:46 - bunch of things that are going on in
799:48 - there so that's contract name there's
799:49 - the ABI that's exactly what and then
799:51 - like there's all this metadata and the
799:54 - random stuff that's going on yeah like
799:56 - all this stuff that like your app
799:59 - doesn't even need to worry about now
800:01 - option A what you can do is delete all
800:03 - this stuff but I prefer not to do that
800:05 - and instead it's just an easier solution
800:08 - to just contract AP edit API and that
800:11 - literally takes care of the entire thing
800:13 - and and that's it you're good to go so
800:16 - with that said that is basically the
800:19 - deployment and now let's go ahead and
800:22 - create a nice little connect metamask
800:25 - button alright so I was told that this
800:28 - is the time that we go ahead and connect
800:30 - our metamask to this application so to
800:33 - do that you want to go into your app.js
800:35 - file now this is a bunch of things
800:37 - already imported
800:39 - so now we're just going to import a few
800:43 - more things so first of all
800:45 - we're going to be importing is just a
800:47 - Style Style file installing so from
800:50 - rainbow kit you want to go ahead and
800:53 - import styles.css it's their own
800:56 - specific styling and then you want to go
800:58 - ahead and import chain I'm going to
801:00 - import
801:01 - configure chains
801:04 - you also want to import create client
801:08 - create client yup and then wag me config
801:13 - here from black me
801:16 - you thought it was going to be rainbow
801:18 - and then uh that's pretty much it oh
801:21 - wait no there's one more thing
801:23 - so we're gonna be importing get default
801:27 - wallets
801:29 - and Ray bow kit provider and the Dark
801:34 - theme from that rainbow me slash rainbow
801:39 - kid and then you want to import two more
801:41 - things one of them is going to be the
801:43 - infuro provider from wag me
801:48 - slash
801:50 - provider slash infuro and you also want
801:54 - to import the Json RPC Provider from the
802:00 - same place or like almost
802:02 - now that suggestion was not good it's
802:05 - actually Json RPC like that so not Dash
802:08 - RPC okay so once you have these now
802:12 - we're gonna go ahead and set up a bunch
802:14 - of stuff now with that done let's go
802:16 - ahead and configure all the stuff that's
802:17 - going to be allowed as a user so like
802:20 - basically all the chains that the user
802:22 - will be able to connect to and all the
802:24 - providers for those chains we're gonna
802:26 - have chains and we're gonna have Pro VI
802:30 - and this is like not from anymore so
802:33 - we're gonna have configure chains and we
802:36 - are actually going to have two rays in
802:39 - here
802:40 - so in the first array we're just going
802:42 - to say chain dot girly and chain Dot
802:46 - localhost
802:48 - that's where we're gonna be coding and
802:51 - the next stop we're gonna have the
802:53 - inferior provider which is going to have
802:56 - an API key and for a little bit I'm just
803:00 - going to leave it empty but yeah and
803:03 - then we also want to make sure that the
803:05 - priority on this one is the highest so
803:07 - basically there's going to be two
803:09 - providers in here
803:10 - because we imported two there's gonna be
803:12 - inferior provider and there's going to
803:13 - be RPC the Json RPC what we're going to
803:15 - do is whichever chains a user selects
803:18 - you want to make sure we use infuria
803:20 - primarily however if they don't support
803:22 - that specific chain then we're gonna
803:25 - have this Json RPC which is just
803:27 - literally the most custom RPC Rider out
803:30 - there so next up let's configure that
803:33 - secondary provider and it's going to be
803:36 - the Json RPC provider and we're gonna
803:39 - have to put in a few things so first of
803:42 - all priority two that's the secondary
803:45 - provider in this case and then our RPC
803:48 - is going to be we're going to pass the
803:50 - chain and we're gonna go ahead and tie
803:54 - and HTTP and then once again you want to
803:58 - put in this specific RPC address I'm not
804:02 - even gonna say it out because I didn't
804:05 - even want to say it out and that should
804:07 - basically wrap up all the providers that
804:09 - we got out here so these will be used in
804:12 - a little bit now I just want to like
804:14 - jump back right in right here uh to the
804:17 - inferior one if you remember right at
804:21 - the very beginning of this app we
804:23 - actually saved our inferior API key here
804:25 - in the dot EnV so you want to go ahead
804:29 - copy that name and then come back right
804:32 - here and then you want to say cross dot
804:35 - EnV Dot and then just paste whatever
804:38 - name you gave it and um it should be
804:41 - good to go now one more thing you want
804:43 - to always restart the server so you just
804:48 - want to run your end up again and that
804:50 - will that will allow the application to
804:52 - read the envathon it probably already
804:55 - has but just in case it doesn't
804:57 - sometimes it helps and it's just like a
805:00 - safety measure okay
805:03 - so next up what you will want to do is
805:06 - you want to create a new cost which is
805:09 - where we will
805:11 - destructure connectors from like errors
805:15 - and it equals get default
805:19 - wallet like that and now we're going to
805:22 - say app name it's not even Instagram
805:25 - it's eBay
805:27 - and we're gonna say app
805:29 - name eBay and then we're gonna say we're
805:33 - gonna just literally just gonna pass in
805:35 - all the chains we're just gonna pass in
805:37 - all the chains that will be provided
805:38 - here so basically fees are going to be
805:40 - the only change the user will be able to
805:42 - choose from when they are interacting
805:44 - with our app and then next up we're
805:46 - gonna have a whack me config
805:49 - and that'll be a create CL and then
805:52 - we're just gonna go ahead and create the
805:54 - client with this specific function and
805:56 - then we want to pass it autoconnect make
805:58 - it true you want to pass in right after
806:01 - that connectors and then you want to
806:04 - pass in provider and that should pretty
806:07 - much wrap up our setup for this for this
806:12 - metamask connection now there's a couple
806:15 - more things it's not that easy so come
806:17 - here like I'll just command x on it so I
806:20 - can just paste it back and whatever so
806:22 - once again copy that yep and then I'm
806:25 - going to say wag me config
806:29 - and say client
806:31 - and I'm passing Wegman config hey config
806:35 - like that
806:36 - so that closed nice
806:38 - and now I want to say rainbow kit
806:40 - provider and
806:44 - and then theme dark theme that's pretty
806:46 - cool and you can also like
806:48 - you can also enable cool mode now in
806:52 - that case you will probably have to
806:53 - import it yeah so let's import cool mode
806:57 - maybe you don't have to interesting okay
807:00 - we'll see if we have to import cool mode
807:03 - anyways it's just like a nice animation
807:05 - that's always like it's not that
807:06 - important but before everything you want
807:09 - to make sure you pass in like into the
807:11 - chain selector like all the chains
807:13 - that's pretty much how it's supposed to
807:15 - be look like that's pretty much how it's
807:17 - supposed to look like and now in between
807:19 - all this you just paste that component
807:22 - thingy right back and now we should
807:25 - technically have access to all the
807:28 - connection now there's one more thing
807:30 - that we will need to do
807:33 - and that's going to be in our index.js
807:35 - file now in here you want to go ahead
807:39 - and import connect
807:43 - button from pretty look at Rainbow meet
807:47 - alright so we got that copy that guy and
807:50 - then right under here online 30 line 20
807:55 - 30. you want to put in connect button
807:57 - and that should enable yup there you go
808:01 - there is your connect button
808:04 - so that's pretty much that's pretty much
808:07 - the connection I'll show you guys what
808:09 - cool mode is if it enabled itself or if
808:12 - it didn't we'll see hit that that was
808:15 - cool
808:17 - that little animation that was cool man
808:19 - I'll show you once again because it's
808:21 - see and now it won't do it because I
808:23 - canceled it once but there you go that's
808:25 - cool mode hit retry and hit connect
808:30 - and there you go that is your metamask
808:33 - connection you just build it it is done
808:36 - it is so done it couldn't be any more
808:38 - done it is the most done metamask
808:41 - Connection in the done metamask
808:42 - connections history whatever leave it
808:46 - so with that said we're pretty much good
808:48 - to go to get started connecting the
808:51 - actual contract to the front end with
808:53 - that said I'll see you right there
808:55 - okay so it is time to go ahead and start
808:57 - connecting our stuff so we're gonna be
809:00 - doing mainly all kinds of Connections in
809:03 - the context so let's go ahead create a
809:05 - contact stuck folder and then inside
809:08 - there if you want to create a context.js
809:11 - file and uh let's go ahead and start
809:14 - importing stuff so we're in one
809:17 - definitely import create context we want
809:19 - to import you state use effect and use
809:25 - call
809:27 - contactor like that from react all of it
809:30 - and then while you're at it go ahead and
809:32 - import use account from wagme which is
809:37 - just super nice and easy way to get all
809:41 - the Account Details so yeah there's that
809:43 - and then when I import web3 go to
809:46 - capital W from web3 with a not Capital
809:49 - love lead and then you also want to go
809:52 - ahead and import create tracked from
809:55 - utils and constants which is by the way
810:00 - yeah this exact uh function that we
810:05 - created earlier
810:07 - so we already built that
810:10 - so I'm gonna type it you want to go
810:13 - ahead and actually start creating the
810:15 - contract over here no context so you
810:18 - want to say I have context and go ahead
810:21 - hit say create context and then next up
810:24 - export const and it's going to be app
810:27 - pro provider and that will have this
810:31 - children thing in between children
810:34 - that's pretty good and then create the
810:37 - function itself
810:39 - now What's Happening Here I think okay
810:42 - there you go and then that will
810:43 - basically return stuff so let's go ahead
810:46 - and return actually before we return
810:47 - anything let's do the test file or the
810:51 - test variable equals whatever and now
810:55 - we're gonna return stuff
810:58 - and you want to say app context dot not
811:01 - contest geez dot
811:05 - provider yeah and then value
811:09 - it's like interview would say I'm going
811:11 - to say test and close that bad boy
811:14 - and then just pop in Shield right there
811:18 - so that technically should be pretty
811:22 - much good to go in terms of a context
811:24 - thing now what you want to do is just
811:27 - make it like you wanna we're gonna set
811:29 - up one more thing that's gonna make it
811:30 - just as much more easier so you want to
811:33 - say export cons to use uh context just
811:37 - like it suggests right there and uh you
811:40 - just want to return use context and then
811:43 - passing app context basically what that
811:45 - will allow you to do is you will have to
811:48 - import I believe less and it would just
811:51 - make made a hook out of it that's
811:53 - literally what happened okay let's go
811:54 - back to our app.js file and and in our
811:58 - app.js file what we will do next up is
812:02 - go ahead and import the app provider so
812:05 - I'm just going to go up here and make it
812:07 - like separate so there you go app
812:08 - provider and this bad boy I'll just put
812:12 - it like right here like right around the
812:15 - component actually we should be putting
812:17 - it outside of rainbow kit reason is a
812:20 - rainbow can might use stuff that is
812:22 - available in the provider so you want to
812:25 - allow that connection to happen and
812:29 - that's basically what did I do app
812:33 - contest for real
812:35 - okay that should have fixed it nice
812:39 - and just to test out this context thingy
812:43 - you want to open up your console and
812:47 - then inside of index.js you will you can
812:51 - go ahead and import use app contacts
812:54 - from
812:56 - context like
812:57 - and then down here just go ahead and
813:00 - destructure test from the use up context
813:04 - thingy and then you'll just want to go
813:06 - ahead and console.log
813:09 - past and if it says test in here our
813:14 - console as it does and my friends you
813:17 - little just created the perfect context
813:19 - then you graduated to move to the next
813:21 - step of this tutorial so congratulations
813:24 - on that if not just double check that
813:26 - everything that we set up here in the
813:28 - context and in the other JS file is
813:33 - correct and then let's move on I'll
813:36 - before we actually move on I'll just
813:37 - remove all this test related stuff
813:39 - because we don't need any of that you
813:41 - can close the app.js file remove that
813:44 - guy and then for a little bit we're
813:46 - going to be working inside our app
813:48 - provider we're inside our contacts we'll
813:50 - build a couple of functions and it will
813:52 - be done in a matter of no time I'll see
813:55 - you soon
813:56 - time to sell some products and what
813:58 - we're going to be using for that is our
814:00 - context so let's go ahead and get
814:03 - started setting a few things up here
814:06 - so what you're what we're going to do is
814:08 - we're going to create a couple of you
814:09 - States so there's going to be a contract
814:11 - set con track yeah like that and then
814:15 - you stay snow and then we're gonna say
814:17 - we're going to have a user use user
814:20 - address
814:22 - set user address just like that might as
814:26 - well
814:27 - save it from typos and then one more
814:29 - which is going to be prop doc handset
814:33 - products these are all going to be used
814:35 - later on in the app first of all this is
814:37 - going to be used this is where we're
814:38 - going to be storing our contract
814:40 - instance that we are generating with
814:42 - this guy next up we're gonna have a user
814:45 - address which is we are going to be like
814:47 - saving like straight away so let's
814:51 - actually do that like right now so cons
814:53 - address and equals use account that's
814:57 - the structure that bad boy and while we
814:59 - are at it let's go ahead and set up a
815:02 - use effect that'll actually see it so
815:05 - whenever address changes what we're
815:07 - going to do is say set user address to
815:10 - address and uh we just addressed this
815:14 - situation
815:16 - all right now what we're gonna do is
815:19 - before we move any further we should
815:22 - techno we should just go ahead and set
815:24 - up the contract situation as well so set
815:26 - contract open this guy and then create
815:29 - we don't pass in data just because
815:31 - that's not that it is that's a different
815:33 - address we have access to that address
815:35 - so once that once this guy returns
815:39 - its thing it will be set into this
815:42 - contract thingy so basically every time
815:45 - you open up the app you will have access
815:48 - to all the contract connections
815:50 - immediately
815:52 - so
815:53 - that is good that's pretty good we are
815:56 - good there now you want to go ahead and
815:59 - create a function which we'll call sell
816:01 - item now
816:03 - actually let's just go ahead and let's
816:05 - figure out what we're gonna be what are
816:08 - we gonna need for this so they're
816:09 - creative so we will be calling this this
816:13 - new product thing function and we will
816:16 - have to pass the name description
816:18 - category email price email image URL and
816:23 - rating always we'll have to pass them in
816:25 - so we'll have to account for all that
816:28 - I'm just going to leave this on the side
816:29 - just like a little peek like reminds us
816:33 - for that okay let's do this with an
816:37 - async function because this is going to
816:38 - be an acing harness situation
816:40 - and from the front we're gonna pass in
816:43 - name we're gonna pass in description
816:45 - we're gonna fast in cat eye three I'm
816:49 - gonna pass an image URL we're gonna pass
816:53 - in price hand rating so basically
816:57 - everything
816:58 - close that bad boy little arrow thing
817:01 - and open the paren now thank you
817:04 - prettier for making my code look nice
817:07 - now you want to make sure that before
817:09 - any kind of interaction happens with the
817:11 - contract there is a contract actually
817:13 - exists so return it's like card clause
817:17 - and then if that checks out you want to
817:21 - have a try catch functionality which
817:24 - will catch any kind of error that
817:26 - happens and then just console logs it
817:28 - out console error actually let's just
817:30 - put that there and then we can forget
817:32 - about that so error handling nice next
817:35 - up try
817:36 - so what we're going to be doing is
817:38 - immediately because the youth remember
817:39 - what we did with the the contract we
817:42 - expected that it was going to be in
817:44 - ethereum or in ether but that's not
817:47 - reality contract works with way and
817:50 - nobody is going to type up that many
817:52 - serials so
817:54 - we're gonna say price in way and we're
817:57 - just gonna convert it and we're going to
817:59 - be like okay and luckily web3.js has
818:03 - what is built in so we can call that
818:05 - web3. udles the two-way thing function
818:08 - let me just pass it in price and then
818:11 - happen pass in the the currency that we
818:15 - want it back in so in this case it's
818:17 - ether sorry the other way around we pass
818:19 - in the prize in ether and because it's
818:21 - ether we tell them like what's the
818:24 - initial values
818:26 - currency and because it's ether it's
818:28 - gonna be stored in way right here and
818:32 - then I'm gonna go ahead and wait
818:33 - contract methods and this is where we
818:36 - actually go ahead and call the list new
818:40 - product function and so that requires
818:44 - once again name requires description
818:47 - what was that
818:49 - description
818:50 - requires category probably everything
818:53 - that that we have here
818:55 - description
818:57 - like
818:58 - I could type it out once but I can type
819:00 - it out for the second though that's fine
819:02 - name description category image URL
819:06 - price rating let's just double check it
819:09 - here as well I think we should be pretty
819:12 - much good to go here now
819:14 - oh my God copilot is so nice it like
819:17 - added this part as well so I'm just
819:20 - gonna explain it now so far this is how
819:22 - far we went and so because we are
819:25 - creating and adding data onto the
819:28 - blockchain like we want to store
819:30 - something on the blockchain you gotta
819:32 - pay for it
819:33 - all right nothing is freeing the web 3
819:35 - wood so before we can actually wrap this
819:37 - function up and as copilot was already
819:39 - suggesting we have to send them some
819:42 - ether and it's going to be coming from
819:45 - the user address which we already have
819:48 - saved which we already have saved it in
819:52 - in here
819:53 - and then there's a couple more things
819:54 - like you want to set the gas fees to
819:57 - this this number which is three and then
820:02 - this is basically three million all
820:04 - right and then I'm gonna set guess price
820:07 - to null these are like optimization
820:10 - stuff so it's like the transaction is
820:13 - going to be more optimized nice that's
820:16 - basically what we are cooking with right
820:19 - now and that should technically list
820:22 - every new item that we throw at it let's
820:25 - go ahead and connect this to our
820:28 - create button right here
820:31 - so far actually not even the create
820:32 - button I was wrong this list item thing
820:34 - so if you check this should technically
820:37 - already work because that's how our
820:39 - project comes so you want to go ahead
820:40 - and go into the model file
820:43 - model I'm gonna go ahead and go into the
820:46 - modal file
820:47 - so once you entered your modal file
820:50 - you're going to go ahead and import the
820:52 - use of context thingy and then
820:55 - destructure cell item on it now
820:59 - if you actually have long brain cell
821:01 - like I don't if we don't export this
821:05 - from our contacts we're not going to be
821:07 - able to import it anywhere else so
821:10 - all right we are we are all here to to
821:13 - learn and improve improve myself
821:15 - included so you've got the sell item
821:17 - function oh that's pretty cool here's
821:20 - our handle submit function which is
821:22 - already connected to the button nice
821:28 - and so you want to do is before oops
821:31 - before we move any anywhere any further
821:34 - I'm going to go ahead and say event dot
821:37 - prevent default and what that will do is
821:42 - like it will prevent the website from
821:45 - refreshing whenever you hit that button
821:46 - sometimes you like need it it's like a
821:49 - reacting so I'm gonna be using that and
821:51 - so next up if there is no name if any of
821:55 - these fields that are required basically
821:57 - for this transaction to go through
821:59 - meaning name it the description category
822:02 - price and or rating any of them those
822:06 - are the pipes though all of them say not
822:08 - name or not description like that's how
822:10 - you like read it out if any of them
822:12 - don't exist or return a falsy value
822:15 - which is an empty string is a falsy
822:17 - value then we're gonna display a toast
822:20 - error message which we already set up
822:22 - for you and we're just gonna return it
822:24 - and we don't even want to like continue
822:27 - the process so see how cool is that
822:30 - that's pretty cool if you ask me so
822:33 - that's there's that now if however
822:37 - we're good on that end
822:39 - and that doesn't happen else
822:43 - or you can just say else we can say
822:45 - toast dot promise and the reason why
822:49 - we're doing tools that promise is not
822:51 - like a regular JavaScript promise is
822:53 - because the toasting is going to keep
822:55 - loading as long as our promise is not
822:59 - successful so we're gonna have the toast
823:03 - handle our async function and then our
823:06 - async function as long as it check lasts
823:08 - as soon as it checks out our toast is
823:10 - going to turn a little nice check mark
823:13 - so let's do that
823:14 - so toast I promise and we're going to
823:16 - say sell item and pass in all the stuff
823:19 - that we need to uh need to pass in so
823:23 - name description category image URL
823:26 - and then next up we're gonna pass in a
823:29 - little bit of a function and that'll
823:31 - basically just change the toast message
823:33 - all the time so as long as it's loading
823:35 - we're gonna be like listing in progress
823:40 - please wait and uh maybe an hourglass
823:44 - Emoji or something that like makes it
823:46 - nice
823:47 - and then next up we can just Define the
823:50 - success and then give me like okay item
823:53 - listed successfully and if there's some
823:56 - sort of error and air listing item
823:57 - please try again whatever and with some
824:00 - nice little Emoji play we should be good
824:03 - to go so let's go ahead and try that it
824:06 - should into your work if it doesn't and
824:08 - probably made a mistake somewhere along
824:10 - the way all right so with that being
824:12 - said let's go ahead and search for a rug
824:14 - and let's just grab an image whatever
824:17 - this looks pretty good this is a puffy
824:19 - rug
824:20 - shout out puffy mattresses for providing
824:23 - us with the image
824:24 - this is free marketing for them nice so
824:27 - we're just gonna call it a puffy rug
824:31 - and once again shout out for puffy
824:34 - mattress
824:36 - puffy mattress
824:38 - all right
824:39 - let's go ahead and upload this image
824:41 - right there
824:42 - shout out internet speed nice you can
824:45 - crop it down whatever don't even worry
824:48 - about that okay so it immediately says
824:50 - set image URL is not defined that's
824:54 - interesting okay so that means that for
824:56 - whatever this you state is like not set
824:59 - up interesting okay meaning that some
825:05 - stuff was like
825:07 - hello now there it is what do you mean
825:09 - it's not there and you want to
825:12 - definitely put that guy in there so FD
825:15 - IMG URL doesn't exist that should make
825:18 - it fail too however we are passing it in
825:20 - here yeah this is the like one of the
825:22 - biggest drawbacks of using stuff like
825:25 - copilot because you'll just look over a
825:27 - couple of mistakes that you're making
825:29 - along the way
825:30 - I mean I'm glad we like have this here
825:32 - that's helpful all right all right let's
825:34 - start again puffy rug
825:37 - and Shout Out puffy mattress oh yeah
825:42 - Double T guess who failed their English
825:44 - classes not me though
825:47 - put that guy there shout out internet
825:49 - speed
825:50 - and hit done okay there's no issue there
825:54 - and then let's go type in perfect
825:58 - four rug pulls
826:01 - huh pun intended category rug whatever
826:04 - price this is how when you like
826:06 - literally want to start becoming more
826:08 - and more careful with what you put in as
826:11 - a price and also want to like switch to
826:14 - the localhost networks like ganache nice
826:18 - because otherwise it will try to put
826:20 - them to girly but we're not but this
826:22 - address is not on girly so it wouldn't
826:24 - fail again so once again prize okay
826:27 - actually here you can put like bigger
826:29 - numbers I'm just gonna go with 0.1 and
826:31 - then rating obviously is a 5 out of five
826:33 - go ahead hit confirm on that guy and
826:36 - item successful listed now the only
826:39 - problem is we don't see yet so let's go
826:44 - ahead and do that
826:45 - go ahead and make that happen
826:47 - all right so we got the selling done
826:50 - this is now time we go ahead and display
826:53 - all the items that are like listed for
826:56 - sale
826:57 - so let's go back right here as we can
826:59 - see the product state is like still like
827:01 - empty and if we go back to index
827:05 - we also have this dummy products array
827:08 - so like the app doesn't break so what
827:10 - I'm going to be doing now is I'm going
827:13 - to
827:13 - destructure products from use up
827:17 - contacts
827:18 - and that way I technically change that
827:20 - dummy empty array to the array that we
827:23 - are going to be fetching from and let's
827:26 - get rid of all those runs and stuff like
827:27 - that okay that's fine there
827:29 - so now it says products map it says
827:32 - undefined okay that's because
827:35 - wait oh of course duh once again if you
827:39 - don't export you can't import it's like
827:41 - a pretty good all right there you go now
827:43 - here is a way it's got a little bit has
827:45 - gone away all right and so to get
827:47 - started fetching we are going to be
827:50 - creating a new function that is going to
827:52 - go ahead and get all the items for us
827:57 - so how's it going to look like
828:00 - all right let's let's do it like right
828:02 - under here so it's gonna be get all
828:05 - items and it's gonna be an async
828:08 - function nothing to input and uh yeah so
828:12 - before we do anything yeah if there's no
828:15 - contract that thus far it's correct
828:18 - there's no contract then we should just
828:20 - like return and then like you can add
828:22 - like custom toast messages whatever like
828:26 - error getting items whatever I'm not
828:29 - gonna do it because
828:30 - take up time and I already showed you
828:32 - how to and then next up what you
828:34 - wouldn't do is like before all that like
828:37 - little before anything
828:39 - set products
828:41 - to empty the reason for that is if there
828:45 - is no contract then you want it to one
828:48 - the products to be like a safe empty
828:52 - array that like will not break the map
828:55 - and if the contract changes you want to
828:58 - wipe out all the old stuff from the old
829:01 - contract and then the new stuff can come
829:03 - in and whenever you refresh it we're
829:06 - going to be using the dot push method
829:09 - yeah I believe that's an array method so
829:11 - we're going to be using the dot push
829:12 - method and we don't want to mess our
829:16 - things up and no one are the one that
829:18 - same product to show up twice or three
829:20 - times or whatever
829:21 - okay so with all that out of the way
829:24 - we're gonna have a nice little
829:27 - try catch function next up what we're
829:30 - going to be doing is say cons product
829:32 - count equals old way oh so basically
829:37 - what we're going to be doing
829:39 - just walk you through at a high level
829:42 - let's go to the so far is we're going to
829:44 - go ahead and fetch this
829:46 - that way we are going to know how many
829:48 - products are there
829:49 - and then what we're going to do then is
829:51 - we're gonna have a loop that goes
829:53 - through this mapping and fetches each
829:55 - item one by one so what we're going to
829:57 - do is say contract meth thirds Dot and
830:01 - what was the
830:03 - function name again it was get number of
830:06 - products so that's what we want to call
830:09 - I don't need all that random file so
830:11 - let's just paste that there function
830:13 - thingy call and call it and you sh which
830:17 - should be good so we have a number there
830:20 - the away thing is going to
830:23 - hold back the line until that result
830:25 - itself so we should be good there now
830:28 - what we're going to be doing is we're
830:30 - going to say start with a friend like
830:32 - plain and simple for support loop we're
830:35 - just going to say index equals zero
830:38 - colon no semicolon until index is
830:42 - smaller than
830:43 - product count some icon and index Plus
830:49 - and then open close butter curly braces
830:52 - are there
830:53 - and then it's a const product equals oh
830:56 - wait contract
830:58 - dot methods Dot and
831:02 - which one are we going for I don't know
831:04 - which one are we going for not methods
831:07 - and let's see which one are we getting
831:09 - because we're going to be using the
831:11 - built-in function of this methods thing
831:13 - as if you remember the when we did the
831:16 - ethereum remix stuff let me just show
831:17 - you yeah I connect that guy
831:20 - so if you remember
831:22 - we had this guy this is what we're going
831:25 - to be using all right based on that
831:28 - we're going to say products and then
831:30 - pass in a bunch of things so what we're
831:33 - going to be doing is say product and
831:36 - then pass in index and non-pass and then
831:38 - just call it that should be our product
831:42 - and so now we're going to format this
831:45 - because if you remember we get back like
831:47 - we get back all the data like twice so
831:50 - there's no need for that so we're going
831:52 - to format it a little bit so just it
831:54 - just looks a little nicer actually let
831:56 - me just go ahead and console log the
831:59 - product just so you remember what I was
832:01 - talking about
832:02 - oh if nobody calls this function it's
832:06 - not going to run
832:07 - plastic should set up a other use effect
832:11 - like that paste that bad boy there call
832:14 - it and whenever contract
832:18 - changes we're going to call that now if
832:21 - contract doesn't exist this whole thing
832:23 - is going to kick it off and we won't
832:25 - have any kind of Errors so let's see
832:26 - what we got let's refresh this guy and
832:29 - uh there we go there is our item so this
832:32 - is what we are going to make a ton nicer
832:35 - like it just looks nasty how there's
832:37 - like zero one two three four whatever
832:39 - nah this is not good so we just want to
832:42 - strip out this piece of the object
832:46 - and then just like make a nice looking
832:48 - array out of that so let's do that now
832:51 - and that's why we are creating this
832:52 - formatted product thingy so we're going
832:54 - to create a new object which will have
832:57 - an ID which is going to be a product ID
833:00 - we're gonna have a buyer I said buyer
833:04 - which is going to be a product a buyer
833:06 - fire like that
833:08 - and then the seller product seller name
833:13 - description we're gonna have category
833:16 - image URL and price now remember
833:22 - in the solidity contract we are only
833:25 - working with way numbers so there's a
833:28 - final there are like multiple ways you
833:29 - can convert Bitcoin way and if ether I
833:32 - just prefer doing it on the front end
833:33 - just because like the audience and
833:37 - ethereum and Soldier is like soup like
833:40 - in the early days the baby steps is the
833:44 - dawn of web3 so let's just stay where we
833:46 - are like more comfortable with stuff and
833:49 - so we're going to convert everything on
833:51 - the front and plus web 3.js is like
833:54 - making it like way too easy like it
833:55 - should be like almost illegal at this
833:57 - point anyways
833:59 - we're getting back the price in way and
834:02 - we want to convert it into ethers or
834:04 - ether so that's what we're doing here
834:06 - and so that's pretty good and then we
834:08 - have one more thing which is the grading
834:11 - now let me actually console lock the
834:14 - actually because I'm lazy I don't want
834:19 - to type all that
834:20 - formatted formatted product nice let's
834:24 - see the difference between the two so
834:26 - here's the ugly Bond we don't like that
834:29 - and then number two ah so much nicer
834:32 - there you go so you're welcome that's
834:35 - why you're using random stuff random
834:37 - like formatted formatting things in the
834:40 - middle of our context
834:41 - and then um
834:43 - yeah once that's good to go what you
834:46 - want to do is say set products
834:48 - and my assistant Mr co-pilot is helping
834:53 - me with this basically what you want to
834:55 - do is get these set products function
834:57 - from this use state that keeps track of
835:00 - the previous actually it shouldn't be
835:03 - previous product I don't like when it
835:04 - like calls it like that
835:06 - so we should just call it previous state
835:09 - all right it should be previous state
835:12 - there you go that in theory show us
835:16 - all the stuff we got now one interesting
835:19 - thing though
835:20 - why does it say item but I haven't even
835:23 - bought it what do you mean I bought it
835:26 - it's probably just hooked up to a
835:27 - template function so don't even worry
835:30 - about it okay so you might be wondering
835:32 - David what is going on here in the first
835:35 - place why am I not seeing all my images
835:38 - like I literally uploaded them and if
835:41 - you still have the console lock turned
835:42 - on yeah this is undefined but
835:45 - actually I just spend a little bit of a
835:47 - time and traced it back and we are doing
835:50 - everything correctly except for one
835:51 - thing now if you look at it like how are
835:55 - we even save saving this stuff or how is
835:58 - it even being saved it is imgurl and we
836:01 - are trying to destructure image URL once
836:04 - again
836:05 - we looked it over or like I personally
836:06 - looked it over because I'm using copilot
836:09 - so again
836:11 - there's a lot of negatives to it it's
836:13 - not gonna put uh put us out of our job
836:15 - I'm pretty sure after these two I'm
836:18 - pretty I'm feeling pretty safe let's
836:20 - refresh let's see what do we got now we
836:22 - have the image URL now the only question
836:25 - is why do we not see it it's probably
836:28 - because
836:29 - we should be saving it like that all
836:32 - right there you go
836:33 - so with that little two literal two
836:37 - changes that we just did from image to
836:39 - IMG which is a story for image once you
836:42 - change that it apparently starts working
836:44 - so that's how we set up the template I
836:47 - completely forgot about it and we also
836:49 - are using copilot to help me out with
836:51 - typing so there's that now with that all
836:55 - said and done it is time we go ahead and
836:58 - purchase these items and we're
837:00 - technically done with the build
837:03 - see there
837:05 - all right we actually got to the very
837:08 - final part of this build which is
837:10 - purchasing
837:11 - these items so before we actually get
837:14 - into that I just want to clear out all
837:17 - the console logs if you've watched any
837:19 - of my other videos you know that um I
837:21 - don't like them like it's good as long
837:24 - as we're building stuff but then like
837:25 - gets annoying and clogs up my consoles I
837:28 - like to keep that clean I'm a clean dude
837:31 - we are going to be creating a new
837:34 - function down below here which we're
837:36 - gonna call by
837:38 - product which is the byproduct of me
837:41 - being funny hey anyways we're gonna pass
837:45 - in this ID which is going to be the
837:47 - product ID that's going to be coming
837:49 - from the front end so let's uh let's do
837:53 - that oh why is it oh there's the error
837:55 - okay so with that said now we also want
837:59 - to have we want to get the usual card
838:01 - Clause so if there's no contract then we
838:03 - just want to return
838:05 - with all the toasting stuff so again a
838:09 - usual try catch and then let's catch the
838:11 - error and then console.air.air
838:15 - I hope that made sense that was like a
838:16 - pretty good son pretty good sentence if
838:19 - we have the contract we are going to go
838:22 - ahead and try to get the prize so what
838:25 - we're going to be doing is here at what
838:28 - the price is we need to know how much
838:30 - the product costs all right and we don't
838:33 - really trust the friend to tell us what
838:35 - it costs because that could be
838:37 - manipulated pretty easily so instead
838:41 - what we're going to do is we're just
838:42 - gonna go ahead and fetch the fetch the
838:44 - contract again for it so we're going to
838:46 - say contract dot methods dot product
838:49 - yeah product ID and then we're just
838:52 - going to call it and then once we call
838:54 - that
838:55 - we will as technically isn't the price
838:58 - but original you know what let's just
839:01 - actually name it so product so that will
839:04 - be the product and then we will use that
839:07 - to get the price all right so what is
839:12 - going to happen now is we're going to
839:13 - say oh wait and then we're just like
839:15 - straight into calling the purchase
839:17 - Method and so let's see how we actually
839:20 - named it here so it's going it is called
839:23 - purchase item now purchase item and then
839:27 - we will have to just pass in the ID
839:28 - that's all we need to pass in however
839:31 - when we send it in this is where we need
839:33 - to specify the actual purchase price of
839:37 - the product that we are sending in so
839:38 - this is where we're going to be using
839:40 - this line of code now
839:42 - open close paren open this new object
839:45 - and we're going to say from in a user
839:47 - address which we already have access to
839:49 - you know what while we're at it even
839:52 - though it's like unlikely that it will
839:54 - ever happen that this doesn't exist and
839:56 - the contract doesn't exist because
839:59 - somewhere I believe oh wait hold on
840:03 - whenever
840:05 - here actually never mind you know what
840:07 - let's just put it in the guard cause
840:08 - it's not gonna hurt there it's fine so
840:11 - we're gonna be like okay contract
840:12 - address or user address so whoever is
840:15 - used whoever is logged in that's the
840:17 - person that will have to pay for the
840:20 - product we're gonna give it a like the
840:22 - general three million gas which is like
840:25 - three million way I believe and then
840:27 - we're gonna say gas price null and then
840:30 - we're gonna say value because in this
840:32 - case we have to press specify the value
840:34 - and out here we actually got the price
840:39 - of that product like we we got the
840:42 - product so and we just want to get the
840:44 - price of that specific product and that
840:46 - will be the value so it's like way
840:49 - harder for any kind of like malicious
840:51 - intense like any kind of person with
840:54 - malicious intent to like tamper with
840:57 - this with this specific transaction and
840:59 - that should be pretty much it now Luna
841:02 - it's sport it because I've messed it up
841:04 - and forgot to export it twice and what
841:07 - we're going to be doing is I believe so
841:09 - it's in product JS where we'll be
841:12 - calling it so what we're gonna do here
841:15 - is we're going to go ahead and import
841:17 - use uh
841:20 - context and then uh yeah I have all this
841:24 - uh template function there but we don't
841:28 - need this anymore instead we are just
841:31 - going to destructure this and right here
841:33 - the toast is ready to handle everything
841:36 - and it should be good to go let's see
841:38 - what we got so on click whenever we
841:40 - click one of these products and I don't
841:41 - know why it does that I think it's like
841:43 - I save it it like doubles It Anyways
841:46 - when you refresh it it only shows up
841:48 - once so that's pretty good
841:50 - and then it says item bod so that's
841:53 - interesting
841:54 - because reading length Okay that's weird
841:59 - why do we what are we dealing with all
842:02 - right oh hold on and once you actually
842:06 - do that type my playlist should be
842:08 - working so let's go ahead and test this
842:11 - out
842:12 - so if I refresh I'm going to say all
842:16 - right my mono mask is popping up
842:18 - it's zero dollars like that that detail
842:22 - looks a little fishy to me
842:25 - okay so there is this error and it says
842:28 - the value doesn't seem to be checking
842:31 - out I believe
842:33 - invalid amount sent for a product Oh
842:36 - interesting and so the reason why the
842:39 - price like wasn't really working is if
842:41 - you think about it like this is these
842:44 - are all async functions if we are
842:45 - waiting here for we literally have
842:47 - waited everywhere I think I just forgot
842:49 - to put the weight there let's see if
842:52 - that helped and let's see if that worked
842:56 - wait there's like a lot of transactions
842:58 - clogged up here all right let's go ahead
843:01 - and refresh
843:02 - click that and there you go there you go
843:05 - now you can see that the Price Is Right
843:07 - There 0.1 each and then I'm gonna
843:09 - confirm it however it literally just
843:13 - says the seller cannot buy their own
843:14 - product so what I'm gonna do is I'm
843:17 - going to refresh here and then swap over
843:20 - to my other account
843:22 - like that come there and that has like
843:26 - 69 nice
843:28 - Ethan there and let's hit the second one
843:31 - confirm there's the price and item bot
843:34 - now this one is successful so that
843:38 - pretty much revs up this entire build
843:39 - you are able to Now list and sell items
843:44 - using the blockchain using the ethereum
843:46 - blockchain and then once again if you
843:48 - want to send this to your friends deploy
843:51 - it to you anywhere you can just comment
843:53 - that line out and comment this line like
843:56 - back out so that's going to be the valid
843:58 - line and now this application is living
844:01 - on the girly Network so with that being
844:05 - said thank you so much for watching and
844:07 - I'll see you in the next one
844:09 - in this video we're going to be building
844:11 - The Tick Tock web 3.0 adapt with an xjs
844:14 - and inferior you're going to be able to
844:15 - upload your videos to the blockchain so
844:18 - that they are available forever and
844:20 - other users will be able to come over
844:22 - and read videos videos and even give a
844:24 - thumbs up to them like you should to
844:26 - this video so with that said smash that
844:28 - like button and subscribe to the channel
844:29 - let's just jump straight into all right
844:31 - so before we actually get started let's
844:33 - just go ahead and spin up this app
844:34 - because we haven't seen how it looks
844:35 - like so what I'm going to do is just
844:38 - type in yarn Dev in the terminal and
844:40 - that should pretty much get started with
844:43 - a that should pretty much like get our
844:46 - server up and running I'm just gonna go
844:50 - ahead and get started with the Chrome
844:51 - and
844:52 - it's only because for whatever reason
844:54 - Safari isn't supporting
844:57 - any kind of wallets that's weird
845:01 - all right so let's see what we got
845:03 - um
845:04 - we have this nice beautiful design that
845:08 - um
845:09 - that we got here so we got this nice
845:11 - beautiful design and this is what we're
845:14 - going to be working with so there's a
845:15 - bunch of like pre-added data and then
845:18 - there's gonna be this guy with the
845:19 - upload
845:22 - um
845:23 - what's that with the upload thing upload
845:27 - modal and then we will have a light
845:29 - button which uh yeah it's not defined so
845:33 - it doesn't work yet so that's fine but
845:35 - this record is spinning so we're good to
845:37 - go camera rolling all right wow there's
845:40 - a bunch of console a lot going on for no
845:42 - apparent reason that's actually got rid
845:44 - of those because
845:46 - you know how we roll we don't do
845:48 - unreasonable console logging
845:50 - there you go
845:52 - all right now with that said I think
845:55 - what we're gonna be getting started with
845:57 - is just um the contract so what I like
846:00 - to do initially is
846:02 - um use truffle to create a contract so
846:06 - that's literally what we're gonna type
846:08 - in truffle create a contract and it's
846:10 - going to be called
846:13 - foreign
846:21 - and before we actually forget about it
846:24 - because that's a tendency I like for
846:26 - whatever reason I do is go into your
846:28 - migrations folder and create a new file
846:31 - but the title of zero one deploy the JS
846:35 - and not KS that doesn't exist
846:40 - there you go
846:47 - and what we're going to be doing in here
846:49 - is actually I'll just make this nice
846:51 - I'll make I'll make the text bigger and
846:54 - make things bigger that's what she said
846:58 - all right you should see it now right I
847:01 - just get up
847:02 - get a magnifying glass
847:04 - all right so cons Tick Tock equals our
847:09 - teeth facts dot require Tick Tock other
847:14 - basically we'll do is when you go into
847:17 - your Tick Tock dot Soul file
847:19 - um it'll look for this thing so
847:22 - and then just import it and the next up
847:25 - module whoa
847:29 - I don't know what that is
847:31 - module dot exports
847:35 - and we're going to explain function it's
847:38 - going to be it's going to have an input
847:41 - of deployer and then deploy that deploy
847:44 - Tick Tock that's literally what we're
847:46 - gonna like that that's all we need and
847:48 - then um it's going to be only used when
847:51 - when we try to like deploy the contract
847:53 - so it's not necessary now but I keep
847:55 - forgetting so let's just get over with
847:57 - it let's go into the contract
847:59 - huh
848:03 - all right so the version that we're
848:04 - going to be using is the zero point
848:08 - 8.16 I kind of forgot the numbers here
848:11 - and
848:13 - um
848:14 - let's just get started
848:16 - um so there's no need to have a
848:18 - Constructor in this case but there's a
848:20 - couple things that we're gonna do so
848:23 - I just want to like set up all the
848:25 - structs mappings all that kind of stuff
848:27 - ahead of time so let's just get started
848:30 - with a struct and and that's going to be
848:34 - um I'm sorry it's going to be a video
848:36 - it's like a video object this is how
848:38 - it's going to look like
848:40 - these are the props that each video
848:41 - object will have so we're gonna have a
848:44 - caption
848:46 - [Music]
848:47 - um
848:47 - and then you want to put this semicolons
848:50 - at the end because if you don't it's
848:52 - going to be issues
848:54 - um and we're going to have likes we're
848:56 - gonna have
848:57 - um there's likes we're gonna have likes
848:59 - we're gonna have dislikes and we're
849:01 - gonna have an address which is basically
849:03 - going to be the owner or the person who
849:05 - like uploaded the video itself and we're
849:09 - gonna have an array of addresses that
849:13 - will contain basically the likers um
849:15 - actually I can just put that like right
849:17 - there so all right so now we're gonna do
849:20 - some uh relatively Advanced life we're
849:23 - gonna have a mapping
849:25 - and this mapping will map addresses
849:31 - to another mapping
849:34 - which will be which will map a uint
849:38 - wow a u-word to a bull
849:42 - huh
849:44 - let's it's gonna be interesting and it's
849:47 - going to be a public and it's going to
849:49 - be a light users
849:53 - so we're going to be mapping each user's
849:56 - address who's using this app
849:58 - to whether they like this specific post
850:00 - or not so what let's what this will mean
850:02 - is we'll have my address my wallet
850:04 - address and I'm going to go in and see
850:07 - if and like start watching video number
850:10 - zero and then decide to like it it's
850:13 - going to be my address mapped to another
850:16 - mapping which is like zero true
850:19 - and so that basically all that means is
850:22 - I like the first video or like zeroth
850:24 - video but I'm talking like human
850:27 - language now so basically that's what it
850:29 - will mean uh we'll get turned in a
850:31 - second
850:32 - kind of try to understand what it means
850:34 - uh but you'll understand it later on
850:36 - we're going to have another mapping in
850:38 - the meantime
850:40 - which will be a number mapped to a video
850:43 - right and that will be another public
850:46 - one and that will be the videos
850:48 - themselves so this is where we are going
850:50 - to map the IDS to the videos themselves
850:55 - um you could have we could have just
850:56 - created an ID here but we are trying to
851:00 - show like different ways of building
851:02 - contracts so we're gonna go this way now
851:04 - what happened there and we're gonna
851:06 - create yet another mapping and it's
851:09 - going to be another number and this is
851:12 - gonna be
851:13 - another number in here and this is going
851:16 - to be public again and this will call
851:18 - lights so we are going to keep track of
851:21 - each like for each video ID so you will
851:25 - have a video ID and then you will be
851:26 - able to map like we're going to mat
851:29 - we're going to use a bunch of mappings
851:30 - here all right
851:31 - so video number zero this is how much
851:33 - likes it has these are the users that
851:35 - actually liked uh that actually liked it
851:38 - and then like when you pass in an
851:39 - address you're going to be able to
851:40 - figure out whether like which videos did
851:43 - that specific person like so there's a
851:45 - lot of like weird connections but um
851:48 - this is an advanced tutorial bro all
851:50 - right and uh we're gonna have one more
851:52 - variable which is going to be a uint
851:54 - it's going to be public and we're just
851:57 - gonna call it video count oops
852:01 - and let's just do it that way that's
852:03 - going to be initialized at zero
852:05 - obviously and then we're just going to
852:06 - keep incrementing it now whenever you
852:08 - create a new video you want to have an
852:11 - event that you're going to like Emit and
852:13 - this is some blockchain stuff we haven't
852:15 - really done this
852:16 - um before but basically what this will
852:18 - do is
852:20 - it's like kind of like console logging
852:22 - but onto the blockchain it's like
852:23 - battery so
852:26 - you don't have to like worry about it
852:28 - much you can completely leave it out but
852:30 - it's just like adds that one level of
852:32 - extra
852:33 - little video so keep it I think
852:37 - anyways video created
852:42 - and we'll have a normal regular stuff
852:45 - like that like a regular
852:47 - circular
852:48 - what is it
852:50 - like a Paran
852:52 - so we're gonna have an ID we're gonna
852:54 - have a string that will be basically
852:56 - catch
852:59 - we're gonna have a URL
853:02 - number of likes dislikes and the owner
853:05 - that's pretty good
853:07 - [Music]
853:21 - oh and that crazy thing is going on
853:22 - because I have to like close it like
853:24 - that and that should have saved all
853:26 - these solves all the issues so that's
853:28 - good I'm gonna have two more events uh
853:32 - one of them is video liked and we're
853:35 - gonna have a number a u in
853:39 - it's going to be an ID and we're going
853:41 - to have
853:43 - the lights basically a number of likes
853:46 - passed in here
853:48 - and another event this video is like so
853:52 - like I said you just want to like
853:53 - console log everything
853:55 - it's going to be the same input
853:58 - so there's your like basic setup
854:02 - um and now it's actually a time to go
854:04 - ahead and create a new video so we're
854:07 - gonna have to have a new function in
854:09 - here
854:10 - without all the like random stuff
854:15 - so function and we will call it create
854:18 - video all right
854:20 - now we're gonna have a couple things
854:22 - that we'll have to pass in here so we're
854:24 - going to pass in the caption whenever it
854:27 - would call this function and a URL so
854:31 - the URL basically is just like a
854:34 - Tick-Tock link or some sort of like
854:36 - video link that we're going to store on
854:38 - the blockchain
854:39 - and before we even do anything it's like
854:43 - video count plus plus so you want to
854:45 - increment that immediately
854:47 - and videos.video count or I mean like
854:50 - video
854:52 - count yep
854:55 - um so what is videos before we go any
854:57 - further
854:58 - there's your videos all right so
855:02 - the ID that we just incremented we're
855:05 - going to use that immediately to store
855:08 - our first video and map the first video
855:10 - to that specific counter all right
855:13 - and we're going to create a new video
855:15 - using the structure.v that that we
855:19 - created up here so there's that
855:22 - um
855:24 - let's go ahead and start passing caption
855:27 - URL
855:30 - and we're gonna have zero likes zero
855:32 - dislikes and message sender is going to
855:35 - be the owner
855:38 - and we're going to create a new array of
855:41 - addresses
855:42 - that like doesn't have anything in there
855:44 - oh I forgot a comma there so there's
855:47 - that well that's interesting oh it's
855:50 - because I changed up the order so let's
855:53 - go ahead and swap them
855:55 - around
855:56 - and we should be good to go okay so yeah
856:00 - basically you want to match these items
856:02 - to each of these elements so you want to
856:05 - take these and match these items to
856:08 - these elements that you're passing in so
856:10 - first obvious is caption URL likes to
856:12 - selection so you want to make sure that
856:14 - the order is specific
856:17 - now once like now once you're done with
856:20 - that and your team uh no events I think
856:23 - that's how we're I'm gonna call All of
856:25 - You Slackers
856:27 - um you can basically skip anything
856:29 - that's uh happening after I type emit
856:32 - um but for those that are like Elite and
856:35 - actually doing events we're going to
856:37 - emit a new event which we're gonna call
856:39 - which is uh like something we already
856:42 - prepped here so we're gonna pass in the
856:45 - ID which is video count we're going to
856:48 - pass in the caption we're going to pass
856:51 - an URL zero zero and message dot sender
856:54 - so once again you want to map everything
856:57 - 2DS and I'm like when I say map it's
857:00 - kind of like that mapping but it's like
857:01 - your brain does the mapping so get it
857:04 - right
857:04 - all right now if you haven't heard of it
857:07 - before
857:09 - um or if you haven't watched any of my
857:11 - previous videos I like to use something
857:13 - called the remix IDE extension inside of
857:17 - vs code
857:18 - so this is that guy now go ahead install
857:20 - it there's no setup needed at all once
857:23 - you're done it's the icon that you want
857:25 - to click
857:26 - um takes a little bit of a time to
857:30 - load up but once it's done you want to
857:32 - select the correct corresponding version
857:35 - so if it's 0 8 16 I'm going to go with
857:37 - that specific version and I'll just hit
857:40 - run and deploy and hit activate on the
857:43 - pop-up window and once you're there
857:46 - uh notice that you're going to have the
857:48 - output coming up and could not detect
857:50 - not work whatever or you might have
857:52 - something else there now there are two
857:54 - options that you can do right now one is
857:56 - go to your inferior account and select
857:59 - girly which is going to be the network
858:00 - we're going to be using to have this
858:02 - tutorial when we deploy the contract now
858:05 - you can pick this
858:06 - and uh get this RPC URL is what it's
858:09 - called paste it here
858:11 - however I don't recommend it because uh
858:13 - Tesla Works a little slower than your
858:15 - local so what you can do instead is go
858:18 - to trufflesweed.com
858:21 - and then select that bad boy download it
858:24 - install it and this is how it's going to
858:25 - look like
858:28 - there you go there's your ganache now
858:30 - what you will not see is this it's
858:33 - obviously not my ganache that's on your
858:35 - machine so completely forget about that
858:38 - but if you hit a quick start bringing in
858:39 - the exact same thing now if you come in
858:42 - here
858:43 - you want to go ahead and copy this RPC
858:46 - server type thing copy that guy
858:49 - go over
858:50 - and then paste it here if you can see
858:53 - that that's literally the exact same
858:54 - link and once you hit connect it's going
858:56 - to connect so that's cool now I'm going
858:59 - to open up a secondary uh sidebar and
859:02 - then just pull output there
859:04 - it's because I prefer it showing up
859:06 - there so I can hide that bottom thingy
859:08 - because it's a better use of space in my
859:10 - opinion and notice there's a couple of
859:13 - things that you will be able to do
859:15 - obviously disconnect your account and
859:17 - then there's going to be all these and
859:19 - then there you will have a bunch access
859:20 - to a bunch of these wallets now these
859:23 - wallets are exactly these wallets so
859:26 - what ganache does is it gives you a
859:28 - hundred each and it's like a local lead
859:30 - locally running uh blockchain server
859:33 - type thing on your machine so you don't
859:36 - have to use test nuts which are like
859:39 - kind of slow sometimes but
859:41 - there you go
859:42 - and what you can do is if you have a
859:44 - contract opened it's going to give you
859:47 - the option to compile that so let's do
859:50 - that let's see what that does
859:52 - like you can see it says please wait and
859:54 - compilation compilation finished and
859:57 - there you go now
859:59 - you can now go ahead and deploy this
860:01 - contract let's see what that does and
860:03 - there you go that's what happened there
860:04 - so if you open this it's literally the
860:07 - exact same thing that we just created
860:08 - right so there's like all kinds of stuff
860:11 - like you can hold a video account which
860:13 - will literally like all this will do
860:15 - when you create a variable is under
860:17 - under the hood it creates like a call
860:20 - function to it like what is a call
860:21 - function it's basically if you're
860:23 - familiar with apis it's like a get
860:25 - method function but for the blockchain
860:27 - so there's that you can read data from
860:30 - the blockchain for my beginners out
860:32 - there all right and then there's like
860:34 - this transact thingy
860:36 - um that's like posting post calls and if
860:39 - you're like super beginner it's like
860:41 - adding data to the blockchain but get
860:43 - familiar with transactions and calls and
860:45 - also get familiar with get and post
860:46 - because if you're not
860:48 - gonna get left behind all right so when
860:51 - you call that video count it's going to
860:52 - return zero which is pretty cool because
860:55 - we don't have to give it any kind of
860:57 - value and the uh and the initial value
861:00 - that solidity gives it is zero by itself
861:03 - so that's pretty cool some languages
861:05 - don't know that
861:07 - that's why we use consolidity and then
861:09 - there's like a bunch of things so like
861:10 - we don't even have to worry about these
861:12 - but there is this uh let's just go
861:14 - through like what these mappings are so
861:16 - you see the first mapping it's like the
861:18 - pretty crazy one but initially let's go
861:20 - through the second one so videos what
861:22 - you can do is pass in a u-wind which is
861:25 - just a number like uh
861:27 - an integer and what I'm going to do is
861:29 - just pass in zero and see what happens
861:32 - and uh literally nothing happens it like
861:34 - sends me back all the all the basic
861:37 - default stuff
861:39 - it's not valid basically what that means
861:41 - is there's no videos created or no
861:44 - videos added to that specific ID there's
861:47 - no video with the ID of zero that's what
861:50 - I'm trying to say and then you can do
861:52 - the exact same thing for like likes
861:54 - there you go it like gave you back at
861:57 - zero so it's like not even valid at all
862:00 - oh yeah it's like
862:03 - it gave me back a zero because once
862:05 - again as the the initial value well what
862:09 - happened there and then here you can put
862:11 - in an address so I'm just going to go
862:13 - ahead copy of my addresses paste that
862:16 - guy there and then video ID is going to
862:18 - be zero in this case
862:20 - call that and like see like like there's
862:24 - no data that would exist there so like
862:26 - how would it know
862:28 - if it's a true or false you know what
862:30 - I'm saying see what I'm saying it's like
862:31 - a lot of undefined stuff
862:33 - now with that fiddling but that that's
862:36 - basically how it works and it will
862:38 - eventually we're gonna use all this
862:40 - stuff so don't worry about it we're just
862:42 - gonna like populate it with data
862:45 - all right video create like create video
862:48 - what do we have to do we gotta put in a
862:50 - caption and we're gonna put in a URL now
862:53 - because those are strings I'm just gonna
862:55 - go with like dummy data
862:58 - so I'll put in a caption and I'll put in
863:00 - a
863:01 - totally URL because that's totally URL
863:04 - hit transact and uh there's some things
863:07 - happening here gas is being used
863:10 - some kind of gaslighting so there's like
863:12 - all kinds of stuff happening here and
863:14 - then random gas lighting and things I
863:17 - think things of that nature but we don't
863:19 - really know what is really happening in
863:21 - the background unless we are able to
863:22 - call it so let's try to call video count
863:25 - and now as you can see it says one so
863:27 - that's helpful let's see if we got
863:32 - um let's see if we got back the data
863:33 - that we just added and there you go
863:36 - it sent back all the data we wanted all
863:40 - right so it's a weird data structure
863:42 - that you're we're gonna have to get used
863:43 - to it but basically let me just copy it
863:46 - and we'll run through it
863:49 - so I just created attempt.json file you
863:52 - don't have to follow but I just wanted
863:53 - to show you what's happening here to
863:55 - basically get the exact same data wise
863:58 - now this is just the basic this is how
864:02 - soluted it does it by itself and then
864:04 - this is
864:05 - this is the data structure that you gave
864:07 - it to it so just something to uh to get
864:11 - used to but
864:12 - honestly it doesn't really matter it's
864:14 - going to be easier to just refer to
864:16 - these uh things and then later in the
864:18 - video you'll realize that we're going to
864:19 - be using this stuff all right
864:22 - now you're literally getting back every
864:24 - single data piece that you just passed
864:27 - in so that's pretty cool let's move on
864:30 - now a few things that we're going to be
864:31 - needing in this contract and I'm not
864:33 - going to go through all the testing uh
864:37 - just I'm gonna do an overall testing
864:40 - session and be very and I'm not even
864:42 - recording okay there oh my God
864:45 - all right so a few other
864:47 - functions that we're going to be needing
864:50 - is first one is going to be this
864:52 - function get number of videos
864:56 - and it's just gonna be like a regular
864:58 - public function that returns
865:02 - a number
865:07 - oops like that
865:09 - and all it will do is just say return
865:11 - video account
865:14 - that's it done we're going to be needing
865:16 - this in the on the front end don't worry
865:18 - about it for now uh let's just move on
865:20 - there's going to be two more functions
865:22 - one of them is going to be like video
865:27 - and I'm just gonna like make it as
865:30 - simple as possible and let's just
865:33 - initialize another one which is going to
865:35 - be you guessed it dislike video
865:38 - [Applause]
865:41 - all right we're gonna get started with
865:43 - like video but it's gonna be almost the
865:46 - exact same thing in a dislike one so you
865:48 - will have an opportunity to like test
865:50 - out your solidity skills after this one
865:52 - all right like video what are we gonna
865:54 - do
865:55 - um we're gonna create an instance of the
865:58 - specific video uh that we're trying to
866:01 - like so we're gonna need to pass in a
866:03 - u-end which is going to be your ID and
866:05 - if you see all these like underscores in
866:07 - here and up here basically all that
866:09 - means is that we're only using those
866:11 - variables Within These functions and
866:13 - there's no like they have no business
866:15 - out of outside of those functions it's
866:18 - like internal use only
866:20 - easy that's it
866:22 - all right so let's go ahead and create a
866:25 - storage let's go ahead and create a
866:28 - instance of the video that we're trying
866:30 - to like here so we're gonna have a video
866:32 - and then we're gonna grab these specific
866:34 - video from using the ID that we just
866:37 - passed in
866:38 - all right now once we got that we also
866:42 - have to make sure that the light users
866:45 - for that specific video all right
866:49 - select users it's like users who like
866:51 - the post but that would be a way too
866:53 - long variable names comment down below
866:56 - like what would be a better name there
866:58 - but anyways you gotta pass in
867:00 - there's a couple things that we need to
867:02 - pass in remember we gotta pass in an
867:04 - address we're going to pass in the ID
867:06 - and that will return a Boolean all right
867:09 - I'm going to pass in message sender the
867:13 - person who is trying to like that
867:14 - specific video
867:16 - oops and we're going to need to pass in
867:19 - the ID all right so we need to make sure
867:23 - all right so we need to make sure that
867:25 - the person who's trying the video trying
867:27 - to like the video hasn't haven't liked
867:29 - this video before all right and if they
867:32 - have this let's just like gently remind
867:34 - them that you have already liked
867:38 - this video all right that's it
867:42 - um and I keep forgetting the summer I
867:44 - call them but you shouldn't all right
867:46 - moving on uh likes
867:50 - we're gonna update all these mappings
867:52 - all right so we're gonna update all
867:54 - these mappings all right so we're going
867:55 - to have likes and we're gonna go ahead
867:59 - and update update the value of it so we
868:02 - can you can just go plus plus or if
868:05 - you're if you're not that familiar with
868:07 - that you just go likes
868:09 - underscore ID plus one basically take
868:13 - the value of this add one to it and then
868:15 - just like give that value to this
868:18 - specific mapping item thing
868:22 - and then same thing is going to have
868:25 - um underscore video
868:28 - then we just like basically do all the
868:30 - admin admin work around uh the like so
868:33 - we're gonna have to grab the video
868:34 - instance that we just created and
868:37 - push the message sender to the like
868:40 - users uh array
868:43 - and actually I'm gonna say push and push
868:47 - in message that's thunder so that's just
868:50 - going to like again
868:53 - all right and like literally let's just
868:55 - finish all the administrative work
868:57 - around this like functionality so
869:00 - underscore video which is the video
869:02 - instance you just created
869:04 - um and let's just update the liker's
869:08 - array by pushing yeah push
869:11 - my pushing message sender in there what
869:14 - does this do again grab the video
869:16 - that we just created up here it's like
869:18 - the video that we're trying to like
869:19 - right and then there is this array
869:21 - called the likers uh Lakers haha and
869:25 - then pushing the message center meaning
869:26 - the person who actually liked that video
869:29 - pushed them in there so we can keep
869:31 - track of them and now we gotta update
869:33 - all the mappings so
869:35 - this here that we require it to be false
869:38 - we're going to make sure that now this
869:40 - is going to be true so we do it with one
869:42 - equal sign and then we just update it to
869:45 - true and instead of column we're going
869:47 - to have a semicolon and now we're going
869:49 - to update the actual
869:52 - um array of videos that we created
869:54 - somewhere here and now we're actually
869:57 - going to go ahead and update this
869:59 - mapping by by saying that videos ID
870:06 - in Kohl's video
870:10 - so there's a couple of things happening
870:11 - here once again let's just run through
870:13 - it so we create a local instance like
870:15 - just for this specific function outside
870:17 - of this this guy is not even going to
870:19 - exist so create an instance using the
870:23 - mapping that we originally have what you
870:24 - want to do is work on only one object
870:26 - and then just like update that and then
870:28 - push it right back to its place and then
870:30 - get rid of the old value so that's what
870:32 - we're doing we're going to pick that out
870:34 - and then we're going to do stuff with it
870:35 - all right now we're going to need this
870:38 - to determine whether the person who is
870:41 - trying to like this video has already
870:43 - liked it or not if they did if they
870:46 - haven't let's just get them through it
870:47 - which is uh this this stuff and if they
870:50 - have then we get like send this error
870:53 - message back and not don't let the
870:55 - process go through now we're going to
870:57 - increase increase the the amount of
870:59 - likes this video has on it so up that a
871:03 - number swap that by one basically and
871:06 - we're going to also store the person who
871:09 - liked the video in an array and then uh
871:13 - also update the mapping for the specific
871:16 - user whether they like the video or not
871:19 - and uh finally whatever modifications
871:22 - with it on that local instance of that
871:25 - video just put it back get rid of the
871:27 - old value and that's pretty much it now
871:29 - for my rich people who commit events
871:33 - we're going to keep we're going to uh
871:36 - amid the video like the event passing
871:38 - the ID and then the amount of likes and
871:42 - that's basically pretty much the like
871:45 - functionality now I want you to go ahead
871:46 - pause this video and try to figure out
871:49 - the dislike functionality by yourself if
871:52 - you're in and if you're for whatever
871:54 - reason you couldn't figure it out it's
871:55 - okay completely because we're here to
871:57 - learn let's go ahead and do that now so
871:59 - just like last time we're gonna have to
872:01 - pass in an ID and we're gonna go ahead
872:03 - create just like last time actually I'm
872:06 - not even going to type all that you can
872:08 - literally copy this guy and then put
872:11 - this right there that capital V right
872:14 - there new requirement
872:20 - and now in this case we want to check
872:23 - that the person like let's make sure
872:26 - that the person has actually liked the
872:28 - video so instead of false we're going to
872:32 - require that this is true I'm going to
872:34 - update the message and we can be like
872:36 - hey you you like the video first
872:44 - and now once you want to go go ahead and
872:46 - do is decrease the number of likes
872:50 - just like that and then
872:53 - update the mapping
872:55 - to be false and so the person can like
872:59 - it again
873:00 - and then
873:02 - update the modified value
873:04 - and then again for my rich people video
873:07 - dislike pass in the ID and passing the
873:10 - number of likes and that is pretty much
873:12 - our contract so and that is pretty much
873:15 - your contract actually there's one more
873:16 - function that we're going to be doing
873:18 - we're going to make which is going to be
873:20 - get the
873:23 - videos like that
873:25 - and it's going to be a public function
873:27 - which will return a video
873:31 - view returns
873:39 - which will basically return all the
873:40 - videos that we have
873:42 - on stored on the contract
873:45 - so we're going to create a new array
873:55 - we're going to create a new array which
873:57 - will uh which will just populate with
874:00 - all the all the stored videos from the
874:03 - chain
874:04 - so you're just gonna like Define the
874:06 - structure of it and all that kind of
874:08 - stuff and you're going to make sure that
874:10 - this is not going to be longer like
874:13 - there cannot be more items in that
874:16 - specific rate than video than the number
874:19 - of videos we already stored on the on
874:22 - the blockchain
874:23 - and so once you're done with that you
874:25 - want to map through you want to
874:27 - literally Loop through all the all the
874:29 - videos that we have uploaded
874:40 - with the regular boring old
874:44 - for Loop
874:48 - and then one by one push them into the
874:51 - array that we just created
875:01 - now you might notice that I'm doing some
875:04 - wizard right here and actually that's
875:05 - some weird stuff going on there but
875:07 - basically what's happening is that the
875:09 - number of videos
875:11 - the video IDs are starting by what with
875:15 - one that's because we are incrementing
875:17 - the video count over here now this guy
875:21 - is starting from zero so like there's a
875:23 - couple of things that we can do here
875:24 - there's a couple of things that we can
875:26 - do here we can make this
875:28 - make this start at one and then add the
875:31 - equal sign there but it's not like
875:34 - no one really does less than equal to
875:36 - unless I'm just not aware of it so I we
875:40 - just uh opted for going this way and
875:43 - then um they're not but then obviously
875:46 - the video why these have to match
875:49 - the video ideas have to keep up with
875:51 - this so you gotta add one to it and that
875:54 - way you're gonna be fine now once you're
875:57 - done with that
875:58 - let's return that array and you're good
876:01 - to go all right now let's go ahead and
876:03 - actually test this out as it is I'm just
876:06 - gonna add a couple of video a couple of
876:09 - stuff in here and before we test out you
876:11 - want to make sure that everything you
876:12 - had here is get rid of it all no need
876:15 - for that I'm gonna recompile everything
876:18 - that you have and should be good to go
876:21 - now empty out the output because oh wait
876:24 - clear that because there's no reason for
876:27 - you to see all that stuff deploy that
876:29 - bad boy and you're good to go all right
876:32 - new video
876:33 - capturing
876:36 - caption and then put in the URL
876:39 - totally URL number two
876:42 - transact that all right gas burning is
876:45 - there all right let's get the number of
876:47 - videos there's one video get videos get
876:49 - all of the videos all right there you go
876:51 - there's uh literally every kind of every
876:53 - information that you will you need to do
876:55 - you need to know there's your there's
876:58 - your caption there's your url number of
877:00 - likes dislikes the array of likers which
877:03 - is currently an empty array because
877:04 - nobody likes this video and then the
877:06 - owner which is Me Myself and I
877:10 - let's see a number of likes one
877:13 - uh you're gonna pass in the ID all right
877:15 - zero perfect video count oh I think we
877:17 - tested that already
877:19 - um and then videos let's get back to
877:21 - data uh ID is going to be one pass it in
877:25 - you got back all the data
877:27 - that's pretty good uh by my standards
877:31 - all right let's go ahead and like that
877:33 - video there you go all right well
877:35 - there's all the gaslighting going on and
877:37 - let's check the number of likes once
877:39 - again so call that and it says one so
877:42 - we're pretty much good to go for this
877:44 - that is your contract let's go ahead and
877:46 - deploy it now all right let's go ahead
877:48 - and deploy this contract that we have
877:50 - right over here so I'm gonna go ahead
877:53 - and
877:54 - open up that thing down there pull my
877:57 - output back there because uh that's
878:00 - something we're going to be using in a
878:01 - little bit
878:03 - and what you want to do is go into your
878:05 - extensions and now install truffle
878:08 - and the good thing about truffle is it's
878:10 - pretty well integrated with ganache and
878:13 - inferior so it's going to be helpful by
878:15 - the way this is the one that you want to
878:17 - download truffle or vs code by consensus
878:20 - software and they have the check mark so
878:22 - that's cool all right
878:27 - all right this is the thing that you
878:29 - will see this little like truffle
878:31 - looking thingy
878:33 - and you will have two networks over here
878:35 - ganache and infuro and if you don't have
878:38 - them you can literally just click
878:39 - connect not work and then connect it so
878:42 - what you can do once you're done is go
878:45 - into like right click on that Tick Tock
878:48 - dot Soul file and hit build now you can
878:51 - also hide the secondary window or the
878:54 - secondary sidebar and let's just like
878:57 - compile it so build it and there you go
879:00 - everything is up to date nothing to
879:02 - compile that's pretty cool
879:03 - and let's go ahead and deploy now wait
879:07 - I'm clicking the wrong phone and if
879:09 - again if you don't have the deployed
879:11 - file it's not going to work so make sure
879:12 - you have it all right
879:15 - now if you right click on tiktok.sol
879:19 - and then hit deploy and you have ganache
879:22 - connected which once again super easy uh
879:25 - let me just show you real quick
879:27 - so I'm just gonna say connect select
879:30 - ganache and then you're gonna put in a
879:32 - port now how you get the port that's
879:34 - your Port right there 75.45 paste that
879:37 - in there and you're good to go uh and
879:40 - that will connect automatically so I'm
879:42 - gonna clear the output and go back here
879:45 - and deploy to ganache first
879:48 - so this is going to be my local and hit
879:51 - that let's see what happens
879:54 - and if you get the contract address and
879:57 - successful deployment and you're
879:59 - basically good to go now what you want
880:01 - to do is go ahead copy this guy close
880:03 - that and then go into your utils file
880:06 - and contract.js now here
880:09 - it was a little fast Euros contract.js
880:13 - all right that's where you want to go
880:15 - once you copy the contract address
880:17 - create a new variable called
880:20 - um I don't know contract
880:22 - contract like dress or something like
880:25 - that and then just pop that in there
880:31 - or actually we can literally just call
880:33 - oops we're gonna literally just call it
880:36 - a dress no need to go too fancy on it
880:39 - but what that does is uh we're just
880:42 - gonna save it for uh there for now don't
880:44 - worry about it
880:46 - um and then the one more thing you want
880:48 - to make sure is uh go into your
880:50 - artifacts and then there is this Tick
880:52 - Tock that Json file all right that's
880:54 - something called the ABI now this isn't
880:57 - a different format uh but here's the API
881:00 - that we're going to be using so you can
881:02 - either copy that or just copy this
881:04 - entire file and paste it right into your
881:07 - deals folder all right and then what you
881:09 - can do is go ahead and import
881:12 - contract import that as contract API or
881:16 - something like that and we're just gonna
881:19 - Tick Tock the Json
881:22 - and there you have it now you have
881:24 - access to it now with these two things
881:29 - we can create a brand new uh function
881:34 - which will be create contract whoops
881:38 - [Music]
881:41 - what happened to my keyboard
881:43 - oh
881:46 - create a contract
881:48 - and there's no input here there's like
881:52 - little thing to input
881:54 - um now what you want to do is
881:59 - store
882:00 - the restructure the ethereum object from
882:03 - your window
882:05 - from
882:07 - the window so what that what's that like
882:10 - that doesn't make sense window if you
882:13 - don't know it that's the like all the
882:15 - code that is running in your browser and
882:17 - then ethereum is the specific code that
882:19 - metamask injects into your browser
882:22 - whenever it's running so uh
882:26 - there you go I'm just going to go ahead
882:27 - and unlock it
882:29 - and there's like all kinds of code going
882:31 - on in the background in metamax metamask
882:34 - injects some into it and that'll make it
882:36 - easy to interact with the contract now
882:39 - if this ethereum
882:42 - um
882:44 - ethereum object exists in my window and
882:48 - what I want to do is generate a create a
882:51 - new instance of web3
882:54 - um
882:56 - by using the web3 JS Library so let's go
883:00 - ahead and import that
883:03 - just like that and that should be good
883:06 - to go for now and then we're going to
883:08 - return a new
883:11 - web3 is contract
883:16 - using the contract ABI hey
883:21 - and the address now once once again as I
883:25 - said it earlier you want to go for the
883:28 - ABI itself all right so there's a bunch
883:31 - of random code in here which we're not
883:33 - really going to need so
883:36 - just use that and then you can just
883:38 - refer to that and then that basically
883:41 - takes care of all the contract interface
883:44 - or interaction uh type of stuff
883:48 - all right now that we're done with our
883:52 - ganache uh our ganache deployment what
883:56 - you want to do is once again hit Deploy
883:59 - on that bad boy but this time I'm going
884:01 - to select girly and leave the leave the
884:05 - gas gas price empty and then here if you
884:08 - haven't worked with uh this extension
884:10 - before you will only have paste mnemonic
884:13 - and generate mnemonic
884:15 - I because I have worked with it I
884:17 - already have this uh thing uh there and
884:20 - that's just that means that I already
884:22 - have a wallet set up with my with my
884:24 - truffle so what you can do if you don't
884:26 - have it is go into your meta mask
884:30 - and then click that three thing no
884:32 - actually click that guy click settings I
884:35 - don't even know where to go hit uh
884:38 - privacy security whatever and then
884:40 - secret recovery phrase and then just pop
884:43 - in your password now
884:46 - do not share this with anybody and just
884:49 - like keep it separate from where your
884:51 - money is at like just just think
884:54 - basically all right like whenever
884:56 - someone has access to your secret
884:57 - recovery phrase uh phrase that basically
884:59 - means they have full control over your
885:02 - wallet so and then like if you think
885:04 - that oh your wallet might be at risk
885:07 - just generating a new one put your funds
885:10 - somewhere safe just like use your brain
885:12 - all right
885:13 - but in this video and I want to like
885:16 - emphasize this we at cover program will
885:19 - never ask for your private key or any
885:22 - kind of private stuff we don't even ask
885:24 - for your public Keys all right
885:27 - we don't ask for anything so if anybody
885:29 - in the comments pretends to be us it's
885:31 - not us
885:33 - be smart
885:35 - save your money all right
885:37 - so there you have it uh grab that and
885:39 - once you paste it there it's gonna be
885:42 - something oops Yeah paste and then you
885:46 - paste something in there and then this
885:48 - window will pop up now you can save it
885:50 - somewhere and then uh this extension
885:53 - will remember it just like it remembers
885:55 - for me so I'm just gonna pop up early
885:58 - there and again and then you can just
886:00 - use it like that so there you go now
886:02 - it's going to take a little extra time
886:03 - because once again it's a test nut it
886:06 - takes longer so I'm just gonna fast
886:08 - forward there and then show you what the
886:09 - result is
886:11 - um by the way if you're a deployment is
886:13 - uh stuck
886:15 - um there's gonna be that little thing
886:17 - going down there uh what you want to
886:19 - make sure is that you have your
886:20 - notifications on but mines are off
886:22 - because I like to focus just click that
886:25 - install button and then you're gonna be
886:28 - basically good to go and this is going
886:30 - to take a little extra time and there
886:32 - are like all kinds of random things
886:33 - going on here so I'm just going to
886:34 - remove that
886:36 - um
886:39 - and then it failed for whatever reason
886:41 - let's check it out now let's go ahead
886:43 - try again I don't really understand
886:45 - what's happening
886:49 - oh I think it just timed out because it
886:51 - oh wait
886:55 - all right so if that issue happens to
886:57 - you you might want to go ahead and
886:59 - create a separate folder for your next
887:02 - app
887:03 - that's great folder it's called maxed
887:06 - app put your pages uh and then like
887:09 - leave everything contract related out
887:11 - here so you're going to need your
887:12 - contacts your components uh not build
887:15 - the next folder Pages public Styles and
887:20 - your
887:23 - your next config
887:26 - package.json
887:28 - and
887:29 - and I think those are the only ones oh
887:32 - yes Lind
887:33 - and the dot EnV file so once you have
887:36 - all these go ahead grab them and then
887:39 - just throw them in there in the next
887:40 - step folder so that should pre that's
887:43 - your Technique to take care of a lot of
887:44 - things so go into your terminal then
887:48 - we're gonna reset that
887:50 - and then you're gonna have to CB into
887:52 - our next app folder and then just run
887:54 - the yarn in there let's see if that uh
887:57 - figures itself out and in the meantime
888:00 - um so there the reason we're doing that
888:02 - is there's some uh peer dependency
888:05 - issues there so that's that's fine we'll
888:08 - figure it out
888:09 - um now you also want to make sure you
888:12 - update your getting more and remove all
888:14 - these folder things
888:17 - um
888:17 - because otherwise like otherwise it will
888:20 - only look in this very specific folder
888:22 - however I need it to look in all other
888:24 - folders and now you can see your like uh
888:27 - get thing is only recognizing 55 changes
888:30 - not 200 5 000 whatever
888:34 - so we'll not need that and let's try
888:38 - deploying this guy again
888:40 - girly
888:44 - um open that bad boy install it npmi and
888:48 - then that should technically generate a
888:50 - new uh package Json file soon
888:55 - I think it did it already I just don't
888:57 - see where it's at
888:58 - oh there you go there it is and that
889:01 - should be the only file that is out
889:03 - there
889:05 - uh where that should be the only
889:06 - dependency that the outer project has
889:09 - this is once again this is like these
889:11 - are like things that will come with
889:13 - experience don't worry about it if you
889:14 - didn't figure it out by yourself like
889:16 - there's nothing shameful about it all
889:18 - right so once you've done all of that
889:20 - um there's still going to be a couple of
889:22 - Errors if uh if you're like me however
889:24 - it might have solve it so there's a few
889:26 - things just to wrap it up again what you
889:28 - wanna what you need to do so
889:32 - create a next Dash app folder and you
889:35 - will need to pass in all these files uh
889:38 - and then just remove any like everything
889:42 - like all of these stuff have to come in
889:44 - here
889:45 - in your git ignore September step number
889:47 - one step number two in the get ignore
889:50 - file all these uh files will have a
889:54 - slash in front of them just like this
889:55 - one and I forgot about it
889:57 - remove all the slashes literally you can
890:00 - come in uh to command nav click that uh
890:03 - thing and then just print put a slash in
890:05 - there and then put nothing there and
890:07 - just like one by one remove all this
890:10 - lashes so removed it from the comments
890:12 - but it doesn't really matter there
890:15 - so you don't want to see any kind of
890:17 - slashes in here because that will like
890:20 - that will only that will make this
890:22 - follow look for those folders in here
890:25 - and not one or two levels deeper once
890:28 - that's done remove all the node modules
890:30 - so remove your node modules from there
890:32 - remove your node modules from out here
890:34 - and that should put you in a pretty good
890:37 - place now
890:39 - these are the only files that you should
890:41 - be seeing in fact you shouldn't even be
890:43 - seeing this this is just one of my
890:45 - functions I'm just going to remove it
890:46 - you're not going to have that file see
890:48 - these are the files that you should see
890:50 - here everything else that is basically
890:53 - has anything to do with your front-end
890:55 - application has to be put in here all
890:58 - right so this is something that all
891:00 - right now you're going to learn and
891:03 - actually I'm pretty glad we made this
891:04 - mistake this is a mistake on RN uh
891:07 - however if you happen to ever do this
891:09 - now you're going to be prepared for that
891:11 - so
891:12 - everything bad has something good in it
891:14 - look at the positive end of stuff all
891:17 - right so now you just learned that scale
891:19 - and then once you're done and removed
891:21 - everything open up your terminal I said
891:24 - terminal so stop everything and then you
891:26 - will have to run reset a couple of times
891:31 - I'm just gonna restart both of my
891:33 - terminals here and then one folder what
891:37 - you want to do is CD and turn that app
891:39 - folder and then just throw in the yarn
891:41 - and let it do its thing
891:43 - that will ensure that your next app is
891:46 - ready to go and then we'll restart it in
891:48 - just a second and this other one is only
891:51 - going to be used for for like installing
891:54 - stuff all right just type in your knob
891:57 - once that's done
891:58 - and then your next stop should be pretty
892:03 - much good to go all right
892:05 - they're like stuff that that are not
892:08 - working perfectly so let's see oh
892:10 - apparently okay so I forgot my utils
892:13 - folder to put that there too
892:15 - it's gonna be that's gonna need to be
892:17 - there all right there you go now it's
892:18 - working
892:21 - there we go we're good there
892:23 - all right
892:24 - so that should be good
892:26 - and now what you're going to do is now
892:29 - you will be able to deploy the contract
892:31 - all right it might still give an error
892:33 - but there should be no other kind of
892:35 - error the reason that other error was
892:37 - happening is because deployment need
892:41 - this deployment contract deployment
892:44 - needs a specific version of react but uh
892:47 - or like a specific dependency however
892:49 - the next app requires a different
892:51 - version of that and that conflicts and
892:53 - then it just like throws all kinds of
892:55 - Errors so figure it out good to go all
892:58 - right now it failed again so as and
893:01 - that's because we just like didn't
893:02 - install anything there so let's run yarn
893:04 - there and when it comes to like
893:06 - blockchain sometimes yarn doesn't seem
893:08 - to work sometimes uh npm doesn't work so
893:12 - what I like to do is just run both of
893:13 - them and then usually that saves me a
893:16 - lot of headache
893:17 - so once my yarn finish running I'm just
893:21 - gonna go ahead and run uh npm install as
893:25 - well just for good measure totally no
893:27 - need to do that but I'll just do it
893:29 - anyways
893:31 - and then let's see what do we got now
893:35 - reset that terminal
893:37 - that one is running so that's good
893:41 - head my contracts Tick Tock Soul deploy
893:43 - that bad boy and then just select girly
893:47 - all right now it's waiting and now it's
893:51 - throwing me a different error so it says
893:54 - use error user project is inactive all
893:56 - right that's fine that that error I'm
893:58 - pretty familiar with and that's fine so
894:01 - in your truffle what you want to do is
894:03 - check if you're in for a service is
894:06 - connected to the right project all right
894:08 - obviously like if the project is not
894:12 - existing in my account
894:15 - out here in on infuro it's obviously not
894:18 - going to work so you got your
894:21 - um Tick Tock right but it says eBay
894:22 - there that's fine I can just right click
894:25 - on that guy
894:27 - so that guy and then disconnected cool
894:30 - now
894:31 - you might be using the Truffle extension
894:34 - for the very first time and in that case
894:36 - when you connect to the inferior service
894:38 - it will pop open a little window here
894:41 - that will just force you to sign in
894:44 - all right once you sign in that guy will
894:46 - come up and then you can pick it up
894:48 - where I'm at so once you sign in Easy
894:50 - just pops up in your browser hit
894:52 - authorize and you're good to go then you
894:55 - can just select the project you want to
894:56 - connect to
894:58 - okay
894:59 - and we should be good to go pretty much
895:02 - now all right let's go back and for the
895:06 - fifth time at this point it's like girly
895:09 - inferior Tick Tock clone girly zero
895:13 - grass lowest price and create that guy
895:17 - or use that guy there's another uh user
895:21 - project as an athlete okay well if that
895:23 - happens let's go into our truffle config
895:28 - so here you can just clearly like take
895:31 - this entire networks thing and just get
895:33 - rid of the entire thing like you don't
895:35 - need any of that it will be regenerated
895:37 - so let's go that's fine
895:39 - all right hit deploy again
895:42 - girly no gas prices paste that
895:46 - let's see if it like go through this
895:48 - done
895:50 - so far so good because it takes longer
895:52 - times and it's like deploying and raw
895:54 - all right let's see like the other ones
895:57 - were like way faster at throwing the air
895:59 - and there you go I think this is this is
896:00 - already good to go it's like there's a
896:02 - bunch of steps and there's a bunch of
896:04 - places where it can go wrong this was a
896:06 - good debugging session where you will be
896:08 - able to uh face a ton of errors that uh
896:12 - all of us face on a daily basis and if
896:14 - you miss like one step this is where you
896:16 - can come back to figure out all the
896:18 - errors that you might have made
896:20 - somewhere so there it is and then when
896:23 - you see all these blocks like that's
896:24 - when actually it's like verifying that
896:26 - it is being deployed and the transaction
896:28 - hash that you see here uh those are
896:31 - that's being verified on these blocks so
896:35 - let's wait for it and whenever you see
896:39 - our contract address that's when you
896:40 - know you're good and it also says like
896:43 - deploy succeeded
896:46 - and it also says deploy succeeded so
896:49 - that's pretty much it now you want to go
896:51 - ahead and copy this number too or like
896:54 - this address as well and then go back to
896:56 - your utils so now inside of next step
896:59 - and then hit the contract file and then
897:01 - after here you can go ahead and put in
897:05 - the
897:06 - I don't know just like say something
897:07 - like okay this is ganache and then let's
897:12 - put
897:12 - export cons to contrast again
897:16 - and then say girly
897:21 - and then just like comment on this
897:23 - entire line and whenever we are ready
897:25 - you can literally just change it to this
897:27 - specific address and then this will be
897:30 - available for anybody out there you can
897:32 - share it with your friends family
897:33 - whatever
897:35 - um
897:35 - and they will be able to use your app
897:37 - it's that sad that was a pretty rough
897:39 - deployment but we made it
897:42 - um and if you made it this far
897:44 - and you have that same error I usually
897:47 - just get rid of that yes then file and
897:50 - it usually goes away in a little bit
897:53 - but if you made it as far you're a champ
897:55 - let's keep on going all right now with
897:57 - the deployment done let's go ahead and
897:59 - start connecting our wallets to this bad
898:02 - boy so there's a few things that we're
898:04 - gonna need to do so go into your applejs
898:07 - file and then here we're going to import
898:09 - a couple of things we already have our
898:11 - contacts set up so don't have to worry
898:12 - about that that's pretty cool thanks
898:15 - Kevin shout out
898:17 - all right
898:18 - so we're going to import the CSS file of
898:22 - rainbowkid alright so Rainbow Kids
898:25 - [Music]
898:27 - that's CSS and then we're gonna import a
898:31 - couple few a couple more things so
898:33 - there's chain
898:34 - singular there's configure chains
898:38 - and then there is create
898:41 - client
898:43 - and then there is uh wag me config and
898:47 - all this comes from wagme
898:50 - now I don't know what's good there
898:54 - it got imported a couple times
898:56 - well there you go all right now that
898:59 - should that should look way better all
899:00 - right
899:02 - then we're going to go ahead and import
899:04 - a couple more things because we're not
899:06 - done yet we're gonna get default default
899:11 - two walnuts
899:15 - and Rainbow
899:19 - kit provider
899:22 - and you also need Dark theme because we
899:25 - want to make it look cool
899:27 - and all this is coming from that rainbow
899:30 - okay where rainbow me slash rainbow okay
899:33 - whatever you can read
899:35 - and then two more things
899:41 - you got
899:53 - we got we got anything for your provider
899:55 - uh we're gonna need the providers so
899:56 - we're gonna need infuria Pro divider
900:00 - from
900:02 - wag me slash
900:06 - providers slash in fira
900:10 - like that
900:12 - and then I'm just gonna duplicate that
900:14 - line and change that to Json
900:18 - our PC like that
900:20 - and I'm gonna import Json RPC Provider
900:24 - from there pretty good
900:26 - and just like in a couple previous
900:29 - videos that you might have seen or I
900:31 - haven't if not what are you doing this
900:33 - like put it on your watch later watch
900:35 - after this one all right const
900:38 - you want to destructure chains and
900:40 - provider
900:42 - from whoops
900:46 - um configure chains like that and then
900:49 - we're gonna have two arrays in here
900:52 - all right so the first one is going to
900:54 - be the chain so we're gonna have chain
900:56 - dot girly and now we're gonna have James
901:00 - not Json chain the low Focus
901:04 - perfect our chains are ready to go and
901:07 - then next up we're gonna create the
901:09 - providers so we're gonna have two we're
901:11 - gonna have the inferior provider which
901:14 - will need the API key all right so let's
901:16 - put that guy there and then we're gonna
901:18 - say process the environment Dot uh let's
901:23 - go to the dnv file all right
901:27 - so that's the that's the key that we'll
901:30 - need put that there and that will
901:32 - basically look important and then you
901:34 - also want to up the priority so the
901:37 - priority is going to be one meaning
901:39 - any kind of change that change that
901:41 - we're gonna uh connect to with this app
901:45 - um first we're gonna look for it on
901:48 - infuria if inferior doesn't have to if
901:51 - your uh happens do not support that
901:54 - specific chain
901:55 - and we're gonna need to uh add the Json
901:58 - RPC provider
902:01 - so Json RPC provider
902:04 - like that
902:06 - open Paran open that squiggly new line
902:11 - set the priority number two
902:15 - meaning it's going to be coming after
902:17 - the Imperial one and then just put in
902:20 - the RPC link chain and then in the shade
902:24 - a function which will return this HTTP
902:28 - object which is going to be uh once
902:32 - again
902:33 - seven five four to five this is coming
902:35 - from ganache so where's my gun Rush
902:39 - there it is once again this is your link
902:42 - with the there and you should be good to
902:44 - go actually what I want to do is just
902:46 - copy this whole entire thing just in
902:49 - case there is some weird stuff that
902:51 - should be
902:53 - that should be coming back to low holes
902:54 - but like weird things happen sometimes
902:56 - let's just make sure that everything is
902:59 - identical all right let's go ahead and
903:01 - create some connectors
903:04 - here
903:07 - the default wallets
903:09 - and then pass in a few things you're
903:11 - gonna pass in app name is going to be
903:14 - what is this Tick Tock just like that
903:18 - perfect and then you want to pass some
903:20 - chains nice you got the connectors there
903:23 - and then last but not least
903:26 - you want to create a wag me config so
903:30 - let me config equals
903:34 - um create client
903:45 - and you want to enable auto connect
903:48 - it's going to be true the new one in a
903:51 - you want to pass in connectors and you
903:53 - want to pass in provider and
903:57 - now it should be good to go all right
904:00 - now we want to wrap this around our
904:03 - application so we're gonna need the wag
904:05 - make config and then you wanna
904:08 - pass in
904:10 - the variable that you just created
904:15 - as your client hey there you go
904:18 - all right close that bad boy wrap it
904:21 - around bam air is gone cool all right
904:25 - now you're gonna need rain bokeh
904:27 - provider
904:29 - theme dark theme but make it a function
904:32 - enable cool mode
904:34 - because that's pretty cool and then uh a
904:37 - little similar passing chains uh
904:42 - and that should be that guy so yeah once
904:46 - you put that there
904:48 - you're good all right close that and
904:51 - after that provider that should be ready
904:54 - to go too all right
904:56 - that should be pretty much enabled you
904:58 - to do it all right there's some
905:00 - hydration error going on let's refresh
905:02 - let's see if it's still there no it's
905:04 - not that's pretty good all right now
905:07 - we're gonna add the connect button and
905:10 - the
905:11 - um conditional rendering
905:15 - all right so for that you want to go
905:16 - into our index.js file and then we're
905:19 - gonna import a couple of things here so
905:21 - first of all we're gonna need
905:24 - um
905:25 - use account all right from
905:30 - wag me because wag me is cool and they
905:33 - take care of
905:35 - all the account related stuff and the
905:38 - all the wallet connection related stuff
905:40 - all right so you wanna have a use effect
905:42 - I don't know if we imported that or not
905:44 - yup we haven't
905:48 - um
905:49 - see we're gonna need that soon
905:52 - and then one of our address changes and
905:54 - by the way what is the address you get
905:56 - out
905:57 - you want to go ahead and destruct your
906:00 - address from a user account first
906:02 - like that
906:04 - so whenever that changes you want to
906:06 - update a state which we have to
906:09 - find here
906:11 - it's a user account and you will have
906:14 - some user account like that which will
906:18 - be a used State bam
906:22 - it's like that and I like to put that
906:24 - stuff up there nice
906:27 - so one whenever the uh connected wallet
906:30 - changes you will basically update the
906:34 - use date so
906:36 - just like that and then I'm gonna go
906:38 - grab this guy
906:40 - this actually should be user account wow
906:44 - whenever that that guy is actually true
906:48 - meaning that there is a value you want
906:51 - to render out this whole thing let's see
906:53 - what do we got there okay so that's
906:55 - interesting that's probably because I
906:58 - still have it connected to my wallet is
907:02 - still connected so let's see if I
907:04 - disconnect
907:06 - this and then this all right there you
907:08 - go so now it seems like it's a
907:11 - completely empty thing that's that's
907:12 - fine that's fine so now what we're gonna
907:14 - do is go ahead and import a connect
907:17 - button
907:19 - so it's going to be connect button from
907:22 - Rainbow me slash rainbow kick and then
907:25 - grab that guy
907:26 - and that guy will basically take care of
907:29 - our entire wallet pop-up and things like
907:32 - that so
907:33 - thank you Rambo kit
907:36 - let's see what do we got bam connect bam
907:39 - cool mode
907:42 - [Music]
907:42 - um
907:43 - let's go with the second one next
907:45 - connect
907:47 - bam okay so this wrong Network that's
907:50 - fine
907:51 - no issues actually it's not the wrong
907:54 - Network
907:56 - it might be oh so there's some sort of
907:58 - issues uh there's some sort of issue
908:00 - with the chains right now let's figure
908:02 - what's uh what's happening there
908:08 - okay so I think I figured out what the
908:10 - issue is if you go back into your app.js
908:12 - file
908:13 - um
908:14 - we gotta put in these chains all right
908:16 - and yeah plural and singular sometimes
908:19 - gets messed up so you want to just make
908:21 - sure that these are the chains that
908:23 - you're passing in there that should yeah
908:26 - there you go it literally just fixed it
908:29 - in real time you don't even have to
908:30 - worry about it and now it gives you this
908:32 - nice little connect disconnect and then
908:36 - Network switcher thing so that said
908:38 - while the connection is ready let's go
908:40 - ahead and connect the functionality to
908:42 - this app and we should be good to go
908:44 - let's go ahead and get started
908:46 - connecting all the features so
908:49 - our boy Kevin kevs has already set up
908:53 - our contacts so that's pretty good now I
908:56 - don't have to worry about that so go
908:57 - into your contacts file that's where
908:58 - we're going to be work I thought it was
909:00 - just open it and then close the trailer
909:03 - that was done all right let's go into
909:06 - context
909:10 - and here's gonna be a few things that
909:12 - we're going to be setting up uh straight
909:15 - away so we're gonna have to import a
909:17 - couple things uh just like with it it on
909:20 - the index file we're gonna need the use
909:22 - account from wagme and we're gonna need
909:25 - to import
909:26 - hello I'm gonna need to import create
909:30 - contract hey create contract
909:37 - help if I could like type
909:40 - without typos apparently all right next
909:44 - up we're going to create a couple of
909:46 - these states in here and so we're gonna
909:48 - need a user account and a set user
909:51 - account use stage
909:53 - which will start off as empty uh or like
909:58 - empty strings then you're gonna need a
910:03 - um
910:04 - contract instance basically
910:08 - and that that's what we're going to be
910:10 - using to interact with the uh smart
910:13 - contract itself and then we're going to
910:16 - store the video data somewhere so we're
910:18 - gonna have videos
910:20 - uh and set videos and that's going to
910:22 - start off as a empty array
910:26 - and so with that said let's go ahead and
910:29 - destructure address from our user
910:32 - account and let's fix the typo again and
910:35 - we're gonna get started with
910:39 - and we're gonna go we're just gonna like
910:41 - jump straight into it so we're gonna
910:42 - need a use effect all right so we're
910:45 - just gonna initialize everything so
910:47 - whenever the address changes and if you
910:50 - don't know what use effect is it's
910:52 - basically just a piece of code that runs
910:54 - once when you fire out the application
910:56 - and if you pass in any kind of variables
910:58 - here it's just going to keep on running
910:59 - whenever that thing changes and that's
911:02 - what we want to do because if you change
911:04 - the wallet that's being that's connected
911:06 - to your app you want everything to
911:08 - refresh all right because like imagine
911:10 - you log in with your wallet and the next
911:13 - user comes in logs in with their wallet
911:15 - but they start spending your money all
911:16 - right
911:18 - pretty easy to understand why it's
911:19 - important all right
911:21 - now you obviously want to go ahead and
911:24 - update the contract instance as well
911:29 - and we don't need to pass in that it
911:31 - actually doesn't really change but uh
911:34 - just in case there is some sort of there
911:36 - is a network change or something like
911:38 - that the wallet address might change and
911:40 - that's the easiest way to like kick
911:42 - things off all right and there's going
911:44 - to be a couple of functions that we're
911:45 - going to implement here so first of all
911:47 - I'm just gonna like lay out everything
911:49 - and then we're gonna go one by one all
911:51 - right we're going to start with create
911:53 - video and it's going to be an async
911:55 - function with a caption and a URL input
912:01 - leave it right there next up we're gonna
912:03 - have a call get all videos
912:08 - which will uh again the amazing function
912:11 - with no inputs and then just close it
912:14 - right there and then um I mean that's
912:17 - something we want to definitely run
912:18 - every single time with the application
912:21 - starts or the contract is being updated
912:24 - so whenever the contract is updated we
912:27 - want to run this get all videos function
912:30 - like that and then there's going to be a
912:33 - couple more so obviously you want to go
912:36 - ahead and like a video
912:40 - so there's gonna be another racing
912:42 - function and by the way everybody
912:43 - everything is going to be async in here
912:46 - and if you like a video if you also want
912:48 - to dislike a video
912:52 - like that
912:54 - and then you want to know whether a
912:56 - video is liked or not
913:02 - and you also want to be able to get the
913:04 - number of likes on a specific video
913:07 - just like that and actually I kind of
913:09 - want to
913:10 - put these at like right after all all
913:13 - this get function and so this will
913:16 - create a video this will get get all the
913:19 - videos this will get for one specific
913:21 - video like this is a Creator function
913:23 - these are like uh this is get everything
913:26 - function this is get one specific videos
913:29 - stuff and then this is interacting with
913:32 - one specific uh or these are interacting
913:35 - with one specific video so I just like
913:37 - to like kind of like group these based
913:39 - on these uh parameters you can switch on
913:41 - them around like have whatever order in
913:43 - there
913:44 - it doesn't really matter it's just for
913:46 - my personal taste and I prefer them like
913:49 - that
913:50 - now you want to export a couple of
913:53 - things so you definitely want to in
913:54 - sport create video because you will use
913:58 - it in other components and then you want
914:00 - to export like video
914:03 - because you want to use it in other
914:04 - components that you want to export
914:06 - dislike video
914:09 - because you want to use it in other
914:10 - components and then you want to export
914:12 - videos as in the state because you want
914:15 - to use it in other components there's
914:17 - light
914:19 - once again because you want to use it in
914:21 - other components a and then get number
914:24 - of likes
914:27 - because you guessed it when I use it in
914:29 - other components nice
914:31 - uh there is some sort of error going on
914:33 - there maybe that's because I should be
914:36 - exporting videos instead of video well
914:38 - that would be helpful if I try to export
914:41 - something that actually doesn't does
914:43 - exist all right let's hook all of these
914:45 - up with all of their uh respective
914:51 - let's hook all these functions up to
914:54 - all the components somewhere else in the
914:57 - app and then we're just gonna like go
914:59 - through them fill them out and we're
915:01 - done
915:02 - so once again what's happening is we are
915:04 - connecting all the functions before we
915:07 - even type them out because it's just all
915:08 - kinds of like random setup stuff it
915:11 - doesn't like it breaks the flow so I
915:13 - just want to like get them over with
915:14 - real fast and then we just like get to
915:16 - the meaty stuff fast all right so export
915:21 - your create uh import your create video
915:23 - destructure it and then uh and then down
915:26 - here in your handles instead of normal
915:29 - like regular way of doing things we're
915:32 - going to toast dot promise
915:36 - I'm gonna say toast dot promptness which
915:40 - what it will do it will give us a nice
915:42 - little animation that will wait for the
915:44 - function to resolve itself and if it
915:46 - resolves you're gonna get a jack Mark
915:48 - and if it doesn't then you're gonna get
915:50 - an X and so it's like super Visual and
915:53 - it also like uh it's also really good
915:56 - for the user experience
915:58 - it's a little weird when it comes to uh
916:01 - the code itself because it has this
916:03 - react hot toast um
916:05 - library that we're gonna need to use but
916:08 - that's the trade-off for it some nice
916:10 - little animations all right so you're
916:13 - gonna uh pass the create video function
916:16 - in here where you're going to pass in uh
916:19 - the caption and the video URL which are
916:23 - by the way
916:24 - um all these states that we order this
916:26 - set up here so that's completely ready
916:29 - and waiting for you
916:32 - and then there's a few things that you
916:34 - can pop in here these are basically all
916:36 - the messages that uh the toast message
916:39 - will give you so if it's still being
916:41 - it's loading and it's gonna say
916:43 - uploading video this can take a moment
916:45 - with a little nice animation once it's
916:48 - succeeded that's what it's going to say
916:49 - and there is an error message just so we
916:51 - handled that too so you're gonna know if
916:54 - something went wrong
916:55 - there are these two lines commented out
916:58 - so we're just going to
917:00 - comment them back in and that function
917:04 - should technically be pretty good to go
917:06 - let's go back to our context and just
917:09 - console log those things out whenever
917:11 - this function runs
917:18 - just like that and that should be
917:21 - that should be let's see what have we
917:24 - got let's see if it's working
917:26 - if we need to do anything so press that
917:28 - type in caption and then URL and then
917:32 - just hit create new there you go
917:34 - it's ready to go and you also saw
917:37 - there's there's a toast message so
917:40 - that's pretty good all right let's move
917:42 - on with our next one all right so let's
917:44 - go into our sidebar.js file and this is
917:48 - actually
917:49 - just this there's like a lot of things
917:52 - going on there
917:53 - so there you go let's go ahead and
917:55 - figure out what is happening here so
917:58 - there's a few things that we're going to
917:59 - be destructuring here like hang on there
918:01 - so we're gonna need light video we're
918:03 - gonna need this like video we're gonna
918:06 - need
918:07 - um get number
918:10 - of videos all right and what you need is
918:14 - like
918:16 - up like that
918:19 - got this
918:25 - so let's just double check yeah that
918:26 - circuits okay so there's no typos there
918:29 - so that's pretty good
918:32 - now
918:34 - now we're gonna be updating a few things
918:37 - here whoa my co-pilot is going hard so
918:40 - we're gonna need a use effect in here
918:43 - and I believe we have that imported and
918:45 - then if not it's gonna be an epic fail
918:51 - foreign
918:52 - all right we're gonna need to just
918:54 - create a function in here because that's
918:56 - one thing that um use effect doesn't
918:58 - really let us do so if you want to do
919:01 - wait check if light if you're going to
919:04 - do any kind of async stuff in uh inside
919:07 - of this effect you will need an internal
919:09 - function for that so that's exactly what
919:12 - we're making and then like straight away
919:14 - right after that just call it and then
919:17 - you should be good to go or you can also
919:19 - create a something called a
919:20 - self-executing function or a
919:22 - self-invoking function not entirely sure
919:25 - um of the name I like I love them a lot
919:28 - I usually use them at this time though
919:30 - but it's whatever all right so here
919:33 - we're gonna create a comp light variable
919:36 - which is literally just gonna invoke the
919:38 - is light function and pass in ID now
919:41 - after that we're gonna also create a
919:44 - likes
919:46 - variable which is going to wait for the
919:49 - get number of likes function to return a
919:52 - value and then we're just gonna update
919:55 - all the states that we have here so set
919:57 - number of likes
919:59 - that's pretty easy and then right above
920:01 - that select light light
920:03 - to all of these we will be writing them
920:06 - in just a second these will return uh I
920:09 - already have that I don't know how did I
920:11 - have it anyways these functions will
920:13 - return like obviously satellite will
920:15 - return a Boolean and get number of or
920:17 - Set uh
920:19 - or is like this going to return a
920:21 - Boolean and get number of likes is going
920:23 - to return a numbered uh number itself
920:25 - but we're gonna need that
920:29 - we're gonna need that to update all the
920:31 - stuff that we have here
920:33 - and there's a use effect issue that we
920:37 - have that's completely fine because we
920:39 - can just copy that and there was
920:41 - probably a typo there you go that will
920:43 - update
920:45 - update the value there so let's see uh
920:48 - if we go into context and we just say
920:52 - that it should return
920:55 - uh return false but I wanna I want it to
920:59 - return true like that
921:03 - and then get a number of likes is going
921:06 - to return
921:07 - some weird number like put something
921:09 - there some very weird Let It Go like
921:12 - it's it's working perfectly now which is
921:14 - like after actually populate like real
921:17 - data to it and there you go now it's
921:19 - light and then if you want to change it
921:21 - to false it's going to be false and
921:24 - there you go you can also update that
921:26 - number
921:27 - yeah 55.55 there you go it's working
921:30 - perfectly now we're just gonna get all
921:33 - the functionality behind it that is
921:36 - actually going to make this app work
921:39 - and then there's one more file where
921:41 - we're going to be needing uh functions
921:43 - from the context is it's going to be the
921:46 - main
921:47 - view.js now here
921:50 - uh as you can see there's this dummy uh
921:54 - Tick Tock I'm just going to remove it we
921:56 - don't we don't need that
921:58 - now what we do need though is oh we
922:02 - actually have the destructuring ready
922:04 - for us uh we need the videos
922:08 - and here we're just gonna have another
922:10 - use effect
922:11 - empty this out and put that out and we
922:15 - only we need to fire this up every
922:18 - single time whenever a video is change
922:20 - so we want to update the the tick tocks
922:23 - use of uh the tick tocks use tape so
922:26 - we're just going to come in here and
922:27 - then set tick tocks and then videos
922:30 - so what this does is from here we'll
922:33 - populate all the video data into this uh
922:36 - use State and then inside of main view
922:38 - we're going to use that and we're going
922:40 - to use that to populate this data right
922:43 - now because there's like no videos in
922:45 - there it's just going to say no video
922:47 - that's completely fine we're gonna get
922:50 - to it in a minute and then uh and then
922:52 - it's going to have our videos all right
922:55 - with that said let's uh we're pretty
922:58 - much we're good to go on hooking up all
923:00 - the all the functionality to all the
923:03 - other
923:04 - uh components now it's actually just
923:06 - time to write all these functions and
923:09 - we're going to be done with this project
923:10 - in no time all right now that we are
923:13 - able to get videos or like with that
923:15 - error but we're gonna fix that in a
923:17 - little bit
923:18 - um that's cool hat and actually
923:20 - implement the create
923:22 - videos function
923:26 - and by the way this is going to be like
923:27 - almost scary easy now one more thing
923:29 - that you're gonna make sure here is that
923:33 - well
923:36 - one more thing you want to make sure
923:37 - here is that you're checking for the uh
923:41 - address as well so if there's no user
923:44 - logged in this function doesn't run and
923:46 - it's not supposed to run all right
923:49 - so this guy what what this is gonna do
923:52 - is we're just gonna wait
923:55 - uh and we're gonna grab the contract and
923:58 - then once again methods so that's what I
924:01 - was saying look out for all the patterns
924:03 - that you can recognize and just like
924:05 - memorize them all right
924:07 - all right let's see what do we got in
924:09 - the contract itself we have create video
924:12 - okay so let's put that guy there and
924:15 - then we're gonna pass in a bunch of
924:16 - things but this is what I was talking
924:18 - about in the previous section that
924:22 - you know normally you would you would
924:24 - just hit the transact button uh but in
924:26 - this case we're actually going to be
924:27 - saying send and what that will like make
924:31 - our like what that will do is pop open
924:33 - your meta mask and then um
924:36 - do some do the kind of transactions that
924:38 - you saw on other websites you want to
924:40 - make sure the sender of the money is
924:43 - going to be the address meaning the
924:45 - person that is actually locked in all
924:47 - right
924:49 - and that's what we're uh searching for
924:51 - it now I just want to like put that
924:53 - there instead and we can also put that
924:56 - guy there as well so if the state is not
924:58 - updated the app is not gonna load so
925:00 - that's perfect if if we're checking for
925:03 - that all right so from
925:07 - so from user account so the person who
925:10 - is logged in is going to be paying for
925:13 - this transaction basically all they got
925:15 - to pay for is the gas fees which is not
925:17 - that crazy high especially now that uh
925:20 - there was this East merch all right I'm
925:22 - gonna specify the gas and in this case
925:25 - we're just gonna go with one million
925:28 - and remember this is in way so this is
925:31 - like not eth all right so if you like
925:33 - chill out and then you want to set the
925:36 - guest prize to be null
925:39 - so basically what this is is you're
925:41 - setting the max gas to be spent is going
925:44 - to be 1 million way which is like
925:46 - fraction of an ethereum and then you
925:48 - also want to set the gas price less than
925:50 - like the minimum or like whatever money
925:52 - to be like burnt or like whatever it
925:54 - used to be burned is gonna be no
925:56 - and that should technically be pretty
925:59 - much good to go now one more thing you
926:01 - want to add is you want to pass in the
926:03 - caption
926:04 - and you want to pass in the URL that you
926:07 - are getting from this function all right
926:08 - so let's see how that works
926:13 - it's about a week out this guy let's
926:16 - open that and then this
926:19 - is
926:21 - my first video
926:33 - and I got this video URL on my clipboard
926:36 - so I'm just gonna put that
926:38 - and I'll hit create new let's see what
926:40 - that does hit confirm
926:44 - it says video uploaded
926:47 - all right let's see what we got
926:50 - um
926:50 - so it still says the get videos is not a
926:53 - function that's a little interesting to
926:55 - me let's double check the log here so
927:00 - as it blocks into as blocks seem to be
927:03 - working so that's pretty good and the
927:06 - contract address that we interacted with
927:08 - is the B9 so that should be good too
927:11 - and I think I oh and I mean obviously I
927:16 - was talking about how like pattern
927:18 - recognition but I'm not recognizing the
927:20 - pattern itself either
927:21 - so like when you got contract there's a
927:24 - lot of things you can do with it so when
927:26 - you want to call a method inside of a
927:28 - contract you want to like specify that
927:30 - it's like
927:32 - expecting someone to listen to you when
927:34 - you're not even calling them right oh
927:36 - boy
927:38 - and again as usual
927:40 - um methods
927:42 - all right don't make these silly
927:45 - mistakes that I do like I literally had
927:47 - a mistake in these zigzag exact same row
927:50 - twice all right don't don't mess it up
927:54 - like same line to it to the same errors
927:57 - J's all right let's update let's see
928:00 - what's happening here all right cannot
928:03 - read properties of undefined address all
928:05 - right let's see
928:07 - that's uh
928:09 - there's gonna be a few different
928:13 - wait what's happening there
928:16 - all right let's restart this guy
928:19 - all right refresh
928:23 - well that guy never had an issue or just
928:26 - that's pretty good
928:28 - all right there you go that's your uh
928:30 - First Tech talk I don't know why it's
928:32 - not showing up though so that's
928:34 - interesting let's figure that part out
928:36 - so we've got the URL oh that should
928:39 - technically work
928:43 - all right so as you can see there is my
928:46 - uh link however to go ahead copy that
928:51 - let's just animate that's not gonna work
928:53 - all right let's go ahead and create a
928:57 - new Ted Talk post I'm just gonna go
928:59 - ahead and grab a new link
929:02 - all right so finally I got a correct
929:04 - link let's just put this guy in here and
929:08 - let's
929:09 - is my first video that
929:13 - actually works
929:17 - let's see how that goes
929:19 - all right create new yup go in front of
929:22 - that guy and there you go video uploaded
929:24 - all right let's refresh
929:26 - and if I scroll down
929:29 - there you go
929:34 - there is your first Tick Tock that you
929:36 - just uploaded this uh yeah this will be
929:39 - this will need to be redeployed this is
929:41 - for a tutorial yeah I put an image here
929:43 - that's fine that's fine anyways now it's
929:46 - time we go ahead and actually like this
929:48 - video
929:49 - pretty good one you should watch it the
929:51 - cover programmer on tick tock
929:53 - all right
929:54 - that being said let's go ahead and let's
929:57 - move on to the other function so there's
930:00 - a few more
930:01 - as is like and there's get number of
930:04 - likes so let's actually get those done
930:06 - first because those are going to be the
930:08 - easiest ones
930:12 - all right so
930:13 - get number of likes we got all the uh
930:17 - guard Clauses and everything set up so
930:19 - we're just gonna wait and we're gonna
930:21 - say contract
930:23 - dot methods
930:26 - finally didn't mess it up let's go to
930:29 - our solidity file and then get number
930:40 - contract methods okay
930:43 - so we're going to say oh wait
930:46 - contract Dot methods and we're gonna
930:51 - have a little bit of a Twist here so
930:54 - think that yeah whatever uh co-pilot
930:57 - things that's that's fine that's fine so
931:00 - let's go into our solidity file so if
931:02 - you think about it we haven't really
931:04 - created any kind of good number of likes
931:07 - function in here so instead we are going
931:10 - to use this mapping so let's see how we
931:14 - can call this activate that
931:16 - um that guy there and then just close
931:18 - the output we're not going to need it
931:20 - just open this
931:21 - and then uh here you see if you passing
931:25 - the the ID of the video
931:28 - all right
931:29 - if you're passing the idea of the video
931:31 - that's where uh that's how you're gonna
931:34 - get that number of likes back all right
931:37 - so that's the one we're gonna call so
931:39 - we're gonna say
931:43 - all right so wherever we're at oh yeah
931:44 - here likes
931:48 - and we're gonna pass an ID which we got
931:51 - from the front
931:52 - we're gonna go ahead and call that
931:55 - and let's just cancel log before we do
931:57 - anything and so for that it is helpful
932:01 - if we put it in a
932:03 - variable so it's going to be likes of
932:07 - course likes equals that I'm just
932:12 - passing lights there
932:14 - and let's see what we got
932:18 - there you go there's four zeros that
932:20 - means like okay it was console locked
932:22 - twice but that's completely fine now
932:25 - we're just gonna like pass it to pass it
932:28 - back to the uh
932:30 - to the front end actually it's kind of
932:32 - cool that I have this black thing here
932:33 - because it's like way easier to see it
932:35 - than here that's actually that was
932:38 - actually a power move yes all right
932:41 - well what we're gonna do now is
932:46 - is actually just go ahead and say return
932:48 - likes remove the console a lot because
932:51 - we don't need that and let's see there
932:54 - you go it says zero now I could like it
932:57 - but I mean it doesn't go through yet and
933:00 - it's just like random stuff happening
933:01 - don't worry about it
933:03 - all right
933:04 - obviously we haven't even defined this
933:06 - so uh next up we're gonna look for is
933:09 - light
933:13 - and so once again we're going to be
933:15 - using the
933:17 - solidity file here
933:19 - and we're gonna go for the liked users
933:26 - then we're gonna go for this like
933:28 - complicated mapping so let's just go
933:30 - ahead and grab like users and then uh
933:33 - wait where is this light here is his
933:36 - light all right there you go
933:38 - so let's go ahead and type in weight
933:41 - contract dot methods and then pass in
933:46 - that guy
933:47 - and then if you remember it needs two
933:50 - inputs so one of them is going to be the
933:52 - user address because we are interested
933:54 - in whether the user is currently using
933:56 - the app
933:57 - hat has liked this video or not and then
934:00 - we're going to pass in the ID which
934:02 - we're getting from the front end and
934:04 - then just call that
934:05 - and then once again you want to save it
934:08 - user liked in a separate variable
934:14 - and then just return it
934:18 - and let's see how that works out
934:21 - okay so it says user address is not
934:23 - defined that's interesting because I
934:25 - clearly remember defining it oh it's a
934:29 - user account that would be helpful if
934:32 - everything was the same all right
934:35 - let's see and there you go now that part
934:39 - works
934:40 - okay so there's literally the only thing
934:42 - that's left is liking and disliking a
934:44 - video
934:45 - so let's go ahead and implant those
934:48 - right now
934:50 - both of them are going to be almost the
934:53 - exact same so I'm just going to type it
934:55 - out once and then copy paste and then
934:56 - we're good to go so what we're gonna do
934:59 - here is we're gonna call another
935:01 - function from the contract
935:04 - so we got methods and then how do we
935:07 - even call this so come back here let's
935:10 - see it was like video and it needed the
935:12 - ID all right so paste that and then
935:15 - we're going to pass in the ID that we
935:16 - got from the front end nice
935:20 - and then uh we're gonna need to pass in
935:22 - a few things but that's literally the
935:24 - same thing that we are passing in when
935:26 - we're creating it so I'm just gonna once
935:29 - again for Leicester just copy it and
935:31 - then see how that works out
935:36 - now the same thing can be said about
935:38 - this like video the only thing is you're
935:41 - gonna change the method that we're using
935:43 - and that's going to be this live video
935:46 - Let's place that there
935:48 - and I'm just gonna refresh so everything
935:51 - is good to go and hit that
935:54 - okay my metamask is popping up there's
935:56 - nothing no fees to pay
935:58 - no fees to pay and if I refresh
936:02 - my video is like then there is one more
936:04 - lot there is one like
936:06 - so that my friends is literally the
936:08 - entire build now you can go ahead and go
936:11 - customize this build show it to your
936:13 - friends family whatever but this is
936:15 - pretty much this build and this is a
936:18 - wrap I think this is a pretty good way
936:20 - this was a pretty good video to
936:22 - understand a bunch of errors that you
936:23 - could be making while you are
936:26 - working on these projects
936:28 - and I hope you get some value out of it
936:31 - and if you did let me know Down Below in
936:33 - the comments that's it see you next time
936:35 - peace in this video we're going to be
936:37 - building the open C clone but with a
936:40 - little bit of a Twist because this time
936:42 - we will actually watch Chad GP to build
936:44 - it using infuria to connect to the
936:46 - ethereum blockchain so with that being
936:48 - said let's go ahead and get started all
936:51 - right now ai is smart and all but it's
936:53 - not as smart
936:54 - as everybody thinks it is it still
936:57 - cannot set up the project for you so
937:00 - while it can write the code for you it
937:01 - can't set it up so still we're gonna
937:04 - need to run the cpcli so we just run it
937:07 - that will get everything started put in
937:09 - your name email and then openc chat GPT
937:12 - the project we're going to be running
937:13 - now it opens inferior for you again you
937:18 - are still in control so if you don't
937:21 - have a infuro
937:24 - account already just go ahead make one
937:26 - and let's actually set it up but before
937:30 - that the terminal will finish running
937:32 - and it will open vs code for you that's
937:35 - where we're going to be putting
937:36 - everything Che GPD spits at us so you
937:39 - can go ahead spin up the app and in the
937:40 - meantime
937:42 - just create a new API key we're going to
937:45 - be using the web3 API and then putting
937:48 - the name however you want to make sure
937:50 - that you are not putting any spaces
937:53 - in that project name it could cause
937:55 - problems later and it's also just good
937:57 - practice not to do it
937:59 - all right let's go create that so that's
938:01 - nice over there we're gonna get back to
938:03 - that in a little bit there's your API
938:05 - key there is your and there are your
938:07 - endpoints and this is your app currently
938:10 - so it already has connect metamask
938:13 - wallet and all that functionality
938:15 - included so don't worry about that we're
938:18 - just going to be specifically focusing
938:19 - on the contract part with Chad GPT so
938:23 - let's move on to actually writing the
938:27 - contract
938:28 - all right this is going to be
938:30 - interesting this is gonna be a new one
938:31 - so here's my chat GPT
938:33 - and however it's still like you gotta be
938:37 - like super specific so let me just show
938:38 - you an example I just want to give you
938:39 - an idea of what kind of
938:42 - commands you can give to chegebt
938:46 - and as you can see I'm using gpd4 that's
938:48 - like a little fast a little smarter
938:50 - actually that's slower however it's a 20
938:53 - upgrade but gpd3 which is free and
938:57 - available for everybody at no charge you
939:00 - can still do this exact same thing now
939:03 - what you might experience is if you're
939:05 - using chechi pt3 is that you want to
939:09 - have like tiny bite size
939:11 - prompt rather than longer prompts
939:14 - because that can only process so much
939:15 - text
939:17 - however this app can be completely and
939:20 - 100 built with that I just wanted to
939:23 - show it with this one this fits better
939:25 - on a screen and I can explain it better
939:28 - so let me just show you so here's what
939:31 - we're going to do you want to type in
939:32 - something along the lines of create a
939:34 - solidity smart that uses ERC 729 for an
939:38 - open zaplin name it nft collection like
939:41 - you got to be specific with it give it a
939:43 - name what exactly do you want it to have
939:45 - so the URI storage ownable you still
939:47 - have to understand the fundamentals of
939:49 - solidity encoding in order to be able to
939:52 - use it now we want to be using the
939:55 - counters as well and we want the library
939:58 - that keeps track of the token IDs and
940:02 - let me just freeze it here here we have
940:05 - 12 very specific
940:08 - commands that we want from this app so
940:10 - again if you're using gpt3 you can just
940:13 - break it down to 12 separate prompts it
940:15 - will be way faster
940:17 - you can just do it that way so we want
940:19 - to have a price
940:21 - of the of this NFD you have to specify
940:24 - you have to call it a constant otherwise
940:26 - it will not know what you want to do you
940:30 - want to have a struct so you still have
940:31 - to understand what's happening like you
940:34 - have to know
940:35 - almost if you were writing it so you
940:37 - need we need this truck that will
940:39 - contain all the data that will have two
940:42 - un256 holes ID and price you want to map
940:45 - the map that nft data right I'm sorry
940:48 - you want to map a number to the nft data
940:50 - meaning the ID to the NFC data itself we
940:54 - will need the Constructor that will set
940:56 - the name and symbol and you have to give
940:59 - it the values and if the collection and
941:00 - FTC respectively
941:02 - so basically the name will be an ft
941:05 - collection and then FTC will be the
941:07 - symbol but again it understands if you
941:09 - say respectively then we will need a
941:13 - function set price that will receive the
941:16 - token ID and will receive the prices to
941:20 - arguments and then we'll check whether
941:22 - that token exists or not and then we'll
941:24 - set the price and we're going to have an
941:26 - add nft which will increase in the
941:29 - counter and then create the NFC data
941:31 - object and then I mean the token so it
941:34 - will basically generate all the right it
941:36 - will basically do all the maintenance
941:38 - around me then we're going to have a
941:40 - total Supply that Returns the number of
941:43 - minted tokens purchase nft which will
941:46 - complete a purchase transaction get all
941:49 - token Uris return all token URLs and you
941:52 - name it and then we will have the burn
941:54 - function from the inherited contract
941:56 - overridden in a token URI as well so
941:59 - let's see what GPD says and it actually
942:02 - gave a a pretty long contract so I'm not
942:05 - going to just go through it right now
942:07 - let's just put it into our vs code so
942:10 - I'm going to go ahead go into contract
942:12 - and create a nft collection.sol file and
942:16 - then just paste it there so what I
942:17 - recommend you do is whatever it gives
942:19 - you just start pasting it back into your
942:22 - vs code and then just keep compiling the
942:25 - code that way
942:27 - you don't have to do any of the
942:28 - understanding and obviously there's a
942:31 - bug you obviously have to understand
942:32 - what's happening but you don't have to
942:34 - do all the thinking and everything that
942:36 - is involved with coding itself so what
942:39 - you can do is you just paste it and then
942:42 - just type in your terminal truffle
942:45 - compile and that will check it for you
942:47 - it will obviously compile it for you and
942:50 - it will spit any kind of errors or
942:51 - anything that you have and that's when
942:53 - you start debugging
942:55 - so there you go this one was compiled
942:57 - perfectly we don't even have to go
942:59 - through it we just know it works we know
943:01 - it has all the functionality however if
943:04 - you were a beginner in solidity I still
943:06 - recommend you go through the contract
943:08 - and try to understand what's what pick
943:10 - it apart because that will serve you
943:12 - well all right let's move on to the next
943:13 - step
943:14 - all right so now let's deploy the
943:17 - contract if you don't know how you can
943:19 - ask kgbt or
943:21 - if you already know you can just do it
943:23 - so what we always do in the Truffle
943:27 - extension if you don't have it free from
943:29 - the
943:30 - vs code extension Library just go in
943:33 - there you can disconnect all previous
943:35 - projects or just connect it as new ones
943:38 - this is an inferior service and it's so
943:41 - good how they are integrated because it
943:44 - just pops up all your projects you can
943:46 - just connect to open openc and now you
943:49 - can go ahead just click deploy and it
943:51 - will do everything for you
943:53 - so there are all your
943:56 - networks use the mnemonic and there you
943:59 - go now it's deploying so everything
944:01 - should be fun and it looks like we are
944:05 - getting some positive results there you
944:07 - go deploy succeeded so that looks good
944:10 - we can now copy the contract address and
944:13 - actually let's paste it into our
944:16 - listings JS it will be useful later so
944:19 - let's move on
944:20 - all right so in this one we're going to
944:22 - be setting up the contract instance so
944:24 - that the app can work an interface with
944:27 - the contract
944:28 - so let's go ahead and do that so we're
944:31 - going to be using the listings JS file
944:33 - and we're actually going to be needing
944:34 - it but let's just put it there in line
944:37 - 20. that that's where we're going to set
944:39 - up the contract instance this will help
944:41 - check GPT just kind of like work its way
944:44 - through this file because we're gonna be
944:46 - giving it the entire thing so here's
944:49 - what we're gonna do put it there set up
944:51 - contract instance and then just
944:52 - highlight everything copy it and let's
944:54 - go over to Chrome
944:55 - now what we want to do is we want to set
944:59 - up a contract instance for our contract
945:01 - state in the use effect and then just
945:04 - paste it there so basically just tell it
945:06 - that hey there's this use effect I want
945:09 - to interface with the contract
945:11 - and then we'll just figure out the rest
945:13 - you can specify oh this is where I want
945:16 - it to be or you want to be you can also
945:18 - just say that hey I want to interface
945:21 - with a ethereum contract give me the
945:24 - code for it something along those lines
945:26 - I want you to try it multiple ways so
945:29 - you just have a muscle memory like what
945:31 - to all right just paste the file there
945:33 - good to go and let's see what it says
945:36 - all right so that looks good
945:39 - now we also have to make sure that we're
945:42 - importing the ABI and that obviously it
945:46 - doesn't know where it's absolutely will
945:47 - have to figure that out but just you can
945:51 - paste that line there and then just
945:52 - update where the API is at so now you
945:55 - obviously want to make sure that the
945:57 - location is correct so for me it's in
945:59 - the build slash contracts of nft
946:02 - collection Json and
946:05 - now it also gay also made this address
946:08 - constant so that's nice we can just
946:11 - replace our comment with that so that's
946:13 - actually helpful that it did that and
946:16 - now this is where this is the Moment of
946:18 - Truth this is where we're going to be
946:21 - copying over the use effect that it
946:23 - actually built for us so that first use
946:26 - effect is ladies and gentlemen that is
946:29 - where everything happens that's what we
946:31 - came here so just go ahead copy that
946:33 - entire thing and if you can see over
946:37 - there we just had an empty use effect so
946:39 - I figured it all out it put it there
946:41 - that is perfect and that
946:44 - should in theory work let's check it out
946:48 - I want to make sure that down there
946:50 - everything is console logging all the
946:52 - errors otherwise we're never going to
946:53 - figure out what the issue is and it
946:57 - looks like there's already an error
946:59 - and it looks like that it cannot find
947:02 - the map part in the ABI the so that
947:06 - looks interesting and that's very likely
947:10 - because these ABI files usually have an
947:13 - ABI object in them so I use that instead
947:17 - of the regular API file and it looks
947:20 - like that just saved this whole thing
947:21 - there you have it
947:22 - all right so now we're going to make
947:25 - Chad GPT build the add nft function so
947:30 - let's ask it to make it so you can just
947:33 - say okay now let's do the Advent ft
947:35 - function or something along those lines
947:37 - normally remembers if you gave it a
947:41 - bunch of things and it should in theory
947:44 - remember the conversation you guys had
947:46 - before
947:47 - okay that was weird to say
947:49 - but in case it doesn't you can also just
947:52 - again give it to the entire file again
947:55 - and be like hey that is the add NFD
947:58 - function
947:59 - make it so that it does this and so
948:02 - sometimes you need to refresh its memory
948:03 - all right let's see what it says so that
948:07 - looks good
948:08 - now let's go ahead and replace
948:10 - everything so we have something to put
948:12 - it put to the add nft function and we
948:15 - also have to replace the handle submit
948:18 - so it actually gave us two functions so
948:20 - that's nice now let's copy over the add
948:23 - nft to collection function
948:25 - so that's already there you can just
948:27 - replace it with whatever it gave you
948:29 - don't even worry about it we'll check it
948:31 - in a little bit whether it work works or
948:34 - not and now let's check the handle
948:36 - submit function and just replace it
948:39 - there let's see what's happening so open
948:41 - up the app
948:43 - and now
948:44 - if everything goes well
948:47 - technically we should be able to amend
948:49 - the nft so just paste your nft URI we
948:53 - already gave you all these things so
948:55 - just from the metadata let's copy that
948:57 - paste it there and then that and then
949:00 - just the price so remember because we
949:03 - asked Chad GPT to set a price for the
949:06 - minting which is 0.001 eth you will have
949:10 - to pass in that value there so just make
949:13 - sure what the value is you can go back
949:15 - to your contract file and double check
949:16 - so there's the metamask pop-up so that
949:19 - looks good and it's actually pending and
949:22 - there's the snft function going through
949:25 - and it looks like it was actually
949:27 - successful
949:29 - so
949:31 - let's search the nfts all right so far
949:33 - it's been pretty smooth let's see if
949:35 - fetching these nfts are going to confuse
949:39 - it
949:39 - so
949:41 - let's just say okay now let's do the
949:43 - fetch nft metadata function and let's
949:46 - see what it says
949:48 - so that looks interesting it looks like
949:50 - it cut in half
949:52 - so sometimes it happens so you can just
949:55 - say something along the lines okay
949:57 - continue or whatever carry on and it
949:59 - will just continue or regenerate
950:01 - response or whatever and even apologizes
950:04 - so that's nice okay so that's looking
950:07 - good let's copy this code over to our vs
950:11 - code and replace the fetch nft metadata
950:13 - function
950:15 - so let's see if it works
950:19 - and it looks like the image is missing
950:22 - the source property okay now we're
950:25 - laying like
950:26 - some deep trouble let's see what's
950:28 - happening and it also looks like that we
950:30 - are fetching the token URI which is not
950:33 - necessarily
950:34 - the good thing to do we should like
950:36 - extract the data out of it that's the
950:38 - issue it's not the token URI that we're
950:40 - looking for so we should be fetching not
950:43 - the object we should be fetching the you
950:46 - the image URI and all these things from
950:49 - that object so let's take a look at that
950:51 - and by the way we can just give it that
950:53 - hey this is how you build up the URL
950:55 - that will work for the image so let's
950:58 - see okay so that looks much better if
951:01 - you take a look at it
951:03 - in the previous response
951:05 - in the previous response we only had
951:07 - this stuff so basically we just had the
951:09 - token URI and then it just passed it
951:11 - back here and now that was pretty much
951:13 - it now in this one what it does is it
951:16 - actually uses that same token URI
951:20 - right here
951:22 - as we gave it to it and it actually
951:24 - fetches the metadata itself and there
951:26 - you go now we have the metadata and we
951:29 - actually can do something with it so
951:31 - like we can get so we can get pretty
951:33 - lazy with this stuff and we can just
951:36 - make it do a lot of things
951:37 - so we can just copy this over and you
951:40 - want to make sure that you highlight the
951:42 - entire thing and then just paste the new
951:43 - stuff there you can just paste in the
951:46 - metadata fetching itself so there's the
951:48 - metadata that looks good however we're
951:52 - looking for the image URL and you can
951:54 - see how it like starts to poop out it's
951:57 - not that smart but it's pretty
952:00 - impressive that this is the first time
952:03 - that we are actually coding something
952:04 - and we have to use our brains so that's
952:07 - pretty nuts now we have to like make
952:09 - sure it knows everything instead of
952:11 - metadata when I have an image that we'll
952:14 - need to fact we'll need to get the image
952:17 - property from the metadata and same goes
952:19 - for the name because right now it
952:21 - doesn't show up but there you have it
952:23 - the image is there so that looks good so
952:25 - far but as I said the name is not there
952:27 - so we're going to extract that too and
952:30 - now it shows up and that's as much as
952:34 - fetching goes
952:35 - all right so the last tap is that
952:38 - we will enable the user to purchase
952:41 - these nfts so let's take a look at that
952:44 - let's make
952:46 - do the work for us
952:49 - so you can just say all right now build
952:51 - the nft or the purchase nft function it
952:53 - will spit an answer back at you
952:56 - that looks good let's copy it over and
952:59 - then you can just paste it to the
953:01 - appropriate place
953:03 - that looks promising let's let's see
953:05 - what's up and by the way this app is
953:07 - built so that when you click the image
953:09 - it will run that purchase nft function
953:12 - so let's click it
953:13 - and it looks like to be an error and
953:17 - something along the lines of the value
953:19 - must be string and it got a big number
953:22 - let's just make the listing price a
953:25 - string usually
953:28 - that's the listing price because way is
953:31 - a big number so you just want to convert
953:33 - it to a string that might not have been
953:35 - added there but it's fine and we can
953:38 - also
953:40 - remove that line from there that's not
953:42 - really useful
953:44 - we are not doing
953:47 - yeah it literally parses the price to
953:50 - Ether and we don't want to work with
953:52 - that we want to work with a weight
953:53 - that's how solid it works
953:56 - okay so that looks good okay that looks
953:59 - way better and now they are over there
954:00 - on line 53 just make sure the value is
954:03 - price not price in way otherwise you're
954:05 - going to have another error so now that
954:07 - we've cleared it up and fixed everything
954:09 - and again this is where it comes in that
954:12 - human power is still required and
954:15 - necessary more than ever so let's check
954:18 - it out and now I'm gonna hit it and then
954:21 - metamask popped up so that looks good
954:24 - and purchase is pending and it looks
954:27 - like it just went through and now we can
954:29 - just go ahead meet new nfts purchase
954:31 - those nfts so that is pretty much the
954:34 - build you can just repeat this as much
954:37 - as you want to that's pretty much the
954:38 - build thank you so much for watching and
954:40 - now you should go ahead and practice
954:42 - learning you chat GPT this is a tool
954:46 - this is not there to replace you but you
954:48 - have to be able to use it you have to be
954:50 - able to increase your output using tools
954:53 - like chat GPT whether you use the model
954:56 - 3 or the model 4
954:59 - it will just make you faster so with
955:02 - that said thank you so much for watching
955:04 - and I'll see you in the next one peace