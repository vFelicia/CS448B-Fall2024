00:00 - okay guys welcome to part three of code
00:03 - Academy course let's start this thing
00:08 - all right we left off at 17% on Python
00:13 - and the part that we were working on
00:17 - let me change my mouse control to
00:22 - reverse so I can scroll correctly on my
00:26 - laptop okay so we left off at 66% at
00:30 - mix-and-match we're going to pick up
00:32 - right from there and get going so we're
00:35 - going to be getting two pretty cool
00:36 - stuff like Pig Latin for now let's click
00:41 - conditionals and control flow and keep
00:44 - rolling with it okay so we're on the
00:49 - part
00:50 - we're on so we did mix and match and now
00:54 - we're on conditional statements and tax
00:56 - okay
00:57 - now conditional statements are the meat
01:00 - and bones of programming okay they are
01:04 - the main things that we use to basically
01:09 - provide logic for our programs make it
01:12 - intelligent this is the case where you
01:17 - give your program the power to actually
01:20 - reason through something and then make a
01:22 - decision based on that okay so this is
01:26 - if you've ever heard of if-then that's
01:29 - kind of what's going on here okay it's
01:31 - in if-then scenario and the example here
01:36 - is showing it's saying if the answer is
01:39 - left the double equal sign means
01:43 - comparison so it's comparing the
01:46 - variable answer and seeing if it equals
01:48 - left if that's the case it goes hey this
01:52 - is a verbal abuse room you heap of
01:54 - parrot droppings so it's a little lame
01:58 - joke that they put in there you know a
02:01 - little irony but um other than that you
02:07 - know that this statement is going to
02:10 - evaluate to
02:11 - remember we were working on boolean and
02:14 - this statement is going to evaluate to
02:16 - true because answer on line three we
02:20 - made it left we use the assignment
02:22 - operator the equal sign and we said hey
02:24 - take answer make it equal to the string
02:27 - left and then we came down a line four
02:29 - and we're checking whom is answer equal
02:32 - equal to left now remember this whole
02:34 - part is going to turn to true and any
02:38 - time an if condition is true then the
02:41 - block underneath it executes so in this
02:44 - case after the colon we have this block
02:47 - here print and that gets executed and
02:51 - that runs but any time this situation is
02:56 - false the block underneath that if
02:59 - statement does not run okay so for
03:02 - example let's say if we were checking if
03:04 - answer answer equals two right in this
03:08 - case what do you think is going to
03:10 - happen do you think that block is going
03:12 - to run on line five or do you think that
03:15 - block is not going to run okay if you
03:18 - answer that it's not going to run
03:19 - perfect because this will evaluate to
03:22 - false
03:23 - right because answer is left cool let's
03:26 - go back let's see what they want us to
03:29 - do in the instructions here they're just
03:33 - telling us a little bit of if eight is
03:35 - less than nine eight is less than nine
03:37 - so this statement will print and in the
03:39 - instructions that says if you think the
03:41 - print statement will print to the
03:42 - console set response equal to Y
03:45 - otherwise set response equal to n so now
03:53 - if you think line five that statement is
03:57 - going to run and we're going to print
03:59 - out the verbal abuse room go ahead and
04:01 - put Y in the response if you think no go
04:03 - ahead put no but if you listen to pretty
04:08 - much what I've discussed so far you know
04:10 - that the answer here is going to be Y
04:13 - because we know for sure that line five
04:17 - is going to run because line four is
04:19 - going to evaluate to true
04:20 - anyways beautiful so we got it correct
04:25 - on the right-hand side you can see that
04:26 - it printed out this is a verbal abuse
04:28 - room heap of wrappings ignore the nun
04:31 - that if you were writing a real program
04:34 - that actually wouldn't even show up so
04:36 - it's it's just code Academy thing start
04:40 - next lesson which is why I would
04:43 - recommend download Python and get
04:46 - something called idle and run things in
04:48 - there so for example if I open up on my
04:51 - Mac idle this thing opens up right here
04:56 - and I can type in code here so I can say
04:58 - if or I can say write equal equal left
05:04 - and it's going to say false but if I
05:09 - said write equal equal right it's going
05:10 - to sit true so it runs it immediately
05:13 - and you can check what's going on okay
05:17 - great now let's see what they're talking
05:20 - about let's get some practice with if
05:22 - statements so we're going to do some
05:25 - more practice with if statements in that
05:28 - etre you'll see two functions don't
05:31 - worry about anything and familiar will
05:33 - explain so enough replace the line on
05:35 - line two and expect ok so we have to
05:38 - replace this line on line two with an
05:41 - expression that returns a true statement
05:44 - so you could say pretty much anything
05:47 - you want as long as it evaluates to true
05:50 - okay so we can say a banana write is
05:57 - equal equal to apple and to be extra
06:03 - fancy here's what we can do boom okay so
06:10 - let me ask you is banana equal to Apple
06:14 - no so that's false right so this whole
06:17 - thing inside turns to false but then the
06:21 - not outside is the opposite right it's
06:25 - the negation or the negatory operator
06:28 - and it turns that false into a true
06:32 - statement so that whole statement then
06:35 - turns to true
06:36 - so this is just a fancy way of having a
06:38 - true statement and the reason why we're
06:40 - having a true statement right there is
06:42 - so then line three can run okay because
06:45 - if this whole thing evaluates to false
06:48 - we never get to line three
06:52 - this needs to value the truth which is
06:54 - why hopefully it's making sense why we
06:57 - learned about the boolean because
06:58 - otherwise if conditions we won't be able
07:02 - to run them ever
07:03 - if we don't didn't know about the false
07:06 - and true stuff that's going on okay not
07:08 - says on line six I'll replace it with an
07:11 - expression that returns true let's keep
07:13 - it simple five equal equal to plus three
07:16 - okay five is equal equal to five um it's
07:20 - going to return success number two if we
07:24 - do this successfully it should run line
07:27 - nine and it should say success number
07:29 - one and it should run line ten and it's
07:32 - just a success number two now to break
07:34 - it down a little bit further there's a
07:36 - little bit of stuff that's going on here
07:40 - we have a function okay let's just look
07:44 - at from line one to line three we have a
07:46 - function what's the name of this
07:49 - function the name of this function is
07:54 - using control once okay de f means
07:58 - defined so we're defining a function
08:00 - called using control once the reason why
08:02 - we define functions is we want to name
08:05 - blood it's it gives us a way to name
08:08 - blocks of code and then whenever we're
08:11 - going to refer to that giant block of
08:12 - code we can just use the name of the
08:14 - function so look at line 9 we're
08:17 - effectively just using that function and
08:19 - then it runs the whole set of
08:22 - instructions okay imagine why we use a
08:25 - variable to store some information in
08:28 - there like if you had some inconvenient
08:31 - number right like boom-boom-boom instead
08:36 - of trying to remember it every time it
08:39 - would make sense to kind of store it as
08:40 - a variable then refer to that variable
08:43 - right
08:45 - but what if you want to write a block of
08:48 - code that you want to keep using again
08:50 - and again how are you going to save that
08:53 - in a variable
08:54 - well you can't if you did something like
08:57 - this print around a print hello that's
09:02 - one line and then you said return
09:05 - success or something that's not going to
09:08 - work because variables can't store
09:11 - blocks of code and so that is why we use
09:16 - a function so we can use those blocks of
09:19 - code for whatever we want okay now we
09:25 - created a function called using control
09:27 - once in that function we use the if
09:29 - statement and if that statement runs
09:32 - fine and returns true then we go to line
09:36 - three and we end up printing out or
09:40 - returning success number one now let's
09:43 - look at our function that starts from
09:46 - line five and ends at line seven what's
09:49 - the name of this function it's called
09:52 - using control again and it does the same
09:55 - thing it has a if condition it checks if
09:58 - it's true if it's true it returns
10:00 - success number two
10:02 - okay now here we're just defining the
10:06 - functions when you're defining the
10:08 - function is kind of like if I said V is
10:11 - equal to blah blah blah blah blah that's
10:14 - not going to print out V that's not
10:16 - going to show you what V is you have to
10:18 - then call V so you can say V or you can
10:22 - save print V right and that's going to
10:26 - show you what V is onto the screen onto
10:28 - that you know this black screen over
10:31 - here okay but same way you call the
10:37 - function okay so we created this
10:39 - function and now we want to call that
10:42 - function so it actually shows it out to
10:44 - the screen so on line 9 you can see
10:46 - we're calling the function using control
10:49 - ones and on line 10 we're calling the
10:52 - function using control again
10:56 - and the beauty of functions is that
10:58 - call it with just one single line and it
11:01 - uses those blocks of code so what do you
11:04 - think is going to happen if I run it do
11:05 - you think it's going to say success
11:06 - number one and success number two if you
11:09 - said yes you're right good job
11:12 - okay that was simple enough let's keep
11:15 - moving on else problems I feel bad for
11:19 - your son this is a reference to a jay-z
11:23 - song 99 problems but oh you know what
11:27 - ain't one so I like their sense of humor
11:32 - code Academy okay so the else statement
11:35 - complements if statement so basically
11:38 - you have if or else okay it's not as
11:41 - complicated as they make it sound it's
11:45 - just like real life
11:46 - if you want to go outside and get ice
11:49 - cream cool also we can stay home and be
11:52 - bored I don't know okay so it's
11:54 - literally just like that in programming
11:58 - you have if statements that you can
12:00 - compliment with an else statement and
12:02 - that will complete most of the times
12:05 - complete your logic you know if this
12:09 - person worked this many hours of the job
12:11 - then pay him this much otherwise don't
12:15 - pay him anything okay or otherwise pay
12:19 - him less depends on your situation okay
12:23 - so it says complete else statement to
12:25 - the right note the indentation for each
12:26 - line so our indentation okay hmm all
12:34 - right so my screen is kind of small so
12:36 - things run through a little bit but
12:38 - we'll try to work through it and we'll
12:40 - check out if our indentation is on point
12:44 - answer test but a scratch nothing wrong
12:47 - with that it's grammatically curve but
12:49 - sent actively correct we're defining a
12:53 - function here called black night
12:55 - so now black night is going to be used
12:57 - to refer to a block of code if answer is
13:01 - test but a scratch return true well
13:04 - answer is test but a scratch we did yeah
13:08 - we made it that
13:10 - so this is going to return true
13:12 - otherwise it just returns nothing but
13:17 - this note here says make sure it returns
13:18 - false so obviously we have to put false
13:22 - here okay what happens here line four if
13:29 - answer is equal equal to two splitter
13:31 - scratch it returns true but if it's not
13:34 - test but a scratch it returns false so
13:37 - it goes to this else part okay if this
13:40 - part evaluates to false we skip over
13:44 - line five and we go to line 6 and then
13:46 - we execute line seven if this part
13:50 - returns true we go to line five and we
13:54 - never go to line 6 and we never go to
13:56 - line side okay because if you go outside
14:01 - to get ice cream then you're not going
14:05 - to be sitting at home being bored at the
14:06 - same time right so think about it kind
14:09 - of intuitively okay French soldier if
14:16 - answer so answer is not go where I shall
14:19 - taunt you a second time because answer
14:21 - is tis but a scratch I see it right
14:22 - there so I already know it's not going
14:24 - to returning true it's going to go to
14:25 - this else part and then the else part we
14:27 - have to put false as the note says next
14:30 - to it so this is going to return false
14:32 - the next one is going to return so and
14:34 - this one is going to return true and I
14:38 - think at this point we can just run it
14:39 - and see what happens
14:42 - cool it just says start next lesson
14:44 - beautiful okay I got 99 problems but a
14:48 - switch ain't one again Jay Z's reference
14:52 - L if is short for else if so you know
14:57 - you can also say else if okay if we do
15:02 - this else if we do this or else if we
15:06 - can do that okay now that gets a little
15:12 - bit different then why don't we just use
15:14 - multiple ifs but let's not think about
15:16 - that let's keep it simple and just think
15:18 - think about we have three connections
15:20 - here we have if else if and else
15:24 - okay so we have a situation where if
15:28 - something is true then we return 1 if
15:31 - that thing isn't true
15:33 - we go to the else if part and then we
15:36 - check the condition in the else if if
15:38 - that condition evaluates to true then we
15:41 - return negative 1 however if the
15:43 - condition of the else if returns false
15:46 - we skip and we go to else else doesn't
15:49 - take a condition ok so if I had to give
15:52 - you a format for this it would be 4 if
15:55 - conditions it would be like if and then
15:59 - the condition goes here if that
16:02 - condition evaluates to true we go to
16:06 - this block okay else if same thing it
16:12 - takes in some kind of condition
16:14 - conditions or things that evaluated true
16:16 - or false okay then we run this block and
16:20 - then if we have the else we don't have
16:24 - no condition ok no condition because
16:30 - else just means if none of the
16:31 - conditions match then this happens this
16:35 - block okay just to give you a little bit
16:38 - of an intuitive sense okay so I'm
16:46 - commenting out hopefully your number of
16:48 - comments this part is just ignored okay
16:53 - so it says online to fill in the if
16:55 - statement to check if answer is greater
16:58 - than 5 hmm
17:05 - okay simple if answer is greater than 5
17:08 - so answer is greater than 5 online for
17:16 - fill and also so that function outputs
17:18 - negative 1 if answer is less than 5 if
17:21 - so answer is less than 5 okay so that's
17:27 - simple so if answer is ever greater than
17:30 - variable answers ever greater than 5 we
17:32 - return 1 else if answer is less than 5
17:36 - we return the variable negative one okay
17:43 - when's the condition this won't work
17:45 - when the answer is five exactly right if
17:49 - the answer is five exactly we should
17:52 - return zero so else return zero I don't
17:56 - like their if-else conditions they're
17:58 - not very logical they won't make sense
18:00 - they're so arbitrary that it makes it
18:03 - hard for you to understand what's
18:04 - actually going on right if else if the
18:08 - perfect example they could use is
18:10 - imagine the game rock-paper-scissors
18:11 - right if user picks rock and user to
18:17 - pick scissors then you know user one
18:22 - wins because user want picked rock
18:24 - that's a much better example that they
18:27 - should use like turn one NIF answer is
18:30 - greater than five that's okay not a
18:33 - problem we'll keep going okay
18:36 - so let's save and submit cool yeah so
18:42 - this function so now something new is
18:45 - happening is that we have this function
18:48 - here we're defining a function called
18:50 - greater less equal five and it's
18:54 - dependent on an input called
18:56 - answer you can call this input X but you
18:59 - have to make sure that everywhere you
19:01 - say answer here you call that X or we
19:04 - can call this input whatever we want
19:08 - okay but we have to make sure that on
19:09 - line 2 and line 4 we stay consistent
19:13 - right and we call it the same thing and
19:18 - how we use this function so we just
19:20 - define this function there it doesn't do
19:22 - anything there but then we call it at
19:24 - the bottom so you see we're calling this
19:28 - function and we're passing in four so we
19:34 - go to this function and instead of
19:36 - answer we actually are passing in a four
19:39 - and then it goes for if 4 is greater
19:43 - than 5 is 4 greater than 5 no
19:49 - is for less than five yes so it returns
19:53 - negative one that's why you see negative
19:55 - one right there at the top it never goes
19:58 - to the else part now line 17 puts five
20:03 - into the function so answer becomes five
20:06 - if is 5 greater than five that's
20:11 - actually not true so we don't return one
20:15 - is 5 less than 5 that's not true so we
20:20 - don't return negative 1 now we jump to
20:22 - the else condition else statement else
20:25 - doesn't have a condition so we don't
20:27 - check for anything and we immediately go
20:29 - to line 7 which says return 0 which is
20:32 - why you get 0 right below the negative 1
20:34 - and lastly we have 6 is 6 greater than 5
20:40 - yes it is it returns 1 that that's how
20:45 - will you see the 1 there it never
20:46 - executes this part of the code here and
20:50 - we are done
20:53 - ok let's click Next and I think so we're
20:59 - at the conclusion and we're just going
21:01 - to be reviewing this stuff pretty basic
21:04 - so here's what you've learned in this
21:06 - unit you've learned about comparators so
21:09 - comparison operators or like this one
21:11 - here less than greater than or equal to
21:14 - equal equal not equal okay so 12 not
21:19 - equal 13 that will return true 10 equal
21:24 - equal 10 that will return true 5 greater
21:27 - than or equal to 5 that will return true
21:31 - and 3 is less than 4 that will also
21:34 - return true boolean operators everything
21:37 - that evaluates to true and false but
21:40 - more than that boolean operators are
21:42 - known as you know you got the or you
21:45 - have the end and then the not okay
21:49 - so true or false right true or false
21:55 - anytime you have an or statement again
21:57 - imagined
21:58 - a silly example I gave you earlier of
22:01 - ice cream and poison you would respond
22:04 - yes because you like at least one of
22:06 - those things which is probably ice cream
22:08 - so you'll respond yes so the only way an
22:12 - or statement will be false is if both
22:14 - statements are false right like you like
22:16 - snakes or poison I don't like either of
22:19 - them to scare me so both are false as
22:21 - long as any one of them true the overall
22:25 - statement is going to turn out to be
22:26 - true
22:27 - so here true or false is going to return
22:30 - true okay over here again you have a
22:35 - compound expression with the end so you
22:39 - would evaluate this part you'd evaluate
22:41 - this part and then you'd read that with
22:44 - an N and see what happens so for example
22:46 - 3 is less than 4 that's true that this
22:50 - is true you have true and true and that
22:53 - will this whole thing will end up
22:55 - turning into true okay this is just
22:59 - talking about some random functions this
23:01 - and that and we have no idea what they
23:03 - are so we can't possibly evaluate this
23:06 - to a true or false in our heads we would
23:09 - have to know what these functions
23:11 - actually are but just know that not
23:15 - negate something so just the opposite of
23:17 - something conditional statements pretty
23:22 - straightforward right if something is
23:24 - true we print out or we execute the next
23:28 - line of code else if you know so if the
23:33 - first part is not true else if you know
23:36 - if another part is true then we print or
23:38 - execute that block of code but if none
23:41 - of these things are true up here we go
23:44 - to the else part of the code and we just
23:46 - execute that whatever that is ok so here
23:52 - they want us to do write an if statement
23:54 - in the flying circle so the flying
23:58 - circus so they want us to go into this
24:02 - function and write an if statement and
24:06 - it must include an if else if and else
24:09 - statements
24:10 - at least one of a door not a comparator
24:15 - and must return true and evaluate it so
24:18 - cool let's see how fast we can get
24:21 - through this okay so I can say if um
24:29 - five is greater than six and seven is
24:35 - less than five at the top of my head I
24:38 - didn't think what's that can evaluate to
24:39 - so what is that seven is less than five
24:41 - that's false five is ready to take thus
24:44 - false false and false is false here and
24:52 - we're going to say print or print
24:59 - bananas okay it doesn't matter what we
25:03 - say to print in the elsif condition' we
25:07 - are going to put a five equal equal five
25:14 - we don't actually need to put anything
25:16 - else and then there a one else statement
25:19 - so we have satisfied this where we have
25:23 - if L if and else we have satisfied the
25:27 - second bullet point which is that we
25:29 - have included an and we have satisfied
25:34 - the operator you can see we have equal
25:37 - equal we have less than okay let's make
25:39 - it fancier I guess let's do this and
25:41 - let's do this right okay and then
25:47 - finally the flying circus must return
25:52 - true and evaluated so when you actually
25:56 - evaluate it it should return true okay
26:03 - so I guess what they're trying to say is
26:06 - that no matter what happens it should
26:09 - return true
26:10 - so we need to make sure all of these end
26:13 - in a true so it's five let's make it 5
26:16 - is less than or equal to 6 now this part
26:19 - is true let's make this part and/or
26:23 - because now automatically I know this
26:26 - whole statement is going to be true even
26:28 - if this part is false because it's an
26:30 - order ok so I can say 5 is not equal to
26:34 - 5 which is false this part is true
26:37 - true or false is it getting true so
26:40 - we're line 4 is going to run and is
26:43 - going to return true line 8 is
26:45 - guaranteed to run if line 3 doesn't run
26:49 - and then we can say return true and this
26:53 - should be good boom okay guys we have
26:59 - completed the conditional conditionals
27:03 - and control flow that was a lot for this
27:05 - one video I'm going to stop right here
27:07 - for part 3 stay tuned for part 4 it will
27:11 - be coming shortly and I'll see you guys
27:13 - there take care bye