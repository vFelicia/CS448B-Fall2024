00:00 - in this video you're going to be
00:01 - building the turo web 3.0 depth using
00:03 - next JS you're going to be able to list
00:06 - and rent out your nfts using the erc4907
00:10 - standard which is a pretty new one and
00:12 - we're going to be using third web to
00:13 - deploy this contract and then to
00:15 - interact with the blockchain later down
00:17 - the line you will be able to verify and
00:19 - check these transactions and rentals
00:21 - using
00:22 - using you'll be able to list all the all
00:23 - these cars and rent out to random users
00:25 - who will be paying to rent these cars
00:27 - from you with ethereum so with that side
00:30 - let's just jump straight into it alright
00:31 - ladies and Gentlemen let's go ahead and
00:33 - get started building turo so what I have
00:37 - in front of me is basically just a
00:39 - regular Google Chrome and what we're
00:40 - going to do is go to thirdrab.com
00:44 - cleverprogrammer as you can see right
00:46 - there and by the way this is a link Down
00:49 - Below in the description you can for
00:51 - your convenience just go ahead click
00:53 - that link and you're gonna be ready to
00:54 - go now you're going to be greeted with
00:57 - the third web dashboard straight away
01:00 - but we're not going to stay there for a
01:02 - little bit because we are going to click
01:04 - connect metamask which will prompt us to
01:07 - connect the metamask account you're
01:09 - going to have to accept all the privacy
01:11 - policy as usual and then you're right
01:13 - back on your dashboard now you can go
01:16 - ahead hit that logo and that will show
01:18 - up all your projects you've previously
01:21 - worked on but that's basically it for
01:24 - this section congratulations on signing
01:26 - up for third route let's go ahead and
01:28 - crush it now if you haven't done this
01:31 - already before we're gonna go through
01:33 - now the process of installing metamask
01:35 - on your Chrome so what you need to do is
01:38 - go to metamask.io download and then just
01:41 - hit that little install button right
01:43 - there and that'll take you to the Chrome
01:45 - web store you can literally just Google
01:47 - it but basically you want to go ahead
01:49 - click add to Chrome
01:51 - and extension and then that'll go ahead
01:54 - and install this for you
01:56 - and once it's there it's going to pop up
01:58 - a brand new page
01:59 - which will go which will walk you
02:01 - through the setup process so hit that
02:03 - get started button and then agree
02:06 - whatever there is to agree obviously you
02:09 - should read it because that's why it's
02:10 - popped there and then if you already
02:13 - have a wallet you get you probably know
02:15 - how to import it but this and then you
02:17 - can just skip this section but for those
02:19 - who are brand new to web3 go ahead click
02:22 - create wallet and you will need to put
02:25 - pop in a password now remember this
02:27 - password because this is going to be the
02:29 - password that you're going to be
02:30 - unlocking your metamask with all the
02:31 - time read the terms and Views and then
02:34 - go ahead click click create then there's
02:36 - a little bit of an education if you want
02:38 - to watch it on how you can secure your
02:40 - wallet now and this is the crazy part
02:43 - this is your 12th phrase security secret
02:47 - whatever do not share this with anybody
02:50 - if anybody gets it they will have full
02:52 - control over your wallet however you
02:55 - want to go ahead copy all of that and
02:57 - then click next and you will have to
02:59 - paste it here now once you're done with
03:01 - that that's just to like confirm and
03:03 - confirm you have it now you want to go
03:05 - ahead and save this because without this
03:07 - if you lose access to your meta mask
03:09 - you're never going to regain it ever
03:12 - again so once done hit confirm and then
03:16 - you're basically all down now one more
03:18 - thing you want to do is uh because we
03:21 - only see the ethereum maina which would
03:23 - obviously be a little too expensive just
03:25 - to do tutorials on hit that show hide
03:28 - test networks button scroll down where
03:30 - it says show test networks on the top
03:33 - right there and turn that on because we
03:36 - are going to be using we're going to be
03:38 - using test networks and you also want to
03:40 - like you might as well just turn on show
03:43 - conversion on test networks that'll
03:45 - basically fetch the current ethereum
03:47 - dollar ethereum slash US dollar FX rate
03:50 - and then it will show you in dollars how
03:53 - much you're spending on each transaction
03:55 - but basically that is how you set up
03:57 - metamask
03:58 - all right now time to actually get
04:00 - started coding so let's use our custom
04:03 - built Clover programmer CLI tool that
04:06 - will just help you with setting up the
04:08 - project pop in your in a email and then
04:11 - pop in your name and then as a recording
04:13 - of this video let's see how I wasn't
04:15 - capable of doing it yet but right now if
04:17 - you just start typing in turo that will
04:19 - show up and narrow down the list so you
04:22 - don't have to look for it and then we're
04:24 - just gonna fast forward to the moment
04:26 - where it is done and it will say opening
04:30 - vs code and it will open up your vs code
04:32 - so there's your project that's print and
04:35 - uh that's pretty much all we need to
04:37 - know now and just pop in yarn Dev into
04:40 - your terminal
04:41 - and open it up in your Chrome once you
04:44 - open it in your Chrome this is what you
04:47 - will see
04:48 - and this is your background product
04:49 - project you have everything set up for
04:52 - you literally so all we got to do now is
04:54 - just build the app
04:56 - so time to open up and get started
04:58 - working in remix IDE now if you go to
05:01 - remix.ethereum.org
05:04 - you will see this exact website in front
05:06 - of you what it this is basically an IDE
05:10 - specifically created for ethereum and
05:13 - solidity developers so this is what
05:16 - we're going to be using and in a couple
05:17 - of other videos you might have seen me
05:19 - uh you might have seen me working in the
05:22 - remix ID extension it's basically it's
05:24 - the exact same stuff the only difference
05:26 - is that one is inside my vs code and
05:30 - this one is in the browser so this is
05:32 - like more portable more mobile now what
05:35 - you want to do here is just go into our
05:37 - contracts and then hit create new file
05:39 - and name it ierc4907.sol
05:45 - that is ierc
05:48 - 4907. Sol
05:51 - and if you follow the standard basically
05:53 - you will have a contract that allows
05:56 - users to rent nfts and that's basically
05:59 - what we're going to be doing here
06:01 - so go ahead name it name that file like
06:04 - that and then you don't have to worry
06:05 - about any of the artifacts or anything
06:07 - like that just leave it as is now we
06:10 - have it linked down below but this is
06:13 - the official ierc and the erc4907
06:16 - contract so you want to select the iurc1
06:19 - right now and then just copy the entire
06:22 - thing and paste it inside there the good
06:24 - thing about standards is they are like
06:26 - open source you can use it you can do
06:28 - stuff with it and you don't have to type
06:31 - it up this is perfect even if you don't
06:34 - even know what solidity is so you can
06:36 - just type it you can just paste it there
06:37 - and you can look through like what it
06:40 - does now at the time of filming this
06:42 - video
06:43 - the latest version of solidity that was
06:47 - out was 0.8.13 so we will be using that
06:51 - for this build all right so with all
06:54 - that being done let's go ahead and add
06:56 - one more file and so that is going to be
07:00 - the turo.sol now this file is going to
07:04 - compile everything and grab everything
07:06 - from all the other like sources and
07:09 - whatnot and we'll be using this and
07:11 - we'll be interacting mainly with this
07:13 - one alongside the other one this is
07:15 - going to be like the umbrella contract
07:17 - getting started let's just a drop in an
07:20 - MIT spdx license identifier and using
07:25 - and we're going to be using obviously
07:27 - the exact same solidity version so
07:28 - you're going to make sure it matches now
07:30 - that's what I was talking about we are
07:33 - going to go ahead and import the
07:35 - erc4907. Sol file which we literally
07:38 - just finished up
07:40 - and we're gonna go ahead and import a
07:42 - few things from open Zeppelin first of
07:44 - all we're going to be importing slash
07:46 - Contra the Contour contract so add opens
07:49 - up in the slash contract chat slash
07:51 - utils slash counter.sol and so once
07:54 - you're done with that you want to go
07:56 - ahead and initiate your turo contract
07:59 - which will be inheriting a bunch of
08:01 - things from erc4907 and the ownable
08:04 - contract that we just imported now you
08:07 - also want to go ahead and initialize
08:09 - your counter so we're going to be using
08:12 - that and so that this is how you
08:15 - initialize it and set it up for future
08:18 - use now if you try to import it right
08:21 - now also make sure that your compiler on
08:23 - the top left matches your prac mover or
08:27 - like your solidity version so zero eight
08:29 - thirteen once again so once you hit
08:32 - compile it will show this error and
08:34 - that's because we do not have opens up
08:37 - when installed so let's go ahead and do
08:39 - that now all right so to make that error
08:42 - go away we actually have to create a
08:45 - Constructor and that's because the
08:47 - counters counters contract requires that
08:50 - so you want to create a contract
08:52 - Constructor that takes in a name that
08:55 - takes in a symbol and both of them
08:59 - obviously strings and then it will
09:01 - create a for an erc4907 instance and so
09:06 - if you compile that as you can see on
09:08 - the check mark on the left hand side it
09:11 - is now perfect and if you hit deploy
09:12 - there there is your contract it is
09:15 - deployed and now if you like click
09:17 - around and call all the functions you'll
09:19 - basically see all the functionality that
09:22 - your contract has
09:23 - and so with that being said now it's
09:26 - time we actually create our state
09:28 - variables and move on with the build all
09:31 - right so it is time we go ahead and set
09:32 - up all the variables that we're going to
09:34 - be using in this contract so
09:37 - using those count after we initiated and
09:40 - imported the counters we're going to go
09:41 - ahead and create two private variables
09:43 - one of them is going to be current token
09:45 - ID and the other one is going to be
09:47 - total Supply now once that's done we're
09:51 - going to create a public string which
09:52 - will be which we'll call Base token URI
09:55 - and then a uint that will be a bit that
09:59 - will be that we'll call Base amount now
10:01 - this basically will just store an amount
10:04 - in way and
10:07 - we're going to go ahead and convert it
10:08 - now so go ahead go over to East
10:11 - converter.com or you can just copy
10:14 - whatever we have there so basically what
10:16 - we want to do is we want to set a base
10:18 - price of
10:20 - 0.001 ether which will equal to I'm not
10:25 - going to read out a thumper but that's
10:27 - your number copy it in them that's what
10:30 - we're going to put that there and if
10:32 - you're wondering like hey it's ethereum
10:34 - why can't I just put ethereum in there
10:36 - it's because way is a it's kind of the
10:39 - sense for the dollar but it's way for
10:42 - ether
10:43 - and hold another scale and also solidity
10:47 - only understands way so there it is we
10:50 - need to provide everything in way
10:53 - so once we got that we're gonna go ahead
10:55 - and create an array of strings which
10:58 - will be the rentable nfts Uris
11:01 - basically we're just gonna store all the
11:03 - Uris of each NFP that any person who
11:06 - uses the app can rent and then we're
11:08 - also going to create a struct which will
11:10 - be a rentable item struct basically this
11:13 - is where we're going to Define all the
11:15 - properties of of rentable item of an
11:18 - item that the user can rent so initial
11:21 - like obviously you need the pool which
11:23 - will return a true or false what the
11:25 - item is rentable or not
11:27 - you want to put in a price which we'll
11:30 - call amount per minute that'll obviously
11:32 - be a uint and that's basically the item
11:35 - now you want to create will create two
11:38 - mappings we'll map each ID to a rentable
11:41 - item and we're going to hold it
11:43 - rentables and then the other one is
11:46 - going to do the same with the IDS but
11:48 - instead it's going to map to address it
11:51 - on a higher level of what's Happening
11:52 - Here you want to track all the items you
11:55 - have and you want to track all the
11:57 - people that rent each item and so the
12:00 - only unique way so the only way to do it
12:02 - is you want to map map both of those to
12:05 - specific IDs that way you can easily
12:08 - find both of them so that's basically it
12:11 - for now
12:12 - time to calculate the amount per minute
12:15 - all right so let's go ahead by setting
12:17 - up a function get amount per minute and
12:21 - we'll need to pass in the the token ID
12:23 - so it's going to be a uint and this will
12:26 - just return a couple of things so it's
12:29 - going to be a public function and it
12:31 - will return a u-win so basically a
12:33 - number and so you want to specify what
12:36 - it will return and that will be the
12:38 - amount per minute for the item which has
12:41 - the tokenad you just passed in
12:44 - all right now let's go ahead and build
12:46 - the mint function so these are going to
12:48 - be nfcs that we're going to be renting
12:50 - so before you can rent anything you want
12:54 - to be able to Mint them right because
12:56 - without that it's pretty hard to run
12:59 - right
13:00 - all right we're just going to call it
13:01 - mint just like that we'll have we'll
13:03 - need to pass in one prop that will be
13:07 - token URI and only the owner of this
13:11 - contract will be able to will be able to
13:14 - Mint nfts that's a safety measure that
13:16 - we're taking this time and so you want
13:19 - to increment both of your counters so
13:21 - your total Supply
13:22 - and the current token ID as well now the
13:26 - current the counter the counter contract
13:28 - that we imported earlier comes in handy
13:30 - because you can just call an increment
13:31 - on it and it's like super easy
13:33 - and so you want to create a local
13:35 - variable which will be new item ID and
13:38 - that just takes the current token URI
13:41 - if that makes sense
13:43 - and so now you want to call the safe
13:46 - mint function which is by the way coming
13:48 - from the erc4907 contract and so you you
13:52 - will need to pass in owner and you will
13:54 - need to pass a new item id now once
13:57 - that's done you also want to set the
13:59 - token URI which we are actually passing
14:02 - in to this function using another
14:04 - function from erc4907 we'll pass in the
14:07 - token ID and we'll pass in the token um
14:09 - right so what this does is previously we
14:12 - just created the new nft now we actually
14:15 - set the token URI to the nft so that it
14:19 - shows up later on whenever we're looking
14:21 - for it and we're going to be using that
14:23 - on the front end so you want to make
14:25 - sure that the you pass in you pass in
14:28 - the correct ID now as I said before on
14:31 - line 15 we're also going to store this
14:33 - token URI and that array we set up
14:35 - earlier and we also have to store this
14:38 - whole entire nft in the rentables
14:42 - mapping so what we're gonna do is
14:45 - rentable's new item id the element and
14:49 - then we're just going to pass in a
14:51 - struct which we already set up so we're
14:54 - going to have rentable which obviously
14:56 - initially it's going to be true and the
14:57 - amount per minute is going to be the
15:00 - base amount so both of these are already
15:02 - set up and already ready to go now if
15:04 - you deploy it let me check out the test
15:06 - panel you can see that there is your
15:08 - mint function and you can pass in your
15:10 - token URI and that'll be that'll
15:13 - basically invoke this function all right
15:16 - now let's build a function that returns
15:17 - all the nft URLs that we have deployed
15:20 - so we can just call it get rentable nfts
15:24 - Uris or something it will be a public
15:26 - function that will return an array of
15:28 - strings and all it will do is just
15:31 - return nft rentable nft URI so that's
15:35 - pretty much all we're gonna do so if you
15:37 - want to test it out you can just
15:39 - redeploy your contract again and you
15:42 - want to go in
15:43 - and there's your by the way there's your
15:45 - functions right now it's an empty array
15:48 - you can just paste one of your uploaded
15:50 - ipfs links hit mint so that'll be done
15:54 - and now if you are going to call the get
15:57 - rentable nfts Uris again there is your
16:00 - link so if you see that and it's
16:02 - returning the exact same link you did a
16:05 - good job so with that said let's move on
16:08 - to actually building the Rend function
16:11 - all right so the biggest thing that
16:14 - we're gonna be working on is the rent
16:16 - function so let's go ahead and get
16:18 - started building that so that will need
16:21 - a token ID as an input and it will also
16:24 - need the amount
16:26 - or the expiration time so that's going
16:28 - to be a number that we pass in as
16:30 - minutes later on when we get to the
16:32 - front end part we're gonna get there
16:34 - so this is going to be a public payable
16:36 - virtual function and so right off the
16:40 - bat let's go ahead and calculate the due
16:42 - amount so we'll have to figure it out
16:44 - from the rentables using rentals map
16:48 - using the token ID and grabbing the
16:51 - amount per minute so if we multiply that
16:55 - by the expires number that we just
16:58 - passed in so basically the the minutes
17:00 - you multiply it with the amount per
17:02 - minute you get the due amount and so at
17:05 - that point you might as well check for
17:07 - whether the correct amount was sent or
17:10 - not
17:11 - and if not just show them that hey this
17:14 - is an incorrect amount so we can move
17:16 - forward
17:17 - and then you also want to make sure that
17:19 - the current user of that specific nft is
17:23 - empty and because otherwise it literally
17:26 - means that the item is already rented so
17:28 - we're gonna display a correspond
17:30 - corresponding error message and you also
17:32 - want to make sure that the specific item
17:35 - is rentable and if not obviously say
17:40 - that the renting is disabled for this
17:42 - specific nft
17:43 - all right
17:45 - so with that we're going to go ahead and
17:47 - transfer it real quick once the once all
17:49 - that checks passed I'm going to go ahead
17:51 - and transfer all the due amount to that
17:53 - person
17:55 - and so you want to make you want to now
17:56 - go ahead and transfer the due amount to
17:59 - the owner of that specific nft
18:02 - and now we're going to import uh your
18:04 - something from the erc4907 contract and
18:08 - so that'll be the user info
18:11 - so we're just going to create a local
18:13 - variable info and we're gonna get the
18:16 - specific user and so we want to make
18:18 - sure that like we said the information
18:20 - of that user so it's going to be the
18:22 - message sender it's going to be the user
18:24 - and then you also want to set the expiry
18:26 - which is going to be the block timestamp
18:29 - plus whatever the person passed in as
18:32 - number of as number of minutes times 60.
18:34 - so is going to be the expiry and then
18:37 - you also want to document whoever the
18:39 - rent he was now we haven't created this
18:41 - function so let's go ahead and do that
18:43 - now so at renty
18:44 - and
18:46 - it will take in the token ID and it will
18:49 - take in the renty so like it will
18:52 - basically take in an address and it will
18:53 - take in a number as their inputs and so
18:57 - with the mat the mapping that we already
18:59 - set up we're just going to go ahead and
19:00 - save that and now that it's passed in
19:04 - we're good to go
19:06 - and so you can remove the previous
19:08 - deployment and actually deploy the new
19:11 - contract now whatever where I you have
19:14 - on your clipboard paste it there and
19:16 - then you're basically good to go and
19:18 - then you can basically double check that
19:20 - hey there is the owner you can double
19:22 - check everything that things are stored
19:25 - correctly so whether is it rentable or
19:27 - not who's the owner get the type and
19:30 - then get like how much it would cost and
19:32 - so whether it is rentable or not and so
19:35 - let's just select another wallet and
19:38 - let's try to rent it see what happens so
19:41 - put in the token ID put in the expiry
19:43 - number three and it says incorrect
19:46 - amount so what you need to do is pass in
19:49 - an amount all right because otherwise
19:51 - it's going to be pretty hard to move
19:53 - from there for now because it's just
19:55 - like a dummy Network you can just pass
19:57 - it to Ether that'll be like for sure
19:59 - more than enough and there you go it is
20:02 - successfully rented out the NFD and now
20:05 - you will see if you check on it the user
20:08 - is safe there again if you double check
20:10 - that is the same address that you use to
20:14 - send that to Ether in so that is
20:17 - basically it for the rent function now
20:19 - let's go ahead and move on
20:21 - now if you're more experienced with
20:22 - solidity this is going to be an optional
20:24 - challenge for you you can go ahead and
20:27 - try to implement the
20:29 - fee change basically so a function that
20:33 - will modify the amount per minute so
20:35 - this is your call to action go ahead
20:37 - pause it right now if you are up for the
20:39 - challenge if not that's completely fine
20:41 - too and with that said let's keep going
20:44 - so that'll be a new function we'll call
20:47 - it set Rent fee and so you're going to
20:50 - pass in the token ID and you want to
20:52 - pass in the new amount
20:55 - and so this is going to be a public
20:56 - function and it will require a couple of
20:58 - things that are going to like are this
21:00 - so you want to make sure that the user
21:02 - is actually approved and they are the
21:06 - actual owner
21:07 - of that nft so obviously I shouldn't be
21:11 - able to change your nfts price right but
21:14 - doesn't that's that doesn't sound really
21:16 - good so you just want you want to check
21:18 - for that and if that if that's not or if
21:21 - that requirement is not satisfied
21:24 - send back a nice little error message
21:26 - and
21:27 - now
21:28 - using the token ID go into your mapping
21:31 - and we can and you can go ahead and
21:33 - update the amount per minute and that is
21:36 - basically it that is your function so if
21:39 - you figured it out good job if not
21:41 - that's completely fine too so with that
21:43 - being said let's go ahead and finally
21:45 - use third web to deploy this contract
21:49 - all right so go back now to your vs code
21:51 - and also go back to your serve up and
21:54 - once you logged in and connected your
21:56 - meta mask there is that little third web
21:59 - deploy button that'll basically take you
22:01 - to a page that that goes through in
22:04 - detail what is happening when you're
22:06 - deploying using third web so I suggest
22:08 - you go ahead and read that because it's
22:10 - a pretty neat tool but for now we're
22:12 - just going to be using the first first
22:14 - snippet which is mpx30 web deploy so
22:17 - just copy that what we'll need to do now
22:19 - is create a new folder on the root
22:21 - called contracts and then inside there
22:24 - like going go there with your terminal
22:27 - and just create a new truffle project
22:30 - using Truffle in it that'll be pretty
22:32 - fast and then inside of a contracts
22:35 - folder in there you want to create a
22:37 - tool.slf file and copy over all the all
22:41 - the code from your turo Sol on your
22:43 - remix IDE you want to also copy the
22:46 - other two contracts so IRC 4907 and
22:49 - erc4hansen both of them get them into
22:51 - your vs code because uh we have nothing
22:54 - to do on remix ID anymore during this
22:58 - tutorial
22:59 - so just get all your code and once that
23:01 - is done
23:03 - if you have that error like you can just
23:05 - completely ignore it there's no reason
23:07 - for it to be there but um what you want
23:09 - to do now is now is the time to paste in
23:12 - that a third of deploy command that you
23:15 - copied earlier so just type that in
23:17 - there put that in and you're good to go
23:20 - now this will take a little bit of a
23:23 - while and it will come up with this nice
23:25 - little interface you want to select turo
23:28 - because that's the one we're gonna
23:30 - deploy now so that'll take a little bit
23:33 - of a time and once it is uploaded it
23:35 - will auto open the site for you where
23:38 - you can configure the name and you can
23:40 - give it a symbol so we're just going to
23:42 - say turo rentable nft market and turo
23:45 - for a symbol and then you can just hit
23:47 - deploy that'll take a little time so
23:49 - just confirm confirm it and it'll be
23:51 - actually two separate transactions so
23:54 - just confirm them both and then you are
23:57 - good to go now once this is done it'll
24:00 - take a few extra seconds to load
24:02 - everything up but this is your contract
24:05 - on third web so they provide you with a
24:08 - lot of things you can explore all of
24:10 - your functions here you have every
24:12 - single function that you had on remix ID
24:14 - and you can test them out all of them
24:17 - you literally have a full-on playground
24:20 - with your own functions and they also
24:22 - provide you with code snippets on how
24:24 - you could invoke every single function
24:27 - that you have so you also will have a
24:30 - full log of every single interaction
24:33 - that has happened with that contract so
24:35 - right now you can see that it was just
24:37 - deployed and then there are all the nfts
24:39 - that are minted and then once again here
24:42 - is all the code that we're going to be
24:45 - using this is a pretty cool tool use
24:48 - this for any kind of future project that
24:51 - you're building once again playing
24:52 - around with it figure out what's what's
24:55 - where pause this video like actually do
24:57 - go ahead and pause this because that's
24:59 - going to be more beneficial for you
25:01 - pause it play with it figure out what's
25:04 - where and then we can go ahead and
25:06 - continue from there
25:08 - and once you're done messing around and
25:10 - you know the place we're gonna go ahead
25:12 - and connect our wallets to the app
25:16 - all right now this one is going to be so
25:18 - easy that it like literally makes me mad
25:20 - so what you want to do is import like
25:23 - one thing
25:24 - we're going to import server provider
25:26 - and chain ID
25:28 - from third web dev slash react
25:31 - and then you're going to generate you're
25:34 - going to create wrap it all around the
25:36 - application so you will have a third app
25:38 - provider for the desired chain ID and
25:41 - you can just put in whatever it's like
25:42 - chain idea girly that is perfect and
25:45 - then just close that and put everything
25:46 - in between all right that was step one
25:49 - and now you want to go into your header
25:51 - or the connect wallet thingy is you're
25:53 - going to import connect wallet from the
25:56 - same package and then down there on line
25:59 - 22 or probably it's like somewhere
26:02 - around there you're just going to create
26:04 - a just render it out and that's it you
26:08 - got your wallet connection
26:10 - you're good to go
26:11 - so now you see why I said it's so easy
26:16 - it makes me mad so there's your switch
26:18 - wallet everything yeah it's not as fancy
26:20 - as all the other ones but
26:22 - the ease of setting it up is crazy let's
26:27 - implement the Min function
26:29 - all right now let's go ahead and mint
26:31 - those nfds first of all that's the model
26:33 - that we're gonna be using and so go into
26:35 - your Min form.js file and we're going to
26:39 - import a couple things so first of all
26:40 - we're going to need ethers and then
26:42 - we're going to these use contract and
26:45 - use contract call from the third web dev
26:48 - and so on the right hand side now you
26:51 - want to go ahead and select the mint
26:53 - function so we're going to copy a couple
26:55 - of things from there so that so that
26:58 - mutated async mint is loading copy that
27:00 - thing and then just paste it right there
27:03 - and that'll set up a few things that
27:05 - will help us call the actual mint
27:07 - function from or in the inside the
27:10 - contract yeah that that's uh there's
27:12 - that and we'll have to pass in ismint
27:14 - loading to that is loading state so
27:17 - that'll take care and that'll take care
27:20 - of the whole thing and wait for the
27:22 - loading time now next thing we'll need
27:25 - to do is scroll down a little bit and
27:28 - wherever you see show modal and high
27:31 - model we're going to add a few things
27:33 - there so now in the use model hook you
27:36 - want to create a new unsubmit event and
27:39 - we're going to catch all the values and
27:42 - even the reset form function so that all
27:46 - of that is going to happen whenever the
27:48 - person submits that form so that is
27:50 - something that formic and yup gives you
27:53 - access to and so now whenever
27:57 - mining is not loading when there's
28:00 - nothing being there's nothing loading
28:02 - you're going to fire off a try catch and
28:04 - I've said this many and many times and
28:06 - I'll say it over and over again when
28:08 - you're working with the blockchain you
28:10 - want to have try catches all over the
28:12 - place because we're early and so console
28:15 - log the error out or you can use
28:17 - console.error whichever you want to but
28:21 - now we're going to call the Min function
28:23 - and pass in the mean URI so you want to
28:26 - use values that made the URI and values
28:29 - is something that form is taken care for
28:31 - taken care of for you so this is just a
28:35 - form Library don't worry about it just
28:37 - use values that mean URI we set
28:41 - everything up for you it feels really
28:43 - like fiddle around with The Code by the
28:44 - way and so now we're going to use toast
28:47 - promise to like have the little nice
28:50 - message on the top and we're gonna have
28:53 - a pending we're gonna have a success and
28:55 - we're gonna have an error message so all
28:57 - of those are going to be chosen based on
29:00 - what happens with the promise because
29:01 - once again that data thing that is
29:04 - actually a promise we're gonna have to
29:06 - make sure we're gonna have to wait for
29:08 - it and get it resolved and once all of
29:10 - that is done we want to reset the form
29:13 - because there's no reason for us to keep
29:16 - the data so there's that all right
29:19 - so there are all the things that that
29:21 - basically formic is key formic is taking
29:24 - and so whenever there is some sort of
29:26 - change in the field or in the input
29:29 - field we are calling on the format that
29:33 - handle change function and the value is
29:35 - being coming from
29:37 - formic.values.mage URI so that's that
29:39 - import field on the right hand side now
29:42 - you want to go ahead and grab one of
29:45 - those links that we gave you and you can
29:48 - either have your own pinata upload or
29:50 - you can go ahead and just copy it from
29:52 - one of the files that we put in the
29:54 - assets folder so we actually provided
29:57 - with all of them for your convenience
29:59 - and so now go ahead and just paste it
30:03 - there and mint one of those nfts so as
30:06 - you can see nothing has happened
30:07 - literally nothing so there's clearly
30:10 - something that we need to do no metamask
30:12 - pop-up nothing literally nothing so what
30:15 - we're going to do is in the form on
30:18 - submit you want to call the handle
30:20 - submit function and on reset you want to
30:23 - call the formic.handle reset function
30:26 - and so if you're not calling those
30:28 - functions nothing is going to happen so
30:30 - let's try it again paste that link right
30:32 - there and there you go there's your meta
30:35 - mask pop-up now go ahead hit confirm and
30:38 - that's basically it now you'll also want
30:41 - to wait for it to pen wait for the
30:43 - pending because it's not going to reset
30:45 - the form itself until it's not done so
30:48 - now there's your toast but something is
30:51 - a little off so like you still have to
30:53 - like refresh things and so the solution
30:56 - for that is you want to go back to line
30:58 - 41 and instead of waiting for that like
31:02 - you don't await if you await there that
31:05 - means the toast promise is still it's
31:07 - always going to be pending because it's
31:08 - never going to get resolved however if
31:11 - you remove that and then you use the
31:13 - toast message system to process your
31:16 - promise you are going to be better off
31:19 - with so let's try this again and there
31:22 - is your meta mask popping up and now the
31:25 - toast message is actually accurate and
31:27 - there's your success message so it was
31:29 - basically minted twice but it's
31:30 - completely fine let's go ahead and fetch
31:33 - that nft
31:34 - all right now let's go ahead and fetch
31:36 - all these nfts so get started we're
31:39 - gonna do a couple of different things so
31:42 - on the reading data we will need to
31:45 - import a few things so we're going to
31:47 - need to use con use contract and use
31:49 - contract data from third web but we can
31:52 - just copy it over from third web and so
31:55 - in order to get the owner like the owner
31:58 - of the car we'll need to destructure a
32:00 - few things so you want to destructure
32:02 - data as owner and you want to
32:03 - destructure is loading as is owner
32:06 - loading and so that's going to be
32:09 - calling the owner function of that
32:12 - contract that we deployed earlier now in
32:15 - the nfts you state you can see that
32:17 - there is that there's a BMW that we had
32:20 - earlier on but let's just go ahead and
32:22 - remove it there's no reason for that to
32:24 - be there anymore it was just a cool
32:26 - static data but we don't need it so as
32:29 - you can see no cards yet it's showing up
32:31 - as it's supposed to and so we're gonna
32:33 - create a couple of you States so one of
32:36 - them is going to be user of data and uh
32:39 - and the other one is going to be price
32:42 - and so both of them are going to be
32:44 - initialized as empty arrays and now I
32:47 - want to go over to third web and select
32:49 - get rentable nft Uris and we're gonna
32:52 - call that from that function too so
32:54 - basically we're just selecting functions
32:56 - from the contract that you've already
32:58 - built to call so right now we're going
33:01 - to set that up as well and so we're
33:03 - going to destructure data as rentable
33:06 - nft Uris and is loading as is loading
33:09 - rentable nft Uris so to call that
33:12 - function
33:13 - we're going to set up a few other things
33:15 - here so let's create a brand new
33:18 - function down there which is going to be
33:19 - upload nfts and so as a guard function
33:23 - there's a guard Clause have make sure
33:25 - that is loading rentable nfts exists or
33:28 - it doesn't exist my bad so there's
33:30 - nothing being loaded right now and so
33:32 - create a new variable that's going to be
33:35 - calling all the nft Uris one by one but
33:39 - it's going to be stored as in one
33:41 - variable so we're going to use axios.all
33:44 - for that and if the autocomplete didn't
33:46 - import it for you just check out my line
33:49 - 10 because that has already imported
33:51 - automatically so you can say axios.all
33:54 - and then we're going to need to map
33:56 - through all the nftu and basically call
33:59 - every single URI so let's actually do
34:02 - that right now so we're going to say
34:04 - const data and then sales.get URI and
34:08 - then you're going to go ahead and return
34:09 - data now this hasn't done anything yet
34:13 - like we haven't really even called it
34:15 - but we also need to set the new state so
34:18 - go ahead and say set nfts and nft Uris
34:22 - right there and so we obviously want to
34:26 - make sure that every single time we open
34:28 - this application
34:29 - and whenever things change around so
34:32 - like as loading rentable nft URI is it's
34:35 - changing we're going to fire it off
34:37 - again and whenever the is loading owner
34:40 - is changing we also want to fire it off
34:44 - again
34:45 - so that that means that in the main part
34:48 - of these use effect you want to put the
34:50 - update nfts in there and then now you
34:52 - can just go ahead and also console like
34:55 - this now down there is Chrome scroll
34:57 - down to line 101 or wherever this error
34:59 - is going to show up but just go ahead
35:01 - and comment this out we don't need that
35:04 - that was more for the dummy data don't
35:07 - worry about it for now and there you go
35:09 - now you can see those are the two BMWs
35:11 - that we just minted and if you go ahead
35:14 - and grab another and mint that as well
35:17 - that should oh it actually failed okay
35:20 - let's let's try it again oh it was wrong
35:23 - metamask so if you like as you remember
35:25 - only the contract owner can mint nfts so
35:29 - you want to select the correct meta mask
35:30 - and so go ahead now confirm it and it
35:34 - should be there in a little bit so wait
35:36 - for it wait for it and settlement thing
35:39 - is successful and if you refresh there
35:42 - it is that is your new car that you just
35:45 - minted so that said
35:47 - let's go ahead and render the owner of
35:49 - every single nft
35:51 - all right now so if you check on the
35:53 - right hand side none of the nft owners
35:56 - are being displayed right now however we
35:58 - already set up everything that we're
36:00 - gonna need to call that function and we
36:02 - already have access to all the data so
36:05 - now I'm going to scroll down and find
36:07 - that piece where I find that part of the
36:09 - code where we are rendering out owner
36:11 - and instead of having nft.owner there
36:15 - which was good when we had the pre
36:18 - custom code or like the hard-coded data
36:20 - in there it's change that out to owner
36:22 - because we already have access to it as
36:24 - I said and there it is there are your
36:27 - wallet addresses so now you should be
36:29 - seeing all of it
36:31 - okay so what we're going to be doing now
36:33 - is we will have to update the user data
36:37 - if you actually check it it's next to
36:40 - the renty there's like all this static
36:43 - jargon that we put there so that's what
36:45 - we're gonna update now so we're gonna
36:47 - need to create a brand new function for
36:49 - that and don't forget that it's going to
36:51 - be an async function because we're going
36:52 - to be fetching a bunch of things we
36:54 - already have the nfts
36:56 - so now we're going to go ahead and loop
36:58 - through all of them for every single NFC
37:00 - that we have we're gonna say is the user
37:03 - const user of equals weight
37:06 - contract.call user of versus we're just
37:08 - gonna go like that and then we're gonna
37:11 - have to pass in index plus one on the
37:14 - solidity side we are starting to the
37:16 - relevant data starts to count from one
37:19 - and on the JavaScript side the relevant
37:22 - counting starts at zero so when you
37:24 - interact with between the two the
37:26 - JavaScript numbers need to be increased
37:29 - by one so that's what we have that's why
37:31 - we're passing an index plus one also
37:34 - don't forget it that this is an async
37:36 - function otherwise everything is going
37:37 - to freak out and then you want to pass
37:40 - in that new user data so basically the
37:43 - way you're passing in I'm not sure if
37:45 - you've seen this before it's a pretty
37:46 - Advanced way to update an array I found
37:50 - this on the web
37:51 - Syria is going hard so this is a pretty
37:54 - Advanced way to update an array inside
37:57 - of a use state so basically what you're
37:59 - doing is you're catching the previous
38:00 - state of that you state
38:03 - printing it out basically like mapping
38:05 - it through and then just pushing the
38:07 - last element after it so it's like push
38:11 - but for you states that are arrays if
38:14 - that makes sense and it's like super
38:16 - super neat way to do this all right
38:20 - now once that is done well you obviously
38:23 - want to call that function and we want
38:25 - to call this function every single time
38:28 - dnfds are changing so create a use
38:31 - effect for that put the nfts state in
38:35 - the dependency array and then just pass
38:37 - in the function call it right there
38:40 - all right so as you can see all the
38:42 - cards like we commented out all the uh
38:45 - we commented out the rent button so
38:49 - we're going to make sure we have that
38:50 - because that's going to fire off the
38:52 - function that later on that will enable
38:55 - the user to rent the actual car so
38:59 - comment that back in I guess now and so
39:04 - because it's still like built for the
39:06 - before the static way of things that we
39:08 - had it in the CLI starter files just
39:12 - remove nfts from there don't have to
39:14 - worry about it and there you go now your
39:16 - buttons are back so that's checked and
39:19 - so now you want to update the renties
39:22 - all right so that still has that static
39:26 - data that we hard coded in there so
39:28 - we're going to update those it's the
39:30 - same address but so let's actually make
39:33 - it Dynamic now and so what you want to
39:35 - put there is is the user of Veda index
39:39 - so it's going to fetch the current user
39:43 - of every single car that you have one by
39:46 - one and match the corresponding match
39:49 - the corresponding
39:50 - address of that nfts user and then also
39:55 - shorten it so hope that made sense
39:58 - and so there you go whenever you see
40:00 - that lots of zeros that means that car
40:04 - is available for rent I want to
40:07 - emphasize that because that caused a
40:09 - little bit of a confusion even between
40:11 - us when we were building it in the
40:13 - background like some of us didn't really
40:15 - understand the concepts I just want to
40:17 - reiterate that whenever you see a bunch
40:18 - of zeros that means that it is a it is
40:21 - an invalid address but this is perfect
40:24 - to put there and indicate that this car
40:28 - is out this car is available for rent
40:30 - right
40:31 - and so with that said this part is
40:34 - pretty much good to go
40:36 - and so we're now going to go ahead and
40:39 - update the price
40:41 - okay so as you can see on the right hand
40:44 - side next to the price some weird stuff
40:47 - going on once again static data let's
40:50 - make it Dynamic so we're gonna need to
40:52 - make that static data Dynamic all right
40:55 - so for that we're gonna read data so go
40:58 - there and we're going to get we're going
41:01 - to use the get amount per minute
41:03 - function of the contract we built let's
41:06 - go ahead and start connecting it to the
41:09 - front end it's going to be a new
41:11 - function which is going to be update
41:12 - price it's going to be an async function
41:14 - as usual
41:16 - and just like last time do a try catch
41:19 - because
41:20 - the blockchain and we're early and it's
41:22 - just good practice you also want to map
41:24 - through or like Loop through all the
41:26 - nfds basically what you do is we're
41:28 - going to fetch the the amount per minute
41:31 - property for each nft
41:34 - now we're literally just calling it the
41:36 - same way we did it we can just get
41:38 - faster this time and
41:42 - and so we're going to once again format
41:44 - it because in the contract everything is
41:48 - in way so we're going to use ethers JS
41:51 - for that to format it to Ether and that
41:55 - way it's going to be like way easier for
41:57 - us to for us as in for us as in humans
42:00 - to understand what the price is and
42:04 - let's just update the price just how we
42:07 - did it last time and it's going to be an
42:09 - array of prices so we're gonna have to
42:12 - watch out for that
42:13 - now
42:14 - you also want to have this have the nft
42:17 - prices updated whenever any kind of
42:20 - change is happening around pricing
42:22 - around the nfts and so now let's
42:25 - actually go ahead and display all that
42:27 - so there's our custom data let's just
42:30 - place it put it there so now let's now
42:34 - that actually should display it but
42:36 - there is some crazy thing going on there
42:38 - so if we go back to where we can create
42:40 - fetch the new prize oh yeah if we use I
42:44 - index instead of index it's not going to
42:47 - work I don't know what we expect it but
42:49 - um there it is
42:51 - and you also got to import ethers JS
42:54 - because without that we're not going to
42:56 - be able to convert and there it is what
42:58 - kind diets there it's it's the array is
43:01 - the array we got a we gotta get one item
43:04 - of it so once again get the
43:07 - corresponding item and there now it's
43:10 - working
43:11 - perfect
43:12 - and let's actually rent these cars all
43:16 - right so we are at the final stretch the
43:19 - very end of this build the one and the
43:22 - only rent function no separates us from
43:25 - being completely done so go into your
43:29 - ramforms.js file let's finish this out
43:31 - strong
43:32 - and let's actually get started by
43:35 - importing all the useful stuff from
43:37 - third lab so use contract and use
43:39 - contract call we're gonna need both of
43:42 - them and at the very top of the just how
43:45 - we used to do it at the top initiate the
43:48 - contract instance and put in your
43:50 - contract address
43:52 - so use contract yup and then paste it in
43:55 - nice so that should should be that
43:59 - should be familiar already and so there
44:01 - is the formic function create and
44:04 - unsubmit property and or like event and
44:07 - create an async function that will take
44:09 - in that will have values and reset form
44:12 - as their input parameters and then usual
44:16 - try catch error out all the or the
44:20 - console at the errors and then we're
44:22 - going to go ahead and fetch the do
44:23 - amount so the do amount actually we
44:25 - won't fetch it from the contract but
44:27 - what we're going to do is we're going to
44:28 - go ahead and create an integer out of
44:31 - the expires value that we are putting in
44:34 - to the form itself and we're going to go
44:37 - ahead and multiply it by The Ether or
44:40 - The Ether amount that it would cost us
44:43 - to and multiply it by the permanent
44:46 - ether amount so that's going to be our
44:48 - dual amount and that's the amount that
44:50 - we're going to be sending to the
44:51 - contract so go ahead create another
44:55 - promise and then this time we're going
44:57 - to call it data and it's going to be
44:58 - contract.com and we're going to call the
45:01 - rent and so we're going to need to pass
45:03 - in a few things we're going to need to
45:05 - pass in the values the token ID and
45:07 - we're going to need to pass in the
45:09 - values that expires so that way the
45:12 - contract that we created previously it
45:14 - all has that if you don't believe go
45:16 - ahead check it and you will see what I'm
45:17 - talking about that's basically it and
45:19 - you also and now you also want to pass
45:21 - in a value and that's going to be the
45:23 - amount that the contract is going to
45:25 - charge you and so you wanna for you it's
45:28 - going to charge the user so you wanna
45:30 - you wanna specify it versus correctly
45:33 - because of the contract will reject it
45:35 - so it's not enough ether so you want to
45:38 - say ethers Euros dot parse ether and you
45:42 - will need to pass in the do amount that
45:45 - we just calculated and you also want to
45:46 - turn it into a string before you do any
45:48 - of that stuff
45:50 - and now we're going to handle this
45:52 - entire thing with toast and so just put
45:55 - in your pending success and error
45:58 - messages just like all the time it's
46:01 - like a little too repetitive at this
46:02 - point but that's fine now before we do
46:05 - anything else just want to make sure
46:07 - that the on submit and on reset events
46:10 - of the form are hooked up to formic and
46:14 - everything is going to be handled
46:15 - correctly so let's go ahead and test
46:18 - this thing out so I'm going to put in
46:19 - one as in for car ID and I'm gonna put
46:24 - in three minutes let's see okay there's
46:26 - some sort of error and so let's go ahead
46:28 - and hit renting and then progress
46:31 - metamask pops up nice there's your
46:34 - correct prize by the way I don't know if
46:36 - you caught it I'm gonna rewind it a
46:38 - little bit
46:39 - there's your correct pricing and there
46:42 - is your gas fees and now if you hit
46:44 - confirm it'll take a little bit extra to
46:47 - load but that's fine it's still it's
46:49 - it's pending let's go ahead and speed it
46:51 - up a bit of time speed it up and there
46:55 - it is now it's successful so that nft is
46:58 - currently rented successfully and if you
47:00 - refresh the rent button now turned into
47:03 - unavailable and you can do this with all
47:06 - the other ones tested out and also if
47:09 - you can if you see the Brandy actually
47:11 - changed him to the wallet address that I
47:14 - have copied if I go ahead and switch to
47:16 - the other account and then scroll down a
47:18 - little bit you can see that all the
47:21 - other ones are still with the basic data
47:24 - so with that being said that is your
47:27 - turo build I hope you enjoyed it I hope
47:29 - you got a ton of value out of it and if
47:31 - you did make sure to go ahead smash that
47:34 - like button subscribe to the channel
47:35 - because we're gonna drop a few more of
47:38 - these and with that said I'll see you in
47:41 - the next one