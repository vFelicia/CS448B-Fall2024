00:00 - in this video you're going to be
00:01 - building Airbnb with next.js you're
00:04 - going to be using solidity to build a
00:06 - contract and we're going to be using
00:08 - infuria to build this app on the
00:10 - ethereum blockchain you will be able to
00:12 - list and rent out your property you will
00:14 - also be using rainbow kit to connect
00:16 - your metamask wallet to the app itself
00:19 - so without wasting any more time let's
00:21 - go ahead and get started as usual we're
00:23 - going to be using our clever programmer
00:25 - CLI tool and after you're passing your
00:28 - email then your name you're going to go
00:29 - ahead and just type in solidity Airbnb
00:32 - or something along those lines and it
00:33 - will show up then it will start
00:36 - installing everything and will also open
00:38 - up infuria so go ahead and just create a
00:41 - new key or sign up with them if you
00:43 - haven't done that already and then just
00:45 - name your key Airbnb and then copy that
00:48 - key because we're going to be needing
00:49 - that very soon so at the very top you
00:52 - can see there is API key just go ahead
00:53 - copy it and then let's move on in the
00:56 - meantime our CLI tool will go ahead and
00:59 - open vs code for your convenience and
01:03 - you can just go ahead and get started
01:04 - now inside there you have you see
01:07 - there's a couple of files and that's
01:09 - where we're going to be working before
01:10 - we go ahead and get started just go
01:12 - ahead open up the terminal you can just
01:14 - hit command J and then check out if it
01:17 - runs or if everything is installed
01:19 - correctly just run yarn and then npm
01:21 - installed just for safety and then if
01:24 - everything is ready and good to go you
01:27 - should be able to start this app up by
01:30 - typing in your in Dev and this is what
01:32 - you will be able to see so if you got to
01:34 - this point good job let's move on to the
01:36 - next step alright so if you so if you've
01:39 - seen that just go back to your vs code
01:41 - and open up a new terminal or you can
01:43 - just stop running the app and then just
01:45 - type in Truffle in it that will initiate
01:48 - your truffle project which we'll be
01:49 - using throughout this project so now go
01:52 - into your contracts folder and create an
01:54 - Airbnb Sol file that's where we will be
01:57 - writing on the contract itself and the
01:59 - under that in migrations a zero one
02:02 - underscore deploy.js file will help you
02:06 - later in the build and deploy the file
02:08 - the contract itself so let's go ahead
02:10 - and create the instance of the Airbnb
02:13 - artifact and then this deployer function
02:16 - will help you actually deploy this
02:18 - contract so just type in module exports
02:21 - function deployer and then
02:22 - deployer.deploy Airbnb and then you can
02:25 - just forget about this file for the rest
02:26 - of this build because we're not going to
02:28 - be typing here anything else anymore I
02:30 - believe and uh one more setup thing that
02:33 - we need to do is just go into your
02:35 - truffle extension if you haven't
02:37 - installed it already it's available for
02:39 - free in the EVS code Marketplace and
02:42 - then just double check that under
02:43 - infuria service you actually do see
02:47 - Airbnb if you do not this is how you
02:50 - connect just hit connect hit the three
02:52 - dots hit connect to network and then
02:55 - inside and then just select inferior and
02:58 - under that your projects will be listed
03:00 - and then just select Airbnb if you if
03:03 - your projects are not listed you will
03:05 - need to sign in but it's a piece of cake
03:07 - and once you see Airbnb there you are
03:10 - good to go and we can go ahead and get
03:12 - started writing the contract
03:14 - all right let's go ahead and get started
03:16 - with the solidity contracts so
03:20 - first things first we're gonna have to
03:22 - specify the spdx license identifier
03:25 - which is going to be MIT in this case
03:27 - it's an open source project then we're
03:29 - going to be specifying the solidity
03:31 - version which is
03:33 - 0.8.16 if it's if you're on a different
03:36 - version I recommend you switch to 0 8 16
03:39 - otherwise there might be combat
03:41 - compatibility issues
03:43 - next up we're going to start the
03:45 - contract which is going to be an Airbnb
03:47 - obviously and we're going to have a
03:49 - couple of global variables in here the
03:51 - first one is going to be owner which is
03:53 - going to be a public address then we're
03:54 - going to have a counter which is going
03:55 - to be a public number and we're going to
03:58 - have rental IDs which is going to be an
04:00 - array of numbers again public now we're
04:03 - going to set up the Constructor here and
04:06 - the counter is going to start at zero
04:07 - and then the owner will always start at
04:10 - message sender so with that let's move
04:13 - on to property info struct
04:16 - now we're going to be setting that up
04:17 - right here as gonna be a struct as I
04:20 - said and it's gonna be it's gonna have a
04:22 - couple of things so it will have an
04:24 - owner it will have a guest those are
04:26 - going to be addresses and then it will
04:27 - have a name obviously a string a
04:30 - property address which is again going to
04:33 - be a string a description again string
04:36 - and an image URL which we're going to be
04:38 - stored as a string here and we're gonna
04:41 - have a booking starts at which is going
04:44 - to be a number these are going to be
04:46 - dates obviously that are going to be a
04:48 - booking ends at so this is what we're
04:50 - going to be checking later on and we
04:53 - will have a price per day and then of
04:56 - course we're going to have an ID and the
04:59 - bully a Boolean which is going to be
05:01 - checking whether or which is going to be
05:03 - storing whether the property is booked
05:06 - or not
05:07 - now next up let's go ahead and set up an
05:09 - event which is going to be called
05:11 - property listed and it will have a it
05:15 - will have a couple of properties so name
05:17 - property address description and image
05:20 - URL and then we're gonna be also having
05:23 - the price per day ID and there is an
05:26 - error which I'm not okay it's gone so
05:28 - that's good
05:29 - so that was probably a bug
05:31 - and then we're gonna have another event
05:34 - which is going to be property booked
05:36 - event
05:37 - and then we're gonna be storing the ID
05:39 - guest number of days price
05:43 - and these properties in it so these two
05:46 - are basically just console logging but
05:47 - on the blockchain
05:49 - so let's move on to mapping the
05:52 - properties now we're going to go ahead
05:54 - and create a mapping and we're going to
05:56 - be mapping numbers to a property info
06:00 - and this is going to be called public
06:03 - properties
06:05 - now let's go ahead and build the list
06:09 - property function so first of all we're
06:11 - going to have a couple of things that
06:12 - we're going to be passing in here the
06:14 - name property address description image
06:17 - URL price per day and so these will be
06:20 - the stuff that we will be using to run
06:22 - this function this is going to be a
06:24 - public function by the way and we're
06:25 - going to go ahead and create a new
06:27 - property variable that is going to be
06:29 - local only and we're going to be storing
06:32 - that in the properties array at the
06:35 - counter index it will have a couple of
06:38 - it will obviously have every single and
06:41 - we're gonna go ahead and
06:44 - assign values to each key so we're going
06:46 - to say and then the prop new probability
06:48 - the name equals name and we go through
06:51 - the entire thing description image URL
06:53 - price per day the ID is going to be the
06:55 - the counter we're going to have the is
06:58 - booked it starts with false and then the
07:01 - booking starts at and the ends at dates
07:04 - will will be initially zero the owner is
07:07 - going to be message sender and then the
07:09 - guest is going to be address zero which
07:11 - is just basically a plain 0x000 address
07:15 - that is just like energized zero and
07:17 - then what we're going to be doing is
07:19 - we're going to be storing the counter so
07:21 - that now that it exists we're going to
07:23 - be storing it in the rental IDs array so
07:25 - we're gonna push it there now this is an
07:28 - optional step but since we created all
07:30 - the events now let's go ahead and emit
07:33 - the property listed event and then pass
07:36 - in all the required arguments
07:38 - name property name property address
07:41 - description image URL price per day and
07:44 - counter and then increment the counter
07:46 - okay it says the property listed event
07:48 - is an Undeclared identifier oh that's
07:51 - because I didn't call it or I didn't
07:53 - name it properly initially so let's just
07:54 - let's just fix that and that is pretty
07:58 - much this section
08:00 - all right now let's go ahead and test
08:02 - the our newly written function
08:06 - so we're going to do is if you don't
08:09 - have it already just install the remix
08:10 - IDE extension and then set the compiler
08:13 - version to match the contract version
08:16 - and then just hit run deploy run and
08:19 - deploy and hit activate now that will
08:21 - pop this window open and then try to
08:23 - connect to the blockchain but there is a
08:25 - big chance that it cannot connect to it
08:27 - because we probably don't have ganache
08:29 - running
08:30 - so just open your ganache copy your RPC
08:33 - server port and then you can obviously
08:36 - put in your inferior link as well
08:39 - for development purposes it's easier to
08:41 - just use ganache for now and then when
08:42 - you deploy it you just deploy it using
08:44 - infuria and so you just change the port
08:47 - and once you're good just hit connect
08:49 - and there is your there are all your
08:51 - wallets and everything so now just hit
08:54 - compile on the contract and then you can
08:56 - go ahead and hit deploy as well
08:59 - now we'll flash a little bit and then
09:02 - you will be good to go you can call the
09:04 - counter it should say zero and then you
09:07 - just basically run through all the
09:09 - functions try listing a property with
09:12 - the whatever dummy data you want and
09:14 - then see what's happening now the one
09:16 - thing that I'll say though is if you try
09:19 - to put in the price in uh in eth or any
09:23 - kind of like non-hole number like 0.001
09:27 - that's not going to work it can own it
09:29 - can only work with the integer so what
09:32 - you want to do is go to this
09:35 - heathconverter.com website and then
09:37 - whatever price you I imagine in ether
09:39 - just convert it to weight and then put
09:42 - that number in there and that should
09:44 - work and now if you call the properties
09:46 - properties function you should get back
09:49 - all the details and that's pretty much
09:51 - it
09:52 - alright so let's go ahead and build now
09:55 - the book property function so that will
09:58 - have a couple of arguments property ID a
10:01 - start date and they just pass those in
10:02 - so we'll be a public payable function
10:04 - because there is going to be actual
10:06 - transaction that's going to be happening
10:08 - in this function
10:09 - and so what we're going to do initially
10:11 - is we're going to calculate the number
10:12 - of days using this easy nice little
10:15 - formula and so what's going to happen is
10:17 - on the front end we're going to be
10:18 - passing an end date and start date as
10:21 - milliseconds so here we actually have to
10:24 - calculate that and because that's how
10:27 - JavaScript works and then here we just
10:29 - have to turn it into what is it actual
10:31 - days so we're going to be calc let's see
10:33 - how much
10:35 - one day is in milliseconds and that's
10:37 - the number right there that 86 4 and a
10:40 - bunch of zeros pause it here copy it
10:42 - over I'm not gonna say it out because I
10:44 - I can't even count how much that is all
10:46 - right give me a break I'm old
10:48 - so just put it there divided by whatever
10:51 - number comes out and then after that
10:54 - what we're gonna do is now that we have
10:56 - the number of days and we know based on
10:58 - the property ID how much this property
11:01 - costs per day we're gonna make sure that
11:03 - the user is sending you know enough eth
11:05 - so we're going to be using the
11:07 - properties map or the properties mapping
11:10 - to calculate that so we're going to say
11:12 - number of days times the price per day
11:15 - for that specific property
11:17 - and then that has to be less than the
11:21 - message values so basically the the
11:22 - amount of eth that the user is sending
11:25 - if not we're gonna have to reject it
11:27 - with a send more eth or whatever error
11:30 - message and then here we're going to say
11:31 - payable properties property ID owners so
11:34 - basically all the if that is getting
11:36 - sent to the contract will be transferred
11:38 - over to the owner and the entire thing
11:41 - and then we're gonna set the is book is
11:45 - booked element of the property of the
11:47 - specific property to true so that others
11:50 - cannot book for the same period
11:53 - and then we're going to save the start
11:55 - date and the end date and then obviously
11:58 - the guests as well and then we're gonna
12:00 - go ahead and run the property booked
12:02 - event and we're going to emit it
12:04 - and that is basically the function
12:07 - all right so now that we've wrote this
12:10 - function let's actually go ahead and
12:11 - test it so the usual method just open up
12:14 - the remix ID extension and then we're
12:18 - going to go ahead rebuild and redeploy
12:20 - the same contract and so you will see
12:22 - version 2 right there so you can remove
12:24 - version one and there it is and now what
12:28 - you want to do is because it's a new
12:30 - like you will have to list the new
12:33 - properties just pop in whatever values
12:35 - you want to basically you just want to
12:37 - have one property there just test that
12:40 - it still works everything nothing has
12:42 - broken and now we're going to be testing
12:44 - the booking so you will need two dates
12:47 - in in like millisecond ISO format and so
12:51 - here's our eighth and so I'm just gonna
12:54 - whatever copy that but you can just go
12:56 - to the same website and then use
12:58 - whatever dates you want to just put a
13:01 - start date and put an ending date there
13:03 - and then if you just try to run this
13:05 - function right now you should see an air
13:07 - here so that error is good because we
13:10 - actually haven't send any to this like
13:12 - right now so for now just whatever value
13:16 - you want to pop in there but you should
13:18 - technically be calculating how much it
13:20 - costs per day and you just put in
13:22 - whatever value that you like make sure
13:25 - that is more than than the initial value
13:27 - or the price that you would need to pay
13:29 - and then just hit call and you should
13:32 - now see your your wallet address at both
13:35 - the owner and the guest properties and
13:38 - you should also see that the 10th
13:40 - argument which is booked that should be
13:43 - true so with that said if you see all
13:45 - those things then you're good to go now
13:48 - let's go ahead and set up the wallet
13:50 - connection for our app so we're going to
13:52 - be using wag me and rainbow kit and all
13:55 - these things with it so let's work for
13:58 - it let's go ahead and import rainbow me
14:00 - Rainbow Dash me slash rainbow kid style
14:02 - CSS and then chains configure chains
14:05 - create client and wag me config from wag
14:08 - me and then get default wallets rainbow
14:10 - kit provider Dark theme obviously you
14:13 - don't have to import Dark theme but it
14:16 - looks better from Rainbow me slash
14:18 - rainbow kit
14:19 - and then the inferior Provider from
14:21 - wagme provider infur and later in the
14:24 - video I'll be fixing that typo but that
14:27 - is actually provide durs with an S at
14:29 - the end
14:30 - so plural and then the same for Json RPC
14:33 - provider a chains and then okay so let's
14:36 - go ahead and set up chains and the
14:39 - provider so we're going to be using
14:42 - configure chains and then just pop in a
14:44 - array of chain.gurly and chain that
14:46 - localhost so what we're going to be
14:48 - doing here is just see all the different
14:50 - chains that this application will be
14:52 - able to connect to and for each of them
14:55 - there's going to be two providers that
14:57 - we're going to be setting up
14:59 - so we're going to be using infuria to
15:01 - connect girly and then we're going to be
15:03 - using ganache to connect to the local
15:05 - chain so for inferior we need to pass in
15:08 - the inferior API key I hope you still
15:10 - have it copied on your clipboard and
15:12 - then the inferior provider will be
15:15 - traded with the with higher priority so
15:19 - let's grab the API key again if you
15:22 - don't have it so just copy that and then
15:23 - create an EnV file put it in there and
15:26 - then just make sure that the names match
15:29 - up so inferior underscore API key or
15:31 - whatever you want to but you got to make
15:33 - sure they line up between the app.js
15:36 - file and the EnV file
15:38 - otherwise there will be an error and
15:41 - then for Json RPC provider you need to
15:43 - put in obviously priority number two but
15:45 - you can just skip that and then you have
15:47 - to configure the RPC itself because aim
15:51 - viewer comes with the RPC
15:53 - but not with the API key
15:56 - the Json RPC provider is completely
15:58 - custom so for RPC just say chain and
16:02 - then hdp
16:04 - 127001 75 45 basically it's your local
16:07 - host and then just copy the link over
16:10 - from ganache
16:12 - and then we're going to create a
16:13 - connectors from get default wallets and
16:16 - then you just configure it with whatever
16:18 - app name you want to passing chains and
16:21 - then create a wagme client
16:23 - and then just make sure the auto connect
16:25 - is true
16:27 - that way the wallet will be connected
16:29 - automatically and then passing the
16:31 - connectors and the provider
16:33 - now you want to go down and wrap the
16:36 - component between the wagme config
16:39 - passing client and wag me client and
16:42 - then wrap rainbow kit provider around
16:44 - the component as well and then that
16:47 - should be pretty much it now
16:49 - here's the fix that I was talking about
16:51 - so just that's the error that's going to
16:54 - cause so just make sure the inferior
16:56 - provider and the Json rpz provider you
16:59 - fix that and then put in the plural and
17:01 - that should be now good and now if you
17:05 - go over into header
17:08 - you will need you will want to import
17:09 - connect button from rainbow kit and then
17:13 - all the way at the bottom
17:15 - just a render out connect button and
17:17 - that should show up right now and it
17:19 - should be working so if you disconnect
17:21 - or whatever your your wallet now you
17:24 - will be able to connect and use the
17:27 - rainbow library to connect your wallet
17:30 - to your app so with that said let's go
17:32 - ahead and move on
17:34 - all right so now let's go ahead and
17:37 - using the wagme library we're gonna be
17:40 - we're going to be saving the address of
17:43 - the user who connected their wallet so
17:46 - we're going to import use account from
17:47 - wagme and then just extract address out
17:50 - of it and that will take care of that
17:51 - will take care of literally everything
17:52 - for us and every time that address
17:55 - changes we're going to want to run a use
17:57 - effect
17:58 - that makes sure that the address
18:00 - actually exists meaning there's a wallet
18:02 - connected to the app and then we're
18:04 - going to be saving that address in our
18:06 - set user address
18:08 - you stayed on the user at a few State
18:10 - just to make sure it works you can go
18:12 - ahead console log it and then you can
18:15 - run a couple of tests there it is
18:17 - there's my address I'll connect it and
18:19 - then if you change it to a different
18:21 - wallet it should update and show you a
18:24 - different address now next up what you
18:26 - want to do is go ahead create a new
18:28 - folder called utils and inside there we
18:32 - will create a constants.js file so in
18:36 - here we're going to be importing the
18:37 - contract from airbnb.json and don't
18:40 - worry about it we haven't put it in here
18:43 - yet so we're gonna put it in just a
18:44 - second
18:45 - and then we're going to import a web3
18:47 - from the web3 package and now we're
18:50 - going to go ahead and save the save the
18:53 - address of the deployed instance of this
18:56 - application however we haven't deployed
18:58 - it yet so let's go ahead and do that
18:59 - right now just go ahead and right click
19:01 - on your Airbnb dot Sol and click deploy
19:04 - and then now you want to go ahead select
19:06 - the girly because we're on the girly
19:08 - Network and use inferior there's your
19:10 - link so just double check that it's
19:12 - there and using inferior just go ahead
19:14 - and deploy this contract and then a
19:17 - little bit it should show up your
19:20 - freshly deployed nice little warm and
19:24 - toasty contract address so just pop that
19:26 - over there
19:27 - and now you want to go ahead and Export
19:30 - a create contract function
19:33 - so all that's going to do is it will
19:35 - extract the ethereum object from window
19:39 - and then using that it will create a new
19:42 - contract so we'll say new web3.eath DOT
19:46 - contract and then passing the API and
19:48 - then the address so now let's actually
19:52 - put in the API in the same folder
19:55 - so inside of build slash contract
19:57 - there's the Airbnb the Json file that's
19:59 - the ABI and so we just want to go ahead
20:01 - copy that and then paste it into utils
20:03 - and there it is now you will be able to
20:06 - import it
20:08 - now there's one thing that was supposed
20:10 - to be there but for some reason it got
20:12 - deleted as a modal Styles will be
20:14 - it's not really a blockchain related
20:17 - stuff but it's just some styles that got
20:20 - deleted so just copy whatever I'm typing
20:22 - there so it'll be modal Styles and then
20:25 - content 300 pixels height and then 400
20:27 - pixels wide margin Auto margin top 150
20:30 - pixels and display flex and then for
20:33 - overlay it'll be a zero zero zero and
20:36 - then 0.7 rgba it's whatever that's fine
20:40 - just copy that and then you should be
20:42 - and now what you're gonna do is go back
20:44 - into your use airbnbjs file and then
20:46 - import the create contract function that
20:49 - we just created in constance.js and
20:52 - right here in the use effect you want to
20:54 - set the contract and then put the create
20:56 - contract function in there just make
20:59 - sure you put the open and closing
21:00 - brackets there so that it actually runs
21:02 - and so with that said that should be
21:05 - good
21:06 - all right let's go ahead and fetch all
21:09 - the properties none of them are going to
21:11 - show up because we don't have any but
21:12 - let's still do it
21:14 - so we're gonna have a function get
21:16 - property this is going to be an async
21:18 - function because we are handling
21:19 - blockchain stuff and in there we're
21:21 - gonna have a we're gonna have a try
21:24 - catch if it goes on error we're just
21:26 - gonna console login and I'm gonna have
21:28 - to worry about error handling for now
21:31 - and then try
21:32 - we're going to have a number of
21:34 - properties which is basically just gonna
21:36 - fetch the counter from the contract so
21:39 - you can go back and check what that does
21:41 - but basically it's just a number
21:44 - that counts how many properties we have
21:46 - and so
21:49 - once that's done we're gonna go ahead
21:51 - and set the properties
21:53 - you stay to an empty array you will see
21:56 - under you will see in a little bit why
21:58 - and so what we're going to do is now
22:00 - we're going to Loop through all of the
22:03 - properties but the way we're going to be
22:05 - doing it is we're going to have to fetch
22:07 - individually each and every single
22:08 - apartment so what we're going to do is
22:10 - go from index 0 all the way to a number
22:13 - of props
22:14 - and we're gonna call the contract that
22:16 - methods properties we're gonna basically
22:20 - fetch from the mapping every single
22:22 - property
22:24 - and whatever we get back we're going to
22:27 - need to format it because the blockchain
22:28 - sends back a bunch of random stuff with
22:32 - the useful information so we're going to
22:33 - have ID name we're going to have
22:36 - description we're gonna have price per
22:38 - day we're gonna have ispoked and we're
22:41 - gonna have address I believe and you
22:45 - will later see it but I here I forgot to
22:48 - import IMG URL so go back copy that from
22:51 - the contract and just paste it here it
22:54 - will save you a little bit of a headache
22:55 - later but I'll show you that anyways and
22:58 - now what you're going to do is append
22:59 - the formatted property to the current
23:03 - Pro current state of the properties you
23:05 - say now what you want to do is create a
23:08 - use effect that runs every time the
23:10 - contract changes and then that use
23:12 - effect will run the get properties
23:14 - function
23:16 - so every time a new contract is loaded
23:18 - up we will be fetching all the
23:21 - properties that are and then go ahead
23:24 - console log it and if you get a empty
23:27 - array
23:28 - good job now let's go ahead and
23:31 - implement the add listing function so we
23:34 - don't just get an empty array
23:36 - so we're gonna say constad listing
23:39 - equals is it will be an async function
23:42 - and we'll need to pass in name property
23:44 - address description
23:46 - image URL price per day to it and what
23:50 - we're going to do is obviously if the
23:53 - contract is if the contract exists we're
23:57 - going to have a try catch
23:59 - and we will be calling the contracts
24:03 - methods
24:04 - list property function and then pass in
24:06 - everything that we so name property
24:08 - address description image URL and price
24:10 - per day and now we're going to be
24:12 - sending that from the address that is
24:14 - logged in to the app for a guess where
24:17 - you can just pass in like 3 million and
24:19 - then gas limit and all and then just go
24:22 - from there
24:23 - once that once we added a new property
24:25 - you want to refresh refresh the
24:28 - properties so just run get properties
24:29 - function
24:31 - and to be able to use this function
24:34 - outside of this hook you will want to go
24:37 - ahead and Export that or return it so
24:39 - let's see if it works so I'm just gonna
24:41 - click it and something seems off so
24:44 - let's see what's up with down create it
24:45 - seems like it's not defined let's define
24:48 - it so inside of new listing form the JS
24:50 - let's create that function and you want
24:53 - to prevent default so that the page
24:55 - doesn't reload itself
24:57 - and then what we're going to do is we're
24:59 - going to calculate how much the price
25:01 - per day is in weight because if you
25:03 - remember the contract only works with
25:06 - way so we can use the web 3
25:09 - we can use the web 3 library to do that
25:12 - so
25:12 - weapery.2way and then passing price per
25:15 - day and then the original type is ether
25:18 - and so after that you can just run add
25:21 - listing pass in everything that it
25:23 - requires and now with the newly
25:25 - calculated price in way and now that
25:29 - should be good to go so now it should
25:31 - work so let's just test it just some
25:34 - dummy data upload an image
25:36 - perfect and
25:40 - let's go pay for it
25:42 - and as you can see now it was successful
25:44 - I'm gonna refresh and it looks like the
25:47 - address is not defined so let's see
25:49 - what's happening with that listings
25:51 - listing item we need an address oh yeah
25:55 - we gotta import it so let's just do that
25:57 - real quick and then destructure from
25:59 - user BMB okay that looks good and now it
26:02 - looks like the image is not loading for
26:04 - whatever reason and it says the source
26:07 - is missing
26:08 - however the sources clearly there so
26:11 - that can only mean one thing and that
26:14 - means that when we are pulling in from
26:17 - the contract we are not actually
26:18 - destructuring it so we just confirm that
26:21 - with a console log so let's actually do
26:23 - that this is what I was talking about so
26:25 - just put it there fetch the image URL
26:27 - and that should solve the issue now it
26:29 - shows up twice but if you refreshing it
26:31 - will only show up once and the app is
26:34 - good to go now we only have to book the
26:36 - property and we are ready with this app
26:39 - okay so the very last thing now that we
26:42 - need to do is being able to book the
26:45 - property so let's go ahead and go
26:47 - through that and we're done with this
26:49 - build so in the userbmb we're going to
26:52 - create a new function that'll be that
26:55 - we'll call book property and it will be
26:58 - an async function with the arguments ID
27:00 - start at and end that so first we're
27:04 - going to check if we have a contract and
27:06 - everything's ready to go on the
27:08 - blockchain side and then we're gonna be
27:09 - running a try catch
27:12 - just to keep things safe now we're gonna
27:16 - have to check what the due price is and
27:18 - we're going to be using the contract for
27:19 - it however we haven't made that function
27:22 - on the contract end so let's go ahead
27:25 - and do that right now so let's go in
27:27 - there and in Airbnb Sol we're going to
27:30 - create a new function
27:32 - get due price and we're going to pass in
27:35 - three arguments ID start date and end
27:37 - date it will be public view function
27:40 - that will return a number
27:42 - so first what we're going to do is we'll
27:44 - get the property from the property is
27:46 - mapping using the ID
27:48 - then we're going to calculate how many
27:50 - days it will how many days the guest
27:53 - would like to stay using the same exact
27:56 - function formula that we already used
27:58 - and we're going to be returning the
28:01 - number of days time the price per day so
28:03 - basically the total due price that's all
28:07 - for the function will do and then we're
28:09 - going to go ahead let's actually we're
28:11 - going to go ahead and redeploy this
28:12 - function the reason is every time you
28:15 - change something on the blockchain you
28:16 - will have to reapply it so that comes
28:19 - with having to update the contract
28:21 - address and the ABI as well so go back
28:25 - into your instance JS in the utils and
28:28 - then just update the contract the
28:30 - address cons
28:32 - and now we're gonna go ahead remove the
28:35 - original Airbnb Json and then replace it
28:37 - with the new Abi so once that all once
28:42 - all that is done we will have the due
28:44 - prize and now what we're gonna do is
28:46 - using the book property function in the
28:49 - user BMB a hook we're gonna call
28:53 - we're gonna go ahead and book it we pass
28:55 - in all the required data so from user
28:58 - address and then value due price because
29:00 - we now we have it so that way there will
29:03 - be no overpayment under payment no error
29:05 - is there
29:06 - and passing the required gas limits and
29:09 - then once you call once you book the
29:11 - property you want to refresh the page so
29:14 - just run get properties and you should
29:16 - be good to go and uh here are the
29:19 - starting day at start day and date you
29:21 - state and everything that is being run
29:24 - in the in the booking model is just to
29:26 - show that this is how the other side of
29:28 - the app works all right let's go ahead
29:30 - and now test it so we're going to add a
29:32 - new listing just like we did last time
29:35 - so all right let's let's get all of it
29:38 - done as you can see it shows up
29:40 - perfectly and now let's go ahead and
29:42 - book it and let's see what happens so
29:45 - this is a perfect nice little is it
29:47 - perfect it's not a perfect nice little
29:48 - modal so let's just book three days and
29:51 - hit confirm and it looks like book
29:53 - property is not a function and it
29:56 - doesn't exist and that is likely because
29:58 - we haven't exported it from the hook
30:00 - let's go try it again and now it seems
30:03 - like it's going through
30:04 - and contract interaction is as you can
30:09 - see the moment it's done pending
30:12 - and you refresh the page the property
30:14 - will be unavailable so that is it that
30:16 - is the app now go ahead and feel free to
30:19 - build on top of it add new features to
30:21 - it and with that said thank you so much
30:23 - for watching see you in the next one