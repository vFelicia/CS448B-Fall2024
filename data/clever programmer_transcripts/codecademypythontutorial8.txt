00:00 - what is up everybody this is Kazi from
00:02 - clever programmer calm and you are
00:04 - watching code Khadem e part 8 alright so
00:12 - let's get started
00:13 - today I got my coffee in a Starbucks
00:17 - coffee thing this is going to be I'm
00:21 - actually really excited so we are on at
00:24 - 35% in the Python course and we're doing
00:29 - really well so let's keep going alright
00:32 - we are still in lists and dictionaries
00:34 - okay at 42% if you took the initiative
00:37 - to go ahead and do more in the time
00:39 - between great job but we're going to
00:42 - keep moving on and also it's amazing
00:46 - you've made it so far and haven't quit
00:47 - right so winners never quit and quitters
00:50 - never win keep going make sure you
00:52 - finish the entire series in the tutorial
00:55 - that's why I'm here sitting next to you
00:57 - and we're going through this together
00:59 - alright so maintaining order let's see
01:04 - what they're talking about here alright
01:06 - sometimes you need to search for an item
01:08 - in a list so sometimes you need to
01:12 - search for the item alright here's what
01:14 - they're kind of talking about okay let's
01:15 - go to rebel dot it let's say that this
01:20 - was a really big list with a bajillion
01:22 - things in it and I told you what
01:25 - location does the duck comment I mean
01:28 - you could easily count it right now and
01:30 - go well aardvark is in position 0 badger
01:33 - is in position 1 and so duck is actually
01:37 - in position 2 so you would say if I did
01:40 - animals of two and printed that that
01:45 - would give me duck and you would be
01:47 - right however however if this was a
01:52 - really long list with a bajillion items
01:54 - it would be really hard for you to know
01:57 - where duck Falls right you wouldn't be
02:00 - able to count it that easily eyeball it
02:02 - so one good trick to do to figure out
02:06 - where duck Falls is to do animals dot
02:10 - index
02:11 - okay this is a method called index and
02:16 - we are gonna put in these parentheses
02:20 - right here if I move the print away it
02:24 - will look like this and we will set duck
02:25 - so basically you're saying hey um
02:30 - give me the index at which duck is that
02:34 - okay so it will tell you the index the
02:37 - first place duck is found so imagine if
02:40 - you had two ducks if you had another
02:42 - duck right here it would find this one
02:46 - and return it to so let's go ahead and
02:49 - show you how it actually works we go
02:51 - boom boom and let's change the name of
02:55 - that to this run it okay you see how I
03:01 - gave you back a two so effectively what
03:05 - you can do is you can say animals this
03:08 - whole thing turns into a to write this
03:11 - whole thing converts to a two so we can
03:13 - say animals instead of saying animals at
03:18 - index two I can say give me the animal
03:21 - name at this index obviously it's going
03:26 - to give me back a duck because this
03:28 - whole thing is going to turn into a two
03:30 - and animals of two is stuck cool all
03:38 - right let's keep moving on so duck index
03:41 - use index to find duck simple animals
03:46 - dot index doc boom um your code here
03:54 - print animals okay
03:57 - assign that result to a variable called
03:59 - duck index assign that result then
04:06 - insert the string Cobra at that index
04:11 - okay cool so let's see how that works
04:15 - okay let's take this whole thing and put
04:18 - it in here
04:21 - okay now if I print out doc index you
04:30 - see that I get back a two now if I do
04:35 - dunk I'm sorry if I do animals that
04:39 - answer right and how does insert work
04:42 - insert takes in two font and two
04:46 - arguments okay index this method insert
04:49 - takes in two arguments it takes index
04:51 - and an item so you give it a position
04:54 - and you give it what you want to put in
04:55 - there and then it puts that thing in
04:57 - there
04:57 - okay so I'm going to say for now I'm
05:02 - gonna sit - and I'm going to say Cobra
05:06 - or in all small letters and then I'm
05:10 - going to print out the list animals
05:15 - alright so you can see that a position -
05:18 - now it inserted Cobra and shifted
05:21 - everything one over so now duck is
05:23 - actually three EMU is four and so on
05:27 - cool another way we can insert instead
05:32 - of putting this two is we can just do
05:34 - animals dot and then moles dot index
05:40 - duck and this whole thing will evaluate
05:44 - to a two or we can just use duck index
05:47 - because we already created that
05:48 - variables and that should do the same
05:50 - thing so you see that list over there
05:52 - now let's go back here and do that so
05:55 - we're going to do animals dot index duck
06:00 - index so that's so or sorry
06:03 - insert duck index and for the item where
06:08 - you're going to say Cobra boom and it's
06:13 - going to print animals so let's check it
06:14 - out aardvark badger in position - we got
06:18 - Cobra okay excellent let's keep going
06:22 - for one and all for number in my list
06:25 - all these are so fun finally we get two
06:29 - loops yes I can't remember if we did
06:32 - loops earlier
06:33 - but loops are so fun they're literally
06:36 - the reason why I love programming every
06:38 - time I try to sit down and write
06:40 - something I just want to start off with
06:41 - the loop okay they're the best part so
06:44 - write a statement oh whoops
06:49 - yeah I'm vain right that was just my
06:51 - picture of me playing pool I'm terribly
06:55 - just kidding I'm better than myself and
07:01 - I used to play earlier so if that gives
07:04 - you any point of reference anyways write
07:06 - a statement in the indented part of the
07:08 - for loop that prints a number equal to
07:10 - two times the number for every item in
07:13 - the list let's see how loops work let's
07:15 - get some practice with loops loops are
07:17 - amazing you guys so learn them and learn
07:20 - them well okay so here's how a loop
07:23 - start okay four okay this is a for loop
07:27 - for blah blah blah blah blah doesn't
07:30 - matter in my list print that blah blah
07:37 - blah blah blah blah blah which is what
07:38 - I'm going to copy and paste here and how
07:42 - a loop works is it will run and the
07:44 - first time it runs blah blah blah this
07:47 - whole thing right here will be one then
07:49 - when it runs the second time it will be
07:52 - nine then when the loop runs the third
07:54 - time it'll be three then it'll be eight
07:56 - then it'll be five lb7 and then after
07:59 - seven you see that there are no more
08:01 - numbers and so that entire loop stops so
08:03 - the loop knows when the list or whatever
08:06 - you're running through is completed so
08:08 - here all of the items are completed and
08:11 - so it'll stop running at that point okay
08:15 - so I'm going to run this you're going to
08:18 - see it prints out one nine three eight
08:20 - five seven okay this part here is the
08:25 - part that ends up becoming a number so
08:27 - I'm going to call it number because
08:29 - that's a much better than named and blah
08:30 - blah blah blah but why I showed you the
08:33 - whole weird part was so you can
08:34 - understand that you don't have to put in
08:37 - the variable name that they tell you you
08:39 - can put in whatever you want right this
08:42 - variable name here literal
08:44 - does not matter cool comprende all right
08:50 - let's keep going so for a number in my
08:53 - list the first time the loop happens the
08:57 - number is 1 and then we go to line 4 and
09:01 - it prints out that number and you get 1
09:03 - then the loop runs again because it sees
09:06 - there's another item the list is not yet
09:08 - over and so we get an so number is then
09:11 - 9 and then this ends up printing out 9
09:15 - the loop continues running this part
09:18 - becomes 3 so then this part becomes 3
09:20 - and it prints it out so you get a 3 here
09:23 - then this part becomes a 8 this part
09:27 - becomes an 8 and you see all that
09:29 - printed right there and it keeps
09:31 - happening till it's 7 this part becomes
09:34 - 7 it prints out 7 and then it knows it
09:38 - knows automagically that the list has
09:41 - ended you don't have to do anything
09:43 - special it knows that the list has ended
09:46 - and so the loop stops running some
09:49 - languages don't do that you have to kind
09:51 - of tell it like hey run for this mini
09:53 - amount of times and see I think you have
09:56 - to do that in C++ but in Python it just
09:59 - takes care of it for you ok
10:01 - so coffee is so good for failed bug this
10:11 - is a double tall skinny latte sugar-free
10:17 - hazelnut with heavy cream milk so go to
10:21 - Starbucks and get this there's no carbs
10:23 - and it gives you that right amount of
10:26 - expresso so your brain gets going and
10:28 - then you can program away all day
10:30 - anyways tangents we don't like 10 let's
10:33 - keep going so you just learn how basic
10:37 - loops work now let's do what they're
10:39 - saying write a statement in the indented
10:41 - part of the for loop that prints a
10:44 - number equal to two times that number so
10:46 - we are going to say print 2 times that
10:50 - number simple simple there we go
10:55 - we just got a bad you guys hundred
10:58 - exercises let's keep going we're a
11:00 - machine we're nobody
11:02 - there's ain't no stopping us right so we
11:05 - got to right so number was one and one
11:10 - times two is two and it print out too
11:15 - you see it right there then number was
11:19 - nine right I know loops can be confusing
11:23 - at first so that's why I'm really going
11:25 - through it in detail and if you're too
11:27 - smart you're like this is boring feel
11:29 - free to skip ahead I don't care but I
11:31 - really want to go through it because
11:32 - don't take this for granted
11:33 - if you really understand this well
11:35 - you're gonna understand a lot of what
11:37 - programming is about so it's really
11:41 - important to understand the basic
11:42 - concepts really well like the back of
11:44 - your hand cool so two times nine that's
11:48 - how you get 18 and I'm just going to
11:49 - explain one more number when we get to
11:52 - the last item of the list seven seven
11:54 - right here two times seven you get 14
11:59 - and that's how you get 14 right there
12:00 - and then it ends because it knows that
12:04 - the list is completed automatically
12:06 - let's keep going okay so more with four
12:12 - loops so now they're having you do more
12:14 - with four loops so if your list is a
12:18 - jumbled mess you need you may need to
12:20 - sort it so an example of sorting is like
12:23 - this okay if I have animals and I do
12:25 - animals sort and print out animals is
12:28 - going to be sorted alphabetically which
12:31 - means the ant is going to be the first
12:33 - one since bat starts with a B that's
12:35 - going to be the second item and cat is
12:37 - going to end up being the third one so
12:40 - let's look at it and bat cat got it if
12:42 - we had numbers instead like three one
12:47 - and two you'll see that it says one two
12:51 - three okay
12:52 - so sorting knows what to do it sorts it
12:54 - so then your life is easier and then you
12:57 - can print out those things or whatever
12:58 - right cool for animal in Adam for animal
13:04 - and animals print animal
13:05 - okay this is a very simple thing to do
13:08 - so I can show you right here simple loop
13:11 - for animal in animals I can call this
13:14 - whatever I want right like but animal
13:17 - makes sense because the first time you
13:19 - go through the list animal is going to
13:22 - be cat and it's a string cat right and
13:28 - then it's going to print out cat
13:33 - basically okay
13:35 - and then it's going to print out or
13:40 - sorry since we were sorting the list
13:41 - it's going to print out and first
13:43 - because the new list actually looks like
13:48 - this right bat and cat so it's going to
13:54 - print out ant then cat this part I'm
13:58 - sorry should actually be animal then
14:01 - animal is going to be bat it's just
14:03 - going to print that bad then animal is
14:05 - going to be cat and it's going to print
14:06 - out cat so let's take a look at it
14:09 - syntax are yep print okay because this
14:14 - is Python three again one of those
14:15 - things don't worry about it but in
14:17 - Python 3 printers of functions you have
14:18 - to put parentheses after it you can see
14:21 - right here add bat and cat okay it works
14:23 - the same way with numbers as it works
14:25 - with strings or a lot of other data
14:28 - types floats right write a for loop that
14:34 - iterates over start list and append each
14:36 - number squared to square list easy let's
14:41 - do it and then square the list all right
14:43 - so here's an example of this we're going
14:47 - to take this thing and we're going to
14:50 - create a square list and it's going to
14:52 - be empty this is a very common operation
14:55 - so really get this one down and maybe
14:58 - make up some of your own silly or
15:00 - whatever kind of examples and do them
15:02 - here's what we're going to do we have a
15:06 - start list but what we want to be able
15:08 - to do is get a list that's squared of
15:10 - that one right so what's squared of
15:12 - what's five squared so I'm just going to
15:14 - do it it's 25 right 5 squared 25 so
15:18 - this list should ultimately look like
15:20 - this 3 squared is 9 1 squared is 1 2
15:24 - squared is 4 4 squared is 16 ok so start
15:29 - list is this squared list should be like
15:31 - this however we got it empty and let's
15:34 - use a loop to do it because what if
15:36 - these numbers were to change our code
15:39 - should run regardless of what these
15:41 - numbers are right the code the code that
15:47 - I start writing below line 3 it should
15:51 - be so smart that if somebody comes in
15:55 - and changes our line on one and put some
15:58 - different numbers in here it should
16:00 - still be correct right so that's why you
16:02 - can't hard code it and put 25 + 9 + 1 +
16:06 - 4 + 16 because what if somebody comes
16:10 - here and just changes it and goes 4 + 5
16:13 - and now it doesn't make sense first of
16:15 - all why do we have 5 numbers right off
16:17 - the bat it's wrong should only have two
16:18 - numbers and the first number should
16:20 - really be 16 and then it should be 25
16:22 - none of the other numbers should be
16:24 - there so we're going to write code
16:26 - that's going to be intelligent enough to
16:28 - do that so we're going to start off with
16:29 - an empty list what we're going to do is
16:31 - for number in start list so we're going
16:36 - to do a for loop and what we're going to
16:38 - say is we're going to square each number
16:41 - so I'm going to say square that would be
16:46 - number squared instead of this in Python
16:51 - we use this right that's for
16:53 - exponentiation and then we are going to
16:56 - say square list dot append Square or
17:02 - let's call that variable squared number
17:07 - okay
17:09 - so we're going to get a number let's say
17:11 - in the start when we're looping through
17:13 - the start list this is going to be a v
17:15 - squared number is going to be really v
17:19 - squared in the start this is going to
17:21 - turn out to be 25 and we're going to
17:24 - append 25 right we're going to put 25
17:27 - here and this 25 is going to go in this
17:30 - list we're going to get 25 right here
17:32 - okay
17:32 - then when we go through the loop again
17:34 - this is going to be three this thing is
17:37 - going to be three squared which is going
17:41 - to get evaluated to nine we're going to
17:43 - say app and right here with in step n 9
17:47 - we're going to get 9 right here same
17:51 - thing the next item in the list is what
17:53 - it's 1 right so we're going to get 1
17:56 - squared what's 1 squared plus 1 right I
18:00 - can prove it to you 1 squared is 1 1
18:03 - cubed is 1 1 9 right you get the point
18:08 - 1 and then we get 1 that's how pen works
18:13 - adding something to the end append
18:16 - append adding something to the end of
18:19 - the list cool so I think you get the
18:23 - idea this is going to be our algorithm
18:25 - and let's go and put it right here and
18:29 - that should work
18:31 - let's see what's your square number okay
18:36 - so one thing we need to do oh so this is
18:40 - obviously squared number and well one
18:43 - thing last thing we need to do is
18:44 - actually sort that list so right now if
18:47 - I do print square list
18:54 - okay right now if I do print square list
18:58 - you'll see 25 9 1 4 16 which is what we
19:01 - wanted but now what we're going to do is
19:03 - how would we squared right sort and then
19:07 - we're going to say print square list and
19:12 - here then ah look at that right 1 4 9 16
19:17 - 25 beautiful so let's go ahead and put
19:22 - that in here we should be good done
19:30 - beautiful check it out dictionaries then
19:36 - this next part is key okay so there's a
19:38 - pun because what we're going to be
19:41 - working with is a dictionaries and
19:43 - dictionaries hold something called key
19:45 - value pairs
19:46 - okay so dictionaries all right what we
19:52 - have is a dictionary and holds key value
19:57 - pairs so effectively it's something like
20:01 - I can have I don't know
20:07 - Bob social security number or something
20:10 - more interesting phone number right 1 2
20:12 - 3 4 5 6 7 8 9 boom
20:17 - ok and then I can have a Joanne and her
20:24 - phone number can be they all have very
20:30 - simple and weird phone numbers right and
20:33 - I can have a thousand people like this
20:37 - okay so phonebook so this is called the
20:44 - dictionary Bob here's the key and this
20:48 - is the value hence key value pairs right
20:51 - now if I wanted to get Bob's phone
20:54 - number or Joanne's phone number imagine
20:56 - if it was a list of a million people if
20:59 - it was a dictionary with a million
21:01 - people's names and there is no way I can
21:03 - go an eyeball every single number and
21:06 - every single name so what I would
21:08 - actually do is I would do phonebook so
21:12 - how it works is you do the dictionary
21:15 - and then you put the key that you want
21:18 - and the answer that you get is that
21:21 - value okay so for example if I put in
21:27 - the dictionary which is the okay so the
21:30 - dictionary here is phonebook and if I
21:34 - index it by its key which is Bob right
21:39 - what am I going to get I'm going to get
21:44 - back Bob's phone number
21:45 - run keys not defined oh you're right
21:51 - here to comment that out
21:59 - Oh because so the reason I got that is
22:03 - because it's thinking it's math so what
22:06 - it did is one two three - four five six
22:09 - - seven eight nine zero so that's how it
22:13 - got negative eight thousand two hundred
22:14 - twenty three so it's a string right I'm
22:17 - just being silly so I have to put this
22:20 - actually as a string and now you get
22:24 - back exactly that okay so that was
22:26 - turned out to be a good example in
22:27 - showing you why you should use a string
22:29 - rather than natural numbers so you get
22:32 - back one two three four five six seven
22:34 - eight nine zero and we got Bob's phone
22:36 - number so this is really helpful this is
22:39 - a lot of what's used in databases that's
22:43 - how your iPhone works okay it's key
22:47 - value pairs literally somebody
22:49 - programmed a dictionary in your phone
22:51 - and so what happens is when you look for
22:54 - somebody's name like if you if you want
22:56 - to call Jill and you type in her name
23:00 - what the code in the background does is
23:03 - it does print phonebook Jill right
23:11 - whatever you put in there is here right
23:14 - this is what you type so if you type in
23:17 - somebody's name it pretty much goes in
23:19 - here and if you do Jill it'll give you
23:21 - back you know Jill's number whatever it
23:25 - may be so this is very relevant right
23:29 - don't just think that this is some
23:31 - little baby stuff that we're doing on
23:33 - code Academy this is very relevant
23:35 - if you learn this stuff you can do
23:37 - mobile development you can do app
23:38 - development you can make your own apps
23:40 - okay so already start thinking turning
23:43 - that brain and getting some ideas and
23:44 - you can actually start using these
23:46 - things think about recipes right you can
23:50 - actually make a cooking app based on
23:52 - this you can have key value pairs if the
23:55 - key is I don't know grill salmon then
23:59 - the value here maybe can be the steps on
24:02 - how to make that salmon right so it can
24:04 - be like first I suck at cooking
24:07 - take out the pan or something and
24:11 - could be grilled salmon and then I can
24:16 - call this recipes and let's take that
24:20 - out and if I do recipes to my spelling I
24:28 - write recipes
24:31 - yeah I'm sewing alright okay
24:34 - and if I put grilled salmon I'll check
24:40 - it out it's telling me the steps and
24:43 - what I can effectively do here is I can
24:46 - do a list of steps right so I can say I
24:51 - and now I don't have to say first take
24:53 - out the pen I can just say take out the
24:55 - pan then the next step is turn on the
25:01 - stove right and now I'm going to do
25:06 - grill salmon you see it says take out
25:09 - the pan turn on the stove right but
25:12 - let's say I want to get step zero which
25:14 - is the first step I can do zero and I
25:16 - get take out the pan if I do one I get
25:22 - turn on the stove so you see these are
25:25 - different data structures we're using a
25:27 - dictionary and using a list as a value
25:29 - of a dictionary key but it's all coming
25:33 - into play and well another thing that
25:36 - you can be thinking of is what if I want
25:38 - to do a for loop here and print out each
25:40 - step one by one I can certainly do that
25:42 - I can say for recipe or I can say first
25:47 - step in recipes write print I actually
25:56 - should rather be recipe because that's
25:59 - really what's going to printing in
26:00 - recipes print recipes recipe right so
26:08 - this is the dictionary effectively right
26:13 - because this is the dictionary so this
26:15 - is the dictionary name recipes this is
26:17 - the key so the first time you loop over
26:21 - you get grill
26:22 - salmon okay just to show you if I do
26:26 - recipe here and I loop through this you
26:29 - get turn on the stove you get our sorry
26:32 - you get grill salmon right here because
26:34 - this print statement doesn't matter
26:36 - you get grill salmon right there okay
26:40 - which is the key and if you put in a key
26:44 - into the dictionary you get back the
26:45 - value right so I can do recipes which is
26:49 - the dictionary I put in that key and I
26:52 - get back the value right take out the
26:59 - pan turn on the stove cool and we can
27:04 - even really take that a step further and
27:06 - print out each of those things right so
27:10 - I can go even deeper in my for loop and
27:13 - I can say for step in that print step
27:20 - and so take out the pan turn on the
27:24 - stove you see so we're getting a little
27:27 - ahead of ourselves here but this is
27:29 - really me giving you um you know like
27:32 - foreshadowing for what's to come and how
27:35 - you can use this and maybe giving you
27:36 - some ideas and you can start developing
27:39 - your you know to start development your
27:40 - own apps or or a console cooler idea
27:43 - than just within the constraints of code
27:45 - Kadim e right so this is how you really
27:48 - want to think start putting these things
27:51 - together and you know this is advance
27:55 - two loops loop within a loop so when I
27:57 - got to talk about this now but it's just
27:59 - to give you an idea of the power of
28:00 - programming cool let's get back to this
28:04 - business so here they're telling the key
28:06 - value key value right you already know
28:09 - this stuff easy print the value stored
28:11 - under the sloth and Burmese python keys
28:14 - accessing dictionary values by key is
28:16 - just like accessing list values by index
28:18 - so things what they're effectively
28:20 - saying here is if I hide or comment out
28:24 - all these lines right what they're
28:28 - effectively saying here is that if this
28:31 - was a list you would say recipes and you
28:35 - would say maybe zero and that would give
28:36 - you back grilled salmon or that might
28:40 - give you back you know take out the pan
28:42 - or whatever but in a dictionary you
28:45 - actually put in the key instead of a
28:47 - number okay and that's how you get back
28:57 - the value of that key okay
29:01 - so okay cool so now all you have to do
29:07 - just print out those things so I'm going
29:08 - to say print residence
29:11 - um sloth print residence right
29:17 - dictionary and then keeper nice Python
29:24 - keys or keys and these are values keys
29:29 - value key and then value that
29:33 - terminology is very important to know
29:34 - okay please avoid yourself if you ever
29:37 - catch yourself saying oh yeah it's just
29:39 - those squiggly things and then it's
29:41 - something with the colon thingy and then
29:43 - there's a thing need to the left of the
29:45 - colon thingy don't do that cuz yeah you
29:49 - might understand it but if you're trying
29:51 - to look it up or trying to explain it to
29:52 - somebody else
29:53 - or you're trying to like learn it later
29:55 - and you want to research it you're not
29:57 - going to be able to find it
29:58 - so really understand the terminology
29:59 - it's so important it's so important so
30:03 - remember this is a dictionary anything
30:06 - that has those squiggly things around it
30:09 - the first thing is a key and then the
30:13 - second thing after the colon is a value
30:16 - what now not everything that starts with
30:19 - a squiggly is a dictionary there are
30:21 - certain things called sets but we'll get
30:22 - to that later for now anything with
30:25 - squigglies and colons that's a
30:27 - dictionary all right let's keep moving
30:29 - on okay so you see residents of sloth
30:35 - you get back hundred and five residents
30:37 - of Burmese python you get one hundred
30:39 - and six
30:42 - new entries so they want us to make a
30:46 - new entry in our dictionary so let's say
30:50 - that we go back to like our phone number
30:54 - example well what if we want to add
30:56 - somebody in so again we come to your
31:00 - phone right and you just made a new
31:03 - friend
31:04 - hooray now you want to get their phone
31:06 - number and put it in your phone how do
31:08 - you do that well you know that's pretty
31:11 - simple go to contacts put it in but in
31:14 - the backend in the programming way
31:15 - what's happening is you're actually
31:17 - inserting something into the dictionary
31:19 - so later it can be looked up very easily
31:22 - so what we do let's say we made a new
31:27 - friend named not very creative names mi
31:34 - Johnny okay and now we want to put
31:38 - Johnny into our phone book so we'll say
31:40 - phone book Johnny and we're going to set
31:46 - this equal to the value 4 5 3 area codes
31:54 - 4 5 3 I don't know where that is in the
31:56 - planet okay so that's what it is and now
32:04 - if we print out the phone book you will
32:07 - see that you'll find John in there so
32:10 - the first thing we did is we got Bob's
32:11 - number right that we already know that
32:13 - now we added in Johnny right here and
32:17 - you can see this dictionary now we have
32:19 - Johnny so as soon as you add that
32:23 - contact information in your adding
32:25 - Johnny in there ok that's your key and
32:27 - you add Johnny in there now when you
32:30 - want to look up Johnny's value which is
32:33 - the phone number so when you want to
32:34 - look up Johnny's phone number you
32:36 - effectively do that's all you have to do
32:41 - okay
32:43 - and that looks up Johnny's phone number
32:46 - and you got it right there 4 5 3 2 3 4 2
32:49 - 3 4 5 ok so this is all
32:54 - related stuff right it's all related add
32:58 - at least three more key value pairs to
33:02 - the menu variable so we're going to add
33:05 - three more key value pairs cool
33:09 - so menu cool this is kind of like our
33:12 - example that we were doing with a
33:13 - restaurant right let's add grilled
33:15 - salmon I like grilled salmon is equal to
33:22 - and we have to put a price okay so here
33:26 - the key is grilled salmon and its value
33:29 - is the price so we're going to say it's
33:31 - 25 bucks let's add I don't know skirt
33:38 - steak and make that value 50 bucks
33:42 - my friend just told me today that
33:44 - there's a great skirt steak place that
33:46 - he wanted to go with me and it's 50
33:50 - bucks there so it's a little expensive
33:52 - and we're gonna say soup right and soup
33:59 - is probably not that expensive so you
34:01 - can say 925 and let's do black bean soup
34:07 - cuz that's protein
34:12 - and that should be good right so we got
34:15 - skirt steak we got chicken alfredo which
34:17 - is what they put in earlier you can see
34:21 - them using the trick with the dictionary
34:24 - and it's key to get back the value 14.5
34:28 - then they did there are four items on
34:30 - the menu so how they did that is that
34:33 - that there are then they did shrink
34:36 - concatenation with the plus sign and
34:38 - they got the length of the menu so you
34:41 - can call the Len function on a
34:42 - dictionary that gave them back a four
34:45 - because they added the first item right
34:47 - here chicken alfredo then we added three
34:49 - more items on line six seven and eight
34:51 - so we have had four items in the
34:54 - dictionary so calling Len on this
34:58 - dictionary called the menu translated
35:01 - this into a four but four is an integer
35:03 - so you can't concatenate that with a
35:05 - string so you have to call the string
35:07 - function on that which effectively
35:09 - turned it into a four like that okay and
35:14 - then this string got put together and it
35:17 - says there are four items on the menu
35:19 - and then it said print menu so that's
35:22 - just simple said print the dictionary
35:24 - we got skirt steak 50 bucks chicken
35:26 - alfredo 14.5 black bean soup grilled
35:29 - salmon and we are done
35:32 - okay let's see how far we are new
35:34 - entries this video is getting a little
35:37 - longer so I'm going to end it right here
35:39 - great job you guys for making it this
35:42 - far I will see you in the next video
35:45 - all right take care bye