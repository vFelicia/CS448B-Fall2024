00:00 - you'll build a unesco blockchain web 3.0
00:03 - app with next.js you'll style it using
00:05 - tailwind css in this app i'll also show
00:08 - you how to create your own smart
00:10 - contracts using solidity with the smart
00:12 - contract that you will create you will
00:14 - send your own token to any wallet that
00:17 - you want we'll add authentication to the
00:19 - app using metamask and we will use
00:21 - sanity ios or database to store all the
00:24 - users and all of their transactions
00:26 - you'll be able to view and confirm all
00:28 - of these transactions over on etherscan
00:31 - to confirm that they are 100
00:33 - real you'll also learn how to use grok
00:35 - and sanity's api to actually retrieve
00:38 - your data we'll be using the rankib test
00:40 - network which is built on the ethereum
00:42 - blockchain will then deploy this app
00:45 - using versailles and host your uniswap
00:47 - web 3.0 blockchain app on the internet
00:50 - by the way i just adopted two new kit
00:52 - and if you smash the like button and
00:54 - turn it blue i'll show them to you i'm
00:56 - waiting
00:57 - i'm waiting
00:58 - ah now that you smash the like button
01:00 - and turn it blue here are my beautiful
01:01 - kittens with that said let's just go
01:03 - right ahead and demo this app
01:13 - all right so i just got to this app you
01:15 - can see that i'm on the deployed link
01:18 - this is not the actual unit swap app
01:20 - right this is ours now i'm going to hit
01:22 - connect wallet over here now that i'm
01:24 - here i can choose whichever wallet i
01:25 - want so i'm going to connect with this
01:27 - wallet right now here i'm going to hit
01:29 - next i'm going to hit connect so now my
01:31 - app is connected to that wallet and you
01:33 - can see it's actually telling me it that
01:36 - right over there at the top okay boom
01:38 - right there now at the bottom you can
01:40 - actually see it's showing me my history
01:42 - of transactions that i've done so it's
01:44 - like hey you did a transaction at 1 56
01:46 - p.m and another one at 1 36 p.m i can go
01:49 - and verify these two but let's just go
01:50 - ahead here and now send i'm going to
01:52 - send about 0.1 eth and i'll send it to
01:54 - my other wallet i'll go and grab the url
01:57 - or the
01:58 - code the address for that wallet paste
02:00 - it here and i'll say confirm boom look
02:02 - at that the metamask pops up asks for a
02:05 - confirmation let's hit confirm it opens
02:07 - up again just to confirm the gas fee
02:09 - let's hit confirm we now have a modal
02:11 - that shows us visually that we're
02:13 - waiting for this progress to be
02:14 - completed and i'll show you how to do
02:16 - all of this right how to put the model
02:18 - how to add a loader in this app as well
02:20 - and then as soon as that transaction
02:20 - transaction's done what you're gonna see
02:22 - is at the bottom it'll actually pop up
02:25 - boom look at that as soon as it got done
02:27 - over here we see 2 28 p.m the
02:29 - transaction got done and now that it got
02:31 - done i can also confirm with my own
02:34 - database that i got done so for example
02:35 - let's look at this address here 0x8 if i
02:38 - go to my database here you can see that
02:40 - a new user was created inside of my
02:42 - database and i clicked that user here is
02:44 - the wallet address of that user and it
02:46 - can show me that it that user has three
02:48 - transactions if i go back boom i can see
02:50 - those three three transactions right
02:52 - there and if i click into these
02:53 - transactions you can see that it's
02:54 - saying there was a transaction made at
02:56 - 14 28 which is essentially 2 28 pm
02:59 - currently my time is 2 29 pm and it was
03:02 - for 0.01
03:04 - so our app is up and running showing the
03:07 - history of the transactions i can send
03:09 - money around it looks exactly like the
03:11 - unit swap app but that said if you're
03:13 - excited i'm excited let's just jump and
03:15 - start coding this thing up now one last
03:17 - thing i do want to say which is super
03:19 - cool is i'm doing a crypto giveaway so
03:22 - i'm gonna be giving away a hundred
03:24 - dollars worth of ethereum to one of you
03:26 - but here's what you have to do if you
03:28 - want to actually participate in that so
03:29 - first of all i want you to commit that
03:31 - you're going to be building this app if
03:33 - you commit you're way more likely to
03:34 - actually get done and actually do it
03:37 - instead of most of the people who just
03:38 - say they're going to build the app never
03:40 - really do it if you want to come in is
03:41 - what i need you to do go to twitter
03:43 - screenshot this current page right now
03:45 - okay with my face and the app and the
03:47 - code right there go to twitter and i
03:49 - want you to write down that you are
03:51 - committing so literally say i'm
03:53 - committing to building the uniswap clone
03:55 - with clever causey okay i want you to
03:57 - say that tag me in it so do at clever
04:00 - quasi and i want you to tag our sponsor
04:02 - at sanity and tag uh next js or
04:05 - versailles because that's where we're
04:06 - going to be deploying it to so make sure
04:08 - that you tag all of those and then just
04:10 - put your wallet address underneath there
04:12 - so for those of you who do that you're
04:14 - not only showing that you're committing
04:15 - not only like more likely to succeed and
04:18 - build this app out but three uh one of
04:20 - you is gonna get a hundred dollars uh
04:22 - worth of ethereum sent to you to that
04:25 - address so let's freaking do it guys
04:26 - it's going to be awesome i'm super
04:27 - excited and with that said no more
04:29 - talking let's just start coding all
04:31 - right so the first thing we're going to
04:32 - do is i'm just going to go into my
04:33 - github folder and i'm going to create a
04:35 - new folder for this so let's just call
04:37 - it
04:38 - uniswap clone
04:40 - i'm going to go inside of my unit swap
04:42 - clone and now i'm just going to say yarn
04:45 - create
04:47 - create
04:49 - next app
04:50 - and i'm going to do with
04:53 - tailwind css
04:55 - i want to essentially create a folder
04:57 - for this
04:58 - so we're just going to call it our
05:01 - client
05:02 - so the architecture that i'm using and a
05:05 - huge shout out to javascript mastery and
05:08 - in the video where he goes that goes
05:10 - ahead and creates his project called
05:12 - crypt that was really awesome so
05:16 - in terms of the solidity contract a lot
05:19 - of that is inspired by
05:21 - javascript mastery so again huge shout
05:23 - out we'll link his github repo and also
05:26 - his youtube channel you can check it out
05:28 - he makes great content on there and so
05:30 - the folder structure i'm using is also
05:32 - similar to javascript mastery because it
05:34 - just makes so much sense
05:36 - so again now we have this installed
05:39 - now let's go ahead inside of this so
05:42 - let's actually look so we're going to
05:44 - have one folder
05:46 - for our client we're going to have
05:48 - another one
05:49 - and this is going to be our studio
05:51 - folder so i'm just going to go ahead and
05:53 - make that now we're going to need that
05:55 - for later and then we're going to need
05:56 - one for our smart contract all right so
05:59 - let's go ahead ls
06:01 - and i have these three folders
06:03 - and the folder that we're going to open
06:05 - up inside of our visual studio code will
06:08 - be this one right here the unit swap
06:10 - clone so let's go ahead and do code
06:13 - period so i open this up in my visual
06:15 - studio code
06:17 - and once this opens up i'll bring that
06:20 - over
06:21 - so let's go right there cool as you can
06:24 - see i have three folders right here
06:26 - right our next.js app is going to go in
06:29 - there the smart contract will hold
06:31 - everything about solidity and then our
06:33 - studio will be everything about sanity
06:36 - so let's go inside of our client and i'm
06:39 - going to go inside of pages and here's
06:41 - our index file and let's just basically
06:44 - open this up let's cd into our client
06:46 - here and then we're going to say yarndev
06:49 - so this will open up on localhost 3000
06:52 - right there and there we go you can see
06:54 - that it's now open on our localhost and
06:57 - we can see it all right so now that we
06:58 - have this app up and running on our
07:01 - local host the next thing i want you to
07:03 - do is these folders right so if you
07:05 - haven't created these folders from the
07:06 - command line go ahead and create them
07:08 - now okay this is where your app is going
07:10 - to go this is where your database stuff
07:12 - is going to go and this is where the
07:13 - rest of it is going to go so now what i
07:15 - want to do is i want to go inside of my
07:16 - studio and i want to actually install my
07:19 - sanity client now this is a very
07:22 - important part so what we're going to do
07:24 - if you don't have sanity installed what
07:25 - you're going to do is you're going to do
07:27 - npm install sanity cli just like this so
07:30 - you're gonna make sure you hit that and
07:32 - run it now i already have standard
07:34 - install so i don't need to hit enter but
07:35 - you might need to hit enter so go ahead
07:37 - and install that now here's the next
07:39 - really important command you're gonna
07:40 - need to write so you're gonna need to do
07:42 - sanity init dash dash
07:44 - coupon clever programmer this is very
07:47 - important that you actually do that
07:48 - because it's going to set you up with
07:50 - sandy's best setup that's completely
07:53 - free so make sure you hit enter on this
07:55 - and install it so it should say
07:57 - something along the lines of coupon
07:59 - clever programmer validated and that
08:01 - means you're good to go now notice that
08:02 - for me here it says you looks like you
08:06 - already have a sanity account suite so
08:08 - you might not have a sanity account so
08:11 - make sure that you go ahead and create a
08:13 - sanity account there will be a link in
08:15 - the description below of this youtube
08:17 - video the link you the sanity url simply
08:20 - go ahead to this link over here and
08:22 - click it and once you're on here look
08:24 - it'll show you that this plan includes
08:26 - 200 000 api requests 1 million api cdn
08:29 - requests and 20 gigabytes of bandwidth
08:32 - and all of this is actually free so this
08:35 - is especially for you if you're a clever
08:37 - programmer subscriber these are the
08:39 - commands that you're going to need to do
08:40 - to install the things that we've just
08:42 - shown you and then hit get started and
08:45 - basically just create an account again
08:47 - all of that is going to be completely
08:48 - free oh and one other really important
08:50 - part of the tutorial you see that button
08:52 - right there yeah just go ahead and turn
08:54 - that white and now your app will work
08:57 - perfectly all right now let's do our
09:00 - entire sanity setup so it's asking what
09:02 - do you want to name this project we're
09:04 - going to say uniswap blockchain app so
09:06 - let's just hit enter and let's see what
09:08 - happens use the default data set
09:10 - configuration yes and now it's creating
09:13 - a data set for you and for the output
09:15 - path yes this is the path that we want
09:18 - it to be in so i'm already in my studio
09:20 - folder so make sure you're in your
09:21 - studio folder here and this is the path
09:24 - that it should be showing you let's hit
09:26 - enter and then for the schema we're
09:27 - actually going to choose the clean
09:29 - project with no predefined schemas let's
09:32 - hit enter on this and then it should
09:34 - basically tell you that it's actually
09:36 - resolving all of this and then once this
09:38 - is installed then all we have to do is
09:41 - just set up our schemas and then we will
09:43 - be done with our sanity setup of this
09:46 - app and then we're ready to kind of get
09:48 - started coding and building this thing
09:50 - up all right so you should see success
09:52 - now what and that means you are good to
09:54 - go so once i click inside of my studio
09:58 - here i'll be able to see you should see
10:00 - all of these files in there that's what
10:02 - we just installed the things that we're
10:04 - going to need to update here are our
10:06 - schemas and these schemas are going to
10:09 - keep track of the user transactions and
10:12 - as well as the user schema here is what
10:15 - this basically means inside of our this
10:17 - is my deployed app so if you look in
10:19 - here i have transactions that's just a
10:21 - history of every single transaction that
10:24 - ever took place i also have my users
10:27 - table over here and this has all of my
10:29 - users now all of these all of these
10:32 - transactions here are associated with
10:35 - with users like so and so for example
10:37 - you can see that this user has three
10:40 - transactions right so this is connected
10:42 - to that table so to sh basically have a
10:45 - schema like that this that's
10:47 - interrelated we're going to need to
10:49 - create our schemas insanity that
10:51 - represents this structure so we're going
10:53 - to create a new file and it's going to
10:54 - be called transaction
10:56 - schema.js and then we'll create another
10:59 - file and this one is going to be called
11:00 - user
11:02 - schema.js just like that and let's build
11:05 - out what one transaction looks like all
11:07 - right so the first thing i'm going to
11:08 - build is the transaction schema so what
11:11 - does one transaction actually look like
11:13 - so it holds information about your from
11:16 - wallet address which wallet you're
11:18 - sending to the amount that you're
11:20 - sending the time that you've made that
11:23 - transaction happened the transaction
11:25 - hash which is the proof verifiable proof
11:28 - from the blockchain that actually took
11:30 - place and then which user is that
11:33 - particular transaction referencing so
11:35 - let's go ahead and get started on it so
11:37 - let's create our transaction schema
11:40 - we're going to call it transactions the
11:42 - title will be transactions for the
11:43 - capital t that's why you're getting a
11:45 - capital t right there it'll be of type
11:48 - document
11:49 - and then inside of it we'll create
11:50 - fields so fields are everything that's
11:53 - right there inside of these fields we're
11:56 - gonna have name which is gonna be a
11:58 - transaction hash and the title is gonna
12:00 - be transaction hash just like this so
12:02 - that's this field right over here it's
12:04 - of type string let's create another
12:07 - field this one is gonna be our from
12:09 - address and again this is going to be a
12:11 - type string as well so title is going to
12:13 - be from wallet address and the type is
12:16 - string now let's create another field
12:19 - now you're starting to get the idea of
12:20 - how we're creating these fields it's
12:22 - going to be to address but the name of
12:24 - it is going to be two parentheses wallet
12:26 - address just like this type a string
12:28 - let's create another field amount title
12:31 - is amount with a capital a and this one
12:33 - is going to be like a number right it's
12:35 - a type number because this is not
12:36 - necessarily a string and then we'll
12:38 - create timestamp titleist time stamp and
12:41 - type of this is going to be date time
12:43 - because here you have date and here you
12:45 - have time and then the last one is also
12:48 - going to be a string so boom this is all
12:51 - done here and now we're gonna move on to
12:53 - creating our user schema actually all
12:56 - right now the schema we're gonna create
12:59 - is for our users right here so let's go
13:02 - in here and uh this is the schema that
13:04 - we're gonna create so users but what
13:06 - does one user represent and what are all
13:08 - the fields they have so here a user has
13:10 - how many fields one two three so i got
13:14 - three fields right there type string
13:17 - string and then this is actually not
13:19 - type string this is actually a type
13:22 - reference so we need to create this
13:23 - structure here so let's define our user
13:26 - schema name of it is users and we'll
13:28 - title the users and it's a type document
13:30 - because this is an entire document here
13:33 - are the fields that it's going to have
13:35 - the first field is going to be addressed
13:36 - it's going to be titled wallet address
13:38 - of type string then we have our user
13:40 - name it's going to be called username
13:42 - and it's going to be of type string and
13:44 - then lastly we're going to have our
13:45 - transactions
13:47 - title is going to be transactions and
13:49 - the last part is actually the most
13:50 - interesting part because it's a
13:52 - reference you're going to say type of it
13:54 - is array and we're going to say of we're
13:57 - going to create an array and then it's
13:59 - going to be an array of objects okay so
14:02 - array of one object in this case now
14:04 - type of it is gonna be reference and
14:06 - then we're gonna say two what is it
14:08 - related to and it's gonna be related to
14:11 - type transactions doing that just
14:14 - created a relationship
14:16 - between users and transactions and
14:20 - basically it's saying that inside of
14:22 - users this transaction right here
14:25 - is actually part of the
14:27 - transactions table in there so super
14:31 - interesting actually how that works now
14:33 - let's go into our schema and all we need
14:36 - to do is actually connect these
14:38 - two tables that we've created so i'm
14:40 - going to go inside in line 14 i'm going
14:42 - to hit enter and we're going to concat
14:44 - with the following two so we're going to
14:46 - say user schema and transaction
14:50 - schema and make sure that from the top
14:53 - you import both user schema and
14:55 - transaction schema and we're using them
14:57 - right over here simply hit save and now
15:00 - in order to be able to see this you can
15:02 - actually whip up your own sanity studio
15:04 - locally and take a look at this so let's
15:07 - try it let's try doing sanity start
15:10 - inside of my studio folder right here
15:13 - and let's see what happens so what it's
15:15 - going to do is it's going to compile
15:17 - these files that it's seeing here
15:20 - and and build out the schema
15:22 - and once it builds out the schema
15:25 - it's gonna let you go to a local host
15:27 - and take a look at it so localhost is
15:29 - http localhost colon3333
15:33 - let's go to it and i'm gonna sign in
15:35 - with my github you can sign in with
15:37 - whatever you want you could sign in with
15:38 - your google account as well that's
15:40 - totally fine and i have my schema
15:43 - actually so i can see users right there
15:45 - and i can see transactions right here
15:47 - let's go inside and nothing is there yet
15:51 - let's go in transactions nothing is
15:52 - there yet however if i go into
15:54 - transactions right let's go inside of my
15:56 - transactions and hit edit
15:58 - watch this i have all of these fields
16:01 - right here so my database part is very
16:04 - very quickly actually done thanks to
16:07 - sanity if i go to this here and let's
16:09 - say i change this transaction hash to
16:11 - transaction potatoes and let's put an
16:14 - emoji of a potato i actually don't know
16:16 - if emojis will work or not but here you
16:18 - go you have transaction potatoes so you
16:22 - can see
16:23 - that it's super simple how it works and
16:26 - if i go into my users and i hit
16:30 - click here right on the one on one of
16:31 - these documents and hit edit you can see
16:33 - i have my wallet address my username and
16:36 - interestingly enough right for
16:37 - transactions
16:39 - type of transactions boom and now i can
16:41 - just hit item and then reference a
16:43 - particular transaction item here so and
16:46 - then vice versa if i go to my
16:48 - transactions and click here
16:50 - by the way
16:51 - this field here is not necessary even in
16:54 - my deployed version so i'm just going to
16:56 - go ahead and remove this from my actual
16:58 - deployed version and in the version that
17:00 - we're building
17:01 - on our localhost 3333 yeah you shouldn't
17:04 - even have the user reference so you
17:05 - should be good to go and there i just
17:07 - removed it from my deployed version too
17:09 - so it shouldn't be there anymore all
17:10 - right so now
17:12 - let's go ahead and start working on the
17:14 - front end of our app temporarily we're
17:16 - done with our studio insanity stuff
17:19 - let's go to our client
17:21 - and i'm going to go inside of pages
17:23 - we'll click index dot tsx and don't let
17:26 - this phrase tsx freak you out it is just
17:30 - javascript types
17:32 - it's typescript but with typescript
17:34 - includes javascript inside of it so even
17:37 - if you literally just wrote regular
17:38 - javascript it'll run like like a regular
17:41 - javascript file you'll be fine and if
17:43 - you want to literally change that to a
17:45 - dot js you can but as we go on i might
17:48 - show you some typescript as well so you
17:50 - can leave it like this that's fine all
17:51 - right so what i'm going to do now is
17:53 - we're going to basically remove
17:55 - everything
17:56 - inside of this div so you should just
17:58 - have this div let's go to our local host
18:00 - so it should look your app should be
18:02 - looking like this right now right with
18:03 - nothing there just empty and then what
18:06 - we're going to do is so we're going to
18:08 - add some styling here and for this
18:10 - styling i'm going to create a wrapper
18:12 - and inside of this wrapper we're going
18:14 - to give it a screen height a max height
18:17 - a min height and then a wide screen
18:20 - or you know a horizontal width right
18:23 - width and height so that will give it a
18:26 - background color which is kind of like
18:28 - this dark color that unit swap will have
18:30 - we'll make the text white we'll make the
18:32 - select none and we'll make it flex box
18:35 - enabled make the flexbox go in a column
18:37 - so flex column and then justify in
18:40 - between so that's what my wrapper is now
18:43 - i'm going to replace
18:44 - all of this here but the following now i
18:47 - can simply just do class name equals
18:50 - style style dot wrapper okay so i'm
18:53 - pulling it from here this is something
18:55 - i've i've been recently
18:57 - liking doing styling like this it kind
19:00 - of reminds me of react native but then
19:02 - combining tailwind with it so it's kind
19:04 - of a really nice touch and i have kind
19:08 - of stopped using styled components i
19:09 - don't like them i for a couple of
19:11 - reasons and i'll if you want i'll make a
19:13 - video on it at some point but yeah there
19:14 - you go so i think this should be good
19:16 - for now so inside of here let's go ahead
19:18 - and make a h2 and say hello and let's do
19:21 - one that says buy all right
19:24 - and check it out and boom there you go
19:26 - right you can see that my hello is
19:27 - showing up here and my buy is showing up
19:30 - right there if i added a third thing
19:32 - that would show up right in the middle
19:34 - so this is kind of how i want it because
19:36 - if i look at my uniswap app you know it
19:39 - has like nice distancing from everything
19:41 - so that's how i want this app to be so
19:45 - this first h2 this is gonna be like my
19:47 - header all right in here i'm gonna have
19:49 - my main and then in here i'm going to
19:51 - have my transaction history so we'll
19:54 - work on these components the first
19:56 - component we're going to work on is
19:57 - going to be our header component so
19:59 - let's get to work on that so inside of
20:00 - my client i'm going to create a new
20:02 - folder we're going to call it components
20:05 - just like this and then inside of my
20:07 - components i will go ahead and create a
20:09 - new file it'll be called header
20:11 - header.js
20:13 - alright so let's work on the header now
20:15 - so i'll do r a f c e hit tab it'll auto
20:18 - complete and give me this stuff this is
20:20 - helpful
20:22 - all right now before we continue we're
20:23 - gonna need a couple of logos so for
20:26 - example we're gonna need this logo and
20:29 - this uniswap logo right over here i'm
20:32 - going to create a assets folder
20:34 - at the client level
20:36 - so i'm just going to say assets
20:38 - and inside of my assets i'm just going
20:39 - to put three things in there so those
20:42 - three things are going to be these
20:44 - my eth png my eighth currency and then
20:47 - my unit swap we will link you guys all
20:50 - of these in the description below you
20:52 - should be able to go and get them let's
20:54 - go ahead and just get this to show up so
20:55 - i'm gonna say yo i'm gonna say header
20:59 - let's go to our
21:01 - index
21:02 - and replace this here
21:05 - with our component header let's go back
21:07 - to our app here export default that's
21:10 - perfect i just had to replace this index
21:13 - tsx with js so it could like read these
21:16 - other files and now when i do r
21:18 - it gives me the ability to auto import
21:22 - and there we go i did header
21:24 - header at the top and boom let's go back
21:27 - inside of our header and i will say
21:29 - header
21:31 - all caps
21:32 - and it did indeed change so this
21:35 - component is now showing up perfect all
21:37 - right and now while we're at it let's go
21:39 - ahead and let's also install react icons
21:42 - i'm going to say yarn add react dash
21:45 - icons like this because we're going to
21:47 - need these
21:48 - whoops we actually installed them in the
21:50 - wrong folder so let's get outside of
21:52 - studio let's go inside of our client
21:56 - and this is where we need to install it
21:58 - so let's go yarn add react dash icons
22:01 - just like that hit enter and let the
22:03 - installation finish all right so we're
22:05 - gonna build this header component from
22:07 - scratch just so you can see how it gets
22:09 - built out okay at the top we're going to
22:11 - import react use date and use effect
22:14 - because you're going to need access to
22:16 - these you're going to need access to
22:17 - image
22:18 - let's get all of our icons we will get
22:21 - all of our assets from the assets folder
22:23 - like the eth logo and the uniswap logo
22:25 - because you're going to need that and
22:26 - then i'm going to create this style
22:28 - component i'll keep it empty for now
22:30 - we'll do our styling at the end so you
22:31 - can see what all of the styling does and
22:34 - we're going to need to keep track of one
22:36 - of the states so for example
22:38 - when i go here this is my built app
22:40 - right so when i click pool or vote you
22:42 - see how it changes with vote and pool
22:44 - and swap so we're gonna need to keep
22:46 - track of that state so let's go ahead
22:48 - and keep track of it so we're gonna say
22:50 - selected nav and then we're gonna say
22:52 - set selected nav and in the start is
22:55 - just gonna be the swap it's gonna just
22:57 - be this guy right over here okay that's
22:59 - gonna be the default all right and then
23:01 - we're gonna return
23:02 - so this is what we'll do so right now
23:05 - this is all you should be seeing on your
23:07 - app your app should be kind of working
23:09 - and all these wrappers and everything
23:11 - here we're going to style that in a
23:12 - second so i'm going to create a div
23:13 - inside of that i'm going to have my
23:15 - header logo and i'm going to put my logo
23:17 - in there so now you should be seeing
23:19 - this logo right there all right height
23:21 - of 40 with the 40. then we're gonna have
23:23 - our nav and then inside of that we're
23:25 - gonna have nav items container all right
23:27 - we're gonna have another div and we're
23:29 - gonna have just we're gonna put swap
23:31 - there so
23:33 - this is now we're creating the container
23:35 - for this and then on click it'll allow
23:37 - you to change which one you're selecting
23:40 - so that's what that's doing and here's
23:43 - how we're going to be doing it so our
23:44 - class name is going to be a template
23:46 - literal and it's going to be style nav
23:48 - item and then this class name that it
23:51 - chooses here
23:52 - is gonna be based on which one we've
23:54 - selected all right then we're gonna have
23:57 - pool so what happens if you click on for
24:00 - example pool or vote so that's what
24:03 - we're doing here so now i'm gonna have
24:05 - one for pool and we're gonna have
24:07 - similar logic in there and then we're
24:09 - gonna have one for vote with similar
24:11 - logic in there and then we're gonna have
24:13 - one for the final one which is this
24:18 - charts and it's a tag because when i
24:20 - click charts it actually pops open a new
24:23 - page and takes me to
24:25 - this right over here so let's go back
24:28 - and for this
24:29 - we're gonna have a nav item and it's
24:31 - going to have an arrow pointing up so
24:33 - it's going to be this guy right there
24:35 - and it's just going to say the word
24:36 - charts now if i click it it's a link see
24:39 - already taking me somewhere else now
24:41 - we're going to have a buttons container
24:42 - and this buttons container is going to
24:44 - be for all of these guys right there all
24:46 - right so in here i'm going to have a
24:48 - button with the button padding and then
24:50 - we're going to have a button icon
24:52 - container so it's going to we're going
24:53 - to put the icon in there so here we're
24:55 - going to have the eth logo inside of
24:57 - this so for example it's going to be
24:58 - this guy right there and then it's going
25:00 - to say ethereum inside of that button
25:02 - then we're going to have another button
25:04 - and it's going to have this
25:05 - pointing down arrow so if i go here
25:08 - see this pointing down error right there
25:10 - so i have this one big button eth logo
25:12 - goes in there that arrow goes in there
25:15 - and then i'm going to need another
25:16 - button this one right here and then
25:18 - another button to put the three dots in
25:20 - there so i'm going to need my connect
25:21 - wallet button so for example when i go
25:24 - here and if let's say i'm not connected
25:26 - right so let's log out here let's go to
25:28 - the one that's connected and then i'm
25:30 - going to go to connected sites and
25:32 - disconnect here so now when i refresh
25:34 - watch what happens boom it says connect
25:36 - wallet so by default that connect wallet
25:38 - should be there so on click it should
25:40 - run a connect wallet function which we
25:42 - have not created yet but we will it's
25:46 - going to have the connect wallet styling
25:48 - and we're going to give it this accent
25:50 - okay so it's going to have that like a
25:51 - little blue accent and it's going to say
25:53 - connect wallet so right now when i ran
25:55 - it of course it doesn't work it breaks
25:57 - for now we're gonna need another button
25:58 - and this is gonna be the three dots just
26:00 - like we had talked about right i got my
26:02 - three dots right there since in terms of
26:05 - the buttons
26:06 - now we're good with the buttons all
26:08 - right so now let's go ahead and let's
26:10 - get to styling this thing all right so
26:12 - let's do this let's add some styling now
26:15 - so let's add a wrapper around all of
26:17 - this and we'll give it padding in every
26:19 - direction we'll make the screen wide
26:22 - we'll make it flexbox enabled so it's in
26:25 - a row instead of like columns because
26:27 - that's what we want here let's justify
26:30 - in between so now we have spacing going
26:32 - around which is super nice we will and
26:34 - then make them a center aligned so then
26:37 - everything is nice and center aligned so
26:40 - our wrapper is great now let's just fix
26:43 - our logo here a little bit so basically
26:45 - we're pushing everything away from the
26:47 - logo let's go ahead and start working on
26:49 - our nav now so we'll make it flex one so
26:51 - it takes up all of this space here we'll
26:54 - make it flex box so it's going in a row
26:57 - and then we'll justify and center align
27:00 - everything okay let's put a container
27:03 - around our nav items so here now swap
27:06 - pool vote charts has a nice container
27:08 - and then between each of these items
27:11 - we're going to go ahead and put distance
27:14 - in between each now if you're wondering
27:16 - where all the rounded 3xls are coming
27:18 - from or like this rounded thing right
27:20 - here right this is where it's coming
27:22 - from now we're going to need to make
27:23 - sure that each of them has a active
27:26 - color so what i'm going to do is we're
27:28 - going to add in an active nav item so
27:31 - now take a look swap has that active
27:33 - color and in tailwind if you want to
27:35 - give a specific color this is how you
27:37 - can do it we're going to put a buttons
27:38 - container around it we're going to put
27:40 - all the buttons in a container so these
27:42 - guys right here all right and then we're
27:44 - going to style our buttons to be a
27:46 - specific way so now they're looking much
27:48 - nicer let's give buttons some padding
27:51 - let's add in a text container for these
27:54 - buttons all right and then let's add in
27:56 - a button icon container so now the
27:58 - buttons look even better and now they
28:00 - have icons inside
28:02 - and last but not least let's add an
28:04 - accent so our connect wallet is looking
28:06 - good so if you want to see all my
28:07 - styling here you go i'll zoom out as
28:10 - well so you can see it all on the same
28:13 - screen if you want to pause it and you
28:15 - want to copy it go ahead you can do that
28:18 - not a problem but that's all the styling
28:20 - for this page all in one place that's
28:23 - why i kind of like this tailwind and
28:24 - then tail and css and then just using
28:26 - style like this and then the rest of it
28:29 - you should have it just like this with
28:30 - that said we are currently done with the
28:32 - header let's move on to our main section
28:35 - and work on adding this form right here
28:39 - that we have in the middle let's go all
28:41 - right now let's go ahead and work on
28:43 - main which is going to be right there
28:45 - the form looking thing cool so inside of
28:47 - my components i'm going to create a new
28:49 - file it's going to be called main.js
28:51 - now before i start writing too much in
28:53 - here let's go back to our header or
28:56 - sorry actually let's go back to our
28:58 - index all right and in our index i'm
29:00 - going to replace this here with main and
29:04 - let's go ahead and import main so i'm
29:06 - going to say main from main just like
29:09 - that so now it's going to error out but
29:10 - that is that is totally all right so
29:13 - let's get to work on making our main
29:15 - page so let's get our image from next
29:18 - let's get a couple of icons that we're
29:20 - going to need let's get our eth logo i'm
29:23 - going to get all of our styling in here
29:25 - so i will zoom out so if you want to
29:28 - screenshot this you can
29:30 - goes on forever kind of but again i
29:32 - don't want to spend too much time on the
29:34 - styling guys because
29:36 - then we're never going to get to the
29:37 - solidity parts and we're never gonna get
29:39 - to building this app out let's uh export
29:42 - our main function and let's create our
29:45 - main function okay and then inside of
29:47 - here we're gonna create a wrapper let's
29:49 - go like this so we can see it and then
29:52 - inside of that wrapper i'm going to have
29:53 - my content this is where all of my
29:55 - content will go so you can already start
29:57 - to see this form right there inside of
29:59 - that i'm going to have my form header
30:01 - we're going to write the word swap in
30:02 - there just like this and then we're
30:04 - going to have another div inside of it
30:06 - that's going to basically contain this
30:08 - cog wheel right here then we need our
30:11 - prop container so let's put our input in
30:13 - there
30:14 - so boom our input looks real nice here
30:17 - if you're wondering what this pattern is
30:19 - if you go on w3schools the pattern
30:22 - attribute specifies a regular expression
30:24 - that the input element's value is
30:26 - checked against on form submission all
30:29 - right so cool little hack that you can
30:31 - do
30:31 - to before the form submits it just
30:34 - checks if this pattern matches aka if
30:36 - this in here is actually in number and
30:39 - this handle change function don't worry
30:41 - we will work on that next let's just
30:43 - keep building this out for now all right
30:45 - then i'm going to need my currency
30:47 - selector div inside of it it's going to
30:49 - have currency selector content and
30:51 - currency selector icon and boom there we
30:54 - go so that's what that looks like
30:57 - all right and inside of that i'm going
30:59 - to have my currency selector ticker so i
31:01 - have my eth right there and then we're
31:03 - going to put a drop down arrow next to
31:05 - it to show that you could click it and
31:07 - kind of
31:08 - draw do go through a drop down all right
31:11 - so let's keep going on this i'm going to
31:13 - need another container inside of it i'm
31:15 - going to put another input just like
31:17 - this one and you can see my placeholder
31:19 - is basically telling you that it expects
31:22 - some type of address
31:24 - right
31:25 - and then we're gonna do add a button
31:28 - that's gonna say confirm and then the
31:31 - styling is coming from our confirm
31:33 - button so when you hit confirm on this
31:36 - we're going to handle submit so these
31:37 - handle change and handle submit
31:39 - functions we're going to work on and
31:41 - make sure we have them completed so
31:42 - instead of in in terms of making our
31:45 - main here we're done so now we have our
31:48 - header completed and we have our main
31:50 - completed next thing we're going to do
31:53 - is now we're going to try to make our
31:54 - wallet work so let's go ahead and do
31:57 - that shortly all right so now to make
31:59 - the wallet work we have to start doing
32:01 - some big boy and big girl javascript
32:04 - stuff so let's get into that what we're
32:06 - going to do is at the global level the
32:09 - client level we're going to create a new
32:10 - folder and it's going to be called
32:12 - context because we're going to use the
32:13 - context library to essentially lift the
32:16 - state up because in react right you have
32:18 - all these components so let's say you
32:19 - have your main.js here you have your
32:22 - like header right there and then you
32:23 - have the your actual app right here you
32:26 - know if you put your component inside of
32:27 - your main.js right there well your app
32:30 - does not have access to it and neither
32:32 - does this guy doesn't have access to it
32:34 - either so you can only pass this
32:35 - component down but you can't pass it
32:37 - this way and you can't pass it up so
32:38 - that's a problem so normally what you
32:40 - have to do is go okay we're going to put
32:42 - all of our state in our index or app
32:44 - folder like our main folder and then
32:46 - everything will have access to it but
32:47 - that's kind of like clunky and weird and
32:50 - you got to put all the state in this one
32:51 - file and that one file becomes massive
32:53 - and still not the right way to do it
32:55 - because then you got a prop drill so if
32:57 - there's like multiple components here
32:58 - you got to keep prop drilling so instead
33:01 - what people use is something called like
33:03 - redux and why they use it is because you
33:05 - essentially get this global container
33:07 - global bucket you keep throwing all the
33:09 - crap in here and then whenever anybody
33:10 - needs the crap they just put their hands
33:12 - in there and pick it up just like that
33:14 - so super easy but instead of using redux
33:16 - because it's weird and complicated we're
33:18 - gonna use the context api make sense all
33:21 - right let's go boom so i created my
33:23 - context folder inside of here we're
33:25 - going to create transaction context
33:28 - again shout out to javascript mastery
33:30 - for
33:31 - this way of using context and then using
33:34 - contracts in there as well so you know a
33:36 - bunch of it was inspired by him he
33:38 - crushed it again so i'm going to give
33:40 - him a shout out let's now start working
33:42 - on this all right so the first thing i'm
33:43 - going to import react and we're going to
33:46 - get use state and use effect because
33:48 - well we'll need access to both of these
33:50 - let's go ahead and export a const which
33:53 - is going to be our transaction context
33:55 - and we're going to do react.create
33:58 - context just like this so this is a
34:01 - thing we're exporting and this is what's
34:03 - actually going to be creating the
34:04 - context that we need essentially
34:06 - creating that little
34:08 - bucket that i was talking about the
34:09 - global level bucket and then the whole
34:11 - app can have access to the state all
34:12 - right so one interesting thing i want to
34:14 - show you here is let's go inspect right
34:16 - because we're going to work on our
34:18 - wallet soon so in here if i hit console
34:20 - now let's go window.ethereum
34:23 - and it's pulling all of this information
34:25 - this it only does that if you have meta
34:27 - mask installed so make sure you have
34:29 - metamask and the chrome extension for it
34:31 - installed so it's already pulling this
34:33 - if i didn't have it it would not work so
34:36 - now i can ask it questions like is that
34:38 - metamask and it can actually tell you if
34:41 - that's true or not so
34:43 - window.ethereum
34:45 - is an interesting one so we're going to
34:47 - use that so what i'm going to do is i'm
34:49 - just going to say i'm going to create
34:50 - this i'm going to say let eth and then
34:52 - what i'm going to say is i'm going to
34:53 - say if type of window
34:56 - is not undefined so this is going to be
34:59 - a not undefined then we're going to just
35:01 - say let eath be window.ethereum so then
35:04 - we're just going to pass around eth and
35:06 - that's going to essentially represent
35:08 - window.e now we're going to create a
35:09 - function that allows you to connect your
35:12 - metamask so let's go ahead and do that
35:14 - so i'm going to go const connect wallet
35:17 - and then i'm going to basically say
35:19 - metamask and by default let's have it be
35:22 - eth and then we're basically going to
35:24 - say try the following if there is no
35:27 - meta mask then return
35:29 - alert please install metamask just like
35:32 - that otherwise we're going to do the
35:34 - following we're going to say await
35:36 - metamask.request and then we're going to
35:39 - pass it in a method and that method is
35:41 - going to be eth underscore request
35:44 - accounts so this is going to do that
35:46 - little pop-up thing that happens when
35:47 - you click connect wallet and this pop-up
35:49 - thing happens this is when you call the
35:52 - method request accounts and then we're
35:54 - basically going to say set
35:57 - current account
35:58 - to be a count of zero now you might be
36:00 - wondering hey where's the set current
36:02 - accounts thing we're doing not a problem
36:04 - you just simply go ahead at the top and
36:06 - we'll create this state so we can keep
36:07 - track of it so at the global level the
36:10 - main component that we want to extract
36:11 - from here is actually our provider
36:13 - that's what we're doing this whole thing
36:15 - for here's what we want to do let's go
36:17 - up at the top and you could even put it
36:19 - all the way at the top or you could put
36:20 - it right here that's totally fine but
36:21 - basically we're going to say const
36:24 - transaction
36:25 - provider and it's going to take in
36:27 - children and then in here i'm basically
36:29 - going to go so current account set
36:31 - current account and in the start we'll
36:33 - just have it be empty just like this
36:35 - nothing and then i'm going to take this
36:37 - set connect wallet function i'm going to
36:38 - put it let's go right there i'm going to
36:41 - put this inside of my transaction
36:43 - provider
36:44 - just like that current account set
36:46 - current account and then what we want to
36:48 - do we want to catch so i'll say catch
36:51 - and pass it the error whatever error
36:54 - that i i get and we'll just
36:57 - log basically say console.error error
37:00 - will log the error and then we'll throw
37:01 - a new exception so we'll say error no
37:04 - ethereum object now here let's go ahead
37:07 - and say export const because we we want
37:10 - to export this so we can actually use it
37:13 - inside of our entire app all right so at
37:15 - the end we want to return our provider
37:17 - so i'm going to say return and we want
37:19 - to actually go transaction contacts dot
37:23 - provider so this is coming from our
37:26 - contacts that we created right up here
37:28 - so transaction contact style provider
37:30 - that's what we're going to return and
37:32 - let's go ahead like this and then in
37:34 - between this we want to say is valid and
37:37 - then we want to say what we want to
37:39 - actually return so we'll return our
37:41 - current account that's fine and then the
37:43 - next thing we'll return is our connect
37:46 - wallet function all right now
37:48 - this let's remove this angle bracket
37:50 - right there and what we'll do is we'll
37:52 - put that here right so just like that
37:55 - all right and in between this we're
37:57 - going to pass in the children just like
37:59 - this so this is what your transaction
38:01 - contacts that provider will look like
38:03 - value
38:04 - children make sure that
38:06 - you close you open and close the angle
38:08 - brackets so at a high level what you've
38:10 - done what this is doing here is it
38:13 - create it's creating that global bucket
38:15 - and throwing current account in there
38:17 - and connect wallet in there so then the
38:19 - rest of our app and any of our
38:21 - components can have access to those
38:23 - those functions or those
38:25 - state variables now what we need to do
38:27 - is let's go to our underscore app file
38:30 - and i'll call this dot js and in here we
38:34 - need to wrap our entire app so i don't
38:36 - need this props here and i don't need to
38:39 - say props right there let's just go like
38:41 - this and i'm gonna say import
38:44 - transaction provider from
38:47 - contact slash transaction context so
38:50 - there we go and now we're going to wrap
38:52 - this thing inside of that so i'm going
38:53 - to go right there and we'll go
38:55 - transaction provider and boom and now
38:59 - there's there's this error that's
39:00 - happening so we're just gonna do this
39:03 - and remove that semicolon boom there we
39:05 - go and so this now becomes the children
39:08 - and all of these children's will get
39:09 - access to the transaction provider the
39:12 - global store
39:14 - that has
39:15 - methods like methods like current
39:17 - account and connect wallet now in order
39:20 - to use this let's go to our header
39:22 - component all right and we're gonna
39:24 - basically bring in our transaction
39:26 - contacts from context transaction
39:29 - context so basically we're bringing this
39:32 - from right there inside of our header
39:35 - component now right over here we're just
39:37 - gonna destructure that from the context
39:40 - that we created so i'm basically going
39:42 - to say const connect wallet and current
39:46 - account and we're going to say use
39:49 - context and we're going to say
39:50 - transaction context now use context is a
39:53 - react hook and we need to actually bring
39:56 - that from react so let's go up top and
39:59 - let's also import use context just like
40:03 - this
40:03 - there we go so now we got access to okay
40:07 - let's go back
40:08 - current account yes and current account
40:11 - yes perfect now just to see we have
40:14 - access to these let's just go ahead and
40:16 - say console log and i'll just say
40:19 - connect wallet and we'll say current
40:22 - account so let's just go ahead and try
40:24 - that let's see what we get
40:26 - all right so now that i'm i'll refresh
40:28 - here on my localhost 3000 and at the
40:31 - bottom what you should see is something
40:33 - called an object or you should see this
40:35 - thing here and look at this right it
40:36 - says current account is undefined and
40:39 - connect wallet is a function and that
40:41 - makes sense because connect wallet
40:43 - indeed is a function that i created so
40:45 - that's perfect and
40:47 - current account that we have right here
40:49 - is undefined so that makes sense so that
40:51 - means all the global stuff that we
40:53 - created we're actually getting access to
40:55 - it so let's just say i wanted to create
40:57 - a random thing right funny message and
41:00 - instead of saying you suck we just
41:02 - created this funny message i could just
41:04 - pass that down right here funny message
41:08 - and then i can like destructure it from
41:10 - here and say funny
41:12 - message and then we can go right there
41:15 - and say funny message and now let's
41:18 - refresh
41:19 - and you can see i'm getting the funny
41:21 - message you suck so whatever is inside
41:23 - of my contacts now is coming into my
41:26 - header and everywhere else that i want
41:28 - to go so you can see how context api is
41:30 - so easy and so much nicer to use
41:33 - honestly than any of that redux garbage
41:35 - so just use context api it's way better
41:37 - for most things so i'm gonna obviously
41:39 - go ahead and undo all these funny
41:41 - messages because you know we don't need
41:42 - that anymore so remove it from this file
41:45 - as well remove funny message boom back
41:48 - to our normal state
41:50 - now that we got access to our connect
41:52 - wallet let's actually see if our connect
41:54 - wallet function works meaning if i go
41:56 - down here i'm already on line 85 i'm
41:59 - already calling my connect wallet
42:01 - function meaning that when i click that
42:02 - button my connect wallet function should
42:05 - work so let's go ahead and see what the
42:08 - heck happens alright so i'm going to go
42:09 - ahead and click connect wallet boom look
42:12 - at that and metamask just popped up you
42:15 - guys beautiful all right and let's go
42:17 - ahead and choose next here and hit
42:19 - connect and boom look at that it says
42:22 - current account and it's pulling the
42:24 - right account it knows when it's
42:26 - connecting it knows exactly how to
42:29 - connect how to pull that data from there
42:31 - that's absolutely perfect right that's
42:33 - exactly where we're looking all right
42:34 - we're going to create another function
42:36 - that's essentially just going to check
42:39 - if an account is connected if a wallet
42:42 - is connected that's all it's going to do
42:43 - cool so let's start building this out
42:45 - now so i'm going to check if wallet is
42:47 - connected it's going to be an async
42:49 - function and it's going to take in a
42:51 - meta mask if it already exists and by
42:53 - default we're going to make it our eth
42:55 - whatever we made our ether at the top
42:56 - and then i'm gonna do a try catch block
42:58 - and i'm gonna say if the metamask
43:00 - doesn't exist just stop and return
43:02 - please install metamask otherwise what i
43:04 - want you to do is go ahead and get the
43:07 - do a metamask request and get the
43:09 - account using the method eth underscore
43:12 - accounts and then just get the account
43:15 - link so if the account length exists
43:17 - then basically set the current account
43:19 - to the initial account that we just got
43:21 - so if we got an array of accounts we
43:23 - just send it to the first account that
43:25 - we got it returns it always as an array
43:27 - cool and then we will catch the error
43:29 - and just show the error and throw a
43:32 - exception if we got an error that's it
43:33 - that's this function check if wallet is
43:35 - connected and how we're going to use it
43:38 - is right at the top we'll write a use
43:40 - effect hook here so the use effect hook
43:42 - will write it right over here right and
43:44 - it will have no dependencies it will
43:47 - basically run every time the app
43:49 - refreshes or it starts and all we're
43:51 - going to do is just run this function
43:53 - check if wallet is connected that's it
43:56 - so this will run every time we refresh
43:58 - so
43:59 - let's go ahead and and also write a
44:02 - console log here and we're just gonna
44:03 - say
44:04 - wallet is already connected all right
44:07 - this is just for
44:08 - fun and we're gonna write that now so
44:10 - let's go ahead and refresh here and you
44:12 - will see it says wallet is already
44:14 - connected all right now
44:17 - and why does it say that well it's
44:18 - because we've connected our wallet right
44:20 - there right so let's go right here and
44:23 - let's check connected sites let's remove
44:25 - this localhost right and refresh refresh
44:28 - boom now we don't get that anymore it
44:30 - doesn't say wallet is already connected
44:32 - anymore so that's gone now and what this
44:35 - will do is also
44:36 - check if meta mask is installed or not
44:38 - so meaning if i ran this somewhere where
44:41 - metamask is not installed so let's go
44:43 - right here see it will say immediately
44:45 - right at the top please install metamask
44:48 - so it will catch that error right away
44:50 - and throw through an error now one thing
44:52 - i want to do is i want to do some
44:53 - conditional rendering over here because
44:55 - i don't want to be connected and for it
44:56 - to still say connect right so for
44:58 - example let's say i go here and i hit
45:00 - connect look it still shows up there so
45:03 - we're going to do some conditional
45:04 - rendering all right so to make this a
45:06 - conditional render i'm basically going
45:07 - to say does the current account exist
45:10 - and if it does the following should
45:12 - happen so basically this
45:14 - or that should happen so in this case
45:17 - over here if the account exists you know
45:20 - show essentially show user name and if
45:23 - it doesn't exist then show the
45:25 - connect button that's effectively what
45:28 - we're doing here so what we need to do
45:30 - is just plug those in so basically what
45:32 - i want to do is wrap this wrap both of
45:35 - these in parens and then what i want to
45:37 - do is
45:39 - this is the code for my connect wallet
45:41 - button right so i want to take that i
45:43 - want to cut that so i'll cut it and i'll
45:45 - go right here put parentheses and paste
45:48 - it boom so i'm done with the use case of
45:51 - if the current account is not showing up
45:54 - but what do i do when the current
45:56 - account is logged in so currently just
45:58 - showing username right if i change this
46:00 - with clever causey it's working and if i
46:02 - log out it'll break out but i still need
46:04 - to add the styling and everything so
46:06 - let's go ahead and do that so let's go
46:08 - ahead and remove clever quasi and we're
46:10 - gonna do the following let's add in a
46:13 - button with a padding and inside of here
46:17 - let's add in a button text container and
46:19 - instead of
46:20 - saying username here i'll simply just
46:23 - say not even that will actually just
46:25 - like make it look like a wallet and
46:27 - let's go here and boom you can actually
46:30 - see it's showing up so now that i'm
46:31 - logged in it shows this and actually if
46:34 - i log out watch what will happen
46:35 - connected sites log out disconnect right
46:38 - and let's refresh and
46:40 - boom look at that so that's exactly the
46:43 - feel that we're after right now let's
46:45 - connect again and boom there we go
46:47 - address so perfect the conditional
46:49 - rendering is working really well all
46:50 - right now that we're done with our
46:52 - functionality of adding in a wallet
46:55 - let's get to work on actually getting
46:57 - our solidity environment set up getting
47:00 - hard hat set up and uh getting our
47:02 - contract deployed so it's gonna be some
47:04 - awesome stuff get pumped and i'll see
47:06 - you in a second all right so now what
47:08 - we're actually to do is we're going to
47:10 - set up hard hat and we're going to
47:12 - basically go ahead and do this here so
47:15 - get out of your client in your smart
47:17 - contract we're going to create a new not
47:19 - not a new file but basically we're going
47:21 - to go inside of your smart contractor so
47:23 - let's back out here let's go cd smart
47:26 - contract just like that and now here
47:28 - we're going to do is we're going to try
47:29 - to use this command that says so on the
47:32 - hardhat.org getting started page right
47:34 - here i see their command npx hard hat so
47:37 - let's see if we can run that and if that
47:40 - works so let's go ahead and try that npx
47:42 - hard hat yes install the packages so it
47:44 - looks like it's installing and it's
47:46 - getting stuff up and running once that's
47:48 - done you're gonna see that in your smart
47:50 - contract folder it's actually going to
47:52 - become pretty awesome so now when you're
47:54 - here go ahead and choose create a basic
47:57 - simple project hit enter for the root
48:00 - this is the root so just hit enter
48:02 - that's all you got to do all right do
48:05 - you want to add a git ignore sure why
48:07 - not hit enter
48:08 - sure hit enter sure hit enter and it
48:11 - will install and add all the
48:13 - dependencies so for example hard hat
48:15 - waffle ethereum waffle chai hard at hard
48:19 - hat ethers all of that so let's go ahead
48:22 - and zoom out now and once this
48:24 - installation is done we can actually get
48:27 - started working on our smart contract so
48:29 - you can see that now my folder has my
48:31 - smart contract is starting to have a
48:33 - bunch of things installed here right
48:35 - that's what we're installing right now
48:37 - now that we're done beautiful inside
48:39 - here of our contracts you can see that
48:42 - we have greeter.sol we're going to
48:44 - rename this contract to be
48:47 - transactions.sol
48:49 - all right and because i want to visually
48:51 - syntactically highlight and use uh
48:54 - solidity i'm just going to go ahead to
48:56 - my extensions by doing command shift x
48:58 - or just clicking extensions over here
49:00 - typed in solidity and let's go ahead and
49:02 - install solidity so that way for writing
49:04 - solidity code it can actually like
49:06 - syntax highlight it and make it look
49:08 - real nice so that's installed let's take
49:11 - a look yep now we're getting some
49:13 - styling at our transactions.sol
49:16 - we're gonna basically
49:18 - make this entire contract empty all
49:21 - right and then we're gonna start from
49:23 - here let's also actually get rid of this
49:25 - as well and the last bit right over here
49:28 - so we start off with just pragma
49:31 - solidity so this is just telling it
49:33 - which solidity version to use
49:36 - all right so let's start making our
49:37 - transactions contracts i'm just going to
49:40 - do command b and kind of hide that and
49:42 - so you can see full screen so let's get
49:44 - started on our transactions contract the
49:46 - event is going to be transfer it's going
49:48 - to take in an address type which is
49:50 - going to be sender another address will
49:53 - be receiver so where are you sending it
49:55 - from and who you're sending it to it's
49:57 - going to take an integer or a uint
50:00 - amount string message so the message
50:03 - will just be a string and then we'll
50:04 - have a you in 256
50:06 - which will be a timestamp and then we
50:09 - will have a string keyword so this is
50:11 - just going to be whatever the keyword is
50:13 - cool now here's what the function is
50:15 - going to be so the function is going to
50:16 - be called publish transaction it's going
50:19 - to take in an address payable so this is
50:22 - where so it's going to take in an
50:23 - address it's going to be type payable
50:25 - and then receiver we're going to have a
50:27 - uint amount payable means you're paying
50:30 - it to the receiver that's who's going to
50:32 - get paid we're going to store the
50:34 - message in memory and we're going to
50:35 - store the keyword in memory as well and
50:38 - this is going to be a public function
50:41 - and the event that we're going to emit
50:44 - is transfer and so we're going to omit
50:47 - the sender
50:49 - the receiver amount message the
50:52 - timestamp of the block and then whatever
50:55 - keyword was passed so in terms of our
50:57 - contract our solidity part of it we're
51:00 - almost done honestly it's yeah it's
51:02 - honestly that's simple we're pretty
51:03 - close to being done but our contract
51:05 - here is done now we're gonna work on our
51:07 - deploy script so let's go here create a
51:09 - new file we'll call deploy.js
51:12 - and we'll work on this script together
51:14 - all right so let's get started making
51:16 - this function so i'm going to make a
51:18 - function called main and then we're
51:20 - going to have transaction factory this
51:22 - transaction factor is going to await
51:25 - hre.ethers and it's going to get the
51:27 - transactions from the factory so
51:29 - basically you know the transaction
51:31 - contract we deploy it and this allows us
51:34 - to actually like pull it from there and
51:36 - then what we'll do is we're going to go
51:38 - ahead and deploy that contract we're
51:41 - going to await the deployed response
51:44 - that we get back and then we're
51:45 - essentially going to say the transaction
51:47 - that that contract right was deployed to
51:52 - this address this is this will be the
51:54 - contract address all right and then
51:56 - we're going to create a iife which is a
51:59 - immediately invoked functional
52:01 - expression so this is going to be an
52:03 - async here an anonymous function we're
52:06 - calling it immediately and then it's
52:08 - going to be wrapped in a try catch block
52:10 - and i'm going to await the main function
52:12 - and once it returns simply just exit
52:15 - without any errors and if it does return
52:18 - an error then basically exits with an
52:20 - error we're going to tell the system
52:22 - something is broken so in terms of our
52:24 - deployment contract that is essentially
52:26 - it and we're done all right so now let's
52:28 - go ahead and actually deploy this
52:31 - contract so what we're going to do is
52:33 - and by the way if this code is like
52:35 - where the heck is this coming from this
52:37 - code is right there and we're just using
52:40 - a async await function to to return it
52:43 - you can just copy and paste this as well
52:45 - like that should work too both work now
52:48 - what we want to do is we want to run
52:49 - this command here npx hard hat run
52:52 - scripts so let's go ahead and zoom in
52:54 - here so you can see it and we're going
52:55 - to go npx hard hat run script slash and
53:00 - then we want to give it which scripts
53:01 - we're going to say deploy.js and then
53:03 - the last thing we actually want to say
53:05 - is and this is an important bit we want
53:07 - to actually give it the network flag and
53:10 - here's the network we want to deploy
53:12 - this to it's rinkaby oh one thing i
53:15 - actually did not do for this is let's
53:17 - actually make sure that we compile this
53:19 - so let's go ahead and let's do npx hard
53:22 - hat compile so let's do that first all
53:25 - right one other thing we have to do
53:28 - is inside of our hard hat config file
53:32 - oops sorry let's zoom out here inside of
53:35 - our hard hat config file right there
53:37 - we're gonna go ahead and just set up a
53:39 - couple of things so we don't need any of
53:41 - this don't need any of this there so
53:43 - this solidity contract solidity over
53:46 - here yep okay cool now in here what i
53:48 - want to do is i'm going to have networks
53:51 - like so uh and here's what networks is
53:54 - going to be so it's going to be the
53:55 - rinkybee network and the url is going to
53:58 - be this long alchemy string i'll show
54:01 - you exactly where i got this alchemy url
54:04 - from and then i'm going to also need an
54:06 - account and the account is going to be
54:08 - this long uh private key so this is my
54:11 - private key from my metamask so i'll
54:14 - show you first where i got this from so
54:16 - if i click over here and i go right
54:19 - there so let's go to my one of my burner
54:21 - accounts that i don't care about and in
54:24 - here let's click account details right
54:27 - there and here and if i click export
54:29 - private key and i type in my password
54:32 - here as soon as i'm done typing in my
54:34 - password it'll give me the key so that's
54:36 - kind of where i'm getting this from now
54:37 - this is another burner wallet that i'm
54:39 - using so that's where i'm getting the
54:41 - key from and then this alchemy url right
54:44 - here this i'm getting it from the
54:46 - alchemy website so if we go alchemy api
54:50 - and we hit alchemy you can hit
54:52 - get started for free and you can create
54:54 - an account with them so i'll go ahead
54:57 - hit create an app and i'll call this the
54:59 - uniswap blockchain app and we'll go
55:03 - development and ethereum is fine and
55:06 - then we will say ring create app here we
55:09 - have our unit swap blockchain app so we
55:12 - can go inside of here all right and then
55:15 - where i click to view key and it just
55:18 - gave me my url so i'm going to copy that
55:20 - and
55:21 - right here i'm going to go ahead and
55:24 - paste that url so that's all you need to
55:26 - do right there all right so now let's go
55:29 - ahead and try that command where we try
55:31 - to deploy to the rinkeby network and
55:33 - let's see what happens so npx hard hat
55:36 - run script slash deploy.js and we're
55:38 - going to pass it the rinkyp network and
55:41 - look at that now i'm not getting an
55:42 - error anymore it means it knows which
55:45 - network we're deploying it to so that's
55:47 - a really really good sign and
55:49 - congratulations it looks like the
55:52 - contract was deployed it is the
55:54 - transactions contract so here is the
55:57 - transactions you know dot sold contract
56:00 - was deployed to the following address so
56:02 - let's go ahead and deploy it again and
56:05 - now you're gonna see that it's gonna
56:07 - send and and show us a different little
56:10 - message on our console log just just one
56:12 - that's i think a little bit nicer right
56:14 - transactions.sold contract deployed to
56:17 - the following address and if you
56:19 - actually go to that address you'll be
56:21 - able to see that yes indeed that
56:23 - contract is deployed all right with that
56:25 - said our contract your very first
56:28 - solidity contract is now deployed
56:30 - congratulations smash that like button
56:32 - if you're pumped about that and now
56:34 - we're ready to get back and this
56:37 - contract that we have now deployed we're
56:39 - going to interweave it into our next app
56:44 - coming right up all right now we're
56:46 - going to add the functionality to be
56:47 - able to send the money so sending the
56:50 - money let's go ahead and start working
56:52 - on that now all right so let's start
56:54 - working on sending transactions so let's
56:56 - create a function called send
56:58 - transaction it's going to be an
56:59 - asynchronous function and what we're
57:01 - going to do is we're going to give it
57:02 - the argument meta mask which will
57:04 - default to eth because we're already
57:06 - kind of grabbing that from the global
57:09 - scope of our chrome right window.eth
57:11 - let's also get the connected account or
57:14 - default to the current account and then
57:17 - we're going to make a try catch block
57:20 - like this so just a try block through a
57:22 - try and let's start filling this out so
57:26 - basically if the metamask doesn't exist
57:28 - just return and then i'm going to
57:30 - destructure address to an amount from
57:32 - the form data so if you're like hey what
57:34 - the heck is this form data we're going
57:36 - to create this inside of our transaction
57:39 - context as a matter of fact let's just
57:41 - go ahead and create that actually once
57:43 - we're done with this we're going to go
57:44 - ahead and create the form data so we'll
57:46 - we'll we'll take care of this right away
57:48 - all right the next up i want to actually
57:50 - get my transaction contract so i'm going
57:53 - to call my function get a theorem
57:55 - contract we're going to create this
57:57 - function as well so we're going to
57:58 - create this and this function as well
58:00 - let's keep going in the meantime and i'm
58:02 - going to say the parsed amount is
58:04 - whatever i'm getting from
58:05 - ethers and i'm going to parse the ether
58:07 - i'm going to give it the amount so what
58:09 - is what does this mean
58:11 - in big picture view well here's what
58:13 - that means so this is going to be the
58:15 - address to and this is going to be the
58:17 - amount and we're going to be pulling
58:19 - this is going to be the form data we're
58:21 - going to pull that form data and
58:22 - destructure it okay so that's kind of
58:24 - what's happening then we're going to
58:26 - await the meta mask request so metamask
58:28 - is going to pop up and the method that
58:30 - we're going to ask it to use is the send
58:33 - transaction and the parameters is going
58:35 - to take are the following so it's going
58:37 - to be array of objects from is going to
58:39 - be the current or the connected account
58:42 - 2 is going to be who are we sending this
58:43 - money to gas this is just going to be 52
58:46 - 000 way gas fees and then value is going
58:49 - to be whatever the parse amount we got
58:51 - and then we're going to turn it into hex
58:54 - cool that's going to be the value great
58:55 - then we're going to wait for the
58:57 - transaction hash and i'm going to call
58:59 - my transaction contract dot publish
59:02 - transaction this is the contract that
59:04 - i've created don't worry all of this
59:06 - we're going to get access to it from
59:08 - when we do get ethereum contract okay so
59:10 - we're going to create that function but
59:12 - remember our solidity contract had a dot
59:15 - publish transaction method and then
59:17 - we're just going to need to pass it the
59:18 - address the parsed amount a message so
59:22 - transferring e from in this much east
59:24 - and sending it over to this account and
59:27 - then we're going to say that the message
59:29 - the keyword is transfer in this case so
59:31 - if you're wondering what is this keyword
59:33 - thing well if i take you to my
59:34 - transaction soul you can see that i have
59:36 - keyword right there let's go back and uh
59:39 - let's keep on working on this next up
59:42 - we're gonna await this so we're gonna
59:44 - wait for this entire transaction to
59:46 - actually finish and what we're gonna get
59:48 - back is a you know this is gonna once
59:51 - this finishes this will this whole thing
59:54 - will return to us a hash a hash is just
59:56 - this long string that will encapsulate
59:59 - this entire information so we're going
60:01 - to await that hash and then we're going
60:02 - to save that transaction okay so we're
60:04 - going to call our save transaction
60:06 - function and we're going to pass it all
60:08 - of this information we're going to catch
60:10 - and console log the error and then we're
60:12 - going to set his loading to true while
60:14 - we're waiting and we're going to set his
60:16 - loading to false once we're done waiting
60:18 - for the transaction and we have actually
60:20 - saved it cool let's say now there are a
60:23 - couple of things that we're going to be
60:24 - doing in here so i'm going to comment
60:26 - this out because save transaction this
60:28 - is going to be something we're going to
60:29 - be doing with our database so let's just
60:31 - leave this leave this here for now and
60:33 - the set is loading this is going to
60:34 - allow us to put a nice little loader
60:37 - while the transaction is loading so
60:38 - let's go ahead and make a couple of
60:40 - state variables all the way at the top
60:42 - so i'm going to go
60:44 - right over here and let's go ahead and
60:46 - create a few new state variables i'm
60:49 - going to say const is loading and set is
60:52 - loading and we're going to set this to
60:54 - false by default
60:56 - and then we're going to get the form
60:58 - data as well so i'm going to say const
60:59 - form data set form data
61:03 - and we're going to say address to blank
61:07 - in the start and amount is going to be
61:10 - blank as well just like this let's go
61:12 - ahead and make sure that we actually
61:14 - pass this
61:15 - down here so i'm going to go ahead and
61:17 - say we're going to pass or send
61:19 - transaction function so we're going to
61:21 - be passing this function and we'll now
61:24 - have access to this function inside of
61:26 - our main if we wanted to now one last
61:28 - thing i want to do is handle the change
61:30 - of this form so what happens when i
61:33 - change things on this form let's go
61:34 - ahead and work on that so i'll create a
61:36 - new function and we'll call it const
61:39 - handle change and it will take in an
61:42 - event and whatever name you give it the
61:44 - name is like the attribute that you give
61:46 - it and what we're going to say is we're
61:48 - going to say set form data and then it's
61:50 - going to take the previous state this is
61:52 - some advanced confusing javascript but
61:54 - you'll be fine just like this so this is
61:57 - going to be the key this is a dynamic
62:00 - key that's being created on the fly and
62:02 - this is basically getting whatever the
62:04 - previous state was so there's something
62:06 - really weird that most people don't know
62:08 - but whenever you call these set hooks by
62:10 - default you have access to something
62:12 - called previous previous state or prefs
62:15 - date and it's a really
62:18 - clean way of doing it and it's like the
62:19 - most robust way of doing it so look at
62:22 - it kind of at your own risk but it was a
62:24 - rabbit hole i fell down into and i was
62:26 - like oh my god this is so cool but uh
62:28 - honestly you don't need to worry too
62:29 - much about it if you just use it just
62:31 - get it to work and you should be good
62:33 - and i'm going to pass this handle change
62:35 - a function as well actually so let's go
62:37 - inside of our main and in my main what i
62:40 - want to do is actually destructure some
62:42 - of this i'm going to say const form data
62:45 - also destructure handle change and send
62:48 - transaction function and i want you to
62:50 - destructure this from let's use the use
62:52 - context hook and we're going to say
62:54 - transaction context let's hit and let's
62:57 - go ahead at the top and make sure we
62:59 - import this so boom
63:02 - transaction context from dot dot slash
63:05 - context slash transaction context just
63:07 - like that so that will ensure that we're
63:10 - getting access to the form data the send
63:12 - transaction and now we simply just have
63:14 - to use these before we use them let's
63:16 - create one more important function so
63:18 - this is going to be our handle submit
63:20 - function so handle submit function it's
63:22 - going to take in an event we're going to
63:24 - destructure our address to an amount
63:25 - from the form data let's prevent the
63:27 - default and if the address doesn't exist
63:30 - then stop or the amount doesn't exist
63:34 - then stop so if either of these don't
63:36 - exist just return and don't do anything
63:38 - otherwise send the transaction so run
63:41 - our function send transaction and that's
63:43 - it so that's essentially it when it
63:45 - comes to the form because we have the
63:47 - handle change and that's happening right
63:50 - over here as i'm typing in the amount
63:52 - it's filling out our address to our
63:54 - amount that we're destructing from form
63:56 - data and then simply just send the
63:58 - transaction so let's give it a try and
64:00 - let's see if anything at all happens so
64:03 - let's keep an eye out on our console and
64:06 - let's keep an eye out on our wallet as
64:09 - well okay let's go here our local host
64:11 - and refresh oh it says use context is
64:14 - not defined so let's go ahead import use
64:17 - context from react let's refresh there
64:21 - we go all right we're currently logged
64:23 - in so our wallet address is right there
64:25 - and now let's go ahead and try sending
64:27 - some
64:28 - eth so here's what i'm going to do which
64:31 - is which account is a 0 8 it this one
64:34 - right is 0 x8 so i'm going to not wait
64:38 - this isn't connected um let's refresh oh
64:41 - the 0x8
64:43 - is hard coded so let's go ahead and
64:45 - update that so that's not hard coded
64:47 - anymore let's go to header and we're
64:49 - going to update this real quick so
64:52 - inside of header what i want to do is
64:55 - create a username
64:57 - state and then all i'm going to do is
65:00 - create a use effect hook just like this
65:03 - for essentially whenever the current
65:05 - account updates and then i'm just gonna
65:07 - say set user name to and then we're
65:10 - gonna do
65:11 - this which essentially basically means
65:14 - so let's go right there let's close it
65:16 - out
65:17 - and this piece of code here essentially
65:20 - means um
65:21 - give me the first seven strings give me
65:23 - the first seven letters of that long
65:26 - wallet address then put dot dot dot and
65:29 - then give me from 35 continuing all the
65:32 - way until the end that's all this means
65:34 - and then that username will actually
65:37 - just show that wherever i hard-coded it
65:39 - right so let's look for 0x
65:42 - and i hard-coded it right here so we're
65:44 - going to replace this and we're going to
65:46 - do username and let's close that out
65:49 - just like this let's close
65:51 - this guy out right there and boom look
65:54 - at that
65:55 - our wallet address is now showing up
65:59 - so now i can see which wallet is
66:00 - connected
66:02 - so it's not this one it is this one
66:05 - indeed so i'm gonna send money over to
66:08 - this one okay the react.js blah blah
66:10 - blah so i'm gonna copy this
66:12 - and we'll we'll do let's just check so
66:15 - if i do 0.1 eth this should go from 0.7
66:18 - to 0.6 so let's go 0.1 eth
66:22 - we'll send it to this address
66:24 - and let's hit confirm so now we got an
66:27 - error cannot read properties of
66:29 - undefined address to so let's go ahead
66:32 - and handle this error now oh i just
66:34 - realized okay so let's go back into my
66:36 - transaction context and let's go all the
66:39 - way down
66:40 - so let's look for form data
66:42 - right we're creating it here but i'm
66:44 - actually never sending that through
66:47 - so let's go ahead and send that through
66:48 - let's go forum data
66:50 - so let's try this again now one more
66:53 - time let's just take a look at our meta
66:55 - mask here and make sure it's 0.7 so just
66:57 - go to this should go to 0.643
67:02 - paste in our address let's hit confirm
67:05 - and i don't know if anything is
67:07 - happening or not get ethereum contract
67:09 - is not defined so let's go ahead and fix
67:11 - that so remember when we said we created
67:14 - get ethereum contract
67:16 - yep it's time to go ahead and define
67:18 - that now
67:20 - so let's go all the way to the top level
67:22 - kind of right here this is where we're
67:24 - going to start working on it all right
67:26 - now right here we got to do some
67:28 - interesting monkey magical so let's go
67:30 - ahead and put in this contract address
67:32 - contract api and signer
67:35 - these are the three things the
67:36 - transaction contract will take and then
67:38 - we're just going to return the
67:39 - transaction contract so we're done with
67:41 - this function however you're probably
67:43 - like what the heck is contract address
67:44 - and contract api
67:46 - let's go and get them
67:48 - and this is where we're going to have to
67:49 - become monkeys and do some weird stuff
67:51 - but it's not going to be too bad i
67:52 - promise so here's what we're going to do
67:55 - in client create a new folder called lib
67:57 - now let's go inside of our smart
68:00 - contracts
68:01 - and in artifacts you're going to see we
68:04 - have contracts slash transactions so
68:07 - open that up
68:08 - there's going to be this
68:09 - transactions.json
68:11 - so we're going to basically copy this
68:14 - file
68:15 - come back to our client and come back to
68:18 - our lib and you're going to paste that
68:19 - exact file right there
68:21 - so now that we have this file on hand
68:26 - this is what we're actually going to use
68:28 - in just a second so inside of lib we're
68:30 - going to create a new file it's going to
68:32 - be called constants
68:34 - dot js cons
68:37 - tense.js
68:39 - and in here i'm going to say import
68:42 - abi from
68:44 - transactions.json and if you're
68:46 - wondering what api is abi is
68:49 - this
68:51 - whole thing it's uh like a almost like a
68:53 - api but it's like the the contract
68:56 - interface and how the contract works so
68:58 - we know for example the contract has you
69:00 - know function function
69:03 - and it has inputs like sender and
69:05 - receiver and amount
69:07 - which are all int 256
69:11 - message which is a string un256 which is
69:13 - a timestamp keyword which is a string it
69:16 - has a transfer event
69:18 - and then it has another function which
69:20 - has these types of inputs so that's
69:22 - this is just like telling you what the
69:24 - underlying interface of your entire app
69:27 - is so in contacts constants we're going
69:29 - to get access to that and we're going to
69:31 - say export const
69:33 - contract
69:35 - abi is equal to abi dot abi just like
69:38 - that
69:39 - and then we're just gonna paste the
69:40 - contract address as well all right now
69:43 - for the contract address here's what
69:45 - we're gonna do so we're gonna say export
69:46 - cons contract address
69:49 - and this is going to be the one that you
69:50 - deployed so that's this one at the
69:52 - bottom right here so go ahead
69:55 - and copy that
69:56 - you're going to need it
69:58 - and um
70:00 - we're going to go ahead and make a
70:02 - string and paste that right there so
70:04 - that's the contract address we're going
70:05 - to need so now we're done with our
70:07 - constants file all right so now all the
70:09 - way at the top of this file our
70:11 - transaction context what we're going to
70:12 - do is i'm going to say import contract
70:16 - abi comma contract address
70:20 - we're going to destructure this from i'm
70:23 - going to say lib we don't need this
70:25 - period period slash right there so it's
70:27 - going to be from
70:29 - go back a directory and then into lib
70:31 - and into constants okay and we're gonna
70:33 - get our contract api and we're gonna get
70:35 - our contract address
70:37 - the next thing we're gonna do
70:39 - is import ethers
70:42 - from ethers just like so
70:45 - we're gonna import
70:47 - our client so i'll show you how to get
70:49 - our client let's actually leave that
70:51 - empty for now
70:53 - and then that's it let's go ahead and
70:55 - hit refresh on this thing and it can't
70:58 - resolve ethers no worries all you got to
71:01 - do
71:02 - is uh kill your
71:04 - in your client just do yarn add ethers
71:06 - so go ahead and install this package
71:09 - and once it's installed then go ahead
71:11 - and do yarn
71:12 - dev again so let's use yarn dev
71:15 - and we'll hit refresh and that error
71:18 - should go away pretty soon
71:20 - cool so now we're getting a different
71:22 - type of error and we're going to go
71:23 - ahead and fix that so that error is
71:25 - coming from our use effect hook
71:28 - where we're doing set user names so
71:30 - let's go to our header
71:32 - and we're basically going to just say if
71:35 - you know current account
71:37 - does not exist
71:38 - so let's just do if current account does
71:40 - not exist then just return let's refresh
71:44 - and there we go and then once it does
71:46 - exist
71:47 - then we use this guy right here so that
71:50 - that'll take care of that little bug
71:51 - that we were having
71:52 - all right let's go back to our
71:54 - transaction context
71:56 - contract api contract address right
71:59 - we're pulling that from from that
72:02 - constants file
72:04 - and now when we go down
72:06 - okay let's go and look here we're
72:09 - actually getting our contract so this is
72:11 - a get ethereum contract and how it
72:13 - basically works is we call our provider
72:17 - this provider is
72:19 - just basically giving us a provider
72:22 - and then we will get the signer so the
72:24 - signer in this case will be you the
72:26 - person who's signing that contract and
72:29 - then what we're going to do
72:30 - is get our transaction contract so we're
72:34 - going to create a new ethers contract
72:36 - we're going to pass these arguments
72:37 - we're going to say hey this is the
72:38 - specific contract that i want you to get
72:41 - this one right here and the contract api
72:44 - i want you to use
72:46 - that pulled out from the constants that
72:49 - we're giving you then signer is going to
72:51 - be you
72:52 - the signer so that's like when that
72:54 - modal thing opens up and you click it
72:57 - and sign it it's going to be pulling
72:58 - that information from you it's going to
73:00 - be using your private wallet key or
73:02 - something along those lines
73:04 - and once you sign it it gives you read
73:06 - or write access so the right access in
73:08 - this case might be like sending a
73:10 - transaction
73:11 - so now that we're good with that
73:14 - let's go ahead and give it a try now and
73:17 - let's see if anything breaks so fingers
73:19 - crossed
73:20 - let's go full screen here
73:22 - let's take a look at our wallet we're
73:23 - currently at 0.7 if i send 0.1 ether we
73:26 - should drop down to 0.6 let's go and
73:29 - find the address we want to send it to
73:31 - so this one right here copy the address
73:35 - paste
73:36 - all the way back hit confirm
73:38 - oh look at that meta mask just popped up
73:42 - it says sending 0.1 eth
73:45 - and the estimated gas fee is the
73:47 - following okay let's hit confirm
73:51 - and a second one pops pops up just to
73:54 - confirm that you're good to go
73:56 - let's hit confirm and let's see
73:58 - it's going to take a second but then
74:00 - once it's done
74:02 - it's going to be done so let's go here
74:04 - look at that i'm at 0.6 but currently
74:07 - it's at pending
74:08 - it just went through successfully right
74:10 - it was pending now it says it's done
74:14 - let's go to our other one
74:16 - this one i believe is up to
74:18 - 0.48
74:20 - or weight
74:21 - let's give it a second
74:23 - because i don't see a 0.1 eth here yet
74:26 - it says that there was a contract
74:29 - interaction
74:30 - right but the money has not been sent
74:32 - just yet
74:34 - this one was eight hours ago actually so
74:36 - this is an old one all right but
74:39 - it looks like from this account the
74:42 - money was sent into the other account so
74:44 - it did happen it's probably just not
74:46 - showing up in the activity for whatever
74:49 - reason okay and the amount is might not
74:51 - be showing up correctly for whatever
74:53 - reason but it looks like it did our
74:55 - account was at 0.7 now it is at 0.6 so
74:58 - let's just double check so
75:00 - this one is 0.4 right now right so if i
75:02 - send it it should go up to 0.5 so let's
75:05 - go ahead and check so let's send another
75:08 - 0.18 hit confirm
75:10 - confirm and then we'll hit confirm again
75:12 - confirm
75:14 - and let's sit here it says send pending
75:17 - let's look at other one
75:19 - it's currently at 0.4 right so let's see
75:21 - if it goes up to 0.5 sending now it says
75:25 - sent
75:26 - and indeed it has gone up to 0.5
75:29 - there we go so now the receive is
75:31 - showing up
75:32 - just took a second for it to show up and
75:34 - if you look on the block explorer you
75:37 - can see that the transaction one of the
75:39 - transactions happened two minutes ago
75:41 - here is our transaction hash
75:44 - and it was confirmed and it's on the
75:46 - blockchain and anybody in the world can
75:48 - actually verify this okay you just put
75:50 - in this transaction hash hit search
75:54 - and it will bring you to this exact
75:56 - transaction
75:57 - wow wasn't that nice so now
76:00 - you are able to actually send money send
76:04 - ethereum from your unit swap app that
76:07 - you just built how amazing is that put
76:09 - that on your portfolio put that on
76:11 - portfolio because it's going to help you
76:12 - get a job that's my goal that's our goal
76:15 - to help all of you get a job from just
76:18 - all this amazing free content so take
76:20 - advantage of that and if you like that
76:22 - go ahead smash that like button
76:24 - right that was so freaking cool we made
76:25 - it happen smash that like button and
76:27 - let's keep rocking and rolling all right
76:29 - now let's get to work on our sanity back
76:32 - end our database because when people
76:34 - come in here we want to sign them up and
76:37 - have them in our database when people
76:39 - come in here because like you don't want
76:40 - to be pulling all this information from
76:42 - blockchain it's slow as right it's
76:44 - super slow and it's like terrible so you
76:47 - you would want to have essentially your
76:49 - own backend pull data from there record
76:51 - transactions there and then we want to
76:53 - use that to show the history so let's
76:56 - get set up with our sanity database now
76:59 - it's a pretty simple process let's walk
77:01 - through it so inside of lib i'm going to
77:02 - create a new file we're going to go
77:04 - ahead and call it a sanity
77:07 - client.js just like this and i'm going
77:09 - to need access to few pieces of
77:11 - information so for example so here's
77:13 - what we're going to do we're going to go
77:14 - into sanit and then we're just going to
77:17 - create a new project and if you've done
77:19 - so you should have this project already
77:21 - in here you don't need to actually even
77:23 - do this since we did it from the command
77:25 - line a lot earlier you should have this
77:27 - let's go into unit swap blockchain app
77:29 - and let's just go into settings a few
77:31 - things i want to make sure we're good to
77:32 - go in settings are let's go to api
77:35 - actually and for cores let's just add a
77:38 - localhost and allow credentials and hit
77:41 - save so this is basically just like any
77:43 - local host is now part of the you know
77:46 - course so you don't have to get that
77:47 - weird course error and inside of here
77:51 - we're gonna do the following let's go
77:53 - all the way down to where it says tokens
77:55 - hit add api token and you can hit editor
77:58 - or you could even do this but editor is
78:00 - fine and here we're just going to call
78:03 - it our uniswap
78:05 - blockchain app
78:07 - chian
78:08 - chain app
78:09 - save
78:10 - all right now i'm going to copy this
78:12 - because i'm going to need that so
78:14 - ignore that code that you just saw we're
78:16 - going to write that from scratch but
78:18 - copy this
78:20 - and just put it somewhere for now we're
78:21 - going to need this token
78:23 - the second thing we're going to need is
78:24 - this project id so copy that so just
78:27 - copy both of these things all right so
78:29 - now let's get to work with our sanity
78:31 - right so here let's import sanity client
78:33 - from sanity client if you're wondering
78:35 - hey what the heck is going on here
78:37 - just make sure you go to your command
78:39 - line right here
78:40 - and install sanity clients we're going
78:42 - to say yarn add
78:44 - at sign sanity slash client just like
78:47 - that so go ahead and install sanity
78:49 - client once that's installed let's
78:52 - continue we're going to go ahead and
78:54 - export our client sanity client and it's
78:56 - going to take in an object just like
78:58 - this
79:00 - project id is going to be the project id
79:02 - that you copied from here the data set
79:05 - is going to be production api version is
79:07 - one and then for token you're going to
79:10 - use the token that we copied from here
79:12 - okay so go ahead and do that and then
79:14 - cdn just make it false with that said in
79:17 - terms of the client side or the setup of
79:20 - sanity you should be good now let's go
79:22 - inside of our transaction context that's
79:25 - we're going to create a function that
79:26 - adds our database so remember the save
79:28 - transaction function
79:30 - this is our sanity function that allows
79:33 - us to write to the database so we're
79:34 - going to now work on this function all
79:36 - right so let's create this function now
79:38 - so it's going to be called save
79:39 - transaction it's going to be an async
79:41 - function and then it's going to
79:43 - basically have a couple of arguments
79:45 - that we're going to put right over here
79:46 - and then this is going to be our block
79:48 - where we're going to write all of the
79:49 - code for it okay so
79:51 - it's going to take in a transaction hash
79:53 - it's going to take in an amount it's
79:55 - going to take in a from address which by
79:57 - default is going to be the current
79:58 - account
79:59 - and it's going to take in a 2 address
80:02 - where are you sending this money to and
80:04 - then we're going to do the following all
80:06 - right so we are going to create a
80:09 - constant it's going to be called
80:10 - transaction doc okay it's going to take
80:12 - it's going to have the type of
80:14 - transactions the id of it is going to be
80:17 - the transaction hash because remember
80:19 - each transaction hash is going to be
80:20 - absolutely unique
80:22 - it's going to have a from address and a
80:24 - to address and then the
80:27 - timestamp is going to be the current
80:30 - time and it's going to need to be an iso
80:32 - string transaction hash is going to be
80:34 - whatever the transaction hash is and
80:36 - then the amount we're going to just call
80:39 - parse float on that and pass in the
80:41 - amount and then what we're going to do
80:43 - is we're going to create this
80:44 - transaction if it does not exist what
80:46 - does that mean so if i take you to our
80:48 - sanity account here if that transaction
80:50 - does not exist it's going to create it
80:52 - here do i have one rep so this is a good
80:54 - one to use so the transactions does not
80:56 - exist it's going to create it here so
80:58 - that's what uh
80:59 - that's what this line is gonna do and
81:02 - it's
81:02 - it's a really nice way that it does it
81:06 - because it can look for any duplicates
81:07 - and honestly it's even easier than
81:09 - firebase in my opinion and then what
81:11 - we're gonna do
81:12 - is basically we're going to await the
81:13 - client and we're going to say hey patch
81:16 - we want you to patch this so what we're
81:17 - doing now is we want to link so whatever
81:20 - this transaction is we want to go go to
81:22 - the user now
81:24 - and link that particular transaction to
81:27 - a given user in this case my xerox eight
81:29 - eight user right because that's the
81:31 - i believe that's the wallet no i'm using
81:33 - the zero x22
81:35 - so we wanna link it to this user right
81:37 - here so then you should be able to go
81:38 - into user and see
81:40 - per a bunch of the transactions so we're
81:43 - going to patch we're going to give it
81:45 - the current account because patch is
81:47 - looking for an id
81:49 - and in this case the id is just the
81:51 - account address
81:52 - and if missing we're going to just set
81:54 - the transactions to kind of this empty
81:56 - array and then what we're going to do is
81:58 - we're going to insert after so this is
82:01 - essentially append to the array of
82:04 - transactions and the last argument is
82:07 - going to be an array of object
82:09 - and for the key we're going to give it
82:10 - the transaction hash for reference we're
82:12 - going to give it the transaction hash
82:13 - and the type is going to be reference
82:15 - what does that mean well when i go in
82:17 - here
82:18 - right this field right here is a
82:20 - reference field because i can click it
82:22 - and it references a particular
82:25 - transact so that's why
82:27 - this is a string field this is a string
82:29 - field this is a transaction sorry this
82:32 - is a reference field
82:33 - last but not least we're going to then
82:36 - call dot commit and then just return out
82:39 - of the function so dot commit
82:41 - meaning that yes i want to write all of
82:43 - this and then i want to commit this to
82:45 - the database aka update the database
82:47 - with this info
82:49 - let's go ahead and open up
82:52 - our i'm gonna go
82:54 - back and i'm gonna go cd into studio i'm
82:56 - just gonna say studio start
82:59 - or sorry
83:00 - let's go sanity start just like that so
83:03 - then our localhost 3000 should be up and
83:06 - running pretty soon as a result of that
83:09 - or sorry let's go right here our
83:11 - localhost 3000
83:14 - 3333 will start running with our sanity
83:16 - database so let's hit enter
83:18 - and now this should be up and running so
83:21 - if we create any transactions they will
83:24 - pop up here
83:25 - last but not least we just need to go to
83:28 - our
83:29 - function right here and uncomment out
83:31 - this chunk of code right there this is
83:33 - our send transaction function so we
83:35 - wanted to not only send the transaction
83:38 - but also save the transaction inside of
83:41 - our database
83:42 - so let's go ahead and make a transaction
83:44 - now we'll make it pretty small like 0.01
83:48 - eth
83:49 - and we will hit confirm and let's hit
83:51 - confirm on this and let's see how
83:53 - quickly it actually shows up in our
83:55 - sanity database so let's go
83:57 - right there and let's also check if it's
84:00 - sent out of our account so let's go here
84:03 - interaction 2257 so this is indeed the
84:06 - one that we're looking at so it looks
84:08 - like it took place let's refresh
84:10 - nothing in here yet
84:12 - interesting so let's keep an eye out for
84:14 - this oh wow i'm not very smart why that
84:17 - did not work is actually
84:20 - i never started my server i didn't do
84:22 - yarn dev i was here debugging like what
84:24 - the heck just happened
84:25 - okay cool got it
84:27 - so basically
84:29 - don't be an idiot like me
84:31 - and
84:33 - you won't run into any problems so
84:35 - wallet is connected
84:36 - now let's go ahead and try it so let's
84:38 - go 0.01
84:40 - paste the wallet address so let's go
84:43 - i'll grab this wallet address and this
84:45 - should go up to five eight
84:47 - let's confirm this transaction
84:49 - sending looks like it's sent this went
84:52 - up to five eight did we run into any
84:54 - errors client is not defined i know what
84:57 - that error is about i never imported
84:59 - client from the top so let's go ahead
85:01 - and do that now so we're going to say
85:03 - import client
85:05 - from
85:06 - lib
85:07 - sanity client
85:09 - that's it let's try one more time 0.01
85:13 - paste confirm
85:15 - confirm
85:16 - and now let's wait hopefully this time
85:18 - it'll work so waiting waiting waiting
85:21 - let's take a look here i didn't get any
85:23 - errors yet
85:24 - we did go down by one
85:26 - we had a course blocked interesting
85:30 - so
85:31 - even though i said
85:33 - don't block this but it looks like it
85:34 - blocked it so let's go here
85:37 - and let's add origin and let's just put
85:39 - http localhost like that let's hit save
85:43 - interesting because this is not https
85:44 - http so just make sure that in your
85:47 - sanity personal projects under api
85:50 - you go right here and add it in course
85:53 - now let's try this again
85:55 - let's try this again let's hit confirm
85:57 - confirm
85:58 - so this is how you debug you know this
86:00 - is real life like you get an error
86:03 - debug it look at the error message debug
86:05 - it and then you just keep doing i know
86:07 - it didn't get in because there's an
86:09 - error on the post method so
86:12 - we automatically know
86:13 - what happened there now let's go ahead
86:15 - and look here now we're at five zero
86:18 - and
86:19 - we just got a message
86:21 - oh this time we got an
86:23 - error message from
86:25 - sanity so let's go ahead and look
86:28 - and there is a transaction the
86:31 - transaction hash and let's see how much
86:32 - was sent
86:33 - from wallet address looks correct
86:36 - right
86:37 - two wallet address looks correct the
86:39 - amount looks correct and guess what
86:42 - it's right now where i'm located 11 12
86:45 - and this is 11 12 pm
86:48 - 23 on the 24 hour clock it's 23 12.
86:52 - so fantastic all right we were able to
86:55 - actually add it
86:57 - correctly
86:58 - and now let's see are there any users
87:01 - there are no users so now what we're
87:03 - going to need to do is go ahead and
87:05 - make a way where sanity actually stores
87:08 - our users upon login so let's work on
87:10 - that now all right so let's go inside of
87:13 - our transaction context and i'm going to
87:16 - create another use effect hook and
87:18 - basically what i'm gonna i'm gonna make
87:19 - a function that essentially creates a
87:21 - user profile insanity if it doesn't
87:24 - exist and so basically here's how we're
87:26 - gonna do this let's create a use effect
87:28 - hook
87:29 - and it will update and fire off whenever
87:31 - the current account is detected or
87:33 - updated or changed or whatever and
87:35 - basically here's what we're going to do
87:36 - if the account doesn't exist then just
87:38 - return and then otherwise what we're
87:41 - going to do is we're going to just run a
87:44 - immediately invoked functional
87:46 - expression and there's going to be an
87:47 - async function and here's what it's
87:49 - going to do so this over here means it's
87:51 - going to call itself immediately and so
87:53 - we're going to create a user doc it's
87:55 - going to have type of users the id is
87:57 - going to be the current account so
87:59 - meaning the wallet address is going to
88:01 - be the id username is just going to be
88:04 - unnamed
88:05 - by default and then the address is going
88:07 - to be the current account and then all
88:10 - we're going to do is we're just going to
88:11 - create if the user does not exist that
88:15 - is it that is it
88:17 - so
88:17 - with that
88:19 - maybe in my senate if i go into users i
88:21 - should have pretty soon unnamed user and
88:25 - there you go right if i go into users i
88:27 - already have a user that says 0x22 it
88:30 - just got created right now and when i go
88:32 - into it it says the username is unnamed
88:35 - right if i wanted to name this something
88:37 - else it could do that but it will only
88:39 - work if the user does not exist so if i
88:42 - go in from a new user account let's log
88:45 - out of here actually so i'm going to
88:47 - click here
88:48 - and connected sites and we will
88:50 - disconnect
88:51 - and we will connect with our
88:53 - react.js december 11th one so i will go
88:57 - and refresh
88:58 - the connect wallet button should pop up
89:00 - let's go ahead hit next and connect
89:03 - and when we go inside of our sanity we
89:06 - now have a new user in real time you
89:08 - guys saw how quickly that updated i
89:10 - don't have to refresh or anything
89:12 - and here we go 0x88 unnamed and when i
89:15 - go back here 0x8 okay
89:18 - so now users are being created so
89:22 - when we go to the save transaction part
89:25 - or code now this patch thing will
89:27 - actually work why
89:30 - because
89:31 - there are actual users now
89:33 - we act we have
89:35 - actual
89:36 - account valid account addresses we
89:38 - didn't have them before so now i'll be
89:40 - able to go into this or 0x88 and update
89:43 - it so let's check it out let's see if
89:45 - it's working or not
89:47 - so now i'm going to send this
89:49 - to my cp admin one so i'm going to copy
89:51 - the wallet address we'll say send
89:53 - 0.01 eth
89:56 - to this address
89:57 - let's hit confirm and this will show up
89:59 - insanity very very quickly said confirm
90:02 - now let's go inside of our sanity and
90:04 - just wait for one of these transactions
90:06 - to pop up it should pop up fairly
90:08 - quickly here let's just look inside of
90:10 - our meta mask oh it was waiting for one
90:12 - more confirmation
90:14 - so let's go ahead and confirm that as
90:15 - well confirm let's check our yep it's it
90:19 - just went up
90:20 - let's refresh here it'll probably take a
90:22 - second for the transaction to
90:25 - fully show up
90:27 - there we go
90:28 - it showed up in real time zero x
90:32 - one one five i can click inside of here
90:35 - and go and i can see it was sent from
90:37 - this wallet address to this wallet
90:38 - address 0.1
90:40 - and this was the timestamp let's go
90:42 - inside of users now and here's the
90:44 - interesting part so we should be able to
90:46 - go inside of this user and see that they
90:48 - have sent other transactions let's go
90:50 - 0x88
90:52 - and indeed they are linked to this
90:55 - transaction if this user sends another
90:57 - transaction so let's do confirm again
91:00 - you will now have two transactions
91:02 - popping up for this user
91:04 - let's hit confirm here so we've double
91:06 - confirmed and now you'll see two
91:09 - transactions pop up for this user here
91:10 - let's just make sure that the it has
91:13 - gone through successfully
91:15 - and tada
91:17 - right there
91:18 - in real freaking time it updated right
91:21 - how cool was that so if you thought that
91:24 - was cool smash that freaking like button
91:26 - we got sanity to work we got our
91:28 - database working
91:30 - and
91:31 - now with our database working we're
91:33 - pretty much done with majority of the
91:35 - functionality all we got to do now
91:38 - is kind of the last piece of the puzzle
91:40 - which is
91:41 - we want our transaction history
91:44 - to actually pop up and so it's the
91:47 - history that shows up at the bottom when
91:49 - i was demoing the app earlier
91:51 - so there you go
91:52 - this history right there all of the
91:55 - transactions and you can even click them
91:58 - and it can show you it can allow you to
92:00 - view it on ether scan
92:02 - so let's go ahead and make that
92:04 - component work now all right so now
92:06 - we're going to create a new component
92:08 - and we're going to call this transaction
92:10 - history so let's go ahead and do that
92:13 - transaction history.js
92:16 - all right let's just get set up with the
92:18 - all the boilerplate stuff we're going to
92:19 - need so let's get use effect and use
92:21 - state from react let's get our client
92:24 - from sanity client let's get our cont
92:26 - use context from react as well
92:28 - let's get our transaction context
92:31 - from our context library
92:34 - or our context file that we created
92:38 - let's get our image and our eth logo
92:42 - we're gonna get a
92:43 - icon from our react icons
92:46 - and then we're just gonna
92:47 - boom get updated with all of the styling
92:50 - so again
92:51 - i'll go right there so you can kind of
92:52 - see all of the styling if you want to
92:54 - pause it you can
92:56 - but this is all of the styling for this
92:58 - page and we'll go through the styling
92:59 - afterwards as well
93:02 - all right so let's build out our
93:03 - transaction history function
93:06 - and basically we're gonna destructure is
93:08 - loading and current account from the
93:10 - transaction context
93:12 - in order to do that let's just go to
93:14 - transaction context
93:16 - and let's just pass through is loading
93:19 - so now it's gonna be just global state
93:21 - that we're going to see throughout the
93:22 - entire app
93:23 - let's go back to transaction history and
93:26 - let's keep working on this so i'm going
93:27 - to make a transaction history state
93:30 - variable
93:31 - set transaction history
93:33 - and then we're going to use a use effect
93:35 - and again let's call it iife immediately
93:38 - invoked functional expression okay and
93:40 - then we're going to say if it's not
93:42 - loading okay then now and we have the
93:45 - current account so if both of these are
93:47 - true then i want you to create the
93:49 - following query
93:51 - if the type of the document is users and
93:53 - the id is the current
93:55 - address which means
93:57 - this literally just means get that that
94:00 - specific user or that specific user
94:03 - based on whatever the wallet is that's
94:04 - all that means so this means go inside
94:07 - of users type
94:08 - and then for id matching this it means
94:11 - go get this guy or that guy
94:13 - what i want to do is return to me the
94:16 - transaction list and only return to me
94:18 - amount to address timestamp and
94:20 - transaction hash i don't want you to
94:22 - return anything else
94:24 - and
94:25 - i want you to order these by timestamp
94:29 - descending
94:31 - and then just get me the last four we're
94:33 - going to await
94:35 - that query that we just created
94:38 - this query right here that we just
94:39 - created we're gonna await and get that
94:42 - back and store it in client
94:44 - res client response
94:48 - and then we're just going to set our
94:49 - transaction history to the zeroth item
94:52 - that we get back from it and then we're
94:54 - going to zeroth item dot transaction
94:55 - list
94:57 - so what does this mean this means that
94:59 - it's going to get me this person's
95:01 - entire transaction list this entire
95:03 - thing
95:04 - but ordered by descending so their most
95:07 - recent ones are going to be all the way
95:09 - at the top
95:10 - and don't forget to call that function
95:12 - so we created this immediately invoked
95:13 - functional expressions you do have to
95:15 - put that semicolon there it's actually
95:17 - important and then just call this
95:18 - function and then we're going to have is
95:20 - loading and current account so whenever
95:23 - these change this should fire off and
95:25 - then here's the following that we want
95:27 - to return so we're going to create a
95:28 - wrapper inside of that wrapper we're
95:30 - going to create a div and we're going to
95:31 - say if the transaction history
95:34 - exists
95:35 - then show it okay that's all
95:38 - and here's how we're going to show it
95:39 - we're going to go through the
95:41 - transaction history and map through it
95:43 - and i want you to put the logo so just
95:46 - so you can see and follow along what's
95:48 - happening here is let's go to our
95:49 - finished one
95:51 - that's this logo right there the eth
95:53 - logo
95:55 - this over here
95:57 - is the same thing as
95:59 - that amount
96:00 - plus that space right over there okay
96:03 - these are equivalent
96:05 - then we're going to create a span tag
96:07 - for the address because remember we want
96:09 - to style it in line but make it orange
96:11 - like this
96:12 - so we're going to say transaction.2
96:14 - address substring and then we're going
96:15 - to go 0 to 6 that means just get me a
96:18 - few and then put 3 dots there
96:20 - we're going to put a space after it
96:22 - and then we're going to say on and then
96:24 - put another space after that we're going
96:26 - to get our timestamp and we're going to
96:29 - say basically get us a new date which is
96:31 - going to be the transaction timestamp
96:33 - put it in locale string
96:35 - so in we want to turn it into february
96:38 - we're going to take that ugly date and
96:39 - time stamp that we get and we want to
96:41 - turn into this beautiful thing that says
96:42 - february 8 2022 at 2 28 p.m
96:45 - so how do we do that
96:47 - well
96:48 - to this locale string just pass in an
96:51 - object and in that object pass it time
96:53 - zone pst
96:55 - hour 12 true instead of hour 24
96:59 - time style short
97:01 - and date style long okay
97:04 - beautiful
97:05 - and then we're going to pass it our
97:06 - ether scan link
97:08 - so how we're going to pass it is we're
97:09 - going to create the a tag and it's going
97:12 - to be a template string of rinkeby dot
97:15 - ether scan dot io
97:17 - slash tx
97:19 - slash give it the hash
97:21 - so when you click and open that it'll
97:23 - just take you to that exact transaction
97:25 - hash
97:26 - target is going to be blank that way and
97:28 - no refer so it actually takes you to a
97:29 - new tab
97:30 - and that tab has no refer class name is
97:33 - go you know this is going to be the
97:35 - styling we're pulling from the ether
97:36 - scan link it's going to say view on
97:38 - ether scan and it's going to give you an
97:39 - error up just like that and last but not
97:42 - least we're going to export this
97:44 - transaction history function or this
97:46 - transaction history component so that's
97:48 - it now all we got to do is just show
97:50 - this transaction history and where we
97:52 - can do that is let's go to our not app
97:55 - but let's go to our index
97:57 - and here instead of h2 transaction
97:59 - history
98:00 - we're going to say transaction
98:02 - history
98:04 - just like this as you saw it did not
98:06 - auto complete
98:07 - transaction history from component slash
98:11 - transaction history
98:14 - now it has auto completed let's go to
98:16 - our app and set up look at that
98:20 - all of them are showing up just like we
98:23 - expected
98:24 - right let's go inside of our transaction
98:26 - history
98:27 - and let's say we want to change
98:29 - something right so let's go ahead and
98:31 - mess with the styling so let's go ahead
98:33 - and remove the styling for this and you
98:34 - can see that now it's not blue anymore
98:37 - so flex item center text
98:40 - blue right there if i remove this this
98:42 - removes the margin so those get too
98:44 - close to each other
98:46 - for the two address i remove this notice
98:47 - that the true address isn't that like
98:49 - orange color or that gold color anymore
98:52 - for details if i remove this
98:55 - you can see how that messes it up right
98:57 - transaction history item if i remove
98:59 - this it completely messes up
99:02 - all right and this gives me the
99:04 - background color this rounded lg gives
99:07 - me my rounded corners that look nice
99:10 - these are my padding horizontal and
99:13 - verticals if i remove this there's no
99:15 - padding anymore it looks way too
99:16 - squished this is my margin
99:19 - on the y-axis
99:21 - all right so i recommend you play along
99:23 - with it like that too and see what does
99:25 - what you'll start getting what the
99:27 - styling is doing
99:28 - so with that said i can see all of these
99:31 - transactions now let's go ahead and send
99:33 - 0.1 eth
99:35 - to this address
99:37 - and let's hit
99:38 - confirm and let's actually see if it
99:41 - shows up or not so i'll hit confirm
99:45 - and i'm sure it'll take a second but
99:47 - once it's done it should actually show
99:49 - up at the bottom
99:51 - because once this transaction goes
99:52 - through here it uploads that to our
99:55 - sanity and then from sanity i'll pull it
99:57 - down here
99:59 - i think it went through
100:00 - boom look at that it's updated in real
100:04 - time
100:05 - and it shows up right away i didn't
100:08 - refresh i did not do anything and you
100:10 - saw that it updated and showed up in
100:12 - real time so freaking beautiful
100:14 - says it happened at 11 43 p.m look at my
100:16 - exact time it's 11 43 p.m and if i view
100:19 - this on ether scan
100:21 - it says it's indexing
100:23 - so pretty soon it will say success just
100:26 - like if i look at any of these old ones
100:28 - it says success so this will only say
100:30 - success
100:31 - once it um
100:33 - you know goes through and mines this
100:35 - block beautiful
100:37 - all right so we are done with our
100:40 - transaction history now next up we're
100:43 - gonna be working on adding our modal so
100:46 - when we're waiting for our transaction
100:48 - we can see a nice model that's spinning
100:50 - in a circle that tells us that our
100:52 - transaction is taking place so let's go
100:54 - ahead and work on that all right so when
100:57 - it comes to the modal what we want to do
100:59 - is when the loading is happening that's
101:01 - when we want to trigger it so let's do
101:02 - this let's go to our transaction context
101:05 - file
101:06 - and inside of our transaction context
101:08 - let's actually start working on the
101:10 - modal so here we go so this is a
101:12 - function that's going to trigger the
101:14 - loading modal it's going to be a use
101:15 - effect hook the dependency is going to
101:17 - be is loading and if the loading is true
101:21 - then what i want you to do is uh push
101:23 - this
101:24 - to the url so basically change the url
101:27 - to something like
101:28 - a question mark and we'll say
101:32 - loading and then we'll say equals to
101:35 - whatever the current account addresses
101:37 - so
101:38 - 000x8 b84 blah blah blah blah blah
101:41 - whatever right so just do that to the
101:43 - url please
101:45 - otherwise
101:46 - just push the
101:47 - home address
101:49 - and yeah that's totally fine now we
101:52 - don't know what the router is so let's
101:54 - go ahead and use the router so we're
101:56 - going to have to go all the way to the
101:57 - top and import a router and then
102:00 - we're gonna have to make sure that we
102:02 - use the router so inside of our
102:04 - component transaction provider let's go
102:07 - ahead and use the router so we're gonna
102:09 - go like this router use router so while
102:11 - the transaction is happening
102:13 - simply change this url and then once
102:16 - the transaction is done so if loading is
102:19 - completed
102:21 - then we're going to go ahead and push
102:22 - this meaning that we're going to push it
102:25 - to the home page so we're going to
102:26 - remove that url so this url is a hack
102:29 - that you have to do with next.js in
102:31 - order to pop up a modal now let's go to
102:35 - main i believe and let's add in our
102:36 - modal or action yeah yeah all right so
102:38 - we're going to import modal from react
102:41 - modal so let's go down here and paste it
102:44 - and let's go out let's go into our
102:47 - client and we're going to go ahead and
102:49 - install that so we're just going to say
102:51 - yarn add react dash modal that should
102:54 - have installed our modal that's all so
102:57 - react modal should be good to go
102:59 - we are going to also
103:02 - import use router because we're going to
103:04 - need to do that
103:05 - and here's a little reacting we're going
103:07 - to
103:08 - next thing that we're gonna do which is
103:10 - we're gonna set we're gonna grab the
103:11 - modal and set app element to hashtag
103:14 - underscore underscore
103:16 - underscore underscore next just like
103:19 - that then let's go ahead and right above
103:22 - main we're gonna start adding our custom
103:25 - styles for the modal so
103:27 - basically it's going to be an object
103:29 - we're going to give it content as one of
103:31 - the keys and that's also going to be an
103:33 - object and we're going to center
103:36 - the modal so it opens up in the middle
103:38 - of the screen we're going to give it a
103:40 - background color that's going to be dark
103:42 - padding of zero and no borders and then
103:44 - overlay meaning what the background is
103:46 - going to be is we're going to give the
103:48 - background a dark color so that way the
103:51 - modal kind of pops out over everything
103:53 - else we're going to go all the way to
103:55 - the bottom
103:56 - and right before this closes we're going
103:58 - to actually add in our modal all right
104:01 - so basically let's create our modal
104:04 - and for is open we're basically going to
104:06 - say is open is going to take in true or
104:08 - false
104:09 - and we're going to just basically say
104:11 - hey check if we have loading
104:14 - in our url parameters
104:16 - and if we do
104:18 - then what i want you to do is just show
104:20 - it right like open it open the model
104:22 - based on that and then for style we're
104:25 - going to give it custom styles and then
104:27 - we're going to add in this loader so
104:28 - this loader i'm going to comment it out
104:30 - for now by doing command slash now it's
104:32 - saying hey i don't know what this uh
104:35 - router thing is
104:36 - no worries so we're gonna go up to the
104:38 - top of our main function
104:41 - and right underneath here we're gonna
104:43 - create our router we're gonna just use
104:45 - the router
104:46 - so once i click once i make a
104:50 - transaction once my transaction starts
104:52 - it will pop up my modal let's hit
104:54 - confirm confirm so once is loading is
104:57 - set to true you're going to see the
104:59 - modal is going to pop up hopefully it
105:00 - works fingers crossed there we go the
105:03 - modal is there you see the background is
105:05 - now like this dark color
105:07 - so the modal is there we need to
105:08 - actually like style it more so we can we
105:11 - can show it up on the screen but you can
105:13 - see the screen is dark once the
105:14 - transaction is complete you'll see the
105:16 - screen won't be dark anymore and boom we
105:19 - just got the transaction to show up
105:20 - right there so it is working now we just
105:22 - need to make the
105:24 - transaction loader work
105:26 - all right so here's what we're going to
105:27 - do i'm just going to add in my import
105:29 - statement right now i know it's going to
105:30 - break the app but that's and i'm going
105:32 - to uncomment this out let's go into
105:35 - and create a new component here and i'm
105:38 - going to call that
105:40 - transactionloader.js just like this and
105:42 - let's go ahead and start working on it
105:44 - now
105:45 - all right so inside of our transaction
105:46 - loader i'm going to import css from
105:49 - emotion slash react and i'm going to
105:51 - import moon loader from react spinners
105:54 - so we have to actually install both of
105:56 - these libraries okay so make sure you're
105:58 - in your client folder and let's do yarn
106:01 - add
106:02 - emotion slash react
106:04 - and then once that's installed we're
106:06 - gonna do yarn add
106:08 - react spinners now let's zoom out and
106:11 - let's get to work
106:12 - so we're going to create a style for
106:14 - this i'll full screen this you can see
106:16 - my style and copy it so we got a style
106:19 - for our wrapper and for our title we're
106:21 - going to do a little css override so
106:23 - display block margin 0 auto and then
106:26 - border color white and then here now
106:28 - we're going to work on our transaction
106:30 - loader component let's also export it at
106:32 - the bottom here and then
106:34 - let's return the following so i'm going
106:36 - to return
106:37 - a div
106:39 - that div is gonna contain this title
106:42 - which is gonna say transaction in
106:44 - progress and then we're just gonna have
106:45 - the moon loader show up we're gonna have
106:47 - it as a color white
106:50 - loading state is gonna be true and then
106:52 - css override we're going to pass in our
106:54 - css override size 50. so let's go ahead
106:57 - and do a refresh
106:59 - and let's check it out now so i'm going
107:01 - to send over
107:03 - 0.01 eth
107:05 - let's just do 0 2
107:07 - let's hit confirm confirm here let's hit
107:10 - confirm again boom
107:12 - look at that
107:14 - our modal is now popping up and this
107:17 - transaction will show up at the bottom
107:19 - guys if you think this is freaking cool
107:22 - break that like button smash that like
107:25 - button let's get this video past 3 000
107:27 - likes on opencr last build we broke 3000
107:30 - likes let's do that here too
107:32 - here we go
107:33 - 0.02 let's go to our sanity let's check
107:37 - if this is showing up if this user has
107:39 - five transactions yes this user indeed
107:42 - does have five transactions and you can
107:44 - see it's for 0.02 eth
107:47 - wow
107:48 - fantastic let's check it on etherscan
107:51 - it's currently indexing let's look at
107:52 - the last one that one is success
107:55 - beautiful so we are done with the
107:58 - transaction loader now guys we just have
108:00 - one last thing left which is we just got
108:03 - to go ahead and deploy this app so let's
108:05 - get to work on deploying this app right
108:07 - now all right so let's deploy the heck
108:11 - out of this app let's go at this point
108:14 - all we need to do is actually just
108:15 - deploy our client so make sure that
108:18 - you're inside of
108:20 - the client okay that's what we need to
108:22 - deploy client already has access to the
108:25 - smart contract inside of the lib and
108:28 - also has access to sanity client so
108:31 - everything we need should already be in
108:33 - this client
108:34 - folder so now inside of this client i'm
108:37 - just going to type in and just do
108:39 - versailles usually that's the only
108:40 - command you need and we're going to say
108:43 - setup and deploy i'll hit enter do it to
108:46 - clever programmer
108:48 - link to an existing project nope what's
108:50 - your project name
108:52 - project name is uniswap
108:55 - blockchain
108:56 - chain
108:58 - youtube why not
108:59 - where's your code located it's located
109:01 - right here it's setting up the project
109:04 - i don't need to override anything
109:07 - and let's just go through this so we'll
109:09 - now wait and see if actually the
109:11 - deployment takes
109:13 - fingers crossed
109:15 - boom look at that our deployment just
109:18 - got completed over here it says
109:20 - production link is there so let's check
109:22 - it out if it's working
109:23 - yo
109:24 - what the heck look at that it is
109:27 - deployed you can see the url right here
109:30 - guys if you're watching this right now
109:32 - smash that like button drop some love
109:35 - drop it in the comments take a
109:36 - screenshot
109:37 - share it on twitter tag me guys let's
109:39 - get this freaking hyped up because this
109:42 - is crazy we did three builds in three
109:44 - weeks i mean we're on fire and this is a
109:47 - url so unless something is broken you
109:50 - should be able to type in that url and
109:51 - go and check out this app now here's one
109:54 - last piece of the puzzle when i go
109:56 - through this transaction it will not
109:58 - save inside of sanity so we need to get
110:01 - past the course error
110:03 - so let's go ahead
110:05 - inside of sanity here let's go in the
110:08 - personal project add cores
110:11 - paste in that url hit allow credentials
110:13 - hit save so now we should be
110:16 - safe with the course error and i'm going
110:19 - to go ahead and do let's connect wallet
110:23 - let's see if that works popped up that's
110:25 - a good sign let's go here let's hit
110:27 - connect ooh very good sign
110:30 - looks like it connected properly let's
110:32 - get the address of the other wallet we
110:34 - want to send stuff to so this one here
110:37 - grab the address
110:38 - and we will send over 0.1 eth let's put
110:41 - in the address let's hit
110:44 - confirm
110:45 - all right
110:46 - and let's see what the heck happens
110:48 - metamask popped up hey that's good news
110:51 - okay this popped up let's hit confirm yo
110:54 - the loader popped up waiting
110:57 - if it succeeds is the transaction
110:59 - history at the bottom gonna pop up
111:01 - let's let's look out let's see
111:03 - moment of truth
111:05 - oh snap son it popped up
111:10 - this is beautiful and you can view it on
111:12 - ether scan guys if you thought that was
111:14 - freaking awesome
111:16 - show some love
111:17 - you know drop some fire
111:20 - let me know you enjoyed it i mean we
111:22 - just grinded it through and worked right
111:25 - through it worked our faces off but it
111:28 - is done the app is completed and we did
111:32 - everything right i can click pool i can
111:34 - click swap
111:35 - and click everything it changes it right
111:38 - i can log in i can log out i can send
111:40 - however much that i want the front end
111:42 - looks beautiful we have a transaction
111:44 - history here
111:46 - it's connecting to my
111:48 - sanity so if i go inside here
111:51 - i can see that i just made this
111:53 - transaction
111:54 - and this transaction was made at 12 17
111:58 - am as i can see here for the amount of
112:00 - 0.1
112:02 - and that you know on my deployed version
112:05 - it's showing up right there if for
112:06 - whatever reason in my database i change
112:08 - this to 0.2
112:10 - you know that's what would show up here
112:12 - so if i refresh
112:14 - this just changed to 0.2 so we know that
112:17 - it's working with our back end our
112:19 - blockchain part is working our front end
112:21 - with next gs is looking beautiful
112:23 - guys that's it i hope you enjoyed it
112:26 - this was unit swap blockchain web 3.0
112:29 - app if you enjoyed it smash that like
112:31 - button subscribe to the channel because
112:33 - this is the channel where we're going to
112:34 - show you how to become
112:36 - an amazing
112:38 - front-end backend and blockchain
112:41 - developer so that's it you know show
112:44 - some love share it with every single
112:46 - person you know this takes so much
112:48 - freaking time and effort
112:49 - tag me on twitter and you know let me
112:51 - know it was the maybe the biggest lesson
112:53 - you learned and make sure to put your
112:55 - real wallet address because i'll be
112:57 - sending one of you a hundred dollars to
112:59 - ethereum so don't miss out on that tag
113:02 - me free money and follow me on twitter
113:05 - it's a lot of fun it's exciting there
113:08 - we did it
113:09 - we did it all right now with that said
113:12 - if you want to see how i built open c
113:15 - because that was amazing it was
113:17 - absolutely mind-blowing how i did that
113:19 - it's one of the sexiest bills
113:22 - go ahead it's right here go ahead and
113:24 - watch that right now before you sign out
113:26 - before you do anything else click that
113:29 - go watch open c have fun and i'll see
113:32 - you in the next video watch open c go go
113:36 - do it go do it right now
113:42 - you