00:00 - how to build a python snake game now i
00:03 - am here
00:04 - i am wait how do i say this i am i am
00:07 - i have a guest here nate by the name of
00:09 - michael lacombe who's actually a team
00:11 - member
00:12 - here at clever programmer he knows
00:13 - python he's just he does a lot of things
00:15 - like
00:16 - here at clever programmer but i will let
00:17 - him introduce himself
00:19 - to you guys because he is an epic dude
00:22 - he's an amazing guy
00:23 - a hard worker does not stop and just an
00:26 - amazing teacher in general
00:28 - as well so guys make my hold on my guys
00:31 - get it from michael give him give mike a
00:32 - round of applause in the comments
00:34 - for you know give him a round of
00:36 - applause and i'll let him michael
00:37 - introduce
00:38 - himself guys so michael choose yourself
00:40 - who you are
00:41 - and yeah what are you doing here awesome
00:44 - man appreciate the introduction
00:46 - yeah dude so um i guess i'll start off
00:49 - by saying
00:50 - that originally i was actually a
00:52 - profitable shortcut student
00:54 - so before i ever worked with you guys as
00:56 - you know
00:57 - i used to be a student here and because
01:00 - of
01:00 - a profitable shortcut and because of
01:03 - clever programmer and
01:04 - and profit with python i was able to
01:06 - quit my job i was able to
01:08 - start freelancing and make my own money
01:11 - and um
01:12 - you know it's been it's been an
01:13 - incredible experience meeting all of you
01:15 - guys
01:15 - and today what i want to go over with
01:18 - you
01:18 - is a little bit about you know my
01:20 - business and what i do
01:22 - and and i to what i do is tutor people
01:25 - but
01:25 - also the main thing that i run into when
01:28 - people are trying to learn python this
01:30 - is the biggest thing
01:31 - and they always tell me there's if
01:34 - statements there's four loops
01:35 - while loops and you know we can write
01:37 - all these things in a row
01:38 - right but it's like we're told we're
01:41 - told let's make a website
01:43 - let's build this app and then the second
01:46 - that happens you think to yourself
01:47 - i have no clue how to do that right so
01:49 - i'm going to go over today a little bit
01:51 - about
01:52 - how you take an idea and put that into
01:54 - code and we're going to do that with a
01:56 - really cool game
01:56 - that's called snake it's a classic and
01:59 - uh
02:00 - we have an example here actually
02:02 - [Music]
02:03 - before we get into example guys so like
02:05 - i said guys uh
02:06 - guys welcome to the stream welcome
02:08 - everybody as you guys are coming in like
02:09 - you know
02:10 - a lot of you guys and you are coming in
02:12 - just wanted to say welcome
02:13 - today we are working we are building a
02:16 - snake
02:17 - game and i have a guest here at michael
02:19 - lacombe who's actually a team member
02:21 - on clever program he's an amazing guy a
02:22 - hard worker just a crazy guy he's just
02:24 - like a the doer
02:26 - and a great teacher as well and he knows
02:27 - python i know
02:29 - too so with him he's going to be showing
02:31 - us today how to build an awesome snake
02:33 - game but most importantly
02:34 - is how to take an idea right and
02:36 - actually put it into
02:37 - put into something that that you know
02:39 - that's useful right guys so
02:41 - i know we had an issue with a small
02:43 - issue with the stream before but looks
02:44 - like it's all fixed
02:46 - which is awesome so guys for that give
02:49 - us some fire give us some rocket emojis
02:51 - and welcome to the stream welcome to the
02:54 - stream guys hold on let me do this
02:56 - no can you can you see this
02:59 - [Music]
03:00 - you can hear that right
03:04 - should use soundboard that's awesome
03:06 - yeah i have also this like applause
03:07 - like yeah
03:09 - [Laughter]
03:13 - so we have so many people coming it
03:14 - looks like we have steve uh
03:16 - see steve says it seems fine now let me
03:18 - move this let me move this over
03:20 - we have steve we have so many people
03:21 - coming in oh my god sayuri what's up
03:23 - we have yay a lot of people are saying
03:26 - yeah it's all working which is
03:27 - per oh that's so good to hear finally
03:30 - finally it's working
03:32 - guys uh let us know down below where are
03:34 - you guys coming from where you guys come
03:35 - from you know we have people for so many
03:37 - so many different countries
03:38 - who are joining us and it was always
03:40 - awesome to know
03:41 - where you guys are joining us melania
03:44 - says melanie says woohoo let's go
03:46 - let's go melanie let's see who else we
03:49 - got
03:49 - who else we got real quick here man
03:51 - let's uh if you can send me the link for
03:53 - this new stream on youtube i can post it
03:55 - in uh in our previous stream so people
03:58 - know where to go
03:59 - beautiful that's a that's a that's a
04:01 - great idea that's a great idea michael
04:03 - michael michael's a man that's why
04:04 - michael's a man you know um
04:06 - there you go awesome and thank you sweet
04:09 - sweet sweet
04:10 - who else we got guys looks like well
04:12 - karine is coming in from
04:14 - switzerland we got no
04:17 - ready from no uh from what montreal we
04:20 - got from iran
04:21 - from ghana from india from
04:24 - somebody say earth sunny
04:27 - i mean that's good if you're from earth
04:29 - if you're not from earth that'd be
04:30 - interesting actually
04:31 - welcome that would be cool yeah welcome
04:32 - to earth
04:35 - sonia said suman says nepal oh man
04:40 - uh hello halloween says i made a snake
04:41 - game in c plus but guys
04:43 - who's who's excited to make a snake game
04:45 - who's who's excited to make a snake game
04:47 - with us
04:48 - in python and actually have you been
04:50 - running it's actually is so much fun
04:52 - micah just showed it to me and it looks
04:54 - epic i am not kidding here seriously
04:56 - like not even joke
04:57 - somebody said for i'm from mars that's
04:59 - that's okay that's cool all right that's
05:01 - welcome welcome uh
05:02 - maybe you maybe you can give us an
05:04 - invitation one day for us to go to mars
05:06 - right i'm curious how they got reception
05:08 - out there i know how yeah how do you get
05:10 - reception on that you know
05:11 - that's some that's a very hot that's a
05:13 - very strong internet
05:15 - we got from bangladesh from tanzania
05:17 - tunisia from kenya
05:19 - wow wow wow wow so many amazing people
05:22 - guys
05:23 - so many people wow i love it i love it
05:26 - the interaction
05:27 - is great somebody said i'm from snake
05:29 - land i don't know what that means
05:33 - i don't know that really means but cool
05:35 - awesome if your statement okay
05:37 - so guys actually for those of you new
05:39 - who are who just came in i just want to
05:41 - have
05:41 - one say once one last introduction that
05:44 - is today
05:45 - we are building a python snake game okay
05:47 - with michael here who's one of our
05:49 - guests and he's actually a team member
05:50 - here at clever program so
05:52 - if you are new give him a round of
05:53 - applause and
05:55 - with that we can pretty much get started
05:57 - but before we get started
05:59 - michael do you know what they need to do
06:00 - michael what do they need to do do you
06:02 - know
06:03 - i do know what i think they need to
06:05 - smash that like button
06:07 - and also share it with all their friends
06:10 - exactly so you see there's a button down
06:12 - below it says like a thumbs up here's
06:14 - what you do
06:14 - i want you to click that pointer i want
06:16 - to drag that pointer all the way to the
06:18 - bottom
06:19 - okay where it says the smash that i'm
06:20 - going to click it like a lot of times
06:22 - but click it so that it's blue okay make
06:24 - sure it's blue
06:24 - and then make sure you obviously click
06:26 - subscribe and that will all be good
06:28 - and then obviously share this stream on
06:30 - facebook anywhere you got
06:31 - and and we're going to be pretty happy
06:35 - with that
06:37 - wait michael let's get started let me go
06:39 - ahead and bring out the presentation
06:40 - guys
06:41 - i've been in the presentation so we you
06:43 - guys can see what we see
06:44 - and hold on let me see your comments let
06:46 - me see your comments are thank god it's
06:48 - all working this is good this is good
06:49 - stuff
06:50 - all right we had some issues but now
06:51 - works are real good all right
06:53 - so here to cold michael you see what i
06:56 - see
06:56 - yes you do all right absolutely so
06:58 - here's the code so michael
07:00 - give us a round down well you're the you
07:02 - know you're the guy here
07:05 - absolutely man so the number one thing i
07:06 - want to introduce here
07:08 - is the idea that you know we run into
07:12 - all the time as teachers right you know
07:14 - what we do
07:14 - for our the entirety of of of clever
07:18 - programmers teach people how to code
07:20 - and so time and time again what we run
07:22 - into the same issue we run into
07:24 - is you know i understand if statements i
07:26 - understand for loops i understand while
07:28 - loops you know
07:29 - i can write things in order but i don't
07:31 - understand when somebody tells me
07:33 - make this game right you know even if
07:35 - it's a simple random number generator
07:37 - game
07:38 - or if we build a simple website you know
07:41 - the common thing they run into is i have
07:42 - no idea how to put these things together
07:44 - right so today i want to introduce to
07:46 - you an idea that's called software
07:48 - architecture which sounds really fancy
07:50 - and complex
07:51 - but it's actually really simple and what
07:53 - it is it's the
07:55 - it is the process that we use to take an
07:58 - idea
07:59 - break it apart understand how the data
08:02 - works there and and how we're
08:03 - representing our game or
08:05 - or our website or all these things and
08:07 - then use code to actually implement that
08:10 - idea
08:10 - yeah so so guys drop in the comments
08:12 - below that is actually one of the
08:14 - biggest challenges that a lot of our
08:15 - students have
08:16 - you know in profit of javascript and
08:18 - profit with python right
08:19 - they ask the questions right they learn
08:21 - all these things but then they they get
08:22 - hampered with the question of like
08:24 - i do not know how to get started like
08:26 - like yes you know i can build things
08:28 - from a tutorial
08:29 - but when it comes to actually building
08:31 - something basically from scratch taking
08:33 - idea that you have in your mind
08:34 - maybe that's building some kind of an
08:36 - app or anything right it's always hard
08:38 - and the reason why it's hard is because
08:40 - you guys do not know the process
08:42 - it takes so that you can kind of build
08:45 - this idea so you can
08:46 - spread that idea into smaller parts and
08:49 - actually get started
08:50 - so drop in the comments below if you act
08:52 - if you have that same
08:54 - problem you know which is being able to
08:56 - start an idea being able to start a
08:58 - project all on your own without
09:00 - anybody's help i want to see it drop
09:02 - that in the comments
09:03 - below but michael continue on absolutely
09:06 - man
09:07 - so let's move on to the next slide here
09:09 - i want to talk to you a little bit about
09:11 - you know
09:11 - what we have is is the common thing
09:13 - people ask is you know python javascript
09:16 - now don't get me wrong it is really
09:18 - important for people to
09:19 - choose the right language for the right
09:21 - job right if you're working in the web
09:22 - the biggest thing is javascript yeah if
09:25 - you're doing data science the biggest
09:26 - thing is python
09:28 - if you're going to make a triple-a game
09:30 - that has all these graphics going on
09:32 - you probably want to do like c plus so
09:34 - the right language for the right job
09:36 - absolutely right but the biggest thing
09:39 - that people miss again
09:40 - and i want to reiterate this because i
09:42 - found it to be so important
09:44 - is that it's not about python or
09:45 - javascript or or any of these
09:47 - any of these things for building the
09:49 - apps it's about thinking
09:51 - how do i take this problem how do i
09:53 - define
09:54 - its behavior understand how it works
09:57 - then break that up and turn it into code
10:00 - right this process is universal for
10:02 - coding
10:02 - it doesn't it's it's language agnostic
10:05 - and so
10:06 - this is the process i'm going to teach
10:07 - today and what's really cool about this
10:09 - is that by the end you guys are going to
10:11 - be able to play your very own python
10:14 - snake game i'm going to teach you all
10:16 - how to set it up you're going to do it
10:18 - in your browser you don't have to
10:19 - download anything
10:21 - you don't need any image assets yeah
10:23 - it's going to be awesome it's going to
10:24 - be awesome
10:25 - sweet sweet sweet now guys just for the
10:27 - fun of it i'm just very much curious
10:29 - guys python or i know you said it
10:31 - doesn't matter but
10:33 - i'm just curious who here is more
10:34 - interested in learning
10:36 - python and who hears javascript more of
10:39 - a fan of javascript
10:40 - drop that in the comments as well let's
10:41 - get some competition going i always like
10:43 - that i always like that
10:44 - but i would say like michael said right
10:46 - it doesn't matter what matters is
10:47 - basically what the demand is
10:49 - so if you have a job with python you
10:51 - should be learning part-time if you have
10:52 - a job that requires javascript
10:54 - you should be learning javascript right
10:55 - but there's still some absolutely
10:57 - dude everybody's like python python
10:58 - python come on guys
11:00 - nobody here with javascript what is this
11:02 - guys come on
11:03 - give me something out you're dying guys
11:06 - come on
11:07 - you know i'm a javascript guy
11:11 - python oh somebody said both thank you
11:13 - finally
11:17 - absolutely dude everything is like oh
11:18 - hold on somebody said yes
11:20 - siva thank you so much finally thank you
11:23 - so much
11:23 - there we go wait sweet sweet python
11:26 - python oh man
11:28 - man ah guys not cool
11:31 - come on but i mean it makes sense
11:32 - everybody here is we're recording in
11:34 - in python so it makes sense
11:37 - it makes sense but anyways guys one last
11:40 - thing before we get started right away
11:41 - um
11:42 - make sure that you go ahead and tag us
11:44 - in your instagram
11:45 - so make sure to tag us universal right
11:47 - now literally go i want you to take out
11:49 - of your phone right now
11:50 - take us take a picture of us right now
11:52 - and literally
11:53 - tag michael you see michael right there
11:55 - right there you see michael's
11:56 - michael's uh michael's uh what's it
11:58 - called michael's instagram
12:00 - is right there mine is right here so you
12:02 - can literally just tag us
12:04 - in your photo and be like yo let's learn
12:06 - some python check us on instagram and
12:08 - let's keep it going
12:09 - sweet michael all right let's continue
12:10 - on absolutely man
12:13 - so now i want to talk about you know
12:15 - like i said it's it's more about
12:16 - software architecture but i want to give
12:18 - you guys a taste of what we're doing
12:19 - today so we're just going to kind of
12:20 - jump into the code first a little bit
12:22 - and see what's going on
12:24 - and then i'm going to start to build
12:26 - this app with you guys we're going to
12:27 - talk about
12:28 - why i made some of the choices i made
12:30 - and
12:31 - i essentially give you the system that i
12:33 - use the step-by-step system
12:35 - that we go over in profit with python
12:38 - um at our clever programmer um course
12:42 - we're gonna talk about exactly how we do
12:44 - that and um
12:46 - and it's gonna be awesome so let's let's
12:48 - kind of let's look at the snake app here
12:50 - all right talk about the one that's
12:51 - already created you talk with the one
12:52 - that's already created or this one
12:55 - uh the snake not new snake okay let's go
12:58 - this one right there right yeah
13:00 - yep and what's cool about this is we
13:02 - should be able
13:03 - let me try and run it on my side and it
13:05 - should stop and run for you
13:07 - let's see if it does awesome so i can
13:10 - play it on my side
13:11 - so what you're going to see right off
13:12 - the bat is we have this really simple
13:15 - we have this really oh i stopped it
13:16 - again here we go
13:18 - hold on hold on hold on guys how cool
13:20 - does this look give us some fire down in
13:23 - the comments
13:24 - down so what we have here is a menu
13:27 - screen
13:28 - and it's just a little simple wormy
13:30 - thing you can press any key to start the
13:31 - game oh wow
13:33 - and you can control it here so as you
13:35 - can see it's just it's an awesome this
13:36 - is a classic i don't know if you guys
13:38 - had this on your flip phones back in the
13:40 - day
13:40 - but i used to play this thing all the
13:42 - time dude this is good
13:44 - this is good now i could sit here and
13:47 - play this all day actually i have a
13:48 - problem with snake
13:51 - we have a game over and we can restart
13:54 - the entire game
13:55 - every time it eats an apple it gets a
13:56 - little bit longer nice
13:59 - and uh and we're gonna go into exactly
14:01 - how that's done
14:02 - wow that looks cool guys guys who's
14:05 - excited to build this that just looks
14:06 - awesome from the get-go man so who's
14:09 - excited to build this
14:10 - let us know in the comments below and
14:12 - we're gonna build this
14:13 - should we shall we start or wait
14:15 - actually no you you you run this so
14:16 - what should we do next absolutely man
14:19 - yeah so let's see
14:20 - uh i'm excited to see i'm looking at the
14:22 - comments right now
14:23 - just seeing seeing what people are
14:25 - saying here
14:26 - somebody asked somebody asked are we
14:28 - going to make this game using
14:30 - object oriented system object oriented
14:31 - programming we will yes
14:33 - we will we will now funny enough if you
14:36 - look up online you'll see a lot of
14:37 - tutorials where they just kind of
14:39 - split it all down at one page one huge
14:42 - page like 400 lines
14:44 - just to make this one game and one page
14:46 - and what we're going to do is split it
14:47 - up
14:48 - not only object oriented but we're going
14:49 - to talk about why you know why do we do
14:51 - that
14:52 - yeah because i feel like that's the
14:54 - biggest problem we've run into
14:55 - so this is awesome guys again we're
14:57 - gonna go over exactly in depth what we
14:59 - just a fraction of what we cover in our
15:01 - profitable shortcut
15:03 - or our profitable profit with python
15:04 - courses um
15:06 - and i would highly recommend you do that
15:08 - and follow along here
15:09 - and uh let's get started by the way i
15:12 - don't know if we have the link here
15:13 - do we have a link set up for our
15:16 - for our profit with python let me get
15:19 - this for you guys because this is really
15:21 - nice this is the course that we do
15:23 - this is the course that i took and i
15:24 - quit my job with it's absolutely awesome
15:26 - thank you shall i show it then shall i
15:29 - show it to everybody
15:30 - absolutely yeah just throw that up on
15:32 - screen real quick and then we'll jump
15:33 - into the code here
15:34 - and keep going there awesome
15:38 - awesome awesome yeah so just send that
15:39 - maybe put that in chat or something for
15:41 - them so they can click on it
15:42 - but you guys for number one is you could
15:44 - you guys so actually like before we do
15:46 - it let's
15:46 - explain like what this is before we do
15:48 - that michael yeah of course of course
15:50 - yeah so this profit with python course
15:52 - that we do is our
15:54 - in-depth step-by-step course where we go
15:57 - over
15:57 - teaching you from knowing absolutely
15:59 - nothing about python to being able to
16:01 - build
16:01 - clones um of some of the coolest apps
16:04 - that we have
16:05 - absolutely awesome one of the best parts
16:07 - about this program
16:08 - is that you could take so many courses
16:10 - right where
16:12 - you kind of step through and by the end
16:14 - it's like okay i built some cool stuff
16:15 - you know i feel a little bit more
16:16 - confident
16:17 - but not only is our content absolutely
16:20 - awesome this is some of the best python
16:21 - training stuff
16:22 - we have you're going to get access to
16:23 - somebody who's going to
16:25 - train your code live and by that i mean
16:28 - they're going to work with you
16:29 - and look over your code and say hey like
16:32 - this is
16:33 - this is what you could do better this is
16:35 - how you can improve things this was one
16:36 - of the most helpful things for me
16:38 - now also we have weekly live training
16:40 - calls as it says there
16:41 - and you get community access to all of
16:44 - the awesome people we have yeah this is
16:46 - one of the most powerful things
16:47 - um yeah how many
16:51 - how many members do we have in that
16:52 - community right now like a lot
16:55 - it's huge it's huge huge i think it's a
16:57 - way i could pull up here over a thousand
16:58 - i think at this point over a thousand or
17:00 - something
17:00 - guys it is beyond anything else like the
17:03 - community is one of the biggest points
17:05 - between the community between the
17:06 - training like if you're looking for
17:08 - something where it's
17:08 - you know this is not just the course
17:10 - where you are simply going to be you
17:11 - know going there and going through
17:12 - videos this is a
17:13 - breathing and living course it's
17:16 - basically a boot camp
17:17 - like you go in there right you have a
17:18 - community a community of people who are
17:20 - helping each other right
17:21 - through slack you have python training
17:24 - calls right
17:24 - python train calls by one of our amazing
17:27 - amazing guys like jacob right
17:29 - so you're gonna be learning for that i
17:31 - tell that you have the python training
17:32 - modules right
17:33 - you've got your success coaches and like
17:35 - michael do you can you explain what a
17:37 - success coach is what they do for us
17:39 - yeah man the success coaches like i said
17:41 - are probably the most important part for
17:43 - me
17:43 - yeah um it's one thing to watch a
17:45 - tutorial in code it's another thing to
17:47 - do that and submit that code and have
17:49 - somebody look over the code and tell you
17:51 - this is what you did
17:52 - how could we do this better and this is
17:54 - what you did really well
17:55 - exactly exactly and they're gonna be
17:57 - there to help you every step of the way
17:58 - you've got any questions
18:00 - they're going to be there if you have
18:01 - any suggestions and they're going to be
18:02 - there
18:03 - they're always going to be there they're
18:05 - haunting you well no not really not
18:06 - really but
18:07 - you get my point so yeah and most
18:10 - importantly i think the really important
18:11 - part is that earning
18:12 - earning killing with python could be can
18:13 - you talk about that for you for a second
18:16 - absolutely man so the biggest thing that
18:18 - people want to learn
18:20 - python for or javascript is that
18:23 - the reason they do this is you know
18:25 - maybe they want freedom or maybe they
18:26 - want to make a
18:28 - a bigger income for their family or
18:29 - maybe they want a side business
18:31 - most of the time right people want to
18:33 - use these skills to do something and
18:35 - make a real
18:35 - impact yeah and it's one thing to learn
18:37 - it as a hobby and that's fun
18:39 - it's another thing to take those skills
18:40 - and to be able to make an
18:42 - actual difference in your own life like
18:44 - i did and
18:45 - with the help of of this course so
18:46 - exactly that's the biggest thing is that
18:48 - we're not just teaching you the skills
18:50 - about how to do python
18:51 - we're also going to help you figure out
18:53 - how to use those skills and make a real
18:54 - difference in your life make some
18:56 - money exactly
18:59 - absolutely man exactly so you can see
19:01 - obviously you know one of our
19:02 - instructors obviously quasi right you
19:04 - know kaz you guys know kazi right
19:06 - what's up guys if you're watching um
19:08 - yeah you guys know jacob right obviously
19:10 - jacob you know as our python coach as
19:11 - well
19:12 - we've got 200 200 2552
19:15 - students which is crazy and obviously we
19:18 - have a lot of testimonials coming
19:20 - through here you can you can take a look
19:21 - at them
19:21 - and then you can take a look what's one
19:23 - really cool part is one thing we didn't
19:25 - mention
19:25 - is a hundred percent guarantee so
19:27 - risk-free guarantee so if you don't like
19:29 - it
19:29 - if you don't like it on the 29th day
19:32 - 29th hour actually no
19:33 - no 23rd hour 23rd hour
19:37 - 59th minute and then 15 seconds you can
19:40 - pretty much just
19:41 - return it not a problem right so yeah
19:43 - guys check this out the link where's the
19:45 - link the link is in the description
19:46 - under this
19:47 - video or above this video somewhere
19:49 - around here actually it's below this
19:50 - video in the description take a look at
19:52 - that we'll also
19:53 - post um the link to this one and comment
19:55 - so you guys can see it as well
19:57 - right there this is it right here i just
19:59 - posted the link in comments
20:00 - so guys check out the link go on there
20:03 - check it out and if you're interested
20:05 - you know eventually i mean you guys
20:06 - should be interested because you're on
20:08 - here for to learn is that not right
20:10 - you're out here to learn because you
20:11 - want to become developers and this is
20:13 - one of the best ways
20:14 - this is one of the best programs that we
20:15 - got to help you do that
20:17 - sweet so i don't know anything else i
20:19 - should say
20:20 - no man i think we should get into it
20:22 - let's get into it bro
20:24 - let's get into it guys okay man awesome
20:27 - awesome so let's switch over to our new
20:29 - snake here
20:30 - and what you're gonna see is way more
20:32 - code and way less functionality
20:34 - and this is going to be an ongoing theme
20:36 - here um we're going to talk
20:38 - like i said a lot about the architecture
20:40 - of how we build things
20:42 - but if i give this a run what you'll see
20:43 - here and this is just a basic uh
20:46 - basic thing that we do with pi game we
20:49 - have
20:49 - number one a display surface um so we we
20:52 - import pi game
20:54 - we import our pygame.net so this
20:57 - what this does is it sets up the game
20:59 - for us and
21:01 - these kind of settings here this sets
21:03 - the window so this is called a tuple
21:05 - and it's essentially a list but it can't
21:07 - be modified
21:09 - um so we have 800 and 600 here that's
21:12 - the width and the height
21:13 - we're setting up some fonts we have a
21:15 - game clock
21:16 - which uh allows us to track how many
21:18 - frames per second that we're going to
21:20 - put on the screen
21:21 - this is the title of the window and then
21:23 - we get into the real
21:24 - meat so this was like the setup right we
21:26 - haven't really done much yet
21:28 - we just kind of set everything up this
21:30 - is where things get really interesting
21:32 - the biggest thing in the game is the
21:35 - game loop
21:36 - so what the game loop is is the thing
21:39 - that essentially continues to run
21:41 - and provides for us the context of the
21:43 - game right yeah we're running and
21:44 - there's states that we're managing and
21:46 - we're worrying about you know
21:47 - um when is for for our case you know did
21:50 - we eat an
21:51 - apple and grow um did we turn the corner
21:53 - did we hit a wall things like that
21:55 - so this this is the loop that continues
21:58 - to render the game
21:59 - yeah now so a loop loop from just kind
22:01 - of from understanding
22:02 - loop is kind of like think of it as life
22:03 - right you have you know time that's
22:05 - going by
22:06 - you know for you as you guys are living
22:08 - you have a time that goes by every
22:09 - minute every single second right
22:11 - every second count right a second counts
22:13 - right and something's happening every
22:14 - single second
22:15 - same thing here except in coding right
22:17 - you have a while loop so you have to
22:19 - think about
22:19 - with the while loop right a continuous
22:22 - while loop which is basically
22:23 - where your this is where your your game
22:26 - runs your
22:27 - your game runs continuously every single
22:30 - second
22:30 - and this is where you make the changes
22:32 - on any changes that happen
22:34 - you know to maybe you know maybe you
22:35 - press the up button and you want to
22:37 - change you know the view right
22:39 - maybe you press the down button right
22:41 - and you want to change that view
22:42 - so that is what the wall wall is there
22:44 - for but anyways let's keep going
22:46 - absolutely man absolutely that's a great
22:48 - way to think about it so
22:49 - in this is where we we continue to
22:51 - change the state of the game
22:53 - we draw the graphics of the game and
22:55 - this is where the game happens
22:56 - now there's only two things i'm
22:58 - monitoring for right now so number one
23:00 - is pie game so if i highlight this here
23:03 - perfect you can see that
23:04 - pie game gives us this event.get
23:08 - function and what this is is it's going
23:10 - to give us
23:11 - an array of all the events that have
23:13 - happened inside of
23:15 - that loop essentially and so we go
23:17 - across all the events and we say okay
23:19 - if we have an event of type quit that
23:22 - means we want to close the window
23:23 - now something you guys probably didn't
23:24 - realize is that that you actually have
23:26 - to add this
23:27 - otherwise you can't close your window
23:29 - and it just runs forever
23:30 - oh nice um right it's kind of funny
23:32 - something you wouldn't think about
23:34 - now another type we're looking for is if
23:37 - if the event
23:38 - is a key down so now we're pressing on
23:40 - buttons
23:41 - right and we're monitoring that and if
23:43 - it is a key down we also want to check
23:45 - okay if it's an escape key we're going
23:47 - to quit the game
23:48 - exit the program all is done now if none
23:52 - of that happens
23:53 - it's just business as usual right we're
23:54 - doing the game we're moving the snake
23:56 - etc
23:57 - so all i do is i say okay let's make
23:59 - everything white let's update the
24:01 - display
24:02 - and then this is the clock tick function
24:04 - allows us to essentially have
24:06 - um a speed or time during the game
24:09 - and we'll kind of get into that in a
24:10 - little bit here but all this code right
24:13 - all this code and all we get is a white
24:15 - screen where if i press escape it goes
24:17 - away
24:18 - versus versus and we'll take a look here
24:20 - go ahead and go to our original snake
24:22 - and if you go to the main file because
24:25 - of how we've set up our code
24:27 - all we have is three simple statements
24:29 - we create a game
24:31 - we run a game and when the game's done
24:33 - running we quit
24:35 - so michael i'm actually very curious how
24:36 - can they follow along can they follow
24:38 - along or will they have the code after
24:40 - like
24:40 - what what can they do to actually build
24:41 - something like this as well
24:43 - yeah absolutely man so let me go ahead
24:46 - and post that
24:46 - in the chat real quick we have a few
24:48 - options for you um
24:50 - so number one i'm actually going to give
24:52 - you guys this link here you can watch
24:54 - live and if you start coding what's
24:56 - really cool about replyt
24:58 - is that it'll what do what's called a
25:00 - fork so essentially copies everything
25:02 - into your own little
25:03 - your own little directory and then you
25:05 - can start playing around and coding
25:06 - along with me
25:07 - yeah yeah so guys you want to go along
25:08 - with us you want to collab with us
25:10 - drop that in the comments below if you
25:11 - want to do that we'll provide that for
25:14 - you so you can kind of see what we're
25:15 - doing and also cut along
25:17 - which is going to be awesome so let us
25:19 - know in the comments below if that's
25:20 - what you want to do
25:22 - absolutely man absolutely man yeah if
25:24 - you guys would like that i can post that
25:26 - in right now
25:26 - and you can watch us do this live not
25:28 - just on the screen
25:29 - but you can actually watch us do it and
25:32 - interact with us
25:33 - let's do it actually let's do that
25:34 - michael let's do it okay okay it looks
25:36 - like they want it yes let me grab the
25:37 - link here
25:39 - i'll post it right here people like yes
25:42 - let's go
25:44 - awesome awesome so that's a great way to
25:46 - set it up now i want to say one more
25:48 - thing
25:48 - we actually have a github set up
25:52 - and on this github i tracked every
25:54 - single change that i made and how i
25:56 - built this
25:56 - app and you can go through the entire
25:58 - history for those of you that know git
26:00 - and you can actually see this whole
26:01 - thing so this is something where you can
26:03 - download the code
26:04 - uh the previous link i sent you is how
26:06 - you can code along with us
26:08 - okay so let me go and post the link that
26:10 - where they can go along with us okay
26:12 - where did you send it to me where did
26:14 - you send to me yeah i actually put it in
26:16 - chat already i'll put it in chat once
26:18 - more here
26:18 - put in chat go ahead and put the put the
26:20 - the link to
26:22 - where they can cut a long way along yeah
26:25 - yeah yeah and then the github link guys
26:27 - the github link to everything
26:28 - that uh well not not that chat give me
26:31 - the chat
26:32 - not put in slack chat okay perfect i put
26:35 - it in uh i put it in the youtube chat
26:37 - and i also gave it to you there
26:38 - sweetheart let me see let me see let me
26:40 - see let me see
26:42 - send to me and select sent to me and
26:43 - stuff absolutely there you are yeah
26:45 - but like yeah with the github link we
26:47 - will actually provide that for you guys
26:49 - later don't don't you guys worry
26:50 - we'll provide the github link for you
26:52 - later so you can guys cut along with us
26:53 - so you guys can see
26:54 - what michael did every single step of
26:56 - the way that's the really cool part
26:58 - so let me go ahead and provide this
26:59 - right there boom boom boom boom boom
27:02 - boom yeah sweet sweet sweet so you guys
27:06 - you guys can see that let me do it a few
27:07 - more times boom
27:09 - boom boom boom boom all right sweet
27:12 - you guys should not see that link it
27:14 - should be everywhere now guys
27:16 - but people are like i got it i got it
27:20 - no no need to spam me oh man
27:23 - sweet awesome okay so what's cool about
27:26 - this is
27:27 - this is gonna get you started with all
27:29 - the same stuff that we have
27:31 - you're gonna be able this is just the
27:32 - white screen so this is going to make it
27:35 - it's good we're going to bring up a
27:36 - white screen
27:36 - and what we're going to launch into now
27:38 - so now you have an understanding of the
27:41 - basic
27:41 - game loop right so the way it works is
27:44 - we set up a window
27:45 - we initialize pi game we set up a window
27:48 - then we say we monitor for events and
27:50 - you know
27:50 - we're only doing two things right now if
27:52 - we quit the game we quit the window
27:54 - and if we press the escape key we quit
27:57 - the window
27:58 - and then we make the window white and
27:59 - that's all happens in the game loop
28:01 - yeah so there's so so all that all that
28:03 - is going on in here right so escape game
28:05 - so when you click escape right there
28:07 - then you click the window and then okay
28:09 - got it got it okay keep going
28:10 - absolutely so the the basic way
28:14 - there are three main things we need to
28:15 - do we need to start the window
28:18 - we need to then um we need to update
28:21 - sorry the first thing is we need to
28:22 - update
28:23 - the uh the the logic behind the game and
28:27 - this is where things get really
28:28 - interesting and this is what actually
28:29 - makes it complicated so that we're going
28:31 - to go over this in detail
28:33 - as you as you are saying this i got an
28:35 - idea here's what we'll do let's make a
28:36 - comment like this
28:37 - like a comment like this so you guys can
28:39 - see what i'm talking right so as you're
28:40 - saying this i actually go ahead and type
28:42 - type up like what are the steps that
28:43 - we're gonna do right so let's do like
28:45 - number one and that's gonna be a comment
28:46 - do this number two do this
28:48 - so let's go ahead and type that up so
28:49 - people can see right and that like it's
28:51 - visual
28:52 - absolutely so we need to
28:56 - number one we need to worry about
28:59 - there's a few things we're worrying
29:00 - about here right
29:01 - so number one we kind of start with the
29:03 - window oh there we are
29:05 - we start with the window so we draw the
29:07 - window we create the window
29:09 - okay now we now we have something to
29:11 - draw on
29:12 - then we say okay let's update the game
29:15 - logic
29:16 - so this means you know let's move our
29:18 - snake
29:19 - let's uh find a new spot for our apple
29:22 - let's check if the snake ate itself by
29:24 - accident
29:25 - nice these are all things that happen
29:27 - okay we handle we handle
29:29 - input and this kind of ties in with our
29:31 - update game logic right so if i press a
29:33 - button
29:34 - the game logic changes a little bit and
29:35 - now that if i press up and it was going
29:37 - left before now the snake's traveling up
29:39 - or exactly i move it into an apple then
29:43 - finally we draw we use the data
29:48 - to draw graphics right
29:51 - now this is the basic the basic loop and
29:54 - you can kind of summarize this
29:55 - as clear the screen so you clear the
29:58 - screen
30:01 - it gave me some autocomplete there you
30:03 - clear the screen
30:04 - you update the game
30:09 - that's under the used data to draw
30:11 - graphics right correct that's under this
30:12 - right
30:13 - it's under that yeah we draw the drawing
30:15 - the game is graphics
30:16 - update the game is hit like handling the
30:18 - input the game logic all that
30:20 - and clearing the screen is you know
30:22 - every time we do this we need to clear
30:23 - the screen and
30:24 - redraw stuff nice nice nice beautiful
30:26 - beautiful yeah okay i like that okay i
30:28 - like that i like that i like that the
30:30 - vision
30:31 - i like that okay let's keep going
30:33 - absolutely so this is pretty common in
30:34 - game development here
30:36 - and i'm going to leave these for you
30:37 - guys now what i'm going to jump into
30:40 - is the meat of our topic today we have
30:42 - four big things that we need to go over
30:44 - that we're going to go over in detail so
30:46 - that you guys can understand how we
30:48 - break apart this problem
30:50 - so let me do this nas i believe there's
30:53 - a way where i can actually share
30:55 - um a whiteboard let me do this
30:58 - now is it okay if i share my screen here
31:01 - oh
31:01 - you can't not really okay no problem so
31:04 - what i'm going to do here is we'll just
31:06 - do it in the code
31:08 - so there's four big things that we want
31:10 - to do
31:12 - we want to worry about number one is
31:14 - think of the behavior
31:15 - number two constants
31:21 - constants number three we want to talk
31:24 - about
31:25 - the data definitions and number four
31:29 - we want to go over our functions
31:33 - now this stuff trickles down and i think
31:35 - you can see here we start with something
31:37 - that's really
31:38 - broad and undefined right and then
31:42 - as we get to the final thing functions
31:44 - it's very specific
31:46 - and we kind of know like exactly what
31:47 - we're working with yeah yeah okay
31:49 - this is what it looks like to kind of
31:51 - work in a game or work with any program
31:53 - really
31:53 - okay so we're using the example of
31:56 - making a game here so we want to
31:58 - understand um
32:01 - how does our game work what are the
32:03 - rules of our game right we're not making
32:04 - chess
32:05 - we're not making tic-tac-toe we're
32:06 - making uh we're making snake
32:08 - these are different games with different
32:10 - rules different behaviors
32:12 - so first thing we need to think about is
32:14 - okay
32:15 - what are the behaviors of this game okay
32:18 - let's think about that i like that so
32:21 - we have behaviors here so number one
32:25 - um let's talk about for example
32:28 - let's talk about the screen we know that
32:30 - when we move a snake around
32:32 - if it touches the screen or if it
32:34 - touches the edge of a screen
32:35 - the game's over so we can talk about our
32:38 - game overstate right so here's a couple
32:41 - things that happen
32:41 - number one is the snake uh
32:45 - hits the edge of the screen okay makes
32:48 - sense makes sense yeah
32:50 - now another thing that might end the
32:52 - game here
32:53 - is if the snake touches itself
32:57 - oh right right right okay makes sense
32:59 - all right yeah so these are the two
33:00 - biggest
33:01 - if you have like a loop basically like
33:02 - it's like you're talking like a like an
33:03 - actual loop okay got it
33:05 - all right yeah and right now it's not
33:07 - about code it's not about how are we
33:08 - going to implement this
33:09 - it's just essentially defining your
33:11 - goals for your program
33:12 - and your what this is actually also
33:14 - important you're not goals
33:16 - so not goals are and i'm sure you know
33:19 - this nas
33:20 - not goals are things that you
33:21 - specifically state you don't want to
33:23 - worry about
33:24 - because what can happen is you can start
33:26 - having all these ideas
33:28 - and then eventually you get to a point
33:29 - where you never complete anything
33:31 - because you keep adding
33:32 - functions yeah yeah yeah yeah yeah yeah
33:34 - i was i met like a loop like a biscuit
33:36 - when a snake looks like a loop you know
33:38 - oh yeah yeah yeah absolutely
33:41 - so we have the game overstate now what's
33:43 - another thing well let's talk about the
33:45 - movement
33:47 - movement of the snake
33:52 - what's interesting about the movement of
33:54 - the snake here okay well
33:56 - when i press up you know we have a flat
33:58 - snake
33:59 - it doesn't rotate right what happens is
34:02 - the top of it
34:03 - starts to move up and then the rest of
34:05 - the snake's body follows behind
34:07 - and moves up at the same time so we can
34:10 - say that
34:10 - it's body trails it's
34:14 - well where are you typing michael
34:16 - because i can't see you typing
34:17 - oh here let me do this sometimes repple
34:20 - does this i'll refresh real quick
34:22 - and uh what what we're saying about the
34:25 - body
34:25 - is that you know if it doesn't just
34:27 - rotate around an access here i'll paste
34:29 - it in just a second
34:31 - it doesn't just rotate around and access
34:33 - here
34:34 - it follows the body completely trails
34:37 - the head
34:38 - instead so my my thing's still loading
34:40 - here just about done
34:42 - [Music]
34:43 - okay there we go did you get that
34:47 - no okay you might have to refresh on
34:49 - your side sometimes that happens with
34:51 - repple.it
34:52 - rebel so now
34:56 - we have um and it'll load and just there
34:58 - we go perfect beautiful so now we have
35:00 - um a game over state we know that that
35:03 - happens we know that the snake movement
35:05 - is interesting
35:07 - in the sense that the body follows the
35:08 - head uh what else do we know about the
35:10 - snake
35:11 - what else do we know about the snake
35:12 - well when it eats an apple
35:15 - it gets bigger yeah it grows by one
35:18 - right
35:19 - grows by one and that's one of the major
35:20 - mechanics of the game
35:22 - because of its interesting movement
35:24 - where you leave like this trail of where
35:26 - you've been
35:27 - and it snakes behind it and also the
35:29 - fact that every time you eat an apple or
35:31 - food or whatever it is
35:33 - it grows by one it starts to get really
35:35 - hard to manage because
35:36 - you know if your snake is almost as many
35:38 - blocks
35:39 - as um as there are tiles in the game
35:43 - board
35:44 - you have the whole thing filled up with
35:45 - snake and it's really hard not to hit
35:47 - yourself
35:48 - so that's one of the major mechanics of
35:50 - the game is that the body trails the
35:51 - head
35:52 - and that when it eats food it grows by
35:54 - one
35:57 - now the score is essentially how many
36:00 - times you've eaten an apple
36:01 - right so we can mention that right we'll
36:03 - have we'll have a score
36:07 - we'll have a score here and the score is
36:11 - essentially how
36:12 - how much food has been eaten
36:15 - i represented i've always thought it was
36:17 - an apple so i guess i
36:19 - coded it as an apple but you could call
36:21 - it food or or whatever
36:23 - um now there's two other things here we
36:25 - have a menu screen
36:29 - so the menu screen here is just the
36:32 - entry it shows
36:33 - shows one time and again it's not about
36:35 - the code we're just talking about what's
36:37 - it gonna look like to play this game
36:38 - what does it feel like how do we use the
36:40 - input
36:40 - think of this it's kind of like
36:41 - requirements for the game like you guys
36:43 - have to kind of draw out or write out
36:45 - what you want the game to look like or
36:47 - what the process of the game is
36:48 - before you start coding right i was
36:50 - that's making sense and when you start
36:51 - coding it's like oh then
36:52 - too much stuff is going to change and
36:54 - then yeah so this is perfect
36:55 - yeah so let's get yeah continue on
36:58 - absolutely yeah especially
36:59 - this is very common in web design where
37:01 - they first do a mock a wireframe of the
37:03 - website
37:04 - and then somebody will go in photoshop
37:05 - and make it look realistic
37:07 - yeah and then once they have an
37:08 - understanding of oh this is what we're
37:10 - aiming for
37:11 - that's when the code starts yeah exactly
37:13 - beautiful
37:14 - so we have a menu screen shows one time
37:17 - uh at the beginning specifically at the
37:19 - beginning
37:21 - and disappears on any key press
37:25 - we have um a game over screen
37:30 - which displays when snake
37:33 - hits wall or itself
37:37 - and we'll go back to
37:40 - a new game on any key press
37:45 - um let's see here so we have the game
37:48 - over we have a snake movement we have
37:51 - the snake and the fact that it grows we
37:53 - have a score
37:54 - we have a menu screen um and i guess the
37:58 - final thing would be
37:59 - maybe key input we would specify that
38:02 - and we would say that the
38:03 - arrow keys and w a s and d
38:07 - change snake the direction the direction
38:11 - yeah snake direction so like so
38:13 - basically if you press
38:14 - press to the right it goes to the right
38:16 - if you press up and you still press uh
38:17 - it needs to go up okay i see what you
38:18 - mean
38:19 - yeah absolutely one thing should we
38:21 - mention as well is that the snake
38:23 - movement
38:23 - okay oh you said body trails its head
38:25 - okay makes sense got it got it got it
38:27 - yes absolutely so this is
38:30 - you know this snake is a rather simple
38:32 - game now you could think for example
38:34 - think of a really really popular title
38:37 - triple a game like call of duty
38:39 - um imagine trying to list out all of
38:41 - these things right where it's like okay
38:44 - we have all these different game modes
38:46 - each character can customize these
38:48 - attributes about it
38:49 - um we can you know we can we can do this
38:53 - to these guns there's tags
38:55 - um now there's a multiplayer networking
38:57 - aspect to it
38:58 - this is a massive game and a massive
39:00 - problem and they need to make this game
39:02 - run with these awesome graphics in 60
39:04 - frames per second it's quite a feat of
39:06 - software engineering
39:07 - so imagine you have this huge problem
39:10 - and you think to yourself i'm going to
39:11 - make this shooter
39:12 - and it's going to look kind of like this
39:14 - and then you just dive into the code
39:16 - the number one thing that's going to
39:17 - happen is you're going to code yourself
39:19 - in a corner
39:20 - oh yeah so you're going to you're going
39:21 - to have this what's you can think of it
39:23 - almost it's called software architecture
39:25 - for a reason you can think of it kind of
39:27 - like
39:28 - building this really brittle house where
39:29 - if you try to make any change the entire
39:32 - house is going to fall apart yeah
39:33 - yeah so when you take the time up front
39:35 - to say okay this is where the rooms are
39:37 - going to go this is where the garage is
39:39 - i want this many windows then you can
39:42 - start to think about
39:43 - okay how can i do this and make it
39:44 - structurally sound yeah and that's
39:46 - software architecture yeah think about
39:48 - it think of it as like
39:49 - what would happen if you no literally
39:51 - literally think of it like drop that in
39:52 - the comment below
39:53 - what would happen if you try to build a
39:56 - house or or hack
39:58 - any building without having the right
40:01 - plans for it the right foundation for it
40:04 - or anything of that sort like literally
40:07 - guys what would happen
40:08 - right yeah you just started throwing
40:09 - wood together and then every single time
40:11 - a problem comes up you just apply
40:12 - another two by four or you use duct tape
40:16 - or duct tape that's not gonna be a very
40:19 - sound strong uh
40:20 - strong building but anyways yeah let's
40:21 - keep going yeah absolutely man i love
40:24 - that insight
40:24 - so we have our behavior now and what's
40:27 - nice about
40:28 - reason i chose snake is that it's a
40:29 - rather simple game and it makes it easy
40:31 - to define the behavior
40:33 - so what we're going to go from here is
40:35 - we need to talk about the constants now
40:38 - so what we have in this game is an idea
40:41 - of how
40:42 - everything works and i'm going to jump
40:44 - into this idea in a second
40:45 - and which is the idea that as what we
40:48 - really do as programmers is manipulate
40:50 - data
40:52 - but before we get into that this game
40:55 - has a lot of what are called constants
40:57 - so things that never change
40:59 - and we want to think about those
41:01 - constants because
41:02 - if we don't think about those constants
41:04 - and we don't think about to ourselves
41:05 - like
41:06 - okay um you know these things don't
41:08 - change it's essentially things that you
41:10 - have to keep worrying about
41:11 - right so you don't define them anywhere
41:13 - you have to write the numbers in
41:14 - manually and these are called magic
41:16 - literals
41:17 - so you write these in numbers manually
41:19 - and then imagine if you wanted to change
41:21 - let's say the frame rate of the game or
41:23 - you wanted to change how fast the snake
41:25 - moved
41:25 - you'd have to find that in every single
41:27 - spot change it and hope you didn't mess
41:29 - that up
41:30 - right so taking everything that's
41:32 - constant and putting it into
41:34 - one file and or into one place where you
41:36 - can modify those things
41:38 - is really important because it's gonna
41:40 - it's gonna make your code easier to
41:41 - maintain
41:42 - and easier to change yeah perfect so
41:44 - let's do that
41:45 - we're doing that right now absolutely
41:47 - we're doing that right now
41:49 - so we're gonna think the first thing we
41:51 - do is think about okay what is constant
41:52 - in the game
41:53 - and i have you know obviously i have
41:55 - some understanding here
41:57 - but i want you first of all guys you
41:58 - know you've been hearing me real quick
42:00 - in chat
42:00 - i want you to tell me what are some
42:02 - ideas you have what doesn't change about
42:04 - this game
42:05 - what are some things that don't change
42:07 - whatsoever
42:09 - and let's see if you have any ideas
42:10 - that's a good question guys like what
42:11 - what does what doesn't change about the
42:13 - game
42:15 - let's keep going it gives because we
42:17 - have a delay of like 30 seconds
42:19 - so let's keep going with that yeah yeah
42:21 - and then we'll see what people what
42:22 - people say
42:24 - yeah absolutely so we have um we have
42:27 - some constants here so let's think how
42:29 - would we think about what doesn't change
42:31 - here
42:31 - and i'll give an easy answer while we
42:33 - let the comments filter in
42:34 - one thing that doesn't change for sure
42:37 - and this specific example
42:39 - is the width of the window we're working
42:41 - with an 800 by 600 window
42:43 - it's gonna stay that way the entire the
42:45 - entire game
42:47 - uh oh perfect i'm starting to see some
42:48 - comments here so we say
42:50 - um someone says the apple size and color
42:52 - shape doesn't change that's true
42:54 - um the snake's head doesn't change the
42:56 - speed these people
42:58 - say the width of the snake the size of
42:59 - the window apple size
43:01 - color okay nice yeah and a lot of these
43:03 - are really good too speed
43:05 - all of these things absolutely so
43:08 - and this is this is awesome this is
43:10 - exactly this is exactly right
43:12 - most of these are the are um exactly
43:14 - what we're going to be defining
43:16 - thank you guys you guys are smart you
43:17 - guys are smart i like it yeah definitely
43:19 - so let's write that down let's see some
43:21 - constants here
43:22 - what do we have for constants well we'll
43:24 - just list the general idea and then i'll
43:25 - write the code we've got colors
43:28 - colors we've got um the window
43:31 - dimensions we have
43:35 - um window dimensions what else do we
43:38 - have here let's think about this
43:40 - we have so the colors the window
43:42 - dimensions well there's going to be a
43:43 - size
43:44 - actually for each cell right because the
43:46 - snake kind of moves and jumps
43:48 - right so there's the size of cells
43:51 - in the game um
43:56 - the speed and in this game um we're
43:59 - doing something
44:00 - called where where we tie the speed of
44:02 - the game with the frame rate of the game
44:05 - so we're actually going to refer to that
44:06 - as frame rate here
44:09 - and that's because there's no like
44:10 - animations where like weight animations
44:12 - or like where it squiggles back and
44:14 - forth or anything like that
44:15 - right frame rate actually dictates how
44:17 - fast the game moves so yes the speed
44:20 - beautiful let's see what else do we have
44:22 - here
44:23 - um we have a cell size
44:26 - so you know if we have a certain size
44:28 - for a cell it's kind of this arbitrary
44:30 - number
44:31 - the cell needs a width and a height and
44:33 - that's in proportion to the window
44:34 - dimensions
44:36 - so we would say cell width and cell
44:40 - height okay okay and
44:43 - you know these are actually most of the
44:45 - most of the constants
44:46 - so what i'm going to do here is i'm
44:48 - going to create a new file
44:51 - config.pi and this what's going to
44:54 - happen in this file is we're going to
44:55 - create a class called config
44:57 - and it's going to host all of our
44:58 - constants now in python there isn't a
45:01 - constant keyword
45:02 - and what a constant is for those of you
45:04 - that don't know is
45:05 - something that when you create it it
45:07 - cannot be changed yeah um
45:09 - and the way we're gonna handle that it's
45:10 - just the value the value guys the value
45:12 - can't it can't be changed so
45:13 - let's say for example you have a
45:14 - constant but you know a constant like
45:17 - you know in this case you know let's say
45:18 - we have fps right like
45:20 - you cannot just go in later on and
45:22 - choose the fbs to like be 10 right it's
45:24 - always going to be the same
45:26 - yeah during what's called the run time
45:28 - so while the program's running
45:30 - fps won't change but you know if you
45:32 - stop the program change the values and
45:34 - run it again
45:35 - obviously that works yeah yeah okay so
45:38 - i know i have this from the working
45:39 - project i actually know that this is
45:41 - everything that i need
45:42 - uh and we have a couple of certs here
45:44 - too because of the way we do our cells
45:47 - we're essentially saying that they
45:48 - always have to be a multiple of 20
45:51 - the width and the height and that's why
45:52 - we get this 640 by 480 window
45:55 - [Music]
45:57 - and these are our constants we're going
45:59 - to use these white colors these red
46:00 - colors black colors green colors
46:03 - what is the cell with the can you
46:04 - explain this one on there so cell width
46:06 - width divided by cell size yeah
46:08 - absolutely we're going to use that
46:10 - inside of the math of our game
46:11 - to determine um how far apart to draw
46:15 - the lines
46:16 - that um define the cells as well as
46:19 - using that to draw these green squares
46:22 - um that represent the snake and the
46:24 - apple
46:26 - so this cell width is actually a pixel
46:29 - value
46:30 - that represents the actual width of the
46:32 - square that we're going to draw
46:34 - okay got it got it got it makes sense
46:36 - make sense got it
46:38 - absolutely so we have these constants
46:40 - here and we'll go into more detail again
46:42 - i want this talk
46:43 - for you guys to be really about how do
46:45 - we think about structuring this program
46:47 - you know in our course we go in depth
46:49 - entirely on like okay you know
46:51 - how do you think about you know we have
46:52 - an integer value here and like these
46:54 - asserts and we get nitty gritty about
46:57 - python we really go into that and that
46:59 - links below for you guys to check out i
47:00 - would highly recommend that
47:02 - do that before it gets off your brain
47:03 - it's really important
47:05 - but on this talk we're going to talk
47:06 - about how do we think about a program
47:08 - how do we structure the program and then
47:10 - how do we
47:11 - implement that program awesome
47:14 - so now we have a config and inside of
47:17 - the main you know this
47:18 - this isn't going to do anything but we
47:21 - now have access to you know what's
47:22 - called a config
47:24 - the next thing we want to do okay so
47:26 - these are our constants we've done our
47:28 - constants
47:29 - the next step and this is actually my
47:30 - favorite step this step actually changed
47:32 - how i thought about programming
47:34 - we're going to talk about data
47:36 - definitions so
47:38 - what are data definitions well let me
47:41 - and let me bring this up here because i
47:43 - want to just focus on the camera first
47:44 - what do you think are the definitions
47:46 - drop in the comments below what do you
47:47 - think are data definitions
47:51 - yeah absolutely absolutely yeah i'm
47:54 - curious here what do you guys think the
47:55 - point of having a data definition is
47:58 - yeah yeah yeah yeah yeah
48:02 - what's interesting yeah let's let's
48:05 - let's let's start explaining that so
48:06 - because while they come in it's probably
48:08 - gonna be 30 seconds or something
48:09 - yeah definitely definitely so i would
48:12 - start by saying okay
48:14 - you know what's what are we doing as
48:16 - programmers what's so important here
48:18 - well your computer uses data
48:22 - now we're not going to get into the
48:23 - hardware aspects of bits and things like
48:25 - that
48:26 - but what you're really doing is moving
48:27 - lots and lots of data
48:29 - and then you're using that data to draw
48:31 - things to the screen
48:32 - and being able to interact with it
48:34 - whether it's just a simple console
48:36 - application where you draw text to a
48:37 - screen
48:39 - or and by the way some of those can seem
48:41 - simple on the front but do very
48:43 - complicated math in the back
48:45 - or you're building a video game you know
48:47 - what you're really doing
48:48 - is working with data manipulating that
48:51 - data
48:52 - figuring out how do i how do i represent
48:55 - this data
48:56 - and then you know drawing it and
48:58 - providing that to a user
49:00 - in a way that they can interact with it
49:02 - right so
49:03 - in fact the first computer was built i'm
49:05 - sure you guys have seen that i figured
49:07 - what the movie is it's awesome
49:08 - it's with benedict cumberbatch and um he
49:11 - built
49:12 - um he's he plays turing and he
49:15 - builds a computer that breaks the enigma
49:17 - which is like the
49:18 - the german um uh encryption
49:21 - that they use during world war like one
49:23 - or two i forget which one right
49:25 - so originally the whole point of it was
49:28 - to do
49:29 - data and to do it in a way where you
49:31 - could reprogram it and change it because
49:32 - that encryption would change every day
49:35 - so that being said right okay we work
49:38 - with data we work with data so
49:39 - the most important thing that we can do
49:41 - as programmers is think really hard
49:44 - about what data are we working with and
49:46 - how do we represent that data
49:49 - so let's think about in the context of
49:52 - our game here
49:53 - what what are we working with what is a
49:56 - snake game
49:57 - what makes a snake game a snake game
50:00 - what objects are in there and how do we
50:02 - talk about that
50:04 - so while you guys are thinking about
50:06 - this post it post in the comments here
50:07 - let's hear about it what do you think
50:09 - what makes a snake game a snake game
50:11 - right
50:13 - in terms of data you're saying right
50:16 - yeah
50:16 - exactly or just think about like the
50:18 - general thing so like
50:19 - um the fact that there is you know
50:21 - there's a there's a board right we have
50:23 - a game board
50:24 - um there's a snake there's an apple
50:26 - things like this
50:27 - you know this is this for the snake game
50:29 - this is why i chose this example it's
50:31 - actually
50:31 - uh pretty simple so what i'm gonna do is
50:34 - first thing i'm gonna reveal to you is
50:36 - the apple
50:37 - so what is an apple and how do we define
50:41 - that in code how do we represent an
50:42 - apple or
50:43 - food in code so let's think about again
50:47 - let's go back to our behavior again this
50:49 - trickles down
50:50 - so if we think about it right we close
50:51 - our eyes and we think about it we know
50:52 - there's a game board
50:54 - and there's all these cells and um the
50:57 - snake is traveling a certain direction
50:59 - and there's an apple in a cell now that
51:02 - apple doesn't move during the game
51:04 - stays exactly where it's at it can be
51:06 - eaten
51:07 - it can be eaten and then it gets placed
51:09 - somewhere else so it stays exactly in
51:11 - the same spot
51:12 - okay so how would i represent that in my
51:14 - code
51:15 - well what we have is essentially an
51:18 - apple
51:19 - is an x and a y that's all it is
51:21 - coordinate oh well x is y
51:22 - coordinate it's an x and y coordinate
51:26 - so if i go here and i bring up
51:30 - apple and i'll just code this one with
51:32 - you guys because this one's really
51:33 - simple
51:34 - we're going to make a new file we're
51:36 - going to call it apple
51:39 - dot pi and so what we're saying here is
51:43 - we're going to make a new data type
51:45 - a thing that represents something that's
51:46 - in our game
51:48 - and we're going to do that by saying
51:50 - creating something called the class
51:53 - so you you just created an app hold on
51:55 - let me show cause it looks like i don't
51:56 - see it around my side
51:57 - so you create an apple correct oh yeah
51:59 - absolutely let's see
52:00 - apple okay so apple okay
52:04 - explain why you're creating a class yeah
52:07 - so that's exactly what i was just
52:09 - talking about where we need to define
52:11 - data right how do we represent an apple
52:14 - well an
52:14 - apple is kind of this combination of two
52:17 - things it's this
52:18 - x location and this y location so how do
52:21 - we represent that
52:22 - well a really great way to represent
52:24 - this is a class
52:25 - a class is like this thing that takes
52:27 - all these different data types
52:30 - you know let's say it's a person for
52:31 - example a person could be a name
52:34 - and their health and their relationships
52:36 - to other people
52:37 - um and this would be a great way great
52:39 - thing to define in a class
52:41 - one apple is a thing that has a spot on
52:44 - the board
52:44 - and that's really it that's all it
52:46 - really has
52:48 - right so we would have an apple and
52:51 - again
52:52 - we cover all the nitty gritty details
52:54 - here like this underscore underscore
52:56 - init
52:56 - and and how this all works in python in
52:59 - our course in
53:00 - excruciating detail yeah yeah but what
53:02 - we really want to go over here is how do
53:04 - we kind of define this thing
53:05 - so what i'm saying here is that
53:08 - apple has a function and a function for
53:11 - those you briefly say is a function is
53:13 - essentially something you can call and
53:14 - it does stuff for you
53:16 - that's really broad but um it's the best
53:18 - way to think about it
53:20 - so we would say that
53:23 - we have we want a function here
53:27 - and i'm going to grab this from the code
53:28 - that gives us a random
53:30 - x and a random y now you'll see it's mad
53:33 - at me it's all red
53:34 - and underlined and that's because in
53:36 - python
53:38 - we import random here and another thing
53:41 - we're going to need to import and i'll
53:42 - talk about this
53:43 - in a second is our config
53:48 - so what does this do this function
53:51 - set new location essentially sets an x
53:54 - and a y coordinate for the apple and
53:57 - it gives us what it essentially does is
54:00 - gives us
54:01 - a zero
54:04 - it puts it anywhere on the game board
54:06 - from the top left to the bottom right
54:09 - so this can be a random number x and y
54:12 - that represents
54:13 - you know x and y on the game board
54:15 - somewhere and it's going to give us a
54:16 - random number for each one
54:19 - and what we're going to say here is let
54:21 - me fix the indenting
54:25 - we're going to say that when the object
54:26 - is created
54:28 - it sets this random new this random
54:31 - location
54:34 - nice nice so every time we create an
54:37 - apple
54:38 - it's going to look just like this it
54:39 - randomly sets a location for us
54:42 - and that's it that's all we do so this
54:44 - is the data of the apple right
54:46 - it doesn't draw anything we can't see it
54:49 - on the screen yet
54:50 - but what we can do is we can work with
54:52 - it we can delete it
54:53 - move it new places all these things um
54:57 - but this allows us essentially to create
55:00 - new apples and move them
55:02 - and um and this really represents the
55:04 - behavior of an apple
55:06 - right because when a snake eats an apple
55:08 - it doesn't move up one
55:09 - it doesn't move down one or move over
55:11 - three it's not predictable
55:12 - when a snake eats an apple it moves
55:14 - somewhere random again
55:16 - yeah somebody somebody asked the
55:17 - question why config that cell with -1
55:20 - like what is this what is this for
55:22 - yeah okay so we talked about constants
55:24 - right so
55:25 - we have a width the cell width and the
55:27 - cell height
55:28 - this is how many cells are in the game
55:32 - right so it's gonna be um let's say it's
55:34 - like
55:35 - uh 16 cells wide and 16 cells tall
55:38 - i'm not sure exactly i didn't count but
55:41 - there are that many cells so what we
55:44 - need to say is
55:44 - give us a number between zero which is
55:46 - the start
55:48 - for those of you that don't know it's
55:49 - zero based it doesn't start at one it
55:51 - starts at zero
55:52 - so zero all the way to the end
55:55 - minus one and again these are really
55:57 - specific details about programming
55:59 - um it has to do with arrays but
56:02 - essentially what we're saying is give us
56:04 - something
56:04 - you can be anywhere from the start on
56:06 - the left all the way to the right
56:08 - now this config what this is is this is
56:11 - a constant that we defined
56:13 - so if i ever wanted to change the game
56:15 - board or i wanted to change
56:17 - um how big the cells were any of that i
56:20 - could do that
56:21 - because it's all set right here i just
56:23 - quickly change the value rerun the game
56:24 - and the game's different
56:26 - right right gotcha and so i think and i
56:28 - think the reason why it's also cell with
56:29 - minus one is because the fact that
56:31 - we you know since since since since in
56:35 - programming you guys use between zero
56:37 - right between the letter zero and for ex
56:39 - between the letter zero and the number
56:41 - right if you say the width is the width
56:44 - is you know 16 in terms of the actual
56:49 - values of you know address of that cell
56:52 - it goes from 0 to 15 right it goes from
56:55 - 0 to 15.
56:56 - and so if i if we instead instead of do
56:59 - minus one
57:00 - we said just to sell with then at some
57:03 - point
57:04 - at some point not saying always it might
57:06 - actually pick
57:07 - a number 16 instead of 15 which will
57:10 - cause us a problem which will basically
57:13 - to take the apple outside the board
57:15 - because again the address of those
57:17 - those specific cells or the apple in
57:19 - this case it can be between 0
57:21 - and 15 not 16. okay so hopefully that
57:24 - explains that part as well exactly
57:27 - exactly and for those of you where that
57:28 - didn't make sense
57:29 - again we go over this in excruciating
57:31 - detail it's in the
57:32 - links in the chat it's also in the
57:34 - description give that a quick give that
57:36 - a click
57:36 - yeah before it you know just do it right
57:38 - now before it gets off your brain
57:40 - give it a give it a quick look um and
57:42 - just talk to our team you know you don't
57:44 - have to buy anything just talk to our
57:45 - team i'm sure they can help you yeah
57:47 - yeah
57:47 - so back to our game here we've defined
57:49 - our constants
57:50 - and we're what we're doing right now is
57:52 - defining our data so it's like okay how
57:54 - does this data work so we know an apple
57:56 - is an x and a y
57:57 - now let's get to something a little more
57:58 - complicated what is a snake
58:00 - because a snake is kind of this weird
58:03 - thing right
58:04 - it has not just one but multiple of
58:06 - these blocks
58:07 - each block has like you know i'm gonna
58:10 - say it briefly and vaguely now but some
58:12 - stuff
58:12 - going on and we don't know how to define
58:14 - that in data yet
58:16 - and then it changes it changes the
58:17 - entire game so it's like okay what do we
58:19 - do here
58:20 - well let's break it down a snake
58:23 - is a is this list of blocks right it's a
58:26 - whole bunch of blocks
58:27 - and each block has an x and a y
58:29 - coordinate okay
58:31 - so we have an x and a y coordinate for
58:32 - each each block in the snake
58:34 - and the snake the entirety of the snake
58:37 - is all of these blocks
58:39 - okay interesting so if we were to think
58:42 - about this snake then
58:45 - are you are you creating a new file
58:46 - snake the py uh not yet
58:48 - okay yeah i'm just in maine.pie actually
58:52 - got it
58:52 - let me make sure i'll go in there as
58:53 - well yeah let's make sure we're synced
58:55 - up for a moment here
58:57 - i'm on line 44 can you see me typing
58:59 - yeah i can see you no
59:01 - awesome so we have a snake
59:05 - and we can think of it like a list right
59:07 - it's a list of blocks
59:09 - um well we could also say
59:12 - that okay let's use a data structure
59:14 - that's
59:15 - inside of python that's called a
59:16 - dictionary and we could give it an x
59:18 - value so essentially
59:20 - real quick a data structure is something
59:21 - where you can say like the you get the
59:23 - this blocks dot x and this box dot y
59:26 - it's kind of like a class it's similar
59:28 - right um so we have an x and it would
59:31 - have
59:32 - some kind of x value right this
59:34 - represents where it's at on the board so
59:35 - let's say one
59:36 - it would also have a y and this
59:39 - represents the
59:40 - the height on the board for those of you
59:41 - that don't know in computer graphics
59:43 - 0 is y 0 is at the top it's actually not
59:46 - at the bottom but the top
59:47 - so if we did two it'd be two cells down
59:50 - essentially from the top
59:52 - uh and this would represent one block
59:55 - okay
59:55 - so now now we could say
59:59 - well if we started the game with three
60:01 - let's say the snake starts three long
60:03 - and it does if you notice that
60:05 - where would the next xp let's think
60:07 - about that how would we do the next
60:08 - x well it would be probably right
60:12 - let's say this array is called snake it
60:14 - probably snake
60:16 - the head right the head here and we'll
60:18 - talk about that in a second
60:20 - that's actually something we defined uh
60:22 - we will define
60:23 - inside of our snake class it'd be the
60:26 - head
60:27 - which would be zero plus um
60:31 - zero zero here we go dot
60:34 - x so this what we're saying is it's
60:36 - going to be okay this
60:37 - the same x coordinate as the head but
60:40 - actually
60:41 - back one because it's going to be facing
60:43 - this way when we start the game
60:45 - so what is the snake just to make that
60:47 - again we're getting into kind of
60:48 - nitty-gritty details here what is a
60:50 - snake
60:51 - well a snake is really a list of blocks
60:53 - that's really what a snake is it's a
60:55 - list
60:55 - of x y coordinates and each one is one
60:58 - of the segments of its body got it got
61:00 - it so let's
61:01 - let's start to implement that let's
61:02 - think about okay this is a snake
61:04 - um and this is how we're gonna work with
61:06 - our game so we'll go to snake
61:09 - and i'm quickly going to i'm just
61:10 - grabbing this from my reference file
61:13 - i'm going to make a snake.pi awesome you
61:16 - see that
61:18 - now we need to import our config
61:22 - because this is the object that gives us
61:23 - all of the constants and all of these
61:25 - things
61:26 - and we'll make a new class called snake
61:30 - so this does nothing yet snake isn't
61:32 - meaningless so okay we would define a
61:34 - class just like how
61:35 - we did for the apple guys right just at
61:38 - this time we're going to have different
61:40 - attributes and different configurations
61:41 - for this specific class
61:43 - exactly yeah and again this doesn't draw
61:45 - a snake this doesn't make the snake
61:47 - this is the data that represents the
61:49 - snake and we'll take this data and use
61:52 - that to draw the snake later
61:55 - so we have the we have this now okay
61:57 - fantastic
61:58 - so when we create a snake when we say
62:00 - okay let's make a new snake
62:02 - how do we um define these things what is
62:05 - it what direction is it facing when it
62:06 - starts
62:07 - um where does it start also you know
62:11 - do we have any is there any snake
62:13 - attributes to it yet
62:15 - and there is i'm going to take this
62:17 - again
62:19 - and we have this fancy function mm-hmm
62:22 - so i'm just gonna expand it which again
62:24 - uses random so i need to import
62:26 - random and so what we're saying is init
62:28 - we're just saying when we create a new
62:30 - snake again i'm going over in high
62:31 - detail here when we create a new snake
62:33 - we're going to give it a random start
62:35 - x and a random start y these things are
62:38 - never used again these are just the
62:39 - starting coordinates
62:40 - we're going to say okay it's moving
62:42 - right by the way
62:44 - what are these guys what do you call
62:46 - these
62:48 - it came before data definitions
62:50 - constants
62:51 - right constants yeah yeah there we go
62:54 - somebody give me some candy because i
62:56 - got it right
62:59 - i'll give you chris high five dude
63:03 - so you know these constants they don't
63:05 - pertain to the rest of the game
63:06 - they only pertain to a snake so we're
63:08 - gonna put them inside of the snake
63:09 - that's where they belong
63:10 - yeah yeah so we have these constants and
63:13 - we say okay
63:14 - we have up down left right um we're
63:16 - working with strings here this kind of
63:17 - gets into
63:18 - like typing and things like that we
63:19 - won't worry about that but
63:21 - we have we're saying okay it's going to
63:23 - start somewhere random and you'll notice
63:25 - here it doesn't start on the edge ever
63:26 - it starts five away from six away from
63:28 - the left and
63:29 - six away from the right or five away
63:31 - actually
63:32 - um so we'd never start on the edge
63:36 - and uh we're gonna say we'll just start
63:38 - every game we start moving right
63:40 - and this is our initial snake this is
63:42 - how it starts
63:43 - so you'll see that it has an x and a y
63:45 - and it gives it the start coordinates
63:48 - and then it builds a few more blocks
63:50 - just one behind the head and then one
63:52 - two behind the head and you see that
63:54 - with the minus one minus two
63:55 - so this is the start of our snake this
63:57 - is what it looks like
63:58 - and this is just the data again this
64:00 - represents our snake okay
64:03 - so now what else does a snake do well a
64:06 - snake moves
64:08 - and a snake also can potentially eat an
64:11 - apple
64:12 - right we can eat an apple so i'm gonna
64:14 - kind of
64:15 - um i'm gonna grab something from our
64:17 - previous file here
64:19 - and we're gonna talk about well first of
64:21 - all
64:23 - actually i'm sorry guys let's take a
64:24 - step back real quick we're working on
64:26 - data definitions right
64:28 - so we said that a snake is an is a list
64:30 - of x y coordinates
64:32 - so what this you know this is kind of
64:34 - some surrounding stuff we have some
64:35 - constants here that help us build this
64:37 - up
64:37 - but where's the snake really where is
64:39 - the snake and the snake
64:42 - is right here right this
64:45 - is the snake this is the this is the
64:47 - data that represents the snake
64:49 - this is the data that we use to draw the
64:51 - snake
64:52 - this literally is the code that is the
64:54 - snake in our program
64:56 - just as the x and y
64:59 - just as the x and y are the apples in
65:02 - our program
65:02 - right so like if i go to apple y you can
65:05 - see this x and y
65:06 - this represents one object the apple but
65:09 - because it's snake because you know you
65:11 - have
65:11 - a uh because in snake you have what's it
65:13 - called you have a um
65:15 - the trailing tail head right like this
65:17 - is think of it as like
65:18 - the block in front of it this is the
65:20 - block behind it right
65:22 - if you think of is that my credit
65:23 - understanding is that is that right
65:25 - is that right okay yeah so basically
65:27 - what i see is like think of this as the
65:29 - head
65:30 - right then exactly what's the thing
65:31 - behind the head right which is the
65:33 - second block of the snake
65:34 - that's this that's simply going to be
65:37 - this number
65:38 - the x coordinate minus simply one and
65:40 - that's pretty much
65:41 - it and the same thing goes for same
65:44 - thing goes for
65:45 - the one behind that the third block
65:48 - which is going to be
65:49 - x minus two so yeah okay i got that's
65:51 - actually really interesting i didn't
65:52 - think of it like that way that's really
65:53 - cool
65:54 - yeah exactly so this is this is our
65:56 - snake now something i would love to do
65:58 - again if if we get if people really like
66:00 - this
66:00 - we can get back on and talk about
66:02 - refactoring and making things even
66:04 - better but we're just gonna go through
66:05 - with this for now yeah
66:06 - so now we have okay we have an apple
66:10 - we took our constants out so our
66:12 - constants are handled then we thought
66:14 - about okay what is a game well it has
66:16 - an apple and it also has
66:19 - a snake right but there are some things
66:23 - that are in
66:23 - and we're talking about data again there
66:25 - are some things that make up a game
66:27 - that aren't um just those things
66:30 - so now we need to talk about okay we are
66:32 - we're actually working with
66:33 - a construct right a piece of data that's
66:36 - called the game
66:37 - and the game does have an apple and a
66:39 - snake but it has a few more things
66:41 - so i'm going to start by saying we're
66:43 - going to create a new file let me know
66:45 - if you see this
66:46 - mm-hmm okay beautiful
66:49 - so this is our game and i'm gonna start
66:52 - by doing a couple of
66:53 - imports here and you're gonna see okay
66:56 - we use the config
66:57 - we use the snake we use the apple and
67:00 - now we're importing the real
67:02 - exciting part pie game pie game is a
67:05 - framework that we're using to draw
67:07 - graphics to the screen
67:08 - that's a very complicated subject we're
67:10 - gonna let pie game handle that for us
67:12 - got it okay so
67:15 - now we have we have the imports and
67:18 - again
67:19 - it's as simple as saying okay what is a
67:20 - game well we start with class
67:22 - game we're making a game now and
67:26 - we start that by saying okay you know
67:28 - how do we
67:29 - how do we what's in a game you know what
67:32 - makes a game we have a snake we have an
67:34 - apple okay
67:35 - you know what else makes a game is
67:37 - actually the screen
67:39 - the screen um the clock makes a game
67:42 - right how many frames are we doing per
67:44 - second
67:45 - right the fonts that we use make up the
67:47 - game um
67:49 - these are actually the real building
67:50 - blocks here so we have an apple and
67:52 - snake
67:52 - but we also have all of this supporting
67:55 - stuff that lets us
67:56 - see the game essentially
67:59 - so i'm going to put this in and i'll
68:01 - quickly go over this
68:03 - pie game init starts and this was in our
68:05 - original function
68:06 - pie game init starts the game
68:10 - self dot so we say okay we have a thing
68:12 - called screen now
68:13 - and it's equal to and then
68:16 - pygame.display.set mode
68:17 - this is the screen this is the window
68:19 - that we display and again what do we see
68:21 - here
68:21 - constants the window width and the
68:23 - window height
68:25 - something these are constants okay which
68:27 - would define inside the config that py
68:29 - file right here so this is the window
68:31 - width where is it oh right there right
68:32 - now hold on where window
68:34 - and then the window height got it okay
68:36 - let's keep going yep absolutely now we
68:38 - have a clock
68:39 - we're saying okay there's a clock here
68:41 - and that's equal to again provided by pi
68:43 - game that handles all this like real
68:45 - nitty-gritty stuff for us
68:46 - uh a new clock and then we finally
68:50 - say okay let's have a font and we're
68:52 - going to use this font free sans bold
68:54 - and then this is just some set up for
68:56 - the window we say okay give it a title
68:58 - bar that says wormy
68:59 - and finally you'll see that we make an
69:02 - apple
69:02 - and a snake they're equal to apple and
69:04 - snake so we're using that now
69:06 - okay so our game has been set up it
69:09 - doesn't do anything yet
69:11 - but the data is there we now have a
69:14 - well-defined
69:15 - and articulated idea of all
69:19 - of the behavior of our game we have an
69:22 - idea of what doesn't change about our
69:24 - game
69:24 - and finally of all the things that do
69:27 - change of the things that we do
69:28 - manipulate
69:29 - and change and you know that makes our
69:30 - game fun and dynamic we have an idea of
69:33 - how we represent
69:34 - that and now it makes it really easy to
69:36 - understand how we might
69:37 - change it in order to make those changes
69:39 - in our game
69:40 - right and just as a small explanation
69:42 - guys the init function right there
69:44 - because some of you guys have asked that
69:45 - question guys
69:46 - the name function is basically when you
69:48 - initialize this class
69:50 - game this is the first thing that gets
69:52 - run
69:53 - automatically right think of it as like
69:55 - this is like
69:56 - some of you might know this word because
69:58 - it's called a constructor right
70:00 - if you don't know this word that's okay
70:01 - but think of it as like this is your
70:03 - initialization right your functional
70:06 - installation
70:07 - where you initialize everything anything
70:09 - you want goes in here
70:10 - that gets initialized so just as a small
70:12 - explanation there
70:14 - absolutely man awesome i'm glad you put
70:16 - that in and i want to take a quick break
70:17 - here and see
70:18 - what do you guys think about this so far
70:20 - you know is this is this
70:21 - the process of thinking about behavior
70:23 - taking out the constants
70:25 - thinking about the data is this stuff
70:28 - that is helpful for you
70:29 - you know because the biggest thing again
70:31 - we hear all the time is there's if
70:33 - statements for loops while loops but how
70:34 - do we make a program
70:36 - yeah how do we actually do something
70:37 - with this so is this something that you
70:39 - guys you know type in chat here what do
70:40 - you think about this so far
70:42 - yeah they're loving this a lot a lot of
70:43 - people are saying some really nice
70:44 - things
70:45 - people are like one guy aj is like love
70:47 - your teaching style man
70:49 - love your teaching style awesome awesome
70:52 - i'm glad you guys are liking it
70:53 - and if you guys want to learn more about
70:55 - just the real specifics like
70:57 - you know like what is a class and and
70:59 - what is this constructor thing
71:00 - and you know there's a lot of stuff
71:02 - we're not going over again
71:04 - check the link you don't have again just
71:06 - just grab the link we have a little chat
71:08 - thing there
71:08 - talk with somebody they can help you and
71:11 - at the very least you're gonna have an
71:12 - awesome conversation with somebody
71:14 - at the very least and they're gonna
71:15 - point you in the right direction so
71:17 - let's keep going here
71:20 - we have our new snake we have our data
71:22 - defined
71:23 - oh can you still hear me by the way nas
71:25 - yeah i can hear it perfectly
71:27 - okay fantastic crystal clear crystal
71:29 - clear so we have our we have our data
71:31 - defined
71:32 - so what's the final step how how do we
71:34 - finish this whole thing up
71:36 - well we do functions
71:39 - we have functions so
71:42 - now is the exciting part all of our data
71:45 - is fine we have a structure
71:47 - an idea of how this game comes together
71:49 - now we actually do stuff
71:50 - you know now we actually get things to
71:52 - run figure it out you know it's an
71:54 - exciting time
71:55 - we're actually going to figure this out
71:56 - now so the first thing i'm going to say
71:59 - is if you take a look nas at our
72:00 - original project not new snake but snake
72:03 - which should be open and awesome and you
72:05 - look at our main there
72:06 - you see how simple that is yeah it's
72:08 - pretty simple it's like it's like four
72:09 - lines of code
72:11 - exactly and it makes sense right we
72:13 - start a game we run the game and when
72:15 - the game is not running
72:16 - we quit cool i like it it makes sense so
72:18 - that's and that's how we've structured
72:20 - our data so if we go to main here
72:22 - and our new snake instead
72:26 - you're gonna see that we have all of
72:27 - this stuff now i'm gonna leave the
72:28 - comments for everybody so you can check
72:30 - it out
72:31 - but um what are some things we're doing
72:33 - here that we don't need to do anymore
72:34 - well number one we set up a clock and a
72:37 - wormy uh this is the title
72:39 - and a window and all these things i'm on
72:41 - line 47.
72:43 - um i see it now okay perfect okay
72:46 - fantastic
72:47 - so we have all of these things going on
72:49 - here
72:50 - and we do the pie game init well that's
72:52 - handled in our game we already wrote
72:54 - i kind of cheated a little bit and wrote
72:56 - a function right away um
72:58 - but it initializes all these things for
72:59 - us so let's get rid of that
73:01 - we no longer need that now
73:04 - we have okay you know it's erroring
73:06 - because these things don't exist and
73:07 - this is called refactoring
73:09 - um but now let's do this instead right
73:12 - let's create a game loop
73:15 - and let's use this code just we're going
73:17 - to have the same functionality
73:19 - but we're going to put this inside of
73:20 - the game and make our main look just as
73:22 - clean as our other one did
73:23 - god exactly so we're going to copy all
73:26 - this while that true and put inside the
73:28 - game that you want correct
73:29 - yeah exactly so i go to game and now
73:31 - we're going to be working with functions
73:33 - and we have
73:33 - you know the you know you would need
73:35 - some understanding of pi game and things
73:37 - like that
73:38 - but we you know we understand okay this
73:40 - is how pi game works so we're going to
73:41 - make a run function
73:44 - and we're just going to literally put
73:45 - this stuff in here
73:47 - i'm going to fix the indentation and
73:51 - what we should get is and let me fix
73:54 - this up i need to import
73:56 - something called sis
73:59 - fantastic now the final thing here is at
74:01 - the bottom we have a fill
74:03 - a clock and an update
74:06 - so i come into our run
74:10 - and while true we do these things
74:16 - now you're going to see okay it's all
74:17 - red at us why is that well display surf
74:20 - is actually now our screen that we made
74:23 - when we created this object
74:27 - this this works just fine our clock is
74:29 - now our clock object
74:32 - and let's see we have a screen
74:36 - um fantastic
74:40 - and the one thing i forgot that's a
74:41 - little syntax error there
74:43 - okay awesome so now we go into our main
74:47 - and we can get rid of all of this we can
74:49 - get rid of all this this is now handled
74:51 - in our game object
74:52 - sweet nice okay our game is equal
74:57 - to a new game we say
75:03 - game dot run we're gonna quit
75:07 - when everything's done this is also
75:08 - known as sys.exit
75:10 - so we'll just say that and i will delete
75:14 - a little bit of the import statement up
75:16 - here to clean things up
75:17 - and so when you basically initialize a
75:19 - game okay i see it now oh
75:20 - we have so many games now hold on
75:24 - so we have basically when we initialize
75:26 - this game right it's going to call this
75:28 - init that py function which is going to
75:30 - initialize all the things you need for
75:31 - the game
75:32 - and then it looks like michael right
75:34 - here you see he's running the game.run
75:36 - which is going to start running the game
75:38 - which is going to call this
75:39 - function and that's going to be your
75:41 - main game so we can see
75:43 - how we've kind of like took all this
75:45 - code that was inside the main p1 py
75:47 - function
75:48 - divide into different parts and now it's
75:51 - kind of divided up it's nice and clean
75:52 - and it makes sense that's the most
75:54 - important part
75:55 - which makes it easier for you to later
75:57 - on actually go about
75:58 - and run it right basically yes and
76:01 - actually and actually create it
76:03 - and that's and you mentioned on
76:04 - something that's really important and
76:06 - i'll i'll keep it brief for that and
76:08 - what you mentioned on there was that
76:10 - when you come back
76:11 - right when you come back and that's
76:12 - actually really important because people
76:14 - if you're writing code that's important
76:16 - people will come back and so it's
76:18 - important that the code is easy to
76:19 - maintain
76:20 - that it makes sense and it's easy to
76:22 - make changes and that's why we split
76:24 - things up into objects
76:25 - and think about how we structure our
76:27 - program it's just like a house again we
76:29 - think about the blueprint and then we
76:30 - build the house
76:31 - so now if i run this project what you're
76:33 - gonna see is exactly the same thing we
76:35 - had before
76:36 - the only difference is that it's a
76:37 - little bit smaller because we've changed
76:39 - our um uh essentially essentially how
76:44 - this um we're sorry sorry we changed the
76:47 - the size of the screen
76:48 - with our config right with our
76:49 - consonants okay and again we can just
76:51 - stop it
76:52 - just by pressing escape yada yada okay
76:55 - so now let's
76:56 - all we did there was just simply start
76:57 - the game and that was just a white
76:58 - screen okay i see it got it so
77:00 - okay yeah exactly exactly okay
77:03 - so now how do we go from here well the
77:06 - first thing we want to do
77:08 - is and what i like to do is i actually
77:09 - like to save the
77:11 - um i like to save the graphics for last
77:15 - and the way i would usually do this is
77:17 - by using what's called tests we
77:18 - don't have time to go into tests today
77:21 - but tests are a way that you can verify
77:22 - that your code works the way you think
77:24 - it works
77:25 - so i'm gonna have to do a little bit of
77:26 - graphics and code at the same time
77:29 - but i want you to pay attention here uh
77:31 - one thing i do that's very important is
77:33 - that my code that updates my game
77:35 - and changes the data in my game is
77:37 - separate from the code
77:38 - that changes the graphics i change the
77:41 - data in my game
77:43 - and then it takes that data and renders
77:45 - the graphics to the screen
77:46 - they're not tied together they're in
77:48 - fact separate and this is really
77:50 - important got it got it makes sense okay
77:53 - so this makes it easy to add
77:54 - functionality all of these things
77:56 - because they're separate
77:58 - so what's the first thing we can do here
78:00 - um
78:01 - let me take a look so let's let's start
78:05 - let's start by drawing ourselves
78:09 - the start screen okay the start screen
78:12 - so
78:12 - what i'm gonna do here is cheat just a
78:15 - little bit
78:16 - i'm gonna take our game loop here
78:19 - so this is what our run looks like now
78:22 - this is what our run looks like now so
78:24 - i'm gonna take this
78:26 - and put it here and now you can see it
78:29 - looks a little bit different and we're
78:31 - actually making some function calls here
78:32 - so let's go over that
78:34 - um so i'm just fixing the indenting real
78:38 - quick here okay so what's new about this
78:41 - um game loop well let's change this back
78:43 - to run
78:45 - we've run okay so it's the same quit uh
78:49 - well now we see okay when when we press
78:52 - a key
78:53 - instead of handling right here we call a
78:54 - function that handles the key events
78:57 - so this this makes it really easy right
78:59 - because instead of reading all the super
79:01 - long code we say okay if they press a
79:03 - key
79:03 - then we have a function that handles the
79:05 - key events obviously that makes sense
79:07 - right we're going to comment this part
79:09 - out this is our snake update function
79:12 - and then we have a draw function okay
79:14 - and i'm also going to comment out
79:15 - our game over code so what's our draw
79:19 - function
79:19 - well let's make it let's make it our
79:22 - draw function
79:26 - our draw function should draw something
79:29 - to the screen
79:30 - well what do we know happens every
79:32 - single time when we draw the screen
79:33 - number one we want to draw this
79:36 - background color
79:38 - so we don't want it to be white anymore
79:40 - we actually want to fill the screen
79:42 - with a constant that we defined to be
79:44 - the background color
79:45 - right okay we also know that at the end
79:49 - of drawing all of our objects we also
79:52 - want to
79:53 - update the game so we want to update all
79:56 - of the
79:56 - so this update call essentially updates
79:59 - um all of the graphics and things like
80:01 - that
80:01 - so then basically so basically happens
80:04 - that you set you set the data
80:05 - for you set data for for this pi game
80:09 - display
80:10 - but then you're saying okay since i set
80:11 - the data for you now update that data
80:13 - correct is that micro understanding uh
80:15 - pretty
80:16 - pretty close this fills in the
80:17 - background color of the screen
80:19 - so it just does that and then in here
80:22 - we'll draw our snake grid
80:26 - um apple and score got it would that
80:30 - make sense
80:30 - yeah exactly so all of these things will
80:32 - happen here okay
80:33 - so now um
80:38 - but right now if we take a look we just
80:41 - draw
80:41 - okay so we have a draw function and it's
80:43 - actually going to look very similar to
80:44 - what we have before except the
80:46 - background color is going to be
80:47 - different
80:48 - so let's give this a run real quick hold
80:49 - on hold on i'm excited to see this
80:52 - and i think it's background color is
80:53 - actually black is it black
80:56 - yeah it is oh so we can make this yeah
80:59 - there
80:59 - you go and finally we need to
81:03 - implement our handle keys right because
81:05 - we need to be able
81:06 - to um make sure that
81:09 - if they give us a up or a down or
81:11 - anything like that
81:12 - we can exit the game so i'm gonna
81:16 - go here real quick and i have a handle
81:19 - keys
81:19 - function let me find it here
81:23 - and all it's gonna do right is it takes
81:25 - if you take a look here it takes the
81:27 - event
81:28 - and the handle key takes that event and
81:30 - says okay awesome now i can check
81:32 - and see you know what am i supposed to
81:33 - do here
81:35 - what am i supposed to do here it's that
81:37 - simple so
81:38 - we're gonna make there's a whole lot
81:40 - more to this that we'll implement in a
81:41 - second
81:42 - but for now we're just gonna do the
81:43 - basics and we're gonna say that
81:46 - if we press escape we can quit the game
81:50 - okay so again it's a black screen but if
81:54 - i press escape
81:56 - then everything should quit here um
81:58 - let's see here
82:00 - we can screen still display surface
82:04 - quick and that's actually proper
82:05 - um because because that's that's how it
82:08 - errors we when you call sis.exit it does
82:10 - those things but that's okay that's what
82:11 - we want to happen
82:12 - good so we we quit the game all as well
82:17 - fantastic what's the next thing we're
82:19 - going to do well
82:20 - uh let's draw the grid right let's start
82:23 - let's
82:24 - let's get a grid on the screen we can
82:25 - start to see what it's going to look
82:27 - like here
82:27 - how are we going to do that well
82:30 - that's nice is that let me just guess is
82:33 - that inside that knit function do we
82:34 - draw the grid or no
82:35 - or is that inside like a while loop our
82:38 - so our data for our grid exists
82:39 - um it's a combination between our game
82:42 - and our
82:43 - constants so we just need a function
82:45 - that's going to draw lines based off
82:47 - that data
82:48 - so actually all we need to do is put a
82:51 - function call and we'll call it draw
82:52 - grid
82:53 - in our draw function okay cool i want
82:55 - you i want you guys to pay attention to
82:57 - something that's really powerful that's
82:58 - happened here it's really sneaky
83:00 - it's hard to see especially if you
83:02 - haven't been programming a lot and you
83:04 - haven't dealt with this frustration
83:06 - what we have set up here is essentially
83:10 - um code that is really really easy
83:13 - to improve upon we have two main things
83:16 - we do right
83:17 - we have our game loop everything's set
83:19 - up so let me go ahead and
83:20 - let me go ahead and fix up
83:24 - this and i'll add in so i added the
83:26 - snake update
83:28 - and the game over so this again this is
83:31 - our game loop
83:32 - this is handling our key events this is
83:34 - updating the snake
83:36 - drawing everything that's the grid
83:38 - that's
83:39 - um that's everything essentially and
83:41 - then
83:42 - we check if the game's over now there is
83:44 - one final thing below this
83:45 - where we will display the game over this
83:48 - actually goes in the game loop
83:50 - but what we've done is we've set up the
83:54 - architecture here so
83:55 - it becomes so easy to add features and i
83:57 - want to explain
83:58 - how easy it is check this out guys so
84:01 - i'm going to add a function
84:03 - i'm i'm not going to go over exactly how
84:05 - it works um
84:07 - because it's really simple this is our
84:08 - function that draws the grid
84:10 - that's all it does it doesn't create any
84:12 - new data it just draws more things to
84:14 - the screen
84:16 - so i'm going to go here okay
84:20 - okay fantastic okay awesome i'm going to
84:23 - fix up this indentation
84:25 - because i just have a mismatch with the
84:26 - indentation here
84:28 - i think you need to put one one more
84:29 - left the line no
84:32 - for definition like the function
84:36 - death uh yes thank you yeah yeah
84:40 - fantastic okay there you go python for
84:41 - those of you that don't know is really
84:43 - white space and
84:44 - white space is important so if you mess
84:45 - those things up it can become a problem
84:47 - yeah um okay so
84:51 - what what are we doing here well we have
84:53 - an x in a range
84:54 - it's between zero and the width uh and
84:56 - we jump cell size
84:58 - okay what does that all mean we start at
84:59 - zero we're going to the end of the
85:01 - screen
85:02 - and we're jumping in increments of 20
85:04 - essentially
85:05 - so every 20 pixels we're going to draw a
85:07 - line straight down
85:08 - and then the y does the same thing we
85:11 - start at the top we jump 20 pixels down
85:13 - for the entire screen and we draw a line
85:15 - horizontally i see
85:16 - okay and very simple and guys and the
85:19 - cell size is just to get back to that
85:21 - the cell size right here right
85:23 - that comes from where that comes from
85:24 - the config where we got the cell size
85:27 - right we literally got okay here
85:28 - you know obviously if you want to get
85:30 - equals equal width
85:32 - of like lines what do you do i mean
85:34 - basic math right
85:35 - let's say it's 20 right 20 right that's
85:38 - that's that's
85:38 - 20. and then let's say you want how many
85:40 - how many do we want uh
85:42 - cells let's say you want 10 cells or 10
85:45 - vertical lines right 20 divided by 10
85:48 - right divided by 10 that gives you well
85:51 - that's actually just two
85:52 - but that gives just simply two cells but
85:55 - let's say
85:56 - let's say the cell width is two you do
85:58 - 20 divided by two that gives you 10
86:00 - 10 cell widths and then that way you
86:02 - know the width of the cell width right
86:04 - here
86:04 - and that's how that's how we know that
86:06 - but yeah anyways exactly so we have all
86:08 - the data available to us
86:10 - everything's set up we're ready to rock
86:12 - and roll so how do i make this how do i
86:14 - draw this
86:14 - it is so simple it's it's incredible how
86:17 - simple it is
86:18 - this function draws the grid right well
86:21 - i wish we had a function that drew
86:22 - everything we need in our game
86:24 - as a matter of fact i wish as well
86:28 - here we go draw a grid now i need to
86:30 - preface this with self
86:32 - okay and if i run this what are we going
86:35 - to see
86:36 - let's see here snake object oh and
86:38 - that's because i uncommented this so
86:40 - this i got a little too excited in the
86:41 - future here
86:42 - wait wait wait wait wait oh the key is
86:44 - game over okay yeah i'm just commenting
86:46 - out our update
86:47 - function so we're just drawing the grid
86:48 - right now okay
86:50 - and what we're gonna see here is matter
86:52 - of fact
86:53 - a grid now this is hard to see um
86:56 - this has something to do with rebel in
86:58 - the background here in rebel
87:00 - fortunately it's a little bit difficult
87:02 - to share my my code here
87:04 - but this displays in a window and we get
87:07 - this grid
87:08 - so this is the start of of our grid we
87:11 - have our grid now
87:13 - yeah now we need to store it you guys
87:15 - might not be able to see this but it's
87:16 - right here you guys should be able to
87:17 - see right there
87:18 - i'm gonna highlight right there you guys
87:19 - see that right there yeah you guys can
87:20 - see the lines right there as well
87:22 - that is pretty dang cool like hi guys
87:24 - how cool is that like drop that in the
87:26 - comment below
87:27 - you just drew a grid with python that my
87:30 - friends
87:31 - is pretty much pretty epic so yeah drop
87:33 - in the comments below give us some hype
87:34 - out here
87:35 - because we're doing some cool stuff
87:37 - michael's doing some cool stuff out here
87:38 - and it's teaching you
87:40 - amazing knowledge all right now here's
87:42 - what's really cool guys
87:44 - i think you're really gonna enjoy this
87:45 - because what you're going to see happen
87:47 - is up until now right it's like oh my
87:50 - god all this time and all we have is a
87:52 - grid it can kind of feel like that
87:54 - but things are going to pick up really
87:55 - really fast and you're going to see
87:57 - because of how we structured our code it
88:00 - kind of takes a little bit to get
88:01 - started but once we get started
88:03 - everything has been set up so easy for
88:05 - us it's it feels like plug and play
88:07 - it's really easy i love it so okay
88:11 - so we have here now um a grid
88:14 - and by the way for you guys this is this
88:16 - is one of the examples of how easy it is
88:18 - right
88:18 - this is kind of hard to see well we we
88:21 - have a white color
88:22 - and we know exactly how to get to that
88:24 - that's a constant we defined
88:26 - run this again well what what did you
88:29 - just change oh you changed this you
88:30 - changed the config that white correct
88:32 - that's it
88:32 - that's it nice oh look at that white red
88:36 - oh that is fancy man all right i like it
88:41 - absolutely man now again we're having
88:43 - some weird issues here with the windows
88:45 - and this is due to rebel.it
88:47 - but um this would display in a window
88:50 - normally okay fantastic
88:52 - so we have this going everything's going
88:55 - well fantastic
88:56 - and we can quit out this just by
88:57 - pressing escape all as well
88:59 - so now um let me undo that and change it
89:02 - back to dark gray
89:03 - so that you guys can when we end up
89:05 - you're going to have the same code that
89:06 - we did
89:07 - [Music]
89:09 - now what do we do well i've i wanted to
89:11 - draw a grid because
89:12 - you know i wanted something exciting for
89:14 - you guys you know we're getting
89:15 - somewhere we're going to take a step
89:16 - back one more time
89:17 - and think about this data uh and how to
89:20 - write the functions for it and then
89:22 - it's as simple as drawing them to the
89:24 - screen
89:25 - so what is a snake we're going to jump
89:27 - into the snake file
89:28 - and we need to think about how does the
89:30 - snake because we need to update the
89:31 - snake every single time right right
89:34 - so we're going to think about okay how
89:36 - does the snake um
89:38 - how does the snake update how does the
89:40 - snake update
89:41 - well what the snake does and this is how
89:44 - we're gonna move our snake right
89:45 - first of all we defined our data really
89:47 - well our snake is a bunch of blocks
89:50 - so how could we move our snake and get
89:52 - that behavior that we're getting where
89:54 - when it turns right it doesn't rotate
89:56 - but instead it kind of trails its body
89:58 - right well if we have a bunch of blocks
90:01 - we can move the snake by deleting the
90:04 - block on the back
90:05 - and then adding a new block on front
90:07 - right so it'd be like this essentially
90:09 - so it like starts like this
90:11 - and you just kind of hop scotch away
90:13 - okay that makes sense
90:14 - okay now what if i turn a corner well we
90:16 - know we would need to put a block above
90:18 - so let's say it's going left i think
90:19 - this is left for you guys it might be
90:21 - right for you i'm not sure
90:22 - so let's say we're going this direction
90:24 - and then we want to go up
90:25 - so instead of putting a block here we
90:27 - would put a block here right and delete
90:29 - block here the y plus one basically so y
90:31 - plus one would go like
90:32 - the next one will be y plus one got it
90:34 - okay exact coordinates okay so okay
90:36 - well if you think about it like that and
90:38 - now you're going up right you would
90:40 - you would take a block here add a block
90:41 - here take a block here add a block here
90:44 - well that actually that fixes that
90:46 - solves our problem right there
90:47 - that is the trailing behavior so we have
90:50 - this
90:50 - line of 20 blocks that's this really
90:53 - long snake
90:54 - and we go down one it's gonna go down
90:56 - one and take a block off the very end
90:58 - essentially and put it there then takes
91:01 - a block at the very end and puts it
91:02 - there
91:02 - you can see how that is how instead of
91:05 - rotating this line
91:06 - we get the trailing behavior and this
91:09 - was easy to do
91:10 - because i thought about the data how do
91:12 - we represent our data
91:14 - okay
91:17 - okay i got it now so basically what
91:19 - you're doing is you break you take it
91:20 - from the back you put the front instead
91:22 - of trying to take the front
91:24 - and turn it yes exactly there's no lines
91:27 - or rotations okay hold on actually we
91:29 - can draw this up check this out
91:30 - this is interesting okay so check this
91:32 - out guys i think this is brilliant just
91:33 - in terms of visually
91:34 - so i'm gonna put this up on the screen
91:36 - so like if you think about if you think
91:37 - about the snake right and you think
91:39 - about
91:39 - like like this is part one right and you
91:42 - think these are all blocks
91:43 - you guys can see oh actually hold on you
91:45 - guys now you guys can see what i see
91:46 - right there
91:46 - these are all blocks right there boom
91:49 - boom think of this as a snake
91:51 - okay now what happens when you want to
91:54 - turn it
91:55 - so let me do one more yeah so these are
91:58 - all blocks right these are all just you
92:00 - know x by coordinate blocks
92:01 - what happens if you want to turn let's
92:02 - say you want to take this dick take this
92:04 - snake and turn it down
92:05 - right let's say we want to turn it down
92:07 - well what we can do is that and just
92:10 - make it let me make sure that i'm
92:11 - explaining this right
92:13 - because i'm just a student here right
92:14 - just kind of trying to understand what's
92:16 - going on here
92:17 - right what's gonna happen is like this
92:19 - block
92:20 - is actually gonna the block on the end
92:22 - is gonna be taken
92:24 - let me let me point from here the block
92:27 - on this end is going to be taken
92:29 - and put down to here
92:33 - right so if i now do this for example
92:37 - if i now do this right
92:40 - it's gonna go down to here which is
92:42 - gonna bring it
92:43 - over here right then the next block is
92:46 - gonna go
92:47 - down from here and gonna go
92:50 - up to there yep right we're just gonna
92:54 - go like that right
92:57 - and it keeps going and going and going
93:00 - ah
93:01 - this is it yeah and so this kind of this
93:03 - can seem kind of complicated right it's
93:05 - like okay
93:05 - how do we do this in the code well let's
93:07 - look at our data how do we do our data
93:09 - it's a list of blocks
93:10 - so all we need to do it's actually
93:12 - really simple we delete the last block
93:15 - and append a new block to the very front
93:18 - of it
93:18 - that is in the direction we want to go
93:20 - whether it's forward up
93:22 - down left or right so we take a look
93:25 - here
93:26 - and i'm going to grab the update
93:29 - function snake
93:30 - from our game and put it in so you guys
93:32 - can take a look
93:34 - and we're going to talk we're going to
93:35 - go over the function briefly here and
93:36 - then
93:37 - move on to the rest of the game we have
93:42 - can you see me in our snake file i can
93:44 - okay
93:45 - awesome
93:49 - here we are okay so what's going on here
93:51 - so let's let's take a look at this here
93:52 - first
93:53 - so we say we say this is the direction
93:57 - it checks the direction right it has a
93:59 - direction and if it's going up
94:01 - this is where that we make a new head
94:03 - and the new head
94:04 - is is an x and y and it's either you
94:08 - know if we're going up
94:09 - right again y gets smaller as you go up
94:11 - so we do
94:12 - y minus one for going down we do y plus
94:15 - one
94:15 - if we're going left it's x minus one and
94:18 - if we're going right it's x plus one
94:21 - then we insert so this puts it at the
94:24 - right spot
94:25 - a new head so this this adds the new
94:27 - head okay
94:28 - so what's happening here at the
94:29 - beginning well there are some sorry my
94:32 - my rebels refreshing one moment that's
94:34 - fine okay there are some
94:35 - there are some cases where you know what
94:38 - if we're growing
94:39 - um what do we do there so what we're
94:42 - saying
94:43 - is we have a check here and we say if
94:45 - the x and y
94:46 - coordinates a ju not of the body but of
94:49 - the head
94:50 - of our snake is equal to the apple
94:54 - so apple if the x is equal to apple x
94:57 - and the y is equal to apple y
95:00 - that means we found an apple so normally
95:04 - you know how normally what we're doing
95:05 - is we're deleting the last block that's
95:07 - how we move
95:09 - which is handled here right well instead
95:11 - of deleting we don't want to delete we
95:13 - actually
95:14 - want to add a new block so it grows one
95:17 - so we don't delete and we set apple to a
95:20 - new location
95:21 - got it okay makes sense so because
95:23 - because snake and apple have this
95:25 - relationship
95:26 - when i call snake dot update it actually
95:28 - takes an apple
95:29 - i see i see you see interesting okay
95:32 - well i might look at my look it looks
95:34 - like my code is refreshing as well
95:35 - and i'm gonna paste in i'm not pasting
95:37 - guys for those of you who are asking i'm
95:38 - gonna paste in the code right now
95:40 - so you guys can like go along with us
95:43 - i'm gonna paste it a few times so you
95:44 - guys can see it
95:45 - but yeah yeah oh yeah that ripple link
95:47 - definitely do
95:48 - it's actually just the michael slick new
95:50 - snake uh just without the hashtag there
95:53 - and that if you just copy and paste that
95:54 - in that they can use that to cop
95:56 - to follow along with us beautiful so i
95:58 - just place it in beautiful
96:00 - awesome okay so now
96:03 - again if i come back to the game so our
96:05 - snake is done actually
96:07 - the entirety of our snake is done it's
96:09 - not being drawn yet
96:11 - but it does exist okay um so
96:14 - now we need to check is the game over
96:16 - and there's this one's really easy too
96:18 - we're gonna go into our config
96:21 - and we're going to let's see or not our
96:25 - config my bad
96:26 - we're going to create a function called
96:28 - is game over inside
96:29 - the py right what's that inside that
96:32 - game.py
96:33 - yes exactly so this function
96:36 - exists right here i just put it in
96:39 - and what does this do well this function
96:42 - now this is a big if statement and again
96:44 - i love some other time we can go over
96:46 - refactoring and making code really clean
96:48 - and easy to read and run more
96:49 - efficiently
96:50 - but what do we check well we're just
96:52 - checking first of all
96:53 - this is saying did we go past the game
96:56 - board so this is checking if the x and y
96:58 - coordinates
96:59 - are um less than the width or greater
97:03 - than the maximum width
97:04 - and then same with the y did it go over
97:06 - the top negative one
97:08 - or did it go um past the bottom
97:11 - then we call something called reset game
97:14 - which we'll talk about in a second um
97:17 - otherwise uh did the snake hit
97:20 - itself and that's another thing here so
97:23 - did the snake hit itself so those are
97:24 - our two conditions
97:26 - those are our two conditions these are
97:27 - big reasons this is a big effect so
97:29 - that so this if basically checks if like
97:31 - the snake that had
97:32 - right is if biscuit if you think about
97:35 - the front of the snake
97:36 - is outside of the actual coordinate so
97:39 - it has a negative one coordinate right
97:41 - so that's part one or this the space
97:44 - that
97:44 - equals the basically the right side or
97:47 - him
97:48 - i think this right wait no shoot wait
97:51 - no essentially essentially we just check
97:53 - the x and y
97:54 - of the snakehead and we make sure it's
97:56 - not outside of the screen got it got it
97:58 - got it through here
97:59 - got it makes sense okay and then i have
98:02 - a little helper function called reset
98:03 - game what does it do
98:04 - it actually deletes the snake in the
98:06 - apple makes a new snake in apple and
98:08 - returns true every time
98:10 - cool cool okay so this is all it does
98:13 - this is all it does now we have a snake
98:15 - and it's been and
98:16 - it's been updated so i what i want you
98:18 - guys to see here something interesting
98:19 - is going to happen
98:20 - you're not going to see a snake but the
98:22 - game will end
98:24 - so i'm going to press play here let's
98:26 - see it
98:27 - and it's loading it's getting everything
98:29 - started all right cool
98:30 - i'm excited starting x still working
98:33 - still working
98:34 - here's our awesome now we're getting a
98:36 - screen finally
98:38 - so what you're going to see is at the
98:39 - see how it went black yeah
98:41 - why did it do that do you guys have any
98:43 - ideas why i did that
98:44 - drop that in the comment below guys why
98:46 - do you think it did actually let me get
98:48 - let me let me take a guess hold on
98:50 - yeah drop that in the comment below it's
98:51 - a good question it's a little sneaky it
98:53 - has to do with the way that we
98:55 - approached the code
98:56 - so you're saying so you're saying that
98:58 - it ended right away
99:00 - well actually not right away it ended it
99:03 - took a little bit but it did end
99:06 - well is it because we need to we need to
99:07 - want to find where the snake
99:09 - starts because when the snake starts it
99:12 - is outside the bounding box
99:14 - right away uh i'll give you one more
99:16 - hint it's not a bug
99:18 - it's actually good behavior
99:23 - so let me see if there's any guesses
99:24 - here yourself that is game over on so
99:27 - if self that is game over
99:34 - okay the game over the snake went right
99:37 - yes
99:37 - actually someone got it know it with
99:39 - radhe i don't know i'm sure i butchered
99:41 - that
99:41 - okay but we we designed the
99:45 - data of our game first right so we
99:48 - what we have here is an actual
99:50 - functioning data representation of our
99:52 - snake so this snake is moving right
99:56 - right now it starts moving right that's
99:58 - the the initial state that's how we
99:59 - coded it
100:00 - it starts by moving right so while we're
100:03 - not drawing the snake to the screen
100:05 - the data that represents the snake is
100:08 - moving right
100:08 - and went off screen i see it so enough
100:11 - right
100:11 - off the screen right away got it yeah
100:14 - okay exactly
100:16 - exactly interesting so what we can see
100:18 - is oh our game is actually working
100:20 - this is really cool now what's you know
100:22 - it would be more tantalizing if we had
100:24 - some graphics and we're going to get
100:25 - that real soon here
100:26 - but our game is working so one thing i'm
100:29 - going to add now that we're missing
100:32 - is i'm going to our handle our handle uh
100:35 - key
100:36 - button actually you know what we'll do
100:37 - that in a second no problem we have a
100:39 - snake
100:39 - we have an is game over what would be
100:42 - cool to add
100:43 - well why don't we uh let's draw the
100:46 - snake
100:46 - i want to be able to see the snake i
100:48 - think most people want to be able to see
100:49 - this thing
100:50 - see the snake see the snake
100:54 - starts chanting let's
100:57 - drop us on fire if you guys want to see
100:58 - the snake there we go
101:02 - okay man we're going to see the snake so
101:04 - let's go to the draw
101:06 - we have a draw grid and underneath draw
101:08 - grid on line 24.
101:10 - now make sure that i'm following you
101:11 - hold on absolutely okay i see
101:13 - i see fantastic this is our draw worm
101:16 - function
101:17 - again what you're going to notice here
101:19 - is that there's no logic in it
101:21 - it doesn't do any logic all it does is
101:24 - take
101:25 - uh what it needs to take and draw
101:28 - graphics based off that okay so how does
101:30 - it work we have an x and a y coordinate
101:33 - so these would what these x and y really
101:36 - represent is the pixels where we want to
101:38 - draw right the starting of the
101:40 - the starting of it i'm going to try not
101:41 - to go too much detail but i kind of
101:43 - can't help it i like to nerd over this
101:45 - stuff yeah there you go
101:46 - so so we have the x and the y and we
101:49 - have a cell size right which is 20.
101:51 - so we're gonna say okay if the x is at
101:53 - two it's not at the second pixel
101:55 - it's at the start of the second cell
101:58 - which would be two times 20. so 40
102:00 - pixels over because we're working with
102:01 - pixels here
102:03 - and the same with the y so okay this is
102:04 - the x and y coordinates and then it's
102:06 - offset by the cell size
102:08 - then we have a segment so this is a
102:10 - rectangle
102:12 - we and by the way this is in a for loop
102:14 - if you guys didn't notice that it's for
102:15 - every coordinate
102:16 - in the snake and the in the coordinates
102:19 - right so this does it for every block
102:21 - so we get the x and y we make a
102:23 - rectangle so using pygame.rect so we
102:26 - make a rectangle starting at x and y
102:29 - and of what size well our constant cell
102:31 - size
102:33 - okay then we draw the rectangle so we
102:36 - draw the rectangle onto the screen
102:38 - we're going to say it's dark green and
102:40 - what do we draw we have to specify
102:42 - the worm segment rectangle i see
102:45 - so check this out so like what i'm
102:47 - drawing now so i'm saying x plus
102:49 - uh 20 and then comma y plus
102:53 - 20 right exactly right there so if you
102:56 - guys can
102:56 - specify the top left corner and then we
102:59 - specify the width and the height
103:00 - exactly so if you specify the x and y
103:02 - coordinate right that's your beginning
103:03 - coordinate right that's your top
103:04 - left right and then you guys can
103:06 - literally and then that's
103:08 - that's how you say the cell size and the
103:09 - cell config because if you do plus 20
103:11 - y20
103:12 - that brings it down to here which is
103:14 - basically makes a rectangle
103:16 - right away right nice interesting okay i
103:19 - like that
103:20 - absolutely and that's just how pi game
103:22 - works got it so
103:24 - uh then we draw the rectangle we specify
103:26 - what we're drawing on the screen
103:28 - the color and then you know what we're
103:30 - drawing okay then
103:31 - and this is this is just a graphics
103:33 - thing this isn't a functional thing
103:35 - again these are all graphics
103:36 - we have this inner segment and what it
103:38 - is is it's a smaller
103:40 - inner um uh a smaller inner
103:43 - uh rectangle that's being drawn so you
103:45 - can see it's offset by
103:47 - four in both directions so there's four
103:49 - pixels around the side
103:51 - um and then this is the math here you
103:53 - have to do eight actually because it's
103:54 - four on each side blah blah blah
103:56 - but it just draws a brighter green
103:57 - circle and this just makes the snake a
103:59 - little more visually appealing
104:00 - got it uh got it but this is what it
104:02 - does this is our draw worm function
104:04 - we have our data we have our constants
104:07 - we know how everything works
104:09 - how do we draw this how do we draw this
104:11 - do you guys have any guesses
104:12 - how do i drop a comment below how do we
104:15 - draw it guys i'm sure you guys know i'll
104:16 - show you guys how to draw it
104:18 - well i mean can i take a guess yeah
104:21 - absolutely
104:22 - we call it function we call the function
104:25 - you're right
104:26 - now where would we call the function you
104:28 - know if only we had a function
104:30 - that was in charge of drawing the game
104:35 - [Music]
104:39 - interesting can you guys see how it
104:42 - almost becomes plug and play here
104:45 - we draw worm and what we're gonna see
104:48 - guys is we have
104:49 - we're gonna get a worm it's gonna be
104:51 - wild we're gonna have no control over it
104:53 - but there it is and there it went
104:56 - we're ready to go wait i'll run it again
104:59 - because the game over
105:00 - right oh oh okay
105:04 - nice nice is that that wait that okay so
105:06 - now we have the warm where's the apple
105:08 - though
105:09 - no apple yet right now yeah okay
105:12 - interesting let's draw an apple
105:13 - let's draw an apple and we'll do this
105:15 - one you know this one's really simple
105:17 - apple's the simplest object we have in
105:18 - the game
105:19 - i'm gonna draw this with you i'm gonna
105:21 - work on this with you guys
105:22 - so that we can do it okay so
105:26 - we need to draw the apple right and it
105:28 - needs to have a location so we're
105:30 - drawing a rectangle
105:31 - so number one we need x and y star
105:34 - coordinates
105:35 - so this is going to follow a very simple
105:37 - thing here we have an apple
105:39 - and it has an x and we need to get the
105:42 - the coordinates right so it x can be up
105:46 - to
105:46 - its you know the width divided by cell
105:48 - size so that might be
105:50 - um 24 let's say but obviously we don't
105:53 - want an apple drawn on the 24th pixel
105:55 - we want it drawn on um
105:59 - it's it's x coordinate times the width
106:02 - of each cell right because we start at
106:03 - zero
106:04 - then we go 20 40 60 80 same with y
106:07 - so we multiply by dot config dot cell
106:10 - size
106:12 - and we're gonna do the same for y
106:13 - there's no difference there
106:19 - okay so we have our x and y coordinates
106:21 - now they're green because i haven't used
106:23 - them yet
106:24 - um and this is called linting but we
106:26 - don't need to you know we won't worry
106:27 - about that yet
106:28 - okay but now before we draw guys from
106:30 - what you've seen
106:31 - in terms of draw warm drop in the
106:34 - comments below what do you think it's
106:36 - going to
106:36 - take to draw an apple like what function
106:38 - do you guys think will use
106:40 - to draw an apple i mean you've seen this
106:42 - right you've seen this with
106:44 - draw warm now i want to test you
106:47 - drop that in the comment what are we
106:48 - going to use for the draw apple
106:50 - we're going to give you five seconds
106:52 - five four
106:53 - three two one let's go
106:56 - perfect perfect and just a little hint
106:59 - for you too if you
107:00 - can squeeze it in there think about the
107:03 - behavior here
107:04 - what does an apple look like well an
107:06 - apple
107:07 - in our game if you remember what it
107:08 - looks like is a red square
107:10 - that's a behavior question and that
107:13 - trickles down right that
107:14 - as you can see it trickles down to our
107:16 - function because now it's like okay
107:18 - well i don't know how do i draw an apple
107:20 - like is it going to be a a cool shaped
107:22 - apple
107:23 - is it going to be a red square what is
107:24 - it so you can see how this all trickles
107:26 - down
107:27 - so now okay we're drawing a red square
107:30 - well have we drawn a square before
107:34 - i think so i think we have
107:37 - i think so the one right here yeah
107:39 - absolutely
107:40 - yes we have we have drawn a square hold
107:43 - on
107:43 - can i can i can i actually try it can i
107:45 - actually try it yeah absolutely go for
107:46 - it man all right so let's try
107:48 - i want to go with you so i'm going to
107:49 - say we're going to say this is going to
107:51 - be
107:52 - okay so apple apple segment
107:56 - sure apple segments equals right pi
108:00 - and this might be better this is
108:01 - nitpicky this might be better as wrecked
108:03 - because this is a worm sec apple apple
108:07 - segment wrecked okay or just wrecked
108:10 - okay apple rack that's fine okay and
108:12 - then we say
108:13 - pie game pie game dot wrecked
108:18 - right wrecked and then we pass in right
108:22 - we'll be passing we pass in the
108:23 - beginning coordinate which is that top
108:24 - left coordinate which we think
108:26 - which is self.apple.x
108:31 - dot apple.x right uh close to it that
108:35 - would be
108:35 - just 0 through 20 or something like that
108:38 - okay so
108:39 - we need to offset by the cell size okay
108:43 - right so
108:46 - but okay so so we have the beginning
108:48 - section which is the top left corner
108:50 - right and we're drawing a rectangle
108:52 - right so oh i see okay i see so then
108:56 - self
108:56 - okay so i see it now so self that
109:00 - makes sense so cell it's actually it's
109:02 - just simply going to be x
109:04 - y comma
109:08 - cell size so i'm guessing that this
109:11 - right here is simply basically the
109:12 - amount of cell sizes you want to shift
109:14 - to the
109:15 - oh okay yeah it's the width it's the
109:17 - actual width
109:18 - we have a start point and a width and a
109:20 - height so config
109:21 - that cell size
109:26 - config config dot
109:30 - well cell size again yeah it's a square
109:33 - okay it's a square all right interesting
109:38 - so if we save that that's
109:41 - that's pretty much good right well we
109:43 - have the rectangle
109:44 - now this is just implementation
109:46 - specifics of pie game
109:49 - so uh we have the rectangle but what we
109:51 - actually haven't done
109:52 - is drawn the rectangle right okay so
109:55 - that's where we have to go like okay
109:56 - that's where we have the pie game.draw
109:57 - okay i got this i got this i got this
109:59 - again i got this okay
110:00 - yeah i got this so we say ply game dot
110:03 - draw dot wrecked right
110:07 - and we specify so you obviously have to
110:08 - give it um a screen
110:10 - the screen that you want to draw on so
110:11 - self dot screen
110:13 - all right self dot screen
110:17 - comma obviously i'm guessing in the the
110:20 - color right so
110:21 - the color is going to be red this time
110:22 - so config dot
110:25 - what was it and if you do control space
110:26 - it might help uh do the auto complete
110:28 - for you
110:29 - will it okay let's see right where was
110:30 - it hold on damn it back hold on
110:32 - uh game on line 42
110:36 - okay control space what
110:39 - oh wow okay it does config that
110:43 - what is it and for us it would be
110:47 - well actually it's really easy it's red
110:49 - all caps oh okay just
110:50 - red okay i like that i like that i like
110:52 - that okay red
110:53 - and then the actual rectangle which is
110:55 - gonna be apple
110:57 - wrecked like that nice
111:01 - okay i love it okay is that pretty much
111:04 - it at this point
111:05 - that's it man we drew we made our apple
111:08 - rectangle we drew it to the screen
111:10 - but now there's missing one thing and
111:14 - the only thing that's missing is that
111:16 - nobody's calling this function
111:17 - true so where do we put that drop in the
111:20 - comment below you guys should know this
111:21 - come on you guys show us by now
111:23 - come on drop in the comment below what
111:26 - are you even doing out here
111:29 - what are you even doing out here but
111:32 - yeah i'm i'm sure
111:32 - we're gonna give you five seconds guys
111:34 - five four three two one
111:36 - where do we put that in and the answer
111:39 - is the draw function
111:40 - draw function we draw apple okay let's
111:43 - try
111:45 - give it a run here there's the apple
111:47 - hold down the game ends
111:49 - wait wait wait wait wait wait wait wait
111:50 - wait wait wait wait wait wait wait why
111:50 - are they getting man why do the games
111:51 - end uh because it
111:53 - it remember we can't turn it yet and it
111:55 - goes
111:56 - yeah okay okay okay make sense so now
111:58 - let's think about this right
112:00 - we we want to be able to change it right
112:02 - that was part of our behavior it's a
112:03 - very fundamental behavior of our game
112:05 - okay so let's think about our data again
112:08 - how is our data structure how does this
112:10 - work well
112:12 - our our uh snake has a direction
112:15 - so it and we have a function that
112:17 - handles all of our keys 53 to 55
112:19 - is the lines so okay how do we do this
112:22 - well i'll show you how we do it oh this
112:25 - is how we do it
112:26 - what is it well it's very simple is the
112:29 - key equal to left
112:31 - or and then this is a d w s so is it
112:34 - equal to left
112:35 - right up or down what do we do we set
112:38 - the snake's direction
112:39 - equal to left right
112:43 - up or down and now here's what's cool
112:46 - guys i want you to see this this is
112:48 - really neat
112:49 - i'm gonna run the game
112:52 - and right off the bat oh it's because i
112:55 - wasn't typing in the right
112:56 - spot oh look at that guys
112:59 - whoa that's cool now here's what's
113:02 - really cool
113:03 - you remember how things kind of started
113:05 - working um even when there wasn't
113:06 - graphics and things like that
113:09 - like for example i would run the game
113:11 - and the game quit and that was actually
113:12 - a good thing it should have because the
113:14 - snake went off screen
113:15 - yeah yeah well do you guys think that
113:18 - this apple's going to work or no
113:20 - okay hold on let me see hold on hold on
113:24 - no well
113:27 - in fact it does oh dang
113:31 - why is that because we took so much time
113:35 - thinking about how our data works right
113:37 - now where does this happen
113:38 - and i'm going to let it go off screen
113:40 - and the game ends nice um
113:42 - where does this happen we go to snake
113:45 - and we check
113:46 - our update function lines 21 to 24
113:48 - inside of our snake dot pi
113:51 - well we we're either doing two things
113:53 - every single time we update
113:55 - we either delete uh one of the blocks
113:58 - because that's how we move
113:59 - or when it gets a new apple
114:02 - we instead just add a new apple location
114:06 - i
114:15 - instead we're only a pending one and it
114:17 - grows it by one
114:19 - yeah i see and you see guys the whole
114:21 - self the up
114:22 - right that's why because that's why you
114:24 - know the whole thing of like when you
114:26 - click
114:27 - that's how the whole configuration when
114:28 - you click up click down and click left
114:30 - and right
114:31 - right you set the snake direction to
114:33 - snake that up because
114:34 - inside the snake dot p y what do we do
114:38 - we check that right right we check this
114:41 - you know what's direction and based on
114:42 - that that's where we change the
114:44 - coordinates
114:45 - interesting i like that okay
114:48 - awesome so now we have this working we
114:51 - actually grow
114:52 - um what do we have left here well
114:54 - there's actually one more display
114:55 - function let's do that real quick and
114:57 - it's the score
114:58 - and uh what's really nice about the
115:00 - score is that it's really simple to work
115:02 - with
115:03 - it's very simple data all we're doing
115:06 - the score
115:06 - right is actually the length of our is
115:09 - the length of our snake
115:11 - minus three because we start with three
115:13 - blocks
115:14 - so the score is our length of our snake
115:17 - okay and then
115:18 - and and this is just pie game specific
115:20 - behavior let me find the function so i
115:22 - can demonstrate it to you guys
115:24 - um draw score here we are again this is
115:28 - just python
115:29 - or pi game specific behavior so i
115:31 - wouldn't expect
115:32 - and i'm just now in the game uh nas i'm
115:34 - going to be online
115:36 - let me find it here 42 right underneath
115:39 - draw apple
115:40 - i see it okay coco cool awesome so
115:43 - what does this do well it's simply
115:47 - um it simply takes
115:50 - the length of the worm and
115:53 - subtracts three and then this is all the
115:56 - drawing stuff
115:57 - now i said this a thousand times and i
115:59 - didn't follow this rule do you guys know
116:01 - what i did wrong here
116:03 - i don't expect you to so i'm just gonna
116:05 - go for it i
116:06 - put data specific i'm calculating the
116:10 - score
116:10 - inside of a draw function this is bad
116:13 - this is bad
116:14 - that's a lot it's a lot of calculations
116:16 - right well not
116:17 - and maybe not performance wise but it's
116:19 - bad from an architecture standpoint
116:22 - because this draw function should do one
116:24 - thing and one thing only
116:26 - it should draw so instead i'm going to
116:29 - say that this draw score takes a score
116:32 - and when i call it self
116:35 - dot draw score which is where
116:39 - uh inside of the draw function okay
116:43 - uh oh is it updating for you or no got
116:45 - it got it yeah i said no okay good
116:48 - so now the draw score function just
116:50 - takes a score and that's all it has to
116:52 - do
116:53 - and now if i want to change the way my
116:54 - score is calculated or things like that
116:56 - i do that elsewhere right awesome so now
116:59 - let's run the game again
117:00 - and what we're going to see is that we
117:02 - have a score in the top right
117:04 - oh nice okay i love that hold on give it
117:07 - a plus
117:08 - yeah yeah man and this is it so as you
117:12 - can see our game is getting
117:13 - uh much closer i must have ran into
117:15 - myself there
117:16 - yeah um so let's see what do we have
117:20 - left what do we have left
117:21 - the end game the end game yeah we need
117:24 - we need to be able to continue to play
117:25 - this game
117:26 - and we also need to be able to we want
117:29 - to start screen
117:30 - we want to start screen okay so let's
117:32 - think about this
117:33 - um we kind of have two things right we
117:35 - have a start screen that starts up the
117:37 - game
117:37 - and that's done one time and then until
117:40 - they press the escape key or click on
117:42 - the x on the window
117:44 - we're gonna continually start a game and
117:46 - um
117:48 - and and do that game until game over and
117:50 - then when a game over happens we just
117:52 - press a button and we want it to go back
117:54 - right
117:54 - got it so this is what we could call our
117:57 - game loop
117:58 - so i'm going to change the name of run
118:00 - to game
118:02 - okay now what i'm going to introduce
118:06 - is i'm going to redefine run so here's
118:08 - run again
118:10 - but how is this going to work well for
118:12 - now i'll just say while true
118:15 - game loop now why do i do this well
118:17 - because
118:18 - when the game is over it breaks right
118:20 - and this game loop ends
118:23 - so we say self dot game loop self dot
118:26 - game loop
118:27 - okay here it is so when this
118:30 - ends what's the next thing we should do
118:33 - is draw the game over screen
118:37 - oh because it breaks out of it oh okay i
118:39 - see because so this
118:40 - so when this breaks because it's a game
118:42 - over that's gonna that's gonna trigger
118:43 - the game over screen makes sense
118:45 - got it exactly so once once the game is
118:47 - essentially done
118:48 - we would then display game over so this
118:51 - happens
118:52 - right here so now okay we just need a
118:55 - simple screen
118:56 - that prints game over on it and again
118:59 - these are kind of
119:00 - pie game specific details things we go
119:03 - over
119:03 - in depth guys in our course um i mean i
119:07 - can't recommend
119:08 - enough how important it is to surround
119:10 - yourself with the right people
119:12 - how important it is to make sure you
119:13 - have somebody to guide you
119:15 - what's really cool about this course is
119:18 - that it's such a small investment for
119:20 - how much you're going to get back from
119:21 - that
119:22 - we're going to talk in depth about the
119:24 - specifics of python
119:26 - the specifics of what's a list what's a
119:28 - tuple you guys are going to build um
119:30 - i think you guys even go over like some
119:32 - like web scraping stuff
119:33 - you guys talk about automation in python
119:36 - you guys talk about
119:37 - some basics of data science i mean it's
119:38 - incredible you guys they're
119:40 - they're adding new content all the time
119:42 - yeah jacob's absolutely
119:44 - fantastic instructor and you guys are
119:46 - going to get personal
119:47 - personal feedback and i mean if you
119:50 - really want you know we can talk too
119:51 - it's absolutely awesome
119:53 - at the very least they're not do we see
119:55 - i believe there's a little
119:56 - i believe there's a little um do you do
119:59 - you have the ability to chat there
120:00 - i do or is that just on your screen what
120:03 - that's awesome there
120:04 - okay okay awesome i misread that
120:08 - yeah um but what we go over as you can
120:11 - see there we have the live python
120:13 - training calls you're going to get stuff
120:14 - like this
120:14 - every single week recurring
120:18 - exclusive access to our community it's
120:19 - awesome definitely check it out
120:21 - definitely guys so guys if you if you
120:25 - just watch this you need if you like
120:27 - just a little bit like i mean i know you
120:29 - guys loved what we just provided for you
120:30 - because this was just a lot of value
120:32 - michael did an amazing job explaining
120:34 - this like seriously an
120:35 - awesome job for that um the guys
120:39 - this is just the the cusp of it okay if
120:42 - you're
120:42 - interesting at all at becoming a python
120:44 - developer making a
120:45 - killing as a python developer i'm
120:47 - talking like making a living as a
120:49 - part-time developer right
120:50 - and actually having a job right this is
120:52 - a product this is a program that's going
120:54 - to take you there
120:55 - right through coaching like these right
120:58 - through trainings like these through a
121:01 - community like this
121:03 - it honestly does not give this is not
121:05 - your udemy course this is not
121:08 - any course that you can compare it to
121:10 - it's completely different
121:11 - you've got the community you've got the
121:13 - training coaching calls which at this
121:14 - point we have
121:15 - i think two or three coaching calls
121:17 - every single week right you have python
121:19 - success coaches who are there to help
121:20 - you
121:21 - an exclusive community python trainings
121:23 - and so much more
121:24 - so if you are at all interested even
121:26 - just a little bit like just a tiny bit
121:28 - at all you're like okay this is
121:29 - interesting okay
121:30 - here's what i want you to do i literally
121:32 - want you to click down below
121:33 - in the description there's a link to
121:36 - cleverpro.com
121:37 - to this course check it out even at
121:40 - least check it out
121:41 - watch this video watch the video with
121:43 - this video right here that we're talking
121:44 - about
121:45 - right watch this video you'll see what
121:47 - we're talking about
121:48 - it honestly is such good value it's it's
121:51 - unprecedented
121:52 - unprecedented unprecedented as i said
121:54 - that right i don't know
121:55 - yeah but anyway guys so check it out
121:59 - literally go right now check out the
122:01 - link check it out
122:02 - if you're interested get it and now we
122:04 - will see you
122:06 - in the course guys sweet awesome
122:09 - so let's finish this game up we're going
122:11 - to start off we're going to end off
122:12 - strong here
122:13 - so finally like i said we changed the
122:16 - way our game loop works so now
122:18 - we do the game loop and when the game
122:19 - loops done we display our game over
122:21 - okay so this is our display game over
122:23 - function
122:25 - right here i've highlighted for you live
122:27 - so what happens here oh wow uh we make a
122:29 - font
122:30 - yeah i know there's a lot going on but
122:31 - it's it's mostly just making a font on
122:33 - the screen
122:34 - so we we make a font we as you can see
122:37 - it's
122:37 - game over that's it uh we make them
122:40 - rectangles so this is us
122:42 - drawing this all it does is draw a game
122:44 - over to the screen
122:46 - and then i have a couple hope for
122:48 - functions here so we say
122:49 - we have a draw key press message and
122:51 - this this is
122:53 - used whenever um it's used on our
122:56 - menu screen and also here and if you
122:58 - look on the right now you'll see a
123:00 - little press a key to play
123:01 - where uh it's very dark right here right
123:05 - here
123:05 - very light i see it okay okay okay right
123:07 - here so you're gonna see that
123:10 - and uh what it does is it calls another
123:12 - function that's called check for key
123:14 - press and what check for key press does
123:15 - is it just um constantly checks our game
123:18 - and once they press any single button
123:21 - then
123:21 - it will return um or it will return
123:25 - essentially and allow us to go forward
123:26 - with
123:26 - so let me grab that function real quick
123:29 - really simple function
123:31 - um let's see here
123:35 - so this is our game over screen
123:39 - sorry one moment here where is it that's
123:42 - our title screen
123:43 - handle events
123:47 - here it is awesome awesome awesome
123:50 - awesome
123:50 - and this is our check for key press so
123:53 - i'm going to put it next to our handle
123:54 - key events i'll put it right above it
123:56 - actually
123:57 - uh line 60 inside
124:01 - right there okay i say checkout
124:02 - keyboards okay cool i like it
124:04 - and what it does again it's you know we
124:06 - won't get into the specifics but it just
124:08 - checks
124:08 - if you press any any key it also double
124:11 - checks if you happen to press escape at
124:13 - any time
124:14 - uh during this it'll quit the game for
124:15 - you i see that's cool
124:17 - so now here we are we're running this
124:19 - game let's see it
124:21 - we can see game over and i press a key
124:23 - and then you get oh
124:24 - would you look at this guys this is
124:28 - there's an ear one guys give us on fire
124:30 - for this is completely
124:31 - pretty much a finished product finished
124:33 - game right is it not
124:34 - it is you know what make it one thing
124:37 - much cooler
124:38 - though just one last little detail that
124:39 - would be awesome yeah
124:41 - what is it i think a menu screen and i
124:44 - want the menu screen to be
124:45 - crazy guys who wants to get even more
124:47 - fancier let's do this
124:50 - i think a menu screen would be the last
124:52 - thing that would be awesome to add
124:54 - let's do it and you know let's take a
124:57 - look here
124:57 - at our run on line 135 uh
125:01 - well how would we do this right we have
125:02 - this true
125:04 - well we showed the menu screen one time
125:07 - interesting
125:08 - why don't we just run a function one
125:11 - time
125:12 - that's called show start stream
125:16 - nice all right i like it beautiful okay
125:18 - and then we need to import the show
125:19 - start screen right
125:20 - well that's right and so all we need to
125:22 - do let me grab it here
125:26 - and it's gonna seem like there's a lot
125:27 - going on here and i'll briefly go over
125:30 - it
125:30 - but again it's just making a bunch of
125:32 - rectangles and rotating it so that it's
125:34 - flashy
125:37 - i'm gonna add it right here
125:40 - and we will go over this code real
125:42 - briefly okay
125:44 - so what's happening again we make a
125:47 - title we say
125:48 - wormy uh we render it then we have these
125:51 - degrees
125:52 - the degrees are actually used to uh
125:55 - uh rotate the objects they just keep
125:57 - track of how far they've rotated
125:59 - gotcha so then uh this is our little
126:02 - check key thing so
126:03 - the second that they press a key we just
126:05 - return we exit essentially
126:07 - we're done we're done with this draw
126:08 - screen okay got it exactly okay and then
126:10 - what are we doing here again
126:12 - we're making a rectangle rotating the
126:14 - rectangle and then we draw
126:16 - it we make another rectangle again just
126:19 - making rectangles that's what these
126:20 - three lines do
126:21 - and we draw it then we draw the key
126:24 - press
126:25 - message function and that just means you
126:28 - know it draws that little notice at the
126:29 - bottom
126:30 - uh we update so this is allowing us to
126:33 - update our display
126:35 - and finally uh and this is
126:39 - you guys might have noticed we had an
126:40 - fps and a menu fps
126:42 - and the reason we do that is because we
126:45 - want our menu to look really smooth
126:47 - and rotate and not have any like
126:49 - lagginess to it
126:50 - and so i make them i make the fps 60.
126:53 - whereas
126:53 - our fps for our game actually controls
126:55 - how fast
126:56 - that we um move our snake got it whereas
127:00 - in the menu it's just how fast we rotate
127:03 - so i just made that small
127:05 - god it makes sense okay cool i like it
127:08 - all right
127:08 - so let's click play come i
127:12 - want you guys to see here oh
127:15 - man look at that i have a fully
127:18 - functioning app
127:19 - i click here i press any button
127:23 - and i start playing and immediately lose
127:26 - hold on guys let's let's see how many
127:27 - how many michael will get the most hold
127:29 - on let's see it hold on i'm gonna
127:30 - oh dude i did it last night man we're
127:32 - gonna be here a while hold on
127:34 - i'm gonna put i have like this chasing
127:35 - sound effect it looks really cool let's
127:37 - see let's see how much michael will get
127:38 - it let's go let's go michael
127:43 - i like my how to like my song
127:46 - it's kind of quiet dude i think but i
127:48 - feel the vibes
127:51 - hold on
127:56 - let's see let's see let's see hold on
128:00 - [Music]
128:02 - oh man hold on
128:06 - there it is oh let's go let's go
128:12 - let's go and you guys can see there that
128:15 - the the body is trailing me the score is
128:18 - up to date
128:19 - i keep getting longer and longer oh man
128:28 - um this is like this is getting harder
128:30 - and harder man
128:31 - yeah that this game is oh oh dang it
128:36 - so 24 24
128:39 - 24. and what's cool is i can keep
128:41 - playing or press escape and that ends
128:43 - the game
128:44 - nice nice man i just yeah that was cool
128:47 - that was a lot of fun guys
128:48 - who thought that was fun who thought
128:50 - that was like a really cool game to make
128:51 - and then a cool game to play guys
128:53 - so actually i'm so are we done at this
128:55 - point are we pretty much done with this
128:56 - game is that it right
128:57 - that's it man we've got a menu screen
128:59 - we've got a fully functioning snake game
129:02 - uh that lets you play time and time
129:04 - again
129:05 - um and that's it you can copy this code
129:08 - work on it yourself add anything you
129:10 - want to it perhaps you could think about
129:12 - you know maybe some animations
129:14 - or yeah i have some long if statements
129:17 - in there maybe there's a better way you
129:18 - could do that
129:19 - yeah and like and how can they actually
129:21 - go on there and uh
129:22 - and actually play this game right now is
129:24 - anybody anywhere how
129:26 - would or do they just go on that site
129:27 - and that's it yeah absolutely you guys
129:29 - do this
129:30 - if you guys would like to play this game
129:31 - right now go ahead and do this link
129:33 - i'm not highlighted nas if you could put
129:35 - it in um
129:36 - you're all highlighted and you're fancy
129:39 - uh and they'll be able to see that
129:41 - give me the link where's the link
129:42 - where's the link yeah absolutely let me
129:44 - send this to you again slack
129:46 - yep now oh okay
129:49 - okay okay okay oh uh that's wrong one
129:53 - second
129:54 - that's wrong here we go i was missing
129:56 - the e
129:57 - there you are okay so they simply run it
130:00 - right that's it they simply just run it
130:02 - they run it it's gonna fork it over into
130:04 - their own little project there and they
130:06 - can code on it
130:07 - change it do whatever they want and they
130:08 - have the game
130:10 - beautiful so you guys go ahead and click
130:12 - that link guys here's what we want you
130:14 - to do we want you to go ahead
130:15 - as you are playing this let us see who
130:18 - can get the highest score
130:20 - so i got an idea i got it i got an idea
130:23 - so play this game okay i want you to
130:25 - play this game guys okay
130:27 - and then go ahead and tag me and michael
130:30 - right go ahead and tag me and michael
130:32 - in in your instagram with
130:36 - the highest score that you got for this
130:39 - game
130:39 - i we want to see it we will we will go
130:41 - ahead and repost your stuff
130:43 - and this is going to be a really fun cup
130:45 - oh somebody said 38.
130:47 - somebody just said 38. dang would you
130:49 - look
130:50 - damn they just beat you michael damn
130:52 - [Laughter]
130:54 - picture it didn't happen oh man
130:57 - that's awesome this is really fun this
130:58 - so this was a lot of fun guys
131:01 - what did you think about this let us
131:02 - know in the comments below what did you
131:03 - think about
131:04 - building a game like this like this was
131:07 - a lot of fun
131:08 - honestly great explanation everything
131:11 - guys
131:11 - great that's everything and i hope i
131:14 - hope that this gave you guys more than
131:15 - anything
131:16 - a structure to follow you know the next
131:18 - time you're ready to
131:20 - build an app the next time you you know
131:21 - you're you're trying to do something
131:23 - maybe it's a game maybe it's a website
131:25 - first think behavior then think what
131:27 - doesn't change about this program
131:29 - then think okay the things that do
131:31 - change how do i represent those things
131:33 - yeah and then finally once that's all
131:35 - done once you have those
131:37 - three things three then the fourth thing
131:40 - you're going to do
131:41 - is write the functions that change
131:42 - everything got it
131:44 - yes beautiful beautiful guys well let's
131:46 - see
131:47 - what what if you guys got any questions
131:48 - for us before we leave which we're going
131:50 - to leave soon
131:51 - uh go ahead and drop that in the
131:52 - comments below
131:54 - uh yeah so yeah let us know let us know
131:57 - if you guys have any questions in terms
131:58 - of development in terms of python
132:00 - uh maybe profit with python you wanna
132:02 - yeah maybe you have a question about the
132:03 - course
132:04 - that that's great too let me see
132:07 - let's see yeah and again about that
132:09 - course man it's
132:10 - we went over a lot of high level stuff
132:12 - today you know thinking more
132:14 - less about code and more about how do we
132:16 - how do we implement these things
132:18 - exactly but if you guys want to learn
132:19 - the specifics the step by step
132:22 - somebody's there to lead you and guide
132:24 - you by the hand
132:25 - and teach you this is how we code this
132:28 - is how we're going to do it this is how
132:29 - we set up our environments
132:31 - they're going to have projects for you
132:33 - to complete you're going to have people
132:34 - reviewing your code for you you're going
132:36 - to have a community of people that you
132:38 - can ask questions with
132:39 - make friendships with build and code
132:41 - together
132:42 - this is what this program is there's
132:44 - nothing better out there
132:46 - and i'm not kidding i did not work for
132:48 - for clever programmer
132:49 - before i was a student i was a student
132:52 - first and it changed my life
132:54 - yeah i know that's i know that's a lot
132:55 - to say but it really did
132:57 - yeah i mean i mean i loved it so much i
132:58 - ended up working for them i mean
133:00 - you started what you started you know
133:02 - you did profitable shortcut
133:03 - right you did profit with python as well
133:05 - right and then you just kind of got into
133:07 - it and all of a sudden you are now
133:10 - on a team yeah it's crazy and it's
133:13 - it's absolutely exciting i was waiting
133:15 - tables before this guys
133:17 - i was serving food to people wow wow wow
133:20 - wow
133:20 - look i'm actually very curious like what
133:22 - got you to actually
133:23 - want to change that or what god you want
133:25 - to change i'm curious
133:27 - yeah well you know it starts with a lot
133:29 - of the people on this call are just like
133:31 - me
133:31 - they want to make improvements of the in
133:33 - their life they want to do better
133:35 - and uh and you know you can
133:38 - you can burn out right for 20 years you
133:41 - can keep spinning the wheels
133:42 - or um you know if you're really smart
133:45 - and and you're willing to invest in
133:46 - yourself right and not smart like you
133:48 - have to be smart to do this but you're
133:49 - smart about the fact that you should
133:50 - invest in yourself
133:52 - um you do that and you have help and you
133:56 - reach out and help
133:57 - and uh and the opportunities that are
134:00 - out there nowadays especially with what
134:01 - we're doing with this company is just
134:04 - it's so cool and i'm so proud to be
134:06 - working with this and with you guys and
134:08 - and helping out the community like this
134:10 - and you know i
134:11 - i wanted the same thing i wanted a i
134:13 - wanted to work towards a better life and
134:15 - i found clever programmer
134:16 - and and that's what happened for me he
134:18 - took a chance he took a risk
134:20 - and here we go sometimes you gotta take
134:22 - a chance make a small change
134:24 - right make a big change not even a small
134:27 - change make a big change
134:28 - and then that's what changes everything
134:30 - and it's so easy right now too guys like
134:32 - i want you to pay attention how
134:33 - easy it is right now for you this is
134:35 - there's no better time
134:36 - okay there's the job market's about to
134:39 - explode for software developers
134:41 - remote working is is at an all-time high
134:44 - okay this is the time to start and
134:47 - and you can just try it absolutely for
134:50 - free
134:51 - you sign up if you don't like it you get
134:53 - your money back
134:55 - so you this is an absolutely zero risk
134:58 - check it out go to the website the link
135:00 - is in the description
135:01 - check it out right now don't wait just
135:03 - click the link check it out
135:05 - there's no better time there's no risk
135:07 - this is the
135:08 - best time to learn how to do this and
135:10 - you're going to build stuff like this
135:11 - i mean how cool is that we just built a
135:13 - game together like a full-fledged game
135:15 - that really works
135:17 - and now you have the code too you can
135:19 - update it change it figure out what you
135:21 - want to do with it
135:22 - we're going to teach you all the
135:24 - specifics all the nitty gritty details
135:26 - all the pitfalls
135:27 - all the things to stop you from banging
135:29 - your head against the keyboard yeah so
135:30 - this is the time to do it
135:32 - absolutely check it out now you're going
135:34 - to learn from people like gnaws people
135:36 - from
135:36 - jacob uh it's an incredible community
135:39 - it's awesome yeah exactly exactly and i
135:41 - think most importantly is like
135:43 - right you get to learn all the nitty
135:45 - gritty stuff but at the same time
135:47 - you get to use the nitty gritty stuff
135:49 - right you get to use it
135:50 - to actually write go out there and you
135:53 - know maybe you want to become a coach
135:54 - like
135:55 - you know a coding coach like that's the
135:56 - first that you start out with then you
135:58 - use your
135:59 - the projects that you just built right
136:01 - you use those projects
136:03 - i use those projects now to go ahead and
136:06 - actually you know
136:07 - apply to companies like google right or
136:09 - facebook
136:10 - or any any maybe it's a startup company
136:12 - who knows right but that is your
136:13 - starting point right anything you do is
136:15 - going to be a good starting point guys
136:17 - so
136:17 - yeah seriously check it out michael's
136:19 - done it right guys
136:20 - check it out link is in the bio what are
136:22 - you still doing here i don't know what
136:24 - you're still doing here you should still
136:25 - you you should be on that site right now
136:27 - you should you should literally just
136:28 - like
136:29 - take that pointer go description click
136:32 - that nice link
136:33 - check it out and we should be all good
136:35 - by that that's pretty much all we got
136:37 - right
136:38 - that's it man that's all we got guys it
136:40 - looks like honestly i don't see too many
136:42 - questions right now guys
136:43 - seriously thank you so much all for
136:45 - watching it has been amazing to see you
136:48 - all comment and to participate with us
136:50 - and michael thanks so much this was so
136:52 - much fun i myself learned a lot
136:54 - um you know through this process and i
136:56 - love the process that you just showed to
136:58 - us
136:58 - right in terms of thinking very much
137:01 - high level first
137:02 - think about the data think about the
137:03 - process and then
137:05 - you code it up which is amazing which is
137:08 - amazing
137:08 - but you got anything any any finishing
137:10 - any finishing last thoughts before we
137:12 - leave
137:13 - that's it man absolutely the one thing
137:15 - i'd recommend is play with the code guys
137:17 - have fun with it it's going to be a lot
137:19 - of fun so
137:19 - yes and tag us on your instagram post
137:22 - instagram post yes definitely
137:24 - awesome guys in that case have yourself
137:26 - an amazing day
137:28 - have fun and we will see you in the next
137:32 - video peace out