00:00 - hey guys what's up this is Kazi this is
00:03 - my third time making this video last two
00:05 - recordings got deleted and they were
00:07 - really long I'm gonna try to make it
00:09 - short and sweet right it only lets me
00:11 - make him better so that's what I'm
00:13 - actually excited for anyways in this
00:16 - video we're going to talk about boolean
00:18 - algebra jujitsu okay before we get to
00:23 - that I wanna just take a second to show
00:26 - you guys check it up the official clever
00:31 - programmer premium short sleeve t-shirt
00:36 - custom designed let me know what you
00:39 - guys think and I'll put in the link for
00:42 - you guys below so if you guys want to
00:44 - actually get it you can order it um some
00:48 - feedback would be great if you think it
00:50 - sucks or if you think it's good let me
00:52 - know I would love to know that let's get
00:56 - on with what we are trying to cover for
00:58 - today okay so I want to talk about
01:04 - pulling algebra alright so what is it
01:07 - and how does it work and why do we need
01:10 - to know it it's one of the most
01:13 - important things in programming that's a
01:18 - period in all of computer programming
01:22 - languages anything that you use even in
01:24 - electricity it's super important at the
01:27 - end of the day everything turns to zero
01:29 - one or true or false
01:32 - okay so we have false or true notice how
01:36 - their special statements in Python which
01:38 - is why they highlight into the color
01:40 - orange and pipe and then it doesn't give
01:44 - you an error Python like understands
01:46 - what true and false is for example if
01:47 - you do true like this or false like this
01:50 - it's going to give you back an error
01:51 - saying I have no idea what you're
01:53 - talking about
01:54 - so they're like pre-existing things that
01:57 - are built into Python now why would we
02:01 - need to ever use this right why would we
02:04 - need to use this well let me show you
02:06 - guys something that foreshadows a little
02:08 - bit into maybe are one of our next few
02:10 - videos like condition
02:11 - the control flow where I'm going to talk
02:14 - more about if statements but let me just
02:15 - for shout out that and show you guys so
02:17 - you guys can see from a bigger picture
02:19 - perspective how it works and in turn
02:22 - that would make you want to learn what
02:23 - it is and then we can get down into the
02:26 - nitty-gritty details cool so for example
02:29 - an if statement works like this you have
02:32 - an if statement followed by some
02:35 - condition which does not need to be in
02:38 - parenthesis but I'm just putting in
02:39 - parentheses and that condition evaluates
02:42 - to a true or a false statement okay and
02:46 - based on that right based on this then
02:52 - this so it's like if that then this okay
03:00 - so if Johnny made more if Johnny worked
03:03 - overtime and he worked more than 40
03:05 - hours then I want to pay him overtime
03:09 - okay so for example the only time this
03:14 - block of code runs is if Johnny made
03:16 - more than 40 hours which means it needs
03:18 - to value it to true you need to have a
03:20 - true here okay so let's say if true
03:25 - print hello okay and notice that this
03:32 - block of code runs because this
03:35 - statement is true and then this block of
03:38 - code runs right this is the if condition
03:41 - it's not very smart what I'm doing here
03:43 - is kind of stupid I'm just hard coding
03:45 - true right in there which is not what
03:47 - you're going to be doing most at times
03:48 - but I'm just doing this to like
03:50 - illustrate how it breaks in it's a bare
03:52 - bones skeleton so to speak and let me
03:55 - show you if false and then see what
03:57 - happens print hi and you can see that
04:01 - this part of the code did not run
04:03 - because it goes Oh false it's false so
04:06 - I'm not going to run it not going to do
04:08 - this right it falls and you know don't
04:10 - pay him overtime or whatever right I
04:12 - could have anything else here I just
04:14 - have print hello but the implications of
04:17 - this are far more than printing stuff
04:19 - it's doing actual software right now
04:23 - another reason why this is very
04:25 - important for you guys to learn is
04:27 - imagine if you were hired you're working
04:29 - in a company and you had to design a
04:31 - system for paying employees well if you
04:32 - do your logic wrong then you might be
04:35 - paying every employee overtime which
04:38 - means that the company is paying way
04:40 - more money to its employees like for
04:44 - example you might write the logic wrong
04:46 - and employee that works three hours
04:49 - might be getting paid overtime for all
04:50 - of those - the hours the company has to
04:52 - pay a lot more money and then the
04:54 - company has to fire a lot of people
04:55 - because they're like well there's a lot
04:58 - of money going out of our pockets right
04:59 - on the other hand you could have the
05:02 - case where no employees getting paid
05:06 - overtime even though they worked
05:08 - overtime over 40 hours so with the great
05:12 - power right as being a programmer comes
05:14 - great responsibility so that's why you
05:15 - want to learn this stuff really really
05:17 - well so you don't make these MIT big
05:19 - mistakes and you can help out companies
05:23 - and you can help clients or whoever
05:25 - right so we have this case false print
05:29 - hi that's what happens but now let's do
05:31 - something more interesting so I'm going
05:32 - to introduce you guys is something
05:33 - called comparison operators okay
05:38 - so you guys might know the equal equal
05:40 - sign it compares two things together not
05:42 - one equal sign that makes something
05:44 - something two equal signs check if one
05:47 - thing is equal to another thing okay so
05:51 - I have two equal signs I have less than
05:54 - or less than I have a greater than sign
05:58 - I have a less than or equal to sign have
06:00 - a greater than or equal to sign a but
06:01 - does not equal sign okay these are your
06:04 - comparison operators so what do I mean
06:08 - five is equal to five it's going to give
06:11 - me back a true right five is five how
06:16 - about if I said five does not equal five
06:18 - what do you think is going to give me
06:19 - false right that doesn't make any sense
06:21 - how about five is greater than five does
06:24 - that make sense no it's not five is less
06:26 - than five nope five is less than or
06:28 - equal to five it should give me back a
06:30 - true five is greater than or equal to
06:32 - five and it also gives me back a true
06:35 - because it's not greater than but it is
06:37 - certain
06:38 - two-five okay so that's how this works
06:41 - and look at the bottom it breaks down
06:43 - into true-false true-false right now
06:47 - let's say we wanted to pay Johnny more
06:49 - if you worked going back to our original
06:50 - example let's say we want to pick Johnny
06:52 - more if you work extra hours right if
06:55 - you work 40 hours or something so how
06:58 - would we check that condition if you
07:01 - work more than 40 hours how would we
07:02 - check that we have to make that
07:04 - condition we have to check that
07:05 - condition so these are all called
07:07 - conditions because at the end of the day
07:10 - they evaluate to a true or false okay so
07:12 - this is a condition and then evaluates
07:14 - to false here so let's make a variable
07:17 - called Johnny hours work and let's set
07:20 - that equal to 40 and now let's check it
07:23 - Johnny
07:24 - hours work is greater than 40 so I'm
07:27 - like asking my computer question and
07:29 - it'll say false okay so I know I
07:32 - shouldn't pay him overtime then write
07:34 - because I got back a false what if I did
07:35 - is he making is he doing more hours than
07:37 - 30 okay good so at least he's working
07:40 - right he's not just not doing anything
07:43 - okay so he's worth more than 30 hours
07:45 - but he has not worked greater than 40
07:48 - hours okay has he worked greater than or
07:53 - equal to 40 hours mmm it says true since
07:57 - I know he hasn't worked greater than 40
07:59 - hours then in this statement greater
08:01 - than or equal to 40 I know that he's
08:03 - worked equal to 40 but let's just double
08:07 - check and say equal equal 40 okay cool
08:11 - so we now know that Johnny has worked
08:14 - exactly 40 hours so we can't pay him
08:16 - over time in this case but let's just
08:19 - try it out anyways let's do if Johnny
08:21 - let's turn it into like uh like a
08:24 - conditional statement which again we're
08:26 - going to get more into later is greater
08:29 - than 40 right then friend pay him
08:34 - overtime
08:35 - Oh looks like we're not going to pay him
08:39 - overtime because he has worked exactly
08:41 - 40 hours now let's make Johnny two hours
08:44 - 41 hours let's say he's worked 41 hours
08:48 - right so overtime now let's run this and
08:50 - you can see that it says pay
08:52 - over time so how could this translate
08:55 - for you Oh
08:57 - first of all let's just break down
08:58 - exactly what this turns into right so we
09:01 - have this statement if Johnny were
09:04 - greater than 40 hours how does this
09:05 - actually work well what is the variable
09:08 - Johnny hours work
09:09 - we made it 41 right 41 is greater than
09:13 - 40 is that true it certainly is
09:15 - 41 is greater than 40 and we get true
09:18 - and then we get into its most barebone
09:21 - skeleton structure which I showed you
09:23 - guys up at the top right here and it's
09:25 - simple it's simply just a true at the
09:27 - end of the day and then this block of
09:29 - code runs okay and if the same way the
09:36 - reason why this line of code for example
09:39 - like let's say I do this right if you
09:41 - were greater than 42 hours why does this
09:43 - line of code not work well again Johnny
09:47 - hoursworked is 41 is 41 more than 42 of
09:51 - course not
09:52 - so this turns to false and when this
09:54 - turns to false we get back we actually
10:00 - get back nothing because this line of
10:01 - code does not run okay that's a bare
10:05 - bone like that's the main reason why we
10:07 - use boolean operators there are lots of
10:10 - other reasons that you'll see as well in
10:11 - the next video we're gonna get down more
10:14 - into how boolean logic works so for now
10:19 - showed you guys comparison operators in
10:20 - the next video we're going to talk about
10:22 - boolean logical operators okay so for
10:28 - example we're going to talk about and
10:29 - and we're going to talk about or and
10:32 - we're going to talk about not all right
10:35 - and how all of those things work in sync
10:38 - with each other that's it for this video
10:41 - I'll see you guys in the next video