00:00 - react basics tutorial and today we're
00:03 - actually going to be showing you a
00:04 - profit with javascript live coaching
00:06 - call
00:06 - and we're going to give you a sneak peek
00:08 - inside the course and you guys are going
00:09 - to see how our students will go about
00:11 - working
00:12 - and how they can benefit from the
00:13 - one-on-one coaching that we go ahead and
00:15 - do inside the course
00:16 - so without further ado i'm gonna go
00:18 - ahead and introduce
00:19 - all of our crazy amazing students over
00:22 - inside of the clever programming
00:24 - community
00:25 - guys go ahead and say what's up you guys
00:28 - are live
00:40 - hello beautiful people let's go
00:47 - love that guys that's the energy we have
00:50 - inside the community guys
00:51 - so without further ado yeah honestly
00:53 - like and this is just the beginning like
00:55 - we already have
00:56 - 150 160 nearly 200 people live right now
00:59 - on youtube as well
01:00 - holy crap so loads of people tuning in
01:03 - to go ahead and watch today's live
01:04 - guys are you excited for today of course
01:07 - we are yes
01:13 - awesome so with that said let's go in
01:16 - and jump
01:17 - in about what we're going to talk about
01:18 - today so guys we're going pretty much
01:20 - going back to how we
01:21 - we normally did it and how we started to
01:22 - call off so um yeah today the schedule
01:26 - is going to be
01:27 - uh very simple i'm going to keep it high
01:29 - level to begin with and i always do that
01:31 - to sort of like
01:32 - give everyone some like a high level
01:34 - knowledge it doesn't matter if you're a
01:35 - beginner doesn't matter if you're a pro
01:36 - this stuff is doesn't matter and never
01:39 - take a mindset of it like
01:40 - oh i've been coding for a while i've
01:41 - been to loads of coaching calls you know
01:43 - like i know this stuff like
01:44 - always kind of start with that fresh
01:46 - mindset of like no there might be one
01:48 - thing that i haven't heard
01:50 - and that one thing is going to be the
01:51 - difference which makes me like a ton of
01:53 - money versus not
01:54 - no money right because honestly it's the
01:55 - little gems just like when you're
01:57 - reading a book you read
01:58 - god knows how many pages of a book but
02:00 - there's one thing you'll take away from
02:01 - that book that will change your life
02:03 - right then in most cases that's what i
02:04 - find when i'm reading um
02:06 - so in today's build but we're not build
02:09 - but we're pretty much going to go
02:10 - through react basics
02:11 - so right now i'm working on react basics
02:14 - modules
02:14 - inside the course so you guys will soon
02:16 - have access to a bunch of
02:18 - really really nice react modules um so
02:21 - yeah working around the clock to go
02:22 - ahead and get that
02:23 - that in for you guys um but yeah so with
02:26 - that
02:27 - done we're going to pretty much go ahead
02:28 - and and also it's going to be open q a
02:30 - so again this is a chance for you guys
02:32 - to pretty much scream
02:33 - like uh what is class-based first
02:35 - functional like what is all of this
02:37 - stuff i have no idea what is a key
02:38 - inside of a
02:39 - component pretty much go ahead and ask
02:41 - as many questions as you want
02:43 - um but yeah uh we actually had a few
02:45 - people asking questions so let's go
02:47 - ahead and
02:47 - warm up with with a few more of those so
02:49 - if anyone has any questions
02:51 - yeah feel free hi sonny yo uh so
02:54 - i have two questions actually since
02:56 - react is an spa right
02:58 - yeah so if if one wants any any
03:01 - um us suppose if we want multiple
03:04 - background images
03:06 - so there are two ways to do it either we
03:08 - uh we just
03:09 - include it in our index.css
03:12 - but then we will lose the functionality
03:14 - of having multiple
03:16 - multiple background for different
03:18 - components
03:20 - and uh the second way is to create a
03:22 - custom component
03:23 - that holds the background and holds the
03:26 - component within it
03:27 - just like a child component and it shows
03:30 - the background
03:31 - that we set using uh this css right
03:34 - so that parent child so this is to solve
03:38 - what problem this is to solve having
03:40 - a background across across multiple
03:42 - components yeah so
03:43 - the problem here is if we have two
03:45 - components that takes the whole ui
03:48 - yeah and uh i want different uh
03:50 - background images
03:51 - when those component loads okay so
03:55 - so what i thought is just create a
03:58 - component that will hold other component
04:00 - inside it
04:01 - and another component with a different
04:03 - background image that will hold another
04:05 - component inside it and that will be
04:07 - within a ternary statement so you can
04:10 - you can do it that way
04:11 - it's going to get messy and the reason
04:13 - being is because you're gonna have
04:14 - everything inside of
04:16 - uh you're gonna have a parent on the
04:17 - outside then you're gonna have all these
04:18 - children
04:19 - it's kind of coupled to the parent then
04:21 - which means that like
04:22 - imagine like you've got like a tightrope
04:24 - right it's kind of like holding
04:25 - tightly onto those onto the rules that
04:27 - you set in that parent
04:28 - that's that restricts your code in terms
04:31 - of like how quickly it can grow
04:33 - also we're nearly 100 people in this
04:35 - court which is insane um
04:37 - but um what i would say to answer that
04:40 - is maybe go ahead and instead of doing
04:42 - it in a way of
04:44 - um doing it so that i would honestly
04:47 - just go ahead and have it as
04:49 - different backgrounds for each component
04:51 - that you're rendering
04:52 - as opposed to but i don't i wouldn't
04:55 - really have logic of having
04:57 - an outside component you know like a
04:59 - parent component
05:00 - um because because i'm not sure why you
05:03 - would want that as in
05:04 - is it why is that uh because
05:07 - those two different components they
05:09 - don't take the whole window space
05:11 - it will take like 50 percent of space
05:13 - and i want different the
05:14 - client wants different background images
05:17 - for that for each of the children
05:20 - yeah for those two specific components
05:22 - okay so i'm going to go ahead and
05:23 - actually
05:24 - screen screen this out because it's
05:25 - actually a good client question that you
05:26 - just mentioned so
05:27 - this is something which your clients ask
05:29 - them guys and it's pretty much a case of
05:31 - they need a requirement
05:32 - and what is the requirement so we have
05:35 - also let me go ahead and turn off my
05:36 - uh i use flux to save my eyes when i'm
05:39 - working late
05:40 - if you guys aren't using flux by the way
05:42 - i recommend you use it uh it
05:44 - changes your screen and gets rid of the
05:45 - blue light the later on the
05:47 - day goes um okay so let's go ahead and
05:49 - run through it so what were you saying
05:50 - so we have pretty much
05:52 - a com like say this is our app right
05:55 - yeah yeah we have children inside of it
05:57 - so we want a background image so imagine
05:59 - we had a background image across the
06:00 - entire app right
06:04 - now did no so so if we had two
06:06 - components inside of it say this is
06:08 - component one component two
06:10 - then what are we doing what where did
06:12 - you want these to have
06:13 - different backgrounds no no no no
06:16 - you want this to be there's only one
06:18 - component in one
06:21 - you want this to be the background there
06:22 - is only one component inside
06:24 - yeah right so in that case i would just
06:26 - make like
06:27 - i would have app.js inside your app.css
06:30 - i would have a background
06:31 - background image and then the children
06:33 - would be pretty much on top yeah
06:35 - but i know uh the question is little bit
06:38 - different than this
06:39 - yeah so you only have one component in
06:42 - this
06:43 - the slide that you were showing yeah
06:45 - only one component
06:47 - yeah and once there is a submit button
06:49 - in
06:50 - in that component so once that submit
06:52 - button is clicked
06:53 - yeah the page is redirected using react
06:55 - router dom to
06:56 - uh to show different component okay so
06:59 - the old component
07:00 - is totally removed okay and a new
07:02 - component appears okay
07:04 - and that is small so it doesn't it does
07:06 - not take the whole uh
07:07 - whole window space okay now i want
07:10 - different background space
07:11 - for the component that had a submit
07:13 - button and the
07:14 - component that appeared after the submit
07:16 - button
07:18 - okay yeah so what you could do is you
07:20 - could have
07:21 - you could have uh okay so we're not
07:23 - going to get too far into it maybe send
07:24 - me a sack afterwards but
07:26 - what i would recommend is i would either
07:28 - use like the redox
07:29 - you could you could do this in redoxes
07:31 - and you could every time you go to a new
07:33 - child component you could dispatch
07:35 - what the new background would be and
07:37 - then you use that background in the
07:38 - parent
07:39 - component so in this one
07:42 - to be honest this is something which i
07:44 - need to deep dive with you on because
07:45 - it's quite uh
07:46 - it's not as clear-cut as as as the
07:48 - initial question so
07:50 - i think it's going to confuse a lot of
07:51 - people um so so
07:53 - go ahead and send me a slack and we can
07:54 - go ahead and deep dive on it
07:56 - and then cannot do that directly with
07:58 - css i think you need to set the
08:00 - child property of that in the jsx itself
08:02 - to do that thing
08:03 - yeah so that's what i tried but as sunny
08:06 - said it
08:07 - it becomes quite complex and tedious
08:09 - it's more case of
08:10 - once once we re so this is a good
08:13 - example guys
08:14 - there's there's a there's a problem
08:15 - which seems simple on paper right
08:17 - but the structure of your program can
08:19 - very quickly make it more complicated so
08:21 - um that's an example where it's more
08:24 - about how the structure of the code is
08:25 - as opposed to
08:27 - um you know like what i would say is
08:29 - look into something called starred
08:30 - components
08:32 - right and they can accept props and uh
08:34 - and then what you do is if you combine
08:36 - that with the react context api
08:37 - or redux you can pretty much dispatch
08:39 - your background into
08:40 - into um into the this the global store
08:43 - and uh pull that into that parent
08:45 - component render it whenever you need
08:47 - and change it whenever you need as well
08:48 - that's maybe a way to handle it but go
08:51 - ahead and send me a slack
08:52 - pretty much yeah yeah actually first i
08:54 - will try that that context api
08:56 - com pulled in with material ui's uh
08:59 - style
09:00 - uh css in js syntax yeah so that can
09:03 - actually fix this problem that's
09:05 - actually a good suggestion thanks yeah
09:06 - awesome nice
09:08 - uh okay yo hey this must here
09:12 - can i ask questions yeah go for it dude
09:14 - uh cool
09:15 - actually this question may sound more
09:17 - real related to me but i think
09:19 - the answer your answer to it may be also
09:21 - available for many of us because
09:23 - many of us can actually bump into this
09:26 - issue
09:27 - in the future when they're gonna land
09:28 - some freelance clients
09:30 - okay basically uh uh i'm having a client
09:34 - who needs to build an online uh store
09:36 - i'm in russia and this is online store
09:38 - uh
09:39 - it's gonna uh actually target it on uh
09:43 - like small uh small part of
09:46 - russia right okay but uh so
09:50 - so let's put it this way uh so basically
09:53 - uh
09:54 - this um online store gonna contain a lot
09:57 - of items it's about
09:58 - uh 1 000 items in a catalog right
10:01 - okay maybe it's not a big one as amazon
10:05 - has but anyway so uh so
10:08 - what uh like on the general level what
10:11 - should
10:12 - i what should technology uh should i use
10:15 - like
10:15 - uh should i use the react and to use
10:18 - component based approach
10:20 - but in this way i think it's really it
10:23 - would be really difficult to maintain
10:25 - this website and to add the remove and
10:28 - update
10:29 - items and all this stuff you know or
10:32 - whether i need to use some um already
10:36 - existed approach existing solutions like
10:40 - wordpress plus woocommerce or any other
10:43 - cms that more suitable for my local
10:45 - market yeah
10:46 - uh with this payment function analysis
10:49 - and all this stuff
10:50 - two things to record two things to
10:52 - factor in here so uh the question pretty
10:54 - much is he has a client or he has some
10:55 - work to do to do for someone and and
10:57 - they're basically they have an
10:59 - e-commerce store with about a thousand
11:01 - products
11:01 - or a thousand worth bit of like worth of
11:03 - stock and uh
11:05 - they need to you basically they need a
11:07 - system to manage it now if you build
11:09 - things to consider right if you build
11:11 - this in react firebase and things like
11:12 - that
11:13 - you you not only need a front end you
11:15 - need payment processing you need
11:17 - uh some kind of like management system
11:19 - around the payment processing like is in
11:20 - your admin panel
11:22 - you're also going to need inventory
11:23 - management you need crowd functionality
11:25 - user management all that all that stuff
11:27 - is is factored in right
11:28 - the cost of that is quite high to go
11:30 - ahead and build that if they're gonna
11:32 - and also for you it's a lot of work now
11:34 - i'm not saying it's not a bad approach
11:36 - if you if the if the pay is right it's
11:38 - definitely worth doing
11:40 - but it i would say it's more of an
11:42 - experience build
11:43 - so what i would recommend is using
11:45 - something like shopify
11:47 - literally use something like shopify and
11:49 - you can go ahead and take that to a
11:51 - whole nother level and get
11:52 - every single thing they need up and
11:54 - running make the website look amazing
11:57 - using web development skills and it's
11:59 - very easy to maintain
12:00 - and it can be deployed in a custom
12:02 - domain and pretty much will solve their
12:04 - entire problem so they'll be able to
12:06 - have payment processing
12:07 - customer management inventory management
12:10 - uh even things even little things that
12:12 - we might not consider for example what
12:14 - happens
12:15 - if a product goes out of stock that
12:17 - needs to then modify the pr
12:19 - uh what happens if two people on the
12:20 - website one person grabs the last item
12:23 - and two people are on the payment
12:24 - processing step you see
12:27 - like as if you're custom coding that you
12:29 - need to then account for that when the
12:30 - payment goes through to check that
12:32 - there's the product was still in stock
12:34 - whereas shopify do all of that
12:36 - because it's their business right so
12:38 - yeah but unfortunately uh
12:40 - shopify doesn't work for russia for
12:42 - russian market unfortunately but i think
12:44 - i can use just different uh cms like uh
12:48 - as you said wordpress plus woocommerce
12:50 - plug-in or something
12:52 - else so that's more suitable for my
12:53 - local market right yeah i would say
12:55 - honestly like in in terms of freelancing
12:57 - it's not always a case of doing the
12:58 - thing
12:59 - the doing the the build from scratch is
13:01 - the case of what does a client need how
13:03 - can i fulfill the client's needs
13:05 - yeah provide more value and moreover
13:08 - because
13:09 - actually the client doesn't have any id
13:12 - or a very technical person on the client
13:15 - side
13:16 - that's a very important thing that
13:19 - i need to consider because uh actually
13:22 - client
13:23 - should be able to um use that
13:26 - admin uh panel and update products and
13:30 - to manage the stuff very easily because
13:32 - remember once you deliver right
13:34 - you want your your ideal exit situation
13:37 - is going to be that you deliver
13:39 - everything is built to spec and then
13:40 - pretty much you can walk away
13:42 - and don't really have to do much after
13:43 - that but if you're so tied in to the
13:45 - point where
13:46 - if they want to change something they
13:48 - have to ask you to change a piece of
13:49 - code
13:50 - then it becomes like a it becomes a pain
13:52 - in the ass especially when you like you
13:54 - you're basically stuck to that that that
13:56 - job
13:57 - um and then they're able to do it this
13:59 - year yeah so which is which is going to
14:00 - be something quite painful to sort of go
14:02 - through so
14:03 - that's my approach on that yeah thank
14:05 - you thanks appreciate it
14:06 - awesome question by the way nice um
14:09 - let's take one more question and then
14:10 - we'll go ahead and jump into some some
14:12 - high level stuff
14:13 - um so any any more questions from anyone
14:15 - i believe there are freelance modules
14:17 - for us is that true
14:19 - um and when do those happen is it ad hoc
14:22 - or
14:23 - uh i need to speak with nars uh does
14:25 - anyone know if have you gone
14:27 - has anyone gone through so me and are
14:29 - right now restructuring a bunch of stuff
14:30 - so um
14:32 - i'm not a hundred percent right now but
14:33 - i'm an imma now mention
14:35 - something i'm an [ __ ] i'm an artist
14:38 - yeah
14:38 - he he mentioned that frank i don't know
14:40 - who frank is
14:42 - frank uh did he mention frank frank
14:44 - frankie
14:45 - oh frank oh yeah yeah yeah yeah so frank
14:47 - i would yeah
14:48 - he doesn't step in on this uh this
14:50 - actually live
14:51 - call with frank in the modules if you go
14:53 - down there is an amazing
14:55 - uh live coaching call that frank did
14:57 - yeah and he explains
14:58 - all the stuff regarding freelancing you
15:01 - can
15:02 - get one or two things from there that's
15:04 - what is it is it on the module side
15:06 - where is it yeah after after
15:09 - this success coaching live success
15:11 - coaching calls
15:13 - below that brilliant okay that's going
15:16 - to be something i really do recommend
15:17 - you go watch because i remember
15:18 - the session before that me and frank
15:20 - were talking on the live and frank
15:22 - uh dropped some amazing value bombs so
15:24 - even watch the one before that
15:26 - because the one before that led to that
15:28 - call and both of them were really really
15:30 - jam-packed with value so i'd really
15:32 - recommend that and also
15:33 - just to give you insight on who frank is
15:35 - fits uh he's somebody that he
15:37 - he's got 10 years experience pretty much
15:38 - coding a
15:40 - very very awesome guy like and pretty
15:42 - much he hadn't done a lot of react but
15:44 - he didn't want the builds on youtube he
15:46 - did the spotify build
15:47 - spoke to sonos and landed a six-figure
15:49 - contract of 170 oh
15:51 - that shot yeah oh yeah i remember him
15:54 - yeah so he's
15:55 - he's awesome and and definitely everyone
15:58 - uh watched that one because it's really
16:00 - really high level
16:02 - stuff from somebody who knows what
16:03 - they're talking about in that space
16:05 - um who is like he literally said yeah he
16:07 - landed 170k so
16:09 - no joke on that wow thank you thanks for
16:11 - the tip yeah so i
16:12 - even i watched that uh that live call
16:16 - and actually he was actually making an
16:17 - entire
16:18 - a book profile in front of you so it was
16:21 - like if you want
16:22 - some help with that too like i did
16:24 - because i didn't know what to do right
16:26 - so i i was just a beginner when three
16:27 - laughing so i checked it out
16:29 - and guys to be honest that was literally
16:31 - so much jam packed with value like
16:33 - anyone could take benefit from it like
16:34 - i'm sure that even some experienced
16:36 - freelancers would
16:37 - take care from it so yeah it is
16:38 - something that i would definitely
16:39 - recommend
16:40 - yeah 100 sunny really really valuable yo
16:43 - what's up
16:44 - uh is that sam no that's me oh joe
16:47 - what's up joe
16:52 - is uh in the planning that you're doing
16:53 - for the
16:55 - for the new um whatchamacallit live
16:58 - streams is there
16:59 - anything that incorporates what anand
17:01 - just talked about you know the full
17:02 - flash redux
17:04 - different flavors of using the way how
17:06 - to use redux because ultimately when
17:08 - you're trying to
17:09 - find a job in the market or trying to
17:11 - bid for the project i mean
17:12 - no i mean we did the amazon clone which
17:14 - is you know which is a good starter so
17:16 - now you wet your feet
17:18 - now yeah we need to take it we make it
17:20 - we need to take it to a next level where
17:22 - we do a lot of more redux interaction
17:24 - different flavors different complexity
17:27 - is anything on that's not being planned
17:29 - like in the in the modules or like a
17:31 - live stream
17:32 - so ideally so the way the way it's going
17:34 - to work now
17:35 - is pretty much working on the basics
17:38 - modules to get you guys up to speed with
17:40 - all the react stuff you know so you can
17:42 - pretty much run with that
17:43 - then combine that knowledge with things
17:45 - like the clones right that's my my
17:46 - honest advice
17:47 - now one thing i'll tell you is before i
17:49 - answer the next bit about the redox core
17:51 - is um i did not know redux when i landed
17:54 - my first job nor did i know redux when i
17:56 - actually created my first company
17:58 - which was coded in react so that's just
18:01 - so some some kind of perspective around
18:03 - the matter
18:04 - right you can still go such a far away
18:07 - without redux
18:08 - so that's my first thing i want to say
18:10 - the pattern
18:11 - of react context api that pattern
18:13 - whether you're using flux
18:15 - redux or react context api that is the
18:18 - pattern is where
18:19 - the value comes from so as long as you
18:21 - understand that pattern whether it's
18:23 - and my honest opinion here is a module
18:25 - is one thing but
18:27 - the clones literally doing the clones
18:29 - and doing the getting that pattern
18:31 - it nailed in so they're dispatching an
18:33 - action changing something inside the
18:35 - store via a reducer and then that being
18:38 - mapped to a component there's just that
18:39 - circular pattern in redux or flex or
18:42 - flux or react context api
18:45 - that's what you need to learn and sort
18:47 - of revise
18:48 - right so that's going to be the most um
18:50 - important thing but to answer your
18:51 - question in a nutshell
18:52 - yes eventually it will be a case of uh
18:55 - we're going to have
18:56 - plenty of redux tutorials and things
18:58 - like that i do want to flush out the
19:00 - different flavors because we did
19:02 - the sort of cutting edge redux which is
19:04 - very new it uses the hooks and stuff
19:05 - like that but in terms of
19:08 - in terms of the actual workspace redux
19:10 - you're going to have the old-fashioned
19:12 - class-based map state to perhaps map
19:13 - dispatch to props all that sort of
19:15 - headache right
19:16 - um so so we'll i think it would be
19:19 - something to to to look into
19:21 - uh i saw priyanka said what about mob x
19:23 - mobx is actually something which
19:24 - a colleague of mine recommended once
19:26 - before i haven't done it personally
19:28 - um but i would maybe say uh it's worth
19:30 - the read
19:31 - i would actually say rather than diving
19:33 - into mobx maybe go ahead and check out
19:35 - um uh check out um
19:39 - it's a new one that the reactor pretty
19:41 - much pushing it's their own
19:43 - estate management uh i always forget the
19:45 - name of it it's uh
19:47 - uh does anyone know the name of it is um
19:51 - it will come to me you'll come to me um
19:53 - it's a state management
19:55 - tony if it comes to you then yeah just
19:58 - just cut me off but
19:59 - if there's anyone who's struggling with
20:00 - 3dx app i actually dropped the blog
20:02 - today itself
20:03 - so you can actually like read it up and
20:05 - it's not like syntactical but it will
20:06 - give you a good explanation of what
20:08 - sunny taught us
20:09 - a few coaching calls back so yeah yeah
20:11 - exactly yeah
20:12 - go ahead and check out that as well and
20:14 - it's called recoil that's it recoil
20:16 - recoil is something new there's a state
20:18 - management library for react
20:20 - uh it's built with um built by the guys
20:22 - over at
20:23 - facebook so if it's built by facebook
20:25 - chances are they probably did a decent
20:27 - job of listening to what the community
20:28 - did was redux and all the other stuff
20:30 - and took a shot at making it themselves
20:32 - and they did a bloody good job over
20:34 - doing that with
20:34 - react hooks and stuff like that so um
20:37 - definitely something which
20:39 - if there's anything which is going to
20:40 - take off i would usually go behind
20:42 - facebook the guys who built
20:44 - react right so i'll usually step in and
20:46 - do that remember you always want to kind
20:48 - of be like
20:49 - taking the name like taking sort of a a
20:51 - proactive
20:52 - stance in turn and trying to um get
20:55 - ahead of
20:56 - the tech curve right for example before
20:58 - firebase was even popular
21:00 - i pretty much saw it i was like this is
21:01 - kind of cool this might go ahead and
21:04 - and you go it's worth taking those jumps
21:06 - because
21:07 - worst case okay you just practice some
21:09 - cool stuff right you just got some new
21:11 - cool [ __ ] that you can pretty much use
21:12 - in the website
21:13 - but best case it goes ahead and explodes
21:16 - and now you're an expert in front of the
21:18 - market
21:18 - right which means that you can pay top
21:20 - dollar to go ahead and train all these
21:22 - other people who are now coming in
21:24 - and that in itself plus a job is gonna
21:26 - make you
21:27 - tons of money so you see like it's gonna
21:29 - it's gonna really put you in a nice spot
21:31 - um so that's something i'd really
21:32 - recommend doing um but guys
21:34 - i always want to go through sort of um
21:36 - the high level stuff so
21:38 - before let's go ahead and jump into a
21:40 - quick breakdown
21:41 - um of what we've got here so how many of
21:44 - you guys
21:44 - right now guys and girls um have
21:46 - actually gone ahead and
21:48 - um like has anybody landed
21:51 - or made a single like a dollar
21:55 - any currency or any amount of money from
21:56 - coding if you have just raise your hand
21:59 - right i do it sonny okay so if you
22:01 - haven't it's completely fine
22:03 - yeah if you haven't it's completely fine
22:05 - this is why we're here right this is why
22:06 - we're here
22:07 - so if you have just go ahead raise your
22:08 - hand so let's go ahead and have a look
22:10 - so we've got victor we got pedro
22:12 - we got a few others we got lily okay
22:14 - dope yeah
22:15 - so and and i'm proud to raise my hand
22:17 - right now yeah
22:18 - and we got priyanshi yeah brian she's 13
22:20 - years old so it's awesome
22:22 - right now what i want to tell you guys
22:24 - is it's kind of like often quite a scary
22:26 - topic when you're first starting out
22:27 - like i remember coding
22:28 - and i remember in the beginning i was
22:30 - like how the hell do i make money like i
22:31 - can close all this stuff but i don't
22:32 - know how to make any money
22:34 - so i always kind of nail this in in the
22:36 - beginning right
22:37 - uh so i'm going to go ahead and share my
22:38 - screen and we're going to do a little
22:39 - deep dive on that
22:40 - so um let's go ahead and do always
22:43 - forget my keyboard shortcuts
22:45 - so ways to make
22:48 - money with code or let's just say with
22:51 - react
22:52 - right let's say we're coding yeah
22:55 - so ways to make money with code number
22:58 - one
22:59 - right so number one is going to be and
23:02 - this is this is all based on your
23:04 - timeline right so imagine we've got a
23:05 - timeline
23:06 - for when we code so this is your
23:07 - timeline right and let's just put a
23:09 - little sort of
23:10 - visual indicator on it so this is when
23:11 - you have zero experience
23:13 - so imagine someone who's never coded
23:14 - before and you can put yourself say if
23:17 - you've coded three months
23:18 - even consider yourself at the beginning
23:20 - of this journey if you've coded for
23:21 - three years
23:22 - consider yourself at the beginning of
23:23 - this journey just for the purpose of
23:25 - this
23:25 - this breakdown because it will make
23:27 - sense because if you've coded for three
23:28 - years then you'll be
23:29 - jumping through this in a week pretty
23:31 - much this timeline if you've never coded
23:32 - before it'll take you
23:33 - three months so this is going to be
23:35 - three months mark right so
23:37 - three months at the end of this now
23:39 - imagine we've got little stops from here
23:40 - we've got one month and two months right
23:42 - so this is the one month mark and this
23:43 - is the two month mark
23:45 - right now this kind of put out a plan
23:47 - and this goes to
23:48 - every single one of you now i want you
23:50 - guys if you haven't got any plan in
23:51 - place right now
23:53 - use this as a framework for sort of
23:55 - setting yourself the goals
23:56 - for the next month right so this is your
23:59 - next month
24:00 - for the next two months and then for the
24:02 - next three months right where do you
24:03 - want to be
24:04 - and if you haven't got goals right now
24:06 - go ahead and literally grab a pen and
24:07 - paper or open up notes on your computer
24:09 - and take notes as we do this because i
24:11 - want every single one of you guys
24:13 - and girls who are on this call or even
24:15 - on youtube smash thumbs up on if you're
24:16 - watching by the way always gotta plug
24:18 - that
24:18 - but um yeah i want every single one of
24:20 - you to walk out of this session with
24:22 - goals in mind and literally written down
24:25 - and these sessions are going to be
24:26 - holding you accountable to those goals
24:28 - okay
24:28 - so so this is this is your one month
24:32 - mark two month mark three month mark so
24:34 - the first way to make money
24:35 - is through teaching and coaching
24:39 - right now most people don't even know
24:41 - that this is an option right so
24:43 - pretty much right now what am i doing
24:44 - i'm teaching you guys how to like
24:46 - whether it's coding or it's
24:47 - high-level stuff in this field or
24:49 - whatever it is this is all i'm doing is
24:50 - i'm just sort of coaching and teaching
24:52 - like some students
24:53 - right now you can start this as early
24:56 - as day one right so literally i'm not
24:59 - joking like i know it's a bit
25:00 - it's a bit of an exaggeration but the
25:02 - truth is if you learn
25:03 - something on that first day of coding
25:06 - even if it's how to make a html file
25:08 - have some css inside of it and change
25:11 - the
25:12 - the header to blue now you know how to
25:14 - do that and somebody else has
25:16 - who's never coded before has no idea how
25:18 - to do that
25:19 - so you can already bring value to
25:21 - someone who has never coded before
25:23 - right so literally from day one you can
25:25 - start doing this
25:26 - right now what would i say in order to
25:28 - be successful in this
25:29 - start by doing it for free this may
25:32 - sound like counterintuitive and you're
25:33 - like yeah but this is making money blah
25:35 - blah blah
25:35 - no stop for absolutely free now priyank
25:39 - you
25:39 - jonah answers this question why should
25:41 - they
25:42 - yeah why should they answer that why
25:44 - should they coach for free
25:46 - in the beginning yeah so
25:49 - guys this this is something that i can
25:51 - actually resonate with
25:53 - so personally i too started off coaching
25:56 - people for free it was actually my
25:58 - friends okay
25:59 - so this is a really good way to start
26:00 - off so whenever you're starting off it's
26:03 - not about the money okay it's actually
26:04 - about the value that you can provide
26:06 - think about
26:07 - like if you want to teach a
26:08 - five-year-old how would you do
26:10 - it well if you try to do that by like
26:13 - starting off with paid it is a high
26:14 - probability that you might fail
26:16 - okay so sometimes people are not good at
26:17 - teaching some people are just like
26:19 - they they can't receive very well right
26:21 - like i can
26:22 - so some of my i i taught some of my
26:24 - friends for free okay absolutely free
26:25 - i thought that okay so i'm getting good
26:27 - at this people are saying that okay
26:29 - they're taking some value too
26:30 - so how about i just start off by
26:33 - charging
26:34 - very less okay so i i have started my
26:36 - course with like fifteen dollars a month
26:38 - a month okay so it's not even like an
26:41 - hour it's a monthly course
26:42 - so it's not actually about the money
26:44 - from the starting it's about the value
26:46 - that you can provide okay yeah initially
26:48 - if you can get even two to three
26:49 - testimonials
26:50 - remember testimonials is key because
26:52 - that shows people that you have
26:54 - experience no one cares about the money
26:55 - that you have everyone cares about the
26:57 - experience and
26:58 - how much value you're providing to the
26:59 - other other one okay so
27:01 - that is the most important thing right
27:02 - now that i would say so
27:04 - it doesn't matter about teaching it for
27:06 - free or not
27:07 - it's about the testimony that you get
27:09 - and from that testimonial you can tell
27:11 - other people that okay
27:12 - so i've taught this person and he was
27:13 - this successful so would you like to
27:15 - just
27:16 - check it out okay try to offer them one
27:18 - free call and after that you can talk
27:20 - about pricing so
27:21 - okay it's not about the money at the
27:23 - beginning
27:24 - it's about getting the skill set in the
27:26 - place
27:27 - getting the soft skills in place and
27:29 - after that if you
27:30 - are really if you think that you're
27:32 - getting really good did it you can start
27:34 - charging
27:35 - yep 100 100 and literally and
27:38 - i'm pretty actually dropped some good
27:39 - bombs there guys so literally offering a
27:41 - free call
27:42 - yeah and i wrote all five because
27:44 - literally offer free
27:46 - stuff yeah literally free help if you
27:48 - say to someone
27:49 - right i know how to do this stuff but
27:51 - and i'm going to do it for free
27:52 - for you right i'm telling you the
27:55 - resistance to that is literally like
27:57 - you pretty much if somebody if it's like
27:59 - saying waving an iphone in front of
28:01 - someone and saying hey do you want this
28:03 - like the chances are they're going to
28:04 - pretty much grab the iphone i'm like
28:05 - sure let's go like isn't that yeah i'll
28:07 - take that like
28:08 - so do that and then what does that lead
28:10 - to it leads to you eventually getting
28:11 - testimonials
28:12 - right testimonials are pretty much what
28:14 - like if you if you're on amazon
28:16 - or ebay and you buy something you check
28:18 - out the reviews right you check out is
28:19 - this guy a five-star seller or is he a
28:21 - one-star seller if he's a one-star
28:22 - seller or he has no reviews you're kind
28:24 - of like um
28:25 - should i work with him if this person's
28:27 - got like five thousand reviews and
28:28 - they're all five star
28:30 - you're gonna be like holy [ __ ] i trust
28:31 - this guy take my money right
28:33 - you see the difference there right and
28:35 - free teaching can get you there
28:40 - so if you guys still do not believe that
28:42 - this might work take an example of patch
28:45 - himself okay so i was i
28:47 - said that i was on a call with him so he
28:50 - told me that he offered his
28:51 - uh the client was his buddy okay so he
28:53 - just offered him he told that okay so
28:55 - these are the advantages of web
28:57 - development and there's a lot of money
28:59 - in it and yes
29:00 - it's not that hard to you can actually
29:02 - try it out yourself
29:03 - and then he said that okay so let's have
29:06 - one free call
29:07 - and after that if you like it then we
29:09 - can talk about pricing okay
29:11 - tell me would you yourself resist it if
29:14 - if sonny gave you a free call
29:16 - right now right today itself a
29:18 - one-on-one free fortune call
29:20 - and then he like if he was like an
29:23 - amazing tutor like he is an amazing
29:25 - tutor we all know that
29:26 - so if sonny gave you a free call would
29:29 - you actually resist that you would just
29:30 - say that
29:31 - okay there's nothing to lose right so
29:33 - the other person has nothing to lose
29:34 - from you
29:35 - only to gain right and now if they like
29:38 - your first coaching call if you can make
29:39 - them make that coaching call enough good
29:41 - think about that the profit that you can
29:43 - make over time okay it's about the
29:45 - long-term approach it's not about a
29:46 - short-term approach so
29:48 - that's actually the basic the main thing
29:50 - okay so it's like
29:52 - not think like again that sonny said
29:54 - like give a one free call to every
29:56 - single client that comes to you
29:57 - one people nothing much this one free
29:59 - call and then if they like you i'm sure
30:00 - that they will continue
30:01 - like there's no point there's no point
30:03 - of confusion at all
30:05 - exactly 100 and the main thing to take
30:07 - away from that is focus
30:08 - your stuff on long-term visions right so
30:11 - like
30:12 - most people are like oh this week i'm
30:14 - gonna do this right
30:15 - that's good as a starting point but you
30:17 - should be thinking right
30:18 - in in two three years where do i want to
30:21 - be in five years where do in 10 years
30:23 - where do i want to be like i want to get
30:25 - like this house i want to have this kind
30:26 - of life i want to be
30:28 - financially free that sort of you should
30:30 - set those goals
30:31 - first and then kind of work backwards
30:33 - right most people are like oh man i want
30:34 - a rolex and it's like
30:36 - no like is in you know like you could do
30:38 - a freelance job and pretty much like if
30:40 - you
30:40 - and buy yourself a fancy uh like i am
30:42 - what's that but you shouldn't do that
30:44 - one that's a bad waste of money and two
30:46 - it's not a good goal right so in this
30:48 - term in this sense right now
30:50 - the free cool yes initially you're like
30:52 - but it's free like i'm not going to make
30:54 - money
30:54 - no you're building your skill set which
30:57 - is endlessly valuable
30:58 - right so this will equate to however
31:01 - much money you want to make in the
31:02 - future right so like
31:04 - if in the beginning i all i cared about
31:06 - was money like
31:07 - i'm telling you i would have quit i
31:08 - would have quit a long time ago i would
31:10 - have been like oh
31:11 - well well as soon as i got hit my
31:12 - debugging head would have been like
31:13 - screw this [ __ ] like i'm done
31:15 - right but it was only when i started
31:17 - coaching and teaching
31:18 - and i actually started way late on
31:20 - coaching and teaching i should have
31:21 - started way earlier
31:22 - which is why i want each and every one
31:24 - of you to start this as soon as possible
31:26 - literally you can use communities like
31:28 - the slack community you can literally
31:29 - use the
31:30 - the the who's new uh channel in slack to
31:33 - go ahead and see
31:35 - um who's pretty much just joined and
31:36 - things like that you can use youtube so
31:38 - people are watching on youtube you can
31:39 - pretty much reach out to everyone in the
31:41 - comment section
31:42 - um you can pretty much go ahead and on
31:43 - facebook we have communities on facebook
31:45 - you have
31:46 - stack overflow i mean i'm not a big fan
31:47 - of stack overflow although the code is
31:49 - great
31:50 - but but the main thing is is you want to
31:53 - build that skill set right and coaching
31:55 - and teaching is going to be
31:56 - because i'm telling you if you say to me
31:58 - i can code in i can
32:00 - write a functional component and react
32:01 - right i'll be like cool now teach that
32:03 - to me
32:04 - and then and then i guarantee there will
32:06 - be some um's and ours in there right
32:08 - but if you keep on doing it and you get
32:10 - to a point where you're like
32:11 - this is this this is that this is why i
32:13 - have this and this and this
32:14 - then i guarantee like trust me you will
32:16 - never ever forget that skill
32:18 - and that skill will become like twice
32:19 - three times four times as much as
32:21 - valuable as it is
32:22 - before you started being able to teach
32:24 - it right so that's the first thing i
32:25 - want you guys to do and this is going to
32:26 - be
32:27 - something you can start immediately so
32:28 - you can actually go ahead and make
32:30 - a little bit of money from this right
32:31 - now i say a little bit it's all down to
32:33 - pretty much again this is infinite you
32:34 - can pretty much go ahead and
32:36 - and take this to like the to the sky's
32:38 - limit at this point like
32:40 - patch needed to make some income and
32:42 - literally he took action he started
32:43 - teaching and coaching
32:44 - and just like praying she said it was
32:46 - his friend he literally just reached out
32:47 - to his friend
32:48 - and was like oh you want to start coding
32:49 - i'll teach you and now his friend's
32:51 - paying him 400
32:52 - a month right and uh patch is somebody i
32:55 - coach in literally
32:56 - and this is what i taught him and he
32:57 - pretty much did that and he's making
32:58 - money off it now
33:00 - um so that's the first thing now the
33:01 - second thing is
33:03 - pretty much freelancing now we all know
33:05 - uh freelancing right
33:07 - uh we all heard the term freelancing uh
33:10 - to be honest i didn't know what
33:12 - was realizing actually truly meant until
33:15 - like
33:16 - way later in my career and the only the
33:18 - only
33:19 - true reason why my freelancing took off
33:21 - was through
33:22 - i started teaching and coaching and my
33:24 - name got out
33:25 - and then people would share my name
33:27 - around and then they were like oh sonny
33:29 - i need this website built that's
33:31 - honestly how i got started in
33:32 - freelancing so
33:33 - most people think that it's through
33:35 - things like upwork wise and which yes
33:37 - they're great platforms and to be honest
33:38 - they're the ones that you want to go to
33:40 - if you're on a scale
33:41 - in freelancing um so so let's go through
33:44 - some action points actually
33:45 - before we go ahead and get two people
33:46 - carried away so sign up to things like
33:48 - upwork
33:48 - right so sign up to things like upwork
33:50 - uh why is that intake lessons are good
33:52 - so i think this kind of contributes into
33:54 - teaching and coaching
33:55 - but alright i'm here anyway so wise and
33:57 - take lessons make sure you've got
33:59 - accounts over here
34:00 - um also what you want to be doing is
34:02 - build your network
34:03 - right build your network because believe
34:05 - it or not my most of my money
34:08 - in this space in freelancing space has
34:10 - come from my network
34:11 - without a doubt it's literally not even
34:13 - comparable like you couldn't even
34:15 - work with your network yeah exactly
34:19 - your network is your net worth 100 and i
34:22 - used to always think
34:23 - oh networking's just a term that gets
34:25 - thrown around but i get i'm telling you
34:27 - guys like
34:28 - this has made me more money than any of
34:30 - these
34:31 - services or anything which is actually
34:33 - quite crazy when you think about it
34:35 - right
34:35 - so but how do we build our network it's
34:37 - kind of cool it sounds cool but how do
34:39 - you do that
34:40 - right so social media presence literally
34:42 - as you learn post it on social media
34:44 - right and pretty much use my account
34:46 - kazi's account uh
34:47 - nars account as examples um but one
34:50 - thing i'll say stay away from a problem
34:52 - here and this is what i see too much of
34:54 - guys
34:55 - is i see people posting for the sake of
34:57 - posting
34:58 - right and this is i'm not a fan and i'll
35:00 - pretty much say it's loudly i
35:01 - really i'm not a fan of the 100 day
35:05 - challenges
35:05 - because they see i see loads of people
35:08 - doing it
35:09 - but if somebody asked me to do 100 day
35:11 - challenge i would just i'm against them
35:12 - because yes they start off like with a
35:14 - good intention right
35:15 - they start off with like i'm going to
35:16 - code for 100 days and i'm not going to
35:18 - quit
35:19 - but i guarantee by day 29 or 30 you're
35:21 - like [ __ ] this [ __ ] i don't want to ever
35:22 - i don't want to post on social media
35:24 - ever again in my life
35:26 - right that actually demotivates you a
35:28 - lot yeah it really sucks the life the
35:30 - fun the energy out of it right
35:32 - and the truth is if you if you look at
35:34 - my account i mean
35:36 - doing the program is one thing then
35:38 - clicking the picture and
35:39 - modify it in convert takes lot of time
35:42 - yeah
35:42 - yeah it takes a long time to get social
35:46 - media stuff up yeah
35:48 - i literally i've also done once it what
35:50 - i've done on facebook
35:51 - i first commented that for 40 days uh
35:54 - i'll be
35:55 - putting every day an article yeah i did
35:58 - for just five to seven days seven days
36:00 - at
36:00 - it yeah and then some different stuffs
36:02 - happened and i thought
36:04 - i shouldn't do it it's it's been
36:06 - happening ridiculous things and yeah
36:08 - exactly and it gets ready
36:14 - when it comes to posting things like i
36:16 - always take advice from amanda he's a
36:18 - he's very cool guy and he always he's
36:20 - always ready to give advices
36:21 - yeah so i actually work very closely
36:24 - with amanath
36:25 - and um yusuf is somebody else that i
36:28 - work closely with
36:29 - uh they're basically part of the the
36:31 - content team on cover programmer
36:33 - and they're on the team for a reason
36:34 - because they literally are very heavily
36:36 - involved and they have a very good
36:38 - intuition for this stuff
36:40 - um but i remember i spoke to yusuf when
36:42 - he was literally starting out
36:43 - i remember yusuf literally was like a
36:45 - very sort of like more reserved person
36:47 - on on
36:48 - on instagram and i remember he reached
36:51 - out and he was like hey man like i'm
36:52 - kind of into this stuff
36:54 - i really like it and i remember like i
36:56 - literally said i was like okay cool man
36:57 - let's jump on a call
36:58 - and and before you know it i said to you
37:00 - so if i was like i tell you what
37:02 - i'll give you a little bit of a test
37:03 - right go ahead and build this he didn't
37:05 - just build what i asked him he built
37:06 - that plus like a bunch of other stuff
37:08 - and he was like i thought i'd try this
37:10 - out and just show you
37:12 - right and that's what i'm trying to say
37:13 - here like just from that one movement
37:16 - right that one step that he took which
37:18 - was one he reached out to someone right
37:21 - so i see so many people who are just
37:22 - afraid to reach out they're never going
37:24 - to take that jump and reach out
37:26 - me and kazi started talking through
37:27 - instagram right just literally just we
37:29 - just replied to a story and then we just
37:31 - started talking so never ever think that
37:33 - something's
37:33 - out of reach right always take a leap
37:36 - boy take a jump
37:37 - and always go ahead and like and i would
37:39 - say like
37:40 - if you want to start your ins your
37:42 - social media journey start with stories
37:44 - stories are better because they're more
37:46 - like you can just tap through it and
37:48 - it's very quick to go ahead and put up a
37:49 - story in this
37:50 - the damage isn't if you mess up or you
37:52 - put up something which you know wasn't
37:53 - great
37:54 - it's only going to be up there for 24
37:55 - hours it comes back down right it's fine
37:57 - but the point is that like
37:58 - gary v says something really key right
38:01 - he's like
38:01 - we all focus on content creation right
38:04 - and content creation is something which
38:06 - takes a lot of time
38:08 - a lot of energy and it becomes something
38:10 - like if you if anyone who's done
38:12 - a 100 day challenge or tried to do 100
38:15 - day challenge
38:16 - realizes that it just it sucks all of
38:18 - the energy out of you because it's like
38:20 - every day you're trying to come up with
38:21 - a new idea
38:22 - and and if you try doing daily vlogging
38:24 - you're gonna realize like oh my god i'm
38:25 - trying to make my life like super
38:27 - super adventurous just just to get some
38:30 - content for a camera right
38:31 - or something like that sometimes you
38:33 - just need a break for a day yeah you
38:34 - just need a break for a day but even
38:36 - better than that
38:37 - make your content creation not creation
38:40 - but just document your journey
38:41 - literally change it from content
38:43 - creation to documentation right
38:44 - literally document your journal
38:46 - mindset actually yeah but document your
38:48 - journey
38:49 - and before you know it you will have so
38:51 - much content it's stupid
38:52 - right like if you sat there and just set
38:54 - up a camera while you're working
38:56 - right and make a little time lapse and
38:58 - then you just wrote a little nice
38:59 - caption saying like
39:00 - today i worked on some stuff like this
39:01 - is what i worked on bullet point boom
39:03 - boom boom
39:04 - done that's it you didn't take you much
39:06 - effort to go ahead and do that
39:07 - right you pretty much you did your work
39:09 - and instead you just set up a time-lapse
39:11 - and stuff
39:11 - and you had it up people enjoy that
39:13 - stuff and not only that it kind of gets
39:15 - you connected to like-minded people oh
39:17 - this guy codes let me go and follow him
39:19 - you see like this this this girl kind of
39:21 - interested in coding oh i'm a girl too i
39:22 - can go ahead for her
39:24 - like is in and the truth is is like um
39:27 - it's it seems very like underrated but
39:29 - what people will tend to do is they make
39:30 - like very
39:31 - over cluttered and over complicated
39:33 - posts it's like
39:34 - day 67
39:38 - something else and guys just keep it
39:40 - simple keep it clean
39:41 - and and and you'll build your network up
39:43 - by doing that right
39:45 - now that i would like to add is that
39:49 - if you are trying if you like are going
39:51 - to do what sony said that make a time
39:53 - lapse
39:54 - what's actually gonna happen is that
39:55 - sometimes you might feel like okay let
39:57 - me just take a break let me just start
39:58 - out let me do some netflix or something
40:00 - but then you remember that okay we have
40:02 - a camera so it's like
40:03 - you remember back in like i'm in school
40:05 - so like sometimes my mom used to teach
40:07 - me
40:07 - yeah so i used to say that okay my mom
40:09 - is teaching man she's literally like in
40:11 - front of me so how can i
40:12 - try to like act cool and act smart right
40:15 - yeah that's again holding you
40:16 - accountable so
40:17 - that's something that i i seriously feel
40:19 - even now so
40:20 - yeah it's just a fun fight so that holds
40:23 - you accountable
40:24 - and yeah sometimes you just focus
40:26 - because like again pushing your heart
40:27 - right
40:28 - so you just push yourself a little bit
40:29 - more and you'll say okay so let's not
40:31 - take a break right now i'm gonna be like
40:33 - okay netflix afterwards
40:34 - at night okay so that that kind of
40:36 - happens yeah dude that's so true that is
40:39 - so true i mean cause he literally had
40:41 - this exact conversation yesterday over
40:43 - the phone
40:43 - we were catching up and he was telling
40:44 - me about how he started a podcast with
40:46 - amberly
40:47 - and and the reason why he loves it so
40:49 - much is because
40:50 - it makes them both want to do it and the
40:52 - reason being is because guys
40:53 - put it this way right if if if if you're
40:56 - having a conversation which is like
40:58 - uncomfortable or it puts you like let's
41:00 - say me and priyanshi just started on
41:02 - server side rendering stuff which i
41:03 - haven't touched in a while and i don't
41:04 - know if brienne jesus
41:06 - has coded it with before but no clue
41:08 - about it yeah but that makes us
41:09 - uncomfortable right so
41:10 - they're saying like i've done it before
41:12 - but it's something i did quite a while
41:13 - back right but it's a conversation which
41:15 - would be like uh
41:16 - but now okay imagine we turn the cameras
41:18 - off and we pretty much work on it
41:19 - it's very easy to at that point to be
41:22 - like
41:22 - uh do you know what dude we can just do
41:24 - this tomorrow man let's just call it a
41:26 - day here let's just like
41:27 - maybe quit here or something exactly the
41:29 - concept with online classes too right so
41:32 - like if you're just
41:33 - turning off the camera you know that the
41:35 - other person that's
41:36 - on the other side of this of the screen
41:39 - he doesn't know what you're doing so
41:40 - like there's zero way of you to hold
41:43 - yourself accountable and
41:44 - remember holding yourself accountable
41:46 - like by someone okay this somebody just
41:48 - tell your friend that okay
41:49 - so if i don't if i don't complete a few
41:52 - of my choices it doesn't
41:53 - necessarily need to be programming but
41:56 - see that if i don't complete a few of my
41:57 - chores
41:58 - i'll give you 100 bucks now think about
42:00 - it would you rather give up give your
42:01 - friend a hundred bucks
42:02 - or just complete your choice yeah that
42:04 - would be better to complete your choice
42:05 - right
42:06 - exactly hold yourself accountable
42:08 - exactly
42:09 - and even guys think of it in a way of
42:11 - like even if you did an ad
42:13 - even if you didn't add in the the sort
42:14 - of money aspect of it right
42:16 - just from the fact that like you have
42:18 - people watching even if it's
42:20 - one person watching right so imagine
42:22 - you're working and you just live
42:23 - streamed
42:23 - right now the first thing i want to say
42:25 - to you is get rid of that fear
42:27 - of giving a [ __ ] about what people think
42:29 - okay so every single person even when i
42:32 - started doing
42:33 - youtube i remember i was so obsessed
42:36 - with like
42:36 - oh you know like is is everything in
42:39 - order is everything look right is
42:40 - everything that's the lighting perfect
42:41 - blah blah
42:42 - forget all that stuff just talk just
42:44 - start just turn on the camera and just
42:46 - start talking
42:47 - yeah just be yourself because there is
42:49 - only so so much you're gonna you're
42:51 - gonna
42:51 - keep with that persona that you're kind
42:53 - of going with once you've done 50 videos
42:55 - i guarantee the persona drops
42:57 - right so just drop it from the beginning
42:59 - right oh [ __ ] we got cory in the house
43:01 - on
43:01 - on youtube corey if you're in the
43:03 - coaching call go ahead and jump in dude
43:04 - because cory's got a lot of uh
43:07 - value bombs uh like whenever
43:10 - morning 10 a.m i have my quality and i
43:12 - sleep at 36
43:14 - a.m and it's difficult for me to wake up
43:15 - and like i'm just like i'm just gonna
43:17 - turn off my camera i'm gonna turn off my
43:19 - mic and i'm just gonna
43:20 - plug in the earphone and sleep yeah
43:22 - that's like that's that's the worst
43:24 - thing i've ever done but
43:26 - the time i sleep like but if i'm
43:29 - guarantee if you if i turn on my camera
43:31 - like i have to be super focused and
43:33 - yeah do my thing exactly yeah if you
43:36 - turn the camera you're just literally
43:37 - holding yourself accountable
43:38 - thank you corey just dropped five
43:40 - donation on youtube damn smash that
43:42 - thumbs up button for cory guys
43:44 - um yeah so uh atarba i couldn't agree
43:47 - more dude i
43:48 - 100 agree with you and and i think it's
43:50 - a case of like just by being on the
43:52 - camera
43:53 - just by like showing yourself on a
43:54 - camera you're going to be pretty much
43:56 - like
43:56 - already improving your your performance
43:59 - by at least
44:00 - minimal 30 to 40 percent like as in
44:02 - minimal to 840
44:04 - and then anything above that is going to
44:05 - pretty much and think of it this way if
44:07 - you're doing that like every time you
44:08 - work you just pretty much put the camera
44:10 - on
44:10 - right well like and then i know it
44:12 - sounds a bit extreme right
44:13 - but like the truth is just try it guys i
44:16 - promise you
44:17 - just try it and don't knock it until
44:18 - you've tried it like you will see
44:20 - your progress go up and it's a really
44:22 - sort of un undermined thing but
44:24 - i i would i would really recommend it
44:26 - now actually i can also connect with
44:28 - that like
44:28 - yeah from the day i have started
44:31 - documenting my journey
44:32 - in on the instagram i always feel like
44:35 - if i have committed to something i don't
44:36 - want to be the person like
44:38 - who just commit to something and don't
44:40 - do and go back from his word
44:42 - yeah for that reason i just try to push
44:44 - myself each day and every day
44:46 - and try to complete that target
44:48 - whichever i have
44:49 - like so like i'm going to do this and
44:51 - that yeah like that
44:52 - 100 percent and what i've er means
44:55 - notice that
44:56 - i have that the work of ours and the the
44:59 - time i focus in working
45:00 - have increased a lot yeah exactly
45:04 - 100 camera shy in the beginning was that
45:07 - camera shy in the beginning
45:09 - yeah 100 dude a hundred percent how do
45:12 - you
45:12 - build your confidence uh on like getting
45:15 - better at cameron
45:17 - dude this is a really any tips yeah this
45:19 - is a really good point actually i'm glad
45:20 - you brought this up because
45:22 - okay so we might have thought that this
45:23 - is just about youtube now and live
45:25 - streaming right
45:26 - but take this a step further right so so
45:28 - being not only just camera shy but like
45:30 - let's imagine like in in
45:32 - current circumstances right like imagine
45:34 - a lot of jobs right now remote positions
45:36 - right
45:36 - so you're going to need confidence over
45:38 - a camera right you're going to need
45:40 - confidence whenever you have
45:41 - a conversation with a client or whether
45:44 - they're based in the states or something
45:45 - especially if you're doing freelancing
45:47 - you're gonna need to get comfortable on
45:48 - camera to talk to clients and things
45:50 - like that right
45:51 - so now in the beginning i remember when
45:53 - i first jumped on the camera whether it
45:54 - be a live stream or youtube or if i was
45:56 - doing a vlog
45:57 - or something like that i was literally
45:59 - the most quiet
46:01 - introverted person but i was a very
46:03 - extroverted person with my friends and
46:04 - out and about but in on camera i was
46:06 - like
46:07 - you know like super quiet and i was like
46:09 - hey guys how's it going like this is
46:11 - this is sunny like and you know you
46:12 - watch your back and you're just like oh
46:14 - man
46:14 - but i guarantee what what happens is you
46:16 - watch it back and you're gonna look at
46:17 - it and be like oh
46:18 - man what the heck am i doing like this
46:21 - and this but the second time you do it
46:23 - there will be a slight improvement right
46:25 - then the third time you do it there'll
46:27 - be a slight improvement
46:28 - then the fourth time you do it'll be a
46:29 - slight improvement and then after a
46:31 - certain point you're like
46:32 - you just stop giving a [ __ ] like the
46:35 - truth is like you just stop caring
46:36 - and the truth is and and it puts you in
46:38 - a position where
46:40 - you just all you care about is the
46:42 - actual thing that you're trying to
46:43 - deliver and
46:44 - and then you your real personality comes
46:46 - to the surface
46:47 - and that is where people connect with
46:49 - you everything before that the sort of
46:51 - persona you put on
46:52 - on top of it and everything is very hard
46:54 - but it's it's a lot easier said than
46:56 - done
46:57 - in terms of um in terms of trying to you
47:00 - know like
47:00 - it's very easy to say be yourself you
47:02 - know just be yourself
47:03 - it's it's a lot more tougher to actually
47:06 - go ahead and do that
47:07 - but the way to get past it is do it
47:09 - consistently every day every single day
47:11 - and there is no way that it won't happen
47:13 - naturally
47:15 - you're talking about cameras and being
47:18 - in front of a camera actually
47:19 - when you're like being let's say i wake
47:23 - up today and then i'll be like okay i
47:24 - want to go and teach
47:26 - yeah so i've got a skill which i want to
47:28 - teach and if we do like you said
47:30 - so every time we work we just turn the
47:31 - cameras on yeah and we just film
47:33 - ourselves even if we do a time lapse or
47:35 - we don't
47:36 - we don't actually post it on youtube or
47:39 - on social media we just record ourselves
47:40 - and that's it
47:41 - but at least you get that confidence and
47:44 - that
47:45 - you know be like okay i've got a camera
47:47 - i don't feel awkward having a camera in
47:49 - front of me filming
47:50 - yeah because i think it's when i've done
47:52 - teaching in person because i went to
47:53 - school and teaching schools right
47:55 - yeah and and it was a thing when then i
47:58 - thought maybe
47:58 - let's do teaching but with uh like
48:00 - remote teaching yeah and it's socially
48:02 - different because you don't have that
48:03 - interaction a human interaction
48:05 - yeah it's like talking to to nothing
48:08 - basically
48:09 - yeah because sometimes you know
48:10 - connection errors and all of that stuff
48:13 - exactly 100 this connection is delay
48:15 - there's sort of like getting over that
48:17 - confidence barrier
48:18 - and also guys like let me put this into
48:20 - perspective right like
48:21 - how many of you like literally raise
48:23 - your hand if you trust me
48:27 - yeah do you see that right like and
48:28 - that's literally over you like
48:30 - that's just my shooting videos so like
48:32 - that's literally a case of like if
48:34 - if you guys trust me right just from a
48:37 - video then not
48:38 - that's just think it's completely
48:40 - possible
48:41 - for each and every single one of you
48:43 - guys on girls to go ahead and get
48:45 - someone else to trust you
48:46 - right all it takes is it would be kind
48:49 - of hard for someone to not trust you you
48:50 - know like you've always been so open
48:52 - with us
48:53 - and also one more thing that i would
48:55 - like to add to the point of your camera
48:57 - thing is that
48:58 - see even i am not the best speaker right
49:00 - even i hesitate all the time like i
49:02 - say english is my second language like
49:04 - my primary language is hindi so
49:06 - english is my second language although i
49:08 - still try so it's not about like
49:10 - you know you have to be picture perfect
49:11 - some people just think that okay oh my
49:13 - goodness some people like they're gonna
49:14 - be thousands watching me
49:15 - like sunny or even sunny there are like
49:18 - millions of people who watch sunny right
49:19 - but does it make a difference to him
49:21 - does it make a difference to his
49:22 - speaking side it doesn't right
49:23 - say almost like it comes from within you
49:26 - so it doesn't matter if the entire world
49:28 - is caring about you
49:29 - like the amount of value or even like
49:32 - just
49:32 - you know being yourself in front of the
49:34 - camera that makes the entire difference
49:36 - like
49:37 - it doesn't matter if you hesitate it
49:38 - doesn't matter if you're not
49:40 - if you're not the best person to speak
49:42 - who knows how to speak
49:44 - but the thing is that you just need to
49:45 - put yourself in a position that yes
49:47 - okay i'll at least try yeah it's not
49:50 - about
49:50 - like practicing is something that's good
49:53 - but at least giving it a shot is
49:55 - something that i would highly recommend
49:56 - doing
49:57 - for anyone yeah 100 guys let me put it
49:59 - to you this way yeah
50:00 - i remember when i first went on my uh on
50:03 - my first stream it was not even like
50:05 - this many people in the zoom chat right
50:06 - now
50:07 - and let alone 300 people on youtube
50:09 - watching as well right
50:10 - like i remember it was literally i think
50:12 - it was 60 people
50:13 - right in and this was a hyped up call
50:16 - right this was a really hyped up call
50:17 - and i was sweating i was freaking out
50:21 - my heart was racing i was trying to find
50:23 - the message where i literally sent the
50:25 - cards i was like dude i'm like i'm
50:26 - breaking it
50:27 - i think like maybe can you come on and
50:28 - cassie was like i can't come on this one
50:30 - he was like you've got this don't worry
50:31 - just jump on i remember i just literally
50:33 - turned the camera and i was like
50:35 - what's up guys let's go next thing you
50:38 - know
50:38 - next thing you know like that endorphin
50:40 - that adrenaline rush kind of kicked in
50:42 - and i was like okay like i'm live now
50:44 - i have to go with it when you just put
50:47 - yourself in the position of
50:48 - legs like sonny did and then it just
50:51 - comes from within you it doesn't even
50:53 - you don't you know you start like
50:54 - adrenaline rush okay
50:56 - it's nothing about you know how much
50:58 - you're doing or
50:59 - like the the the accent that you're
51:01 - speaking in
51:02 - it's just about the happiness that you
51:04 - get from within like so many people
51:05 - think about it with this okay earlier no
51:08 - one used to see you
51:09 - nowadays everyone's seeing you think
51:11 - about yourself to be a position like a
51:13 - superstar or something okay because so
51:15 - many people are
51:15 - now watching you yeah that's kind of
51:17 - good for you too if you put it in that
51:19 - perspective it's gonna be easier for you
51:21 - exactly
51:22 - yeah yeah comfortable with the
51:24 - uncomfortable yeah
51:25 - literally yeah and i said that in one
51:27 - call actually is get
51:28 - get super comfortable with the
51:30 - uncomfortable right like as in
51:32 - as in get used to putting yourself and
51:34 - if you if you're not feeling
51:36 - uncomfortable day to day right then
51:37 - you're not doing enough period right
51:39 - like i have two people on the court
51:41 - right now who i really want to bring up
51:42 - because like
51:43 - literally like both of them absolutely
51:45 - amazing students and i coach both of
51:48 - them
51:48 - and they're both on there on the call
51:50 - right now both have actually done some
51:51 - awesome stuff recently and i'd love to
51:52 - talk about it
51:53 - before i do that i literally just want
51:55 - to go ahead and jump on because
51:57 - i know they joined in afterwards i'll
51:59 - name drop it once once when i'm about to
52:01 - bring them on but basically
52:02 - uh for those of you who have jumped in
52:05 - afterwards we were talking about the
52:06 - ways to make money with code right so
52:07 - the first was teaching and coaching
52:09 - second was freelancing and the third
52:11 - naturally would be the the job right so
52:13 - i'm gonna go ahead and say just like uh
52:14 - let's go and say land a job right so and
52:17 - then we'll we'll dive into this
52:18 - afterwards
52:19 - but pretty much these are three things
52:20 - which we're going to sort of talk about
52:22 - and then the main things are
52:23 - teaching and coaching can start from the
52:24 - get-go from the beginning right
52:26 - freelancing you can pretty much go ahead
52:27 - and start at this point or even earlier
52:29 - if you pretty much go ahead and push for
52:30 - it
52:31 - and then literally after the third month
52:32 - so i'd say both of these would be the
52:34 - freelancing
52:35 - month so you could start and do that and
52:36 - remember this is overlapping so this
52:38 - would go ahead and you can still teach
52:40 - at this point
52:41 - but after the third month you can pretty
52:42 - much go ahead and apply for a job and
52:44 - even before that if you've got the
52:45 - confidence go for it i would say
52:47 - right but there's two people i really
52:48 - really want to highlight and that is
52:50 - um my awesome students that's corey and
52:53 - patch
52:53 - right so i'm going to go ahead and bring
52:54 - you guys on i'm a spotlight right now
52:57 - and both of you guys are doing awesome
52:58 - stuff man and i want to
53:00 - pretty much go ahead and and talk about
53:03 - that so
53:04 - firstly you guys are you guys are
53:06 - spotlighted right now so you got the
53:08 - they got the cameras in you man
53:11 - all right let me show you here we go
53:18 - yeah man literally it's a patch i
53:20 - already we spoke about printer actually
53:22 - mentioned
53:23 - uh that he jumped on the call with you
53:24 - in the previous badge yeah what's up man
53:26 - how you doing
53:27 - amazing good good and what's hold on
53:30 - brother
53:31 - hey yeah we got joe yeah we were pretty
53:34 - much we were talking about how
53:35 - you went from uh from a friend who just
53:38 - was interested in coding
53:39 - and turned that into a into a client
53:42 - yourself so jonah to explain to pretty
53:43 - much everyone
53:44 - what like where the initial sort of like
53:46 - moment where the initial sort of
53:48 - motivation to do that came from and also
53:50 - like
53:50 - what made you like believe in yourself
53:53 - to take that step in terms of like
53:55 - i can teach him like you know like as in
53:57 - i'm i'm
53:58 - even though like i'm relatively sort of
54:00 - new in this space but i can i can do
54:01 - this
54:02 - like what what took you to that yeah
54:04 - yeah well he was
54:05 - uh he was like me uh as a buddy that
54:07 - i've known for a couple years so
54:09 - you know i gotta i gotta throw that in
54:11 - there first
54:12 - because it was kind of like a little
54:13 - easier to get him as a client as a
54:15 - result of that but
54:17 - but you know ultimately he's a
54:18 - straight-up dude he would have said you
54:19 - know i don't know if he didn't want to
54:20 - do it
54:21 - yeah but um yeah he was a buddy of mine
54:24 - who was a bartender who
54:25 - lost his job due to the coronavirus and
54:27 - he was like dude
54:28 - i i sold life insurance for a month and
54:31 - i felt like i was gonna blow my head off
54:32 - and i was like i need something that's
54:34 - not so soul-sucking and i was like
54:37 - i've been learning computer programming
54:39 - and kind of getting into that world like
54:41 - you know if it's something you were
54:42 - interested in and and i was like and he
54:44 - was like yeah sounds good what are the
54:45 - classes like and i was like dude just
54:47 - give me a call
54:47 - yeah so i hopped on a call with him and
54:49 - just just talked about it i told him you
54:52 - know he's a musician too
54:53 - so um i was telling priyanchoo uh
54:56 - yesterday i think or the day before
54:58 - whenever we chatted it
54:59 - before it was all these days it was an
55:01 - amazing goal
55:02 - yeah it was cool but i told him that uh
55:06 - i really enjoy the creative element of
55:08 - it like that's kind of what i've been
55:09 - really enjoying most about
55:10 - coding and that's kind of what makes me
55:12 - like chance to get up every day and to
55:14 - do it
55:15 - yeah so i told him you know dude you can
55:17 - work from home you can do this you can
55:19 - do that but ultimately
55:20 - you know you can't just do it for the
55:21 - money you got to enjoy it so
55:23 - you being a creative person yeah i feel
55:25 - like you would really
55:27 - latch on to the creative element and be
55:28 - able to make some cool [ __ ] and you know
55:30 - just have a lot of fun with it just
55:32 - playing around and stuff like that and
55:33 - um
55:35 - you know he's super super new knows
55:37 - nothing so i was like okay cool well
55:39 - that would be a good place for me to
55:41 - sort of like
55:42 - brush up on you know because i'm only
55:45 - four months in but you know i've put
55:47 - probably you know maybe about 300 hours
55:50 - into my learning
55:51 - yeah and so i felt really good and i
55:53 - built a ton of web pages you know i'm
55:55 - working on the amazon clone you know
55:57 - like i'm constantly practicing and stuff
55:58 - so i was like
55:59 - i could definitely get something going
56:02 - so what i did was i made a powerpoint
56:04 - presentation for him
56:06 - um of kind of like you know html css
56:10 - basics
56:11 - right and i was like okay i'm going to
56:12 - make a 10-page powerpoint
56:14 - and we're going gonna hop on a call and
56:16 - i'm gonna just take him through this
56:17 - little presentation
56:19 - and break stuff down for him and and
56:21 - even you know i pulled up my vs code and
56:23 - i was like you know here's how it looks
56:25 - yeah and so you know did examples and
56:26 - stuff like that and then um
56:28 - that was easily you know an hour and a
56:30 - half long call and nice
56:32 - and i gave to to your point that you
56:34 - made on your little
56:35 - picture sonny i yeah i was like dude
56:38 - first call will be free
56:39 - so i'll just give you sort of like you
56:41 - know a foot in the door to the whole
56:43 - like idea of it and stuff like that yeah
56:46 - and i was like
56:47 - because if you don't like it and you're
56:49 - like you know at the end of it i don't
56:50 - know if i really want to do this seems
56:52 - like a lot of work i don't know if i'd
56:53 - be into it
56:54 - you didn't waste any money but at least
56:56 - now you know so it's like you know if i
56:58 - can offer that to you know i'm happy to
57:00 - do so
57:01 - and then at the end of the call he was
57:03 - so stoked and amped and jazzed about it
57:05 - that he wants to do like five lessons a
57:07 - week
57:08 - that's insane dude 20 bucks an hour so
57:12 - yeah dude uh [ __ ] unemployment i don't
57:14 - need that [ __ ] now you know what i mean
57:16 - so it's just like it's a it's just a
57:17 - cool
57:18 - like because again you know one way to
57:21 - get better at your skills
57:22 - is to coach and teach so you kind of
57:24 - like reaffirm it in your own head
57:26 - 100 stuff like that so that's why i was
57:28 - like dude i think teaching would be a
57:30 - great way for me to sort of like
57:32 - supplement my learning and might not
57:34 - supplement it but you know
57:35 - in addition to yeah um and just a way
57:38 - for me to like and i already got a call
57:41 - from another buddy that is interested so
57:42 - it's just amazing
57:44 - yeah word travels fast and and to go
57:47 - back really quick to your other point
57:49 - about about the camera is
57:51 - you know obviously since i do the acting
57:53 - thing
57:54 - that's one of the things that they teach
57:55 - you because a lot of people can
57:58 - be the best actor in the world when the
57:59 - camera's not on them but once the
58:01 - camera's on them
58:02 - and you got 30 crew members all staring
58:05 - at you
58:06 - each shot is cost like 50 000
58:09 - so if you [ __ ] it up you just cost a
58:10 - production 50 000 so it's just like
58:13 - they're like
58:13 - all the managers and agents are like you
58:15 - better get comfortable on camera so i
58:17 - think that's definitely something to
58:19 - practice is like
58:20 - i think like 20 bucks on amazon you can
58:22 - get a tripod everybody's got a phone
58:24 - just set it up on the tripod and film
58:26 - yourself and just
58:27 - like do a little presentation and go
58:30 - back and watch it and
58:31 - you know it's it's you know it's just
58:33 - like programming man you just gotta
58:34 - practice and before
58:36 - you know it stuff starts to click and
58:38 - you start to get better and you're like
58:39 - all right
58:40 - you go from going i'm really nervous i
58:42 - don't know what to do i don't know what
58:43 - to talk about too
58:44 - all right what do we talk about today
58:45 - all right let's see here what can we you
58:47 - know
58:47 - you know and you just like you grow into
58:49 - it so exactly and to add to that i
58:51 - remember when we did the challenge
58:53 - patch submitted his uh his sort of um
58:56 - his challenge in and he gave a video
58:57 - with it
58:58 - and i remember me and kazi were sort of
58:59 - looking through her and were kind of
59:00 - watching stuff through
59:02 - and just having a chat and then we were
59:03 - watching it through and like everyone
59:05 - was submitting very sort of like rough
59:06 - videos and stuff like that and it was
59:08 - barely showing their face or anything
59:09 - and then patrick you had the laptop next
59:11 - to him and and
59:13 - and i think it was it was right it was
59:14 - the laptop next to you and you were
59:15 - literally like kind of standing next to
59:16 - it and you had a backdrop and you were
59:18 - just literally talking to the camera and
59:19 - you're like this is what i built
59:21 - and like i remember being hospital holy
59:22 - [ __ ] like this is like this
59:24 - and that stuck that stuck with us and
59:26 - and and it really
59:29 - moved fast because after that point we
59:31 - knew who patch was
59:32 - right so like literally we had watched
59:34 - all these other videos but we just
59:35 - watched one video where it just took
59:37 - he took a little bit more effort in
59:38 - doing it put himself in that position of
59:40 - just like
59:41 - you know like this is a new space i
59:43 - don't feel like 100 comfortable i'm
59:45 - going to do it
59:46 - i'm going to i'm going to commit to it
59:47 - i'm going to do it and then literally as
59:48 - soon as we knew who patch was after that
59:49 - video we're like okay that's that guy
59:51 - like and we knew exactly who he was and
59:53 - that that's like the difference between
59:55 - building an effective network versus
59:57 - somebody who's like got a thousand
59:59 - people on linkedin and nobody knows who
60:01 - he is
60:02 - right well she is right so there's a big
60:03 - difference there now an amazing stuff by
60:06 - the way patch so like
60:07 - corey on a move to to you now like corey
60:09 - you you've literally like
60:11 - kind of like shifted even my mindset in
60:13 - terms of like uh and sort of like the
60:15 - way you think and sort of
60:16 - the way you keep you grounded and when
60:18 - you when you're sort of learning
60:20 - what would you say has has been your
60:21 - like top three tips in terms of like
60:24 - pushing yourself pushing your sort of
60:25 - learning in the space
60:26 - and like how do you sort of balance like
60:28 - work and life with with your sort of
60:30 - progress
60:32 - you're coming heavy hitting right now
60:36 - uh thank you thank you for the kind
60:38 - words um
60:40 - wow i would say
60:43 - maybe top three tips um
60:47 - find someone who has what you want and
60:50 - go ask them how they got it
60:52 - amazing right um there's a little saying
60:54 - that says like if you want what we have
60:56 - do what we do
60:58 - and it's really simple in the sense that
60:59 - like
61:01 - um i'm literally gonna copy exactly what
61:04 - you say in the react build and then have
61:05 - a react product right and so the same
61:07 - holds true in other areas of our life if
61:09 - you need to know more about marketing
61:11 - go find someone who's good at marketing
61:12 - and ask them how do i do this
61:14 - so i think kind of that in conjunction
61:17 - with finding yourself a mentor
61:20 - all the best people in the world have
61:22 - coaches
61:23 - we don't do this alone right like uh our
61:26 - diversity is our strength and like
61:28 - unity is huge right we need other people
61:31 - so
61:32 - um i think i think the biggest thing is
61:34 - kind of exactly fine
61:36 - find someone who and maybe it's not
61:39 - technical
61:40 - right maybe you know being a developer
61:43 - isn't solely just about oh i can code
61:46 - the best code in the world because
61:48 - if you're hard to get along with if you
61:50 - don't cooperate well
61:52 - if you have trouble right if you have
61:55 - trouble communicating
61:57 - um that might work really well for a lot
62:00 - of people
62:02 - um but i will say that you will go so
62:04 - much farther
62:05 - if you have some of those kind of soft
62:07 - skills right
62:08 - um maybe what you're attracted to isn't
62:11 - like the hard stuff like oh man he's
62:13 - like a guru at this but like
62:15 - maybe it's just like how he's able to
62:17 - connect with people yeah because
62:18 - this is all relationships right and we
62:20 - see this in the pwg community
62:23 - within cp network is huge
62:26 - and i'll tell you like um i i really
62:30 - don't
62:31 - i don't know i i
62:34 - don't really like being the i like being
62:36 - behind the scenes
62:37 - i like being where no one can see me
62:40 - working and making sure that i hold
62:42 - everybody else up like that's where i
62:44 - like to be and some people are like
62:46 - front
62:47 - front and center they like the spotlight
62:49 - not me
62:50 - right i i don't mind coming out into it
62:52 - but i really like being on the back
62:54 - where no one really knows who's doing
62:57 - that but like you're a part of something
62:59 - that's keeping everything going right
63:00 - and that's just for me
63:02 - um and so i've had i've had people reach
63:05 - out to me
63:06 - um and i just sent off a
63:11 - uh ten thousand dollar contract for two
63:13 - sites yesterday
63:15 - nice and like a waiting to hear back you
63:18 - know and so
63:19 - but it's all it's like you you never
63:22 - really know so i guess the second thing
63:23 - i would say is like
63:25 - you never know who's watching you yeah
63:27 - right
63:28 - you never know who's got their eye on
63:30 - you and so by documenting your journey
63:32 - by putting yourself
63:33 - out on social media by connecting with
63:36 - people and saying hi
63:37 - and putting yourself out there even if
63:39 - it's scary man
63:40 - um people resonate and connect with that
63:44 - and uh and that's how some of these
63:46 - people have come to me
63:47 - um like pat said i think the other thing
63:50 - and maybe the third most valuable thing
63:54 - i i think and this is just for me
63:56 - personally
63:58 - um money is a good motive
64:01 - right you all gotta eat we need to pay
64:02 - our bills um
64:04 - but i will say that like for me i have
64:06 - found
64:08 - the work that i'm doing so much more
64:10 - fulfilling when money isn't the driver
64:12 - 100 and like what i mean by that is
64:15 - uh helping other people and giving
64:18 - something to them
64:19 - even if even if they have nothing to
64:21 - give me because i want you to do well
64:24 - i want you to be the best possible
64:26 - version of yourself i want you to go
64:28 - conquer the world
64:29 - and if that means i don't that's okay
64:31 - yeah like i'll give that to you and
64:33 - there's not this sense of oh i'm holding
64:35 - back or i'm gonna keep a secret or like
64:37 - oh you know i can't give you that
64:39 - absolutely not right i want you to be
64:42 - better
64:43 - because like we all so if i do whatever
64:46 - it is
64:47 - um and a lot of that has been my
64:48 - experience right
64:50 - working for free and and like in turn
64:54 - the return on investment for me has been
64:56 - like so valuable
64:58 - i get so much it's a two-way street
65:00 - right it's not like i'm unpaid
65:02 - i might not get the financial but i get
65:04 - so much in terms of other forms of
65:06 - payment right
65:07 - the learning uh the practice
65:10 - with the process that's huge so like
65:13 - yeah
65:13 - you know don't mistake the practice with
65:15 - the process like and if you can learn to
65:17 - fall in love with the process
65:18 - you will go so much farther than if if
65:21 - all you care about is the product
65:22 - yeah because the product is irrelevant
65:25 - you know um
65:26 - so i'll hop off my soapbox
65:30 - dude you took that i ran that was
65:32 - awesome man yeah that's awesome stuff
65:34 - yeah yeah i would say like to to
65:37 - to literally pull the the sort of like
65:39 - golden points from what cory said there
65:41 - as well like
65:42 - so like literally like don't focus on
65:44 - the monetary gain or the monetary value
65:47 - when you're doing this stuff right
65:48 - like focus on like the fulfillment right
65:50 - if something fulfills like you
65:52 - internally
65:52 - and makes you happy even if it literally
65:54 - just makes your day a little bit better
65:56 - right
65:56 - like like when patch like helped his
65:58 - friend out like or when corey like is
66:00 - literally like building his skill set
66:01 - or like helping somebody bring up
66:03 - themselves in terms of somebody who
66:04 - might have been introverted and like
66:05 - kind of getting them out of their show
66:07 - right
66:07 - like all of those things trust in that
66:10 - as as being like
66:11 - more worth like it doesn't matter if
66:15 - someone was to turn around and say
66:16 - here's two thousand dollars right for
66:17 - like a
66:18 - coaching session if you instead are able
66:21 - to help somebody like say for example
66:22 - you have an introvert guy
66:24 - who's like an amazing coder but
66:26 - literally just lacks
66:27 - all the soft skills right now the
66:29 - problem is is that yes sure they can
66:31 - code up the craziest websites
66:32 - but the thing is nobody would end up
66:34 - working with them because they can't
66:35 - ever communicate they can't ever like
66:37 - contact like you know that close that
66:38 - barrier so
66:39 - there's a lot more to the space than
66:41 - just technical skill
66:42 - right now in order to like build on that
66:45 - like literally exactly like cory said it
66:47 - doesn't mean that you have to be the guy
66:48 - in front of the camera or the guy
66:50 - in the front right there's there's
66:51 - completely like positions to be able to
66:53 - go ahead and take that person who's
66:55 - quiet and use your skills
66:57 - as a person who can who isn't introvert
66:59 - and kind of has that sort of ability to
67:01 - talk and
67:02 - and have that relationship building and
67:04 - pretty much go ahead and teach them that
67:05 - and that's going to help you
67:07 - trust me when i say all of the returns
67:10 - will be tenfold
67:12 - in time like give it just give it time
67:14 - and everything will like
67:15 - flood in like look at garyvee right when
67:17 - you look at garyvee
67:18 - so like garyvee literally if you follow
67:20 - his instagram the guy drops
67:22 - value after value after it's just
67:25 - endless like
67:26 - good stuff like and it's it's literally
67:28 - just constant
67:29 - value being dropped right but we never
67:32 - see him say like oh
67:33 - like you have to go like i'm charging
67:35 - this much or i'm charging this or this
67:36 - or this
67:37 - instead now he's so valuable because he
67:39 - just provides so much value that if
67:40 - somebody wants an hour with garyvee
67:43 - god knows how much they have to pay for
67:44 - that hour right like as in
67:46 - so as you see like the stuff comes
67:48 - naturally you just keep providing
67:50 - and not only your skill set going to go
67:52 - ahead and like and explode
67:54 - but you're going to go ahead and get
67:56 - actually a happier life out of it and
67:57 - that's why that's why we're all here
67:59 - right it's not it's not just to land a
68:01 - job why are we landing a job so we can
68:02 - actually have a better life
68:04 - right but what's the point of focusing
68:05 - on something which makes us x amount of
68:07 - money an hour
68:08 - if we don't enjoy that life right you
68:10 - really want to go ahead and focus on the
68:11 - fulfillment
68:12 - and then once you focus on the
68:13 - fulfillment and the value you can
68:14 - provide to somebody else
68:15 - then go ahead and that will trans like
68:18 - that will go ahead and translate to
68:20 - sort of some kind of gain and or change
68:22 - in your life and trust me
68:23 - it'll be one where money is not an issue
68:26 - right
68:27 - sunny to be honest that was worth legit
68:30 - fifteen hundred dollars without a doubt
68:32 - seriously
68:32 - whatever you guys have said that was
68:34 - gold and to be honest i couldn't agree
68:36 - with corey anymore
68:38 - like seriously it it doesn't matter if
68:40 - you guys are not
68:41 - like the best like if you can just help
68:44 - someone and if you find some kind of
68:46 - satisfaction in that
68:48 - the money is is not even a factor to be
68:51 - honest
68:52 - it just doesn't matter did uh
68:55 - his screen sharing it sort me
68:58 - oh i'm gonna go ahead and stop that yeah
69:00 - nice okay
69:02 - add on to that point again like when
69:04 - you're talking about
69:05 - it's not about your credentials it's not
69:07 - about if you're the best coder in the
69:09 - world because
69:10 - again i hate talking about this because
69:12 - it makes me feel like i'm like
69:13 - boasting but but as an actor when you go
69:16 - to
69:17 - go into an audition yeah the casting
69:19 - director doesn't care if you're a good
69:21 - actor if you're an
69:22 - [ __ ] they want to put they want to
69:24 - trust
69:25 - that the person that they're sending to
69:27 - set to potentially spend
69:29 - six months with everybody else they want
69:32 - to trust that that person is not going
69:33 - to drive everyone else crazy
69:35 - yeah so there's always somebody
69:38 - if you look at it this way there's
69:39 - always somebody better there's always
69:41 - somebody more qualified
69:43 - but that's not what anyone cares about
69:45 - anymore people care about who you are as
69:47 - a person and if you're
69:48 - a good person and and like if sonny was
69:50 - a dick
69:51 - then he'd have three participants not
69:53 - 86.
69:54 - yeah saying like the fact that
69:56 - somebody's such a nice person totally
69:58 - so open and so and so willing to help
70:00 - everybody
70:01 - and like you said i'm pretty damn sure
70:03 - everybody put their hand up when he
70:04 - asked if we trusted him because i sure
70:06 - as hell do and that's because
70:08 - he's shown that he can be trusted and
70:10 - all this stuff so it's
70:12 - i feel like it's more about that and and
70:14 - um you know
70:15 - like i said you could talk to anybody in
70:17 - this group right now
70:19 - everybody's down to help everybody else
70:21 - you know what i'm saying there's no
70:22 - there's nobody
70:23 - in here i can add on to you patch too
70:25 - yeah do it
70:28 - yeah yeah you know like like
70:31 - i don't know how many people watching
70:33 - have experienced this
70:34 - after a call right where your energy is
70:38 - pumped
70:38 - you feel super stoked and then like a
70:41 - day goes by
70:42 - and down you go that's right you feel
70:45 - like your wheels are spinning and you
70:47 - don't know
70:48 - where do i put this momentum you know
70:51 - how
70:52 - where do i what direction do i go i
70:54 - don't know how to
70:56 - keep that natural flow of content right
70:59 - how do we do that and the best
71:02 - advice i've ever gotten um
71:06 - like our our true value is in being
71:09 - ourselves
71:10 - don't try to be sunny because sunny
71:12 - sunny yeah
71:14 - don't try to be patched because patches
71:15 - patch like be who you
71:17 - are because that's the most valuable
71:20 - right
71:20 - like really for real and and likes you
71:23 - know uh you don't have to be
71:25 - anything more or less than who you are
71:28 - put that
71:28 - out there like that's who people want to
71:30 - get to know because let me tell you what
71:31 - happens if you don't
71:32 - and you put some fake [ __ ] out there as
71:35 - soon as people find out or and really
71:37 - you're
71:37 - stuck with feeling that like at the end
71:39 - of the day when you step away from the
71:41 - performance
71:42 - side of it that you're not connected
71:46 - with yourself right and all of that will
71:48 - come collapsing down and you'll
71:50 - ultimately return to who you are anyway
71:52 - so just stay with that at the beginning
71:55 - and then you don't have to change
71:57 - yeah right you don't have to try to do
71:59 - something different so i think
72:00 - that's a really easy way to keep stuff
72:02 - very naturally occurring is like
72:05 - just enjoy who you are man and like have
72:07 - fun with the process
72:08 - um and i guarantee like instead of
72:11 - looking outside yourself
72:13 - for something to be or someone else to
72:15 - be
72:16 - uh if you feel like you're spinning the
72:18 - wheels like
72:19 - step into yourself man you know uh
72:23 - like let me say like you have been
72:25 - waiting for you
72:27 - and the you later on that person depends
72:30 - on you and needs you right now
72:31 - and if you don't show up for that person
72:33 - right now who the [ __ ] is going to
72:36 - that's powerful dude that's so powerful
72:39 - yeah for real
72:39 - honestly the biggest take away from that
72:41 - is that do not try to be someone who you
72:44 - are not like do not write like
72:45 - if you are not like an extroverting
72:48 - person do not worry about it to be
72:49 - honest like
72:50 - sunny might not have been an extroverted
72:52 - person and if you're trying to
72:54 - live someone else's life no one is gonna
72:56 - like you're not living yours so it's
72:57 - kind of pointless to live your life too
72:59 - yeah a hundred percent and literally
73:01 - guys think of it this way right
73:03 - like we're always scared like imagine
73:04 - when you when you kind of like think if
73:06 - you want to you want to start a company
73:07 - right
73:07 - the first thing we kind of think of is
73:09 - like no i have this like gem right and
73:11 - somebody's going to steal my gem
73:12 - right because then like i have the next
73:14 - facebook somebody's gonna steal my
73:15 - facebook right
73:16 - and we always kind of have this mindset
73:18 - of like no it's mine like i don't want
73:20 - to share this thing right
73:21 - like now think of it this way right so
73:23 - firstly if you're ever doing that
73:25 - that's the worst thing you could do
73:27 - trust me i spoke to so many ceos now
73:30 - and every single one of them said like
73:31 - if i could start from the beginning i
73:33 - would tell
73:33 - everyone my secrets i would tell
73:35 - everyone my my idea from the get-go
73:37 - because it's only going to help me get
73:39 - there faster
73:40 - right now also when you do what corey
73:42 - said you just be yourself
73:44 - nobody can steal you because you're you
73:47 - right nobody i can't be patch because
73:50 - patches patch i can't be corey because
73:52 - cory's cory and that's what makes them
73:54 - special right
73:54 - like if you if everyone kind of like
73:56 - tries to mirror the person that they
73:58 - want to become like
73:59 - right which is great for acquiring skill
74:01 - motivation that sort of stuff
74:03 - but like like like corey said it's going
74:05 - to get to a point where like
74:06 - it becomes so hard and you're kind of
74:08 - like trapped in a shell
74:09 - they're like trust me and this is what i
74:11 - said like literally like if
74:13 - a kind of an extreme way of doing it but
74:15 - if you if you show up every day
74:16 - in an uncomfortable situation for me i
74:18 - was putting myself on camera every day
74:20 - right like putting yourself out there
74:22 - every single day
74:23 - it does like they've reached a point
74:25 - where i was like [ __ ] it i can't do
74:26 - anymore i can't put this fake stuff on
74:28 - it's i have to be myself because it's
74:30 - just too like intense like i just like
74:32 - you you build up this internal
74:34 - excitement and trust me it'll just pop
74:36 - and it's like right now myself
74:38 - on camera you know and that is where
74:40 - really the trust comes because like even
74:42 - when you're trying to land a client
74:44 - right all the client meeting is right
74:45 - it's not literally you sitting there
74:47 - saying
74:47 - i can code and react i know firebase i
74:49 - can do redux i know data layer stuff
74:51 - like all this
74:52 - is none of it is that right it's
74:54 - actually just building trust between you
74:56 - and the client in that conversation
74:58 - that's all it is
75:00 - once you have trust that the salary the
75:02 - money everything else is secondary
75:04 - but the trust is the first if you don't
75:06 - have trust don't even bother talking
75:07 - about money
75:08 - with that person or anything like that
75:10 - money is basically
75:11 - again like you guys said right that
75:13 - money is basically a lagging indication
75:15 - of who you are and uh
75:17 - what are your skills so like not just
75:18 - your technical skills but also your soft
75:20 - skills so if you guys don't focus enough
75:22 - on your soft skills basically it's not
75:23 - going to be anything related to money
75:24 - like
75:25 - you can be the best best quarter again
75:27 - like corey said you can be the best
75:29 - quarter but it doesn't matter if you
75:30 - if you can't speak in front of someone
75:31 - else right so if i couldn't speak in
75:33 - front of sunny right now like on the day
75:35 - when i actually
75:36 - got on a call with him yeah trust me i
75:38 - don't think that i would have been over
75:39 - here
75:40 - i'm i'm sure i wouldn't have been aware
75:42 - yeah so
75:43 - literally and that took brian to
75:45 - stepping out of his comfort zone and i
75:46 - remember and this is like something
75:48 - which
75:48 - both you and corey did actually so i
75:50 - remember both of you sent
75:52 - like meaningful messages when you when
75:54 - you did something i can't actually
75:55 - remember how me and pat started talking
75:57 - um i think i kind of uh i just think
76:01 - like i
76:01 - joined a bunch of your calls and then i
76:03 - was just like [ __ ] i wanna i wanna
76:05 - get better so i'm gonna reach out to
76:07 - yeah yeah i think it was like that yeah
76:08 - but for
76:09 - literally i remember like corey sent me
76:11 - a message which was super polite it was
76:13 - like a very important message it's like
76:14 - i hope you're having a great day
76:17 - full of positivity and it was literally
76:19 - a case of like like i want to take
76:20 - myself to the next level and just
76:22 - putting himself out there right and i
76:23 - read it and i
76:24 - and this is the crazy part right i get
76:26 - hundreds of messages now like i
76:28 - literally can't find
76:29 - messages from my girlfriend on instagram
76:30 - now so i'm like don't send me messages
76:32 - on instagram
76:35 - because like they get buried right so
76:38 - like
76:39 - and then she's like you didn't reply and
76:40 - i'm like just don't do it
76:42 - but um yeah
76:45 - and then literally like it got to a
76:46 - point where that but then those messages
76:49 - just find a way through like i'm telling
76:51 - you because i read that message and i
76:52 - was like damn man like i really want to
76:54 - you know i want to jump on a call with
76:55 - this guy
76:56 - and i remember same with priyanshi like
76:58 - i was on the live stream
76:59 - i had no idea of his age i had no idea
77:01 - of anything
77:02 - all i knew is everyone was spamming
77:04 - comments saying like you know it was
77:05 - like um
77:07 - i was like oh yeah like i want to jump
77:08 - on i want to jump on the call like let
77:10 - me jump in the call let me jump in
77:11 - and then i remember apprehensive really
77:13 - nice message and i was like
77:15 - hey sunny like i would really love to
77:16 - jump in the car i can't remember the
77:17 - exact words but it was like quite a
77:18 - hefty like
77:19 - it was like quite a message and i was
77:20 - like dude like if he's wrote this like
77:22 - i'm bringing that guy on the call like
77:24 - and then like one more thing i would
77:26 - like to tell that yeah
77:27 - i am not if you guys think of me on
77:30 - camera and if you guys think of me in
77:31 - real life
77:32 - there's actually like in school when i
77:34 - was when i used to be in school people
77:36 - never even used to like see me okay and
77:40 - even i didn't like like to approach
77:42 - people themselves again
77:43 - and then this was a huge step for me too
77:45 - because i'm not that kind of a person
77:47 - who is good with people i always say
77:48 - that because
77:50 - from my early ages i was like really
77:51 - into books and stuff and
77:53 - always i can to no i was like the nerdy
77:55 - guy as people call it okay
77:57 - yeah so although it didn't matter for me
78:00 - because
78:01 - i was like okay now this is something
78:03 - that i know and i would like to share it
78:04 - with the community
78:05 - and this that was the reason why sunny
78:07 - actually bought me on the call he said
78:08 - he told me that okay
78:10 - this guy's actually providing some value
78:11 - let me let me bring him on the call
78:12 - again
78:13 - and the moment he bought me on the call
78:14 - trust me it was i'm going to tell this
78:16 - to you sonny
78:17 - that i was actually typing one more
78:19 - message back then
78:20 - and if i hadn't if i didn't hit that
78:23 - blue button back then i could have hit
78:24 - the cancel button i
78:26 - could have done that yeah that would
78:27 - have been scary you know yeah but i hit
78:29 - the blue button just by a mistake and
78:31 - then i was all
78:32 - panicking you know like what the hell
78:33 - did i do just now and why am i on the
78:35 - live stream
78:36 - the next thing i know the the momentum
78:39 - just took me
78:40 - up like i didn't care i thought of sunny
78:42 - to be a person
78:43 - who who is like a god is he basically a
78:46 - god but
78:47 - the thing is that he was he was not
78:49 - someone who was at home from whom i was
78:50 - scared of because he
78:51 - i thought there was some kind of
78:53 - similarity between us he was also a
78:54 - coder i was also a coder
78:56 - and in my school to be honest like i do
78:58 - not find anyone
78:59 - else like me because they're all
79:02 - there's a group that i call the popular
79:04 - group okay like they're all
79:05 - super popular in the entire school and
79:08 - and that guy who just sits back and he
79:10 - does his homework and
79:11 - you know he's not that good with
79:12 - teachers and stuff too but then too
79:15 - it it didn't matter to me because i just
79:17 - tried to take a step further okay i just
79:20 - tried that okay what's
79:21 - that can happen i thought of that okay
79:23 - what supposed to happen
79:24 - maybe maybe some people might not like
79:27 - it and they'll just be like okay dude
79:29 - this might have been wrong
79:30 - like even even with some some things
79:32 - that happen
79:33 - on a day-to-day basis sometimes it
79:35 - happens that you're wrong okay
79:37 - don't be afraid to be wrong exactly like
79:40 - main thing yeah literally the main thing
79:42 - is like don't be afraid to be wrong
79:44 - don't be afraid to
79:45 - you know like put yourself in those
79:47 - uncomfortable positions and the one
79:48 - thing is is that like
79:49 - if you take positivity guys like into
79:52 - any situation i guarantee the outcome is
79:54 - going to be positive for you
79:56 - yeah like it's because if you go into a
79:57 - room full of negative people
79:59 - but you're just that one person who is
80:01 - positive it's contagious
80:02 - right like it will change like
80:04 - everything and it will become like
80:06 - something which is a like you will shift
80:08 - people's mindset just like
80:09 - if you walk into a a room full of happy
80:12 - people and you're like
80:13 - super negative you're gonna kind of flip
80:15 - the dynamic in that room right so
80:18 - that's what that's pretty much how we
80:19 - started talking and that's pretty much
80:20 - how
80:21 - it blew up and that that's why literally
80:22 - brienne was on the court right now today
80:24 - so with that said guys yeah
80:28 - uh we're gonna uh i'm just gonna go
80:30 - ahead and jump into
80:31 - some of the react stuff now so that way
80:33 - we can go ahead and like get everyone
80:35 - involved in it and things like that
80:36 - but otherwise like guys i just want to
80:38 - say a massive thank you to to
80:40 - to priyanshu because he dropped some
80:41 - crazy value bombs to patch
80:44 - and well done patch for the client
80:45 - united awesome stuff and corey literally
80:48 - straight fire man like you
80:49 - you in the beginning you were like i'm
80:50 - nervous but you did you ran with that
80:53 - and
80:53 - absolutely crushed it so you guys are
80:55 - awesome
80:56 - uh we're gonna go ahead and jump into uh
80:58 - the react basic stuff right now
81:00 - and today we're going to be talking
81:02 - pretty much about um
81:05 - everything involved with like what you
81:07 - need to learn what you need to go ahead
81:08 - and do
81:09 - what you need to go ahead and do to get
81:11 - started with with
81:12 - reacts and some of the top things which
81:14 - i consider as key points
81:16 - right so key points that you're going to
81:17 - need to go ahead and cover and how i
81:19 - imagine like if i was to start from the
81:21 - beginning right now what what what what
81:23 - approach would i take
81:24 - right and and then and this is sort of
81:26 - like from from
81:28 - things i've learned from things i wish i
81:29 - kind of knew before
81:31 - and all of those things right so we're
81:32 - going to go ahead and jump into that now
81:34 - um so what i would say is let me go
81:36 - ahead and share my screen right
81:38 - so we already talked about all of this
81:40 - stuff so i'm going to go ahead and clear
81:41 - that now
81:42 - but the first thing i'll do is pretty
81:44 - much for those of you guys who aren't
81:46 - familiar with
81:47 - um how we actually go ahead and start
81:49 - react apps
81:50 - uh don't go don't build them from
81:52 - scratch right i know like people say
81:53 - yeah but it's kind of it will be useful
81:55 - it will be
81:56 - handy like don't don't do that the
81:58 - reason why i say don't do that is
81:59 - because honestly truthfully i've never
82:00 - had to do it
82:01 - uh that's the truth like in in in all
82:04 - the time i've been coding i've never had
82:05 - to go ahead and build something like
82:07 - that from scratch so
82:09 - until you need to do that don't do that
82:11 - right my
82:12 - approach would be use create react app
82:14 - so create react up is what we use in
82:15 - every single build
82:16 - it's the one the easy way that i would
82:18 - sort of recommend every single person go
82:19 - ahead and do right
82:20 - so that's the first thing the second
82:22 - thing i want to say is also i don't have
82:24 - the chat
82:24 - here guys so i can't actually see uh oh
82:27 - now i have the chat yeah so i can't see
82:28 - it if you manually do react it is going
82:30 - to waste your time and
82:31 - if you do not make it it's like exactly
82:35 - a single thing and it won't work exactly
82:38 - it's like the worst feeling ever you
82:39 - tried so hard and then also you feared
82:41 - so
82:42 - why not just take the easy way yeah
82:43 - literally just take the easier route
82:45 - because the truth is is like
82:46 - as as i said like you're you're going to
82:48 - be pretty much stuck on things which
82:50 - at lit tool would get perfect the file
82:53 - every time right
82:54 - and the benefit of using this tool as
82:55 - well as create react app is um
82:58 - where's it create react um is that it
83:00 - also gives you like the latest and
83:01 - greatest things
83:02 - when you're using react and things like
83:04 - that because they always upgrade stuff
83:05 - they always change things
83:06 - also and if you haven't seen like i
83:08 - would recommend watching the previous
83:09 - coaching course
83:10 - you can pretty much use special options
83:12 - with this to go ahead and set the app up
83:14 - with redux
83:15 - with with all sorts of other stuff which
83:17 - which if you've never used redox before
83:18 - it takes ages to go ahead and set that
83:20 - up typically
83:21 - or it's a very painful sort of process
83:23 - to go ahead and do that so in this case
83:24 - we're just going to copy this
83:26 - i'm going to go ahead and dive into it
83:27 - and i'm going to do it in a very
83:28 - practical way today so we're actually
83:29 - going to go ahead and literally just do
83:31 - stuff
83:31 - and i'll show you that way as opposed to
83:33 - sort of listing it out and drawing so
83:35 - it should be fun to watch as well so i'm
83:37 - going to open up a terminal
83:38 - um give me one sec also
83:41 - the crowd on youtube today is actually
83:43 - crazy so thank you guys for watching we
83:45 - have
83:46 - 260 people across youtube and facebook
83:48 - if you're enjoying it smash the thumbs
83:49 - up button guys
83:50 - um and get the video out to loads of
83:52 - people but let me go ahead and pull this
83:53 - up right here so we've got the terminal
83:55 - over here and uh just a little top tip
83:57 - for you guys
83:58 - uh if if you guys haven't got you see my
84:01 - terminal might look different you might
84:02 - have that kind of annoying squiggly crap
84:04 - in the beginning
84:05 - and then it's like takes up half the
84:06 - terminal and then you get to your
84:08 - command right
84:09 - i would recommend that everyone goes
84:10 - ahead and downloads this if you've got
84:12 - mac i'm not sure the windows alternative
84:14 - but
84:14 - is but like this is what you want to get
84:16 - if you've got a linux subsystem or mac
84:19 - right so it's called oh my zsh and i
84:21 - recommend that everyone goes ahead and
84:22 - grabs that when you get a chance right
84:24 - the installation instructions
84:26 - are on this page is super easy you
84:28 - pretty much just copy this
84:29 - into your terminal and it will install
84:31 - it for you now the reason is
84:33 - it's really handy when you're doing a
84:34 - lot of like development stuff but i'm
84:36 - gonna go into my desktop go into clever
84:37 - programmer
84:39 - and then i'm gonna do that command right
84:40 - so i'm gonna paste in
84:42 - that command so i'm going to go here
84:43 - create react up paste it in
84:46 - and then we got create react app my app
84:48 - so i'm just going to go ahead and call
84:49 - this one
84:50 - let's just say coaching call let's just
84:52 - say react basics
84:54 - react basics all right
84:58 - boom also alexandra's tuition i always
85:00 - see you
85:01 - uh comment dude and i always see like
85:02 - plus in front of your messages i don't
85:04 - know why is that is that intentional or
85:06 - like
85:06 - it's literally for the longest time me
85:08 - and cozzy was like have you seen that
85:10 - guy alexandros he always comments and
85:11 - he's got a plus
85:12 - none of us can figure out why there's a
85:14 - plus uh so
85:16 - let me know why there's that but um yeah
85:18 - so you want to pretty much go ahead and
85:20 - do this and this will start up the app
85:21 - right
85:21 - now um he did it again
85:24 - but but what i would say is while that
85:26 - happens right this this will become your
85:28 - holy bible like this is where i
85:30 - literally
85:31 - lived and breathed i lived and breathed
85:33 - these documentation like i'm
85:35 - not joking when i say that like i
85:36 - literally stood here like and i was
85:38 - doing
85:39 - tutorials and then i'd come back and
85:40 - this main concepts right here
85:42 - so even everyone that i do one-to-one
85:44 - sort of coaching with i tell them
85:45 - to very much like just like become
85:48 - insane with this section the reason
85:50 - being is because tutorials will teach
85:51 - you how to even the clones
85:53 - they teach you how to build stuff but
85:55 - until you know the actual inner and
85:57 - outer workings of react
85:58 - when you get stuck in some weird
86:00 - debugging situations
86:02 - the difference between you reading this
86:03 - stuff and not reading it will make a
86:05 - huge difference as to why
86:07 - understanding why like things aren't
86:09 - working in a really good like
86:11 - like things might be sort of rendering
86:12 - in a weird way or or like you might be
86:15 - like yeah but i used used effect but
86:17 - like if i asked everyone on this call
86:19 - right now let me go ahead and actually
86:20 - do that as a test right
86:22 - i've asked everyone on a quote on this
86:23 - call right now how many of us
86:26 - have used the user fact hook before just
86:28 - raise your hand
86:29 - it has confused me a lot right so i have
86:31 - weird box
86:32 - i had weird bugs but somehow it sold and
86:34 - i don't know the reason how
86:36 - it got stolen still yeah so literally
86:38 - but but like if you've used it just
86:39 - raise your hand so i've used it
86:41 - okay so loads of us have used it right
86:43 - now again i'm going to ask the same
86:44 - question now like
86:46 - raise your hand if you could explain to
86:48 - me exactly how the user factor works or
86:51 - why it works that way
86:54 - okay so victor nice dude that's awesome
86:57 - yeah but literally like there's much
86:58 - less time from you
87:00 - by teaching it over and over again every
87:02 - build yeah
87:03 - so exactly so that's the first thing
87:05 - that one pattern recognition the
87:06 - repetition is going to eventually drill
87:08 - in a point right
87:09 - now compar like combine that with
87:12 - um and we actually had a really good
87:15 - question just come through on on youtube
87:16 - right now as well i'm gonna
87:18 - uh mention that in a sec by a beer so
87:20 - don't worry i will answer that
87:22 - but um yeah so so the the
87:25 - the user fact hook right so like we use
87:28 - it a lot right
87:29 - but then actually understanding what it
87:32 - does
87:32 - and and why it works that way is crucial
87:35 - and trust me when i said because
87:37 - a question just popped in here right
87:38 - saying uh hey hello like i have a
87:41 - question why do you always use hooks and
87:43 - not class components
87:44 - right so firstly this is a question i
87:46 - get all the time
87:48 - and and to answer it very shortly is um
87:51 - you have two types of components in
87:52 - react okay so i'm going to go ahead and
87:54 - quickly take a a little screen
87:57 - uh drawing session here so we've got you
87:59 - get two types of components in react
88:01 - two types of component right uh oh man
88:05 - i hate it when that happens uh freeze
88:08 - undo
88:09 - oh man what the hell it's on the other
88:10 - screen okay anyway
88:12 - two types of components yeah
88:15 - and then what we're going to do is we're
88:18 - going to say the
88:19 - number one is class based component
88:21 - right so i'm just going to say class
88:22 - based
88:24 - component now if you've ever seen these
88:26 - or ever used
88:27 - them they're kind of messy like the
88:29 - truth is like if you've never worked at
88:30 - the functional you'd think it's a normal
88:32 - thing
88:32 - but they are kind of like messy you have
88:34 - a super uh you have a constructor you
88:37 - have some likes
88:38 - with stuff that you do in there that you
88:39 - might not understand why you do it you
88:41 - just do it right nobody wants to admit
88:43 - it but that's the truth right
88:44 - the second thing is you have functional
88:45 - components right now
88:48 - i still didn't understand that this
88:49 - keyword
88:51 - yeah i think there's
88:55 - millions of developers who still don't
88:56 - understand this keyword so
88:58 - don't worry but so there's a few
89:00 - differences here right
89:01 - the main one is is that this this was
89:04 - around
89:05 - this was the first type of component
89:09 - right so i'm just going to write this
89:10 - was first type of component
89:12 - all right so this one was around for
89:14 - longer right so i'm going to just draw a
89:16 - line between them
89:17 - right this was the first type of
89:19 - component it's been around for longer
89:20 - what does that mean it means that
89:22 - class based components are the ones that
89:24 - you're most likely going to run into
89:26 - when you're in a production environment
89:28 - now that's a very very important point
89:30 - right
89:30 - so this is the one that is most so this
89:34 - oh god why is it always let me change
89:36 - the color of this to be a bit more
89:38 - bright so there we go
89:39 - so this is most likely
89:43 - most likely the one
89:46 - you'll see in a
89:49 - production environment right and the
89:52 - reason why is because it's been around
89:54 - for longer which means that when the
89:55 - company started so imagine a company
89:57 - started in let's say
89:58 - 2015 2016 yeah they would have
90:01 - built the initial app using whatever was
90:03 - available and at the time class-based
90:05 - components were available
90:06 - functional components weren't available
90:08 - right as far as i can
90:10 - remember right so but the point is that
90:13 - functional components came later so
90:14 - these are
90:16 - these arrived later right and all these
90:19 - are
90:20 - is they're essentially just um they're
90:22 - functions right so if you a class-based
90:24 - component it has like a lot of
90:25 - fancy stuff inside of it which makes it
90:27 - work in a certain way
90:29 - functional components are literally it's
90:31 - imagine you have some kind of input
90:34 - right so you have some kind of input
90:36 - oops input
90:38 - you have the function itself right so
90:41 - this is the component so imagine this
90:42 - was like the product component
90:44 - so the function is up and it has an
90:45 - output and what is the output is
90:47 - literally the the jsx or the uh
90:49 - the sort of like what you see on the
90:51 - screen is literally like the product
90:53 - uh bit of html and js like javascript
90:56 - that you see that gets meshed out of it
90:57 - right
90:57 - but this is essentially this is all the
90:59 - functional component is
91:01 - every single time and if you've done any
91:02 - of the clones this is what we use
91:04 - we use functional components because
91:06 - it's very much like it takes some kind
91:08 - of input in this case the input would be
91:09 - props
91:10 - so this would be your kind of props or
91:12 - something like that and then the output
91:14 - would be the actual component
91:15 - itself right but then yeah
91:18 - can we use both class based and
91:21 - functional paste
91:22 - in a single reactor yes so very good
91:24 - question there
91:25 - and that's actually something which
91:26 - you're going to experience right
91:28 - so you would actually experience this
91:30 - and today we're going to purposefully do
91:31 - it
91:32 - right so i'm going to even show you that
91:34 - um but yes so so
91:35 - this actually goes into um so i actually
91:37 - had this of
91:38 - this come up once before right so i
91:40 - joined the company
91:42 - and and when i joined that company uh it
91:44 - was a huge company so it's called tesco
91:46 - and they work with um
91:48 - a lot of it has been written in
91:49 - class-based components and as a result
91:51 - the there's a huge benefit to using
91:53 - functional components so
91:55 - before we kind of move on to that next
91:56 - bit i'm just going to say these are easy
91:58 - to understand
92:00 - right these are easy to understand and
92:02 - then but the problem is
92:03 - that we couldn't use functional
92:05 - components for a very long time
92:07 - because they didn't support state right
92:10 - now there are two main concepts in react
92:12 - there's state and props
92:13 - right so we will get into these
92:14 - afterwards but there's two main concepts
92:16 - in react with state and props
92:18 - now state is like the short-term memory
92:20 - of components and
92:21 - um props is is how we customize
92:24 - each component so that one component is
92:27 - different from another component right
92:29 - um so these are the two main
92:31 - fundamentals in react
92:33 - um but these were these are easy to
92:36 - understand but the problem is that we
92:37 - could as soon as we needed
92:39 - state we couldn't use functional
92:40 - components anymore because they just
92:42 - didn't support it
92:43 - and then the bloody guys at facebook
92:45 - just
92:46 - changed the entire game and then and
92:48 - introduced react hooks
92:50 - right so react hooks pretty much leveled
92:52 - up all of our components
92:53 - to the point where now you can get state
92:56 - but you can also get a
92:57 - ton of other useful things right and now
93:01 - what you can essentially do is change
93:03 - every single class based component
93:05 - into a functional component so you can
93:08 - change
93:09 - a class-based component into a
93:10 - functional component now you can do it
93:12 - the other way
93:13 - you can do it this way but you don't
93:14 - want to do it that way yeah
93:16 - yeah so i just want to ask one thing
93:17 - that uh could we have one session
93:19 - just talking about you know some
93:21 - examples of converting a class based
93:23 - support into a functional based
93:24 - component
93:25 - we're actually going to do that right
93:26 - now after this i'll show you guys uh
93:28 - that's going to be really fun
93:29 - yeah so i'll show you guys right now
93:31 - after this because it's a really
93:32 - important thing and it's one of the
93:34 - the fundamentals of nailing that and
93:36 - most people the problem is is that yes
93:37 - the builds are awesome
93:39 - but everything is written with the
93:40 - cutting edge stuff the reality
93:43 - is that you're going to enter a company
93:44 - and they're probably going to have old
93:46 - code right which is class based
93:47 - now people people wonder is it worth
93:50 - learning functional then if the company
93:52 - is using class based or
93:53 - what i've seen in a lot of cases is
93:55 - people don't bother changing the class
93:56 - base into a functional now
93:58 - where where true value came out of this
94:00 - was when i actually went ahead and said
94:02 - to
94:03 - a company i said like i would not only
94:05 - implement the feature that they wanted
94:06 - to build
94:07 - but i would also take it a step further
94:09 - and be like okay i changed
94:10 - three files today all right so in my
94:12 - pull request three files are getting
94:14 - changed
94:15 - right so if you don't know what pull
94:16 - requests are david and the monster
94:18 - they get video i think yesterday go
94:20 - ahead and check that out and i think
94:21 - they cover a bit of gear
94:22 - um but um yeah so imagine like i
94:26 - submitted a change request or pull
94:28 - request
94:29 - and i pretty much said that like yeah
94:31 - this these are three files and they
94:32 - pretty much allow the app to now have
94:34 - messaging
94:35 - right let's just say like i've created
94:37 - three new files and i've changed three
94:39 - class-based components
94:40 - to messaging right now if somebody
94:42 - submitted that
94:44 - right a lot of developers are lazy
94:46 - they'll be like yeah sure that that can
94:47 - go in
94:48 - awesome job yeah but the developer who
94:50 - gets noticed by the senior developers
94:52 - the developer who sort of
94:53 - who is forward thinking and gets sort of
94:55 - the difference between
94:56 - somebody who's gonna get a 5k bonus in
94:59 - to 10k bonus or raise
95:00 - right is the one who goes actually you
95:02 - know what we changed three files
95:04 - and as well so this is going to provide
95:06 - the functionality that we need
95:08 - but we've got a little bit more extra
95:09 - time in this sprint or whatever so i'm
95:10 - going to go ahead and also change these
95:12 - three class class-based components
95:14 - to functional components because
95:16 - functional components will be easier to
95:18 - maintain
95:18 - right so let me go ahead and oops oh man
95:20 - what is this oops
95:22 - but sony if there are some class-based
95:24 - components that we never want to touch
95:26 - later like why would we even want to
95:28 - convert them functional
95:29 - no so the benefit here is uh i agree so
95:32 - there are going to be some components
95:34 - which like in
95:35 - i mean the truth is you think you're
95:36 - never going to touch it but there will
95:38 - there comes a time and point where that
95:39 - code will get touched again
95:41 - so i've touched code which has never
95:43 - been touched in like two three years
95:45 - and and it's like legacy kind of like oh
95:47 - man like this
95:48 - some kind of danger zone yeah and the
95:50 - truth is is that what companies do
95:52 - is they get contractors right so you
95:54 - pretty much have two types of people who
95:56 - work in a job
95:56 - you'll get you'll get the people who are
95:58 - um who are permanent
96:00 - and they sort of like you know they take
96:02 - pride in working because they're gonna
96:04 - be there for the next few years
96:05 - right so they're gonna write clean code
96:07 - then you get the contractors who sort of
96:08 - get
96:09 - paid very high amounts to come in fix
96:11 - problems and sort of do stuff and then
96:12 - they kind of go
96:13 - right so contractors usually work on
96:15 - like one to three months they get paid
96:17 - really good money which is why people
96:18 - contract
96:19 - but they don't really care about the
96:20 - state of the code after so
96:22 - in a lot of companies what you're going
96:24 - to see is that code which is like
96:26 - whoa how the [ __ ] did this get past like
96:27 - the the checks because
96:29 - because they they would have maybe force
96:31 - pushed it or they would have like got
96:32 - passed in some way shape or form
96:34 - but the point is that you're going to
96:35 - eventually touch some code which you
96:37 - never thought you would have had to
96:38 - touch
96:38 - right so the way of thinking of is if
96:42 - it's going to bring
96:43 - if this is a piece of code that you know
96:45 - has a chance of getting changed later
96:48 - i would recommend just taking the extra
96:50 - step and
96:51 - changing it over to a functional
96:52 - component but you have to do
96:55 - take care when you do that because doing
96:57 - that you end up refactoring a bunch of
96:59 - things and in the beginning
97:00 - i used to i got a bit over confident
97:02 - with this and i broke some stuff and
97:05 - it came to bite me back later so now i
97:07 - can do it very well
97:08 - but back in when i first started off it
97:10 - was kind of a tricky trait to go ahead
97:12 - and do
97:12 - but to break down a few of these things
97:14 - class-based components are
97:16 - more complex to um
97:19 - to maintain so they're a bit more
97:20 - complicated to maintain and also
97:22 - they have something called life cycle
97:24 - hooks a life cycle method sorry
97:26 - now life cycle methods examples of these
97:28 - and you're going to see these when you
97:29 - do tutorials and things like that
97:31 - are pretty much they're things like uh
97:33 - component
97:35 - dead mount right you might see this and
97:37 - you're also going to see another one
97:38 - like component
97:40 - wheel mount right now yes
97:44 - what are the difference between
97:45 - component did mount and wilmat i still
97:47 - to this day
97:49 - don't fully know all i know is that it
97:51 - depends because there's a difference
97:54 - like dead must be in the past and like
97:57 - the life cycle might it must be like
97:58 - some like a human life cycle right so
98:01 - it's just my understanding like a basic
98:02 - like i
98:03 - i don't even know what i'm talking about
98:04 - but correct me if i'm wrong but
98:07 - i think that the date mode must be
98:09 - something that happened earlier and now
98:10 - we want something else to happen
98:12 - yeah so you see the will yeah so so i
98:15 - say this this is the effect
98:16 - language yeah so if we have use effect
98:19 - so the
98:20 - regular code we have in use effect is
98:21 - the component dwell mount and
98:23 - the code in return is the component did
98:25 - amount
98:27 - yes so so to actually answer that
98:29 - question
98:30 - uh firstly let's just break it down so
98:32 - the difference between these two is this
98:33 - one happens before the component mounts
98:35 - this one happens after the component is
98:37 - mounted right but the truth is
98:39 - this actually was a bad pattern right so
98:42 - facebook realized afterwards this was a
98:43 - bad pattern it was causing a lot of
98:44 - people
98:45 - to break their code and there was
98:46 - another one called component should
98:47 - update
98:48 - and then there was like another one
98:49 - which was component get derived state
98:51 - from props which
98:52 - yes what the hell does that mean like
98:54 - it's kind of weird
98:56 - in itself the truth is i've used all of
98:58 - them i have i do know what they mean but
98:59 - that the reality is the naming's
99:01 - the namings are terrible right and the
99:03 - truth is is that like
99:05 - all of these methods facebook like the
99:07 - guys over on facebook realize that
99:08 - they're just [ __ ] like is in that
99:09 - they're not like easy maintainable like
99:11 - they
99:12 - work yeah they work but they're just
99:13 - like they're kind of messy so
99:15 - in functional components you have one
99:17 - right you have one
99:19 - ultra powerful thing and it's just
99:20 - called the use effect
99:22 - all right and once you learn how to use
99:24 - the use effect well the use effect
99:26 - pretty much
99:27 - replaces every single lifecycle hook
99:30 - so to answer your question of salva it
99:33 - doesn't just replace the component did
99:34 - mount
99:35 - it replaces every single yeah one yeah
99:37 - so component demand component will mount
99:39 - come on should update
99:40 - all the lifecycle methods it goes ahead
99:42 - and replaces it with a use effect
99:43 - and you might be wondering but how right
99:46 - but trust me when you when you dive into
99:48 - the user effect and this takes me back
99:49 - to the documentation
99:50 - so remember we were looking at the user
99:52 - fact uh documents over here
99:55 - so that accepts a function and blah blah
99:56 - blah like it goes through the point is
99:58 - that look if you actually read into this
100:00 - so i'm not going to kind of
100:02 - read over this right now because i want
100:03 - to just get into some coding and show
100:05 - you this stuff in practice
100:07 - um but it has things like a cleanup
100:09 - function so
100:10 - for the longest time i had been using
100:13 - usefx and i did not know
100:15 - that you could do cleanup right now
100:17 - cleanup is basically where
100:19 - uh you could run a piece of code when
100:20 - when the component mounts or component
100:22 - sort of loads that's what the use effect
100:24 - is good for and then it can re-fire when
100:26 - you have like a dependency change or
100:28 - something like that
100:29 - but um there was also a case of like
100:32 - where you
100:33 - you need to like for example let's say
100:35 - we start listening
100:36 - to a database or something like that
100:38 - when the component loads right
100:40 - but as soon as the change happens i
100:42 - needed to detach the listener before a
100:44 - new one got attached right
100:45 - now i know that might seem a bit
100:46 - complicated if you don't know the
100:48 - context or anything like that but the
100:49 - point is we needed some kind of way to
100:51 - do that
100:52 - and uh and previously what you had was
100:55 - component did unmount right so imagine
100:58 - like
100:59 - you had this before right did unmount
101:02 - and then basically imagine like you had
101:04 - some code you went to a company
101:06 - they had like in the component didn't
101:07 - mount they were like right attach a
101:09 - database listener and then in component
101:10 - did unmount
101:12 - they had like right detach to detach the
101:14 - database listener
101:15 - then you go over to a functional
101:16 - component you're like wait a sec like i
101:18 - know how to
101:19 - fire code when my component mounts but
101:22 - how the hell do i do it when i unmount
101:24 - right and then i remember i was sitting
101:25 - there i was thinking wait [ __ ]
101:27 - maybe i can't do that in a functional
101:28 - component and then i went back to the
101:30 - documentation
101:32 - and i realized i was like oh my god you
101:33 - can do it and i remember as soon as i
101:35 - saw this
101:36 - i ran it i literally ran to work the
101:38 - next day and i was like guys
101:39 - did you know that you can clean up from
101:41 - from from a user effect and everyone was
101:43 - like
101:43 - you can clean up from a user pack and
101:46 - then
101:46 - and the truth is the funny part is the
101:48 - senior developers was like what's the
101:49 - functional component
101:50 - and i was like what the [ __ ] like this
101:52 - is like mind-blowing
101:54 - so so the truth is like yeah even the
101:58 - fun
101:58 - even the senior developers don't always
102:00 - stay ahead of the curve because they're
102:01 - comfortable with what they're doing and
102:02 - they've been doing it for so long and
102:04 - making money off here
102:05 - that like for good reason but the truth
102:07 - is it does
102:08 - staying ahead the curve pays well so so
102:11 - always try and stay ahead of the curve
102:12 - right
102:13 - um yeah somebody was i thought but go
102:15 - for it yeah
102:16 - yeah you said that you get a lot of
102:18 - value when you come
102:19 - convert class-based components to
102:23 - functional based when you are working
102:25 - like when you're really working
102:26 - but uh is it like i i started react when
102:30 - there was functional components so i
102:31 - just started writing with functional so
102:33 - do you think it would be good for me to
102:36 - just learn the class based components
102:38 - one like a little
102:40 - part of it so i would say very good
102:42 - question firstly
102:43 - um i thought so to answer your question
102:46 - the question is guys
102:47 - um so he's he's obviously started coding
102:51 - since react uh functional components
102:53 - have existed so now he can use them
102:55 - so should he go ahead and do class-based
102:57 - components or
102:59 - or should he not or like what where
103:01 - where what's the optimal route through
103:02 - that position so what i would say
103:04 - is in this position right start coding
103:08 - like build clones and stuff like that
103:09 - with functional components because
103:11 - you you get like you get tangible output
103:14 - right you get things which is it's
103:15 - fun it's going to work well it's going
103:17 - to do what you need it to do and it's
103:19 - going to be scalable maintainable all
103:20 - that stuff
103:21 - and it also allows you to get a grasp of
103:23 - react in a fun way
103:24 - right you're not going to get the
103:26 - headache of class-based components of
103:27 - that but
103:28 - when you reach a certain point where you
103:30 - basically start wanting to take it to
103:31 - that next level you're like i've done
103:33 - like so many builds now
103:34 - you know i've kind of mastered this main
103:37 - concept section
103:38 - i played around with hooks i you know i
103:40 - feel like i'm comfortable
103:42 - the next step i would say is now get
103:44 - used now start writing the same
103:46 - components that you've done
103:48 - with class-based methods and and start
103:50 - converting them methods to class base
103:51 - and you might be thinking that's a
103:52 - horrible thing to do why would i do that
103:54 - because trust me it will pay off like if
103:56 - you go into a company
103:58 - and you're able to understand
103:59 - class-based components as the junior guy
104:02 - right so you can pretty much do all your
104:03 - class-based work and all that which is
104:05 - kind of expected right so
104:06 - if you go into a company they're going
104:07 - to expect you to know how to do
104:10 - class-based components right but then if
104:12 - you're a master a functional component
104:13 - you know all the cutting edge new share
104:15 - they're going to be like oh man that's a
104:17 - really good suggestion like i
104:19 - because most of the people in that team
104:21 - will be making improvements or building
104:23 - on the app currently in a class-based
104:25 - mindset trust me when i say that
104:27 - everyone that every single place i went
104:29 - and worked in
104:30 - all of them were working with a
104:31 - class-based mindset because hook's
104:33 - functional components were quite new at
104:35 - the time and still
104:36 - at this point you get a lot of people
104:38 - who are still stuck in the class-based
104:40 - mindset so
104:41 - i would say it's going to be my optimal
104:44 - route to getting to that point at java
104:46 - would be to
104:47 - to do it with functional components
104:48 - first so you enjoy the process you get
104:50 - good at you have tangible output you see
104:52 - you have something on your portfolio
104:53 - and then kind of reverse engineer it and
104:55 - kind of like flip it and start doing
104:57 - class-based components that way you have
104:59 - fun and it'll be a lot easier to
105:00 - transition as well
105:03 - yeah yeah so adding one more point on to
105:06 - that
105:06 - i recently had an interview with a
105:08 - company which uh
105:10 - called for a react developer and the
105:11 - first thing that they asked is
105:13 - since you learned you learned it quite
105:15 - recently so
105:17 - do you know about class components and i
105:20 - was fortunate enough to know about that
105:22 - at that time so i was like yeah i know
105:24 - and that was important yes for that time
105:27 - yeah exactly so it is going to be an
105:29 - important thing yeah
105:31 - yeah my input here is that everyone
105:34 - should
105:34 - like learn class based component also
105:37 - like
105:38 - that is because like at some point of
105:41 - time you uh
105:42 - like you will face that okay you are
105:44 - importing
105:45 - or you are using some like predefined
105:48 - like oh something like a calendar
105:50 - from any of like pre-built calendar on
105:53 - your
105:53 - website yeah so but the all the features
105:57 - what do you want are not available on
105:59 - that and that calendar
106:01 - is in uh like class based component yeah
106:03 - so when you have to
106:04 - implement it you should know that okay
106:07 - okay where i will change it where i have
106:09 - to like modify that one
106:10 - but you don't know that okay because of
106:13 - the class based component you cannot
106:15 - edit it
106:16 - okay that's not here yes either you can
106:18 - edit it
106:19 - or you make it by your own in the
106:21 - functional component
106:22 - so by converting that also in the
106:24 - functional component you should know
106:26 - that okay how
106:26 - classmates component work so that will
106:28 - help you so you should learn both
106:31 - for your understanding yeah so because
106:34 - like if you are joining a company and
106:36 - they give you a pro like project and
106:38 - that is totally on the class-based
106:40 - component
106:40 - and they want you to add some feature in
106:42 - that and if you don't know that class
106:44 - based component you
106:45 - cannot even convert that into the
106:47 - functional component yeah because you
106:49 - have to understand it
106:50 - that okay how this process is working
106:53 - when
106:54 - that is not a big difference when if you
106:56 - know the uh
106:57 - process you will understand it very well
106:59 - yeah so my
107:01 - suggestion is that okay when i worked on
107:03 - the react native
107:04 - i face these things because when i'm
107:07 - importing like
107:08 - so many of the like npx this one this
107:11 - one this one and
107:12 - all are in the class based component i
107:14 - jumped into a node modules
107:16 - and then jumped into that okay what is
107:17 - defined in that one then i jumping and i
107:21 - change all in the functional components
107:22 - yeah that helped me a lot
107:24 - yeah that's something that's a
107:27 - really really good point as in uh and
107:30 - guys like i
107:31 - really like i'm gonna repeat what he
107:33 - said uh if
107:34 - if you didn't catch it properly but
107:36 - literally like that's that's actually a
107:38 - point i would have completely missed
107:39 - which is actually a golden point like
107:42 - a lot of modules that you go ahead and
107:43 - pull in right
107:45 - like because in um and most of them like
107:47 - let's go ahead and show
107:48 - let's go ahead and show them an example
107:50 - of this right so whether it's like
107:52 - code that you're going to reuse or
107:53 - something like that but or whether it's
107:55 - um
107:55 - a mod for example we've all seen react
107:58 - flip move is something i've used in a
108:00 - few of the builds and it's basically a
108:01 - way of introducing animation into your
108:03 - builds
108:04 - right but for example this this is an
108:06 - awesome package right because it's
108:08 - it work it adds animation to your to
108:10 - your app but the point is is that like
108:12 - this one you're fortunate enough here to
108:14 - get a section about how to use it with
108:16 - functional components right
108:18 - but previously i don't know if they've
108:20 - updated in us they've actually got rid
108:21 - of the class based section right
108:23 - but the point is that before they didn't
108:25 - actually have
108:27 - all they had was the uh the class based
108:29 - implementation for this right so you can
108:31 - see they've actually kept ahead of the
108:32 - curve and they've got rid of the
108:33 - class-based stuff now
108:34 - but what you would see is like say for
108:36 - example let's go ahead and just try um
108:38 - react to use for useful libraries uh
108:41 - let's just try and find
108:43 - something that we can pretty much go
108:45 - ahead and let's go ahead and see if this
108:46 - one maybe
108:47 - awesome react components um because the
108:50 - point is that a lot of this stuff
108:52 - might be so let's go ahead and see like
108:54 - this random library over here
108:56 - um okay
109:00 - or let me just try this one but you see
109:02 - it's actually a really good package guys
109:04 - um this has got loads of [ __ ] going on
109:08 - okay again they're using react
109:09 - functional components so if
109:11 - you see like they're all moving towards
109:13 - react function component but i
109:15 - guarantee you guys i've it happens all
109:17 - the time
109:18 - i run into an example where it's all
109:20 - sort of class-based components this is
109:22 - like a really nasty class-based
109:23 - component no they've used like a really
109:25 - old-school way of doing it but the point
109:27 - is they have a render here oh my god
109:28 - they're using variables as well okay
109:30 - just run for the stars if you see that
109:32 - but um
109:33 - the point is that you're going to run
109:35 - into to cases where they're going to
109:37 - have here
109:37 - perfect okay so they have like a
109:40 - class-based component right
109:42 - now obviously they don't have and and
109:44 - they still if you ever see mix-ins
109:46 - mix-ins are no longer used so just
109:48 - something to know
109:49 - right so mix-ins were something which
109:50 - they tried and tested they didn't like
109:52 - it
109:52 - they got rid of it also this syntax
109:54 - right here that you might see
109:56 - that was also something which was tried
109:58 - and tested didn't really catch on
110:00 - and they kind of got rid of it um and
110:03 - this is kind of like a way of using a
110:04 - higher order component
110:05 - in case anyone's interested but the
110:08 - point a single
110:10 - yeah so that's the point right like so
110:12 - that this is this goes on to add on to
110:14 - what elite
110:15 - uh said earlier so you're going to find
110:17 - plenty of cases where you need this code
110:19 - right so imagine like we needed the code
110:21 - that they had here right so like
110:22 - rather than building an entire react uh
110:25 - sortable
110:26 - element or for example like a date
110:28 - picker right
110:30 - this code right here was built by
110:31 - someone and it could have such a good
110:33 - reputation so
110:34 - it could have like a ton of stars and
110:36 - all sorts of stuff so in this case this
110:37 - has got 456 stars so
110:39 - i mean it's okay but if we wanted to use
110:43 - this and it's class based we need to
110:44 - know how to refactor this
110:46 - into a functional component so that way
110:49 - we can use it
110:50 - sure we could use it as a class-based
110:51 - component inside of our app but it's not
110:53 - a good practice if you've got a
110:54 - perfectly nicely written
110:56 - functional component app and then the
110:58 - and then this is written in class-based
110:59 - components it kind of gets messy right
111:01 - so i'm going to go ahead and jump into
111:03 - that that thing that we built yesterday
111:04 - yeah to be honest even one star on
111:08 - github is worth
111:08 - a lot more than github easily
111:12 - don't no but don't don't assume that
111:15 - because honestly when you
111:16 - when you're looking especially when
111:17 - you're trying to pull in code
111:19 - try and make sure that it's got a decent
111:21 - backing behind it for example
111:23 - like i'm talking about see that if i
111:25 - launch a library today then if i get
111:27 - even one set and i'm gonna be happy
111:28 - but if yeah if i'm if obviously if i'm
111:31 - going for some library then i'm always
111:33 - going to be like okay
111:34 - one thousand source minimum yeah exactly
111:36 - like is in like this is
111:38 - because i would always sort of like yeah
111:39 - that's true like if you're gonna push
111:40 - your own library then of course it's
111:42 - gonna get it's gonna take time to get
111:43 - traction
111:44 - but this is like this is called open
111:46 - source sort of contributions as well by
111:48 - the way like you can go ahead and
111:49 - say you're using this library and you
111:51 - realize that you can improve it you can
111:52 - go ahead push code to it
111:54 - and then you're part of the community in
111:55 - that way so you're contributing to open
111:56 - source work like
111:58 - um i made something in php and it got
112:00 - one star
112:01 - after a few days and i was like it made
112:03 - my day nice it did
112:05 - nice yeah yeah it does make my day like
112:07 - whenever i'm getting one a new follow on
112:09 - github to be honest it's like the best
112:10 - feeling ever
112:11 - yeah nice like i remember i see him i
112:14 - literally started a uh
112:16 - so quick story for you guys i literally
112:18 - started a company in
112:20 - 2016 like and we've sort of tried to do
112:22 - like a
112:23 - a food ordering drink ordering thing
112:26 - like table service app
112:27 - and we built everything we've done it
112:29 - all and i remember like we got to a
112:31 - point where
112:32 - it was uh it was it was yeah we're
112:35 - implementing the
112:35 - the payment processing part and i
112:37 - remember i was i was adding the code
112:39 - little stripe i was adding the kind of
112:40 - strap it was
112:41 - it was like a few years back when tripe
112:43 - was sort of like it was good but
112:45 - still needed to sort of iron out bugs
112:47 - and they didn't have something and i was
112:49 - sure
112:49 - that i was implementing it correctly and
112:51 - they didn't have support for something
112:53 - so
112:53 - i went ahead and built the support for
112:55 - it and then i submitted a pull request
112:58 - and it blew my mind when it got accepted
113:00 - and to this day i get like pull requests
113:02 - from stripe
113:03 - so i can actually go ahead and approve
113:05 - and deny pull requests from stripe so
113:07 - stripe is what we use for the amazon
113:09 - build
113:09 - it's a hugely used uh uh platform
113:12 - payment processing platform
113:13 - seriously like getting a put a question
113:15 - frame etc dude that's
113:17 - huge yeah so so that's what i mean but
113:19 - the truth is it wasn't a big deal to get
113:21 - it pushed in so it's actually
113:22 - much easier to go ahead and contribute
113:24 - to libraries and we think
113:26 - right so did you just go ahead and like
113:27 - if you're interested you can tinker with
113:29 - these libraries and you can get involved
113:30 - in it
113:31 - now before we kind of go too far what
113:34 - was that
113:35 - even getting followers on medium like
113:37 - that's super difficult and
113:39 - then the first block just released on
113:41 - player programming
113:42 - and i just caught like 135 followers
113:45 - by just one block yeah that just blew my
113:47 - mind exactly
113:49 - right now i i just like right now i got
113:51 - a male from medium termite i
113:52 - have 34 evolvers dude that's insane yeah
113:55 - like guys we're not going to go into
113:57 - followers and stuff like that just yet
113:58 - but
113:59 - the main thing to take away from it is
114:01 - main thing to take away from it is if
114:03 - stars is going to help you
114:05 - uh sort of determine if something is
114:07 - kind of you know reliable or not like if
114:09 - it has like
114:10 - two stars i wouldn't really trust
114:12 - putting it in your app
114:13 - like if i was like 1500 stars then yeah
114:16 - it's a lot more if there's like a
114:17 - million stars and oh yeah like go grab
114:18 - the thing
114:19 - i would just literally grab it in and be
114:20 - like let me try this because it might
114:22 - make my app better in some way because
114:23 - like one and a half million people use
114:25 - it anyway so i'm gonna go ahead and pull
114:27 - this open in our code right now
114:29 - yes uh sony just one quick question
114:31 - about classes and the
114:32 - uh functional based components yeah so
114:35 - is there any marginal
114:36 - performance based increment when we are
114:39 - using
114:39 - functional as compared to same code
114:41 - written in class yeah so
114:43 - uh functional is more lightweight uh
114:45 - functional is literally
114:47 - just going to be input something output
114:51 - class space there's a lot more stuff
114:53 - happening that we don't see
114:54 - and also when you only have one hook for
114:57 - example the use effect hook right
114:59 - we can much more use it correctly as
115:02 - opposed to
115:03 - like you might in order to get the same
115:05 - level of efficiency
115:06 - in in for example like uh in a
115:09 - class-based component
115:10 - you would need to use all of these
115:11 - correctly right
115:13 - right you need to use it more correctly
115:15 - but in if we use
115:16 - one user hook correctly it's going to be
115:18 - function it's going to be much more
115:19 - efficient so
115:20 - you see like we might use this but we
115:23 - might forget to do the cleanup process
115:25 - but whereas when component did unmount
115:27 - whereas in the use effect
115:29 - because you're writing the use effect
115:30 - it's kind of like do i need to clean up
115:32 - it's very intuitive it's very kind of
115:33 - like
115:34 - you're you're writing the block of code
115:36 - that you you would naturally think to
115:37 - maybe do the cleanup in that block of
115:39 - code as opposed to
115:40 - oh i did component did mount now i need
115:42 - to do component did unmount it's kind of
115:44 - like um
115:45 - i know i know it may seem like you you
115:46 - would see it every time but trust me
115:48 - it gets to points where especially when
115:50 - you've got like a product owner or
115:51 - somebody behind you saying we need this
115:53 - feature in by tomorrow
115:54 - it it can get very sort of intense like
115:56 - um and you just kind of like wanna
115:59 - get the best practices behind your belt
116:01 - um so with that said we've got the
116:03 - the starter template here so we're gonna
116:04 - do a quick cleanup we're gonna delete
116:06 - app.test logo and setup tests
116:08 - uh get rid of those go to app.css um
116:12 - go ahead and get rid of everything let's
116:13 - just make it a cleanup and i'm going to
116:15 - go to
116:16 - index.css and just quickly add a margin
116:18 - 0 and this
116:19 - gets rid of all the styling for us so we
116:21 - pretty much have a clean slate to start
116:23 - with
116:23 - um and then we go here and let's just
116:27 - say
116:28 - h1 hello world right and then i'm going
116:30 - to do command j
116:31 - and i like to sort of tell it in case
116:32 - you don't know the keyboard shortcuts
116:34 - command j is going to pull up your key
116:35 - your terminal npm star goes ahead and
116:38 - starts yeah
116:40 - what's that you need to remove the logo
116:42 - sony svg
116:44 - uh oh yeah damn
116:49 - um oh yeah yeah yeah nice there we go
116:53 - there you go nice green tick and then
116:55 - here
116:56 - we have the hello world right so um
117:00 - with that said now what we're going to
117:02 - do is let's imagine let's create a
117:04 - a um just call it a let's call it a
117:08 - product right let's just quickly create
117:09 - a product
117:10 - and what i'm going to do is i'm going to
117:11 - write the product as a functional
117:12 - component as we all
117:13 - know and love and then i'm going to
117:15 - write the product as a class-based
117:17 - component and show you the differences
117:18 - and we're going to go through all of
117:19 - that together right
117:20 - so um product right here and a product
117:22 - is going to take a title
117:24 - and fade for example here we're going to
117:25 - say amazon echo because
117:27 - it's amazon prime day right now so um i
117:30 - wish they would give me commission for
117:31 - saying that but they don't
117:32 - so that's fine uh amazon that consists
117:36 - like 1999 or something like that and
117:38 - then
117:39 - yeah that's fine for now yeah so let's
117:40 - go ahead and create this component so
117:42 - we're going to say product
117:43 - dot js product.js and then if you guys
117:46 - haven't already got this installed just
117:48 - type in es7 in your
117:49 - extensions and download these react
117:52 - native snippets they're going to be
117:53 - they're game changers
117:54 - like and this is something which 1.9
117:56 - million people use so
117:57 - go ahead and get them um rfce
118:01 - boom you can also use rafc that will
118:04 - make an arrow arrow function based
118:06 - component yeah
118:07 - you can use that one this one when i'm
118:09 - teaching is a lot easier for everyone to
118:11 - remember that it's a
118:12 - function you know like a score of like
118:14 - it's very declarative
118:16 - but you can do our afce yes correct you
118:18 - can do rafce
118:20 - and that'll give you our es6 arrow
118:22 - function
118:23 - um but we're going to do for now rfcd
118:26 - and then we get this
118:27 - and then this takes props
118:30 - and then we're using es6 destructuring
118:32 - so to kind of
118:33 - open up the object and get the title on
118:35 - price right
118:37 - so we have this and then let's go ahead
118:39 - and say like imagine we have
118:42 - i'm so ingrained into doing it the
118:44 - correct way now that
118:45 - i feel like i have to always add the
118:47 - class name you know the product class
118:48 - name so here we're going to go ahead and
118:50 - just do a h1
118:51 - a h2 sorry exactly bem naming convention
118:55 - um we're going to go ahead and type in
118:57 - like just the title for example so we're
118:59 - going to say this is where the title
119:00 - will be and then we're just going to
119:02 - have a very
119:03 - simple h3 and this will say like um
119:06 - i'm just going to do a little bit of a
119:08 - hacky sort of price in pounds right
119:10 - and then we're going to have some
119:11 - styling so i'm just going to go ahead
119:12 - and do a product.css
119:14 - very quickly um so it's very kind of
119:17 - close to what we would have done
119:19 - typically so we have product or css
119:22 - is amazing we have this don't worry it
119:25 - all comes in
119:26 - in like you will get to points where it
119:28 - will seem like you'll get to this
119:30 - naturally just remember
119:31 - understand something well and then it
119:33 - gets to a point where you can just do it
119:35 - without thinking it's like driving a car
119:37 - when you first drive a car
119:38 - your everyone is behind the wheel like
119:40 - kind of like [ __ ] themselves like
119:42 - and then you're sweating at the end of
119:43 - it you smell because you're sweating so
119:45 - much
119:46 - but now it's like you can probably drive
119:47 - a car after a while you're just kind of
119:48 - you know cruising along
119:50 - to music and you know it's the same
119:51 - thing we're coding right
119:53 - so once you've got this you pretty much
119:56 - product is not defined so we need to go
119:57 - to
119:58 - app oh god what we're doing here this is
119:59 - my get why do i want this
120:02 - yep we got app and then we're going to
120:03 - go to here and we're going to do a
120:05 - little
120:05 - control space bar trick to import it
120:08 - and then we're going to go back here so
120:09 - now it says amazon echo 199 right
120:12 - so i'm going to quickly go ahead and pop
120:13 - this on this page for a sec
120:15 - so we can go ahead and see i'm going to
120:17 - put this underneath so you guys can get
120:19 - a very clear
120:21 - visual breakdown of what's going on
120:22 - right so we've got the let's make it a
120:24 - bit more
120:27 - okay so now we've got this so imagine we
120:29 - have like three products
120:31 - right so let's quickly give it a very
120:33 - quick styling so we can say each product
120:35 - has a border of one pixel
120:36 - solid red so i'm going to make it very
120:38 - clear to see it and i'm going to say
120:40 - each product has a margin of 10 pixels
120:42 - and it gets a bit bigger and then
120:44 - they're kind of bunched up in the middle
120:45 - so we're going to say padding at 20
120:46 - pixels
120:47 - so they're kind of huge right now yeah
120:48 - so these are our products right these
120:50 - are
120:50 - like our special fancy products and then
120:53 - imagine we want to so what i would say
120:55 - is everyone this is the approach
120:57 - i want to i want you all to take which
120:59 - is why i started with a functional
121:00 - component
121:01 - i want you guys to go ahead and build
121:02 - the clones and things like that
121:04 - with functional components and then i
121:06 - want you to kind of reverse engineer it
121:07 - so you kind of get used to
121:09 - class-based components in a nice way
121:11 - right and then you can go ahead and
121:13 - start projects from a
121:15 - um in a sort of you know in a
121:17 - class-based fashion just so you get used
121:20 - to doing i'm not saying
121:21 - build projects with class-based
121:23 - components i'm just saying the skill for
121:24 - it
121:25 - is going to be needed when you get
121:27 - involved in sort of in
121:28 - industry right so let's go ahead now
121:32 - and what we're going to do is we're
121:34 - going to have the the product here
121:36 - so i'm going to have the product code
121:38 - oops we'll have the product code here so
121:40 - this is a
121:41 - a class based a functional component
121:43 - right so accept some props
121:44 - but then let's also add some state in
121:46 - right so i'm going to show you guys
121:48 - state and props in a functional
121:50 - component versus state and props in a
121:51 - class space so let's add some state and
121:52 - you see
121:53 - very quick to go ahead and do that as
121:55 - well so let's actually make this very
121:57 - um quick to do it so let's go ahead and
121:59 - just do constant let's just say
122:01 - uh set count and we're just going to
122:04 - have some kind of counter
122:05 - right so we're going to have use state
122:08 - and then the counter is going to start
122:09 - with 0
122:10 - and then we're going to have some kind
122:11 - of button
122:13 - so let's just have a button with the
122:15 - plus button with a minus
122:18 - and then we're going to have some kind
122:19 - of like i don't know be like a h4
122:22 - and this will have the count inside of
122:23 - it and then
122:25 - when you click on the this button so on
122:28 - click
122:29 - it's going to do an inline arrow
122:30 - function oops
122:33 - we're done yeah then we're gonna say um
122:36 - set count to be whatever count is
122:40 - plus one so then
122:43 - now if we hit this it goes up and then
122:46 - we're going to have the same thing
122:47 - for let's just go ahead and do this
122:49 - again it'll be quicker
122:50 - we'll do minus right so
122:54 - now i've just done some very quick sort
122:56 - of hacky solution here but you see now
122:58 - we've got like uh
122:59 - just forget the fact it goes in negative
123:01 - numbers for now but you can pretty much
123:03 - see we've got a um
123:04 - we've got three different things here
123:06 - now for those of you who aren't familiar
123:07 - with state
123:08 - remember like i said in the beginning
123:10 - state and props are two fundamentals in
123:12 - react okay props are pretty much how we
123:14 - customize those
123:16 - those uh those apps so let's go back to
123:18 - that app.js and why is it not letting me
123:20 - accept
123:21 - um shrika into the into the waiting room
123:24 - why does it say that
123:25 - okay so here yeah i accepted him but he
123:28 - didn't
123:29 - he couldn't join i think yeah that's
123:31 - right
123:34 - okay i clicked it again but um so
123:38 - we've got the first product amazon echo
123:40 - let's just say samsung tv samsung tv and
123:42 - then the final one and that one's going
123:43 - to be
123:44 - 100 uh 299 pounds
123:47 - and then you've got a let's just say
123:49 - apple iphone 12
123:51 - because afterwards i'm looking forward
123:53 - to watching that event because right now
123:54 - that events streaming the apple events
123:56 - live if
123:57 - if you guys didn't know that um and
124:00 - that's probably gonna be like twelve
124:01 - thousand pounds or something
124:03 - right because because they overpriced
124:04 - their products but we will love it
124:06 - so imagine um the imac is good like
124:10 - it's not worth it uh i mean i i i can't
124:13 - talk because i just
124:14 - spent a ridiculous amount of money on
124:17 - this laptop
124:18 - because because they are worth it like i
124:20 - i'm not gonna like
124:21 - they have powerful products um but it's
124:23 - more the user experience the best
124:25 - product that i've seen to be honest like
124:27 - i would prefer windows yeah yeah
124:30 - they are good products um so here we
124:32 - have the let's see
124:35 - exactly so so here we have the the props
124:38 - right so we have the props and then it
124:39 - says
124:40 - we've got the title and price and that's
124:41 - how we render out this remember the
124:43 - props
124:44 - are important because in react we have
124:46 - something called component based design
124:48 - right so i'm just going to go ahead and
124:50 - i don't know how you actually save this
124:51 - i think it's cause you showed me i think
124:53 - it's
124:53 - ctrl s oh come on s no oh i done it
124:57 - nice and i could do that okay
125:00 - so let me go ahead and wipe this now oh
125:03 - snazzy stuff guys
125:04 - we just upgraded one sec um
125:07 - so now i've got keep track of that so
125:10 - here uh you've got
125:11 - so in react you have class um
125:14 - component based design so what does that
125:16 - mean
125:17 - um okay now this is okay so you have
125:21 - component based design
125:24 - so just think of it this way right so a
125:26 - web page is pretty much consisting of
125:28 - loads of different things
125:29 - you have so this is our web page right
125:33 - pretty much you just break it up into
125:34 - your reusable components so some some
125:36 - things are
125:37 - aren't reusable or like we don't tend to
125:39 - reuse them but they're still
125:41 - considered a component for example the
125:42 - header right then we have for example
125:45 - the footer right so these would be two
125:47 - components that we typically might have
125:48 - on a web page
125:49 - and then in the beginning like you might
125:51 - have a banner right so you might have a
125:53 - banner
125:53 - and you might have like a sidebar kind
125:55 - of thing or or some advertising panel
125:58 - here
125:58 - and then you might have like four
125:59 - products or like some products here
126:01 - right
126:02 - so this is a really good sort of use
126:05 - case for like a demonstration of what
126:07 - where we would have it so imagine we
126:10 - would have um
126:11 - oops oops okay
126:15 - andrew oh i didn't know you could do
126:16 - that as well god learning all sorts of
126:17 - [ __ ] today
126:18 - okay so uh you want a custard you don't
126:22 - want obviously you don't want each of
126:23 - these products to be the same thing
126:24 - right so that's where props comes in so
126:25 - you use props to be able to
126:27 - differentiate
126:28 - each product from from it's from another
126:30 - one but the the main thing here is that
126:32 - you write the code once
126:34 - right now there's there's many benefits
126:36 - to doing this so this would be like
126:37 - product.js
126:38 - there's many benefits doing this because
126:40 - if you write the product product once
126:41 - and you just customize it with different
126:43 - props
126:44 - then if i change the styling of this one
126:46 - product
126:47 - dot js or product or css it's going to
126:50 - change it to this one it's going to
126:51 - change it to this one it's going to
126:52 - change it to this one it's going to
126:53 - change to this one it's going to change
126:54 - this one
126:54 - and across the entire website where we
126:57 - use product.js
126:58 - it will get changed so you can see
126:59 - there's immediate power there right
127:01 - now also it means that one developer
127:02 - could be come working on the
127:04 - header another developer could be
127:06 - working over here another developer
127:07 - could be working over here
127:09 - one developer or like a team of four
127:10 - developers could be working the products
127:12 - and then some other guy could be doing
127:13 - the header you see like it
127:15 - it really breaks up your app into sort
127:17 - of a maintainable sort of like
127:19 - reasonable approach
127:21 - um it is very very powerful and it's and
127:24 - it's not only because it's powerful in
127:25 - the sense of props and state and what
127:27 - you can do with it and it's fun to code
127:28 - in
127:29 - but it's also a case of teams can work
127:31 - together in a much
127:32 - easier way with react right so that's
127:35 - another benefit to it that's why
127:36 - i'm considering these as basics because
127:39 - they're very very
127:40 - important in terms of understanding we
127:42 - need to understand this stuff in order
127:43 - to
127:44 - even start with react okay so um
127:47 - i did click ok there we go so we have
127:50 - these three things here
127:51 - right now with this is our class based
127:54 - component so i'm going to write the in
127:55 - this entire thing as a class based
127:58 - component now
127:59 - and you're going to see the entire thing
128:01 - and it's going to look uglier than this
128:03 - i can promise you that
128:04 - right so i'm going to go here and i'm
128:06 - going to do product
128:08 - um let's just call it class dot js
128:10 - because i'm just going to call it like
128:11 - the product class variant right
128:13 - so what i want to do is we okay so we
128:16 - all know that this is what the finish
128:18 - kind of i know it's ugly but it's the
128:19 - finished product what it looks like
128:20 - right
128:22 - let's go ahead and have the
128:25 - um code side by side with each other so
128:28 - that way we can see everything
128:29 - as we do it right and every now and then
128:31 - i'll kind of
128:33 - just briefly show you what we're doing
128:35 - here so we can pretty much see that
128:36 - okay so we've got the product and then
128:39 - we've got the product class right
128:41 - so i'm just going to go ahead and zoom
128:42 - out can you guys still see that or is it
128:43 - too small i think i should maybe make it
128:44 - one notch bigger there we go still good
128:47 - right so here we have the product class
128:50 - so i actually forget how to do the
128:52 - to write my class based component so i
128:54 - use this as a little sort of neat trick
128:55 - so i do rfc
128:57 - e you know rf uh c
129:00 - is it oh no sorry it's not us it's rcc
129:04 - p there we go look at that yeah so you
129:06 - see that the snippets are really good
129:08 - because i don't even remember how to do
129:09 - it
129:09 - to write them but it gives you the
129:11 - things and you can even do
129:12 - ccp ads prop types but we're not going
129:14 - to talk about prop types today rcc adds
129:17 - it just creates the template for us so
129:19 - this is the template
129:21 - if we're going to keep it in the same
129:23 - export default fashion i'll do it in the
129:24 - same way
129:25 - so i have export default down here right
129:28 - so product class
129:30 - would be down here right so
129:33 - now you can see we pretty much have that
129:36 - this is the starting point right
129:37 - now two things to know is the
129:39 - differences between class based and
129:41 - functional
129:41 - firstly in a functional component you
129:44 - just simply have the return
129:45 - all right in a class space you have the
129:47 - render and then you return some stuff
129:50 - okay so that's a difference you have a
129:52 - render in a in a fun and a class-based
129:54 - component right
129:56 - so here what we're going to say is um
130:00 - let's just kind of briefly have the same
130:01 - thing so we're going to say class name
130:03 - equals
130:04 - uh product and we're just going to call
130:05 - this one class as well so we don't get
130:06 - confused oh let's just say let's give
130:08 - this one the same
130:09 - styling so let's just say product right
130:11 - so i mean it's gonna
130:12 - sonny um what exactly is the difference
130:15 - between render and return
130:17 - okay so i'll explain that now so
130:20 - um so the difference between render and
130:23 - return so
130:24 - remember a functional component is
130:26 - simply has inputs
130:27 - it does some stuff and then it outputs
130:29 - some stuff right
130:30 - so the return block is just saying like
130:33 - literally imagine we had like a function
130:35 - right so imagine we had
130:37 - uh and this kind of is where it clicked
130:39 - in my head when i kind of thought of it
130:40 - this way
130:41 - imagine we had a function here so that
130:43 - constant print name
130:45 - right and this print name had like it
130:47 - took a parameter called name
130:49 - and then all it did was return
130:53 - your name is
130:57 - um oops we need to use backticks
131:01 - your name is name right
131:04 - so it goes ahead and returns a string
131:06 - right and then if i do const
131:08 - uh my name printed
131:11 - equals print name sunny
131:16 - right now you see a function
131:19 - pretty much takes some kind of input
131:22 - right so it takes some kind of input in
131:23 - this case
131:24 - this would be like our kind of consider
131:25 - as a props or parameter
131:27 - take some kind of input sunny and then
131:29 - this would be like in in the same case
131:30 - here
131:31 - like this would be our props you see
131:33 - like but here it would just be name
131:35 - and then all it's doing is returning
131:37 - some stuff right
131:39 - so it's returning some stuff and then
131:40 - that stuff gets used elsewhere
131:42 - so in the context of in react whenever
131:45 - we render it on the screen so for
131:47 - example here
131:48 - right all this is doing is returning a
131:51 - block so
131:52 - imagine like literally it literally
131:55 - imagine it grabs this and where it has
131:57 - this
131:58 - it pops that in that's kind of what it's
132:02 - doing so it's saying
132:03 - right render this out and then and then
132:06 - because we've got the direct return it's
132:07 - just pretty much going to go boom
132:09 - and it pretty much goes ahead and when
132:11 - react does its clever sort of compiling
132:13 - and it sort of like figures everything
132:14 - out it pretty much goes here replaces
132:16 - this with that
132:17 - goes here replaces this with that goes
132:20 - here replaces this with that
132:21 - but changes all the all these bits with
132:24 - the props that you passed in so that's
132:25 - how it kind of writes the code out right
132:28 - so that's what it means by when it does
132:30 - the return
132:31 - okay so when it does the the returning
132:34 - stuff here
132:36 - um i don't know if this may be cleared
132:38 - up or not but the point is that it
132:40 - it's a function that just returns some
132:42 - stuff but if we go back here
132:44 - and um talk about the render so
132:48 - in a class-based component classes are a
132:51 - bit more
132:51 - complicated because they're not like a
132:53 - function which had just has
132:54 - input output right function is a class
132:57 - pretty much has its own properties it
132:59 - has its own functions and methods
133:02 - and the thing is with a with a class you
133:04 - can't just say
133:05 - like you can't just invoke a class you
133:08 - can't just say like um
133:10 - product uh you you can't just i mean you
133:13 - can't even react but typically in
133:15 - other programming languages you would
133:16 - have to say something like const
133:18 - uh let's just say my my component
133:22 - equals new product class right you would
133:25 - have to do you'd have to do something
133:26 - so make an object yeah yeah you have to
133:30 - kind of make it into an object and then
133:32 - in order to get the output of it you'd
133:33 - have to do this
133:34 - dot render dot function call
133:37 - yeah and then this yeah i get it i get
133:40 - it yeah
133:40 - exactly i'm glad though because it was a
133:42 - really good question actually because it
133:43 - actually made me
133:44 - explain it a bit more and that would
133:46 - then go ahead and replace this with
133:49 - this and that's what react is doing
133:50 - under the hood of of that
133:52 - block but you see like there's a lot
133:54 - more
133:55 - this is just straight up simpler it just
133:59 - has some input
134:00 - and it does some stuff and there's some
134:01 - output right it's very clear to the
134:03 - point
134:03 - um right so with that said we have that
134:07 - done
134:07 - and then now we're going to go ahead yep
134:10 - okay so uh i wanted to ask one question
134:14 - why do you use
134:15 - rfce instead of rafce isn't that like
134:18 - more
134:19 - es6 plus yeah so
134:22 - the reason why i use rfc is just because
134:24 - it's easier to show you that it's a
134:26 - function
134:26 - uh some people who don't know what es6
134:28 - is you you do
134:29 - like this is essentially the es6 way um
134:32 - but although yes i agree with you i
134:35 - think it's a bit cleaner you mean you
134:37 - could
134:37 - you could take it a step further and you
134:38 - could literally just do this you could
134:40 - do export
134:41 - um yeah you could just do export default
134:44 - at this level
134:45 - um which is even more kind of confusing
134:48 - but you see you can get so
134:50 - caught up with making it the es6 super
134:53 - standard
134:54 - they kind of like loses the part like in
134:56 - terms of readability yeah
134:58 - sometimes this this uh is actually a lot
135:01 - more easier just to quickly go ahead and
135:02 - add a glance see okay we've got the
135:04 - the client you see this is very clear
135:05 - and simple to see
135:07 - so there's a balance you know like in
135:09 - this case using the arrow function
135:11 - syntax is really
135:12 - nice um so what would you recommend in
135:15 - like
135:16 - kind of like a professional setting um i
135:18 - would say just whatever preference
135:19 - honestly if you're going to a company
135:21 - and they do it this way
135:22 - stick with that because you want to stay
135:23 - consistent with their coding plans and
135:25 - respect that
135:26 - if you if they don't do any then i'd
135:28 - recommend maybe doing rfce
135:29 - until the comp until everyone gets
135:31 - familiar with it then maybe do
135:33 - i mean it depends really it's all down
135:34 - to preference there's no like right or
135:36 - wrong but as long as you're doing
135:37 - functional over class space that's the
135:39 - more important area right
135:42 - yeah because i just see david using r r
135:44 - a f c
135:45 - e instead i just think from a teaching
135:47 - perspective seeing that it says
135:49 - function is a lot more understandable uh
135:52 - than just seeing const because some
135:53 - people might be like i uh
135:55 - i'm getting lost at that point and and
135:57 - you don't yeah
135:59 - okay so with that said we're gonna have
136:01 - a h2 here and this one's gonna be
136:03 - it's going to have some kind of title
136:04 - right but here we don't have a title we
136:07 - don't even accept props
136:09 - at this point right so this is where
136:11 - components kind of get a bit class based
136:13 - components get a bit more confusing
136:14 - because
136:15 - here now what we're going to have is
136:17 - we're going to have something called a
136:18 - constructor
136:20 - and then that takes something called
136:21 - props and then you have to say super
136:23 - props i'm not even sure if you need this
136:24 - but to be honest
136:25 - at the point anymore but you'd have this
136:27 - right
136:28 - and then what you'd have to say is here
136:31 - you say this
136:32 - dot props dot title
136:36 - right just to be able to to get to um
136:39 - this title you need to write this stuff
136:42 - you need a constructor which which does
136:44 - this and then you have to say
136:45 - this.props.title
136:47 - now in a lot of cases as as yeah um
136:50 - you know how in like functional
136:52 - components we could like
136:54 - restructure the props into like title
136:57 - and then
136:57 - um price rating stuff right but in
137:01 - uh class based we have to like mention
137:04 - the general name props
137:05 - and then later we could like this dot
137:08 - state and then the
137:09 - specific um props right yeah so you have
137:12 - to say this firstly
137:14 - and then you have to say props and then
137:16 - i mean here you could also have it so
137:17 - you don't destructure
137:19 - and then you say props dot title prop
137:21 - stop price
137:22 - so here if we did this you would then
137:24 - have to do props
137:25 - dot but we but you don't have the this
137:28 - you see you don't have
137:29 - this headache right but here
137:32 - in a lot of cases and i i've seen so
137:34 - many people who are learning to code
137:36 - run into this issue and they would and
137:39 - i've worked with junior developers in
137:40 - companies and they've been like
137:41 - saying i'm kind of stuck my code's not
137:42 - compiling and it's purely because in a
137:44 - class-based component they just did this
137:46 - they did problem not not this they did
137:49 - they did like that on the screen
137:50 - where it says props dot title um but you
137:53 - see they actually have to have this
137:55 - and the reason being is because remember
137:56 - guys when i showed you the example
137:58 - earlier
137:59 - right here prompts my component equals
138:00 - new product class
138:02 - the reason why we actually have this is
138:04 - because
138:06 - i mean it's a bit kind of confusing to
138:07 - kind of wrap head around but
138:09 - it means that this instance of
138:12 - so here we actually create like a an
138:14 - instance so imagine that we we've
138:16 - basically created like a
138:17 - an object of this class so imagine these
138:20 - are a product class imagine it's like
138:21 - the blueprints
138:23 - right and then we create the an object
138:25 - like from that blueprint
138:27 - right so this is our object and then
138:28 - inside the class now it says this
138:31 - like this object so this instance dot
138:34 - props dot title so it's kind of like it
138:36 - goes to that level which is
138:38 - whereas a function is just like why you
138:39 - gave me some kind of prop
138:41 - you gave me some kind of input i'm going
138:43 - to use that input and i'm going to give
138:44 - you something out
138:45 - you see it's a lot simpler than class
138:47 - based but that's a good question
138:49 - yep so here we have desktop props.title
138:53 - and then pretty much i'm gonna do the
138:55 - same thing over here now so i'm gonna go
138:56 - ahead
138:57 - pop this in here but we can't have you
139:00 - see how in functional components we have
139:02 - set
139:02 - count right and also here we need to
139:04 - change this to this stop prop store type
139:06 - price
139:07 - here we have a problem now we don't have
139:09 - this functionality so i'm going to get
139:10 - rid of the on clicks
139:11 - right because we can't use set count
139:13 - because that's using hook stuff and hook
139:15 - stuff is all
139:16 - is literally supported inside of uh
139:18 - functional components only
139:20 - right so here it works for this because
139:22 - we use
139:23 - use state right now the first thing i
139:26 - want to show you guys
139:27 - is when we use um the use state hook
139:31 - the benefit is that we get the variable
139:34 - that we we just created for example here
139:36 - the count
139:36 - but then we also get a setter method
139:39 - right and the the beauty of it is that
139:41 - that set a method
139:43 - is only going to be used for
139:46 - the modifying the count right you can't
139:49 - change any other so imagine if i had
139:50 - another variable
139:52 - called um let's just call it like age or
139:54 - some random thing called age or
139:56 - something
139:56 - and then here i can't use set age to
139:59 - modify the count
140:00 - and i can't use set count to modify the
140:02 - age right they're kind of isolated so it
140:04 - it's going to prevent bugs because
140:07 - because when you see set
140:09 - count it means i'm changing the count
140:11 - right
140:12 - but in a class-based component you don't
140:14 - have that firstly
140:16 - in order to set up things like for
140:17 - example here in our first line we've set
140:19 - up the state
140:20 - here i would have to do the following to
140:21 - say this dot state
140:23 - which again it could be confusing you
140:24 - might forget how to write that
140:26 - and then you look at the state as an
140:28 - object you say this dot state and then
140:29 - you say
140:30 - count of zero so this essentially is
140:32 - replacing this
140:33 - right now if i want to increment on
140:37 - click
140:38 - right so let's go ahead and do onclick
140:40 - and then i'm gonna do the same thing i'm
140:41 - gonna have an arrow function
140:43 - right but here what i'm going to do is
140:44 - i'm actually going to do a block of code
140:46 - so here i can have console logs and all
140:47 - sorts of stuff
140:48 - but inside this block of code when i
140:50 - click now
140:51 - i actually have to say this dot set
140:54 - state
140:55 - right and then i have to do and you can
140:58 - you can you can actually go ahead and
141:00 - take the old state
141:01 - but i'm not going to show you guys that
141:02 - method i'm just going to say you do
141:03 - this. and you pass in
141:05 - what you want the new state to look like
141:08 - right so in this case
141:09 - i mean we will do this we will show the
141:11 - old method actually we'll say
141:12 - um we'll sort it previous state
141:16 - and then we want to use the previous
141:17 - state to determine what the new state
141:19 - would look like so it's kind of
141:21 - oh this is kind of weird right so like
141:23 - you say count
141:24 - and then you can pretty much go ahead
141:25 - and say so i want to change the count
141:28 - to be whatever the previous state was
141:32 - dot count plus one
141:35 - right or you could say this.state.com
141:39 - and you can get rid of this yeah so you
141:41 - could be like this dot set state
141:42 - and then the count is currently whatever
141:44 - the state is plus one but you see here
141:47 - the problem is is that i could then what
141:48 - if i'm typing and i accidentally just do
141:50 - this
141:51 - right or accidentally type in like uh i
141:54 - mean
141:54 - you wouldn't type in age here but as in
141:56 - wi-fi if i accidentally did that or
141:58 - if i accidentally went ahead and and did
142:00 - this you see like is it i know it seems
142:02 - like small mistakes but when you have
142:03 - like loads of things like for example
142:05 - first name last name
142:06 - phone number uh mobile number you see
142:09 - like it can become very quickly like you
142:10 - start mixing and matching
142:12 - and uh you're you're going to break
142:14 - something but the point is is that now
142:17 - and imagine say for example i had age
142:18 - here so every time i clicked on it so
142:20 - imagine the person's 10
142:22 - in the beginning and as soon as you
142:24 - click that button
142:25 - the age goes up by by let's just say the
142:28 - age goes to 20 for some reason
142:30 - right but say for example here now when
142:32 - i click the
142:33 - plus button i should only be changing
142:35 - the count but i'm also
142:36 - someone added this code here that
142:37 - changes the age too
142:39 - right you see it's kind of like this is
142:42 - kind of like
142:43 - bad because like it's very easy to make
142:45 - this mistake right isn't like somebody
142:46 - could go ahead and just add this in here
142:48 - or if they're using like objects or
142:50 - arrays it gets even more
142:52 - like sort of a prone to error and things
142:54 - like that and also guys
142:56 - just look at the code already right look
142:58 - at the difference in code
142:59 - like the code's already kind of
143:07 - yeah so this one right here is much
143:09 - cleaner right it's literally
143:11 - a case of 19 lines and that's that's
143:13 - literally 19 lines
143:15 - and we've spread out the code if i
143:17 - wanted to get this shorter we could
143:19 - literally just do this so we could have
143:21 - you could literally have this and then
143:23 - you could just do something like that
143:26 - and then you have 17 lines of code you
143:28 - see
143:29 - and and also we don't need this here we
143:31 - can just go ahead and do this
143:33 - and now we've got i mean 16 lines of
143:36 - code
143:37 - right so you see like it's pretty much
143:39 - it gets it's a lot smaller
143:41 - and i mean
143:44 - and i'm not going to be again a lot of
143:46 - friends before but the understanding is
143:47 - more important right like i'm not being
143:49 - able to understand anything like what
143:50 - the hell is constructive
143:52 - yeah i can easily understand everything
143:54 - that's going on right
143:56 - exactly so you see like in here so
143:58 - someone might comment and this is again
144:00 - another problem
144:01 - what if somebody comes in here and
144:02 - changes like they will they went to
144:04 - change and they
144:04 - their age to like 20 or something but
144:06 - then they they've sort of messed up like
144:09 - uh they messed up one of these things or
144:11 - like if you had an array and they've
144:12 - changed it whereas here you would have
144:14 - an individual line for every piece of
144:16 - state
144:17 - and each individual piece of state gets
144:19 - its own modifier
144:21 - or own setter which is only responsible
144:23 - for modifying that piece of state
144:25 - right so you see they've incrementally
144:27 - built upon
144:28 - the issues and errors that they sort of
144:30 - saw in the past and they realized that
144:32 - okay
144:33 - let's not do the same mistake and you
144:34 - can see now that like if we
144:36 - if we had this right so now what i'm
144:38 - going to show you is imagine i've come
144:40 - into a company
144:41 - and they've they've got this product
144:43 - class right i'm going to show you how
144:45 - quick it is to go ahead and change
144:47 - all of this code in to a functional
144:49 - component right so i'm not going to look
144:51 - at the other one
144:51 - but i'll show you what i would kind of
144:53 - typically do if i was to kind of see
144:55 - this and i saw that okay we're using
144:57 - some of this stuff here and i know that
144:59 - we've got a set state over here
145:00 - and oh looks like the developer didn't
145:02 - even bother finishing
145:04 - the on click here so i'm going to go
145:05 - ahead and do this and say this does stay
145:07 - in minus one um okay so imagine already
145:11 - and that wasn't even
145:11 - the full code so yes even longer than we
145:13 - thought 42 43 lines of code right
145:16 - and you want your code to be nice and
145:17 - simple and short and also extends
145:19 - component
145:20 - if you forget to do that you know
145:22 - whereas in inside of the other one
145:25 - yeah here we didn't do any of that right
145:28 - and in some cases you see people doing
145:29 - this react dot component and they don't
145:31 - import it here so you might see that and
145:34 - there's something called a pure
145:36 - component as well
145:37 - but i'm not going to get into that for
145:38 - now all you need to know is that a
145:41 - a functional component is more
145:42 - performant than a pure component
145:44 - um as far as i'm aware i'm sure
145:51 - i yep that the most important thing by
145:53 - the converting of class based
145:55 - improvements to
145:56 - a functional based component is that the
145:58 - understanding of the class based
146:00 - component is
146:01 - extremely important like if i didn't
146:03 - understand what he is doing in
146:04 - each and every round of code over here
146:06 - yeah i'm pretty sure that i would mess
146:08 - up the entire code and update something
146:09 - a hundred percent
146:10 - one hundred percent if i understood like
146:12 - what is the purpose of
146:13 - this that constructor and what is the
146:16 - purpose of
146:16 - that render function then i think i
146:19 - would be personally i would be able to
146:21 - change the code
146:22 - really quickly yeah that's a really good
146:24 - point and you know because you said that
146:26 - i'm going to take it a step further and
146:28 - and do a use effect in here
146:30 - and say if at some point if i try to do
146:33 - that
146:34 - i would i would definitely get stuck at
146:37 - use effect thing
146:38 - yeah you know likely exactly the user
146:41 - effects gonna change right or
146:43 - i mean like it's you're gonna be like oh
146:44 - [ __ ] like i don't know how to do this
146:46 - right now yeah
146:47 - and also i'm going to show you an
146:49 - example of where like user effect
146:51 - actually went ahead and changed
146:53 - something which most developers even
146:55 - good developers
146:56 - with car space components didn't
146:57 - actually know how to properly overcome
146:59 - and trust me i worked with some really
147:00 - good developers
147:02 - and they still got stuck on this one
147:03 - problem so i'll show you so imagine like
147:05 - every time the count changes i want to
147:08 - sort of console log and say
147:10 - boom the count just change
147:13 - or this does you know let's make it
147:14 - interesting let's say if
147:17 - the count mod 2
147:20 - so i think that means that if the count
147:22 - is divisible by if there's no remainder
147:25 - after it's divided by two yeah then
147:27 - we're going to console log and say it
147:28 - is odd right i think it's odd then right
147:31 - even oh it's even right yeah
147:33 - to be honest i always forget i just kind
147:34 - of do one and then if it's not that i do
147:36 - the other one
147:37 - yeah look at that guys he's not even a
147:39 - good mathematician
147:42 - and
147:46 - you know some people say that match is
147:47 - important yeah you don't need to be a
147:49 - genius of maths yeah like you don't
147:51 - super bad sound crazy i would literally
147:54 - go and do it in calculated stop
147:56 - using my own exactly yeah so you don't
147:58 - need to be a genius a mouse guys
148:00 - but if the count here is um is greater
148:03 - than
148:04 - uh one tick it's a currently here is
148:05 - greater than i'm sorry if there's mod
148:07 - if there is a mod after this then it is
148:09 - even right so we're gonna go ahead and
148:10 - check that this works just go ahead and
148:12 - try that out
148:13 - let's go ahead and see here boom open up
148:15 - this use effect is not defined let's go
148:16 - here and do
148:18 - this auto import from react okay so
148:24 - okay so let's go ahead and open up the
148:25 - console
148:27 - and here so if i go ahead and do it is
148:30 - even
148:31 - no i was right guys
148:35 - i think i was right yeah so look if it's
148:37 - if it's zero
148:40 - now it's even see so so we want it to
148:43 - only fire off when it's
148:47 - wait oh because you forgot to put a
148:51 - condition i'm pretty sure
148:52 - it's like equal oh yeah yeah yeah yeah i
148:55 - mean it's still
148:57 - it's going to check if it's because this
148:59 - is
149:00 - this is firing if you count mod 2 then
149:03 - i'll just be like oh
149:04 - it does count mod 2 and it's true if it
149:07 - like even fired that you have to put an
149:09 - equals
149:11 - it is firing when it when it's it's odd
149:13 - though like
149:14 - yeah i know that's what i'm saying
149:16 - because you said like but we could say
149:19 - yeah the operation is successful so it's
149:21 - just going to
149:22 - like i did that so it's true it
149:25 - by the way guys the triple equal to this
149:27 - means that it is going to be the same as
149:29 - integer and
149:30 - like it will be a string and javascript
149:32 - does this weird thing that he could
149:34 - compare
149:40 - yeah it's doing it based on boolean
149:42 - right yeah so here we have like now it's
149:44 - saying if
149:45 - it's odd yeah there we go perfect yeah
149:47 - so again that's a good exercise
149:49 - so you can go ahead and play with that
149:50 - so now it's odd it's even it's odd it's
149:52 - even
149:52 - right but now for example so we have
149:54 - this kind of weird quirky functionality
149:56 - right so god knows
149:57 - when you're going to a company there's
149:58 - crazy stuff that happens in component
150:00 - world man did mount
150:01 - use effects and stuff the point is that
150:03 - this one fires off when the count
150:04 - changes and then
150:05 - yeah and also if you didn't know you can
150:08 - have several use effects
150:09 - so i didn't actually know that until way
150:11 - way too late
150:13 - i had one problem and he fixed it with
150:15 - adding just one more use effect
150:17 - so it was kind of it was like in a date
150:19 - we do not know how we solved it but it
150:21 - was the problem that he
150:22 - had in one more use effect that was
150:24 - totally random
150:25 - i i was working with yeah location and
150:28 - like
150:29 - the the value went through the reducer
150:31 - and
150:32 - it was working like we console logged
150:34 - each and every line and when the value
150:36 - came
150:36 - out of radio sorry it was resetted back
150:38 - and we had no idea what was even
150:39 - happening there
150:40 - yeah it can happen and it again this
150:43 - goes back to your understanding of like
150:45 - reading up on this stuff will make the
150:47 - difference between understanding
150:48 - what went wrong and what didn't go wrong
150:50 - you know um but now let's go ahead and
150:52 - like
150:52 - you see the product component loaded the
150:53 - product component loaded the product
150:55 - component loaded
150:56 - and if i fire it off again it never
150:57 - fires that code again because
150:59 - if you if you have an empty dependency
151:01 - bracket it only loads once when it loads
151:03 - and it doesn't load again right
151:05 - so let's go ahead and rewrite
151:09 - so i'm looking i'm not gonna write i'm
151:10 - literally gonna try and do all of this
151:13 - without looking right now so in product
151:14 - class right so here
151:16 - so the first thing i would do is pretty
151:17 - much go ahead and see that right
151:19 - what pieces of state what pieces of prop
151:21 - so i've got one piece of state that's
151:22 - being used
151:23 - count okay so we're going to need a
151:24 - count like we're going to need some kind
151:26 - of
151:27 - uh use use state hook right so what i
151:29 - would do is i'd literally start
151:30 - rewriting it here i'll say const product
151:32 - class i don't need this anymore
151:34 - uh we can do an arrow function it takes
151:37 - props
151:38 - and then we can do this right now we
151:40 - don't need
151:42 - or the constructor but rather than just
151:44 - deleting it straight away
151:45 - i look at the constructor and say okay
151:47 - i've got age and i've got count right
151:49 - now is age actually being used
151:50 - not really it's not really used anywhere
151:52 - right so we don't need the age so here
151:54 - i'm going to do const and i'm going to
151:56 - start writing the hooks that i need so
151:57 - i'm going to need the count
151:59 - set count equals use state
152:03 - import and then the initial value they
152:05 - gave it was zero
152:06 - okay so they gave the zero here so now
152:08 - i'm confident that i've replaced the
152:10 - bits that we need
152:11 - so i can delete the constructor right
152:14 - now i remember functional commands don't
152:15 - need a render so i can pretty much look
152:17 - at the closing bracket i
152:18 - and this is a trick for you lot so you
152:20 - don't get caught up with what you know
152:21 - when you accidentally close a bracket
152:23 - you're like [ __ ] where's the other one
152:24 - and you're trying to look for it
152:26 - yeah oh yeah i know from vs code i don't
152:29 - like that i've used it
152:31 - i don't know i mean it's preference like
152:33 - you can use it i i personally
152:35 - i don't know i mean they don't use like
152:38 - like different colors for each one it's
152:40 - kind of like the same colors
152:41 - yeah i just like using i have it
152:43 - installed it doesn't even make a
152:45 - difference for me
152:46 - like i don't even care i i click on the
152:48 - bracket and then you can if you
152:49 - if you go down you see this one's
152:51 - actually highlighted so then i click
152:52 - that
152:53 - and i know that it's that one then and i
152:54 - can get rid of it and then
152:56 - but i mean i mean it helps a lot of
152:58 - people it's a very popular uh
152:59 - extension so now we've got the return
153:02 - now i don't need desktop props.title so
153:04 - i can go ahead and change that
153:06 - to the uh just becoming prop store title
153:09 - and then we've got the on click right
153:10 - now the set state now rather than doing
153:13 - all of this
153:13 - i can just go ahead and and i know it's
153:16 - only one line of code so i don't even
153:17 - need these brackets
153:18 - but i can pretty much go ahead and say e
153:20 - dot set state set count
153:22 - to whatever the account is plus one and
153:24 - i can get rid of the set state call
153:27 - save it and then here same thing i can
153:29 - go ahead and i don't need these extra
153:31 - brackets
153:32 - because we've got more than that we can
153:34 - just go uh set
153:35 - count count minus one
153:39 - pretty much get rid of that and now look
153:41 - how much cleaner
153:42 - our code is and we can pretty much go
153:44 - ahead and get rid of this
153:46 - right but we also had a problem right we
153:48 - had the um
153:49 - the use effect so that was a that was an
153:51 - example of doing it without
153:53 - the the so that was a straight sort of
153:55 - change into that but let's go ahead and
153:57 - undo
153:57 - and let's go ahead and show you how you
153:59 - would have those complicated weird use
154:01 - effect
154:02 - conditions that we we've added in uh in
154:04 - here so you would have
154:06 - the first one was let's go ahead and
154:09 - show you we've got product.js
154:11 - so here so we had this one so when the
154:14 - component
154:15 - component loaded right so here we can
154:18 - say component did mount
154:19 - so after the component mounts uh they
154:22 - might have a console.log and then here
154:24 - we'll say the product component loaded
154:26 - okay um let's do it like this
154:30 - and what i'm going to do now is i'm
154:31 - actually going to import it from our
154:33 - product
154:34 - class instead okay so it's going to be
154:36 - the same product but we're importing it
154:38 - from product class
154:39 - instead now so it says count is not
154:41 - defined online
154:43 - two um count is not defined on line
154:46 - thirty two okay yeah so here
154:48 - again see another headache so you gotta
154:49 - say this
154:51 - dot state dot count right so
154:55 - we go back and now this is the you see
154:57 - it works it says the product component
154:59 - loaded
155:00 - right and if i try and change it
155:01 - everything's working
155:03 - in our class-based component now okay
155:05 - but just to prove to you that a is the
155:07 - one we can say the class
155:08 - product component loaded right the class
155:10 - product component okay
155:12 - so everything there is still the class
155:14 - uh one and then for example this one is
155:16 - actually more tricky now
155:18 - right so it's actually saying uh i think
155:21 - this one we would use component
155:23 - will receive props you see and this is
155:25 - another issue look how many
155:27 - deprecated life cycle methods they went
155:30 - through
155:30 - right so they realized that one wasn't
155:32 - good so they went ahead and marked it as
155:34 - unsafe and they deprecated it
155:35 - and then they went ahead and changed
155:36 - this one so they deprecated it and then
155:38 - they went ahead and changed something
155:39 - else so now this is a new lifecycle
155:41 - method did update
155:43 - right and i don't even know which one
155:44 - this takes so i think this maybe gives
155:46 - us
155:46 - what do they give you with component
155:48 - update is it props
155:51 - i don't think so um but the one i used
155:53 - to use for this was
155:55 - component did should component update
155:58 - so you can actually determine if a
155:59 - component that should update and again
156:01 - you see like the point i'm trying to
156:03 - show you here is
156:04 - already it's just confusing as to which
156:07 - one do i choose
156:09 - right like do i choose this one this one
156:12 - this one if we go ahead and do component
156:13 - did update i think it gives you
156:14 - something called props
156:15 - and you can go ahead say console.log
156:17 - props um but even here
156:19 - nope we've got props
156:23 - nope okay so component did update let's
156:26 - go ahead and just quickly
156:27 - check this component did
156:30 - update um
156:38 - you know being a developer means that
156:41 - you're a professional googler
156:42 - yep exactly you become a professional
156:45 - googler dude
156:46 - and you see like look even bloody
156:48 - documentation is more annoying
156:51 - like it really does get to a point where
156:54 - it gets annoying
156:55 - um but the one that we're interested in
156:58 - is props
156:59 - and um component update so here
157:04 - you get the previous props the previous
157:06 - state
157:07 - and then here this is exactly it yeah so
157:09 - this is the one we kind of need
157:10 - so
157:14 - see it gives you the previous props and
157:16 - then it's saying if
157:17 - and again this is okay so we're not
157:19 - actually checking this state here
157:21 - as in here we're checking against our
157:22 - own state but what i would actually say
157:25 - is um
157:26 - oh no sorry i know so you wouldn't do it
157:28 - here even for this for this use case
157:30 - you would actually have the code inside
157:32 - the render block you would actually go
157:33 - ahead and say
157:34 - if count so when it renders
157:38 - you would have it here so i mean you can
157:41 - have a component did update
157:42 - and you can pretty much go ahead and
157:43 - check against props and say like if
157:45 - if something changed with the props then
157:47 - change something else
157:49 - but again here in the render block now
157:51 - it should be the same thing so it should
157:53 - say count so this one again if this dot
157:55 - state dot com
157:59 - and you can see well firstly now look at
158:01 - this we've got two
158:03 - we've got two things so now like some
158:05 - some other things bugging out and it's
158:06 - being weird you see but it's working
158:08 - but now it's rendering out twice and
158:10 - that there's a reason why
158:12 - um but the point is is that like even
158:13 - digging into that like
158:15 - it just gets to a point where it's like
158:17 - why like as in why do we need to know
158:19 - like how to do it in this way all i
158:21 - would tell you is like if you
158:23 - need to do it this way firstly you're
158:25 - not gonna come across a situation like
158:26 - this to be honest ever
158:28 - yeah you're never going to run into that
158:29 - one but you will run into situations
158:30 - where you've got component demand
158:32 - and component will unmount for example
158:34 - right now imagine we had a component did
158:36 - mount and component will unmount so
158:37 - component will
158:38 - on mount oops
158:42 - and then let's go ahead and say like on
158:44 - the component did mount this is a good
158:46 - example actually we could say
158:47 - the the component the class product
158:49 - component loaded and let's just say
158:51 - the expensive db connection
158:54 - was made yeah so imagine it creates that
158:57 - connection in the beginning right
158:59 - so the expensive db connection was made
159:01 - the expensive
159:02 - each time they loaded the expensive one
159:04 - was made right and then imagine like it
159:06 - refreshed or something in it and it made
159:07 - another one but it didn't detach the old
159:09 - one it's going to cost you a lot of
159:10 - money okay
159:11 - so in the unmanned you would then say
159:14 - and obviously these are console logs
159:15 - they're not actually functional code but
159:17 - you would have the code here
159:18 - what's detaching anyways like do we use
159:21 - that in
159:21 - firebase or something yeah so you would
159:23 - use it in firebase as well yeah so
159:25 - in firebase is a way we would usually
159:27 - have it where
159:28 - i did it in one of the builds i don't do
159:30 - it in all the builds but in some of the
159:32 - builds i actually show you how to use
159:33 - unsubscribe
159:34 - when you do a fire fire store listener
159:36 - so when you use on snapshot
159:38 - there's something called unsubs
159:39 - unsubscribe um
159:41 - that you can use inside of a used a use
159:44 - effect which gives you a very nice
159:45 - detaching mechanism but here could you
159:47 - use that in the discord clone
159:50 - no no no so what because i know you
159:54 - talked about snapshots in that one
159:55 - yeah so for anyone who's watched it i'll
159:58 - quickly give you a quick brief
160:00 - update so imagine we had like a user
160:01 - effect here so use effect
160:03 - and then here imagine you've got like um
160:07 - so imagine you had a db oops so
160:09 - obviously it's going to freak out
160:10 - because they connect them
160:11 - we don't have a db in this code but
160:13 - we're going to say db.collection
160:15 - and then imagine you had a collection of
160:17 - users and then you had on snapshot
160:20 - so this is kind of the firebase code
160:22 - that we've all may have seen but if
160:23 - you've done any of the clones you would
160:24 - be familiar with what i'm writing right
160:26 - now or kind of
160:27 - then you'd have this and then you would
160:28 - kind of typically have some kind of
160:30 - mapping so you'd say something like set
160:32 - users if you had some user state to
160:37 - snapshot.map and then you say for every
160:39 - doc map the
160:40 - oh yeah uh victor this was to answer you
160:43 - did the id
160:44 - was it no no it was your brother brett
160:46 - wasn't it was brett your brother or no
160:48 - no angel angel okay angel so so i think
160:51 - is brett's still in here or no i think
160:53 - he's gone
160:53 - um okay i mean if he watches it back but
160:57 - the point is he asked earlier about how
160:58 - do we map against the id
161:00 - and the way we would do it is we do it
161:01 - here you say id doctor id
161:03 - then you do oh god yeah and we say if we
161:07 - want real time database we never want to
161:09 - unsubscribe right
161:11 - yeah so but the thing is right so you
161:12 - might have seen this in previous ones
161:14 - right so where i've done this and it
161:16 - maps to the firestore db
161:18 - but what you can actually do in it to
161:20 - make it super efficient and optimal
161:22 - to make sure that it never has an extra
161:25 - sort of because in some
161:26 - trust me in some apps when it's sort of
161:28 - re-rendering a lot
161:30 - this may not get detached correctly
161:32 - right so i wouldn't just
161:33 - trust firebase to handle it so what this
161:35 - does is this this on snapshot gives you
161:37 - it gives you back a function called um
161:41 - uh unsubscribes what you is you say
161:43 - const unsubscribe
161:45 - oops unsubscribe equals this right
161:48 - and then what you do is in the cleanup
161:50 - function so the way you clean up after a
161:51 - use effect is you say return
161:54 - and then it does it like this and then
161:55 - you pretty much just say unsubscribe
161:58 - and now you have a perfectly clean up
162:01 - when i
162:02 - the moment i use cleanup because i used
162:04 - to make like
162:05 - socket connections using yes all of
162:07 - these things yeah
162:08 - and when i used it in normally like
162:11 - values
162:12 - where you have made the db collections
162:13 - uh then the problem is that
162:16 - it set up two listener at a time and
162:18 - that was a problem but when i did that
162:20 - in return
162:20 - it made only one list yes exactly
162:24 - and now imagine this right imagine you
162:26 - had so when you if anyone i'd recommend
162:28 - all of you guys and girls want to try
162:30 - and do um
162:32 - some kind of socket.io at some point and
162:34 - just try and mess around with it just to
162:35 - see how this stuff works behind the
162:37 - scenes
162:38 - um but the point is is that like uh if
162:40 - you don't add the sort of unsubscribe or
162:42 - detach
162:43 - right fire firebase is really cl that
162:46 - they've built it very well which means
162:48 - that if you don't add this
162:49 - chances are i think they do it but the
162:51 - point is that i've seen in
162:52 - before it didn't used to do it so it's
162:55 - only recently i think they've added that
162:57 - but um if you don't do it the point is
162:59 - that athaba just said that two
163:00 - attached instead of one right now
163:02 - imagine you have a really
163:04 - you imagine your app scales overnight
163:06 - and you've got as soon as you go on your
163:08 - your facebook 2.0 feed
163:12 - you've basically gone ahead and created
163:13 - this new sort of i don't know it's
163:14 - called like tinder
163:16 - or the the tinder that we built pretty
163:18 - much before
163:19 - but imagine you do that and it's got
163:20 - like 5 000 things now
163:22 - instead of rendering 5 000 listeners
163:25 - it's going to render 10 like 10 000
163:27 - listeners you see and then that's
163:28 - and that's not only ten thousand this is
163:30 - it's kind of like um
163:32 - we call this big o notation in computer
163:35 - science where it's like
163:36 - if you have a problem which it seems
163:38 - small
163:40 - with with like two users right it can
163:42 - get incrementally like uh
163:44 - exponentially bigger time space
163:46 - complexity right yeah it can get
163:48 - exponentially bigger which means you
163:49 - might not see the problem at two users
163:51 - but even at 10 000 users that problem is
163:53 - huge
163:55 - right it's not like in in proportion it
163:57 - doesn't just double and get bigger it
163:58 - gets
163:59 - huge afterwards which becomes like a
164:01 - really really big problem
164:03 - to to deal with like an example is that
164:05 - if you have a chat listener and then
164:07 - if you don't use it in return so what it
164:09 - will do like whenever you get a message
164:11 - it will be displayed on the screen two
164:12 - times
164:13 - yeah just because you have that in use
164:14 - effect and that will just set up the
164:16 - listener two times exactly
164:18 - just because they said i faced a lot of
164:20 - times and it took me a lot of time to
164:22 - figure that out
164:23 - yeah and exactly and to be honest that's
164:25 - something which like if if anyone's
164:27 - watching this who has experienced any of
164:29 - those similar issues
164:31 - um then then that's a really big top tip
164:34 - because
164:35 - i remember i suffered the same thing
164:36 - with other and like my apps started to
164:38 - freeze and get slow and all sorts and i
164:40 - was like what's going on i don't know
164:42 - and and obviously it's harder to debug
164:44 - because if you don't know what you're
164:46 - looking for
164:47 - you don't know how to debug that um
164:49 - there is ways of actually using the
164:51 - inspector to go ahead and check what
164:52 - listeners are getting attached it's like
164:54 - finding a needle in
164:55 - the patch yeah like when you don't know
164:58 - the correct tools to go ahead and find
165:00 - out what's going on you have no idea you
165:02 - just see your app getting slow for
165:04 - for no reason what it seems like but uh
165:06 - i think everyone should
165:07 - just read the use effect documentation
165:09 - because before using use effect i used
165:11 - to just make the listeners and just like
165:13 - where you
165:14 - define state and everything and what
165:15 - that did like whenever the component
165:17 - re-rendered it just make resistance
165:19 - listeners listener and like yes
165:20 - ten thousand listener and just crash the
165:22 - entire page exactly
165:24 - 100 and literally even look at this guys
165:26 - in the documentation they even talk
165:27 - about subscription like a subscribe and
165:29 - unsubscribe
165:30 - similar to as a as a that was saying
165:32 - it's like a listen like as in in
165:33 - socket.io you would have a listener
165:35 - which attaches
165:36 - on the component loading and then when
165:37 - it on when it unmounts and now
165:39 - for those of you who are kind of new to
165:41 - to react and kind of aren't sure what
165:43 - we're talking about when they
165:43 - we talk about re-rendering or that sort
165:46 - of stuff
165:46 - imagine when i click the account button
165:48 - right so imagine when i go here
165:50 - and i click on where's my app localhost
165:53 - imagine when i click this button right
165:56 - assume every time i click it it
165:57 - re-renders this component
165:59 - right it re-renders it because i've
166:01 - changed something inside of it so i've
166:03 - changed a piece of state
166:04 - it does it in a very clever way it
166:06 - checks it against something called a
166:07 - virtual dom and it checks what changed
166:10 - what do i need to re-render but we're
166:11 - not going to go too much into that but i
166:12 - would recommend reading up on what the
166:14 - virtual dom is and how it compares
166:16 - because it is interesting how it does it
166:18 - and
166:19 - the main thing is that um
166:22 - every time we do this if you haven't
166:25 - coded your stuff correctly for example
166:27 - if you use effect had
166:29 - um if you don't include these empty
166:31 - brackets for example and you just did
166:32 - this
166:33 - your code's kind of on an infinite loop
166:35 - right so i'm going to show you guys
166:36 - another example now
166:38 - um imagine now we're going to import it
166:40 - again from product
166:41 - because i don't want to have that again
166:43 - i'm going to do this i'm going to bring
166:45 - this code back over here i'm going to
166:46 - get rid of this unsubscribe for now
166:48 - i'm going to show you guys if with a use
166:50 - effect right
166:54 - with the user i have a question yep uh
166:57 - so why do you use the snapshot
166:59 - uh the one you use the snapshot right uh
167:02 - this one you mean
167:03 - so why do i use this yeah so what's the
167:06 - use of the snapshot
167:08 - so this is firstly for for uh firestore
167:11 - so
167:11 - we haven't implemented anything here i
167:13 - was just sort of showing something from
167:14 - build
167:16 - but on snapshot as opposed to get in
167:18 - firebase terms
167:19 - on snapshot gives you a road time
167:21 - listener so i'd recommend checking out
167:23 - the builds
167:24 - and the main thing is is that the uh on
167:26 - snapchat will give you a real-time sort
167:28 - of like listener to the database which
167:29 - means that if anyone adds
167:31 - a document inside the collection that
167:34 - you're checking for example if any if
167:35 - any new
167:36 - user is added it would re-fire this code
167:39 - uh automatically so it would re-fire the
167:41 - code inside of here because it basically
167:43 - goes ahead
167:43 - takes imagine like a camera pointing at
167:45 - that point that
167:47 - that space in the database if anything
167:49 - changes gets added it gets deleted
167:51 - it takes a picture of it as a snapshot
167:53 - and gives you the code and it says rerun
167:54 - this
167:55 - right so every time it changes we pretty
167:57 - much go ahead and
167:59 - say sunny yep
168:13 - like you are calling a variable like a
168:15 - function in that variable so it's just
168:17 - uh oh yeah so so to to i know it can be
168:21 - confusing i see a point so this
168:23 - on snapshot actually returns something
168:26 - called
168:26 - it's a function so this yes so this
168:30 - returns a function and then you just
168:31 - invoke the function it's kind of
168:33 - i remember in the beginning when i was
168:34 - like how the hell do i unsubscribe i
168:36 - couldn't figure it out
168:37 - but the the way is that this actually
168:39 - returns
168:40 - a function just like a function returns
168:43 - like it can return a string an object or
168:45 - something like that
168:46 - this just returns a function which is
168:48 - uninvoked
168:50 - um and then here we just we call it when
168:52 - we want to unsubscribe
168:54 - and it will and this function that is
168:55 - created is linked to this
168:58 - listener so we do like a function not
169:01 - unsubscribe or we directly just call the
169:03 - unsubscribe
169:04 - you just cuz because the unsubscribe is
169:05 - getting uh it's a const it's a variable
169:08 - which gets assigned to
169:10 - this and this kind of uh i wish i had
169:12 - the um
169:14 - the uh the code up but let me go ahead
169:16 - and try and find amazon
169:18 - clone um it's
169:21 - so snapshot it's kind of like it's kind
169:23 - of like what snapshot
169:24 - actually means like it takes a picture
169:27 - yep
169:27 - gets extracts the data and then puts it
169:31 - into your
169:31 - code exactly yeah but sony what if we
169:35 - are using in production and we have like
169:38 - a million records and like they would be
169:41 - changing too fast and
169:42 - we will get snapshot at each and
169:44 - everything
169:45 - um so didn't cause any problems
169:49 - well so so you said uh if we go on yeah
169:52 - so you have to be
169:53 - okay so this is where architecture comes
169:55 - into play so yeah
169:56 - it's definitely a cheating imagine if
169:58 - you had like 5 000 things on the screen
170:00 - being rendered all with on snapshot yes
170:03 - you've got 5 000 listeners on your
170:05 - screen at once it because like it's a
170:07 - bad
170:08 - build isn't like you shouldn't have that
170:09 - instead what you should have
170:11 - maybe is a on snapshot which
170:14 - feeds simply uh information into an
170:18 - array
170:19 - right that's pretty easy right to do
170:21 - that right so it's not very intensive
170:22 - even if it's got like a thousand records
170:24 - in the array
170:25 - it really doesn't matter what i would
170:26 - say then so imagine okay so i'm gonna
170:28 - put that into practice to show you
170:29 - actually
170:30 - so let's go ahead and say we had on
170:32 - snapshot and then let's just say we had
170:35 - um i'm going to make this a bit more
170:37 - simpler so
170:39 - this is getting a bit uh [ __ ] but
170:43 - we'll go ahead and do it
170:44 - let's go ahead and say map this to set
170:46 - the
170:47 - set users and imagine we had a data set
170:49 - called users right
170:52 - so let's go ahead and say users and
170:54 - let's just say your app went exploded
170:55 - overnight and your users are being
170:57 - rendered on the screen right so you've
170:58 - got like
170:59 - a million users tomorrow right and this
171:02 - by default was an empty array
171:04 - and imagine like your users filled up
171:06 - and and on your return block
171:09 - so over here you had some kind of loop
171:12 - which was like
171:13 - users.map and then it was rendering out
171:15 - a user right so every for every user
171:18 - it was going ahead and saying something
171:19 - like h2 user
171:21 - right now think of it think about what's
171:24 - happening here yes you might be thinking
171:26 - right you have to okay so say
171:30 - it's kind of like the word this
171:31 - carefully so you you see where
171:33 - the problem lies is that okay so if
171:36 - you've got one component
171:38 - where even if there was a million
171:39 - records getting mapped here right
171:42 - not a million let's just be let's just
171:43 - say like 500 if you've got a million
171:45 - things on the page it's never a good
171:46 - idea
171:47 - right but if you've got like a hundred
171:49 - things being
171:50 - a hundred users being fed into an array
171:54 - all reacts doing is is rendering out the
171:56 - list right
171:57 - but the one the difference which makes
171:59 - this optimal against not being optimal
172:01 - is for example including keys right
172:04 - if you've got huge lists right you
172:07 - should always include a key
172:09 - because a key imagine you've got a huge
172:11 - huge list being rendered on the screen
172:14 - um a key is basically just remember what
172:16 - i said so react is something where it
172:19 - carefully checks what it needs to
172:21 - re-render right
172:22 - now imagine you've got a list of a
172:24 - thousand elements on a page and
172:26 - it renders that the first time and yes
172:27 - sure it's going to take a little bit
172:28 - longer to do a thousand elements
172:30 - but imagine every single one has a
172:31 - unique key against it
172:33 - right now imagine 500 users get added or
172:37 - they kind of swarm in
172:38 - to your app if you don't have a key it's
172:41 - going to re-render
172:42 - 1500 users in that list it's going to
172:45 - re-render the entire list right
172:47 - if you have keys it only needs to
172:49 - re-render 500
172:52 - because it now it knew that hang on the
172:54 - only thing that changed
172:56 - are 500 new records with these unique
172:59 - keys got added
173:00 - so i only need to now slot those in
173:03 - super clever how it works it's really
173:05 - really clever how it works
173:06 - but the point is that if you don't add
173:08 - keys in it's going to add
173:09 - it's 1500 renders against 500 extra
173:12 - renders
173:13 - right so in this case for a user
173:16 - don't ever use the index as well i know
173:18 - like some people sometimes do this they
173:20 - do map
173:21 - and then they kind of like oh i need a
173:22 - key i'll use i right
173:24 - this is a bad this is a bad habit the
173:26 - reason being is because
173:28 - this is not a unique value right when it
173:31 - re-renders
173:31 - i is going to change which means i is
173:33 - kind of messed up and
173:35 - people do use it as we can use uuid to
173:37 - get random things and just
173:39 - yeah you can use uuid which is good uh
173:42 - or
173:42 - if you're pulling it from somewhere like
173:44 - firebase rather than just pulling the
173:46 - database
173:47 - the data what i would say is is map it
173:49 - to an object like this
173:51 - and pretty much go ahead and do this i
173:52 - have data being mapped to the data and
173:54 - then have the id
173:56 - being mapped to the id field inside of
173:58 - firebase so
173:59 - it will get the document id and then
174:01 - here when you get the user
174:03 - you pretty much detach it and you say id
174:05 - data
174:06 - it's a bit confusing because we're not
174:08 - actually we haven't got context here but
174:09 - the point is that the id would be the id
174:11 - in the database
174:13 - right that really fixed my problem with
174:15 - the twitter clone because yeah twitter
174:17 - clone you pass us
174:19 - as a key prop you pass the text yeah and
174:21 - you did explain briefly
174:23 - how to do it with the doc id yeah and i
174:26 - was
174:26 - trying to play with it and i couldn't
174:28 - figure it out but now you're explaining
174:30 - it here
174:31 - yeah so i think i'm going to go back and
174:33 - fix it yeah no i'm really glad it
174:35 - helped you out dude because it's a very
174:37 - good um thing to kind of like it
174:39 - and to be honest the first time we see
174:41 - it it's always like
174:42 - you know i don't really understand that
174:44 - fully in this then somebody will say
174:45 - something or you'll see a tutorial
174:47 - you'll do like an exercise they'll be
174:48 - like oh [ __ ] wait
174:49 - kind of clicked a little bit and then
174:51 - you go back kind of play with it and
174:53 - then it'll click
174:53 - and that's that's that's the whole
174:55 - process in it like again
174:56 - and again and again you know like that's
174:58 - where it's going to come into play
175:00 - um but we talked about uh hooks and we
175:04 - talked about sort of
175:05 - the difference between class-based and
175:07 - functional and
175:08 - the kind of building back and forth
175:09 - between them and it's a very important
175:11 - skill to have
175:12 - right that that skill of being able to
175:14 - take a class-based component change it
175:16 - to functional and just being able to
175:18 - read
175:18 - code that is written in both functional
175:20 - and class based right
175:22 - we know now that a class functional
175:24 - components are the ones that we want to
175:26 - kind of drive towards
175:27 - it's where the sort of like the whole
175:29 - sort of um industry is going towards
175:32 - for many reasons that we explained about
175:34 - and now kind of touching base
175:35 - back on the main concepts what i would
175:38 - say is is in terms of the basics of
175:40 - react right
175:41 - all of these elements like if if i asked
175:44 - you to explain what jsx is right now
175:46 - like oh like i mean the the real answer
175:50 - you need to really say is this kind of
175:51 - it's a mush between like html and
175:54 - javascript it's basically html which
175:55 - allows you to have javascript in line
175:57 - right that's all it basically is but
175:59 - just like understanding
176:00 - like okay all right so it like that's
176:03 - what jsx is you know like
176:05 - in the beginning when you start off with
176:06 - react it can kind of kind of like go a
176:08 - bit over the head and kind of be like i
176:09 - don't know what that is
176:10 - um and then it even shows you examples
176:12 - here just seeing how it works
176:15 - and how you can run it and there are
176:16 - differences in jsx for example you can't
176:18 - have the if keyword in jsx
176:21 - right so if you wanted to have yeah you
176:23 - can't fit inside of jsx so for example
176:26 - here if i wanted to say
176:29 - if you would have that optional ternary
176:31 - thing right exactly but some people
176:33 - might be like if count is greater than
176:35 - two
176:36 - then do this and i'll be like oh my god
176:37 - my code's not working right so here
176:39 - exactly yeah and i think a lot of people
176:43 - do it right
176:44 - here you could either have this so you
176:46 - mean if the count is greater than two
176:47 - then render this out
176:49 - or you can have if the current is
176:51 - greater than two
176:52 - render out h2 is greater than two
176:56 - so we can just say it's more than two uh
176:58 - else
177:00 - h2 it's less than two right
177:03 - so you could do that right and obviously
177:04 - it's freaking out for some weird reason
177:06 - did you mean okay
177:07 - yeah it's just being some annoying thing
177:09 - but it's only what i think that we
177:11 - should have a call on firebase
177:13 - that people just get it yeah like
177:16 - snapshot 10 hours
177:17 - i think that we have we actually dropped
177:19 - a um we dropped a really good video on
177:22 - it's a snippet video on on snapshot so
177:25 - it's on youtube right now and we
177:27 - yeah so uh srikanth knows uh it's
177:29 - literally one that we dropped
177:30 - we snipped a bit out when me and carson
177:32 - were talking uh because what we do is
177:34 - whenever we drop
177:35 - like a golden nugget like we kind of try
177:37 - and capture those moments and sort of
177:39 - like
177:40 - shoot it as its own video so it's kind
177:41 - of like a value bomb for you
177:43 - um so we there is a video on snapshot
177:45 - right now
177:46 - um so we've got that guys and then we've
177:49 - talked about like
177:50 - i think what
177:54 - yep um
178:03 - sorry where are all these videos like
178:05 - this
178:06 - snapshot videos uh it's on youtube on
178:08 - youtube
178:09 - yeah it's on youtube okay thank you
178:12 - so i think that was my internet actually
178:13 - i'm not sure if i cut off on youtube
178:15 - but the rendering elements um so i would
178:18 - recommend going here checking out this
178:20 - components and props that we talked
178:21 - about the difference like look function
178:23 - and class-based components
178:24 - it will show you different examples it
178:26 - will show you like
178:28 - uh and honestly it's actually like it's
178:29 - the only documentation i don't
178:32 - mind reading right because in react i
178:34 - actually don't mind reading their their
178:35 - sort of um
178:36 - their documentation and also it's a very
178:38 - good question balor ganesh actually just
178:41 - said on
178:41 - youtube he says
178:45 - uh what is the difference in naming file
178:47 - extensions project
178:48 - project.js against
178:51 - product.js against product.jsx but he
178:54 - said project.jsx
178:56 - um it's a good question so if you're
178:58 - manually doing this or if you enter a
179:00 - company they might not be able they
179:02 - might have
179:02 - dot jsx right but if you use create
179:04 - react app
179:06 - under the hood they do some clever stuff
179:08 - which means that you don't have to write
179:10 - jsx but these files don't get confused
179:13 - they are jsx files so you see when i
179:15 - change the dot jsx it changes to react
179:18 - the logo right so they are jsx but
179:21 - because we used we use create react app
179:23 - they have like all of this sort of
179:25 - special compiling stuff that happens
179:27 - that goes on before we sort of like it
179:29 - runs
179:30 - and that's where we do it and also guys
179:32 - if you if you're considering
179:34 - don't ever run npm run eject it's a
179:36 - one-way thing once you eject your app
179:38 - from create react app you can't undo it
179:40 - so uh don't do that hey
179:44 - um sonny can you hear me now yeah
179:48 - yeah so i think what atharva was trying
179:49 - to say was maybe like we could have a
179:51 - coaching call
179:53 - on firebase like we could make or
179:56 - something like we can make a big
179:58 - firebase
179:59 - uh project using like all of the
180:02 - possibilities of firebase like
180:04 - authentication firestore and stuff like
180:07 - that
180:07 - yeah for sure i mean the best way is
180:10 - that like
180:11 - yeah i mean i'm always down for that
180:12 - always down for that uh
180:14 - what i would say is if you if for anyone
180:17 - who hasn't i mean i thought has
180:18 - definitely done a lot of the builds
180:20 - um but but he's literally wrote medium
180:22 - articles in the middle
180:23 - so he's definitely done the builds uh
180:25 - but what i would say is and
180:26 - they're awesome guys if you haven't
180:28 - checked them out really really go i
180:29 - recommend go check out them because it's
180:31 - literally the
180:32 - dude the the extent that you broke it
180:34 - down
180:35 - is is like seriously impressive like
180:38 - i was amazed when i read it i was
180:40 - reading through it and i was like oh my
180:41 - god like and the thing that blows my
180:43 - mind is that
180:44 - i remember coding that from scratch as
180:46 - in in the beginning and the fact you put
180:47 - it all into words was like my
180:49 - as i was reading i was like this is
180:51 - exactly what i was thinking as i did it
180:53 - like
180:54 - um so so vlog was instantly long
180:58 - yeah it was long like 21 minutes
181:01 - no but the build itself took like three
181:04 - days though
181:05 - yeah it took like three days uh yeah
181:08 - like
181:08 - and then they all said like technical
181:10 - bug issues i made the solution
181:12 - for the problems i faced like sometimes
181:14 - i had to
181:15 - get some core like from some part of the
181:17 - video it would take me a long time to
181:19 - just get some part of the video from the
181:21 - for a long video yeah
181:23 - is this it's true if i have a blog which
181:25 - has everything like
181:26 - like for how do i do stuff like it would
181:28 - be so good
181:29 - yeah do you honestly uh amazing amazing
181:32 - stuff like i went i remember
181:34 - when you sent me the link i was i was
181:36 - blown away when i when i saw that that
181:38 - was a
181:39 - really really impressive that you did
181:40 - that so definitely go ahead and check
181:41 - that out guys because it will help you
181:43 - guys out in terms of
181:44 - if you haven't done that build yet go
181:46 - ahead and do that alongside the sort of
181:48 - video and check it out
181:49 - because uh it isn't pretty impressive
181:52 - like oh cool
181:53 - um yeah so uh state and life cycle
181:57 - basically okay so
181:58 - going back on to the points right so we
182:00 - have events and stuff like that again
182:01 - even events and stuff like that for
182:03 - like here it says for example the html
182:06 - for this
182:06 - is slightly different in react and we
182:08 - write this right
182:09 - you see it's small differences like as
182:11 - in this is
182:13 - if you've come from html css javascript
182:15 - you'll be like yeah this is how i write
182:16 - my code
182:17 - right and then you come over to react
182:19 - you're like oh my god wait a minute wait
182:20 - what's
182:20 - what's going on here and then you kind
182:22 - of like you you see it differently
182:24 - whereas it gives you clear examples of
182:26 - how it was done before and how you would
182:28 - now do it right so this is something i
182:30 - recommend that everyone goes ahead and
182:32 - mask it doesn't matter if you coded
182:34 - react doesn't matter if you've done
182:35 - tutorials and builds
182:36 - go through this main concept and um
182:39 - and also priyanka and i thought maybe go
182:42 - ahead and drop that the link to the blog
182:43 - inside of the the zoom chat
182:45 - and also on youtube because they're i
182:48 - think priyanka is doing it on youtube
182:49 - branches doing it on youtube and maybe
182:52 - if you could drop in the zoom chat
182:53 - um conditional rendering this is where
182:55 - we talked about the sort of um i'll just
182:57 - drop the clever programmer
182:59 - link right on medium link it has three
183:01 - blogs awesome stuff dude
183:03 - um there's also on the clever programmer
183:06 - blog
183:07 - there's also uh blogs
183:10 - we posted it recently on react context
183:14 - api
183:14 - and redux if you don't understand both
183:16 - of them amazing
183:18 - dude it blows my mind like oh my god
183:20 - there's stuff happening though i have no
183:21 - idea about our times
183:23 - and i'm just like oh yeah okay we've got
183:25 - a team over here doing this now
183:27 - it's like things are happening so fast
183:28 - that like uh me and kazi just jump on
183:30 - calls now and we're like
183:32 - i'm like yo did you know we're doing
183:33 - this now he's like oh my god are we
183:35 - doing that and he's like yeah we're
183:36 - doing this one for this time
183:37 - holy [ __ ] we're doing that and uh
183:40 - it's it's a fun thing that to watch
183:43 - everything grow but it's awesome
183:45 - like um we just we we literally go for
183:47 - walks
183:48 - so i would literally grab my my
183:50 - headphones and say and cause he would go
183:52 - for a walk in l.a
183:53 - i'd go for a walk in london and we'd
183:55 - just talk for like an hour and sort of
183:57 - like align and then
183:58 - crack on with stuff it's awesome to see
184:01 - you but like the team is growing it's
184:02 - amazing stuff like
184:03 - honestly i really really love the
184:06 - community is that um
184:07 - cp is planning on releasing a blog
184:10 - almost every single day
184:11 - yeah on some really great content about
184:14 - like clones
184:15 - yeah yeah exactly so cannot give a lot
184:18 - of details cannot give a lot of details
184:20 - about it but there is there is a lot
184:22 - yeah right now exactly so exciting stuff
184:24 - yeah
184:25 - and in terms of like you guys wanting
184:27 - like everyone watching right now in
184:29 - terms of like
184:30 - learning and trying to digest and sort
184:32 - of going into
184:33 - like building your career as a react
184:35 - developer
184:36 - literally take every single opportunity
184:39 - that you can get
184:40 - to go ahead and build whether it be like
184:42 - well done firstly every single one of
184:44 - you for being on the call right now and
184:45 - watching and and kind of staying here
184:47 - right now
184:48 - because like i'm telling you this is
184:49 - going to be the difference and like
184:52 - the the work you're putting in now i'm
184:53 - telling you will transform your entire
184:56 - life and it will put you in a position
184:57 - where like
184:58 - it it it's not been possible to be able
185:00 - to like work in
185:02 - as react developers have such a nice way
185:05 - of working i'm telling you like you can
185:06 - work remote wherever you are in the
185:08 - world like
185:09 - my last full-time job was fully remote
185:11 - like i literally used to just wake up
185:13 - and answer a call in the morning and
185:15 - and as i'm brushing my teeth i'd be on
185:17 - another cool and like
185:18 - like you have a very nice you can have a
185:20 - very nice setup with your work you know
185:21 - like
185:22 - um and you can travel you can do
185:24 - whatever you need to do and you can
185:25 - still get paid and do what you need to
185:27 - do so there's it's awesome to do that
185:29 - um but yeah going back to the sort of uh
185:31 - react basic stuff so main concepts guys
185:33 - i want you guys to all pretty much
185:36 - like master this section right like as
185:38 - in go through it and once you've gone
185:40 - through it go through it again
185:41 - like just read through it because every
185:42 - time you read through it there's gonna
185:43 - be another bit that you're gonna be like
185:45 - oh okay like that's solid because
185:46 - this is your foundation once you have
185:49 - this foundation solid
185:51 - everything else will be like secondary
185:53 - and it will kind of stack on very easily
185:55 - right
185:55 - now once you're sort of done with that
185:58 - advanced guides you can see there's tons
185:59 - of things here
186:00 - now even all of this like some of this
186:02 - stuff i mean i've used most of it but
186:04 - there's
186:05 - there's always some areas for example
186:06 - portals i've used portals once
186:08 - and there's and then there's a lot of
186:10 - cases where i don't use well i haven't
186:12 - used a lot of this but you guys can go
186:13 - ahead and take this to that next level
186:15 - um but what i would say is yeah with
186:17 - that done
186:18 - and also once you once you're sort of
186:20 - done as well with that there is there's
186:21 - a whole other section of testing right
186:23 - testing is a whole other area you can
186:24 - have testing
186:25 - i think it would actually be pretty cool
186:27 - to move into some kind of
186:29 - tdd uh tdd which is test driven
186:32 - development where you basically write
186:33 - your test first
186:34 - you write your test to fail i personally
186:36 - am not a fan i mean i've worked in
186:38 - places where it's very much
186:39 - tdd is everything you have to write a
186:42 - test first and then you build the
186:43 - feature until it satisfies the test
186:46 - um i just i mean i don't know i'm not a
186:49 - fan i'm not going to start a war though
186:50 - because we're on youtube right now
186:51 - and this is going to get everyone sort
186:54 - of fighting about tdd versus other stars
186:56 - of development
186:57 - um but yeah so this is i was thinking
186:59 - for one coaching call could you go
187:01 - like you know how you always delete like
187:03 - app.test.js
187:04 - yeah and all those other things do you
187:07 - think like you could go
187:08 - over that one time and like explain like
187:11 - for sure what it actually is yeah for
187:13 - sure i mean the main thing is is
187:15 - honestly truth be told
187:16 - it's something which i haven't touched
187:18 - on in a while i mean but react testing
187:20 - has improved
187:21 - a lot now uh and then it's actually
187:24 - something which is extremely valuable as
187:26 - well so it's a really good thing you
187:27 - pointed that out
187:29 - um i will say as a goal for myself to go
187:31 - ahead and get more knowledge in that
187:33 - area
187:34 - and eventually we'll have like the end
187:36 - goal guys just so that you guys know
187:38 - is that the the modules are going to
187:40 - have everything from a to z is
187:42 - he right there the coaching calls are
187:43 - going to be your way of pretty much
187:45 - skipping the way right you can pretty
187:47 - much go ahead and just kind of
187:48 - jump in and what i'll say is never wait
187:50 - for that to come around just to be like
187:52 - oh
187:52 - i'm gonna wait until you know i get it
187:54 - because truth be told like
187:56 - these are just accelerating your growth
187:59 - all of these extra things are
188:00 - accelerating your growth
188:01 - if you do every single one of those
188:03 - clones
188:05 - and you go through the coaching course
188:06 - and you pick up all the golden points
188:08 - off each one
188:09 - and you sort of put in practice you
188:11 - teach you coach take the points that
188:12 - could
188:13 - like uh pre on you that that sort of uh
188:15 - corey that patch that
188:18 - like everyone else that we spoke about
188:19 - today like take all those points and
188:21 - sort of use that in your development
188:22 - forward
188:23 - i'm telling you there is no way you can
188:25 - fail like it's going to be something
188:27 - which is going to drastically change
188:28 - your improvement in your progression
188:30 - from being like a from going from a
188:32 - junior developer to senior developer
188:34 - and what could be like and this is one
188:36 - thing i'll tell you is being in
188:37 - an environment and community like this
188:39 - is going to accelerate you
188:41 - so fast it's ridiculous like to the
188:44 - point where
188:44 - you'll be accelerating to a point where
188:46 - i remember i was around i was a junior
188:47 - developer
188:48 - and just by surrounding myself with
188:50 - different people
188:52 - i spoke to a senior developer and i
188:53 - asked him i remember when i was first
188:55 - starting out work i said
188:56 - how long will it take until i can get
188:58 - paid this amount
188:59 - and i remember he was like three years
189:01 - i'd say about three you know
189:02 - three and a half years and i in about a
189:06 - year
189:07 - i was getting that so so the point is
189:09 - that you don't need to do that you don't
189:10 - need to
189:11 - don't don't always think that the senior
189:13 - developers know what they're talking
189:14 - about and even me don't even think that
189:15 - like i'm i know the answer to everything
189:17 - always be proactive in knowing and
189:19 - taking an extra initiative to be ahead
189:21 - of the curve
189:22 - to keep pushing your knowledge and
189:24 - remember if the way to
189:26 - easily check if you're doing it is do
189:28 - you feel uncomfortable right now
189:30 - as in like was this session a bit kind
189:32 - of intense if it's yes
189:34 - good you're in the right place if it's
189:36 - no then just push yourself the extra
189:37 - step further
189:38 - and before we wrap up i just want to do
189:40 - one final thing and tell each and every
189:42 - one of you
189:43 - if you're not already signed up go ahead
189:45 - and go to react status
189:48 - and sign up to this newsletter really
189:50 - awesome newsletter
189:52 - and it's pretty much how i keep in it's
189:54 - honestly how i keep up to date with
189:55 - react
189:56 - and what's going on um so every single
189:58 - thing
189:59 - might be useful really really useful
190:01 - honestly really useful and look here
190:03 - like create react.verse next.js versus
190:05 - gatsby
190:06 - so honestly when i'm eating food and
190:08 - stuff i just kind of flick through my
190:09 - emails and i read this stuff
190:11 - and this is how i found out about hooks
190:13 - when they first came out this is how i
190:14 - kept up to date with all of that stuff
190:17 - another one is javascript status i think
190:20 - it is status newsletter
190:22 - and it's the same company i believe uh
190:24 - so javascript weekly
190:25 - yeah so you see same company but this is
190:27 - all javascript is supposed to react
190:30 - right so this is another one that i
190:32 - would recommend you guys go ahead and
190:33 - sign up to
190:35 - priyanshi also said like in the chat
190:37 - that there's apparently a node
190:40 - weekly or something oh nice node.js
190:43 - weekly let's go ahead and check that one
190:44 - node.js weekly
190:47 - um oh nice yeah
190:50 - nice dude i didn't know that okay i'm
190:53 - going to sign up to that right now boom
190:54 - subscribed oh i'm already subscribed
190:59 - there you go you know even i forgot
191:02 - there's proof in the pudding guys
191:04 - i mean but there you go like i mean my
191:07 - inbox just
191:08 - gets spammed now so you know you get
191:11 - that might even come to your spam like
191:13 - yeah
191:14 - i get people watching from youtube who
191:16 - message me saying hey i'm stuck on this
191:17 - bill i'm like dude don't email me man
191:20 - you know even david sent out emails to
191:23 - us and
191:24 - it landed into my spam folder somewhere
191:26 - yeah it gets buried and all sorts
191:29 - um but yeah that's awesome another one
191:31 - we've got there um
191:33 - but yeah guys with that said let's go
191:36 - ahead and
191:36 - we'll take maybe just a few questions
191:38 - and then we're going to wrap
191:39 - up for today's session because it has
191:41 - been quite a long call but uh it's been
191:43 - an amazing call so
191:45 - wrapping up uh let's do maybe five
191:47 - minutes
191:48 - max of of questions and then what what
191:51 - honey i had a quick question yeah
191:54 - so uh i mean this is kind of like
191:57 - uh did you get time to like try and
192:00 - figure out like a time that we could
192:01 - meet
192:02 - yeah so let's actually go uh message me
192:05 - again honestly it takes it i'm sorry
192:07 - dude it takes like a lot of
192:08 - patience sometimes with me uh it can get
192:11 - especially lately
192:12 - because we're pushing the react basics
192:14 - we're pushing a bunch of stuff behind
192:16 - the scenes which
192:17 - is really like some stuff we don't
192:19 - really can't really talk about but there
192:20 - is so much stuff that we're like really
192:22 - trying to move forward
192:24 - in one go so uh getting on one to one
192:26 - calls it's been a bit tougher than
192:28 - usual so i'm trying to make my way
192:30 - through the list uh right now my slack
192:32 - is red
192:33 - i have like a list i have like that
192:35 - entire sidebar is red at the moment so
192:38 - i'm gonna
192:38 - every morning i try and go through it
192:40 - and then the next morning it's red again
192:41 - so i'm like okay
192:43 - good question yep so um uh
192:46 - i was looking at uh you know i
192:49 - i i got laid off and i started with this
192:52 - new
192:52 - um trying to get up and running with
192:55 - react
192:56 - okay so if i'm trying to redo my resume
192:59 - i don't want to
193:00 - so if i want to start at react it will
193:02 - be basically starting from uh
193:05 - ground zero right with
193:08 - no like in terms of in terms of how what
193:11 - should i put on my resume
193:13 - i don't want to you know because none of
193:14 - the other skills that i have
193:16 - um would directly come into play uh if
193:20 - i'm looking for
193:20 - like a react full stack
193:24 - see i disagree dude i really so let's go
193:27 - through your previous
193:29 - your previous things right so uh what
193:31 - were your previous skills that you
193:32 - you're
193:33 - disregarding well i did like um almost
193:36 - like 12 15 years of uh
193:38 - you know i did some programming in pearl
193:40 - cgi this was in 2001
193:43 - i did some uh
193:47 - some java x xsl xml
193:51 - yup type of stuff in 2001 then i moved
193:53 - over to vb6 vba
193:55 - yeah asp asp.net
193:59 - sql and the most recent was sql server
194:01 - you know
194:02 - hardcore sql server maintenance uh
194:05 - writing stored procedures fine tuning
194:07 - queries and all that
194:09 - stuff yeah joe i would i'd hi
194:12 - javascript yeah javascript but now
194:14 - coming to this react i don't see the
194:16 - like uh
194:16 - you know where they both meet that's why
194:19 - every time i keep asking you about
194:21 - are you going to do a a live call on on
194:24 - the back end stuff because i want to see
194:25 - where the
194:26 - mirroring happens so i can take this and
194:29 - try tied to the back end type of stuff
194:31 - so remember
194:32 - a lot of the thing things like man stack
194:35 - builds and stuff like that is the back
194:36 - end like is in a lot of that is
194:38 - back end it's just we use a lot of like
194:40 - uh yo
194:41 - what you would maybe be used to is sql
194:43 - databases
194:44 - uh a lot of the stuff that we do is
194:45 - nosql but but don't get me wrong like i
194:48 - said i've worked in two companies where
194:49 - it was sql databases
194:51 - um so you can have react with sql it's
194:53 - definitely gonna have that can happen
194:55 - um but what i would say in that sense is
194:57 - is joe your experience that you listed
194:59 - out there
194:59 - is enough for me to say to you
195:01 - confidently that like
195:03 - i would want to bring this guy on the
195:04 - team because he's got tons of experience
195:06 - in the coding space
195:08 - like it doesn't remember this is the one
195:09 - thing you need to kind of detach from
195:11 - it's not about the language you're
195:12 - coding in it's about your ability to
195:15 - break down problems and solve them
195:17 - right it doesn't matter what language
195:18 - all languages is just a way of
195:20 - communicating with the computer right it
195:21 - really doesn't matter
195:22 - what language you write in it's like two
195:25 - humans speaking to each other like if
195:26 - you get good enough
195:27 - it really doesn't matter if you speak
195:28 - the same language your body your body
195:30 - language your posture
195:31 - if somebody's speaking french but
195:33 - they're inspiring millions of people you
195:34 - can pretty much tell that that person is
195:36 - a good speaker right like as in
195:37 - uh and and what i would say to you is
195:41 - you can be a good art
195:42 - architect yeah exactly a lot of it's
195:45 - architecture as well so
195:47 - being exposed to how like how it they
195:50 - did things in java is going to be
195:52 - transferable to what you're doing now
195:54 - what i would say joe is my main sort of
195:56 - advice for you is
195:57 - is do things like the clones because
195:59 - it's going to give you tangible sort of
196:01 - like things and
196:02 - that's that's fine that's my thing on
196:03 - the agenda so i did the amazon clone
196:05 - yeah the amazon clone as many clones as
196:07 - you can do because
196:08 - the ones which are constantly actually
196:10 - landing jobs for some reason these ones
196:12 - are killing it
196:13 - spotify clone is killing it uh the
196:15 - amazon clone has landed jobs for
196:17 - people um there was another one the hulu
196:21 - clone landed a job someone
196:23 - um honestly that it blows my mind like
196:26 - it's in i think honestly i think
196:27 - at least what what
196:31 - amazon now you think i should do the
196:32 - spotify and then what's your order
196:34 - preference
196:34 - joe i say the the truth is do as many as
196:37 - you possibly can
196:38 - for the pattern recognition alone like
196:40 - as in just doing
196:42 - a build after build after build would
196:44 - literally like dial you in
196:46 - so hard and that you're you'll really
196:48 - get used to javascript you'll really get
196:50 - used to
196:51 - uh how react works on a fundamental
196:53 - level you'll get used to sort of how
196:55 - apps piece together and because i would
196:57 - recommend doing different kinds of
196:59 - builds so amazon you've done the full
197:00 - build right the one with the payments
197:02 - yeah
197:03 - the full stack with the stripe and
197:04 - everything okay so awesome
197:06 - coming on to the front end part with
197:08 - react and i prefer you to
197:11 - start with the backend part first like
197:13 - with the node.js so you will understand
197:15 - it better
197:16 - yeah and then the react.js is you
197:18 - already doing so you will understand the
197:20 - whole concept of front-end and back-end
197:22 - and you have the
197:23 - good experience in database so you will
197:25 - be you can be a solution architect
197:28 - for an application in any of the company
197:30 - you can
197:32 - go with that as a solution architecture
197:33 - because you know the whole work around
197:35 - the area of that of the front end the
197:37 - back end and the database
197:38 - so all you have the knowledge exactly
197:44 - what i would say is just start because
197:45 - if you keep thinking on
197:47 - like how should i start like it's less
197:49 - likely to even work so i have to agree
197:51 - with
197:52 - yeah just think that what you want to
197:54 - make just think about what inspires you
197:56 - like for me like the facebook loan is
197:58 - the one i want to make so i'll just go
198:00 - and go and start with that like
198:02 - yeah because joe you're crushing it with
198:05 - like a lot of aspects of
198:07 - cp like is in the you're jumping on
198:09 - calls helping debugging and stuff like
198:10 - that
198:11 - main thing is is dude just start with
198:13 - the other builds as well like
198:14 - because the more you'll get under your
198:16 - belt you'll answer so many of your own
198:18 - questions
198:19 - without realizing you know and and a lot
198:21 - of them have front-end back-end
198:23 - functionality uh some things like the
198:25 - netflix build was like
198:27 - we used apis in that but we didn't use
198:30 - like a back end as such we kind of just
198:31 - we didn't
198:32 - we did like communication with apis
198:34 - which is somewhat of a of that area but
198:36 - it's a lot of it was front end
198:37 - um but then some builds like um facebook
198:40 - and things like that and even the mer
198:42 - stack builds
198:43 - the man stack builds i'd recommend might
198:44 - be better for you because um
198:47 - you're going to get a a more natural
198:49 - grasp to what you're used to in terms of
198:51 - like a back-end experience and then a
198:53 - front-end experience
198:55 - um whereas a lot of the other builds
198:57 - that i've done
198:58 - like discord even was a lot more sort of
199:00 - they're a lot more sort of cutting-edge
199:02 - front end
199:02 - front line which is why you don't
199:04 - actually fill the back end as much
199:06 - because it's using lightweight things
199:07 - like firebase to power it using things
199:09 - like that to go ahead and do it
199:11 - so when you put this thing in the resume
199:13 - just bullet it as
199:14 - as mock right this is not because this
199:17 - is not live stuff yeah
199:18 - right mock bills of amazon clones
199:22 - honestly i wouldn't but this is the
199:23 - thing like even a resume
199:25 - like i honestly like is in the resume
199:28 - yeah yeah i have like a you you've
199:29 - you've got a bunch of
199:30 - but i'll just say check me out at joe
199:34 - joe.diaz.com or something like that
199:36 - right and then like as in
199:38 - get them to to you that site like that's
199:41 - true that should be your primary focus
199:42 - not having it
199:44 - listed out honestly resumes the power of
199:46 - a resume is like
199:47 - really honestly like not as strong as it
199:49 - used to be like uh
199:50 - yeah exactly yeah are you kind of like
199:52 - um you know i i know how to make this
199:54 - clone stuff
199:55 - you want to see them come here show them
199:57 - yeah and don't be like put him alive
199:59 - because then you can also have some
200:00 - problems some issues
200:02 - with copyright and stuff otherwise
200:03 - changing the name and stuff so you can
200:05 - be like
200:05 - hey i know how to make the amazon clone
200:07 - stuff and strike payment solution
200:09 - etc etc and you're like you want to see
200:11 - how i've done it okay come contact me or
200:13 - i don't know
200:14 - hop in a meeting or look at my site then
200:16 - contact me and i show you i'll maybe
200:18 - give you give him the file
200:20 - that we made so they got added some
200:22 - proof well literally just have a video
200:24 - like have a video on your site like a
200:26 - little gift maybe that plays through and
200:28 - it kind of scans through your app or
200:29 - something
200:30 - and then like and be like oh don't
200:31 - believe me just click this button and
200:32 - then they click it and they're like oh
200:34 - [ __ ]
200:34 - i'm inside the app like i can play with
200:35 - it and they can kind of look at it they
200:37 - can resize it and then
200:39 - that is telling them so many things in
200:41 - one goes when they could they'll see
200:43 - like a sign-in feature which says that
200:44 - you know how to do authentication
200:46 - they'll try and resize it and they'll be
200:47 - like oh [ __ ] it's responsive
200:50 - they'll try and like um they'll try and
200:52 - add products and they'll be like
200:54 - oh so this is react but he's actually
200:55 - done like react context api or redux or
200:58 - something to get the basket
200:59 - functionality
201:00 - going and and that in itself tells them
201:03 - so much more than
201:04 - having like the one thing i hate is is
201:07 - having and
201:08 - it was part of the challenge because uh
201:10 - it's like a it's a good thing to have
201:12 - rather than having nothing but you know
201:14 - when people have a resume or like
201:16 - on their website and it's like skill
201:18 - level react
201:19 - and it's like a little bar that kind of
201:20 - goes across html
201:22 - bar across css barcodes
201:26 - i've seen that in many resumes i don't
201:28 - know
201:29 - yeah because it's like i see that and
201:30 - i'm like well
201:32 - what does that mean what does the bar
201:34 - mean yeah like yo cause because
201:35 - somebody's bar could be different to
201:37 - your
201:39 - kind of ranking of what the what the bar
201:40 - would you say it doesn't really mean
201:42 - anything like
201:43 - you could list out like 500 skills and
201:45 - be like i'm a i'm an expert but
201:47 - the reality is is that one website which
201:49 - shows everything and even your portfolio
201:51 - looking
201:52 - amazing if you had a portfolio saying
201:54 - hey i'm joe i code and react this
201:56 - website was built and react it was
201:57 - deployed on firebase
201:59 - that's kind of like oh [ __ ] okay like
202:02 - that's kind of like a straight away like
202:03 - a like a punch in the face it's like
202:05 - okay like i
202:05 - i'm this is proof in the pudding like um
202:08 - and then here's some companies i worked
202:10 - with or like here's
202:11 - here's some proof well like here's
202:13 - here's a build that i did and trust me
202:15 - the problem is that landing your first
202:17 - job the the tough part is is
202:18 - you're trying to you're trying to
202:20 - convince somebody to give you a job
202:22 - and then they're going to say to you
202:24 - what experience do you have and
202:26 - and that you typically get caught at
202:28 - that point because you're like oh it's
202:30 - my first job
202:31 - and then you kind of get stuck so the
202:32 - builds are ways of overcoming it
202:35 - because the build you could be like yeah
202:36 - so it's my it's not my first position
202:38 - but what i did is i actually went ahead
202:39 - and took the initiative i built all
202:40 - these clones
202:41 - and i'd be like oh [ __ ] okay so you can
202:43 - code we know you can code
202:45 - that's it like and then you kind of
202:46 - discuss and you build the trust from
202:48 - that
202:48 - yeah okay also another thing is uh
202:52 - work on clones that you have like a
202:54 - passion for
202:55 - that you want to do yeah
202:59 - not something like oh you don't because
203:01 - if you run into a bug
203:03 - or anything then you have the motivation
203:06 - to like drive
203:07 - through it and solve it exactly yeah one
203:10 - hundred percent
203:11 - a quick notice um from fast.io i don't
203:14 - know how many how many of you use as
203:15 - fast.io
203:17 - but um it says that free accounts will
203:21 - no longer be available
203:22 - and will only be working until december
203:25 - okay so
203:26 - after december they're just going to be
203:27 - focusing on a free trial instead of a
203:29 - full trial
203:30 - experience of asset io so that's even
203:33 - more reason guys to go ahead and then
203:34 - firebase
203:35 - [Laughter]
203:38 - yeah um at some point are we going to
203:42 - see some content around um
203:45 - headless cms so headless cms so
203:48 - i've actually worked with somebody uh
203:51 - who built a really cool headless cms we
203:53 - can definitely
203:54 - touch on it and do that yeah there's
203:56 - always like room for for doing
203:57 - something new um a lot of these sessions
204:00 - so so just to fill you in victor like
204:01 - a lot of the sessions are directed by
204:03 - you guys so there was some interesting
204:05 - redux which meant that pretty much we
204:06 - naturally went towards redux taught a
204:08 - bunch of redux stuff
204:10 - um which is why we've done loads of
204:11 - sessions on redux then there was
204:13 - sessions about
204:14 - um there was more sessions about like uh
204:17 - design work and responsive design so we
204:18 - did some responsive stuff
204:20 - so it's more it's like a very much
204:22 - driven around demand and what you know
204:23 - that what people want to kind of go into
204:25 - but for sure like if
204:27 - if like cms is something so a lot of
204:29 - people have asked about admin panels and
204:31 - stuff like that i've seen some people
204:32 - ask about that before
204:33 - so we could maybe go into cms or that
204:35 - sort of stuff the problem is is that
204:38 - the only reason why i'm hesitant with
204:40 - cms is because cms is a
204:41 - the the value that it would bring you in
204:44 - terms of
204:45 - landing the first job and things like
204:46 - that it was
204:48 - it's more of like if you're already in a
204:50 - sort of intermediate developer then
204:52 - learning cms adds to your stack
204:54 - as opposed to the fundamentals of really
204:56 - you should dial in on the fundamentals
204:58 - first and all that stuff
204:59 - and then kind of add the cms to your
205:01 - arsenal of weapons
205:02 - otherwise building cms without the
205:04 - fundamentals can kind of get a bit kind
205:05 - of you know like a little bit kind of
205:07 - like oh what's going on here like
205:09 - but it's definitely something which it's
205:10 - good that you're questioning it now
205:12 - because that's a really good thing to to
205:13 - get into you know
205:15 - i got my toes in there and and i i
205:18 - completely failed because i didn't
205:19 - have the the fundamentals of react down
205:23 - dude but that's that's the good thing
205:25 - that's a good step because
205:26 - like think of a kid like a kid falls
205:28 - over they get back up and eventually
205:29 - they fall over again and eventually
205:31 - they're what they're running you know
205:32 - like
205:32 - so so keep doing the same [ __ ] like as
205:34 - in if you it's good
205:36 - if you're failing at something because
205:37 - you're trying something new and you're
205:39 - putting yourself out there you know so
205:40 - so awesome i'll just get a second
205:43 - for cms because i get a lot of clients
205:44 - that want to they want the foundation
205:46 - down but then they also want us
205:48 - or want to be able to update things on
205:50 - their own yep oh that's a good point
205:52 - that's a good point so remember earlier
205:54 - i can't remember who asked the exact
205:55 - question but it was a case of uh
205:58 - uh a russian website i think it was max
206:00 - asked it earlier
206:02 - there's a website that you need to build
206:04 - and uh so remember i
206:05 - talked about the escape right so once
206:07 - you deliver the work
206:08 - you don't want to be tied to the company
206:10 - forever right you need to
206:12 - either build it in in a cms fashion like
206:14 - gabriel said like victor said like
206:16 - um to build that sort of implementation
206:19 - in and kind of
206:20 - uh have it so that they can then manage
206:22 - everything or you need to kind of
206:24 - actually ask yourself like
206:26 - okay i can either go ahead and try and
206:28 - build everything
206:29 - or i can kind of get more skilled at
206:31 - something like shopify or something like
206:33 - you know like a wordpress plus a plug-in
206:35 - and pretty much that's going to allow me
206:37 - to knock out freelancing jobs
206:38 - boom boom boom and get them done
206:40 - allowing me to offload the client
206:42 - and actually make more money that way so
206:43 - it really depends on your goal and your
206:45 - what you're trying to work towards but
206:46 - i've seen people crush it with spotify
206:50 - and wordpress like combinations and
206:51 - stuff like that um
206:53 - if if your if your angle is towards
206:55 - freelance i'm not
206:56 - a huge fan of freelancing anymore
206:59 - because i don't like having several
207:01 - i mean i like to be my own kind of boss
207:03 - with my work like i don't like to kind
207:05 - of but
207:05 - whereas think of it as when you're when
207:07 - you're a freelancer you've got like
207:09 - five bosses if you have five jobs right
207:11 - so you have to reply to five people you
207:13 - have to they're really on your case at
207:15 - times it can get a bit kind of
207:16 - hectic and stuff and if you're not good
207:18 - with time management that can
207:20 - really get intense so um
207:23 - and like gabriel said like once once
207:25 - you've you've delivered the work you
207:27 - kind of want to have to be
207:28 - you want to be able to deliver it like
207:30 - an elegantly step away
207:32 - like you don't want to be like oh here's
207:33 - the work and run for the hills like your
207:35 - reputation can't
207:38 - so you want to keep a good vibe around a
207:40 - similar case of that i did
207:42 - once it was a company yeah i went there
207:45 - to buy a phone right and then they were
207:46 - they asked me hey sam can you um
207:48 - come around come around the deck and
207:50 - they showed me a program they have to
207:52 - like gesture all of the all the stocks
207:54 - they have and a lot of stuff right
207:55 - because i had to communicate with uh
207:57 - with a company which was far away from
207:59 - there
207:59 - yeah but from malta to japan i think i
208:02 - have no idea anyway they said can you
208:04 - put something similar
208:05 - to that and i said i don't know to be
208:08 - honest i don't i have no idea because
208:09 - they wanted an admin panel
208:11 - and then they forgot the application
208:12 - where they just can see the stuff but
208:13 - actually input
208:14 - stuff you had to have an admin panel
208:16 - right so i tried building something
208:19 - similar and i don't know they liked it
208:20 - so i gave them
208:22 - and then i was so afraid because it was
208:23 - one of my first jobs
208:25 - yeah i did it for free and i literally
208:27 - went in the shop
208:29 - i said here you go you have the project
208:32 - right away
208:34 - dude i don't blame you we've all been
208:36 - there been there literally right away
208:39 - it was my father waiting for me yeah
208:43 - outside the shop he just he saw me
208:46 - running
208:46 - he's like the hell just happened inside
208:49 - there
208:50 - it's okay i just run away oh my god yeah
208:53 - guys you gotta be careful with that
208:55 - because now you your profile is on
208:57 - upwork and stuff
209:00 - yeah hey but sonny why would you why
209:03 - i mean if the client is if you feel that
209:06 - the client needs help and uh
209:07 - you know ongoing basis you can still
209:09 - have a revenue stream
209:10 - coming in saying hey i will charge you x
209:12 - amount of maintaining for a year you
209:14 - know you go touch it two times i know
209:16 - yeah and you have a
209:17 - revenue stream for yourself then you
209:19 - just look at it for a couple of times a
209:21 - year and you got that money coming in
209:23 - yeah the thing is that i was gonna do
209:24 - that definitely that was my
209:26 - my very first thing and i said i don't
209:28 - want to be
209:29 - tied to that i'll be like okay making my
209:31 - first thing and i'm giving it to them
209:33 - now let's say after two months then
209:35 - something breaks and they call me to fix
209:37 - it
209:38 - what if i don't know how to fix it and i
209:40 - got me scared or be like
209:42 - what if i have other projects like i i
209:44 - want to make some other websites so i
209:46 - want to make
209:47 - um my own application stuff like that i
209:49 - can't because i thought
209:50 - i was thinking well i'm tied to them so
209:52 - i'm kind of working for them and they're
209:54 - my boss
209:55 - yeah so i go i was i was getting this
209:57 - frightened over there
209:58 - yeah no dude i mean like look it happens
210:01 - uh the main like
210:02 - like joe said there's actually a there
210:04 - is a a benefit to you to then keeping
210:07 - them
210:07 - on board with that start like i said
210:09 - afterwards to do maintenance and things
210:11 - like that
210:11 - because you can pretty much go ahead and
210:13 - charge the client like a maintenance fee
210:15 - which a lot of people do
210:16 - right but what i would say is for now i
210:19 - just changed
210:20 - i just switched totally now you just
210:23 - switch the account name switch the
210:24 - address just to change the address you
210:28 - know flew to a different fluted motor
210:34 - what i would say is like that like if
210:35 - you're going to go that approach um
210:37 - not not the running approach is in there
210:39 - with the maintenance
210:41 - but if you're going to go down that
210:42 - route i would say is you can definitely
210:44 - go ahead and open something like a
210:45 - software house
210:46 - so remember your network is your net
210:48 - worth for many reasons right not
210:50 - one for landing clients but two for also
210:53 - for for
210:53 - for developers who you can leverage as
210:56 - friends and sort of like potential
210:58 - partners right now imagine you get
211:00 - you're doing well with freelancing
211:02 - you're networking with other people who
211:03 - are doing well with freelancing
211:05 - there's kind of a business opportunity
211:06 - that kind of pops up right you have a
211:07 - software house kind of that comes into
211:09 - play
211:10 - now you can pretty much go to a higher
211:12 - level where you don't have to code as
211:14 - much
211:14 - but you become an architect right so you
211:16 - can actually go ahead and like
211:18 - bring in sort of developers in the
211:19 - beginning you're going to be doing the
211:20 - work right you're going to be doing a
211:21 - lot of the work
211:22 - but if you get really kind of a dialed
211:24 - in system of like being able to bring on
211:26 - developers
211:27 - them adhere to sort of your coding
211:29 - standards so your your projects are
211:31 - getting built you're sort of
211:32 - everything's kind of you know maintained
211:33 - a good standard because that's
211:35 - everything is your standard your
211:37 - reputation is going to be everything
211:38 - if you break i see gabriel's like yeah i
211:40 - agree with that because like two
211:42 - because remember like contractors can
211:43 - come in trash everything and then kind
211:45 - of leave and it can leave [ __ ] in like a
211:47 - mess
211:48 - and your reputation goes down to like
211:50 - really really bad like after that but
211:52 - it's going to be a case of you can go
211:54 - ahead and do that and i have friends who
211:55 - have done that
211:56 - uh and that and jacob i don't know if
211:58 - you guys know who jacob is he used to be
212:00 - on the channel
212:01 - uh but we keep in touch with jacob a lot
212:03 - he done profit with python for a long
212:05 - time
212:05 - jacob's an awesome guy and he's doing
212:07 - quite he's doing quite good
212:09 - and upwork i i watched his video today
212:11 - yeah
212:12 - so he was doing a demo on how to use aws
212:15 - marketplace api
212:16 - yeah so exactly yeah so he's uh he's
212:19 - doing his own software house right now
212:20 - with a friend so
212:22 - it just goes to show you like all you
212:23 - need is like he's he just got one other
212:25 - person
212:26 - and he pretty much when i went ahead and
212:28 - you know like started that as his
212:29 - journey and pretty much now
212:32 - working for himself on his own hours
212:33 - it's completely possible
212:35 - completely feasible and uh it's
212:36 - something which you guys can definitely
212:38 - do
212:38 - with that said guys that was an awesome
212:41 - call i hope you guys found value
212:43 - in that uh there was a i think it was
212:45 - jam-packed and
212:46 - i'm really glad because i saw this was
212:48 - yeah this was actually quite this is a
212:50 - huge course
212:51 - yeah it's a four hour call um yeah this
212:53 - was insane
212:57 - yeah really really big loads of value
212:59 - bombs in this one and uh even on youtube
213:01 - and and
213:02 - we still have 176 people and we actually
213:05 - peaked at around
213:05 - three 400 people which is amazing so
213:08 - everyone on youtube
213:09 - smash the thumbs up button if you
213:10 - enjoyed it and you're still watching
213:11 - thank you so much for watching
213:16 - how many red bulls did you go through oh
213:18 - dude i just got my water
213:20 - that's it this is me am i good for her
213:22 - like i finished one glass
213:23 - and then uh that's it i got the other
213:25 - one there yeah we got 400 likes on
213:28 - youtube
213:28 - that's it awesome stuff guys into
213:31 - youtube myself and just hit the like
213:32 - button even i'm on here
213:34 - nice gabriel thank you dude
213:37 - with that said guys uh i will see you
213:39 - all
213:40 - next week and over on youtube we'll see
213:42 - you in the next build
213:43 - um i think everybody aiming for every
213:45 - single day so we're going to keep it
213:47 - going
213:47 - and yeah guys i hope you enjoyed that
213:49 - and i'll see you in the next score
213:50 - yes um yeah will we have a
213:54 - clone of clever programmer oh dude i
213:56 - mean
213:58 - let's wait until we hit a million subs
214:00 - let's wait until hit a million subs and
214:01 - then we'll do that
214:02 - okay guys i was thinking about that
214:06 - how to get pwg for free exactly
214:10 - awesome guys didn't you basically with
214:13 - this school
214:14 - i tried diverging um the course i'm
214:17 - doing so i went to the headmaster of the
214:19 - school and i told him
214:20 - if i could make something similar he
214:22 - doesn't it actually doesn't know this
214:24 - discourse
214:25 - so basically what i ended up doing is
214:27 - that i am a student of the school
214:30 - and i'm currently in the fourth grade
214:32 - and now i'm
214:33 - actually even a teacher on that school
214:35 - which teaches to other teachers
214:39 - i'm building um a similar thing of
214:42 - kajabi
214:42 - yeah just for school so only my school
214:45 - would be using it
214:46 - nice which is my mind blowing totally
214:49 - dope man that's insane dude hopefully
214:52 - i'm gonna do it yeah document your
214:54 - journey and let everyone know and see
214:55 - you and you're on socials and stuff
214:57 - yeah last time i was talking with joe
215:00 - and
215:01 - he said i mean we agreed on on the fact
215:04 - that
215:04 - maybe i should be documenting this stuff
215:06 - yeah 100
215:07 - dude document it and and let us know how
215:10 - it goes
215:11 - guys i will see you all next week and uh
215:15 - keep working hard and remember reach out
215:17 - and slack if you have questions i'm
215:18 - going to try my best to get through
215:20 - all those messages okay and uh yeah see
215:23 - you guys next week
215:26 - bye everyone bye everyone
215:35 - everyone over on youtube thank you so
215:38 - much for watching guys
215:39 - and it was an insane turnout we still
215:41 - have 150 people watching so everyone who
215:44 - is there right now
215:45 - thank you and uh loads of people asking
215:47 - what this song is lately so i'll go
215:48 - ahead and find that and let you guys
215:50 - know in the next video
215:51 - but yeah we're going to be keeping the
215:52 - bills coming for you guys so
215:54 - make sure you stay tuned and as always
215:56 - guys
215:57 - we will see you in the next video
216:04 - peace
216:07 - you