00:00 - up everybody how's it going welcome
00:03 - everybody
00:04 - and thank you for joining us to another
00:08 - mirn build and today i'm here
00:11 - with rishi guys this is rishi from
00:15 - player programmer and i'm super
00:17 - pumped to go live with david and build a
00:20 - discord clone
00:21 - in mon i don't think david needs his
00:24 - introduction
00:25 - but yeah so david
00:29 - i'm david what is up go ahead yeah so
00:32 - as you already know i am dr mirn uh
00:35 - from clever programmer and today
00:39 - we will be building the
00:42 - discord mirn clone all right who
00:45 - is excited guys who is pumped about this
00:49 - build today
00:51 - rishi are you pumped everyone drop down
00:54 - yes
00:54 - man i'm super pumped to build this
00:56 - discard clone in one
00:58 - and guys if you are excited drop down in
01:01 - the comments some fire emojis
01:03 - and some comments that you are excited
01:05 - we want to see who is excited to build
01:07 - this clone
01:08 - because this is going to be exciting you
01:10 - are building a discord
01:12 - clone uh a messaging discord clone and
01:14 - we're gonna be giving you the back end
01:16 - for that
01:16 - let's go exactly exactly i think i'll
01:20 - quickly show you guys
01:22 - how it actually looks like at the end
01:25 - but i mean you pretty much saw it
01:28 - when uh sunny made it so
01:31 - uh yeah so this is pretty much
01:34 - the build that we will be doing
01:38 - it's real time it is using mongodb
01:41 - it is using pusher as always
01:44 - and it is based on
01:48 - the build that uh sunny sunny did
01:52 - last thursday so if you guys don't have
01:54 - it
01:55 - already uh another problem i have it
01:58 - linked down below
01:59 - uh so you can go ahead and grab it from
02:01 - my github
02:02 - uh let me know if that actually if that
02:05 - links
02:06 - actually works it should be but let me
02:08 - know if there is some
02:09 - if there is something wrong and
02:13 - so this is literally the exact same
02:15 - build um
02:16 - okay only difference is i've i use the
02:18 - different logo
02:20 - but other than that it's uh pretty much
02:22 - the same
02:24 - and i will just gonna go ahead and sign
02:27 - in with
02:28 - one of my google accounts okay yeah this
02:30 - is pusher
02:31 - and i'm just gonna drop it let's
02:34 - actually first create a channel
02:36 - which is uh i think discord
02:40 - live how does that sound awesome
02:44 - as you already as you could see this is
02:47 - real time
02:47 - so this is as real what as it gets it
02:50 - just popped in there
02:52 - didn't touch any refresh buttons or
02:53 - anything and now
02:55 - i'm gonna go into that uh channel and
02:58 - drop in some fire emoji okay
03:02 - so nothing super fancy just a fire emoji
03:05 - and here we go
03:07 - all right so that was quickly the
03:10 - demo are you guys pumped who is pumped
03:12 - about this build
03:14 - who is pumped to put this on their
03:16 - portfolio and get a job
03:18 - in 2020 and be one of the
03:22 - 5 000 people that we
03:25 - at cleverprogrammer help to get a job
03:28 - as a developer let me know guys if you
03:31 - are
03:31 - excited about that drop it in the
03:33 - comments drop some
03:34 - fire and yep
03:38 - and oh drop it down in the comments guys
03:40 - you're excited
03:42 - let us know that you're excited if you
03:43 - guys are excited we are gonna be super
03:46 - pumped to guide you through the whole
03:48 - clone step by step
03:49 - and i think david is the right person to
03:51 - do that before we continue david
03:53 - i think uh this is an important question
03:55 - that you can answer so conor bailey
03:57 - asked that are you going to be using
03:59 - socket.io for the chat functionality so
04:01 - go ahead and answer that
04:02 - okay so i'm not going to use socket.io
04:05 - at all um i was thinking of
04:08 - doing something with that just so just
04:11 - to show you guys the comparison
04:13 - uh but not this time maybe uh maybe next
04:16 - time i will be working with sakuraio for
04:19 - now
04:20 - we will be using pusher and
04:23 - mongodb chainstream and mongodb of
04:26 - course
04:29 - so let's go and yeah so bonjour tech
04:32 - asks uh if i'm using butcher yes i am
04:36 - and yeah is this including the back end
04:40 - uh yes this is just the back end so
04:43 - today we are not going to talk front end
04:45 - uh we would just be talking
04:47 - back end all right so today back end
04:50 - only
04:51 - uh and and yeah i think
04:54 - with that said we can jump
04:57 - straight into building it all right are
05:00 - you pumped richie
05:02 - yeah okay i'm super pumped man
05:05 - awesome awesome all right so then what
05:08 - is the first step they have to
05:10 - do to clone the repo exactly
05:13 - so you guys uh you probably are watching
05:16 - this on youtube right now um
05:19 - first i need to find the stream where we
05:23 - are
05:24 - where we actually are i think this is
05:26 - the link
05:28 - and yeah here we go okay with some
05:30 - commercial and stuff
05:32 - um yeah so uh as you can see
05:36 - we have a 170 concurrent youtube viewers
05:40 - and all together okay that's all
05:45 - uh yeah so down below
05:48 - in the description i will zoom in a bit
05:52 - so you guys can actually see it better
05:54 - uh so if you guys go
05:55 - to this link this will actually
05:59 - uh put you towards to the um
06:03 - get repo that you want to go ahead and
06:04 - clone so let's actually do that together
06:07 - all right so i'm going in here
06:11 - just hit that button uh you guys should
06:14 - be able to see this
06:16 - and yeah uh i thought of us says
06:20 - two massive news right now our contact
06:22 - papers are
06:23 - whoa nice so as you guys you probably
06:27 - already know because
06:28 - probably you're following qazi on
06:30 - instagram
06:31 - we started dropping medium articles
06:35 - and they are actually doing pretty well
06:36 - so guys if you haven't already
06:39 - check those out as well okay yes
06:43 - okay for sure because we were creating
06:44 - this amazing video clones for you guys
06:46 - we're creating this i mean
06:48 - guys to build the school but i know and
06:51 - david know as a beginner
06:52 - it is so hard to follow up with that
06:54 - video and that is the reason
06:56 - why we are doing a written clone that
06:59 - you can follow
07:00 - take your time take it at your own pace
07:02 - and uh create that whole clone so check
07:04 - that out on medium as well
07:06 - exactly and i just want to address this
07:10 - question what is the difference when
07:11 - sony used firebase as
07:13 - backend so
07:16 - firebase is actually a platform as a
07:18 - service so you basically
07:20 - don't program down the back end yourself
07:24 - instead you're using a service
07:28 - uh which will be your back end all right
07:31 - so right now we will be
07:34 - writing the software uh that firebase
07:38 - actually uses and now you might be
07:39 - asking
07:39 - why what's the point so a lot of the
07:42 - times firebase
07:43 - is just simply not enough or the company
07:46 - you will be working for
07:48 - requires you to build a standalone
07:52 - backend project that's when this
07:54 - knowledge will uh
07:55 - will be super helpful all right
07:58 - exactly and sometimes when you're
08:00 - building those big projects
08:01 - firebase might be costly it's free for
08:04 - someone at up to some limits but when
08:06 - you're building those big projects it's
08:07 - gonna be costly for you
08:08 - exactly one more question and then we
08:11 - will be jumping straight into it and
08:13 - guys
08:14 - let's actually come let's actually share
08:16 - this video out to everybody
08:18 - we posted it a bit late because we had a
08:21 - couple of technical issues
08:22 - but now we are live and let's actually
08:26 - drop some fire and let your friends know
08:29 - that we
08:30 - are back with another mern build another
08:32 - massive moon build
08:34 - and we are ready to crush it so
08:37 - uh before we go any further thoughts on
08:40 - bean vs mirn
08:41 - so mean is if you don't if you guys
08:44 - don't know it
08:47 - mean is actually uh the same as
08:50 - mirn just no react instead they are
08:53 - using angular
08:55 - now as far as i know um angular
08:58 - is a pain in the neck when you are
09:01 - learning it
09:02 - so i highly not recommend going for mern
09:06 - if you uh mean if you are a beginner
09:08 - definitely
09:09 - put all your efforts into mern if you're
09:12 - a beginner
09:13 - but if you have already coded with mean
09:16 - that's perfect
09:18 - take it to the next level by learning
09:21 - express and node alright so
09:24 - with that there is another comment
09:28 - boom
09:31 - okay uh just rushing through the
09:34 - comments rishi feel free to stop me at
09:37 - any time if you see
09:38 - any good comments or something that we
09:40 - should be answering
09:41 - okay so sure i'm gonna be zooming in a
09:45 - bit so guys you can see
09:46 - uh better but uh so the link i've posted
09:50 - down below uh what does this stand for
09:52 - mern it's express js
09:54 - i'll be explaining everything a bit
09:55 - later so
09:57 - go to that link uh hit that big green
10:00 - button
10:01 - and inside of here there is this link
10:04 - that you want to go ahead and copy
10:06 - um and once you're done with that
10:09 - oh my god i have all this stuff going on
10:11 - in here don't worry about these
10:13 - uh create a folder and go into that
10:16 - folder and inside of there you will need
10:18 - two more folders uh where all your order
10:21 - all the project is gonna
10:22 - go or actually you don't really need
10:25 - this one
10:26 - instead you can open up a terminal and
10:30 - say git clone
10:33 - and then just oh i'll zoom in here again
10:38 - okay you guys should be able to see it
10:40 - uh pretty
10:41 - perfectly now so you can just literally
10:44 - type in a git clone
10:46 - yesterday with amanath we dropped some
10:48 - value
10:49 - on what is git and how to get started uh
10:52 - with git so if you have windows you need
10:54 - to install it let's go back
10:56 - and and pause this video come back later
10:58 - when you've installed it
11:00 - so you will need to clone this project
11:03 - by typing in git clone and then just
11:06 - pasting it
11:06 - right in here or you can do it with
11:09 - github desktop as well
11:10 - whichever you think is better for you
11:15 - okay so i just uh cloned this project
11:19 - and i think if i do an ls in here yeah
11:22 - there we go so i already have this
11:25 - starter project going on
11:27 - um now i can't
11:30 - oh hold on so because i'm using all my
11:33 - zetta sage i don't need to type in cd
11:35 - but
11:35 - i just will because that's easier for
11:38 - everybody else
11:39 - so here we go uh
11:42 - we got uh we are on the main branch
11:45 - of this uh discord mern uh starter
11:49 - project and let's actually install all
11:51 - the dependencies right
11:53 - so you're gonna need to type in npm ei
11:56 - and that will essentially download
11:58 - everything that you will need
12:00 - to be able to run this project right
12:04 - uh i see a question yeah what's up sorry
12:07 - didn't mean to cut you off i was just
12:09 - gonna say that
12:10 - yeah no no worries i was just gonna i
12:12 - was gonna ask you to explain
12:14 - what is npmi to all the beginner people
12:16 - who are just joining
12:17 - right now why do we do that yeah so uh
12:21 - mpm is that essentially it's node it it
12:23 - stands for node package manager
12:26 - um and it's basically just initial uh
12:29 - it's just insta installing all the
12:31 - dependencies that we will be using
12:33 - for our react app so pretty much react
12:36 - uh
12:36 - and all the dependencies that sony added
12:38 - right
12:39 - quickly
12:43 - and what i will be doing now is i'm
12:46 - gonna go ahead create another directory
12:48 - so i would say make there
12:52 - yeah ah damn and i will call it
12:55 - um this chord
12:58 - backhand i think and i would do it
13:01 - awesome
13:01 - yeah what's up before you put one david
13:04 - i see an important question in the chat
13:06 - that
13:06 - says that it's from one print it he
13:08 - asked that can you quickly explain the
13:10 - difference between the earlier discord
13:12 - app by sunny
13:13 - and the month stack discord so the
13:15 - difference is that the sun
13:16 - the one sunny build it's just the front
13:19 - end of that
13:20 - application and now we are going to be
13:22 - building in
13:23 - mon we are going to be using mongodb we
13:25 - are going to be using express we are
13:26 - going to be using react and we are going
13:28 - to be using node.js
13:29 - exactly that is the difference yes that
13:32 - is right
13:33 - okay uh all right
13:36 - and so now i created a new folder for my
13:40 - backhand
13:41 - uh let's put it away for a sec and let's
13:44 - actually set up all
13:45 - all the front and stuff so that we have
13:46 - a running
13:48 - project so uh what you want to do
13:52 - is essentially open up a terminal on the
13:55 - uh or in the folder which uh which
13:58 - contains both of your projects
14:00 - and then just type in code space dot
14:02 - that will essentially go ahead and open
14:04 - up a vs code for
14:06 - you which i of course i need to zoom in
14:08 - again
14:10 - okay i think now should be good
14:13 - i think it's a bit too much okay so
14:16 - inside of here we have the starter
14:18 - project uh it has
14:20 - it's actually cleaned up and all the
14:22 - work is done
14:23 - for us one thing though that you need to
14:26 - um focus on is the
14:30 - firebase.js file which i just can't seem
14:33 - to find
14:35 - uh here it is okay so i actually
14:38 - commented out this part
14:40 - uh so this is where your firebase config
14:42 - will go
14:43 - um so let's actually go ahead and set up
14:45 - our firebase stuff
14:47 - uh in case we need in case we want to
14:50 - work with it
14:51 - uh yeah so
14:54 - let's quickly say uh firebase.google.com
14:59 - and what firebase is is it's actually
15:01 - suite of tools uh by google
15:04 - and it's pretty much just switching your
15:06 - backend but today we are just going to
15:08 - be using it
15:09 - uh for deployment all right so if you go
15:12 - into console
15:13 - and if you go ahead and create a new
15:16 - project
15:17 - and you can name it however you want to
15:19 - so i will name it discord
15:21 - uh clone
15:25 - live because we are live now uh i don't
15:28 - need google analytics
15:30 - so i'm just going to go ahead and create
15:32 - the new project
15:36 - actually takes a little time uh
15:40 - yep so guys while that that process is
15:43 - happening
15:43 - i just want to mention that if you guys
15:45 - want a complete free training on the
15:47 - netflix clone
15:48 - the link is in the description go and
15:50 - register for that link
15:52 - and you will get the complete netflix
15:53 - clone how you can build a
15:55 - netflix clone from scratch so the link
15:57 - is in the description go and get it it's
15:59 - completely free
16:00 - exactly that is so right
16:04 - okay so while that happened uh
16:07 - while everybody signed up for the free
16:09 - netflix clone
16:12 - uh training all right
16:15 - uh our firebase just set up
16:19 - so what you need to do is go to this web
16:22 - icon just hit that quickly
16:24 - and go in here
16:27 - say type in your
16:30 - project again so it's going to be
16:32 - discord
16:33 - live it's gonna be good make sure to
16:37 - check the firebase hosting
16:39 - as well as you will need it
16:42 - uh and go ahead and register the app and
16:45 - just click next next next next
16:47 - and don't even worry about anything else
16:49 - so next next
16:50 - continue perfect awesome okay now what
16:53 - you need to do
16:54 - is uh hit the settings button and go go
16:57 - into project settings go down here
16:59 - hit config and literally just copy
17:02 - copy whatever is inside of the brackets
17:05 - so
17:06 - anything else outside is not uh
17:08 - something that we want to copy
17:10 - just those stuff so and with that let's
17:13 - go back in here delete the comment and
17:15 - just paste it in here
17:16 - and we actually have the uh
17:20 - uh the mur um the react discord tone
17:23 - sorry
17:24 - all right so now what we will be doing
17:28 - is essentially go ahead set up first our
17:31 - backend project
17:32 - create a mongodb database
17:35 - then we will be adding the functionality
17:38 - afterwards we will be connecting the
17:41 - front end and the back end and then
17:43 - last but not least we will make the
17:45 - whole thing
17:47 - real time are you excited rishi
17:51 - sounds i am excited man i'm super
17:53 - excited to do this
17:54 - all right let's go nice let's
17:58 - go people seems to love your background
18:03 - hmm sounds weird
18:06 - people seems to love your background oh
18:10 - yeah oh thank you
18:13 - we have some nice stuff going on in here
18:16 - if we face a bug
18:19 - who knows what happens all right
18:22 - with that said let's jump straight now
18:25 - everybody's gonna be like oh my god
18:26 - just fail him or just
18:30 - get him a buck okay
18:33 - so we will not worry about the front end
18:36 - project for now i'll just lower my
18:38 - volume a bit because i'm actually
18:40 - entering the orange zone
18:42 - all right i'm peaking so
18:47 - uh as i'm in the back end project at the
18:50 - moment
18:51 - uh i want to just go ahead and create
18:54 - the or initialize the git version
18:56 - control which i was talking about
18:58 - uh yesterday with amano so let's go
19:01 - ahead and type in
19:02 - git init and quickly here we go
19:06 - now that we got that uh you want to go
19:09 - ahead and essentially
19:10 - create your note package and you can do
19:13 - that by typing in npm
19:14 - init uh it will throw a couple of
19:17 - questions that you don't worry about
19:19 - any of them this is pretty much just
19:21 - setting up
19:22 - everything uh that you will
19:26 - that you will later on work with and
19:28 - guys if you are
19:29 - uh irrelevant but your hair
19:33 - looks nice david thank you so much
19:37 - so this is actually gonna be like the
19:43 - info sheet of your project pretty much
19:47 - so if somebody looks at this file the
19:49 - package.json file
19:51 - they will mostly they will know the most
19:54 - of the stuff that's going on in there
19:56 - so package name uh version conversion
19:59 - description we will leave it out and the
20:02 - entry point is something that you want
20:04 - to
20:04 - pay attention to and you want to type in
20:07 - server.js
20:09 - inside of there
20:11 - [Music]
20:12 - um oh earlier my voice was better so
20:16 - let's actually
20:18 - put it up again okay hey we got
20:21 - frank in the house yo what's up brother
20:24 - let's go okay
20:28 - um
20:31 - so before we continue david i just want
20:33 - to explain what is npm editing so when
20:35 - we are doing npn
20:36 - in the terminal what we are doing uh
20:38 - what we are doing is that we are telling
20:40 - the project that we are going to be
20:41 - using the node package manager in this
20:43 - project
20:44 - we are telling them that we are going to
20:45 - be using this libraries and then these
20:47 - packages
20:48 - so it uh that's all we are doing when we
20:49 - are doing npm minute and then you just
20:51 - fill out the info sheet for your project
20:53 - that you name the project you name the
20:54 - entry point and everything like that
20:56 - exactly and so go ahead david yeah i by
20:59 - the time i just
21:00 - answered another question with some
21:02 - overlays
21:04 - all right so let's go actually back and
21:07 - so now i um changed up
21:11 - to server.js and that's our that will be
21:14 - our entry point
21:15 - so test command you can leave it out get
21:17 - repository leave it out keywords
21:19 - leave it out and i think i will be
21:21 - typing in our names
21:23 - inside of here so authors so we got
21:26 - rishi in the house and
21:30 - of course we got me
21:34 - here we go and the license we can leave
21:37 - it alone
21:37 - and it's gonna ask if it's okay but of
21:40 - course it is so
21:41 - yeah and now you want to go ahead and
21:45 - head
21:45 - into here uh and this is essentially the
21:48 - file that we just created
21:49 - and what you want to do is add a type
21:52 - module inside of there and that will
21:55 - allow us to use
21:56 - es6 functionality inside of our backend
22:00 - project because
22:01 - node.js is actually using the es5 the
22:05 - older
22:06 - uh type of ecmascript but here at
22:08 - cleverprogrammer we are
22:10 - aiming for uh that aiming that you guys
22:13 - will actually know the latest
22:15 - and best uh technologies so
22:18 - we are going to be using es6 anyways
22:22 - and the other thing that we want to go
22:23 - ahead and do
22:25 - is inside of here inside of scripts you
22:28 - want to type in start
22:30 - and you want to type in nodeserver.js
22:33 - and that will essentially allow heroku
22:35 - later on to
22:37 - pretty much start your application
22:40 - by itself now what you want to do is go
22:43 - back to the terminal
22:45 - or you can use the built-in terminal
22:47 - inside of vs gold i just
22:49 - prefer the max built in
22:54 - terminal so i will just use that so what
22:56 - you want to do
22:57 - is pretty much just install all the
22:59 - dependencies uh
23:00 - for now we will only be using
23:03 - um express and mongoose so let's
23:06 - actually use
23:07 - those uh for now um
23:10 - yazid says i am excited for the real
23:13 - time part
23:14 - yes dude this is gonna be a real time
23:17 - this is gonna be awesome
23:18 - all right i'm excited for you bro
23:23 - thyroid says david's hair providing more
23:26 - attraction than
23:27 - the discord clone itself oh my god i
23:29 - gotta cut it then
23:32 - okay so i will be typing in mpmi express
23:36 - and mongoose and this will actually go
23:40 - ahead and
23:40 - install the dependencies that we will
23:43 - need
23:44 - for now uh so let's actually
23:47 - go ahead and create a new file which we
23:50 - will call
23:52 - server.js
23:54 - yes and this is going to be
23:57 - the file that will uh contain every
24:00 - single stuff that we will be
24:02 - uh using i will make our image a bit
24:05 - bigger yeah what's up
24:08 - so i was just gonna say that as a
24:10 - beginner a person who is joining the
24:12 - call who have never worked with a lot of
24:13 - stuff
24:14 - why don't you just go ahead and take a
24:15 - minute to explain what exactly is
24:17 - express
24:19 - uh yeah so express is actually
24:22 - the server side javascript super simply
24:26 - yeah so yeah let's actually
24:29 - do a quick technology rundown um
24:33 - so all the technologies that we will be
24:35 - using so we would do
24:36 - back-end stuff hold on otherwise it will
24:39 - go away
24:40 - so we will be using back-end stuff um
24:43 - yeah
24:43 - this is gonna be back-end nice and
24:47 - we will be using mongodb
24:52 - nice we will also use
24:55 - node.js which is actually a javascript
24:58 - runtime
25:00 - and inside of there we will be using
25:03 - express.js i think that that's how
25:06 - uh that's how how you
25:09 - laid out correctly
25:12 - and these will actually have
25:15 - a connection made possible with
25:19 - mongoose which is another thing that we
25:21 - will be using
25:23 - and we will also use pusher which is
25:26 - some kind of third party stuff
25:29 - and on the front end we will have
25:33 - the react and the redux so this is where
25:36 - react
25:36 - and redux are okay
25:41 - now guys who is pumped about this build
25:45 - let me know in the comment section down
25:47 - below if you guys
25:48 - guys are pumped about this build
25:52 - oh my god i might have not shared
25:55 - anything oh damn yes that's what i was
25:59 - gonna say
26:00 - oh my god
26:06 - let's do it again go ahead and explain
26:08 - again
26:09 - yeah okay sorry guys so this is gonna be
26:12 - the back end stuff uh inside of here we
26:15 - will have
26:16 - mongodb right we will also have
26:20 - uh the node.js going on which is the
26:22 - back end runtime
26:26 - and inside of there we will have the
26:29 - express
26:31 - nice and that's gonna be essentially the
26:34 - back end
26:35 - and we also use pusher
26:39 - and we also will have the front end
26:43 - which will have react and
26:47 - redux but it's already built so guys
26:50 - if you don't have that make sure to go
26:53 - ahead
26:54 - check those links in the description
26:55 - down below and
26:58 - yeah that's pretty much pretty much just
26:59 - go ahead and download it
27:01 - and if you are interested in the front
27:04 - end development i
27:05 - highly recommend going back to last
27:07 - thursday
27:08 - and check out sunny's video on that and
27:10 - we will be using
27:12 - apis to connect the between
27:15 - uh front end and back end and we will
27:18 - also use
27:20 - mangoes to
27:23 - connect between mongodb and our back-end
27:26 - software
27:27 - okay with that said let's go ahead and
27:31 - start building this stuff
27:35 - yeah i see everybody's going ham on like
27:38 - oh my god i'm
27:39 - not showing my screen sorry guys draw it
27:42 - up again
27:43 - all right so what we will be doing here
27:46 - is pretty much just importing all the
27:47 - stuff that we will be using so first
27:50 - let's go ahead and
27:51 - import express because without that it's
27:53 - just not going to work
27:54 - and the other thing that you want to go
27:56 - ahead and import is mongoose
28:00 - and that would is pretty much uh the
28:02 - importation for now
28:04 - later on we will be importing a lot more
28:06 - stuff and
28:07 - what i like to do and i actually highly
28:10 - recommend everybody goes ahead and does
28:11 - this with me
28:12 - is pretty much just outlining the
28:16 - the application itself and let's
28:18 - actually
28:19 - check out the comment section all right
28:24 - okay cool and with that said
28:28 - let's actually do the uh outlining part
28:32 - so first we will have some kind of app
28:35 - config going on
28:36 - then oops uh not help then we will have
28:40 - some middlewares
28:42 - uh yeah then we will have some db config
28:47 - we will also have api routes and
28:50 - we will also have the listening part so
28:53 - this is pretty much
28:54 - just exactly uh
28:58 - sure yanch says uh express is a
29:00 - framework of node.js
29:02 - that is correct uh and another one
29:06 - mongoose is technically and oh mongoose
29:08 - is technically an orm
29:13 - it can be used as an orm as well all
29:16 - right
29:18 - so this is pretty much how our back end
29:21 - up will
29:22 - look like um and yeah let's actually
29:26 - start by just mocking out some stuff and
29:29 - have
29:29 - our very first api route uh
29:32 - done today so let's do it by creating an
29:36 - app instance
29:37 - which is const app equals express and
29:41 - boom there we go we will also want to
29:43 - have some
29:44 - port going on which will be process the
29:47 - environment
29:48 - port and otherwise
29:51 - let's use 8002
29:55 - and the other thing we want to go ahead
29:57 - and do
29:58 - is say app.get and
30:02 - just do use the root and we will have a
30:06 - request
30:06 - and a response as well and once we are
30:10 - getting a
30:11 - get request on the uh root folder
30:15 - or the root endpoint or the base url we
30:18 - will essentially want to go ahead
30:20 - and do uh
30:23 - we would just pretty much just uh say
30:26 - hello world back and nothing super fancy
30:28 - going on
30:29 - at that uh point of the program because
30:32 - this is pretty much just gonna allow us
30:33 - to have like a health check set
30:35 - off right do you want to actually add
30:38 - anything rishi
30:39 - everything cool
30:46 - we might have lost rishi um
30:51 - okay let's continue and i hope rishi
30:54 - will be back with us soon
30:56 - okay so uh and next
30:59 - okay let's finish up the first api
31:02 - and inside of there what you want to do
31:04 - is pretty much just say
31:07 - response.status equals is going to be
31:10 - 200 and let's go ahead and
31:12 - send back uh
31:16 - pretty much just hello world and guys
31:19 - this
31:19 - uh this essentially is gonna be like um
31:23 - so when you're when you're uh engaging
31:25 - on
31:26 - the um
31:29 - on the on the base url of
31:32 - the uh application you will pretty much
31:35 - just see a hello world as
31:37 - a response and you also might be asking
31:39 - what
31:40 - oh you might also be asking
31:43 - what the heck is going on with that 200
31:46 - that's essentially
31:47 - in server language it means okay
31:50 - so that's pretty much it and let's
31:53 - actually
31:54 - now go ahead and make our app listen
31:58 - yeah papa marin in their house hey
32:00 - what's up dude
32:03 - here comes the correction all right
32:07 - um i don't know where she went by the
32:10 - way
32:12 - uh can you hear me david yeah i can uh
32:14 - what what
32:15 - what happened to your video dude
32:19 - i swear man my internet just crashed
32:22 - oh but i'm not sure like why it's my
32:23 - video not working
32:25 - oh okay i think it should be working
32:29 - okay all right bro uh whenever you can
32:31 - just turn it on and
32:32 - until we have this we'll have this nice
32:35 - little
32:36 - um oh okay
32:40 - there you are bro all right so let's get
32:43 - back into coding
32:44 - and let's actually add the listener part
32:47 - and
32:47 - we will be saying just about listen and
32:50 - we want to add the port in here
32:52 - should have a fi uh callback function
32:56 - and just pretty much uh console log that
32:59 - we are working and we are listening
33:02 - on on localhost
33:06 - and we wanna string concatenate
33:09 - the actual port or concatenate the
33:12 - actual port
33:13 - that we will be uh using so
33:17 - with that said let's actually start up
33:20 - not here let's actually start
33:24 - up our back end all right so
33:27 - let's hit uh nodemon in here
33:30 - and we should be seeing that we are
33:34 - listening on locals 802
33:36 - here we go guys let's actually give
33:39 - yourself
33:40 - a round of applause if you guys are with
33:43 - me
33:44 - and or with us uh this far and you have
33:47 - a working
33:48 - api uh which is ready for all the
33:51 - requests
33:52 - coming in
33:55 - so this is your applause great job guys
33:58 - if you're with us
33:59 - all right now what you guys want to do
34:02 - is
34:03 - have a postman open in the background
34:07 - somewhere here nice and what you want to
34:10 - do
34:11 - is pretty much just go ahead
34:14 - zoom in of course and inside of there
34:17 - you want you just want to go ahead and
34:19 - test this
34:20 - out of course if i showed the uh showed
34:23 - my screen that would be much much better
34:27 - so here we go what's up
34:31 - zabiola nice to have you here in the
34:33 - house
34:35 - and guys who actually
34:38 - knows what postman is who has you who
34:40 - have already used it
34:42 - let me know in the um chat down below
34:45 - if you need a little bit of a training
34:48 - on how to use
34:48 - postman and some kind of like api crash
34:51 - course
34:52 - because we can actually make that uh
34:55 - real
34:55 - we are happy to provide you guys as much
34:59 - value as possible
35:00 - and even if it's not like actual coding
35:03 - we are super
35:04 - pumped to give you guys other type of
35:05 - values just like yesterday
35:07 - the git uh version control
35:10 - yes uh the apis index is very simple
35:13 - yeah
35:14 - uh all right so with that said
35:18 - let's jump straight back into it and if
35:21 - you go ahead and
35:22 - if we send this we will see a hello
35:25 - world
35:25 - as well uh again here we go now
35:29 - with that said let's actually jump into
35:31 - the jacked part uh
35:33 - because this was just the beginning all
35:36 - right
35:37 - this is when i usually say um
35:42 - we are gonna get real okay
35:48 - before we move on david yeah why don't
35:50 - you take a minute and explain them what
35:51 - exactly is postman
35:54 - oh what happened hold on hold on
36:00 - hmm something
36:03 - is okay something happened to my
36:07 - okay here we go but we're back we're
36:08 - back okay nice so
36:10 - um we need postman bootcamp yes
36:14 - okay perfect uh all right we can make
36:17 - that a reality if you need that
36:19 - okay so with that uh
36:23 - what do i need to explain
36:27 - can you can you can you take a minute
36:28 - and explain what exactly is postman
36:31 - oh yeah uh postman is yeah as everybody
36:34 - says it's very easy it's pretty much
36:35 - just uh
36:36 - allows you to call apis and test them
36:38 - out if you're a back-end developer you
36:41 - can test out your uh
36:42 - your whatever you have just created and
36:45 - if you're a front-end developer you
36:47 - definitely want to have it as well
36:48 - because then you can check
36:50 - how the apis will actually respond to
36:54 - your requests all right
36:55 - you can you can make your app a lot
36:57 - better okay
37:01 - now uh what we want to do is say
37:05 - inside of here you guys wanna go ahead
37:09 - and let's actually go ahead and quickly
37:12 - set
37:13 - up our um mongodb
37:16 - so let's go to uh
37:20 - mongodb.com and if you haven't if you
37:23 - are new to mongodb.com you can go ahead
37:25 - and sign up by
37:27 - hitting that start free button but i
37:29 - have an account so i'm going to just go
37:31 - ahead and
37:32 - sign in now um
37:35 - here we go
37:39 - okay what is that okay here we go i'm
37:41 - gonna go ahead and hit
37:43 - new project and let's go ahead
37:47 - and say this chord
37:51 - live nice um because i'm working
37:54 - okay let's actually add you rishi so
37:57 - rishi
37:58 - clever programmer
38:01 - dot com nice so you can add your uh
38:04 - buddies you are working with your coding
38:06 - buddies
38:08 - nice and
38:11 - with that said let's go ahead and create
38:13 - a cluster what's up
38:15 - so i was just gonna say that what are we
38:17 - exactly doing while going to mongodb.com
38:20 - what are we doing like are we setting up
38:22 - a project on mongodb.com so that we can
38:24 - use that backend in our project
38:26 - so currently we are just setting up a
38:28 - database
38:29 - nothing else so we are we are riding
38:32 - with our hands
38:33 - the whole back end project and only the
38:36 - database
38:37 - is what we are you uh what we will be
38:40 - using mongodb for
38:42 - nothing else just the database and right
38:45 - now our cluster is being
38:46 - created which means we are provisioning
38:49 - uh
38:50 - sources from mongodb servers and we will
38:53 - be running
38:53 - our own database on their servers
38:57 - okay awesome perfect song
39:00 - yeah uh so with that let's go
39:04 - back in here and let's actually prepare
39:07 - our application
39:08 - for uh being able to
39:12 - handle json files and these request
39:14 - response so
39:15 - middle awares we will be using con uh we
39:18 - will
39:19 - we will need to add the express
39:22 - the json um so that
39:25 - we are go oh typo
39:29 - so that we will be able to handle json
39:32 - files and send and receive requests
39:34 - another thing which we need to install
39:36 - to our project
39:37 - and what i forgot is
39:42 - hold on oh damn nah it's abdo i use
39:46 - why const okay sometimes i make make
39:48 - these stupid mistakes
39:50 - so here you want to type in app that i
39:51 - use yeah um
39:54 - so another thing you want to definitely
39:57 - go ahead and do
39:58 - is installing the course headers uh
40:01 - so you will be typing an npm iii course
40:05 - that would essentially go ahead and just
40:07 - quickly uh install
40:08 - the course for you and now you can go
40:11 - ahead and type in a
40:13 - course twice so that you have
40:16 - the package imported and you want to go
40:19 - ahead and say app.use
40:21 - and course as well
40:25 - okay so what is a middleware middleware
40:27 - is pretty much just helping out the
40:29 - backhand it's gonna be like
40:30 - in between it's like a mediator between
40:33 - front and back and
40:34 - it's like middleware right so software
40:37 - hardware
40:40 - i think you can okay um but yeah yeah
40:44 - that was a good explanation yeah yeah
40:45 - like it's literally just
40:47 - mediating between the front end and the
40:49 - back end uh
40:51 - yeah okay i
40:54 - i just wanted to um like visualize
40:57 - how the name actually explains itself
41:01 - but i mean it's definitely an awesome
41:04 - question
41:04 - and and it's actually great to ask
41:07 - okay so uh dbconfig let's actually
41:12 - prepare that as well
41:14 - and we will be just inserting our
41:17 - uri inside of there
41:20 - okay so let's say
41:23 - uh const mango uri
41:27 - and we will be just inserting the string
41:31 - in
41:31 - in there and for now uh let's actually
41:35 - just
41:35 - add um
41:39 - the connection uh connection string
41:42 - and what we will be doing in here is
41:44 - pretty much just say
41:46 - mongoose.connect we want to
41:48 - connect that uri
41:52 - and add all these use create index
41:55 - news newer url parser and unified
41:58 - topology and these are actually needed
42:00 - because uh
42:04 - because mongoose is still
42:07 - in the um still in under development and
42:11 - it's always gonna be
42:12 - and right now they just need these uh
42:15 - to function perfectly and isn't
42:18 - middleware also used
42:20 - uh with redux or somewhere in the front
42:23 - end
42:24 - i think you can use it in the front end
42:26 - as well but
42:28 - as as far as i know um mostly
42:31 - it's used in the back end projects or a
42:34 - completely different project and like it
42:37 - like in huge corporate environment uh
42:40 - they will literally have like middleware
42:43 - projects right so
42:46 - in like let's say in a bank um
42:49 - there are lots of front-end softwares
42:52 - and lots of back-end software
42:54 - and there is usually one
42:57 - one huge microservice layer where all
43:00 - the
43:00 - data processing and all those stuff go
43:02 - on and those are uh
43:05 - uh happening in there i hope this
43:07 - actually answered your question
43:09 - and let's jump back in
43:12 - so with that said
43:16 - let's go back to our mongodb and
43:18 - hopefully
43:19 - it is done by now and what you want to
43:21 - go ahead and do
43:23 - is hit database access or network access
43:26 - we will start with network access
43:28 - and just add uh the ip address and what
43:32 - you want to go ahead and do now is say
43:34 - allow access from anywhere but
43:38 - and this is a huge bot what you
43:41 - definitely want to
43:42 - know is that this like
43:46 - it's actually a huge disclaimer
43:50 - do not do this in production environment
43:53 - guys if you are working with a client or
43:55 - somebody
43:56 - you don't want to allow access from
43:59 - anywhere
44:00 - the reason being is that
44:04 - this will literally let anybody go ahead
44:06 - and write into your database
44:08 - or your client's database and that's
44:10 - actually a
44:11 - that can actually lead a lot uh lots of
44:14 - money loss
44:15 - so this is just for uh educational
44:19 - purposes
44:20 - i think we can actually do a live
44:23 - on how to secure your apis and database
44:26 - and all those stuff for beginners of
44:28 - course
44:29 - um and you just want to go ahead and
44:33 - and watch that later on so if you guys
44:36 - are pumped about that
44:37 - let me know in the chat because
44:40 - if you're not interested in that we will
44:42 - just not do a video on that but if you
44:44 - are
44:45 - we will okay yeah it
44:48 - and guys like is there any specific
44:50 - topics that really interest you
44:52 - drop down in the comments that the
44:53 - topics you want us to cover in the live
44:56 - stream so that
44:57 - we can prepare a better live stream for
44:58 - you guys and we can be
45:00 - uh provide uh all the values that you
45:02 - guys need
45:03 - so drop down in the comments whatever
45:05 - the topics that interest you
45:06 - and what are the live streams that you
45:08 - guys want us to do for you guys
45:10 - so drop down in the comments and also
45:12 - make sure that uh
45:14 - you subscribe to the netflix clone free
45:16 - training
45:18 - just go for that get your free training
45:19 - put that on your resume and get the job
45:21 - exactly that is correct all right
45:25 - now with that said so for developing we
45:29 - we use what you use but for production
45:32 - uh change that
45:33 - yes um so right now because we are here
45:37 - um between friends we don't wanna
45:40 - hassle with the security stuff but when
45:42 - you are working in production
45:44 - you will know uh what the backend server
45:47 - uh ip address will be
45:51 - and you can just insert that in there
45:52 - it's super easy you can just swap that
45:54 - and there we go
45:56 - okay um with that said let's
46:00 - actually edit for now and
46:03 - what you want to also do is add a new
46:05 - database user i will just call it admin
46:08 - auto generate oops how to generate a
46:11 - secure password for it
46:15 - and let's go ahead and add the user
46:18 - and with that done let's go back to our
46:20 - clusters
46:21 - hit connect hit the middle button
46:25 - which says connect your application
46:28 - and you want to go ahead and copy that
46:31 - but guys
46:32 - don't forget to save that password
46:36 - somewhere safe
46:37 - okay let's go back to our code and let's
46:40 - go ahead and paste
46:42 - the uri in here you want to change
46:45 - out the db name which we will call uh
46:49 - discord db or you can call it whatever
46:53 - you want to if you want to call it
46:55 - small.go you can do that too but
46:58 - just be aware that that's how your
47:00 - database will be named
47:02 - and next up you can go ahead and
47:07 - delete that password and add your
47:10 - password inside of there
47:12 - and we should be done uh with the
47:15 - connection
47:16 - for now now what you want to go now uh
47:19 - so you might be thinking what is the
47:21 - next
47:22 - uh step now my friends we will start
47:25 - creating our api endpoints and super
47:28 - fast
47:29 - we will be just connecting the
47:30 - application and we will we will be done
47:32 - in like less than an hour all right
47:35 - so all we did here are davids sorry to
47:38 - interrupt you but all we did till now is
47:40 - just setting up the environment for the
47:42 - back end right
47:43 - uh yes that is correct uh all we did now
47:47 - is pretty much just set up every
47:50 - everything
47:50 - so now we can work smoothly and super
47:53 - fast
47:54 - yeah so awesome let's go
47:58 - exactly
48:02 - there we go all right let's go and
48:06 - let's start with our first um
48:10 - api endpoint and i think so guys
48:13 - if you remember uh how the netflix clone
48:16 - is actually built up
48:19 - uh we will actually have
48:22 - uh two different uh type uh type of data
48:26 - that we wanna go ahead and store
48:28 - one of them is uh the channels and the
48:31 - other one
48:32 - is the actual conversation now
48:36 - what you want to do is pretty much how
48:38 - we will
48:39 - lay out all the data that we will be
48:42 - using
48:42 - is is going to be something like this
48:46 - so imagine that this is gonna be our
48:49 - database am i sharing my no i'm not
48:51 - sharing my screen
48:52 - not making the same mistake again okay
48:55 - hopefully now i'm gonna be sharing my
48:57 - screen
48:58 - so what you wanna do uh so what so this
49:00 - is how how to understand quickly
49:03 - this is gonna be our database
49:06 - inside of here we will have uh
49:10 - several collections right no actually
49:12 - one collection sorry
49:14 - so we will have one collection that will
49:16 - store everything
49:18 - now one document will
49:21 - actually have uh
49:24 - the name the channel name
49:28 - and it will also
49:31 - store all the messages okay these are
49:34 - the messages these small
49:36 - uh stuff and we will also have several
49:40 - other uh channels and
49:43 - all of them will contain all these
49:45 - messages
49:46 - all right so i hope this actually made
49:49 - it clear
49:49 - i tried to make it super visual so that
49:52 - you can
49:53 - you guys can easily understand what is
49:55 - actually going on
49:58 - yeah i hope it actually made it clear
50:01 - so uh yeah let me know guys if you need
50:05 - more explanation on that
50:08 - okay so what we will be doing is
50:12 - um d'angelo
50:16 - we love you too brother awesome
50:20 - [Music]
50:22 - uh yeah okay
50:25 - so what you want to do now what we want
50:28 - to do now
50:28 - is pretty much just uh first let's
50:32 - actually create our database
50:35 - uh structure and what we want to do
50:38 - is let's go ahead and create a new file
50:42 - which we will call
50:43 -  data dot js
50:46 - and inside of that what you want to do
50:48 - is import
50:49 - um oh man you want to import the monk
50:54 - you want to import mongoose then you
50:56 - want to define a schema which will be a
50:58 - variable
50:59 - and you want to name you want to
51:02 - give the type of mango schema and
51:06 - this will essentially store uh one
51:09 - conversation so one of these stuff is
51:11 - going to be storing
51:13 - one actual full channel so here is the
51:16 - uh channel name inside of there there is
51:19 - the
51:19 - conversation and each and every single
51:22 - message has
51:23 - the message of course a timestamp
51:26 - and a user which we already set up
51:30 - in uh in the front end and we would just
51:33 - be passing in
51:34 - one um
51:37 - one simple user file uh user thing
51:41 - yep so the conversation is gonna be an
51:45 - object because it consists of names
51:46 - messages photos and url and stuff like
51:49 - that and that is the reason it is an
51:51 - object
51:51 - that we need to make sure here exactly
51:54 - also i'm just uh answering a question
51:56 - as i know with an overlay amazon clone
51:59 - with mern
52:00 - is possible right hundred percent my man
52:02 - hundred percent
52:03 - it's completely possible and if you guys
52:06 - are actually
52:07 - interested in building the amazon clone
52:11 - with the mirn stack drop some fire in
52:14 - the chat
52:15 - because then we will literally go ahead
52:17 - and build it
52:18 - so guys if you're pumped up from pump
52:21 - for that
52:22 - let me know in the chat down below and
52:24 - also guys if you
52:26 - are finding uh this or any of clever
52:29 - programmers videos valuable
52:32 - what should they do rishi so that this
52:34 - video goes out to everybody out there
52:36 - and we can provide so much more value
52:38 - what can they do
52:41 - so guys if you like this kind of videos
52:43 - and if you want
52:45 - go and like the video go and like the
52:47 - video comment down in the videos any
52:48 - questions you have any solutions you
52:50 - have for someone
52:52 - video it will reach out to as many
52:53 - people as they need to have we need to
52:56 - help a lot of people
52:57 - and a lot of people so just like the
53:00 - video and
53:01 - then that way you are helping another
53:04 - developer as well to grow
53:05 - so please just like the video so that
53:07 - you can reach out to hundreds of people
53:09 - like literally smash that like button
53:12 - all right
53:13 - with that said let's go back in here
53:16 - so this is the structure that actually
53:19 - is already set up
53:21 - in our front end project so we don't
53:22 - have to worry about that however
53:24 - it is a nice thing
53:28 - that we define it and then of course you
53:31 - need to export
53:32 - default the mangos model uh and you want
53:35 - to make
53:36 - the collection name plural
53:39 - that's the that's the collection name
53:41 - and you wanna make sure that it's plural
53:43 - otherwise mongodb will pluralize it
53:46 - anyway so
53:47 - don't worry about that uh but just make
53:50 - sure it's plural because
53:52 - you can go back to whatsapp clone and
53:54 - see what happens if
53:56 - if you're not pluralizing it okay i'll
53:59 - just leave it
54:00 - leave it to you okay and
54:03 - let's actually add the discord schema as
54:05 - well
54:06 - okay now with that said let's actually
54:09 - go ahead and
54:10 - import this file
54:13 - okay what's happening with my mouse oh
54:16 - yeah here we go
54:17 - so let's actually go ahead and import
54:20 - this uh file oh
54:24 - and what you want to do is just type in
54:27 - yeah
54:28 - so you want to go ahead and just type in
54:30 - here this
54:31 - line of code and you will have it
54:33 - imported
54:34 - now with that said what you want to do
54:38 - is pretty much let's first actually add
54:40 - a new channel
54:41 - and what we will be doing here is pretty
54:44 - much just set up
54:45 - a post endpoint um
54:50 - so let's actually say app.post and
54:53 - the endpoint what that we will be using
54:55 - is going to be new
54:56 - slash uh channel oops
55:00 - and we will have a
55:04 - request and a oh hold on
55:07 - we will have a callback which will have
55:10 - a request and the response
55:12 - and then we will
55:16 - uh literally go ahead and save
55:20 - everything inside of our database so
55:22 - first
55:23 - we will pass in the new db name
55:27 - inside of the request body and then
55:30 - what we want to do is go ahead and
55:33 - create
55:34 - a new uh document with this data
55:38 - and if there is an error handle it
55:41 - otherwise let's just uh
55:42 - send back a response so let's go ahead
55:46 - and go ahead and test this thing out so
55:50 - what i what i want you to want you guys
55:52 - to do
55:53 - is actually remember that we have
55:57 - uh so you need to name the field
56:00 - you are sending it as channel name
56:02 - otherwise it's not gonna be accepted
56:04 - now what i will name it is i think i
56:08 - think i think i'll name it youtube
56:11 - okay so now we should be able to send
56:14 - this
56:15 - and there we go guys we
56:18 - just saved our first uh
56:21 - channel inside of our database
56:26 - who is from now guys who is pum who is
56:29 - enjoying this who is finding this
56:31 - valuable let me know by just uh
56:35 - sending a message inside of the chat or
56:38 - smashing that like button and get this
56:40 - video out
56:41 - as many people as possible so that you
56:44 - guys can actually help
56:46 - us help 5 000 people get jobs as
56:49 - developers
56:50 - in 2020 right
56:54 - awesome i'm super excited nice
56:59 - yeah go on go on sorry sorry didn't you
57:01 - interrupt you no no i was
57:03 - no no no i was just gonna say that the
57:05 - thing we did right now is just that the
57:07 - reason why
57:08 - we are using postman is that before we
57:11 - go into coding and before we check that
57:13 - if we are able to post that
57:14 - uh channel's name into our database we
57:16 - are using postman
57:18 - to post that to send that name into the
57:21 - database instead of doing that from
57:22 - coding
57:23 - and that is the reason we use postman
57:24 - just to test the api
57:26 - exactly that's right also
57:29 - thank you so much thank you so much
57:31 - efren i really appreciate you brother i
57:33 - actually saw you
57:34 - earlier and a couple of days back as
57:37 - well
57:38 - you are around here we appreciate your
57:40 - brother and
57:41 - smash the like button okay
57:44 - so next up what you want to do is set up
57:47 - a
57:48 - new uh endpoint and what we will
57:52 - do is literally that's first you're not
57:54 - chatting your screen oh yeah
57:55 - uh sorry guys this is this kind of thing
57:59 - i always forget too yeah okay let's not
58:02 - do it again
58:03 - so what you want to do is set up a
58:06 - new endpoint and that will essentially
58:09 - just retrieve
58:10 - the channel list so what you want to
58:13 - type in here is say app.get
58:16 - and inside of there the endpoint is
58:19 - going to be get
58:20 - slash uh channel
58:23 - list nice and it will of also
58:27 - do the usual um callback functions
58:32 - and what you want to do is say
58:36 - uh mango beta dot
58:39 - find and you literally don't want to add
58:42 - any filters in there
58:43 - we will have um
58:46 - hey nice lovely comment thank you so
58:49 - much
58:51 - nice okay so what you want to do is not
58:54 - add any uh filter in there
58:57 - uh we will be filtering today uh i will
59:00 - teach you
59:00 - actually it's a new thing uh that we uh
59:04 - do some kind of filtering with mongoose
59:06 - but for now
59:07 - uh this is not the time we will be doing
59:09 - that with the conversation retrieving
59:12 - all right so who is from
59:16 - about that guys who actually knows
59:19 - who has actually filtered with a
59:22 - uh mongoose fine let me know in the chat
59:25 - all right
59:27 - okay so now what you want to go ahead
59:30 - and do is pretty much uh
59:32 - handle the errors
59:36 - [Laughter]
59:38 - you keep on doing that but this is the
59:41 - only day this is literally the only day
59:44 - i've always always changed everything
59:46 - and just yeah
59:47 - ah let's not talk about it
59:50 - okay so let's actually handle the errors
59:54 - as we uh yeah
59:57 - uh okay and so if there is an error we
60:00 - want to show the error
60:01 - otherwise let's just send back the
60:03 - response and what we want to do is
60:06 - you can literally go ahead and copy this
60:08 - uh line of
60:09 - these lines of code and you want to set
60:12 - the
60:12 - 201 to 200 right
60:16 - other than that we are cool now
60:20 - what you want to do is to make your life
60:23 - easier is to refactor the data that
60:25 - you're actually sending back
60:27 - uh from the back end even on the
60:28 - backhand side so let's actually add
60:31 - this stuff so uh let's actually refactor
60:35 - that
60:35 - so what i like to do is say create a lut
60:39 - uh and that's gonna be channels
60:42 - and it's actually gonna be an array and
60:45 - inside of there you wanna push
60:46 - all the array names and the ids because
60:49 - those are the two properties that we
60:50 - will be
60:51 - uh using on the front and if you guys
60:53 - remember if you don't
60:55 - uh make sure to check out sunny's video
60:57 - from last thursday
60:59 - when he is building the whole um
61:04 - um discord front and build nathan
61:07 - shoot your question in the uh chat and
61:10 - rishi please let me know
61:12 - when nathan asks this question
61:15 - right uh so next up what we will be
61:18 - doing
61:18 - is pretty much map through the whole
61:22 - data
61:24 - and every single piece is going to be a
61:26 - channel data
61:28 - and yeah so we will create a channel
61:31 - info which will contain the id
61:34 - which is going to be the channel data id
61:36 - and we will
61:37 - also have a name property which will
61:40 - contain the channel data
61:42 - that channel name and then you want to
61:45 - go ahead and push that channel info
61:47 - into channels and inside instead of data
61:51 - you want to go
61:52 - ahead and send back
61:55 - uh the channels right
61:59 - i hope this is actually clear let's
62:01 - actually demo it
62:02 - and let's see how it actually will
62:05 - work now what we want to go ahead and do
62:09 - oh yeah this is the this is what i've
62:12 - what i prepared with
62:14 - so let's go ahead and test this out
62:17 - and with that we literally
62:20 - have a working another working api
62:24 - endpoint and we are getting back the
62:27 - youtube
62:27 - channel name nice job guys
62:31 - if you are this far with us this is a
62:34 - roundabout applause for you guys
62:38 - okay now let's get into the juicy part
62:42 - okay so next up what we will be doing
62:46 - yeah go on go on sorry sorry to
62:48 - interrupt before before we move on uh
62:50 - can you just show the visual studio code
62:52 - just i i just want to explain what we
62:53 - just did so
62:57 - here we go so guys what we did over here
63:00 - is what
63:00 - we are just getting the data that are
63:02 - already stored in the database by using
63:04 - the dot get method
63:06 - and we are from that endpoint we are
63:07 - just getting the data and we are
63:09 - displaying into different forms that is
63:10 - the channel uh the name of the id
63:12 - the channel id and the name so that that
63:14 - is what all we are doing from line 38 to
63:17 - line 56 we are the we are getting the
63:19 - data from that
63:20 - end point and we are just displaying
63:21 - that right now we are just seeing that
63:23 - in the postman
63:24 - so that's what we are checking that if
63:25 - we are getting the proper data from
63:27 - our database exactly so guys this is the
63:31 - data that we
63:32 - stored in here and we just want to see
63:34 - this
63:35 - and that conversation don't care about
63:38 - it for now we just want to see the
63:40 - channel list
63:41 - and the version again it's not important
63:44 - for us
63:45 - okay uh let's actu i think
63:49 - yeah here we go okay so
63:52 - next up what we want to do is literally
63:56 - save a new message inside of uh our
64:00 - back-end and or inside of our database
64:03 - and guys this is gonna be
64:04 - tough um oh i think i
64:08 - can you guys hear me oh yeah you can
64:10 - okay so this is gonna be tough
64:13 - uh because this is when we are we're
64:16 - gonna be
64:16 - doing some nice little uh
64:20 - stuff in mangoes so next up what we
64:24 - wanna do
64:25 - is say app.post and
64:30 - you want to go ahead and create a new
64:31 - endpoint which
64:33 - will say uh slash news message
64:36 - is or slash message and
64:40 - let's fire off another uh callback
64:45 - and let's say const oh then
64:49 - let's say const uh id
64:52 - equals request dot query the
64:55 - id i will explain everything in just a
64:58 - second okay
64:59 - don't freak out just copy paste copy
65:01 - copy copy and i will explain everything
65:03 - that's going on in here
65:05 - uh oops okay and
65:08 - yeah and next up what we want to do
65:11 - ahead
65:12 - is go ahead and say const new message
65:16 - new map sage and say
65:19 - request body okay
65:23 - so these are gonna be the properties
65:25 - that we will be
65:26 - uh using uh the id
65:29 - is gonna be this id
65:33 - so that we know which channel do we uh
65:37 - do we do we want to add this message to
65:40 - so let's say if i'm sending this id back
65:43 - i want to save it to youtube but if i go
65:46 - ahead
65:47 - and create an other channel uh i'm not
65:50 - gonna be
65:51 - able i'm gonna be able to demo oh yeah i
65:54 - will
65:55 - so if i say uh this q or
65:58 - cp this chord
66:02 - whoops this discord nice
66:05 - and go ahead and retrieve everything
66:08 - back
66:09 - so if i want to say save uh it into
66:12 - youtube
66:13 - channel i will say uh add this to the
66:16 - query and
66:18 - if i want to go ahead and save to the cp
66:21 - discord or if i want to send it there i
66:23 - will add this one
66:25 - okay rishigan again hopefully he will be
66:28 - back soon
66:30 - all right we still have 120 people guys
66:34 - let's smash the like button if you guys
66:36 - are enjoying it this is a hardcore
66:38 - uh build i know because there is not too
66:41 - much people around here
66:42 - but actually 120 people is pretty a good
66:44 - amount so
66:46 - with that said let's actually continue
66:49 - and say
66:50 - mango data the update
66:54 - and what you want to do now this is
66:56 - where we will be going ahead and
66:58 - filtering out stuff
67:00 - so we will be updating stuff
67:03 - uh and we will be pushing new messages
67:06 - into uh arrays so
67:11 - just bear with me okay so let's first
67:14 - actually
67:15 - find which uh
67:18 - which field which conversation do we
67:21 - want to add the message
67:22 - to and let's say that this is actually
67:26 - gonna be the request square
67:27 - uh
67:31 - we don't even need this one why did i
67:33 - write it
67:34 - okay um so inside of here
67:37 - you just want to go ahead and say say
67:39 - that uh
67:40 - so that's the id that you want to find
67:43 - and that's the conversation that you
67:45 - want to add a new message
67:47 - into and you will literally just go
67:50 - ahead and inject the new message
67:52 - into the conversation so next
67:55 - up with when we found the conversation
67:59 - we want to go ahead and say uh whoops uh
68:02 - let's push something in there
68:06 - a papa react in the house
68:09 - what is up sunny how's it going my man
68:13 - hey smash the like button okay
68:17 - hey sunny yo so
68:20 - next up yeah sunny in the house
68:23 - everybody's going crazy like hey sorry
68:25 - let's screw the mirror and build sonny
68:28 - is in the house
68:29 - let's give him a round of applause what
68:32 - is up
68:35 - uh so does query id come from the url
68:39 - uh asked as by silicon tv
68:42 - yes it is um let me actually quickly
68:44 - show you how it is built up
68:47 - so if you go if we go in here uh now i
68:51 - actually add a edit as a comment
68:53 - so if i gonna go ahead and say uh local
68:56 - host
68:57 - oops localhost 802
69:01 - and hey
69:05 - exactly he said it not me
69:09 - all right
69:12 - so if we say like new message
69:16 - and let's say the id so you we will need
69:19 - to add
69:20 - a question mark right we will need to
69:22 - add a question mark
69:24 - that's how we will know that this is the
69:26 - query part and not the end point right
69:29 - so that's when the uh query starts and
69:32 - we will just add an
69:33 - id field and say equals whatever we want
69:36 - to
69:37 - want it to equal to you right i hope
69:40 - this actually answered your question let
69:41 - me know in the uh chat down below
69:44 - okay so next up what we want to do is
69:48 - say
69:49 - uh we want to in
69:53 - inject into the conversation right
69:58 - conversation which is
70:00 - the um
70:04 - which is going to be this array right
70:07 - that is where we want to inject a new
70:08 - message
70:10 - uh that's where we want to go ahead and
70:12 - say request.body
70:14 - so what happens here because this is
70:16 - like mind blown
70:19 - so
70:25 - so what happens here is that we
70:28 - define which conversation do we want to
70:31 - inject
70:31 - the new message into and we also send a
70:33 - new message as well
70:35 - the new message is going to be sent in
70:37 - the request body
70:39 - and the conversation id is going to be
70:42 - sent
70:42 - in as a query right
70:45 - um i hope this actually
70:49 - uh getting clear and i'm able to clear
70:52 - all the clouds
70:53 - but let me know in the chat if i nee if
70:55 - you guys need a little bit more
70:57 - explanation
70:58 - we are here for you guys okay
71:02 - yeah before we move on david there's a
71:04 - good question in the chat that
71:06 - uh no i think uh a wait for mongo's
71:11 - where is it i think it's like pretty
71:15 - it's it's at 425 so it's pretty up okay
71:18 - so uh
71:19 - what what was the question again so the
71:22 - question was why are we not using
71:23 - i think and await for like mongoose
71:27 - uh this is already uh so it's already
71:31 - getting handled by express
71:34 - right so this is a server between a
71:36 - server conversation and this is actually
71:38 - getting
71:39 - handled by that uh you want to use acing
71:42 - more on the front end
71:44 - like that's how i use it i haven't
71:47 - really used it in back end
71:48 - to be honest all right
71:52 - next up what we want to do is so we we
71:55 - already pushed the new uh
71:56 - converse the new message into the
71:58 - conversation
72:00 - let's handle the errors and let's see if
72:03 - everything is going cool and so are not
72:07 - shutting your screen
72:08 - um man why is it happening today
72:14 - okay so what i just did i added a comma
72:16 - at the end of the line
72:18 - and don't forget that and i started the
72:21 - error handling
72:22 - so we will either receive an error
72:25 - or we will receive the data that we just
72:28 - saved
72:29 - and if you guys are ready
72:34 - let's actually add the uh error handling
72:38 - and say boom so if there is an error
72:42 - let's say uh let's cancel log error
72:44 - saving message
72:45 - and let's add a console log and
72:49 - then send back the error of course and
72:52 - if everything's going cool let's just
72:54 - send back the
72:55 - data now what we want to do is go ahead
72:59 - and check
73:00 - this out how it actually works
73:04 - so let's go into the parameters and
73:07 - from here let's actually add it to
73:09 - youtube
73:11 - and let's actually like delete this
73:14 - and say oops
73:18 - something is not going well hold on
73:20 - unexpected token
73:22 - oh this is when the buck happens
73:30 - oh my hello
73:37 - all right let's debug
73:43 - so let's see what didn't work out
73:46 - well and what didn't work out the way we
73:49 - wanted this to happen
73:52 - so we see that okay i think
73:57 - i added the express
74:01 - let's see so we have the express added
74:07 - jason um
74:12 - oh so
74:15 - it's actually a pretty easy error um i
74:18 - made a mistake in the json
74:21 - i don't even know what happened here but
74:23 - let's actually
74:24 - set the background color back all right
74:29 - now we are back on track uh so let's
74:33 - actually add
74:34 - a message that actually
74:38 - is good uh here so what we need to type
74:43 - in here
74:43 - is going to be like okay so first let's
74:45 - say message
74:46 - and the message will be yo
74:50 - yo guys who
74:53 - is pumped
74:57 - and let's actually add a rocket emoji
75:00 - nice uh
75:03 - carry goes in the comment lol
75:05 - [Laughter]
75:08 - yeah all right next up uh we will also
75:11 - need to add a timestamp
75:14 - which will be just a dummy one for now
75:18 - and let's actually just say time stamp
75:21 - for now
75:22 - and don't worry about anything else we
75:25 - will also
75:26 - have a user next up
75:29 - uh i think i just copy paste this part
75:31 - uh boom
75:34 - and now let's handle all these errors
75:38 - and so the display name i think it's
75:41 - gonna be your name for now rishi
75:43 - how do you like the idea
75:46 - and yeah perfect okay so the display
75:50 - name is gonna be rishi
75:53 - email is gonna be a at b
75:56 - com simple photo url is gonna be
76:00 - this is a photo
76:03 - nice and we will have a user id as well
76:08 - and that's just gonna be like something
76:10 - like this
76:12 - cool uh now i think we should be good to
76:16 - go
76:17 - and let's see how it goes there we go if
76:20 - we receive that response
76:22 - then you guys we know that we are on
76:25 - track
76:28 - now uh let's actually create another
76:31 - endpoint that will just retrieve
76:33 - everything
76:33 - so that we can actually see the whole
76:36 - data
76:37 - in one piece that's not gonna be uh
76:40 - anything uh special it's just gonna be
76:42 - retrieving everything
76:44 - we are not even gonna be using this it's
76:46 - uh
76:47 - more like for uh demonstrational
76:49 - purposes
76:50 - uh today we're not even gonna be needing
76:52 - this so
76:55 - uh we will be saying data
76:58 - i think this is the one yeah here we go
77:01 - and 802
77:03 - nice and inside of here or what we see
77:07 - is that we got the youtube channel
77:11 - there speaking of youtube channel
77:14 - subscribe to it if you find this video
77:16 - valuable
77:17 - uh we got this message inside of here
77:20 - by rishi he says yo what's up
77:24 - yo guys who's pumped and we also have a
77:27 - discord uh channel which is totally
77:30 - empty
77:31 - now with that done uh we actually
77:33 - inspected our data
77:35 - but now what we want to do is uh
77:37 - retrieve
77:39 - the conversation that we are actually
77:42 - on and the current one that we actually
77:44 - want to see
77:46 - now i think uh that is going to be the
77:49 - last one and i'm sharing my screen
77:50 - because i don't forget it
77:54 - pop-up i should get more more of these
77:57 - sound effects right uh
78:00 - [Music]
78:02 - let's go ahead and paste a new one
78:04 - inside of here
78:06 - so it's gonna be get conversation and
78:10 - there we go so pretty much we are
78:13 - hitting
78:13 - uh so we are actually gonna be querying
78:15 - again
78:16 - with an id i'm gonna scroll a bit down
78:19 - so that you guys can have a better
78:21 - uh better uh uh you can see it better
78:27 - and next up uh we will be filtering
78:30 - on that conversation and we will be just
78:33 - retrieving everything
78:34 - as the usual uh as usual we would do
78:38 - hey rishi welcome back so um
78:41 - i think with that said
78:47 - with that said uh i think we are done
78:51 - for the back end part i think we are
78:54 - done
78:55 - guys make sure if you guys are
78:59 - with us uh let us know
79:02 - in the comment section down below and
79:05 - actually great job and awesome
79:08 - with us let us know if you are here with
79:11 - us
79:12 - and it is working uh as i just showed
79:15 - you guys
79:16 - all right so next up what we will be
79:20 - doing
79:20 - is pretty much just go ahead and connect
79:23 - it to uh our front end
79:28 - let's show the screen
79:31 - uh and what we will be doing is first
79:34 - let's actually identify where we need
79:37 - to work and i think
79:40 - we will be working in the
79:44 - chat.js file yes
79:47 - and the other one is going to be either
79:50 - message not not message uh
79:54 - the sidebar.js yes that's correct
79:58 - so let's go into the starter project
80:01 - and say let's open up the chat.js file
80:06 - as well as the sidebar.js let's start
80:09 - with the sidebar.js file because
80:11 - that is uh that is gonna
80:15 - that is going to shoot into the redux
80:18 - the data layer and it's going to set the
80:20 - channel id
80:21 - and then we will be able to go ahead and
80:24 - fetch everything
80:26 - uh based on that all right
80:30 - nice um
80:34 - boom let's go back to our screen
80:37 - and what we will be doing in here is
80:39 - pretty much
80:40 - just get rid of all the firebase stuff
80:43 - we will not use it anymore
80:46 - and inside of there what you guys want
80:49 - to
80:49 - do is first actually add the
80:53 - um let's actually im install
80:58 - the axios all right so how to do that
81:02 - pretty much npm install and axios
81:06 - now axios is actually a tool that will
81:09 - um
81:11 - it's pretty much the coded version of
81:12 - postman if it makes sense
81:14 - you will be able to go ahead and make uh
81:18 - rest make requests to http requests to
81:23 - rest apis right nice
81:27 - uh with that said let's go in here
81:30 - add a new file oh man
81:36 - add a new file inside of
81:40 - source nice which we will call axios.js
81:46 - and what we want to do in here is pretty
81:49 - much
81:50 - just uh set everything up
81:53 - so we will be importing axios from axios
81:56 - then we will create a new instance
82:00 - and we will be just going ahead and
82:03 - exporting it
82:04 - the base url will be our server's url
82:07 - right now with that done uh let's go
82:12 - let's actually close these stuff up uh
82:15 - we will be oh i close the chat
82:19 - okay so let's go into the sidebar.js
82:22 - and let's import
82:26 - um the axios from
82:30 - the instance that we just created nice
82:33 - so next up what we will be doing is
82:36 - let's go ahead and
82:38 - create a new uh function
82:41 - which will go ahead and and uh
82:44 - download all the data from our database
82:48 - so that will be pretty much just
82:51 - a get channels named uh function
82:55 - and we want to go ahead and call it
82:58 - inside of
82:59 - this um
83:02 - use effect right so when the application
83:05 - has loaded you want to go ahead and
83:07 - fetch all the channel names and you want
83:09 - to render them out
83:10 - in order nice so what you guys want to
83:13 - want to do is yeah here we go and
83:16 - we should be able to open up this
83:20 - app and you guys can actually
83:23 - see that
83:26 - here we go right that is actually
83:30 - the channel that we just created all
83:33 - right
83:35 - it it still has the
83:40 - old uh messages because it's actually
83:45 - i literally named it the same way but
83:47 - don't worry about that we will get
83:49 - into it very soon all right
83:52 - once we once we remove all these uh
83:55 - db stuff is it actually running hold on
84:00 - no it's not not it's not even running
84:02 - hold up
84:04 - it's not even running okay npm start
84:09 - okay um
84:16 - here we go let's actually run this and
84:18 - this is gonna be
84:19 - the one that we just built okay
84:24 - that's that's what i was guessing yeah
84:27 - that was the demo one
84:29 - i'm like hmm okay
84:35 - so now that we are actually setting this
84:37 - up and we are
84:38 - uh firing the uh server up
84:42 - let's go ahead and sign in it's going to
84:45 - be
84:45 - half the old oh
84:50 - what i forgot let's go back to firebase
84:52 - and let's actually set up our
84:54 - authentication right
84:56 - so you want to go ahead and hit the
84:58 - authentication button
84:59 - in there otherwise it's not going to uh
85:02 - allow you to sign
85:03 - in but with that done uh
85:06 - let's actually go in here to
85:08 - authentication
85:10 - uh say google enable it and add
85:14 - an email and just go ahead and hit
85:17 - save now with that
85:21 - you literally enabled authentication and
85:24 - it's super easy
85:25 - now let's go ahead and refresh this and
85:28 - now it's actually working so i'm gonna
85:30 - go ahead sign in here
85:33 - and now we should be able to oh my god
85:42 - so we are facing a little bit of
85:45 - bug i think i already know what we
85:48 - didn't set
85:49 - up just yet uh
85:53 - so what we need to do is pretty much
85:56 - just
85:56 - um set up the way we are rendering
86:00 - everything
86:01 - out all right so inside of
86:05 - sidebar.js we have our data
86:09 - uh added to uh
86:13 - to the channel's uh use state so that's
86:16 - cool
86:17 - but down here where we actually go ahead
86:20 - and literally render it
86:24 - out and need to find that part
86:29 - rishi speak up says sunny
86:32 - speak up my man i know
86:37 - yeah i'm just letting the david do all
86:39 - the stuff
86:39 - [Laughter]
86:42 - all right so what we will be doing down
86:46 - here
86:47 - is where we uh
86:50 - where we render all these stuff out
86:53 - uh we need to change a little bit of
86:57 - stuff
86:58 - so we need to get rid of all these uh
87:01 - thank you sunny it's an awesome code but
87:03 - we're just not going to use
87:05 - everything out of it so we will
87:08 - whenever we are mapping through the
87:10 - channels
87:11 - we will receive uh single channels right
87:15 - so there's gonna be like one channel
87:16 - okay now
87:19 - what we want to pass through uh or
87:22 - actually send through as a prop is going
87:25 - to be
87:26 - the uh channel dot id
87:31 - inside of id again so channel
87:35 - dot id right oops
87:38 - id and channel that channel
87:41 - instead of channel that channel name we
87:43 - will have channel that name
87:46 - and that i think should actually
87:49 - work pretty perfectly
87:53 - let's go ahead and hello
87:56 - here we go we are working we are live
88:00 - we just fixed another bug right we just
88:04 - fixed
88:04 - another bug so guys this round of
88:07 - applause
88:08 - is goes out for you guys
88:11 - [Music]
88:12 - okay
88:14 - [Applause]
88:15 - now with that oh
88:20 - that he goes witness sad emoji
88:24 - sorry man yeah
88:27 - okay
88:30 - thank you so much learn from the best
88:33 - all right
88:35 - so
88:39 - and yeah oh my god we are close to 300
88:42 - likes
88:43 - guys literally let's everybody smash
88:46 - that like button
88:47 - we are at 273 likes guys
88:52 - i think we can reach that number we are
88:55 - here a hundred
88:56 - and fifteen uh each and every one of us
88:59 - if you guys just go ahead and smack like
89:02 - button
89:03 - we will reach that very soon okay
89:07 - hit that like button if you found this
89:09 - uh useful
89:11 - and let's carry on with that
89:14 - okay yeah and before we move on guys if
89:17 - you need a complete free training on a
89:19 - netflix clone
89:20 - the link is in the subscription go and
89:21 - register for that it's a completely free
89:24 - netflix loan
89:25 - you will go from scratch to learn how
89:27 - you build a netflix clone very similar
89:28 - to netflix so go and subscribe to that
89:31 - exactly that is correct
89:34 - okay uh boom sharing my screen
89:38 - nice so we have all our uh
89:41 - channels shown in here right cp discord
89:45 - and youtube now let's actually connect
89:49 - uh oh my god
89:52 - let's actually connect the messages
89:55 - inside of here
89:56 - so that we will have everything up and
89:59 - running now
90:02 - with that said well next up what we need
90:05 - to do
90:06 - is go into i think we are
90:09 - done for now with the sidebar.js next up
90:12 - we
90:13 - need to go into chat.js
90:18 - and
90:20 - and uh let's actually get rid of
90:23 - the firebase stuff here as well
90:27 - we are not going to be using firebase
90:29 - for storing all the data
90:31 - what we will be doing is pretty much
90:32 - just uh use firebase for
90:34 - hosting now uh i will leave uh
90:38 - the uh firebase code here as a reference
90:42 - but what we will be doing now is pretty
90:45 - much just create
90:46 - a new uh function
90:50 - and that will actually get all the
90:52 - conversation
90:53 - that we need uh it will get it for us
90:57 - now what is happening here yeah what's
91:00 - up
91:01 - sorry i didn't mean to cut you off no i
91:03 - was just
91:04 - no no i i just uh i was just gonna
91:05 - explain that what's happening here i was
91:07 - just gonna say that we are fetching the
91:08 - conversations from that
91:10 - exactly so that we can display all the
91:11 - messages exactly that is what is
91:14 - happening
91:15 - so what we will be doing
91:18 - is pretty much have a separate
91:22 - function which will have channel iv
91:25 - as their input parameter
91:28 - and we will literally go ahead and
91:31 - switch
91:33 - this line of code to oh hold on
91:37 - uh we will literally go ahead and switch
91:40 - these uh lines of code to this
91:44 - and this will essentially go ahead and
91:46 - once the application is loaded and
91:48 - everything
91:48 - is up and running it will fire this uh
91:51 - function
91:52 - off and this will get everything
91:55 - back for us right
91:58 - so we are literally going to go ahead
92:00 - and get
92:01 - the conversation and the id is going to
92:04 - be the channel
92:05 - id which we already uh
92:08 - set uh which we already set up and sonic
92:12 - goes
92:13 - mongodb trying to hold up firebase
92:16 - [Laughter]
92:22 - mongodb is cool stuff all right
92:28 - okay let's get back to it
92:32 - okay so lo sonic aims
92:36 - comes in here and we are up with 10 more
92:38 - viewers
92:40 - stay here sonic please all right
92:45 - so next up what we will be doing is
92:48 - uh we will switch out the
92:51 - uh send message function
92:55 - and what we will be doing is pretty much
92:57 - just go ahead
92:58 - and delete the db collection and all
93:01 - that stuff
93:02 - and let's just paste this uh nice tiny
93:06 - little code
93:07 - so much simpler than uh firebase isn't
93:09 - it
93:10 - like literally so much simpler hey we
93:13 - got
93:14 - frankina is being a savage
93:17 - yes all right actually we are
93:21 - we're having more fun than coding all
93:24 - right
93:24 - so with that we pretty much have the
93:27 - sand and the retrieve
93:28 - uh functionality
93:31 - and woof we don't have the axios
93:38 - define what are we gonna be doing
93:43 - of course we know what we're gonna be
93:44 - doing we're just gonna go ahead and
93:45 - import it
93:46 - nothing super fancy going on in here but
93:49 - let's import axios from
93:53 - excels there we go and it actually
93:56 - should
93:57 - fix it here we go guys we have it
94:00 - now let's go into youtube
94:05 - okay so now it's freaking out again
94:10 - but the only problem that we have now
94:14 - is that it cannot take in
94:18 - the timestamp that we are
94:21 - added this is not a huge problem however
94:25 - it now causes the app
94:26 - to freak out instead we would just go
94:29 - into mongodb
94:31 - hit uh clusters and we will literally
94:34 - just
94:35 - uh go ahead and
94:38 - delete that uh that piece of comment
94:42 - um if i can hold on
94:46 - okay yeah there we go and we're just
94:49 - gonna go ahead and update it
94:51 - and that is now it yeah now it's
94:54 - gone so it now it shouldn't cause
94:57 - any other problems now
95:01 - what we will be doing is going back in
95:03 - here let's refresh
95:05 - and we should be able to see the app
95:08 - working
95:09 - now if i go into youtube channel of
95:11 - course there is no more
95:13 - um no more message
95:17 - um yeah and next up
95:22 - 13 likes to go yes guys literally go
95:24 - ahead and smash that like button
95:26 - we uh we only need 13 more that's not a
95:29 - lot
95:29 - let's go sunday goes i need those lights
95:34 - we can hop on a call after and talk tech
95:37 - all right okay uh yeah and
95:41 - what we now we will do is so
95:44 - here it actually is going to save a
95:47 - timestamp
95:47 - which is going to be a date dot now
95:50 - which
95:51 - is going to be um a super
95:54 - simple uh timestamp
95:57 - right it's going to be a timestamp
96:01 - yeah what's up guys when we used it
96:04 - script and build functionality that
96:06 - provides us timestamps that every time a
96:09 - new conversation or new message is
96:10 - generated it's gonna have a different
96:12 - unique id
96:13 - and we need to separate those messages
96:15 - that is the reason we are using the
96:16 - timestamp
96:17 - exactly that's right all right um
96:22 - so what we will do is go into messages
96:24 - and
96:25 - inside of here we will change a little
96:28 - bit of
96:29 - code uh and that's pretty much just
96:32 - gonna be
96:32 - just gonna make our life so much easier
96:36 - so we sorry sonny again
96:39 - we will get rid of another code of yours
96:41 - uh so what we will be doing
96:43 - instead of this ones we are not going to
96:46 - display the utc string and all those
96:48 - stuff
96:49 - instead we will be transforming
96:52 - the app
96:55 - uh well instead we will be transforming
96:59 - it
97:00 - to a simple timestamp string
97:03 - all right so with that said
97:07 - let's actually go ahead and
97:10 - try this application out with the send
97:14 - message functionality
97:15 - and the retrieving uh
97:19 - retrieving uh functionality so
97:23 - who is pumped about that smash the like
97:25 - button
97:26 - let's hit that subscribe yes let's
97:30 - go guys let's actually check this app
97:34 - working all right now
97:37 - um okay i'm showing my screen
97:41 - hey linkedin on the way soon
97:45 - that's gonna be some let's go stuff yeah
97:50 - okay let's check this out so i am going
97:53 - to be
97:54 - adding a message inside of the youtube
97:57 - channel
97:58 - and we just got 10 dollar nice
98:01 - donation by frank thank you so much
98:04 - brother
98:05 - uh he says clever programmer rishi and
98:08 - david dropping
98:08 - so much knowledge right now let's go
98:12 - let's go frank i'm super pumped to have
98:14 - you here
98:16 - uh thank you so much roger and we
98:19 - are super pumped for you
98:22 - all right thank you so much frank for
98:25 - the super chat thank you so much thank
98:27 - you
98:27 - really appreciate that exactly all right
98:31 - uh and we had a christmas
98:34 - app as a recommendation guys i actually
98:37 - have it
98:38 - in on my computer we are gonna drop it
98:41 - soon
98:42 - okay so let's test this thing out
98:47 - so who is pumped
98:52 - who's bummed guys let's answer in the
98:55 - uh chat down below i'm gonna add a
98:58 - rocket and they fire
99:00 - because we are on fire right
99:03 - let's hit this and
99:06 - nothing happens but it's not a bug
99:10 - because it's
99:10 - just not real time just yet let's
99:14 - refresh
99:15 - let's go into youtube hey
99:18 - there we go there we
99:21 - go guys working it
99:26 - is working now only thing we need to do
99:30 - now
99:30 - is literally make the app real time and
99:33 - then
99:35 - guys we are gonna be done
99:38 - with today's build okay who's pumped
99:42 - guys
99:42 - let me know in the chat if you guys are
99:45 - pumped
99:46 - and if you guys are ready to make this
99:49 - app
99:49 - real time all right uh
99:53 - yeah next up what we will be doing is
99:56 - go to pusher.com
100:00 - the good old pushrod you're nurturing
100:01 - your screen
100:03 - i always do that seventh time seventh
100:06 - time
100:07 - and you're counting it dude i'm making a
100:10 - count yes i'm counting okay guys
100:12 - i'm gonna stop here for a sec um we need
100:15 - four more likes before reaching
100:17 - 300. that's everybody smash that like
100:21 - button i think
100:23 - um i think everybody who who got value
100:26 - out of this video
100:28 - or or any of clever programmers builds
100:31 - can go ahead and smash that like button
100:34 - like literally go ahead and destroy it
100:37 - and let's reach that 300
100:41 - because yeah let's just go ahead
100:44 - and do that let's everybody do that
100:47 - until then
100:48 - i'm gonna be staying here and talk to
100:51 - you guys we are at 299.
100:53 - nice there we go and three thousand
100:56 - and three hundred and one
101:00 - let's go let's go
101:04 - all right thank you so much guys for
101:06 - liking this video when you're liking
101:08 - this video you're helping
101:09 - you're also helping other developers so
101:11 - that they can reach this video
101:13 - and they can make this clone and they
101:15 - can put it on your resume and they can
101:17 - lend their job
101:18 - so your part is just to like that video
101:20 - so that it can reach out to millions of
101:22 - people
101:22 - thank you so much guys for liking this
101:24 - video exactly we really
101:26 - really appreciate you guys for being
101:28 - here and smashing that like button
101:30 - all right next up let's go and make our
101:34 - application real time now i'm gonna go
101:37 - ahead
101:37 - sign in but you guys can go ahead sign
101:40 - up
101:41 - if you guys haven't used pusher before
101:44 - but yeah because i have and hopefully
101:47 - you guys have too
101:48 - let me know in the description down
101:50 - below not description chat
101:52 - uh if you have used it or if you're
101:54 - completely new to it
101:56 - next up i will hit the manage button
101:59 - what's up sorry no i was just gonna say
102:02 - that uh
102:03 - can you please explain what exactly is
102:05 - pusher and why are we using it
102:06 - sure i know we are just using it to make
102:08 - it a real time but what exactly is
102:10 - pusher and what are the other ways we
102:11 - can use pusher
102:12 - sure the people can know more about that
102:14 - sure so
102:16 - first up i want to add sony's command so
102:19 - pusher implementation is clean
102:22 - exactly uh but what we will be
102:25 - using this for is pretty much
102:28 - uh it's going to be listening
102:32 - so we will be using two different
102:33 - technologies one of them is going to be
102:35 - change stream
102:36 - by mongodb it is going to be watching
102:40 - the uh it's going to be watching
102:43 - the collection where we save all our
102:46 - messages
102:46 - right it's going to be watching and it's
102:48 - going to be triggering off
102:50 - a function uh
102:54 - that will alert pusher that hey there is
102:56 - some there is something happening in the
102:58 - database
102:59 - right so because it is not a real-time
103:02 - database
103:02 - we need to do this manually now
103:06 - uh and that's actually a huge plus uh or
103:09 - a huge win
103:10 - uh for firebase because that is a
103:13 - real-time database exactly
103:14 - by design but we will need we will make
103:18 - mongodb real-time with it so change
103:21 - stream is watching our database
103:23 - something's happening triggers of a
103:25 - function
103:26 - which goes ahead kicks pusher and pusher
103:29 - be like oh
103:30 - there is some kind of change in the back
103:32 - end okay i will let the front end know
103:35 - so it tells the front end and the front
103:37 - end goes ahead and refreshes everything
103:39 - and then we will have everything real
103:41 - time all right
103:42 - we will be just going with the very
103:44 - basic way of implementing it
103:47 - we could be like optimizing it to the
103:51 - like and lastly but for now we will be
103:54 - just
103:54 - refreshing the whole page uh but
103:58 - we we can actually drop a video on how
104:00 - to optimize
104:01 - all your applications and how to make it
104:04 - like super efficient but for now
104:07 - uh for the sake of results over
104:09 - perfection
104:10 - we will be just going ahead and refresh
104:12 - everything okay
104:14 - with that said yep so the role for the
104:17 - pusher in our project is just gonna be
104:19 - it's gonna be checking that if there's
104:21 - if there's a change even a little change
104:22 - in the back end it's gonna tell the
104:24 - front end that there's a change and it's
104:25 - gonna refresh
104:26 - so that we can see all those changes
104:28 - instead of manually the page
104:30 - uh middling the uh manually refreshing
104:32 - the page okay right
104:33 - now let's focus on the value and let's
104:36 - actually make it real time
104:37 - now what we will be doing is gonna go
104:40 - ahead and hit
104:41 - create app and let's go
104:44 - on and say this is going to be a
104:49 - discord uh mirn
104:52 - build or live oops
104:55 - uh live yeah there we go and we can
104:58 - actually choose
104:59 - our front end which is react
105:02 - there we go and we can choose our
105:05 - backend which is
105:06 - node.js and with cr uh hitting
105:10 - the create app button we will
105:12 - essentially
105:13 - be given a couple of starter codes that
105:16 - we can
105:17 - go ahead and use let's actually make our
105:20 - back end
105:21 - connected to pusher so let's go ahead
105:25 - and copy this code
105:27 - to the terminal and
105:30 - so i'm selecting the back end and i will
105:33 - be installing
105:34 - uh with the node package manager
105:38 - and and i will be just installing pusher
105:42 - right so that goes ahead downloads the
105:44 - dependency
105:47 - and here we go with a snap here we go
105:51 - so let's go back to our server.js file
105:56 - and let's actually go up here
105:59 - and inside of app config you just want
106:01 - to go ahead and uh
106:03 - paste this you want to change the bar to
106:05 - const
106:06 - always and use const always
106:09 - until you need let and
106:12 - you also want to go ahead and import
106:15 - pusher with a capital p
106:18 - from pusher right
106:21 - make sure make sure guys to import
106:24 - everything you install if you don't
106:25 - import it it's gonna
106:26 - throw an error of undefined so make sure
106:28 - to import every library or every third
106:30 - party
106:31 - you install in your project do not ever
106:33 - forget that
106:34 - that's correct all right now we just
106:37 - created our
106:38 - uh pusher instance and with that done
106:41 - let's go down here to db config here we
106:45 - go
106:46 - and what you want to go ahead and do is
106:48 - say mango
106:50 - oops angus the connection
106:54 - and once
106:59 - open fire off a function
107:02 - which will go ahead and console.log that
107:06 - db is connected now what this does
107:09 - essentially
107:09 - is pretty much once the mongoose
107:11 - connection is open it will fire this
107:13 - uh console log off right this is how
107:17 - how to easily translate it okay
107:21 - let's go and
107:24 - say uh so inside of here this is where
107:28 - the other part will come
107:30 - so pusher.trigger is actually going to
107:32 - be coming a bit later
107:33 - let's first create our change stream
107:35 - which is going to be a
107:36 - const change stream
107:40 - equals mongoose
107:47 - yeah mongoose the connection
107:50 - the collection and let's see
107:53 - how we named our uh file
107:57 - or our collection it's going to be
107:59 - conversations
108:00 - so let's go back to uh server.js
108:05 - and boom let's paste it in there
108:08 - and let's say watch so that we'll pretty
108:11 - much go ahead and watch
108:13 - all the way uh into our
108:17 - collection and it will alert us
108:20 - every single time when something is
108:23 - going on or something
108:24 - is happening in the uh database
108:28 - next up what we want to do is say
108:32 - so whenever something happens and
108:34 - whenever some
108:35 - whenever this change stream gets fired
108:38 - off
108:39 - that is so let's say
108:43 - so chain stream on change you want to go
108:46 - ahead
108:46 - fire off this function which will be
108:50 - a couple of if uh if statement
108:53 - statements right so there is three
108:56 - possibilities
108:56 - one of them is going to be a new channel
109:00 - second is going to be a new message and
109:02 - the third if
109:04 - is something else which is just um
109:06 - messing the whole thing up
109:07 - that's when we want to handle the error
109:09 - and just throw the whole thing away
109:12 - now uh so when
109:15 - there is a new uh channel
109:18 - then the operation type is going to be
109:20 - insert because we are inserting a new
109:24 - uh document right so
109:27 - all the conversations are stored in one
109:30 - document
109:31 - okay so one channel one document when we
109:34 - are creating a new channel it's a new
109:36 - document
109:37 - right so the operation type is going to
109:40 - be insert
109:41 - and then we trigger off pusher
109:44 - uh we will create a
109:47 - pusher channel and
109:51 - we will give this a give this an event
109:54 - which is going to be new
109:56 - channel and we're just going to go ahead
109:59 - and
109:59 - upload the change and just don't worry
110:01 - about it we just
110:02 - let's focus for on the value and we will
110:05 - actually drop a video on how to set it
110:08 - up
110:08 - properly this is a good a working
110:12 - mvp solution and you can actually use
110:15 - this
110:15 - in production environment next up you
110:18 - want to go
110:19 - and say else if the
110:24 - uh as if the operation type is
110:27 - update then you want to uh trigger
110:30 - the conversations uh pusher channel
110:34 - with a new message event then
110:37 - uh also upload the whole
110:41 - upload the whole change and if something
110:44 - else happens then just error triggering
110:45 - pusher and there we go
110:47 - now that was uh that was it for the
110:50 - background basically yes
110:51 - sorry sorry to interrupt that so we are
110:54 - just checking for all the cases which
110:55 - might make changes into our database
110:57 - that's it what that's all we are doing
110:59 - we have three cases the first cases
111:01 - checks that if we are adding a new
111:02 - channel
111:03 - and if you are adding a new channel
111:04 - that's gonna be a change in your backend
111:06 - the second thing is gonna be what else
111:07 - we can do is we can uh
111:09 - text a new message so that's what we are
111:12 - checking at the
111:13 - in the second condition the third
111:14 - condition is just if something goes
111:16 - wrong and it does
111:17 - it does uh crash or something like that
111:19 - in the application and if see if we see
111:21 - that
111:21 - uh if there are different kinds of
111:23 - changes that are happening in database
111:24 - and if
111:25 - we make sure about all the changes that
111:27 - can happen then we can tell the pusher
111:29 - to update and to refresh the page so
111:31 - that we can see the changes
111:33 - in real time that's what we are doing
111:35 - right now that is correct
111:37 - all right let's go back and finish this
111:40 - up hard
111:41 - we are done with the back end let's go
111:44 - to our front end and we will need to
111:49 - subscribe to this uh pusher channel
111:53 - in the sidebar.js as well as the
111:56 - chat.js files now what you guys want to
111:59 - do
112:00 - is come up here first you will need to
112:04 - install the pusher uh as a dependency on
112:08 - the back end
112:09 - as well uh sorry front end
112:12 - so what you want to do is type in here
112:15 - mpmi
112:16 - pusher dash js so on front end
112:19 - it's pusher.js on backend is just simply
112:22 - pusher
112:23 - next up uh it's going to
112:26 - run through quickly hopefully
112:30 - and make sure to install pusher in
112:32 - backend and front end both of them it's
112:34 - not just
112:34 - in back end you have to install it you
112:36 - have to install in front and as well
112:37 - because
112:38 - it's going to be connecting the backend
112:40 - and the front end in real time
112:41 - that is cool so make sure to install it
112:44 - that's right
112:45 - all right now what you want to do on the
112:47 - front end is pretty much
112:49 - uh just go ahead and copy
112:53 - uh the this code and we will do it
112:57 - actually twice
112:58 - uh so let's actually first import the
113:01 - dependency
113:03 - right and so import uh
113:07 - cap pusher with a capital so pusher
113:10 - um equals
113:15 - oh no no from pusher it has js
113:18 - yeah there we go and
113:22 - next up you want to paste this code here
113:24 - uh change the word
113:25 - const here we go oops here we go
113:30 - and now what you want to do
113:34 - is copy literally that line of code go
113:37 - into that one
113:38 - use effect and come inside of here
113:42 - uh yeah and what you want to do is
113:46 - literally just
113:47 - paste this in here say uh const instead
113:51 - of
113:51 - war and
113:55 - let me quickly get this snippet of code
113:58 - yeah nice uh so what you want to do
114:01 - is you want to fire this off once and in
114:04 - instead of alerting you want to go ahead
114:07 - and say
114:08 - the uh you want to go ahead and get the
114:10 - channels
114:11 - again that will pretty much uh make
114:14 - the channel creation in real time let's
114:16 - go ahead and test this
114:18 - out so i go into youtube nice okay i hit
114:21 - the plus
114:22 - button and it should actually be working
114:25 - real time so let's actually say
114:28 - uh real time
114:32 - fans hmm sounds cool boom
114:37 - and
114:41 - nothing happened
114:45 - something's not cool
114:48 - i love that song okay
114:51 - let's see what's going on so
114:55 - let's go ahead and say okay so this is
114:58 - gonna be a
114:59 - test no yeah it's gonna be a test
115:03 - and on the pusher debug console it
115:06 - doesn't even show
115:07 - up for some reason
115:12 - so there is some kind of issue in the
115:14 - back end
115:16 - so let's say we got the change stream
115:21 - set up all good uh let's
115:24 - see if there is a change so
115:28 - lights and this sounds yeah dude
115:31 - so let's add a console log in here
115:34 - let's debug this stuff and
115:38 - okay so some
115:41 - change and whenever
115:45 - we are inserting we want to go ahead and
115:47 - say console.log
115:48 - it's going to be a new channel
115:51 - and if we are inserting a message we are
115:54 - going to be typing
115:56 - console logging new message
116:01 - okay so let's see it
116:04 - on the back end nice so we go back here
116:09 - and say another test
116:13 - and say okay let's go to our back end
116:16 - and nothing is happening
116:20 - that's crazy so the database is
116:24 - connected
116:24 - we can see that so before that it
116:28 - wasn't connecting so it's actually
116:30 - something that i just added
116:31 - that's good uh next up i think
116:35 - there is something going on in with um
116:40 - within our chain stream because that
116:43 - doesn't even
116:43 - fire off so let me quickly check it out
116:50 - so are we actually watching the
116:54 - good uh
116:58 - yeah you're not using the demo link
116:59 - right what's up
117:02 - you're not using the demo link right
117:04 - well no no
117:06 - no no no it actually should be all
117:08 - perfect
117:10 - yeah okay so
117:13 - we got the database nice let's actually
117:16 - see if it
117:17 - uh goes down into the database
117:20 - refresh it actually should be
117:25 - oh hold on
117:29 - so there is some other stuff not going
117:31 - to the database yeah it's not even going
117:33 - to the database so
117:34 - it's actually a step behind before that
117:38 - let's see what is going on in here
117:43 - oh my god i forgot to change
117:47 - that that part of the code
117:51 - when we are creating a new channel
117:54 - guys this is as real world as it gets
117:57 - um people are forgetful things happen
118:01 - usually you're gonna go ahead and debug
118:03 - it and um
118:04 - here we go what's up and if you are
118:07 - running into an error
118:08 - if you are running into errors guys i
118:10 - think that's a good thing you are going
118:11 - to learn a lot of this that's not going
118:13 - to work for you so you won't make that
118:14 - mistake again so don't
118:16 - don't worry if you run into errors
118:18 - exactly exactly all you need to
118:20 - do if you run into an error is go ahead
118:22 - debug it and then you will essentially
118:23 - find out
118:24 - what's up so now that i actually added
118:28 - this uh axios post new channel with the
118:31 - channel name
118:33 - uh we should be good to go so
118:37 - let's change back the background and now
118:41 - hopefully hopefully
118:44 - let's see how we go so
118:48 - let's say real time fans
118:52 - boom
118:55 - and again hold on okay
118:59 - debug console okay uh new channel
119:02 - created
119:05 - um yeah real time fans that's cool
119:10 - so there is some kind of issue going on
119:13 - in the front end now
119:17 - let's go back to debug mode all right
119:21 - let's go back all right
119:24 - okay so what i forgot to do is
119:28 - the uh channel subscription of course
119:32 - yeah it's a forgetful day i forgot to
119:34 - change the screens i forgot to
119:36 - add end points it happens guys it is it
119:40 - because of me
119:41 - it could be it actually could be
119:45 - so what we will have instead of uh
119:49 - instead of the my event and my channel
119:52 - you literally have to go ahead and
119:53 - uh subscribe to the channel's channel
119:56 - that uh push your channel
119:58 - and the new channel uh
120:01 - evened now it really should be working
120:05 - okay exactly yeah it is working
120:09 - it should yeah that way better okay you
120:14 - youtube live
120:18 - okay that's it okay and there
120:22 - we go
120:27 - finally all right let's not make these
120:30 - mistakes again
120:31 - let's go ahead and make the chat real
120:34 - time as well
120:35 - and now we should be finishing up the
120:38 - project in like
120:39 - less than 10 minutes okay guys bear with
120:42 - me
120:43 - we are close to the end all right
120:46 - so next up what we will be doing is
120:48 - going to chat.js
120:50 - let's first check the endpoints and the
120:53 - api requests
120:55 - so we have we changed the
120:58 - uh get conversation and the save new
121:01 - message
121:02 - that's a good that's good sign next up
121:04 - what we want to do
121:06 - is go to pusher uh and
121:09 - grab the code
121:12 - grab the code from here and you wanna go
121:15 - ahead
121:15 - i'm not chatting ah eight times
121:22 - you want to go to pusher.com and
121:25 - grab this part this code and go up here
121:29 - import pusher import pusher
121:32 - from pusher.js
121:36 - add this here change the word const nice
121:40 - and last but not least
121:44 - grab this part of the code and
121:47 - go to the use effect say we
121:50 - added here change the vortice const
121:54 - again and let's not forget about
121:58 - the uh pusher channel and the pusher
122:02 - event
122:03 - so the pusher channel is conversation
122:07 - and the event is going to be new
122:11 - message so
122:15 - now it really should be real time and
122:17 - the whole thing should be working so
122:19 - let's go ahead create the last and the
122:22 - master channel or or the main one
122:25 - or actually let's call it general
122:29 - yeah here we go let's select that
122:32 - there is no uh conversation going on in
122:35 - here and just say
122:37 - hey guys who enjoyed
122:40 - today's build oops
122:46 - and add some fire emojis
122:52 - what is happening here
122:59 - oh because i the alert
123:03 - nice okay i'm a bit forgetful today
123:11 - let's go ahead test this again general
123:14 - there we go another one
123:18 - yo boom there we go
123:21 - it is working here's real time guys
123:25 - um yeah this
123:28 - is as real word as it gets we are human
123:31 - as well as you guys are so
123:35 - this is just actually it's a good
123:37 - demonstration that
123:38 - we are making mistakes as well
123:41 - even with a prepare even after a
123:44 - preparation
123:45 - a whole day long preparation we are
123:48 - making mistakes so guys
123:49 - if you are running into bugs there is a
123:52 - no
123:53 - way that you should uh give up
123:56 - no reason for that completely no reason
123:59 - for that
124:00 - um what you always want to do is try to
124:03 - debug it
124:03 - add as much console logs as possible so
124:06 - that you know
124:08 - where your process actually stops and
124:11 - where you should start
124:12 - looking for the the issue right that's
124:14 - what i did
124:16 - uh i went back i tried to debug it step
124:18 - by step
124:19 - backwards right so i i tested if the
124:22 - change stream actually gets
124:24 - uh fired off if it goes to pusher
124:27 - if it if the pusher actually gets
124:29 - triggered or something
124:31 - then i actually figured out that it's
124:33 - not even on
124:34 - pusher it's not even on the back end
124:36 - it's actually a step before
124:38 - the first step uh
124:41 - so this is actually on the front end
124:43 - it's not even getting saved into the
124:45 - database right
124:46 - so i actually i want this to be as a key
124:48 - takeaway for you guys
124:50 - if you are uh go uh if you're
124:54 - failing to compile the application for
124:56 - the 700th time it's completely fine
124:58 - okay i want you want everybody to know
125:01 - that it's completely fine
125:02 - just go ahead debug it try to figure how
125:05 - uh
125:05 - things work and if and let's actually
125:08 - get on calls with others because
125:10 - usually what happens is that i'm coding
125:13 - with rishi a lot
125:14 - uh like pair programming and i'm like
125:16 - making a mistake and i just can't debug
125:18 - what what the hell is going on
125:20 - and he just comes in here and just like
125:22 - yo that's the issue
125:25 - all right exactly so that's literally
125:28 - how it
125:29 - uh how it happens all right
125:32 - yeah as lucy i think debugging is one of
125:34 - the most important part of coding that
125:36 - you really want to master exactly
125:40 - that is right so as lucy says
125:43 - always happens in the real life that is
125:46 - right
125:47 - okay um i think that
125:50 - will be it uh for today's build
125:54 - uh guys if you enjoy enjoyed it smash
125:57 - the like button
125:58 - hit the subscribe button click the bell
126:00 - uh next to it and rishi do you got
126:02 - anything else to add
126:06 - uh no thank you so much guys for staying
126:08 - tuned and let us know in the comments if
126:10 - you guys have any questions and we will
126:12 - try
126:12 - to and if you wanna if you want us to
126:15 - build some amazing
126:16 - streams let us know in the comments what
126:17 - kind of streams you want to build
126:19 - and we will work on that and we will
126:20 - build that for you guys exactly
126:22 - so that was an amazing session from
126:24 - david thank you so much david for your
126:26 - time and guys
126:27 - if you have any special requests for
126:29 - building
126:30 - this is my instagram tag and oh
126:33 - sorry that is rishi's
126:40 - yeah so that that is rishi's and let's
126:43 - actually go ahead and hit us up
126:45 - send us messages what you guys want us
126:48 - to build for you so that you can get the
126:51 - most value out of it
126:53 - so send us dms let's hop on uh cause and
126:56 - let's talk
126:58 - and yeah amazon clone
127:01 - please there you go brother we will have
127:03 - it soon
127:04 - okay with that said thank you so much
127:07 - guys for joining today
127:09 - and we will see you in the next
127:12 - video in the next video alright