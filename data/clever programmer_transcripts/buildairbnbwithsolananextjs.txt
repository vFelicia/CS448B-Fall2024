00:00 - airbnb on salon
00:02 - let me know if this sounds like you
00:03 - you're a developer who wants to get into
00:05 - web3 and you have no idea where to start
00:07 - well i hear you guys and i'm on this
00:09 - coding journey with you and today i have
00:11 - the perfect build for you to get started
00:13 - today we'll be making airbnb web 3.0 dap
00:16 - with next.js on the solana blockchain
00:20 - i'll walk you through how you can create
00:21 - your very own smart contract on the
00:24 - salon chain using anker which is just a
00:26 - framework of rust we'll then show you
00:28 - how you can take that data and store it
00:30 - on chain think of it as a database that
00:32 - is fully decentralized we'll use quick
00:35 - node as our rpc node provider to access
00:37 - the blockchain i'll then show you guys
00:39 - solana playground which you can use to
00:40 - create deploy and more importantly test
00:43 - your functions of your smart contract so
00:45 - that you can understand how it all works
00:48 - we'll use phantom wallet to authenticate
00:50 - our users and sign them in and we'll use
00:52 - salon explorer to verify that they are
00:54 - 100 real now before we get started make
00:57 - sure you use our cli tool that will
00:59 - provide you so you get the fully built
01:00 - front end so we can focus on the solana
01:03 - blockchain code so that said i'll see
01:05 - you guys in the demo and let's get
01:07 - started all right so let's get started
01:09 - so the first thing you should do is open
01:11 - up that terminal and type the command
01:13 - npx clever programmer at latest
01:17 - this is our cli tool that's going to
01:19 - give you all the files that you need so
01:20 - that we can have the same files and
01:22 - start at the same place and while it's
01:24 - initializing it's gonna help us get
01:26 - signed up for quick note because for
01:28 - this app we need an rpc node provider to
01:31 - connect us directly to the blockchain so
01:34 - while it's initializing we can do that
01:36 - so let's type in that command type in
01:38 - your email address
01:42 - then your name
01:43 - and then select the project you want to
01:45 - initialize and of course it's the solana
01:48 - airbnb
01:49 - awesome so there you go look at that so
01:51 - it takes you directly to this page and
01:53 - if you don't have an account already
01:55 - sign in so you can make use of quick
01:57 - notes free tier so i'm just going to
01:59 - sign in and i'll come back once we get
02:01 - to the same landing page
02:03 - perfect so now that you confirmed your
02:05 - account the next step which is nice and
02:07 - quick to get started is click create an
02:09 - end point
02:10 - and here you'll see all the different
02:12 - chains you'll see ethereum you'll see
02:15 - a polygon you'll also see avalanche on
02:18 - here as well but we're going to be using
02:20 - solana so let's click solana and see the
02:23 - three networks there are three networks
02:25 - mainnet uses your real soul do this if
02:28 - you're sure you want to develop on there
02:30 - for us and learning purposes we'll be
02:32 - using the devnet
02:34 - okay so let's hit continue and then
02:36 - click create endpoint and voila it's
02:39 - done that's all you have to do to get
02:41 - started all you need to do next is take
02:43 - this http provider and hit copy and
02:46 - we'll save it for later so
02:48 - by the time you finish signing up you
02:50 - should have
02:51 - vs code open right it opens that up
02:53 - automatically for you guys with our cli
02:55 - tool so we can do what we can do is hit
02:59 - control or command j
03:02 - cd to the front end folder
03:04 - and hit yarn
03:06 - dev
03:07 - once you do that you can also press
03:08 - control click
03:11 - and there we go
03:13 - awesome so you can see this is the
03:15 - static version of the airbnb it's
03:17 - different from the demo right because
03:19 - there's no wallet connection as you see
03:21 - here and there there's just static data
03:24 - right here how do i know it's static
03:26 - well let me show you why it's that
03:27 - because if i were to delete this and
03:29 - then refresh
03:31 - it's back right because it's static data
03:32 - that it's just set up right it's not
03:34 - actually being saved that it was deleted
03:37 - right what's what's the point of this
03:39 - lens well our goal is to take this
03:42 - front end with static data and use the
03:45 - data that's stored on chain and learn
03:46 - about it okay and don't worry i'll break
03:48 - down the app with you guys because that
03:50 - is the main focus
03:52 - so i know you haven't seen what the code
03:54 - looks like and a lot of this is set up
03:56 - for you already so
03:58 - if you're a beginner watch this part and
04:00 - if you're a little bit more advanced
04:01 - feel free to skip ahead when i start
04:03 - coding okay so
04:05 - welcome my beginners let's head over to
04:08 - this fancy whiteboard and let's figure
04:10 - out what we want to do with this app
04:12 - okay so one thing you'll notice is it's
04:16 - not connected with phantom like i
04:17 - mentioned before
04:19 - so that will be our first step so let's
04:20 - write that down as pseudocode okay
04:23 - so our first step together guys it's
04:24 - gonna be
04:26 - set up phantom
04:29 - connection right phantom is a wallet
04:32 - which holds all your soul that we can
04:34 - use to authenticate the users that log
04:36 - in
04:37 - okay
04:38 - what's the next thing we want to do well
04:40 - let's think about the app right this is
04:43 - a essentially a crud app create
04:46 - read
04:46 - update delete right so we want to be
04:49 - able to add a listing right don't worry
04:52 - about how this works just yet just know
04:54 - that we want a function
04:56 - that will add a listing
04:58 - on the salon chain right because this is
05:00 - just going to add it to our local
05:03 - environment and not anywhere else
05:05 - okay so let's write that here
05:11 - create
05:13 - solana program and i'm going to use the
05:15 - words contract and program
05:17 - interchangeably just know that's the
05:19 - same thing okay
05:20 - so create salon program and for the
05:22 - functions it should be add listing right
05:26 - we also want to and let me say create
05:28 - listing so it's more sense create
05:30 - listing
05:31 - we want to
05:33 - uh
05:34 - fetch listing right read
05:36 - list things right
05:39 - fetch
05:40 - listings
05:41 - and what do i mean by fetch well with
05:43 - fetch
05:44 - if you look this is essentially an array
05:47 - of objects that i'm mapping through and
05:49 - displaying right what we want to do
05:50 - instead is fetch the accounts
05:54 - from solana
05:55 - right and then map through them fetch
05:57 - listings
05:58 - right
05:59 - from there we want to
06:01 - update
06:02 - listings
06:04 - right
06:05 - what do i mean by update if you go back
06:07 - to the demo right we can edit this and
06:09 - change every aspect of it we should
06:11 - still be able to do that on solana on
06:14 - chain
06:15 - okay
06:16 - from there
06:17 - we can also
06:18 - delete listings right
06:21 - since we're going to be creating
06:23 - accounts on chain we can also close the
06:25 - account and that will be considered
06:28 - deleting right
06:29 - cool
06:30 - so this is our goals so let's
06:33 - talk about how this app works and
06:36 - usually when i talk about how an app
06:37 - works i think about the tree or the
06:40 - parent child relationship between
06:42 - components
06:43 - okay
06:44 - so
06:45 - what we can do is let's just bring it
06:48 - over here
06:49 - and bring the code over here
06:52 - okay we're going to share some real
06:53 - estate right so if you open up front end
06:55 - right the first thing you'll notice is
06:57 - on the folder pages that there is app
07:00 - right and maybe we could just make this
07:01 - bigger for now
07:04 - first thing that you'll notice is that
07:05 - there's an app.js
07:07 - and it holds all of this right it has a
07:10 - head which the title and then this
07:12 - component right this component right
07:15 - here
07:17 - right is actually the index.js all right
07:20 - so what do i mean by this i mean that
07:23 - there is a parent called app
07:26 - all right there is a
07:28 - app
07:31 - all right and inside of app
07:34 - it has a child
07:35 - and here it says component but that is
07:38 - the index
07:39 - okay sorry for the terrible drawing but
07:42 - i'll make it look nice in a second right
07:43 - so that's the index okay so how do i see
07:46 - what's inside of the index
07:49 - right how do i see what's inside of this
07:51 - component well i could just click the
07:53 - index.js here so within the index
07:56 - there's a bunch of different code here
07:58 - right it might be overwhelming but let's
08:00 - just look at what's important right
08:02 - there is
08:03 - components within the index component
08:06 - right so that means the index has
08:07 - children
08:09 - so let's go through together what
08:11 - children does it have so let's clear out
08:12 - all this
08:13 - and give me a second to organize my
08:16 - files
08:19 - amazing okay cool
08:21 - so we got our app right here and let's
08:24 - just build out that tree here so we all
08:26 - understand what i mean
08:28 - okay so what do we know we know that we
08:30 - have an app right here
08:34 - app
08:35 - we also know that it has a child
08:38 - called index
08:43 - index okay so now let's go to it
08:45 - together and figure out what is the
08:47 - children of index right so a child of
08:49 - the index component would be another set
08:51 - of components right so let's see if you
08:54 - guys can see the first component so
08:56 - these are functions
08:58 - all right scrolling
08:59 - all right
09:00 - is this a component right
09:04 - not necessarily right it has something
09:06 - within it called airbnb clone that's the
09:09 - title okay but is this a component
09:12 - yes it is
09:14 - it is a component called what
09:17 - header
09:18 - awesome you got it so if it's a
09:19 - component called header oops let's undo
09:21 - that
09:22 - i can draw a line right here and say hey
09:25 - index has a component or a child
09:28 - component
09:29 - called
09:30 - header
09:32 - right and you might ask
09:33 - what does header header do right so in
09:36 - order to understand what header does all
09:38 - right let's look at the app right this
09:39 - is what it looks like
09:40 - look what happens if i comment out that
09:42 - header
09:43 - boom all right what did we lose we lost
09:47 - we lost that little area right here that
09:50 - held our phantom connection right
09:53 - then that's the header of a normal app
09:55 - so if we comment out the header
09:56 - component we lose the header make sense
09:59 - cool
10:01 - awesome
10:03 - okay
10:04 - so we got that out of the way figure
10:05 - that out next is the filter menu right
10:09 - what's the filter menu is that a
10:11 - component
10:12 - yes
10:13 - yes sir so that is a component so we'll
10:15 - do right here
10:18 - wheel right
10:19 - filter
10:21 - filter menu
10:24 - nice okay this isn't too bad right guys
10:26 - so we have the filter menu and at the
10:28 - moment i'll tell you the filter menu
10:30 - isn't that important for what we're
10:31 - going to do but it's good to note down
10:34 - awesome
10:36 - okay the next thing that's a component
10:38 - is listings oops
10:41 - listings
10:44 - lists
10:46 - all right and i'll move a little bit
10:48 - faster this is all modals right what do
10:51 - you think this ad listing model means
10:54 - well
10:55 - if i click add listing
10:57 - this component right here is the add
10:59 - listing mode right if i click
11:01 - this pencil icon from the listing i get
11:04 - the edit listing model and if i click
11:06 - this heart icon i get the reserve
11:09 - listing model right they all exist in
11:12 - the index right but when does it show it
11:15 - only shows
11:17 - right
11:18 - when this is clicked right so there's a
11:20 - function that's toggling this on and on
11:23 - on and off and i keep the modals here so
11:26 - what i'll do to simplify this is
11:28 - there's a picture there's a bunch of
11:30 - children right but i'll just label it as
11:32 - one
11:33 - all the modals right
11:36 - so i'll tell you right now which ones
11:37 - are the important ones all right the
11:39 - important ones which i'll mark in blue
11:41 - is going to be
11:43 - the header
11:46 - right the header
11:48 - the listings and the all the modals
11:51 - right that's where the functionality is
11:52 - going to live
11:53 - right
11:54 - and a good question asked is do any of
11:57 - these components have children
11:59 - well if you look let's see if oops let's
12:03 - see if
12:05 - add listing modal has children so let's
12:09 - find that go to components
12:11 - go to listing go to add listing model
12:14 - if you look
12:15 - they have
12:17 - no no real components just a transition
12:20 - right which is not that important for
12:22 - you to learn at the moment but what you
12:24 - do need to know
12:25 - is that the listings component right
12:27 - this one right here
12:29 - that has a child right because
12:32 - for every
12:33 - airbnb listing we want to map through it
12:36 - and create a listing
12:39 - item right so
12:41 - if i were to draw this relationship
12:43 - right there could be
12:44 - multiple
12:46 - right
12:47 - and actually this would be multiple two
12:49 - multiple
12:50 - multiple
12:51 - listing
12:53 - items right these are all these squares
12:55 - are listing items right so if i asked
12:57 - you guys
12:59 - on airbnb right
13:01 - how many listing items do you see
13:03 - right i tell you one two
13:06 - three four
13:08 - okay
13:09 - [Music]
13:10 - so that is the tree of our app right so
13:14 - what we want to do for step one oops
13:17 - for step one is set up a phantom wallet
13:20 - connection all right so where do you
13:22 - think i'll need to focus on to do that
13:25 - right if i'm gonna make a phantom wall
13:27 - connection
13:28 - do i need to look at the filter menu no
13:32 - do i need to look at the listings maybe
13:35 - right but if i want to ensure that i'm
13:37 - connected throughout my whole app
13:39 - right i should look
13:41 - right here right phantom wallet
13:43 - connection should go right here
13:45 - okay
13:47 - so with that in mind
13:50 - let's minimize this
13:52 - and if we go to the pages
13:56 - and then go to the app
13:57 - this is where we want to set up that
14:00 - wallet
14:01 - provider right the wallet connection
14:03 - provider okay but at the moment we don't
14:05 - have a wallet connection provider so
14:07 - let's go ahead and set that up
14:09 - so to give our app some context of what
14:12 - a wallet connection provider is what i'm
14:14 - gonna do i'm going to do is create a new
14:17 - folder and let's call it context
14:20 - okay
14:21 - and once we have a new folder called
14:23 - context within the context folder i'm
14:26 - going to make a new file and i'm going
14:27 - to call it wallet
14:29 - connection
14:30 - provider dot js this is what you're
14:33 - going to need to do to set up that
14:34 - wallet connection right
14:36 - and once you're there let's import a
14:38 - couple things we're going to say import
14:42 - connection
14:43 - oops not connection connection provider
14:47 - from solana wallet adapter react so i
14:49 - press tab so that's automatically
14:51 - imported
14:52 - oops
14:55 - how's this guys can you see that
14:56 - cool so after that you can do wallet
14:59 - provider all right we got connection
15:01 - provider we got wall provider and then
15:07 - let's import
15:10 - wallet
15:11 - modal provider as well and this is going
15:14 - to come from the react ui
15:16 - yep this one salon solana wall adapter
15:19 - react ui
15:20 - okay and then
15:22 - what wall are we going to be using we're
15:24 - going to be using the phantom wallet
15:26 - so i'm just going to say
15:30 - phantom
15:32 - wallet
15:34 - adapter
15:35 - and this is from
15:38 - at solana
15:40 - wall adapter wallets perfect
15:43 - okay and the last thing we're gonna do
15:44 - is let's import
15:46 - uh use memo
15:49 - okay cool
15:51 - right so we did a lot of imports but we
15:53 - don't have the provider itself so let's
15:55 - set it up by saying const wallet
15:58 - wallet
15:59 - connection provider
16:02 - is equal to
16:06 - boom all right so this is our provider
16:09 - which we will then bring back to our app
16:13 - right and wrap our entire index with
16:16 - that provider right if you don't
16:17 - understand what i mean just set just
16:18 - bear with me
16:21 - so we have our wallet connection
16:22 - provider we will then need an end point
16:25 - right and another thing
16:26 - is in the parenthesis here let's add
16:29 - children it's going to take in children
16:31 - cool
16:34 - all right so insider provider let's set
16:36 - up our endpoint so let's say const end
16:39 - point
16:40 - is equal to
16:41 - use
16:42 - memo right so this is a react hook and
16:45 - within this hook it's going to take in
16:48 - an empty or anonymous function right and
16:51 - then you're gonna do comma
16:52 - array
16:54 - all right the key thing about this
16:55 - endpoint is this is where we're gonna
16:58 - write the url of our endpoint and if you
17:01 - remember the keyword here endpoint right
17:03 - we're gonna need you can put our
17:06 - quick node connection here so let's go
17:08 - back to here
17:09 - let's bring this up
17:11 - copy this or if you have a save
17:12 - somewhere
17:13 - bring it back
17:15 - and then in quotes
17:16 - go ahead and paste that over here right
17:19 - and if you don't like how long it looks
17:21 - sometimes what i do
17:22 - is i'll take
17:24 - this
17:30 - cons
17:31 - connection
17:33 - is equal to
17:35 - this right and then
17:37 - you can just pass in connection right
17:39 - here
17:41 - okay that should work
17:43 - and let's just put some space between
17:44 - those
17:46 - awesome
17:48 - all right so that's our endpoint setup
17:50 - all right the next thing we want to do
17:52 - is say const
17:54 - wallets
17:55 - is equal to use memo again all right and
17:58 - then we got to get
17:59 - the wallets that we want to use
18:02 - which in this case is just phantom
18:05 - all right so you can leave the
18:06 - parentheses blank in there and just
18:08 - write
18:09 - new we're going to create a new instance
18:11 - of
18:12 - phantom wallet adapter so we're making
18:14 - use of this right here
18:15 - okay and then
18:17 - you know to call this put parentheses
18:19 - right here and then
18:21 - comma
18:23 - and theory
18:24 - okay so we got our endpoint set up
18:26 - we got the wallet set up
18:28 - and now we just want to put what do we
18:30 - want to do with this provider well we
18:32 - want to return
18:33 - parentheses
18:35 - the connection provider
18:38 - okay
18:40 - and what do we want to do with the
18:42 - connection provider we say
18:44 - endpoint
18:45 - right
18:46 - is equal to
18:48 - endpoint all right so where is this end
18:50 - point coming from we use you use memo to
18:53 - set up and get the connection all right
18:56 - we're going to be doing something with
18:57 - wallets next okay
18:59 - so we said the connection provider if
19:01 - you look at our imports we still haven't
19:03 - used the wallet provider
19:06 - all right so let's use that next let's
19:07 - use a wallet provider
19:11 - okay
19:12 - and in here we're going to pass in a
19:14 - prop that's just going to be wallets
19:16 - is equal to
19:18 - wallets
19:19 - right just like this
19:21 - right exactly the same as this
19:24 - endpoint wallet goes here all right
19:26 - another cool thing we could do is auto
19:28 - connect right if your phantom wallet is
19:30 - already connected just auto connect it
19:32 - if you don't want to do that you want to
19:33 - make it you know manual you don't have
19:35 - to put this line right here
19:37 - cool
19:38 - awesome
19:40 - we also want to provide the modal right
19:43 - so when you click on the connection
19:44 - you'll see like the list of wallets
19:46 - right this is the wallet model provider
19:49 - let's go ahead and add that as well
19:51 - wallet modal provider
19:53 - okay and that is going to take in
19:56 - children
19:57 - all right so now whatever we pass into
19:59 - the provider will be passed into the
20:01 - wallet modal provider as well and
20:05 - next which is last but not least
20:07 - make sure you do this so that it
20:09 - actually exports right you can export
20:11 - default the wallet connection provider
20:14 - all right why do you do this we export
20:16 - it so that we can import it somewhere
20:18 - else and where do you want to import
20:19 - this connection provider
20:21 - if you remember you should import it
20:23 - right here
20:25 - awesome
20:26 - cool so in terms of imports this is
20:28 - already set up kind of for you guys we
20:30 - need to do next is say
20:32 - const
20:34 - wallet connection provider is equal to
20:36 - dynamic right which is coming from this
20:38 - input right here
20:40 - parentheses
20:41 - and then anonymous function
20:43 - and you can say import
20:46 - parentheses
20:47 - quotes
20:48 - dot
20:49 - context all right and why am i going
20:51 - into context because that's where the
20:53 - provider is
20:54 - okay and then in between these two
20:56 - parentheses you can put a comma here and
20:58 - then let's
21:00 - put the scope in with the two curly
21:01 - brackets and just write ssr
21:04 - files
21:05 - perfect
21:07 - all right that should be it
21:08 - now all the way back to that first thing
21:10 - i said we want to wrap our connection
21:12 - provider within the
21:15 - app itself right so what we could do
21:18 - is go in here
21:20 - right underneath head hit enter and type
21:23 - in wallet connection provider
21:25 - and put that component which is our
21:27 - index
21:28 - right in there
21:31 - amazing right so everything in this
21:32 - connection provider
21:35 - is set up from our contacts right here
21:39 - cool so we have that set up
21:41 - now oh look at this so look it already
21:44 - it's already auto connecting and it's
21:46 - asking me to connect my phantom wallet
21:48 - but if you look on our airbnb
21:51 - we haven't set it up on the front end so
21:53 - the connection is working but not on the
21:55 - front end so what do we do well if you
21:57 - don't have phantom already go ahead and
22:00 - type in phantom
22:01 - uh
22:02 - chrome extension
22:04 - [Music]
22:05 - all right and it should take you to this
22:07 - page right here
22:09 - make sure you add the extension so you
22:10 - can have the phantom wallet right here
22:14 - okay
22:15 - awesome
22:16 - once that's done
22:17 - set up your account and you should have
22:19 - a wallet it should look like this and
22:21 - you're gonna need some soul right this
22:23 - isn't real seoul so don't get too
22:25 - excited right when you're on devnet you
22:27 - can do something called soul faucet
22:30 - and get
22:31 - soul or solana tokens that you can use
22:34 - to test your app right so if you want
22:36 - your address right your wallet address
22:38 - click copy clipboard up here
22:41 - and then you want to paste it and for
22:44 - the airdrop i usually put two then you
22:46 - can hit devnet and bam all right we just
22:49 - got instantly two soul tokens that we
22:52 - can use to play with and now instead of
22:54 - 10 i have 12 right so that's how you set
22:57 - up your solana that's how you get some
22:58 - soul right so let's work on the front
23:01 - end part of this so x at this x out this
23:04 - boom
23:06 - all right so if you want to set up the
23:07 - front end portion about this
23:10 - we need to work on the wallet connect
23:13 - button which is going to go right here
23:15 - what component does that live in right
23:17 - is it going to be on listings
23:20 - on
23:21 - index right take a look at this where do
23:22 - you think it's going to be at okay cool
23:24 - if you said header let's go you got it
23:26 - right that's that makes sense it's like
23:27 - intuitive
23:29 - okay
23:31 - so if it's in the header
23:33 - let's see if we're right
23:35 - you can access that let's see if we're
23:36 - right
23:37 - and head over to the header oops
23:40 - okay so if we go to our index
23:43 - right
23:45 - we think it's in the header
23:47 - right and if we go to the header
23:50 - component
23:53 - let's find that button ah there it is
23:56 - okay see this user circle icon this is
23:58 - it right here right if you're never sure
24:01 - about what you're doing go ahead and
24:03 - comment stuff in and out and that's how
24:05 - i do it to learn what app i'm using if i
24:07 - come this out boom
24:09 - notice how it's gone right here right
24:11 - instead
24:12 - of this div we want to replace this
24:15 - with the phantom or just the wallet
24:17 - connect button we get from salon
24:19 - all right so it's it's there
24:21 - and then it's gone see it
24:23 - so what do we need to get this done
24:25 - we'll scroll to the top of header for
24:26 - now
24:27 - and if you look
24:30 - right here we have the wallet multi
24:33 - button that's what we're going to be
24:34 - using for this
24:35 - we're also going to need something else
24:37 - now that i'm thinking about it we need
24:38 - to require
24:41 - at solana wallet adapter react
24:44 - ui
24:47 - styles.css right this is to get the
24:49 - styling of the react router not the
24:52 - react router sorry the solano wallet
24:54 - adapter okay so we're gonna require that
24:57 - right keep this one in mind wallet multi
24:59 - button and let's scroll down
25:02 - what we're going to do next
25:04 - is let's set up the wallet multi button
25:05 - so the wallet multi button
25:07 - we're going to take that import and just
25:08 - say wallet multi button
25:11 - okay and i already have styling for this
25:15 - so we can just do
25:17 - class name is equal to phantom
25:21 - button
25:22 - right
25:23 - and then uh there's also an icon that i
25:26 - have with it let me see if i have it
25:27 - still
25:29 - right okay cool so then we can do
25:30 - something like this start
25:32 - icon
25:33 - uh is equal to
25:37 - user
25:38 - circle icon
25:40 - self
25:41 - and the icon is going to have a style
25:45 - and the style is going to be
25:47 - height
25:48 - 32
25:51 - with
25:52 - let's make that 32 as well
25:55 - and the color
25:57 - i have this save for you guys it's going
25:58 - to be hashtag f
26:01 - or
26:03 - 1f2937 that should be it
26:06 - and let's just test this out by saying
26:09 - span
26:11 - connect
26:14 - okay let's just see what that looks like
26:15 - so far
26:18 - okay
26:19 - all right hey there it is you can see
26:21 - the connect wallet but the styling is a
26:23 - little off so let's fix that
26:25 - okay
26:27 - so in our span let's go ahead and give
26:29 - it a class name
26:31 - and for the class name we can do text
26:33 - small
26:35 - font
26:37 - medium
26:39 - medium
26:41 - text
26:42 - black
26:43 - okay let's see if this helps
26:47 - there you go that looks way better i can
26:49 - actually see it now
26:50 - um i think it's missing a little
26:53 - something
26:54 - actually i think that's fine for now so
26:56 - what we want to do next is let's click
26:57 - on the button and look at that it all
26:59 - works the functionality we didn't have
27:01 - to do anything we just had to set it up
27:04 - right
27:04 - cool so if i click phantom
27:07 - bam right i clicked on it i'm connected
27:10 - i know it doesn't look like i'm
27:11 - connected right but there's a way to
27:13 - test it
27:14 - okay so what we could do to prove it to
27:16 - you that i'm connected is head over back
27:18 - to this right here and i want to talk
27:20 - about something
27:22 - really quick
27:23 - so
27:24 - you're going to notice that i'm passing
27:25 - down something called connected here
27:28 - this is what we call props and react and
27:30 - assuming you know what props are where
27:32 - is this connected uh variable coming
27:34 - from
27:35 - right well if you don't know where it's
27:37 - coming from go to the parent right so
27:39 - who's the parent of header the if you
27:41 - know it from our zip board
27:43 - the parent of header
27:45 - is the index so let's go back to the
27:47 - index so back in the index
27:50 - you can see it right here i'm directly
27:52 - passing connected to that header
27:55 - okay
27:57 - so
27:58 - what that means is
28:00 - what is connected right let's find out
28:02 - what that is so if i do control f type
28:04 - in connected
28:05 - boom boom boom boom oh i saw it
28:08 - there we have something saying connected
28:11 - is equal to true right so if we are
28:15 - connected right
28:17 - i should see this connect wallet button
28:19 - change to something else i want it to
28:22 - actually just say my address so my
28:24 - address is like this 8t something
28:26 - okay so let's keep this static for now
28:29 - and then let's go back to header
28:30 - [Music]
28:32 - right so how do i set up that condition
28:34 - then if we're connected don't show me
28:37 - connect wallet show me something else
28:39 - right so let's do that real quick what
28:41 - we can do right here is turn this
28:45 - into
28:46 - a template literally by making this an
28:48 - object
28:49 - right and that's actually not template
28:51 - literal just make put curly brackets
28:52 - around this right
28:54 - so what we want to do next is put this
28:56 - in quotes
28:58 - boom it still should be the same thing
29:01 - but now let's set up something called
29:02 - conditional rendering and say
29:05 - if we're connected right if connected is
29:07 - true
29:09 - which is
29:10 - it is question mark
29:13 - right
29:14 - we're going to show
29:16 - uh
29:19 - a t dot dot dot this is my
29:22 - address right a static version of my
29:24 - address
29:25 - and then put colon here
29:27 - and then quotes all right so what did i
29:28 - do with this line let's do alt z can you
29:30 - guys see that better cool so what did i
29:32 - do i put curly brackets around the text
29:35 - and i say if connected is true
29:38 - show me my address
29:40 - if connected is not true show me connect
29:43 - wallet boy so what kind of gonna hit
29:45 - save here
29:46 - boom
29:48 - i look at that oops
29:50 - you see it shows me my wallet connection
29:54 - right here right
29:55 - so
29:57 - my wall address is atkz right it's not
30:00 - the full address
30:01 - right it's just whatever static thing i
30:03 - wrote
30:04 - so let's go back to this i'm not sure
30:05 - what this is
30:09 - i think i opened up the svg all right
30:11 - perfect
30:13 - cool so i can literally make this
30:14 - anything i can say
30:16 - lol all right so now i'm connected
30:19 - that's what it looks like if i hit
30:20 - disconnect and then we do something like
30:23 - this oh yeah connected is still true all
30:25 - right so even though it disconnected
30:28 - right it's still going to say lol so let
30:29 - me just connect it real quick
30:31 - but if i change the connection to false
30:34 - right which we set up
30:35 - believe over here
30:37 - [Music]
30:39 - then it's back to connect wall you see
30:41 - that
30:42 - cool
30:43 - so we need to make this dynamic and we
30:46 - also
30:48 - want to change this svg here here
30:51 - not this svg sorry we also want to
30:53 - change this
30:54 - to our actual address and how do we do
30:56 - that well we have something called
30:58 - truncate all right truncate is
31:00 - essentially a function that's going to
31:02 - take my public key
31:04 - and make it to something more readable
31:06 - so if i do this to string
31:08 - oh there you go
31:10 - there you go so it's undefined right and
31:11 - i know it's undefined because
31:13 - what is public key right you can't do a
31:16 - public key of undefined
31:18 - and public key is something i'm passing
31:20 - down already but it's not
31:22 - it doesn't exist if i go to index
31:25 - i go to header there's no public key
31:27 - right there's not even a public key
31:30 - anywhere here right no results
31:32 - right so how do i make public key exist
31:34 - well that's where
31:36 - we can do something called use wallet
31:39 - all right so let's go over here we don't
31:40 - want the static connected right we want
31:42 - a dynamic one so we want to
31:45 - check the connection of our app right
31:47 - there is actually a hook that does that
31:49 - for us already so let's do this
31:51 - use wallet right and if you see we need
31:54 - to import use wallet from solana wallet
31:58 - adapter react so again we don't have to
31:59 - write any logic right solano wallet
32:02 - adapter has logic we just got to plug it
32:04 - in
32:05 - so say const and i'll separate this so
32:07 - it's easier
32:09 - say const
32:10 - object or curly braces right because
32:12 - this is deconstructing
32:14 - and then use wallet right so this is the
32:17 - hook what do we want from use wallet we
32:19 - can
32:20 - break it down by saying we want
32:21 - connected and public key right so what
32:24 - does connected do
32:26 - connected will let us know
32:29 - if we have a wallet connected or not so
32:31 - remember how we had true or false we
32:33 - don't need to write that anymore it will
32:34 - just automatically check if there's a
32:36 - wall connected
32:37 - public key
32:39 - is our wallet address right so when
32:41 - we're connected
32:42 - we have access
32:44 - to our wallet address right so it's
32:46 - going to know it's 8t right so anytime
32:48 - you see public key
32:50 - that's going to be the public address of
32:52 - my wallet so
32:54 - now when i pass down connected it's not
32:57 - true or false that variable it's from
32:59 - the hook
33:00 - another thing that we want to do since
33:02 - we're here is add that public key so we
33:05 - can say public
33:07 - key is equal to
33:09 - public
33:10 - key so now it shouldn't be undefined if
33:12 - i hit save
33:14 - let's go right take a look at this guys
33:17 - that is our wallet address it should
33:20 - look different from you if you have a
33:22 - different address right so let's connect
33:23 - wallet boom we're connected there's our
33:25 - address we disconnect it's gone right
33:27 - and it's dynamic because if i switch to
33:29 - wallet number two hit connect
33:33 - i gotta log into wallet number two
33:35 - bam it's 4a now
33:37 - there you go
33:38 - you have your phantom connection
33:41 - and now you made it dynamic to whatever
33:43 - user so essentially you the user can log
33:45 - in to the app how is that amazing so we
33:48 - have our phantom wallet connection set
33:50 - up so what's next so if we take a look
33:52 - at our plan you'll notice that the next
33:54 - thing we need to do is actually set up
33:56 - the solana program itself so if you want
33:58 - to get started doing that the cool part
34:00 - is we won't have to code on vs code for
34:02 - a while we can actually
34:05 - go to this website so let me make this
34:07 - bigger and let's go ahead and write beta
34:10 - that's sol dot pg.io this is called
34:13 - solana playground right if you're coming
34:15 - from solidity if you heard of remix at
34:17 - all this is essentially the remix for
34:20 - solana what does that all mean it means
34:22 - right you can go into here and create a
34:25 - solana project you can
34:27 - build and deploy through here and you
34:30 - can test all your functions right
34:33 - so what we're going to do is we're going
34:34 - to create a new project
34:36 - all right and we can call this
34:38 - airbnb solana
34:41 - and another cool thing it's just new we
34:43 - can also it has sea horse support which
34:46 - means we can write python with solano
34:48 - and we might do a video
34:49 - about that soon so drop a comment below
34:51 - if you want to see us do a python video
34:53 - with solana that would be really fun so
34:56 - uh we're going to be using anchor so
34:58 - let's hit create
34:59 - and now we have this right here so what
35:02 - i'm going to do is make sure we build on
35:04 - this boom build successful
35:06 - yep yep cool so this is essentially the
35:09 - starter files for our project okay so
35:12 - what i'm going to do next
35:14 - is go to files and i'm actually going to
35:17 - just delete everything because i want to
35:18 - start us from bare bones scratch right
35:20 - we gave you a lot of the front end i'm
35:22 - going to give you i'm not going to give
35:24 - you any of the anchor code right we're
35:27 - going to build this from scratch
35:28 - together how does that sound good all
35:30 - right so if you're with me
35:31 - let's get started now before we get too
35:33 - excited writing salona code what we want
35:36 - to do first is we need to save the
35:38 - changes we made so far right we did a
35:40 - lot of phantom stuff so open up your vs
35:42 - code and if you did a git push right
35:45 - you'll notice that it says for me
35:47 - everything up to date but for you guys
35:49 - you're not going to have permission
35:50 - right so let's make our very own repo to
35:53 - save your changes right and i'll walk
35:55 - you guys through
35:56 - so go ahead make a new tab and head over
35:58 - to github.com
36:00 - and there's multiple different ways of
36:01 - creating repositories use get kraken or
36:04 - whatever third party app you have
36:06 - i'm going to go ahead and click new
36:08 - repository right and from here we can
36:10 - say uh solana
36:13 - airbnb all right
36:16 - cool oh i already have one we can do
36:19 - airbnb salon
36:22 - there you go cool and then you can make
36:24 - this public or private but let's just
36:26 - not click anything else and click create
36:28 - repository if you do it that way you'll
36:30 - see right that github
36:33 - tells you exactly how to create a new
36:35 - repository right but we're going to do
36:37 - something a little bit different than
36:38 - these steps right here
36:40 - cool
36:41 - so going back to your vs code
36:43 - right this
36:45 - is already a repo right the cli starter
36:47 - branch is coming from another repo how
36:50 - do we make this your own well all you
36:52 - have to do is say git remote set
36:56 - url
36:57 - origin and then let's copy this link
37:01 - right here okay
37:03 - so i'm going to bring this back
37:05 - then let's paste that and let's hit
37:07 - enter boom all right so from here we can
37:11 - say get status right and notice how it
37:14 - has the context because we added that
37:16 - and
37:17 - we can just do a git add dot and if we
37:20 - do get status again now it's going to be
37:22 - green right the package.json is red
37:25 - because if you do a cd dot dot then do a
37:28 - git add
37:29 - let's check it out boom so now it's all
37:31 - green that's a good sign we can do next
37:34 - is a git
37:35 - commit
37:36 - m
37:37 - initialized
37:39 - our own repo right you can put whatever
37:42 - comment i'm gonna hit that and if we do
37:44 - a get push all right it's gonna push
37:47 - to our new
37:49 - repo if i refresh this
37:51 - bam there we go right so you can push to
37:54 - your own repo now without changing any
37:56 - of our files right and you can see over
37:59 - here that it's that david right who
38:01 - helped me work on the last app is still
38:03 - a contributor as well okay so now you
38:05 - can save your code and anytime you make
38:08 - a new change i encourage you to push
38:10 - those changes on github
38:13 - okay so that's my quick github lesson
38:15 - the reason why i did this guys because i
38:16 - want to show you guys that we can deploy
38:17 - our app and make it live right so today
38:21 - we're going to be using digital ocean
38:24 - so there's going to be a link in the
38:25 - description i go ahead and click that
38:27 - link so it makes the signup process a
38:29 - lot quicker so that link should take you
38:32 - to this beautiful landing page made by
38:34 - our friends at digitalocean and if you
38:35 - use that link we get a hundred dollars
38:37 - to learn with digitalocean okay so go
38:40 - ahead and sign up and create a free
38:42 - account i recommend you use github
38:44 - because it'd be a lot faster
38:47 - boom so i signed up through github and
38:49 - once you have everything set up
38:52 - for digitalocean go ahead and click apps
38:55 - and this is what we're gonna need to do
38:56 - right here
38:58 - so what is digitalocean digitalocean is
39:00 - infrastructure as a service what does
39:02 - that mean well this web page hosts
39:05 - multiple servers that we as developers
39:08 - can use for ourselves right one of the
39:10 - use cases that we're going to be using
39:11 - today is creating a static server live
39:16 - app right you can also connect it to a
39:18 - database right you can use kubernetes
39:21 - and then we can also create an app of
39:23 - course
39:25 - so click create an app you'll see create
39:28 - resource from source code i want to
39:30 - click github so click on that and
39:33 - wherever you want to use
39:35 - the next thing i want to do is find my
39:37 - airbnb solana which is going to be this
39:40 - one cool and this is the branch and this
39:44 - is the source directory right so this is
39:46 - one is important right what's the source
39:47 - directory it should be the directory of
39:49 - the front end
39:51 - right so what you want to type in is
39:52 - slash
39:53 - frontend right here okay and the cool
39:56 - part about digital ocean is that it has
39:57 - an auto deployed feature so remember i
39:59 - said every time you make an update you
40:01 - want to push those changes
40:02 - every time you push those changes auto
40:04 - deploy will redeploy your app so that's
40:07 - always the latest version and it's
40:08 - synced with this repo all right so
40:11 - that's super awesome go ahead and hit
40:13 - next all right
40:14 - go ahead and hit next
40:16 - next
40:17 - next
40:18 - right we don't have any environmental
40:20 - variables set up just yet right so we
40:22 - can just click create resources
40:26 - and let's see here's everything else
40:29 - all right cool
40:31 - awesome so our app is called c linin uh
40:34 - you're free to change it
40:35 - as soon as it's done to whatever url
40:38 - name that you want for this project and
40:40 - from there we're just gonna let it build
40:45 - all right so the build is complete now
40:47 - what we could do is click on the live
40:49 - app
40:51 - and there we go all right this is live
40:53 - you can take this link and i always say
40:55 - you could share with your friends you
40:56 - could put on your portfolio and at the
40:59 - current moment you can only connect your
41:02 - wallet and that works so cool so anytime
41:04 - you push changes to your repo your live
41:06 - link should be up to date so
41:09 - that's it for a live link let's get back
41:12 - to solana playground
41:14 - okay so moving on we're back at the
41:16 - lib.rs and to get started what i want
41:19 - you guys to do is type in the word use
41:23 - right the reason why i'm typing in use
41:25 - is this is the way on anchor to
41:28 - import right so you know import from
41:30 - javascript use right is to get anchor
41:35 - lang if you don't know what anchor lang
41:36 - is it's a library
41:38 - for anchor right and we want to get
41:40 - certain things from this library or
41:41 - crate sometimes it's called right so we
41:43 - want to do
41:44 - we want to get something specific from
41:46 - anchor length so within anchor lang i
41:49 - want something called prelude
41:51 - okay
41:52 - and then you could if you go
41:54 - colon colon think of this as going
41:56 - inside a folder right first
41:58 - it's airbnb solana and inside we go to
42:01 - the front end and inside we go to
42:03 - index.js right so within prelude right
42:06 - if i do a star here we want everything
42:08 - within a prelude as well
42:11 - awesome so that's our first import that
42:13 - we'll do for now we want to do is type
42:15 - in a semicolon here if you didn't know
42:18 - unlike javascript
42:19 - right we need to put semicolon
42:21 - semicolons here to indicate the end of
42:24 - the line otherwise we get an error okay
42:27 - cool
42:29 - awesome and then from there we can do a
42:31 - hashtag
42:33 - square brackets
42:34 - program right this is essentially
42:37 - a macro which is going to define what a
42:39 - program is so what you write underneath
42:42 - underneath this directly underneath this
42:44 - is the program so from there we can say
42:46 - pub
42:47 - mod
42:48 - clever
42:50 - underscore airbnb right and if you put
42:52 - curly brackets right here
42:54 - this is the scope
42:56 - of our program
42:58 - okay so
43:00 - if you guys are with me you're in good
43:02 - spot
43:03 - all right the next thing i want to do uh
43:05 - in between these two things let's
43:06 - declare id oops declare
43:12 - underscore id and then put exclamation
43:14 - point and then put parentheses
43:17 - okay so
43:18 - every program
43:20 - has a unique key right represents the
43:23 - address of that program right that's
43:25 - where it is on the blockchain right and
43:28 - solana playground will generate you a
43:31 - program id if you click this toolbar
43:34 - right here on the left hand side
43:35 - click copy and then you can just paste
43:38 - that there that's your program id it's
43:39 - going to be different from mine of
43:41 - course so if i hit build
43:44 - oh yeah i just mentioned if you need a
43:46 - semicolon here
43:48 - hit build
43:49 - it should say build successful right so
43:51 - that means this is a
43:54 - valid program right if i ask you does
43:56 - this do anything at the moment it does
43:58 - absolutely nothing because there is
44:00 - nothing right so let's make it do
44:02 - something right let's give it
44:03 - functionality okay so what we can do is
44:07 - we can say pub
44:09 - fn right fn is function right in
44:12 - javascript to make a function i would
44:14 - write something like this function uh
44:17 - add user right it looks it would look
44:20 - something like this
44:21 - right for rust or with anchor you can
44:24 - say pub fn and then the name
44:27 - initialize user all right then you put
44:30 - parentheses
44:32 - right and then you can do
44:34 - this
44:35 - an arrow and write in results
44:39 - like so
44:41 - and there you go cool so this entire
44:43 - thing is a function right
44:46 - okay so don't mind that what we can do
44:48 - next is
44:51 - all right so don't mind the error it'll
44:52 - fix itself in a second what we do care
44:55 - about is this function right here so
44:57 - this is initializing a user right
45:01 - basically what we want to do with this
45:03 - program is create accounts or create a
45:06 - pda right so
45:08 - just temporarily we want to
45:11 - create
45:12 - a pda all right you might ask what is a
45:17 - pda well pda stands for
45:20 - a profile
45:22 - derived
45:23 - account right
45:25 - essentially right we want to create
45:27 - accounts
45:29 - right or pdas pdas are essentially
45:31 - accounts
45:32 - created from the solana program
45:36 - right and we could do this to hold
45:39 - certain amount of data i'm simplifying
45:41 - this but what kind of a what kind of
45:44 - account do you think initialize user
45:47 - should create right
45:48 - initialize user
45:51 - user oops
45:55 - should create
45:58 - a
45:59 - user account
46:02 - with default data
46:04 - okay
46:05 - so
46:06 - what we want to do is have this program
46:08 - create a user account which stores all
46:11 - of our user information okay cool
46:14 - so in order to create a pda we have to
46:17 - give it some context so what we could do
46:21 - is pass in context as a parameter right
46:24 - so i have to write is ctx
46:26 - okay if i was going to add two numbers
46:28 - it could be like num1 num2 right this
46:30 - should look familiar
46:31 - in this case we're going to do ctx
46:34 - right and with anchor you need to
46:35 - specify the type what kind of what type
46:38 - is
46:39 - ctx looking for well it's going to look
46:40 - for
46:41 - context
46:42 - right and this is a struct in anchor
46:45 - right and the type of context it's going
46:48 - to be
46:49 - initialize
46:51 - user right to understand what i mean by
46:53 - this is i'll ask you this does
46:55 - initialize user exists anywhere on our
46:57 - app
46:58 - no it does not right
47:01 - so that means we're going to have to
47:02 - create it later on so usually when we
47:04 - create a function this is the pattern we
47:07 - create the function
47:08 - it's going to take in a context and the
47:11 - context usually has a similar name to
47:14 - the function we created okay so we're
47:16 - going to hit pause on the function right
47:18 - and we're going to move on to creating
47:20 - some struct so at the end of your scope
47:23 - down here let's create the
47:26 - initialize user struct okay
47:30 - so to create a pda right
47:32 - create
47:34 - the context right
47:38 - all right what we want to do is do
47:39 - hashtag
47:41 - derive
47:42 - parentheses accounts
47:44 - right so again similar to program right
47:46 - in this case
47:48 - what you right underneath this macro
47:50 - right here is going to be the pda or the
47:53 - the context right so we can say pub
47:56 - struct and then this right here this
47:58 - name
48:00 - pubstruck initialize
48:02 - user right and then you're just going to
48:04 - write
48:05 - info
48:06 - okay
48:07 - after writing that you can put curly
48:09 - brackets right here and then you can do
48:11 - hashtag
48:12 - account
48:14 - mute right making this mutable meaning
48:17 - this can change right what can change
48:19 - whatever i put underneath here so
48:21 - the authority right what does the
48:23 - authority represent
48:25 - whenever you're working with solana
48:28 - and you make a transaction
48:31 - phantom will open up and ask you to
48:33 - approve
48:35 - that transaction right so if i want to
48:36 - send money to someone you have to
48:38 - approve the transaction because you have
48:41 - the authority right so
48:43 - here when i say pub authority
48:46 - what kind of type should expect it's
48:48 - going to expect a signer
48:50 - right
48:51 - and the signer is one of the things that
48:53 - come from the anchor lang anchor prelude
48:56 - right so this we don't have to create
48:59 - okay
48:59 - and it's going to be mutable because the
49:01 - authority is going to depend on the user
49:04 - it's not one static thing
49:06 - okay
49:07 - so now for the actual creation of the
49:09 - account itself
49:11 - okay so to create the account we can say
49:13 - hashtag
49:16 - brackets count
49:18 - knit oops and actually say enter here
49:20 - it's going to take in a couple things
49:22 - now it's going to be init right if you
49:24 - write this anchor automatically
49:27 - initialize an account for you so we
49:28 - don't have to set any of that up what
49:30 - you do need to set up is the seeds
49:33 - all right
49:34 - you can think of seeds as a variable
49:37 - that will create a unique hash or
49:40 - address for your pda
49:42 - okay but for now uh it takes in strings
49:46 - right but i'm going to write something
49:47 - here it's going to say user tag
49:50 - right which is going to be a string but
49:52 - it's the variable holding the string but
49:55 - pause that for now it's also going to
49:57 - take our authority
49:59 - dot key
50:00 - right dot as
50:02 - reference okay
50:05 - cool and then from there uh we're gonna
50:07 - write bump
50:09 - okay so when you're ever you're this
50:10 - will make more sense later but let's say
50:12 - that hash exists
50:14 - bump will just go to the next available
50:17 - hash
50:18 - okay
50:19 - cool so who's paying for storing this
50:22 - data right or running this transaction
50:24 - it should be the authority right who's
50:26 - ever the owner of this user should pay
50:29 - for it
50:30 - the next thing that the account is going
50:32 - to need is the space right because with
50:35 - anchor
50:36 - or just solana and rust in general they
50:38 - care about how exactly how much space
50:40 - does it take right it needs to know so
50:44 - to figure out how much space it takes or
50:45 - you got to think of what
50:47 - does the user need to hold right so if
50:50 - you're thinking about what a user needs
50:51 - to hold i'm thinking that it needs to
50:53 - have
50:54 - store its authority
50:56 - its
50:57 - last airbnb and how many airbnbs does it
51:01 - have right so if i were to
51:03 - show you guys what an object would look
51:05 - like right so let's say
51:06 - user one is equal to object
51:10 - and now let's see if i can make this
51:13 - oops
51:18 - okay let's make it like this right user
51:21 - one has a key of
51:24 - the authority right
51:26 - and it's gonna and then the authority is
51:28 - going to equal
51:29 - uh 8t right this is my account
51:34 - from
51:34 - phantom right
51:36 - it's also going to have the last
51:40 - airbnb
51:41 - right which i'll say is zero
51:43 - right and then it's also going to have
51:45 - uh airbnb count think of airbnb count as
51:48 - the total amount of airbnbs
51:50 - and that should start at zero right
51:54 - each of these things are going to take
51:56 - different space depending on the type
51:59 - right so
52:00 - this right here this authority is going
52:02 - to be type public key and a public key
52:05 - is going to take up 32 bytes usually
52:07 - this u8 we can say that it's going to it
52:10 - can just be one
52:12 - right same thing with this this can also
52:15 - is a u8 an unsigned integer eight bytes
52:18 - you can just say one
52:20 - okay
52:20 - so in terms of space it's essentially
52:24 - 32
52:26 - plus one
52:27 - oops
52:29 - plus one
52:30 - plus one
52:31 - right
52:32 - plus
52:33 - eight right the reason why i'm doing
52:35 - plus eight here is because there's
52:36 - something called an account
52:38 - discriminator
52:39 - that is gonna be
52:41 - added right to essentially make space
52:43 - between this account and the next
52:44 - account right so when i say plus eight
52:46 - this is what it means
52:48 - okay
52:49 - cool so that's how much space it takes
52:51 - up don't worry if this makes much sense
52:53 - yet but we're gonna be doing it over and
52:55 - over until you get the pattern
52:56 - got it cool
52:58 - so that's it for the space in terms of
53:02 - this account right here and remember
53:03 - underneath it is um all this information
53:06 - is going to go so this is going to be
53:08 - the what we'll call the user profile
53:11 - right and the user profile
53:13 - it's going to expect a type of box
53:16 - which is holding an account right which
53:18 - is what we're creating
53:19 - and that account is going to have info
53:22 - comma
53:24 - user
53:25 - profile okay
53:27 - awesome and then
53:29 - account is something from anchor lang
53:30 - and so is it box right but user profile
53:34 - right is an actual struct that we need
53:36 - to create it doesn't exist yet either
53:39 - right
53:40 - so let's follow this pattern right so
53:41 - initialize user
53:43 - it's a context the context of what
53:45 - initialize initializing a user is is
53:48 - that it will have an authority and
53:50 - that's going to have a user profile but
53:52 - then we need to perform define what the
53:54 - hell is a user profile right so we need
53:56 - to create this later as well
53:59 - okay
54:01 - cool and then we could say pub
54:03 - system
54:04 - program
54:05 - and then we could say
54:07 - uh program right this is built in
54:09 - you're gonna you're gonna write this
54:11 - over and over for the other context
54:12 - again so it's gonna be info and then
54:15 - system
54:17 - perfect
54:18 - okay cool so we finished the context
54:21 - uh if i were to run this it would fail
54:22 - because user profile it's not going to
54:25 - know what that is right so to define
54:28 - what a user profile is we can actually
54:29 - make that struct here
54:31 - all right pub struct and then you can
54:33 - say user profile right or right we can
54:36 - make another file right we don't have to
54:38 - put everything in one file or else it
54:40 - could get really bloated right so what
54:42 - i'll do is create a new file
54:45 - and then
54:46 - you can go over here and call this one
54:48 - states
54:51 - okay
54:52 - and within this stage we also want to
54:54 - import anchor lang
54:57 - prelude
54:59 - and we'll get the star cool
55:01 - semicolon
55:02 - awesome
55:04 - all right so what did we do we defined
55:06 - the context for initializing user
55:09 - uh we then need to define what that
55:11 - account looks like so let's define the
55:13 - user account right so to define an
55:15 - account we're gonna say an account
55:17 - right and we're gonna
55:19 - do hashtag
55:20 - derive default right
55:24 - okay
55:26 - then underneath we're gonna say pub
55:28 - struct
55:29 - user
55:30 - profile
55:32 - cool
55:33 - awesome and then remember what i said
55:34 - it's going to take in an authority
55:37 - right and what's the type of authority
55:39 - that it will spec it's going to be a
55:40 - public key
55:42 - uh it's also going to take in a last
55:44 - airbnb
55:46 - which will be an unsigned integer eight
55:49 - right and then also gonna be air b and b
55:52 - oops count
55:53 - u eight
55:56 - okay cool and remember just so you
55:58 - remember how much space each type takes
56:00 - right i can write it right here so this
56:02 - is 32 this should be one and this should
56:06 - be
56:06 - one as well right so that's where i'm
56:08 - getting those numbers well so this is
56:10 - the account for a user this is the user
56:13 - account
56:14 - okay
56:15 - uh here's a question
56:17 - if i would run this it would still fail
56:20 - right it's still gonna fail because why
56:22 - right does user profile exist on this
56:27 - page it does not right so how do we make
56:30 - it exist on this page right
56:32 - think of this import right here right so
56:34 - what we want to do is say pub mod states
56:38 - right and then we'll say use right
56:40 - here's use again create
56:45 - and we'll say
56:46 - states colon colon
56:48 - stop right basically what i'm saying
56:50 - with this is
56:51 - get me everything oops everything
56:55 - from states
56:57 - right so what's in states all of this
56:59 - give me all of it right and bring it
57:01 - to
57:02 - this scope right here so that means i
57:04 - can call a user profile in here in the
57:07 - scope
57:08 - okay
57:10 - we will need to do one more thing right
57:12 - you can erase this and what we can write
57:16 - is
57:18 - use
57:20 - super
57:22 - colon colon star
57:24 - semicolon right what the hell did i just
57:26 - do remember how i said this
57:29 - brings states to this scope right use
57:33 - super takes anything from this scope
57:36 - into the program scope so i can refer to
57:40 - user profile
57:41 - as normal
57:42 - okay so it should know that this exists
57:46 - okay
57:47 - cool so to make sure it's still there
57:49 - states
57:51 - awesome
57:52 - all right and if i were to run this
57:53 - it'll still give me an error because
57:55 - this user tag here it was going to say
57:57 - what the hell is user tag and like i
58:00 - said uh this is a variable that's going
58:03 - to hold in a string right so the seeds
58:06 - that it takes in to generate that hash
58:08 - is going to be a string
58:10 - and then my public key essentially right
58:13 - so
58:14 - let's
58:15 - define this variable right so you can
58:17 - say like something like
58:19 - a const
58:21 - user tag right
58:23 - is equal to right and then define it
58:24 - here but just to keep in with our
58:27 - pattern
58:28 - we can make another file so i'm going to
58:30 - do that as well
58:32 - and i'll call this constant.rs
58:36 - so now i have constant rs and what i'll
58:38 - do next it should be
58:40 - anchor lang prelude right anchor
58:43 - blank colon
58:45 - prelude chrome colon star
58:47 - boom
58:48 - and
58:50 - okay
58:52 - all right so here we can define our
58:54 - constants right
58:55 - so
58:56 - and again there's nothing wrong with
58:57 - putting it all in one file right i'm
58:59 - just showing you guys that you can
59:01 - separate it so i'll say constant here
59:03 - and then we could say pub const
59:06 - user tag
59:08 - right
59:09 - and then we can reference itself as a u8
59:13 - is equal to
59:16 - the string
59:17 - user state right
59:21 - cool
59:24 - all right so now we have user tag and
59:26 - that state set up
59:29 - in the file called constant
59:31 - and then
59:32 - we are need to get the constant so the
59:35 - pubmod constant
59:39 - okay and then here we can write
59:42 - a constant
59:44 - constant homecoming star parentheses all
59:47 - right and use super we'll take that from
59:50 - this scope and bring it into this scope
59:52 - cool so it should know what user tag is
59:54 - and it shouldn't give us an error
59:57 - okay cool so last but not least on the
59:59 - function before we write any logic
60:01 - usually in a function we need a return
60:03 - if you write okay here
60:05 - think of that as a return in javascript
60:08 - right let's say i wanted to return the
60:09 - number five you would put that right
60:11 - here uh if i leave it blank it's not
60:13 - returning anything it's just gonna run
60:14 - the logic and then be like okay done
60:17 - all right so if i hit build uh there
60:20 - shouldn't be any errors now
60:22 - awesome so this means the build is
60:24 - successful
60:26 - right
60:26 - we're only gonna get warnings warnings
60:28 - aren't bad right if you see something
60:30 - like a warning it just says unused
60:32 - variable ctx right because that's true
60:34 - it's just like you know hey uh you put
60:36 - this here but you aren't using it so
60:39 - don't worry about warnings right it's
60:41 - errors that um really matter
60:44 - so we have the initialize user set up
60:47 - now let's just write the logic for it
60:49 - okay so all the setup is done let's
60:51 - write the logic of initializing the user
60:54 - right
60:55 - and again if you want remember we want
60:57 - to initialize
60:59 - the user
61:00 - profile account
61:03 - with default data right if you go back
61:06 - to your states here
61:08 - this doesn't have any values associated
61:10 - with it it's just an authority it's
61:11 - expecting a pub key it's just expecting
61:14 - a number right but doesn't have a value
61:17 - so what number should it start with
61:20 - right how many
61:21 - airbnb should each user have at the
61:23 - beginning it should have zero all right
61:25 - so if it has zero let's get that
61:28 - information and set it up okay so first
61:31 - thing we got to do is say a variable let
61:34 - right user underscore profile right
61:36 - nothing too crazy this is just one
61:38 - variable and we can set that variable
61:40 - equal to
61:42 - and
61:43 - mute right so this mute here is saying
61:46 - that this variable can change uh
61:48 - depending on the user profile right when
61:51 - javascript
61:52 - all right when i make a video let uh num
61:55 - equal one right if i wanted to redefine
61:58 - the value for this i can say num is
62:00 - equal to nine right if i did this in
62:03 - rust
62:04 - right it would say i would give an error
62:06 - because i'm not allowed to change this
62:09 - right i can change it or make it mutable
62:11 - by writing mute
62:13 - okay and then i can say ctx what is ctx
62:16 - right if i were to console.log ctx if i
62:18 - could do that anchor
62:20 - i would see
62:21 - um this initialize
62:24 - user
62:25 - context right
62:27 - cool well what do i want from that if i
62:29 - do
62:29 - dot account
62:31 - right and then do
62:32 - dot now let's look in here
62:35 - if i do dot user profile
62:38 - then i should see in the object itself
62:41 - right the user struct
62:43 - so i can say user underscore
62:45 - profile there we go cool so when i say
62:48 - user profile i essentially get this
62:50 - struct or this account or if your
62:53 - javascript this object
62:54 - okay
62:56 - so if
62:58 - um
62:59 - user
63:01 - profile is giving me an object right i'm
63:03 - thinking i'm saying object because i'm
63:04 - thinking javascript how can i get the
63:08 - total amount of airbnb's right what do i
63:10 - write
63:11 - after this to get the airbnb count if
63:14 - you remember dot notation all you have
63:16 - to do is just write dot
63:17 - airbnb
63:19 - count right and what do you want to
63:21 - initialize that count to be right if
63:23 - you're just making a user how many
63:25 - airbnbs should they have they should
63:27 - have
63:28 - zero and there we go okay from there
63:31 - let's just do the rest of them so i'll
63:32 - say user
63:34 - profile
63:36 - dot authority is equal to
63:38 - ctx
63:40 - dot counts right i'm getting this again
63:43 - right and i want to get my authority
63:46 - here right and remember this the pub
63:48 - authority we can call on that so if i
63:50 - say dot authority
63:53 - all right i can get the key by calling
63:55 - the built-in method here key
63:57 - okay and set that equal to
64:00 - this
64:01 - key right cool this stays the same right
64:03 - but we can also add user profile
64:07 - dot what what else is we're missing
64:09 - all right i need his last airbnb
64:12 - right so the last airbnb is gonna be
64:14 - last
64:14 - airbnb equal to zero as well
64:19 - okay
64:20 - awesome and guess what guys that's it
64:22 - for initializing a user so what can we
64:24 - do next well let's hit bill let's hope
64:26 - for no errors
64:28 - hey build successful right
64:31 - it doesn't look like there's any unused
64:32 - variable either so let me just refresh
64:34 - this to show you guys
64:36 - right clean terminal
64:38 - hit build successful not even any
64:41 - warnings so super clean code all right
64:43 - now the cool part the reason why we're
64:45 - on salon playground is oh is that we can
64:48 - build but we can also deploy right what
64:50 - does deploy mean it means i'm gonna take
64:52 - this program
64:54 - or this smart contract and deploy it
64:57 - on the solana blockchain right and
64:59 - whenever we deploy it on chain we can
65:01 - then
65:02 - get this program by its address and then
65:05 - call any of the functions towards it so
65:07 - let's deploy it right and when you
65:08 - deploy you're gonna it's gonna ask you
65:10 - to connect to your solana playground
65:12 - wallet so that's gonna be uh on this
65:14 - left hand corner here so click on that
65:16 - to connect your playground wallet if you
65:19 - hit deploy and it says you don't have
65:20 - enough solana what you could do is click
65:24 - this wallet
65:25 - click this right here and click airdrop
65:27 - and this will help you get solana sole
65:30 - right so there it is i got two sold just
65:32 - now all right so do that
65:34 - to get enough salon to deploy the
65:35 - contract you shouldn't need much to
65:37 - deploy since it's not that big yet cool
65:39 - so not only that i got two sole the
65:41 - deployment was also a success which
65:43 - means if you hit this cool test tube
65:45 - here we can see
65:47 - the user right and another thing right
65:50 - it's reading so basically salon
65:51 - playground is reading the the program
65:54 - and saying oh here are all your
65:55 - functions
65:57 - and here are all the accounts you set up
65:59 - which makes sense right we have a user
66:01 - profile account and initialize the user
66:03 - all right so did this program create any
66:06 - users
66:07 - at the moment let's click fetch all
66:09 - and you can see it's fetching all the
66:11 - user accounts and you'll see an array
66:13 - empty because we didn't create any
66:15 - accounts
66:16 - our function right here initialize user
66:18 - should create an account right so let's
66:20 - go ahead and test this function works
66:22 - and maybe you'll understand a lot better
66:24 - after we test it so
66:26 - the authority remember the authority is
66:27 - expecting a public key right here and
66:29 - it's also the signer right so that
66:31 - should be your address
66:33 - your playground wallet address or your
66:36 - phantom wallet address
66:38 - so you're just going to click that drop
66:39 - down click my address and you're good to
66:41 - go
66:42 - now here's the important part for you to
66:44 - understand
66:45 - it also needs a user profile right it
66:48 - needs an address for your pda
66:50 - right
66:51 - at the moment we don't have a place to
66:55 - put that data for the user account right
66:57 - we can get that address or that hash i
67:00 - mean through seeds
67:02 - right so which is user tag which is what
67:04 - guys a string
67:06 - and then your own authority all right so
67:08 - if you click this you want to click from
67:10 - seed right and you want to write in that
67:14 - string so you don't write user tag here
67:16 - this would be wrong what you want to do
67:18 - is type in the value this is a variable
67:22 - right and the variable
67:24 - is going to equal
67:26 - user state so that's what you want to
67:27 - write you want to write user underscore
67:29 - state
67:31 - all right this is important because
67:32 - we're going to do it again later okay so
67:34 - the next seed
67:35 - all right there's one user state string
67:38 - and then the authority which is just
67:40 - going to be copy this and then paste it
67:43 - here and then it'll generate unique hash
67:45 - and this is where that user account uh
67:48 - will be living so if i hit test
67:51 - boom look at that test pass i love
67:53 - seeing that and now if i fetch a user
67:55 - profile
67:57 - there we go this object right here
67:59 - represents a user so how many users do
68:01 - we have guys we have uno right we have
68:03 - one
68:04 - right and you can see how many airbnbs
68:07 - total he has zero what was the index of
68:10 - his last area b
68:11 - zero
68:12 - okay
68:13 - cool and also it has the authority and
68:16 - there's the public key right there so
68:18 - i hope that makes sense to you we're
68:20 - gonna do this over and over again with
68:21 - the functions and hopefully it's gonna
68:23 - stick right so let's work on the next
68:26 - function all right so moving right along
68:28 - let's create our next function which is
68:30 - gonna be adding an airbnb i believe
68:32 - right we wanna add or create an airbnb
68:37 - so let's go back to playground and let's
68:39 - set it up all right so how do we create
68:41 - a function guys
68:42 - well it's gonna be pub
68:44 - fn
68:46 - add airbnb
68:48 - all right it's gonna take in context of
68:50 - course and
68:52 - we can write arrow results
68:55 - like so
68:57 - okay cool so i want to move faster and
69:00 - faster as we do these functions because
69:01 - the pattern is going to be very similar
69:03 - right what is different is the logic
69:05 - here so we want to uh
69:08 - basically
69:09 - initialize an airbnb account
69:13 - with
69:14 - um
69:16 - information
69:17 - [Applause]
69:19 - right what does that mean that means
69:21 - we're gonna take more than context in
69:23 - this uh function right here so what i'll
69:24 - do is i'll press enter
69:26 - and we can also press enter
69:29 - and we can actually leave it like this
69:30 - right so it's gonna take in context it's
69:32 - gonna take a location
69:34 - uh it's gonna take in
69:38 - right
69:39 - it's gonna take in a country right what
69:42 - else goes into an airbnb i look back
69:44 - it's gonna take in price right
69:47 - price and it's going to take in an image
69:50 - url right
69:52 - and we can't forget with rust we need to
69:54 - type in the type
69:56 - and context it's going to be the similar
69:58 - right what's the pattern guys for
70:00 - context it should be the same name as
70:02 - the function most of the time and we can
70:04 - say add airbnb all right does this exist
70:07 - yet nope not yet all right so we have to
70:09 - make it eventually so keep that in mind
70:11 - location uh location when i'm running
70:14 - this function right what should location
70:16 - be should it be a number no it should be
70:19 - a string that's kind of how you want to
70:21 - think about this so same thing with
70:23 - country string right price string right
70:27 - and this is interesting right i'm doing
70:29 - price and i'm doing it as a string right
70:31 - because in our airbnb clone
70:34 - right when i want to add the price i'm
70:36 - inputting it as a string it doesn't have
70:38 - to be a number right if you did want to
70:40 - make a number you can put uh u8 here
70:43 - okay
70:44 - but let's make it a string
70:46 - and for image url we also want this to
70:49 - be a string
70:52 - boom okay so all the parameters are set
70:54 - right we're going to take these
70:55 - parameters later and apply it to our
70:58 - airbnb account but right now we don't
71:00 - have our airbnb account set up right so
71:02 - let's set up the context first let's
71:04 - create the airbnb contacts
71:06 - okay so how do we create the
71:09 - pda context well we need the derived
71:12 - accounts again so we'll derive accounts
71:16 - and then
71:17 - let's see oh yeah we also want to do
71:19 - instruction here this is new
71:21 - we're going to say instruction
71:23 - boom
71:25 - okay cool
71:26 - instruction right make sure i spelled it
71:28 - correctly cool so we got these two
71:30 - macros set up let's write pub struct and
71:33 - then if you remember what i wrote it was
71:35 - add airbnb
71:37 - put in the info
71:40 - right here and then after that curly
71:42 - brackets bam that's the struct for the
71:45 - context
71:46 - and here we're gonna say
71:49 - hash account
71:50 - right
71:52 - and i wanna get the user profile right
71:54 - so
71:55 - here i essentially created or
71:58 - initialized a user account
72:01 - and here i want to
72:03 - use that same user account right so to
72:07 - do that instead of
72:09 - uh saying init right oops init i'm going
72:12 - to say mute right because when i add an
72:15 - airbnb it could be different users i can
72:16 - add airbnb you can add an airbnb cause
72:19 - you can add an airbnb alright so i'll
72:20 - say meat
72:22 - and seeds right so seeds
72:25 - if this is going to be a user profile
72:27 - what seeds
72:29 - do we need
72:30 - to fetch
72:32 - a user right how did we generate this
72:34 - seed well we took in a string right that
72:36 - string was called user tag all right to
72:39 - find that user that we're talking about
72:41 - and we also need to do authority
72:44 - dot key
72:47 - dot as
72:48 - ref
72:49 - okay
72:50 - cool and then we also need to add bump
72:54 - right and then has
72:56 - one authority right
72:59 - who has control
73:01 - over this airbnb it should be one person
73:03 - right kazi shouldn't be able to mess
73:06 - with my airbnb accounts right so we can
73:09 - say has one equals authority
73:11 - okay and then directly underneath this
73:13 - you can write pub
73:15 - user
73:16 - profile
73:17 - which is expecting a box that holds an
73:20 - account
73:22 - right which
73:23 - [Applause]
73:24 - is holding the account of a user
73:27 - profile and that's the account that this
73:29 - box is holding okay that's how you can
73:31 - read it
73:32 - boom okay so we have a user profile
73:35 - right we need this so that we can
73:38 - determine
73:39 - who owns this airbnb right who has
73:42 - authority over it then we need to
73:45 - actually have the airbnb account so if i
73:47 - ask you guys do we have an airbnb
73:49 - account set up
73:51 - right
73:52 - we do not we only have a user profile
73:54 - set up
73:55 - right so how did we create a new account
73:57 - it's gonna be very similar to this so if
74:00 - you get lost keep this in mind
74:02 - okay so
74:03 - again to start we're gonna say hashtag
74:06 - account
74:07 - right and hit enter here
74:08 - and how do we initialize an account with
74:11 - anchor we say init
74:13 - we take in seeds right but is it's not
74:15 - going to take in the user tag this time
74:17 - right
74:18 - the seeds that to make or generate the
74:21 - uh public key of this
74:24 - airbnb account is going to be airbnb tag
74:26 - right another variable right which we'll
74:28 - make later
74:30 - it's also going to take in our authority
74:31 - right so that's the same
74:33 - dot as ref right
74:35 - but what also helps us generate a unique
74:38 - hash will be to put
74:41 - the
74:42 - index of the user right i need to know
74:44 - what was the last
74:46 - index of the airbnb so if this was the
74:50 - first airbnb the last
74:52 - index should be zero right so if i make
74:54 - a second airbnb the last index would be
74:56 - one right so that's going to help us
74:58 - generate a unique one so we don't get
75:00 - the same thing over and over right
75:03 - we're just going to say user
75:05 - profile right we have access to this
75:07 - because we have user profile
75:09 - and then we can get
75:10 - dot last
75:12 - airbnb right
75:15 - and that's it right so that's how we get
75:17 - the unique hash and these are the three
75:19 - seeds that it takes three variables that
75:22 - generate
75:23 - a unique
75:24 - uh hash like this
75:26 - okay
75:27 - from there we just need to write bump
75:30 - and then who pays
75:32 - for the the space or the creation of
75:34 - this account should be the same as the
75:37 - authority and the space right let's look
75:40 - at
75:41 - well we're going to think about what an
75:42 - airbnb account is so we'll come back to
75:43 - space in a second just know that there's
75:45 - going to be an 8 here
75:47 - okay so i can write pub airbnb account
75:52 - that's going to be a box
75:54 - that holds an account
75:59 - right and that account is going to be an
76:01 - airbnb account
76:04 - awesome okay so you'll notice by the way
76:07 - this is the airbnb account that we need
76:09 - to create
76:10 - so what i'll do is let's define what
76:12 - that is so go to states right we're in
76:14 - states now
76:17 - and now that we're in states we can
76:19 - create
76:20 - the airbnb account itself so to do that
76:23 - same thing as a book all right just
76:24 - going to write
76:26 - that this is an account right and it's
76:29 - going to derive
76:32 - default
76:34 - and then we can say pub struct
76:37 - airbnb
76:38 - count right make sure it's spelled
76:40 - exactly the same as you wrote it here
76:42 - okay
76:43 - just want to make sure
76:45 - cool all right so hopefully this will
76:48 - help you understand a little bit more if
76:49 - you didn't understand what the user
76:51 - account was
76:52 - when i have an airbnb account
76:56 - i mean what is the
76:58 - information that describes an airbnb
77:01 - right
77:02 - so
77:03 - let's think about this
77:05 - every airbnb right is going to need a
77:08 - location what's the location of this
77:10 - airbnb and the type of that is going to
77:13 - be a string it should start to look
77:14 - familiar all right what about
77:17 - uh you know where it is
77:19 - right but where
77:21 - is that location located right so you
77:24 - describe that as the country what
77:25 - country is this in
77:26 - all right
77:28 - okay what else do we need well we also
77:30 - need
77:32 - the price right and again this could be
77:33 - an integer but we can also do it as a
77:36 - string okay cool
77:38 - what about um
77:41 - an image yeah it's gonna need an image
77:43 - right
77:44 - cool so image
77:46 - and we can say string as well
77:50 - and we're going to say pub
77:51 - price
77:53 - right and that's going to be a string as
77:54 - well we know it did price already we
77:56 - need one more thing we need location
77:58 - country price image
78:01 - and
78:03 - oh this is another thing that's going to
78:05 - be important later but it's going to be
78:07 - is
78:08 - reserved and usually you write this
78:10 - in snake case but in our front end we
78:13 - have a camel case so
78:15 - i'm gonna write it as that it doesn't
78:16 - have to be written this way
78:18 - right i'm just gonna write it like this
78:20 - cool so this
78:21 - are the keys to our airbnb
78:24 - object right now translate it to us this
78:27 - is a struck and all of this
78:30 - is what makes up that struct okay
78:33 - cool
78:34 - so that's our airbnb account right uh
78:36 - one thing that i do realize that we're
78:38 - missing is we need to keep track of the
78:40 - authority
78:41 - and that's gonna be type public key
78:44 - and we also need to keep track of the
78:46 - index which i'll write as idx
78:49 - okay
78:50 - cool
78:52 - all right so this is it full thing
78:55 - now this should be defined all right so
78:57 - now this exists and now we can work on
79:00 - how much space
79:01 - does this account take up
79:03 - well if we're going to do the same thing
79:04 - here let's think about it pub key it's
79:07 - 32
79:09 - all right
79:10 - index
79:11 - 1
79:13 - location
79:14 - uh is going to be a string
79:17 - this is going to be unique because a
79:18 - string is usually 4
79:20 - plus how long do you expect the string
79:23 - to be right in characters right
79:25 - so i say 256
79:28 - is the max that we can expect
79:30 - and then same thing with country 4 plus
79:34 - 256 then price
79:37 - this could be four plus 256 right
79:41 - again you can make this smaller but just
79:42 - know that if you make the location
79:44 - longer than this many characters or
79:46 - bytes
79:47 - it may fail
79:48 - right for the url it's going to be four
79:50 - plus two
79:52 - thousand and forty eight right because
79:54 - this is the longest url string that you
79:57 - can have
79:58 - okay
79:59 - and now we can do for a boolean usually
80:01 - that's gonna be eight
80:04 - okay
80:05 - cool
80:06 - so all this together it should equal up
80:08 - to
80:10 - [Music]
80:13 - i have it here oh yeah 2
80:17 - 800
80:18 - just couldn't get a quick addition on my
80:20 - calculator on the side but there you go
80:22 - this is how much base it takes up plus
80:25 - the account discriminator that i was
80:27 - talking about
80:28 - okay
80:29 - cool
80:30 - uh one last thing we'll need
80:32 - is
80:33 - the account
80:35 - authority right remember this this is
80:37 - the part that i said you're gonna repeat
80:40 - the authority is gonna be the signer
80:48 - and this is going to be system program
80:52 - program
80:54 - info oh and fro info
80:58 - system
81:00 - boom
81:02 - okay
81:04 - all right and is there anything else
81:06 - that i need
81:08 - no i think that's it oh i just
81:09 - remembered airbnb tag would be undefined
81:12 - here i'm going to go to my constants and
81:14 - let's define that real quick
81:16 - and it's going to be the same thing as
81:18 - above you just do constant
81:20 - pub
81:22 - const
81:23 - air
81:24 - b and b tag right
81:27 - and again you don't have to name this
81:28 - airbnb tag just name it whatever
81:30 - variable you want and it's going to
81:31 - equal
81:32 - a string
81:34 - right that says airbnb state so what do
81:38 - i write when i'm generating a seed i
81:40 - write this string i don't write airbnb
81:43 - tech okay because this is a variable
81:44 - holding the string good
81:46 - awesome
81:48 - okay so now that that's defined
81:50 - shouldn't be any errors but i won't be
81:52 - surprised that there is
81:54 - ah mismatch types
81:56 - god oh i see yeah we didn't even finish
81:58 - the function guys
82:00 - so let's do that real quick
82:01 - yeah so we have all of the we have the
82:04 - structs and the context set up
82:06 - we need to now write the function duh so
82:09 - let me just write the function
82:11 - let's hit enter right here so let's make
82:14 - a variable let's say let airbnb account
82:17 - right so what am i doing with this
82:18 - variable here what do i want to set it
82:19 - equal to
82:21 - think about
82:22 - user profile what did i set that equal
82:24 - to i set it equal to the context and i
82:27 - got the user profile
82:29 - so what i could do with this one is set
82:31 - it equal to the context
82:33 - right and remember this can change so we
82:35 - want to do n mute
82:37 - right and if i do dot accounts
82:39 - now i'm in here
82:42 - right and i want to grab
82:43 - the airbnb account
82:46 - so in the account i can say dot airbnb
82:49 - account
82:51 - okay cool
82:52 - awesome i will also need the user
82:55 - profile
82:56 - and that's because i need to
82:58 - set the index of the rmb as the user
83:02 - profiles last airbnb okay so let's do
83:05 - that let user profile is going to be and
83:08 - mute ctx got accounts
83:12 - let's grab the user profile
83:14 - and now we need to fill the context of
83:17 - the contents of airbnb account with
83:20 - all the arguments here right so
83:23 - if i write airbnb account if i were to
83:26 - console log this in javascript i'd see
83:28 - an object
83:29 - right how do i get the authority i say
83:32 - dot authority right what should i set
83:34 - this equal to i mean to get the actual
83:36 - key or you can say context.counts dot
83:41 - authority
83:43 - dot key
83:46 - right that should work because
83:49 - inside here
83:50 - i can get the authority from this right
83:53 - here
83:53 - and dockey will get it in a format that
83:55 - it likes
83:57 - awesome what's next airbnb account dot
84:00 - index set that equal to user
84:03 - profile right calling this variable
84:05 - and from this object give me it should
84:08 - be the same as his last
84:10 - airbnb
84:13 - okay and then we can do airbnb
84:16 - uh low.count i mean underscore
84:19 - account.location
84:21 - is equal to location right this location
84:24 - is coming from this argument
84:27 - okay airbnb count
84:30 - we need country
84:31 - country and i'm just gonna quickly move
84:34 - through the rest of it this should make
84:36 - sense
84:38 - equal to price
84:40 - uh airbnb account
84:42 - image is equal to image
84:45 - and then we need airbnb
84:47 - count
84:49 - dot is reserved equal to
84:52 - false right notice how i'm not using any
84:54 - of the arguments i know when i first
84:57 - make an airbnb
84:58 - uh it shouldn't be
84:59 - reserved or not it shouldn't be reserved
85:01 - already it should just be false are we
85:03 - done nope not yet because i can set the
85:06 - index to the last airbnb but if i don't
85:08 - change that last argument b it's going
85:09 - to be the same index gonna be zero zero
85:11 - zero zero so let's increment it multiple
85:13 - ways to increase
85:16 - airbnb index for pda right
85:20 - so user
85:22 - profile is another reason why we
85:24 - initialize this user profile dot last
85:27 - airbnb oops
85:32 - is equal to
85:34 - user
85:35 - profile
85:37 - dot last air here b and b
85:42 - right and i'm just hit enter here and
85:44 - say dot checked
85:46 - add
85:47 - right essentially
85:49 - check
85:50 - or increment it right and then dot
85:53 - unwrap
85:54 - unwrap it
85:55 - cool
85:57 - just to simplify what this is doing it's
85:58 - basically
85:59 - setting the last airbnb to be whatever
86:03 - it was
86:04 - plus
86:05 - one
86:06 - we will also need to do this for the
86:08 - total airbnb count right how many
86:10 - airbnbs does this user have right well
86:12 - it's going to be user
86:14 - profile dot airbnb count
86:20 - right is equal to
86:22 - the user profile
86:24 - dot airbnb count right so if he had zero
86:28 - airbnbs after he makes this first one he
86:31 - should also have
86:33 - one as the count
86:34 - all right so we can do dot checked
86:36 - add one
86:38 - and dot
86:39 - unwrap it to get it in the right form
86:42 - cool
86:43 - notice how i can put enter here because
86:45 - the semicolon is what marks the end of
86:47 - the line right and there is check ad but
86:50 - there's also check sub check multiply
86:52 - that we can use later
86:54 - awesome
86:55 - all right from there let's go ahead and
86:58 - write the okay
87:01 - again this is like kind of like a return
87:02 - and let's see if there's any errors got
87:05 - it so it says
87:06 - accounts.authority.key is an unknown
87:08 - field
87:09 - alright so i gotta double check any
87:11 - spelling or missing semicolons that's
87:14 - usually what it is
87:15 - so let's see ah okay so i forgot to
87:19 - define the type of this
87:21 - u8
87:25 - okay and i think it said it had
87:27 - something to do with this
87:30 - this looks good this looks good
87:33 - um is this wrong
87:35 - oh that's good
87:36 - oh a comma right here
87:39 - and then had something wrong with this
87:42 - box count
87:44 - info
87:45 - oh i forgot to close this off
87:48 - there we go always see how this color is
87:50 - off
87:51 - and didn't finish closing off for the
87:54 - box
87:55 - so now let's try let's hit build a build
87:57 - successful and we do get one warning and
87:59 - it's this boolean or mention here right
88:02 - it should be snake case it should and
88:04 - the best practice should be like this is
88:06 - reserved but again
88:08 - uh just for this project i'm gonna do it
88:10 - camel case because when i pull it from
88:12 - the front end i don't have to change
88:13 - anything on my front end
88:15 - okay cool so if you look here right we
88:18 - have the airbnb instruction and the
88:21 - airbnb account but we can't test it just
88:24 - yet because we need to upgrade the build
88:26 - first so you will need some solana to
88:28 - upgrade your build and it's going to
88:29 - cost you more than last time but since
88:31 - we're on the devnet we should be too
88:33 - good to go and in case you're getting
88:35 - any errors uh with phantom
88:37 - right like if you were getting any
88:39 - errors previously with connection
88:41 - go make sure you click settings and make
88:43 - sure you are on the right network should
88:45 - be on devnet not me
88:48 - right
88:48 - because uh this specific playground is
88:52 - also on devnet all right make sure it
88:54 - all matches
88:55 - okay so it's almost done deploying and
88:57 - bam okay so we upgraded our smart
88:59 - contract we didn't make a new deployment
89:01 - right so how many users do we have we
89:04 - have
89:04 - one user how many airbnbs do we have
89:07 - created
89:08 - right we have none right so how do we
89:10 - create an airbnb account well that's
89:13 - what ad airbnb does so let's do this
89:15 - let's do
89:16 - let's make a location let's say space
89:18 - actually no location should be a rocket
89:20 - ship right the country right i'm not
89:23 - going to be traditional let's say space
89:25 - the price 999 and the image so for image
89:28 - let's use unsplash i think i have it
89:31 - saves for spaceship
89:33 - let's use this one right here it's
89:35 - pretty cool they're on mars so back to
89:37 - playground you can literally paste this
89:39 - image here
89:40 - and now this is the context part the
89:43 - accounts right so
89:45 - what
89:45 - user
89:47 - is creating this account right so let's
89:49 - fetch users it can only be one user
89:51 - creating this account and what is that
89:52 - user's public key right so what's the
89:55 - pda of that user it's gonna be this
89:58 - right here
89:59 - cool what's the authority we can answer
90:01 - that question it should be my address my
90:04 - public key right
90:06 - with the public key who also owns this
90:08 - user
90:09 - okay so what's the pda of the airbnb
90:11 - account right that's not created just
90:13 - yet right that's going to get created
90:16 - through the seeds right so this is what
90:19 - you need to put for the seeds so let's
90:21 - do from seed
90:22 - airbnb tag right shouldn't be airbnb
90:25 - tech should be airbnb state
90:27 - right next is the pub key which should
90:29 - be your address which i can copy here
90:32 - or you can get it from my authority and
90:33 - last but not least it does take in a
90:36 - number right so i believe it should be a
90:39 - u8
90:41 - you can double check that right here
90:44 - user profile last airbnb and the last
90:46 - airbnb is a u8 okay so takes in the u8
90:49 - and since it hasn't made anything it
90:52 - should be zero
90:53 - right i can double check that here
90:55 - zero
90:56 - okay so let's hit generate there you go
90:58 - it generated a unique hash from the
91:00 - seeds and then if we hit test let's go
91:03 - past boys and girls so now what does
91:05 - that mean if i fetch an airbnb account
91:07 - we have one airbnb in this array right
91:11 - think of it as an object right so when
91:13 - we fetch this later
91:14 - we can take the information and map it
91:18 - through
91:18 - our listing items right can you kind of
91:20 - start to visualize how we're doing this
91:22 - so this is good i hope this is starting
91:24 - to make more sense we have a couple more
91:27 - functions to go
91:28 - so let's keep on going
91:30 - okay so moving right along let's get
91:32 - back to our lib and what we can do next
91:37 - is now
91:38 - let's do
91:40 - edit the airbnb or what i'll say is
91:42 - update airbnb so
91:44 - let's create that function pub fn update
91:47 - airbnb
91:49 - okay
91:52 - okay and then we can do this arrow
91:55 - result
91:57 - like so and then curly brackets there
91:59 - you go so that's updating airbnb
92:02 - i'm gonna hit enter here and it's gonna
92:04 - take in a couple arguments as well right
92:06 - so of course it's gonna take in the
92:07 - context
92:09 - and the context which we'll need to make
92:10 - later is update airbnb
92:14 - okay
92:15 - and from here it's going to take in the
92:17 - index
92:19 - u8
92:21 - location
92:23 - string
92:25 - all right we need to pass all this in
92:27 - because
92:28 - depending on what we want to do we want
92:31 - to change the location maybe we want to
92:32 - update the country maybe we want to just
92:34 - change everything right so let's pass in
92:36 - everything and only
92:38 - keep what we need okay so location
92:42 - country
92:45 - price
92:47 - and they're all going to be type string
92:50 - string okay
92:52 - awesome
92:53 - all right and then here
92:55 - it's going to be the logic
92:57 - but let's wait on that for a second and
92:58 - let's work on the context all right so
93:01 - you want to make contacts for
93:04 - updating airbnb
93:05 - what you have to do
93:07 - is just follow the same pattern as last
93:09 - right so it's only going to get easier
93:10 - from here i'm just going to do accounts
93:13 - and then we can say hashtag
93:16 - instruction again
93:17 - but this time we're going to take an
93:19 - airbnb
93:20 - idx wait
93:23 - okay
93:24 - cool
93:25 - i always spell instructional and struck
93:28 - sean
93:29 - nice
93:30 - okay cool underneath this we gotta write
93:32 - club struct update airbnb
93:37 - info
93:39 - curly bracket and from there we can do
93:41 - the hashtag
93:43 - account again
93:47 - okay i'm saying enter here
93:52 - cool
93:53 - so
93:54 - what i'm going to set up is the user
93:56 - profile so if it's the user profile
93:57 - right we can do seeds
94:00 - equal to
94:02 - user tag right
94:05 - and remember this is user profile right
94:07 - so to get the user profile we have to
94:10 - find it through the seat so
94:12 - we're going to take in the user tag
94:14 - the authority
94:16 - dot key
94:18 - dot as ref and that should get us the
94:22 - hash that we need right and then bump
94:25 - and then has
94:27 - one
94:30 - okay cool this is all for the user
94:33 - profile
94:35 - um this isn't anything new this is
94:37 - essentially what we did last time right
94:39 - we're getting we're getting access to
94:40 - the user profile again
94:42 - and you could have literally copy and
94:44 - pasted this if you wanted to
94:45 - but i'm just gonna write it out box
94:47 - account
94:50 - info
94:52 - user profile
94:55 - comma
94:56 - cool
94:57 - so we this is how we're getting access
94:59 - to user profile when we're updating the
95:01 - airbnb we need access right keyword
95:04 - access to the airbnb account itself so
95:07 - how do we get the airbnb account well
95:10 - it's going to be very similar as before
95:12 - and let me not make the same mistake
95:14 - cool now this is the right color so it's
95:16 - going to be similar to how we got the
95:17 - user profile so we want to say mute here
95:19 - because it's going to be a different
95:20 - airbnb account each time
95:22 - we got to pass in the seeds to get that
95:25 - hash which will be airbnb tag
95:29 - authority dot key
95:34 - dot as underscore ref
95:37 - comma
95:38 - and
95:40 - right it's a airbnb
95:44 - index
95:47 - dot as ref
95:50 - okay cool
95:52 - and there we can say bump
95:55 - okay now we can say as one equals
95:58 - authority
96:02 - all right let's say pub air
96:05 - vp account
96:07 - and we can say box
96:10 - account
96:12 - info
96:15 - and then what account that you're
96:17 - getting i'm getting the airbnb
96:19 - account
96:21 - there we go so we have we got user
96:23 - profile we got airbnb account
96:26 - right and then we just need the usual
96:28 - stuff which is the authority and system
96:30 - program right and i'll save you the time
96:32 - you literally you could just copy and
96:34 - paste the same thing here
96:36 - cool and that's it for update airbnb
96:39 - do i have to create an account again no
96:42 - because i'm using accounts that already
96:43 - exist we already have a user profile
96:45 - account i already have an ad airbnb
96:47 - account
96:48 - all right so what do you want to do now
96:50 - is just utilize the context right so
96:53 - this should go a lot simpler
96:55 - so we're updating the airbnb and we just
96:57 - want to change it to whatever we pass in
97:00 - right so let's just get the airbnb
97:03 - account
97:04 - right right set that equal to
97:06 - and mute contacts
97:09 - accounts
97:10 - dot airbnb
97:13 - account
97:15 - okay
97:16 - cool and then we can do airbnb
97:20 - that location
97:21 - right is equal to the location we pass
97:24 - in
97:26 - right
97:27 - then we can get the country set that
97:30 - equal to the country
97:34 - oops semicolon not comma
97:37 - okay then we need airbnb account again
97:40 - the price is equal the price
97:44 - and error
97:45 - b and b account
97:49 - dot image is equal to image
97:52 - okay and then from there you just gotta
97:54 - do okay
97:56 - and that's it and now i'm thinking about
97:57 - it we're not actually using the user
98:00 - account at all yeah because we don't
98:02 - want to we don't need to update it
98:03 - because that user is already has the
98:05 - authority so you know what
98:07 - let's see let me go here
98:10 - yeah we're only we're using the airbnb
98:12 - index anyways because before we're using
98:13 - user profile last airbnb
98:15 - but that should be the same as this
98:17 - anyways so what i'll do is let's erase
98:20 - user profile and this should still work
98:22 - all right that's update airbnb just
98:24 - remove that it should still build
98:28 - let's see if i missed anything hey okay
98:30 - so if you get the is reserved that's
98:32 - fine uh line 59
98:37 - yes we're not really using this
98:39 - right but we do need to pass it in
98:41 - so let's just do that because that's
98:42 - going to come in handy later boom so now
98:44 - we only have one warning and it's the is
98:46 - reserved that one i can live with right
98:48 - we can change that to snake case if you
98:50 - want but it should be fine
98:52 - cool so let's upgrade the contract
98:54 - and let's test update airbnb
98:57 - awesome so it looks like it was
98:59 - successful
99:00 - and now we have update airbnb so let's
99:03 - test it out so we're going to update the
99:05 - airbnb let's pass in the index i don't
99:07 - know from memory that we should only
99:08 - have zero but we can double check index
99:11 - zero perfect okay uh what's the location
99:14 - let's just say do buy right
99:16 - and if you know where to buy is
99:18 - you set uae as the abbreviation we'll
99:20 - say 88 and for the image right i don't
99:23 - have an actual url for this but let's
99:25 - just say it's i don't know
99:27 - like
99:29 - um
99:30 - let's go back here let's say
99:32 - dubai
99:33 - and i like this one so let's take this
99:36 - paste that here
99:37 - airbnb account what airbnb account
99:39 - should we pass in
99:41 - right i don't need to create a new one
99:42 - but we should just take the one that's
99:44 - already made because i know what it is
99:46 - the authority is going to be me
99:49 - and let's hit test hey update your
99:51 - airbnb passed so this is what it looks
99:52 - like currently the rocket ship in space
99:55 - if i do a fetch all now
99:57 - you'll notice that it says do buy now
99:59 - and we have different image and a
100:02 - different price and that's what updating
100:04 - and airbnb should do
100:05 - cool
100:06 - on to the next function all right so the
100:08 - next function that we're going to create
100:09 - is going to be
100:11 - removing an airbnb which is essentially
100:14 - deleting or closing the account right so
100:17 - let's go ahead and work on that so if we
100:20 - want to make a new function
100:22 - you guys should know the drill by now
100:23 - we're gonna say pub fn
100:25 - remove
100:27 - air
100:28 - bnb
100:29 - okay
100:30 - make the arrow result
100:34 - like so curly bracket and bam that's a
100:38 - function all right so now that we have
100:39 - our function
100:40 - let's take in its arguments and when we
100:42 - remove an airbnb all we need to know is
100:45 - the context right which is going to be
100:47 - context
100:49 - and it's going to take and remove airbnb
100:51 - which we'll make in a bit
100:53 - it's also going to take in the airbnb
100:57 - index
100:58 - okay and then i'm just going to say u 8
101:01 - for the type
101:02 - awesome all right and there's nothing
101:06 - really we have to do with the user
101:08 - profile besides
101:10 - decrement the total airbnb count right
101:13 - so
101:14 - let's set up remove airbnb
101:17 - so just going to scroll down below here
101:20 - hashtag
101:21 - derive accounts
101:24 - hashtag
101:26 - instruction
101:28 - airbnb idx u8
101:33 - and then we're going to do pub struct
101:36 - remove airbnb alright so similar to
101:40 - update airbnb
101:42 - we do need to take in the index of the
101:44 - airbnb we want to remove just like we
101:47 - take an index of the airbnb we want to
101:49 - update
101:50 - right so this needs
101:52 - info as well
101:55 - and then we can do curly bracket and
101:57 - from here let's set up uh the user
102:00 - profile account so we can say hashtag
102:02 - account
102:03 - i can say mute
102:05 - and then take in the seeds of the user
102:08 - so what are the seeds that we need to
102:09 - get a user hash which is going to be
102:12 - user tag and authority
102:15 - dot
102:16 - key
102:17 - dot as
102:18 - ref
102:20 - and
102:20 - comma
102:22 - we'll add this bump here and we'll say
102:24 - has one which is equal to authority
102:28 - okay
102:30 - cool so with that done this is what a
102:33 - user profile is
102:35 - and the type that it expects it's gonna
102:37 - be a box
102:38 - that holds an account
102:40 - and what is that account
102:42 - it's going to be a user
102:45 - profile account which we created again
102:48 - in our states
102:50 - okay
102:52 - amazing okay so we have a user profile
102:54 - we'll also need to get the air b account
102:58 - airbnb account right so then we'll do
103:00 - the account like this
103:01 - oops then we'll say mute
103:04 - close is equal to authority
103:07 - and then we'll say seeds is equal to
103:11 - airbnb tag
103:13 - oops
103:15 - this also takes in authority.key
103:19 - dot oh yeah dot as ref
103:22 - and again if you ever confused what what
103:24 - seeds that we put in think back to
103:27 - when we initialize the airbnb right this
103:29 - is the seeds that it uses to create the
103:30 - hash right we can use the same seeds to
103:33 - get that key
103:35 - so we can just say and
103:39 - airbnb
103:41 - index
103:45 - dot as
103:47 - ref
103:49 - okay
103:50 - and that should give us the airbnb
103:52 - account that we want oh yeah it's not
103:54 - done yet we need bump
103:56 - has one as well
104:02 - and that should be it
104:05 - from there we could say pub airbnb
104:08 - account
104:10 - which is expecting a type of a box that
104:12 - holds
104:14 - an account
104:15 - i feel like i'm really repetitive but
104:16 - this is the same pattern guys
104:18 - so once you get used to it think about
104:20 - what you need access to all right that's
104:22 - my keyword
104:24 - and what do you want to do with it right
104:26 - so we have user profile airbnb account
104:29 - and we can copy this because it's the
104:31 - same thing
104:32 - the context will need the authority and
104:34 - the system program now quick question do
104:36 - i need to make any accounts or create
104:38 - any new states here
104:39 - nope i'm just reusing these again that
104:42 - are created and getting the specific
104:45 - uh
104:46 - like keys i need or specific account
104:48 - pdas
104:50 - okay
104:51 - now for the actual logic
104:53 - this remove function is kind of
104:55 - misleading you're not
104:56 - removing you're not writing any removing
104:59 - logic right the key here is in remove
105:02 - airbnb
105:04 - right is this close equals authority
105:07 - right it's basically saying hey who can
105:09 - close this or are we closing it like
105:11 - it's all handled through this right here
105:14 - all right notice how this close isn't in
105:16 - here
105:17 - right when we're referencing the airbnb
105:19 - account
105:20 - the close is in remove right so that's
105:22 - handling
105:23 - uh removing or closing that account what
105:26 - we do want to do here
105:28 - is uh decrement
105:32 - airbnb
105:34 - total total count i believe if we
105:36 - already called it already oh yeah airbnb
105:39 - not total airbnb count
105:41 - okay so how do we go about doing that
105:42 - well first we need to get the user
105:44 - profile
105:45 - all right luckily it's in our contacts
105:47 - right
105:48 - and so we can say and mute
105:50 - ctx.accounts.user
105:53 - profile
105:55 - okay so now we have the user profile
105:57 - what do we want to do with it all right
105:58 - think back to
106:00 - adding airbnb account right this is
106:02 - increasing the index we now want to
106:04 - decrease
106:06 - not index but a number so we can do that
106:08 - by saying user
106:10 - profile which is the variable dot airbnb
106:13 - account right so this will get us the
106:16 - airbnb count of the user in this case my
106:18 - user
106:20 - and
106:21 - at the moment this current point in time
106:22 - that i'm talking about we have one
106:24 - airbnb account so this is actually one
106:27 - right now
106:28 - but to decrement it you can say equals
106:31 - user profile dot airbnb count
106:36 - dot
106:37 - checked
106:38 - sub right one
106:40 - and then dot unwrap
106:44 - okay then semicolon because that's this
106:46 - whole thing is one line
106:48 - okay so check sub it's essentially
106:50 - similar to check add except instead of
106:52 - adding one we are removing one and then
106:54 - setting that equal to the new airbnb and
106:58 - that's what remove airbnb is doing
107:00 - right
107:01 - and we can just say okay
107:04 - [Applause]
107:07 - awesome all right let's remove airbnb
107:10 - see if we have any errors or spelling
107:12 - errors
107:13 - yes we do okay
107:15 - so i'm assuming it has something to do
107:17 - with this struct
107:19 - so i'm just gonna take a quick look at
107:20 - it
107:21 - so looks like the error this is
107:24 - definitely closed this is definitely
107:25 - closed oh
107:26 - forgot to put a comma here and maybe
107:28 - that would fix it
107:30 - hey okay build successful right again
107:32 - warning
107:34 - warnings we can live with right it's
107:36 - just that is reserved which i pointed
107:38 - before
107:39 - so
107:39 - we're good to go and test it right so
107:42 - after we wrote all this code let's make
107:44 - sure we upgrade the program on chain
107:47 - so i'm just going to quickly upgrade
107:50 - and check back when it's done
107:53 - all right deployment successful okay so
107:56 - with that said we can go ahead and test
107:58 - remove airbnb right so again quickly
108:01 - remember that we have one it's this
108:03 - dubai one right here and let's see if we
108:06 - can remove it so what does removing it
108:07 - look like if i were to fetch this it
108:09 - should go back to being an empty array
108:12 - all right
108:12 - so what do we need to remove an airbnb
108:14 - we need the index so what is the index
108:16 - of this right we know because we fetched
108:18 - it it's zero
108:20 - and what are the accounts right so
108:22 - now ask yourself if you get confused
108:24 - here am i generating a user profile
108:26 - public key no am i generating an airbnb
108:29 - account publicly no i'm just passing in
108:32 - what already exists right so with that
108:34 - in mind you just need to get the
108:37 - public key of this user account
108:39 - paste it on there
108:41 - right then you're going to take the
108:43 - public key of the airbnb account paste
108:46 - it on there then you're going to put in
108:48 - your authority which is your wallet
108:50 - address essentially
108:51 - then test and look at that i'll remove
108:54 - airbnb passed and if i fetch all no more
108:58 - airbnb right the account got closed and
109:00 - what you'll see too when you store stuff
109:02 - on the salon chain you need to pay some
109:04 - soul and when you remove it since you're
109:06 - not paying that's only more you get some
109:08 - of it back right so that's cool you'll
109:10 - get your salon back because you're not
109:12 - you're not no longer using that space
109:14 - right it doesn't really matter on devnet
109:16 - because essentially everything is free
109:17 - we're just testing and learning with
109:19 - salon
109:20 - cool so let's remove airbnb
109:22 - next up we have the book airbnb function
109:27 - right so this should be uh pretty simple
109:29 - because we're going to do it in a
109:30 - certain way right so let's just review
109:32 - real quick we have two accounts a user
109:35 - profile account and an airbnb account
109:38 - right so
109:39 - what should be the difference between an
109:41 - airbnb account
109:42 - and a booking account well
109:45 - if you look at the airbnb clone if i
109:48 - heart this
109:49 - i set it for 910
109:51 - then i do reserved
109:53 - you'll notice that it's exactly the same
109:56 - as it was before
109:57 - [Music]
109:59 - except for a slight difference which
110:01 - that this time it includes
110:03 - a date right it includes a date okay
110:09 - and it includes the date
110:11 - because
110:12 - right whenever you create a booking you
110:14 - should know the date that you reserved
110:15 - it for so i reserved it for 9 10 and
110:18 - this is my nice little hut in the
110:19 - philippines
110:20 - awesome and the cool thing is that it's
110:22 - marked by a heart so
110:24 - what's the idea with a booking account
110:26 - right
110:28 - so with solana i'll the only people that
110:30 - have the authority for the airbnb
110:33 - accounts is the person that created it
110:35 - so if i wanted to book it i essentially
110:38 - can't um
110:40 - edit that account and transfer it to me
110:43 - right because i need to sign over that
110:45 - authority but then that's not always the
110:46 - case so we're going to do instead with
110:48 - booking an airbnb is we're going to
110:50 - create a booking account which just
110:53 - passes in the same data from the front
110:56 - end right so that's the workaround for
110:58 - this right we're doing this just to
111:00 - practice creating functions right so
111:02 - this one i want you guys to pause the
111:04 - video and try it yourself and see if you
111:05 - can make a booking account right so i'm
111:08 - gonna give you guys three seconds three
111:10 - two
111:11 - one you got it
111:12 - cool so let's reveal the answer as i
111:15 - explain it
111:16 - all right so you guys want to book an
111:18 - airbnb
111:20 - all right it should be pretty simple
111:21 - it's just going to be the add airbnb
111:23 - function all over again with one extra
111:26 - uh
111:27 - property right
111:29 - so
111:30 - let's do it say pub fn book
111:33 - airbnb
111:35 - parentheses
111:37 - arrow and result yep so if you did this
111:40 - so far you are killing it
111:43 - okay it is going to take in a couple
111:45 - things so i'm going to format it like
111:46 - this
111:47 - take in the context
111:49 - which is
111:50 - book
111:51 - airbnb
111:55 - we will take in the index
111:58 - it's going to be u8
112:03 - and taking date
112:06 - string
112:08 - location
112:11 - string
112:12 - country
112:14 - string oops
112:16 - price
112:18 - string
112:20 - and of course image almost forgot that
112:22 - string
112:23 - cool
112:24 - all right so from here
112:27 - right we need to create the context so
112:30 - i'm just going to scroll all the way to
112:31 - the bottom here
112:32 - and let's do one of these
112:38 - okay make this a little bit bigger for
112:39 - you guys
112:40 - and let's make the context so whenever
112:42 - we're making a context we want to derive
112:46 - accounts right because we're creating a
112:48 - new
112:49 - um pda for booking accounts that's the
112:52 - goal right but the first we got to
112:54 - define the context we can write
112:55 - instruction here
112:59 - then we can say pub struct
113:02 - book airbnb
113:06 - info
113:08 - and there we go cool so what do we need
113:10 - for a book airbnb we're gonna need uh
113:13 - the user profile account
113:15 - so let's get that how do we get that
113:18 - we're gonna do one of these
113:20 - oops not that one
113:22 - i'm gonna say mute
113:24 - seeds what seeds does a user profile
113:27 - account take in it takes in my variable
113:30 - user tag
113:31 - and authority
113:34 - dot as
113:36 - ref bam
113:38 - then we can do bump
113:42 - then we can do has one
113:44 - equal to authority
113:48 - alrighty so then from there we can do
113:49 - pub user
113:52 - profile and you guys notice drill at
113:54 - this point box account
113:57 - info
113:59 - then write
114:00 - user
114:01 - profile so we can get the actual
114:03 - struct of the user profile account
114:06 - okay
114:08 - can't forget the comma
114:10 - um
114:12 - oh yeah so we have that and now we need
114:14 - to create
114:16 - the booking account right initialize it
114:18 - right so luckily we don't have to do the
114:20 - work of initializing it because anchor
114:22 - can take care of it with for us by
114:25 - saying account
114:26 - parentheses
114:28 - and init right that's what's taking care
114:30 - of it
114:31 - now let's define the seeds what are the
114:33 - seeds
114:34 - of a booking account right so again
114:36 - entirely up to you but what i'm going to
114:38 - do is make a variable called book tag
114:40 - right
114:42 - very similar to user tag and airbnb tag
114:44 - this is going to be a variable that
114:45 - holds a string
114:48 - okay then we're going to take in
114:50 - whatever our authority is
114:53 - and then let me see dot
114:57 - as rep
114:58 - cool and actually we don't need to add
115:00 - anything else
115:02 - all right that can be it
115:04 - okay and then from there we'll just say
115:06 - bump
115:08 - and set that equal to
115:10 - oh no sorry bump then we do payer and
115:12 - set that equal to a sort
115:16 - all right again if you did want to make
115:17 - unique uh
115:19 - even more unique hashes for the seed
115:22 - right we can add an index here but again
115:24 - let's keep we can keep it simple
115:26 - all right how much space does this take
115:28 - up not entirely sure yet so let's just
115:30 - leave that blank for now and then we'll
115:32 - do a pub booking account right this is
115:34 - us initializing the account
115:37 - which takes in that box that we always
115:39 - use
115:41 - okay account
115:43 - info
115:45 - booking account
115:47 - all right so the cool thing is guys
115:49 - if you wanted to make any kind of app
115:51 - right let's say you wanted to make i
115:52 - don't know uh
115:54 - a amazon for example right you can
115:58 - define your items here like you can make
116:00 - a item account right and then put what
116:03 - properties an item has
116:04 - right
116:06 - so that's the benefit of what i'm
116:09 - showing you guys like feel free to use
116:10 - this however you want
116:12 - right you know if you want you can even
116:14 - add more
116:16 - properties to each account we can have
116:18 - like the owner
116:19 - um how far away is it from you
116:22 - and so forth right so after booking
116:24 - account we just need the authority
116:26 - and the system program again so we can
116:28 - save time by just pasting the same exact
116:31 - thing and that's it for the struct all
116:34 - right the next thing we'll do is need to
116:35 - define book tag and we also need to
116:37 - define booking account so start with
116:39 - book tag because that's going to be the
116:40 - easiest and to do that just come down
116:43 - here
116:44 - say hashtag constant
116:47 - then you can say
116:48 - const
116:49 - book
116:51 - tag
116:54 - and
116:56 - u8 and set that equal to the binary
117:00 - string of
117:01 - book
117:02 - state
117:04 - all right so that's the string that we
117:05 - write when we're in putting our seeds
117:06 - remember that
117:08 - now for the states all right we need to
117:10 - define what the hell a booking account
117:12 - is and if you think about it it's
117:14 - exactly the same as this
117:16 - except what
117:18 - all right so i'll copy this
117:20 - i'll paste it because it's exactly the
117:21 - same but make sure you change it right
117:23 - if you're gonna copy paste it make sure
117:24 - you did everything right so it's gonna
117:26 - be booking account not airbnb
117:28 - okay so what's the difference the
117:31 - difference is
117:33 - it's gonna have a date right so
117:35 - underneath this authority you can really
117:37 - write it wherever make sure that it has
117:40 - a date
117:41 - and that's going to be a string
117:43 - and again this how much base does it
117:45 - take up it should be
117:47 - 256.
117:48 - all right same amount of space as
117:50 - location country that should be plenty
117:52 - for the date that's it that's the
117:54 - booking account itself we can now define
117:56 - how much space this takes up and if i
117:58 - add up all the numbers together
118:01 - um it should give me like
118:02 - 3 000 something i believe let me just
118:04 - quickly do it yep 3125
118:09 - plus the account discriminator
118:12 - [Music]
118:14 - okay
118:15 - cool and if i barring any spelling
118:18 - issues or missing commas this should be
118:21 - good to go
118:22 - oh yes forgot to make the logic of
118:25 - booking account yes okay cool so give me
118:27 - an error because i didn't finish writing
118:29 - out the function but we have everything
118:31 - we need set up we just have to write the
118:33 - logic
118:35 - okay so
118:36 - writing the logic what we did if you
118:38 - remember the ad airbnb we needed to get
118:42 - the booking account
118:43 - right and we can do this because
118:46 - that's in our context so it's in our
118:48 - context
118:49 - accounts
118:50 - booking account
118:52 - boom okay so now we got to fill up
118:56 - this
118:57 - right with all the values where do we
118:59 - get all the values for the date location
119:01 - and stuff like that well we passed it
119:03 - all in
119:04 - okay
119:05 - so what we can do is say
119:07 - um
119:09 - booking account
119:11 - oops booking underscore
119:15 - is account.idx
119:16 - to idx
119:18 - and let's get the date
119:21 - equal to date
119:23 - booking
119:24 - account
119:25 - dot location is equal to location
119:29 - booking account dot country is equal to
119:33 - the country and now let's work on price
119:36 - so you can just say dot price
119:39 - and guess what that will equal to
119:41 - its price again i know
119:43 - all right so we're almost done
119:46 - let's get the image and say img all
119:48 - right because that's what i wrote here i
119:49 - think yep
119:52 - and i think i wrote in
119:54 - okay
119:55 - next we need booking account
119:57 - dot is reserved and this shouldn't be
120:01 - false right because if it was
120:04 - um adding an airbnb it would be false
120:06 - because it's not booked yet but when i
120:08 - make a booking account oops my one two
120:10 - four it should be true
120:12 - you might ask and it could be possible
120:15 - to go into the airbnb account and switch
120:17 - that to it true
120:19 - right
120:20 - the thing is the authority right
120:24 - if i make the let's say i put up a nice
120:26 - cabin in the philippines and qazi tries
120:28 - to book it and he wants to change this
120:30 - to true
120:31 - he wouldn't be able to because i have
120:33 - the authority because i made the account
120:35 - right
120:36 - so
120:37 - i could ask him and then he would sign
120:39 - it but there's no guarantee you know
120:41 - he'd be there to sign it or again it's
120:43 - just it's just not right with in terms
120:44 - of authority
120:46 - the easier work around is to just take
120:49 - the data from the front end pass it to
120:52 - this function call and make a brand new
120:54 - booking account
120:56 - all right
120:57 - cool
120:59 - this again is it just to practice
121:01 - creating the function and that's why
121:03 - you guys should get the pattern by now
121:05 - so that's okay
121:06 - let's see if it likes it now
121:08 - and bam build successful
121:12 - yep yep yeah so now we have two warnings
121:14 - because there's two is reserves now but
121:15 - again totally okay right
121:18 - so
121:19 - now we have book airbnb let's go ahead
121:21 - and hit upgrade
121:23 - so that we can finally test it
121:26 - all right there it is there's the magic
121:27 - words deployment successful right let's
121:30 - go ahead and create a booking account
121:33 - before we get a booking account we
121:34 - should probably make another airbnb so
121:37 - again i'll use dubai
121:41 - uh country
121:43 - price
121:44 - and the image
121:47 - okay
121:48 - for the user profile we're gonna need to
121:51 - get that from here
121:54 - take this public key
121:56 - and the airbnb account does not
121:59 - exist but we need to get the right hash
122:01 - for it so we're gonna get the seed which
122:04 - is airbnb state
122:07 - right
122:08 - it's gonna take in the pub key
122:11 - and i believe the pop key is just the
122:12 - authority
122:14 - make sure right here
122:16 - yep my authority
122:18 - which means it's my wallet address
122:20 - and it takes in a number
122:22 - and we can put you wait say zero
122:25 - generate
122:26 - and my authority my address test
122:31 - you do something wrong no unauthorized
122:33 - sign let's see real quick
122:35 - okay i just did the same thing again i
122:36 - might have put the wrong um public key
122:39 - so this is different 60s test
122:42 - cross program
122:44 - oh i see it's because the last airbnb
122:48 - so
122:49 - let's see
122:51 - yeah last airbnb was one right
122:54 - so we need to put in one i'm pretty sure
122:57 - that's it
122:58 - so instead of this from seed
123:00 - airbnb state
123:03 - we need pub key
123:05 - my address
123:07 - let's do this try one there you go it
123:11 - passed right i put in the correct
123:13 - seed for it now right so now this should
123:16 - say two
123:17 - and total airbnb is one
123:19 - all right so we're keeping track of its
123:20 - last airbnb and also keeping track of
123:23 - the airbnb account
123:26 - okay this is so that uh if we have three
123:30 - airbnbs and they have zero one two right
123:32 - remembers what the last index was so we
123:34 - don't have multiple right so
123:37 - now if i fetch this we have one perfect
123:40 - and now how many booking counts gone
123:42 - right to simulate the front end we're
123:44 - gonna book this airbnb
123:47 - so to do that
123:49 - we're gonna pass in the index which i
123:52 - believe it should be
123:53 - one yeah one
123:55 - one the date we'll say september
123:59 - 9th through september
124:02 - 10. right is this how it's written
124:06 - yeah dash
124:07 - okay we could do that put a dash right
124:10 - here boom
124:12 - dubai
124:13 - right and this will be all automated
124:15 - when you're booking airbnb you won't
124:16 - have to input anything it's just gonna
124:19 - take the info of the airbnb account and
124:22 - then pass that as the parameters so
124:24 - we'll do that
124:26 - 88
124:29 - image
124:30 - you can uh pass the same image
124:34 - okay cool uh user profile account
124:37 - pass in
124:40 - that booking account from seed
124:42 - this should be book state and just my
124:46 - public key right remove the index thing
124:48 - we can just
124:49 - do this
124:51 - generate
124:53 - my address and test
124:55 - boom passed there you go that's what we
124:57 - want to see
124:59 - and now
125:00 - when we fetch this
125:02 - there we go so i have my booking account
125:05 - and we have the date of when i'm booking
125:08 - it right so we can do stuff with this
125:10 - right so that's the booking account
125:12 - all right believe it or not we're on our
125:14 - last function which is we should be able
125:16 - to
125:17 - uh unbook an account so if i click that
125:20 - we are no longer have that account
125:22 - booked okay
125:24 - cool so let's go ahead and work on that
125:26 - so i'm just going to scroll
125:28 - to the top here
125:29 - and let's make that function at this
125:31 - point it should be very easy to make a
125:33 - function all right you can just say
125:35 - cancel
125:36 - booking
125:38 - all right
125:39 - and when we cancel the booking
125:41 - it's gonna have a result
125:44 - like this
125:46 - okay
125:46 - and the difference between this cancel
125:49 - booking and the remove airbnb
125:52 - is that we don't need to decrement the
125:54 - count right if you
125:57 - were keeping track of the last booking
125:59 - account then you would do that but for
126:01 - us uh really you can just write okay
126:03 - here and we're pretty much done
126:05 - okay we do still need to write context
126:07 - though
126:09 - because it's in the context that matters
126:12 - so we'll say
126:13 - cancel book for short and we should also
126:17 - take in the booking
126:19 - index
126:22 - all right i'm passing this in so we know
126:24 - which
126:25 - booking account you want to delete
126:27 - okay
126:29 - so we need the index
126:31 - that's okay
126:33 - uh
126:34 - let's make a note here
126:36 - closing account is handled
126:40 - in context
126:41 - but if you didn't want to do anything
126:42 - else like change i don't know decrement
126:46 - the total booking account right then we
126:48 - could do that here but we don't have
126:50 - that set up right because you get the
126:52 - idea
126:53 - so we just need to set up the context
126:55 - all right so this should be pretty
126:56 - straightforward then so we're going to
126:58 - say derive whoops the royce derive
127:03 - accounts
127:06 - and we can just say pub struct cancel
127:09 - book
127:12 - let's say info right here
127:15 - and within this
127:18 - we need to get the
127:22 - booking account i believe i think that's
127:24 - the only thing i really need
127:26 - [Applause]
127:28 - yeah i just need the booking account
127:30 - so what i'm going to do is say mute here
127:32 - and let's just say close
127:34 - equal authority
127:37 - seeds
127:38 - equal to book
127:41 - tag
127:43 - authority
127:45 - dot key dot as
127:47 - rep
127:49 - then we do bump
127:51 - then we do has
127:54 - has one equal to authority
127:58 - all right cool and that's the booking
128:04 - which will just have this box that we
128:05 - have again
128:08 - yeah as you can see there's a lot of
128:09 - repetition in a lot of things i'm doing
128:12 - right so just know depending on what you
128:14 - want to do it might be the same thing
128:19 - cool so we got the booking account and
128:20 - we just need the authority and system
128:23 - program once again
128:27 - and there you go we don't need to make
128:28 - any
128:29 - account struck because we already have a
128:31 - booking account
128:32 - um
128:33 - yeah just taking in the id let's see is
128:36 - there anything else
128:38 - doesn't even really need the id
128:41 - not on thinking about it but we'll keep
128:44 - it in there for now
128:46 - all right so let's just see if the build
128:48 - would pass
128:49 - awesome build successful let's upgrade
128:51 - it and then we'll test it
128:54 - all right deployments all said and done
128:56 - let's test this out right so we should
128:58 - have a booking account right
129:00 - yep we do just to confirm
129:02 - oh it doesn't have an authority
129:04 - that's what i realized
129:06 - why don't you guys tell me the authority
129:07 - should be the same so let's see let's go
129:10 - back to this
129:12 - yeah we did miss one thing
129:15 - for booking an airbnb should have made
129:17 - the authority booking
129:19 - account dot authority
129:23 - dot
129:25 - equal to ctx
129:27 - accounts
129:29 - dot authority
129:31 - dot key
129:35 - okay yeah so if you see this one one one
129:38 - one if i didn't specify the authority
129:39 - the default is just this one one one one
129:41 - right here
129:42 - okay awesome and yeah we have this yeah
129:46 - the authority should be my wall address
129:48 - but it's just the default one that's
129:49 - fine
129:50 - all right so we finished deploying we
129:52 - can now test the cancel booking
129:55 - all right so we're gonna pass in the
129:56 - booking index
129:58 - i lost it so let's get a pack which is
130:00 - going to be one
130:02 - all right uh the booking account
130:05 - is going to be this thing over here
130:10 - and the authority should be hours but
130:12 - since i didn't put an authority we i
130:15 - think we have to use the default one
130:16 - which is this let's see if that works if
130:18 - not it should be ours
130:22 - okay cool so signature verification
130:23 - failed let's try my address
130:26 - yeah one constraint failed so this this
130:29 - might be a uh
130:31 - account that i don't have authority to
130:32 - change
130:33 - not too short to be honest with you guys
130:35 - but let's just make a new one
130:37 - let's just book an airbnb
130:39 - the index of this uh we'll say 2.
130:42 - the date can be september
130:45 - 9
130:47 - or x 2 12 to
130:49 - september
130:50 - 13th
130:51 - the location this doesn't exist but
130:53 - we'll do space
130:55 - or rocket ship
130:56 - rocket ship
130:59 - country space
131:01 - price 9.99 and the image
131:04 - can be
131:05 - test right so again the user
131:09 - should be
131:11 - me
131:14 - right that's the user profile the
131:16 - booking account can come from the seed
131:18 - we can say
131:20 - book
131:21 - state right here
131:23 - then the public key which is my
131:26 - wallet address generate
131:29 - and authority and this time it should
131:31 - have the right authority
131:33 - [Music]
131:35 - oh
131:36 - rent exempt threshold oh i see okay
131:42 - okay so i quickly just redeployed the
131:44 - whole contract and let's just start from
131:46 - scratch okay so we have
131:48 - no users no airbnb account no booking
131:51 - account alright brand new contract right
131:54 - i can show you guys how to do that later
131:56 - but let's go from the top and then we
131:58 - can move on
132:00 - the authority is my address the seed
132:06 - user state
132:08 - and or not string we need a pub key
132:11 - which will take in public key
132:13 - generate
132:14 - test
132:16 - boom cool we got a user all right here's
132:18 - the proof all right this is the public
132:20 - key for that user we'll know we'll need
132:22 - it later let's add airbnb right so let's
132:25 - do dubai let's do
132:27 - uae
132:28 - 88 dollars and for the text i mean the
132:32 - image address we can do this guy right
132:34 - here
132:35 - and for the user profile we got that
132:38 - it's right here the v7
132:41 - uh airbnb account we need to
132:44 - figure out what's going to be the airbnb
132:46 - account so we can say air b and b state
132:53 - all right then we can do pub key which
132:55 - again will be my address
132:57 - and also it's going to take in a number
133:00 - which is going to be the last airbnb
133:02 - that they did which will be zero
133:05 - all right we can then generate it
133:07 - my address
133:09 - test
133:10 - boom we have an airbnb okay cool so we
133:13 - have an airbnb here's the proof let's
133:15 - book that airbnb account
133:19 - so to do that we're gonna need to
133:21 - book it
133:22 - taken the index which i believe is zero
133:24 - as well
133:26 - yep it's zero
133:28 - the date we can say september
133:30 - uh
133:32 - 6 to
133:33 - september 7th
133:36 - location right we can do
133:39 - dubai
133:41 - same thing right again we wouldn't have
133:43 - to manually put this in when i'm calling
133:44 - this function it'll be automatically
133:46 - passed forward in the front end
133:49 - and we can take this image
133:52 - paste it cool all right user profile
133:55 - it's that v7 thing
133:59 - the booking count we need to generate
134:01 - from seed which we'll say is um
134:06 - book
134:07 - state
134:09 - pub key and we can say my account
134:13 - which is this
134:14 - generate
134:16 - authority my address
134:18 - there we go okay so we were able to make
134:19 - a booking account
134:21 - all right nothing weird going on boom
134:24 - okay
134:25 - now we want to remove our booking
134:27 - account right so if we want to remove
134:28 - our booking account we're going to use
134:30 - cancel booking
134:31 - pass in that index all right
134:34 - get the exact booking account address
134:38 - right the public key
134:42 - pass in the authority
134:44 - and it should be taken care of from the
134:46 - context and bam cancel booking pass all
134:49 - right after all that
134:51 - if i fetch all
134:53 - boom no more bookings right so
134:55 - functionality wise airbnb clone is done
134:58 - all we have to do now is plug all of
135:01 - those functions in
135:02 - with our front end so you guys ready for
135:04 - that if you guys made it this far drop a
135:06 - like in the video comment down below
135:08 - that this was helpful and you know what
135:10 - type in
135:11 - marshmallow in the comments so i know
135:13 - you made it this far okay
135:15 - cool so let's work on the front end now
135:18 - all right so all the functionality is
135:19 - done
135:20 - let's figure out how to bring this
135:22 - functionality and call these functions
135:25 - right from our front front end so what
135:27 - i'll do is i'll bring back vs code for a
135:29 - second here
135:30 - and let's go ahead
135:32 - and let's make a custom hook alright so
135:35 - if you don't know how to make a custom
135:36 - hook
135:37 - right all you need to do is just make a
135:40 - folder called hooks and now make sure
135:41 - it's not in pages or anything like that
135:43 - it should be its own folder so inside
135:45 - that hooks folder right
135:48 - i'm going to make a new file and i'm
135:49 - going to call it
135:50 - use
135:52 - airbnb
135:53 - dot js
135:55 - cool so this is going to be important
135:57 - for later all right i'm going to put a
135:58 - pin on this and uh let's talk about a
136:00 - couple things
136:02 - so
136:03 - you have your solana program on chain
136:05 - right if you look under
136:08 - constants you're going to have
136:10 - something set up for you which is going
136:11 - to be the index
136:13 - right in the index.js all right you need
136:16 - to set this up in order to get the
136:19 - program right we need to first fetch the
136:21 - program
136:22 - and what do we do first is get the key
136:25 - right the address right so what's your
136:27 - address well it's easy to find out
136:29 - because if you go to the top of your lib
136:30 - my dz ks right it's different from
136:33 - earlier because i just redeployed it i
136:35 - got in i started a new program what you
136:37 - want to do next is hip copy this all
136:39 - right get back your vs code and then
136:42 - replace this because this is the demo
136:45 - with yours right so now
136:48 - that should be good right
136:49 - the next thing you want to do right is
136:51 - go to this toolbar right here go to idl
136:54 - and hit export idl right you'll see this
136:56 - ideal.json uh it says eight here because
136:59 - i have like eight of them when i was
137:00 - testing this but yours doesn't have to
137:01 - say that you can double click that for
137:04 - using chrome and it should open up that
137:06 - idl in chrome i mean nvs code so i'm
137:09 - gonna press alt z so you can see what
137:10 - this idl is and essentially is a json
137:13 - file of our app right you can see uh all
137:16 - the information like our constants right
137:18 - user state in here right we can also see
137:20 - all the functions we did like update
137:22 - airbnb what you want to do is just copy
137:25 - this and within the constants on
137:27 - airbnb.json right
137:30 - ctrl a
137:31 - and then erase what's in this
137:33 - airbnb.json and paste well not the
137:36 - image.bmg i don't know what happened
137:37 - there i'm going to take all this stuff
137:39 - copy it and paste that in this
137:42 - airbnb.json all right so that's part of
137:45 - the setup for this hook we can go back
137:47 - to use airbnb now
137:50 - all right and once you're here let's
137:52 - import a couple things that we're going
137:54 - to need for this
137:55 - right and i'll explain more what we're
137:57 - doing here so first let's import star as
138:00 - anchor from
138:02 - at project serum anchor
138:06 - let's import some react hooks while
138:09 - we're here
138:10 - we're gonna need use
138:12 - effect
138:13 - um use memo
138:16 - and use state we might not use mute memo
138:19 - but we're definitely gonna use use state
138:20 - and use effect
138:22 - okay okay from here we're also going to
138:24 - be using
138:25 - uh import
138:28 - the airbnb program pub key from
138:32 - constants
138:34 - all right this
138:35 - is what we set up earlier in our
138:38 - constants folder right remember where we
138:40 - put the program id i'm exporting it and
138:42 - importing it here
138:43 - [Music]
138:44 - okay next we want import air bnb
138:49 - idl from
138:51 - dot
138:52 - constance slash
138:54 - airbnb.json alright we're importing the
138:56 - idl as import airbnb ideal
139:00 - cool
139:00 - let's also get a
139:04 - system program from anchor actually no
139:08 - we don't want this from anchor we want
139:09 - it from
139:12 - atlanta web3.js there you go
139:15 - we want system program from there
139:17 - we then want to use utf-8
139:22 - from
139:24 - project
139:26 - at project serum anchor slash
139:30 - dist sas cji slash utils slash bytes
139:35 - perfect all right utf-8 cool you also
139:38 - want to import uh let's see
139:42 - find
139:43 - program address sync
139:44 - and don't worry we're going to be going
139:45 - over all these and whatever i end up not
139:47 - using we can erase right cool from here
139:50 - let's do use anchor wallet
139:54 - use connection
139:56 - and use wallet
139:59 - okay
140:03 - oh yeah so there's also an author filter
140:06 - so let's see do i have that here
140:10 - utils
140:14 - i think it's in utils oh yeah so this is
140:16 - the
140:16 - uh account discriminator right that's
140:19 - all set it's already set up for you guys
140:20 - right you need to have this here because
140:22 - what we're gonna do
140:23 - is import it in our hook
140:27 - import
140:30 - author filter
140:33 - from utils
140:35 - and let's import
140:38 - public key
140:39 - from solana web 3
140:42 - and there's just two more things we we
140:44 - can use uh set
140:47 - all right this is going to come from
140:49 - the date
140:50 - so when we're going to book stuff later
140:51 - this is important i'm going to import t
140:54 - r
140:55 - yeah i'm not sure if we're going to
140:56 - fully use those two but we'll see
141:03 - perfect
141:04 - okay cool we got all the imports i know
141:06 - that was a lot right but what do we want
141:08 - to do here well we want to use this hook
141:12 - in order to
141:13 - write the functions we need and then we
141:15 - can call any of those functions within
141:17 - our index so
141:19 - the alternative right guys is if i
141:22 - open up the index right the alternative
141:25 - is i write all the functions in here
141:27 - kind of like how all these static
141:29 - functions are
141:30 - right or
141:31 - i can write all the functions in here
141:33 - and then uh deconstruct it and call it
141:36 - here kind of like i'm using use wallet
141:37 - okay that's what the custom hook is
141:39 - going to do all right just for
141:40 - organization purposes
141:43 - awesome
141:44 - so how do we get started and say export
141:47 - const use airbnb oops
141:50 - [Music]
141:51 - use airbnb is equal to
141:54 - an empty function
141:57 - cool so all we need to do at the very
141:59 - bottom
142:00 - is return
142:02 - like this and we're good to go right so
142:05 - essentially uh if i make a variable here
142:07 - let's let's try it let's just show you
142:09 - what i mean let's say const
142:10 - uh number
142:12 - or message
142:14 - is equal to
142:15 - what's up youtube right
142:19 - let's say this is my message to you guys
142:22 - all right and i'm storing it in this
142:23 - hook
142:24 - right what you can do is return that
142:26 - message okay
142:28 - this is how you make a custom hook all
142:30 - right and so once you do that
142:31 - go ahead and hit save go back to your
142:33 - index page let's say import
142:37 - uh use airbnb and you're going to see
142:39 - this suggestion on vs code you can click
142:41 - it to finish it use airbnb from hooks
142:43 - slash use airbnb and let's say const
142:47 - and we're going to deconstruct use
142:48 - airbnb here we can get whatever we want
142:51 - from that return so right now it's just
142:53 - message right
142:54 - so if i do console.log
142:57 - message
142:59 - right let's go back to
143:01 - code
143:02 - inspect and let's see
143:05 - all right because i don't think we're
143:06 - running it yeah we're not we're not even
143:07 - uh running the app right now let's do
143:09 - yarn dead or let's cd to the front end
143:11 - which would be a good idea
143:13 - then do yarn dead
143:15 - there you go all right we see what's up
143:17 - youtube right we see it a couple times
143:19 - but it's not supposed to do that but it
143:21 - should just load as
143:22 - what's up youtube
143:24 - once all right
143:25 - cool so that's how we can get accuser
143:26 - for a hook
143:28 - right whatever i write in user me airbnb
143:31 - i can export later right i can set up my
143:33 - use effect there so i don't have to put
143:34 - it in the index as well
143:37 - and then yeah we can call in all our
143:39 - functions there
143:40 - so let's bring back that code and let's
143:42 - keep it right here awesome all right so
143:44 - you get the idea with the hook right yes
143:46 - all right so let's set up a couple
143:47 - different things here
143:50 - uh one of the first things i want to do
143:52 - is get the program
143:55 - okay so how do we get the program well i
143:58 - think we are actually going to use use
143:59 - memo for that all right like i said
144:00 - we're going to be using
144:02 - use memo
144:04 - and use memo
144:05 - it's going to take in an anonymous
144:07 - function okay cool
144:10 - all right so what do you want to do here
144:11 - with this used memo we want to figure
144:13 - out what the program is right so what we
144:15 - can do here is erase message
144:18 - and i did this already but i removed
144:22 - message from here right so it's just an
144:24 - empty
144:25 - here take out that console log and we're
144:27 - caught up
144:29 - so let's go back to use airbnb
144:32 - awesome
144:34 - from there let's do if
144:36 - uh there's a wallet right so we have
144:39 - anchor while we're making use of this
144:41 - here we can
144:43 - make it simple by saying anchor wallet
144:46 - okay
144:47 - so if there's a wallet we need to set up
144:49 - a provider right so what's our provider
144:52 - well the provider is going to equal to
144:54 - new
144:55 - anchor
144:59 - dot
145:00 - anchor provider
145:02 - okay and it's going to take in a couple
145:04 - things we'll need a connection
145:06 - uh we'll need a wallet
145:09 - and what else would we need
145:11 - yeah we'll need the anchor default
145:13 - options as well so to get the connection
145:17 - all right to get the connection all i
145:19 - have to do is say const
145:21 - connection right we're deconstructing
145:24 - this and getting it from not from sorry
145:27 - from use
145:28 - connection right it's one of the inputs
145:31 - that we have
145:32 - uh-huh
145:34 - and again this anchor wallet doesn't
145:36 - exist yet so let's bring that in we can
145:37 - say const
145:39 - uh
145:40 - anchor wallet
145:43 - set that equal to
145:45 - use
145:46 - anchor wall cool so we got a wallet we
145:49 - got a connection let's pass it all in so
145:52 - we can say
145:53 - connection
145:56 - anchor
145:57 - wallet and we can say anchor dot
146:00 - anchor provider
146:02 - dot
146:03 - default options
146:05 - cool
146:07 - all right i'm just gonna do an alt z
146:09 - here so you can see that a lot better
146:10 - how's that guys
146:12 - awesome all right what do we want to do
146:14 - with all this information well we want
146:16 - to return
146:19 - new anchor dot program and here is gonna
146:22 - pass the idle where we can see all the
146:25 - parameters idl
146:26 - the program id
146:28 - and the provider and if there's no
146:30 - provider we use the anchor provider all
146:32 - right so let's do that let's say air
146:34 - bnb idl
146:36 - airbnb program pub key right
146:40 - then we could say provider
146:43 - cool
146:43 - yep if statement and then
146:45 - put a comma here and then we can say
146:48 - connection
146:49 - and anchor wallet right we'll run this
146:51 - if any of these variables change
146:54 - okay cool
146:56 - so let's try to console.log the program
146:59 - let's log in the program and let's put a
147:01 - little note here it says program
147:04 - is here
147:05 - okay not that window oh and before i
147:08 - move on i have i just realized there's a
147:09 - typo here this is not coming from any
147:12 - we're not deconstructing it
147:14 - deconstructing it i'm setting it equal
147:16 - to this anchor wallet
147:18 - so now let's bring in the right window
147:20 - should be this one
147:22 - boom okay cool the program is here that
147:24 - means that this vn right here is the
147:26 - program and inside it has these
147:29 - attributes right has the methods
147:31 - all our instructions right you can see
147:32 - add airbnb in here all right so if i do
147:35 - program.instruction i can call in all of
147:38 - these functions that we made right and
147:40 - now we have the account we can see all
147:42 - the accounts as well with this program
147:43 - airbnb account booking account
147:46 - and the user profile right so which
147:48 - account do we want to work on the user
147:50 - profile that's correct
147:52 - right
147:53 - so
147:54 - with that said
147:55 - we don't need to this anymore
147:58 - right
147:59 - what do we want to do right
148:01 - what do we want to do when we load app
148:04 - we want to get all of the accounts
148:09 - right all the necessary accounts right
148:11 - we need to get all the
148:12 - airbnbs and the user
148:15 - or just the one user right
148:18 - cool so what should we do first first
148:21 - right
148:23 - first
148:24 - check
148:26 - if
148:28 - there is a user right user profile
148:32 - account right
148:34 - exists right if it doesn't exist all
148:36 - right something else should happen right
148:38 - so
148:41 - if exists right if there is already a
148:44 - user
148:45 - what do we want to do
148:47 - load
148:49 - all
148:50 - airbnb
148:52 - airbnb accounts okay
148:55 - if does
148:56 - not
148:58 - exist
149:00 - initialize
149:02 - the user initialize user right or call
149:05 - the initialize user function from our
149:07 - contract
149:08 - right so let me make this a little bit
149:10 - bigger
149:11 - and before i do that actually let's get
149:13 - that
149:14 - airbnb
149:15 - cool so if i asked you guys really quick
149:18 - how many users do we have
149:20 - on this program we have one right
149:24 - but is this user the same as
149:28 - this user
149:29 - it is not right we didn't initialize a
149:32 - user yet right so
149:34 - if i were to run
149:36 - uh all this code am i going to run this
149:39 - if statement or this if statement
149:41 - exactly if the second one right it's not
149:43 - going to exist so we should run
149:45 - initialize user right if it does exist
149:48 - load all the airbnb accounts right so
149:50 - how can we make this code a reality this
149:52 - is called pseudocode right well one way
149:54 - i can think about it is let's make a use
149:57 - effect
149:58 - all right use effect is a react hook
150:01 - all right that's gonna let us do stuff
150:02 - when the component first loads when it
150:04 - updates and when it gets destroyed right
150:07 - so what i want to run first is this
150:09 - function called start right and it's
150:12 - going to be asynchronous
150:14 - and let's figure out what start does
150:16 - start is basically starting the app
150:19 - initializing any files we need right
150:20 - that's why i'm calling it start
150:22 - cool so if there's a program
150:25 - and if we have a public key right how
150:28 - can i tell if i have a public key well i
150:30 - think uh used wallet can help us out
150:33 - okay
150:35 - so const
150:37 - i can say public key
150:39 - public key
150:42 - is equal to use wallet right so if we're
150:45 - connected we'll be able to see the
150:47 - public key that's connected and it's in
150:49 - this variable right here
150:50 - okay
150:51 - so we can put public key right there
150:54 - and not comma sorry we need a double and
150:57 - right if this is and both have to be
151:00 - true
151:01 - for this if statement to run so if
151:02 - there's a program if there's a publicly
151:04 - we are gucci all right so what do we
151:07 - have what do we want to happen then
151:09 - all right well we can set up a try catch
151:11 - oh okay set up the catch
151:18 - perfect
151:19 - cool so what do we want to try though
151:22 - well
151:23 - remember let's go back to island
151:25 - playground right i keep going back to
151:26 - slaughter playground because the tests
151:29 - really under help you understand what's
151:30 - going on right
151:31 - so when we were getting this user
151:33 - profile how did it generate this unique
151:36 - hash this v7 right
151:39 - it generated it
151:41 - from the seed
151:42 - right so the same way it it figured it
151:45 - out right it gave us that unique hash we
151:48 - can find that pda or that unique address
151:52 - okay i'm using interchangeable words
151:53 - here right so we can for now
151:56 - we'll say const square brackets is equal
151:59 - to a weight and we'll do find program
152:01 - address sync
152:03 - right we want to put in the seeds all
152:06 - right so to get started we're going to
152:08 - put an array here and we're going to say
152:09 - utf-8
152:12 - right oops sorry dot and code
152:15 - right and here we put in that first seed
152:17 - so what was our first seed again it was
152:19 - a string right what was that string it
152:20 - was
152:21 - user state right we're turning it into
152:25 - or encoding it here to make it similar
152:27 - to the seed from our salon a playground
152:30 - what else did we pass in as a seed we
152:31 - passed in our public key right but we
152:34 - can't pass it as is we have to to
152:36 - buffered it to cut it in a format that
152:39 - it likes oh so that's that then we can
152:42 - do a comma here and then we can say
152:44 - program
152:45 - all right and then we had to get the id
152:46 - from the program we do dot program
152:49 - id right hit save here
152:53 - it's like no different
152:55 - it has the system program here it has
152:57 - the user profile it has the authority
152:58 - our public key
153:00 - okay
153:01 - cool
153:02 - so from there we'll get the profile pda
153:06 - right so that's why in this square
153:07 - bracket here
153:08 - from this
153:09 - right it's going to check if there's
153:11 - already something there
153:13 - and it's going to come out as profile
153:15 - pda but what's the next step guys
153:17 - the next step right
153:19 - let's say uh we did find program address
153:22 - sync we found it right it's this v7
153:24 - thing
153:25 - but how do we get all the information
153:27 - with that right so let's pretend all i
153:28 - have is this what we need to do is take
153:30 - that profile pda
153:32 - and fetch it so then
153:35 - we'll get a user right if we if i were
153:37 - to put something random like this and
153:38 - hit fetch it wouldn't work
153:41 - okay
153:42 - so let's fetch that and it's actually
153:43 - pretty simple
153:45 - to fetch it what we have to do is just
153:48 - say const profile account we're gonna
153:50 - make a variable to store it in and say
153:52 - await
153:53 - program right this is the program itself
153:55 - if you remember it has access to all the
153:57 - accounts
153:58 - dot account dot user
154:02 - profile
154:04 - dot
154:05 - fetch
154:06 - and then what do we want to fetch
154:08 - we'll want to fetch whatever we got from
154:10 - profile pda
154:12 - okay
154:13 - so
154:14 - from here all right now i'm running a
154:15 - lot of code right now but if
154:17 - there is a profile account right if they
154:19 - found something right
154:21 - let's console.log
154:23 - load oops
154:26 - load airbnbs
154:28 - all right else
154:31 - what do we want to happen
154:33 - right we want to
154:35 - essentially uh initialize a user and
154:38 - we're not also going to initialize a
154:39 - user right here all right we're going to
154:40 - come to log
154:43 - need
154:44 - to initialize
154:46 - user
154:48 - okay so which do you think is going to
154:49 - run
154:50 - load airbnb's or need to initialize user
154:53 - or are we going to get an error right
154:55 - could be anything at this point right
154:56 - i'm not sure let's go ahead and check it
154:58 - out
155:01 - okay so let's hit refresh
155:03 - okay nothing
155:05 - saying it's an error just yet
155:07 - let's look at the console
155:09 - okay reading properties of null
155:13 - that's not good
155:15 - um
155:16 - ah i know right so it's because uh we're
155:19 - not
155:20 - calling the function it's called a
155:21 - function so say start
155:23 - all right we wrote the recipe but we
155:25 - didn't make an order for it
155:28 - hey okay so we got an error the user
155:30 - does not exist right there's no
155:33 - user account
155:34 - that means this oh wait failed it went
155:36 - into the catch
155:37 - so that means this catch ran and we know
155:41 - we need to initialize the user but now
155:43 - the question is when do we want to
155:44 - initialize the user right
155:46 - when do we want to initialize the user
155:48 - well if you remember if you watch the
155:49 - to-do app we can set up a button to
155:52 - initialize that user right because i
155:54 - don't want to
155:55 - overwhelm the user initializes them
155:56 - right away let's make a button for it
155:59 - all right so the question now is where
156:01 - can we initialize the user or where
156:03 - should we initialize the user so let's
156:05 - take a quick look and understand what
156:06 - we're looking at i'm going to open up
156:08 - airbnb clone awesome
156:10 - cool so the way i'm thinking about it is
156:13 - if you look
156:14 - at this this is our phantom wallet
156:16 - connection if you remember the to-do app
156:18 - there should be a button right here that
156:20 - lets us initialize
156:22 - the user right we can actually make it
156:24 - the become host button or we can set up
156:27 - a another button right here so
156:29 - what component
156:31 - is that area that i'm i'm writing in
156:33 - right what component is this is this the
156:36 - listings is this the index
156:38 - like let's take a look right and this
156:39 - looks a little different because i
156:41 - got unsaved so i'd redrew this again
156:44 - but
156:45 - it should be the header that's where it
156:48 - is okay so let's go and look at the
156:50 - header
156:53 - i'm gonna open this real quick go to
156:55 - components go to header
156:57 - and there we go right and you can see
156:59 - that i've already done it for you but
157:01 - i've already imported initialized user
157:03 - and something called initialized right
157:06 - so if you go down below here
157:08 - awesome this is probably where we want
157:10 - to put that button so let's put a
157:11 - temporary button for now
157:13 - and say uh initialize
157:16 - initialize
157:18 - all right we'll just say initialize for
157:20 - now
157:21 - bring this back and there it is right
157:22 - there's the initialize button right no
157:24 - styling whatsoever but we want it to be
157:26 - conditional right what do i mean by
157:28 - conditional well if we're already
157:30 - initialized right remember how we got
157:32 - that uh account doesn't exist
157:35 - all right if the account does not exist
157:38 - we should see this button initialize if
157:40 - we don't see that button i mean if you
157:42 - don't see the if the account does exist
157:44 - we shouldn't see initialize you with me
157:46 - cool so easy way to do that right let's
157:49 - say we're looking for something called
157:50 - initialize that's a variable
157:53 - let's say
157:54 - uh
157:55 - if const
157:57 - initialized
157:59 - is equal to true if that's true should
158:01 - we see the button no we should not see
158:03 - the button so what can we do here we can
158:05 - say
158:06 - curly brackets
158:08 - and we can say
158:10 - if initialized right
158:12 - this is called conditional rendering
158:15 - all right this is a ternary statement
158:17 - if initialized
158:19 - load
158:20 - nothing
158:21 - all right
158:23 - cool
158:24 - and let's put it in here so it doesn't
158:26 - give us an error
158:27 - and then this
158:28 - colon right here is like an or statement
158:31 - if it's not initialized if it's false
158:33 - load the initialize button oops
158:36 - let's do it on c here
158:38 - control b boom should be a lot easier to
158:40 - see
158:42 - okay cool
158:43 - so if initialize true load nothing if
158:46 - it's false load the initialize button
158:50 - oh okay so it's already declared as a
158:51 - const that's fine
158:53 - let's
158:54 - say
158:56 - lit
158:59 - not because it's already declared
159:00 - somewhere
159:04 - const initialized
159:06 - let's see am i declaring it
159:09 - alright initialized
159:16 - no there's no results
159:18 - okay so it is not defined yet
159:21 - so what's the problem
159:25 - let's say lit
159:28 - i'll make it easier i'm just going to
159:30 - make this
159:31 - outside of a header
159:33 - alright so we're going to go up one
159:34 - parent and then bring it back down does
159:36 - that make sense so if we go
159:38 - here
159:40 - let's just say let
159:42 - initialized is equal to true
159:46 - make sure i spell it right
159:48 - and go to header
159:50 - and let's add that in initialized is
159:53 - equal to this is called a prop and i'm
159:56 - passing it initialize as a prop and the
159:58 - name i'll give it is going to be
159:59 - initialized
160:01 - okay and if we go to
160:04 - the airbnb let's see if it's undefined
160:06 - oh now i see it because it's because of
160:08 - the spelling it keeps the spelling wrong
160:10 - so let's go back to
160:12 - the header
160:15 - scroll down
160:18 - initialize
160:20 - okay cool
160:22 - awesome so look at that initialize is
160:24 - true
160:25 - right so we don't see the initialize
160:27 - button this conditional rendering is
160:29 - running this one right and what's
160:31 - happening how come initialize is not
160:33 - here but it's working right it's because
160:36 - i passed it down as a prop right so if
160:39 - you're not sure what props are if you're
160:40 - a complete beginner right think about it
160:42 - that like this right
160:44 - i defined the variable initialized
160:49 - over here right
160:51 - what happens is i passed it down as a
160:53 - prop to here so header knows what
160:55 - initialized is because i brought it down
160:57 - like this
160:59 - okay what we want to do eventually
161:01 - is have
161:03 - our custom hook right to picture this as
161:05 - a hook
161:05 - [Applause]
161:07 - our custom hook
161:09 - which defines initialized right
161:14 - this is our use airbnb hook it's going
161:16 - to define initialized and then we bring
161:18 - our hook into here and then we pass that
161:21 - down to header that's the goal
161:24 - okay
161:25 - right so we know what happens if
161:26 - initialized is
161:28 - true what if initialized is false so we
161:31 - can go back to
161:33 - the index
161:34 - not that index
161:36 - let's go to this index
161:39 - and i believe it's at the top right here
161:41 - set that to false and it should come
161:43 - back up
161:45 - there you go so depending on what state
161:48 - it is this button will show up right so
161:50 - let's give it the styling we want and
161:52 - the function so what i'll do is let's
161:54 - move this initialize to use airbnb
161:57 - so i'm going to erase this it's going to
161:59 - say it's undefined that's right
162:01 - cool
162:02 - it's going to use airbnb
162:04 - and instead of making it a static
162:06 - variable let's make it into a state yeah
162:10 - so if we're going to make it to a state
162:12 - i'm going to say const
162:15 - initialized
162:18 - initialized
162:20 - and set
162:22 - inish initial
162:24 - initialized
162:26 - is equal to use
162:28 - state i think of this as a toggle right
162:30 - so
162:32 - the value of initialize should start as
162:34 - false right and it's going to turn true
162:37 - if there's a connection okay
162:40 - all right so this is a state
162:43 - then i can return
162:45 - initialized
162:47 - okay and it should be false at the
162:49 - moment because that starts at false
162:51 - and then what we could do is go back to
162:53 - this index and we'll bring it back here
162:56 - and now it should be defined again okay
162:58 - you follow it
163:00 - cool right
163:02 - awesome what else can we do here we can
163:04 - set up the set initialized button now
163:08 - well we set up the button but we need
163:10 - the function
163:11 - okay so let's make our first function in
163:13 - here which is going to be initializing a
163:16 - user
163:17 - right so
163:18 - this is and keep in mind we already have
163:20 - initialize user on the blockchain right
163:22 - we're going to call that function but we
163:23 - need to make a function on the front end
163:26 - that called right so we can say const
163:29 - initialize user
163:32 - is equal to asynchronous
163:36 - okay
163:37 - and we always have to have some check
163:39 - here if there's a program
163:42 - and a public key
163:44 - because we don't want to initialize the
163:45 - user if there's no program that goes
163:47 - with it and we can do a try
163:50 - catch here catch
163:52 - just shorten this to error
163:54 - and then we can
163:58 - console.log that error
164:01 - cool
164:02 - and this try catch
164:04 - we can
164:06 - um let's call it right so remember how
164:08 - we got a user all right so first
164:11 - we can do const
164:13 - oops const
164:17 - is equal to find program address sync
164:21 - right and then we have to put in the
164:22 - seeds again so let's put in the seeds we
164:24 - can say utf gates dot encode
164:28 - all right what's the string that we put
164:29 - for the seeds
164:30 - you got it user state
164:33 - okay
164:35 - and then public oops
164:37 - public
164:38 - key
164:40 - dot to
164:42 - buffer
164:45 - you can do alt z real quick and this
164:48 - should be in the array still
164:51 - and then we can do comma program
164:54 - dot program id
164:57 - okay
164:59 - cool
165:03 - all right so what's basically what we're
165:05 - doing is we're getting the profile pda
165:07 - as we showed before
165:08 - right
165:10 - and um it's going to find the pda for us
165:13 - and remember there's not there shouldn't
165:14 - be a user there this is like the test
165:17 - uh if you go back to this this is
165:19 - literally like the test that we were
165:21 - doing
165:22 - for initializing a user
165:24 - this is us generating from seed
165:27 - the
165:28 - the pda address and then we're going to
165:30 - put the user account data at that
165:33 - address okay
165:35 - and for whatever reason that fails oh
165:37 - it's going to console.log and error
165:39 - but what we're going to do next is set
165:40 - up the transaction that happens right so
165:42 - we can say cons tex for transaction and
165:44 - say await
165:46 - program all right this is our program
165:48 - remember uh looking at that object if
165:50 - you do dot methods
165:52 - we have access
165:53 - to all the methods right so i can write
165:56 - this in one line or i can format it like
165:58 - this i can say initialize user right
166:01 - this is me directly calling our smart
166:04 - contract right
166:05 - cool
166:06 - then from here we can say
166:09 - dot accounts all right what is dot
166:11 - accounts that account is our contacts
166:13 - all right so we need to put in this this
166:16 - is the account so we need to put in our
166:17 - authority our public key
166:19 - right
166:20 - our authority
166:21 - our authority our public key and then
166:22 - the program id right
166:24 - so i'll do the authority first i mean
166:26 - our our pda first
166:29 - right and that's the one we generate
166:31 - from seeds so we can say user
166:33 - profile
166:35 - is
166:36 - pro oops
166:37 - profile pda
166:39 - right that's going to be the pda that we
166:40 - generated
166:43 - oh yeah this should be an object
166:49 - [Music]
166:50 - actually okay cool now anymore and then
166:53 - what's the authority right
166:55 - the authority is our public key we have
166:58 - access to that and then do we have
167:00 - access to the system program
167:02 - right we do this should be the lowercase
167:04 - one program
167:07 - is the capital system program it's one
167:10 - of our imports dot
167:12 - program id
167:16 - okay
167:18 - and then we can do a
167:20 - dot rpc
167:24 - cool
167:28 - awesome that's it all right cool so now
167:30 - it's done we can actually
167:31 - put a comma here and pass that function
167:34 - initialize user
167:36 - and then let's go back to pages
167:39 - let's deconstruct it from our hook
167:44 - initialize user
167:46 - and let's bring it
167:48 - to the header
167:52 - yep
167:55 - initialize user is equal to initialize
167:58 - user
167:59 - and this doesn't have to be the same
168:01 - name as this you'll see that in a second
168:03 - and then let's go back to use airbnb
168:07 - and uh we also need to change the state
168:10 - right because once we initialize the
168:12 - user this shouldn't be false anymore it
168:14 - should be true and then we shouldn't see
168:15 - the button yeah
168:17 - okay cool so let's do that
168:19 - okay initializing the user that means
168:21 - after this rpc we can do set
168:24 - initialize to true
168:26 - right and that's not the only time we
168:28 - want to set it to true right in our use
168:30 - effect
168:31 - if you go back to it
168:33 - when should this be true right
168:34 - it should be true it should be true if
168:37 - there's a profile account
168:39 - right we need to
168:41 - set
168:42 - initialized
168:45 - to true
168:47 - all right
168:48 - that's actually one of the first things
168:49 - so i'll put it at the top
168:54 - okay cool
168:55 - uh if it's not true right
168:58 - we need to initialize the user so just
169:00 - in case it's not
169:02 - the last state was true we should make
169:04 - it false and that's pretty much for this
169:05 - else statement
169:07 - right the us seeing the button is
169:09 - literally telling us we need to
169:11 - initialize it
169:13 - okay
169:14 - uh the last thing i want to set up
169:18 - is something called transaction pending
169:20 - right if there's a pending transaction
169:22 - we need to sign for we can make a state
169:24 - for it we can say trend section pending
169:27 - and set
169:29 - transaction
169:31 - [Applause]
169:34 - is equal to use state
169:36 - and again this is just a flag right just
169:38 - like before it's just going to be true
169:39 - or false depending on what happened and
169:41 - should be false at first
169:45 - okay
169:46 - and what i want to do with this is
169:48 - essentially
169:49 - load it again if the transaction is
169:52 - pending so we want to do is make another
169:55 - and here and if transaction pending is
169:57 - false now there's no pending
169:59 - transactions you can load the try catch
170:02 - um
170:04 - let's use effect here
170:07 - oh yeah we only want this use effect to
170:08 - run
170:09 - the based on this dependency module if i
170:11 - don't put anything here it's just going
170:12 - to run once
170:13 - but if i put
170:15 - the public key it's going to run again
170:17 - when the public key ever changes
170:20 - and it will run again if the program
170:21 - ever changes and it's gonna run again if
170:24 - transaction pending ever changes
170:26 - okay
170:27 - so what do we want to do with this
170:29 - transaction pending is whenever we start
170:32 - a transaction we can say set transaction
170:34 - pending to true turn that flag on
170:36 - right
170:37 - and once that flag is done right we can
170:40 - do something called a finally here
170:42 - and do a set
170:44 - transaction pending as false right so we
170:46 - don't have to refresh all the time
170:48 - sometimes this will take care of it
170:51 - cool
170:52 - amazing okay cool so we can head back to
170:55 - the header let's go to the header
171:00 - yep and what we want to do now is let's
171:02 - fix up the styling of this right this
171:05 - button should have the styling
171:08 - that's very similar to the become host
171:10 - button so we can actually just copy in
171:12 - there
171:14 - where is that button okay
171:18 - we can say class name
171:19 - and just paste that in there
171:22 - and more importantly we need an on click
171:25 - on
171:26 - click
171:33 - one click
171:35 - is equal to and we should have access to
171:37 - this
171:38 - initialize
171:41 - user
171:43 - okay
171:46 - there you go it should be defined now
171:48 - let's save that
171:50 - and let's see what happens
171:52 - all right i'm going to truth i refresh
171:54 - this we should see initialized if i
171:57 - click this on click links newspaper
171:58 - function got object okay cool it thinks
172:00 - it's an object
172:02 - let's figure that out
172:05 - why is this an object
172:07 - okay we can test if this is an object
172:10 - but right before we
172:12 - pass it down here you can say
172:13 - console.log
172:15 - initialize oh i see i cse
172:19 - all right did i put it the same name
172:20 - initialize user oh okay i did
172:23 - we can say console.log
172:26 - initialize user
172:28 - comma
172:30 - yo
172:31 - let's see
172:33 - it's a function okay it looks like it's
172:35 - a function it's a function in index
172:36 - right
172:37 - now the trick is is it a function in the
172:40 - header
172:43 - [Music]
172:49 - click refresh
172:50 - i type object
172:53 - that's strange
172:54 - oh i think it's because i weighed the
172:56 - mail the way i made the on click
173:00 - let's put this in here
173:04 - you might like that better
173:07 - hey okay cool it's a function now
173:10 - all right now we do some testing
173:12 - okay that's something
173:13 - initialize user is not a function
173:17 - okay
173:18 - that is interesting ah because it's
173:20 - spelled wrong here too god dammit okay
173:22 - so we're gonna have to
173:24 - spell it wrong over here without the eye
173:30 - well
173:31 - this we can spell right
173:33 - but the used airbnb
173:35 - it should be without the eye and now i
173:37 - might like it
173:38 - and how did i spell here
173:40 - initialize user
173:43 - all right i'm just going to hit refresh
173:44 - one more time
173:48 - hit initialize
173:50 - and see what's up because apparent i
173:52 - know it's a method i spelt it wrong but
173:55 - right
173:56 - and let's see
173:58 - initialize
174:00 - oh dot account okay um
174:06 - yeah this should be dot accounts
174:08 - hit save get this hey okay
174:11 - if you see this this is a very good sign
174:13 - it means that uh this the transaction is
174:16 - going through what matters is if i hit
174:18 - approve uh that it works
174:20 - so let's hit approve oh look at that you
174:22 - guys saw that the button disappeared
174:24 - automatically without me refreshing
174:25 - right so there are some comments down
174:26 - below saying we shouldn't have to
174:28 - refresh you can just set a state that
174:31 - flags if a transaction is pending or
174:33 - loading and once it's done that should
174:35 - go away so let's see if that function
174:37 - worked
174:38 - i'm gonna there should be two user
174:39 - profiles now
174:41 - let's go so this hcd right this was
174:44 - generated from our function right we
174:45 - successfully called a function from our
174:48 - smart contract right the only issue is i
174:50 - spelled it wrong right here right but we
174:52 - can fix that right you can just redeploy
174:55 - the contract i mean upgrade the contract
174:57 - and then just export the idl again right
175:00 - but for now
175:01 - initializing initializing user is done