00:00 - board a fiat club clone that is what
00:03 - you're going to be building in this
00:05 - video you're going to learn how to drop
00:07 - your own nfts using the third web sdk i
00:11 - hope you're excited we'll build a front
00:13 - end to interact with a smart contract
00:15 - using nexjs you're gonna style it with
00:17 - tailwind css you'll also learn how to
00:20 - white list wallet addresses using third
00:23 - web sdk this is a very popular feature
00:25 - that a lot of drops that we know about
00:28 - use and this way they can actually white
00:30 - list which addresses are allowed to
00:32 - actually meant you'll also learn how to
00:34 - separate claim phases using third web
00:36 - and finally we'll show you how you can
00:39 - set up delayed reveal for your nft
00:42 - collection this is a very highly
00:44 - requested feature which is how do you
00:46 - actually delay the reveal of a certain
00:49 - nft drop or nft collection this is
00:52 - something that we see a lot of big nft
00:54 - drops do for example like the nike one
00:56 - we saw you initially get this vial and
00:59 - then when it reveals itself boom you
01:01 - actually see the actual nft so there you
01:04 - have it if you want to actually learn
01:05 - how to build this make sure you smash
01:08 - that like button and as a gift here is a
01:10 - picture of a cute baby panda there you
01:13 - go so thanks for doing that this is the
01:15 - channel where you will become the best
01:17 - web3 developer in the world i'm your
01:19 - host rafikaze and i will be sending you
01:22 - off to sarah who will be your instructor
01:25 - for the remainder of this tutorial she's
01:27 - phenomenal she has her own youtube
01:29 - channel that will pop up right over here
01:31 - and you should definitely follow her but
01:33 - for the rest of this video she'll be
01:35 - your instructor and i hope you're
01:36 - excited sarah take it away hey everyone
01:40 - sarah here welcome to the tutorial we're
01:43 - going to be building this project right
01:45 - here an nft drop like board ape yacht
01:48 - club we can connect our wallet to log in
01:49 - join the allow list to gain access to
01:51 - mint and then actually be able to mint
01:54 - our nfts right from the site so let's go
01:57 - ahead and get into it
02:00 - we're going to be using third web for
02:02 - this which is a powerful developer tool
02:05 - for web3 developers so we'll go ahead
02:08 - and start building
02:10 - and we'll connect our wallet
02:14 - and we're going to choose releasing a
02:17 - drop and we do have our wallet connected
02:19 - here with the rinkeby test network
02:22 - so we're going to choose release a drop
02:23 - and then we'll choose nft drop right
02:26 - here
02:29 - so like we were saying we are connected
02:32 - with the rinkeby test network so make
02:34 - sure that your metamask wallet in the
02:37 - drop down the networks drop down that
02:38 - you have rinkaby selected that's going
02:41 - to allow us to not have to pay ethereum
02:43 - main net gas fees for this tutorial so
02:46 - if you need some rinkaby test ether
02:49 - you can head over to
02:51 - faucets.chain.link slash rinkaby and
02:54 - paste in your wallet address and
02:57 - actually you can go ahead and uncheck
02:59 - the test link here because you just need
03:01 - the test eth
03:02 - and you'll be able to request that and
03:04 - get some sent directly to your wallet
03:08 - so here in our contract on third web
03:11 - we're going to go ahead and choose a
03:12 - name for our collection so let's just
03:14 - say
03:16 - basic tutorial
03:20 - drop
03:21 - and we're gonna pick a symbol here you
03:24 - can pick any symbol you want i'm just
03:25 - gonna say btd
03:28 - and we'll just put in a little
03:30 - description here
03:32 - we'll just say
03:35 - my
03:39 - basey
03:41 - clone
03:42 - nft
03:44 - drop project
03:46 - cool and then we'll go ahead and upload
03:49 - a photo uh as the cover picture for this
03:53 - collection
03:54 - so i have a little board ape logo um
03:57 - saved here so we'll just use that for
03:58 - now
04:01 - down here we're going to configure any
04:03 - payout settings that we want to have for
04:05 - our nft drop so we're going to put our
04:07 - addresses here in the recipient
04:09 - inputs because we're going to get paid
04:11 - whenever our nfts sell
04:13 - and this uh percentage option down here
04:16 - is for royalties from secondary sales
04:18 - you can put however much you want to
04:20 - receive in there and it will go to your
04:22 - wallet every time someone repurchases
04:25 - your nft in a secondary market
04:28 - so we'll go ahead and
04:30 - confirm the transaction
04:33 - to save these settings
04:36 - and we'll wait for a minute for this
04:40 - all right and now we've successfully got
04:42 - the contract here so now we're going to
04:44 - need to create a claim phase in order
04:46 - for people to actually be able to
04:48 - claim these nfts so we'll go ahead and
04:50 - set a claim phase so we'll go ahead and
04:53 - add an initial claim phase
04:56 - you can choose when you want the date
04:58 - and time when you want the phase to
05:00 - start how many nfts are going to drop in
05:02 - each phase you can add as many different
05:04 - phases as you want
05:06 - we'll leave this stuff as it is since
05:07 - we're using rinkeby we'll leave ethereum
05:09 - for the network um and for now we're
05:11 - going to leave any wallet can claim nfts
05:13 - we're going to add our own checks for
05:15 - this later so
05:16 - we'll go ahead and leave all of this
05:18 - stuff for now
05:20 - and we are ready to
05:22 - save this claim phase
05:25 - all right and we'll go ahead and
05:28 - confirm
05:29 - the transaction
05:33 - and now we wait
05:35 - all right success we have saved this
05:38 - claim phase configuration so we're going
05:40 - to go ahead and batch upload our actual
05:43 - nfts now so for this you're going to
05:45 - have to have files that contains either
05:47 - a cvs or json file with the metadata and
05:50 - you're going to have to have the images
05:52 - named in sequential numbering for the
05:55 - file name so we do have a
05:57 - json file here with some metadata for
06:00 - our nfts different attributes and names
06:03 - and all that stuff that's set up right
06:05 - here so we will just go ahead and upload
06:08 - the folder containing that json file and
06:11 - our png images of our different nft
06:15 - artwork and here we are so we can see
06:17 - here our import was successful we've got
06:19 - all of our metadata and we've got our
06:22 - images for our five nfts that we want to
06:25 - put in this collection you could do this
06:26 - with a much larger set however large you
06:28 - want but we're just going to do this for
06:30 - an example today
06:32 - so we'll click next we have a couple
06:33 - options here if we want to reveal the
06:35 - artwork uh on a delay or upon mint for
06:38 - now we're just going to go ahead and
06:40 - select the first option and we will
06:42 - upload these nfts
06:49 - all right and then once again we're
06:51 - going to go ahead and confirm the
06:53 - transaction here
06:59 - all right
07:01 - so that was successful now if we go over
07:04 - to the overview for our contract we can
07:07 - see we have a total supply of five none
07:10 - of them are claimed yet and we can see
07:12 - all of the content that we just uploaded
07:14 - is present right here
07:16 - and if you want to check out some more
07:18 - info on this you can look at the third
07:19 - web docs on their nft drop contract
07:23 - all right let's head over and get into
07:24 - some code so i'm going to pull up a
07:26 - terminal here
07:27 - and just go into my
07:30 - projects folder
07:32 - and then i'm going to run the command
07:34 - npx
07:35 - create
07:36 - next app
07:38 - and this is going to somewhere it's like
07:39 - create react app this script is going to
07:43 - generate a
07:44 - ready-made next js project
07:50 - so i'm just going to name this like nft
07:54 - maybe like bassy nft
07:58 - drop tutorial
08:03 - and maybe if i spelled it right that
08:04 - would also be nice
08:06 - all right
08:07 - we'll let that run
08:10 - okay when that finishes um we're gonna
08:12 - go ahead and cd into the project
08:15 - and then we're going to install a couple
08:18 - packages that we're definitely going to
08:20 - need for this build so we're going to
08:22 - install third web dev sdk ethers and air
08:27 - table as well as tailwind css
08:31 - so that's probably going to take a
08:32 - second so i will see you in one moment
08:37 - oh and
08:39 - we're actually going to realize that i
08:41 - misspelled air table again so if we fix
08:44 - that
08:44 - and run this command um now i'll
08:47 - actually see you in a second
08:48 - okay now that that's done i'm going to
08:50 - go ahead and just say code space dot and
08:53 - that's going to open up a vs code window
08:55 - for us with this project so i'll just
08:57 - move
08:58 - these around a little bit so we can see
09:01 - everything a little bit better we can
09:02 - see it's generated our project files
09:04 - here for us
09:05 - and there actually are a couple of other
09:07 - packages that we're going to need to
09:09 - install really quick for the tailwind
09:11 - configuration so we'll just do npmi
09:13 - post css
09:15 - auto prefix
09:19 - and then we will run the tailwind init
09:22 - command and we will see that that has
09:25 - generated a couple of tailwind
09:26 - configuration files for us
09:29 - over here in our project so in the
09:31 - tailwind config file we'll go ahead and
09:34 - just paste in the file path that we need
09:36 - there in the content array in the config
09:40 - and save that
09:41 - so now we're ready to go with tailwind
09:43 - and we can go ahead and add these
09:47 - tags to the global css file
09:52 - so now we can use tailwind throughout
09:54 - our app which is going to make styling
09:55 - so much easier so let's move this stuff
09:58 - again so we can see it a little bit
09:59 - better
10:00 - and in fact
10:01 - i'm going to go ahead and just open up a
10:02 - terminal here in vs code so we can just
10:05 - see that on one side of the screen
10:07 - so now we'll just run npm run dev to go
10:11 - ahead and run this project
10:15 - so we'll wait for that for a second and
10:17 - then we can go ahead
10:19 - and open up a browser window here
10:22 - and we'll just go to
10:24 - localhost
10:28 - there we are
10:29 - and we can see we have a working next.js
10:33 - project uh
10:34 - here in our browser ready to build
10:38 - so let's check out some of these files
10:40 - we'll head over to index.js this is kind
10:42 - of the main page that we're seeing
10:44 - displayed here and we're going to go
10:47 - ahead and make some changes in this file
10:49 - to start with so
10:51 - let's create a variable to store our
10:54 - edemast address because the first thing
10:56 - we're going to need to do is be able to
10:58 - log in with our metamask wallet like we
11:00 - saw in the demo so we're actually going
11:02 - to need to go ahead also and
11:05 - install another
11:07 - uh package to be able to do this so
11:08 - we'll just install that really quick
11:10 - okay
11:11 - and then we will import
11:13 - this use address
11:16 - from
11:17 - the package that we just installed third
11:19 - web dev react
11:21 - and we're also going to implement
11:23 - connect
11:24 - with metamask
11:26 - from this package
11:29 - use metamask
11:33 - and just go ahead and add that up here
11:36 - to the import
11:40 - all right and then we're also going to
11:41 - use
11:43 - this connect as well
11:46 - disconnect
11:48 - equals
11:52 - and then we'll need to import this also
11:55 - from third web dev
11:59 - use disconnect
12:01 - all right now if we come down to our
12:04 - main component area here
12:08 - we're going to go ahead and wrap all of
12:10 - this in jsx fragments
12:14 - so we'll just do like that
12:17 - and move this one down
12:20 - so that we can go ahead and
12:22 - conditionally render this content here
12:24 - so we want to say if there's an address
12:26 - connected then you'll be able to see
12:29 - this main page content
12:31 - if not
12:32 - then you're gonna see our little
12:35 - login button here
12:38 - which we're going to create
12:44 - in the second part of this block
12:49 - else
13:02 - button
13:07 - and we'll just say
13:09 - login
13:12 - all right cool so we're going to notice
13:14 - that we get an error when we save these
13:15 - files because we have not wrapped our
13:17 - app in a third web provider so we need
13:20 - to come over here to our app.js file
13:24 - and open this up
13:26 - and here we are going to wrap the main
13:29 - component in the third web
13:32 - provider so up here at the top we're
13:35 - going to start by
13:36 - importing
13:38 - the
13:39 - chain id as well as
13:42 - the third web provider
13:48 - and that's going to come from our
13:51 - third web dev package as well
13:55 - and then inside this function here
13:59 - let's just
14:01 - convert that real quick
14:02 - there we go
14:04 - we're going to wrap the component in the
14:06 - third web provider and we're going to
14:08 - pass it our desired chain id which in
14:10 - this case we are using the rink b
14:13 - network as we recall
14:15 - so it's dot
14:17 - rinkaby there we go
14:21 - and then we're going to also pass in
14:24 - the
14:25 - chain rpc
14:27 - which is required
14:30 - for our
14:31 - chosen network
14:32 - so we'll chain our pc equals
14:37 - and then we're going to say
14:39 - chain id
14:42 - dot rinkeby again
14:45 - okay b
14:48 - and then we're going to
14:50 - give this the string of the infura url
14:54 - which you will need to sign up for
14:56 - infuria and get an api key
14:58 - for this if you do not have one already
15:01 - and make sure that that is with the
15:03 - rinkeby network
15:05 - url
15:06 - now when we save this
15:09 - all right and we get an error
15:11 - use disconnect is not defined ah okay
15:14 - come over to our index file here and i
15:17 - misspelled disconnect so that's
15:20 - definitely not going to help all right
15:21 - so now we can see we are seeing the
15:23 - login uh option rendered here because we
15:26 - have not connected our wallet yet
15:30 - now right now this is looking pretty
15:31 - ugly so we're going to come over here to
15:33 - the styles we'll delete the default one
15:36 - and the places where that's imported
15:38 - and we're going to just see if we can
15:40 - make this look a little bit better so
15:42 - we'll paste in some other styling
15:44 - that we have already pre-made and ready
15:46 - to go here and then we're going to go
15:48 - ahead and create a components folder and
15:50 - create a new component called login
15:53 - and this is just going to help to make
15:55 - the styling a little bit cleaner and
15:57 - make the code easier to read so we're
15:58 - going to break this out into its own
16:00 - component and use tailwind to give it a
16:04 - class name wrapped in a styles object
16:06 - that we can access inside the component
16:09 - and it's going to pass on click
16:12 - login function as props
16:14 - all right so coming back over to our
16:16 - index.js file now we're going to go
16:19 - ahead and use that component right here
16:22 - and we're going to import that up at the
16:24 - top
16:25 - all right let's take a look
16:27 - at this well first let's also add in
16:31 - our
16:32 - login
16:34 - on click prop here
16:38 - and we're going to call connect with
16:40 - metamask when the button is clicked in
16:43 - the component so let's save this
16:46 - and there we go already looking a little
16:48 - bit better at this point and actually
16:50 - let's just go ahead and
16:52 - go over here in index and let's just get
16:55 - rid of all this uh default boilerplate
16:58 - stuff that's in here so we can see this
17:00 - a little bit easier so we'll just delete
17:02 - that and we'll put home page in here so
17:06 - we can just kind of
17:07 - have better view of this
17:10 - all right so
17:11 - let's come back over here i'll move this
17:14 - so it's easier to see
17:16 - and
17:17 - here we go
17:19 - all right so if we click connect with
17:20 - metamask we'll see our metamask wallet
17:23 - pops up and we can go ahead and connect
17:25 - our wallet and once it's connected we
17:27 - are taken to the home page view so we
17:30 - can see that that's working the
17:32 - conditional rendering works but it still
17:33 - looks pretty ugly so i have a few uh
17:36 - styling things that i'm just gonna paste
17:37 - in here really quick to use google fonts
17:40 - throughout the app and start making this
17:41 - look a little better um and then some
17:44 - other tailwind fonts that i'm going to
17:46 - put in a styling object here in index
17:48 - and start laying out a little bit of
17:50 - kind of the
17:51 - the overall look of the different
17:53 - sections that we're going to have for
17:54 - this app so we can start getting some
17:56 - things in place here okay so we're going
17:58 - to have
17:59 - some claim faces we're going to display
18:01 - our nfts and let's go ahead and make a
18:03 - header really quick so we can start
18:05 - building in some of the actual
18:06 - functionality that we need so
18:08 - i'm going to use a logo
18:11 - which i have again a nice board ape
18:14 - yacht club logo that i'm just gonna put
18:16 - here um in this image that i'm gonna be
18:18 - using from the next js built-in ui
18:22 - components
18:23 - some different menu options for the
18:25 - header all right so this is starting to
18:27 - look a little bit better a little bit
18:29 - more on theme we've got some header
18:30 - options we've got the logo we know that
18:33 - we're going to have some different
18:34 - components in here so let's start
18:35 - building those out
18:37 - i'm going to go ahead and just comment
18:39 - this claim phases component or claim
18:42 - phases div out for now and we're going
18:43 - to break out a hero component here real
18:46 - quick
18:47 - because i do have a description and some
18:49 - stuff about the project to paste in here
18:51 - we'll just import that again looking
18:53 - much better all right so now we're going
18:55 - to create i'm going to grab another
18:57 - terminal here and we're just going to
18:59 - import another npm package that we're
19:00 - going to use for some ui stuff the
19:03 - headless ui
19:05 - react package and this is going to give
19:07 - us some handy little items that we can
19:09 - use for the drop down menu here in the
19:11 - header so
19:13 - we're gonna import
19:15 - menu
19:16 - and transition
19:19 - from
19:20 - this package
19:22 - and then we're going to go ahead and add
19:24 - some more styling and we will
19:27 - put these menu item components down here
19:30 - in the header
19:31 - and all of our transition styling all
19:34 - right
19:35 - so now we're going to add a menu item
19:37 - option
19:38 - for a disconnect button so we'll just
19:41 - put
19:42 - the
19:44 - active
19:45 - equals
19:47 - button
19:48 - disconnect
19:50 - and then for the styling on this one um
19:53 - we're gonna pass in the uh prop it's
19:55 - gonna be on click it's going to trigger
19:58 - the log out function and the parent
19:59 - component so we're gonna pass that in
20:01 - here
20:02 - and then for the styling we're gonna
20:03 - have a dynamic class name that we're
20:07 - going to toggle
20:08 - between the active state
20:10 - so we'll put that in here
20:12 - and then to make that work let's see
20:15 - it'll be button
20:17 - inactive
20:21 - and then this is also going to use
20:22 - another package called hero icons react
20:26 - for this ui so i'm just going to npm
20:28 - install
20:29 - that really quick as well all right so
20:32 - now we're going to go ahead and create a
20:34 - utils folder so that we can add a helper
20:37 - that's going to help toggle between
20:38 - these dynamic class names for the
20:40 - styling we just made so we'll create a
20:42 - file in there
20:43 - we will call it
20:44 - classnames.js and i'm just going to
20:46 - paste in what we need here to make that
20:50 - toggle happen so now if we click this
20:52 - drop down oh we get an error let's see
20:55 - class names is not defined
20:58 - all right okay we need to import this
21:00 - helper right we didn't do our import yet
21:02 - so here in the header component here up
21:05 - at the top we're just going to go ahead
21:07 - and
21:08 - import class names from utils all right
21:12 - so
21:14 - now
21:15 - if we click on this
21:17 - we see it's kind of wonky styling but we
21:20 - are getting a disconnect option
21:22 - um here in the drop down that is
21:25 - functional all right so coming back to
21:27 - our index.js file let's work on this nft
21:31 - display
21:32 - section a little bit here so we're going
21:33 - to create another component for this and
21:36 - break this part out a little bit
21:39 - and then just create const display
21:41 - create a little component in here
21:44 - and then i'm gonna go ahead and drag in
21:47 - our nft artwork our five images so if we
21:50 - take a look at those here we can see
21:52 - we have our five apes
21:54 - so i'm gonna go ahead and just make a
21:57 - nfts
21:59 - array here in this component so we can
22:02 - just map over these and display them a
22:05 - little carousel on our landing page here
22:09 - so we've got the path to each one of
22:11 - these images
22:13 - slash
22:15 - vasey
22:17 - two
22:18 - all right and then we'll just add some
22:19 - more styling
22:20 - and then since this is gonna be a
22:22 - carousel here we're actually going to
22:25 - use the tailwind snap x
22:28 - css property to enable horizontal
22:31 - scrolling here which is kind of nice to
22:32 - have so
22:34 - we're going to set that up overflow x
22:38 - scroll
22:41 - and give it a little bit of padding
22:43 - so now we're going to
22:46 - map over our nft pictures
22:49 - and for each one we're going to display
22:52 - the image put a little bit of styling on
22:55 - there as well and we're going to use
22:56 - that image component from
22:58 - next js once again
23:01 - and give it the source of each one of
23:03 - those
23:05 - urls for the images and some styling
23:08 - there as well
23:10 - okay and we have to import that at the
23:12 - top so now we'll come back to index.js
23:14 - and we are going to replace the existing
23:18 - nft display text with this component
23:20 - that we just created so now taking a
23:23 - look at this we have a nice carousel
23:25 - component we can scroll
23:27 - through our different images here and
23:30 - this page is starting to take shape a
23:32 - little bit so we're going to take a
23:33 - break from this and we're going to go
23:34 - over to airtable.com
23:38 - if you don't have an account you'll need
23:39 - to create one and i have a little
23:42 - workspace created here for the basi nft
23:45 - drop tutorial that we're doing right now
23:47 - so i'm just going to go into that but
23:48 - you can create your own
23:50 - error table is just a cloud spreadsheet
23:52 - database that we can use for
23:54 - keeping track of our allow list here so
23:56 - if we go over to our account this is
23:58 - where you're going to need to generate
24:00 - an api key for airtable so
24:03 - let's come back over to our code here
24:06 - for a second and we're going to
24:08 - um actually let me
24:10 - maybe close some of these out here real
24:13 - quick
24:14 - just to get these out of the way all
24:17 - right then we're going to go to the root
24:18 - of our project and we're going to
24:21 - also close these up
24:24 - and we'll create a new file called env
24:28 - and in here is where we're going to
24:30 - store our api keys and important
24:32 - environment variables that we can reuse
24:34 - so we're going to say error table api
24:36 - key we're also going to need a base id
24:39 - and the table name and we can store all
24:41 - those here in the env file and reuse
24:43 - them throughout the app so generate your
24:45 - api key paste in there don't share it
24:47 - with anyone then we're going to go to
24:49 - this neat help tab right here and go
24:51 - down to api documentation at the bottom
24:54 - and right here it's going to show the id
24:57 - of this base you're also going to need
24:59 - to paste that into your emv file as well
25:02 - so we're going to come back over to the
25:04 - header file and we want to create a way
25:06 - to actually join this allow list and add
25:08 - a record to the air table that we just
25:10 - set up so we're going to come to where
25:12 - we have this disconnect button and i'm
25:14 - just going to copy that and create
25:16 - another menu item in this drop down just
25:19 - like this but this time this one is
25:21 - going to be for
25:24 - the join allow list so we're going to
25:26 - make the button join
25:28 - allow
25:29 - list
25:31 - and it's going to trigger the function
25:34 - join
25:36 - allow
25:37 - list
25:38 - on click
25:40 - so this component is now going to expect
25:44 - also a join allow list prop and then
25:47 - over in index.js we're going to pass
25:50 - that into the header component
25:52 - join
25:53 - allow list
25:55 - and then we're going to need to actually
25:58 - write that function here in this
26:00 - component in the parent so we're going
26:02 - to say const join allow list
26:06 - async
26:10 - arrow
26:12 - and we're going to set loading state in
26:15 - here since this is an async function so
26:17 - we're going to say set loading true
26:19 - which means that we're going to need to
26:21 - hook into the react use state hook to
26:24 - set this loading state so const
26:28 - loading
26:30 - set loading
26:33 - equals
26:34 - use state
26:37 - and we'll default to false and then up
26:39 - here we're just going to
26:42 - need to go ahead and import
26:44 - that use date hook from react
26:48 - okay back in our function
26:50 - let's add a console log in here just to
26:53 - make sure that the click is making it um
26:56 - all the way up to where it needs to be
26:58 - in this function in the flow so let's
27:00 - test this here if we open up our browser
27:02 - console
27:04 - and go to the console
27:06 - all right
27:08 - and open this up
27:11 - need a little more styling work still
27:12 - there but if we click join allow list we
27:15 - can see it there in the browser console
27:17 - so we know everything is working so far
27:19 - i'll pull this down a little bit so we
27:20 - can see everything a bit better
27:23 - okay
27:23 - so in order for this to actually work
27:25 - we're going to need access to
27:27 - the actual error table that we just
27:29 - created so let's go down to utils and
27:32 - i'm going to make a file called
27:33 - airtable.js
27:35 - and i'm just going to
27:37 - import
27:38 - the
27:39 - import airtable from the airtable
27:41 - package that we installed at the
27:43 - beginning
27:45 - from
27:46 - air table
27:50 - and then
27:52 - i will set up the error table
27:54 - configuration
27:56 - so we're going to be pulling in values
27:59 - from
28:00 - the env file that we had just pasted in
28:02 - there our api key process dot enb
28:05 - dot air table api key
28:10 - and air table dot base
28:13 - base id
28:16 - and
28:17 - process.enb.airtable table name and
28:19 - we'll export
28:20 - this
28:22 - now let's come up to the api folder and
28:25 - we can go ahead and delete the default
28:27 - hello.js file that was already in there
28:30 - and we're going to create a new file
28:31 - called add allow list
28:33 - dot js
28:36 - inside this file we're going to set up
28:38 - our api handlers so
28:41 - i'll import
28:43 - the table
28:46 - from the utils
28:48 - where we just
28:49 - made it
28:56 - and then export default
29:02 - and we'll make a handler function
29:04 - and inside the try block
29:07 - we are going to await
29:09 - the results from table dot create
29:15 - and we are going to give it
29:20 - the field
29:21 - address
29:28 - that we'll be passing in so
29:30 - and the response dot status 200
29:34 - success
29:36 - json
29:41 - true
29:44 - and we'll put a message that says user
29:46 - added
29:48 - to allow list
29:53 - okay
29:55 - so we have a handler for this let's come
29:57 - back down to utils let's create a file
29:59 - called allowlist.js and in here we're
30:02 - going to
30:04 - set up our actual fetch call so we'll
30:06 - make a large function called export
30:09 - const use allow list that's going to
30:11 - contain the different ways we can
30:13 - interact with the allow list so we're
30:15 - going to do cons join allow list
30:18 - and this is going to be a call to the
30:20 - add allow list endpoint that we just set
30:22 - up it's going to be a post request
30:24 - that's going to pass along the address
30:27 - and the success is going to await
30:29 - response
30:31 - and return true
30:33 - and right up above this i'm just going
30:35 - to paste in a comment that tells us
30:36 - we're taking in the current connected
30:38 - wallet address as a parameter adding it
30:40 - to the user allow list and returning
30:42 - true if it's successful
30:44 - so now we can access this in index.js so
30:46 - let's say const allow list equals use
30:52 - allow list
30:55 - this doing this tutorial has really
30:56 - shown me how bad i actually am at typing
31:00 - okay so now we're going to import that
31:04 - up at top
31:06 - use allow list
31:10 - wow list
31:12 - from
31:15 - that utils folder
31:19 - allow
31:21 - list
31:25 - now we can continue with actually making
31:28 - this join allow list function
31:30 - work so we'll go ahead and
31:34 - make it try catch down here we're going
31:37 - to await allow list dot join
31:40 - if success set allows true
31:43 - and catch error log error
31:48 - so when we save this it looks like we
31:50 - have an error allow list use allow list
31:53 - is not a function
31:55 - uh let's see here lawless
31:57 - okay well first of all i put a capital
31:59 - letter in here um but second of all i
32:02 - did not return anything from this use
32:04 - allow list function so let's add that uh
32:07 - return block and we're gonna be able to
32:09 - access it through join it's gonna call
32:11 - join allow us
32:13 - okay let's say that
32:14 - and see what happens here actually
32:16 - there's one more thing we need to do to
32:17 - make this work we need to update an air
32:19 - table the name field to address since
32:21 - that's what it's going to be expecting
32:22 - in our handler
32:24 - all right so now let's click on this
32:27 - drop down click join allow list
32:30 - and if we check over an air table
32:32 - there's our address updated right there
32:36 - so going back here we now want to store
32:39 - the fact that
32:40 - we are in the allow list in state so
32:43 - we're going to say const
32:45 - in allow list
32:51 - set and allow
32:54 - list
32:58 - equals
33:00 - use state
33:03 - and default to
33:05 - an empty array
33:08 - now
33:09 - actually since we have a loading state
33:12 - now that we've done this function let's
33:13 - just go ahead and add that in our main
33:15 - component too so we'll just say loading
33:18 - and actually let's create a little
33:19 - loading component here really quick so
33:21 - we'll come over
33:23 - to the
33:25 - components folder
33:27 - and create a new file
33:29 - um
33:30 - oops there we go loading dot js and i'm
33:34 - just going to paste in a component that
33:36 - i have for a load spinner so we don't
33:38 - have to sit here and watch me type out
33:41 - this entire
33:42 - load spinning component
33:44 - so now that we have that we'll go back
33:46 - over to the index file
33:49 - and we'll just go ahead and put that
33:51 - here inside our little loading block
33:56 - and import that
33:58 - now we're going to start making some
33:59 - changes in the hero component so we're
34:01 - going to put some options down here
34:02 - where we can start actually interacting
34:05 - with the nft drop contract that we set
34:07 - up with third web so to be able to
34:09 - access that we're going to need to set
34:11 - that up so let's go down to utils and
34:14 - create another file in here and we will
34:17 - call it
34:19 - nft
34:21 - drop dot js
34:24 - and in here
34:25 - we are going to need to import
34:28 - the third web
34:30 - sdk
34:35 - and
34:37 - get a new instance of the third web sck
34:40 - we're using the brinkman network
34:42 - and we want to access
34:45 - our
34:47 - nft drop through the sdk so we're going
34:49 - to pass in once again
34:51 - a value from the env file public nft
34:56 - drop address
34:58 - and we're going to export
35:00 - the nft drop contract that we now have
35:03 - access to and to get this public nft
35:05 - drop address you're just going to go
35:07 - back over to your third web dashboard
35:09 - and the the contract address is right
35:11 - there you can just copy it paste that
35:13 - into your env file and pass it into the
35:16 - third web sdk so we can now interact
35:18 - with this nft drop contract
35:21 - all right so back in index.js we're now
35:24 - going to get an instance of this set up
35:26 - so we're going to say
35:28 - const nft drop equals
35:31 - use nft
35:33 - drop and we're gonna again pass in
35:37 - our nft
35:39 - contract address
35:41 - and that use nft drop function can just
35:43 - be imported here from the third web
35:46 - dev package
35:48 - okay in the api folder we're going to
35:49 - need another new file get
35:52 - nftdrop.js
35:53 - and here we're going to set up a handler
35:55 - function for interacting with the
35:57 - contract so we'll import
36:00 - nft drop again
36:02 - and just create
36:05 - export a handler function here
36:09 - and then we're just basically going to
36:11 - get all the
36:13 - metadata about this nft drop that we
36:16 - need to display
36:18 - so we're going to say
36:20 - const
36:21 - claimed
36:22 - equals
36:24 - a weight
36:26 - and a t drop dot get all claimed and
36:29 - we're just going to grab the total the
36:31 - claim conditions the claim supply the
36:33 - total supply we can just grab all this
36:35 - stuff off the contract that we want to
36:37 - display the price the phases that we've
36:40 - set up we can map through those
36:42 - right in here and then we're going to
36:44 - return all of that in our success
36:46 - response
36:48 - now back in index.js we're going to set
36:50 - up a use effect hook so that we can
36:52 - actually get these values and pass them
36:55 - into
36:56 - our hero component so first we're going
36:58 - to make sure that there's an address
37:02 - return
37:05 - and then we'll say const
37:07 - get nft drop details
37:12 - and we're gonna need a try catch in here
37:25 - and we're going to use destructuring to
37:28 - assign each one of these variables
37:32 - for our nft drop details
37:35 - wait
37:36 - fetch
37:38 - fit oh hold on fetch
37:41 - i don't think we've set up our
37:43 - our http requests yet so we need to
37:45 - create a file called fetch.js and we're
37:47 - just going to go ahead and set up these
37:49 - we'll do a post and a get because we
37:51 - know we're going to need these and i'll
37:53 - add some comments on the parameters and
37:55 - we'll return
37:56 - get and post
37:58 - from use fetcher
38:01 - now in index.js
38:04 - we can
38:06 - set up a variable for this
38:08 - const fetcher
38:11 - equals use
38:14 - fetcher
38:16 - and import that
38:18 - now in this function we can actually
38:20 - await
38:21 - the response from api
38:24 - get nft
38:25 - drop
38:26 - that we just built
38:29 - and then i'll just wrap up the rest of
38:32 - this
38:33 - function and we're going to go ahead and
38:35 - store all of these variables in state so
38:37 - i'll go ahead and set that stuff up too
38:40 - so we can pass this into our
38:43 - hero component so let's just quickly put
38:45 - a console log in here we've done quite a
38:47 - bit of stuff i'm just going to paste
38:49 - these variables here and let's make sure
38:51 - we're getting values back for this stuff
38:52 - so if we come over to the browser
38:54 - console
38:55 - and there we go we see we're getting
38:58 - value back for the price the claim
39:00 - supply
39:01 - the
39:02 - the claim phase start time so now we can
39:05 - still go ahead and start passing these
39:07 - props into our hero component
39:11 - so we can display them if we come here
39:13 - into hero js close some of these extra
39:17 - windows here and now we're going to be
39:19 - expecting these props to be passed in
39:21 - total supply allow list price claim
39:23 - phases
39:25 - all right so let's set up a section here
39:27 - at the bottom
39:28 - and if
39:30 - the wallet is in the allow list then we
39:33 - want them to be able to see a button to
39:36 - mint
39:37 - so we'll say mint your
39:39 - nft
39:41 - and it'll display the nft price and
39:43 - we're going to work on that conditional
39:45 - rendering um here in a second
39:47 - and then we also want to show the
39:50 - whether or not there's a wallet
39:52 - connected we want to show the claim
39:54 - supply and total supply
39:57 - of this nft collection
39:59 - so a little bit more styling here too
40:01 - just to make this mint button look a
40:03 - little bit better as well
40:05 - all right let's see
40:07 - how this is looking okay so we have a
40:09 - button and we can see it's coming back
40:11 - the correct price 0.0 each and we can
40:13 - see that it's getting data for 0 out of
40:15 - 5 um pieces of artwork claimed
40:19 - so this is getting closer now we
40:21 - actually want to be checking over here
40:22 - an air table to make sure that our
40:24 - wallet address is there before we're
40:26 - able to access the mint so we need to
40:28 - set up in allowlist.js
40:30 - we need to set up a check
40:33 - allow list function
40:35 - that we can also access through use
40:37 - allow lists to make sure that our
40:39 - address is in fact
40:42 - in the
40:43 - allow list on air table
40:46 - so we'll set that up and we will add
40:49 - check
40:50 - as one of the options in the return
40:52 - block let's not forget that this time
40:54 - and then in the api folder we'll create
40:56 - a new file called check allow list
41:01 - dot js
41:03 - and we need to set up a handler for this
41:05 - request too it's going to return true if
41:08 - the records.length is greater than zero
41:11 - for this wallet in the allow list error
41:14 - table
41:15 - back in index.js we're going to add
41:17 - another use effect to handle this check
41:21 - in allow list function and we're going
41:22 - to save that in state as well now we're
41:26 - getting close there's one more piece of
41:28 - this we need in order for this to work
41:29 - so we need to actually go back over to
41:31 - air table here in this handler function
41:33 - we have minted as one of the
41:35 - field names it's looking for so back
41:37 - over an air table we need to go ahead
41:39 - and change that name to mint it now if i
41:41 - remove my address from error table we go
41:43 - back we see that i no longer see the
41:44 - mint button because i'm not part of the
41:47 - allow list if i join now the mint button
41:49 - is there back in air table there's my
41:50 - address so we're getting close things
41:53 - are starting to we're starting to see
41:55 - things working so
41:56 - next we need to go ahead and implement
41:58 - this for the header the same allow list
42:00 - check because if we're already in the
42:02 - allow list we don't really need to see
42:04 - the join allow list option in the header
42:06 - so we can just quickly use that same
42:08 - conditional rendering and now we see if
42:10 - we join the allow list and go back up
42:12 - that option no longer appears for us in
42:14 - the drop down
42:16 - now what's left is mint so i'll close
42:19 - out some of these extra windows and
42:21 - we'll go over to our
42:23 - hero component and we're going to start
42:25 - actually making our mint function work
42:27 - so we'll start kind of from the bottom
42:28 - up for this one and we'll pass we'll say
42:31 - we want the on click to trigger
42:33 - the mint nft function that's going to be
42:35 - in the parent so then that means we need
42:37 - to go up and add that to our props mint
42:43 - nft
42:45 - back over in index.js now the hero
42:48 - component is going to expect mint nft
42:51 - and it's going to call a mint nft
42:53 - function that we're going to create here
42:56 - in index.js constant nft
43:00 - nft drop and a try catch
43:03 - inside of here we are going to
43:06 - set
43:07 - the value of quantity to one so we're
43:09 - going to min one nft
43:11 - and the transaction
43:14 - is going to
43:16 - access the nft drop contract and it's
43:19 - going to access the claim function on
43:21 - that contract the claim to and we're
43:23 - going to pass in our address in the
43:25 - quantity of one or i should say the
43:28 - logged in address and the quantity of
43:29 - one
43:30 - and then we will create
43:32 - const claimed nft
43:35 - is the nft that we just claimed which
43:38 - will be the first in the response array
43:40 - back from that transaction value
43:44 - if
43:45 - claimed nft
43:49 - we await allow list dot update we will
43:52 - need to update that
43:55 - this nft has now been minted so we need
43:58 - to implement this update functionality
44:00 - let's come back down to allow list and
44:02 - you guessed it we're going to create
44:04 - another updated allow list function here
44:07 - return
44:08 - update
44:09 - in the return block we need to make an
44:11 - api file for this
44:13 - update
44:14 - allow list
44:16 - and we will add a handler
44:18 - for this one as well
44:21 - all right so
44:22 - if we try this out
44:25 - nothing happens
44:26 - all right let's take a look here
44:29 - um
44:30 - mint
44:32 - nft
44:33 - ah so we passed the mint nft into the
44:38 - function into the header component
44:39 - instead of the hero component so that's
44:41 - obviously not going to work so we'll
44:43 - just go ahead
44:44 - and move that down and save that all
44:47 - right let's give this a try now
44:50 - if we mint
44:53 - we're going to be able to see our
44:55 - metamask wallet pop up
44:57 - and we will just go ahead
44:59 - and
45:01 - confirm
45:07 - and we will wait for that
45:09 - and there we go we can see it updated
45:11 - one of five has been claimed if we go up
45:15 - to our wallet and we just check our
45:17 - transactions we can see the claim that
45:20 - we just made right there zero eth
45:22 - because we made the price zero each if
45:24 - we go to our third web dashboard and
45:25 - refresh that we can also see claimed
45:27 - supply of one and there's our wallet
45:30 - address right there as the owner of this
45:33 - first nft
45:36 - so at this point this is most of the
45:38 - functionality we're able to join the
45:40 - allow list and mint and we don't have
45:42 - those options if we're not on the allow
45:44 - list so as a quick bonus we'll go ahead
45:46 - and make it so that we can actually
45:48 - download the allow list if we wanted to
45:50 - we'll have an admin address with that
45:52 - capability so
45:53 - in the header js component we'll just go
45:57 - ahead and copy another menu item and
46:00 - paste it and make this the download
46:02 - button download allow list this is going
46:04 - to follow pretty much the same pattern
46:07 - as these other
46:09 - options have followed so we'll just go
46:11 - then into
46:13 - list js we're going to need to add a
46:15 - download allow list i'll just paste it
46:17 - in
46:18 - so that we can see it there add that to
46:20 - the return and then of course we're
46:22 - going to need to follow the pattern make
46:24 - the handler get
46:26 - allowlist.js and i'll paste that one in
46:29 - as well
46:30 - and over here we get an error is admin
46:33 - is not defined so we need to actually
46:35 - set up the ourselves as the admin here
46:38 - so we'll have the option to download the
46:40 - allow list as a csv
46:42 - so we need to pass his admin as a prop
46:46 - into the header as well so we're going
46:47 - to have that download button option
46:50 - and let's see in the
46:53 - header.js file we also need to be
46:56 - expecting that prop here
47:00 - all right so now if we click here we do
47:02 - see the download allow list option and
47:04 - if we click that button
47:06 - we are going to see a csv download if i
47:09 - open that up sure enough there's our
47:11 - wallet address which is the one address
47:13 - in the air table
47:14 - so that's pretty much it for this
47:16 - tutorial i hope you're ready to go build
47:18 - your own
47:19 - nft drop using third web and we'll see
47:22 - you in another video