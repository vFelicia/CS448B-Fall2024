00:00 - - Hey, you. What is up?
00:01 - How's it going? This is Qazi
from CleverProgrammer.com.
00:05 - In this video, I'm going
to talk about how you
00:08 - can get a job as a
python developper in 2018
00:12 - and what skills you should focus on.
00:14 - So without any further ado,
let's jump right into it.
00:17 - (upbeat music)
00:29 - Alright, so in this video,
I'm going to talk about
00:31 - very, very practical things,
00:32 - and I'm not going to
give you fluffy advice
00:35 - I'm going to give you specific stuff,
00:37 - some book recommendations as well
00:38 - and what are the most
important things you need
00:40 - to focus on so you can
build your skills as well as
00:44 - turn it into getting a job.
00:46 - Okay, whether it's full-time, freelancing,
00:48 - whatever have you.
00:49 - Alright, my friend.
00:50 - Tip number one: Build
your GitHub repository.
00:54 - Now, does it have to be GitHub, Qazi?
00:57 - No, my friend. You can use BitBucket,
00:58 - you can use GitLab, whatever you want
01:00 - to host your code online,
please don't use Dropbox
01:03 - or send your code through Zip Files
01:05 - because nobody wants to see that.
01:06 - So...
01:08 - Start on GitHub early on.
01:10 - Learn Git version control early on
01:13 - because those will be
very, very key skills
01:16 - when it comes to you landing a job.
01:18 - And you want to learn these skills,
01:21 - and these skills are fundamental
01:22 - for any programming language.
01:24 - And once you learn these,
01:26 - this is what shows other
people that you care about
01:29 - working with other human beings.
01:31 - Cause you don't wanna
learn version control
01:34 - when you're working on some giant project.
01:36 - You want to be already messing up in it
01:38 - and learning through that trial and error
01:40 - while you're just a beginner.
01:41 - So by the time you're working
on more advance projects
01:44 - you already got the Git version control
01:47 - and putting your code on
GitHub repository down
01:49 - and you can actually put
some good stuff there.
01:51 - Cool?
01:53 - Alright, that's number one.
01:54 - Second thing I will tell you is
01:58 - You should follow PEP8 style guidelines
02:01 - if you're writing Python code.
02:03 - And that you should focus a lot
02:06 - on making your code readable.
02:09 - Because this demonstrates
that you're not just coding
02:11 - for yourself just so your
head can understand it.
02:14 - You're coding for other people as well.
02:17 - Think about it like this,
02:20 - I don't know about you,
but when I am taking notes
02:23 - I am a terrible note taker
02:25 - and in the meantime, I'll take these notes
02:28 - and they'll make sense to me,
02:30 - but then later when I come
back and look at these notes,
02:32 - I'm like, "what does this mean"?
02:34 - So that knowledge I got at one point is
02:37 - actually completely useless
to me when I look at it later.
02:40 - And what do you think
happens to somebody else who
02:43 - like if I can't understand
the freakin' notes
02:45 - do you think somebody else
who's reading my notes
02:47 - will learn from it and
get knowledge out of it?
02:50 - Of course not, right?
02:51 - So take notes in a way where other people
02:54 - can understand them and
also you can understand it
02:57 - completely clearly even
if you looked at it
02:59 - at some point later.
03:01 - Cause if you ever have
any experience working
03:03 - with a project that you had
to maintain for two weeks,
03:06 - a month, two months, three months?
03:09 - You will know, or a year, you will know
03:12 - how important it is to write readable code
03:15 - so that you can go back
to it and understand
03:16 - what it is you were doing.
03:19 - Cause if you don't, and you
have to refigure it all out
03:21 - and you have to scratch it all up again.
03:23 - Not good.
03:24 - And the other people who are going to be
03:25 - looking to hire you, the recruiter,
03:27 - they are going to see
your code and be like,
03:28 - "Uh-uh, this person isn't
thinking about working
03:30 - with other people. He's just
thinking about himself".
03:34 - Number Three:
03:36 - Learn the skill of documentation.
03:40 - Your code should not
just have Python in it.
03:43 - It should have some human
language in it as well.
03:46 - Because ultimately you are
writing code for human beings.
03:49 - So you need to
03:50 - write a lot of documentation.
03:52 - If you're in United States,
03:54 - definitely the documentation
should be in English.
03:57 - So meaning like what each function does,
03:59 - what each class is doing,
how is your code working?
04:03 - Documenting it, very important.
04:06 - And then having a README file
of your GitHub repository.
04:09 - So how does your code actually work?
04:12 - And that shows people that,
"Hey look, this person
04:14 - is so considerate that
he has a README guide,
04:17 - so that anybody that
goes through his project
04:19 - can immediately understand
04:21 - how things are working.
04:22 - You wanna go crazy on the
skill of documentation,
04:25 - putting your code on GitHub,
04:27 - and making your code very readable, okay?
04:30 - So PEP8 style guidelines and all of that.
04:32 - Some recommendations,
other recommendations
04:35 - I'm going to give you to
improve your skill set is:
04:39 - read other people's code.
04:41 - Alright?
04:43 - Now, I don't know about you,
04:44 - but when people used to tell me this
04:46 - and I would go online and read code,
04:47 - I'd be like, "what the
hell does this mean?
04:50 - I don't understand any of this".
04:53 - What you need to do is read
code around your skill level.
04:56 - That's what people don't tell you.
04:57 - Okay?
04:58 - So sometimes what I would do, for example,
05:01 - is let's say I was taking
a course in Coursera.
05:04 - Okay?
05:05 - Or Udacity.com.
05:06 - These are online MOOCs, Massive Online...
05:09 - Whatever, courses.
05:10 - The idea behind them is that
once you're going through it
05:14 - what you can do is like,
05:15 - let's say there's assignment
one that you are doing.
05:17 - There's going to be somebody in the world
05:19 - whose also done this assignment
05:21 - and decided to put it on their GitHub.
05:23 - You can go to that person's GitHub
05:24 - and after you giving
this assignment a try,
05:27 - you can look at how they coded it.
05:29 - So if they're a beginner,
05:31 - you'll be able to read
and actually understand
05:33 - their code if you're a beginner as well.
05:35 - Don't read some crazy advance library
05:37 - cause it's not gonna
make any sense to you.
05:39 - I'm going to be honest,
05:41 - reading some advance
people's code makes no sense
05:43 - to me to this day, okay?
05:45 - But I read around my skill
level, that's an important thing.
05:49 - Nobody talks about it.
05:50 - They're just like,
developers are just like,
05:51 - "Yeah, just go read code".
05:53 - Yeah, okay. Good luck.
05:55 - Good freakin' luck just reading any code.
05:57 - So find something that's
around your skill level
06:01 - and learn from that, okay?
06:03 - If you make a rock-paper-scissors
game in Python
06:05 - or tic-tac-toe game.
06:07 - Then look that up on GitHub
and see if someone else has
06:10 - made a rock-paper-scissors
game that you can understand
06:13 - and then read that code.
06:15 - Or go on Stack Overflow and read questions
06:17 - to some simple...
06:18 - Answers to some simple
questions and read their code.
06:21 - So you being able to read
code is a very important skill
06:25 - that you need to cultivate.
06:26 - And if you're more advance,
06:28 - look into Kenneth Reitz and read his code
06:32 - in the Requests library,
06:34 - which is one of the most
phenomenal libraries in Python
06:38 - and it's called HTTP for Humans
06:41 - and it's him, that's like the
best physical manifestation
06:45 - of somebody who truly understands
06:47 - what it means to write
code for human beings.
06:49 - And if you look at his GitHub repository
06:51 - and his documentation and
just his style of coding.
06:55 - You'll be like, "Wow. This is awesome".
06:57 - So that's another tip
I'll give you on improving
06:59 - your skill and what skills
are the most important.
07:02 - Other tips I'm going to give you are
07:06 - read a book called Fluent Python,
07:08 - especially if you're around
that intermediate level.
07:11 - Almost died there actually.
07:13 - Read books on this because
books like Fluent Python
07:17 - will teach you a lot of Pythonic code.
07:21 - So this way you don't just
look like somebody who was
07:24 - developing yesterday in C++
07:27 - and decided to work in Python today.
07:29 - That shows your ability with Python.
07:33 - So for example, instead
of using regular lists
07:37 - for something, you can
use list comprehensions.
07:41 - Somewhere where you need
to use a generator or yield
07:44 - instead of wasting a lot
of your speed of your code
07:49 - by not using a yield or generator.
07:51 - A lot of these more advance skills,
07:54 - you're going to learn
through something like
07:56 - more advance books.
07:57 - So read something that
gives you the ability to
08:00 - write more Pythonic code.
08:02 - Tip number 23. I lost count at this point.
08:05 - But the reason why I'm giving you these
08:07 - is because a lot of
these are very tangible
08:09 - and you can actually
get on them right away.
08:11 - And before I actually move
on from Kenneth Reitz,
08:13 - recently I learned something new.
08:15 - I was looking up Kenneth
Reitz and I looked up one
08:17 - of his recent essays on
project structure for Python
08:21 - and he talks about how you
should structure your code
08:25 - and he said something about
Django that I actually
08:27 - didn't know.
08:28 - And he says a lot of Django developers
08:30 - create their repositories in the wrong way
08:32 - and it causes a lot of confusion.
08:34 - And poor naming conventions,
08:36 - so he gives this tip on how not to do it
08:38 - I'll actually put it right here,
08:40 - the screenshot of the essay that I read.
08:42 - And I learned something new right away.
08:44 - And now as a Django developer,
08:46 - if I have that on my GitHub repository
08:48 - with that tip he said, when
somebody who is in the industry
08:52 - reads my code now will be like,
08:53 - "Okay, this guy knows what he's doing".
08:55 - Another person I will tell you about is
08:57 - you should look into this guy:
08:58 - Raymond, I believe his last
name is Hettinger. Or Hettinger.
09:02 - I don't know how to pronounce it,
09:03 - but incredible dude. I've
listened to so many of his talks.
09:08 - Fascinating, entertaining,
incredibly intelligent...
09:12 - And just the way that
he speaks is so eloquent
09:15 - and he will make you laugh
09:18 - and show you really Pythonic stuff
09:20 - and he's one of the people
09:22 - whose added so much to
the Python library and
09:25 - so many powerful contributions to Python.
09:29 - You should listen to his talks
09:31 - and definitely listen
09:33 - to his one on transforming code
09:36 - and something like transforming
code and idiomatic Python.
09:41 - So I'll put a link to that
somewhere in this description
09:44 - in the Youtube description
09:46 - so you can watch that video there.
09:48 - Learn from that and actually
then go back to your code
09:51 - and actually turn it into
more and more Pythonic code.
09:55 - Put that up on your GitHub repository.
09:59 - And in summary, here's
what I'm going to say:
10:02 - There's no wrong way.
10:05 - There's only the right way.
10:08 - Or you can go through.
10:11 - - Go right and then go through something.
10:13 - (laughter)
10:15 - Anything you want.
10:17 - - [Woman] Wow, alright.
10:18 - - Thank you so much for watching,
10:20 - as always this is Qazi, I love your face,
10:22 - and I'll see you in the next video!
10:26 - Woosh!
10:27 - [upbeat music]