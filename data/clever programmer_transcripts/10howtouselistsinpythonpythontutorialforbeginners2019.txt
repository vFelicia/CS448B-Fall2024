00:01 - - Hey you guys, Aaron from
Clever Programmer here.
00:03 - And today we're going to be going over
00:05 - a special data type, not
a primitive data type
00:08 - called lists in Python.
00:10 - (r&b instrumental music)
00:15 - Alright, so I'm in Replit here, okay.
00:16 - And all a list is is just a thing that
00:20 - can hold a bunch of objects in it
00:22 - a bunch of things in it, okay.
00:23 - So, what it looks like,
let's start there, is this.
00:29 - Let's just put a list of numbers, okay.
00:30 - One, two, three, very simple.
00:32 - So this here is a list, if
it's enclosed in brackets
00:35 - and everything is on, and there's things
00:36 - in here separated by commas, then this
00:38 - is considered a list.
00:40 - Actually, this is also considered a list
00:41 - if it just has one element with no commas
00:43 - but usually when you have a list
00:44 - you're gonna have more than one.
00:45 - That's the whole point.
00:46 - So a list is just a collection
of things in order, okay.
00:51 - That's pretty much it,
if you want to group
00:52 - a bunch of things together,
like you wanna have
00:53 - a bunch of, just a bunch
of numbers together
00:56 - a bunch of names together, whatever it is
00:59 - then the list is what you wanna be using.
01:00 - So let's just see what
you can do with lists.
01:05 - First of all, we have list L here.
01:10 - Nothings happening, list L here.
01:11 - First of all you can print out a list
01:13 - and just spit out all its contents.
01:15 - Just like this, it prints
out nicely with the brackets.
01:21 - But also a list, oh I forgot to mention
01:23 - it is not limited to just
having numbers inside of it.
01:26 - You can really have
anything you want in here.
01:27 - So you could have a number here
01:29 - you could have a string
here, sting (laughs).
01:32 - You could have a another string here
01:36 - with a different kind of quotes
01:37 - and then you could have a float
01:39 - and then you could have a bullion.
01:40 - So we have all the
primitive data types here
01:42 - represented, we have an
integer, we have a float.
01:45 - And you could even have
another list in here
01:49 - as one of the elements of the list.
01:50 - So in here we could just
put one, two, three.
01:53 - And this here, this complicated list here
01:55 - this list that doesn't
know what it is (laughs)
01:58 - it's trying to get its
life together or something
02:00 - it doesn't know what it wants to be
02:03 - has a bunch of different
things inside here
02:04 - compared to this list, which
is very nice and clean.
02:07 - Okay, very nice and clean where usually
02:10 - usually when you're using lists it'll be
02:11 - nice and clean like this.
02:12 - It'll all be the same
data type because you have
02:14 - a bunch of things together, you wouldn't
02:16 - have it messy like this.
02:17 - But you can do this is you want
02:18 - if you want to have a bunch
of different data types.
02:21 - These are both equally
valid lists in Python, okay.
02:27 - So let's just print out L2
to see what that looks like.
02:30 - Put that there, lists
list one and list two.
02:34 - I'm very bad at naming things
02:35 - Qazi's probably gonna hate me for this.
02:37 - But, but as you can see the list
02:40 - printed out here just fine.
02:42 - So this list here is exactly the same
02:44 - as this list that I wrote out
02:46 - including the sub-list, okay.
02:48 - So, also what you can do with lists
02:51 - is lets just go back to list one.
02:55 - List one here, yeah.
02:56 - You can index into them just like
02:58 - you can index into a string.
03:01 - You can almost think of a string as
03:02 - a list of letters and
symbols and characters
03:07 - kind of, but not really, but you can
03:08 - when it comes to indexing, you can.
03:10 - Like a list, any string are very similar
03:12 - because it's the same syntax.
03:15 - The same, you'd be
typing in the same thing
03:17 - into your computer to
index into this list.
03:20 - So just like strings if you go
03:22 - if you index at zero on the list
03:24 - since this list, actually
let's use list two.
03:27 - Okay, and actually this
is a little bit confusing
03:29 - let's just change this.
03:30 - So list, list two, okay.
03:33 - List two (chuckles).
03:37 - List two, just like that.
03:38 - Now that's a lot clearer
for you guys to understand.
03:40 - So this here and this
here is the same thing.
03:42 - So if I want to index into this list here
03:45 - I would put a zero and this would actually
03:47 - spit out this one here, because this
03:48 - is the first element.
03:49 - So let's run this.
03:52 - And as you can see, the one prints out.
03:54 - Now let me just copy and paste this
03:55 - so you can see what's going on
03:56 - with all the other elements.
03:57 - So if I wanted to print out element
03:59 - the second element, the third element
04:00 - the fourth element or the fifth element
04:02 - and I run this, you're gonna see
04:03 - all of these print out on separate lines
04:05 - because I'm printing
them out each separately.
04:08 - Okay, so you can see, oh I guess
04:10 - I missed this last one here.
04:12 - Let me just pop that in there
04:14 - so you can see what that looks like.
04:15 - And I run this, then this is
04:20 - then it's indexing into each
element of this list two list
04:26 - individually and printing out each one.
04:29 - So lists is very useful for
04:34 - holding things together
04:36 - but sometimes you need to actually do
04:37 - operations on list, lists.
04:39 - So that's also something
you can do in Python.
04:42 - There's a lot of functions or methods
04:44 - that you can, that you can run on lists
04:46 - to do different things in them.
04:47 - Like you can add to
lists, you can take things
04:49 - away from lists, you can insert
04:51 - into to a one spot in the list.
04:52 - You can sort a list if its a
list of numbers or something.
04:54 - You can even reverse a list so that
04:56 - it goes in the reverse order.
04:57 - And I'm actually going to be going over
04:58 - a lot of these functions right now.
04:59 - So just stay tuned for a couple seconds
05:02 - and I'll get to it.
05:04 - Alright, so we talked
about indexing into a list.
05:07 - Let's talk about the
most common one actually
05:10 - is adding an element to the end of a list.
05:12 - So, like if you had a list of names
05:14 - let's just put in here.
05:15 - Actually, let's get rid of all this
05:16 - so it's nice and clean.
05:18 - If we just had names, okay.
05:21 - A bunch of names, let's just say
05:23 - Joe, John, James
05:29 - okay, James.
05:34 - So this is a list of three
strings, three names.
05:38 - Alright, and let's say I wanted to
05:40 - add one more name to this list.
05:41 - Like, let's say this was like
05:43 - this list was actually a team.
05:45 - So we had like a team
member of three people
05:47 - and we wanted to add one
more person to the team.
05:49 - Then we, we could just type it in here
05:51 - but I mean, that's not
really, that's kinda cheating.
05:54 - That's not really coding.
05:55 - So how you'd actually
make the computer do it
05:57 - is you would call this
function called append.
06:02 - I don't really know what this word means
06:04 - I didn't know what it meant too
06:05 - before I started coding, but append
06:06 - it's not app end, it's actually append.
06:09 - Append just means add
something to the end.
06:11 - It's just a word in the English language
06:13 - apparently, and that's what it means.
06:14 - But if you don't know what it means
06:15 - like I didn't, then that's what it means.
06:16 - So you can actually just
add another name here.
06:18 - So let's just say Gary, okay.
06:21 - Let's, let's add some
print statements here
06:24 - so you can see kinda the
flow that's happening.
06:27 - Names, yep print names, and then
06:31 - I'll append something to it
06:33 - and then print it out a second time.
06:34 - So what we should see here
is this list print out once
06:38 - and then right below that is this print
06:41 - this list print out with
Gary also attached to it.
06:43 - So a list will be one
length, one element longer.
06:46 - Let's run this and yep, as you can see
06:48 - that's exactly what happens.
06:50 - So we printed out the
list originally of names
06:52 - and then we appended Gary
to the end of this list.
06:55 - Alright, so that's what append is
06:57 - append is very useful because sometimes
06:59 - you don't care about
the order of the list.
07:01 - You actually can, I could have inserted
07:02 - Gary at the beginning of the list
07:03 - or somewhere in the middle,
I'm gonna talk about that next.
07:06 - But usually if you're just putting
07:08 - a bunch of stuff together and you
07:09 - don't really care about the order
07:11 - then yeah, you can just use append.
07:12 - Very common.
07:14 - So let's, now let's try insert.
07:17 - So if I wanted to insert Gary
07:19 - let's say, at the beginning of the list
07:20 - instead of calling append
I'd actually call insert.
07:23 - Okay, not with two r's,
inserrt (chuckles).
07:27 - Insert with one r, alright.
07:29 - And the difference between this and append
07:35 - is that if you're gonna insert something
07:38 - into a list, then you need to know where
07:40 - in the list it's going to be entered.
07:41 - So actually this function
is going to be taking
07:44 - one extra parameter that tells us
07:47 - where we wanna put it into the list.
07:48 - So if we put zero comma
Gary, then it's gonna
07:51 - put Gary in the first
spot here, before Joe
07:54 - and then it's gonna shift
everything over to the right.
07:56 - You don't have to think about it
07:57 - you don't have to think
about it as shifting
07:59 - just think about it as just
sticking it in the front
08:01 - and then everything else just
08:02 - does what you assume it would do.
08:04 - It would just shift over.
08:06 - So let's run this and see what happens.
08:08 - As you can see Gary here
got stuck in the first
08:10 - the first position there.
08:12 - Also if you put in one then
the same kinda deal happens.
08:14 - Gary's actually gonna pop up here instead
08:16 - and it's just gonna like split
08:17 - the other parts of the list there.
08:19 - So that's insert, I'm not gonna go through
08:20 - the other two ones, you
understand how it works.
08:23 - Doing this, putting the very last one
08:25 - is gonna be the, do the exact same thing
08:27 - as append, pretty much.
08:29 - So you might be wondering, okay
08:30 - why does append exist if insert exists?
08:33 - It's just append is used to quicker way
08:35 - to append something to
the end of the list.
08:36 - Sometimes that a common thing you do.
08:38 - So, yeah they achieve the same thing
08:40 - but they're distinct functions.
08:42 - So some other cool things
you can do with lists
08:44 - is you can also remove elements.
08:46 - So if I wanted to remove Gary
08:49 - actually no, Gary's not even here.
08:50 - So if we have this list
of names here again
08:53 - Joe, John, James, and then we print it
08:55 - and then I want to remove
something from there
08:57 - then what you have to do is actually
09:00 - put in the name.
09:02 - So this would actually remove
Joe from the list, okay.
09:05 - Or if I put this then this would
09:07 - actually remove John from the list.
09:08 - This is case sensitive I believe
09:09 - so if I put a capital John
09:11 - then this John would actually stay in.
09:13 - But if I, if I ran this code then
09:15 - you'll actually see that John
is deleted from the list.
09:17 - Let's try that.
09:19 - Yeah, you see John has
disappeared from the list now.
09:21 - Okay.
09:24 - Some other things you can do are sort
09:27 - sort lists and even reverse lists.
09:30 - So let's do reverse because sorting
09:32 - sorting a list of names, I
guess that would make sense.
09:35 - You could probably alphabetize it.
09:36 - I dunno if there's a function
for alphabetizing that.
09:42 - But for like a list of numbers, for sure
09:44 - you could actually sort it,
and I'll demo that real quick.
09:48 - Let's just look at reverse, okay.
09:52 - Reverse.
09:53 - So as you can see I said that
a list is ordered, right.
09:57 - So a list has a very specific order
09:59 - so that we know which element
10:02 - we're talking about when we index into it.
10:04 - It doesn't like have a
random order or anything.
10:07 - Names at zero is always gonna be Joe.
10:09 - Names at one are always gonna be John.
10:11 - Names at two are always gonna
be James, it never changes.
10:15 - So sometimes because the order matters
10:17 - if you wanna reverse the order
10:18 - which could be useful for something
10:21 - like let's say you wanted to have
10:22 - your names alphabetized, and then
10:24 - you wanted to reverse it and then have
10:26 - your names in reverse alphabetical order
10:28 - then you could do that as well.
10:30 - So all this will do is
just flip this around
10:33 - so that James comes first
and then Joe comes last.
10:37 - And as you can see this list got reversed
10:39 - got flipped around pretty much.
10:42 - Okay, so let's just, actually
10:44 - let's do sort right now, okay.
10:46 - So let's just have a bunch of numbers
10:49 - one, two, three, four, five
10:54 - well that's already sorted, stupid me.
10:56 - Let's put in a bunch of random numbers
10:58 - six, four, two, nine, twelve, okay.
11:02 - And then, actually we
don't need any of this
11:04 - let's get rid of this.
11:10 - If we have a bunch of numbers here
11:13 - a bunch of numbers here and then
11:14 - I'm gonna print it out
before we sort it, numbers.
11:18 - But if I wanted to sort this then I can
11:20 - just call this function sort, okay.
11:23 - And what this will do is it'll actually
11:25 - sort the numbers array into
ascending order by default.
11:31 - If you wanted to get
it in decreasing order
11:33 - you could sort it and then reverse it.
11:35 - So you can actually chain
these functions together
11:38 - to do cool things like that.
11:41 - What am I printing out,
numbers printing out
11:42 - that's what I was doing.
11:44 - So let's run this and as you can see
11:46 - the list six, four, two, nine, twelve
11:48 - has been sorted from the lowest number
11:51 - to the highest number, two,
four, six, nine, twelve.
11:55 - So these are just some really common
11:57 - functions you can use on lists.
11:59 - The main thing I wanna point out here is
12:01 - yeah, lists are just a group of things
12:02 - you put together, and
there's a specific order
12:05 - and you can index into the lists
12:07 - wherever you want to read from it.
12:08 - And you can also add things,
you can remove elements
12:11 - they can get longer and shorter.
12:12 - It's a very, very flexible, changeable
12:14 - kind of data structure.
12:15 - And very useful for
keeping things together.
12:19 - So those are pretty much lists.
12:21 - One very common thing
to do with lists though
12:22 - the last thing I'm gonna talk about is
12:24 - iterating over a list.
12:26 - So I think we already had a video
12:28 - about for loops, about for, on for loops
12:31 - but you can iterate over a list
12:34 - using a for loop by
just using this syntax.
12:37 - So for number in numbers
12:41 - and then you can just
print the number, okay.
12:45 - So you guys probably
already know what this is
12:48 - you've seen this, but as you can see
12:49 - the whole list got printed
from this for loop here.
12:54 - The reason I'm doing this is I wanna
12:55 - point out that in a for loop
12:57 - whatever is here needs to be an iterable.
13:00 - That's just a fancy word that says
13:02 - you can iterate over it.
13:04 - So a list is iterable
because you can iterate
13:08 - through every element one by one
13:10 - and do something with each one of those.
13:12 - So in this case we're just printing it out
13:13 - to the screen, okay.
13:15 - So a list is an iterable
13:16 - it's the simplest iterable I believe.
13:20 - And, yeah it just holds a bunch of things
13:23 - in it together as a group.
13:25 - And that's pretty much all you guys
13:27 - have to know for that.
13:28 - That is it for this video,
thank you guys for watching
13:30 - and I will see you guys next time.
13:34 - (r&b instrumental music)