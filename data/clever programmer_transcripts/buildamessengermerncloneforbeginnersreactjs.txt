00:00 - let's everybody drop a comment if you're
00:03 - here if everything's going good
00:06 - how's it going good people what's good
00:08 - uh let me know
00:12 - and let me know guys if you're
00:16 - excited um
00:19 - let's start dropping in some comments
00:21 - where you're coming in from
00:23 - um who is excited and
00:26 - who knows what are we gonna be building
00:28 - of course
00:30 - so we are going to be building today
00:33 - the messenger clone with the mern stack
00:37 - now this has nothing to do with the
00:40 - facebook clone
00:41 - which will be at last time we will be
00:44 - actually
00:44 - uh doing another live with frankie on
00:47 - like
00:48 - stabilizing everything and
00:51 - getting everything aligned um in the
00:54 - backend sort of stuff
00:57 - uh this is going to be a completely
01:00 - different
01:01 - stuff this is going to be uh
01:04 - using the uh react build that sony did
01:07 - back in like
01:08 - i don't know a couple of uh months back
01:13 - so right now yo sheila is in a house
01:16 - hey what's up sheila
01:21 - so your gain up by 10 please
01:25 - oh my god that means i gotta speak
01:27 - louder because i don't have gain
01:29 - okay um so let's actually start
01:33 - the build uh i've dropped a link
01:36 - down in the description below um
01:40 - let me actually show it real quick
01:44 - i think yeah here we go so this
01:47 - is the youtube live stream that you're
01:49 - watching i'm right there
01:51 - nice and inside of the
01:55 - description i've put in this little
01:58 - link i uh now i recommend everybody
02:02 - going ahead
02:04 - and going on to this link because this
02:06 - will actually
02:07 - pop up in uh github
02:10 - where is uh which contains this starter
02:14 - project okay i see ho ho hi
02:18 - radu mihai unify hello
02:22 - david bros says techno park um
02:25 - rishi sikh uh where is sony or kazi
02:29 - kazi is lay he's in l.a sun is in london
02:33 - i don't know much more about them
02:38 - bruce bane asks do we build the front
02:40 - end from scratch or just the back end
02:43 - today we are just going to be focusing
02:45 - on the back end
02:46 - and how to connect it to the front end
02:49 - so
02:49 - guys what we were realizing is that full
02:52 - stack builds with front end and backhand
02:55 - actually take up quite a lot of time so
02:57 - we will
02:58 - actually be just focusing on the back
03:01 - end
03:02 - today and yes yeah i will be alone today
03:06 - hi from kyrgyzstan
03:10 - what's up back sultan nice to have you
03:12 - here
03:13 - hi hi man guys actually let's everybody
03:17 - start dropping in if it's the first time
03:19 - that you're building something when the
03:21 - burn stack
03:22 - hey ranyan qazi hi bro
03:26 - uh from bangladesh whoa what's up
03:28 - welcome dude
03:30 - um so yeah let's actually start
03:33 - dropping in uh who is
03:37 - who has actually built something from uh
03:40 - not from with the mern stack
03:42 - [Music]
03:43 - and and let's just know how
03:47 - uh how beginner friendly do i need to
03:50 - uh make this live build
03:53 - zimbabwe i would do twitch mirnstack
03:57 - sounds good uh hey from arizona yo
04:01 - what's up
04:01 - hello from morocco um
04:05 - hey david awesome to be tonight watching
04:07 - all the way from uganda
04:09 - nice job bro uh dope hairstyle thanks
04:13 - dude
04:14 - took me i think two years or something
04:17 - to grow this shot
04:18 - hey here from kosovo i'm in c-sharp
04:22 - but i think that i have the basics of js
04:25 - nice bro
04:26 - nice stuff yeah just started using the
04:28 - marin stack but already understand a lot
04:31 - that's actually awesome nicolas keep up
04:34 - the good work
04:35 - and let's master it together
04:39 - uh we got mexico in a house russian
04:41 - house high bro
04:42 - bangladesh okay
04:46 - nice so uh with that said
04:50 - let's actually go back uh hopefully i
04:53 - can change but yeah
04:54 - this is the way so uh with that said
04:57 - let's everybody uh jump straight into
05:00 - the build
05:02 - uh we will be you uh we will only be
05:05 - building
05:06 - the back end today and
05:10 - we are going to be using the uh react
05:14 - thing that sony and kaze build back in
05:17 - july
05:18 - something uh so in the description
05:21 - i've left a link
05:25 - which it says link to today's starter
05:27 - project
05:28 - this is the link that you want to go
05:30 - ahead and click
05:32 - and i will be actually showing you how
05:34 - to go ahead and
05:37 - download this project and work with it
05:41 - so with that said uh
05:44 - i actually have it open already uh
05:47 - guys actually let me know if this link
05:50 - does
05:50 - work i really hope uh i haven't
05:53 - forgotten make it and get it public but
05:56 - yeah so let's actually go ahead uh and
05:58 - everybody go to
05:59 - uh go and hit this um blue
06:04 - it's actually a green button and copy
06:07 - this link
06:08 - and what we will be doing is we will be
06:10 - cloning
06:11 - this yeah it is working thank you vlad
06:14 - thank you numan
06:15 - awesome stuff so let's actually
06:18 - everybody go ahead and copy this link
06:20 - and inside and and just go ahead and
06:24 - like create a folder
06:25 - so i will actually name it mern
06:29 - uh messenger build
06:34 - okay and i will open up a terminal
06:38 - inside of this folder i will zoom in a
06:41 - little
06:41 - so that you guys can see it better and
06:45 - what i will type
06:46 - in here is get clone
06:50 - and just paste the link inside of there
06:53 - now this should be going ahead and
06:56 - actually download everything from github
07:00 - awesome and we literally have our stuff
07:03 - in here
07:04 - now yo sunny
07:08 - we got sunny in the house how's it going
07:10 - bro um
07:12 - so what we will be doing from now on
07:16 - uh is literally setting up this project
07:19 - to make it work
07:20 - first and then we will be going ahead
07:24 - and add the backend
07:27 - to it uh
07:31 - yeah i'm checking i message sonny
07:40 - okay uh so guys let's actually go ahead
07:45 - and
07:45 - start dropping in if you or uh if you
07:48 - you think this is going to be valuable
07:51 - for you
07:52 - and if you like clever programmers build
07:54 - and
07:55 - if you think this is going to be good
07:56 - for you let's
07:58 - actually smash that like button to get
08:01 - this video
08:02 - out there to everybody uh all over
08:05 - youtube
08:06 - and let's show it to the world how
08:09 - awesome this channel is
08:10 - okay with that said let's go back and
08:13 - install
08:13 - all the dependencies that this react
08:16 - build
08:17 - will require now
08:20 - what i will do is literally just type in
08:23 - ls which will
08:24 - list out all the stuff inside of here
08:27 - and then
08:28 - copy that type in cd and then you will
08:31 - enter
08:32 - into the project nice um
08:37 - what we want to do then is just type in
08:40 - mpmi
08:41 - which will go ahead um
08:45 - and and install all the dependencies as
08:48 - you can already see
08:49 - it's installing
08:52 - uh bono says with that said
08:56 - sounds like listening to sonny nice
08:59 - that's my goal okay so now
09:03 - we are literally just installing all the
09:06 - dependencies and this is going to run
09:08 - for a while
09:09 - now uh during that time let's actually
09:12 - go ahead and start setting up
09:14 - mongodb guys who have used mongodb
09:18 - before drop it in the comments drop it
09:21 - if you know what mongodb
09:22 - is and yep let's just go ahead and
09:28 - start up our mongodb for today
09:32 - so all you need to do up here is
09:35 - literally just sign
09:36 - in if you have an account uh if you
09:38 - don't
09:39 - that's not a problem you can uh hit this
09:42 - start
09:43 - free button and that will uh
09:47 - just get you set up and whoa we just got
09:50 - our first donation by sumit thank you so
09:54 - much dude
09:54 - for this awesome donation uh he says
09:57 - let's keep going yes let's go
10:01 - let's keep it up bro okay
10:04 - yes it is a nosql storage uh uh
10:07 - akshat awesome yeah it it it is
10:11 - okay now let's go ahead and let's sign
10:14 - in let's create
10:15 - our mongodb uh
10:19 - okay so i'm just going to go ahead and
10:22 - sign into mongodb
10:25 - and let's actually create our database
10:28 - instance
10:28 - guys who is excited to hook up the
10:32 - messenger
10:32 - clone that sunny and cozy built back in
10:36 - july
10:36 - to mongodb with the mern stack drop it
10:40 - in the comments and let me know
10:43 - all right so now what i will be doing
10:46 - what i will do oops
10:47 - uh what i will do
10:51 - is go ahead and click there
10:54 - which will open up all my current
10:56 - projects and create a new
10:58 - project love from bangladesh yo
11:02 - and we got another donation by waffy
11:05 - muhammad
11:06 - thank you so much dude really appreciate
11:08 - it
11:10 - okay uh sanjar
11:14 - asks can we use for e-commerce
11:17 - totally a hundred percent yes you can
11:20 - use mongodb for
11:22 - exactly uh for literally anywhere uh
11:25 - for anything okay let's go back to our
11:29 - project
11:30 - name your project uh i will be just name
11:32 - it
11:33 - i will be naming it uh messenger
11:37 - clone live nice
11:42 - this is the place where you can go ahead
11:44 - and add another member
11:46 - but we are not going to do that today so
11:49 - i'm just going to go ahead and create a
11:50 - project
11:52 - um yep and
11:55 - with that we literally created our
11:57 - mongodb database
11:59 - i mean not the database it's just the
12:00 - project so guys if you
12:02 - actually are excited uh let me know in
12:05 - the comments and smash that like button
12:07 - that's all we ask from you okay
12:11 - let's continue now i am actually gonna
12:14 - go ahead and create a cluster
12:15 - and that with that i just need to
12:18 - um hit that javascript button
12:22 - then the continue button might not be
12:24 - showing up for you
12:26 - but for some reason it always asks me
12:28 - now uh
12:29 - here are like three um
12:32 - plans that you can choose from let's go
12:34 - with the free one
12:35 - guys we are here at cleverprogrammer
12:38 - trying to show you
12:39 - as much free stuff that you can
12:43 - go ahead and earn money with as possible
12:46 - okay
12:46 - so we are not trying so we are never
12:49 - ever
12:50 - showing you stuff that actually requires
12:52 - money sometimes
12:53 - we need you to add your credit card but
12:56 - that
12:57 - will never be charged yeah magalita code
13:00 - says sending lump from zimbabwe
13:02 - thank you so much and sending love from
13:05 - clever programmer i guess
13:07 - okay let's go ahead and create our
13:10 - cluster
13:12 - okay now on this screen we literally
13:15 - don't have to do anything let's just go
13:18 - ahead and create our cluster using that
13:21 - button
13:21 - we can leave everything the way it
13:25 - is all right and
13:29 - with the click of a button we just have
13:32 - our uh database storage and cluster
13:35 - built
13:36 - up for you for us which means
13:39 - we have our database guys who's excited
13:41 - who's pumped let me know in the comments
13:45 - hey muhammad another donation dude this
13:49 - is not it's not even the first one
13:51 - thank you so much let's keep coding
13:53 - exactly my point
13:56 - all right so now it's going to take a
13:59 - little time
14:00 - uh but by that time let's go back
14:03 - to our uh react front end which has
14:07 - actually finished
14:08 - up installing
14:12 - okay um
14:15 - i'm just going to go and a folder up
14:18 - inside of my terminal to my whole
14:21 - project folder
14:23 - and then open up vs code uh
14:26 - in that folder nice okay
14:29 - let's actually see by the way how
14:33 - uh how it
14:36 - how the
14:39 - uh how the how our application looks
14:42 - like because that is what we will be
14:43 - using
14:44 - throughout today's build and this is
14:47 - what we will be using
14:48 - to add all the stuff
14:52 - alrighty now uh what i will be
14:56 - typing here is npm start which is
14:58 - literally just going to go ahead and
15:00 - fire up our database
15:01 - uh not database our messenger clone
15:04 - which was built by sony and qazi
15:06 - and let's see if it actually works or if
15:10 - we need to do something about it
15:13 - okay it's taking a little time to load
15:16 - but i think we are actually pretty good
15:20 - and yes project id is not
15:23 - provided in firebase initializer yes
15:26 - that is right because if we check it in
15:30 - our code uh we have a firebase.js
15:35 - which let's actually go ahead and
15:38 - zoom in so that you guys can see
15:41 - let me know if you go if if i need to
15:44 - zoom in more
15:45 - um i think it's good by the way okay
15:48 - so why why it's not working that's a
15:50 - pretty good question
15:51 - um because we don't have firebase hooked
15:54 - up right
15:55 - so now let's go ahead and everybody
15:59 - uh if you guys have already the firebase
16:02 - project let's go ahead there
16:04 - and grab all the config stuff i'm just
16:06 - going to create
16:07 - a new one so guys if it's the first time
16:10 - you're building this thing
16:11 - no problem we got you
16:15 - okay who actually has this uh has built
16:18 - this um this messenger clone
16:22 - drop it in the comment sections let me
16:24 - know guys uh
16:26 - if you already have it yes at config
16:29 - uh that is right that is what's missing
16:32 - okay now i'm going to head
16:36 - over to firebase.com
16:39 - uh go to the console and actually i have
16:42 - it over here so i will be just using
16:44 - this one
16:45 - but let's actually create a new project
16:48 - so okay guys let me know
16:51 - who has this project already uh so i can
16:54 - decide whether to create a new
16:56 - firebase project or go with the one that
16:59 - um
17:00 - that i already have okay dinesh says yes
17:04 - i did okay um
17:10 - yeah uh i think it's better for all the
17:12 - beginners to go with a new one so i will
17:15 - just type in
17:16 - mern messenger
17:19 - nice and i don't need google analytics
17:23 - so i will be just going ahead uh and
17:26 - create the projects
17:28 - uh while it's loading um
17:32 - lavish asks uh can we use firebase for
17:36 - productions yes you can uh
17:39 - with this app is perfectly working with
17:42 - just firebase and no uh martin stuff and
17:46 - all those
17:46 - uh fanciness uh but we guys here just
17:50 - wanna provide you
17:51 - as much value as possible and if you
17:53 - actually agree with that
17:55 - and if you have got value from either
17:57 - this or any of our previous builds
18:00 - let's just smash that like button and
18:03 - get this video
18:04 - out there to everybody all over it's
18:06 - youtube so
18:08 - everybody can start and learning with us
18:11 - okay all right uh
18:14 - i will remove this command nice and
18:18 - matrix asks are you using firebase for
18:21 - authentication
18:22 - uh today we are not going to be
18:25 - authenticate anything
18:26 - we will be just popping up an alert
18:30 - and that is where the person will be
18:32 - able to
18:34 - uh drop their um
18:38 - names and yes we are going to be using
18:42 - pusher for real time
18:44 - okay um
18:48 - nice awesome uh actually
18:51 - i think i can even show you guys this uh
18:56 - this this this project that i've built
19:01 - at fi at my firebase
19:09 - okay so guys actually if you go ahead
19:12 - and go to this link
19:13 - this is the build that we are going to
19:15 - be building today okay so i'm
19:17 - just gonna go ahead and type in david
19:20 - and
19:21 - uh i think we nee okay so my heroku is
19:24 - actually
19:25 - down at the moment because um
19:28 - heroku is always going down after a
19:31 - couple of minutes of inactivity
19:33 - but we will take care of this today we
19:36 - will have a new heroku instance
19:38 - that will be up and running okay
19:41 - nice is firebase easy to set up
19:45 - that's literally the easiest thing to
19:47 - set up
19:49 - simple as that so
19:52 - we literally set up our project so okay
19:55 - let's go
19:56 - and create our project let's hit that
19:59 - web icon uh over there nice
20:03 - and let's actually hit it and now i'm
20:07 - just going to type in mern
20:08 - messenger oops i forgot to hit
20:12 - setup hosting as well uh
20:16 - yeah i will be um
20:20 - i need to i need to go ahead and do it
20:22 - again uh
20:23 - i will just add a new app which will be
20:25 - a web app
20:26 - sumern uh messenger
20:31 - clone so guys this is a super
20:34 - important thing you definitely need to
20:37 - go ahead and check
20:38 - that um check that box
20:42 - that is something that we will be we
20:44 - will need
20:45 - so guys we will actually deploy this
20:48 - application
20:48 - live um
20:50 - [Music]
20:52 - so yeah we need to have hosting
20:55 - okay messenger okay uh
20:59 - prashun asks what is the difference
21:02 - between
21:03 - react and mern so react is actually
21:06 - front and right library
21:08 - while mirn stack is a full stack
21:11 - thing so mern actually includes
21:14 - react with the
21:18 - mongodb with node.js and with express.js
21:21 - on the side
21:22 - okay who's excited guys
21:26 - smash the like button let me know inside
21:28 - of the comments if you're excited
21:30 - and let's go and set up our firebase
21:34 - okay let's go to console you can just go
21:36 - oops you can just go ahead and click
21:38 - next on everything exactly react is a
21:41 - front-end framework dhdmat says right
21:45 - um okay so now what i want to do
21:50 - is go to this little icon over there
21:53 - and hit the project settings scroll
21:57 - all the way to the bottom hit config
22:00 - and then grab just the stuff right
22:03 - so notice that this and this
22:06 - is not selected only what is inside of
22:10 - here
22:11 - so only these stuff are selected
22:14 - okay this is very important now with
22:17 - those selected
22:18 - let's actually go back to our code and
22:20 - where i've already put
22:22 - this comment here that your firebase
22:25 - credentials go here
22:27 - that is where you want to paste this
22:29 - stuff
22:30 - now if we check it out it should be
22:34 - uh good at any time
22:38 - so if i go ahead and type in david nice
22:41 - we actually have it working
22:43 - okay and i think
22:47 - everything is covered in here
22:50 - um one thing though we have to
22:54 - uh initialize the database inside of
22:56 - here
22:57 - uh to make that app that you've just
23:00 - downloaded from my github
23:01 - uh working but we are not going to worry
23:03 - about that we are not going to use that
23:06 - at all so hello papamurn
23:10 - thanks dude uh yeah so we are not going
23:14 - to worry about firebase today
23:16 - um we're just gonna strip out all those
23:18 - stuff
23:19 - and we will be building the backend
23:21 - stuff
23:22 - now uh let's actually close it up we are
23:26 - not even going on
23:27 - going to need this this is not even
23:29 - necessary for today's build
23:33 - uh yeah let's actually close these
23:36 - and open up a brand new folder inside of
23:39 - here
23:40 - oh not in there um
23:44 - inside of the project yeah so you want
23:47 - those
23:48 - folders to be completely separate uh
23:50 - because
23:51 - we want that to be the back end right so
23:54 - it's going to be a different project
23:56 - inside of
23:57 - the other project i guess okay
24:00 - messenger back burn
24:03 - this is how i will name it so notice
24:07 - that i have
24:08 - two different uh projects i have the
24:12 - backend and i have this starter project
24:14 - okay so we will be using the starter
24:16 - project
24:18 - as the front end and we will be building
24:21 - the back end just today in this video
24:24 - okay stick to the very end if you want
24:27 - a fully functional mern stack messenger
24:30 - clone
24:32 - now with that done um
24:35 - let's actually open up our terminal
24:38 - inside of there
24:39 - and let's dive in let's just
24:42 - uh go ahead and cd into the
24:46 - back end project right because we
24:48 - definitely want to go
24:49 - ahead and create our project inside of
24:52 - there
24:52 - right now who's excited
24:56 - who is at this part already who's here
24:59 - with me
25:00 - uh on when i've just created the
25:03 - back-end project and i'm
25:04 - right in front right before uh creating
25:08 - the whole project right who's here with
25:11 - me
25:11 - let me know in the comment section uh
25:14 - let's actually engage with everybody
25:16 - let's have let's make this like kind of
25:18 - like a conversation or something
25:20 - hello from romania hi radu what's up
25:25 - perhaps i should rename them to just
25:27 - front and back and yes you can
25:29 - definitely do that vlog
25:31 - so guys if you're with me uh and if
25:34 - you're
25:35 - just at the same point where i am let me
25:38 - know inside of the comment section
25:41 - okay are you going to connect to the
25:43 - database do yeah where it's just the
25:45 - client side front-end project
25:46 - yes i am connecting it to mongodb that's
25:49 - why we have already
25:51 - set that thing up yes i'm here uh
25:54 - okay everybody is here with me nice
25:58 - then i will be going ahead so
26:01 - what we need to do now is
26:05 - two things we need to initialize our
26:07 - backend project right and the second one
26:11 - is initialize the back uh git version
26:14 - control
26:15 - we will need them both uh joe
26:18 - says i haven't made the front end but
26:20 - i'm here to learn the back end of the
26:22 - project
26:23 - nice nice stuff uh if somebody is just
26:26 - like joel
26:27 - and haven't made the front end uh you
26:30 - can go ahead and download the
26:33 - uh the front-end stuff from the link
26:36 - inside of our uh inside of today's
26:39 - video's
26:41 - description you can have it and you can
26:44 - work with that but i also highly
26:45 - recommend
26:46 - going back to our uh to the youtube
26:49 - channel
26:50 - and checking out sonny's live
26:53 - build on that video uh on the actual
26:57 - um messenger clone which is somewhere
27:01 - down here uh we actually made
27:04 - quite a lot of builds uh yeah
27:07 - so it's actually it's one of the first
27:09 - builds
27:10 - uh we can see qazi announcing the
27:13 - april winners here and this is the video
27:17 - you want to check out
27:19 - if you haven't built the front end
27:23 - yet now uh you can actually proceed
27:27 - in this video without that so yeah
27:31 - let's actually go back so let's start
27:33 - our git version control
27:35 - uh and i will be just typing in git
27:38 - init and that literally just enabled
27:42 - uh the version control and now i'm going
27:45 - to type in mpm in it
27:48 - not gnome npm in it
27:51 - nice and this will literally just
27:54 - throw a bunch of questions at me nothing
27:57 - super serious stuff
27:59 - we just want to go uh go pass through
28:02 - this stuff and
28:03 - just leave it that way so messenger back
28:05 - end as uh
28:06 - as the package name is a perfect thing
28:09 - version okay
28:10 - description no need for that one thing
28:12 - though
28:13 - uh you need to watch out for is
28:17 - entry point now entry point is a super
28:21 - crucial part
28:22 - uh you want to type in server.js it's
28:25 - more like a naming convention stuff but
28:27 - index.js is just
28:28 - doesn't look good in a back-end project
28:31 - right
28:33 - test command don't worry about it get
28:34 - repositioned don't worry about it
28:36 - keywords don't worry about it author
28:37 - i'm gonna type in david close it's my
28:40 - name
28:41 - license don't worry about it and just go
28:43 - ahead and click okay
28:45 - if you check this out and everything
28:48 - matches
28:49 - now i'm just gonna make this terminal a
28:53 - bit
28:54 - shorter and we just
28:58 - have our packet and a back-end package
29:00 - initialized
29:01 - with this couple of stuff and now guys
29:03 - you literally have
29:04 - a back-end project how awesome is that
29:07 - drop it in the comments let me know if
29:09 - you if you have already
29:11 - got value out of this video let me know
29:15 - and just smash that like button that's
29:18 - all i ask
29:19 - okay let's continue uh inside of
29:22 - package.json we need a couple of
29:24 - modifications
29:25 - to enable es6 because
29:28 - guys we here only work with the newest
29:30 - technologies and esx is one of them
29:33 - so we are actually working on
29:37 - super hard to get 5 thousand developers
29:40 - uh jobs as the uh five thousand people
29:44 - jobs as developers in 2020
29:48 - you might be thinking that 2020 is is
29:50 - not a good year it actually is
29:52 - for 5000 people because we are helping
29:55 - them get a job
29:56 - as developers and we are actually pretty
29:58 - far in that
29:59 - so we want to teach you the most newest
30:02 - the newest technologies so let's stick
30:05 - with me and let's do
30:07 - the backhand build with es6
30:12 - okay um i'll just
30:16 - hit a glance on the comment section
30:19 - yes everybody is excited nice okay i
30:22 - want to currently in front of you.js
30:25 - go ahead radu uh literally you can do
30:28 - whatever you want with it
30:30 - you're just gonna learn
30:33 - nice okay let's actually go here and
30:36 - just type in type
30:38 - and select module and this will
30:42 - allow es this will allow you
30:48 - that you write
30:51 - es6 snippets inside of this
30:54 - project and another thing that you want
30:57 - to go
30:57 - do is inside of scripts you want to add
31:01 - the comma
31:02 - after the tests and add a start script
31:07 - which will be node server
31:10 - dot js and what this will do
31:14 - is literally let you and and help uh
31:18 - heroku
31:18 - where we will be deploying this app by
31:20 - the way so it will help heroku
31:23 - start this uh startup
31:27 - server side application up and it will
31:29 - be running
31:30 - so we need this start script going on
31:34 - uh katherine patel asks hey i'm new
31:38 - can i learn everything related coding
31:41 - from this channel
31:42 - yes that is literally our goal with this
31:45 - channel
31:46 - to help you guys learn and help you guys
31:49 - land jobs as developers
31:51 - 5 000 this year and 10 000 next year
31:54 - so all you need to do is put in the hard
31:57 - work and
31:58 - you literally are covered okay
32:02 - um yeah could i
32:05 - start effects you using your videos
32:07 - definitely you can of course you can
32:09 - overshaw
32:12 - okay now uh package.json is essentially
32:15 - done
32:16 - for now uh we don't we are not going to
32:19 - need that anymore
32:20 - but what we will need is a new file oops
32:23 - um called server.js inside of our
32:27 - back-end project
32:29 - nice okay so let's add the server.js
32:32 - file
32:32 - inside of here and this will essentially
32:36 - uh help us run
32:40 - every back-end stuff going on so uh
32:43 - let's actually mock out how we will be
32:46 - uh working
32:48 - and
32:48 - [Music]
32:51 - let's just add the milestones so we will
32:53 - be importing our dependencies
32:57 - dependencies and next up we will
32:59 - configure app so app.config goes here
33:04 - and we will have a couple of middlewares
33:08 - we will have db config because we are
33:12 - hooking it up to mongodb
33:15 - and we are also have a couple of api
33:18 - routes
33:20 - and we will have a listener
33:23 - whoops listen nice
33:28 - oh someone from facebook says david rox
33:31 - thanks dude appreciate it a lot
33:34 - okay you will be using
33:38 - one repository for your project i
33:40 - actually have one
33:41 - project folder set up and inside of the
33:43 - project folder
33:44 - i have two repositories can you send
33:46 - full project here
33:48 - um full frontend project is just under
33:53 - under this video maybe yeah i think
33:56 - that's the direction
33:57 - um just check out the link links inside
34:00 - are there
34:01 - actually there is one free webinar
34:05 - in the description as well as a gift for
34:07 - you guys
34:08 - it's a completely free training it's
34:11 - going to show you
34:12 - lots of stuff so i highly recommend
34:15 - registering for that like literally
34:16 - pause this video
34:18 - register on that webinar and
34:21 - you can you can just watch it right
34:23 - afterwards
34:24 - it's gonna be jam-packed with value and
34:27 - you also
34:27 - have the um free
34:31 - uh what's that messenger front and build
34:34 - nice
34:35 - let's go back
34:38 - and okay so what we will be doing is
34:42 - first we need to install a couple of
34:43 - dependencies here
34:45 - uh i will be just typing in a bunch of
34:48 - stuff
34:49 - uh so first we need to uh install
34:52 - express
34:53 - because that's the server side uh
34:55 - javascript that we will be using
34:57 - so let's type in here mpmi which
35:00 - essentially means
35:01 - npm install and npm is node package
35:04 - manager so i think i've
35:06 - said everything nice okay so npm install
35:10 - express
35:11 - and we will be using mongoose
35:14 - to connect to our database and
35:17 - we will be using pusher to make our
35:20 - database
35:21 - real time and we will actually add the
35:23 - course here
35:24 - as well because we don't we we want to
35:27 - uh may be able to connect to our backend
35:30 - like super easily
35:32 - let's actually jot down a couple of
35:34 - stuff and i'm just gonna
35:35 - show you how it all will look like
35:39 - so uh yeah i think
35:42 - okay so the front end is going to be
35:45 - this box
35:46 - uh front end
35:49 - nice and we are actually using
35:53 - react here which is uh built by
35:56 - sony uh built by
35:59 - sunny whoops goodbye
36:04 - sunny and quasi
36:08 - so you guys have that part in the
36:10 - description down below
36:12 - the other part is going to be the back
36:15 - end
36:17 - of course we where we
36:20 - have things like this node.js
36:23 - application
36:24 - um node.js
36:28 - and express js
36:32 - nice and we also have
36:35 - mongodb which is an awesome
36:38 - nosql database so mongodb goes inside of
36:41 - here
36:42 - okay um actually
36:46 - who's excited who's excited to have this
36:48 - project
36:49 - on their portfolio who wants to put this
36:52 - mern build on their portfolio
36:54 - let me know in the uh comment section
36:56 - down below
36:57 - let me know if you're excited about this
36:58 - let me know if you want to
37:00 - get a job as a meringue stack developer
37:03 - i would love to see that
37:05 - i prefer i prefer relational database
37:08 - radio
37:08 - you use whatever you want to use i'm
37:11 - just going to show you
37:12 - a bunch of skills that you you need you
37:16 - actually can learn
37:17 - and and then you can just choose
37:20 - whichever you want to go ahead with
37:22 - yes i see a couple of uh comments coming
37:26 - in here
37:26 - everybody is super uh excited
37:29 - awesome stuff okay let's go
37:33 - back i love node.js yeah i want no sql
37:35 - database to
37:36 - learn both and then you will know which
37:38 - one you would like better
37:40 - okay uh boom
37:43 - and with the whiteboard back nice and
37:47 - between this stuff we will actually ha
37:50 - we will
37:51 - make api calls uh
37:55 - from here to here so this is literally
37:58 - like exchanging data
38:00 - between these stuff okay this is how
38:03 - essentially our application architecture
38:06 - is going to look like
38:09 - and yep that's pretty much it and what
38:12 - we also want to
38:13 - what i also want to let you guys know is
38:16 - that we will be using
38:18 - mongoose to connect to our database
38:21 - oops uh i forgot to
38:24 - yeah okay mongoose
38:27 - we will be using mongodb of course and
38:30 - we will be using
38:32 - pusher and these stuff are actually
38:35 - all together because this is all
38:38 - database
38:39 - and we will also use uh
38:42 - node.js which is a backend javascript
38:45 - runtime
38:46 - and we will be using express.js as
38:50 - as a back-end framework right
38:55 - these are the stuff that we will be
38:57 - using on the backend side
38:58 - nice so with all so now
39:02 - i showed you guys told you guys
39:04 - everybody should
39:05 - be able to know uh what we're gonna be
39:08 - doing
39:09 - okay let's actually import all the
39:12 - dependencies first we need to
39:14 - install them and why not why not use
39:17 - django for the api
39:21 - we are going to use javascript today um
39:24 - i think we can
39:25 - actually make a couple of videos in
39:26 - python i'll i'll talk to the guys and
39:29 - we'll figure it out okay express is
39:31 - awesome
39:32 - yes that is correct why not socket io i
39:35 - mean
39:35 - we could use socket i o but that's just
39:37 - too much headache to
39:39 - set up so
39:42 - i think pusher and and mongodb is a lot
39:46 - easier and you will actually see
39:49 - how awesome it is okay um
39:55 - nice okay let's actually go ahead and
39:57 - import all these stuff that we have just
40:00 - uh installed and this is actually i have
40:03 - this snippet of snippets of code
40:05 - um ready so i'm just going to go ahead
40:08 - and copy paste stuff here
40:10 - and then you can watch these videos back
40:12 - on your own page
40:13 - but i will be explaining everything live
40:17 - so currently we are importing express we
40:20 - are importing mongoose we are importing
40:22 - pusher and
40:23 - notice that here i am actually
40:26 - importing it with a capital oh
40:30 - sorry with a capital p
40:33 - and all the others are not capital right
40:37 - i just want you to notice and notice
40:39 - that and
40:41 - make sure that you know uh
40:44 - make sure to know how you will actually
40:47 - uh import these stuff i'm just going to
40:50 - zoom in a bit more so can either guys
40:52 - can
40:52 - see it better and
40:55 - okay i think the video is now better
41:01 - okay awesome uh bd gamer says i'm
41:04 - working in
41:05 - infosys i am using node.js nice dude
41:08 - i love node.js keep it up okay
41:12 - what we will also be doing is create an
41:15 - app config and we will literally just
41:18 - create a variable a const
41:21 - which will be an app and that is going
41:24 - to be
41:24 - an oops and express
41:28 - so this literally creates our
41:31 - app instance okay please explain about
41:33 - pusher i will explain
41:35 - everything about pusher a bit later
41:39 - when we're actually making the whole
41:40 - thing real time but pusher is good to
41:42 - make
41:43 - uh this stuff real time okay
41:48 - and another thing we will be use we will
41:50 - be
41:51 - uh setting up as uh in oops as an app
41:56 - as app.config is the port where our
41:58 - application is going to listen
42:00 - now also we need to define it like this
42:03 - so we will add the process environment
42:06 - port
42:07 - which we will be setting to 9000.
42:10 - can i mix firebase out with backhand
42:12 - side
42:14 - yes i'm sorry i had to uh stop uh
42:17 - explaining because this is such an
42:19 - awesome question yes you can mix
42:21 - firebase authentication that's what we
42:23 - usually do because setting up
42:24 - uh backend authentication is like crazy
42:29 - um so
42:32 - we usually just go ahead with firebase
42:34 - authentication
42:35 - now we actually are going to make a
42:37 - video on
42:39 - normal back-end side authentication as
42:41 - just as a comparison
42:42 - we will show you uh the firebase
42:46 - authentication
42:46 - in that same video so you can just have
42:49 - an idea which one to use and when
42:51 - well which one you like better
42:55 - okay um let's go
42:58 - back and let's actually um
43:01 - understand what is going on here so up
43:04 - here i've
43:05 - created an instance for my application
43:07 - which is going to be an express
43:08 - application
43:10 - and the process environment port ooh
43:13 - process environment port is going to be
43:15 - 9 000
43:17 - um and that will actually
43:21 - that that's the port that we will be
43:23 - using to uh
43:24 - call our application syed muhammad says
43:27 - i'm a beginner would someone suggest me
43:29 - some good morning stack course
43:31 - this youtube channel is your one stop
43:34 - shop
43:35 - uh if you want to learn learn
43:40 - okay and what we will be doing as well
43:45 - is i think we first let's just
43:49 - create a hello world uh
43:52 - api route and what we will be doing is
43:55 - say
43:56 - app.get and on the root
44:00 - if there it's gonna fire off a callback
44:03 - function
44:04 - which will have a request and a response
44:08 - param and if we call this
44:11 - with the get method we will be just
44:15 - setting the response status to
44:18 - 200 and send back
44:22 - hello world now guys what
44:25 - is this doing because there's probably a
44:28 - couple of beginners inside of the
44:29 - comment section i want to actually
44:32 - help you guys understand what's going on
44:34 - here
44:35 - has quite a lot of stuff so app
44:38 - that is the instant that we just created
44:41 - and the get
44:42 - is actually a method that you can use to
44:45 - call an api
44:46 - right i'll be explaining
44:50 - it a bit more and you will see that get
44:52 - is essentially downloading data from the
44:54 - server
44:55 - and we will be using post today
44:58 - and that is uploading data to the server
45:01 - and we also have put which is replacing
45:04 - data
45:05 - on the server and we also have delete
45:08 - which is i don't think i have to
45:10 - uh speak too much about it this
45:13 - is going to be the endpoint
45:17 - so i'll be showing it a little bit later
45:19 - uh
45:20 - what's the purpose of this part uh this
45:23 - is the
45:25 - function that we will be firing off and
45:28 - these are the parameters so there's
45:29 - going to be a request and a response of
45:31 - course
45:32 - and this is what is going to happen if
45:34 - we
45:35 - call with the get method on the route
45:38 - nice and
45:44 - and we will be just setting the result
45:46 - status to 200
45:47 - which means okay and we will be sending
45:50 - back hello world
45:51 - that's literally what we will be doing
45:53 - here and inside of listen
45:56 - we just say app go ahead and listen on
45:58 - the port and fire
46:00 - off this function which will console log
46:05 - listening on localhost
46:08 - and oh i used the wrong quotation marks
46:12 - so i should have been using backticks
46:14 - here okay let's actually
46:16 - did everything so what you want to do
46:18 - here is literally just
46:20 - give you give yourself a bit of a
46:22 - feedback
46:24 - that you have started your application
46:25 - correctly so this
46:27 - file this will fire off if your
46:29 - application has built
46:30 - and if it's ready to run okay
46:34 - what you want to do here is add a pair
46:36 - of
46:37 - tactics and say listening on
46:40 - localhost oh
46:45 - and add the stuff here and
46:48 - type here port which will just
46:52 - concatenate the string now guys
46:56 - who thinks this application is actually
46:58 - working let me know in the comment
46:59 - section
47:00 - let me know uh or let me know in in the
47:03 - chat if you
47:04 - already got value out of it and smash
47:07 - that like button if you
47:08 - already like it all right
47:11 - and we will be using something called
47:13 - nodemon
47:15 - to fire off this application and
47:18 - we literally have it running
47:22 - so you can already see that listening on
47:24 - localhost 9000
47:25 - that means we have it running
47:29 - guys this is nice stuff and now let's go
47:32 - ahead
47:33 - and open up an application called
47:36 - postman which is for some reason not
47:38 - open for me
47:40 - uh and what we will be doing is first
47:43 - i'm going to zoom in so that you guys
47:45 - can actually see
47:47 - uh boom these are by the way
47:50 - all the api routes that we will be
47:53 - having
47:54 - so we will have a safe message and a
47:56 - retrieve conversation
47:58 - so let's go this is going to be the
47:59 - health check if it
48:01 - works we have everything good
48:04 - guys actually great job this is
48:07 - actually working i think that deserves
48:11 - an air horn nice job
48:14 - who he who is actually here with me
48:18 - uh with their first api route
48:22 - let me know in the comments let me know
48:24 - if you guys are here with me
48:26 - and if you guys
48:29 - have successfully built your first api
48:32 - route that's actually a great
48:34 - job okay let's go
48:37 - back um
48:41 - okay what we are going to be doing today
48:45 - yes alex says me myself
48:49 - okay myself says let's go yes let's go
48:53 - uh okay how can i speak to you privately
48:56 - uh
48:56 - actually dm me on this instagram
49:00 - link which is over there
49:04 - okay this is where i am
49:08 - yes i'm here says ma doma okay this is
49:11 - awesome
49:12 - nice okay here with you i'm just
49:14 - watching man i have a terrible
49:15 - toothache oh my god get better soon um
49:20 - okay let's go back
49:24 - nice tutorial thank you so much
49:26 - alexandros with the plus signs
49:28 - nice you're you're texting from a
49:31 - terminal right
49:33 - okay greets from israel hey hello
49:38 - um okay now
49:42 - um what we will be doing is going
49:45 - back to our mongodb database this is
49:48 - usually done by now this usually uh
49:52 - takes a couple of time takes like 10
49:54 - minutes or so
49:55 - to set up what we will be doing is
49:58 - oh this screen brush is actually
50:02 - blocking the view
50:03 - uh hold on in fact no i can't
50:07 - um let me let me go ahead and
50:11 - without toolbar yeah okay
50:14 - so we will be setting up the database
50:17 - access
50:18 - and the network access first let's go
50:22 - with the network access um
50:26 - high screen brush nice uh so we will be
50:28 - going into the network access
50:31 - that's the button that you want to click
50:33 - and we're just gonna add an ip address
50:36 - and we will click
50:37 - allow from anywhere normally
50:40 - and this is a huge disclaimer that i've
50:43 - done
50:44 - last time so this disclaimer
50:48 - do not do this in production environment
50:50 - do not do this
50:52 - when you're working with a client you
50:54 - don't
50:55 - want to allow access to your database
50:58 - from anywhere because
51:00 - that means you could literally let
51:02 - anyone go in
51:03 - there and mess up your application
51:06 - okay but for the sake of this um
51:10 - this tutorial i'm just gonna go with
51:13 - allow access from anywhere
51:15 - okay nice uh i'm just gonna go ahead and
51:17 - hit confirm
51:19 - and let me know if you are with me
51:23 - and if you have your mongodb ready
51:26 - and if you've just set up allow access
51:29 - from anywhere
51:30 - i like so much working on mongodb
51:34 - nice mango db is actually a really
51:37 - powerful stuff
51:39 - okay um okay
51:42 - now let's go back let's go to database
51:45 - access
51:46 - and let's actually add a new database
51:50 - user
51:50 - now guys hear me out this is a super
51:53 - important part
51:54 - uh because now we will be setting up a
51:57 - database user
51:58 - that we will be using to connect to our
52:01 - database
52:02 - okay um there is actually
52:07 - some stuff that you want to make sure of
52:11 - one of them is auto generate password
52:15 - that's actually a good thing to use but
52:18 - if you use that
52:19 - you want to go ahead and show it and
52:22 - save it somewhere safe i am using offred
52:25 - so
52:26 - i have all my
52:29 - all my snippets from my clipboard for
52:32 - the last three months
52:34 - over here so i am safe this way but guys
52:37 - if you're not saving this password
52:40 - you're literally uh not gonna be able to
52:43 - retrieve this password anymore
52:45 - i'm just going to hype and type in admin
52:48 - and there's nothing else to do here you
52:51 - can go ahead and
52:53 - hit add user
52:58 - okay
53:00 - nice um guys who is with me
53:03 - who has done who has set up the network
53:06 - access
53:06 - and the database access if these two
53:09 - are done and you see this blue thing
53:12 - going on up top
53:15 - that we are currently deploying your
53:17 - changes that's actually a really good
53:19 - place to be
53:20 - because now we are able to connect to
53:22 - our database
53:24 - so guys let me know in the comments if
53:26 - you're with me or if i need to
53:28 - go back to something and yeah after
53:31 - completing the studio can you give me a
53:33 - description to download this project
53:36 - uh yeah i think so i think so
53:40 - okay let's go ahead and
53:43 - click connect and it will just
53:46 - prompt you this page and you want to go
53:49 - ahead and
53:51 - use this connect application i see
53:54 - pankaj gupta is just watching
53:56 - that's actually good vlad is uh
53:59 - following
54:00 - me along awesome uh if you guys are just
54:03 - watching that's not a problem
54:04 - it's all good but then make sure to come
54:07 - back here
54:08 - and see it again prashun asks what is
54:12 - mongodb
54:13 - um this is literally just a database
54:16 - so it's uh that's the simplest way to
54:18 - put it
54:19 - uh of course we are not gonna be using
54:22 - on sql here because
54:26 - sql is kind of a headache
54:29 - but we are using a nosql database
54:33 - um and that's just so much nicer and
54:37 - easier to set up
54:38 - and we will be storing our data in there
54:41 - all right
54:42 - with that done let's hit this connect to
54:45 - connect your application button over
54:48 - there
54:49 - okay um we got our
54:52 - uh login or the connection string here
54:56 - the uri you want to go ahead and
54:58 - copy it but notice that the password is
55:01 - not
55:01 - injected in there that's why you had to
55:04 - save it somewhere safe
55:05 - and also the db name is going to be up
55:08 - to us
55:09 - let's copy this and go back to our
55:12 - code now let's go to the db config part
55:16 - and let's say mong
55:20 - uh i've just imported something
55:22 - excellently
55:23 - let's delete that and so on db config
55:28 - what you want to type there is literally
55:31 - just
55:31 - mongoose the connect
55:34 - and and actually
55:39 - let's save it to uh let's save it to
55:42 - another variable
55:43 - let's create a const uri
55:47 - and let's type let's just
55:50 - add it in here so here
55:54 - we essentially have the whole connection
55:57 - string that we just copy pasted from
56:00 - mongodb this is where the password goes
56:03 - so you definitely want to
56:04 - uh replace that and the db
56:08 - name should be i think it could be like
56:11 - i don't know
56:12 - messenger db
56:15 - that's actually a pretty good name and
56:18 - what you want to do inside of here
56:20 - is just type in uri
56:24 - with this your application is almost
56:27 - done
56:29 - i mean no the connection is almost done
56:31 - but
56:32 - let's pass in a couple of
56:37 - couple of
56:41 - years creating next night let's pass in
56:44 - a couple of parameters for this
56:45 - connection
56:46 - and these are just necessary
56:50 - so that your mongoose will
56:54 - will work better okay um
56:57 - i think with this we should have
57:00 - an application we should have the
57:02 - database connected but just to make sure
57:05 - that everything is up and running let's
57:08 - actually type in here mongoose
57:12 - dot connection the ones
57:17 - oh and
57:20 - if it's open you just wanna
57:24 - go ahead and fire off a function
57:27 - which will essentially console log db
57:32 - connected now what this does
57:35 - is
57:39 - this is just going to give you a little
57:41 - feedback
57:42 - that your db is connected like uh i
57:45 - don't know if you guys can see
57:46 - it i hope i hope so um
57:50 - oh no my fl i'm actually blocking okay
57:52 - i'm gonna move myself
57:54 - over there and i just
57:57 - okay so that's the line that you want to
57:59 - see if you see that
58:01 - that means your database is connected so
58:04 - the line that we just added is literally
58:07 - [Music]
58:09 - it's like reading english so once the
58:12 - mongoose connection
58:13 - is open console log db connected
58:18 - okay um
58:22 - in vs code you can yes exactly you can
58:26 - use them and reuse them google it um
58:29 - actually googling something in
58:31 - programming is a pretty
58:32 - uh pretty good way to go about
58:35 - and what is this message in the terminal
58:38 - the ems esm module loader is
58:40 - experimental
58:41 - um that's a good question so let me
58:44 - let me just go ahead and show you guys
58:47 - what is he talking about
58:50 - this is the message so this thing
58:53 - means that es6 in node.js is
58:57 - actually in experimental but soon
59:00 - very soon oops very soon it's going to
59:03 - be the trend
59:04 - and that is going to be the requirements
59:06 - for the jobs so
59:07 - we are still using it in the
59:10 - experimental state
59:12 - so that you guys can get the most value
59:15 - out of these tutorials
59:16 - and you can actually be one of those 5
59:20 - 000
59:20 - people who get jobs as developers in
59:23 - 2020
59:24 - because 2020 is a good year
59:28 - okay googling is the way to learn
59:30 - something new
59:32 - that's that's literally it let me make
59:34 - it big because that's literally it
59:38 - what's the difference between firebase
59:39 - and mongodb
59:41 - firebase is a hybrid of sql and nosql
59:45 - databases
59:46 - and mongodb is just nosql
59:50 - okay i hope that um answered
59:54 - i really hope actually everybody is
59:57 - getting the most value out of it so
59:59 - if you if you're getting a lot of value
60:03 - of this video please let me know
60:06 - by smashing that like button like
60:09 - literally go ahead and destroy it
60:12 - um and if you guys got value
60:15 - out of this channel and we are actually
60:18 - at
60:18 - 280 286 likes
60:22 - guys make it bump up to
60:25 - 300. let's go and smash everybody
60:29 - um let's put it up to uh
60:32 - 300 nice uh mohit says smashed and
60:36 - subscribed
60:37 - awesome you will not regret it how to
60:40 - use
60:40 - instead of require how to use import
60:44 - instead of require
60:45 - um i mean i've just showed you let me go
60:49 - back to my code
60:50 - and yes we are above 300 thank you guys
60:54 - awesome and how to use import instead of
60:57 - require yes i'm just going to show that
61:00 - um okay boom
61:05 - so guys if you have missed it oh sorry
61:10 - okay here we go um
61:14 - why is my vs code acting up
61:18 - okay we don't need that nice okay so
61:20 - what i've done
61:22 - uh to make it work is i went to the
61:24 - package.json file
61:27 - and added this line of code this enabled
61:30 - es6
61:31 - and import instead of require and stuff
61:34 - like that
61:35 - and inside of here i just use the
61:39 - used import instead of requiring it
61:43 - okay now uh one thing
61:47 - okay so we have our database connected
61:50 - that's actually
61:51 - awesome what we need to do now
61:55 - is create our um
61:59 - database uh what you call it
62:03 - database model yeah that's the word
62:07 - so uh let's actually add a new file
62:10 - inside of our backend project
62:12 - and we will just call that message
62:16 - model.js oh
62:19 - um i called it jazz
62:22 - that's not working okay so we are going
62:26 - to be
62:27 - building a model for our database this
62:30 - is literally just a schema or structure
62:32 - of the data that we will be adding
62:36 - inside of our database uh
62:39 - vlad says it doesn't work for me
62:43 - um drop me a message on my instagram and
62:46 - i might be able to help you
62:48 - okay um let's actually import
62:52 - mongoose oh yeah
62:55 - mangoes from mongoose and because that's
62:58 - how we will be setting up our
63:01 - schema and what we will be doing here is
63:04 - create a cons oh const
63:08 - message schema and it's going to be
63:12 - a mongoose oh mango
63:17 - mongoose the schema
63:21 - nice finally and inside of here
63:24 - we are just going to have these three
63:28 - parameters
63:29 - which is username message and timestamp
63:31 - and
63:32 - all of these are going to be strings
63:35 - which means these are going to be text
63:37 - um accidentally imported mango again you
63:40 - don't need that
63:41 - we just need mongoose and what we will
63:45 - be doing now is basically export default
63:48 - and we will say mango mongoose
63:52 - the model and
63:55 - now guys this is again a place where you
63:59 - don't want to um what you don't want to
64:02 - mess up
64:04 - here goes the collection name that we
64:07 - will be using
64:08 - now make sure that you write something
64:10 - plural
64:11 - in here because no mongodb is going to
64:14 - actually polarize it no matter what
64:17 - and when you are working with pusher
64:20 - uh it's not going to work and this is
64:24 - going to be the reason
64:25 - you have to put in plural things uh
64:28 - so we would just say messages
64:32 - and messages will be the collection so
64:34 - uh
64:35 - collection in nosql is kinda like
64:39 - table in in sequel
64:43 - so i kind of like to say that
64:47 - these are not equivalents a huge
64:48 - disclaimer again i'm just
64:50 - trying to explain it a bit better
64:54 - so in in in sql you have the big
64:58 - table and inside of there there are
65:01 - records
65:02 - in nosql you have a collection inside of
65:05 - a database and inside of a collection
65:07 - you have documents
65:08 - and the documents have actually fields
65:10 - right so it's
65:11 - kind of it's kind of equivalent but they
65:15 - are actually not
65:18 - um okay now
65:21 - mango is not moto and messages is going
65:24 - to be
65:25 - the um uh
65:28 - collection and we will add the message
65:30 - schema
65:31 - in here uh pankaj gupta says
65:34 - sequel has a structure we have just
65:36 - created a nosql structure my friend
65:39 - so no sql can have the structure as well
65:42 - okay if you're at this point you're good
65:46 - to close this file
65:47 - we will not need this anymore
65:50 - uh that import was a typo
65:53 - i hope it's not on my screen okay um
65:58 - yeah i think yeah so with this done
66:01 - guys actually let me know if you guys
66:04 - are done with the schema if you have
66:06 - a nosql structure in front of you
66:09 - and if we can go ahead
66:13 - okay uh yeah i'm gonna go ahead and go
66:17 - back greetings from peru what's up
66:19 - milton
66:21 - um and let's go back to server.js
66:26 - this is this is gonna be the juicy part
66:28 - so if you guys are still here with me
66:30 - and if you guys enjoy this video uh
66:33 - let's actually everybody
66:34 - go ahead and smash that like button like
66:37 - destroy it like like this is what you
66:40 - get uh
66:41 - like button should see uh like literally
66:45 - destroy that like
66:46 - button because we are trying to give you
66:48 - guys as much value
66:49 - as possible uh so let me know guys if
66:53 - it's
66:54 - actually helpful for you and
66:57 - if you enjoy it and if you're with me um
67:01 - done with the schema
67:04 - let's go back to our server.js and
67:07 - what we have and let's actually import
67:10 - it as well
67:12 - okay let's go up here this is where uh
67:15 - we all
67:16 - this is where we import all our stuff so
67:20 - i'm just going to import it as
67:22 - messages
67:23 - and we will be using the uh
67:26 - [Music]
67:28 - messagemodel.js file for it
67:31 - okay um
67:33 - [Music]
67:37 - okay let me actually check the comment
67:40 - section my bad
67:41 - no pankaj we are here to learn that's
67:44 - all
67:45 - okay um awesome awesome
67:50 - so guys keep the chat positive we are
67:52 - trying to
67:53 - stay very healthy we are trying to build
67:56 - a very healthy community
67:57 - here um so let's actually
68:02 - let's just we are here to learn we are
68:04 - here to teach each other some new stuff
68:06 - some cool stuff
68:07 - so okay with that done let's go back
68:10 - and let's create our um
68:13 - save messages uh
68:17 - endpoint let's go back to api routes and
68:20 - in the new row we will be saying
68:23 - app.post
68:24 - so you remember post is literally
68:28 - is essentially just uploading data to uh
68:31 - to the backend to the server
68:33 - so yep and this is where we will be
68:37 - defining
68:38 - the endpoint oh josh says i really love
68:41 - this channel thank you
68:43 - no dude thank you and make sure to stick
68:47 - with us stick to the end of this video
68:49 - and hope you will get the most
68:53 - value out of it all right um
68:59 - nice okay um so let's actually create
69:02 - our endpoint and it's going to be
69:04 - safe slash messages
69:07 - because this app is actually
69:12 - able to scale up to save images
69:15 - and to save separate
69:18 - conversation rooms guys if you actually
69:21 - want to go ahead
69:22 - and create separate conversations
69:24 - because this will be
69:25 - just one conversation app let me know in
69:29 - the comments and i can come back with
69:31 - another build
69:32 - where we add all those features so it
69:34 - will have chapter
69:35 - features and uh image sending features
69:39 - let me know guys
69:40 - if you're interested in that and we will
69:43 - be doing that too
69:45 - uh yeah okay let's go
69:48 - and add the callback function which will
69:52 - of course have a request on the response
69:54 - parameter and what we want to do
69:59 - is right away save whatever we got back
70:03 - uh in the request body i will be showing
70:07 - what that is but just let's actually um
70:10 - just go ahead and do it and i'll explain
70:12 - everything a bit later
70:14 - so we will be creating a const which
70:16 - will be a db messages
70:18 - yes everybody yeah replaces yes
70:21 - let's do it uh definitely yes
70:25 - uh i am interested awesome
70:28 - we got facebook user who says yes hey
70:31 - facebook users
70:32 - i'm interested uh okay
70:36 - that sounds cool awesome
70:40 - okay that's cool nice okay
70:45 - okay um yeah so let's go back to our
70:49 - build
70:50 - uh i i saw a zoom please so i will be
70:54 - zooming
70:55 - uh i hope you guys can see it now uh
70:58 - so let's actually without further ado
71:01 - let's go back
71:02 - and save whatever we get from
71:05 - the request body so db message
71:08 - will be request body
71:12 - right that's pretty much it we have just
71:15 - saved new message into a variable
71:18 - now what we need to do is save it into a
71:20 - database and that is going to be super
71:22 - easy because we are just going to say
71:24 -  mess oops mango messages
71:30 - if i learn typing that wouldn't that bad
71:34 - okay i've imported it again accidentally
71:37 - and mango messages is actually this
71:39 - thing that we just created
71:41 - as the schema right so this is the thing
71:44 - that we import
71:46 - here and then use it here
71:49 - so mango messages.create and this is
71:52 - where we are gonna just
71:54 - pass in the db message that we just got
71:56 - that's gonna be the new message
71:58 - when you hit send this is gonna be fired
72:00 - off
72:01 - and let's see if we got an error or
72:06 - everything is fine uh as a callback
72:09 - function
72:10 - and if we got an error we will be
72:14 - setting the response status to 500
72:18 - and send the error back
72:22 - and else we will be sending the response
72:24 - status 201
72:26 - which means created and everything is
72:29 - good
72:30 - that's kind of like 200 but 201 is used
72:33 - when the
72:34 - method is post and we're just going to
72:37 - go back
72:38 - and send the data okay
72:42 - we got 217 people
72:45 - with us let's go guys
72:49 - awesome robash asks can we add the
72:52 - delete feature today
72:54 - um you can add a delete feature
72:57 - and let me know uh on my instagram which
73:00 - is
73:02 - davidracosi.js send me a message if
73:04 - you've done that and we can do that
73:06 - uh in the next video all right
73:10 - nice and we should be able to
73:14 - save a message let's actually go ahead
73:17 - and test it out
73:19 - boom nice okay uh let's save the message
73:24 - and this is where we will be adding the
73:26 - body
73:27 - and i actually got a yeah
73:30 - um because he says damn
73:33 - nice or actually let's say this is
73:36 - working and kazi loves the rocket
73:40 - uh emoji so we will be using the rocket
73:42 - emoji
73:44 - or uh yeah and let's hit
73:47 - send and for some reason there is an
73:50 - error and it says save message
73:55 - oh because i've used plural plural here
73:57 - let's remove the s
74:00 - or add the s there and
74:04 - okay something is still not going well
74:08 - oh my god there is a bug let's fix it
74:13 - okay um let's see what we got
74:17 - uh this is when the debugging starts so
74:20 - i will be zooming out a bit
74:24 - and what we will be doing is let's
74:27 - actually
74:28 - console.log the db message
74:32 - so that we see everything going on
74:36 - message model says username message and
74:39 - timestamp
74:40 - that's good we are importing it
74:44 - okay okay i just found out what i've
74:47 - meant uh what i forgot
74:49 - guys middlewares it's a super important
74:53 - thing
74:54 - middlewares if somebody has watched
74:58 - i feel that energy let's go
75:02 - exactly actually sunny and i are
75:05 - planning
75:06 - actually everybody else who's coming
75:07 - live on this channel we are planning to
75:09 - add more
75:10 - like features like that whenever like if
75:11 - there is a bug like boom let's turn
75:13 - everything into red
75:15 - so guys if you're excited about that let
75:17 - me know
75:19 - um so what we forgot is literally
75:22 - the middlewares and
75:26 - these these are literally like two lines
75:28 - of code
75:30 - one of them is app.use expressjson and
75:33 - that will allow us to process json stuff
75:37 - and the other one is app.use
75:41 - course which will be just adding the
75:43 - course headers so
75:44 - everything is going to be smooth and all
75:46 - good
75:48 - okay um
75:51 - yes uh replace with uh
75:54 - rookia asks um we use postman just to
75:58 - test the apis right
76:00 - that is correct and to fetch the data in
76:02 - our project we
76:03 - use to replace with axios
76:07 - yes we will be using axios um
76:10 - but just later on when we connect it to
76:12 - our front end
76:14 - okay boom um
76:17 - let's go back and let's test it out
76:21 - again
76:22 - okay now that we got it working that's
76:26 - the thing that i also always forget
76:28 - boom there we go uh now we will actually
76:31 - need to go ahead and
76:32 - remove that um empty stuff from our
76:35 - database because this is going to be
76:37 - just there and
76:38 - be like rubbish and let's
76:41 - now actually create the api endpoint
76:44 - that
76:44 - will retrieve the data
76:48 - we don't need this console log anymore
76:50 - because i've just debugged it
76:53 - so the other thing that we will be doing
76:56 - is say app.get
77:00 - and retrieve and
77:03 - it's going to be conversation
77:07 - we are literally retrieving the whole
77:09 - conversation using this api endpoint
77:13 - whoa windows 40 96 is here
77:16 - hi love from canada
77:20 - yo hey canada what's up
77:23 - um from croatia what's up croatia
77:27 - and is this nodejs or express
77:31 - um actually node.js is a runtime an
77:35 - express is a framework so it's actually
77:37 - both
77:39 - okay um did anyone format the api
77:43 - response um
77:45 - api response is kind of like set by the
77:49 - data
77:50 - and the data is kind of is set with
77:53 - within here so you will be getting back
77:55 - this data structure
77:57 - that's how you can customize it
78:00 - okay awesome so we have the retrieve
78:03 - conversation
78:05 - which will fire off the usual request
78:08 - response parameter
78:10 - parameter callback function i think
78:12 - that's the correct terminology
78:15 - um yes thank you for the typo
78:19 - uh we're responding to right typo
78:21 - retrieve
78:24 - i think it's good now let me know if if
78:26 - it's good now
78:27 - um i think it's good uh thank you for
78:30 - spotting the typo by the way
78:32 - uh okay and let's actually say
78:35 -  messages dot find
78:39 - and inside of here you could literally
78:42 - like
78:42 - search for um search for stuff
78:46 - like search for specific conversation
78:50 - parts
78:51 - uh but we are just gonna retrieve the
78:54 - whole thing
78:55 - guys as i've said earlier i'm actually
78:58 - planning to
78:59 - um make another video on this
79:03 - and yes we will be using react uh so i'm
79:05 - planning to make another video
79:07 - on this with adding chat room
79:11 - support and attachment support
79:15 - okay so
79:19 - inside of here we will have just the
79:21 - error
79:22 - and the data and
79:25 - i'm going to just literally copy paste
79:27 - this part of the code
79:29 - and set it to 200 because that's
79:33 - literally
79:33 - how that's literally all we need
79:37 - okay muhammad ahmad says
79:41 - good vibes exactly we are trying to keep
79:45 - up the energy guys if you're still here
79:49 - still here with me smash the like button
79:51 - and wake up and let's actually stretch
79:54 - because this is where like the juicy
79:57 - part is gonna come
79:58 - we have just created our um
80:02 - database stuff and the back-end stuff is
80:04 - essentially almost done
80:06 - we will be coming back in a bit but
80:08 - let's just take it away
80:10 - uh take it away uh for a bit and
80:13 - let's test it the retrieving function
80:17 - out and yes that is there we go
80:21 - this is working now guys we can
80:24 - literally go ahead and
80:30 - let's set up the uh connection between
80:32 - the front and the back end
80:33 - who's excited who is here with me who
80:36 - has their backhand done
80:39 - let me know guys if you're here with me
80:41 - and if you have done
80:42 - your back end okay
80:46 - um boom
80:49 - uh where is my code there we go
80:53 - lots of likes i like that
80:56 - yes me boom there we go
81:00 - um is next yes hard to learn
81:04 - if you know react no it's not that much
81:07 - hard to learn
81:09 - uh actually ask sonny as well
81:14 - oh yeah okay
81:18 - um so what we will be doing here
81:22 - is let's actually close out
81:25 - all these two stuff and let's go to our
81:29 - front end
81:31 - and inside of app.js we have all these
81:34 - stuff
81:34 - going on but what we definitely need to
81:38 - do
81:40 - is uh is install axios so we will be
81:43 - using
81:44 - axios to access our database and access
81:48 - our back end right and we still have 200
81:52 - people with us
81:54 - that's good okay so let's go ahead and
81:57 - install axios first and then we will be
82:00 - moving forward from there um
82:04 - okay let's open up the terminal let's
82:07 - create a new one
82:09 - and let's actually go into
82:12 - the starter project that i've gave you
82:15 - guys
82:16 - and i'm just gonna go in and type in
82:19 - mpmi
82:23 - um we will be
82:26 - typing in axios and that's just
82:29 - literally going to go ahead and install
82:31 - it
82:32 - and in the meantime we will be creating
82:34 - an axios
82:35 - dot js file to set everything
82:38 - up and running and execute the js file
82:42 - is kind of
82:43 - we will be just creating an instance uh
82:48 - to retrieve all the data and to actually
82:51 - shoot inside of our back-end right
82:54 - okay let's close it up we're not going
82:56 - to need the
82:57 - terminal for a while and let's say
83:01 - import axios from
83:04 - axios okay nice and now
83:07 - we are gonna go ahead and create our
83:10 - instance so
83:11 - const instance equals
83:14 - axios dot create oh
83:17 - create and inside of here we're just
83:20 - gonna pass
83:21 - in the base url which is essentially
83:25 - because we are only have it in our local
83:27 - environment
83:28 - for now we will be deploying it in just
83:31 - a bit stay here with me
83:33 - if you want to have it deployed so in
83:35 - the base url we're just going to say
83:37 - http column slash
83:40 - local host and
83:43 - 9000 is the port where we have
83:46 - our server running right
83:50 - okay and of course we need to export
83:53 - default
83:54 - uh as a default
83:58 - the instance here we go
84:02 - we just created an axios
84:05 - uh instance guys who has an axios
84:08 - instance
84:08 - drop axios and the fire emoji in the
84:11 - comment section
84:12 - if you have a um if you have an axios
84:16 - instance let me know i'll be waiting
84:20 - here for a bit
84:21 - uh and yep that's pretty much
84:26 - pretty much about the axials and whoa we
84:29 - are at 364 likes
84:33 - guys if you find this valuable and if
84:35 - you're with me
84:37 - with an axios instance ready
84:40 - smash the like button like literally
84:42 - destroy it
84:43 - and we can spread this video out to
84:47 - literally anybody all over youtube
84:49 - because the algorithm is gonna know that
84:51 - this is some good stuff
84:53 - so if you think this is some good stuff
84:55 - smash the like button so that other
84:57 - people
84:58 - will be able to see it nice awesome
85:02 - okay let's actually
85:06 - go back to our code
85:10 - here we go and
85:13 - what we will be doing is essentially
85:15 - just uh
85:17 - removing all these firebase stuff first
85:20 - because we're not going to use that
85:22 - anymore
85:23 - uh so let's actually start here up here
85:27 - uh from the importing section so
85:31 - notice that uh line five and six
85:34 - are not needed because we are importing
85:37 - them from firebase
85:39 - no need for those stuff um
85:42 - by the way in the back end if you have
85:44 - your front end running it's going to
85:46 - freak out for a while
85:47 - um but it's it's all good uh we will
85:50 - make it work
85:53 - okay um
85:57 - how do you get how do i get those techie
85:59 - emojis
86:00 - next to the next to the file okay
86:04 - um i think it's it's an extension it's
86:07 - one of one of my extensions
86:09 - oh i think it's some icon stuff
86:13 - material icon yeah i i think it's this
86:16 - one
86:17 - and it's just going to go ahead and yeah
86:19 - this is the one
86:20 - the material icon theme okay
86:24 - let's go let's continue with the build
86:28 - so we will just go ahead
86:32 - and create a function which will be
86:35 - responsible
86:36 - so let's actually get rid of this use
86:39 - effect
86:40 - we're not going to use that anymore um
86:44 - and let's actually create a sync
86:47 - function
86:48 - which we will be using to retrieve the
86:50 - whole conversation
86:52 - and what happens here is that whenever
86:54 - this
86:56 - it's actually going to be an async
86:57 - function by the way so whenever this
86:59 - sync function is fired off
87:01 - it will be waiting until it gets a
87:04 - response from the retrieve
87:06 - conversation uh endpoint
87:09 - from this uh axios instance right
87:14 - so the full link that we will be
87:16 - fetching
87:17 - is going to be a local host 9000
87:20 - slash rate
87:24 - retrieve
87:28 - slash convertation i forgot the time
87:33 - uh rahul asked i hope this would
87:36 - be available to watch later yes it will
87:38 - if you cannot
87:39 - keep up with me all good uh you will be
87:42 - able to
87:43 - watch it later and i think i'm gonna
87:46 - speed up a little uh so you guys if you
87:50 - cannot follow up with me
87:51 - not a problem you will be able to watch
87:53 - it so we have this sync functionality uh
87:56 - sync function going on which fetches the
87:59 - data then
88:00 - console logs the response which probably
88:03 - we don't need but it's nice to have
88:04 - and we have a set messages hook that we
88:07 - are
88:08 - passing and mapping through here
88:11 - and that's what we will be using to
88:14 - like decide which message goes where
88:17 - which language am i using
88:19 - uh javascript um
88:23 - yep and okay so we have it ready
88:26 - so the messages are set nice
88:30 - and next thing we will be doing is add a
88:33 - use effect
88:34 - that we that just fires off uh
88:38 - when the app is loaded so normally
88:42 - not normally in a class-based um
88:46 - in a class-based uh component you would
88:50 - have componented mount or something like
88:52 - that
88:52 - but this is actually a lot more powerful
88:55 - because we could add
88:56 - um dependencies in here
89:00 - so that's actually a good thing and we
89:02 - will be actually doing that
89:05 - okay so what we are doing here is we
89:08 - created this part
89:10 - nice uh this is going to be fired off
89:14 - when the application is loaded and when
89:17 - it's up and
89:18 - running now the other thing we need to
89:21 - change
89:22 - is going down here is get rid of this
89:25 - part and we will just say message
89:29 - and we will have all this stuff ready
89:32 - so we will be retrieving uh all these
89:37 - boom hold on okay all this stuff
89:40 - and this is going to be one message so
89:42 - it will include a username
89:44 - a message a timestamp and all the
89:46 - mongodb stuff
89:48 - that we could see here so there's going
89:50 - to be this id
89:51 - and there's going to be this
89:54 - wii version i think
89:58 - we are not going to worry about those we
90:00 - just will use this id because that's
90:02 - what we will be passing
90:04 - inside of here as a key
90:07 - uh and the key is actually going to let
90:10 - react
90:11 - know uh what's going where and
90:14 - it's just helping react a lot so here
90:17 - let's add message oh
90:21 - message.key no this
90:24 - underscore id uh for the message we will
90:28 - be
90:28 - leaving it on the message and for
90:31 - username we will be leaving it on
90:33 - user name uh
90:37 - yeah there we go and
90:40 - i think we should be
90:43 - able to test it out something is not
90:46 - working
90:46 - okay so axios is not defined all good
90:50 - um db is not defined in firebase is not
90:53 - defined of course they are not defined
90:54 - i've just deleted them so i
90:56 - think i've forgotten yeah uh
91:00 - let's actually comment this part out or
91:03 - you can actually delete it
91:04 - uh this is again firebase stuff we're
91:06 - not using this for now
91:09 - what i forgot to import and i've seen a
91:12 - couple of reminders in the comment
91:14 - section and
91:15 - thank you guys for that i forgot to
91:17 - import the axios
91:18 - instance that we've just created so
91:21 - let's import
91:22 - axios and notice that i'm not importing
91:27 - the module
91:28 - or the package that we've just installed
91:31 - instead i'm importing
91:33 - this instance which i'm
91:37 - exporting here right so let's go here
91:40 - and say
91:41 - the axios.js file is the one that i'm
91:45 - importing and now we should be
91:48 - almost good to go yeah let's see i'm
91:51 - gonna
91:52 - type in my name if i can
91:55 - okay notice that
91:59 - we have this message
92:03 - which essentially doesn't have a
92:04 - username and somewhere
92:06 - in i think in message.js
92:10 - if the message that username doesn't
92:13 - exist
92:15 - uh we are just saying unknown user
92:19 - so that's here we have no message and
92:23 - this is working set by kazi we
92:26 - just added that a couple of minutes back
92:29 - so guys
92:31 - who's excited who's bumped who has it
92:33 - ready
92:36 - um who who who has an
92:39 - a messenger clone that is almost working
92:42 - and have all these stuff ready let me
92:45 - know guys in the comments section
92:47 - um i want to be proud of everybody and
92:49 - i'm
92:50 - i really hope it is working for everyone
92:53 - all right uh so retrieving the message
92:57 - and adding and rendering it out on the
92:59 - screen
93:00 - is actually working uh
93:03 - shuri says yes great murad says i'm
93:07 - ready
93:08 - awesome uh
93:12 - we got st stealth destroy
93:15 - i'm ready okay
93:19 - nice um we are actually not going to use
93:25 - the message.js file okay
93:28 - um awesome
93:32 - so what we will be doing now uh
93:36 - i'm ready let's go so
93:40 - what we will be doing now is essentially
93:43 - add
93:43 - the uh save message
93:46 - um functionality so notice that i've
93:50 - only deleted uh the
93:54 - on about the line 30. uh all the db
93:58 - add db collection messages i think it
94:01 - started something like that
94:04 - um and that's the part that i've
94:07 - deleted uh milton asks will we have
94:10 - subtitles in spanish
94:12 - uh lociento me amigo
94:15 - no hablamos en espanol
94:19 - no we sadly will not have subtitles in
94:22 - spanish
94:24 - but this is where another um api call is
94:28 - going to go ahead in
94:29 - and it's going to be axios.post
94:34 - and we will be using um
94:38 - save message endpoint which we have
94:40 - already created
94:41 - inside of server.js and we will be
94:44 - adding
94:44 - these two stuff and the timestamp inside
94:47 - of here
94:49 - now um okay
94:53 - let's see if it actually does work so if
94:56 - it does break
94:58 - we should be able to send a message
95:01 - let's say
95:02 - hey guys how's it
95:06 - going
95:10 - okay nothing happens oh my god what is
95:13 - happening
95:14 - okay so what's happening is excellent
95:17 - espanola thank you
95:19 - um oh my god i forgot huh
95:22 - wishes guys yes that's it um
95:25 - so what happened here is that
95:29 - since it's not real time just yet um
95:33 - it's not rendering it out but if we
95:35 - refresh it and i say dave
95:38 - oh my god i mistyped my name let's david
95:42 - okay so because the application knows
95:46 - that i have sent it and i have
95:50 - logged in that this is a message on
95:54 - my side right
95:59 - so that it it went clear blue
96:02 - and we are actually retrieving the
96:04 - messages from the database and we are
96:06 - saving them to the database it's
96:08 - almost like the correct functionality we
96:11 - i think we
96:12 - we still miss two letters though so we
96:15 - are literally uploading and downloading
96:17 - data from the database
96:18 - that's that's actually pretty good guys
96:20 - if you're excited about that
96:23 - and and if if you like it
96:26 - uh let me know in the comment section
96:29 - down below
96:30 - and please actually clean the um
96:35 - clean plea please keep cleaning the uh
96:38 - comment section down there
96:40 - so guys if you're pumped about it and
96:44 - if you have it uh by this far
96:47 - let me know and let me know if you were
96:50 - actually willing to put this on your
96:52 - portfolio
96:55 - and so that you can get a job
96:58 - nice so with that
97:01 - all we need to do is make it real time
97:03 - right
97:04 - that's the only thing left and if we are
97:07 - done with that
97:08 - we should be good to go i think let me
97:11 - let me quickly check it though
97:16 - okay one thing that we are not going to
97:19 - be
97:20 - we are not going to worry about is
97:24 - so we are going to reverse the whole
97:26 - thing because it would
97:27 - actually take quite a lot of time if we
97:31 - left it like um like having them
97:34 - like having the most recent message down
97:37 - there
97:38 - so instead we will have it uh in a
97:40 - reverse order
97:42 - and for that let's actually go back to
97:44 - server.js
97:46 - and we will be sorting the data
97:49 - when we are retrieving it uh and just
97:52 - pass
97:52 - in this sort method so this goes into
97:56 - server.js
97:58 - it's just data sort b a and return
98:01 - and this is why we have the timestamp
98:03 - saved instead
98:06 - uh so that's how we will be uh managing
98:09 - this
98:10 - this time but guys if you're
98:13 - bummed about a newer oh my god oh
98:16 - because it doesn't have a timestamp that
98:18 - goes up there
98:19 - we're just gonna go ahead and delete
98:20 - that um
98:22 - so guys if you were pumped to have like
98:25 - separate chat rooms
98:26 - and like making it a bit more nicer and
98:30 - with um and like have the messages on
98:33 - the other way around
98:35 - uh let me know and we can do another
98:38 - session on that
98:39 - let's go to mango db or i actually need
98:42 - to go there and select
98:44 - collections because i have that unknown
98:46 - user over there i'm just
98:48 - going to manually delete that so it
98:50 - doesn't block everything
98:53 - and that actually happens to be on the
98:55 - top because it just doesn't have
98:57 - a timestamp i'm
99:00 - gonna go ahead in here hit this delete
99:03 - and we should be good to go yes
99:07 - now okay
99:10 - boom there we go
99:14 - uh okay awesome stuff
99:17 - okay so the only thing left is making
99:20 - it real time we will be using
99:24 - pusher for that uh guys
99:27 - okay let's stop here for a minute who
99:30 - knows what
99:31 - pusher is let me know drop it in the
99:33 - comments if you know what pusher
99:35 - is let me know if you like pusher
99:38 - if you have used pusher if if this is
99:41 - the first time because
99:42 - that way i will know um
99:46 - how how do how to explain it and if
99:50 - i need to go very deep down into the um
99:54 - deep down into the details also we are
99:57 - at 391 likes
99:59 - guys we just need nine likes
100:02 - to cross 400 let's go ahead
100:06 - and do it let's actually go ahead and
100:08 - like if you found this
100:10 - uh video valuable smash that like button
100:15 - okay yes we're crawling up to 393
100:20 - awesome awesome let's go everybody let's
100:23 - smash that like button
100:26 - nice okay uh pusher can make mongodb
100:29 - real time
100:30 - exactly that's what we will be doing now
100:34 - okay we are three and we are at 396.
100:36 - guys
100:38 - smash that like button it's 397. let's
100:41 - make it
100:41 - let's get it up to 400.
100:44 - let's get it okay i'm not going to move
100:47 - any forward uh
100:48 - any any further before we reach 400
100:51 - likes
100:53 - literally everybody go ahead smash it
100:55 - okay 3.99
100:56 - awesome um
101:00 - yeah let's hit that
101:05 - let's hit it okay i will be here
101:09 - and stay here okay no i'm kidding um
101:14 - let's actually uh go ahead and set
101:18 - up pusher
101:21 - okay i click the wrong button uh let's
101:24 - create
101:25 - let's go to pusher.com
101:29 - and by the way how are the likes 401
101:33 - nice good job guy guys okay
101:36 - uh let's sign in if you haven't done
101:39 - that already
101:40 - um if you don't have an account you can
101:42 - go ahead and like literally create a new
101:44 - one
101:44 - it's completely free and what i will be
101:47 - doing is just sign in with my github
101:49 - that's the easiest method uh it's gonna
101:52 - circle a bit but
101:53 - there we go i'm in uh notice that i
101:56 - already have a messenger clone facebook
101:57 - loan instagram whatsapp all this stuff
101:59 - for actually real time
102:01 - and i also tested it out once but
102:04 - if you have a couple of projects already
102:06 - uh you can go into manage
102:09 - and hit create app and i will say
102:12 - messenger live burn
102:16 - okay awesome and
102:19 - for front end i will be choosing
102:23 - where is react
102:26 - okay oh there's the react nice and
102:29 - for back-end i will be choosing node.js
102:32 - nice
102:32 - and let's go and create the
102:36 - app now
102:39 - so pusher is a pretty nice service
102:41 - because it gives you
102:42 - all these uh code that you can go ahead
102:45 - and
102:45 - work with but
102:48 - before we go any further uh let's
102:51 - actually
102:52 - open up the terminal and install these
102:54 - dependencies
102:56 - so for the front end because you know
102:58 - the project
102:59 - the starter project is actually the
103:01 - front end uh
103:03 - we will be installing pusher dash
103:06 - js now pusher.js is the front end thing
103:11 - and for backhand we are just going to
103:12 - install pusher so these are two
103:14 - different stuff
103:15 - for front end pusher js hit return
103:19 - and i'm going to go in here stop my date
103:23 - back end for a little bit and type in
103:25 - mpmi
103:26 - pusher okay
103:30 - or we may have done that at the
103:33 - beginning
103:34 - okay let's do it again that's not gonna
103:36 - hurt anybody
103:37 - okay updated one package so we have done
103:39 - it okay
103:41 - uh awesome and let's actually
103:45 - start this app again by typing in no mon
103:48 - awesome let's go back to the front end
103:52 - we have the pusher done here as well
103:55 - now what i like to do it says actually
103:58 - the front end should be step one and the
103:59 - back end should be step two but
104:01 - i just like the other way around oh it
104:04 - also
104:04 - gives you um which one to
104:08 - install so npm pusher awesome and you
104:11 - want to go ahead and copy this line of
104:13 - code
104:14 - go back to server.js up top we have
104:17 - already imported it nice
104:19 - go to app.config
104:25 - and what you definitely need to know
104:28 - is that encrypted is the encrypted
104:32 - method
104:33 - is deprecated so it's going to cry about
104:37 - that
104:37 - so you want to go ahead and type in use
104:40 - tls
104:41 - instead of that it's just saving
104:44 - yourself from
104:45 - a couple of error messages inside of the
104:48 - terminal nice okay um
104:53 - awesome and with that done
104:56 - let's go back to the db config
105:00 - and let's create a change stream so
105:03 - a change stream is essentially a
105:08 - service that will watch our collections
105:10 - and database
105:12 - if there is any changes in there like
105:14 - it's literally that and
105:16 - we will say mongoose
105:21 - mongoose.connection
105:24 - doc collection because we are actually
105:28 - watching one collection this is where
105:30 - the plural thing
105:32 - uh is really crucial and you have to
105:35 - know it
105:36 - and let's type in here which is our
105:42 - collection and its messages because
105:44 - that's what we said
105:45 - in message model so that's the thing
105:48 - that you want to grab
105:50 - and let's copy that
105:54 - and let's go back in here um
105:58 - and let's add it inside of it nice
106:00 - awesome and
106:02 - we are going to watch this collection
106:05 - so what happens is
106:08 - whenever something changes in the
106:11 - messages collection
106:13 - this thing will be this thing will know
106:15 - about it
106:16 - and what we want to do
106:20 - is say change stream
106:23 - uh on
106:26 - oh okay dot on
106:30 - and change of course on change
106:34 - we want to fire off something right so
106:37 - whenever something happens inside of
106:39 - that collection we want to fire up this
106:42 - function which has a change
106:47 - change parameter and
106:50 - we just want to go ahead and trigger the
106:53 - pusher right
106:54 - then we're gonna go ahead and trigger uh
106:56 - we're gonna go and say
106:58 - oops say pusher.trigger
107:01 - messages and because we have a new
107:04 - message that's what we wanted so
107:07 - we create a pusher channel it's going to
107:09 - be messages
107:10 - and a new event with uh on my event it's
107:13 - going to be
107:14 - my new message and inside of there
107:17 - we want to add a change
107:21 - which is of course going to be the
107:22 - change because the change is always a
107:23 - change
107:24 - okay too much change
107:27 - nice uh let's open up the terminal and
107:29 - see if the back end is running
107:31 - yes db is connected so we are good
107:36 - let's actually go inside of debug
107:39 - console
107:41 - and this is literally gonna give you an
107:43 - idea of how it works
107:45 - so i'm gonna go to postman so save
107:48 - message
107:49 - and let's say sunny is saying some stuff
107:54 - um he's always about react so
107:58 - react react is
108:03 - fire okay that's probably something that
108:06 - sonny would said
108:08 - uh but would say uh let's send it okay
108:11 - so we have that message over there let's
108:13 - go back to pusher
108:15 - now what we see is that we have an api
108:18 - message
108:19 - which has all this stuff inside of here
108:21 - okay so that
108:22 - that that is literally the change guys
108:26 - if you have set it up and if you see it
108:30 - in the debug console of pusher and if
108:33 - it's working
108:34 - let me know in the comments drop a
108:36 - comment drop a fire emoji or jump drop
108:38 - something that i
108:39 - uh so that i know um we are teaching in
108:43 - a way
108:43 - that you can actually understand and get
108:46 - the value out of it
108:48 - okay um so guys let me know
108:52 - if it's uh if it's a good explanation
108:55 - and if you understand it good
108:57 - uh drop it inside of the comment section
109:02 - okay um boom
109:07 - yes how did you how did you insert
109:10 - pusher
109:12 - um so i
109:15 - actually added the instance
109:18 - uh i actually added the instance in here
109:22 - um i mean in here yes
109:25 - that's where i added the instance then
109:27 - created the change stream
109:29 - and whenever something changes i just
109:32 - fire off the pusher trigger
109:34 - function okay with that done
109:38 - we are done with the back end
109:41 - completely we are not going to touch
109:43 - that uh today anymore
109:46 - one thing though we need to deploy it we
109:49 - will be doing it a bit later
109:51 - but let's go back to our front end make
109:53 - that
109:54 - uh real time as well
109:57 - and what you guys want to do is go back
109:59 - to the getting started
110:02 - and let's actually
110:06 - subscribe so right now
110:09 - so what we create what we are doing with
110:11 - pusher is basically creating a tunnel
110:13 - between the front end and the back end
110:16 - now we have already created the back end
110:18 - part of the tunnel
110:19 - but we need to uh create the front end
110:22 - part of the tunnel so we literally
110:24 - need to subscribe as you can see it over
110:27 - here
110:28 - we literally need to subscribe to uh
110:30 - pusher
110:32 - okay now um hopefully you already have
110:36 - pusher.js
110:38 - pusher js installed on the front end
110:42 - um the one that we just did
110:46 - by the way and what you need to do is go
110:49 - up here
110:50 - and say
110:53 - import pusher right
110:58 - so you literally need only need to save
111:00 - this line of code i will make it
111:02 - like i will add the line break in there
111:05 - and this is literally the two lines of
111:06 - code
111:07 - that we added today
111:10 - uh so you're going to go ahead and
111:12 - import pusher from pusher
111:14 - js and
111:18 - what you need to do is go in here
111:21 - and there is these two uh thing we
111:24 - we are just going to first go with this
111:27 - one
111:28 - and go back in here
111:31 - uh and what we will do is
111:34 - say it's just paste it inside of there
111:37 - don't worry about
111:38 - it this is literally just grading the
111:40 - instance right
111:42 - so const uh
111:45 - actually we may want to put it outside
111:48 - of the app so it doesn't
111:50 - always re-render
111:53 - and the other thing we want to do
111:56 - is create a use effect
112:00 - which we will be adding here
112:04 - so we will create a use effect which
112:07 - create uh in which we fire off and
112:10 - create a channel
112:12 - and subscribe to pusher messages uh
112:15 - ev um event
112:19 - no messages channel right
112:22 - so nowadays we are creating a
112:25 - channel in here and that is what we
112:28 - subscribe to
112:30 - and we bind all the stuff whenever
112:33 - the event we created which is new
112:36 - message
112:38 - so whenever the new message even fires
112:41 - off on pusher
112:42 - we want to go ahead and sync the uh
112:45 - front end i hope you guys uh
112:49 - understood it and it's kind of
112:52 - hard to understand for the first time
112:53 - but if you watch this back a couple of
112:56 - times
112:57 - i am sure that you will understand
113:00 - and as a dependency we want to add the
113:03 - username
113:04 - so it doesn't re render all the time
113:08 - nice okay let's go to the uh
113:12 - react app refresh a couple of times and
113:15 - type in
113:15 - david nice and let's say
113:19 - yo just as a test
113:22 - and here we go guys we literally made
113:26 - our app real time
113:30 - it actually deserves a second air horn
113:34 - nice with that done
113:38 - uh i think we are ready to deploy this
113:41 - application
113:42 - live and we are below the two hour check
113:45 - mark
113:45 - awesome guys if you
113:49 - actually found this uh video valuable
113:51 - and if you found this tutorial valuable
113:53 - or if you've got
113:55 - value out of this channel smash that
113:58 - like button
113:59 - and just destroy it so we can get this
114:01 - video out there
114:02 - and we can okay let's create a let's do
114:06 - a third air horn as well
114:10 - so smash that like button so the
114:12 - algorithm knows that this is some good
114:14 - stuff
114:15 - and we can and and we can help
114:19 - 5 000 people get jobs as developers
114:23 - in 2020 okay that's our goal
114:26 - at clever programmer we want to help you
114:29 - guys get jobs as developers
114:31 - so help us help you does it make sense i
114:34 - hope so
114:36 - okay so we are at 422 likes let's
114:40 - get it up to actually 450.
114:44 - we still have 140 people
114:47 - watching us live actually no actually
114:50 - i'm 150
114:52 - so 140 on youtube 150 people with us
114:56 - awesome stuff guys smash the like button
114:59 - if you liked it and let's carry on
115:02 - and go ahead and deploy this app
115:05 - uh i'm just pushing buttons all around
115:09 - okay here we go so now we did
115:13 - we really need to uh separate
115:16 - the front and the backhand let's
115:18 - actually close up all these files
115:20 - um why is beckham so boring dude
115:24 - backhand is actually good thing
115:27 - it's not boring i mean try to understand
115:30 - it try the reverse engineer what we have
115:32 - done
115:32 - and it's actually it's a good thing uh
115:35 - but if you're a motor like a front-end
115:37 - person that's all good
115:38 - um you can still find people who do the
115:41 - back-end for you
115:42 - and then you can work on the front end
115:44 - as you wish
115:46 - okay uh
115:49 - everybody goes great stuff great job
115:52 - thanks dude um
115:54 - smash the like button if you liked it
115:55 - awesome and
115:57 - really glad you're uh here with me and
116:00 - here with us
116:01 - really appreciate it dude okay uh i'm
116:04 - gonna open up my terminal
116:06 - and one thing we we i'm gonna be doing
116:09 - is
116:09 - in the messenger starter project uh
116:13 - we need to set up um the firebase
116:16 - hosting
116:17 - let's go to the firebase
116:22 - and inside here
116:25 - hosting awesome
116:29 - and because we have added
116:33 - this app as a hosting stuff okay i'm
116:36 - just gonna need to check because
116:38 - at the beginning i have
116:42 - [Music]
116:45 - i've messed some stuff up and i may
116:48 - be adding it to the wrong application
116:52 - okay let me go ahead and delete all
116:54 - these two apps so remove just yeah
116:56 - guys you don't have to do it i just made
116:59 - a couple of mistakes at the beginning
117:01 - um so i'm just going to fix that
117:05 - before i mess something up and
117:09 - and yeah so in the project overview mirn
117:11 - messenger awesome
117:13 - uh i'm gonna go ahead at the app guys we
117:16 - have done this
117:17 - don't worry about it um i just messed up
117:20 - some stuff so i'm gonna need to
117:22 - re-initialize the firebase so mern
117:26 - singer um
117:30 - learn nice okay also set up firebase
117:33 - hosting boom
117:34 - register um
117:38 - when are you going to work with firebase
117:40 - functions
117:42 - actually we can do that like pretty soon
117:44 - okay
117:45 - next next console okay
117:49 - we should be good uh okay
117:53 - and now what we will be doing is say
117:55 - firebase
117:56 - in it but guys this is
117:59 - in the front end we are going to uh host
118:02 - the front end
118:03 - on firebase and we are going to host the
118:06 - backend
118:06 - on heroku um i forgot some stuff
118:10 - so let's actually deploy the back end
118:13 - first
118:15 - um and let's go to heroku.com to do that
118:20 - sorry guys um i forgot this we need to
118:22 - deploy the backend first
118:25 - so that we can change uh change the link
118:29 - inside of the front end axios
118:32 - instance okay so uh
118:36 - mirn messenger live
118:40 - that's what i'm gonna call it on heroku
118:42 - this is actually
118:43 - again a free tool that you can go ahead
118:46 - and
118:46 - use as your back-end hosting service
118:50 - um yeah and what we need to do here
118:54 - is because we have initialized the get
118:57 - get version control at the beginning and
118:59 - we are already in the project folder
119:02 - we can continue by copy pasting all the
119:04 - stuff
119:06 - into our
119:08 - [Music]
119:11 - in into our terminal and it will
119:13 - essentially go ahead
119:15 - and
119:20 - i think it will go ahead and do the work
119:22 - for us okay
119:23 - let's go back at this line of uh
119:26 - terminal
119:26 - command here this will just uh set like
119:30 - connect the heroku git to the
119:33 - um actual build that we just done
119:36 - uh and let's actually do a commit
119:40 - so we will say get a dot
119:43 - as a dot the microphone
119:47 - and next up we want to
119:51 - actually commit it so let's say the git
119:54 - status
119:56 - oh my god okay um
120:01 - let's add a get ignore file because
120:04 - otherwise you will have so much stuff
120:06 - and you don't want to do that
120:08 - so get ignore and you want to say
120:12 - node modules in here
120:18 - okay nice so good
120:22 - let's get a dot again
120:28 - oh damn um
120:32 - okay hi hold on
120:38 - um
120:40 - yeah exactly the getting getting known
120:42 - node modules that's
120:43 - definitely uh something you need to do
120:49 - because otherwise it will it will be
120:53 - like this so i
120:54 - actually like to uh show this uh meme i
120:57 - will be showing it uh to you guys as
120:59 - well
121:00 - so there is a meme uh which
121:03 - is github node modules
121:07 - um so if you forget to add
121:11 - the uh
121:14 - getting your file this is what is going
121:16 - to happen
121:18 - literally the whole node module stuff
121:20 - which could grow to
121:22 - 12 gb as well it will be pushed up to
121:25 - github
121:26 - and that's something that you don't want
121:27 - to do so
121:29 - watch it so keep it in mind and
121:32 - let's reset our get uh so good state
121:37 - this let's see okay awesome now i'm
121:40 - gonna add
121:41 - the get a dot exactly
121:45 - yeah um actually thanks guys for all the
121:48 - um git commands thank you so much i
121:51 - appreciate it
121:52 - uh let's check it again okay
121:55 - this is something that you want to see
121:57 - if you have if you don't have all those
121:59 - stuff
122:00 - in here and now with that
122:03 - let's do the commit so get commit dash
122:06 - am and up done
122:10 - that's not the best uh commit message
122:13 - you could do
122:13 - but it will just do for do it for us and
122:17 - what you want to do is say get
122:19 - push heroku master
122:22 - and this guys is the last way uh
122:26 - last thing to do before deploying
122:29 - uh the applications essentially this is
122:32 - going to go ahead and push it up to
122:34 - um heroku and we
122:37 - will have our app live
122:40 - our backend live
122:44 - okay let's wait until it finishes
122:48 - nice uh it does all the stuff that we
122:51 - need
122:51 - now it's compressing so we are very
122:54 - close to the end
122:55 - now we're launching it and we just got
122:58 - the link
122:58 - back which we can go ahead and try it
123:01 - out
123:02 - so if it works if we are now getting
123:04 - back hello world
123:05 - which we are there we go guys we
123:09 - literally have a working backhand
123:11 - nice uh what we want to do is
123:15 - go to axios.js on the front end
123:19 - comment this line out say base url again
123:23 - and place it in place this stuff in here
123:28 - that way we will be using the diploid
123:31 - back end okay let's save it
123:34 - exactly axios js base url that is
123:37 - correct
123:38 - now uh let's go and close
123:42 - this and go to the other terminal
123:45 - where we will initialize the firebase
123:49 - hosting
123:51 - so firebase init
123:54 - let's wait there we go um if you haven't
123:58 - logged into firebase cli you that you
124:00 - need to start with firebase login um
124:03 - which will essentially give you a link
124:05 - to go to in your browser
124:07 - uh you you log in with your google
124:08 - account and there we go
124:11 - so one thing you you need to do is go
124:14 - down here to hosting
124:15 - hit space and then hit return
124:18 - now you want to use an existing project
124:21 - and that will
124:22 - be uh let me find the one
124:26 - yeah mern messenger that's the one that
124:29 - we just
124:30 - created hopefully let me check it double
124:33 - check always
124:36 - yeah my son that's the one nice
124:42 - and let's save it and now guys
124:45 - this is something you don't want to miss
124:47 - out on
124:48 - and not public
124:52 - that that's not good if it's public you
124:54 - want to
124:55 - type in here build because uh
124:59 - the next command is going to create a
125:01 - build folder right there
125:04 - and that's what you want to use to
125:07 - deploy your app
125:09 - okay build and you want to type a y
125:12 - in here so it will be a single page app
125:16 - and here we go firebase initialize
125:20 - initialization complete
125:21 - awesome and now let's go and mpm run
125:25 - build this is going to create the build
125:28 - folder for
125:29 - us uh already there boom
125:33 - and this is what this does essentially
125:36 - is going to disable and delete all the
125:38 - heavy stuff
125:39 - that that is good for developers but
125:42 - it's not necessary for production
125:45 - it's going to disa uh delete all the um
125:49 - what you call it hot reload and all this
125:51 - all the stuff so we just don't need
125:53 - those
125:54 - and with that done let's say firebase
125:58 - deploy and we will have our app
126:02 - live exactly alexandra says firebase
126:05 - deploy
126:06 - with the plus sign that fire that plus
126:10 - sign is just awesome
126:13 - okay where is kazi and sunny because
126:16 - he's in l.a
126:16 - sunny is in london
126:22 - today i'm the only one and if we go into
126:26 - this link
126:29 - we should be seeing it working and here
126:32 - we go
126:33 - i'm just going to say david
126:36 - boom guys this
126:39 - was an awesome build
126:45 - rocket boom
126:48 - and it's real time here we go
126:52 - uh thank you so much guys
126:55 - for sticking with me till the very end
126:57 - oh my god we still have 160 people
127:00 - with us awesome guys if you
127:03 - found this uh build valuable
127:07 - smash that like button um and just
127:11 - so that the algorithm knows that this is
127:13 - something that they
127:14 - should be spreading out to everybody
127:18 - and if you or if you want to go
127:22 - dive into this deeper there is a link
127:24 - down there in the description
127:26 - uh let me actually show it to you um
127:31 - that's the now now we are going to be
127:34 - using the first link
127:35 - that's the thing that you wanna um
127:40 - use and that's actually a free
127:44 - training on how to build a netflix clone
127:47 - and
127:47 - it's going to be a webinar which has a
127:51 - some kind of gift at the end so
127:54 - guys let's go to that link if you liked
127:57 - it and
127:58 - if you want to learn more and if you
128:00 - want to learn
128:01 - more just go there be there
128:05 - um get as much value out of it as
128:07 - possible
128:08 - smash the like button hit subscribe hit
128:11 - the bell so that you know
128:12 - when we are going live and
128:16 - with that said guys peace and
128:19 - thank you for staying with me alright
128:23 - peace out