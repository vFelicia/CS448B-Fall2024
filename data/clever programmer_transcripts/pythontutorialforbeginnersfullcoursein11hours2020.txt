00:00 - what is up welcome to python 2020
00:03 - tutorial this is going to be the
00:04 - tutorial of the Year this is a straight
00:06 - up Banger so my team and I we were
00:07 - thinking about why we should do a
00:09 - tutorial on something like this we see
00:11 - everybody making these boring tutorials
00:13 - we want to make something epic for you
00:14 - that hits home that teaches you all the
00:16 - skills and the freelancing skills that
00:18 - you need to know and something exciting
00:19 - so if you don't want to be bored you
00:20 - want to learn something epic start
00:22 - watching this just like we recently made
00:24 - one for JavaScript that is killing it
00:27 - and we dropped one for jeno boom you
00:31 - guys seem to be eating it up so we
00:32 - thought why not give you something more
00:34 - something epic here's the python 2020
00:37 - help us help me make this the best
00:39 - Python tutorial on 2020 enjoy in this
00:42 - tutorial we're going to be covering the
00:43 - complete Basics and fundamentals of
00:45 - python if you're a beginner you're in
00:47 - the right place you're totally fine
00:49 - we're going to be covering everything
00:51 - from basics of python to building
00:53 - projects like tic-tac-toe twillo texting
00:56 - app we're also going to build the
00:58 - Craigslist app clone loone that one is
01:00 - going to be pretty amazing and you're
01:02 - also going to be building a to-do list
01:04 - app with d Jango so we're also going to
01:07 - be learning web development in this
01:09 - tutorial and at the end of this video if
01:11 - you stick around I'm going to be giving
01:13 - you the python freelancer guide of 2020
01:17 - it's pretty epic real quick before we
01:19 - continue smash that like button help us
01:22 - beat the YouTube algorithm by literally
01:24 - going and smashing that button we're
01:26 - trying to get to 10,000 likes if you
01:27 - could help us do that that' be fantastic
01:29 - what what's up this is Ki from clever
01:31 - program.com right before we jump into
01:34 - the meat and potatoes and we start the
01:35 - training I do want to let you know if
01:37 - you want to become a freelance developer
01:40 - I have a three-part master class for you
01:42 - it's absolutely free it's one of the
01:44 - best it's in the description below it's
01:47 - free go enjoy it you have nothing to
01:49 - lose sign up once you put in your email
01:51 - we give you all three videos go enjoy it
01:54 - with that said let's jump right into it
01:57 - what up you guys this is Aaron and this
01:59 - is Frankie get rid of that and thank you
02:02 - for watching the python 2020 course um
02:04 - what we want to say is that we have
02:05 - another python course hosted on
02:06 - teachable which is a cleaner and better
02:08 - platform for learning things I think
02:09 - YouTube's kind of just like you know the
02:11 - YouTube's it's a free private course and
02:13 - we released it just so you could further
02:16 - solidify your python fundamentals so all
02:18 - you have to do to access to the private
02:19 - course is just go down to the
02:21 - description click on the link pop in
02:22 - your name and your email address and
02:23 - you'll be good to go so definitely check
02:25 - it out yeah guys we have more than
02:27 - 62,000 students registered in that
02:29 - course already so it's helped a lot of
02:30 - people um everything's going to be
02:32 - condensed into one particular website so
02:34 - it's going to help you a lot knowing
02:35 - what classes you already took from this
02:37 - course and whatnot and you can just
02:39 - access it whenever you want just click
02:41 - the link below and register with your
02:43 - email and we'll see you guys there
02:45 - peace
02:48 - [Music]
02:52 - peace hey you what is up this is ky from
02:56 - clever program.com in this Python
02:59 - tutorial for absolute beginners we are
03:02 - going to cover everything from A to Z
03:04 - step by step and I'll also even show you
03:07 - some tips and tricks to become a
03:10 - freelancer and I also have a special
03:12 - gift for you at the end of this
03:13 - [Music]
03:18 - video we're going to start with very
03:20 - simple Basics which is what the hell are
03:24 - variables in Python so let's get started
03:27 - now in terms of installing python
03:29 - there's something easier for you that I
03:31 - have and recommend if you want to
03:32 - install python locally on your computer
03:34 - and you're crazy about that this is a
03:35 - video to watch but you don't need to
03:37 - install python you can actually get
03:38 - started without it so go to reel.it
03:41 - repl.it I've also put this in the links
03:44 - below where you can click I'm going to
03:46 - give you access to all of my code as I
03:49 - code it and you can then go and make
03:51 - changes to it whatever so go to rep it
03:53 - you're going to T go here type in
03:56 - turtle and then when you click on that
03:58 - we're going to start coding okay so now
04:00 - basically what's going on is you have
04:02 - python open and we're going to talk
04:04 - about what variables are okay so
04:05 - variables are very simple I can say a is
04:08 - equal to 5 and then if I do print a
04:11 - print just means show and if I run this
04:14 - thing it's going to show me in the
04:16 - console it just says five okay that's
04:19 - all that it is now if I do B is equal to
04:22 - some string like this anything that's
04:24 - within quotes it's just called a string
04:26 - okay it's just a fancy way of saying
04:28 - quote all right now if I do print B and
04:32 - I hit run what do you get you get hello
04:35 - so on the right hand side you can see
04:37 - what it's showing so I'm like this is my
04:39 - variable a this is my variable B and as
04:42 - you can imagine the point of a variable
04:44 - is like see also don't have to remember
04:46 - stuff right so for example if you had a
04:48 - variable like credit card and it was
04:50 - some crazy number that you had to
04:53 - remember uh you don't have to remember
04:55 - anymore you can just say print credit
04:56 - card every time hit run and it would
04:59 - print out that number so cool now let's
05:02 - uh do something else because I how I
05:05 - want to teach you python is in the
05:07 - fastest way possible and the most
05:09 - practical way possible and I also want
05:11 - to show it to you in a way where you can
05:14 - actually learn visually cuz I think
05:16 - that's the best way to learn so to get
05:18 - the visual step started that's the
05:20 - that's the reason why we're using
05:21 - something called uh Turtle okay and I'm
05:24 - going to name this
05:25 - uh what are variable
05:30 - okay plus Turtle okay I'm just going to
05:32 - name it that okay cool and now what
05:34 - we're going to do is we're going to do
05:36 - something cooler with variables so let's
05:38 - say we say KY turtle is equal to turtle.
05:43 - Turtle like that make sure you
05:45 - capitalize it in the right places you
05:47 - put the dots in the right places you put
05:49 - the parentheses in the right places cuz
05:50 - if you get that stuff wrong code doesn't
05:52 - work code breaks down it's uh you're
05:55 - talking to a genie with incredible power
05:58 - right so if you're talking to a genie
05:59 - with an incredible amount of power you
06:01 - need to speak its language so computer
06:03 - is like a genie with unlimited Powers
06:04 - but you got to speak to it and you got
06:06 - to speak to it very precisely which is
06:08 - very important so with that said now the
06:10 - ky ky turtle is there let's go ky.
06:13 - turtle
06:15 - um kiore Turtle my bad kiore
06:19 - turtle. forward and we're going to say
06:22 - go forward by 100 now I'm going to click
06:24 - on result instead of console and I'm
06:27 - going to run this program now that I I
06:29 - am going to do something with the turtle
06:32 - turtle is going to be this graphical way
06:33 - of for us to learn so at the top we have
06:35 - to write something called import Turtle
06:37 - okay this is very important now that we
06:39 - do this this code will work I'll say KY
06:42 - _ turtle and how I'm autoc comp
06:44 - completing it is when it pops up I just
06:45 - hit tab it autocompletes it and I'll do
06:48 - turtle. forward 100 I'll hit enter and
06:51 - you can see the turtle just moved
06:52 - forward right the turtle goes like eh
06:55 - when I do turtle for that forward 100
06:58 - now what if if I did Turtle do right 90°
07:05 - okay so turtle. right and I do 90° watch
07:09 - what's going to happen the turtle is
07:11 - going to move forward and then turn so
07:13 - what did it do it
07:16 - went and then it goes like this all
07:18 - right that's what you're trying to do
07:19 - you're trying to make it turn 90° and
07:22 - now the cool thing is that I can just go
07:25 - like this like this hit enter like this
07:29 - and now the turtle what did it just do
07:32 - what turns around and
07:35 - go now if I want to make a square I give
07:38 - you that as a challenge to do that's a
07:40 - challenge for you to do right now pause
07:43 - the video and see if you can make it a
07:45 - square a full Square all right now
07:47 - unpause the video and let's go so
07:49 - basically all I have to do my friend is
07:51 - I copy this guy hit paste I run it again
07:55 - and now the turtle goes popop popop
07:57 - popop popop it turns around goes pop pop
08:00 - pop pop it turns to the right again and
08:02 - it goes pop pop pop pop 100 okay so what
08:05 - are we going to do we're going to repeat
08:07 - that same step one more time I'm just
08:09 - going to go ahead and paste that line of
08:12 - code twice again and Watch What Happens
08:15 - boom boom boom boom and the square has
08:17 - been completed how freaking cool is that
08:21 - so not only have you learned what
08:22 - variables are you've also got started to
08:24 - Learn Python visually and that's going
08:26 - to be the really important fundamental
08:28 - building block for when we learn IFL
08:31 - statements and when we learn functions
08:33 - and when we learn all this other
08:34 - advanced stuff what's going to be super
08:35 - cool and super dope is that we're going
08:37 - to be learning it all visually so if you
08:39 - want to make 10 squares we'll just write
08:41 - this loop-de-loop and it'll make 10
08:43 - squares in a row right and uh that's
08:45 - going to be pretty awesome I'm excited
08:47 - for you as always I love your face and
08:50 - I'll see you in the next
08:53 - [Music]
08:57 - video Welcome Back to Learn Python
09:00 - programming for complete and absolute
09:03 - beginners so thank you guys for jumping
09:05 - in here now what we're going to do is
09:07 - we're just going to go to the next step
09:09 - all right the next step is I'm going to
09:10 - show you how functions work it's going
09:11 - to be super simple to
09:14 - [Music]
09:18 - understand you know how variables are
09:20 - used to remember certain things like
09:22 - credit card number what's really cool is
09:25 - you can use functions to remember lines
09:26 - of code so for example
09:29 - this over here right what do all of
09:31 - these lines of code combined do when I
09:34 - run this program if you notice the lines
09:36 - I'm highlighting from 13 to 20 well what
09:39 - are they really doing right what they're
09:42 - actually doing is making a square so I'm
09:43 - going to write something called a
09:45 - comment all right comment is something
09:47 - the co computer code doesn't care about
09:49 - like for example let's say I write
09:50 - something like this right my code will
09:52 - break it'll give me if I go to the
09:54 - console it gives me an error it says
09:55 - name comment not defined everything
09:57 - breaks but if if I actually put a little
10:00 - hashtag here it knows it's for humans
10:02 - and it won't break my code my turtle
10:04 - Square still gets made so I'm going to
10:06 - make a comment and my comment is just
10:07 - going to say this is a square okay now
10:10 - if I run this it'll make a square and
10:12 - anybody else who's reading your code
10:14 - will go oh I understand what this piece
10:16 - of code does but what would be really
10:18 - cool is instead of like if you wanted to
10:20 - make another square right what would you
10:21 - have to do you would have to copy all of
10:23 - this and then paste it here again and
10:25 - then run the code but that's not such a
10:27 - cool way to do that so what we're going
10:29 - to do is do a cooler way of doing that
10:30 - so we're going to create something
10:32 - called a function all right so I'm going
10:34 - to go Define and I'm going to call this
10:36 - function a square and uh we're going to
10:38 - hit enter like this now there's four
10:41 - spaces here okay which you need to pay
10:43 - attention to when I hit enter it's
10:45 - indented and the indentation is really
10:47 - important because all of this code is
10:49 - part of this function okay that's the
10:51 - idea and now literally what I can do is
10:54 - uh I can actually copy this entire
10:56 - Square code and paste it in here and I
10:59 - can certainly remove it from there okay
11:03 - make sure you highlight all of this and
11:05 - hit tab to indent it so it's all part of
11:09 - this function okay it's all part of that
11:11 - for functions to make them show up you
11:13 - have to call the function just like you
11:15 - have to call the variable so here we
11:18 - just defined the function but now if I
11:20 - do square like all right so we have
11:23 - square now when I run it if we go to
11:25 - result let's go to oh whoops uh we
11:28 - misspelled it again
11:29 - let's go Square oh Square man that's bad
11:33 - all right so now that we've got Square
11:35 - you can see that the square actually
11:37 - goes and gets made so now what's really
11:39 - cool is every time I just say Square
11:41 - it'll make that square okay so for
11:44 - example I can say square and then I can
11:46 - say turtle. forward and I can say 300 so
11:49 - what it's going to do is going to make
11:50 - the square and then it's going to walk
11:52 - forward by 300 and now what I can say is
11:56 - I can just say square like this and hit
11:58 - enter
11:59 - all right so now it's going to make a
12:01 - square walk over 300 and then make
12:03 - essentially another Square oh it's uh
12:06 - starting that Square from the start
12:08 - which is not what we want because we
12:10 - don't want a new turtle to be made every
12:12 - time we run this code we basically just
12:15 - want the same Turtle but who keeps
12:17 - making squares basically what first
12:19 - thing we're going to do is we don't want
12:21 - the turtle to keep being made over and
12:22 - over again we're going to pop that uh
12:24 - the kazzy turtle all the way at the top
12:27 - okay and then what we're going to do is
12:29 - we're going to say kiore
12:32 - turtle turtle. forward and then we're
12:36 - going to say by 100 okay now when I run
12:38 - this check it out it makes a square and
12:40 - then KY is going to go 100 forward well
12:43 - what we can do is make it let's say 200
12:45 - forward so it should make a square and
12:47 - then it should
12:48 - go Sprint 200 forward and now what we
12:52 - can do is basically make another square
12:56 - like this and hit enter so now it should
12:59 - go make a square go 200 forward and then
13:02 - make another Square all right it kind of
13:03 - looks like glasses if you look at it
13:05 - sideways or whatever that's what's
13:07 - really cool about leveraging functions
13:11 - because it makes it easier to recall
13:12 - your code it makes it really easy to
13:15 - understand your code and read for people
13:17 - because if you had those eight lines of
13:18 - code that were really repetitive it just
13:20 - kept saying turtle. forward 100 turtle
13:23 - that right 90 and it kept doing that
13:25 - well now you defined it in one spot and
13:27 - you can just keep referring to it so
13:29 - functions are super powerful super cool
13:31 - and you can do a lot a lot a lot of
13:34 - things with them okay that are much more
13:36 - complicated than what I'm showing you
13:38 - but Simplicity is very important when
13:39 - you're learning in the start so with
13:41 - that said thank you so much for watching
13:43 - if more videos are going to be coming
13:44 - out they're going to be teaching you all
13:45 - of this lastly I have all your notes in
13:49 - this one called how do functions work so
13:52 - this is the URL for it just in case and
13:55 - if you go to it then you can have access
13:57 - to all my code you can just run it use
13:59 - it however you want and it's also going
14:01 - to be in the descriptions below so you
14:03 - could leverage it okay with that said
14:05 - thank you so much for watching I love
14:07 - your face and I'll see you in the next
14:10 - [Music]
14:14 - video hey what's up guys Aaron here from
14:17 - clever programmer again so today I just
14:20 - want to go over this cool little module
14:21 - I found called calendar in Python it's
14:23 - pretty nifty I actually haven't seen it
14:25 - before but I stumbled across it I just
14:27 - want to share it with you guys today
14:28 - this might be a shorter video I just
14:30 - thought it was really cool what could it
14:32 - achieve so yeah let's jump right into
14:39 - it first let's go to my ripples up in
14:42 - our Ripple it as usual and create a new
14:45 - repple I guess the button is up here now
14:47 - it used to be a little red plus sign in
14:49 - the bottom right but they they uh seem
14:51 - to have changed
14:52 - that go down to
14:54 - python is this Python 2.7 have I been
14:57 - using Python 2.7 all this time where's
15:00 - Python 3 hold up you guys python here we
15:04 - go all right unacceptable
15:09 - unacceptable uh let's just call
15:11 - this calendar module so this should be
15:14 - Python 3 if it specifies Python 2.7 then
15:17 - yeah if it doesn't say then it's Python
15:19 - 2.7 but if it says just python then it's
15:21 - safe to assume that it's Python 3
15:23 - because that is a standard nowadays so
15:24 - make sure you click on python not Python
15:26 - 2.7 like a dumbo like I did okay let's
15:29 - uh continue on create this Ripple in
15:32 - Python 3 and now we can get started so
15:35 - this little module that I found is
15:37 - called calendar lit literally just
15:40 - calendar like e ar ar got
15:45 - it I can never spell that word right but
15:47 - that's how you import it okay import
15:50 - calendar and with this you can do a lot
15:52 - of cool little function calls I actually
15:54 - think this ties into a couple other
15:56 - modules later on that I will explain but
15:59 - for now let's just go through this
16:00 - module and then I'll mention those at
16:02 - the end again and then maybe you can
16:03 - guys you guys can go and do your
16:04 - homework and tie tie some things into it
16:07 - and like play around a little bit and
16:08 - learn that way that's the best way to
16:09 - learn after you watch these highly
16:11 - entertaining videos to a very small
16:13 - subset of
16:14 - people um so let's let's just start with
16:17 - calling some functions so this going to
16:19 - be a bunch of little cool functions so
16:21 - let's start here let's go
16:25 - calendar. week oh calar er. week header
16:31 - okay I'm just going to call this
16:34 - function with a two all right so what
16:38 - this will do is it gives us the headers
16:41 - of a week so a week is just like you
16:43 - have a Monday Tuesday Wednesday all the
16:45 - way through Sunday right uh python
16:47 - starts the week on a Monday so we're
16:48 - just going to assume that a week starts
16:49 - on Monday here okay guys so when I run
16:52 - this what should pop out are the week
16:55 - headers after calendar is
17:00 - um download it so you can all this stuff
17:01 - here is just uh I actually don't know
17:03 - what this is just ignore it whatever but
17:05 - down here is the output okay this is
17:07 - what we what we wanted the week headers
17:08 - here have been printed out nicely for a
17:10 - week we have Monday Tuesday Wednesday
17:11 - Thursday Friday Saturday Sunday and this
17:13 - two here that I put in um signifying the
17:15 - length of these headers so actually if I
17:17 - put a three in here then we hit run then
17:21 - suddenly what is going on here is
17:24 - available uh okay it seems to be working
17:26 - just fine just ignore all this stuff
17:27 - sometimes computers complain a lot
17:31 - like somebody who bickers a lot um
17:36 - but uh yeah so you see down here how now
17:38 - each of the weak headers actually is of
17:40 - length three instead of length two if
17:42 - you put length one does that work
17:44 - apparently so yeah you just have the
17:46 - capital letters here but I'm going to
17:47 - use three because I like it being more
17:50 - descriptive it's just more appealing to
17:52 - me so that's the first the first little
17:55 - function that you can do with python I'm
17:57 - just going to add a new new line there
17:59 - or
18:01 - 90 new line Kabam
18:06 - Kaboom
18:08 - okay uh the next one
18:11 - is calendar. first
18:15 - weekday so this one's kind of useless
18:17 - but I'm just going to throw it in there
18:18 - because huh why
18:20 - not all this is going to do is going to
18:23 - tell us what the first weekday is so
18:24 - Monday is zero Tuesday is 1 Wednesday is
18:27 - two this is three four 5 six so the
18:30 - first weekday is Monday so this is
18:32 - actually just going to print out to zero
18:34 - uh this could actually be useful later
18:35 - on I realize now because there's some
18:37 - other functions where you need the
18:40 - numbers of the day instead of the actual
18:41 - string to do different things so this
18:44 - might actually be useful for that and
18:45 - then you can just add numbers so if you
18:46 - know first week weekday is Monday then
18:48 - you can just add one two three four or
18:49 - five to it to get the other days let's
18:52 - just print this out and see what happens
18:54 - as you can see Zero prints out because
18:56 - Monday is the first the first weekday
18:58 - and and Monday has a index of zero so
19:01 - nice and easy there
19:03 - let's wrong editor over here let's add
19:06 - another new line uh an empty print
19:08 - statement will just have an empty line
19:10 - there so you can have some nice spacing
19:12 - here so it's not all clumped
19:14 - together but yeah let's continue on so
19:16 - now things get really really cool it
19:19 - almost seems like you're a magician here
19:21 - like typing in
19:23 - Magic so the next function that I want
19:26 - to go over is month
19:28 - so all you do is you literally just call
19:31 - calendar. Monon okay calendar. Monon
19:35 - that's
19:35 - it all you have to do is put in a year
19:38 - so let's put in this year 2019 and the
19:41 - month so it is janary February March yes
19:44 - I still caught on my fingers but it's
19:45 - March the third the third month so let's
19:48 - put three here so it's March
19:52 - right yes it's March uh if we print this
19:55 - out this will actually print out the
19:56 - current month so let's see see how this
19:58 - this
20:00 - looks and would you look at that it says
20:02 - March 2019 you have the Monday Tuesday
20:06 - Thursday Friday Saturday and then you
20:07 - have all the days here of the month
20:09 - pretty cool right it just spits this out
20:12 - in a nice nicely formatted string for
20:14 - you automatically okay um I believe
20:17 - there's actually some
20:19 - other um variables let me find it for
20:22 - you real quick uh print
20:25 - calendar or actually I I'll I'll I'll
20:27 - leave that up to you guys to be an
20:29 - exercise you can actually find the
20:31 - python documentation on month and
20:32 - actually go in and try to find out how
20:34 - what variable there's another parameter
20:36 - here you can add here because if you
20:38 - notice all these weekday headers are
20:40 - only two letters long but I wanted them
20:41 - to be three three letters long you can
20:43 - actually go in there and find the
20:44 - correct one it might be like M or
20:45 - something or something or C something
20:48 - like you would put something like that
20:49 - in but go and go practice finding it in
20:51 - the
20:53 - documentation and from there you can
20:55 - figure out how to read documentation
20:56 - which is a very very useful skill
20:58 - because there's no way you're going to
20:59 - memorize everything in any language or
21:01 - any framework you're always going to be
21:02 - looking up documentation and Googling
21:03 - stuff to figure out you're going to be
21:05 - constantly forgetting constantly
21:06 - learning but getting good at knowing how
21:07 - to figure stuff out that's the skill you
21:09 - want to develop so go look in the
21:10 - documentation find out how to fix that
21:12 - and fix it for me
21:14 - okay yeah like don't make me do
21:16 - everything all right because it's
21:18 - probably just not a good idea um so that
21:21 - that's there figure out how to make all
21:23 - of these um three letters long instead
21:25 - of two so that's the month function now
21:28 - another cool thing we can
21:29 - do is actually um get this month in
21:33 - Matrix form so let's see what that would
21:35 - look like
21:36 - calendar the function I believe is
21:40 - um month calendar okay just like that
21:44 - and then you just stick in the same
21:47 - parameters so yeah the only change here
21:49 - is you literally just change the
21:50 - function call to month calendar rather
21:52 - than just month but uh that should be it
21:54 - there let's run this and see what
21:56 - happens and as you can see
21:59 - see down here this Matrix got printed
22:01 - out so this might not mean anything to
22:03 - you um but if you look closely this is
22:06 - actually a matrix a a a two-dimensional
22:09 - array I believe of this exact number
22:12 - array here so these four zeros is these
22:15 - four empty spots here this Monday
22:16 - Tuesday Wednesday Thursday at the
22:18 - beginning that doesn't have anything in
22:19 - it and then this one two 3 continues
22:21 - here and then the second list in the
22:22 - multi-dimensional array is actually this
22:25 - and then the third one is actually this
22:28 - see how that works so it's so you can
22:29 - actually instead of just getting the
22:31 - string like how would you get all the
22:32 - data out of the string you can actually
22:34 - just get it automatically in an array
22:35 - nice and clean like that just by calling
22:37 - this function month calendar instead of
22:39 - month very useful if you're actually
22:40 - going to be doing calculations on dates
22:42 - and stuff which is something you're
22:43 - probably going to have to do if you ever
22:45 - want to schedule something like schedule
22:46 - your computer to run this thing on like
22:48 - schedule your computer to run this
22:50 - python script to automate this thing to
22:52 - launch this program to do this thing to
22:53 - hack this system to to text your friend
22:56 - to do something you know what I mean you
22:57 - can do whatever the heck you want but
22:59 - you're going to have to know um
23:01 - calendars and times and whatnot to
23:03 - schedule those tasks on your computer
23:05 - and so that that's where I think
23:06 - something like this will be very useful
23:08 - and come in handy like that so that's
23:09 - why I'm touching on this now kind of
23:11 - ties into a new product we have coming
23:13 - out called how to automate stuff with
23:14 - python more on that at the end of the
23:15 - video but um that is that for the month
23:19 - and the month calendar functions now
23:21 - let's go on okay another cool one is
23:23 - what if I just want to print out the
23:25 - entire freaking
23:26 - year well Tada you can do that too Cal
23:31 - well assuming you get these words I wish
23:35 - there was a better auto complete on this
23:37 - editor here because I can't type uh
23:39 - correctly a lot of the time but
23:41 - anyways um it's not going to be year as
23:44 - I thought it would be but apparently if
23:45 - you look up on the documentation which
23:47 - will tell you what it actually is you're
23:49 - actually just going to call calendar.
23:50 - calendar okay just like that and then we
23:53 - don't need a month because it's we're
23:56 - trying to print the entire year not just
23:57 - um not just just a month so you just put
23:58 - in just the year just like
24:01 - that and then when I hit run you will
24:03 - see magic happen Okay click run and
24:07 - Kaboom look at that the entire freaking
24:09 - year is printed out super prettily you
24:11 - got the year at the top 2019 you got
24:13 - January you got February you got the
24:15 - entire month headers the week headers
24:17 - here Monday through Sunday you got all
24:19 - the days of the year all 365 or 364 if
24:23 - if it's a leap
24:24 - year I I don't know how that works um
24:27 - but
24:28 - hey I think that's the day that I fell
24:29 - off the bike fell off the bike in front
24:31 - of my crush yeah February 27th anyways
24:35 - um uh what else what else uh what was I
24:39 - saying I got off track here uh print
24:42 - yeah printing out the whole year so this
24:43 - is very very handy now you might be
24:45 - wondering okay if we had if you could
24:46 - print out the entire month and we we
24:48 - could get the The Matrix for the for the
24:50 - month then can we get the Matrix for the
24:52 - entire year uh
24:56 - no I thought the same thing I was like
24:59 - okay cool so you can just get like a a
25:00 - really really big like three-dimensional
25:02 - array of all of this
25:03 - crap but apparently you can't for some
25:07 - reason I don't know what that was some
25:10 - weird weird prompt popped up just ignore
25:11 - that somebody was hacking me I think it
25:13 - said RAF so I think uh I think K's
25:16 - trying to take over this tutorial from a
25:18 - remote
25:19 - location over there but anyways uh you
25:24 - can't actually do that but what you
25:26 - could do is you could iterate through
25:27 - every month
25:28 - and then get the multi multi-dimensional
25:29 - array yourself and then construct
25:31 - something like this for an entire year
25:33 - on your own that's another little
25:34 - exercise you can do so why not go and
25:36 - try it I haven't tried it yet but I'm
25:37 - sure if I put 5 10 15 hours into it I
25:40 - could figure it
25:41 - out but I'm sure you guys can do it in 5
25:44 - 10 15 minutes if you uh look up the that
25:47 - that calendar. month calendar one that
25:49 - gives you the array and then just try to
25:51 - iterate and make a for Loop and iterate
25:53 - over every month that would be cool a
25:55 - cool little exercise okay um moving on
25:58 - what else do we have here you can also
26:01 - get uh there's a cool function
26:03 - here called day of the week but it's
26:06 - actually the function actually called we
26:08 - oh that's the variable name I gave it
26:09 - because that makes more sense so day of
26:11 - the week okay that's what I want my
26:13 - variable to call remember
26:14 - self-documenting
26:16 - code turns the ladies and the gents on
26:19 - all hot and bothered you
26:21 - know if they're into that kind of stuff
26:25 - but um this this function is just going
26:27 - to be called
26:31 - calendar. weekday and then you just
26:33 - Chuck in the year and then you Chuck in
26:35 - the month and then you also Chuck in the
26:37 - day of the month so today is
26:40 - the to the eth
26:42 - man today's the eth right eth
26:45 - okay we popped that in there so month uh
26:49 - year month and day and what we're going
26:51 - to get here is remember how I said up
26:53 - here when we have the first weekday
26:54 - Monday became zero what it's going to
26:55 - print out is actually in integer that
26:58 - corresponds to the current whatever
27:00 - weekday this is so today is actually a
27:02 - Friday so that's going to be Monday is
27:04 - zero so again counting on my fingers
27:07 - laugh at me if you
27:09 - like uh Monday so Tuesday will be 1
27:12 - Wednesday Thursday for it'll be four it
27:14 - should be integer four that prints out
27:16 - from here okay let's head run
27:18 - and I did not print it I make this
27:21 - mistake all the time apparently I never
27:24 - learn now let's run it and
27:28 - boom four right there exactly what I
27:30 - thought four actually means Friday so we
27:33 - can actually put any year so let's put
27:35 - in freaking Year 3000 and see what see
27:38 - what
27:39 - happens is it still going to be a four
27:42 - it's going to be a five so apparently in
27:43 - year 3 3000 um March 8th it's going to
27:46 - be a Saturday I mean we're all not going
27:49 - to be there we'll probably be on Mars
27:50 - and Pluto and stuff thank you Elon Musk
27:52 - you're awesome but yeah that's how that
27:55 - that function works
27:58 - um what else again probably a useful
28:02 - function for when you actually have a
28:03 - date and then you want to know the
28:05 - weekday to schedule it like oh I want to
28:07 - schedule every Friday or something or
28:08 - every Wednesday you could use this to
28:10 - filter out the integer somehow and
28:11 - figure out the dates and just you'd have
28:13 - to problem solve and think about it I
28:15 - don't even know what problem I'm trying
28:16 - to solve with it but if you're trying to
28:17 - schedule things on a calendar like this
28:19 - seems like it would definitely be useful
28:21 - and I'm sure it is because it's in the
28:22 - library and most things in the library
28:24 - are useful not everything but I mean
28:26 - most things
28:28 - um but moving on there's a few more so
28:29 - there's also a function that will tell
28:32 - you if a year is a leap year which is
28:33 - pretty cool so let's go
28:35 - calender do is leap and then what is
28:40 - this year 2019 I don't think it's a leap
28:42 - year so when we again oh I caught myself
28:46 - you guys I need to print this is Leap I
28:49 - didn't screw up I'm learning just like
28:51 - you guys learning just like you guys so
28:53 - apparently 2019 is not a leap here cuz
28:56 - it comes out false but I think 2020 is
28:58 - so let's run that and hey what do you
29:01 - know yeah so every year um every four
29:05 - years there's a leap year if you guys
29:06 - didn't know that which just means
29:08 - there's one less Day in February for
29:09 - some weird Cosmic reason there like the
29:12 - astral Gods got pissed off and they
29:14 - decided to troll us or something I don't
29:15 - know but I mean every four years um
29:18 - there's a leap here so this this can
29:19 - tell you
29:21 - um if a year certain year is a leap year
29:23 - or not which is important if you're
29:24 - calculating days like CU those will add
29:26 - up like every years you're off by a day
29:28 - you don't want to be off by a day okay
29:31 - you you don't even want to be off by a
29:32 - second when you're when you're coding
29:33 - you want to be very precise with
29:34 - everything so it's very important to be
29:36 - very clear about what you're trying to
29:38 - do
29:40 - and get done and then get it done 100%
29:43 - cleanly because even 99% there's a
29:45 - little room for air and then it'll break
29:47 - it'll break sometimes you don't want
29:48 - that you're trying to always go for 100%
29:50 - so it's best you can it's not always
29:52 - possible but that's at least the idea
29:54 - okay guys so yeah a little trick here
29:58 - uh everybody knows well I know that 2000
30:00 - was a leap year so you can kind of
30:02 - calculate okay every four years 2008
30:05 - 2004 2008 everything up there if it's an
30:08 - if it's a factor of four then you know
30:10 - that it's a leap here from from year
30:12 - 2000 cool
30:14 - stuff now moving on um I think there is
30:17 - only one more function that I saw that
30:19 - was cool to actually play with
30:21 - everything else is kind of nitty-gritty
30:24 - um they might be useful in weird weird
30:27 - cas if you're actually trying to problem
30:28 - solve
30:29 - but now I didn't feel like showing it on
30:32 - a video on YouTube you know like I I'll
30:34 - I'll dig it up if I'm actually doing a
30:35 - project and it's useful to me but it
30:37 - it's just boring like it would just bore
30:38 - you guys more than I am right now so the
30:41 - last one is how
30:44 - many leap days so this is exactly what I
30:47 - was talking about how you don't want to
30:48 - be off by one day every four years if
30:50 - you're trying to calculate over a long
30:51 - period of time whatever you're trying to
30:53 - do especially if you're doing um
30:55 - actually I had an internship where there
30:57 - was a guy who did a lot of he was an
30:59 - astronomer he went
31:00 - to some big school I forget this was
31:03 - years ago but
31:05 - he was doing astronomy and did a lot of
31:08 - coding for big astr astrological things
31:12 - I I don't know big Cosmic thing whatever
31:14 - the word is I'm not an astronomer sue me
31:17 - but basically when he's doing
31:19 - calculations on that scale like years
31:21 - and millenniums and millenniums those
31:22 - leap years really really add up so you
31:24 - actually need to know how um those
31:27 - little tiny little things change you
31:29 - need to be like that precise again
31:30 - because when you're on that scale even
31:31 - one day will screw you up so very
31:33 - important but this this little function
31:35 - here is how many leap days and then all
31:38 - all that it it does pretty much
31:41 - is um it tells you how many leap days
31:43 - are in a range of years so let's
31:46 - say Let's
31:48 - uh collapse this a little bit so we can
31:51 - see so from year 2000 to year
31:56 - 2001 uh this might be exclusive or
31:58 - inclusive I'm not exactly sure but we'll
32:00 - test it out that's usually the best way
32:02 - to figure it out it's one or the other
32:05 - just try both and then you know the
32:06 - answer like it's almost faster than
32:08 - Googling sometimes just like oh try it
32:09 - try something else and then and then you
32:11 - know so year 2000 was a leap year
32:14 - remember that 2000 that little 2000
32:16 - trick I use and 2000 or 2000 was a leap
32:18 - year 2001 is not a leap year because it
32:20 - only happens every four years so this
32:22 - should print out as one okay when I
32:24 - print this hey guys I'm learning I
32:26 - didn't forget it again how many leap
32:27 - days let's print this very last one out
32:30 - click
32:31 - run and it says one so cool it it picked
32:35 - up that uh year 2000 is a leap year 2001
32:38 - is not so in this range from 2000 to
32:40 - 2001 there was only one Leap day that
32:42 - was skipped or added I don't know I
32:46 - don't know if they added day or
32:47 - subtracted day I think it's I think it's
32:49 - added day it doesn't matter it's
32:52 - irrelevant but you like you get the
32:53 - point um let's see if this is inclusive
32:56 - or exclusive so the way I would test
32:57 - something like this is actually put in a
32:59 - year that I know is a leap year so 2004
33:02 - so I actually know in my head that 2000
33:04 - and 2004 are both leap years so there
33:06 - are two leap years in this range but
33:09 - that's only assuming if this is
33:10 - inclusive it might ignore this year and
33:12 - actually only go 2000 up to 2003 so now
33:15 - when we run this if we get one or two
33:17 - it's going to actually answer our
33:18 - question of if this uh function is
33:21 - inclusive or exclusive on the the second
33:24 - parameter here this 2004 so we'll hit
33:26 - run
33:27 - and it's one so it turns out that it is
33:30 - exclusive so actually it ignores 2004 so
33:33 - if you want to include 2004 you'd
33:34 - actually actually have to put 2005 just
33:36 - like that or any bigger one so now it
33:38 - should print out two right guys right
33:43 - right all right so hey look two right
33:47 - we're all right we're all we're all
33:49 - right all right all the time always
33:50 - right right right and then if if you
33:53 - wanted to put in maybe like up to 2020
33:56 - remember X exclusive so it's not going
33:57 - to choose uh not include that and we hit
33:59 - run then we'll probably get four or five
34:01 - or something yeah that sounds about
34:02 - right and Year 3000 should be about
34:06 - 250 because there's a th000 in there 243
34:09 - close enough um interesting actually
34:12 - maybe there isn't a leap year every four
34:14 - years maybe every now and then it skips
34:16 - because it should have been closer to
34:17 - 250 it's 243 though that's
34:21 - interesting maybe every now and then
34:22 - there's actually a leap year every five
34:24 - years Google it for me guys posting the
34:27 - comments that's a that's a cool little
34:28 - fun fact for you guys but yeah that's
34:31 - pretty much it for the calendar module I
34:33 - found this uh this morning I just want
34:34 - to make a quick or long video on it long
34:37 - video um but yeah it'd be very useful
34:40 - for uh scheduling things and whatnot
34:41 - there's also a module called date time
34:44 - and time which I have used before import
34:46 - date time and import time these
34:50 - libraries so what these are is you can
34:53 - actually um I think this gives you a
34:56 - date and a time so you you might
34:57 - actually be using this a lot more in um
34:59 - the our hot to automate stuff with
35:00 - python course coming out in a month or
35:02 - two um date time but a calendar would
35:06 - also be useful for making it more
35:07 - legible I believe I'm there's probably
35:08 - some way you can leverage it and I'll
35:10 - find a way to leverage it if I don't
35:11 - then I failed and I'll go jump off a
35:15 - curb or
35:16 - something um but yeah so date time and
35:18 - time are also things you can look into
35:20 - and there's actually some functions in
35:21 - calendar that actually interact with
35:23 - these other two modules that make them
35:26 - like
35:27 - they're in interoperable that's a term
35:29 - in programming where you can have two
35:31 - different Frameworks of two different
35:32 - program languages that are interoperable
35:33 - like you can actually embed like Java
35:35 - code in Python programs and embed python
35:37 - codes in Java programs which is pretty
35:39 - cool so you could actually say that
35:40 - Python and Java are interoperable like
35:43 - fully interop they have full
35:45 - interoperability it's I use a lot of big
35:47 - words because they're normal to me but
35:48 - I'm just going to I'm just going to say
35:50 - them and when I catch myself then I'll
35:51 - explain them so you guys know what the
35:53 - heck I'm talking about okay cuz it's
35:54 - just jargon that we use in this
35:55 - community cuz we want to we want to feel
35:56 - smart when none of us are um we're all
35:59 - human we're all dumb by default so never
36:02 - feel bad about that okay but yeah so
36:04 - check check out those other two modules
36:06 - um that's pretty much it I was going to
36:07 - mention we do have a new course coming
36:08 - out called how to automate stuff with
36:10 - python I've probably said that three
36:11 - times already but it's a really cool
36:12 - course about how to automate things on
36:14 - your computer using python so you can
36:16 - make python work while you sleep it's
36:18 - doing stuff for you while you sleep you
36:19 - could have it send emails for you like
36:21 - 10 days from now or every Monday send an
36:22 - email to these sets of people um you
36:24 - could be like okay I want to fire this
36:26 - person 27 days from now um his name is
36:28 - Aaron and I'm going to go on K's account
36:30 - and I'm going to fire him in 27 days
36:32 - exactly cuz I don't have to deal with it
36:33 - so I'm going to go on a trip for 27 days
36:35 - schedule it and then boom he's going to
36:36 - get that email he's just going to be
36:37 - gone it'll be great it's perfect so like
36:39 - stuff like that you could like make like
36:41 - little personal um little
36:45 - personal schedules to do whatever you
36:47 - want but uh that's kind of the thing
36:49 - things we're going to be working about
36:50 - and how to aate stuff with python and
36:51 - that's pretty much it um for this video
36:53 - guys please stay tuned I will see you
36:55 - guys next time I love your faces off I
36:57 - stole that from KY and I
37:01 - will yeah I'll see you guys next time
37:04 - that's it thanks for watching goodbye
37:07 - get the hell out of here kzy you're
37:11 - fired leave that in bye
37:13 - [Music]
37:21 - guys hey welcome back to Python tutorial
37:25 - for absolute beginners in this video
37:27 - we're going to be talking about how to
37:28 - use IFL statements with python so thank
37:31 - you for coming back let's pick it up
37:33 - right where we left
37:40 - off so in the last video we talked about
37:43 - like yo how do we use functions and we
37:46 - learned okay we can make a square but
37:48 - now how do we use if L statements and
37:50 - add some kind of conditionals okay so
37:53 - what we can say is if elephant body
37:56 - weight or elephant weight is greater
37:58 - than ant weight then you know make a
38:01 - square okay so what we're going to do is
38:03 - I'm going to have a elephant weight and
38:06 - um I don't know how much they weigh at
38:07 - the top of my head I'll just write uh
38:09 - 3,000 I imagine 3,000 lb if they're
38:12 - probably less or more I don't know then
38:14 - I'll have a ant weight and uh ant weight
38:17 - will be like uh let's say I was going to
38:20 - say 20 but they're not 20 lb let's say
38:23 - uh 0.1 lb I don't know what how much
38:25 - they are
38:27 - so cool we got elephant weight and we
38:29 - got ant weight now we'll say if elephant
38:33 - weight is greater than ant weight then
38:36 - make a square all right by the way we're
38:39 - going to commment these out so these
38:41 - lines don't work just to show you what
38:43 - that looks like is uh you know I'll
38:45 - delete uh this I'll delete these two
38:48 - lines for just a second I'll hit enter
38:50 - and you'll see that the result nothing
38:52 - actually happens and that's kind of what
38:54 - we want right now with that said I'm
38:55 - going to move forward and I'll go like
38:57 - this okay so if elephant weight is
39:00 - greater than ants weight then make a
39:02 - square just logically thinking about
39:05 - this what do you think should happen do
39:06 - you think it will make a square or will
39:08 - it not make a square take 3 seconds 3 2
39:12 - 1 good job you're right it will make a
39:15 - square because elephant weight is
39:16 - greater than ant weight okay so I'll run
39:18 - this and I'll break down actually what's
39:21 - happening behind the scenes for this
39:23 - statement to run this statement must be
39:27 - must evaluate to a true statement okay
39:29 - we're going to speak more on Boolean
39:31 - logic later but everything must evaluate
39:34 - to true or false So when you say 3,000
39:36 - is greater than
39:38 - 0.1 it will return to you an answer so
39:41 - for example okay I will comment these
39:43 - out and I will say comment this out and
39:46 - I'll say 3000 is greater than 0.1 okay
39:50 - and I'll say print so it prints a result
39:53 - of it and I'll go to console and console
39:56 - it says say true all right now if I do
39:59 - 3000 is less than
40:02 - 0.1 it will say false all right it
40:05 - evaluates to false so if this evaluates
40:08 - to so going back to our example right if
40:13 - this part turns out to be true then this
40:16 - part runs the square runs okay so in
40:19 - other words if I change this to true and
40:21 - I run it then the square will run but if
40:24 - I change this part to false like like so
40:27 - like this then it won't run so either
40:30 - you can have true or you can have false
40:32 - those are the two things you can have
40:33 - okay so what we're trying to do is make
40:36 - it so that it ends up um the the
40:39 - statement gets evaluated and then
40:41 - something happens okay so if elephant
40:44 - weight is greater than ant weight which
40:45 - is true then it makes a square but what
40:48 - we can say is otherwise you know uh
40:51 - don't make a square and instead just do
40:53 - cy. turtle uh forward 100 something like
40:58 - that okay just go forward 100 if that's
41:01 - uh not the case but as you can see
41:03 - elephant weight is greater so it's going
41:05 - to still make a square but what if I
41:07 - flippity flip this what if I say
41:10 - elephant weight is less than ant weight
41:12 - meaning ant weight is greater than
41:14 - elephant weight what will happen if I
41:16 - run this well what you'll see is is
41:19 - going to happen is that instead of
41:20 - running this statement over here it's
41:22 - actually going to run the L statement
41:25 - now where this could be useful is you
41:27 - can say something like if you're making
41:29 - IG clone later at some point you can say
41:32 - if user has a profile picture then show
41:36 - their profile picture if user does not
41:39 - have a profile picture you can say
41:40 - something like then show the anonymous
41:42 - picture icon all right that's what
41:44 - happens when you go to Facebook or
41:45 - whatever you can say if the login
41:48 - credential of the user on Facebook is
41:51 - accurate then let them log in if not say
41:55 - incorrect password and have them try
41:57 - again so those are some real world
41:59 - examples of how if L statements are used
42:03 - everywhere but what I gave you are some
42:05 - simple examples you can use right now uh
42:08 - the link to this code by the way you can
42:10 - access this code right away and uh if I
42:13 - hit share right there's this link and
42:15 - this link you can copy from the
42:17 - description below you can also just
42:19 - paste it in like how I'm showing here
42:21 - and once you hit enter you can play
42:22 - around with this code do whatever you
42:24 - want this is going to be the best for
42:26 - you to learn and have access to it and
42:29 - uh I always suggest just use repet that
42:32 - way you don't even to install Python and
42:33 - make it work so but if you want to
42:36 - install python
42:37 - I have a video you can watch it okay so
42:40 - with that said thank you so much for
42:41 - watching at this point uh so please
42:44 - subscribe to the channel and hit the
42:45 - Bell notifications it really helps out
42:47 - the channel but more importantly for you
42:49 - it's really amazing is because any types
42:51 - of tips tricks or motivational tips I'm
42:55 - uh bringing out for python developers or
42:57 - how to make a higher income go from low
43:01 - you know high five figureure income to
43:03 - six figure income you'll be able to
43:04 - learn that so subscribe to the channel
43:06 - cuz I'm bringing the Heat this
43:08 - year I'm excited also like the video if
43:12 - you liked it or dislike the video if you
43:13 - didn't like it I'll see you in the next
43:17 - [Music]
43:21 - video hey you welcome back to Learn
43:24 - Python programming for complete
43:26 - beginners in 2019 the latest edition
43:28 - we're going to talk about wild Loops
43:30 - okay and basically wild Loops are
43:31 - different kinds of Loops but Loops in
43:33 - programming are you can keep doing stuff
43:35 - over and over again without having to
43:36 - write code over and over
43:41 - [Music]
43:45 - again in the next video we're going to
43:47 - talk about something called for Loops in
43:49 - this video we're going to talk about
43:50 - something called while Loops okay so
43:52 - while Loops you don't know when
43:54 - something is going to end that's when
43:56 - you use while Loops for for example okay
43:58 - I don't know how many push-ups I can do
44:00 - so I can write a while loop and I can
44:02 - say something like while kazy not tired
44:04 - keep doing push-ups basically I can like
44:08 - go like this and just basically keep
44:10 - going right this is like a wild Loop
44:11 - like if I'm doing push-ups
44:14 - right
44:16 - yeah this is part of a wild loop I don't
44:18 - know how many I stopped okay while loop
44:20 - is over over so basically it's something
44:23 - like I would write in code while Cy not
44:25 - tired keep going and then when KY tired
44:28 - stop what might that look like right and
44:31 - I can go
44:34 - while kazy Turtle okay let's say
44:39 - kazy is equal
44:41 - to happy okay so while kazzy is Happy
44:45 - keep making the turtle go forward and
44:46 - then as soon as kazzy is sad stop the
44:49 - turtle from going forward okay so while
44:52 - Kazi equal equal
44:54 - happy
44:57 - right then I can
44:58 - say turtle kazy sorry turtle. forward by
45:05 - let's say 10 okay so keep going and I'm
45:08 - pretty much going to comment out
45:09 - everything else because uh I'm not going
45:12 - to be using it right now okay so let's
45:15 - run this code and let's see what it does
45:18 - it just keeps going unless I stop it
45:20 - okay so I have to click stop otherwise
45:22 - the while loop will run infinitely and
45:25 - I'm going to run into something called
45:26 - infinite Loop okay so let me try that
45:29 - again it's going to if I run it again
45:32 - you can see it just keeps going keeps
45:33 - going I have to stop it otherwise my
45:35 - computer is going to crash but if I
45:37 - change this to KY is sad okay and I run
45:41 - it it's not going to run it has stopped
45:43 - because it goes well check if Ki equal
45:46 - equal sad and this statement is going to
45:48 - either evaluate to true or false and
45:51 - because it evaluated to false cuz Kazi
45:53 - is not sad kazy it says is happy right
45:55 - here
45:57 - it goes oh I'm sorry I don't know what
46:00 - the hell you're talking about and two
46:01 - equal signs means that you're checking
46:04 - something with another thing okay so for
46:06 - example um let me hit um comment on this
46:12 - comment on this and comment on this if I
46:15 - do 5 equal equal 5 it's going to say and
46:19 - I go to console and I run this what is
46:22 - it going to say nothing because I have
46:24 - to write print so let me make sure I
46:25 - write print and I run it and you can see
46:27 - over here it says true all right so that
46:31 - is true it's this is a this is called
46:34 - the uh equality operator it's checking
46:37 - between two things this is the
46:40 - assignment operator so if I do this this
46:42 - will give me an error because they'll
46:43 - say you can't assign five to five all
46:47 - right that's an error but I can do a is
46:49 - equal to 5 but I can't say 5 is equal to
46:52 - 5 but I can check if five is equal to 5
46:56 - all right just like this is a operator
46:59 - for checking stuff as well like hey it's
47:01 - five greater than five is 5 equal to 5
47:05 - is five less than five so on and so
47:07 - forth okay we're going to go more into
47:08 - this later but this is an example of a
47:11 - while loop it's something that can keep
47:14 - going unless the condition changes okay
47:17 - unless the condition changes and there's
47:19 - a way to stop the while loop as well you
47:21 - can write a statement like break and
47:23 - break out of it but that's something I
47:25 - want to show you guys later now I'm
47:26 - going to keep the wild Loop part simple
47:28 - because the next part I'm going to show
47:30 - you is going to be why you should be
47:32 - using four Loops majority of the times
47:34 - almost all of the times and while Loops
47:37 - a lot less you should really be using
47:39 - wild Loops if you don't know when
47:40 - something's going to end so an example
47:41 - of that would be you know I told this in
47:44 - one of my courses but basically I said
47:46 - there was this one time where I was on
47:48 - an airplane and I was sitting next to
47:50 - this girl and I was like you know what's
47:52 - the best way to pass time so I created
47:54 - this game called tic tac toe
47:56 - and I thought okay how can we keep
47:58 - playing until it ends cuz every time we
48:00 - would play this game of tic tac toe rock
48:02 - paper scissors it would come to an end
48:03 - then I have to have to run the program
48:05 - all over again so I wanted to do
48:07 - something where it kept the game going
48:10 - until I specifically said quit the game
48:14 - okay so this way every time we would
48:16 - finish a game Rocket paper scissors it
48:17 - would just start the next one next one
48:19 - until I hit Q so for that because I
48:21 - don't know how long we're going to keep
48:22 - playing we can keep playing for 10
48:24 - minutes 30 minutes we ended up playing a
48:26 - 100 games so for that it was really
48:29 - useful to have a I wrapped the entire
48:31 - game in a while loop so the key the game
48:33 - can just keep playing over and over
48:35 - again I had the whole thing in a while
48:37 - loop so the game can actually keep
48:38 - playing over and over again that was the
48:40 - really awesome part about it and that's
48:42 - how you use wild Loops in real life and
48:44 - in this video I just gave you a little
48:46 - example of it in the next video we're
48:47 - going to cover four loops with that said
48:49 - thank you so much for watching if you
48:50 - enjoyed this video please give it a like
48:52 - really helps out the channel subscribe
48:54 - to the channel hit the Bell notification
48:55 - so all the upcoming new videos come
48:58 - straight to you come straight to your
49:00 - face you're going to enjoy them you're
49:01 - going to love them as always I love your
49:03 - face and I'll see you in the next
49:07 - [Music]
49:12 - video hey you welcome to Learn Python
49:16 - programming for absolute beginners in
49:18 - this video we're going to be talking
49:19 - about how to use four loops with python
49:22 - and let's jump right into it
49:27 - [Music]
49:30 - so basically for Loops the idea is that
49:33 - you know exactly how many times you're
49:35 - going to do something right now first of
49:37 - all let's start off by commenting some
49:39 - of this stuff
49:41 - out and um let's do something like this
49:45 - for I in range five print I okay and if
49:51 - I run this in the console you'll see
49:53 - it'll print 0 1 2 3 4 okay so it'll
49:57 - basically start from the beginning from
50:01 - zero go all the way to four because when
50:03 - you say five coding in Python it a
50:07 - computer starts counting from zero so if
50:10 - I said 10 here it'll go only up to nine
50:14 - okay and uh that's the power of a for
50:17 - loop we're telling it how many times to
50:19 - go now what I can do is I can
50:22 - say for I in range 10 okay or I can say
50:27 - for count and then I just have to change
50:30 - this eye here to count as well I can say
50:33 - in range 10 basically I'm saying do
50:36 - something 10 times okay that's all I'm
50:38 - saying here do something 10 times what
50:40 - if I want to make a square 10 times or
50:42 - what if I want to make um a square two
50:45 - times I can say two here and then run
50:47 - that function remove my print statement
50:50 - like this and hit run and in result
50:53 - it'll make a square and and then you can
50:55 - see it goes and makes another Square
50:58 - immediately so that's pretty cool okay
51:01 - if I wanted to do it three times I'll
51:02 - just do for count and range three do it
51:05 - three times so let's see what
51:08 - happens holy that's pretty cool huh
51:11 - let's do it four times and let's see
51:13 - what we get I mean this is
51:17 - exciting and I think Turtle we can
51:20 - improve its uh we can increase its speed
51:22 - too so wow we just made a window
51:26 - and let's go here I think there's
51:28 - something called turtle. spe or
51:30 - something so let's
51:32 - do speed 100 I don't know if that works
51:36 - there we go it worked okay let's do
51:39 - 50 much faster
51:43 - 30 cool I think if you keep it at 15
51:46 - that should be fine cuz that's pretty
51:47 - fast but it still lets you see what is
51:50 - going on so now we got the turtle we've
51:54 - changed it speed speed and because of a
51:56 - for Loop we can make it do something
51:59 - however many times we want so that's the
52:00 - cool thing about a for Loop most of the
52:03 - times you're going to be using a four
52:05 - Loop all right that makes things easier
52:07 - for you if I wanted to do something more
52:10 - again I would use a for Loop so my
52:12 - question to you would be what if you
52:14 - wanted to make you know four squares or
52:17 - 10 squares could you do that could you
52:20 - try and I challenge you to do this could
52:23 - you try to make another shape instead of
52:25 - a
52:26 - square but have it be done a different
52:29 - number of times a eight number of time
52:31 - eight times all right give that a try
52:34 - and I hope that's going to be exciting
52:36 - for you so with that said thank you for
52:38 - watching this video this was just a
52:40 - basic introduction to how for loops work
52:44 - with that said please like the video If
52:46 - you enjoyed it click the Subscribe
52:48 - button because we're going to be
52:49 - dropping a lot more epic stuff on this
52:51 - channel coding tips tricks tutorials but
52:55 - also also lots of freelancing tips as
52:57 - well for python other than that thank
52:59 - you so much for watching I Love Your
53:01 - Face Off subscribe to the channel as and
53:03 - as always I'll see you in the next
53:06 - [Music]
53:11 - video hey what's up guys Aaron here from
53:14 - clever programmer and today I just want
53:16 - to make a really really quick video
53:17 - about primitive data types in Python so
53:20 - let's get
53:21 - [Music]
53:24 - started
53:26 - all right so primitive data types what
53:29 - the heck does that even mean so first of
53:31 - all there's a thing called data types in
53:32 - Python which is um just a way that the
53:35 - computer can understand data so there's
53:37 - different types of data that the
53:38 - computer needs like it needs numbers for
53:39 - math it needs sentences to display stuff
53:41 - to the screen and it needs um a couple
53:44 - other things like there's a long list
53:45 - but there are four primitive data types
53:48 - that I want to go over okay four that
53:49 - come packaged with python immediately
53:51 - they're called primitive because they're
53:52 - the most um primitive like
53:55 - Elementary base level kind of data types
53:58 - that you can use like literally just
53:59 - numbers like the number one the number
54:01 - two the number 3.5 or um the word hello
54:04 - or something like that just something
54:05 - very very basic there's not like a crazy
54:07 - amount of stuff in there okay and then U
54:10 - one more called Boolean which sounds
54:12 - really weird sounds kind of funny
54:13 - Boolean b o o l e a an but let me just
54:15 - type these out so you can see so there
54:17 - are um first of all there's numbers I
54:20 - said there's four types so there's
54:21 - numbers this is actually split into
54:23 - integers okay um then there's floats
54:26 - which is just short for floating Point
54:28 - numbers and floating Point numbers are
54:29 - just decimal numbers because of the
54:31 - decimal point floats around that's why
54:33 - they're called floats a little bit weird
54:35 - um and then there are strings which are
54:37 - just sentences okay and then then there
54:41 - are booleans which are just um a yes no
54:43 - kind of thing true or false so those are
54:45 - the four primitive data types I'm just
54:46 - going to go over this so integers are
54:48 - going to be one two 3 4 five you can
54:50 - just uh do math of these like 1 plus 1
54:52 - equal 2 and whatnot uh you have floating
54:54 - numbers so this is like 2.5 uh negative
54:58 - 03778 like numbers like those like very
55:01 - very um exact numbers and then you have
55:03 - strings so strings I said are just like
55:05 - sentences um but they're always enclosed
55:08 - in quotation marks that's all you need
55:10 - to know for right now okay quotation
55:11 - marks so you have like um yo how's it
55:15 - going like that it's just a
55:17 - sentence um but it's enclos in quotation
55:20 - marks so um it's a little bit the
55:22 - distinction a little weird I'm actually
55:23 - going to have a video that's explain
55:24 - strings more um
55:27 - but uh if you have four like this this
55:29 - is not a number this is a string okay so
55:32 - this is a string that's all you have to
55:34 - know if it has double quotation marks or
55:36 - single quotation marks it's just a
55:37 - string that's all you need to know when
55:39 - you're actually coding on the computer
55:40 - just know those are strings and then
55:42 - booleans last are just like this you
55:44 - only have two options true and false
55:46 - just like
55:47 - that and what these are is they just
55:50 - evaluate um to or um that that was a big
55:54 - word well what they are is it just
55:56 - allows us to be like okay should I run
55:58 - this chunk of code yes or no should I
55:59 - run this chunk of code yes or no and
56:01 - that's why booleans you need a yes no
56:03 - kind of scheme in coding instead of just
56:05 - numbers okay so that's um everything so
56:08 - strings can be anything you want floats
56:09 - can be every number that exists inures
56:11 - every number that exists but booleans
56:13 - can only be true or false okay and these
56:15 - are the four main primitive data types
56:16 - in Python um that's it for this video
56:18 - guys uh I'll be going um into more
56:20 - detail on python in the next few videos
56:22 - but uh thank you for watching and yeah
56:24 - stay tuned I'll see you next
56:26 - [Music]
56:42 - time hey what's up you guys Aaron here
56:45 - from clever programmer and today we're
56:47 - just going to be going over casting uh
56:49 - you don't know what that means yet but
56:50 - I'll explain in a minute let's get
56:53 - started
56:55 - [Music]
56:58 - okay so uh last time last video I
57:00 - believe we talked about data types now
57:02 - all Casting means is we are going to be
57:05 - casting from one data type to another
57:07 - data type so let's say we had a integer
57:09 - had one and we wanted to cast it to a
57:11 - floating Point number 1.0 you could do
57:14 - that just by throwing it into this
57:15 - little casting function thing it'll
57:17 - actually turn the integer into a
57:18 - floating Point number so let's see how
57:19 - that works so let's say you have a one
57:24 - okay okay X is one and then I want to
57:27 - make x a floating point so we could just
57:29 - put uh I believe float it's a function
57:32 - it looks like a function uh it's called
57:34 - casting though and then you can just put
57:36 - uh X in there to get 1.0 out or you
57:39 - could even just put one in here same
57:40 - deal the same thing happens
57:43 - okay uh so that's basically what uh
57:46 - casting looks like um you can pretty
57:49 - much cast any data type to any other
57:51 - data type that makes sense so for the
57:53 - primitive data types you can cast you
57:55 - can also cast integers to Strings so
57:56 - let's try this if we have an integer
57:58 - just one if you wanted to um cast this
58:01 - to a string you just put Str Str like
58:03 - that you put a number inside and then
58:05 - when it prints it's actually a string
58:06 - you can see the quotation marks here
58:09 - same deal if you want to cast from um a
58:12 - string or you pass it to the in function
58:14 - but if you want to cast a string let's
58:16 - say just string with a bunch of G's
58:18 - there we can cast it to an uh actually
58:20 - what am I what am I saying stupid me if
58:22 - you want to cast so that you wouldn't be
58:24 - able what to cast to an INT because the
58:26 - computer would actually be like what the
58:27 - heck are you trying to do cast that to
58:28 - an INT so if I run this you get an error
58:31 - so that's actually good I made that
58:32 - mistake it's a little example for you
58:33 - guys but if you actually put a number in
58:35 - here like 34 um and then hit uh enter to
58:40 - cast it then you can see that python
58:42 - actually knows what to do with this
58:43 - string and actually follows through with
58:45 - casting it to an INT so casting is kind
58:47 - of this weird thing um you it doesn't
58:49 - work all the time but you need it um to
58:52 - change between data types
59:00 - like if you want to display a number so
59:01 - actually what's happening one good
59:02 - example is in this print function you
59:04 - can only you can only print strings to
59:06 - the screen you can't actually print
59:07 - numbers so when I put a number in here
59:09 - five what's going on in the print
59:10 - function is it is actually being cast to
59:13 - a string five the number five is being
59:15 - cast to the string five before it's
59:16 - actually being printed and that's why
59:18 - this five pops up here
59:20 - okay um also booleans you can kind of um
59:24 - cast that it's not very common so you
59:26 - don't really need it but it's also a
59:28 - thing you can do I believe if you cast
59:30 - uh an INT if you cast uh an INT to a
59:32 - bullan I think zero is false and
59:34 - anything that's not zero so a one
59:37 - negative 1 and every other possible
59:39 - number are all true okay so that's
59:41 - pretty much casting it's for casting
59:43 - between data types in Python and pretty
59:45 - much every programming language but
59:47 - that's how you do it in Python uh thanks
59:48 - for watching you guys a short video
59:50 - today and I'll see you next
59:53 - time
59:56 - [Music]
60:03 - hey what's up you guys Aaron here from
60:05 - clever programmer and today I just want
60:07 - to explain strings a little bit it's a
60:09 - data type in Python and yeah let's get
60:12 - [Music]
60:16 - started all right so strings what the
60:19 - heck are strings in Python
60:22 - well I mentioned this in a previous
60:25 - video about uh data types that um all I
60:27 - said was that strings are just um things
60:30 - on the screen that are enclosed in
60:31 - quotation marks okay so let's just havep
60:35 - s for string so anything in here like
60:39 - hello ma'am okay anything enclos in
60:42 - quotation marks here is considered a
60:44 - string that's about all I said in the
60:45 - previous video but um what I actually
60:48 - want to go through is the distinction
60:49 - between this and the integers and floats
60:52 - and other data types so a string
60:54 - literally is just whatever
60:57 - whatever um is typed on the screen it is
61:00 - exactly that okay like the the the
61:03 - string is literally that data it is that
61:05 - sentence there a good way to think of a
61:07 - string is just a sentence it's a a a
61:10 - string of any characters numbers and
61:13 - symbols okay in a sentence so you can
61:16 - have anything you want there as long as
61:17 - you want it can be empty it can have one
61:19 - character it can have an entire novel
61:21 - entire ebook in there it is just
61:22 - considered one string and um it is its
61:25 - own data type because it is considered
61:27 - one whole it's that entire sentence
61:29 - together is is the very the thing that
61:32 - I'm putting into this variable s here as
61:34 - you can see that entire thing is there
61:36 - and it's just it is what it is a little
61:38 - bit hard to explain but it's just
61:40 - exactly that so um you can move this
61:43 - around you can you can print S as you
61:45 - can uh as you can see if I run this then
61:49 - hello ma'am pops up just like that
61:51 - because this stuck together as a whole
61:54 - and um
61:55 - yeah pretty much you can you can also
61:57 - index into this so let's say I want to
62:00 - print um s uh so this little bracket
62:04 - here what this means is I'm going to
62:06 - index into s so if this follow if this
62:08 - is following s and I put a number in
62:10 - here this is just going to give us a
62:11 - little part of the string so this here
62:14 - um we start at zero we don't start at
62:16 - one in programming so we start at zero
62:18 - this would actually just give us H if I
62:20 - put in a one it would actually give us e
62:23 - so you're actually able to read uh
62:24 - different parts of a string you can
62:26 - actually read different ranges in the
62:27 - string too but I'm going to explain that
62:28 - at a later date in a different video
62:29 - It's called slicing if you're interested
62:31 - in that um to get something to get a
62:33 - substring out of here a substring is
62:35 - just um a small part of a of a of a
62:38 - longer string then you can look that up
62:40 - but uh I'll have a video coming out on
62:41 - that going really really in depth with
62:43 - that later if you just want to wait for
62:45 - that but yeah um that's pretty much
62:47 - strings um there's a lot of different
62:49 - functions on strings you can call too
62:51 - I'll also be going be going over those
62:53 - uh in future
62:58 - videos um but pretty much all you need
63:00 - to know is that a string is just
63:01 - something inclosed in quotation marks
63:03 - you can also use single quotes I forgot
63:04 - to mention that if I didn't already say
63:06 - that just like that that'll work equally
63:07 - as well um but yeah a string is just
63:10 - that it's just a sentence a sentence
63:12 - that is together and that's the data
63:14 - type um thank you for watching you guys
63:16 - I'll see you in the next
63:18 - [Music]
63:23 - video
63:27 - [Music]
63:29 - hey you guys Aaron from clever
63:31 - programmer here and today we're going to
63:33 - be going over a special data type not a
63:35 - primitive data type called lists in
63:38 - [Music]
63:42 - Python all right so I'm in riplet here
63:44 - okay and um all the list is is just a
63:48 - thing that can hold a bunch of objects
63:50 - in it a bunch of things in it okay so
63:52 - what it looks like let's start there is
63:54 - is
63:56 - this uh let's just put a list of numbers
63:59 - okay one two three very simple so this
64:01 - here is a list if it's in closing
64:03 - brackets and everything is on and
64:04 - there's things in here separated by
64:06 - commas then this is considered a list um
64:08 - actually this is also considered a list
64:10 - if it just has one element with no
64:11 - commas but usually when you have a list
64:13 - you're going to have more than one
64:14 - that's the whole point so a list is just
64:16 - a collection of things in order okay
64:19 - that's pretty much it if you want to
64:20 - group a bunch of things together like
64:21 - you want to have a bunch of um just a
64:23 - bunch of numbers together a bunch of
64:25 - names together whatever it is then the
64:27 - list is what you want to be using so
64:29 - let's just see um what you can do with
64:32 - lists um first of all uh we have list L
64:37 - here um nothing's happening list L here
64:40 - first of all you can print out a list
64:41 - and just to spit out all its contents
64:43 - just like this it prints out nicely um
64:46 - with the brackets
64:49 - um um but also a list I forgot to
64:51 - mention it is not limited to just have
64:54 - having numbers inside of it you can
64:55 - really have anything you want in here so
64:56 - you could have a number here you could
64:57 - have a string here um sting you could
65:01 - have
65:02 - a um another string here with different
65:05 - kind of quotes and then you could have
65:07 - uh a float and then you could have a
65:08 - Boolean so we have all the primitive
65:09 - data types here represented we have an
65:11 - integer we have a float and you could
65:14 - even have uh another list in here as one
65:17 - of the elements of the list so in here
65:20 - we could just put 1 2 3 and this here
65:22 - this complicated list here here this
65:24 - list uh it doesn't know what it is it's
65:27 - trying to get his life together or
65:28 - something it doesn't know what it wants
65:29 - to be um has a bunch of different things
65:32 - inside here compared to this list which
65:34 - is very nice and clean okay very nice
65:36 - and clean where usually usually when
65:39 - you're using lists it'll be nice and
65:40 - clean like this it'll all be the same
65:41 - data type because you have a bunch of
65:43 - things together uh you wouldn't have it
65:44 - messy like this uh but you can do this
65:46 - if you want if you want to have a bunch
65:49 - of different data types the these are
65:50 - both um equally valid lists in Python
65:53 - okay
65:54 - okay uh so let's just print out L2 to
65:56 - see what that looks
65:58 - like put that there list list one and
66:00 - list two yeah I'm very bad at naming
66:03 - things uh Kazi is probably going to hate
66:05 - me for this but but uh as you can see
66:08 - the list printed out here just fine so
66:11 - this list here is exactly the same as
66:12 - this list that I wrote
66:14 - out uh including the sub list okay so um
66:18 - also what you can do with lists is let's
66:20 - just go back to list one list uh list
66:24 - one here yeah you can index into them
66:26 - just like you can index into a string um
66:29 - you can almost think of a string as a
66:31 - list
66:32 - of letters and symbols and characters uh
66:35 - kind of but not really but you can when
66:37 - when it comes to indexing you can like a
66:39 - list and a string are very similar
66:41 - because it's the same
66:42 - syntax the same you'd be typing in the
66:45 - same thing into your computer to index
66:47 - into this list so just like strings if
66:49 - you go if you index it zero in the list
66:52 - um since this list is actually let's use
66:54 - list
66:55 - two okay and uh actually this is a
66:57 - little bit confusing let's just change
66:58 - this so list list two okay list
67:04 - two list two just like that now that's a
67:07 - lot clearer for you guys understand so
67:09 - this here and this here is the same
67:10 - thing so if I want to index into this
67:13 - list here I would put a zero and this
67:15 - would actually split out this one here
67:17 - because this is the first element so
67:18 - let's run this and and as you can see
67:21 - the one prints out now let me just copy
67:23 - and paste this so you can see what's
67:24 - going on with all the other elements so
67:26 - if I wanted to print out element the
67:28 - second element the third element the
67:29 - fourth element or The Fifth Element and
67:31 - I run this you're going to see all of
67:32 - these print out on separate lines
67:34 - because I'm printing them out each
67:36 - separately okay so you can see oh I
67:39 - guess I missed this last one here let me
67:41 - just pop that in there so you can see
67:43 - what that looks like and I run this
67:46 - then um this is uh then it's indexing
67:49 - into each element of this this list two
67:52 - list um individually and printing out
67:55 - each
67:56 - one so uh list is um very useful
68:02 - for uh holding things together but
68:05 - sometimes you need to actually do
68:06 - operations on list uh lists so that's
68:08 - also something you can do in Python uh
68:10 - there's a lot of functions and or
68:12 - methods um that you can that you can run
68:14 - on lists to do different things to them
68:16 - like you can add to lists you can take
68:17 - things away from lists you can insert
68:20 - into one spot in the list you can sort a
68:21 - list if it's a list of numbers or
68:23 - something you can even vers list so that
68:24 - it goes in the reverse order and I'm
68:26 - actually going to be going over a lot of
68:27 - these functions right now so just um
68:29 - stay tuned for a couple seconds and I'll
68:31 - get to
68:32 - it all right so we talked about indexing
68:34 - into a list um let's talk about the most
68:38 - common one actually is adding an element
68:39 - to the end of a list so like if you had
68:41 - a list of names let's just put in here
68:44 - actually let's get rid of all this so
68:45 - it's nice and clean if we just had names
68:48 - okay a bunch of names let's just say
68:52 - Joe
68:54 - John at James
68:58 - okay
69:01 - James so this is a list of three strings
69:05 - three
69:06 - names all right and let's say I wanted
69:08 - to add one more name to this list like
69:10 - let's say this was like a this list was
69:12 - actually a team so we had like a team
69:14 - member of three people and we we wanted
69:16 - to add one more person to the team then
69:18 - we um we could just type it in here but
69:20 - I mean that's not really that's kind of
69:21 - cheating that's not really coding so how
69:24 - you would actually make the computer do
69:25 - it is you would um call this function
69:28 - called
69:30 - append um I don't really know what this
69:32 - word means I didn't know what it meant
69:33 - too before I started coding but append
69:35 - it's not append it's actually append
69:37 - append just means add something to the
69:39 - end it's just a word in the English
69:41 - language apparently and that's what it
69:42 - means but if you don't know what it
69:43 - means like I didn't then that's what it
69:45 - means so you can actually just add
69:46 - another name here so let's just say Gary
69:48 - okay let's
69:50 - um let's add some print statements here
69:53 - so you can see kind of the the flow
69:55 - that's happening
69:57 - names uh yeah print names and then I'll
69:59 - append something to it and then print it
70:02 - out a second time so what we should see
70:04 - here is this list print out once and
70:06 - then right below that is this print um
70:09 - this list print out with Gary also
70:11 - attached to it so a list will be one
70:12 - length um one element longer let's run
70:15 - this and yep as you can see that's
70:17 - exactly what happens so we printed out
70:19 - the list originally of names and then we
70:20 - appended Gary to the end of this list
70:24 - all right uh so that's what a pend is a
70:26 - pend is very useful because sometimes
70:28 - you don't care about the order of the
70:29 - list um you actually can I could have
70:31 - inserted Gary at the beginning of the
70:32 - list or somewhere in the middle I'm
70:33 - going to talk about that next um but
70:35 - usually if you're just putting a bunch
70:36 - of stuff together and you don't really
70:38 - care about the order um then yeah you
70:40 - can just use a pend very common so let's
70:43 - now let's try uh insert so if I wanted
70:46 - to insert Gary let's say at the
70:48 - beginning of the list instead of calling
70:49 - a pen I'd actually call insert okay not
70:52 - with two RS
70:55 - insert insert with one R all right and
70:59 - um the difference between this this and
71:02 - um
71:03 - aend is that if you're going to insert
71:05 - something um into a list then you need
71:07 - to know where in the list is going to be
71:09 - entered so actually this this function
71:11 - is going to be taking one extra
71:14 - parameter that tells us where we want to
71:16 - put it into the list so if you put zero
71:18 - comma Gary then it's going to put Gary
71:20 - in the first spot here before Joe and
71:23 - then it's going to shift everything over
71:24 - to the right you don't have to think
71:25 - about it you don't have to think about
71:26 - it as shifting just think about as just
71:28 - sticking it in the front and then
71:30 - everything else just does what you would
71:31 - assume it would do it would just shift
71:33 - over so let's run this and see what
71:35 - happens as you can see Gary here got
71:37 - stuck in the firste um the first
71:39 - position there also if you put in one
71:41 - then the same kind of deal happens Gary
71:43 - is actually going to pop up here instead
71:44 - and it's just going to like split the
71:45 - other parts of the list there um so
71:47 - that's insert I'm not going to go
71:48 - through the other two ones you
71:49 - understand how it works um doing this
71:53 - putting the very last one is going to be
71:54 - do the exact same thing as a pend pretty
71:56 - much um so you might be wondering okay
71:58 - why does a pend exist if insert exists
72:01 - um it's just append is just a quicker
72:03 - way to append something to the end of
72:04 - the list sometimes that's a common thing
72:06 - you do so yeah they they achieve the
72:08 - same thing but they're they're distinct
72:10 - functions so some other cool things you
72:12 - can do with lists is you can also remove
72:13 - elements um so if I want to remove Gary
72:17 - uh actually no Gary's not even here so
72:19 - so if we have this list of names here
72:21 - again Joe John and James and then print
72:23 - it and then I want to remove something
72:25 - from there then what you have to do is
72:27 - actually put in the name so this would
72:31 - actually remove Joe from the list okay
72:33 - or if I put this then this would
72:35 - actually remove Jon from the list this
72:36 - is case sensitive I believe so if I put
72:38 - a capital Jon then then this JN would
72:40 - actually stay in but if I if I ran this
72:43 - code then you will actually see that Jon
72:45 - is deleted from the list let's try that
72:47 - yeah you see John has disappeared from
72:48 - the list now okay um uh some some other
72:53 - things you can do are um sort sort lists
72:57 - and even reverse lists so let's do
72:59 - reverse because sorting sorting a list
73:01 - of names um I guess that would make
73:03 - sense you could probably alphabetize it
73:04 - I don't know if there's a function for
73:07 - alphabetizing that um but for like a
73:11 - list of numbers for sure you could
73:13 - actually uh sort it and I I I'll I'll
73:15 - demo that real quick but let's just look
73:17 - at reverse okay um reverse so if as you
73:23 - can see I I said that a list is ordered
73:25 - right so a list has a very specific
73:27 - order so that we know um which element
73:31 - we're talking about when we index into
73:32 - it it doesn't like have a random order
73:34 - or anything like um names at zero is
73:37 - always going to be Joe names at one is
73:38 - always going to be John James 2 is
73:40 - always going to be James it never
73:42 - changes um so sometimes because the
73:45 - order matters if you want to reverse the
73:46 - order which could be useful for
73:48 - something like let's say you wanted to
73:50 - have your names alphabetized and then
73:52 - you want to reverse it
73:54 - and then have your names in Reverse Al
73:56 - um alphabetical order then you could do
73:57 - that as well uh so all this will do is
74:00 - just uh flip this around so that James
74:02 - comes first and then Joe comes last and
74:05 - as you can see y this list got reversed
74:07 - uh got flipped around pretty
74:09 - much okay so uh let's just actually
74:13 - let's uh do sort right now okay so let's
74:15 - just have a bunch of
74:17 - numbers um 1 2 3 4 5 well that's already
74:23 - Ed stupid me let's put in a bunch of
74:25 - random numbers 6 4 2 9 12 okay and then
74:31 - let's actually we don't need any of this
74:33 - let's get rid of
74:37 - this if we have a bunch of numbers
74:40 - here A bunch of numbers here and then
74:43 - I'm going to print it out before we
74:44 - before we sort it numbers but if I
74:47 - wanted to sort this then I can just call
74:49 - this function sort okay and what what
74:53 - this will do is it'll actually sort the
74:54 - the numbers array into ascending order
74:58 - by default if you wanted to get it in
75:00 - decreasing order you could sort it and
75:02 - then reverse it so you can actually
75:04 - change these uh these functions together
75:06 - to do cool things like
75:08 - that uh what am I printing out numbers
75:10 - printing out that's what I was doing so
75:12 - let's run this and as you can see the
75:15 - the list 64 2912 has been sorted from um
75:19 - from the lowest number to the highest
75:20 - number 2 4 6
75:22 - 92
75:23 - so the these are just some really common
75:25 - um functions you can use on lists um the
75:28 - main thing I want to point out here is
75:29 - yeah list is just a group of things you
75:31 - put together and there's a a specific
75:33 - order and you can index into the list
75:35 - wherever you want to read from it and
75:37 - you can also add things you can remove
75:38 - elements um it can get longer and
75:40 - shorter it's it's a very very flexible
75:42 - changeable kind of data structure and
75:44 - very useful for keeping things
75:46 - together um so those are pretty much
75:48 - lists uh one very common thing to do
75:50 - with lists though what the last thing
75:51 - I'm going to talk about is uh iterating
75:53 - over a list so I think we already had a
75:56 - video about for Loops in uh about for on
75:58 - for for Loops but uh you can iterate
76:02 - over a list using a for Loop by just
76:04 - using this syntax so for number in
76:09 - numbers um and then you can just print
76:12 - the number okay so you guys probably
76:16 - already know what this is you've seen
76:17 - this but as you can see the whole list
76:18 - got printed from this for Loop
76:21 - here um what I the reason I'm doing this
76:23 - is I want to point out that in a for
76:25 - Loop um and whatever is here needs to be
76:27 - in iterable that's just a fancy word
76:30 - that that says you can iterate over it
76:32 - so a list is iterable because you
76:35 - can iterate through every element one by
76:38 - one and do something with each one of
76:40 - those so in this case we're just
76:41 - printing it out to the screen okay so a
76:43 - list isn't iterable um it's the simplest
76:46 - iterable I
76:48 - believe and um yeah it just holds a
76:51 - bunch of things in it um together as a
76:53 - group and that's pretty much all you
76:55 - guys have to know for that um that is it
76:57 - for this video uh thank you guys for
76:58 - watching and I will see you guys next
77:01 - [Music]
77:13 - time hey what's up guys this is Aaron
77:15 - from clever programmer again um and
77:17 - today I just want to talk about
77:19 - something really cool in Python called
77:21 - indexing slicing and striding in arrays
77:24 - and strings so let's get
77:31 - started all right first you're I'm going
77:33 - to want to go to reel.it as usual so
77:35 - once you're here click on new repple and
77:37 - uh follow along please um why is python
77:41 - not popping up at the
77:43 - top that is just perverse anyways um so
77:47 - let's just name this uh what did I say
77:50 - indexing
77:51 - slicing and striding so that might not
77:54 - make any sense to you right now but I'm
77:55 - about to explain so um this is a really
77:57 - cool thing that you can do in Python um
78:01 - to play around with strings and arrays
78:03 - uh strings are basically just arrays um
78:06 - but yeah you're able to do a lot of cool
78:08 - things with it so I'll just jump right
78:09 - in um first let's start with a with a
78:12 - with a list so I'm just going to call
78:14 - this list digits and then I'm just going
78:16 - to put the digits from 1 to 9 here or 0
78:20 - to 9 so there's 10 digits in here right
78:22 - and these are actually the same as the
78:23 - indexes of every digit that that might
78:26 - make it a little bit easier for you guys
78:27 - to understand so um once we have that
78:30 - there you guys should be familiar with
78:32 - uh simple indexing if you're not I'll
78:34 - please look that up real quick and come
78:35 - back but if you do then you should know
78:38 - that if I go like this digits at zero
78:41 - then this is just going to print out the
78:42 - first element of this array so it's just
78:44 - going to print out zero let's see if it
78:46 - does and that's exactly what happens
78:48 - same deal if I put in one or two or
78:50 - three or four um then I'm just going to
78:52 - get that same index
78:54 - back all right one thing you might not
78:56 - have known about python I'm not sure of
78:58 - any other languages you can do this in
78:59 - I'm sure there are but I don't think you
79:01 - can in Java or C++ or other languages
79:03 - like that um but you can actually use
79:05 - negative indexing so let's uh like what
79:08 - would that even mean like think about it
79:09 - for a second if you had a negative index
79:11 - in Array what what could that possibly
79:13 - mean maybe you could be like indexing
79:15 - through it and then maybe like you start
79:17 - um you loop around to the beginning
79:18 - again like once you once you uh loop too
79:21 - much like almost like like a mod
79:22 - modelist
79:24 - um but actually uh what python decided
79:26 - to do which I think is pretty
79:27 - intelligent is actually make it so that
79:28 - you count from the back of the list so
79:31 - um if we're index indexing with positive
79:33 - numbers this would be zero this would be
79:35 - one this would be two three so on so
79:36 - forth oops um but if you use a negative
79:39 - index let's just say negative one you
79:41 - would actually be accessing this last
79:43 - one so let's try uh print this out and
79:45 - as you can see the very last element is
79:46 - printed out if I put -2 again the second
79:50 - to last element is printed out eight so
79:52 - actually if I wanted to get the very
79:53 - first element using a negative index
79:55 - then you could actually just put -10
79:58 - because there's 10 elements in this aray
79:59 - or even better just put negative um just
80:03 - use the length function like you guys
80:05 - know the length function if you don't
80:06 - then it just gives you the length of uh
80:09 - of um uh any list or uh string I believe
80:12 - I'm not sure if it works on strings but
80:14 - I think it does so yeah see if we do
80:16 - that then this automatically becomes 10
80:18 - this makes it negative and then we can
80:19 - get the first element that way so you
80:20 - can actually call every element by two
80:22 - different names in Python that's really
80:24 - cool um it's very handy if you just want
80:25 - to get the last element just boom just
80:27 - like slap in negative one and you're
80:29 - done it's very nice and easy and and
80:32 - clean um another cool thing we can do is
80:35 - uh there's actually going to be a lot of
80:36 - cool action happening between these two
80:37 - brackets you can do a lot of stuff
80:38 - between these two um with like mult
80:40 - multiple colon signs and and weird weird
80:43 - little codes um but it's very very
80:46 - powerful for doing um different kind of
80:49 - um reading from arrays and strings so
80:52 - what else you can do do is uh let's
80:53 - stick a colon in here so what the heck
80:55 - does that mean all right so all this
80:57 - means is you can actually put a range um
80:59 - of an array in here so that means
81:02 - instead of just putting in like a single
81:03 - element you can actually put a range of
81:05 - elements so let's say if I wanted to
81:06 - just get the first um two elements or
81:10 - yeah the first first three so 0 one two
81:12 - um I would leave nothing at the
81:13 - beginning and then let's say we would
81:15 - end at
81:17 - um uh element three so it it'll go up to
81:21 - three but not include it so it'll
81:23 - actually give us this entire thing back
81:24 - instead of just one element so you can
81:26 - actually you can actually reference
81:28 - parts of the array in chunks and you can
81:31 - specify exactly the chunks you want so
81:33 - let's try to run this and see what
81:35 - happens uh exactly what I thought would
81:37 - happen 012 because this will start from
81:39 - the very beginning because we didn't
81:40 - specify anything here I think if you put
81:42 - zero the same thing would actually work
81:45 - yeah because it it starts from here
81:46 - includes this so this number is
81:48 - inclusive and this number is exclusive
81:51 - so this will print out everything from 0
81:53 - 1 and two um likewise I put it all the
81:55 - way up to 9 this will go from zero all
81:57 - the way up to eight so I would actually
81:58 - get from 0 to 8 here when I run it and
82:01 - yep exactly what happens so that's
82:02 - basically what slicing is in Python oh
82:05 - very useful if you just want to get like
82:07 - a chunk of it let's say you wanted you
82:08 - had like a name like a name in a string
82:10 - like maybe let's just pop this in here
82:12 - real quick name equals um first
82:17 - last just like that go like this and
82:20 - let's say I just want to pick out the
82:21 - first name
82:23 - you can actually um find the the the
82:26 - correct index so 0 1 2 3 4 5 and if I
82:30 - put 0 to five and you can actually just
82:32 - get rid of the zero because it's the
82:33 - same thing as nothing and I run it first
82:35 - prints out so see how you can get a
82:37 - different substring from that string um
82:39 - very cool in Python oh just get rid of
82:42 - this cuz I guess we don't need it um
82:44 - let's go back to this example so um also
82:47 - you can
82:48 - also um slice into arrays using negative
82:52 - negative elements so you can actually
82:54 - put in like a negative one like
82:56 - this um and this should be from the very
82:59 - um first element to the very last
83:00 - element but remember this is exclusive
83:02 - so it's not going to include the nine
83:04 - let's try that and again the same thing
83:05 - pops
83:07 - out
83:09 - um uh also I believe you can yeah this
83:12 - is one thing I almost forgot to
83:18 - do you can uh put a number at the
83:20 - beginning and leave the last the last
83:22 - part empty so that this will go from
83:23 - element five inclusive all the way to
83:25 - the end um note though if you put 10
83:27 - here um yeah 10 index 10 here you're
83:31 - actually going to exclude it but if you
83:32 - just don't put anything at all you'll
83:34 - actually include the last digit so
83:36 - that's uh something to keep in mind
83:37 - there um what else can we do so I think
83:40 - that's about it when it comes to slicing
83:43 - um also uh another thing you can do is
83:45 - called striding so slicing is very
83:47 - simple you just put a um you have a
83:49 - chunk you can just get any any range in
83:51 - the array you want one zero up to all of
83:53 - it um but you can also do stride so
83:55 - that's actually going to incorporate two
83:57 - colons all right so what this means is
84:00 - you can actually have a slice here so
84:01 - let's say from zero to to 10 right or
84:06 - let's say uh yeah to
84:08 - 10 and then what the stride is is how
84:10 - many how big the jumps you want to be so
84:12 - if the stride was one we're just going
84:13 - to hop one time every time so it's going
84:15 - to go from zero to one to two to three
84:17 - to four to five to six Etc but if you
84:20 - put two you can actually skip so it'll
84:23 - actually jump and Skip from 0 to 2 to 4
84:25 - to six so we can actually pick out all
84:27 - the even numbers this way let's try this
84:29 - I'll run this and as you can see we get
84:31 - 0 2 4 6 8 if we put in three then you'll
84:34 - actually jump in um in strides of three
84:36 - so you get 0 3 69 um you might not get
84:39 - the nine because this is 10 let's see uh
84:42 - oh it did pop up so the nine did pop up
84:44 - there Al so um those are basically what
84:47 - strides do um again you can use negative
84:49 - indexes here in any combination you want
84:51 - you can omit things things so if you
84:52 - emit the first one you're going to start
84:53 - from the very beginning including them
84:55 - this one if you emit this one you're
84:56 - going to do um include all of them all
84:58 - the way up to the end um also you could
85:01 - do something like this uh so this just
85:03 - includes everything this is just
85:04 - everything uh and a stride of one just
85:06 - includes everything but let's say you
85:07 - put a stride of two then you just get
85:10 - the even numbers or
85:13 - um or you could even actually use
85:15 - negative strides as well I I forgot um
85:17 - for a second but I believe if you put a
85:18 - negative stride what would that mean
85:20 - remember the negative index we actually
85:22 - um the negative index you
85:25 - would um start from the end of the array
85:27 - but what about a stride a stride kind of
85:29 - tells you okay jump in a certain
85:31 - direction at a certain jump so a stride
85:34 - of two you would jump in in
85:36 - um in leaps of two in strides of two
85:39 - You' keep jumping over and over and over
85:41 - or strides of three you jump over and
85:42 - over and over and over in strides of
85:44 - three leaps of three so a negative one
85:46 - um what makes most sense what the the
85:48 - people who designed python came up with
85:50 - was if it's negative go backwards so
85:52 - actually putting a stride of negative
85:53 - one you'll start from the end of the
85:55 - list and you'll go backwards so let's
85:57 - see how that works let's um right uh
86:00 - let's click run and as you can see the
86:02 - list gets spit out backwards so this is
86:04 - actually a cool little um thing that you
86:06 - can do in pi in Python to uh reverse any
86:09 - array or string just stick a little
86:10 - little negative one here um also if you
86:13 - put a -2 and you hit run then um the
86:16 - same thing happens it starts from the
86:17 - end and goes to the beginning of the
86:19 - array but it's going in strides of two
86:21 - hence the only numbers here um very cool
86:25 - uh one thing to note with negative
86:26 - strides is if you have negative strides
86:28 - and you also want to slice you need to
86:30 - make sure that this index here is on the
86:32 - right side of this index here so I can't
86:34 - put like index zero here and index five
86:37 - here because that doesn't make any sense
86:39 - how can I go from index 5 to index
86:43 - zero um oh sorry I have it backwards
86:46 - this way how can I go from index zero to
86:49 - index 5 going in this direction to the
86:53 - left it doesn't make any sense so you
86:56 - need to make sure that the stride
86:57 - direction if it's positive or negative
86:59 - that the slicing indexes also um make
87:02 - sense they're in the right order so you
87:04 - need to make sure that if it's negative
87:05 - then the the slicing is going to the
87:07 - left and then if the stride is a
87:09 - positive number then the slicing is
87:11 - going to the right so this would not
87:12 - work um this this would work but if we
87:15 - have a -2 then we would need to actually
87:18 - change these to five and zero so that we
87:20 - are going from five to Z in strides of
87:23 - two so it would be 5 3
87:26 - 1 and that's exactly what happens so um
87:29 - that might might have been a little bit
87:31 - confusing um they're very very uh useful
87:35 - Thing Once you figure out how to use
87:36 - them just play around with it a little
87:37 - bit I'm kind of rambling on a little bit
87:39 - here but if you just like pop in some
87:41 - numbers with these two colons and really
87:43 - figure out like what happens and try to
87:44 - predict what's coming out the way I did
87:46 - then it'll actually be a really good
87:47 - learning exercise for you so why don't
87:49 - you go in there and uh do some cool
87:50 - stuff like just play around get some sub
87:52 - strings um get some like subarrays and
87:54 - reverse some things and go in the
87:55 - opposite direction and just have fun
87:57 - with it all right so um that's pretty
88:00 - much it when it comes to indexing
88:02 - slicing and striding including negative
88:04 - numbers um but now I actually want to um
88:08 - do a little example where instead of
88:09 - just having numbers in these slices you
88:11 - can actually use variables so um one
88:14 - little cool thing that I came up with
88:16 - was if we just have a for Loop called 4
88:21 - I in
88:23 - range um how many digits I have 10 yeah
88:26 - but let's just put length use a length
88:28 - function because that's uh more uh
88:30 - robust you're able to make the program
88:34 - smarter that way because it'll it'll
88:35 - automatically adjust so always use a
88:37 - length function instead of hardcoding
88:38 - numbers try to never hardcode numbers in
88:40 - your um in your code it's just not a
88:42 - good
88:43 - idea um when you are uh trying to make
88:45 - big programs so uh length of digits
88:48 - would be end up being 10 so for range
88:51 - and 10 10 let's try to um just print out
88:57 - digits
89:00 - from uh the beginning to I this this
89:04 - zero is optional but I just put it in
89:05 - there for clarity sake let's run this
89:07 - and um before I do though what do you
89:09 - think will print
89:12 - out think about it and I'm going to run
89:15 - it now and you'll
89:17 - see so you can ignore this this is from
89:20 - that first print statement but this is
89:21 - exactly what prints out here this uh
89:23 - weird cascading um thing here now think
89:26 - about what's Happening Here we are we
89:28 - have a loop with a with a variable I
89:32 - that um goes through the digits here
89:35 - from 0 to 99 and then each time we go
89:38 - through this Loop we want to print from
89:39 - the beginning of the list up to that
89:41 - digit so every time this Loop goes I is
89:44 - getting a little bit bigger which means
89:45 - this is going from the beginning to
89:47 - somewhere and then beginning to
89:48 - somewhere a little bit bigger and the
89:49 - beginning to somewhere a little bit
89:50 - bigger beginning to somewhere a little
89:51 - bigger and so on and so forth and that's
89:53 - why you get this you start at the
89:54 - beginning and then you go from the
89:55 - beginning to one and then beginning to
89:57 - two and so on and so forth all the way
89:58 - until you get to the end at
90:00 - eight so uh this is um a little bit
90:04 - Advanced uh putting putting variables in
90:06 - slices but you can actually do some
90:08 - really really interesting things when
90:10 - you um when you're doing like
90:11 - complicated algorithms and whatnot um
90:14 - putting variables in slices like this
90:15 - with strides and you could even put like
90:17 - equations in these slices and whatnot
90:19 - like like modulus signs and and weird
90:22 - function calls and stuff and you can put
90:24 - a lot in there and you can actually do
90:25 - some really interesting things when it
90:28 - comes to um grouping grouping together
90:30 - things so let's say uh one actually kind
90:32 - of advanced example that I came up with
90:34 - but I really want to show you guys it's
90:36 - pretty cool it's let's say I have so I
90:38 - have this list from0 to 9 here now let's
90:42 - say I want to get every group of three
90:44 - possible in this list so if I have this
90:47 - entire list I want to get 012 I want to
90:50 - get 1 2 3 1 2 2 3 I want to get 2 3 4 3
90:54 - 4 5 so so on and so forth all the way up
90:56 - until 7 8 9 all right but no further I
90:58 - don't want 8 I don't want just 89 I
91:00 - don't want just nine I don't want just
91:01 - zero okay so um you can actually uh
91:05 - let's let's start by writing a for loop
91:07 - again so for I in range um let's just go
91:11 - length of digits again let's just start
91:14 - there that's always a good place to
91:15 - start sometimes you have to like
91:16 - subtract one or two to uh get rid of
91:18 - some weird offsets but uh just start by
91:21 - using the length function
91:23 - always and
91:25 - um let's just try to print um digits at
91:32 - from
91:33 - I oops from I to uh I + 3 so let's think
91:40 - about this before I run it okay for I
91:43 - and range um the length of digits so
91:46 - this is this Loop is going to run 10
91:47 - times because this list is 10 um 10
91:50 - elements long
91:52 - then every time this runs we are going
91:55 - to go from the current index so whatever
91:57 - z um whatever iteration run so 0 1 2 3
91:59 - or all the way up to nine plus three so
92:03 - the current index plus three so what is
92:04 - this defining here this this is defining
92:06 - a slice in the
92:08 - array okay um a slice in the array of
92:12 - size three but it's constantly moving
92:15 - because this is I and I + 3 then we know
92:17 - that it's going to be of length three
92:18 - wherever I is so let's just try to run
92:20 - this and see what po what pops out um
92:23 - let's comment this out so we don't the
92:24 - output doesn't get
92:26 - confusing boom boom boom run so as we
92:30 - can see the it almost has the correct
92:33 - functionality that we want uh 012 1 2 3
92:36 - 2 3 4 345 because you can see like these
92:39 - the first elements of all these of all
92:41 - this output these are actually the
92:43 - iterations of the for Loop and then we
92:45 - just added three to the to the end of
92:47 - the to the slice so that's where we get
92:49 - the second two following numbers after
92:51 - that so that's that's how we do that but
92:53 - what about this thing here um there's
92:55 - this eight n and nine but I I want to
92:56 - get rid of that because those aren't
92:57 - groups of three so let's think about
92:59 - that what could you do to get rid of
93:01 - those well you could just subtract two
93:04 - iterations from the for Loop right you
93:06 - could just chop it off just by putting a
93:08 - minus two in here a little cheeky minus
93:10 - two boom and you just get rid of those
93:12 - two and just ignore them completely but
93:14 - that's um not the best idea usually you
93:17 - don't want negative just the same way I
93:18 - didn't want to put 10 here I use length
93:21 - uh digits length of digits instead you
93:24 - also don't want to do a minus 2 or a
93:26 - plus three here even um just bear with
93:28 - me for a second uh it might make a
93:31 - little more sense once you see it so you
93:33 - don't want this -2 or plus three but
93:34 - then how do you get rid of that well
93:36 - let's just say I I said I wanted a
93:38 - window size right window size of three
93:43 - so let's do that now let's get rid of
93:46 - this so suddenly we can get rid of that
93:49 - three so this should run exactly the
93:51 - same as before boom yes it runs exactly
93:54 - and does what we want us to do and we
93:56 - actually specified the window size here
93:57 - so that's really cool but we still have
93:59 - this minus two here so what does what
94:02 - does that mean how do we get rid of that
94:04 - well let's think about what this two is
94:06 - really doing this two is um subtracting
94:09 - off two iterations of loop because there
94:12 - is a trailing um some trailing things
94:14 - like once these iterations over here
94:16 - happen there's not there's not enough
94:18 - digits afterwards to get an entire group
94:19 - of three so um what the key distinction
94:22 - I want to make here is that two is one
94:25 - digit less than three all right because
94:27 - let's say I put um actually let's get
94:30 - rid of this and I'll just show you guys
94:31 - if the window size was actually five so
94:34 - I now now I can change see see this is
94:36 - actually another good reason why you
94:38 - want to um have variables like this
94:40 - because you can just change one variable
94:42 - see I changed this one variable to five
94:44 - and then now I can actually change the
94:45 - window size to five so I can get these
94:47 - five and then these five and then these
94:50 - five and so on and so forth and chunks
94:51 - or even I can just go the entire array I
94:53 - can get all 10 10 elements at
94:56 - once um but let's just go with five and
94:58 - run this and see what happens so you can
95:01 - see that it's running as expected we're
95:02 - getting groups of five from 0 to four
95:04 - and then 1 to five and 2 to six and so
95:06 - on but we have all this junk at the end
95:08 - again but do you notice how we actually
95:10 - don't only have two iterations there's
95:12 - actually four iterations so remember we
95:14 - had three iterations and we had to get
95:16 - rid of two iterations and now there's
95:19 - four extra iterations so three and two
95:21 - the difference is one and then now
95:23 - there's four iteration um or the window
95:25 - size was five and we had to get rid of
95:27 - four iterations so you see how five and
95:29 - four their um their difference is one
95:31 - again so we found the relationship
95:33 - between these two numbers this number
95:35 - always needs to be one less than this
95:37 - number in order for this window size
95:39 - thing to work okay does that make sense
95:42 - if it doesn't try to rewatch that whole
95:44 - little section again and think about um
95:47 - the relationship between these two
95:48 - numbers why would this weird ramp thing
95:51 - here here get longer as this number gets
95:53 - bigger so if I put in a six if I put in
95:56 - a six th this got this ramp got one one
95:59 - longer if I put in a seven this ramp got
96:01 - even one one longer so we got to get
96:03 - keep getting rid of one more iteration
96:05 - of the four loop at the end every single
96:07 - time U once you understand that then
96:09 - it's very simple because all you need to
96:11 - do is um so one uh we need to subtract
96:15 - six from here if you need to subtract
96:18 - six from here six is one less than seven
96:20 - and what is seven seven is window size
96:22 - so actually let's just put um instead of
96:25 - minus 6 let's go minus window size but
96:28 - remember it has to be one less than
96:29 - window size so minus
96:31 - one um there is one exception to the
96:33 - rule um every now and then you will
96:35 - actually need to have a minus one or a
96:36 - plus one to get rid of like weird
96:38 - offsets and whatnot um so it's okay to
96:40 - have minus ones or plus ones in your
96:42 - code but you never ever want like a
96:43 - negative like
96:45 - 42776 or something like that because
96:47 - then it's hardcoded in the program and
96:49 - that's not what you want in a robust um
96:52 - well-rounded program so minus one is
96:54 - okay but when we run this let's click
96:56 - run and see what happens as you can see
97:00 - um oh what happened here
97:04 - oops Yeah as you can see we get all the
97:07 - uh the groups of seven actually we don't
97:09 - what is what is happening
97:12 - here did I make a
97:15 - [Music]
97:20 - mistake
97:21 - all right guys thanks for standing by I
97:23 - had to take a couple minutes to figure
97:24 - that out uh this kind of stuff happens
97:25 - all the time like even when I even when
97:27 - you plan stuff out
97:29 - so uh just just be aware that um even
97:31 - people who have been programming for
97:33 - like seven years like me they still
97:34 - screw up it was actually a very simple
97:35 - bug here what I realized was uh yes it
97:38 - does this number does need to be one
97:39 - more than this number but earlier I did
97:42 - not have the parentheses here so when I
97:45 - was doing this he was actually
97:47 - subtracting
97:49 - um the uh I think think of subtracting
97:51 - the numbers incorrectly but once I I
97:53 - grouped it together
97:56 - here by putting these parentheses in I
97:59 - feel like that shouldn't change anything
98:00 - but for some reason that has fixed the
98:02 - issue so if I wanted to get groups of
98:05 - Windows of size seven now this will
98:07 - actually become six within this
98:09 - parenthesis so I can do this and as you
98:11 - can see now we get all four instead of
98:14 - what we had before I believe this is
98:15 - what we had and this was giving us
98:17 - errors um but yeah I guess sometimes
98:19 - it's it's always safe safer to use
98:21 - parentheses more parentheses and less
98:23 - parentheses to um be very very clear
98:25 - about your order of operations because
98:26 - that's a very easy uh mistake to make in
98:29 - math and then um those same those same
98:32 - same easy mistakes translate over to um
98:36 - programming very very um smoothly which
98:38 - is actually a kind of a negative thing
98:40 - but also a positive thing if you know
98:41 - how to work out math problems um just
98:44 - just be aware of that any any math that
98:46 - doesn't uh work in real life won't work
98:47 - on a computer all right that's just
98:50 - something to note but yeah that's the uh
98:51 - last kind of advanced um example I
98:54 - wanted to give you guys with with
98:55 - slicing so here we're actually using um
98:58 - a dynamic slicing um scheme here to
99:02 - actually change the slice in a for Loop
99:04 - over and over again so we're actually
99:05 - playing around with some numbers and
99:07 - then all we have to do is change one
99:08 - number up here one little uh
99:10 - configuration thing and we can actually
99:12 - get um any size window we want so this
99:15 - is every SI every window of size one
99:17 - every window of size two like you guys
99:19 - get it so on and so forth so yeah guys
99:22 - um that is the end of this video I might
99:24 - have drone on for a little bit I'm
99:25 - trying to get better at that I noticed I
99:26 - drag on a little bit but um I like to be
99:28 - more of her boast and less for boast
99:30 - because I think it's better to be clear
99:32 - and then to just watch the video on like
99:33 - two times speed because that's kind of
99:35 - what I learned in my um my own personal
99:37 - schooling I'm currently in graduate
99:39 - school but yeah stay tuned thanks for
99:41 - watching guys and I'll see you next
99:42 - [Music]
99:47 - time hey what's up you guys Aaron here
99:50 - from clever programmer and today we're
99:52 - going to do a nice short sweet little
99:54 - video about string manipulation and a
99:56 - little bit of string parsing we're just
99:57 - going to be going over two really quick
99:59 - python functions uh split and join so
100:01 - let's get right into
100:03 - [Music]
100:07 - it manipulating strings is actually uh
100:10 - pretty important in Python um if you
100:13 - ever need to parse a CSV file which is a
100:17 - CSV file is just a commer separated
100:19 - value file which means there's a bunch
100:20 - of of things in a file and then between
100:22 - each of those things is a comma with no
100:24 - spaces that's all it is so it could be
100:26 - like a list of names a list of emails a
100:27 - list of prices a list of whatever you
100:30 - want it to be but it's basically the a
100:33 - file is just text and you sometimes want
100:35 - to be able to do things to that text by
100:37 - splitting splitting it up or putting a
100:39 - bunch of things together into text and
100:41 - whatnot stuff stuff like that so that's
100:43 - what we're going to be going over real
100:44 - quick uh very simple very
100:46 - too um very too Nifty little little
100:49 - functions I'm just going to go over the
100:50 - syntax really quick and let's just go so
100:54 - let's say I
100:56 - have um a string a string that I want to
101:00 - split up let's do split first so let's
101:02 - just say I have yeah okay let's just say
101:06 - I have a bunch of problems all right
101:07 - we're going to call it
101:09 - broke comma pale comma short comma nerdy
101:15 - okay and then let's say I want to
101:19 - actually because this list is is just
101:21 - one long string it's not like anything
101:23 - like if I just print problems then
101:26 - um the story of my life will be
101:27 - displayed to the screen but if I want to
101:30 - make a
101:32 - list um with all of these elements in
101:35 - there then you can actually split this
101:38 - up using the split function so what I
101:40 - want to what I want to uh show you here
101:42 - is that we are going to split on a very
101:45 - specific string called a delimiter so
101:48 - I'll explain that in a second let me
101:49 - just type it out first
101:53 - uh so L just stands for list I'm going
101:55 - to go problems. spit and we want to
101:57 - split on a delimiter okay so a delimiter
102:01 - is just a fancy word I don't even know
102:03 - why it's called that but what it is is
102:06 - just something that goes between things
102:09 - so it's like a it's a unified thing that
102:11 - goes between things so like in a Comm in
102:13 - the CSV file a comma separated value
102:15 - file the delimiter is the comma with no
102:18 - space so it's just a comma if there was
102:20 - a comma space
102:21 - uh maybe some CSV files have spaces
102:23 - there might be like a a type of CSV file
102:25 - that has spaces I don't know but if it
102:27 - does then the delimeter would be
102:28 - actually comma space okay the delimiter
102:31 - would be that string those two
102:32 - characters together so for us that's
102:35 - exactly what it's going to be as you can
102:37 - see here back to the screen uh we have a
102:38 - list here and each of these words is
102:41 - separated by a comma and a space so our
102:43 - delimeter is literally going to be comma
102:47 - space okay you might have to escape this
102:50 - I'm going to test it out real quick
102:52 - testing as you go like little things
102:53 - like this is usually much faster than
102:55 - trying to research it up and being right
102:56 - the first time just like take two
102:58 - seconds and figure it out it's cool so
103:00 - let's do this uh we have this string
103:03 - here we print it out we try to split on
103:05 - this and now let's print the list that
103:08 - we just created L and see what comes out
103:11 - as you can see it worked just fine we
103:13 - didn't have to escape it let's see if
103:14 - Escaping The Comma does work though run
103:19 - it um
103:21 - no it does not so this is actually
103:24 - interpreted this see as you can see this
103:26 - entire thing is a list of one long
103:28 - string that looks just like that so you
103:30 - do not need to escape in here so just
103:32 - keep it like that um this parameter is
103:34 - just a raw string you don't need any
103:36 - escapes at all a raw string just means
103:38 - it's literally what it looks like on the
103:39 - screen you don't have to escape anything
103:41 - which is nice a raw it might look like
103:44 - this if you seen it before it has a
103:45 - little r before the string but I don't
103:46 - think this function the split function
103:48 - um can handle that so that's split very
103:52 - very simple you can take a string like
103:53 - this and split on anything you want also
103:56 - something else I could do is if I put
103:57 - like I want to split on
104:00 - short and then run it so it's actually
104:02 - going to take this split on here so the
104:04 - two elements are going to be everything
104:06 - here this is the first element and then
104:08 - everything here is going to be the
104:09 - second element because it's splitting on
104:11 - this string let's try that as you can
104:13 - see the first string is broke pale comma
104:15 - space and then the second string is
104:17 - commas space nerdy because we split on
104:19 - the delimiter that was short but let's
104:21 - just go back to what we had it before
104:23 - because that makes a lot more sense run
104:24 - it and look we have this string and
104:26 - we're splitting it into this
104:28 - list now uh what you're probably
104:30 - thinking is join the other function I
104:32 - mentioned was join and join does exactly
104:35 - what you what what it sounds like it
104:37 - does it does the opposite of split it'll
104:38 - join a whole list together into one
104:40 - string so that's like if you say you had
104:43 - a python list in python or a tuple or
104:46 - something and you had a bunch of of data
104:48 - and you wanted to put it and you wanted
104:49 - to generate a CSV file a comma separated
104:52 - text file uh sorry comma separated value
104:55 - file then you could use something like
104:57 - this like join to put everything on that
104:59 - list into one big long string of text
105:02 - and then stick it into a file call it a
105:03 - CSV file and then now you can give that
105:05 - to anybody else who who wants the CSV
105:08 - file and they can do whatever they want
105:09 - with that it's a very common thing to do
105:11 - so uh we'll just call this
105:13 - joined equals and this syntax is a
105:16 - little bit tricky like this actually
105:18 - stumped me a few times when I started I
105:20 - don't know why it's like this but you
105:22 - actually put the delimiter first just
105:24 - like this put the delimer first let's
105:26 - just put um space and space okay so that
105:31 - instead of just making it again what it
105:33 - was originally we're actually going to
105:34 - do a little change on
105:35 - it um actually let's do this let's do
105:39 - CSV
105:41 - equals like that so actually we're
105:44 - actually going to do two joints so
105:45 - ignore this for now actually let me just
105:47 - get rid of it so I don't confuse you
105:49 - that was just a random idea I had on the
105:51 - on the fly so you have your delimiter
105:52 - first you have a string here and then
105:54 - you're actually going to call a function
105:56 - on that string which is a little bit
105:58 - weird I don't know why why that why it's
106:01 - like that but basically you have to have
106:03 - the string and then you're actually
106:04 - calling a function on the string so it's
106:06 - literally string. join and then in join
106:10 - you put the list so list L would be L
106:13 - and then let's print out
106:16 - joined just like that and run it
106:21 - and as you can see it prints out one
106:23 - long string broke and pale and short and
106:25 - nerdy okay cool but earlier I said I had
106:30 - a different idea so like maybe if you
106:31 - want to create a CSV file you would
106:33 - actually use a delimiter of comma with
106:35 - no space CSV and then you call join on
106:38 - that delimiter string put in the same
106:41 - list run it this time oh I didn't print
106:47 - it
106:49 - print
106:51 - print um CSV yeah and hit run and as you
106:57 - can see we generated our own short CSV
107:00 - text here so we could actually Chuck
107:02 - this to a file I'm not going to go over
107:03 - how to write to files in Python it's a
107:05 - pretty simple maybe in a future video
107:07 - maybe the next video but that's pretty
107:10 - much what this uh is going on here we
107:13 - have this join function and the split
107:15 - function that either split on delimiter
107:17 - or join by a delimiter I think they're
107:19 - both called delimiters I know this is
107:20 - called delimiter this might be called
107:22 - something else but I'm just going to
107:22 - call it delimiter
107:24 - because just cuz and um correct me if
107:29 - I'm wrong in the comments if it's called
107:30 - something else uh it might actually be
107:32 - called something else I vaguely remember
107:33 - back from my
107:34 - undergrad anyways uh that's about it
107:37 - though for those two quick functions
107:38 - very useful for dealing with
107:40 - strings um this will be handy for yeah
107:42 - CSC files or anything remotely similar
107:44 - to that but uh that was it for this
107:46 - quick video guys thank you for watching
107:48 - um I will see you guys next time and and
107:50 - yeah
107:54 - [Music]
108:02 - goodbye hey what's up you guys Aaron
108:05 - here from clever programar today and
108:07 - today we are just going to be talking
108:09 - about tuples in Python you don't know
108:11 - what that is yet but you're about to
108:13 - find out let's get
108:16 - [Music]
108:19 - started
108:21 - all right so a tuple is uh first of all
108:24 - it's a weird word I don't know what the
108:25 - heck it means but um that's how you
108:27 - spell it t p l e and um all a tuple
108:31 - really is it's a list with uh
108:34 - constraints so um in a previous video I
108:37 - think we we we uh went over lists so a
108:40 - list uh list just looks like like this
108:44 - right with brackets you have um
108:46 - something like that um all a tuple is
108:48 - going to be is going to be the exact
108:49 - same thing but with parentheses okay
108:52 - like that so now L is actually a tuple
108:55 - so I'm going to change this to a t so a
108:57 - tuple is just it looks just like a list
108:59 - but it has parentheses instead of
109:02 - brackets um that's not the only thing
109:05 - that differentiates them um that's just
109:07 - what it looks like on on the screen when
109:09 - you're coding that's what a t will look
109:10 - like but the difference is
109:14 - um uh uh list could could have anything
109:17 - in there and so can a tup um they are
109:19 - similar in that sense you can index into
109:20 - them using um that bracket notation so
109:23 - let me just show you that real quick
109:24 - actually uh print T
109:28 - at0 um as you can see the one prints out
109:30 - because that's the first one so you can
109:31 - do that just like a
109:33 - list um you can read from it um but
109:36 - that's pretty much it the thing the
109:38 - thing about tupes is you can't actually
109:40 - change it you
109:42 - can't um you can't add elements to it
109:46 - you can't remove elements to it
109:48 - and uh I think that's about it you can't
109:51 - add and you can't remove and you can't
109:52 - change um things within it if they're
109:55 - immutable um if they
109:57 - are also unchangeable so that's that's
110:00 - kind of um a little bit little bit weird
110:02 - to to explain but basically you can't
110:05 - add or change you can't add or remove
110:06 - elements to it it's a very it's a very
110:09 - um stable structured kind of data type
110:13 - so um you can overwrite the entire thing
110:16 - so if I had T here and then I and I
110:17 - overrode T by setting equal to five then
110:19 - yes this entire tup will be deleted but
110:21 - I'm not actually changing things to it
110:23 - so what is this good for um you might be
110:25 - asking okay so what's the point of
110:26 - having a tuple if I can use use a list
110:29 - um well there are sometimes you want to
110:31 - be more secure with your data so let's
110:34 - say you had a um a credit card okay a
110:38 - credit card just call it credit card
110:40 - like that and you have multiple things
110:43 - on a credit card so this is what I was
110:44 - talking about structured data so a
110:46 - credit card has a a a credit card number
110:50 - right so let's put that in first um I
110:54 - think it's like 16 digits I'll just put
110:55 - 1 2 3 four like that a bunch you'd have
110:57 - uh
110:58 - your um the credit card number you might
111:01 - have a name on there so let's just say
111:03 - first name or I don't
111:05 - know oh let's put uh Joe Rogan because
111:09 - why not and then you would have an
111:11 - expiration date which could be like um
111:14 - December 31st 2019 or something like
111:17 - that or on credit cards I think it's
111:19 - just uh like 11 sl9
111:24 - or 20 there we go November November of
111:27 - 2020 and then um a security code usually
111:30 - have like a three-digit or four-digit
111:31 - security code that you also need in
111:33 - addition to the number right let's just
111:35 - put put it in like that so you have a
111:37 - credit card here as a tuple the reason
111:39 - we we would have using used a tuple here
111:41 - is because um every element of the Tuple
111:44 - has a consistent meaning okay so um none
111:48 - none of this can be changed I cannot go
111:50 - in and change this number I cannot go in
111:51 - here and change this I cannot go in here
111:52 - and change
111:54 - this um but uh it's all together as a
111:59 - whole um together um so usually you
112:03 - would be using it for things like this
112:05 - um one thing that is that it's very
112:07 - useful for is actually having a list of
112:09 - tupal so let's you let's say you had
112:10 - multiple credit cards then you could
112:12 - create a second credit card let's just
112:14 - create a second
112:16 - one like this okay and then let's just
112:20 - change uh or whatever screw it we can
112:22 - just leave it like that so credit card
112:24 - one and credit card
112:26 - two and then let's just say we wanted to
112:29 - have a list um credit cards with an S
112:34 - and then we could just create a list
112:36 - with credit card one and credit card two
112:40 - okay and then we could print out all of
112:43 - our credit
112:44 - cards just like that so you got are you
112:47 - guys following oh we created two tupes
112:49 - here two separate tuples using the
112:51 - parenthesis um um and then we stuck them
112:54 - in a list and we're going to print it
112:55 - out so this is Handy be let's run this
112:58 - again so it looks nicer this is handy
113:00 - because as you can see we have a bunch
113:02 - of credit cards here that are um
113:04 - structured there it's a structured kind
113:06 - of idea and then you can just put a
113:08 - bunch of these together so you can
113:09 - actually change this list this
113:10 - overarching this wrapping list on the
113:12 - outside you can always add more credit
113:13 - cards to it because it's a list but
113:16 - within each of these little credit card
113:17 - two pools you can't actually change or
113:19 - add anything to it because we don't want
113:20 - it to it's a very um stable structured
113:23 - kind of data type all right so that's
113:25 - pretty much two pools um one one cool
113:28 - thing I want to mention about tups is
113:30 - because they're so structured you can
113:31 - actually do this cool thing called
113:33 - unpacking a tuple
113:35 - okay so let's um get rid of these
113:40 - here um let's just get rid of everything
113:43 - let's say we have a person okay a
113:46 - variable called person and we're going
113:48 - to make it a tuple and we'll say say
113:50 - that every person has a name right we're
113:52 - not going to call a name we're going to
113:53 - call it
113:54 - Nancy okay Nancy pants cuz I like that
113:58 - Nancy pants and then um age let's put um
114:04 - 25 okay so Nancy pants is 25 years
114:07 - old and uh let's also put
114:11 - um favorite food okay
114:14 - Pizza like that so we have a person here
114:17 - okay um as a tuple and because the tup
114:20 - structured uh cool thing we can actually
114:21 - do in Python is actually just go like
114:24 - this we can uh create three new
114:25 - variables so name comma age
114:31 - comma fav food favorite food okay we're
114:35 - going to put this here like this and
114:38 - then we can actually say this is equal
114:40 - to
114:41 - person so what's happening here is we
114:44 - are unpacking this tupal or we uh we're
114:47 - unpacking this person tupal so this
114:48 - person tupal has has three aspects to it
114:51 - it has a name it has an age and it has a
114:52 - favorite food so that's what we're what
114:54 - we're specifying here we're specifying
114:56 - three new variables called name age and
114:59 - favorite food and then we're setting it
115:00 - equal to this two pool the cool thing
115:02 - that happens here though is now I can
115:04 - actually print out each of these things
115:06 - individually completely
115:08 - individually
115:11 - so pretty sure you guys see where I'm
115:13 - going
115:14 - here um now we have these three
115:16 - variables separately so so instead of
115:18 - going like okay person add zero and
115:22 - person at one and person at two Etc we
115:24 - can actually just unpack it this way and
115:26 - use more descriptive names instead of
115:28 - person at zero and person at one and
115:30 - whatever so when I run this as you can
115:32 - see all three pop out because we
115:34 - unpacked this Tuple uh one other cool
115:36 - thing is you actually don't even need
115:38 - these parentheses here something really
115:39 - cool you can do so you can say okay name
115:42 - um name agent FB food you're actually
115:44 - setting three variables
115:47 - completely in one line you're setting it
115:49 - equal to to this tupo which is going to
115:51 - correspond in order because the tuple's
115:52 - ordered just like a list but it's
115:54 - structured so that you can actually
115:56 - unpack it this way um very very useful
115:58 - thing especially if you are iterating
116:00 - over a bunch of tupal okay let's say you
116:03 - have like I said you could um iterate
116:05 - over a list you can also iterate over a
116:08 - um a list of
116:09 - tup and then in each iteration you
116:11 - actually unpack um the the Tuple in the
116:15 - loop itself so let's let's see what that
116:17 - would look like so let's say for
116:20 - name age Fab food in um oh this would
116:27 - have to be a list let's just create two
116:29 - people so you can see how this works
116:32 - very useful thing with tups called Tuple
116:35 - unpacking um Nancy
116:39 - she Joe shirt that one's not as funny
116:43 - but whatever age 20 and favorite food is
116:46 - pasta okay so we have person one and
116:49 - person person two and then we are just
116:51 - going to create a people
116:54 - list equals person one and person two uh
117:00 - I I could have just stuck these T PS
117:02 - directly in here but uh it's just better
117:04 - to use variables like this and then
117:06 - putting the variables here it's more
117:07 - clear
117:08 - okay um I'm just creating a list here of
117:11 - uh a list of two people and each person
117:13 - is a tuple so now we can say okay let's
117:16 - iterate over people and since we are
117:19 - unack in this um it's going to iterate
117:21 - this this Loop is going to iterate over
117:23 - this entire list and each time it goes
117:25 - through it's actually going to unpack
117:26 - these two PES so that in the iteration I
117:29 - can actually print out um everything in
117:33 - here so I could put just like print name
117:36 - uh actually it's just the same as here
117:37 - let me just copy and paste this boom
117:40 - boom
117:42 - boom yep just like that so what and then
117:44 - we'll put a space an empty an empty
117:46 - print statement will just print nothing
117:48 - okay so so we have everything um here
117:51 - for two iterations and when we run this
117:55 - um what is
117:58 - wrong and
118:01 - people person is not defined oh okay
118:05 - well let's just get rid of this we don't
118:06 - need this here
118:09 - and uh yeah let's get rid of all this
118:15 - oops Yeah because that was giving us a
118:17 - problem because I changed this from
118:18 - person to person one this is um it
118:20 - wasn't working anymore so let's hit run
118:22 - and as you can see this Loop ran twice
118:25 - and it unpacked both of these tup okay
118:28 - so you can hold you can hold data
118:30 - structured data in tups and then you
118:31 - have very easy um structured access to
118:34 - them via unpacking so very useful thing
118:37 - in Python um I like using them a lot
118:39 - especially in Loops like this um down
118:41 - here in the for Loop uh but that's
118:44 - pretty much it for this um this video
118:46 - guys uh thank you very much for watching
118:48 - and I'll see you guys next time
118:50 - [Music]
119:00 - time hey what's up guys Aaron here from
119:04 - clever programmer and today we're going
119:06 - to be talking about something called
119:08 - sets in Python so let's get
119:13 - [Music]
119:17 - started so first of all a set is just
119:20 - like a list or a tuple as I explained in
119:23 - previous videos but a little bit
119:25 - different so we already um ate up all
119:27 - the options earlier right so list use
119:29 - brackets okay tupal use parentheses so
119:32 - what's the only thing left oh yeah
119:34 - braces so you might be thinking okay so
119:36 - what if I put something in braces and
119:38 - that's exactly what a set is in Python
119:40 - okay so a set is basically it's another
119:43 - way to group a bunch of things together
119:45 - in Python if you have a bunch of things
119:47 - together but what's special about them
119:49 - besides the braces um to to to code them
119:53 - out besides those is you cannot have
119:56 - duplicates in a set all right you cannot
119:59 - have any duplicates so if I had um the
120:02 - numbers one through 10 in the set and
120:04 - then I tried adding 10 again it would
120:06 - just ignore it and it wouldn't add it to
120:07 - the set but if I tried to add 11 then it
120:09 - would add it to the set um a set can
120:12 - grow and can grow and um get smaller as
120:16 - well I
120:17 - believe uh but so it's not like a tuple
120:20 - it's not like constrained like a tuple
120:22 - but you can so you can add things to it
120:24 - but you cannot have any
120:26 - duplicates and um it's also unordered
120:30 - that's the thing I was trying to
120:31 - remember it took me it took me a little
120:32 - bit it is unordered so you cannot
120:34 - iterate through it in any particular
120:36 - order so you cannot be like oh set at
120:38 - zero equals this set at one equals this
120:41 - like you did with list and tuples so
120:42 - that's another difference but the main
120:44 - thing is that it doesn't have any
120:45 - duplicates so one really cool thing you
120:47 - can do with sets is actually have a list
120:51 - that has duplicates in it of whatever um
120:54 - it is that you want and then change it
120:56 - to a list cast it to a list no sorry
120:59 - cast it to a set I talked about casting
121:01 - earlier so you can actually cast things
121:02 - to a set you can cast a list to a set
121:04 - and a set to a list and uh what that
121:06 - will do what I just said is if you have
121:07 - a list with duplicates cast it to a set
121:10 - the set will get rid of all the
121:11 - duplicates automatically and then you
121:12 - can cast it back to a list and all of a
121:14 - sudden you got rid of all all the
121:15 - duplicates in your list so that's a
121:17 - that's a very very common thing you do
121:19 - with sets but sets can also do a lot
121:22 - more um let's explain um what I just I
121:25 - just said though so let's say we have a
121:26 - set s equals
121:30 - um let's just have a set
121:34 - of um I don't know fruits let's go
121:38 - banana
121:40 - um actually let's see this
121:43 - blueberry and
121:45 - raspberry okay so we just have two
121:47 - different types of berries here so
121:49 - that's a set um we can print out a set
121:51 - just like uh list or Tuple I'll show you
121:54 - that real quick s it'll have braces see
121:57 - braces here not not brackets or
121:58 - parentheses but
122:00 - braces and we have two different um two
122:03 - different things here in the set it's
122:05 - unordered so you um actually yeah it's a
122:08 - it's a random order they they're made in
122:10 - a random order but as you can see here
122:12 - raspberry is a second element but when
122:13 - it's printed it actually prints this
122:15 - first like what what gives and then see
122:17 - here now it's It reversed its order so
122:19 - it just it it spits out a random order I
122:21 - don't know what determines that but the
122:23 - point here is that a set is just like a
122:25 - bag of things like if you had a bag of
122:27 - different things and you just Chuck them
122:29 - all in there it's just there's no order
122:31 - to it it's not like a nice sequential
122:33 - kind of um one thing two thing three
122:35 - thing four thing five thing okay um so
122:39 - let's just try to add something to this
122:41 - set okay so let's say we have we have
122:43 - blueberry and we have raspberry let's
122:44 - try to add something unique so this
122:46 - function that you can run on the set or
122:49 - any set is just add so you you uh write
122:52 - the set here so set. add and then you
122:54 - can add anything you want to this so
122:56 - let's add strawberry okay a third kind
122:59 - of berry and run this and as you can see
123:01 - I had a set here that has two um two
123:03 - types of berries and then I add a third
123:06 - type of Barry and which is different
123:07 - than these two so it added it and as you
123:10 - can see when I print it out it's um all
123:11 - three barriers are
123:13 - here okay you can also um add other data
123:18 - types it doesn't always have to be
123:19 - strings you can have a bunch of
123:20 - different things in there so we can just
123:21 - add four and then boom four pops up and
123:25 - as you can see in a random order let's
123:26 - run it again random order run it again
123:28 - random order okay um so that's the ad
123:31 - but let's try to add
123:35 - um let's try to
123:37 - add uh not strawberry so we're getting
123:40 - rid of this so now the set only has two
123:41 - things in it again um let's try to add
123:45 - blueberry
123:47 - okay
123:51 - oops if we run this this is actually not
123:54 - going to do anything because it's going
123:55 - to notice that this blueberry is already
123:57 - in the set and it's going to ignore it
123:59 - so let's hit
124:02 - run and as you can see nothing was added
124:04 - to it if this was a list then um the
124:08 - this element that we that we have here
124:10 - would have been added to this uh to the
124:12 - list as well but this is a set so it
124:14 - didn't get
124:16 - added
124:17 - um
124:21 - Let's uh actually I want to show you
124:23 - guys that that little duplicate example
124:25 - that's a pretty cool example so let's
124:27 - say we had a list of just numbers okay
124:30 - one one two two
124:33 - one ah if I can type it out 1 2 3 3 4 4
124:40 - four five okay so as you can see we have
124:44 - a duplicate three here and two duplicate
124:45 - fours here if we printed this out um you
124:48 - guys can believe me that uh it'll look
124:50 - just like this right if I printed out
124:52 - this list so I'm not going to bother
124:53 - printing that out okay but what if we
124:54 - wanted to get rid of all the duplicates
124:56 - what could we do well I said earlier
124:58 - that we can actually um put it in a set
125:00 - we can cast it to a set and then cast it
125:03 - back to a list and then we'll have a
125:05 - list I get rid of all the duplicates so
125:07 - let's just say um well casting first of
125:11 - all we go like this and then we pop the
125:14 - list in there so we can say um
125:21 - no duplicate set this is just a variable
125:24 - name equals set of L so what what this
125:28 - is going to be is going to be a set of
125:30 - this list without any duplicates so
125:32 - let's see what that looks like print no
125:36 - duplicate set okay and let's just
125:39 - comment these out so you don't get
125:41 - confused let's run this actually let's
125:43 - get rid of this whole thing I I'll think
125:45 - of a different example later so let's
125:47 - run run this okay so we have this list
125:49 - here 1 2 3 3 4 4 4 five and then we
125:53 - casted it to a set and then we printed
125:55 - out that set here and I as you can see
125:57 - we have a set because there's braces um
125:59 - but it got rid of all the duplicates
126:00 - okay there's no duplicates in here same
126:03 - deal if I had if I had um ABC and even
126:08 - double quotation marks ABC because those
126:10 - are equivalent and then I run this only
126:12 - one of these is going to be chosen a
126:14 - random one I
126:15 - believe let's run this and as you can
126:18 - see ABC
126:19 - is um is there U but it got rid of the
126:22 - duplicate here because these two strings
126:24 - are
126:26 - equivalent um but then you also want to
126:29 - uh cast it back to a list so we can just
126:31 - go like this simply like this no
126:33 - duplicate set and then we can say no
126:37 - duplicate list right that makes sense
126:41 - yeah I should I don't know I I I tend to
126:43 - use um L for like list and stuff it's
126:46 - probably not the best idea but it's a
126:47 - bad habit I'm trying to kick if you can
126:49 - avoid developing it in the first place
126:50 - I'm not doing a very good idea right now
126:52 - by being a bad example but maybe
126:54 - actually like name it of something like
126:57 - this okay list of numbers I don't me you
127:00 - just do this now I might as well do it
127:01 - now okay guys list of numbers like that
127:03 - so we have a list of numbers and let's
127:05 - get rid of this crap so that this makes
127:07 - sense we have a list of numbers here and
127:09 - then we create a set from that list of
127:10 - numbers with no duplicates and then we
127:12 - see what that set looks like um actually
127:14 - we don't need to see what the set looks
127:17 - like
127:19 - uh let's just get rid of
127:22 - these boom like that and then
127:26 - uh um and then we casted the set back to
127:29 - a list so now the this list here
127:32 - actually should be this list without any
127:35 - duplicates so let's see what that looks
127:36 - like and as as you can see we have a
127:38 - list here I rid of all the duplicates
127:39 - here so now what you can finally do is
127:42 - actually just change it so list of
127:44 - numbers you can actually just say is
127:46 - equal to no duplicate list list and what
127:49 - this will actually do is actually
127:51 - overwrite this one so list of
127:54 - numbers so what this does is let's say
127:56 - you had a list of all these numbers and
127:57 - you want to get rid of the duplicates
127:58 - and just completely delete them like
128:00 - let's say you had a bunch of names in a
128:01 - database and you had you had duplicate
128:03 - or a bunch of people in a database and
128:04 - you had duplicate records and you didn't
128:06 - care about the duplicate records you
128:07 - just delete them or you had a bunch of
128:09 - videos in a file on your computer and
128:11 - then but two of them are exactly the
128:12 - same and you don't need you don't need
128:13 - the duplicates you can just delete them
128:15 - okay if you don't need those you could
128:17 - do something like that and
128:21 - um you could do something like that and
128:23 - uh get rid of all the duplicates that
128:25 - might be something actually very useful
128:26 - for uh this new course we have coming
128:28 - out called how to automate stuff with
128:29 - python um if we're going through file
128:31 - directories and deleting duplicates and
128:33 - whatnot but uh yeah sets might actually
128:35 - come into play there just something to
128:36 - note there um but yeah so those are sets
128:39 - uh there are also some pretty
128:41 - cool um functions and methods you can
128:43 - run on sets uh because are you guys
128:46 - familiar with uh ven diagrams let's let
128:48 - me pull up a uh image here so Vin
128:52 - diagrams okay diagrams so the these
128:56 - things here okay you you see this thing
128:58 - here you remember these two circles you
129:00 - might have learned this in school and
129:00 - it's like oh there's like thing in set a
129:03 - thing in set B and then there's an
129:05 - overlap this is actually what sets are
129:07 - for okay this is what um sets are used
129:10 - for in Python so you can actually have
129:11 - sets of things like this and do logic
129:13 - like this like okay there's all these
129:15 - people and then or um let me think of a
129:17 - better example
129:18 - um actually okay yeah I thought of an
129:20 - example let's go back here let's get rid
129:22 - of all this okay remember sets have
129:24 - braces so we're going to be we're going
129:26 - to be creating a
129:28 - uh a um we're going to have two
129:31 - different libraries okay so let's have
129:33 - Library one equals a set of
129:38 - uh I don't know Harry
129:41 - Potter Harry
129:43 - Pooper I'm actually five
129:46 - I I'm not 24 I'm five uh can't multitask
129:52 - uh Hunger Games sure Hunger Games and
129:54 - Lord of the Rings okay so we have a one
129:57 - set here and then we have
130:00 - Library 2 and then we're going to have a
130:03 - different set of books here so we're
130:04 - going to have Harry Potter
130:07 - okay and we're going to have uh
130:10 - Romeo Romeo and Juliet all right so we
130:14 - have these two separate libraries that
130:16 - have a bunch of books in them um these
130:18 - are just strings just using strings to
130:19 - like signify
130:21 - books and now we so we have two separate
130:23 - sets and we want to start doing this
130:25 - vend diagram kind of logic so there's a
130:27 - bunch of different functions you can run
130:29 - okay on on sets to figure out uh the
130:31 - overlaps and whatnot so let's let's
130:33 - start with um I already went over add
130:35 - right I believe you can you can run yeah
130:38 - yeah I did I did you can add things to a
130:39 - to a set by just going like this and
130:41 - it'll only get added if it's not already
130:43 - in the set but first let's uh let's try
130:46 - this so we let's we have Library one
130:48 - okay and then we could um we first of
130:52 - all you can just add two sets together
130:54 - okay you can add two sets together to
130:56 - put it all together but also it'll get
130:57 - rid of duplicates so you notice here how
130:59 - there's Harry Potter in both of these
131:01 - sets so one of these will actually get
131:04 - um ignored and then when we add these
131:07 - together it's actually going to have
131:08 - everything in here in this one plus
131:10 - Romeo and Juliet it's just going to
131:11 - ignore this Harry Potter or or it's
131:13 - going to ignore this Harry Potter what
131:14 - what did I do um so let's just try that
131:17 - so this the function is called Union
131:20 - Union is just a word um that you use
131:24 - um in in math when it comes to vend
131:27 - diagrams that that kind of math I forgot
131:29 - what it's called Uh discret math or
131:31 - something um it's uh unrelated but you
131:35 - can you can add two sets together and
131:37 - that's what union does so Union just
131:38 - means you're going to Union them
131:39 - together and Union okay so Library 1
131:43 - Union Library 2 or Library 2 just like
131:48 - that okay and
131:52 - um we'll just call it the town okay
131:55 - let's uh yeah I'm going to say that
131:57 - there's two libraries in a town so um
132:00 - all book okay how about this all books
132:03 - in town that makes sense so if we have a
132:05 - town with two different libraries and we
132:07 - want to get all the books in the town
132:08 - without any duplicates then we can get
132:10 - the entire book list by just doing
132:11 - something like this you could go um
132:13 - Library 1 Union Library 2 or you could
132:15 - do Library 2 um Union Library 1 it
132:17 - doesn't really matter because it's the
132:19 - same same operation both ways let's hit
132:22 - run there I didn't print it out uh print
132:26 - all books in town now let's hit run and
132:31 - as you can see oh let's go here now now
132:33 - as you can see it created a set um
132:36 - combining both libraries but it got rid
132:39 - of the duplicate Harry Potter so that's
132:41 - what union does and the power of a set
132:44 - um there's some other other methods and
132:46 - functions I'm going to go over to so so
132:48 - um instead of Union what else do we have
132:51 - I had have it written down here on the
132:52 - side um
132:55 - okay uh now we are going to if um okay
132:59 - let's say we wanted to find the books
133:02 - that were at both libraries okay so we
133:04 - could be like okay
133:06 - um like if you if you just want to find
133:09 - out books that are at both libraries so
133:10 - at both libraries I don't actually know
133:13 - why you would want to do this in real
133:14 - life like why do you want to know which
133:16 - books or maybe okay yeah I guess that
133:18 - makes sense if you wanted to be like
133:19 - okay if this one Library burns
133:22 - down yeah it took a dark turn but if one
133:25 - Library burnt down what books are you
133:27 - going to have in other libraries as well
133:31 - okay uh that are like backed up then you
133:33 - can so you can actually just run this uh
133:36 - function instead of Union it's going to
133:38 - be
133:38 - intersection okay so this is uh
133:41 - intersection this means what is it both
133:43 - in both
133:45 - sets so what you're going to get here is
133:47 - we're going actually going to get um
133:50 - Harry Potter because this is the only
133:52 - thing that is in both sets everything
133:53 - else is going to be ignored this is
133:54 - going to be ignored and this is going to
133:56 - be ignored but Harry Potter is the
133:58 - intersection so like when you have a ven
134:00 - diagram remember you have some things in
134:02 - one Circle another thing another Circle
134:04 - you would have Hunger Games and Lord of
134:05 - the Rings on one side and then Romeo and
134:07 - Juliet on the other side and you'd have
134:09 - Harry Potter in the Middle where they
134:10 - where they um overlap you know what I
134:13 - mean um so that that's what's going to
134:16 - happen let's just just run it and you
134:18 - can see how it
134:20 - uh at both libraries how it
134:23 - looks as you can see we get a set of
134:26 - just Harry Potter because that's the
134:27 - only thing that was common here if I if
134:29 - I also had a Hunger Games down here then
134:30 - this would be Harry Potter and Hunger
134:32 - Games okay you're getting the
134:34 - intersection um another another thing
134:36 - you can do is uh actually get the
134:38 - difference what difference does is it
134:41 - tells you everything in this set that's
134:42 - not in the other set okay so um if we
134:47 - have Library one which has Harry Potter
134:49 - Hunger Games and Lord of the Rings and
134:50 - then we use the difference with Harry
134:52 - Potter R Romeo and Juliet then it's
134:54 - going to ignore the Harry Potter and
134:56 - actually just get the difference we're
134:57 - actually only going to get Hunger Games
134:58 - Lord of the Rings or only get Romeo and
135:00 - Juliet we're not going to get all of it
135:02 - just just this part or just this part
135:04 - you're getting the difference like
135:05 - what's different about the sets that's
135:06 - why you're getting the difference okay
135:08 - so let's just call this
135:13 - um uh diff okay diff equals uh Library 1
135:18 - difference Library 2 so let's run this
135:21 - and see what pops out so as you can see
135:23 - Lord of the Rings and Hunger Games pop
135:24 - out pops out because we called Library 1
135:27 - and we want to see the difference with
135:28 - Library 2 because Library 2 has Harry
135:30 - Potter in it then we ignore it because
135:32 - um it has this in common so it just gets
135:34 - this if we reverse this then you would
135:37 - actually get Romeo and Juliet instead of
135:39 - hungry GS and Lord of the Rings you see
135:41 - how that
135:41 - works so yeah um these are pretty much
135:44 - sets uh there's a bunch of functions
135:47 - that you can use there's a bunch more
135:48 - I'm just going over all the all the main
135:49 - ones in these videos but um those are oh
135:53 - there's actually one more called clear
135:55 - but I'll leave that up to you to go
135:56 - figure out what that does uh look in the
135:57 - python documentation for sets and see
136:00 - what um the function do CLE does uh
136:03 - probably you probably already guessed it
136:05 - yeah it clears out the set and make it
136:06 - completely empty um but go and try it
136:08 - out yourself maybe code it up but those
136:10 - are sets in Python uh very useful for
136:13 - getting rid of duplicates remember that
136:14 - that's one of the most common uses of it
136:16 - but also if you're doing things like
136:18 - you're doing like some weird logic
136:19 - things or running some like um really
136:22 - weird algorithms like I I've done some
136:24 - before my schooling but they're they're
136:26 - very handy thing to know um know that's
136:28 - uh that's that sets are the braces one
136:31 - and that they're getting rid of
136:32 - duplicates I probably said that 300
136:33 - times by now but yeah getting rid of
136:35 - duplicates that's the main use that I
136:36 - know um sets are used for so that's it
136:39 - for this video guys uh thank you for
136:40 - watching and I will see you guys next
136:42 - time
136:46 - goodbye
136:48 - [Music]
137:00 - [Music]
137:46 - n
138:05 - [Music]
138:10 - so let's just create a dictionary all
138:13 - right let's just call it dict dictionary
138:16 - so the way a dictionary works is instead
138:19 - of having elements that you can index
138:20 - into with numbers like in a list if you
138:23 - guys don't remember remember if you have
138:25 - a
138:26 - list then you would index it like this
138:28 - or something listed zero listed one
138:30 - listed two Etc instead of doing
138:32 - something like that in a dictionary you
138:34 - can actually specify what your your
138:36 - index names are so and these can be uh
138:39 - anything actually but usually they are
138:41 - strings let's just show you that so we
138:44 - could say um let's say we have actually
138:48 - Let's do an example let's say we have a
138:50 - um let's say we have some groceries
138:52 - okay you could uh put
138:56 - some uh things here so you could put
138:59 - bananas and strings and then have a
139:00 - colon here and then have a number okay
139:03 - so this is what a one element dictionary
139:06 - looks like there's a little thing here
139:07 - on the left of a colon um usually a
139:10 - string and then a colon and then another
139:12 - value over here okay so that's one
139:15 - element in a dictionary uh two elements
139:18 - would look like this
139:21 - oranges three all right I think you guys
139:24 - understand by this point so this is the
139:25 - first element of the dictionary and this
139:27 - is the second element so now that you've
139:29 - seen what it looks like uh I'll explain
139:32 - so a dictionary is a way you can
139:36 - organize data in a more organized manner
139:39 - uh that was a little redundant but
139:41 - pretty much uh you can you can say that
139:43 - these two things for each item in the
139:45 - dictionary these two things are
139:46 - associated so this on the left is
139:48 - actually called a key this on the right
139:50 - is actually called a value this is
139:51 - called a key value pair uh they have
139:54 - these in every prr languages U you might
139:56 - know them as Maps or hash maps and other
139:57 - program languages but in Python they're
139:59 - called
140:00 - dictionaries um same thing here this is
140:02 - a key and this is a value and these are
140:04 - a pair these will always be together so
140:06 - what's cool about dictionaries is that
140:08 - if you have a dictionary since and we do
140:11 - uh we have a uh dictionary called
140:14 - groceries instead of if I wanted to get
140:16 - the first element here
140:18 - bananas and five um I couldn't I can't
140:21 - just stick in zero like this because
140:22 - that's not going to work all right what
140:25 - you actually need to do is put in
140:28 - bananas so you see how we're indexing
140:30 - into this dictionary with the key okay
140:33 - we need the key that's why it's called a
140:35 - key you need the key to get the value so
140:38 - let's run this and see what
140:41 - happens or let me cheuck in a print
140:43 - statement first uh let's see what
140:45 - happens as you can see five popped up
140:48 - which is this five right here because we
140:50 - used bananas here um to as the key then
140:53 - it gets its Associated value which is
140:55 - five if we put in oranges here you can
140:57 - believe me that three would pop up um go
140:59 - try it yourself if you don't believe me
141:01 - but yeah I'm pretty sure most of you can
141:02 - U make that conclusion yourself it'll
141:04 - work the exact same way as this bananas
141:06 - did all right so that's how you um
141:09 - that's how you index into a dictionary
141:12 - using using this notation here uh but
141:15 - you might be asking okay well in a list
141:18 - if I put in a number that's not in the
141:20 - in the list like if I had a list of
141:21 - length five and I put in an index of
141:23 - like 300 then you're going to get an
141:25 - error same deal with um same deal with
141:28 - dictionaries if you put in something
141:30 - like uh like a key that doesn't exist in
141:33 - dictionary then you'll actually get a
141:35 - key error see a key error right here it
141:38 - says hello is not Hello is not in the
141:40 - dictionary which makes sense so actually
141:42 - instead of using this um bracket
141:45 - notation here kind of like indexing in
141:47 - into a list but you're indexing into a
141:48 - dictionary there's actually a method
141:50 - called getet which does the exact same
141:52 - thing but if the key is not found in the
141:56 - dictionary then it won't give you an
141:58 - error it'll just say none it'll just
142:00 - spit on a nun type so you'll avoid this
142:02 - red text of Doom and death and um
142:06 - everything will work fine so if I put in
142:08 - B actually let's put in oranges just
142:09 - show you now okay bananas again bananas
142:12 - just keep it simple and cons or keep it
142:14 - consistent if I run this you're going to
142:16 - get five just like when we use brackets
142:18 - okay uh but if I put
142:21 - hello which isn't a key in the
142:23 - dictionary and I hit run then you just
142:24 - get none instead of the Big Air so
142:26 - that's a nice little method that you're
142:27 - given it just does a little safety check
142:29 - within this get method it probably does
142:31 - the bracketing itself into the
142:32 - dictionary but it says if it's not in
142:34 - the dictionary then return none rather
142:35 - than than giving us an error so that's
142:37 - little that's a nice thing to use um
142:39 - just you can if you know it's in the
142:41 - dictionary you can just use the bracket
142:42 - notation but if you don't know then it's
142:45 - better to use get it's just safer okay
142:48 - so those are some basics of dictionaries
142:50 - uh dictionaries are very very good
142:53 - for um these kinds of things uh maybe
142:56 - another example we have is maybe we had
142:58 - a a contact list okay so if you had a
143:01 - contact or
143:03 - contacts let's say you had a bunch of
143:05 - friends and they all had phone numbers
143:07 - okay how would you do that with a list
143:09 - how would you associate a phone number
143:11 - with friends I mean you could have like
143:13 - one list called names and then one list
143:15 - called phone numbers and then just have
143:16 - the corresponding elements all be uh
143:19 - each other but that's just kind of silly
143:21 - because um it's like two separate lists
143:24 - and if one gets screwed up or there's a
143:25 - mistake in one then they're not then the
143:27 - entire thing's mix messed up like if one
143:29 - thing get if like the first name got
143:31 - deleted then everything's going to shift
143:32 - over and it's just a big mess so that's
143:34 - where dictionaries come into play okay
143:37 - you could have something like this and
143:38 - I'm just going to uh format it
143:40 - differently so that it's nice nicer to
143:43 - look at uh let's just say you had Joe as
143:45 - a friend okay and his phone number was 1
143:48 - 2
143:49 - 3 4 5 6 7 all right and then you had
143:55 - Jane and her phone number was
143:59 - 987
144:01 - 6543 okay so this here shows
144:04 - us um that Joe and this phone number are
144:08 - corresponding because this is the key
144:10 - and this is the value same with Jane so
144:12 - now we can
144:14 - actually just
144:17 - um index into this using the name and we
144:23 - can get so if we wanted to get Joe's
144:24 - phone number we would just put in Joe
144:26 - into contacts and um what's the issue
144:29 - here uh oh I forgot a comma yeah you
144:32 - need a comma to separate all of the
144:34 - dictionary um
144:36 - values uh what is happening
144:42 - here oh silly me so the format adding
144:47 - was fine here okay but um obviously I
144:50 - can't have these dashes in these numbers
144:52 - okay python doesn't know what the heck
144:53 - this is it thinks it's 987 well actually
144:56 - no python thinks it's 987 minus
144:59 - 6543 and uh and python thinks that this
145:03 - is 123 minus 400 4005 4567 what I
145:08 - actually need is just the phone number
145:11 - like that okay without the dash stupid
145:13 - or we could even use strings okay we
145:16 - could actually do this why why don't we
145:18 - do this this makes more
145:22 - sense okay hit
145:27 - run there we go and this string gets
145:29 - given back to us when we get Joe and if
145:31 - we want to Jane you better believe it we
145:34 - get her phone number too okay so that's
145:36 - pretty cool
145:37 - right this allows us to structure data
145:41 - with any name any key we want and then
145:43 - put anything we want over here the real
145:45 - the real power of Aries though is when
145:47 - we actually start putting a bunch of
145:49 - different things in here so let's this
145:50 - is a contacts list right they might have
145:52 - more than just a phone number so if they
145:54 - have more than just a phone number then
145:56 - why don't we use a list here right you
145:59 - could just use a list like
146:00 - this okay so you have a phone number
146:03 - here and then you have an email address
146:06 - so uh email address email address at
146:11 - website.com
146:13 - this got to be a
146:15 - stram
146:18 - okay at website.com and same deal here
146:21 - you just put a
146:25 - [Music]
146:28 - list whatever
146:31 - M
146:32 - web.com good enough uh some weird
146:35 - examples but you guys get the idea so
146:37 - you're able to now associate this key
146:40 - this name of Joe with all of these
146:43 - things in this list all right uh this is
146:45 - something that is very very um powerful
146:48 - with
146:49 - dictionaries um you're able to basically
146:51 - structure the data in any way you want
146:52 - group it together in any way you want
146:54 - and of course this this list can be of
146:55 - any length you want so you can actually
146:59 - put as many contacts you could have a
147:00 - phone number you could have a email
147:02 - address you could have a LinkedIn
147:03 - account you could have a Facebook you
147:04 - could have a everything Instagram
147:06 - account Snapchat Etc um it never ends so
147:08 - you're basically allowed infinite
147:11 - flexibility when it comes to defining
147:12 - what it means to have a contact of Joe
147:14 - you can even have his home address his
147:16 - billing address
147:17 - uh everything
147:19 - okay um uh but but what about this you
147:22 - could even make this better and actually
147:25 - make this a dictionary itself right so
147:29 - this is a dictionary and then you have
147:31 - Joe and then within this its value is
147:33 - actually a dictionary you see where I'm
147:35 - going with this right so you could
147:36 - actually have um phone number or just
147:40 - put phone and then boom you have that
147:43 - there
147:45 - and uh email
147:48 - okay and now I have a dictionary of
147:51 - contacts with his name and then for each
147:53 - person there's a dictionary associated
147:55 - with that person that has all his
147:56 - contacts so his phone is this his email
147:59 - is this and so on and you can you can
148:02 - keep doing these nested dictionaries as
148:03 - much as you want so uh this versus this
148:08 - you can see how this is a little bit
148:09 - more descriptive and um you can really
148:11 - see the power of dictionaries here
148:13 - because try representing all these ideas
148:16 - like Joe has a phone number of this and
148:17 - an email of this and Jane has a similar
148:20 - thing with only lists think about it how
148:23 - would you how would you coherently and
148:26 - in a smart and intelligent way um
148:28 - represent that and with a list you just
148:30 - can't so dictionaries are good for that
148:33 - uh some other examples you could use are
148:35 - you could use dictionaries to do things
148:38 - like count the most common words in a
148:39 - sentence uh this is a little example
148:41 - that I I learned when I was learning
148:43 - dictionaries myself uh many years ago in
148:45 - my first python class at University but
148:49 - what if you had um a a dictionary called
148:55 - word count word counts okay and let's
148:58 - say you just wanted to count all the
149:00 - words in a string so or a sentence which
149:05 - is a string okay so let's just
149:08 - say I like the name
149:13 - Aaron because the name
149:17 - Aaron is the
149:19 - best all
149:23 - right so we can see this this sentence
149:26 - here and let's say we wanted
149:28 - to um actually let's get to simplify
149:31 - this
149:32 - um let's say we wanted to count all the
149:35 - words here
149:37 - okay um and you want to count the the
149:40 - how many times each
149:41 - word um occurs in this dictionary uh
149:45 - something you can do a Diaries is you
149:47 - could actually uh it iterate through
149:49 - this entire string well actually you'd
149:51 - have to split this up into a list so
149:52 - that each word is its own element um
149:54 - there's a method for that uh called
149:56 - string do um I believe string. split and
149:59 - then you would uh get all these words in
150:01 - a list and then you can iterate through
150:03 - all them and then every time you see a
150:05 - word you add it to the dictionary and
150:06 - every time you see it again you can up
150:08 - the count so it would end up looking
150:09 - like this I'm not actually going to code
150:11 - this out because uh there there's a lot
150:13 - of code there uh you guys can do that if
150:14 - you want but this is what the end result
150:16 - would actually look
150:17 - like um you would have I okay would be
150:21 - one you would have
150:24 - like which would also be one all right
150:28 - and then you would have
150:30 - V which would be uh why is this double
150:33 - quotes you would have V and that would
150:37 - actually be three as you can see it pops
150:39 - up three times V here V there and V
150:42 - there so this is the idea that I'm
150:44 - getting so you're able to go in and
150:47 - every time you see um you're iterating
150:49 - through these every time you see a word
150:51 - and you see that it's in the dictionary
150:52 - then you can just go into this
150:53 - dictionary by indexing like for the when
150:56 - uh this word the whenever you see it you
150:58 - could have you could have just gone like
150:59 - this word counts at
151:02 - the um and then you just add one to it
151:05 - so whatever number is there you would
151:06 - just uh add one to it okay
151:11 - um you would have to actually do it this
151:14 - way so you would just say okay the new
151:17 - value of this thing here in the
151:18 - dictionary is whatever the old value was
151:21 - plus one okay and then you would every
151:23 - time you see the then you would chuck
151:26 - that in okay that's the idea so
151:29 - dictionaries are very useful for these
151:30 - kinds of things it keeps it very nice
151:32 - and organized you can see here is
151:33 - counting how many occurrences of each
151:34 - word there are imagine if you had an
151:36 - entire book you could actually go
151:37 - through this and then sort it by these
151:39 - these values to see which words were
151:41 - used the most and which were used least
151:43 - okay and sorting a dictionary that
151:45 - brings me to to a different um another
151:48 - thing I want to talk to you guys
151:50 - about is actually um some methods you
151:53 - can use in dictionar so we have some
151:55 - dictionaries here but let's say you
151:57 - wanted to get all of the data within the
151:59 - dictionary back out so there's actually
152:01 - three methods here um I am going to
152:04 - print them out here in a comment so you
152:06 - can see what they look like uh it's
152:08 - called dict dict do
152:10 - items okay uh dict dots uh keys and dict
152:17 - do values all right so we have three
152:20 - methods here and I'm just going to
152:21 - explain what they all do verbally and
152:22 - then I'll show you so here this dict
152:24 - you're just saying you have a dictionary
152:25 - here so that would be word counts or
152:27 - contacts you would stick that where this
152:28 - dict is and then if you call Dot items
152:30 - on it what you'll actually get is a list
152:32 - of TS and each Tuple is a key value
152:36 - pair all right you will call do items
152:40 - and you'll get a list of two PS and each
152:42 - tle is a key value pair I said it twice
152:44 - so that you guys can let that snc in if
152:46 - you didn't get the first
152:47 - time um this one same deal but you will
152:50 - get a list of just the keys so you would
152:53 - get I like and the for this and if you
152:56 - called dick. values you would get a list
152:58 - of only the values one one and three
153:00 - okay so this gets you a list of two PS
153:02 - of both this gets you a list of just the
153:05 - keys the the orange strings here and
153:08 - this um would get you just the green
153:10 - values the the numbers or these could be
153:12 - lists or dictionaries themselves you
153:13 - know what I mean it can be whatever you
153:15 - want but these are the three methods
153:18 - let's just see what this looks like uh
153:20 - let's just do word count okay so um word
153:25 - counts do items okay let's just print
153:31 - this and close this off print it and as
153:35 - you can see it says dict items and then
153:38 - you have this list in here of T PS This
153:40 - highlighted portion you have a list of a
153:43 - tle so I is one like is one and V is
153:45 - three okay okay if you wanted to make
153:47 - this actually a list instead of a dict
153:48 - items thing apparently if you call items
153:50 - you get a dict items ad dict items
153:52 - object but I'm pretty sure you could
153:54 - actually just um cast this to a list
153:59 - just like this hit run and bam yeah see
154:02 - you just get the list out so that's
154:03 - that's uh a very useful use case of uh
154:07 - casting I think I went over that in a
154:08 - video a few days ago um or a few minutes
154:11 - ago if you're watching this if you're
154:13 - Bing watching this and trying to Learn
154:14 - Python for the first time or whatnot
154:16 - but yeah so you can actually cast that
154:18 - to a list to actually get the list out
154:19 - of it so that's that uh let's try the
154:23 - next one now so we have uh that we have
154:28 - keys um same deal is going to happen if
154:30 - I delete this you're going to get that
154:31 - dict items object in so I'm just going
154:32 - to leave this list cast in and just
154:34 - change this so instead of calling items
154:36 - we're going to call keys and you guys
154:38 - can probably predict what we're going to
154:39 - get you get all the keys I like and V
154:42 - all right and same deal with values I'm
154:45 - just just going to show you for
154:47 - completeness sake but I'm pretty sure
154:49 - you guys understand what's going to
154:50 - happen you're going to get these numbers
154:51 - here 1 one and three okay so that's uh
154:55 - three very
154:57 - common uh methods in Python uh for
155:01 - dictionaries um but you also have a few
155:03 - more like what if you wanted to
155:05 - delete something from a dictionary okay
155:08 - if you wanted to to delete something
155:10 - from a dictionary how would you do that
155:12 - well there's a there's a method for that
155:13 - as well so let's say we wanted to delete
155:16 - um okay word counts
155:19 - equals um oh what am I doing word word
155:23 - counts dot uh pop okay so Pop um what it
155:28 - does it's a little bit of a weird a
155:30 - weird word choice in my opinion I'm used
155:33 - to it because I've been programming for
155:34 - a long time but when you pop something
155:36 - you are like you are taking one item
155:39 - from a group of things so a dictionary a
155:41 - tuple a list or whatever and then you're
155:42 - just popping one off so you're pop
155:44 - usually the last one or the top pop one
155:46 - or whatever you pop off one element
155:48 - that's why it's called pop instead of
155:50 - remove or something um but you can
155:53 - actually pop something out of a
155:55 - dictionary by calling its key so this
155:56 - would actually completely get rid of
155:58 - this thing if I if I ran this or I am
156:01 - running this I just haven't run the code
156:02 - yet but this line of code will actually
156:04 - delete this from the dictionary and then
156:06 - this will only be in the word count
156:08 - dictionary following here likewise if I
156:10 - use like then it'll delete it'll delete
156:13 - like and if I use Z then it'll delete
156:15 - delete V okay uh let's just try that so
156:19 - let's run
156:23 - this and then so print it before delete
156:26 - V and then print it after okay so I'm
156:29 - going to print the dictionary you're
156:30 - going to see the whole thing I'm going
156:31 - to going to pop one of them off and then
156:34 - I'm going to uh print the dictionary
156:36 - again so as you can see V has
156:38 - disappeared because we popped it off all
156:40 - right so that's what pop does that's how
156:41 - you remove a
156:44 - um uh remove something from a dictionary
156:49 - and one cool thing is it's called pop
156:51 - because this here is actually this I me
156:54 - I mean this this little thing so if we
156:55 - actually printed this um it's actually
156:58 - popping it's not just deleting it it's
157:00 - actually popping it off and retrieving
157:02 - it from the dictionary for us and then
157:04 - um allowing us and then getting rid of
157:06 - it so let's say you had a bunch of
157:07 - contacts you could be like okay retrieve
157:09 - and delete
157:10 - contact then you in this contact
157:12 - dictionary you could like pop off one of
157:15 - the things it would delete it from the D
157:17 - um from the thing and then it retrieves
157:19 - it so that you can like display like oh
157:21 - this person was deleted blah blah blah
157:22 - blah or something like that so as you
157:24 - can see um it gets this value actually
157:27 - doesn't get the entire thing I guess I
157:30 - guess um when you pop it then it only
157:32 - Returns the value not the key as well
157:35 - but um yeah you're able to get the the
157:38 - value of this key back from this entire
157:41 - expression here all right so that's pop
157:44 - now there's also a way you can just
157:46 - um get rid of you can pop off a random
157:48 - one so instead of actually specifying
157:50 - which one you want with the key you can
157:51 - just call Pop item like this so let's
157:53 - say word count. pop
157:58 - item and then um print word counts oops
158:04 - print word counts like that and let's do
158:06 - this twice boom boom so this is actually
158:09 - going to pop a random thing from this it
158:13 - is going to it's either going to pop
158:14 - this one or this one or this one it's
158:16 - just random um I don't know how the
158:17 - computer determines that but it's just
158:18 - random so it's just if all you wanted to
158:20 - do was just get rid of one thing then
158:23 - you could um do it that way or even like
158:25 - you could do you could run pop item
158:27 - three times and each time you go through
158:29 - it remember how you got remember how we
158:30 - got this three back when we when we just
158:32 - Ed the regular pop method here using the
158:34 - key then we got three back if you called
158:36 - pop item three times you would
158:37 - eventually get all these numbers in a
158:39 - random order but let's just say that's
158:40 - all you like you had to sum up all these
158:42 - things you could actually do it this way
158:44 - you could just pop item three times and
158:46 - then keep adding one to one um adding
158:48 - these numbers together so 1 plus 1 plus
158:49 - 3 you would eventually get five
158:51 - something like that um I can't think of
158:52 - a good example right now but I'm sure
158:54 - that would be useful in
158:56 - something dictionaries are very robust
158:58 - and they can be applied to many
158:59 - different problems um that's why they're
159:01 - so beautiful uh they're just so flexible
159:03 - and juicy and just sexy you know but if
159:08 - I keep running
159:09 - this um it doesn't appear to be random
159:12 - uh perhaps I'm wrong with that uh I sore
159:14 - it was supposed to be random
159:17 - I don't know maybe I'm
159:19 - wrong um I will double check that one
159:22 - second
159:24 - guys all right I'm back you guys um so
159:27 - yeah I actually misunderstood when I was
159:28 - reading up on this method here refresh
159:30 - when I was reading this and refreshing
159:31 - it um it says it pops an arbitrary
159:34 - element not a random element and the
159:36 - distinction there is um pop item will
159:41 - well pop pop will pop what you the key
159:44 - you give it the exact element that you
159:45 - you specify but pop item will just pop
159:47 - off the last one of the dictionary okay
159:50 - and since the last one could be anything
159:51 - you want it seems to be be consistent
159:54 - here every time because that's the way
159:55 - we created it here um here this one this
159:57 - one and this
159:59 - one um but because yeah because it's in
160:03 - this order it's always going to pop the
160:04 - last one but uh sometimes if you oh
160:07 - that's one thing I forgot to say yeah
160:08 - actually you can actually add to a
160:09 - dictionary too simply by um let's go
160:13 - over that real quick because I'm going
160:14 - to need that to continue so put this on
160:15 - hold here okay put this ID on hold and
160:18 - we are going to go uh print word counts
160:22 - how did I forget this uh and uh word
160:27 - counts you can actually this is how you
160:30 - would add to a dictionary you can
160:31 - actually specify let's say uh see Aaron
160:34 - pops up twice in this word count right
160:36 - so let's put Aaron Aaron like that and
160:38 - then we know it pops up twice so let's
160:40 - just put two so what this will actually
160:42 - do is it'll create the key Aon here and
160:44 - then create the value value two and
160:46 - it'll actually pop up in this word um
160:48 - counts dictionary so let's have two
160:50 - print statements
160:52 - here and get rid of these so we're not
160:54 - confused right so what what this is
160:57 - going to do is it's going to print this
160:58 - dictionary then it's going to add this
160:59 - to the dictionary and then print it
161:00 - again so we can see it so let's do that
161:02 - and as you can see we have uh the
161:04 - dictionary here and then we added Aaron
161:06 - with a value of two to it so um that's
161:09 - how it got added to the
161:11 - dictionary so that means uh whenever
161:13 - you're adding to a dictionary um it it
161:16 - doesn't always add in the same spot it
161:17 - might add to the end or somewhere else
161:19 - um because the dictionary doesn't
161:20 - actually have an order unlike a list or
161:22 - a tupo um I don't think I actually
161:25 - mentioned that earlier but yeah
161:26 - dictionary doesn't have a order because
161:29 - um because you can index in as a key
161:32 - okay and it doesn't matter where the key
161:33 - in the list is whenever you use that key
161:35 - it's always going to be there so a
161:36 - dictionary is just kind of like a bag of
161:38 - things a bag of values that have like
161:40 - labels on them which is the keys and
161:42 - then you can just like hey just find
161:44 - this key and then it gives spits out the
161:45 - value for you so there's no specific
161:47 - order all right so that's that's how you
161:49 - add to a dictionary but now let me go
161:51 - back to pop items so I was saying
161:52 - earlier that pop item will pop an
161:54 - arbitrary one so it it um doesn't pop a
161:56 - random one it just pops I think the last
161:58 - one in the dictionary and then whatever
162:00 - happens to be the last one it pops that
162:01 - one and then you get something back so
162:03 - let's see what um this gives us back I'm
162:06 - not actually sure if this gives us just
162:08 - the value or the key and the value um so
162:11 - let's just try it all right so comment
162:13 - these out hit run and as you can see it
162:16 - actually gives us a twole so you
162:18 - remember how pop only gave us three it
162:20 - only gave us the value three instead of
162:22 - this together but when you do pop item
162:24 - it actually um pops a
162:26 - arbitrary um element in the OR entry in
162:31 - the dictionary as a tupal so you get the
162:32 - key and the value which makes sense
162:33 - because when you're popping you're
162:34 - actually specifying the key so you're
162:36 - like okay I know I want this key and I'm
162:38 - going to get that value associated with
162:39 - that key but when you pop item you need
162:41 - to keep it together okay and then you
162:43 - can of course just you can just index
162:45 - into this this tle at zero for the key
162:46 - and at one for the um value if you
162:49 - wanted to so that's pop item all
162:52 - right uh let's just go like this dict
162:55 - pop
162:56 - item
162:58 - and continue
163:01 - on uh we don't need these
163:04 - either so that's how you um I'll leave
163:07 - I'll leave this as a chunk together
163:09 - because that's kind of nice you have a
163:10 - dictionary and then you're adding to the
163:11 - dictionary here
163:13 - manually all right
163:20 - uh the last thing I wanted to go over
163:23 - was um dict do clear so what this will
163:27 - do is it'll literally just wipe out the
163:29 - entire dictionary so that whatever your
163:30 - dictionary has your dictionary will just
163:33 - look like this an empty dictionary with
163:35 - absolutely nothing in it okay so if I
163:38 - called uh word counts.
163:41 - CLE all right this is just going to make
163:44 - word counts equal to nothing all right
163:47 - nothing absolutely nothing and um that's
163:50 - good if you just want to delete it I
163:51 - mean not even delete it you're just
163:53 - clearing the dictionary I don't know why
163:54 - you would want to do that but it's there
163:56 - if you need it um I'm sure it's useful
163:57 - in many cases because yeah how else
163:59 - would you go and delete you're not going
164:01 - to pop it like 27 times or whatever if
164:03 - your dictionary is really long or 27 um
164:06 - entries long you're just going to clear
164:08 - it instead of doing anything else or
164:09 - just override it with a new dictionary
164:11 - but yeah that's the last one I want to
164:12 - go over um like I mentioned
164:16 - oh there's actually one last little uh
164:18 - thing I want to mention before I finish
164:20 - off this video
164:23 - but um like I said dictionaries are
164:26 - actually unordered so there's no
164:29 - specific order to them but there is a
164:32 - module in Python called ordered
164:34 - dictionary which actually keeps the
164:37 - order of a dictionary for you all right
164:39 - so I'm going to import that here so it's
164:41 - from
164:43 - collections um collections is just a
164:45 - package I believe um
164:48 - import ordered dick
164:52 - okay order dick just like that so what
164:55 - this line is saying from this
164:57 - collections um package in Python so this
165:00 - is just something in Python there's a
165:01 - bunch of um things in here um that allow
165:05 - you to do different thing oh it's I'm
165:09 - not going to explain this now if you
165:10 - don't understand this look it up on
165:12 - Google if you're interested look up the
165:13 - from and import but when you import
165:15 - something you're importing a new kind of
165:17 - data type here okay a special data type
165:19 - called order dict so what an order dict
165:21 - is it'll actually allow you to keep an
165:23 - order in a dictionary and the order that
165:25 - the dictionary has is the order that
165:27 - things are added to the dictionary the
165:28 - order dict so if you add something to
165:30 - the order dict then that is the order
165:32 - that it will stay in it won't be a
165:33 - random order all the time I'm not sure
165:35 - why this was being not a random order
165:37 - it's supposed to be um but it seems to
165:39 - be consistent maybe it's because it's so
165:41 - small but you cannot rely on a
165:43 - dictionary to be in the same order every
165:44 - time time okay you cannot rely on a
165:47 - dictionary to be in the same order every
165:49 - time you have to um index by key okay
165:53 - just be aware of that um that's why pop
165:55 - item says uh oh I have this twice that's
165:58 - why pop item says uh it'll pop an
166:00 - arbitrary element because it'll just pop
166:02 - the last one pop item will just pop the
166:04 - last one which could be any random one
166:06 - or it could be consistent and this case
166:08 - it's it's been consistent but if it was
166:09 - random on a different computer I've seen
166:11 - it be random before just take my word
166:12 - for it then yeah then it'll be an
166:14 - arbitrary um thing you get back from
166:16 - this method so that is order dict um
166:19 - useful uh probably for something I'm not
166:21 - sure um I haven't actually really used
166:24 - it I usually use dictionaries for things
166:26 - like this um but if you actually did
166:28 - want to sort a a dictionary I suppose
166:31 - you could use one of these things right
166:33 - you could get all these in a list and
166:34 - then sort the list and then put the list
166:36 - into an order dict so that the the the
166:40 - dictionary stays in the order that you
166:41 - added things to it so you just keep
166:43 - appending to this order dict um and that
166:45 - would be it uh I forget how to add to an
166:48 - order dict uh but yeah you could just
166:51 - call like okay word
166:54 - counts uh dot uh values or
166:59 - something values right and then uh we
167:02 - have to cast this to a list right so
167:04 - list just like that so this will get us
167:06 - a list of all the values so this would
167:08 - be 1 one three and two remember because
167:10 - we added this to the dictionary this
167:11 - will get a um list of length four with
167:15 - all those four numbers let me just show
167:17 - you hit run okay you get 1 132 okay so
167:20 - we get a list there we can see that it's
167:22 - not in order so you could actually say
167:25 - okay
167:27 - uh you could use you could use sorted um
167:31 - but I prefer uh list. sort so we're
167:34 - going to do list. sort just like that
167:37 - okay and then
167:39 - click um oops what is going
167:43 - on
167:45 - dot
167:48 - values none uh maybe we do have to use
167:51 - sorted I think I got mixed up here yeah
167:54 - yeah because this sorts it in place
167:57 - so uh you could use sorted and just
167:59 - enclose the
168:01 - entire you can see that uh what are
168:04 - these periods popping up I don't want
168:06 - these I'm just giving space for clarity
168:09 - sake as you can see so we're getting all
168:12 - the values from the dictionary here
168:13 - we're casting it to a list then we're
168:16 - sorting it we want this list to be
168:17 - sorted sorted and then we are going to
168:20 - print that sorted list so remember
168:21 - before it was going in um out of order
168:23 - 1132 now it's going to be in order as
168:26 - you can see it's 1123 pretty cool right
168:29 - and then also um you could probably cast
168:32 - this to a dictionary all right so now
168:35 - that you have a sorted list cast it to a
168:37 - dictionary
168:39 - oops um but now we can actually print
168:41 - this dictionary um apparently you can't
168:45 - do that I mean you'd have to use an
168:46 - order dick somehow uh to keep
168:48 - it um in the way you have to look that
168:50 - up I'll leave that as an exercise for
168:52 - you but yeah look up how to use order
168:54 - dict to give it a list or something and
168:56 - then um be able to preserve the order of
168:59 - uh these these um these things oh I
169:03 - think the error actually here was yeah
169:04 - we have a list of numbers when it's like
169:05 - how the heck do you cast a list of
169:07 - numbers to a dick that was the error
169:08 - that was having that was stupid on my
169:10 - part um you would actually need to
169:12 - somehow preserve the keys as well so
169:14 - maybe You' have to actually use items
169:16 - instead of keys or values and then sort
169:19 - um bu by something
169:21 - else but uh basically yeah that's pretty
169:23 - much um all the basics of dictionaries
169:25 - in Python um there are a lot of more a
169:27 - lot more things you can do with them um
169:29 - you can even do dictionary
169:30 - comprehensions or List comprehensions
169:32 - you can actually um if you know what
169:34 - that is uh I'm not going to go over that
169:35 - now but it's just something to note it's
169:37 - kind of cool you can actually construct
169:39 - dictionaries just like you would a list
169:40 - comprehension but it's a dictionary
169:42 - comprehension or a tle comprehension um
169:44 - you can do that with these things very
169:45 - very cool but uh that is it for this
169:47 - video you guys uh thank you for watching
169:49 - I don't know how long this took I feel
169:50 - like it was pretty dang long um but I
169:52 - really want to go over dictionaries
169:53 - thoroughly because dictionaries are
169:55 - freaking awesome in Python you can do so
169:57 - much stuff with them um they're
169:58 - basically like mini classes yeah like
170:00 - you don't have to use obvious your
170:02 - programming cuz you can just use
170:03 - dictionaries to get little jobs done but
170:05 - yeah um I'm just gushing now I'm just
170:08 - gushing gushing and gushing about
170:10 - dictionaries so great anyways uh yeah
170:13 - thanks for watching you guys I'll see
170:14 - you next time uh have a great
170:22 - [Music]
170:28 - day hey what's up guys Aaron here from
170:32 - clever programmer again and today we are
170:34 - going to be going over the idea of
170:36 - mutability in Python and programming in
170:39 - general mutability just means or another
170:42 - way of saying it is mutable versus
170:43 - immutable okay okay these are some weird
170:45 - words but let me explain let's get
170:48 - [Music]
170:53 - started mutability let me just type that
170:55 - out muta you probably already saw it in
170:57 - the thumbnail and everything and the
170:59 - title title of the video but yeah so
171:02 - mutability oh what does that even mean
171:04 - what this means is actually it should
171:06 - have been mutability so muta just stands
171:09 - for mutate mutate means like you're
171:11 - changing something so mutability it
171:13 - actually means mutat ility um or
171:15 - basically change ability okay so a
171:18 - mutable
171:19 - thing is a something that's mutable and
171:22 - an immutable
171:24 - thing is something that isn't mutable
171:27 - which means you can't change it so this
171:28 - is in changeable and this is changeable
171:30 - basically they should have called it
171:31 - changeable and in changeable instead of
171:33 - mutable and immutable which actually
171:34 - should have been mutable and immutable
171:37 - but I don't know who came up with it
171:38 - it's just kind of silly it always
171:39 - confuses me but that's what they mean
171:41 - okay what this means is there are
171:43 - different kinds of data types in
171:44 - programming in Python you're you are
171:46 - familiar with the ones in Python I'm
171:47 - sure but some are mutable and some are
171:49 - immutable so I think we went over in a
171:51 - previous video about lists and tupes
171:53 - right so lists is a good example of a
171:55 - mutable data type because they can get
171:58 - longer they can be empty you can add
171:59 - things to them you can subtract things
172:01 - from them you can change the value of
172:02 - the elements inside right you can you
172:04 - can go like this right that's a a list
172:07 - you can append things to it so I could
172:08 - appen four to this and then I could just
172:11 - print this out and then you'll actually
172:12 - see that it is a
172:15 - um list of all four
172:18 - things you guys get the idea so a list
172:21 - can change because you can add things to
172:22 - it you can subtract things from it and
172:24 - whatnot however a tuple is immutable
172:28 - right because remember I said that you
172:30 - it's a stable it's a consistent stable
172:32 - structured kind of data type or data
172:35 - it's actually a data structure but I'm
172:36 - just going to call it a data type
172:37 - because you can't add anything to it if
172:38 - you if you uh you can't add anything to
172:41 - it you can't delete anything from it and
172:43 - you can't actually delete you can't
172:44 - actually change these elements so you
172:45 - can't make it longer you can't make it
172:46 - shorter and you can't change what these
172:48 - things are whatever it is when you
172:49 - create it it stays like that this tupo
172:52 - will stay like this one 2 3 forever okay
172:55 - that's the difference between mutability
172:56 - and immutability it's kind of like in
172:57 - real life like think about it like if
172:59 - you have a rock that is uh immutable it
173:01 - doesn't really change I mean you could
173:02 - like smash it but in general a rock is
173:04 - very hard and hard to change so it's
173:05 - immutable it's one thing that never
173:07 - changes it's what it is from the
173:09 - beginning all the way to the end but
173:11 - something that is mutable might be
173:12 - something like a keychain because you
173:14 - you can take keys off you can put keys
173:15 - on it you can add things to it you can
173:17 - change the keys and it can grow and
173:18 - change you can mutate okay so that's the
173:21 - where the idea comes from um so yeah
173:23 - there's actually a lot of different kind
173:24 - of mutable data types and imut immutable
173:27 - data types I think all the mutable you
173:29 - can you can um Google it all the ones
173:31 - that all the different types if you
173:33 - actually want to find them all um IM
173:35 - immutable types things you cannot change
173:37 - would be things like tups okay uh tup um
173:42 - ins okay you can never change it you can
173:45 - only overwrite the entire thing oh yeah
173:48 - I forgot to mention that uh an immutable
173:50 - object like a tuple you can still
173:51 - overwrite the entire thing is
173:53 - essentially deleting it um but whatever
173:55 - that structure is that data itself that
173:57 - very when it is an immutable data type
173:59 - you cannot change it same with inss
174:01 - every time you overwrite an INT you're
174:03 - actually deleting it and replacing with
174:05 - a new int you're not actually changing
174:06 - the int directly because you can't do
174:08 - that um same with floats and booleans
174:10 - I'm just going to put all these together
174:11 - floats and booleans and um um strings I
174:15 - think I think so I think every time you
174:17 - change a string it's actually creating a
174:19 - completely new string a data type like
174:21 - not not quite sure about that but uh
174:22 - these are just some examples these are
174:24 - IM immutable data types um mutable data
174:27 - types would be things like lists because
174:28 - you can change them okay would be
174:31 - dictionaries all right um order
174:36 - dictionaries right I mentioned that
174:38 - that's another data type that we had in
174:39 - the dictionaries video I didn't go into
174:41 - it um and many many more most things
174:44 - things are mutable um less things are
174:46 - immutable like only a few things are
174:47 - mutable uh but basically these allow for
174:50 - more um secure data I suppose and
174:54 - mutable things are for flexible data so
174:56 - that's the distinction there one thing I
174:58 - do want to mention is that in
174:59 - dictionaries when you have a dictionary
175:01 - right dict like this and you have um
175:05 - a uh one okay and
175:10 - B
175:12 - 2 okay the key has to be an immutable
175:17 - thing that's why I I know strings are
175:19 - immutable okay because I know that this
175:21 - has to be immutable and this can be
175:23 - anything the heck you want it can be
175:24 - anything you want the value can be
175:26 - whatever you want but the keys in the
175:27 - dictionary have to all be immutable so
175:29 - this could actually be a tuple okay you
175:31 - could actually have a t here and you
175:33 - could say like okay on a screen right
175:36 - you have a bunch of you have X and Y
175:38 - positions on a screen and then you have
175:40 - a brightness so maybe if you wanted a
175:42 - you could have a dictionary that Corr
175:44 - responds to um be like okay at 0.1 two
175:47 - at pixel one comma 2 so you go over one
175:50 - pixel and up two pixels so the pixel
175:51 - like over there would have a brightness
175:53 - of one or turn it on or something like
175:55 - that uh so you can like that that's just
175:57 - one example that came to mind right now
175:59 - but yeah so you actually need an imut
176:01 - immutable data type as the key in a
176:04 - dictionary because if you don't then um
176:07 - the key changes and then it's not
176:09 - consistent anymore this needs to be
176:11 - immutable because that's how you index
176:14 - into the dictionary the same way um when
176:16 - you index into a list you have to use an
176:18 - integer which is also mutable um that
176:21 - that's just one thing I wanted to point
176:22 - out um with dictionaries this has to be
176:24 - immutable okay uh one last thing I want
176:26 - to go over is immutable immutable data
176:29 - types are a little bit uh finicky uh
176:31 - you're probably falling up to this point
176:33 - this part gets a little bit complex but
176:34 - I'm going to give it a shot explaining
176:36 - anyways so let's say you had a two pool
176:37 - okay 1 two
176:39 - 3 okay um you understand that this is an
176:43 - immutable data type type because I can't
176:44 - add anything to it I can't subtract
176:46 - anything from it and I can't change any
176:47 - of these individual things that's
176:49 - because this whole thing is actually
176:51 - stored as a chunk in memory all right
176:54 - well what if we actually had a list here
176:58 - okay right
177:01 - um so we have a that's a little bit oh
177:04 - no no this should be fine so we have a
177:05 - tuple here which has two immutable
177:08 - things two immutable things and then one
177:10 - mutable thing in its third place all
177:13 - right well let's first try to change um
177:18 - something so I'm trying to change the
177:20 - first thing of this immutable data type
177:21 - this twool you run it going to get an
177:23 - error see tupol object does not support
177:25 - item assignment which means you cannot
177:27 - assign any of these items to something
177:28 - new T we're trying to change this one to
177:31 - it's the same thing one but it can't
177:32 - actually change this okay same thing if
177:35 - I put two um I mean oops if I put uh one
177:39 - here it wouldn't change the two here and
177:41 - if I put to get two here which get this
177:43 - list I still still can't change it
177:44 - because I cannot assign this one to
177:46 - overwrite this list however
177:52 - okay T at2 is a list you see this here
177:56 - it's a list one two 3 T at2 so we're
177:59 - just going to say okay L equals T at
178:04 - 2 get rid of that error there actually
178:07 - no um I'm not going to do this I'm just
178:09 - going to put it in one line so T2 is the
178:11 - list so if we have if this whole thing
178:14 - is a list remember how we index into a
178:15 - list you can actually put more brackets
178:18 - after it okay and then if I put in zero
178:22 - we're going to get one okay if I put in
178:25 - one you're going to get two and if I put
178:27 - in two you're going to get this three
178:30 - because what whatever's in here is
178:32 - indexing into this list because this
178:33 - whole thing is this whole list all
178:36 - right now I am going to uh show you
178:39 - something interesting so let's put uh
178:42 - let's just print T here so we can see
178:43 - the two tupal I'll comment this out real
178:45 - quick and then run this to see what
178:47 - happens so prints out the tupal there
178:49 - okay with the list with the one two and
178:51 - the list and the third
178:52 - one and now what I'm actually going to
178:54 - do is uh obviously we couldn't we
178:57 - couldn't actually change um the entire
179:00 - list we got an error before but could we
179:02 - change something within this list I mean
179:04 - this it's if it's within this list it's
179:06 - also within this T right so you said we
179:08 - can't change anything in this tupol but
179:11 - a list is mutable a list is not
179:13 - immutable able so we can still change
179:16 - the things in
179:17 - here okay um are you following now so we
179:21 - could actually say Okay um T at2 is a
179:24 - list and then at zero is this one we can
179:26 - actually change this to let's say seven
179:28 - all right and hit run no error right no
179:32 - error and then let's print T again and
179:35 - see what prints
179:36 - out oops see what prints out okay as you
179:41 - can see seven was put where one is all
179:45 - right but this whole Tuple is mutable
179:48 - but this list is mute is mutable so we
179:51 - were able to actually change this
179:54 - okay a distinction there if this was a
179:56 - tupo we wouldn't have been able to do
179:58 - that okay if this was actually like this
180:01 - instead we wouldn't this code will
180:03 - actually break and I'll show it to you
180:05 - see what happened print T oh I forgot a
180:10 - parentheses here run this and we'll get
180:12 - the correct error we're the incorrect
180:14 - error before this is the error I wanted
180:15 - to pop up I don't think I've ever said
180:17 - that before we got the incorrect
180:19 - error um but as you can see yeah you
180:22 - can't change it but if this is a mutable
180:23 - data type instead of an immutable data
180:25 - type you actually can change it so what
180:27 - I'm trying to get here is that imut
180:29 - immutable data types um they are only
180:31 - immutable at their level okay at their
180:34 - Global level if you go within and then
180:36 - there's something that is mutable you
180:37 - can still change those and that's
180:39 - because in Python um this might go over
180:40 - a lot of you guys' heads but I'm going
180:41 - to explain this cuz you might understand
180:43 - is is because everything in Python is an
180:45 - object so this um Tuple is considered a
180:49 - a object and it's given all this data
180:51 - it's given this one it's given this two
180:52 - and it's given um the location of this
180:54 - list in memory okay so this list in
180:58 - memory can change to whatever the heck
180:59 - it wants but the location of this list
181:01 - will always stay the same it's just the
181:03 - list changes itself the values within
181:05 - the list change or it gets longer but
181:07 - the the location of this list which is
181:09 - just the first element where the first
181:10 - element is located um always stays the
181:13 - same so we can change this list but on
181:15 - this tupo you can actually replace this
181:17 - list with location okay this isn't
181:20 - actual what you code but just imagine
181:21 - the idea here that this is actually the
181:23 - location of whatever is here so the
181:25 - location of one and two is also here
181:27 - this is also stored as locations um it's
181:30 - called a pointer if you know like C or
181:32 - C++ but um the location of the list does
181:35 - not change okay but the value of this
181:38 - list can change okay so that's the
181:40 - little distinction there it's a weird
181:41 - little Edge case same deal if you had
181:43 - once again a list within here you could
181:45 - change it but if this was a twool you
181:47 - could not change it okay this is getting
181:49 - weird weird and nested so I'll go back
181:51 - to this simple case we had but that's
181:54 - pretty much it um about mutability and
181:55 - immutability you guys um I just want to
181:58 - explain that because it's a distinction
181:59 - in Python um the most important use of
182:03 - it I know is using T PS for stuff for
182:04 - structured data and then knowing that a
182:06 - dictionary key has to be immutable okay
182:08 - it cannot be mutable because the keys
182:10 - have to stay consistent in dictionary or
182:12 - the name of the thing is going to get
182:13 - all screwed up and it's going to freak
182:14 - out and the world's going to explode and
182:16 - then uh Transformers are going to start
182:18 - um coming alive and whatnot but um
182:21 - that's pretty much it for U mutability
182:23 - you guys thank you for watching I'm
182:24 - sorry if I got a little complex there at
182:26 - the end I get kind of nerdy and geeky
182:27 - and I like to geek out and explain all
182:29 - the little nitty-gritty stuff sometimes
182:30 - I know this is a beginning beginnner
182:32 - tutorial but hey might as well push you
182:34 - right that's how that's that's what
182:35 - happened to me when I was learning so
182:37 - thanks for watching you guys um hope you
182:38 - guys enjoyed it and I'll see you next
182:40 - time
182:42 - goodbye
182:48 - hey guys what's up how's it going this
182:51 - is kazy from CL program.com in this
183:01 - tutorial was that better yeah but aren't
183:04 - you going to take his seat after that oh
183:06 - can we just edit it like oh yeah yeah
183:08 - you just cut yeah yeah just and I'm just
183:10 - going to like fall all right now you go
183:12 - sit in the seat
183:14 - [Music]
183:19 - is is it rolling yeah I'm taking over
183:21 - boys let's do
183:29 - this what's up you guys this is Aaron
183:32 - from clever programmer and uh we just
183:34 - have a quick short little video for you
183:35 - today uh we're going to be talking about
183:37 - list comprehensions in
183:39 - [Music]
183:42 - Python
183:44 - so uh this is a neat little trick that
183:46 - uh that is unique to python I believe I
183:47 - don't know any other programming
183:48 - languages that have it but pretty much
183:50 - what it allows you to do is to make
183:52 - lists out of um cool little Expressions
183:56 - so you can actually populate an entire
183:58 - list with just one line with this little
184:00 - um unique thing a little bit weird to
184:02 - explain but I'll just show you and then
184:03 - you'll see how it works so let's get
184:05 - started so let's say we have a list
184:06 - called
184:07 - names uh let's just put in uh
184:11 - some names here
184:22 - so we have uh Jennifer Susan Jane and
184:25 - Sophie all right cool so this is our uh
184:28 - short little list list of names and um
184:31 - first of all if you wanted to put all of
184:33 - these names in a list then the first way
184:36 - you could do it was actually use a for
184:37 - Loop so I will show that first this is
184:40 - the way that you guys should be familiar
184:41 - with doing so we would just have an
184:42 - empty list here here and then we would
184:44 - have to iterate for
184:47 - every uh person in the list we would
184:51 - simply append that
184:53 - person to the new list so what we did
184:58 - here was we put every name in the names
185:00 - list and put it into the L list so we're
185:03 - just going to print this
185:04 - out just like that give this a run and
185:09 - um there is an
185:11 - error uh let's see what's going on here
185:15 - oh yeah there we go stupid me you guys
185:17 - pardon me we want to append the person
185:19 - to the list not the list to the list all
185:21 - right so let's run that again and as you
185:24 - can see the um all the names are printed
185:26 - out nice and nice and clean here so what
185:28 - we did here was we created a new list we
185:30 - read from the list and we put everything
185:32 - um in that list into a new list and
185:34 - printed that new list pretty cool right
185:37 - now I'm going to show you the list
185:38 - comprehension for this so the way you
185:40 - could um the way you do that is you
185:41 - would actually just
185:44 - um uh make a list like this so the
185:47 - Syntax for this is the item that you
185:49 - want to be in the list goes first so we
185:51 - could just put uh person here and I I'll
185:55 - show how this relates to the for Loop
185:57 - later but we'll go here and then we'll
186:00 - say um for person in names simply like
186:04 - that so what's happening here is uh we
186:07 - actually have a for Loop in in one line
186:10 - here so it's going to Loop through so
186:11 - person is going to Loop through this for
186:12 - Loop is is going to Loop through names
186:15 - and um each element in the names list
186:16 - will be person and all we're doing is
186:18 - simply taking this uh variable here and
186:21 - we're sticking it here and these things
186:22 - that are over here will be what's
186:24 - actually in the list when we're done so
186:26 - let's try to print this and see what
186:27 - happens it should be exactly the
186:29 - same go like that hit run and as you can
186:33 - see the output is the same both times so
186:36 - these two pieces of code this for Loop
186:38 - and this list comprehension are actually
186:40 - equivalent but you see how we collaps
186:42 - these four four four lines of code into
186:44 - one line that's the uh Power of list
186:47 - comprehensions so that's the most basic
186:50 - one that everybody learns first that's
186:51 - the one I learned first um but actually
186:53 - the true power of list comprehensions is
186:55 - that if you have a list of something you
186:57 - can actually do operations on every
186:59 - element of the list and create a new
187:01 - list that way so let's say you had um a
187:04 - bunch of numbers in a list you had 1 2 3
187:06 - 4 and then you wanted to maybe um
187:11 - multiply everything by two so it would
187:13 - become 2 4 6 8 just like that you could
187:15 - use a list comprehension to do an
187:17 - operation on every element and um it
187:19 - would come out like that so let's uh
187:21 - let's have another example um let's make
187:25 - another list and I'm going to change I'm
187:26 - actually do an operation on all of these
187:29 - so let's create another empty list here
187:31 - uh this is going to overwrite the empty
187:32 - list L from above um actually let's just
187:36 - paste this in boom just like that so for
187:40 - person in
187:42 - names we can actually um edit everything
187:45 - in here so if we instead of just wanting
187:48 - to add person we could actually edit
187:49 - this thing before we add it to the list
187:51 - so that it looks new so all I'm going to
187:53 - do here is a very simple and um slightly
187:56 - personal thing but I'm just going to
187:57 - type in dumped
187:59 - me right here so now let's run this and
188:03 - as you can see this has suddenly turned
188:05 - into a list of x's not just people all
188:08 - right so let's go on
188:12 - um uh turning this to list comprehension
188:14 - will be as simple as copy and pasting
188:19 - this and um the way this would work is
188:22 - uh for each person in um in the names
188:25 - list we would actually just add the
188:26 - string to
188:31 - here just like
188:35 - that what am I doing you guys so as you
188:38 - can see everything is reiterated here
188:40 - I've probably written this out on paper
188:41 - many many times but it's actually on a
188:43 - screen now forever in the electronic
188:45 - Abyss um let's move on so that's how
188:48 - list comprehension works all you do is
188:49 - you can actually go through an entire
188:50 - list so the list we're going through
188:52 - here is names and we wanted to do an
188:54 - operation to every element in that list
188:56 - which is ADD dumped me to the end of
188:57 - every name and so I actually just put
188:59 - those things together and put it in this
189:00 - new list so now the list looks like that
189:03 - you guys
189:05 - following um lastly there's actually a
189:07 - couple other cool things you can do um
189:09 - you can actually get pretty verbose in
189:10 - these and do some weird nesting but then
189:12 - it gets a little bit it might actually
189:13 - be better just to use for Loops at that
189:15 - point like nested for Loops um but if
189:17 - it's just two statements uh that might
189:19 - actually be okay like two nested for
189:20 - Loops or a for loop with an if statement
189:22 - inside uh we'll try that next so getting
189:25 - to a slightly more positive note uh
189:28 - we'll go back to um this list L um oh uh
189:34 - actually yeah we we'll have a new list
189:36 - down here let's just start something new
189:37 - so let's have a dictionary called movies
189:41 - and ratings just like that
189:43 - all right and then we're just going to
189:45 - have um
189:48 - Interstellar like that and give this a
189:51 - rating of nine out of 10 and then we'll
189:53 - also have dark
189:56 - knight let's move this over so you can
189:59 - see Dark Knight rating of eight
190:04 - um we'll have 50
190:07 - Shades uh rating of three and then we'll
190:11 - have again 50
190:14 - Shades Darker rating of two and this as
190:19 - this is progressing you can see where
190:20 - this is going 50 Shades
190:23 - darkest rating of
190:26 - one okay so now let's say we have we
190:29 - have this dictionary here yeah you can
190:31 - also run um comprehensions over
190:33 - dictionary so this would actually be
190:34 - called a dictionary comprehension you
190:36 - can um make a list
190:39 - here um and let's say I just wanted to
190:42 - fil through out all of uh the movies
190:44 - that have a rating less than six so I
190:46 - only want to show the ones that have a
190:47 - rating um more than uh more than six so
190:50 - how that would work would just be for
190:52 - movie in movies and ratings would there
190:56 - auto complete that
190:58 - there um if movies and ratings at
191:05 - movie uh is greater than six so we're
191:08 - filtering out here so if the movie is
191:09 - greater than six then we will append it
191:13 - to the the empty uh empty new list so
191:17 - that will just be movie just like that
191:20 - and then we'll print this
191:23 - out and let's see how that works um
191:27 - these three movies should have been cut
191:29 - out and then it should only show uh
191:31 - these two here it should just show the
191:33 - names because when we index into a uh
191:36 - dictionary only the key here the key
191:38 - string here is is uh put in the list
191:41 - let's run this and as you can see I
191:44 - ignore all this stuff I'm over it but um
191:49 - we can see that the the three movies at
191:51 - that anything with a rating less than
191:52 - six um these 50 Shades ones all got cut
191:55 - out and uh Interstellar in the dark
191:56 - knight uh these awesome sci-fi and
191:59 - superhero movies stayed in so that's how
192:01 - that works but we can actually put this
192:02 - all into a list comprehension this will
192:04 - be the final one cuz it's a little bit
192:05 - complicated but if you understand this
192:07 - you can pretty much understand any list
192:09 - comprehension because you can do uh I
192:11 - don't think there's a limit to it but
192:12 - you could probably Nest as many as you
192:14 - want into one line but it gets unruly at
192:16 - some point so just be conscious of that
192:18 - but this is great for saving a lot of
192:19 - space for short little for Loops so this
192:22 - one follow along you guys is going to be
192:24 - movie so we want the movie name to be in
192:26 - the list um for movie in movies in the
192:31 - list movie in
192:33 - ratings but we only want the movies um
192:36 - that are in movies and ratings
192:40 - if the movie and um movies and ratings
192:46 - at
192:47 - movie oops is greater than six so what
192:52 - this is saying is um for every movie
192:54 - movie. ratings or movie and ratings um
192:57 - if if the movie rating is greater than
193:00 - six then stick the movie name in the
193:03 - list so let's see how that runs it
193:05 - should have the same exact output and as
193:07 - you can see it has the same exact output
193:09 - as a for Loop all done in one line so
193:11 - let's take a one final look at this to
193:13 - compare the code so um this first
193:15 - example we have a list of names and then
193:17 - this for Loop became this less
193:19 - comprehension this for Loop became this
193:21 - list comprehension and this for Loop
193:23 - became this list
193:24 - comprehension um that's pretty much it
193:26 - you guys um really cool little thing you
193:28 - can do in Python uh very good for being
193:30 - very uh descriped in a single line of
193:32 - code and super super useful if you want
193:34 - to do a uh some kind of calculation on
193:37 - every element of a list and create a new
193:39 - list from that uh it's probably one of
193:40 - my favorite things in Python uh I don't
193:42 - know about you guys but yeah just let me
193:44 - know what you guys think in the comments
193:46 - um and that should be it for this video
193:47 - thanks you guys for watching and see you
193:49 - later
193:51 - [Music]
194:04 - goodbye hey what's up guys Aaron from
194:07 - clever programmer here again and today
194:10 - uh I feel like making an email add text
194:13 - scraper just felt like doing something
194:14 - small and simple so yeah let's get right
194:16 - to
194:17 - [Music]
194:21 - it so if I want to be able to search um
194:25 - a bunch of text and pick out some emails
194:27 - from it I'm going to need something
194:29 - called regular Expressions uh in Python
194:31 - this library is uh just re so I'm just
194:34 - going to type import re just like that
194:37 - and uh a quick explanation of regular
194:39 - Expressions it's a way to specify
194:42 - different patterns in string and text
194:44 - and strings and text so that you can
194:47 - match certain those certain patterns and
194:48 - then pick things out so an email address
194:51 - follows a very specific pattern right uh
194:54 - there's some letters and numbers and
194:55 - whatnot and then there's an ersan and
194:58 - then some more letters and numbers and
194:59 - whatnot and then a period and then some
195:02 - more letters and numbers and that's what
195:03 - makes an email address that's what a
195:05 - human would recognize as an email
195:07 - address so things like these if you can
195:09 - pick apart those little rules like the
195:11 - structure the pattern of something some
195:13 - entity in this case an email address
195:15 - then we could specify and describe that
195:18 - pattern with uh regular expressions and
195:21 - then once we do that then we can um run
195:24 - the regular expression over the entire
195:26 - text file and basically just pick out
195:28 - everything in there that matches the the
195:30 - regular expression in this case they
195:32 - would be email addresses so that was
195:33 - kind of a roundabout way of explaining
195:35 - it but I hope you got it um I'm going to
195:38 - I'm going to go kind of fast but I'm
195:39 - going to explain like a little bit here
195:40 - and there just um smoothing smoothing my
195:43 - way up to uh the full complicated
195:46 - regular expression that will actually
195:47 - pick out email addresses so let's just
195:49 - start with something simple uh first I'm
195:50 - going to need some text so let's just
195:53 - type out a random
195:55 - string literally a random
195:59 - string
196:00 - okay and um next we are going to create
196:04 - a regular expression pattern so we'll
196:08 - call this variable pattern equals um
196:11 - call the regular expression library and
196:13 - there's this function or
196:15 - method uh called compile and what
196:18 - compile will do is it will take a a
196:22 - string in that describes our pattern our
196:25 - regular expression pattern and then it
196:27 - will create an object in it an an object
196:29 - from it and put it in
196:31 - pattern so the first one I'm going to do
196:34 - is literally just uh this a random
196:39 - string the reason I'm doing this is
196:41 - because I just want to show you how
196:42 - regular Expressions work so if I type in
196:44 - something like this if this is my ACT
196:46 - actual regular expression what it's
196:48 - going to search for in the text is this
196:50 - text exactly so since I type these
196:52 - exactly the same this is actually going
196:54 - to match this entire thing and when I
196:57 - run this pattern over this text variable
196:59 - it's going to spit out this match
197:01 - because this um this matches this or I
197:06 - should actually have to say this portion
197:07 - of the text satisfies what this pattern
197:10 - says so let's do this real quick uh I
197:13 - got the pattern and then I believe I
197:17 - need to call um uh let's call it result
197:23 - equals um
197:26 - pattern dot I believe it's search yeah
197:29 - search and then text so what's happening
197:32 - here is I
197:34 - have um my text here so I want to search
197:37 - my text using this pattern so this using
197:40 - this pattern I'm going to search for the
197:41 - text and then any results we get back
197:43 - I'm just going to stick in this result
197:44 - variable so let's run this uh I need one
197:47 - more print statement actually uh bear
197:50 - with me I'm doing this uh on the fly all
197:53 - right uh print result so it will print
197:56 - the results we get it should print out
197:58 - this let's see what happens I could be
197:59 - completely wrong um sad truth of
198:03 - life but hey look so we get this object
198:07 - it's actually called a match object um
198:09 - if you don't know what an object is uh
198:11 - that's okay uh if you do though then
198:13 - it's this is just an object and one one
198:14 - of its attributes is called match and
198:16 - the match here is actually a string
198:18 - called a random string because this is
198:20 - what it found in the text in the text
198:22 - string this is the the match it found
198:24 - over here if you don't know what an
198:26 - object is just forget about it um
198:29 - basically all all you to look for is it
198:30 - says match equals this so anything that
198:33 - is right here that is in this like right
198:35 - next to match that means it found it in
198:38 - the text so that's pretty cool now let's
198:41 - uh let's try something else because
198:42 - that's kind of boring this is just a a
198:43 - static kind of regular expression now
198:45 - let's change it up so actually what I
198:47 - want to do is um you can also use
198:51 - special characters in regular
198:52 - Expressions so if I put some brackets
198:54 - here and let's say I put a or actually a
198:58 - b or c um this is better for explaining
199:00 - it if I put it like this this will mean
199:03 - this entire highlighted portion here is
199:05 - looking for a single letter that can be
199:09 - either a b or c uppercase it's case
199:11 - sensitive
199:12 - so if it can be a b or c um and nothing
199:16 - else then that's what it takes to
199:17 - satisfy it so this is going to um look
199:20 - for a single letter that is either a b
199:22 - or c and the very first letter
199:25 - here is a capital A and A is a b or c so
199:30 - this is actually going to be the only
199:31 - match when we run it let's just try this
199:33 - it should only have a here instead of
199:34 - entire a random string let's run it and
199:37 - hey look it worked uh the only match is
199:41 - a now you can actually put as much as
199:44 - you want in between these brackets you I
199:45 - think you can go as long as you want
199:47 - I've never actually tried but I mean if
199:48 - it gets too long it gets kind of messy
199:50 - anyways and just yeah um it's it's nicer
199:54 - to try to keep things concise I can put
199:56 - multiple letters in here like I could
199:58 - also put uh a lowercase
200:01 - R
200:03 - um a lowercase R um or D or M so that's
200:09 - kind of like three letters in random um
200:12 - let's try run this and see what pops out
200:14 - it should just be R and I am correct the
200:17 - reason it's just R is because this
200:18 - search
200:20 - function it only searches for the first
200:23 - match the very first match and then it
200:24 - stops so it it terminates once it finds
200:28 - its first match so the first match here
200:30 - it can be either an R either a d or an m
200:33 - and this is the first one that matches
200:34 - an R even though D and M also match it
200:36 - found R first and so
200:39 - R was considered the match so this
200:42 - pattern object got um I mean sorry this
200:45 - result object got created and its match
200:48 - attribute was set to R because that was
200:50 - the first one it found so as as you can
200:53 - uh you can assume I can really put
200:54 - anything I want in here this would still
200:56 - just return R because um actually would
200:58 - it not yeah there's no capital A in here
201:00 - the only thing that's um before this is
201:02 - a capital A so the only time it would
201:05 - change is if I put a capital A here and
201:07 - then since capital A matches here before
201:10 - R does then capital A would be the match
201:13 - and yep that's exactly what I thought oh
201:16 - let's get rid of all this gibberish um
201:18 - another cool thing you can do is like I
201:19 - said ABC you could go like that ABCDE e
201:22 - f g you can also just um instead of ABC
201:26 - you can also just put in a Range like a
201:28 - A2 C which is the same as ABC or A to Z
201:31 - which is the entire alphabet in
201:34 - lowercase also what you can do is
201:37 - actually chain these these ranges so I'm
201:40 - I'm I'm going to run this and since R is
201:43 - the first lowercase letter r should be
201:44 - the only match again and yep just as
201:48 - expected all right we can also add a
201:50 - uppercase just by going like this now
201:51 - it'll match all upper lowercase and
201:53 - uppercase letters so since capital A
201:56 - comes first and capital A is within in
201:59 - this one single letter um criteria that
202:01 - we specified here uh then a will
202:03 - actually be printed out and yep right
202:05 - again all right so i' I've kind of
202:07 - drilled this idea in I might be uh
202:09 - droning on boring you guys but if you're
202:11 - still listening
202:12 - now it gets a little more interesting
202:14 - because if we add a plus sign after this
202:17 - what the plus sign does basically says
202:19 - whatever comes before it I can have one
202:22 - or more of those so instead of only
202:24 - matching A Single Character like we have
202:26 - now um I can actually match um multiple
202:30 - ones so I could actually detect an
202:33 - entire word uh this time it's only going
202:36 - to be a again because it's going to find
202:38 - the first entire string of one or more
202:40 - letters of lowercase uppercase in that
202:42 - case it's just a actually let's delete a
202:45 - so now it's just random string um so if
202:48 - this is going to search for one or more
202:50 - lower or uppercase letters as long as I
202:52 - want and then it stops at a space
202:54 - because this doesn't count as a upper or
202:56 - lowercase letter this space so it's just
202:58 - going to get these six lowercase letters
203:01 - and that will be the very first match
203:03 - and then it'll stop so let's run this
203:04 - and see what happens and yeah random
203:06 - pops out so pretty cool right I can also
203:10 - put uh 0 1 2 3 4 5 6 7 8 9 Etc but I'm
203:13 - just going to put 0 through 9 so now now
203:17 - what this will do is it will find
203:19 - anything
203:21 - um um anything that has lowercase
203:23 - uppercase or numbers in it one or more
203:25 - one or more of them until it's not
203:27 - satisfied so I I could actually put some
203:29 - some capital letters in here now some
203:31 - random ones some numbers and this will
203:33 - still match because everything in this
203:35 - entire string is either a lowercase
203:37 - letter is either an uppercase
203:39 - letter or a digit from from 0 to 9 as we
203:42 - can see here it's just when we reach the
203:44 - space it is not satisfied anymore so
203:46 - this one or this one or more plus sign
203:49 - thingy that we applied to this whole
203:51 - thing in the brackets doesn't work
203:53 - anymore so actually this entire thing
203:55 - will be be matched and yeah what do you
203:58 - know pretty cool right so now that you
204:02 - understand a little bit of those things
204:03 - I'm going to move on um once you have
204:05 - these pieces let's think about what a
204:08 - email address actually looks like so an
204:09 - email address is going to have
204:12 - um or let's let's just random string um
204:17 - let's just make a a random email address
204:20 - so that we can test it out so let's just
204:21 - say my name
204:24 - 123 at website.com looks like an email
204:29 - address to me so let's just do that and
204:31 - then just add some some more random
204:34 - text because I am lacking creativity
204:37 - today but now we have this entire string
204:40 - here all this text text and we have one
204:42 - single um email here and we want to pick
204:45 - out this entire thing so if we ran this
204:47 - it would just return random again
204:49 - because that's the first mesh that it
204:50 - gets but we don't want that we actually
204:51 - want to pick out this email address
204:53 - instead of this random string so how
204:55 - could we do that well um another thing
204:58 - you can do with regular Expressions
205:00 - is um actually just use characters so if
205:03 - I just put an ersan here just an ersan
205:06 - actually it's going to look for the
205:08 - first match of this and since there's
205:10 - one here it's actually going to pick out
205:12 - this ersan when I run this let's run it
205:14 - and see what happens yep the match is an
205:16 - ersan let's uh it's at website if I put
205:18 - at website it's going to search for that
205:21 - exactly and then it'll say at website
205:23 - because that's the first time it found
205:24 - at website um but since an email address
205:26 - has a ENT in it uh this is very easy to
205:31 - uh to build this pattern structure so
205:33 - just like before we had all lowercase
205:35 - letters all uppercase letters all
205:38 - digits one or more and then
205:42 - um after that that satisfies like this
205:44 - portion here my name 1 2 3 and then
205:46 - after as many letters um or numbers that
205:48 - we like uppercase or lowercase in any
205:50 - order we please it's followed by an
205:51 - ampers San like like that's what an
205:53 - email has okay and then after the
205:56 - Ampersand what happens again yet again
205:58 - we have as many lowercase uppercase or
206:00 - numbers we we want so we can literally
206:02 - just copy and paste this same thing this
206:05 - chunk and just paste it again so you see
206:07 - this part here and this part here are
206:10 - exactly the same see it's highlighting
206:12 - for me because they're exactly the same
206:14 - that's really cool okay then what
206:16 - follows this uh website portion uh a
206:18 - period so we could just put a period but
206:21 - uh actually there there's this little
206:22 - weird special thing called you need to
206:24 - escape certain um punctuation and um
206:28 - symbols when you are coding it's if you
206:30 - don't understand it's a little bit hard
206:31 - to explain I'm not going to explain it
206:33 - now but just take my word for it um to
206:35 - get to actually detect a pyramid uh a
206:38 - pyramid a period we have to put put a
206:41 - backslash before and this is called
206:43 - escaping the period so this is actually
206:45 - considered a unit and this will actually
206:47 - be interpreted as just a period because
206:49 - this back this backs slash says treat
206:51 - this period as an actual period instead
206:53 - of doing something else um we would also
206:55 - have to escape this if we actually want
206:56 - to find a plus sign in our string we'd
206:58 - actually have to I guess I am explaining
207:00 - Escape sequences a little bit but if you
207:02 - put a backs slash here this would
207:04 - actually search for a plus sign
207:05 - literally in in the string instead of
207:08 - applying this plus sign to these
207:09 - brackets and same thing with these
207:11 - brackets if you actually want to search
207:12 - for actual brackets instead of having
207:14 - this weird um this thing here where you
207:16 - can have like all this stuff inside you
207:18 - would actually have to put uh
207:19 - backslashes before each of these
207:21 - brackets to actually check for these
207:22 - brackets so that's what that does that's
207:24 - the reason we need that for the period
207:26 - so just uh just take my word for it this
207:28 - will be considered a period this this
207:30 - here is equal to this period here and
207:32 - then again after the period what do we
207:35 - have um I don't think actually think you
207:39 - can have numbers I'm not exactly sure of
207:40 - all the possible email addesses you can
207:42 - have but I think it's only lowercase
207:45 - letters and uppercase letters all right
207:49 - and uh one or more of course don't
207:51 - forget that so I think that's the entire
207:55 - regular expression so we have um as many
207:58 - lowercase and uppercase um letters and
208:01 - digits as we want one or one or more
208:03 - Follow by ersan again oops again same
208:08 - thing and then a period and then just
208:10 - lower then just some letters after so
208:12 - that is what I believe an email address
208:14 - should look like let's try to run this
208:16 - and see if this gets printed out my
208:17 - name1 123 website.com hopefully it does
208:21 - and run and hey what do you know it
208:24 - actually
208:25 - worked um stuff really works the first
208:27 - time so things are going flawlessly
208:29 - right now um relatively
208:32 - flawlessly but yeah it seems like it's
208:35 - working I picked out this one email
208:36 - address uh but one thing I want to try
208:38 - is what if we have multiple email
208:40 - addresses is in the same string so let's
208:42 - say um I'm going to slide this over so I
208:44 - have a little bit more
208:46 - room uh what if we have okay your
208:50 - name um
208:53 - 888 at uh
208:57 - company.net
208:59 - something like that that's that doesn't
209:01 - make sense because a company is supposed
209:02 - to have um but yeah whatever so let's
209:06 - try to run this and see what happens it
209:08 - should pick out both of these right it
209:09 - should say match equals this and match
209:11 - equals this let's hit
209:13 - run hm but match only has the first
209:16 - email address but what happened to the
209:18 - second email address well let's try to
209:19 - delete this first email address and see
209:22 - what
209:23 - happens delete delete delete delete
209:25 - delete delete feels good
209:28 - destruction um and now let's run it and
209:32 - as you can see it actually picked out
209:34 - this email address your name 888
209:35 - company.net well what what gives it
209:38 - seems like the regular expression that
209:39 - we wrote here is is picking out this
209:41 - correctly but it's not
209:43 - um it's not picking out both of them
209:46 - well the thing is uh the search function
209:49 - actually only searches for the first
209:50 - occurrence like I said earlier it only
209:52 - search for the first occurrence of of
209:54 - your match if you actually want to find
209:56 - all of them you can actually do that by
209:58 - just calling find all um I really want
210:02 - to uh drill this home to you because if
210:04 - you want to find everything then you
210:06 - need to remember to use this function
210:07 - instead of the other one uh it's a
210:09 - mistake I've made before so if we do
210:10 - this now it should actually pick out
210:12 - both email addresses let's give it a
210:13 - shot run and as you can see it returns a
210:16 - nice clean python list of both matches
210:18 - both email addresses that's cool right
210:21 - so um it looks like in like literally
210:24 - five lines of code we actually have a
210:27 - email address text scraper pretty cool
210:32 - man um some other things we could
210:34 - actually add to this is I believe in
210:36 - email addresses you can actually have um
210:39 - periods and underscores and and whatnot
210:41 - so that's literally as simple as adding
210:44 - um a period or a dash or an underscore
210:48 - in
210:49 - here and um I don't think you have to
210:52 - escape these if it's within the brackets
210:54 - if it's within the brackets it's already
210:56 - um considered it is what it is uh I may
210:59 - be wrong but we'll test it if it works
211:01 - I'm pretty sure that's how it
211:03 - works um same thing here uh I don't know
211:07 - if you can have um that here but let uh
211:12 - let's just try this and let's maybe add
211:13 - like
211:16 - uh uh your name let's add underscore or
211:20 - actually your dot or your name dot
211:28 - 8-8-8 now let's see what matches this
211:30 - time let's click
211:33 - run and
211:35 - oh something went
211:38 - wrong
211:39 - um
211:44 - maybe we do have to escape the dash
211:46 - let's try that yeah that's what it was I
211:48 - think we do need to escape everything in
211:50 - here uh yep okay that fixed it so you
211:54 - actually do need to escape everything so
211:55 - now it's actually picking out this email
211:57 - address just fine the entire thing let's
212:00 - change it back to what we had before
212:02 - just to make sure it's still working as
212:04 - expected your name.
212:07 - 8-8-8 run and it looks like it's picking
212:10 - out the enre thing pretty cool guys
212:12 - pretty cool so yeah you do need to
212:14 - escape these special symbols even if
212:16 - it's within brackets you need to put
212:17 - these backslashes before it to actually
212:19 - treat it as a period actually treat this
212:21 - as a
212:22 - dash and then actually treat this as an
212:24 - underscore you got to escape
212:26 - them um for that matter you might even
212:29 - want to escape the ersan would that yeah
212:32 - I guess so maybe that too if if ersan is
212:34 - a special character sometimes it's a
212:35 - little bit confusing whether you need to
212:37 - escape or not but if you're ever getting
212:38 - weird errors when you're dealing with
212:40 - strings and you're trying to par string
212:41 - strings like this um try escaping the
212:44 - the special characters and sometimes
212:46 - that'll that'll fix the problem or
212:47 - unescape them it's it's a very uh weird
212:50 - layered convoluted kind of thing but
212:53 - yeah it's just a part of uh learning
212:55 - this this crazy Aztec language yep I
212:57 - just taught you guys how to speak
212:59 - Aztec um but yeah guys uh it seems like
213:01 - we have a fully functioning uh email
213:03 - scrape right now with uh this added
213:05 - functionality so pretty simple right
213:07 - five lines of code took a little um a
213:10 - little while to get here but yeah that's
213:11 - pretty much it just these uh these
213:13 - simple five lines and that just kind of
213:15 - shows the uh Power of regular
213:16 - Expressions we're able to detect all
213:17 - different kinds of things with uh one
213:20 - single line of weird symbols pretty much
213:22 - so uh that kind of demonstrates the
213:24 - value of it I'm sure Python's very happy
213:26 - to have it within its Library um if it
213:28 - was sentient but yeah very useful tool
213:31 - um I'll probably be touching on this
213:33 - more in the future this was only like a
213:35 - general introduction to it but um
213:38 - there's a lot of things you can do more
213:39 - with this there's a
213:42 - just a lot uh perhaps I'll go into the
213:44 - future but for now that is all you guys
213:46 - uh thanks for watching this video um
213:48 - still do this getting better slowly but
213:51 - yeah hope you guys liked watching it um
213:53 - stay tuned for more and yeah I will see
213:56 - you guys next time
213:58 - [Music]
214:09 - goodbye
214:11 - so in this video you're going to be able
214:13 - to if you watch this you're going to
214:15 - learn things like how do you work with
214:17 - date times how do you work with daytime
214:19 - objects how can you take a string and
214:22 - turn it into a datetime the benefits
214:25 - over all of this like you're like what
214:26 - the hell is this like if you're a
214:27 - complete beginner and you're like I'm
214:28 - just totally lost the are you
214:30 - talking about Ki if you want to be able
214:32 - to calculate the distance between today
214:34 - and your birthday you'll be able to do
214:37 - that if you want to make an app that can
214:39 - send an email to somebody body after 2
214:42 - days after the sign up automatically you
214:44 - need to know how dat times work if you
214:46 - want to be able to make an Instagram
214:48 - clone and you want to do things like
214:49 - when somebody makes a post and it
214:51 - timestamps it in their time zone and
214:53 - shows the time in their time zone when
214:55 - they log into the app then you need to
214:58 - know how to use date times so without
215:00 - any further Ado let's jump right into
215:03 - [Music]
215:06 - it all right so we're going to import
215:09 - datetime all right this you don't have
215:11 - to pip install this package it comes
215:13 - built in with python and it allows you
215:16 - to do fancy stuff with date so for
215:18 - example I can do let's say if I wanted
215:20 - to get today's date I will do today and
215:23 - I will do date
215:25 - time. dat and I can put in uh year which
215:31 - so you can see my pie charm is telling
215:33 - me what arguments it takes so it can
215:35 - take year as an integer it can take
215:37 - month as an integer and day as an
215:39 - integer so so remember it takes it as an
215:41 - integer actually for today I should
215:43 - probably just leave it blank even right
215:47 - and say today and uh if I print out
215:51 - today let's run this guy it will give me
215:54 - the date of today so that's how you will
215:57 - deal with today if I want to do birthday
216:01 - my birthday I'll do date time. date and
216:04 - now I'll pass in what I actually want to
216:07 - pass in so I'll pass in let's say the
216:10 - year 1994 the month 7 make sure you
216:13 - don't do 07 because 07 is not an integer
216:17 - so it'll give you an error you can't
216:19 - start an integer with a zero that's
216:21 - leading it so we'll say 7 July 14th is
216:25 - my birthday and then we will go like
216:30 - okay like print birthday let's see what
216:32 - that looks like cool so it's printing it
216:35 - out and showing it to you as a string
216:37 - but it's actually not a string it's
216:39 - birthday is really an object here
216:41 - because if I call the repper method it
216:44 - will show you it that it is indeed a
216:47 - daytime object and not just a string
216:51 - like it shows you in the terminal so do
216:52 - not get confused by that so we're going
216:56 - to create something called since birth I
216:58 - want to see how many days have I been
217:00 - alive right very important so I'll
217:03 - say days
217:05 - since since
217:07 - birth and what we'll do is we'll say
217:10 - today minus
217:14 - birthday okay and then let's do day
217:17 - since birth let's print this bad boy out
217:21 - it says 904 days now if I really want to
217:25 - make sure that I'm getting back days is
217:26 - I should do this and then I should do
217:29 - dot days this will make sure that I get
217:32 - back days and I don't get a daytime
217:35 - object back so this is telling me days
217:38 - since birth which is kind of useful I
217:42 - guess you know pretty useful
217:45 - important and that's how you can you
217:47 - know you can subtract dates you can add
217:49 - dates and all that if I do um if I
217:53 - create a Time Delta so let's say I'll do
217:56 - time
217:57 - Delta I'll create date
218:01 - time
218:03 - dot time Delta and I will say days equal
218:09 - 10
218:11 - and now I'll
218:13 - say to today to the date of today which
218:16 - is March 9th just add 10 days to that
218:19 - that's it so I'll just do plus time
218:22 - Delta now when I run it what I get back
218:25 - as you can see right here is March 9th
218:29 - has 10 days added to it and what do you
218:31 - get when you add 10 days to March 9th
218:34 - that's right you guessed it correctly
218:37 - you get back March 19th so this this way
218:41 - you can add to dates you can subtract
218:43 - from dates if you do minus here um let's
218:46 - do minus like that and we can run it and
218:50 - boom we've subtracted 10 days from that
218:53 - now the reason why you want to use
218:55 - libraries is because otherwise this
218:57 - stuff can get very confusing very very
218:59 - quickly because like for example you
219:01 - know February only has 28 days and then
219:05 - sometimes it has 29 days and some months
219:06 - have 30 days and 31 days and then you
219:08 - got to take leap years into account and
219:10 - you got to take all this other crap into
219:12 - account so that's why you don't want to
219:14 - create your own functions for this you
219:15 - want to just use something that
219:16 - somebody's made called date time makes
219:18 - your life a lot
219:21 - easier all right so I've shown you how
219:24 - to add and subtract time using time
219:27 - Delta I've shown you how to create
219:28 - daytime
219:30 - objects now and and I've shown you how
219:33 - to like pull out the current days you
219:35 - can pull out the current month too so
219:37 - like for example I can do today. month
219:43 - month and if I run it it'll give us that
219:46 - it's the third month because it's March
219:48 - I can do today. day and if I run it tell
219:53 - me that I can also do today
219:58 - dot uh weekday so this will tell me what
220:02 - weekday is it so right now it's telling
220:04 - me yo this is the fifth day of the week
220:08 - and let's check and and it or sorry this
220:11 - is the sixth
220:13 - the sixth day of the week because it
220:18 - says Monday is equal to zero and Sunday
220:24 - is equal to 6 okay so computers you know
220:28 - mostly start at zero and go up to
220:31 - six so that's why if you do weekday
220:35 - that's why it gives you five and it is
220:36 - the fifth day indeed because it's
220:38 - Saturday today
220:41 - so I'll write here
220:45 - Saturday is equal to
220:49 - five okay so there are many methods like
220:52 - that that are very
220:54 - useful now something else that's useful
220:57 - when it comes to date times is we've
220:59 - covered date times we've covered Deltas
221:02 - but what now we want to know is okay how
221:04 - do we deal with hours minutes and
221:07 - seconds so let's do
221:11 - that we will
221:14 - do something that will show us we'll do
221:18 - date
221:21 - time.time and essentially when you pass
221:24 - time you can pass in hour minute second
221:27 - and
221:28 - microsc so we will pass in our
221:36 - 7 Minute two
221:42 - seconds 20 and microc seconds you know
221:49 - 15 and then we can also pass in time
221:53 - zone info and what we want the time zone
221:56 - to be so but for now we'll just leave it
221:59 - blank and let's print this out and let's
222:01 - see what that says so that essentially
222:04 - just gave us a date time.time object so
222:08 - it gave us a datetime object
222:10 - where it's giving us the hours minutes
222:13 - and
222:14 - seconds but again I also Corey I was
222:18 - watching his video and he says that he
222:21 - uses primarily datetime and I agree with
222:23 - that because I used to use time but then
222:27 - I realized that there so there is three
222:30 - three different ones there's
222:32 - datetime dot date then there is date
222:37 - time. time and then there's date time.
222:41 - dat time and this is sometimes confusing
222:43 - but here's the here's what it really is
222:45 - so date time. dat is just year month and
222:50 - day okay date time.time is just hours
222:56 - hours minutes seconds and micros
223:00 - seconds and daytime. daytime is this
223:04 - year month day and hours minutes seconds
223:09 - and milliseconds
223:10 - that's essentially what you need access
223:12 - to because this has access to everything
223:15 - so most of the
223:17 - time you know you should really be
223:19 - working with date time. dat
223:22 - time all right now when we're working
223:27 - with these well we can do the same thing
223:30 - of time Delta all right so if you have a
223:32 - datetime object like date time. datetime
223:35 - thing you can still do time Delta and
223:40 - automatically do all the math for you
223:41 - including the hours math as well so you
223:44 - see how we created we did days if you
223:47 - add 10 days well you can also create a
223:50 - let's say we create an hour
223:52 - Delta and we do
223:54 - daytime. time Delta and instead we pass
223:57 - in hours and we say so right now it's
224:01 - almost 6:00 p.m. so if I add 10 hours to
224:05 - today so if I add 10 hours to right now
224:09 - right so for example if I do daytime.
224:11 - daytime. now first of all let's print
224:13 - that out so I'll do print and it'll run
224:16 - it so it's telling you that you look
224:19 - it's essentially 6: p.m. okay that's mil
224:23 - in military time it's 17 17th
224:26 - hour now if I add the time Delta to this
224:30 - and I do hour Delta and I run this well
224:33 - you'll see It'll say March 10th which is
224:35 - the next day because it makes sense
224:38 - right it's 3:00 a.m. into the next day
224:40 - so you can also do time Delta just like
224:44 - that let's move
224:46 - on I'll write little notes here for you
224:49 - so I'll
224:54 - say that this is 10
224:57 - hours um add 10 hours to current day
225:03 - that's what this part of the code is
225:06 - doing this part of the code is adding
225:10 - 10 days to current
225:17 - day
225:19 - find days since birth is that what's
225:22 - that piece of code
225:25 - doing okay so we have covered quite a
225:28 - bit
225:30 - now let's move on to a few more things
225:34 - when it comes to date time what you want
225:38 - your date time to do is be be aware of
225:41 - the time zones often times the daytime
225:44 - object by default is called naive so
225:47 - it's not aware of time zones meaning
225:52 - that it doesn't understand what
225:56 - is Mountain Time versus Pacific Time
226:00 - versus some other time so in different
226:02 - countries you have different time zones
226:04 - so it but it won't know the
226:07 - difference you have to tell it to be
226:10 - time zone aware AKA not naive so let's
226:15 - go ahead and do
226:19 - that we will take a datetime object like
226:23 - today so I'm just going to do datetime
226:25 - do dat
226:27 - time.
226:29 - now
226:32 - and what I'll do is let we're going to
226:35 - use a package called Pi TZ pytz so you
226:39 - have to install it what I'm going to do
226:42 - is I will simply install that package
226:46 - using my pip install so I'll go to the
226:48 - terminal here and I'll do pip install Pi
226:52 - TZ and if you don't already have it go
226:55 - ahead and install it looks like I
226:56 - already have it so that's good and let's
227:00 - go back
227:01 - to running this code
227:04 - cool and I will import pz at the top
227:10 - now that I have that what I can do is I
227:13 - can
227:14 - say time zone is equal to Pi
227:19 - [Music]
227:22 - TZ do
227:27 - UTC so now let's print that out and what
227:31 - you'll see is that not only does this
227:34 - daytime object give me the year the
227:38 - month the day that the hour the minutes
227:41 - the seconds and the micros seconds but
227:45 - it also gives
227:47 - me it also has made it UTC enabled but
227:51 - right now it's at plus
227:53 - z0 so now because it's aware we can give
227:57 - it a different time zone so let's try
228:05 - that so this is datetime today
228:11 - and what we'll do is we'll go
228:15 - datetime
228:19 - dot
228:22 - Pacific and I will
228:24 - do daytime
228:27 - today do as time
228:30 - zone and I will pass in the pz time
228:36 - zone except I will pass in us/ Pacific
228:41 - cuz I'm in LA and we are on the Pacific
228:45 - time zone and let's print that
228:51 - out okay so minus 8 that's what I wanted
228:56 - and that's what Pacific time zone
228:58 - is so that's how you can make a time
229:00 - zone aware and pass time zones there's a
229:03 - list of all the time zones so again this
229:06 - is also from Corey shap first tutorial
229:11 - and he just Loops through it which I
229:12 - thought is really cool for time zone in
229:16 - uh so let's for time zone in oh yeah
229:20 - let's just call let's just do that
229:22 - because there's already done a time zone
229:24 - here so we you don't want to like create
229:26 - any
229:28 - confusion pz.
229:36 - timezones pyz doall time
229:40 - zones let's print time
229:43 - zone and when I run it you'll see that
229:46 - it shows all these time zones like us
229:48 - Pacific us Mountain us Central us/
229:52 - Alaska Pacific in uh
229:55 - Indian and Europe and all pretty much
229:58 - all of the ones all of the time zones in
230:01 - the world okay and that's the where I
230:04 - got the list from that's where I figured
230:06 - out where this came from if you look it
230:10 - up online it'll probably be even easier
230:13 - cuz then you don't have to scroll
230:14 - through your command line it'll be in a
230:16 - nice little table for you all right so
230:18 - now what we want to do is we want to be
230:20 - able to take that time and format it so
230:22 - we're going to do something called
230:23 - string formatting so we're going to do
230:27 - uh string formatting with dates so all
230:33 - that means is we'll take some ugly
230:34 - looking date you know that it shows in
230:38 - and maybe in this format where it goes
230:41 - 2019 03 March and
230:44 - 09 and essentially we want to be able to
230:46 - show it such as
230:50 - March 3rd like that and then it should
230:53 - say
230:55 - 2019 okay so let's make it look a little
230:58 - pretty how do we do that well let's take
231:01 - our Pacific Time daytime Pacific that we
231:04 - had here and simply we'll do string
231:08 - formatting that's what this F is for so
231:11 - we're essentially string formatting time
231:14 - that's what we're doing
231:20 - here capital B is for the month don't
231:24 - ask why it just
231:26 - is uh small D is for the day and then
231:31 - percent capital Y is for the year let's
231:35 - print this bad boy and run it and you
231:37 - see the date looking really nice oh
231:40 - sorry today is not March 3rd it's March
231:42 - 9th my bad so we want it to look like
231:46 - this and that's what it did it made it
231:48 - look nice
231:50 - now how do we go the other way let's say
231:53 - that we
231:53 - have this thing we have March
231:57 - 09 2019 and maybe this is you pull it
232:01 - from a website somewhere right so on
232:03 - some website somewhere this is how dates
232:05 - are written well how do you take that
232:08 - written date and turn it into a datetime
232:10 - object so then you can do some
232:12 - manipulation on
232:14 - it how do we go from essentially this
232:21 - to like a
232:24 - datetime you know
232:33 - object kind of like that okay how do we
232:35 - do that how do we go from this guy to
232:38 - then get getting that
232:40 - guy well for this we use a method called
232:44 - Str strp
232:45 - time I need to turn
232:54 - off disable inspection there we
232:57 - go so here we use the method Str strf
233:01 - time here we're going to use St strp
233:04 - time okay p is equal to par
233:10 - say and the F in this is equal to
233:14 - formatting so that's one way to remember
233:16 - all
233:18 - this now what we'll
233:21 - do is I'll
233:27 - say take a datetime string so what I'll
233:31 - do is this okay I'll go like this we say
233:32 - boom date time. dat
233:35 - time. STP time and I'll give it a string
233:39 - so let's say I give it March 09 comma
233:45 - 2019 and you have to teach it how it's
233:49 - written so I'm going to say because it
233:52 - says the month here I'll put capital B
233:54 - like
233:56 - that because it say the day here I'll
233:58 - put percent D like this and then because
234:02 - there's a comma I'll put the comma and
234:04 - then year is here so I'll do this like
234:06 - that all right and we will call
234:14 - this you
234:16 - know date time
234:19 - thing and then we'll print it out
234:22 - datetime thing let's run it and boom
234:26 - this is what it you know if if I
234:28 - actually put a repper around
234:33 - it you can see that it's actually now a
234:36 - datetime daytime object
234:40 - rather than just being a March 9th
234:43 - string we took it from this string and
234:46 - by using this and telling it how it's
234:48 - formatted we turned it into an actual
234:52 - object and now that it's an object you
234:54 - can do you know you can add this to you
234:56 - can subtract this you can do all kinds
234:57 - of
234:58 - stuff now this is all great this is this
235:04 - pretty much covers almost everything
235:07 - that we wanted to touch base on like the
235:09 - most common problems that people have
235:11 - with date times adding and subtracting
235:14 - date times time Deltas which is very
235:16 - common and then people want to also know
235:18 - how to format it and show it print out a
235:22 - datea in a regular way and then you also
235:24 - want to be able to go from a regular
235:25 - date into a daytime object so we've done
235:27 - all of that we've also done some time
235:29 - zone stuff but what I want to show you
235:32 - now
235:33 - is if you have the opportunity to work
235:37 - with a different module different thing
235:39 - instead of daytime your life will be a
235:41 - lot easier so what I recommend that you
235:44 - use is something called
235:46 - Maya all right Maya which is we'll put
235:50 - the link in the description of this
235:53 - YouTube video so please Frankie when
235:57 - you're editing just remember to pop this
235:59 - into the YouTube
236:01 - description and essentially Maya is
236:05 - considered daytime for humans and all it
236:08 - does is just makes it a lot easier okay
236:10 - so Kenneth Reed says he he wrote this
236:12 - and he made it so it's it's simpler to
236:14 - deal with things so for
236:17 - example when you want to uh do when is
236:22 - tomorrow like when you want to do set
236:24 - something to tomorrow right like look at
236:27 - our even our today it's kind of
236:30 - confusing it's kind of funny if we want
236:32 - to add a tomorrow here what we would
236:34 - have to do is add this
236:37 - Delta right right we would have to add a
236:40 - one day Delta and then we it would give
236:42 - us tomorrow whereas for Maya you can
236:44 - literally just say maya. when tomorrow
236:47 - so you can give it a little datetime
236:49 - object Maya and then when you do maya.
236:51 - when and you write tomorrow it'll figure
236:53 - out when tomorrow
236:55 - is it can also automatically do slang
236:59 - for you which is pretty cool you know 23
237:02 - hours from now or 10 hours from now
237:04 - instead of you know writing another way
237:06 - it's these built-in methods but what's
237:09 - really cool to me
237:11 - is how it can automatically parse
237:15 - datetime strings and generate naive or
237:18 - not naive date times so you can give it
237:21 - a date time
237:23 - string and call this parse method on it
237:27 - and literally right then and there you
237:29 - can also give it a time zone and it will
237:32 - automatically figure it all out it will
237:34 - take it from the
237:36 - string and turn it into US Eastern Time
237:40 - Zone it's that
237:45 - easy for how and also how it prints
237:49 - things out it makes it really easy for
237:51 - you so instead of them looking really
237:52 - funny the print methods of this also
237:55 - looks really nice when you print
237:56 - something out it tells you Wednesday
237:58 - September 20th
238:00 - 2017 and so when you're working on
238:02 - things that's also
238:05 - easier another thing that I like about
238:07 - this is to add
238:09 - Delta all you got to do is just do do
238:12 - add all right and then it will
238:15 - automatically add
238:17 - things um essentially for you okay so
238:22 - you don't have to like worry about or do
238:25 - kind of anything on on your own it will
238:28 - just add it so you just do add then do
238:31 - days. equal 10. day so it goes from 7 to
238:34 - 17 just like
238:36 - that and I like how it says always here
238:39 - because what it does is whenever you
238:42 - runtime Zone it's always in UTC so it's
238:45 - time zone aware at all times by default
238:49 - unlike the datetime objects which are
238:51 - not aware by
238:54 - default and I and the advanced us usage
238:58 - is really cool too so if you're building
238:59 - an app which has to do with a lot of
239:01 - calendar type of things and you want to
239:03 - create an event that is an hourong that
239:06 - starts now well it's super easy if event
239:09 - start which is just maya. now so time.
239:12 - now you know or date time. now if you
239:14 - were using date time so just maya.
239:16 - now and to the now the event end is just
239:22 - the maya. now. add hours equal 1 so you
239:26 - just added that 1 hour Delta to it in a
239:28 - very easy way by just saying add hours
239:31 - equal
239:32 - 1 and then you can use this thing called
239:35 - Maya interval class so it's a really
239:38 - powerful class and you can give it a
239:41 - start date of event start and you can
239:43 - give it an end date of event end and it
239:46 - automatically can create that event for
239:51 - you
239:53 - now there are other modules as well such
239:57 - as DeLorean arrow and pendulum so arrow
240:00 - is something I've used in the past and
240:02 - era is something
240:04 - that Corey in his video recommends but I
240:07 - believe that Maya is going to get is a
240:11 - little bit more sane and will get most
240:13 - of the job done Arrow can do more but I
240:18 - do believe that Maya does things a lot
240:21 - better and if Kenneth Reit is doing it
240:24 - then you know that it's going to be
240:26 - right so I would stick with Maya and you
240:31 - can still use these together with it it
240:33 - complements them he even says that here
240:35 - that it complements
240:37 - them
240:40 - all right so that's really what I wanted
240:43 - to cover in this video it's super easy
240:44 - to install it just pip install Maya and
240:48 - you'll be good to go so yeah that's the
240:50 - main things I wanted to cover I hope
240:52 - that you enjoyed this video I hope that
240:54 - it was informative you learn something
240:56 - new and that you go now and create maybe
241:00 - even some project with date times that's
241:03 - how you'll improve in it that's how
241:04 - you'll become better with that said we
241:07 - do have a new program that's going to be
241:10 - coming out we're working hard at it with
241:12 - our entire team and this is a program
241:15 - that's whether you're a beginner or a
241:17 - professional developer is going to help
241:19 - you take your skills to the next level
241:21 - so whether your goal is to land your
241:23 - first job or your goal is to get a
241:27 - promotion at your current job or maybe
241:29 - you want to just become a much better
241:32 - freelancer and crush it at
241:34 - freelancing well then we will have a new
241:37 - program for you called how to automate
241:39 - stuff with python it will give you all
241:42 - the essential trainings you need to
241:45 - technically become an incredible
241:47 - developer and we will dive deep into
241:50 - python into programming and we will
241:52 - create many different projects will go
241:55 - much deeper into Concepts like web
241:57 - scraping Data
241:58 - Mining and just
242:02 - overall to handle really big projects
242:06 - and take your skills you know to the
242:07 - next level with that said all you need
242:10 - to do to join the wait list for this
242:12 - course cuz it's going to be coming out
242:15 - hopefully sometime soon but we're
242:17 - working on it really hard so just in the
242:20 - description below click the link it's
242:23 - going to take you to a page where it
242:25 - says how to automate stuff with python
242:27 - pop in your email and your name and I
242:31 - will send you a free gift once you do
242:33 - this uh we'll send you a three-part epic
242:36 - training Master Class perhaps apps and
242:40 - also when the course opens up you will
242:43 - be the first to know that way you won't
242:45 - miss out with that said thank you so
242:48 - much for watching if you like the video
242:50 - go ahead and please give it a like if
242:51 - you haven't subscribed to the channel go
242:53 - ahead and subscribe to the channel and
242:54 - as always I love your face this is ky
242:59 - and I'll see you in the next
243:02 - [Music]
243:07 - video hey you in this video we are going
243:11 - to be doing web scraping with python
243:15 - using libraries like beautiful soup and
243:19 - requests this is something that is very
243:22 - useful whether you are a beginer or a
243:25 - professional developer these are
243:28 - essential skills that almost every
243:30 - person needs so let's get started it's
243:33 - going to be a fun little project and
243:35 - this was inspired by dataquest.io it's
243:38 - not a sponsored video or anything but I
243:40 - looked at one of their tutorials and
243:42 - they are doing a weather forecast so I
243:43 - was like hey we should also just do that
243:46 - weather forecast except we're going to
243:48 - be doing it at for La cuz that's where I
243:51 - live so we're going to go to
243:54 - forecast.
243:55 - weather.gov so that's number one let me
243:58 - zoom in here so you guys can see very
243:59 - clearly and I'm going to type
244:02 - in Los Angeles we'll hit go and this is
244:05 - what pops up so what we're trying to do
244:08 - here is we want to pull this data we
244:10 - want to put it into an Excel spreadsheet
244:13 - we you could also put it in Panda's data
244:16 - frame if you know what that is but most
244:17 - people know what an Excel spreadsheet is
244:20 - or what a CSV file is so that's
244:22 - essentially what we're going to be doing
244:24 - and we're going to be doing web scraping
244:26 - here it's a pretty cool thing to learn
244:28 - how to do so let's jump right into it
244:30 - first of all for really basic stuff you
244:33 - know you have to know basic HTML we're
244:35 - not going to cover too much of HTML or
244:38 - CSS in this video but you know for
244:41 - example if I write an H2 tag I have code
244:44 - pen open here so I can just show how
244:46 - HTML works if I do H2 and I say hey guys
244:50 - like that and I do this it'll type in
244:53 - hey guys knife I do H6 tag right it'll
244:57 - make it smaller so these are H um this
245:01 - is HTML this is Basics very very basic
245:04 - basic use of it and now what we're going
245:07 - to do is because I'm on Chrome we're
245:09 - going to hit inspect here and dive deep
245:12 - using the Chrome Dev tools it's a very
245:15 - powerful way to learn the structure of
245:17 - the website that you want to scrape you
245:20 - want to abuse this tool okay use this
245:23 - tool a lot the Chrome Dev tools so now
245:25 - I'm going to hover over and essentially
245:27 - what I want to do is I want to be able
245:28 - to get this week's forecast so I want to
245:32 - be able to find out what the weather is
245:34 - tonight Sunday Sunday night Monday and
245:38 - you know I also want to get the
245:39 - descriptions of it and I want to get
245:41 - what's the low and what's the high be
245:43 - able to put it in my Excel spread sheet
245:47 - so let's do it so first of all I want
245:49 - you to click this button over here okay
245:52 - the shortcut for this is command shift C
245:55 - on a Mac or you can just come over here
245:57 - click this allows you to highlight over
245:59 - each thing and then it tells you what
246:03 - element it is of a HTML or css file so
246:07 - goes okay this is an image element as
246:10 - you can see it says IMG do you know
246:12 - something so that dot pull left is a CSV
246:16 - class or sorry CSS class so let's go
246:19 - over here and check this out so it looks
246:23 - like we have a container here but this
246:26 - has a ID we have a div here and this has
246:28 - the ID of 7day forecast body which is
246:34 - very good which is exactly what we need
246:37 - to Leverage here so let's go ahead and
246:40 - use this because we know that once we
246:42 - have access to this we will have access
246:45 - to essentially everything else that's
246:47 - within this div so let's go to our code
246:52 - now you're going to need a few modules
246:55 - installed and I'm not going to walk
246:56 - through the full process of installing
246:58 - them because again those could turn into
247:01 - their own
247:03 - videos so let's go here and first of all
247:06 - we you need to install uh pip install
247:10 - beautiful soup 4 so that's step one
247:15 - another thing you're going to need is
247:16 - PIP install requests that's how you're
247:18 - going to make HTTP requests to the
247:20 - websites and then you want to install
247:24 - the last one which is pandas all right
247:27 - because I've already installed them for
247:29 - me it says requirement already satisfied
247:32 - for you it's going to take you through
247:33 - the installation process if you run into
247:35 - errors with installation process look up
247:38 - how to overcome them then once you solve
247:40 - it come back to this tutorial so once
247:43 - this is installed let's start writing
247:45 - some code so first of all we're going to
247:46 - do import requests and I'm going to also
247:50 - say from bs4 import
247:53 - beautiful soup like that all right and
247:57 - now essentially what I want to do is
247:59 - request this URL so I'm just going to
248:01 - copy this URL right here I'll go here
248:05 - and I'll say this page
248:08 - is equal to
248:10 - requests.get and then I'll pop in that
248:13 - URL right there we'll also create a soup
248:17 - object out of that page so that request
248:21 - thing that we just got we're going to
248:22 - use that to create a beautiful soup
248:24 - object and what beautiful soup allows
248:26 - you to do is makes the web scraping of
248:29 - the page really really easy it gives you
248:32 - nice structures it's able to find
248:34 - classes it's able to find uh par
248:37 - paragraph tags it's able to find headers
248:40 - and it understands CSS and it
248:42 - understands HTML so it makes your life a
248:44 - lot easier that's why we're using
248:46 - beautiful soup so let's go here in soup
248:49 - and go beautiful
248:52 - soup all right and we'll say page.
248:58 - content and then we will say and we'll
249:01 - give it HTML parser okay so it'll know
249:04 - that it's HTML and so it needs to parse
249:07 - as an HTML
249:09 - page all
249:11 - right and if I print this we should see
249:15 - something pretty weird so I'm going to
249:17 - run this piece of code I'm going to go
249:19 - here hit
249:22 - run all right so it says couldn't find a
249:25 - tree Builder the features you requested
249:26 - HTML parser do you need to install a
249:28 - parser
249:33 - Library oh
249:35 - yep HTML do parser not a hyphen parser
249:41 - so we have now let's try it again we
249:45 - will run the code okay so looks like it
249:48 - worked and as you can see the soup
249:52 - object is all of the HTML code that's on
249:56 - that page it's pretty much the source
249:58 - code of that page so if I go and I
250:02 - rightclick and I go I go view page
250:05 - Source it's essentially this whole
250:10 - thing all right so it has access to all
250:12 - of it but what's cool is that I can do
250:15 - things like that find all and I can go
250:19 - find all of like the a tags you know
250:23 - find all a tags for example and if I run
250:26 - it it's essentially finding all of the
250:29 - links so it's finding the
250:31 - noaa.gov link that's there um it's
250:35 - finding the web .gv link that's on that
250:39 - page it's finding the commerce.gov link
250:41 - that's on that page
250:44 - so um these all these links is able to
250:47 - find them right if I
250:49 - doind images or if I doind all you know
250:55 - short descriptions it'll find those as
250:59 - well so that's what's cool about
251:01 - beautiful soup makes your life really
251:03 - easy so let's go ahead and what we're
251:05 - going to do is we're going to
251:09 - create a variable that has this entire
251:13 - div stored inside of it that way we'll
251:15 - have access to this this div is what I'm
251:17 - talking about we'll have access to that
251:19 - div at all times so let's go to our code
251:23 - here and I'll say weak is equal to soup.
251:28 - find and we'll give it the ID and the ID
251:33 - what is the ID here the ID is 7day
251:36 - forecast body so because I don't want to
251:38 - make a mistake I'm going to click here
251:41 - once I click here you can see at the
251:42 - bottom it's highlighted this line I'll
251:45 - go to the ID and I'll doubleclick I will
251:49 - copy this I'll come back in here paste
251:51 - it so I'll make sure that this way there
251:54 - are no spelling
251:56 - errors as a programmer I know sometimes
251:58 - you want to do things quick and just
252:00 - type it out but the reason why you want
252:02 - to paste is not so you're faster but the
252:05 - real reason why you want to copy paste
252:07 - is as much as you can is so you're
252:09 - accurate and you don't make
252:11 - mistakes that's why I took the time to
252:14 - copy it even if it was small like if it
252:16 - was three letters I would still copy and
252:18 - paste because it has happened to me so
252:20 - many times that I'll make like a tiny
252:22 - little mistake like the one I made up
252:24 - here with html. parser where I wrote a
252:26 - hyphen
252:29 - here all right so we
252:33 - have this access this week let's first
252:36 - of all print printed out let's see what
252:38 - it shows us so we'll run our
252:41 - code all right so basically now what
252:45 - it's doing is showing us everything
252:47 - that's inside of that div that's all
252:52 - it's doing that's all it's showing us
252:54 - okay now it's not showing us the entire
252:56 - HTML page anymore it's just showing us
252:58 - that that's all we want anyways we need
253:00 - we just need to access to that one div
253:03 - so what do we do next well now what we
253:06 - want to do is we want to add access all
253:08 - of those objects or items whatever you
253:10 - want to call it we'll just call them
253:12 - items so I'm calling so I'm calling I
253:17 - this item number one what I'm
253:18 - highlighting here this is going to be
253:20 - item number two this is going to be item
253:22 - number three item four item five six 7 8
253:25 - n you get the idea okay so if you
253:31 - notice each of the each of these
253:34 - a uh list
253:38 - item okay so in HTML a list item has a
253:42 - tag of Li and an unorder list item has a
253:46 - tag of
253:48 - UL so you can see it says Li here and
253:52 - how we can access all of these by either
253:54 - using the tag LI or we can use the t uh
253:59 - class forecast
254:03 - Tombstone so let's say week. find
254:07 - all and let's just try Li and let's see
254:11 - what it gives us maybe we'll run into an
254:14 - error maybe we won't let's find out so
254:18 - when I hit Li actually let's comment
254:21 - this line
254:24 - out all right so when I hit Li I
254:29 - get a lot of things okay and now let's
254:33 - actually do instead of Li what we'll do
254:36 - is is we'll say find all and we'll say
254:40 - look for a class instead of that Li tag
254:43 - so we're going to go class and the
254:45 - tricky thing in beautiful soup is you
254:47 - can't just say the argument as class
254:50 - because that's means something special
254:51 - in Python so you got to do class
254:53 - underscore like that so class is equal
254:58 - to and then we'll say
255:01 - Tombstone actually we'll copy it so we
255:04 - don't make a mistake so I'll click here
255:07 - and I'll go forecast Tombstone and we'll
255:10 - paste it just like that all
255:17 - right actually maybe that there is a
255:20 - better thing that we can
255:24 - do so let's
255:27 - go all right so we have a div actually
255:31 - that contains all of these items I
255:33 - missed this div so this div actually
255:36 - contain contains it's a tombstone
255:39 - container so it actually contains the
255:44 - the blue part is what it contains right
255:46 - so you can see that it contains the
255:48 - where it says Sunday it also contains
255:50 - the image it also looks like it contains
255:53 - the description where it says chance
255:54 - showers and it also contains the
255:57 - temperature whether it's a low or a high
256:00 - so let's actually access the tombstone
256:03 - container class all right so we're going
256:06 - to go class class and uh instead we're
256:08 - going to say we're going to go Tombstone
256:11 - container if it lets me highlight it
256:13 - it's kind of tricky to highlight it's
256:15 - it's pretty
256:18 - secret well let's just click here and
256:21 - then let's dig a little
256:23 - deeper and this is the tombstone
256:26 - container right there so we're going to
256:28 - say get all of those
256:35 - guys okay and we're going to say get all
256:39 - of those guys okay so let's go boom boom
256:43 - do
256:45 - that and close this
256:51 - out and this we will call
256:57 - items okay this will call items and then
257:02 - we'll also print items so let's run this
257:05 - code now
257:07 - all right so you can see we have a
257:10 - list and each item in that list is
257:17 - essentially one Tombstone
257:20 - container so let's say that I get item
257:23 - zero in that list the first item index
257:26 - it by
257:27 - zero I get one Tombstone container so
257:32 - what is that it has the period name
257:35 - which is tonight if I go here you can
257:38 - see right there it says
257:39 - tonight uh the next thing I should see
257:42 - is this so if I hover over here this is
257:44 - the notice the paragraph tag in the CSS
257:49 - class here is period name so when I go
257:52 - here I see class period name is tonight
257:56 - when I go here the class here is short
257:59 - description short hyphen
258:01 - DEC and it should say slight chance
258:03 - showers and when I
258:05 - go
258:07 - to my code here so this is the image alt
258:11 - tag Let's ignore
258:13 - that let's look for the thing that we're
258:16 - searching for the short description
258:19 - one all right so the short description
258:21 - here says slight chance right just what
258:24 - we were looking
258:26 - for and slight chance showers and then
258:29 - we also have the temperature
258:34 - class all right which is this one right
258:36 - right over
258:38 - here so that's that's what each item is
258:42 - right so each item in that list will
258:43 - give
258:45 - you man it's it's kind of annoying
258:48 - because you can't SE it's hard to select
258:50 - that but each item is essentially that
258:52 - Tombstone container class this guy right
258:55 - over
258:59 - here okay Tombstone container
259:03 - boom boom Tombstone container the second
259:06 - one
259:07 - all right so now that we have that what
259:09 - we're going to do is now we'll
259:13 - find what we want to do
259:15 - is get all of the period names so where
259:19 - it says tonight where it says Sunday
259:21 - Sunday night we want to get all of those
259:23 - period names and be able to put it in
259:26 - one
259:26 - column then we want to be able to take
259:30 - all of the short descriptions and put it
259:33 - in a description
259:35 - column and lastly we want to be able to
259:38 - take all of the temperatures and put
259:40 - them in a temperature column so each of
259:43 - them is going to have their own
259:46 - columns so let's go ahead and do that so
259:51 - what I will do here is I'll say for
259:57 - items zero let's first of all just get
260:00 - that
260:01 - item's um period name so I'll do
260:05 - class
260:10 - equals I remember the class name was
260:12 - period so I'm going to just put that
260:16 - and first of all let's just print this
260:18 - guy and let's see what we
260:21 - get we will comment this out so when I
260:25 - print this out I get back this P tag but
260:28 - what I really want is the
260:31 - text the text that's in between the tags
260:34 - so what I can actually do is because
260:36 - it's a beautiful soup object I can just
260:40 - go and do get text like that and run
260:43 - this and when I run it gives me the text
260:46 - that says
260:48 - tonight now I can copy this line paste
260:51 - it and essentially just go and change
260:52 - the class name here to the next class
260:56 - which is short
260:58 - description so I'll do
261:01 - short description like that and get its
261:03 - class I'll run it and now it should say
261:05 - tonight and and slight chance
261:07 - showers which is what it says right
261:10 - there and then last thing I want is temp
261:13 - so I'm just going to call it by the temp
261:16 - class not temp low because this is temp
261:18 - high this is temp high so we're just
261:20 - going to get by the more General name so
261:22 - it works for every single Tombstone
261:27 - container and we'll go here and we will
261:30 - simply say temperature like that and
261:33 - when I run it you will see that I get
261:36 - back back those three things so now that
261:39 - I'm able to access all of those three
261:41 - things from the first Tombstone
261:43 - container now it's very simple I just
261:45 - have
261:47 - to collect all of them in a
261:51 - list and then just run a for
261:57 - Loop right to be able to access any of
262:00 - them so let's just go ahead and put them
262:03 - on
262:04 - all oh sorry it's already in the items
262:08 - list so items list already has them
262:11 - right now I'm only accessing the zeroth
262:13 - one which is in human language the first
262:16 - one now all I need to do is write a for
262:19 - Loop that goes through all of um all of
262:22 - those
262:24 - items what we're going to use is list
262:28 - comprehension because that's cool so
262:32 - here's what I'm going to do I'm going to
262:33 - say period uncore names is equal to
262:37 - and I'm going to say item for item
262:42 - [Music]
262:43 - in items except what I want to do to
262:47 - this item is I want to do find its class
262:52 - and make sure that the class says period
262:55 - name and then I also want to get its
262:59 - text all right so I want to find oh made
263:05 - a mistake here here just didn't write
263:07 - the equal sign that should work
263:09 - now all right so this is a list
263:13 - comprehension that essentially says Hey
263:16 - for each item in items as you Loop
263:20 - through it just do this to it and
263:23 - that'll essentially get me back the
263:25 - period name now what I'll do is I'll
263:26 - print period names so you can see what
263:29 - it
263:30 - is it's right here this line and right
263:34 - all it did was Loop through and just
263:36 - collect period names that's what we
263:40 - want okay so that's
263:42 - done now the second one that we're going
263:45 - to write is going to be short
263:48 - descriptions so we'll do short
263:52 - descriptions and we're going to say
263:55 - item. find so it's essentially going to
263:58 - be the same thing right so what I can do
264:00 - is I can just copy this guy come over
264:03 - here and paste it
264:08 - paste it move it up and then bada bam
264:13 - bada
264:14 - boom and we'll come here and instead of
264:18 - that we'll say short description and
264:20 - then I'll copy paste this and I'll come
264:23 - here and I'll say
264:25 - temperature and I'll change this to
264:30 - temperatures all right so all of these
264:33 - now get us everything that we want I'll
264:35 - print the these out as well for you so
264:38 - you can see what's going
264:42 - on all right I'll run this and you can
264:46 - see now we have three lists with what we
264:49 - want and that's exactly what we needed
264:52 - and now I'm going to show you something
264:54 - really cool initially what my instinct
264:58 - was was to write it to a CSV file well
265:02 - you have to do a little bit of coding
265:03 - for that it takes some time it takes
265:05 - some stack over loing it's kind of
265:07 - obnoxious there is a
265:10 - beautifully elegant and easy way to
265:13 - actually write this to a CSV file and
265:15 - also to do data analytics with it using
265:19 - pandas so let's use pandas here and it
265:22 - makes it so easy to turn this data into
265:25 - a table that you can then actually use
265:27 - manipulate and do stuff with so let's do
265:31 - that let's go up at the top and remember
265:33 - at the start I told you install pandas
265:36 - so now what we're going to do is we're
265:38 - going to go here and install pandas I
265:41 - believe P comes before R so let's do it
265:44 - like this pandas as
265:47 - PD and now what we're going to say is
265:50 - we're going to say weather stuff is
265:53 - equal
265:54 - to pandas do dat frame and what data
265:59 - frame takes is actually a
266:04 - dictionary all right
266:06 - and we are going to say period so the
266:09 - column is going to be called period and
266:11 - the values of it are going to be period
266:13 - names so it's going to be this list that
266:16 - we made
266:17 - here and then the idea is essentially
266:20 - the same we're just going to repeat that
266:21 - same process and we're going to say the
266:24 - next one is going to be short
266:29 - descriptions are just going to be oh
266:32 - comma goes here going to be short
266:35 - descriptions
266:37 - okay and then lastly we have
266:42 - temperatures which are just going to be
266:47 - temperatures oops comma make sure you
266:49 - have all the commas in the right
266:52 - place all right that is essentially the
267:02 - dictionary that's a much better way to
267:04 - actually write the dictionary
267:06 - so yeah that's the dictionary we got our
267:08 - data frame we put our column
267:13 - names these are the values that go in
267:16 - that column so that entire list is just
267:19 - going to go there the entire list of
267:22 - short descriptions is going to go under
267:24 - the short descriptions column the entire
267:26 - list of temperatures is going to go
267:28 - under the temperatures column and one
267:29 - little trick I want to show you guys is
267:31 - you can put a comma here it won't give
267:32 - you a syntax error and it's just a good
267:34 - habit to get into because because then
267:36 - when if you ever go back to that
267:38 - dictionary and add more things you'll
267:39 - never run into an error so just a good
267:42 - code
267:44 - hygiene and if we print this out now
267:48 - let's see what this might look like so
267:49 - let's print this out so you can see that
267:52 - pandas actually turns this into a really
267:55 - I'll comment all the other print
267:57 - statements out now because we don't need
267:58 - them
268:01 - anymore and you can see what it does is
268:04 - it turns it into this beautiful looking
268:06 - table which you can now take a look at
268:09 - and do stuff with and you know figure
268:12 - out the means and figure out the
268:14 - averages and all that kind of nerdy
268:15 - stuff but we're not going to get too
268:17 - much into that because that will be a
268:19 - whole another video with
268:21 - pandas our job is not to use do that we
268:24 - are just learning how to do web scraping
268:26 - and to make this data useful the last
268:29 - cool thing I want to show you that makes
268:31 - it all super useful really handy trick
268:34 - is this awesome feature that Panda has
268:37 - so I can just do weather
268:39 - stuff. 2or
268:43 - CSV all right it has this
268:47 - beautiful
268:48 - um thing you can do which is just called
268:51 - that two
268:52 - CSV and then just give it a CSV name so
268:55 - we're going to call it let's call it
268:58 - weather. CSV and I'm going to save I'm
269:02 - going to run this and right when I run
269:05 - it I get the CSV file over here which
269:08 - looks like this but let's take a look at
269:09 - what it looks like in our computer so we
269:12 - will go
269:14 - here and I will hit
269:17 - that
269:19 - and boom look at that it's looking super
269:23 - nice Super Fresh and you can see the
269:26 - entire data table right there I can also
269:30 - open it up in Excel if I want
269:32 - to Let's zoom in a little bit so you can
269:36 - see
269:39 - it right and you can see we have our
269:43 - column called period with all of this
269:45 - data we have short descriptions with all
269:47 - of this data temperatures all of this
269:49 - data so that's so freaking cool right we
269:52 - just created a CSV file from scraping
269:56 - the internet scraping something online
269:58 - now you can just take that URL and pop
270:01 - something else in and that'll also work
270:03 - so for
270:04 - example
270:06 - forget Los Angeles weather maybe we can
270:09 - look at the weather of say
270:12 - Chicago so let's type in Chicago here
270:16 - and we will hit
270:18 - go hazardous weather outlook wow wind
270:23 - advisoring effect so that's pretty scary
270:27 - huh so let's
270:30 - go let's copy this and for you it might
270:33 - look different right because you might
270:34 - be doing this video uh following
270:36 - tutorial at another time so I'm going to
270:38 - go here and I'm going to paste the new
270:46 - URL all right I pasted the new URL
270:51 - here and now let's run this code and
270:55 - we're going to go take a look at our CSV
270:58 - file now don't
271:03 - save and view will will be
271:09 - 300% and take a look at
271:12 - this now the data is completely
271:14 - different right now it's the Chicago's
271:18 - temperature so if you were making a web
271:20 - app you could use web scraping to use
271:24 - somebody else's website to dynamically
271:27 - generate stuff on your own
271:30 - website pretty powerful stuff all right
271:34 - hopefully you've enjoyed this tutorial
271:36 - that is all I had for you today thank
271:38 - you so much for watching this video if
271:40 - you like the video give it a like if you
271:44 - enjoyed this and you want to keep seeing
271:45 - the new tutorials that are going to be
271:47 - coming out and make sure you subscribe
271:49 - to the Channel with that said thank you
271:52 - so much for watching as always this is
271:54 - kzy I love your face and I'll see you in
271:58 - the next
272:00 - [Music]
272:04 - video hey what's up guys this is Aaron
272:07 - from clever programmer and today I just
272:09 - want to talk about uh a cute little
272:12 - function in Python called zip so this
272:14 - isn't the kind of zip that you would see
272:16 - when you are zipping or unzipping a file
272:18 - in Python but uh it's actually uh a
272:22 - function that you have in the language
272:25 - that allows you to glue things together
272:29 - to make things easier to deal with that
272:31 - might have made no sense but I'm about
272:32 - to explain it in code right now so let's
272:34 - get right into to
272:35 - [Music]
272:41 - it all right so go to Ripple it uh
272:44 - Ripple it as usual I'll create a new
272:46 - repple here um go down to python whever
272:49 - it happens to be in the list create
272:52 - reppel and uh all right we are ready to
272:55 - go so zip um I might give a little bit
272:58 - of an explanation before I start
273:00 - actually so zip what it does is it will
273:03 - take any iterables in Python so an
273:06 - iterable is just something you can
273:07 - iterate over in a for Loop that be a
273:09 - list a tuple uh I believe you can
273:11 - iterate over a dictionary you just can't
273:12 - go in any specific order it's just going
273:14 - to iterate in any random order and um
273:17 - other things like that like iterables
273:18 - are things you can go over but if you
273:19 - have an iterable then you can actually
273:22 - map um I might be wrong there iterable I
273:25 - think it it has to be I know for sure
273:26 - for lists and tupal if it's in order
273:29 - then what it does is it takes
273:30 - corresponding elements and it will glue
273:32 - them together so the first element from
273:34 - two lists it'll put those together into
273:36 - a two element Tuple and put that into
273:38 - the first element of one list and then
273:40 - so on it'll take the the second element
273:42 - of both lists and then stick them in a
273:44 - two element tle and put that in the
273:46 - second element of the list and um it'll
273:48 - just keep doing that until everything
273:49 - has been paired up or um even if you
273:52 - have three list then it'll keep doing
273:53 - that until everything's tripled up it
273:54 - might be easier to understand if it's in
273:56 - code but that's the best I could do
273:58 - verbally let's just get right into it so
274:00 - if we have a list one here um which is
274:03 - just going to have very simple numbers
274:05 - like this uh list I forgot the equal
274:09 - sign um that's better looking nice and
274:13 - clean um and then let's just do
274:16 - something like
274:21 - this put one
274:23 - two uh
274:26 - three and four and five cool so now we
274:32 - have our two lists now as you can see
274:34 - both of these list are the same length
274:36 - which is important not required but very
274:40 - it makes things
274:42 - easier or cleaner I should say it makes
274:45 - things cleaner when you're using zip
274:47 - it's not required but it makes things
274:49 - definitely cleaner so we'll start with
274:50 - this
274:51 - example if we have list one and list two
274:54 - then I'm just going to call this final
274:55 - list we are going to make a new list
274:57 - here called
274:59 - zipped and all it's going to do is it's
275:02 - going to call the function zip which is
275:05 - is literally just zip just like that zip
275:08 - and then all you need to do is just put
275:09 - in the two lists in here just like that
275:12 - so this will actually work in Python 2
275:16 - this is something I came across um I I
275:19 - didn't realize that it didn't work in
275:22 - Python 3 this will work in Python 2 but
275:24 - in Python 3 you actually need to cast
275:26 - this to a list so before I run this just
275:28 - be aware that there's a little change
275:30 - here whenever you're calling zip
275:32 - sometimes if you want to print it out
275:33 - you need to cast it to a list first
275:34 - before you print it out so zipped now is
275:37 - a list but we zip together list one and
275:39 - list two so remember this is list one
275:41 - here the numbers 1 through five integers
275:43 - 1 through five and list two is these
275:46 - five strings 1 through five when I run
275:49 - it when you see it you'll understand
275:50 - exactly what it's doing oh stupid me I
275:53 - didn't put in the print statement print
275:55 - zipped now let's run it so as you can
275:58 - see here what happened is it took the
276:00 - corresponding elements of each list and
276:02 - it stuck them in pairs and then put each
276:04 - of these pairs in its own list so this
276:06 - list itself is of length five just like
276:09 - the original two lists but each element
276:11 - is actually corresponding elements from
276:13 - the other two lists pretty cool right um
276:16 - one thing I want to point out is that if
276:20 - the lists are not the same length so
276:23 - let's add a six to this list and then
276:26 - try it
276:27 - again then this six seems to be ignored
276:30 - so what what's going on there actually
276:32 - what's going on there is python will
276:35 - always truncate truncate is just a fancy
276:37 - word we use in the programming Community
276:39 - to say cut off just ignore you truncate
276:42 - it off like you're cutting a tree trunk
276:43 - you know what I mean just chop it off
276:46 - like a finger if it's there then it'll
276:47 - just truncate anything that that is
276:50 - excessive so the the shorter list will
276:52 - take precedence so the six is ignored
276:54 - but if this was five and then we say we
276:56 - added an element here and we put six
276:58 - here then this six here and the second
277:01 - list will actually be truncated will be
277:03 - cut off of your finger as you can see
277:06 - it's it's ignored both times the the six
277:08 - number pops up but then of course as you
277:10 - guys have probably guessed and expected
277:11 - if I put in a six then voila it pops up
277:14 - there same thing goes if there's three
277:16 - lists if you actually have a third list
277:18 - here and then you have some other things
277:19 - and these become tupal of length three
277:22 - then whichever one of the three is
277:24 - shortest that will be the one of what
277:26 - determines this final list okay so
277:29 - that's how that works when you have
277:31 - different length lists but we're just
277:32 - going to stick to same length list
277:34 - because because it's just a little bit
277:35 - easier to understand I'm going to go
277:36 - back to five because I don't want these
277:38 - going off the screen like they are right
277:39 - now I want to fit everything here so you
277:41 - guys can see everything nice and clearly
277:43 - because when people don't do that um it
277:46 - pisses me off continuing on I already
277:48 - showed you guys how to zip stuff
277:50 - together that is uh very handy now
277:52 - another thing you can do is actually
277:54 - unzip things so okay let's let's say we
277:57 - went from these two lists these two long
278:00 - lists to one long list of little pairs
278:03 - which is another way you can think about
278:04 - it you're going from two long lists to
278:06 - one long list of little pairs or three
278:09 - long lists to one long list of little
278:11 - trios and so on and so forth but if you
278:13 - want to go in the opposite direction you
278:15 - want to go from one long list of little
278:17 - pairs or little trios and then to go
278:19 - back to two long lists or three long
278:22 - lists then that's called unzipping but
278:26 - there isn't a a function called unzipped
278:29 - in Python actually what you do is you
278:31 - still use the zip function but you use a
278:33 - little special character
278:36 - before the argument you give to the
278:38 - function to actually reverse the order
278:40 - of the zip so you're zipping and
278:41 - unzipping with this tiny little star um
278:44 - asterik I'll show you that now so we
278:47 - have this zipped variable here z i PP
278:51 - D and it is a list it has to be a list I
278:53 - realized uh in Python 3 you have to make
278:56 - it a list for it to work um there there
278:58 - are some weird changes from python 2 to
279:00 - Python 3 but in Python 3 you need to
279:04 - make sure it's a list to to be able to
279:06 - unzip it so the way you can unzip it is
279:08 - I'm just going to name it unzipped to be
279:10 - very clear um this is called
279:13 - self-documenting code by the way uh I
279:15 - may have not mentioned it before but
279:17 - self-documenting code is just using
279:19 - function names and variable names that
279:20 - explain themselves so actually using I
279:23 - in a for Loop for I in range 10 or
279:25 - something it's usually not that good you
279:27 - want to not use I and use something else
279:30 - and um it's just better to be descript
279:33 - this this list is going to be an
279:35 - unzipped list just the the same way that
279:36 - this uh list became a zipped list so
279:38 - unzipped is just going to be this zipped
279:41 - list but unzipped so literally all we do
279:44 - is
279:45 - just we're going to have to because of
279:47 - Python 3 we got to put the list in there
279:48 - again that looked like a
279:50 - nipple um inappropriate sorry if you're
279:53 - under an appropriate age we're going to
279:55 - just call zip again here and then
279:58 - originally you might think okay like
279:59 - wouldn't it just be like unzip and then
280:01 - you stick zipped in here and it's nice
280:02 - and done but no it's actually the same
280:04 - function zip but all you do is before
280:07 - this thing I mentioned earlier you put
280:09 - an aster a little star just like that
280:12 - almost C style like like de referencing
280:15 - a pointer if you know what the heck that
280:16 - means if you do you're cool if not you
280:19 - can be cool we'll we'll I'm pretty sure
280:22 - we'll get you there we'll get you there
280:23 - at some point just stick a little star
280:25 - there in front of the zipped list here
280:26 - and this will actually unzip this list
280:28 - and give us from this output bring it
280:30 - bring us back to this output so let's
280:31 - just see what the heck happens first
280:33 - let's check if there's any errors no
280:34 - errors and then print this out just like
280:37 - I printed the zi like that and click run
280:41 - and Magic you see I went from this I we
280:44 - went from two separate lists here okay
280:47 - two separate lists and then we got this
280:50 - and zipped it together to get one long
280:51 - list of little Pairs and then we went
280:53 - from this long list of little pairs back
280:54 - to two separate lists or actually tupal
280:57 - in this case I mean you can cast them to
280:59 - other things if you like but in this
281:00 - case they were c um put in tupes one uh
281:03 - list of two long tupes these this which
281:05 - is equivalent to these two original
281:07 - lists so that's basically what the zip
281:09 - and inverse of zip the inverse function
281:12 - functionality of zip can do so it's like
281:14 - a dual function you can kind of do two
281:16 - things with it it's two functions in one
281:17 - kind of cool you can do that with zipped
281:19 - but another thing that I want to mention
281:21 - is the the primary time zip is actually
281:24 - used so the I noticed that whenever I'm
281:26 - using the zip function most often it's
281:29 - to be able to get enough lists or
281:33 - variables in a scope if that made sense
281:35 - to you good if not let me explain if you
281:39 - are inside of an if statement or inside
281:40 - of a for Loop you know that the
281:42 - variables you have inside there are
281:44 - actually local to that little that
281:46 - little indented area if you have a chunk
281:48 - of code and it's indented out or like if
281:50 - you're in Java or C++ or something you
281:52 - have brackets anything in that chunk of
281:54 - code it's like one unified hole all the
281:56 - code in there um can share all the
281:58 - variables and anything outside of it but
282:00 - if you had a variable inside the the if
282:02 - statement or the for Loop and then you
282:04 - to read into into the if statement or
282:07 - into the for Loop you wouldn't actually
282:08 - be able to read those variables a little
282:10 - bit uh tricky to understand but it makes
282:12 - sense if you've been coding long enough
282:14 - it it makes sense on the on a on a
282:16 - technological level so it's just
282:17 - something you have to accept um you
282:19 - don't really have to understand why it
282:20 - works but just understand how it works
282:23 - understanding why is very fascinating
282:24 - you can go into that if you want at some
282:25 - Future Point there's a lot of resources
282:26 - just Google it it's pretty cool but
282:29 - going back to scope using zip is very
282:32 - handy if you want to get a bunch of um
282:34 - things into a a um different
282:39 - scope um let's see so for let's just try
282:43 - to have a for Loop so let's say I have
282:44 - these two lists up here and then I want
282:46 - to actually iterate
282:48 - over on both of these lists within the
282:51 - for Loop so like how would you do that
282:52 - besides like having an ugly um for I in
282:58 - range I in range five and then indexing
283:03 - list one I and indexing list 2 at
283:09 - I actually this might not even be a
283:11 - scope thing I might have had a little
283:12 - brain fart there but that scope thing is
283:14 - still a very relevant piece of
283:16 - information to programming in general so
283:17 - definitely hold on to that but I might
283:19 - have fussed up there a little bit you
283:22 - actually don't need that because you're
283:23 - just trying to read here but if you
283:24 - actually want to get multiple things
283:26 - into a scope without avoiding this uh
283:29 - gross syntax here um you can actually
283:33 - use the zip function instead so instead
283:35 - of having for I in range and having this
283:37 - index a very C style kind of way of
283:38 - doing it we can get rid of this crap
283:41 - okay and do it the python way which is
283:43 - the arguably cooler way so you can just
283:50 - say
283:51 - for list
283:55 - one list
283:57 - two
283:59 - in there we go yeah IN
284:02 - Zip actually we shouldn't call this that
284:04 - let's call it L1 and L2 okay so this is
284:09 - actually tupo let me put it in
284:10 - parenthesis just to be
284:12 - clear because it'll make more sense so
284:14 - this is actually a two-part Tuple if you
284:16 - don't if you don't know what this is
284:18 - look it up um it's it's a way to un
284:22 - unpack tups automatically just Google
284:24 - that and then see what that means in
284:26 - Python it's kind of a cool little thing
284:27 - to save space you can do multiple things
284:28 - on one line so we're just going to zip
284:30 - together these two lists and what
284:32 - happens here is now in this in this loop
284:36 - I now have access to whatever iteration
284:38 - I'm on I have access to both this
284:40 - variable and this variable or this
284:43 - element and this element at the same
284:44 - time by using L1 and L2 so let's just do
284:47 - that so I'm going to print L1 and I'm
284:49 - going to print
284:51 - L2 just like that and print it and as
284:55 - you can see each iteration it actually
284:57 - prints one and then one the number one
285:00 - and then the string one the number two
285:01 - and then the string two in each
285:02 - iteration so this is the first iteration
285:04 - it's the second iteration the third
285:05 - iteration fourth iteration so on and so
285:07 - forth however many times you want to go
285:09 - but the point I'm trying to make here is
285:10 - you can actually zip together a bunch of
285:12 - different lists and have access to all
285:14 - of those corresponding elements in each
285:16 - list within the for Loop so let's say I
285:18 - had I had 20 lists and I wanted to zip
285:20 - all 20 together and then I had a two of
285:22 - length 20 I could actually use all 20 of
285:24 - those variables in the for Loop to
285:26 - actually do interesting calculations and
285:28 - whatnot very cool very handy so now I
285:30 - want to go through an actual example
285:32 - besides this very simplistic one so
285:33 - let's just delete this I have a nice
285:36 - little nice little example printed out
285:38 - for you guys and it's going to be called
285:43 - sentences uh we're going to be creating
285:45 - sentences
285:47 - from different lists
285:51 - uh I forgot to actually okay so we're
285:53 - going to have we're going to be creating
285:55 - sentences from different lists so
286:01 - items what did I put here items equals
286:07 - apple
286:10 - banana and
286:15 - range and then also this is a little
286:17 - shopping cart example it's coming back
286:18 - to me now I should have looked at this
286:20 - before I started the video that is uh
286:23 - shame on me um
286:26 - oops but now I have items we're going to
286:28 - have different items we're going to have
286:29 - different
286:30 - counts and then we're going to have
286:32 - different prices so you kind of see how
286:36 - these different elements in each list is
286:38 - going to correspond so if you bought
286:40 - three apples if you bought an apple you
286:42 - bought three of them and then the price
286:44 - was uh I don't know 9
286:46 - cents and then bananas are 25 cents and
286:50 - then oranges are 50 cents something like
286:52 - that okay these this is the cor three
286:55 - corresponding lists now we want to
286:57 - access be able to access this first
286:59 - element first element first element all
287:01 - at the same time in the same iteration
287:03 - of a four Loop so so we can construct a
287:05 - sentence the sentences I'm going to try
287:07 - to create are I bought three apples at
287:09 - 99 and I bought six bananas I bought six
287:13 - bananas at 25 cents and so on that's
287:15 - kind of the idea that I want to
287:17 - implement here so let's start the for
287:19 - Loop up so it's going to be remember you
287:22 - can do those that cool little Tuple
287:24 - unpacking thing I'm going to have item
287:25 - I'm going to have count and I'm going to
287:27 - have
287:29 - price so that's how I access uh these so
287:32 - this is an item in the items list so
287:34 - that's going to be put in here this is a
287:36 - count in the counts list so that's going
287:37 - to be put in here and this is a price
287:40 - this double this floating Point number
287:41 - is going to be the price in this prices
287:44 - list that's going to be stuck in here
287:45 - okay so this is going to be apple this
287:47 - is going to be three and this is going
287:48 - to be 9 in the first iteration and then
287:51 - in the second and third iteration it'll
287:52 - be the same thing for banana and orange
287:54 - okay um you can so of course we're going
287:58 - to have to zip these three together so
288:00 - items counts prices I forgot to mention
288:03 - if you're doing this cool little trick
288:05 - with zip here you might have already
288:07 - noticed that you might have been
288:08 - objecting objecting earlier like what
288:09 - the heck Aaron you got you didn't cast
288:11 - it to a list you I thought you said on
288:12 - Python 3 you always have to cast it to a
288:14 - list that is only if you're trying to
288:15 - print it the thing is this ZIP object
288:17 - that is returned from this function can
288:20 - actually be um put in this for Loop like
288:23 - this and you do not need to cast it to a
288:25 - list because we're actually printing
288:27 - this ZIP function return
288:32 - data so you can just leave it like that
288:34 - just leave it as zip and it'll actually
288:36 - just automatically zip it together and
288:38 - automatically pick out this nice
288:39 - unpacked triple Tuple for you so that's
288:41 - all clean that is all done in one line
288:43 - and now we have access to these three
288:45 - variables in each iteration these three
288:47 - then those three then these then those
288:49 - three I I might have screwed that up
288:52 - again but you guys are probably getting
288:54 - used to me screwing up I hope if you're
288:57 - still there so what I want to do here is
288:59 - actually create some sentences so the
289:02 - sentence I wanted to create was
289:05 - um
289:06 - sentences. append so we're going to have
289:08 - to add to the sentences list of course
289:10 - or actually let's make
289:12 - this a little bit cleaner let's put
289:15 - sentence making changes on the Fly here
289:17 - so sentence is going to
289:19 - be we're just going to glue some strings
289:21 - together I bot space count space or a
289:28 - plus uh
289:31 - space ibought count
289:36 - space
289:39 - item no sorry
289:41 - item and
289:45 - then
289:47 - add there if you don't know what's
289:49 - happening here just wait till I'm done
289:51 - encoding this slide and I'll explain it
289:52 - real quick if you do know what's going
289:53 - on then just put it on two times and zip
289:56 - through this real
290:00 - quick
290:02 - at
290:09 - there we go I always get confused when
290:10 - I'm concact nating these strings like
290:11 - this it's so easy it's so easy to make
290:14 - an error I think I did this right though
290:17 - so what's happening here is you can add
290:18 - strings together right and when you add
290:19 - two strings then they are just added
290:22 - together into one big string so what
290:24 - this should output is I bought for the
290:27 - first iteration it should be I bought
290:29 - three space Apples because I added this
290:32 - s here at
290:35 - space 99
290:39 - Cents actually let's go like
290:42 - that sense sents each and don't forget
290:46 - to space there okay so that's what's
290:49 - happening there I'm constructing this
290:51 - this this string here and then I want to
290:52 - append the sentence to the list okay
290:56 - that's what's going on however when we
290:59 - get these three elements here this is
291:01 - still a string this is still an integer
291:03 - and this is still a floating point a
291:05 - double a decimal point number okay so
291:07 - what we actually have to do is is
291:08 - convert all these to a to Strings by
291:11 - casting them so we could just go like
291:13 - this stick it in like that which is what
291:15 - you could do on all three but I might do
291:18 - it like this because it just seems a
291:21 - little bit
291:23 - more less
291:26 - messy I think that was a weird
291:28 - contradiction there a lot more less
291:30 - messy but but you I'm pretty sure you
291:33 - guys got the the point uh we are going
291:35 - to do this this is another little cool
291:37 - thing you can do with
291:39 - unpacking so as you can see these
291:41 - corresponding elements here are all
291:43 - going to be casted and then put into new
291:46 - new names or the same names but they're
291:48 - just going to be overwritten so pretty
291:49 - much what I'm doing here is I'm taking
291:50 - item count and price these three and
291:52 - then I want to make them all strings so
291:54 - I just stick them in Here and Now item
291:55 - count and price are all strings
291:57 - technically I don't have to make this
291:58 - item a string because it's already a
292:00 - string but just to keep it consistent
292:02 - and make it easy on the eyes I'm going
292:04 - to leave it like this so let's see what
292:06 - happens when I print out sentences now
292:09 - because we went through we zipped all
292:10 - these three things together we converted
292:12 - all the items to Strings and everything
292:14 - we constructed a sentence using one
292:16 - little element from each of these lists
292:18 - and then we stuck one of the sentences
292:20 - in the sentence list and we did that
292:21 - three times so there should be three
292:22 - sentences in this list that we about to
292:24 - print out let's print it out right now
292:27 - go over here so you can see it and see
292:30 - what happens perfect I I uh I I dragged
292:33 - this over over the perfect amount look
292:34 - at that yeah things work out sometimes
292:37 - don't they right mom so um as you can
292:42 - see we have three sentences here it says
292:43 - I bought three apples at 99 cents each I
292:45 - bought six bananas at 25 cents each and
292:48 - I bought four oranges at five um 50
292:51 - cents each or 0.5 cents each I guess
292:53 - that that screwed up I this is probably
292:55 - not right but I mean it it the code
292:57 - worked the way it was supposed to I'm
292:58 - pretty sure you guys get the idea if you
292:59 - want to be able to zip together a bunch
293:01 - of things into a for Loop or an
293:03 - statement or or uh I'm not sure if you
293:05 - can into an if stat I have to think
293:06 - about it but definitely for a for loop I
293:08 - use it a lot for four Loops zipping
293:09 - things together into four Loops this is
293:11 - a very very handy function um don't
293:13 - forget about the unzip thing the little
293:14 - star thing you can put before if you
293:15 - ever need to do that you can actually
293:17 - get really crafty with these getting
293:19 - zipping a bunch of big Tuple list
293:20 - together and when you're doing data
293:21 - analysis very very useful but that
293:24 - pretty much wraps up the zipped fun
293:26 - function there um one of my favorite
293:28 - functions in Python for sure just
293:29 - because it makes everything so nice and
293:31 - clean but this is uh very useful for
293:34 - like I said going over large uh data um
293:37 - doing data analysis and whatnot those
293:38 - kind of Statistics things but yeah
293:40 - definitely stay tuned you guys thank you
293:42 - so much for watching that is the end of
293:43 - this long dry out video as usual that's
293:45 - my signature and um yeah I'll see you
293:48 - guys next time
293:53 - [Music]
293:57 - goodbye hey you in this video we have
294:00 - put together an amazing app for you with
294:03 - python it's the Tic Tac Toe app and we
294:05 - are going to go through the process of
294:07 - billing it from complete scratch all the
294:10 - way to the finish something special that
294:12 - we got for you in this video is that we
294:14 - are going to gift you this app at the
294:17 - end so all it will be is it's going to
294:20 - be just a link and we're going to send
294:22 - you that link and you'll be able to use
294:24 - this application on your own and steal
294:26 - it and also have access to the entire
294:28 - code base just in case for some reason
294:31 - if you're trying to build it with us you
294:32 - cannot complete it or you run into any
294:35 - kind of Errors okay this way you'll be
294:37 - error free so with that said and before
294:41 - we jump right into it this video is made
294:44 - by Aaron berth who is our software
294:47 - developer and a new addition to the
294:50 - clever programmer team he's an amazing
294:52 - developer he's new to the team in terms
294:55 - of making trainings and tutorials so
294:58 - this is his first app show him some love
295:00 - and our goal in the future is to get
295:02 - Aaron to to make a lot of awesome coding
295:05 - tutorials for this channel I hope you
295:07 - love it please leave a comment and uh
295:10 - tell him something encouraging with that
295:12 - said let's jump right into
295:16 - [Music]
295:30 - it hey what's up guys this is Aaron from
295:33 - clever programmer and today we are going
295:35 - to be coding a tic TCT Toe app in Python
295:39 - so let's jump right into
295:40 - [Music]
295:44 - it first let's go to reel.it just type
295:48 - that in url bar uh follow along please
295:51 - so you can learn uh make an account if
295:53 - you haven't already this is called repet
295:55 - uh once you done with that click on my
295:57 - reppel um you'll be on this page it'll
296:00 - probably be empty you won't to have this
296:01 - stuff here click on the red plus sign
296:03 - click on python which will automatically
296:04 - become Python 3 and boom you'll be in an
296:07 - empty repple here so all this is is just
296:09 - a nice little environment where you can
296:11 - code on this website you have to worry
296:12 - about any setup or anything it's just
296:14 - nice and clean and it doesn't break
296:16 - which is very nice because sometimes
296:18 - you're coding on your own computer like
296:19 - there's a lot of weird Eda edge cases
296:21 - and it's just a you know so on the left
296:24 - here we have a little file directory uh
296:26 - we're only going to have one file for
296:27 - this project so you don't really have to
296:28 - worry about that over here we have our
296:29 - one and only file open main.py and over
296:31 - on the right side we have a little
296:33 - python environment so let's uh check
296:36 - this out uh yo yo yo yo yo yo yo okay yo
296:40 - see so it
296:41 - works um this is where uh the game will
296:44 - be played at uh this little command line
296:46 - here and uh let's Jump Right In so tic
296:48 - tac toe um sometimes I I attack small
296:52 - problems like this just straight in I
296:54 - just start coding uh just kind of hacky
296:56 - but it's kind of fun too for these
296:57 - little things but if you are working on
296:59 - a big code base you actually want to
297:01 - think about it first um so let's at
297:04 - least do that first just have like a
297:06 - little bit of a uh overarching game
297:09 - logic so let's think about it well we're
297:11 - going to need a board okay and then
297:13 - we're going to need to be able to
297:14 - display that
297:16 - board um we're also going to need to uh
297:21 - play a game so like start the game and
297:24 - then have it keep going like alternating
297:26 - turns from X to O to X to O I'm assuming
297:29 - you guys don't how to play tic tac toe
297:30 - if you don't please look it up uh all
297:33 - right welcome back so uh we're going to
297:35 - need a function to play
297:38 - game um we're also going to need a
297:40 - function to check if there's a win so
297:42 - like check win we're also going to need
297:43 - a function for uh checking if it's a tie
297:46 - um we'd also maybe need like a
297:49 - function to um flip between players so
297:52 - flip from player X to player o uh flip
297:56 - player and um yeah and like within check
297:58 - win then we're probably going to need to
298:00 - do something like uh check rows
298:03 - to see if there's a win and then maybe
298:06 - check columns to check the uh all the
298:09 - columns and then also you're going to
298:11 - have to check
298:13 - diagonals so like to check if there's a
298:15 - win we would check all these things and
298:17 - then if if there's a three in a row in
298:18 - any of these then we could say yeah
298:20 - somebody won and then just return the
298:22 - player and so on and so forth um
298:24 - checking if there's a tie maybe we could
298:26 - just be like hey um if the entire board
298:29 - is full and then there's no winner then
298:33 - then yeah then it's a
298:35 - tie and um yeah I think maybe something
298:37 - like that um maybe even one more like
298:40 - play game maybe there could be something
298:41 - like handle a turn um I forgot to put a
298:45 - little comment sign here but yeah hand
298:47 - handle a turn uh like that like maybe
298:50 - this is like a nice General over
298:51 - overview kind of high level idea of the
298:54 - game so we we're going to need a board
298:56 - we're going to need a way to display
298:57 - that board we're going to need uh
298:58 - something to run in an overarching game
299:00 - we're going to be able to handle turns
299:01 - when somebody takes a turn like taking
299:02 - in put putting it on the board making
299:04 - sure that it's valid input and then
299:07 - after we handle the term we're going to
299:08 - have to check if there's a win we can
299:10 - check the rows columns and diagonals and
299:12 - then we can check if there's a tie as
299:13 - well and then after all that's done um
299:16 - then we can flip to the other player and
299:18 - then um like go back and then just
299:20 - repeat the whole process something like
299:21 - that I mean it might change as we go but
299:24 - just like have a general idea of what's
299:26 - going on when you want to code something
299:28 - like if I was actually coding a
299:29 - different game like rock paper scissors
299:31 - maybe I would I'm not going to type it
299:32 - out but but I'll just tell you guys if I
299:34 - was trying to code rock paper scissors
299:35 - well I would need okay rock paper
299:37 - scissors I could have like the words and
299:40 - then I would need some way to um select
299:43 - rock paper scissors and then some way
299:45 - for the computer to randomly generate
299:46 - rock paper scissors and then I'll need a
299:48 - way to compare them and then a way to um
299:52 - see who wins and so on and so forth so
299:54 - like just thinking breaking the the
299:56 - problem down into its little pieces like
299:58 - we did here um and then um actually
300:02 - start implementing it from there it'll
300:03 - most likely change it always changes for
300:05 - me I mean but as long as you have an
300:07 - overarching like high level
300:09 - understanding then you are at least
300:10 - Equip to start coding so I might delete
300:13 - this but I'll probably just keep it here
300:14 - at the bottom why not so let's just
300:17 - start so nice and easy what are we going
300:19 - to need first well first we are going to
300:21 - need a
300:23 - board very simple I am just going to
300:26 - make it list let's just do that and um I
300:28 - want each one to be um each position on
300:33 - the board to be an empty spot if it's
300:35 - empty I just want to be a minus like
300:36 - that all right and then let's
300:39 - just uh copy this nine times four five
300:43 - six seven eight nine bada bing bada
300:47 - boom
300:51 - uh and voila our game board was coded in
300:56 - approximately 27 seconds awesome it's
300:58 - just a simple list I just uh spread it
301:01 - out like this so it's easier to see so
301:02 - now we have our empty game board for
301:04 - tkac toe awesome right let's move on
301:07 - next we are going to need a way to
301:10 - display that board so uh let's get that
301:13 - going because right now when we hit run
301:16 - absolutely nothing happens let's do that
301:18 - first so what would that look like um we
301:21 - just going to need a function um
301:24 - [Music]
301:25 - Define uh I don't know
301:27 - display board just like that and then
301:31 - maybe
301:33 - uh
301:35 - print um board at
301:43 - zero uh yeah let's do it like this Plus
301:46 - board at zero plus board
301:49 - at
301:54 - One Plus
301:59 - board at two
302:03 - and
302:06 - yeah let's just do that three times but
302:09 - so position 012 we're going to need
302:13 - three four five there and then six
302:18 - seven and eight boom all right
302:23 - um yeah let's just see how this looks
302:26 - hit
302:27 - run um it didn't work because we didn't
302:29 - call the function of course uh so
302:33 - display board just like that now let's
302:37 - run it and boom we have an empty
302:39 - board pretty cool right all right so
302:45 - um uh the positioning would be
302:48 - um one two three yeah so now that we
302:52 - have our board we can move on um from
302:55 - here uh maybe let's try to uh start a
302:59 - game so um like this is like the first
303:02 - first place to start um let's just make
303:06 - a a function called uh play
303:10 - game g game just let that all right all
303:15 - right um
303:18 - Define I suck at this you guys why why
303:20 - am I teaching this anyways so play
303:25 - game
303:27 - um play game will probably probably be
303:30 - the function that drives the entire game
303:34 - so maybe like the first thing that we
303:36 - would do is okay the first thing is
303:38 - display the board because when we're
303:40 - playing a game the first thing we want
303:41 - to do is display initial
303:43 - board just like that always put comments
303:46 - in your code guys um if it's really
303:48 - really simple you don't need to like
303:49 - actually here maybe you wouldn't have to
303:50 - because this is so welln named by me um
303:54 - that you don't actually need to comment
303:55 - but hey might as well throw it in there
303:57 - it makes it makes it easier for other
303:58 - people to understand what the heck
303:59 - you're trying to do they can't read your
304:01 - mind okay
304:04 - I've had some jobs some internships
304:06 - where that was an
304:08 - issue I'll stop
304:10 - there anyways so let's uh uh display the
304:14 - board but now um we are going to need to
304:17 - call play game to actually start the
304:20 - whole function chain so um when python
304:24 - is going through this it'll create this
304:26 - board it'll see this as a function it'll
304:28 - save all this code somewhere it'll see
304:29 - this as a
304:30 - function it'll save this code somewhere
304:32 - and then it'll see this and it'll say oh
304:34 - I want to play game so it it calls this
304:36 - function here and then it'll actually
304:38 - call this which calls this which prints
304:41 - all this which reads from this which
304:43 - makes it look like
304:45 - this if you're not watching if you're
304:47 - looking away from your screen that made
304:48 - absolutely zero sense so make sure you
304:51 - rewind and watch the screen because I do
304:52 - a lot of highlighting here I went to
304:55 - school for
304:57 - highlighting yeah I'm filled with a lot
304:59 - of bad jokes just ask KY uh get used to
305:02 - it
305:03 - anyways um where was I so yeah so
305:06 - display the initial board and then from
305:08 - here um maybe the next thing we would
305:10 - have to do is I don't know like handle a
305:13 - turn so let let's just try to handle the
305:15 - first turn first so handle turn will be
305:18 - a function um I always like to put
305:20 - things in functions like if it's like a
305:21 - different concept so displaying a board
305:23 - I stuck that all in a function if I want
305:24 - to handle a turn I'm going to stick it
305:26 - in a function um let's just do that here
305:28 - so Define handle turn boom we have a
305:33 - little function coded
305:34 - up um I like Spa I like two spaces two
305:37 - lines between my functions uh just to be
305:40 - easier to read and here
305:44 - too
305:45 - so handle turn um what could we have in
305:48 - handle turn
305:50 - well handle turn would need to
305:54 - first um probably get
305:58 - the the uh position from the player that
306:01 - they want to go into so
306:03 - so maybe something like
306:06 - this position
306:10 - equals uh what's the function input yeah
306:12 - sorry I was trying to remember the
306:13 - python function for input so input will
306:16 - um ask for something from the command
306:18 - line over here and then when they enter
306:19 - it and press enter then that whatever
306:21 - they press enter will actually go into
306:23 - position here as a string okay so let's
306:28 - say uh I don't know choose a position
306:31 - from one 1 to
306:33 - n okay and just like that uh I chose 1
306:38 - to n because it just makes sense like if
306:40 - this is position one this is position
306:42 - two this is position three so on four
306:43 - five 6 Seven 8 and nine you can just
306:45 - type in the number and whatever pos
306:47 - position you choose that is where your
306:49 - piece will go so um handle turn how are
306:53 - we doing here so far let's just try to
306:55 - run this and see what happens boom so as
306:57 - you can see this actually um gets
307:00 - reached this uh input here and then I
307:02 - can just put in a one and nothing
307:04 - happens because we didn't tell any we're
307:06 - not doing anything with position here
307:07 - but actually one went into position here
307:10 - and then from there we can actually deal
307:12 - with the the game
307:16 - logic so now let's actually do something
307:19 - with
307:21 - position
307:26 - um oh first of all because position is a
307:29 - string we are probably going to want it
307:31 - to actually be an
307:33 - integer so that we can index into our
307:36 - list with an integer instead of a string
307:38 - so let's do that first uh POS equals in
307:43 - position and remember position is 1
307:45 - through n but the elements in our array
307:48 - is 0 through 8 so actually if we get
307:51 - position one what we what we actually
307:53 - want is zero so let's uh subtract one
307:56 - from here just so we get the correct
307:58 - index um in here so now position is
308:01 - correctly
308:03 - um cast to an in and subtract subtracted
308:06 - one from it so that we know where and
308:08 - the board to
308:10 - go all right so now that we have our
308:12 - position uh let's just try to um put
308:15 - something in the um put it in the board
308:19 - yeah so let's just say uh board at
308:24 - position
308:26 - equals x okay easy enough and then uh
308:31 - just throw on a click a quick display
308:33 - board
308:35 - here let's hit run so we have our empty
308:38 - board printing out and then it says
308:39 - choose a position from 1 to nine let's
308:41 - put in one and boom look we chose
308:46 - position one which is here we casted it
308:49 - to an INT and then we went into the
308:51 - board and we stuck an X in that spot and
308:55 - then we displayed the board again and
308:57 - look that's what we have and that's all
309:00 - from what
309:02 - 20 not even 29 30 lines of code not even
309:05 - because there because there's a lot of
309:07 - space 30 lines of code and we already
309:09 - have this whipped up where we have a
309:11 - board we have a prompt we input
309:12 - something and then we actually edit the
309:15 - board and display it again pretty cool
309:17 - right so um let's leave this here just
309:21 - like
309:23 - this but now I want to go back up to
309:25 - play game up here and actually work out
309:27 - some of the overarching game logic so
309:30 - when we uh after we display play the
309:32 - initial board what we want to do is we
309:34 - want to have a loop that can Loop
309:36 - through turns over and over and over
309:38 - again until the game is over so it'll
309:41 - keep going every single turn X's turn
309:43 - O's turn X's turn O's turn over and over
309:45 - and over again until somebody wins or
309:48 - there's a tie so this is uh what it
309:52 - would look like usually I just like I
309:54 - kind of hack something in here and then
309:56 - by hack I just mean type something that
309:58 - I think might work and then I I just try
310:00 - to see if it runs um
310:02 - and then just go from there so just just
310:04 - follow along so while game is still
310:10 - going
310:12 - okay if the game is still going then I
310:16 - want to handle a
310:20 - turn and then after I handle a turn um
310:24 - actually if we're handling turn we
310:26 - should probably have some way to
310:28 - differentiate if it's X's turn or O's
310:29 - turn so let's go like this let's just
310:31 - give give it a uh thing called current
310:35 - player that'll just be an xro O but
310:37 - later we'll do that later so after we
310:39 - handle a turn X or o goes and takes
310:42 - their turn then we want to check if the
310:44 - game is over so or check if the game if
310:47 - somebody won or if they tied so I call
310:49 - that
310:50 - check if
310:54 - game
310:56 - over I don't know how that got there but
310:58 - yeah check if game
311:00 - over and then
311:02 - um after that then assuming that the
311:06 - game is not over and I don't break out
311:07 - of this Loop then we will want to flip
311:10 - from one player to the other so I'm just
311:12 - going to call this flip player from X to
311:14 - o or o
311:16 - tox and then after that then we're going
311:18 - to go back up and then we're going to go
311:20 - again we're going to handle turn with
311:21 - the other player because we flipped it
311:23 - and then we'll check if there's a game
311:25 - over and then flip the player again and
311:26 - go back up and then um take another
311:29 - player's turn and then check if the
311:30 - game's over and then flip and and then
311:32 - so on and so forth until somebody wins
311:34 - or there's a
311:35 - tie that's pretty much it so let's um
311:40 - make these functions real quick uh we
311:43 - already have handle turn let
311:46 - me uh let me put it down
311:51 - here so we need uh check if game over
311:56 - check if game over all right that needs
312:01 - to be a fun
312:04 - function and all this is going to do is
312:06 - actually just call two other functions
312:08 - check if when and check if Tai see how
312:14 - that works see how I'm breaking up the
312:17 - code the the game logic um what are the
312:21 - criteria for a game to be over is if uh
312:23 - somebody wins if somebody gets three in
312:24 - a row or if there's a tie if the entire
312:26 - board is full and nobody has won yet so
312:29 - those are the two criteria for the game
312:32 - ending and so that's why I use that up
312:35 - here I handle a turn and that's because
312:37 - the board State changes and
312:39 - then uh and then I see if there's a game
312:41 - over after they place the piece and then
312:44 - depending on that I will either stop
312:46 - I'll break out of this Loop somehow by
312:48 - maybe setting this equal to false
312:50 - instead of true and then um break out
312:53 - but first we need to uh check if the
312:55 - game is over so we're going to do that
312:56 - by checking if there's a win and
312:57 - checking if there's a
312:59 - tie next let's
313:02 - uh code up this one check if
313:07 - when and this is also a function I keep
313:10 - forgetting that check if win so here I'm
313:13 - just going to put a return thing just to
313:14 - keep it nice and clean for
313:16 - now but pretty much we're going to have
313:20 - uh check rows like I said earlier check
313:24 - columns and
313:25 - check diagonals so we'll leave that
313:28 - there for now I just put a return here
313:31 - so that the so it doesn't break when we
313:33 - hit run I don't want any red things over
313:34 - here uh popping up any errors because
313:36 - it's just kind of gross um it's
313:38 - inevitable but it's still gross you
313:42 - know uh also we need to check if there's
313:45 - a tie so Define check if tie just like
313:50 - that and then I'll just return as well
313:53 - I'll I'll populate these a little bit
313:55 - later but I just want to get the
313:56 - overarching logic done first so check if
313:58 - win and check if tie so uh check if win
314:02 - check if tie those are all right so
314:05 - check if game over so that's all taken
314:06 - care of check if game over so I have
314:09 - this is already is already made down
314:11 - here check if game over is already coded
314:13 - now we just need flip player that's the
314:14 - one I was missing so now we need one
314:17 - last um function called flip player just
314:21 - like
314:22 - this and um this is just going to flip
314:25 - the player from X to0 so that we know
314:29 - which piece to place down and uh stuff
314:31 - like that pretty much and like display
314:34 - like oh it is currently X's turn it is
314:35 - currently O's turn please choose a
314:37 - position something like
314:39 - that um I think I might have most of the
314:42 - functions I need I just need uh these
314:45 - three functions but I will do those
314:47 - later
314:49 - um okay let
314:51 - me
314:57 - see all right let's
314:59 - actually just see if we get any errors
315:02 - run it yeah there's an error of course
315:05 - game still going is not defined so
315:07 - usually like errors will happen a lot if
315:09 - you're new to programming they usually
315:11 - come back in red and they usually say
315:12 - Trace back something oh my God my life
315:14 - is over uh my parents don't like me uh
315:17 - my best friend just left me um somebody
315:20 - else just left
315:22 - me um yeah just uh look look for the air
315:25 - the name Will it'll usually tell you
315:26 - what's wrong so it says game still going
315:28 - is not defined um I think that here yeah
315:32 - so this is a
315:34 - Boolean um I'm just going to make this a
315:36 - global
315:38 - variable uh up here actually let's put a
315:41 - comment up here because I like having
315:43 - all of my uh uh Global
315:48 - variables just like that nice and
315:52 - tidy there uh game
315:55 - board boom and then we are going to need
315:59 - uh if game is still going we'll call it
316:04 - game still going and we'll set it equal
316:08 - to True by default because we want that
316:10 - Loop to run by default initially the
316:12 - game is going from the very beginning
316:14 - this is only going to be false when
316:15 - there's a game over so whenever we get a
316:17 - game over we're going to set this to
316:19 - false and then automatically because
316:21 - this is what um this um relies on if
316:24 - this is true it'll run until it's good
316:26 - but then if there's a game over and we
316:28 - get a false and we set this equal to
316:29 - false then next time this goes it'll
316:32 - jump out of it because we know there's a
316:33 - game
316:34 - over yeah um while we're at it why don't
316:37 - we just uh make a couple other ones uh I
316:39 - think maybe uh who
316:42 - won or Tai uh yeah let's just put winner
316:47 - uh equals none for now
316:50 - um yeah I guess there's one no winner
316:52 - right now and then maybe we could change
316:53 - winner to X or o when there's a winner
316:55 - so we know who the winner is or if
316:57 - there's a tie then winner will just stay
316:58 - none because yeah there's there's no win
317:02 - makes sense and maybe uh also I think
317:03 - one last thing we'll probably need is uh
317:06 - whose turn is it we just be
317:09 - uh current player and uh let's just have
317:14 - X go first okay yeah like that so now
317:17 - let's try run this and see if we get any
317:18 - errors we get an error again a handle
317:21 - turn takes zero position but one was
317:24 - given uh handle turn I see so we're
317:28 - trying to give something to handle turn
317:30 - but we're uh getting a error yeah
317:33 - because we're trying to give something
317:34 - here when it doesn't take anything in
317:35 - the function so let's just say Okay
317:37 - current player now let's see if we runs
317:40 - hey okay so we got rid of the big uh red
317:42 - red lines of
317:43 - Doom um
317:46 - yeah just just get used to errors they
317:48 - happen all the time it's just a part of
317:50 - coding uh read them definitely read them
317:53 - they usually tell you what's wrong they
317:54 - tell you what line number is wrong so
317:56 - you can actually just go into the code
317:57 - to that line figure out what is wrong
318:00 - maybe maybe put a few um debugging
318:02 - statements in there and then just keep
318:04 - working out from there all right cool so
318:06 - let's go back to um play game so we have
318:11 - the loop going and then um like I said
318:15 - earlier if the game ever stops from here
318:18 - if the game is over and this Loop jumps
318:20 - out then we're going to jump out of this
318:22 - Loop so let's actually put something
318:23 - here so the game has ended right here
318:28 - and then we can just say like um
318:30 - remember remember that thing at the
318:31 - beginning uh earlier the global
318:33 - variables uh we have a
318:35 - winner uh let's use that here so let's
318:39 - say if
318:42 - winner equals
318:44 - X or winner
318:48 - equals o that means X or o1 we don't
318:51 - know who won yet then we'll just say um
318:55 - I guess we do know who won because the
318:57 - winner will have who won X or o that
318:59 - that at least that's the idea I'm going
319:00 - to put the winner in that once we know
319:02 - if there's a winner we just be like okay
319:04 - if this person won then winner equals X
319:06 - or or if X1 then winner equals x if o01
319:09 - then winner equals o and then we can
319:11 - just get that Global winner variable
319:12 - from here so we'll just say print um
319:16 - winner so that will be X or o plus uh
319:22 - space w n so this will become X1 or
319:25 - o1 nice and
319:27 - easy um
319:29 - else if
319:32 - winner equals
319:34 - none then this will be a
319:37 - tie so let's just put that in like that
319:41 - boom uh yeah uh let's see if anything's
319:44 - broken hey everything's running good uh
319:46 - good practice is actually to unit test
319:48 - which means to keep running your code
319:50 - over and over again make sure there's no
319:53 - errors and then whenever you do get an
319:55 - err fix it immediately so that you're
319:57 - not swamped with bugs because sometimes
319:59 - you fix one bug and then it creates 10
320:00 - other and then like this just gets
320:02 - really out of hand but if you create if
320:03 - you fix every bug one by one as they
320:06 - come and then everything's always
320:07 - working nicely then you know exactly
320:09 - what caused the error because you just
320:10 - made a small change to the code so try
320:12 - to do that always try to run it if
320:14 - something's wrong fix it before you move
320:15 - on all right cool so we have play game
320:19 - uh I might not touch this for a little
320:20 - bit I think this is almost fleshed out
320:22 - because we'll have we'll display the
320:24 - initial board and then we'll have the
320:25 - game going going going going going and
320:27 - then when it ends then we'll just print
320:28 - if there's a winner or if it was a tie
320:30 - so that's kind of like the over arching
320:31 - idea of play game so I actually think
320:33 - this function is pretty much done might
320:35 - be a little a few little changes here or
320:36 - there but yeah let's just put in some
320:38 - comments because you know good practice
320:39 - I haven't been doing that I'm not being
320:41 - a good example um I was never a good
320:44 - example that's what my mom always tells
320:46 - me uh I have a little sister um anyways
320:50 - yeah so we're just going to flip to the
320:52 - other
320:53 - player just like that uh yeah
320:58 - check if the game has ended you don't
321:01 - really to do this because the names are
321:02 - so descriptive but hey I'm a little bit
321:04 - OCD so why not
321:06 - handle a single turn of an arbitrary
321:11 - player big words big words and
321:15 - while the
321:16 - game is still
321:19 - going yep so this will just Loop while
321:22 - the game is still going and then once
321:23 - there's a game over it'll break out
321:25 - because this will be turned to false and
321:27 - then we'll jump out here and print out
321:28 - the stuff so yeah uh I don't know I'll
321:31 - play a game of tic tac toe okay
321:36 - cool um yeah why don't we just fill all
321:38 - these in uh display board I'm so bad at
321:42 - this I'm actually an English
321:46 - major
321:48 - uh yeah and then uh handle a single turn
321:53 - of an
321:55 - arbitary player I also can't spell
321:58 - sometimes or type or do anything for
321:59 - that matter
322:01 - yeah so let's end that
322:05 - there so yeah we are going to uh move on
322:10 - now um currently our current
322:12 - functionality is this we have it running
322:16 - here and then when whenever we put in a
322:18 - uh a number a valid number from 1 to
322:20 - nine it will populate that spot in the
322:23 - board so if I put two then it'll go two
322:25 - three and we can keep doing this
322:28 - forever as you notice I can you can put
322:31 - it in every single spot and I can also
322:33 - overwrite old spots it'll just keep
322:35 - overwriting it as X but that doesn't
322:37 - really seem like correct functionality I
322:39 - mean like nobody's winning nobody's
322:40 - losing like where's the O so at least we
322:42 - have this basic um functionality
322:45 - happening but now we need to actually
322:46 - clean it up so that the right player
322:48 - plays and that if somebody wins or if
322:50 - there's a tie then the game actually
322:51 - ends and then it notifies us that the
322:53 - game ends so um I think the place that I
322:56 - want to do that I want to start um next
322:59 - is actually um check if win I'm actually
323:03 - going to change this to um check for
323:05 - winner I just prefer that name yeah
323:08 - check for winner check if tie check for
323:10 - winner so uh if I change this function
323:12 - name I think I called it somewhere so
323:14 - let's copy this and go back up um check
323:18 - if game over uh okay let's just command
323:21 - F
323:24 - check if
323:27 - win there's only one match oh it's right
323:29 - here yeah and check if game over so
323:31 - let's CH change that so check for winner
323:33 - and check if tie I prefer that um you
323:35 - can leave it leave it the other way if
323:37 - you want it doesn't really matter this
323:38 - is just personal preference they will
323:40 - both do but anyways so this is uh the
323:44 - next one that we need to code up so
323:45 - check for winner um if we get three x's
323:48 - in a row then we want to we want the
323:51 - game to say hey uh X1 somebody won if we
323:57 - get three x's in a row so how do we
323:59 - check if we have three x's in a row well
324:04 - we can either have three x's in a row in
324:05 - a row we can have them in a column going
324:08 - straight down or we can have the
324:12 - diagonals so um let's just break it up
324:14 - into into those three pieces so check
324:16 - for winner is going to start
324:20 - by
324:23 - um well actually do we even have these
324:25 - functions made yet no we don't so
324:26 - actually what we need to do is actually
324:28 - make a a function for each of these each
324:30 - of these comments here so check for
324:33 - let's fine Define
324:36 - check uh check rows that'll do check
324:40 - rows uh
324:42 - return Define check
324:48 - columns return and the final
324:53 - check
324:56 - diagonals I like that
324:59 - word
325:01 - so now we have three functions that will
325:04 - check each of these and all I need these
325:07 - um these functions to do is um if is
325:10 - check the rows in the uh in the board or
325:14 - the columns or the diagonals and then
325:17 - whatever whatever uh if there's three in
325:20 - a row in any of those rows then it
325:22 - basically just turns returns true um or
325:25 - no no it uh it Flags the while loop that
325:28 - the game is over and then it returns
325:29 - either X or o
325:31 - so I want it to return X or o if
325:33 - somebody won and then to flag um this up
325:37 - here game still going to false so that
325:39 - the game ends so return XR and O and
325:42 - flag this so that it jumps out and then
325:44 - um if we return XR O then we can
325:46 - actually know that winner is x o
325:53 - here so let's do that um we have these
325:57 - uh maybe I'll code these in a bit let's
325:59 - let's uh start up here so let's just
326:02 - fill this out check rows we are going to
326:06 - uh say row winner
326:10 - equals check
326:12 - rows if we
326:14 - have
326:16 - that um column winner equals check
326:22 - columns
326:25 - and I misspelled
326:28 - that and
326:31 - diagonal winner equals
326:36 - check
326:39 - diagonals Winder that is not
326:44 - right okay so now we have those uh going
326:48 - let's see if we have any errors no
326:50 - errors
326:51 - cool um what next uh so I'm assuming
326:55 - that when I call these then um if
326:58 - there's a winner in a row or a winner in
326:59 - a call O
327:01 - you said there was no typos there's one
327:03 - right there okay so if there is if
327:05 - there's a winner in a row or winner in a
327:06 - column or winner in a diagonal then
327:08 - these will either be returned um true or
327:11 - false like as a Boolean it'll say there
327:13 - was a winner there um so maybe we can
327:17 - say if row
327:20 - winner then okay then there there was a
327:23 - win yeah I don't I don't know quite yet
327:26 - um else if there was a column winner
327:30 - then yeah there is there was a win and
327:34 - then else if oh diagonal winner once
327:39 - again there was a win else there was no
327:43 - win so okay if there was no win then uh
327:47 - I think we had a we had a variable
327:49 - didn't we set a variable up here yeah
327:51 - winner so winner equals none I guess we
327:54 - could utilize this now winner equals no
327:56 - we're going to have
327:59 - uh there was no win let's just try a
328:03 - winner equals none and then if there was
328:06 - a win then winner
328:10 - equals
328:12 - diagonal
328:13 - winner
328:15 - um there was no
328:17 - win uh winner
328:20 - equals column winner and then for rows
328:24 - winner equals row winner I think that'll
328:28 - work for now there might be some bugs
328:30 - but if there is uh we'll go back to them
328:32 - and solve them together all right cool
328:34 - oh one thing I forgot to mention if you
328:36 - are um trying to access any Global
328:39 - variables up here that is outside of a
328:42 - function and you're trying to access it
328:44 - within a function or well not access you
328:46 - can read it just fine but if you're
328:47 - trying to write to it if you're trying
328:49 - to write to a variable outside the
328:50 - function you actually need to declare
328:53 - that variable within the function as
328:55 - Global so this winner is outside the
328:57 - function it's considered a global
328:58 - variable as I as I know
329:01 - here so if we're going to try to set
329:03 - winner um that means we're trying to set
329:05 - a global variable so therefore we
329:07 - actually need to write this here let me
329:10 - just show you it might be a little bit
329:12 - make make a little bit more sense so
329:14 - what I'm doing here is I'm saying Global
329:15 - winner so this winner will actually
329:18 - match up to the winner outside here and
329:20 - then um whenever we we set winner down
329:23 - here when we set these uh the winner to
329:26 - a different value this will allow us to
329:28 - set the global one so we actually need
329:30 - this if we're going to access uh Global
329:32 - variables so set up Global variables
329:36 - just like that um that should be good
329:38 - for now uh now let's move on
329:41 - to um check rows check columns uh check
329:47 - diagonals and check if tie and these
329:49 - because I think we need to fill these
329:50 - out still so check rows uh what are we
329:52 - going to do if you want to check the
329:53 - rows of the game board well very simple
329:56 - we could probably just pick out each
329:58 - element of the row and then see if
329:59 - they're all equal to each other and then
330:02 - um if they are then return like X the
330:05 - winner X or o whoever the winner is or
330:07 - return none if there's if there's no um
330:10 - no three in a row so let's just let's
330:12 - try that let's see what we can do Row
330:15 - one um okay so the board is a list right
330:18 - to check okay to check for the first row
330:20 - here uh we would have to check element
330:23 - zero element one and element two so
330:25 - let's just say board at zero uh we want
330:28 - to see if board at zero equal equals
330:30 - board at one which also equals board at
330:33 - two so all this is saying is um we're
330:36 - checking Row one row one is these three
330:38 - up here so we're just seeing if board
330:40 - one board two and um boarded well board
330:44 - at zero boarded one and boarded two all
330:47 - equal are are all are all equal so if
330:49 - they're the same value then um this will
330:52 - come out to be true and then we know
330:54 - that Row one is actually a winning row
330:57 - um maybe we should add one more thing uh
330:59 - because because if I just noticed that
331:01 - if these three are all equal to each
331:03 - other but they're actually dashes then
331:04 - it'll think this is a win when this is
331:06 - just three empty empty cells in a row so
331:09 - let's say uh these three spots in the
331:13 - row all need to be equal to each other
331:15 - and they also should not be equal to a
331:18 - dash so if they're if all three are
331:21 - equal and it is not equal to a dash then
331:23 - this is a winning row I hope that makes
331:25 - sense um now we're just going to copy
331:27 - and paste this um
331:30 - into row two and Row three and we're
331:34 - just going to mirror the same exact
331:36 - logic so 0 one2 three four five is the
331:40 - second row and 6 7 8 is the third row so
331:45 - now now this logic here is if the first
331:48 - row has a winning has a winning uh
331:50 - configuration then this becomes true
331:52 - likewise for row two and three the same
331:54 - kind of deal happens now um if there is
331:59 - if either of these are true then that
332:00 - means somebody won and if somebody won
332:02 - then we actually need to end the game so
332:04 - actually remember we had this variable
332:06 - up here called game still going equals
332:07 - true it is also a global variable so
332:10 - we're actually going to need to set this
332:11 - to false if somebody wins so let's set
332:13 - up that Global variable down there uh
332:16 - let's do that first Global um game still
332:21 - going and then uh let's put in some
332:24 - comments here set up Global
332:28 - variables um here we can see if check if
332:32 - any of the rows have all the same value
332:36 - and is not empty that's kind of a long
332:39 - comment but at least it's
332:41 - descriptive and then
332:43 - after after we check that then we can
332:46 - actually say if Row one or row two or
332:52 - Row three meaning if there's a win in
332:55 - any of those
332:57 - rows then we are going to uh set game
333:00 - still going to false which will stop the
333:03 - game because we know somebody won so now
333:05 - I'll fill out the comment if any row
333:08 - does have a match flag that there is a
333:12 - win yep so that's what's happening there
333:15 - so now we know that oh there has been a
333:16 - win and we actually stopped the game but
333:19 - now we also need to know who won so we
333:21 - can return and be like okay X1 or 01 so
333:24 - um let's just we don't actually know
333:26 - which row W so we're going to have to
333:28 - actually check each one individually so
333:30 - if Row one then we know that Row one has
333:34 - a streak a winning winning streak a
333:36 - winning configuration but we don't know
333:38 - what value is in there so it's as simple
333:40 - as checking board at zero because Row
333:43 - one board at zero is within Row one so
333:45 - whatever is there if it's an X or an O
333:47 - then we know that that's the value that
333:49 - we want to get so we can just return
333:51 - board at zero uh same thing for row two
333:55 - uh we can just return board at three
333:59 - believe yeah and then same for Row three
334:02 - if that's the winning row then we want
334:03 - to return who whatever player is at row
334:06 - six I got this 036 from here 036 I also
334:10 - could have used 147 or 258 uh I just
334:13 - need one of them I just need to know if
334:14 - it's X or o that one um and you can just
334:16 - leave this last return here that's just
334:18 - like a cleanup just in case something
334:19 - happens uh let's run this and see if we
334:21 - get any errors we do not that is good um
334:24 - so hopefully that made sense let me just
334:26 - pop a quick comment in here uh return
334:29 - the the
334:30 - winner uh X or o yeah um hopefully that
334:35 - made sense uh because I believe uh check
334:38 - columns and check diagonals are going to
334:39 - be extremely similar um let's just
334:43 - actually let's just copy and paste it
334:45 - straight into here and then just edit it
334:47 - as we go you can follow me this is very
334:48 - common to do if you have code that's
334:49 - very similar you can just copy and paste
334:52 - it and edit the numbers a little bit so
334:54 - check columns obviously we're going to
334:56 - have to check change all these from rows
334:58 - to column um um check columns yeah we're
335:02 - also going to need game still going
335:03 - because if there's a win then we need to
335:04 - set that equal to false which is the
335:06 - same down here um actually I'm just
335:08 - going to copy column here
335:10 - copy paste paste paste if any column
335:16 - does have a match then yeah uh if column
335:20 - one or column two or column
335:23 - three uh extra return statement here so
335:26 - now this looks pretty much exactly the
335:28 - same as the check check rows the only
335:30 - difference is these numbers are not
335:31 - correct this is still checking if the
335:33 - first row is a winning configuration
335:35 - what we actually need to check is if the
335:37 - First Column so actually it's not going
335:39 - to be 012 it's actually going to be um I
335:42 - believe Zer okay 0 1 23 and four five
335:47 - six so 036 is what this should be 036 is
335:51 - the First Column right here so we're
335:53 - checking if the First Column is good the
335:55 - second column should be 147 I believe
335:58 - 147 and the last one should be
336:01 - 258 I just did this by um by counting
336:04 - here so if this is uh zero and this is 1
336:07 - two then you can just kind of figure out
336:09 - what numbers should be in each column
336:10 - you can just check it that way so um
336:12 - this is actually done now unless I miss
336:14 - something I don't think I did oh I did
336:16 - here actually so here we need
336:19 - to U return the first element of the
336:22 - columns not the rows in case either of
336:24 - these is a winning a winning um
336:27 - configuration so check columns very
336:29 - similar to check row row check diagonals
336:30 - is also going to be very similar uh let
336:32 - me just copy this into
336:35 - here copy and paste okay uh again we
336:40 - need game still going in case uh there
336:42 - is a win and then we need to set it
336:44 - equal to false hopefully that's making
336:46 - sense to you guys there's only two
336:47 - diagonals so we actually only need two
336:49 - we can get rid of this third one we can
336:52 - get rid of this third one here um just
336:54 - like that but now we need to change uh
336:57 - all the columns to diagonals diagonal
337:01 - uh paste that in there um if diagonal
337:04 - one or diagonal 2 U if diagonal one or
337:08 - diagonal 2 so now that all the variables
337:11 - variable names and comments are changed
337:13 - um now we just need to change the
337:14 - numbers to the correct ones so let's
337:16 - think about it uh what is the first
337:17 - diagonal the the positions in the board
337:20 - so uh zero is correct because we need
337:22 - this top left one we also need the
337:24 - middle one so what is the middle one 0 1
337:26 - 2 3 four so this should be four and then
337:29 - the the last one is the bottom right
337:30 - which would be eight the very last
337:33 - position uh same here uh let's start
337:36 - with the bottom left so 0 1 2 3 4 5 six
337:41 - should be six and then the middle one 0
337:43 - 1 2 3 4 that's all already correct and
337:46 - then the top right would be 0 one two so
337:49 - this should be two so now that we have
337:52 - um checking if the diagonals equal to
337:54 - each other and checking if the other
337:56 - diagonals equal to each other then um
337:59 - this function should also be done oh
338:01 - except for down here again we need to
338:02 - check what value which player won so
338:05 - this will actually be0 and six you can
338:06 - just mirror these first here because you
338:08 - already you already know that these are
338:09 - in the diagonal and these are in the
338:10 - diagonal so you can just choose anyone
338:12 - you want and throw them here to get the
338:13 - correct value all right so now um let's
338:16 - try running it again see what happens um
338:20 - let's just try to uh is it oh number two
338:24 - let's see if we win oh we we get an air
338:27 - string object is not callable huh um
338:31 - winner equals row winner type ER string
338:34 - object is not callable line
338:37 - 76 okay let's go to line 76 what is it
338:39 - complaining
338:41 - about um here winner equals row winner
338:45 - ah so I I found the mistake here um the
338:48 - mistake is actually um I'm trying I have
338:50 - this winner variable here I'm trying to
338:53 - um set it equal to row winner but row
338:55 - winner is actually a variable not a
338:56 - function so these parentheses should not
338:59 - be here
339:00 - uh simple mistake now let's try to run
339:03 - all right cool so only X is playing
339:06 - right now but if we get three in a row
339:09 - it should check in the uh check
339:14 - rows um well check for winner it should
339:16 - go to check for winner and then it'll
339:18 - run check
339:19 - rows and then it'll see if any of these
339:21 - rows is all the same and then if it is
339:23 - it'll end the loop and then it'll return
339:25 - X and then up here it'll print if winner
339:28 - equals to X which we just set um set
339:31 - then X1 so we're about to do that now um
339:34 - in position three we're about to put in
339:36 - X let's put that in here now and see
339:38 - what happens and there we go it says X1
339:42 - because it checked that the first row um
339:44 - had all the same value um that wasn't
339:47 - that weren't dashes and then it returned
339:50 - uh this the first one we chose um the
339:54 - first X and then returned it and ended
339:56 - Loop and then printed this out and said
339:57 - X1 so that's kind of what's going
340:00 - on um now we fix that um so that's
340:05 - pretty cool so we have the winning
340:06 - checking for winning is Set uh if they
340:08 - were all O's it would also work because
340:10 - it's just checking if they're equal not
340:12 - not checking if they're x's and if O's
340:13 - one then and you put an O here it would
340:15 - say oh well then it would put an O here
340:17 - and it would say 01 so let's uh
340:20 - also get that worked out the the X and O
340:25 - Part okay so where are we sitting yeah
340:28 - okay here here it is so in handle going
340:30 - back to handle turn up here we want to
340:33 - handle a single turn for either X or o
340:36 - so that's why we actually um sent in
340:38 - player here because then we know if it's
340:40 - X or o instead of just X so actually
340:42 - whatever the current player is that's
340:44 - what we want to put on the board we
340:45 - don't just want to put an X
340:46 - automatically we actually want to put
340:48 - player on the board because this will be
340:50 - X or o depending on whose turn it is and
340:52 - we'll put that at the position they
340:53 - choose so that's the first change let's
340:55 - see if that broke anything um well
340:58 - there's no errors that's good uh let's
341:01 - try winning winning still works awesome
341:05 - um but now we also need to oh yeah flip
341:09 - player I forgot about this we uh I I put
341:12 - this little function in here so that
341:14 - after X goes then it'll flip and then
341:16 - this handle term player will be called
341:18 - with the opposite player so if it was X
341:20 - then o will be next and if it was O then
341:22 - X will be next so um handle player we'll
341:25 - get an input we do that um where where
341:28 - did I call flip player from up here in
341:31 - game still going okay uh current player
341:35 - is X so I guess uh yeah when we call
341:38 - handle turn here current player is what
341:41 - we send to the turn so all we need to do
341:44 - is in footp player is change current
341:45 - player so let's go down to flip player
341:49 - right here and um pretty much all we
341:52 - need to do is if um current player
341:57 - equals x then and current player equals
342:03 - oh there we go just be uh very careful
342:05 - here um you want this is checking if
342:07 - they're equal and then if they're equal
342:09 - then you actually want to set current
342:10 - player to to O So this has a double
342:12 - equals and this has a single
342:14 - equals uh e very common mistake to make
342:17 - and then um else if current player
342:22 - equals O then we want current player to
342:27 - become X oh and uh since this is a
342:30 - global variable the only way we can
342:32 - write to it or change it is to put this
342:35 - here current player so let's just put
342:38 - some comments in here Global variables
342:41 - we need if the current player was X or
342:47 - then yeah then change it to O and if the
342:52 - current player was O then change it to X
342:56 - and uh yeah see if that broke anything
342:59 - thing it did
343:01 - um sometimes repet uh lags a little bit
343:04 - and it gets a little bit screwed up um
343:06 - so sometimes actually just refresh the
343:08 - page let me copy all of this just in
343:09 - case I don't want to lose all this work
343:12 - so refresh the
343:14 - page U we get brought back here I'll
343:18 - move this
343:19 - over and
343:21 - then go back down to where we just were
343:25 - flip player let's hit run and there we
343:27 - go it's running good again so now every
343:30 - time we um X goes then we'll flip the
343:35 - player to O and then um o will go and
343:39 - then it'll flip back to X and so on and
343:42 - so forth and now we actually have two
343:43 - players playing the game cool
343:46 - right and boom X1 X on this diagonal
343:51 - here um so actually we have a uh a
343:54 - working
343:55 - game so now uh the the only thing we
343:58 - have haven't done yet is if they tie if
344:00 - the board fills up the game also needs
344:02 - to end so oops got an error there oh
344:06 - that's another thing we're going to have
344:07 - to handle is if they put an improper
344:08 - input we we need to handle that to make
344:10 - it more robust so that the game just
344:12 - doesn't break and it like prints out all
344:13 - this air air messaging here so let's uh
344:17 - first just try
344:18 - to uh
344:21 - tie n and four yeah so as you can see we
344:27 - have a a draw here a a tie but nothing
344:30 - happens it just keeps going we could
344:32 - just keep putting in more um variables
344:35 - and then it'll just keep overwriting
344:37 - which is improper um incorrect uh
344:41 - execution so we need to actually change
344:44 - that um we can check for Tai um the
344:48 - first thing that comes to mind for me
344:50 - is all we can do is just check if
344:53 - there's a dash in the in the list in the
344:56 - board if there is a dash then there's no
344:58 - TI but if there's no dash that means
345:00 - every spot has been filled up and a tie
345:02 - needs to happen very very simple since
345:04 - board is just a list we can literally
345:06 - just go like this if Dash is not in
345:10 - board then we can just say game still
345:14 - going equol to false this is the thing
345:17 - that ends the game remember game still
345:19 - going as false and because it's a global
345:20 - variable again we need to declare it as
345:23 - a global variable so we can write to it
345:25 - cuz we write we write to it we write it
345:27 - false here that is not in board getting
345:29 - the game ends and then also um we can
345:32 - just return let's try that for now let's
345:34 - see what happens so we'll put in one 2
345:37 - three five six seven 8 nine four hey and
345:42 - there we go it worked so um if we um if
345:47 - the whole board fills up and nobody has
345:49 - won yet then it'll just say tie and then
345:51 - the game is over so that's all we need
345:54 - um that is done very simple checking for
345:56 - a tie um we're actually getting pretty
345:58 - close to being done now I think the only
346:00 - thing that we need to do next is to make
346:02 - it so that if we put in improper input
346:05 - then it doesn't
346:07 - break it just um if there's in is
346:09 - improper input then we just want the the
346:12 - game to ask the user again or just like
346:15 - just pass it and just be like okay just
346:16 - choose a position again choose another
346:18 - position or something like that so let's
346:20 - actually go up to um handle turn I
346:23 - believe that's where we actually get the
346:25 - input yeah yeah that's right so handle
346:28 - turn is where where we get the input in
346:31 - and now we're actually going to need to
346:33 - check um to make sure the input is
346:35 - correct so first first of all actually
346:38 - we should we should notify which
346:39 - player's turn it is so let's just put a
346:43 - simple uh print here since we know the
346:46 - player the player is either X or Y we
346:48 - can
346:50 - actually put in a string here and go
346:53 - like that so it'll this will say O's
346:55 - turn or X's turn and then then it'll ask
346:57 - for input from the user just like that
347:00 - but then we also want to make sure that
347:03 - the uh input is valid before we cast it
347:06 - because um we can put in any string the
347:08 - input function for um from python will
347:10 - can take in any string um but then if we
347:12 - try to put that in here and cast it to
347:13 - an INT like if they put something that's
347:15 - not able to be cast to an INT then we're
347:17 - going to get an error so let's try that
347:19 - first um if
347:21 - position um not in and this is a little
347:25 - uh trick that I I uh found on Google um
347:28 - we we could use regular Expressions if
347:30 - uh if any of you guys know what that is
347:32 - but that's a little bit Advanced like
347:34 - it's a whole another thing so this is
347:35 - actually a quick solution um basically
347:37 - we just want to make sure that the input
347:40 - that the user gives is in this list
347:43 - because we only want uh specifically
347:45 - nine um different
347:47 - inputs uh then we're only going to allow
347:50 - these nine inputs obviously this
347:52 - wouldn't work if you could if you wanted
347:53 - to allow like a million different kind
347:55 - of inputs we can't type it all out but
347:57 - since we only have nine we can just make
347:58 - it nice and clean and simple so we can
348:00 - say position which is the thing that uh
348:02 - we get from input from the keyboard it
348:04 - needs to be a string that matches one
348:06 - matches two matches three or so so on
348:08 - and so forth all the way up to nine if
348:10 - it doesn't then we need to ask we need
348:13 - to ask again so if it doesn't then we
348:16 - need to say hey position equals in
348:19 - actually let's just copy and paste this
348:22 - input invalid input choose a position
348:25 - from 1 to 9 so let's try to run this now
348:29 - oops what is wrong oh the if statement I
348:31 - forgot to put a semicolon at the end or
348:33 - I mean a regular colon at the end um
348:36 - yeah syntax errors uh that just means
348:38 - that python there's something wrong like
348:39 - if I forgot the F in if I would get a
348:42 - syntax error like yeah like what is that
348:45 - so just keep that in mind when we write
348:46 - it now no more error yeah and see
348:48 - actually now we added this in it says
348:50 - X's turn it lets us know whose turn it
348:52 - is which is uh very handy um so choose a
348:55 - position from one to nine um one and
348:58 - then we can go but then let's say we put
349:00 - something that's not in 1 to9 let's put
349:01 - a z let's put a I don't know a 35 weit
349:04 - enter it says invalid input choose a
349:06 - position from 1 to n yeah so it's good
349:09 - that it caught it and then it re asks
349:10 - again let's try again let's put in 55
349:12 - this time and then we get an
349:15 - error okay so the reason this is
349:17 - happening is because let's say they put
349:19 - an invalid input and they say um it's
349:22 - invalid and then this catches it and
349:24 - says the the input is not in the correct
349:27 - range of Val valid inputs so it asks
349:30 - again and it says okay invalid input
349:32 - please choose a position from 1 to 9 and
349:33 - then it tries it again and then it gets
349:35 - down here and then it's invalid and it
349:37 - tries to do it anyways which means it
349:39 - only checks if you put an invalid input
349:41 - one time so actually what we need to do
349:43 - is actually put this in a while loop so
349:46 - that it's constantly asking over and
349:47 - over again for valid input until it is
349:50 - valid so this is a very common thing you
349:51 - do in programming instead of using an if
349:53 - statement you actually use a while loop
349:56 - so it'll be like a while position is not
349:58 - in here just keep asking over and over
350:02 - and over again actually we don't really
350:03 - need inval but we can just like just ask
350:05 - again so it'll say um the first it it'll
350:08 - initially say Okay X's turn um choose a
350:11 - position from 1 to N9 and then it'll um
350:14 - get the position and then it'll say if
350:16 - position isn't in here ask for position
350:18 - again and if again if it isn't in here
350:21 - ask for position again and then again if
350:23 - position isn't in this list over
350:25 - here um if it isn't in here here then
350:28 - ask for position input again over and
350:30 - over again until position is in this
350:32 - range and then it will continue down
350:34 - here and then since we are only allowing
350:36 - these digits from 1 to nine this casting
350:38 - to an INT here um if position yeah if
350:40 - position is in the in this range from 1
350:42 - to nine we put it in this in here and
350:44 - then we cast it to an INT then it won't
350:46 - throw this ugly air
350:48 - here uh let's try this again uh please
350:51 - choose position from 1 to 9 we put in a
350:53 - one it works just fine let's put in a 20
350:56 - there um it ask again
350:59 - uh 20 20 letters random uh nothing at
351:02 - all uh random stuff anything we put that
351:06 - doesn't that doesn't um exist in this
351:09 - list it will actually just ignore it and
351:11 - then just keep asking for your position
351:13 - over and over over again until we give
351:14 - it something that works and as you can
351:17 - see the O went right in the middle so
351:19 - that's working nicely cool um one other
351:22 - thing that we forgot to implement in
351:23 - this though is what if we put something
351:26 - um in a spot where there's already a
351:28 - piece that's an issue so let's say uh we
351:30 - put X at one and o0 at five now um it
351:34 - says it's X's turn and it says choose a
351:36 - position from 1 to 9 so let's try to
351:38 - overwrite this o by putting a five there
351:40 - I hit enter and as you can see the O was
351:43 - actually overwritten um that's a problem
351:45 - because that violates the rules of
351:47 - tic-tac-toe so what we need to do is
351:49 - actually put in another check here to
351:51 - see if the position we chose is valid on
351:54 - the board we could check that here after
351:57 - we pick the position and we've we've uh
352:00 - casted it and subtracted one from it to
352:01 - get the right index in the list we can
352:03 - just check and be like if board at
352:06 - position equals empty or no or doesn't
352:10 - equal sorry doesn't equal empty then uh
352:14 - print you can't go there go again all
352:19 - right let's try this oops colon again
352:23 - there we go okay so let's try this oops
352:26 - one um five
352:28 - and then let's try to override it again
352:30 - and see what it says it says you can't
352:33 - go there go again so cool so it actually
352:37 - um this popped up so it it noticed that
352:40 - it was trying to override it but as you
352:41 - can see it still
352:43 - overrided um I think that's because we
352:45 - didn't actually um implement or ask for
352:48 - the new new input again it just it
352:50 - continued to override it I think it just
352:52 - went on here um it went on to setting
352:55 - the board position to player anyway
352:58 - so actually what we need here is another
353:00 - while loop this part gets a little bit
353:02 - tricky um but just try to follow along
353:04 - I'll explain at the very end clearly so
353:06 - that um it makes sense um so actually
353:09 - what we're going to do is we're going to
353:10 - add another while loop around this while
353:13 - loop and just call it and just run it on
353:16 - a Boolean um called valid or while not
353:19 - valid if the input is not valid it's
353:22 - just going to keep asking over and over
353:23 - again and we of course need to create
353:25 - valid originally and we'll just start it
353:27 - as false
353:28 - because we'll assume it's not valid so
353:31 - while not valid then we are going to um
353:35 - keep asking for a a input in this range
353:38 - get it and then check the position and
353:41 - then if it doesn't equal um if the if it
353:44 - doesn't equ actually would it be easier
353:46 - to this makes more sense let's do it
353:48 - this way if bir position does equal um
353:51 - an empty spot then that means um valid
353:54 - equals
353:55 - true we can set valid equal to true to
353:58 - finally break out of this other loop and
354:00 - then else then we can print this so now
354:04 - let's try to run it this should work now
354:07 - so let's try to put one and then five
354:09 - and then five again and it says you
354:11 - can't go there go again and we try to
354:14 - put five you can't go there go again put
354:16 - five you can't go there go again over
354:18 - and over again until I choose something
354:19 - that is valid like six and then you can
354:22 - see that it puts the value in position
354:24 - six and leave this one alone all right
354:26 - so this is a little bit tricky let me
354:28 - explain what's
354:29 - happening so um we have this while
354:32 - loop um that is running on this Boolean
354:35 - called valid and then uh once we enter
354:38 - this then we'll make sure that the
354:39 - position inputed is within this range
354:42 - and then after that then we'll change
354:45 - that to the board position and then
354:46 - we'll check again oh is this board
354:48 - position available and then if it is
354:51 - available then we set this equal to true
354:53 - so that we can jump out of here and go
354:55 - onto here to actually placing the
354:57 - placing the piece on the board but if it
354:59 - isn't then it'll say you can't go there
355:01 - go again it'll this will stay valid will
355:03 - stay false it'll come back up here um
355:06 - and then it'll run this again It'll ask
355:07 - for more input over and over again and
355:09 - then once it gets a valid input it'll
355:11 - check to see if the board is available
355:12 - and then again if it's valid then it'll
355:15 - go on but if it's not then it'll just
355:16 - say you can't go again it'll loop back
355:18 - up and then continue over and over and
355:20 - over again so a little bit tricky um
355:22 - sometimes this input stuff kind of uh
355:25 - kind of sucks but uh if you're using a
355:26 - lot of other Frameworks when you're um
355:28 - actually building bigger apps a lot of
355:30 - this input stuff is taken care of for
355:31 - you already it's uh not too often that
355:34 - you have to actually do it yourself like
355:36 - this but I mean it's good it's good
355:37 - exercise to understand the logic that's
355:39 - going around so um and I think that's
355:43 - actually it I mean like I haven't put
355:45 - comments everywhere but I think we have
355:46 - a fully functioning Tic Tac Toe app
355:49 - pretty cool so uh let's just try to R
355:51 - run one last time and uh go through this
355:54 - game and then see if uh go through all
355:57 - the cases and see if everything's
355:58 - working correctly so if we put a a valid
356:01 - input in then yeah it puts it in the
356:02 - right spot put another valid input in it
356:04 - puts it in the right spot if we try to
356:06 - overwrite by putting it in position two
356:10 - uh it says you can't go there okay let's
356:11 - put it in position three instead okay
356:14 - now it's O's turn again let's put it in
356:17 - position uh five okay and then X's turn
356:20 - let's put it in position six and then um
356:23 - choose a position from 1 to nine let's
356:25 - put it here so this be 1 2 3 4 5 6 7
356:28 - eight position eight so we can put o and
356:30 - then o should win and as you can see o
356:33 - won very
356:35 - cool um now let's run it again uh if o
356:38 - wins then X will can also win um but
356:41 - let's try to put in some let's try to
356:43 - tie okay one two three I memorized this
356:46 - little uh sequence
356:48 - here um quickly so this looks like a
356:53 - tieing game if we put this in here then
356:54 - yeah it'll I'll print tie so he it looks
356:57 - like our TI toe game is working as
356:59 - expected um everything is working nicely
357:02 - uh it is pretty robust because it only
357:03 - allows for certain inputs it doesn't
357:05 - allow for overwriting uh your certain
357:07 - pieces and it out prints everything it
357:10 - lets it lets uh the players know whose
357:11 - turn it is it lets them know what the
357:13 - input and everything so this is a very
357:15 - nice small um self-contained and robust
357:17 - little application and uh you guys
357:19 - followed along and you coded it yourself
357:21 - so good job I would actually uh advise
357:24 - you to look at the code I'm going to
357:26 - upload the code with full comments um
357:29 - probably somewhere maybe in the in the
357:31 - in the description of this video or
357:33 - something and you can click on it and
357:34 - really read it I'll try to explain
357:36 - everything as best I can in the comments
357:37 - so that you can really trace it the
357:39 - entire thing yourself and then um things
357:42 - will just be clear you could also maybe
357:44 - perhaps try uh do little do little
357:47 - exercises like change the code like see
357:48 - if you can change it um instead of
357:50 - having X's and O's as the players maybe
357:52 - change it so that it's a and b or
357:54 - something cool like that little
357:56 - challenges but um other than that uh
357:58 - good job guys you created your first Tic
358:00 - taoe app with me and uh I hope you
358:02 - enjoyed it I hope you learned a lot um I
358:05 - hope you guys like me I'm a I'm a new
358:06 - person on this channel right now Kazi
358:09 - kind of um allowed me in here after I
358:12 - begged and begged and begged and begged
358:14 - but yeah I'm here now so um I expect to
358:17 - hear more from me uh thank you all for
358:19 - listening and um uh I'll get better at
358:22 - this as I go so if uh if there's
358:24 - anything little off or anything just
358:25 - give me a chance um I'm going to keep
358:27 - working at this real hard to give all
358:29 - you guys as much value as I can um a lot
358:32 - of free value um any any kind of value I
358:34 - can offer and programming um whatnot but
358:37 - yeah um again I am Aaron from clever
358:39 - programmer and thank you all for
358:41 - watching good
358:45 - [Music]
358:56 - bye
358:59 - [Music]
359:05 - that py hit
359:08 - enter okay I'm going to do it
359:12 - again do it
359:14 - again okay so you guys get the idea hey
359:17 - guys what's up this is ky from clever
359:19 - program.com and today we're going to
359:22 - learn how to create a pip that py hit
359:26 - enter
359:28 - okay I'm going to do it
359:30 - again do it
359:33 - again okay so you guys get the idea hey
359:36 - guys what's up this is kazy from clever
359:38 - program.com and today we're going to
359:41 - learn how to create a python texting app
359:43 - using the too
359:46 - [Music]
359:53 - API essentially I've broken this down
359:56 - into
359:58 - 10 very easy to follow steps and as a
360:02 - matter of fact you don't even need to do
360:04 - the first two which is create a GitHub
360:06 - account or Star this at the top right
360:09 - it's so easy to do this you guys that
360:12 - I'm going to walk you through each step
360:15 - okay and you guys are going to see that
360:16 - within just a few minutes we're going to
360:18 - have this app up and running so let's
360:20 - get
360:21 - started so I'm going to just open up a
360:24 - new tab here and go to TWI io.com and
360:29 - let's just walk through and create an
360:32 - account together
360:33 - okay now normally I wouldn't walk you
360:36 - through creating an account but there
360:39 - are certain things that I want you to be
360:41 - aware of as we go along
360:44 - okay so I'm just going to put in my name
360:47 - uh put in some
360:49 - email regular Bing stuff here let's take
360:53 - SMS which product you plan to use it for
360:55 - first we're going to say I don't have a
360:56 - project in mind for the question what
360:57 - are you building and for a language
360:58 - let's say python cuz python is pretty
361:00 - awesome uh and they are telling us to
361:02 - make sure our password is safe and has
361:04 - uppercase or whatever cool no
361:06 - worries okay we need to verify that
361:08 - you're a human being so let's verify
361:10 - that we Are a Human Being
361:12 - indeed okay and we are in let's click
361:15 - get started here and essentially what we
361:18 - want to do is get through just their get
361:20 - started part so you can get your tlio
361:23 - phone number okay that's one thing we
361:25 - need we need two things basically from
361:26 - twilio we need the twio phone number and
361:30 - we need uh your like cell phone number
361:34 - or one of the cell phone numbers that
361:35 - you might want to text or bother okay
361:38 - but they have to verify the phone so you
361:40 - can't just do it to a random person you
361:42 - have to make sure that you have that
361:43 - phone available so first of all let's
361:45 - just get started with the twio phone
361:47 - number whatever number they give you
361:49 - just hit choose this number and we're
361:51 - going to accept whatever they give
361:53 - us okay that's our twio phone number now
361:56 - we're going to send a text message to
361:58 - our phone number okay so let's just put
362:02 - whatever the body we want to put let's
362:04 - say
362:06 - um haaha okay and here if you request
362:12 - the code it it'll also like show you
362:15 - what code it's using to put in that
362:18 - hahaha so to speak let's just hit make
362:22 - request and it says did you receive the
362:25 - message so I'm going to go to my phone
362:26 - and let's check check if we received the
362:28 - message and I don't know if you guys can
362:30 - see my phone but it looks like that we
362:32 - did receive the message it says hahaha
362:35 - okay that's pretty cool let's hit yes we
362:38 - received the message now we're going to
362:40 - test out um responding to the server and
362:45 - it's going to reply back to us with
362:47 - hello from twilio as you see right over
362:49 - here okay so I'm going to message them
362:53 - back with something it doesn't really
362:54 - matter what you send them so I said I
362:56 - said why y yttt very um cryptic message
363:01 - very important and they said hello from
363:04 - twilio as we expected again I don't know
363:06 - if you guys can see this clearly but I'm
363:08 - I hope you
363:10 - can okay so we did receive an SMS
363:12 - message that's great let's hit SMS
363:15 - tutorials and we actually don't need to
363:17 - view this anymore okay cool so now let's
363:21 - get on to the next steps all right so
363:25 - now let's see what our next step step is
363:28 - okay so now that we're done creating a
363:30 - twio account and getting our phone
363:33 - numbers let's go ahead and verify uh a
363:36 - phone number so let's go ahead and click
363:39 - this link so I have a verified phone
363:42 - number I don't even need to verify phone
363:44 - number anymore I've already done
363:47 - that and now we can go ahead and get our
363:50 - twilio credentials okay so if you look
363:54 - at step seven it says hey once you get
363:56 - your credentials and your to your phone
363:57 - numbers go ahead and put it in
363:59 - credentials. py which is this thing over
364:02 - here so if you were to clone this um
364:06 - program if you were to clone all of this
364:09 - in your desktop and open it there then
364:11 - you can just directly get access to that
364:13 - file credentials. py and put it in there
364:16 - but we're going to code this from
364:18 - scratch so uh let's let's just do that
364:22 - together so I'm going to go to my
364:24 - desktop and I'm going to create new new
364:29 - folder
364:32 - app all
364:37 - right so I'm going to open up my idle
364:40 - and I'm going to code the stuff up right
364:43 - in here so we created a f we created the
364:46 - folder called twio app and I'm going to
364:48 - essentially throw my code in there once
364:51 - I'm done writing it I'm going to hit
364:52 - command and so it opens the part where I
364:54 - get to write my script um for the
364:58 - script first of all let's save this guy
365:01 - okay and let's call it let's uh throw it
365:04 - in our desktop let's go to twio app and
365:08 - we don't need that folder we're just
365:10 - going to save it here we're going to
365:12 - call this one
365:13 - credentials. py and here we're going to
365:16 - put all our credentials okay so what do
365:19 - our credentials look like well we need a
365:22 - few things we need our account
365:26 - Sid um we need our off
365:31 - token we need my cell and we need my
365:35 - twio
365:37 - okay
365:40 - and let's just go ahead and get all of
365:42 - those I have this link here for you guys
365:45 - you can go to this link so I'm going to
365:48 - go ahead and get that account Sid put it
365:51 - right
365:52 - here um I need to get my off token so
365:57 - I'm going to go ahead and do
366:04 - that make sure you put it as a string
366:06 - okay so you notice the little quotations
366:08 - that I'm putting there now I need to get
366:11 - my cell number so I also provided link
366:14 - for you guys here in Step six so let's
366:17 - uh go ahead and uh get this bad boy
366:21 - right here just like
366:23 - this and I'm going to go and paste it
366:27 - here okay but it can't have the hyphens
366:30 - or anything so I need to remove that
366:33 - make sure to have that plus and that one
366:36 - you you'll need that so basically your
366:39 - whole thing if you have a one and a plus
366:41 - you need that now let's go to manage
366:43 - numbers and we're going to get our twio
366:46 - number from manage numbers okay so let's
366:49 - click here and that should give us the
366:54 - number right here okay
366:59 - okay and I'm going to save it so now our
367:01 - credentials. py are
367:04 - saved and so I just hit command n you
367:06 - can just open a new script however you
367:08 - like and this one is going to be called
367:10 - send. sendor SMS this is going to be the
367:13 - one that's going to allow us to actually
367:15 - send our text so I'm going to save it
367:18 - first first thing you guys will need is
367:20 - to
367:22 - actually
367:24 - install um you need to install twio okay
367:27 - so pip install twilio so just open up
367:30 - your terminal so on your Mac you're
367:32 - going to say it term or term depends
367:35 - whatever you have so just go ahead and
367:37 - open your terminal on your MacBook and
367:40 - if you're on Windows go and download git
367:44 - bash okay uh
367:48 - download git
367:53 - bash and once you download this okay is
367:57 - this link here once you download this
368:00 - you can do the same thing and follow
368:02 - along what I'm going to do in Mac okay
368:04 - so I'm going to install twilio the
368:06 - library
368:08 - twio okay so back to back to the
368:12 - tutorial let's do pip install
368:17 - twilio and this should install twilio
368:19 - for
368:22 - me oh um I got permission denied what's
368:26 - going going on here I need to
368:29 - maybe uh which
368:32 - python okay it's Python 3 right this is
368:36 - definitely Python 3 pseudo pip install
368:45 - tlio so sometimes when you get
368:47 - permission errors when you're trying to
368:48 - use the terminal to install stuff just
368:50 - put pseudo in the start and that
368:53 - essentially just says hey I have root
368:55 - access and now I'm want to run this
368:57 - command so yeah don't stop me I'm going
369:00 - to run this command Okay cool so now
369:03 - that we have installed twio let's go
369:06 - back to
369:08 - our
369:10 - um idle here and we were at the part
369:13 - where we were writing our script for
369:14 - sending the SMS so we're going to say
369:17 - from
369:19 - T.R import twilio rest
369:24 - client and I have my notes Here here
369:26 - because this is not something I code
369:29 - every day so I don't know this at the
369:32 - top of my head but that's not the
369:33 - interesting
369:35 - part so what I'm trying to do now is
369:39 - from this file I'm trying
369:43 - to uh just pull all my credentials so I
369:49 - created one file which just stores my
369:50 - credentials and then I want to retrieve
369:53 - those credentials from my in in my send
369:56 - or sms okay that's essentially all I'm
369:59 - doing so account said what other
370:02 - variables do I have off
370:05 - token uh my
370:08 - cell my
370:11 - twio
370:12 - okay now I'm going to say client is
370:15 - equal to twio rest
370:20 - client I'm going to um pass in the
370:24 - account Sid here to the rest client and
370:27 - it also needs the O
370:29 - token
370:31 - okay now whatever message you want to
370:34 - text your message actually goes here so
370:38 - you can put in whatever you want I'll
370:40 - show you guys some cool text messages
370:41 - that you can
370:45 - do uh let's we're we're almost there
370:49 - guys we are pretty much done actually
370:54 - create to equals my
370:59 - cell comma
371:01 - from underscore equal my
371:05 - twio okay and then for body we want to
371:09 - say equal to my message
371:13 - so client. messages. so do create is a
371:16 - method that takes in multiple arguments
371:18 - in this case it's taking three arguments
371:20 - two from body okay it probably takes
371:22 - more arguments we don't know but these
371:24 - are the arguments that we passed it in
371:26 - these are keyword
371:28 - arguments
371:30 - and my cell is this variable right here
371:33 - so it puts in your cell phone number
371:35 - from your other file uh my twio that's
371:38 - your my twio phone number so that puts
371:40 - that in also it retrieves it from the
371:42 - other file the magic of importing and
371:45 - then uh my message goes here so whatever
371:48 - your message may be so this is this
371:51 - variable okay now let's try to run the
371:54 - script and see if it sends us a text
371:56 - message like what I would recommend you
371:58 - to do is what I have written here okay
372:02 - this way this is the best way to run
372:04 - your
372:05 - scripts so for
372:08 - example what I want to do is I want to
372:11 - go to my
372:15 - desktop um and this is where my file is
372:18 - going to be right so I created a thing
372:21 - and it was called twio app so I just go
372:23 - in there and it's called send sms. py
372:28 - that's the file I want to run okay so
372:30 - I'm going to say
372:32 - python send sms. py okay and hopefully
372:36 - this runs and does the trick for me so I
372:39 - think my command just
372:42 - ran and as you can see the last text
372:46 - here it
372:47 - says your message goes here right so
372:52 - that's awesome we just sent our first
372:55 - text
372:57 - so let's let's do something
373:00 - cooler and rather than just make it here
373:03 - I'm I'll send the text again just so you
373:05 - guys can see it and and see it's live so
373:07 - I'm going to hit up here so I can recall
373:10 - the command and I'm going to do python
373:11 - send. py hit
373:16 - enter okay I'm going to do it
373:19 - again do it
373:21 - again okay so you guys get the idea and
373:24 - how my terminal and all that stuff is is
373:26 - connected and it's sending the text
373:29 - messages and let's now try to make the
373:33 - text message a little bit more fun and
373:35 - before I get to that just so you guys
373:37 - know you guys can go to this link I'll
373:39 - have it in the description below if
373:41 - you're watching it on my YouTube channel
373:43 - and all you'll have to do is create a
373:45 - GitHub account and you can just hit this
373:47 - clone button you get all of this code
373:49 - you don't have to write it yourself and
373:52 - then you can just go and run this
373:53 - command from your terminal especially if
373:55 - you're using a Mac and you're good to go
373:57 - if you're using Windows no worries just
373:59 - download git bash and type in the same
374:01 - stuff and you should be good to
374:03 - go uh make sure that you don't skip this
374:06 - part part nine which is to install
374:09 - twilio okay so you can see that the text
374:12 - messages are actually going through now
374:15 - let's try to make them a little bit more
374:16 - fun so I'm going to go to my idle uh
374:19 - here and let's make our text messages
374:22 - more
374:24 - fun uh just so just so I can show you
374:26 - guys something uh let's
374:34 - see so silly person sln sln puts a new
374:39 - line so if I had to show you that sln is
374:42 - is not an actual thing in itself it just
374:45 - puts a new line so here it it'll say
374:47 - silly person and it'll put this blank
374:50 - line here so sln is used to actually put
374:53 - new lines so what I want to do is I want
374:56 - to use list
374:58 - comprehension and I want to say uh silly
375:04 - person with new
375:07 - line um for I in
375:10 - range 10 for now and if I show you silly
375:15 - person you can see that it says silly
375:17 - person silly person 10 times that's your
375:19 - fry and range 10 and it's a list
375:22 - comprehension because it's all in one
375:24 - line and I didn't have to do any other
375:25 - stuff now what I want to do is since I
375:28 - wrote this 10 times I want to
375:30 - concatenate as a string because remember
375:32 - my message does not take it in a Tak in
375:34 - a list this variable here this argument
375:38 - here body expects a string so we need to
375:41 - convert this list into a string so what
375:44 - we can do there is we can actually do
375:47 - this
375:48 - trick and you can see what this just did
375:51 - I said join X so join this entire list
375:55 - here
375:56 - here uh with only empty strings so it
376:01 - creates this one giant string okay what
376:04 - does that look like well if I print this
376:07 - out for you you'll see what it looks
376:08 - like it actually looks like this okay um
376:13 - so let's let's do that so I'm going to
376:16 - go here and I'm going to
376:18 - say
376:19 - silly Bob new line I for or sorry for I
376:26 - in
376:27 - range uh I don't know
376:30 - 100 and let's go like
376:32 - this and then go here and say that
376:37 - join okay this should be good I saved it
376:40 - I'm going to go back to my Python and
376:45 - simply uh run it where was I running it
376:48 - was I running it in my terminal was I
376:50 - running it in my I
376:52 - terminal I don't remember here let's try
376:55 - it here pythons send sms.
377:00 - py let's see if we get this
377:08 - message what I'm not getting it what's
377:10 - going
377:12 - on oh I just got it look at
377:15 - that so I don't know if you guys can
377:17 - tell but that says silly
377:20 - Bob
377:22 - like like a lot of times right it's a
377:26 - silly
377:28 - Bob a lot of
377:31 - times so yeah you can add some more
377:33 - stuff to it like that so hopefully that
377:36 - gives you guys a clear idea of um you
377:40 - know how to create a pretty rudimentary
377:42 - basic python app using the twillo API
377:46 - and in this project the things that I
377:47 - expect you to learn is like okay how did
377:50 - we use import statements to retrieve
377:54 - data from another file and then use
377:57 - another one right for example we used
377:59 - the import command and sendor smsspy
378:02 - which leveraged data from our
378:04 - credentials. py other things that you
378:08 - have to keep in mind for this is uh so
378:10 - we learned a little bit about list
378:11 - comprehensions but more importantly one
378:14 - big thing that you guys got introduced
378:16 - to are something called apis which are
378:18 - known as application programming
378:21 - interfaces these are tremendously
378:23 - powerful and essentially they can give
378:25 - you you unlimited power without you
378:28 - having to do anything this is you
378:31 - leveraging somebody else's application
378:33 - or an app because remember we didn't
378:35 - write this texting app we leveraged
378:38 - twilio's API to do it for us twilio
378:41 - knows what to do with the texting and
378:43 - then we just get to leverage it I have a
378:45 - few apps that I created which leverage
378:47 - the search engine and Google Maps
378:49 - because I used the Google Maps API and
378:52 - integrated it into my own website so it
378:54 - feels like I did it but really I just
378:57 - Leverage The API of Google Maps there
379:00 - are tons of other apis like that like
379:02 - Yelp API you can pull local restaurants
379:06 - and see what their ratings is and what
379:09 - restaurant is hot and popping up and you
379:11 - can actually integrate that data into
379:13 - your own personalized app or even a
379:16 - mobile app using the Yelp API so apis
379:20 - are actually tremendously powerful and
379:22 - this was just a little hint of that I
379:25 - really hope you guys guys didn't run
379:26 - into any problems and the instructions
379:27 - were clear if they were not please
379:30 - comment below and I will personally help
379:32 - you out and we will get your app up and
379:34 - running because I really would love it
379:36 - if you guys were able to send this you
379:39 - know text to yourself or to anybody you
379:42 - know maybe your spouse or your friend um
379:46 - you know just to have a little bit of
379:47 - fun now do remember that with a free
379:49 - twio account you only can text verified
379:52 - numbers which means you can't just text
379:54 - anybody that you want
379:56 - so if you pay then you will be allowed
380:00 - to actually text whoever you want it's
380:02 - not much I think it's $1 a month but I
380:05 - could be wrong uh that's what I what I
380:09 - saw other than that that's what this is
380:13 - about I think what I'm working on now is
380:16 - creating a chess app so I might actually
380:19 - um have a project for you guys on that
380:22 - and we might actually build it from
380:24 - creating the chess engine so the logic
380:26 - then the user interface and then the
380:30 - chest multiplayer app so that's
380:32 - something actually I'm currently writing
380:35 - and once it's done I'll probably have it
380:37 - presented to you guys anyways guys I
380:40 - love you so much please like the video
380:43 - if you liked it and subscribe to the
380:46 - channel and I'll see you on the other
380:48 - side okay take care
380:51 - [Music]
380:54 - bye
380:57 - how's it going everybody hope you guys
380:59 - are doing amazing my name is nazari and
381:01 - I am a fullstack developer who's been
381:03 - working with Jango for quite a while now
381:06 - and today I am here to teach you how to
381:09 - build a Jango to-do app okay so what
381:12 - will we learn today we will learn how to
381:14 - create a Jango to-do app that contains
381:16 - the back end the front end and the
381:17 - database all working together we will
381:20 - also learn how to use bootstrap and its
381:22 - basic structure to create beautiful
381:25 - looking applications and we will then we
381:27 - will learn how to create a Jingo Model A
381:30 - Jingo view where all your program logic
381:32 - will live and then finally we will learn
381:35 - how to use the Jingo Ram to manipulate
381:37 - the database and I think overall you
381:40 - will learn how to take an idea that's in
381:43 - your mind divide it up into pieces and
381:46 - put it into reality cuz that is a very
381:48 - important part now the best way to learn
381:51 - from this tutorial is to code along with
381:53 - me that is very important you guys guys
381:56 - now if you run into any problems I
381:58 - linked the code below and you can just
382:00 - kind of use it to compare and contrast
382:02 - and see where you went wrong now if you
382:06 - are really stuck you can either comment
382:08 - on YouTube or you can direct message me
382:11 - on Instagram at Naas dumanski and I'll
382:14 - be happy to answer any of your questions
382:16 - now other than that let's get started
382:19 - guys all right so before starting any
382:21 - new project I like to write out a very
382:24 - simple requirements document like this
382:27 - okay so let's take a look at first
382:29 - things first is the goal what are we
382:31 - trying to achieve with this app right so
382:34 - we want to allow users or customers to
382:37 - keep track of things they need to do on
382:39 - a daily basis so that's the goal the
382:42 - user story is what can users do on the
382:45 - application functionality wise so the
382:48 - first thing they can do is a user can
382:50 - view his or her list of to-do items so
382:54 - that's number one number two is a user
382:56 - can create a new to-do item that's
382:59 - number two and the third one is a user
383:02 - can delete a current to-do item and so
383:05 - these three functionalities will tell us
383:07 - what we have to write in terms of
383:09 - codewise right um and so after that I
383:12 - like to do a simple flow diagram because
383:15 - I'm more of a visual person and this
383:17 - helps me out a lot trust me um so as you
383:21 - can see we started with a stick figure
383:23 - which is a user that's very nicely drawn
383:25 - stick figure a user will load the web
383:28 - page what's going to happen next we're
383:30 - going to get Tod do items because I'm
383:33 - guessing we will have them stored
383:35 - somewhere in the database and then we
383:37 - will show Tod do items somewhere in the
383:39 - template page so that covers the first
383:42 - user Story the second user story is
383:46 - again we start with the stick figure and
383:48 - what they can do is they can input a new
383:51 - to-do item cuz we'll probably have an
383:52 - input box they will click submit
383:55 - we will add that item to a database and
383:58 - we will reload and when you see when you
384:01 - reload you see that kind of traces back
384:03 - to the beginning through here but we
384:05 - will get to do items and show to do
384:07 - items and so that covers those two user
384:10 - stories now my challenge to you is to
384:13 - create a third flow diagram for the
384:16 - third user story because you will see
384:19 - just how useful this is now with this
384:22 - out of the way let's go ahead and get
384:25 - into the coding I'll see you guys there
384:27 - let's take a look at what we're actually
384:29 - going to make now here's the application
384:32 - obviously it's called let to do app and
384:34 - it's pretty simple as a customer or as a
384:38 - user let's say uh I let's say I want to
384:41 - add a few Todo items that I want to do
384:43 - for the day so I want to read my python
384:46 - 101 book which is very important
384:50 - obviously right I need to go for a run
384:57 - right and then I'm going to take the jle
385:01 - tutorial take the jingle tutorial
385:06 - to tutorial perfect and as I do these
385:10 - things right I just simply click delete
385:13 - delete delete and that's it and I'm done
385:16 - and as you can see that's pretty much
385:18 - the whole app it's very simple but very
385:20 - functional and looks good as well but
385:23 - the important thing to understand here
385:25 - is The Core Concepts behind building
385:27 - application like this right because now
385:29 - you get to learn things like backend and
385:32 - how the backend interact with the front
385:34 - end and how now the backend interacts
385:37 - with a database all those things are
385:38 - very important for not just building
385:40 - applications like these about building
385:42 - much bigger applications uh like
385:44 - Instagram Facebook Twitter anything like
385:46 - that so with that being said let's
385:48 - actually take a look at how we build
385:50 - this because I'm really excited for part
385:52 - one of building this application uh
385:54 - let's goad and install and actually go
385:56 - to reel.it this is basically an
385:59 - environment that's going to allow us to
386:00 - easily build this app without having to
386:03 - install anything or anything along the
386:05 - lines of that uh so just go and rle that
386:08 - it and click sign up and once you've
386:10 - clicked sign up you should see a
386:12 - dashboard kind of like this and you
386:15 - should actually have zero obviously
386:18 - applications but I have my to- do app
386:19 - cuz I already built it and so just click
386:21 - plus new Apple that's the first thing
386:23 - select jingle let's name it to do
386:25 - app to do app simple career
386:30 - repple so what it's going to do now is
386:32 - obviously it's going to install the D
386:33 - Jango uh environment it's going to
386:35 - install the server it's going to install
386:38 - all the necessary files for it making
386:41 - the things very simple for us click
386:45 - Start it's create migrations I will talk
386:47 - about these things a little B
386:52 - later there we go hello r or hello world
386:56 - all right now let's take a look at
386:57 - creating a model now what's a Model A
386:59 - model in Jingo is something that
387:01 - represents a database table that's how
387:04 - Jingo translates it okay so I'm going to
387:07 - copy a few lines of code here right here
387:10 - going to copy these lines of code just
387:12 - for Times Sake okay I want to paste it
387:15 - here so what do we have here okay we've
387:17 - got a class called to-do that represents
387:20 - a database table we also have something
387:24 - called edit date and text and these are
387:27 - attributes of a database table right so
387:30 - we have an edit date that's a date time
387:31 - field and we have a text that's a Char
387:34 - field obviously we have those at a DAT
387:36 - is simply when did we add it to do item
387:39 - and the text field is there because
387:41 - obviously we need to save the text of
387:43 - the to two item that makes sense um and
387:46 - what's jeno going to do is jeno is
387:48 - actually going to translate these these
387:51 - models and these attributes to database
387:54 - SQL in ctions in searches and updates
387:56 - and so forth so go ahead and click
387:58 - restart just to see what I'm talking
388:00 - about you can see that what's going on
388:02 - is it's creating a model to do
388:05 - interesting right okay okay so with that
388:11 - actually go ahead and click restart
388:12 - again just trust me do
388:15 - it click
388:18 - restart and what's going to happen is
388:21 - you have this migration file right and
388:24 - this is what jingle uses to keep track
388:27 - of the database right it says here
388:29 - create a model with an ID that's an auto
388:32 - field that's a primary key right with an
388:34 - edit date as a daytime field and text as
388:36 - a chart field and that's pretty much it
388:38 - right now obviously it gets a lot more
388:40 - complicated than this but I just want to
388:41 - show you because it's very interesting
388:43 - to me and it's very important to
388:44 - understand how these things happen on
388:46 - the back end as well okay now we're
388:48 - going to make this application just a
388:51 - little bit more stylish we're going to
388:53 - use something called bootstrap
388:55 - which is just a a a framework that
388:57 - allows you to make beautiful sites in a
389:00 - much faster Pace okay so go ahead and go
389:02 - to bootstrap just typing bootstrap into
389:04 - Google or go to get
389:07 - bootstrap.css
389:10 - go to the doc documentation and we need
389:14 - to install the following okay we need to
389:17 - install the CSS and we need to install
389:19 - the JS so go ahead and copy CSS first
389:22 - okay all right now the question is where
389:25 - do we in add these all right so we have
389:28 - the base. HTML and we have an index.
389:30 - HTML in the base. HTML this is where you
389:33 - have your base structure of the site and
389:36 - now I that's where you would add it okay
389:38 - so go ahead and just add that to here
389:43 - and let's go ahead and copy the JS files
389:45 - the JavaScript files to here as
389:49 - well once you've done that just click
389:53 - restart
389:56 - and
389:58 - and voila we got a little bit more
390:01 - stylish hello
390:04 - reel.it next we want to create a base
390:07 - layout for the application that does not
390:09 - include any of the logic so far so our
390:13 - goal is to basically create HTML like
390:16 - this without any of the fancy logic just
390:18 - yet okay uh so let's go to do that so
390:21 - what do we need first okay with first we
390:24 - need to to create this navigation bar
390:27 - the way we're going to do that is go go
390:28 - to boost strap and let's let's actually
390:30 - type it in this is literally the process
390:32 - that I do with anything that I do with
390:34 - Boost trrap so just type in nav okay and
390:38 - we see we have a navigation bar it looks
390:40 - just like this but we're not looking for
390:42 - that we're looking we're looking we're
390:45 - looking no no no no no no no nav bar
390:50 - there we go that's the one nav bar and
390:54 - we really need a simple
390:56 - Navar that is of black color let's see
391:00 - let's see so kind of like this you can
391:02 - see right there we have a nav bar okay
391:05 - so we can just copy that in here and the
391:09 - reason why we're putting it into the
391:10 - body section the base at HTML is because
391:14 - that's where the whole application
391:16 - inherits the whole HTML right so
391:18 - navigation something that's going to
391:19 - stand throughout the whole app okay and
391:23 - that's what we're putting in here so
391:25 - well why so
391:28 - much I guess I don't want to copy all
391:30 - that so just copy this part I
391:33 - guess copy that and voila all right
391:38 - refresh so be I mean we have just a
391:41 - black bar nothing fancy now we need the
391:45 - actual
391:47 - wording to do app
391:49 - okay and if you look a little bit more
391:52 - down we can see that in order to get
391:54 - that in there's something called a Navar
391:56 - brand okay so just copy
392:01 - that right
392:04 - there refresh and voila obviously now
392:08 - this is actually called a to-do
392:11 - app to do app refresh that and that's it
392:16 - right so you've got the navigation bar
392:19 - just like you have it in the application
392:21 - that I showed you pretty simple the way
392:24 - we we just got that um now we're going
392:27 - to look at how to add all the other
392:29 - parts of the HTML into the application
392:32 - okay the first thing obviously what we
392:35 - need to add here no actually here we
392:38 - need to add like things like at the add
392:40 - item the input box the form and
392:42 - obviously the list of to-do items right
392:46 - so let's try this at first we're going
392:50 - to be working with the inex HTML because
392:53 - that's the thing that contains s HTML
392:55 - page that contains the container
392:57 - underneath the navigation bar all right
393:01 - so preface okay the way boost trp works
393:04 - is it's divided into rows and columns
393:07 - think of it as you just have a lot of
393:08 - rows and within rows you can have a Max
393:12 - of 12 columns all right so we're going
393:14 - to do create a row that will contain
393:19 - this no this contain the add item and
393:21 - this form all right so that's the first
393:23 - part let's do that so div class
393:27 - equals row right I'm going to close that
393:33 - out oh and then the second one is going
393:35 - to be div oops no not this one div
393:40 - class class equals
393:43 - column
393:51 - column column wait no
393:55 - I'm hold on I just need to I don't know
393:57 - why I'm doing this again uh
394:00 - anyways great so now if we refresh this
394:03 - obviously nothing's going to happen but
394:06 - at this point now we know we need to add
394:09 - this add item H1 tag or no h2 tag in
394:13 - this case so we're going to do
394:15 - H2 H2 add
394:19 - item H2 all
394:22 - right all right it's there but you can
394:25 - see there's no padding right it's just
394:26 - all the way up to the box one thing you
394:30 - forgot to do is to add a container with
394:34 - bootstrap everything kind of has a
394:36 - parent container a big container that
394:39 - contains the whole application so when
394:41 - we go to base HTML you can see
394:43 - underneath the navigation bar we have
394:45 - all the blog content this is the blog
394:47 - content that is inherited from here
394:51 - right you can see this extends the HTML
394:53 - so
394:55 - what we are want to do is we're going to
394:57 - add a container a class container class
395:00 - equals
395:02 - container and then we're going to
395:04 - obviously close this
395:06 - out I like to add my spacing I'm very
395:10 - particular about
395:11 - that great now we have a
395:15 - container okay we've got that part now
395:17 - let's go ahead and add the input box and
395:19 - I'm going to show you how I go by
395:21 - finding or just adding an input box from
395:24 - boot strap so go back to
395:26 - bootstrap all right type in
395:29 - forms right perfect and we're just going
395:32 - to Simply scroll and see what we can add
395:34 - that's similar that's similar okay so I
395:38 - going to scroll now I know at this point
395:39 - I do know where I want to go because
395:41 - I've done this previously but if we just
395:44 - keep going keep going for example we
395:46 - don't want to anything too complicated
395:47 - I'm just kind of
395:50 - browsing that's good I kind of want to
395:52 - add this as well yeah that looks look
395:55 - good that looks
395:57 - good but I think I'm going to just do
395:59 - like an inline form here so first things
396:02 - first we want to add an input box like
396:04 - this and that's represented by this
396:08 - fancy I mean not fancy just this this
396:11 - line of code I guess I don't know why I
396:14 - said fancy anyways so it we're going to
396:16 - copy that and input type um copy that
396:19 - and paste it okay so we have type text
396:22 - class form control margin bottom two
396:24 - margin right two all right so we don't
396:29 - need the
396:30 - ID there's no need for it for the
396:32 - placeholder we're just going to do type
396:35 - here and the placeholder is what's going
396:37 - to be seen inside the input box right
396:40 - next we need to add a button actually no
396:42 - refresh this first right there perfect
396:45 - we've got ourself an input type next add
396:48 - a button we're just going to do there's
396:51 - a button right there there some really
396:53 - cool button submit button copy that
396:57 - paste it
396:59 - here voila You' got it but now we want
397:01 - to do is you want to add a list of items
397:03 - right so go ahead and let's look for a
397:06 - list of
397:08 - items list group or something like a
397:10 - list group
397:12 - perfect there you go now you have a list
397:14 - group we know it's going to look like
397:17 - this let's just add
397:18 - it we don't want to however however we
397:21 - don't want to just add it at the bottom
397:23 - of this section and we I want to create
397:25 - a separate Row for it because it has a
397:27 - separate distinction and so I that's how
397:29 - I like to divide things up so I'm going
397:31 - to do class class equals
397:35 - row right and remember in bu you can
397:38 - have as many rows as you
397:40 - want the only the only restriction is
397:42 - you can have only 12
397:44 - columns div class equals
397:50 - column div no why do I keep doing this
397:55 - all right perfect and we now need
398:00 - [Music]
398:01 - to you literally just copy this for the
398:05 - sake of seeing how it looks like we're
398:09 - going to we're going to format this a
398:10 - little bit nicely okay you can just
398:13 - select it and just click for well or not
398:16 - or just do it by
398:19 - yourself all right refresh
398:22 - it there you go now that has the active
398:25 - one but we don't need that just can
398:27 - remove the active portion perfect you
398:30 - can see that's we have now a list of
398:33 - items which is what we want to do which
398:35 - is what we want so I just took a second
398:38 - to see how we can move the submit button
398:39 - to the top so it's in line with this
398:41 - input uh input type right and one thing
398:44 - I missed is that if you want to have a
398:47 - in line form you just have to create a
398:50 - form container with a form and line
398:52 - class okay and we we're going to do that
398:54 - so create a
398:56 - form class equals
399:00 - form in
399:01 - line and then in
399:04 - here form just like that we'll need to
399:07 - close this out
399:09 - [Music]
399:14 - obviously I really don't like how this
399:17 - just formatted it okay and if you
399:20 - refresh it's completely
399:23 - gone
399:25 - where did it
399:27 - go why did it just
399:30 - disappear oh there it
399:33 - is this is that's so funny anyways um
399:36 - yeah so now you got the form now I do
399:39 - want to add some pain to the top so the
399:40 - way you do with petting for example I'm
399:42 - going to add some petting here right
399:44 - there so I'm going to do there's
399:45 - something called a margin top 4 so we're
399:48 - going to do
399:49 - mt-4 which stands for margin top
399:52 - 4 all right so we added some padding
399:55 - over there and we're also going to add
399:57 - some add padding to this row as well
399:58 - margin
400:00 - top-4 Perfect all right so it's some
400:03 - good that's some a little bit better
400:05 - formatting now I know what you're saying
400:07 - you're saying nazari why are we learning
400:10 - all this HTML where is the Jingle stuff
400:12 - okay so hold on it's coming now now
400:15 - we're going to get into the jingle stuff
400:17 - what do we want to do first initially
400:19 - what we want to do is we want to be able
400:21 - to add an item through this input box
400:23 - correct
400:24 - correct so let's see how we do that now
400:27 - what happens is when you add an item we
400:29 - need somewhere to catch that data and
400:32 - save it in database
400:34 - correct so let's take a look at this
400:37 - views.py file here we have this function
400:39 - called definition home right and this
400:42 - definition home actually when I say
400:44 - definition it's a
400:45 - function it renders the index HTML so
400:49 - probably makes sense that somewhere in
400:50 - here we probably need to create a
400:51 - function to capture the data from this
400:54 - form correct so let's do it we're going
400:57 - to create a function called add too
401:00 - right we're going to have the same
401:03 - parameter request and we're going to
401:06 - print this request for now all right
401:10 - perfect now you're saying okay well how
401:13 - does jingle know to call this function
401:15 - well we're going to find out so go to
401:17 - your rpy file and you can see this URL
401:20 - py file has has all the URLs that
401:23 - contribute to a certain view we we have
401:27 - this called views and you see this
401:29 - views. home that's being called that
401:32 - calls this so we simply need to call
401:35 - views that add too to trigger that
401:38 - function let's do that so we are going
401:42 - to Trigg URL all right oh if I type
401:47 - correctly all right we're no not e I
401:51 - don't know what I said e we're going to
401:53 - now now URL but this time we're going to
401:56 - say URL add too
402:00 - right add Todo and that triggers a
402:03 - function called
402:05 - views. add too so create that comma
402:10 - great so we have URLs in place right we
402:13 - have the logic we don't have the logic
402:15 - yet but we have the function in place
402:17 - now we need to actually we now we need
402:19 - now we need to have this form call that
402:23 - URL so form has something called an
402:27 - action action o o and that action is
402:32 - this URL right we need we need to tell
402:34 - it to go to this URL so go here action
402:37 - add too and the method we're going to
402:40 - pass in the data
402:43 - through a post method there's a get
402:46 - there's a post there's actually a
402:47 - multiple one but post means we're
402:49 - posting something think of it like that
402:52 - okay we also need to change no this is
402:57 - fine type submit that's fine that's
403:00 - pretty much it let's see what happens
403:02 - okay it's broken great the includ does
403:06 - not appear to have any patterns in
403:11 - it no well it
403:14 - does you have
403:22 - URL
403:25 - oh oh I know why because it probably got
403:27 - stuck so if we just simply
403:31 - restart restart restart restart restart
403:36 - restart restart yes restart all right
403:39 - there we go now it's working let's type
403:41 - this in the
403:45 - ru yeah it's
403:49 - broken so there's something called a c
403:52 - token what do we know now we know that
403:55 - it's hitting this URL because when we
403:57 - hit this URL it
403:59 - broke which is
404:01 - great um now we need to solve this issue
404:04 - right d is just a way for us to protect
404:08 - the form to make sure that there's no
404:11 - spam form submissions that's why that's
404:13 - what Jingo has for to protect its form
404:15 - okay for the purpose of this video we're
404:18 - going to unprotected I guess you can say
404:22 - because I I've tried it with trying to
404:24 - protect the
404:25 - csrf uh here in rep. in for some reason
404:28 - I've always have not been able to and I
404:31 - think it's due to a virtual machine
404:33 - issue um but in order to for us to be
404:36 - able to go through um and not have it be
404:39 - csrf protected I guess um here's what we
404:43 - need to do so we go to uspy file and so
404:47 - I'm going to search in csrf
404:52 - exempt
404:54 - csrf
404:56 - exam there we go there it is so we're
404:59 - going to copy
405:02 - this paste in
405:04 - here and now we do
405:08 - csrf
405:11 - exempt exempt and that gives us an
405:15 - exemption that way if we go ahead and
405:17 - simply just type in here anything
405:20 - submit what didn't return race oh right
405:23 - yeah
405:24 - in this case we are going to redirect
405:28 - back to the homepage okay we can
405:30 - literally just simply do like this for
405:32 - now
405:35 - return and render the same homepage
405:37 - that's
405:39 - it and if we refresh that
405:42 - okay boom you see now obious nothing is
405:46 - saved but all we have done is we look
405:48 - here we have printed this request right
405:50 - we now have this request great now I
405:54 - want to print a little I want to dig a
405:55 - little bit deeper in this request okay
405:57 - if I go to documentation of Jango and I
406:00 - type in
406:02 - request all right request
406:06 - object request
406:08 - object here is what the request object
406:11 - contains it contains things like cookies
406:13 - method right in this case however what
406:16 - we want to look at is this post right so
406:20 - this post is dictionary like object
406:22 - containing all G HP HTTP post parameters
406:25 - so if we print that out
406:28 - request.
406:31 - post right and if we refresh
406:35 - this let's type this in refresh it
406:38 - actually type this in
406:40 - submit you see that's an empty
406:42 - dictionary now why is an empty
406:44 - dictionary you might be saying uh well
406:46 - okay let's take a look at it in order
406:48 - for it to post something um every input
406:53 - has has to have a name right a value to
406:57 - have a value you have to h a name have a
407:00 - name attribute so in this case the name
407:02 - ATT will be content okay let's refresh
407:06 - this
407:07 - again type
407:09 - in Python 101
407:15 - book all right click submit and voila
407:19 - you got yourself a dictionary that with
407:23 - the content from the input provided by a
407:26 - user right now we can see and with I
407:29 - mean obviously with this we can actually
407:31 - use it and create a to-do item in a
407:35 - database great great great great great
407:37 - that's awesome so let's go back to the
407:38 - view.py file we now know how this
407:42 - request up post works all right now what
407:46 - we do what do we do now we need to
407:48 - capture two things we need to capture
407:50 - the edit date and we need to capture the
407:52 - content right
407:54 - so let's do it in order for us to
407:57 - capture the edit date what we're going
407:58 - to use is we're actually going to Simply
408:01 - create an edit date like the current
408:02 - date uh there's something called a time
408:05 - zone that Jango has and so we're going
408:07 - to import from D jeno the
408:10 - utils import time
408:13 - zone all right time
408:17 - zone and what we're going to do is we're
408:19 - going to create addit date
408:24 - date equals time zone
408:27 - do. now and that is simply a time zone
408:31 - object of the current literally just the
408:33 - current time that we are creating this
408:36 - all right so that's great now we need to
408:39 - grab the content of the actual this
408:42 - request that post so let's go ahead and
408:44 - do that uh we we can say content equals
408:49 - request. poost and inside here we'll say
408:53 - request post
408:55 - content and that will give us the
408:58 - content of um of what we typed in here
409:02 - okay let's now let's try this out so
409:03 - we're going to print at a
409:06 - date this is literally the way I'm
409:09 - teaching you guys is literally how I how
409:12 - I develop okay I I print things out I
409:16 - test things out cuz the last thing you
409:18 - want to do is you want to write a bunch
409:19 - of functions and and and then you
409:22 - realize that you did all wrong right
409:23 - because you didn't test it and so as I
409:25 - go along I test things and that's what
409:28 - you should do too honestly I'm not the
409:30 - only one who do who does this trust me
409:32 - print content uh we don't need to print
409:34 - this anymore right so refresh
409:39 - it
409:41 - okay
409:43 - 101
409:45 - book click
409:48 - submit let's see what happened here oh
409:51 - got a all M right so if we I'm going to
409:55 - highlight this okay this was our request
409:58 - okay here is what got printed this is
410:01 - the date and add a date it's a time zone
410:03 - date 2019 uh 0815 and this is the
410:06 - content 101 book
410:09 - perfect
410:11 - perfect and then we obviously refreshed
410:16 - okay great great great now with this
410:20 - data in here we've captured this data we
410:22 - need to to save this data somehow so
410:25 - what Jingo has is Jingo has those
410:28 - remember those class to-do items that's
410:30 - what we're going to use we're going to
410:32 - import from Jingo the models
410:35 - from um I think it's main D models from
410:39 - Main so you see this main models
410:43 - import to do we are importing literally
410:47 - this class
410:49 - okay import this class and so let's
410:53 - let's go ahead and
410:54 - actually create a model right right so
411:00 - jingle create object right in this case
411:05 - create AO we're going to create a model
411:08 - instance
411:10 - and there should be a create
411:14 - function all right perfect yes we have
411:16 - that but I want to do is here we go if
411:20 - you look at here what jingle gives us it
411:22 - gives us
411:23 - this you know every class has an
411:25 - instance called object and there's a lot
411:28 - of functions that that class has and one
411:30 - of those is a create function and that
411:33 - literally creates a creates a database
411:36 - actual entry right so if we use this
411:41 - this is my mod objects that create and
411:43 - for us it's going to be too right to do
411:47 - to
411:50 - doobs do create now what are we
411:53 - inputting into here okay we we need put
411:56 - input a few things if you look at our
411:58 - models we have the edit date and we have
412:00 - a text okay go back to
412:03 - views the addit
412:07 - date
412:09 - equals actually I'm going to change this
412:11 - this date this is um
412:15 - current I'm just going to change this
412:17 - date current datee
412:19 - okay added date equals current
412:23 - date then the text that's the another
412:27 - attribute equals
412:30 - content perfect text equals content two
412:34 - the objects I create add a date equals
412:36 - current date text equals content with
412:39 - this when we run this function and we
412:42 - click submit now it should create a
412:44 - database object or a database entry
412:48 - let's try this python 101
412:51 - book
412:59 - submit good why can't you
413:03 - reach uh configure the okay let restart
413:06 - this that's why restart this if this
413:09 - happens you just restart
413:12 - it perfect
413:14 - perfect all right so let's try this
413:17 - again
413:19 - 101 book just for manager object has no
413:23 - attribute do sorry cre obviously I can't
413:27 - spell create perfect so let's try this
413:33 - again uh 101 book submit great now
413:38 - you're probably like well hold on I
413:40 - didn't see anything how am I supposed to
413:41 - know that has been created well
413:45 - un
413:47 - okay here's what we'll do this is
413:50 - created object
413:54 - and we're going to
413:58 - print cred CR it created we're going to
414:02 - print this created object okay created
414:05 - object print and we're going to print
414:08 - another thing I'm going to print created
414:10 - object.
414:11 - ID because if we know it has an ID that
414:14 - means it's a database instance oh not
414:17 - I'm sorry a database
414:20 - entry so let's try this again add
414:25 - item
414:27 - 101
414:29 - book
414:32 - submit there we go to-do object two the
414:35 - ID of it is two that means it's created
414:38 - if we want to actually there's another
414:40 - way you can do this is we can also print
414:44 - so list of list of um let's see length
414:49 - of
414:51 - to-dos of
414:53 - to do I'm doing this because literally
414:55 - I'm trying to get you to understand how
414:58 - this orm works it's an object relation
415:00 - relation object object relation relation
415:03 - manager okay so it's just a good way to
415:07 - for you to understand how these things
415:08 - work so there's a to-do
415:11 - object.
415:15 - all. count that will get you the the
415:19 - count of all to-do items in the database
415:22 - and if we know hold on object if we know
415:24 - it's increasing or if we know it's
415:27 - greater than zero that means it's being
415:28 - inserted so do objects. all that count
415:32 - I'm we're going to print that boom
415:35 - length of
415:38 - to-dos
415:42 - voila it's doing a lot of its fancy
415:45 - stuff it's
415:47 - always there we go perfect so now go
415:50 - ahead
415:51 - and
415:53 - number two just to try it out so here's
415:57 - what we got this is to do object three
416:00 - right because we already had one we had
416:01 - two and this is third one and the length
416:03 - of the whole table I guess you can say
416:06 - is three that means this is working
416:09 - right all right so now that we have
416:11 - confirmed it's working let's erase this
416:14 - and the second part is actually going to
416:16 - be listing this now we need to list the
416:19 - actual to-do items to list the to-do
416:21 - items we have we have to do a couple of
416:23 - things first is we need to grab the
416:26 - items from the database and then second
416:28 - is we need to transfer those to do items
416:31 - to the HTML page and loop through them
416:34 - okay so let's see how we do that we have
416:36 - this function called home and this
416:38 - function home is what brings us the
416:41 - homepage right now through here is where
416:43 - we'll be able to actually take Tod do
416:46 - items and transfer them to the front end
416:49 - page so let's let's do that okay we're
416:52 - going to grab to-do
416:56 - items from the database and again we're
416:59 - going to use the same type of
417:01 - functionality as we did when we added a
417:03 - to-do item right or to listed to-do item
417:06 - right so here we have to-do objects. all
417:09 - right and that will grab us all of to-do
417:12 - items in the database the second thing
417:15 - we're going to do is we're going to
417:16 - order the to-do items by the added date
417:19 - so there's a function called order by
417:24 - and this takes in the parameter that you
417:27 - want to order by so the attribute that
417:30 - you want to order by like which add do
417:31 - you want to order by text you want to
417:32 - order by the date and so that's where we
417:35 - specify add a
417:38 - date okay right and within this we need
417:44 - to now transfer these items this this
417:47 - list to the index. HTML and so this
417:50 - render function right here I has a third
417:53 - parameter to transfer data okay so we
417:56 - will speak in specify an object here and
417:58 - we can tell okay so to-do
418:01 - items right and the object to transfer
418:04 - is to do items right so it's going to
418:08 - take items that's from here and it's
418:11 - going to be inside uh this object Okay
418:15 - so we've transferred that great now
418:17 - let's see how we can use it okay we have
418:20 - an index HTML and you can see that we
418:23 - have just a bunch of fake data now we
418:25 - need to replace this fake data with
418:27 - actual looping up the items so jingle
418:30 - has a template language that allows you
418:33 - to use a lot of jingle functionalities
418:37 - within a template in this case we're
418:40 - going to use a functionality called
418:42 - four so the way you do it is you have a
418:46 - bracket syntax and you do four Todo item
418:51 - item in
418:52 - to do items and again this name right
418:57 - here is the name that we specified in
418:59 - here so just keep that in mind if you to
419:01 - change this you would have to change
419:03 - this name okay after we're done for in
419:07 - order to close this for Loop we have to
419:09 - do and
419:11 - four and four okay and inside here we're
419:16 - going to lose that this is where we will
419:19 - display the list items so we have this
419:22 - list list item and obviously I'm need to
419:24 - replace this text here okay great
419:29 - replace this text now what do we replace
419:31 - it with we have to use this to-do item
419:34 - right this is it's going to Loop through
419:35 - each Todo item and so this to-do item is
419:38 - going to be an individual to-do item
419:40 - there's a syntax where in order to use
419:42 - the object you use a double bracket
419:45 - syntax and then you do to-do
419:49 - item to-do item do the attribute you
419:52 - want to use so in this case we want to
419:54 - use the text right because that's what
419:56 - we have in the miles lpy so we have text
419:59 - okay so we have that and let's see if
420:01 - that actually brings us something let's
420:04 - remove
420:06 - this okay remove
420:09 - this restart just to
420:13 - restart let's see what happens I hope it
420:16 - doesn't break I really hope it doesn't
420:19 - break I don't see why it would break
420:23 - all right so this is this is just a
420:26 - random text that we had inside uh inside
420:30 - the database okay with that in mind we
420:33 - are now looping through to-do items
420:36 - right so let's test it and see if we add
420:38 - a to-do item if that will actually
420:40 - display anything if we go ahead test two
420:47 - submit nothing's working now why is it
420:50 - not working let's look at look VI pii
420:53 - file you see here when we when we addit
420:55 - to-do item that that takes us this to
420:58 - this function and this function renders
421:02 - again in index HTML but doesn't pass in
421:05 - the to-do items so what do we do instead
421:08 - of rendering we can actually redirect
421:11 - the page to a to a homepage so some
421:16 - there's something called HTTP response
421:17 - redirect so if we go to
421:19 - Google response redirect
421:23 - correct method oh no I don't want
421:26 - Microsoft jingle hold on
421:31 - jingle there you go let's type in we
421:34 - don't need this just right
421:37 - there response
421:39 - redirect Clash be response redirect and
421:43 - the way you get you grab that from Jingo
421:46 - hdp right this is jingle HTP that's
421:49 - where you grab it form and then we can
421:51 - redirect it to a certain a certain URL
421:53 - which in this case will be the home URL
421:56 - so let's do that for so from let's
421:59 - import it first so
422:01 - from
422:02 - Jango
422:04 - HTTP import HTTP response redirect I
422:10 - hope that I spelled that correctly no I
422:12 - did not copy
422:15 - this spelling sometimes you guys I
422:18 - swear HTP response
422:20 - redirect so that shouldn't break I hope
422:24 - let's use this function HTTP response
422:27 - redirect we're going to use this
422:29 - function and we're going to redirect to
422:31 - the homepage and if you redirect the
422:33 - homepage it is now going to use this
422:38 - function after you add a to-do right
422:42 - let's try this again oh this is our test
422:43 - two by the way right so we submitted it
422:45 - okay let's try it again test three
422:49 - submit test three test four submit voila
422:54 - it is working you guys that is
422:57 - awesome now one thing I don't like how
423:00 - is as we are adding these test one test
423:03 - two test three test you see how they
423:04 - they're going going all the way to the
423:05 - bottom we want to reverse that right
423:09 - because obviously we want to have the
423:10 - newest item to display first so in order
423:15 - to do that we simply have to put a minus
423:17 - that's it that's literally it because
423:20 - this takes us from the new newest date
423:22 - to the oldest date if we did it like
423:24 - this without the minus it's going to
423:26 - take us from the oldest date to the
423:30 - newest State that's where this minus
423:32 - comes in now let's try this again let's
423:36 - refresh well we need to refresh the
423:38 - actual database or the
423:40 - actual server do that there we go you
423:43 - test four test three test test two and
423:46 - then ad
423:49 - DG perfect um
423:52 - and now you pretty much have the list of
423:55 - do items and we're getting really close
423:57 - to the end now the only thing left now
423:59 - the only thing left is to have a
424:02 - deleting functionality in this as well
424:04 - so let's get to this
424:07 - next all right so the final step we need
424:09 - to take is to be able to delete a
424:12 - certain item which as we saw before was
424:14 - to have a delete button here okay first
424:16 - things first we're going to do is to
424:18 - actually insert or add a delete button
424:20 - to the right side of every to-do item so
424:23 - let's go ahead to the index.html and
424:25 - we'll do that here okay we have the text
424:30 - here okay this is the to-do item within
424:33 - here however we're going to add a button
424:36 - we'll do a button that's basically much
424:37 - the same as here so we'll do we can copy
424:39 - this
424:40 - button just like
424:42 - that and we'll paste in this button
424:46 - right
424:47 - here right there
424:50 - perfect now that was not going to work
424:53 - the way you want it first things first
424:54 - is you see how there's like a bar a
424:56 - margin here at the bottom we'll remove
424:58 - the margin so mb-2 is just margin bottom
425:01 - so we're going to remove that that's
425:03 - one if we refresh it okay so that kind
425:06 - of removes some of the space there but
425:08 - now we need to do is we need to float
425:10 - this button to the right side so if we
425:12 - create a class or div a div around this
425:16 - okay close this div
425:20 - oops okay okay so that's the
425:23 - button and we're actually going to where
425:25 - the class is equal to there is a float
425:30 - right bootstrap class you can do this in
425:32 - CSS as well but if you type in float for
425:35 - example and you do float
425:38 - right okay
425:41 - float
425:43 - right right there now it floats right
425:46 - one other thing I want to do is I want
425:47 - to Center this text but we're going to
425:48 - worry about this a little bit later um
425:51 - and I also want to change the button to
425:53 - be button
425:54 - small there's a f there's a class in
425:57 - bootstrap which is button- small which
425:59 - just makes it a small button see there
426:01 - you
426:02 - go we've got a button now literally that
426:05 - that's pretty much it uh one other thing
426:07 - is one main thing actually is now we
426:10 - have to have this button do something
426:13 - right and obviously it's also going to
426:16 - be a delete that's the text for
426:19 - it all right and one other thing you
426:23 - want to do is instead of having it be a
426:25 - primary button so if we go back to
426:28 - buttons just really quickly you see this
426:31 - danger we're going to use like a danger
426:32 - one cuz you know we don't want people to
426:34 - delete an accident you want it to be
426:36 - kind of like a warning I guess you can
426:37 - say no a danger so we're going to make
426:40 - it a button Dash danger instead of a
426:42 - button Das
426:43 - primary
426:45 - danger right there perfect awesome
426:48 - awesome awesome awesome last thing okay
426:50 - we need to cre a form because we want
426:53 - this button to do something just like we
426:55 - have here where you have a form action
426:57 - we need to have the same thing for every
426:59 - single button that displays there so
427:02 - create a form okay just for now just a
427:06 - simple form just like that we're going
427:10 - to inside this form we need an action
427:13 - item all right so where is this what is
427:16 - this going to trigger or where is this
427:18 - going to lead or when the button is
427:21 - clicked where is it going to lead we're
427:23 - going to name a URL just called
427:26 - delete
427:27 - too and we need to pass something
427:30 - because when you delete a certain item
427:32 - obviously we don't want to delete all of
427:34 - the items right we want to delete a
427:36 - specific one and so as a result we need
427:39 - to pass the ID of every or of an
427:42 - individual item to know which one to
427:44 - delete on the back end right so if we
427:48 - just simply use and we specify okay
427:51 - delete to-do and the ID of the to-do is
427:54 - to-do
427:56 - item. ID right and remember that's the
427:59 - unique ID for every single item at a
428:02 - slash and now we know that that's what
428:04 - it's going to do action is obviously
428:06 - post just how we had it
428:08 - before
428:10 - perfect and refresh now obviously if you
428:13 - do this it's it's not going to get you
428:15 - anywhere because we actually need to
428:16 - create the URL and the view for it so
428:19 - let's do that so just refresh it for now
428:22 - perfect we have a delete to-do that
428:24 - looks good that looks good now let's go
428:26 - to the url's file we have this add Todo
428:29 - now we need to do the same thing for
428:31 - delete to-do all right so delete to-do
428:37 - but with this we need to capture one
428:40 - more thing and that thing is the integer
428:43 - or the primary ID of a specific item so
428:46 - what you in in Jingle what you specify
428:49 - you can literally specify a parameter a
428:52 - type parameter and name it so to do ID
428:57 - like this slash and so D Jango will will
429:01 - actually map this and know that okay so
429:04 - that it there should be a to-do ID here
429:06 - and I'm going to pass this now to a
429:10 - views.py
429:12 - file now we obviously we don't want to
429:14 - pass this to add Todo now we want to
429:16 - pass it to delete to-do which we haven't
429:18 - created yet but we're going to right now
429:20 - so let's try that
429:23 - uh so let's go to the view upy
429:25 - file and we can create the same
429:28 - function delete no delete too right
429:34 - again request but one other thing is the
429:37 - to-do ID because that's the second
429:39 - parameter it's going to be passed in
429:41 - through here in to-do ID so we're going
429:45 - to pass this in through here
429:48 - right one other thing I want to mention
429:50 - is just for the sake we're going to do
429:52 - csrf exempt as well for this one CU this
429:54 - is a form uh and just for the sake of
429:57 - the video we're going to include that in
430:00 - and we're going to print the to-do ID
430:02 - which ID are we removing and then we can
430:07 - go ahead and return the same HTP Sprints
430:09 - to redirect
430:11 - to the homepage okay let's try this
430:15 - now refresh
430:19 - this or should it not ref refresh uh
430:22 - restart this again if you get that error
430:24 - just restart it and you should be fine
430:28 - perfect let's try this again all right
430:31 - when we click
430:32 - delete uh nothing happens this error is
430:37 - because of the URLs the URL function
430:40 - right here is actually a deprecated one
430:41 - so this one came initially with with
430:44 - kind of the Jingo setup but it's
430:46 - actually deprecated if we look at the UR
430:49 - dispatcher you will see that jeno now
430:52 - the latest version uses path and so if
430:55 - we go ahead and import from jen. path
430:59 - right and you're going to run these
431:00 - these problems sometimes and that's okay
431:02 - that's a learning uh learning
431:03 - opportunity so with a path can actually
431:07 - just specify it like this path delete
431:10 - Todo we use a delete to-do and and now
431:13 - this should work so if we take take take
431:15 - it like this perfect you see that was
431:18 - completely okay and you can probably
431:21 - even do the same thing here so path like
431:25 - that there you go path like that um and
431:29 - you can leave this alone for now all
431:31 - right we've got that working if when we
431:32 - click delete this is the ID the ID is
431:36 - four and that's what so if we do it
431:39 - again right there you can see that it
431:42 - printed out for which is the ID of the
431:44 - to-do item now what do we do with that
431:47 - to-do item once we have that ID we need
431:50 - to delete it and again we're going back
431:52 - now to the Jingo omm object relational
431:55 - mapping the way you delete an item with
431:58 - in Jingo is you do to-do
432:01 - doob
432:03 - doget ID equals Todo
432:08 - id. delete and literally that's it let's
432:11 - test it let's see how this works guys
432:15 - let's restart it because obviously we
432:17 - had we got some error right
432:19 - here all right now let's go ahead
432:23 - delete delete
432:26 - delete and it's delete and you can see
432:29 - it is working guys so let's let's let's
432:31 - do a test run fully with this let's go
432:34 - ahead and like if we said read python
432:38 - 101
432:40 - book go for no
432:43 - 444 go for a run perfect let's make some
432:49 - lunch
432:51 - make some lunch
432:54 - perfect and that's what you guys got now
432:56 - you have a to-do item a to-do app with
433:01 - complete submit functionality with
433:03 - complete delete
433:04 - functionality and you have the proper
433:07 - the proper logic behind it and that is
433:10 - awesome you guys have done it if you
433:12 - guys follow along that is amazing I want
433:14 - to congrats to
433:16 - you all right that is it for the
433:18 - tutorial guys I really hope you enjoyed
433:20 - it and that you took away something from
433:22 - it that is the most important part if
433:24 - you have any questions whatsoever or any
433:27 - problems feel free to comment down below
433:30 - or you can message me on my Instagram at
433:33 - Naas dski and if you did complete the
433:35 - app I want to see it share with me
433:37 - seriously I'm not kidding other than
433:39 - that I hope you guys have an amaz
433:41 - amazing day and I'll see you
433:45 - [Music]
433:49 - later
433:58 - [Music]
434:01 - what's up guys I hope I'm live this is
434:03 - Cy from clever
434:05 - program.com this is Aaron from clever
434:08 - program.com this is Frankie from clever
434:10 - program.com Doc in this video we are
434:13 - going to be making a Craigslist app
434:16 - clone okay it's going to look like this
434:18 - I'm going to do this quickly so you guys
434:20 - can search seeing this this is what it's
434:22 - going to look like what we're going to
434:23 - build we're going to be doing it with
434:25 - python and Jango all right so we're
434:28 - going to be using jeno we're going to be
434:30 - using python we're going to be using
434:31 - beautiful soup and web scraping and the
434:33 - end result instead of something looking
434:36 - like this when you type in pingpong
434:39 - which looks like
434:41 - garbage um it's instead going to look
434:44 - like this
434:48 - okay another thing when when you type in
434:51 - something like a python
434:54 - tutor it looks like this which is not
434:57 - very pretty here when you type in a
434:59 - python
435:00 - tutor is going to be much much much
435:03 - prettier okay like this so which one do
435:07 - you prefer this one or this one I think
435:11 - we all prefer this one probably but
435:12 - people are going to say the other one
435:13 - just out of yeah Okay cool so
435:16 - that's what we're going to be
435:18 - building ooh did I do the shortcut I
435:21 - hope so that's what we're going to be
435:24 - building what is up everybody people are
435:26 - excited they're jumping on Epic code is
435:29 - on tech boilers is on made Mor gear
435:32 - Abdullah all right guys we're going to
435:34 - be building this live together I hope
435:37 - you guys enjoy it and then um yeah if if
435:41 - our mic or anything is off or whatever
435:43 - just uh let us
435:44 - know is the chat can are you able to go
435:47 - into the what did you do huh by the way
435:50 - guys any questions that you guys have
435:52 - just drop it in the in the chat we were
435:54 - more than happy to answer them yep we're
435:57 - looking for really cool questions as
435:58 - well so yeah make your make your
436:00 - questions great guys don't ask stuff
436:02 - like python versus Java I'm going to
436:04 - ignore it uh like brain dead questions
436:07 - don't ask them ask more beautiful
436:11 - questions and you'll get more beautiful
436:12 - answers right right right up
436:14 - here with with KY and and Aaron and
436:18 - Frankie and Frankie Frankie that's right
436:21 - so we got code okay so now we're going
436:23 - to switch the thing and we're going to
436:25 - go here all right I'm going to I'm going
436:26 - to go and do that fancy stuff
436:29 - now hit me yep and you got to double
436:32 - check if it's working oh yes oh God yeah
436:37 - there we go okay sweet oh the marker
436:39 - just came out that wasn't what I wanted
436:42 - to
436:43 - happen okay so basically I I I think you
436:46 - guys get the idea it's going to be you
436:49 - can open that up again so I can
436:51 - Craigslist app I'm just going to put it
436:54 - here so you guys can see it it's going
436:56 - to have a search functionality like
436:59 - this okay search functionality like that
437:02 - it's going to have a bar okay and then
437:06 - when you type something in is going to
437:08 - spit back out the end results right here
437:11 - like this okay that's what we're doing
437:15 - but there are multiple technologies that
437:17 - we're going to be using in this okay so
437:19 - there's going to be like multiple
437:20 - different things so for example we're
437:22 - going to have Frankie what are we going
437:24 - to have what's one thing we're going to
437:26 - have in here um images images cool but
437:29 - what technologies are we using what
437:31 - programming language are we using python
437:32 - python Aaron I want you to jump in this
437:35 - too what other what's what other
437:36 - technology Stacks are we using not C++
437:39 - cool what else Django so we got D Jango
437:43 - and not C++ yeah what else HTML yep
437:48 - what's the other one Frankie HTML and
437:51 - JavaScript okay A little little bit
437:54 - right I mean we're actually going to be
437:55 - coding no JavaScript actually we're
437:57 - staying away from JavaScript completely
437:59 - nothing wrong with JavaScript but we're
438:01 - just uh not using it we don't need it
438:04 - and then we have databases so we're
438:05 - going to be using like something with
438:07 - databases um this app oh this app is
438:10 - also going to be hosted online so which
438:13 - one of you knows what we're going to be
438:15 - using to host it online o do you know no
438:18 - I don't starts with an H Heroku oh holy
438:21 - crap Frankie knows his stuff besides
438:23 - just camera stuff hell yeah there we go
438:26 - I love you so we got Heroku as
438:29 - well and um that looks pretty good right
438:32 - or are we missing
438:34 - something bootstrap stuff not boot oh
438:38 - yeah so for front end we're actually
438:39 - going to be using materialize yeah which
438:42 - is like bootstrap but not yeah um it's a
438:47 - it's a c CSS by by Google and it's it's
438:52 - pretty nice actually it's very beautiful
438:54 - so we're going to using materialize and
438:55 - then we're going to be using obviously
438:57 - things like beautiful soup to do web
439:00 - scraping mhm beautiful
439:04 - soup I guess I should probably just
439:06 - write web scraping because everybody
439:08 - gets that
439:11 - yeah um yeah what else are
439:16 - libraries
439:18 - um I think that's it besides Craiglist
439:22 - Craigslist itself but that's just the
439:24 - website um
439:28 - yeah yep uh so that's pretty
439:31 - good cool so that's what we're going to
439:33 - be building
439:37 - yep
439:38 - beautiful we check here what is
439:43 - happening okay we got a bunch of people
439:45 - jumping on here that's great all right
439:48 - so let's go
439:51 - and now we're going to start coding this
439:53 - thing up guys now one really crappy
439:57 - thing that actually happened recently
440:00 - with Aaron and I was we were working on
440:03 - this application and we spent about 2
440:07 - days recording we have about 12 hours of
440:10 - footage with the camera and 12 hours of
440:13 - screencast and between two days we spent
440:15 - probably 15 hours building this
440:18 - application for you guys and what ended
440:20 - up happening was the hard drive that we
440:22 - had got messed up Y and so what did you
440:26 - end up doing I had to take the SSD it
440:29 - was an SSD actually to the shop uh went
440:32 - to several different ones um it turns
440:35 - out that ssds are a little bit harder to
440:37 - maintain and to fix so at the end of the
440:39 - day we we figured out that we probably
440:42 - have to spend about more than $1,000 to
440:45 - get the data back and it takes more than
440:47 - a week to do it as well on a $200 hard
440:49 - drive $200 hard drive so yeah so we
440:52 - thought just doing it again on live
440:53 - stream in 2 hours would be much better
440:55 - than doing all that so yeah so we're
440:56 - just going to do it on live stream Y and
441:00 - um yeah let's uh let's go so you guys
441:03 - can follow along okay so for anybody
441:05 - who's going to want to have replay value
441:08 - out of this is we're going to drop the
441:10 - code the GitHub repository or whatever
441:12 - like in the
441:14 - description so you guys can have access
441:16 - to it whenever you want and and that way
441:19 - you'll have the code and and and for now
441:22 - you guys can just try to follow along
441:24 - with us
441:26 - okay okay so we're going to build out a
441:30 - new
441:33 - project in py charm so I I use pie charm
441:36 - guys you guys can use really whatever
441:38 - you want yeah I'm tried as guilty I've
441:40 - never used py charm in my life but now
441:42 - that Ki show me how jacked it is like oh
441:45 - my God I'm going to be using that all
441:46 - the time never used pie charm but it
441:48 - looks a lot like vs code actually we
441:50 - know reminds me a lot
441:51 - of for people that don't know where vs
441:54 - code they don't even know what vs code
441:55 - is vs code no a lot of people know what
441:57 - vs code is everybody knows what Visual
441:59 - Studio is yeah minimalistic that's why I
442:01 - like Visual Studio is really great the
442:03 - debugger is next level yeah and um
442:06 - Visual Studio is very light and
442:08 - beautiful but it's um but it's not like
442:11 - a full-on IDE you know because uh
442:14 - they're just like editors yeah this look
442:16 - jacked yeah okay
442:19 - so let's um open up and start a new
442:23 - project so I'm going to go to my command
442:26 - line now let's just make sure that
442:29 - showing the right oh oops yeah those are
442:33 - the little mistakes I want to watch out
442:34 - for there we
442:35 - go
442:38 - yep okay so if I'm coding on this screen
442:41 - and there's no code MH let me know you
442:44 - got it
442:45 - okay how long is the delay all right
442:48 - I'll I'll yeah the delay is is is going
442:50 - to take a
442:52 - second um okay so we're going to I'm
442:54 - going to go to my GitHub and I'm going
442:56 - to create a repository we'll call it
442:59 - what should we call it code Daddy's list
443:01 - yeah yep did we introduce ourselves as
443:03 - the code Daddy yeah so this is the code
443:05 - daddies guys this a code daddy series
443:07 - that's what we call it we're going to
443:08 - kind of go either live or create
443:10 - applications together we are the code
443:12 - daddies this is Frankie this is Aaron
443:14 - this is Cy let's go okay so I just
443:18 - created the directory just in case in
443:20 - case you guys don't know how these
443:21 - commands are
443:22 - working um we'll open up the finder so
443:25 - you can
443:27 - see but basically I just created code
443:29 - Daddy's list right there like that okay
443:33 - you following Frankie yep cool cool so
443:36 - we got this I'm going to now another
443:39 - thing I'm going to do is I have cond so
443:40 - let's create a virtual environment oh
443:42 - I'll make this bigger so it's easier to
443:44 - see for
443:46 - everybody okay so now I'll make a
443:48 - virtual environment I'll do Honda
443:51 - create
443:53 - name and we're going to call this
443:55 - generally I like to call the virtual
443:57 - environment the same as the folder name
444:00 - so we're going to name it that and I'm
444:02 - just going to install Python 3 in it for
444:05 - now I'll hit
444:08 - yes I like to create virtual environment
444:11 - so everything is nice and packaged in
444:13 - one
444:18 - place okay going good just be aware this
444:20 - part is blocked yeah this part of the
444:22 - screen why at all times because of us oh
444:25 - the right the right side just be aware
444:27 - okay thank you so that they can see
444:29 - everything I'll kind of stay out of
444:30 - there yeah if it's ever getting blocked
444:32 - like let me know from there and also
444:34 - they they'll let us know in the chat
444:36 - yeah yeah let's see yeah
444:39 - yep okay so now I've activated the
444:42 - virtual environment as well
444:45 - cool
444:48 - okay now let's go and inside of that
444:52 - directory
444:55 - CD are you kidding me what are you doing
445:00 - CD code Daddy's list okay we're in there
445:05 - and um now we're going to start creating
445:08 - actually I I just lied to all of you
445:10 - guys I'm going to delete that
445:13 - list because this is a d Jango project
445:15 - so we actually need to run a d Jango
445:17 - command to create that folder so what I
445:19 - all I did right now now is I just remove
445:20 - that folder okay so we're going to use a
445:23 - Jango command now I have to see what's
445:25 - the Jango command that we use here Jango
445:28 - admin there we go it's like Jango admin
445:30 - start project I just did something
445:32 - called reverse search which is super
445:34 - super useful it's control R so do that
445:37 - like if you guys are watching this
445:39 - actually write that command down it's
445:40 - super useful for the command lines one
445:42 - of the most useful command lines to
445:46 - know control R okay control r
445:50 - all right Jango admin start project and
445:52 - we'll call it code Daddy's list like
445:57 - that oh let's install Jango pip install
446:03 - Jango yeah I was going to say can you
446:05 - just run Jango code on the CMD I was
446:07 - like what yeah you can just like run
446:09 - that so that's how you import it you
446:11 - import it what the hell's going on D
446:14 - Jango admin command not
446:18 - found Jango Jango installed on the
446:21 - virtual environment is it uh when you
446:23 - create the virtual environment it may or
446:25 - may not be installed I did install it
446:26 - just now if install Jango oh I missed
446:28 - that
446:30 - step yeah D Jango admin start
446:35 - project you're running uh
446:39 - GitHub
446:41 - GitHub Jango running into problems very
446:44 - early
446:47 - on it might be uh
446:50 - Jango admin might be one word or Jango
446:52 - hyphen admin or something is that what
446:54 - it is uh I'm not 100% sure okay how you
446:57 - start a Jango admin start project
447:06 - boom oh it is hyphen you're
447:10 - right misspell there's a equal sign now
447:14 - D Jango admin like that okay so now it
447:19 - got created
447:20 - we'll go to code daddiy
447:24 - list okay now there's some kind of uh D
447:28 - Jango D
447:30 - Jango
447:33 - admin is it start app or something like
447:39 - that some there is another
447:43 - one these are ones like you always kind
447:45 - of look up these are just to kind of
447:47 - kickart off the project and then once
447:49 - project is started you can actually just
447:51 - focus on the coding part of
447:54 - it a start it's something like start app
447:57 - I
447:59 - think start app is that what it
448:04 - is Jango admin start app app name so
448:08 - that's what it
448:15 - is okay stop the back
448:18 - search
448:20 - Jango admin start
448:23 - app and we'll just call it my
448:27 - app all right now we're going to open
448:29 - this up in py
448:33 - charm this will also help you guys learn
448:35 - Pyon pretty
448:38 - well so let's open up code Daddy's
448:44 - list we'll do a new
448:48 - window
448:52 - all right so this is what your guys's
448:54 - directory and everything should look uh
448:57 - look like as of now can you make that
448:58 - any bigger it looks kind of tiny the UI
449:01 - okay good point Thank you for actually
449:03 - pointing that out because on the live
449:05 - stream it will actually look tiny and
449:07 - blurry and blurry
449:10 - yeah so I'll go
449:15 - and get
449:18 - 20
449:26 - I think this will be a lot better right
449:28 - I just made it
449:33 - huge okay now few things for pie charm
449:36 - we're going to go into project I'll go
449:38 - in Project interpreter and I'll pick
449:41 - this code Daddy's list environment that
449:43 - I made so pie charm is pretty smart it
449:45 - kind of detected it already so it it
449:48 - already kind of has it selected to that
449:51 - and then I'm going to go in the build
449:52 - and EXE not build languages and
449:54 - Frameworks I'll go in Jango and it also
449:57 - knows it's a d Jango project it knows
449:59 - the root of the project it has Jango
450:02 - support enabled and this is the script
450:05 - cool it's looking good y nice and clear
450:08 - this is great actually that's
450:12 - awesome yeah I love it production
450:14 - quality up the
450:18 - roof
450:20 - okay let's
450:22 - um let's add another one move this
450:26 - here let's move this guy
450:30 - here
450:33 - okay so because we just buil this app
450:36 - recently we're going to be referring to
450:39 - a lot of code on our end we're going to
450:40 - be referring to a lot of code from the
450:42 - app that we built but we'll try to walk
450:44 - you guys through it step by step so it
450:46 - makes a lot of sense to you as you're
450:48 - watching it
450:50 - okay so let's um kind of build let's run
450:56 - the
450:58 - um let's just run the server and see if
451:03 - things are up and running as of now so
451:06 - go into python terminal and I'll be like
451:09 - python manage.py run server what is that
451:12 - command doing python manage.py uh just
451:15 - running the yeah manage.py is something
451:17 - in Django that that file it has a bunch
451:19 - of useful tools in there and then you
451:22 - just like call it and then it does a
451:23 - bunch of Jango stuff for you so right
451:25 - now we're doing run server so now that
451:26 - we created the Jango directory we can
451:28 - just run server and then it just starts
451:30 - running like it's like the the basic
451:31 - framework as you can see right there on
451:32 - the screen like it's just working like
451:34 - our website is already up and hosted and
451:36 - all that yeah not Lo local local local
451:39 - machine exactly I use that term too
451:42 - Loosely yeah so our it says install
451:45 - Works successfully so at this point
451:47 - that's the screen you should be seeing
451:48 - okay if you're not seeing this screen uh
451:50 - then something is off okay so make sure
451:52 - you're seeing that
451:56 - screen okay so we have uh this up and
452:00 - running now let's
452:07 - uh let's go and create pretty soon what
452:11 - we want to do is we want to create
452:12 - templates so then we can actually render
452:14 - like a basic template that's that when
452:16 - we go to the homepage that's the
452:18 - template that shows
452:20 - up so the way that those directories
452:23 - work is I believe you want to create
452:26 - your templates file if I look at the
452:28 - project it should be in the root folder
452:30 - you should have templates so that's what
452:32 - we're going to do I'm going to go to my
452:33 - root I will write click here I'll create
452:36 - new directory and I'll say
452:41 - templates okay so we have templates now
452:44 - inside of templates I'm going to have my
452:46 - app and inside of my app I'm going to
452:48 - have other stuff so in templates I'm
452:52 - going to do new first I'll create a
452:54 - base.
452:57 - HTML
453:00 - base and uh let's call it the code
453:05 - Daddy's list in the title and then we'll
453:08 - just say H2 we'll give it like testing
453:11 - to see if this works like that
453:15 - okay now this is not just going to
453:18 - render autom Auto atically we have to
453:21 - create a view map a URL and like really
453:24 - make sure that it's uh it's working but
453:27 - a few things we want to do in settings
453:29 - whenever whatever app you guys have here
453:31 - you want to register it in your settings
453:33 - so you got to go to your settings you
453:34 - got to register that app so installed
453:36 - apps we want to install
453:40 - our app that we
453:42 - created like that yeah the cool thing
453:45 - about Jango is if you have an app
453:46 - already in a directory fully made you
453:48 - can L just pop pop in and then add it to
453:49 - the installed apps and then it's pretty
453:51 - much that's it yeah 99% done you might
453:53 - have to tweak a couple things here and
453:54 - there there's like um I don't know I
453:57 - don't want to say 100% but I mean it's
453:58 - pretty much 100% yeah yeah like d Jango
454:01 - does a lot of stuff like automatically
454:04 - so that's what's cool about it okay
454:07 - there are a few things that like you
454:08 - should just literally copy and paste
454:10 - that you should have so that's exactly
454:11 - what we're going to do so we're going to
454:13 - go into settings from my previous
454:16 - project and uh you you want to have like
454:19 - this templates line and this Pro um you
454:22 - might not need the project root line but
454:24 - let's get this template line and we're
454:26 - going to paste it here
454:28 - because you want your D Jango to know
454:32 - where your template is
454:34 - stored okay this is how D Jango will
454:37 - know and all this is saying is like hey
454:39 - just join the base path with templates
454:42 - so now it's able to find where this
454:44 - templates uh is and then we got to add
454:47 - this template dur
454:49 - to I believe here so I got to do
454:53 - template dur like
454:55 - that okay so that's one thing you got to
454:58 - do template dur and then another thing
455:01 - that you want to do is you want to kind
455:02 - of add static as well because later
455:05 - we're going to need static so I like to
455:07 - just take care of this in the start
455:09 - because this is one of those things
455:10 - that's like super freaking annoying if
455:11 - you don't get it
455:13 - right so I got that static line I got my
455:17 - template dur Bas dur stat static is
455:19 - going to be my style sheets and things
455:20 - like that so when I'm creating graphics
455:22 - for my web app yeah static static files
455:25 - go in there things that don't really
455:26 - change much like as the code is running
455:28 - it's just like oh resources you can go
455:29 - grab that's what it means by Static yep
455:32 - we're going to create a home View and uh
455:36 - all this is going to do is going to
455:38 - return render and uh
455:42 - request and it will render the homepage
455:46 - so or or the base. HTML so I'm going to
455:48 - do temp is it templates or do I just
455:51 - do I think I can just do Bas at HTML so
455:54 - this is where you see this is where uh
455:58 - pie charm is really jacked right this is
456:00 - a string but as I'm writing it and
456:02 - because it can detect it through D
456:06 - Jango it's coming up and it's also
456:08 - telling me what the argument is right so
456:10 - I can also just I can also like name
456:13 - these arguments click on it and does it
456:14 - take you to the file yep whatever that
456:17 - that's what blew my mind about so right
456:19 - here oh my so I can actually go to that
456:21 - file I if I hold command I can click it
456:25 - it's a great yeah that's a great
456:26 - question that that I've wanted that en
456:28 - coding for like the longest time like
456:30 - even I just like wanted to know like
456:31 - where a variable was assigned or
456:33 - something instead of like searching but
456:34 - I want to see like where things are
456:35 - happening if I could just click on a
456:36 - variable be like oh this variable has
456:38 - set the four up here or something like
456:39 - that that's pretty much what that is so
456:41 - pie CH pie charm is uh pretty beastly
456:45 - yeah it's making me I say it I like it
456:50 - because everything is very organized
456:52 - like the the views and everything cuz I
456:54 - was about to tell you um do you just um
456:56 - actually put visual things there or or
456:58 - what's up cuz in Android it's a little
457:00 - bit you kind of have to do it more
457:01 - manually and everything here is is
457:03 - already separated for you yeah there's
457:04 - like one file for everything and every
457:06 - file does something different Jango
457:08 - organiz so Jango is kind of cool because
457:10 - you as as soon as you do that Jango
457:12 - start admin command or whatever it kind
457:14 - of structures the stuff for you out of
457:17 - from right from the right off the bat so
457:20 - you don't have to do a lot of work by
457:23 - yourself okay so we got our base HTML
457:26 - now we got to map some URL stuff to it
457:29 - and then we'll be good so I'll in under
457:33 - this thing called my app I will create
457:37 - a I will create a new python file it's
457:41 - going to be called uh
457:43 - URLs okay so you should have two URLs
457:47 - you should have one URLs under code
457:48 - Dad's list and you should have one
457:50 - urls.py under my app
457:54 - okay let me go to our
457:57 - URLs in the test
457:59 - app or sorry the my app version of
458:15 - this
458:17 - yep okay
458:20 - URLs cool
458:23 - so basically all this is saying is if
458:26 - somebody goes to the homepage just route
458:29 - The View uh route the view to the home
458:33 - view okay so if somebody goes to a path
458:35 - that's empty so for example this means
458:37 - like clever
458:39 - program.com you know that's it not
458:42 - clever program.com something this just
458:45 - means clever program.com so somebody's
458:47 - going to just clever programmer
458:49 - well then what I want you to
458:51 - do is go to this view that does this
458:55 - stuff okay so that's kind of all we're
458:58 - doing here so I'm going to copy
459:00 - this and then um we're going to paste it
459:03 - here we're going to say from import
459:06 - views so we can have our views and then
459:08 - I'm going to say from Django URLs import
459:15 - path
459:17 - okay
459:19 - all right and then we want to do URL
459:22 - patterns URL patterns is equal
459:28 - to
459:32 - there so this should be looking good and
459:35 - then what is in URLs here kind of like
459:38 - some similar
459:41 - stuff include my app.
459:45 - URLs okay admin site cool so this is is
459:48 - another important one we'll add that one
459:51 - right about
459:58 - now you following along Frankie um do
460:01 - you know any jangle at all just the
460:02 - second one no you know zero jangle right
460:05 - zero jangle you know the idea oh that
460:06 - one is there already like a website um
460:09 - like all the different parts of a
460:10 - website what were you what were you
460:12 - saying right now yeah I was saying I
460:14 - didn't understand the admin part of it
460:16 - like um you Rec calling what of the
460:18 - admin like admin admin um what's it
460:22 - called so yeah permissions or so I'll
460:25 - show you what the admin when you so I'll
460:27 - show you Jango comes with a built-in
460:29 - admin I see okay so oh okay so I'll show
460:32 - you what that means in just a second so
460:34 - we're going to do python manage.py
460:36 - create super
460:38 - user
460:40 - um oh wait hold on python manage.py make
460:46 - migrations python manage.py
460:49 - migrate cool so now that we've migrated
460:53 - now let's create so this is the initial
460:55 - migration right you see
460:57 - 00001 initial so now we should have this
461:00 - thing called migrations over here now we
461:03 - can create a super
461:04 - user I will call the username admin
461:09 - email
461:10 - address this and then admin
461:15 - again sure cool so now if I go run
461:20 - server and I go back here and I go boom
461:23 - and I go slash admin you'll see it takes
461:25 - us to an admin and if I log in takes us
461:29 - inside on the back end and if I go users
461:31 - there's one user that we just created
461:33 - called admin
461:35 - dope but we don't really have anything
461:38 - else what's up with this database like
461:40 - what's running this database or what
461:41 - like how is it how is it um saving and
461:44 - storing all of these all of this data
461:46 - this kind of comes built in with the
461:47 - python Jango builtin stuff this is what
461:50 - what I like about it now if I go to
461:52 - models right and I build like a basic uh
461:55 - thing so what is it class models. model
461:59 - okay so we'll we'll create like
462:00 - something called search and we'll do
462:02 - models.
462:05 - model and
462:11 - um okay and basically we'll copy these
462:15 - two
462:17 - lines
462:23 - oops okay so we got so basically all I
462:26 - did is I'm like hey create so I'm going
462:28 - to create a database uh called I'm going
462:30 - to create a model called search and then
462:33 - I want you to call one of the fields in
462:35 - there like search and I I can even call
462:37 - it like search field but let's just say
462:40 - search and I'm I'm saying make all
462:44 - search takes in so search Imagine is
462:46 - like that bar right there so all it does
462:49 - is it just takes in like some an input
462:52 - an input okay that's it um and then we
462:55 - should have like one that like
462:57 - timestamps when it was
462:59 - created okay so I'll go
463:02 - here we'll grab this one and
463:06 - um I'll paste it
463:09 - here
463:11 - okay so now whenever you add new stuff
463:14 - to the database what you want to do is
463:16 - you want to make sure that you
463:19 - um migrate it to the python database
463:21 - otherwise it doesn't get stored okay so
463:23 - what I'm going to do is I'm going to do
463:24 - python manage make migrations mhm and
463:28 - then I'm going to do so you see create
463:30 - new model created that creates the
463:32 - migration object thing you filed yep and
463:34 - then you actually make it now the
463:36 - migration is done right so we're going
463:38 - to go run run server like that I'll hit
463:43 - refresh oh okay so now we're going to go
463:46 - to you see add py right mhm from import
463:52 - models and then I'm going to say it's
463:55 - something like admin.
463:57 - [Music]
464:00 - register
464:03 - board models.
464:06 - search something like
464:11 - that hold on how is this
464:16 - written uh admin site admin. site.
464:21 - register and then uh from Models import
464:24 - search
464:28 - yeah okay so now when I go here and
464:33 - refresh models is not
464:38 - defined literally it's right
464:41 - here oh my
464:47 - bad
464:48 - so the server stopped running let's run
464:51 - it again so now you see it says my app
464:55 - is here cuz we I um integrated into the
464:58 - admin interface so we don't have to
465:00 - create an interface for it if we don't
465:01 - want to we can just use D Jango like
465:04 - built in but an interface for what for
465:07 - your app yeah so it's like showing us
465:10 - that database that we created of
465:11 - searches so now whatever you search
465:13 - it'll get stored in here oh okay okay
465:18 - yep so it's just kind of getting stored
465:20 - in there
465:25 - automatically and you see how it says
465:28 - searches like that which is kind wrong
465:30 - CU if it has multiple searches it'll say
465:33 - like that because all what it's trying
465:36 - to do is just trying to put an S in
465:37 - front of it oh okay so for certain
465:39 - things it won't work like for search it
465:42 - searches with the es s so then there's a
465:45 - little trick we can do which is called
465:47 - um we go here we click class meta and
465:50 - then in class meta you want to do what
465:53 - is it verbose name plural and then you
465:56 - just say searches like this go
465:59 - back it's going to be searches so models
466:03 - is kind of like a method they're methods
466:05 - or what like they're kind of like static
466:07 - methods that you can use from model
466:09 - databases it's a models are like what's
466:11 - in your database you can think of it
466:13 - like an Excel spreadsheet okay yeah so
466:16 - this searches that I just put here it's
466:18 - a column in Excel spreadsheet called
466:20 - searches oh okay I see it's this is
466:24 - actually populating the this is a really
466:26 - good thing that you just brought up so
466:29 - we can actually show it
466:33 - visually right so we can actually model
466:35 - our
466:37 - database um code Daddy's list database
466:46 - right searches and then what was the
466:49 - other field we put in there you remember
466:53 - um search and what else created
466:58 - yep so there are two things that go in
467:01 - there so this sheet is going to be
467:03 - called like SE so this is like the
467:05 - search
467:08 - database and it contains searches and it
467:10 - contains when it was created right so
467:13 - for example a search might be like Ping
467:16 - Pong and then it'll store and say like
467:18 - it was created on August 7th 2019 and a
467:23 - time and then the specific time right
467:25 - whatever time at down to the second down
467:27 - to the nanc like it goes crazy yeah so
467:32 - that's how you do searches and you got
467:34 - created and and every time somebody like
467:37 - makes a query it'll get stored in
467:41 - okay um few things when I add in
467:45 - something here blah blah and if I hit
467:48 - enter you see it says search add it
467:50 - successfully so I go here and searches
467:51 - it says search object one you click into
467:54 - it and it tells you what that object
467:55 - contains right oh
467:58 - wow it even has these breadcrumbs like
468:01 - searches and then when I click into this
468:02 - it goes deeper search object like right
468:04 - there so these called breadcrumbs so
468:06 - what we want to do is we don't like
468:08 - where it a search object we want to we
468:10 - want it to just show us what that is in
468:13 - English skip a directory or something
468:15 - yeah so I can I'm going to do this and
468:18 - I'm going to say
468:25 - return um
468:27 - what format self.
468:35 - search okay let's see if that does the
468:38 - trick there we
468:39 - go
468:45 - okay so I'm just saying whatever the
468:47 - search was created like return the
468:49 - search field of it and then it goes okay
468:51 - got you oh you're returning the string
468:54 - of the search yes instead of the actual
468:57 - where it was contained yep instead of
469:00 - like it's saying some weird thing like
469:02 - object how's the chat going bro like
469:04 - keep me up tell me what's going on is
469:06 - anybody asking questions like what's
469:08 - happening um what language is acquire to
469:10 - be a web developer uh Python and jango's
469:13 - enough yeah I just want to know General
469:15 - like yeah there not not too too much
469:18 - I've been answering the small
469:20 - ones okay cool yeah nothing's going on
469:22 - chat okay not really cool
469:26 - so this okay so this is what's creating
469:29 - that string
469:31 - now that is looking
469:34 - good um the next thing we want to do
469:39 - is let's add wait what should we do on
469:43 - the next thing oh yeah let's uh render
469:46 - the front end now let's the basic
469:48 - template that we made remember we made
469:49 - the base this thing so let's render
469:54 - this so now it should render testing to
469:57 - see if this works so we'll go to views
470:00 - it's saying it's going to render
470:03 - it and then our
470:05 - URLs are looking pretty
470:10 - good so let's give it a try
470:16 - now
470:19 - nope that's not
470:24 - working
470:25 - [Music]
470:41 - views um I want to do
470:46 - include
470:49 - and then how do
470:55 - you yeah so I want to I want to say
470:57 - something like
471:01 - this from my app
471:04 - import
471:08 - views and then I want to say if the path
471:12 - is
471:12 - this then I want you
471:15 - to include the URLs
471:19 - from my app.
471:24 - URLs like
471:29 - that I think that should work there you
471:34 - go so we're saying if the path is like
471:37 - empty just refer to the URL mapping that
471:40 - I did in my my app uh do/ urls.py so now
471:46 - anytime I go to this so here's how it
471:48 - works right when I go to this empty
471:53 - thing it goes to this View and it goes
471:58 - oh the path matched is empty so then run
472:01 - the home function from views so now
472:03 - let's go to home and home says render
472:05 - the base HTML and base HTML is this mhm
472:11 - okay so that's how would
472:15 - I if I had to draw draw it you want draw
472:19 - on
472:19 - whiteboard yeah I think so it's uh
472:22 - pretty simple really I mean you used to
472:26 - basically like the very basic idea of a
472:28 - web framework is just you specify your
472:30 - URLs right and then well specify your
472:32 - model your data first like what kind of
472:34 - data you want and how it's going to be
472:36 - and then you have your URLs and then the
472:37 - URLs just go to um some code and that
472:40 - code renders some front end stuff like
472:42 - HTML JavaScript CSS whatever you need
472:44 - yeah so URL to code to frend so
472:48 - basically like
472:52 - URL to code and then something happens
472:56 - and then front end Y and that code calls
472:58 - a front end code which you like display
473:00 - some HTML but like you can like oh you
473:01 - go to this URL run this code do this
473:04 - stuff call these libraries oh and then
473:06 - display all this stuff yep and then
473:07 - that's really it you're just like a
473:10 - website just consists of a bunch of URLs
473:12 - right so that's kind of makes sense
473:14 - start there so now this is random in
473:18 - that's pretty
473:23 - good okay what what other functionality
473:26 - should we add now let's compare to
473:31 - this should we add more of the front
473:34 - end um yeah let's start with that we
473:36 - started well you started with your to-do
473:39 - list app um okay so let's start with the
473:42 - front end right yeah yeah the to list
473:44 - app stuff there is no to-do list app
473:46 - there's no to-do list app
473:47 - there it's just Craigslist app there's
473:49 - no to-do list
473:51 - app okay
473:54 - yeah yeah so we're pretty much going to
473:57 - be doing it uh so now we're going to
474:00 - just build out the front end of this
474:03 - app so let's go ahead and do
474:07 - that okay so you're going to need uh
474:10 - static
474:12 - folder okay uh which contains your
474:15 - CSS and then you're you're going to need
474:18 - some front end stuff in your index and
474:21 - in your search all right so let's create
474:25 - our static folder now and we're going to
474:28 - have this stylesheet in
474:30 - there and your static if you notice it
474:33 - has to be created
474:35 - at your root directory okay so we're
474:40 - going to create static for ourselves in
474:43 - that root
474:45 - directory like that
474:47 - that and inside of the static we'll add
474:50 - another directory call CSS and then
474:53 - inside of here we'll have a stylesheet
474:57 - and it's going to be called
475:02 - style okay and I'm going to go ahead and
475:05 - steal my stylesheet because otherwise
475:08 - this tutorial will literally take 20
475:16 - days okay I'll explain some of this
475:19 - stuff
475:21 - uh but yeah other stuff is actually not
475:24 - that necessary for you to know there's
475:25 - actually you don't even have to do a lot
475:27 - you actually can pretty much leave your
475:30 - style sheet empty as of now okay like
475:34 - I'll actually say for now you could if
475:36 - you're following this tutorial you kind
475:38 - of leave your app stylesheet empty so as
475:41 - we're building it I'm just going to
475:42 - leave it empty as of
475:46 - now
475:49 - oh and then one thing I always kind of
475:50 - do this always like sync your project
475:52 - with GitHub so I'm just going to do it
475:54 - you can follow along you don't have to
475:56 - like do everything but you should do
475:59 - some of it okay so I'm going to create a
476:02 - GE ignore file first this is important
476:05 - get ignore I'll add an idea in here so
476:08 - it removes any jet brain stuff and then
476:10 - I'll write
476:12 - Python and then I will hit
476:15 - generate so now it won't won't add any
476:18 - like dumb stuff to my git I'll go create
476:20 - a GitHub
476:23 - repository repository
476:27 - new
476:28 - new and uh what should we call it code
476:31 - Daddy's list mhm like that cool I'll
476:35 - initialize this repository with the read
476:37 - me and we'll do
476:40 - create
476:42 - cool now I will go like that I'll say
476:48 - get
476:54 - remote first I got to do get in
476:58 - net
477:00 - huh what the hell I
477:06 - had that's weird I had
477:10 - xcode an update or
477:12 - something okay this is super annoying if
477:15 - you keep tapping enter really fast and
477:16 - then it asks for a yes or no and if you
477:19 - miss it then you got to start all over
477:37 - again this is
477:42 - fun if you get all the way to the end
477:44 - with the spaces then it kicks you out
477:46 - yeah because knows you were trying to
477:47 - skip it fast so you have to hit enter oh
477:52 - my
477:54 - goodness yeah so if you're watching this
477:56 - in replay just skip this part
477:59 - probably
478:02 -  There Goes My
478:05 - monetization there we go type print to
478:08 - print anything else by typing agree you
478:11 - are agreeing great
478:14 - agreed okay get in it there there we go
478:17 - see how easy that was uh if your git
478:20 - doesn't look that cool like mine does
478:22 - it's because you're on the poor version
478:25 - um you have to get zsh zsh is free so
478:29 - you can get zsh but if you're on Windows
478:31 - you're going to not be able to get it
478:33 - which most of you are so um Windows
478:36 - command line sucks it's pure garbage uh
478:39 - throw your Windows laptop out get a
478:42 - Mac uh you're I think they now updated
478:45 - it you're going to have so much no it
478:46 - still sucks really it's garbage pure
478:48 - garbage unless you're a professional
478:50 - developer even then it's going to give
478:52 - you a lot of pain so just throw your
478:54 - Windows computer out make your life
478:55 - easier or learn how to use vagrant and
478:58 - then you'll be in a much better position
479:00 - okay learn vagrant um it'll help you but
479:04 - uh in between answer use baboon like get
479:07 - a good command line for Windows and then
479:10 - you have a chance okay otherwise every
479:12 - tutorial you're going to try to follow
479:14 - you're going to have so much trouble
479:15 - you're not going to be able to follow so
479:17 - that's why I say that all right let's
479:21 - continue so we did get a knit and now we
479:24 - want to make sure
479:27 - that let's see what's happening
479:29 - here okay so idea should actually be
479:42 - ignored like this should be being
479:44 - ignored so now I'm going to try again
479:47 - yeah now the idea isn't showing up now
479:49 - only the good stuff is showing up
479:53 - great so I'm going to do get add. get
479:58 - commit
479:59 - initial
480:04 - commit and then we will do git
480:08 - pull or git remote add origin and I will
480:13 - paste the
480:14 - URL here's the URL
480:22 - okay so now if I do get remote- get
480:25 - remote- V you will see
480:29 - that the
480:32 - remote the repository is linked the one
480:35 - that we just created remember so now
480:37 - it's linked right now it's empty right
480:39 - once I push the code all of my code
480:41 - should be here that's in the code
480:43 - Daddy's list right now D this is so
480:46 - annoying stop showing me this stupid
480:52 - error okay get add nothing is being
480:56 - blocked right oh
480:58 - dude AR command is being kind of
481:01 - blocked yeah I guess they are on the
481:03 - bottom on the bottom right a bit can we
481:05 - move this on OBS like a little bit up or
481:07 - or make it smaller maybe yeah do we know
481:09 - how to do that
481:13 - yeah oh we should have done that from
481:15 - the beginning then
481:17 - there make sure it still looks good
481:19 - whenever okay get so that's looking good
481:24 - now what we want to do is uh get
481:28 - push get pull origin
481:31 - Master still probably getting blocked
481:34 - there refusing to merge unrelated
481:40 - histories okay how about get
481:45 - push
481:53 - it's giving me a problem with uh
481:56 - basically this readme.md which is almost
482:00 - empty so I can literally go and delete
482:04 - this I don't I don't need this right
482:08 - now
482:11 - okay get push origin
482:14 - Master get push I'll for force the issue
482:18 - get push Force origin
482:21 - master and now when I
482:23 - refresh all of my code should be here
482:26 - just like that now I'll create a read me
482:29 - as
482:32 - well and all it'll say is this is
482:37 - a let's do that because it's a markdown
482:39 - file this is
482:41 - a
482:43 - Craigslist
482:45 - clone
482:49 - called code Daddy's
482:52 - list
482:56 - okay now we'll add it say add read me
483:00 - get push origin
483:03 - master so now when I refresh this you
483:06 - will see the readme file get rendered
483:08 - here
483:09 - soon there it is says this is a
483:12 - Craigslist clone call code that is
483:15 - list
483:18 - okay I don't know why I didn't register
483:19 - it as markdown but whatever I don't
483:22 - care all
483:27 - right so let's go back to what we were
483:34 - building what part should we add now
483:36 - Frankie you tell
483:37 - me so we said just uh frun and things
483:40 - right
483:42 - um all right uh maybe the the B the top
483:47 - or maybe we can start getting images so
483:49 - start with the banner yeah okay so we'll
483:52 - start with the
483:55 - banner did you shift something over dude
483:57 - there's like a black bar at the bottom
483:59 - block that's blocking all the commands I
484:01 - don't know if that was there before
484:04 - huh there's like a black bar at the
484:06 - bottom so like it doesn't matter what
484:07 - happens to the webcam but it's blocking
484:09 - all the commands that you're typing in
484:11 - cuz it's always poping from the bottom
484:12 - line yeah even if you go full screen I
484:14 - don't know if it's a
484:17 - I don't know what Aaron is talking about
484:19 - dude this is YouTube yeah this is how
484:22 - this is how it looks on YouTube always
484:24 - there's a little black bar at the bottom
484:25 - there dude there's no black bar there
484:28 - got you know what I'm talking I never Ed
484:29 - full screen yeah it was a scale of the
484:32 - thing okay all right
484:35 - good um cool so let's add this nav bar
484:39 - yet yeah
484:43 - okay okay where do we go so what's
484:46 - better in your opinion like um cuz we do
484:49 - add Min and Max values all of these
484:51 - things right we add them to the search
484:53 - is it EAS like what what do you like
484:55 - preferably yourself um to do all of
484:58 - these things all these um methods and
485:00 - call backs that get the m and max value
485:02 - or actually start doing the the visual
485:05 - stuff first CU you know sometimes you
485:06 - start doing all the functionalities and
485:08 - then you get wrapped up in that and then
485:10 - you get a little bit confused when
485:11 - adding the visual parts of it right like
485:13 - what do you do I personally something
485:15 - still getting cut off cut off y look
485:17 - it's cutting off right there on the
485:19 - screen so it's blocking all the commands
485:21 - I don't know what's going
485:22 - on but all the yeah see it's cutting off
485:27 - like right on that word it's getting cut
485:29 - off like right up here right I know why
485:31 - because we have it zoomed in on OBS oh
485:35 - yeah let's zoom out then so so what I
485:36 - can do is just move the screen oh cuz
485:40 - they don't need the top they don't need
485:41 - the top menu bar do they oh yeah a lot
485:44 - of the bottom is getting cut out a lot
485:47 - but the black bar is still there now it
485:49 - should be better should
485:51 - be no now it's going to be completely
485:53 - better
485:55 - yeah you'll see yeah it'll come up in
485:58 - like a few seconds
486:00 - yep
486:02 - okay so yeah that's a good question my
486:05 - answer to that to be honest and you
486:07 - might have to come here a little bit cuz
486:09 - now we're right you're not you're you're
486:12 - gonna cut off so my answer to that is
486:18 - I generally like to do the backend stuff
486:20 - first I hate the front end because like
486:23 - okay think about this right on front end
486:26 - you're putting like a pretty button and
486:28 - then you're trying to change colors for
486:29 - like eight hours yeah true right like
486:32 - that's you're not making that much
486:33 - actual progress whereas on the back end
486:36 - you're like actually making all the
486:38 - progress like that's where all the
486:39 - function out so I like to just do the
486:41 - back end and then front end like you can
486:43 - do it anytime that's like the easy part
486:46 - and then start um that's not real
486:48 - development or whatever for end
486:50 - developers is it going to get triggered
486:52 - yeah I don't care there
486:55 - should
486:57 - um that's easy
487:00 - work okay so I just hire out front
487:05 - developer from
487:07 - upor sounds fun okay so we got so let's
487:12 - build out the but I want to build like
487:14 - the front end so people can see it yeah
487:16 - you everybody's watching it cuz that's
487:18 - they'll find it cool so let's build out
487:20 - like basic front end functionality
487:25 - here all
487:27 - right so in our base. HTML what we want
487:31 - to add is uh the materialized
487:34 - theme okay so I'm going to I'm going to
487:38 - add that in okay so I'm going to
487:40 - basically copy a lot of this code like
487:42 - you need static files you need load
487:44 - static so that that stuff just does some
487:47 - basic stuff I'll go
487:51 - here that stuff just does some basic
487:54 - stuff got it
487:55 - yep we're going to call it
487:58 - uh code Daddy's
488:02 - list okay so a lot of these commands
488:07 - kind of just like come these are boiler
488:10 - plates I am here I'm linking to my
488:14 - stylesheet which is here
488:17 - here I'm adding materialize
488:20 - um CSS so materialize is pretty cool
488:29 - materialize okay materialize CSS so when
488:33 - you do get started it'll tell you the
488:35 - CDN code that you need to write okay the
488:39 - CDN code is this code right
488:42 - here okay you know materialize does very
488:46 - um KY said it was uh like the CSS of
488:49 - this is what gives the style I see it's
488:52 - like there's some like pre-coded boiler
488:55 - plate Styles you can use and then you
488:56 - see how it looks like this ugly as
488:58 - yeah yeah once you have it style the
489:01 - materialize it won't look like this
489:02 - anymore you you can add cooler stuff and
489:05 - you don't have to build things from
489:06 - scratch you know I hate building things
489:08 - from scratch like library of CSS type of
489:10 - thing right it's just like somebody
489:11 - spent a lot of time writing CSS and like
489:13 - stored it as a library and then made
489:15 - function and stuff like easier for you
489:17 - to call wow yeah that's one of the big
489:21 - problems um beginners have that they try
489:23 - to code everything from Scrat they don't
489:24 - use
489:25 - libraries oh not just beginners dude a
489:28 - lot of developers do this like yeah
489:30 - like CSS like how long does it take to
489:32 - remember all the little syntax and if
489:33 - you're out by one little space and this
489:35 - and that and then you have to remember
489:36 - like the arbitrary name of the of the
489:38 - field and then it's like oh was it
489:40 - character size or Google your life away
489:42 - that way character hyphen size or was it
489:44 - character dot size their character space
489:46 - that like what or like you waste all
489:49 - this time for nothing and then it's just
489:52 - useless uh Ginger Beer by the way guys
489:55 - yeah plus there's like five five ways of
489:57 - doing the same thing so it's like it's
489:59 - crazy on CSS it's the stupidest thing I
490:02 - think this is why most developers are
490:04 - not actually good even when they're good
490:06 - cuz they're doing stuff like I was I'm I
490:09 - built better apps some of my like
490:11 - mentors who I was paying and they had 35
490:14 - years of experience in coding and they
490:16 - were fast as they were amazing but
490:19 - the reason why I built better at things
490:21 - is I just used libraries like I just use
490:24 - better resources whereas they kind of
490:26 - got off on the fact that they could
490:28 - build it from scratch and like write the
490:29 - algorithm for the CSS and I'm like it
490:31 - feel smart yeah or just use flex box you
490:34 - know you could get a PhD degree in math
490:35 - and like figuring out how the flex like
490:38 - you know remember we were talking about
490:39 - how the sizing works of the images or
490:42 - you just use flex box yeah and use these
490:44 - libraries because then actually allows
490:46 - you to be like I never use my like don't
490:49 - use your brain when you're coding like
490:51 - unless you absolutely have to like copy
490:55 - paste stack Overflow it like literally
490:59 - stack Overflow H
491:02 - um obviously you know there's a joke it
491:06 - says there like beginners copy paste or
491:09 - something like that and then they're
491:10 - like pros know what to copy paste and
491:13 - where to paste it you know what to copy
491:15 - and where to paste it I see so you still
491:18 - have to be smart in like where you're
491:20 - copy pasting it and how it's working but
491:23 - I don't use my brain power until it's a
491:26 - new problem I'm solving I don't like to
491:29 - use my brain power for just random stuff
491:31 - so like all of this stuff like front
491:33 - like this what we're going to be
491:34 - building right now most of it it's like
491:36 - okay I have a design in mind that kind
491:38 - of looks pretty and I just want to move
491:40 - on follow it and then move on and then
491:43 - where I really want to think and problem
491:45 - solve is where there unique things like
491:47 - the web scraping part you actually
491:49 - problem solve M outside of that you
491:51 - don't need to keep problem solve
491:53 - everything from
491:54 - scratch so there we have it these are
491:57 - our stylesheets that we're going to be
491:58 - needing for this
492:02 - um let's just run server for now and see
492:05 - what's happening oh real quick one guy
492:08 - is Styles Sheet's working one guy's
492:10 - asking how long does it take to land
492:12 - your first client as a web developer if
492:13 - you just start today um class did you do
492:16 - it I did it I I got my first client in
492:18 - three months three months yeah three
492:20 - month but you were busting your ass off
492:22 - yeah so for normal people you have to do
492:25 - like 10 hours of coding every day for 6
492:28 - months and maybe you'll get a
492:30 - client I just did 15 to 18 hours a day
492:33 - for every day day for a really long time
492:38 - yeah so that helped me improve a lot
492:41 - faster you know
492:44 - like oh okay guys let's move on to the
492:49 - next portion what's the portion we
492:50 - should move on to now all
492:52 - right add in the bar right okay cool
492:56 - let's add in that nav bar so luckily the
492:59 - Navar code kind of comes with this uh
493:03 - app I'm just going to copy paste it from
493:05 - here this is the Navar
493:07 - code it's just a nav tag so there's a
493:11 - container
493:12 - class and then a nav wrapper class okay
493:15 - so they're these are two classes we're
493:18 - using and then uh what this is saying is
493:21 - that write code Daddy's list the URL the
493:25 - link is just home the link is root you
493:28 - know okay
493:29 - perfect um on mobile move it right and
493:33 - then just write home on the right hand
493:35 - side and then the link should just take
493:38 - you to the Home Route cool isn't that a
493:41 - little bit of JavaScript the or is that
493:43 - just um HTML that's HTML the a hre all
493:48 - HTML I see so there it is when I click
493:51 - it takes me to the homepage to click it
493:54 - the reason why I added container here
493:56 - guys is
493:58 - because
494:01 - whoops if I remove this right I have it
494:05 - like this when it's not in a container
494:07 - you you see how it's just wide container
494:09 - just contains everything you want to put
494:11 - everything in a container because you
494:13 - want to be able to manage it later so
494:15 - it's more interactive that way like it
494:16 - makes it interactive uh well it's still
494:18 - interactive it's not that it's not
494:20 - interactive you click size of the window
494:22 - or no it's just all a container does is
494:25 - like this is the container and now
494:28 - everything that goes will go within here
494:30 - like so you can be like oh why want this
494:31 - container to a little bit wider I want
494:33 - this container yeah you could make the
494:34 - container wider you can like if
494:36 - everything's in a container you you have
494:37 - control over that container you don't
494:39 - have control over like this every single
494:41 - screen what not
494:44 - yep
494:47 - are we going to upload the source code
494:48 - of this app on GitHub it's already up
494:50 - there right we going to make it public
494:52 - um well it or okay so guys here's the
494:56 - ACT here's the if you can't wait for the
494:59 - source code here's the one that's
495:01 - already up there so if you go to
495:04 - Craigslist
495:06 - scraper it's here but this one you're
495:10 - going to have trouble making it work but
495:12 - yeah go ahead and use this one if you
495:13 - want if you can't wait um this is the
495:16 - link just look at the link in the URL up
495:18 - there that should be
495:20 - fine okay he's probably listening he you
495:23 - heard it but just uh wait for us to make
495:26 - this one that we're working on right now
495:28 - cuz that's going to be the clean one
495:30 - wait somebody already
495:33 - started oh steuart Stuart is Stuart
495:37 - is on
495:38 - it hello man
495:42 - Uganda Okay cool so we got
495:46 - this now what we want to do is we want
495:47 - to add uh you want to add search bars
495:49 - and stuff like that mhm okay so we're
495:51 - going to add search bars and stuff like
495:53 - that
495:55 - okay so you got a container um
496:02 - okay we got this container right here
496:05 - this container should really be just all
496:07 - the so like this code should actually be
496:10 - better the container should just be at
496:12 - the top right there and then everything
496:14 - else should should just be underneath it
496:16 - and then this should just not have the
496:17 - container like
496:20 - this so basically the change we're going
496:23 - to make to our app right now is we're
496:25 - just going to remove this container and
496:28 - we're going to add
496:31 - one container right
496:38 - here
496:40 - okay
496:42 - whoops like that okay uh let's just
496:46 - double check this is
496:50 - working
496:52 - oh that does not look like it's
496:58 - working bad idea let's add this
497:01 - container here
497:07 - anyway and we're probably going to have
497:09 - to remove this container at the top yep
497:12 - boom let's remove that for now
497:17 - boom there we go back to back to where
497:21 - we were
497:26 - guys okay so there we
497:30 - go
497:31 - [Music]
497:37 - [Music]
497:41 - now okay so I'm going to copy paste this
497:44 - part and then I'll explain it as I go
497:47 - okay what we're trying to do here is I
497:50 - get um I'll put one just so you can get
497:53 - the
498:05 - idea okay so I wanted to write what do
498:08 - you want to search for on code Daddy's
498:11 - list we don't need that line that says
498:14 - uh
498:16 - testing to see if this
498:22 - works we're going to
498:24 - need we have body right there we have
498:26 - body ending here why is this
498:29 - complaining stop
498:32 - complaining what does it say element div
498:35 - is not closed
498:37 - okay there we
498:44 - go
498:46 - cool refresh okay that's gone so all
498:49 - we've done is we've added this and then
498:50 - we've added this okay now for this what
498:53 - we're using is something called flexbox
498:56 - flexbox allows you to add images where
498:59 - they don't get like here we'll go to
499:02 - code pen io on our Flex
499:06 - box uh just so you guys can see the demo
499:09 - of how flexbox works you see how it says
499:10 - 1 2 3 4 5 6 but here's what's cool about
499:13 - flexbox watch when I close it up it's
499:15 - like automatically changing its size
499:17 - automatically and when I close it more
499:19 - automatically automatically it's
499:20 - figuring it out on a mobile device nice
499:24 - and it's keeping each thing equally
499:26 - separated automatically so instead of
499:28 - having to do some complex math Flex box
499:31 - just makes it super easy yeah like
499:33 - literally coding this yourself would
499:35 - probably take days and weeks to get it
499:36 - all correct right so just use
499:42 - it Cy daddy one dad 2
499:50 - D3 okay so there you have it right and
499:53 - now when we're doing this it's
499:55 - automatically changing everything is
499:57 - working now what's what would happen
499:59 - normally here is like these will be
500:00 - images or whatever so if you're having
500:02 - images you want them to be in a flex box
500:06 - contained not super messy all over the
500:09 - place because if we don't have any
500:11 - styling and we start adding images and
500:15 - so Flex is a container flexbot is a
500:18 - container yeah it's kind of like a
500:20 - container yeah it contains and then it
500:22 - makes it just it understands how bullet
500:25 - points work and images work and things
500:27 - like that yeah so let's get out of there
500:31 - so that's why we're using Flex box okay
500:33 - so what I've done here
500:36 - is this part right here right where it
500:38 - says div class row so for a flex box
500:41 - what you need is you always need one
500:45 - everything that's like in a row here
500:47 - this is one row then you can have
500:49 - another row so then every the second row
500:51 - will be like below this one okay who
500:56 - does it need much Cod yeah so we have
500:58 - one row and then in that row you want to
501:01 - put like how what's the what's the size
501:04 - of the thing that you want so you could
501:06 - have
501:07 - like S4 or you could do S12 and that'll
501:11 - change the size so if I go here it'll
501:13 - change the size of of it or if I go four
501:16 - it'll know what to do okay so like if
501:20 - you keep changing the size of it you
501:21 - could have like 10 images in a in in one
501:24 - row or if you change the size of it you
501:27 - could have only two images in a row
501:29 - because each image is going to be huge
501:30 - oh I see to that to the number that
501:33 - you're right so you want to make the
501:35 - column uh dep based on that right so I
501:38 - chose
501:39 - S4 what's happening over here is the
501:42 - following this is what I
501:43 - did
501:47 - so I wanted to get this I want to get
501:50 - this icon MH okay well how do I actually
501:54 - get this icon so when I go
501:58 - on are they going
502:01 - to probably get the URL of it or
502:04 - something components
502:07 - icons okay icons cool so it's like yeah
502:11 - I'm like how do I get these icons right
502:13 - if oh wow if I go to
502:16 - lightning or it's called flashcore on
502:19 - wow these guys had their own pictograms
502:21 - dude wow
502:22 - yep and uh when I do inspect here it
502:26 - kind of shows like what they did to
502:27 - bring it so they did um material icons
502:31 - medium icon demo same pams are so
502:34 - important in design like hugely I
502:36 - remember in my design class we had to
502:38 - just Google search so many pictograms
502:39 - like oh this for that this for that it's
502:41 - crazy that this already has it they just
502:43 - have the pictogram SL like icons like
502:45 - built in and you can just use them so
502:48 - for example I can just pop this icon
502:51 - in go to the code and hit refresh and
502:54 - like it's there right so that's the
502:59 - that's a really cool thing about it
503:01 - which which is awesome you can just use
503:03 - but these are materialized icons so I
503:06 - don't even have to do anything extra I
503:07 - don't have to go to like um there's
503:10 - there's this website for icons for front
503:12 - end you don't have to go there you just
503:14 - get them from here and then what I did
503:16 - is I gave that icon a color so I gave it
503:18 - the specific color that's why it looks
503:21 - like this instead of black instead of
503:23 - black right and then it's called flash
503:27 - on okay and then I wrote some copy FSL
503:30 - web scraper Craigslist web scraper and
503:34 - then I wrote some more copyright
503:35 - underneath it that says scrape away
503:37 - right here with a beautiful
503:40 - guey cool all right so now I'm going to
503:46 - go
503:48 - ahead and I'm going to
503:53 - copy one more guy from my app that I
503:57 - created
504:03 - earlier
504:05 - okay filter your searches we built in
504:08 - functionality filter based on pricing
504:10 - and then I'm going to copy one more
504:13 - guy
504:21 - oh you might want
504:22 - to oh that's not that bad actually you
504:24 - kind of see everything it's getting cut
504:25 - off a tiny bit but you can still see all
504:27 - the code okay that's that's fine yeah
504:29 - just please make sure that it's it's
504:31 - good if you zoom out a little bit it'd
504:32 - be better but they can still see
504:33 - everything just make sure it's good if
504:35 - it's not good then let me know all right
504:37 - then zoom out cuz like it's half of the
504:39 - top Line's getting chopped off but I'm
504:40 - not coding there right so it's yeah so
504:43 - you can see the Daddy's list directory
504:45 - and that's where it cuts off so yeah but
504:47 - I'm not touching most stuff up there so
504:49 - it's okay I'm I'm fine cuz otherwise I
504:51 - would have I can't zoom out anymore of
504:53 - the screen so something has to give like
504:55 - the bottom has to give or the top has to
504:57 - give and I realize bottom is more
505:00 - important most of the
505:02 - times okay so we
505:05 - got so I added all of those in now let's
505:09 - refresh we got all the icons and
505:12 - everything cool so now what we need is
505:14 - the search
505:22 - bar
505:23 - okay um another thing you want to do
505:27 - guys is the following we also need this
505:30 - uh script by the
505:35 - way and right before body tag
505:40 - right cool materialized script yep and
505:44 - then we want to put everything in a
505:45 - container starting from here so I'm
505:47 - going to go here and I'll say div say
505:51 - class equals
505:55 - container
505:56 - [Music]
506:00 - boom paste boom there we go
506:05 - okay all
506:10 - right and um now what I want to do is I
506:13 - want to turn B base HTML into something
506:16 - we can keep using in all our other
506:18 - templates so we want to create like a
506:22 - base. HTML and then we want to be able
506:24 - to just use it
506:26 - everywhere so we're going to create this
506:28 - thing called block content and end block
506:32 - content so we don't have to uh it's
506:34 - according to like the dry principle do
506:37 - not repeat
506:43 - yourself
506:47 - there okay so I'm going to go in
506:51 - templates we will create another
506:53 - directory should be called my app I
506:55 - guess and then inside this directory
506:58 - we'll create a HTML file and it'll be
507:00 - called new
507:02 - search. HTML so every time you search
507:05 - something it's going to open up the base
507:08 - HTML um base HTML is going to be the
507:10 - home homeage and then you're going to
507:12 - and then if you create a new search that
507:14 - then the new search page is going to
507:15 - open it up there yeah open up somewhere
507:17 - else yep but because ba even the new
507:20 - search page should inherit a lot from
507:22 - base HTML we're going to we're going to
507:23 - do something in a little bit
507:25 - okay so we have the new search.
507:31 - HTML now we want to be able to create a
507:33 - view for it so then we can actually go
507:35 - to it at some point so you see how the
507:37 - container brought everything in in that
507:41 - was why we did
507:42 - it okay
507:44 - so let's go to
507:48 - views Define what did we call it in this
507:52 - app new
507:56 - search search so
507:59 - request and then we'll say
508:01 - [Music]
508:03 - return okay and uh we'll
508:09 - say my app Slash new search
508:16 - okay now we just need to create a URL
508:17 - for
508:19 - it going to go here and I'll say if
508:22 - anybody goes to new search
508:26 - s like
508:29 - this this yes yeah you're getting it
508:32 - right awesome I love it we're going to
508:34 - say go to the new search function that
508:36 - we created and we're going to give it a
508:39 - name of new
508:40 - search
508:43 - okay
508:46 - so now if I go to Slash new
508:53 - search is it being rendered Bic blank
508:56 - yep a blank page right blank bulk okay
509:00 - let's refresh it's all here so what we
509:02 - want to do instead is we want to inherit
509:05 - from uh ex we want to extend
509:08 - base.
509:11 - HTML new search and then outside of that
509:15 - we want to
509:16 - say
509:18 - new search okay so now you're going to
509:22 - see something cool
509:26 - happen where the hell is where the hell
509:29 - does it say new search oh yep we're
509:31 - going to create um we're going to
509:34 - do start or wait what is it start block
509:38 - content or
509:40 - block content like that and then we're
509:42 - going to say end block and we're going
509:43 - to put it in there that's the templating
509:46 - stuff right and now boom okay so you
509:50 - know how in the
509:51 - base we said block and a block mhm so
509:55 - what's happening is it's inheriting
509:57 - everything from the base and anything
509:59 - that goes in between here it's added on
510:02 - search right so for example if I show
510:04 - you the code it's pretty much going to
510:06 - be the same code except for whatever is
510:08 - in sandwich in between block content and
510:10 - block content that that's where the new
510:12 - everything in the new search is going to
510:13 - appear to keep the base HTML template
510:16 - going yep so okay now if I do view page
510:22 - Source probably have to come more this
510:24 - way if I go into page Source you see how
510:28 - the code is the same as base HTML yeah
510:31 - even the script part is
510:33 - here the only thing that's new is this
510:36 - oh that's because of this
510:41 - sandwich right here okay
510:49 - okay
510:52 - so that is looking
511:02 - great our new search template is working
511:05 - but now what we want to do is we want to
511:06 - create like a form so people should be
511:10 - able to type stuff in there and then hit
511:11 - submit on
511:12 - it
511:16 - action is where once you submit that
511:19 - form what URL it takes you to so we want
511:22 - to do is
511:25 - like how does it work URL new
511:30 - search like this yeah got be string like
511:34 - that I
511:39 - think there okay and then
511:44 - um we got to have a method and the
511:47 - method is going to be
511:49 - post okay when you do forms you want to
511:52 - do not get method but post
511:55 - methods um we will have some input and
511:58 - the input will
512:02 - say uh type text and then we'll say name
512:06 - is
512:07 - search and then we'll say Val uh value
512:12 - search something like
512:15 - that actually we just need placeholder I
512:20 - think
512:22 - okay so now search with the placeholder
512:25 - you see the placeholder yeah so search
512:27 - is a placeholder I see yep I don't need
512:30 - this guy anymore I can just have this
512:34 - but now we need a
512:35 - button
512:38 - okay
512:41 - so we are going to do
512:44 - input type
512:49 - submit okay and then uh we'll give it a
512:52 - name of
512:55 - submit
512:58 - there so csrf verification failed all
513:02 - that means is we just need to add a csrf
513:06 - token in Jango security feature and then
513:08 - as soon as you add it this should go
513:12 - away okay okay hold on let's try
513:19 - again that's it you don't have to add a
513:21 - functionality to the button what the
513:25 - hell csrf token is missing interesting
513:30 - did you type it correctly it's lowercase
513:33 - with underscore right okay
513:36 - csrf or
513:38 - C csrf yeah csrf
513:42 - token
513:45 - hold on
513:51 - what um templates new
513:59 - search R
514:06 - token content it supposed to be is it
514:10 - supposed to be inside the form that's
514:12 - what I had earlier
514:15 - it still didn't work
514:19 - weird oh maybe I just need to like start
514:23 - the server again yeah that might be
514:29 - it there it's fixed so now it's sending
514:33 - okay now it's sending the actual post
514:35 - request I think what you can do is like
514:37 - you can go insect and you can go in
514:39 - network and I think if I hit
514:42 - submit it shows you new search like what
514:45 - was submitted preview you can do headers
514:48 - and it says it was a post
514:50 - request 200 it got sent correctly like
514:54 - if I change it to a get
514:56 - request and I hit it you know and I
514:59 - click it it'll show me like preview what
515:02 - it was it shows me what it was and then
515:04 - it says I probably have to refresh it or
515:08 - something but
515:11 - whatever but you get the idea right
515:13 - request remote address and then it tells
515:16 - me all this other information with it
515:18 - like if I did uh hello and I hit enter
515:22 - then you'll see not only will I get this
515:25 - but I'm sure
515:27 - that I will also get the value that was
515:31 - in that field
515:32 - search okay so I wrote hello right yeah
515:35 - I just got access to that hello it I see
515:38 - well so that's how you will pull this
515:40 - data out so by just putting a button on
515:42 - the actual form mhm by default if you
515:47 - like did you actually put the the method
515:49 - to submit it or you can just choose it
515:50 - to submit it yep you just choose it to
515:52 - submit it and HTML comes built in with
515:54 - that functionality Android it's so hard
515:56 - to make in oh dude you have to literally
515:58 - call does Android sucks yeah you have to
516:00 - literally call that method from the from
516:02 - the Java class from your Java classes
516:05 - that you made you know yeah we know it's
516:07 - insane sucks dick that's what it's
516:09 - pretty
516:11 - complex damn that that's painful dude
516:14 - that's why flutter
516:16 - exists oh we got to do some flutter
516:18 - stuff too at some point yeah what do you
516:20 - guys think about
516:21 - that okay so we got this we're just
516:24 - going to keep uh search functionality
516:27 - for
516:30 - now um what does this look like okay
516:34 - it's got a container right so that's
516:36 - probably why it looks like
516:41 - that sorry base HTML there's a container
516:45 - here and then it ends right here so I'm
516:48 - going to end the container here that way
516:51 - everything is wrapped inside of that
516:54 - container there you go looks better
516:58 - now okay so we have the search
517:01 - functionality we have the ugly submit
517:03 - button I'm sure we can get a better
517:06 - prettier button let's look oh my God
517:08 - these look juicy
517:10 - right yeah let's use these the ones
517:12 - we the one were
517:16 - using yeah just use that top
517:18 - one the CL with the
517:21 - cloud oh there we go yeah the airplane
517:24 - is actually pretty cool yeah like
517:28 - Craigslist throw
517:39 - it thanks
517:42 - materialize yeah W
517:45 - nice even goes with a let's just make
517:48 - sure that it's working as expected let's
517:51 - go Network hit this new search post oh
518:04 - wait ah there we go Fifi cool cool got
518:10 - it man that's nice
518:17 - send what if I did Flash on would that
518:23 - work
518:25 - hey nice I like that edding the little
518:29 - icons that's insane see because like the
518:32 - button you can like add stuff cuz it's
518:33 - the button is like a container itself
518:35 - it's like a little container how cool
518:37 - that's what it is it's just a box so you
518:39 - can put whatever you want inside love
518:42 - that
518:44 - okay so that's great what else do we
518:51 - need oh man I
518:54 - love
518:57 - damn What's Happening Here Cy man you
519:00 - theand yeah yeah it'll be
519:02 - recorded yeah I've already answer that
519:04 - guys just do me a favor guys our YouTube
519:06 - is dying for some reason I don't
519:08 - know what's happening it's sad as
519:11 - like here I'm going to pull up some
519:13 - social blade I don't know what the hell
519:15 - is happening guys like we're producing
519:18 - more content than we've ever had and
519:20 - YouTube is about to die look at
519:23 - this I have zero idea why we're
519:26 - producing so much content just so if you
519:30 - could just do us a favor please give it
519:32 - a like or share it or something but like
519:35 - we really need your help because YouTube
519:37 - is just choking us we're producing
519:39 - original content we're working our ass
519:41 - off to make really good cont content for
519:43 - you guys but YouTube just keeps choking
519:45 - us so if you could just like it and then
519:47 - share it that'd be awesome let's
519:50 - continue making this app I'm
519:51 - pumped it's
519:54 - app um okay materialize have any nicer
519:58 - uh search functionalities or whatever
520:01 - like a search box
520:04 - thing yeah or it's fine I
520:08 - guess it's it's not that bad unless it
520:11 - was like a little bit shorter maybe yeah
520:13 - it's not bad right it's
520:17 - fine
520:19 - um preloader
520:23 - preloader ooh when it's when it's
520:28 - searching
520:30 - pretty yeah but then how do I stop
520:33 - it when the result is found yeah but
520:37 - how I I I'll have to think about
520:41 - it okay guys but let's let's just focus
520:44 - on what we were working
520:45 - on what's collections that looks
520:50 - fun components and buttons all right so
520:54 - we have a good looking front end over
520:58 - here somebody just said they liked it
521:00 - right now thank you so much appreciate
521:02 - your face appreciate you in the face
521:05 - Europe and Africa buddy
521:07 - no okay thank you yeah that was great
521:12 - very informative
521:14 - okay so now we got this form Buton now
521:16 - what we need to do is when somebody
521:18 - types in should we just now get to the
521:21 - part where somebody types in spits back
521:23 - some kind of results or something yeah
521:25 - yeah we should do that so we got to
521:26 - start pumping it in the Craigslist right
521:29 - mm okay so let's create the front end
521:31 - for it
521:34 - too uh we'll just do the front end part
521:37 - right now so let's go to how did we
521:41 - okay
521:47 - all right so let's go into views and
521:49 - what we're going to oh whoops wrong
521:54 - views views what we'll do is we'll just
521:57 - pull data out of the search bar for now
522:00 - so whatever you put in the search bar
522:02 - let's pull that out
522:04 - okay okay so what we'll do test yeah so
522:09 - we'll say new search is equal to oh
522:11 - let's not call it the function name cuz
522:13 - it could get pretty recursive
522:15 - up yeah yeah yeah okay search ter
522:18 - request. poost
522:21 - doget new search right oh no just search
522:24 - I think it was just search right yep so
522:27 - what we're doing is we're pulling out
522:31 - what happens when I go like this thank
522:34 - you Frankie so we're going here and
522:36 - we're getting
522:37 - this okay yeah because we named it
522:39 - search so this is
522:41 - request because it's a request EST M and
522:43 - then we do Post cuz it's a post
522:47 - request um yeah when you hit the
522:51 - button right post
522:57 - request so it's a post request right
522:59 - that's why we do post and then we do do
523:01 - get and then we're like search okay this
523:04 - get is not to be confused with the post
523:06 - method and get method this is get as in
523:09 - Python dictionary get cuz request app
523:12 - post returns diction
523:14 - that's confusing request. post. getet
523:16 - yep it confused me too until I just
523:18 - taught it that's what I like teaching
523:20 - really yes because you don't really like
523:22 - actually think about it no well I know
523:25 - for httv requests it's always all caps
523:27 - so I when I see get I just it's just get
523:30 - when I see all caps then I think HTML
523:32 - yeah I mean HTTP um makes sense okay but
523:37 - yeah good point all right so we're
523:39 - getting this so I'll do print
523:41 - search just so we can see it in the
523:43 - console if somebody types it in I'll do
523:45 - this and
523:46 - submit and few few right python tutor
523:51 - hit
523:53 - submit python tutor so we're getting
523:55 - access to it now we're going to send
523:57 - this to our front end okay so I call
523:59 - this variable stuff for front end oh wow
524:03 - I make it real easy so we're going to
524:05 - call it uh we're going to
524:07 - say
524:09 - search was the variable search okay
524:13 - later we're going to be adding more
524:14 - stuff to it so let me just make the
524:16 - dictionary look like
524:18 - this okay and then we're going to send
524:21 - this to our front end so we'll say cont
524:24 - uh this is going to be our context
524:25 - dictionary so I'm going to say stuff for
524:27 - front end then we'll I'm going to go
524:29 - into new search and um I'll just say
524:38 - that
524:41 - oh this form should be rendered in
524:49 - base this should this should be getting
524:51 - rendered in bass I'm pretty
524:54 - sure because bass needs to have the
524:56 - search functionality you know otherwise
524:57 - it's like
524:58 - silly yeah you know what I
525:01 - mean yeah the original the original web
525:04 - page needs to have the the search for
525:06 - minute yep and so now what we're going
525:09 - to do is where was it before it was in
525:12 - new search HTML yeah yeah which so like
525:14 - you could never get there without
525:15 - searching in the first place right you
525:16 - would have to like hardcode type in new
525:18 - search at the top which won't make much
525:21 - sense okay so we're going to say um what
525:25 - are we going to say oh yes so we have
525:29 - access to that variable so let's just
525:32 - print it out
525:36 - search and now when I go here and I hit
525:39 - refresh and I do if I go back to the
525:44 - homepage and I go
525:48 - hello out there yeah it's like actually
525:51 - writing it into HTML so now what I'll do
525:54 - is I will add a H2 here like
525:58 - this I'll add another H2 right there
526:02 - Prett and now it look big and now what
526:06 - I'll do is style text align Center so
526:10 - now it's going to be Center
526:13 - and now another thing I want to do is uh
526:15 - if I'm writing like this or whatever
526:18 - right if I'm doing python
526:22 - to it looks silly right so what I want
526:25 - to do is pass it the filter called title
526:29 - so then what that does is that no matter
526:31 - how you write it it'll title it it just
526:33 - forces capitalization of the every word
526:37 - like that right that's it I'll still do
526:40 - it okay sexy
526:44 - this is why it's so jacked this is why
526:45 - like we're so fast dude who's making
526:47 - apps this fast
526:49 - nobody pretty apps by the way me me
526:52 - three years ago
526:59 - broke who is web developer here oh okay
527:02 - Yi since you like python a lot I'm going
527:04 - to make it a Youtube Thousand playbacks
527:07 - dang nice dude if we hit thousand in the
527:10 - live stream every time playbacks that's
527:12 - it's pretty good it's really good and
527:15 - then concurrent viewers I guess we can
527:17 - solve this problem too at some point cuz
527:18 - if we just keep coding people are just
527:20 - going to keep coming in yep you know um
527:24 - oh I guess we could have told our p uh
527:25 - Instagram to like swipe up or something
527:27 - who
527:30 - cares all right let's
527:33 - go all
527:35 - right all right tiny Rick
527:41 - okay
527:43 - I mean way up there any Ricky Morty fans
527:46 - out there drop a
527:48 - comment um okay so
527:51 - now what we're going to be doing is
527:56 - um I'm just going to make a simple card
527:59 - for you guys right now so you guys can
528:01 - get the idea of what we're about to
528:06 - do okay um a lot of this code before you
528:10 - start freaking out and start panicking
528:13 - this is coming from a little bit of here
528:17 - okay what we wanted to do is we wanted
528:19 - to make like when we get the results
528:21 - back we wanted to get them in like card
528:24 - format so like the Craigslist picture
528:27 - could show up here and then the text
528:29 - could show up right underneath it and
528:30 - then the link could show up right
528:31 - underneath that you that would look
528:33 - really really cool I see that's kind of
528:36 - what we wanted to do so like a grid of
528:38 - cards type of thing yeah so that's kind
528:40 - of what that's all we're going to do
528:42 - right now we're just going to like add
528:43 - that grid of cards that's it okay
528:48 - except nothing will be all of these will
528:52 - be you know just right now we'll have it
528:56 - be like
529:00 - this
529:07 - okay say
529:11 - test and everything will link just back
529:13 - to the homepage for now and then it'll
529:15 - be
529:18 - like test price
529:23 - okay so if we go back hit
529:26 - refresh
529:28 - oops okay so we don't have an
529:34 - image but if we were to
529:41 - add
529:43 - another one of these guys and then
529:45 - another one of these
529:50 - guys this is how it's looking right now
529:53 - right well that's because we don't have
529:55 - a flex box right no we don't have row
529:59 - yet oh Row in the so we need a row above
530:07 - this
530:09 - class equals row
530:16 - okay okay here we
530:20 - go so in rows you don't have to specify
530:23 - like in columns as for rows you wouldn't
530:25 - have to do
530:26 - that what's up you know in columns you
530:29 - use S4 so rows you don't do that hold on
530:33 - let me just see what's happening right
530:34 - now something is awfully
530:37 - wrong okay so
530:40 - div div class
530:45 - card card image diff CL card content
530:49 - content
530:51 - okay so
530:54 - now this needs to end right
531:01 - there yeah right there you go we're
531:03 - missing a closing tag for almost all of
531:06 - them I think right
531:08 - probably
531:10 - there yeah that would make sense yeah
531:12 - that makes a lot of
531:17 - sense there there we go so this is what
531:21 - it's going to look
531:22 - like we're pretty
531:24 - close um we can add some dummy images in
531:28 - so let's just go get a puppy
531:31 - image and go
531:33 - [Music]
531:35 - here we'll grab this I'm going to do
531:38 - copy image address so if I do paste it
531:41 - should take me directly to it URL know
531:45 - that directly the URL that's cool right
531:47 - copy image address I was always like oh
531:49 - open image a new tab I used to do that
531:51 - too yeah I used to do that
531:53 - too thanks Chrome yep so we going to go
531:57 - here paste it and delete this then copy
532:02 - this and then paste this and delete this
532:05 - go here go here paste
532:08 - enter okay hey puppy trafficking
532:13 - I'll do dog we'll do puppy so it looks
532:16 - like we actually searched it up even
532:19 - though we
532:22 - didn't okay now we actually need to add
532:25 - the real functionality we've added the
532:27 - front
532:28 - end and let's add uh
532:32 - functionality um for the
532:35 - code for the beautiful Soup part of it
532:38 - now so we're going to go views I'm going
532:41 - to go right here
532:42 - from Jango from bs4
532:46 - import beautiful
532:51 - soup so what's cool about pie charm is
532:55 - it recognizes what the hell is giving me
532:57 - an error so it's not even so it's not
532:59 - even recognizing the module so I can
533:01 - just hold option hit enter and it tells
533:04 - me it's like you want to install it I'll
533:05 - be like cool install it pie
533:09 - charm okay just got an error that's
533:11 - pretty good
533:12 - that's pretty good okay no module named
533:16 - bs4 all right so let's go GS so I'm
533:19 - going to do pip install
533:25 - bs4 so clearly there's a model module L
533:28 - bs4 beautiful
533:31 - sup yep um I'm also going to need
533:35 - requests Library so I'm going to do
533:37 - import
533:38 - requests and it doesn't know what it is
533:40 - so I'm going to do install request
533:42 - please don't give me errors okay good
533:45 - installed
533:48 - okay
533:51 - great so now we have a bunch of things
533:53 - installed I'm going to create pip freeze
533:58 - requirements.txt
534:00 - so I just created a requirements file
534:04 - right here that has all my dependencies
534:06 - that I just installed
534:10 - okay
534:14 - okay so now I'm going to just do get add
534:16 - I'm going to do get commit and I'll say
534:19 - add front
534:23 - end and requirements file
534:28 - requirements and then I'll do get push
534:30 - origin
534:32 - master so now this
534:36 - code is
534:38 - here you guys can go to this code at any
534:41 - time
534:44 - and you know see my requirements file
534:48 - that we just built you guys can go and
534:50 - see the templates the what we're doing
534:52 - in here base HTML everything
535:00 - okay okay making good progress so far
535:03 - guys beautiful man we're so generous
535:08 - yeah okay so let's add um
535:15 - let's add some beautiful Su
535:17 - functionality now so I'll I'll
535:20 - do what was the URL for the Craigslist
535:23 - thing that we had in the other
535:26 - thing oh don't actually need this like
535:29 - query or something it had like triple
535:31 - letters and weird stuff yeah just copy
535:33 - paste it okay so so let's build it out
535:36 - guys so here's okay so if I go to
535:38 - homepage of Craigslist this is what it
535:40 - looks like if I type in Python
535:43 - tutor it builds out this query if I
535:48 - remove this from this amp perent
535:51 - argument yeah it still works and if I
535:54 - actually remove so this is this is like
535:57 - a really tricky part but I'm making your
535:59 - life a lot easier we're making your life
536:00 - a lot easier because we went through
536:01 - this pain if I actually even removed
536:03 - this BBB
536:05 - part um and I just hit slash and I hit
536:08 - enter
536:09 - now it's still works okay
536:14 - so that's the base URL we're actually
536:16 - going to use now you're not going to use
536:19 - this Los angeles. craigslist.org one
536:22 - it's obviously going to be for you
536:24 - whatever is local to you MH okay from us
536:27 - Los Angeles is local so that's why by
536:29 - default by default it's Los Angeles
536:33 - here okay for you guys it's not going to
536:36 - be that so build it out how it would be
536:39 - for you
536:42 - okay so here's what I'm going to
536:46 - do I'm going to call it like base URL or
536:49 - something I'll paste it
536:52 - here base Craigslist URL I guess I'll
536:57 - call
536:58 - it and I'm going to remove the query
537:01 - because query can change at any time so
537:04 - I'll do this so then it's dynamically
537:10 - generated
537:12 - okay and now we're going to
537:17 - do what is it data is equal to
537:20 - request.get
537:25 - what the hell is it search right the
537:27 - search
537:31 - H we're not going to worry about Min and
537:33 - Max price right
537:35 - now it's search right are you trying to
537:38 - get
537:40 - the yeah yeah just want to get the just
537:42 - want to get yeah so we have to I guess
537:45 - build it out oh you already have search
537:47 - but right now let's just do python tutor
537:49 - so let's go python tutor and I'll hit
537:51 - enter so let's
537:54 - just copy what we have
537:57 - here and paste
538:02 - it and we'll call this
538:06 - response okay then we'll have uh data is
538:09 - equal to response. text
538:12 - text and then I'm just going to do print
538:15 - data like
538:19 - so
538:21 - okay and now let's go here let's hit
538:26 - refresh oh because it's probably not
538:29 - request do oh it's
538:32 - requests.get because we're using the
538:40 - library
538:44 - so
538:46 - there we got we got
538:50 - the HTML CSS as you guys can see
538:56 - here cool so it automatically updates
538:59 - your code you don't have to refreshing
539:01 - it so so look at this
539:04 - okay you see where it says IV League
539:06 - tutor exclamation mark calculus algebra
539:10 - search
539:12 - IV League tutor see
539:15 - that so it's doing it's finding it for
539:18 - it's so we're getting that data right
539:20 - now yeah it takes a search term and then
539:23 - it pops it into this that URL that we
539:25 - did up here it just pops it into the
539:26 - query and then it goes to that URL which
539:29 - is that Craigslist URL and then it's
539:31 - just getting all the HTML from that page
539:33 - that has all the python TS and it just
539:34 - dumps the HTML out and then from there
539:37 - we can get all the we get data and then
539:39 - we can go to we can go further into
539:40 - further links stuff from that htmo cuz
539:42 - everything's listed there oh man it's so
539:44 - good to be a programmer bro like so
539:48 - crazy do people even know how to do this
539:51 - stuff
539:52 - apparently not all right so we will now
539:57 - we're going to so I hardcoded this query
539:59 - except now we're going to build we're
540:01 - going to use the dynamic one that we
540:03 - have
540:09 - here okay so we'll build
540:16 - it
540:21 - okay so I'll I'll just call it final URL
540:24 - I
540:25 - guess and what it's going to
540:28 - be is it's going to be the base
540:33 - URL and also guys this is this is kind
540:37 - of a cool thing so you should get it
540:39 - to um it
540:44 - is quote plus yeah from request. compat
540:49 - import quote plus what does that do
540:51 - again I forgot already from request.
540:55 - compat import quote
540:59 - plus so what this actually does is if
541:02 - you write something like
541:05 - this oh yeah yeah I remember but keep
541:08 - explaining it it'll it'll put
541:09 - automatically plus signs in there
541:11 - yeah yeah so it turns into a URL because
541:14 - if I have this here right and I do
541:16 - python
541:17 - tutor you see how it like automatically
541:19 - puts a percent 20 yeah that's you want
541:23 - something to build that for you so when
541:25 - we get it from the search term like when
541:27 - somebody types in something like python
541:29 - tutor here you want this effectively to
541:32 - turn into uh percent 20 yeah and quote
541:36 - plus will automatically handle handle
541:39 - like all these cases for you yeah so
541:41 - don't man manually go into the string
541:43 - and search for all spaces and then input
541:45 - a percent 20 because that's just silly
541:47 - and there's a lot more cases than that
541:49 - right so if I
541:51 - do print quote plus search you'll see
541:55 - what happens I'll unprint this we'll do
541:59 - like that or wait that wouldn't work
542:02 - we'll do python tutor on the
542:08 - loose
542:10 - Scrolls see that there you go python
542:13 - tutor on the loose and then there's
542:20 - like probably not dots right because
542:24 - that's not part
542:25 - of well actually I don't know how it
542:27 - would handle it I'm curious you see so
542:30 - it's like turning it into something
542:31 - that'll work as
542:35 - a
542:37 - actual you know what I mean like look
542:40 - right it's will actually
542:45 - work so that's the beauty of quote plus
542:49 - and the final URL is going to be we're
542:52 - just going to
542:54 - do um we can just use a join
542:59 - method okay url. oh yeah so we're just
543:02 - going to use string uh concatenation a
543:06 - little bit
543:10 - here and I'm going to
543:13 - say this
543:25 - comma oh yeah this is going to be base
543:29 - craigslist.
543:31 - format then I'm going to do quote plus
543:36 - search okay the print final URL so now
543:41 - you're going to see what it does are you
543:42 - on on it already yes so the
543:47 - search will be that so it concatenates
543:51 - both the URL the base URL link and what
543:53 - you searched yeah that's what those
543:55 - little brackets if you put in a
543:56 - string I did not know you knew this much
544:00 - bro get your ass over smarter than he
544:02 - looks you know you know you're faster
544:04 - than him and H wasn't picking this up as
544:06 - fast
544:07 - right
544:09 - yeah yeah yeah but I was also 18
544:14 - so all right so let's um so now it's a
544:17 - clickable link that's how accurate it
544:21 - is okay so we're getting our final
544:25 - URL for so now to response we don't need
544:28 - to send this we just give response our
544:31 - final
544:33 - URL okay then response will get that
544:37 - data and then we can print it out which
544:40 - is just HTML and then we're free to
544:42 - scrape scrape that data for the images
544:44 - for the prices the text everything yep I
544:49 - see for every single one so when you
544:51 - scrape is it like do you actually have
544:53 - to import something else to scrape or is
544:55 - it just like um kind of um like you're
544:58 - looking for keywords and then like using
545:02 - the limiters to get out of um to take
545:04 - off the things that you don't need you
545:06 - know what I mean is it just kind you
545:07 - kind of get the general idea yeah
545:08 - beautiful soup um what it does is it
545:10 - just takes a fat web page of just raw
545:12 - HTML and then it just creates an object
545:14 - so you can go into HTML and just be like
545:16 - oh find this find this tag with this
545:18 - name boom spit out the text find this
545:22 - find this image tag with this class name
545:24 - boom just print the image out so like
545:26 - beautiful soup takes just a bunch of
545:27 - HTML in and then you can dig through it
545:30 - using beautiful soup you could do it by
545:32 - hand but why would you do that yeah yeah
545:35 - you have to like parse you have to like
545:36 - parse the HTM it's just like just don't
545:38 - do it yeah cool
545:42 - yeah just don't just don't do it just
545:44 - don't do itank it's like Nike but
545:47 - better so one basic functionality of a
545:50 - database that I'll like Nike but better
545:53 - yeah so so basically I'll add basic
545:56 - functionality of
545:58 - um the database so you can actually go
546:02 - like oh cool we're using a
546:04 - database so I'll say from import models
546:09 - okay
546:12 - and then uh we'll just do here every
546:14 - time the new search happens we'll do
546:16 - models. search. objects.
546:20 - create and then we'll create it search
546:23 - is equal to
546:25 - search okay so what it's okay so what
546:29 - it's doing is it's going to this models
546:33 - here
546:35 - mhm it's creating a search object okay
546:39 - where the argument is search and this
546:41 - search is what's going to be fed into
546:44 - that object it creates an object of
546:45 - search yep and then puts the search
546:47 - inside the yep that's it that's it so
546:49 - now here's what's going to happen okay
546:51 - if I do
546:53 - balloon I'm going to do puppy I'm going
546:57 - to do
546:58 - Frankie and now when I go to 127 da da
547:02 - da da SL admin all searches all of it is
547:06 - here so sexy taada the power of a
547:10 - database
547:11 - yeah and now you can do like
547:12 - autocomplete and stuff based on what
547:14 - most popular search is cuz you have all
547:15 - this data available to
547:19 - you almost
547:22 - 1,200 this is good stuff man I want to
547:25 - start streaming 24 hours a day while
547:28 - sleeping like literally nobody can keep
547:29 - up unless you're watching it 24 hours oh
547:31 - man we'll be creating one app a day in
547:34 - the gym in the gym while we're at the
547:38 - gym okay
547:41 - so yeah that's looking
547:45 - good don't need this
547:56 - anymore all right now what we need to do
547:59 - is we need to now start doing stuff with
548:02 - the data that we're actually
548:05 - getting okay
548:07 - mhm all right so so let's see here this
548:12 - we inspect we select this tool over
548:16 - here zoom in so everybody can
548:19 - see this tool is called select an
548:22 - element in the page to inspect it please
548:24 - use Chrome never use Safari everybody
548:27 - very
548:28 - important click hover and it tells us
548:32 - that this is actually result title
548:37 - class
548:38 - okay and um
548:43 - that's why it's capitalized like
548:46 - that see that result
548:49 - title so
548:51 - now yeah I have to first of all create a
548:54 - soup object I'm going to do soup is
548:56 - equal to beautiful soup I'm going to
548:58 - feed it the data and I will say features
549:01 - is equal to html.
549:03 - parser yeah cool all that's doing is
549:05 - just parsing the HTML data yeah into
549:08 - this object yep a beautiful Zoop object
549:12 - which kind of just like encap
549:13 - encapsulates all the HTML data into its
549:15 - TX so it's like in a bunch of like
549:17 - nested Parts in code though instead of
549:19 - just raw a raw string of
549:21 - HTML yeah it spits it into it spits it
549:25 - into the HTML parser and then yeah just
549:27 - creates a beautiful soup object I see to
549:30 - easily access everything so I'll go
549:32 - soup.
549:35 - findall
549:37 - where it's an a
549:39 - tag and then the class is
549:44 - actually result hyphen
549:47 - title so a class is a a is link a is
549:51 - link so I'm saying find all the links
549:55 - where the classes result title so find
549:58 - all of that and now I'll do print post
550:03 - titles
550:05 - okay let's go and go python tutor
550:12 - this is crazy like doing everything in
550:14 - first try now it's like going
550:18 - ham making it look way too easy this sh
550:21 - that that took us like five hours to
550:23 - figure out bro yeah but now that we have
550:25 - the that we have the code to like help
550:28 - reference code and also just like I
550:30 - we've done it before yeah like I've
550:32 - solved this problem before cuz it took
550:34 - so freaking long to figure out the
550:35 - patterns cuz you got to like study the
550:37 - patterns like drilling down in that is
550:39 - like tricky and that was our first time
550:41 - using materialize and everything so like
550:42 - it take took a lot of yeah so we're not
550:44 - actually this good like the first time
550:46 - around no we're pretty good but
550:48 - like but yeah the second time around the
550:50 - second but this is just like it's even
550:51 - faster now yeah ludicrously fast not as
550:55 - much Google now yeah so now what I can
550:58 - do is we're getting the title so now
551:00 - what I'll do is I'll say print out the
551:03 - zeroth
551:08 - one okay so it's printing out only one
551:11 - of the items from that list so what
551:13 - we're getting back is actually a list of
551:15 - tags okay so I'm saying just print out
551:18 - one of them the first one that you get
551:20 - so you can see we're getting here result
551:24 - title this is the data
551:27 - ID
551:30 - link this is the
551:34 - link
551:39 - okay
551:50 - cool yep so we're trying to get the so
551:52 - so we know this is the title right here
551:55 - okay how do how do we get it well I
551:57 - think we can just do text. text because
552:01 - it's just a text do text just picks out
552:03 - everything between the text there is
552:05 - there it is yep okay which is really
552:08 - where it's a statistics tutor Excel SPS
552:11 - data or python undergrad grad level
552:14 - that's
552:16 - that yep so this is how we find all the
552:20 - titles then we'll do something similar
552:23 - to
552:24 - get uh what else is there so result
552:27 - title the link right uh well the link is
552:31 - easy because I think we literally have
552:33 - access to the link so for example if I
552:37 - undid this stuff and we
552:41 - oh yeah it's in the href right you can
552:43 - just call like get href or something so
552:45 - yeah we can do do get href like
552:48 - that so if I refresh this and I go
552:52 - here it's right there so I can click it
552:55 - ding ding it'll take me to that post
552:57 - yeah so we have access to the title and
552:59 - the link cool
553:02 - yep that's
553:07 - easy
553:09 - um so there's result
553:11 - info which is another thing that we
553:14 - need cuz we need the info
553:21 - of okay we also need access to the
553:24 - result
553:27 - row because
553:34 - row yeah result
553:39 - row what is
553:41 - that that's uh that's going to have I
553:44 - think the images and stuff in
553:51 - there little Gallery
553:57 - empty okay let's go
554:03 - here
554:05 - [Music]
554:09 - result
554:10 - okay so we're going to need result
554:19 - row
554:23 - um okay so I'm not going to do a lot of
554:26 - the filtering crap because that's where
554:27 - it gets like really complex and for this
554:30 - live stream I just want to keep it like
554:32 - simpler because otherwise we're going to
554:33 - be here till 2: a.m. explaining
554:36 - what we did cuz it gets pretty involved
554:38 - so we're going to just make the simpler
554:40 - version of the app and got it the final
554:42 - version you can get it
554:45 - from um okay
554:50 - so we also need access to the listing so
554:54 - where else do we use
554:56 - it yeah yeah so we need access to the
554:59 - entire listing so then we can go through
555:01 - it and get result title and all that
555:05 - stuff okay yeah this is this is the most
555:09 - important part remember where we had to
555:11 - go through all of it at the same time
555:14 - mhm and that Epiphany we kind of
555:16 - understood it like a lot later like
555:18 - hours and hours later
555:21 - so but just to put it in simple terms
555:24 - when we're cing through this we want to
555:25 - go through it like the entire thing at
555:27 - the same time mhm hopefully that that
555:29 - probably doesn't make that much sense to
555:30 - people but that's okay just take our
555:33 - word for it you want the you want the
555:36 - project on your portfolio or
555:38 - not you shut up and cod
555:42 - it all right
555:48 - so okay here are the post
555:52 - listings now what you'll be able to
555:55 - do is you'll be able to get the
555:59 - result of a
556:03 - listing okay so if I did post listings
556:06 - of
556:07 - zero same's here
556:12 - and you'll be able to get the
556:20 - URL and you will be able to get the
556:29 - price okay I'll
556:31 - explain
556:33 - this um in just a second and you'll also
556:37 - be able to get the post text
556:40 - oh man the image ID
556:42 - part image ID should be okay but we're
556:45 - not going to do we're not going to do
556:46 - any of that uh reject scraping
556:50 - no that's too much so you actually yeah
556:53 - new
556:54 - soup what the hell soup beautiful soup
556:57 - data
556:58 - HTM uh yeah why did you create a new
557:00 - soup object let's see oh yeah yeah yeah
557:03 - doing the Rex thing you don't need that
557:04 - anymore it was only if you didn't find
557:06 - the price if it didn't exist then we
557:08 - created a new soup object got the text
557:09 - and
557:10 - then yeah yeah
557:12 - yeah
557:22 - that hey bro let's scrap it hell yeah I
557:26 - think he meant to say let's scrape it
557:28 - this guy how fun not you DJ Harden
557:32 - yeah get the out of here yeah C in
557:34 - C++ or something yo Sam block him delete
557:37 - him from the chat bad
557:41 - this is a this is not a
557:44 - democracy no this is a monopoly yeah
557:48 - monop okay so um post listings of zero
557:54 - and you you you'll see what it all does
557:56 - okay yeah yeah yeah do
558:00 - print
558:02 - post
558:06 - title
558:08 - whoops you
558:11 - URL price okay MH so I'll type in ping
558:17 - pong here and you'll see what I
558:20 - mean okay look you got the
558:24 - title you got the
558:26 - URL man that's way too easy now the
558:29 - price and you got the price and you got
558:31 - the price dope okay all you need
558:37 - oh just so you know what it actually
558:39 - looks like on Craig
558:41 - list ping pong here see this is what it
558:45 - looks like the different search results
558:47 - is strange but
558:49 - whatever yeah we're not here to question
558:53 - it it's the will
558:59 - of Craigslist Gods yeah the Craigslist
559:03 - Gods Craig Craig
559:05 - himself yeah a will of Craig himself let
559:09 - us see what you got
559:13 - Greg show me what you got show me what
559:17 - you
559:19 - got all right so basically what we're
559:22 - doing guys is we're getting the post
559:26 - listing and then from the post listing
559:28 - I'm we're getting the post title the URL
559:30 - and the price okay because whatever
559:33 - we're getting the post listings from the
559:35 - result row result row contains the
559:37 - information of result title the link and
559:40 - the
559:41 - price see what I'm saying yeah okay now
559:45 - the Frankie yep free coding lesson man
559:49 - we're going to charge you five bucks
559:51 - later I
559:52 - know now the part that
559:55 - gets a little involved guys is the image
560:00 - right is the image part so um let's do
560:03 - that last let's do everything and make
560:05 - that last just have just leave the dummy
560:07 - image for now okay fine yeah and then
560:09 - like add it
560:11 - in because it fine cool you agree yeah
560:17 - got it all right so now that we get the
560:20 - post listings all we got to do is just
560:21 - like store that data send it to the
560:23 - front end Loop through it okay so let's
560:25 - just do that for now so we'll create
560:29 - a basically we're going to
560:33 - start um as we go through it we're going
560:35 - to start pending it to something okay so
560:39 - here's what what we're going to do we're
560:40 - going to create a thing called final
560:47 - postings which is going to be an empty
560:49 - list then I'll say for
560:54 - post
560:56 - in post
561:01 - listings final po uh basically I'm going
561:04 - to do
561:08 - is
561:11 - post title is equal to post.
561:17 - find so it's just going to be this line
561:20 - basically only difference is
561:28 - that is just going to say
561:31 - post
561:33 - okay this is going to say
561:36 - URL this is going to say price
561:40 - and um here it's going to
561:59 - say makes
562:02 - sense so I'm just going to Loop through
562:04 - each post and then I'm going to print
562:06 - out its text get its other thing not
562:09 - print out but like post title is going
562:11 - to be the title yeah you're storing all
562:13 - of this inside inside final yeah I'm in
562:17 - the dude you're really good how much
562:19 - have you coded couple of years um what
562:22 - the man why are you guys so
562:24 - nonchalant bro like you're good like
562:27 - you're good no little bit out of
562:30 - you you're
562:31 - good smarter than you look he's really
562:35 - good that's you guys need to like own it
562:39 - more like you guys need to go
562:41 - crazy cuz other people don't understand
562:44 - like when you say it like that everybody
562:45 - thinks oh you're you're an
562:48 - idiot that's what Aaron thinks
562:54 - well when you're like H yeah you know
562:57 - yeah c not that much like you it's like
563:01 - I think you're an idiot like you
563:03 - probably don't know that's why I
563:04 - never talked about coding with you in my
563:05 - whole life it's cuz if you if you know
563:07 - the basics of like a language you pretty
563:09 - much know right code all around you just
563:12 - have to like catch up to it yeah so
563:15 - it's
563:17 - dope okay so I'm going to delete all
563:20 - these cuz uh we don't need these
563:22 - anymore and then I'm just going to go
563:24 - here and I'm going to
563:26 - say
563:29 - um final postings do
563:33 - append
563:35 - post post title I think I created a
563:39 - tuple right so it's going to be a tuple
563:42 - you'll see why it's going to be a tuple
563:44 - of three right now post URL and then
563:47 - it's going to be like post
563:58 - price
564:01 - okay what the hell is
564:08 - happening
564:10 -  he's
564:13 - good like what he's good what's he
564:18 - saying R it's just some dude named r p
564:20 - like just in time to watch it live these
564:22 - guys cuz these guys want me to flex on
564:24 - them you know like I didn't want to code
564:26 - I just wanted to give them some advice
564:28 - how do you make money but every but they
564:32 - just yeah how do they get but like they
564:34 - just really want me to flex on them so
564:37 - I'll Flex on them a freaking yeah and
564:41 - now I got my Vim like look at what I'm
564:44 - doing to okay all right so we have our
564:48 - final postings now in our stuff for
564:50 - front end we need to actually pass it
564:52 - like
564:59 - [Laughter]
565:06 - this oh my God
565:12 - oh wait I don't say it don't say it
565:15 - don't say it out loud
565:20 - no can't hear just just give up dude
565:23 - your ears don't dude your ears don't
565:27 - work all right so let's just do
565:31 - this I literally yelled it in his ear
565:34 - not even not even I did I only heard
565:37 - like it's it's much louder for him dude
565:41 - all right whatever so we got final
565:45 - postings um that's pretty
565:54 - good show me what you got man this
565:58 - stupid stuff is stuck in my
566:01 - head guys so now I'll go to the new
566:03 - search
566:05 - folder okay and what I'm going to do
566:08 - here is is uh pretty much right here for
566:10 - now I'm going to write a for Loop this
566:12 - going to look pretty
566:13 - ugly but it's going to be like
566:18 - four post in final
566:22 - postings okay then I'm going to have N4
566:26 - like that and then I'm going to
566:32 - say post dot
566:36 - zero post. one post start
566:40 - two Bing Bang Boom easy
566:43 - done or yeah I guess you got to put it
566:46 - in
566:50 - tags good pra you actually don't have to
566:53 - right but good
566:55 - practice uh you kind of have to CU
566:57 - otherwise it's all going to be on one
566:58 - line look ugly you are right you're
567:03 - right
567:06 - okay there we go man everything is
567:09 - getting done in one try I'm loving
567:12 - this what's what epr are using to web to
567:16 - web to it don't worry about it there's
567:18 - no API we're beautiful scooping it I
567:20 - mean souping it beautiful scraping it
567:22 - all right so here we got boom all the
567:26 - posts yep all the uh the the title right
567:34 - the okay well that's not going to work
567:37 - yeah cuz there's no price
567:39 - yeah uh I got to write fix that code
567:42 - okay so tutors don't have a price right
567:44 - so basically we're going to say if
567:48 - post fine you just got to yeah make a
567:51 - check first p uh
568:00 - if if um post. yeah post.
568:04 - fine you don't need you don't need the
568:06 - do text get rid of the do text
568:10 - oh yeah good call Yeah so basically if
568:13 - it has a price because certain things
568:15 - don't have a price so if it has a
568:18 - price uh then do
568:20 - this otherwise price is equal to n/ a
568:28 - yeah or I mean should I say post price
568:33 - yeah so you don't actually have to put
568:34 - the L's you forgot the L no no you do oh
568:37 - I'm like you do oh
568:40 - yeah no no no you have to no good catch
568:43 - dude
568:44 - you're my God Basics dude no Basics no
568:49 - but but that's the but that's the thing
568:51 - dude Basics is where people don't have
568:55 - any
568:56 - intuition anyways let's try python
569:00 - tutor there we go na na na for any of
569:04 - them that don't have price which is all
569:05 - of them but if we do pingpong we'll have
569:10 - damnn bam b boom right
569:14 - d they're expensive way what ping pong
569:18 - tables yeah what seriously what like a
569:21 - car cuz the because the dude's giving
569:24 - his entire balcony plus a ping pong
569:27 - table plus the underground parking lot
569:31 - Jesus that he's selling an underground
569:34 - parking lot like
569:37 - what all kinds stuff and a
569:40 - balcony man I need an
569:43 - Advil um
569:46 - okay let's power through it boys almost
569:49 - there almost there almost there we
569:50 - should have some music man some like
569:52 - epidemic sound like legal don't worry
569:54 - don't put it now the these little Co
569:57 - coders freak out when you put on
569:58 - music so don't put it right
570:01 - now we're going to do it a little bit
570:03 - without the music right
570:06 - now he's the beat box Bo Frankie also
570:09 - knows how to beat box sometimes when I'm
570:12 - inspired enough you know what's cool
570:14 - about this what look dude it it can read
570:19 - pie charm and Jango I can hit
570:22 - play and it'll like run the code wow
570:24 - that's insane that's what I'm saying
570:26 - bro little the laptop little touch touch
570:29 - bar yeah dope you're a little touch
570:33 - bar
570:35 - what see how it's
570:37 - working
570:41 - boom see see how good it
570:45 - is python
570:48 - tutor okay there we go so now what we
570:51 - want to
570:52 - do what is this weird error I'm getting
570:55 - bro forget
570:58 - this
571:02 - 500
571:04 - search I'm just going to stop this one
571:06 - cuz I wasn't getting any errors when I
571:08 - was running it from
571:12 - here uh Java
571:17 - tutor okay yeah that was a weird
571:22 - error cool so we're getting all this
571:24 - data to our front end which is what we
571:26 - needed so now all we
571:30 - do is we just have to render in a pretty
571:33 - way okay so we're going to write the
571:36 - same type of for Loop except now what
571:39 - we'll
571:40 - do is we'll
571:44 - go from here to
571:50 - here paste
571:52 - it okay or remove post zero post one
571:56 - right and what I'll do is for the
572:00 - link is going to be actual link of the
572:03 - post
572:05 - M that's in position one position zero
572:09 - position like post zero post one post
572:11 - two okay so this is going to be post.
572:15 - one okay that's the URL oh I see okay
572:19 - this is the source of the image we don't
572:21 - have the image right now so for image
572:23 - it's just going to be puppies for
572:24 - now they're hardcoded
572:27 - in again URL so this is going to be
572:31 - post. one
572:33 - again and then here is where the price
572:37 - is
572:39 - like that so the price is going to be
572:41 - post
572:50 - dot
572:52 - two and this since this is a title is
572:55 - going to be post.
573:00 - Z okay like that now another thing we
573:04 - need to do is we need to wrap it in a
573:06 - row so we're going to piss the row up
573:09 - here after the for Loop ends we're going
573:12 - to end the row
573:14 - div we can remove all of these lines
573:25 - here
573:29 - okay and that's
573:31 - it nice nice
573:37 - okay now what we want to do is some of
573:39 - their sizes change you see their sizes
573:42 - like some is like some are bigger some
573:44 - are smaller so what we kind of did is we
573:46 - kind of have like this crappy solution
573:49 - which is pretty much fix the height of
573:52 - the card and the card image so pretty
573:55 - much forget all of this stuff down here
573:57 - you don't need that but just take this
574:00 - stuff from up here we're going to take
574:01 - it we're going to go to our style.css
574:04 - and paste it in here
574:06 - okay and um
574:09 - this stuff doesn't just render right
574:11 - away so we need to actually do a hard
574:13 - refresh and all kinds of weird stuff
574:17 - need to stop running
574:19 - it o we're getting a weird error
574:24 - 304
574:28 - huh
574:37 - you so it's finding
574:40 - it get is 200 but it's still not showing
574:56 - it so this is the thing with the Statics
574:59 - static websites like sometimes it just
575:02 - won't show
575:03 - you when you make a static change
575:06 - sometimes it just doesn't render until a
575:07 - lot
575:12 - later
575:13 - Thief uh
575:17 - pingpong all right I'm not going to
575:19 - worry about it too much right now
575:21 - because it should be
575:22 - working it isn't oh yeah our stylesheet
575:26 - yeah that was that was a I don't even
575:28 - know how we fixed that do you remember
575:29 - how we fixed that there was like a
575:31 - weird yeah it just took a while to
575:34 - didn't you like stop the server and
575:35 - start it again and then it updated or
575:37 - something right it to like stop and you
575:39 - got to start it and then it has to
575:41 - because I know the code is correct mhm
575:45 - but then it takes a while let's see if
575:46 - it updated right
575:48 - away no yeah it took like 20 minutes or
575:51 - something yeah the first time it took
575:53 - forever okay whatever that's that's not
575:55 - that important of a
575:57 - part agreed um so now we got to get
576:00 - images right for this the image part is
576:02 - the most complex it's the most
576:04 - complicated this is where web scraping
576:07 - this is where problems solving comes in
576:08 - this is where you actually need to use
576:10 - your brain this was the most rewarding
576:13 - part of the whole project actually yeah
576:15 - it really was so I wish you guys get to
576:17 - see our full video like a month later
576:20 - once our hard drive is fixed cuz all of
576:22 - it got deleted 15 hours of content got
576:25 - deleted but we'll try to show you what
576:28 - we can right here
576:32 - okay
576:34 - so some funky
576:37 - things
576:41 - there were some weird findings that we
576:43 - made it's almost like
576:46 - um we had to figure out some really
576:49 - weird hacks
576:51 - yeah if you you want to start with
576:53 - Craigslist let's go go to Craig I think
576:55 - a better way to approach it is go to
576:56 - Craigslist and then show them that
576:57 - there's multiple images for post so when
577:00 - you're onra look at this each yeah each
577:02 - post has multiple images and we thought
577:04 - it'd be as easy as like oh these images
577:06 - are hosted out a URL just like like the
577:08 - puppy image and then just have them like
577:10 - all listed in the HTML but they weren't
577:12 - like these image tags didn't even exist
577:14 - in the HTML web page for some reason and
577:16 - we don't know why we couldn't find they
577:18 - exist under this class called swipe
577:20 - which you can't you can't access you can
577:23 - never access this class from beautiful
577:25 - soup directly no like beautiful soup
577:27 - like skips over it for some reason so
577:29 - literally like you just don't it's
577:30 - impossible to access it with beautiful
577:32 - soup like it doesn't exist so we're like
577:34 - okay well then how the hell do we get
577:35 - the images and uh we had to find out
577:37 - this really convoluted way of getting it
577:39 - but there's like a there's like a little
577:40 - trick we're going to show you how to get
577:42 - it and we're only going to get one image
577:43 - so we're just going to ignore all of
577:45 - them we're just going to get the first
577:46 - image to keep it simple yeah but even
577:48 - that it's still like it's this little
577:49 - trick that we had to figure out and it's
577:51 - actually pretty cool yeah it's pretty
577:53 - insane okay so
577:57 - now all
578:00 - right the data IDs right holy dude
578:03 - this image is just right
578:05 - here oh yeah obviously they're all right
578:07 - here but you can never access them no
578:09 - because beautiful soup ignores that
578:10 - entire div of swipe doesn't exist in
578:14 - beautiful soup so this is so this is the
578:16 - first thing we noticed about Craigslist
578:18 - images they're hosted on this pattern
578:22 - where this is some ID mhm and then
578:27 - they're all like under underscore 300 by
578:29 - 300 hardcoded okay so boom right there
578:33 - so this is why they're all have the same
578:34 - size on the page so that was like the
578:36 - first detective thing that we noticed
578:39 - also this needs to be at the
578:42 - bottom oh uh some might get chopped off
578:45 - on the stream a little bit not from the
578:48 - bottom oh yeah that the right side is
578:51 - yeah just maybe just drag the bar over a
578:52 - little bit so they can see um wasn't it
578:55 - getting chopped off even more when it
578:57 - was actually on the right side like that
578:59 - cuz this the CSS isn't important it's
579:01 - just the HT okay let's see sorry guys we
579:03 - have a little bit of a delay so we just
579:05 - want to see you guys are seeing the
579:06 - right things should be good was pretty
579:09 - good you can see most of it yeah you can
579:11 - see most of
579:14 - it all right so this is the URL
579:18 - now what we noticed the craziest thing
579:21 - we noticed will save you long like the
579:23 - long story we'll make it short for you
579:25 - okay there's something called Data IDs
579:29 - and you'll never associate that with an
579:30 - image like why the would an image
579:32 - be under data IDs like that's the last
579:35 - place you look for an image right so it
579:37 - doesn't make so you can't actually
579:39 - access this image link from beautiful
579:41 - suit which is super annoying but you can
579:43 - access the data IDs so what's what's a
579:47 - funky like if you have to pause it here
579:49 - and see if you can see a pattern here
579:51 - with images and data IDs you should do
579:53 - that right now here's a pattern we
579:57 - noticed everything has multiple images
580:00 - right so data IDs since this has three
580:02 - images notice that there's one two and
580:04 - three data IDs right another thing I
580:07 - want you to notice is for this first
580:09 - image is the same as the first ID except
580:14 - there's a one ni colon here which is not
580:16 - present here right but then everything
580:19 - else is the same okay also there are
580:21 - these commas that we got to get rid of
580:24 - cuz there are no commas in the actual
580:26 - URL right so we're like okay let's
580:28 - actually take this guy over here from
580:32 - here to here let's copy it let's go here
580:36 - double click uh
580:38 - go
580:39 - here paste it hit
580:42 - enter that's the second should be the
580:44 - second image right I'm create let's
580:46 - double check so if I go here should be
580:48 - second image right there nice so that's
580:50 - actually where the image data is we're
580:51 - just given these IDs we don't actually
580:53 - have the full URLs yeah so at least so
580:55 - given the IDS we're like okay we can
580:57 - generate the actual images mhm so we've
581:01 - had to create a base URL for the images
581:05 - yeah just like we did for the Craigslist
581:06 - query yeah very very similar thing we
581:09 - got to construct the URL ourselves for
581:11 - each
581:12 - image wow y it's crazy
581:17 - right so it's going to be 300 by 300
581:20 - like that you haven't seen our DOT
581:21 - splits yet man oh my God yeah wait till
581:24 - you see that parsing the string to get
581:26 - the to get the ID out the correct ID
581:28 - that's that part is
581:29 - cool okay so we got our base image
581:33 - URL now what we want to do is
581:40 - um get the image from the result get the
581:45 - data ID from the result row okay and we
581:48 - don't want to get multiple we just want
581:50 - to get the first image we don't really
581:51 - care about all of the
581:53 - images so what we'll do
581:59 - here is something like
582:04 - this so we want to say
582:10 - if it has an
582:12 - image yeah if the data IDs exist okay so
582:16 - in the result image class if the data
582:19 - IDs
582:21 - exist then what I want you to do is the
582:23 - post image is actually going to equal
582:36 - to like that that
582:40 - okay and now we don't want to get all of
582:44 - the data IDs because that might be like
582:45 - four image IDs or five image IDs we just
582:48 - want to get one image ID okay so what
582:51 - I'll do here is I'll just print this for
582:55 - now we'll go like that and we're going
582:57 - to go here and we're going to write
582:59 - pingpong and hit
583:01 - enter and we'll go down here and
583:06 - uh
583:12 - what the
583:13 - hell
583:23 - one what am I doing wrong
583:28 - [Music]
583:32 - here let's see wait let me see let me
583:36 - see so if post. find if the data data
583:40 - IDs exists then you want to find so
583:43 - image. getet data
583:46 - IDs no uh get data IDs is a string so
583:50 - when you call it's a string ID is a
583:52 - string yeah oh that's the annoying part
583:56 - about it this is the annoying part about
583:57 - it it's not so like it doesn't give so
584:00 - it doesn't give you a list of multiple
584:03 - IDs it literally gives you one data ID
584:06 - CSV file it literally gives it CSV file
584:09 - that's what it is okay right smart Okay
584:13 - so that's what we get so now if I
584:19 - actually print post
584:23 - image which should be fine I
584:26 - think well since I'm going to be
584:28 - printing it so many times let's just go
584:30 - here and print
584:34 - it
584:36 - okay
584:38 - it doing it every single
584:40 - time so there it
584:42 - is that's one string a lot of images
584:45 - there right so it's like I got lots of I
584:48 - got lots of post listings so like the
584:51 - last post listing probably has like like
584:54 - 12 many images like 12 images eight
584:56 - images something like that
584:58 - right so what I want to do is I want to
585:00 - just get the first one well how do I get
585:03 - that so what I'm going to do is we're
585:05 - going to do split on on this and we're
585:08 - going to split it
585:10 - by
585:12 - um commas first yeah commas first cuz
585:15 - you want to split the string into a list
585:16 - of the things separated by commas yep so
585:19 - now we have a so then it actually turns
585:21 - into a list this guy is crazy
585:25 - good like he's good yeah have him code
585:29 - stop touching the computer what wait
585:30 - till you watch him Cod oh dang flutter
585:33 - content so once we do comma then what
585:36 - happens is that
585:38 - we effectively get a list that actually
585:41 - looks a lot
585:45 - like we actually get a list that looks
585:47 - like this
585:50 - now so then we can actually index it by
585:53 - the first item and the second item and
585:55 - the third item so so now if I do zero oh
585:59 - that's how it works that's how you
586:01 - actually make it work now yeah so now
586:03 - what happen is if I go here and I hit
586:06 - refresh
586:12 - advert I got your godam advert in your
586:15 - own video
586:17 - Perfect
586:19 - dang python tutor on the loose what the
586:22 - hell's going on so look now for each of
586:24 - them is just giving me one but I still
586:26 - got to get rid of the one and colon mhm
586:29 - so we got to now uh say use reject or
586:34 - what we're going to now do split it
586:39 - by
586:42 - um one and colon no just colon oh yeah
586:46 - Co split it by actually no you could do
586:48 - one colon and then but it would it would
586:51 - act the same way because you yeah it
586:52 - would act the same way so we're going to
586:54 - split it now by the colon so
586:59 - now um I mean is going to create that
587:02 - into a list so like for example first it
587:05 - was doing this right then we said okay
587:09 - give us just the first item from here so
587:12 - then what it ended up doing was it
587:14 - said okay you got it mhm but now what
587:17 - we're going to do is we're going to say
587:20 - yo give
587:22 - us so after the the colon yeah splits on
587:26 - the colon and turns everything into a
587:28 - list like that one colon and then it's
587:30 - going to give us oh okay since before
587:33 - the colon it turns all the colons into
587:35 - like commas of aist like how yeah so
587:37 - separated by colons so now we're going
587:39 - to do that but we're going to say give
587:41 - us the second element from that M
587:44 - because the one is the first element
587:46 - yeah I mean we could have just shaved
587:47 - off the first two characters of the
587:48 - string we could have done that um but I
587:51 - mean we want to be more robust because
587:52 - what if there's like one so now we're
587:55 - getting all the IDS right and now the
587:59 - post image URL is actually going to be
588:03 - the base image
588:05 - URL uh formatt it with
588:09 - the post image URL oh wait
588:17 - what id I guess so here's what's another
588:20 - cool thing about py charm is if I do FN
588:22 - shift
588:27 - F6 I'll change it everywhere everywhere
588:30 - in every file every project but like
588:32 - intelligently so if it's the scope is
588:34 - here it won't change it out here I think
588:36 - you already know these
588:38 - things scope that's
588:41 - good all right so scope is
588:45 - Frank actually
588:47 - don't all hold on we're almost there
588:51 - okay so this is happening so now let's
588:54 - just print it before we go on to the
588:56 - next
588:59 - step print click
589:02 - o
589:04 - click whoa is that a bigger bed
589:07 - right so this is freaking
589:12 - awesome oh wait I'm calling both of
589:14 - these post image URLs this is actually
589:18 - the post image
589:22 - ID this is the
589:30 - URL okay so now I have to actually
589:34 - append this too to the list
589:39 - um so if we find the image this is what
589:41 - should happen but if we don't find the
589:43 - image we also want to give it an image
589:45 - okay so the image that we want to give
589:47 - it is we saw this we saw Craigslist
589:51 - gives this to anything that doesn't have
589:53 - an image logo just like this type of
589:56 - thing okay so then we do that so then we
589:59 - say yo if you find it then give me the
590:02 - image otherwise give me this
590:05 - garbage
590:08 - where do these spaces come from
590:11 - bro
590:15 - weird
590:17 - okay uh no
590:19 - image or actually post image post image
590:24 - your
590:29 - whoa
590:31 - okay what the hell is happening oh so
590:35 - then what we say is append post image
590:39 - URL so now there are four things that
590:41 - the file postings has as a tuple title
590:43 - URL price post image URL oh how cool
590:48 - okay y so now it's sending it to the
590:50 - front end so basically we go to our new
590:53 - search and now anywhere there's that dog
590:57 - crap right wow that's so sexy that is
591:01 - right yeah it's crazy put the first you
591:03 - guys created the URL damn sexy right
591:07 - love it love it this actually pays
591:09 - everything off now that he appreciates
591:11 - what we've
591:13 - done post. three I still screw up the
591:16 - influencer
591:19 - post there we
591:21 - go so now when we go back we
591:26 - refresh hey there you
591:29 - go now if you click here it'll take you
591:32 - to the thing oh man better than
591:34 - Craigslist so much better better than
591:36 - Craigslist dude it's code Daddy's list
591:38 - they should hire us we just coded it up
591:40 - ourselves from the scratch why haven't
591:43 - they done this huh because Craigslist is
591:46 - Untouchable too many Craig the
591:48 - God all right now uh we're going to host
591:51 - it on Heroku oh God this is the worst
591:54 - part
591:55 - that get ad get
591:59 - commit
592:03 - um add Craigslist search SE
592:09 - functionality uh get push origin
592:14 - Master Okay kids
592:17 - now what we need to do is we need to
592:20 - create this proc file
592:23 - okay so you
592:25 - copy so basically we go to the
592:29 - root we create a file we call it proc
592:33 - file we paste this we change this test
592:37 - app to code Daddy's list like so then we
592:44 - go
592:46 - to
592:48 - settings and we do the
592:52 - following
592:53 - settings we go here and we add this line
592:56 - of code and we go
593:01 - here um and then we add uh this line at
593:07 - the
593:08 - top okay like this now it's going to
593:12 - need you to install pip so you got to do
593:14 - pip install
593:16 - Jango
593:18 - Heroku okay now you're going to run
593:22 - into this ugly looking
593:28 - error how do we fix this
593:32 - eror oh man I'm not
593:35 - um
593:40 - okay hold on pip
593:44 - install pip install Jango
593:55 - Heroku wait where did my PG admin
594:01 - go I literally installed it a few days
594:05 - ago
594:11 - okay so what I recommend is you go and
594:13 - install PG admin or something like this
594:17 - from the guey this is the part where
594:18 - you're going to get up the most
594:20 - so go here is uh I wrote the blog post
594:23 - on this on
594:24 - medium if you do uh how to host a d
594:28 - Jango Heroku
594:31 - app you're going to run into my blog
594:33 - post which is
594:35 - incredible it has has a lot of claps on
594:37 - the left hand side as you can see nice
594:40 - photo thanks bro and basically what you
594:43 - want to do is you want to do all this
594:45 - stuff right here okay so we're going to
594:48 - do
594:50 - that so
594:54 - install so this is what I said to do
594:56 - this the easiest way is to install PG
594:58 - admin on your computer okay four days
595:02 - ago yeah where the hell does PG admin
595:05 - man open
595:10 - it you can go into property
595:14 - though copying PG admin so I'm going to
595:19 - open PG
595:20 - admin until then I'm going to pip
595:22 - install gunicorn pip
595:26 - install
595:28 - done uh pip install Jango Heroku which
595:31 - still shouldn't work because I'm waiting
595:33 - on the PG admin which is taking its
595:35 - sweet ass time
595:38 - so yeah we'll just
595:49 - wait damage and can't be
595:52 - opened this is the part where you lost
595:54 - me I still don't know how to deploy a
595:56 - Heroku yeah well now it's going to be
595:58 - recorded So everybody can watch it oh
596:00 - boy I'm going to go read that blog post
596:03 - man we need more ad though man there's
596:05 - only one ad left here we'll run the
596:07 - Walgreens later bro take some of those
596:09 - those green tea mints they'll suffice
596:11 - for now right some green tea Mochi yo
596:14 - hook me up with the Whiteboard dog
596:17 - number three
596:18 - right oh my God are you
596:21 - serious go to OBS go to OBS dude hold on
596:25 - hold on dude you're going to blow up
596:32 - everything this guy man we prepared for
596:35 - this moment
596:38 - we did the one the one time wanted to
596:40 - switch to
596:41 - the oh it did work look before before
596:44 - you even did it it already worked what's
596:46 - up because I pressed it no now you
596:48 - pressed it it's already there okay fine
596:52 - you're
596:53 - like all right we need
596:55 - Heroku and for that you need
596:59 - PG admin basically what you need is
597:05 - postgress
597:08 - okay if you have postgress you're good
597:10 - to go but it's a nightmare install it
597:13 - it's a nightmare install pip install
597:15 - psycho pg2 you're not going to be able
597:17 - to get it right but if you just download
597:20 - it from aui it makes your life so much
597:22 - easier just go install like a free
597:25 - postgress database tool that exists
597:28 - online and that's going to make your
597:30 - life a lot easier okay and then we're
597:31 - going to install everything else I'm
597:33 - using Anaconda right
597:35 - now which also makes things easier this
597:38 - is the longest verifying I've ever seen
597:41 - in my whole life
597:43 - dude this is crazy verifying PG admin
597:47 - yeah so we have done all of these
597:53 - things okay create a search
597:55 - functionality does this we have web
597:57 - scraping beautiful suit using
597:58 - materialized pretty much done with the
598:00 - app now we just want to host it on
598:04 - Heroku yeah forgot the dog dog
598:09 - pictures yeah
598:16 - doggies I can't draw I don't know how to
598:18 - draw
598:24 - doggies right guys so we're almost done
598:28 - okay we're waiting for this thing to
598:31 - install cuz it's just taking its sweet
598:35 - sweet little time
598:39 - whichs so good sorry we're admiring our
598:42 - own live
598:44 - stream
598:46 - yeah yeah we're forgetting
598:53 - something oh somebody left for lunch
598:56 - priorities are out of
598:59 - order bruh what does it say Bruh Bruh
599:04 - hello what
599:06 - everyone needs bread it's probably bruh
599:09 - how he was like how like bruh how L and
599:13 - the O is next to each other on the
599:14 - keyboard all right Tatsumi bye Roshan
599:17 - hello monkey Bender hello hello goo
599:19 - something Glo goo
599:22 - Glo I was
599:26 - G come on Marty we got to go on
599:28 - adventure Marty what's the
599:32 -  verify and the purple light was off
599:34 - the whole time no just like you got
599:38 - concurrent between
599:40 - the 1500
599:42 - people yeah playbacks that's crazy holy
599:45 - crap but the concurrent viewers are
599:49 - like crazy secret
599:52 - key
599:55 - yeah camera the CPU are you serious dude
599:59 - like are you actually
600:04 - serious um
600:06 - let's look up other post cross goey Mac
600:13 - options post
600:19 - app
600:21 - downloads all right guys I'm going to
600:23 - say you to PG admin and I'm going
600:27 - to install post. app in the meantime
600:30 - hopefully it'll work a lot
600:33 - faster God damn PG admin ch on your
600:44 - verification
600:48 - post is it open
600:50 - already wow it was installed and opened
600:53 - and initialized
600:57 - boom there we go Rafiki post Crest
601:00 - template you click into it and it'll do
601:02 - stuff this is
601:04 - awesome
601:09 - you terminated it um yeah just a
601:12 - session
601:29 - okay okay I guess cond install psychop
601:31 - pg2 was the answer so that worked this
601:35 - is why an aond is freaking awesome now
601:37 - let's try pip install Jango
601:40 - Heroku cuz pip just sucks sometimes and
601:44 - like you need to do something to get
601:45 - past
601:46 - it okay so this should be working
601:50 - now great
601:53 - stop okay what else do we need now we
601:55 - need to freeze our requirements that's
602:00 - important we need to Heroku log
602:04 - in
602:07 - so there we go we're logging in I'm
602:10 - logged in
602:12 - now and then what we need to do is
602:15 - Heroku
602:20 - create and after this what I need to do
602:23 - is add a database create a new postgress
602:25 - database for your app that's hosted
602:27 - online on Heroku so then it can store
602:29 - all those pieces of
602:32 - information now make sure you run
602:35 - migration
602:37 - so let's do
602:43 - that okay Heroku run python man make
602:52 - migrations can't open
602:59 - file
603:04 - huh the hell does that
603:34 - mean
603:45 - oh committed the file okay get add get
603:53 - commit what are the changes get add
603:57 - get
604:01 - commit get ready for
604:04 - Heroku get push origin
604:25 - Master there are no migrations to
604:28 - make oh
604:34 - meta
604:40 - add meta
604:43 - class parion
604:46 - [Music]
605:00 - Master
605:01 - huh that is a really weird error
605:34 - for
605:41 - scaling dinos couldn't find that
605:49 - process should be logged in
605:58 - already oh I don't think I even did get
606:00 - push Heroku Master
606:04 - yet
606:09 - but I that doesn't come first I don't
606:12 - think
606:21 - so 1700
606:31 - man we're trying to host it once it
606:33 - works we'll be able to link you guys so
606:35 - you guys can actually see this
606:37 - app we're pretty close yep hold on
606:42 - Diva Diva
606:45 - Diva div up
606:47 - the the
606:55 - D you know just as much about Heroku as
606:57 - I do
607:01 - Frankie you've never uh posted anything
607:04 - nope
607:19 - so we're
607:21 - live this app guys is actually live as
607:25 - we speak it's on Heroku um you can
607:29 - actually go to this URL right now which
607:31 - I don't think they can see yet can you
607:34 - just type that UR can you do something
607:36 - okay yeah just add it in the chat URL
607:38 - just look at
607:42 - it dude gentle hyen C
607:49 - manent gentle
607:52 - C 49 what is it
607:56 - 49783 Heroku
608:04 - app.com
608:14 - there it
608:26 - is you guys you guys can now actually go
608:30 - on it but if you type something in it
608:33 - won't work because I'm having a problem
608:35 - with the
608:37 - database um Heroku run
608:44 - python some problem happening with the
608:46 - migrate command on Heroku which is super
608:49 - weird so you're trying to migrate the
608:51 - database to Heroku it's not working yes
608:54 - oh there
608:55 - nice what command did you run so now
608:58 - migrate works okay so basically if it
609:01 - doesn't work you push first and then you
609:03 - migrate after
609:07 - oh so this app guys now should be
609:11 - working perfectly if you hit python
609:13 - tutor it works wow it's online anybody
609:16 - can use it from any computer in the
609:20 - world do you think that's the sequence
609:22 - like make it host online first and then
609:26 - put the database in or is it always like
609:28 - that or is it just you
609:34 - know
609:39 - hell yeah works for everything if you
609:41 - look up
609:42 - Borderlands
609:44 - three they released a new DLC did you 3
609:47 - and like if you go here $360 right if
609:49 - you click into it it'll be $360 yep nice
609:54 - all right guys there you have it this
609:56 - app is completed the link is in the can
609:59 - you add the link in the description as
610:01 - well or not right now yeah yeah after
610:04 - can you pin that as a comment or
610:06 - something no no no you
610:09 - can't no you should be able to somehow I
610:11 - don't know how though
610:14 - cool just Spam it in there
610:19 - chat okay guys camera
610:23 - guys we hope that you enjoyed it we do
610:28 - was pretty fun it's really really fun uh
610:32 - thank you guys so much for watching we
610:34 - love your face the link is going to be
610:36 - in the description the link to the
610:39 - GitHub repository is going to be in the
610:41 - description and I'm going to go eat some
610:43 - food and Advil uh my brain is about to
610:46 - explode I love you guys if you enjoyed
610:49 - it please like the video subscribe share
610:53 - the video before our YouTube channel
610:54 - dies and that's it we love you guys and
610:57 - uh we'll see you see you in the next
611:02 - video video video good
611:09 - [Music]
611:13 - bye hey you how's it going this is Cy
611:17 - from clever program.com in this video
611:19 - this is going to basically be the
611:21 - ultimate guide on how to become a
611:23 - successful python freelancer in
611:30 - [Music]
611:31 - 2019 I sat and I thought a lot about
611:34 - what were the exact steps that I took to
611:37 - be able to get there and how a lot of
611:40 - other successful developers went from
611:42 - complete zero to being able to even make
611:44 - six figures and Beyond as a python
611:46 - freelancer and I try to put them in this
611:48 - video for you in a step-by-step process
611:51 - so this video hopefully will serve as
611:53 - like a Manifesto that you can refer back
611:57 - to from time to time on your journey to
612:00 - becoming a developer now this video will
612:03 - be really helpful even if you're a
612:05 - complete beginner with let's say zero
612:08 - months of experience coding the 0 to 3
612:10 - months of experience coding I will also
612:13 - show you how to improve your income and
612:16 - become more successful as a freelancer
612:18 - even if you're more advanced all right
612:21 - this video will also answer some really
612:23 - important questions that people ask like
612:25 - people often ask me kazy I am a beginner
612:29 - or intermediate in Python Programming I
612:32 - have no prior work experience how do I
612:35 - actually start earning an income from
612:37 - coding so I want to address that
612:39 - question headon as well cuz I think
612:41 - that's very important especially a lot
612:43 - of people a lot of people are students
612:46 - in colleges so they don't have work
612:48 - experience how do they get their first
612:50 - internship how do they get their first
612:52 - freelancing job when people want to see
612:55 - prior experience so this video is going
612:58 - to help you obliterate that excuse and
613:01 - help you start earning an income in your
613:04 - first 3 months of coding now this is not
613:07 - like some getrich quick type of thing
613:10 - this is going to be a very detailed
613:11 - process that I'm going to lay out for
613:13 - you this is going to require a lot of
613:15 - hard work but this is the clearest
613:19 - step-by-step process that I've seen
613:21 - anyone ever explain so I want to do that
613:23 - for you and put it in this video now
613:27 - before we jump in the content of this
613:30 - video if you could just do please do me
613:31 - a favor because we put a lot of time and
613:34 - effort into making these videos for you
613:36 - guys so the best thing the best help we
613:39 - can get is if you could just even like
613:40 - the video uh And subscribe to the
613:43 - channel and make sure you hit that Bell
613:45 - notification next to the subscription
613:47 - button so then anytime we make a new
613:50 - video it'll come straight to you also I
613:53 - have something really incredible for you
613:55 - at the end of this video and I'm going
613:57 - to reveal to you so definitely you want
613:58 - to stay tuned in this entire video
614:02 - because that gift that I have for you
614:04 - you're really going to love with that
614:06 - said let's jump right into it hey this
614:08 - is Raf Cy from clever program.com and on
614:12 - this channel we help people become a
614:16 - successful Python freelancer and we help
614:18 - you go from zero to earning your first
614:21 - six figures as a python freelancer now
614:25 - this channel will help you break out of
614:27 - your 9-to-5 job work remotely and live
614:30 - life on your own terms so if that
614:32 - excites you again click that sub
614:34 - subscribe button and jump on this
614:36 - journey with us now let's jump into this
614:39 - video so I'm going to actually break it
614:41 - down in four steps on how to actually
614:44 - become a python freelancer step number
614:48 - one master the fundamentals of python
614:52 - what does it look like to master the
614:53 - fundamentals of the programming language
614:55 - python I look at it like this you don't
614:58 - have to have you don't have to be able
615:00 - to solve like super complex problems but
615:04 - you want to have some level of
615:05 - Competency so what are the things
615:08 - required there and how long does that
615:10 - actually
615:12 - take so let's break that down what that
615:15 - looks like is you start off by learning
615:17 - coding all right so you spend let's say
615:21 - 30 to 60 days learning programming and
615:26 - you learn the fundamentals of the
615:28 - programming language for example the
615:30 - basic structure in the syntax how does
615:33 - uh what are variables what are strengths
615:35 - how do if conditions work what are
615:37 - conditionals what are functions what are
615:39 - classes so like OB objectoriented
615:42 - programming as well now once you cover
615:45 - most of the basics of programming you
615:48 - should be able to solve problems like
615:52 - the fs buuz problem which almost every
615:54 - interview will ask you this challenges
615:57 - your you know a little bit of your
615:58 - critical thinking but it also challenges
616:01 - you in terms of okay do you know how
616:04 - additionals work in programming you
616:06 - should also be able to make games like
616:09 - Tic Tac Toe or rock paper scissors even
616:12 - if you can't make them from complete
616:13 - scratch that's okay because most
616:15 - developers aren't making anything almost
616:17 - ever from complete scratch you are
616:20 - actually referencing material from
616:22 - online but basically can you actually
616:24 - use every resource in your brain to put
616:27 - together this app by yourself so you
616:30 - should be able to put these apps
616:32 - together now once you can do
616:35 - these types of tasks I I believe it
616:37 - generally will take you one to two
616:39 - months and the reason I say that is even
616:42 - if you have just a few hours a week to
616:44 - spend you can actually learn these
616:46 - skills really well all right I have a
616:48 - free python course I'll pop that up over
616:50 - here is called Learn Python Programming
616:53 - by building projects and in that course
616:56 - we actually teach you how to actually
616:58 - learn programming from complete zero and
617:01 - it's a 5day course if you go really
617:03 - intensely into it so you can actually
617:05 - shorten your 30-day or 60-day cycle in
617:08 - as little as 5 days but that does mean
617:11 - that you're putting in probably 5 hours
617:14 - or 10 hours a day now if you can't put
617:17 - in 5 to 10 hours a day then just
617:19 - understand that it'll take you probably
617:21 - 30 to 60 days as a realistic time frame
617:24 - So within 30 to 60 days you should be
617:26 - able to understand the fundamentals of
617:28 - Python Master them and be able to build
617:31 - simple applications now once you've
617:33 - learned that let's move on to step two
617:36 - where you actually start earning an
617:38 - income so what does step two look like
617:41 - now let's break it down into uh
617:43 - something tangible now this actually
617:45 - came from when people kept asking me and
617:47 - I also kept asking myself when I was
617:50 - starting to uh freelance in my in my
617:52 - days I kept coming across this problem
617:55 - where I was a beginner in programming or
617:58 - inmediate I had like a few months of
617:59 - experience but I couldn't get
618:01 - freelancing jobs because they were
618:03 - really freaking hard and required a
618:06 - really difficult level of you know high
618:09 - level of expertise like if you go on
618:10 - upwork.com and you try to look up
618:13 - freelancing jobs and if you're a
618:14 - beginner or intermediate you're going to
618:16 - have a lot of difficulty being able to
618:18 - actually complete those tasks or
618:20 - complete those jobs also even some that
618:22 - I felt like maybe I could do those
618:24 - people didn't hire me because I didn't
618:26 - have relevant work experience to show
618:29 - them so I'm a beginner I don't have
618:31 - relevant work experience which meant
618:33 - then I couldn't actually go on to land
618:35 - these jobs that was a huge problem I
618:38 - thought how can I actually start earning
618:39 - an income is the only way that I have to
618:41 - wait three or 4 years of college get a
618:44 - degree and then start earning an income
618:47 - however when I actually looked around a
618:49 - lot of my friends who had gotten degrees
618:52 - even they weren't Landing jobs and a lot
618:55 - of my other friends were quitting their
618:56 - CS Majors because professors went from
618:59 - teaching you hello world and then next
619:00 - week you were making like a St
619:02 - stock trading app so the jump in the
619:06 - level of complexity was way too
619:08 - difficult so most of the people who were
619:10 - even graduating from college are
619:12 - essentially self-taught developers
619:14 - they're teaching themselves so first I
619:17 - thought okay I can't rely on college or
619:19 - the educational system to teach me
619:21 - programming because most of the people
619:23 - graduating are actually not relying on
619:25 - the school system they're teaching
619:26 - themselves and then they just come in
619:27 - Ace classes and then other people cheat
619:29 - off of their homework so that's what
619:32 - what's happening most of the times right
619:35 - so I thought okay if these people are
619:38 - teaching themselves I got to start
619:40 - teaching myself but I got to be able to
619:42 - find a way to earn an income before I
619:45 - actually started applying to places like
619:47 - up.com and then I thought I came up with
619:50 - what if I start teaching people what I
619:52 - know so far so with my 30 to 60 days of
619:55 - experience coding what I realized was
619:59 - majority of the People by definition are
620:01 - beginners who trying to learn most of
620:03 - the people people have very little
620:05 - knowledge of coding and there's a mass
620:08 - Market looking to learn programming and
620:11 - if you have 30 to 60 days of experience
620:13 - you're you're like one or 10 steps ahead
620:15 - of most people most people who would pay
620:18 - you anywhere between $25 an hour to $100
620:23 - an hour or more for you teaching them
620:26 - programming so that's where I actually
620:29 - started I went to a platform called wi
620:31 - isand.com and I actually made a profile
620:34 - on there and I also went to a platform
620:37 - called takelessons.com and I made a
620:39 - profile on there once I made a profile
620:41 - on there what ended up happening was
620:44 - over time I actually got clients right
620:47 - from wis.com and takelessons.com that
620:50 - started hitting me up and started
620:52 - scheduling lessons with me I set my
620:54 - hourly rate at $35 an hour and my first
620:57 - lesson I believe I got in
621:00 - 2016 December something like that I'll
621:02 - try to put a screenshot
621:04 - here so you guys can see and follow
621:07 - along and that was actually freaking
621:10 - mindblowing I'm I'm like okay this is
621:13 - insane because this is possible and
621:15 - people are paying me that much when I
621:17 - walked into that lesson to teach this
621:19 - person programming cuz he said something
621:21 - like he's working on a final exam for
621:23 - coding so when I came in I was actually
621:25 - really intimidated I thought I couldn't
621:27 - help this person but then I thought okay
621:29 - if I can't help this person what I can
621:32 - do at least is I can try to help this
621:34 - person and if I really can't at the end
621:36 - of the day I'll just refund him so
621:38 - that's what I did I just went in the
621:40 - lesson took place at Starbucks and we
621:42 - just casually sat there and I helped him
621:46 - with his assignment and there were some
621:48 - parts which I couldn't figure out so I
621:50 - told him I'll actually work on it in my
621:52 - own time he thought that lesson was
621:54 - super helpful cuz we were trying to
621:56 - figure out things together at the same
621:58 - time and then once I left I actually
622:00 - figured out the rest of the problem on
622:02 - my own and it ended up being not so
622:04 - complicated what I realized was those 30
622:07 - to 60 days that I actually spent
622:08 - learning on my own most people aren't
622:10 - ever learning programming on their own
622:12 - they're just doing the college
622:13 - assignments and they're spending bare
622:15 - minimum amount of time learning coding
622:17 - which means that most of the times they
622:19 - can regurgitate information they can
622:22 - regurgitate like or just get through
622:24 - their homework assignment but they don't
622:26 - actually understand how most of these
622:27 - things work whereas when you teach
622:29 - yourself you're really able to actually
622:31 - do these projects cuz you learn how to
622:33 - think critically I my mind was blown
622:35 - that I was actually able to help this
622:37 - person and charge $35 an hour for My
622:39 - First Student in under 2 months of
622:42 - experience then I asked myself the
622:43 - question can I repeat this process I
622:46 - started repeating this process and I
622:47 - started Landing multiple clients so if
622:49 - you do the math if even one student is
622:51 - doing two hours with me every week
622:54 - that's
622:54 - $70 per student and me actually learning
622:57 - programming over the course of a month
623:00 - that comes out to be
623:02 - $280 per student okay over the course of
623:06 - a year now that comes out to be you know
623:09 - over
623:11 - $2,000 with just one client and then I
623:14 - thought okay what are some levers here
623:16 - that I could change one I can get one
623:19 - client that means if I can keep them for
623:21 - a year that's $2,000 plus maybe even
623:25 - $33,000 the second Le lever that I could
623:28 - change and play around with is
623:30 - increasing my hourly rate with each
623:33 - client
623:34 - so if I doubled my rate with the
623:36 - particular client or I got a new client
623:38 - at Double rate then that would mean I
623:41 - double my income by the end of the year
623:44 - so I'm like okay let's test some of this
623:47 - stuff out so the first thing I decided
623:48 - to do was instead of doubling my rate
623:51 - with a client I got a new client at
623:54 - $50 an hour so now I had two clients one
623:58 - at $35 an hour and one at $50 an hour so
624:03 - with the two of these clients now my
624:06 - income went close to like $400 or $500 a
624:10 - month then the next client I got I got
624:12 - for $75 an hour because at this point
624:16 - now I started to get uh reviews and
624:19 - testimonials on my profile which make
624:21 - you look awesome I had a great profile
624:24 - as well and more of these clients
624:26 - started working with me so over the
624:29 - course of a month my income ended up
624:31 - going from you know when I started it
624:33 - was $180 and then it ended up going to,
624:37 - my first $1,000 a month I increased it
624:40 - to $1,500 a month and now another thing
624:42 - that I want to tell you that's really
624:44 - important to understand here is that not
624:45 - only was I actually increasing my income
624:48 - but keep in mind that I was doing only a
624:52 - few hours a week working with the people
624:55 - that I really enjoyed working with I
624:57 - didn't have any boss
625:00 - bye I oh no no that's okay stock
625:04 - everything's good you didn't miss
625:05 - anything to this perfect you're awesome
625:06 - thank you so much appreciate
625:09 - it I didn't have any boss I was actually
625:12 - able to work by myself some of the
625:15 - clients I would meet in places that I
625:17 - loved going to like Starbucks or some of
625:20 - the clients I met online so I didn't
625:23 - actually even have to travel for them I
625:25 - got to choose my own schedule I can
625:28 - travel anywhere I wanted and I was still
625:30 - earning an income and one of the most
625:32 - important things on mention here is that
625:34 - it was the fastest way to grow my skill
625:38 - set in coding because every project and
625:41 - every student I was taking on everyone
625:44 - had assignments that would challenge me
625:47 - and grow my skill set so I was improving
625:50 - at a rapid Pace while earning an income
625:53 - and over the course of 6 months to a
625:55 - year I actually was able to scale from
625:59 - just having a few clients to having over
626:02 - 20 or 30 clients clients and I was able
626:05 - to earn over $30 to $40,000 a year and
626:09 - eventually I scaled my uh just my
626:11 - coaching and tutoring all the way to70
626:15 - to $80,000 or Beyond every year all
626:18 - right now this took time and effort and
626:20 - a lot of systematic work but it was
626:22 - definitely worth it and it it made me go
626:26 - if I want to freance I can choose to
626:29 - freelance or I can actually be doing
626:31 - this earning a great income and having
626:34 - massive and Deep Impact in people's
626:35 - lives because there were students who
626:37 - were going to coding Booth camps that
626:39 - needed my help there were students who
626:41 - were you know going to high school or
626:44 - college that needed my help or there
626:46 - were people who were developers that
626:48 - came to work with me so they could
626:50 - actually get help in their own jobs so
626:52 - the demand for this was massive so this
626:55 - is Step number two I know we went really
626:58 - deep into it but I want to emphasize how
627:00 - that this is the secret sauce the secret
627:03 - St step that just nobody ever mentions I
627:06 - firmly believe this is one of the most
627:08 - important gaps that'll take you from
627:10 - having no experience being a beginner to
627:12 - then going to that step of becoming a
627:14 - freelancer other benefits of this I want
627:16 - to mention are you're going to have
627:18 - testimonials you're going to learn how
627:20 - to reach out to clients you're going to
627:22 - learn how to land clients you're going
627:24 - to learn how to retain clients you'll
627:26 - learn how to work with clients over the
627:29 - course of 3 months 6 months a year these
627:31 - are incredibly powerful skills
627:34 - that once you become a better and a
627:36 - stronger developer and you actually
627:37 - start going out to freelance either with
627:40 - local clients or you go to upwork.com to
627:43 - freelance you'll be able to leverage all
627:45 - of these skills also you'll be able to
627:47 - leverage the fact that you have so many
627:49 - testimonials and experience in working
627:52 - with python and you can actually share
627:54 - that and that will qualify you to be
627:56 - able to work with other people all right
627:59 - you have experience now working on
628:01 - multiple projects that other people
628:03 - were're working on you have testimonials
628:05 - from people who are learning Python and
628:08 - they give you test these testimonials
628:09 - that you can show off to a potential new
628:11 - client or Prospect uh again this was
628:14 - just step two now we're going to move on
628:17 - to step number three step number three
628:21 - is build real world projects all right
628:24 - now before we get to step four which is
628:27 - which I'm going to talk about how to
628:28 - actually freelance and earn an income in
628:30 - Step number three we're going to talk
628:32 - about the power power of building real
628:35 - world projects because before you jump
628:38 - to becoming a freelancer you actually
628:40 - now need a lot more technical aptitude
628:43 - when it comes to coding and you need
628:45 - real world projects that you can then
628:48 - show to your future clients all right so
628:50 - you have developed a skill sets of so
628:53 - far okay if you're following on this
628:55 - journey you have developed a skill set
628:56 - of retaining clients of Landing clients
629:00 - of negotiating with clients of being
629:02 - able to charge premium pricing of
629:06 - learning how to deliver value you have
629:09 - testimonials you have experience working
629:12 - with python with other people so you
629:15 - have all this at this point but now what
629:17 - you need is you need to be able to
629:18 - actually just increase your skill set
629:20 - and have a portfolio that you can show
629:23 - to people all right so this stage is
629:26 - actually going to take you quite this is
629:28 - going to be the most difficult stage so
629:31 - to speak okay the transition between
629:33 - going from you know a python instructor
629:37 - into then freelancing with python but
629:40 - what this requires is for you to build
629:43 - practical projects and build lots of
629:45 - them okay so you're going to be
629:47 - constantly learning programming so I
629:49 - would say 20% of your time will be
629:53 - learning new skills in programming and
629:55 - 80% of your time will be actually
629:57 - building projects that you can put on
629:59 - your portfolio so you're just beefing up
630:01 - your portfolio and project base here but
630:04 - what I want you to keep in mind is you
630:06 - don't want to just work on random ass
630:08 - projects like going to a cs50 course and
630:11 - taking it which by the way is a great
630:13 - course if you want to take it like go
630:14 - ahead cs50 is awesome but what I mean is
630:17 - try not to have a shotgun approach
630:20 - because you're not going to be able to
630:21 - do really well when you transition over
630:23 - to freelancing because it's much better
630:25 - to have get really deeply technical in a
630:29 - certain skill set rather than have like
630:33 - 50 different skills in programming and
630:35 - then just be mediocre at everyone but
630:37 - it's better to be more Niche and more
630:40 - jacked you know in a specific skill set
630:43 - so what I would recommend for example is
630:45 - go on upwork.com and look at the jobs
630:49 - that are there okay so go on upwork.com
630:51 - go to the search box and hit type in you
630:54 - know Python and then scroll through the
630:56 - jobs so go and look at the different
630:59 - jobs that exist you want to look at jobs
631:01 - that have a skill level of let's say
631:04 - easy to intermediate so that's something
631:06 - you should be able to do within you know
631:08 - in your first between
631:11 - your 4 months of coding experience 4 to
631:15 - 12 months of coding experience okay so
631:17 - you want to look at those types of tasks
631:20 - so what do I mean let's say you go
631:21 - online and you see something crazy like
631:24 - build a you know application that has a
631:28 - redundant storage and it can serve to
631:31 - over 1 million users every month and it
631:33 - has a difficulty rating of expert for
631:35 - now that's a no that's a type of skill
631:38 - that's going to take you like 5 years to
631:39 - develop or more so you want to focus on
631:42 - something like maybe it's a $300
631:45 - freelancing task or $500 freelancing
631:47 - task that actually requires web scraping
631:50 - abilities to go to a website and get all
631:53 - of the PDF links from there or it
631:55 - requires you to go to eBay and get all
631:58 - the feature deals from eBay and put it
632:00 - in Excel sheet now that's a much more
632:03 - doable project and that actually doesn't
632:05 - take that much time for you you could
632:07 - literally go to one of our YouTube
632:09 - videos on web scraping learn that
632:12 - specific skill set practice it over the
632:14 - course of a few weeks or days and be
632:17 - able to land a client you know with a
632:19 - freelancing job you want to make sure
632:22 - that as you're in this phase three of
632:25 - building real world projects research on
632:27 - upwork.com what are the types of
632:30 - projects that you can see yourself doing
632:32 - what are the that you could see yourself
632:34 - doing in a shorter period of time and
632:37 - then plan your learning around what's
632:40 - actually relevant and what people are
632:42 - paying for right now so if you
632:45 - constantly see these web scraping jobs
632:46 - and it's interest you then what you want
632:49 - to do is you want to come back to the
632:50 - drawing board and you actually want to
632:52 - spend your time learning web scraping
632:56 - skills so you want to develop Deep Web
632:59 - scraping skills go through web scraping
633:01 - tutorials build web scraping projects so
633:04 - then you when you go to that specific
633:05 - client in the future on upwork.com or
633:08 - another client on upwork.com that
633:11 - requires you to do web scraping you can
633:13 - just refer them back to your work on web
633:16 - scraping and be like look at my
633:18 - portfolio I'm a web scraping expert and
633:21 - I can help you with your task if you're
633:22 - interested in doing stuff with regular
633:24 - expressions or you're doing stuff with
633:26 - data mining or you're doing uh python
633:29 - stuff with web development you know
633:31 - you're interested in the web devel vment
633:33 - jobs on upwork then go back to the
633:35 - drawing board and uh practice all your
633:38 - learning around web development okay we
633:41 - even have a course called profitable
633:43 - programmer that teaches you how to be a
633:45 - full stack web developer with python so
633:47 - practice and go through learning those
633:51 - web development skills and then once you
633:53 - develop those web development skills and
633:55 - you build let's say python projects
633:57 - using Jango then you host those projects
634:00 - with Heroku and you learn how databases
634:03 - work like postgress and stuff now you're
634:05 - becoming better at web development right
634:07 - and you're building a portfolio so then
634:09 - in a few months you could go right back
634:12 - on upwork.com and actually apply for
634:14 - that job and show them your experience
634:17 - show them your testimonials on let's say
634:19 - WIS an or takelessons.com and go look at
634:25 - this I can offer you the skills that I
634:27 - have of building these projects and look
634:29 - at what my clients say about me that's
634:32 - everything a person who's looking to
634:34 - hire you needs to know once they see
634:36 - that it's a much easier sell on your end
634:39 - and you could position yourself in a
634:41 - really premium way and charge anywhere
634:43 - from $50 an hour to $300 an hour okay if
634:48 - you're more advanced than 300 but going
634:51 - from 50 to $150 an hour might take you 1
634:54 - to two years okay it's a doable
634:56 - step-by-step process especially if you
634:59 - laser focus on the skill sets that are
635:02 - are in the job market currently right
635:06 - now so this is very important uh in
635:08 - terms of you look at the relevant market
635:11 - and then you go and plan your learning
635:13 - around it all right spend a lot of
635:15 -  time around looking at what kind
635:17 - of jobs exist cuz think about this how
635:20 - backwards is school think about the
635:22 - school system the thing that determines
635:24 - your whole life your major they only
635:26 - spend a few days on it when I was going
635:28 - to college I had meetings with my
635:30 - counselor like probably once or twice a
635:32 - whole year but those meetings determined
635:35 - 3 months or 6 months of my life how
635:37 - absurd is that that the thing that
635:40 - required that's going to determine the 3
635:42 - to 6 months of my life is essentially
635:44 - just 1 hour long or a 30 minute long
635:46 - quick meeting with a counselor that
635:49 - hasn't figured out their own life and
635:51 - are here and are handing out advice to
635:55 - every single student like thousands of
635:57 - students with backtack appointments and
636:00 - they're determining your life over the
636:01 - course of like a 20 or 30 minute or an
636:03 - hour long meeting with you and that's
636:05 - all the time that gets spent on it but
636:07 - then all the other time is spent
636:09 - actually going to classes and putting in
636:11 - the grunt work where I think it should
636:13 - almost be the opposite cuz your future
636:15 - is the most important thing to plan for
636:17 - it's almost like you're on a conveyor
636:19 - belt okay there are multiple conveyor
636:21 - belts one belt leads you into the depths
636:24 - of Hell the other conveyor belt leads
636:27 - you into heaven now if you actually
636:29 - spend a lot of time thinking about okay
636:31 - this one leads me to hell this one leads
636:33 - me to Heaven you quickly do a quick
636:34 - Google research which one is more
636:37 - pleasurable and you find out it's heaven
636:39 - then you get put on the conveyor belt
636:41 - and then you keep going right but you
636:43 - have to put in the work to do that
636:45 - research but often times if you don't do
636:47 - the research correctly then you actually
636:49 - might get put on the track that's going
636:50 - to put you in hell in a lot of pain and
636:53 - you know a major that you never really
636:55 - wanted and that's where you're going to
636:56 - get on the conveyor belt and start going
636:58 - okay and then it determines the rest of
637:00 - your life so the school system system is
637:03 - really backwards I think they should
637:04 - spend like 20 or 30% of the time
637:06 - planning your future and showing you
637:08 - specifically what kind of jobs will you
637:11 - be doing what kind of skills do you need
637:13 - to learn now to be able to get the jobs
637:16 - you want okay they don't actually focus
637:18 - on the jobs which is the ultimate
637:19 - outcome that you want so you need to
637:21 - focus on that so how can we apply fix
637:23 - that school broken School model and fix
637:26 - it in the python freelancing World
637:29 - here's what I would suggest okay here's
637:31 - what you need to actually do you need to
637:33 - look at the relevant projects and spend
637:35 - 20 to 30% of the time you know on your
637:38 - freaking iPhone okay I don't have my
637:40 - iPhone with me but on your freaking
637:42 - iPhone get the app upwork.com put it on
637:45 - your homepage right next to
637:48 - whatever other like the text messaging
637:50 - app that you have or the phone call icon
637:52 - that you have okay put it on your
637:54 - homepage make it something fun make it
637:56 - something exciting so then you click on
637:58 - it and while you're in the bathroom or
638:00 - you're waiting for someone in line or or
638:03 - you're just hanging out you click on the
638:05 - upwork.com app and you just see what
638:07 - kind of projects and things that people
638:09 - are offering real money for so once you
638:12 - develop that habit and you get excited
638:13 - by it automatically you're going to be
638:15 - spending 10 to 20% of your time actually
638:17 - looking at what skills you need to
638:19 - develop and then you wrap and map your
638:22 - skills the skills that you need to
638:23 - develop around right around the real
638:28 - world job market on the things that you
638:31 - need to be able to do all right so this
638:33 - makes your learning hyper relevant and
638:36 - it makes your skill set hyper relevant
638:38 - whereas for example if you go to a
638:40 - college for four years they have
638:42 - outdated curriculum they don't focus on
638:44 - what's in the job market and so often
638:47 - times when people graduate after 4 years
638:49 - they have $60,000 or more of debt with
638:52 - outdated skill set that you can get
638:55 - freelancing jobs for and you often can't
638:57 - get full-time jobs for either cuz in the
638:59 - software development World things move
639:01 - fast
639:03 - so wouldn't it be cool if you were just
639:04 - on top of it right by being able to see
639:07 - what's happening in the market all the
639:08 - time so that is Step number three which
639:11 - is massively massively important just to
639:14 - wrap it up step number three is build
639:16 - real world projects around Real World
639:20 - Market now we're going to get into our
639:23 - really exciting part step number four
639:27 - how to start earning an income as a
639:29 - python freelancer up until now what have
639:32 - be done step number one was mastering
639:34 - the basics of python so you can get
639:36 - ready for tutoring step number two was
639:39 - tutor with python and you can actually
639:41 - scale your income from and you can
639:42 - actually be a complete beginner with
639:44 - less than two months or 3 months of
639:45 - experience and you can start scaling
639:47 - your income from $0 an hour to
639:50 - $60,000 sorry $0 a year to $60,000 a
639:54 - year or more I know tons of tutors
639:56 - myself well one is me one is my friend
639:59 - tenson who actually made over $100,000 a
640:02 - year just just tutoring all right and I
640:06 - know other tutors online that are making
640:09 - over $100,000 a year so you can make six
640:11 - figures from just tutoring if you really
640:13 - wanted to again it's not easy it takes a
640:16 - lot of work it takes discipline and
640:19 - effort and consistency so I please
640:22 - understand that it's not something
640:23 - that's easy but it's a simple process if
640:26 - you follow it all right now so those
640:28 - things you did in step two right step
640:30 - three was about building real World
640:32 - projects around real market now step
640:34 - four is this step that we're talking
640:37 - about right now freelancing with python
640:39 - so now that you've done all of those
640:41 - things you have the testimonials you
640:43 - have the reviews that you need you have
640:45 - completed the real world projects and
640:47 - put them on your portfolio and you've
640:49 - niched down so instead of like doing a
640:51 - web scraping project and a data mining
640:54 - project and like a data science project
640:57 - and a TI Tac Toe project like instead of
640:59 - spreading yourself thin like that you've
641:01 - actually worked on like maybe let's say
641:04 - all web scraping projects okay so you've
641:07 - specifically went and took web scraping
641:10 - courses on let's say corsera or Udacity
641:12 - or whatever you specifically went and
641:14 - learned web scraping techniques from you
641:17 - know YouTube and now you are ready to go
641:20 - and become a start as a webscraper using
641:23 - python on upwork.com now I'm going to
641:26 - give you guys tips that are going to be
641:28 - helpful for the people who are getting
641:30 - their jobs the first time and these
641:33 - skills are also going to be massively
641:35 - helpful for anybody who is a more
641:38 - advanced developer who is ready to
641:40 - actually start freelancing right now so
641:43 - please pay attention to this cuz this
641:44 - could be a gold mine for you all right
641:47 - so number one you need to have a solid
641:51 - profile now I'm not going to go too much
641:53 - into details about profiles I'm just
641:55 - going to hit on like the top parts of
641:57 - the profile one of the most important
641:59 - things you need is an epic head shot now
642:03 - I'm not giving this to you as some
642:04 -  generic blogging 101 advice all
642:08 - right this is coming from experience and
642:10 - this is coming from looking at some of
642:12 - the best developers in the world and I'm
642:14 - trying to share this with you cuz from a
642:17 - lot of a position of pain too cuz when I
642:19 - didn't do this right it literally cut my
642:22 - income in half and I doubled my Revenue
642:25 - by just having a right head shot what
642:28 - does a right head shot look like this is
642:30 - what a not right or a wrong head shot
642:33 - looks like okay most people's pictures
642:34 - are going to be like that or they're
642:37 - going to be like something weird like
642:39 - only their forehead is showing but like
642:41 - the rest of the thing is
642:43 - blurry you have no idea how many
642:45 - potential clients are going to turn off
642:47 - by that because people are trying to
642:48 - work with human beings they don't just
642:51 - want the job done they want to work with
642:53 - a human being that they like who can
642:55 - then do that job so your skill set is
642:58 - almost secondary the first thing they
643:00 - see is a human if they that they like or
643:03 - not all right so this is a pretty
643:04 - important step so a normal
643:09 - like that's it all right that's it that
643:12 - just just a little
643:14 - smile okay or you can even have like the
643:17 - person who's taking your photo with the
643:18 - iPhone okay on iPhone you can actually
643:20 - use this Mode called portrait mode which
643:23 - is fantastic just have a little bit of
643:26 - light on you you could take your own
643:27 - photo or you could give it to somebody
643:29 - else they could take your photo and done
643:31 - you have a professional head shot just
643:33 - go outside you have a sunlight hitting
643:35 - your face take a freaking head shot okay
643:38 - this is one of the craziest most
643:40 - important things for a freelancer
643:42 - seriously okay now that you have that
643:45 - head shot that's important other things
643:47 - you obviously need are what value you
643:49 - can provide to people so have your
643:51 - portfolio and your projects there and
643:53 - have your testimonials there uh if you
643:56 - can if you can bring them from WIS an
643:58 - and uh take lessons or or some people
644:01 - people you've met in real life if you
644:03 - can get their testimonials on this
644:05 - platform that's going to be phenomenal
644:07 - for you okay let's say your profile is
644:10 - complete what's next when you reach out
644:12 - to people one thing to never ever ever
644:15 - do which I see almost every freelancer
644:18 - out there a lot of Freelancers out there
644:20 - doing cuz I have a lot of experience
644:22 - hiring Freelancers I worked with or
644:24 - probably 20 or 30 people in just the
644:27 - last one or two years of uh running my
644:29 - business clever programmer so I've hired
644:31 - lot of software developers uh to do
644:34 - consulting or to help build stuff at
644:36 - clever programmer I've hired people uh
644:39 - you know who do are Google analytics our
644:41 - Facebook analytics who run Facebook ads
644:44 - graphic designers virtual assistants
644:47 - software um I've said software
644:49 - developers uh video producers so I've
644:51 - like worked with the facet of people so
644:53 - I have experience looking through
644:55 - resumes who do we need to hire who do we
644:57 - not need to hire and I can tell you from
644:59 - personal experience the biggest turnoff
645:01 - is when I get a generic response that I
645:03 - know somebody's copied and pasted so
645:06 - often times on platforms like up.com
645:09 - it'll look like Dear Sir blah blah blah
645:11 - maybe they'll just have your name and
645:13 - then they'll be like your project seems
645:14 - very interesting and then they just rant
645:17 - about what they what they do okay and
645:20 - it'll be like okay why are you telling
645:22 - me that you do WordPress and Squarespace
645:25 - and Wicks and all this when I
645:28 - specifically wanted help with gole
645:31 - Google analytics let's say or I
645:33 - specifically wanted help with this
645:36 - python project don't copy paste ever it
645:39 - is not a numbers game let me just fix
645:43 - that for you right now reaching out to
645:45 - people is not a numbers game okay you
645:47 - are an idiot if you think it's a
645:50 - numbers game it's not so let me just
645:52 - solve that problem for you all right if
645:54 - you want to you can reach out to 100,000
645:57 - high level people with just some copy
645:58 - paste answer or somebody else can reach
646:01 - reach out to like 10 people with a
646:04 - really solid customized and personalized
646:07 - message and they'll get back more
646:09 - responses that'll actually lead to
646:11 - something epic all right so please don't
646:13 - do copy pasting big big mistake as a
646:15 - freelancer what you want to do instead
646:17 - is actually send a personal message
646:20 - let's say somebody's project is and I'll
646:23 - give you something specific right here
646:24 - on the Fly cuz I do this a lot and I do
646:27 - this in my business a lot and I
646:28 - personally send out email newsletters to
646:32 - you know 70,000 100,000 people and I
646:34 - know what gets more opens and what gets
646:37 - less opens I reach out to prospects and
646:40 - I reach out to people and I know what
646:42 - they like and what they don't like so
646:44 - we're doing a lot of testing here so for
646:46 - example here's something you could do
646:48 - that would be really helpful somebody
646:49 - say somebody's project is web scraping
646:53 - PDF links okay you want to reach out to
646:55 - them make use this thing called us
646:57 - loom.com uh this is an epic resource so
647:01 - write this down or go and install it
647:03 - right now in your Chrome it's called use
647:05 - loom.com and it you can just click it
647:08 - and it allows you to make a video right
647:10 - away if you send a video message to
647:12 - someone you're automatically like 90%
647:14 - more likely for them to actually see it
647:17 - if you send a written message which is
647:19 - totally fine as well but automatically
647:22 - your chances are just so much lower of
647:25 - that person speaking with you cuz in
647:27 - video you can tell so much about that
647:29 - person like I can immediately tell
647:30 - whether I like you or not I can
647:32 - immediately tell your level of
647:34 - reliability um if you're a person who I
647:37 - would like like if you're humble maybe
647:39 - or if you know what you're talking about
647:42 - or how friendly you are I can
647:44 - immediately see those things so use that
647:47 - to your advantage and it also requires
647:49 - less work on your end you could sit
647:51 - there and write this letter that'll take
647:53 - you forever or you could be like hit the
647:55 - use Loom button and just go hey my name
647:57 - is John and I can help you with your I
648:01 - saw that you have a web scraping project
648:03 - where you want to get PDF links that's
648:05 - really cool because I've actually worked
648:07 - on a project like this let me show you
648:09 - real quick and then while you're
648:10 - screencasting you just quickly show them
648:12 - your project for 10 seconds and just be
648:14 - like yeah it seems similar I can I can
648:17 - definitely do this for you sir and it
648:19 - would be awesome if I could just have 10
648:20 - minutes of your time and we could just
648:22 - chat looking forward to it thank you
648:25 - John all right now this video message
648:29 - okay you could link it to them in your
648:32 - uh initial Outreach of your uh to the
648:35 - prospect okay so you could say you know
648:37 - in terms of typing cuz the first thing
648:38 - is they're going to see is a written
648:40 - message so you could just say those
648:42 - things hey I put this uh I saw your
648:44 - project the web scraping project you
648:46 - have for getting all the PDF links and
648:49 - I've done some similar things to this
648:52 - and I've actually put together this
648:53 - personalized video just for you and
648:55 - whatever the client's name is let's say
648:57 - the client's name is Bob I've put
648:58 - together this personalized video here
649:00 - for you Bob put the link to the video
649:03 - and then just go and uh if you have like
649:05 - 10 minutes to speak I would love to chat
649:07 - with you but you know here's my resume
649:10 - here my testimonials I've done similar
649:11 - projects I can definitely help you with
649:13 - this so make it very precise and then do
649:15 - something with low commitment right if
649:17 - you do 5 minutes or 10 minutes that's
649:19 - really easy so for somebody to just get
649:21 - on a 5 minute or 10 minute call
649:23 - personally in my experience I hire
649:25 - usually like almost every like two or
649:28 - three or the fourth Max almost interview
649:31 - that person I'll just hire cuz otherwise
649:32 - it takes way too much time so most of
649:35 - the people that are even posting jobs on
649:37 - up.com are usually these
649:40 - solopreneur business owners that are
649:43 - trying to hire a contractor to get
649:45 - done and move on they're not actually
649:47 - going through the regular full hiring
649:50 - process that you know company that's
649:53 - looking for a full-time developer goes
649:55 - through that's going to be a much more
649:57 - rigorous and a systematic process it's
649:59 - maybe going to require multiple
650:01 - interviews there's going to be a
650:02 - technical screening there's going to be
650:04 - a culture fit screening then there's
650:07 - going to be like a negotiation phase
650:10 - that is what like big companies will do
650:12 - but somebody who's looking for an
650:13 - independent contractor they just want to
650:15 - get on a call with you they just want to
650:16 - see your face and quickly make a
650:18 - decision whether you're going to be able
650:20 - to do their job or not so the more you
650:22 - show of yourself the more personalized
650:24 - you make your message and if you put a
650:27 - video in there and you show in a
650:29 - relevant way you're going to
650:31 - kill it like it's not even going to be
650:33 - close the amount of responses you're
650:35 - going to get versus some other random
650:37 - person all right somebody else who's
650:38 - just doing the same thing every other
650:40 - freelancer is doing this is also what's
650:42 - going to allow you to be able to
650:44 - actually charge a much higher income and
650:46 - command much more premium pricing than
650:50 - everyone else okay because people
650:51 - constantly ask how do I compete with
650:53 - somebody in
650:56 - Indonesia charging 69 cents an hour
651:01 - um for coding all right that's how
651:05 - you're going to compete with somebody in
651:06 - Indonesia charging 69 cents an hour by
651:09 - being more premium by being reliable by
651:12 - being somebody who the other person can
651:14 - look at and go this person will actually
651:17 - help me complete this project right you
651:19 - can also show your communication skills
651:22 - because most other developers their
651:23 - communication skills lack okay and
651:26 - people I can't emphasize the soft skills
651:29 - part of development enough that's the
651:31 - most underrated part which is actually
651:34 - going to bring you the most amount of
651:36 - value even if you look at statistics
651:38 - online this a 80% of your success in
651:40 - your career comes from your soft skills
651:43 - and how likable you are because you're
651:46 - working with human beings and 20% of
651:48 - your success in your career is actually
651:50 - going to come from your technical
651:52 - aptitude in any given field especially
651:54 - in programming so now that is those are
651:58 - some tips on how you can actually get
652:00 - these people to respond you okay and if
652:02 - you've completed the first three steps
652:04 - that I've outlined for you then going
652:06 - into step four freelancing phase is
652:07 - going to be much easier other tips I'm
652:09 - going to give you on freelancing is
652:11 - start with smaller projects and then
652:13 - build up so don't immediately start
652:15 - doing trying to do like a $5,000
652:18 - contract or some like really big
652:20 - challenging project that you're like oh
652:22 - man maybe I can't do it start with a
652:25 - $100 project or a $300 project then move
652:29 - on to a $500 project and $1,000 project
652:31 - and then something really smart that you
652:33 - can do right is let's say you are
652:36 - working on a project where you are
652:37 - making $50 an hour and it's a really
652:40 - challenging project that you don't think
652:41 - you can do now this is going to be the
652:43 - majority of the scenarios when it comes
652:46 - to freelancing and all this type of job
652:48 - related stuff especially when you're not
652:51 - as advanced as freaking Raymond hinger
652:53 - or you know uh Russo rusam gido the guy
652:57 - who made python if you're not as
652:59 - advanced as them or really really high
653:01 - level developers most projects are going
653:04 - to be a challenge for you right what you
653:06 - can do is if you're making $50 an hour
653:08 - and you feel like it's going to be a
653:09 - challenging project you could hire
653:12 - somebody on let's say Cod mentor. which
653:15 - is a great platform where you can hire
653:17 - developers on demand to Mentor you and
653:19 - you could pay that developer 25 30 3540
653:23 - or even $50 an hour to help you on
653:27 - certain tasks and for you to understand
653:30 - how it works so maybe you will work with
653:32 - that other developer for the first few
653:34 - hours or maybe even a week and for the
653:36 - first week let's say you don't make any
653:38 - money of working on this project because
653:40 - all the money you're making you're
653:42 - essentially giving it to this other
653:43 - developer to learn these skill sets and
653:46 - to internalize them but then week two
653:48 - week three week four and over the course
653:50 - of a few months or a year working with
653:52 - this particular client now you're just
653:55 - making fullon profit of $50 an hour you
653:59 - see what I'm saying so initially you're
654:01 - making an investment to hone your own
654:04 - skills the company's paying you you're
654:06 - putting that money into a developer
654:07 - who's then teaching you these skills
654:09 - you're breaking even and then after a
654:11 - few weeks of learning from that
654:13 - developer now you can help them
654:15 - completely on your own cuz now you have
654:17 - internalized those skills so understand
654:20 - how to actually use help right that's
654:22 - what made Henry Ford so incredible he
654:26 - was in a court once and the lawyers were
654:29 - asking him all kinds of crazy questions
654:31 - to make him look really stupid like
654:33 - trivial questions like when was United
654:35 - States created or who is thee who was
654:37 - the president at a certain time or
654:39 - what's the capital of some other you
654:41 - know country and he got fed up and
654:44 - frustrated at one point and then he just
654:46 - looked at them and he said I can't
654:47 - answer these questions for you but I can
654:49 - pick up the phone in 5 minutes I'll find
654:51 - somebody who can that's the level of
654:53 - resourcefulness you want to have because
654:55 - one of the most one of the ultimate
654:57 - forms of procrastination is actually not
655:01 - asking for help trying to do everything
655:03 - yourself most developers fall victim to
655:06 - this they take some weird kind of pride
655:09 - in doing everything from scratch not
655:12 - leveraging help and this is very very
655:15 - selfish and this is the highest level of
655:18 - procrastination because they're doing
655:20 - this to build their own low self-esteem
655:22 - that they have about themselves so if
655:24 - they actually can do something from
655:26 - scratch completely then it will fulfill
655:28 - their very low self-esteem and they very
655:31 - low
655:32 - self-image all right whereas if they
655:34 - think about the client and the results
655:37 - that they're bringing the client you
655:38 - shouldn't give a about how you end
655:39 - up doing it as long as you can get your
655:41 - client the results that they need right
655:43 - so if your client needs a completed
655:46 - project I personally don't care if I
655:48 - have the ability to complete it from
655:50 - scratch or not I can hire like a
655:52 - developer from Philippine I can hire a
655:54 - developer from freaking Indonesia I can
655:56 - hire a developer from America as long as
655:58 - I'm profitable I'll put them together
656:01 - and make them complete the project and
656:03 - I'll deliver it to my client or I'll get
656:05 - help from them to learn these skills
656:07 - myself and then be able to do it and
656:08 - then deliver the end result to my client
656:11 - right ultimately that's all that matters
656:14 - Nothing Else Matters the end result for
656:17 - your client is what matters so
656:20 - understand that you're not as alone
656:23 - because what will stop you almost all is
656:25 - you look at each project and be like
656:26 - this is too hard I can't do it every
656:29 - project is going to feel like you can't
656:30 - do it that's why you have to apply for
656:32 - it get accepted and then if you can't do
656:35 - it hire help from platforms like code
656:39 - mentor. or even upwork or even WIS an
656:42 - you can hire a tutor for yourself have
656:44 - them teach you the skills on the job and
656:47 - then be able to complete the job so this
656:49 - is some really deep level stuff which is
656:51 - going to help you break past that
656:53 - barrier of I'm a beginner or I'm an
656:56 - intermediate how do I actually start
656:58 - getting clients as fast as possible how
657:00 - do I start earning an income what's the
657:03 - path for me because if you start earning
657:04 - an income quicker it'll allow you to
657:07 - actually spend more time learning the
657:09 - skills so then you can eventually get a
657:11 - full-time job if that's your goal or you
657:13 - can actually become a really highle
657:15 - freelancer or a really high level
657:17 - consultant and eventually you could even
657:20 - turn it into your own freelancing
657:22 - business where you have other developers
657:24 - under you and then they work for the
657:26 - clients that you have and you're the
657:28 - middleman and you keep the profit they
657:30 - do the work all right so you could turn
657:32 - it into a freelancing business for
657:34 - yourself as well but that's a really
657:36 - really advanced level step we covered a
657:39 - lot all right in this video I'm going to
657:41 - stop right here now let's just come back
657:44 - come back into our bodies and come back
657:46 - here so we covered a lot I hope that you
657:49 - really enjoyed what we covered I do hope
657:52 - that you leave a comment letting me know
657:53 - kind of what you thought about this
657:55 - video and maybe what were your biggest
657:57 - takeaways and if this was even helpful
658:00 - to you cuz I honestly don't know if this
658:02 - is helpful but I try to give it my heart
658:05 - and give you guys everything you would
658:07 - really need step by step to get to this
658:09 - process please also if you haven't
658:11 - already like this video And subscribe to
658:13 - the channel so you can get more tips on
658:15 - how to become a sixf fig python
658:18 - freelancer with that said thank you so
658:21 - much for being on this channel I love
658:23 - your face and as always this is Cy and
658:26 - I'll see you in the next video
658:32 - real quick before we continue smash that
658:35 - like button help us beat the YouTube
658:37 - algorithm by literally going and
658:39 - smashing that button we're trying to get
658:41 - to 10,000 likes if you could help us do
658:42 - that that' be fantastic I do want to let
658:44 - you know if you want to become a
658:46 - freelance developer I have a three-part
658:49 - master class for you it's absolutely
658:51 - free it's one of the best it's in the
658:53 - description below it's free go enjoy it
658:56 - you have nothing to lose sign up once
658:58 - you put in your email we give you all
659:00 - three videos go enjoy it with that said
659:03 - let's jump right into it what's up you
659:05 - guys this is Aaron and this is Frankie
659:08 - get rid of that and thank you for
659:10 - watching the python 2020 course um what
659:12 - we want to say is that we have another
659:13 - python course hosted on teachable which
659:15 - is a cleaner and better platform for
659:16 - learning things I think YouTube's kind
659:18 - of just like you know the YouTube's it's
659:19 - a free private course and we released it
659:22 - just so you could further solidify your
659:24 - python fundamentals so all you have to
659:26 - do to access to the private course is
659:28 - just go down to the description click on
659:29 - the link pop in your name and your email
659:30 - address and you'll be good to go so
659:32 - definitely check it out yeah guys we
659:34 - have more than 62,000 students
659:35 - registered in that course already so
659:37 - it's helped a lot of people um
659:39 - everything's going to be condensed into
659:40 - one particular website so it's going to
659:42 - help you a lot knowing what classes you
659:43 - already took from this course and what
659:45 - not and you can just access it whenever
659:47 - you want just click the link below and
659:50 - register with your email and we'll see
659:51 - you guys there
659:53 - peace
659:55 - peace all day
659:58 - man all day man I'm
660:01 - calling all day man know what I'm saying
660:04 - calling all day man know what I'm saying
660:06 - i' been calling what