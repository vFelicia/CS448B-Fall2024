00:00 - (bell dings)
00:02 - - Here are the four things I wish I knew
00:05 - when I started programming.
00:07 - So, without any further adieu,
let's jump right into it.
00:11 - Hey, what's up?
00:12 - This is Qazi from cleverprogrammer.com,
00:16 - also known as Papa Python.
00:17 - Now that you're here and
I have your attention,
00:19 - this video is gonna be awesome
and you're gonna love it.
00:21 - So let's jump right into it my friend.
00:24 - Here are the four things I wish I knew
00:27 - when I started programming.
00:29 - Number 1, programming is thinking.
00:33 - Programming is thinking.
00:40 - Now this is something I did not know
00:42 - and did not understand for a long time.
00:44 - How I got into programming
was my brother called me up.
00:47 - He's like, "Yo, Hadoop,
developers make $200,000 a year."
00:50 - I'm like, "Cool, I'm in."
00:51 - I started learning Hadoop, then I realized
00:53 - there's a prerequisite to
Hadoop called programming.
00:54 - That's how I got into programming,
00:56 - but once I discovered programming,
00:57 - I thought it was super fascinating
01:00 - and it was amazing because
01:02 - what it actually is is your thought.
01:04 - Whatever you conjure up here,
01:06 - you can actually turn
into some kind of reality,
01:09 - virtual reality.
01:10 - For example, the thing
that I think is really cool
01:12 - is when you enter Facebook,
01:14 - you're essentially entering
the brain of Mark Zuckerberg,
01:19 - or whoever was creating it,
01:21 - and the same thing that
happens with Twitter
01:23 - or any other platform you go to write,
01:24 - Instagram, whatever it may be,
01:26 - you're entering the brain
01:28 - of the human person who created it,
01:30 - which is really fascinating.
01:31 - So you can take anything you have here,
01:34 - and turn it into this tangible thing.
01:36 - So I wish I knew that,
01:37 - and I'll explain why I
wish I knew that, okay?
01:39 - And then, the second thing is that
01:41 - what programming is is thinking,
01:43 - and then all you have
to do is computer code
01:47 - or Python, right?
01:48 - What is that?
01:49 - Or JavaScript, what are these?
01:50 - How I think about it is the computer
01:53 - is this ultimately powerful genie
01:56 - that can grant you any wish you want
01:58 - as long as you can speak
to it in its own language.
02:02 - So, what is the computer's language?
02:05 - Well, the computer has a
few different languages.
02:06 - You have C, C++, C#, you have
JavaScript, Java, Python,
02:10 - and that's what languages are.
02:13 - It's this way to speak to the ultimate,
02:15 - most powerful genie that we know,
02:17 - ya know, that actually
exists on this planet,
02:20 - and then you tell that genie
02:21 - to do whatever you want it
to do, and then it does it
02:24 - but it all starts in thought.
02:25 - Now let's get a little
bit deeper into that,
02:27 - so for those of you who are programming,
02:29 - you can actually get
some benefit out of it.
02:31 - Now how this would actually
help you if you knew this
02:34 - is because when people are coding,
02:37 - they spend too much time on syntax
02:42 - and not enough time on
actual thinking, alright?
02:47 - They don't spend a lot of time on thinking
02:50 - and problem solving.
02:51 - So in the start, once you get
past very few basic things,
02:55 - such as, you have to learn
how if statement works,
02:59 - you have to learn how for loop works,
03:01 - you have to learn how a while
loop statement is written,
03:05 - but once you learn a few of those things,
03:07 - realize that the overall program
03:10 - that you're gonna build
is gonna be built up here
03:13 - and is gonna be a lot of thought.
03:15 - So what does that mean?
03:16 - That means that most of my time
03:17 - is actually not spent actually coding.
03:21 - My time is spent actually thinking a lot,
03:24 - so for example it might look like,
03:26 - "Okay I have to make a Django app
03:27 - so I'm gonna be using
the Django framework."
03:31 - Or, if I need a database, right?
03:34 - I'm like, "Oh I'm gonna have a database
03:36 - and this database is gonna
be hosted somewhere."
03:38 - But let's say you're doing
something simple, right?
03:40 - I'm imagining that most
of you watching this video
03:43 - are probably more beginners
than more advanced
03:45 - so this database stuff
might not make sense.
03:47 - But even if you're writing like, a game
03:51 - or you're writing a simple program,
03:53 - you need to be thinking about it more so.
03:55 - In one of my earlier
videos where I talk about
03:57 - I'm gonna pop it up right here,
03:59 - how to think and problem solve in coding.
04:01 - In that video, I talk about
how you take a big problem
04:04 - and you break it down into
different structures, right?
04:09 - You break it's layers
apart, so for example,
04:12 - if you have a Tic-Tac-Toe game,
04:15 - or a Rock, Paper, Scissors games,
04:17 - it's just different
problems all put together,
04:19 - so for Rock, Paper, Scissors,
04:21 - you have the problem of first determining
04:23 - between rock and scissor, who wins?
04:25 - Then you have a problem
determining between
04:27 - scissor and scissor, who wins?
04:29 - And between, you know, paper
and scissors, who wins?
04:32 - And all of those combinations, alright?
04:35 - So once you define all of
those combinations and rules,
04:38 - they you have a different
subset of problems.
04:40 - How do you make the game keep running?
04:43 - How do you make two players play?
04:45 - It's all different types
of different problems.
04:47 - What you should be doing
when you're starting coding,
04:51 - and here's a really, really big tip,
04:53 - is spending a lot of time problem solving.
04:58 - Once you understand the
problem is thinking,
05:02 - you need to learn that
you're not gonna improve
05:05 - in coding by learning new frameworks.
05:07 - You're not gonna improve in coding
05:10 - by learning new languages.
05:12 - You're not gonna improve in coding
05:13 - by constantly taking new courses
05:15 - and copying things and building them up.
05:17 - In the start, you're
gonna improve in coding
05:20 - if you actually spend time
learning how to problem solve.
05:25 - If you can start solving problems,
05:28 - you're now fixing the part of thinking,
05:30 - how to think logically.
05:32 - Then you can take that
05:33 - and bring it to any project you're doing
05:35 - and crush that project.
05:37 - So for example, you should use resources
05:39 - like HackerRank or Project Euler,
05:42 - and go there and actually
solve coding challenges
05:45 - and coding problems.
05:47 - So that's why I emphasize
programming is thinking.
05:50 - It's not syntax.
05:52 - It's not memorization.
05:53 - If you ever feel like
you can't remember stuff,
05:57 - it's because you didn't
understand it well enough.
06:00 - Also, this is day eight
06:02 - of the 30 day video
challenge that I'm doing,
06:04 - so if you want to be doing
the coding challenge with me
06:07 - every day until the 30 days,
then join me on this journey
06:10 - and you can follow me @cleverqazi
06:12 - where I'm gonna be documenting
all of this journey
06:16 - ya know, behind the scenes,
so add me @cleverqazi,
06:20 - send me a little message,
06:21 - and you and I can hold
each other accountable
06:23 - and hopefully it will
help you build that habit
06:27 - of, let's say coding
10 minutes, 20 minutes,
06:29 - 30 minutes a day.
06:30 - Alright, so with that said, let's move on
06:33 - to point number two.
06:36 - Number two, pick one
language and stick with it.
06:41 - Let's talk about this.
06:42 - Pick one language and stick with it.
06:48 - Alright, so if it is the case
06:50 - that programming is thought
06:53 - and it is the case that
06:56 - if you improve your ability
to think by problem solving,
06:59 - you are going to be becoming
a better programmer.
07:02 - Programmer.
07:04 - Well then, what that means
07:06 - is that you need to focus
a lot less on syntax
07:09 - and a lot more on problem solving.
07:11 - What is an example of a syntax?
07:13 - The programming language,
07:15 - the structure of the
programming language itself.
07:18 - If you spend a lot of time on syntax,
07:20 - meaning you spend a lot of
time learning new languages,
07:23 - like JavaScript, Java, Python,
07:28 - and then, you know, like, something else,
07:30 - are you gonna improve more that way
07:32 - or if you picked one language,
07:34 - let's say Python,
07:35 - and just spent a lot of
time in problem solving.
07:38 - Which way will you improve the most?
07:40 - This is my question to you.
07:41 - Take three seconds to answer it.
07:43 - Three, two, one.
07:44 - Alright, so you probably got it right
07:47 - and I hope that you did,
07:49 - and if you didn't, you need
to rewatch this video again.
07:51 - You will improve if you go
the problem solving route
07:54 - and you stick with one
programming language.
07:57 - Guaranteed, you will
improve beyond measure
08:00 - compared with this person
who's like, going crazy
08:02 - learning these different languages.
08:04 - What's cool about this person
08:05 - is he'll come up to you and be like,
08:07 - "Hey, I know so many different languages.
08:08 - How many different languages do you know?"
08:11 - But then, you go, "Well I
only know one language."
08:12 - But what's cool about you is
that you can actually do shit.
08:15 - This person will keep going
through tutorial purgatory,
08:17 - will be stuck, will not
know why his or her skill
08:20 - is not improving, and why
you can build projects
08:24 - that are actually useful,
08:25 - and he or she is like, "What
the hell's going on here?"
08:27 - So please understand this concept.
08:29 - Okay, so if syntax is weak
08:31 - and problem solving is
what's gonna help you,
08:32 - then in that case, what I'm gonna say is
08:35 - you should pick one language,
08:37 - and stick with that
programming language, okay?
08:40 - So if you're on this channel,
08:41 - I always talk about
Python and I love Python
08:44 - and I think it's an awesome
programming language,
08:46 - and the best programming
language to start off with.
08:50 - With that said if you want
to pick some other language,
08:52 - you want to learn C++,
or C# or JavaScript,
08:56 - maybe you have your own
reasons to learn this, right?
08:58 - You want to do something
with Unreal Engine or Unity,
09:02 - you want to do something
with web development,
09:04 - you can choose different languages,
09:06 - but once you pick one language,
09:08 - if you want to truly, deeply improve,
09:10 - then you need to improve
your ability to think deeply,
09:14 - and you need to do that by
sticking with one language,
09:17 - so then you're not constantly
09:19 - changing your focus from syntax.
09:21 - You're actually just
working on one language,
09:23 - and you're able to focus on the real thing
09:27 - which is problem solving.
09:30 - Once you understand problem solving,
09:31 - then all it is is any one big project,
09:35 - is a bunch of problems put together.
09:39 - Once you improve at problem solving,
09:40 - here's what's taking place, okay?
09:42 - So problem solving, here's how it works.
09:44 - It has you do one challenge at a time,
09:46 - so it will be like,
09:47 - "Hey, convert the date and
timestamp of this thing
09:49 - to this other thing."
09:50 - "Hey, turn this thing
into this other thing."
09:53 - Now you're doing multiple problems,
09:55 - but now when you have a project,
09:57 - you can see the project.
09:58 - You can deconstruct it
into it's sub-problems
10:01 - and then you can go,
10:02 - "Oh! I know how to problem solve
10:04 - so each of these functions or
each of these little things,
10:06 - I can just solve on its own,
10:07 - and once that's done, I
can just put it together
10:09 - and that's just this one big project."
10:11 - So that's why the ability to problem solve
10:14 - is the ultimate ability.
10:16 - Then you can build anything.
10:18 - Let's move on from two and
let's move to the third thing.
10:23 - Number three, always
have a passion project.
10:29 - So what does that mean,
always have a passion project?
10:32 - That means that you have a project
10:34 - that you are excited about building.
10:36 - You're excited about this project
10:39 - and that you've either started it
10:41 - or you're very actively
always thinking about it.
10:44 - So for example, your passion project
10:46 - could be making an Instagram clone.
10:49 - Now, you understand
10:50 - that Instagram is not something
so easy that you can make,
10:53 - but you also understand that it's made up
10:55 - of different things
and different abilities
10:58 - that you need to have.
10:59 - So now, this will help you go
from being a passive learner
11:03 - into an active learner,
because now you can go,
11:05 - "Okay, I have an IG clone
that I want to build."
11:08 - So you just start trying to build it,
11:10 - and let's say you get to the part where
11:12 - you can create a user,
but then you're like,
11:15 - "How do I store this user in a database?"
11:18 - Well, that's a fantastic question,
11:20 - because you'll go,
11:21 - "Okay, how can I store this user
11:23 - so that I can come back and
have access to this user?"
11:25 - Well, for that, you're
gonna need a datebase,
11:28 - so now, you go and learn about databases.
11:31 - So now you go and learn about,
let's say databases right?
11:34 - Then you come back after you
learn about your databases
11:38 - then you go and just insert
it into your project.
11:41 - So you go, "Okay, I've
learned about databases."
11:43 - Now you go apply it to your project.
11:45 - This way, you have
internalized your learning
11:48 - and your understanding by
actually applying the concept.
11:50 - If you learn the concept
and you don't apply it,
11:53 - there's a 90 percent chance
you truly don't understand it,
11:56 - and that you will fail
to actually apply it
11:59 - to one of your projects.
12:01 - So it's much better to actually
learn slowly but deeply
12:04 - where you're applying this,
12:05 - so that your overall
speed is gonna be slower
12:07 - but your application and understanding
12:09 - is gonna be way more superior
12:11 - and way, way more permanent.
12:13 - So, okay, you learn about databases,
12:15 - then the next thing you need to know
12:17 - is like, how can you filter
from different users?
12:19 - So let's say you lean how to do like,
12:21 - a filter function in Python
and this allows you to filter.
12:24 - Well now you take that thing
12:26 - and you insert it into
your IG clone project.
12:29 - As you learn each new thing,
12:30 - you have this project
in the back of your mind
12:33 - that you're gonna go and apply it to.
12:34 - Now you are learning very purposefully,
12:37 - very intentionally,
and that will allow you
12:40 - to speed up your learning progress
12:41 - and each concept will be
internalized forever, okay?
12:46 - This will actually make
you a great programmer
12:48 - and it's these big projects that you do
12:51 - and you have this one long-term project.
12:53 - You keep going and adding stuff to it.
12:55 - That's what the recruiters
would want to see.
12:57 - That's another one of the
things that I wish I knew
13:00 - when I started coding.
13:01 - So instead of building like,
100 different projects,
13:03 - I could just have one or two projects
13:05 - where I just kept adding more
and more and more things,
13:08 - and then maintain them for a long time.
13:10 - Now, let's move on.
13:13 - Number four, programming is just like
13:16 - how they show it in a Hollywood movie.
13:21 - That's completely wrong.
13:23 - Programming is not-
13:28 - I'm just gonna write Hollywood, okay?
13:30 - Because I don't have much space.
13:32 - But programming is
nothing like they show it
13:35 - in Hollywood movies, okay?
13:36 - I don't know if you watched Mr. Robot,
13:37 - but it's like some dude sitting
13:39 - and doing crazy shit and then things work.
13:41 - That's not how it is.
13:42 - This is why everybody always feels like
13:45 - they have this imposter syndrome
13:46 - where they never feel like
they know how do code,
13:49 - even though they've been
programming for a long time,
13:51 - for a few months, for a few years.
13:53 - That's why you will always feel and think
13:56 - that the other person knows
more programming than you do.
13:58 - It's because of the
way that it's portrayed
14:01 - in the media, okay?
14:04 - And how they show it online
14:06 - when somebody is doing programming.
14:07 - They're just like, going crazy.
14:08 - Their eyes are like, up
here and then they're just
14:10 - keep going insane and writing
code and things just working
14:13 - and they're doing it nonstop.
14:14 - That's not how it works.
14:15 - It's complete bullshit.
14:16 - It's a lot, a lot of googling,
14:21 - and it's a lot of stack overflowing.
14:26 - That's not all it is,
14:28 - but this is one of the best
abilities you can have.
14:31 - The ability to Google, the
ability to stack overflow.
14:34 - Most people, when they run into a problem,
14:36 - their first thing is just
like, they just give up.
14:39 - This is something I've noticed so much.
14:41 - They'll either just ask
somebody for an answer,
14:43 - or just give up and then they'll go,
14:45 - "Okay, this project is too hard.
14:46 - I can't do it."
14:47 - No, you need to Google the shit out of it.
14:50 - I promise you an answer
is somewhere lurking,
14:52 - on GitHub, on Stack Overflow,
in a YouTube tutorial,
14:55 - you can watch the tutorial and see
14:57 - how they implemented this one feature
15:00 - in their own project.
15:01 - You can take it and
then try to implement it
15:02 - into your own project, alright?
15:05 - And yeah, so let me write that as well.
15:06 - Okay, Youtube.
15:08 - And countless other resources,
15:10 - but a lot of programming,
it is you looking up stuff
15:15 - that works online or
works for somebody else
15:17 - and then morphing it and
taking it and using it
15:20 - for yourself, but you have
to be intelligent enough
15:22 - how to actually copy paste it, right?
15:24 - There's this quote or
something on Stack Overflow
15:26 - which is, you know, um,
what makes a programmer?
15:30 - And the joke is something,
15:31 - I'm completely butchering it,
15:32 - but the joke is something
along the lines of
15:34 - there's a guy who just
knows how to copy and paste
15:37 - and then there's a guy who
knows where to copy and paste.
15:41 - So basically it's saying
a programmer knows where
15:43 - to kind of copy and paste,
so if you copy something
15:46 - from Stack Overflow, a piece of code,
15:48 - you will know where to put it
in your code to make it work,
15:51 - and you will know what
changes you need to make
15:53 - to make it work.
15:54 - It's a very incredible ability to have
15:56 - and the way you develop it is
15:58 - by persevering through a problem,
16:00 - and then sticking through
it and going online a lot,
16:04 - and if you're a beginner
and you're stuck a lot,
16:07 - I would even suggest
you post your questions
16:09 - on Stack Overflow.
16:10 - In the start, you're gonna feel like crap
16:12 - because they're gonna shut you down,
16:14 - shut your little newb face down.
16:15 - They're gonna be like, "Haha! You suck."
16:18 - and they're gonna like,
shut down your question,
16:20 - but then you're gonna learn
16:21 - how to actually post a question,
16:22 - and it's gonna make you
a lot more thoughtful
16:25 - with how you do it, because often times
16:26 - when you're even posting the question,
16:28 - trying to be as specific as possible,
16:30 - you'll discover what the solution
16:32 - to the problem actually is.
16:34 - Definitely take advantage
of Stack Overflow,
16:36 - even posting your own
questions when you're stuck.
16:38 - Very, very helpful.
16:40 - And definitely abuse things
like Google, Stack Overflow
16:44 - and Youtube, and use it to improve,
16:47 - but please do not neglect thinking, okay?
16:50 - You need to think really hard.
16:51 - Your brain should most
of the time be hurting,
16:54 - but in a fun way so
you're still having fun.
16:55 - You're not just going crazy,
16:57 - but then if you're
completely stuck, right,
16:58 - then go on and look for
solutions, look for a guidance.
17:02 - That's what lot of programming is.
17:04 - If you see me code a project,
17:05 - it's not gonna be as
exciting as you think it is.
17:08 - I'm not just gonna be sitting there
17:09 - just like, coding it from scratch.
17:11 - I'll be looking up stuff.
17:12 - I'll be pulling pieces of code.
17:14 - I'll be trying to think of things.
17:16 - I'll think of ideas and
I'll like, keep moving on.
17:19 - So these are my four
tips that I wish I knew
17:23 - when I started learning how to program,
17:25 - and I hope that these were helpful to you.
17:27 - So if any of these tips
was helpful for you,
17:31 - please put in the comments below
17:33 - which tip was the most valuable for you
17:36 - and how are you going to
implement it in your own life?
17:40 - With that said, thank
you so much for watching,
17:43 - and as always, I love your face
17:45 - and I'll see you in the next video.
17:49 - (trap music)