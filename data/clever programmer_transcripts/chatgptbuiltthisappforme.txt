00:00 - in this video we're going to be building
00:01 - the open C clone but with a little bit
00:04 - of a Twist because this time we will
00:06 - actually watch Chad GP to build it using
00:09 - infuria to connect to the ethereum
00:11 - blockchain so with that being said let's
00:13 - go ahead and get started all right now
00:15 - ai is smart and all but it's not as
00:17 - smart
00:18 - as everybody thinks it is it still
00:21 - cannot set up the project for you so
00:24 - while we can write the code for you it
00:25 - can't set it up so still we're gonna
00:27 - need to run this epcli so we just run it
00:31 - then we'll get everything started put in
00:33 - your name email and then opens each head
00:35 - GPT the project we're going to be
00:37 - running now it opens inferior for you
00:40 - again you are still in control so if you
00:44 - don't have a infuro
00:47 - account already just go ahead make one
00:50 - and let's actually set it up but before
00:53 - that the terminal will finish running
00:56 - and it will open vs code for you that's
00:58 - where we're going to be putting
00:59 - everything to GPD spits at us so you can
01:03 - go ahead spin up the app and in the
01:04 - meantime
01:06 - just create a new API key we're going to
01:09 - be using the web 3 API and then putting
01:12 - the name however you want to make sure
01:14 - that you are not putting any spaces
01:17 - in that project name it could cause
01:19 - problems later and it's also just good
01:21 - practice not to do it
01:23 - all right let's go create that so that's
01:25 - nice over there we're gonna get back to
01:27 - that in a little bit there's your API
01:29 - key there is your and there are your
01:31 - endpoints and this is your app currently
01:34 - so it already has connect metamask
01:37 - wallet and all that functionality
01:39 - included so don't worry about that we're
01:42 - just going to be specifically focusing
01:43 - on the contract part with Che GPT so
01:47 - let's move on to actually writing the
01:51 - contract
01:52 - all right this is going to be
01:53 - interesting this is gonna be a new one
01:55 - so here's mychat GPT
01:57 - and however it's still like you've got
02:00 - to be like super specific so let me just
02:02 - show you an example I just want to give
02:03 - you an idea of what kind of
02:06 - commands you can give to chegebt
02:10 - and as you can see I'm using Chad gpd4
02:12 - that's like a little fast a little
02:14 - smarter actually that's slower however
02:16 - it's a 20 upgrade but gpd3 which is free
02:20 - and available for everybody at no charge
02:23 - you can still do this exact same thing
02:26 - now what you might experience is if
02:29 - you're using chechi pt3 is that you want
02:32 - to have like tiny bite size
02:35 - prompt rather than longer prompts
02:37 - because that can only process so much
02:39 - text
02:41 - however this app can be completely and
02:44 - 100 built with that I just wanted to
02:47 - show it with this one because this fits
02:49 - better on a screen and I can explain it
02:51 - better so let me just show you so here's
02:54 - what we're gonna do you want to type in
02:56 - something along the lines of create a
02:58 - solidity smart that uses ERC 729 for an
03:02 - open Zeppelin name it nft collection
03:05 - like you got to be specific with it give
03:06 - it a name what exactly do you want it to
03:09 - have so the URI storage ownable you
03:11 - still have to understand the
03:12 - fundamentals of solidity encoding in
03:15 - order to be able to use it now we want
03:18 - to be using the counters as well and we
03:21 - want the library that keeps track of the
03:24 - token IDs and let me just freeze it here
03:28 - here we have 12 very specific
03:32 - commands that we want from this app so
03:34 - again if you're using gpt3 you can just
03:37 - break it down to 12 separate prompts it
03:39 - will be way faster
03:41 - you can just do it that way so we want
03:43 - to have a price
03:45 - on the of this NFD you have to specify
03:48 - you have to call it a constant otherwise
03:50 - it will not know what you want to do you
03:54 - want to have a struct so you still have
03:55 - to understand what's happening like you
03:58 - have to know
03:59 - almost if you were writing it so you
04:01 - need we need a struct that will contain
04:03 - all the data that will have two un256
04:07 - holes ID and price you want to map the
04:09 - map that nft data right I'm sorry you
04:12 - want to map a number to the nft data
04:14 - meaning the ID to the NFC data itself we
04:18 - will need the Constructor that will set
04:20 - the name and symbol and you have to give
04:23 - it the values the nft collection and FTC
04:25 - respectively
04:26 - so basically the name will be an ft
04:29 - collection and then FTC will be the
04:31 - symbol but again it understands if you
04:33 - say respectively
04:35 - then we will need a function set price
04:38 - that will receive the token ID and will
04:42 - receive the prices to arguments and then
04:45 - we'll check whether that token exists or
04:47 - not and then we'll set the price and
04:49 - we're going to have an add nft which
04:52 - we'll link from in the counter and then
04:53 - create the NFC data object and then mint
04:56 - the token so it will basically generate
04:59 - all the right it will basically do all
05:01 - the maintenance around me then we're
05:03 - going to have a total Supply that
05:04 - Returns the number of minted tokens
05:08 - purchase nft which will complete a
05:10 - purchase transaction get all token Uris
05:14 - return all token URLs and you name it
05:16 - and then we will have the burn function
05:19 - from the inherited contract overridden
05:21 - in a token URI as well so let's see what
05:24 - GPD says and it actually gave a pretty
05:27 - long contract so I'm not going to just
05:29 - go through it right now let's just put
05:32 - it into our vs code so I'm going to go
05:35 - ahead and go to contract and create a
05:37 - nft collection.sol file and then just
05:40 - paste it there so what I recommend you
05:42 - do is whatever it gives you just start
05:44 - pasting it back into your vs code and
05:48 - then just keep compiling the code that
05:50 - way
05:51 - you don't have to do any of the
05:52 - understanding and obviously if there's a
05:55 - bug you obviously have to understand
05:56 - what's happening but you don't have to
05:58 - do all the thinking and everything that
06:00 - is involved with coding itself so what
06:03 - you can do is you just paste it and then
06:06 - just type in your terminal truffle
06:09 - compile and that will check it for you
06:11 - it will obviously compile it for you and
06:13 - it will spit any kind of errors or
06:15 - anything that you have and that's when
06:17 - you start debugging
06:18 - so there you go this one was compiled
06:21 - perfectly we don't even have to go
06:23 - through it we just know it works we know
06:25 - it has all the functionality however if
06:28 - you were a beginner in solidity I still
06:30 - recommend you go through the contract
06:32 - and try to understand what's what pick
06:34 - it apart because that will serve you
06:36 - well all right let's move on to the next
06:37 - step
06:38 - all right so now let's deploy the
06:40 - contract if you don't know how you can
06:42 - ask chegebt or
06:45 - if you already know you can just do it
06:47 - so what we always do in the Truffle
06:51 - extension if you don't have it free from
06:53 - the
06:54 - vs code extension Library just go in
06:57 - there you can disconnect all previous
06:59 - projects or just connect it as new ones
07:01 - this is an infuri service and it's so
07:05 - good how they are integrated because it
07:08 - just pops up all your projects you can
07:10 - just connect to open openc and now you
07:13 - can go ahead just click deploy and it
07:15 - will do everything for you
07:17 - so there are all your
07:19 - networks use the mnemonic and there you
07:23 - go now it's deploying so everything
07:25 - should be fun and it looks like we are
07:29 - getting some positive results there you
07:31 - go deploy succeeded so that looks good
07:34 - we can now copy the contract address and
07:37 - actually let's paste it into our
07:40 - listings.js it will be useful later so
07:43 - let's move on
07:44 - all right so in this one we're going to
07:46 - be setting up the contract instance so
07:48 - that the app can work and interface with
07:51 - the contract
07:52 - so let's go ahead and do that so we're
07:54 - going to be using the listings JS file
07:57 - and we're actually going to be needing
07:58 - it but let's just put it there in line
08:01 - 20 that that's where we're going to set
08:03 - up the contract instance this will help
08:05 - to a GPT so it's kind of like work its
08:08 - way through this file because we're
08:10 - gonna be giving it the entire thing so
08:12 - here's what we're gonna do put it there
08:14 - set up contract instance and then just
08:16 - highlight everything copy it and let's
08:18 - go over to Chrome
08:19 - now
08:21 - what we want to do is we want to set up
08:23 - a contract instance for our contract
08:25 - state in the use effect and then just
08:28 - paste it there so basically just tell it
08:30 - that hey there's this use effect I want
08:33 - to interface with the contract
08:35 - and it will just figure out the rest you
08:37 - can specify oh this is where I want it
08:40 - to be or you want to be you can also
08:42 - just say that hey I want to interface
08:45 - with a ethereum contract
08:47 - give me the code for it something along
08:49 - those lines I want you to try it
08:51 - multiple ways so you just have a muscle
08:54 - memory of like what all right just paste
08:56 - the file there good to go and let's see
08:59 - what it says
09:00 - all right so that looks good
09:03 - now we also have to make sure that we're
09:06 - importing the ABI and that obviously it
09:09 - doesn't know where it's absolutely will
09:11 - have to figure that out but just you can
09:14 - paste that line there and then just
09:16 - update where the API is at so now you
09:19 - obviously want to make sure that the
09:21 - location is correct so for me it's in
09:23 - the build slash contracts of nft
09:26 - collection Json and
09:29 - now it also gay also made this address
09:32 - constant so that's nice we can just
09:35 - replace our comment with that so that's
09:37 - actually helpful that it did that and
09:40 - now this is where this is the Moment of
09:42 - Truth this is where we're going to be
09:44 - copying over the use effect that it
09:47 - actually built for us so that first use
09:50 - effect is ladies and gentlemen that is
09:52 - where everything happens that's what we
09:55 - came here so just go ahead copy that
09:57 - entire thing and if you can see over
10:01 - there we just had an empty use effect so
10:03 - we figured it all out it put it there
10:05 - that is perfect and that
10:08 - should in theory work let's check it out
10:12 - I want to make sure that down there
10:14 - everything is console logging all the
10:16 - errors otherwise we're never going to
10:17 - figure out what the issue is and it
10:21 - looks like there's already an error
10:23 - and it looks like that it cannot find
10:26 - the map part in the ABI the so that
10:30 - looks interesting and that's very likely
10:34 - because these ABI files usually have an
10:37 - ABI object in them so I've used that
10:40 - instead of the regular API file and it
10:43 - looks like that just saved this whole
10:45 - there you have it
10:46 - all right so now we're going to make
10:49 - Chad gbt build the add nft function so
10:54 - let's ask it to make it so you need to
10:57 - say okay now let's do the Advent ft
10:59 - function or something along those lines
11:01 - normally remembers if you gave it a
11:05 - bunch of things and it should in theory
11:08 - remember the conversation you guys had
11:10 - before
11:11 - okay that was weird to say
11:13 - but in case it doesn't you can also just
11:16 - again give it to the entire file again
11:19 - and be like hey there's the add nft
11:22 - function
11:23 - make it so that it does this and so
11:26 - sometimes you need to refresh its memory
11:27 - all right let's see what it says so that
11:31 - looks good
11:32 - now let's go ahead and replace
11:34 - everything so we have something to put
11:36 - it put to the add nft function and we
11:39 - also have to replace the handle submit
11:42 - so it actually gave us two functions so
11:44 - that's nice now let's copy over the add
11:47 - nft to collection function
11:49 - so that's already there you can just
11:51 - replace it with whatever it gave you
11:53 - don't even worry about it we'll check it
11:55 - in a little bit whether it work works or
11:57 - not and now let's check the handle
12:00 - submit function and just replace it
12:03 - there let's see what's happening so open
12:05 - up the app
12:06 - and now
12:08 - if everything goes well
12:11 - technically we should be able to amend
12:13 - the nft so just paste your nft URI we
12:17 - already gave you all these things so
12:19 - just from the metadata let's copy that
12:21 - paste it there and then that and then
12:24 - just the price so remember because we
12:27 - asked chai GPT to set a price for the
12:30 - minting which is 0.001 eth you will have
12:34 - to pass in that value there so just make
12:37 - sure what the value is you can go back
12:39 - to your contract file and double check
12:40 - so there's the metamask pop-up so that
12:43 - looks good and it's actually pending and
12:46 - there's the as nft function going
12:48 - through and it looks like it was
12:51 - actually successful
12:53 - so
12:55 - let's search the nfts all right so far
12:57 - it's been pretty smooth let's see if
12:59 - fetching these nfts are going to confuse
13:02 - it
13:03 - so
13:05 - let's just say okay now let's do the
13:07 - fetch nft metadata function and let's
13:10 - see what it says
13:11 - so that looks interesting it looks like
13:14 - it cut in half
13:16 - so sometimes it happens so you can just
13:19 - say something along the lines okay
13:21 - continue or whatever carry on and it
13:23 - will just continue or regenerate
13:25 - response or whatever and even apologizes
13:28 - so that's nice
13:30 - okay so that's looking good let's copy
13:32 - this code over to our vs code and
13:35 - replace the Fetch and ft metadata
13:37 - function
13:39 - so let's see if it works
13:43 - and it looks like the image is missing
13:46 - the source property okay now we're
13:49 - laying like
13:50 - some deep trouble let's see what's
13:52 - happening and it also looks like that we
13:54 - are fetching the token URI which is not
13:57 - necessarily
13:58 - the good thing to do we should like
14:00 - extract the data out of it that's the
14:02 - issue it's not a token URI that we're
14:04 - looking for so we should be fetching not
14:07 - the object we should be fetching the you
14:10 - the image URI and all these things from
14:13 - that object so let's take a look at that
14:15 - and by the way we can just give it that
14:17 - hey this is how you build up the URL
14:19 - that will work for the image so let's
14:22 - see okay so that looks much better if
14:25 - you take a look at it
14:27 - in the previous response
14:29 - in the previous response we only had
14:31 - this stuff so basically we just had the
14:33 - token URI and then it just passed it
14:35 - back here and now that was pretty much
14:37 - it now in this one what it does is it
14:40 - actually uses that same token URI
14:44 - right here
14:46 - as we gave it to it and it actually
14:48 - fetches the metadata itself and there
14:50 - you go now we have the metadata and we
14:53 - actually can do something with it so
14:55 - like we can get so we can get pretty
14:57 - lazy with this stuff and we can just
14:59 - make it do a lot of things
15:01 - so we can just copy this over and you
15:04 - want to make sure that you highlight the
15:05 - entire thing and then just paste the new
15:07 - stuff there you can just paste in the
15:09 - metadata fetching itself so there's the
15:12 - metadata that looks good however we're
15:16 - looking for the image URL and you can
15:18 - see how it like starts to poop out it's
15:21 - not that smart but it's pretty
15:24 - impressive that this is the first time
15:27 - that we are actually coding something
15:28 - and we have to use our brains so that's
15:31 - pretty nuts now we have to like make
15:33 - sure it knows everything instead of
15:35 - metadata we're gonna have an image
15:37 - that we'll need to Fat we'll need to get
15:40 - the image property from the metadata and
15:43 - same goes for the name because right now
15:45 - it doesn't show up but there you have it
15:47 - the image is there so that looks good so
15:49 - far but as I said the name is not there
15:51 - so we're going to extract that too and
15:54 - now it shows up and that's as much as
15:57 - fetching goes all right so the last tap
16:01 - is that
16:02 - we will enable the user to purchase
16:04 - these nfts so let's take a look at that
16:08 - let's make sure gbt do the work for us
16:12 - so you can just say all right now build
16:15 - the nft or the purchase an ft function
16:17 - it was pit and answer back at you
16:20 - that looks good let's copy it over and
16:23 - then you can just paste it to the
16:24 - appropriate place
16:26 - that looks promising let's let's see
16:29 - what's up and by the way this app is
16:31 - built so that when you click the image
16:33 - it will run that purchase nft function
16:36 - so let's click it
16:37 - and it looks like to be an error and
16:40 - something along the lines of value must
16:44 - be string and it got a big number let's
16:47 - just make the listing price a string
16:50 - usually
16:52 - that's the listing price because way is
16:55 - a big number so you just want to convert
16:57 - it to a string that my none have been
16:59 - added there but it's fine and we can
17:02 - also
17:03 - remove that line from there that's not
17:06 - really useful
17:08 - we are not doing
17:11 - yeah it literally parses the price to
17:14 - Ether and we don't want to work with
17:16 - that we want to work with weight that's
17:18 - how solid it works
17:20 - okay so that looks good okay that looks
17:23 - way better and now they are over there
17:24 - on line 53 just make sure the value is
17:27 - price not price in way otherwise you're
17:29 - gonna have another error so now that
17:31 - we've cleared it up and fixed everything
17:33 - and again this is where it comes in that
17:36 - human power is still required and
17:39 - necessary more than ever so let's check
17:42 - it out and now I'm gonna hit it and then
17:45 - metamask popped up so that looks good
17:48 - and purchase is pending and it looks
17:51 - like it just went through and now we can
17:53 - just go ahead meet new nfts purchase
17:55 - those nfts so that is pretty much the
17:58 - build you can just repeat this as much
18:01 - as you want to that's pretty much the
18:02 - build thank you so much for watching and
18:04 - now you should go ahead and practice
18:06 - learning you chat GPT this is a tool
18:10 - this is not there to replace you but you
18:12 - have to be able to use it you have to be
18:14 - able to increase your output using tools
18:17 - like GPT whether you use the model 3 or
18:21 - the model 4
18:23 - it will just make you faster so with
18:26 - that said thank you so much for watching
18:28 - and I'll see you in the next one peace