00:00 - hey guys what is up this is qazi from
00:03 - cleverprogrammer.com
00:05 - and you are watching codecademy python
00:08 - tutorials
00:09 - this is tutorial number 20 so
00:12 - let's talk about where we left off okay
00:15 - so we just finished battleship recall
00:18 - recall enjoy that recall right
00:21 - that was a big accomplishment
00:24 - uh you should have taken some time out
00:26 - to mull that over and think about it and
00:28 - maybe even be an eager beaver or an
00:32 - overachiever
00:33 - and try to do the extra credit part okay
00:37 - however
00:39 - we are now going to move on so we are 59
00:43 - complete we're about to hit that 60 mark
00:45 - which is amazing
00:47 - and we're gonna be talking about loops
00:50 - and loops are super exciting
00:53 - and this is a beautiful
00:55 - thursday morning i made it to my studio
00:58 - and i was super excited to record these
01:00 - for you guys so
01:02 - hopefully you are also having a very
01:05 - good time right now watching this
01:08 - and hopefully you're feeling really good
01:10 - too
01:11 - hopefully your day has gone well
01:14 - so let's get to loops and talk about it
01:17 - while you're here haha so they're
01:20 - talking about while loops right their
01:22 - lame jokes always sneak in and i will
01:24 - always make sure to let you know if
01:26 - they're secret jokes that's why i'm here
01:30 - the while loop is similar to an if
01:32 - statement it executes the code inside of
01:34 - it if some condition is true however
01:38 - it keeps doing it right that's the only
01:39 - difference between an if statement and a
01:41 - while loop kind of if statement it's
01:43 - like an if statement
01:44 - but it's like an if statement that keeps
01:46 - repeating while it's true
01:49 - right so while
01:52 - your push-ups are less than 10 keep
01:54 - doing push-ups right so for example i
01:58 - can do something like uh let's let's
02:00 - create some variable called push-ups set
02:02 - it to zero and while push-ups is less
02:06 - than 10 print
02:08 - um
02:10 - do one more
02:12 - or
02:13 - keep
02:15 - yeah do another push-up
02:18 - and
02:19 - then um
02:22 - if the loop ends then that means we're
02:24 - that if condition doesn't match and we
02:26 - can say print
02:28 - good job
02:30 - you have done 10 push-ups
02:35 - right
02:36 - um and i can also print
02:40 - what push-up count we are at
02:42 - just to let us know what's going on
02:45 - okay let's run this
02:49 - oh oh oh
02:51 - why is this giving us what's happening
02:53 - here
02:54 - i'm glad that this happened i'm really
02:56 - glad this happened it's gonna like crash
02:58 - my browser oh god
03:01 - um
03:02 - let's just
03:03 - yeah stopping stopped
03:08 - okay
03:09 - so
03:10 - while it's stopping let's talk about
03:12 - what just happened
03:13 - so why do you think that happened my
03:16 - browser was about to crash things just
03:18 - kept something just kept happening on
03:20 - the screen up above me and apparently we
03:23 - lost control of the whole situation
03:25 - right the captain lost control over the
03:28 - ship and the ship just sank and now the
03:31 - ship is just broken
03:33 - oh this is bad let's close that it's not
03:36 - even letting me close the browser that's
03:38 - how bad it is
03:42 - changes may have not been saved leave i
03:45 - don't care
03:48 - um okay changes are not saved we just
03:50 - have to do it again so let's talk about
03:52 - while why that happened
03:54 - right so i did print
03:57 - uh push-ups i said print do
04:02 - do another push-up
04:05 - right
04:06 - and then i said print
04:11 - you
04:12 - completed
04:14 - 10 push-ups
04:16 - so you can even make a health app using
04:18 - this right if you want to
04:21 - but so why why what just happened why
04:23 - did this thing
04:25 - keep on running and essentially
04:28 - uh
04:29 - crash our computer well what happened is
04:31 - something called an infinite loop and
04:33 - that happens if your loop doesn't stop
04:35 - so here's what was happening okay
04:38 - how loop works it just keeps running
04:40 - something over and over again so we have
04:41 - this while loop and it keeps running
04:43 - this block of code over and over again
04:45 - until
04:46 - this condition here this condition
04:49 - right is false
04:53 - until that condition it evaluates to
04:56 - false it'll keep running over and over
04:59 - again so it goes
05:00 - initially push up to zero so it goes
05:02 - zero is less than ten print zero and it
05:05 - prints out zero to the screen and then
05:06 - it says do another push up then it goes
05:09 - back up to the variable uh to the line
05:11 - three which says while pushups is less
05:13 - than ten
05:14 - well
05:16 - is zero again less than ten and yes it
05:19 - is so it prints out another zero where
05:20 - it says push-ups
05:22 - and uh it says do another push-up
05:26 - right
05:27 - and then push-ups just keep being zero
05:29 - so if every time push-ups is zero
05:32 - this statement what do you think it is
05:34 - do you think the statement is false if
05:35 - push-ups is zero or true this statement
05:38 - is true because 0 is less than 10.
05:41 - so
05:42 - this statement is true every single time
05:44 - which means that the loop runs
05:47 - every single time and there's no there's
05:49 - no such thing as stopping the loop so
05:51 - what we want to do is just simply
05:54 - increment push-ups right um
05:58 - so i will print out your push-up count i
06:00 - will say do another push-up and then i
06:03 - will say you know you've done this many
06:05 - push-ups i'll put this here because in
06:06 - the start it wouldn't make sense if
06:08 - you've done zero push-ups
06:10 - and it says do another push-up so we the
06:13 - first thing you do is you do a push-up
06:14 - so i increment your push-up count by one
06:16 - and then i print out that you've done
06:18 - one push-up and then i say
06:20 - do another push-up and eventually this
06:23 - thing the first time the loop runs is
06:25 - zero then it's one then it's two then
06:26 - it's three then it's four then it's five
06:28 - then six seven and then eight and then
06:30 - nine and then the loop stops
06:32 - because when it's 10 is less than 10
06:35 - this statement evaluates to false so
06:39 - you never get um
06:42 - right you get 10 here
06:44 - but um or sorry yeah once it's false
06:47 - this part of the loop does not run right
06:49 - so
06:50 - that's the most important thing to keep
06:52 - in mind that's what stops the loop at
06:54 - the end and then it just goes to line
06:56 - nine and says
06:57 - you completed ten push-ups so let's
06:59 - check it out how it works
07:00 - there you go one do another push-up two
07:03 - do another push-up three do another
07:05 - push-up keep going keep going keep going
07:07 - till ten do another push-up uh and it
07:10 - goes you complete it effectively ten
07:12 - push-ups good job
07:14 - uh all right so that was just an example
07:16 - of a while loop right so let's check out
07:19 - what what they're talking about
07:22 - change the loop so it counts up to nine
07:24 - inclusive which means include the nine
07:26 - be careful not to change or remove the
07:28 - count plus equal one bit if python has
07:30 - no way to increase count your loop could
07:32 - go on forever and become an infinite
07:35 - loop
07:36 - so
07:37 - we predicted what they're going to do
07:39 - right
07:40 - and where they're going to talk about
07:42 - and we actually already talked about the
07:44 - infinite loop so you're not gonna have
07:46 - that problem hopefully not
07:50 - um
07:51 - okay so what they're saying is
07:55 - change the loop so it counts up to nine
07:57 - hello i am an if statement and count is
08:03 - count so this is going to print out uh
08:06 - hello i am an if statement and count is
08:09 - um and then where it says comma count
08:12 - is gonna basically put in like you know
08:14 - one here or two here three here
08:16 - something like that that's what it's
08:17 - gonna
08:18 - look like
08:20 - and
08:21 - this statement is gonna run how many
08:23 - times i'll give you five seconds five
08:25 - four three two one
08:28 - this statement will run only one time
08:30 - because it's an if statement okay
08:32 - and how many times is this going to run
08:35 - give you a second to think about it one
08:37 - two three four five seconds
08:40 - okay
08:41 - this statement is going to run five
08:43 - times because count is zero the first
08:46 - time so the block of code runs
08:48 - then count is one so then the block of
08:50 - code runs then count is two and then the
08:52 - block of code runs then count is three
08:54 - and the block of code runs and then
08:55 - count as four and the block of code runs
08:58 - so zero one two three four that's five
09:02 - times
09:03 - and we don't when once it says five this
09:06 - part evaluates to false so the block of
09:08 - code does not run
09:10 - because five is not less than five okay
09:13 - so they said change it so the loop runs
09:17 - nine uh so the loop runs and counts up
09:20 - to nine inclusive which means that we
09:23 - want to change this to a 10. that way it
09:25 - counts from zero all the way to nine
09:28 - and goes up two but not including ten
09:30 - okay another way you can do it is say
09:33 - nine here but say greater than or equal
09:35 - to that way it's only false if it's
09:38 - above nine
09:40 - okay
09:42 - so those are two ways to include the
09:43 - nine this is a more normal way for me
09:48 - hello i am an if statement and count is
09:50 - zero and you don't see that if statement
09:52 - run again right anywhere then you see
09:54 - hello i am a while loop and count is
09:57 - blah blah blah so here you see hello i
09:59 - am a while loop and count is zero hello
10:02 - i am a while and count is one hello i am
10:04 - a while and count is two so on and so
10:06 - forth and ultimately you see um count is
10:09 - nine and then the loop stops okay
10:12 - perfect
10:15 - okay good let's go start next lesson
10:18 - the condition is the expression that
10:20 - decides whether loop is going to be
10:21 - executed or not these are the five steps
10:24 - to the program so condition again was
10:26 - what i told you right every loop
10:28 - uh every if statement if statement is
10:31 - followed by some kind of condition
10:33 - um
10:35 - and
10:37 - while loop is also followed by some
10:40 - condition
10:41 - right
10:42 - in our case
10:43 - this part i'm going to wrap in
10:44 - parentheses that's our condition again
10:46 - important to know the terminology right
10:50 - so instead of hand waving just be like
10:51 - oh yeah i get it just make sure that you
10:53 - really understand that that part is
10:55 - called a condition so then when you
10:57 - refer to it or you hear about it
10:59 - the information is easier to synthesize
11:02 - for your brain you'll be like oh yeah
11:05 - that's the condition i know all about
11:06 - those conditions right let's go back
11:09 - okay the while loop checks to see if
11:12 - loop condition is true right that's what
11:14 - we have already discussed it checks if
11:16 - the loop condition is true
11:20 - here they created a variable called loop
11:22 - condition and they set it to true so
11:23 - eventually so in the start it's true
11:26 - right and then they change the loop
11:28 - condition to false and then it goes back
11:30 - here and this is false so the loop just
11:32 - stops so this loop how many times does
11:34 - it run
11:36 - i'll give you five seconds to answer
11:38 - that question five four three two one
11:43 - this loop runs only one time
11:46 - okay
11:47 - let's test it out
11:48 - boom um it's gonna give me an error
11:51 - because of that print statement so let's
11:53 - put parentheses there and it runs once
11:56 - almost like an if statement and it goes
11:57 - i am a loop and that's it
11:59 - if i do not change it to false then
12:01 - you're going to have an infinite loop
12:03 - right if i just say while true
12:05 - this loop will never stop unless i add
12:07 - maybe
12:09 - a break statement or something like this
12:13 - okay
12:14 - um
12:15 - see how the loop checks this condition
12:17 - and when it stops executing when you
12:18 - think you've got the hang of it save and
12:20 - submit i think you've got the hang of it
12:23 - let's save and submit
12:25 - while you're at it another joke inside a
12:28 - while loop you can do anything else you
12:30 - anything you can do elsewhere including
12:32 - arithmetic arithmetic operations so
12:35 - while you're inside of the if block a
12:36 - wild loop block you can just write
12:38 - whatever code you want right just like
12:40 - you're normally writing code except it's
12:42 - just wrapped in a while loop so
12:46 - you can do print a banana
12:49 - plus
12:50 - you can do print banana
12:53 - um
12:54 - bread
12:55 - apple
12:56 - juice bobby
12:58 - john
13:00 - i like to drink food
13:04 - it's a fun little sentence it could be a
13:06 - great password actually good luck
13:08 - breaking that password right
13:09 - um
13:10 - a lot of the
13:12 - uh just a tip for you guys who are
13:13 - really who want to have a really strong
13:15 - password but easy to remember it's
13:18 - actually have a phrase separated by
13:20 - spaces those are tremendously hard to
13:23 - get there is a difficulty for passwords
13:27 - and apparently those take like trillions
13:29 - of years with the best computing systems
13:31 - and thousands of computers combined uh
13:35 - trying to guess that password so those
13:36 - are actually one of the toughest i guess
13:38 - and uh it's easy to remember instead of
13:42 - having a password like
13:46 - that it's gonna be really hard to
13:48 - remember and it's actually not uh it's
13:51 - easier to crack than that sentence that
13:53 - i wrote above
13:54 - anyways
13:56 - so let's say we have that sentence here
13:58 - and if i do run it's just gonna print
14:00 - that
14:01 - well i can just do the same thing while
14:04 - um
14:06 - right i'll just make something uh
14:09 - condition is equal to true and then i'll
14:11 - say while condition
14:14 - then do that
14:16 - and then otherwise print
14:19 - and then make the condition is equal to
14:21 - false
14:22 - and that way the loop stops
14:25 - only after running once and you can see
14:27 - that pretty much the same thing i did
14:29 - outside of the loop i can do inside of a
14:31 - loop i can also write if statements
14:33 - inside of a loop which are nested by
14:35 - more uh if statements which are nested
14:38 - by a four loops which is nested by
14:41 - another for loop so all this stuff just
14:44 - builds on top of each other which is why
14:45 - it's so important to understand the
14:47 - fundamentals of it and then you can nest
14:49 - them together and do whatever kind of
14:50 - logic you want
14:51 - generally just a piece of advice
14:55 - it's not going to be so
14:57 - useful for you right this second but
15:00 - if your code is having a lot of if
15:02 - statements underneath it like a lots of
15:05 - indentations underneath each other
15:08 - it's called like really nested right
15:10 - and your code starts to become hard to
15:13 - reason about it's just a bad idea to
15:15 - have that it means usually there's
15:17 - something wrong with your logic if you
15:19 - have tons of if under ifs and loops
15:21 - under loops
15:22 - it increases the complexity of your code
15:25 - and also increases the complexity in
15:27 - terms of reading it which means your
15:28 - code is
15:30 - harder to understand and more likely
15:33 - it's going to produce some kind of bugs
15:35 - and it's going to be hard to fix those
15:37 - so focus on simplicity and make it so
15:40 - it's very readable and understandable
15:42 - and
15:43 - make sure that you can explain it to
15:45 - other people
15:46 - anyways
15:47 - create a while loop whoops
15:51 - let's just put this right there create a
15:53 - wild that prints out all the numbers
15:54 - from one to ten square
15:56 - uh each on their own line okay that's
15:59 - simple so
16:01 - what we're gonna do
16:03 - is print
16:05 - and it's gonna run while num is less
16:08 - than or equal to 10
16:10 - because we want to include the 10
16:13 - if we didn't want to include the 10 we
16:14 - would say this and num would only go up
16:16 - to 9 but they want the 10. so i'm going
16:18 - to say less than or equal to 10
16:21 - and what i will say is print
16:24 - num
16:25 - squared
16:26 - and then i will increment num
16:29 - so that way
16:32 - the first time num will be 1 right
16:34 - because that's what it is here so it's
16:35 - going to do one square then it's going
16:36 - to be two then it's going to be three
16:38 - then four then five
16:40 - then six and it's gonna run the while
16:42 - loop block then it's gonna be seven it's
16:44 - gonna run the while loop block and
16:45 - eventually it'll be ten and
16:48 - notice that this is still true which
16:50 - means that this block of code line 4 and
16:52 - 5 will still run
16:53 - and then the while loop will say that
16:55 - this is 11 and 11 less than or equal to
16:58 - 10 will evaluate to false and so this
17:01 - block of code will not run okay
17:03 - hopefully you got that
17:06 - let's run it
17:07 - and there we go we got 149 16 25 36 49
17:12 - 64 81 100 right square one one you get
17:16 - one square 2 you get 4 square
17:19 - 3
17:20 - squared right just to make sure we are
17:23 - following the math as well 3 squared
17:25 - that's just 3 times 3 4 times 4
17:29 - right all of that so great stuff
17:32 - cool let's get it
17:36 - why isn't that okay
17:38 - it's kind of stuck on my screen there
17:39 - for a second so we go all the way up to
17:41 - 100 and then we stop okay start next
17:44 - lesson
17:47 - see where we're at cool
17:49 - a simple errors a common application of
17:52 - a while loop is to check user input to
17:55 - see if it is valid
17:58 - so another so basically what they're
18:00 - saying i'm just going to reiterate it
18:02 - pretty much is
18:03 - constantly keep running the thing while
18:05 - the
18:06 - while the user input is wrong right so
18:09 - you even say the word while naturally
18:12 - while describing that right
18:14 - so anytime you see yourself describing
18:16 - these words in english um
18:19 - like just keep running the program while
18:21 - the user is putting in errors maybe you
18:23 - can start thinking of there's something
18:24 - like a while loop working in the
18:26 - background
18:28 - so yeah if i keep typing in some wrong
18:30 - information
18:32 - you don't want to just
18:33 - end the program
18:35 - or give me some kind of error or say
18:37 - sorry wrong error and shut up the
18:39 - program you want to ask me again like
18:41 - please
18:42 - write a correct answer okay so
18:45 - that may be one good reason to keep
18:48 - running while loop in your software
18:50 - so fill in the loop condition so the
18:52 - user will be prompted for a choice over
18:54 - and over oh sorry i read it wrong
18:59 - we'll be prompted for a choice over and
19:02 - over
19:03 - again
19:04 - while choice is not equal to y
19:08 - and
19:09 - choice does not equal an n
19:12 - i think that should be an or
19:15 - right because you can't pick n and y at
19:17 - the same time so this is logically
19:20 - incorrect it should say or
19:22 - so
19:23 - the loop should keep on running until
19:24 - the user picks y or an r imagine if you
19:28 - were playing a game like rock paper
19:30 - scissors you want to make sure that they
19:32 - pick either r for rock p for paper or s
19:35 - for scissors and if they pick banana
19:39 - it just asks them like go again pick rps
19:42 - make sure it's one of the three okay so
19:44 - sorry i didn't catch that
19:47 - so here we take in the user input are
19:49 - you enjoying the course and
19:51 - while we can say here we can check for
19:54 - the condition while the user answer or
19:56 - in this case choice
19:58 - is not
20:01 - yes or no
20:03 - then ask for the choice again so here we
20:05 - ask for the choice again and then the
20:06 - loop just keeps running
20:08 - back and forth back and forth okay
20:10 - so i can say
20:12 - choice
20:14 - does not equal
20:17 - [Music]
20:19 - y or choice does not equal
20:23 - um
20:24 - n okay but how i would probably like to
20:26 - say is well
20:28 - not
20:30 - no actually this is fine
20:33 - this is fine while choice is not y or
20:36 - choice is not n
20:38 - keep running okay
20:40 - so let's give this a try
20:43 - did you enjoy the course
20:46 - bananas sorry i didn't catch that
20:50 - let's see codecademy
20:53 - youtube
20:55 - okay it keeps catching it so it's
20:56 - actually pretty smart let's try capital
20:58 - y
21:00 - okay let's try small y what it should
21:02 - have caught that
21:07 - um is there an error in my logic here
21:09 - let's see
21:10 - that should have caught that
21:12 - so maybe my
21:14 - logic is incorrect here
21:18 - oh right actually they're right i'm
21:20 - wrong
21:22 - because what they're actually saying is
21:23 - it shouldn't be the case that neither of
21:26 - them
21:27 - exist okay
21:29 - so here we're saying that if both of
21:32 - these don't exist then run this block of
21:34 - code
21:36 - okay that's the only case you'll run
21:37 - this block of code so
21:40 - here let's
21:43 - how do we end this okay we actually can
21:45 - end it
21:46 - so what i'm gonna do is i'm gonna copy
21:48 - this i'm gonna reset code
21:50 - oh that didn't help either let's refresh
21:53 - i've had some people who have gone stuck
21:55 - in an infinite loop of codecademy and
21:58 - they could never get out of it and their
22:00 - codecademy just freezes forever so
22:02 - hopefully that's not going to happen to
22:03 - us
22:05 - i think ann should fix the problem
22:09 - okay and now if i say y that should work
22:14 - okay so they were right i'm sorry i was
22:16 - wrong
22:17 - forgive me codecademy people
22:21 - infinite loops an infinite loop is a
22:23 - loop that never exits this can happen
22:25 - for a few reasons
22:27 - you guys already know about why that
22:29 - happens the
22:30 - condition cannot possibly be false while
22:33 - one does not equal two
22:38 - right this conditions can never ever be
22:41 - false if i just said one does not equal
22:43 - two
22:45 - that statement is true and it'll be true
22:47 - forever we're not even using variable
22:49 - names there so we can't change the value
22:51 - of one or two we're just using integers
22:54 - that loop just keeps running until you
22:55 - write maybe something like break that
22:57 - condition is going to keep giving you a
22:58 - true you can also set a condition by
23:00 - mistake that is going to be a false
23:02 - forever
23:03 - the logic of the loop prevents the loop
23:05 - condition from becoming false okay
23:09 - so here
23:12 - they're showing you
23:14 - example of why your
23:16 - loop might run forever so here you have
23:18 - this case okay
23:23 - count is equal to 10 to start off with
23:25 - 10 and they say while 10 is greater than
23:27 - zero so 10 is greater than zero
23:30 - we want to make this part false when is
23:32 - this part going to be false when we keep
23:34 - increasing count or when we keep
23:36 - decreasing count
23:40 - again to stop the loop we need to make
23:43 - that statement that condition false
23:46 - when is that condition going to be false
23:48 - when count we keep increasing count or
23:51 - keep decreasing count give you a few
23:52 - seconds to think about it
23:54 - three two one
23:57 - when we keep increasing count what's
23:59 - going to happen is that condition is
24:02 - never ever ever ever gonna be false
24:05 - because if you have 10 10 is greater
24:07 - than zero
24:08 - is true if you have 11 is greater than
24:11 - zero that's true 100 greater than zero
24:14 - is true thousand greater than zero is
24:16 - true but if we decrement it every time
24:19 - so it's like that
24:21 - eventually when it comes to 0 is 0
24:23 - greater than 0 no
24:25 - is that condition false yes it is if
24:28 - it's false the loop stops
24:30 - right
24:31 - this condition if ali is still false the
24:33 - loop stops
24:35 - okay so just make sure first you
24:38 - understand which way you got to go on
24:40 - the number line right are we going to
24:41 - the right and increasing or left and
24:43 - decreasing to stop the loop what makes
24:46 - the condition false when does the loop
24:47 - end
24:48 - so here they're showing you that a
24:50 - possible error you can do is instead of
24:52 - decrementing and reducing the value of
24:54 - count so it gets to zero
24:56 - you're increasing the value of count
24:58 - which means that you're going to keep
25:00 - going up which means that the loop runs
25:01 - forever so i'm not going to run it
25:03 - because it's going to crash my browser
25:05 - but that's what would effectively happen
25:08 - just for fun maybe we can run this in my
25:11 - terminal
25:12 - and i'm gonna say paste with
25:15 - [Music]
25:17 - spaces right let's be like spaces more
25:20 - and you see that it keeps running
25:21 - forever
25:24 - right just keeps running keeps running
25:26 - okay it won't stop
25:28 - there wasn't a condition that makes it
25:29 - stop so i'm gonna do ctrl c on my mac
25:32 - and that breaks the loop in a terminal
25:36 - okay
25:38 - so
25:39 - they just showed you a common error that
25:41 - can happen but if i made it minus
25:44 - uh equal one which is like decremented
25:46 - by one every time and i open up my
25:49 - terminal and i paste all of this there
25:51 - well you see it runs from 109.81 and
25:53 - then it stops okay
25:56 - the loop in the editor has two problems
25:58 - it's missing a colon well obviously that
26:03 - and count is never incremented that's a
26:05 - logical error so one is a syntax error
26:08 - which is the program won't allow you to
26:10 - run it and the other one is a logical
26:12 - error which means the program won't stop
26:13 - you
26:15 - but it's a logical error it's a flaw in
26:18 - our own logic
26:20 - the latter will result result in an
26:22 - infinite loop so be sure to fix both
26:24 - before running so we are going to fix it
26:27 - and we're going to say count minus equal
26:30 - one
26:31 - or actually we should increment it
26:34 - because
26:35 - here count is zero
26:37 - and this statement is true and if i
26:40 - decrement it this statement is still
26:42 - true and still true and still true and
26:44 - still true
26:45 - and still
26:47 - true right so i got to go on the right
26:50 - side and increment it every time so i'm
26:53 - going to go here change this to a plus
26:55 - sign
26:56 - i don't need this comment and that
26:58 - should be good
27:00 - runs 10 times
27:02 - right because it starts from zero
27:05 - okay infinite loop so that was a lot
27:07 - about loops i'll let your brains explode
27:10 - and ponder over that a little bit go
27:12 - practice it right now a little bit more
27:15 - loops have tons of applications don't
27:17 - tell me you don't have any ideas
27:19 - look for some ideas that you can work on
27:20 - some basic basic problems or
27:23 - something you want to just create for
27:25 - fun it keeps asking for
27:28 - a name and it's if it matches one of the
27:30 - names of your family members it's greets
27:33 - them in a specific way if it's your
27:35 - spouse or your girlfriend or your mom or
27:38 - your dad whoever
27:40 - it creates them in their own unique way
27:42 - and the program just keeps running
27:43 - forever okay so that's one example or
27:46 - you can create rock paper scissors go
27:48 - practice loops they are actually
27:50 - absolutely amazing very powerful tool
27:53 - you go do that and i will see you in the
27:56 - next video clever programmer uh this is
27:59 - kaze from cleverprogrammer and the next
28:01 - part is going to be part 21. please
28:04 - subscribe go like up like the video give
28:06 - it thumbs up that helps to reach more
28:08 - people and i'll see you in the next
28:10 - video thank you