00:00 - in this video we are going to be
00:01 - building the moon Birds clone with
00:03 - solidity and inferior you will be able
00:06 - to create and mint your own nfts and
00:08 - then using the inferior ipfs you will be
00:11 - able to actually upload them and
00:13 - actually mint them as a proper ERC nft
00:16 - so with that said let's go ahead and
00:18 - jump straight into it so let's get
00:19 - started with the moon Birds clone so
00:22 - we're gonna work with our usual CLI tool
00:25 - so just type in npx clever programmer
00:27 - and it should pull it up immediately so
00:30 - just pop in your email then your name as
00:32 - it prompts you and then select moonbirds
00:34 - now just wait for the script to run and
00:38 - then it will open up infuria for you so
00:40 - just go ahead log in or create an
00:42 - account if you don't have one already
00:43 - and create a new API key a top right
00:47 - select the network which will be ipfs
00:51 - and then just pop in whatever name you
00:53 - want obviously this Moon bird so go
00:56 - figure and then hit create now these
00:59 - will be your project ID and API secrets
01:02 - so just make sure you save them some so
01:05 - just make sure you save them somewhere
01:06 - and then don't share it with anyone and
01:09 - then and by this time your scripts will
01:13 - be done and they will open up vs code
01:15 - for you so moving on let's go ahead and
01:19 - start uploading all these files that we
01:21 - have in the data folder you should
01:23 - already have these files because the CLI
01:26 - tool was nice enough and gave it to you
01:28 - just like this readme.md file so don't
01:31 - freak out you already have all these
01:34 - stuff this stuff and that's just
01:36 - basically a bunch of instructions on
01:38 - what we're actually going to be doing so
01:40 - step one we're going to go ahead and
01:42 - create a CLI variable which will name
01:45 - inferior auth and we'll create it as the
01:48 - following so we're gonna grab the
01:50 - project ID from inferior and then the
01:53 - API key and then put them next to each
01:56 - other and I put a column between them so
01:58 - let's just do that real quick and that's
02:01 - that now step two what we're gonna do is
02:04 - copy that command on the second step and
02:07 - where you see file name you're just
02:09 - gonna put in one of the files one of the
02:11 - PNG files name in there and so just copy
02:14 - all that and so we're gonna go with the
02:16 - 35 74. Eng file and so now that gave us
02:20 - that nasty looking Json and we're gonna
02:23 - go ahead and copy the hash from and
02:25 - before we actually do anything with that
02:27 - hash before we do anything with that
02:29 - hash we should enable dedicated gateways
02:31 - on inferior and just put in clever
02:34 - programmer or your name or whatever you
02:37 - want to and then just save it as a sub
02:38 - domain that will guarantee that like you
02:42 - can access these files through your
02:44 - name.infur and pfs.io this is just a
02:47 - cool feature that inferior has so that's
02:50 - nice all right next up so copy that that
02:54 - hash and wait what oh all right so copy
02:58 - that hash and now the file that we just
03:01 - uploaded we're going to go ahead and pin
03:02 - it so that's just a method on ipfs that
03:06 - you have to do so let's just go ahead
03:07 - and do that copy the command from step
03:11 - three and then just put it there and
03:13 - then put the hash to
03:16 - at the end where it says dot hash and
03:19 - that should be good now your stuff
03:21 - should be pinned all right just for just
03:24 - so I have it saved here I'm just gonna
03:26 - go ahead and put it there this is going
03:28 - to be the jsonpins.txt file next to 3574
03:32 - I'll just put this
03:34 - cleverprogrammer.infura link and then
03:36 - just put the pinned the pin the hash
03:39 - next to it that's by by the way the link
03:42 - to your image so now what we're going to
03:45 - do is we're going to go ahead and
03:46 - generate the nft metadata so what you
03:49 - want to do is go ahead copy that whole
03:52 - link and then put it to put it next to
03:54 - image URL in the respective Json file
03:57 - and if you actually check it and put it
04:00 - in your browser that should pull up the
04:02 - image you just up so if that's happening
04:04 - that's nice if not just scroll back a
04:06 - little bit and then you'll be able to
04:08 - follow it again and see where where the
04:11 - mistake is at and now what you're gonna
04:13 - do is repeat the same upload and pin
04:16 - steps but instead of instead of put
04:20 - instead of putting the the PNG file
04:22 - there you're gonna put the Json file and
04:25 - so once that's done you should be pretty
04:27 - much good to go now now that you pinned
04:30 - it you're going to go ahead and update
04:33 - the link in your file with the new link
04:36 - containing the Json pinned hash and so
04:40 - that link actually should be able to
04:43 - load the Json file you just upload it if
04:46 - that's the case then you're good to go
04:48 - and we can move forward now I also want
04:51 - to note that you have to do this for all
04:53 - the files I haven't recorded because
04:55 - this video would have been like twice as
04:57 - long because it takes a little bit to
04:59 - upload all these files so just go ahead
05:00 - pause this video and then you can go
05:03 - from there upload all the files so now
05:05 - we're going to go ahead and create and
05:07 - deploy the contract in under 10 minutes
05:09 - or we'll see so first of all what you
05:12 - want to do is go to Google and search
05:14 - for open zaplink contract Wizard and
05:17 - that's exactly what it sounds like we
05:19 - where they used it so we're gonna make
05:21 - sure you want to make sure you select
05:23 - erc721 and then you would rename it to
05:27 - Moon birds and give it whatever symbol
05:29 - you want it to that's not not really
05:32 - important what's really important is
05:33 - that you check mindable Auto increment
05:36 - IDs and URI storage now go ahead and
05:41 - copy this whole code that it gave you
05:42 - and now go back go back to your vs code
05:46 - and open up contracts and then create a
05:48 - new file in there and then just call it
05:51 - moonbirds.p.sol and then just paste the
05:53 - whole thing in there okay now we have
05:56 - this template contract and we're going
05:58 - to make some modifications to it so
06:00 - first of all on line 13 we're going to
06:02 - go ahead and create a string array which
06:04 - is going to be public and this is where
06:06 - we're going to store all the nft Uris
06:08 - that we are uploading downloading
06:10 - whatever pinning to to the ipfs okay now
06:14 - go down to your safe mint and this is
06:18 - where we're gonna make the next set of
06:20 - adjustments first off we're gonna remove
06:22 - the address 2 from the arguments because
06:25 - we don't want the front end to be able
06:28 - to specify which wallet we meant the nft
06:31 - two and then next up you want to change
06:34 - the only owner to payable because this
06:37 - main thing is going to cost eth and so
06:39 - next we're we want to make sure that the
06:42 - message value is greater than 0. just
06:46 - put an amount there basically that's not
06:48 - too much we just put in
06:51 - 0.0001 ether otherwise throw an error
06:55 - that is that says not enough eth and
06:58 - once that's done you want to make sure
07:00 - that the safe mint and will actually
07:02 - mint the nft to the message sender
07:04 - meaning the wallet that executes the
07:08 - command and before you finish this off
07:11 - you just want to push the nft URI you
07:14 - just or the token ID or the nft you just
07:16 - minted to the nft war eyes array that we
07:20 - just created like half a minute ago now
07:22 - next up we're gonna make a new function
07:25 - that will return the same exact array
07:29 - and that's how that looks like and now
07:31 - what you're going to do is go to your
07:33 - migrations folder and create a new file
07:37 - and that will help us deploy this
07:39 - contract just call it 0 1 underscore
07:42 - deploy.js and just create a new moon
07:46 - Birds artifacts variable and then what
07:50 - we're going to do is say module that
07:52 - exports equals deployer and then word
07:56 - that deploy moonbirds nft moombers and
07:59 - so next up just go ahead and hit build
08:02 - track on move bird cp.sol and go into
08:05 - your output menu or you can also press
08:08 - shift command U to open it up and let's
08:11 - see what will happen so it looks like
08:14 - everything is up to date
08:16 - and you just want to make sure that but
08:18 - before we move forward the fact that it
08:20 - says everything is up to date is cool
08:22 - and all but that doesn't mean anything
08:24 - so you just want to make sure that your
08:26 - truffle extension is connected to
08:28 - infuria and obviously you have it
08:30 - installed so you just go ahead and hit
08:33 - create new network and then just type in
08:35 - moonbirds that will create a new
08:37 - inferior project for you just make sure
08:40 - you select public and once you're there
08:42 - you can go ahead and hit deploy select
08:46 - girly and put in whatever gas price you
08:49 - want to and then just select one of your
08:52 - keys that you already have set up if not
08:54 - you can watch one of our previous videos
08:56 - that details it details it all and now
09:00 - the deploy failed because we don't have
09:02 - open Zeppelin contracts installed so
09:04 - that's good that's completely fine we
09:06 - can just go ahead fix it by actually
09:08 - installing it so just hit say yarn add
09:11 - open zaplin slash contracts and wait for
09:14 - it to run once it's done go ahead try
09:17 - again same config and this time it
09:21 - actually should work and you should get
09:24 - the contract address back and if so good
09:28 - job all right so let's go ahead and set
09:30 - up a couple of constants that we are
09:32 - going to be using throughout this build
09:34 - so we're going to be doing is going to
09:37 - build slash contracts and then select
09:40 - moonbird cp.json that that file content
09:44 - file contains our abs and go ahead and
09:47 - copy that file now go back to app under
09:50 - app slash utils and then just paste it
09:53 - there and right in there just create a
09:55 - new file and just name it constants.js
09:58 - and create two constants in there so the
10:01 - first one is going to be contract
10:03 - address and then just paste whatever
10:05 - contract address the output is showing
10:07 - to you so that's going to be the
10:09 - deployed contract address
10:11 - and next up you want to import the ABI
10:16 - you want to make sure it's all capital
10:17 - this is going to be case sensitive so
10:19 - just copy from the screen so import ABI
10:22 - from from the moonbird cpj so that you
10:24 - just pasted there and we wanted to
10:27 - extract the ABI object from that file so
10:31 - just call it contract API or something
10:32 - and that will be abi.abi and now export
10:36 - these two and that's basically it so
10:39 - let's go ahead and set up the contract
10:41 - instance so what we're going to be doing
10:44 - is we're going to go to utils and then
10:46 - create another file and we're going to
10:49 - name it
10:51 - moonbirdscontract.js and we're going to
10:53 - import the two stuff that we just
10:55 - exported from constants and then we're
10:58 - going to create a function which which
10:59 - have with a parameter of web3 instance
11:02 - and it will be moombard's contract and
11:04 - it will just return new web3
11:07 - instance.eth.tract and then pass in the
11:10 - two stuff that we imported and and then
11:13 - export default that moonbirds con let's
11:15 - go ahead and set up the context so what
11:18 - we're going to do is create a new
11:19 - context folder inside of app and create
11:21 - a context.js file in there now we're
11:24 - going to import a bunch of things on top
11:26 - so create context use State use context
11:29 - and use effect all from react now go
11:32 - ahead and create a app context variable
11:35 - and just use the create context method
11:38 - to create that and it also obviously
11:40 - exported now create a app provider and
11:44 - pass in children and it will just return
11:46 - app context.provider pass in the value
11:49 - and then children in between now you
11:53 - want to go ahead and make sure you
11:54 - export and go into your app.udderscore
11:57 - app.js and import your app provider and
12:00 - wrap it around the component that was
12:03 - already in there and that should be
12:06 - pretty much the setup now if you go back
12:08 - to your contacts we want to make sure it
12:10 - actually works so just put in account
12:12 - and just type in whatever you want we're
12:15 - just going to say hello from App
12:16 - contacts run the app and then in the if
12:20 - you open up your inspector it should say
12:22 - hello from App context on the right hand
12:25 - side if that's the case you're if that's
12:28 - the case good job and let's go to the
12:30 - next one let's go ahead and now connect
12:32 - our metamask wallet from the Chrome
12:35 - browser
12:36 - so what we're going to do is inside of
12:39 - our context we're going to import web3
12:41 - and moon Birds contracts and then we're
12:44 - going to create an ethereum a variable
12:46 - and that will assign the value in case
12:49 - the window is not undefined and that
12:53 - comes by the way from metamax so if you
12:55 - have it in if you don't have it
12:56 - installed now is the time to go ahead
12:57 - and install it otherwise
12:59 - this app is not going to work for you so
13:01 - basically if you have a window that is
13:03 - valid just save the window.etherium
13:06 - value into your ethereum very so next up
13:10 - inside your app provider just create a
13:13 - use state which will be web3 instance
13:16 - and then with just an empty a starting
13:18 - value and the next one you want to
13:21 - create another you state that will be
13:23 - the current wallet address now that will
13:26 - have an empty string as a starting value
13:28 - and you can remove that console along
13:30 - now it's not important anymore now you
13:32 - want to go ahead and create a connect
13:34 - wallet Handler and before you do
13:36 - anything else you want to make sure that
13:38 - the window and both the window and the
13:41 - ethereum are not on that's how you do it
13:45 - and there was a typo so let's just fix
13:47 - it it's all lowercase when you say type
13:49 - of now you want to create a try catch
13:51 - because we're working with blockchain
13:52 - and so when you catch an error you just
13:55 - want to console log it and if any of
13:57 - those things either way window or the
14:00 - ethereum or undefined you want to pop
14:03 - out and alert and make sure to warn the
14:05 - user to install otherwise again they
14:09 - cannot use this app now in the try part
14:13 - of this statement you want to say oh
14:15 - wait ethereum.request and request all
14:18 - the accounts and then create a web 3
14:21 - variable a const using the web3 library
14:25 - and just pass in window.etherium and
14:28 - then save that as the web3 instance now
14:31 - next up you want to get all the accounts
14:35 - and you will do that by using the web3
14:39 - library.eth.getaccounts method and then
14:42 - save that save the first result because
14:45 - it's going to send you back an array so
14:47 - you just want to grab the first element
14:49 - and then save it into your current
14:51 - wallet address you now you want to set
14:54 - the moon bird contract moonbirds tracked
14:56 - instance to be member Moon Birds
14:59 - contract that web3 and then whenever
15:02 - there is an account change or something
15:04 - going on with the your with your meta
15:07 - mask you just want to reset the newest
15:09 - new newest wallet to be the current
15:11 - wallet okay and you want to make sure
15:15 - that you export this connect wallet
15:18 - Handler function and the current wallet
15:20 - address you state from the context so
15:24 - now you want to go into login and
15:26 - index.js and you want to import use app
15:29 - context and from the contacts you want
15:31 - to import connect wallet Handler and
15:34 - where you see there's a button on line
15:36 - 12 you want to pass in there as the
15:40 - unclick parameter and then in your main
15:43 - index file you want to import use app
15:46 - context again and then the you can just
15:49 - remove the current wallet address equals
15:51 - false it was a dummy value that we used
15:54 - just so that the app doesn't break so
15:56 - you can just remove that and then
15:58 - replace it with with the cons and then
16:00 - just de-structure current wallet address
16:02 - from usap Context now on line 17 you see
16:06 - how the current wallet address like how
16:09 - the logic works so if the current wallet
16:11 - address is an empty string which is we
16:12 - remember it's the starting value it was
16:15 - just a pass you we'll just give you the
16:17 - login page otherwise it will give you
16:19 - the app itself all right let's go ahead
16:21 - and test it out now let's see what we
16:23 - got and we should be good but for some
16:27 - reason it doesn't seem to be working so
16:29 - there is an error with the get accounts
16:31 - let's see what we've got oh okay so in
16:33 - line 24 in your context make sure when
16:36 - you await web 3 you actually wait with
16:40 - us with a lowercase web 3 not the
16:42 - capital it's not using the library
16:44 - itself all right let's rebuild let's see
16:46 - what we've got hit connect wallet and
16:48 - there you go now you got this whole and
16:51 - now let's just go ahead and disconnect
16:53 - this wallet let's see what happens if
16:56 - you refresh now it gives you the login
16:58 - page and now it gives you the option to
17:01 - log in with your metamask so if that
17:05 - works and it throws you back to the app
17:07 - good job and we can go ahead and move
17:10 - forward connect wallet all right let's
17:13 - go ahead and now connect our metamask
17:15 - wallet from the Chrome browser
17:18 - so what we're going to do is inside of
17:21 - our context we're going to import web3
17:23 - and moon Birds contracts and then we're
17:26 - going to create an ethereum a variable
17:27 - and that will assign the value in case
17:31 - the window is not undefined and that
17:34 - comes by the way from metamax so if you
17:36 - have it in if you don't have it
17:37 - installed now is the time to go ahead
17:39 - and install it otherwise
17:41 - this app is not going to work for you so
17:43 - basically if you have a window that is
17:45 - valid just save the windowed ethereum
17:48 - value into your ethereum very so next up
17:52 - inside your app provider just create a
17:55 - use state which will be web3 instance
17:58 - and then with with just an empty a
18:00 - starting value and the next one you want
18:03 - to create another you state that will be
18:05 - the current wallet address now that will
18:08 - have an empty string as a starting value
18:10 - and you can remove that console along
18:11 - now it's not important anymore now you
18:14 - want to go ahead and create a connect
18:15 - wallet Handler and before you do
18:18 - anything else you want to make sure that
18:20 - the window and both the window and the
18:23 - ethereum are not on that's how you do it
18:27 - and there was a typo so let's just fix
18:29 - it it's all lowercase when you say type
18:31 - of now you want to create a try catch
18:33 - because we're working with blockchain
18:34 - and so when you catch an error you just
18:37 - want to console log it and if any of
18:39 - those things either the way window or
18:41 - the ethereum or undefined you want to
18:44 - pop out and alert and make sure to warn
18:47 - the user to install otherwise again they
18:51 - cannot use this app now in the try part
18:55 - of this statement you want to say oh
18:57 - wait ethereum.request and request all
19:00 - the accounts and then create a web 3
19:03 - variable a const using the web3 library
19:07 - and just pass in window.etherium and
19:10 - then save that as the web3 instance now
19:13 - next up you want to get all the accounts
19:17 - and you will do that by using the web3
19:21 - library.eth.getaccounts method and then
19:23 - save that save the first result because
19:26 - it's going to send you back an array so
19:29 - you just want to grab the first element
19:31 - and then save it into your current
19:33 - wallet address you now you want to set
19:36 - the moon bear contract moonbirds tracked
19:38 - instance to be member Moon Birds
19:41 - contract that web3 and then whenever
19:44 - there is an account change or something
19:46 - going on with the your with your meta
19:49 - mask you just want to reset the newest
19:51 - new newest wallet to be the current
19:53 - wallet okay and you want to make sure
19:56 - that you export this connect wallet
20:00 - Handler function and the current wallet
20:02 - address you state from the context so
20:06 - now you want to go into login and
20:08 - index.js and you want to import use app
20:11 - context and from the contacts you want
20:13 - to import connect wallet Handler and
20:16 - where you see there's a button on line
20:18 - 12 you want to pass in there as the on
20:22 - click parameter and then in your main
20:25 - index file you want to import use app
20:27 - context again and then the you can just
20:31 - remove the current wallet address equals
20:33 - false it was a dummy value that we used
20:36 - just so that the app doesn't break so
20:38 - you can just remove that and then
20:40 - replace it with with the cons and then
20:42 - just t-structure current wallet address
20:44 - from usap Context now on line 17 you see
20:48 - how the current wallet address like how
20:51 - the logic works so if the current wallet
20:52 - address is an empty string which is we
20:54 - remember it's the starting value it was
20:57 - just the past you will just give you the
20:59 - login page otherwise it will give you
21:01 - the app itself all right let's go ahead
21:03 - and test it out now let's see what we
21:05 - got and we should be good but for some
21:08 - reason it doesn't seem to be working so
21:11 - there is an error with the get accounts
21:13 - let's see what we've got oh okay so in
21:15 - line 24 in your context make sure when
21:18 - you await web 3 you actually wait with
21:22 - this with a lowercase web3 not the
21:24 - capital it's not using the library
21:26 - itself all right let's reveal let's see
21:28 - what we've got hit connect wallet and
21:30 - there you go now you got this hold and
21:33 - now let's just go ahead and disconnect
21:35 - this wallet let's see what happens if
21:38 - you refresh now it gives you the login
21:40 - page and and now it gives you the option
21:43 - to log in with your metamask so if that
21:46 - works and it throws you back to the app
21:49 - good job and we can go ahead and move
21:52 - forward let's mean these nfts this is
21:56 - what oh this is what we've been working
21:58 - for this entire time all right let's go
22:00 - to your contacts file yeah contacts file
22:03 - and then at the bottom right above
22:04 - return just create a mint 10ft function
22:07 - that takes that's an async function and
22:10 - it takes in an ipfs URI now in there
22:13 - we're gonna call the moon words contract
22:17 - instance.methods.savement and then pass
22:19 - in the ipfs URI and whatever it spits
22:22 - back we're just going to save it as mint
22:24 - res we're gonna send send this from the
22:27 - current wallet address which is the
22:28 - wallet that's connected to the
22:30 - application the value is going to be web
22:33 - 3 instance utils two-way basically in
22:35 - way
22:36 - 0.0101 you can literally just throw
22:39 - whatever in there just make sure it's
22:40 - more more than what you specified in the
22:42 - contract itself and then just make sure
22:45 - it's in e now gas you just want to put I
22:48 - think it's 3 million and then for a gas
22:51 - price it's null okay don't ask me what
22:54 - it is that's just a lot of specific
22:56 - parameters and you want to make sure now
22:58 - that you export the mint nft and expose
23:01 - it to the app itself now you want to go
23:03 - ahead and import the use up contacts in
23:06 - your mint model index.js and now you
23:10 - also what you want to destructure the
23:12 - mint nft from the contacts and then you
23:16 - want to import the use router from next
23:19 - router and we're going to go ahead and
23:20 - set all that up so we have a function
23:23 - called handled mint click so let's go
23:26 - ahead and make that work so we want to
23:28 - make sure that the ipfsuri exists if it
23:32 - doesn't we're just going to return and
23:34 - not worry about it so first up we're
23:36 - going to say wait mint.ft pass in the
23:38 - ipfs URI and then set the ipfs URI To
23:42 - None or like an empty string and then I
23:45 - just have the router work but okay we
23:47 - got to set it up first so just create
23:49 - the instance and so we're just going to
23:52 - say push and go back to the root or like
23:56 - the slash basically the root of the app
23:58 - itself okay now this just shows you that
24:02 - that's the button that's going to
24:03 - trigger this handle mean click function
24:06 - so let's go ahead and try this out so go
24:10 - into your Json pins and by this time I
24:12 - hope you have all the Json files
24:15 - uploaded to ipfs so just go ahead and
24:18 - grab one of the hashes and then just
24:20 - copy that and then go to your app hit
24:23 - mint your nft and then pop in your hash
24:27 - now hit mint and there is a mirror that
24:30 - says moombers contract instance is not
24:32 - defined in the
24:35 - that's interesting let's see what do we
24:37 - got so going back let's dig deep it's
24:41 - probably in the context and it looks
24:44 - like we haven't defined it so let's go
24:46 - ahead and do that because that's usually
24:47 - helpful so we're just going to go ahead
24:50 - and create a you state and in the use
24:53 - effect we're going to give it a value
24:54 - all right so here we're gonna make sure
24:56 - that if the moombers contract instance
24:58 - doesn't exist we're just going to return
25:00 - on don't worry about it and now we're
25:02 - actually storing whatever we're setting
25:04 - up on line 32 so now we have a use state
25:08 - for that so let's go ahead and try this
25:11 - out again so now it should be good let's
25:14 - see what do we got and the paste that
25:17 - same hash again okay now the meta mask
25:20 - pops up nice there's the price that we
25:23 - just set and hit confirm okay there's
25:27 - Safe main Network that's working
25:28 - perfectly and that's basically it
25:31 - alright so here we're gonna make sure
25:33 - that if the moombers contract instance
25:36 - doesn't exist we're just going to return
25:37 - on don't worry about it and now we're
25:39 - actually storing whatever we're setting
25:41 - up on line 32 so now we have a use date
25:45 - for that so let's go ahead and try this
25:48 - out again so now it should be good let's
25:51 - see what do we got and the pace that
25:54 - same hash again okay now the meta mask
25:57 - pops up nice there's the price that we
25:59 - just set and hit confirm okay there's
26:03 - Safe main Network that's working
26:05 - perfectly and that's basically it all
26:08 - right let's render our nfts and this is
26:12 - the last very last thing that we're
26:14 - gonna be doing in this build and after
26:16 - this you're done what we're gonna do is
26:19 - go into our contacts file and just
26:21 - create a get uri's function which will
26:24 - be async and no inputs or we'll have no
26:27 - inputs and we're gonna reset the set nft
26:30 - data you state that we actually haven't
26:32 - declared yet to an empty array so don't
26:34 - worry about that if you don't have it
26:35 - just just yet and what we're going to do
26:37 - is say cause your eyes and that will
26:40 - just wait a wait for the moon Birds
26:42 - contract instance dot methods dot get
26:44 - URI or get nft or eyes response and then
26:49 - whatever it returns we're going to map
26:52 - through them and we're gonna fetch each
26:55 - Json file itself and that's what we're
26:58 - going to be saving into the nft data
27:01 - what is it you state so once we're done
27:04 - mapping it through and saving it all now
27:08 - we're gonna go ahead and run that
27:09 - function actually and now that use
27:11 - effect makes sense because now the moon
27:14 - Birds contract instead of it doesn't
27:16 - obviously it shouldn't be running that
27:18 - function but now it all came into place
27:21 - and now we also want to make sure that
27:23 - we run that function after we mint and
27:26 - nft so the app feels like real time or
27:28 - near real time at least and once that's
27:31 - done what we also want to make sure is
27:34 - that we we set up the oh we're going to
27:37 - console log the NFD we want to make sure
27:40 - that we finally set up the use day that
27:43 - we've been using this entire time and
27:45 - now we can go ahead and console log it
27:47 - so let's see what do we got in there and
27:49 - if everything's good we should have one
27:51 - item in there however we don't see
27:53 - anything in there but that's interesting
27:54 - let's see what's happening so we're
27:58 - gonna go ahead and just mint another nft
28:00 - let's see if that fixes it okay minting
28:02 - seems to be working nothing is showing
28:05 - up there and there's in there so that's
28:08 - interesting it still shows up and as
28:10 - empty so let's just go back and uh let's
28:13 - do something with a console log yeah
28:16 - let's console log the data out when we
28:18 - map it through okay now there it is now
28:22 - it shows up probably you just need to
28:23 - refresh it I've never did this here but
28:25 - that's fine but as you can see there is
28:28 - the nft data now all we need to do is
28:31 - just remove all these useless console
28:32 - logging that we're not going to be using
28:34 - anymore and going to nft this going to
28:37 - the NFC display index.js file and import
28:41 - contacts and from the context just
28:43 - obviously you want to export the NFC
28:45 - data you state and then restructure it
28:49 - in the nft display file and then replace
28:52 - all the static stuff
28:54 - so as you can see there's an nfts array
28:57 - we're going to replace that with nft
28:59 - data and map through that instead and
29:03 - you see how there is all this static
29:05 - file we're not we don't want to show
29:08 - that anymore as you can see there is
29:09 - that nice little animation and all the
29:11 - images are gone so what we're going to
29:13 - do is we're going to instead set the
29:17 - image source to be nft dot image and now
29:21 - it's gonna complain that the host name
29:25 - is not Define or not configured that's
29:28 - just a security feature in index.js so
29:30 - let's go ahead and fix that real quick
29:32 - and in next config.js just replace the
29:36 - domains with your own custom custom
29:39 - domain so just save that after that you
29:41 - will have to completely restart your app
29:43 - so let's do that real quick and then if
29:46 - you refresh there's your brand new app
29:48 - with everything being rendered and that
29:51 - was the moon birds build guys thank you
29:53 - so much for watching hope you you guys
29:55 - enjoyed it smash the like button and
29:56 - I'll see you in the next one peace