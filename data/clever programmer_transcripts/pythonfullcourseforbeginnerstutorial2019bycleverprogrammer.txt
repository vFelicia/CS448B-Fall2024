00:00 - - What's up guys, this is Qazi
from cleverprogrammer.com.
00:03 - You are here to watch the
Python tutorial for beginners.
00:07 - This is the ultimate tutorial,
00:09 - what I've done is I've
taken every single video,
00:12 - put it together so you have everything
00:14 - in one place to watch.
00:16 - We're gonna cover all the way
00:17 - from how do you actually install
00:19 - and download Python in under two minutes
00:21 - to what variables and
strings and conditionals
00:25 - and while loops and for
loops, things like that.
00:27 - All the way to building lots of projects.
00:29 - So we're gonna be building games together
00:31 - and we're gonna be
building projects together.
00:33 - Okay so for example, you're gonna learn
00:35 - how to build a circle made out of square.
00:38 - So we're gonna be doing lots
of visual development as well.
00:40 - You are gonna be doing lots of exercises
00:43 - that are gonna be given to you
00:45 - with test cases built in
00:47 - and you also gonna have
access to projects in here.
00:50 - Okay, and we're gonna be
building rock, paper scissors,
00:52 - as one of our projects in this as well.
00:55 - I'm gonna shut up.
00:56 - I hope you enjoyed this.
00:57 - Please do me a favor.
00:59 - We wanna make sure that this
goes out to a lot of people.
01:01 - So the one very small thing you can do
01:03 - to really help us if you
just hit the like button,
01:06 - and subscribe to the
channel if you wanna watch
01:08 - more of this type of
content outside of that.
01:12 - Another thing I wanted to tell you
01:13 - was if you want it all in one place,
01:15 - I do have it on my website.
01:17 - The link should be below
01:18 - cleverprogrammer.com/learnpython.
01:22 - And you can make your account there
01:23 - and that way you have all
of this all in one place.
01:26 - So you can have access to it,
01:27 - you can come back to it
to view it and watch it.
01:30 - With that out of the way,
01:32 - I'm gonna to shut up and move out.
01:34 - Enjoy the video, enjoy the
Python tutorial for beginners.
01:38 - I'm excited for you and your journey.
01:39 - This is Qazi, I'm out.
01:42 - (gentle music)
01:45 - Today we're gonna learn
how to install Python
01:48 - in less than five minutes.
01:50 - So let's get started.
01:57 - Okay so the first thing you have to do
01:59 - is open up New Tab in
Chrome or Internet Explorer,
02:02 - Mozilla Firefox, go to your web browser,
02:04 - type in Python 3 download.
02:07 - Simple as that.
02:08 - Click the first thing that
your eye can see or can't see,
02:11 - that's how fast you should be clicking.
02:13 - And instead of Python 2.7,
02:16 - let's go to the latest version
and install Python 3.51.
02:19 - You get this download
bar at the bottom here.
02:22 - Click continue, continue,
continue, agree right.
02:26 - you can read those licenses but just do it
02:30 - and simply hit install.
02:33 - So I'm gonna hit install
and type in my parseword.
02:35 - Let's wait for the install.
02:37 - All right, so our download was successful.
02:40 - Move to trash.
02:42 - All right.
02:44 - After you're done installing it,
02:46 - I want you to do something simple
02:47 - and look for an app called Idle.
02:49 - You should now have it.
02:52 - And effectively here you should be
02:54 - able to run your Python code.
02:55 - Let's try five plus five.
02:56 - Boom is giving us something.
02:58 - 10 times 20, yes.
03:00 - X is equal to five, X times
five, 25, it's working.
03:05 - Print hello.
03:08 - It's all working, amazing.
03:10 - We're up and running you guys
03:11 - in just, I don't know,
less than five minutes.
03:14 - Let us simply type in our terminal.
03:19 - If you're sitting on Mac,
03:21 - you would need to type in
term like this, hit Enter.
03:25 - And you should come to this screen.
03:27 - And if you type in Python,
03:29 - it should not be running
your Python as well.
03:32 - And you should be able to
just type your code in here.
03:34 - So this is how you install Python.
03:37 - And I will see you in the next video.
03:39 - (gentle music)
03:43 - Okay guys, back to where we left off.
03:45 - So we just did some simple
stuff in Python, right,
03:49 - we can print stuff by doing this,
03:51 - and then it prints it out to the screen.
03:53 - That's cool.
03:55 - Now what we wanna do is we wanna take it
03:57 - to a little bit of a next level.
04:00 - I want you to come up
here and select New File.
04:04 - Okay, this brings up this file here.
04:08 - Let's go back to our other screen.
04:11 - And let us simply put
this to the right side.
04:16 - Let's put this to the left side.
04:19 - And what I wanna do is I want
to write a few things here
04:22 - like print hello.
04:25 - Print monkeys eat bananas
04:31 - all the time.
04:33 - And then I want to say,
04:35 - and notice how I'm putting these quotes.
04:37 - We will learn a little
bit more about that later.
04:40 - And then I can say print
five times 25, okay.
04:46 - And I am gonna run this,
04:50 - so I'm gonna save this first.
04:54 - You can save it anywhere you would like.
04:57 - Let's for our purposes,
let's save it in our desktop,
05:01 - or let's do one better.
05:03 - And let's go here.
05:05 - And let's call this practice exercises.
05:09 - And we will save it in here printing.
05:14 - And I'm gonna go to run
and hit Python shell.
05:19 - And you're going to see what happens.
05:21 - So I'm gonna say run
and actually run module.
05:23 - Okay, so I'm gonna say run module,
05:25 - that just means run this whole
thing that we just wrote.
05:28 - So let's run it.
05:29 - Let's check out what happens.
05:31 - Boom, on the left hand side,
it ran our entire file, okay.
05:36 - On the left hand side,
everything you type in,
05:41 - gives you the result right away.
05:42 - So you can write four
times eight, 20 times six.
05:46 - But on the right hand side
05:47 - notice when I press enter nothing happens.
05:50 - So you're kind of like
writing a story here.
05:53 - That's how I like to think of it.
05:54 - You're writing kind of a novel.
05:57 - And this is almost you having
a conversation with Python.
06:00 - You're like, hey Python, what's up?
06:02 - Or in pythons language, eight times eight.
06:05 - And Python is like 64.
06:07 - Here, Python is not listening to you,
06:10 - you write out your entire,
whatever you wanna write,
06:13 - and then you send it over to Python.
06:15 - And then Python responds to all of that.
06:19 - Almost like you're
sending an email to Python
06:21 - and Python is sitting there.
06:23 - And once it sees your email,
it'll type stuff back to you.
06:27 - Okay, let's run it again
just to check what happens.
06:31 - And I will run and you
can see that it runs
06:34 - all of that at the same time.
06:37 - So what I want to do is,
06:40 - I wanna give you guys a little problem.
06:42 - And the problem is how
would you print hello world.
06:45 - Okay, and I wanna be able
to test this for you guys.
06:49 - So what I've done is I've set
up something kind of cool.
06:53 - I want you to go on, open a new tab,
06:56 - I want you to go to clever programmer.com.
07:00 - And once you're here,
07:01 - I want you to click on
learn Python for beginners,
07:04 - notice that it's free.
07:06 - So simply go to that.
07:08 - And here I've put together
07:09 - a little exercise for you guys, okay.
07:11 - So once you start this course,
07:14 - you feel free to watch
all of this on YouTube,
07:16 - it's available for free.
07:18 - If you want you can also go to my website.
07:21 - And here it'll give you
a little progress bar
07:24 - and everything and you can comment
07:25 - and I can respond to you as well.
07:27 - And here, this is where I'll
also put all of the exercises.
07:31 - So if you guys want to
follow along this course
07:33 - and do the exercises,
07:34 - this is where you can come and find them.
07:36 - So let's click exercise one and start.
07:39 - Now notice you have a quiz here.
07:41 - It says how do you print out hello world?
07:44 - So I'm not going to
answer that for you here.
07:47 - Although I'm sure you can figure out
07:49 - and we want it to look
exactly like this in Python 3.
07:52 - Just a little bit about
Python 3 versus Python 2
07:56 - is if you do this in Python 3,
08:00 - you're gonna get an error.
08:01 - So let's just try it out
on the left hand side,
08:03 - let's say print 10.
08:05 - You can see that we get an error.
08:07 - And if I do print 10,
I don't get an error.
08:12 - So in Python 3, this is the
correct way of doing it.
08:14 - In Python 2, you can do it just like this
08:18 - and actually will not give you an error.
08:19 - Okay just something for you to know.
08:22 - So here I want you to
select the correct answer.
08:25 - And another thing I made for you guys
08:27 - is if you click this link,
08:31 - what I've put together is so simple,
08:34 - you'll have to like sign
up, it will be really short.
08:37 - And once you're done doing that,
08:38 - just click on exercise one.
08:40 - And on the right hand side,
08:42 - you see that I want you
to print out hello world.
08:46 - Alright so now that you're here,
08:48 - let's type in something
like print 25 times 63.
08:53 - And let's run it.
08:54 - It gives me 1575, great,
08:56 - let's hit submit, let's see what happens.
08:59 - Oh whoops, says output mismatch,
and you fail to correct,
09:04 - you fail to answer it correctly.
09:06 - Okay so you can click What's wrong?
09:09 - And it'll kind of tell
you what the answer is.
09:10 - Or you can hit submit anyway.
09:13 - And then it might also tell
you what the answer is, okay.
09:16 - But I want you to try to figure it out.
09:17 - And I'm sure you probably already have.
09:19 - So I'm not gonna tell
you that the answer is,
09:21 - but once you write the correct answer,
09:22 - it'll give you a little
green thumbs up and say,
09:24 - Hey good job you got it, okay.
09:26 - So now, I want you to
try it and I'll see you
09:30 - in the next video.
09:32 - (gentle music)
09:36 - Okay in this video, I wanna
talk about the turtle.
09:40 - So what is the turtle you might be asking?
09:42 - Well, we're gonna find out.
09:44 - Before we get into some of the more boring
09:47 - or the technical stuff,
which is actually really fun.
09:49 - But before we get into that,
09:51 - I want you to be able
to visualize the code.
09:53 - I want you to be able
to see that what we type
09:56 - and what we do, you can do
something fun with it right away.
10:00 - Okay and this is not just
something for maybe kids,
10:05 - this is something that's
gonna be very valuable,
10:07 - I don't care how old you are
even if you're 200 years old.
10:10 - Because visualization is a key tool.
10:13 - So if I show you that now,
10:15 - I think is gonna benefit
you in the long run.
10:17 - And also sometimes when
you're confused about things,
10:20 - you can try this thing out that I'm gonna
10:22 - about to show you right now,
10:24 - to maybe make those examples
and concepts more concrete
10:29 - that you might be a little hazy about.
10:31 - Without further ado, let's get started.
10:33 - So what we're gonna do
10:35 - is start doing something with the turtle.
10:38 - So I want you to do import
turtle as your first line, okay.
10:43 - Import this secret command here.
10:46 - What it means is that some programmers
10:49 - who stayed up really late at night
10:51 - and wrote code and ate ramen
noodle and that's all they did.
10:55 - They spent hundreds and thousands of hours
10:57 - writing all this code for you.
11:00 - You just get to steal
it by typing in import.
11:02 - So basically think of it
like you have amazing powers
11:06 - at the tip of your fingers
by using this command
11:08 - import and you get all those powers, okay.
11:11 - Let's do my turtle is equal
to turtle.turtle, okay?
11:18 - And what we're gonna do is
we're gonna say my turtle.
11:25 - I don't know, let's do
something simple like move,
11:28 - or sorry, forward 100.
11:33 - Alright so let's see what just happened.
11:39 - All right, what is going on there?
11:41 - Right, let's close that,
let's start it again.
11:43 - So I'm gonna write this line again.
11:45 - And we're gonna kind of
do like a slow motion.
11:47 - Okay we're just gonna play it out again.
11:49 - So I said my turtle right
after this first line
11:54 - that I did, right, my
turtle showed up here okay.
11:59 - Just to make it even clearer for you guys,
12:00 - I'm gonna start this thing again.
12:02 - And I'm just gonna write
the first line that I wrote.
12:04 - So you can see my turtle showed up, okay?
12:07 - Now let's say I'm gonna do my turtle.move,
12:11 - or sorry, I keep saying move.
12:13 - Let's do forward, and let's do 100.
12:15 - Yeah, let's try it,
let's see what happens.
12:19 - Do you see that thing go to the right?
12:22 - So that thing went to the right.
12:25 - Now what if I wanted to move it up?
12:27 - Well what you need to do
is essentially it's like,
12:32 - okay, it's like this,
12:33 - I want you to look at my face right now.
12:36 - So if I'm the turtle, and I'm
going in this direction here,
12:40 - I will go like this much.
12:42 - And then in order for me to turn left,
12:45 - what I need to do is first turn
90 degrees left, like this.
12:50 - And then to move forward,
12:52 - I just go forward, right like that.
12:56 - Okay so we're gonna do
that with our turtle.
12:59 - So let's do my turtle.left,
how many degrees?
13:04 - 90 degrees, okay.
13:07 - Now if you notice the turtle,
13:08 - now it's facing towards the left
13:10 - and it's looking at going up.
13:12 - So we simply do
myturtle.forward 100 again,
13:19 - and you can see my turtle
is right over here.
13:24 - Now let's do some more fun stuff.
13:26 - Let's say myturtle.right 50.
13:32 - And let's say
myturtle.forward, again, 100.
13:40 - And you can see we're starting
13:41 - to make interesting shapes now, right.
13:43 - Like, what is that?
13:46 - Maybe it could be a shirt, it's a ladder.
13:50 - I don't know, I don't know what that is.
13:53 - But here's what I want you to do.
13:55 - I want you to create a
square with the turtle, okay?
13:59 - And I want you to copy
whatever code that you wrote,
14:02 - and I want you to paste
it in the comments.
14:04 - So either if you're
watching this on YouTube
14:06 - or if you're watching this on my website,
14:08 - on Cleverprogrammer, I want
you to go to exercise two,
14:12 - the turtle, on cleverprogrammer.com.
14:15 - And I want you to literally copy
14:18 - whatever code you have and paste it here.
14:20 - Okay, I read every single
one of your comments,
14:23 - and I will go through it
and I'll comment on it.
14:25 - And other people will get to
see what you're up to as well.
14:28 - Okay, also on my website,
I've linked you guys
14:32 - to a blog that says read this
14:34 - on how to do more fun
things with a turtle, okay.
14:37 - So if you go to this blog,
14:40 - it'll teach you what more
fun things you can do.
14:43 - Okay so it teaches you how to create stars
14:46 - and some really fun shapes.
14:48 - Okay, so that is it for this video.
14:52 - I will see you in the next video.
14:55 - (gentle music)
14:59 - Okay in this video, I'm
gonna go over the solution
15:01 - of the previous problem
that I posed to you.
15:03 - And also we're gonna learn
how to write the turtle,
15:06 - the entire thing in one go.
15:10 - So the problem that I post you
15:12 - is make a square with the turtle.
15:15 - Well in your case, let's see
how you could do exactly that.
15:19 - So let me find the file where
we opened up the turtle.
15:22 - Let me close that guy right there,
15:24 - copy this line and paste it.
15:27 - Right there, okay, my turtle has begun.
15:30 - Well, the idea is simple.
15:33 - I take this line forward and go 100.
15:37 - Now since sometimes programmers are lazy,
15:39 - I don't wanna keep writing
this over and over again.
15:41 - So one thing I can do
to make my life easier,
15:44 - is go to the line that I want to click on.
15:47 - And I want to use basically,
15:49 - go to that line, click my mouse there,
15:51 - hit enter, it brings
that down at the bottom,
15:54 - as you can see right here.
15:55 - And now I can just hit enter.
15:58 - So you can see my turtle
just move left, okay.
16:01 - Now it's facing up.
16:04 - Now what I want to do is move it forward.
16:06 - Again, and you can see
that it's facing up again,
16:10 - or I'm sorry, it moved up.
16:12 - Now I need to make it face left.
16:15 - So how do I do that?
16:16 - I go to left, make it turn 90 degrees.
16:19 - And you can see it turn 90 degrees.
16:21 - Now I want it to move 100 again,
16:24 - you can see it move forward,
16:26 - and 90 degrees and then 100 once again
16:30 - and I have made the square.
16:33 - Now what I want you to be able
to do is make a Python file,
16:38 - which means that remember
this thing that we opened up,
16:43 - right right here, where we
write all of the code at once.
16:47 - So for example, I'm gonna close it,
16:50 - I'm gonna show you how to open it again.
16:51 - Okay, so I'm gonna close this one
16:54 - and I will simply open it again.
16:55 - New file or command N,
16:59 - and I will go and put
it to the right side,
17:01 - just so I have the side by side.
17:04 - And I will say something
like import turtle.
17:07 - Remember that command if
you don't use that command,
17:10 - and you try to do turtle,
17:11 - your program and be like,
what the heck is turtle?
17:15 - So by doing import turtle,
now it knows what turtle is.
17:19 - It's like when you're
talking about your friends.
17:23 - If you talk about your friend, John right,
17:26 - like let's say you're talking
about your friend John
17:29 - to your mom or to your dad.
17:30 - And you're like, Dad,
this guy, blah, blah,
17:34 - your dad is gonna be like,
Who the heck is John?
17:36 - So you're gonna be like,
oh, yeah, you remember John
17:39 - from my fifth grade class.
17:42 - And then your dad, if
you're talking to him,
17:43 - he's gonna say, oh okay, I
know who you're talking about.
17:46 - So important is basically like,
17:49 - hey Python, important that turtle
17:51 - that those coders wrote,
and now we can use it.
17:54 - And Python is like, oh that turtle.
17:57 - But if you don't have this
important command here
18:00 - Python is gonna be like, what the heck?
18:01 - What turtle are you talking about?
18:03 - You must be out of your mind.
18:05 - Anyways, we're gonna import this turtle.
18:08 - All right, so now here's
what I want you to do.
18:10 - I want you to write a script
18:12 - that makes the turtle
in one single go, okay?
18:17 - And I want you to make that square
18:19 - with the turtle straight up in one go.
18:21 - For example, let's come over here
18:23 - to our script that I've written.
18:26 - And if I write stuff here,
it does things immediately,
18:28 - right, as you saw.
18:30 - But if I come to my right side over here,
18:33 - oh, by the way, just one quick note,
18:35 - whatever you do not name
this file turtle.py.
18:40 - You can name it turtle underscore game,
18:42 - or a game or something else.
18:44 - Just don't name it turtle,
18:46 - because then it confuses this turtle here
18:48 - with this file and everything
goes all over the place.
18:52 - So don't do that because
I ended up doing that
18:55 - and caused lots of problems.
18:57 - Alright, so let me just
show you what happens
19:00 - when I run this file.
19:01 - I'll go to run, I'll hit
run module and hit okay.
19:05 - And you can see that my turtle went
19:07 - and did all those things in one go.
19:09 - How cool is that?
19:10 - So you don't have to sit
there and type it all in,
19:12 - you can just write it in one go.
19:13 - And it'll do that every single time.
19:16 - So I want you to work on that square.
19:18 - But before you go and do that,
19:20 - I just wanna show you what
this file actually looks like.
19:23 - So if I go to, let's say documents
19:30 - and cleverprogrammer practice exercises,
19:34 - and we take a look at
this file, turtle game.
19:37 - It's just a text file
with this code in here.
19:40 - Okay, that's really it.
19:42 - That's all that's going on in here.
19:45 - So I'm gonna leave it here.
19:49 - The code that you write for the square,
19:51 - I want you to either go
to the YouTube place,
19:54 - YouTube channel, and
post it in the comments.
19:57 - Or I want you to paste
your code right here
20:00 - in the comments on cleverprogrammer.com.
20:02 - Okay, I'm gonna take a look at it.
20:04 - I will see you in the next video.
20:07 - (gentle music)
20:11 - Now, in the last video we talked about
20:14 - how can you make a script
20:16 - that creates a square in one go, right?
20:21 - So I gave you an example of a script
20:24 - that does not make a square in one go.
20:26 - So I'm gonna start off in this video
20:29 - talking about how to do that.
20:31 - So I'm gonna solve that problem.
20:33 - If you haven't done it go
still try to do that problem.
20:37 - But I'm gonna go over the solution.
20:38 - And then after that,
we're gonna talk about
20:40 - what the heck are variables.
20:41 - So let's keep going.
20:43 - So here if I run this code, right,
20:47 - notice what actually happens.
20:48 - We get this thing but we don't want it
20:51 - to go to the right and down we want it
20:52 - to keep going till it makes a square.
20:54 - So I'm simply going to copy
this code and paste it again.
20:59 - Except for this line, I oops,
21:04 - I wanna turn 90 degrees and
then I wanna turn 90 degrees
21:08 - and go straight one more time.
21:11 - So let's run this bad
boy and check it out.
21:13 - Let's see what happens.
21:14 - Okay and boom, we have gotten a square.
21:20 - So if this was your
code, and you copied this
21:23 - and you went over to clever programmer.com
21:27 - or you went to YouTube, my YouTube channel
21:32 - and pasted it in below,
that would be exactly
21:36 - what you would need to do.
21:38 - Okay, so simple go to
Python for beginners,
21:42 - and simply go turtle in one go,
21:46 - and you can paste the code right here.
21:48 - Okay back to what we were talking about.
21:54 - Whoops, the video actually started.
21:57 - So let's talk a little
bit about variables.
22:01 - Variables are very simple.
22:03 - It just allows you to store
information somewhere,
22:07 - instead of having to say,
22:09 - oh yeah, my friend with the white skin.
22:12 - Or he has this length hair, and his nails
22:16 - are this long and he's this tall.
22:19 - Instead of saying all of that,
22:21 - we store all that information in his name.
22:23 - So we just say John, or
Bob or whoever, right?
22:28 - That's exactly how variables are.
22:30 - Instead of saying all
these things at once,
22:32 - or having to remember them,
22:34 - you just store it in a
variable and then you just,
22:37 - recall that variable and that's it.
22:40 - So something really simple I can say,
22:43 - Bob, right, is five years old.
22:48 - He is 68 inches tall.
22:53 - And where's brown suits.
22:58 - Okay, now if I say Bob, you can see Bob.
23:02 - Or if I say x is equal to some big number,
23:06 - good luck trying to remember that number,
23:08 - but it's pretty easy to remember x, right?
23:10 - So you can say x and
you can say x plus 10.
23:14 - Or you can say x minus x and
you should get back zero.
23:18 - Anyways that's variables are very simple.
23:22 - On the left hand side,
23:23 - you put what you want to
store information into
23:26 - and on the right hand side,
23:27 - you put what you want to store in there.
23:31 - Okay that's it about variables.
23:33 - I'll see you guys in the next video
23:34 - where we talk about strings.
23:37 - (upbeat music)
23:41 - All right in the last video,
we talked about variables,
23:43 - you can see some basic examples.
23:45 - I stored all this information
in the variable Bob,
23:48 - and then as soon as I typed in Bob,
23:50 - I got back all of Bob's information.
23:53 - Just a quick thing I wanna
say before I continue,
23:56 - if any of you are having
problems downloading
23:58 - and installing this Python
stuff that I've shown you.
24:01 - If you're on Windows, or
Mac or any other system,
24:05 - I wanna show you a quick,
24:06 - I wanna really quickly show you a website
24:09 - where you can get all of this information,
24:13 - or you can pretty much do everything
24:15 - we've been doing right on here.
24:18 - The website is called trinket.io.
24:21 - Okay, and here's how it works.
24:24 - So on the right hand side, you can see
24:27 - that if I run all of this code,
24:30 - it draws all of that stuff, okay?
24:32 - And they have a bunch of great examples
24:35 - for you guys to try out.
24:37 - So you can go to Python,
and you can discover
24:40 - a bunch of great examples that you can do.
24:43 - Okay so for example, you can
look at this example here,
24:48 - and maybe get an idea of how to make
24:51 - some really cool shapes using
the turtle module in Python.
24:56 - Okay, so let's stop their
code and let's start ours.
25:02 - So if I do import turtle
here, and I do my turtle,
25:07 - or you know, you can call
it really whatever you want.
25:10 - You can call it my John if you want
25:12 - is equal to turtle.Turtle.
25:15 - And if I say my John.forward100
25:22 - and I run this,
25:25 - invalid object has no,
25:27 - okay I misspelled turtle here, run it.
25:30 - And you can see that a draws
a turtle going forward.
25:33 - Now let me bring back their code.
25:37 - And let's do it.
25:39 - So for example, where it says black here,
25:41 - let's write blue.
25:44 - Okay pen color, background color that is.
25:47 - So you see, we change
the background color.
25:50 - So that's a good way to see
what this stuff is doing.
25:53 - You can change this color to orange maybe,
25:56 - and see what that does.
25:57 - Okay, so the first turtle that gets drawn
25:59 - is that being drawn by an orange color.
26:02 - Okay so great place to
come and try out stuff.
26:07 - Okay, trinket.io.
26:10 - Now, going back to learning about strings.
26:15 - So let's go over here and strings
26:18 - is literally the exact
thing that you type, okay.
26:21 - So let's say I wanted to say hello world.
26:24 - If I did print hello world,
I would get back and error.
26:27 - And the error would say invalid syntax,
26:30 - I don't know what you mean.
26:31 - So let's try to type
it in the Python 3 way
26:34 - where you have to put a
parentheses after print.
26:37 - Because print is something
called a function
26:39 - which we will cover later.
26:41 - So let's try hello like
this and hit Enter.
26:45 - And you can see the error I get it says,
26:48 - name hello is not defined.
26:51 - So it has no idea what
you're talking about
26:55 - when you write hello here.
26:56 - It's looking for the variable hello.
26:59 - We have the variable Bob here,
27:01 - we have the variable x,
27:02 - but we never defined variable hello.
27:05 - But you're like, no, that's
not what I'm trying to tell it.
27:07 - I'm trying to tell it to
exactly like, say hello.
27:12 - Not some variable, hello, that might have
27:14 - some numbers in it or
something like that, right?
27:17 - It's not like you're doing
hello is equal to five
27:20 - and then printing out hello,
and it gives you five.
27:23 - Well in this case,
27:26 - if you wanted to say exactly
what you wanted to say,
27:28 - you have to use something called a string.
27:30 - So that just simply means
putting that thing in quotes.
27:34 - So now Python goes, oh, you want me
27:36 - to say exactly Hello like this?
27:38 - And then will say hello.
27:39 - Now let's say I wanted to
say print hello world, right?
27:43 - If I do, space here, is
just gonna give me an error.
27:46 - It's gonna be like a variable
27:48 - with a space in between a variable.
27:50 - I have no idea what you mean.
27:52 - So now if you put both of these in quotes,
27:55 - will go, oh you on the string
27:58 - that literally says hello world.
28:00 - Exactly like that, I understand,
28:02 - I got you let me do it for you.
28:05 - Okay, simple enough, cool.
28:08 - That's it for strings.
28:10 - I'm gonna keep it really simple,
28:11 - I'll see you in the next video.
28:14 - (upbeat music)
28:17 - Okay, so this part now naturally leads us
28:22 - to fun, fun functions.
28:24 - All right, so let's talk about that.
28:28 - All right, so what we have done
so far has been really cool.
28:34 - We figured out how to draw a square.
28:37 - And we figured out how to
write it as a Python script.
28:39 - So when we run it, it
all runs at the same time
28:42 - instead of running it here one by one.
28:45 - We also learned about
variables and strings.
28:48 - So in here, the thing that's a
variable is my turtle, right?
28:53 - And then we keep using that
variable over and over again.
28:57 - Let me ask you a simple question,
28:59 - in this program right here,
29:00 - is there a single string
that we're using anywhere?
29:05 - Yes or no?
29:06 - What do you think?
29:06 - Three, two, one,
29:09 - there isn't any strings
that we're using here, okay?
29:11 - What we are using here are integers.
29:14 - And integers are just whole numbers
29:18 - from negative infinity to
positive infinity, right?
29:21 - So you have negative,
you could have 100, 90.
29:24 - But if you have 90.2, that's not your,
29:28 - that's not an integer, right?
29:30 - That's something else
which we will discuss.
29:33 - But up to this point, I think that we are,
29:39 - this naturally leads us to functions.
29:41 - So let's talk about that.
29:44 - Notice that when this
part of the code runs,
29:47 - what it does, right?
29:49 - This part of the code I
want you to just kind of
29:51 - memorize it for now.
29:53 - You're not gonna really understand
29:54 - what it means until we get to
object oriented programming.
29:58 - But I want you to just focus on this part,
30:00 - and what does this part do?
30:02 - So let me just simply run the code
30:04 - and let's see what that
part does once we run it.
30:09 - And it goes and it draws a square, right?
30:12 - So this part of the code draws the square.
30:21 - Okay, that's cool.
30:22 - What if we wanted to make,
30:27 - whenever we want to make a square, right?
30:31 - It seems like we would
have to copy this code
30:33 - and write it again.
30:34 - So for example, let's say
my turtle.forward 100.
30:41 - And let's see what happens.
30:43 - I'm gonna save it and I'm gonna run it.
30:49 - Okay, so I'm gonna move it forward.
30:51 - And now I'm gonna try to
like draw another square.
30:56 - So I'm just gonna copy paste that code.
31:03 - Oh cool kind of looks like
glasses or something, right?
31:07 - So let's go back.
31:11 - This is a square.
31:14 - And this part is a square, right?
31:18 - So every time we have to draw square,
31:21 - we have to copy this whole bunch of code
31:24 - and write it again and again every time.
31:28 - Well think about this when we had,
31:30 - back when we were using variables.
31:33 - Did we have to remember
all of these numbers?
31:37 - No we just stored it in x.
31:39 - So I'm gonna teach you guys a trick
31:40 - where you can take this
entire block of code
31:44 - and kind of give it a name
like a variable name almost,
31:47 - but it's a little bit different.
31:49 - And when you assign
something to a block of code,
31:52 - it's called, it puts it in a,
31:54 - you put it in a function, okay?
31:57 - So here.
31:59 - It's all gonna makes sense.
32:01 - So I'm gonna remove this up at the top.
32:06 - Oh, a quick thing, just in case
32:07 - you guys don't know what this is,
32:09 - this is called a comment.
32:10 - Okay, anything that you write
32:12 - with a hashtag in front of it,
32:14 - you're telling Python to ignore that part.
32:17 - Okay I don't want you guys to
get confused by that, okay.
32:20 - So for example, if I write hi here,
32:23 - it'll just ignore it.
32:24 - But if I write hi here,
32:26 - it will give me like
an error or something.
32:29 - So hashtag means I'm putting a comment,
32:31 - and it's only for humans to read.
32:34 - So now let's turn it into a function.
32:35 - So I'm gonna say D-E-F,
that means like defined,
32:39 - and we're gonna define some function.
32:41 - So what does this thing do?
32:43 - It draws a square, right.
32:45 - So I think it would maybe make sense
32:48 - if we call this function a square.
32:51 - And whenever you create a function,
32:53 - you have to put open
close parentheses after it
32:56 - just like that.
32:58 - And put a colon okay.
33:00 - And now everything that you want part,
33:03 - everything that you want to
make part of that function,
33:06 - you have to indent it.
33:07 - So what I'm gonna do is go here, hit tab,
33:10 - go here, hit tab, go here, hit tab.
33:12 - Whoops, and then you
can also just highlight
33:16 - that part of the code
that you want to move
33:18 - and just hit tab all at once.
33:19 - Okay it'll move it for you.
33:22 - Now, let's see what happens
when we run this code.
33:29 - So I'm using the shortcut to run the code.
33:33 - That's weird.
33:34 - It's not really moving anywhere, right?
33:36 - Think to yourself, why is that happening?
33:40 - Okay, let me tell you this.
33:42 - If I wanted Bob,
33:45 - or let's say x to be this number, right?
33:50 - And I want it to make x
spit out that number, right.
33:55 - Print that number out to the screen.
33:56 - Well define x to be something
33:59 - that's not The part that
does the spitting out,
34:02 - that's just me defining what x is, right?
34:05 - But the part that does the spitting out
34:06 - is when actually say x and hit Enter,
34:09 - and it does something.
34:10 - So if I do banana is yellow.
34:15 - Then if I want to say,
the yellow part right,
34:19 - I would actually have to say banana
34:21 - and then it spits out yellow.
34:23 - Just like that me defining a function
34:27 - doesn't call the function,
34:29 - doesn't actually use the function.
34:31 - So I actually have to call the function
34:33 - or use the function to
make it do something
34:35 - and make it, like spit it out pretty much.
34:39 - So here I'm gonna say square, okay?
34:44 - So like, if you were born
and somebody gave you
34:47 - the name, Jimmy, that's
them giving you a name.
34:51 - They're not calling you Jimmy.
34:52 - They're not telling
you to come over Jimmy.
34:54 - They're just giving you a name,
34:56 - attaching that label on to you.
34:57 - Then later when they want to
call you, they go hey Jimmy.
35:01 - And you're like what's up?
35:02 - Right?
35:03 - Like Jimmy, come here.
35:05 - And then you respond to them, okay.
35:07 - So just like that we gave
this function a name, square.
35:12 - And here we're calling it.
35:14 - So now let's see what happens.
35:17 - So I'm going to run this.
35:24 - Look at that, right?
35:26 - It made a square.
35:27 - Well, what does that mean?
35:28 - What if we want it to do that same thing
35:31 - where we move forward 100.
35:33 - And we wanted to make another square.
35:35 - So let's say I put this
line move forward 100.
35:40 - And then I want to make another square.
35:42 - How would I make another square?
35:44 - Should I copy all this code
and then paste it right here?
35:50 - No, the trick is that I just
call that function again,
35:54 - that makes the square right.
35:57 - So let me run it.
36:04 - Okay, how cool is that?
36:06 - So why do we create functions?
36:09 - Hopefully it's clear to
you, we create a function.
36:13 - So we can just reuse that
code over and over again
36:16 - without having to write
all of that stuff again
36:20 - and again and again, okay.
36:23 - To make it a little bit cooler,
36:25 - another thing I'll show
you about functions
36:28 - in the next video is how
we can give arguments
36:31 - to functions, okay, or parameters.
36:33 - So until then, I'll see
you in the next video.
36:37 - (upbeat music)
36:41 - So in the last video,
we left off at talking
36:44 - about how to make a function.
36:47 - So we wrapped up our square in a function
36:50 - and that way, we were really
easily able to use a square.
36:54 - And this way we can use the square
36:56 - as many times as we
want, and it's very easy.
37:00 - So what, let's do something cool.
37:02 - So I said, let's talk about the idea
37:05 - of arguments or parameters in a function.
37:08 - So what we wanna be able to do is,
37:10 - let's say that instead of 100,
37:13 - what if you wanted to move
37:14 - at different length every single time?
37:17 - So let's say, we don't wanna be boring
37:19 - and just move, I don't know, 100 steps.
37:23 - So let's take a look at it.
37:24 - Let's say we don't wanna move,
37:26 - oh, I didn't call it anywhere.
37:28 - Let's call it again.
37:30 - And I'm gonna remove this line here.
37:33 - Okay, let's run it.
37:37 - Okay, and let's say we
don't wanna be boring
37:39 - and make a really small square like this.
37:41 - Let's say we want to maybe go 200 steps.
37:44 - Okay, so let's try it.
37:46 - Let's go 200, 200,
37:50 - 200, 200 and let's take a
look at what that looks like.
37:58 - Nice the square look better.
38:01 - Let's try to tweak it a little bit.
38:03 - And let's make it I don't know. 240, 240,
38:09 - 240, 240.
38:15 - Let's see, that looks pretty cool.
38:18 - But what if I wanted the turtle
38:19 - to go all the way to that edge perfectly,
38:22 - and then go down and then go to the left
38:25 - and then come back up?
38:26 - Okay, let's try something.
38:29 - Let's try 280, 280, 280, 280.
38:36 - And hopefully, oh, still
not hitting the exact.
38:42 - So maybe let's try 290 or something.
38:44 - So I hope that you're seeing that we have
38:46 - to change these values here a lot, right?
38:51 - We have to change it every single time.
38:53 - And we have to change all four of them
38:55 - in all of those locations,
38:56 - which is kind of annoying.
38:58 - So how can we make it so we don't have
39:00 - to constantly change all those values,
39:06 - again and again, it's kind
of really frustrating.
39:09 - We wanna make it, so we
just change it one time
39:11 - and it changes it everywhere.
39:14 - So let's say, I don't
know, let's call it n.
39:20 - Okay, let's make it a variable
that's the same everywhere.
39:23 - So let's just call it n.
39:25 - And I'm gonna make a variable here,
39:28 - and I'm gonna call it n.
39:29 - And I'm gonna say go 250.
39:32 - Okay, so now everywhere n is we have 250.
39:37 - Okay, so let's try to
run this bad boy now.
39:42 - Okay cool 250.
39:44 - Let's make that really
small, let's say 50.
39:50 - Okay, that was really small.
39:52 - So that's pretty cool.
39:53 - We were able to use that
39:54 - and that made our life really easy.
39:57 - But a lot of the times,
39:59 - we don't wanna Change the function itself,
40:02 - like the definition of the function here,
40:04 - its job is to make a square.
40:06 - And that's all it should
need to know how to do.
40:10 - And we want to be able
to give it something
40:12 - which based on which it changes,
40:16 - it changes the length of it, right?
40:19 - So like how far it goes or
how big the square is, okay?
40:23 - Maybe you can think of it like
40:27 - in English, if you have
a definition of a word
40:30 - that you look up.
40:32 - Once you learn that word,
40:33 - you can use it in whatever
way you want, right?
40:36 - But it really depends on the context.
40:38 - For example, if you wanna say,
40:40 - wow, man, you really killed it.
40:42 - You're basically saying
you did a really good job
40:45 - and you did amazing.
40:46 - Or if you said, man,
you just really killed
40:49 - that thing for me.
40:51 - You really killed it for me.
40:52 - I don't even find it fun anymore.
40:54 - Now you're using it and it,
40:57 - now the context is basically that somebody
40:59 - really made something
less enjoyable for you
41:02 - or discouraged you in some way.
41:05 - So the word killed in this case, right?
41:08 - It has a completely different meaning.
41:10 - But based on the context,
we change it, right?
41:13 - Well, depending on what
context we give it,
41:15 - we change the word kill.
41:17 - But we shouldn't actually go and change
41:19 - the definition of the word kill
41:20 - every time you want to use it
in a different context okay?
41:24 - So what I'm trying to say here
41:25 - is instead of changing
the function itself,
41:29 - let's do something really cool,
41:30 - let's give it context okay.
41:32 - So I'm gonna say a square
takes in some input n,
41:37 - so whatever and I give it,
it just puts that in here.
41:40 - And instead of calling it n,
41:42 - let's make it more fun and call it length.
41:45 - So everywhere I see n,
41:47 - I'm just gonna replace it with length.
41:50 - So now the cool thing
that's gonna happen is
41:53 - if I give it the length of five,
41:55 - everywhere it sees length is
just replaces it with five.
41:58 - If I give it the length of
let's say I don't know 200,
42:02 - they'll go everywhere and
replace everything with 200.
42:06 - Okay, that way we'll get a longer square.
42:09 - So let's try it.
42:11 - If I run this right now,
42:13 - I'm gonna get an error and let's see why.
42:17 - Okay, I got an error and
the error says type error.
42:22 - The function square, right,
42:24 - that's what the parentheses
afterwards it means.
42:27 - Missing, that is missing one required
42:30 - positional argument length.
42:32 - So we're supposed to give it something,
42:35 - we're supposed to give it context, right?
42:38 - Like the word kill, we give it context
42:40 - and it changes the whole
meaning of the thing.
42:43 - So here in square we're
gonna give it the length.
42:46 - So let's say for length we say hundred.
42:48 - Okay, now let's see what happens.
42:50 - Let's run it and we get a square
42:53 - that it goes 100 in each direction, right.
42:57 - So what just happened?
42:59 - We parseed in the 100 here,
43:01 - which really parseed
in the 100 here, right?
43:04 - And since there is 100 here
it became 100 everywhere else.
43:08 - And so we got a square that's a size 100.
43:12 - And we can effectively do the same thing.
43:14 - If I give it 300, that's probably
43:17 - not even gonna fit on the screen.
43:20 - Oh it pretty much does.
43:23 - It makes a bigger square, right?
43:26 - So now the only place I have
to change it is really here.
43:30 - This thing's job is to
now just make a square.
43:34 - That's all it does.
43:35 - And here we can tell it what,
43:38 - how big that square should be.
43:41 - So let's say that we
say make a square of 300
43:46 - and then make a square that's 150.
43:51 - And then make a square that's 100.
43:54 - Okay, let's see what that does.
43:56 - Let's see what that looks like.
43:59 - Okay that's 300, that's the 150,
44:03 - and that's the 50.
44:05 - Whoa, that was cool, right?
44:08 - That kind of it was, it seemed like it was
44:11 - about to make some kind
of designed right there.
44:15 - Okay so hopefully you guys
44:17 - have a little bit more of an understanding
44:19 - of how arguments work.
44:22 - Just to take it maybe one step further.
44:24 - What if, think, what if
instead of these 90 degrees,
44:27 - you wanted to be able
to change the degrees?
44:29 - Maybe we can go in here, huh,
44:32 - and say, angle, right.
44:35 - And replace everywhere
we see 90 with angle.
44:41 - And so now we have to give our function
44:45 - not one but two arguments, okay.
44:49 - So let's say 300 and 90.
44:52 - So the 300 will replace the length parts,
44:55 - everywhere there's length it
will replace that with 300.
44:59 - And the 90 will replace angle.
45:02 - So everywhere it says angle,
it will replace that with 90.
45:06 - How cool is that?
45:08 - So let's run this bad boy and check it out
45:11 - what it looks like.
45:12 - We've seen this square
before multiple times, 300.
45:15 - But now let's add a twist.
45:17 - Let's make this 45 degrees,
let's see what happens.
45:26 - I don't even know what it did.
45:27 - Let's reduce the link
so we can at least see
45:29 - what it does, right?
45:32 - Let's run it.
45:35 - Whoa, that's kind of cool.
45:37 - It didn't make a square it
did something weird with it.
45:41 - Okay so I'm foreshadowing
multiple arguments.
45:45 - And in the next video,
we'll talk more about it.
45:48 - Alright guys, I'll see you there.
45:50 - (upbeat music)
45:54 - Okay so now that we've talked a little bit
45:57 - about functions with their arguments,
45:59 - and also a little bit about functions
46:01 - but multiple arguments,
46:03 - this naturally leads us to the next thing.
46:07 - What if I want to make that one square,
46:10 - but I want to make it multiple times?
46:13 - Sure, I can copy it and paste this line
46:17 - and paste it again, right.
46:19 - And then paste it again,
so on and so forth.
46:24 - So for example, let's try
having it paste it twice.
46:26 - I'm gonna remove these comments here.
46:29 - And just so you remember this
50 goes in for the length,
46:33 - it replaces every part
of the length with 50.
46:37 - This 90 goes for the angle,
46:39 - it replaces every angle with 90.
46:41 - That's how it works, okay.
46:43 - So let's go back real quick
and simply run this now.
46:48 - Okay, so I'm gonna hit the
shortcut key to run it.
46:53 - And you can see I said draw
two squares and it did.
46:56 - Yeah, but here is the concept
47:00 - here's the most amazing
concept in programming.
47:03 - Which is the concept of doing things
47:05 - over and over again, also known as loops.
47:08 - So if I said, I want
you to do 10 push ups,
47:13 - that's like a loop, okay?
47:15 - And every time you do a push up,
47:16 - I count one, two, three, four.
47:19 - And then once you hit 10,
I stop automatically, okay.
47:23 - So a way to say that here is you can say
47:25 - for push up in range 10.
47:29 - So for each push up, for
10 times, like do this.
47:33 - And this push up part, I
can call it whatever I want.
47:36 - I can call it this, I can call it i.
47:40 - We'll just keep it simple
and leave it at one letter i.
47:43 - And what we're gonna do is this part,
47:47 - all this part says is run
something 10 times, okay.
47:52 - That's what that part essentially says.
47:54 - If I run that code on the left hand side,
47:57 - if I show you a range of 10 gives me,
47:59 - it gives me this.
48:01 - So when I do range 10,
it won't really show you
48:04 - it kind of hides what it gives you.
48:06 - But in reality, it gives
you a list of 10 numbers.
48:10 - Okay, so we're going to talk
about more things like lists
48:13 - and integers and floating
points in our next video.
48:18 - But for now, I just
want you to think of it
48:20 - like it gives us 10 things.
48:22 - And so it runs 10 times.
48:25 - Okay, so if I did for i in range 10.
48:29 - And I said print i,
48:32 - what actually happens is
the first time in this list,
48:36 - i, the first time you run
through in this loop i is zero.
48:40 - Then the next time, right this range 10
48:43 - is really this list here.
48:46 - So i is zero the first time then it's one,
48:48 - then it's two, then it's
three, then it's four.
48:50 - And each time what happens in the loop
48:53 - is the part that's indented
inside of the loop.
48:56 - That's the part that runs over
48:57 - and over and over again.
48:59 - So what happens the first time i is zero,
49:02 - we say print zero and we
get to zero right here.
49:05 - Then we say i is one,
so i is one over here.
49:08 - And then it says print
one, we get one over here.
49:11 - Than in the last one,
i turns out to be nine,
49:15 - so we print nine and then
we get this nine over here.
49:19 - Okay that's a basic idea
of how the loop works.
49:23 - So the part that we want
to run over and over again,
49:28 - we're going to put it inside of this loop.
49:30 - Notice the colon at the
end, very important.
49:33 - And I'm gonna put this
part inside of the loop.
49:36 - And I don't even need to put that.
49:38 - I can just do this and I can say,
49:42 - I'm basically saying do this thing here.
49:45 - Draw square four times.
49:47 - That's all I'm saying,
49:48 - okay, and I will replace this code
49:51 - in the regular way without
looping, I'll prove it to you.
49:54 - Okay, so first let's run it like this.
50:02 - Dang, that was cool, right?
50:04 - That was really freaking cool.
50:07 - It just ran that four times in a row.
50:09 - Now, I can show you what I mean.
50:14 - Okay, and I'm gonna
comment out these lines.
50:20 - And you can see it's gonna draw
50:21 - that same four squares that we just drew.
50:24 - Okay, just like that.
50:26 - But by using a loop, your
code gets a lot more clear.
50:30 - What if you didn't
wanna run it four times?
50:32 - What if you wanted to
run it one million times?
50:36 - Yeah, it would be a lot harder
50:37 - to write that out one million times.
50:39 - But it's really easy to
write one million in here.
50:42 - I think that's one million.
50:44 - That's 10, 100, 1000,
50:47 - 10,000, 100,000, one million.
50:51 - That's actually 10 million.
50:52 - So there you go, 10 million.
50:56 - So this thing is gonna run
10 million times, right?
50:59 - If I ran I'm going to
close it really quickly
51:02 - because it's gonna keep running forever.
51:04 - But you'll notice that
it just keeps overlapping
51:07 - on the same square, that is
gonna do that 10 million times.
51:10 - So if I went to sleep and woke up,
51:12 - this will probably still be happening
51:14 - and then it will still
be happening after that.
51:17 - So let's exit that before
something crazy happens.
51:23 - Okay, so that's loops for you guys.
51:27 - That is it for this video.
51:29 - I will see you in the next video.
51:31 - (upbeat music)
51:35 - Hey guys, what's up?
51:37 - So in this video, I wanna talk
about primitive data types.
51:40 - Now we're getting into the
adult programming stuff.
51:44 - Okay getting out of the
little bit of the baby stuff,
51:46 - even though it's not baby,
but, let's just admit it.
51:51 - So let's talk about primitive
data types, what are they?
51:55 - Well, okay so let's start off with like
51:59 - basic one's first okay.
52:01 - And I also wanna clarify something
52:03 - about variables for you guys.
52:04 - So you can't start a
variable with a number.
52:08 - Okay, so if you say five is equal to,
52:10 - I don't know, hello, right.
52:13 - The string hello, you're
gonna get an error.
52:16 - So you gotta start it,
52:18 - you gotta start your
variable with a letter.
52:20 - Now you also can't start it with symbols.
52:22 - You can't say something like this
52:24 - is equal to hello, okay.
52:27 - You're gonna get an error.
52:29 - You can combine underscores
with your variables.
52:32 - You can say hi, hello,
something like this.
52:36 - Okay and that would work for you.
52:40 - Okay primitive data types, what are they?
52:42 - So if I have this thing
in the green that you see,
52:46 - that as a string, all right.
52:49 - So in this video, I think we
can just keep it like this.
52:56 - Okay so that's a string, hello.
52:59 - Anything with quotes around it,
53:00 - and you can also put
double quotes if you want.
53:03 - This is a string data type.
53:05 - Okay this terminology is
very important to remember.
53:09 - Then you have your integers.
53:12 - Integers or anything
that is like this, okay.
53:15 - 4.3, or I'm sorry four, five, two,
53:21 - those are all your integers obviously.
53:25 - Things that have decimal points
53:27 - in math they are called decimal numbers,
53:28 - in Python we call them floating numbers.
53:31 - Okay so you have floating
numbers like 455.5, 354.90.
53:42 - Okay these are your floating numbers.
53:45 - So that's another important
thing to remember.
53:49 - So this was just a little
primer on primitive data types.
53:54 - Just so when I use this terminology,
53:56 - you guys don't get confused
53:58 - or like wanna throw things
at your screen, right.
54:01 - Like I don't know what
he's talking about, boom!
54:04 - Just throw your like mouse or your socks.
54:07 - Don't do that.
54:10 - I'm telling you then what they are here.
54:12 - And feel free to look
them up a little bit more
54:15 - so you can understand more about them.
54:18 - But this is some of the basic ones
54:19 - we're gonna be dealing with.
54:20 - And then the next videos,
54:21 - I'm gonna talk about
things like what is a list?
54:25 - What is the dictionary?
54:27 - So we're gonna go over
those as well, okay.
54:30 - Just to give you a little
bit of foreshadowing
54:31 - into it for you advanced people there.
54:34 - You wanna learn more, right.
54:36 - You wanna overachieve.
54:39 - A list is basically something
54:41 - that holds multiple things at once.
54:43 - So for example, I can say banana
54:47 - and apple and oranges like this.
54:53 - Right at the start, I
can say x is equal to,
54:56 - I hate x, I hate one letter variables
54:59 - and most people People do as well.
55:02 - Because it's usually a sign of bad coding.
55:04 - Always try to make your
names very relevant.
55:07 - Get into that habit right now.
55:09 - Promise yourself cross your heart.
55:11 - I don't know, I don't
care what you have to do.
55:14 - But work hard on variable naming,
55:17 - even if it slows you down sometimes.
55:18 - Okay so no x know y, only if you have to.
55:22 - It's gonna make your
code really hard to read.
55:24 - And when your reasoning
through your logic,
55:26 - you're gonna not understand
what you were doing.
55:28 - So let's say I don't know fruits,
55:31 - it's a good variable name, fruits.
55:34 - And now if I call fruits,
55:37 - you see a list of that thing.
55:39 - Okay I was talking about
primitive data types,
55:41 - but I got ahead of myself.
55:43 - I started talking about
some data structures
55:45 - like a lists and dictionaries.
55:46 - We'll cover all that later, be patient.
55:49 - I'll see you guys in the next video.
55:52 - (upbeat music)
55:56 - They're my beautiful children.
55:57 - In this video, we're gonna
talk about string slicing.
56:00 - What is string slicing?
56:02 - We're not talking about cake slicing.
56:04 - So let's get started.
56:05 - Well a string, as you remember
56:07 - was that thing in the green here.
56:09 - But that's just really
specific to the Idle
56:12 - that we're using.
56:13 - If you're using any other text editor,
56:15 - it's not necessarily gonna be green.
56:17 - So the string is just something in quotes,
56:18 - either it's single
quotes or double quotes,
56:20 - as long as it's consistent.
56:23 - Can't have a single quote
ending with the double quote,
56:26 - they gotta match, okay?
56:30 - So we have to match with the quotes,
56:33 - that's your string, right?
56:35 - So what we want to do now
is slice those strings.
56:39 - Well, what does that mean?
56:42 - Imagine I gave you an email address,
56:45 - email is equal to I don't
know rafe@gmail.com,
56:52 - something like that.
56:54 - Well a common thing that people have to do
56:56 - when they are getting this data back is,
57:00 - well, this is the username or something.
57:04 - This part is the Gmail thing.
57:10 - And then this is the .com part, right?
57:12 - So like, let's say we just
want the domain or whatever.
57:15 - And here we simply want like the username.
57:19 - So how would we do that?
57:20 - Well, we can use a little
bit of string slicing.
57:24 - So let's just start with a simple example.
57:26 - Let's take hello, and
let's say we want to get
57:30 - the first letter from hello,
57:33 - we wanna get just the h.
57:35 - Well, how you do it is you index
57:37 - by opening a bracket and
closing a square bracket.
57:41 - And if I do zero, it will get
me the first letter of that.
57:46 - Okay so h in this case is zero.
57:51 - Right that e is one.
57:54 - In Python, most of the
things started from zero.
57:56 - So we go all the way up to this o here,
57:59 - which is a four, okay.
58:03 - So we take this hello and whoops,
58:09 - let's take this hello.
58:11 - And let's simply do one, and
that will give me the e, okay.
58:18 - Now another thing I wanna show you guys
58:19 - in string slicing besides doing okay,
58:22 - that index, right, this
parseing in the index one
58:27 - Will give me the second letter.
58:29 - What if we wanna do something cooler
58:30 - like get a chunk of code?
58:32 - Well, how indexing works is that start,
58:37 - colon stop.
58:40 - Okay, colon stop.
58:42 - So what you can do is you can say hello.
58:46 - Oh I keep doing that, hello.
58:49 - And you can say start
from zero and end at two.
58:53 - Not including two but and at two.
58:57 - So includes zero, but
don't include the two.
59:00 - Which means that you
really get the zeroth index
59:06 - and the first index, right.
59:07 - So whatever the letter
is at the zeroth index,
59:10 - and then whatever the letter
is at the first index.
59:12 - So in this case, we'll get an he, okay.
59:17 - How you can read this is just
give me the first two letters.
59:20 - That's how I read it.
59:21 - So you can just say, give
me the first two letters.
59:24 - Now when you're starting off from zero
59:27 - by default index starts at zero.
59:29 - So if you actually don't say this at all,
59:31 - and you just remove the zero
59:33 - you're gonna get back he, okay?
59:38 - Everything that I'm showing you guys here,
59:40 - play around with it, okay?
59:42 - Don't just sit here and watch my videos.
59:44 - I don't want you to be a parseive learner.
59:46 - Please, please actively do this with me
59:51 - or pause my video and do this.
59:53 - I want you to spend more time doing
59:55 - and less time looking at it, okay?
59:57 - Because it seems really simple
when you're watching it.
60:00 - But if you don't put into action
60:01 - and do things that make sense to you,
60:04 - if you don't turn it like
into a game for yourself
60:06 - where you're doing something,
60:07 - like making fun little stupid projects,
60:10 - using what I'm showing you,
60:13 - you're not gonna be able to remember it.
60:15 - That's really what my
problem with Code Academy is.
60:18 - A lot of people go through Code Academy.
60:21 - But the problem that ends
up happening is that,
60:24 - they just go through
it at really fast pace.
60:26 - And they don't really have much projects
60:28 - that they get to do there.
60:30 - And not a lot of stuff that
they get to do on their own.
60:32 - So the most common complaint
I hear hear from people
60:35 - who take the Code Academy was like,
60:37 - it was great, I took the
whole thing but yeah,
60:39 - right now I can't like
write a single line of code.
60:42 - Okay, so it's not impressive,
60:44 - the higher you are in
really abstract levels,
60:47 - Introduction to classes.
60:49 - Oh, yeah, I know all about functions,
60:50 - I'm in introduction to classes.
60:52 - Write a function, write a function
60:54 - that takes in three inputs
and does dah dah dah
60:56 - and prints something out in sorted order.
60:59 - I don't know how do that
I'm totally lost, right?
61:02 - Don't be one of those people,
61:03 - make sure you build strong fundamentals
61:05 - and your coding level is
functional at all times, right?
61:09 - So even if I'm teaching
really basic stuff,
61:11 - make sure you can do something with it.
61:13 - That's the only way you'll get better.
61:15 - And make sure you have
fun while you're doing it.
61:17 - Anyways, let's get back to it.
61:19 - So, hello, right?
61:22 - Make up your own strings and break them up
61:24 - and see what you can make up
61:26 - from what I've just shown
you here, and experiment.
61:30 - What if I change the end?
61:31 - What if I change the stop part of it?
61:33 - And what if I change the start part of it?
61:35 - What if I don't put anything
in the stop part what happens?
61:37 - So let's try that.
61:39 - So hello and let's put in
nothing for both parts.
61:44 - Let's see what happens.
61:46 - You just get the whole string it,
61:47 - by default, it starts from zero
61:49 - and by default, it ends up the last index.
61:54 - Okay so it's the same
thing as saying zero, two,
61:57 - if you counted up was zero,
one, two, three, four, right?
62:02 - O is four, so I'll say four here.
62:06 - That will not give me,
62:07 - I have to say five, right?
62:09 - Because it will not include the four.
62:12 - If I say four, it'll go up to
but won't include the four.
62:15 - For example, see, so we
have to do five, okay.
62:22 - So that helps us get to
the end of the string.
62:26 - Now what if I wanna get the last letter
62:28 - from hello, or anything?
62:31 - If I wanna get the last letter,
62:33 - I can do something like this,
62:35 - negative okay.
62:38 - I can also slice by a negative number.
62:41 - So if I wanna get hell from hello,
62:44 - I can do hello.
62:48 - And I can say go from zero.
62:51 - And let's try and see what happens
62:54 - if I put negative one here, right.
62:57 - So another way,
62:59 - basically what I'm saying
start from the zeroth part,
63:03 - go up to the last part,
63:06 - but not including the last part.
63:08 - So that gave me hell.
63:11 - Another way to write it
is by putting a four here.
63:16 - Okay, another way to write
it is not having a zero here.
63:20 - Another way to write this
is not having a zero here,
63:22 - that all gives you hell.
63:23 - So you see play around with all those.
63:26 - I'm gonna now show you another thing
63:28 - that you can slice with and
that'll also blow your mind.
63:33 - Slicing is very important in app,
63:34 - it's a very common procedure.
63:36 - So it's pretty good to learn it
63:38 - because like let's say you
were trying to make an app,
63:41 - which goes on Craigslist
and pulls a lot of data
63:44 - from Craigslist, so like pull up ads.
63:47 - So the ad like, you
might get the data back
63:49 - in a string form.
63:51 - So you might get something
like Xbox 360 pricing
63:58 - its price is $10 and,
64:01 - or that's stupid it's not $10 right?
64:04 - You might get it for $150 nowadays.
64:07 - It's 2016 so the value of
it has significant dropped.
64:11 - And then let's say it
says the condition type.
64:14 - So the condition type is new.
64:17 - Right, so this is the data
64:23 - that you get from Craigslist.
64:25 - Well if you were writing
a script or Python code
64:31 - that would pull that information
64:32 - and then make sense out of it for you.
64:35 - And like a write it to
an actual Excel file.
64:38 - So like you want it to
essentially do something cool,
64:43 - where it opens up Excel and writes to it.
64:46 - And you want it to like have,
64:49 - product,
64:52 - price,
64:54 - and condition, right.
64:57 - And in product you want Xbox 360,
65:00 - in price you want 150.
65:03 - And in condition you want new, right?
65:07 - How would you pull that data cleanly?
65:10 - So it doesn't put Xbox 360, 150,
65:14 - new all in one place, right.
65:18 - So for that, you need to be
able to do string slicing.
65:24 - Okay, so for instance you might say,
65:27 - console or product, right.
65:30 - our console product is equal to,
65:34 - find me the first pipe, right.
65:38 - So like, let's say we have this guy here,
65:43 - there is a method you can do on data,
65:47 - which is called index.
65:50 - So let's find the index of pipe.
65:56 - It tells me that pipe is at index nine.
65:58 - So zero, one, two, three, four,
66:03 - five, six, seven, eight, nine.
66:06 - Which means that if I
index the string data,
66:11 - and I do nine, it will
give me back the pipe.
66:15 - So what that tells me
is that to get Xbox 360,
66:19 - I need to go from the start of that string
66:22 - all the way up to the first pipe,
66:24 - that should get me the product.
66:26 - So I can say product is equal to data.
66:30 - From the start, I don't
need to say zero, right?
66:33 - I can say from the start
66:35 - to take the data.index of the pipe.
66:44 - And now if I show you
product, boom, look at that.
66:48 - We got Xbox 360.
66:51 - And so now I can write
that product to the file.
66:53 - I'll teach you guys how to
read and write to files.
66:55 - Okay so then what it will do is that
66:57 - it will actually write Xbox 360
66:59 - in here for you automatically.
67:03 - Now understand the power and implications,
67:05 - well, why can't I just do that by hand?
67:07 - Right, that might be your question.
67:08 - What if it was 100,000
products can you do it by hand?
67:12 - Good luck, right?
67:13 - What if it's a million products
67:15 - that you were trying to search from
67:16 - and find the best price
using your Craigslist bot.
67:21 - That's where programming comes in.
67:22 - Okay, it's very important to
understand how programming
67:25 - in here ties together and
how it's more powerful
67:28 - than you trying to do this on your own.
67:32 - So that's really the
power of string slicing.
67:35 - Okay to break this line down
67:37 - for you a little bit more data,
67:40 - colon, that's just saying start from zero.
67:42 - And then I'm saying data.index of pipe.
67:45 - What does that part evaluate to?
67:47 - Right, .index is a method
that you can use on data.
67:51 - That's okay, which just gives you
67:55 - something that you're looking for.
67:56 - You parse it into the function, right.
67:58 - That function or that method
index takes in one argument.
68:02 - So what does this whole part
evaluate to in our case,
68:05 - this part evaluates one nine, right?
68:09 - This whole part, data.index, right,
68:13 - it evaluates to a nine.
68:14 - So if I do data zero through nine,
68:17 - you can see that I just
get Xbox 360, the same way.
68:20 - Nine tells me up to but not
including the pipe, okay.
68:25 - So that's how we got the Xbox 360 part.
68:29 - How would you get the 150?
68:31 - You would kinda do the
same way to get the price.
68:36 - Okay but you would say instead of starting
68:39 - to look from here,
because then you'll find
68:42 - this pipe right here, right this one.
68:45 - You wanna find this pipe now.
68:48 - So you want to actually
start your string search
68:51 - from this location or this location
68:54 - that I'm highlighting.
68:56 - And then you wanna search all the way
68:58 - up to this pipe and stop there.
69:01 - And get whatever is in
between these two pipes.
69:04 - Okay so that's something
that I want you guys to try.
69:08 - Paste your code below
for how you might get
69:12 - the price and the condition, okay.
69:15 - That would be a fun
thing for you guys to do.
69:18 - I'm gonna keep moving on
69:20 - and talk a little bit more about strings,
69:22 - and string slicing, because there's still
69:24 - a little bit more to it.
69:26 - So and again, I want
you to keep practicing
69:30 - all of this right.
69:31 - 'Cause otherwise is going
to over overwhelm you,
69:33 - all this knowledge.
69:36 - So let's say that I have,
69:40 - I can do start, stop.
69:43 - And here's another method
to blow your mind, step.
69:47 - So how many steps do I wanna take
69:49 - when I'm reading something?
69:50 - Okay, so like, let's
say, I have this string.
69:56 - Hi, how are you doing?
69:59 - It is very nice to meet you.
70:04 - I wanna make sure I'm consistent.
70:05 - So not double quotes, single quote.
70:08 - And let's just store that
in some variable, greeting.
70:14 - Okay, so if I say greeting,
70:16 - you can see that whole string.
70:18 - So what I can do is take
greeting, say start at zero
70:24 - stop at, I don't know, negative one.
70:27 - So like all the way at the end.
70:30 - And then I want you to, basically,
70:34 - it'll go up to o, right.
70:36 - Because it's up to like,
70:38 - or sorry, it will go up to the u part,
70:40 - but not this period right here.
70:43 - Sorry, I just, it won't let
me highlight that period.
70:48 - It won't go up to that period.
70:50 - Okay, it'll go up to u because it's up to,
70:52 - but not including the period.
70:55 - Sorry, I keep saying that a lot.
70:56 - But I do know that when you're
starting to learn Python
70:59 - or programming those things
you will forget a lot.
71:02 - So I'm sorry if I'm reiterating
71:04 - that fact over and over again.
71:06 - All right, so we start from
zero, we go up to the u, right?
71:10 - We go from here all the way to here.
71:14 - And then we wanna step.
71:16 - So instead of, for example, taking,
71:21 - I don't know reading
every single one of these,
71:24 - we can read every other letter.
71:26 - So I can say instead of stepping by one,
71:28 - which is default, if I do one here,
71:31 - you'll see this pretty
much the same string
71:34 - without the period.
71:35 - And if I do nothing here, you'll
see the same thing, right?
71:41 - Because that's the default.
71:43 - And if I do step by two,
71:46 - this is basically saying
give me every other letter.
71:51 - Okay, so think about
maybe creating a game,
71:54 - jibberish game that takes in a string,
71:57 - like it's a function called jibberish.
71:59 - Take In a string, and it
just jibberishizes it?
72:07 - Okay, it just like jumbles it up.
72:11 - And if I do three here,
72:12 - you can see now it's stepping by three.
72:16 - All right, so pretty weird,
72:19 - but it's also cool at the same time.
72:22 - And another thing that
I wanna ask you guys
72:27 - as a practice to do
before I end this video
72:31 - is say I had the string hello.
72:36 - I gave you the string.
72:38 - How would you reverse it?
72:41 - Okay, I want if I gave you hello,
72:44 - I want back olleh.
72:49 - or if I gave you olleh,
72:54 - you should give me back hello.
72:56 - Okay, so hopefully that blew up your mind
73:00 - on string slicing.
73:02 - I'll try to put some exercises
on cleverprogrammer.com.
73:06 - So if you haven't already
go enroll into the school
73:12 - and there will be exercises
and extra resources
73:16 - that you can use to get help.
73:18 - Also there are others in the community
73:20 - who can help you, okay.
73:22 - So good place to go for help.
73:23 - But if you're watching it on YouTube,
73:25 - that's totally fine, comment
in the YouTube section below.
73:28 - And I will personally try to help you out.
73:31 - Other than that, I'll see
you guys in the next video.
73:35 - (upbeat music)
73:38 - Hey guys, what's up?
73:40 - So in the last video I
talked about string slicing.
73:44 - In this video I'm gonna talk about lists.
73:46 - Okay, lists of things and
what the heck are lists,
73:49 - lists are awesome.
73:51 - However, in the last video,
73:53 - I left you guys with the question I said,
73:57 - take this right and parse it.
74:00 - And basically Xbox 360 pull that out,
74:03 - save it in a variable like product.
74:06 - Pull this out, save it
in a variable like price
74:08 - and save this in a
variable like condition.
74:11 - Right, so when you have
your Excel sheet open,
74:14 - it looks really nice look like this.
74:18 - Okay, so I'm gonna, in my solution,
74:23 - I'm gonna do it in a different way.
74:25 - Because if you try to use it
as index, this is the solution.
74:28 - So you can pause the video,
74:30 - think about how it works.
74:32 - That's how you'll pull the 150.
74:33 - And using the same logic, you'll pull new.
74:35 - However, index is a very ugly
method to use for getting,
74:40 - parsing the string.
74:42 - What I want to show you guys
is this method called find.
74:46 - Okay, that's very nice method.
74:47 - So like let's say we take the data right,
74:50 - and I do data.find.
74:52 - And find it shows you the bottom
74:55 - what it takes in as the function.
74:56 - It takes in the sub string.
75:00 - And then it takes an optional
arguments like start and end.
75:04 - So I'm gonna say data.find
75:07 - and I'll give it a sub string pipe.
75:12 - What a sub string means
is that that something
75:15 - that exists in the original string, okay?
75:19 - So for example, I have to give find,
75:24 - the function find or the method find,
75:26 - I have to give it something
that exists within this.
75:28 - If I gave it something that
doesn't exist within it
75:30 - like banana, it would say negative one,
75:35 - like I didn't find anything.
75:37 - But if I gave it a pipe,
75:40 - you can see that it finds a nine.
75:42 - And another thing you can
give it is how you saw
75:47 - is you can give it where to start from.
75:50 - Okay, so I can say like, for example,
75:54 - start looking after 10 or hold up,
75:57 - or look for pipe but I want you
76:00 - to start at string nine, okay?
76:04 - Or I want you to start at string 10.
76:07 - All right, and now it finds
pipe at location at 15.
76:11 - So if I do data and if you count it up,
76:14 - you'll see that this is the pipe
76:15 - and it is an indeed location 15.
76:17 - If I do data 15 you'll see that
76:20 - it gives you back that pipe.
76:23 - Right.
76:24 - (clears throat)
76:26 - Okay so, by getting that second pipe,
76:30 - now, you can get the value in between
76:32 - the first pipe and the second pipe.
76:34 - By saying something like,
76:38 - start from finding the first pipe
76:42 - and then go up to finding the second pipe.
76:48 - Right, so I can say, finding or start from
76:56 - or look for pipe and then start
76:58 - from 10 for example, right?
77:02 - And this gives you this guy here.
77:04 - And just to make sure we don't include
77:06 - the pipe in the first one,
77:07 - we can just start from plus one of that.
77:10 - Okay, so that gives you in between
77:12 - the first and second
pipe, you get back 150.
77:15 - Okay so, the reason why I went even more
77:18 - in depth in strings even
in the video called Lists,
77:22 - is because a lot of what
you learn from strings
77:25 - is applicable to lists, okay.
77:28 - So let's take a list
and call it groceries.
77:33 - And I will have apple
and I foreshadowed this
77:36 - for you guys a little bit, banana.
77:38 - And you also have integers.
77:39 - But usually try to put the
same kind of thing in the list.
77:44 - But sure let's put five in there
77:47 - and six in there and then
oranges or something okay.
77:51 - Cool, now if I wanna take this list.
77:55 - And I wanna get the first
element and the second element,
77:58 - if it was just a string right.
78:01 - Like the reason why lists are useful
78:03 - is 'cause you can use it to
store multiple variables.
78:07 - Like for example, if you
wanted to use variables
78:10 - to store this, it would be a little.
78:16 - It would be weird 'cause
you will say groceries,
78:19 - zero is equal to apple.
78:22 - You would say,
78:29 - groceries of one are banana.
78:31 - And so then when you do groceries of zero,
78:34 - you get back apple.
78:35 - And then you do groceries
have one you get back banana.
78:40 - But let's make it make that thing
78:44 - for you in a really easy way, okay.
78:48 - So now if I do groceries, and
if I do groceries of zero,
78:52 - I get back Apple, okay.
78:54 - And if I do groceries of
one, I get back banana.
78:58 - Because apple is in the zeroth position
79:00 - banana is in the first position.
79:03 - This is in the second,
third, fourth position, okay.
79:08 - So let's make it really nice for you.
79:11 - Imagine if you were trying
to store a data for a race.
79:15 - So like, four of your
friends ran really fast.
79:19 - And you wanna record who
came first who came second.
79:22 - So you can say race is equal to,
79:28 - like John came first
and then Bob came second
79:32 - and then whatever, Timothy came in third.
79:38 - Timothy is pretty slow.
79:42 - So we can say okay, who came in first?
79:45 - we can ask that question,
we get back John.
79:47 - We can say who came in second?
79:49 - We get back Bob.
79:51 - And I can say who came in third?
79:53 - Or I can say who came in last?
79:55 - Like negative one get to the last element.
79:58 - And this answers all my questions.
80:00 - So just like how we were
able to slice strings,
80:04 - we're able to slice lists, okay.
80:08 - But notice list is nicer for elements.
80:12 - So for example Xbox
360, and all this stuff,
80:16 - I'll show you guys a really cool trick
80:18 - you can do with list to
break that up into pieces.
80:22 - So like for example,
80:24 - if I gave you a string like this, right,
80:27 - what is going on?
80:28 - Notice that there are a lot
of spaces in between, right.
80:31 - Let's just replace those spaces,
80:33 - just so it's more visual.
80:34 - Let's replace those spaces with that.
80:37 - And let's say we want to get
the what parts separately,
80:40 - is part separately, going part separately
80:43 - and on part separately,
80:46 - without having any of
the dashes in the middle.
80:48 - There's a method we can
use called .split, okay.
80:52 - And we can parse to .split
what we want to split by.
80:57 - So I can say something like this.
80:59 - I wanna split by the dashes, okay?
81:02 - So check it out, now I
got what is going on?
81:05 - Right, this is a list of strings.
81:10 - Now the data complexity
81:12 - is getting a little bit higher, right?
81:13 - It's a list containing
strings inside of it.
81:18 - Okay I can call this like,
81:24 - greeting or something doesn't matter.
81:27 - And if I do greeting, I can say,
81:29 - what's the first word of greeting?
81:32 - What's the second word?
81:36 - Whoops.
81:41 - Greeting, right?
81:42 - What's the second word?
81:44 - And for example, I can
say what's the last word
81:47 - and they'll give me what is going on,
81:49 - on being the last word right.
81:52 - Now, I can also do string slicing,
81:55 - just like how I can do in strings.
81:57 - So I have start, I have
stop and I have step.
82:03 - So if I take the race one again,
82:05 - I can say go from zero
all the way to the end.
82:09 - I can say, the same way like this.
82:13 - This is like, optional, right?
82:16 - Zero, start from zero, and it ends at zero
82:19 - or ends at the last one by default.
82:22 - If I wanna get from John to Bob,
82:24 - I can say like, give me the first two race
82:28 - like first two contestants of the race.
82:31 - And they'll give me John and Bob.
82:34 - Or I'll say, give me
everybody, but the last guy.
82:37 - So I can ask that question
to my list, just like that.
82:42 - Okay now to answer you guys this question
82:45 - of how to reverse the string.
82:47 - It's the same way you can
reverse the list as well.
82:50 - So let me show you guys.
82:52 - There are a couple of different ways
82:53 - but I'm gonna show you guys the nicest,
82:55 - the fanciest way, okay.
82:58 - So let's take this list
and I wanna step by,
83:04 - or sorry I wanna start at the
default, which is zero, okay?
83:07 - I don't have to write it zero,
83:09 - but I'll just write it for you guys.
83:10 - I want to go all the way to the end.
83:13 - And I don't have to write this.
83:14 - Okay, so I'll just leave it blank here.
83:17 - And for the last part,
83:20 - first step, instead of saying step by one,
83:22 - which will just give me the whole thing.
83:26 - Instead of saying give
me every other element.
83:28 - So like, give me John and then Timothy,
83:31 - I will say, step by negative one.
83:36 - So check this out.
83:39 - Let's remove this.
83:44 - Right and let's remove
that guy and let's do that.
83:48 - And you will see how it steps.
83:52 - Right, it just reversed the list.
83:55 - If we have the same string,
83:59 - like let's say we have data,
84:00 - I can do the same way and
reverse everything in data.
84:06 - So you can see Xbox 360, and new and 150
84:10 - are all written backwards.
84:12 - Okay so that's how you would
like reverse something.
84:17 - Now I wanna talk about split again,
84:23 - and I wanna talk about
one very important method
84:27 - called append for list.
84:29 - One of the most commonly used things
84:32 - that any programmer does in any language.
84:35 - Okay, so split is like Java, UPC,
84:38 - everybody uses that it
might not be called split.
84:41 - And then same thing in Python,
84:42 - everybody uses split and the next method
84:45 - I'm about to show you a pen, very common.
84:47 - For all the games you make
for everything that you do,
84:49 - it's gonna be like one of the
84:50 - most common things you use,
84:51 - especially a pencil pay attention.
84:53 - So I'm gonna show you the method called
84:59 - the split, so I've shown you
a little bit of that already.
85:02 - So let's say I take data
and I wanna break it up,
85:06 - right product price condition.
85:09 - Very easy way to do it.
85:11 - Very easy to do is split,
85:12 - so let's do data.split.
85:15 - And I want to say split by pipe.
85:19 - Boom, look at that,
how nice is that right?
85:22 - It automatically just split it by that
85:25 - and you can store that
in details or something.
85:31 - And now if I do details of zero right,
85:35 - and I can set that equal to product.
85:38 - So now if I do product, I get that.
85:42 - I can say price is
equal to details of one.
85:48 - And I can say condition is
equal to details of two.
85:54 - Okay price, condition, boom.
85:58 - Okay, so that was like
some really nice ways
86:01 - to get this done.
86:03 - In the next video I will talk
about append so stay tuned.
86:07 - (upbeat music)
86:11 - So in this video we
are going to talk about
86:13 - how append works in a list
86:15 - because the last video
got a little bit long.
86:17 - But for those of you who
want their minds blown,
86:19 - I want to even give you a better solution
86:21 - for the problem with the
whole splitting thing
86:24 - and then storing as a
product, price and condition.
86:28 - So remember, we had data Xbox 360 product,
86:31 - 150 price, condition new.
86:34 - There's even an easier way to do it.
86:35 - I can say product, I can say comma price,
86:39 - and I can say condition.
86:42 - And check this magic out
and I'm gonna say data.split
86:45 - that by pipe and boom we're done.
86:51 - So now product is the first
element from that list.
86:55 - Right if I show you data split by pipe,
87:01 - What you get is first elements,
87:03 - second element, third element.
87:05 - So the first element maps
to this product right there.
87:10 - Price ends up mapping itself to 150,
87:12 - condition ends up mapping itself to new.
87:15 - So go check it out.
87:17 - It's also kind of known as the concept
87:19 - of tuple unpacking
87:21 - Really, really advanced concept.
87:23 - We're not gonna get to it till maybe
87:25 - an intermediate or advanced course.
87:27 - But yeah, just something a
little fun to blow your mind
87:31 - and look at how efficient Python
87:33 - lets you do things right, efficiently.
87:35 - So really simple way.
87:38 - But hopefully, this shows you the power
87:40 - of how you can combine lists
87:42 - with the whole idea of
slicing and all that.
87:44 - Now one of the most common things
87:46 - I wanna show you is this
whole thing called .append.
87:50 - Okay, it's a method that
you can use on a list,
87:52 - very common method.
87:53 - And this is one of the reasons why lists
87:55 - are a lot more useful than
strings or any other thing.
87:59 - Okay, oh, let me just be clear.
88:02 - It's not that strings are not useful
88:04 - or lists are more useful.
88:06 - But the reason why lists are
so awesome is because of that,
88:10 - that's what makes them unique, okay.
88:12 - So let me give you some list with.
88:18 - Sure, let's give you racers,
88:20 - or let's do something
simple, let's do numbers.
88:25 - Okay, now there's a really
easy way to grow this list.
88:29 - So I wanna keep adding
some numbers to this list.
88:31 - Well, how do I do that?
88:33 - What if I wanna add some
number to this list?
88:35 - I know how to access
each of these numbers.
88:37 - I know how to slice each of
these numbers and get a range.
88:39 - I know how to step and slice
88:41 - and get ranges at the same time.
88:43 - I know how to reverse the list.
88:45 - Well what if I wanna add
more things into the list
88:49 - or change existing things in the list?
88:51 - Well to add things in
the list, we use .append.
88:56 - Okay, append meaning ad something
to the end, hence append.
89:02 - Pre-pend add something to the beginning.
89:04 - So we wanna add something right over here
89:07 - in front of the five.
89:08 - So let me do six,
89:10 - and if I show you numbers, and
now you have a bigger list.
89:14 - Let's say I wanted to add another thing,
89:16 - I'll just say append seven.
89:17 - Now if I show you numbers, now the numbers
89:19 - has grown bigger, you got seven.
89:21 - Alright so we're using this new app
89:24 - that you're creating where
once your friends raced,
89:27 - you put them in the list.
89:28 - But let's say more your
friends get excited.
89:30 - They're like, wow, this app is amazing.
89:32 - We want to race too so
you can put us in there.
89:34 - But you're like, the list
only takes in three people.
89:37 - Well, append lets you add
in more people, right.
89:41 - So you store that data, you keep it there
89:43 - and then you use append to add more
89:45 - of your friends into the list.
89:48 - What's also nicer is you can use a loop
89:50 - to add things into the list.
89:52 - Okay, so for example, I
can sit for i in range 100.
89:56 - If I say print i, well
what is that gonna do?
90:00 - Is gonna go all the way
and print up to 100.
90:03 - Okay so I'm gonna stop this right here,
90:05 - but you get the point.
90:07 - It's basically range, right?
90:10 - What is range?
90:11 - Just to show you a range of 10.
90:13 - That's effectively just a list, 10 okay.
90:18 - And then we kind of go through it
90:21 - and we print out each of those numbers.
90:23 - I'm gonna get more into
loops in the later video.
90:26 - But just, this is just to give you guys
90:28 - a little bit of an idea
of how we use list.
90:32 - So for example, every time i,
90:35 - So first time i is zero, then i is one,
90:36 - then i is two, then i is three
90:38 - and we keep doing that right.
90:41 - So what can I say?
90:43 - I can say,
90:46 - 'cause effectively, right,
since this is a list.
90:50 - Now I can explain to you guys
a little bit more about loops.
90:53 - Since range is really just a list, right.
90:57 - I'm calling list on it because in Python 3
90:59 - they hide it from you.
91:01 - And you'll learn why later.
91:03 - But if I call list on it shows me
91:05 - what range 10 looks like.
91:06 - And range 10 happens to just be a list.
91:09 - And list is what allows
you to make that for loop.
91:12 - Okay, that you've been making,
91:14 - when you were creating
your original turtle games.
91:17 - So what happens is that the first time
91:20 - going through this list, right.
91:22 - Let's say, let's just make
a smaller list here for now.
91:27 - When we're going through the
loop i is zero the first time.
91:30 - And then we call the print
function right here, right.
91:34 - So i is zero the first time
and then we print zero.
91:38 - Then i is one because it's a
second element from the list.
91:42 - And so then we print
one out to the screen.
91:45 - Then i is two, and then you get two here.
91:49 - And then we print out two at the bottom.
91:51 - Okay, so that's how loop runs right.
91:54 - The indented code keeps
running over and over again.
91:58 - So that's really what
allows you to do a loop,
92:01 - it's actually a secret
list in the background.
92:04 - And so that's why you go
from zero to 100 here right.
92:08 - Now, if I wanted to take that list
92:10 - that I had at the top called numbers
92:12 - and keep adding a lot of
numbers to it, say up to 30,
92:17 - instead of keep having to manually do it,
92:19 - well, here's a nice way to do it.
92:20 - I can say for i in range,
92:24 - let's see 14 or let's say,
92:29 - I wanna start my range, okay.
92:33 - So if I just showed you
can also give a start
92:35 - and a stop to range.
92:37 - So let's say I wanna
start my range from eight
92:41 - and go up to but not including 20 or 21.
92:45 - So I go from eight to 20.
92:47 - Right so these are the
numbers I wanna add.
92:49 - Okay, so let's do for number in range,
92:56 - eight and 21 and I'm not using i
92:58 - I am using the variable number
93:00 - just so you guys know that you
can't you don't have to use,
93:04 - i is not some magical built in thing
93:05 - that you have to use.
93:07 - Use a variable that makes more sense.
93:09 - In this case, since I'm
going through looping,
93:11 - and it's really numbers.
93:12 - And now you guys know that
i turns into a number,
93:15 - it just makes more sense
to call it a number.
93:17 - So then you're like oh, yeah.
93:19 - This will just be eight the first time
93:20 - then it'll be nine, then it'll be 10,
93:22 - then it will be 11 and
then it'll be 12, right?
93:25 - So let's go back.
93:28 - So let's just replace
this with just number.
93:31 - And then let's say numbers.append,
93:35 - and to the numbers list, I wanna
keep appending each number.
93:42 - Okay, so the first time I'm gonna append,
93:45 - number is gonna be eight.
93:47 - So then I'm gonna append eight.
93:49 - And so it's gonna add
eight to my numbers list.
93:52 - Then number is going to be nine
93:56 - and then it's going to append nine here.
93:59 - The number is going to be 10,
94:00 - is going to append a 10.
94:02 - Okay so let's do it like this.
94:05 - Let's replace this bad boy with number.
94:08 - Let's run it, let's
take a look at our list.
94:11 - And voila, you see it goes from one
94:15 - all the way to 20, okay.
94:19 - And if these were your
friends and we wanted to see,
94:24 - in the reverse order, like
from losers to winners,
94:28 - instead of winners to losers in a race.
94:32 - I would be able to do simply this trick,
94:36 - which says, start by
default, stop by default,
94:40 - and then step by negative one.
94:42 - So that answers that question, right.
94:47 - Okay cool, so a lot of stuff.
94:50 - But hopefully it's making sense.
94:52 - And hopefully, lists are making more sense
94:56 - and append is making more sense, right.
94:58 - Append is one of the most useful things.
95:01 - So I want you to remember append
95:03 - and we'll come back to it
95:05 - and we'll probably build
more things with it.
95:07 - Okay, I'll have a project
for you guys as well.
95:10 - Where you're gonna get
to practice it more.
95:12 - For now come up with something cool.
95:15 - Whatever silly idea or a
fun idea that you have,
95:19 - code it up, something simple.
95:21 - Post it in the comments below,
95:23 - in the YouTube one, or my website here.
95:27 - Okay cleverprogrammer.com.
95:29 - Either way, it's fine.
95:31 - Alright guys, I'll see
you in the next video.
95:33 - (upbeat music)
95:37 - Hey guys, what's up?
95:38 - This is Qazi.
95:39 - So in this video, I wanna
talk about a project.
95:42 - All right, so we learned a little bit
95:44 - about loops and how we
can do some cool loops
95:48 - and make squares.
95:49 - We learned about functions and how
95:50 - you can give multiple
arguments to functions.
95:53 - We did all of this while
visualizing the code.
95:56 - That's why we use the turtle Python module
95:59 - so you can learn visually.
96:01 - No matter how old you are,
96:02 - no matter how young you are,
96:04 - visual learning is one of
the best ways to learn.
96:07 - And to visualize your code it's amazing
96:09 - 'cause you get it right away.
96:12 - Now I wanna take this time
96:16 - and now allow you guys
to do an actual project.
96:19 - So up to this point, we
did a lot of fun stuff.
96:22 - And I gave you some basic
exercises like make a square.
96:25 - Now I wanna give you a
little bit of a project.
96:27 - It might take you long, it
might not take you that long.
96:30 - It's not that much code at all.
96:32 - It's, you just have to put a
lot of these ideas together.
96:36 - Here's the project.
96:37 - I want you to make a
circle out of squares.
96:41 - What do I mean?
96:42 - Just to be clear about what you need to do
96:44 - in the project and how
it should look like,
96:45 - I've designed this demo for you guys.
96:47 - So check it out.
96:53 - Make a square turn a little bit,
96:55 - make a square turn a little bit.
96:57 - Make a square turn a little bit.
96:58 - Make a square turn a little,
okay, you get the idea.
97:02 - You keep going like this and
eventually you get a circle.
97:05 - And if you notice and if
you look really into it,
97:08 - you can probably keep
looking at this forever.
97:10 - It's fascinating.
97:12 - So, I love this thing.
97:15 - I can myself look at it forever.
97:25 - Pretty enjoyable.
97:27 - Okay, so I'm gonna stop it right here.
97:29 - You guys now have fun with it.
97:31 - Try to make something like this, okay?
97:32 - It's not too complicated,
it's really simple.
97:34 - Make a square, turn.
97:35 - Make a square, turn.
97:37 - It just helps you put all
the programming concepts
97:39 - we've learned so far.
97:41 - Variables, using the turtle module,
97:44 - the looping structures
and arguments in functions
97:49 - and the range thing that
we looked at in a loop.
97:52 - So good luck, and I think you can do it.
97:54 - All right, I will see
you in the next video
97:57 - where I'll provide you with the solution.
98:00 - (upbeat music)
98:03 - Okay in the last video I
proposed a challenge to you.
98:07 - Make a circle out of squares.
98:09 - So hopefully you gave it a try.
98:12 - Hopefully you put it
in the comments below.
98:14 - Okay so if you're watching
this video right now,
98:16 - whatever you got, I
don't care if it's crap,
98:17 - I don't care what what it is,
98:19 - I want you to put it
in the comments below.
98:22 - Okay so whether you go to,
98:26 - whether you go to my website
at cleverprogrammer.com
98:31 - and put it in learn Python for beginners,
98:34 - we have a comment section.
98:36 - So for example, you can go
into one of these videos.
98:40 - I'm gonna have this video up there as well
98:43 - when you guys come to watch.
98:44 - I want you to put your
code in the comments below.
98:46 - I will look at it personally
and one of our members
98:49 - will also look at it okay.
98:51 - So right over here, or you can just put it
98:54 - on the YouTube channel.
98:55 - That's totally fine as well all right.
98:58 - So let's get to it.
99:00 - First of all, what I wanna do is,
99:03 - I have the square function,
99:05 - which is really cool. But
it's really repetitive, right.
99:09 - It does, I mean, if you
can see all a square
99:13 - is you move forward and you turn right.
99:16 - And you repeat that four times, right?
99:18 - So why do we have it here like this?
99:21 - This is really bad.
99:25 - There's a lot of redundancy
in our logic, right?
99:30 - Like, if you were telling your sister,
99:32 - your brother, your dad, your friend,
99:34 - whoever the steps, you would be like,
99:36 - move forward, turn right
and then do that four times.
99:38 - That's how you would
tell it to them, okay.
99:40 - You wouldn't say move forward, turn right.
99:43 - Move forward, turn right.
99:46 - Move forward, and then turn right.
99:48 - And oh yeah, move forward and turn right.
99:50 - Right so you wouldn't do that.
99:52 - So if we look at this actually
99:54 - we're doing this step once here,
99:56 - then we're doing the same step twice here.
100:00 - Then we're doing the same
step three times here.
100:04 - And we're doing the same
step four times here.
100:09 - What does that mean when
we're doing something
100:11 - over and over again?
100:13 - Well it sounds like a loop.
100:15 - So I want this thing to happen four times.
100:17 - How do I said do something
four times in Python?
100:20 - I just say for something in range.
100:22 - So I'll say for i in
range four, that's it.
100:27 - This will do that thing four times.
100:29 - And I'll simply go here
and remove that code.
100:33 - Okay so already our code looks much nicer.
100:38 - And that's a way better way
of making a square, okay.
100:42 - So notice it still takes length and angle.
100:47 - So if we're making a function,
100:48 - we need to parse those variables
length and angle, right.
100:52 - So then length here and
angle here can become those.
100:54 - So we want like, let's
say length to be 100
100:57 - and our angle to be 90 degrees.
101:00 - So square makes a square.
101:02 - Let's verify our hypothesis here
101:06 - and remember this function, all functions,
101:08 - you gotta put open close
parentheses after them.
101:11 - And you gotta parse in an argument
101:13 - for this function here.
101:14 - So we're gonna say 100 for the length,
101:17 - and I'm gonna say 90 for the angle.
101:19 - Okay, I can also say it like this,
101:22 - just so the code is more
clear what it's doing.
101:28 - Okay, I can say it like that.
101:29 - But let's keep it short and sweet here.
101:32 - Let's run it.
101:34 - And that should make a square, right?
101:36 - It made a square, great.
101:39 - Now what we're gonna do is,
101:41 - well, we want to keep
making squares, right?
101:44 - So we know we're gonna put
it in some kind of loop.
101:47 - Let's say we wanna do it 100 times, okay.
101:53 - All right, so I'm gonna put it in the loop
101:55 - because I wanna make a lot of squares.
101:58 - And each time I make
a square I wanna turn.
102:01 - So let me first get out of this loop.
102:04 - And let me do this.
102:05 - Let me say my turtle.right,
90 degrees okay.
102:12 - And let me do this now.
102:15 - And you'll see that as soon as I make that
102:17 - I turn a little bit,
actually not 90 degrees,
102:20 - let's turn I don't know, 10 degrees.
102:24 - 90 degrees is silly.
102:26 - So I make a square and then
I turn, just like that.
102:29 - I'm ready to make another square.
102:30 - So let's do that.
102:31 - Let's make another square right here.
102:36 - I make a square I turn a little
bit, I make another square.
102:39 - Okay, you get the idea.
102:40 - Now we need this process
to repeat a lot of times.
102:43 - So we need to make a square,
102:45 - we need to turn right, right.
102:46 - So it's really this step.
102:48 - And we wanna do it again and
again and again and again.
102:51 - So sounds like we need
to put it in a loop.
102:54 - Let me uncomment that line,
102:56 - hit tab to indent it under the for loop.
102:59 - So it knows it's a part of a for loop.
103:01 - This variable here does
not need to be called i,
103:04 - by convention in the world of Python,
103:06 - we usually call it i.
103:08 - You can call it bananas,
you can call it that.
103:10 - You can call it an underscore.
103:12 - You can call it whatever you want, okay.
103:15 - Just a little bit about variables.
103:16 - Variables can't start with a number
103:18 - like five or something okay.
103:21 - So, perfect.
103:24 - This looks pretty good.
103:25 - Let's give it a try.
103:29 - Okay, I make a square,
I turn a little bit.
103:31 - I make another square,
I turn a little bit.
103:32 - I make another square I turn
a little bit, beautiful.
103:35 - That's looking really good.
103:37 - Let me close this.
103:38 - Let me make the speed really fast.
103:41 - So let me make this, say
turtle that's speed zero
103:44 - and that makes it run really, really fast.
103:48 - So it's going and going and going
103:51 - and going and going and going and going.
103:54 - But now notice the problem.
103:57 - It's not drawing anything
new, but it's moving.
104:04 - So it's moving a lot, but
it's not making anything new.
104:07 - Where does it stop making new things?
104:09 - Let's check it out.
104:11 - Let's say we wanna do this how many times?
104:14 - Let's say we wanna do this 30.
104:18 - Or let's say we wanna
do this loop 40 times.
104:22 - Let's check it out.
104:24 - So let's see where it stops making it new.
104:28 - So the last four times it ran,
104:30 - you guys probably didn't catch it.
104:31 - But the last four times that ran
104:33 - it actually didn't make anything new.
104:34 - So the 37th time it ran,
104:36 - it didn't make anything new.
104:37 - 38th time, 39th time and 40th time.
104:40 - So what the heck happened?
104:42 - Well, here's what happened.
104:44 - 360 degrees right.
104:48 - Though that's the number
of degrees in a circle.
104:50 - So a circle has 360 degrees.
104:56 - Now we want to make this circle
like really nice and dense.
105:01 - We don't want it to be how was,
105:03 - our circle look pretty empty.
105:06 - And the reason is,
105:08 - okay, so the circle has 360 degrees.
105:09 - Now if we're turning 10 degrees
every single time, right.
105:16 - What's 360 divided by 10?
105:19 - That's how many times
we can go in a direction
105:22 - if we turn right, only 10 degrees.
105:25 - Is 360, divisible by 10?
105:28 - And the answer is yes.
105:29 - And the answer is actually 36.
105:33 - Right 360 divided by 10,
105:36 - obviously, you don't
have to be a math genius
105:37 - to know that, but you get back 36.
105:40 - Which means 10 perfectly goes into 360.
105:44 - And isn't that awesome?
105:47 - That that's the number of times
105:48 - you can actually make unique squares.
105:50 - If you do, if you choose 10 degrees.
105:52 - It's beautiful seeing the
visibility in visualization.
105:56 - So even math starts to become beautiful
105:58 - when you put it in terms
105:59 - of computer programming you guys.
106:01 - This was one of my most
favorite discoveries.
106:03 - And I still get excited
when I think about this.
106:06 - I think that's pretty freaking awesome.
106:09 - What can we do?
106:11 - Well pick a number that
is not divisible, right.
106:15 - That 360 is not divisible by.
106:17 - So how about a great number?
106:21 - I don't like a prime number.
106:23 - And what's a prime number
106:25 - that's really close to 10?
106:26 - 11, so let's pick 11, right?
106:28 - Because 360 divided by 11 gives you
106:34 - something that's not divisible, right?
106:36 - Like 360 is not divisible by 11,
106:38 - 11 is a prime number.
106:40 - So let's run this bad
boy and check it out.
106:43 - And let's run it 100 times
right, not 40, 100 times.
106:49 - And let's check it out.
It's turning 11 degrees.
106:52 - Every time it makes a square.
106:54 - You'll notice that it
almost never repeats itself.
106:58 - And they'll probably never repeat itself.
107:00 - And it just keeps making the circle darker
107:03 - and darker and darker and denser.
107:05 - And that's how you want it, right.
107:06 - Look at how beautiful that looks.
107:10 - Dark in the middle and starts
107:11 - to get lighter on the outer edges.
107:14 - And those webs are interweaving.
107:16 - And it's gorgeous, right.
107:19 - Bonus project I can give you guys for this
107:22 - is bring some colors out,
107:24 - make some cool designs.
107:25 - Go look up trinket.io.
107:28 - Go to that website, check it out.
107:32 - Look at some examples.
107:33 - Paste your code below.
107:35 - You can help out other people.
107:37 - I can help you out if I look at your code,
107:41 - you have some errors or
it looks really cool,
107:44 - and maybe I can help you
make it look even better.
107:47 - Or maybe you'll just make something
107:48 - that'll blow my mind
because I haven't made
107:50 - such beautiful circles out of squares.
107:54 - Anyways, I hope you guys enjoyed it.
107:55 - I hope it makes sense.
107:57 - Please like the video, subscribe.
107:58 - I'll see you in the next lesson.
108:00 - (upbeat music)
108:04 - Hey guys, how's it going?
108:05 - So in the last video, we talked
about doing projects, right?
108:11 - So we go in our the
solutions of some projects.
108:14 - In this video what I'll
talk about is dictionaries.
108:17 - They're very important in a
lot of programming languages
108:21 - and other ones and C++,
it might be called maps.
108:24 - In Python is called a dictionary.
108:27 - So let's see what it is about.
108:31 - Okay, so essentially the
idea behind dictionaries
108:35 - is to map keys to values.
108:41 - Hopefully that defines everything right.
108:44 - Now basically, that's a
very cryptic definition
108:46 - that I gave you if you
don't know what it is.
108:49 - Yeah, it maps two things.
108:52 - Okay, so anytime you have a relationship
108:55 - between two things, you
wanna use dictionaries.
108:57 - And when you don't have a relationship
109:01 - between two things, you wanna use a list.
109:03 - For example, if you wanna just remember
109:06 - a bunch of numbers, and
that's all you care about,
109:09 - you wanna use the list.
109:10 - Okay so for example, I only
care about a bunch of numbers
109:17 - like this, I want to use a list.
109:20 - Now what if I want to know a way where
109:24 - I don't know, I use my cell phone, right.
109:29 - I use this thing over here.
109:32 - And using this thing, I can
look up a person's name.
109:37 - And based on that person's name,
109:39 - it gives me back their phone number.
109:42 - Right, or if I type in their phone number,
109:44 - it kind of goes the other
way around, whatever.
109:47 - How can we do that?
109:49 - Well, that's the beauty of
dictionaries, my friend.
109:52 - So you're going to learn
something very powerful today.
109:55 - So let's go at it.
109:58 - Let's say I wanted to make a phone book.
110:01 - Right, with what we know in list.
110:04 - I mean, can you think of
a way how you might do it?
110:09 - I don't know I mean you
could store numbers,
110:14 - right like this as a string.
110:17 - And then store the
second number as a string
110:19 - and go 456-4433 right.
110:24 - Something like that, whatever.
110:25 - These are not, clearly very
silly numbers, but okay.
110:29 - And then you can say phone book
110:30 - and give me the zeroth number.
110:32 - Phone book, give me the first number.
110:34 - Also, notice we're using
something different for coding.
110:36 - We're using repl.it, right?
110:39 - So it's actually spelled R-E-P-L.it
110:45 - And the beauty of this is that
110:47 - it teaches you how to code while,
110:49 - it makes it very easy for you to code.
110:51 - You can use this without having
110:53 - an actual working environment,
110:56 - locally downloaded onto your computer.
110:58 - You can just run your code on fly.
111:00 - And what I'm going to do for you guys
111:02 - is once I'm done with this session,
111:04 - I'm gonna take this link and paste it
111:06 - into the YouTube description.
111:09 - And that way, you can actually get access
111:11 - to these notes directly, okay.
111:14 - So you'll be able to come
to this link and get,
111:18 - for example, the link right now is this.
111:21 - Okay, by the time we're
done with this video,
111:24 - the link might be different.
111:25 - And I'll post the most
updated link for you guys
111:27 - in the YouTube description.
111:30 - Okay so the website is R-E-P-L.it.
111:34 - And you can pick programming language,
111:36 - Python, for your programming language,
111:38 - and then just code here.
111:40 - Okay so let's check out what this does.
111:42 - Let's make sure to add print.
111:48 - Let's check it out.
111:49 - So you can see you have one, two, three
111:50 - and four, five, six, right.
111:52 - You printing out the zeroth element
111:54 - and then the first element of this list.
111:56 - That's great but I mean,
it's not really fun
111:59 - to remember names as numbers, right?
112:02 - 'Cause you're not gonna go,
112:04 - oh, I'm going to call you zero, Johnny.
112:07 - And I'm gonna call you one, Bob.
112:09 - And then every time you have
to look at Johnny's number,
112:11 - you're gonna type in zero
to get back Johnny's number.
112:13 - Or one to get Bob's number,
that would be terrible.
112:18 - And what if you had stored
hundreds of people in your list,
112:22 - then it gets really complicated.
112:23 - But now let's use dictionaries.
112:25 - Here's how dictionaries work, okay.
112:27 - Let me describe right here in notes.
112:33 - Dictionaries, okay, here's how they work.
112:37 - You have some dictionary,
112:39 - we will call it a dict, okay.
112:43 - And the store key value pairs.
112:47 - So if you put any key
gives you back the value.
112:51 - Okay, and how you store things
into a dictionary is like so.
112:56 - Your key goes here and
your value goes here.
112:59 - Okay, let's said a key one, value one.
113:02 - Then we can say key two, value two.
113:06 - Okay, and you can keep doing this all day.
113:11 - All right, now let's create a dictionary.
113:13 - Okay so let's create
our example phone book.
113:17 - So I'm going to say
Qazi, which is my name,
113:20 - which is my last name.
113:22 - but I go by my last name
pretty much everywhere.
113:24 - So we're gonna take
the string Qazi as the,
113:28 - Qazi is the what?
113:29 - Is that the key or the value?
113:32 - If you said, key good job.
113:34 - And we're gonna store
113:35 - the number 123-456-7890.
113:41 - Now notice that I'm
storing this as a string
113:44 - and not an actual number,
like an integer or something.
113:49 - Why do you think that is?
113:50 - Well think about it.
113:51 - If I remove the quotes from here,
113:53 - what is this gonna do?
113:55 - Is gonna do one, two, three,
113:56 - minus four, five, six,
113:59 - minus seven, eight, nine, zero.
114:01 - And I'm gonna end up
getting back negative 8,223.
114:07 - So it's actually gonna end
up storing it like this.
114:09 - That's not what I want.
114:11 - I want the exact number.
114:12 - So usually when you want
things exactly how they are,
114:15 - strings are perfectly good
data type to use there.
114:18 - And now I'm gonna say, Bob,
114:20 - and I'm gonna store Bob's number as,
114:24 - okay is this a, which key is this?
114:27 - This is the second key
114:28 - and now it's gonna be the second value.
114:29 - I'm gonna store his
number as 222-222-2222.
114:34 - Very easy number that Bob has,
114:36 - he gets tons of wrong calls.
114:40 - And he gets very annoyed.
114:42 - Now to make it a little bit nicer on me
114:44 - to read this dictionary.
114:45 - Sure, I can have it as a long one line.
114:47 - But as you can imagine
114:48 - as we begin to store multiple people,
114:51 - it's gonna be spilling
over to the right side.
114:53 - So what I wanna do is
make it easier on my eyes
114:56 - and make it easier to type.
114:59 - So I'm gonna go to the start
of the line, hit Enter.
115:01 - And Python knows what to do
with it and where to put it.
115:04 - And I'm gonna go to the start
115:04 - of this line and hit enter, okay.
115:07 - I'm also gonna go here and hit Enter.
115:10 - And I'm gonna go here and hit enter.
115:12 - Okay and what this does for me
115:15 - is it just makes it easier for me to read.
115:17 - Okay, kind of like this.
115:22 - And I can just simply start
putting things in here.
115:25 - We can leave that there,
that's not a problem.
115:27 - We can leave that one right up there.
115:30 - And I can put in another person, right.
115:32 - Cat, cad, cat, let's just do cat.
115:35 - Call her cat.
115:36 - Let's say her number is 333-333-3333.
115:39 - Okay and now what I can
do is I can do phone book
115:44 - and what's the way I can get back
115:46 - Qazi's phone number, right?
115:48 - So imagine you go to your phone,
115:51 - your iPhone or whatever you have
115:54 - and you simply swipe up or down right.
115:57 - You go to your, where's contacts?
116:01 - How does contacts work?
116:04 - I go to my contacts and I
type in let's say my name.
116:10 - Right, so how does it find it?
116:12 - And how does it give me
back the actual number?
116:15 - Well today you're gonna find out
116:17 - the secret behind how it works.
116:19 - Okay so it takes in the
key or my name, Rafi Qazi
116:24 - and it spits back the
value associated with it.
116:27 - It could be my email address,
116:29 - it could be my phone number,
116:30 - it could be whatever the
heck I want it to be, right.
116:32 - So now let's go into phone book
116:35 - and we can say Qazi, right?
116:37 - That's, you put in the key
and this whole thing liquefies
116:41 - and turns into the value, okay?
116:45 - So that whole thing turns into one value.
116:48 - Okay so let's print it out
and let's see what we get.
116:51 - And I'll break it down
how this expression works.
116:55 - So we got back 123-456-7890.
116:59 - Phone book is just this whole dictionary
117:01 - starting with the squiggly right?
117:03 - So phone book is this thing right there.
117:06 - And I'm indexing that phone book by Qazi.
117:10 - Okay, so as you can see,
I have this list here.
117:13 - And I'm simply indexing
it by Q-A-Z-I, okay.
117:18 - And once I index it what happens here?
117:21 - Right, once I index it by Qazi,
117:23 - I just get back the value.
117:26 - So this whole thing liquidates
117:29 - into that and then that result
117:32 - actually gets printed out on the screen.
117:35 - Okay that's how the dictionary works.
117:38 - Now, let's say I wanted to make it
117:40 - a little bit more complicated
to where each person had,
117:47 - like their names and each person
117:49 - had their own email address
associated with them
117:52 - and whatever, right.
117:53 - So we can make it a little
bit more interesting.
117:55 - For example, let's say that I wanted
117:59 - to add more values associated with Qazi,
118:01 - I don't want just his phone number
118:03 - but kinda like how my phone does it.
118:05 - It also has Qazi's email addresses,
118:07 - and it also has Qazi's home address
118:10 - and whatever else right,
so how would I do that?
118:13 - Well what I need to do
is I need to have one key
118:16 - that gives me back multiple
values associated with it.
118:19 - Here I have a key Qazi, I have a key Bob
118:22 - and I have a key Cat.
118:24 - So what I need to do to Qazi, for example,
118:26 - is make it give me back multiple values.
118:29 - Well what's a pretty darn good thing
118:32 - to give back multiple things?
118:36 - I remember it's a list.
118:38 - How about a list of things.
118:40 - So let's turn this from a bare string
118:44 - to a list that contains
one the phone number,
118:48 - and then we can say two it
contains one email address.
118:52 - So we can say qazi@qazi.com.
118:58 - Okay, fake email address.
119:00 - Let's close that down there.
119:05 - And okay, sweet so now we have a list
119:07 - containing two strings inside of it.
119:10 - At first index it's a
phone number and then,
119:13 - or zeroth index rather,
and then the first index
119:16 - we half the email address.
119:19 - I can do the same thing to the other ones,
119:21 - but let's just play around with it
119:22 - and see what we get.
119:24 - So I'm going to change
this from phone book Qazi
119:27 - and I'm gonna say, okay.
119:30 - I know that once I run this line of code,
119:33 - what I will get back
is actually this list.
119:38 - This whole thing is
actually gonna evaluate
119:39 - to the value of Qazi, right.
119:41 - So you put in the key,
119:42 - look at the formula at the top right.
119:44 - You put in the key and you get back
119:46 - the value from the other side.
119:48 - So I'm gonna run it and
let's see what we get.
119:50 - So you can see that we get back the value.
119:52 - I know that this thing is
gonna turn into a list.
119:57 - Then I have to think about
119:58 - how can I access different
different things from the list.
120:00 - Let's say my question to you was,
120:02 - can you get me Qazi's phone number?
120:05 - You would say, okay, I'll
get you Qazi's phone number.
120:08 - I know that it's inside of a dictionary
120:11 - where the key is Qazi,
where there is a key Qazi.
120:15 - And if I access that key Qazi,
right if I access the key.
120:21 - The dict, and if I access the key Qazi
120:25 - I get back a list of things containing
120:30 - his phone number and email, right.
120:37 - So you're like, now I know
that I have a list of things.
120:41 - How can I access things inside of a list?
120:43 - I remember how you access
things inside of a list
120:47 - is based on the index number, right?
120:50 - So for example if I go up here.
120:53 - If I have to access the first element
120:55 - or the zeroth element of
the list I would do this.
120:57 - And this gives me the
first element of the list.
121:01 - Where asked for a dictionary
you would actually put in
121:06 - for a dictionary you would actually put in
121:09 - a name or something.
121:10 - Something that's nice
and easy to remember,
121:13 - in a list, you use numbers.
121:15 - So then you go, okay well I
know that Qazi's email address
121:20 - is at position one, right?
121:23 - This is index zero, and
this is the index one.
121:25 - So if I asked you the question
121:27 - of get me Qazi's email address,
121:29 - you know that this whole
expression evaluates to a list.
121:33 - Well then you can just say one, right.
121:38 - Just like this thing over here.
121:41 - And let's change it to zeroth element.
121:43 - Let's just to be very accurate.
121:45 - Let's hit that and you can see
121:46 - that I get back Qazi's email address.
121:49 - Well, what if I wanted to
get Qazi's phone number,
121:55 - I would just change this to a zero.
121:57 - And you can see that I got
back that's the same thing.
122:00 - Now let's say I wanna do the
same thing for Bob right.
122:03 - This is the phone number,
this is bob@bob.com.
122:07 - And then we have, let's turn
this into a list of things
122:11 - and let's call it cat@cat.com
and we have those closing,
122:17 - I'll have to make sure that
I close my quotes here,
122:21 - and close the quotes there.
122:23 - Okay great, so I have a phone book.
122:27 - Let's get the terminology right.
122:29 - Let's just practice with the terminology.
122:31 - It's good to say it over and over again.
122:33 - I don't care if I sound crazy
122:35 - and you shouldn't care
that you sound crazy.
122:37 - But understand the terminology
122:38 - because it's gonna help you
be able to research it better,
122:41 - understand it better, synthesize
the information better
122:44 - and be able to write
better code ultimately
122:47 - because you will understand
all of the data structures.
122:50 - Whereas if you just keep
mumble and hand waving,
122:52 - you're going to get
very confused later on.
122:54 - You might be able to get
past some of the stuff.
122:56 - But then when we get into
list inside of dictionaries,
122:58 - inside lists of dictionaries.
123:01 - Is going to get very complicated,
123:02 - you're gonna be like oh man,
123:04 - I wish I learned the terminology
when it was nice and easy.
123:07 - So let's just talk through it.
123:09 - I have a dictionary that
contains how many keys?
123:12 - Three keys, what's each keys name?
123:15 - Qazi, Bob, Cat.
123:18 - What do each of the keys contain?
123:19 - Each of the key contains a
value and that value is a list.
123:24 - Okay, good, each key contains a value,
123:27 - which is a list that's good.
123:29 - And how many elements
is each list contain?
123:32 - Each list contains two elements,
123:34 - right as we can see right here.
123:37 - So now if I wanted to get a Cat's number,
123:42 - I could do Cat and I can say zero
123:46 - and I get back 333-333-3333.
123:50 - So let's give it a run.
123:52 - And you can see on the right hand side,
123:54 - that's what I get back.
123:55 - Okay, so I will leave
this here for you guys.
123:59 - And I will link you guys to the code
124:02 - so you guys can go and play
around with this stuff as well.
124:07 - Okay, that's it for dictionaries
124:11 - and we will get into it's
better use cases later on.
124:14 - For now you're gonna watch Boolean
124:17 - algebra jujitsu after this video.
124:21 - Great job guys, take care.
124:24 - I will see you in the next video.
124:26 - (upbeat music)
124:30 - Hey guys, what's up? This is Qazi.
124:33 - This is my third time making this video.
124:35 - Last two recordings got deleted
and they were really long.
124:38 - I'm gonna try to make it short and sweet.
124:41 - Right it only lets me make them better.
124:43 - So that's what I'm actually excited for.
124:46 - Anyways, in this video we're gonna talk
124:48 - about Boolean algebra jujitsu, okay.
124:53 - Before we get to that, I
wanna just take a second
124:56 - to show you guys, check it out.
125:00 - The official, Clever Programmer premium
125:04 - short sleeve t-shirt.
125:08 - Custom designed let me
know what you guys think.
125:11 - And I'll put in the
link for you guys below.
125:14 - So if you guys wanna actually get it,
125:16 - you can order it.
125:18 - Some feedback would be great,
125:20 - if you think it sucks or
if you think it's good,
125:23 - let me know I would love to know that.
125:26 - Let's get on with what we are
trying to cover for today.
125:30 - Okay so,
125:34 - I wanna talk about Boolean algebra.
125:37 - Right, so what is it and how does it work?
125:40 - And why do we need to know it?
125:42 - It's one of the most important
things in programming.
125:48 - That's it, period.
125:51 - In all of computer programming languages,
125:53 - anything that you use.
125:54 - Even in electricity, it's super important.
125:58 - At the end of the day,
everything turns to zero, one
126:01 - or true or false.
126:03 - Okay, so we have false or true.
126:06 - Notice how there are special
statements in Python,
126:09 - which is why they highlight
into the color orange.
126:13 - And then it doesn't give you an error,
126:15 - Python like understands
what true and false is.
126:17 - For example, if you do true
like this or false like this,
126:21 - its gonna give you back an error saying,
126:23 - I have no idea what you're talking about.
126:25 - So they're like pre existing things
126:28 - that are built into Python.
126:30 - Now why would we need to ever use this?
126:33 - Right, why would we need to use this?
126:35 - Well, let me show you guys something
126:37 - that foreshadows a little bit into
126:39 - maybe our one of our next few videos
126:41 - like conditions of control flow.
126:43 - Where I'm going to talk
more about if statements.
126:45 - But let me just foreshadow
that and show you guys
126:48 - so you guys can see from a
bigger picture perspective
126:50 - how it works, and in turn
126:52 - that would make you
want to learn what it is
126:54 - and then we can get down into
126:56 - the nitty gritty details, cool.
126:59 - So for example, an if
statement works like this.
127:02 - You have an if statement,
127:04 - followed by some condition,
127:07 - which does not need to be in parentheses
127:09 - but I'm just putting in parentheses.
127:11 - And that condition evaluates
to a true or false statement.
127:15 - Okay, and based on that, right.
127:20 - Based on this, then this.
127:25 - So it's like if that, then this, okay?
127:31 - So if Johnny made more,
127:33 - if Johnny worked overtime and
he worked more than 40 hours,
127:37 - then I want to pay him overtime.
127:40 - Okay, so for example, the only
time this block of code runs
127:46 - is if Johnny made more than 40 hours.
127:48 - Which means it needs to value it true.
127:50 - You need to have a true here.
127:52 - Okay, so let's say if true
127:57 - print hello, okay.
128:02 - And notice that this block of code runs
128:05 - because the statement is true.
128:07 - And then this block of code runs, right.
128:10 - This is the if condition.
128:12 - It's not very smart what I'm
doing here is kind of stupid.
128:14 - I'm just hard coding true right in there,
128:17 - which is not what you're gonna be doing
128:18 - most of the times.
128:19 - But I'm just doing this to like illustrate
128:21 - how it breaks in it's a bare
bones skeleton, so to speak.
128:25 - And let me show you if false,
128:26 - and then see what happens print hi.
128:31 - And you can see that this
part of the code did not run
128:33 - because it goes, oh, false.
128:36 - It's false so I'm not gonna run it,
128:38 - not gonna do this right.
128:39 - If false then don't pay him
overtime or whatever, right?
128:43 - I could have anything else here.
128:44 - I just have print hello.
128:46 - But the implications of this
128:47 - are far more than printing stuff.
128:50 - It's doing actual stuff, right.
128:54 - Now another reason why
this is very important
128:56 - for you guys to learn is imagine
128:58 - if you were hired and you
were working in a company
129:00 - and you had to design a
system for paying employees.
129:03 - Well, if you do your logic wrong,
129:05 - then you might be paying
every employee over time.
129:08 - Which means that the company
129:10 - is paying way more money to its employees.
129:14 - Like, for example, you
might write the logic wrong
129:17 - and employee that works three hours
129:19 - might be getting paid overtime
129:21 - for all of those three hours.
129:22 - The company has to pay a lot more money.
129:24 - And then the company has
to fire a lot of people
129:26 - 'cause they're like, well,
there's a lot of money
129:29 - going out of our pockets, right.
129:31 - On the other hand, you could have the case
129:34 - where no employees getting paid over time,
129:37 - even though they worked
overtime, over 40 hours.
129:41 - So with the great power,
129:43 - right as being a programmer,
comes great responsibility.
129:45 - So that's why you wanna learn
129:46 - this stuff really, really well.
129:48 - So you don't make these big mistakes
129:50 - and you can help out companies
129:53 - and you can help our
clients or whoever, right.
129:57 - So we have this case, false print hi.
130:00 - That's what happens,
130:01 - but now let's do something
more interesting.
130:02 - So I'm gonna introduce you guys
130:03 - to something called comparison operators.
130:08 - Okay, so you guys might
know that equal equal sign,
130:11 - it compares two things together.
130:13 - Note one equal sign that
makes something something.
130:16 - Two equal signs check if one thing
130:18 - is equal to another thing.
130:20 - Okay?
130:22 - So I have two equal
signs, I have less than.
130:26 - I have greater than sign.
130:28 - I have a less than or equal to sign.
130:30 - I have a greater than or equal to sign.
130:32 - I have a does not equal sign.
130:33 - Okay, these are your comparison operators.
130:38 - So what do I mean?
130:39 - Five is equal to five, it's
gonna give me back a true.
130:44 - Right five is five.
130:46 - How about if I said five
does not equal five?
130:48 - What do you think is going to give me?
130:50 - False, right, that doesn't make any sense.
130:52 - How about five is greater than five.
130:54 - Does that make sense?
130:55 - No, it's not.
130:56 - Five is less than five, nope.
130:58 - Five is less than or equal to five.
131:00 - It should give me back a true.
131:01 - Five is greater than or equal to five.
131:04 - And it also gives me back a true
131:06 - because it's not greater than,
131:08 - but it is certainly equal to five.
131:10 - Okay so that's how this works.
131:12 - And look at the bottom and breaks down
131:14 - into true false, true false right.
131:17 - Now let's say we wanted to pay Johnny more
131:20 - if he worked, going back
to our original example.
131:22 - Let's say we wanna pay Johnny more
131:23 - if he worked extra hours, right?
131:25 - If he worked 40 hours or something.
131:28 - So how would we check that condition?
131:31 - If you work more than 40 hours?
131:33 - How would we check that?
131:34 - We have to make that condition,
131:35 - we have to check that condition?
131:37 - So these are all called conditions,
131:39 - because at the end of the day
131:40 - they evaluate to a true or false, okay.
131:43 - So this is a condition and
evaluates true or false here.
131:46 - So let's make a variable
called Johnny hours work.
131:50 - And let's set that equal to 40.
131:52 - And now let's check it.
131:54 - Johnny hours work is greater than 40.
131:57 - So I'm like asking my computer a question.
131:59 - And they'll say false.
132:02 - Okay, so I know I shouldn't
pay him overtime then right?
132:04 - Because I got back a false.
132:05 - What if I did,
132:06 - is he making, is he
doing more hours and 30?
132:09 - Okay, good, so at least
he's working right?
132:11 - He's not just not doing anything.
132:14 - Okay, so he's worked more than 30 hours,
132:16 - but he has not worked
greater than 40 hours.
132:20 - Okay, has he worked greater
than or equal to 40 hours?
132:26 - It says true.
132:27 - Since I know he hasn't
worked greater than 40 hours
132:30 - then in this statement
greater than or equal to 40.
132:33 - I know that he's worked equal to 40.
132:36 - But let's just double check
and say equal equal 40.
132:41 - Okay cool, so we now know that Johnny
132:44 - has worked exactly 40 hours.
132:46 - So we can't pay him
over time in this case,
132:48 - but let's just try it out anyways.
132:51 - Let's do if Johnny,
let's turn it into like,
132:55 - like a conditional statement.
132:56 - Which again, we're get more into later.
132:59 - Is greater than 40, right?
133:02 - Then print pay him overtime.
133:08 - Oh, looks like we're not
gonna pay him overtime
133:10 - 'cause he has worked exactly 40 hours.
133:13 - Now let's make Johnny's hours 41 hours.
133:15 - Let's say he's worked 41
hours, right, so overtime.
133:20 - Now let's run this.
133:21 - And you can see that it
says pay him overtime.
133:24 - So how could this translate for you?
133:27 - Oh, first of all, let's just break down
133:29 - exactly what this turns into, right?
133:30 - So we have this statement,
133:33 - if Johnny works greater than 40 hours,
133:35 - how does this actually work?
133:37 - Well, what is the variable
Johnny hours work?
133:40 - We made it to 41 right?
133:42 - 41 is greater than 40, is that true?
133:45 - It certainly is, 41 is greater
than 40 and we get true.
133:49 - And then we get into its most
bare bones skeleton structure
133:53 - which I showed you guys
up at the top right here.
133:55 - And it's simply a just a
true at the end of the day.
133:59 - And then this block of code runs.
134:01 - Okay, and if the same way,
134:06 - the reason why this line of code,
134:09 - for example, like let's
say, I do this right.
134:12 - If you work greater than 42 hours,
134:14 - why does this line of code not work?
134:16 - Well, again, Johnny hours worked is 41,
134:19 - is 41 more than 42?
134:22 - Of course not so this turns to false.
134:24 - And when this turns to false we get back,
134:30 - We actually get back nothing
134:31 - 'cause this line of code does not run.
134:34 - Okay, that's the bare bone,
134:36 - like that's the main reason
why we use Boolean operators.
134:40 - There are lots of other reasons
that you'll see as well.
134:42 - In the next video, we're
gonna get down more
134:45 - into how Boolean logic works.
134:49 - So for now show you guys
comparison operators.
134:51 - In the next video we're gonna talk
134:52 - about Boolean logical operators.
134:58 - Okay so for example, we're
gonna talk about and,
135:01 - and we're gonna talk about or,
135:03 - and we're gonna talk about not.
135:05 - All right, and how all
of those things work
135:08 - in sync with each other.
135:11 - That's it for this video,
135:12 - I'll see you guys in the next video.
135:14 - (upbeat music)
135:18 - Guys what's up this is Qazi
from cleverprogrammer.com.
135:21 - In this video we are going to talk
135:23 - about Boolean logical operators.
135:26 - So in the last video we covered
135:28 - the basic jujitsu of Boolean algebra.
135:33 - Kind of like what is the basic,
135:35 - most fundamental ideas
behind Boolean algebra.
135:39 - And we saw that everything
that we talked about
135:41 - converse either true or false.
135:44 - Right so here, we have all these things
135:47 - converting to true or false.
135:49 - That's effectively what ends
up happening at the end.
135:53 - So now let's go and talk about
135:56 - the operators that I was mentioning.
136:00 - Okay, so before I start
giving you the rules
136:03 - and how they are defined in
the world of electricity,
136:07 - or logic gates or
programming for that matter.
136:11 - I wanna just give you
guys an intuitive sense
136:13 - of how it works, because
that's way more important
136:16 - than memorizing these, truth tables
136:19 - for a lot of these cases.
136:21 - So let me get to try to
give you guys an intuition.
136:26 - So let's start off with and, okay.
136:30 - We're gonna start off with
this logical operator.
136:34 - As you can see it's a
special word in Python,
136:37 - which is why it highlights orange.
136:39 - If you write and with two d's
136:40 - it does not highlight to orange.
136:43 - And let's talk about what it does.
136:45 - So let's say I did,
136:48 - five and five, it will
give me back a five.
136:53 - And here it's not really making sense.
136:55 - Let's try true and true and
let's see what it returns.
137:01 - It return true.
137:02 - Now let's try something
like true and false.
137:05 - Let's see what that
returns, that returns false.
137:08 - So now let me try to give you guys
137:09 - an intuition of how it works for and.
137:13 - Let's say there are either two things.
137:16 - I asked you, do you like
poison and do you like pizza?
137:20 - Right?
137:22 - If I asked you that question,
137:24 - and you could only answer with yes or no,
137:27 - what would you say?
137:30 - Hopefully you would
say false or no, right.
137:36 - And then I would be, if
I asked you to elaborate,
137:39 - then you might say, I might like pizza,
137:41 - but I really don't like poison, right.
137:45 - So the idea behind you not liking poison,
137:50 - but you liking pizza, that whole thing.
137:53 - When you combine it with an and,
137:54 - that whole thing becomes false.
137:56 - Because there's one of those
things that you don't like,
137:59 - so you will, you can't say yes
138:02 - to the whole expression
that I gave you, right?
138:07 - For and both of the things have to be true
138:10 - for you to say yes to it.
138:12 - Like if I asked you do you
like pizza and ice cream?
138:14 - You say, yeah, right.
138:16 - But if I tell you like
jumping off of the cliff,
138:19 - or do you like doing
your math homework a lot?
138:23 - And do you like writing essays?
138:25 - In that case, probably both of the things
138:27 - you might not like doing.
138:29 - Your math homework and writing essays.
138:31 - And you might say, no, I
like doing neither of them.
138:34 - Or for short you would say false.
138:37 - Right, so I can say
something like math homework.
138:42 - Let's set it to false, meaning
like you don't like it.
138:46 - And let's say long essays,
138:51 - is equal to false.
138:52 - And now let's combine the two.
138:54 - Let's say math homework and long essays.
138:59 - You get back false, right?
139:03 - Math homework is really false
and long essays are false.
139:06 - So false and false gives you a false.
139:09 - Now let's try pizza.
139:11 - And let's say we like it,
139:13 - for my friend Danielle, he loves pizza.
139:15 - So if you're watching this video,
139:16 - that's who I was thinking of
139:18 - when I came up with this example.
139:20 - Let's do ice cream and
let's set that to true
139:22 - meaning we like both of them.
139:23 - And let's do pizza and ice cream.
139:27 - Right, and you get back true.
139:30 - So even thinking about it logically,
139:32 - whenever you combine
something with an and,
139:35 - both of those things are now combined.
139:37 - So when you're answering,
139:38 - you're answering for both
of them even in real life.
139:40 - Both of those things have to be true.
139:43 - Johnny, go throw out your garbage.
139:46 - And then you get to play, right.
139:49 - So in that case both of those
things happen to be true,
139:54 - if you throw out the garbage,
139:58 - then you kind of get to play.
140:00 - It's a little bit of a contrived example.
140:02 - Is more of an if then
statement rather than an and.
140:06 - Okay, how about this even better,
140:09 - Johnny throw out your
garbage and do your homework,
140:11 - and then you get to play.
140:13 - Okay in that case, the only way Johnny
140:16 - will get to play his game
is if he has thrown out
140:19 - the garbage and done his homework.
140:22 - Much better, now I can sleep better.
140:26 - All right, that's the breakdown for and.
140:29 - So now let me just give you some problems
140:32 - and throw it at your face.
140:33 - Okay false and false.
140:35 - Quickly, what do you think is gonna be?
140:37 - You should have said false.
140:39 - False and true.
140:42 - Remember, one of them is false,
140:43 - both of them end up being false.
140:46 - Because we can imagine that this is poison
140:49 - and this is pizza.
140:51 - And you can't stay true to both of them
140:54 - because there's one of
them that you don't like.
140:57 - For it to be true, both
of them have to be true.
141:00 - What if I gave you true and false?
141:03 - What if I gave you true and true?
141:05 - What do you think that would be?
141:07 - Okay, hopefully you're trying to get,
141:08 - you're starting to get a
little bit of sense of this.
141:11 - Why this will be important later on
141:12 - is once we get to the conditions
of control first action,
141:15 - which we should be getting
to in the next video.
141:18 - In there, we're gonna be talking about how
141:20 - you can combine an if statement.
141:22 - Use an and to check two conditions,
141:25 - and then the block of code runs.
141:28 - So if Johnny homework
141:32 - and pizza or and,
141:36 - I don't know, throw out garbage.
141:41 - Then this code here runs, okay.
141:46 - Obviously, I'm gonna hit
syntax errors right now
141:48 - because I haven't defined Johnny homework,
141:50 - I haven't defined throw out garbage.
141:52 - And you can't write stuff
separated by spaces.
141:55 - And I don't know who
writes capital variables.
141:58 - Only if it's constantly but
we'll get to that later.
142:01 - All right so now let's go
to the or side of things.
142:07 - What if we combine two things with an or.
142:09 - If I asked you, do you like pizza?
142:13 - Okay, for sanity check,
assume you like pizza,
142:18 - even if you don't.
142:19 - Okay, so just to play along,
just imagine you like pizza.
142:22 - So if I asked you do you
like pizza or doing homework?
142:29 - If you had to answer that
with a true or false,
142:32 - what would you say?
142:33 - Do you like pizza or doing at homework.
142:38 - If you could only answer
with a true or false
142:39 - or yes or no, you should say yes.
142:44 - Or you should say true.
142:46 - Because there's one of
those things that you like,
142:48 - and I asked you or they're not connected
142:50 - with each other, right?
142:51 - A or B.
142:53 - So let's now, and let me
show you guys this in code.
142:57 - If I do false or true,
check out the you get back.
143:00 - You get back a true statement.
143:03 - Right if I do true or false,
143:07 - I get back a true statement.
143:09 - And if I replace this with something
143:11 - that we understand better,
let's say we don't like poison.
143:14 - Poison is equal to false.
143:17 - And let's say we do like pizza
143:20 - and we already have pizza as true,
143:22 - but I'm just gonna do that again.
143:24 - And now let's write
this statement over here
143:27 - using pizza and poison.
143:32 - Sorry pizza, or poison.
143:39 - I misspelled poison, but
in one of my older videos,
143:42 - I had it there.
143:43 - So don't worry about why it
figured out what poision was.
143:47 - But yeah let's just use
this poison variable
143:51 - that we wrote here.
143:52 - So you can see that we get
back a statement that's true
143:55 - because one of the things is true.
143:58 - And in this case, that's pizza.
144:00 - So for an or statement to be true,
144:02 - only one of the things
have to be true, right.
144:05 - If I asked you, do you
like ice cream or pizza,
144:10 - you would say, true.
144:12 - If you could only answer
that with one thing.
144:16 - Just like if, you know, again,
144:19 - we take Johnny or our son, Bob.
144:22 - And we go, Bob, either,
144:26 - if you do your homework, or
you throw out the garbage
144:29 - then you get to play.
144:30 - So he just goes, oh sweet,
144:32 - I'm just gonna throw out the garbage.
144:34 - So this way, he doesn't have to worry
144:36 - about doing homework.
144:38 - He decides to only do one of the tasks
144:39 - and then he can play the game.
144:41 - But what if he went and
tried to be extra nice
144:44 - and threw out the garbage
144:46 - and then went and did his homework.
144:49 - Would he still would,
144:50 - us being his dad or mom,
still allow him to play?
144:54 - Of course he did both
of the things, great.
144:56 - That's extra bonus, but for him to qualify
145:00 - as a player or like go play his games.
145:03 - He really needs only one thing.
145:05 - That's what the or does in our real life.
145:08 - And so that's what it does
in programming as well.
145:12 - So now let me just throw some examples
145:15 - at your face and you try to figure it out.
145:17 - True or false, what do you
think I'm gonna get, quickly?
145:21 - I'm gonna get back a true only,
145:22 - one half one of them has to be true.
145:23 - What if I did true or true?
145:25 - What am I gonna get back?
145:27 - True, obviously.
145:29 - What if I do true or sorry?
145:32 - Let's do false or false.
145:34 - True false statements.
145:36 - Do you like poison or homework?
145:40 - You're gonna say no,
145:46 - none of them.
145:47 - There you go.
145:48 - So that's a little bit
of a breakdown of or,
145:51 - and if I wanted to break down not,
145:53 - for you not is a very simple.
145:55 - Not is just something that doesn't happen.
146:00 - Okay, so it's just an
indication of something.
146:03 - So if I said not true,
146:04 - what do you think I'd get back?
146:06 - I get back false.
146:07 - If I did not false, what would I get back?
146:10 - True is just a negation.
146:12 - So if I do something
like not true or false,
146:17 - what do you think I'm going to get back?
146:19 - What is this expression going
to validate to, true or false?
146:23 - Remember for something
to be true in the or,
146:27 - combined with the or
Boolean logical operator,
146:30 - only one of the statements has to be true.
146:32 - So here we do have a true.
146:33 - So true or false evaluates
to a true and then right,
146:38 - this pretty much becomes true,
146:40 - and I'm calling not,
untrue gives us false.
146:43 - So now let's just run it.
146:46 - Okay, and as you can
see, we get back false.
146:50 - So what I'm gonna do for you guys
146:52 - on cleverprogrammer.com is if you guys
146:54 - go to submit your exercises here,
146:57 - what I'm gonna do is I'll have.
146:59 - Or sorry if you go to do the watch
147:01 - the video course on my website,
147:02 - I will have exercises here for you,
147:05 - where you can kind of drill and kill
147:07 - how true and false in this
stuff, Boolean operators work.
147:11 - That's going to be very,
very useful for you guys.
147:15 - So then when you're writing
your evidence statements,
147:17 - you'll understand what you're doing.
147:20 - Okay, but this is kind of,
147:22 - we just need a basic understanding of it.
147:25 - Some places go really
crazy in depth into it,
147:28 - like creating things like
not true or false, or true.
147:36 - Just combining it and making it into a,
147:41 - like these can be good exercises
147:43 - for you to figure out.
147:44 - But realistically, when
you're writing code,
147:46 - you're not gonna be doing stuff like this.
147:48 - So if you can figure this
out in your head great,
147:51 - but like, you're not writing code
147:55 - like this most of the time.
147:56 - So I wouldn't wanna
worry about it too much.
147:58 - But if you wanna go ahead and
give yourself some exercises
148:01 - like this to do, or come to my website
148:04 - where I'll have some
exercises for you guys to do,
148:05 - that would be great.
148:08 - And before I conclude this
video, let's go back to here.
148:13 - I have put together a
truth table for you guys.
148:18 - Or rather, it's on wikimedia.org.
148:22 - So I didn't put this
together, but I have an image.
148:24 - I'll link you guys that image.
148:26 - And you can see how the truth tables work.
148:30 - So in the A column, we
have some statement.
148:34 - Imagine it being pizza, right?
148:37 - We have that statement.
148:38 - And B say some other statements.
148:41 - So we don't really know what
these statements are for now,
148:44 - but you can imagine them
to be whatever you want.
148:47 - So let's say we have some
statement A and some statement B.
148:50 - If A is false and B is false,
148:53 - then A and B, you get back false.
148:57 - Right, remember and.
148:59 - So if you have, again,
149:02 - A being poison and B being homework,
149:06 - poison and homework, you get back false.
149:09 - You like neither of them.
149:11 - And if we have A or B,
149:13 - since both of them are
false, that's still false.
149:16 - And not A is just the opposite
of that, you get back true.
149:23 - And same thing over here
we have false and true.
149:28 - False and true gives you back a false.
149:30 - False and true you only need one thing
149:33 - to be true in or statements,
you get back a true.
149:35 - And then not a which is
saying, opposite of A,
149:41 - since a was false, you get back a true.
149:44 - Okay so one thing I need you,
149:46 - want you to notice about and
operator, and or operators,
149:51 - if you look down the
column of the and operator,
149:53 - you'll only see one true case.
149:57 - And the reason and only
reason why it's true
150:00 - is because both of the
statements are true.
150:03 - Okay, that's the key thing to remember.
150:06 - Both of the things are true.
150:08 - And if you go and look in the or column,
150:10 - you'll see the or being
false only in one case.
150:14 - And the only case is false
150:15 - is when both of the things are false.
150:17 - Okay so notice the key
distinction between the two.
150:22 - Okay that's kind of all you
have to know for Boolean stuff.
150:26 - And I'm not gonna go into the next video
150:27 - with the really long
nested Boolean statements.
150:30 - It's kind of useless.
150:31 - We don't really think that way anyways.
150:34 - And we're gonna get into
conditional and control flows.
150:38 - So I will see you guys there.
150:40 - (upbeat music)
150:44 - Hey guys, what's going on?
150:46 - My brain is about to blow up.
150:49 - I've reading this book,
called "The Little Schemer."
150:53 - And it's about this programming
language called Scheme.
150:58 - And in this programming language,
151:01 - everything is done really difficult
151:04 - and a very difficult way.
151:06 - And I spent eight hours studying it.
151:08 - So my brain is like, fried.
151:11 - But I'm excited to take
a break from studying it
151:14 - and get on with teaching something
151:17 - about computer programming in Python.
151:20 - So we covered in our last video Boolean.
151:24 - And we talked more specifically,
151:25 - we covered the Boolean logical operators.
151:28 - We talked about and and we talked about or
151:31 - and we talked about not.
151:33 - So another thing I wanted
to mention to you guys,
151:35 - I had it open here so I don't forget.
151:37 - If you guys are on my website,
151:39 - you can write code directly underneath
151:41 - while you're watching the video.
151:42 - So you can write something
like print five or whatever
151:46 - and hit this and then it will run it
151:48 - and actually give you the results.
151:49 - So if you don't,
151:51 - if you're having problems
running your code
151:54 - or you just want somewhere easy to run it?
151:56 - Well, you can go here and watch the videos
151:58 - and run it at the same time.
151:59 - Back to where were.
152:02 - Okay, so as you can see, we covered
152:05 - a lot of this stuff, right.
152:06 - With and, or not.
152:09 - So now let's do some examples
152:11 - where we combine our
conditional control flow
152:15 - with our Boolean logic, okay.
152:18 - So this is what's gonna
tie it all together.
152:20 - This is what was gonna allow you
152:21 - to make powerful games and
do powerful things right now.
152:27 - Okay not in 100 more videos.
152:30 - Not reading one whole, another book.
152:32 - You can start to build games
and functional programs,
152:36 - doing what I'm about to show you, okay.
152:39 - So let's get to it, so
you saw I showed you,
152:43 - okay you have Boolean operators
like you do true and false,
152:45 - and you get some result.
152:47 - Now, I also showed you how
you can have some examples
152:51 - like Johnny homework and this
152:53 - and that this code runs here.
152:56 - Okay, I showed you that at the top.
152:58 - So let me just bring that down.
153:01 - Whoops, the whole example.
153:04 - This is not real code.
153:05 - This is just,
153:08 - this is gonna give you
wrong answers for now.
153:11 - So now let's try to do those things
153:12 - where if you had an employee
153:14 - that was getting paid over 40 hours.
153:16 - And you wanted to give him overtime pay,
153:19 - again let's tap it all in here.
153:21 - And let's see how that would work.
153:23 - So if I did, Bob hours worked,
153:28 - and I said, okay he
worked, let's say 40 hours.
153:32 - And if I said, if Bob
hours, greater than 39,
153:37 - then print, he worked overtime.
153:40 - For some reason, we have less
than 40 hours as overtime.
153:46 - But whatever, nevermind that.
153:48 - He worked overtime, so let's
see if that prints out.
153:50 - If it does print out, then
that means he worked overtime.
153:53 - And as and as you can see,
153:55 - Bob hours worked were 40.
153:57 - 40 is greater than 39, so
that part evaluated to true.
154:02 - And then you got back to statement.
154:04 - Now what if we wanted to make it
154:05 - a little bit more interesting?
154:08 - Let's go back to the example of the kid
154:10 - where he throws the garbage.
154:12 - And he does his homework, right?
154:16 - So for example, let's say Johnny homework
154:21 - is equal to true.
154:23 - Meaning he completed
his homework assignment.
154:26 - Now let's say Johnny, whoops,
154:31 - Johnny throw out garbage.
154:35 - And let's make that also true.
154:37 - So he's done both of the things.
154:39 - Now let's see if he gets
to play a video game.
154:43 - Okay, let's let's see if he
gets to play his Xbox 360.
154:46 - So if Johnny homework, right,
154:49 - dad says if Johnny does his homework.
154:52 - And Johnny throws out the
garbage, whoops I'm sorry.
154:58 - Then,
155:02 - Johnny can play Xbox 360.
155:11 - Right so if that statement
prints out he can play Xbox 360.
155:14 - And I don't know why I'm running Xbox 360,
155:17 - I feel like I'm living in 2005.
155:19 - Xbox One has been out and I'm pretty sure
155:21 - in the next few years they're
gonna bring out the new one.
155:22 - So let's change this to Xbox one.
155:25 - And let's hit enter.
155:27 - So it printed it out.
155:28 - Johnny can play Xbox One.
155:31 - How did this work?
155:32 - Johnny homework evaluated
to a true statement.
155:35 - Johnny throw out garbage
evaluated a true statement.
155:38 - The only time you get back a true
155:40 - when you combine something with an and
155:42 - is when both of the statements are true.
155:44 - So true true and we got back that, right.
155:50 - Now, just for some little
exercises here and there.
155:52 - What if I did something
like not Johnny homework?
155:58 - Oh, whoops, Johnny homework,
156:01 - or Johnny throw out garbage.
156:13 - Right what do you think I
would get here as a result?
156:19 - Let's think about it.
156:20 - So if you guessed it correctly,
good, pause the video.
156:23 - Or let's try to figure out together.
156:25 - So not throw out garbage, not true, right?
156:29 - Throw out garbage not
true gives you false.
156:31 - And this part is true.
156:34 - So you essentially get true or true.
156:39 - And then not true or
true gives you back true.
156:42 - Because for an or condition
156:43 - to evaluate to true only one
156:45 - of the conditions have to be true.
156:46 - And then calling not on a true statement
156:48 - gives you back a false.
156:50 - And hence we get a false okay.
156:53 - Again, I'm not gonna lie so much
156:54 - on these contrived force Boolean examples,
156:57 - 'cause your thing is
never gonna get like that.
157:01 - And but it's just good to
know how it works, right?
157:03 - It works through the inner parentheses,
157:07 - inside of the parentheses first,
157:08 - and then it goes outside
of the parentheses
157:10 - and starts to evaluate things.
157:12 - Okay, so you can see we were
able to put things together.
157:16 - Now imagine if you were making
157:18 - a game of rock, paper, scissors.
157:22 - Right, let's rock, paper, scissors, right?
157:26 - I can say if human picked,
157:29 - let's say a rock and
computer picked scissors.
157:37 - Now I can say if, now I can say,
157:40 - let's see what can I say.
157:41 - I can say something like
if human equal equal rock
157:47 - and computer picked scissors.
157:52 - Then who wins?
157:53 - Right, who gets the point here?
157:55 - So I am going to say that
human score is equal to one.
158:02 - Okay, so human pick rock,
computer picked scissors, right?
158:07 - And rock, paper, scissors just in case
158:08 - you didn't know rock beat scissors.
158:12 - And now let's check the human score.
158:15 - And you can see that I
got back a one, okay.
158:18 - So that's why if conditions
are so important,
158:22 - we can also start to tack them on.
158:25 - Okay, so let's say that,
158:30 - let's say if human picked rock
and computer pick scissors.
158:34 - If this was not the case, what
if there was some other case?
158:38 - Let's say computer pick something else.
158:40 - So let's say computer is bananas, right.
158:44 - So if I write this line of code,
158:47 - how can I check for other things.
158:48 - I can say, whoops.
158:51 - I can say else if, I gotta get
out side of the if statement.
158:55 - I can say else if computer, sorry,
159:01 - human picked rock
159:05 - and computer picked bananas.
159:13 - Then you can say I don't know,
159:16 - computer is equal to,
159:18 - computer score is equal to zero.
159:21 - And human score is equal to zero
159:24 - because bananas is not
really a valid thing.
159:27 - So you get back both got zero.
159:30 - And then it says something like print.
159:34 - You can't pick,
159:37 - you can't pick anything other
than rock, paper or scissors.
159:47 - Right, something like that.
159:48 - And let's hit it.
159:49 - And so you can see that first
at check this if condition.
159:53 - It checked if human is equal to rock.
159:55 - Well, human was equal to rock.
159:58 - The only way this statement will run
160:00 - if both of the statements are true.
160:02 - That's what the and forces you to do.
160:05 - If we had an or here,
160:06 - what it would do is it says
160:08 - if human is rock and
computer is, scissors.
160:11 - Okay, so in our case, it would
go is human equal to rock?
160:15 - It would say true.
160:16 - And it would go or
computer equal scissors.
160:19 - It would evaluate that
to false because bananas,
160:23 - bananas right there
does not equal scissors.
160:27 - So would go true or false.
160:29 - It would evaluate that as true
160:31 - because true or false is true.
160:33 - And it would go okay, human
score is equal to one.
160:37 - Okay, but we don't want that,
160:40 - we want both of the things to be true.
160:42 - If human picks rock and
the computer picks scissors
160:44 - at the same time, that's
when the human wins.
160:48 - But in this case, computer picked bananas.
160:50 - And we said if you pick bananas,
160:53 - if that happened where human picked rock
160:55 - and computer pick bananas,
160:57 - we can say that you can't pick that,
161:01 - you gotta try again.
161:03 - Now why our or statement
is useful is imagine if,
161:07 - I mean, do you care who picks bananas?
161:09 - Do you care if computer picks bananas
161:11 - or human picks bananas?
161:14 - Should you stop the game
161:15 - if either of those people pick bananas?
161:18 - Yeah, you should, right.
161:19 - You should stop the game and started again
161:22 - 'cause bananas should not
be one of the options.
161:24 - So you don't care who picked something,
161:27 - that's the wrong one.
161:29 - You just care the wrong one is picked.
161:32 - That's why you would use a or.
161:34 - You would say if human
equal equal bananas,
161:40 - or computer equal equal bananas.
161:46 - Then friend blah, blah,
blah, blah, blah, right?
161:48 - In this case, it won't make sense.
161:50 - But then whatever, right.
161:52 - We print out the this line of code.
161:55 - Else if notice the else if,
161:57 - it's used to connect these.
161:59 - If you wanted to actually write it as,
162:05 - I can show you that later.
162:06 - But if you essentially wanna write it,
162:09 - what you have to do and you're writing it
162:11 - or these three dots aren't there, right.
162:14 - You have three dots that
are showing up here.
162:16 - So let me bring down this if then,
162:18 - whatever statement down for you.
162:21 - So if you ever have that case,
162:22 - where these three dots are,
162:24 - these three greater than signs are there,
162:28 - then you have to put the else if,
162:31 - not at the same
indentation level as an if.
162:34 - But if you're doing it
162:35 - and you're writing this code as a script,
162:38 - then that's how it would be.
162:41 - The if and else if are at
the same indentation level.
162:44 - Okay, they're not at a
different indentation level.
162:46 - That's very important.
162:47 - Otherwise, the code is not going to run.
162:49 - Okay and else if helps you join an if
162:52 - with an else if statement.
162:54 - Another one that you might need is else,
162:56 - and else does not care
for a condition, okay?
162:59 - You see your if statement
cares for a condition,
163:02 - and then it runs the code.
163:03 - Your else if statement
cares for a condition.
163:07 - And if that condition is
satisfied, it runs the code.
163:09 - Else does not take in condition.
163:12 - If none of these guys match,
then else runs by default.
163:17 - Okay, so if condition.
163:24 - All right, if this
condition evaluates to true,
163:31 - then this block
163:35 - of code runs.
163:39 - Okay, good.
163:42 - Again or we don't care who did the thing.
163:45 - We don't care who committed the crime.
163:48 - If any one of them did, we just break it.
163:51 - Realistically, when you have this case
163:53 - where human is bananas or,
163:55 - I mean, you're not gonna put
every single option ever,
163:58 - that could be wrong, right?
164:01 - So you can't check for
bananas or spaghetti or pizza.
164:05 - Well, you can check for
is human did not pick.
164:10 - If one of them did not pick,
164:11 - let's say rock papers or scissors,
164:15 - then it should be wrong, right?
164:18 - So let's see if we can write that.
164:19 - If computer does not equal,
164:24 - right, we can say a rock or computer
164:28 - does not equal scissors.
164:32 - Or computer does not equal paper.
164:37 - Then print wrong choice.
164:42 - Pick again, okay.
164:46 - So now let's try it.
164:47 - Now let's say computer is equal to rock.
164:51 - And let's run that piece of code.
164:53 - And it says wrong choice, pick again.
164:58 - Okay, so you can see how
using the or statement here
165:02 - ended up giving me the wrong result.
165:04 - What I wanna ake sure is that the computer
165:08 - is equal to any one of these right?
165:11 - So let's try it like this.
165:12 - Let's say computer does not equal rock.
165:17 - And computer does not equal scissors.
165:22 - Right and computer does not equal paper.
165:31 - Right, let me let me just
go a little bit here.
165:35 - Make it bigger,
165:37 - then print wrong choice,
165:40 - pick again, okay.
165:44 - So the only way this code will run
165:45 - is if all of these things are true.
165:50 - Meaning computer is not rock,
165:51 - computer is not scissors and
computer is not paper, right.
165:54 - So if I made computer is equal to banana,
165:58 - and I went up here and I ran this code,
166:02 - you can see that it checked,
hey is computer rock,
166:05 - is computer scissors, is computer paper?
166:07 - If it's not any of these
then print wrong choice.
166:10 - Okay, so you can see how
powerful these combinators are,
166:15 - is that what I would call them.
166:17 - Like your logical operator,
Boolean operators, right.
166:20 - Like and, and or you
really, really need them
166:24 - to be able to do this stuff.
166:26 - Okay, to be able to do
really powerful things.
166:30 - Okay, I'm gonna cut this video off here.
166:32 - Hopefully you have a
much better understanding
166:34 - of how this stuff works.
166:36 - Okay in the next video,
we will cover for loops.
166:40 - And I will see you there.
166:43 - (upbeat music)
166:47 - Hey guys, what's up?
166:48 - In this video, I wanna
talk about for loops
166:51 - and how they work, okay.
166:53 - So we're gonna get into loops.
166:55 - You saw that we did a
little bit a lot earlier
166:59 - in when we were using the turtle module.
167:01 - So hopefully they're a little
intuitive to you by now.
167:04 - But now let's use them for more,
167:06 - I guess realistic purposes, right?
167:10 - Things to do with numbers
and manipulation of data.
167:14 - So not only can you use
it for visual graphics,
167:18 - but you can use it for anything now.
167:20 - That's what I'm going to teach you.
167:21 - So if you're making your own game,
167:22 - you'll be able to use it
after learning these things.
167:25 - Or if you are creating your own script,
167:28 - maybe you're at a job,
whatever is the case.
167:32 - You're going to become
more familiar with loops,
167:35 - and it's going to help you
do a lot of powerful things.
167:39 - Okay, so let's get started how loops work.
167:42 - Essentially, it's a way of
doing something multiple times.
167:46 - Whenever you think,
167:48 - I need this done a lot
of times, what can I do?
167:52 - For example, if somebody
told you print out numbers
167:55 - from one to two.
167:57 - You'll be like okay,
I'll just write print one
167:59 - and print two, good.
168:02 - But now what if that same person told you
168:04 - print numbers from one through 10.
168:06 - You'll say okay, I'll
just write print one,
168:08 - print two, print three,
print for print five,
168:10 - all up to print 10.
168:13 - Whooh, a lot of typing,
but hey it wasn't so bad.
168:17 - Now let's say I tell
you to print up to 1000.
168:24 - Could you type that?
168:25 - Of course you can.
168:27 - Would it take you maybe
two hours, three hours.
168:29 - Maybe you'll copy paste, you'll do tricks,
168:32 - though it will be harder.
168:34 - Now if I tell you to type in a million
168:35 - is gonna get much much, much harder.
168:37 - Okay so for loop helps us overcome
168:39 - the burden of doing repetitive tasks.
168:43 - So let's try something.
168:45 - Okay let's say I wanna
do something five times.
168:48 - That's how I would say, okay.
168:49 - I want you to look at it
less from Python syntax
168:52 - specific perspective of I
wanna zoom in microscopically.
168:56 - And what what is i, it's hurting my eyes.
168:58 - And what is range, and what does it do?
169:00 - And I'm getting a headache over here.
169:02 - And where do I put a colon or,
169:04 - I want you to read this as
do something five times.
169:08 - Okay, that's how I want you to read it.
169:11 - Do something five times.
169:13 - That's what this is saying.
169:14 - And here, I'm gonna say print hello.
169:18 - So if I told you, do
print hello five times,
169:21 - that's how you would think of it.
169:24 - You would go okay, print hello five times.
169:26 - You'd say do something five times.
169:28 - And that's something is print hello.
169:31 - Okay, I want you to get an
intuitive sense of this.
169:34 - So then you can reproduce these
169:36 - and do them on your own
away from the screen okay.
169:40 - So for example, now let's run this code.
169:43 - And let's see what it does.
169:44 - And you can see it printed
out hello multiple times.
169:47 - Now you might be asking what is I?
169:49 - If you don't already know.
169:50 - You can call it whatever you want.
169:52 - You can call it banana,
code will still run.
169:55 - What we need to do is break this one,
169:57 - break this down one line at a time
170:00 - if we need to look at
it more introspectively
170:02 - and see what's going on.
170:04 - So what is range of five?
170:06 - Well, let's check it out.
170:07 - Let's see what range of five is.
170:09 - So I'm gonna print this out.
170:11 - Range of five is really a list of numbers
170:14 - from zero through four.
170:16 - Okay, so to you use loops, you
need to know what a list is.
170:20 - Since we've covered what a list is.
170:23 - That's there you go.
170:25 - So range of five really evaluates to this.
170:28 - Okay, when you write,
170:30 - the reason why I should write list here
170:32 - is because Python hides it.
170:33 - It secretly writes it and
you can't tell what it is.
170:38 - Especially since you're starting out,
170:39 - this is gonna confuse you
when it says that, okay.
170:42 - When you get more advanced,
170:43 - you'll know why it says this.
170:44 - But for now, I'm gonna not hide it,
170:47 - unhide it and take out the actual form
170:50 - of what it looks like.
170:51 - And I know that if I
call list it'll show you
170:53 - like the actual type of what
it's doing under the hood.
170:57 - So essentially, whenever
you see a range of five,
171:01 - you should think, oh that's just this.
171:04 - It's a list containing five
elements starting from zero
171:07 - all the way up to four.
171:09 - Okay, so now we can try it,
171:11 - we can start to break
all of this stuff down.
171:14 - We can go, okay, if range
of five is really this,
171:19 - so range of five is actually that,
171:21 - zero, one, two, three, four.
171:23 - The first time, right.
171:25 - Let me write this code here.
171:27 - Let me let me change this hello.
171:29 - And let me change it with an i.
171:30 - Okay, and let's do that.
171:32 - You see zero, one, two, three, four,
171:35 - what happened there?
171:37 - So let's see, the first time
we ran the code i is zero.
171:41 - So it prints out zero.
171:42 - The second time we ran the code,
171:43 - i went and became the
second element of the list.
171:46 - So i became one.
171:47 - Then where i was here, it became one
171:50 - it printed out the one.
171:51 - Then i became two it put two here.
171:53 - Printed out two, then became three.
171:55 - Three, four and printed out four
171:58 - and there you go, you see all of that
172:00 - on the right hand side.
172:01 - Zero got printed, then one got printed,
172:03 - and two, that's why it's
all separated by a line.
172:06 - Okay so that's really
what that i there, does.
172:11 - Could we call this number?
172:14 - Yes, we can and that's actually
a better variable name.
172:17 - So my suggestion to you,
172:18 - especially if you're starting
out with programming,
172:21 - never ever use one letter variables?
172:25 - Never, okay.
172:27 - So even if you think you can use an i here
172:30 - or an x or y, don't do it.
172:33 - Take your time and pick up,
172:35 - pick better variable names.
172:37 - So I'm gonna change this with number,
172:39 - because number is that variable.
172:42 - This variable we create it on the fly.
172:45 - And I'm gonna say it
from zero through four.
172:48 - Now, let me tell you something
172:49 - about the range function in Python.
172:50 - The range function takes start and stop.
172:55 - Okay, but it's kind of like this.
172:57 - If you have to think
about it mathematically.
173:00 - It includes this point,
which is why I put this here.
173:03 - And it goes up to but
does not include the stop.
173:07 - Okay, so the range function
173:09 - takes into arguments start and stop.
173:11 - So if I gave it one, or
let's say I gave it zero,
173:15 - and let's say I gave it 10.
173:17 - You get back let's just
do two, because I'm lazy.
173:20 - But you get back zero, one and two.
173:23 - Well what if I wanted to
print two from 20 to 40?
173:28 - Right, what if I wanted do that?
173:30 - Well, I can certainly
write a list from 20 to 40.
173:33 - Right, I can go at 20, 21, 22, 23, 24,
173:38 - all the way up to 40.
173:40 - But that would take a long time.
173:41 - Let's use range to
generate that on the fly.
173:43 - Let's start with 20 and go up to 41.
173:46 - But not including 41, it excludes the 41.
173:50 - So this actually translates
to a list starting
173:53 - from 20 going up to 40.
173:55 - And if we print it out you can see
173:57 - it goes from 20 all the way up to 40.
174:01 - So loops are great.
174:03 - Now, in the next video, I
wanna talk about while loops.
174:08 - But before I get to that I
wanna tell you something.
174:10 - So up until now we have done
a lot of Python syntax stuff.
174:14 - Learned the basics of
Python and how it works.
174:19 - Programming specific syntax,
174:21 - where do you put the colon,
where to do you do this?
174:24 - Now after this point, specially
after the while loops,
174:27 - we're gonna get into exercises.
174:29 - And we're gonna kind of
drill and kill exercises.
174:32 - I'm gonna make this the best Python course
174:35 - there is for learning Python hands down.
174:38 - What's lacking from a lot
174:40 - of the online video courses are exercises.
174:42 - And I'm gonna give you
guys so many exercises
174:45 - is gonna hurt your
brain but in a good way.
174:47 - Whereas it makes you
smarter and you get better.
174:50 - Because without doing exercises,
174:52 - you will not get better.
174:53 - You can look at me
write code all day long,
174:57 - you're not gonna get
better because of that.
174:58 - You need to do it on your own
no matter how simple it is.
175:02 - And while Code Academy and
all those things are great,
175:05 - they hand hold you quite a bit.
175:08 - Which means that you're
not really learning
175:11 - a lot of those things.
175:12 - Okay, so we're gonna take a break
175:15 - from a lot of these
tutorials and do exercises,
175:19 - really get these ideas down.
175:21 - Okay, what do I mean by an exercise?
175:23 - Let's do an exercise right here right now.
175:26 - Okay, live
175:28 - I'm gonna leave this here for you guys,
175:29 - because I want to leave this link
175:32 - into the YouTube description.
175:33 - So you can actually go
look at these notes, okay.
175:36 - So I'm gonna save this and
I'm gonna leave this as notes.
175:40 - Print numbers from 20 through 40.
175:45 - Including 40, ha ha, right.
175:49 - Or rather, I can say through to 41.
175:54 - And I can say excluding 41.
175:57 - That's probably a better
way for me to write it,
175:59 - 'cause that's how Python thinks of it.
176:01 - Okay, now let's do an exercise.
176:03 - Let's say that we take
numbers from a list,
176:06 - sum them up and return them.
176:09 - What do I mean?
176:10 - If I give you a list
containing one, two, three,
176:13 - you should give me back six.
176:14 - Because one plus two plus three is six.
176:17 - So if I gave you this list,
176:21 - you should give me back a six.
176:24 - But now let's also start adding together
176:26 - everything we've learned so far.
176:29 - Let's create a function.
176:31 - Okay, that takes in
something and then does it.
176:33 - So we're gonna build up to that.
176:34 - Okay, so first, let's just write something
176:37 - using a for loop that sums up
all the numbers in the list,
176:40 - and then returns them back to us.
176:42 - Okay, or print them out back to us.
176:45 - So let's do this, let's
say count is equal to zero.
176:49 - So we're gonna use some variable
176:52 - to keep track of every number.
176:54 - So essentially then we can say that if,
176:57 - when we go through the loop,
176:58 - we can say okay, I want
you to add one to count.
177:03 - Then when I wanna go
through the loop again,
177:05 - I wanna say add two to count.
177:08 - Then when I go through the loop again,
177:09 - I wanna say add three to count.
177:12 - Okay, and so in the start,
177:14 - you'll have count being one.
177:16 - Then you'll have it being
one plus two, so three.
177:19 - And then you'll have it
being two plus three, so six.
177:22 - So you should get back six.
177:26 - So let's try it.
177:28 - So I will say for number in range.
177:31 - Let's say range, what will I say to range
177:34 - to create a list from zero to three
177:36 - or one, two, three basically.
177:38 - I would say one to four.
177:40 - Okay, this creates a list
of one, two and three.
177:45 - Okay, so I'm gonna say
range one through four.
177:50 - Okay now let's do how
can we increment count?
177:56 - Okay, I know that number is gonna be one
177:59 - the first time then two, then three,
178:01 - that's not a problem.
178:02 - So number is good, what
we're getting with number,
178:04 - but how can I increment it
to count every single time?
178:07 - Here's what I will do, I'll say count
178:09 - is equal to count plus number.
178:11 - Okay, what does this mean?
178:14 - Here's what this means.
178:16 - This says, I want the new count to be.
178:20 - So the new count to be here,
178:22 - new count is equal to old
count plus number, okay?
178:28 - But so this is saying
my new variable count
178:32 - is going to be what my
old variable count was.
178:36 - Plus number, okay.
178:38 - So the first time it
goes through the loop,
178:40 - the number is going to be one.
178:42 - Old count is going to be zero, okay.
178:45 - And so it's gonna say
now count is one, okay.
178:49 - Then when we go through the loop
178:51 - the second time number is going to be two.
178:53 - Oh by the way, this count
is gonna turn to one, right.
178:56 - 'Cause we should redefined what count is.
178:59 - Then what's gonna happen is that
179:03 - number is going to be two.
179:05 - So essentially, you're gonna
get back count plus number,
179:08 - which is gonna evaluate
two count plus two.
179:11 - And number is two and count was one.
179:14 - So this is gonna evaluate three,
179:16 - store count as three, then
you're gonna get back count
179:19 - plus number here again, right.
179:21 - And then you're gonna get,
179:23 - so the number is now, this
time going to be three.
179:26 - And so you get back count,
which is three plus three.
179:31 - This evaluates to a six and our loop ends.
179:34 - Okay, so let's just undo
the damage that we've done.
179:40 - And let's check it out, let's print count.
179:43 - So we run through this entire loop, right.
179:46 - And once we're done running
through this entire loop,
179:48 - we print out count.
179:50 - It should be in our, in this case six.
179:55 - So let's check it.
179:57 - Okay, and you can see that count
179:59 - does indeed give us back a six.
180:02 - Well, that's great that
we wrote a for loop
180:04 - that runs for the numbers
one, two, and three.
180:07 - What if we wanna write this for loop
180:09 - and we want it to run, right,
180:12 - we want it to run and sum up lists
180:15 - for any list given to it, any size list.
180:18 - It could be a size one
list size, 30 list size.
180:22 - A bajillion list, whatever.
180:25 - Okay, so let's see how we do it.
180:26 - Okay, because practice is key, right?
180:30 - How do you go from conscious competence
180:32 - to in conscious competence.
180:35 - That's how Jordan Belfort says it right?
180:37 - The guy in "Wolf of Wall Street",
180:40 - the movie who "Wolf of Wall Street" was,
180:43 - the person who "Wolf of
Wall Street" was based on.
180:46 - He defines two concepts,
conscious competence
180:49 - and in conscious competence.
180:50 - What is conscious competence?
180:51 - That's you thinking about something
180:55 - and then being good at it?
180:56 - What's in conscious competence?
180:58 - You get so damn good at what you do
181:00 - that you don't even have to
think about it when you do it.
181:03 - Okay, so how do we go
from conscious competence?
181:06 - You're looking at your notes,
181:07 - really thinking about it and
how does a function work?
181:10 - To like you just writing
code is practice, okay.
181:14 - There's no substitution for that.
181:18 - The only thing that you
can do is hard work.
181:21 - Okay, there's no getting around it.
181:22 - There's no, you can't watch
somebody else's videos
181:26 - or my videos and just sit there
181:28 - and try to synthesize information be like,
181:29 - why am I not getting it.
181:31 - Can't just take notes all
day from your professor,
181:33 - you have to try to do
this stuff on your own.
181:37 - End of rant.
181:39 - Let's continue, so let's
write this function
181:41 - that can take in any
size list and sum it up.
181:45 - Okay, so I'm gonna say define function.
181:48 - Okay so let's just write
a little note at the top.
181:51 - So we know what we're doing, right.
181:53 - A function that sums all elements
181:59 - of a list and returns them.
182:01 - Okay, that's what this is doing.
182:05 - That's what return has done.
182:07 - Let's just put a little
thing here like this.
182:13 - All right, so let's write this function.
182:15 - I'm gonna say define,
that's the first step
182:17 - to defining a function.
182:18 - And I'm gonna say sum list.
182:20 - Okay so the function is called sum list.
182:22 - It takes in one argument,
182:24 - let's make that argument
be, whatever my list.
182:28 - Okay, that's, you can
call it whatever you want.
182:30 - You can call it A, B, C, X, Z.
182:32 - But remember my rule, try not to think
182:35 - the name of things as one letter variable,
182:38 - try to make it more descriptive.
182:40 - So I'm assuming I'm gonna get my list
182:42 - or a list as inputs, so
I'm gonna call it my list.
182:47 - So I'm gonna hit enter now.
182:49 - What's the next part?
182:50 - Okay, let's think about it.
182:52 - So the next part put here is
182:57 - I want to have a counter variable, right?
183:00 - That's what we had when we
were writing this for loop.
183:03 - And I wanna say for number in,
183:07 - well, what's the list we're working with?
183:09 - Here, the list we were working with
183:11 - was one through four, right.
183:12 - Kind of like this list.
183:14 - So imagine if we had that list as my list.
183:17 - Well we know what's called my list,
183:19 - whatever list we get is called my list.
183:22 - And so just so you guys know
what we're kind of doing
183:27 - is eventually what we wanna be able to do
183:28 - is say some list and parse
it the list one, two, three.
183:34 - And this should give us back a six.
183:37 - Okay, so we wanna say
assert that some list is,
183:44 - this is equal to six.
183:46 - Okay, so this is a nice
little test for you guys,
183:49 - which asserts things.
183:50 - For example if I write an assertion,
183:51 - that's false, it's gonna
give me back false.
183:54 - So if I said five is equal to six,
183:56 - my code is gonna yell at me.
183:57 - Hold on, I am obviously
having an error here,
184:00 - 'cause I'm writing funky business.
184:03 - But as you can see, I
get an assertion error.
184:05 - It goes, hey, five is not equal to six.
184:08 - But if I go six is equal to six.
184:10 - You can see that assertion gives me
184:12 - nice little three here, right?
184:14 - Which is,
184:18 - sorry, does give me three there?
184:20 - No, I'm sorry, yeah, what?
184:22 - So assertion basically just
doesn't give you an error.
184:25 - Okay, when assertion works,
184:26 - it just doesn't give you an error.
184:28 - Okay, so assertion doesn't
give me back anything.
184:33 - It just gives me back
no error when it works,
184:35 - and it gives me a big red angry,
184:37 - scary looking error
when it when it's wrong.
184:41 - So I wanna have this assertion here.
184:44 - And why this assertion
will be helpful to me,
184:46 - this is gonna test my code, okay.
184:49 - Let's have another assertion.
184:54 - And et's say four, and this
should give me back 10.
184:58 - So I'm also teaching you
guys how to test your code.
185:00 - So once I write this function,
185:02 - you should be able to call the
function by saying sum list,
185:05 - parseing it any list.
185:09 - In this case, this list one, two, three.
185:11 - And it should give you back a six,
185:12 - and it should give you back a 10.
185:13 - When you run this code, if
it doesn't give you an error,
185:16 - that means it parseed
all of these test cases.
185:18 - If it fails, it means it
failed one of these test cases,
185:22 - and your code is wrong.
185:23 - All right, let's keep going.
185:25 - So I wanna say for a
number in my list, right?
185:28 - That's the list I get.
185:30 - So remember, this list is gonna be,
185:33 - if we parse this test case, right?
185:35 - If we give it this test case,
185:36 - and list is gonna be one,
two, three really, right?
185:40 - So let's just say my list.
185:42 - And what I wanna do is
what do I wanna do now,
185:44 - I wanna go count is equal
to count plus one, okay.
185:49 - So even though we're doing
this exercise right now,
185:51 - I'm gonna have you guys do it again
185:52 - in the exercises portion,
you can do it from scratch.
185:55 - For now, just watch along
and get the concepts
185:57 - and how it works.
185:59 - Okay, so I increment count by,
186:02 - what should I increment count by?
186:04 - I don't wanna increment it
by one, that would be wrong.
186:07 - I want to increment it by
the actual number, right?
186:12 - So I wanna say number here.
186:14 - Oh I'm sorry, I wrote
this wrong, I'm silly.
186:16 - I meant to increment
it by number up there.
186:19 - Hopefully, that didn't
throw you off too much.
186:22 - Okay, so but for you guys,
186:25 - when you guys look at the
notes is gonna be fixed.
186:27 - Okay, I changed it to
number, sorry about that.
186:29 - All right, so whatever count was
186:33 - plus the number from list.
186:36 - Okay, great and now at the end,
we have to say return count.
186:43 - Okay, just format it a little bit nicer.
186:47 - Let's remove some of these extra spaces.
186:50 - And let's save it again.
186:51 - And now I'm going to run it.
186:54 - And then I don't get
back in assertion error,
186:55 - which I didn't, that
means that runs perfectly.
186:59 - Imagine if, okay, so if I
said one plus two plus three
187:01 - should not give you a six.
187:02 - Let's say I said, should give me a seven,
187:06 - you'll see that it gives
me an assertion error.
187:07 - It says hey, calling sum
list on one, two, three
187:10 - does not give me a seven.
187:13 - So it should give you back a six.
187:14 - Okay, that's good.
187:16 - And just for sanity check, let's
run it and print something.
187:20 - Let's say one, two, what
should that give us,
187:22 - that should give us a four, right.
187:24 - Or sorry, three, one plus two.
187:27 - (gentle music)
187:30 - Hey, guys, how's it going?
187:32 - In last video, we talked about for loops.
187:34 - In this video I wanna cover while loops.
187:36 - While loops are not used a ton in,
187:42 - especially in Python.
187:44 - But they're very important
and let's talk about them.
187:46 - Because once you start to understand
187:48 - the concept of while loop,
187:50 - then it's, for loop essentially,
187:53 - let you write in a shortcut.
187:56 - But one thing that's
nice about while loops,
187:59 - just to give you guys a little intuition
188:00 - of when to use while loops and for loops.
188:03 - Generally you wanna use while loops
188:04 - for things that you don't know about,
188:06 - when they're going to end,
how long they can run for.
188:09 - And you wanna use for loops
188:10 - for things that you know
how long it's gonna take.
188:12 - For example, if you
want me to do push ups,
188:14 - and you don't know how
long I'm gonna get tired,
188:16 - you want to say something like,
188:18 - while not tired, keep
doing push ups, okay.
188:21 - And then that way, while
loop just keeps running
188:23 - till the person is tired.
188:25 - And then once the person
is tired it stops.
188:28 - For loops you need to specify a range.
188:31 - So you would say do 20 push
ups and then you can stop.
188:35 - So you would use a for
loop for that, okay?
188:37 - While loops, you don't know something.
188:39 - For loops are better if
you know something, okay.
188:42 - But I'm gonna right now
show you a while loop
188:44 - that mimics a for loop, okay.
188:47 - So I want something to happen 100 times
188:50 - and then I want it to stop or something.
188:52 - Okay, so let's just start with
simple example that counts.
188:55 - So let's say I want to do.
188:58 - Okay so let's start off with this.
189:00 - I wanna say my account is zero,
189:02 - I start off with
something that is at zero.
189:04 - And then it keeps printing
something up by one.
189:07 - So I'll say, how long
do I want to run for?
189:12 - Okay, let me add at the top here
189:14 - in the while loop notes for you guys.
189:17 - Again, I'm using Repl.it.
189:20 - So then when I'm done making these videos,
189:23 - I can actually post a link so you guys
189:25 - can actually go through
the notes yourself.
189:26 - So I'll put all these notes,
189:28 - I'll aggregate these notes
and put it in the links below.
189:32 - And then you guys can just use them, okay.
189:34 - So while and then some condition.
189:41 - And then if that condition is true,
189:46 - true then body.
189:51 - Right or then this.
189:53 - And then it keeps looping.
189:56 - Okay, it keeps looping back and forth.
189:59 - But once it's out of it
190:00 - when the condition is false, then it ends.
190:02 - So it's like an if statement,
190:03 - but it keeps happening
over and over again.
190:05 - So if you want if statement
to keep asking some question,
190:08 - that's how you should think of a loop.
190:10 - Alright so I'm wanna say,
190:12 - and remember just so you know,
190:14 - condition example would be like,
190:21 - five is less than six.
190:23 - This evaluates to true or false.
190:28 - Okay, so this evaluates to true.
190:31 - Right, five is less than six.
190:37 - Another example would be
six is greater than five.
190:41 - Or let's make it so it's like
this, this evaluates to false.
190:45 - So conditions are everything
190:47 - that at the end of the day
evaluates to true or false.
190:50 - So if you took this condition
and put it in here, right?
190:56 - this for loop, this while
loop will like run forever,
190:58 - because it will always
say five is less than six.
191:02 - All right, now let's keep going.
191:04 - While count is less than, how
many times do we want to run?
191:10 - Let's say you want to run 100 times.
191:14 - Then I want to print what the count is.
191:18 - And what else do I want to do?
191:20 - If this statement says
zero is less than 100,
191:24 - it'll come down here
and it will print out.
191:26 - Right, so for example in the
start, I made count to be zero.
191:30 - So if I do this and put zero for count,
191:32 - and zero for count here,
191:33 - it's gonna print that out to the screen.
191:37 - And then what's gonna happen?
191:38 - Once it's done printing
it out to the screen,
191:42 - we're gonna go back to this loop.
191:45 - And it's gonna ask,
191:47 - is gonna put condition here again, right?
191:50 - Yeah sorry, I was gonna put count here.
191:53 - And we're gonna have count here.
191:54 - Is gonna check this statement again,
191:56 - and again we're gonna have zero for count.
191:59 - Is gonna ask the question
is zero less than 100?
192:02 - Is gonna evaluate to true,
192:04 - then is gonna execute
this part of the code,
192:06 - which says print zero,
192:08 - 'cause count is zero and it's
gonna print out zero again.
192:11 - Then it's gonna go back to the condition,
192:14 - is gonna check if count is less than 100.
192:18 - Since count is zero again,
192:20 - it's going to go back here.
192:21 - It's going to say print zero, okay.
192:24 - Now I'm gonna run it
and watch what happens.
192:28 - I'm gonna stop it.
192:29 - And I think I might have
crashed my computer.
192:34 - Hey there so my computer just
kind of crashed pretty bad.
192:39 - But hopefully that gives you a
little sense of what happens.
192:42 - I should have found this in my terminal.
192:44 - But yeah, it took it like
10 minutes to come back.
192:47 - And I had to rewrite the
notes and everything.
192:49 - So let's go back.
192:51 - So this is a problem called infinite loops
192:54 - where you write something
192:56 - where it doesn't match the condition.
192:58 - Like this thing if it
doesn't ever turn false,
193:01 - your loop is wrong.
193:03 - Okay, if that thing doesn't
turn false, your loop is wrong.
193:09 - All right, because that
means that your loop
193:11 - is going to run forever,
193:13 - unless you put in this thing called break.
193:15 - But I don't want you to do that.
193:17 - Generally that implies poor logic.
193:21 - So let's just keep going
through this all right.
193:26 - So we want this to turn
false at some point.
193:29 - And we don't wanna keep printing
on zero every time, right.
193:32 - So what should we do?
193:33 - If we leave this at zero, it's this right?
193:36 - If I leave this at zero,
193:37 - this whole thing is
gonna evaluate to false.
193:40 - If this is I'm sorry, I'm sorry.
193:44 - This is gonna evaluate to true every time.
193:47 - Okay, is gonna evaluate
to true every single time.
193:51 - Because zero is less than 100.
193:53 - Now it's gonna keep saying true,
193:56 - and the loop is gonna keep running.
193:58 - If I change this to five,
194:00 - this thing is gonna
evaluate still to true.
194:03 - If I change this to 90, this whole thing
194:06 - is still gonna evaluate to true.
194:10 - What happens if I change it to 99?
194:13 - Still evaluates to true.
194:14 - Now what happens if I change to 100?
194:18 - This part of the code
evaluates to a false.
194:21 - And we are done with the body of,
194:25 - we're done with the loop
194:26 - and therefore we don't execute
194:28 - the body of the while loop, okay.
194:31 - If I needed to add
something else in my notes
194:33 - for the while loops, is this.
194:35 - Go back to while loop, right?
194:38 - I would, if this condition is true,
194:41 - then do this and then go
back to top of while loop.
194:46 - Okay, so we want this thing to turn false.
194:50 - At some point, here's how
we're gonna do it, okay.
194:56 - I'm going to say count is
equal to count plus one.
195:00 - So I'm just gonna add one
to count every single time.
195:03 - How you read this is that what count,
195:06 - new count is what count
previously was plus one.
195:11 - So the first time you go through the loop,
195:13 - count zero, it prints
out zero at the screen.
195:17 - Then it prints out,
195:20 - then what it does is it says
195:22 - count is equal to count plus one.
195:23 - So it says count is zero plus one.
195:27 - So the new count is now one, okay.
195:30 - Then it goes here and it goes,
195:32 - okay is one less than 100?
195:34 - Yes, it is, so it prints out one.
195:36 - Then it goes here and this really says
195:38 - count is equal to count plus one.
195:40 - So it says one plus one is two,
195:44 - then it makes this guy two, right.
195:46 - Then it goes while two is
less than 100, print out two.
195:51 - And what it says here is count
plus one, count is now two.
195:56 - So two plus one, you get three.
195:59 - And while count is less than 100.
196:03 - Count, plus one.
196:06 - Then count turns to three,
196:08 - and this part turns to
three prints out three.
196:11 - This part turns three, you get four.
196:14 - And then ultimately when
it gets to 100, it stops.
196:18 - So let's just print this out.
196:21 - And let's run it.
196:27 - And you can see it went from zero
196:29 - all the way to 99 and then it stopped.
196:32 - Now what if we wanted
to do something fancier?
196:35 - Right, what if we wanted to do something
196:37 - where it goes from 100 up to one,
196:39 - and then instead of printing out zero,
196:41 - it prints blast off.
196:43 - So I want you to try that challenge.
196:46 - And I'm gonna go ahead
and do that right now.
196:49 - So you can pause the video,
196:51 - try it yourself and then watch this part.
196:54 - I'm gonna do this stuff in my terminal
196:59 - because I don't want stuff to freeze
197:01 - because it's really annoying.
197:02 - And then I have to redo
the whole thing again,
197:05 - when it freezes on Rebl.it.
197:08 - But I will put all of
these notes for you guys
197:11 - at the end of the day.
197:12 - So if I do a while loop, right.
197:15 - So let's try it from you go from 100
197:18 - all the way to one, and then it stops.
197:20 - First thing I wanna do is since
I wanna print out from 100,
197:24 - I don't want count to start off from zero.
197:26 - I want the count the start off from 100.
197:29 - Another thing I have to keep in mind
197:31 - and instead of increment
I have to decrement.
197:33 - So I have to account for
my comparison operator
197:36 - flipping as well.
197:37 - So I'm gonna do while count
is greater than zero, right?
197:44 - Then do something.
197:45 - So I'll say while count is
greater than zero, print count.
197:50 - And I wanna do count, is
equal to count minus one.
197:53 - Now let's give it a try.
197:55 - And you can see that it prints
197:56 - all the way up to one and then it stops.
197:59 - So that's good.
198:00 - Okay now I wanna write a
statement where once it's zero,
198:04 - it prints off blast off.
198:06 - So let's write those lines of code again.
198:09 - So I'm going I said this,
I wanna say this guy,
198:12 - I wanna say do this and then decrement.
198:18 - But I want to do something
special this time.
198:20 - I wanna say if count,
198:25 - whoops, let's just type it up again.
198:29 - Well count is greater than zero
198:31 - if count equals equals
zero, I want you to print,
198:37 - see if you can catch there and this logic.
198:39 - But print blast off.
198:46 - Otherwise, I want you to do what?
198:55 - I want you to print count, right.
198:59 - And I want you to decrement
regardless of anything.
199:03 - So I want you to do count minus one.
199:05 - So this part is not in the if else block
199:08 - because I want this part to
happen no matter what we do.
199:11 - Okay, so I could either
put it in my if block
199:14 - and in my else block, or I can just choose
199:17 - to put it outside and that's
what I've chosen to do.
199:19 - And you can see it grows from
100 to one and then it prints.
199:26 - Why doesn't it print blast off?
199:29 - That's weird, right?
199:33 - What's the logic there that
it's not printing blast off?
199:37 - Well, let's think about it.
199:39 - We have this situation here, right.
199:41 - We have this greater than sign here.
199:46 - So the only way the body
of the while loop runs
199:50 - is if this condition evaluates to true.
199:52 - Well, what does this condition
evaluate to in this case?
199:56 - It evaluates when count is zero,
199:59 - this whole part evaluates to false.
200:02 - Right when count is zero,
that part evaluates to false.
200:05 - If that part of value
is to false the while,
200:08 - the body of the while loop does not run.
200:10 - So when our count becomes zero
200:13 - after it gets decremented on this line,
200:16 - then count zero greater
than zero returns false.
200:20 - Which means that this if
condition doesn't run,
200:23 - therefore, the blast off never runs.
200:26 - So we wanna make sure
that when count is zero,
200:28 - the body of the loop should run.
200:30 - This part should run it
should print blast off.
200:34 - And after that it should not run again.
200:37 - So here's one addition
200:39 - that we need to make to our code, okay.
200:42 - So let's go back and type of count this.
200:47 - Right, the only addition that we need to,
200:49 - the only thing that we
need to add to our code
200:51 - is make count is greater
than equal to 100, okay.
200:57 - And then everything else,
we can keep it the same.
200:59 - If count is zero, then I
want you to print blast off.
201:04 - Else, I want you to
print out what count is
201:08 - and then I want you to decrement
count regardless, right.
201:13 - I want you to decrement count
regardless of the situation.
201:16 - Let's run this.
201:17 - And you can see that it goes.
201:20 - Let me make it bigger
something for you guys.
201:23 - And you can see it goes
from 100 all the way
201:25 - or sorry, 100, all the way down to one
201:29 - and then ultimately it says blast off.
201:31 - Okay, so hopefully this gives you
201:33 - a little bit of a better
idea of how while loops run.
201:36 - The codes will be down below.
201:38 - Thank you guys for watching.
I'll see you in the next video.
201:42 - (upbeat music)
201:46 - Hey guys, now we're gonna start
201:47 - the really interesting stuff.
201:49 - We're gonna start doing some problems
201:51 - and you so you guys can
actually do it, okay.
201:54 - This is the part where you get
involved into this process.
201:57 - So if you were parseively
learning up until now,
202:01 - stop now and start actively
being part of this okay,
202:05 - because that's how you will truly learn.
202:07 - So let's start off by,
202:10 - I'm gonna give you guys problems to do.
202:11 - But first I wanna show
you how it's structured.
202:14 - So then when you read those problems,
202:15 - you're not just sitting there
like pfft what is going on?
202:18 - I want you to start understanding
how to problem solve,
202:21 - and then I'll give you guys exercises
202:22 - that you can solve on your own,
202:24 - and then I'll provide you with solutions.
202:25 - So let's get started.
202:26 - Let's say I give you a
function called sum two, okay.
202:36 - And it returns the sum
of two numbers, okay.
202:43 - So let's just make it a
little bit more clear.
202:49 - A function called sum two
that takes in two inputs,
202:55 - and it returns a sum
202:58 - of those two numbers, okay.
203:04 - That's the thing, that's what it's saying.
203:07 - Now, your job would be to break this down.
203:10 - So how I would break this down
203:11 - and I would say, here's
what the input does.
203:14 - It takes two things let's
call it num one, num two,
203:19 - or let's not be lazy and said
number one and number two.
203:25 - And then output is just
number one plus number two,
203:33 - okay, so it takes those two
numbers and it returns them.
203:36 - So it helps me break this whole sentence
203:40 - into something that I
can code much easier.
203:43 - Okay, and then name of the function,
203:46 - function name is called sum two.
203:51 - Okay so now I know what the output of is
203:55 - like kind of how it's done,
what the input expects.
203:59 - Now, I'm gonna try to see if
I can create some examples
204:02 - of what it should look like.
204:04 - So I wanna be able to say sum two,
204:06 - give it some number like one and two.
204:11 - So this is how I'll actually use it.
204:14 - Okay, and then my expected
output should be three, right?
204:22 - If I take one and two,
if I give it one and two
204:24 - it should add it and
it should return three.
204:27 - All right, that's my expected output.
204:31 - Okay, so now let's get to
coding this kind of function.
204:36 - If you give it something like 100,
204:37 - and then you give it 200
here it should return 300.
204:42 - So here's our work, define sum two.
204:45 - I wanna give it one and two or sorry,
204:48 - gonna give it number one
204:50 - I wanna give it some number,
204:51 - some another variable called number two.
204:54 - And I wanna say return
number one plus number two.
205:00 - All right, and now let's test it out.
205:02 - I'm gonna give it,
205:04 - if you just define a function
and don't do anything else,
205:06 - notice what happens when I run it.
205:07 - I get none, nothing happened.
205:10 - It's like defining a variable,
205:11 - if I say x is equal to five,
205:13 - it doesn't actually run
and give you something.
205:16 - It just makes x five.
205:18 - So function gives names to
like blocks of code, all right.
205:23 - Now let's print it out.
205:25 - Let's call the function sum two
205:28 - on a number one and two
205:29 - and let's see if it
matches our expectations.
205:32 - And it gives us back three.
205:34 - Okay now let's do it on another one.
205:39 - Hundred and two hundred, right?
205:44 - It gave us back 300, that's good.
205:46 - It's taking those two
numbers and returns them,
205:48 - well how does it work?
205:49 - When we call the function
with 100 and 200 as inputs,
205:52 - it goes back to the
definition of the function
205:55 - puts in 100 for number one, right?
205:57 - It puts in this 100 for number one,
206:00 - and puts in this 200
for the second number.
206:04 - So everywhere it sees number one,
206:05 - it just replaces with 100.
206:07 - Everywhere it sees number
two, it replaces with 200.
206:11 - Okay, so this happens and
then this happens, okay?
206:18 - It does 300, all right.
206:21 - That's the result of calling
the sum two function.
206:24 - So this part evaluates to 300.
206:28 - And then it puts that part
out to the screen, okay.
206:31 - And that's the same logic
206:32 - that gets applied for one comma two.
206:36 - Okay so this was the example.
206:39 - In the next video, I wanna give
you your very first problem.
206:43 - Okay, so I hope you're excited,
and let's go from there.
206:49 - (upbeat music)
206:53 - Okay, now let's try our
hand at our first problem.
206:57 - Okay, so I'm gonna give you
206:58 - your very first problem this time, okay.
207:01 - So let's go ahead into our course,
207:03 - this is on the main website, okay.
207:06 - Let's go to, or
cleverprogrammer.com that is,
207:09 - let's go to the problem
called square a number
207:12 - and let's click on it.
207:13 - And don't worry if you're
watching this on YouTube,
207:15 - I'll provide the notes below.
207:18 - So I'll give you the link to the problem.
207:20 - And I'll give you a link to
the solution as well, okay.
207:23 - On the website, it's
just all more integrated.
207:25 - So at the top, before you get,
207:28 - before you actually have
to write your function,
207:30 - I have some notes here to help you out.
207:32 - So like for example, I say something like,
207:34 - remember functions always
start off with the word D-E-F,
207:39 - which means define.
207:40 - So if you're ever writing a function,
207:42 - always start off with D-E-F.
207:44 - Note two says don't
forget your colons, okay.
207:48 - Note three says, always do return
207:51 - rather than print in your functions.
207:53 - Usually you do print to check
if it's working correctly.
207:56 - Other than that you wanna do return.
207:57 - I'll make a video on return versus print.
208:00 - So you guys know more in
depth what's going on.
208:02 - So here is an example for you guys
208:06 - that we just did in our previous video.
208:08 - But I'll leave this
here for every problem,
208:10 - just so you guys can
remember how it works.
208:13 - So if you, so remember the
add two function that we wrote
208:16 - or sum two function, it takes
in two numbers as inputs
208:20 - and returns their sum.
208:21 - Well, this is how you write it.
208:24 - Define add two, takes in two inputs,
208:26 - we just call them a and b,
208:28 - and we return the sum of both of them.
208:30 - So if you look at line four it says,
208:33 - it's now using the function.
208:35 - So that's an example of
how to use your function.
208:38 - So print add two, one and two, all right.
208:43 - So one, and two should
give you back three,
208:45 - then it prints three
and you get that result
208:47 - that you see right there
where the arrows are pointing.
208:51 - Okay, now let's get to our actual problem.
208:54 - The problem is called squaring a number.
208:57 - Okay, you can read this on your own too.
208:58 - So I'm gonna go through
this a little bit fast.
209:01 - I want you to try this on your own.
209:02 - Hopefully, you have taken
a stab at this problem.
209:07 - After you have done so, this
part is gonna be the solution.
209:11 - Okay, so I'm going to go through
the solution of this now.
209:15 - All right, write a function
that squares a number that,
209:19 - write a function square number
209:21 - that takes in a number and squares it.
209:22 - So right away, I know
it's something like this.
209:26 - Okay, first part is done,
209:30 - the function is called square number.
209:31 - And I have to put a D-E-F before it.
209:34 - I also have to put open close parentheses
209:36 - because it's a function.
209:37 - Even if it takes no arguments,
209:39 - you have to put a parentheses,
209:41 - open close parentheses like that.
209:43 - All right, what else does it say?
209:46 - It tells me to take a
number and square it,
209:49 - which means that I have
only one input, right.
209:52 - So I know that I have one input,
209:57 - and I have some integer,
or I have some output okay,
210:02 - some number based output.
210:06 - So I know my return statement,
whatever is gonna return
210:09 - should be something that
probably returns a number, okay.
210:13 - In this case, right, my output is going
210:17 - to be something like number squared.
210:23 - Okay, so we are taking in one input,
210:27 - let's call the input number,
210:29 - and let's just do a return
that number squared, okay.
210:36 - At the bottom, I have a bunch
of testing things for you.
210:40 - So this part of the code
actually test your function.
210:43 - So it's a function
called test square number
210:46 - that tests your function.
210:48 - Okay, so just to make sure
you got everything right,
210:52 - you should have a line printed out.
210:54 - If you've done, wrote this correctly,
210:57 - you should have a line
saying your code is correct.
211:01 - Okay, so to do that, you
have to always uncomment
211:05 - the bottom line that I have here for you
211:07 - which is the call to this
function here, test square number.
211:12 - Okay, so you want to
uncomment that line below.
211:15 - And now let's run it and
see if our code is correct.
211:18 - Okay, and you can see right here
211:21 - that it says your code
is correct, all right.
211:27 - Just to break it down,
211:29 - this two asterisks mean exponentiation.
211:32 - So I'm saying number squared, okay.
211:37 - How you would write it in math
would be something like this.
211:41 - And then let's see
what's happening, right?
211:43 - If you give me two, you
should get back four.
211:45 - If you give me eight,
you should get back 64.
211:47 - If you give me 10, you
should get back 100.
211:50 - And now let's see how it works.
211:51 - So if I give you two, right,
this function call over here,
211:54 - square number two, what happens?
211:58 - Let's write it down right here.
211:59 - Square number and give it two.
212:02 - Okay two gets parseed in as the number,
212:06 - you have two over here.
212:08 - Everywhere there's number
the variable number
212:10 - it just replaced by two.
212:12 - Two to the power of two or two
squared just gives you four.
212:18 - And so it asserts four
equal equal four, right?
212:24 - And then it gives you,
212:25 - and then it says good.
212:27 - How assertions work,
212:28 - this thing that I have
that tests your code
212:31 - is that if it evaluates to,
212:32 - like it takes in some condition.
212:33 - If that condition evaluates to false
212:35 - it throws a big error, right?
212:37 - If I said assert five equal
equal four and I ran this,
212:42 - is gonna give me a big error
at the bottom here, right.
212:48 - parse error, but bad input on line 11.
212:52 - Oh, okay, it's giving me an error here,
212:54 - but let's fix this guy.
212:56 - Now, it gives me an error
212:57 - on where I expected it to
give me an error on line 14.
213:01 - Which says assert five is equal to four.
213:04 - And it says, no, that's not true.
213:06 - But if I had four equal equal four,
213:08 - it would just parse it quietly,
213:10 - meaning like, it won't do anything.
213:12 - So if it doesn't give you an error,
213:13 - it means that thing is correct, okay.
213:17 - And that's it, that's our
solution for this problem,
213:21 - square a number.
213:22 - In the next video, we're
gonna solve the problem
213:26 - of checking if a number is even.
213:28 - All right, so try it on your own.
213:31 - And in the next video,
213:32 - I'll have the actual problem for you guys.
213:34 - And I'll have the notes below.
213:35 - And I'll have the link
to solution below as well
213:39 - if you're watching it
on my YouTube channel.
213:42 - If you're watching it on my website,
213:44 - then there won't be anything below
213:46 - because everything is actually part
213:48 - of the cleverprogrammer.com website.
213:51 - All right, I'll see you in the next video.
213:54 - (upbeat music)
213:59 - Okay, guys, now let's talk
about a new problem, all right.
214:03 - So I just clicked this part that says
214:04 - check for even number divisibility.
214:07 - Again, if you're on YouTube,
214:08 - you're gonna have the problem notes below.
214:11 - And the solution notes below as well.
214:13 - So no need to worry.
214:15 - But this is on cleverprogrammer.com.
214:17 - So let's keep going.
214:20 - You can write a function,
214:22 - or sorry, the problem says
write a function is even
214:26 - that takes in a number and
returns true if it's even.
214:30 - Otherwise, it returns false.
214:32 - Okay, so before you watch the solution,
214:37 - take a stab at it and
try to do this problem.
214:40 - Okay, and after you're done trying
214:43 - and you're pulling out your hair,
214:44 - like I can't do it, come to
watch the solution, okay?
214:49 - I've given you some hints here as well.
214:51 - So think about what does it mean
214:53 - for number two be divisible
by another number, right.
214:57 - So what does it mean?
214:58 - Let's, test it out a little bit.
215:02 - So if I have 10, and I wanna
check if it's divisible by two,
215:07 - well, what does it mean to be divisible?
215:08 - It means remainder is what?
215:12 - Right, if I do 10 divided by two?
215:16 - What's my remainder there, right?
215:22 - So my remainder here will be none,
215:25 - because two goes perfectly into 10.
215:28 - And there's a way to check
for remainders, okay.
215:31 - So for example, let's let's
check if three goes into 12.
215:37 - Right, so if my remainder is zero,
215:39 - then that means 12 is divisible by three.
215:43 - Right, I can also try it like
this 12 divisible by three
215:47 - and see if this gives me true or false.
215:49 - If it gives me true well then,
215:51 - 12 is divisible by three.
215:52 - If it gives me false, then
12 isn't divisible by three.
215:56 - Okay?
215:58 - So that's your hint,
216:00 - I've given you your example here as well
216:02 - in written format.
216:03 - And then I have a bonus
challenge for you which says,
216:06 - If I give you a number,
and you check that it's,
216:10 - if it's even,
216:12 - your function checks is even.
216:15 - So for that function, the
challenge that I gave you
216:17 - is see if you can write it
in one line of code, okay.
216:21 - But don't try that first.
216:23 - Try to do it with some if else statements,
216:25 - is gonna get you to do
some if else statements.
216:27 - Okay, now, let's go over the solution.
216:29 - So the first thing I wanna do is write,
216:34 - what's my function name is even okay.
216:36 - It says right there is even.
216:39 - Another thing that you can
do to trick the system is,
216:44 - if you look at my test notes below,
216:46 - well it kind of tells you
what the function is called,
216:50 - and how it's expecting
to use the function.
216:53 - This is how the function
is gonna be used, right.
216:56 - You're gonna say is even
and parse in a number.
216:59 - And either it'll give you a true
217:01 - or it will give you a false.
217:02 - So I have test cases here written for you.
217:05 - If your function runs correctly,
217:07 - all these test cases are gonna give you
217:09 - a big thumbs up and the
screen is gonna print out
217:12 - your code is correct, right.
217:15 - So let's say that I give this some number.
217:21 - And basically what do I do?
217:22 - If number is divisible by two,
217:28 - right, that's how you check
if it's divisible by two.
217:30 - If you just do this, that
will give you the remainder.
217:34 - So this will evaluate to zero, okay.
217:38 - But you want something to value
217:39 - to either true or false, okay.
217:44 - So number mod two should give you zero.
217:48 - This means that number
should be divisible by two,
217:52 - that's what it means to be even right?
217:54 - Two should be able to go
inside of that number.
217:58 - Return true, else return false.
218:03 - Right, if two does not go
inside of that number perfectly,
218:07 - then I should get back false.
218:08 - So like if I tested, I don't
know 13 divisible by two,
218:13 - check if it divisible it says false.
218:16 - Well, I can even check
out what's left over.
218:19 - Two goes all the way into 12.
218:20 - And then one spills over and
you get a remainder of one.
218:23 - Hence 13 is an odd number
and not an even number.
218:27 - Just in case, you don't know
what odd and even numbers are,
218:30 - zero, two, four, six,
eight, ten are all evens
218:34 - and then one, three, five, seven
218:36 - up to infinity are all odds.
218:38 - You can have negative and positive odds
218:41 - or negative and positive evens.
218:43 - All right, I also have
the notes on my website
218:46 - for you guys to help you.
218:48 - So remember how to,
218:50 - it tells you how to write a function.
218:51 - It tells you where to put the colons.
218:54 - It tells you to return things,
218:56 - and it gives you an example
218:57 - of that add to function as well.
218:59 - So let's test it out.
219:01 - I'm gonna comment out line 43.
219:04 - And I'm going run this
and if it prints out
219:06 - your code is correct,
then our code is correct.
219:08 - Otherwise, it's wrong.
219:10 - Okay good, it says your code is correct.
219:14 - Now I'm gonna go over the bonus challenge.
219:16 - Okay so,
219:20 - define bonus challenge kind of,
219:24 - or actually I can just do it right here.
219:26 - Because you guys can pause
the video and stuff, right?
219:28 - So you guys can go back in time as well.
219:30 - Return, and what do I want to do?
219:35 - Number divisible by two is equal to zero.
219:40 - And that's it.
219:41 - You don't have to do if
you don't have to do else,
219:43 - it does it all in one go.
219:45 - Well, what happens here, if the
number is divisible by zero,
219:48 - if the number is divisible by
two, it will give you a true.
219:52 - If it's not divisible by
two it gives you a false.
219:55 - So you don't need to
check if this then true,
220:00 - otherwise false, it kind
of does that for you.
220:03 - So that's your one liner, okay.
220:06 - Hopefully, this video was helpful for you
220:08 - and you'll learn something.
220:09 - In the next video, we're gonna find out
220:10 - how to find the length of a string.
220:13 - So that's a problem that
is gonna be really cool.
220:17 - And you will be able to try it out.
220:19 - Check out the show notes below.
220:21 - So you can practice this and
also try to solve this problem,
220:25 - the check for even numbers, take care.
220:29 - (upbeat music)
220:33 - Hey guys, so in the last video I mentioned
220:35 - we're gonna do find length of string.
220:37 - But what's better for you guys
220:38 - is if we do another problem
that's pretty similar.
220:42 - So you guys can test out
your own skills as well,
220:45 - just in case you got stuck
220:46 - on the even number problem, right?
220:48 - So let's see if you can write code
220:51 - that can give you an answer
for the, if the number is odd.
220:56 - Okay, so this problem is
called check for odd numbers.
221:00 - All right, so here I have
write a function is odd,
221:04 - that takes in a number and returns true,
221:06 - if it's odd, otherwise false.
221:07 - So it's pretty much the opposite
221:08 - of finding an even number solution.
221:12 - So with the even number
problem, if I gave you two,
221:16 - it should return false, right?
221:19 - Or I'm sorry, should return true.
221:21 - (phone beeps)
221:23 - Whoops, so real loud.
221:26 - So same thing should happen for this one,
221:28 - except when I give you three,
221:30 - it should say true, otherwise false.
221:33 - Now I'm gonna go over a
solution to this problem,
221:35 - just in case you haven't
tried this on your own,
221:37 - the link is below to the
problem and to the solution.
221:41 - So if you're one watching this on YouTube,
221:42 - go ahead and try it on your own.
221:43 - If you're on my website,
cleverprogrammer.com,
221:46 - everything should be okay anyways then.
221:49 - So let's get started.
221:50 - I have some function, it's called is odd,
221:54 - that that's the first step to get correct.
221:56 - And you can check how it
works you at the bottom.
221:58 - So again, you can just go
ahead and kind of cheat.
222:01 - You see the function is called
odd, it takes in one input.
222:04 - So you can kind of go like okay, is odd,
222:07 - my input is some number.
222:12 - And what can I do if that number?
222:15 - What does it mean for a
number to be odd, right?
222:17 - What does it mean for a
number to be an odd number?
222:20 - Well, all it means is that
it's not divisible by two.
222:24 - Right, so for example,
if I gave you 12, right?
222:30 - Is it divisible by two?
222:31 - Yes, it is you get back true.
222:33 - But if What if I give you
13, is that divisible by two?
222:36 - No because two goes all the 12.
222:38 - And then there's a one
spillover or remainder.
222:42 - So here you have false.
222:44 - But we just wanna flip the results.
222:46 - And meaning this should give you false
222:48 - and this should give you true
222:50 - for the solution to this
problem, so let's go.
222:53 - If number divisible by
two is not equal to zero,
222:57 - then I want to say give me true.
223:00 - Otherwise, give me false.
223:04 - Okay, let's check if the solution works.
223:06 - I'm gonna uncomment this
part and let's go and run it.
223:10 - And it says your code is
correct, so that's good.
223:13 - Let's try giving it, is odd,
223:16 - let's try giving it three.
223:20 - It says true, and what if I give it two?
223:23 - It should say false.
223:24 - Okay, cool, and now if you wanna try
223:28 - the bonus challenge on your own
223:29 - pause the video, go try it.
223:31 - Otherwise, I'm gonna go
over the answer right now.
223:34 - So here's the bonus way of doing it.
223:40 - Return number
223:44 - divisible by or mod two,
223:47 - does not give you the
remainder zero, okay.
223:50 - So it's like the opposite
of the even number function.
223:54 - So there you go, that's your one liner,
223:56 - right, your cheeky one liner.
223:59 - Okay, guys, that's it for this video.
224:01 - I'll see you in the next video.
224:03 - (upbeat music)
224:07 - Guys what's up?
224:07 - This is Qazi from cleverprogrammer.com
224:09 - where you learn to code smarter.
224:11 - In this video, what I wanna talk about
224:13 - is string length function.
224:18 - I don't know why I did that, actually.
224:21 - But essentially, how this function works
224:24 - is that if I give you something.
224:28 - I don't know what's going
on with my hands today,
224:29 - if I give you something, a string,
224:31 - and you tell me how many
characters are in there, okay.
224:35 - So by now, hopefully,
you should kind of know
224:37 - the format of how these
problems are laid out,
224:40 - and how you can solve them.
224:41 - And you can also look at the tests,
224:44 - like the cert tests that I
have to kind of cheat, right.
224:46 - Like, this is how many inputs it takes in
224:49 - and yeah, yeah.
224:50 - Okay, so try this problem on your own.
224:53 - I have the notes below
in the YouTube video.
224:56 - I have the exercise solution below.
224:59 - And if you want to, you
can go to my website,
225:02 - cleverprogrammer.com and
enroll in the course.
225:05 - So that it can keep track of everything.
225:07 - And then it's all nice
and all in one place.
225:11 - Anyways, let's keep going.
225:14 - So I'm gonna write the solution right now.
225:16 - So spoiler alert, close your eyes kids
225:18 - if you haven't tried
it, do not look at this.
225:21 - You don't deserve to look at the solution
225:23 - if you haven't tried it
on your own already, okay?
225:26 - Go try it on your own.
225:28 - Let's get to the solution now.
225:30 - So first thing I'm gonna do is
D-E-F 'cause it's a function.
225:33 - Then string length, 'cause
that's what I told you
225:36 - the function name should be right.
225:38 - Write a function that takes in a string
225:40 - and returns its length, right?
225:43 - So the function is called
string length, right?
225:49 - Inputs, how many inputs does
it take that takes in a string?
225:53 - So the word or should give you a hint
225:56 - that it's only one thing.
225:58 - You can say string, you can say my string,
226:02 - you can call it whatever you want, okay.
226:03 - I'm just gonna call it my string
226:04 - to let you guys know
that there's no special
226:07 - meaning behind the word string itself.
226:09 - So you don't need to
like know what it does.
226:13 - What this function requires you to know,
226:16 - is how to do a for loop.
226:18 - Okay, if you can do a for loop,
226:19 - you can solve this problem very easily.
226:22 - So I have my string,
now, what do I wanna do?
226:25 - I'm gonna run through that
string and count each letter.
226:29 - Right, so if it's hello,
I wanna count that,
226:32 - I wanna keep track of
every letter that I see.
226:35 - So when I see an H I go,
226:37 - I hold my finger up like this, like one.
226:40 - When I see an E, I go two.
226:42 - When I see an L, I go three.
226:44 - I see another L, I go four.
226:45 - When I see an O, I go five.
226:47 - And if I've run out of characters,
226:51 - I wanna just output five, okay.
226:54 - So it sounds like something
226:57 - that I wanna run multiple
times, sounds like a loop.
227:01 - For letter in my string, right?
227:07 - If I do print letter here,
227:12 - you guys can see on the right hand side
227:14 - that is gonna go through that
227:16 - and it's gonna print the letter,
227:17 - I have to call the function, of course.
227:20 - String length, and let's give it hello.
227:25 - And let's run it.
227:27 - And on the right hand side,
227:29 - you can see that it goes H-E-L-L and O.
227:33 - Right, that's great.
227:35 - So we have access to each character.
227:37 - Now what do I wanna do?
227:38 - I wanna have a tracker
variable like count.
227:42 - Okay, and I want to set it to zero.
227:43 - And every time I see something,
I wanna increment it by one.
227:46 - So count is equal to count plus one,
227:49 - or count plus equal one.
227:53 - 'Cause it's such a common operation,
227:54 - so we just increment
by saying plus equals.
227:57 - Okay, that's how you're gonna see
227:58 - it written down in Python
pretty much everywhere.
228:01 - And if you're programming
in some other language,
228:03 - like C or C++, you're gonna
see it written like this.
228:07 - All right, so I have count
equals count plus one.
228:11 - So I'm incremental count by one, right?
228:14 - Increment count by one.
228:19 - And how many times do I
wanna print out count?
228:21 - Every single time or just at the end?
228:24 - If you think of that question in English,
228:26 - you can answer that very easily.
228:28 - I only wanted to return the count once.
228:30 - So should it be part of the for loop,
228:32 - or should it be outside of the for loop.
228:34 - It should get outside of the for loop.
228:36 - Good, okay, and I just wanna
hit enter so it looks nice.
228:41 - And yeah, now let's try
this, let's do print.
228:47 - And my function right,
let's see if it prints five.
228:50 - Okay, it prints hello, and
then it prints out five.
228:53 - We don't want to print out hello anymore,
228:56 - 'cause we know it works
just fine, and you get five.
229:00 - How does it work if you
really break it down?
229:02 - Well, to my function,
I parse hello, right.
229:06 - So this part of my string becomes hello.
229:10 - Then this becomes hello.
229:13 - The first time we're
going through the loop,
229:15 - this is an H, right?
229:19 - Then we just counted by one.
229:21 - Then the next time we go through the loop,
229:22 - this is just a E and
then we counted by one.
229:27 - The next time we go through the loop,
229:28 - this is an L, then we increment by one.
229:31 - Next time we go through the loop,
229:33 - it's L again and we
increment count by one.
229:37 - And then last time we're in all,
229:38 - we increment count by
one, now count is five.
229:42 - And then we return five.
229:44 - Now, if you notice do we use
229:48 - the variable letter anywhere else?
229:50 - No, we don't really use it.
229:51 - So you can say whatever you want here.
229:53 - Or you can just put an underscore here,
229:56 - because we don't really use it anywhere.
229:58 - So we don't care what that variable is.
230:00 - But sure, we'll just leave it as letter.
230:04 - At the end of the day, I
wanted to return count.
230:06 - Now let's test our function.
230:07 - If it prints out your code is correct,
230:09 - then our code is indeed
correct and we are done.
230:13 - Let's check it out.
230:14 - Oh, whoops, I can't
hard code a value here.
230:17 - I have to change this to my string.
230:24 - And let's run it and it
says your code is correct.
230:27 - Now guys, we're learning all of this
230:31 - to build something big.
230:32 - Okay, we're going to build
our own rock paper scissors.
230:35 - And I don't mean like CodeAcademy.com,
230:37 - let me hold your hand.
230:39 - And here's the entire code.
230:41 - And you feel like you did it,
230:42 - but you didn't really learn anything.
230:43 - I mean, you're gonna be doing
practically the whole thing,
230:46 - I'm gonna give you the bare bone pieces,
230:48 - but you're gonna be writing your own code.
230:51 - And I really want you to be able
230:52 - to do this completely on your own.
230:54 - So it's really important that
you do all of these exercises
230:58 - and try your best to do them on your own.
231:01 - Because you will need all of these pieces
231:04 - to then go and try to build your own game.
231:07 - So we're gonna start
off with the simple game
231:09 - like rock paper scissors.
231:10 - But then after that,
we're gonna do something
231:12 - with Twilio API, which
is the text messaging
231:16 - you can build pretty much your
own text messaging app, okay.
231:19 - And you can actually send people
231:21 - text messages on their phones.
231:23 - So we're gonna be doing
some really big stuff here.
231:26 - All right, no more baby stuff.
231:29 - But I want you to be prepared for that.
231:31 - That's why I have this for you guys.
231:32 - I have notes, I have solution
notes and everything.
231:35 - So take advantage of that.
231:37 - Use everything at your disposal.
231:42 - If you haven't already
subscribed to this channel,
231:45 - and do not miss the next video,
231:47 - because in those all of those
videos that are coming up,
231:50 - we're gonna be covering covering
really important things.
231:53 - I'll see you there.
231:55 - (upbeat music)
231:59 - Hey guys, this is Qazi
from cleverprogrammer.com
232:02 - where you learn to code smarter.
232:08 - So let's get started.
232:11 - I wanna cover last letter
232:13 - of a string function in this video.
232:15 - Okay, so how do we play
around with the string
232:21 - so we can get its last letter.
232:22 - That's the function I want you to write.
232:24 - Should be very simple,
232:25 - you should be able to get it pretty fast.
232:28 - If you look at the tests below,
232:29 - if you use the last letter
function parse it hello.
232:33 - With exclamation mark,
232:34 - it should give you the exclamation mark.
232:36 - If you give it banana,
it should give you an A
232:38 - because A in this case is the last letter.
232:41 - If you give it something
with only one letter,
232:44 - it should return that letter.
232:46 - If you give it again, funny
guys as you get the idea.
232:50 - So let's code this bad boy up.
232:52 - Again, you do not do deserve
to view the solution.
232:56 - If you haven't participated
and tried to do it on your own.
232:59 - This is, you gotta be
part of actively learning.
233:03 - Okay, I don't want you to
be parseively learning,
233:05 - like sitting back like
eating some popcorn.
233:15 - I don't want you to do that, okay.
233:19 - While I do agree,
233:20 - this is kind of like
Netflix for your career.
233:24 - But I still want you to
be actively learning.
233:27 - Okay, it's like Netflix that you engage in
233:29 - and participate in, all right.
233:31 - So let's get to coding this bad boy up.
233:34 - Notes are below, solution notes are below.
233:37 - Exercise problem is below.
233:39 - Everything is there, let's keep going.
233:42 - Define last letter.
233:46 - Okay, now what does it take in?
233:48 - it takes in some string.
233:50 - So you can literally call it
some string if you want to,
233:52 - but we're just gonna call it string.
233:56 - What does it do then?
233:58 - Well, it's very simple, it
returns the last letter.
234:01 - How do you return the last letter?
234:02 - If I opened up a terminal
234:04 - and showed you guys
how this bad boy works,
234:08 - quite simple.
234:09 - If I have a string like hello,
234:11 - to get it's second
letter, I would do this.
234:13 - To get its third letter, I do that.
234:16 - To get its first letter, I do this.
234:18 - But if I wanted to get its last letter,
234:21 - there's a trick in Python that you can do.
234:25 - Index by negative numbers.
234:26 - If I do negative two,
234:27 - this gives me the second to last letter,
234:29 - which means I'm gonna get the second L.
234:31 - Okay, hell, last L of the word hell.
234:36 - But if I want to get the last letter,
234:38 - well I can just do this, right.
234:39 - This gives gives me the last letter.
234:41 - Now let's' code this up
return string and last letter.
234:48 - Okay, as simple as that,
234:50 - let's test our function
and prove to ourselves
234:53 - that we are indeed correct.
234:55 - And it says your code is correct.
234:57 - Okay, that's it for this video.
235:01 - If you watched up to this point,
235:03 - and you haven't subscribed,
subscribe right now.
235:06 - Because you don't want
to miss the next videos.
235:09 - I will see you there.
235:14 - It didn't end, let's try it again.
235:17 - (upbeat music)
235:21 - Hello there, my beautiful friends.
235:23 - In this video, I wanna talk
about who's the bigger guy.
235:27 - This is Qazi from clever programmer.com,
235:30 - and we're gonna solve
a pretty sick problem.
235:33 - Sick as in good.
235:36 - Now, this problem essentially
235:39 - wants you to find max of two numbers.
235:43 - So if I gave you,
235:45 - look at line 19.
235:47 - If I give you one two,
you should return two.
235:51 - If you give this function,
bigger guy function,
235:53 - if you give it 10 and
20, it should return 20.
235:56 - If you give it 20 and
10, it should return 20.
236:00 - And if you give it two and one
236:01 - it shall return two, get the idea?
236:04 - And same thing with the strings,
236:06 - but you don't have to do anything special.
236:08 - Python knows how to check
strings against each other, okay.
236:13 - So let's code this up.
236:15 - Notes are below, solution is below.
236:17 - I think you guys know
the drill at this point.
236:20 - If you're watching this
on YouTube, that is.
236:21 - If you're watching it on my website,
236:23 - everything is gonna be there in your face.
236:26 - So first step D-E-F, define,
236:30 - we're writing a function
that does this right?
236:32 - Look at the instructions,
write a function bigger guy.
236:35 - So I know that I do this
with my eyes closed.
236:39 - Now what does it take it in?
236:40 - It takes into numbers.
236:41 - So I know that it takes in two inputs,
236:43 - I can say num one, num
two or something, okay.
236:48 - And what can I do here?
236:51 - Well, I wanna check
between those two numbers,
236:55 - and whichever is the bigger one.
236:56 - I wanna return that number, right?
236:59 - So using if statements
and comparison operators,
237:03 - we can do all of this together.
237:05 - If you haven't solved this yet,
237:07 - or if you haven't tried
to solve it on your own.
237:10 - Please don't watch this.
237:12 - Pause, try the problem, then come back.
237:15 - But here's the solution for you guys,
237:17 - for you eager beavers.
237:20 - If num one is greater than num two
237:28 - return num one, right?
237:30 - If no one is bigger.
237:32 - Well otherwise return num two, right.
237:37 - In the case where num
two is equal to num one,
237:40 - do we care which one we wanna return?
237:43 - Of course not, we don't care.
237:45 - We just wanna return any
of them, it doesn't matter.
237:47 - Okay, to specify that for you guys,
237:50 - here, I'll be nice and I'll
add in another test, okay.
237:54 - 10, 10, it should return 10.
237:56 - I really don't care what it returns
237:58 - in the case where the
two are the same, okay?
238:01 - And what if they are?
238:03 - What if num two is the one that's greater?
238:05 - Well, in either of those cases, right?
238:08 - The first case we return num one.
238:10 - If it's the case where they're equal,
238:12 - or if num two is greater
we return num two.
238:14 - Which is why we don't
need to give a condition
238:16 - we just say else and we're done.
238:19 - Now let's let's check this bad boy.
238:23 - And let's see how it works, right.
238:24 - Let's give it some, okay here,
238:26 - I'll just do it to be extra tangible here
238:29 - for you guys, right so.
238:32 - Let's do three five, it returns five.
238:35 - Let's give it five nine, it returns nine.
238:40 - And if I gave it five, five,
it should return five, right?
238:44 - So we know what it does.
238:48 - And here let's uncomment this line.
238:51 - And when I run it, it should
say your code is correct.
238:53 - Which means that it parseed
all of these assertion tests.
238:57 - And then at the end, it said your code it,
238:59 - then it went and said
your code is correct.
239:02 - Now what if all right,
239:08 - I'm gonna save that for the next problem.
239:10 - Because next problem is gonna be
239:11 - a lot more fun and more challenging.
239:13 - Where you're gonna have
to solve the biggest guy.
239:16 - So if I gave you three
guys, what do you do?
239:19 - We're gonna discuss that
in the next problem.
239:21 - If you haven't already, subscribe.
239:23 - I'll see you in the next video.
239:26 - (upbeat music)
239:30 - Hey guys, this is Qazi
from cleverprogrammer.com
239:32 - where you learn to code smarter.
239:35 - In the notes below the problem
who's the bigger guys there?
239:38 - So take a shot at it.
239:39 - The solution is also there.
239:42 - But we're gonna walk through
the solution right now.
239:44 - So let's get to it.
239:46 - I'm sorry, the biggest
guy, who's the biggest guy?
239:48 - Okay, so essentially,
if you read the problem,
239:51 - it says write a function biggest guy
239:53 - that it takes in three numbers as input
239:55 - and returns the biggest one.
239:57 - So I take three numbers,
239:59 - and I find whoever's the biggest,
240:01 - and then I return it, okay.
240:03 - So this one gets more challenging.
240:05 - And if you've tried it on your own,
240:06 - you'll notice there are
a lot of if L statements
240:08 - that you're doing.
240:10 - Also online eight, I have a
bonus challenge for you guys.
240:14 - It's a write a one line solution, okay.
240:17 - What I mean by that is
like two lines, right?
240:20 - 'Cause you have to have one line
240:21 - to define the function, obviously.
240:23 - And then you have to have
one line for the solution.
240:25 - So that's what I mean by one line, okay.
240:27 - Now, it's medium to hard difficulty,
240:30 - because you guys haven't done
anything like this before.
240:34 - So it will be challenging if you want
240:36 - to do the bonus challenge,
and I'll go over that as well.
240:40 - First, I'm gonna go
through it the normal way.
240:43 - So let's define a function
called the biggest guy
240:46 - that takes in three numbers A, B, and C.
240:49 - Okay, or we can call it num one,
240:52 - num two and num three, okay.
240:56 - Now, the approach that I
wanna take against this
241:00 - is I wanna find who's the bigger guy
241:02 - between num one and num two.
241:05 - Okay, so find a bigger guy
241:07 - between num one and num two.
241:12 - Then after finding the bigger guy compare,
241:18 - after finding the bigger guy,
241:19 - I wanna find a bigger
guy between I'm sorry,
241:26 - or let's just say biggest guy, right?
241:29 - Between big guy, bigger guy,
241:35 - whoops, and num three, okay.
241:39 - That's kind of the approach I wanna take.
241:41 - I wanna find who's bigger
between num one and num two.
241:46 - And then once I find these guys right
241:48 - and find like the bigger guy kind of.
241:51 - Whoops, bigger guy.
241:55 - Then I wanna check the
bigger guy against num three,
241:58 - and then see who's the biggest, okay.
241:59 - So with that pseudo code
slash English written formula.
242:04 - Let's go ahead and try to code this up.
242:07 - So if num one is greater than num two,
242:13 - then big guy is equal to num one.
242:21 - Right, else bigger guy is
equal to number two, okay.
242:29 - And once, so now I have
found the bigger guy.
242:32 - Now I just have to compare
the bigger guy with num three.
242:37 - Okay, so if bigger guy is
greater than num three,
242:46 - then biggest guy is equal to bigger guy.
242:53 - Else biggest guy is equal to num three.
243:01 - Return num three.
243:03 - Okay, I haven't tested this function yet.
243:06 - Hopefully it's right.
243:07 - Let's comment out line 44.
243:11 - Which tests our function, right?
243:13 - We wanna run this function
243:14 - 'cause these are the tests
I've written for you guys.
243:17 - And it allows you to test your functions.
243:19 - And if we give it one, three,
two it should return three.
243:22 - If we give it 30, 10,
20 it should return 30.
243:26 - If we give it, in any
order should return 30.
243:29 - If we give it strings, it
should also know what to do.
243:31 - Don't worry about that, you
don't have to do anything extra.
243:33 - That's just a trick you guys.
243:35 - Python knows how to compare strings, okay.
243:38 - So let's take this bad boy out for a run.
243:42 - We got an assertion error online 44.
243:48 - What's the error?
243:49 - Did we like not write this correctly?
243:51 - It was gonna, test biggest,
243:54 - it should be called guy.
243:56 - I don't know why I have buy, guy.
244:01 - But what's the assertion error?
244:11 - Oh, right yep, return biggest guy duh.
244:16 - Okay, boom, there you go.
244:19 - Success, your code is correct.
244:21 - Okay, so it says I'm running tests.
244:23 - And then it says, good
job your code is correct.
244:28 - All right, that's it for this one.
244:31 - Now, let's try to change this
244:33 - and code it up in a better way.
244:37 - Okay, let's code it up in kind
of like a one line solution.
244:42 - So the one line solution,
244:46 - I'm okay, I'm kind of cheating.
244:48 - It's not really a one line solution.
244:50 - What it is, is it wants you to kind of use
244:55 - your previously written solution, okay.
244:58 - So you can say define bigger
guy of num one and num two.
245:05 - And you can say if num one
is greater than num two,
245:09 - return num one, else return num two.
245:13 - Okay, so remember, this was the function
245:16 - you wrote for bigger guy.
245:19 - So now let's use that
function to do this problem.
245:22 - Here's the nice solution.
245:25 - So I can say, return bigger
guy num one, comma num two.
245:33 - And I wanna actually call
my function here, again,
245:36 - bigger guy of num one, comma num two,
245:42 - and then compare that against num three.
245:45 - So if I run it, it again says
success your code is correct.
245:49 - Now, how does this work?
245:51 - Well, I want you to pause the video
245:54 - and try to think of it
yourself how it works.
245:58 - But now I'm gonna go over
how it actually works.
246:00 - Okay, so this is a
really nice problem here.
246:02 - It is allowing you to use
functions within functions, okay.
246:07 - Well, I have this guy here, right?
246:12 - So what can I do with this?
246:13 - When I parse it like one,
246:16 - let's say I have one,
three, two here, right?
246:18 - Those are the inputs I parse it in,
246:20 - as you can see on line
32, one, three, two.
246:24 - So what does this do?
246:26 - It cause a bigger guy
function with one and three.
246:29 - Using the bigger guy function,
246:31 - it finds a max of one in three.
246:34 - So this whole thing evaluates to a three.
246:39 - Then it tries to find the bigger guy
246:42 - between three and num three.
246:43 - Num three is two.
246:45 - So then we just go back to this function
246:48 - and find the bigger guy
between three and two.
246:50 - And then this function will return three.
246:53 - And that's our solution.
246:56 - Notice this is the key
here, the notes, right.
246:59 - Find bigger guy between
num one and num two.
247:03 - And then find the biggest
guy between bigger guy,
247:06 - and num three, okay?
247:08 - So let me go back and put it like this.
247:14 - These notes will be here for you guys,
247:16 - when you guys are doing the video.
247:18 - This is the solution, okay.
247:23 - And that's it we're getting closer
247:25 - to starting to now work on projects.
247:28 - So like the Twilio API project,
247:30 - where we will be kind
of coding up some stuff.
247:34 - And you can actually make
247:35 - a text messaging app through that.
247:37 - And then we will also
be getting to do some,
247:42 - make some games like
rock, paper and scissors.
247:44 - Okay, so a lot, all these functions
247:46 - are very important for you to learn.
247:48 - So then you can actually use these things
247:50 - when you're writing your own.
247:52 - You're writing your own code,
247:53 - you know how think in the correct way.
247:57 - One thing I wanna reveal to you guys
247:59 - is Python has a built
in function called max
248:02 - that kind of does this and
finds the biggest number.
248:05 - All right so you can actually just say,
248:08 - max of num one, num two, num three.
248:14 - And I can prove to you
it works is if I return
248:17 - look it says, if I run it,
248:19 - which I'm clicking it
right now and running it.
248:21 - It just says success,
your code is correct.
248:24 - So max is a built in function
248:26 - that finds a maximum between
any numbers you give it, okay.
248:33 - Thanks for watching.
248:34 - If you haven't already, go
ahead and subscribe right now.
248:38 - I'll see you guys in the next video.
248:42 - (upbeat music)
248:45 - Hey guys, what's up?
248:47 - This is Qazi from cleverprogrammer.com.
248:50 - And we are gonna be building,
248:52 - working our way up to tic tac toe.
248:55 - So this is going to be one problem
248:59 - that I'm gonna give you
248:59 - before I put you guys on
to tic tac toe project.
249:03 - Because once you do this,
249:04 - you'll have a better idea
249:05 - of how to complete that project, okay.
249:08 - So this is gonna be a
pretty important video.
249:11 - And after this, you guys
will be ready to write
249:13 - your very own first game.
249:15 - And what I've done for
you guys is essentially,
249:17 - it's not just gonna be a
boring text based game,
249:20 - I've created a full GUI for you guys.
249:22 - So once you complete the code
and complete the functions,
249:25 - the whole GUI application
will work, all right.
249:29 - So without any further ado,
249:31 - let's get started on the helper assignment
249:33 - I created for you guys.
249:34 - So this assignment is called Usain Bolt
249:38 - races you and Qazi.
249:41 - Okay, so here's the backstory,
249:45 - Usain Bolt, you and Qazi had a race, okay.
249:50 - Surprisingly, Usain Bolt
won, I don't know why.
249:54 - And then you came in second.
249:56 - And for some reason Qazi
just sucks at running.
249:58 - So I suck at running
somehow and I came in third.
250:01 - So I didn't do too good, all right.
250:04 - Now, can you write a function
250:07 - that given a person's
name returns their plates?
250:09 - So for example, if I gave
you Usain Bolt's place,
250:12 - or Usain's name, so I just said Usain,
250:15 - you give me back zeroth place,
250:18 - or sorry, first place.
250:20 - If I gave you, like, if I type in you,
250:25 - or me in your case, I
would have you write me.
250:28 - Okay, so like here, if
you see the test case,
250:30 - so if I give you me, then you
should return second place.
250:36 - And if you put it in Qazi,
it should give you three.
250:40 - All right, that's how
your function should work.
250:42 - And can you also write a
function that does the opposite?
250:47 - Given a place it returns their name.
250:50 - So maybe your function will
be called number to choice.
250:53 - And if I give you one, you
should give me back Usain.
250:57 - and if I give you two,
you should give me back me
250:59 - when you're writing and typing this code
251:01 - me will really be you, right.
251:04 - And if you give the function
number to choice three,
251:08 - it should return Qazi's
name, okay, so my name.
251:13 - If it works, then you get
back a nice little graphical
251:18 - GUI thing that I made for you guys.
251:20 - You'll have a turtle that will make
251:21 - a nice little circle
and say, good job, okay.
251:24 - My graphics are getting next level.
251:26 - Okay, so give this function a try.
251:30 - See if you can solve
it, see if you can solve
251:34 - choice to number and number to choice.
251:36 - Okay those are your two functions.
251:38 - So essentially, if I give you you here,
251:41 - then you should say okay that's
first place or second place.
251:45 - If I give you you Usain here,
251:48 - you should return. okay,
that's first place.
251:51 - And here, if I give you two
you should return your name.
251:56 - Or sorry, not your name but you.
251:58 - And I'm sorry, I'm confusing you guys.
252:01 - It should return me.
252:02 - If I gave you two this
function should return me.
252:05 - Okay, you can look at the test cases,
252:07 - and that's what they say.
252:08 - This whole me and you
thing is kind of confusing.
252:11 - But if I give you three
it should return Qazi.
252:14 - Alright, number, so I'll leave that there.
252:17 - So in this I've already written
the function name for you.
252:21 - And I've already written
the argument names for you
252:23 - to make your life easy.
252:24 - All right, what you have to do
252:25 - is complete both of these functions.
252:28 - and then go at the bottom
and uncomment this line.
252:31 - If I uncomment and right
now and try to run it.
252:34 - You can see it says
incorrect, keep trying.
252:38 - If I run it again, I'll say
incorrect, do not give up.
252:41 - Which means that my code
is incorrect, all right.
252:44 - Once my code is correct, it's gonna make
252:46 - a nice little green circle
and say correct, good job.
252:49 - So if you've not given a
try yet, go give it a try.
252:54 - Otherwise, I'm gonna go
over the solution right now.
252:58 - Okay, so let's get started.
253:01 - So how will we write the choice
to number choice function?
253:06 - Alright, so let's write it up.
253:08 - If choice is equal to
Usain then return, what?
253:19 - Else if choice is equal to Qazi or sorry,
253:24 - me return to else return.
253:29 - Or let's actually just do,
253:31 - else if choice is equal to
Qazi return three, okay.
253:38 - So that will essentially do what we want.
253:41 - If I try to print here and go,
253:44 - print choice to number and give it Qazi.
253:50 - Right, let's see what
it does, let's run it.
253:54 - You can see that it gave us back three.
253:56 - That's exactly what we expected
253:57 - 'cause I came in third.
253:59 - Now what if I gave it me,
254:01 - which is gonna be you when
you're writing this function.
254:03 - It's gonna say two, okay
that's exactly what you want.
254:06 - And let's say we give it
Usain, it says one, okay.
254:12 - So it's working correctly,
that's exactly what we want.
254:15 - But is there an easier way
we can do this function?
254:19 - So there's if, else if
and else if that we wrote?
254:22 - Is there a way we can make it easier,
254:23 - perhaps using dictionaries
that we learned earlier?
254:27 - Remember, we have choice
and that's associated with,
254:32 - or sorry, we have this thing here.
254:33 - And each choice associated
with the value of a number.
254:38 - So this should automatically
be telling you guys
254:41 - like, hey, maybe there's
a key value relationship.
254:44 - If you put in one you get back Usain.
254:46 - Or if you're if you put
in Usain you get back one.
254:48 - If you put in me you get back two.
254:50 - If you put in Qazi you get back three.
254:52 - So what we can essentially do
254:53 - is rip this whole thing
down and replace it
254:56 - with the data structure that is,
254:59 - that does it for us, right?
255:02 - Let's call it dictionary.
255:04 - So I'm just gonna say choices,
255:10 - what should I call it?
255:13 - Let's call it race
dictionary for now okay.
255:16 - To keep things simple.
255:17 - And I'm gonna say if given Usain,
255:23 - I'm gonna write it on,
255:25 - actually, let's just keep it simple.
255:27 - Given Usain return,
255:30 - Usain should be the key and
the value should be one.
255:34 - Me, key is me value is two.
255:39 - And then Qazi.
255:40 - Key is Qasi, and what is the value?
255:44 - Value is three.
255:47 - So then we can say return
race underscore dictionary.
255:51 - And we can index it by the
choice that's given to us.
255:55 - So for example, if you put in Usain here,
256:00 - it's gonna look through
this dictionary, right?
256:03 - What's the way the dictionaries work?
256:05 - Its dictionary, you index it by its key.
256:11 - And then it returns the
corresponding value.
256:14 - So here race dict is the dictionary,
256:18 - we index it by the choice.
256:20 - So if the user gives us
Usain will put Usain here.
256:24 - And that will return,
256:25 - this whole thing will
evaluate to the value.
256:27 - So in this case, one.
256:30 - Same thing that will happen
with the rest of them, okay.
256:33 - So hopefully that makes sense.
256:35 - And can we simplify this?
256:36 - Yes, we can.
256:37 - Do we really need a variable
256:38 - that we're just gonna
use like a second later?
256:42 - Not really.
256:45 - And it doesn't make our code any dirtier
256:47 - or any harder to read.
256:48 - So in this case, you can
just do this and it's done.
256:52 - You can assign it a name
256:53 - if the dictionary was really big.
256:54 - But here dictionary is pretty small,
256:56 - we don't need to use
an extra variable here.
257:00 - So I think this is good.
257:01 - And let's use the same idea here.
257:04 - And we can say return, if
given one return Usain.
257:08 - By the way, let's test it, okay,
257:10 - that's a good thing to do.
257:12 - Let's run this here by hitting run.
257:17 - And let's see what we
get, and we get back one.
257:19 - That's what we expected.
257:20 - Let's put it in me here,
let's see what happens.
257:22 - And we get back two.
257:24 - What happens here, we
parse in me to the choice
257:27 - to number function.
257:28 - So you really parse in me like this.
257:31 - It goes in, it indexes this
dictionary by me, right?
257:39 - And me has a value of two.
257:41 - So this whole thing evaluates
to two when it's done.
257:45 - Okay, let's hit run, and it
returns two, so it's working.
257:50 - And let's do the same thing
for number two choice.
257:52 - Return whoops,
257:55 - return to,
258:04 - or return me.
258:06 - And then three should return Qazi, right.
258:12 - And we index it by the number
258:13 - 'cause this time number is the key, okay.
258:17 - So okay it looks good to me.
258:20 - Let's uncomment the line 67.
258:23 - And see after, does it
parse all these tests
258:26 - I've written here, right?
258:28 - Does it given the same return one,
258:30 - given one return Usain and all that.
258:32 - Let's run it and it
parsees all the test cases.
258:35 - And on the right hand side,
258:36 - you see it made a nice little green circle
258:39 - with the turtle, said good job.
258:41 - And so we are done.
258:45 - Okay, awesome.
258:49 - If you guys didn't get it, no worries.
258:51 - If the dictionary thing
was new to you, perfect.
258:53 - This is all supposed
to be new for you guys.
258:56 - Now, these concepts are
gonna be directly applied
258:59 - in the next video where I'm gonna have
259:01 - the tic tac toe project for you guys.
259:04 - I have the notes for it, I
have the solution guide for it.
259:07 - And I will help you guys build
the whole thing on your own.
259:10 - And it will be something
that you can proudly share
259:13 - with your friends, family, whoever.
259:17 - Okay your girlfriend,
boyfriend doesn't matter.
259:20 - It's gonna be something
that's gonna actually work.
259:22 - It's gonna have a link that you can share,
259:24 - and it'll directly be playable.
259:26 - So I hope you guys are
excited for the next video.
259:28 - And I'll see you guys there.
259:31 - (upbeat music)
259:35 - Hey guys, what's up?
259:36 - This is Qazi from cleverprogrammer.com
259:38 - where you learn to code smarter.
259:41 - Let's jump right into it today, all right.
259:45 - We're gonna be building
the tic tac toe project.
259:48 - I am so excited for this one.
259:51 - I've been building up to this for so long.
259:54 - And now you guys are gonna
be on the same page with me.
259:57 - And we're gonna build
the tic tac toe game.
259:59 - All right so let's just get started.
260:02 - So let's come here and
before I start talking
260:04 - about any of this, let's just start off
260:06 - with what it's gonna look like
260:07 - when you're done building it, okay.
260:09 - And you're gonna be able to
share this with everybody.
260:11 - So it's gonna be pretty simple.
260:13 - And here's what's gonna look like, right.
260:15 - Not the fanciest thing you've ever seen.
260:17 - But hey, it's something.
260:18 - So you have three choices
rock, paper, scissors
260:22 - and you're playing against
the computer, okay.
260:25 - So let's say we picked rock,
the computer pick paper,
260:28 - what just happened?
260:30 - Well, paper beats rock and so if you look
260:32 - at the computer score, he got one
260:34 - and you still have zero.
260:35 - You, my friend are not a very good
260:37 - rock, paper, scissors player.
260:38 - Let's try again, all right.
260:40 - We have to beat the computer.
260:42 - So let's go, rock.
260:44 - It's a tie, that's pretty good.
260:46 - I think that since the
computer already picked rock,
260:49 - he's probably gonna
pick scissors next time.
260:53 - So to prepare for scissors,
I'm gonna pick rock.
260:56 - Boom, okay so that was pretty awesome.
261:03 - But that was not planned.
261:04 - The game is not rigged at all.
261:06 - It's supposed to be random.
261:09 - But I'm pretty good at
reading random computers.
261:12 - Let's see, he picked scissors.
261:13 - So maybe he's gonna pick scissors again.
261:15 - Let's stick with rock.
261:16 - No he picked rock.
261:17 - Paper, okay so he picked
rock we picked paper,
261:22 - we won we have a score of
two, computer a score of one.
261:26 - We can keep on going forever,
but I'm gonna end it for now.
261:30 - Okay so now let's talk
about the actual project
261:33 - and what you need to do to get it to work.
261:37 - As you can see, here, I have hidden
261:40 - these functions from you.
261:41 - So choice to number, number to choice.
261:44 - Random choice number and choice result.
261:47 - Those are the only four functions
261:49 - that you need to complete
261:50 - in order to complete this entire project.
261:53 - Everything else I have done for you.
261:56 - So you don't need to touch anything else.
261:59 - Okay you pretty much just need to complete
262:01 - those four functions.
262:03 - And when you're done completing them,
262:04 - your entire game will run.
262:07 - Another thing I've done to help you out
262:09 - is I've added some tests.
262:10 - So if you uncomment line
73, this line right here
262:16 - and run it and if your
functions parse the test
262:19 - then most of your functions are correct.
262:21 - Some of the functions it's
hard to write tests for.
262:24 - For example, random computer choice.
262:26 - If you're randomly generating choices,
262:28 - it's kind of hard for me to test it.
262:31 - All right, so that one,
you kind of just have
262:33 - to do it correctly.
262:36 - All right, further
explanation of the project.
262:38 - So you have choice to number function.
262:41 - What does that want?
262:42 - Well, let's say I give you a rock,
262:44 - you should give me back one.
262:45 - If I give you paper you
should give me back two.
262:47 - If I give you scissors, you
should give me back three.
262:50 - All right, what's the number
of choice functions job?
262:53 - Okay, well, if I give
you a number like one,
262:56 - you should give me back rock.
262:57 - If I give you two you give me back paper.
262:59 - And if I give you three,
you give me back scissors.
263:01 - Okay, so both of those
functions complement each other.
263:05 - Okay, they're kind of the
inverse of each other.
263:07 - Now, let's talk about random
computer choice function.
263:11 - What does that do?
263:13 - Well, the computer needs to be able
263:15 - to generate random choices, okay.
263:17 - So we need to use a random module
263:20 - that I've imported on line five,
263:22 - I have also added some hints for you guys
263:24 - on how to use the random module.
263:26 - So here if I show you guys the problem,
263:30 - I have added some hints for you here.
263:32 - Okay, so random computer choice.
263:34 - So I want you to look up
or random that choice does
263:37 - and how to use it.
263:40 - In my solution video,
263:41 - I'm gonna go through the whole solution.
263:43 - So if you can figure it out,
263:44 - you're gonna learn anyways.
263:45 - But I want you to be able to exercise
263:47 - some researching skills and develop
263:49 - your programmer's ability
263:52 - of like solving things by researching it
263:55 - on Google or Stack Overflow
263:56 - or something like that, all right.
263:58 - Because that's important.
263:59 - A lot of the times I'm on Stack Overflow,
264:01 - Google trying to figure out a problem.
264:02 - So figure out how to use random.choice
264:06 - to make the computer randomly choose
264:08 - between rock paper and scissors.
264:14 - Okay, let's go,
264:16 - so it is, just to give you a hint,
264:18 - it's gonna be a one line solution.
264:19 - Like return random.choice,
264:22 - and then parse in rock, paper, scissors,
264:24 - computer is gonna return
one of those every time.
264:27 - Okay, now, the choice result function
264:32 - is gonna be the meat of the project.
264:35 - That's gonna be every,
264:36 - the whole logic of the project
is pretty much gonna be here.
264:40 - So what's going on here?
264:42 - Well, you have a computer
score and human score,
264:45 - which is up here.
264:46 - The global variable
maybe I'll explain that,
264:49 - I'll explain that to you guys
definitely in the solution.
264:51 - But for now, let's not
worry so much about it
264:53 - just focus on not removing these lines.
264:58 - When you come down here and
you start coding this up,
265:01 - well, essentially what
you're gonna be doing
265:02 - in choice result is you're
given the human choice,
265:04 - and you're given the computer choice.
265:07 - So using that you figure out who won.
265:09 - So for example, if human choice was rock
265:13 - and computer choice was paper,
265:15 - well, paper beats rock.
265:18 - So in this case, computer should win.
265:21 - So actually this should actually be this.
265:29 - Computer score is equal to, like that.
265:35 - Okay, so I'm sorry, I had it wrong.
265:37 - I'll fix it up.
265:38 - When you guys get the link,
you'll have the fixed version.
265:41 - So since paper beats rock,
265:42 - computer score should
be incremented by one.
265:44 - Where's computer score?
265:45 - Is right here.
265:46 - Human scores also right here, okay.
265:50 - So then you can check,
265:52 - hey if computers choice
was, I don't know whatever,
265:57 - then you can increment based on that.
265:59 - But what if it was a tie?
266:00 - What if they both had the same thing?
266:02 - Well, in that case, you don't
have to do any incrementing,
266:05 - you can just print tie,
266:06 - or you don't even have to
check for that condition, okay.
266:10 - So that's the simple answer to that.
266:13 - How are you gonna do choice result?
266:15 - Entirely up to you.
266:16 - I would suggest doing
bunch of if, else if,
266:19 - if type of statements, okay.
266:21 - So you're gonna have a
bunch of if conditions.
266:23 - You're gonna check rock against
paper, paper against rock.
266:26 - What if human picks this
and the computer picks that?
266:31 - So you get to exercise some
of your if then statements.
266:34 - There is a clever way of doing it,
266:36 - which I will explain to you
guys in the solution video.
266:40 - But for now just use your if
266:42 - then type of statements to do this, okay.
266:45 - Choice to number number two choice,
266:47 - I've kind of give you guys
an example of how to do it.
266:52 - So you guys should be good on that.
266:55 - And other than that I think you guys,
266:57 - let's see what else I
need to explain here.
267:01 - Test all, yep, just uncomment this
267:03 - and test some of your functions.
267:05 - If you give choice number,
if you give it rock
267:07 - it should return zero.
267:08 - If you give it paper should return one.
267:10 - And on the other hand, vice versa.
267:13 - Pretty much number to choice,
267:15 - if you give it zero, it gives you rock.
267:16 - If you give it one, it
should give you paper.
267:19 - Everything else helps you,
267:22 - all this stuff at the bottom
is it helps make the GUI.
267:25 - The graphical user
interface of the project.
267:28 - And it wraps up your logic in
267:31 - and makes it a part of the game.
267:33 - Okay so here's your code is not completed
267:36 - and you try to run the game.
267:38 - You're gonna get back some stuff
267:40 - that doesn't make much sense.
267:42 - Okay, so it's not gonna make sense.
267:46 - But once you complete
all of these functions,
267:48 - the whole game is gonna work perfectly.
267:51 - And and you're gonna
have essentially the game
267:54 - and it's gonna look like this.
267:56 - Okay, all right guys,
267:58 - hopefully that explains the entire project
268:00 - and what you need to do.
268:01 - Hopefully, you have all
the tools that you need
268:04 - to put this together and make the game.
268:08 - If you make the game,
please put your links,
268:10 - share your links using code sculptor.
268:13 - You can click this button
here that says save.
268:15 - And when you hit save,
268:17 - it generates a new link
for you at the top, okay.
268:20 - So if I were to bring this guy down,
268:23 - you can see it brought this link for me.
268:25 - And you can go to that link,
268:27 - and then see the entire code
or play out the entire code.
268:30 - Okay, sorry about that,
268:32 - let's just bring this guy back at the top.
268:36 - All right, so that's how that works.
268:38 - You generate that link post
it in the comments below.
268:42 - Some of the things I want
you guys to watch out for
268:44 - is if you hit command or refresh,
268:47 - it just removes the whole thing.
268:50 - You have to be careful
because CodeSkulptor
268:52 - is in the browser and it
doesn't save your code.
268:56 - So if you hit save
it'll give you that link
268:59 - and that link will help you.
269:00 - But if you don't save and you hit refresh,
269:02 - then all of your code
just kind of goes away.
269:04 - So watch out for refreshing randomly.
269:09 - And yeah, so save continuous, save a lot.
269:14 - Okay save constantly and then
copy that link constantly.
269:18 - So you can you can have that link
269:20 - just in case something bad happens, okay.
269:23 - And maybe even put this
code locally gives you
269:26 - a download button.
269:27 - So every few hours you're working on this,
269:29 - maybe hit the download button
269:31 - so you can download it locally.
269:33 - That way, you're not in the
risk of losing it, okay.
269:38 - After this, we're gonna work
269:40 - on some other really cool
projects, I have that in mind.
269:43 - But for now focus all your
energy on rock paper scissors.
269:47 - Let's get it done.
269:48 - Post your codes below,
post your links below.
269:50 - I'll have the notes to this problem below.
269:53 - And I'll have this solution
to this problem below
269:55 - if you're watching it on YouTube.
269:56 - Okay, if you're not watching this on,
269:59 - if you don't wanna watch this on YouTube
270:00 - and do it directly on my website,
270:01 - cleverprogrammer.com, go ahead
and enroll in that school.
270:05 - And there you can keep track
of all of your progress.
270:08 - And you can go there and all the resources
270:10 - will be there readily available.
270:12 - Alright guys, good luck,
270:15 - and I'll see you guys in the next video.
270:17 - (upbeat music)
270:21 - Hey guys, what's up?
270:23 - This is Qazi from cleverprogrammer.com
270:25 - where you learn to code smarter.
270:27 - So here we are finally finishing
up our rock paper scissors.
270:33 - Thank God, I can say it correctly finally.
270:36 - I'm so sorry, I've been calling it
270:37 - tic tac toe the whole time.
270:39 - I don't know why I keep calling it that.
270:41 - But hopefully this entire video,
270:43 - I'll say rock paper scissors.
270:44 - And if I said tic tac toe,
270:46 - I'm probably talking
about rock paper scissors.
270:48 - So with that disclaimer out of the way,
270:51 - let's go ahead and talk about the solution
270:53 - of rock, paper, scissors.
270:55 - Hopefully you guys got to try it.
270:57 - And yeah, so let's just get right to it.
271:02 - So here we have the game open.
271:04 - And I have the solutions
here for you guys.
271:08 - Now, having a solution
here for you guys is great.
271:11 - But what I wanna do is I wanna walk you
271:13 - through it one step at a time, okay.
271:17 - So let's go ahead and walk through it.
271:21 - All right, choice to number.
271:23 - So if you did the previous problem,
271:26 - the Usain Bolt video that I made.
271:28 - Which is essentially you get a person
271:31 - and you have to number them
and which place they get.
271:34 - So if I give you Usain,
you give me back one.
271:36 - If I give you me, you give me two.
271:37 - I give you Qazi you give
me back three, right.
271:40 - So let's apply that same
thing directly here.
271:45 - So given a choice, we wanna
convert it to a number.
271:48 - Okay, so let's say that
we were given a choice.
271:52 - Whoops, sorry about that.
271:56 - Okay, so let's say we were
given a choice like rock,
272:01 - you wanna give me back zero.
272:02 - If you're paper, you
wanna give me back one.
272:04 - Now certainly, you can say
if choice equal equal rock,
272:11 - right choice is coming from
here, which is the function.
272:15 - And if choice equal equal rock,
272:18 - then return zero, you
can certainly do that.
272:21 - But a better way to do it
272:23 - is since we know your relationship
272:24 - between two things, we can use
the key value pair technique.
272:28 - So the way that I would write the solution
272:31 - is I would say RPS dictionary.
272:34 - And I would say if it's
rock, give me zero,
272:38 - if it's paper, can't type.
272:45 - Paper, goodness, all right, here we go.
272:49 - And if it scissors, give
me back two all right.
272:54 - And then what we wanna do
is we wanna say return,
272:57 - RPS dictionary and index it
by the choice parseed in.
273:01 - So for example, if choice is rock,
273:04 - it goes to this
dictionary, RPS dictionary,
273:08 - it indexes that by rock.
273:10 - So it goes and looks at this key,
273:11 - and it returns a corresponding value.
273:13 - So this whole thing evaluates to zero.
273:17 - Okay, so that's essentially the idea.
273:19 - And since we're declaring
a variable right here,
273:22 - and then using it right down below,
273:24 - and it's, we don't really need
to define that as a variable.
273:29 - And we can just put it here directly.
273:31 - but just for reading purposes,
273:32 - and making it easier
for you guys to look at.
273:34 - I'll leave that up there no problem.
273:39 - Again I can do the same
technique for this one.
273:44 - Instead of having a bunch of
if, else if type of conditions,
273:48 - we can have this scenario here.
273:51 - And I wanna reverse the
question keys and values here.
274:13 - Okay, so if you give me
zero, you get back rock.
274:18 - If you give me one, you get back paper.
274:20 - If you give me two, you get back scissors.
274:23 - So that's essentially
what we're doing here.
274:26 - And this function expects a number
274:28 - between zero and two,
including zero and two.
274:33 - This is pretty straightforward.
274:35 - It will evaluate to the
rock paper scissors, okay.
274:39 - This is why the function
is called number to choice,
274:41 - it takes a number and
converts it to a choice.
274:44 - All right, how do we randomly
generate the computer choice?
274:49 - Well that's
274:52 - thanks to the random module
that we imported here,
274:55 - we can use that to
actually do this problem.
274:57 - We can say, return random.choice.
275:02 - And random.choice takes
in some input like this,
275:05 - like a list.
275:06 - So we can go rock, paper, and scissors.
275:12 - Now make sure your spelling
is correct everywhere.
275:14 - Because if you are not
consistent with your spelling
275:17 - of scissors, or rock or paper,
275:19 - your program might not work.
275:21 - Because it's expecting
specifically those things, right?
275:24 - If I open up a terminal, and
I go and open up Python here,
275:30 - and we checked what that does, right?
275:32 - So let's do an import random.
275:35 - And let's do a random.choice
275:37 - and parse it a list of
things like A, B, and C.
275:45 - Let's see what it does,
and let's keep running it.
275:51 - So hopefully, you're getting the idea
275:52 - that it randomly pick something,
275:55 - it's not just picking one thing,
275:56 - it's randomly picking
between those three choices.
275:59 - So just like that, you wanna
do rock paper, scissors.
276:01 - Because when the computer is playing,
276:02 - he's randomly picking between rock,
276:04 - paper and scissors, right?
276:08 - So this is a simple one line solution.
276:10 - Now this is where the
meat of the project is.
276:14 - And this part is pretty tedious,
276:17 - 'cause you have to write a lot of if else,
276:20 - if else, if else type of conditions.
276:23 - I'm gonna show you a
cool way to byparse that.
276:25 - Okay, so I have example code here for you.
276:28 - And this should be
pretty self explanatory.
276:31 - Okay, if so you parse this function,
276:34 - human choice and computer choice.
276:36 - If human choice was rock
276:38 - and computer choice was paper,
well then paper beats rock
276:42 - and you increment computer score by one.
276:44 - The reason why we're
saying global variable
276:48 - is because we wanna specify
276:50 - we're using these variables
here, outside the functions,
276:54 - and those are the ones we
want to increment, okay.
276:58 - Those are the ones we want to change.
277:01 - If you don't do the global variable thing,
277:03 - and then you change that,
277:05 - you're only going to
change the computer score
277:08 - within the function.
277:09 - But once you leave the function,
it's gonna be the same.
277:12 - So for example, if I don't use global
277:15 - and I do this computer
score plus equals one,
277:18 - inside of the function it might,
277:21 - computer score might be one, okay.
277:24 - Computer score might be
one inside of the function.
277:31 - But when you like go
outside of the function
277:33 - and you print computer
score, it'll say zero.
277:37 - Okay, so by saying global,
277:41 - we're saying, hey that's the
exact variable we wanna use.
277:43 - And if I change it, I know what I'm doing.
277:45 - I wanna change it everywhere.
277:47 - Okay, generally, you
wanna avoid using globals.
277:51 - But for now, I want you guys to,
277:54 - just use globals, it's fine.
277:58 - The reason why I say you wanna avoid that
278:00 - is 'cause then you can have like,
278:01 - if you have really big pieces of code
278:03 - with thousands of lines
or hundreds of lines,
278:08 - you don't want global to be changing,
278:10 - like between two function,
278:12 - like between if you have two,
three different functions.
278:16 - If they're changing it,
if they all have access
278:19 - to the same variable, they may be changing
278:21 - it in a way you don't want.
278:22 - So you might wanna give
all of the functions
278:25 - its own separate variable.
278:26 - So they don't like have a
collision with each other.
278:29 - Okay, that's kind of the reason.
278:32 - So, okay, that's a little
bit behind choice resolved,
278:36 - and what it takes in as inputs
and how we can use that.
278:41 - But instead of coming up with
a lot of if else's statements,
278:45 - here's a nice little
solution that we can do.
278:49 - So essentially we can say, hey if
278:53 - human choice.
278:58 - It's a weird trick, so
sometimes I have to see
279:00 - if I can remember it as well.
279:03 - If you take the difference
between human choice
279:05 - and the computer choice.
279:10 - And this is where the choice
279:12 - to number functions come in handy,
279:14 - because what we wanna do is we wanna take
279:16 - the numerical difference,
279:18 - you can't take a difference
of strings, right.
279:20 - You can't do hello, or
rock here minus paper,
279:26 - you can't do that.
279:27 - So we wanna make sure
that these are numbers,
279:30 - how can we do that?
279:31 - We can say human number is equal to
279:39 - let's call our function,
279:42 - choice to number function.
279:45 - And since we already
have the human choice,
279:47 - we can just parse it in that human choice.
279:49 - And will return it as a number.
279:51 - So for example, if the human was rock,
279:54 - it will get thrown into the
choice to number function,
279:58 - and that will convert it correctly.
279:59 - And so this whole thing
will evaluate to zero.
280:03 - Okay so let's leave it like that.
280:06 - And we're gonna say computer number
280:09 - is equal to choice to number function,
280:12 - and give it the computer choice.
280:18 - Okay, pretty simple.
280:22 - So we have the computer
number, human number.
280:24 - Now we can take the difference.
280:26 - We can say human number,
minus computer number.
280:35 - And if they're, and if
you take their difference,
280:39 - and you modulo it by three
and you get back one.
280:43 - If you mod something by three,
280:46 - you'll create a world where
the only possible numbers
280:49 - are zero one and two, okay.
280:52 - So for example, just to play,
280:54 - sometimes playing around with
this is a very good idea.
280:57 - Instead of doing all this
theoretical knowledge,
281:00 - sometimes just play around with it.
281:01 - So like let's do zero mod three.
281:05 - Let's do one mod three.
281:08 - Let's do two mod three.
281:10 - Let's do three mod three.
281:12 - Let's do four mod three.
281:15 - Let's do 101 mod three.
281:18 - Let's do some random number mod three.
281:23 - And as you can see here,
281:25 - the only numbers that we're getting
281:27 - are zero one and two.
281:28 - You're creating a world of
only zero, one and two numbers.
281:32 - So modulo lets you wrap things around,
281:34 - which is kind of nice.
281:36 - Because we only have,
281:37 - we have rock paper and scissors.
281:40 - So we wanna be able to go zero, one, two,
281:43 - zero being rock, one being
paper two being scissors.
281:46 - And then the next one,
the next number we want.
281:50 - Instead of it being three,
281:52 - which is not in our list,
we want it to be zero again.
281:55 - So we want it to essentially
be like zero, one, two.
281:59 - Zero, one, two
282:00 - Zero, one and two.
282:02 - So zero corresponds to rock,
one corresponds to paper,
282:05 - this corresponds to scissors.
282:07 - Then this corresponds to rock,
282:09 - this to paper, this to scissors.
282:10 - Okay, this ensures that
we never get a number
282:13 - that doesn't map to one
of our existing things.
282:16 - Okay, like essentially,
what we don't want is this.
282:20 - 'Cause when it tries to
look up three and four,
282:23 - and five and six, it won't get anything
282:25 - in our database or
dictionary that we have.
282:29 - So we're gonna say take the difference
282:31 - and mod it by three.
282:32 - We know for sure that
we're gonna get some number
282:34 - like zero, one or two.
282:36 - If the number is one then computer wins.
282:40 - So basically, what we
say is computer score
282:44 - plus equals one.
282:45 - Or you can write explicitly like computer
282:49 - underscore plus one.
282:55 - We can say, else human score
283:02 - is equal to human score plus or plus one.
283:08 - And we need to have one last condition.
283:12 - That would be what if
they have the same choice?
283:16 - So if human number is the
same as a computer number,
283:23 - then maybe we just wanna
print tie and do nothing else.
283:28 - Okay we don't want to
increment any scores.
283:31 - We don't wanna do anything,
283:32 - we just wanna print tie, that's it.
283:36 - Okay, so yeah.
283:41 - Alright, so this trick is a little weird.
283:44 - But essentially, what it allows you to do
283:46 - is it takes care of all
the possible scenarios.
283:49 - Instead of you having to write
nine different conditions
283:52 - or six different conditions.
283:54 - I think it would be six
283:55 - because you have three to three factorial.
283:57 - So instead of writing six
different possible situations,
284:01 - like rock versus paper,
paper versus scissors,
284:04 - scissors versus rock
284:05 - in writing all those if else conditions,
284:08 - this allows you to write,
284:10 - like capture it all in
just these three lines.
284:15 - The logic, I put some
notes here at the bottom.
284:18 - So you can kind of understand
284:19 - how the logic of it works, okay.
284:21 - So let's say that zero is rock,
284:25 - one is paper and two scissors.
284:28 - If you do rock minus scissors,
284:31 - mod three and check if it's equal to one,
284:33 - essentially what happens is
rock is zero, scissors is two.
284:37 - Zero minus two evaluates to negative two.
284:40 - Negative two, mod three,
gives you back a one.
284:47 - As you can see here on
this left hand side, okay.
284:51 - So if I did negative two mod three,
284:56 - you get back a one, okay.
284:59 - And one equals one.
285:01 - So it goes rock wins.
285:04 - And it's true rock would win.
285:05 - Even if you just visually look at it.
285:08 - Then we have the scenario
with paper versus scissors.
285:12 - So paper is one and or actually,
285:17 - this should be scissors here, I'm sorry.
285:20 - So paper versus scissors.
285:23 - So you have one minus two, right.
285:24 - Paper is, one scissors is
two, as you can see here.
285:28 - One minus two mod three, let's
check if it gives us one.
285:32 - Two equal signs mean,
check if it's equal to one.
285:36 - Then one minus two.
285:40 - That gives us a negative one,
285:46 - right, this gives us a negative one.
285:49 - We mod it by three and negative
one, mod three gives us two.
285:54 - We check if two equals one.
285:56 - Since two does not equal one,
285:58 - we give the win to the other side.
286:00 - So we give the wind to
the right hand side.
286:03 - In this case, the right
hand side is computer
286:07 - and the left hand side is
the human choice, okay.
286:11 - So if the mod is ever equal to one.
286:19 - Then essentially what we're
saying is that the human wins.
286:23 - And if the mod is not equal to one,
286:26 - then we can say that
the computer wins, okay.
286:29 - Let me just check this against
my solution code that I have.
286:36 - And yeah, that's kind of what it says.
286:37 - It goes, Hey, if it's equal to one
286:39 - the computer wins,
otherwise, the human wins.
286:42 - Okay, so let's go back up here.
286:46 - This looks good, this looks good.
286:51 - And yeah, I think think most
of the code here looks good.
286:57 - Now, let's first test our code.
287:00 - Let's run this guy here.
287:05 - What's the error?
287:07 - Oh, we would parse a number, right.
287:10 - 'Cause that's our argument now.
287:13 - Okay, so we parseed all the test cases,
287:15 - let's see if the game runs.
287:19 - Okay you picked paper,
the computer picked rock,
287:21 - so you win, perfect.
287:23 - We both picked rocks, it was
a tie, let's do scissors.
287:31 - Yep, scissors beats paper.
287:35 - Okay, so there you guys go.
287:38 - The game is now working.
287:41 - I have shared the link with you guys.
287:42 - So you can actually go play it there.
287:44 - And if you wanna try again,
now just try to solve it.
287:49 - After looking at my solution,
287:50 - see if you can now try to solve it
287:52 - without looking at the solution.
287:53 - So I'll half the project, the
problem there for you guys.
287:59 - So you guys can actually
try the problem on your own.
288:02 - And I'll also have the
solution there for you guys.
288:05 - And you guys can just hit
save at the top left here.
288:09 - And then it'll give you a link.
288:11 - And you guys can just share that link
288:12 - with anybody that you want.
288:14 - And so then you can share this
288:15 - with your friends, family, whoever.
288:17 - Okay, guys, hopefully that explains it.
288:21 - You guys had fun doing
rock papers and scissors.
288:23 - And the next project.
288:25 - What I would like to do is
build a text messaging app.
288:30 - So we'll have an app
which can send out texts
288:33 - to other phones, all right.
288:37 - All right, guys, take
care Have a good one.
288:38 - I'll see you guys in the next video.
288:41 - (upbeat music)
288:44 - Back, so here's another
cool pattern using the list
288:49 - that I wanna share with you.
288:50 - So let's say we have a
list of numbers, okay.
288:53 - And what we wanna get effectively
is something that squares.
288:56 - So the result should
look like one squared,
288:59 - so that's just one two
squared, that's four.
289:03 - This three over here
squared, that's just nine.
289:06 - That four over there squared, that's 16.
289:08 - Five squared is 25, six squared is 36.
289:11 - And I think you get the idea.
289:14 - So we would want to call
that list to squared list.
289:18 - Or we can say squared numbers, right.
289:23 - Say this list is called numbers.
289:25 - So how do we do that?
289:27 - How do we turn this list
289:29 - into just all of these numbers squared?
289:33 - Let's figure it out.
289:35 - One way you would do it is you
could type it out manually.
289:38 - But that's gonna be a lot of work, right?
289:39 - That would mean that you would
do squared numbers.append.
289:45 - Append is a method that
allows you to add to the list.
289:48 - So here we have an empty list.
289:49 - And since we wanna add something to it,
289:51 - let's just show you what I mean, okay.
289:53 - Let's say we wanna add
a banana in there, okay.
289:56 - And let's print out squared numbers.
289:59 - When I run it, you can see
that I've now added a banana.
290:03 - Let's throw something else in there.
290:04 - Okay, let's throw apple.
290:07 - Okay let's run through
it and you can see now
290:09 - banana and apple are added.
290:10 - Okay, so append just simply add something
290:12 - to the end of the list hence append.
290:15 - Okay, so going back here.
290:19 - What we wanna do is we
want to essentially append
290:23 - each of those numbers squared.
290:25 - So how can we do that?
290:26 - Well, we leverage off what
we learned in our last video.
290:29 - So we do for number in numbers,
290:31 - this is now going to give us,
290:33 - number is gonna be one the first time.
290:34 - Two the next time, three the third time,
290:36 - and so on and so forth.
290:38 - And what do we wanna do?
290:39 - We wanna do squared numbers.append number,
290:43 - and so we're appending now the number.
290:46 - So we're, basically every
time we go to the loop,
290:49 - we add one the first time,
290:50 - then we add to from this
list and we add three.
290:53 - But we wanna actually add
the squares of those numbers.
290:57 - So we want to do this.
290:59 - And now let's check out what
squared numbers looks like.
291:04 - And that's it, okay, simple as that.
291:07 - Very good pattern to remember.
291:10 - And it works, okay.
291:13 - So play around with it,
291:14 - see if you can do something like cubing it
291:17 - or change up this list
and see if you can do
291:20 - something like dividing it
in two every single time
291:23 - and then a pending that.
291:25 - So you can call it like half numbers.
291:27 - Yeah, practice it out, run this code,
291:30 - I'm going to add the link of this in the,
291:33 - below the video or above the video.
291:35 - So you guys can actually go directly here
291:37 - and play around with this.
291:38 - All right, guys, thanks for watching.
291:39 - I'll see you in the next video.
291:43 - (upbeat music)
291:47 - Hey, guys, what's up?
291:49 - This is Qazi from cleverprogrammer.com.
291:52 - Let's jump on and talk about tuples.
291:55 - Okay, this is something we did not discuss
291:58 - in our data types yet and we
need to cover this concept.
292:03 - So remember, when we had lists,
292:05 - and you can add things to list
and delete things from lists
292:08 - and lists are super nice.
292:10 - So list would be something like groceries
292:14 - and if you said,
292:15 - okay let me turn on this one thing
292:19 - so it does not keep bothering you guys.
292:24 - Okay, there we go.
292:27 - Now remember list was like groceries
292:30 - and you might have a banana
292:35 - and apple, groceries, that's funny.
292:41 - Apricot, okay.
292:43 - Well with tuples you can
use them a very similar way.
292:46 - You could have, let's make it something
292:49 - that you can't change, for example.
292:51 - or social security numbers.
293:00 - I mean, you could use whatever you want,
293:01 - but I just wanted to use this one.
293:04 - And it could be some number here.
293:06 - It could be another number right there
293:09 - and then another number right here, okay.
293:12 - So this here is actually called a tuple.
293:16 - Why is it called that?
293:19 - Nobody knows, but it's
wrapped in parentheses.
293:23 - And the main difference
between a list and a tuple
293:26 - is that you can add things to a list
293:29 - and delete things from a list,
293:30 - but to a tuple you can't change it.
293:33 - You can't add things to a tuple
293:35 - or take things out from a tuple.
293:39 - So that's really the key difference.
293:43 - I'm going to go down here
293:49 - and show you okay groceries.
293:52 - We can do .append.
293:55 - Cheese, okay.
293:59 - And if I print out groceries here okay,
294:03 - and you'll see the results of,
294:04 - oh just ran a different file.
294:07 - You can see the results right there.
294:09 - It says apricot, banana, apple and cheese.
294:14 - Because I just added cheese
to it and it shows that.
294:17 - You don't have a method
like append for tuples.
294:21 - So you can't do that for them, okay.
294:24 - This was just a very
basic example of this.
294:27 - Why would you need to use a tuple?
294:29 - Well if you were working with data
294:30 - that you really never want changed,
294:32 - like, maybe you were
storing people's parsewords,
294:35 - you'd never want to,
294:39 - you wanna store them like this,
294:40 - because maybe that's something
294:42 - you might not wanna change, right?
294:44 - Or at least you might want
to make it really difficult
294:46 - for people to change.
294:48 - Even people who are programming
those websites for you.
294:51 - Or if you're programming a
website like that yourself.
294:54 - Just really quickly let me show you
294:56 - where you can actually find this code.
294:59 - So I'm going to actually push
295:00 - this code up for you guys, okay.
295:04 - Let's see here.
295:09 - Add, learn, whoops, Python.
295:17 - Okay, so you guys can
actually go to github.com.
295:23 - Okay and look up my username.
295:25 - So maybe a Clever Programmer.
295:28 - And one thing you can do is go
to users and follow me, okay.
295:33 - But if you can't follow me,
295:34 - just look for Clever
Programmer underscore stuff,
295:37 - this repository.
295:39 - Go to this repository right here
295:43 - and you will see learn Python.
295:44 - Okay, there's the link.
295:46 - If you wanna go directly
295:47 - github.com/clever
programmers/cleverprogrammer_stuff.
295:53 - And in there, you'll see
something called learn Python.
295:55 - Go in there, click tuples.
295:57 - And you can actually see
the code right there.
295:59 - And that's where I will,
296:01 - let me make it a little bit bigger
296:02 - so you guys can see it better.
296:04 - This is where I will try to add the code
296:06 - for you guys from here on out.
296:07 - And you guys can just go ahead
296:09 - and check everything right on there.
296:12 - Okay, hopefully that clarifies everything.
296:15 - All right, that's it.
296:17 - In the next video,
perhaps we're gonna cover
296:19 - a little bit more about mutable
versus immutable data types.
296:23 - So I'll see you guys there.
296:26 - (upbeat music)
296:30 - Hi, so just a little bit
about mutable data types
296:34 - versus immutable data types.
296:36 - Essentially, to mutate or mutability,
296:41 - or mutable essentially means
something that can change.
296:45 - They will use this terminology
in computer programming world
296:48 - to confuse the hell out of you.
296:50 - But essentially, it's just telling you
296:52 - that something can change.
296:54 - An immutable just means something
296:57 - that can not change, okay.
296:59 - So for example, I don't know,
297:03 - some things might be immutable.
297:04 - Like I might consider
maybe my glasses immutable.
297:08 - They're really hard to change.
297:09 - And I mean, it's really hard
to change something about it.
297:12 - And that just what it is, right.
297:15 - And maybe my keys might be
a little bit more mutable.
297:21 - Like I can add things to my key chain,
297:23 - and I can take things away
from my key chain, right.
297:26 - So that might be an example
of something that's immutable,
297:32 - versus something that might
be potentially mutable.
297:37 - Your wallet, you can change things,
297:39 - you can add things to it,
you can take things out.
297:42 - But maybe from a cup,
it's a little bit harder,
297:46 - I might almost consider
it an immutable thing.
297:49 - Maybe you could put something in it.
297:50 - But these are examples
are just to give you
297:53 - something kind of intuition
as to how these things work.
297:57 - But in the real world you have,
298:00 - you're doing data analysis
298:01 - on a lot of sensitive information.
298:04 - You wanna store that as a tuple
298:06 - where it's harder to change it.
298:09 - Or if pairs of things go together,
298:12 - like for example, your name
and your email address,
298:17 - that's something that
goes together as a pair,
298:19 - then maybe you could put
that, you can create a list,
298:22 - that contains tuples inside of it.
298:26 - So the first element of that list
298:27 - could be a tuple containing
my name and my email address.
298:32 - And then the second element in that list
298:34 - could be your name and your email address,
298:37 - and so on and so forth.
298:40 - And the reason why they are tuples
298:42 - is because you can't take
things out from it really easily
298:44 - or you can't add things
to it really easily.
298:48 - So generally stick with a
list until you can figure out
298:52 - when to use both of them.
298:54 - And then start using tuples.
298:56 - But for now, play around
with tuple a little bit.
298:58 - Figure it out, get a sense of it.
299:00 - All right guys, that's it for this video.
299:02 - And I'll see you in the next video.
299:06 - (upbeat hip hop music)