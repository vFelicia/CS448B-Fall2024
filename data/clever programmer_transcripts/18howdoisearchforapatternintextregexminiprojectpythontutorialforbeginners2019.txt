00:00 - - [Aaron] Hey what's up guys,
00:01 - Aaron from Clever Programmer here again.
00:03 - And today, I feel like making
00:05 - an email address text scraper.
00:08 - Just feel like doing
something small and simple.
00:10 - So yeah, let's get right to it.
00:12 - (EDM Music)
00:18 - So if I want to be able to search
00:19 - a bunch of texts and pick
out some emails from it.
00:23 - I'm gonna need something
called regular expressions.
00:25 - In Python this library is just R.E.
00:28 - So I'm just gonna type
import R.E just like that.
00:31 - And a quick explanation
of regular expressions.
00:34 - It's a way to specify different patterns
00:37 - in string and text, in strings and texts
00:40 - so that you can match
those certain patterns
00:43 - and then pick things out.
00:44 - So, an email address follows
00:46 - a very specific pattern right?
00:48 - There's some letters
and numbers and what not
00:50 - and then there's an
ampersand, and then some more
00:52 - letters and numbers and
what not and then a period
00:56 - and then some more letters and numbers.
00:57 - And that's what makes an email address,
00:58 - that's what a human would
recognize as an email address.
01:02 - So, things like these,
if you can pick apart
01:04 - those little rules, like the structure,
01:06 - the pattern of something, some entity
01:08 - in this case an email address.
01:10 - Then we could specify
and describe that pattern
01:13 - with regular expressions.
01:15 - Then once we do that, then we can run
01:18 - the regular expression
over the entire text file
01:21 - and basically just pick out everything
01:23 - in there that matches
the regular expression.
01:25 - In this case, that would
be email addresses.
01:27 - So that was kind of a round about way
01:29 - of explaining it but I hope you got it.
01:31 - I'm gonna go kinda fast
but I'm gonna explain
01:34 - like a little bit here and there.
01:35 - Just smoothing my way up
to the full complicated
01:39 - regular expression that will actually
01:42 - pick out email addresses.
01:43 - So, let's just start
with something simple.
01:45 - First, I'm gonna need some text.
01:46 - So, let's just type out a random string.
01:49 - (keyboard clicks)
01:50 - Literally, a random string.
(Scoffs)
01:54 - Okay, and next we are going to create
01:58 - a regular expression pattern.
02:01 - So, we'll call this variable pattern
02:04 - equals-- call the regular
expression library
02:07 - and there's this function
02:09 - or method called compile.
02:12 - And what compile will do, is it will take
02:16 - a string in that describes our pattern,
02:19 - our regular expression pattern.
02:21 - And then it will create an object in it--
02:23 - an object from it and put it in pattern.
02:27 - So, the first one I'm
gonna do is literally
02:31 - just this, a random string.
02:34 - The reason I'm doing this is because
02:36 - I just want to show you how
regular expressions work.
02:37 - So, if I type in something like this,
02:39 - if this is my actual regular expression,
02:42 - what it's gonna search for in the text
02:44 - is this text exactly.
02:46 - So, since I typed these exactly the same
02:48 - this is actually going to
match this entire thing.
02:50 - And when I run this pattern,
over this text variable,
02:54 - it's going to spit out
this match because this
02:59 - this matches this.
03:00 - Or actually I should say,
this portion of the text
03:03 - satisfies what this pattern says.
03:06 - So, let's do this real quick.
03:08 - I got the pattern and then I believe
03:11 - I need to call--
03:14 - call it result equals--
03:19 - pattern--
03:21 - dot I believe it's search, yeah
03:23 - yeah search and then text.
03:25 - So, what's happening here is I have
03:31 - my text here, so I wanna search my text
03:33 - using this pattern.
03:34 - So this, using this
pattern I'm gonna search
03:35 - for the text and then any results
03:37 - we get back, I'm just gonna stick
03:38 - in this result variable.
03:39 - So, let's run this.
03:41 - I need one more print statement actually.
03:44 - Bare with me I'm doing this on the fly.
03:47 - Alright, print result.
03:50 - So, it will print the results we get.
03:51 - It should print out this,
let's see what happens.
03:53 - I could be completely wrong.
03:54 - (Sighs)
03:56 - Sad truth of life but hey look,
03:59 - so we get this object is actually
04:02 - called a match object.
04:03 - If you don't know what an object is,
04:05 - that's okay, if you do though
04:07 - it's usually just an object
04:08 - and one of it's attributes
is called match.
04:11 - And the match here is actually a string
04:12 - called a random string
because this is what it found
04:14 - in the text string.
04:16 - This is the match it found over here.
04:20 - If you don't know what an object is
04:21 - just forget about it.
04:22 - Basically all you need to look for
04:24 - is it says match equals this.
04:26 - So, anything that is right here,
04:29 - that is in this, like right next to match.
04:30 - That means it found it in the text,
04:33 - so that's pretty cool.
04:35 - Now, let's try something else
04:36 - because that's kinda boring.
04:37 - This is just a static kind
of regular expression.
04:39 - Now, let's change it up.
04:41 - So actually what I wanna do is--
04:43 - you can also use special characters
04:46 - in regular expression so if I put
04:48 - some brackets here and let's say I put
04:50 - A-- or actually A, B or C.
04:53 - This is better for explaining it.
04:55 - If I put it like this, this will mean this
04:58 - entire highlighted portion here
04:59 - is looking for a single
letter that can be either
05:03 - A, B or C, upper case,
it's case sensitive.
05:07 - So, if it can be A, B
or C and nothing else
05:10 - then that's what it takes to satisfy it.
05:12 - So, this is going to
look for a single letter
05:16 - that is either A, B or C
and the very first letter
05:19 - here is a capital A and "A" is A, B or C,
05:24 - so, this is actually
going to be the only match
05:26 - when we run it.
05:27 - Let's just try this, it
should only have "A" here
05:28 - instead of an entire, a random string.
05:31 - Let's run it and hey, look, it worked.
05:34 - The only match is "A".
05:36 - Now, you can actually
put as much as you want
05:39 - in between these brackets.
05:40 - I think you can go as long as you want,
05:41 - I've never actually tried but I mean,
05:43 - if it gets too long it
gets kinda messy anyways
05:44 - and it just--
yeah.
05:47 - It's nicer to try to keep things concise.
05:50 - I could put multiple letters in here
05:52 - like I could also put a lower case "R".
05:59 - A lower case "R" or "D" or "M".
06:03 - So, that's kind of like
three letters at random.
06:06 - Let's try run this and see what pop's out.
06:08 - It should just be "R" and I am correct.
06:11 - The reason it's just "R" is
because the search function
06:15 - it only searches for the first match,
06:17 - the very first match and then it stops.
06:20 - So, it terminates once it
finds it's first match.
06:23 - So, the first match here it can be either
06:25 - an "R" either a "D" or an "M" and this is
06:28 - the first one that matches, an "R".
06:29 - Even though "D" and "M" also match,
06:31 - it found "R" first.
06:32 - And so "R" was considered the match.
06:36 - So, this pattern object got--
06:37 - I mean sorry this result
object got created
06:40 - and its match attribute was set to "R"
06:44 - because that was the first it found.
06:46 - So, as you can assume, I can really
06:48 - put anything I want in here.
06:49 - This would still return "R" because--
06:51 - Actually would it not--
06:53 - Yeah there's no capital "A" in here
06:54 - the only thing that's before this
06:56 - is a capital "A".
06:58 - So, the only time it would change
07:00 - is if I put a capital "A" here
07:01 - and then since capital "A"
07:03 - matches here before "R"
does then capital "A"
07:06 - would actually be the match, and yup
07:07 - that's exactly what I thought.
07:11 - Let's get rid of all this gibberish--
07:12 - Another cool thing you
can do is like I said
07:14 - A, B, C--
07:15 - You can go like that A, B, C, D, E, F, G.
07:17 - You can also just--
Instead of A, B, C.
07:20 - You can also just put in
a range like "A" to "C".
07:23 - Which is the same as A, B, C.
07:25 - Or "A" to "Z" which is
the entire alphabet.
07:27 - In lower case.
07:30 - Also what you can do is actually chain
07:33 - these ranges, so I'm gonna run this
07:35 - and since "R" is the
first lower case letter
07:38 - "R" should be the only match again
07:41 - and yup, just as expected.
07:43 - Alright, we can also add upper case
07:45 - just by going like this.
07:46 - Now it will match all lower
case and upper case letters.
07:49 - So, since capital "A" comes first
07:51 - and capital "A" is within--
07:52 - in this one single letter criteria
07:55 - that we specified here.
07:57 - Then "A" will actually
be printed out and yup,
07:59 - right again.
08:01 - Alright, so I've kind
of drilled this idea in,
08:03 - I might be droning on, boring you guys.
08:05 - But if you're still listening
08:06 - now it gets a little more interesting
08:08 - because if we add a plus sign after this.
08:11 - What the plus sign does, basically says
08:14 - whatever comes before it, I can have one
08:16 - or more of those.
08:18 - So, instead of only
matching a single character
08:20 - like we have now, I can actually match
08:23 - multiple ones.
08:26 - So, I can actually detect an entire word.
08:28 - This time its only gonna be "A" again
08:31 - because it's going to
find the first entire
08:33 - string of one or more letters
of lower case, upper case
08:36 - and in that case its just "A".
08:37 - Actually, let's delete "A".
08:39 - So, now its just random string.
08:41 - So if this is going to
search for one or more
08:45 - lower or upper case
letters as long as I want
08:47 - and then it stops at a
space because this doesn't
08:49 - count as a upper or lower
case letter, this space.
08:52 - So, it's just going to get
these six lower case letters
08:56 - and that will be the very first match
08:57 - and then it will stop.
08:58 - So, let's run this and see what happens.
09:00 - And yeah, random pop's out.
09:02 - So, pretty cool, right?
09:03 - I can also put 0,1,2,3,4,5,6,7,8,9 etc.
09:07 - But I'm just gonna put zero through nine.
09:10 - So now, now what this
will do is it will find
09:13 - anything that has lower case, upper case
09:18 - or numbers in it.
09:19 - One or more of them
until it's not satisfied.
09:22 - So, I could actually
put some capital letters
09:25 - in here now, some random
ones, some numbers
09:27 - and this will still
match because everything
09:29 - in this entire string is
either a lower case letter,
09:31 - is either an upper case letter or a digit
09:35 - from zero to nine as we can see here.
09:38 - It's just when we reach this space,
09:39 - it is not satisfied anymore.
09:41 - So this one or more plus sign thingy,
09:43 - that we applied to this
whole thing in the brackets
09:47 - doesn't work anymore.
09:48 - So, actually this entire
thing will be matched
09:51 - and now what do ya
know, pretty cool right?
09:55 - So, now that you understand
a little bit of those things,
09:58 - I'm going to move on.
09:59 - Once you have these pieces,
let's think about what
10:02 - an email address actually looks like.
10:04 - So an email address is going to have--
10:06 - alright, let's just--
10:09 - Random string--
10:12 - let's just make a random email address
10:14 - so that we can test it out.
10:17 - So, let's just say my name one
two three @ website dot com,
10:22 - looks like an email address to me.
10:24 - So, let's just do that
and then just add some
10:26 - more random text, cause I
am lacking creativity today.
10:32 - But now, we have this entire string here.
10:35 - All this text and we have
one single email here
10:39 - and we wanna pick out this entire thing.
10:41 - So, if we ran this, it would
just return random again
10:43 - because that's the
first match that it gets
10:45 - but we don't want that,
we actually want to
10:47 - pick out this email address
instead of this random string.
10:49 - So, how could we do that.
10:50 - Well, another thing you can
do with regular expressions
10:54 - is actually just use characters.
10:57 - So, if I just put an ampersand here.
10:59 - Just an ampersand,
actually it's going to look
11:02 - for the first match of this
and since there's one here,
11:05 - it's actually going to
pick out this ampersand
11:07 - when I run this.
11:08 - Let's run it and see what happens,
11:09 - yup the match is an ampersand.
11:11 - Let's--
it's at website,
11:12 - if I put at website it's going to search
11:15 - for that exactly and then
it will say at website
11:17 - cause that's the first
time it found at website.
11:20 - But since an email address
has an ampersand in it.
11:22 - This is very easy to, to
build this pattern structure.
11:27 - So, just like before we
had all lower case letters,
11:30 - all uppercase letters, all digits,
11:33 - one or more
11:35 - and then after that, that satisfies like
11:38 - this portion here "my name one two three"
11:40 - and then after as many letters
11:42 - or numbers that we like upper case
11:43 - or lower case in any order that we please.
11:45 - It's followed by an ampersand
like that's what an email has.
11:49 - Okay?
11:50 - And then after the ampersand
what happens again?
11:52 - Yet again we have as many
lower case, upper case
11:55 - or numbers we want.
11:56 - So, we can literally
just copy and paste this
11:59 - same thing, this chunk
and just paste it again.
12:01 - So, you see at this part
here and this part here,
12:04 - are exactly the same.
12:05 - See, its auto highlighting for me,
12:06 - cause they're exactly the same.
12:08 - That's really cool.
12:09 - Okay, then what follows
this website portion?
12:12 - A period.
12:13 - So, we could just put
a period but actually
12:16 - there's this little weird special thing
12:17 - called you need to escape certain,
12:20 - punctuation and symbols
12:23 - when you are coding.
12:24 - If you don't understand, it's
a little bit hard to explain
12:26 - I'm not gonna explain it now
but just take my word for it.
12:29 - To actually detect the pyramid--
12:32 - (Laughs)
A pyramid?
12:33 - A period.
12:34 - We have to put a backslash before it
12:36 - and this is called "escaping the period".
12:39 - So, this is actually considered a unit
12:40 - and this will actually be
interpreted as just a period
12:43 - because this backslash says
12:45 - treat this period as an actual period,
12:47 - instead of doing something else.
12:49 - We would also have to escape this,
12:50 - if we actually wanted to find
a plus sign in our string.
12:52 - We'd actually have to--
12:53 - I guess I am explaining
escape sequences a little bit.
12:55 - But if you put a backslash here,
12:58 - this would actually search for a plus sign
13:00 - literally in the string,
instead of applying
13:02 - this plus sign to these brackets.
13:05 - And the same thing with these brackets
13:06 - if you actually wanted to
search for actual brackets
13:08 - instead of having this weird--
13:09 - This thing here, where you can have
13:11 - like all the stuff inside.
13:12 - You would actually have to put backslashes
13:15 - before each of these brackets
13:16 - to actually check for these brackets.
13:18 - So that's what that
does, that's the reason
13:19 - we need that for the period.
13:20 - So, just take my word for it
13:22 - this will be considered a period.
13:24 - This here is equal to this period here
13:26 - and then again after the
period what do we have?
13:30 - I don't actually think
you can have numbers,
13:33 - I'm not exactly sure of all the possible
13:36 - email address that you can have
13:37 - but I think its only lower case letters
13:40 - and uppercase letters, alright?
13:43 - One or more of course, don't forget that.
13:47 - So, I think that's the
entire regular expression.
13:51 - So, we have as many
lower case and upper case
13:54 - letters and digits as
we want, one or more,
13:57 - followed by an ampersand, again, oops.
14:00 - Again, same thing and then a period
14:03 - and then just some letters after it.
14:06 - So, that is what I believe
14:08 - an email address should look like.
14:09 - Let's try to run this and
see if this gets printed out
14:12 - myname123@website.com, hopefully it does.
14:15 - And run and hey what do you
know it actually worked.
14:20 - Stuff rarely works the first time
14:22 - so things are going flawlessly right now.
14:25 - Relatively flawlessly.
14:27 - But, yeah it seems like it's working
14:30 - it picked out this one email address
14:31 - but one thing I wanna try is
14:33 - what if we have multiple email addresses
14:35 - in the same string?
14:36 - So, let's say--
14:38 - I'm gonna slide this over so
I have a little bit more room.
14:42 - What if we have--
Okay.
14:44 - Your name eight eight eight
14:48 - at company
14:52 - dot net, something like that.
14:55 - That doesn't make sense cause a company
14:56 - is supposed to have dot
com but yeah whatever.
15:00 - So, let's try to run this
and see what happens.
15:02 - It should pick out both of these right?
15:03 - It should say match equals this
15:05 - and match equals this.
15:06 - Let's hit run.
15:08 - Hmm, but match only has
the first email address.
15:11 - But what happened to the
second email address?
15:13 - Well let's try to delete
this first email address
15:15 - and see what happens.
15:19 - Delete, delete, delete,
delete, delete, delete.
15:21 - Feel's good.
15:22 - Destruction.
15:22 - (Scoffs)
15:23 - And now lets run it
15:26 - and as you can see it actually picked out
15:28 - this email address
"yourname888@company.net".
15:31 - Well, what gives?
15:32 - It's seems like the regular
expression that we wrote
15:34 - here is picking out this
correctly but its not--
15:39 - its not picking up both of them.
15:40 - Well the thing is, the search function
15:43 - actually only searches
for the first occurrence.
15:45 - Like I said earlier, it
only searches for the first
15:47 - occurrence of your match.
15:49 - If you actually wanna find all of them
15:51 - you can actually do that
by just calling find all.
15:55 - I really wanna drill this home to you
15:58 - because if you wanna find everything
16:00 - then you need to remember
to use this function
16:02 - instead of the other one.
16:03 - It's a mistake I've made before.
16:04 - So, if we do this now, it should actually
16:06 - pick out both email addresses.
16:07 - Let's give it a shot,
run and as you can see
16:09 - it returns a nice clean
Python list of both matches.
16:12 - Both email addresses.
16:14 - That's cool right?
16:15 - So, it looks like in
literally five lines of code
16:19 - we actually have a email
address text scraper.
16:22 - Pretty cool man.
16:28 - Some other things we
could actually add to this
16:30 - is I believe in email addresses you can
16:32 - actually have periods and
underscores and what not.
16:35 - So, that's literally as
simple as adding a period
16:40 - or a dash or an underscore in here.
16:44 - And I don't think you have to escape these
16:47 - if it's within the
brackets, if it's within
16:49 - the brackets it's already considered,
16:51 - it is what it is.
16:53 - I may be wrong but we'll
test it if it works.
16:55 - I'm pretty sure that's how it works.
16:59 - Same thing here, I don't
know if you can have
17:03 - that here but let's just try this
17:07 - and let's maybe add like--
17:09 - (keyboard clicking)
17:12 - your name is at underscore or actually
17:15 - your dot--
17:17 - or your name dot eight
dash eight dash eight.
17:23 - Now let's see what matches this time.
17:26 - Let's click run and oh,
17:30 - something went wrong.
17:33 - (Keyboard clicking)
17:37 - (Mouse clicks)
17:39 - Maybe we do have to escape the dash
17:41 - let's try that, yeah that's what it was.
17:43 - I think we do need to
escape everything in here.
17:46 - Yup, okay that fixed it.
17:48 - So, you actually do need
to escape everything
17:50 - so now it's actually picking out
17:51 - this email address just fine.
17:52 - The entire thing.
17:55 - Let's change it back to what we had before
17:56 - just to make sure its
still working as expected.
17:59 - Your name dot eight dash eight dash eight.
18:03 - Run and it looks like it's
picking out the entire thing.
18:06 - Pretty cool guys, pretty cool.
18:07 - So, yeah you do need to
escape these special symbols
18:10 - even if it's within brackets.
18:11 - You need to put these
backslashes before it
18:13 - to actually treat it as a period,
18:15 - actually treat this as a dash
18:16 - and then actually treat
this as an underscore.
18:19 - You gotta escape them.
18:21 - For that matter you might even
wanna escape the ampersand.
18:25 - Yeah, I guess so.
18:27 - Maybe that too if ampersand
is a special character
18:29 - sometimes it's little bit confusing,
18:31 - whether you need to escape or not.
18:32 - But if you're ever getting weird error's
18:33 - where you're dealing with strings
18:34 - and you're trying to
parse strings like this.
18:37 - Try escaping the special characters
18:40 - and sometimes that'll fix the problem.
18:42 - Or un-escape them, it's a very weird,
18:44 - layered, convoluted kinda thing
18:46 - but yep it's just a part of learning this
18:49 - crazy Aztec language.
18:51 - Yup, I just taught you
guys how to speak Aztec.
18:53 - (Scoffs)
18:54 - But yeah guys, seems like we have
18:56 - a fully functioning email scraper now,
18:59 - with this added functionality.
19:00 - So, pretty simple right?
19:01 - Five lines of code, took
a little while to get here
19:05 - but yeah that's pretty much it.
19:06 - Just these simple five lines
19:08 - and that just kind of shows the
power of regular expression.
19:10 - You are able to detect all
different kinds of things
19:13 - with one single line of
weird symbols, pretty much.
19:17 - So, that kind of
demonstrates the value of it.
19:19 - I'm sure Python's very happy
to have it within it's library
19:21 - if it was sentient.
19:23 - But yeah, very useful tool.
19:26 - I'll probably be touching
on this more in the future
19:28 - this was only like a
general introduction to it.
19:32 - But there's a lot of things
you can do more with this
19:35 - there's, just a lot.
19:37 - Perhaps I'll go into it
in the future but for now
19:39 - that is all you guys, thanks
for watching this video.
19:42 - Still new to this, getting better, slowly.
19:45 - But yeah, hope you guys liked watching it
19:46 - stay tuned for more and yeah,
I will see you guys next time.
19:52 - Good--
19:54 - Bye.
19:55 - (EDM music)