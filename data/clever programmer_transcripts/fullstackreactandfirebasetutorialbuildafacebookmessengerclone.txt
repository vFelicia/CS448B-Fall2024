00:00 - video we are going to be building this
00:01 - facebook messenger clone let's just jump
00:04 - straight into the demo of it so let's
00:06 - just go yo Sonny what is going on my man
00:10 - John say that what's up cuz he what's up
00:16 - there we go
00:17 - real-time nice this facebook messenger
00:28 - clone just jumps trading nice okay
00:32 - beautiful so this is the demo of the app
00:34 - it is live and working and if you are
00:39 - here right now watching this you can
00:41 - actually go to this link at the top here
00:44 - and be able to jump in with us and use
00:47 - it just please keep it clean because
00:50 - once people start coming in and they
00:51 - don't keep it clean then we have to
00:53 - either ban them or something so we want
00:54 - to make sure that the community stays
00:56 - extremely positive and awesome so I hope
01:02 - you guys are excited if you're watching
01:04 - this video after this has been live just
01:07 - remember this is the app that you're
01:09 - going to be building from complete
01:11 - scratch and we're gonna be showing this
01:13 - in this demonstration just one sitting
01:15 - so buckle up sit down open up your
01:18 - visual studio code and it's gonna be
01:19 - time to get to work soon awesome nice so
01:25 - where should we go with this sunny so
01:28 - this is some strain I think should we
01:30 - get started with creating off first
01:32 - yeah project let's do it so now we're
01:36 - gonna go here let's go live chest up
01:40 - right so you can see what I'm typing
01:41 - right now what's up cause yeah is it
01:43 - looking good on YouTube Frankie nice
01:48 - awesome
01:49 - okay so let's get started guys so the
01:52 - first thing we want to do is use
01:53 - something called crack tapped to sell
01:56 - the whole template for the app so what
01:58 - we're gonna do is cause it you just need
02:00 - to share a terminal with me so if you
02:02 - click over to live share on the Left
02:04 - uh-huh live share yeah and then click on
02:07 - share terminal okay oh actually let me
02:10 - open the terminal fur
02:13 - nice region right read them right and
02:16 - let me actually open the zsh one so you
02:18 - can get access so try getting access of
02:20 - this one okay nice times we have 259
02:25 - people live that is amazing thank you
02:27 - guys for being here stick around we're
02:28 - gonna be building this app facebook
02:30 - Messenger clone together and we will be
02:33 - taking any questions you have along the
02:35 - way and answering them for you awesome
02:37 - nice 259 people all right so I think
02:42 - I've got access now right no yeah
02:44 - actually just ask for the access I did I
02:51 - think you need to give it again if I go
02:54 - to who's LSH read-only right now so if
02:59 - you go to the lefty service as the as Sh
03:01 - on the half yeah it says read-only yeah
03:04 - make read and write yep there we go
03:06 - there we go so now for the LS so okay so
03:10 - the first step we're gonna do is inside
03:12 - of this photo we're gonna start our a
03:14 - project so we do MPX create react yeah
03:19 - and come on is basically gonna it's
03:22 - something Facebook's bill and it's just
03:23 - a little shortcut to setting everything
03:24 - up for us so what should we call the app
03:26 - let's call it facebook Messenger lounger
03:32 - oh nice done and that will set
03:37 - everything up that we need to get the
03:39 - app installed app running I'm excited
03:43 - this is gonna be the app right here guys
03:45 - this is the app you're building that's
03:48 - it
03:49 - so guys make sure you go over to that
03:54 - link and you can give it a try well it's
03:55 - up yep this is gonna be beginner
03:57 - friendly I mean we're gonna try to break
03:58 - it down as much as we can but just the
04:00 - truth is that these live streams because
04:03 - we have limited time and we're trying to
04:04 - do it all at once you just have to like
04:07 - keep up with us and then you can watch
04:09 - it later as well and then be able to
04:11 - build it yeah nice
04:15 - okay while that's loading Kazi should we
04:18 - set up our five days yeah we can set up
04:21 - our firebase yeah let's do it yeah
04:23 - see if you head over to 5s comm and
04:27 - login so guys firebase is a service
04:30 - provided by Google it's just a bunch of
04:32 - tools so it allows you to host websites
04:34 - it allows you to have a database allows
04:37 - you to do machine learning and a bunch
04:38 - of other cool stuff and it basically
04:40 - strips away all their headache and it
04:42 - allows you to have a really powerful
04:44 - real-time database this whole app is
04:46 - powered by firebase on the backend so
04:48 - all you need to do is have a Google
04:50 - account you just need to go onto
04:52 - firebase and then click on add so Chirag
04:55 - view so Chirag this is so he's saying
04:57 - that we can also make it with node and
04:59 - socket that's so much more complicated
05:01 - than the way we're gonna show you guys
05:02 - because firebase is fire for a reason I
05:06 - mean this thing is it makes it easier
05:08 - you don't have to deal with socket IO
05:10 - and all that other complexity exactly
05:14 - and you guys will see just how simple is
05:16 - when we when we get building all right
05:18 - so let's go facebook messenger clone
05:23 - nice okay and then we can disable that
05:28 - if you want or enable yeah awesome
05:32 - and that should set everything up for
05:34 - our project and let's check on so we can
05:37 - see wow that's loading let's jump back
05:39 - over to the code so let's have a look
05:43 - we've got the code open now and
05:45 - everything's gone well so now what we
05:48 - need to do is go into the folder that
05:50 - was created for us so we just do CD and
05:52 - then we do facebook Messenger clone and
05:55 - then we enter and now we're inside of
05:58 - the react app that was built for us and
06:01 - guys if you've never used react before a
06:03 - super simple oh look we got some people
06:05 - jumping into the messenger app nice if
06:08 - you've never used this before all you
06:11 - need to do to get started on the react
06:13 - app is just do MPM star so have a look
06:18 - at that fuzzy
06:19 - oh nice we have people coming in yeah
06:22 - ready and says what's up good to build
06:24 - us today nice yeah so you guys can
06:26 - actually go to this link maybe
06:28 - Frank you want to drop this link and you
06:30 - can drop it into you have our end Rock
06:34 - link I just dropped in the top nice ago
06:37 - nice yeah
06:39 - actually maybe I have the restream chat
06:42 - and we might be able to drop it there
06:44 - nice also guys let's not spam the chat
06:47 - can we do this with Python we can do it
06:50 - with yeah we yeah these guys want you
06:53 - guys jump into this app just don't spam
06:55 - it just treat it with love and just
06:56 - write a few messages just everybody can
06:58 - get to test it okay
07:03 - this so let's go back to the code and
07:06 - this carrion bird ah so we've got once
07:10 - we've got every app projects out what we
07:11 - need to do is in the terminal we just
07:13 - runs one command with NPM stuff and then
07:15 - we hit enter and that just spins up the
07:17 - app for us and what we're gonna see if
07:19 - everything goes well is it should fire
07:21 - up localhost 3000 it starts the browser
07:23 - for us or a chrome tab
07:25 - and then you should see this yeah that's
07:27 - perfect that's exactly what we want and
07:29 - what I always recommend is we always do
07:33 - a cleanup process so if this go over to
07:35 - our files now in vs code yep
07:38 - files is open and then let's open up
07:41 - Facebook Messenger uh-huh and we'll
07:43 - delete this one too because this is just
07:45 - a dummy file we created
07:46 - yeah okay so the only thing we really
07:49 - care about at this point is everything
07:51 - inside of sauce all right so let's do a
07:54 - few cleanup steps let's delete all the
07:55 - test files okay so I'll go here test
07:59 - delete yup and setup test on Jess we're
08:03 - gonna get rid of that uh-huh logo delete
08:05 - yeah we hear that in app Jess let's go
08:09 - to where it says import logo from racing
08:14 - in that right yeah that's right okay
08:17 - and we'll write a h1 header and here we
08:22 - just call it yeah programmers nice
08:26 - awesome and at the top you see it says
08:30 - file to compile that's because on line
08:31 - two we have this writer so we can get
08:34 - rid of that okay and get rid of it and
08:37 - now we have this hello clever
08:38 - programmers
08:39 - so this is going to be your starting
08:41 - point for the app guys and you want to
08:43 - use this as your sort of base like style
08:45 - area and and if you get to this point
08:47 - well done
08:47 - so the next step I guess is let's get
08:51 - the input that there's just kind of mask
08:54 - out what we're gonna do so we need to
08:56 - have an input field so every sort of
08:58 - basic chat app has a few things it has
09:01 - some kind of input field right and then
09:05 - we have an input button so we're gonna
09:07 - have a button which says send message
09:09 - and then we're also gonna have the
09:12 - messages themselves so we kind of need
09:13 - the messages themselves to be listed out
09:15 - right so I'm gonna have the messages
09:17 - themselves yeah and what I recommend
09:22 - first is pretty much just doing a quick
09:24 - sort of dummy run through this so if we
09:26 - add in a few things aside in our first
09:28 - input so an input here like this and
09:32 - let's add in a bun so we have a button
09:35 - and this bun is just gonna say send
09:37 - message so here we have send message and
09:40 - then we can save the file and we can go
09:42 - and check out the app and see how that
09:44 - looks and you just want to carry on
09:47 - doing these baby steps guys like you
09:49 - never want to overcomplicate or sort of
09:51 - just take small little chunks every time
09:53 - you do this so let's open up the our app
10:00 - here
10:01 - yep nice no so that we have like our
10:05 - input box and then we have send message
10:07 - and what we need to do is obviously we
10:09 - need to connect this right so we need to
10:11 - get this like functionally working right
10:14 - now so there's a few things we need to
10:16 - do right now and the first thing we're
10:18 - gonna do is we're gonna introduce
10:19 - something so we actually we need to do
10:23 - something called state
10:24 - so in react we have two fundamentals we
10:27 - have state and we have props we'll talk
10:29 - about props in a sec but state is
10:31 - basically like a short-term memory and
10:33 - what we use that for is to keep track of
10:36 - what we're typing when we write stuff
10:38 - inside of input so the way we declare
10:41 - state is we're just gonna do it like
10:42 - this so this is the syntax to initialize
10:45 - a piece of state so we say Const input
10:47 - and then here you have to have a
10:50 - convention so someone said team spirit
10:52 - nice we say set input and that's just a
10:55 - convention guys so usually you have the
10:58 - variable name so the piece of memory in
11:00 - the state and then you have set input
11:01 - and then you have set and whatever the
11:04 - name of the variable is so here the name
11:06 - is input so we just come okay so and
11:08 - then what you want to do is you say you
11:10 - state and then you do open brackets and
11:14 - then you basically put the initial value
11:16 - for what you want the input to be so in
11:18 - our case it's just gonna be an empty
11:19 - string because that's what we want to
11:21 - have in the input flow to begin with and
11:24 - to actually make this work this is gonna
11:25 - error if we save this right now we have
11:27 - to import you state from react just like
11:32 - that and if many of you guys might uh
11:35 - who have touched on react before might
11:37 - have heard of something called react
11:38 - hooks this is an example of a reactor
11:40 - and they're really powerful small
11:42 - snippets of code and you're gonna see
11:45 - the power of it right now
11:46 - really nice cuz you see how many people
11:48 - are actually using the chat right now oh
11:50 - really so yeah it's really going on nice
11:54 - on the end Rock one yeah nice that is so
12:00 - cool they're like this is epic yeah we
12:04 - can see that what's up everyone this app
12:06 - is lit it's a really nice app damn nice
12:10 - we're what put this code up on github
12:12 - actually maybe afterwards we can
12:14 - as a public repo that should be pretty
12:16 - cool yeah yeah nice so what we'll do now
12:21 - is we'll have input set input and what
12:24 - we need to do now is we need to connect
12:26 - this piece of state so the input state
12:29 - to our input field and there's two steps
12:32 - we need to do here right so and what
12:34 - this is going to allow us to do it's
12:35 - gonna allow us to remember everything
12:37 - you type inside of that input field and
12:38 - then use it when we actually sort of
12:40 - trigger the send message function so the
12:42 - first thing we need to do is click on
12:44 - that we need to type in the value and we
12:47 - need to map our state to the input field
12:50 - itself so we've got value equals input
12:52 - and you can see here now if we were to
12:55 - save this and we run this you're gonna
12:57 - pretty much notice that you can type in
12:59 - but there's nothing nothing's gonna
13:01 - happen so I can type I'm trying to type
13:03 - and literally won't let me do anything
13:05 - exactly and the reason why that's
13:08 - happening now is because when we set up
13:10 - that piece of state we gave it an
13:12 - initial value which was an empty string
13:14 - we then mapped it to that input field so
13:18 - we mapped it to the input field and what
13:20 - I actually did was I said permanently
13:23 - stay to that empty string so that means
13:25 - regardless if you're typing it's just
13:27 - gonna get stuck and be stuck in an empty
13:29 - string which is not ideal right you
13:31 - don't really want that to happen so now
13:33 - what we need to do is we actually need
13:35 - it to update this day as we type so we
13:37 - use something called unchanged and
13:39 - unchanged is gonna fire off something
13:41 - called an event so here we're using es6
13:44 - syntax and here we're saying when the
13:47 - event gets fired off so when you start
13:49 - typing in the keyboard we're gonna say
13:51 - set the input so we're gonna say update
13:54 - the input and you have to use this
13:56 - method whenever you want to change the
13:58 - input so that it's reacts clever way of
14:01 - telling it how when and how to rerender
14:03 - and what we do here is we say event dot
14:06 - target dot value oops that's fun of it
14:09 - wait event so hate when it does that
14:12 - event
14:13 - yeah target yeah I know right I just
14:16 - sometimes has its own mind of its own
14:18 - yes no but then target value and what
14:21 - this will do is it will actually so this
14:23 - captures the exact thing that your type
14:26 - you meant to write value right it's as
14:29 - v/o Minds disconnected what's wrong
14:32 - enough a - says Valley right now let's
14:35 - see if I do value so value
14:38 - now it says value just don't hit any
14:41 - autocomplete because I think audio car
14:42 - oh it says Yui right here some weird
14:45 - stuff is happening so I need to I think
14:48 - I need to rejoin the live so at a what
14:51 - let me just quickly grab the link
14:53 - because mine's gonna of sync with yours
14:55 - uh-huh is happen but yeah so I'll just
14:57 - jump by this one give me one sec I'll
15:00 - come back awesome when it's alright so
15:04 - yeah guys right now basically what we're
15:06 - trying to do is make sure when we type
15:07 - stuff here it actually changes and shows
15:10 - us the value and then using that when we
15:12 - hit the send button what we'll be able
15:14 - to do is like start displaying the
15:16 - messages and the styling for this app is
15:20 - quite heavy but because we want to focus
15:23 - on just teaching you firebase and react
15:27 - we're not gonna or kind of go really
15:29 - fast through the CSS portion of the app
15:31 - so just try to keep up there we're even
15:34 - gonna like maybe copy/paste some code
15:36 - just so we keep the speed up but then
15:38 - right after that we're gonna get back
15:39 - into like building the app and
15:42 - explaining all the react and firebase
15:43 - parts exactly it's just thinking of
15:48 - water loadout in the meantime cause see
15:51 - what we can do is while I'm getting this
15:52 - again we can go into firebase so we can
15:54 - set everything up that I need to set up
15:57 - a bunch of things okay cool I'm in
16:00 - firebase the project is ready to go yeah
16:03 - so you want to go over to a fire store
16:06 - so on the oh yeah you can start you can
16:08 - start with that actually yeah okay okay
16:15 - also set up firebase hosting for this
16:17 - app exactly uh-huh register and that's
16:24 - gonna allow us to actually be able to
16:26 - deploy it off to a nice-nice this year
16:30 - now I'm in a there we go
16:32 - I think you just went out of sync I'm in
16:34 - a bit with okay there we go
16:36 - firebase tools
16:38 - yo and then firebase login firebase and
16:43 - net so I'm done awesome okay so the next
16:48 - step you want to do is what actually
16:51 - okay we can come back to the code now
16:52 - yeah yeah so what we want to do now is
16:55 - we have remember what we were saying
16:57 - before we mapped it to the input and
16:58 - then we done this set input which is
17:00 - updating as we type right yeah so now we
17:03 - can do is we can actually console.log
17:05 - this to your console log input and what
17:08 - we can do is if we run this and we open
17:10 - up the inspector now we should be able
17:13 - to see as Kazi types into the input
17:15 - field we'll be able to see in real time
17:17 - it would show us the value inside of the
17:20 - state and remember guys state is like a
17:22 - short term piece of memory if your
17:24 - refresh is not going to keep it so if we
17:28 - refresh it gets rid of it so you can see
17:29 - it comes up in causes console right
17:31 - there and now that we have that value we
17:35 - can use it when we click the send
17:36 - message button but before that we
17:38 - couldn't do that because we didn't
17:39 - actually there's no way of remembering
17:42 - what the value was that was that he put
17:44 - inside the input phone yeah
17:46 - nice so the next step is we're gonna
17:49 - create a function called send message so
17:52 - we're gonna do send message and it's
17:55 - going to be fired off from the bun so we
17:57 - have to expect that it's gonna have an
17:58 - event and here what we do is to connect
18:01 - this we do an unclick so here we're
18:04 - gonna say on click and we do send
18:07 - message so what this is gonna do is when
18:10 - Kazi clicks on the send message button
18:11 - it's gonna fire off this function over
18:14 - here and this is es6 function that we're
18:17 - looking at right now
18:18 - and what we need to do here is basically
18:20 - this is where we're gonna say basically
18:24 - like all the logic all the logic to send
18:27 - a message goes here
18:28 - alright goes here now obviously in order
18:32 - to have a list of messages we need to we
18:34 - actually need to have some way of
18:35 - storing those messages so we're gonna
18:37 - actually use another piece of state here
18:39 - so we're gonna have cons and we're gonna
18:41 - call it messages all right and here what
18:44 - we're gonna do is I'm gonna say set
18:46 - messages so this is gonna be instead of
18:49 - a string like we had for input this is
18:51 - gonna be an array and the array is just
18:55 - going to be it's gonna represent so
18:58 - initially we start off with an empty set
19:00 - of messages right and then what we want
19:02 - to do is as we've when we click the send
19:05 - message button we want to push whatever
19:07 - is inside the input so whatever Scaasi
19:09 - is typed in we want to push that into a
19:11 - list list so inside of an array mm-hmm
19:14 - so what the way we do that is we say set
19:17 - messages so whenever he takes the send
19:20 - messages we click set messages and here
19:23 - there's a really nice yes six little
19:25 - trick so if you do the square brackets
19:28 - and then you do dot dot dot
19:31 - messages so this is saying spread out
19:34 - whatever is in the current messages so
19:36 - imagine if we had a bunch of things
19:37 - inside of us we had a we had B we had C
19:42 - hold on
19:43 - oMG give me one second I there we go
19:46 - nice oh we have so imagine we had three
19:50 - different things inside of a inside of
19:52 - them hey array right now yeah what this
19:56 - is gonna do is it's actually gonna
19:57 - spread them out so we're gonna go saying
19:59 - is keep all of the current messages but
20:01 - append the input to the end no reason
20:04 - why we're gonna do that because imagine
20:06 - these were tossed it'd be like take dogs
20:08 - out oh so well doing calls for how we're
20:10 - gonna say like messages so and then hi
20:12 - and this one would be like I don't know
20:15 - what's up yep so imagine like cause he
20:18 - typed into the input and then when we
20:20 - can't he hits the send message button is
20:23 - actually going to fire off this and then
20:25 - I'm gonna set the missed whatever it was
20:27 - plus the input exactly you don't want it
20:29 - to replace everything you have you want
20:31 - it to like add it to the end of the
20:34 - array because if you if you don't have
20:36 - this line of code here what it's gonna
20:39 - do is it's gonna just chop this entire
20:41 - thing off exactly and we want to keep it
20:44 - like a Lister and memory of what's going
20:46 - on yeah so what we then want to do is we
20:49 - want to clear the input so that way when
20:51 - he's hit send a message it's actually
20:54 - not gonna show what the previous message
20:56 - was so what we'll do here is we'll say
20:57 - set input to be blank afterwards and
21:01 - this is literally all we kind of needed
21:03 - this
21:04 - point but the thing is right we're not
21:06 - gonna actually see anything on the on
21:07 - the output so what I would recommend is
21:10 - you always console.log your messages so
21:13 - that way you can see exactly just like
21:15 - we did when you typed in we can also see
21:17 - when the messages so let's go take a
21:19 - look okay test nice so now i see when i
21:25 - wrote test i also see the existing list
21:27 - that you had already with hello hi
21:29 - what's up you know and if I add send
21:32 - message it added it to the end of the
21:33 - list so a new message now let's just say
21:37 - the name of some of the people who are
21:38 - here so like Chirag is here so let's
21:41 - write Chirag and Yana is here so let's
21:44 - write yom now and golem is here so let's
21:47 - write go along nice there we go nice all
21:52 - of you guys just got appended to our
21:53 - array and actually Chirag say this like
21:56 - push yes it's like a push but it's this
21:59 - Mona's our Molly what is up bro oh nice
22:04 - nice Nizar molly is the person who
22:08 - landed a hundred and ten cake contract
22:10 - with JavaScript I would love to catch up
22:12 - with you by the way nazar so if you want
22:14 - to hit me up and slack or even send me
22:17 - an email and then I want to actually get
22:19 - on a call with you yeah keep going
22:22 - nice okay so the next step we want to do
22:27 - is so it's working so now in the state
22:30 - we have a list right we have a list of
22:32 - messages so what we want to do at this
22:34 - point is if we go over to line 23
22:37 - somebody just said that's an amazing
22:40 - explanation of using the state hook
22:42 - awesome nice yeah because this is
22:45 - actually how me and Kazi so I went over
22:47 - this it was so confusing to me to
22:50 - understand how states worked I was like
22:52 - what is going on this thing is mad
22:54 - confusing yeah and a lot of people get
22:57 - caught up on sort of they tend to want
22:59 - to use do something like this right
23:01 - where they say Empire equals like ABC
23:04 - you can't actually change that the value
23:07 - like this you have to use the set input
23:09 - or set messages so that's just something
23:11 - to remember otherwise you will run into
23:13 - issues if you do things like that yeah
23:16 - okay so the next part is obviously we
23:18 - have all the messages inside of the
23:19 - state so if we go to line 24 line 24 yep
23:22 - right here yeah and what we can do is we
23:24 - can get rid of these two markers because
23:26 - we've already done that and now we need
23:27 - to actually just have the messages
23:29 - themselves so what we're gonna do here
23:31 - now is notice how we can have JavaScript
23:35 - inside of this block that's something
23:37 - called JSX so JSX is really cool because
23:40 - it allows you to have HTML and then some
23:42 - JavaScript inside and an embedded inside
23:43 - you know what we do is we have the curly
23:46 - braces so you can see here's some
23:48 - regular HTML stuff and then here's the
23:51 - squiggly and then there's some
23:52 - JavaScript being executed in there
23:54 - exactly so all you need to do is add
23:57 - these little curly braces so these
23:59 - little squiggly brackets and then
24:00 - everything inside will be interpreted as
24:02 - JavaScript so you get some really nice
24:05 - mix of the two things so what we're
24:06 - gonna do now is we're gonna say messages
24:08 - mm-hm Matt and math is a really powerful
24:11 - es6 function because what it's gonna do
24:13 - is we're gonna map through everything in
24:16 - every single item inside of the messages
24:18 - array so each item is referred to in
24:22 - this case as a message right yeah I say
24:25 - let's through every single message and
24:27 - then we're gonna put parenthesis so we
24:29 - just open closed brackets and that just
24:31 - means return something yeah and what
24:35 - we're gonna do then is we are going to
24:37 - say so let's just return in this case a
24:39 - P tag so a P tag and for every single
24:43 - message we just put the message like
24:45 - this so what this is gonna do is gonna
24:47 - loop through that array that we saw
24:48 - earlier that the one that was cause II
24:50 - was populating as he hits and this array
24:52 - right here and it's gonna loop through
24:54 - and it's just gonna display each of
24:55 - those messages exactly the map is like a
24:58 - fancy way to loop through instead of
25:00 - writing like a for loop and all that
25:01 - guys you guys should start using map
25:03 - it's super clean yeah and the difference
25:06 - between a map gonna for each is that a
25:07 - map returned something which is what we
25:09 - want to do here we're trying to return
25:11 - some HTML elements nice okay so if we
25:15 - save that and then we should be able to
25:17 - see that on the screen now so nice hold
25:19 - on let's go let's make it half screen
25:22 - like that okay cool
25:24 - oh nice so we now are seeing so once you
25:27 - mapped it out it's basically like
25:29 - looping
25:30 - and then like popping that hello right
25:32 - there and that hi is right here and then
25:35 - this what's up is right there yeah cuz
25:38 - if you just press command-v on your vs
25:41 - code Oh beautiful that's awesome yeah
25:45 - and even come on J to hide the terminal
25:47 - while we could there we go
25:50 - then you should get a little bit more
25:51 - space okay okay nice so if you just type
25:55 - in now so when you type a message you
25:56 - should be able to see it working hey
26:01 - send message yo what is going on nice
26:08 - now all the messages are starting to
26:09 - show up and it's like guys I'm not even
26:11 - refreshing so it looks so clean it's
26:13 - like just all of this is happening
26:15 - without any refresh that's kind of
26:17 - Awesome nice yeah and exactly and the
26:19 - main thing is write react is reactive so
26:22 - that's the way it's easy way to remember
26:24 - it that's why they could ever yeah
26:25 - because it just reacts to the sudden
26:27 - changes in ice we're still getting
26:28 - people messaging here so that's awesome
26:36 - then the next thing we want to do is we
26:40 - want to get rid of that little markdown
26:43 - that we had a little comment that we had
26:45 - and we basically just want to now I
26:48 - guess the next step right is we want to
26:51 - yeah so you might have not noticed that
26:54 - but Carly tried to hit the enter key
26:55 - when he typed in the input field and
26:58 - hitting Enter key it wasn't working
26:59 - right yeah so there's a little trick
27:02 - around that and a lot of people know it
27:03 - I love people don't but it's it for
27:05 - those of you don't know it what we need
27:07 - to do is we just need to do we need to
27:08 - wrap the input and the button inside of
27:10 - a form so we wrap it inside of a form
27:13 - like this so we just grab this
27:15 - we caught a kite we chuck it here and
27:17 - then we just there we go so we've got
27:22 - this and then all we need to do now is
27:24 - once it's inside of a form we just give
27:26 - the the the type right the type of the
27:30 - button we call it something like submit
27:32 - and submit it's basically just gonna be
27:34 - that when he's typing in the input for
27:37 - me hit enter because it's a form it now
27:39 - knows that you're talking about clicking
27:41 - this button so that's what enter is
27:43 - represent so that's why that's how you
27:45 - get that normal behavior that we used to
27:46 - and there's one thing that we do need to
27:49 - do at this point though when we do I'm
27:52 - sorry one second Sonny I'm gonna cut it
27:54 - just for a little bit it's a great
27:55 - question Abdul Basit just asked he said
27:57 - why are we using state instead of a
28:00 - normal variable that was something
28:02 - always also super confusing to me the
28:04 - simplest way I can think about it is the
28:06 - state allows you to change stuff without
28:08 - having to hit the refresh button that's
28:11 - how I thought of it so the simplest I
28:12 - mean before you get into all the
28:13 - complexity just think about it like this
28:15 - variable you would have to refresh for
28:17 - it to make a change
28:18 - but like state changes it on the fly
28:21 - without any refresh so you want to use
28:23 - state to be able to do things where it's
28:26 - fast without refreshing okay so state
28:28 - means no refresh fast exactly yeah and
28:32 - in order to do everything the react way
28:34 - we have to use stay so we just have to
28:36 - follow the rules of react and you stay
28:37 - and also using a hook you have to use
28:40 - those set methods that we showed earlier
28:41 - yep nice so we had we added the type
28:47 - submit' to the button so in order to get
28:50 - the one thing we need to remember is as
28:51 - soon as you wrap something inside of a
28:53 - form naturally a browser tends to
28:56 - refresh so what happens it is now if
28:58 - cause he was to do the end huh
28:59 - yeah so let me actually try it so as
29:03 - soon as I hit enter right if I hit enter
29:06 - you guys see how it refreshes and
29:07 - everything goes away because it's a form
29:10 - and what forms do is they refresh on
29:12 - submit so now what Sonny has to do is
29:14 - stop it from refreshing so he wants it
29:17 - so like the refresh cannot take place
29:19 - when I hit enter on here exactly so the
29:24 - way we do that is remember I said
29:26 - whenever we have like an unchanged or an
29:28 - on click it passes an event in this case
29:30 - the event that we need to sort of attack
29:33 - here is do event to prevent default and
29:36 - that's the one inside of send message
29:37 - and then that's it that will actually
29:39 - just take care of it yeah so as soon as
29:42 - he hits just hit save yep there we go
29:46 - this or not so now if I hit hey enter
29:48 - you guys see how like it did not refresh
29:51 - anything it just happened fast and
29:53 - basically it's this line of code that
29:55 - like actually disabled
29:57 - refresh from actually taking place so
30:00 - preventdefault yeah also I see a lot of
30:05 - people asking if it's gonna be recorded
30:07 - yes these sessions are gonna be recorded
30:09 - so you can watch back and saw play and
30:11 - stop as you need to yeah this will be
30:14 - recorded later and you guys will be able
30:16 - to watch it later this is the question
30:18 - we're getting asked right yeah okay so I
30:23 - guess the next step would be it's yo
30:26 - cool cause each owner should we hook you
30:27 - up to firebase should we put you an idea
30:30 - which we do next I think next let's
30:32 - actually add a front-end to it because
30:35 - people like looking at stuff that looks
30:37 - nice okay nope so what we're gonna use
30:39 - then is something called material UI so
30:42 - let's head over to that website and
30:44 - let's see what material UI is about so
30:47 - it's super easy to install and basically
30:49 - material UI is what you you're pretty
30:51 - much I've guarantee everyone's used
30:53 - material uy without realizing it's all
30:55 - of the google interfaces so it's all the
30:57 - flap clean look that you get when you're
30:59 - using a Google interface yeah so to pull
31:01 - it into the project all you need to do
31:03 - is MPM install so that little come on
31:05 - there you just want to copy that and go
31:07 - to your terminal yep there we go and do
31:12 - an NPM install and that will pull the
31:14 - project pull the modules into your
31:16 - project and what we can do then is I
31:19 - really like so we can start off by
31:21 - styling the button because the buttons
31:23 - naturally an easy thing to change so
31:25 - once that's done okay nice hold on so
31:29 - now what we need to do is if we go over
31:31 - to our button we can actually go up to
31:34 - the top actually let's try that little
31:36 - vs code trick that we like that we
31:38 - always like doing so if we instead so
31:40 - the button in material UI the only
31:42 - difference is it has a capital B so it's
31:45 - it's like that and if we then change the
31:48 - closing print bracket so we have the
31:51 - open and closing and now generally give
31:52 - that tricky little try so you get you go
31:55 - to the button and then hit control and
31:57 - space and what that allows you to do
32:00 - that that allows you to actually import
32:02 - it so let's go to the end of it is that
32:04 - allowing us actually import it hold on
32:06 - maybe the second one is an import
32:08 - yeah it's annoying sometimes it doesn't
32:11 - work yeah and we're not doing a live
32:14 - show yeah
32:14 - so here I'm just gonna copy this import
32:17 - statement and then drop it in right
32:18 - there perfect yeah so there we go
32:22 - that should give us the default style
32:25 - but what happens is is with these sort
32:27 - of design libraries they tend to give
32:30 - you a bunch of attributes that you can
32:31 - use the style style right so the one
32:33 - that we're gonna use is it has variants
32:36 - you can see it's already changed the
32:37 - look and feel of the button yeah the
32:38 - send message right when I go over it's
32:40 - like mmm looks juicy look at that right
32:43 - yeah so there's a really nice variant of
32:46 - this and it's called outlined and if
32:48 - you're wondering how I knew that it was
32:49 - variant and how I knew those outlined
32:51 - it's because in the material UI Doc's
32:54 - you have a bunch of sort of
32:55 - documentation that can sort of tell you
32:58 - so in here if you go to components and
33:00 - then button so inputs button you should
33:04 - be able to see here they've got all the
33:06 - examples all the different styles and
33:08 - use cases you can see this contained
33:10 - there's so actually as a good one to use
33:12 - maybe we should use that on suicide
33:14 - contained and let's say for the color
33:17 - let's do a primary button so you see
33:18 - that little blue color so let's do that
33:20 - one so color we're stealing the word
33:22 - primary from here and writing it in
33:24 - there exactly and that's honestly the
33:26 - easiest way so you can even see this
33:28 - disable elevation there's a bunch of
33:29 - things that you can do that so we've
33:31 - saved that let's give that a look boom
33:33 - look at that looking clean and you even
33:36 - get that little ripple effect which is
33:38 - really cool yeah so if I click it look
33:40 - at that look at that how nicely hey ah
33:42 - hey and now if I just hit enter it works
33:45 - too out-of-the-box something I just
33:49 - noticed that cause is when you actually
33:50 - hit send message when you had nothing in
33:52 - the input field it was pushing empty
33:55 - strings inside it yeah right so if I'm
33:57 - hitting Enter you guys see that when I'm
33:58 - just hitting Enter and
33:59 - with empty it's still pushing it to the
34:01 - array which is what we don't want yeah
34:04 - we don't want that kind of behavior so
34:05 - it's a very easy way to fix that and all
34:07 - we need to do is on the button and we
34:09 - just say disabled yeah and we basically
34:12 - say if there is no input yeah right like
34:16 - that and then basically it'll disable
34:18 - this button when there's no input so see
34:21 - and now if I so now I cannot hit enter
34:24 - when I try to hit enter it doesn't work
34:26 - when I try to click the button it
34:27 - doesn't work but if I say yo yo what is
34:31 - happening now it works but on empty
34:34 - doesn't work anymore so it's just this
34:36 - right there exactly and that's gonna
34:40 - make a big difference to the whole
34:41 - useful of user experience and it won't
34:43 - look as buggy when you do that
34:45 - so the next one we're gonna do is
34:46 - something called form control so form
34:49 - controls are really nice little add-on
34:52 - so it's in material UI so if you go over
34:54 - to the material UI Docs and it's called
34:57 - form control so you can search for it
35:00 - form control up maybe here huh yeah in
35:04 - that one yes if you type in form control
35:07 - this one that's the one so I'm just
35:10 - gonna copy that import so I've already
35:13 - added the import and then you see the
35:14 - example that we have there so it says
35:16 - form control input label in perform
35:19 - helper text so right here yep this is
35:21 - the example uh-huh yeah so you see that
35:24 - example right there all we're gonna do
35:25 - and this is the simplest way guys it's
35:27 - just literally bringing that into your
35:28 - project so bring that into your project
35:30 - and a good place I guess to bring it
35:32 - would be maybe on top of the existing
35:35 - input yeah you know so we could do it
35:38 - maybe that so yeah basically what we're
35:40 - trying to put it is like above this
35:43 - input so right about there yeah and the
35:46 - reason why we're doing that is because
35:47 - we basically just want to replace the
35:51 - stuff that we have at the moment with
35:53 - that instead so to get that going what
35:56 - we're gonna do is we're gonna delete the
35:57 - delete the stuff we don't need so we
35:59 - don't need this html4 we don't need this
36:02 - ID at the moment we don't need this
36:05 - thing so you can actually simplify a lot
36:07 - of this at the moment and then even this
36:09 - ID here you don't actually need that now
36:12 - and even the form helper text we don't
36:14 - want so you see we've actually
36:15 - simplified it a lot so what we can do
36:18 - here is we can just say let's just say
36:21 - enter a message the dot and this input
36:25 - notice is very similar to the button
36:27 - that we had before right so it's
36:28 - literally just as what happens if i
36:30 - refresh right now does it does this
36:32 - stuff show up right now
36:33 - now so we actually need to import the
36:36 - rest of them so okay so let's go here
36:39 - and go in put label yeah with a capital
36:42 - I so capital R then and then we got in
36:47 - input input ok let's save let's hit
36:50 - refresh and it's showing up right here
36:53 - hey and you see you get really nice of
36:56 - cool and even has an animation so the
36:58 - text went up with it oh yeah that's nice
37:01 - when I click it it goes up and what
37:02 - we're trying to do right now is like
37:04 - delete this ugly looking one and I just
37:07 - have this one right with the button next
37:09 - to it or something exactly that yeah
37:12 - okay what we're gonna do now is all of
37:15 - the attributes that we have inside of
37:17 - the input we can just pretty much cut
37:20 - them out and we can put them inside of
37:22 - the new input mm-hmm all right so we can
37:25 - do that and then what we can do is I
37:27 - think we might be better for the button
37:29 - to be inside of this form control yeah
37:31 - so we can give that a try and see how
37:32 - that looks
37:33 - so if we save ooh okay right there oh
37:36 - it's already working it seems like yo
37:39 - sunny and then people oh busa boost
37:44 - boost see sunny boo see sunny says you
37:49 - guys are killing it no it's glad you're
37:52 - enjoying it dude
37:53 - yeah pumped so let's send it and like
37:55 - look right there it shows it okay
37:57 - beautiful awesome so now we have a very
38:02 - slick sort of form that this showed to
38:06 - the user so the next step that we want
38:08 - to do is I guess we need to make the
38:10 - messages look a bit nice all right
38:12 - because right now they're a bit ugly
38:12 - yeah they're really ugly because just P
38:15 - tags right so there this is like wrapped
38:17 - in just a P tag exactly what we're gonna
38:25 - do here is actually soup we're gonna use
38:26 - a very powerful part of a react which is
38:29 - components components of a city's
38:31 - reusable link things which we can pretty
38:34 - much we write it once so we're gonna
38:35 - write a message component here and then
38:38 - you can basically pass something called
38:40 - props so it stands for properties and
38:43 - basically you can have like a bunch of
38:45 - messages which is one component reused
38:47 - several times
38:47 - and we can change the message contents
38:49 - through something called props so what
38:51 - we're gonna do here is cause II I just
38:53 - want to create a new file that's it so
38:58 - don't create one new file called let's
39:00 - call it message Jas and and the
39:03 - convention is to keep the capital
39:05 - letters so that it shows that it's a
39:07 - yeah there we go and we actually use
39:10 - this really cool extension guys called
39:12 - es7 snippets it's orange yeah message so
39:18 - singular okay yeah what we're gonna do
39:21 - here is we use a really nice extension
39:23 - called es7 snippets and then you can
39:25 - download from vs code marketplace and
39:27 - all you need to do now is type in type
39:31 - in RFC e so the the extension we have by
39:36 - the way guys as this one's called es7
39:39 - and this allows you to basically write
39:41 - these snippets and really easy so for
39:44 - example when i now go to the code here
39:46 - and i just type in RFC e it just shows
39:50 - me a way to basically use components you
39:53 - know export my compile because this is
39:54 - something you're constantly having to
39:56 - write and suddenly even when I was
39:57 - learning react I constantly kept having
39:59 - to write this and I would forget the
40:01 - syntax and all of that so by doing this
40:03 - it's just super nice way of doing it
40:06 - exactly and to be honest I've been
40:08 - writing react for a long time and I
40:10 - still use this just because you do you
40:13 - tend to forget a lot of this stuff and
40:14 - you don't really remember writing some
40:16 - things in the same way so it's
40:17 - completely the way to go in terms of
40:19 - saving yourself some time
40:20 - Toni says I love the way you're
40:22 - explaining your code in a simple way
40:24 - getting things I never got at the
40:27 - University for the whole semester thank
40:29 - you for that really appreciate you
40:31 - actually reaching out and saying that
40:32 - that's awesome nice all right let's keep
40:35 - it going right so the next step I guess
40:38 - is we go to app Doge is and what we want
40:41 - to do now is pretty much go over to so
40:45 - after Jace and every press come on B to
40:47 - hide the sidebar what we can do now is
40:49 - we can actually read under that message
40:51 - we can say a message like this and
40:54 - that's how we basically render out the
40:56 - message nice but right now obviously we
40:59 - don't we
41:00 - we don't actually pass through the
41:02 - message that we were just doing clear
41:04 - it's the component that we're building
41:05 - in message KS that's going to be right
41:08 - over here
41:10 - exactly yeah so all of that will live
41:13 - the JSX and logic and everything that's
41:15 - inside that component basically just
41:17 - gets pushed here
41:18 - yeah and it doesn't matter whether you
41:20 - call the file dot GSX
41:22 - or j/s exactly yeah I think that's when
41:26 - you use create reactor yeah
41:27 - then that applies okay yeah so now if we
41:31 - do
41:32 - so this calls the prop texts and then
41:36 - what we're gonna do is as you know we'll
41:38 - just call it message so we'll say inside
41:39 - of message so the problem which really
41:43 - earth call it text it's for simpler yeah
41:45 - and then here we can see a message so
41:48 - we're gonna pass in the message that we
41:49 - get when we loop through the array for
41:51 - Manya we're passing that through as a
41:53 - property called text so this is really
41:56 - important guys so what we're gonna do
41:58 - now is remember all we're doing right
42:00 - now is actually just rendering a P tag
42:01 - so we're gonna delete the P tag that we
42:03 - had mm-hmm and we're gonna pause this
42:05 - prop cool text so if we go over to
42:07 - message so what we're doing here is
42:09 - we're taking this text and passing it
42:11 - back into this file over here so we can
42:14 - grab the text and then style it and do
42:16 - whatever the hell we want
42:18 - in the message file separately because
42:20 - we don't want to go crazy styling
42:23 - everything all in one single file yeah
42:27 - and what that allow you to do is is
42:29 - actually manage your code a lot easier
42:32 - especially as your app gets bigger so
42:34 - now what we want to do is that property
42:37 - that we passed through comes here so it
42:39 - basically comes through as a parameter
42:41 - and what we need to do now is if we want
42:44 - to basically do exactly what we were
42:46 - doing before and instead of rendering a
42:48 - div here or we can just play inside you
42:50 - just put it like a net h2 so it's
42:51 - obvious that something has changed yeah
42:54 - let's do that so we could do that h2 and
42:56 - then what we can say is remember JSX or
42:58 - squiggly brackets here we say props and
43:01 - remember we could it text so that was
43:03 - the the name of the property yeah so you
43:05 - save that now mm-hmm
43:07 - and we're getting an error saying
43:08 - message is not defined that's because we
43:09 - actually need to employ inside of apt
43:12 - ojs yup
43:13 - so let's see if I can do my trick with
43:15 - controlspace yep it works so now I just
43:19 - clicked it and at the top it says
43:20 - important message from dot slash message
43:24 - so it's actually importing that
43:26 - component from this file over here
43:30 - right there nice ok cool so that's a
43:34 - really handy trick that's actually
43:36 - really handy trick yeah so we need to
43:39 - save the file so uh-huh there we go
43:42 - there we go oh nice so now it's showing
43:44 - up as a h2 tag so yo it's already
43:48 - starting to look nice what is going on
43:52 - also and yeah it's looking great it's
43:55 - actually looking really good nice ok so
44:00 - I guess the next step would be to
44:02 - actually have it so so now this H I feel
44:05 - the styling we're doing it in this
44:07 - completely separate file so okay sorry I
44:08 - keep going yeah yeah so the styling goes
44:12 - into a separate file which means that
44:13 - it's all separate and we can actually
44:15 - have his own separate CSS file and a
44:17 - bunch of stuff like that I guess what we
44:19 - should do now maybe is have a prompt
44:21 - that pops up which says enter your name
44:23 - so that way we can say Kazi said hello
44:25 - Sonny said hi
44:27 - somebody else said what's up yeah
44:28 - because right now I would have to
44:29 - manually type it in like Kazi and like
44:32 - hey what is up and then you would have
44:34 - to write something back so yeah you're
44:37 - right we should make it so it's the
44:38 - other way
44:39 - exactly yeah so it might be a cool thing
44:42 - to do now so if we go over to AB guess
44:44 - what we wanted you yep yes nice what we
44:50 - want to do now is remember guys in order
44:52 - to store anything we always kind of
44:54 - think about state right so in line 8
44:56 - what we're gonna do is we're gonna just
44:58 - drop a line and we are going to create a
45:00 - new piece of state and this is just
45:02 - gonna be used to remember the user so in
45:05 - this case actually it's call it username
45:06 - so that's gonna be the username that you
45:08 - you pretty much enter when you type in
45:10 - so we're gonna we wanna our goal here is
45:12 - to have a proper pop-up which pops up
45:14 - saying please enter your name we're
45:16 - gonna store that value inside of
45:17 - username so we're just setting up a hook
45:19 - here so we're using a hook to set up a
45:22 - piece of state so use state
45:25 - and initially it's gonna be a blank
45:27 - string because we're not gonna have any
45:29 - user that starts off when the apps
45:30 - loaded and then what we're gonna do is
45:33 - we can actually get rid of our console
45:34 - logs here to make life a little easier
45:36 - so I do recommend if you do do console
45:39 - logs clean up afterwards so that way it
45:42 - doesn't crowd the console so that way
45:43 - when you do need to use them it doesn't
45:45 - get too crazy the next thing we're gonna
45:48 - do is we're gonna use another hook so
45:50 - just like we use you stay yeah we need a
45:52 - piece of code now and there's a really
45:54 - handy hook called use effect and use
45:56 - effect allows us to run a piece of code
45:58 - once when the component loads - in our
46:01 - case it's the app component so what
46:03 - we're gonna do is we one quick question
46:05 - Ali asks why didn't you use Ajax
46:08 - okay so Ajax is pretty much the Java
46:12 - scripts are very fast evolving language
46:15 - so Ajax was first brought into play when
46:19 - they needed to do something called
46:20 - asynchronous JavaScript that's why it's
46:22 - called a Jack's okay and the reason why
46:26 - we don't use that anymore it's because
46:27 - it was the it was a very good way of
46:30 - doing things back before in the
46:33 - traditional approach and then what
46:35 - happened is it those limitations with
46:36 - Ajax you couldn't do things as much as
46:38 - you wanted to do it it was very tricky
46:40 - to write very simple like very simple
46:43 - operations and what they decided to do
46:45 - or the guys over at Facebook said was
46:47 - let's make this super easy and let's
46:50 - just build a library and that allows you
46:52 - as you to build apps in a maintainable
46:55 - scalable way which is why react came
46:57 - along and that's why we have stay that's
46:59 - why we have all these sort of things
47:00 - that we're using right now because this
47:02 - allows you to build scalable apps yeah
47:04 - without dealing with the limitations so
47:07 - overall is just some it's much simpler
47:10 - to do it would react then to do it with
47:13 - Ajax so if you have to choose between
47:14 - the two to just choose react a second
47:17 - important question I think we have by
47:19 - Alexandros thanks for this question and
47:22 - he says what is the difference between
47:23 - use effect and use State that's a really
47:28 - good question
47:29 - Cassandra so basically you stay is
47:31 - essentially going to set up a piece of
47:34 - state right so it's a piece of memory
47:36 - and I like to refer to this as like a
47:38 - short-term memory
47:39 - so every time you refresh the page the
47:41 - state disappears right so it's
47:44 - essentially the way you set up a
47:46 - variable inside of react okay so this is
47:49 - a simplest way to put it as you state is
47:51 - just setting a variable so like this is
47:53 - actually key for me to like this is
47:55 - awesome to know
47:56 - so you state is basically a variable in
47:59 - react that's how you set up variable
48:01 - like that makes it so stupid simple
48:04 - exactly that yeah okay
48:06 - and use effect is pretty much a case of
48:10 - so use effect this is literally going to
48:14 - be a block of code that gets executed
48:17 - based on a condition that's it so it's
48:20 - just a snippet of code that's gonna get
48:22 - executed based on a condition and that
48:25 - condition we can determine use effect oh
48:27 - wow that's actually another beautiful
48:29 - way to put it that's awesome yeah so
48:33 - that's the - and honestly guys these two
48:35 - things so these two hooks are gonna be
48:37 - so fundamentally powerful so I really
48:40 - recommend everyone really practices with
48:42 - these and gets used to understanding how
48:44 - you use a you state hook and I use a
48:46 - user fight took yep so for example like
48:48 - even when I'm typing in my thing like
48:50 - here right I'm saying H ey and you guys
48:53 - see how in the console it's like writing
48:54 - out H ey and whatever I'm kind of saying
48:58 - it's like doing typing that out you see
49:00 - it says hey yo so this variable input is
49:03 - really changing on the fly without even
49:05 - me hitting refresh as I'm typing it in
49:07 - it just keeps updating it so starts off
49:11 - as blank but at this point it's turned
49:14 - into hey yo and it's really the set
49:16 - input that allows you to change it like
49:18 - that on the fly so again you state
49:21 - variables in react exactly exactly and
49:26 - the next one I guess would might
49:28 - actually be easier shown in practice so
49:31 - use affect is this is the way we write
49:33 - use effect so we pretty much do it like
49:35 - this so you have the first part which is
49:38 - just an empty function and the second
49:41 - part so this is basically the first part
49:43 - what we said here run code on a
49:45 - condition so running this is where we
49:48 - run the code so this is what we run
49:51 - yeah so we run some code here and it
49:53 - basically needs to fire off in the
49:55 - condition and then the way we specify
49:57 - can let me just put that as a comment
49:59 - right there so this is going to be the
50:01 - condition right there yep nice and what
50:07 - we have in here is we collect
50:09 - dependencies and a simple way of
50:11 - thinking of a dependency is we basically
50:14 - map this to a variable and the variables
50:17 - we look at are the ones that we talked
50:18 - about earlier the ones in the state
50:20 - right so you can do two things with this
50:23 - which is really cool right so if you
50:25 - leave this blank what this is gonna do
50:27 - is going to run the code one so if it's
50:30 - blank so if it's blank inside the inside
50:32 - the dependencies yeah then this this
50:36 - code runs once when the app component
50:40 - loads got it yep right yep so this yes
50:46 - so this basically means like there are
50:48 - no conditions and by default the only
50:51 - condition it runs on is when the page
50:53 - loads that's it exactly and that's gonna
50:56 - be really fundamental one we connect
50:58 - reacts really yeah okay yeah when we
51:01 - connect it to firebase that's really
51:02 - important that point and then but say
51:05 - for example cause ii was to put input
51:07 - inside of here
51:08 - yep so now what's gonna happen is every
51:11 - single time i literally write something
51:13 - here you guys remember my input variable
51:16 - source changing and every single time my
51:20 - input variable changes the code inside
51:23 - of here runs literally every single time
51:25 - so like because it's watching for this
51:29 - input called input right so every time
51:32 - this changes it will just keep firing
51:34 - again and again and again and again so
51:36 - for now what we want to do is like not
51:38 - really have a condition exactly so right
51:42 - now what we're trying to aim for is we
51:44 - only want it to run once because we only
51:46 - want to prompt the user once right we
51:48 - only want to prompt that user once has
51:50 - something that we can do here is we can
51:51 - say prompt so prompt and then what we
51:55 - can say is please enter your name and
52:00 - what this is going to do is it's
52:01 - actually going to pop up a prompt on the
52:03 - screen and what tradish
52:04 - what we do is we say Const and then what
52:07 - we say is we actually store it here so
52:08 - we say Khan's name and then when that
52:10 - pop-up comes up and you type in your
52:12 - name it gets stored into this variable
52:14 - but in react what we can do is we
52:17 - actually have the username here and we
52:18 - have this set username so rather than
52:20 - wasting a variable here what we can do
52:23 - is we can actually just do this because
52:25 - before you change that can you undo that
52:27 - real quick because I want to show them
52:28 - literally how it looks written
52:30 - side-by-side because I think that's
52:32 - important because it's sometimes
52:33 - confusing so yeah this is how you would
52:36 - deal with a variable in react like if
52:38 - you want to change it you won't actually
52:40 - do name is equal to something you will
52:42 - do set name is equal to something or as
52:45 - a function almost you're gonna just set
52:47 - user name so let's actually make it so
52:49 - it's extremely clear so user I'm going
52:52 - to do set user name and it's like a
52:53 - function and you call it and then this
52:55 - is like whatever the new user name is so
52:58 - you can continue you can take over from
53:00 - here something that's perfect yeah
53:02 - exactly so that's what we do is so in
53:05 - this case what we this is where we would
53:07 - put the string for the username right
53:09 - yeah but what we can actually is we can
53:11 - replace that with a functional piece of
53:13 - code so we can actually go here and
53:15 - replace out with this piece of code and
53:17 - what this is gonna do is it's gonna pop
53:18 - up a prompt on the user screen so the
53:21 - browser has support for this so it's
53:23 - going to pop up prompt which is gonna
53:24 - say please enter your name and then it's
53:26 - going to set that inside of our inside
53:30 - of this state so let's then oops yeah it
53:35 - does that weird thing sometimes I think
53:36 - we have to manually and if we say I just
53:39 - import it so you guys see so that line
53:42 - of code here the prompt it opens this
53:45 - prompt up and it says please enter your
53:47 - name right over there okay and now once
53:51 - we write the name what's gonna happen is
53:54 - this name this username that I wrote is
53:57 - going to be stored in the variable
54:00 - called username okay so if I write the
54:03 - exact enter boom it just got stored
54:07 - exactly and a really good thing we can
54:10 - do that is to demonstrate that that
54:12 - actually worked is if we go over to a
54:14 - line 27
54:16 - uh-huh
54:16 - and here what we're gonna do is we're
54:18 - gonna say hello clever programmers and
54:20 - then we're gonna have a h2 underneath it
54:22 - which says welcome and then it's gonna
54:25 - have the name so it's gonna say welcome
54:26 - and in this case it'll be username yep
54:29 - right okay so if we save this I'm put on
54:31 - this so you might need to refresh yeah
54:35 - it's gonna need a refresh there you go
54:37 - let's see cool CP programmer welcome CDC
54:42 - there you go
54:44 - Wow nice right and we can actually use
54:48 - that that now when we so remember when
54:51 - we sent that message what we can
54:53 - actually do now is we can so we can
54:57 - actually pass through so right now we
55:00 - have a very flat structure so remember
55:03 - in online eight we had nice latency
55:07 - forms and thanks to do this so on line
55:11 - eight we had a very flat structure right
55:13 - we had just a bunch of strings together
55:15 - we had hello hi what's up just I'm sorry
55:18 - one one thing I want to say is like guys
55:20 - react is a stupidly simple it's um it's
55:26 - easy to also get confused by it but just
55:28 - if you just understand this you state
55:30 - and use effect which are the things that
55:31 - killed me forever in it there's
55:34 - literally nothing more to it it's so
55:36 - simple once you get this like you will
55:38 - understand almost 95% of whatever is
55:41 - happening in react a hundred percent 100
55:44 - percent you stay and use effect of the
55:46 - fundamentals and also just practice
55:48 - creating components and then using them
55:50 - in different vowels yeah that's gonna
55:53 - really really help everyone out nice
55:55 - okay so I guess what we want to do that
55:58 - is we want to have it so that it says
55:59 - Kazi said hi Kazi said what's up and so
56:03 - forth so what we can do now is messages
56:05 - we actually need to change the structure
56:07 - a little bit now so each of the messages
56:08 - typically just is a piece of text but we
56:12 - actually want these to be objects
56:13 - instead now so that way they can be they
56:15 - can have a user and they can also have a
56:18 - and a piece of text so if this just
56:21 - changed this structure a little bit so
56:23 - rather than having flat a flat structure
56:26 - we're gonna have objects and several
56:27 - objects inside of here so let's just
56:29 - have three
56:30 - objects inside of here and the first one
56:32 - we're gonna say is the key the keys are
56:34 - gonna be like as such it's gonna have
56:36 - user name and this one can e so let's
56:39 - just have some hard-coded there so user
56:40 - name is going to be sunny and the text
56:42 - for this message is gonna be let's just
56:45 - say hey what's up hey guys yeah and the
56:49 - second one would be username username is
56:52 - let's just say cozy mess it is getting a
56:57 - little long so I'm just gonna break it
56:59 - up a little bit so it's easier to see up
57:02 - what is happening is it what's up there
57:07 - we go so that's how we're basically
57:09 - structuring it now so we're gonna have
57:11 - to change our code up a little bit now
57:13 - let's just keep as two messages and so
57:15 - we have this very simple structure now
57:17 - so now the difference is is that we have
57:20 - these objects instead of just flat
57:21 - strings which means that when we rented
57:23 - it out on line 40 to do that real quick
57:27 - yeah so I know it's not the current job
57:29 - topic but why do you use material UI
57:32 - instead of bootstrap so the reason why
57:34 - we use material UI is because it's one
57:37 - it's very very modern it's very right
57:42 - like so of Cup is it's very at the front
57:44 - of what the design libraries are doing
57:46 - at the moment so previously everything
57:48 - was very rounded you had rounded designs
57:51 - 3d designs and then everything went to a
57:54 - flat consistent design
57:55 - yeah and material you I aced that and
57:57 - it's a Google library yeah so that's why
58:00 - we use it yeah bootstrap is more for
58:02 - responsive design as you know so there's
58:04 - I personally like material UI much more
58:09 - yeah that one's has also cute yeah I
58:12 - know I saw and then we've got let's have
58:18 - a look so we have what's next well we
58:24 - know we were creating the messages with
58:27 - user name and text so we're hard coding
58:31 - it in right now
58:32 - yeah so now if we go to line 42 line 42
58:36 - you pretty much see so remember guys
58:39 - before message was just a PS string but
58:42 - now it's
58:43 - object so we need to account for that
58:45 - and here what we need to say it's
58:46 - message dot text here and we're also
58:49 - gonna pass in another property now so
58:52 - it's gonna say another prop so here
58:54 - we're gonna say usually use it it's
58:56 - gonna be message dice I see how we're
59:00 - doing this is awesome
59:01 - yeah and this will really fit in nicely
59:04 - when we go into the database side of
59:06 - things so if we save that and then cool
59:08 - I can actually shine a spotlight on what
59:10 - you're talking about
59:11 - that's awesome yeah mark by the way no
59:16 - we're not saying we're gonna kick you
59:17 - out what we're saying is like you can
59:20 - now kick people out that's what we said
59:22 - in the YouTube chat so yeah but okay so
59:26 - this is okay so this is cool now should
59:28 - we go to the messages message okay yep
59:32 - so we go over to message or Jess and now
59:34 - we passed over an extra prop right so we
59:36 - actually need to use that problem so in
59:38 - this case it would be very simple to
59:40 - drop a username right yeah Propst a
59:45 - username so so you want to put
59:47 - everything about effect exactly yes and
59:50 - that's the simple as it is guys to use
59:53 - it so in this case if we save that and
59:56 - we run it we shall good khazi hey yo
60:02 - I'll show you why that happens so did a
60:04 - nice save so what username oh okay
60:08 - that's why it's happening so right now
60:10 - it's working it's working I just didn't
60:12 - save I think okay so we actually forgot
60:16 - to do one more thing so on line 24 in
60:19 - apt ojs aha remember when we were
60:21 - setting the messages we were saying it
60:23 - we were appending a string yeah this
60:27 - needs to be updated to have the new
60:29 - structure that we have so the username
60:31 - would be in this case our username so
60:34 - I'll use the name from state yep and
60:37 - then it should have so this I mean it
60:39 - should this should be an array right
60:41 - instead of just an object
60:43 - yes oh isn't it actually oh I see I see
60:48 - I see got it okay it's just pushing each
60:50 - okay makes sense
60:51 - so now our messages guys are not just
60:54 - like a flat text they are objects
60:56 - and so we're pushing an object now every
60:58 - single time instead of just a string
61:00 - exactly that yeah so we have we keep all
61:04 - the current messages and then we're
61:05 - saying also append this object right and
61:09 - now what should happen is it should say
61:11 - when we save this and we run it now it
61:13 - should be working as it was before
61:15 - okay suspend Kazi yo and oh nice it's me
61:21 - he's right Oh Logan is on nice okay
61:24 - awesome so we got profitable shortcut
61:25 - students coming in too low one of them
61:29 - is Logan and Mark Johnson just joined
61:30 - profit with JavaScript yesterday right
61:32 - he was on our lives yeah yeah that's
61:35 - really cool yeah and if you guys are
61:37 - interested in the course by the way in
61:39 - profit JavaScript it's just in the
61:40 - description so just check it out if
61:42 - you're interested but let's keep going
61:44 - nice so now what we're gonna do is we
61:48 - have the structure that we needed we
61:50 - have a prompt that pops up we can do two
61:53 - things now we can either hook this up to
61:54 - five days or we can star the messages
61:56 - okay let's style the messages first I
62:00 - think okay so what I like to use is in
62:04 - this case we can do it two ways we can
62:07 - either use material you want to just
62:08 - give it a card design or we can actually
62:10 - go ahead and make it look like a bit of
62:13 - a message so mm-hmm
62:15 - let's hope that how we do that so let's
62:19 - use this use a bunch of things that we
62:21 - have in material UI so here it's gonna
62:24 - copy a little snippet that we had so
62:26 - material UI has a really handy card
62:29 - element and it has a bunch of things
62:30 - attached to it so it has a card it has a
62:34 - card content and a bunch of other things
62:36 - so in this case I'm just copying a
62:37 - little snippet of code and we're gonna
62:39 - clean this up so this is one of the demo
62:40 - snippets so let's just do this and I'm
62:43 - gonna get rid of a bunch of this stuff
62:44 - so in this case we get rid of this we
62:47 - don't need this uh-huh we don't need
62:50 - this and here there's a bunch of like
62:54 - remember how earlier we had material ui
62:57 - gives us a bunch of things so here's an
62:58 - example where it can be called a right
63:00 - variant component and things like that
63:02 - and then
63:04 - have in this case it will be props text
63:06 - would go here because that's where we
63:09 - want the message to appear yep and we
63:12 - can get rid of this so all we did there
63:15 - as we used it a little demo piece of
63:18 - code from météo UI and now what we can
63:20 - do is we can actually import that so
63:22 - it's important of the missing
63:24 - dependencies yep right there
63:26 - and we have everything pretty much that
63:30 - we need I think actually we just need to
63:32 - have it so that it says it as we were
63:34 - currently saying it before so there we
63:36 - go we should install prettier maybe we
63:41 - are waiting to see Cod content oops
63:47 - card content there we go and this is
63:53 - complaining because we have a div so we
63:55 - can actually get rid of the outside div
63:57 - yeah yeah we just have one yep no one
64:01 - like that and if we save message so I
64:05 - don't think it would have up dead if we
64:06 - save it though nice you can see it's a
64:12 - bit hard to see it but there's like
64:14 - these floating cards you see that here's
64:17 - another good question I think we should
64:19 - answer I Jerry Smith says I don't know
64:22 - if you have already answered this by why
64:24 - are you using react
64:26 - instead of angular is it more powerful
64:28 - or you can do something that angular
64:30 - can't so it's a very good question
64:33 - angular is something that was built by
64:35 - Google Google acquired them see that did
64:38 - the main difference here guys is two
64:41 - things so in terms of popularity react
64:43 - is on fire right now it's a number one
64:46 - most growing library that is being used
64:48 - if the demand is so high right now so
64:51 - it's one massive reason for using react
64:53 - and learning react also it's super super
64:57 - super lightweight guys angular is a
65:00 - framework which means that you and you
65:02 - need to know a bunch of things in order
65:04 - just to get started working but you can
65:07 - see here in less than an unless in half
65:09 - an hour we have the app running we had
65:11 - things working everything was doing it
65:13 - and you can learn things as you need to
65:14 - like you to state use effect
65:17 - angular is a much more heavy framework
65:21 - and to be honest in terms of what you
65:23 - can achieve with both honestly you can
65:26 - do everything you can in react you can
65:28 - everything you can do every single thing
65:30 - that you can do in angular inside of
65:31 - react and big companies use react so
65:33 - Instagram Facebook tinder uber they will
65:37 - have react so here is the best way to
65:41 - basically visualize what Sonny just said
65:44 - so if you look over here we have angular
65:46 - and react right blue is angular gray is
65:49 - react if you look at the current job
65:51 - market and what's going on it looks
65:53 - pretty much the same the demand looks
65:56 - the same right over here in this graph
65:58 - and this is 2018 right the equal amount
66:01 - on LinkedIn equal amount on indeed equal
66:03 - amount and Simply Hired but here is the
66:06 - really interesting one to look at so
66:08 - interest over time and this is in the
66:10 - last 12 months so this the red one is
66:13 - react jobs and the yellow one is angular
66:16 - jobs and if you look over here you can
66:19 - see that react jobs are just demolishing
66:22 - angular jobs and angular jobs are
66:24 - actually steeply going down on a
66:26 - downward trend so if you're learning
66:28 - right now and you want to decide react
66:31 - is the way to go exactly that's actually
66:34 - a really good demonstration of that so
66:36 - you can see especially this year guys
66:38 - there's been a huge separation in terms
66:41 - of react popularity versus angular
66:43 - popularity so that's a really really
66:46 - good diagram to show that so honestly if
66:48 - you're on the fence of which one to
66:50 - learn I definitely choose react it's
66:53 - also much funny to learn it's much more
66:55 - lightweight and you can just learn
66:56 - things as you need to as opposed to
66:58 - learning so much at once so this jump
67:01 - straight back just want to say that this
67:02 - live stream is so freakin awesome like
67:05 - it's unbelievable like all the value and
67:08 - just all the visual aid and like this is
67:10 - this is pretty freakin awesome dude
67:12 - yeah it's crazy and once we hook it up
67:15 - to firebase everyone will really see the
67:17 - power of it and what we can do with that
67:18 - yeah so what we're gonna do now is we're
67:22 - just gonna basically kind of make this
67:23 - look very simple as a message so let's
67:26 - give this card a class of just this to
67:29 - say in this case messy
67:30 - underscore mr. squid mr. slow Cod and
67:35 - what we're gonna do here is we actually
67:37 - we need to create a message dot CSS file
67:39 - so to in order to style this component
67:42 - so let's go ahead and create a message
67:44 - to a CSS file okay so let's go over here
67:48 - I'll go message it should be capitalized
67:50 - or just lowercase capitalized do
67:53 - anything which is talking about a
67:56 - component you know okay and then what we
67:59 - do is be in message J's we just need to
68:01 - employ it so we say import message dot
68:05 - CSS so that's inside of message jeaious
68:09 - uh-huh that's inside a message Jess yeah
68:12 - the top yep there we go and that's how
68:16 - we actually bring it in to the inside of
68:18 - the auto content at all I don't know if
68:23 - it does know oh it should sometimes
68:25 - that's already how did it come there
68:27 - already did you add it in oh I was
68:29 - typing in I see how cows like how does
68:31 - it just show up okay cool yeah
68:33 - so we basically add the impose statement
68:36 - and then we go into our message door CSS
68:38 - and remember guys we gave the message
68:40 - card class here right so we just want to
68:43 - give it a very simple UI for now and
68:45 - what we're gonna do is we're gonna give
68:47 - it a simple you are I'm just gonna
68:48 - quickly find some design for this so
68:51 - we've got final design I will take this
68:54 - question on Chris awesome question so
68:55 - Miguel says what would be the better
68:57 - database to work with react a sequel or
68:59 - a non sequel and I was actually talking
69:01 - with sunny about this yesterday but the
69:03 - great thing about firebase is actually a
69:07 - hybrid between a sequel and no sequel
69:09 - and so it's extremely fast and that's
69:13 - what we would recommend that you stick
69:16 - to when putting together a database is
69:19 - very powerful extremely simple and can
69:22 - scale to you know however much you want
69:24 - to scale it exactly yeah perfect
69:30 - so if we just save message right now
69:33 - I've added a little bit of styling to it
69:36 - and the bits of styling I added was
69:38 - pretty much a little padding around it
69:40 - so in message that CSS and some tiny
69:43 - padding and I
69:44 - the width which basically just fits as
69:47 - much as we need to so you can see now
69:49 - only gonna use much width as it needs to
69:52 - right yeah I see Yeah right there yeah
69:55 - as for the sort of look and feel of it
69:57 - at the moment we can carry on styling it
69:58 - so right now they're all touching each
70:00 - other we don't really want them to be
70:01 - next to each other like that yeah let's
70:03 - give it a little bit of a margin so if
70:05 - we say a 10 pixel margin inside of here
70:08 - what we can then do is if we go back and
70:10 - check it so go back let's move around I
70:13 - just started following you
70:15 - let's have a look see if I go into
70:16 - message now awesome that's really - yeah
70:19 - yeah nice yeah so what we can do now is
70:22 - if we are in is go back to the code so
70:25 - back to the demo yep and then see yep
70:29 - there you go lovely so we can see that
70:31 - oh nice Wow there is this like little
70:34 - margin right here exactly yeah okay what
70:38 - we want to do now is we just need to
70:40 - have one little differentiation which is
70:43 - in most of these messenger apps so if we
70:45 - look at the one that we built so if we
70:47 - look at the the angry link inside on the
70:49 - in the tab well you know is oh what's up
70:54 - oh yeah that's our little bit yes if you
70:57 - go to the angry link in react so uh
71:01 - where is the angle Rocklin so that's
71:04 - really why yeah
71:05 - so you notice how the left side is all
71:08 - of the users that aren't cozy right
71:10 - right but whenever Karthi types in so if
71:13 - you type a message in here and - now you
71:16 - can see like it comes up slightly
71:18 - different right yeah it comes up and it
71:21 - looks a little bit different because
71:22 - that message is from you so what we need
71:24 - to check is we need to say if the
71:27 - username is the username that you've
71:29 - entered and what we want is we want to
71:32 - style it a little bit different right
71:33 - yeah and the way we do that is if we go
71:37 - over to message J ass yep and what we
71:41 - can do now is we can simply check so
71:45 - props username for the message okay so
71:49 - why do I actually do here is if we go -
71:54 - oh yeah you're following me right yeah
71:56 - so what we can do now is
71:58 - is instead of passing in as separate
72:00 - things right why didn't what I like to
72:02 - do at this point is actually pass the
72:04 - message as an overall object so we find
72:07 - I am as an object right yes and we
72:10 - simply passed the username not as the
72:12 - message username but the person who's
72:13 - logged in hmm all right so the person
72:16 - who's logged in and then we have the
72:17 - message because remember a message can
72:20 - be have a user which isn't the user
72:23 - who's logged in so it's kind of you
72:24 - should separate these two things right
72:26 - yeah so now if we go inside of our
72:29 - message component the structures
72:31 - slightly changed so if we can actually
72:33 - do something called es6 D structuring
72:35 - here and you can see it's actually
72:37 - broken the app because we've changed the
72:39 - structure of our props yeah so inside on
72:42 - line five now what we can do is we can D
72:44 - structure our props and we can say we
72:46 - just now pass in a message and we pass
72:48 - in a username yeah right at the top we
72:52 - have the message so previously it was
72:55 - props username so and now it would be
72:57 - message don't username messaged or text
73:00 - yeah but the actual username would be
73:03 - the person who's logged in so in this
73:05 - case we can run a smooth little check
73:07 - which says is this the user has logged
73:10 - in right yep and the way we do that is
73:13 - we say if the username is equivalent so
73:17 - if it equals the message don't username
73:20 - then this would be true okay does that
73:26 - make sense
73:26 - yep yeah and the reason why we do this
73:29 - now is because we can do a really cool
73:31 - little trick here and what we can say is
73:33 - we can say all of the styling that we
73:35 - currently see is here inside of this
73:38 - class name message right yeah what we
73:40 - can do now is we can actually so first
73:42 - is user we could actually use we can
73:45 - actually use a different type of styling
73:47 - right that's what we're trying to get at
73:49 - exactly got it
73:51 - so guys like you know how on your phone
73:52 - when you send somebody a message it
73:54 - might be like green or blue but then
73:56 - when big send your message backs like
73:58 - gray yes exactly that so in this case
74:03 - what we can do is we can have class name
74:05 - and then we basically we wrap it in JSX
74:07 - yeah we give it these curly brackets
74:10 - that these back ticks
74:11 - which of these special brands and waxes
74:13 - we currently we want every card to have
74:15 - the original styling that we gave it
74:17 - what if it's a user then what we do is
74:21 - we put this special syntax here which
74:23 - allows us to have JavaScript inside of
74:26 - our little backticks yeah we say if it's
74:28 - a user so if it's a user then what we
74:32 - want to do is basically add this class
74:34 - in so what we're gonna do is we're gonna
74:36 - say message on this quote under school
74:38 - user so only the person who is logged in
74:41 - is going to get this class I've message
74:44 - only then do they get this class of
74:47 - styling mm-hmm right so now if we go to
74:50 - message CSS and hopefully we get this
74:53 - right in the first try yeah what we can
74:55 - do is we can add the a bit of styling
74:57 - here which says message user and we've
75:01 - got margin left which is basically gonna
75:02 - push the margin left is gonna basically
75:04 - notice how in the react app that we
75:07 - built all of the users information is
75:10 - always on the right side so if you're
75:11 - logged in and you send a message it's on
75:13 - the right side and it's gonna be blue
75:15 - right so what we can do now is text the
75:19 - line can should be left to inner city so
75:22 - if we say that so now I called the if
75:24 - you want to just refresh the the app
75:27 - yeah and typing Kazi and if you type in
75:31 - a message saying hello and go down okay
75:35 - so right now it's not actually coming
75:36 - through so we need to go to our message
75:38 - and see what's going on so message gets
75:41 - passed here as message username gets
75:43 - passed as username yeah I think it
75:45 - wasn't saved so I just saved it yeah
75:48 - it's not working
75:49 - awesome right so what I would do here is
75:54 - you're putting Cosima's in with a
75:56 - capital K that you put in okay no so why
76:00 - would you here to check that it works so
76:02 - now if you type in like hey right so we
76:05 - can see that the styling is not actually
76:06 - getting applied so at this point why
76:08 - would you is our debugging so I'd write
76:09 - ticket where are you know I'm one that
76:12 - just talking about the I see okay yeah
76:15 - inspect yep inspect that uh-huh
76:18 - if we just make this a little bit bigger
76:20 - so we can see so right now it's really
76:22 - small because of the yes you only took
76:24 - on elements
76:25 - yep and you should be able to see so
76:31 - right now it's a bit hard to see cuz
76:33 - we're zoomed in but what we can actually
76:35 - do instead maybe is do it as let's say
76:40 - use a card right so I'll tell you what
76:42 - would you
76:43 - let's slightly change it up so let's go
76:46 - back to the code because it's gonna be
76:48 - hard to show for that way so what we do
76:50 - is we're gonna either div instead which
76:51 - is gonna surround so a div is just a
76:53 - container guys right we're gonna chuck
76:56 - all of this stuff inside of that so
76:58 - remember everything we saw previously is
77:00 - now the only differences is it's gonna
77:02 - be inside of a container we're gonna
77:04 - apply those same rules that we just
77:06 - spoke about to that container so we're
77:09 - gonna have those same rules that we
77:11 - spoke about in container and then what
77:13 - we're gonna do is we're gonna say we're
77:16 - gonna do a similar thing we're gonna add
77:19 - some classes here so we're gonna say if
77:22 - it's a user right then we're gonna give
77:25 - it this nice okay I see right yeah what
77:29 - we're gonna do is we're going to say if
77:31 - it's a user to get the user card
77:33 - starting otherwise they get the guest
77:34 - card starting okay right and what we
77:38 - have here is let's have a look if I go
77:41 - to your message don't CSS and we do this
77:44 - and I add it so I didn't starting then
77:46 - I'll use your card okay so now use your
77:48 - card is blue and guest card is gray yep
77:51 - so that should be working though so if
77:53 - we refresh that I say Kazi oh that is
77:59 - clean hey what is going on okay nice so
78:05 - now all my messages are blue okay and if
78:07 - I have your message that's not mine
78:09 - then it's gonna be that okay now yeah
78:11 - awesome so we've actually set up the
78:14 - fundamentals here for the beginning of
78:16 - the app right yeah and what we I guess
78:19 - what we could then do is we could I
78:21 - think this says hook up firebase at this
78:23 - point right yeah so hold on let me just
78:26 - visually show so here's the it's a user
78:29 - card is the blue one right that's right
78:31 - there yeah and then this is the guest
78:33 - card and that's right here okay and this
78:36 - dialing is happening on that if-then
78:38 - statement so go just go
78:39 - back to your if-then statement yeah so
78:42 - actually I would have to do it on this
78:43 - computer so message digests so this is
78:48 - where we're deciding if the user is
78:49 - logged in if their user then show the
78:52 - user card otherwise show this styling
78:56 - exactly cool yeah that is that's a
78:59 - really powerful thing what we have here
79:01 - that little if like a little ternary
79:03 - yeah yes the tanneries are extremely
79:05 - powerful and react and you use them all
79:07 - over the place so this is a case of
79:08 - where you have an if-else yeah and the
79:11 - one above it is a case of if you just
79:13 - want to have if this is true then show
79:15 - it alright so now we're about to do some
79:17 - firebase stuff yeah so let's do stuff
79:20 - first that we're gonna do is if you
79:22 - wanna click on the little bugger icon
79:24 - menu I like that Alexandra asks is this
79:26 - is message underscore underscore user
79:28 - using BEM yes I'm so happy yeah so
79:37 - that's a really good point if I actually
79:39 - completely forgot so if you know it's
79:41 - the way I was styling using a convention
79:44 - known as BEM so it's be e/m and I really
79:47 - recommend everyone goes and lanza and
79:49 - the way we use BAM is we say it so for
79:51 - example here the first part of the the
79:54 - class name is the component and the
79:57 - second part is the sort of the element
80:00 - that we're talking about and the reason
80:01 - why this is really good is because when
80:03 - your app grows and it gets bigger it's a
80:05 - really standardized approach to always
80:08 - knowing where everything is and always
80:10 - knowing that everything is consistent
80:12 - within your app so it's something that I
80:14 - would really recommend that everyone
80:16 - learns when they're using react because
80:17 - it will save you a bunch when somebody
80:19 - introduced them to me the first time I
80:21 - actually didn't like it I thought why am
80:22 - i learning this honestly guys is saved
80:24 - me so much headache and I've done so
80:27 - many professional jobs with that and it
80:29 - saved me a bunch of a bunch of headache
80:31 - yes I would recommend definitely
80:32 - learning and investing some time in BEM
80:35 - dope okay awesome
80:37 - nice such a cool question yeah I know
80:40 - you were gonna be pumped when that's why
80:42 - I've dropped it on the screen yeah
80:44 - awesome
80:45 - nice okay so now what we're gonna do is
80:47 - keep the burger icon on the top left so
80:49 - those three lines uh-huh
80:51 - and we're gonna click on database got it
80:54 - yep and we need to set up the firestore
80:58 - database so here you want to click
80:59 - create database mm-hmm and click in
81:02 - start in test mode yep and then you want
81:06 - to just set that so we don't need to
81:09 - know that bit from now so we just think
81:10 - next yeah and then you can just click
81:14 - any card file store location and it
81:16 - should be fine uh-huh and what this is
81:19 - gonna do guys is there's no setup that
81:21 - you would be traditionally used to right
81:23 - this is doing everything right now it's
81:25 - setting up a file store database its
81:27 - handling where all the servers are being
81:29 - deployed you don't have to manage any of
81:31 - that no we need do now is go into our
81:34 - react project so instead of our terminal
81:37 - so while we're over all what we're
81:39 - trying to do right now is host our
81:40 - website so somebody can go to blah blah
81:42 - blah dot-com and use it so your Facebook
81:45 - message of clone com
81:46 - so that's one important thing we're
81:48 - trying to do right now the second
81:50 - important thing that we're trying to do
81:51 - here is now we want to give it a
81:52 - database because up until now when I hit
81:54 - refresh if I type in something and I hit
81:57 - refresh it's gone right and then it has
81:59 - to start all over again I mean this is
82:01 - that's that's fun for now but like it's
82:04 - not gonna be a fun app for anybody to
82:06 - use because all the memory is gonna be
82:08 - deleted so those are the two things
82:09 - we're about to do hosting online and
82:11 - getting a database yeah exactly
82:13 - yeah so now what we want to do is we
82:17 - just created a file stored a base so
82:19 - this is a real time database
82:21 - and it has this sort of collection
82:23 - document collection document structure
82:24 - we won't go into that too much but the
82:27 - point is the collection in our case is
82:28 - going to be messages so let's go ahead
82:30 - and create a collection uh-huh create a
82:33 - collection yep so this is give me
82:35 - messages and imagine a collection is
82:37 - basically like an array just a list of
82:39 - documents so the first document the
82:41 - message is gonna be is for example let's
82:43 - just say like hey what's up there we go
82:46 - and the next one is for self alright the
82:51 - next one is gonna be username coffee
82:53 - puppy this has to be proper you know and
83:00 - then there we go and this add one more
83:02 - so that we can just proof it so we're
83:04 - gonna
83:04 - document and the message so remember the
83:07 - keys are quite important so you need to
83:09 - make sure the message is correct you
83:10 - know what's going on and the next one is
83:13 - gonna be username and that could be
83:16 - actually let's make it somebody from the
83:19 - live stream so Jana yeah nice perfect so
83:25 - there we go
83:25 - so now we have two records so we have
83:28 - two documents inside of this collection
83:29 - so you would think at this point oh I
83:32 - need to make a back-end so and have some
83:34 - API and everything like that you don't
83:36 - need any of that all you need to do now
83:38 - is head over to the terminal yep and
83:41 - let's do MPM install firebase and what
83:47 - this is doing is gonna pull in all of
83:49 - the firebase modules into our project
83:51 - and that's pretty much all we need so I
83:53 - have a very handy snippet of code I use
83:56 - and I'm gonna send it to you I'm gonna
83:59 - add it actually so what I want you to do
84:01 - is just create a firebase j/s file
84:04 - mm-hmm so I'll create it right over here
84:06 - so we call fire based at j/s yeah and
84:09 - we're gonna consider this to be like a
84:10 - config file right and here what we're
84:13 - gonna do is we are gonna basically let's
84:16 - go over to you where is it I let's see
84:18 - if I can yeah yeah five days yes and
84:21 - writing it right yeah project settings
84:25 - and then oh yes I actually get our
84:29 - config so guys we need to get like some
84:32 - configuration stuff set up so now the
84:34 - way we do that is we go over to that cog
84:36 - that called you into you and then we go
84:37 - to the config toggle and you see this
84:40 - little object right now we just need the
84:42 - inner contents of that right so
84:46 - everything inside of the object we need
84:50 - so you can see yes we can get it to the
84:53 - top and the bottom so nice I just took
84:56 - all the content from there and popped it
84:58 - in here so just to be clear the part
85:01 - that we added in is actually you don't
85:05 - need the first line you can just grab
85:07 - everything from the inner of it and then
85:10 - like pop it in right there that's what
85:14 - I've done and a brief explanation of
85:16 - what this code is doing
85:17 - so at the top we're just importing the
85:20 - firebase module from the one that we
85:21 - installed so we basically put in all the
85:23 - code we said employers so that we can
85:25 - use it then they give us this very handy
85:28 - function could initialize up and all we
85:30 - need to do this past this object which
85:32 - is a convict that car they just grabbed
85:33 - yeah and best and then tell it does all
85:37 - of the work behind the scenes them so it
85:38 - basically at that point gets goes and
85:41 - connects to firebase and pushes
85:42 - everything into this one firebase app so
85:44 - this is like our magic little variable
85:46 - right now then what we do is we
85:49 - initialize it by saying got five store
85:51 - which is the database that we just
85:53 - created and we assign it to this little
85:55 - DB variable and then we just simply
85:56 - export it so instead of doing this
85:58 - actually I'm gonna say Explorer default
86:00 - DB which is a bit easier uh-huh and then
86:03 - now we can use this database variable in
86:06 - any of our files in our app J S or in
86:09 - our message J s anywhere else right yeah
86:12 - exactly and that's like super super
86:15 - simple there's no API request that we
86:17 - need to do or anything like that so now
86:19 - what we want to do is we'll save this
86:21 - file and let's just go over to our app
86:24 - right now you know let's go to our apt
86:29 - ojs well oh yes what you meant so it's
86:34 - just a purchase and then what we need to
86:35 - do now is we need to create a user fact
86:39 - and the reason why we're gonna create
86:41 - another user effect so this is a cool
86:42 - fun fact I didn't actually know you
86:44 - could have several user facts so you can
86:46 - have as many user facts as you want it
86:47 - took me a while to figure that one out
86:49 - but you can have as many as you want for
86:51 - different purposes but with this
86:52 - definition honestly like the way you
86:54 - explained it it makes it easy for me to
86:56 - unbel to understand that right away that
86:58 - like okay if it's just tied to a
87:00 - condition then you can have as many
87:02 - Yousef X that they just run on those
87:04 - given conditions exactly yeah and only
87:07 - see that's if you remember it that way
87:09 - it would always be simple yeah that's
87:11 - why even if you have like five of them
87:12 - you just look for the condition that h1
87:14 - runs on and it answers a question so in
87:17 - this case what we want to do now is you
87:20 - can see on line nine nine nine and ten
87:22 - we just hard code the values currently
87:24 - right but we want to pull those values
87:26 - from the database so we want some kind
87:28 - of code
87:29 - once when the app loads and it doesn't
87:32 - run off to them basically what we're
87:34 - gonna do here is let's just write the
87:36 - template so here in order to do that we
87:39 - add these square brackets and we have no
87:41 - dependencies and that is pretty much
87:43 - gonna run when so this will run once
87:47 - when the app component is I don't even
87:52 - know if this is helpful or not but what
87:57 - we want to do that it's pretty much of
88:00 - it so that when the app component loads
88:03 - we're gonna do something really really
88:05 - cool right now we're basically gonna say
88:07 - DB doc collection oh I don't know why
88:10 - that DeVito collection and cozy code the
88:14 - collection messages earlier uh-huh that
88:16 - at a file store and then what we want to
88:19 - do is we have this amazing function
88:22 - called on snapshot nice and what this is
88:24 - gonna do is every single time the
88:27 - database changes yeah imagine like a
88:29 - camera takes a picture of the database
88:30 - right and that gets stored into
88:33 - something called a snapshot so for
88:35 - example like if I go to the firebase
88:36 - right and I'm over here so every single
88:40 - time I add in any new record this will
88:44 - detect it and run so on snapshot just
88:46 - says hey any changes I see here I'm
88:49 - running this piece of code exactly yeah
88:52 - exactly that and all the information
88:54 - from that snapshot gets put into that
88:56 - one variable snapshot so from that now
88:59 - oh wait hold on hold on okay so you're
89:02 - telling me
89:02 - oh dude that's actually huge I think
89:04 - even that's clear something up for me so
89:06 - all of these documents are in the
89:10 - snapshot right there
89:11 - exactly whoa that is mind-blowing
89:15 - okay so awesome that makes everything
89:17 - really simple cuz then if that's true
89:19 - then I just know this is an array of
89:20 - objects right it's kind of like a JSON
89:22 - structure yeah so the way we get to it
89:25 - is we say snapshot docs and that will
89:27 - give you all of the stuff god its
89:29 - snapshot docs
89:30 - okay because we don't want to do
89:32 - snapshot doc collection right we're
89:34 - gonna do snapshot Doc's exactly oh yeah
89:36 - they give you a bunch of other metadata
89:38 - but with it but the one that we're
89:39 - interested is the docs we're just
89:41 - interested in this right here got it
89:43 - so now what we need to do is basically
89:46 - we're gonna say set messages because we
89:49 - want to set our messages right and this
89:51 - is the part which gets a little
89:53 - intricate so let's do a full screen on
89:56 - this because it might be a little bit of
89:58 - a long line of code so now to do is not
90:00 - only we're gonna do full screen we're
90:01 - gonna even do this no I'm kidding yeah
90:03 - so now we're gonna do is we're gonna say
90:06 - snapshot and what we're saying is dot
90:08 - docx so that lists that cause you showed
90:10 - earlier so I'm sure got Docs and then
90:12 - we're gonna say map so Docs yes my
90:15 - vehicles being weight so I guess I map
90:17 - through every single doc and we're gonna
90:19 - say for every doc right what we're doing
90:23 - is we're going to go ahead and grab the
90:27 - doc dot data right guys what the doctor
90:32 - data is gonna do dr. day here is gonna
90:34 - do is remember when you added stuff to
90:37 - the database hold on before before you
90:39 - go cuz I'm gonna we're gonna start
90:41 - losing people right at the second so
90:42 - just let's just break this down so first
90:44 - this Doc's right here is this entire
90:47 - thing yeah exactly
90:49 - okay then when I'm looping through this
90:50 - doc here is each specific doc right
90:54 - there every single time I loop through
90:55 - so the first loop iteration is gonna be
90:57 - that and the second loop it's gonna be
91:00 - this yeah exactly
91:01 - got it okay and when I said doc dot data
91:04 - what it's really doing is taking this
91:05 - specific doc and then giving me this
91:08 - data right here which has the message
91:09 - and the username yeah and it returns as
91:12 - an object right and every okay so and I
91:15 - get it back as an object so this will
91:17 - just be like one singular like squiggly
91:20 - bracket object exactly remember like
91:24 - because it's mapping through it you're
91:26 - basically getting this structure so if
91:28 - you go to line nine and ten we're
91:30 - basically getting this exact structure
91:32 - that we had earlier so remember like
91:35 - it's not an array of objects yep it's
91:37 - this exact thing yep you're right yeah
91:39 - so that's exactly what's happening with
91:41 - this with this line of code right yeah
91:43 - and what we're doing is we're just
91:44 - saying that just to be brutally brutally
91:47 - clear because this is where oftentimes
91:49 - for me things stop making sense cuz if I
91:53 - ever get like a little loss so this is
91:55 - going to evaluate to literal
91:57 - something like this an object yep and
91:59 - there yeah exactly that each time yep
92:02 - okay I just noticed as well our key that
92:05 - we used over there is text and we in the
92:07 - database we used message so let's go
92:10 - ahead and quickly change that in yes we
92:13 - can yeah so we can change that to
92:15 - message message and then in our code we
92:18 - go ahead into message jas we can change
92:21 - line 17 to be message dot message there
92:25 - we go nice enough yep so in app DOJ's
92:29 - now what we can do is yes so that's it
92:32 - that's this is honestly one of the most
92:34 - powerful lines of code I've ever come
92:36 - across in my life when it comes to you
92:39 - like coding and anything like that
92:41 - guys this literally is we call it a
92:43 - listener and the reason why it's a
92:45 - listener is because it all it's doing is
92:48 - listening for any changes at which point
92:51 - it shoots off a snapshot yes like a
92:53 - real-time capture of the database and
92:55 - then it basically goes through each one
92:58 - so iterates through every single one it
93:00 - creates this structure that we spoke
93:02 - about earlier yeah so it runs so so once
93:06 - again it runs every time so if I hit add
93:08 - new document and there's a new document
93:11 - that gets added here right new as soon
93:14 - as I do that this piece of code is going
93:17 - to run exactly got it
93:20 - okay exactly yeah so this literally will
93:23 - always be listening for for new input so
93:26 - that the only thing I think that
93:27 - sometimes can slightly make it confusing
93:30 - is that use effect as a listener and
93:32 - then this snapshot thing is a listener
93:34 - within it right yes yeah okay so that's
93:39 - a really good point because that's
93:40 - usually where do you know as people get
93:42 - caught up on this yeah so I honestly the
93:45 - one thing I'll just say is just practice
93:47 - this line this line that we had his
93:49 - remember that a user fact just runs code
93:51 - on a condition yep this yeah in this
93:53 - case this use effect is only running
93:55 - when the page loads yeah okay cool
93:59 - exactly so now what we're gonna do is to
94:02 - make sure that it doesn't get interfered
94:04 - with our hard-coded stuff we're gonna
94:05 - get rid of the hard-coded stuff because
94:07 - now we want Oliver wanna hold
94:09 - information
94:10 - this database and actually like put it
94:12 - in the app right yep exactly
94:15 - Scott it so now we're gonna save at this
94:18 - point so we're gonna just kind of save
94:19 - it and then we're gonna go and check and
94:20 - now we should see the data that you and
94:25 - DB is not defined so we just have to
94:27 - make sure that we you know we imported
94:32 - so we just import it right here control
94:35 - space was a shortcut
94:37 - yep and hopefully if everything's gone
94:41 - well we should see what it's all gonna
94:44 - break so let's go cause you nice so now
94:55 - just to show side-by-side so here is the
95:03 - database and in the database we have
95:06 - what is going on Jana and then you can
95:08 - see this actually right here right and
95:10 - then where it says cause II what is up
95:12 - you can see it's in my firebase database
95:14 - right here and that's showing up right
95:17 - there so now we're pulling straight from
95:20 - the database this is not hard-coded
95:22 - anywhere exactly so you've got a real
95:25 - sync to the database right now yep
95:28 - the next step I guess is that when we
95:31 - actually send a message so this people
95:33 - blow your mind as well because this bits
95:35 - actually even simpler so this is the
95:36 - line of dis over here this line of code
95:39 - is what's reading and outputting all of
95:41 - this yeah
95:42 - remember guys that's a real time
95:44 - listener right now so actually you know
95:46 - be cool cause if you put the app on the
95:48 - left
95:48 - uh-huh you get and you put firebase on
95:51 - the right uh-huh and add a new document
95:53 - exactly yeah okay you scroll down so we
95:55 - can see it as it drops in okay so I'll
95:58 - scroll down right there yeah okay so
96:00 - I'll say message is what is up fire and
96:07 - then for username I'll put in no no Amy
96:13 - Ruth okay yep cool and we'll do that and
96:18 - let's hit save boom right there that was
96:23 - real time like a Dasom real time and all
96:28 - it took was that one amazingly powerful
96:30 - life we didn't even hit refresh yeah
96:33 - that's it it's just what I'm saying
96:35 - damn that's six okay beautiful
96:38 - so not only roots actually asked a good
96:42 - question she said can you please tell me
96:43 - about web development course please
96:45 - where can I start yep
96:47 - so web development course the best one
96:51 - on the planet
96:52 - it's called profit with JavaScript if
96:55 - you guys are interested you want to not
96:57 - only learn what we're building here but
96:59 - but but go deep and actually learn how
97:01 - to make an income then you would be very
97:04 - silly to actually not join it because
97:06 - it's the best course on the planet so
97:07 - definitely at the very least just right
97:10 - now like if you are here right now you
97:12 - got value wait till what you see in this
97:15 - course in the description below go and
97:17 - click the link below it's gonna say
97:19 - profit with JavaScript it's gonna take
97:21 - you to the page and that page is gonna
97:23 - have all the information and what you're
97:25 - gonna learn so you have nothing to lose
97:28 - right now definitely just go and check
97:30 - it out and then you can come back here
97:32 - we'll still be live-streaming and
97:34 - remember this is going to be recorded
97:35 - but let's get back exactly awesome yes
97:41 - so what we're doing now is we're
97:42 - actually having it so that when we send
97:44 - a message it's actually gonna push so
97:47 - rather than cause you having to go in
97:48 - and manually add it because that
97:49 - wouldn't be ideal for the user we're
97:51 - gonna do now is we're gonna have it so
97:53 - let's go over to line 27 okay what are
97:56 - we doing right now we're gonna update
97:58 - our send message so that now it actually
98:00 - pushes into the database cool right now
98:02 - we have this which is put which used to
98:05 - push locally and also what we're gonna
98:07 - do is Sam says guys you should use the
98:11 - order by time time and indeed create a
98:13 - time sum in the database because you
98:15 - guys saw what happened when we added
98:16 - Naomi's message right it got added
98:18 - somewhere in the middle when it really
98:20 - should have been added either to the top
98:21 - or all the way to the bottom so we're
98:23 - gonna actually make it so all the most
98:25 - recent messages show up all the way to
98:27 - the top exactly exactly yeah so the way
98:32 - we do that would be it's actually
98:34 - simpler when we push the message in
98:36 - because we can
98:37 - she'd make it use the correct timestamp
98:39 - so what we're gonna do now is we're
98:41 - gonna do something here
98:42 - we're gonna say DB doc collection yep so
98:45 - I'm just talking about is when I hit
98:48 - send message up until now I wasn't
98:50 - sending it to the database so now we're
98:52 - gonna actually send it to our firebase
98:55 - database exactly yeah
98:57 - so the collection that we want to push
98:59 - it into was the one code messages and
99:02 - that's the one that cause he was showing
99:03 - earlier and what we need to do now is we
99:06 - need to actually add is we just need to
99:08 - say literally add and all we do is we
99:12 - push in an object so this object is
99:14 - gonna have the shape that we was adding
99:16 - previously but it's a very good point
99:18 - that was said that is we are gonna add a
99:20 - timestamp in addition to us so here
99:22 - we'll say message and our message would
99:25 - be whatever it was inside of the input
99:27 - that's whatever the user typed in yeah
99:29 - username it's gonna be what was inside
99:32 - of the username state which is what they
99:35 - entered when the prompt popped up and
99:37 - what final one
99:39 - - basically because it's very good point
99:41 - because we do need to keep track of
99:43 - where yeah yeah we want to add like a
99:47 - time saying timestamp here at some point
99:50 - and so this for this we will be choosing
99:53 - timestamp and then adding in a time when
99:56 - the message came in so that's the third
99:57 - field we're gonna be adding that we
99:59 - currently don't have yet exactly and the
100:02 - way we do that is we actually need to
100:04 - import firebase at the top so the first
100:07 - thing we're gonna do is we're gonna go
100:09 - to the top of the file and we're gonna
100:10 - say import import firebase from firebase
100:15 - and notice how this one is pulling it
100:18 - from this one right here is pulling it
100:20 - from the actual file base module and
100:22 - this one is pulling it in from our
100:23 - config file that we saw earlier yeah so
100:26 - the reason why we need the actual
100:27 - firebase module here is because we go
100:30 - back to line 34 mm-hmm what we're doing
100:32 - here is we're saying firebase dot file
100:35 - store which is the database yeah what
100:39 - we're gonna do here is we access
100:40 - something called filled value and then
100:43 - we say server timestamp and now I would
100:46 - explain what this means so imagine so
100:49 - right now I'm saying
100:51 - Kazi singing in LA we both have
100:53 - different time zones right yep so if
100:55 - he's his time zone it's gonna be
100:57 - different to my time zone yep so the one
100:59 - that we use is the one that's saying on
101:01 - the server like literally where this
101:03 - database is so like wherever firebase is
101:07 - hosting your database you want to use
101:09 - their local time zone exactly that yeah
101:13 - exactly that and now what this would
101:15 - mean is it should at this point be so
101:18 - when we start pushing messages and we
101:20 - can actually get rid of this code here
101:21 - because we're no longer I'm gonna be
101:23 - saying our state we still wanna we still
101:25 - want to clear the input because it's a
101:27 - nice user experience but now if we save
101:29 - this file we should actually see that
101:33 - everything should be working as we
101:34 - expect it to be but I don't think you'll
101:36 - be solving it but it should be pushing
101:38 - it into the database so now if we say
101:40 - hey so you see him right now
101:41 - it pushed that message into the database
101:45 - right but it's not in the my order which
101:47 - is confusing now let's go here and like
101:49 - the good thing that's happening is that
101:51 - now we're getting this timestamp field
101:54 - yeah
101:55 - so now if I go to the new messages that
101:57 - I added here's another one with a
101:59 - timestamp field but it's still not
102:01 - ordering it by it yeah so the problem
102:05 - here is that we had some records I've
102:06 - added before so what we're gonna do just
102:08 - to keep a clean slate is let's go ahead
102:10 - and clear those old records so if we go
102:14 - to the collection and we can actually
102:16 - just any and just for like nerdy
102:19 - satisfaction it by default it actually
102:24 - sorts it by like the alphabetical unique
102:28 - ID right yeah that's exactly why it's
102:31 - sorting it actually like this it's like
102:33 - creating a random ID for that message
102:35 - and then it's sorted alphabetically
102:37 - based on that yeah so that's like a lot
102:40 - of people didn't know if you really even
102:41 - I didn't know that for a very long time
102:43 - and then I was like oh hang on it's
102:44 - using the ID yeah yeah so what we want
102:47 - to do now is let's go ahead and click
102:49 - those three dots all right oh well those
102:54 - three dots and this click delete
102:56 - connection right here delete the entire
102:58 - collection yeah let's just delete the
103:00 - collections that we have a fresh DB so
103:02 - now this will clear all the messages in
103:03 - the
103:04 - every new every new message now that
103:07 - comes through will have a time stamp but
103:10 - we also but now we also need to do
103:12 - something which actually orders things
103:13 - based on based on the data inside the
103:17 - database oh I just added it is it gonna
103:19 - show up or what I just added a new
103:21 - message
103:21 - nice yeah that's it so we just need to
103:25 - add one more thing to get this whole
103:26 - thing working now yeah so inside of the
103:29 - use effect where we mapped the the
103:32 - database to the state so inside of the
103:35 - use effects so if we go over to apt ojs
103:37 - mmm yep and let's go to line 18 what
103:46 - we're gonna do now is we're gonna have a
103:47 - order by so here we're gonna say instead
103:51 - so just before we do on snapshot we're
103:53 - gonna have order by and the record that
103:56 - the field that we're ordering by is time
103:58 - stamp and we're simply gonna add a
104:00 - second argument which is gonna say if
104:02 - it's descending or ascending we want the
104:04 - most recent thing to come at the top so
104:06 - we're gonna say descending nice okay
104:09 - that's simple enough so now let's do
104:12 - less I'm just gonna say I'm Sonny oh and
104:15 - so now the these messages are great to
104:17 - me because that's not me anymore yeah
104:25 - and you see now it's working like an
104:28 - actual chat because it's doing it look
104:30 - at that so nice and it's also showing up
104:33 - at the top hey exactly also I'm just
104:40 - having fun dude this is this is so clean
104:43 - and no matter what imagine once we
104:46 - deploy this if you're not signed in or
104:48 - whoever's sort of signed then you're
104:50 - gonna see your blue messages will only
104:52 - be shown to you and everyone else's
104:55 - messages will be shown with the with the
104:57 - the corresponding grey color yeah yep
105:00 - nice okay also I think maybe we can
105:05 - demonstrate it these are this side by
105:08 - side so like when I type it in guys
105:10 - notice how in real time it's gonna add
105:12 - it to this database that's why this
105:14 - firebase is called a you know what we're
105:16 - doing here is a real time
105:17 - database so exactly test right there
105:21 - right you guys saw that it popped in hey
105:25 - what is happening hello
105:27 - why coffee database real-time holy crap
105:32 - it's fast there we go no all right
105:37 - I love seeing is so satisfying yeah it
105:43 - should be one of those satisfying videos
105:45 - yeah yeah yeah we just break a snippet
105:48 - out of it and like run it as an ad all
105:54 - right so now what we're gonna do is we
105:57 - have everything set up for this I guess
106:01 - the next step would be this is a great
106:03 - point that Logan made this is the main
106:05 - point we we emphasize about firebase as
106:08 - well traditionally you have set up data
106:10 - based on CLI firebase looks unnaturally
106:13 - easy that's the most powerful thing
106:15 - about firebase and like war p9 which is
106:19 - life and he says that there are many
106:20 - similar services on Amazon like Amazon
106:23 - AWS or Microsoft Azure or whatnot but
106:26 - firebase is a lot of powerful features
106:28 - all in one place and the simplicity the
106:31 - simplicity and all of the things in one
106:33 - place that's what makes it take the cake
106:36 - exactly and you know that's a good point
106:37 - cause because you've actually got first
106:39 - experience at using AWI
106:41 - it's a nightmare like I'm using AWS for
106:44 - a bunch of things like the lambda
106:45 - functions the AWS database and it's so
106:49 - complicated like I literally had to
106:51 - learn so much about DevOps just to get
106:55 - basic things up and running like
106:57 - creating security groups where my
106:59 - database is hosted like how do I
107:01 - actually manage my cluster it's so much
107:04 - garbage that and even right now I can't
107:07 - do a 2-way database sync like I'm having
107:09 - it's a nightmare and here you have like
107:12 - the simplest two-way database sync that
107:14 - I've ever seen like and it's working and
107:16 - it's real-time and it's fast so exactly
107:18 - yeah also so now is what we're gonna do
107:23 - is a really cool thing that we can
107:26 - actually mess around with now is if we
107:28 - so right now you know it's just
107:31 - sinn right yep so everything every time
107:34 - you push a message in it's just snapping
107:36 - in and which is like it's nice but it
107:38 - would be cool if there was like some
107:40 - kind of animation here right yeah that
107:44 - would be said yes I think what we can do
107:46 - now is we can actually mess around with
107:48 - something called let me find out what
107:50 - it's called spinning this it is a so
107:55 - it's cause is it there's a library
107:56 - called react flip move and what we're
107:58 - gonna do is we're gonna implement that
107:59 - together so if you just go over to your
108:01 - google and type in and react flip me yep
108:03 - we'll do react what flip move flip move
108:10 - okay yep and what we're gonna do now
108:15 - first one second one yeah p.m. just one
108:18 - yeah yeah you can use either one so the
108:20 - first one's good and this is the github
108:25 - page for that and you can see in the
108:27 - little gift that that's the kind of
108:29 - smooth slick behavior we want to get
108:32 - right nice now there's a few things to
108:35 - get this working and this is gonna be
108:36 - this is actually a really good
108:37 - demonstration for those of you who want
108:39 - to know how to like look at the
108:41 - documentation for someone else's code
108:43 - and then get inside of your project
108:45 - yes so what we need to look at is just
108:48 - scrolling down you can see there is a
108:50 - section which says usage with functional
108:53 - components so if you oh so firstly let's
108:55 - do that yeah
108:56 - first let's install this into our app so
108:58 - let's run the MPM I yep there we go and
109:02 - then we can see there's a section which
109:04 - is usage with functional components now
109:05 - because we don't want we that we don't
109:08 - want this one here we want this one
109:09 - right here yeah because what we're doing
109:12 - is guys we're using something called
109:13 - functional components when we're coding
109:15 - in react now many of you won't actually
109:18 - know what those are and there's two
109:20 - things that you should know at this
109:21 - point that you have two kinds of ways of
109:24 - writing a component in react you have
109:25 - class-based components and you have a
109:27 - functional based component functional
109:29 - based components are the new shiny
109:32 - lovely components that we all strive to
109:35 - write but the reality is is class-based
109:37 - components have been around for longer
109:38 - and they've been around for longer
109:40 - because they were built first and then
109:41 - they realized there was a lot of
109:43 - pitfalls so they ended up building
109:44 - functional components inside of react so
109:47 - whenever you come into these sort of
109:49 - documents um I would recommend you would
109:52 - actually always double-check to see how
109:54 - you use that stuff inside of a
109:56 - functional component so in this case
109:58 - they've got a really nice section for
109:59 - this and what we need to do here is we
110:03 - first need to see so you know you see at
110:05 - the bottom the the bottom half of the
110:07 - the demo is actually what we want to pay
110:09 - attention to first as you know it's the
110:11 - top box re the contest functional Arkell
110:13 - so all we need to do now is go over to
110:15 - our message Jas and here what we need to
110:20 - do is we need to use something called a
110:22 - ford ref in react now I don't think
110:25 - you've used this either cause this might
110:26 - be my own for you yeah pumped yeah so
110:30 - what we need to do here is the way it's
110:33 - gonna track what's going on and what's
110:35 - changing and what's moving it needs to
110:38 - have some kind of reference to the
110:40 - object that's flipping around and
110:41 - spinning around right yeah no we we use
110:44 - something called a forward birth to keep
110:46 - track of that yeah so the way we do that
110:49 - is it's very simple we don't actually
110:50 - even need to know too much about what's
110:52 - happening so this just changes to an es6
110:55 - function so there's duke on snap so it
110:57 - looks very similar to what they've done
110:59 - mm-hmm and now all you need to do in
111:02 - order to get this working is have a
111:05 - Lestrange once again yeah there we go we
111:08 - need to do now is actually do this we
111:09 - say ford ref so forward ref mm-hmm you
111:13 - basically put a bracket around this and
111:15 - then we go to the bottom of the file on
111:17 - line 24 uh-huh put a closing bracket
111:19 - because the entire thing is wrapped in a
111:21 - bracket yeah I don't we do is we go back
111:24 - up to the top so hold on we zoom oh you
111:27 - put the whole oh okay so whenever
111:30 - literally message is changing we're
111:32 - tracking it yep so now what we do is we
111:36 - and then we basically get access to this
111:38 - ref right now what is this this is
111:41 - something called a higher order function
111:43 - message is a function right yeah so
111:46 - message is a function I said then you
111:48 - have something which is essentially
111:49 - wrapping everything go to for dress
111:52 - right I see yeah Woodruff is an example
111:55 - of something called a higher-order
111:56 - function and basically all it
111:58 - doing is it's basically just like
112:00 - wrapping what we already had which we
112:03 - saw on the screen to be a message is
112:04 - wrapping it with some additional
112:06 - functionality so in this case is giving
112:08 - us the reference to the to an object
112:11 - right yeah so here we get this ref so if
112:15 - we look on line five
112:16 - now it's ref right yeah and all we need
112:18 - to you know is attach that ref so here
112:21 - we say for that the div that we want to
112:23 - sort of keep track of we just attach the
112:25 - ref and all this is gonna do we don't
112:28 - need to know too much about what's
112:29 - happening here but all we need to know
112:30 - is that this is basically tightening all
112:33 - of the sort of links so that it knows
112:36 - exactly what element is what and what is
112:39 - moving so that way you can do this
112:40 - clever animation stuff that they've
112:42 - they've set out to do so that's why
112:44 - they've given us this is something that
112:46 - everyone can look into but this is an
112:48 - example of a higher-order component and
112:50 - in things like stripe and things like
112:52 - PayPal all of the API is giving you
112:54 - things like this to actually use sona's
112:57 - nice at an example would be if this was
113:00 - a stripe one it will give you a stripe
113:01 - object here so it's a very cool sort of
113:04 - use case in react and it's like it's
113:06 - supercharged is your component
113:07 - essentially yeah
113:09 - so that's part one now part two is we go
113:11 - back to app dot j s huh and we just need
113:15 - to import the the thing that we actually
113:17 - installed so at the top I'm just gonna
113:19 - do an import flip move from Rihanna
113:21 - fitment yeah and then I'm gonna go back
113:24 - down to where we map out the messages so
113:26 - let's go to line 55 Ghana and all I need
113:31 - to do is basically wrap all of the
113:34 - messages that are being mapped out
113:35 - inside of wrap that move right now we're
113:39 - almost done we're almost done but
113:42 - there's one key component so react it's
113:45 - very in how it rear Enders it rear
113:49 - Enders a list and right now it doesn't
113:52 - actually know what one element is to
113:55 - another one unless we give it something
113:57 - called a key and that key is gonna be
113:59 - crucial and oh I see what you're saying
114:02 - so basically this element and this
114:04 - element right here have no relationship
114:07 - right now yeah so right now react has no
114:09 - idea if when you actually
114:11 - submit a message it's gonna re render
114:14 - the entire list you've write it so oh I
114:17 - see what you're saying so if I reef
114:19 - refresh this or something that's gonna
114:21 - refresh the entire list yeah it's gonna
114:23 - refresh the entire list and that's not
114:25 - efficient when the the list gets really
114:27 - big because imagine you have a thousand
114:29 - messages you only want to really
114:30 - rerender the last one don't add it
114:32 - oh I see so only refresh them like the
114:35 - message like the new message basically
114:37 - that I'm adding but keep everything the
114:39 - same don't refresh it yeah keep
114:41 - everything the same I literally just
114:43 - cleverly push it down okay
114:45 - that's awesome this is how Instagram
114:47 - works right when you comment on
114:48 - somebody's post exactly yes so they use
114:51 - this and it's everyone that uses react
114:54 - should use keys right now a key needs to
114:56 - be a unique identifier so in our case in
114:59 - the database we actually have a unique
115:02 - identifier being poured but we actually
115:04 - need to do something here which makes
115:06 - this a bit more accessible so what we
115:09 - need to do now is if we go to line 23
115:11 - uh-huh right now we just we're mapping
115:14 - remember here we basically just Matt you
115:17 - love the data in that flat structure
115:20 - right yeah so what I'm gonna do is
115:22 - instead of mapping it to the flat
115:23 - structure I'm just gonna enhance it a
115:25 - little bit so I'm gonna say return an
115:28 - object right so return an object and
115:31 - basically wherever we were previously
115:33 - doing that's just gonna go inside of
115:35 - something called a oh I see right but
115:38 - also gonna get the ID so remember that
115:40 - squiggly ID that you saw earlier in the
115:42 - database yep I'm gonna store that ID
115:45 - inside of a key so just one second just
115:48 - to be clear you're saying that this ID
115:52 - right over here that I have is actually
115:55 - being stored right there right doc that
115:58 - okay okay yeah so that's exactly what it
116:02 - says so that is so that way we've got
116:04 - like a unique identifier so now we need
116:06 - to do is we need to remember so let's go
116:08 - down to line 58 and we need to remember
116:11 - that over here now it's not the same
116:14 - structure that we had before so what I
116:16 - can do here is I can D structure to make
116:18 - things a bit easier in D structure and I
116:20 - can say message is no longer just this
116:23 - message that we saw of earlier
116:25 - actually not our data right yeah and
116:28 - this would be a top message I guess data
116:31 - dot message right yeah but you know that
116:34 - it wouldn't be it would just be yeah it
116:36 - would be data right you know they don't
116:37 - message I think yeah well no in this
116:40 - case it would just be data sorry yeah it
116:42 - would just be there and then we could
116:44 - have caught it at the top message so
116:46 - let's go back up to the top so 23 we can
116:49 - rename that to be message
116:50 - Oh 93 yes this mystery name that's been
116:53 - a message oh yeah just calling him okay
116:55 - but hold on one second when you pull I
116:58 - mean isn't that doc data so isn't that
117:01 - like all three of these things yeah but
117:04 - remember we actually implemented and and
117:07 - on in message digests we had message
117:09 - don't message message don't username so
117:12 - what we want to do is we kind of wedding
117:14 - oh I see I see got it I understand yeah
117:16 - yeah so now if we go back to line 58
117:18 - we're gonna disrupt your hair's we just
117:20 - pass in message so it's still the same
117:22 - as we done yeah but we also now get the
117:25 - ID nice okay yep so we get the idea and
117:30 - what we need to do here is we basically
117:31 - just say the key is gonna be the ID now
117:34 - so this idea exactly right here is gonna
117:37 - be the key of that yeah so now it's
117:41 - knows that that react element which is
117:44 - rendered on the screen has the unique
117:46 - key of what it is in the database so if
117:49 - ever if somebody ever pushes a new
117:52 - message in now it knows that hang on
117:54 - that one didn't change nothing changed
117:56 - with that so I don't need to rerender
117:58 - that I just need to worry about the ones
118:00 - that were added the unique keys are
118:01 - added in yeah right so if we save this
118:06 - now and everything if if it's all gone
118:09 - well this would actually work really
118:10 - well and I can actually show you a demo
118:12 - of how it would work without the kids as
118:14 - well you'll see so Kazi and now it
118:19 - looked clean how it came up yeah so now
118:22 - if we did oh all right nice so now if i
118:28 - refresh and I go sunny all that
118:31 - information is still gonna be there all
118:33 - that is looking clean it's really nice
118:37 - right look at that and you get this
118:39 - really
118:39 - Slick's or key and this is a really nice
118:43 - way of showing what happens when you
118:44 - don't have keys so you see now it's only
118:47 - rerender in the top one and it's pushing
118:49 - the list on ah yeah I can actually
118:51 - visually just see that yet
118:53 - like not affecting any of the bottom
118:55 - ones it's just only the new one is the
118:58 - one that like has a bubble effect
119:00 - exactly and pushes everything down yeah
119:05 - exactly that so now if we go back and we
119:08 - actually get rid of at 9:59 let's get
119:11 - rid of the key and you will see a really
119:13 - slick visualization for this so if we go
119:17 - here too and get rid of the key so now a
119:20 - cow strange is gonna look so when you
119:23 - when you actually give this a girl so
119:24 - you say like cozy and then type
119:26 - something in above yep so now when you
119:29 - do this you see how it glitches out of
119:32 - it yeah
119:33 - what does happening let me zoom out a
119:35 - little bit what yep so now if you type
119:38 - in because what's actually happening now
119:40 - is it's freaking out and it thinks it
119:42 - needs to re-render the entire list so it
119:45 - doesn't actually do it in a clean way
119:47 - that we kind of expect it to you yeah
119:50 - you see it kind of like does this weird
119:54 - sort of like and like look it's even
119:56 - it's even like messing up your ordering
120:00 - and it's changing things what it
120:01 - shouldn't be changing right yeah so it
120:04 - completely breaks your entire app so
120:06 - like you need to have keys and that's a
120:09 - really that's I think that's actually
120:10 - the the easiest way I've been able to
120:12 - show how a key visually has an effect
120:14 - yeah I always wanted to see like cuz I
120:16 - always see them having keys everywhere
120:18 - and I'm like that still works I'm like
120:20 - maybe I don't need keys yeah exactly
120:23 - yeah so now you can see like with that
120:25 - key in place react knows that alright as
120:29 - soon as you type in a message and you
120:30 - enter it it's only that one that's gonna
120:33 - actually be pushed in so we don't need
120:34 - to re-render the entire list yeah which
120:39 - is awesome that is sick okay awesome so
120:43 - what are we up to necks on this right so
120:46 - we can do we've actually got the app
120:48 - running pretty nicely now so I guess the
120:50 - only thing so
120:51 - the there's a question of how to deploy
120:54 - there's a question of more styling so
120:56 - it's your core where we go I think let's
121:00 - let's show them how we got the app that
121:03 - we had in the start which has the you
121:07 - know this message thing at the bottom so
121:09 - I think at this point if we can just
121:10 - probably just move the message thing at
121:12 - the bottom and add like a little arrow
121:13 - kind of like how Facebook Messenger has
121:15 - it the other thing then that should be
121:17 - it and we can just call it be done with
121:20 - that you know and add like a messenger
121:21 - logo at the top yeah awesome this
121:24 - actually add the messenger logo right
121:25 - now so I've got the snippet over here
121:27 - okay so that's where I'll be rendering
121:31 - it here so on line 45 I'm just gonna
121:34 - drop the image tag there so this is
121:36 - actually a really cool thing and this is
121:38 - something I want to show to a few people
121:40 - so and some links right you'll notice
121:42 - that they have at the end of the at the
121:46 - end of the URL
121:46 - they have like a few sort of parameters
121:49 - you see that it's got width and height
121:50 - and then hold on I got where right there
121:54 - at the end
121:54 - you know so that's good a dynamic sort
121:57 - of imagery is pulling it from Facebook
121:59 - and we're actually changing the width
122:01 - and height and I'm Europe which is clean
122:03 - right that's clean I love it
122:07 - and there you go so that we've got a
122:08 - nice looking like sort of app already
122:10 - looks pretty fresh looks pretty clean
122:12 - but what we want to do now is actually
122:14 - have it so that that enter a message
122:17 - dropped to the bottom right so always
122:19 - clean it's all about the way and what
122:21 - we're gonna do is let's have a look how
122:24 - we've done that before so what we're
122:26 - gonna do is we need to go to our form
122:29 - control so on line 57 uh-huh okay and
122:36 - what we're gonna do is we are gonna have
122:38 - I'm just pulling up the code so we're
122:40 - gonna have now we need to basically have
122:46 - surround the form so you see this one
122:48 - right here we need to give this a class
122:49 - name yes our class and we're gonna say
122:52 - here this one is just going to be up
122:53 - underscore form so I'm following them
122:55 - yeah yeah banner and let's open up app
123:00 - dot CSS
123:02 - okay so let's go app CSS right here yeah
123:07 - and right now this is all the stuff that
123:09 - was previously in their reaction so we
123:11 - can get rid of most of this
123:13 - let's leave text align in there but this
123:16 - one we set up so form so the app form
123:19 - and what we're gonna do here is we're
123:21 - gonna say let me just pull up my coat a
123:25 - blue CSS and here we have so the one
123:28 - that we're interested in playing here is
123:30 - literally we're gonna add these rules so
123:33 - we're gonna say padding we're gonna add
123:38 - a padding of 20 to make it sort of more
123:40 - padded around so it's got a little bit
123:41 - more space display flex so what is this
123:44 - app form so our form is going to up to
123:48 - jail like what specifically is it is
123:50 - that this thing is they're gonna be
123:52 - which thing is it gonna be but it's
123:54 - gonna be the entire message send the
123:57 - best thing right over here that's how
123:59 - we're trying to style right now right
124:00 - exactly yeah got it okay yeah what we
124:04 - want to do now is we actually want to
124:06 - have it so that we have one second form
124:10 - quad is this one thank you leha
124:13 - appreciate you so now what we want to do
124:17 - is we want to have this form so I'm just
124:20 - trying to find this what's your bad form
124:22 - yeah so what we'll do now is actually is
124:23 - just to get rid let's make this very
124:25 - simple so let's have it so that we have
124:28 - position fixed and what position fixed
124:32 - is gonna do is it's gonna fix it to the
124:34 - screen regardless of how you scroll
124:35 - right yeah and we're gonna give it a
124:38 - bottom so we're saying anchor it to the
124:40 - bottom of the screen so anchor it
124:42 - meaning like move it from here all of it
124:44 - at the bottom which so you guys saw it
124:46 - move so that's what this bottom thing
124:49 - does and then what fix does is so even
124:51 - when I scroll it will stay here so just
124:54 - for example I'm scrolling and you can
124:56 - see that enter a message kind of just
124:58 - stays there I mean it's not usable right
125:00 - now but even if I move it yeah still
125:02 - there cool so notice how it's behind the
125:05 - message oh by the way that is pretty
125:08 - awesome Isaiah earlier asked like have
125:10 - you anybody on this YouTube feed built
125:12 - any projects or done anything and then
125:16 - I think Sam who's in the profit with
125:18 - JavaScript community along with Amana
125:20 - said yeah man me Lafe and Amana and many
125:25 - more in the PWG course and our building
125:27 - amazing stuff and it seems like now
125:31 - what's awesome is like we're gonna be
125:32 - seeing Isaiah in the course he says I
125:35 - think I'm gonna go sign up right now so
125:36 - awesome Isaiah you have no risk and
125:38 - we're gonna be seeing you this week on
125:40 - the life calls that's amazing
125:43 - nice yeah perfect I love it when people
125:47 - sign up on these goes there yeah so
125:49 - let's now check yeah so we've attached
125:53 - it to the bomb but you can see that it
125:55 - gets stuck behind right so we're gonna
125:58 - use something called Zed index and we're
125:59 - gonna say is that index of one so as
126:02 - long as it's over zero it kind of sets a
126:05 - precedent to say this is more important
126:06 - than any element without a Zed index so
126:09 - now if I say this can you see now it's
126:10 - come to the front ah nice okay so that's
126:15 - cool so basically this is giving it a
126:17 - priority because so by default what's Z
126:21 - index of everything is at zero yeah so
126:24 - everything nice so everything is zero
126:27 - but like because you give it a 1 if you
126:29 - give it a 1 or a hundred it would still
126:31 - look the same because just because it
126:32 - has a higher priority right yeah nice
126:35 - okay love that so now it's popping up
126:37 - and I can actually see it and I can
126:39 - actually type and say so cool so it's
126:42 - already somewhat working yeah
126:44 - sameen just asked how he can get the
126:47 - cost so there's a link in the
126:48 - description it's in the description my
126:52 - cousin where yeah the link is in the
126:55 - description below guys so if you're
126:56 - watching this on YouTube or Facebook
126:58 - whatever like it's gonna be in the
126:59 - description just go to that link click
127:02 - it and then it's gonna take you directly
127:03 - to the course yeah
127:05 - and most what language you're using
127:07 - right now we're coding in JavaScript yes
127:09 - yeah so yeah so right now it's really
127:15 - tightly attached to the bottom so rather
127:16 - than anchoring it to a 0 I'm gonna say
127:19 - 20 pixels up from the bottom so it's
127:21 - gonna slightly push you up nice I just
127:23 - saw like it added that little like
127:25 - pushed it up just a little bit when you
127:28 - did this
127:28 - a little bit up and then what we're
127:30 - gonna say is add another background
127:31 - color so now because now I see that
127:34 - little gray nice exactly and what we can
127:38 - do here is we can even say I think we
127:41 - can do it two ways we can say display
127:42 - flex so I'll show you something now so
127:44 - if we say display flex it's shirred so
127:48 - no we won't do that we'll say with a
127:50 - hundred percent so say with 100 percent
127:54 - and what this would do is it should use
127:56 - up the full width of the page you see
127:58 - that let me see that yep I see it okay
128:01 - so beautiful so I see this with being a
128:03 - hundred percent and it moved it so if I
128:05 - change this whit to fifty percent or
128:07 - something it's gonna I see okay cool
128:11 - awesome so you know now it's just taking
128:12 - over the whole screen awesome so yeah
128:14 - regardless of how big the screen is
128:16 - exactly it's kind of like a floating
128:19 - thing right now you know yeah and what
128:21 - we can do now is yes this style is
128:24 - responsive so take a look at this right
128:26 - how much I moved it and the app is still
128:28 - working so it is really really
128:31 - responsive and slick yep and in all
128:36 - messenger app what we had is we had a
128:38 - had like a floating little design to it
128:41 - and the way we achieved that was we
128:43 - pretty much wrapped the app form inside
128:47 - of a card element so material UI element
128:49 - but before we do that what we did what
128:51 - we're gonna do is we're gonna keep it
128:52 - quite simple we're gonna we're just
128:55 - gonna add a simple margin around it so
128:57 - it's gonna be a margin of 20 pixels and
129:01 - then what that's gonna do is that's
129:02 - gonna give us like that sort of floating
129:04 - effect you see yeah and we're gonna
129:07 - anchor it back down to zero because
129:09 - we've got a margin now so it should be
129:11 - flowing so now it's kind of floating
129:13 - over it as opposed to what we had
129:16 - previously so that's a very quick sort
129:18 - of like styling tip on how to do all
129:19 - that stuff and what we're gonna do now
129:21 - to sort of make it look extra sweet is
129:22 - the form control right now we have enter
129:27 - a message and then we have a bunch of
129:28 - stuff there but in our app what we had
129:30 - is we had type a message and press Enter
129:32 - uh-huh it was very slick right and we
129:35 - just wanted it had in facebook Messenger
129:38 - we simply had this sort of little icon
129:41 - instead
129:42 - so what we're gonna do now is we're
129:44 - gonna use rather than having a button
129:48 - let's have a look yeah yeah let me
129:52 - actually even show it to everybody what
129:55 - that icon looks like so if you guys are
129:58 - on Facebook you can see Sonny and I
130:02 - having a great conversation here I asked
130:06 - him if he wants to grab some food at the
130:08 - bar and then at the bottom here if I
130:11 - type you see there is this arrow that
130:15 - shows up so we want to use this like
130:20 - Facebook icon Oh actually my screen I'm
130:24 - blocked we're blocking it right now so
130:25 - I'll actually remove that and now I'll
130:28 - show it so you guys see that arrow so
130:30 - that's the arrow we actually want in our
130:32 - app as well yeah that's it and then that
130:38 - way we'll get that sort of nice Facebook
130:40 - app Phil right yeah so what we're gonna
130:44 - use is a so material UI gives us a
130:49 - really powerful icon library so if we go
130:52 - over to Google and we just type in
130:54 - material UI icons material material you
131:01 - I can't
131:04 - yeah - you are icons and then material
131:08 - UI there we go and all we need to do
131:11 - here is firstly we need to install that
131:13 - package so material UI I cons so we need
131:18 - to go over to our terminal and we need
131:21 - to do an NPM write and this is the one
131:23 - we want right yep that's the one that we
131:26 - want so it's got really nice little
131:28 - stretch tool and what is it anything am
131:30 - i what it's at material so it's at
131:33 - material so if you just scroll up a
131:36 - little bit on the right you should be
131:37 - able to see at material and you go up
131:40 - you see at material you are icons down
131:42 - there yeah okay and what this will do
131:45 - guys is it will pull in all of the icons
131:49 - from material you I see now you don't
131:51 - owe me just
131:52 - design library you have every single
131:54 - icon that you could possibly want and
131:56 - don't before you think oh hang on it's
131:58 - not gonna be heavy it cleverly strips
132:01 - out the ones that you don't use so it's
132:03 - actually really efficient in how it does
132:04 - up but it gives you access to this
132:07 - entire library of icons which is gonna
132:09 - save you a bunch of headache when you're
132:10 - looking for things exactly like this
132:12 - yeah and where should we drop that in
132:14 - the import right here yep oh yeah so
132:18 - what we're gonna do exactly yeah so we
132:20 - just need to import that in and then
132:22 - what we're gonna do is there's another
132:24 - things if you go to the search for
132:26 - material you I and type in icon button
132:30 - so in the top search bar tabs so don't
132:34 - want that one yeah so it's actually a
132:36 - component so there we go and what this
132:38 - one does is that's how we need to write
132:41 - the import so we need to just pull that
132:43 - in so the second one so we need to pull
132:47 - that into our code and what this is
132:50 - gonna do is it allows us to wrap the
132:53 - icon and treat it as a button which is
132:56 - really nice nice now what we can do is
132:59 - we go down to 954 uh-huh all right so
133:05 - I'm just gonna I just added this massive
133:07 - gap where we have our button and then we
133:08 - have the input I'm actually gonna copy
133:10 - and paste like the icon bun so this is
133:13 - the actual icon bun yeah so the signal
133:15 - is for now so let's just get rid of this
133:17 - and all I'm gonna do is I'm gonna copy
133:19 - all of our attributes that we have
133:20 - currently and I'm just gonna paste it
133:23 - into that icon bun so okay we just do
133:27 - that and then we pretty much have a
133:30 - space and then all we need to do now is
133:32 - we actually just get rid of our button
133:34 - and we replace it with that one so now
133:37 - instead of our button which we
133:38 - previously had we have this icon button
133:40 - so nice it should be up if we refresh
133:43 - the page now we and the thing is guys
133:46 - this is really nice because we use that
133:48 - disabled look of look and level that
133:51 - might actually have to kind of either
133:55 - hide ourselves or should we put
133:57 - ourselves somewhere else like maybe top
133:59 - right because we're
134:04 - you know I'll put ourselves top right
134:06 - because we're hiding we're gonna hide
134:08 - the icon once it comes up right so now
134:12 - if we refresh
134:13 - that's a good question yeah nice uh-huh
134:16 - refresh okay and a piano art hey Jessica
134:20 - gross how you doing
134:22 - nice they know been a while the OG Amana
134:28 - I was a winner she was one of the
134:29 - winners from the JavaScript challenge we
134:31 - ran which was amazing guys and we will
134:34 - be running more soon as well dude I like
134:40 - how we were like we're not gonna you
134:41 - know those challenges are too exhausting
134:43 - let's like take a break from it but now
134:45 - we're actually doing way more than what
134:48 - we're like [ __ ] we'll just do it every
134:51 - day yeah this started off guys funny
134:54 - little story we start off with a little
134:56 - idea we thought let's try a live
134:57 - training and then we enjoyed it so much
134:59 - we were like you know what screw it
135:00 - let's do it every single day
135:01 - yeah yeah yeah we were actually supposed
135:04 - to we were gonna do it once a month
135:06 - you remember that like I was like oh my
135:08 - knee once a month
135:09 - Sunny's gonna do once a month and we're
135:11 - all gonna do once a month and then we're
135:12 - like what about once a week and then
135:15 - Sonny and I are like how about once a
135:16 - day let's test it let's say defense and
135:20 - we're actually learning a bunch like
135:22 - we're actually putting some pretty cool
135:23 - stuff yeah yeah nice so what do you
135:27 - obviously so now you can see right there
135:32 - yeah and Lucas what's awesome is we
135:36 - actually have the disabled functionality
135:38 - so as soon as you start typing notice
135:40 - how the bottom populates so the color
135:42 - comes in right yeah oh nice
135:46 - that is nice yeah because if I'm not
135:49 - typing that is disabled and then as soon
135:51 - as I start typing hey it becomes enabled
135:54 - again love that exactly so that's really
135:58 - nice also little talk let's just change
136:01 - one little thing now so we're where is
136:03 - that she's from profit JavaScript - she
136:05 - says guys Tony went to sleep she goes so
136:09 - much information so cool
136:10 - Thank You avatar for being here
136:12 - appreciate you also love seeing students
136:17 - yeah so when we have our own messages in
136:19 - blue we don't actually want to show the
136:21 - name right like it's a bit weird to see
136:23 - like if I'm sunny and I'm writing on the
136:26 - messenger app I don't really want to see
136:28 - sunny says hey I just want to see hey oh
136:31 - yeah that's true because then messenger
136:33 - it doesn't actually say when I wanted to
136:37 - go grab some food at the bar with you it
136:40 - just yeah yeah you're right yeah exactly
136:44 - so now what we can do is if we go over
136:48 - to the message George is all right okay
136:54 - let's go to message is and what we're
136:58 - gonna do here is right now we currently
137:00 - have this block of this little bit of
137:02 - code right yeah so what we're gonna do
137:04 - here is we're just gonna say if the
137:07 - remember we have this is user which
137:09 - checked at the top of the bar yeah so at
137:12 - the top of our we had is users on line
137:14 - six line six okay yeah remember we had
137:18 - is user and that checked if the message
137:19 - is username so if the message username
137:21 - was equivalent to you who's logged in
137:24 - uh-huh yeah what we're gonna do now is
137:27 - we're gonna basically have it oh I see
137:29 - what you're saying so basic like
137:31 - basically if it's not you then show the
137:34 - name if it is if it is you'd and okay
137:37 - okay so for example I see so for example
137:42 - still show Bob said something and Sonny
137:44 - said something but for all of mine it'll
137:47 - just be blue and let yeah text and not
137:49 - it won't say cause II there okay perfect
137:52 - exactly that and the way we do that is
137:54 - we just simply this one we're saying if
137:56 - it's not the user so if it's not the
137:59 - user his log in then you show message
138:01 - username and then you can show something
138:04 - like this and the way you can actually
138:05 - this is called string interpolation in
138:07 - JavaScript so you can actually do
138:09 - something like this so you can do that
138:11 - and then you can have any string
138:12 - afterwards so you could say say is so
138:14 - like so Sonny says a certain message or
138:18 - if they won this and now when we save
138:19 - this well what this code is doing is it
138:22 - saying if it's not the user then show
138:24 - the next tag otherwise don't show it got
138:27 - it that's beautiful
138:29 - okay so
138:30 - let's see Oh clean but Oh Bob says okay
138:35 - maybe we can put up maybe just put a
138:38 - coal in there yeah yeah okay maybe you
138:43 - know maybe put a space or no after the
138:46 - colon let's see yeah oh no that's great
138:49 - actually it's coming out great because
138:51 - maybe the space you just added might put
138:53 - no it's looking great so here we go so
138:57 - if I say something hey what is up guys
139:00 - oh that's clean because yeah now it
139:03 - doesn't say cause you so that looks
139:04 - really nice and if somebody else is
139:06 - talking I can actually see what they're
139:08 - saying exactly nice nice okay yeah so
139:13 - it's very similar to the app that we
139:15 - built there's a few notes our
139:17 - differences yeah but for the purpose of
139:19 - everything I mean did you wanna change
139:21 - anything here causing okay I think this
139:24 - is looking pretty good in terms of
139:29 - changing anything I mean is this looking
139:31 - very very similar to what we had created
139:33 - before we like the app that we demoed is
139:35 - it is this part now pretty much the same
139:38 - as that one so no so we need to get the
139:41 - the width to be the same space the width
139:45 - to be the same as the sort of
139:47 - rectangular is inside of we need to
139:49 - round the board a little bit and then we
139:51 - need that little arrow to be on the
139:53 - right side so we can run through that
139:55 - now so what we've got here is on Abdo
139:58 - jeaious we've got the form control yeah
140:01 - whose head message so now what we want
140:03 - to do is if we go to app - Jess uh-huh
140:06 - app touch yes
140:08 - we're gonna get rid of the input label
140:10 - so a little thing that pops up so it was
140:12 - quite it was cool to show everyone but
140:14 - for now what we want to do is want to
140:15 - keep it clean so we only want to have a
140:17 - placeholder which is so we get rid of
140:20 - the input label so now if we save them
140:23 - check it you can see we've actually got
140:24 - rid of that so it's a bit cleaner now so
140:26 - you just have enter a message and when
140:29 - you do that uh-huh so it doesn't like
140:33 - have that like it doesn't lift up yeah
140:36 - exactly so it doesn't lift up now so
140:38 - it's just a sleek sort of filled as well
140:41 - that's a good question Patrick I was
140:43 - asking sunny debt as well which is like
140:45 - shouldn't the most recent messages be at
140:48 - the bottom so yeah that's how Facebook
140:50 - is and it actually really should be like
140:52 - that but for that we have to add a lot
140:55 - of additional styling and then like
140:57 - change the UI for it a lot and so for
140:59 - simplicity and like showing a tutorial
141:01 - that's why we decided to go this way
141:03 - just because it would add probably a few
141:04 - more hours onto the build yeah it is
141:08 - much more simpler to show the build in
141:10 - this direction but I mean if everyone if
141:13 - we get enough responses we can
141:15 - definitely show in some other source a
141:17 - 100% you know 100% okay nice so now what
141:22 - we want to do is we've simplified that
141:24 - and now you can see that the form
141:27 - control so you see on line 52 the
141:32 - children of form control so you've got
141:34 - input and you've got I combined right
141:36 - now they're in a color like they're sort
141:39 - of stacked on top of each other and the
141:40 - way we get around that is we need to
141:42 - give the form control a class name so we
141:45 - give our class name and here we can say
141:46 - app underscore form control so I'm using
141:48 - them we spoke about before and one way
141:52 - to do is I'm gonna save that and I'm
141:53 - gonna go into my app dot CSS yeah and
141:56 - I'm gonna style that now so I'm gonna
141:58 - say I want the the display type to be
142:02 - something called flex and flex is this
142:05 - as a way of styling children inside of a
142:08 - parent component so if we go to app dot
142:10 - CSS so you can see I've applied display
142:17 - flex and then what I'm gonna do is and
142:19 - that truly that pushes things into a
142:21 - flex row so if we check out how it looks
142:24 - now mm-hmm so if we do Kazi you know so
142:31 - it hasn't actually changed it and the
142:33 - reason being is because so actually for
142:35 - this cause did you mind sharing your
142:37 - localhost 3000 with me so if you go to
142:39 - the left the extension so you see on the
142:43 - live share extension I think oh you
142:46 - actually have so I should be able to
142:48 - access the app mm-hmm nice cuz I just
142:50 - need I just want to open up my debugger
142:52 - and have a look at that as well because
142:54 - sometimes what happens is material UI
142:57 - I actually overrides a lot of rules
142:59 - which is why you might have seen the the
143:01 - exclamation mark important at certain
143:03 - points when I was coding earlier when we
143:06 - were going through some stuff yeah so
143:08 - let's look I'm just having a check now
143:11 - on my screen so I see any questions that
143:18 - we have did you ever get up I think you
143:20 - know so you know so that's a look next
143:23 - Direction column yeah so exactly so now
143:26 - I want you to cut the ears if you
143:28 - right-click it's actually a really good
143:31 - demonstration of how the rules get over
143:33 - apply like over and sorry so and if you
143:37 - inspect that the enter a message so you
143:42 - might need to just zoom out a little bit
143:44 - for this one yeah inside the terminals
143:48 - if you hover over that one and then you
143:50 - do it yeah trying to break this down
143:57 - okay so what do you already do yeah so
144:00 - if you click on the inspector so the
144:02 - little inspect thing uh-huh yep click on
144:04 - the input so enter a message yeah and if
144:08 - you just throw up a level so up up up an
144:12 - element yeah and go up again mmm-hmm and
144:15 - you see that one that one the right
144:17 - there so app form control so you can see
144:19 - it applied the class that we wanted yeah
144:21 - right but what happened is if you click
144:24 - that now yep so click that and then if
144:27 - you you need to drag up the the thing
144:30 - now so you can even drag up most of this
144:32 - yep so there you go so you see material
144:33 - UI form control route right so that's
144:36 - all the rules of material you I have
144:38 - added but notice how is overwritten r1y
144:41 - add like literally just freaking over it
144:44 - over wrote it yeah just over it because
144:48 - material UI takes precedence when you
144:50 - use it should be right important there
144:52 - and then I'll like move it here yeah so
144:55 - ideally given more time you can use
144:58 - something called material you are
144:59 - theming but in this case for the further
145:02 - sort of if we just want to overwrite it
145:04 - then what we do is I've just added it
145:06 - now so I've added important and now this
145:09 - should override
145:10 - those rules and otech president looks
145:12 - like it did yeah like it actually went
145:15 - from being this this is actually pretty
145:16 - cool it's my first time seeing this
145:18 - overriding clearly like this yeah so
145:24 - that's the first step right and then the
145:26 - second step that we want to do is notice
145:28 - how it has flex direction column in
145:30 - material UI so by the phone
145:33 - typically when you apply flex rules your
145:35 - Direction is row yeah we want we want to
145:38 - go back to a row because we want that
145:40 - the the little arrow icon to be a role
145:43 - as opposed to what it was before so now
145:45 - what we do is i'm going to change up my
145:47 - purse and as what's making a bit clearer
145:49 - so if we refresh now mm-hmm so i'm sorry
145:53 - we need to do important as well but i
145:57 - think yeah so there we go
146:00 - and now you can see we've already got it
146:02 - looking somewhat right okay it's almost
146:05 - there but it's not it's not it's not
146:07 - perfect yeah most yeah the experience is
146:11 - becoming actually really nice yes so
146:14 - it's time to it's almost there but we
146:16 - just need to do one more thing now okay
146:18 - and the way we do that what are we
146:21 - trying to do though visually so visually
146:24 - now you see how we have enter a message
146:26 - yeah you have that icon right yeah now
146:29 - what we need to do is play with a flex
146:31 - rule and it's literally called flex but
146:34 - what do we want it to do like do we want
146:36 - this symbol to go to the right like what
146:38 - are we trying to actually do because
146:40 - we're so what we're trying to do now is
146:42 - we're trying to allow the enter a
146:43 - message box to take up as much room as
146:46 - it once
146:46 - uh-huh and push that other icon all the
146:50 - way to the right god I don't want to
146:51 - tell it we don't want to tell it do it
146:54 - by 30 pixels or 40 pixels we want it to
146:56 - figure that out on its own got it all
146:58 - right yeah that way it's always
146:59 - responsive regardless of what the screen
147:01 - size is nice got it okay so now what
147:05 - we're gonna do is if we go to
147:07 - I think let's go to the button so fjs
147:12 - mm-hmm and let's go to icon button
147:15 - goddess oh here they give it a class
147:17 - name so a class name and this one we're
147:20 - gonna say is up on the squander score
147:23 - it's just called an icon button and this
147:27 - icon button right now we're gonna go
147:29 - ahead and give that a style in CSS so
147:33 - we're gonna give it a combine and here
147:35 - we are inside apt CSS got it yep so here
147:40 - we're gonna say so for that cost we're
147:42 - gonna say flex zero so this might be
147:47 - enough for it to work but we might
147:48 - actually need to give the input field
147:50 - more precedence oh that looked like it
147:53 - didn't do it so yeah what we need to do
147:55 - now is also we go back to after Jas
147:58 - yeah where we have the input field we
148:01 - need to give that a class name so then
148:03 - you say class name equals app compass
148:05 - ponder score input yep save and go back
148:09 - to our CSS and here we need to say app
148:14 - input flex one and now what this is
148:18 - doing is this saying whenever you have a
148:21 - flex containers oh hey you know right
148:24 - yeah so this is a really good lesson for
148:26 - everyone who's new to flex boss so form
148:28 - control is essentially the what is
148:31 - wrapping the enter a message and that
148:33 - little icon that we had and flex by
148:35 - default is only gonna use up as much
148:37 - space as we want as it needs to and then
148:39 - it sort of doesn't use up the rest of
148:41 - the space but here what we said is we
148:43 - want the input field to take up as much
148:45 - room as it needs to you know on the icon
148:48 - button to only take up the minimal
148:51 - amount of space which is why it figured
148:53 - out on its own the exact amount to sort
148:56 - of work out and and to get itself nice
148:58 - and now it's responsive so if I make it
149:01 - big or if I make the page small it'll
149:03 - work yeah exactly and you get a really
149:07 - really nice consistent UI and everything
149:09 - works really sweet
149:14 - it's really really clean and it gives
149:17 - everything really nice sort of finished
149:19 - yeah that is awesome love that okay okay
149:27 - and also right that's actually a good
149:28 - point so I didn't what happened there is
149:31 - I skipped the name prompt right and it
149:34 - says no so what we're gonna do is we're
149:35 - gonna do one last thing right now we're
149:37 - if and this is actually a common use
149:39 - case whenever you have in no sort of
149:41 - scenario we don't want it to say no we
149:44 - wanted to say something like unknown
149:46 - user I see yep
149:47 - cuz right now it's saying right now it's
149:50 - saying null and we want that to say
149:52 - unknown user right that's all right here
149:54 - that got it okay so the way we do that
149:58 - is we say so here where we have message
150:02 - username right we can add something
150:05 - called a pipe so we pipe it and we say
150:08 - so if it doesn't exist you can actually
150:10 - just use something like this and you can
150:12 - say unknown user nice okay clean easy
150:16 - but and that means that if it's if it's
150:19 - no value we'll go to that one okay and
150:25 - if i refresh and let's say I have no
150:26 - value and I'm just testing this out
150:29 - hello and then I refresh again and now
150:31 - this time I'm a month it should show
150:35 - unknown user to my last messages cuz I
150:38 - didn't set up a name exactly which is
150:41 - really nice right yeah this is awesome
150:44 - nice
150:52 - that's what a moneth actually said yeah
150:58 - we there's a few subtle differences like
151:01 - the typography at the top we have hello
151:04 - clever program that something small that
151:06 - we could implement if you want or it's
151:08 - up to you now what we can do I think
151:10 - let's deploy this cuz this is actually a
151:12 - great experience and I think everybody
151:14 - out here would agree that this is
151:16 - awesome and I think at this point let's
151:18 - just figure out how to deploy it online
151:20 - so now we can actually use it online
151:22 - awesome so this is the really cool part
151:25 - right so what we need to do now is head
151:28 - over to your terminal mm-hmm so we need
151:32 - to head up the terminal and we just need
151:34 - to do so for many people that wouldn't
151:35 - have actually set this up before they
151:38 - wouldn't have firebase installed so
151:40 - you'd have to do a global install on
151:42 - firebase tools so I think it's NPM
151:45 - install firebase and then I think it's -
151:47 - tools right oh it's like firebase -
151:50 - tools so I think it's all one word so
151:52 - firebase - tools it's that right there
151:54 - you would have to do that line right
151:55 - there that we just showed you if you
151:57 - don't have firebase installed already
151:59 - yeah so this is gonna install it across
152:01 - every single project on your computer so
152:03 - it means whenever you use firebase CLI
152:05 - you have access to it so you need to do
152:07 - that before we run what we're gonna do
152:10 - now so the next step is you need to do
152:11 - firebase in it right and this will bring
152:15 - up a really beautiful UI and then we
152:17 - need to do here is use the arrow keys to
152:19 - go down to hosting enter and use an
152:23 - existing project and here we just need
152:26 - to find the project that we create so
152:28 - facebook Messenger clone and here is
152:32 - where you need to be careful guys so the
152:33 - first one you need to write build build
152:37 - yeah this is important guys yeah you
152:39 - need to
152:40 - but now let's actually show them yeah so
152:42 - what's gonna happen is right now you
152:44 - guys see this app facebook Messenger
152:46 - clone inside of it you don't see build
152:48 - anywhere yet but once I write this build
152:52 - right there there's actually gonna
152:53 - create a separate folder probably right
152:57 - around here called build and that's what
152:59 - it's gonna store and then we're gonna
153:00 - actually push that and deploy that
153:03 - exactly
153:05 - so build configure as a single page up
153:08 - yes so that's another important one you
153:10 - can't do it by default so make sure you
153:12 - write that why and hit enter yeah
153:15 - exactly
153:17 - build right over here actually and if I
153:20 - look inside of it its we haven't built
153:23 - it yet but once I build it it's gonna
153:24 - have all the stuff inside of this yeah
153:28 - so the first thing we need to do and
153:30 - this is you need to do this before you
153:32 - deploy so a lot of people actually
153:33 - deploy their app and then they're
153:35 - wondering why they get the firebase page
153:37 - that says hey like thank you for pushing
153:39 - something's firebase but nothing
153:40 - actually comes up you need to run NPM
153:43 - run build so let's go ahead and run that
153:44 - now and guys what this does is it strips
153:47 - out all of the sort of developer tools
153:49 - and everything that you don't need in
153:51 - the production environment it so it
153:53 - creates an optimized production but it
153:55 - Chuck's it all inside build now we never
153:57 - actually have to touch that folder
153:59 - it's MPM is gonna do all of that for us
154:01 - but we can't delete that it's something
154:03 - which is very important because that's
154:05 - what's actually get served run real one
154:08 - quick thing guys just would love a just
154:12 - need to ask you for a favor and this
154:14 - would be huge help if you guys did this
154:16 - so this tutorial is a long tutorial and
154:20 - I realized that the tutorials that work
154:22 - the best for me are the ones that
154:24 - actually have timestamps next to them so
154:26 - like specific things that happen and
154:28 - like what period when they happen and
154:30 - then for users to be able to click them
154:32 - in a really easy way so if you guys if
154:34 - any one of you guys would you know just
154:37 - add all the timestamps what we were
154:40 - doing where we would just like upload it
154:42 - to our description and to our comments
154:44 - and they would make it for everyone
154:45 - extremely easy to go back to this
154:47 - tutorial and go through it and go
154:49 - through whichever part they want exactly
154:52 - that'd be awesome I'll actually help a
154:54 - lot well yeah right
154:59 - awesome so build is done yeah so this is
155:04 - where the magic happens right so we're
155:06 - about to run one command and it's about
155:08 - to deploy pop the URL on the screen but
155:10 - before we do that cause II I think we
155:12 - always it's more of a party trick mouths
155:14 - like you know when everyone who's like
155:16 - to have enjoyed this or found some kind
155:18 - value from this too like if you're on
155:21 - Instagram or something like that story
155:22 - it yeah us when you get app launched and
155:25 - you stuck using the app and it's always
155:28 - a fun thing because we get to see you
155:30 - and get to interact with and when you
155:31 - guys take stories please take videos and
155:34 - tag us in their pictures look really
155:36 - lame so it's kind of like and like I
155:39 - every time I'm like I'm gonna repost
155:40 - your picture but like it's not fun take
155:42 - a story maybe even have flipping around
155:45 - show yourself then show us and this code
155:48 - that you're doing so if you even want to
155:49 - do that right now you can do that and my
155:53 - my account is clever cause II and sunny
155:56 - is one more yeah there you go awful
156:01 - username you got which you gotta change
156:03 - at some point for s's yeah but but yeah
156:09 - guys so take the story and then add us
156:12 - on Instagram and we will repost your
156:15 - story and we want to do this every
156:17 - single day so that would be great I mean
156:18 - we could even start some kind of hashtag
156:20 - like hashtag clever programmer just keep
156:22 - it simple
156:23 - yeah but just tag us in the meantime
156:24 - we'll repost your story and respond to
156:26 - you exactly so moment of truth now let's
156:31 - deploy the app and then we'll share the
156:34 - link and then everyone can jump on and
156:36 - see all of this real-time stuff
156:37 - happening nice Serena just said great
156:39 - work just signed up for your J's course
156:42 - awesome so glad to have you nice that's
156:45 - amazing yeah okay so what are we doing
156:49 - now sunny so we are gonna deploy so in
156:52 - the terminal we just need to write
156:53 - firebase deploy well done and now this
156:57 - is it guys
156:58 - there's no crazy stuff that's happening
157:00 - right now it's doing all of the work
157:01 - this blows my mind that this is about to
157:04 - be online right this second this blows
157:06 - my frickin mind playing that is the link
157:10 - that is gonna be live right now with
157:12 - everything that we just built and it's
157:15 - literally deployed and it's in it's up
157:16 - right now which is awesome so let's give
157:20 - that do you just want to drop the URL
157:23 - cuz it wow this is deployed and online
157:27 - the URL and let me see if restream
157:32 - maybe I could drop it in there restream
157:36 - chat and that okay cool dropped it into
157:43 - a restream chat
157:47 - it's literally live guys it's online
157:50 - sunny just says yo what is up guys
157:53 - awesome and they're just showing up
157:55 - everywhere awesome
157:59 - okay go this is so cool
158:03 - this soak yeah your name should actually
158:04 - be Papa react dude
158:07 - no yeah that would be that would be a
158:10 - solid you should Papa react I'll be pop
158:13 - up I thought that would be do that's
158:16 - God's good branding am I not great great
158:19 - point I love that point react I would do
158:23 - that
158:23 - awesome look at that we have people
158:25 - popping in everyone from Dubai we got
158:27 - someone from divine Thank You this
158:29 - awesome ulam they're so sick what's up
158:32 - dude thanks for this Joshua you got it
158:34 - this is awesome this is so cool so sick
158:36 - oh boy this is cool beginner programmer
158:38 - Amanat says wow Fulani says thank you
158:41 - gents this is awesome wow this is so
158:48 - cool guys we built this together this is
158:52 - awesome this blows my mind yeah guys
158:57 - this is this is the idea you know we
158:59 - somebody just said geez guys I love this
159:02 - somebody just said I haven't even gotten
159:04 - a chance to finish the one from the day
159:06 - before and you guys are already here
159:08 - with another banger let's go we're gonna
159:12 - be bringing the heat this month guys
159:14 - we're bringing the heat Sonny and I are
159:16 - just like how can we just push ourselves
159:19 - to the max and one of the years I came
159:22 - up with yeah go ahead
159:24 - we're just saying yeah we would we say
159:27 - to originally do like by twice a week
159:29 - and then we like screw every day it's
159:32 - sort of once a month is what we were
159:34 - gonna do yeah exactly but it's a lot of
159:38 - money but like to be honest guys what
159:41 - makes it fun is if it was just us it
159:42 - would be we would be bored out of our
159:44 - minds and we would probably not do this
159:46 - any
159:46 - more what makes it extremely fun is
159:48 - because you allow us to be on this
159:50 - platform and then you're having this
159:52 - conversation back and forth with us so
159:53 - even when I'm looking in the chat I mean
159:55 - like for example there was somebody
159:56 - named healthy and fit in the chat
159:58 - channel and she was putting so many
160:02 - comments about how she's a beginner
160:03 - she's learning coding in HTML and CSS
160:05 - and then I saw Jana helping her I saw
160:07 - Liv helping her I saw moneth talking to
160:09 - her and Sam and literally all these
160:12 - people who were in profit a JavaScript
160:13 - community just helping her and this
160:15 - YouTube like dad is a solid community so
160:19 - positive so healthy dad is amazing and
160:21 - so when we see that that's what makes us
160:23 - come alive and then actually show up all
160:25 - the time for you guys yeah and I think
160:28 - if it's one thing like the course is
160:30 - amazing in itself guys but the community
160:33 - the community is like it amazes me every
160:35 - day how amazing this community is the
160:38 - support they have for each other the
160:39 - sport that I think honestly like before
160:41 - I even get to answer somebody's question
160:44 - somebody from the community has already
160:45 - done it so like it's like a super jacked
160:48 - up Stack Overflow but it's literally at
160:51 - your fingertips we have a sac community
160:53 - where everyone's talking it's honestly
160:55 - the most friendly welcoming community
160:56 - and it really really does push everyone
160:59 - here we go I just linked the course to
161:02 - so you guys can actually click that link
161:04 - probably it's not a clickable link you
161:06 - can copy it and then paste it we're
161:10 - adding all the tracking in there too
161:12 - actually it's nice actually for this
161:15 - tracking maybe we should have you know
161:18 - this is coming from the what is this FB
161:22 - oh yeah FBI messenger clone yes all
161:26 - right there so yeah guys use that link
161:28 - if you're gonna join the program because
161:30 - we want to see where are you coming from
161:31 - and what made you join exactly yeah we
161:35 - have Joshua saying Thank You kasi of
161:37 - course price has just finished the
161:39 - course beautiful call it's as amazing
161:41 - sergeant thank you cause II love it guys
161:44 - thank you so much I really really
161:47 - appreciate all the love awesome thing is
161:51 - that it's sunny yeah I mean I think
161:54 - we're dumb dude I think that was an
161:55 - amazing session that went much better
161:57 - than I thought yeah that was mine
162:00 - because I yeah we thought it was gonna
162:02 - take forever and we were really never
162:03 - gonna finish on time yeah I was actually
162:06 - a perfectly timed session and I think
162:08 - everyone enjoyed that yeah and a great
162:11 - book end and you know or like everybody
162:13 - got to use it
162:13 - everything that's so sick that's that
162:17 - mehriban says well done
162:19 - Sonny what is that she said III dropped
162:23 - it on the screen dropped it on the
162:25 - screen by the way I found somebody on
162:33 - tik-tok who looks a lot like Mara bond
162:36 - and really yeah like and I I looked at
162:41 - her video and then I thought that but I
162:43 - didn't even say it
162:44 - Frankie watch the video he was like
162:46 - without me even saying anything he's
162:48 - like yo she actually looks like marathon
162:49 - and then I showed this video to Amber
162:52 - Lee and never told her anything she was
162:54 - watching she's like is that she looks
162:57 - like Mara bond and I'm really yep I'll
163:00 - show you on tick tock with her name
163:03 - champagne mommy no no no no no it's on
163:06 - tik-tok India let me see if I can
163:10 - actually I have her I'm following her
163:13 - let's see I'll pull this up that's so
163:16 - funny
163:17 - tik-tok her name is uh take talk brown
163:22 - chick something like that and she's
163:23 - really good I was watching some of her
163:26 - content she's actually like makes really
163:28 - good tick tock content I think this is
163:30 - it
163:30 - yeah but her mmm one if I can pull it up
163:33 - oh I don't think anybody else is seeing
163:35 - this this is the one that's really good
163:40 - so let me see if I can on my ECAM have
163:44 - everybody actually listen to this
163:45 - because that would be cool
163:50 - sounds I have to go into sounds you guys
163:56 - can't you yeah if I played it right this
163:59 - second right you guys are actually not
164:00 - able to hear it until I enable the
164:02 - system sounds I think I think I'll be up
164:07 - to here if it comes true so that you
164:09 - know okay oh no actually you know maybe
164:12 - no because I'm
164:13 - we're doing a different cher ami yeah
164:16 - I'm trying to figure out how to play
164:17 - system sounds in the fastest way
164:19 - possible but having a little bit of
164:22 - difficulty figuring that out let's see
164:25 - here
164:26 - system audio cool and so I'll meet Sonny
164:31 - I'll mute you for a second okay okay oh
164:35 - yeah whoa you have to click the unmute
164:41 - button at the top I see Indian outside a
164:43 - gas station so now you're shaking the
164:44 - head tensing a brow wondering how did
164:46 - she figure this out oh my god those
164:47 - Indians they got me singing yeah now
164:49 - while I'm not trying to go with short a
164:51 - few this is just a little tool go to you
164:54 - and this is a message that every color
164:56 - paints a better view cuz there's a
164:57 - savage and everyone baby even you so
165:02 - good so good dude I was like blown away
165:09 - when I saw that I was like wow that is
165:11 - some funny yeah do you think that looks
165:15 - I've ever that's what I thought yeah
165:18 - yeah yeah I mean it's so funny did ya I
165:25 - mean it could be off it's like you know
165:27 - once you know the person more you know
165:29 - all their how different they are but
165:31 - like when you know them generically like
165:33 - you you haven't met them or talk to them
165:35 - you know there's just like oh this yeah
165:38 - same skin color must be the same person
165:41 - yeah oh [ __ ] you champagne mommy
165:45 - everyone can go and check if she's
165:46 - looked similar yeah that's so funny
165:50 - okay now let me see what am I actually
165:52 - doing because yo Sonny speak real quick
165:56 - you hello hello okay I just want to make
166:00 - sure everybody can see this
166:02 - where did the comments go I hit the
166:04 - comments okay awesome you guys can hear
166:06 - us normally now right thing they can
166:13 - even Amanat even he's like yo she really
166:17 - does the maramon is a lot cooler cuz
166:22 - marivan can actually dance you know
166:25 - sorry when everybody can sing but
166:27 - dancing is a whole nother skill she does
166:30 - tik toks with me and I try and keep up I
166:32 - just can't
166:33 - she's too good it's too much thank you
166:38 - guys so much for coming on really
166:41 - appreciate you guys thank you guys for
166:43 - making it so awesome give us some ideas
166:45 - for what you would want to see tomorrow
166:47 - but I would even recommend is like take
166:48 - your phone out you know an Instagram
166:50 - story just tag us share your story and
166:55 - then maybe even tell us like what
166:56 - challenge you want to see next because
166:58 - if we start hearing it from your voice
167:00 - and in person that is a lot more
167:02 - impactful than like just getting one
167:04 - text message you know out of the many so
167:06 - if we can see why you want some kind of
167:08 - so I'll just give you some ideas right
167:10 - the e-commerce project a somebody
167:13 - dropped in a message earlier with a good
167:15 - project idea and I forgot what it was
167:19 - but yeah but regardless of whatever your
167:23 - ideas are just shoot them to us what
167:25 - type of stuff you would want to see
167:27 - maybe you want to see us build a stripe
167:29 - would react or Instagram yeah somebody
167:31 - said Instagram clone so you want to see
167:33 - Instagram clone so whatever it is just
167:35 - let us know
167:36 - tik-tok clone oh there we go that could
167:39 - be fine
167:41 - no guys will love this because I we love
167:44 - building these stuff so like there's no
167:45 - bad ideas for an app like you can just
167:47 - ping them our way and we can literally
167:49 - just start building it yeah yep michael
167:52 - says music
167:55 - somebody said instagram clone somebody
167:59 - said tik-tok clone right the one yeah so
168:02 - as of now what time are gonna be the
168:05 - lectures when are we gonna be oh we
168:06 - don't even know guys like we're just
168:08 - kind of off-the-cuff getting inspired
168:10 - and going because we wanted to do it
168:12 - once a month so if you ask us on a
168:14 - schedule like we'll just say once a
168:16 - month but we're just so inspired and we
168:18 - love the energy so then we're just like
168:20 - let's go let's go like let's just do
168:21 - another one today so we don't know we
168:24 - will try to find out like if since we're
168:26 - gonna be doing this more regularly what
168:28 - I want to do is like just ahead of time
168:31 - put what the project is gonna be so if
168:33 - you guys shoot us an idea and it's
168:34 - overwhelming majority saying that idea
168:36 - then what we want to do is just you know
168:39 - I'll make a thumbnail put
168:41 - up on YouTube and then schedule a live
168:42 - stream and then tomorrow we can all
168:45 - build that app together yeah that'd be
168:50 - fun
168:51 - yep I would love to actually learn that
168:54 - even like Python stuff like this time
168:57 - was sort of me teaching Kazi react like
168:59 - all that going through some react stuff
169:00 - I've never actually coded much Python so
169:02 - it'll be so fun today the other way we
169:04 - can go to some of that stuff you know
169:05 - that could be fun too yeah yeah do some
169:09 - machine learning that's it what is a
169:11 - machine that name we get Jakob on we do
169:13 - some automation oh yeah yeah Jakob you
169:16 - have building front-end and all that but
169:18 - Python and react people are gonna go
169:20 - crazy with that yeah YouTube clone would
169:23 - be fun a YouTube clone would be
169:24 - extremely fun and the reason why that
169:26 - would be fun for me a lot of fun for me
169:29 - is because like I want my own website
169:32 - where I can like show videos you know
169:34 - YouTube videos and so yeah actually look
169:37 - personally it's exciting for me and
169:39 - inspiring because I would want to use
169:40 - that app he's actually yeah that'd be
169:43 - fun okay anything else funny before we
169:47 - sign off no I think like everyone it's
169:50 - just been an amazing like sort of
169:52 - response today it's been awesome totally
169:53 - to come love it I think crazy yeah
169:57 - awesome guys again thank you guys so
170:01 - much for all your love you guys are
170:03 - saying some amazing things like you know
170:06 - it's so [ __ ] response if somebody
170:09 - said script alert hello I'm falling you
170:12 - guys are just amazing build Twitter
170:14 - clone next so awesome guys thank you
170:16 - guys so much for all the love this is
170:18 - the app that we built as a facebook
170:19 - Messenger clone you can see it scales
170:22 - extremely well its online and no matter
170:25 - who's using it like instantly it's
170:27 - scaling right you guys all started using
170:29 - it all at the same time it's not bugging
170:31 - out everybody's has a great user
170:33 - experience with that said thank you guys
170:36 - so much for signing in today we might go
170:39 - live tomorrow actually we will go live
170:41 - tomorrow the goal is to start around 8
170:44 - a.m. but what keeps happening is that we
170:47 - keep having lots of new ideas and so
170:50 - then the time keeps getting pushed more
170:52 - and more back and then we end up
170:53 - starting a lot later
170:54 - so tomorrow we'll try to go live between
170:57 - 8 a.m. to 10 a.m. somewhere around that
171:00 - time and really push ourselves to be
171:02 - more disciplined and really get around
171:04 - that time but yeah that's the window
171:06 - just be open to YouTube and subscribe to
171:09 - our channel and as soon as you see the
171:10 - notification come through just jump on
171:12 - it that's exactly okay awesome thank you
171:18 - guys love you guys
171:19 - really appreciate you guys hope you
171:22 - enjoy that
171:23 - peace sunny you killed it
171:29 - alright guys take care bye alright see
171:31 - you guys