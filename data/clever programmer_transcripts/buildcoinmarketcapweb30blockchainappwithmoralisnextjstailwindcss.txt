00:00 - in this video you'll build coin market
00:02 - cap web 3.0 dap with nexus we'll be
00:05 - using solidity to write the smart
00:07 - contracts and morales speedy nodes to
00:09 - deploy it we'll use open zeppelin to
00:11 - ensure that our coins are compliant with
00:14 - the erc20 standard we'll use morales to
00:16 - authenticate every single user that
00:19 - actually signs into our app we'll use
00:21 - morales database to also create user
00:24 - profiles on signups we'll also use
00:26 - morales to interact with the smart
00:28 - contract and remember morales makes it
00:30 - incredibly easy to do all this stuff out
00:32 - of the box because otherwise you have to
00:35 - normally do so many things manually and
00:37 - this just saves you hours or maybe even
00:39 - days of development time we'll use
00:40 - context api to manage our react state
00:44 - when we're coding in nexjs you'll learn
00:46 - how to use cloud functions with netlify
00:49 - such as their edge function and you're
00:51 - going to be deploying your coin market
00:54 - cap web 3.0 blockchain app on the
00:56 - internet and we'll also be doing that
00:58 - using netlife because with netlify you
01:00 - get the smoothest most buttery
01:03 - experience so if you're excited smash
01:05 - the like button i'm excited and let's
01:07 - demo the app and after that we'll get in
01:09 - to start building it let's get right
01:10 - into it all right so let's take a look
01:12 - around this is the finished coin market
01:15 - cap this is live as you can see here let
01:18 - me just walk you through a bunch of the
01:19 - features so the main thing is there's a
01:21 - connect wallet connect any of the
01:23 - wallets that you have here let's click
01:25 - meta mask and boom already metamask is
01:27 - letting us know that we want to
01:28 - authenticate with morales boom and we're
01:30 - already logged in i'll show you guys how
01:32 - to use that how to create that login
01:34 - button and all the code that you need
01:35 - for it which isn't a lot so awesome so
01:38 - as you can see we're logged in this is
01:40 - pulling from the coin market cap api if
01:41 - i click bitcoin we have dynamic pages
01:45 - look how this nice graph just generated
01:47 - there's this btc to usd converter and on
01:50 - top of that you can see here but there's
01:51 - also a nice working chat app you can say
01:55 - what's up let's put post and there you
01:57 - go what's up is right there arthur
01:59 - douglas looks good and then if we go
02:01 - back to the main page our api loads in
02:03 - if i click on any of the prices all
02:05 - right we did bitcoin last time let's
02:07 - click ethereum notice how it's the price
02:09 - is for ethereum all these tags are here
02:11 - it looks pretty clean and next the piece
02:14 - of resistance and the awesome part the
02:17 - thing that i like the most is there's
02:18 - actually a way to swap crypto so let me
02:21 - just demo on how this works so let's say
02:24 - you have all of these coins or tokens
02:27 - that you want to trade with let's say i
02:29 - have my eth in order to get these tokens
02:31 - we need to pay with ease so let's say i
02:33 - want some dye let's select it how much
02:35 - do you want guys let me hear you you
02:37 - said 23. awesome i was thinking that too
02:40 - let's go ahead and hit swap beautiful so
02:43 - again here's another metamask
02:44 - notification asking us to sign and
02:46 - notice how it says mint all right
02:47 - because we're taking our eighth and
02:49 - we're minting some new diet tokens so
02:52 - i'm showcasing how to simulate a dex
02:54 - with this the next one is going to be a
02:56 - signature for the contract interaction
02:58 - go ahead and hit confirm with that too
03:00 - nice and then we could do is take a look
03:02 - at metamask awesome so it says
03:04 - transaction confirmed i'm getting all
03:06 - these beautiful sounds and if you look
03:09 - 23 died there we go so we exchanged some
03:10 - of our ethereum i used to have 0.2 now i
03:13 - have 0.18999
03:15 - 4 23 died so now you might ask okay we
03:17 - have die what if i want to change my die
03:20 - for doge right how much diet you want to
03:22 - change for i want to send eight of my
03:25 - die and turn that into dogecoin so let's
03:27 - see if that's possible let's hit swap
03:29 - okay there's the transfer we're
03:30 - transferring a die to the doge contract
03:33 - hit confirm another meta mask
03:35 - notification and when we send our eight
03:37 - die to the doge contract the doge will
03:39 - send us back freshly minted dogecoin all
03:42 - right hit confirm all we must do now is
03:44 - wait let's see it says sending die and
03:47 - also the mint is queued up ready to go
03:49 - usually takes a couple minutes but it
03:50 - doesn't need to take that long there we
03:52 - go as i was speaking it's done there's
03:54 - the sendai there's the mint let's see if
03:56 - it worked eight doge and we got eight
03:58 - let's die look at that we have a fully
04:00 - functional exchange on our hands and if
04:03 - you want more tokens let's say damn
04:05 - outlands i wish you want to have more
04:06 - tokens that we can change with just
04:08 - create more contracts to simulate those
04:11 - tokens with that said that's gonna be
04:14 - the demo i hope you guys are excited to
04:16 - build this and add this to your
04:17 - portfolio let's break and go what is up
04:20 - guys and welcome back to another video
04:22 - it's lance again and just like qazi said
04:24 - we're making coin market cap today so
04:26 - i'm not gonna waste any of your time
04:28 - head over to your terminal here and
04:30 - let's create our project so if you
04:32 - didn't know we're gonna be using next.js
04:34 - again and of course tailwind so we can
04:36 - actually do that with one simple line
04:37 - and i'm gonna show you right now so i'm
04:39 - gonna say npx create dash next dash app
04:43 - at latest and then just insert this e
04:45 - flag by saying dash e and if you want
04:47 - tailwind with your project already
04:48 - installed we can do a with
04:50 - tailwind css and then put space and then
04:54 - we can decide what do you want to name
04:55 - your folder i'm going to name mine coin
04:58 - market cap dash clone dash blockchain i
05:01 - want to get all of these starter files
05:03 - into that folder name cool i'm going to
05:04 - hit enter and i'll have to do is just
05:06 - wait for this install and as you can see
05:07 - it's also installing tailwind so you
05:09 - don't have to install it manually and
05:11 - once that's done you guys can head over
05:13 - and type in code dot which will open up
05:15 - your vs code after you see the into that
05:17 - file or you can open it up manually and
05:19 - i'll show you guys how to do that so
05:20 - you're going to go to your ps code hit
05:22 - open folder and then if you go to your
05:24 - project folder which is for me here coin
05:27 - market cap blockchain i'm going ahead
05:29 - and select it and as you can see
05:30 - tailwind is already installed and if i
05:33 - press something like command j and we do
05:36 - a yarn div you can see that we're going
05:38 - to start off the server and if i go open
05:40 - up my page so let's do local host 3000
05:43 - and there it is our next dress up is up
05:46 - and ready to go let me show you guys
05:48 - what else we need to install all right
05:49 - so now that we have our next js app set
05:51 - up if you didn't know we're going to be
05:53 - using netlify to deploy our project so
05:56 - one of the first steps is head over into
05:58 - a new tab and go ahead and type this
06:00 - link inside the url it's going to be
06:02 - ntl.fyi
06:06 - clever this is how we're going to be
06:07 - able to sign up for netlify go ahead and
06:09 - sign up using this link and i'm already
06:11 - signed up so i'll hit login once you're
06:13 - here you're going to see all the sites
06:14 - that we have when we deploy them and the
06:16 - next thing we need to do is install the
06:18 - cli tool and if you guys didn't know
06:19 - with that cli tool we can actually run a
06:21 - local development server through our
06:23 - command line so instead of running
06:25 - yarndev we can actually write something
06:26 - like netlifedev the main bonus of this
06:29 - is that we can run continuous deployment
06:31 - from the command line so how cool is
06:33 - that so one way to get started is go
06:35 - ahead and temporarily clear your
06:38 - terminal and what we need to do is to
06:40 - install it is to type in this command
06:41 - npm install netlify.coli
06:46 - the only prerequisite you need is just
06:47 - make sure you have node installed which
06:49 - you should have already i'm going to hit
06:50 - enter and this is how you install the
06:52 - cli tool globally so that no matter what
06:55 - project you have you can run any netlife
06:57 - command inside your terminal awesome so
06:59 - like i mentioned earlier we can actually
07:01 - run a server through netlify's cli tool
07:04 - by writing ntldev which is just for
07:06 - netlify okay and look at that
07:07 - automatically opens up and it runs on
07:09 - localhost 888.
07:12 - cool so now let's do the fun part and
07:14 - let's deploy our project right away by
07:16 - clearing this again and let's just clear
07:18 - this to make it squeaky clean and then
07:20 - we can say ntl init what this does is if
07:23 - you already have a github repo with your
07:25 - project we can connect this to that so
07:28 - whenever you do get push it's gonna
07:29 - rebuild the site and make it live so i
07:32 - already took the liberty of making the
07:34 - repo and before we continue with this
07:36 - let me show you guys what i did paste in
07:38 - in the link of your project so if you
07:39 - haven't uploaded our current project
07:41 - into github this would be a good time to
07:42 - do that so take a moment do that pause
07:44 - the video and i'll be waiting for you
07:46 - awesome so if you have a project up on
07:48 - github already let's connect this
07:50 - directory to an existing netlife site or
07:52 - create and configure a new one so my
07:54 - goal with you guys is to show you how to
07:56 - do it all from the command line because
07:58 - that's the power of this tool so i'm
08:00 - going to hit the down arrow and create
08:01 - and configure a new site okay i don't
08:04 - have any team so i'm just going to hit
08:05 - enter and here we can actually name the
08:07 - site or the url that people can type in
08:09 - so i'm going to call a coin market cap
08:12 - dash clone dash blockchain i'm gonna
08:14 - keep everything the same name so i know
08:16 - exactly what i'm talking about to enter
08:18 - and there you go it's created a site for
08:20 - us and then just have to type in the
08:21 - build command which is yarn build okay
08:23 - hit go ahead and hit enter for the next
08:25 - question and you can go ahead and hit
08:27 - enter for that next question too cool
08:29 - and again if you're making a site with
08:30 - an xjs there's this essential plugin
08:32 - that they ask you to install go ahead
08:34 - and say yes and go ahead and say yes for
08:36 - this one as well cool awesome and you're
08:38 - gonna see these two next steps which is
08:40 - just push to your git repo to trigger
08:42 - new site builds like i mentioned earlier
08:43 - or you can type in netlify open to just
08:45 - open the admin url of your site what we
08:48 - could do instead is remember how we
08:50 - logged in over here if i hit refresh
08:52 - look at that we already have the site
08:54 - made on netlify and i did that all
08:56 - through the command line if you click on
08:57 - it it says site has not yet been
08:59 - deployed let's go ahead and scroll down
09:00 - and you can see that it's currently
09:02 - still building all right so we can
09:04 - actually follow the deploy logs so in
09:06 - any case we get push and it says there's
09:08 - an error here we can help identify what
09:10 - the problem is okay so just checking
09:12 - down below let's wait for this to finish
09:14 - and let's see if our site is already
09:16 - live awesome so i got the very nice
09:18 - message that our site is live and one
09:21 - cool thing about the cli tool or just
09:23 - netlify in general is that we can click
09:25 - this preview button here to preview our
09:27 - site awesome and again of course looks
09:29 - like this we just started but it's live
09:31 - and i could show you guys by coming back
09:33 - to netlify go ahead and click on the
09:35 - main project and now instead of saying
09:37 - in progress or site not deployed this is
09:40 - our live link coin market cap clone
09:43 - blockchain.netblife.app so if you click
09:45 - on it let's go our site is live and you
09:47 - might ask lance the project's not done
09:49 - why would you make it live already like
09:51 - i said anytime we do make a change and
09:53 - do a get push in our with our changes
09:55 - netlify is going to read the repo again
09:57 - and try to redeploy it so that our
10:00 - project is always live and accurate to
10:03 - wherever we're at in our project folder
10:05 - sounds good so that's how we set up
10:07 - netlify let's move on to the next part
10:09 - okay one thing i wanted to talk about is
10:10 - that for this app we're also going to be
10:12 - using morales so if you're not sure what
10:14 - morales is let's go ahead and start by
10:16 - thinking about what we're gonna need for
10:17 - this app so with this app i'm thinking
10:19 - i'm ready we're gonna need to log in a
10:21 - user we're gonna need to fetch a user's
10:23 - balances we're gonna need to fetch
10:25 - transactions fetch our smart contract
10:27 - events how would we do that from scratch
10:29 - it would be something like creating an
10:30 - rpc node and creating all the
10:32 - infrastructure around it which might
10:35 - take some time you might not be sure on
10:36 - how to do that and what process goes
10:38 - into it but what if that was made a lot
10:41 - easier that's exactly why we're using
10:42 - morales today because it does a lot of
10:44 - the heavy lifting if you guys are
10:46 - familiar with firebase is which is
10:48 - backend as a service morales is the
10:50 - firebase of crypto it gives all of that
10:53 - as a service and we can just connect to
10:54 - their server so how do we do that and
10:57 - get started well go ahead to your
10:59 - browser and type in t.morales.io
11:02 - clever that's all you need to do to sign
11:04 - up for me if i put that in that link it
11:06 - already logs me in because i'm already
11:07 - logged in what you should see is a
11:09 - beautiful sign in page go ahead and sign
11:11 - up morales to get started cool so once
11:13 - you sign up let's create a server so
11:15 - that we can connect our application and
11:17 - talk directly to the blockchain of our
11:20 - choice so create a new server i'm gonna
11:22 - do the test net for now and we can name
11:24 - our project so for me i'm gonna call it
11:27 - coin market cap clone blockchain okay
11:31 - and for the region i click new york
11:32 - which is the closest for me make sure
11:34 - you click the one closest to you and
11:35 - like i said you can click on anything
11:38 - you need for this point and i'm gonna
11:40 - just use polygon for now cool thing is
11:42 - morales is crosstrained and it's
11:44 - compatible with all of these and if any
11:46 - time you need to change it we can just
11:47 - select it right here so i'm gonna click
11:49 - add instance and there you go it's all
11:51 - set up if you click this drop down here
11:53 - you can check and click on this
11:55 - dashboard and you can see this is the
11:57 - database that they provide for us which
11:59 - you can utilize so anytime a user logs
12:01 - in it's going to get logged in here and
12:03 - we can actually fetch users and do what
12:05 - we need as well as fetch transactions
12:07 - that come across it so this is the setup
12:09 - from morales there's gonna be more later
12:11 - in our code but that's just the start
12:13 - all right so that's enough setup let's
12:14 - go ahead and start coding so what you
12:16 - want to do to set up your environment
12:17 - you could say ntldf to start running
12:20 - your server awesome and you're gonna see
12:22 - this beautiful page here this is our
12:24 - starter app and if you ever want to make
12:26 - any changes just go to your pages go to
12:28 - index and if you say welcome to
12:31 - coin market cap if i hit save you can
12:34 - see welcome to coin market cap it
12:36 - instantly updates with whatever changes
12:38 - we make that said we can go ahead and
12:41 - erase a lot of this because we're gonna
12:43 - make and set up a bunch of our
12:45 - components now so i'm gonna erase this
12:47 - let's do ctrl b so you can make the code
12:49 - a lot clearer and i'm also going to do
12:51 - an alt c here cool so for now we can
12:54 - just erase the class name and make a div
12:56 - because i'm going to add in a new one
12:57 - later so i've hit save and now it's all
13:00 - blank good so i'm going to use this
13:01 - index to plan out the components i'm
13:03 - going to need and talk about what we
13:06 - want to do next so again what we can do
13:08 - is set up a component the first
13:10 - component that i want to set up is going
13:12 - to be the header component okay it'll
13:14 - look a little something like this if i
13:15 - make this a little bigger and go here i
13:18 - have the finished version you guys take
13:20 - a look right here this is the header
13:22 - component and this is what we're going
13:24 - to be making first followed by something
13:26 - called the trending component like this
13:28 - and then there's going to be a table
13:30 - with a graph that's going to be calling
13:31 - an api which is not showing up yet
13:33 - because it's not set up cool okay so
13:35 - then if i make this smaller we can go
13:37 - ahead and x this out and now you guys
13:39 - have an idea of what the header is going
13:40 - to look like let's set up that next
13:41 - component oops and call it the trending
13:45 - component that was the second thing i
13:47 - showed you guys that i circled and then
13:49 - there's also something that i'll call
13:50 - the cmc or the coin market cap table
13:53 - cool so these are the three main
13:55 - components i might be adding more but
13:56 - for now the main one i want to focus on
13:58 - is the header so before we get to the
14:00 - header let's just set up some css which
14:03 - you can just say min
14:04 - h
14:05 - screen and then for the trending one
14:07 - let's make another div and say class
14:09 - name mt-10 oops and then for this one
14:12 - we'll have another one not like that and
14:14 - we'll do a class mt-20 cool so those are
14:16 - the divs for this let's go ahead and
14:18 - make the header component so we can
14:21 - erase these two imports because we're
14:22 - not really using it and since these
14:24 - components don't exist yet let's go
14:25 - ahead and make them so what we want to
14:27 - do first is make a new components folder
14:29 - at the root components and then inside
14:31 - the components folder i'm going to start
14:33 - with our header.js
14:35 - cool and then if you guys don't know
14:37 - there's an extension if you do r-a-f-c-e
14:40 - hey click it and there we go it's all
14:42 - set up cool so now that our header
14:43 - component is set up let's head back to
14:45 - our index and now we can import said
14:47 - header so what we can do uncomment this
14:50 - guy out and type in import header and
14:52 - you should see it header from quote dot
14:55 - dot forward slash or sorry dot forward
14:57 - slash components slash header js hit
15:00 - save and there it is if you see it's
15:02 - really tiny but it says header that
15:04 - means our component is all set up and
15:05 - good to go now hopping into the
15:07 - header.js let's go ahead and set this
15:10 - guy up so i'm going to do is set up an
15:12 - import here let's import the next image
15:16 - from next image and let's just set up
15:18 - these divs right here so i'm going to
15:19 - hit backspace enter to format it and
15:22 - then it's going to disappear because
15:23 - there's nothing there and i'm going to
15:24 - give this div a class name styles dot
15:28 - header all right and if you're
15:29 - unfamiliar with what i'm doing we're
15:31 - using tailwind css and what we could do
15:33 - at the top here is set up a styles
15:35 - object which will have all the css
15:38 - within our divs and it's just calling
15:39 - that style's object and passing in that
15:41 - name sounds good so let's continue the
15:43 - next thing i want to do is set up an
15:45 - image okay it's self-closing and the
15:47 - source is going to be this quote and
15:50 - paste this right here it's going to be
15:51 - this coinmarketcap.com
15:54 - static okay now hopping into header.js
15:56 - you can see that if i take this header
15:58 - out and hit save it's all gone so let's
16:01 - go ahead and start styling it you want
16:03 - to do is put some space in here let's
16:05 - just give this a class name i'm thinking
16:07 - we can call it styles oops not
16:09 - stylesheet.header
16:11 - okay from there what we could do is
16:13 - import image from next image so that we
16:16 - can apply any sort of image we want so
16:18 - let's do that right now by saying image
16:20 - self closing and for the source of this
16:22 - image let's see src equals quotes and
16:26 - place this right here it's going to be
16:27 - this long link s2 dot coinmarketcap.com
16:31 - static slash cloud slash img slash coin
16:33 - market cool then we can hit alt and then
16:36 - let's say logo let's also give it a
16:38 - width of 220 and we can also give it a
16:41 - and that can equal 220 as well one thing
16:43 - i want to talk about is notice how it
16:45 - says styles that header that's because
16:46 - we're going to be using tailwind now if
16:48 - i press save right now you're going to
16:50 - see an error called styles is not
16:51 - defined right because if you want to put
16:53 - styling behind this div we have to do is
16:55 - come up top here and say con styles
16:58 - equals an empty object and then we can
17:00 - write header like so so this is how we
17:02 - can give our div styling we have a
17:04 - styles object and every key will be the
17:07 - div that we have so this is header so
17:09 - let's give it some styling background
17:10 - color of just brackets and give it a
17:13 - color of
17:16 - 1717 one a you can also give it a text
17:20 - white h-20 give it a flex property and
17:23 - then a gap of 100 pixels we can say with
17:26 - full here and then p
17:28 - dash bracket 30 pixels so that should be
17:31 - good if i hit save we'll have to put a
17:33 - comma here let's go ahead and hit save
17:34 - awesome now it's invalid source prop oh
17:36 - i see because you have to configure it
17:38 - under images cool so what this tells me
17:40 - is i need to go over here and go to our
17:42 - next config and you see this module that
17:45 - exports let me update it to something
17:47 - like this and let's close it off cool
17:49 - what we want is an images key now with
17:51 - the domains that we're going to use so
17:53 - like you saw it was s2 we're also going
17:55 - to use s3 okay hop over to next.config
17:58 - and what we want to change this to or
18:00 - update it rather is something like this
18:01 - where it says images as the key and then
18:04 - it's going to have the domains that
18:05 - we're going to use so remember the one
18:07 - that i just did was s2 there's also
18:08 - going to be an s3 in there so make sure
18:10 - it has all of this i'm gonna go ahead
18:11 - and hit save and if you look down in our
18:13 - terminal found the change in the config
18:15 - restart the server that's fine i'm gonna
18:16 - hit ctrl c to end that terminal and then
18:19 - let's type in mtl dev once more okay if
18:21 - you look there it is there is our image
18:24 - and now we're getting closer and closer
18:26 - to the header so anytime we make a div
18:28 - we're going to add styling for it so
18:29 - what i'm going to do now is let's create
18:31 - all the divs first and let's go back
18:33 - ahead and do all the styling after okay
18:35 - so continuing on with the header within
18:37 - the header div go right below it and
18:40 - let's make another one i'm going to call
18:42 - this one oops let's give this one a name
18:44 - of wrapper or header wrapper would be
18:47 - better still curly bracket styles dot
18:49 - better wrapper okay then within this div
18:52 - we're going to also have another one
18:53 - which will simply just be styles dot nav
18:57 - and then within this nav it's gonna have
18:59 - a bunch of different items for example
19:01 - like crypto currencies exchanges all the
19:04 - tabs that we see on the regular coin
19:05 - market cap so let's go ahead and start
19:07 - doing that i'm gonna do now another div
19:09 - with class name of nav item actually
19:13 - styles.net right nice and again we're
19:16 - going to be reusing that nav item over
19:18 - and over again because we have a couple
19:19 - different things that need the same
19:21 - styling so within that knive item let's
19:23 - have another one called class name and
19:25 - this will be styles.nav
19:27 - link and let's put the curly brackets in
19:29 - there there we go and like i said this
19:31 - one will be crypto currencies cool last
19:35 - thing we're going to need in here is
19:36 - another one and hands to class name of
19:38 - styles dot badge and actually we can
19:41 - make this one self close cool and if you
19:43 - didn't know the batch here is going to
19:45 - be this nice blue circle around that
19:48 - cryptocurrencies which only some of them
19:50 - will have so with that in mind i'm
19:52 - actually just going to copy this and
19:54 - let's just do this a couple of times
19:55 - oops let's get the whole nap item let's
19:57 - do it once three for now like i said not
20:01 - all of them will have a badge like this
20:02 - next one is gonna be exchanges and this
20:05 - one doesn't have a patch following that
20:08 - is gonna be instead of cryptocurrencies
20:10 - on this one it's gonna be nft which
20:12 - actually will have the badge so we'll
20:13 - keep that there okay next we have
20:15 - something called crypt crib town which
20:19 - does have a badge and then the rest of
20:21 - them i believe aren't gonna have one so
20:22 - i can copy exchanges come down below
20:25 - here and paste for after krypton and
20:28 - then there's gonna be one here and let
20:30 - me see let me think oh yeah there is one
20:32 - more that has a badge so i'll copy this
20:34 - and that should be portfolio and is that
20:37 - it ah okay there's one more it's gonna
20:38 - be learn okay cool and let me just
20:40 - double check that by going on to the
20:42 - other page which i have on localhost
20:45 - 2001. let's see we got exchanges nft
20:48 - krypton portfolio watchlist and products
20:50 - and if you look at guys over here see
20:52 - that little circle right here that's
20:53 - what the badge is and again only one two
20:56 - three four of them have that okay so i'm
20:58 - going to do is make this smaller again
21:00 - cool so let's fill this in we have
21:01 - krypton the next one i said was
21:04 - portfolio
21:05 - then we have watch list then we have
21:08 - products oops products and then we have
21:12 - learn which again doesn't have a badge
21:14 - cool let me see oh and i'm just
21:15 - realizing it doesn't really matter that
21:17 - much but i wanted to label this as nav
21:19 - and that means this should be nav as
21:21 - well cool and just for fun so i can
21:23 - actually see my header up here let's add
21:25 - the rest of that styling which should
21:27 - just be the header wrapper and for the
21:30 - header wrapper the styling for that is
21:32 - going to be this flex property justify
21:35 - something and then page full max believe
21:38 - dash max dash screen dash excel mx-auto
21:44 - and a px-4 so that's header wrapper put
21:46 - a comma there next we have the nav okay
21:49 - and then in that nav it has flex justify
21:52 - center and then it has an item center
21:54 - and then i believe it's just a gap with
21:56 - let's say 20
21:58 - pixels awesome let's see what's next we
22:01 - have nav item next okay for nav item all
22:04 - we have to do is have a relative let's
22:07 - also give it a cursor pointer so that if
22:08 - we hover over it we'll see the pointer
22:10 - and then on hover you can add this nice
22:13 - opacity of 60. that looks nice cool okay
22:17 - last but not least let's go ahead and
22:19 - get this badge going and then we can do
22:21 - a rounded dash full background blue dash
22:24 - 600 and we can do it h 1 w 1 this one
22:28 - will have absolute in there bottom dash
22:31 - 5 dash 0 top dash 1 and let's add a nice
22:37 - ring of dash four and let's go ahead and
22:40 - do that and is there any other things we
22:42 - need for now nope looks like we're good
22:44 - let's hit save let's see what we got hey
22:46 - look at that all right so if i go back
22:48 - over here you grab this one there we go
22:50 - so it started coming together it's
22:51 - starting to look like the header of coin
22:53 - market cap but there's a couple of more
22:55 - divs i want to make for the header so
22:57 - let's put that back and let's finish the
22:59 - rest of this alright so let's continue
23:01 - working on the next part after this
23:03 - closing nav tag go ahead and hit enter
23:05 - because there's a couple things we need
23:06 - to do here so one of them is to make a
23:08 - div containing the connect button that
23:10 - we're gonna use from web3 ui kit which
23:12 - is gonna let users be able to log into
23:15 - our application so for now let's just
23:16 - set up the front end for it which is
23:18 - gonna be something like quotes here and
23:20 - just do flex item center there's no need
23:23 - to give this one a name because the css
23:24 - is pretty minimal so then again opening
23:27 - that up here we'll have the connect
23:29 - button which i'll be setting up soon set
23:31 - it up like that so i know where it's
23:33 - going to go and then right underneath
23:34 - that we'll have something like an input
23:36 - container right that's going to have a
23:38 - class name oops class name of styles dot
23:42 - input contain okay and then within that
23:45 - div will have a component that holds an
23:48 - svg and i'll set it up so it's going to
23:50 - be called search which i'll also set up
23:53 - and that search component is essentially
23:55 - going to have this little magnifying
23:56 - glass with 4r search bar cool and then
23:59 - within that you want an input here and
24:01 - then that input will give it a class
24:02 - name of styles dot input then we can do
24:06 - a placeholder of let's say search yeah
24:10 - cool and that should be it for the front
24:12 - end let's go ahead and finish the rest
24:13 - of the styling so let's scroll up to the
24:15 - top and underneath badge we can start
24:17 - writing out input container and if you
24:20 - could see it in the auto suggestions
24:22 - that means you actually typed it
24:23 - correctly so for input container i'll
24:25 - just have a flex property and let's give
24:26 - it an item center and justify center so
24:29 - we can center it and then let's google p
24:31 - two a rounded and do a b g of brackets
24:35 - here and the color that i want for the
24:37 - background is one seven one nine two
24:40 - four okay that's the input container and
24:42 - then for input let's do something like
24:46 - this where it's going to be colon quotes
24:48 - let's make the background transparent
24:51 - and we can do an outline none text white
24:54 - w 70 and
24:56 - ml-3 and let's do it as save and we can
24:59 - make this a little bit bigger so we can
25:00 - see it there we go so now we have a nice
25:02 - search bar in there and again we don't
25:04 - see the connect button or the little
25:06 - search icon because we haven't set that
25:08 - up yet so i'm going to make this smaller
25:10 - again and let's go ahead and do that now
25:11 - to get that search button working what
25:13 - you need to do is grab the assets folder
25:15 - and it should be available to you on our
25:17 - repo so i already have access to that
25:19 - what i'll do is come over to our files
25:22 - and i'll hit paste and i should have the
25:24 - assets folder and again you can get this
25:26 - from our github repo that has all the
25:28 - things here and i just want to mention
25:30 - that the assets help all the pngs so for
25:33 - all the coins that we're going to use
25:34 - later for a coin microcap like solana
25:37 - ethereum binance avalanche right all
25:40 - those assets are going to be here as
25:41 - well as our svgs so if you open up this
25:44 - folder you're going to notice that
25:46 - there's some js files so what we're
25:47 - going to need is search.js and it's
25:49 - essentially a component that holds the
25:52 - svg so that we can reuse it anywhere
25:54 - that's one of the main benefits of
25:55 - components it's essentially just
25:57 - reusable ui or functionality that we can
25:59 - use throughout our project so we made it
26:01 - available for you here let us know if
26:03 - you need to get the assets so remember
26:05 - all right it's in the assets under svg
26:07 - so that's how we're actually going to
26:08 - import it so coming up to the top let's
26:10 - import search so to do that we're going
26:12 - to do import it should be search from
26:16 - and then put the path of the file so if
26:18 - you remember it's going to be
26:20 - dot forward slash assets forward slash
26:23 - svg
26:24 - slash and if you scroll down search is
26:27 - where it contains the svg so if i say
26:30 - save we have the search come down below
26:32 - here and now hit save and if i make this
26:35 - by this little bigger there it is we can
26:37 - see it now if you take a look there's a
26:39 - little icon if i circle it beautiful and
26:41 - now the only thing we need to do to make
26:42 - this look a little nicer is if you look
26:44 - there's supposed to be a connect button
26:46 - in between learn and search right here
26:48 - so in that in the next section i'm gonna
26:50 - show you guys how to do just that cool
26:52 - so like i said we're going to be setting
26:53 - up that connect button now before we do
26:55 - that this is the current state of our
26:56 - app as you can see the header is coming
26:58 - along nicely but remember earlier when
27:00 - we deployed our site to netlify and we
27:02 - just saw the next js app what we could
27:04 - do now is something really cool so let's
27:06 - say i kill a server for now and let's
27:08 - just do a good stat so if you look
27:10 - there's a couple changes we made to the
27:12 - assets folder and the components folder
27:14 - what we can do now is do a git add dot
27:17 - to add everything commit right header
27:19 - add header frontend hit enter then we
27:22 - can do a get push all right and check
27:25 - this out i push that go over to the
27:27 - website let's open up netlify again
27:29 - app.net look fine you can go to site
27:31 - overview and if you look i click on the
27:33 - link this is what it looked like before
27:34 - this is the actual live link of our
27:36 - website but if i scroll down look at
27:38 - this production deploys building the
27:40 - second i push to github netlife is
27:43 - recognizing there's a change in the repo
27:45 - and it's rebuilding an app so remember
27:47 - keep an eye on this this is the live
27:49 - link currently let's see what happens
27:50 - when it's building awesome so look at
27:52 - that the site is live and again like i
27:55 - mentioned before you can actually
27:56 - preview this but this site through
27:57 - netlify or what we could do since it's
27:59 - already live is this is a live link i
28:01 - hit refresh hey look this is my latest
28:04 - repo already live so this was really
28:07 - helpful for me and my team when we were
28:08 - developing projects and whenever i made
28:10 - any updates they could take a look at it
28:12 - live on their end instead of downloading
28:13 - the whole repo and pulling it they could
28:15 - just see it right here so i just wanted
28:17 - to showcase that and the next thing
28:18 - let's do is let's set up our morales
28:20 - server with our app so that we can put
28:22 - in that connect button that i've been
28:24 - talking about all right so let's head
28:25 - over to morales.io again make sure you
28:27 - log in which i'm pretty sure i'm logged
28:29 - in already okay there we go and we have
28:31 - our coin and go ahead and go to your
28:33 - morales server and go ahead and do view
28:35 - details and i'm going to show you a
28:36 - really neat trick that you could do with
28:38 - nullify so we have our server url and
28:41 - the application id both of which in
28:43 - order to start using morales and again
28:45 - to start using morales so if i press
28:47 - comma here and i hit paste i actually
28:49 - have right the all the packages that
28:52 - we're gonna need let me just remove next
28:53 - because that's extra but this is it we
28:55 - may not use all of them but we're to use
28:57 - a majority of them for example these
28:59 - come with and what we need to add is the
29:01 - wallet connect the at web3 auth the
29:04 - chart.js for the graphs for gun.js for
29:06 - this cool chat app that we might install
29:08 - magic sdk morales
29:11 - ii react morales which we'll need to set
29:13 - up morales react switch and web3ui kit
29:17 - which is the main focus for this
29:19 - specific section that's the connect
29:20 - button that we're going to use okay so
29:22 - those are the dependencies if i go ahead
29:24 - and hit save let's go ahead and do a
29:26 - command called yarn and what this does
29:28 - is it's going to download all the
29:30 - packages that the dependencies read over
29:32 - here which is everything so give this a
29:34 - couple seconds and we should be good to
29:35 - go all right so it looks like it's done
29:36 - and one thing i want to showcase is in
29:38 - order to start using morales we're going
29:40 - to have to go to our pages and then
29:42 - underscore app and start importing the
29:45 - provider and passing in the server url
29:48 - and the application id usually i like to
29:50 - put those in our env files so what we
29:53 - can do is actually use our netlife cli
29:56 - tool and set it up that way so we need
29:57 - to write is ntl for nullify space e and
30:00 - b and then we can do a colon here and
30:03 - set all right let me just format this so
30:05 - you guys can see it a lot better how's
30:06 - that let's do this set and then you can
30:09 - type in the variable name so what is
30:11 - your environment variable let's do next
30:13 - public underscore server and then you're
30:16 - going to hit space and then the value of
30:18 - that can go right here so if i copy the
30:20 - server url excel come into here right
30:23 - click there we go so this is my variable
30:25 - name next public server this is the
30:26 - value so i'm go ahead and hit enter okay
30:29 - so it's set the environment variable for
30:30 - us we're going to type that again but
30:32 - instead of next public server i'm going
30:34 - to erase all this let's do next public
30:37 - app underscore id space and then let's
30:40 - copy in the app id okay and you can
30:43 - erase this little tilde enter boom cool
30:45 - and then if we do ntl dev to run it
30:48 - locally he's going to load up a new one
30:49 - we can accept the old one awesome and
30:51 - you can see that injected the build
30:53 - setting of the environment variables so
30:55 - now let's go ahead and set up the
30:56 - provider cool to get started with the
30:58 - provider let's go up to the top here and
30:59 - say import and then we can say something
31:02 - like this and then we could do morales
31:04 - provider from react dash morales cool
31:09 - and what we need to do next is come to
31:11 - the return here let's put it in
31:13 - parentheses and let's wrap our main app
31:16 - which is under component with that
31:18 - provider so what we could do is indent
31:20 - it a little bit enter here indent it
31:22 - once more and i'm going to go here type
31:24 - in our route list close it off and then
31:27 - put our app in between that's it right
31:28 - by doing this we're making sure that our
31:30 - app is able to use morales and one thing
31:33 - that we need to do is pass in our server
31:35 - url and our app url as well okay cool
31:38 - and if you see little squigglies that's
31:39 - because we need to pass in an app id in
31:42 - the server url just like i mentioned and
31:44 - one thing that is cool if i do
31:46 - console.log process
31:49 - dot env
31:51 - dot next public underscore server and i
31:54 - hit save if i do inspect element look at
31:56 - that in the console log our server url
31:58 - is there and guess what i didn't have to
32:00 - make any env files which i think is
32:02 - pretty cool it's all connected with our
32:04 - build on netlify and whenever we run our
32:07 - build we can actually pull those
32:09 - environment variables easily so we can
32:11 - just copy this take out the console log
32:14 - and i'll just pass in that url so to do
32:16 - that we're just going to go in here and
32:18 - say server url equals just pass in not
32:21 - the console.log the process
32:23 - dot env dot
32:25 - next public server cool then from there
32:29 - we can do app id is also equal to
32:32 - process
32:33 - dot env dot
32:36 - next public app underscore id and we
32:39 - should be good okay now once that's done
32:42 - let's head over back to our header.js
32:44 - boom and what we can do now is import
32:47 - connect button from web3 ui kit and
32:50 - again if you're not familiar web3 ui kit
32:52 - is essentially a package that morales
32:54 - uses that gives this front end with the
32:56 - functionality of the login so i don't
32:58 - have to write any additional code what
33:00 - do i mean let me just show you so if you
33:02 - come down below and comment this out and
33:04 - let's also save let's make this guy
33:07 - bigger there's going to be a connect
33:08 - wallet button already here and if i
33:10 - click on it look at that literally a
33:12 - model comes up with all the different
33:13 - wallets that you can connect to i
33:15 - personally have meta mask at the moment
33:16 - so if i click meta mask wow there's
33:18 - already metamask notification that pops
33:20 - up when i did it and guess what i didn't
33:22 - write any code of it morales is doing a
33:24 - lot of the heavy lift thing which is
33:26 - pretty much why we're using it to build
33:27 - our applications much faster so here it
33:30 - is here's the signature request with
33:32 - morales authentication saying like i'm
33:34 - signing off saying morales can query any
33:36 - transactions i have and any information
33:38 - for the database which is awesome so
33:40 - i'll hit sign and there we go our app
33:42 - should be connected and that's the
33:44 - connect wallet button okay let's make
33:46 - this bigger let's hit save that's our
33:48 - connect wallet button and what i want to
33:50 - do next is if i click it this beautiful
33:53 - modal appears and i guess what i don't
33:54 - have to write any code for it if i click
33:56 - meta mask you should see it's going to
33:58 - ask us to sign in and besides metamask
34:00 - there's also a bunch of other wallets
34:02 - that this button supports and again i'm
34:04 - using metamask so if i click on it i'll
34:06 - see the connect with metamask option i'm
34:09 - going to do account one i hit connect
34:11 - connecting and here's the signature
34:13 - request with morales authentication and
34:15 - i'll have to do is assign it to confirm
34:17 - that morales can query my account in any
34:19 - transactions and add it to their
34:21 - database so if i hit sign bam look at
34:23 - that it automatically updated this
34:25 - connect button with exactly how much
34:27 - ease i have and my also my wallet
34:30 - address and if we go back to let's go to
34:32 - our dashboard we can look at the morales
34:34 - database and if you look under users
34:35 - you'll see two and you'll see the one
34:37 - that just registered it's going to be my
34:40 - wallet address right ox 1c there you go
34:43 - and that's exactly how much ether i have
34:45 - look at that morales does a lot of the
34:46 - heavy lifting and now we already have a
34:48 - login and logout button cool so that's
34:50 - the connect button if you want to log
34:51 - out there's this little section right
34:53 - here click it and there you go and i can
34:54 - feel free to connect to any other wallet
34:56 - that you have awesome so that's
34:57 - literally the header let's work on the
34:59 - next part okay so for this section let's
35:01 - head over back to our index and if you
35:04 - go to our index the next component that
35:05 - we have to make is the trending
35:08 - component and you might be asking lance
35:09 - what's the trending component don't
35:10 - worry i got you so the trending
35:12 - component i have it running on localhost
35:15 - 301 2001 and if you just take a look at
35:18 - this whole section right here look if
35:20 - this is the this whole section that i'm
35:22 - circling would be the trending component
35:25 - you guys see that cool so if you break
35:27 - this down if whenever you especially if
35:29 - you're starting out with react you want
35:30 - to be able to break things down into
35:32 - components so if i'm looking at this
35:33 - trending component i'm going to notice
35:35 - that this is probably a component as
35:37 - well this is going to be called my
35:39 - trending card and notice how i have more
35:41 - than one so if i made this one copy
35:43 - paste there you go we have three
35:44 - trending cards and i'll probably have
35:45 - another component for trending
35:47 - row okay but we won't get that far let's
35:50 - do it piece by piece so with that let's
35:52 - do the trending part first got it cool
35:55 - so we can go ahead and switch to this
35:58 - exit out go back to our code and we're
36:00 - back at index let's go ahead and make
36:02 - that component so i'm going to go into
36:04 - here new file let's write trending
36:07 - dot js cool and you guys know the drill
36:09 - by now if i do an rafc
36:12 - tab and there we go our component is set
36:14 - up i can hit save go back to our index
36:17 - and let's import said component and also
36:19 - bring it out now so we can do an import
36:22 - trending from that forward slash
36:24 - components trending beautiful now we
36:27 - have trending i hit save and if we look
36:29 - back in our app we can see that's the
36:30 - spot that it takes up which lines up
36:32 - with what we want so let's go over here
36:34 - go to our trending and let's get started
36:36 - cool so to get started i want to go up
36:38 - to the top here and let's import one of
36:40 - our react hooks and that hook that we're
36:42 - going to use for this specific component
36:43 - is use state okay keep that in mind and
36:46 - in the next line let's import something
36:49 - that i'll call import fire from quotes
36:53 - and then we can say
36:55 - dot forward slash assets slash
36:58 - fire.png so remember we set up that
37:00 - assets folder that we get from the repo
37:02 - i'm just getting the picture of the fire
37:04 - from there cool so there's a couple of
37:05 - different assets that i like to import
37:07 - i'm just gonna load them in really
37:08 - quickly okay hit enter there you go so
37:11 - just for you guys to catch up what i'm
37:12 - getting is btc from our assets i'm
37:15 - getting the usd tether from our assets
37:17 - import gainers from our assets and
37:19 - import recent from our assets okay
37:21 - another thing that we're importing that
37:23 - i'll do with you guys is import react
37:26 - switch from react switch you guys
37:28 - remember there's this little highlight
37:30 - button which i'll show you guys when we
37:32 - get to it that's pretty much what this
37:33 - react switch is for okay cool so coming
37:36 - down below here in between these two
37:38 - lines let's set up our use state we're
37:40 - gonna have something called checked and
37:43 - something set checked so that's gonna be
37:45 - equal to our use date and we're gonna
37:47 - pass in false this is going to be used
37:49 - later on for our react switch which
37:51 - again i'll get to in a bit don't worry
37:52 - don't worry i'll get to it thank you
37:54 - guys for patiently watching these
37:55 - tutorials it's been a lot of fun lately
37:57 - so i'm going to do is open up this div
37:59 - you can take out the word trending and
38:01 - we can go ahead and hit save and you're
38:02 - going to see trending is gone cool going
38:04 - back to the code though one of the first
38:06 - things you want to do is for the top div
38:08 - let's just give it a class name and for
38:10 - most of these we're not going to even
38:11 - give it an actual class name we can
38:12 - actually just give it some css already i
38:14 - want this to have the text white okay
38:17 - from there we'll have another dip this
38:18 - one will have a class name so let's set
38:20 - it up and this one will be styles dot
38:23 - oops styles dot trending rapper here we
38:26 - go and then it's gonna have a child for
38:29 - this one we can put flex justify dash
38:32 - between and then within that let's add
38:34 - an h1 of classname
38:37 - styles.h1 cool and for the text we just
38:40 - have to add today's crypto currency
38:43 - prices by market cap right that's what
38:46 - we saw earlier that should be good to go
38:48 - awesome and i'm just going to put a
38:50 - little bit of space here and let's just
38:51 - add another div this one will just have
38:53 - a flex property and within that we'll
38:55 - have a p tag class name text dash gray
38:59 - 400 that's the type of gray that i want
39:01 - to use and this will be the highlights
39:03 - and then you want to do a nbsp here cool
39:05 - here we'll have that nice react switch
39:07 - that i was talking about so to set it up
39:09 - it's self-closing and we want to have
39:11 - this property called checked and we
39:13 - passed in our check state okay which is
39:15 - by default false and then on change it's
39:17 - going to be listening for a change on
39:19 - change arrow function put these brackets
39:22 - here and then we can do set checked to
39:24 - be the opposite of it to always make it
39:26 - the opposite let's say it's false this
39:28 - not symbol would make it true but let's
39:30 - say it's true now the not symbol would
39:32 - make that false so it's like always to
39:34 - the opposite that's the purpose of why
39:35 - we're doing that there so let me just
39:37 - take a look at it we have the diluting
39:39 - div here we have some styles let's make
39:41 - some styles so that when i save we can
39:43 - take a look at what we have so coming to
39:44 - the top about like right here let's do a
39:47 - cons styles equals object and we just so
39:50 - far we just have trending wrapper and
39:52 - for trending wrapper it's just going to
39:54 - be mx auto max with screen dash 2 xl h1
40:00 - then we do a text dash 3 xl and a text
40:04 - white for the h1 i believe that should
40:06 - be it for now if i hit save shouldn't
40:08 - run into any errors but look at that we
40:10 - have the highlights okay and there we
40:12 - have the highlights and we still see
40:14 - this thing because i forgot to go over
40:16 - here and put a semicolon now it's gone
40:19 - but if you take a look can you guys see
40:20 - the highlights if i click on it hey look
40:22 - that's how you do that little effect
40:23 - where you have this nice toggle so it's
40:26 - purely aesthetic i just think it looks
40:27 - pretty cool if i have it but now we
40:29 - could do this and it's making use of our
40:31 - use date so there you go that's that
40:33 - cute highlights button what do you think
40:34 - i got awesome so let's go back to our
40:36 - page all right we cannot make this guy a
40:38 - little bit smaller since you guys get
40:39 - the idea or we could just click this and
40:42 - let's continue creating our divs okay
40:44 - what i want to do next is after these
40:46 - two closing divs we can have a line
40:49 - break here and then what we could do is
40:51 - make another div this one was just going
40:52 - to have a flex property and what i want
40:54 - to happen here is just a p tag let me
40:57 - fix that up just a p tag in that p tag
40:59 - you can actually give it some styling
41:01 - already with text dash gray dash 400
41:05 - oops there we go and what it's going to
41:07 - say is something along the lines of the
41:09 - global crypto market cap is
41:13 - 1.74 t which is trillion which actually
41:16 - is insane we're at a market cap of a
41:18 - trillion dollars all right so if we go a
41:21 - nbsp cool cool so we don't see it
41:23 - awesome from there let's add a span tag
41:26 - and from here i don't actually want to
41:28 - talk about it what i want to happen here
41:30 - within this span is i want to have a
41:33 - component called rate and if you guys
41:35 - are unsure what i mean by what a rate is
41:37 - if you guys look over here let's open up
41:40 - localhost
41:41 - 3001. if you guys look and see this
41:43 - little arrow plus the 53
41:46 - that is a component that i'm going to
41:48 - call rate and we're just going to pass
41:50 - in the number as well as if it's green
41:52 - or red so if you think about where mouse
41:55 - am i using this component it's actually
41:56 - going to be used here we just got to
41:57 - pass it different props so yeah you got
41:59 - the idea that's all the times we're
42:01 - using right so what we could do now is
42:02 - just set it up for later okay so maxing
42:05 - this out again moving this back down and
42:08 - let's go ahead and set it up so to get
42:09 - started setting it up let's do a ctrl b
42:12 - here and what i want to do is in my
42:13 - components folder i like to keep them
42:15 - organized and later on we're going to be
42:17 - making a cmc table or a coin market cap
42:19 - table and that's going to have a bunch
42:21 - of components so i'm thinking ahead and
42:24 - what i want to do is do a cmc table
42:26 - folder and all of those components will
42:28 - be located in here as well as if i make
42:31 - a new file within that my rate dot js
42:34 - okay cool and then in my rate.js we can
42:37 - do control b so you can see it let's
42:38 - just set it up and what we're going to
42:39 - need to is like i said we're going to
42:41 - pass down props and the props we're
42:43 - going to pass down is something called
42:44 - is increment comma rate all right those
42:47 - are two things we're going to pass down
42:48 - and in terms of the div what i'm going
42:50 - to do is give it a class name let's say
42:53 - styles oops dot rate okay hit enter to
42:58 - line it up cool and we're not done
43:00 - there's a couple things we want to
43:01 - import here so if i import chevron and i
43:04 - think that's polarized
43:06 - ron there you go down and we get this
43:08 - from our assets folder actually so if we
43:10 - go got that again now i see it assets
43:13 - forward slash h3g and it's actually the
43:16 - chevron down cool we get down we also
43:18 - should get up just in case the increment
43:20 - value is uh the opposite which should be
43:22 - just up and instead of chevron down
43:25 - chevron up cool so we have here let's
43:28 - have some curly brackets and is
43:31 - increment right if this value is true
43:33 - this is called conditional rendering or
43:35 - a ternary operator to be more exact if
43:37 - this increment is true we want chevron
43:40 - up and we can do fill equals we don't
43:43 - need the curly brackets here we can
43:45 - actually just do quotes hashtag one
43:47 - seven c eight four
43:49 - okay one seven c seven eight four and if
43:52 - increment is false what we want to load
43:54 - is you guessed it chevron down help cool
43:57 - don't forget to close it there you go
43:58 - chevron down take out this quote close
44:00 - and chevron down is going to have a fill
44:03 - of hashtag
44:07 - four three e3943 that should be the red
44:08 - color and then we can close out that
44:10 - curly bracket like so again ternary
44:12 - operator determining depending on his
44:14 - increment we're gonna load a different
44:16 - svg cool add a p class here class name
44:18 - all right and if the class name is
44:21 - increment you can see we're already
44:22 - stepping up setting up ternary styles
44:25 - green and otherwise we'll do a styles
44:27 - red and then what we're going to do here
44:28 - is make use of that last prop which is
44:30 - what is the number that goes here and
44:32 - depending on the number should also be
44:33 - the same color awesome don't forget we
44:35 - need to set up our styles and for styles
44:38 - it's just rate will be rate flex items
44:41 - dash center red will just be ml-2
44:45 - text and then give it that red color
44:47 - that we had earlier which was hashtag e
44:50 - a nine or three nine
44:52 - four
44:54 - three a three now yep green and for
44:56 - green it's ml dash two again and the
44:58 - text dash bracket hashtag give it that
45:01 - green colors one seven
45:03 - c seven
45:05 - eight four beautiful that's it hit save
45:08 - and now we have the right component so
45:10 - i'm going to do now is hop back over
45:12 - here import rate from cmc oops actually
45:15 - dot dot forward slash components slash
45:19 - cmc table slash straight okay cool let
45:21 - me just double check something cmc table
45:23 - is in components so actually we should
45:26 - do something like this forward slash cmc
45:28 - table then rate there you go that folder
45:30 - path is more simple so less words looks
45:33 - good which means we can come back down
45:34 - below and what i want to do is let's
45:37 - just format this a little bit better
45:38 - bring the rate in bring the span in and
45:40 - for the rate hitting remember it takes
45:42 - props so the ink is increment one is
45:44 - going to be true and the rate that i
45:46 - want for this one or that in other words
45:48 - the number is going to be
45:50 - 0.53 yes it's actually static which is
45:54 - fine and then from there in the next
45:56 - line let's have a p tag and we can have
45:58 - this p tag have the and and b and let's
46:01 - do decrease over the last day which will
46:04 - have a span and in that span it'll have
46:06 - a class name so i have an underline for
46:08 - it and we'll just have a read more so
46:11 - expand the p tag that looks good okay
46:13 - and the very next thing come down below
46:15 - here let's put another break and we need
46:18 - this last div which is going to contain
46:20 - our trending card components which again
46:22 - i didn't make just yet so let's set it
46:24 - up class name i'll give this one a
46:26 - styles dot black center and then let's
46:29 - insert the trending cards which is going
46:32 - to be quotes like this because they're
46:34 - not set up yet i want to have a trending
46:36 - card component and what we want to do is
46:38 - pass in a couple props so for the title
46:41 - i'll have something called trending and
46:43 - i have an icon and it's going to equal
46:45 - that fire one that i set up right and we
46:47 - can actually just clean this up a bit
46:49 - we're doing alt z here oops let's see
46:51 - then we're gonna pass in something
46:52 - called trending data which is gonna be
46:54 - like static data that i'm going to set
46:55 - up later and passing in as trending data
46:58 - cool so that's one of them since they're
46:59 - going to be pretty similar i'm actually
47:01 - just going to copy paste so there's
47:03 - going to be two more cards let's paste
47:04 - them in trending let's see that didn't
47:05 - look right and paste so the thing we got
47:08 - to fix is instead of trending this
47:10 - should actually set biggest gainers and
47:13 - the icon will be gainers that makes
47:15 - sense and trending data is still
47:16 - trending data this one is going to be
47:18 - recently
47:21 - added okay and the icon will be recent
47:24 - and again trending data still trending
47:26 - data cool so our div for flex center is
47:29 - good let's add the rest of the styles
47:32 - object which i believe isn't just much
47:33 - it's just going to be comma flex
47:36 - center and then we can just add like a
47:38 - text message flex and items dash center
47:43 - so if i hit save see if any errors come
47:45 - up and look at that there is our rate
47:47 - and if i pull up this comparison let me
47:49 - make this bigger i pull up its
47:50 - comparison localhost 3001. cool we can
47:54 - see that it's pretty much getting there
47:56 - there should be the rest of the words oh
47:58 - yeah because that's white and i know
47:59 - what to do to fix that one second and if
48:01 - you want to fix this so that it's not
48:03 - this white color we just have to put the
48:05 - styling on there so let's go to control
48:07 - b and i believe it's in global css and
48:09 - what we want to do is come to body let's
48:12 - just do a background color of linear
48:15 - dash gradient and then we can say to
48:17 - bottom put in this value which is
48:20 - hashtag two one two four three zero
48:22 - comma hashtag one seven one seven one a
48:26 - that's our background color and while
48:28 - we're here let's give it a height of 100
48:30 - ph and a width of 100 vw i'll go ahead
48:34 - and hit save okay hitting save again and
48:37 - looks like there's gonna change and let
48:38 - me just double check there's actually
48:40 - background not background color boom
48:42 - there we go that looks more like it if i
48:44 - look at the previous one we're actually
48:46 - really getting there guys i'm just
48:47 - taking a look at the finished product
48:50 - and the one that we're doing right now
48:51 - i'm noticing that like the nav links are
48:54 - like a little smushed up so what i'm
48:56 - gonna do is like open vs code let's head
48:59 - over to header and let me just see nav
49:01 - link oh that makes a lot of sense i
49:03 - don't have the nav link styling so let
49:05 - me just add that in we can just put it
49:07 - right here keep it organized let's put
49:09 - nav link damn why don't you guys tell me
49:11 - i would have seen it but there you go
49:12 - we're gonna add it now so that it looks
49:13 - a lot closer so let's add text dash
49:16 - white and the thing that we just need is
49:18 - a flex with an mx bracket 10 pixels then
49:22 - if i hit save and now it's more spread
49:24 - out that's more like it we're getting
49:26 - closer and just my fun little highlights
49:28 - button cool there you go so let's
49:30 - continue working on the trending js
49:33 - let's see if there's anything more we
49:34 - need to do let me go back here
49:36 - trending.js and if i look that should be
49:39 - it the next thing we should probably
49:40 - start doing now is setting up for the
49:43 - trending card that's right guys all
49:45 - right so next let's work on the trending
49:48 - card component but again before we do
49:50 - that let's actually set up our data and
49:52 - let's do a cons trending data is equal
49:55 - to an array of objects right so what is
49:59 - trending data if you remember down below
50:00 - where we're setting up our trending card
50:02 - component we're going to be passing
50:03 - something called trending data as
50:05 - trending data and if you look at the
50:07 - actual project the trending card is
50:09 - going to receive data which is like the
50:11 - bitcoin the tether this bitcoin and all
50:14 - of it is if you notice it's actually the
50:15 - same that's what we're setting up over
50:17 - here in our vs code so coming back to
50:19 - the top the trending data is an array of
50:22 - objects and for this first object we can
50:24 - do number one the symbol will be btc
50:28 - which stands for bit name is going to be
50:31 - actually just the bitcoin icon it's
50:33 - going to be btc right where are we
50:35 - getting this btc from it's actually the
50:37 - image okay cool and then from here we're
50:40 - going to have is increment and if you
50:41 - remember that's the one that it's either
50:43 - the chevron up and it's green or the
50:45 - chevron down and it's red so that one
50:47 - will say it's true that will make it
50:49 - green and then the rate which is the
50:50 - number on that is going to be 20 or it's
50:53 - not 22.34
50:55 - percent okay there we go and we're gonna
50:58 - have about three of these objects so
51:00 - let's just put a comma here and then
51:01 - we're gonna do two and then we're gonna
51:02 - do three right what we need to do now is
51:04 - make sure you change the values
51:06 - otherwise it'll just be the same thing
51:07 - so instead of bsd let's do usd t for usd
51:10 - tether anyone watching this has invested
51:12 - in tether or are you guys more into usdc
51:14 - leave a comment down below okay cool and
51:16 - then we're going to do a usd
51:18 - here as the icon which is what we're
51:20 - importing increments let's make it false
51:22 - sorry it's on a downward trend all right
51:24 - and again it's not actually on a
51:26 - downward trend i'm just putting it so
51:27 - this is nine point two nine point two
51:30 - three percent the number of this should
51:31 - be three and this one can also be
51:33 - bitcoin and it can also be 2.34 if you
51:36 - wanted to customize it you can but for
51:38 - now let's just make sure the static data
51:39 - is like this okay cool so now that we
51:41 - have the trending data we're actually
51:44 - able to pass in all these things so in
51:46 - order to pass them out let's make the
51:48 - component so i'm going to do is head
51:50 - over back to our components folder make
51:53 - a new file and let's just call it
51:55 - trendingcard.js
51:58 - yep there we go do our magic little r a
52:01 - f c e hit save and now what we can do
52:04 - next is uncomment all of these guys out
52:08 - so if i do that hit save again and we're
52:10 - going to see oops it's a little error
52:11 - actually a trending card is not defined
52:13 - and that's because i forgot we need to
52:15 - import it and every time you make a
52:16 - component and you're using it you need
52:18 - to import it so trending card from
52:21 - trending card let's see does that work
52:23 - trending card trending card now let's
52:26 - hit refresh there we go so there it is
52:27 - trending card trending card it looks
52:29 - like that because we haven't set up any
52:31 - of the styling or the jsx what it's
52:33 - supposed to look like again is going to
52:35 - be these right so notice how we made
52:38 - three trending cards so we're gonna see
52:40 - three of them trending data though if
52:41 - you remember it's gonna be this this is
52:43 - our bitcoin on number one or two and it
52:45 - says number one but i really should say
52:47 - number three so i think i fixed that
52:49 - later on but again feel free to
52:50 - customize this make this whatever coin
52:52 - you want put your favorite coin in there
52:54 - and we should we should be good to go
52:55 - this right here is going to be the icon
52:57 - that we pass in this is the and again
52:59 - here is going to be the title and one
53:01 - thing that i wanted to point out is over
53:02 - here there's more with an arrow this is
53:04 - actually a component that we're going to
53:06 - create in just a little bit okay let me
53:08 - move my fancy dancy drawings and let me
53:10 - go ahead and come back here and let's go
53:12 - back to not state.json over here so
53:15 - going into trending card the first thing
53:17 - that you want to do is let's go ahead
53:18 - and set up some of our imports which is
53:20 - just going to be for now image from next
53:23 - image and then from here let's go ahead
53:25 - and set up our jsx so for the trending
53:27 - card we can go ahead and erase that hit
53:30 - enter and then up here let's give it a
53:31 - class name and the class name that i
53:33 - want to give this is styles dot
53:36 - dot trending card okay cool and then
53:40 - from there let's give it another div it
53:41 - has a child if we do a class name styles
53:44 - dot trending card wrapper and make sure
53:47 - it's closed we can put another div
53:49 - within the side that so within that one
53:51 - let's have another div here with no name
53:54 - just flex just flexing out and we should
53:56 - be good to go and now that i'm thinking
53:57 - about it we should also take in the
53:59 - props that we're passing in so if i look
54:01 - at trending what are we passing in icon
54:04 - trending data and i believe title all
54:07 - right so that's what we need to put in
54:08 - here so destructure those props and do
54:10 - title icon and trending data the reason
54:12 - why we're doing this is because if i
54:14 - were to do it the other way what we'd
54:16 - have to do is something like this we'd
54:17 - have to do props and then all of these
54:20 - things that we passed down would be a
54:21 - whole prop object and to get the title
54:24 - i'd have to do something like
54:25 - props.title
54:26 - all right and then if i wanted the icon
54:28 - to do props that icon so instead of
54:30 - writing so much dot notation we can do
54:32 - something called destructuring and get
54:35 - each of those individual keys so here i
54:38 - can just say title icon i believe
54:40 - trending data all right so that is our
54:41 - react basics be sure to look out or look
54:44 - at our other courses like pwr to learn
54:46 - more about that awesome so we're passing
54:48 - in and taking in our props let's
54:50 - actually make some use of it so in this
54:53 - div called flex we can have curly
54:55 - brackets here and say icon and and so
54:57 - essentially if the icon exists what i
55:00 - want to do is have an image in here this
55:02 - is why we imported image in the first
55:03 - place and what i want as the source is
55:06 - the icon right if the icon or nothing no
55:08 - icon gets passed down this image won't
55:10 - even load that's essentially what's
55:12 - happening here for the width we can say
55:14 - it is 27. all right let's make a little
55:17 - closer and let's also do the height
55:18 - while we're here which should be the
55:20 - same also 27. and most images need an
55:23 - alt here i'll just say icon since it's
55:25 - pretty dynamic okay and then let's add
55:28 - and let's add nb sp here and b sp okay
55:32 - from here let's add a p tag class name
55:35 - and it's just gonna have some styling of
55:36 - bold font all right so font bold and
55:39 - then we'll make use of our prop and say
55:41 - title here so this is where it says like
55:43 - gainers or whatever and i think that
55:45 - should be it for this div over here this
55:48 - is where we're going to have that more
55:50 - button right i told you guys what this
55:51 - was a little bit earlier let me just set
55:53 - up the actual component button let's go
55:56 - ahead and set that up since we're here
55:57 - to set up the more button what i want to
55:59 - do is go to our components let's just
56:01 - make a new file let's call it more
56:03 - button.js
56:05 - okay and then from here let's could do
56:07 - our usual thing and let's add import
56:10 - that we need for this if you remember on
56:12 - localhost 2001 the more button has this
56:15 - little arrow right that's actually an
56:17 - image that we have cool and yes i know
56:19 - if i hit save we're gonna see the styles
56:21 - here so i'm gonna bring back the code
56:23 - and let's import the right arrow from
56:27 - forward slash and i see it assets
56:29 - forward slash svg and we already have it
56:31 - set up if you have the assets imported
56:34 - so right arrow hit save and then for the
56:36 - styles i'll set up the styles now since
56:38 - there's only one we're gonna be making a
56:40 - div later on and it's just called button
56:41 - that's just the right arrow button okay
56:43 - cool it's just gonna have a text of dash
56:47 - bracket we can do a hashtag six
56:51 - one eight eight f f and there we go
56:54 - that's the text color give it a flex
56:55 - property i wanna do an item center and
56:58 - if i hover over it we can add a course
57:00 - cursor pointer and for white space do it
57:02 - no wrap justify dash between
57:06 - okay i think i like that that's pretty
57:08 - much it for the styles let me just do an
57:10 - ansi all right can you guys awesome no
57:12 - problem joe i got you now did i scare
57:14 - any joe's watching this cool so what i
57:16 - want to do next is let's set up the div
57:18 - here and you guessed it it's just the
57:19 - class name button or styles that button
57:22 - sorry cool and you want to add a more
57:24 - here luckily that's pretty similar and
57:26 - then we can hide our right arrow right
57:29 - here so if it's safe go to trending card
57:31 - let's actually go back and import the
57:33 - more button so import more button sorry
57:36 - lowercase u from quotes dot forward
57:39 - slash there you go awesome i hit save
57:42 - we'll still get errors and if i unlock
57:44 - this it should be fine we're getting
57:45 - errors again because we don't have our
57:47 - style object yet all right cool so if i
57:49 - go back to here there should be a
57:51 - closing div here and then there should
57:53 - be a line break cool from here we're
57:56 - going to take that trending data and we
57:58 - want to map through it why do i want to
58:00 - map through the trending data well if i
58:01 - ask you guys how much objects are in our
58:04 - array or how many items are right what
58:06 - would you tell me exactly good job you
58:08 - said three you'd be correct so what i
58:10 - want to do is for every object in the
58:12 - array or in other words every item in
58:14 - the array i'm going to create a trending
58:16 - row component so if i go back to here
58:19 - notice how there's three rows because
58:22 - there's three items cool that's actually
58:24 - why i use map a lot of the time so
58:26 - that's a good thing to learn if you're
58:27 - just starting out programming or at
58:29 - least coding with react okay cool going
58:31 - back to trending card we're mapping
58:33 - through and what you can do here is
58:35 - label what that item in the array is and
58:37 - we could just call it i know parentheses
58:39 - first because it takes in an arrow
58:41 - function like and what i want to call
58:42 - each object in the array i'll call it
58:44 - item and the map takes in two parameters
58:46 - the second one is index right whenever
58:49 - you're creating
58:50 - components through map you should each
58:53 - of them should have its own unique key
58:55 - we can actually give it a unique key by
58:56 - adding an index here right so what the
58:59 - index parameter will do is the first
59:01 - index of our component will be zero and
59:03 - then one and then so forth depending on
59:05 - how many items does that make sense to
59:07 - you let's keep on going let's do a
59:08 - return here and this doesn't exist yet
59:11 - right so let's put quotes here trending
59:14 - or actually we'll put it last so i'll
59:15 - just write it out first so what we want
59:17 - to do is for every single item and
59:19 - there's three let's make a trending
59:22 - trending card row that's a component
59:24 - that doesn't exist yet and for every
59:26 - trending card row it's going to have a
59:28 - key and like i said the key will be the
59:30 - index number is going to be the item
59:33 - oops and remember what is item guys item
59:36 - is the actual object itself right so
59:38 - item is going to be this thing that i'm
59:41 - highlighting how would i get the number
59:43 - for example if it's an object exactly
59:44 - dot notation so then we're going to do
59:46 - an item dot number okay and then for
59:49 - symbol we're going to do an item dot
59:52 - symbol all right so you get the idea i'm
59:54 - going to do this for the rest of the
59:55 - properties that the row is going to need
59:57 - which will be name item.name icon
60:00 - item.icon and is increment right for our
60:03 - rate later on and item that is increment
60:07 - and then rate is going to be passed in
60:09 - as item.rate
60:11 - okay cool and again our trending card
60:13 - doesn't exist so what i'll do is going
60:16 - i'm going to do is like comment this out
60:17 - for now or rather yet comment out this
60:19 - whole uh return and save that and i know
60:22 - my computer is yelling at me so let's
60:23 - make our styles objects so we can make
60:25 - them happy so if i do ctrl b a lot
60:27 - better for you guys cool luckily for you
60:29 - there's not much styles on this one so
60:30 - let's do con styles equals object and
60:32 - then one of the first ones that we need
60:34 - to style is trending card and then all
60:36 - that's going to have is a w
60:39 - p
60:40 - 5 a p y
60:42 - 3 a p b
60:44 - 0 a p g
60:46 - bracket
60:47 - 3 2
60:49 - 3 5 4 6 up 3 2 3
60:52 - 5 4 6 yep then we do a rounded x dash xl
60:56 - then we do a text dash white oops mr
60:59 - dash three and then we'll do a trending
61:02 - oops trending card wrapper and if you
61:05 - see the suggestion i typed it right cool
61:07 - and if you do flex items center and at
61:10 - justify dash between awesome if i put a
61:14 - comma here hit save are you going to
61:15 - yell at me no nice look at that guys i'm
61:18 - getting super excited every time i like
61:20 - build and it gets closer and closer to
61:21 - the finished product like it just makes
61:23 - me just really happy to see that and
61:25 - there's our more button looking nice and
61:27 - cute and the reason why we don't see the
61:29 - bitcoin stuff is because we haven't made
61:30 - that component yet so let's go ahead and
61:32 - do that next all right so we're almost
61:34 - done with the trending section let's
61:36 - take a look at the final thing you can
61:37 - see that we just need to do this row all
61:39 - of this stuff it's all set up we just
61:41 - have to execute so going back to here
61:44 - let's go back to our code and if you
61:45 - look we need to make trending card so to
61:49 - make it i'm gonna go open this up again
61:51 - go to components new file let's just
61:53 - write and call it trending card bro and
61:57 - don't forget dot js beautiful guess what
61:59 - do we do next hassam exactly hassan
62:02 - we're gonna do r-a-f-c-e and if i hit
62:04 - save there we go so that's trending card
62:07 - row and what we can do now since we have
62:09 - trending card row is to uncomment this
62:12 - and let's see what comes up i hit save
62:13 - let's hit refresh trending card row is
62:15 - not defined and yes i made the same
62:17 - mistake exactly kasumi now it's okay if
62:19 - i just do import trending card row from
62:22 - top forward slash trending card row save
62:25 - now we should be gucci and there we go
62:27 - beautiful trending card rows and we're
62:28 - done that's the video right of course
62:30 - we're not done let's go ahead and style
62:33 - it so go to trending card row and let's
62:35 - set up a couple imports if you guys can
62:37 - tell we were also using rate so let's
62:39 - get right in here and we're also going
62:40 - to be utilizing image from next image
62:43 - that's pretty much it and we also have
62:44 - our styles objects i want to start it up
62:46 - now because there's only one and the
62:48 - only style object is going to be
62:51 - trending card row that's the div name
62:54 - and it's just gonna have flex items dash
62:56 - center just defy
62:59 - bash between and mb-4
63:02 - and text dash bracket 0.93
63:06 - rem blah blah blah there you go and
63:08 - again if i'm moving too fast at all free
63:10 - freedom feel free to pause the video
63:12 - this is the only styles that we need
63:13 - yeah cool so i'm hit save that's
63:16 - trending cardroll and what we want to do
63:17 - next is what i'll call like accepting
63:19 - the props that we passed down and i was
63:21 - showing you guys this earlier what pops
63:22 - are you passing down key number symbol
63:25 - name icon is increment rate let's do
63:26 - that so that's what we're gonna write
63:28 - down so it's number icon name symbol is
63:33 - increment which we'll use for rate and
63:35 - again rate which we'll also use for ray
63:37 - so i think that should be it no need to
63:40 - put in the key so let's go ahead and
63:42 - come down here hit save let's start
63:45 - writing out the jsx now so for the div
63:47 - we can erase this guy hit enter and
63:49 - let's give this guy a class name and
63:50 - it's going to be the only one that has a
63:52 - styles which is styles dot trending card
63:55 - row okay and for the row itself it'll
63:57 - have a p tag with the class name opacity
64:00 - dash 40 and we'll here we'll insert the
64:03 - number which is the prop that we are
64:05 - deconstructing or destructuring i mean
64:07 - and then here let's add another dip for
64:09 - the next div we're adding a class name
64:10 - with w full flex and then here we'll add
64:14 - another div
64:15 - of let's see this one should be mx-5
64:18 - cool and then within here we'll have the
64:20 - icon and we'll do something similar that
64:22 - we did last time which was the icon and
64:24 - end if it exists load the image and the
64:27 - image is just going to be source the
64:29 - icon that gets passed yeah and the width
64:31 - of it will be smaller than last time
64:33 - which is 20 and the height will follow
64:35 - suit beauty full and that should be it
64:37 - for this div coming out into the next
64:39 - line but still in this main div we're
64:42 - going to add another p tag and this one
64:44 - is just going to be bold so let's do a
64:45 - font bold and here we'll have the name
64:48 - of that item which is the bitcoin or the
64:51 - usd tether that we have and underneath i
64:54 - want to include the symbol which we also
64:56 - passed down so class name will just be
64:59 - this text gray dash 400 and the span
65:02 - will be symbol okay cool that's looking
65:06 - pretty good so that's closing pizza
65:07 - closing div and then we have last but
65:10 - not least we have the here if you
65:12 - remember what are the props that we
65:13 - passed down for rate it's going to be
65:15 - his increment which is going to take in
65:17 - his increment yep and then the rate
65:19 - which is going to take in rate right now
65:21 - if i hit save
65:22 - what the this looks awesome guys so
65:24 - there we go that is the trending section
65:28 - if you look it's pretty one to one let's
65:30 - go ahead and work on the table and again
65:32 - you don't see anything because the api
65:34 - is not working on this specific build
65:36 - but our job is to get that api working
65:39 - together so let's go ahead and do that
65:40 - all right guys so i cleaned up this
65:42 - browser a little bit so that there's
65:43 - only one tab what we want to do next is
65:46 - set up our table that we get from coin
65:48 - market caps api and i fixed it in my
65:51 - finished version so if you guys take a
65:53 - look 3001 boom so this is what it's
65:55 - supposed to look like it's just like the
65:56 - demo that qazi showed it's supposed to
65:58 - see the top 10 coins and we get this by
66:01 - using an api so i'm going to teach you
66:03 - guys how to get started with this api so
66:05 - the first thing you want to do is type
66:07 - in coin market cap api and after that
66:10 - you should lead you to this page click
66:12 - on this link get your api key now and
66:15 - what it's going to ask you to do is just
66:16 - simply sign up so i'm gonna sign up real
66:19 - quick and once you fill out all the
66:20 - information go ahead and create my
66:23 - account and click i agree awesome and
66:25 - then it's just gonna ask you to verify
66:26 - go ahead and check your email for the
66:28 - verification code after you confirm your
66:30 - account and get that verification if you
66:32 - click on this is your api key so once
66:34 - you get your api key let's head over to
66:36 - the next part all right so what you
66:37 - should do next is head over to your code
66:39 - i'm going to open up my menu and what i
66:41 - want to do next is go to my pages go to
66:44 - your api folder and you're going to see
66:45 - this hello.ts we're not going to need it
66:47 - anymore so i'm going to go ahead and
66:48 - press delete it's just starter files go
66:51 - back into your api open it up and what
66:53 - we want to do is make a new file in here
66:55 - called get top
66:57 - 10.js okay once you do that what we can
67:01 - do is
67:02 - something like this we can make the menu
67:04 - smaller and we can make the code bigger
67:06 - and what we want to do is simply just
67:08 - export default and function and i'll
67:11 - just call it handler and the handler is
67:13 - going to take a request and a response
67:16 - and essentially we're going to use the
67:19 - fetch method to make an api call for the
67:21 - coin market cap so let's press enter
67:23 - here let's say cons get data is equal to
67:26 - async and the getdata function is
67:28 - actually the function that calls the api
67:31 - okay then we can say const response is
67:33 - equal to and await because you want to
67:35 - wait for the fetch to happen first and
67:38 - inside this fetch we're going to put the
67:40 - coin marker cap api link and it's going
67:42 - to look a little something like this now
67:43 - if i press alt c and let's spell
67:46 - response correctly response if you look
67:49 - this is the link i copied it because
67:51 - it's something that it gives you right
67:53 - the only difference is you should have a
67:55 - template literal here that says process
67:57 - dot env cmc underscore api key all right
68:01 - which we'll set up in just a little bit
68:03 - another important thing is inside the
68:05 - parentheses of this fetch there should
68:07 - be a comma because we're not done yet
68:08 - i'll do this part with you guys if you
68:10 - press enter here after this comma after
68:12 - the api key we're gonna need to add this
68:15 - object looking thing because we need to
68:17 - add some methods and the headers and
68:20 - sometimes we even add params but for
68:22 - this one i don't think we'll need params
68:23 - we're just going to do a get to define
68:25 - the method because we're getting the top
68:27 - 10 crypto currencies camera for the
68:29 - headers you want to do accept colon star
68:33 - forward slash star okay then you can put
68:35 - a comma here then you can also put a
68:38 - comma here all right we're almost done
68:40 - all you need to do is a const data
68:42 - equals await
68:44 - response.json which means we gotta wait
68:46 - for the response to come through and
68:47 - gets turned into json and after that if
68:49 - it's successful let's do a res dot
68:51 - status of 200 and that's what 200 means
68:54 - if you do json we're gonna put in here
68:57 - brackets data okay and last but not
69:00 - least inside here let's call getdata
69:03 - okay so far this looks pretty good i'm
69:05 - go ahead and hit save and that's going
69:07 - to be our actual api route let's go
69:09 - ahead and set up our contacts now okay
69:12 - so in this section we're going to be
69:13 - setting up our context file so if you
69:16 - guys didn't know there's a react hook
69:18 - out there called use context and
69:20 - basically it lets us create variables
69:22 - and functions and state that we can use
69:25 - anywhere in our app globally that might
69:26 - not mean anything to you but if you
69:28 - remember if i go over to my trending
69:30 - card let's go trending the only way i
69:33 - was able to give my trending card row
69:36 - the name symbol and icon was because i
69:39 - passed it down as a prop you can't pass
69:42 - down props if they aren't a direct child
69:45 - which eventually imagine if i had
69:47 - trending.js pass that prop to trending
69:50 - card and pass that prop to trending card
69:52 - row and then i had another child pass
69:54 - that to trending card row and another
69:57 - trending card thing so essentially if i
69:59 - was to draw it out there is a component
70:01 - if you want to pass down something like
70:03 - let's say icon all right you can't read
70:05 - it but it says icon you'd have to pass
70:07 - it down to a child which has another
70:09 - component which is another component
70:12 - which is another component that's called
70:13 - prop drilling right eventually that will
70:15 - lead to problems down the line but to
70:17 - make it easier what if let's say i had
70:19 - those of components again and this one
70:21 - had two children in order to get the
70:23 - icon to this
70:25 - specific component what i'd have to do
70:27 - is put that prop all the way down there
70:29 - with our context or use context what we
70:32 - can do is have that icon in a store and
70:35 - then i could just call it anywhere i
70:37 - could get it here i could get it here
70:38 - and i got it here i don't have to pass
70:40 - it down that's the main benefit and
70:42 - usually why we set up context so let me
70:44 - just clear this and let's show you guys
70:45 - how to set that up okay so i do control
70:47 - b and come over here what you want to do
70:50 - is create a folder called context so i'm
70:52 - going to go to the root let's just clean
70:54 - this new folder and let's say this is my
70:56 - contacts folder okay and then within
70:58 - that context folder i should make a new
71:00 - file i'm going to call it context dot js
71:03 - cool so once that's made i can just hit
71:05 - control b again to clear out my window
71:07 - okay cool so now we're inside our
71:09 - context folder the first thing we'll do
71:11 - is let's import anything that we might
71:13 - need so if i do import create context
71:16 - right this is a hook from react that
71:18 - helps us initialize our context that we
71:20 - want to create we also might be using a
71:22 - use state and later on and use effect as
71:24 - well okay and that should be it for now
71:26 - but anymore we're going to come back to
71:28 - our contacts and update it especially if
71:30 - we add all the morales features later on
71:32 - so if i do from react there we go okay
71:34 - next thing i want to do is to actually
71:36 - create the context we need to make use
71:38 - of this hook right here so what i'll do
71:41 - is i'm going to export const and then
71:43 - we'll say market context right i'm going
71:46 - to be naming it because we might have a
71:47 - different kind of context like our gun
71:49 - contacts so if i say create coin market
71:52 - cap context or coin market context it's
71:54 - going to equal our create context hook
71:57 - okay from there we also want to do an
71:59 - export const coin market the name of our
72:02 - context provider okay and let's make the
72:05 - m for both of these capital right so
72:07 - it's camelcase coin market coin market
72:10 - okay so it's the provider it's gonna
72:12 - equal function okay and as its
72:14 - parameters make sure it takes in
72:17 - children awesome all right and they're
72:18 - gonna be putting a lot of stuff in this
72:19 - provider but the main thing at the
72:21 - bottom here we should make it return
72:23 - something and what it's going to return
72:25 - is coin market context dot provider okay
72:30 - this is different from the one above it
72:32 - it's not returning itself it's coin
72:34 - market provider and this is
72:36 - coinmarketcontext.provider and then i'm
72:37 - going to close it off and in between the
72:40 - providers the opening and the closing
72:42 - it's going to also take in that children
72:44 - that we passed down yeah cool the
72:46 - important part though is within the
72:48 - opening tag if i go ahead and hit enter
72:50 - here right and then i could just format
72:51 - it like so boom if i go ahead and hit
72:54 - enter and i go back into here and put
72:56 - some space here if you put something
72:57 - called value here this is how we can
73:00 - make it anything i put here is global
73:02 - for example if i say const word equals
73:06 - hello not con const if i want to make
73:09 - this variable global and i can pull it
73:11 - from anywhere in my app you just pass in
73:14 - word into this value here so this makes
73:16 - it so that i can go in like my trending
73:19 - card row and use that variable hello
73:21 - makes sense cool glad to hear hassan so
73:24 - what we're going to do next is erase
73:25 - word because that's not what we want to
73:27 - make global we're not actually using
73:28 - that let's set up our get top 10 api
73:32 - route and make that global so now that
73:34 - we set up our context.js file we
73:36 - actually got to wrap the provider around
73:39 - our app so that we can pull it from
73:42 - anywhere so that what that tells me is
73:44 - let's go ahead and go to underscore app
73:46 - right and this is where we set up the
73:48 - morales provider so we can use morales
73:49 - in our app you guys do the same thing
73:51 - for our contacts so come to the top here
73:53 - and say all right and then let me just
73:55 - format this because it's starting to
73:56 - bother me but there you go coin market
73:58 - provider i believe that's what we called
74:00 - it let me just double check coin market
74:02 - yes sir that's it cool so then we can
74:04 - say from quote forward slash find the
74:07 - context find the file boom and again i
74:10 - just have to wrap this component here
74:12 - which is our actual app with that
74:14 - provider so again we can put this within
74:16 - the morales one which is fine and let's
74:18 - just say coin market provider open that
74:21 - up hit x here and then what we could do
74:23 - is place that component right here and
74:25 - when we hit save there we go we're able
74:28 - to use our provider or our contacts
74:31 - within our app now cool so then what we
74:32 - can do now is finish setting up the rest
74:34 - of our contacts and get our api call
74:37 - okay cool so we can go ahead and exit
74:40 - out for now and what we want to do is
74:42 - come back to our context which we're
74:43 - already in let's see within this
74:46 - provider we want to start making any
74:48 - functions that we're going to use and
74:50 - one of the main ones is something i'll
74:51 - call const top 10 coins is equal to
74:56 - async and this function right here okay
74:59 - and inside that asynchronous function
75:00 - i'm going to add a try catch i'm going
75:02 - to take an e for error and what we can
75:04 - do is a console.log e dot message if
75:08 - there is an error okay cool and what we
75:10 - want to do next is a const res is equal
75:13 - to an await fetch and then we're going
75:15 - to use our own api route that we set up
75:17 - which is quotes slash api
75:20 - get top 10. all right what is this doing
75:23 - we're basically making a call to the api
75:26 - route which we set up in the folder api
75:28 - and get top 10. it's going to make this
75:31 - call let's get data caller this function
75:33 - call that's what's going to happen right
75:35 - here okay there we go that's what's
75:36 - going to happen right here when i do a
75:38 - fetch that api route what we want to do
75:40 - next is make another variable called
75:42 - const data is equal to 08.rez.json
75:46 - it basically is after we make a call at
75:48 - the api route once that's done we're
75:50 - going to make a variable called data and
75:52 - wait for that response that we get back
75:54 - to turn to readable data for our code
75:56 - which is json okay and funny enough the
75:58 - way that data would get returned to us
76:00 - is return data right which is the
76:03 - variable we created and inside there is
76:06 - a object which is data like a key we
76:08 - want to access that and then we also
76:10 - want to access the data inside that
76:12 - object so it looks really funny but
76:13 - that's how parse that data and go inside
76:15 - and get the top 10 coins that we want
76:17 - cool so i'm go ahead and hit save and
76:19 - that should be good for now and what we
76:20 - want to do next is over here in value
76:23 - just say get top 10 coins right we're
76:26 - making that function to get the api
76:29 - route or the api data global and there
76:31 - you go it all tied in together you with
76:33 - me awesome all right so i'm back in our
76:35 - index right now and as you can see the
76:37 - next component i want to work on is the
76:39 - cmc table and if you didn't know the cmc
76:41 - just means going market cap table so
76:43 - what does that actually look like for us
76:45 - if you go to here and take a look at the
76:47 - finished product this whole section that
76:50 - you see right here and i may have
76:51 - mentioned it a couple times this is the
76:54 - cmc table right and there's a lot of
76:56 - different parts or components that go
76:58 - into it that you're going to notice but
77:00 - the main thing is the main component
77:02 - that holds all of that is cmc table so
77:04 - that's what we're going to tackle in
77:06 - this section let's go ahead and get
77:08 - started okay so coming back to here
77:10 - notice the difference and again all this
77:12 - data is coming from the api okay so come
77:14 - over here let's open up our files and
77:17 - remember how we made a cmc table folder
77:19 - that is where we're going to put
77:21 - everything that has to do with the table
77:23 - including the table itself so within
77:25 - here we have just write js let's make a
77:27 - new file and i'm going to call it cmc or
77:30 - capital cmc table for its camelcase and
77:33 - dot js okay awesome so what we want to
77:35 - do now is the rf rafce okay and from
77:39 - here let's go ahead and go to import
77:42 - react from react and let's get a couple
77:45 - of different hooks that we need so what
77:46 - i need from this guy is going to be our
77:49 - use state right because i'm going to
77:52 - make some state variables here we're
77:53 - going to be using use context because
77:56 - remember in the table we're using that
77:57 - api call so i need to pull that here and
78:00 - then we're also going to be using our
78:02 - use effect because we're going to run
78:04 - the function that we get okay and i'll
78:07 - explain this later but we're also going
78:08 - to be using use callback okay cool so
78:11 - that's good pretty good to me and then
78:13 - in terms of assets let's get btc from
78:15 - here the bitcoin one okay and that one's
78:17 - just gonna be dot dot forward slash and
78:19 - then now we can see the assets go ahead
78:21 - and just type in btc.png because that's
78:24 - in this assets folder okay cool oops
78:27 - that's not what i wanted to do i want to
78:28 - do control b actually and there you go
78:30 - cool and again if you're using the use
78:32 - context hooks that means i'm trying to
78:34 - access that store with all the global
78:36 - variables in order to do so we got to
78:38 - pass in the context in that hook so
78:40 - we're gonna import coin market context
78:44 - from dot dot forward slash
78:47 - dot dot forward slash
78:49 - context
78:51 - slash context okay cool and there's a
78:53 - couple corners that we're going to add
78:54 - later but we don't have to worry about
78:56 - that now so going down below to the cmc
78:58 - table
78:59 - and now i'm thinking about it this
79:00 - should actually be called not header
79:03 - going back to
79:04 - index yeah this is actually capital cmc
79:07 - oops so this should be cmc and in terms
79:10 - of file name this should also be cmc
79:13 - just to make sure it matches up and this
79:15 - can be cmc awesome that's how i know
79:17 - it's like the main table and what i
79:19 - could do is hit save control b and bring
79:22 - this boy out and let's import import cmc
79:25 - table right table from and i'm noticing
79:28 - it yep i know i know should be here from
79:32 - dot dot forward slash components slash
79:39 - let's see if that is there it is there's
79:41 - our cmc table cool all right from here
79:43 - it's going to get less confusing if i go
79:45 - to this part right here what i can do is
79:48 - let object equals use context now use
79:51 - callback use context and in the
79:54 - parentheses we want to do is pass in
79:56 - coin market context all right that's
79:58 - letting you know what context am i using
80:00 - and that's my core market cap and here
80:02 - we can take what we want from the value
80:04 - so if you remember in our context.js we
80:06 - just passed and get top 10 coins if i
80:08 - had multiple things i can literally
80:10 - choose what i want to bring to this
80:12 - specific component and for me it's just
80:14 - get top 10 coins i believe get top 10
80:17 - coins beautiful so i'm pulling get top
80:19 - 10 coins function from my context and
80:21 - bringing it into this component that's
80:23 - essentially it and what i want to do is
80:25 - set up some state here and say equals
80:27 - use state and this is a react hook that
80:30 - keeps track of data that can change and
80:32 - in the parentheses here the state should
80:34 - start as null so it's basically saying
80:35 - like coin data will start as null and
80:38 - then here we could just do a coin data
80:39 - and then usually the convention is to
80:41 - say set that variable name got it cool
80:44 - so i'm gonna make some space here
80:46 - because i wanna make a function this
80:48 - function i'm gonna call it set data and
80:50 - it's gonna be equal to use callback okay
80:53 - and i'm gonna explain it in just a
80:55 - second and to continue on all we need to
80:56 - do is type in a sync here to create a
80:59 - asynchronous function which we'll just
81:01 - have a try catch oops and it's just
81:03 - going to take an e and then about in
81:07 - console.log e down message and then here
81:10 - we can actually do a comma and do a get
81:12 - top 10 coins all right and for the try
81:15 - we're going to say let api response
81:18 - right is going to be equal a weight get
81:22 - top 10 coins remember we pulled the top
81:24 - 10 coins from our contacts our coin
81:26 - market contact specifically and now
81:28 - we're waiting to call it and then
81:30 - storing that in a variable called api
81:32 - response okay then we're gonna get
81:34 - filtered response why are we doing this
81:37 - it's because when i make that api call
81:39 - i'm not necessarily getting the top 10
81:41 - coins getting a bunch of coins and i
81:42 - only need the top 10. so here in the
81:45 - next line i want to start filtering for
81:48 - only the top 10 coins whatever they are
81:50 - so to do that we can actually use a
81:52 - basic for loop so if i say four let i
81:54 - equal zero that's the initializer then
81:56 - i'm gonna say the condition which is api
81:58 - response that length and when i say
81:59 - condition basically it's gonna run
82:01 - however long the api response length is
82:04 - so if the response i get back is a
82:06 - hundred items or a hundred coins this
82:08 - will run a hundred times right that's
82:10 - basically what the condition means and
82:12 - the increment part is how we get to the
82:15 - end of this condition so that's the for
82:17 - loop for you so that in the for loop
82:18 - let's say const element is equal to api
82:21 - response bracket right i'm storing the
82:24 - essentially a pointer to what response
82:26 - i'm on by using the index and storing
82:29 - that into a variable and then what we
82:30 - can do is write if statement here if
82:32 - element dot cmc all right coin market
82:35 - cap underscore rank that's the key to
82:38 - get the rank which i want basically
82:40 - number rank 1 through 10 and i can
82:42 - express that by saying less than or
82:44 - equal to 10. so all the numbers that are
82:46 - less than or equal to 10 which exactly
82:48 - is going to be the 1 through 10. yeah
82:50 - and because i'm gonna make this one line
82:52 - we can say filtered response dot push
82:55 - that exact element boom there we go so
82:58 - after that's done outside the for loop i
83:01 - want to take everything that gets added
83:03 - to filter response which should be just
83:05 - 10 things and set that in my set coin
83:08 - data state so i'll say set filtered
83:10 - response awesome okay cool get top 10
83:12 - coins and again notice how this is
83:14 - grayed out it's because i'm not actually
83:15 - running this set data yet so that's why
83:18 - i'm using my hook use effect which
83:21 - basically if you didn't know use effect
83:23 - is a react hook it lets us perform what
83:24 - i'll call side effects or functions at
83:27 - different points in that component's
83:29 - life cycle and arrow here the side
83:31 - effect that i want to perform is set and
83:34 - if i run comma here and then put an like
83:37 - an array this is called a dependency
83:39 - module which ensures that this only runs
83:42 - once okay i'm essentially using use
83:44 - callback if you guys are familiar with
83:46 - use memo at all to make sure that set
83:48 - data runs exactly how many times i want
83:51 - it to run which is just get when the get
83:53 - top 10 coins run we don't want it to run
83:55 - over and over again i just need to run
83:57 - once all right so use callback can help
84:00 - us ensure it runs exactly how we want it
84:02 - to and then i'm using that in tandem
84:03 - with use effect because when the
84:05 - component loads we should run set data
84:07 - awesome cool and if i save this here
84:09 - this might result in its installed
84:11 - request and oh that actually brings up
84:12 - to my next point if you remember let's
84:15 - go to our let's see get top 10.js
84:18 - awesome we have that api call and it's
84:21 - running this process.env.cmc
84:24 - api key but we haven't actually set up
84:26 - that environment variable so let's go
84:28 - back to coinmarketcap coin market cap
84:30 - api gonna go ahead and log in all right
84:33 - so this key all we have to do is you can
84:35 - insert this here instead of doing a
84:37 - template literal or we can just set up
84:40 - our environment variable or our env
84:42 - variable through our cli tool once again
84:44 - so i'm going to do that real quick
84:45 - that's why we're getting api resolved
84:47 - without sending a response okay so i'm
84:48 - going to temporarily stop this and let's
84:50 - set up our next our cmc api key okay and
84:54 - again we can also set up our environment
84:55 - variables with ntl env colon set right
84:59 - we did this with the morales url you can
85:01 - do this by saying the variable name here
85:04 - which i'll say cmc underscore api
85:07 - underscore key i believe that's what
85:08 - it's called just double checked cmc
85:10 - underscore api underscore key cool you
85:12 - do this and then just have a space and
85:14 - then paste in the value and let me just
85:16 - make sure i have it copied yep and the
85:19 - value is going to be this hit enter cool
85:21 - so the environment variable is set and
85:24 - you can see it's set for the site coin
85:25 - marker cap clone blockchain so that
85:27 - means it would work even in the deployed
85:29 - link so the typical way we do this is we
85:32 - have our emv file but when i deploy that
85:34 - site live we have to go to netlify and
85:37 - then like manually put in that env
85:39 - variable here i'm already setting it up
85:41 - so then we can just do an ntl dev like i
85:44 - said i'm running ntl dev and now let's
85:46 - see if it works and one one way we can
85:48 - test it is if i go over to our cmc table
85:52 - and i do a log coin data we should see
85:54 - about 10 coins so i hit save inspect
85:57 - console hey there it is my array of 10
86:00 - coins the number one is bitcoin makes
86:02 - sense ethereum ted airbnb usdc so forth
86:06 - there we go it looks like our api is
86:07 - working all we need to do is make the
86:10 - freaking table so let's go ahead now
86:12 - that we have the data we can start
86:13 - moving on okay so i'm gonna make this
86:15 - smaller and we can do a get rid of this
86:18 - console log and let's start making the
86:20 - jsx okay so what i'm gonna do is set
86:22 - this up by erasing this and now let's
86:25 - set up the divs which will have a class
86:27 - name and it's gonna have already some
86:29 - css which text white and see let's make
86:32 - the font bold as well okay from there i
86:34 - also have a div with a class name mx
86:37 - dash auto max dash w dash screen and do
86:42 - a dash 2 xl and here we'll start our
86:45 - table okay so that's our table and then
86:48 - within that table i wanna give it a
86:50 - class name of with full and again like i
86:53 - said we're gonna have some components
86:55 - here that i'm gonna set up this one is
86:56 - the cmc table header okay and then
87:00 - underneath that though we'll have we'll
87:02 - use coins data right because we have it
87:04 - now and if i say and coin data we can
87:07 - set up a q a ternary right if coin data
87:09 - exists what i want to do is comma here a
87:12 - comma parenthesis here and i want to map
87:15 - through it okay and guys i explained map
87:17 - earlier basically for every single coin
87:19 - or item i want to do something with it
87:22 - so point index let's do a function in
87:25 - here it's the other one there we go and
87:27 - what i essentially want to do is return
87:29 - right a
87:31 - cmc table row yeah again this is a
87:34 - component that doesn't exist yet but
87:36 - it's going to take in a lot of props so
87:38 - let's set that up so if you remember the
87:40 - key can be the index which is just the
87:42 - parameter that i set up with the map
87:44 - it's cool function we have a star num
87:46 - that's equal to the coin dot cmc
87:50 - underscore rank then we have the coin
87:52 - name prop which is going to be equal to
87:54 - the coin.name yeah there's going to be a
87:56 - lot of properties guys so bear with me
87:58 - it's all going to be worth it then we're
87:59 - going to be coin symbol which is just
88:01 - coin that symbol coin icon is going to
88:04 - equal that btc we're going to have a
88:06 - show by that's going to equal true then
88:08 - we have h
88:09 - rate and this one's an interesting one
88:11 - it's going to be the coin dot quote dot
88:14 - usd dot percent underscore change
88:18 - underscore 24 hours like the percentage
88:21 - change of that coin and there's also a d
88:23 - rate which is going to be really similar
88:25 - so it's quote dot usd dot percent
88:29 - underscore change and instead of 24
88:31 - hours it's gonna show us the seven days
88:33 - okay and then we have an h rate is
88:36 - increment prop and that can be equal to
88:38 - true by default then we can have a price
88:41 - equal to coin.quote.usd
88:44 - price right the price in usd then we
88:46 - have the market cap value that's going
88:50 - to be equal to the coin dot quote dot
88:53 - usd dot market underscore and then we
88:57 - have the volume of crypto value volume
89:01 - crypto value that's going to be
89:03 - coin.usd dot volume underscore 24 hours
89:08 - alright the crypto volume traded within
89:09 - 24 hours then we have the just volume
89:12 - value which is the coin total underscore
89:16 - supply yeah and we have circulating
89:18 - supply that's equal to that circulating
89:22 - underscore supply okay cool and then we
89:25 - want to do next is have a parenthesis
89:28 - here have the curly bracket parenthesis
89:31 - here and we want to close off this
89:36 - dot this okay see did i do match this up
89:38 - correctly yep then otherwise we can have
89:41 - a fragment here there you go awesome so
89:44 - if coin did exist let's map through it
89:46 - generate the table row if not just put
89:48 - in an empty fragment okay and taking a
89:50 - look at that just closing table closing
89:52 - div closing div export default to the
89:54 - table and yeah that looks pretty good to
89:57 - me and again this doesn't exist just yet
89:59 - so we can comment it up and we're
90:01 - getting here if i do that so let's
90:02 - comment out the whole thing and if
90:03 - you're wondering where the hell lands
90:05 - are you getting all of these props what
90:06 - i did was if you inspect element and do
90:08 - console and you open up that array and
90:10 - open up one of them you're gonna see
90:12 - everything that i set the cmc rank the
90:14 - total supply the symbol the quote and
90:17 - then if you open that usd and then you
90:19 - open that you get the percent change
90:21 - right all the information is in this
90:23 - array of objects and inside the object
90:26 - is those keys that i'm talking about so
90:28 - that's how i knew what to get i
90:29 - basically just picked what i wanted from
90:31 - the api and what we need is all of this
90:34 - so the next step let's start creating
90:36 - the components i'm going to start with
90:37 - the header all right so to get started
90:39 - i'm going to open up my menu click on
90:40 - this and let's create that new component
90:43 - and remember i'm organizing the
90:44 - components in this cmc table file let's
90:47 - make a new one and call it cmc table
90:50 - header.js all right then we can do an
90:52 - rafce start out the component and let's
90:55 - import that guy inside here so import
90:58 - cmc table header from dot forward slash
91:02 - tipsy tablet
91:03 - all right so once it's here we can
91:04 - actually uncomment this guy save and see
91:06 - if it comes up there it is so this is
91:08 - supposed to represent where our header
91:10 - will go and it kind of lines up this is
91:12 - what the header is the hashtag name
91:14 - price yeah to get started on editing
91:16 - that let's go into the table header so
91:19 - if i press ctrl p or command p if you're
91:21 - on mac click that and now we're in so
91:23 - what we need to do first is let's import
91:25 - anything we're going to need for me i
91:27 - know i'm going to need the chevron down
91:28 - not the chart event chevron import to
91:31 - run down as well as import info and if
91:34 - you're wondering where infos it's coming
91:36 - from our assets that again that you can
91:38 - get from the repo and info is just a
91:40 - component that has an svg in it okay
91:42 - beautiful what we want to do next is
91:45 - coming at the top here since there's not
91:46 - a lot of styling i'm just going to make
91:48 - that cell object now and i'm going to
91:50 - tell you that the div we'll be styling
91:51 - is called text icon so then we're going
91:53 - to do flex items dash center beautiful
91:57 - all right cool so now from there we have
91:59 - our return and what i want to return is
92:02 - to clear this out like so and i'm
92:04 - actually going to change this to t body
92:06 - right that's just what i want to name
92:08 - this tag forward slash tea body
92:10 - okay cool so from there we can do a tr
92:12 - and then we could do a th oops that's
92:14 - hth just for spacing and then what we
92:17 - could do next is another one th this
92:19 - one's gonna have a class name though i
92:21 - want to give it a flex property of items
92:24 - dash center if you're again if you're
92:25 - wondering what this header is what we're
92:27 - making with the header is specifically
92:29 - this area here and it's just going to be
92:31 - static so there's nothing fancy going on
92:32 - here just styling okay cool i'll bring
92:35 - it back to this oops it's not my pen
92:37 - tool okay cool so that's th and then we
92:40 - can do inside this specific tag we want
92:43 - to do a b okay and in this b we have
92:46 - hashtag and this end and bsp for spacing
92:51 - and then within here we can add our
92:52 - chevron down oops there you go hit save
92:55 - there it is as you can see there's the
92:56 - hashtag we're supposed to get this set
92:59 - up awesome now we have another header
93:01 - here which is going to be a name and i
93:02 - want to do this about four times oops
93:05 - two three four all right and instead of
93:07 - name we have price 24 hour percent and
93:11 - we have seven d space percent okay cool
93:15 - and then from here the next thing you
93:16 - want to do is add another th here and
93:19 - that's pretty much the rest of the
93:20 - headers are so let's just do the rest of
93:22 - them which is just this one and this one
93:23 - right the difference with these three is
93:26 - that it actually holds a div so they
93:28 - also hold divs boom boom and this one
93:30 - just says the last seven days okay but
93:34 - inside these divs they all have a class
93:36 - name oops remember the text icon that's
93:38 - the one they have styles styles dot text
93:41 - icon okay cool so what we could do is
93:43 - just copy this over since it's the same
93:45 - one now the difference between them is
93:48 - all of what they say so inside this div
93:51 - is going to be a p right with the class
93:54 - name mr-2 and actually all of them have
93:57 - p tags like that boom and the boom
94:00 - beautiful okay so within this p tag
94:02 - let's have market cap then for here we
94:05 - have volume and then we have
94:07 - circulating supply okay last thing we'll
94:10 - need is in between the p tag like the
94:13 - closing p tag and the closing div there
94:14 - should be the info thing that i inserted
94:17 - so just getting that real quick boom
94:19 - boom hit save that should be it for the
94:23 - header let me just take a look okay it's
94:24 - not looking bad let me just make this
94:26 - full screen awesome okay cool and i'm
94:28 - noticing that there's a little bit of
94:30 - css issues with the header so let's just
94:32 - go ahead and fix that real quick all
94:33 - right so looks like it's a little too
94:35 - close over here so to fix that i'm going
94:37 - to go into my code let's go to trending
94:40 - card and it has to do something with
94:42 - this area here if i put a space there
94:44 - you go it's less congested i think that
94:46 - looks a lot better okay and with that
94:47 - the header looks pretty good to me let's
94:49 - start making the rest of that table all
94:51 - right guys so coming back into index
94:53 - let's take a look this was our cmc table
94:55 - that we set up then we made the table we
94:58 - just made the header now if you look the
95:00 - next thing we got to make is the cmc
95:02 - table row and it has a bunch of props
95:05 - that we passed in as you can see right
95:07 - that's all of the api coin data that
95:09 - we're getting from coin market and it's
95:11 - going to be put into all of these
95:13 - components right here so if you see this
95:15 - right that's what we're making here
95:17 - right theory tether that's the idea
95:19 - let's go ahead and start working on that
95:21 - by going back into our code base and
95:23 - let's make that component so if i go to
95:25 - components cmc table folder new file cmc
95:29 - row.js
95:30 - boom save and now what we can do is
95:33 - comment this guy out but also don't
95:35 - forget to import them port cmc table row
95:39 - from
95:41 - there okay so if i hit save this is the
95:43 - complete version look at that it's
95:45 - generating at least 10 of them because
95:47 - that's how many uh items are in our
95:49 - array that we're mapping through and for
95:51 - every item it's making that component
95:53 - which is kind of the idea here next
95:54 - thing i'll do is just format it so it
95:55 - looks like this so we're going to take
95:57 - the info that we passed in so if we look
95:59 - back into the row let's go ahead and
96:02 - destructure all the things that we're
96:04 - going to add and it's going to look
96:05 - something like this we're going to get
96:06 - curly brackets here star num and if
96:09 - you're wondering where am i getting this
96:10 - from just look at cmc table and look at
96:13 - all the things that we passed in that's
96:14 - what we want to destructure here all
96:16 - right because those are the props you
96:17 - want to use killing them otherwise we
96:19 - have to say
96:21 - props.numprops.com icon so this is
96:22 - saving a little bit of typing right
96:24 - there coin symbol
96:27 - and one thing that you could do is you
96:28 - can also set a default prop so a default
96:31 - prop can look something like this if you
96:32 - say equals minus right
96:37 - while it doesn't exist this is what the
96:38 - prop is okay so as it's loading you'll
96:41 - look at it you'll see it like this a
96:42 - trade equals d rate is equal to h rate
96:47 - his increment actually a trace increment
96:49 - can be blank that's to be true or false
96:52 - this needs a comma awesome and then d
96:54 - rate is increment market cap value this
96:59 - one can have defaults prop then there's
97:01 - also volume value volume crypto value
97:06 - cool then there's
97:08 - circulating supply and that's going to
97:10 - be three awesome okay cool so those are
97:12 - all the props we are deconstructing nice
97:14 - and organized let's see next thing you
97:16 - want to do is miss did i import anything
97:19 - yeah so we're passing deconstructing our
97:21 - props the next thing we should do is
97:22 - import any assets that we're going to
97:24 - use at the top which for me is just
97:25 - going to be import image from next image
97:27 - import import more and this is coming
97:31 - from the svg assets folder
97:34 - there's the assets svg and you can say
97:37 - more import star from and star coin name
97:42 - row actually this one doesn't exist yet
97:45 - i'm gonna do import rate
97:47 - all right oh and we're also going to
97:49 - import a react hub and i'll talk about
97:51 - it later on but we're going to be using
97:53 - the use router hook and actually this
97:56 - doesn't come from react so let's do an
97:58 - import router from this one comes
98:01 - actually from nexter
98:03 - there we go so this should be for the
98:04 - most part everything that i'm going to
98:06 - include for now so i'm going ahead and
98:08 - hit save and while we're here let's also
98:10 - just do the styles so if i come to the
98:12 - top here the const styles this one's
98:15 - going to equal just table row that's the
98:17 - only div that we're going to actually
98:19 - create here it's going to have a text
98:21 - white border dash b border dash gray
98:24 - dash 800 and the text is going to have
98:28 - this
98:28 - 0.93
98:30 - rem okay there you go that's our styles
98:32 - object and the next part i want to do is
98:34 - working with the jsx but before i do
98:36 - that one thing i want to talk about is
98:38 - what goes into this so if you notice in
98:40 - this row there's this little graph here
98:42 - we're actually just hard coding these
98:44 - graphs and we're getting it from coin
98:45 - market so what i'm gonna do is take all
98:47 - those images and put them into the array
98:49 - so you guys see that awesome so going
98:51 - back to the code what i'll do is if i go
98:54 - here and go before the return but after
98:57 - we accept props and if i hit paste here
99:00 - i'm generating all these graph images so
99:02 - if i press ctrl or alt z i mean this
99:04 - will take a moment i'm getting these
99:06 - graphs you guys can use whatever graphs
99:08 - you want but if you want you could pause
99:09 - it and this is the exact one where you
99:10 - can look at the repo and get the assets
99:12 - from there so that's all i'm doing these
99:14 - are all the graph images the way that we
99:17 - can get a random graph to display is we
99:19 - can make a function to get a random one
99:21 - right how would we make a random
99:22 - function you might be asking so to get
99:24 - started doing that come down below here
99:26 - let's say const get random graphics and
99:29 - it's going to equal an arrow function
99:31 - okay and what i want to do is say kant's
99:33 - random integer right a random number and
99:36 - to get a random number in javascript all
99:38 - you have to do is a math.floor or i'm
99:41 - really just a math.random and this
99:43 - method random generates an integer less
99:45 - than or equal to zero by default but if
99:47 - i do times 10 it's gonna be zero through
99:50 - ten let me see my top four times ten and
99:53 - i want to do a plus one here so that
99:56 - when we do a math.floor it doesn't just
99:59 - go to zero or like less than zero i want
100:01 - to make it start there so we don't
100:02 - always round down to zero it can round
100:04 - down to zero or one two three four so
100:06 - now we'll get a random number from zero
100:09 - through ten okay one two three
100:12 - four five six seven eight nine ten all
100:16 - right so then we're gonna do a return
100:18 - graph images and then to get a random
100:20 - number since we're getting a random
100:22 - number through here we're going to pass
100:23 - that as the array index so that means we
100:26 - will generate a random graph from here
100:28 - okay so just pass in random integer and
100:30 - that's our function cool okay and after
100:32 - creating the get random graph function i
100:34 - want to create a couple more functions
100:35 - that this row is going to need and we're
100:37 - going to be making use of the use router
100:40 - hook the use router hook lets us access
100:43 - the router object and it helps us create
100:45 - dynamic pages with query strings in
100:47 - next.js what do i mean by that it's
100:49 - gonna be easier if i could show you guys
100:50 - so the first step let's do another
100:52 - variable let's do const router is equal
100:55 - to use router and we should see the
100:58 - router object when we do that and the
101:00 - idea with the router is if i do const
101:02 - view coin details if i go to here and i
101:07 - click on bitcoin for example it should
101:09 - lead us to a bitcoin page i'm seeing an
101:11 - error because it's not running oh there
101:13 - you go cool we should lead us to this
101:15 - page and if you see above you can see
101:17 - that the btc is the symbol the coin is
101:19 - bitcoin and the price all of that is
101:22 - within the url we can do that by doing a
101:25 - router dot push so going back to the row
101:28 - control b let's set that up so if i say
101:30 - view coin details all right we'll do a
101:32 - router.push and inside this push right
101:35 - we can format it let's so i want to see
101:37 - currencies slash info right this is the
101:40 - page so that means we're going to make
101:42 - have to make the actual page itself
101:43 - currencies and then the info page right
101:45 - then you want to put a question mark
101:47 - symbol and this is how we can make it
101:49 - dynamic by using making use of template
101:51 - literals so for the symbol is going to
101:53 - equal whatever the coin symbol is of
101:56 - what we clicked so with me cool then
101:58 - we're going to and coin is going to
102:00 - equal template literal of the actual
102:02 - coin name right so coin uh name all
102:05 - right so that's how we can see btc and
102:07 - the coin is equal to bitcoin and if i go
102:09 - click on ethereum instead of btc it's e
102:11 - t h for eth right so that's what we want
102:14 - to set up here so i hope that's making
102:16 - sense because the next part is going to
102:17 - be price and it's going to be something
102:20 - super similar dollar sign coin or
102:22 - rather price okay price awesome now you
102:26 - just put a comma here but that's
102:27 - basically it for view coin details it's
102:29 - going to lead us to our info page right
102:31 - there's another function here that's
102:32 - going to be const view price and instead
102:35 - of taking us to the info page we're also
102:38 - going to have another page that's going
102:39 - to just deal with the price i believe by
102:41 - going to here and i go back so if i
102:43 - click the name i get the coin details if
102:45 - i click the price i should see this page
102:48 - the front end of this project is jacked
102:50 - right so there's a lot of front end here
102:51 - let's go ahead and set it up so
102:53 - router.push right and the url is going
102:56 - to be similar it's going to be
102:57 - currencies slash price instead question
103:00 - mark symbol is going to be equal coin
103:03 - symbol and we got and coin is going to
103:05 - equal coin name and price is going to
103:08 - equal price okay cool so as you can see
103:10 - it's pretty much the same thing the
103:11 - difference is that this page leads to a
103:13 - price js and that one leads to info got
103:16 - it cool and one last function is i want
103:18 - to be able to format a number a certain
103:20 - way i'm thinking like two decimal places
103:23 - because if you look the number is
103:24 - actually really long so we do format num
103:26 - we can just call this function to format
103:29 - the number when we need to do return
103:30 - number num to fixed parenthesis two and
103:34 - go out here dot locale string
103:37 - parentheses to call it boom okay awesome
103:39 - so that's pretty much it for the
103:41 - functions now let's work on the jsx of
103:43 - it all we can go down to the return here
103:45 - and we can say erase this we're going to
103:48 - do something similar with the tea body
103:50 - and the tea body is going to have that
103:51 - div class name that we set up which is
103:53 - going to be styles dot table row yup
103:56 - cool and then from here we just do a tr
103:58 - not tr a t r t d and then we have star
104:01 - here cool so t d
104:03 - t d and then within here let's have
104:05 - another td this one can be the star num
104:08 - all right it's the star num prop that we
104:10 - are getting from here nice hit enter and
104:13 - then we have some condition here coin
104:16 - and coin so if there's a coin icon then
104:19 - we can set up a ternary for it where if
104:21 - it exists then we can load the td with
104:25 - the class name cursor pointer cursor
104:27 - dash pointer and then we have coin name
104:30 - row also do you like this style of video
104:31 - guys that it's longer and i'm taking my
104:33 - time with it name equals coin right so
104:36 - again this is a component coin name row
104:38 - and we haven't made it yet but i'm going
104:40 - to be setting up real quick so coin icon
104:42 - then we have clicked equals view coin
104:45 - details so if this coin name row is
104:47 - clicked then we're gonna run view coin
104:50 - details and remember that leads us to
104:51 - the info page and that's how that
104:53 - functionality was working okay cool and
104:56 - then what we could do is after this td
104:58 - we'll have the this opening parenthesis
105:01 - and then this closing parenthesis and
105:03 - then if that coin icon doesn't exist
105:05 - just have a fragment here and we're all
105:07 - good cool and then in the next line but
105:09 - still inside the tr we'll have another t
105:11 - this one will have a class name of
105:12 - cursor pointer as well because if you
105:15 - guys notice the pattern in between here
105:17 - or not in between here after this we'll
105:19 - also have an on click click and guess
105:21 - what it's going to be the view price one
105:22 - v price okay and what we're gonna should
105:25 - be clicking to call that function would
105:27 - be the format num and then plug in the
105:30 - price all right so we're taking the
105:32 - price prop that we're getting formatting
105:35 - it with our function and then putting it
105:37 - in our jsx and we're making it clickable
105:39 - and when we click on it we run view
105:40 - price so see how it all comes together
105:42 - that's the kind of process that you want
105:43 - to be thinking about for your build so
105:45 - when this td will include the rate then
105:47 - this right one is so useful because now
105:49 - i don't have to rewrite and i can just
105:51 - pass in this rate function and it knows
105:53 - to take in certain props and we're going
105:55 - to take in his h rate is increment is
105:57 - going to be template literal of format
106:00 - num again and let's put the atria in
106:03 - there so i also want to format the h
106:04 - rate and we can also include a percent
106:07 - and don't include the spacer also have a
106:08 - space present okay underneath that we
106:10 - have another td with another rate
106:12 - actually but this one is going to
106:14 - control the d rate all right so it still
106:16 - has increment but what we want to put is
106:19 - d rate is increment all right and let's
106:21 - double check that i'm getting that from
106:22 - somewhere yep there it is and then for
106:24 - rate it's going to be the same thing
106:26 - where we do it equals and then we do
106:29 - this with the template literal to format
106:31 - the num and pass in d rate d
106:34 - right cool awesome all right we're
106:35 - almost done guys with this part the
106:37 - reason we want to do is a td inside that
106:39 - we have a div inside that we have a p
106:41 - tag right and we can actually make this
106:42 - one line because all it is going to be
106:44 - is format now right this is the reason
106:46 - why we made it a function because
106:47 - there's a lot of things i want to format
106:49 - like the volume value right you don't
106:51 - always have to take that api data as it
106:53 - is you can reformat it as you want so
106:56 - we're going to do another p tag with the
106:58 - class name text dash gray dash 400 and
107:02 - again guess what we're going to do
107:04 - format number so performance time we're
107:07 - going to do the volume crypto value and
107:10 - another one we also want to put coin
107:13 - symbol in here so coin sim closing p
107:15 - closing div closing td another td with
107:18 - another div with another p tag which has
107:22 - format num this one is going to be the
107:24 - circulating supply all right so closing
107:26 - div closing td then we have another td
107:28 - but this time it's we're making use that
107:30 - image we imported now closing and for
107:32 - the source it's going to be get random
107:35 - graph so this is how we get the random
107:38 - graph onto our page that you saw and i
107:40 - was highlighting earlier so if i double
107:42 - click this make sure it's the same name
107:44 - just sir get random graph right it's
107:46 - going to call get random graph function
107:48 - and return an image as the source that's
107:51 - the whole point then i can say the size
107:53 - of it so once you get me that image how
107:55 - big do you want it i'll say 150 for both
107:58 - actually no 260 for height and then
107:59 - we'll do alt is equal to graph okay
108:02 - closing td and
108:04 - we're almost there i think i want to do
108:06 - another td here where there's gonna be a
108:09 - more be more svg that i brought in so
108:12 - more closing td closing tr and then
108:14 - finally closing t body if i hit save oh
108:17 - that's right because
108:19 - this guy doesn't exist just yet so let's
108:21 - count it up and see what the error is
108:23 - num.2fix is not a function return num.2
108:27 - fixed that's interesting let me see okay
108:29 - so one thing i'm noticing real quick is
108:31 - the spelling of this should be crypto
108:33 - and then that means the spelling of this
108:36 - should also be the same crypto and let's
108:38 - see market cap value market market cap
108:42 - value is not being used c is increment
108:45 - td oh market cap value is actually
108:47 - supposed to go up here he's gonna have
108:48 - the same deal td div and then ptek with
108:51 - the dollar sign format number format num
108:55 - market cap value save okay now we're
108:58 - using it and right now we're still
109:00 - getting an error that to fix is not a
109:03 - function that's because probably when
109:05 - i'm passing in these numbers i'm not
109:08 - getting them as data just yet so what
109:10 - i'll do for now is comment out format
109:12 - num so we can see something there we go
109:15 - cool so that's okay if it's undefined
109:17 - the basic structure is there though
109:18 - right we have the random graphs that's
109:20 - all loaded awesome okay cool so we're
109:23 - almost there i think to get this format
109:25 - num up and running let's make the coin
109:27 - name row component next okay all right
109:30 - so the next thing i want to work on is
109:32 - the coin name row component so again
109:35 - repeating that cycle inside the cmc
109:37 - table folder new file coin
109:40 - name row.js okay boom rafc e save and
109:45 - coming back to table row let's import
109:47 - him so now this is what i was trying to
109:49 - import earlier coin name row from
109:52 - dot forward slash coin
109:55 - cool then what we can do is uncomment it
109:59 - cool so there it is going name row it's
110:01 - showing up nicely and again we don't see
110:03 - the numbers because we didn't format any
110:04 - of the numbers yet it's not going
110:06 - through so let's finished out corn name
110:07 - row so i go to coin name row the only
110:09 - thing i'm going to need is to import
110:11 - image from next image okay and coin name
110:15 - row can you guess what kind of props
110:17 - it's going to take in if this is coin
110:19 - name row what should be here what should
110:20 - be here really for coin name row or
110:22 - maybe this would be better as the column
110:24 - itself it's going to take in a name and
110:26 - it's going to take in the icon right so
110:28 - if you guessed name an icon you'd be
110:30 - correct okay so what we want to do is
110:32 - coming down in this div let's give it a
110:35 - class name or css property of just flex
110:38 - and if i format it like this should just
110:40 - be an image the image of whatever icon
110:44 - is passed right icon the alt for this we
110:47 - can actually pass in the name and the
110:49 - size of the icon can be with 20 and the
110:53 - height of this can be 20 as well okay
110:56 - cool so if i want to display the name of
110:58 - the coin name that i passed in just add
111:00 - p tag and then just use that prop all
111:02 - right that's why props are awesome so i
111:04 - hit save there we go we got all
111:06 - bitcoin baby so that that means the
111:08 - names that we're passing in isn't
111:10 - exactly right so we got to take a look
111:12 - at that oh it's just all bitcoin for
111:14 - some reason all right when it turn it
111:15 - should be ethereum tether b and b and so
111:17 - forth okay cool okay so yeah that is the
111:20 - coin name row and again we don't see a
111:22 - price or any numbers because if you look
111:24 - but not too trending to our format now
111:27 - we commented out but now that it's all
111:29 - fixed up and ready to go if i hit save
111:31 - hey that's looking a lot cleaner
111:33 - obviously this should be different icons
111:36 - but as we develop this project it will
111:38 - get sorted out okay so that's the coin
111:40 - name row let's go to the next part okay
111:43 - so for this next part let's talk about
111:45 - the view coin details right so if you
111:47 - remember we are pushing to that router
111:50 - object and what i'm doing is creating
111:53 - that route of slash currencies slash
111:55 - info and whatever the symbol and coin is
111:57 - but the truth is it won't work until we
112:00 - set up that page or that route so what
112:02 - we're going to need to do is open up our
112:04 - menu and come over to the pages right
112:06 - here and what we're going to need to do
112:07 - is it's pretty simple underneath pages
112:09 - let's just make a new folder and let's
112:11 - call it currencies in that currencies
112:14 - folder right here we're going to make
112:16 - another file
112:18 - info.js so that's what should load
112:20 - info.js
112:22 - all right so you might be asking why the
112:23 - hell do we make a folder and then a file
112:25 - if i typed in const currencies equals a
112:29 - component and then i have the return
112:31 - here and then we'll have the h1 and if i
112:34 - say hello
112:35 - let's see what happens when i go to
112:37 - localhost slash currencies slash info we
112:41 - have the folder and then the file to see
112:43 - what happens if i hit enter and it says
112:45 - it's not a react component and i think i
112:47 - know why it's because you have to go
112:48 - down before here export default
112:50 - currencies hit save refresh and now when
112:53 - i go to this route highlight this there
112:55 - it is there's the component so that's
112:57 - what we're doing with that router we're
112:59 - making dynamic pages with that query
113:02 - string that we pass in so when i go to
113:05 - here we should go to this url with the
113:08 - symbol being the bitcoin and the coin
113:10 - and then we're gonna grab those uh
113:12 - params those url params within this info
113:15 - does that make sense cool it'll make
113:17 - more sense as i'm coding along but bear
113:19 - with me guys so going to info.js let's
113:21 - get started okay and to get started
113:23 - let's import a couple things what i want
113:25 - to import is our header from our header
113:28 - not that one from dot forward slash dot
113:30 - dot forward slash let's get to
113:32 - components yep components header there
113:34 - we go there's our header let's also get
113:37 - solana from our assets folder so that's
113:39 - a dot forward slash that we'll need here
113:41 - forward slash data forward slash assets
113:44 - it's not an svg it's actually solano.png
113:47 - and then we can import usd or capital
113:51 - usd from let's get to assets and i
113:54 - believe this one's a svg but look ah
113:57 - there it is so forward slash usd and
113:59 - again while we're here let's import the
114:01 - react hooks we might use which is going
114:03 - to be defect and use date hook yep cool
114:07 - all right you guys are going to get
114:08 - really good at react hooks if you keep
114:10 - following this tutorial cool so those
114:12 - are all the imports that we're going to
114:14 - add for now i might be adding more later
114:16 - when it makes more sense but next let's
114:18 - set up the styles object so let's do the
114:21 - first div we're gonna make it's gonna be
114:23 - called active tab and active tab we'll
114:25 - just have a p one then p two all right
114:28 - followed by an mr dash two and then a
114:30 - rounded large and then a background
114:32 - color oh let's see hashtag one seven one
114:37 - nine
114:38 - two four okay then we're gonna have a
114:40 - tab item with px-2 then we'll have a tab
114:43 - container and tab container is going to
114:46 - have a flex property with an item center
114:49 - p two and then rounded let's make that
114:52 - extra large and then the background
114:53 - color of hashtag two two two
114:58 - five three one then for border let's
115:00 - give it a border gray you guys spell
115:02 - gray with a or might be different from
115:04 - where you're from right 500 divided by
115:06 - 10. let's do a text small and i think
115:09 - that should be it for tab container okay
115:11 - up next is info which should be just min
115:15 - screen okay and main will be a text dash
115:19 - white
115:20 - mx-auto max w
115:23 - screen excel awesome then we do a flex
115:26 - start with a flex item start then we can
115:30 - do a flex between which will have a flex
115:32 - justify between which makes a lot of
115:35 - sense then we have a flex tween
115:38 - center which will just have a flex
115:40 - justify between items
115:44 - all right so there's a tab container
115:46 - wrapper so p
115:48 - 10 oops pl dash 0. oh code's all messed
115:52 - up so we have p 0 or p 10 actually and p
115:55 - l
115:57 - 0 p r 0 and w 2 forward slash 3. boom
116:01 - okay that's the tab container wrapper
116:04 - last one flex center and let's do a flex
116:06 - let's finish strong dash center cool so
116:09 - that's all the styles that we need come
116:11 - down below two currencies and what we'll
116:13 - need to do next is remember how we got
116:15 - the used hook there's a couple of
116:17 - different variables that i want to keep
116:18 - track of on this page and that's gonna
116:20 - be const array equals use state
116:23 - something like this and what i want to
116:24 - keep track of first is the coin name
116:27 - right because when i go to this page i
116:30 - go to this page i click this ethereum it
116:33 - should load the info page with ethereum
116:36 - as the coin name so i need to be able to
116:38 - set that over here so i'm going to set
116:40 - that state as coin name with setcoin not
116:43 - data should be name okay and then the
116:45 - initial stage should just be empty and
116:47 - then let's set up the rest so equals use
116:50 - state the next variable i want to keep
116:51 - track of is the coin symbol so whether
116:53 - that's btc or sol for sole that's what i
116:56 - want to keep track of okay then we can
116:57 - do const price as set price equals
117:01 - use
117:03 - okay then we're going to have a use
117:05 - effect here there's going to be a
117:06 - function that's going to call but it
117:07 - doesn't make much sense for me to use it
117:08 - just yet so let's actually just erase it
117:11 - for now and then you'll see when i'll
117:12 - use it but the function that way i want
117:14 - to use is get url data all right and
117:17 - this should be covered okay and get url
117:19 - data is exactly what it sounds like it's
117:21 - going to be getting the parameters from
117:24 - the url so if we go back to not this
117:26 - code but this code it's gonna be
117:29 - table row if you go back to here if i
117:31 - click a bitcoin the url will have the
117:33 - symbol and the name and the price i want
117:35 - to be grabbing that information from the
117:38 - url so we can actually do that and make
117:40 - use of it by saying const query string
117:43 - is equal to
117:46 - window.location.search that's how we get
117:48 - to that query string and then what we
117:50 - could do is const url params is equal to
117:53 - new url search params right creating a
117:56 - new instance of it and passing in query
117:58 - string and then once we have that what
118:00 - we can do is set coin name is equal to
118:03 - ul
118:04 - params.get and then we get the coin
118:07 - right this is super clever because what
118:09 - we're doing is we're getting the coin
118:12 - right the whatever was passed in this
118:13 - coin and storing it into a variable here
118:16 - okay that's something that's super cool
118:18 - that we're doing so it's kind of like a
118:20 - way to do this without necessarily
118:22 - putting it in our contacts or passing it
118:25 - in as a prop okay so then we do set
118:27 - price same thing guys so that to get
118:29 - that's how if that's how we get coins
118:31 - how are we gonna get the price yep now
118:34 - you guys know it's price and the format
118:36 - we can do two code locale string and
118:38 - then for a set coin symbol we'll do a
118:41 - url params dot get symbol okay cool so
118:46 - that is get url data one thing i want to
118:49 - point out though is when i click for
118:51 - example ethereum
118:53 - this is how it knows that i'm looking at
118:55 - ethereum right that's what's the really
118:56 - smart thing we're doing here like how
118:58 - does know that if i click ethereum that
119:00 - i should see ethereum details right so
119:03 - again that's what we're setting up here
119:04 - this specific page and by us setting all
119:07 - that state it doesn't necessarily have
119:09 - all of this nice stuff here either on
119:11 - top of this nice chat app that we're
119:13 - gonna be setting up in a little bit
119:14 - later and it's a decentralized chat by
119:16 - the way which is a cool feature so get
119:18 - excited for that there's still a lot of
119:19 - awesome features left to go so stay
119:21 - tuned but let's get the rest of this
119:23 - front end done cool so now that we have
119:25 - the get url data now it makes more sense
119:27 - to run this use effect so if i say use
119:29 - effect here remember this is a hook to
119:31 - perform functions at different times in
119:33 - the component so if i put comma right
119:37 - here or in other words put an empty
119:39 - dependency module i only want get data
119:42 - or get url to run once and i don't want
119:44 - that cool i only want this to run once
119:47 - when currencies or the info page loads
119:49 - once we got the url data then we can
119:51 - populate this page with whatever we need
119:53 - okay cool so all that's left is to do
119:55 - the jsx which is not as bad and i have
119:58 - this return here which we do not longer
120:00 - need so if i do div here let's give it
120:02 - the class name and guess what we already
120:04 - did the styling so if i do styles.info
120:06 - we can add the header component here
120:08 - because even though i clicked on this
120:10 - the header should actually still be the
120:11 - same so we can actually just reuse it
120:13 - and place it right there another benefit
120:15 - to components and then if we do main
120:17 - here let's give this a class name of
120:19 - styles domain okay from there we got div
120:23 - i want to name you styles dot flex start
120:27 - and then the div with inside will be
120:28 - class name styles dot
120:31 - tab container wrapper and then div
120:34 - inside that you can be styles dot flex
120:37 - between okay and then within that we'll
120:40 - have the actual tab container itself so
120:42 - this one styles that tab container
120:45 - beautiful then we have a bunch of p tags
120:47 - here so i will guess i'll set it up do p
120:50 - tag so it says one two three four but
120:53 - they're gonna have pretty different
120:55 - differing class names this one is
120:58 - styles.activetab right there's a style
120:59 - for active and then just there's the tab
121:01 - item so price is the active tab this one
121:04 - will just be tab item tab item and we
121:06 - can actually give that styling to the
121:07 - rest of them okay so if that's price
121:09 - this will be market this will be trade
121:12 - being view and this will be history okay
121:15 - and then closing div and then we have
121:17 - another div here now we have another tab
121:19 - container so let's make another tab
121:21 - container here and if you're wondering
121:22 - where am i getting price marked cap and
121:24 - trading view right it's over here notice
121:26 - how the active tab is this right because
121:28 - it's symbolizing that's the price that
121:30 - we're seeing cool so if you wanted to
121:32 - make it uh dynamic you can by just
121:34 - swapping out the class name okay so for
121:36 - this one it's gonna have pretty much
121:38 - something similar right so we have the
121:41 - active tab and i think the tab items on
121:44 - this one is one two three
121:47 - four five six leave six one two three
121:52 - four five six seven all right seven so
121:54 - what i'll do is i'll copy this twice
121:56 - okay so this will give me six and then
121:58 - if i just add one more at seven okay but
122:00 - the thing is this is different so we
122:02 - need a one day and again i'm basing it
122:04 - off this guy right here right one day
122:07 - this guy is two days because you know on
122:09 - coin market cap you can see the graph at
122:11 - different stages this is what we're
122:12 - setting up so 3m three months this is
122:15 - the one year ytd and log okay cool then
122:18 - it's closing div closing div let's have
122:21 - a br here and this doesn't exist just
122:24 - yet but there's gonna be a some sort of
122:26 - graph component here which is
122:28 - essentially what you're seeing here
122:30 - we're using uh chart.js to generate this
122:32 - i'm going to be setting that up a little
122:34 - bit later so that's what the graph is so
122:36 - for now i'm going to comment it out but
122:37 - just give you an idea of where that
122:38 - component will go from there let's add
122:40 - another line break and then we can start
122:42 - writing some more divs so the next thing
122:44 - i want to write is div with the little
122:46 - old name of styles dot
122:49 - flex between center okay this one will
122:52 - have just the class name of flex and
122:54 - then within that we have a div that i'm
122:57 - going to give the flex center too and
122:59 - from here we're gonna have the input and
123:02 - then for this input we can make its
123:04 - closing but for the class name let's
123:06 - just give it an outline of none and then
123:08 - for type let's make it a check box check
123:11 - box okay and then after this we could
123:14 - add nbsp for some spacing and then just
123:17 - do usd cool all right awesome so now
123:20 - that we have that input in the next line
123:21 - i already know i want to add a couple of
123:23 - spacing things here just to make it easy
123:25 - and then after that we could just do div
123:27 - with a class name of styles dot flex
123:31 - center flex center okay all right if
123:33 - you're still following along the next
123:34 - thing we're gonna do is input and input
123:36 - again this one's self-closing type
123:38 - equals checkbox and we add our little
123:41 - spacing and bsp and btc cool closing div
123:45 - closing div then we have a p tag want
123:48 - more data and then span with the class
123:51 - name of text and give it this color for
123:54 - the text which is just gonna be hashtag
123:57 - six one eight eight fff okay cool let's
124:00 - just say check out our api check out our
124:02 - api all right if you look want more data
124:04 - check out our api that's this little
124:06 - section right here and here's that usd
124:08 - btc thing that we just set up earlier
124:10 - the two check boxes awesome so that's
124:12 - the span then it's closing p closing div
124:15 - and then after that we have two brs here
124:17 - okay and then this doesn't exist yet
124:20 - either okay so taking a look at it now
124:22 - you're gonna see that these three things
124:24 - are grayed out that's because where i'm
124:25 - actually using them i commented out so
124:27 - just to take note of this we have three
124:29 - components to make for our info it's
124:30 - gonna be graph it's going to be cmc
124:32 - price converter and it's gonna be the
124:34 - chat so let's get started on that let's
124:36 - keep on crushing it okay so for this
124:38 - next part let's talk about the view coin
124:41 - details right so if you remember we are
124:43 - pushing to that router object and what
124:46 - i'm doing is creating that route of
124:48 - slash currencies slash info and whatever
124:51 - the symbol and coin is but the truth is
124:53 - it won't work until we set up that page
124:55 - or that route so we're gonna need to do
124:57 - is open up our menu and come over to the
125:00 - pages right here and what we're gonna
125:01 - need to do is it's pretty simple
125:03 - underneath pages let's just make a new
125:05 - folder and let's call it
125:07 - currencies in that currencies folder
125:09 - right here we're going to make another
125:11 - file
125:13 - info.js so that's what should load
125:15 - info.js alright so you might be asking
125:18 - why the hell do we make a folder and
125:19 - then a file if i typed in const
125:21 - currencies equals a component and then i
125:25 - have the return here and then we'll have
125:27 - the h1 and if i say hello
125:30 - let's see what happens when i go to
125:32 - localhost slash
125:34 - currencies slash info we have the folder
125:37 - and then the file to see what happens if
125:39 - i hit enter and it says it's not a react
125:41 - component and i think i know why it's
125:42 - because you have to go down here export
125:44 - default currencies hit save refresh and
125:48 - now when i go to this route highlight
125:50 - this there it is there's the component
125:51 - so that's what we're doing with that
125:53 - router we're making dynamic pages with
125:56 - that query string that we pass in so
125:58 - when i go to here we should go to this
126:01 - url
126:02 - with the symbol being the bitcoin and
126:04 - the coin and then we're gonna grab those
126:07 - uh params those url params within this
126:10 - info does that make sense cool it'll
126:11 - make more sense as i'm coding along but
126:13 - bear with me guys so going to info.js
126:16 - let's get started okay and to get
126:18 - started let's import a couple things
126:19 - what i want to import is our header from
126:22 - our header not that one from dot forward
126:24 - slash dot dot forward slash let's get to
126:26 - components yep components header there
126:29 - we go there's our header let's also get
126:31 - solana from our assets folder so that's
126:34 - a dot forward slash that we'll need here
126:36 - data forward slash data forward slash
126:38 - assets it's not an svg it's actually
126:41 - solano.png and then we can import usd or
126:45 - capital usd from let's get to assets and
126:48 - i believe this one's a svg but look ah
126:51 - there it is so forward slash usd and
126:53 - again while we're here let's import the
126:56 - react hooks we might use which is going
126:58 - to be the effect and use date hook yep
127:01 - cool all right you guys are going to get
127:03 - real good at react hooks if you keep
127:05 - following this tutorial
127:06 - cool so those are all the imports that
127:09 - we're going to add for now i might be
127:10 - adding more later when it makes more
127:12 - sense but next let's set up the styles
127:14 - object so let's do the first div we're
127:17 - gonna make it's gonna be called active
127:18 - tab and active tab we'll just have a p
127:21 - one then p two all right followed by an
127:24 - mr-2 and then a rounded large and then a
127:27 - background color oh let's see hashtag
127:29 - one seven one
127:32 - nine
127:32 - two four okay then we're gonna have a
127:34 - tab item with px-2 then we'll have a tab
127:38 - container and tab container is going to
127:41 - have a flex property with an item center
127:44 - p 2. and then rounded let's make that
127:47 - extra large and then the background
127:48 - color of
127:50 - 2 2 2
127:53 - five three one then for border let's
127:55 - give it a border gray you guys spell
127:57 - gray with the a or might be different
127:59 - from where you're from right dash 500
128:01 - divided by 10 let's do a text small and
128:03 - i think that should be it for tab
128:05 - container okay up next is info which
128:08 - should be just min
128:10 - screen okay and then main will be a text
128:13 - dash white mx
128:15 - auto max w
128:18 - screen excel awesome let me do a flex
128:20 - start with a flex item start then we can
128:24 - do a flex between which will have a flex
128:27 - justify between which makes a lot of
128:29 - sense then we have a flex tween
128:32 - center which will just have a flex
128:35 - justify between items
128:39 - all right so there's a tab container
128:41 - wrapper so p dash 10 oops pl dash zero
128:45 - oh code's all messed up so we have p 0
128:48 - or p 10 actually and p l
128:51 - 0 p r 0 and w 2 forward slash 3. boom
128:56 - okay that's the tab container wrapper
128:58 - last one flex center and let's do a flex
129:01 - let's finish strong dash center cool so
129:04 - that's all the styles that we need come
129:06 - down below to currencies and what we'll
129:08 - need to do next is remember how we got
129:10 - the use state hook there's a couple of
129:11 - different variables that i want to keep
129:13 - track of on this page and that's going
129:15 - to be const array equals use state
129:17 - something like this and what i want to
129:19 - keep track of first is the coin name
129:22 - right because when i go to this page i
129:25 - go to this page i click this ethereum it
129:28 - should load the info page with ethereum
129:31 - as the coin name so i need to be able to
129:33 - set that over here so i'm going to set
129:35 - that state as coin name with setcoin not
129:38 - data should be name
129:40 - okay and then the initial stage should
129:42 - just be empty and then let's set up the
129:44 - rest so equals use state the next
129:46 - variable i want to track is the coin
129:47 - symbol so whether that's btc or sol for
129:50 - sol that's what i want to keep track of
129:52 - okay then we can do const price as set
129:55 - price equals
129:57 - use
129:58 - okay then we're gonna have a use effect
130:00 - here there's gonna be a function that's
130:02 - gonna call but it doesn't make much
130:03 - sense for me to use it just yet so let's
130:05 - actually just erase it for now and then
130:07 - you'll see when i'll use it but the
130:09 - function that way i want to use is get
130:11 - url data all right this should be
130:13 - capital okay and get url data is exactly
130:15 - what it sounds like it's going to be
130:17 - getting the parameters from the url so
130:20 - if we go back to not this code but this
130:22 - code
130:23 - it's going to be
130:24 - table row if you go back to here if i
130:27 - click a bitcoin the url will have the
130:29 - symbol and the name and the price i want
130:31 - to be grabbing that information from the
130:34 - url so we can actually do that and make
130:36 - use of it by saying const query string
130:39 - is equal to window.loc
130:43 - that's how we get that query string and
130:45 - then what we could do is const url
130:47 - params is equal to new url search params
130:51 - right creating a new instance of it and
130:53 - passing in query string and then once we
130:55 - have that what we can do is set coin
130:58 - name is equal to you all
131:00 - params.get and then we get the coin
131:02 - right this is super clever because what
131:05 - we're doing is we're getting the coin
131:07 - right the whatever was passed in this
131:09 - coin and storing it into a variable here
131:12 - okay that's something that's super cool
131:13 - that we're doing so it's like a way to
131:16 - do this without necessarily putting it
131:18 - in our context or passing it in as a
131:20 - prop okay so then we do set price same
131:23 - thing guys so that to get that's how if
131:25 - that's how we get coins how are we going
131:27 - to get the price yep now you guys know
131:30 - it's price and the format we can do two
131:32 - co-local string and then for a set coin
131:35 - symbol we'll do a url params.get
131:39 - symbol okay cool so that is get url data
131:43 - one thing i want to point out though is
131:45 - when i click for example ethereum this
131:48 - is how it knows that i'm looking at
131:50 - ethereum right that's what's the really
131:51 - smart thing we're doing here like how
131:53 - does know that if i click ethereum that
131:55 - i should see ethereum details right so
131:58 - again that's what we're setting up here
131:59 - this specific page and by us setting all
132:02 - that state it doesn't necessarily have
132:04 - all of this nice stuff here either on
132:06 - top of this nice chat app that we're
132:08 - going to be setting up in a little bit
132:09 - later and it's a decentralized chat by
132:11 - the way which is a cool feature so get
132:13 - excited for that there's still a lot of
132:14 - awesome features left to go so stay
132:16 - tuned but let's get the rest of this
132:18 - front end done cool so now that we have
132:20 - the get url data now it makes more sense
132:22 - to run this use effect so if i say use
132:24 - effect here remember this is a hook to
132:26 - perform functions at different times in
132:28 - the component so if i put comma right
132:31 - here or in other words put an empty
132:34 - dependency module i only want get data
132:37 - or get url to run once and i don't want
132:39 - that cool i only want this to run once
132:42 - when currencies or the info page loads
132:44 - once we got the url data then we can
132:46 - populate this page with whatever we need
132:49 - okay cool so all that's left is to do
132:51 - the jsx which is not as bad and i have
132:53 - this return here which we do not longer
132:55 - need so if i do div here let's give it
132:58 - the class name and guess what we already
132:59 - did the styling so if i do styles.info
133:01 - we can add the header component here
133:04 - because even though i clicked on this
133:06 - the header should actually still be the
133:07 - same so we can actually just reuse it
133:09 - and place it right there another benefit
133:10 - to components and then if we do main
133:12 - here let's give this a class name of
133:14 - styles domain okay from there we got div
133:18 - i want to name you styles dot flex start
133:22 - and then the div with inside will be
133:24 - class name styles dot
133:27 - tab container wrapper and then div
133:29 - inside that you can be styles that flex
133:33 - between
133:35 - okay and then within that we'll have the
133:38 - actual tab container itself so this one
133:40 - styles that tab container beautiful then
133:44 - we have a bunch of p tags here so i will
133:46 - guess i'll set it up do p tag so it has
133:49 - one two three four but they're gonna
133:51 - have pretty different differing class
133:53 - names this one is
133:55 - styles.activetab right there's a style
133:57 - for active and then just there's the tab
133:59 - item so price is the active tab this one
134:01 - will just be tab item tab item and we
134:03 - can actually give that styling to the
134:04 - rest of them okay so if that's price
134:06 - this will be market this will be trading
134:10 - view and this will be history okay and
134:13 - then closing div and then we have
134:15 - another div here now we have another tab
134:17 - container so let's make another tab
134:18 - container here and if you're wondering
134:20 - where am i getting price mark to captain
134:21 - trading view right it's over here notice
134:23 - how the active tab is this right because
134:26 - it's symbolizing that's the price that
134:27 - we're seeing cool so if you wanted to
134:29 - make it uh dynamic you can by just
134:31 - swapping out the class name okay so for
134:33 - this one it's gonna have pretty much
134:36 - something similar right so we have the
134:38 - active tab and i think the tab items on
134:41 - this one is one two three
134:45 - four five six i believe six one two
134:48 - three
134:49 - four five six seven all right seven so
134:51 - what i'll do is i'll copy this twice
134:53 - okay so this will give me six and then
134:55 - if i just add one more at seven okay but
134:58 - the thing is this is different so we
134:59 - need a one day and again i'm basing it
135:02 - off this guy right here right one day
135:04 - this guy is two days because you know on
135:07 - coin market cap you can see the graph at
135:08 - different stages this is what we're
135:09 - setting up so 3m three months this is
135:12 - the one year ytd and log okay cool then
135:16 - it's closing div closing div let's have
135:18 - a br here and this doesn't exist just
135:21 - yet but there's going to be a some sort
135:23 - of graph component here which is
135:26 - essentially what you're seeing here
135:27 - we're using uh chart js to generate this
135:30 - i'm going to be setting that up a little
135:31 - bit later so that's what graph is so for
135:34 - now i'm going to comment it out but just
135:35 - give you an idea of where that component
135:36 - will go okay from there let's add
135:38 - another line break and then we can start
135:40 - writing some more divs so the next thing
135:42 - i want to write is div with the little
135:44 - old name of styles dot flex between
135:48 - center okay this one will have just the
135:51 - class name of flex and then within that
135:53 - we have div that i'm gonna give the flex
135:56 - center to and from here we're gonna have
135:58 - the input and then for this input we can
136:01 - make its closing but for the class name
136:03 - let's just give it an outline of none
136:05 - and then for type let's make it a check
136:08 - box check box okay and then after this
136:12 - we could add nbsp for some spacing and
136:15 - then just do usd cool all right awesome
136:17 - so now that we have that input in the
136:19 - next line i already know i want to add a
136:20 - couple of spacing things here just to
136:22 - make it easy and then after that we
136:24 - could just do div with a class name of
136:26 - styles dot flex center flex center okay
136:30 - all right if you're still following
136:32 - along the next thing we're going to do
136:33 - is input and input again this one's
136:35 - self-closing type equals checkbox and we
136:38 - add our little spacing and bsp and btc
136:42 - cool closing div closing div then we
136:44 - have a p tag want more data and then we
136:47 - have and then span with the class name
136:50 - of text and give it this color for the
136:52 - text which is just going to be hashtag
136:56 - 6188 fff okay cool and just say check
136:59 - out our api check out our api all right
137:01 - if you look want more data check out our
137:04 - api that's this little section right
137:05 - here and here's that usd btc thing that
137:08 - we just set up earlier the two check
137:09 - boxes awesome so that's the span then
137:12 - it's closing p closing div and then
137:14 - after that we have two brs here okay and
137:17 - then this doesn't exist yet either but
137:19 - taking a look at it now
137:21 - you're gonna see that these three things
137:22 - are grayed out that's because when i'm
137:24 - actually using them i commented out so
137:26 - just to take note of this we have three
137:27 - components to make for our info it's
137:29 - going to be graph it's going to be cmc
137:31 - price converter and it's going to be the
137:33 - chat so let's get started on that let's
137:35 - keep on crushing it all right so the
137:37 - next thing i want to work on is the coin
137:39 - name row component so again repeating
137:41 - that cycle inside the cmc table folder
137:44 - new file coin
137:46 - name row.js okay boom rafc
137:50 - save and coming back to table row let's
137:53 - import him so now this is what i was
137:55 - trying to import earlier coin name row
137:58 - from
137:59 - dot forward slash coin name
138:01 - cool then what we can do is uncomment it
138:05 - cool so there it is going name row it's
138:07 - showing up nicely and again we don't see
138:09 - the numbers because we didn't format any
138:10 - of the numbers yet it's not going
138:12 - through so let's finish that chord name
138:13 - row so i go to coin name row the only
138:15 - thing i'm going to need is to import
138:17 - image from next image okay and coin name
138:21 - row can you guess what kind of props
138:23 - it's going to take in if this is coin
138:25 - name row which should be here what
138:26 - should be here really for coin name row
138:28 - or maybe this would be better as the
138:30 - column itself it's going to take in a
138:32 - name and it's going to take in the icon
138:34 - right so if you guessed name an icon
138:35 - you'd be correct okay so what we want to
138:38 - do is coming down in this div let's give
138:41 - it a class name or css property of just
138:44 - flex and if i format it like this should
138:46 - just be an image the image of whatever
138:49 - icon is passed right icon the alt for
138:52 - this we can actually pass in the name
138:54 - and the size of the icon can be width 20
138:58 - and the height of this can be 20 as well
139:01 - okay cool so if i want to display the
139:03 - name of the coin name that i passed in
139:06 - just add p tag and then just use that
139:08 - prop all right that's why props are
139:09 - awesome so i hit save there we go we got
139:11 - all bitcoin baby so that means the names
139:15 - that we're passing in isn't exactly
139:17 - right so we got to take a look at that
139:18 - what's just all bitcoin for some reason
139:20 - all right when it turn it should be
139:22 - ethereum tether b and b and so forth
139:24 - okay cool okay so yeah that is the coin
139:26 - name row and again we don't see a price
139:28 - or any numbers because if you look but
139:31 - not too trending to our format now we
139:33 - commented out but now that it's all
139:35 - fixed up and ready to go if i hit save
139:37 - hey that's looking a lot cleaner
139:39 - obviously this should be different icons
139:42 - but as we develop this project it will
139:44 - get sorted out okay so that's the coin
139:46 - name row let's go to the next part okay
139:48 - so what i'm thinking of tackling first
139:50 - is let's work on the price converter
139:53 - which again is just this little guy
139:55 - right here there shouldn't be that much
139:56 - to it and i think we get it out of the
139:58 - way now so to work on the price
139:59 - converter let's head back to the code
140:01 - and let's make that component so i'm
140:03 - just going to do one of these and you
140:05 - don't have to necessarily put it in the
140:07 - cmc table component since it's not
140:09 - really on the table it's on its own page
140:11 - i'm just going to make a new file and
140:13 - call it cmc price
140:15 - converter.js
140:17 - okay cool so let's do it r-a-f-c-e
140:19 - yeah there you go so going into that
140:22 - that should be fine and let me see on
140:25 - the table row or the info it takes in a
140:28 - lot of properties so let's accept those
140:30 - properties in the parameters here and
140:32 - what we're going to get is the from the
140:35 - 2 the from symbol the 2 symbol the from
140:39 - logo 2 logo and the price so those are
140:42 - all the props that we are accepting
140:44 - awesome let's go ahead and import a
140:46 - couple different things there's
140:48 - something called import converter from
140:50 - our assets folder so that's in our
140:52 - assets folder that we got let's do
140:54 - converter.png
140:56 - then let's import btc this is the
140:59 - bitcoin icon if i do assets btc.png
141:03 - cool and we're going to import the rest
141:05 - of the coins in here so basically the 10
141:08 - coins that we want to use so i'm just
141:09 - going to take some time to do that now
141:11 - feel free to customize this this with
141:13 - the coins that you want to use okay
141:14 - let's do a cc let's do usdt all right
141:17 - this is tether xrp okay and then we got
141:20 - cardano any cardano holders watching
141:23 - this video how you guys doing i said
141:25 - cardano.png
141:27 - and we also got tara which is also
141:29 - looking pretty interesting assets slash
141:31 - terra png okay we got import and then
141:34 - asset solana png then we can import
141:37 - avalanche from same place then we got b
141:41 - and b from assets slash
141:44 - b and b dot png nice okay cool
141:48 - all right so that should be all the
141:50 - imports for now
141:51 - oh and of course we got to import image
141:54 - all right so if you want to read the
141:55 - image you need to import an image from
141:57 - next slash image there you go cool so
142:00 - that should be it for now let's go to
142:01 - the styles object now since there's not
142:03 - that many so say con styles equals and
142:06 - then for the styling the first one is
142:07 - going to be converter and for converter
142:09 - what we'll do is going to be flex items
142:13 - center justify dash between and then
142:16 - we'll have a bg bracket hashtag one
142:19 - seven one
142:21 - nine two four okay then we can do i'll
142:23 - give it a border a nice border gray here
142:25 - i keep doing the eight thing gray or
142:27 - gray five hundred
142:30 - four slash ten and then the pixels px-5
142:33 - py five as well and let's also make it
142:35 - rounded and make it extra large
142:38 - the next one we have to do is the
142:39 - convert button and for the convert
142:42 - button it's going to have a bg of this
142:45 - 1d
142:46 - 4ed8
142:48 - okay with p 2 p x 5 and i'm going to do
142:52 - w min with rounded
142:55 - excel mt.5 cursor dash pointer and then
142:59 - a hover opacity and then for the opacity
143:01 - you give it a 60. okay comma here and
143:03 - that's going to be it for the styling
143:05 - cool and if i do an altsy that should be
143:07 - easier to see and if i went too fast
143:09 - feel free to pause it i think you guys
143:10 - got it though this is just it for the
143:12 - styling cool so working my way down i'm
143:14 - thinking of making a function here so
143:16 - depending on what is the coin icon i
143:21 - want to load a different kind of image
143:23 - if it's bitcoin right then load the
143:25 - bitcoin image if it's ethereum load the
143:27 - ethereum message right that's why we
143:28 - have all of these guys set up what i'll
143:30 - do at the top here is say const coin
143:33 - icon is boom boom it's gonna be just a
143:36 - bunch of switch statements so the first
143:37 - one is going to be switch from and then
143:40 - the case will be bitcoin okay and if
143:43 - it's bitcoin then return this image oops
143:46 - and return image and self closing and
143:49 - for the source it will be the btc which
143:52 - makes sense if it's bitcoin and the
143:54 - class name is going to be equal to
143:56 - rounded let's make it rounded full okay
143:59 - and the width will be 50 and the height
144:02 - will also be 50. cool and then the alt
144:05 - oh we can just make this blank cool so
144:07 - that's the switch for bitcoin you're
144:08 - gonna do this again for different cases
144:10 - for different coins so with that said
144:12 - there's nine more to do and to make this
144:14 - a little bit faster all we have to do is
144:16 - copy the case and just repeat it nine
144:19 - more times so if i go here that's one i
144:21 - don't know maybe it's either just to
144:23 - write it all out so like i said we're
144:25 - doing one for each coin so this one will
144:26 - be simply just ethereum so ethereum and
144:30 - for the source just gotta put eth all
144:33 - right that's it that's all i have to do
144:34 - to switch it up everything will be
144:35 - pretty much the same the next one is
144:37 - tether and the source is usd t okay
144:40 - after we have b and b and b so yeah just
144:42 - put the corresponding ones where it
144:44 - belongs we have a usd coin which will
144:48 - just be usdc then we have xrp which will
144:52 - have the source xrp cool this is going
144:54 - to be super cool when it's done and we
144:55 - have our cardano then we have terra then
144:58 - we have solana avalanche i know i'm
145:01 - moving fast so the cetera should
145:03 - actually be terra this will be seoul or
145:06 - solana this one will be avax or
145:08 - avalanche and awesome cool so then we
145:11 - just need a default case here so the
145:13 - default will be return image as the
145:16 - default can just be bitcoin so to make a
145:18 - bitcoin we can just say src equals btc
145:21 - do the class name of the drill rounded
145:23 - dash full width 50 height also 50. and
145:27 - for the alt we'll put that
145:30 - cool so that's our switch statement
145:32 - let's actually work on the jsx so to
145:34 - work on the jsx let's come a little bit
145:36 - more down okay all we need to do first
145:38 - is erase this guy and for the div let's
145:40 - just say h2 and let's write from
145:43 - symbol and then two symbol is that how i
145:47 - spelled it this should be symbol oh yeah
145:49 - i see it two sim nimble let's use two
145:51 - symbol all right cool gucci so two
145:54 - symbol converter right this line what
145:56 - this line is actually doing is when i
145:59 - click on ethereum it's the eth to usd
146:02 - converter that's literally what we wrote
146:04 - out
146:05 - so going back to this guy converter
146:07 - that's going to be it for the h2 then we
146:09 - have the br here and we'll have a div
146:12 - with the name styles oops skip partially
146:15 - emitted expression wow styles dot
146:17 - converter which will hold the div which
146:19 - will in turn hold another div with a
146:21 - class name flex which will have another
146:24 - div with the class name avatar dash
146:26 - container okay cool then we have a from
146:28 - logo and from logo with the coin icon
146:32 - right this is where we're calling that
146:33 - function to see what the coin icon we
146:36 - should be displaying is and if the from
146:39 - logo exists run it through the switch
146:41 - statement if it doesn't make this div
146:44 - empty that's what we're doing here with
146:46 - the ternary cool then it should be
146:48 - closing div and our favorite spacing
146:50 - thing and bsp okay awesome so it's
146:54 - closing div and then an opening
146:56 - okay within that we'll have a p tag and
146:58 - this is where we just want to show that
146:59 - symbol so we'll see from symbol followed
147:02 - by h4 that shows the from so i'll be
147:05 - like btc bitcoin okay so it's closing
147:08 - the closing div and then in the next
147:10 - line we'll have another one with the
147:12 - class name of flex with class name text
147:15 - dash three excel and in the p tags that
147:18 - says one and it just says n bsp and
147:21 - another one let's keep the nice spacing
147:23 - consistent okay and that's closing div
147:25 - and before that closing there we just
147:26 - need another one and this will hold the
147:28 - actual image itself the alt source will
147:31 - be the converter and the width will
147:34 - equal 40 okay and then the height will
147:37 - also equal 40. okay closing div and then
147:40 - this guy again and bsp and bsp and then
147:44 - let's have another div here this one
147:45 - will have the class name of flex
147:47 - followed by inside of it we should add
147:49 - the two logo somewhere so let's add that
147:51 - right here to logo and bsp and usb okay
147:55 - cool followed by another div where we
147:56 - have the p tag here with the two symbol
148:00 - two symbol and then another not a p tag
148:03 - but an h4 kind of similar how we did the
148:05 - from we're gonna do that for the two and
148:06 - this will just have two so that's
148:07 - closing div closing div then we'll have
148:10 - a p tag here which just has class name
148:13 - oops class name text
148:15 - 3xl and let's include the price in there
148:19 - that has price okay and that should have
148:21 - closing div in between these guys last
148:23 - one will be div class name the styles
148:27 - dot convert button yep and it will also
148:31 - have an on click not have on click just
148:33 - yet but that's fine it's just to convert
148:35 - so this button doesn't do anything yet
148:36 - but you can add that functionality later
148:38 - on so for now let's leave it save cool
148:40 - so let's just go back to our main page
148:43 - okay and then one thing i want to do
148:44 - next is i'm getting tired of looking at
148:46 - this and seeing just bitcoin let's go
148:48 - ahead and fix that by coming over to our
148:50 - code go to coin name row and let's
148:52 - finally add all the things that we're
148:54 - gonna need so if you remember the what's
148:56 - it called the switch statement that we
148:58 - made if it's bitcoin do this if it's
149:00 - ethereum do this we're gonna do the same
149:01 - thing for coin name row okay so what
149:03 - that means is import all the images from
149:06 - there so if you remember i have it saved
149:09 - i'm just gonna do something similar
149:10 - which is gonna be this import all of
149:12 - these assets for coin name row okay cool
149:16 - and then from here let's give it some
149:18 - styles so i can go to con styles style
149:21 - then i can say the styles equals coin
149:24 - name row coin name row and it's just
149:27 - gonna have a flex of an items dash
149:29 - center and then the buy button is gonna
149:32 - have the css yep it's gonna be bg of
149:36 - this color which is just gonna be
149:37 - hashtag one a one f three okay and then
149:41 - the text will have this color which is
149:44 - just hashtag six
149:45 - one eight eight f and then it's just p
149:49 - one p x dash three the text will be
149:51 - small and then we can say rounded dash l
149:54 - g then we can say cursor dash pointer
149:57 - and then we're gonna add a hover with
149:59 - colon and then the opacity of the hover
150:01 - will be dash fifty okay amazing so after
150:05 - that i think that's pretty much it for
150:06 - styling there's not much we're gonna add
150:08 - i remembered we have to add the buy
150:09 - button that's why it looks a little
150:10 - wonky that's okay and then we also have
150:13 - a property called clicked in here
150:14 - because that's what i had so clicked
150:16 - okay that assets usd let me just check
150:19 - something oh okay because coin name is
150:21 - in cmc table that makes sense this
150:24 - doesn't have to be in cmc table this can
150:26 - just be in components yes update imports
150:29 - so if you remember where we're using
150:30 - coin name row which is going to be in
150:32 - here the path should it should just be
150:35 - dot forward slash
150:36 - coin name row awesome so now if i hit
150:38 - save there we go okay cool and again no
150:41 - css yet because if i go to coin name row
150:44 - i'm not using any of the divs that i set
150:46 - up here so we can actually do that by
150:48 - coming down below here and the main div
150:50 - it's just gonna be a modified version of
150:52 - this so what i'll do is i'll just change
150:54 - it up so this one yeah this was the old
150:56 - one that i made let's update it with
150:58 - styles dot coin name raw okay and let's
151:01 - just erase this we're gonna put it back
151:03 - up starting fresh if i say div give this
151:06 - a class name of mr three and then flex
151:09 - and then the on click of it will be the
151:12 - clicked property that i passed in okay
151:14 - and then
151:15 - cool well then here is another div
151:16 - that's going to have a class name of
151:18 - mr.2 and this is where that coin icon so
151:22 - now it can actually be different because
151:24 - it's going to call a coin icon function
151:26 - that we're going to make in a bit where
151:27 - is this okay coin icon awesome and then
151:30 - over here we just need a name property
151:32 - and that div can be closed there put
151:34 - some space this will be the p tag and
151:36 - for this you can have if the name is
151:39 - equal to bitcoin or the name is ethereum
151:43 - or if the name is tether essentially if
151:46 - it's one of the top three oops to then
151:49 - what i want to happen is it should load
151:51 - a spam okay and this will make more
151:54 - sense in a bit but there's gonna be like
151:56 - a open modal thing here but for now it's
151:58 - just gonna be spam class name styles dot
152:02 - buy button and it's gonna have an on
152:05 - click that i'll set up later but we'll
152:07 - just have buy here cool and if it
152:09 - doesn't then we're just gonna have oh
152:12 - let's change this should actually be
152:14 - here and then we can just have the
152:16 - fragment here there you go that looks
152:18 - good to me go ahead and hit save let me
152:21 - see we are missing one more thing oh i
152:23 - know yep we're not using icon yet
152:25 - because we have to make the function so
152:26 - if i come back to the top here we go
152:28 - above the return here we're gonna set up
152:29 - the coin icon function which is gonna be
152:31 - similar to what we did last time so it's
152:33 - just gonna do cons coin icon equals this
152:36 - okay switch takes in a name and again
152:39 - the case for this will be bitcoin colon
152:42 - and if it is bitcoin what we want to
152:43 - return is the image of the bitcoin right
152:46 - this is how we decide which image to use
152:48 - without making multiple it's got to do
152:49 - it once like this
152:51 - a class name equal to rounded dash full
152:55 - the width equals 20 and the height
152:57 - equals 20. if it looks familiar that's
152:59 - because it is so what i'll do is i'll
153:00 - just copy the coin icon function from
153:03 - the info.js okay so what i ended up
153:05 - doing was copy the coin icon function
153:08 - from the cmc price converter because
153:10 - it's pretty much the same thing and i
153:12 - paste it in there and we should be good
153:14 - to go right bitcoin ethereum now the
153:16 - only thing i would change is the height
153:19 - and width of this it should not be 50.
153:20 - so what you want to do is to change
153:22 - multiple is if i do ctrl delete ctrl d
153:24 - all the way until the last one it's a
153:26 - cool neat trick okay so now i'm on all
153:28 - the 50s so after you use command d or
153:30 - control d just press backspace and then
153:32 - just press 20. boom look at that change
153:34 - multiple 50s at once save you and me the
153:37 - headache so hit save that's looking way
153:40 - better so the only thing i would fix is
153:42 - the formatting of the and the buy it
153:45 - should just be like a one single row so
153:47 - we could fix that let me just go over
153:49 - here and see what's missing okay so i'm
153:51 - taking a look at this i think i see the
153:53 - problem my autocorrect put children when
153:55 - this should be class name oops like this
153:57 - hit save there we go that's more like it
154:00 - and if i go back to here okay and if i
154:03 - go back to cmc table i remember that
154:05 - these are the three things that i'm
154:06 - passing down and this is a clicked
154:08 - property so if i go to coin name row we
154:10 - can now add the on click click and that
154:14 - should link us with our page so let's
154:15 - see if that works okay so if i click on
154:18 - bitcoin will we get bitcoin okay so if i
154:21 - click it i'm able to see the correct url
154:24 - it should say bitcoin and the price and
154:26 - if i click on this it should say
154:28 - ethereum and the price awesome so the
154:30 - url is working but it seems like the
154:32 - page isn't so let me just try something
154:34 - i'm just do ctrl c let's do that like
154:36 - dev again just to restart the server
154:37 - it's going to make a new one for us it's
154:40 - been a while since i did that awesome
154:41 - there's the api call click on bitcoin
154:44 - and we get nothing here so let's see
154:46 - what's going on all right so our console
154:48 - is fine no immediate error blocked by
154:50 - client so let's take a look okay and
154:52 - again we don't see anything here because
154:54 - i just remember we need to import it so
154:57 - let's import the cmc price converter
155:00 - from that components to the cmc price
155:03 - converter so let me just double check if
155:05 - that's right yep we gotta do it one more
155:07 - time and we gotta go to components and
155:09 - we're gonna go here so if i hit save and
155:11 - if you remember let's see this guy right
155:13 - here that's where it's passing all the
155:15 - information if i hit save now let's
155:16 - freaking go that's bitcoin guys awesome
155:19 - that's our price converter in action if
155:20 - i click ethereum eth the number is
155:23 - different let's go this is what it is in
155:25 - usd that's what we set up awesome so it
155:27 - looks like it's dynamic that guys is the
155:29 - cmc price converter component okay up
155:32 - next remember we still have a couple
155:34 - components to make so in info we want to
155:36 - start working on the graph component
155:38 - what's the graph component i'm glad you
155:40 - asked hassam what you're going to do is
155:42 - go to click ethereum and if you notice
155:44 - this little bad boy right here this
155:46 - graph is something that we're getting
155:48 - from chart js and we can set that up in
155:50 - a component and make it reusable it's
155:52 - just a random graph i'm sure if i
155:54 - refresh this will it be the same nope
155:56 - it's different so see how it's
155:57 - generating a random graph it's just for
155:58 - show this is how you can make it look
156:00 - like this don't worry about that so
156:02 - let's go ahead and get it working so to
156:04 - get that graph working it's a component
156:06 - so you know what that means go over to
156:08 - your components folder and let's just
156:10 - make a new file and we can just call it
156:12 - graph js amazing and then in graph.js we
156:16 - can set it up like this ctrl b and let's
156:18 - import the things that we're going to
156:20 - need so what we need is import
156:22 - the line all right we need to get the
156:24 - line from react chart js
156:27 - next we'll need import chart right from
156:29 - react chart js nope we actually want
156:31 - this one from chart js and then slash
156:34 - cool so these are two imports that we
156:36 - need this one doesn't need to be the
156:37 - structured it can just be import chart
156:39 - cool and if you're wondering how i got
156:41 - the random points on the graph right
156:43 - next up the random points to get that i
156:45 - just made a chart or an array of random
156:48 - points an array of arrays if you will so
156:50 - kant's random points is equal to an
156:53 - array and you know it's literally just
156:55 - random numbers that i wrote out which
156:57 - i'll just paste right here so feel free
156:59 - to use random numbers for you or you can
157:01 - pause the video and this is it for the
157:03 - random points all right cool and then
157:05 - now you might ask how do i pick which
157:08 - set of random points do i use right
157:09 - these are the about five possibilities
157:11 - but remember how we generated a random
157:13 - graph image well we can do the same
157:14 - thing here if i say const get random
157:18 - points and that's a function right what
157:20 - did we do well we did cons random
157:22 - integer which will be a random index
157:24 - that we'll use and we want to do is
157:25 - math.random which is just a random
157:28 - number between 0 and 1. if i do a times
157:31 - four here then it's gonna be zero to
157:34 - four the thing is it's gonna be all the
157:35 - numbers between zero two four which is
157:37 - like zero point one one one one one
157:39 - three point seven seven seven six so
157:41 - let's map that floor it to round down
157:43 - and then add a plus one because
157:45 - otherwise we'll never get to the four we
157:47 - want to get to the four this is making
157:49 - sure instead of just math flat fouring
157:51 - it down to three let's say if it's three
157:53 - point nine nine nine nine we wouldn't
157:54 - get to four we would actually just lower
157:56 - it to three this ensures that we get
157:58 - that number as well so there you go get
158:00 - random points that's good with me the
158:02 - next thing we should have a graph called
158:04 - old graph a variable called data which
158:07 - is an object and this is essentially the
158:09 - labels for our chart so if you look at
158:11 - our chart this 604 9 of 1204 that is
158:15 - what data is going to represent so data
158:17 - is an object which has a key of labels
158:19 - which in turn has an array of all the
158:22 - times that you want so again in theory
158:24 - they could be whatever you want what i
158:26 - did was just made like 904 it just feels
158:29 - more realistic if it's not an exact
158:30 - number but this could be whatever you
158:31 - want as as long as the time is
158:33 - incremental so there you go that's the
158:34 - labels awesome so that is the data
158:38 - object well it's the labels part there's
158:40 - another property here i did like a comma
158:43 - right after this array there's also a
158:45 - data set part all data sets okay and
158:47 - this is also an array it's an object as
158:50 - well and basically here you define the
158:54 - properties of your graph
158:56 - for example if there's a fill i want to
158:58 - say false okay so same thing what do you
159:00 - want the line tension to be the custom
159:02 - line tension can be 0.1 and then what do
159:05 - you want the background color to be
159:07 - background color can be red border color
159:10 - can be quotes three seven seven
159:14 - three f five border cap style can be
159:18 - just butt and border dash yeah so these
159:21 - are just all properties of the graph you
159:24 - can feel free to just copy what i have
159:25 - this one is the dash offset which would
159:28 - be 0.0 there's a border join style
159:30 - property and that is uh okay then for
159:33 - point border color there is hashtag
159:37 - seven
159:38 - three f five okay point background color
159:41 - it's going to be three not three
159:43 - actually oh actually it's the same one
159:45 - three seven seven
159:47 - three
159:48 - f five
159:51 - okay then there's gonna be point border
159:53 - width you can make that a one and
159:55 - there's gonna be a point hover radius
159:57 - which can make a five then there's gonna
159:59 - be a point hover background color yeah
160:02 - it's very detailed and this will be the
160:04 - same as well so it's three hashtag three
160:07 - seven seven
160:09 - three f5 and i know what you're saying i
160:11 - see it too thank you nice catch nice
160:13 - catch cody cool i hope that every time i
160:15 - say a name that you guys pay attention
160:17 - more so any codies i'm glad you're
160:19 - watching okay awesome so then we have a
160:21 - point hover border color and again same
160:24 - color keep it consistent three seven
160:26 - seven three f so that's the point hover
160:28 - border color and it's not however it's
160:31 - up
160:32 - okay let's do a point radius which will
160:35 - also be one and there's a point hit
160:38 - radius which is ten and there's the data
160:41 - right what is the data it's basically
160:42 - gonna take an array that we pass in so
160:44 - you can manually put the data and it'll
160:46 - be the same graph throughout or we can
160:48 - do a get random points to generate a
160:51 - random array of data that we have which
160:52 - is one of these cool pass that in just
160:55 - add the commas here just because for
160:57 - formatting and then we need to pass in
160:59 - and const options or create a const
161:02 - options right so then the plugins oops
161:04 - plugins is going to be this the legend
161:07 - is going to be this and display dot
161:11 - false is going to be this okay cool
161:13 - that's looks pretty good to me so far
161:15 - but one thing i want to mention is if
161:17 - you don't have chart js make sure you
161:18 - have it you can check by doing a control
161:21 - p and checking your package.json and
161:24 - just double check if you have chart js
161:26 - if you don't react chart js2 if you
161:28 - don't then you're going to need it in
161:30 - order to get this it's going to say like
161:31 - dependency or module not found okay but
161:34 - we did all that in the beginning
161:35 - together so if you're watching the video
161:36 - awesome you paid attention so you're
161:37 - ready in terms of styling there's no
161:39 - styling all you got to do is make use of
161:41 - that line component right and this line
161:43 - component just pass in the data as data
161:45 - the options as options this is why we
161:48 - made all those variables we're going to
161:49 - just pass it around all in here okay and
161:51 - then the width can be of the table could
161:54 - be our graph would be 400 and the height
161:57 - let's just make 150. okay if i save this
162:00 - what we got to do next is in our info we
162:02 - can bring the graph the graph out and we
162:05 - also should import said graph so import
162:08 - graph from the forward slash components
162:11 - and graph save and if there's any errors
162:13 - at all it'll yell at us but let's see if
162:15 - i refresh this just cuz click on
162:18 - ethereum oh okay we have the graph but
162:21 - it looks like it's not generating
162:22 - anything see the console any errors okay
162:25 - so that's a good sign we see a graph at
162:27 - least uh what that tells me is that
162:29 - there's something wrong with this data
162:32 - okay it's not data's not showing up
162:34 - because we're getting it from here and
162:36 - oh i haven't finished the function so i
162:38 - got the random integer guys but we still
162:40 - need to return the random points bracket
162:43 - random integer and then we should see
162:46 - something beautiful and every time i hit
162:47 - refresh we'll just see a random graph
162:49 - that was the same one there we go cool
162:51 - so that's the graph component in our
162:53 - info page i think i'm pretty satisfied
162:55 - with that let's work on the next one so
162:57 - if we take a look info we can start
162:58 - working on the chat part okay and then
163:00 - for the chat component same deal if i do
163:02 - command b or control b go to components
163:05 - folder let's just make a new file this
163:07 - one will be called chat.js so it's just
163:10 - chat.js fce boom cool so once we're here
163:14 - let's get any imports we might need
163:16 - which is just going to be for now import
163:18 - chevron chevron down from if you guys
163:22 - remember this is one of our assets it's
163:24 - svg and it's the down one cool next we
163:27 - want to just import let's see do i have
163:29 - this in my package.json let me do one of
163:32 - these oh okay yep you can install it
163:34 - later but for now uh we can do a chevron
163:36 - up from assets spg chevron up
163:40 - okay next we can import uh shiba let's
163:44 - get sheba here because we can do slash
163:46 - assets slash sheba.png and i forgot to
163:50 - mention too if you're wondering where of
163:51 - all this is coming from if you look at
163:54 - our finished app oops switch to this one
163:56 - finish that this is this little chat
163:59 - area here we can do a live shiba inu
164:01 - chat you can put whether you're bullish
164:03 - or bearish right and that's your status
164:06 - and then you can put like what's
164:07 - happening on bitcoin cool it's like this
164:09 - little bonus feature that i want to
164:11 - include much later but we can set up the
164:13 - front end at least okay and that's where
164:14 - it should go boom if i click on this as
164:16 - you can see there's like the perfect
164:18 - slot for it right here yes sir awesome
164:20 - so let's erase that and let's get
164:22 - started yeah so we should get the sheba
164:23 - icon since that's the chat and then we
164:25 - do import image from
164:27 - next image next image amazing okay cool
164:30 - while we're here let's just start up the
164:32 - styles sometimes i like to do the divs
164:35 - first and then it makes sense where
164:36 - these styles are coming from but for now
164:38 - let's just do the styles first so the
164:40 - first one is a div called bullish label
164:42 - right that's the little like toggle
164:44 - thing and then you can do a flex cursor
164:46 - dash pointer you can do an active bg
164:50 - green dash 600 and then we could also do
164:53 - an item stash center okay then after the
164:56 - item center what i want to do next is a
164:59 - text
165:00 - green
165:00 - 600 and see we can give it a border
165:03 - let's make it the border also green dash
165:06 - 600 it's the exact green that i want to
165:08 - use h min px2 and then let's do a
165:11 - rounded dash large awesome cool okay if
165:14 - there's a bullish label there's also a
165:16 - bearish label if you're feeling bearish
165:18 - on shiba inu regardless what you have
165:20 - this is if you feeling bearish which
165:23 - will have very similar features except
165:24 - it's going to be mostly red so flex to
165:26 - pointer active bg dash red-500
165:30 - items center text and then we'll do a
165:33 - dash here because what i want next is
165:36 - this gray brackets with because we do we
165:39 - want to do an ea here
165:41 - 3
165:42 - 9 4 3 okay that's the color and for the
165:45 - border give it a border of red and this
165:48 - one will be actually 600 and then it's
165:50 - going to be h dash min and then px-2 and
165:53 - then rounded
165:54 - lg okay awesome dash white border border
165:58 - dash green dash 600 and an h dash min
166:02 - and a px-2 and a rounded dash lg awesome
166:06 - and then we're just gonna do active
166:08 - bearish it's exactly what it sounds like
166:10 - let's just do the css for that which
166:12 - again literally similar to the other one
166:14 - except different color cursor dash
166:16 - pointer bg dash red dash 500
166:21 - items center text white border board
166:24 - dash red dash 600 h min px-2 rounded lg
166:31 - awesome and save booyah okay looks
166:33 - pretty good to me the next thing i want
166:34 - to do is come down here and i guess i
166:37 - could set up the toggles right now what
166:38 - i want to do later on is get a couple
166:41 - state variables here so let's do import
166:44 - comma and we can say view state and
166:46 - while we're here let's just get the
166:48 - other hooks that i'm using which is use
166:50 - state and use effect which we'll get
166:53 - into later and use context okay again
166:57 - we're only really gonna use use effect
166:58 - at the moment we'll come back to this
167:00 - okay so for the chat there's gonna be
167:02 - something called message that i'll set
167:04 - up now set message equal to use state
167:08 - and the initial state is empty string
167:09 - then we also want to set the state for
167:11 - the bullish value or whether it's
167:13 - bullish or bearish bullish value okay
167:16 - set that equal to you state and the
167:18 - default will be true whether it is or
167:20 - not it's going to toggle so this state
167:22 - is setting up a toggle nothing over here
167:23 - because we're not setting up the
167:25 - functionality just yet but we'll do the
167:27 - front end and for the front end it's
167:29 - going to be a couple things but i want a
167:30 - fragment up here because it needs a
167:32 - parent component and let's see this is
167:34 - going to have a div and now let's insert
167:36 - all the class names so this one will be
167:38 - styles.chat okay styles that chat go
167:41 - inside of that div and the child of the
167:44 - chat will be the flex between the child
167:47 - of the flex between will be these two p
167:49 - tags that i'm thinking of using so let's
167:51 - do class name is styles dot bold text
167:55 - and this is gonna be the live sheba in
167:57 - your chat this is that text that you see
167:59 - if you go over here this is what we're
168:00 - writing right so that's the whole
168:02 - section i'm making and then remember
168:04 - there's also a c more if you saw that
168:06 - let's actually make that here this one
168:07 - actually doesn't need a class name it's
168:10 - per se but it should have a text of dash
168:15 - eight 6188
168:16 - fff okay well then there's a c amazing
168:19 - then after that closing div let's have a
168:22 - break here and let's put the rest of the
168:24 - divs so the rest of the divs it's all
168:26 - part of the chat and this div is going
168:28 - to be the chat container itself so what
168:30 - do we do to get it to be the track
168:31 - container is styles.chat container okay
168:34 - within that same div let's do a class
168:37 - name this one will be the styles dot
168:39 - flex between once more and in the flex
168:41 - between right we'll have this div which
168:44 - should be flex container styles dot flex
168:47 - or netflix container flex center and
168:50 - flux center is going to have a div no
168:52 - name needed with containing the image of
168:55 - the sheba beautiful shiba inu so the
168:58 - source is going to be shiva and again
169:00 - something i just want to start doing now
169:02 - is i want to see proof that you guys are
169:04 - actually watching the whole thing and
169:05 - not skipping around so if you're
169:07 - watching to this part of the video
169:08 - congratulations you made it this far we
169:10 - only have the smart contract
169:12 - functionality a little bit of front end
169:14 - and then we're done so if you're
169:15 - watching this you're at this point with
169:17 - me right now and you're almost done go
169:18 - ahead and comment down below okay so if
169:21 - you comment shiva down below i know you
169:22 - finished it so that's gonna be our
169:23 - little secret so let's see how many
169:25 - people come in chiba after that image
169:27 - what we can do is it's going to be
169:28 - closing div and then after that closing
169:31 - div there's another one and then it's
169:33 - class name text left okay and text left
169:36 - and let me just add this a margin right
169:38 - ten cool and there's going to be this
169:40 - little b here which is just track if you
169:42 - want you can put this make this your own
169:44 - this can be like your name so this would
169:45 - be lance for me or kazi or if there's
169:48 - any um ables watching right this is how
169:50 - you this is where you can put your name
169:51 - so i'll put lance why not david already
169:54 - put his name so i'm going to put my name
169:55 - so let's put lent and let's go
169:58 - underneath here we'll have a p tag with
170:00 - the class name of text dash gray dash
170:04 - 400 and here for the p tag you could put
170:07 - your at and if you guys want to know
170:09 - it's all it's just wants that's my tag
170:12 - will be to put your own then it's going
170:14 - to be closing div closing div all right
170:16 - and then within here okay closing div
170:18 - closing div within here let's do a class
170:20 - name flex center oops let's flex it in
170:22 - the center and let's add another div
170:24 - here this div is going to have a class
170:27 - name and this one's a little tricky all
170:29 - right essentially if the class name is
170:31 - not bullish value the opposite then i
170:34 - want the styles let me put this here and
170:37 - let's just format it so you can see it a
170:39 - little better okay cool so not bullish
170:41 - value then the styles dot bullish label
170:45 - and then here we'll have the or then we
170:47 - can do styles dot active bullish label
170:51 - okay cool and after we do that we can
170:53 - add on click this is still part of that
170:55 - opening div by the way and what we want
170:57 - is that function i think i made it
170:59 - earlier yep set bullish value this is
171:01 - where it's gonna go so here we can price
171:03 - set or make it like this so it doesn't
171:05 - run right away except bullish value and
171:07 - you want to set it to true okay so when
171:09 - i click bullish value setting you set
171:11 - the bullish value to true constant so
171:12 - then it's just the closing like carrot
171:15 - for the opening div and what you want to
171:18 - add here now is the chevron up so add
171:22 - the chevron up here because we're
171:23 - bullish and we think everything is going
171:25 - to the moon and for the fill we can just
171:27 - do a hashtag one seven c seven
171:31 - eight
171:32 - okay for this we're gonna have small the
171:34 - class name will be ml-1 and then we're
171:38 - going to have bullish here okay then
171:40 - we're going to do end nbsp and bsp cool
171:43 - and then after that another div if you
171:45 - guessed it this is gonna be similar to
171:47 - the one we just did but for the bearish
171:49 - one so i'm gonna add space here class
171:51 - name is curly brackets so if it is
171:54 - bullish value right not the other way
171:56 - where it's not then i wanna load
171:58 - styles.bearishlabel
172:00 - and if not then i want to do act styles
172:03 - that active bearish label right so this
172:05 - is how we do it so we can make
172:07 - conditional class names right before it
172:09 - was like condition and conditional
172:10 - rendering of components this is how we
172:12 - can make the class names conditional
172:14 - okay and then after the class name let's
172:17 - add our on click right if the last one
172:19 - we set to false what should this one be
172:21 - exactly you got it this one's gonna be
172:23 - sket bullish value of two false you guys
172:25 - are crushing it yeah if you understood
172:26 - what i'm saying we speak the same
172:28 - language so this should be instead of
172:29 - chevron up chevron down with a fill and
172:33 - the fill of this one is going to be not
172:35 - that quotes hashtag a5 to be to be yeah
172:40 - all right now cool and then we'll add
172:42 - another class here small with the class
172:44 - name of
172:46 - ml-1 and we can just do a bearish here
172:49 - awesome then it should be closing div
172:51 - closing div closing div holding down
172:53 - close and dip and then awesome here a
172:56 - couple more things to do we're gonna
172:57 - have another div class name let's just
172:59 - flex on them and after we flex on them
173:00 - let's make a div within that let's make
173:02 - a div within there and let's just do a
173:03 - class name flex items dash center text
173:07 - make the text green oh it's because of
173:09 - the quotes isn't it green dash 600 okay
173:13 - and then let's add a chevron up here
173:16 - with the same fill as before all right
173:18 - which same fill is before actually no
173:21 - the fill is actually different now that
173:22 - i'm looking at it should be hashtag 22
173:24 - bc 64. okay that's the fill and then we
173:27 - have another small here small and the
173:29 - class name of the small is ml-1 and we
173:32 - could say bullish yeah so for this part
173:35 - we want to do if it's chevron up it
173:38 - should be bullish right closing div and
173:40 - then we're going to add another and here
173:43 - and nba and bsp perfect cool so the next
173:46 - thing i want to do after that is another
173:48 - div here let's put the class name of
173:50 - flex items items dash center text dash
173:54 - red and the red color should be 500 okay
173:57 - and then that we have the chevron down
174:00 - the fill for this one is gonna be an a
174:03 - five to b to b just like before cool and
174:06 - then we're going to add that small class
174:08 - again yep of the ml-1 yes sir and then
174:12 - we're going to have a bearish small here
174:14 - yep cool closing div closing div here
174:17 - we'll have the input which is
174:18 - self-closing and i'll just have a class
174:20 - name of styles.input and then you can
174:22 - put a placeholder in here and the
174:24 - placeholder should just indicate what
174:26 - you should put in the input which is
174:27 - always going to be what's happening on
174:30 - btc or whatever the value is always
174:33 - going to be message and what we want
174:34 - with this input is every time we type
174:36 - the input field we should be recording
174:39 - or capturing that input in a state which
174:42 - we're setting up earlier so we can put e
174:44 - here for event and set the message to
174:47 - e.target.value all right just to
174:49 - visualize it if i were to type hello h
174:53 - the on change is triggering and i'm
174:54 - setting the state so the state of
174:56 - message is going to be what guys yes
174:59 - it's just going to be h if i press e
175:01 - again on change triggers it's going to
175:03 - grab e to target that value which is h e
175:05 - setting updating the state of message to
175:07 - h e alright so the idea is when i post i
175:10 - just have to take whatever the state is
175:11 - for this and then post that all right so
175:13 - that's what we're setting up here
175:15 - e.target.value
175:16 - is how we can get it okay then it's the
175:18 - closing tag for the input now let's make
175:21 - the button or at least the container for
175:22 - the button for it so that's why i'll say
175:24 - styles.postbuttoncontainer
175:27 - and here again we're making the button
175:28 - so it's up close and we're going to have
175:31 - label equals post all right and this
175:34 - actually doesn't have to be capital and
175:35 - then we have on press all right that's
175:37 - an interesting one i'm going to send
175:39 - message and if you notice guys this is
175:41 - actually a component that doesn't exist
175:43 - with a function that doesn't exist yet
175:46 - remember we're not doing functionality
175:47 - just the front end so don't worry about
175:48 - that cool so over here um make a comment
175:52 - here and i'll say basically the chat
175:54 - format the messages and also we want to
175:58 - insert the chat card component so
176:01 - there's a chat card component that goes
176:03 - into this okay so if i hit save there
176:05 - you go so this should be it for the chat
176:08 - let's see if we can it's not going to be
176:10 - working but it should see some front end
176:11 - for it so i'm gonna go back to info
176:13 - comment this guy up let's actually get
176:15 - the chat in place by importing it import
176:18 - chat from there hit save voila there she
176:21 - is and there is your handle that you
176:22 - imported bullish or bears hey it's
176:25 - working nice the arrow though is a
176:26 - little funny so i think i have to go
176:28 - back and fix that okay yeah so there's
176:30 - that funny little error thing but it's
176:31 - fixed when i click on it that's probably
176:32 - because if i go to bearish label the
176:35 - item
176:36 - center i see okay cool save that bam and
176:38 - now we're good to go we're gucci another
176:40 - thing that just happened is when i have
176:42 - a message there's some ui elements over
176:45 - here that should pop up it should you
176:46 - should see the chat and that's what the
176:48 - chat card is over here and there's also
176:51 - the button that we need to work on next
176:53 - all right cool so we're gonna do the
176:54 - button and the check card in one go so
176:57 - for the button super simple just gonna
176:59 - make another component and literally
177:01 - call it button.js cool and button.js all
177:04 - you gotta do is come over here rafce and
177:07 - the button what all it is doing is this
177:10 - post button right here notice how we
177:12 - don't have that well we're going to
177:13 - include it in this one so the post
177:15 - button is just going to be this with
177:18 - const styles the styling for this is
177:21 - super minimal just the button and we can
177:23 - just say bg dash this and the point of
177:27 - us making this into component is if i
177:29 - ever make a post or just a button
177:31 - anywhere else i can just use this button
177:33 - component and just pass in the name
177:35 - especially if you know that the styling
177:37 - is going to be consistent so that's what
177:38 - i'm doing and showing you guys right
177:40 - here so that's the background px-5 and
177:43 - py dash and we'll do a rounded dash
177:45 - launch oh that's it that's not so bad
177:47 - then for the button if you remember it
177:48 - takes in two things it took in the label
177:51 - of the button which we know is post you
177:53 - see that and this on press it's not
177:55 - actually an event that's just still the
177:57 - prop name passing down a function that
177:59 - doesn't exist yet okay so let's take
178:01 - that into account and the structure the
178:03 - props that we're getting and that's
178:05 - label and on press this way i don't have
178:07 - to say post or prop that label you with
178:10 - me cool so then for the return oliver
178:12 - returning is literally a button right
178:15 - and that button is just gonna have a
178:17 - class name of the styles that button and
178:19 - it's gonna have the on click right now
178:22 - that event is happening on click of the
178:25 - on press or whatever i passed down
178:28 - and
178:28 - the label for the button is simply just
178:31 - going to be like a label like this okay
178:34 - all right so that's the button let's go
178:36 - ahead to my chat do one of these bring
178:39 - that guy out there's no on press yet so
178:42 - let's just make an empty one so if i go
178:44 - up to here and say const send message
178:48 - all right we'll make on this we'll make
178:49 - this functionality later on but for now
178:51 - we can just leave the plane alright and
178:52 - just to not confuse you guys it's not
178:54 - there yet
178:55 - actually no we should keep it there also
178:56 - be undefined awesome cool so we got this
178:59 - guy out what we need to do next is
179:01 - import that button import button not
179:04 - from web3 ui kit but from forward slash
179:06 - but okay cool now going back to this hey
179:09 - there she is there's the post i'm liking
179:10 - this a lot better now that there's a
179:12 - post button
179:13 - okay let's go i'm excited guys we're
179:15 - almost done and the last thing is the
179:17 - chat card which is gonna be a little bit
179:19 - more styling okay and then for the chat
179:21 - card let's just make that component as
179:23 - well new file chat stamp there's a lot
179:25 - of components here it's gonna be chat
179:27 - card chat card.js okay rafc oops not
179:31 - rfce boom there we go now it's there i
179:34 - think for the button i didn't fully
179:36 - finish it out before i press tab so this
179:38 - is our afc this is rafc if you want to
179:41 - know the difference the export is in
179:42 - line here this one is export default
179:45 - cool doesn't really matter as long as
179:46 - you're importing it correctly okay cool
179:48 - so what we want to do is import a couple
179:51 - of svgs from here let's get the comment
179:53 - so that should be the assets slash svg
179:57 - comment yep we have that and let's
179:59 - import the heart from same place dot
180:02 - forward slash assets svg
180:04 - heart okay i don't need a comma here
180:07 - import more horizontal more har
180:10 - santo from forward slash assets forward
180:13 - slash svg slash more horizontal we got
180:17 - it we got a share one oops we got share
180:20 - we also got bearish oops sorry now
180:22 - remove that part so we also got share
180:24 - from assets slash svg
180:28 - and we also have import image from next
180:32 - image there you go okay cool that's
180:34 - gonna be it for now there is two more
180:36 - things you should import but i'll talk
180:37 - about it when we get there what i'm
180:38 - going to do next is set up the styling
180:40 - and for the styles let's do post action
180:42 - that's a div that i'm going to make
180:44 - later which is going to have properties
180:46 - of flex items center then we have check
180:48 - now that check card this check card and
180:50 - that's gonna have border with dash b
180:53 - border dash gray dash s700 pdb dash and
180:57 - then mb-6 all right cool chat card
181:01 - wrapper was next okay all that's gonna
181:03 - have is flex items dash center justify
181:06 - dash between all right and then after
181:08 - that it will have a flex center which
181:10 - will be a flex items dash center and
181:13 - gray text text gray
181:16 - 400 and we'll do an ml-2 and we'll do a
181:18 - 400 and text gray 400 flex between flex
181:23 - justify between then we're going to do a
181:25 - message content which will just be my
181:29 - four empty sorry guys i didn't notice
181:31 - that menu was up there how's that better
181:33 - cool then we'll do a labels container
181:36 - and we'll do a flex w dash full with an
181:39 - ml-3 awesome labels contain i think
181:42 - that's it yep that's going to be it for
181:43 - the styling if i go save here we didn't
181:46 - see this but later on we're going to be
181:47 - passing props to this chat card based on
181:51 - the formatted messages so what i want to
181:53 - do is just set a lot of that up right
181:55 - now so to set that up let's destructure
181:57 - it go over here and we'll do like a
181:59 - content by default is going to be empty
182:03 - string time stamp oops empty string the
182:06 - timestamp that we passed down sender
182:08 - we're passing down we're going to pass
182:10 - down that's bullish state whether that's
182:12 - true or not the sender avatar the likes
182:15 - and the comments all right so cool there
182:18 - you go from there let's start working on
182:20 - the return so let's set it up so the
182:22 - parent div that i want to put here is
182:24 - going to be a styles chat card all right
182:27 - that which should be pretty obvious from
182:28 - here we can set up the wrapper chat card
182:31 - wrapper and then within that div it's
182:33 - always happens within that div we're
182:36 - gonna have the
182:37 - styles.flex center yep and then in here
182:40 - div with no name okay and within that
182:43 - div we'll have the image that we
182:46 - imported and the image will just have
182:49 - the person's avatar
182:52 - which will be 40 and
182:54 - height equals 40 and the source is equal
182:58 - to sender avatar and when we do this
183:00 - it's gonna be no picture because sender
183:02 - avatar is currently undefined we're not
183:04 - actually passing down anything but when
183:06 - we do it's gonna make more sense okay
183:08 - we're almost done with this part class
183:09 - name it's just gonna be uh this rounded
183:11 - fold to get a nice rounded image and the
183:13 - alt can just be uh avatar okay cool next
183:17 - just be closing div that's it for that
183:20 - okay coming back below here if i do an
183:22 - alt c you guys should be able to see a
183:24 - little bit better and now if i do a div
183:26 - with the class name styles dot labels
183:30 - container this will have the sender like
183:32 - whoever sent that message again will be
183:34 - undefined because it's not there so this
183:37 - will have some nice spacing and i want
183:39 - to put this nice dot with the space here
183:42 - cool all right and
183:44 - yeah let me see ready oh no it should be
183:47 - center and then it should be space and
183:49 - then dot and then another one there that
183:51 - makes more sense cool after that we'll
183:53 - have a span tag here give me one line
183:55 - class name of this will be the gray one
183:58 - specifically styles dot gray 400 and
184:02 - then that's where you put the time stamp
184:04 - so when we pull all the images each card
184:06 - should have the timestamp of when that
184:08 - image was sent so that's something to
184:10 - keep in mind for later and we're gonna
184:11 - do the same thing here cool and we're
184:13 - gonna pass in if they were bullish or
184:15 - not so if they are there's these two
184:17 - buttons that i want to set up they don't
184:19 - exist yet so we're gonna have to make it
184:21 - later so if they're bullish there's
184:23 - gonna be like a bullish filled button
184:25 - and if they're not bullish then they're
184:28 - gonna be bearish so there's a bearish
184:30 - filled button again these two things
184:32 - don't exist yet so i'm gonna comment
184:34 - them out okay dave closing div then we
184:36 - can do a more horizontal here and then
184:38 - closing div and then the important part
184:40 - is this p tag because now we're getting
184:42 - into the like the message content and
184:44 - that's why this div is actually called
184:46 - uh styles styles dot message content all
184:51 - right do i have message content i do all
184:53 - right that's good to know and the
184:54 - content of it will just be the content
184:56 - that i pass in which by default i put as
184:58 - quotes if there's none cool leo so
185:01 - that's the p tag we got div here and for
185:03 - the div this will be the flex between
185:05 - and within that flex between div i want
185:08 - to put another one with the class name
185:10 - of post action so styles dot post action
185:14 - and there's gonna be something called
185:16 - commenting which is something that we're
185:18 - going to have to set up as well again
185:20 - doesn't exist yet then it's going to be
185:22 - a p tag class name styles.great text
185:25 - then great text will just have the
185:27 - comments of that post cool and let's do
185:29 - another div here this is another uh
185:31 - style step class styles that post action
185:34 - okay p tag class name styles dot gray
185:38 - text and the gray text will just have
185:40 - the likes all right oh actually do i
185:41 - have a comment oh i do i do have a svg
185:44 - comment i don't it does exist i just
185:45 - started thinking wait we do have comment
185:47 - we have heart we're good and there's
185:48 - like one more post action that's going
185:50 - to be that share icon so here we just
185:53 - have to do a share yep and instead of
185:56 - likes this can just be share yay cool
185:58 - then it's going to be closing div close
186:00 - div close div and that is the chat card
186:02 - so really we just have to make two
186:04 - things the bullish button and the
186:06 - bearish field button so let's just do
186:07 - that real quick so to get started making
186:09 - this bullish
186:11 - bearish and bullish field button what
186:13 - i'll do is go to components and you can
186:16 - organize this you don't have to but keep
186:18 - it clean we can just do and inside the
186:20 - buttons folder we'll have all our button
186:22 - component which will be bearish filled
186:24 - dot js you know what to do here yep
186:27 - exactly and let's just import the
186:30 - chevron down which i've run down from i
186:32 - love that it suggests that now that's
186:34 - awesome cool in terms of like divs what
186:37 - we could do is
186:38 - something like this cool class name who
186:41 - shall be just a flex property here with
186:44 - an item center want to center it
186:45 - horizontally we'll have the chevron down
186:47 - and that fill color that we used which
186:50 - is a 2 or 92 a5 2 b2b business to
186:55 - business cool and uh stop closing
186:57 - awesome all right from here let's do a
186:59 - small and this is where we do that class
187:01 - name thing with the ml and the text
187:04 - color which should just be something
187:06 - we've done before which was the i
187:08 - believe was hashtag e a
187:11 - three nine four three a sports three
187:14 - nine or three cool small bearish this is
187:17 - the bearish one right yeah closing div
187:19 - that's good to go so it's the same thing
187:21 - for bullish so what we're gonna have to
187:23 - do is this okay so in buttons new file
187:26 - bullish build.js cool and instead of
187:30 - chevron down let's do chevron up and for
187:34 - this guy race enter class name same
187:36 - thing flex property with an item center
187:39 - and within here chevron up with the fill
187:42 - attribute of hashtag one seven c seven
187:46 - eight four that's it and then oops i
187:48 - just want the closing div and then small
187:51 - with the empty stuff or the ml i mean ml
187:54 - with the text of the same color oh it's
187:56 - gonna be hashtag one
187:58 - seven c seven and we say bullish okay
188:01 - save that now what we can do is comment
188:04 - this bad boy out import those two things
188:07 - import bearish field from bearish field
188:10 - and import bullish as well so i'll hit
188:13 - save see this is not coming out to
188:15 - failed oh triple l there we go save that
188:18 - in there and if we go to chat if i
188:20 - comment chat card out oops that's not it
188:23 - gotta fix this guy then insert check
188:26 - card for message all right so we're
188:28 - probably gonna map through something or
188:30 - format something so keep that in mind
188:32 - we'll just have one check card here to
188:33 - test it out let's do import chat card
188:37 - save see any issues oh there's no source
188:40 - property oh yeah no source property
188:43 - required that's right so for source it's
188:46 - the sender avatar but none of that
188:48 - exists yet so i guess what we could do
188:50 - is this we can make it so temporarily
188:52 - source is equal to quotes and uh put
188:55 - this guy in there what is it like that
188:57 - can i parse this cool so we just need a
188:59 - sender avatar quote here actually don't
189:02 - even need to do that all right let's
189:03 - just try that again okay cool so if i
189:05 - said save it should be like a image is
189:07 - required to source property that's fine
189:09 - what we could do is go to unsplash i
189:12 - already have it saved there's a dog
189:13 - which one do you want to be let's be
189:15 - this guy oh wow copy image dress it's
189:17 - going to have a lot of stock photos in
189:19 - it that's totally fine what we really
189:21 - want is just to go to
189:23 - chat card where is our image instead we
189:26 - can just say quotes oh not a valid host
189:29 - name oh man i forgot that we have to
189:32 - update our next config let's see is
189:34 - there an image i can use s2
189:36 - coinmarketcap.com let's go to here okay
189:39 - let's just use something that i already
189:41 - know should work which is just the
189:42 - assets does that work failed to parse
189:45 - what if i just import
189:47 - shiba from that same file let's go to
189:50 - the assets oh no that should work shibo
189:52 - png png and then we can say shiba there
189:55 - we go awesome there it is and notice how
189:58 - there's nothing over here because it
189:59 - doesn't know how many comments there are
190:00 - and it doesn't know how many likes there
190:01 - are and there's no message but if we did
190:04 - have message content it's here right
190:06 - hello
190:08 - world there it is so now you can see
190:10 - hello world what needs to be here is the
190:12 - sender but as you can see if i had
190:13 - multiple chat cards look what happens
190:15 - guys going to chat try to imagine if i
190:18 - had multiple of these so let's do check
190:20 - card save boom so now i can have a whole
190:22 - chat different people different likes
190:25 - and comments on each post and there we
190:27 - have the front end of our chat app
190:30 - awesome so i'm gonna do is just erase
190:31 - this hit save and let's move on to the
190:33 - next thing okay next thing you gotta
190:35 - think about is if you remember it on the
190:37 - finished version that's what happened
190:39 - when i click the coin itself but if i go
190:41 - and hover over the price there's also
190:44 - this price section here that we should
190:46 - set up so to get that going what we need
190:48 - to do is go to
190:51 - our menu and remember how we set up
190:53 - currencies and we got info it's gonna be
190:55 - literally very similar so if you look at
190:58 - the url for this it's currency
191:00 - price so that what that tells me is that
191:02 - we need to make the price js and get
191:05 - everything we need so let's make
191:06 - price.js and price.js if i just do like
191:10 - a const price equals something like this
191:13 - and we can just add the export default
191:17 - price now we're good to go all right so
191:19 - if this exists which means we can go to
191:22 - slash currencies slash price all right
191:24 - test this by having a return here and
191:27 - the return can say hello save now if i
191:30 - go to slash price hit enter or will i
191:32 - see oh hello is not defined oops let's
191:35 - put it into a div now we can say hello
191:36 - because it thinks it's a variable and
191:38 - there you go so now we loaded that page
191:40 - that's all you have to do to make
191:41 - another page on next js which is
191:44 - beautiful what we'll do next is
191:46 - literally set up the price page so what
191:49 - we need to set this up it's essentially
191:50 - the same thing and what i mean by that
191:52 - is there should be an import here and
191:54 - let's import the hooks that we'll need
191:56 - which was use state and use effect from
191:59 - react and what we need also is import
192:02 - let's see import header oops header from
192:06 - here because it's going to also use a
192:07 - header there it is components dance find
192:10 - it header cool all right once that's
192:12 - done i think we can
192:14 - save here and there's actually no
192:16 - styling we need to do but we do need to
192:18 - use this use effect and set up the
192:20 - states so to set the states literally
192:22 - the same as info so if i do uh control p
192:25 - go to info click on it this is
192:27 - everything we're going to need same
192:28 - thing and also the get url data is
192:31 - literally the same okay let me just copy
192:33 - this real quick and as i'm about to copy
192:35 - it one thing i noticed is the price for
192:38 - this one should just be number just to
192:40 - get the formatting of it correct number
192:42 - there you go that looks way better to me
192:45 - and the number should actually end here
192:47 - yep there you go this should be a number
192:49 - get the price format it to local string
192:51 - nice cool so we can get that and all of
192:54 - this because price is going to be very
192:56 - similar it is looking at the programs of
193:00 - the url but we clicked which we're
193:02 - making dynamic we're creating a dynamic
193:04 - page getting all this information and
193:06 - all we need to do now is set up the divs
193:08 - or the jsx rather and what we need to do
193:10 - for that is just include it's actually
193:12 - less than the info page it's just the
193:14 - header with a component that's called
193:17 - coin details right again doesn't exist
193:19 - just yet coin name will be coin name uh
193:22 - price will be price the coin symbol will
193:26 - end up being coin okay and is that
193:29 - everything we'll need i think so cool so
193:31 - again this doesn't exist yet so let's go
193:33 - ahead and make it components okay and
193:36 - then to make it what i'm gonna do is in
193:38 - the components folder new file and it's
193:40 - called a coin details i believe yeah
193:43 - coindetails.js okay coindetails.js the
193:46 - drill awesome hit save then we can also
193:49 - hit save over here and what we could do
193:52 - next is for the coin detail let's import
193:54 - everything we'll need which i'll tell
193:56 - you is just import image from next image
193:59 - okay and then we'll import rates look
194:01 - how much you're used to we're getting
194:02 - out of rate from dot forward slash
194:05 - cmc table i believe oh okay i see it cmc
194:09 - table oops cmc table let's get the rate
194:11 - cool next we can get import the coins
194:15 - remember that view coin details or not
194:17 - view coin details the coin icon we're
194:19 - going to make that literally again so
194:21 - we're going to do a from btc or import
194:24 - btc from
194:25 - forward slash assets slash
194:28 - btc.png literally if you want to make
194:30 - this process faster we can take from
194:32 - here so what we want from this is not
194:36 - info but i think it should be the price
194:38 - converter yes this is what we need so we
194:40 - need to copy all of this and then if i
194:43 - go to price what did i just do okay i'm
194:45 - doing coin details though so go in
194:47 - details it's the same path
194:50 - yeah so this is the same so with this we
194:52 - can erase yep cool we already have next
194:54 - image as well boom and another thing we
194:57 - can import see another thing we can
194:59 - import is the coin icon function which
195:02 - is going to be the same as info as well
195:04 - i mean the price converter as well so
195:06 - let's import the coin icon function copy
195:08 - all right and the size of this is going
195:10 - to be the same so that's good so coin
195:12 - details paste there we go we're using
195:14 - all of it except for rate that's fine
195:16 - and while we're here that's the function
195:19 - that we're going to be using to get the
195:20 - image let's do the styling next so click
195:23 - on styles equals object the first div
195:26 - that we're going to label is coin
195:28 - details coin details just has a minimum
195:30 - height screen and the text of that's
195:33 - white okay next is the coin details link
195:36 - coin details links which will just have
195:38 - a flex property mt-3 collect stash wrap
195:41 - gray button mr-3 and b-b-g-slate
195:46 - d-800 px-3 py-one
195:50 - and the rounded dash excel all right
195:52 - this is a great project for those guys
195:54 - practicing front end this is very front
195:56 - end heavy border left ml-10
196:00 - dash pl-5
196:01 - border dash one and a border or gray and
196:05 - eight hundred okay then we have a title
196:07 - one the title is just gonna have gray
196:09 - text and it's gonna be 400 with the
196:12 - white space
196:13 - of no wrap margin of two boom all right
196:17 - so then there's also coin details
196:19 - wrapper right that one is just going to
196:22 - have coin dash details
196:24 - flex
196:25 - max with w with screen
196:29 - excel that's the size that we'll use
196:31 - then we want a margin auto and a pt of
196:34 - 20 okay then we got coin symbol this one
196:37 - we can size it like this g slate as the
196:40 - background and we have the flex property
196:42 - so that we can give it an item center
196:44 - and a px-2 and a rounded dash excel okay
196:47 - after the coin symbol let's style the
196:49 - coin info and that will also have a flex
196:52 - property so that we can give it a
196:54 - justify between and
196:56 - mt-10 p-4
196:59 - a border dash t or border dash gray
197:03 - actually 800 as well and then we can do
197:05 - a coin rates with uh w dash full flex
197:09 - property so that we can do an item start
197:11 - justify between and then we can do a
197:14 - flex between okay so it's flex justify
197:18 - dash between awesome so that's all the
197:20 - styling feel free to pause it if you
197:22 - just missed any steps or if you're not
197:24 - sure where your styling is wrong make
197:26 - sure it's all spelled correctly and then
197:27 - the coin details if you notice it takes
197:30 - in a couple properties so if i go back
197:31 - to price it takes in these three props
197:34 - let's destructure those three over here
197:36 - and it was just a coin name coin symbol
197:40 - and not coin price just price awesome
197:42 - and then it's just this function right
197:44 - here pretty long main thing now is just
197:46 - the jsx which we can set up now cool so
197:50 - funny enough there's actually a main div
197:52 - here main tag i want to decide to use
197:54 - that instead okay and then there's a div
197:56 - that has no name which then has the
197:58 - class name of the coin details wrapper
198:02 - so this is styles oops styles dot coin
198:06 - details wrapper and if this is the
198:08 - wrapper that's the wrapper this is the
198:10 - main so styles dot coin details cool
198:13 - okay and then within the coin details
198:16 - wrapper we have this div which will just
198:19 - have a flex property and we could do it
198:22 - column that's the direction and w fit
198:25 - okay and there's a div class name of
198:27 - flex items dash center here we can
198:30 - insert that coin icon function because
198:33 - depending on the dynamic url that comes
198:36 - up like whatever i clicked that should
198:38 - be the corresponding icon so let's
198:40 - actually get it by calling the function
198:42 - okay then we can add a anonymous div
198:44 - here and with the class name of justflex
198:47 - and we can have a p tag with the
198:49 - text-three excel and the coin name cool
198:53 - and there's a couple of spacing things
198:56 - here so i'm just going to paste that in
198:57 - there we go okay then there's another
198:59 - p-type p tag here this one i have the
199:01 - styles.coin
199:02 - symbol one and here is where the coin
199:05 - symbol will actually go so if it's
199:06 - bitcoin it's gonna be btc that makes
199:08 - sense closing div closing div and then
199:11 - we have a couple of breaks here br for
199:13 - spacing so copy this and it should be
199:16 - two three four five about five is good
199:20 - cool that way i can just get pretty
199:22 - precise by just adding that okay then we
199:24 - can do a class name of styles dot coin
199:27 - details and for here this we're gonna
199:30 - have a bunch of buttons so let's do a
199:32 - div class name styles dot gray button
199:35 - and we can do a solana.com okay and i
199:38 - wanted this a couple of times and it's
199:39 - not all gonna be solano.com but the div
199:41 - that we use is the same so it's gonna be
199:43 - two
199:44 - three four five two four five six okay
199:48 - cool these are all gray buttons the
199:50 - content within them is different it says
199:52 - explorers community chat source code or
199:56 - it doesn't have to be camel case so it's
199:57 - good and the last one is the white paper
200:00 - okay again these don't actually click
200:02 - into anything but if you wanted to make
200:03 - them work you can then we can do br here
200:05 - and we can add uh topics just the word
200:08 - topics here oops topics cool so that was
200:10 - like the coin details uh this actually
200:13 - bitcoin links cool and now we could just
200:16 - copy this because i'm going to do it
200:18 - again here okay and this is coin details
200:21 - links and topics all right so it has
200:23 - like two css things so we can give it an
200:26 - array so it's not going to yell at me so
200:28 - there's two class names style.com
200:30 - details links and topics and there's
200:33 - only four buttons here so one two three
200:35 - four on the topic section and the
200:38 - content of each div is going to be
200:39 - different it's not solano.com it's going
200:42 - to be mineable and then p-o-w
200:46 - 256 with a store of value okay cool then
200:51 - for the div here we'll do a class name
200:53 - of
200:54 - ml ml16 then we'll have another div here
200:57 - with the class name of let's see this
201:00 - one actually should be a class name so
201:02 - this would be styles.coinright
201:04 - coinrights oopscoin rights okay there's
201:07 - a div and inside of that div we have a p
201:09 - type class name text dash gray dash 400
201:14 - and it can just have the coin name and
201:17 - parentheses coin symbol anywhere you can
201:20 - reuse it go ahead and reuse it so after
201:22 - that closing p another div this one flex
201:24 - property my three and that will have an
201:27 - h1 text of dash for xl and the h1 here
201:31 - we'll just say price okay and i also
201:34 - want my rate filled here right so rate
201:37 - filled and again this might not exist so
201:39 - common to that i don't think i have that
201:41 - asset yet yeah so there's going to be
201:43 - some things that don't exist yet that
201:44 - i'm going to import later so it's rate
201:46 - filled closing div and then another div
201:48 - here okay yeah and then for this div the
201:50 - class name will just be flex items
201:53 - start which will have a p type and this
201:56 - one will have class name text grade 400
201:59 - as well okay but then in this p tag it's
202:01 - just gonna have the static code of
202:04 - 5.26 static not dynamic put space here
202:07 - uh some and we got to put these boys and
202:10 - let's make use of our rate finally and
202:12 - if you remember how rate works we got to
202:13 - pass in if it's increment or not and
202:15 - this one will be false it's pretty
202:17 - static and the number also static
202:19 - 0.53 percent
202:22 - end quote okay cool closing div is fine
202:25 - then we'll do a div here class name flex
202:27 - items dash start p tag with a class name
202:31 - of text gray 400 and again it's the more
202:34 - static stuff here just for show btc add
202:37 - in those guys again and we can have the
202:39 - rate this one will make the s increment
202:42 - to be true so it's going to go up and
202:43 - the rate of this one is going to be
202:46 - equal to 0.99 percent end quote and that
202:51 - should just be a closing div after cool
202:53 - closing div closing div boom another div
202:55 - here with the class name
202:58 - flex and then we'll have the drop down
203:00 - button right there's going to be
203:01 - something called trap down button and
203:04 - again it doesn't exist yet and the label
203:06 - for it is going to be by so that means
203:08 - we're making a couple other buttons here
203:09 - or components that we are going to set
203:11 - up to reuse later okay so i want a
203:13 - button for buy i want another button
203:15 - that i can use for exchange gaming and
203:18 - then something for earn crypto so
203:19 - exchange gaming earn crypto these are
203:22 - all buttons and since just to market for
203:25 - myself to make it later so closing div
203:28 - closing div and let's add another one
203:32 - this one will be the info one styles
203:34 - that or actually i didn't think are
203:36 - called info let me just double check
203:37 - coin yeah coin info which will take a
203:40 - div which will take another div and
203:42 - we'll have a small with class name
203:44 - styles.title
203:46 - and we'll say market cap all right cool
203:49 - and then market cap closing div then
203:52 - another small okay and then here i have
203:55 - a number you can actually put this
203:56 - number as much as you want but it's just
203:58 - supposed to represent the market cap and
204:01 - this is what i have here it's religious
204:03 - for aesthetic but then there's a rate
204:04 - with an increment and that looks pretty
204:06 - good to me so let's make it true let's
204:08 - do a rate equals quotes of 0.53 percent
204:13 - okay closing div and now let's add a
204:15 - couple borders here so this one will be
204:17 - the styles that border left small which
204:21 - will have a class name of the title so
204:24 - let's use the title here styles
204:25 - titleherestyles.title that exists and we
204:27 - can type in fully diluted market cap
204:31 - awesome so closing small tag closing div
204:35 - and then let's add another small and for
204:37 - this small it's another big number to
204:39 - represent the fully diluted market cap
204:41 - which i have right there feel free to
204:43 - copy it or just put in whatever number
204:45 - for now and the rate component again and
204:48 - this increment will say true and for the
204:50 - rate it's also the same again this is
204:53 - all just custom data that you could do
204:55 - to put your to make your app look really
204:56 - nice okay so that's the right clothing
204:58 - div and let's add another one this one
205:00 - will also be a styles that border left
205:03 - so styles dots border left okay which
205:05 - takes div which takes another div which
205:08 - takes a small okay small again just
205:10 - takes styles that title okay and for the
205:13 - style of the title it's just going to be
205:14 - volume here with some spacing and
205:17 - another small class name of the coin
205:20 - symbol that's the key here point and now
205:22 - we can close it off let's put btc here
205:24 - so it should be btc closing small
205:27 - closing div all right and then after
205:29 - that very closing div there should be
205:31 - another small here and this one again is
205:33 - just a big number that represents the
205:37 - title here so there you go that's the
205:38 - random big number that i have let's put
205:40 - a rate is increment in there for true
205:43 - rate is equal to quotes it's going to be
205:46 - the
205:47 - 0.92 percent one okay so close div then
205:51 - br then it's going to be after the break
205:53 - we should have another div here actually
205:55 - okay so after that div another div and
205:58 - that will be the small lot of jsx on
206:00 - this one and it's all just for styling
206:02 - just like coin market cap so styles dot
206:05 - title and then we can do a volume slash
206:08 - market cap okay cool and let us know
206:10 - what you prefer like do you prefer for
206:11 - me to go through all the front end or do
206:13 - you just care about doing the smart
206:15 - contracts i personally like to go
206:16 - through the whole thing so you have a
206:18 - full project we're open to feedback as
206:20 - well so here we go small
206:23 - 0.03315 closing div closing div couple
206:26 - more some space here so i can
206:28 - differentiate it let's do class name
206:30 - again styles that border left if you're
206:33 - wondering again just take a little quick
206:35 - break there is all of this stuff right
206:37 - here this is literally what we're
206:38 - setting up right the volume market cap
206:41 - the max supply the total supply so
206:42 - that's what we have to work on next okay
206:44 - all these things so on this border left
206:46 - let's see where we're at the pattern is
206:48 - dave and another small that has the
206:50 - class name of title yep and the next one
206:53 - i want to write is the circulating
206:55 - supply so that is small that is div and
206:58 - then there's a small that wasn't very
206:59 - small and the number that i have for
207:01 - this one is another big number which
207:03 - really doesn't matter but this is what i
207:05 - have for the number and then put btc
207:07 - after it then there's a closing div then
207:09 - there's a break okay cool and after that
207:11 - break there is div with div but this
207:14 - inner div has the class name of the flex
207:16 - between all right something different
207:18 - from breaking that pattern wake up guys
207:20 - there's a new pattern styles that flex
207:22 - between which has a div which has a
207:23 - small okay cool at any point i'm going
207:25 - too fast remember feel free to pause the
207:27 - video or you can just scream on your
207:29 - computer lance slow down and i guess
207:31 - i'll hear you styles that title styles
207:33 - dot type okay and the title of this i
207:35 - can actually make it one line to just
207:36 - make the code a little bit smaller which
207:38 - will be max supply all right so that's
207:41 - the max supply closing div after that
207:44 - which will lead to opening div which
207:46 - will lead to small which will lead to
207:49 - number and the number that i have is
207:50 - just 21 021
207:53 - million actually there you go easy
207:55 - millie and after the easy melee it's
207:56 - closing div closing and then opened it
207:59 - all right this one i'm gonna give this
208:01 - one a name this one should actually be
208:04 - styles
208:05 - flex between all right so
208:07 - scrolling down does that flex between
208:09 - should have a
208:10 - empty which will have a small which will
208:12 - have the name of title yeah i bet you
208:14 - guys can predict it now then it's gonna
208:16 - be total supply okay then after that
208:18 - closing div there's gonna be another
208:19 - small here and the number is really big
208:22 - again it's 18 million 983 000 are not
208:26 - period actually comma 983 000
208:29 - and
208:32 - [Music]
208:35 - 912 and that's it small and then after
208:38 - that it's closing div because they're
208:39 - closing day closing there cool finally
208:42 - all right that's all the jsx for the
208:43 - styles i think i got everything now we
208:45 - just got to have the rate filled and the
208:49 - i believe drop down button so let's work
208:51 - on the rate filled and to do that let's
208:54 - just go to my buttons new file rate
208:57 - build easy peasy or it's not just to say
208:59 - chicapi so from here let's import
209:02 - chevron up and for styles it's pretty
209:05 - simple con styles it's equal to
209:08 - rate filled oops rates filled and for
209:11 - rate fill it's a background green 600
209:13 - flex items centa px-3
209:17 - and ml-3 as well with the rounded of exo
209:21 - all right cool and the div here this can
209:23 - just be class name of that same dip
209:26 - there's only one it's gonna be styles
209:28 - dot right field cool this is just gonna
209:30 - have the chevron up and the small class
209:33 - here or tag on me with the class name of
209:36 - p
209:36 - one and we can put twenty three point
209:40 - thirty two percent so it's hardcore
209:42 - numbers in the rate field cool so rate
209:44 - field is done awesome now we wanna work
209:46 - on the drop down button so in here new
209:49 - file drop down btn.js
209:52 - all right fce cool this one will have
209:55 - import chevron down awesome styles
209:59 - pretty simple styles equals drop down
210:02 - oops drop down actually keep it all
210:04 - lowercase drop down btn and we'll do a
210:07 - flex items dash center mr two or margin
210:11 - right to rounded md
210:13 - px-2 let's make the background blue 700
210:18 - cursor
210:19 - cursor
210:20 - dash pointer and that's it cool all
210:22 - right and all we want to return is the
210:25 - div with the class name of the drop down
210:27 - button and after that we have a p tag
210:29 - here we can give it a margin right or
210:31 - two and whatever we get from labels
210:33 - remember we're passing down a prop
210:34 - called label and it's just gonna be the
210:36 - name of the button essentially and we
210:38 - can just destructure that here all right
210:39 - because if you go to uh coin detail if
210:42 - you look the label is by exchange gaming
210:44 - that's what we're setting up over here
210:46 - followed by a chevron down cool so we
210:48 - hit save go back to coin detail take
210:50 - this guy out uncomment this one and
210:53 - uncomment this one and let's import
210:55 - those buttons now we can import rate
210:58 - filled and then we could also import
211:00 - drop down button cool so if i hit save
211:02 - why isn't this highlighted drop down
211:05 - button dropped oh i see yep i labeled
211:08 - this component so yeah i gave it a
211:10 - capital d so let's keep it consistent to
211:12 - that boom now if it's safe let's go back
211:14 - to localhost and now the moment of truth
211:17 - if i hit bitcoin i see the info page and
211:21 - if i click price i should see
211:23 - coindetails is not defined ah i see so
211:27 - this one is should be called the coin
211:29 - detail and how did i import it yep
211:31 - import coin detail should be details but
211:34 - forgot the s what if i go back okay now
211:36 - i click on price and yes it says from is
211:39 - not defined all right okay chrome is not
211:41 - defined and i think i know why it's
211:43 - because we just copied to send it over
211:45 - but if you go to coin icon here we're
211:47 - not using this from what we're really
211:49 - checking for is coin name all right so
211:52 - basically depending on the coin name so
211:53 - we go back now hit refresh now let's hit
211:56 - the price look at that let's freaking go
211:59 - it is literally identical to this one
212:01 - right here just has different numbers
212:03 - that looks good to me so now we have the
212:05 - price page the info page and the main
212:08 - page wow that was a lot of front end
212:10 - we're pretty much done with all of the
212:12 - front end the only thing that's left is
212:13 - let's get to the fun stuff the web 3.0
212:16 - stuff how can we make a smart contract
212:18 - and trade our tokens so i'll see you
212:21 - guys in that section okay so in this
212:23 - section i'm gonna be showing you guys
212:24 - how to create your very own smart
212:26 - contract and deploy it straight to the
212:28 - blockchain and we're also gonna be using
212:30 - morales to help communicate and pull
212:33 - from the users and just set up the
212:35 - database so if you want to think about
212:37 - this we made the pretty face of the
212:39 - fernand let's bring that front end to
212:41 - life with some functionality so to get
212:43 - started what i want you guys to do to go
212:45 - to the root of your folder and let's
212:46 - make a folder called smart contract boo
212:50 - so now we have the folder called smart
212:52 - contract let's just bring up our
212:53 - terminal a little bit and what we can do
212:56 - notice the path this is the root of our
212:58 - project what we want to do is cd into
213:01 - smart dash contract okay from here what
213:04 - we want to do is we want to install hard
213:07 - hat if you didn't know hard hat is an
213:09 - environment that helps us compile create
213:12 - and deploy our own smart contracts so to
213:14 - get started all we have to do is just
213:16 - say npf hard hat okay and make sure
213:18 - you're in the smart contract folder okay
213:20 - do you want to install the following
213:22 - project packages say yes and when it
213:24 - asks you to create something you want to
213:26 - just say basic sample project how to
213:29 - ignore y for yes and now the project's
213:32 - created so if i open my smart contract
213:33 - hard hat gives you all the things you
213:35 - need to get started which is wonderful
213:38 - one issue that i ran into and some
213:40 - people do is that if you look over here
213:42 - there is no dependencies sometimes it
213:44 - installs it sometimes it doesn't lucky
213:46 - for you i have the things that we need
213:49 - so all you need to do is paste this all
213:50 - right i'll put a comma over here and
213:52 - this is all the things that we're using
213:54 - it should have the hard hat stuff chai
213:56 - ethers and also install open zeppelin
213:59 - which i'm going to explain in a bit and
214:01 - dotep okay so if you want to get this
214:03 - done make sure the path that you're in
214:05 - so if i do clear is the smart contract
214:07 - folder and then we can just do an npm
214:10 - install all right because this is using
214:11 - just npm awesome all right we're up to
214:13 - date cool so after doing the npm we
214:16 - should be fine what i'm going to do is
214:18 - type in clear to clear my terminal oops
214:20 - something terminals funky open it up
214:22 - cool so now we're good to go okay so the
214:24 - next thing i want you to do is you can
214:25 - actually bring down your terminal take a
214:26 - look at the hardhat.config and as you
214:29 - can see we also have this configure our
214:31 - hard hat and set it up so let's clean up
214:33 - a couple of the comments we can also get
214:35 - rid of this tasks account we're just
214:38 - going to need require the nomic labs and
214:41 - this module that exports and what we
214:42 - want to fix is this stuff right here
214:45 - okay so save this let's also save your
214:47 - package.json and that remind me if i
214:49 - didn't save this we have to do an npmi
214:52 - cool so now we have everything just to
214:54 - make sure make sure it's saved awesome
214:56 - so back to this what we want to do is
214:58 - set up our hard hat with the network
215:01 - that we're connecting to so how do i
215:03 - know what network we're connecting to
215:05 - what i'm going to do is open up our
215:07 - browser again and what we can do is head
215:09 - over back to morales.io and hopefully
215:12 - you already signed up let's hit login
215:14 - and go to your project and if you
215:16 - remember let's see view details
215:19 - go to emv configuration and we set
215:21 - polygon last time what we really want to
215:23 - do is make sure it's ring compete you
215:25 - can actually set it up for multiple
215:26 - things so if you want to work with the
215:28 - avalanche block chain you can actually
215:30 - connect it there as well but i know that
215:31 - i'm just going to use rinka b so you
215:33 - don't take out the polygon just do a
215:35 - rinkeby hit save configuration awesome
215:37 - so now it's configured to rinkaby the
215:40 - main thing is there's something called
215:41 - speedy nodes right if you think about it
215:44 - what we're gonna do is create a smart
215:46 - contract that helps us exchange our
215:48 - teeth for tokens right it's to simulate
215:51 - what's called a dex or a decentralized
215:53 - exchange it's not actually a dex we're
215:54 - simulating that type of thing by trading
215:57 - and swapping tokens the first step would
215:59 - be to take the smart contract we make
216:02 - and deploy it to the blockchain how do
216:04 - we do that we have to connect to the
216:06 - blockchain and if you didn't know the
216:07 - blockchain is made up of different nodes
216:09 - and what you'd supposed to do as a
216:10 - developer is you can create your own rpc
216:14 - node set up your computer to become a
216:16 - node on the blockchain or what a cool
216:19 - thing that morales does is we can just
216:21 - directly connect to a node that they
216:24 - have and use that to talk to the
216:26 - blockchain so if you go to speedy nodes
216:28 - click endpoints go ahead and go to the
216:31 - rinkaby one and you can just click copy
216:33 - here to copy that speedy node and what
216:35 - we're going to need to do is set up some
216:37 - enb variables okay cool so since this is
216:40 - its own configuration the smart contract
216:42 - folder we can make a new file here and
216:44 - just call it enb okay all right so
216:47 - there's two things that i want to set up
216:49 - here one i'm going to call speedy node
216:52 - right and then set it equal to that
216:54 - morales speedy node link it's going to
216:55 - be different for you guys it's not going
216:57 - to be exactly the same as mine and
216:59 - there's another thing that we need to
217:00 - keep track of which is just the account
217:02 - or the private key so i'll just call it
217:05 - account so the account is going to be
217:06 - your wallet private key so what do i
217:09 - mean by that if you go to the browser
217:11 - and if you look think about what wallet
217:13 - you're using if you're using meta mask
217:14 - which i'm using as well you need to put
217:16 - in something for your account right and
217:19 - for the accounts array you want to put
217:21 - in your private key and one thing to
217:23 - note is that your private key should not
217:25 - be shared with anyone because your
217:26 - private key can give somebody access to
217:29 - your actual account so again my advice
217:32 - is this is just a burner account where i
217:34 - have just some play eath and make sure
217:36 - you connect your metamask to the right
217:38 - test network okay all right so if you're
217:41 - looking at the top here and it doesn't
217:42 - say rinka b test network that means you
217:44 - should change it otherwise this wouldn't
217:45 - really work so to see or connect to the
217:48 - rest ring could be test network click on
217:50 - your profile right here you can see all
217:52 - my different burner accounts i'll go to
217:54 - settings click advanced scroll to the
217:57 - bottom and you're gonna see this toggle
217:58 - that says show test networks make sure
218:00 - you click it and it says when that's on
218:02 - if you click this drop down then you
218:04 - should see all the test networks click
218:06 - ring could be awesome cool so now
218:08 - connect to the rinkeby test net make
218:10 - sure you have meta mask installed also
218:11 - if you don't have it already and what
218:12 - you want to do next is get that private
218:15 - key so what we should do to get that
218:17 - head over to this three dots right here
218:19 - click account details and here it is
218:21 - export private key again be careful
218:24 - putting your private key out anywhere
218:26 - and i would i wouldn't use your real
218:27 - metamask account if you're just testing
218:29 - things out i'm just going to do an
218:30 - export private key that's asking for a
218:32 - password because it says never disclose
218:35 - this key and you want your private key
218:36 - can steal assets held in your account
218:38 - see so if you don't listen to me listen
218:40 - to metamask i'm gonna hit confirm so
218:42 - here's my private key it's for my burner
218:44 - account it should be fine so i'm gonna
218:46 - paste that right here oops i didn't
218:47 - actually okay and we'll hit copy done
218:50 - cool so then we put this as a count and
218:52 - now our env is good to go what we should
218:54 - do next is set up our config now so to
218:57 - set up our config all we need to write
218:59 - is what solidity version that we're
219:01 - using and if you didn't know that's the
219:03 - language that your smart contract is
219:05 - going to be coded in when you're working
219:06 - with ethereum or rinkeby after you
219:09 - specify what version you're looking at
219:10 - it might be outdated by the time you're
219:12 - watching this if you're watching this in
219:14 - the future but i'm just doing 0.84 you
219:16 - can also do something like greater than
219:18 - so you can say it's compatible with this
219:20 - version and greater than but i'm going
219:21 - to leave it like this so if i do
219:23 - networks it's a key that's going to have
219:25 - an object and here type in the networks
219:27 - that you want to connect to so for me
219:29 - that's ring could be and it's going to
219:31 - be the url which is going to be process
219:34 - dot env dot speedy node and then for
219:39 - accounts it's going to be process dot
219:42 - env your account okay hit save and that
219:46 - is the hard hack config awesome so after
219:49 - that's done make sure in your package
219:51 - json you have something called open
219:53 - zeppelin if you don't see this what you
219:55 - could do is just npm install at open
220:00 - slash contracts if you don't know what
220:03 - open zeppelin is it's essentially a
220:04 - library that has standardized contracts
220:08 - right if you're ever making a smart
220:09 - contract there's like some sort of
220:10 - standard that you're gonna follow so if
220:12 - you look for our contract it's gonna be
220:15 - about tokens so we're creating tokens
220:17 - that you can mint and that is going to
220:19 - be the erc20 standard so if i was going
220:21 - to make this from scratch without open
220:24 - zeppelin i would have to make sure that
220:26 - my contract is exactly like the standard
220:29 - with open zeppelin though i can just
220:30 - import it it's a lot like if you guys
220:32 - remember with object oriented
220:34 - programming if i have a class called car
220:37 - you can build on top of it so if i make
220:39 - a class called ferrari extends car i'm
220:42 - building off top of a car class but
220:44 - specifying what a ferrari is it makes
220:46 - more sense when i use it but you can
220:47 - think of openzplin as a way to build on
220:50 - top of a standard cool so what we want
220:52 - to do next is if you go over here to
220:55 - your browser let me show you how to get
220:57 - started with opensup alright cool and
220:59 - before we get started on working with
221:01 - opens up lynn to create a contract we
221:03 - should brainstorm of what should our
221:04 - contract be so if you look this is a
221:07 - greeter dot sol so if i clean this up a
221:10 - bit this is our solid example solidity
221:13 - contract that heart hat provides it's
221:15 - always the same greater but you want to
221:16 - think about what we want to do with this
221:17 - smart contract i've mentioned before in
221:19 - previous videos a smart contract is like
221:22 - a vending machine you put in money you
221:25 - select what soda you want and that
221:27 - vending machine directly gives you that
221:29 - soda with this smart contract what we
221:31 - want to happen is i get my eath i
221:35 - send each to the smart contract into the
221:37 - vending machine and what i should get
221:38 - back is tokens oh that i want so what
221:41 - does that mean if i send an eth i should
221:43 - get back usdc right so for this contract
221:47 - the first one i'm gonna make i'm gonna
221:49 - send eth to get back usdc tokens so
221:52 - let's set that up cool so to set it up
221:54 - go to docs.openzeplun.com
221:57 - contract slash 4.x wizard all this does
222:00 - is help you create each smart contract
222:03 - so if i name my contract all right so
222:06 - i'm naming my contract here look what
222:08 - happens under name if i call this usdc
222:11 - it automatically updated the smart
222:13 - contract to what it should look like for
222:15 - the symbol what i want to do is the
222:18 - symbol for the coin which will be usdc
222:21 - and one thing to note again this is not
222:23 - me actually creating the coin this is me
222:26 - creating a token that represents the
222:28 - coin and that's what we're trading keep
222:29 - an eye out for future videos where we'll
222:31 - actually implement and coin the coin
222:33 - swapping and as well as fiat to coin
222:36 - swapping as well all right there's a lot
222:37 - of big things in the works but this is
222:39 - how you can set up the contract notice
222:40 - how it says usdc for the symbol that's
222:43 - how you set it up and the only other
222:44 - thing we need to do is click mintable
222:47 - here and then it's going to input import
222:49 - the mintable or ownable contract awesome
222:52 - and we also add the property ownable so
222:54 - this contract will be able to mint dc
222:58 - tokens so let's copy that let's go to
223:00 - our greeter soul what we can do is
223:02 - rename it instead of deleting it we'll
223:04 - just call it usdc dot so yeah and what i
223:07 - could do now is click all here and click
223:09 - delete and then i'm gonna hit paste all
223:12 - right so i just copied and pasted the
223:14 - contract template that i got from opens
223:17 - up and pretty much we're almost there
223:19 - what we do need to change now is instead
223:20 - of only owner make this payable so that
223:23 - we can actually send tokens to it and
223:25 - another thing we can do is underneath
223:27 - this function we can have a receive
223:29 - external payable so receive external
223:32 - payable basically it's just going to be
223:34 - able to accept eth and you just need
223:36 - this here to get this swap working cool
223:39 - all right i think this looks pretty good
223:41 - but make sure and keep in mind that this
223:43 - is only to exchange my heat for usdc you
223:45 - want to make as much smart contracts
223:48 - depending on how many coins that you
223:49 - want to establish so for me i'm going to
223:51 - make a couple more let's take a look
223:53 - what i want to make is new file let's
223:56 - say die dot sol let's also make another
223:59 - file call it dogecoin and also just get
224:02 - some dojin here and we also should make
224:04 - a link that's all right cool awesome and
224:07 - guess what the contract is going to be
224:08 - pretty much the same so we could do is
224:10 - copy that paste it copy that paste it
224:13 - copy that paste it important part you're
224:16 - copying and pasting it's like la dee da
224:18 - but what the main thing is the contract
224:20 - name and the name should go here and the
224:23 - abbreviation so for example if i click
224:26 - link right now it's still the contract
224:28 - name is usdc that doesn't make sense so
224:30 - double check for me that your contract
224:31 - name isn't usdc all the time and that
224:34 - it's consistent and the name
224:36 - abbreviation for this is just link
224:38 - awesome save for dogecoin it should be
224:42 - not usdc it should be doge coin and
224:45 - let's just actually make it dogecoin and
224:47 - then keep this the same as you wrote the
224:49 - contract name dogecoin this will be the
224:52 - symbol doge and again that's the only
224:54 - difference okay so that's dogecoin then
224:56 - we're to work on die and for die it's
224:59 - just going to be the same thing of not
225:01 - usdc die ownable same as the contract
225:05 - name and then the symbol right here cool
225:08 - awesome cool so if you look double check
225:10 - that it doesn't say usdc for all of them
225:12 - and now you have four unique contracts
225:15 - that will make four unique tokens right
225:17 - so make as much as you want or as little
225:19 - as you want i'll just make four i think
225:20 - that's a good size one thing i wanted to
225:22 - point out about each contract is that if
225:24 - you look over here this tells you what
225:26 - version of solidity that you're looking
225:28 - for and again if you're watching this
225:29 - from the future it might be a little bit
225:31 - different this just says any version
225:33 - that's this one and up would be
225:35 - compatible obviously unless there's
225:37 - differences and if you see
225:38 - this little scribbly thing that says
225:40 - import not found i have a fix for that
225:42 - one note if you want to start coding in
225:45 - cnvs code you might know about this but
225:47 - if you go click extensions and search up
225:49 - solidity or juan blanco you want to have
225:51 - this installed right this basically
225:53 - provides solidity support within vs code
225:56 - if you see the squiggly lines like this
225:58 - that's because with the newest version
226:00 - of this one blanco solidity doesn't
226:02 - really work but if i install another
226:04 - version and go to let's do version i
226:07 - think it's 0.134
226:09 - it's going to install it an older
226:10 - version cool reload required awesome so
226:13 - now if you look there's no more squiggly
226:15 - lines on it and we're good to go cool so
226:17 - if you wanted that issue that's the
226:18 - quick fix for it so now with that we
226:20 - created the smart contracts the next
226:21 - step is to deploy them to the blockchain
226:25 - which is the fun part and i'll actually
226:26 - make sure it's
226:27 - solidity i'm gonna go back you want
226:30 - version one three five there you go so
226:31 - now there's no more squigglies we should
226:33 - be good to go now so like i was saying
226:35 - now that we created our smart contracts
226:36 - we need to put them and deploy them to
226:39 - the blockchain so that's where this
226:41 - folder scripts comes in handy and we're
226:44 - gonna use this file to deploy said
226:46 - contract onto the blockchain and that's
226:48 - how we can make it permanent so that you
226:50 - can't edit the contract and we're good
226:52 - to go all right so let's work on
226:54 - deploying our smart contract like i said
226:56 - we need to set up the script for it so
226:58 - what i'm going to do is rename the
227:00 - samplescript.js to deploy.js because
227:03 - that's going to make a little bit more
227:04 - sense so what we can do next is let's
227:06 - clean this up let's see you know what
227:08 - i'm actually going to just highlight
227:10 - everything on here and let's just erase
227:12 - it i'll just make it from scratch so now
227:14 - we have an empty deploy.js the first
227:16 - thing that usually goes here is a main
227:18 - function and it typically is a
227:20 - synchronous asynchronous
227:23 - cool and the important part here is to
227:26 - grab the name of each contract so let's
227:29 - say constog
227:31 - that's the variable name and it's going
227:33 - to be equal to a weight
227:35 - hre.ethers right not hero hre dot ethers
227:39 - take this guy out don't need it cool
227:41 - hre.ethers dot get contract factor so
227:45 - this is going to get the contract by its
227:47 - name and remember we named it doge
227:49 - capital c coin right and then after that
227:52 - we can make another variable called doge
227:54 - contract this variable is going to get
227:57 - the await the doge factory which is
228:00 - gonna be us getting the contract this
228:02 - one is actually gonna deploy that to the
228:05 - blockchain we're gonna make use of the
228:07 - hardhat config use the speedy node to
228:10 - connect to the blockchain as a node and
228:12 - deploy it using that so it's going to be
228:14 - deployed here we're going to wait for
228:16 - that to finish and store that into a
228:18 - variable called dogecontract and then
228:20 - another one another thing we need to do
228:21 - is await dogecontract.deployed
228:26 - this makes sure that after it's done
228:28 - deploying make sure that it's already
228:29 - deployed okay cool and then after that's
228:31 - done we're actually free to console.log
228:34 - dogecoin deployed to or deployed to that
228:38 - makes more sense space comma doge
228:41 - contract right dot address right now
228:44 - this is how we get the contract address
228:46 - and we're gonna need to save it for
228:48 - later so keep in mind we're gonna get it
228:50 - by console logging it after it's
228:51 - uploaded or deployed to the blockchain
228:54 - cool so within this main function you
228:55 - want to do the same thing for every
228:57 - single contract that you want to deploy
228:58 - so we have link factory is equal away to
229:03 - hre.ethers.contract factory and that
229:05 - should be link next step you can make a
229:07 - variable called contract now which is
229:09 - going to be await link factory.deploy
229:12 - and after that we have to await the
229:14 - contract dot deployed okay cool and then
229:17 - this is pretty much the same this
229:18 - console log which will be uh link token
229:24 - deployed to this address because when
229:26 - this is actually deployed if you do a
229:28 - data address that should hold the actual
229:31 - contract address where it lives
229:33 - basically where it lives on the
229:34 - blockchain okay same thing here die
229:36 - factor equals await dot get contract
229:38 - factory die and you say cons die
229:41 - contract equals weight die factory dot
229:45 - deploy then we can do a const or nikon
229:47 - sorry await.contract.deployed
229:50 - then we have the console.log again die
229:52 - token deployed to die contract address
229:56 - okay last one it's actually the first
229:58 - one i made which was the usdc factory
230:02 - all right await
230:04 - hre.ethers.getcontract factory
230:06 - parentheses us const usdc contract new
230:10 - variable it's going to be await usdc
230:13 - factory dot deploy block scope
230:16 - that's interesting usdc factory usdc
230:20 - factory oh i put a wit wait there you go
230:23 - awesome so i'm gonna do an await
230:26 - usdcontract.deployed right after it's
230:28 - already deployed and we just do a
230:30 - console.log usdc token deployed to and
230:34 - actually don't need the space to be
230:35 - honest and then we can just do usdc
230:38 - contract dot address of course awesome
230:41 - all right cool we're almost done this is
230:42 - the main function but then we have this
230:46 - semicolon async one as well all right
230:48 - this is where we can do a try catch and
230:51 - re-await the main function so if this is
230:53 - successful and it's finished we're gonna
230:56 - do a process that exit with the zero
230:59 - okay and then the thing we're missing
231:00 - here is the catch with is just error and
231:03 - we can do a
231:04 - console.error actually and then just
231:06 - type in air and if that happens we can
231:08 - do a process that exhibit with one okay
231:11 - cool and the last thing it needs is
231:15 - something like this this is because i
231:17 - need to put like an opening parenthesis
231:19 - there and there we go cool and that's
231:21 - the deploy.js that's how we can use this
231:24 - script to send it to the blockchain the
231:27 - only thing that we have to do now
231:29 - is open this up again and let's go to
231:33 - cd smart contract okay so now we're in
231:35 - the smart contract what we can do next
231:37 - is actually to deploy it and run
231:39 - deploy.js we have to do npx hard hat run
231:43 - scripts slash deploy dot js and then
231:46 - type in the network you want to use
231:48 - which should be net uh rinky b that
231:50 - should be good oops i put npx hard hard
231:53 - hard hard let's do a hard hat so this
231:55 - should work let's see error 404 all
231:57 - right so let's just try that one more
231:59 - time npx harsh hat run scripts deploy.js
232:02 - and it looks like okay yeah so it looks
232:05 - like there's something going on with
232:06 - hard hat i'm gonna guess has something
232:08 - to do with the dependencies so i'm just
232:10 - gonna run an npm install all this guys
232:12 - and hopefully that fixes the issue
232:14 - because it's not working as it should so
232:17 - what i'm going to do is npm installed
232:19 - and make sure you have all of these
232:20 - packages nomiclabs hard hat waffle
232:22 - ethereum one full chai nomiklabs so
232:25 - forth so pause it to get all the names
232:27 - but this is essentially what it should
232:28 - have came with when you install hard hat
232:30 - and i thought by doing this it would
232:32 - have it but it didn't there you go so
232:34 - now we actually see node modules so
232:36 - that's a good sign okay now let's try to
232:38 - run the npx hard hat invalid undefined
232:42 - config all right so looks like it says
232:45 - undefined hard hat config what i did was
232:48 - i looked at our hard hit the config and
232:50 - we're using the environment variables
232:52 - here but it's not recognizing it and
232:53 - that's because i forgot to just do a
232:55 - require d dot env and do a dot config
233:00 - here hit save and now if i do the npx
233:02 - hard hat run and see if it works let's
233:05 - go compile nine selected files
233:07 - successfully and all of these guys is
233:09 - the contract addresses go ahead and save
233:12 - them somewhere because we're gonna be
233:14 - using them but other than that our
233:15 - contracts are live and on the blockchain
233:17 - which is awesome okay so like i said the
233:19 - next step is to save all of these
233:21 - contract addresses because we're going
233:23 - to be calling them when we want to swap
233:26 - tokens and mint them so to save this
233:28 - what i'm going to do is come over to the
233:30 - sidebar over here and let's create a
233:32 - folder the folder is going to be called
233:34 - lib and inside this lib folder we're
233:36 - going to have a file called
233:39 - constants.js which we're going to be
233:40 - referring to later so in constance.js
233:43 - the most important things is by doing an
233:46 - export cons doge address and you want to
233:49 - set that equal to the contract that it's
233:52 - part of so this one is this right here
233:54 - paste it there then do the same thing
233:56 - for the rest of the contract so this
233:57 - will be the link address all right set
234:00 - that equal to this and make sure you
234:02 - copy the right one this is oxe right
234:05 - then we want to do an export const die
234:07 - address equal to the die token one which
234:10 - will just be all this cool then last but
234:13 - not least it's the export const usdc
234:16 - token and that's going to be equal to oh
234:19 - it doesn't have to be usdc address usdc
234:22 - address let's keep it simple cool and
234:25 - this one will be the oxc alright so
234:27 - paste that on there and bam we have all
234:29 - the addresses but this is not the only
234:30 - thing that we want to do if you hit save
234:32 - and open up your smart contract folder
234:35 - you're going to notice something called
234:36 - artifact right it gets generated along
234:38 - with a cache folder when we deploy it to
234:40 - the blockchain click on contracts and
234:42 - click on the die dot soul and if you
234:46 - look there's something called die dot
234:47 - json right we want to get the dot json
234:50 - of every contract so we can do this by
234:53 - copying it and paste it into your lib
234:55 - folder it's gonna make sense in a bit so
234:56 - there's the die one make sure you get
234:58 - the json and not the dot dbg or else
235:01 - it's not going to work so this one dot
235:02 - json copy all right cool so that's the
235:05 - doge let's do link dot json copy paste
235:08 - okay that's a link last one usdc dot
235:11 - json copy and paste cool so all four
235:14 - json files are there go back to your
235:16 - constants we can push these guys down
235:18 - and let's import all of those json files
235:21 - so you can say import doge alright
235:22 - that's the name of it from the dogecoin
235:26 - json and then from there we can do
235:27 - import die from
235:30 - json import link from link.js and then
235:33 - import usdc usd from usdc awesome okay
235:37 - cool so then we're not done yet we
235:39 - imported the json into our constants but
235:42 - what we really want is the abi from the
235:46 - dot json so if you look there's an abi
235:48 - attribute to it and that's what we need
235:49 - to
235:50 - basically get our to communicate with
235:52 - our smart contracts so if i do export
235:54 - doge api set that equal to doge.api same
235:58 - process throughout the whole thing just
235:59 - give it the name that it should so this
236:01 - is the dai abi and rhymes die die all
236:04 - right cool that important export const
236:06 - link avi link diabetes okay and then
236:10 - export const usd c api equals usdc cool
236:14 - so once that's done this is your
236:16 - constants folder our constants file next
236:19 - thing let's start filling out our
236:21 - context okay so now that all the setup
236:23 - is done let's move on to our context and
236:26 - make use of our constants so what i'm
236:28 - going to do ctrl b you can actually
236:30 - bring this down and if you do control p
236:33 - we can type in context and head over
236:36 - there cool so this is the current state
236:37 - of our context all it has is to get top
236:40 - 10 coins but it should do a lot more we
236:42 - need to
236:43 - tell our code when to run the mint
236:46 - function for each of our contracts so to
236:48 - get started let's do some imports here
236:51 - so i'm going to import use morales right
236:54 - because we're going to be using morales
236:55 - to help us out we're going to do react
236:57 - morales and then we also want to do
236:59 - import use morales query right we're
237:02 - going to be adding to the database soon
237:05 - we're going to be using moralesquery
237:06 - because eventually we're going to i want
237:08 - to show you guys how to utilize the
237:10 - morales database to store what tokens
237:13 - that were used and then call them so
237:16 - we're going to get morris query from
237:18 - react morales as well and here's the
237:20 - important part if i do an import here we
237:23 - can actually import the doge api and all
237:26 - the others through our constants folder
237:28 - so i'm gonna get the die one i'm gonna
237:30 - get to the link i'm going to get usdc
237:34 - and along with the abis we should also
237:36 - get the addresses so i'll get doge
237:38 - address link address die address and
237:42 - usdc address awesome and all this will
237:45 - come from constance there you go cool so
237:48 - that's why we set it up so now this
237:49 - makes a lot more sense okay if i hit
237:51 - save cool and we're going to take a
237:53 - couple of things from morales so we're
237:55 - going to destructure use morales and
237:57 - what we're going to get from it is this
237:59 - so we say object use morales and then
238:02 - you tell morales what you want to use
238:04 - from them i want is authenticated and
238:08 - user and morales from used morales okay
238:12 - cool there's also another cons tier this
238:14 - i'm going to add this later but we're
238:15 - going to use muse moron's query here so
238:16 - let's say use morales query let's query
238:19 - and i'm going to comment it out because
238:21 - i'm going to add to it later when it
238:22 - makes more sense but next point is the
238:25 - states so if you saw i imported the
238:27 - eustate hook because there's a couple of
238:29 - things that i want to keep track of so
238:30 - i'll say const equals you state and you
238:34 - want to do this about a couple of times
238:36 - so you want to do this one two three
238:38 - four five okay each one is going to be
238:40 - different though this one is going to be
238:42 - current count and then we're going to do
238:44 - we're going to do a set current account
238:47 - and the initial state for that will be
238:49 - empty string this one is going to be
238:51 - open by crypto
238:54 - model so what this tells me is that
238:56 - we're going to be making a modal so when
238:58 - i click on it we're able to swap tokens
239:00 - all right so you set up by model
239:04 - and the use date of that should be false
239:06 - set open by crypto mode yep then there's
239:09 - also going to be a from token and it's
239:11 - set from token if you guys watch the
239:13 - robinhood clone this is gonna look a
239:15 - little familiar okay so then this from
239:17 - token then we have to do a two token and
239:19 - a set to token
239:22 - and then for this we'll do an amount and
239:24 - a set amount okay cool
239:26 - all right and what i can do here is make
239:30 - a use effect because we also imported
239:31 - that hook okay apparel function here and
239:34 - we can use is if the user is
239:37 - authenticated this is going to be true
239:38 - or false if they're logged in or not if
239:40 - they are logged in let's do this
239:42 - variable called account and let's do a
239:44 - user which we're getting from
239:45 - morales.get and then we can get the ethe
239:48 - address so i'm getting the users that
239:50 - the user that's logged in his address
239:53 - and what i'm going to do is set that to
239:55 - our state so current account right to be
239:58 - account the variable cool and then i
240:01 - only want this to run once and when is
240:04 - authenticated is changed so once the
240:06 - user is logged in run it and if it's he
240:09 - logs in if that changes at all then we
240:11 - run the use effect awesome cool so now
240:13 - i'm going to make a couple more
240:14 - functions underneath that use effect to
240:17 - get the contract address if you remember
240:19 - the robinhood clone we had a modal that
240:22 - had two drop down menus so the first one
240:25 - is the first one you can select what
240:27 - coin you want the second one is what do
240:29 - you want to exchange it for so to do
240:31 - that we need a function called get
240:33 - contract address okay and that's going
240:36 - to be equal to this right here and if
240:39 - from token is equal to die then we
240:42 - should return which address exactly the
240:45 - diagram okay so you want to do the same
240:47 - thing for everything else so if from
240:49 - token is equally equivalent to dogecoin
240:52 - well this is not the big capital just
240:53 - says as long as it's dogecoin we can
240:55 - return doge address okay if prom token
240:59 - is equal to link return link address
241:03 - okay and then if from token you will
241:06 - equal equal to usdc return usdc address
241:11 - all right so this makes sense right this
241:12 - is how we get the contract address this
241:14 - also should be a function called get the
241:16 - to address like what are we switching
241:18 - the token to or four right so it's gonna
241:21 - be the same thing except this time it's
241:23 - if two token is equal to the string
241:27 - okay and then we want to return that
241:28 - address i'm just gonna do the same thing
241:30 - for the rest of them usdc usdc
241:34 - cool so we're getting we're able to get
241:36 - the contract addresses but we also need
241:38 - to be able to get the abis so we're not
241:40 - making use of that we can also make a
241:42 - function to get the corresponding one so
241:44 - get to abi right there's not really
241:47 - going to be from abi or just get abi is
241:50 - only going to use this one and then this
241:52 - one it's going to be the same thing if
241:54 - the token is any of these but the
241:56 - difference is the word address so again
241:59 - let me show you guys that quick shortcut
242:00 - troll the race and just do an api here
242:03 - cool perfect so that is the get to abi
242:07 - function and now for the fun part let's
242:10 - actually make the mint function all
242:12 - right so the idea is if i click the
242:15 - modal i should pick the two coins that i
242:18 - want to swap from and then when i click
242:21 - swap or buy it should run the min
242:23 - function which is going to tell the
242:24 - smart contract hey we need to swap this
242:27 - and get the tokens that we need the
242:29 - function name of that is going to be
242:31 - called the mint so i will say cons mint
242:33 - it's going to be asynchronous okay hey
242:36 - try catch let's just set up the catch
242:38 - part since it's easier ever and we just
242:40 - do
242:40 - console.error error.message okay cool so
242:43 - if i hit save cool so this mint function
242:46 - is basically what we're gonna use to
242:48 - swap tokens like i said if you want a
242:50 - visual to actually really grasp what i'm
242:52 - saying if you do a local host 3000 i'm
242:54 - running the finish build this is not
242:56 - ours that we were building together this
242:57 - is the finished product if i click any
242:59 - of these buy buttons it's gonna open up
243:02 - the modal right so this is a component
243:03 - that we're gonna be setting up but here
243:05 - this is the from eath all right this is
243:07 - the options that we have the two when i
243:10 - click swap well after i put the amount
243:12 - right when i click swap it's going to
243:14 - run this mid function so that's the goal
243:16 - so to get the functionality for it this
243:19 - is how we want to code it up this is the
243:20 - logic so if the from token is equal to e
243:25 - so what does that mean if i open this up
243:27 - if the from is eth right this is the
243:30 - function that should run all right so if
243:31 - it's eth i also want to check if the
243:33 - user is authenticated right because if
243:35 - the user is not authenticated then we
243:37 - shouldn't be even we shouldn't be able
243:38 - to do anything so just return but they
243:40 - if they are authenticated or logged in
243:42 - we just do this await
243:44 - morales.enable web3 right and then let's
243:47 - get the contact the contract address so
243:50 - cons contract address remember how do we
243:53 - get the contract address we just say get
243:56 - to address right there you go okay and
243:58 - notice how it says get to address
244:00 - because we if we're sending eth i want
244:04 - to be getting the address of what i want
244:06 - to swap to so if i click link we should
244:08 - be getting the link address if i click
244:10 - dogecoin it should be getting the
244:11 - dogecoin address die die address so
244:13 - that's what get two addresses for all
244:15 - right notice how it's not get contract
244:16 - address okay so that's the variable we
244:19 - also want to get the abi how do i get
244:20 - the abi of what i'm switching to you say
244:23 - get to avi all right and i think i just
244:25 - imported something by accident don't
244:27 - need this guy right here so save come
244:29 - all the way down to mint there you go so
244:31 - we get use the get to abi function
244:33 - because it's going to return one of the
244:34 - apis that we have so that's good cool
244:37 - and then we also need to pass in some
244:38 - params well not params actually we're
244:40 - going to get two api and then we can
244:41 - pass in the options right because when
244:44 - we do
244:45 - morales.execute function we pass in this
244:48 - object and the parameters so for the
244:51 - options the contract address is just
244:54 - going to be literally contract address
244:56 - and the function is going function name
244:59 - is going to be mint right just to
245:01 - quickly explain this line right here
245:02 - after i put this comma is i'm specifying
245:05 - that at that contract run the mint
245:08 - function right so if you remember smart
245:10 - contract contracts die i'm one i'm i'm
245:13 - literally saying run this mint function
245:15 - of the contract and they all have that
245:17 - so that's why this is still dynamic so
245:19 - i'll run the min function pass in the
245:22 - abi as api and the params for the
245:25 - function right so if you're wondering
245:27 - where these params are coming from this
245:29 - is us passing in the address to and the
245:32 - amount right so the params will be the
245:35 - two of the current account and the
245:37 - amount is going to be morales oops
245:42 - morales.units.token and then pass in the
245:44 - amount okay so that's it for params
245:46 - another thing that we need to do is the
245:48 - send eth function all right so this send
245:50 - each function doesn't exist yet so let's
245:53 - make it so it makes more sense so coming
245:55 - down below here let's do a const if so
245:58 - i'm pausing the mint function to make
246:00 - this an eat function so this is cons
246:02 - send eat equals async okay i'm going to
246:05 - do if is authenticated just return if
246:08 - it's not if they're not logged in just
246:10 - return okay next is a const contract
246:12 - address and it's going to be get to
246:15 - address okay all this function is doing
246:17 - is making sure that i'm sending ethereum
246:20 - to whatever token contract that i want
246:22 - to send so that's why we made this
246:24 - payable i'm sending eth here to this
246:26 - address okay if if i'm sending if i'm
246:29 - swapping for doge i'm going to send it
246:30 - to the doge contract so this is
246:32 - literally the senate function so we got
246:34 - the contract address we don't need the
246:35 - abi let's just do let options equals
246:38 - this and the type is going to be native
246:41 - because we're sending eth then the
246:42 - amount is just going to be morales dot
246:45 - units dot
246:47 - this is how much ether will cost to swap
246:50 - no matter what the amount is which is
246:51 - fine receiver and we'll do contract
246:53 - address cool so i'm saying that whatever
246:56 - contract address that we get that's
246:58 - who's receiving that all right that's
247:00 - the options now we're going to do a
247:01 - const transaction variable and we're
247:03 - going to set it to an
247:06 - await.morales.transfer this is how we
247:07 - can transfer that so transfer and pass
247:10 - in options okay then we're gonna wait
247:12 - for the receipt so let's make a variable
247:14 - for it and say await transaction dot
247:17 - wait so the dot wait here the weight we
247:19 - know is waiting in terms of like web 2.
247:22 - this.wait is waiting for the transaction
247:24 - to be completed on the blockchain
247:26 - basically it's making sure that it's
247:28 - verified by miners so that it's true and
247:30 - it's done and afterwards we can console
247:33 - log it to prove that it is verified so
247:35 - that's our receipt okay cool so send
247:37 - each function that's done let's come
247:39 - back here and continue on this mint
247:41 - function so once we create our options
247:44 - send that eth to the contract then we
247:47 - want to type in a variable for
247:48 - transaction again but this time it's for
247:51 - morales.execute function so this is how
247:54 - we execute that mint function with the
247:56 - parameters that we're passing in so
247:58 - that's why we made options here okay
248:00 - then let's get a receipt for it so again
248:02 - we can do an await
248:04 - transaction.wait so again we're waiting
248:06 - for it to be verified by miners if i put
248:08 - four here this is how many blocks that i
248:11 - want verified before it's completed
248:14 - because the way it works on the
248:16 - blockchain once the block is finished
248:19 - and the miners have verified it the
248:22 - longest chain is the truth so it can
248:24 - branch off this one will ensure that
248:26 - it's more accurate if i wait for four
248:28 - okay so then we'll do a console log
248:30 - receipt and then afterwards this was a
248:33 - whole if let's actually make the else
248:35 - for it so if we're not minting tokens
248:37 - with our ethereum that means we're
248:40 - swapping tokens instead so that means
248:42 - for the else statement we'll run the
248:44 - swap tokens function so this one think
248:47 - of it as east token transfer this one is
248:50 - the token to token transfer okay and
248:52 - again this doesn't exist so let's make
248:54 - it so in between here let's do a const
248:57 - swap tokens is equal to async like this
249:01 - try
249:01 - okay and if is authenticated we're going
249:05 - to hit return then we're going to do an
249:06 - await morales that enable web3 okay and
249:10 - after that we have an edge case here so
249:12 - if we say if from token is equal equal
249:15 - to token then we should just return an
249:18 - alert and we can just say you cannot
249:20 - swap the same token all right this is if
249:21 - i was trying to do doge for doge that
249:23 - doesn't make sense so that's what it's
249:25 - going to do otherwise we can just do
249:27 - cons from options right we're gonna need
249:29 - to if we're doing token to token we need
249:31 - to make two options so the type is erc20
249:35 - right and the amount is going to be
249:38 - morales oops morales units dot token and
249:42 - pass in the amount put 18 here and there
249:44 - we go and the receiver is going to be
249:47 - the get contract address right if you
249:49 - think about it if we're swapping tokens
249:52 - what should happen is let's say let me
249:54 - give you a visual let's go to the
249:56 - browser let's say i want to do dogecoin
249:58 - for usdc all right what should happen is
250:01 - if i have dogecoin and i want to get
250:03 - usdc i should send my toke my dogecoin
250:06 - tokens to the usdc contract and then
250:10 - that usdc contract should mint me some
250:13 - usd tokens back send doge to usdc get
250:17 - usdc back that's the swap tokens
250:19 - function right for my vending machine i
250:21 - give in dogecoins and when i get back
250:23 - from my vending machine
250:24 - i get usdc that's how the smart contract
250:26 - works so there you go so the receiver
250:28 - should be the get contract address and
250:31 - then for the contract or address itself
250:34 - all right it's also going to be the same
250:35 - person so get contract address get
250:37 - contract address cool so that's the from
250:40 - options now i want to like i said we
250:42 - need to mint the tokens that we're
250:44 - getting it to so let's do two mint
250:46 - options to make it more clear so the
250:48 - contract address is going to be the get
250:51 - to address this time and i remember i
250:53 - want to call that function name of mint
250:56 - all right so i'm calling the mint
250:57 - function at that contract yes sir and
251:00 - then we do a bi get two abi and we're
251:03 - gonna do a params and we'll do a two
251:05 - current account and the amount that we
251:08 - send back should be the amount that we
251:10 - requested so if i do units.token here
251:13 - we'll put the amount which is again the
251:15 - state that it's going to get updated 18
251:18 - comma here and cool so that's it for the
251:20 - option let's see what am i missing oh
251:23 - yeah the reason why i see squigglies is
251:24 - because we made the try but we haven't
251:26 - made the cash so let's make the catch
251:27 - pretty quickly console.message
251:31 - yes
251:32 - okay cool all right so now that we set
251:33 - up the options come below here we got to
251:36 - set up all our transactions and their
251:37 - receipts so if i say let from
251:40 - transaction are we going to be calling
251:42 - morales.transfer or morales.execute
251:45 - function for this one okay take a guess
251:47 - let's see if you're right what i'm gonna
251:48 - do is await
251:50 - morales.transfer all right because i
251:52 - want to transfer that token and send it
251:54 - to the contract that i'm sending it to
251:57 - so that's why i put it i passed in from
251:59 - options and then the next variable if i
252:01 - do two mint transaction i'm going to do
252:04 - now i'm not going to do transfer i want
252:06 - to execute the mint function like i said
252:08 - with the example i want to transfer my
252:10 - doge to this contract address and this
252:13 - contract should mint me usd cd token so
252:15 - bring it back to me and then let's set
252:17 - up our receipts which is going to be
252:19 - from receipt is equal to a weight from
252:23 - transaction.weight and that to receipt
252:26 - is equal to a weight to mint transaction
252:30 - that would be amazing right so this is
252:31 - making sure i send the tokens first and
252:33 - then i get minted the new ones that i
252:35 - wanted to swap too cool and just to be
252:37 - safe we can just console log the from
252:39 - receipt and con then console log the to
252:43 - receipt okay cool hit save and all we
252:46 - got to do now let's see is set all the
252:48 - states yeah i think i'm going to do now
252:50 - is actually just pass down a lot of
252:52 - things from value so get 10 coins open
252:56 - by crypto model the set opened by crypto
252:59 - model the coins right oops sorry not the
253:02 - coins the
253:04 - from token the two token the set from
253:07 - token set to token the amount set amount
253:12 - the mint function oops mint and the open
253:16 - mode cool yeah so open model is a
253:18 - function we haven't created that that's
253:19 - why we don't see it yet so let's go
253:21 - ahead and work on that open more all
253:23 - right the open modal function you can
253:25 - just put it down here it's pretty simple
253:27 - const open model it's basically a
253:29 - function that controls the toggle of the
253:32 - open model so what we could do to do
253:34 - that is set open pi crypto model to set
253:37 - it to true awesome that's all we need to
253:38 - do for openmodel and let's see this open
253:41 - by crypto model why is that squiggly
253:43 - open by crypto model oh this needs a
253:46 - comma that's why okay cool and that
253:48 - should be it for now uh we didn't set up
253:50 - the query yet but i can do that what i
253:53 - can do next is set up the database to do
253:55 - just that okay cool one thing i'm
253:57 - excited to show you guys is that morales
253:59 - actually has a database that we could
254:00 - use and for that database i want to be
254:02 - storing my coins in there okay so what i
254:05 - want to do head over to morales.org
254:08 - login already logged in and head over to
254:11 - your server minus coinmarketcap we can
254:14 - head over to the dashboard and this is
254:16 - literally our database as you can see
254:18 - remember when we logged in for the first
254:19 - time and stored the users what we need
254:21 - to do next is if you do this plus right
254:23 - here we can add a new class so the class
254:27 - that i want to add is just coins and
254:28 - let's just create the class like i said
254:30 - we're storing all the coins in here what
254:32 - i want to do is add a column called name
254:35 - right it's a string we're going to keep
254:36 - track of that coin's name cool all right
254:39 - so after you make that name column let's
254:41 - add a row and here we could just define
254:43 - all of our coins so i'll just do it real
254:45 - quick and just die yep so let's die just
254:48 - hit add now we have a die coin all right
254:50 - i'm gonna hit plus again and for the
254:52 - name we can put dogecoin be wary of how
254:55 - you're naming this and keep it
254:56 - consistent throughout so then this one
254:58 - will be
254:59 - usdc usdc and i think the last one was
255:03 - link so i just want to keep it like this
255:05 - and after that we have all the coin so
255:08 - we set up our database we manually put
255:11 - coins that we wanted to store now the
255:13 - question is how can we access this
255:16 - database that's what use morale's query
255:18 - is for so coming back to the top seeds
255:20 - right here we can actually comment back
255:22 - out to the query and what we're going to
255:24 - do is just a little bit of destructuring
255:26 - so what you want to do is a const object
255:30 - equals use moralesquery and what we want
255:33 - to do after this point is let morales
255:36 - know what do you want to query from them
255:38 - i want to query points and it should be
255:40 - exactly how you spot the class and the
255:42 - next thing is the data is going to be
255:44 - passed in as coins all right then
255:46 - there's going to be an error here in
255:47 - case there's an error and ross has this
255:49 - is loading state that you can define as
255:51 - loading points okay cool i'm gonna hit
255:54 - save and now that we added coins and
255:56 - loading coins also make those two things
255:58 - global so now i can add coins and now i
256:01 - can have loading coins okay and that's
256:03 - how easy it is to query with the morales
256:05 - database and we can make use of it now
256:07 - so that's pretty awesome they just did a
256:08 - lot of the heavy lifting there so now we
256:10 - passed a lot more things to the provider
256:13 - to make them global now it's about
256:15 - taking those global variables and
256:17 - functions and making use of them inside
256:19 - our app all right so if you look
256:22 - when did this model come up it's going
256:24 - to come up when i press this buy button
256:27 - and you can see
256:28 - the component loads but where would this
256:30 - buy button come into play if you go into
256:33 - here it's gonna be in the coin name row
256:36 - so go to coin name row and let's make a
256:39 - couple of updates and one of the updates
256:41 - i want to make is come to the top over
256:43 - here and let's import a hook it's going
256:46 - to be the use context hook and if we
256:49 - import the use context we got to specify
256:51 - what context are we getting i want to
256:52 - say it's the coin market context context
256:56 - folder context file nice cool so once
256:58 - you get that though go inside the
257:00 - function component and what we want from
257:03 - here is the open modal function right
257:07 - and it's going to equal use context
257:08 - right i'm pulling open modal from coin
257:11 - market context what is openmodel it is
257:14 - just a function to set this to true and
257:16 - we also passed it down here yeah cool so
257:19 - now it's a question of when do we use it
257:20 - the only thing i'm going to add though
257:22 - is scroll down to the bottom and when
257:24 - it's closed over here in the span tag
257:27 - just add the on click on click arrow
257:29 - function so it doesn't run right away
257:30 - and let's do open mode okay yep and now
257:33 - we're making use of it hit save and
257:35 - we're good to go once you update that we
257:38 - now need to make the actual component
257:41 - itself this thing right how do we make
257:43 - that and where do we make it you're
257:44 - going to want to go back to your index
257:46 - again so head back to your index and go
257:49 - to underneath this header there should
257:50 - actually be another component here
257:52 - called swap crypto model we're making
257:55 - our own custom one as opposed to last
257:57 - time where we had to import it a react
258:00 - library so again this doesn't exist so
258:02 - let's make it so in components new file
258:05 - swap crypto
258:07 - modal.js and rafce there we go and now
258:11 - that we made the component let's go
258:13 - ahead and start finishing it out this is
258:16 - going to take in a hook it's going to be
258:18 - used context okay after we use context
258:21 - let's import coin market context from
258:24 - the context slash context cool so import
258:28 - the hook import the context you want to
258:29 - use and after that let's start with the
258:32 - styles and for the styles we could do a
258:34 - modal with w screen h screen pg
258:38 - gray dash 900
258:41 - then we do a z index of 10 make it fixed
258:44 - with a top 0 left zero flex property and
258:48 - then we can do an items dash center and
258:51 - a justify dash center okay comma here
258:55 - and let's go to the next one which is
258:57 - just going to be modal content div which
259:00 - will have a background of white let's
259:02 - make it a little rounded large p
259:05 - dash three w max and w dash one divided
259:09 - by three cool next let's style the input
259:12 - which will be with dash full p
259:15 - 2 border rounded dash lg mb-5 border
259:19 - dash gray
259:21 - 600 slash 50 and outline dash okay from
259:25 - there we could add a button there we're
259:27 - going to add a button of bg bracket
259:29 - hashtag six one
259:32 - eight eight fff p two px dash five let's
259:36 - do a rounded dash lg text being white
259:39 - hover or pass city dash fifty and for
259:42 - the label i want a font bold text dash 3
259:47 - xl close modal button is hover text red
259:52 - dash 300 that's the type of red then for
259:54 - the text it's going to be gray 600 and
259:58 - cursor dash pointer awesome all right so
260:01 - for here let's talk about what we're
260:03 - getting from the context which is
260:04 - actually getting a lot of things so it's
260:06 - cons object equals use context all right
260:10 - pass in what you want to use coin market
260:12 - contacts and now let's get what we want
260:15 - from our contacts which will be the open
260:18 - by crypto model the set open by crypto
260:24 - model the mint the coins loading coins
260:28 - amount the set amount the from token the
260:31 - set from token the two token and the set
260:36 - to token
260:38 - that was a lot but all the functionality
260:40 - lives in this component and that's why
260:41 - there's so much cool and there's some
260:44 - conditional rendering here you can just
260:46 - make it from scratch if opened by crypto
260:49 - model if that's true if it is true then
260:51 - let's return the actual modal itself so
260:54 - div that class name is styles model then
260:58 - there's div class name styles dot model
261:02 - content which will have a div oops that
261:05 - doesn't have a name it actually just has
261:07 - flex items dash center and a justify
261:10 - between okay for the p the class name
261:12 - oops class name of this one will be the
261:15 - label so styles.label and it's going to
261:17 - be swap your crypto and from there it's
261:21 - going to be a p tag again which will
261:23 - have a couple of different things first
261:24 - one being the class name of the close
261:27 - mode or sorry styles dot close motor
261:29 - button okay styles that close mode
261:31 - button and then there's gonna be on
261:32 - click which is just gonna have a
261:35 - function that sets up the set open by to
261:39 - false this is how we close the modal
261:41 - we're just messing around with state and
261:43 - whenever we close it let's set the
261:45 - amount to zero and then clear out any of
261:48 - these other states so that way when we
261:50 - open it it's like fresh okay cool then
261:52 - uh there should it just say close end
261:55 - times and i'm seeing squiggly because
261:57 - this shouldn't be here this is extra one
261:59 - and also because this close end times
262:02 - should be in between the p like so there
262:04 - you go awesome all right so closing p
262:06 - closing div then opening div this one
262:08 - just has mb five okay this will have a
262:11 - label tag which will have a html from
262:15 - token and the class name of block and
262:17 - b-2 and then ml-2 and here we have a
262:21 - select and the select has a couple
262:24 - properties too select has name as from
262:27 - token class name as the input the
262:30 - placeholder as token to swap and on
262:35 - change is going to be e set from token
262:39 - to be the e dot target dot back
262:43 - okay basically set the token to be one
262:46 - of the options all right and the options
262:48 - are going to be based off the conditions
262:51 - in context yeah if die if eth if usdc
262:56 - cool so going back to this need to
262:57 - target that value and the value can be
263:01 - from token from awesome and i think
263:04 - we're importing yep we're importing the
263:05 - coins that we get so what we could do is
263:08 - in between the selects we can do a
263:11 - coins.map this is pretty cool here so
263:14 - for every coin i want to
263:16 - map through it and if loading coins all
263:20 - right all right if it doesn't exist yet
263:22 - return all right if it's not loading and
263:24 - it already exists then we can return the
263:26 - option with the key
263:28 - of the coin id basically it's a dynamic
263:30 - way to get all the coins and pass it in
263:33 - as the option i think it's pretty smart
263:34 - so if you do a coin dot attributes dot
263:37 - name that's how you grab the names and
263:39 - put it as the value and then you can
263:40 - actually put the text itself attributes
263:43 - that you know oh next close off the
263:46 - option here and put it in between that
263:47 - looks good to me no more squiggly errors
263:50 - we're good to go okay and then now
263:52 - there's another option that we're not
263:53 - going to be getting this is this the one
263:55 - the value is equal to eth and then
263:58 - eighth option just to show you guys real
264:00 - quick this is how we're getting all of
264:01 - these guys right here and that's why eth
264:03 - is the last one that's what we're
264:05 - setting up because we didn't make an eth
264:07 - uh coin inside our database okay select
264:10 - label and this is the html4 from token
264:14 - it's equal to block and b
264:17 - two and then oops dash two ml of dash
264:20 - two as well and there's a two then there
264:23 - is a select all right the job of this
264:25 - select is to get all the two tokens
264:28 - where we did the from let's do the two
264:29 - so name equal to to token
264:32 - class name styles.input placeholder the
264:36 - token you want to swap to okay then on
264:38 - change it's going to be an e that's set
264:41 - to token with the target value and the
264:43 - value equaling the two token okay and we
264:47 - can do the same thing we can get a
264:49 - dynamic way to get all the coins if we
264:50 - do a coins.map you do a coin here if the
264:54 - coins are not loading meaning that it's
264:56 - already loaded then we can return
264:59 - did i do return the last one yes i did
265:01 - then we can return the options or option
265:04 - and for the key coin the id value will
265:07 - be coin.attributes.name
265:10 - and what we'll see as text though will
265:12 - be the same thing coin.attributes.com
265:16 - okay all this stuff select let's put
265:18 - label this will be amount oops amount
265:21 - the class name will also be a block and
265:23 - b dash 2 ml-2 and there's going to be
265:26 - and there's going to be an amount here
265:28 - as the label and after we put that label
265:30 - we need to make the input field so that
265:32 - we can insert the amount of tokens that
265:35 - you want to get one of these the name of
265:37 - this will be amount the class name
265:39 - though will also be
265:40 - styles.input placeholder token to swap
265:45 - value is amount and on change all right
265:48 - we should be updating the state of set
265:51 - amount and e.target
265:53 - dot five okay closing then now i just
265:56 - need the button and then we do click
265:58 - this will be mint click run the mint
266:00 - function from our context which is going
266:04 - to handle the swapping of tokens all
266:06 - right it all comes together here and
266:08 - here we can just say swap you can name
266:10 - the button anything this is just the
266:11 - label for it hit save otherwise i'll
266:14 - just return oh wait a second this is the
266:16 - swap model now
266:18 - okay and i just realized this if
266:20 - statement doesn't need these curly
266:21 - brackets so it's still good the main
266:23 - thing though is putting on return this
266:26 - because if open modal is not true then
266:29 - it should just be empty so nothing all
266:32 - right so now for the moment of truth
266:33 - let's also save our index but before we
266:36 - can save index let's import the
266:38 - swap crypto from
266:47 - save this isn't the actual one okay what
266:49 - we want is uh our netlify dip which will
266:52 - open a localhost 888. oops not found
266:56 - that's interesting let's try that one
266:58 - more time ntldf
267:00 - keep saying not found let's try it again
267:02 - localhost 888 so strange oh i think i
267:06 - know why it's not found if you look at
267:08 - the terminal i'm still in the smart
267:10 - contract folder so of course there's
267:12 - nothing in there if i just do a control
267:14 - b real quick and i'm looking smart
267:16 - contracts yeah there shouldn't be a
267:18 - netlify here so i'm just going to let
267:20 - the netlife functions folder from my
267:22 - contracts there you go so let's make
267:24 - sure the cd out of this make sure you're
267:26 - at the main root of your folder and then
267:28 - we could do the fun stuff then we could
267:30 - do entl that makes a lot more sense
267:33 - yes
267:34 - beautiful click bitcoin the price the
267:37 - info page works if i click the price the
267:39 - prices work if i click buy the swap
267:43 - crypto model works let's freaking go the
267:45 - front end is a-okay now let me show you
267:48 - guys how to actually use it so now the
267:51 - question is lance how do i actually
267:53 - start swapping tokens the answer is go
267:56 - to your metamask and make sure you have
267:58 - some ethereum if you don't have any
268:00 - ethereum or test ethereum go watch our
268:02 - previous video watch the robin hood
268:04 - clone and i'll show you guys exactly how
268:06 - to use the faucet to get more okay cool
268:09 - but if you already do have ethereum and
268:12 - you want to start swapping tokens one of
268:14 - the things that you're going to do is go
268:15 - over to your code head over to your
268:18 - context in context your constants and
268:20 - remember all those addresses i told you
268:22 - to save we're going to be needing those
268:24 - so if i make this a little bit smaller
268:26 - and do like an alt z let's see awesome
268:29 - cool so click import tokens and the main
268:32 - thing is you want to be able to copy
268:35 - each address look what happens if i copy
268:37 - over that address okay and we actually
268:39 - should see the contract address which
268:41 - tells me that i did something wrong i
268:43 - might know the issue i haven't showed
268:44 - you set up here already but this is what
268:46 - we did last time like we did an npx hard
268:48 - hat run scripts we're supposed to add
268:51 - something onto that so let's cd back to
268:52 - the smart contract do the npx hard cat
268:56 - command and we want to do network search
268:58 - network and then we say rink b like so
269:01 - awesome so this is the step that i might
269:02 - have forgotten let me hit enter and if
269:05 - the contract addresses are different we
269:08 - might have to update some things that's
269:10 - why i was so fast last time so now it's
269:12 - taking a little bit of a second i see so
269:14 - that's the new address okay so link
269:17 - tokens done let's update these addresses
269:19 - as they come so doge is now uxd link is
269:23 - now ox7
269:25 - die is now oxe and usd is gonna be this
269:30 - cool all right and
269:32 - let's do that paste so oxp is for usdc
269:35 - awesome so again whenever we deploy our
269:38 - artifacts get recreated and we have to
269:40 - update our lib folder so all of these
269:43 - json files go ahead and delete cool so
269:47 - now we have to put them back now that we
269:48 - have new ones so this is the die one
269:51 - copy paste let's die let's do doge
269:53 - remember get the json not the dbg paste
269:57 - that's doge let's get the link and i'll
270:00 - just get usdc based and we don't need to
270:03 - write anything else because it still
270:04 - should be the same so there we go all
270:06 - right so now let's try this if i get the
270:09 - dojo address now and take this out
270:11 - replace it hey so now it should
270:13 - automatically populate right because
270:15 - it's what's at that address so it's
270:17 - reading doge token decimal 18. so now we
270:19 - add that custom token and do import
270:21 - tokens and now when i get doge tokens
270:24 - i'll actually see a balance of it so
270:27 - let's do the same for the rest take this
270:29 - this is for the link address yep so it's
270:31 - automatically says link i don't have to
270:32 - write anything at all cool let's do die
270:35 - add custom token import cool and look
270:38 - how automatic says ustc awesome so now
270:41 - we have all these tokens we have
270:43 - ethereum to spend we're on the rinkeby
270:45 - test net let's see if this actually
270:48 - works so i'm gonna hit buy and the first
270:51 - thing we're gonna need to do is make
270:53 - sure that we switch to eth and then we
270:56 - do one of the tokens that we want so
270:58 - let's say i want to get die for eth the
271:00 - amount that i want let's do all right so
271:02 - if i say swap let's see if anything
271:04 - happens crossing my fingers and nothing
271:08 - ah websocket connection failed yep so if
271:10 - you see websock connection probably be a
271:12 - good idea for me to actually run the
271:14 - server because i forgot i stopped it so
271:16 - cd dot dot let's try ntl dev it's gonna
271:18 - make a new local host boom there we go
271:20 - and of course we can't forget it's not
271:22 - even gonna work if i don't connect to my
271:24 - wallet so let's click
271:25 - this log in so crazy that this is just a
271:28 - button but other than that let's click
271:30 - the let's get eth let's get die and
271:33 - let's make sure that it's 50 i said swap
271:37 - ah still not working cannot read
271:39 - properties of undefined reading filter
271:41 - and then there's a one in uncop promise
271:44 - receiver is required interesting okay so
271:46 - it can't read properties of undefined
271:49 - but my guess is because i switched this
271:51 - to ether and i didn't really switch this
271:53 - so maybe if i click usdc oh nice okay so
271:56 - the swap works when i click usdc but
271:57 - that makes me realize there's some sort
271:59 - of bug here if i don't swap this
272:01 - anything it's thinking that the two
272:03 - address is undefined so what we could do
272:06 - to fix that is by going back into the
272:08 - code and
272:10 - if we go to our states we can actually
272:13 - make the from token default to eth
272:16 - unless we switch it because it's where
272:17 - it should be i think let me see if i
272:18 - click oh yeah it's like die to die so
272:21 - that just tells me the default from
272:23 - should be empty but really the two one
272:27 - is what matters if i don't change it at
272:29 - all it should just stay as die yes
272:31 - okay so now if i hit save let's hit
272:33 - refresh and now i don't even have to
272:35 - change the state i believe cool api
272:37 - thank you eath swap swap interesting
272:40 - okay so i just hit refresh let me just
272:43 - do more and i think now if i hit eth i
272:46 - put 50 i click swap there we go so i
272:49 - just made the initial state die so that
272:52 - i don't even have to change it otherwise
272:53 - this would be undefined cool i'll hit
272:55 - confirm and see if this goes this is the
272:58 - contract interaction i might have done
273:00 - something twice but now i just open
273:02 - metamask and just let it pinned yeah
273:04 - this could take a couple minutes
273:05 - depending on the no oh look at that 50
273:08 - die let's go so the contract interaction
273:10 - went through and now i got 50 tokens so
273:13 - what i can do next all right is go to
273:16 - die and let's get some usd and i want to
273:18 - change like 13 of my die to ustc swap
273:22 - confirm right confirm okay open menu
273:25 - mask and just wait for this mint
273:27 - function to process and what you just
273:29 - see is i lose 13 dive but gain 13 usdc
273:32 - okay hey there it is it went through so
273:35 - now we have token to token functionality
273:38 - which is amazing so that's it guys
273:40 - that's the web 3.0 part the smart
273:43 - contract section the only thing that you
273:46 - guys are need to do next is if i click
273:48 - this page right here let's get this chat
273:51 - app up and running but so far you guys
273:53 - are crushing it let's go to the next
273:54 - part so like i said i want to get this
273:56 - chat app working and if you guys didn't
273:58 - know this chat app is going to be
274:00 - utilizing something called gun js what
274:02 - is going.js basically it's a
274:05 - decentralized graph database right the
274:08 - best way i can describe it to you guys
274:10 - is if you think about a centralized
274:12 - database think of something like
274:14 - facebook when you make an account where
274:16 - does that data get stored it gets stored
274:17 - with facebook when you send messages
274:19 - where is that data facebook so what if
274:21 - facebook went down one day right where
274:23 - is your information it's gone right
274:25 - because it's all in one place the
274:26 - difference with a decentralized database
274:29 - is that there's a bunch of something
274:31 - called nodes so if i draw like a circle
274:33 - here can you guys picture that as a node
274:34 - think of a decentralized database as
274:37 - something made up of nodes so here's one
274:39 - node and this node can represent like a
274:41 - user and this node can be connected to
274:44 - another node right let's draw this one
274:45 - this is another user and the connection
274:47 - goes both ways but essentially what
274:49 - happens is that the decentralized
274:51 - database is split up into multiple
274:54 - different nodes which each node contains
274:56 - a piece of data so this is a piece of
274:58 - user this is a piece of a user and this
275:00 - is a piece of a user they all
275:02 - communicate with each other and interact
275:04 - and have a reference to each other it's
275:05 - called a node relay so this is how they
275:08 - all are up to date with each other's
275:10 - information and all of these nodes are
275:13 - part of a giant ecosystem that makes up
275:15 - the gun js ecosystem so to get started
275:18 - with gun js and to send messages to
275:21 - different users or just to have a whole
275:22 - chat app we have to set up one of these
275:25 - nodes we can actually set up a node by
275:27 - using something called heroku and one
275:29 - thing to note if you guys watch the
275:31 - discord clone my previous video where i
275:33 - show you how to set up a node we're
275:35 - going to use that exact same node there
275:36 - so if you want to learn how to set up a
275:38 - node go ahead watch that video watch the
275:40 - first 10 minutes and i'll show you guys
275:42 - how to set up the node what i'm going to
275:44 - be showing you guys is what to do after
275:46 - you set up okay so let's head to our
275:47 - code and get it set up so what we're
275:49 - gonna need to do is make a new file and
275:51 - let's call it gun context so i'll say
275:54 - gun context dot js and what we're gonna
275:56 - need to do here is control b and we can
275:59 - make this bigger let's add an import
276:02 - create context right because we want to
276:04 - create a context we also want to use
276:06 - state let's also use reducer and we got
276:08 - this from react awesome okay and after
276:11 - that's done what i need to do is import
276:13 - gun from gun right like i said we're
276:16 - using gun js to make sure if you have
276:18 - gunjs if you go to package.json just
276:20 - double check you have it yeah we're good
276:22 - cool so now that you have a gun let's
276:23 - import it and what you want to do here
276:25 - is const gun is equal to gun and then
276:29 - pass in the array of
276:32 - your node we use the discord one from
276:34 - our youtube and it's gonna be something
276:36 - like this right taking this straight
276:38 - from the discord clone if you wanna know
276:39 - how to do that just watch the video let
276:41 - me show you guys what to do with said
276:42 - note right so after you set up the gun
276:45 - node what we're going to do is set up
276:46 - the context so let's do export cons gun
276:50 - context is equal to create context okay
276:53 - and then from there we can set up the
276:55 - reducer so what i want to do is set up
276:58 - some initial state i say const initial
277:01 - state set that equal to messages right
277:04 - so this is the state i want to keep
277:06 - track of if there's any messages around
277:09 - here if right now at the very beginning
277:11 - there should be none and that's why it's
277:13 - the initial statement cool next is i
277:15 - want to set up a reducer here const
277:17 - reducer and it's going to take in the
277:18 - initial state and an action and what we
277:21 - could do is add a try catch okay then we
277:23 - can console.error for error and usually
277:26 - with reducers you want to check for the
277:28 - action types so if the action that type
277:32 - is equal to clear then that means i'm
277:35 - trying to clear my messages so if i want
277:37 - to clear my messages what i want to
277:39 - return is the state with messages that
277:42 - make sense that's what the action should
277:44 - be if the action that type is to add
277:48 - what does that mean we're adding a
277:50 - message to that array so to do that what
277:52 - we want to do is curly bracket here
277:54 - since there's a return and what we want
277:56 - to do is messages and we can use a
277:59 - spread operator for the state that's
278:01 - passed in got messages so basically
278:03 - whatever message are already is there if
278:06 - there is any and then add
278:08 - action.data okay cool so those are
278:10 - reducers awesome and then what's next is
278:13 - after the reducer let's set up the
278:15 - provider so export const gun provider is
278:18 - equal to arrow function and in the
278:21 - parentheses it's going to take in
278:22 - children this is pretty standard stuff
278:24 - just like last time and then over here
278:26 - it's gonna return the gun context
278:30 - provider okay and in between it also
278:32 - takes children and the key thing here is
278:35 - in the opening tag it should have value
278:37 - equals and then you want to pass in
278:40 - whatever you want to make global which
278:41 - will be the get messages function which
278:44 - i haven't created yet and the state okay
278:47 - cool so we have those things passed in
278:49 - children gone context provider okay and
278:52 - while we're here let's go ahead and
278:54 - create get message so in the gun
278:56 - provider let's make use of use date and
278:59 - set it up sorry not use state use
279:01 - reducer actually use reducer and we want
279:03 - to pass in the reducer and the initial
279:06 - state okay and then we want to pass in
279:08 - state and dispatch awesome then we can
279:10 - do a const get messages here okay so if
279:13 - we do get messages and that's an equal
279:16 - function and we can pass in underscore
279:19 - name and essentially what we do is cons
279:21 - messages ref is equal to gun dot get the
279:25 - name okay and then after that we can do
279:27 - messages ref dot map dot once and then
279:31 - do a message here okay cool and then now
279:33 - we're actually going to use dispatch
279:34 - here to run a specific action so if this
279:38 - is get messages the type of this action
279:40 - will be add and the data that i want as
279:43 - the payload which will be sender will be
279:46 - the message.sender the content will be
279:49 - the message dot content okay the
279:52 - avatar will be message avatar created
279:56 - app will be message dot created at the
279:59 - message id will be the message.message
280:02 - id and the is bullish will be message
280:07 - that is bullish cool so if all of these
280:10 - properties are looking familiar to you
280:12 - that's because this is something that
280:13 - we're going to be passing in inside our
280:16 - chat component soon all right so now
280:18 - that's set up i think that should be it
280:20 - for the gun content awesome okay and
280:22 - then after we complete the contacts if
280:25 - you remember we need to wrap our app
280:27 - with that same provider so what we want
280:30 - to do is i think it's called gun
280:32 - provider yep there we go let's import
280:34 - that same provider gun provider and
280:36 - let's get it from the context from that
280:39 - context slash gun context there we go
280:41 - and now that we got the gun provider
280:43 - let's wrap it around our app so here gun
280:46 - provider take whatever was in there just
280:49 - wrap that whole thing boom so inside we
280:52 - have the morales provider which has the
280:54 - gun provider which has the coin market
280:56 - which has our app so that's good to go
280:58 - so now the app is done remember we have
281:00 - to update our chat component with the
281:02 - contacts now so what i want to do is
281:05 - control p let's go to chat and let's
281:08 - take a look at what we need to add so if
281:10 - i'm looking one thing that i forgot to
281:12 - mention there's a package called faker
281:14 - so let's import faker from at faker js
281:19 - slash faker so what that means is we
281:21 - also need to install that so if i do a
281:24 - yarn ad at baker js faker okay then you
281:27 - can install with npm or yarn depending
281:29 - on what you use i just installed it so
281:31 - now i have faker.js so that looks good
281:34 - and now let's get the context right so
281:37 - i'm using use context here and use
281:39 - effect but i haven't used it yet let's
281:41 - also import the gun context done context
281:45 - and we can get con contacts from cool so
281:47 - once we import it let's also destructure
281:51 - what we want from it so it's const
281:53 - object use context let's do let's get
281:56 - the gun let's get messages and let's do
282:00 - state okay one of the first things that
282:02 - i want to do is come down here and let's
282:05 - start writing our use effect our use
282:07 - effect it's pretty simple all it's going
282:09 - to do is run get messages i think it's
282:11 - get messages right so i want to check
282:13 - get messages and it should be get
282:15 - messages so run get messages and what we
282:17 - could pass is the reference to our gun
282:20 - which will be gun ref seven okay and
282:23 - then from there we could do a comma
282:25 - bracket awesome and next i want to make
282:27 - a function and i'm gonna call it const
282:29 - formatted messages array and basically
282:32 - what happens is gun stores messages in a
282:35 - really weird way i want to use this
282:37 - function to convert those messages into
282:39 - an array so that we can render it with
282:41 - the ui this is the function let's say a
282:44 - variable cons unique array equals to
282:49 - dot state.messages.filter that value
282:51 - index okay and then here we could say
282:53 - const underscore value is equal to
282:57 - json.stringify okay and we can do a
282:59 - return and for the index make sure it's
283:02 - equal to the state and when you get the
283:05 - state you want to access the messages
283:07 - that's what it's called state.messages
283:09 - and then find index so we're finding the
283:11 - index in that state and we want to make
283:13 - sure it matches so if it does match
283:15 - we're going to return json.string
283:16 - json.stringify
283:18 - object check it against the value and it
283:20 - should return true if it is if there is
283:23 - a message and it matches all right
283:25 - that's the key here and then once we're
283:26 - done we should have a unique array with
283:29 - the messages that our ui can understand
283:32 - that's the point of formatted messages
283:33 - all right and we have this lonely send
283:35 - message function that i set up a while
283:37 - back but now it makes more sense
283:39 - basically we want to just trim the
283:41 - message like the space in front of it or
283:43 - the space behind it and if it equals
283:45 - empty then just return okay otherwise we
283:48 - can say const messages ref is equal to
283:52 - gun dot get the same thing which was the
283:54 - gun ref seven cool then we can say const
283:58 - new message so we're about to set up the
283:59 - variable that has the new message the
284:02 - sender whoever created that message we
284:04 - don't have any users attached to it so
284:06 - we're going to generate a random name
284:07 - using faker.js so we can get a random
284:10 - name by doing
284:11 - faker.name.finding okay comma and then
284:13 - the avatar remember i set it to the
284:16 - little sheba thing we don't need to
284:17 - anymore because i have the link to it
284:19 - okay and the avatar we use is this one
284:22 - it's pretty much a default avatar if you
284:24 - want to pause the video to copy this
284:26 - exactly you can i suggest just putting
284:28 - your own image that you want that every
284:31 - person should be so that's the avatar
284:33 - then the content here will just be the
284:35 - message and then trim it and then the is
284:37 - bullish value will be bullish value oh
284:40 - don't forget to put the comma here then
284:41 - we can do a created at with a date dot
284:45 - sub string 4 11 and a message id of date
284:49 - dot net that's how we can get like the
284:51 - current time stamp cool so this is all
284:53 - the data for the new message then we can
284:56 - just do a message messages
284:58 - ref dot set and then set that new
285:01 - message inside there cool and then cool
285:04 - then we can do a set message here right
285:06 - back to empty right whatever you put an
285:09 - input set it back to empty after we set
285:11 - it so it's cleared out awesome so is
285:13 - there anything i'm missing or con took
285:15 - out set bullish true awesome ah yes this
285:19 - whole chat card thing so remember
285:20 - formatted messages array is going to
285:23 - give back to us an array so what we want
285:24 - to do is call it here right and after we
285:28 - get the array back let's slice it zero
285:30 - then reverse it and then map through it
285:33 - so then do that and then when we map
285:35 - through it let's do a message and pass
285:37 - an index so we can give it a key then we
285:39 - can do one of these and basically for
285:42 - every single message that is there we
285:44 - want to generate a chat card and we can
285:46 - actually make this a one-liner by
285:48 - removing the curly brackets because all
285:51 - we want to do is return chat card and
285:53 - then for this part remember all the
285:54 - stuff that we passed down it's going to
285:56 - be the key will be the index the sender
286:00 - will be the message.sender the sender
286:03 - username this one is lowercase equals
286:05 - message dot username sender avatar will
286:09 - equal the encrypted thing that i have
286:11 - it's the avatar whoa so after the center
286:14 - avatar we're gonna have the bullish
286:15 - property which will be message dot is
286:18 - bullish and the timestamp will be the
286:21 - message that created that it's basically
286:23 - what we set up earlier i'm just passing
286:25 - it down as a prop the content will equal
286:28 - message.content
286:29 - the likes this one's going to be static
286:32 - it'll always be 2.7 you can make this
286:34 - random using math.random and then
286:37 - concatenating a k if you want for an
286:39 - extra detail but i'm going to keep it
286:40 - static for now comments like so cool
286:43 - forgot to put the opening parenthesis
286:45 - and just another closing one here
286:47 - perfect and since we updated these
286:49 - parameters i just want to make sure chat
286:51 - card is updated as well so chat card so
286:53 - let's go to chat card real quick and for
286:55 - chat card we don't need some of the
286:57 - default props the content can just be
286:59 - empty string by default and i believe
287:02 - the sender avatar can be here instead of
287:05 - sheba okay cool i hit save oops i saw an
287:08 - error somewhere let me just check that
287:10 - oh yeah yeah that's because not running
287:12 - the server duh so let's run the server
287:14 - install div and we should be pushing
287:15 - soon so that we can make this live again
287:17 - let's connect my wallet just because
287:19 - it's really cool it's a sign okay now i
287:21 - refresh and i'm getting this error i
287:23 - just have to make sure to run the server
287:24 - and now we're all good now i'm logged in
287:27 - login log back out there you go that's
287:29 - what's supposed to happen the main thing
287:30 - that i want to check is if i click
287:32 - bitcoin what happens messages.ref is not
287:35 - defined so if messages.ref is not
287:37 - defined let's go check out the context
287:40 - message ah duh it's saved let's try that
287:43 - again ghost bitcoin hey okay we're good
287:46 - so now let's see if this works moment of
287:49 - truth hello
287:50 - post got it so reading properties of
287:53 - undefined reading filter that's fine so
287:56 - this is under chat.js i still got that
287:58 - error let me just show you guys again it
288:01 - is the
288:03 - messages.filter reading on the filter so
288:05 - if that's a case getting on context
288:08 - using the contacts get messages okay so
288:11 - the next step is to console.log
288:14 - state.messages let's see what it is i
288:17 - don't even have to console over here
288:18 - console here uh let's just take out this
288:20 - array bitcoin okay formatted array is
288:23 - fine but if i check the console.log will
288:25 - it show okay so we're getting array zero
288:27 - that's a good sign but whenever i put
288:29 - the filter now it just keeps rebuilding
288:32 - interesting cool okay all right let's
288:34 - try this again and click bitcoin and it
288:36 - says cannot read messages dot filter all
288:40 - right let's go back to here and let me
288:41 - just go back to the
288:43 - gun context and for the context what i
288:47 - want to see is cons oh i see initial
288:51 - state should have an i and that should
288:54 - also have an i but the real problem is
288:56 - the messages ah this should be messages
288:58 - so i hit save okay now let's see i click
289:01 - bitcoin hey
289:02 - let's go we got hi we got hello and
289:06 - let's
289:07 - frickin
289:08 - oh awesome look at that there's our chat
289:11 - app working notice how it's all bearish
289:14 - and let's go it's lit now it's bearish
289:17 - awesome so look at that guys we have a
289:20 - amazing app on our hands we can swap
289:22 - tokens we have smart contracts and we
289:25 - have a decentralized chat app on the
289:28 - side so this is awesome this has been a
289:30 - lot of fun my friends if you want to see
289:33 - your github live all you have to do now
289:35 - is just go to your terminal and just
289:38 - type in git status because remember with
289:41 - netlify if we do a good status all right
289:43 - and do a get add dot get commit
289:47 - finished app and get push what this is
289:50 - going to do is deploy and re-deploy your
289:53 - live link on netlify if i go to
289:56 - app.netlafy.com you go to coinmarketcap
289:59 - i showed you earlier look it's building
290:01 - and pretty soon your site will be live
290:03 - and once it's done you'll have a live
290:05 - link that looks exactly like this with
290:08 - the table and everything and all you got
290:10 - to do is send it to your friends and
290:11 - you'll be good to go all right guys this
290:13 - has been it if you like more videos like
290:15 - this be sure to look out for the next
290:17 - one and it says now localhost not
290:19 - running on my local host anymore but
290:21 - once this is done we should be good then
290:23 - that failed because again i'm not like
290:25 - hosting my server locally right now i'm
290:27 - not focused on deploying it live so
290:29 - let's just wait for this to finish
290:30 - deploy site come on
290:33 - uploading all the functions the fun part
290:36 - post processing done site is live let's
290:38 - go so our deploy preview is up or we
290:41 - could just go to the top and just look
290:43 - at it and admire mirror from afar so if
290:46 - i click on this ay
290:48 - there it is and sometimes it's a weird
290:50 - bug but the connect wall button loses
290:51 - its styling but everything should work
290:53 - okay if i click this sign in next sign
290:57 - boom we're in boys this is our app and
291:00 - it is freaking live with all the
291:02 - functionality all the pages involved
291:05 - with it if i click on bitcoin we see
291:06 - this as well there's our chat app
291:09 - amazing so then if i go back to the main
291:11 - screen this is the app so i hope you
291:13 - guys enjoyed it's been a pleasure for me
291:15 - there's a lot of front end on this one
291:17 - as well as a lot of functionality too
291:19 - not only are we swapping tokens but we
291:21 - also have a chat app installed with this
291:23 - so be sure to modify this learn a lot
291:26 - from this watch it over again and claim
291:28 - your nft from build space after you
291:30 - complete this project be sure to watch
291:32 - our last video on facebook and if you
291:34 - want to see videos on blockchain be on
291:36 - the lookout i'll see you guys next time
291:38 - it's been lance and it's been a pleasure
291:40 - peace