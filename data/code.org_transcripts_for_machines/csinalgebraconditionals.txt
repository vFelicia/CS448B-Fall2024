Booleans allow us to start asking questions in our programs such as, is the value of age greater than 15? or does name equal John? This lets us start introducing logic into our programs but to make them really smart, we want our programs to be able to make decisions based on the answers to Boolean questions. Conditionals let us do exactly that. A conditional lets you program a list of Boolean questions and their associated code. The conditional starts at the top of your list of questions or conditions and checks whether that question is true or false. If the condition is true, then the associated code is evaluated as a result. If the condition is false, the associated code is ignored and we move on to the next condition in the list. Here's a simple conditional to check the variable age and return a string describing someone of that age. Let's see what happens when we evaluate with this age set to 15. What about when age is 3? Now, what should happen if age is 50? None of our conditions evaluated true for 50. That's a bit troublesome. If none of the conditions are true, we can provide a catchall value called the else statement. The else statement only runs if none of the other conditions are true. So by adding adult to the end of our conditional, we can catch ages outside of the range of our existing conditions. The order in which you place your conditions is very important. The first condition that returns true is the one that wins. Let's look what happens if we put our agechecking conditionals in the reverse order. What would you expect it to return with age set to 15? How about 3? or 50? In the next stage, you'll write programs that use conditionals to make logical decisions. Every conditional needs to have at least one condition and an else statement. If you need to check against more conditions, click the plus button above the else statement. If you want fewer conditions, click the minus button next to the condition you wish to remove. Subtitles by the Amara.org community