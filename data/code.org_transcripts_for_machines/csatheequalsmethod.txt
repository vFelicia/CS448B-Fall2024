foreign and I'm a software engineering manager at Airbnb if you're thinking that if you pursue computer science you're going to be sitting in a dark room like looking at your screen all the time all by yourself that's not going to be it there's there's so much camaraderie and such a strong sense of community around computer science and software engineering these days you can find your community let's make two different dimes each time object has an incest variable called sense to store its value when we create a dime object it is worth 10 cents when we create two dime objects first time is not an alias of second time there are two unique objects when we use the equals operator to compare these two dimes it returns false and when we use the equals method to compare these two dimes it also returns false the equals method in the object class checks if both reference variables are aliases we want two dimes to be considered equal if they are the same value which is 10 cents we can override the equals method to compare the values stored in the instance variables both the equals method and our overreading equals method must have the same method signature when we write public Boolean for the return type and equals for the name method we use Boolean for the return type to return true if the instance variables contain the same values these are not the same it returns false inside the parenthesis we specify the parameter in this case we want to compare one object to another our parameter is type object now let's trick the computer into thinking all dimes that have 10 cents for their value are equal in the body of our equals method we write an if statement phase will compare the current object's value to the other object's value if these values are the same we return true if these values are not the same we return false we can use the equals method to check if first time and second time are the same we call the equals method on the first time object and pass the second time object as the argument now the method returns true because they both have the same value for sense we'll be writing the equals method in our classes means we can compare objects based on their specific values