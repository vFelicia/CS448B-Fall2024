hi my name is jamila and i write curriculum for code.org in this video i'm going to demo the manipulatives that are used in the curriculum as well as kind of provide some ideas for how you can use these manipulatives to help students create a mental model of the way that data types and objects and variables operate in java manipulatives are a really helpful way to help students kind of create a mental model of the way that variables and objects and different data types function so they can kind of visualize and manipulate physically manipulate with how variables are storing information and kind of that transfer of data back and forth between different variables so in this particular code segment just to kind of demonstrate different ways these manipulatives can be used here we have this code segment where we are creating a couple variables so we have a double for example and you could use envelopes instead of cutting out these manipulatives um that would do the same job you could just kind of get different sized envelopes so that way you can still model the size difference um with the different variables but we do this with the the manipulatives um i have this double variable so uh and then it's gonna store the value 2.5 so i'm going to take a scrap piece of paper and write 250 and this is going to get stored inside of our variable so i'm going to put this inside of here and close it up and i'm giving this variable the name price so i'm going to use a little sticky note here called price so price is now a double variable and inside of it we have the value 250. um on the next line of code i have um an int variable i'm going to take this int and this is going to store the value 10. i need to get another scrap piece of paper write the value 10. put this inside of our end close that up so now i have an n variable and i want it to be called first all right then on our next line i see that now i'm setting price equal to whatever the value is of price plus 0.5 so i don't know where the value is i'm going to have to take it out to get this value and i see it's 2.5 so i need to add 0.5 to it so that's going to be 3. now once it comes out of the variable it's gone in memory so i end up throwing that off to the side and i'm putting the new value of 3 and storing that inside the variable so that is the equals part of it to store it back inside the variable then on my next line i see that i'm creating another variable called second which is also an end and it's going to get the value that's in first well i don't know what's in first i have to take a peek i have 10. so close that back up get a another scrap of paper and copy that value down so that way i can put it inside my other end variable and call this second so i have double price and first is int second so this is also helpful like if you're trying to help students understand swapping values and variables for example maybe i need to swap the values that's in second and first but again reinforcing the fact that once i take the value out it's gone in memory so i can't just flip it over i'd have to create another variable to copy the value and then switch it over so these are helpful to kind of model different types of algorithms and problems that students can solve um we can also setting these off to the side um represent classes um so this other manipulative this little foldable folds in half of the class name on the outside and what i have here is a class that i'm going to this is going to represent a blueprint and i'm going to represent this shape class on my blueprint so i have shape is the name of the class i have some instance variables that are private so since they're private they're going to go on the inside um so that way they can't be accessed or seen from outside you can only access and see the things that are public or on the outside if it's private it goes on the inside so i have um int sites private boolean is filled so those are there for my um instance variables that represent my state then i see i have a constructor and i know i see that it's public so since it's public and since it's a constructor and i want other classes to be able to access and use it to create my object um i'm going to write that on the outside and i see i have state a state section on the other side i have behavior for methods and i'm going to write this constructor here shape and new sides boolean new filled and according to this we set our sides variable equal to whatever new size is and our is filled to whatever new field is our parameters so now i have my blueprint so i can create my object using my blueprint so now and i see in my console my main method i'm creating a new shape called triangle that's going to pass the values three and false to that constructor so first i need to create that variable shape triangle and since it's an object i need to use a reference variable and declare the type just like i did with the double and ends so this is going to be a type shape and it's going to be a the variable name is going to be triangle all right so now i have to create the shape this is i'm calling new shape with three falls so this larger shape um blank shape at that is going to represent objects so i can decide what kind of data is going to get stored in here so in this case it's going to be a shape object and every object that we create gets its own uh copy of the instance variables so i need to use my blueprint so i know how i'm supposed to create this object so i see that the three corresponds with the first parameter new sides so sides is going to equal three so that is an int so i'm going to get an end variable i've got my end here and it's going to get the value three so i'm putting three inside of an end and this is supposed to be for my sides now that i have that i'm gonna set this off to the side for just a second and then the false corresponds with the second value that i have or the second parameter that i have new filled which is used to set my is filled instance variable and according to that according to my code segment it's gonna get set to false so i have this little true false thing right here i'm gonna fold it in half and just to make sure we don't get confused i'm gonna fold this side over just to make sure that i can't see the other side so i have false and this is going to get set for our new is filled instance variable it is filled and both of those will go inside my shape because those are the instance variables that a shape object gets and every time i create a shape object it gets its own copy of these instance variables so i've created my shape object but now my shape variable triangle needs to point to that shape object so that equal sign part i'm just going to use some tape and i have a rubber band here that's cut in half you could also use a piece of yarn and tape one end to the shape object and the other end to my reference variable that is storing or is pointing to my shape object so that is how we could demonstrate how objects are stored and worked with with um in java and also could be used to kind of talk about like well now that we have these instance variables inside of the shape object how do i get to those values so it brings up the conversation about accessory mutator methods later on as well as even different ways like we can create different objects that can point to our different reference variables that can point to new objects or even the same objects that have already been created