So far you've been using functions to make it easier for a program to do the exact same thing lots of different times. But sometimes you want to function to do things a little differently each time. Maybe one time you want a star element to move and the next time you want the moon to move. Or maybe you want to change the color of everything on the screen to green... but later red or blue. Writing a new function for every element or color you might want to use would take up way too much time. So how can we create a function that does almost the same thing but with tiny differences. To do that programmers use parameters. A parameter is an extra piece of information passed to a function to customize it for a specific need. Let's take a look at how they work. Imagine you created two functions one to move a bike across the screen and another to move a motorcycle across the screen. These two functions are almost exactly alike. They both use "get property" to find the x position of the element and they both use the counter pattern to add five to the x position. The only difference in these two functions is that one uses "bike" and the other "motorcycle". When you have two functions that are almost exactly alike, but with one little difference, that's a great time to use a parameter to combine the two functions into one. To start off we'll need the function block that includes a parameter. Since we don't know whether we'll be moving the bike or the motorcycle let's just call the function "move vehicle". To figure out what goes inside we can look at the two functions that we already have. We'll definitely keep the code that's the same in both of these functions but the parts that were different we'll need a parameter. A parameter is a lot like a variable that we can only use inside the function. So we'll want a descriptive name like "vehicle". Also like a variable, it doesn't need quotes around it. Last, we'll change the default parameter in the parenthesis to our parameter name. Now that we have our combined function it's time to test it out. When we call our function we use parameter to tell it whether we want the bike or the motorcycle to move. This time let's move the bike. Now every time that the parameter shows up in the code the program will use "bike" instead. When we pass in "motorcycle" the program will use "motorcycle" each time the parameter appears. The best thing about using parameters is that we can use this function with any element. Even ones we haven't thought of yet. Let's say that we wanted to add a space shuttle to our code. We can add the shuttle image in design mode with the ID "shuttle". Now we can use the same function to make the shuttle move across the screen, even though we hadn't even thought of the shuttle when we first wrote the function. Instead of creating three different functions we've used just one and it will work with any other elements we add to our screen. Parameters let us use the same code to solve problems that are similar to each other even if they're not exactly the same. By using parameters you can save yourself time and make your functions even more powerful.