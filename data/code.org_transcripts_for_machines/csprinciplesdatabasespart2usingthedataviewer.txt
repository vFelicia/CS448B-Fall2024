We just created a simple survey app, that asks the user for their favorite food, and stores the answer in a remote database. Specifically, the fave foods table. To view the entry stored in the database, click the View Data button above the app display. When you click the button, it will open a new tab for the data viewer. The first thing the data viewer shows you is your list of tables in the database, and look! There's the fave foods table, which automatically got created the first time we used to createRecord with that table name. New tables can be added on his page but we're going to dive into the fave foods table. Here we see how the 3 foods we submitted earlier each show up as a row in the Fave Foods table. The data viewer lets you look at the data in any table, and modify it manually if you like. Click edit next to a row, and you can change the contents. You can add or delete columns if you need to, or add a whole new record. Below the table, is a section called "debug view" of the table, where you can see the Javascript objects being created as you add elements to the table. This makes it easy to see that at the heart of the table is just a list of Javascript objects. You will notice that column names are properties of the object, and the values are the items in the row for that record. When thinking about how to build an app, you may need to keep track of something while your app is running. For this, use the concepts you're familiar with, like variables or lists. If you want some data to be accessible after the app stopped running, or for multiple users of an app, you'll use the permanent data storage blocks to send that data to a remote database. My first job out of college was to work at Industrial Light & Magic, which is George Lucas's company. I was working on the special effects for Terminator 2, to help make the terminator's body melt into a puddle of metal, and I worked on Jurassic Park to make all the dinosaurs belly wiggle, We had all these amazing artists, animators, and technical directors that worked on these movies. They would have little problems like if I wanna make the dinosaur's belly move it's made out of a mesh with a thousand little points, to make that wiggle framebyframe, they would literally have to reposition each one of those points by hand. I said Wait a second, I think we can do that with physics and math. We can say "If the belly is here, and it's this much weight swinging this way, can we change it so it automatically computes where all those things would be?" You could save them days and weeks of time by applying a bit of software. That definitely got me hooked on the power of software to make people's lives better.