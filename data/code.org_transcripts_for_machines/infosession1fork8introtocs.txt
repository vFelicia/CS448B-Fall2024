hi everyone uh welcome to code.org professional development sessions for our Krate intro to computer science course uh this is uh the first session out of a series of three uh my name is Katie aone and I am the k38 program manager here at c.org uh also today we have with us Kiki protzman of thinker Smith she's the executive director of thinker Smith she's also code.org curriculum writer and adviser um she'll introduce herself a little bit later on um I wanted to start off with a couple Administration things and just talk about how these sessions are going to work um so today's session is going to focus on the unplugged lessons of our K througha course um so we'll do a little admin portion here at the beginning we'll focus the main portion of our um one hour PD session on kind of the content of the unplug lessons um and then at the end we'll have a Q&A portion at the end um so the second session in our series will be tomorrow at 500 pm Pacific time um and the second session will focus more on the blockley online lessons of our 20hour course and then the third session will be on Wednesday this week at 500 pm uh Pacific time and that will focus more on the online dashboard system and kind of resources for educator support um and during these sessions please feel free to ask questions throughout the entire session we want to hear what you all are thinking um so please continue to ask questions during the session we'll get to ones that are relevant and then we'll have that build bulk Q&A portion at the end of each session um so I just wanted to say thank you to everyone for coming and watching um because uh uh we really appreciate you taking your time out of your day to come and watch and learn more about our materials um we've been working really hard at c.org to create great computer science materials um but we would be nothing without the Educators out in the fields doing the real work and teaching a computer science to students every day so um thank you for coming out we really appreciate it um so I'd like to encourage everyone to watch all three of these sessions we're covering different materials in each of the sessions and they're each important for different reasons um I would especially encourage everyone to watch today's session the unplugged lessons are super important to this course and really important for kids to grasp computer science Concepts it's really important for them to be able to internalize them so um while you're following the 20hour course it may be tempting to say oh yeah I I might skip the unplugged courses and just kind of not do them but I think it'll be really worthwhile for your kids and I hope that you will do them and I hope that this session provides some more insight into them and we can answer your questions on them um so let's see also we wanted to note that um if you ask questions during the session um we are going to raffle off a $50 donors choose gift code to one lucky teacher and we'll announce them um in the third session of Wednesday this week um so please continue asking questions um also in addition to these sessions I posted a few resources um for people to take a look at on the importance of Compu Compu science and um why we should be teaching this in our schools so I included some resources on the event Pages for these PD sessions um and we'll also post them in our forums along with any other resources that we may mention tonight um there's a great Ted Talk that I posted on why students should learn to code um there's a an article from the um article about uh why we should be teaching CS in our schools and also an article kind of about uh diversity and stereotypes within uh the computer science field uh let's see um also in the links are um two forums that we have for our k through eight intro to computer science course um you'll notice that one forum is for suggestions on how we might make our course better and another forum is for reporting bugs or asking questions or um just different discussion threads with Educators and you'll find um both of those links to forums listed on the event page for these PD sessions um and one other thing I wanted to mention was um we will have a uh survey about these sessions so we'd love to get your feedback on them so the survey will also be in the event page and I we'd really appreciate it if you figured it um if you filled it out after watching these um so I am very honored to hand this PD session over to Kiki protsman of thinker Smith um she can tell you a little bit about herself and then she will um spend a lot of her time going through the the bulk of the unplugged lessons um she'll be doing some screen sharing um you can feel free to open up your teacher dashboard and open up the lesson plans and follow along um and uh she'll probably be spending a little more time on the beginning unplugg lessons but we'll definitely touch upon all of them um so here we go let me hand it over to Kiki all right well thank you everybody uh I'm very excited to be here I'm really excited to be part of this program and I think that we can do amazing things when we get computer science integrated into education especially Early Education so as Katie mentioned I am Kiki protsman I'm the executive director of thinker Smith and thinker Smith believes that computer science is actually a passionate art form we think that it should be taught more as something kids are excited about in a hobby a habit than a scary curriculum so a lot of our lessons are created to bring out the enthusiasm in computer science and the artistic side and the fun of computer science and uh I'm very very pleased that code.org saw that it can add something to use your hands and to integrate this unplugged method into their lessons so I'm very happy to be doing this and I am really glad for the opportunity to kind of go over some of the lessons because I know that they can seem a little intimidating on first view for a teacher but once you understand what they're about I think that you'll really kind of enjoy them so one of the things I'm going to do is go back and forth between my screenshots and my video I'm going to start over with the screenshot and start going through the first lesson real quick here so I'm going to come down and get acrobat opened up and we will bring this into full screen mode so this is the first lesson and if all you have been able to do is the first lesson you may feel like our lessons are too lecture intensive but that's not the case the first lesson is just a little more talking than all of the others it's because there's a lot of information about about how computer science should be thought of rather than thinking of it as something that's really Advanced and only for college students how to think of it as a little more necessary and a little more exciting it also talks about balance and making sure that you aren't spending your entire life in front of a computer so I'll go ahead and get started going through this first lesson almost Page by page but you'll see that every lesson kind of has an overview of what you can expect and an objective of what you're going to learn during the lesson it also tells you the materials you're going to need in in advance so that you can look for the day make sure you have everything you need and then do your little preparation section who that goes faster than I anticipated we'll try down key there are also VOC vocabulary sections in every lesson and the teacher can decide whether they're interested in teaching the vocabulary before they start the lesson or as the word comes up if they re refer to the vocabulary section or if they want to just put the words on the board but the vocabulary is very important and one of the reasons it's so important is because getting these words into a child's vocabulary young is going to help them perceive computer science as something that is simple and Child's Play and I learned about uh data when I was in kindergarten I learned what an algorithm was when I was in the first grade and that way those words don't become sources of fear so rather than skip them or come up with new words to describe these ones I highly recommend you actually teach the proper vocabulary so the introduction section of lesson one talks about computer science and how amazing it is all of the things that you can do with computer science and how necessary that it's becoming in the world that we live in and certainly by the time most of these K through 12 students graduate it will be integral to any job that they could want in the future we put in a few questions as well things to get the students thinking for themselves you'll find that that's a huge theme in these lessons is encouraging the students to think for themselves in fact in all of these lessons it's better that they are wrong than they are given the answer so we prefer to go through several stages of incorrect so that they can adapt their answers and figure out how to solve the problem on their own sometimes that makes the lesson take a little bit longer but hopefully you'll get a feel for your class and how good they are at getting feedback from their failures and then you can adjust the timing on the lessons accordingly and that's another one of the issues is that uh because computer science is not very ubiquitous I guess it's not everywhere teachers don't often have the background that they think they should have to teach this stuff and it can keep them from teaching it at all one of the things I really urge you to think and a way to proceed with these lessons is to say I'm not going to know everything about these lessons computer science changes and it's really a vast area so there will be times you have questions and we have to look it up together there will be things that you grasp and understand that I didn't get and that's encouraged I look forward to the fact that you will understand more of this than I will and I welcome you to teach me what you've learned having that attitude will not only prevent you from teaching this but it's going to give the kids so much power and it will make this a subject that they really enjoy because they feel like they are the best at this and I think that even talking about how few people in the world do get the opportunity to do this that it's a if right now the students were to go through just the 20 lessons in the code.org curriculum they would know more computer science than 85% of people in in America so that's I think a a big thing for the students this goes under this goes over balance so you'll see there is a balance to maintain with computer science and activity so we want to encourage kids for every hour that they're sitting in front of a computer screen they should be spending at least an hour running and jumping and playing that there needs to be a balance that's maintained part of that is making sure that if you have your kids sitting for a long time working on a computer that you get them up and walk them around every once in a while also the 202020 rule which is every 20 minutes you look at least 20 feet away for at least 20 seconds and that gets your eyes some exercise and it keeps the students from getting too entranced and too or too bored on the other side so uh when kids get very engaged in what they're doing online if something isn't working right they can get really frustrated and a lot of times that frustration comes out uh in the form of aggravation maybe towards the computer and so talking about good ways to cope with that frustration is also really important getting up and taking a little walk going to get a drink from a water fountain something of that nature so then there is a balance between technology and environment and that computers use a lot of resources a lot of electricity you use a lot of paper and so making sure that you talk about recycling and turning off lights when you leave a room trying to balance out the technology use and then finally technology versus philanthropy and that's understanding that if you know something that the majority of America doesn't know you have the ability to really monopolize on that but that it's far more responsible to pay it forward to help other people learn what you've learned uh to use what you can do to help a nonprofit or to do open source work and to use open Source programs when possible instead of always feeling like you need to pay for the newest and best thing so that's kind of the the overarching idea of the unplugged side of computer science in general just making a responsible computer scientist and again you can see that's a lot of talking uh but it's really really important and after that we go into an activity and the activity is actually a lot of fun and I'm going to kind of blast through the lesson here and show you what the activity is really quickly so here's a binary decoder key I think I'll actually switch back to the video for this there while you're um switching back Kiki I just wanted to answer question about um someone asked how do I get this PDF uh if you go to learn. code.org you'll find the whole 20hour course um and you can sign up and um take your students through there and you can also just browse the course if you go to learn. code.org great thank you okay so we have here the binary decoder key and the reason it's called that is because it has every letter spelled out in asky and when I say spelled I mean that it has its code in off and on we tend to talk about binary as off and on in this series because we don't want to injure The Young Ones concept of numbers and zeros and ones at this point so we'll talk about off and on and how letters can be represented as combinations of off and on and this becomes the key for filling out one of the two sheets provided at the end of the PDF so you have these two sheets uh this one is geared more towards the kindergarten first grade age group it's just a simple strip that you you can copy the code into for your given letter and this is geared more towards the older students where they can fill in their initials first and last in one square and it's a little more complex now even older if you're going to go eighth grade or older you can actually have them write zeros and ones and have them write entire phrases on a piece of paper it just depends on the age of your students as to which activity do but what you would do for example let's go with this binary strip you would take a letter from the decoder sheet and then you would see that it's got a first it's got a first nibble here and then it's got a second nibble and those two nibbles together form a bite so it's eight bits of information it's a bite and that's what makes a letter so in this one you have off on off off and then you have off off off on and you would just take that and transfer it to your sheet here you would have off on off off and then off off off on and they may depending on the amount of time they have colored more nicely than I did but that's the point of this lesson you can make it take a lot longer if you want to do several sets of letters if you want to do letters and then switch and have someone guess what letters you did there are a lot of ways to make this take longer but it's about a 10minute activity in and of itself if you're tacking it on to the end of your big explanation lesson then it can be anywhere from 45 minutes to an hour so that's lesson one and I'm going to also go over lesson three pretty thoroughly because that's another lesson that can be slightly confusing and then the rest of them I will go through a lot more quickly because they're a lot more intuitive so lesson three let me switch to the screen share again here if it lets me Katie are you seeing a go to screen share not yet okay all right maybe I won't I'll just have you at home take a look at your PDFs for it's considered lesson three because there is a lesson in between the introduction and this lesson that is online so we'll start with this one and this is is about computational thinking and one of the reasons that it might feel complicated is because it's going over the four ideas of computational thinking in one lesson and it's breezing over all of them with one activity so the four ideas are decomposition uh pattern matching abstraction and algorithm and so what we have here is these little monsters and all the monsters are in your PDF and you want to have the kids look at all the different monsters in the book and try to decompose the monster there's a joke in there somewhere um you want to decompose them into their parts and so you want to say well this monster has if you look at these These are the types of features a monster could have so if you said this monster has vegeto eyes and this monster has uh a Sprite of nose and this monster has a I don't know A Wack mouth so if you look at each individual piece of a monster you can decompose it into smaller bits that are easier to work with the next thing is the pattern match and in this lesson the idea of that oh that's what happens when you have like motion sensing light okay so the idea of the pattern matching is then to say that well the pattern is that they all have eyes they all have a nose and they all have a mouth so those are patterns that I can find between all of them and then in this lesson the abstraction portion is to say how can I take the fact that they all have similarities and kind of hide the fact that they're different similarities so their eyes are different kinds of eyes but they all have eyes and through this series our concept on abstraction is basically creating a blank so you would say the zombie has blank eyes you don't need to say it has vegetos eyes and so you can say this has blank eyes this has blank eyes this has blank eyes and then you fill in the blank when you get to the part where you're describing the particular monster so that's what the abstraction is for this piece you can think of abstraction we'll get to this later but abstractions kind of like a mad lid where you could have one specific story but by just adding some blanks instead of certain words you turn it into a canvas for lots of different stories so that's the idea that we're trying to get across with that part and then finally the algorithm and for this one the algorithm is simply choosing a monster or creating your own and then writing an algorithm using the steps to create the monster so first choose a vegeto head then choose a whacka mouth then choose a sprum nose and you put it all together and then you see if the person can try and figure out what the monster is that you were thinking of so that's the piece and when you look it all over on your own it may seem a little complicated but when you work it out step by step and understand what each of the steps is for this activity it's really a lot of fun and the kids can have a good time creating their own monsters and giving their own features names so that's that one now I'm going to try again to do the screen share and and it's obviously not working because it's still showing the camera there must be a two screen share limit if you click on something else when you drag your mouse over to the left side of the screen nothing pops up yeah I'm clicking on screen share but then it doesn't give me the window that lets me choose what window I want to share and it just does nothing so we may have to go with only the pieces I printed up and hope that everybody has access to a PDF or will by the time they watch the recording or everyone can visit learn.co dog and pull up the PDFs as we follow along if you click on the lesson number that Kiki references you can see the PDF and when it says open lesson plan yes okay I'm just going to try clicking a few buttons and see if my screen share capability comes back but it doesn't look all right so the next one is called graph paper programming and this one is a lot of fun because you really get in the idea of the difference between an algorithm and program so you start out with a picture and in the simplest case it's just a box with different colors filled in and you have to figure out given just a simple key of possible symbols how to get your friends to be able to draw the picture in your box now I've got a little sample here that we can go over there's lots of ways to achieve this and if you want to start out with your class saying the words for each of these things it gives them an idea of the Simplicity of it so if you're going to start here you color your box and then you move over one and then you can step back and go down and this one's blank so you move one and then you color this one and because it's so small that you can't really see the point in going backwards before you come down but if there were 20 squares across and then 20 rows of those then you would want to go all the way across and then you'd want to come back and go down and go all the way across and come back and go down and pretty soon people will see that there's some redundancy there and they may want to simplify that and that's a good thing to do later on in the exercise but for now if you tell them we're just going to go all the way across come back and go down that way you understand what the code is so that's what we have going on here we color we step over then we have to come back and go down pretty soon they'll notice anytime they have a combination like this that's a redundancy and they can get rid of it because it means go over once come back and you're not doing anything in between there are other ways to program this out too for example you could color it go over one then go down to this square and then color it and really you're done but if they want to come over to this Square just so that they acknowledge it's there you can go that way so there's lots of different ways to do this and that's something that's valuable for the students to see is that they can do the same thing many different ways and then when you talk about the difference between actually saying color the square and drawing that scribble that's the difference between an algorithm and the code that goes along with the algorithm so that's really all this lesson is doing is is giving you programs to draw a picture using symbols that's that lesson kids have a lot of fun with that one it's very entertaining and it comes back later so there's another lesson that builds on what you use in what you do in that lesson and it's a little bit more active and I'll get to that one in a minute the next one is lesson that is purely on algorithms so it's trying to give you an idea of what algorithms are and why they're important the very first lesson of that actually starts with just a piece of folded paper so what you want to do is try to get your kids to figure out how many ways there are to fold a piece of paper like this so when you open it up you want your piece of paper to have exactly this shape all of these squares in this shape and you'll quickly notice that there's several ways to get this exact same crease pattern in your paper and in the PDF it talks about folding this is a hamburger fold when you fold it so that the the paper folds along the wide Edge or uh across the wide Edge so that's the hamburger fold and then when you're folding the Long Way making a crease the long way that's a hot dog fold and so if you give the kids that terminology they have a quick way to keep track of how they folded their paper so they'll say well I got this one by doing hamburger hot dog hamburger hamburger that's how I ended up with it this time but somebody else might do hot dog dog hot dog hamburger hamburger and the interesting thing is that the number of steps can change so it could take four folds to get this pattern and if you do it a different way one two 3 4 5 six bolds so obviously one way is more efficient than the other and that's what this little piece of paper teaches the students uh the same lesson goes on to talk about explaining the algorithms and how important it is that you are able to accurately put a problem into words so a real world problem might be we have these shapes and we want to cut them out and lay them into this pattern that's fine except for if you're trying to get the idea across to a computer you're going to have to tell it put the green triangle on top pointing in a certain direction put the purple triangle below it make sure it's touching and in the center but it's got to be lined up with one Edge and then you got to put the pink triangle on and the yellow triangle on it's kind of an alternative to the peanut butter jelly sandwich if anybody's heard that method you have your students try and tell you how to make a peanut butter jelly sandwich and you intentionally misinterpret the instructions to make a big mess instead it's same kind of idea you need to be very clear on your instructions so that you're guaranteed to end up with the correct picture all right moving right along we have lesson eight so lesson eight is making suncatchers so my students end up with something sort of like this and not only is it a fun little activity in a takehome which the kids love having takehome reminders of what they did but it's also a lesson in functions and in variables so you'll see at the end of the PDF that there's a page that looks something like this and it talks about using skills and a program what you can do is you can talk to your students about how you create the sun catcher you say well I take my string and I put a bead and tie it and then a hoop and then tie it bead then tie it hoop then tie it and then I put on my special charm at the bottom and if you go over that a couple of times they'll get the point of bead tie hoop tie bead tie hoop tie special charm so then you go in and you try to write it down in your program okay I'm going to write the instructions down for you so that you can use them again be tie hoop be tie hoop tie bead tie hoop tie and it's not long before you run out of lines so then you say okay well we run out of lines but we have these two extra sections up here that we can use and anything we store in this skill we can call from the program so if we were to put two instructions up here we could call skill one and get two instructions out of one program line and then you challenge them to figure out how to use these to create their program so what happens is these become functions so skill one is actually one function and if you wanted to put bead Tha hoop tie in skill one and special charm tie in scale two then you could call skill one skill one skill two and that's your program another great thing is to use this as an opportunity to talk about variables so what we will do is I'll tell my students I don't know what bead you have your bead might be green your bead might be red I don't know what bead you have but I'm just going to use if my marker works I'm just going to use this symbol to indicate that we're going to put a bead on this is my variable I don't know what your bead is but I'm going to use this symbol so that I can keep going and write you a program anyway not knowing what bead you have and then you can say this is what hoop looks like I don't know what kind of Hoops you're using but if I have the symbol to to say whatever hoop you have this is where you put it that's a variable and then you can do tie something like that and then special charm like this because I don't know what your special charm is maybe you have a butterfly maybe you have a snowflake but I'm going to use this to say put on your special charm and then you can instead of writing bead hoop bead hoop you can use the drawings on there or I guess similarly inad instead of drawing a bead you could just write bead and bead indicates whatever bead they have so in this lesson you actually get to use variables functions programming and put it all together into one really fun activity with a really cute take home okay so let me make sure there any questions yet on any of those that I should stop for um well we just had one that said how do you how do you explain functions to your students um if you had a definition what would you say it would be I say functions are a really simple term for describing something that happens over and over again so instead of writing a 100 lines 10 times in your program you write one you write your 100 lines once and give it a name and you call that name so you'll see in another lesson we're about to get to Lesson 12 that I compare it to writing a song so I talk about a function almost like a chorus in a song where you write the definition of the chorus one time and then the rest of the song Long whenever you see the word chorus you don't sing chorus you go up to where chorus was defined and sing the lines under chorus so that's how I Define functions for my cool and we are kind of running shorter on time so I do want to get to all these unplugg lessons so let's let's continue sure so now we're at lesson 10 and lesson 10 is one of my favorites it's easily adaptable for any age because you get to choose the program that you use so this is a card game and we try and involve the student by giving each student at their desk a card to hold that the other students don't know what it is now in a very young group you can have uh one student that goes around and picks you can have the teacher go around and pick and you can make the rules really really simple in a group of older kids eighth graders or above you can have small groups of four that play it together and they just draw from a stack the adaptation of it is up to you and your students but the point is you have some sort of program for example we say well we're going to give a JavaScript program that says if the color of your card is black then your team gets a point added to their score otherwise they get a point taken away from their score so you start with a deck of cards and then you would draw a card and this one is black and that means that the person who drew it the team that Drew it gets a point added to their score and then the next person gets to go and they choose another card or pick another student who has card at their desk and they look and this one is red and so there' be a point taken away now that's a pretty simple program for anybody over say third grade you can start making them a lot more complicated you can say if the card is even and red then you do this if the card is less than four then you do that if the card is a heart then you do this and you can string them all together and it's a really good way to learn about conditionals and even loops and all sorts of other functional programming ideas just with the luck of a Java card so I definitely recommend you give that one a read and try it out you can adapt the program to be as simple or as difficult as you need then I just covered Lesson 12 which was the functions through singing uh it it's there's a little more to it in that we talk about passing parameters to a function and for that we use Old McDonald so Old McDonald has a chorus and the chorus is similar for every verse but it has some things that change so we talk about passing certain words through like dog and bark and then you can see the chorus given those two words and we talk about adding more parameters and we start out not using any at all so that's a fun I'm going to give the screenshot one more try because that is where I ended with printouts because the rest of them become fairly easy to describe just looking at the PDF but uh it's still not working so I'm going to move on to lesson 14 in lesson 14 if you look at your PDF you will see that it is very similar to mad lips so we start about just kind of taking your class by surprise you say hey what did you have for waffles this morning and when people are confused you're like nobody okay what did you have for toast yesterday and then hopefully the kids will start to pick up on it and you say see when you're too specific about an item you don't reach as many people and the same thing happens in programming when you're too specific about what a function does it doesn't solve as many problems so we're going to learn how to abstract that away and make it a little less specific so how would you make what did you have for waffles this morning less specific so then they talk about will you say breakfast what did you have for breakfast and then you could get it to even more Meals by saying what did you have for a meal or even just leaving that blank and say what did you have for a blank and the same thing kind of happens with stories you take a couple stories and you compare them and where two words are different in the story you create a blank and that goes into uh a whole example of madlabs and so they're able to fill in their own blanks in a story and they are able to then create their own stories that they can then turn into stories with BS so that's how that one works Lesson 16 calls back the lesson that we did with the graph paper programming let me just reach for that real quick so Lesson 16 comes back to this idea but instead of doing it at their desks in a classroom they have a relay race so you line them up on one side of the room ideally maybe they're outside or in the gym for this one on the other side they have the image that they're trying to draw what you'll do is you'll have the first person in the race run up grab a pencil look at what they're trying to program and write only the first instruction they then have to run back to the end of the queue the next person runs up looks at what was already programmed and then draws the second instruction this is a good way to get them thinking really quickly and what you get to test is your ability to look at what other people have done come into something in the middle and figure it out check for errors because if there's an error their only thing they can do that term is cross out the error they can't can't even fix and then also just programming under pressure and how much harder it is to get it right when you know that you're competing against your classmates that's so we're almost through these here lesson 18 is about the internet this one changes depending on the age so you're able to put in much more information about the internet and what it does and what it's good for if you're with older kids if you're with younger kids just getting across the idea that your message is broken up into lots of pieces and transferred through an actual physical cable of some kind or through the air is a really important notion for these kids because they might not understand that so in this one you take the concept of having a message that you need to deliver to another student then you talk about having to divide it up into pieces that can fit through the bandwidth and depending on the method you're using to deliver it you get to actually carry it differently to the end recipient so some people are allowed to carry it in their hands some people have to carry it on the back of a hand other people have to carry it on top of their head and it just depends on what whether you're using fiber optic cable or telephone wires or WiFi so that's how that one goes it's a fun little activity it feels much more like a game than like a lesson but that's good and finally we come to the wrapup so the wrapup is where you take the lessons that you've done in the past and you challenge your students to do mashup and combine a couple of different lessons into one so you give them a table full of materials and you say okay everybody pick two lessons or three lessons and figure out a game or an activity or a craft that you can make to combine those three lessons into one and you just give them the chance to process what they learned uh to see whether something's going to work maybe it doesn't work but they thought it was going to be a good idea it's a really creative process and there doesn't have to be a right answer just the exploration is exercise enough so those are the offline lessons they are lots of fun and very helpful and I hope that you enjoy them and feel comfortable giving them a shot if you have any questions there is a forum available for you to post your questions and we can help you out any way that you need us to yeah um The Forum link is posted on the event page for this these professional development sessions and it's also on um you go to code.org educate sl20 hour the number 2020 and then HR um and uh um I'd love to start answering some of these questions we have a lot of great questions from people here um the one with the most votes uh says will will code.org be developing more free curricula or will districts have to purchase them in the future um all of our stuff is free and will continue to be free so please use it uh yeah we just we have free things and we want you to use them uh and we are working on more or at least more versions of what's already out there yes yeah um so the stuff we develop in the future will be free as well um in the coming year so in 2014 we'll be developing uh courses for specifically for K through two so specifically for that grade range um a course specifically for thir third through fifth graders and then two courses for middle schoolers um let's take some other questions that have a lot of um votes um so someone else is looking for good HandsOn resources on computational thinking um for elementary and middle school students um we will post a resources thread on the forums um so after this session um we'll post more resources on our forums where we can send you things about computational thinking and someone else also wanted um resources about um more about the binary subject uh more advanced um resources on binary so we can also post some on the Forum as well for that um let's see and Kiki if you see any questions you like to to jump in and answer please go for it um I actually like this one what's the best way to teach a set of 22 first graders code uh thinker Smith does teach all the way down to kindergarten and one of the things that we do is we actually go into the classroom to teach it for the teacher so we've got experience teaching a wide range of Ages and all of these activities do work the unplugged activities do work for grades K through adult the difference is with the kindergarteners you need to break them up a little differently and you need to think of it not as I'm trying to get these 12 ideas across to them but I'm trying to introduce them to the idea of something and so most of these lessons in fact I think almost all of them come with a K through two adaptation so in many cases you do it all together as a class so they don't have the same pressure or chaos that the older students would have they get to throw their ideas at you and you get to help them think their ideas through and give them a shot and so I highly recommend attempting these with the little ones it really is fun if you can use a couple extra people if you can gain a couple extra volunteers classroom management tends to be the biggest issue with the little ones great um another question that has a lot of votes is um how can you transition from blockley and scratch type languages which are visual uh blockbased languages to JavaScript or something that's a text based language um this is something where if you're you're doing the blockly puzzles there is a little button in the upper right hand corner that says show code so you can always see what the blocks you have written what they look like in JavaScript um and this is something we're actually working on for the future that we're we will be developing a course basically that transitions a student from uh block based programming to text based programming so that's not not material we currently have ready um but that's something we're working on developing um Kiki do you know of anything that currently does something like that uh specifically yeah I can't think of anything right now okay I'm maybe that's something in the resources thread on the Forum if if any of the Educators here know of something like that um they can post it in the Forum that would be great uh let's see there is um a good one about what can I do to supplement and differentiate the 20hour course for my Advanced students with the unplugged curriculum there are things to add on to make it a little more difficult and you can always just challenge them to come up with an idea that is The Next Step Beyond this and then maybe they aren't doing more of the lesson but they're thinking more thoroughly about the lesson so that they can create something to add to it as far as the blockly uh if you're allowing them to kind of go ahead and they finished the blockley lessons then moving them on to another uh programming opportunity I think is perfectly acceptable so something maybe like scratch or even helping them do one of the other tutorials like JavaScript road trip or uh Cod uh code Avengers something like that that way you don't have to be distracted from the rest of your class but they're still getting a stepbystep tutorial uh I would also say for students who uh finish the blockly activities early in a class period um I know some Educators like if a student finishes early they can walk around and help other students that are still working on that day's set of activities um it's not appropriate for all classrooms but if you have a conversation beforehand about um this is the this is a way that you can give advice to another student to help them Advance along in their activities if you have that conversation with your class you can create kind of like class mentors um so that's another option for your Advanced students yes yes and I see two that kind of go together for me that I'd like to touch on real quick um what are the first steps of getting a code.org curriculum into our Public Schools how can teachers help and for schools that already have a lot of implemented programs and administration who are unwilling to change course selections what classes or courses do you suggest integrate with the coding curriculum so uh one of the things we've had the most success with is starting after school so if you can pair up with somebody after school and get this stuff in after school people will fall in love with it and start begging to add it to the school Daye at that point if you show them how you can integrate it into the subjects they already have to do math science uh art music then that's a really help way to kind of sneak it in without distracting from the other stuff that they're trying to do I say all of those things English foreign language arts you can integrate computer science into all of those you just maybe have to choose different resources to plug in but blockly you certainly can talk about math issues up to certain levels certain grade levels uh algorithms you can fit into any math class and talk about the stepbystep processes for figuring things out functions you can even integrate in so I would say sneaking it in is the absolute best way if you are coming across hesitancy and sneaking it in through after school and letting it kind of drip into the school day has been super effective awesome I I would also say that um more and more schools are um including it in the school day and some of the resources that will'll post um just talk about how computer science is important even if you're not going to grow up to be a programmer because computer science teaches you how to think very critically and problem solve and those are skills that every student needs um so um there was also a question posted about are we um going to um align our stuff to Common Core math and English or science standards um we will be aligning our um or mapping our curriculum to to standards like that so I know that's something that Educators need to hit during the day so you can use computer science as a tool to teach those other subjects um so they're uh learning about math and science and English while using computer science as a tool so that's um something we'll have in the future um so let's see we are at six o'clock yes so we are at six o'clock there are a few questions that we have not answered yet um so I will encourage everyone to um head over to the forums and uh start discussion threads about some of the things we haven't um covered so we will have our sessions uh tomorrow and Wednesday um where we can address some of these topics as well um but I would love for the forums to be a place where Educators can come and get suggestions or advice from other Educators um so the Forum links are posted in the event page for this for these professional development sessions and also on code.org educate 20hr 20 hour um so I would really like to thank Kiki protzman for joining us um it's been great to have her here she was the one who wrote all of the unplugg lessons so it's great to have the content expert here with us um so I hope everyone has enjoyed the sessions today um we can continue discussions on the Forum and I um hope that I see everyone tomorrow at the sessions tomorrow and then the session on Wednesday um so thank you all for coming and I'd like to give a round of applause for Kiki as well uh well and thank you very much you did a wonderful job great great um so everyone have a wonderful night and we will see you all tomorrow bye