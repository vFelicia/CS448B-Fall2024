my name is brendan reville i'm from australia and i learned to program when i was 10 years old since then i've worked on the xbox team and now here at code.org i've helped build some of the hour of code tutorials that i know a lot of people have enjoyed whether you're planning out your day brainstorming ideas for a project or choosing songs for a party you'll probably want to make a list lists help us stay organized by ordering all the relevant pieces of information one after the other in a single place the same principle applies when we write programs that include many pieces of related information variables are useful for holding a single piece of information but as we collect more information keeping the variables organized can be complicated and cumbersome for example what if you wanted to keep track of everybody's name in class or an entire school it's impractical to create hundreds or thousands of individual variables and impossible if you don't know how many items should be tracked ahead of time in programming a list is a container used to keep similar pieces of data organized in one place you can think of it like a container that grows or shrinks to fit the number of items it has inside the main items you can do to a list are add or replace items access items and remove items in javascript a list is called an array you may hear list or array used interchangeably but we'll refer to it as a list to keep it simple a basic example of a list will be all your contacts on your phone in your email etc let's see how this would work to start off you need to create a list you do this by using square brackets an empty list looks like this you can also create a list with some initial values in it just write out the values separated by commas inside the square brackets for example you could make a list of numbers like this or a list of names as in a contact list like this just like how you can assign a number or a string to a variable like var x gets 5 you can also assign a list to a variable to use it later like this you can think of a list as a container of numbered slots each slot can have one value in it to access an individual item from your list write out the name of the list and the number of the slot you want to access like this this means give me the item in the list names sitting in slot number two the official term for slot number is index so we would read names left bracket two right bracket as names at index two you might have noticed that the first index in the list is zero in programming we usually start counting at zero which means that names at index zero is the first item of the list and names at index two is actually the third item in the list when your program runs the computer will look up the current value that lives at the given index of the list just like the computer looks up the current value of a variable for example if you have a list of numbers called num list you can create an expression like this var sum gets num list at index 2 plus none list at index 5. the value stored in index 2 is 40 and the value stored at index 5 is 60 so the variable sum is assigned the value 100. you can also assign or update a particular index's value you refer to the slot the same way names at index 0 gets the value sarah would replace the current value at index 0 just like assigning a new value to a variable once you have created a list you can modify it by adding items removing items or inserting items to add an item to a list you can use the append item function let's add kelly to the end of the list of names like this append item names kelly notice that append item is a function that accepts two parameters the list name and the actual value that you want to add appending an item always adds the value to the end of the list to remove an item you use wait for it the remove item function if we want to remove josh from the list of names we'd need to know the index where josh is stored so we could do this remove item names one when you remove items the whole list shrinks and it closes the gap of the item that was removed now our list has four items indexed zero through three because the list shrank items that come after the removal point are effectively reindexed so if we once knew that kelly was stored at index four kelly is now at index three this is not a problem but something to be mindful of we can also insert items into the middle of the list with insert item like this insert item names to brook the insert item function needs three parameters the name of the list the index you want the new item to appear at and the value to insert inserting an item grows the size of the list similar to remove item the items in the list that come after the insertion point will be reindexed because indexes are just numbers you can put anything in between the square brackets that evaluates to a number like variables or even arithmetic expressions for example let's say we're keeping track of temperature readings in a location with a variable called look var look gets three we can change the value in num list at index slope like this num list at look gets one one of the benefits of lists is that their length can grow and shrink over the course of a program but that means it can be useful to find the length of a list at a given point in time you can get the length for a list like this num list dot length when your program runs the computer will replace this with the current length of the list in this case the length of the list is six a potential point of confusion is that even though the length of the list is six the last index is five this is because we start the indexing at zero because lists change size a common issue in programming with lists is what's the index of the last element we typically find out using the expression list dot length minus one and you frequently see it used to access the last element of the list like this num list and in square brackets num list dot length 1 lists are a very powerful way to store and maintain data in programs they open a door for us to write programs that use and process lots and lots of information especially when we don't know ahead of time just how much information needs to be stored let's try them out you