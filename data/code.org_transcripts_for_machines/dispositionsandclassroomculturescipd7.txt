the first part of this video is a collection of tips on how to think like a programmer when we build computer models and simulations we eventually get to the point where we have to explain things to the computer this step can be slow going for the first several conversations we have with the computer the challenge is this computers are very picky about the words or commands that we use they just can't handle ambiguity as well as people can computers need things laid out very precisely and logically this features of computers actually works very much in our favor when we build computer models because an important aspect of creating these models is looking very closely and logically at how the parts of the system that we're building interact talking to or giving instructions to a computer is called programming programming is a skill that you get better and better at the more you practice i find it helpful to remind myself and my students that there are certain attitudes or dispositions that can make the process of learning the program more fun and at the same time more rapid so first of all mistakes you never should feel bad about making a mistake mistakes just come with the territory computers don't care if you make a mistake and you shouldn't either in fact i like to tell my students that they need to make one thousand mistakes before they can program with any fluency so i should just get started if you can't learn something from a mistake it's better just to move on just do something else if you can learn something so much the better the willingness to make mistakes is really an aspect of a uniquely human quality the tolerance for ambiguity frequently when programming you'll find yourself uncertain of how to proceed or perhaps even very certain that you're going down the wrong path in a situation like this computers grind to a halt but effective learners just muddle through and learn things along the way the second attitude or disposition that i think is valuable is curiosity or playfulness curiosity means it's more than just having fun it's a best way to rapidly figure out how to create programs that work when you're curious you poke around in the interface you run little experiments to see what this or that setting does if you know how to do one thing you do it but then modify it you build something then break it ask questions this is how young children interact with the world when they're new to everything this is a good approach for any learner to take it is however an approach that may be foreign to those of us who have built professional teaching careers around being masters of our content area unfortunately or fortunately the world of computer programming is so fast that there really are no masters we're all learners at different stages but always a learner the next attitude that will help tremendously as you learn the program is the recognition that you're not alone when you program there are a wealth of resources available to help you learning programming understanding how to quickly access the learning resources that you need is a part of becoming a competent programmer documentation online groups the person sitting next to you email to a mentor there are a variety of ways to get questions answered as you gain experience asking questions consulting the help documentation learning how to get unstuck your work goes faster and faster and you'll find yourself tackling increasingly ambitious and interesting problems you will also find that your network of resources keeps growing and your projects become ever more collaborative the next attitude and perhaps implied in all the attitudes that i've mentioned so far is the willingness to be persistent have confidence tackling openended complex problems and to stick with it there's no way around it programming takes time if you find ways to break big problems into a bunch of little problems you'll find some satisfaction in finding the solution to those little problems if you can't solve those little problems just go back to something you can do and experiment there some more if you keep trying keep making progress you will eventually become comfortable programming and able to tackle truly interesting problems finally take pride in your models an important aspect of programming is the fact that when you've done something you have something it's usually unique and it does something show it off put it to work post it online programming naturally builds communities of people who share in the struggles but also celebrate the victories of its members we believe that experiencing the excitement of discovery hand will open doors for you and your students hi everyone i'm melody hageman i'm a science and computer science teacher and i've been working with project guts to help students explore using models in scientific inquiry for a number of years the second part of this video is from karen brennan's talk on how to get unstuck karen is a profession professor of education at harvard and was the developer of scratch ed in her talk karen recounts her experiences working with teachers she thinks about how to use scratch in classrooms across curricular areas teachers fear that students are going to get stuck they ask what if we cannot make progress how can i help my student initially karen's answer was to use the online community but then she wondered how do kids without teachers get unstuck in the wild so she asked kids how do you get unstuck here are the top six strategies one read through your code your code holds all the answers the computer is simply following your instructions exactly tracing through code step by step as if you were the computer processing the instructions will help you find errors in your logic or missing steps two experiment with your code try rearranging the order of statements or reconceive of the grouping of commands you won't break the computer but you could break your code so make backup before you reconfigure three look for examples such as other programs that do similar things it's not cheating or stealing to learn from other people's code if what you take away is understanding four work with someone else collaborate and consult with others two heads and two set of eyes are often better than one five acknowledge that it is hard and you need persistence programming like puzzling is hard mental work but building up your brain power is like building up muscle with practice and persistence it will grow six take a break sometimes a break is just what you need getting some fresh air and or stepping away from the computer can give you a much needed break and often you can come back to a problem with a new perspective but you might ask how do these strategies help me as a teacher the answer is your students may not need you in the way you think they need you you do not need to be the expert your role can shift from sage on the stage to guide on the side don't get stuck thinking about an old version of teaching amazing things can happen when the students teach the teacher