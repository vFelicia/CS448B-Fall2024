With timestamps:

00:00 - all right so today i'm gonna be going
00:02 - over
00:03 - um the last lesson which is about
00:05 - recursion
00:06 - um just like with the stuff we talked
00:09 - about classes the important part
00:10 - is that um you guys understand the
00:14 - more conceptual like stuff with
00:16 - recursion um
00:18 - but i would recommend you again to like
00:21 - try and practice this with java um
00:25 - but it's most important that like the
00:27 - first thing for recursion is you
00:28 - understand how to um
00:30 - how to read a recursive method so like
00:33 - how to be able to look at a recursive
00:35 - path and be like okay this is what
00:37 - actually does
00:38 - and then the next part is be able to
00:40 - being able to like
00:42 - design a recursive method on your own
00:46 - so basically
00:49 - um while go over is just like what is
00:52 - recursion
00:53 - um why do we use recursion and then
00:56 - finally
00:57 - um how you should be thinking about
00:58 - recursion
01:00 - so first off um recursion is kind of
01:03 - just like
01:05 - what i would call like a fancy for loop
01:08 - um
01:09 - it's basically a method that calls
01:10 - itself and why i call it a fancy for
01:13 - loop
01:13 - is basically any for loop can be written
01:16 - into like or any recursive method can be
01:19 - written into a very complicated for loop
01:22 - so um and oftentimes like under the hood
01:26 - um compilers will actually turn
01:28 - recursive methods into a for loop
01:30 - so but in general like a recursive
01:32 - method is just
01:34 - a method that calls itself and this is
01:36 - sort of like a visual representation
01:38 - so like we have a cat that's like that's
01:42 - kind of like recursing
01:43 - into like the screen
01:47 - so next um if recursion
01:51 - is just like a for loop underneath why
01:53 - do we ever use recursion
01:55 - so the reason um recursion is good is
01:59 - in some cases it's actually easier to
02:01 - think through a problem
02:02 - um recursively and also recursion
02:06 - makes things a lot readable um if you
02:09 - understand like how to read a recursive
02:10 - method
02:12 - also like there are some data structures
02:14 - um aka like data trees
02:16 - that are easier to implement using
02:18 - recursion so basically it's easier
02:21 - like this image here is a basically a
02:23 - binary search tree
02:25 - and a lot of the methods related to this
02:27 - kind of data structure
02:29 - is actually a lot easier to um to
02:32 - implement using recursive methods and
02:35 - then finally there are some languages
02:37 - that are
02:37 - a little bit based around recursion so
02:39 - like there are some functional languages
02:41 - like ocamo
02:42 - um or racket or lisp that
02:45 - are that have like this sort of
02:49 - other um paradigm that's not really like
02:52 - java where like
02:53 - they really like recursive methods so
02:55 - it's really um helpful
02:56 - to be able to have like be able to think
02:59 - recursively basically
03:00 - all right so finally i'm just gonna talk
03:03 - about
03:04 - like how you should be thinking through
03:06 - a recursive method
03:08 - so recursion is actually based on this
03:11 - um
03:11 - type of this basically this logic um
03:15 - proof method called inductive reasoning
03:18 - so basically it's sort of like a domino
03:21 - effect proof
03:22 - where it's like if you prove um two
03:24 - kinds of cases
03:25 - then basically it'll um it'll be true
03:28 - for the rest of the cases
03:30 - infinitely so um there are two parts
03:34 - of the inductive reasoning and recursion
03:37 - the first one is basically your base
03:39 - case
03:40 - so in in terms of recursion this is
03:43 - basically
03:44 - the condition where your recursive
03:47 - function actually returns a value
03:50 - and then um you also can think of it as
03:53 - like
03:53 - your base i'll actually be live coding a
03:56 - recursive function
03:57 - later so the next slide i'll actually be
03:59 - um
04:00 - just like working through an actual
04:02 - recursive method like creating one
04:04 - so um
04:08 - maybe like once i actually like
04:12 - once i actually like start doing like
04:15 - creating a recursive method
04:16 - i think like some of this will sort of
04:19 - um sort of click because like yeah this
04:23 - slide is a little bit of me like sort of
04:24 - talking at you
04:25 - about it so maybe if you see it in like
04:29 - in code it'll make sense i could also um
04:33 - like also just implement this method
04:37 - and then show you like where like these
04:40 - boxes fit into like the actual code
04:46 - is that all right well yeah yeah maybe
04:49 - do the demo first maybe that'll clear it
04:51 - up
04:52 - sure all right so
04:55 - this is the double i'm just gonna fork
04:57 - this
04:59 - so um
05:03 - over here i'm just gonna be implementing
05:05 - two recursive methods
05:07 - so both of these are um
05:11 - are more mathy so one is factorial and
05:13 - one is fibonacci
05:15 - um is anyone not familiar with like the
05:18 - fibonacci sequence
05:19 - or um or factorials
05:22 - i'm all right
05:26 - i can explain both of them to you then
05:28 - um
05:29 - so basically factorial is the um
05:36 - here we go so basically factorial is
05:43 - is like if you're given say like
05:47 - a number x
05:51 - x factorial which is like this
05:53 - exclamation point
05:54 - would be like x times
05:57 - x minus 1 um
06:01 - times x minus 2
06:04 - all the way down to um times
06:09 - one basically so once
06:12 - um basically it'll take the product
06:16 - of like x all the way down
06:20 - to like all the way down to one so for
06:22 - example
06:23 - um like
06:26 - trying to think of an easy number so for
06:27 - example three factorial would be like
06:30 - three times two times one
06:34 - and then another rule is zero factorial
06:36 - is one
06:39 - um does that make sense for factorials
06:46 - basically like you're multiplying a
06:48 - number down all the way to like
06:50 - the um to the value one and then
06:54 - if you do zero factorial that's also one
06:57 - um fibonacci sequence this is a sequence
07:01 - that's like starts with one one
07:04 - two three five eight and this is
07:08 - sort of like a sequence or a pattern
07:12 - where um the two the um the nth term so
07:16 - like say the
07:17 - they say the third term is basically the
07:21 - sum
07:21 - of the previous two terms so like two is
07:24 - the sum of one
07:25 - and one um five is a sum of two and
07:28 - three
07:28 - and then eight is the sum of um three
07:31 - and five
07:33 - so this is just like um
07:36 - a a number sequence that like
07:40 - that has a pattern to it
07:43 - so these two are um are pretty
07:46 - pretty good examples from or they're
07:48 - pretty common examples
07:50 - of recursive methods so
07:53 - um first i'll just be be
07:56 - showing you like how to like how to
07:59 - create the um or how to implement these
08:02 - methods recursively
08:04 - and then once we run it um we should be
08:07 - able to print like these correct values
08:12 - all right so for factorio um
08:15 - basically we want two cases
08:18 - so a base case
08:22 - and then a recursive case
08:28 - or i like to call this a recursive call
08:33 - so basically um we want to first
08:37 - define like one factorial stops
08:40 - so basically factorial will stop
08:44 - when um when
08:47 - you reach one right or when you're
08:51 - or technically like you reach zero
08:52 - because the zero factorial is one
08:56 - so we'll basically define like we'll
08:58 - check if
08:59 - i is equal to one or i is equal to zero
09:04 - we'll just return one because that's
09:07 - like the um
09:09 - that's like one factorial is one and so
09:12 - is zero factorial
09:13 - so that's basically when we're stopping
09:15 - this like factorial method
09:18 - and then finally all you have to do is a
09:20 - recursive call so
09:22 - basically we're gonna call factorial and
09:25 - we're gonna decide like how we're gonna
09:26 - increment i
09:28 - so for factorial then we can trust that
09:31 - this method just works
09:34 - um does that make sense
09:41 - i think so but um maybe one
09:44 - i mean i don't know how is someone gonna
09:47 - set a value for i
09:48 - at some point or what how does it work
09:51 - um basically yeah
09:54 - it'll like do all this stuff with on the
09:57 - factorial method
09:58 - and like do the recursive function and
10:01 - then
10:02 - this factorial method will return an
10:04 - integer and that's like what it turns
10:05 - out
10:06 - so like technically it's the same idea
10:09 - as like
10:10 - as i'm printing out just like any number
10:13 - like
10:13 - three or ten so factorial
10:17 - that thing that you have highlighted is
10:20 - is
10:20 - um considered to be what an integer or
10:23 - a double or a or does it have any def i
10:26 - mean can it
10:27 - it's basically an integer right yeah so
10:31 - i'm in that factorial like i say method
10:34 - yeah yeah okay okay
10:37 - okay thank you you're from so
10:40 - yeah so basically for factorio it's like
10:43 - over here it's technically like solving
10:46 - or like solving for this expression
10:48 - inside of like
10:49 - or solving for this factorial method
10:51 - first before like doing the print
10:54 - all right so next we'll move on to
10:56 - something a little bit
10:57 - more complicated so this is the
10:59 - fibonacci method
11:01 - um the idea with fibonacci again is just
11:03 - that like
11:04 - the um the nth term
11:08 - is basically the sum of the previous two
11:10 - terms
11:11 - so if um let's say
11:15 - n equals and let's use
11:19 - let's use a rig indexing so um
11:23 - this will be 0 1 2 3
11:26 - 4 five so if n equals five
11:37 - then basically um
11:40 - n minus 1 is
11:46 - is 5
11:49 - or the n minus 1 term
11:59 - and then the n minus
12:02 - two term is three
12:06 - and then the m term which is eight is
12:09 - just the sum
12:10 - of um the n minus one term and the n
12:13 - minus two term
12:15 - so just like before we're gonna define a
12:18 - base case
12:21 - and then we're gonna define
12:25 - a recursive call
12:30 - so for the base case um
12:33 - it's pretty this one's pretty simple so
12:37 - if and if like the anthem we're finding
12:39 - is either
12:40 - zero or one we're just going to return
12:43 - one
12:46 - because that's the start of um the
12:49 - fibonacci sequence
12:52 - so this is basically when the
12:55 - recursive method stops
12:59 - and then the trickier part is just um
13:01 - defining this recursive call
13:04 - so i don't think i've said this before
13:06 - but recursive call you're always
13:07 - supposed to return something
13:10 - otherwise like it won't like
13:13 - otherwise your method won't return the
13:15 - very end
13:17 - so yo return we're gonna return
13:23 - some sort of recursive call
13:26 - that that like calls the fibonacci
13:28 - sequence
13:30 - so up here we're actually gonna have two
13:32 - recursive calls in this statement
13:36 - and we're going to add them together
13:38 - because these are going to be
13:40 - sort of like the um n minus one term and
13:43 - mi 2 term
13:45 - so to find the n minus 1 term
13:49 - we're just gonna we're just gonna call
13:51 - the fibonacci nothing again
13:53 - and then same with the n minus two terms
13:56 - and then that's it that's basically like
13:59 - the fibonacci method
14:02 - so if we run it it should return
14:05 - three and zero
14:09 - or not
14:25 - oh no when i wrote the comments
14:29 - no this is i wrote the comments wrong
14:38 - don't leave yet if you don't mind
14:44 - yeah because i looked at this before
14:45 - class and i didn't understand it at all
14:47 - but now
14:48 - now i do but that's because you've added
14:49 - so much okay then could you move down to
14:52 - line number 15 have it start at 15 where
14:56 - the
14:56 - sixth and
14:59 - thank you so much no problem
15:06 - all right so next oh shoot
15:10 - so next um we could just go through the
15:13 - quest questions
15:15 - so first um what's the base case i feel
15:18 - like i've already showed you the um
15:20 - the answers but
15:26 - so is it like the case that leads to the
15:29 - method calling a different method
15:31 - the first time the code in the recursive
15:32 - method the case that ends the recursion
15:36 - or the case that leads to a method
15:38 - calling itself
15:42 - so we have one answer for c another
15:45 - answer for c
15:47 - anyone else have have an answer
15:56 - all right so yeah the correct answer is
15:58 - c
15:59 - um the base case will not always be like
16:03 - the
16:03 - the first or depending on like how you
16:06 - like to code your recursive methods the
16:07 - base case might not always be like the
16:09 - first line
16:11 - all right yep so the correct answer is b
16:14 - so basically um the recursive case
16:17 - is basically when you don't reach the
16:19 - base case
16:21 - so if you don't find a find a needle um
16:24 - basically when you find a piece of hay
16:27 - that's when you basically
16:29 - want to loop back and continue your
16:34 - search
16:37 - um any questions about that quiz
16:39 - question
16:43 - all right so question number three
16:47 - which of the following program
16:48 - structures is a recursive method
16:50 - is a recursive method the most similar
16:52 - to so is a recursive method like a loop
16:55 - an if-else statement an abstract class
16:58 - or an array
16:59 - all right so yeah basically a recursive
17:03 - method
17:03 - actually like what for a lot of
17:05 - compilers
17:06 - um they'll actually secretly turn
17:09 - recursive methods into for loops
17:12 - but um basically a recursive method
17:15 - is just like a really fancy for loop but
17:18 - it's a lot
17:18 - a lot more readable than having like a
17:20 - for loop that's like
17:22 - that has a bunch of different conditions
17:26 - and then finally or secondary last
17:30 - um we have this code um basically
17:34 - just this method called do something it
17:36 - takes in it
17:37 - um an integer n and it does some sort of
17:41 - like
17:42 - recursive call or something so
17:45 - what will be the output of this code one
17:47 - inside the main method
17:49 - i called do something and the n is equal
17:51 - to three
17:53 - here like yeah it could be it can be a
17:55 - little um
17:57 - like especially when we just have a
17:58 - method called like do something
18:00 - it's really like it can be a little um
18:03 - daunting to
18:04 - like try and figure it out but um try to
18:06 - go step by step so like first
18:08 - what's the base case of this
18:13 - when does this method stop basically
18:18 - when n is greater than zero does it stop
18:21 - oh right
18:21 - no it's it writes something out no it's
18:23 - if it's not greater than
18:25 - zero yeah
18:31 - and it returns zero so next like in this
18:34 - recursive call
18:36 - um what do you think like this recursive
18:39 - call looks like
18:40 - like what do you think it's trying so we
18:43 - know like
18:44 - first off it's sort of like taking n and
18:47 - it's adding something
18:49 - so it's adding the do something of n
18:51 - minus one
18:52 - so we sort of like think about it and
18:55 - like
18:58 - let's say like or if we sort of think
19:01 - about it on a greater scale like
19:04 - do something like what do you think
19:07 - just by looking at like this line do
19:09 - what does do something
19:10 - do you could also try to compare it to
19:15 - um
19:16 - to some of the methods in the demo that
19:18 - we
19:19 - we wrote so like in fibonacci sequence
19:23 - it kind of like we kind of also had
19:26 - something similar where it's like
19:28 - fibonacci n minus 1 plus fibonacci n
19:31 - minus 2. but in this case we just do
19:34 - n plus do something n minus 1.
19:42 - so i don't i don't know
19:48 - yeah this this could be like this can be
19:50 - a little tricky if you're like not used
19:52 - to you thinking
19:53 - recursively um basically
19:57 - we're sort of um
20:00 - where first off we're like we have this
20:03 - base case so like
20:04 - we're sort of recursing down to n equals
20:07 - zero
20:08 - so when n equals zero um we just return
20:11 - zero and once we look at this recursive
20:14 - case
20:14 - it's sort of like n plus like
20:18 - plus like the do something of n minus
20:21 - one
20:21 - so it's sort of like if you sort of like
20:24 - think about it's like
20:25 - n plus n minus one plus n minus two
20:28 - plus like n minus three all the way down
20:31 - to like
20:32 - zero so we're basically this is
20:35 - basically like a summation
20:37 - so um if n was equal to
20:41 - let's say like let's say zero it will
20:44 - return zero if n equals one
20:46 - then we return like one plus do
20:49 - something
20:50 - one minus one which would be zero so one
20:52 - plus zero and they would sort of like go
20:54 - on
20:55 - after that so it's basically taking
20:58 - the um the summation of n
21:03 - so once we get to three it would be like
21:05 - three
21:06 - plus do something three minus one
21:09 - um actually let me see
21:13 - if i could yeah so like the correct
21:17 - answer
21:18 - um actually i play in chat it's
21:21 - c so i can sort of
21:25 - let me see if there's a good there's a
21:27 - way for me to write this out
21:33 - so basically the general gist of this is
21:42 - um
21:44 - or this is we don't really know what we
21:47 - don't really know what do
21:48 - something means um but
21:51 - again like with what um we talked about
21:54 - with factorial fibonacci
21:56 - the actual name of the method doesn't
21:58 - mean anything
21:59 - like this could be called um this could
22:03 - be called like abc
22:04 - or even like um even foo or something
22:08 - like that
22:09 - but it's the content of the method that
22:11 - actually matters
22:13 - because like the um and this like
22:16 - like do something itself is not like a
22:17 - keyword or like
22:19 - or some sort of special name it's just
22:22 - like a placeholder okay
22:23 - so basically um for do something
22:27 - this is this is not job code this is all
22:30 - like all just nodes
22:32 - um the base case
22:37 - we identified as if if
22:40 - n is equal to zero
22:43 - or actually less than or equal to zero
22:47 - we return zero
22:53 - and then otherwise the recursive case
22:56 - or recursive call
23:00 - we will just do n plus do something
23:05 - n minus 1.
23:08 - so the example i gave for um do
23:11 - something
23:14 - one is
23:17 - um first off we check that if
23:20 - n equals or is less than or equal to
23:23 - zero one is not less than or equal to
23:25 - zero
23:25 - so we'll go straight to the recursive
23:27 - call
23:30 - so the recursive call would just be one
23:33 - plus
23:34 - do something one minus one
23:38 - so over here we're just plugging in the
23:40 - numbers
23:41 - for like the general recursive call
23:47 - yeah so what we do now
23:53 - what but what does do something one
23:56 - minus one mean
23:57 - what is it equal to so that's where
24:00 - we're gonna figure out next
24:01 - so next we're gonna we're gonna
24:05 - um solve for this like do something one
24:08 - minus one call
24:10 - so this is basically equal to do
24:12 - something
24:13 - zero right because we can just like
24:16 - instead of one yes so we just solve for
24:18 - that um inside of the
24:20 - method or inside the parameter and next
24:24 - we'll check is zero less than or equal
24:26 - to zero
24:27 - that's true so we've hit the base case
24:32 - so return zero now
24:36 - once we get back to this do something
24:39 - one um
24:43 - once we've unwrapped like or i like to
24:46 - call it unwrapped
24:47 - so once we like unwrap the recursive
24:49 - call we sort of like
24:51 - um recurse down to the base case
24:54 - the um the final solution would just be
24:57 - one plus zero so basically
25:02 - um this like do something is only part
25:05 - of the final return method
25:07 - so this is actually what we want to
25:09 - return in the end
25:13 - and this do something we're only like
25:15 - solving for
25:17 - a part of the final return like value
25:20 - yeah so basically for we have like this
25:24 - recursion workshop
25:25 - um just a heads up though this one is a
25:28 - lit
25:29 - is set up a little differently than um
25:33 - than like our usual workshops so
25:35 - basically for this one we've already
25:37 - given you a
25:38 - like a recursive method and it's your
25:42 - job to basically identify like what's
25:44 - the base case
25:45 - um and explain like what um each part
25:49 - of this implementation of this recursive
25:51 - method means
25:52 - so like what does this line mean why do
25:55 - we have
25:56 - this um also like what does this line
25:59 - mean
25:59 - and like why do we have it and then find
26:02 - like what is
26:03 - what like what is this like
26:06 - what do these lines mean um like for
26:09 - example is it
26:10 - a recursive call is it a base case um
26:13 - and then what's sort of like the logic
26:15 - behind
26:16 - this method so and then you can either
26:20 - like
26:20 - answer it directly in the replica and
26:24 - like in the comments or you can answer
26:26 - it in the google
26:27 - in the submission form and finally um we
26:30 - would really
26:31 - really appreciate it if you um gave
26:34 - feedback for this class
26:37 - and like their previous classes in
26:39 - general um it really helps us
26:42 - um when students give feedback just so
26:44 - we know like
26:45 - what can we tweak for like the next time
26:47 - we teach this
26:48 - and what can we improve in the future

Cleaned transcript:

all right so today i'm gonna be going over um the last lesson which is about recursion um just like with the stuff we talked about classes the important part is that um you guys understand the more conceptual like stuff with recursion um but i would recommend you again to like try and practice this with java um but it's most important that like the first thing for recursion is you understand how to um how to read a recursive method so like how to be able to look at a recursive path and be like okay this is what actually does and then the next part is be able to being able to like design a recursive method on your own so basically um while go over is just like what is recursion um why do we use recursion and then finally um how you should be thinking about recursion so first off um recursion is kind of just like what i would call like a fancy for loop um it's basically a method that calls itself and why i call it a fancy for loop is basically any for loop can be written into like or any recursive method can be written into a very complicated for loop so um and oftentimes like under the hood um compilers will actually turn recursive methods into a for loop so but in general like a recursive method is just a method that calls itself and this is sort of like a visual representation so like we have a cat that's like that's kind of like recursing into like the screen so next um if recursion is just like a for loop underneath why do we ever use recursion so the reason um recursion is good is in some cases it's actually easier to think through a problem um recursively and also recursion makes things a lot readable um if you understand like how to read a recursive method also like there are some data structures um aka like data trees that are easier to implement using recursion so basically it's easier like this image here is a basically a binary search tree and a lot of the methods related to this kind of data structure is actually a lot easier to um to implement using recursive methods and then finally there are some languages that are a little bit based around recursion so like there are some functional languages like ocamo um or racket or lisp that are that have like this sort of other um paradigm that's not really like java where like they really like recursive methods so it's really um helpful to be able to have like be able to think recursively basically all right so finally i'm just gonna talk about like how you should be thinking through a recursive method so recursion is actually based on this um type of this basically this logic um proof method called inductive reasoning so basically it's sort of like a domino effect proof where it's like if you prove um two kinds of cases then basically it'll um it'll be true for the rest of the cases infinitely so um there are two parts of the inductive reasoning and recursion the first one is basically your base case so in in terms of recursion this is basically the condition where your recursive function actually returns a value and then um you also can think of it as like your base i'll actually be live coding a recursive function later so the next slide i'll actually be um just like working through an actual recursive method like creating one so um maybe like once i actually like once i actually like start doing like creating a recursive method i think like some of this will sort of um sort of click because like yeah this slide is a little bit of me like sort of talking at you about it so maybe if you see it in like in code it'll make sense i could also um like also just implement this method and then show you like where like these boxes fit into like the actual code is that all right well yeah yeah maybe do the demo first maybe that'll clear it up sure all right so this is the double i'm just gonna fork this so um over here i'm just gonna be implementing two recursive methods so both of these are um are more mathy so one is factorial and one is fibonacci um is anyone not familiar with like the fibonacci sequence or um or factorials i'm all right i can explain both of them to you then um so basically factorial is the um here we go so basically factorial is is like if you're given say like a number x x factorial which is like this exclamation point would be like x times x minus 1 um times x minus 2 all the way down to um times one basically so once um basically it'll take the product of like x all the way down to like all the way down to one so for example um like trying to think of an easy number so for example three factorial would be like three times two times one and then another rule is zero factorial is one um does that make sense for factorials basically like you're multiplying a number down all the way to like the um to the value one and then if you do zero factorial that's also one um fibonacci sequence this is a sequence that's like starts with one one two three five eight and this is sort of like a sequence or a pattern where um the two the um the nth term so like say the they say the third term is basically the sum of the previous two terms so like two is the sum of one and one um five is a sum of two and three and then eight is the sum of um three and five so this is just like um a a number sequence that like that has a pattern to it so these two are um are pretty pretty good examples from or they're pretty common examples of recursive methods so um first i'll just be be showing you like how to like how to create the um or how to implement these methods recursively and then once we run it um we should be able to print like these correct values all right so for factorio um basically we want two cases so a base case and then a recursive case or i like to call this a recursive call so basically um we want to first define like one factorial stops so basically factorial will stop when um when you reach one right or when you're or technically like you reach zero because the zero factorial is one so we'll basically define like we'll check if i is equal to one or i is equal to zero we'll just return one because that's like the um that's like one factorial is one and so is zero factorial so that's basically when we're stopping this like factorial method and then finally all you have to do is a recursive call so basically we're gonna call factorial and we're gonna decide like how we're gonna increment i so for factorial then we can trust that this method just works um does that make sense i think so but um maybe one i mean i don't know how is someone gonna set a value for i at some point or what how does it work um basically yeah it'll like do all this stuff with on the factorial method and like do the recursive function and then this factorial method will return an integer and that's like what it turns out so like technically it's the same idea as like as i'm printing out just like any number like three or ten so factorial that thing that you have highlighted is is um considered to be what an integer or a double or a or does it have any def i mean can it it's basically an integer right yeah so i'm in that factorial like i say method yeah yeah okay okay okay thank you you're from so yeah so basically for factorio it's like over here it's technically like solving or like solving for this expression inside of like or solving for this factorial method first before like doing the print all right so next we'll move on to something a little bit more complicated so this is the fibonacci method um the idea with fibonacci again is just that like the um the nth term is basically the sum of the previous two terms so if um let's say n equals and let's use let's use a rig indexing so um this will be 0 1 2 3 4 five so if n equals five then basically um n minus 1 is is 5 or the n minus 1 term and then the n minus two term is three and then the m term which is eight is just the sum of um the n minus one term and the n minus two term so just like before we're gonna define a base case and then we're gonna define a recursive call so for the base case um it's pretty this one's pretty simple so if and if like the anthem we're finding is either zero or one we're just going to return one because that's the start of um the fibonacci sequence so this is basically when the recursive method stops and then the trickier part is just um defining this recursive call so i don't think i've said this before but recursive call you're always supposed to return something otherwise like it won't like otherwise your method won't return the very end so yo return we're gonna return some sort of recursive call that that like calls the fibonacci sequence so up here we're actually gonna have two recursive calls in this statement and we're going to add them together because these are going to be sort of like the um n minus one term and mi 2 term so to find the n minus 1 term we're just gonna we're just gonna call the fibonacci nothing again and then same with the n minus two terms and then that's it that's basically like the fibonacci method so if we run it it should return three and zero or not oh no when i wrote the comments no this is i wrote the comments wrong don't leave yet if you don't mind yeah because i looked at this before class and i didn't understand it at all but now now i do but that's because you've added so much okay then could you move down to line number 15 have it start at 15 where the sixth and thank you so much no problem all right so next oh shoot so next um we could just go through the quest questions so first um what's the base case i feel like i've already showed you the um the answers but so is it like the case that leads to the method calling a different method the first time the code in the recursive method the case that ends the recursion or the case that leads to a method calling itself so we have one answer for c another answer for c anyone else have have an answer all right so yeah the correct answer is c um the base case will not always be like the the first or depending on like how you like to code your recursive methods the base case might not always be like the first line all right yep so the correct answer is b so basically um the recursive case is basically when you don't reach the base case so if you don't find a find a needle um basically when you find a piece of hay that's when you basically want to loop back and continue your search um any questions about that quiz question all right so question number three which of the following program structures is a recursive method is a recursive method the most similar to so is a recursive method like a loop an ifelse statement an abstract class or an array all right so yeah basically a recursive method actually like what for a lot of compilers um they'll actually secretly turn recursive methods into for loops but um basically a recursive method is just like a really fancy for loop but it's a lot a lot more readable than having like a for loop that's like that has a bunch of different conditions and then finally or secondary last um we have this code um basically just this method called do something it takes in it um an integer n and it does some sort of like recursive call or something so what will be the output of this code one inside the main method i called do something and the n is equal to three here like yeah it could be it can be a little um like especially when we just have a method called like do something it's really like it can be a little um daunting to like try and figure it out but um try to go step by step so like first what's the base case of this when does this method stop basically when n is greater than zero does it stop oh right no it's it writes something out no it's if it's not greater than zero yeah and it returns zero so next like in this recursive call um what do you think like this recursive call looks like like what do you think it's trying so we know like first off it's sort of like taking n and it's adding something so it's adding the do something of n minus one so we sort of like think about it and like let's say like or if we sort of think about it on a greater scale like do something like what do you think just by looking at like this line do what does do something do you could also try to compare it to um to some of the methods in the demo that we we wrote so like in fibonacci sequence it kind of like we kind of also had something similar where it's like fibonacci n minus 1 plus fibonacci n minus 2. but in this case we just do n plus do something n minus 1. so i don't i don't know yeah this this could be like this can be a little tricky if you're like not used to you thinking recursively um basically we're sort of um where first off we're like we have this base case so like we're sort of recursing down to n equals zero so when n equals zero um we just return zero and once we look at this recursive case it's sort of like n plus like plus like the do something of n minus one so it's sort of like if you sort of like think about it's like n plus n minus one plus n minus two plus like n minus three all the way down to like zero so we're basically this is basically like a summation so um if n was equal to let's say like let's say zero it will return zero if n equals one then we return like one plus do something one minus one which would be zero so one plus zero and they would sort of like go on after that so it's basically taking the um the summation of n so once we get to three it would be like three plus do something three minus one um actually let me see if i could yeah so like the correct answer um actually i play in chat it's c so i can sort of let me see if there's a good there's a way for me to write this out so basically the general gist of this is um or this is we don't really know what we don't really know what do something means um but again like with what um we talked about with factorial fibonacci the actual name of the method doesn't mean anything like this could be called um this could be called like abc or even like um even foo or something like that but it's the content of the method that actually matters because like the um and this like like do something itself is not like a keyword or like or some sort of special name it's just like a placeholder okay so basically um for do something this is this is not job code this is all like all just nodes um the base case we identified as if if n is equal to zero or actually less than or equal to zero we return zero and then otherwise the recursive case or recursive call we will just do n plus do something n minus 1. so the example i gave for um do something one is um first off we check that if n equals or is less than or equal to zero one is not less than or equal to zero so we'll go straight to the recursive call so the recursive call would just be one plus do something one minus one so over here we're just plugging in the numbers for like the general recursive call yeah so what we do now what but what does do something one minus one mean what is it equal to so that's where we're gonna figure out next so next we're gonna we're gonna um solve for this like do something one minus one call so this is basically equal to do something zero right because we can just like instead of one yes so we just solve for that um inside of the method or inside the parameter and next we'll check is zero less than or equal to zero that's true so we've hit the base case so return zero now once we get back to this do something one um once we've unwrapped like or i like to call it unwrapped so once we like unwrap the recursive call we sort of like um recurse down to the base case the um the final solution would just be one plus zero so basically um this like do something is only part of the final return method so this is actually what we want to return in the end and this do something we're only like solving for a part of the final return like value yeah so basically for we have like this recursion workshop um just a heads up though this one is a lit is set up a little differently than um than like our usual workshops so basically for this one we've already given you a like a recursive method and it's your job to basically identify like what's the base case um and explain like what um each part of this implementation of this recursive method means so like what does this line mean why do we have this um also like what does this line mean and like why do we have it and then find like what is what like what is this like what do these lines mean um like for example is it a recursive call is it a base case um and then what's sort of like the logic behind this method so and then you can either like answer it directly in the replica and like in the comments or you can answer it in the google in the submission form and finally um we would really really appreciate it if you um gave feedback for this class and like their previous classes in general um it really helps us um when students give feedback just so we know like what can we tweak for like the next time we teach this and what can we improve in the future
