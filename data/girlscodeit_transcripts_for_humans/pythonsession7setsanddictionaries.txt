With timestamps:

00:01 - okay
00:06 - so hello my name is anu um i'll be your
00:09 - instructor for today i'm an instructor
00:11 - for girls coded
00:12 - and today we're gonna go over sets and
00:14 - dictionaries two data structures
00:17 - that we went over before but today we're
00:19 - going to go over
00:20 - in more depth now for agenda for today
00:23 - we're going to go over a quick recap
00:25 - what are sets and dictionaries again and
00:27 - then we'll go
00:29 - over them in more depth we'll talk about
00:31 - methods we could use
00:32 - with sets and dictionaries then um
00:36 - we're going to do a very cool demo in my
00:37 - opinion
00:39 - and we're going to try and solve five
00:41 - questions in under
00:42 - five minutes let's go now quick recap
00:47 - so both sets and diction um
00:51 - both lists and sets they're data types
00:54 - that can store a group of things
00:55 - or in other words they're a type of data
00:58 - structure
01:00 - and we'll go um later we'll see
01:03 - like um what are the main differences
01:05 - between them
01:07 - now also quick recap for dictionaries so
01:10 - um dictionaries hold
01:15 - a sequence of key value pairs we could
01:19 - create like an analogy like like a
01:21 - actual dictionary
01:23 - where the key would be the
01:26 - the word and the value would be the
01:29 - definition
01:31 - and
01:34 - going along with that analogy it
01:36 - wouldn't make sense
01:37 - if there were
01:41 - two of the same words in uh in a
01:44 - dictionary
01:45 - so yeah for dictionaries in python there
01:47 - are no
01:48 - key duplicates
01:54 - now what are sets now
01:57 - if you've taken um some advanced
01:59 - mathematics
02:01 - you would know or even just like
02:03 - pre-calc
02:05 - you would know there's um there's a real
02:07 - number set
02:08 - there's integers there's um
02:11 - complex numbers and sets in python
02:15 - actually represents
02:16 - a real mathematical set and we can
02:18 - perform
02:19 - um operations such as unions and
02:22 - intersections
02:23 - but that's a little advanced but the
02:26 - main idea to get
02:27 - out of sets is that sets are both
02:30 - unordered and unsequenced
02:34 - so we can't index into a set like we can
02:36 - with a list
02:38 - um but we can iterate through a set
02:42 - um just as with like a list with like a
02:45 - for loop
02:47 - um and because it's unordered
02:50 - and unsequenced um there are no
02:54 - duplicates allowed in sets
02:57 - and if you try to put a duplicate of the
03:00 - same value python would automatically
03:02 - get rid
03:02 - of one of the duplicates so if you see
03:05 - the syntax
03:07 - there um instead of uh
03:11 - you know the square brackets we have the
03:13 - curly brackets
03:14 - to signify a set but we can also turn
03:18 - a list into a set with the set function
03:21 - you can see
03:22 - with um the variable y
03:25 - now set methods
03:28 - so there's four methods we can use with
03:30 - sets
03:34 - now likes lists
03:41 - sets are mutable so we can in fact add
03:43 - values
03:44 - into the set unlike tuples
03:49 - um let's just go over the over them one
03:52 - by one so
03:54 - add what does add do now
03:57 - let's just start off
04:00 - with printing our
04:04 - set so example is a variable that
04:07 - contains um references
04:10 - the set is set over here we print it
04:14 - we get what we expected a set with
04:18 - four elements now what if we add
04:24 - a value of 100 oh
04:27 - get rid of indented block
04:30 - then yeah the important thing to notice
04:34 - here is that
04:35 - we didn't add 100 to the end of the set
04:40 - in fact python just randomly placed it
04:43 - um in um
04:46 - as the fourth element
04:51 - so um the add method just adds it to
04:55 - a random spot in the set
04:59 - and because because sets are unordered
05:02 - so sets don't keep track of order um
05:07 - now we can also remove values
05:11 - so yes we can remove
05:14 - the three over here
05:17 - um another thing we can do
05:22 - is we can pop out
05:26 - a random value so if we did pop over
05:29 - here
05:33 - oh taking a bit long let me get rid of
05:37 - this so you guys can see
05:40 - okay let me stop
05:43 - play okay so it popped out um the value
05:48 - one so pop
05:49 - gets rid of a random element in the set
05:55 - so that um the main differences between
05:57 - remove and
05:58 - pop is that remove we can specify what
06:01 - value you want to get rid of
06:02 - and pop just removes a random value
06:06 - and the last one is clear and as
06:09 - the name implies
06:13 - it clears the entire set returning an
06:15 - empty set
06:17 - so those are four methods we could use
06:19 - we could add to an
06:20 - element because we can add to a set
06:23 - because a set is mutable
06:25 - we can pop out a random element and we
06:27 - can also
06:29 - remove a specified element
06:32 - in addition to that we can just clear
06:34 - everything
06:37 - oh yeah as i said before we can do union
06:40 - and
06:40 - intersections we can do unions and
06:42 - intersections
06:44 - um i won't get into it now
06:47 - but it's just a good thing to know
06:51 - okay yeah as i said just to reiterate
06:54 - sets are not sequence they're
06:58 - unordered which means that the elements
07:02 - must be unique meaning that there are no
07:04 - duplicates
07:05 - and on the other hand list our sequence
07:08 - and ordered and that's why we can
07:10 - index into a list but we can index
07:13 - into a set because lists are
07:16 - yeah they're ordered sets are unordered
07:19 - and unsequenced
07:22 - um i guess we have an example over here
07:28 - okay let's fork it let's fork it
07:32 - here
07:36 - if we run this example we get what we
07:39 - expected
07:40 - a list can indeed hold duplicate values
07:45 - but a set as we said
07:48 - cannot hold duplicate values so it
07:50 - python automatically gets rid of one of
07:53 - the duplicates so there's only
07:55 - one um ones
07:58 - uh three that's a string
08:05 - so yeah why don't we always use list
08:08 - well if we wanted to have unique values
08:13 - and we didn't care about indexing into a
08:15 - data structure
08:16 - we could just easily use lists and
08:19 - python
08:20 - guests were the duplicate elements for
08:22 - us
08:24 - now dictionaries okay fun part
08:27 - dictionaries so dictionaries are also
08:30 - unordered like sets
08:33 - but we can index into a dictionary
08:39 - and um i guess another common thing like
08:42 - between all of them is that lists sets
08:45 - and dictionaries they're all
08:46 - mutable we can all change them
08:49 - but like as i said before sets we can't
08:52 - index into them but dictionaries we can
08:54 - index into them
08:56 - with um their keys
09:00 - well which we'll see later um
09:03 - yeah and this is the syntax for creating
09:05 - a dictionary
09:06 - you got the curly brackets and then we
09:09 - just um specify the key value pairs
09:15 - and then like the comma separating those
09:17 - key value pairs
09:20 - now yeah how can we index into a
09:22 - dictionary
09:23 - or how can we access items it should be
09:26 - an example around here okay yes
09:31 - accessing dictionaries
09:36 - okay let me fork it again
09:40 - okay now there's two main ways of
09:44 - accessing a dictionary
09:46 - and i'll just go over both of them um
09:49 - say example ah
09:55 - dot yeah get um
09:59 - let's say a
10:03 - print that out and then
10:07 - let's comment this out
10:10 - nope okay okay one that's expected
10:18 - so get is a method where we
10:22 - um specify um the key
10:26 - and then we get the value associated
10:28 - with that key
10:29 - and the value that's associated with the
10:32 - key
10:33 - a is of course one now if we wanted to
10:36 - get
10:37 - a key value pair that does not exist
10:42 - so you see there's no um key
10:46 - as a c it just returns none
10:49 - so now get isn't what we would call an
10:52 - accessor method
10:53 - so um
10:56 - the basic it's more of a like a java
11:00 - concept but
11:02 - uh an accessor method just accesses
11:05 - um the value within the dictionary and
11:10 - if it's not there
11:11 - then like no biggie it won't um throw
11:14 - any errors
11:15 - now this type of syntax on the other
11:18 - hand
11:20 - if we tried to
11:23 - say we tried to
11:28 - print out
11:32 - try to access c
11:35 - but with um this type of syntax what
11:37 - would happen
11:38 - now this would um thrown error
11:46 - and um the way i think about this is
11:48 - that um
11:51 - here we're just trying to access it it's
11:54 - an accessor method
11:55 - and if it's not there um then
11:59 - you know just return none because
12:01 - there's like nothing there
12:03 - but here kind of like with a list
12:07 - um you know list
12:10 - we did two three
12:15 - and if we did we tried to access um
12:20 - index four we did that
12:24 - then yeah that was thrown um an error as
12:26 - well
12:27 - so with this syntax
12:31 - the way i think about it is that we're
12:32 - assuming that the index
12:34 - a value at index four exists and if it
12:37 - doesn't
12:38 - then python will just throw an error
12:42 - so that's um one difference between
12:45 - those two
12:46 - ways of accessing methods
12:49 - but one cool way with this type of
12:52 - syntax is that
12:53 - we can automatically create key value
12:56 - pairs
12:57 - so if we did this
13:05 - oh and then we print example again
13:10 - then we would see um
13:14 - uh that python automatically creates a
13:17 - key value pair
13:18 - with the key c and the value
13:21 - three so that's one cool thing about
13:24 - that type of syntax
13:28 - and yeah those are the two main
13:29 - differences between them
13:32 - so example.getc
13:38 - would return none if uh the key value
13:41 - pair doesn't exist
13:44 - but this would return an error if we
13:46 - just try to access it
13:48 - but for this type of syntax we can
13:50 - automatically create
13:53 - key value pairs
13:56 - now yeah
14:00 - changing adding values
14:03 - so this slide just goes over what i've
14:05 - talked about before
14:06 - how we can
14:10 - um yeah we can create new values that
14:12 - correspond
14:14 - um to an existing key name
14:17 - so if we wanted to do this
14:22 - oh oh boy oh that's true because we have
14:26 - this here
14:27 - we did this then yeah we can change the
14:30 - value
14:33 - over here and we can also add
14:37 - um a new key value pair
14:43 - with this type of syntax if we did see
14:45 - over here
14:46 - so that just goes over what i've talked
14:48 - about before
14:50 - now we're moving values there's three
14:53 - ways we could do this let's go
14:57 - let's do another example three ways we
15:00 - can do this
15:02 - let's fork it again
15:06 - okay they forked it oh by the way fork
15:09 - just means
15:10 - um just make
15:14 - like if you know like google docs you
15:16 - can make a copy
15:17 - of like any um document
15:20 - and it'll then be your own so you can
15:23 - think about it like that
15:24 - um now okay removing values
15:28 - for sets we could pop and it would pop a
15:31 - random value
15:32 - um element within a set for dictionaries
15:35 - we can specify what we want to pop so
15:40 - okay actually let me print example here
15:47 - so right here that's where we popped um
15:52 - a so it doesn't exist anymore
15:55 - or the key value pair with a doesn't
15:58 - exist anymore because we popped it
16:01 - and it also returns the value for the
16:04 - key
16:04 - a which is one
16:08 - um for delete for delete
16:12 - which is kind of like pop um
16:17 - we can delete um the key value pair for
16:20 - d yeah
16:22 - which um after this line the
16:25 - um the key value pair with the key v
16:27 - doesn't exist anymore
16:30 - so that's just another way to get rid of
16:33 - the value
16:33 - and for clear of course that just um
16:36 - clears everything
16:37 - within the dictionary and returns an
16:39 - empty dictionary
16:41 - um you could memorize the syntax but the
16:46 - main idea
16:47 - with dictionaries is that um
16:50 - they're mutable one because we can
16:53 - delete and we can add to dictionaries
16:56 - and that um
17:01 - not um we can unlike
17:04 - like lists we have to index into a
17:06 - dictionary with
17:08 - um it's with keys
17:13 - those are the main ideas behind
17:16 - dictionaries
17:17 - so quite like with lists we can also
17:19 - iterate through dictionaries
17:22 - so let's go to our example
17:26 - gotta fork it again
17:30 - it's fork okay okay we got it okay
17:35 - so um i think it'd be easier if i did
17:38 - this
17:40 - oh boy okay yeah
17:43 - let's do this okay so
17:47 - entering through dictionaries it's
17:49 - better if i just take it one step at a
17:50 - time
17:51 - so what does this mean example.items
17:54 - um okay so
17:58 - this would just return a list
18:02 - of um the key value pairs
18:06 - with tuples so we can see there's a key
18:09 - value pair here
18:11 - the key a and then the value one and
18:13 - then python just create a tuple
18:15 - with um then a and one
18:19 - and that would be the um the first
18:21 - element of the
18:22 - list and then this uh
18:26 - the second element would be the second
18:28 - key value
18:29 - pair which is b and two so that's what
18:32 - items is so
18:34 - it has both um the keys and the values
18:37 - now let's go
18:41 - see another example okay
18:45 - now we can also just iterate um we could
18:47 - just return the values as well
18:50 - which are just um the values in the key
18:53 - value
18:54 - key value pairs and then
18:57 - same thing with keys we can only look at
19:00 - keys
19:02 - if we wanted to with the syntax
19:06 - so remember items values keys items both
19:10 - and values and keys as a name implies
19:13 - this looks like the values or just the
19:15 - keys
19:17 - um
19:17 - [Music]
19:21 - then next we're gonna go over like
19:24 - actually iterating
19:27 - over these three types
19:31 - now let me okay
19:35 - so for value okay so we went over this
19:39 - before
19:40 - like with lists as i had a list a
19:45 - and we had yeah for num
19:48 - for a number in our list
19:52 - a we could do anything with
19:55 - um that number or num
19:58 - so we could just print it
20:06 - yeah one two three four so same thing
20:09 - here
20:10 - for value
20:15 - value or um right here that's just a
20:17 - place letter we could put anything we
20:19 - could put
20:20 - for apple
20:24 - and it wouldn't matter except that we
20:25 - would have to change this
20:27 - but let's just go with value it's much
20:30 - more like
20:31 - readable and
20:34 - people that are not familiar with um
20:37 - what you're trying to do can just easily
20:39 - read the code
20:41 - and like just get it so for value and
20:43 - example.value so
20:45 - remember here values are just the values
20:49 - in the key of key
20:52 - value pairs so if we print this out
20:57 - then yeah value one two three four
21:00 - one two three four
21:04 - and i don't know if we i don't know if
21:06 - we went over this
21:07 - but this is an f string
21:10 - where and there's also
21:17 - we could also format it another way we
21:20 - could do
21:21 - um value
21:26 - um zero
21:29 - that format and then give them
21:33 - value which
21:38 - yeah kind of what we expected it to
21:41 - so that's just another way
21:46 - we could do that so yeah just prints the
21:48 - values as we expected
21:52 - so that's iterating over the values of a
21:54 - dictionary
21:55 - now we can also do
21:59 - key values we can iterate both over the
22:02 - keys and values
22:03 - with something called enumerate so
22:08 - to get both the keys and values we would
22:09 - have to use items
22:11 - because remember it's a
22:15 - it does it's a list of it's a list of
22:18 - tuples and the tuples are the key value
22:20 - pairs
22:22 - so if we did examples.items
22:29 - and if we did um
22:34 - index
22:39 - and then we did oh
22:48 - okay oh get rid of that
22:52 - see if it works okay so this is how we
22:56 - iterate over both the keys and values
23:01 - so right here this is the index oh
23:05 - okay actually print
23:09 - um index
23:15 - um index
23:20 - and index
23:25 - actually strength what am i doing string
23:29 - yeah so for enumerate we can unpack the
23:33 - index and also a value for like
23:36 - any iterable so um that includes lists
23:40 - sets or like any iterable so
23:44 - when i'm packing the first value would
23:47 - always be the index which is like
23:50 - um which starts at zero we can start it
23:53 - at
23:53 - any number so we start at 10 yeah
23:57 - 10 11 so just unpacks the index
24:02 - and and um and this is
24:06 - just another way of like doing a manual
24:09 - index where
24:11 - we would create an index variable and
24:12 - then within the loop we would
24:15 - like do index plus equals one
24:19 - instead of doing that we have enumerate
24:21 - to do that for us
24:22 - so then um
24:26 - right here we're looking at each
24:30 - tuple and
24:33 - um these are of course placeholder names
24:38 - and if you look at it like if you take
24:42 - a one for example a is of course the key
24:46 - and then one is the value
24:50 - so yeah for each of them we could print
24:52 - key and value and that's how we
24:54 - do that
24:57 - so demo time
25:07 - actually let's go over
25:10 - like the five under five first and then
25:14 - um
25:18 - i'll just take you guys quickly through
25:20 - the demo
25:22 - so five under five
25:26 - so for the five under pause it when
25:29 - i um i um i asked the question
25:33 - and i could answer it for yourself and
25:35 - then unpause it to see the answer
25:37 - so question one which line
25:40 - in this script will cause it to throw
25:43 - an error so let me
25:46 - i don't want to give you away the answer
25:48 - right here okay
25:50 - five four three two one
25:54 - if you haven't paused pause it and
25:57 - answer it yourself
25:59 - so throw an error on this line
26:02 - because b is an undefined variable and
26:12 - python would um doesn't know the value
26:15 - of
26:15 - b so that's why it would throw the error
26:18 - question two what's the output
26:19 - of this code over here so a equals
26:23 - a string with howdy and we're trying to
26:26 - slice it
26:27 - starting from negative one to
26:30 - um index three so
26:33 - what what is the output of this cone
26:38 - and give you a second deposit okay
26:44 - an empty string now why is this we went
26:46 - over slicing
26:47 - um i think last week
26:51 - and for slicing um if it isn't a valid
26:55 - slice
26:56 - then python would just uh return an
26:58 - empty string
26:59 - or an empty just an empty string or like
27:02 - an empty list
27:04 - so negative one refers to the last
27:06 - element
27:08 - i mean to the last character so y and
27:10 - then three
27:11 - zero one two three so that'll be d
27:14 - and since um python uh for slicing
27:19 - the default step value is one
27:22 - so we all we're always trying to go from
27:24 - left to right unless we indicate
27:26 - otherwise
27:26 - but since we're trying to go from right
27:28 - to left um python just sees that as an
27:30 - invalid slice
27:31 - and this returns an empty string
27:35 - uh in this case question three
27:38 - what's the output of this code over here
27:41 - okay so we have we have two lists
27:43 - and we're trying to add it together
27:48 - okay so what's the output of this code
27:51 - i'll give you a second to pause it and
27:53 - answer this question for yourself
27:58 - okay answer it just conjoins both of
28:02 - them together
28:03 - now yeah python operators are very
28:06 - flexible and
28:07 - can support many data types and the
28:10 - addition operator does support adding
28:13 - um lists together
28:16 - question four what is the output of this
28:19 - code over here
28:22 - so we have two um
28:26 - so we have uh over here a is a list we
28:29 - have
28:30 - a set which is signified by the curly
28:32 - braces and we know it's not a dictionary
28:34 - because
28:35 - there's no key value pairs
28:40 - and then we basically make a copy
28:44 - here
28:48 - for into c eight into c and then we have
28:53 - trying to do the same thing with b and
28:56 - then we're trying to figure out if
28:57 - those two lists are equal or not so
29:00 - what's the output of this code i'll give
29:02 - you a second to answer it yourself
29:05 - okay answer
29:09 - these two lists are not equal
29:14 - so um as we said before python would
29:17 - automatically get rid of duplicates
29:18 - within
29:19 - sets so this right here b
29:23 - actually has four elements rather than
29:26 - five elements
29:27 - like a so um
29:31 - so then as a result c would have would
29:34 - just be like a copy of a
29:36 - it's basically it would have like one
29:39 - two
29:39 - three four four but d would have one two
29:42 - three
29:42 - four because there's no um python does
29:45 - not allow
29:46 - duplicates in
29:49 - uh sets if we printed b
29:52 - right after um initializing it
29:56 - you would see that there's no one of the
29:58 - fours would be removed
30:01 - now question five last question what's
30:03 - the output of this code over here
30:06 - i'll give you guys um a second to answer
30:08 - this as well
30:12 - okay so answer is an error
30:16 - well if you notice um a is a set which
30:18 - is signified by the curly brackets
30:21 - and we're trying to index this as if
30:23 - it's a list
30:24 - but python throws an error because um
30:27 - sets are unordered so in unsequenced so
30:31 - we can't
30:31 - index into them as if they're lists
30:36 - and if you guys have time we have a
30:38 - challenge problem
30:40 - um so the problem is to give an
30:43 - unordered list of
30:45 - integers and print the values
30:48 - that occur only once
30:52 - in the set um
30:55 - this is probably the solution
31:00 - so try to do it i'll i'll just go
31:02 - through the solution so you can check
31:04 - later
31:06 - let's see
31:10 - yeah so this is the solution
31:13 - pretty sure see
31:20 - treat the values that occur only once in
31:22 - the set
31:36 - oh wait no never mind i think
31:40 - see list s3
31:46 - oh wait i think this is a bit too
31:47 - advanced for you guys so you could skip
31:49 - over this
31:50 - or like try to solve the problem on your
31:53 - own
31:54 - whatever suits you and these are some
31:57 - further readings
31:58 - if you guys um have want to learn more
32:01 - in depth about
32:02 - some data other data structures and
32:05 - really in depth how um sets and
32:07 - dictionaries work they have something
32:09 - called
32:10 - a hash they utilize like a hash function
32:13 - but that's
32:13 - a bit advanced
32:17 - um
32:21 - we i do have a demo
32:24 - and i guess i'll just go over the demo
32:28 - quickly
32:32 - so i guess demo time okay demo time
32:36 - so we went over this yeah from like last
32:40 - week's demo
32:41 - but we'll be improving this with sets
32:42 - and dictionaries
32:47 - okay let me walk you guys through this
32:50 - code
32:53 - so set your kids um config so
32:56 - when we do input
32:59 - the syntax right over here we're asking
33:01 - the user to
33:04 - you know input some values so that's
33:07 - what we're doing right here we're trying
33:09 - to receive from some values from the
33:11 - user
33:12 - and then don't worry about script yeah
33:14 - strip just gets rid of the trailing
33:16 - white space
33:18 - um and because this is a wild true
33:21 - loop it'll never end until we break
33:26 - and in this case it will break only if
33:29 - we put in exit
33:32 - so then it will break
33:35 - and okay split let me run this again so
33:38 - split
33:40 - i did screen
33:45 - color equals red so split
33:49 - as a name imply um will split the
33:52 - the string will receive into a list so
33:55 - if
33:56 - we put abc equals xyz
33:59 - it would split it into this list right
34:01 - over here with this as a like a divider
34:06 - for this equal sign so right right here
34:09 - we're going to split down the middle
34:10 - and we're going to have two elements in
34:13 - the list config now if
34:17 - the user doesn't follow the proper
34:20 - format
34:21 - of like this equals um
34:24 - something else then there wouldn't be uh
34:28 - two elements in the array
34:31 - so then we'll throw an error
34:37 - and then after that
34:40 - we're gonna check config zero so that'll
34:43 - be the first element in the array
34:45 - or this right over here if this isn't
34:48 - config set so let's look at config set
34:50 - so we're checking if it's if this
34:55 - first value over here matches this this
34:57 - or this
34:59 - basically then once we do that
35:03 - we're checking to see like for the
35:04 - screen color
35:06 - we're checking to see if um
35:09 - the color we choose is
35:12 - one of the color options right here
35:15 - which is what we're doing right here
35:17 - and then after that we would append um
35:21 - a list another list
35:25 - will depend a list to a list
35:28 - so basically um config list would be a
35:31 - list
35:33 - with elements that are also lists so
35:36 - we'll append
35:37 - uh yeah screen color and then config one
35:40 - which would be
35:40 - our value red in this case
35:45 - then we would print um
35:49 - and if that is not the case if like if
35:51 - we did
35:53 - um black which is not
35:57 - a screen color
36:01 - it would just um throw an error and be
36:04 - like oh this
36:04 - this color isn't an option
36:10 - and then for in other cases we would
36:12 - just
36:13 - if it was like um screen brightness and
36:15 - we put like a hundred
36:17 - it would just um append
36:22 - kind of how we did here it would append
36:23 - it to config list
36:28 - and if this value happens um
36:33 - like if you put like screen
36:36 - if we put like screen darkness that's
36:38 - not a
36:42 - config in within config set so it would
36:44 - just return
36:46 - this isn't a valid uh config
36:49 - option and at the end
36:52 - would print config list which is our
36:55 - list of lists
36:56 - basically list with elements that are
36:59 - also lists that's a better way to put it
37:01 - we did color equals red
37:04 - and we exited it would just
37:08 - print okay now here's a bug within our
37:10 - code
37:11 - what if we did screen color
37:14 - equals red but then we changed oh
37:17 - you know what i want my screen color to
37:19 - be purple
37:23 - and we exited how can
37:26 - a screen color be both red and purple at
37:28 - the same time
37:30 - for our computer um computers
37:33 - aren't that flexible and they want
37:38 - i mean and it wouldn't make sense to
37:41 - have the screen color be both red and
37:43 - purple so that's a
37:45 - bug in our code so how can we fix this
37:49 - this is a list so a list allows for
37:51 - duplicates right
37:52 - but we know that dictionaries don't
37:54 - allow
37:55 - um duplicate key values
37:59 - so they don't allow um
38:03 - allow there to be two screen colors
38:06 - basically
38:07 - we can change this into an empty
38:08 - dictionary right over here
38:10 - and because of that we have to change a
38:13 - ton of other stuff so
38:15 - let's highlight this
38:18 - okay append see append is not an operate
38:21 - um a method that we can use with
38:24 - a dictionary so we have to change that
38:26 - so how can we
38:29 - add to a dictionary oh
38:34 - we could easily just do this screen
38:37 - color
38:41 - equals um
38:44 - config
38:48 - uh one so the second element
38:52 - so here we just um either create
38:56 - or change the value of screen color
38:59 - and then um make the key value pair
39:02 - so the value in the key value pair
39:06 - would just be the last element in our
39:09 - config list
39:11 - or what we get from um
39:14 - the user
39:18 - and we know it's a list because we use
39:20 - split
39:21 - which like converts it as we said into
39:23 - the list um
39:25 - see what else would we have to do we
39:27 - just have to
39:28 - do the pretty much the same thing over
39:30 - here but
39:32 - this would be just
39:35 - config 0 so that would be the
39:40 - this value over here and
39:44 - okay and over here
39:47 - config set we can also change this into
39:50 - a set
39:51 - because we have no reason to have
39:54 - duplicate
39:56 - um
39:59 - duplicate like um configuration
40:04 - configurations like there's no reason to
40:06 - have two screen brightnesses
40:08 - or like two of the same exact colors
40:12 - i mean we can specify like deep red or
40:15 - like light red
40:16 - but we can all we would have to do is
40:19 - maybe do like bright red and
40:20 - maybe have another one like dark red
40:25 - either way there won't be two of the
40:27 - same like
40:28 - values so we can just use a set i'll
40:30 - change this back to red
40:36 - okay add that oof
40:40 - let's see if this works
40:48 - oh okay so go ahead equals red but then
40:51 - i change my mind
40:54 - goes purple and then i exit
40:57 - would you look at that okay it works
41:00 - it works yes there's no
41:04 - um this green color is just purple
41:07 - and our computer will get that
41:11 - it's not both red and purple at the same
41:13 - time it works
41:16 - so that's how we can implement
41:18 - dictionaries and sets in
41:20 - a real life um setting
41:23 - and that's it for today that's all i
41:27 - have for you
41:28 - yeah i hope um
41:31 - you got something out of this and
41:36 - input try to implement um
41:40 - really try to implement anything you're
41:42 - learning into
41:43 - some sort of project and
41:47 - by doing that you'll understand the
41:49 - concept even more
41:51 - in a deeper level and
41:55 - if you have time try to read further
41:57 - into
41:58 - sets and dictionaries and as i said try
42:01 - to
42:02 - implement it into like some sort of
42:04 - project
42:05 - and yeah that's all i have for you today
42:07 - i hope you have a great day
42:10 - and thank you
42:19 - you

Cleaned transcript:

okay so hello my name is anu um i'll be your instructor for today i'm an instructor for girls coded and today we're gonna go over sets and dictionaries two data structures that we went over before but today we're going to go over in more depth now for agenda for today we're going to go over a quick recap what are sets and dictionaries again and then we'll go over them in more depth we'll talk about methods we could use with sets and dictionaries then um we're going to do a very cool demo in my opinion and we're going to try and solve five questions in under five minutes let's go now quick recap so both sets and diction um both lists and sets they're data types that can store a group of things or in other words they're a type of data structure and we'll go um later we'll see like um what are the main differences between them now also quick recap for dictionaries so um dictionaries hold a sequence of key value pairs we could create like an analogy like like a actual dictionary where the key would be the the word and the value would be the definition and going along with that analogy it wouldn't make sense if there were two of the same words in uh in a dictionary so yeah for dictionaries in python there are no key duplicates now what are sets now if you've taken um some advanced mathematics you would know or even just like precalc you would know there's um there's a real number set there's integers there's um complex numbers and sets in python actually represents a real mathematical set and we can perform um operations such as unions and intersections but that's a little advanced but the main idea to get out of sets is that sets are both unordered and unsequenced so we can't index into a set like we can with a list um but we can iterate through a set um just as with like a list with like a for loop um and because it's unordered and unsequenced um there are no duplicates allowed in sets and if you try to put a duplicate of the same value python would automatically get rid of one of the duplicates so if you see the syntax there um instead of uh you know the square brackets we have the curly brackets to signify a set but we can also turn a list into a set with the set function you can see with um the variable y now set methods so there's four methods we can use with sets now likes lists sets are mutable so we can in fact add values into the set unlike tuples um let's just go over the over them one by one so add what does add do now let's just start off with printing our set so example is a variable that contains um references the set is set over here we print it we get what we expected a set with four elements now what if we add a value of 100 oh get rid of indented block then yeah the important thing to notice here is that we didn't add 100 to the end of the set in fact python just randomly placed it um in um as the fourth element so um the add method just adds it to a random spot in the set and because because sets are unordered so sets don't keep track of order um now we can also remove values so yes we can remove the three over here um another thing we can do is we can pop out a random value so if we did pop over here oh taking a bit long let me get rid of this so you guys can see okay let me stop play okay so it popped out um the value one so pop gets rid of a random element in the set so that um the main differences between remove and pop is that remove we can specify what value you want to get rid of and pop just removes a random value and the last one is clear and as the name implies it clears the entire set returning an empty set so those are four methods we could use we could add to an element because we can add to a set because a set is mutable we can pop out a random element and we can also remove a specified element in addition to that we can just clear everything oh yeah as i said before we can do union and intersections we can do unions and intersections um i won't get into it now but it's just a good thing to know okay yeah as i said just to reiterate sets are not sequence they're unordered which means that the elements must be unique meaning that there are no duplicates and on the other hand list our sequence and ordered and that's why we can index into a list but we can index into a set because lists are yeah they're ordered sets are unordered and unsequenced um i guess we have an example over here okay let's fork it let's fork it here if we run this example we get what we expected a list can indeed hold duplicate values but a set as we said cannot hold duplicate values so it python automatically gets rid of one of the duplicates so there's only one um ones uh three that's a string so yeah why don't we always use list well if we wanted to have unique values and we didn't care about indexing into a data structure we could just easily use lists and python guests were the duplicate elements for us now dictionaries okay fun part dictionaries so dictionaries are also unordered like sets but we can index into a dictionary and um i guess another common thing like between all of them is that lists sets and dictionaries they're all mutable we can all change them but like as i said before sets we can't index into them but dictionaries we can index into them with um their keys well which we'll see later um yeah and this is the syntax for creating a dictionary you got the curly brackets and then we just um specify the key value pairs and then like the comma separating those key value pairs now yeah how can we index into a dictionary or how can we access items it should be an example around here okay yes accessing dictionaries okay let me fork it again okay now there's two main ways of accessing a dictionary and i'll just go over both of them um say example ah dot yeah get um let's say a print that out and then let's comment this out nope okay okay one that's expected so get is a method where we um specify um the key and then we get the value associated with that key and the value that's associated with the key a is of course one now if we wanted to get a key value pair that does not exist so you see there's no um key as a c it just returns none so now get isn't what we would call an accessor method so um the basic it's more of a like a java concept but uh an accessor method just accesses um the value within the dictionary and if it's not there then like no biggie it won't um throw any errors now this type of syntax on the other hand if we tried to say we tried to print out try to access c but with um this type of syntax what would happen now this would um thrown error and um the way i think about this is that um here we're just trying to access it it's an accessor method and if it's not there um then you know just return none because there's like nothing there but here kind of like with a list um you know list we did two three and if we did we tried to access um index four we did that then yeah that was thrown um an error as well so with this syntax the way i think about it is that we're assuming that the index a value at index four exists and if it doesn't then python will just throw an error so that's um one difference between those two ways of accessing methods but one cool way with this type of syntax is that we can automatically create key value pairs so if we did this oh and then we print example again then we would see um uh that python automatically creates a key value pair with the key c and the value three so that's one cool thing about that type of syntax and yeah those are the two main differences between them so example.getc would return none if uh the key value pair doesn't exist but this would return an error if we just try to access it but for this type of syntax we can automatically create key value pairs now yeah changing adding values so this slide just goes over what i've talked about before how we can um yeah we can create new values that correspond um to an existing key name so if we wanted to do this oh oh boy oh that's true because we have this here we did this then yeah we can change the value over here and we can also add um a new key value pair with this type of syntax if we did see over here so that just goes over what i've talked about before now we're moving values there's three ways we could do this let's go let's do another example three ways we can do this let's fork it again okay they forked it oh by the way fork just means um just make like if you know like google docs you can make a copy of like any um document and it'll then be your own so you can think about it like that um now okay removing values for sets we could pop and it would pop a random value um element within a set for dictionaries we can specify what we want to pop so okay actually let me print example here so right here that's where we popped um a so it doesn't exist anymore or the key value pair with a doesn't exist anymore because we popped it and it also returns the value for the key a which is one um for delete for delete which is kind of like pop um we can delete um the key value pair for d yeah which um after this line the um the key value pair with the key v doesn't exist anymore so that's just another way to get rid of the value and for clear of course that just um clears everything within the dictionary and returns an empty dictionary um you could memorize the syntax but the main idea with dictionaries is that um they're mutable one because we can delete and we can add to dictionaries and that um not um we can unlike like lists we have to index into a dictionary with um it's with keys those are the main ideas behind dictionaries so quite like with lists we can also iterate through dictionaries so let's go to our example gotta fork it again it's fork okay okay we got it okay so um i think it'd be easier if i did this oh boy okay yeah let's do this okay so entering through dictionaries it's better if i just take it one step at a time so what does this mean example.items um okay so this would just return a list of um the key value pairs with tuples so we can see there's a key value pair here the key a and then the value one and then python just create a tuple with um then a and one and that would be the um the first element of the list and then this uh the second element would be the second key value pair which is b and two so that's what items is so it has both um the keys and the values now let's go see another example okay now we can also just iterate um we could just return the values as well which are just um the values in the key value key value pairs and then same thing with keys we can only look at keys if we wanted to with the syntax so remember items values keys items both and values and keys as a name implies this looks like the values or just the keys um then next we're gonna go over like actually iterating over these three types now let me okay so for value okay so we went over this before like with lists as i had a list a and we had yeah for num for a number in our list a we could do anything with um that number or num so we could just print it yeah one two three four so same thing here for value value or um right here that's just a place letter we could put anything we could put for apple and it wouldn't matter except that we would have to change this but let's just go with value it's much more like readable and people that are not familiar with um what you're trying to do can just easily read the code and like just get it so for value and example.value so remember here values are just the values in the key of key value pairs so if we print this out then yeah value one two three four one two three four and i don't know if we i don't know if we went over this but this is an f string where and there's also we could also format it another way we could do um value um zero that format and then give them value which yeah kind of what we expected it to so that's just another way we could do that so yeah just prints the values as we expected so that's iterating over the values of a dictionary now we can also do key values we can iterate both over the keys and values with something called enumerate so to get both the keys and values we would have to use items because remember it's a it does it's a list of it's a list of tuples and the tuples are the key value pairs so if we did examples.items and if we did um index and then we did oh okay oh get rid of that see if it works okay so this is how we iterate over both the keys and values so right here this is the index oh okay actually print um index um index and index actually strength what am i doing string yeah so for enumerate we can unpack the index and also a value for like any iterable so um that includes lists sets or like any iterable so when i'm packing the first value would always be the index which is like um which starts at zero we can start it at any number so we start at 10 yeah 10 11 so just unpacks the index and and um and this is just another way of like doing a manual index where we would create an index variable and then within the loop we would like do index plus equals one instead of doing that we have enumerate to do that for us so then um right here we're looking at each tuple and um these are of course placeholder names and if you look at it like if you take a one for example a is of course the key and then one is the value so yeah for each of them we could print key and value and that's how we do that so demo time actually let's go over like the five under five first and then um i'll just take you guys quickly through the demo so five under five so for the five under pause it when i um i um i asked the question and i could answer it for yourself and then unpause it to see the answer so question one which line in this script will cause it to throw an error so let me i don't want to give you away the answer right here okay five four three two one if you haven't paused pause it and answer it yourself so throw an error on this line because b is an undefined variable and python would um doesn't know the value of b so that's why it would throw the error question two what's the output of this code over here so a equals a string with howdy and we're trying to slice it starting from negative one to um index three so what what is the output of this cone and give you a second deposit okay an empty string now why is this we went over slicing um i think last week and for slicing um if it isn't a valid slice then python would just uh return an empty string or an empty just an empty string or like an empty list so negative one refers to the last element i mean to the last character so y and then three zero one two three so that'll be d and since um python uh for slicing the default step value is one so we all we're always trying to go from left to right unless we indicate otherwise but since we're trying to go from right to left um python just sees that as an invalid slice and this returns an empty string uh in this case question three what's the output of this code over here okay so we have we have two lists and we're trying to add it together okay so what's the output of this code i'll give you a second to pause it and answer this question for yourself okay answer it just conjoins both of them together now yeah python operators are very flexible and can support many data types and the addition operator does support adding um lists together question four what is the output of this code over here so we have two um so we have uh over here a is a list we have a set which is signified by the curly braces and we know it's not a dictionary because there's no key value pairs and then we basically make a copy here for into c eight into c and then we have trying to do the same thing with b and then we're trying to figure out if those two lists are equal or not so what's the output of this code i'll give you a second to answer it yourself okay answer these two lists are not equal so um as we said before python would automatically get rid of duplicates within sets so this right here b actually has four elements rather than five elements like a so um so then as a result c would have would just be like a copy of a it's basically it would have like one two three four four but d would have one two three four because there's no um python does not allow duplicates in uh sets if we printed b right after um initializing it you would see that there's no one of the fours would be removed now question five last question what's the output of this code over here i'll give you guys um a second to answer this as well okay so answer is an error well if you notice um a is a set which is signified by the curly brackets and we're trying to index this as if it's a list but python throws an error because um sets are unordered so in unsequenced so we can't index into them as if they're lists and if you guys have time we have a challenge problem um so the problem is to give an unordered list of integers and print the values that occur only once in the set um this is probably the solution so try to do it i'll i'll just go through the solution so you can check later let's see yeah so this is the solution pretty sure see treat the values that occur only once in the set oh wait no never mind i think see list s3 oh wait i think this is a bit too advanced for you guys so you could skip over this or like try to solve the problem on your own whatever suits you and these are some further readings if you guys um have want to learn more in depth about some data other data structures and really in depth how um sets and dictionaries work they have something called a hash they utilize like a hash function but that's a bit advanced um we i do have a demo and i guess i'll just go over the demo quickly so i guess demo time okay demo time so we went over this yeah from like last week's demo but we'll be improving this with sets and dictionaries okay let me walk you guys through this code so set your kids um config so when we do input the syntax right over here we're asking the user to you know input some values so that's what we're doing right here we're trying to receive from some values from the user and then don't worry about script yeah strip just gets rid of the trailing white space um and because this is a wild true loop it'll never end until we break and in this case it will break only if we put in exit so then it will break and okay split let me run this again so split i did screen color equals red so split as a name imply um will split the the string will receive into a list so if we put abc equals xyz it would split it into this list right over here with this as a like a divider for this equal sign so right right here we're going to split down the middle and we're going to have two elements in the list config now if the user doesn't follow the proper format of like this equals um something else then there wouldn't be uh two elements in the array so then we'll throw an error and then after that we're gonna check config zero so that'll be the first element in the array or this right over here if this isn't config set so let's look at config set so we're checking if it's if this first value over here matches this this or this basically then once we do that we're checking to see like for the screen color we're checking to see if um the color we choose is one of the color options right here which is what we're doing right here and then after that we would append um a list another list will depend a list to a list so basically um config list would be a list with elements that are also lists so we'll append uh yeah screen color and then config one which would be our value red in this case then we would print um and if that is not the case if like if we did um black which is not a screen color it would just um throw an error and be like oh this this color isn't an option and then for in other cases we would just if it was like um screen brightness and we put like a hundred it would just um append kind of how we did here it would append it to config list and if this value happens um like if you put like screen if we put like screen darkness that's not a config in within config set so it would just return this isn't a valid uh config option and at the end would print config list which is our list of lists basically list with elements that are also lists that's a better way to put it we did color equals red and we exited it would just print okay now here's a bug within our code what if we did screen color equals red but then we changed oh you know what i want my screen color to be purple and we exited how can a screen color be both red and purple at the same time for our computer um computers aren't that flexible and they want i mean and it wouldn't make sense to have the screen color be both red and purple so that's a bug in our code so how can we fix this this is a list so a list allows for duplicates right but we know that dictionaries don't allow um duplicate key values so they don't allow um allow there to be two screen colors basically we can change this into an empty dictionary right over here and because of that we have to change a ton of other stuff so let's highlight this okay append see append is not an operate um a method that we can use with a dictionary so we have to change that so how can we add to a dictionary oh we could easily just do this screen color equals um config uh one so the second element so here we just um either create or change the value of screen color and then um make the key value pair so the value in the key value pair would just be the last element in our config list or what we get from um the user and we know it's a list because we use split which like converts it as we said into the list um see what else would we have to do we just have to do the pretty much the same thing over here but this would be just config 0 so that would be the this value over here and okay and over here config set we can also change this into a set because we have no reason to have duplicate um duplicate like um configuration configurations like there's no reason to have two screen brightnesses or like two of the same exact colors i mean we can specify like deep red or like light red but we can all we would have to do is maybe do like bright red and maybe have another one like dark red either way there won't be two of the same like values so we can just use a set i'll change this back to red okay add that oof let's see if this works oh okay so go ahead equals red but then i change my mind goes purple and then i exit would you look at that okay it works it works yes there's no um this green color is just purple and our computer will get that it's not both red and purple at the same time it works so that's how we can implement dictionaries and sets in a real life um setting and that's it for today that's all i have for you yeah i hope um you got something out of this and input try to implement um really try to implement anything you're learning into some sort of project and by doing that you'll understand the concept even more in a deeper level and if you have time try to read further into sets and dictionaries and as i said try to implement it into like some sort of project and yeah that's all i have for you today i hope you have a great day and thank you you
