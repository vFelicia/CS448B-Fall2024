With timestamps:

00:00 - hey i'm sydney and i'm teaching today's
00:02 - intro to github lesson
00:04 - so to answer everyone's million dollar
00:06 - question github is a website
00:08 - it provides users with a graphical
00:10 - interface to easily manage their
00:12 - repositories which you can think of as a
00:14 - project
00:14 - and it helps users manage version
00:16 - control we'll go over what version
00:17 - control is in a little bit
00:19 - but for right now just know the
00:20 - distinction github is not version
00:22 - control
00:23 - github is a website the concept of
00:26 - version control
00:26 - is really simple and very useful you
00:29 - probably even use it yourself
00:30 - here's an example you're writing an
00:33 - essay for class in a google doc when you
00:34 - accidentally delete everything you've
00:36 - written
00:36 - without version control this would be
00:38 - pretty devastating but google has its
00:40 - own type of version control that saves
00:41 - you from losing all of your work
00:43 - you can easily go back into your files
00:44 - history and go back to the point you
00:46 - want
00:46 - and you can also look at other people's
00:48 - changes to your work and pinpoint who
00:49 - made changes where just in case someone
00:51 - tried to take your name off a part of
00:52 - the project you did
00:53 - this idea is what makes up version
00:55 - control the ability to go back
00:57 - to an earlier version of your work so
00:59 - you never have to worry about losing it
01:00 - here's where things can get a little bit
01:02 - tricky so github again is just the
01:04 - website you can host your code up there
01:06 - take other people's code from there and
01:08 - you can have a visual interface of your
01:10 - code and your repositories
01:12 - on github but when it comes to actual
01:14 - genuine version control people usually
01:16 - think of a command line tool named
01:18 - git or a terminal tool depending on how
01:20 - you want to call it
01:21 - so git was founded developed by linus
01:24 - torvalds who's the creator of linux and
01:26 - git's original purpose was to make it
01:27 - easy to collaborate and diversion
01:29 - control
01:30 - on an open source project by the name of
01:31 - linux so
01:33 - that is why git came around and that is
01:35 - what it is used for i know they sound
01:37 - similar
01:37 - but there's github the website and get
01:39 - the command line tool
01:40 - so let's go a bit more in depth about
01:42 - what git actually is i already told you
01:44 - it's a command line terminal type tool
01:47 - but what it does is it allows you
01:49 - through commands to create repositories
01:51 - you can think of a repository as a
01:53 - project but what it lets you do
01:55 - is you can add whatever files you want
01:56 - to keep track of into
01:58 - said repository once they're in there
02:00 - any changes you make to those files
02:02 - your repository will know so if for some
02:05 - reason something happens to the current
02:07 - version of your project
02:08 - that you're working on you can use
02:09 - commands with git to go back in time or
02:11 - revert your project to a previous state
02:14 - this is super helpful and you can do
02:16 - this using a bunch of different commands
02:17 - some of which we'll go over in the next
02:19 - segment
02:20 - so here are some of the basic commands
02:22 - that start up your git repository or
02:25 - project there are actually hundreds of
02:28 - different commands for
02:29 - git and it can be a little bit
02:30 - overwhelming at first so we're just
02:31 - going to go over these three
02:33 - so for the first one get a knit this
02:36 - command creates a new repository
02:38 - at the location you specify the location
02:40 - meaning where on your computer
02:42 - you would like that repository to focus
02:44 - on oftentimes you can just right click
02:46 - on a folder and open up your terminal
02:47 - and that lets your terminal know
02:49 - that that's where you want the
02:50 - repository to be so git add this is a
02:52 - little misleading because it's actually
02:53 - git
02:54 - add space and then a period but this
02:57 - command adds
02:58 - all the files in the folder you
02:59 - specified to your repository so this
03:01 - lets the repository know
03:02 - hey these are all the files i got to
03:04 - look at i got to keep track of these so
03:06 - i can have a
03:07 - log of them later so then git commit
03:09 - dash am
03:11 - it commits all the changes in your files
03:13 - to your repository with the message
03:15 - along with it
03:16 - these are usually short and sweet
03:17 - messages and you use them to kind of
03:19 - talk about what you did in the files
03:21 - so they can't be too long so they're
03:22 - usually very brief so for your first
03:24 - commit you might write something like
03:26 - first commit to the repository so very
03:29 - simple but important to have so when
03:30 - you're looking back at a log of all your
03:32 - history
03:32 - you're like okay i know what i did for
03:34 - each of these commits
03:36 - now that we've looked over the commands
03:37 - let's look at how git and github
03:39 - interact with one another
03:41 - so like i mentioned a couple times
03:42 - earlier github is used to host code and
03:44 - allow other users to take a look at your
03:46 - own repositories
03:47 - this is really really helpful when
03:49 - you're working with a team if you're
03:50 - with a team of people and you're all
03:52 - working on the same project
03:53 - being able to easily download and work
03:55 - on the newest version of said project is
03:57 - invaluable
03:58 - because otherwise you'd have to download
04:00 - your project onto a flash drive and hand
04:01 - it off to the person next to you would
04:02 - download it onto their computer
04:04 - and that would take forever so being
04:06 - able to just go online and pull the most
04:08 - recent changes
04:09 - onto your own computer is super helpful
04:11 - we use branches to do this efficiently
04:13 - and
04:14 - keep it from muddling up the main you
04:15 - know repository
04:17 - but we'll go over that in a moment once
04:19 - you've decided that you want to host
04:20 - your repository on github putting it up
04:22 - there is
04:22 - pretty easy to do this on github you
04:25 - need to open up a new repository
04:26 - manually on the site
04:28 - even though you already have a
04:30 - repository locally on your computer
04:32 - github will need you to create an empty
04:33 - one that you can upload your own local
04:35 - repository into
04:37 - this is done using several commands but
04:39 - we can explore those commands a bit more
04:42 - in a later lesson there are literally
04:43 - hundreds of github commands and they'd
04:45 - be kind of hard to cover
04:46 - in a 15 minute video but once you're
04:49 - able to upload your local which is on
04:50 - your computer
04:51 - repository to remote which is hosted on
04:53 - github repository
04:55 - it provides a very easy way for you to
04:57 - look back at changes easily
04:58 - and it allows other people to contribute
05:00 - to your code branches are a way to
05:02 - manage features while you're working on
05:03 - a programming project
05:04 - when you're working in a team this is an
05:06 - excellent way to make sure your code
05:07 - base doesn't get too muddled from
05:09 - everyone's code commits
05:10 - they allow different developers to have
05:12 - different sections of the project that
05:13 - they're working on
05:14 - without having to worry about
05:15 - conflicting with each other
05:18 - essentially branches provide playgrounds
05:21 - for everyone who's working on a project
05:22 - to work on your features
05:24 - for example if you're working on a
05:25 - website you might have two or more
05:27 - branches and one of these branches
05:28 - is usually called the master branch or
05:31 - the main branch
05:32 - this branch is going to store all the
05:34 - code going into production
05:35 - production code is all the code that is
05:37 - currently being used on your live
05:39 - project
05:39 - or anything your users can interact with
05:42 - so if you and your team decide to send
05:43 - out an
05:44 - update to a website then you're going to
05:46 - be using the code from your master
05:47 - branch
05:48 - another branch you may have in your
05:49 - project is the feature branch the
05:51 - feature brands provides developers a
05:52 - risk-free area
05:54 - to create and update new features
05:55 - without worrying about messing up the
05:56 - code in the production branch
05:58 - so if you were a developer and you
06:00 - decided you wanted to implement a new
06:02 - feature
06:02 - you would do that on the feature branch
06:05 - because if you did it in the test branch
06:07 - and whatever you wrote didn't work and
06:10 - you put that in production code
06:12 - that would be a big problem on your
06:13 - website some
06:15 - projects may have a test branch as well
06:17 - which is where developers can merge all
06:19 - the different branches working all the
06:20 - different features
06:21 - without worrying about conflicts messing
06:23 - up production code that is very bad
06:25 - production code is that is going to the
06:27 - user
06:27 - you want to leave it alone if you can
06:29 - but once the feature has been tested and
06:31 - is ready to go into production
06:33 - github the website makes it very easy to
06:35 - merge the branch with the feature
06:37 - into the branch with the production code
06:39 - after that it's as simple as deleting
06:41 - the branch we're working on
06:42 - you can also do this using git in a
06:44 - series of commands but github gives you
06:46 - a very easy user interface to work with
06:48 - let's talk about what open source code
06:51 - is when you're working on a project you
06:53 - might think of a feature you really want
06:54 - to implement into your code base
06:56 - but you don't know exactly how to do it
06:58 - or maybe you don't have the desire to
07:00 - reinvent the wheel from scratch
07:02 - so you look for other people's code to
07:03 - help you achieve your goal the reason
07:05 - why we're able to download and use other
07:07 - people's code in our projects
07:09 - is due to the concept of open source
07:11 - code this
07:12 - simply put is just making your source
07:14 - code available to the public
07:17 - this is quite a few benefits for one
07:19 - making your code open source allows
07:21 - other people to take a look at it
07:22 - and point out errors or mismanagements
07:24 - in your code base that you would have
07:25 - otherwise not found
07:27 - next for large companies like amazon or
07:29 - netflix
07:30 - making their code open source allows
07:32 - them to have people outside of their
07:34 - company
07:34 - work on the code essentially getting
07:36 - free work done
07:38 - of course proprietary code or code that
07:40 - can make the company money
07:41 - is not made open source but an api
07:44 - or an application programming interface
07:47 - could be
07:47 - open source and allow people to use
07:49 - however they want or maybe
07:51 - a user-friendly enhancement to a product
07:53 - could very well be made available to the
07:54 - public
07:55 - so when you're working on an open source
07:57 - project or a project with more than one
07:59 - person
07:59 - chances are you're going to find a bug
08:01 - and you want to let your team know about
08:02 - it
08:03 - on github this is pretty easy to do all
08:05 - you have to do is open up an issue and
08:07 - that'll let your team know
08:08 - hey i found a bug in our code let's get
08:10 - to work on it this is also pretty
08:12 - helpful
08:13 - when you want to create a new feature if
08:15 - you think of something that you think
08:16 - might be cool
08:17 - you can post it up for your teammates to
08:18 - see and that way everyone knows
08:20 - who's working on what nothing would be
08:22 - worse than you and your teammate working
08:24 - on the same issue
08:25 - instead of stuff that you could both be
08:27 - working on independently
08:29 - and that's time you'll never get back
08:31 - but communication is always
08:33 - critical when it comes to working with
08:34 - teams on a project
08:36 - working with the team is a totally
08:37 - different ballpark than working on your
08:39 - own when it comes to programming
08:41 - when you work on your own no one really
08:42 - cares if you have really bad
08:44 - poorly written code or how many branches
08:46 - you have if you have any at all
08:48 - if you're opening issues and closing
08:49 - them no one really cares about those
08:51 - procedures because
08:52 - you know you're the only one looking at
08:53 - your code when you're working with a
08:54 - team of people
08:55 - everything you do impacts everyone else
08:57 - so make sure to always be a team player
09:00 - there is no eye in team and teamwork is
09:02 - a dream work and you want to work like a
09:03 - well-oiled machine
09:05 - not like a broken down car because it
09:07 - will come back to bite you in the butt
09:09 - so hard if you refuse to take your other
09:11 - teammates criticism critiques
09:13 - or work with them and use the the tools
09:16 - that github has given you
09:17 - to make a team environment it is super
09:19 - important to always be communicating
09:21 - always talk to your members your team
09:23 - members about the features you're
09:24 - working on or the upcoming issues or the
09:26 - things that you fixed
09:27 - because otherwise you're just going to
09:28 - waste a lot of time and i can tell you
09:30 - if you
09:31 - decide to go off on your own and go lone
09:33 - rogue
09:34 - and just do your own thing your
09:36 - teammates are going to get annoyed at
09:37 - you and annoyed code is not good code
09:40 - so make sure to always be working
09:41 - together
09:45 - so that's it for me today i hope you
09:47 - enjoyed the video if you have any
09:48 - questions please let us know
09:50 - but other than that uh yeah peace out
09:53 - guys

Cleaned transcript:

hey i'm sydney and i'm teaching today's intro to github lesson so to answer everyone's million dollar question github is a website it provides users with a graphical interface to easily manage their repositories which you can think of as a project and it helps users manage version control we'll go over what version control is in a little bit but for right now just know the distinction github is not version control github is a website the concept of version control is really simple and very useful you probably even use it yourself here's an example you're writing an essay for class in a google doc when you accidentally delete everything you've written without version control this would be pretty devastating but google has its own type of version control that saves you from losing all of your work you can easily go back into your files history and go back to the point you want and you can also look at other people's changes to your work and pinpoint who made changes where just in case someone tried to take your name off a part of the project you did this idea is what makes up version control the ability to go back to an earlier version of your work so you never have to worry about losing it here's where things can get a little bit tricky so github again is just the website you can host your code up there take other people's code from there and you can have a visual interface of your code and your repositories on github but when it comes to actual genuine version control people usually think of a command line tool named git or a terminal tool depending on how you want to call it so git was founded developed by linus torvalds who's the creator of linux and git's original purpose was to make it easy to collaborate and diversion control on an open source project by the name of linux so that is why git came around and that is what it is used for i know they sound similar but there's github the website and get the command line tool so let's go a bit more in depth about what git actually is i already told you it's a command line terminal type tool but what it does is it allows you through commands to create repositories you can think of a repository as a project but what it lets you do is you can add whatever files you want to keep track of into said repository once they're in there any changes you make to those files your repository will know so if for some reason something happens to the current version of your project that you're working on you can use commands with git to go back in time or revert your project to a previous state this is super helpful and you can do this using a bunch of different commands some of which we'll go over in the next segment so here are some of the basic commands that start up your git repository or project there are actually hundreds of different commands for git and it can be a little bit overwhelming at first so we're just going to go over these three so for the first one get a knit this command creates a new repository at the location you specify the location meaning where on your computer you would like that repository to focus on oftentimes you can just right click on a folder and open up your terminal and that lets your terminal know that that's where you want the repository to be so git add this is a little misleading because it's actually git add space and then a period but this command adds all the files in the folder you specified to your repository so this lets the repository know hey these are all the files i got to look at i got to keep track of these so i can have a log of them later so then git commit dash am it commits all the changes in your files to your repository with the message along with it these are usually short and sweet messages and you use them to kind of talk about what you did in the files so they can't be too long so they're usually very brief so for your first commit you might write something like first commit to the repository so very simple but important to have so when you're looking back at a log of all your history you're like okay i know what i did for each of these commits now that we've looked over the commands let's look at how git and github interact with one another so like i mentioned a couple times earlier github is used to host code and allow other users to take a look at your own repositories this is really really helpful when you're working with a team if you're with a team of people and you're all working on the same project being able to easily download and work on the newest version of said project is invaluable because otherwise you'd have to download your project onto a flash drive and hand it off to the person next to you would download it onto their computer and that would take forever so being able to just go online and pull the most recent changes onto your own computer is super helpful we use branches to do this efficiently and keep it from muddling up the main you know repository but we'll go over that in a moment once you've decided that you want to host your repository on github putting it up there is pretty easy to do this on github you need to open up a new repository manually on the site even though you already have a repository locally on your computer github will need you to create an empty one that you can upload your own local repository into this is done using several commands but we can explore those commands a bit more in a later lesson there are literally hundreds of github commands and they'd be kind of hard to cover in a 15 minute video but once you're able to upload your local which is on your computer repository to remote which is hosted on github repository it provides a very easy way for you to look back at changes easily and it allows other people to contribute to your code branches are a way to manage features while you're working on a programming project when you're working in a team this is an excellent way to make sure your code base doesn't get too muddled from everyone's code commits they allow different developers to have different sections of the project that they're working on without having to worry about conflicting with each other essentially branches provide playgrounds for everyone who's working on a project to work on your features for example if you're working on a website you might have two or more branches and one of these branches is usually called the master branch or the main branch this branch is going to store all the code going into production production code is all the code that is currently being used on your live project or anything your users can interact with so if you and your team decide to send out an update to a website then you're going to be using the code from your master branch another branch you may have in your project is the feature branch the feature brands provides developers a riskfree area to create and update new features without worrying about messing up the code in the production branch so if you were a developer and you decided you wanted to implement a new feature you would do that on the feature branch because if you did it in the test branch and whatever you wrote didn't work and you put that in production code that would be a big problem on your website some projects may have a test branch as well which is where developers can merge all the different branches working all the different features without worrying about conflicts messing up production code that is very bad production code is that is going to the user you want to leave it alone if you can but once the feature has been tested and is ready to go into production github the website makes it very easy to merge the branch with the feature into the branch with the production code after that it's as simple as deleting the branch we're working on you can also do this using git in a series of commands but github gives you a very easy user interface to work with let's talk about what open source code is when you're working on a project you might think of a feature you really want to implement into your code base but you don't know exactly how to do it or maybe you don't have the desire to reinvent the wheel from scratch so you look for other people's code to help you achieve your goal the reason why we're able to download and use other people's code in our projects is due to the concept of open source code this simply put is just making your source code available to the public this is quite a few benefits for one making your code open source allows other people to take a look at it and point out errors or mismanagements in your code base that you would have otherwise not found next for large companies like amazon or netflix making their code open source allows them to have people outside of their company work on the code essentially getting free work done of course proprietary code or code that can make the company money is not made open source but an api or an application programming interface could be open source and allow people to use however they want or maybe a userfriendly enhancement to a product could very well be made available to the public so when you're working on an open source project or a project with more than one person chances are you're going to find a bug and you want to let your team know about it on github this is pretty easy to do all you have to do is open up an issue and that'll let your team know hey i found a bug in our code let's get to work on it this is also pretty helpful when you want to create a new feature if you think of something that you think might be cool you can post it up for your teammates to see and that way everyone knows who's working on what nothing would be worse than you and your teammate working on the same issue instead of stuff that you could both be working on independently and that's time you'll never get back but communication is always critical when it comes to working with teams on a project working with the team is a totally different ballpark than working on your own when it comes to programming when you work on your own no one really cares if you have really bad poorly written code or how many branches you have if you have any at all if you're opening issues and closing them no one really cares about those procedures because you know you're the only one looking at your code when you're working with a team of people everything you do impacts everyone else so make sure to always be a team player there is no eye in team and teamwork is a dream work and you want to work like a welloiled machine not like a broken down car because it will come back to bite you in the butt so hard if you refuse to take your other teammates criticism critiques or work with them and use the the tools that github has given you to make a team environment it is super important to always be communicating always talk to your members your team members about the features you're working on or the upcoming issues or the things that you fixed because otherwise you're just going to waste a lot of time and i can tell you if you decide to go off on your own and go lone rogue and just do your own thing your teammates are going to get annoyed at you and annoyed code is not good code so make sure to always be working together so that's it for me today i hope you enjoyed the video if you have any questions please let us know but other than that uh yeah peace out guys
