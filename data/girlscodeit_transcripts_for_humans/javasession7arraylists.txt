With timestamps:

00:00 - one all right
00:03 - so today we're going to be talking about
00:05 - um arraylist
00:07 - they're pretty similar to um to like
00:10 - arrays which we talked about last week
00:12 - but there are a few differences
00:14 - of like how they're stored and what kind
00:17 - of methods you can
00:18 - use on them so first off
00:21 - um we're just gonna go over the
00:23 - difference between a raise and array
00:25 - list
00:26 - so arrays are basically like
00:29 - so how do i put this arrays are kind of
00:33 - our and arraylists are basically stored
00:35 - differently in memory
00:36 - and the general um differences is that
00:39 - first off arrays are fixed size
00:41 - and they kind of store primitives and
00:44 - objects
00:45 - and you can basically look like see the
00:47 - size through this field called link
00:50 - um arraylist on our hand can basically
00:52 - you can basically add
00:54 - and remove stuff from arraylist so they
00:55 - can change in size
00:57 - um they store only objects and you can
00:59 - find out like how big they are through
01:01 - size
01:02 - yes so you have to import arraylists so
01:05 - remember how we have our scanner objects
01:07 - remember we've gotten really familiar
01:09 - with those we've used our scanner
01:10 - objects a lot
01:11 - and we use dart we've uh excuse me we've
01:14 - used our scanner objects to take in
01:16 - things like
01:17 - favorite ice cream flavors and secret
01:19 - numbers and all that stuff
01:21 - well scanners are imported objects and
01:23 - you have to do the same thing with
01:24 - arraylist so arraylist you need to be
01:26 - importing them
01:27 - and you can use that with the import
01:31 - java.util.arraylist
01:32 - at the top of your program so just as
01:34 - you would import a scanner you want to
01:35 - import your arraylist if you use them
01:37 - next slide please so
01:40 - initialization so this comes after we've
01:43 - imported
01:45 - so we've imported the arraylist at the
01:48 - java.util.arraylist
01:50 - beginning of our program done now we
01:52 - want to actually create our arraylist so
01:54 - how we're going to go about doing that
01:55 - we're going to use arraylist so we're
01:57 - going to use the keyword arraylist
01:59 - then we're going to put our data type in
02:01 - what i like to call triangle
02:03 - slash carrot brackets so we're going to
02:05 - put our data type in this case it's
02:07 - going to be a string
02:08 - so we're going to be having strings in
02:10 - the arraylist today
02:12 - um we're going to put the name of the
02:14 - arraylist so how we're going to refer to
02:15 - the arraylist in things like methods and
02:17 - in things like for loops so we're going
02:19 - to put the name in pet list
02:20 - that's what we're calling our arraylist
02:22 - notice how we have capitalization
02:24 - at key points um equals the keyword
02:27 - new arraylist so it's a new arraylist
02:31 - and the data type once again these two
02:33 - have to match
02:34 - so the data type originally has to match
02:36 - the data type over here
02:37 - and the initial size because arraylists
02:41 - are super duper flexible
02:42 - in varying size you can have
02:46 - um no initialization like size value
02:49 - because arraylist will grow as you need
02:51 - them to or
02:52 - um shrink as you need them to if you
02:54 - take values away
02:56 - so you don't actually have to have an
02:57 - initial size but if you have an initial
02:59 - size in your brain
03:00 - you can put that down in the initial
03:02 - size but both will work if you're trying
03:04 - to create an arraylist in your program
03:06 - so these are the four methods that we'll
03:08 - be going over
03:09 - for um arraylist the first one is add
03:12 - there's also get set and remove um
03:16 - hopefully add get and remove are pretty
03:19 - like
03:19 - pretty self-explanatory um you just add
03:22 - something you can like
03:24 - access an element using git and you can
03:26 - remove something using remove
03:28 - and then set is just if you want to
03:29 - change like
03:31 - a element inside of the ray list so this
03:34 - will just
03:34 - set an index to like a new value
03:40 - so this is how you can use ads so you
03:42 - can basically
03:44 - do arraylist.ad and then you can pass in
03:47 - a new element
03:48 - or you can even add something to like a
03:50 - specific index
03:51 - so if you pass in the index first it'll
03:54 - add the element
03:55 - into like that part of the array list
03:57 - and push everything back
04:03 - and then next is good so get is kind of
04:06 - like
04:07 - indexing into an array so you can do
04:09 - like an arraylist.getindex and that will
04:12 - just return
04:12 - the element at that index
04:17 - um set index comma element so
04:21 - in this case as we remember we needed
04:23 - our specified index
04:24 - and we also need our element so pet list
04:26 - set um
04:29 - set one to pair it so in this case it
04:32 - would replace
04:33 - whatever was that index one with parrot
04:36 - um
04:37 - as always don't forget your semicolons
04:39 - and yeah
04:41 - so um if you remove something it'll make
04:43 - the arraylist shorter
04:45 - you also need to watch out for the index
04:47 - out of bounds
04:48 - exception because if you try removing an
04:51 - item that isn't there
04:52 - so if you try removing something at the
04:55 - fourth index
04:56 - but um your arraylist is too short for
04:59 - that
05:00 - you're gonna get the index out of bounds
05:02 - exception error
05:04 - um so just be wary of removing things
05:06 - from
05:07 - your arraylists and then finally you
05:09 - have like the size method
05:11 - and size will just return it's kind of
05:13 - like array.link
05:14 - it will just return the size of the
05:16 - arraylist um
05:17 - printing arraylist so if we ever wanted
05:19 - to just like print it out
05:21 - um in the console for any reason we can
05:24 - use a for loop or a for each loop a for
05:27 - each loop is also referred to
05:29 - as an enhanced for loop so if you know
05:32 - by that name
05:33 - um a for loop so four integer i
05:36 - equals zero i is less than pet list dot
05:40 - size
05:40 - i plus plus system dot out dot print
05:43 - line
05:44 - pet list dot get i so print out the
05:47 - element at every
05:48 - index of pet list starting at zero and
05:50 - finishing
05:51 - at size minus one notice we don't have
05:54 - pet list size minus one because we're
05:57 - using the less than
05:59 - indicator we're not using the less than
06:01 - or equals so if we were using
06:03 - i is less than or equals we would have
06:06 - to use pet list dot
06:07 - size minus one but since we're not we're
06:09 - just using the less than we can just
06:11 - have pet list.size yeah so important
06:14 - little piece of syntax there
06:16 - um before each loop um so for string pet
06:21 - pet list um system.out.printline
06:25 - pass pet excuse me
06:28 - and print out every element within pet
06:30 - list
06:31 - obviously this is a little bit neater
06:33 - than this
06:34 - but um in like real world applications i
06:38 - see this way more often than
06:40 - an enhanced for loop or like a for each
06:43 - loop kind of thing
06:45 - um there is a demo here for the for loop
06:48 - and the for each loop
06:49 - so um import.java util arraylist
06:52 - remember we
06:53 - have to import arraylist if we're going
06:54 - to use them very important so we have
06:57 - that at the very top right
07:00 - uh class main public static void main
07:03 - string
07:04 - whatever let's create a list of decimals
07:07 - so obviously
07:08 - right off the bat we know that we're
07:09 - doing a list of decimals
07:11 - so what are we going to have with our
07:13 - data type doubles
07:14 - right so arraylist double here's our
07:17 - data type here let me move this over so
07:19 - that's in one line
07:20 - um arraylistdouble datatype decimals so
07:24 - our arraylist is called decimals
07:25 - equals new arraylist double we don't
07:28 - have a set value here but we can fill
07:30 - that in later because arraylists are
07:32 - flexible and can grow and change
07:34 - now we're just going to add a bunch of
07:35 - values so we have five point five
07:38 - eighteen point four forty five point six
07:40 - yadda yadda yadda yadda
07:41 - all these numbers um what's important to
07:45 - note here is that when we're using add
07:46 - they add on to the end so notice how it
07:49 - goes 15.5
07:50 - then 18.4 then 45.6 because we're just
07:54 - adding them on
07:55 - in the way that they came in
07:58 - and we add them on in the way that they
08:00 - were added to the array so it's a
08:02 - sequential order like that
08:04 - um let's print out the array for i z
08:07 - for i equals zero um i is less than
08:10 - decimals dot
08:11 - size i plus plus
08:15 - system.out.printlinedecimals.geti
08:16 - so in this case this is our regular for
08:18 - loop so
08:20 - we have i equals 0 and then if i our
08:23 - variable is less than decimals dot size
08:26 - we're going to add one to i so
08:28 - system.printline
08:29 - get i so in this case we just have our
08:32 - variable here and we're going to start
08:33 - at index 0 and then print all of them
08:35 - out
08:35 - so that would end like right here after
08:37 - the 10.2
08:39 - we also have a for each loop so for each
08:42 - double x so in this case it's just like
08:50 - yeah so in this case um we can't use
08:52 - integers
08:53 - because our um
08:57 - arraylist isn't holding integers it's
08:58 - holding doubles so we match the data
09:00 - type so double
09:01 - x so just a regular it's like how we
09:04 - would instantiate an integer variable
09:06 - like
09:06 - into x but in this case it's double x
09:08 - because our value types are doubles
09:10 - and if we didn't set them to doubles we
09:12 - would have an
09:13 - index out of bounds exception no
09:18 - some kind of error there's a lot of
09:20 - different kinds of errors in java
09:22 - um and then double x
09:25 - um like for our decimal class
09:28 - um what's our semicolon mean
09:34 - i think it's just like relating it to
09:36 - the array itself so like our array name
09:38 - is decimals
09:39 - so double x um to the array name
09:43 - decimal so like double x for decimals
09:45 - system.out
09:46 - um line x so it just knows that like
09:48 - every single time we're just gonna add
09:50 - one to x so this is kind of just like
09:51 - simplifying all of this syntax
09:53 - into this double x um
09:56 - yeah so in this case we would have it
09:58 - printed out twice but if we wanted to
09:59 - comment these out we could
10:01 - do that and we'd only print out ones
10:05 - all right so now we can basically sort
10:08 - of
10:08 - look at all their bayless methods in
10:11 - this demo
10:13 - um i'm just gonna quickly
10:16 - share this in chat um as
10:20 - always like if you want you i would
10:22 - actually recommend you guys like
10:24 - go in and play around with the code um
10:27 - like change up the elements
10:28 - and um and change up the methods just so
10:32 - you guys like
10:33 - get a sense of how each of these methods
10:35 - work
10:36 - but as always like remember to work
10:38 - before you change code
10:41 - so basically in this demo we have an
10:44 - arraylist of strings called bands
10:47 - and um you can we've basically added
10:51 - like
10:51 - a couple of bands over here as strings
10:54 - and we've removed the second um index
10:57 - of this arraylist so the second
11:00 - index would be zero one two so we've
11:03 - removed this element
11:05 - from the bands of average and then we
11:08 - basically
11:09 - also set reset the fourth index
11:13 - to one direction and then now we're just
11:16 - gonna
11:16 - like take in a number from like
11:20 - from the user um scan it as an integer
11:23 - and then basically um sort of print out
11:27 - which band they should listen to so
11:31 - um this is just going to show you how
11:33 - like how you're going to get on the size
11:35 - of the band
11:36 - um get an element and also like add and
11:39 - remove stuff
11:41 - within your waivers um any questions
11:44 - about this
11:49 - sweet so when it runs it'll just tell
11:52 - you like
11:53 - um which band would you like to listen
11:55 - to enter a number from one to five
11:58 - um you can type in something like three
12:02 - and then it'll give you a bad name in
12:08 - return
12:10 - sweet and then here's just another demo
12:14 - about arraylist
12:16 - um it's sort of like the same idea we
12:18 - have this
12:19 - arraylist of um
12:22 - or we have like several different array
12:24 - lists of like strings
12:25 - integers um booleans characters
12:28 - and whatnot so notice like
12:32 - um if you remember from the really
12:34 - beginning of this lesson
12:35 - i've kind of said like a um can't take
12:38 - in
12:38 - objects or it can't take in primitives
12:41 - so
12:42 - notice how like in this
12:45 - these arraylists like i do have an
12:47 - arraylist of like integers
12:49 - but they're kind of spelled differently
12:51 - so um an in
12:53 - is kind of like the integer primitive is
12:56 - kind of like in
12:57 - x equals 10 or something like that
13:01 - but um over here we pass in an integer
13:04 - class so
13:06 - the reason we have this is because um
13:09 - arraylist can't um take in primitives
13:13 - so what we've done is we've java
13:16 - actually has
13:16 - these things called wrapper classes for
13:19 - um their primitives
13:24 - yep so basically um all the primitives
13:28 - are actually wrapped up in these classes
13:30 - and they're all just like their names
13:32 - but capitalized
13:33 - so that's how you can basically store a
13:36 - primitive innervate list
13:42 - any questions about this so that's kind
13:44 - of it for content
13:46 - and um i just have a list of a few
13:50 - questions that we can all go over
13:52 - um the first set are sort of like the
13:54 - easier questions where it's like
13:56 - you can just um or this is just like
14:00 - very basic questions and then we'll have
14:03 - um
14:04 - another set of questions that are a
14:05 - little bit more difficult
14:11 - yep so this first question is arraylist
14:13 - can change size
14:16 - so we've got two answers for true
14:19 - um anybody else have any idea
14:25 - sweet so it looks like most people are
14:27 - saying a
14:28 - and you're right so arraylist can change
14:31 - size so you can basically add and take
14:34 - away things
14:35 - without too much difficulty um on the
14:38 - other hand like arrays are more set in
14:40 - size
14:40 - so it's a little harder to like add and
14:42 - remove stuff
14:47 - sweet so the next one is the method
14:52 - used to find the size of an arraylist is
14:54 - linked so most people have said b
14:56 - and that's correct so the correct um
14:59 - answer
15:00 - would be um the correct answer for like
15:03 - a method used to find the select
15:05 - size of your waitlist is size
15:07 - [Music]
15:10 - next one is all of the following are
15:12 - ways to traverse an arraylist
15:13 - except this the correct answer is print
15:16 - all
15:17 - um just remember that d the enhanced for
15:20 - loop is also called the for each loop
15:23 - which of the following is the correct
15:25 - way to import their baylist
15:26 - class all right so
15:30 - the correct answer is the um
15:33 - all of these are so the first one
15:36 - import java.util um not exactly correct
15:41 - i guess you could import the entire util
15:43 - library but
15:44 - again this is not the way you do it um
15:47 - this is just a completely different
15:49 - class
15:50 - and um for c you don't have to have the
15:53 - java
15:53 - import and then finally be um it's not
15:56 - like python where you can just do like
15:58 - import blank um you'll have to actually
16:01 - specify
16:02 - the package that arraylist is in
16:06 - jessica i have a question um in some of
16:09 - the examples
16:10 - um i saw something that said import
16:16 - java.util.asterisk and it looked as if
16:18 - yeah it looked as if that was somehow
16:21 - replacing or
16:23 - or or instead of the array list and i
16:26 - it so is that what is that
16:29 - so basically the asterisk is like if you
16:32 - want to
16:33 - import everything from this library so
16:35 - arraylist is just
16:36 - one class from the java.util library
16:40 - this will import like all the classes in
16:42 - java.util
16:46 - so is that a good idea or not a good
16:48 - idea i mean does that take up like
16:50 - a lot of space or is it anything to be
16:52 - concerned about or you should
16:53 - is it better to just bring in the
16:55 - specific ones you want
16:57 - um i i don't think there's exactly like
17:01 - a correct answer
17:02 - but personally like personally i don't
17:05 - prefer to have this like
17:07 - import java.youtube.com because like
17:10 - it imports a lot of unnecessary classes
17:13 - um
17:14 - i i think it would just be better to
17:16 - import like the one class you need
17:18 - but like if you have yeah like
17:21 - if there's ever a case where you're
17:23 - making a complex program where like
17:25 - you need a bunch of different classes
17:27 - from youtube this might be good though
17:30 - okay yeah just like whatever you prefer
17:40 - all right so i think this is the next
17:43 - question
17:44 - hopefully
17:47 - all right so which of the following is
17:49 - the correct way to get the first value
17:51 - in the list called nums
17:53 - so it seems like most people have b
17:56 - and some people have a um
17:59 - i guess there's a little confusion of
18:01 - like is nums
18:03 - an array or a list um remember that
18:07 - over here we've called it a list so like
18:10 - a list is just a shorter way of calling
18:13 - it an arraylist
18:14 - um eventually you'll like learn that an
18:17 - arraylist
18:18 - is actually like a linked list but
18:20 - that's like its own can of worms
18:23 - but um over here nums isn't a ring list
18:26 - so we can't exactly um get the first
18:29 - value just by
18:30 - indexing it like a regular array um
18:32 - we'll have to use the get method
18:34 - so d is the correct answer
18:40 - so and now to the oh some more spicier
18:43 - questions i guess
18:45 - so over here we have a code segment
18:49 - an arraylist of strings and we added a
18:51 - bunch of stuff to it
18:53 - and we've set something something um in
18:55 - the list
18:56 - so what's the result of this code
18:59 - segment
19:00 - the thing that trips everyone else is
19:02 - the set over here
19:04 - so when you set something um unlike uh
19:07 - adding to a specific index you're
19:09 - actually changing that index
19:11 - so after this um list that's set to e
19:15 - you're not gonna have um you're
19:18 - basically
19:19 - gonna be removing a because you're
19:21 - changing that to e
19:26 - all right so which of the following is
19:28 - the correct way to sub
19:30 - i'm sorry i'm sorry could you go back
19:32 - did you did you
19:33 - did you change the answer to that is
19:35 - that so what is the answer to the one
19:38 - before it's speaking
19:41 - oh okay yeah because of setting you're
19:44 - replacing
19:44 - the the third element with the
19:49 - okay okay yeah so if it was a list one
19:52 - dot add
19:52 - two and then e then it would be d but
19:55 - we're setting it
19:57 - in b yeah
20:06 - so which of the following is the correct
20:09 - way to set the second
20:10 - element of a list called nums q5
20:14 - oh shoot you're right the second element
20:17 - would be would be one yeah
20:23 - yeah so those are adding it setting the
20:25 - third element in the
20:26 - yeah list to five not the second so yeah
20:29 - it would be
20:30 - one instead of two yeah
20:33 - so yeah none of them are direct
20:37 - so b has the correct like the correct
20:40 - things you have to pass
20:41 - in you have to have like the index and
20:44 - the new element
20:45 - but has the wrong index yeah
20:48 - so you're right it should be the correct
20:51 - answer would be numstat set one comma
20:53 - five
20:58 - sweet so given the list nums
21:02 - four two three four five
21:05 - what's the result after executing nums
21:07 - that remove four so we have a lot of
21:09 - people saying
21:10 - d um just remember that nums is also
21:14 - an arraylist of integers
21:20 - so most people are saying yi and they're
21:22 - correct
21:23 - so this could be a little tricky that
21:26 - like
21:26 - you can it's easy to confuse like if you
21:29 - have an arraylist of integers
21:31 - is this like the element or the um
21:34 - or the index but java if you pass an
21:38 - integer
21:38 - will default to sorry can't give me it
21:42 - so when it when you're passing in an
21:44 - integer java will default
21:46 - to assuming that it's the index so
21:49 - it'll remove the fourth index of this
21:51 - list which will be five
21:56 - and then next is what is the list what
21:58 - is in this
21:59 - nums if initially contained five
22:02 - three one after the following code is
22:05 - executed so the answer is b
22:08 - um just from just um i think like this
22:11 - one's pretty straightforward
22:12 - um all you have to do is really just
22:15 - walk through the code
22:16 - and if you're confused about like
22:19 - um what's in the list each time you can
22:22 - always just write it out
22:24 - so it'll add um six to the end
22:27 - it'll add four to the front of this list
22:30 - and then it'll just remove the first
22:32 - index
22:32 - which after adding four to the zero
22:35 - index
22:36 - would be five so the result would just
22:39 - be four three
22:40 - one six um finally we'll just have a
22:44 - workshop
22:45 - um if i remember correctly yeah so
22:49 - basically
22:50 - you're free to do this workshop but
22:53 - you're also
22:54 - free to um change one of the
22:57 - one of the um demo links and then also
22:59 - submit that
23:01 - so slide 13.
23:05 - so basically you can either
23:09 - um change like the array extras
23:12 - um sort of make your own
23:15 - array like your own
23:18 - version of this array extra examples
23:21 - demo
23:22 - um change this up a bit or you're free
23:24 - to do this workshop
23:27 - which is just um if i'm if i remember
23:30 - correctly it serves
23:31 - a similar where like you're given an
23:33 - array list of strings
23:35 - um and you're supposed to
23:38 - sort of iterate through it and print it
23:40 - all out
23:43 - one um basically you're given an
23:46 - arraylist
23:47 - for boba of like basically a list of
23:51 - boba
23:51 - and you're supposed to sort of put it
23:54 - pass in the correct data type
23:56 - um be able to be able to um iterate
23:59 - through it
24:00 - and also be able to like add and change
24:03 - stuff in the survey list
24:05 - um i would recommend you if you're sort
24:07 - of confused about this
24:08 - um go back to the examples that
24:12 - we've gone through um in slides 12 and
24:15 - 13
24:16 - and sort of use that as like
24:19 - as reference so
24:23 - all right and then i'm also going to
24:25 - post this
24:29 - submission form
24:34 - um but besides that there are also a
24:37 - couple of
24:39 - reference slides that you can look at um
24:42 - the first one is just an interactive
24:44 - review the second one's just the link
24:45 - about
24:46 - arrays versus arraylists and then if you
24:49 - want to get like
24:50 - more more into like programming speaking
24:53 - of realist
24:54 - you can do like nested arraylists which
24:57 - are um
24:58 - which are pretty fun
25:02 - and then finally um i would really
25:05 - appreciate it
25:06 - if you filled out the feedback form um
25:09 - this
25:09 - is really helpful for us to sort of
25:13 - sort of um get a feel for what you guys
25:15 - think
25:16 - is working um what you guys sort of want
25:19 - us to
25:19 - focus on or improve on um we've made a
25:22 - lot of changes to this course honestly
25:24 - through like
25:24 - the feedback from the past week so it
25:27 - would be very
25:28 - helpful if you get to know like what you
25:29 - guys think about this course

Cleaned transcript:

one all right so today we're going to be talking about um arraylist they're pretty similar to um to like arrays which we talked about last week but there are a few differences of like how they're stored and what kind of methods you can use on them so first off um we're just gonna go over the difference between a raise and array list so arrays are basically like so how do i put this arrays are kind of our and arraylists are basically stored differently in memory and the general um differences is that first off arrays are fixed size and they kind of store primitives and objects and you can basically look like see the size through this field called link um arraylist on our hand can basically you can basically add and remove stuff from arraylist so they can change in size um they store only objects and you can find out like how big they are through size yes so you have to import arraylists so remember how we have our scanner objects remember we've gotten really familiar with those we've used our scanner objects a lot and we use dart we've uh excuse me we've used our scanner objects to take in things like favorite ice cream flavors and secret numbers and all that stuff well scanners are imported objects and you have to do the same thing with arraylist so arraylist you need to be importing them and you can use that with the import java.util.arraylist at the top of your program so just as you would import a scanner you want to import your arraylist if you use them next slide please so initialization so this comes after we've imported so we've imported the arraylist at the java.util.arraylist beginning of our program done now we want to actually create our arraylist so how we're going to go about doing that we're going to use arraylist so we're going to use the keyword arraylist then we're going to put our data type in what i like to call triangle slash carrot brackets so we're going to put our data type in this case it's going to be a string so we're going to be having strings in the arraylist today um we're going to put the name of the arraylist so how we're going to refer to the arraylist in things like methods and in things like for loops so we're going to put the name in pet list that's what we're calling our arraylist notice how we have capitalization at key points um equals the keyword new arraylist so it's a new arraylist and the data type once again these two have to match so the data type originally has to match the data type over here and the initial size because arraylists are super duper flexible in varying size you can have um no initialization like size value because arraylist will grow as you need them to or um shrink as you need them to if you take values away so you don't actually have to have an initial size but if you have an initial size in your brain you can put that down in the initial size but both will work if you're trying to create an arraylist in your program so these are the four methods that we'll be going over for um arraylist the first one is add there's also get set and remove um hopefully add get and remove are pretty like pretty selfexplanatory um you just add something you can like access an element using git and you can remove something using remove and then set is just if you want to change like a element inside of the ray list so this will just set an index to like a new value so this is how you can use ads so you can basically do arraylist.ad and then you can pass in a new element or you can even add something to like a specific index so if you pass in the index first it'll add the element into like that part of the array list and push everything back and then next is good so get is kind of like indexing into an array so you can do like an arraylist.getindex and that will just return the element at that index um set index comma element so in this case as we remember we needed our specified index and we also need our element so pet list set um set one to pair it so in this case it would replace whatever was that index one with parrot um as always don't forget your semicolons and yeah so um if you remove something it'll make the arraylist shorter you also need to watch out for the index out of bounds exception because if you try removing an item that isn't there so if you try removing something at the fourth index but um your arraylist is too short for that you're gonna get the index out of bounds exception error um so just be wary of removing things from your arraylists and then finally you have like the size method and size will just return it's kind of like array.link it will just return the size of the arraylist um printing arraylist so if we ever wanted to just like print it out um in the console for any reason we can use a for loop or a for each loop a for each loop is also referred to as an enhanced for loop so if you know by that name um a for loop so four integer i equals zero i is less than pet list dot size i plus plus system dot out dot print line pet list dot get i so print out the element at every index of pet list starting at zero and finishing at size minus one notice we don't have pet list size minus one because we're using the less than indicator we're not using the less than or equals so if we were using i is less than or equals we would have to use pet list dot size minus one but since we're not we're just using the less than we can just have pet list.size yeah so important little piece of syntax there um before each loop um so for string pet pet list um system.out.printline pass pet excuse me and print out every element within pet list obviously this is a little bit neater than this but um in like real world applications i see this way more often than an enhanced for loop or like a for each loop kind of thing um there is a demo here for the for loop and the for each loop so um import.java util arraylist remember we have to import arraylist if we're going to use them very important so we have that at the very top right uh class main public static void main string whatever let's create a list of decimals so obviously right off the bat we know that we're doing a list of decimals so what are we going to have with our data type doubles right so arraylist double here's our data type here let me move this over so that's in one line um arraylistdouble datatype decimals so our arraylist is called decimals equals new arraylist double we don't have a set value here but we can fill that in later because arraylists are flexible and can grow and change now we're just going to add a bunch of values so we have five point five eighteen point four forty five point six yadda yadda yadda yadda all these numbers um what's important to note here is that when we're using add they add on to the end so notice how it goes 15.5 then 18.4 then 45.6 because we're just adding them on in the way that they came in and we add them on in the way that they were added to the array so it's a sequential order like that um let's print out the array for i z for i equals zero um i is less than decimals dot size i plus plus system.out.printlinedecimals.geti so in this case this is our regular for loop so we have i equals 0 and then if i our variable is less than decimals dot size we're going to add one to i so system.printline get i so in this case we just have our variable here and we're going to start at index 0 and then print all of them out so that would end like right here after the 10.2 we also have a for each loop so for each double x so in this case it's just like yeah so in this case um we can't use integers because our um arraylist isn't holding integers it's holding doubles so we match the data type so double x so just a regular it's like how we would instantiate an integer variable like into x but in this case it's double x because our value types are doubles and if we didn't set them to doubles we would have an index out of bounds exception no some kind of error there's a lot of different kinds of errors in java um and then double x um like for our decimal class um what's our semicolon mean i think it's just like relating it to the array itself so like our array name is decimals so double x um to the array name decimal so like double x for decimals system.out um line x so it just knows that like every single time we're just gonna add one to x so this is kind of just like simplifying all of this syntax into this double x um yeah so in this case we would have it printed out twice but if we wanted to comment these out we could do that and we'd only print out ones all right so now we can basically sort of look at all their bayless methods in this demo um i'm just gonna quickly share this in chat um as always like if you want you i would actually recommend you guys like go in and play around with the code um like change up the elements and um and change up the methods just so you guys like get a sense of how each of these methods work but as always like remember to work before you change code so basically in this demo we have an arraylist of strings called bands and um you can we've basically added like a couple of bands over here as strings and we've removed the second um index of this arraylist so the second index would be zero one two so we've removed this element from the bands of average and then we basically also set reset the fourth index to one direction and then now we're just gonna like take in a number from like from the user um scan it as an integer and then basically um sort of print out which band they should listen to so um this is just going to show you how like how you're going to get on the size of the band um get an element and also like add and remove stuff within your waivers um any questions about this sweet so when it runs it'll just tell you like um which band would you like to listen to enter a number from one to five um you can type in something like three and then it'll give you a bad name in return sweet and then here's just another demo about arraylist um it's sort of like the same idea we have this arraylist of um or we have like several different array lists of like strings integers um booleans characters and whatnot so notice like um if you remember from the really beginning of this lesson i've kind of said like a um can't take in objects or it can't take in primitives so notice how like in this these arraylists like i do have an arraylist of like integers but they're kind of spelled differently so um an in is kind of like the integer primitive is kind of like in x equals 10 or something like that but um over here we pass in an integer class so the reason we have this is because um arraylist can't um take in primitives so what we've done is we've java actually has these things called wrapper classes for um their primitives yep so basically um all the primitives are actually wrapped up in these classes and they're all just like their names but capitalized so that's how you can basically store a primitive innervate list any questions about this so that's kind of it for content and um i just have a list of a few questions that we can all go over um the first set are sort of like the easier questions where it's like you can just um or this is just like very basic questions and then we'll have um another set of questions that are a little bit more difficult yep so this first question is arraylist can change size so we've got two answers for true um anybody else have any idea sweet so it looks like most people are saying a and you're right so arraylist can change size so you can basically add and take away things without too much difficulty um on the other hand like arrays are more set in size so it's a little harder to like add and remove stuff sweet so the next one is the method used to find the size of an arraylist is linked so most people have said b and that's correct so the correct um answer would be um the correct answer for like a method used to find the select size of your waitlist is size next one is all of the following are ways to traverse an arraylist except this the correct answer is print all um just remember that d the enhanced for loop is also called the for each loop which of the following is the correct way to import their baylist class all right so the correct answer is the um all of these are so the first one import java.util um not exactly correct i guess you could import the entire util library but again this is not the way you do it um this is just a completely different class and um for c you don't have to have the java import and then finally be um it's not like python where you can just do like import blank um you'll have to actually specify the package that arraylist is in jessica i have a question um in some of the examples um i saw something that said import java.util.asterisk and it looked as if yeah it looked as if that was somehow replacing or or or instead of the array list and i it so is that what is that so basically the asterisk is like if you want to import everything from this library so arraylist is just one class from the java.util library this will import like all the classes in java.util so is that a good idea or not a good idea i mean does that take up like a lot of space or is it anything to be concerned about or you should is it better to just bring in the specific ones you want um i i don't think there's exactly like a correct answer but personally like personally i don't prefer to have this like import java.youtube.com because like it imports a lot of unnecessary classes um i i think it would just be better to import like the one class you need but like if you have yeah like if there's ever a case where you're making a complex program where like you need a bunch of different classes from youtube this might be good though okay yeah just like whatever you prefer all right so i think this is the next question hopefully all right so which of the following is the correct way to get the first value in the list called nums so it seems like most people have b and some people have a um i guess there's a little confusion of like is nums an array or a list um remember that over here we've called it a list so like a list is just a shorter way of calling it an arraylist um eventually you'll like learn that an arraylist is actually like a linked list but that's like its own can of worms but um over here nums isn't a ring list so we can't exactly um get the first value just by indexing it like a regular array um we'll have to use the get method so d is the correct answer so and now to the oh some more spicier questions i guess so over here we have a code segment an arraylist of strings and we added a bunch of stuff to it and we've set something something um in the list so what's the result of this code segment the thing that trips everyone else is the set over here so when you set something um unlike uh adding to a specific index you're actually changing that index so after this um list that's set to e you're not gonna have um you're basically gonna be removing a because you're changing that to e all right so which of the following is the correct way to sub i'm sorry i'm sorry could you go back did you did you did you change the answer to that is that so what is the answer to the one before it's speaking oh okay yeah because of setting you're replacing the the third element with the okay okay yeah so if it was a list one dot add two and then e then it would be d but we're setting it in b yeah so which of the following is the correct way to set the second element of a list called nums q5 oh shoot you're right the second element would be would be one yeah yeah so those are adding it setting the third element in the yeah list to five not the second so yeah it would be one instead of two yeah so yeah none of them are direct so b has the correct like the correct things you have to pass in you have to have like the index and the new element but has the wrong index yeah so you're right it should be the correct answer would be numstat set one comma five sweet so given the list nums four two three four five what's the result after executing nums that remove four so we have a lot of people saying d um just remember that nums is also an arraylist of integers so most people are saying yi and they're correct so this could be a little tricky that like you can it's easy to confuse like if you have an arraylist of integers is this like the element or the um or the index but java if you pass an integer will default to sorry can't give me it so when it when you're passing in an integer java will default to assuming that it's the index so it'll remove the fourth index of this list which will be five and then next is what is the list what is in this nums if initially contained five three one after the following code is executed so the answer is b um just from just um i think like this one's pretty straightforward um all you have to do is really just walk through the code and if you're confused about like um what's in the list each time you can always just write it out so it'll add um six to the end it'll add four to the front of this list and then it'll just remove the first index which after adding four to the zero index would be five so the result would just be four three one six um finally we'll just have a workshop um if i remember correctly yeah so basically you're free to do this workshop but you're also free to um change one of the one of the um demo links and then also submit that so slide 13. so basically you can either um change like the array extras um sort of make your own array like your own version of this array extra examples demo um change this up a bit or you're free to do this workshop which is just um if i'm if i remember correctly it serves a similar where like you're given an array list of strings um and you're supposed to sort of iterate through it and print it all out one um basically you're given an arraylist for boba of like basically a list of boba and you're supposed to sort of put it pass in the correct data type um be able to be able to um iterate through it and also be able to like add and change stuff in the survey list um i would recommend you if you're sort of confused about this um go back to the examples that we've gone through um in slides 12 and 13 and sort of use that as like as reference so all right and then i'm also going to post this submission form um but besides that there are also a couple of reference slides that you can look at um the first one is just an interactive review the second one's just the link about arrays versus arraylists and then if you want to get like more more into like programming speaking of realist you can do like nested arraylists which are um which are pretty fun and then finally um i would really appreciate it if you filled out the feedback form um this is really helpful for us to sort of sort of um get a feel for what you guys think is working um what you guys sort of want us to focus on or improve on um we've made a lot of changes to this course honestly through like the feedback from the past week so it would be very helpful if you get to know like what you guys think about this course
