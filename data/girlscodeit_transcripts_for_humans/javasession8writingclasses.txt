With timestamps:

00:00 - 321 all right so for
00:03 - again for this um week we're just going
00:05 - to be learning a basic introduction of
00:07 - classes in java just like
00:09 - what they are um basic concepts and like
00:11 - important keywords
00:12 - to to um do you know in java
00:18 - so um yeah for this lesson we'll just be
00:21 - going over like what is a class
00:23 - um what are um fields and methods in
00:25 - classes
00:26 - um things like static versus instance
00:29 - and then public versus private
00:32 - again like if you have any questions
00:34 - feel free to just ask in chat or
00:36 - ask an invoice if you're comfortable
00:37 - with being recorded
00:40 - so first off um classes in java are
00:43 - basically sort of like blueprints
00:45 - to um your instances so think of like
00:48 - instances as
00:48 - objects and classes as like blueprints
00:51 - out
00:52 - telling telling java basically what
00:54 - these objects can do
00:55 - and what information they can hold so
00:58 - um basically the reason you want to
01:00 - write your own classes in java is it
01:02 - really helps keep your code clean
01:04 - so like you don't have really redundant
01:06 - code that does like
01:07 - that that you have to sort of like copy
01:09 - and paste into the main method
01:11 - also classes help you store um sort of
01:14 - manipulate complex data
01:16 - so um also another reason you want to
01:18 - write your own class in java
01:20 - is java is is class based so literally
01:23 - everything in java is a class
01:25 - and java only handles things like
01:27 - objects
01:28 - so basically um you want to write your
01:31 - own classes to get understanding of how
01:33 - java works this is how you'll be coding
01:35 - in java basically
01:37 - um another thing is class names
01:40 - i wouldn't say they must be uppercase
01:42 - but they should be uppercase
01:44 - um generally you want your variable
01:46 - names to start with lowercase
01:48 - and you want your class names to be
01:49 - uppercase that way um you can
01:51 - distinguish between
01:52 - what's an object and what's a class
01:56 - so you can basically create custom
01:59 - classes
01:59 - and data fields or sorry custom methods
02:02 - and data fields for your classes
02:05 - and here we just have a demo of um of
02:08 - what class is
02:09 - like that can hold like data fields
02:12 - which are basically just um
02:14 - just like they're just information you
02:17 - can store so like
02:18 - a field could be like a number of wheels
02:20 - or something
02:21 - then you can like basically create
02:24 - um create sort of have these methods
02:27 - called constructors that can
02:30 - sort of say like they basically create
02:32 - the instance of the class
02:34 - so basically um they'll instantiate all
02:36 - your fields
02:37 - and you can also like have multiple
02:39 - constructors
02:40 - and then you basically can go down here
02:43 - just like um
02:44 - during our um lesson with how to use
02:47 - objects
02:48 - you can create an instance of your class
02:50 - by using the new keyword
02:54 - any questions about this sure yeah um so
02:58 - these words wheels
03:01 - numb wheels all these words in this
03:04 - example
03:05 - are they um are they uh data fields or
03:09 - instances or what do you call
03:12 - all of those things gotcha so not none
03:16 - of them are objects i mean numb wheels
03:18 - until you get down to the bottom one
03:21 - none of these are objects right they're
03:23 - all called
03:23 - something else like a data field or an
03:25 - instance
03:26 - so basically this entire thing
03:30 - um is a class called car so everything
03:33 - in this bracket over here from lines 3
03:36 - to 17
03:37 - this is like your class so your classes
03:40 - basically
03:41 - um serve the blueprint to an instance
03:45 - so this will contain all the information
03:48 - each instance of your car like in the
03:51 - main method
03:52 - for example car and another car um they
03:55 - will basically hold on
03:56 - all the information that's described in
03:59 - the class
04:00 - car so um another
04:03 - and for data fields um basically num
04:06 - wheels is a data field
04:07 - and that just means that the car can
04:10 - hold like
04:11 - code data called num wheels and this
04:13 - will just describe like the number of
04:15 - wheels
04:15 - a car has it can also hold things like
04:19 - these are constructors which we'll talk
04:20 - about later um
04:22 - these but like in general these will
04:24 - just um be what happens
04:27 - when you like create an instance of the
04:29 - car
04:30 - so what happens is basically we'll
04:32 - assign
04:33 - a value to num wheels
04:39 - any questions about this so the the word
04:42 - number
04:43 - is a data field and the and the
04:46 - um the the stuff that you're
04:48 - highlighting there right now
04:50 - is a is constructing an instance
04:53 - yeah um don't
04:57 - don't worry about it like too much right
04:59 - now because we'll go into it
05:01 - in further detail um yeah
05:04 - so but in general like this is just a
05:08 - um example of what class can look like
05:11 - and then how you can sort of create
05:13 - instances of your own class
05:19 - so next we'll be talking about
05:21 - attributes and methods
05:22 - so an attribute i also call it a data
05:25 - field
05:26 - um lots of people call it different
05:28 - things and lots of languages will have
05:29 - different
05:30 - um different terms for this but
05:33 - attributes or like fields or data fields
05:36 - they're basically the properties of an
05:37 - object
05:38 - so basically these are um these are kind
05:41 - of like numb wheels where
05:42 - in the example where it's like these are
05:45 - um
05:46 - values that the uh the class can hold
05:49 - so basically um you can
05:52 - call you can access the attribute of an
05:55 - object by doing object
05:56 - attribute um real-life examples would be
05:59 - like if you have a dog
06:01 - um what breed is it what age is it
06:03 - what's its name stuff like that
06:05 - um or even an example like if we have a
06:07 - car
06:08 - the number of wheels the number of doors
06:10 - and it's mileage
06:12 - um code examples would be like when we
06:14 - were talking about a race
06:16 - array.length is an attribute of their
06:19 - ray class
06:20 - and then if you have an object dog you
06:22 - do like dog.breed
06:24 - is an attribute of the dog class
06:28 - any questions about attributes
06:35 - sweet so the next pair of classes is its
06:38 - methods
06:39 - so methods are just um things that this
06:41 - class can do
06:43 - so for example when we had um
06:45 - arraylist.size
06:46 - that was a method and you can basically
06:49 - call a class method
06:50 - by doing object that method with the
06:53 - parentheses at the end
06:54 - um real life examples could be like a
06:56 - dog can run bark
06:58 - or um or do other stuff that dog can do
07:02 - um or something like for the car it
07:05 - could be like a car
07:06 - can um beat the horn or it can turn
07:09 - and stuff like that so um
07:12 - our code examples would be like if you
07:14 - had when we were talking about string
07:16 - objects
07:17 - um we can do like string object s
07:20 - dot two uppercase or if you had like a
07:23 - um dot class you could do like
07:25 - dog.bark with the parentheses at the end
07:28 - any questions about this
07:34 - sweet so well
07:37 - we can also go further into class
07:39 - methods
07:41 - um and we can talk about sort of how you
07:44 - can
07:44 - write a class method so i think most of
07:47 - you
07:48 - or all of what i'll basically do now is
07:50 - sort of like
07:51 - explain what this actually means so
07:55 - actually um what we could do is
08:03 - let me actually bring up a replit
08:07 - just an empty replit and we can sort of
08:09 - explain
08:11 - this main method
08:17 - so if you open up an empty method you
08:20 - notice
08:20 - that your um your
08:24 - main method is actually a class method
08:27 - so over here we actually have a class
08:29 - called main
08:31 - and we have this main method um that
08:34 - will run
08:35 - everything like that will run the the
08:37 - roughly
08:38 - or be what like the um replicas when we
08:41 - run it
08:42 - so we can basically sort of
08:46 - break the main method down by by um
08:49 - just word for word just so you
08:51 - understand what it means
08:53 - so basically for the main method the
08:56 - first two
08:56 - public static these are scope
08:58 - identifiers and
09:00 - don't worry about what they mean right
09:01 - now because we'll explain it to you
09:02 - later
09:03 - um but they basically sort of
09:07 - for now we'll just say they they
09:10 - talk about like what the visibility of
09:13 - this method is
09:14 - the next is the return type so the next
09:17 - thing you should have in your class
09:18 - method
09:19 - is your return type which will basically
09:20 - be like what value
09:22 - does this method return um for the main
09:25 - method right now
09:26 - it'll return nothing so that's the void
09:29 - keyword
09:30 - you'll just type in void if you don't
09:31 - want your class method to return
09:34 - anything
09:35 - next is the method name um you have your
09:37 - two parentheses
09:38 - and then finally we have your parameter
09:40 - types or your parameter list
09:43 - inside the parentheses so the main
09:45 - method will take in
09:47 - a string array called args
09:50 - and then inside the curly brackets
09:52 - you'll do what
09:53 - like that'll be whatever you want to run
09:56 - in the method
09:57 - any questions about question sure
10:00 - so instead of saying string can we say
10:03 - int
10:04 - or pool or double or something
10:07 - so for the for like specifically for the
10:10 - main method you can't
10:12 - because um once you get into like four
10:15 - complex programs
10:16 - the main method requires you to take in
10:18 - a string array of arguments
10:20 - but um if you make your own like class
10:23 - method
10:24 - so like if we have like a class called
10:27 - student or something
10:28 - um if you make your own class methods in
10:31 - there
10:31 - you can add in anything you want
10:34 - so like okay yeah so in your own methods
10:37 - you can have like it you can have your
10:39 - method taken bulls or ins or whatever
10:41 - but um specifically for this main method
10:44 - it has to be it has to like be all of
10:47 - this
10:49 - are slightly different syntactically oh
10:53 - gotcha um it it doesn't really make a
10:56 - difference
10:56 - so for an array you can instantiate an
10:59 - array by doing like
11:01 - int um x
11:05 - equals like whatever array or you can
11:07 - instantly add
11:08 - in x with the brackets afterwards so
11:11 - both of these are valid
11:13 - a sort of special method where um it
11:16 - doesn't really follow the
11:18 - the rules or guidelines that i talked
11:20 - about over here
11:21 - like it doesn't have any of these um
11:24 - these
11:25 - keywords in front of it so
11:28 - um first it must have the same name as
11:31 - the class
11:32 - so unlike other methods where you want
11:34 - to um
11:35 - you'll want to keep the method name
11:37 - lowercase
11:38 - this one has to like have the exact same
11:41 - name of the class
11:42 - so for example um we over here we have
11:46 - a class called student results um over
11:49 - here
11:49 - we'll have the constructor which is also
11:52 - literally just student results
11:54 - with the parentheses behind it and then
11:56 - the curly brackets and
11:57 - inside the curly brackets you'll
11:59 - basically instantiate
12:01 - all of your data fields that you have up
12:04 - here
12:04 - so full name exam name exam score and
12:07 - exam grade
12:08 - they'll be all given values inside of
12:11 - the constructor
12:14 - and also the constructor has no return
12:16 - type
12:18 - um the other two methods are just like
12:21 - general terms for methods that you might
12:23 - want to consider
12:24 - creating so the first one is getters
12:27 - so these literally just return the value
12:30 - of
12:30 - whatever field you want to access and
12:33 - the second one
12:34 - is setters which will help you change
12:36 - class fields
12:37 - these don't exactly have rules and they
12:39 - aren't exactly
12:40 - things that they aren't exactly special
12:43 - methods i would say
12:44 - but these are just general terms for the
12:46 - types of methods you can create
12:51 - and then again we have another demo
12:54 - and then
12:58 - as we load okay there we go
13:01 - um while we're loading this up does
13:03 - anyone have questions about
13:05 - getter setters or constructors
13:10 - maybe when you show the demo
13:15 - all right so i've posted the demo link
13:17 - in chat
13:18 - um so over here we have like
13:22 - or you have to have it so that it's like
13:25 - literally the class name with
13:27 - parentheses
13:28 - afterwards um for constructors they can
13:31 - actually take in parameters
13:33 - so over here for dog i've basically
13:36 - had the constructor taken like um an
13:39 - integer and two strings
13:41 - so that i can basically set the value of
13:44 - age name and sound
13:46 - so it's not all the time over like in
13:49 - the
13:50 - example in the powerpoint where you
13:52 - don't where you don't have any
13:53 - parameters
13:54 - for constructors you can actually have
13:56 - like different parameters for it
14:00 - um next is a setter so um
14:03 - this is basically just a general term
14:07 - for a method
14:07 - where you just change the value of a
14:11 - data field
14:12 - so for over here for setter set age
14:15 - um you take in like a parameter called
14:18 - new age
14:19 - and you basic you literally just set um
14:22 - the data field
14:23 - age to a new value um getter
14:26 - is you just get the value so this would
14:29 - just return like
14:30 - this dot name so um yeah
14:34 - this will just get you the value of the
14:36 - field that you want
14:38 - um same thing for get age this is just
14:40 - another getter
14:42 - and then this is just a regular class
14:44 - method
14:47 - so yeah and then you can just call like
14:50 - the getters and setters just like any
14:52 - other methods
14:53 - um dog again like when we have the
14:57 - technically like
14:59 - this is calling the dog constructor so
15:02 - having the new dog um with all the
15:05 - parameters passed in
15:06 - this will call the um the constructor
15:08 - over here and perform
15:10 - all the things inside the brackets
15:13 - well that's saved in the dog object does
15:16 - that make sense
15:16 - and if you want to change what's in the
15:19 - dog object you would use
15:20 - a setter method right and
15:24 - so if you were to have things like print
15:26 - twisting that out that print line in the
15:28 - bark method in the dog class
15:30 - um it literally does just that it prints
15:33 - it out
15:34 - but the you can't
15:37 - necessarily print out the sound of the
15:40 - dog
15:42 - from your main class if it isn't a
15:44 - public
15:46 - variable so you kind of have to use some
15:48 - of the getter method
15:49 - and it's good practice too so
15:53 - if that clears it up
15:56 - yeah okay
16:01 - hopefully this will make a little bit
16:02 - more sense like once we start
16:04 - talking like once we like get further
16:06 - into like static versus instance and
16:08 - like public versus private
16:11 - hopefully but yeah um class so
16:14 - um in our previous example we had like
16:18 - age name and sound those were all class
16:20 - fields um
16:22 - another example is like a car class
16:24 - could store like the number of wheels
16:25 - the top speed number of doors
16:27 - um and you can access an instances field
16:30 - through
16:30 - this keyword um christian said that
16:34 - christian made a good point that you
16:36 - can't you definitely like don't have to
16:38 - use it
16:38 - like this that name or this that age um
16:41 - you don't have to use this to refer to
16:44 - an instance field personally i would say
16:46 - you
16:47 - should just because it's it's a little
16:50 - easier to distinguish um
16:52 - what is like part of the instance and
16:54 - what isn't um sometimes what happens is
16:56 - like
16:57 - a lot of programmers or even even i do
17:00 - this honestly
17:01 - like we'll go like we'll do something
17:04 - like in an instance or like in a method
17:07 - and we'll just pass in like another
17:09 - variable
17:10 - like called age or that has the same um
17:13 - name
17:14 - as an instance variable and what happens
17:16 - is like you can
17:17 - get these confused a little bit
17:21 - especially without like syntax
17:22 - highlighting
17:29 - but yeah um next we're going to talk a
17:33 - little bit about static versus
17:34 - instance so static is
17:38 - i would say like think about java in or
17:41 - like classes in two
17:42 - kinds of ways so versus like variable
17:44 - specifically belong to
17:46 - the class level which is this field or
17:49 - method
17:50 - can be called um by the class or
17:53 - um the data is shared by the entire
17:57 - like all instances across the class
18:00 - um the other one is the instance level
18:02 - which is the object level
18:04 - so this is sort of the field or method
18:07 - belongs
18:08 - to the instance or like the object uh
18:10 - instance of an
18:11 - object or an object as that's an
18:14 - instance
18:15 - of the class so that exam
18:19 - this will be a little bit more clear um
18:22 - once we get into a demo
18:24 - and finally we have another level which
18:26 - is just local
18:27 - and it's basically this map this um
18:31 - variable belongs or can only be accessed
18:34 - in the current method so outside the
18:36 - method
18:37 - so outside the methods curly brackets
18:40 - you can't
18:40 - um basically that variable doesn't exist
18:44 - so um again static fields stay the same
18:47 - across
18:47 - all instances of the class
18:59 - all right so
19:03 - i'm gonna copy this over
19:11 - public static void mainstream args so
19:14 - basically
19:15 - the main method is a
19:18 - class method basically
19:22 - and then if you don't have the static
19:24 - keyword
19:25 - this the variable will or the method
19:28 - will automatically or
19:29 - sorry the method or field will
19:32 - automatically be
19:33 - an instance method or field
19:36 - so um over here total dog count
19:39 - is a static variable while dog count is
19:42 - just the instance variable
19:44 - and inside it says does static variable
19:47 - mean that it will always be zero
19:49 - or does it mean something else
19:53 - um not exactly so stat don't think of
19:56 - static
19:56 - in sort of the um the english definition
20:00 - the the sort of the programmer definite
20:03 - or
20:03 - the java definition is that it's
20:06 - elevated to like the class level
20:09 - so it won't always be zero but
20:12 - um it will always be the same um between
20:15 - all instances of uh dog
20:21 - so um basically inside the dog
20:23 - constructor we'll have like
20:25 - we'll increment total dog count and
20:27 - we'll also increment
20:29 - the the instance variable dog count so
20:32 - this dot dog count and notice that um
20:35 - that for total dog count i didn't use
20:38 - the this dot
20:39 - um but for the instance one i did
20:43 - so again like you can't use this dot
20:46 - you can't say this.total.count because
20:49 - that um that field is no longer part
20:52 - of the instance level it's
20:56 - it's basically um sort of elevate your
21:00 - class level
21:01 - so you can no longer access it um
21:04 - through like the instance
21:05 - using this so
21:10 - and then in the main method i'll
21:12 - basically create
21:13 - two new dog two new dog objects
21:16 - so fluffington and whiskers and i'll
21:19 - i'll try to print out both like their
21:21 - dog counts
21:22 - and their total dog counts and let's see
21:24 - what happens
21:28 - so for fluffington and and whiskers dot
21:31 - dot count these both printed ones
21:33 - so basically when i instantiate them
21:36 - um it just incremented the this dot dog
21:40 - count
21:41 - and because this dot dot count isn't
21:43 - shared between the
21:45 - between all instances of the class it'll
21:48 - only be one for each of them
21:50 - however total dot com is shared between
21:53 - all instances
21:54 - of the dog class so it'll be incremented
21:57 - to two
21:58 - um any questions about this
22:06 - sweet
22:10 - all right and the final thing we're
22:12 - going to talk about is
22:13 - public versus private so this just
22:16 - defines the visibility that i want you
22:19 - guys to keep in mind
22:20 - is public and private so public is
22:23 - the method where field can be seen and
22:25 - accessed by
22:26 - any other class and then private means
22:29 - it can only be seen and accessed
22:31 - within the class itself there's also
22:34 - like a middle ground where it's called
22:35 - protected where it's like
22:37 - it can be on scene and access by
22:39 - subclasses or other classes in the same
22:41 - package
22:42 - um don't worry about too much that's
22:45 - more that's more of a complex like
22:48 - form of visibility um before we get onto
22:52 - a demo
22:53 - i just want to talk about what's the
22:54 - default visibility
22:56 - because the default visibility if you
22:58 - don't add a public
22:59 - or on private keyword before the
23:02 - variable
23:03 - is a little bit mixed so basically for
23:06 - that
23:07 - we java calls it package private which
23:10 - means
23:10 - it can only be accessed by the class and
23:13 - um
23:13 - classes within the same package but not
23:16 - any like subclasses or like
23:18 - everything else um the best practice for
23:21 - visibility
23:22 - is you want to keep everything as
23:24 - private as possible
23:25 - so basically um you don't want things
23:28 - outside your class
23:30 - accidentally accessing methods or
23:33 - fields that you don't want them
23:35 - necessarily to be changing
23:37 - by accident um over here i just have a
23:41 - diagram that you can
23:42 - sort of look over this just um tells you
23:46 - sort of who can see um the
23:50 - the methods or fields in your class
23:53 - depending on what modifier you add
23:55 - before
23:56 - the variable or method
24:02 - so as um i'm loading this any questions
24:06 - about um visibility
24:17 - all right
24:20 - so i'm just gonna copy this or pass in
24:24 - their own name but the age will always
24:26 - be three
24:29 - so down here um we have
24:34 - we'll basically instantiate a new dog
24:37 - called
24:38 - dog with the name fido um we'll
24:41 - basically print out the
24:42 - um the dog's name by directly accessing
24:46 - it so using through dog.name
24:49 - and then we can also change the dog's
24:51 - name by
24:52 - directly accessing it um generally for
24:55 - um
24:56 - for public for public fields
24:59 - you can basically directly um
25:02 - directly access it and also direct like
25:05 - change it by directly
25:06 - directly calling like the
25:10 - the class field um and then we'll print
25:13 - it out again
25:15 - so basically we'll be able to change the
25:17 - dog's name by doing this
25:20 - um however like if i try to
25:23 - do the same with the dog's age we'll run
25:26 - into a little bit of an issue
25:28 - because java will realize that the age
25:30 - is private
25:31 - and we're not supposed to be able to
25:33 - change the age or even
25:34 - like see what the value is of it before
25:38 - um
25:38 - or outside of that class
25:42 - so if you've noticed in our let me
25:46 - actually open up the
25:49 - getter and setter
25:54 - um demo and you'll notice that
25:58 - in this demo we've actually set all the
26:02 - all the class fields to private and
26:04 - again the reason you
26:06 - you want to sort of lean towards getters
26:08 - and setters instead of making everything
26:10 - public as you don't like you don't want
26:12 - to
26:13 - actually be changing fields or like
26:17 - or um yeah you don't want to actually be
26:19 - changing the values
26:21 - of your classes or of your instances
26:24 - data
26:25 - um but like in a separate part of your
26:28 - code
26:29 - so this will setting everything to
26:32 - private and
26:34 - sort of hiding things behind setters and
26:36 - getters
26:37 - will make it so that you aren't sort of
26:39 - messing with the date
26:40 - you're on your data like
26:44 - or you aren't um changing your data
26:47 - without realizing it basically making a
26:50 - class on your own
26:52 - and you'll be sort of testing the class
26:55 - methods
26:56 - by calling it an or by instantiating it
26:59 - and calling it yourself
27:01 - in the um main method so
27:04 - you can submit either one of these and
27:08 - we'll we'll sort of um
27:11 - check it out i would recommend you like
27:14 - even if you're doing the harder one
27:16 - um you should also check out the easier
27:19 - one just to
27:20 - um just to make sure like
27:23 - you first off like you know how to
27:26 - call like a class and also
27:30 - you can also check out like the class
27:32 - itself and sort of
27:35 - use it as inspiration to make your own
27:37 - class
27:42 - so i'll copy both of these into chat
27:48 - and why do that um do you guys have any
27:51 - other questions
27:52 - about classes or like
27:55 - or anything else we've talked about um
28:10 - you

Cleaned transcript:

321 all right so for again for this um week we're just going to be learning a basic introduction of classes in java just like what they are um basic concepts and like important keywords to to um do you know in java so um yeah for this lesson we'll just be going over like what is a class um what are um fields and methods in classes um things like static versus instance and then public versus private again like if you have any questions feel free to just ask in chat or ask an invoice if you're comfortable with being recorded so first off um classes in java are basically sort of like blueprints to um your instances so think of like instances as objects and classes as like blueprints out telling telling java basically what these objects can do and what information they can hold so um basically the reason you want to write your own classes in java is it really helps keep your code clean so like you don't have really redundant code that does like that that you have to sort of like copy and paste into the main method also classes help you store um sort of manipulate complex data so um also another reason you want to write your own class in java is java is is class based so literally everything in java is a class and java only handles things like objects so basically um you want to write your own classes to get understanding of how java works this is how you'll be coding in java basically um another thing is class names i wouldn't say they must be uppercase but they should be uppercase um generally you want your variable names to start with lowercase and you want your class names to be uppercase that way um you can distinguish between what's an object and what's a class so you can basically create custom classes and data fields or sorry custom methods and data fields for your classes and here we just have a demo of um of what class is like that can hold like data fields which are basically just um just like they're just information you can store so like a field could be like a number of wheels or something then you can like basically create um create sort of have these methods called constructors that can sort of say like they basically create the instance of the class so basically um they'll instantiate all your fields and you can also like have multiple constructors and then you basically can go down here just like um during our um lesson with how to use objects you can create an instance of your class by using the new keyword any questions about this sure yeah um so these words wheels numb wheels all these words in this example are they um are they uh data fields or instances or what do you call all of those things gotcha so not none of them are objects i mean numb wheels until you get down to the bottom one none of these are objects right they're all called something else like a data field or an instance so basically this entire thing um is a class called car so everything in this bracket over here from lines 3 to 17 this is like your class so your classes basically um serve the blueprint to an instance so this will contain all the information each instance of your car like in the main method for example car and another car um they will basically hold on all the information that's described in the class car so um another and for data fields um basically num wheels is a data field and that just means that the car can hold like code data called num wheels and this will just describe like the number of wheels a car has it can also hold things like these are constructors which we'll talk about later um these but like in general these will just um be what happens when you like create an instance of the car so what happens is basically we'll assign a value to num wheels any questions about this so the the word number is a data field and the and the um the the stuff that you're highlighting there right now is a is constructing an instance yeah um don't don't worry about it like too much right now because we'll go into it in further detail um yeah so but in general like this is just a um example of what class can look like and then how you can sort of create instances of your own class so next we'll be talking about attributes and methods so an attribute i also call it a data field um lots of people call it different things and lots of languages will have different um different terms for this but attributes or like fields or data fields they're basically the properties of an object so basically these are um these are kind of like numb wheels where in the example where it's like these are um values that the uh the class can hold so basically um you can call you can access the attribute of an object by doing object attribute um reallife examples would be like if you have a dog um what breed is it what age is it what's its name stuff like that um or even an example like if we have a car the number of wheels the number of doors and it's mileage um code examples would be like when we were talking about a race array.length is an attribute of their ray class and then if you have an object dog you do like dog.breed is an attribute of the dog class any questions about attributes sweet so the next pair of classes is its methods so methods are just um things that this class can do so for example when we had um arraylist.size that was a method and you can basically call a class method by doing object that method with the parentheses at the end um real life examples could be like a dog can run bark or um or do other stuff that dog can do um or something like for the car it could be like a car can um beat the horn or it can turn and stuff like that so um our code examples would be like if you had when we were talking about string objects um we can do like string object s dot two uppercase or if you had like a um dot class you could do like dog.bark with the parentheses at the end any questions about this sweet so well we can also go further into class methods um and we can talk about sort of how you can write a class method so i think most of you or all of what i'll basically do now is sort of like explain what this actually means so actually um what we could do is let me actually bring up a replit just an empty replit and we can sort of explain this main method so if you open up an empty method you notice that your um your main method is actually a class method so over here we actually have a class called main and we have this main method um that will run everything like that will run the the roughly or be what like the um replicas when we run it so we can basically sort of break the main method down by by um just word for word just so you understand what it means so basically for the main method the first two public static these are scope identifiers and don't worry about what they mean right now because we'll explain it to you later um but they basically sort of for now we'll just say they they talk about like what the visibility of this method is the next is the return type so the next thing you should have in your class method is your return type which will basically be like what value does this method return um for the main method right now it'll return nothing so that's the void keyword you'll just type in void if you don't want your class method to return anything next is the method name um you have your two parentheses and then finally we have your parameter types or your parameter list inside the parentheses so the main method will take in a string array called args and then inside the curly brackets you'll do what like that'll be whatever you want to run in the method any questions about question sure so instead of saying string can we say int or pool or double or something so for the for like specifically for the main method you can't because um once you get into like four complex programs the main method requires you to take in a string array of arguments but um if you make your own like class method so like if we have like a class called student or something um if you make your own class methods in there you can add in anything you want so like okay yeah so in your own methods you can have like it you can have your method taken bulls or ins or whatever but um specifically for this main method it has to be it has to like be all of this are slightly different syntactically oh gotcha um it it doesn't really make a difference so for an array you can instantiate an array by doing like int um x equals like whatever array or you can instantly add in x with the brackets afterwards so both of these are valid a sort of special method where um it doesn't really follow the the rules or guidelines that i talked about over here like it doesn't have any of these um these keywords in front of it so um first it must have the same name as the class so unlike other methods where you want to um you'll want to keep the method name lowercase this one has to like have the exact same name of the class so for example um we over here we have a class called student results um over here we'll have the constructor which is also literally just student results with the parentheses behind it and then the curly brackets and inside the curly brackets you'll basically instantiate all of your data fields that you have up here so full name exam name exam score and exam grade they'll be all given values inside of the constructor and also the constructor has no return type um the other two methods are just like general terms for methods that you might want to consider creating so the first one is getters so these literally just return the value of whatever field you want to access and the second one is setters which will help you change class fields these don't exactly have rules and they aren't exactly things that they aren't exactly special methods i would say but these are just general terms for the types of methods you can create and then again we have another demo and then as we load okay there we go um while we're loading this up does anyone have questions about getter setters or constructors maybe when you show the demo all right so i've posted the demo link in chat um so over here we have like or you have to have it so that it's like literally the class name with parentheses afterwards um for constructors they can actually take in parameters so over here for dog i've basically had the constructor taken like um an integer and two strings so that i can basically set the value of age name and sound so it's not all the time over like in the example in the powerpoint where you don't where you don't have any parameters for constructors you can actually have like different parameters for it um next is a setter so um this is basically just a general term for a method where you just change the value of a data field so for over here for setter set age um you take in like a parameter called new age and you basic you literally just set um the data field age to a new value um getter is you just get the value so this would just return like this dot name so um yeah this will just get you the value of the field that you want um same thing for get age this is just another getter and then this is just a regular class method so yeah and then you can just call like the getters and setters just like any other methods um dog again like when we have the technically like this is calling the dog constructor so having the new dog um with all the parameters passed in this will call the um the constructor over here and perform all the things inside the brackets well that's saved in the dog object does that make sense and if you want to change what's in the dog object you would use a setter method right and so if you were to have things like print twisting that out that print line in the bark method in the dog class um it literally does just that it prints it out but the you can't necessarily print out the sound of the dog from your main class if it isn't a public variable so you kind of have to use some of the getter method and it's good practice too so if that clears it up yeah okay hopefully this will make a little bit more sense like once we start talking like once we like get further into like static versus instance and like public versus private hopefully but yeah um class so um in our previous example we had like age name and sound those were all class fields um another example is like a car class could store like the number of wheels the top speed number of doors um and you can access an instances field through this keyword um christian said that christian made a good point that you can't you definitely like don't have to use it like this that name or this that age um you don't have to use this to refer to an instance field personally i would say you should just because it's it's a little easier to distinguish um what is like part of the instance and what isn't um sometimes what happens is like a lot of programmers or even even i do this honestly like we'll go like we'll do something like in an instance or like in a method and we'll just pass in like another variable like called age or that has the same um name as an instance variable and what happens is like you can get these confused a little bit especially without like syntax highlighting but yeah um next we're going to talk a little bit about static versus instance so static is i would say like think about java in or like classes in two kinds of ways so versus like variable specifically belong to the class level which is this field or method can be called um by the class or um the data is shared by the entire like all instances across the class um the other one is the instance level which is the object level so this is sort of the field or method belongs to the instance or like the object uh instance of an object or an object as that's an instance of the class so that exam this will be a little bit more clear um once we get into a demo and finally we have another level which is just local and it's basically this map this um variable belongs or can only be accessed in the current method so outside the method so outside the methods curly brackets you can't um basically that variable doesn't exist so um again static fields stay the same across all instances of the class all right so i'm gonna copy this over public static void mainstream args so basically the main method is a class method basically and then if you don't have the static keyword this the variable will or the method will automatically or sorry the method or field will automatically be an instance method or field so um over here total dog count is a static variable while dog count is just the instance variable and inside it says does static variable mean that it will always be zero or does it mean something else um not exactly so stat don't think of static in sort of the um the english definition the the sort of the programmer definite or the java definition is that it's elevated to like the class level so it won't always be zero but um it will always be the same um between all instances of uh dog so um basically inside the dog constructor we'll have like we'll increment total dog count and we'll also increment the the instance variable dog count so this dot dog count and notice that um that for total dog count i didn't use the this dot um but for the instance one i did so again like you can't use this dot you can't say this.total.count because that um that field is no longer part of the instance level it's it's basically um sort of elevate your class level so you can no longer access it um through like the instance using this so and then in the main method i'll basically create two new dog two new dog objects so fluffington and whiskers and i'll i'll try to print out both like their dog counts and their total dog counts and let's see what happens so for fluffington and and whiskers dot dot count these both printed ones so basically when i instantiate them um it just incremented the this dot dog count and because this dot dot count isn't shared between the between all instances of the class it'll only be one for each of them however total dot com is shared between all instances of the dog class so it'll be incremented to two um any questions about this sweet all right and the final thing we're going to talk about is public versus private so this just defines the visibility that i want you guys to keep in mind is public and private so public is the method where field can be seen and accessed by any other class and then private means it can only be seen and accessed within the class itself there's also like a middle ground where it's called protected where it's like it can be on scene and access by subclasses or other classes in the same package um don't worry about too much that's more that's more of a complex like form of visibility um before we get onto a demo i just want to talk about what's the default visibility because the default visibility if you don't add a public or on private keyword before the variable is a little bit mixed so basically for that we java calls it package private which means it can only be accessed by the class and um classes within the same package but not any like subclasses or like everything else um the best practice for visibility is you want to keep everything as private as possible so basically um you don't want things outside your class accidentally accessing methods or fields that you don't want them necessarily to be changing by accident um over here i just have a diagram that you can sort of look over this just um tells you sort of who can see um the the methods or fields in your class depending on what modifier you add before the variable or method so as um i'm loading this any questions about um visibility all right so i'm just gonna copy this or pass in their own name but the age will always be three so down here um we have we'll basically instantiate a new dog called dog with the name fido um we'll basically print out the um the dog's name by directly accessing it so using through dog.name and then we can also change the dog's name by directly accessing it um generally for um for public for public fields you can basically directly um directly access it and also direct like change it by directly directly calling like the the class field um and then we'll print it out again so basically we'll be able to change the dog's name by doing this um however like if i try to do the same with the dog's age we'll run into a little bit of an issue because java will realize that the age is private and we're not supposed to be able to change the age or even like see what the value is of it before um or outside of that class so if you've noticed in our let me actually open up the getter and setter um demo and you'll notice that in this demo we've actually set all the all the class fields to private and again the reason you you want to sort of lean towards getters and setters instead of making everything public as you don't like you don't want to actually be changing fields or like or um yeah you don't want to actually be changing the values of your classes or of your instances data um but like in a separate part of your code so this will setting everything to private and sort of hiding things behind setters and getters will make it so that you aren't sort of messing with the date you're on your data like or you aren't um changing your data without realizing it basically making a class on your own and you'll be sort of testing the class methods by calling it an or by instantiating it and calling it yourself in the um main method so you can submit either one of these and we'll we'll sort of um check it out i would recommend you like even if you're doing the harder one um you should also check out the easier one just to um just to make sure like you first off like you know how to call like a class and also you can also check out like the class itself and sort of use it as inspiration to make your own class so i'll copy both of these into chat and why do that um do you guys have any other questions about classes or like or anything else we've talked about um you
