With timestamps:

00:00 - javascript part four iteration lesson
00:03 - nine let's do it let's get pumped to
00:05 - loops
00:05 - imagine you have to write so loops are
00:07 - really helpful when we're trying to
00:08 - write code over and over and over and
00:10 - over again
00:11 - because they just do it for us instead
00:13 - of us having to write out the same thing
00:14 - over and over again
00:15 - loops allow you to run the same code
00:16 - over and over each time
00:18 - there will be a different value
00:21 - sometimes true sometimes not depending
00:22 - on what you're trying to do here
00:24 - the loop will continue until a specific
00:26 - condition is met so remember our
00:27 - if else statements if thing happens
00:30 - continue loop else
00:32 - stop loop um oh now we have animations
00:35 - this week fun
00:36 - so he's hungry um
00:39 - luke is like eating food so
00:42 - if he's full then we get back to here
00:45 - but eating and then yes
00:46 - you know external output um a for loop
00:49 - so a for loop
00:50 - goes through a block of code for a
00:51 - number of times
00:53 - so for a specific condition that's
00:56 - under the condition that the loop will
00:58 - be run so an example of this is like
01:00 - four
01:01 - mathematical variables this is where
01:03 - you're gonna see it a lot so
01:04 - for the variable i equals zero so the
01:07 - integer variable i
01:08 - equals zero for this variable it equals
01:11 - zero
01:12 - as long as the variable is less than
01:14 - five we're going to add one to i
01:17 - yeah so the variable starts at zero runs
01:20 - code once
01:21 - then we add one to i yeah so as long as
01:24 - i is less than five we're going to
01:25 - continue
01:26 - writing that code as soon as i reaches
01:27 - the value
01:29 - 5 it will stop running this code because
01:31 - it will be greater than 5.
01:34 - initial so that's basically how these
01:37 - things work
01:38 - for a certain condition the code runs
01:41 - itself for that given amount of time
01:43 - um for loop practice so
01:46 - these are just like some examples so
01:49 - this one's like basically what we just
01:50 - saw
01:51 - for i equals zero as long as i is less
01:53 - than 8 we're going to add
01:55 - 1 to i console.log will print i so we'll
01:57 - just print out the values
01:58 - 0 1 2 3 all the way to 8.
02:02 - all right so all the way to 7 because
02:03 - it's less than 8. 4 counter equals 3
02:06 - counter is greater than equal to zero
02:08 - counter minus minus
02:10 - so for this one we have a variable just
02:12 - like i but we're going to call it
02:13 - counter
02:14 - so the same thing i encounter same
02:16 - integer variable just we call it
02:18 - different names
02:19 - and in this case counters equal to three
02:22 - so as long as counter is greater than or
02:24 - equal to zero
02:25 - we're going to take one away from
02:26 - counter so and then console.log counter
02:29 - so
02:29 - the console would print three two one
02:32 - and then zero because we have
02:34 - equal to zero yeah um and then last one
02:40 - um for cars bmw volvo saab ford
02:44 - um for i equals zero and cars
02:47 - dot length um is less uh for i equals
02:49 - zero and as long as i
02:51 - is less than cars.length i plus plus so
02:54 - it would print out bmw volvo saab ford
02:57 - because it would print out those until
02:59 - it got to the length so it would just
03:01 - print out everything in the given array
03:04 - a while loop so our two big loops are
03:06 - going to be four loops and while loops
03:08 - while loops loop through the code as
03:10 - long as a condition is true
03:11 - so remember our booleans true and false
03:14 - yes no one zero so while loops are only
03:17 - useful for booleans because it's
03:19 - only when a condition is true so i like
03:22 - to think of it that way
03:25 - if it makes sense to you adopt that
03:26 - thinking um variable i
03:29 - equals zero so while i is less than 10
03:32 - console.log the number is i i plus plus
03:37 - yeah so let's go through this because
03:38 - this is um i know we've had a couple
03:40 - questions in the past weeks for like
03:42 - points counters um this is how you would
03:45 - do that
03:46 - variable i is equal to 0. yes
03:50 - while i is less than 10 then the
03:53 - console.log
03:54 - is printing out the number i so you know
03:57 - prints out this
03:58 - i plus plus see this like i plus plus
04:00 - thing here
04:01 - this is like how you would do a counter
04:03 - so like this kind of structure is how
04:05 - like counters would work for like point
04:07 - systems
04:08 - um i know we had a couple questions
04:09 - about that last week so
04:11 - this is like the kind of structure that
04:12 - you would try and adopt for that
04:15 - but this is a good example of a while
04:16 - loop no that will be added one time each
04:18 - is run through
04:20 - so a do slash while loop um a juice last
04:23 - while loop is a type of while loop
04:25 - so like under that while loop umbrella
04:27 - the difference with the while loop the
04:28 - code will run through
04:30 - once before checking the condition even
04:32 - if the condition is not met
04:34 - so even if the condition is not met the
04:37 - code will still run through once i'm
04:39 - gonna
04:39 - get my pointer here so in this case i
04:42 - equals 10
04:43 - do console log the number is i
04:46 - i plus plus while i is minus 10.
04:49 - so since this is in here it will run one
04:52 - extra time before checking the condition
04:55 - you know what i'm saying
04:56 - because while is outside of the the do
05:00 - um it will do it one extra time like
05:03 - i i don't want to say like out of error
05:05 - but like
05:06 - kind of quote unquote out of error
05:08 - because your whole thing is like wow
05:09 - it's less than
05:10 - 10 but it does it while it is equal to
05:12 - 10
05:13 - because it like
05:16 - the while loop saying that it has to be
05:18 - less than 10 is outside of the
05:20 - conditions
05:21 - for the do statement yeah
05:24 - so another example here
05:28 - i equals eight and then do console.log
05:31 - the number is
05:32 - i i plus plus so we add one to i
05:36 - after we print out the number this is
05:38 - while it's less than 10
05:40 - so since this while statement is outside
05:43 - it will
05:43 - do it an extra time on accident because
05:46 - it
05:46 - doesn't check infinite loop so an
05:49 - infinite loop is when the loop will run
05:51 - forever regardless of circumstance
05:53 - regardless of case
05:54 - you might crash your computer a browser
05:56 - so that is true
05:58 - if you do one that's like adding up
06:00 - numbers um i know for a fact that like
06:02 - just because of the way that like the
06:03 - compiler works there's only a certain
06:05 - amount of data that
06:06 - like number like there's a certain
06:08 - number i forget what it is
06:10 - but there's a certain number that you
06:11 - cannot go past
06:13 - when coding because the compiler
06:15 - specifically in reply cannot hold all of
06:17 - that information
06:18 - so it's a smaller number than you might
06:21 - think
06:22 - but if you do like a plus plus thing it
06:25 - will just like keep adding the numbers
06:26 - and it will like crash because it
06:28 - can't like add more numbers to the
06:29 - number so that's an example of this
06:33 - it might happen when a condition is in
06:34 - the while statement is always true
06:37 - you can stop the loop by adding a break
06:39 - statement
06:40 - so break and
06:44 - um yeah so breaking is
06:47 - like when we say okay we're gonna stop
06:49 - the forever loop so that we don't crash
06:51 - our computers that's what that means
06:53 - um let's see this so let's go through
06:56 - this example
06:57 - a sleep equals true let hours
07:00 - zero so consistent a sleep is true yes
07:04 - so the the variable of sleep is true and
07:06 - let
07:07 - so the bullying asleep is true and let
07:10 - hours feel like hours of sleep is zero
07:12 - while asleep so while asleep is true
07:17 - it has been blank hours since
07:20 - i slept and hours plus plus the code
07:23 - will run forever because there's no
07:25 - break statement to stop the code so it
07:27 - will just keep
07:28 - adding more hours since you like last
07:30 - slept
07:31 - because there's no break statement so
07:32 - there's nothing telling it to stop
07:35 - right and since there's nothing telling
07:36 - it to stop it has no reason to stop and
07:38 - therefore it will keep going
07:40 - because asleep is always true and it
07:42 - will just keep adding hours forever
07:45 - so in this case
07:49 - if hours equals 10 so we're adding on a
07:53 - statement if hours equals 10
07:55 - it's time to wake up yes
07:58 - so we have a condition here if
08:01 - the hours equals to 10 then we print
08:04 - it's time to wake up and then we add
08:06 - break
08:06 - because we don't want the loop to run
08:08 - anymore we don't want to say oh it's
08:09 - been 11 hours
08:10 - of sleeping when we woke up after 10
08:12 - hours right so that's why we say break
08:14 - break makes the infinite loop stop it's
08:17 - very important to include break if you
08:19 - don't include break
08:20 - your code might not function properly so
08:22 - it's very important to remember break
08:24 - okay um is there questions i'm
08:27 - perhaps missing yeah timers could be
08:30 - coded like this
08:32 - um const i don't even know what const is
08:36 - that's a good question i don't know i
08:38 - thought it would be like constant like
08:39 - the constant asleep but i've never seen
08:41 - it
08:42 - before as a variable so i will
08:45 - get back to you on that that's a me
08:47 - error um
08:52 - okay why is this not
08:54 - okay nesting so nesting loops so
08:58 - remember how we had our nesting if-else
08:59 - statement so like
09:00 - if this happens if else if else if else
09:04 - else so that's nesting that's nesting of
09:07 - if
09:07 - else statements it's like having one
09:09 - within the other within the other
09:10 - so nesting for loop statements is just
09:12 - having one for loop within the other
09:15 - yeah so hopefully that makes a little
09:17 - bit sense
09:18 - the first loop and the second loop see
09:20 - how they're indented
09:21 - that's how you know things are nested
09:23 - within each other so the indents
09:24 - are what tell us something that is like
09:26 - within each other um
09:28 - in order for it to be within each other
09:29 - it has to be like on an indent
09:32 - from the line above it so if we had
09:33 - another for loop that was like nested
09:35 - within this one
09:36 - it would start right about here because
09:38 - of the indents
09:39 - yes so anything that's nested is always
09:41 - like indented
09:43 - within itself um
09:46 - so in this case four counter equals one
09:50 - and counter is less than four counter
09:51 - plus plus so counter equals one
09:53 - as long as the counter is less than four
09:55 - we're going to add one to the counter
09:57 - console.log count from one to three so
10:00 - count from one to three one two three
10:01 - one two three one two three
10:03 - that's the output second loop
10:06 - four counter two so different counter
10:08 - for counter two
10:09 - equals one and as long as counter two is
10:12 - less than four
10:13 - counter two plus plus
10:16 - yeah so console.log counter two
10:19 - so this white count from one to three
10:24 - that's counter one
10:27 - so that's just regular counter this is
10:29 - counter one because it says
10:31 - count from one to three so it says okay
10:33 - counter equals one so we're going to
10:34 - print out
10:35 - count from one to three here we're
10:38 - printing out
10:40 - one two three from counter two so
10:42 - counter one
10:43 - counter two counter one counter two and
10:46 - they go
10:47 - in succession like this because they're
10:48 - nested within each other
10:50 - yes and this loop will keep going for as
10:53 - long as this loop is able to keep going
10:55 - right hopefully that makes sense
10:59 - the outermost loop is determining what
11:02 - if
11:02 - the loops continue right so this loop
11:05 - doesn't determine whether this one runs
11:08 - the outermost loop determines whether
11:10 - the inner ones
11:11 - run yeah would you mean if the outer
11:15 - loop doesn't run the nestle
11:16 - wouldn't that's exactly what i mean so
11:19 - like if
11:19 - this one like doesn't run so like
11:24 - okay it's like
11:28 - what's a good example of this
11:34 - visual example
11:37 - i don't know if we can see this this is
11:38 - a newton's cradle if we can see this
11:41 - basically how this works is if this ball
11:44 - hits all of the ones in between it then
11:46 - the outer one
11:47 - also goes right but it only works if the
11:50 - outer ball
11:51 - like does its part it doesn't work if
11:54 - the inner balls
11:56 - only do their part right so the outer
11:58 - one
11:59 - like continues the whole point of it
12:02 - that was not a good awesome
12:05 - but basically like the outermost loop
12:08 - dictates whether the inner ones run
12:13 - it like the outermost loop is the one
12:15 - that decides
12:18 - whether the other ones will run because
12:19 - it's the like it's the
12:21 - primary condition nestling loops within
12:25 - each other
12:25 - you make the outermost one the primary
12:27 - condition
12:29 - and therefore the primary condition has
12:31 - to be met for the code under it to run
12:34 - therefore making the outermost loop the
12:35 - primary condition
12:37 - hope that helped um
12:40 - recursion so a recursive function is
12:43 - when a function
12:44 - calls itself so we remember calling a
12:46 - function we tell this a little bit last
12:48 - week
12:49 - a recursive function must have a
12:50 - condition to stop calling itself
12:54 - so it's like you calling up yourself on
12:56 - the phone to do something
12:58 - you know what i'm saying like it needs
13:00 - to stop at some point but it makes more
13:02 - sense in a computer world
13:03 - um you can use an if-else statement to
13:05 - do this so let's go through this
13:07 - function countdown variable number
13:12 - yeah we have an integer variable number
13:15 - and the function is called
13:16 - countdown console.log is gonna print
13:20 - out the variable number so the function
13:22 - itself is printing out
13:24 - the new number new number
13:27 - equals number minus one so
13:31 - new number is number minus one so
13:33 - whatever number was we're gonna take one
13:35 - away from it and we're gonna call it new
13:37 - number
13:38 - if new number is greater than zero
13:42 - countdown is gonna start again but with
13:45 - new number instead of number
13:47 - so what this means is we're going to
13:48 - have a number
13:50 - and countdown is going to say okay we're
13:52 - going to print that number out
13:53 - then we're going to take one away from
13:54 - that number replace it
13:57 - and then we're going to print out the
13:58 - new number that's one less than the
13:59 - original number
14:01 - so it's just a countdown so it's like
14:03 - six to five that's basically what this
14:05 - code does it goes six to five
14:07 - but it's a recursive function because of
14:09 - this
14:10 - countdown equals four so we
14:13 - call the original function when
14:17 - in like the function itself yeah
14:21 - so basically
14:25 - countdown four prints and calls
14:27 - countdown three and then count countdown
14:29 - three prints calls countdown two
14:31 - so it's calling itself within the
14:32 - function to keep the loop
14:34 - going a recursive function is a really
14:36 - good way to have like a loop but like in
14:38 - a sneaky way
14:39 - um so it just keeps going and going and
14:42 - redoing itself over
14:44 - and over and over again until it reaches
14:47 - zero
14:48 - because that's our base condition here
14:50 - so it reaches zero
14:51 - and then it says oh well we reach zero
14:53 - we don't have to do this anymore and
14:55 - then it stops
14:57 - yeah so this condition is basically the
14:59 - same as our break
15:00 - and a recursive function is basically
15:01 - the same thing as like an infinite loop
15:03 - let's get into the next one so number
15:07 - properties
15:08 - so remember um how i said like oh
15:12 - make sure when you're using numbers if
15:14 - you want to do
15:15 - math with them or you want to do like
15:18 - the
15:18 - already implemented functions with them
15:20 - make sure you call them an integer
15:22 - because you don't want to say oh it's
15:24 - not an integer
15:25 - like it's a string because then none of
15:27 - these things work
15:28 - so javascript and java but javascript
15:31 - has all these like
15:32 - already implemented functions that help
15:35 - you
15:36 - do mathematical things but they only do
15:38 - them with integers
15:41 - because it knows how to compute an
15:43 - integer like it knows what a number is
15:44 - but it can't do that with like words so
15:48 - min value max value returns the largest
15:50 - number possible in javascript returns
15:52 - the smallest number possible in
15:53 - javascript
15:54 - these are like what i was talking about
15:55 - when i said oh javascript has like a
15:57 - limit for
15:58 - how big the numbers can be this is what
16:00 - i'm talking about positive infinity
16:02 - negative infinity
16:03 - represents infinity returned on overflow
16:06 - so like it can't actually represent
16:08 - infinity so it has like overflow the
16:10 - excess
16:11 - um same thing here nine
16:14 - represents a not a number value
16:18 - that's kind of hard to explain um
16:21 - nan is like interesting
16:24 - i don't know not another values are like
16:27 - hard to explain
16:28 - um you don't really use them all that
16:31 - much
16:32 - um yeah that's all i'm really going to
16:36 - say about that
16:37 - um so let's go into the example here so
16:40 - variable k
16:41 - number dot min value console log k
16:44 - so basically what it's going to do is
16:46 - it's going to take k and then it's going
16:47 - to say
16:48 - oh well we're going to make k the
16:49 - smallest value we could possibly have in
16:51 - javascript
16:52 - and then we're going to print that out
16:53 - in the console yeah
16:57 - this one doesn't work because variable x
17:00 - equals 6 and then variable y is x dot
17:03 - max value
17:04 - y is undefined here it doesn't work y is
17:06 - undefined
17:07 - um because this is not the max value
17:11 - you know what i'm saying like it doesn't
17:12 - make sense this code doesn't make sense
17:14 - and therefore y is not defined and
17:16 - therefore
17:17 - it doesn't work yeah so there's a lot of
17:20 - these like inherent
17:21 - math properties that um you can use
17:25 - when doing stuff which is why it's
17:27 - important to like define your variables
17:29 - as integers if you want to use
17:30 - a lot of these number properties
17:34 - why is that okay there we go number
17:36 - methods so number methods can be used on
17:38 - any type of numbers
17:40 - call the method by variable.method so
17:43 - example2string method returns the number
17:46 - as
17:46 - a string um so this is like to convert
17:49 - integers into strings so changing your
17:52 - data type that's how you do it
17:54 - two fix method returns a string with a
17:56 - number written
17:58 - with a specified number of decimals
18:01 - yeah so it's like it's kind of like
18:02 - rounding but like it doesn't round it
18:04 - just kind of like cuts your number off
18:06 - um so methods are really good for little
18:09 - things like that
18:10 - um variable age equals 35
18:14 - age.2 string it takes this number and
18:17 - puts it into string form
18:18 - so return 35 like it returns 35 it looks
18:22 - the same
18:23 - but you've just changed the data type
18:25 - from an integer to a string
18:26 - and then variable x is 9.656
18:31 - x to fix zero rounds it to a whole
18:33 - number so we just get
18:34 - nine x to fix two we would get
18:37 - nine point six five
18:45 - okay hopefully so this one it's gonna be
18:49 - a fun workshop today i'm actually really
18:50 - excited about it
18:51 - um does anyone know what a cipher is
18:54 - just like
18:54 - out of curiosity while i queue up the
18:57 - the replit
19:00 - okay a cipher is like a fancy word
19:03 - for like code like a code like a like a
19:06 - code maker
19:09 - so um you know like you can have all
19:12 - those
19:13 - like things that like scramble letters
19:15 - and you like make a code with it
19:17 - that's what a cipher is so this one's a
19:20 - fun one
19:20 - i really like it um this is the reply
19:23 - this is the reply
19:24 - get excited it's a fun one i really like
19:26 - it so
19:27 - we're gonna run it um this one has a
19:29 - silly background
19:31 - that our lovely education director
19:33 - rachel did
19:34 - i like this one i think it's fun i think
19:36 - it fits with the cipher theme um
19:38 - we had a little bit of a disagreement on
19:39 - backgrounds before but i like this one
19:41 - okay so what this cipher does is
19:44 - basically you can input any text
19:45 - so this is the plain text so say like i
19:48 - wanted to do
19:49 - like my name is willa
19:52 - and say i wanted to shift it to so like
19:55 - encrypt it too and then i would press
19:57 - encrypt
19:58 - and this is my encrypted text so you
20:01 - know
20:01 - and then if i say decrypt it gives me my
20:04 - original text back
20:05 - notice it's in all capitals because the
20:07 - alphabet itself is in all capitals
20:10 - so um we can go through the code
20:12 - together
20:14 - but the alphabet itself is an all
20:15 - capital so anything you write
20:17 - once you like put in the cipher machine
20:19 - it's going to come back as all capitals
20:20 - because
20:21 - our alphabet is the capital letters um
20:25 - yeah so let's go through the javascript
20:28 - our index.html is like not bad it
20:30 - basically just like
20:31 - goes through you know our options of
20:34 - shifting stuff
20:35 - um let's go into our javascript so
20:38 - this is an alphabet
20:42 - and basically it just like is the
20:44 - constant like array of letters that is
20:46 - the alphabet
20:47 - so i would recommend not touching that
20:50 - if you want your things to like
20:52 - stay in english but um
20:55 - go for it um function.encrypttext we
20:58 - have a function called encrypt text
21:01 - and when it says document form 0
21:04 - let title so document get element id
21:07 - title id encrypted text and
21:11 - we shift the number form shift value so
21:13 - there's a lot of like
21:15 - things in here um
21:20 - that are like basically what it's saying
21:23 - is like
21:23 - we're gonna get the text so what these
21:25 - functions are doing is they we get text
21:27 - we get like an input from the text so
21:28 - input from the text bar
21:30 - depending on the number that they
21:32 - selected here we're going to shift it
21:34 - that far into the alphabet so that's
21:36 - what this does
21:39 - i'm trying to find like yeah so
21:43 - basically
21:45 - we have like all these things where it
21:47 - says like shift so like let
21:48 - shift source detect but basically what
21:51 - this does
21:51 - is it takes your stuff um
21:55 - and then we have like shifting source
21:57 - text all these things like are defined
21:58 - later on
21:59 - but what it says it's like we're going
22:00 - to get the text we're going to say how
22:02 - much they wanted shifted by
22:04 - we're going to shift it by that much so
22:06 - shift it in the alphabet by that much
22:08 - and then we're going to spit it out as
22:09 - the output
22:10 - so um
22:15 - i'm trying to think of like what's the
22:16 - best okay so function encrypt character
22:19 - shift
22:20 - let include alphabet includes character
22:22 - to uppercase so it puts everything in
22:23 - uppercase
22:24 - because it just works with uppercase
22:25 - better if it includes
22:28 - um we let position equal the alphabet
22:31 - dot the index of the character uppercase
22:32 - so whatever the character is
22:34 - we're going to let the position be
22:35 - whatever the position of it
22:37 - is in the array so like 13 y
22:40 - 25 so we number them all off and we say
22:43 - like oh
22:43 - actually that's wrong m is 12
22:47 - y is 24 because remember we start at
22:50 - zero
22:52 - so anyway so it takes that says that's
22:54 - my position for it
22:56 - and it shifts it mathematically
23:01 - you know two spaces whatever it is so
23:04 - shifting two would shift at two so like
23:07 - if i said
23:08 - i feel like a good way to illustrate it
23:09 - is this way my code is abcde
23:13 - and i said shift 1
23:17 - my output is going to be bcdef
23:23 - because we shifted it one right decrypt
23:26 - if i say shift two encrypt
23:30 - f g h i j so that's what that means
23:34 - when i say shifting if that helps you
23:37 - um new position position plus shift
23:40 - alphabet length
23:41 - um returns alphabet new position returns
23:43 - character so basically
23:45 - all these things are just like defining
23:47 - what
23:48 - the stuff means so it's all just saying
23:51 - like we're going to take stuff we're
23:52 - going to shift it and then we're going
23:53 - to put it back into the function
23:55 - um so it all gets defined later on but
23:58 - we have it
23:59 - put it in so we can like say like oh um
24:04 - like form text value character encrypt
24:08 - character shift join so like all these
24:10 - things are like defined later on in the
24:12 - code
24:13 - yeah so your challenge for today
24:16 - is your challenge for today
24:19 - i honestly would say your challenge for
24:22 - today
24:23 - one change the background because i
24:26 - think that's fun so change the
24:27 - background go into the css change the
24:29 - background
24:30 - two what i would say your challenges
24:33 - is these are all gonna say
24:37 - um
24:41 - so your challenge right now is to change
24:44 - the options so it says like shift 2
24:48 - your challenge is to make it like shift
24:50 - 5 shift 10
24:52 - you know shift 30 and see what happens
24:56 - um i'm trying to look at the javascript
24:58 - and see like what's a good challenge
25:02 - and another challenge would be
25:07 - a willow what's the challenge
25:10 - um i'm trying to think about right now i
25:12 - said
25:13 - one like change how much it shifts by so
25:15 - like you know how it's like
25:16 - one two five or 10 26 like change how
25:19 - much it shifts by
25:20 - um and then also the letter count
25:24 - yeah sure like change the alphabet
25:26 - change it up
25:28 - all right sounds good yeah anything else
25:32 - apart from that um i don't know if you
25:34 - have anything though like message me
25:36 - okay yeah i thought we'd put challenges
25:38 - in for this but
25:39 - i guess we did not okay had a rough day
25:42 - over here at
25:47 - but yeah okay so let me know christian
25:50 - have a good one
25:51 - um yeah so i'm gonna stop recording

Cleaned transcript:

javascript part four iteration lesson nine let's do it let's get pumped to loops imagine you have to write so loops are really helpful when we're trying to write code over and over and over and over again because they just do it for us instead of us having to write out the same thing over and over again loops allow you to run the same code over and over each time there will be a different value sometimes true sometimes not depending on what you're trying to do here the loop will continue until a specific condition is met so remember our if else statements if thing happens continue loop else stop loop um oh now we have animations this week fun so he's hungry um luke is like eating food so if he's full then we get back to here but eating and then yes you know external output um a for loop so a for loop goes through a block of code for a number of times so for a specific condition that's under the condition that the loop will be run so an example of this is like four mathematical variables this is where you're gonna see it a lot so for the variable i equals zero so the integer variable i equals zero for this variable it equals zero as long as the variable is less than five we're going to add one to i yeah so the variable starts at zero runs code once then we add one to i yeah so as long as i is less than five we're going to continue writing that code as soon as i reaches the value 5 it will stop running this code because it will be greater than 5. initial so that's basically how these things work for a certain condition the code runs itself for that given amount of time um for loop practice so these are just like some examples so this one's like basically what we just saw for i equals zero as long as i is less than 8 we're going to add 1 to i console.log will print i so we'll just print out the values 0 1 2 3 all the way to 8. all right so all the way to 7 because it's less than 8. 4 counter equals 3 counter is greater than equal to zero counter minus minus so for this one we have a variable just like i but we're going to call it counter so the same thing i encounter same integer variable just we call it different names and in this case counters equal to three so as long as counter is greater than or equal to zero we're going to take one away from counter so and then console.log counter so the console would print three two one and then zero because we have equal to zero yeah um and then last one um for cars bmw volvo saab ford um for i equals zero and cars dot length um is less uh for i equals zero and as long as i is less than cars.length i plus plus so it would print out bmw volvo saab ford because it would print out those until it got to the length so it would just print out everything in the given array a while loop so our two big loops are going to be four loops and while loops while loops loop through the code as long as a condition is true so remember our booleans true and false yes no one zero so while loops are only useful for booleans because it's only when a condition is true so i like to think of it that way if it makes sense to you adopt that thinking um variable i equals zero so while i is less than 10 console.log the number is i i plus plus yeah so let's go through this because this is um i know we've had a couple questions in the past weeks for like points counters um this is how you would do that variable i is equal to 0. yes while i is less than 10 then the console.log is printing out the number i so you know prints out this i plus plus see this like i plus plus thing here this is like how you would do a counter so like this kind of structure is how like counters would work for like point systems um i know we had a couple questions about that last week so this is like the kind of structure that you would try and adopt for that but this is a good example of a while loop no that will be added one time each is run through so a do slash while loop um a juice last while loop is a type of while loop so like under that while loop umbrella the difference with the while loop the code will run through once before checking the condition even if the condition is not met so even if the condition is not met the code will still run through once i'm gonna get my pointer here so in this case i equals 10 do console log the number is i i plus plus while i is minus 10. so since this is in here it will run one extra time before checking the condition you know what i'm saying because while is outside of the the do um it will do it one extra time like i i don't want to say like out of error but like kind of quote unquote out of error because your whole thing is like wow it's less than 10 but it does it while it is equal to 10 because it like the while loop saying that it has to be less than 10 is outside of the conditions for the do statement yeah so another example here i equals eight and then do console.log the number is i i plus plus so we add one to i after we print out the number this is while it's less than 10 so since this while statement is outside it will do it an extra time on accident because it doesn't check infinite loop so an infinite loop is when the loop will run forever regardless of circumstance regardless of case you might crash your computer a browser so that is true if you do one that's like adding up numbers um i know for a fact that like just because of the way that like the compiler works there's only a certain amount of data that like number like there's a certain number i forget what it is but there's a certain number that you cannot go past when coding because the compiler specifically in reply cannot hold all of that information so it's a smaller number than you might think but if you do like a plus plus thing it will just like keep adding the numbers and it will like crash because it can't like add more numbers to the number so that's an example of this it might happen when a condition is in the while statement is always true you can stop the loop by adding a break statement so break and um yeah so breaking is like when we say okay we're gonna stop the forever loop so that we don't crash our computers that's what that means um let's see this so let's go through this example a sleep equals true let hours zero so consistent a sleep is true yes so the the variable of sleep is true and let so the bullying asleep is true and let hours feel like hours of sleep is zero while asleep so while asleep is true it has been blank hours since i slept and hours plus plus the code will run forever because there's no break statement to stop the code so it will just keep adding more hours since you like last slept because there's no break statement so there's nothing telling it to stop right and since there's nothing telling it to stop it has no reason to stop and therefore it will keep going because asleep is always true and it will just keep adding hours forever so in this case if hours equals 10 so we're adding on a statement if hours equals 10 it's time to wake up yes so we have a condition here if the hours equals to 10 then we print it's time to wake up and then we add break because we don't want the loop to run anymore we don't want to say oh it's been 11 hours of sleeping when we woke up after 10 hours right so that's why we say break break makes the infinite loop stop it's very important to include break if you don't include break your code might not function properly so it's very important to remember break okay um is there questions i'm perhaps missing yeah timers could be coded like this um const i don't even know what const is that's a good question i don't know i thought it would be like constant like the constant asleep but i've never seen it before as a variable so i will get back to you on that that's a me error um okay why is this not okay nesting so nesting loops so remember how we had our nesting ifelse statement so like if this happens if else if else if else else so that's nesting that's nesting of if else statements it's like having one within the other within the other so nesting for loop statements is just having one for loop within the other yeah so hopefully that makes a little bit sense the first loop and the second loop see how they're indented that's how you know things are nested within each other so the indents are what tell us something that is like within each other um in order for it to be within each other it has to be like on an indent from the line above it so if we had another for loop that was like nested within this one it would start right about here because of the indents yes so anything that's nested is always like indented within itself um so in this case four counter equals one and counter is less than four counter plus plus so counter equals one as long as the counter is less than four we're going to add one to the counter console.log count from one to three so count from one to three one two three one two three one two three that's the output second loop four counter two so different counter for counter two equals one and as long as counter two is less than four counter two plus plus yeah so console.log counter two so this white count from one to three that's counter one so that's just regular counter this is counter one because it says count from one to three so it says okay counter equals one so we're going to print out count from one to three here we're printing out one two three from counter two so counter one counter two counter one counter two and they go in succession like this because they're nested within each other yes and this loop will keep going for as long as this loop is able to keep going right hopefully that makes sense the outermost loop is determining what if the loops continue right so this loop doesn't determine whether this one runs the outermost loop determines whether the inner ones run yeah would you mean if the outer loop doesn't run the nestle wouldn't that's exactly what i mean so like if this one like doesn't run so like okay it's like what's a good example of this visual example i don't know if we can see this this is a newton's cradle if we can see this basically how this works is if this ball hits all of the ones in between it then the outer one also goes right but it only works if the outer ball like does its part it doesn't work if the inner balls only do their part right so the outer one like continues the whole point of it that was not a good awesome but basically like the outermost loop dictates whether the inner ones run it like the outermost loop is the one that decides whether the other ones will run because it's the like it's the primary condition nestling loops within each other you make the outermost one the primary condition and therefore the primary condition has to be met for the code under it to run therefore making the outermost loop the primary condition hope that helped um recursion so a recursive function is when a function calls itself so we remember calling a function we tell this a little bit last week a recursive function must have a condition to stop calling itself so it's like you calling up yourself on the phone to do something you know what i'm saying like it needs to stop at some point but it makes more sense in a computer world um you can use an ifelse statement to do this so let's go through this function countdown variable number yeah we have an integer variable number and the function is called countdown console.log is gonna print out the variable number so the function itself is printing out the new number new number equals number minus one so new number is number minus one so whatever number was we're gonna take one away from it and we're gonna call it new number if new number is greater than zero countdown is gonna start again but with new number instead of number so what this means is we're going to have a number and countdown is going to say okay we're going to print that number out then we're going to take one away from that number replace it and then we're going to print out the new number that's one less than the original number so it's just a countdown so it's like six to five that's basically what this code does it goes six to five but it's a recursive function because of this countdown equals four so we call the original function when in like the function itself yeah so basically countdown four prints and calls countdown three and then count countdown three prints calls countdown two so it's calling itself within the function to keep the loop going a recursive function is a really good way to have like a loop but like in a sneaky way um so it just keeps going and going and redoing itself over and over and over again until it reaches zero because that's our base condition here so it reaches zero and then it says oh well we reach zero we don't have to do this anymore and then it stops yeah so this condition is basically the same as our break and a recursive function is basically the same thing as like an infinite loop let's get into the next one so number properties so remember um how i said like oh make sure when you're using numbers if you want to do math with them or you want to do like the already implemented functions with them make sure you call them an integer because you don't want to say oh it's not an integer like it's a string because then none of these things work so javascript and java but javascript has all these like already implemented functions that help you do mathematical things but they only do them with integers because it knows how to compute an integer like it knows what a number is but it can't do that with like words so min value max value returns the largest number possible in javascript returns the smallest number possible in javascript these are like what i was talking about when i said oh javascript has like a limit for how big the numbers can be this is what i'm talking about positive infinity negative infinity represents infinity returned on overflow so like it can't actually represent infinity so it has like overflow the excess um same thing here nine represents a not a number value that's kind of hard to explain um nan is like interesting i don't know not another values are like hard to explain um you don't really use them all that much um yeah that's all i'm really going to say about that um so let's go into the example here so variable k number dot min value console log k so basically what it's going to do is it's going to take k and then it's going to say oh well we're going to make k the smallest value we could possibly have in javascript and then we're going to print that out in the console yeah this one doesn't work because variable x equals 6 and then variable y is x dot max value y is undefined here it doesn't work y is undefined um because this is not the max value you know what i'm saying like it doesn't make sense this code doesn't make sense and therefore y is not defined and therefore it doesn't work yeah so there's a lot of these like inherent math properties that um you can use when doing stuff which is why it's important to like define your variables as integers if you want to use a lot of these number properties why is that okay there we go number methods so number methods can be used on any type of numbers call the method by variable.method so example2string method returns the number as a string um so this is like to convert integers into strings so changing your data type that's how you do it two fix method returns a string with a number written with a specified number of decimals yeah so it's like it's kind of like rounding but like it doesn't round it just kind of like cuts your number off um so methods are really good for little things like that um variable age equals 35 age.2 string it takes this number and puts it into string form so return 35 like it returns 35 it looks the same but you've just changed the data type from an integer to a string and then variable x is 9.656 x to fix zero rounds it to a whole number so we just get nine x to fix two we would get nine point six five okay hopefully so this one it's gonna be a fun workshop today i'm actually really excited about it um does anyone know what a cipher is just like out of curiosity while i queue up the the replit okay a cipher is like a fancy word for like code like a code like a like a code maker so um you know like you can have all those like things that like scramble letters and you like make a code with it that's what a cipher is so this one's a fun one i really like it um this is the reply this is the reply get excited it's a fun one i really like it so we're gonna run it um this one has a silly background that our lovely education director rachel did i like this one i think it's fun i think it fits with the cipher theme um we had a little bit of a disagreement on backgrounds before but i like this one okay so what this cipher does is basically you can input any text so this is the plain text so say like i wanted to do like my name is willa and say i wanted to shift it to so like encrypt it too and then i would press encrypt and this is my encrypted text so you know and then if i say decrypt it gives me my original text back notice it's in all capitals because the alphabet itself is in all capitals so um we can go through the code together but the alphabet itself is an all capital so anything you write once you like put in the cipher machine it's going to come back as all capitals because our alphabet is the capital letters um yeah so let's go through the javascript our index.html is like not bad it basically just like goes through you know our options of shifting stuff um let's go into our javascript so this is an alphabet and basically it just like is the constant like array of letters that is the alphabet so i would recommend not touching that if you want your things to like stay in english but um go for it um function.encrypttext we have a function called encrypt text and when it says document form 0 let title so document get element id title id encrypted text and we shift the number form shift value so there's a lot of like things in here um that are like basically what it's saying is like we're gonna get the text so what these functions are doing is they we get text we get like an input from the text so input from the text bar depending on the number that they selected here we're going to shift it that far into the alphabet so that's what this does i'm trying to find like yeah so basically we have like all these things where it says like shift so like let shift source detect but basically what this does is it takes your stuff um and then we have like shifting source text all these things like are defined later on but what it says it's like we're going to get the text we're going to say how much they wanted shifted by we're going to shift it by that much so shift it in the alphabet by that much and then we're going to spit it out as the output so um i'm trying to think of like what's the best okay so function encrypt character shift let include alphabet includes character to uppercase so it puts everything in uppercase because it just works with uppercase better if it includes um we let position equal the alphabet dot the index of the character uppercase so whatever the character is we're going to let the position be whatever the position of it is in the array so like 13 y 25 so we number them all off and we say like oh actually that's wrong m is 12 y is 24 because remember we start at zero so anyway so it takes that says that's my position for it and it shifts it mathematically you know two spaces whatever it is so shifting two would shift at two so like if i said i feel like a good way to illustrate it is this way my code is abcde and i said shift 1 my output is going to be bcdef because we shifted it one right decrypt if i say shift two encrypt f g h i j so that's what that means when i say shifting if that helps you um new position position plus shift alphabet length um returns alphabet new position returns character so basically all these things are just like defining what the stuff means so it's all just saying like we're going to take stuff we're going to shift it and then we're going to put it back into the function um so it all gets defined later on but we have it put it in so we can like say like oh um like form text value character encrypt character shift join so like all these things are like defined later on in the code yeah so your challenge for today is your challenge for today i honestly would say your challenge for today one change the background because i think that's fun so change the background go into the css change the background two what i would say your challenges is these are all gonna say um so your challenge right now is to change the options so it says like shift 2 your challenge is to make it like shift 5 shift 10 you know shift 30 and see what happens um i'm trying to look at the javascript and see like what's a good challenge and another challenge would be a willow what's the challenge um i'm trying to think about right now i said one like change how much it shifts by so like you know how it's like one two five or 10 26 like change how much it shifts by um and then also the letter count yeah sure like change the alphabet change it up all right sounds good yeah anything else apart from that um i don't know if you have anything though like message me okay yeah i thought we'd put challenges in for this but i guess we did not okay had a rough day over here at but yeah okay so let me know christian have a good one um yeah so i'm gonna stop recording
