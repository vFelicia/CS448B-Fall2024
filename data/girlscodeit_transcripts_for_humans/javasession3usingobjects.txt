With timestamps:

00:00 - all right now we're recording
00:03 - so um for this lesson we'll basically be
00:06 - going over like
00:07 - um basic how to use objects in java and
00:10 - stuff like that
00:11 - so we'll be talking about like what
00:13 - objects are
00:14 - and um what like classes and instances
00:16 - are
00:17 - and also um i'll be going over to
00:20 - um two pretty basic classes in java that
00:23 - you'd find pretty helpful
00:25 - so first off um what is an object
00:29 - an object is basically like it's just a
00:32 - thing in java that's kind of separate
00:35 - from the
00:36 - concept of a variable so like a variable
00:38 - holds a value
00:39 - but object is kind of like a like an
00:42 - object in your life so like a
00:44 - bottle or like or just like a thing
00:47 - um it's basically an instance of a class
00:51 - so class is kind of like a blueprint on
00:53 - how you can like make an object like
00:56 - what this object does um what um
00:59 - what information can it hold and the
01:01 - object is like an
01:02 - actual instance of that class so
01:06 - um i guess the best way to put it is
01:08 - like for example
01:10 - um if you look down below um
01:13 - you have something like a class can be a
01:15 - fruit or a book
01:17 - and the objects would be like apple
01:19 - oranges and bananas
01:20 - and a book would be like jane eyre or
01:23 - like the great gatsby or like the hunger
01:25 - games
01:26 - so like the classes sort of describe
01:30 - like what an object can do and what
01:33 - sort of um stuff it has so like
01:36 - another example would be a class can be
01:38 - like a dog
01:40 - and the object would be like like um
01:44 - a puppy or something like that so a dog
01:46 - can bark
01:47 - um they could have like different
01:48 - colored birds and then like
01:50 - the puppy in real life would be like
01:54 - the um the instance of a dog that would
01:57 - actually like bark and you can actually
01:59 - see the color of the skirt
02:01 - so something like that and then in
02:04 - in java like you can create objects by
02:08 - let me move this upwards um you can
02:12 - create
02:12 - objects by just doing like class
02:15 - name equals new class and then you have
02:18 - to have like the parentheses at the end
02:22 - so for example you can have something
02:23 - like fruit apple equals new fruit
02:26 - or book jing error equals new book
02:29 - so the most important thing is like just
02:32 - like with variables
02:33 - um so like this part is the variable so
02:37 - you have like the class that describes
02:38 - this type so like
02:40 - the variable apple is of type through
02:42 - but this second part is
02:44 - how you're instantiating that object so
02:46 - it would equal a new fruit
02:49 - um any questions about this so far
02:56 - okay
03:00 - and um i have one real quick sure
03:03 - so downward has like book jane eyre new
03:06 - book
03:07 - um there's so jane eyre up top is
03:10 - capitalized in space and it's one word
03:12 - with
03:12 - just a lowercase down there do you not
03:16 - use the space when you're doing a class
03:18 - or
03:19 - um so basically for when it comes to
03:22 - like naming variables
03:24 - in java um the general you can't have
03:27 - any spaces in your names
03:29 - so um it has to be all one word
03:32 - and you can like have different
03:34 - capitalization so like the e is
03:35 - capitalized or something like that
03:37 - as long as it's one word then it's a
03:40 - proper variable name
03:41 - so that's why we have um we have the
03:43 - space missing in january
03:46 - um technically for variables you can
03:48 - like capitalize the power
03:50 - like however you want so like the j
03:52 - could have been capitalized
03:54 - but um in java it's usually good
03:56 - practice you have your um
03:58 - variable name start in lowercase and
04:00 - then your class name start with
04:02 - uppercase
04:04 - does that um yeah thanks
04:09 - um and if you guys have like any other
04:11 - questions or like you kind of want me to
04:13 - go over this or you're not like sure
04:16 - what's or like you're not really getting
04:19 - what's
04:20 - like what i'm talking about feel free to
04:21 - like tell me to like go
04:23 - like go back or like or um or just drop
04:27 - any questions
04:34 - all right so next slide um what
04:37 - so basically why i'm talking a lot about
04:41 - like objects and stuff
04:42 - is um i'm trying to get you sort of like
04:44 - object-oriented programming
04:46 - so object-oriented programming is
04:49 - basically
04:50 - a type of program you can do that's
04:52 - structured around objects and classes
04:54 - so if you've um looked through like the
04:57 - workshops and all the demos we did
04:59 - last class um you'll notice that
05:02 - literally everything in java is
05:04 - structured around
05:05 - objects and classes so like even your
05:07 - main method
05:08 - is in a class and it's like part of the
05:11 - main class
05:12 - and things like that so java is like a
05:14 - really good language to learn um
05:16 - olp or object-oriented programming
05:18 - because everything about it
05:20 - is centered around objects and classes
05:23 - um
05:24 - it's also i'm honest like we also
05:27 - there's also like procedure programming
05:29 - and that's basically just saying like
05:31 - all the um basically all the stuff you
05:33 - do in java
05:34 - is operated on by method so like you
05:37 - it's basically um java is a language
05:40 - that's structured around like
05:41 - making methods and like passing data
05:43 - into it
05:45 - um you don't have to worry too much
05:46 - about like knowing
05:48 - exactly what like um procedural
05:50 - programming is
05:51 - um it's more of that you should
05:53 - understand that oop
05:54 - is a way of programming where you have
05:58 - like concepts like objects and classes
06:00 - and basically um a lot of what you do in
06:03 - java is basically creating new classes
06:05 - um
06:06 - passing around objects and just like
06:08 - manipulating those
06:09 - to make a program and
06:13 - yeah like again in op like objects can
06:16 - contain data and methods so basically
06:19 - um in your classes you can have both
06:21 - like different types of data like
06:24 - oh what if i have a class dog like what
06:26 - color is it for
06:27 - what's the dog's name stuff like that
06:29 - but you can also have methods like
06:30 - a dog can fart a dog can run and
06:34 - whatnot
06:45 - all right so um um any questions
06:55 - all right so next um
06:58 - i'll just be going over like the four
07:00 - basic concepts of oop
07:02 - um you don't really have to um
07:05 - understand exactly what this
07:06 - is right now it's a these are
07:10 - a little bit like advanced but just like
07:13 - keep these in mind as you're like
07:15 - as you're learning java so um basically
07:18 - the four pillars of oop
07:20 - are abstraction encapsulation
07:22 - inheritance and polymorphism
07:24 - abstraction is basically um you only
07:28 - want to
07:28 - show the user the stuff that
07:32 - they need to know so like the
07:37 - the general like the general rule that
07:39 - goes with this is like
07:40 - try to keep your data as private as
07:43 - possible you don't want people
07:44 - like accidentally manipulating um
07:47 - or accessing methods that they shouldn't
07:50 - have access to
07:51 - so all users should only be able to see
07:54 - the stuff that they need to know
07:56 - um is basically hiding sensitive data
08:00 - from users so like
08:01 - making things private and
08:04 - um inheritance is basically like the
08:08 - cons
08:08 - it's basically like subclasses and
08:09 - secret classes so like
08:11 - super classes can inherit or subclasses
08:14 - can inherit methods
08:16 - and data from like super classes and
08:18 - went on
08:19 - and then finally polymorphism is the
08:21 - ability for an object to basically
08:24 - um take different forms so
08:27 - it's kind of like um
08:30 - grouping different objects that have
08:32 - like similar
08:34 - features together so for example a cat
08:37 - and a dog
08:38 - are both types of animals but um
08:41 - and they can like both make noises right
08:44 - except
08:44 - a cat can like meow but a dog can burp
08:48 - um these are a little bit like these
08:51 - it's these are a little bit complicated
08:53 - if you
08:54 - don't if you don't um
08:57 - understand classes and stuff so like
09:00 - right now
09:00 - i would say like um hobbies in mind
09:04 - know that they exist but will definitely
09:07 - explain
09:08 - it or you'll understand it a lot better
09:10 - once we get into the later parts
09:12 - of this this course so like in
09:16 - by like near the end of the course you
09:17 - should be able to understand it but
09:19 - right now like
09:20 - don't worry if it's going a little over
09:22 - your head um just know that like
09:24 - these like these four concepts exist
09:35 - and then this one is also pretty
09:39 - important so like
09:40 - that so basically java is a pass by
09:44 - value
09:44 - language and there's a difference
09:47 - between um pass by reference and pass by
09:49 - values
09:50 - so past my reference is basically like
09:52 - you pass in the reference
09:54 - of an object so a reference is like
09:58 - it's basic if the the powerpoint says
10:02 - it's like a subdirection directions to
10:03 - somewhere in the memory but
10:05 - it's a lot simpler than that it's
10:06 - basically a reference
10:08 - is something that points to someone's
10:11 - memory
10:12 - so um let me see if i can draw this out
10:18 - so last class we talked about
10:21 - um how variables store
10:25 - variables for primitive stored numbers
10:27 - right
10:28 - but um when it comes to like reference
10:31 - objects
10:33 - you have they instead of storing numbers
10:36 - they sort addresses
10:38 - so let me see
10:44 - can you guys see like what i'm drawing
10:46 - on here
10:48 - yes we so basically
10:52 - um when you have a variable let's say i
10:56 - have a variable called
10:58 - a um if i assign it
11:01 - to a primitive type so like a in
11:05 - a equals one a will hold
11:09 - just the value one but
11:12 - um what java does
11:15 - is basically if i have a class a so
11:19 - instead of
11:21 - in i have a class
11:27 - like
11:35 - dog a equals new
11:40 - dog um
11:43 - instead of having like a store
11:46 - dog in here what i would do
11:49 - is it'll do something like it'll
11:56 - point to an object called dog
12:01 - so it will store like if dog was stored
12:04 - in the address like
12:06 - 0101 it will store the address over here
12:09 - and they'll just point these on
12:11 - so that's what um they're talking about
12:14 - these slides
12:14 - what it's like about references
12:17 - basically
12:18 - when you when we have like
12:20 - [Music]
12:22 - how do i clear when we have
12:30 - like code like this so fruit apple
12:32 - equals new fruit
12:33 - um and they basically it's basically
12:37 - saying that
12:38 - for reference variables the
12:42 - apple is basically pointing to the fruit
12:45 - object
12:47 - um
12:51 - does anyone have any questions about
12:52 - that because i know that can be a little
12:54 - confusing
13:04 - so like yep um let me get this straight
13:08 - um a reference is a
13:12 - passing by reference is where you type a
13:14 - class or any other reference like a
13:16 - string
13:17 - and uh it gets another object
13:21 - and a type c and i like it gets
13:24 - the information of that object into this
13:26 - one
13:27 - and the value is
13:31 - just uh i'm not sure yeah i'm confused
13:36 - it's all good um yeah so basically
13:40 - um what i'm talking about sort of like
13:43 - java has
13:44 - two types of data so last class we
13:47 - talked about
13:48 - primitive types right they're basically
13:50 - like integers
13:51 - um integers doubles booleans and
13:54 - characters
13:56 - they're all like values that can be that
13:58 - can be um
14:00 - stored as numbers so like you can have
14:03 - an integer two or in like a double 3.5
14:08 - but another type in java is called our
14:10 - reference type
14:11 - and that's sort of what i'm trying to
14:13 - get at here so like
14:15 - um a reference type is everything else
14:17 - everything else
14:18 - in java is basically like pointing to a
14:21 - different
14:22 - object so like a dog
14:25 - or something like that um basically
14:29 - when it comes to pass by reference um
14:32 - passed by like basically
14:35 - what i talked about is sort of like what
14:37 - a reference is a reference
14:39 - is sort of like a variable that points
14:42 - to like a different object so um
14:45 - if i have like
14:48 - if i have like root
14:52 - apple equals new
14:56 - root
14:59 - um in memory what that would look like
15:02 - is that i have this variable called
15:04 - apple but it points
15:08 - to the actual like fruit object
15:11 - that's supposed to be referring to
15:15 - and the difference in that is sorry
15:18 - you get a question
15:22 - okay like feel free if like if this is
15:24 - sort of confusing like feel free to just
15:26 - interrupting us
15:28 - well so basically what i understood from
15:30 - that is
15:31 - um the reference are like the ever
15:34 - like everything else like the strings
15:36 - and classes they point to another object
15:40 - however the values would unders from
15:42 - that they just store
15:44 - a value inside just only a value inside
15:47 - of them
15:48 - without pointing in any direction yeah
15:51 - yeah that's yeah that's correct so
15:54 - basically um
15:56 - what i'm getting at is sort of like just
15:58 - like you said like
16:00 - um references point to like
16:03 - a different part of memory so um
16:07 - what they actually like they're
16:09 - technically their value would be like
16:10 - whatever like memory address that fruit
16:13 - is at
16:14 - but like you can basically think about
16:16 - as apple is pointing to the fruit object
16:20 - on the other hand like there are
16:22 - primitive values like
16:23 - if i have like boolean
16:27 - x equals true
16:31 - um what this stores is basically i'll
16:34 - have a variable x
16:36 - but instead of going to anything it'll
16:38 - actually store
16:39 - like a true value so one
16:44 - so what's the difference between a value
16:46 - and a primitive
16:49 - primitive is just like a type of value
16:52 - so
16:54 - it's just like any value that can be
16:56 - represented by a number
16:58 - so like okay yep so like bullying to be
17:01 - one or zero
17:02 - then there's ant double float yep
17:07 - so exactly so primitives are types of
17:11 - valleys
17:11 - that can be basically directly
17:13 - translated into
17:14 - numbers so like just like you said um
17:18 - true and false can be zero um one and
17:21 - zero characters can be like
17:23 - any number on the ascii table and then
17:26 - like
17:26 - integers doubles like those are those
17:28 - are actually numbers
17:30 - but on the other hand um how java stores
17:34 - like classes and objects is they can't
17:36 - store the class and object directly
17:38 - into the variables they can only store
17:40 - the address
17:41 - of where that class is in memory so
17:44 - basically they just point to where that
17:47 - object is
17:48 - and that's all they they can do so
17:52 - that that basically relates to pass by
17:55 - reference
17:55 - in that like when you pass in like
17:59 - the the idea of pass by reference is
18:01 - when you pass in the reference
18:03 - to like a method um you're passing in
18:06 - like the actual
18:07 - address of wherever that object is
18:10 - but on the other hand when you pass by
18:12 - value um
18:14 - when you pass in like the when you pass
18:17 - in the um
18:19 - the data into like the method it will
18:22 - actually make a copy of that value into
18:24 - another place in memory
18:26 - so if you technically won't be
18:29 - like affecting the original variable
18:36 - this can be like a little confusing to
18:38 - like
18:39 - explain just by words so like hopefully
18:41 - like
18:42 - this gif at the bottom helps where it's
18:44 - like when you're passing by reference
18:47 - you actually pass in the actual like
18:49 - object itself
18:51 - but when you pass by valley you actually
18:53 - make a copy of that object
18:55 - and then pass the copy in
18:58 - um anyone have like other any other
19:01 - questions about that or like you want me
19:02 - to sort of
19:04 - clarify anything
19:11 - see all right
19:14 - so um next we can talk a little bit
19:17 - about like
19:18 - specific objects and classes that you
19:20 - can use in java
19:21 - so the first one the most common one is
19:23 - string objects
19:25 - so strings are um
19:28 - they're objects and they basically are
19:31 - a sequence of characters so words
19:35 - um they all have like you can access
19:38 - their attributes with using
19:40 - string.attribute and you can access the
19:42 - list of messages using stringout method
19:44 - um basically if you want to access
19:48 - the general rules if you want to access
19:50 - information to like
19:51 - an object you have to put the dot
19:54 - and then you can like put a variable
19:56 - name or like a method name
19:58 - and then um you can that'll be
20:01 - basically accessing that specific
20:03 - variable or method
20:04 - just remember for methods you have to
20:06 - like have the parentheses at the end so
20:08 - you can call the method
20:10 - um just like with other classes you can
20:13 - make a new string using like
20:15 - string name equals new string and you
20:17 - can also input like whatever text you
20:19 - want
20:19 - so um just be aware like
20:22 - for if you want to like create a new
20:25 - string that's like a specific word
20:27 - make sure you surround the word with
20:28 - double parentheses
20:35 - um yeah and it's not it's not exactly
20:37 - recommended because
20:40 - because you're basically like
20:45 - you're basic you can basically create
20:47 - copies of like the same string
20:49 - so in this example you have like string
20:51 - a equals
20:52 - new string abcd string b equals new
20:56 - string
20:56 - abcd however a would not equal b
21:02 - um and basically the idea is sort of
21:04 - like it's
21:05 - exactly what i talked about um in the
21:08 - last slide so basically
21:12 - you have like they have a is pointing to
21:16 - a b c d this string in memory
21:20 - however like if you like do another
21:22 - string b
21:23 - equals new string abcd b is pointing to
21:28 - another string abcd that's in like a
21:31 - separate part of memory
21:34 - so when you do this a equals b they're
21:38 - actually comparing the values of a
21:40 - and z so say like this a b
21:43 - c d is in the memory address like one
21:46 - and this one
21:47 - is in one one so the value of
21:50 - a over here would be one because it
21:52 - stores the address
21:54 - of this first string object the value of
21:57 - b
21:58 - would be one one because it stores the
22:00 - address of this second string object
22:03 - so they technically wouldn't be equal
22:14 - [Music]
22:17 - so anyone have like questions about that
22:20 - the better way to just like to just
22:24 - make a string like the same idea would
22:28 - just be like string
22:31 - a equals a b
22:34 - c d so it's just like how you um
22:39 - how you would instantiate like
22:42 - a a primitive type you would just have
22:45 - it's just like a character with
22:47 - but like you put it around double quotes
22:48 - instead and you use
22:50 - the string type um and sometimes like
22:53 - people
22:54 - get confused like it's so easy to create
22:56 - a screen like this
22:57 - that they'll think it's a primitive but
23:00 - this is still technically the same idea
23:02 - as
23:02 - this string a equals new string abcd
23:06 - so there's a way to sort of create
23:09 - strings without having to use this
23:11 - but just remember like the same thing
23:13 - would apply that like
23:15 - a would not equal b because there are
23:18 - two different objects
23:22 - and yeah this is the way of making that
23:24 - would just be like
23:26 - that though that way of making a string
23:29 - is just like using like creating a
23:30 - string literal
23:33 - so um yeah java automatically just
23:36 - keeps these strings in this like they
23:38 - keep it they keep up a lot of objects
23:41 - um in this place called the heap in
23:43 - memory
23:45 - and they also do a lot of like fancy
23:47 - stuff with string specifically
23:49 - that'll make it kind of work like a
23:50 - primitive
23:53 - [Music]
23:57 - and then um these are just a list of
23:59 - different string methods that you can
24:01 - use
24:02 - so um the first one is just getting a
24:04 - substring
24:05 - um if you like
24:09 - if we have this string called like
24:12 - hello hi equals hello um get making a
24:15 - substring would just be like
24:16 - getting one part of that string so um
24:19 - it would be this like this line would
24:22 - just be getting like
24:23 - the first two characters of a string so
24:25 - h and e
24:27 - um if you guys are familiar with
24:30 - with um a rate indexing
24:34 - the basically the places and strings
24:36 - start at zero
24:38 - so the the first like letter of the
24:41 - string
24:42 - would be like the zero letter in a sense
24:45 - um any questions about that
24:53 - all right so um just remember that
24:57 - it basically gets everything like
25:01 - starting from the first index all the
25:04 - way
25:04 - up until but not including so
25:07 - the second parameter
25:10 - and then you can also do like two
25:13 - uppercase which will make everything
25:14 - capitalized
25:15 - um there's also another method called q
25:17 - lowercase which will lowercase
25:19 - everything
25:20 - um you can if you want to like actually
25:24 - check stream quality
25:26 - um i would really recommend you check
25:28 - like use this dot equals method
25:31 - so actually for all your all your
25:33 - objects you should have
25:34 - a method called dot equals and it will
25:37 - actually check for um
25:39 - for the value equality of the object so
25:42 - um
25:43 - if we go back here if we instead of
25:46 - using like a equals equals z we use a
25:49 - dot equals b
25:50 - it'll actually return like the correct
25:52 - the correct thing that these two strings
25:54 - are like technically equal like they
25:57 - have the same letters basically
26:00 - so it's good practice to use that equals
26:03 - instead of like equals equals for any
26:06 - sort of
26:06 - objects that you have and
26:10 - second is stop me which is just the
26:12 - length of the string
26:14 - and then finally um index of which is
26:17 - um the index of like whatever substring
26:21 - you pass in
26:23 - so in this example you have like um
26:26 - index fdl
26:27 - it will return the first occurrence of
26:30 - like yell in this group
26:31 - in um hello in hello and then it'll um
26:36 - return one because e is the first
26:39 - index where it's the it's the character
26:43 - or e is at the um first index
26:46 - of the string any questions about this
26:57 - all right so
27:00 - the next object we're going to be going
27:02 - over is the random object
27:05 - so this will help you basically generate
27:07 - um
27:08 - random random objects so
27:12 - you can generate like random random like
27:15 - decimals or like random integers stuff
27:17 - like that
27:18 - so um just be sure if you're using a
27:22 - random
27:23 - class or like for for like most classes
27:26 - that you'll
27:27 - you'll have to um you have to like refer
27:29 - to
27:30 - you have to import it first at the very
27:32 - top of your code
27:34 - so for a random object you have to um
27:37 - type in import java.youtube.com at the
27:40 - very
27:40 - like the very beginning of your code um
27:43 - it's like basically this oh toe job like
27:46 - hey i'm using this random class um and
27:49 - you're basically giving
27:51 - the compiler the blueprint you like this
27:53 - is what the class does
27:54 - this is like um all the methods the
27:57 - class has
27:58 - basically so um you can basically
28:02 - use it in sort of like sort of like the
28:05 - same fashion as this example so like
28:07 - you can um do like random
28:10 - dot next in um to like get the next
28:13 - random integer
28:15 - so just like the first thing you'll have
28:18 - to do is like create a new random object
28:21 - and then next would just be like um
28:23 - calling next in
28:24 - and then it will take in like the um
28:28 - sort of maximum integer that you want
28:34 - yeah and like here are like just two
28:36 - methods you can um
28:38 - that would be pretty helpful so like
28:40 - next it
28:41 - would take in like the
28:44 - would basically give you a random
28:46 - integer if you give it like
28:48 - a maximum value it will basically
28:52 - take everything from zero um up to but
28:55 - not including
28:57 - the um the number you pass in
29:00 - and then um for next double um it'll
29:04 - basically
29:04 - [Music]
29:05 - um give you a random decimal between 0
29:08 - and 1.
29:09 - all right so the last the last um
29:12 - class we're going to be talking about
29:14 - are scanners so scanners are basically
29:16 - how you're gonna um you're gonna
29:20 - basically take in user input so
29:23 - um again just like with random classes
29:26 - make sure you write
29:27 - um import java.util.scanner on the top
29:30 - of your
29:31 - on the top of your um java code so that
29:34 - java will know like what you're using um
29:39 - and yeah so the general thing is just
29:42 - like
29:43 - um you declare a new scanner object and
29:46 - you create a new scanner
29:48 - make sure you pass in system.in so
29:50 - system.n will basically
29:53 - there's like there's a lot basically
29:57 - it'll tell it'll tell you um that
30:00 - you're using sort of the standard system
30:02 - input
30:03 - um there's a lot of things with like
30:05 - java um streams and stuff
30:08 - but basically every time you pass in a
30:10 - new scanner
30:11 - you sh you have to um pass in a system
30:14 - back in
30:14 - within like the constructor so
30:18 - basically every time you create a new
30:20 - scanner make sure like you're
30:22 - using this line specifically otherwise
30:25 - it might get a little um
30:26 - sketchy and then
30:29 - um basically a scanner will call
30:32 - you can call like the a method called
30:36 - like next line
30:37 - which will get like the next line the
30:38 - user enters
30:46 - yep so let me see if i can sort of demo
30:49 - this
30:55 - so basically um for scanners what you
30:57 - can do is like
31:00 - the general rules like scanner my
31:07 - um you'll have to basically pass in
31:14 - you'll basically create a new scanner by
31:16 - like declaring
31:17 - a scanner variable that stores a new
31:20 - scanner
31:21 - that holds this system.in
31:24 - so make sure like you you have this line
31:27 - first so create the scanner object
31:30 - next would be like my
31:33 - [Music]
31:35 - yo yo you can call like this method in
31:38 - my scanner that next
31:39 - line which will basically get the next
31:42 - line
31:42 - the scanner inputs and it'll basically
31:45 - return something called as true
31:47 - um it will return a string so you can do
31:49 - like
31:50 - string a equals my scanner dot next line
31:54 - and then we can try printing that out
32:09 - yeah you'll basically have to just
32:11 - memorize
32:12 - this line first um there's once we get
32:15 - to like creating
32:17 - your own classes and stuff and we'll
32:19 - talk about constructors and like
32:21 - and all that this will kind of make a
32:24 - little more sense
32:24 - but for now just like
32:28 - just like memorize this so um this is
32:31 - basically
32:31 - what you have to do
32:39 - so then if we run this
32:58 - wrong library
33:07 - um it will first print out hello world
33:10 - then it will create a new scanner
33:12 - and next line will basically be like
33:14 - java sitting here just waiting for me to
33:16 - input the next lines
33:18 - so i can do like
33:22 - a next line like this and when i press
33:24 - enter um
33:26 - next line will basically store all that
33:28 - information
33:29 - into string and then java will just
33:31 - print it back out
33:34 - um any questions about this
33:37 - yeah i have a question so you put string
33:40 - right in line eight
33:41 - yeah why didn't you import the string
33:43 - because you said it was necessary so
33:46 - like why did it work so basically
33:49 - um the reason that you're
33:52 - like your code was probably breaking
33:54 - when you were using
33:56 - um this new string method was that
33:59 - um java was trying to find like the
34:02 - string constructor
34:04 - but it couldn't because you didn't
34:06 - import like the stream class itself
34:09 - the reason that this works is that
34:11 - instead of using the string class
34:13 - directly
34:14 - i'm using us i'm basically using this
34:17 - um string literal method where
34:20 - instead of like doing like new string
34:22 - abcd
34:24 - i'm just like storing it directly as
34:26 - like double quotes
34:28 - abcd ah so if you're doing string a
34:31 - equals abcd
34:32 - then you don't need to import it right
34:35 - yeah
34:35 - exactly because java doesn't need to
34:38 - basically the compiler doesn't need to
34:40 - go like oh
34:42 - what's this new method and then freak
34:45 - out when it can't find that message
34:46 - basically
34:48 - okay see so
34:51 - um the next thing we're gonna do is just
34:55 - questions but just like practice
34:57 - questions but
34:58 - if you guys have um any sort of
35:01 - questions
35:01 - about like what we talked about this
35:04 - class and even like what we talked about
35:06 - last class
35:07 - um feel free to ask
35:16 - so could we actually go through a little
35:18 - bit of stuff from last week because i
35:19 - couldn't even really get it
35:21 - started to work and i don't know if it's
35:23 - just because they walked through replied
35:25 - too quickly and i'm not familiar with it
35:26 - or
35:27 - uh what the situation was just dumb
35:32 - um so you want to go through the
35:36 - workshop from last class yeah like just
35:38 - like one or two of them to sort of see
35:40 - how to set it up like
35:41 - if i was doing something wrong
35:44 - um yeah let me just quickly pull
35:48 - up the
35:51 - workshop so i can link mine if you need
35:54 - her
35:54 - sure um if you're comfortable
35:58 - with like all of us seeing your code
36:00 - yeah i don't care
36:01 - okay sweet thanks
36:04 - [Music]
36:07 - all right so i'm just gonna
36:10 - take a walk through the code um
36:12 - basically
36:13 - the idea was to just get you guys
36:15 - comfortable with um
36:18 - with just like declaring variables and
36:19 - stuff so
36:21 - yeah yeah the um yeah the
36:26 - basically um yeah just like
36:29 - knowing to like be able to go through
36:33 - this you have to just
36:34 - be familiar with like what um what like
36:37 - the primitive types we went over were
36:39 - and um
36:41 - sort of when should you use them and how
36:43 - can you declare them
36:45 - so for this first part um i'm seeing
36:51 - um we have the first part
36:54 - if i remember crosby is that we one need
36:56 - to declare like
36:57 - a variable called num rocks and then
37:01 - um instantiate it so this is correct so
37:04 - you can do like
37:05 - num rocks um and then you can also
37:08 - you numb rocks equals five you can even
37:11 - um
37:12 - sort of let me see if i can work this so
37:17 - there we go yeah i couldn't figure out
37:20 - how to do that either so
37:22 - it's not good um so how you work it is
37:25 - like you can go up here
37:27 - click on the um yeah click on the title
37:30 - and then just click up here
37:33 - yep so um you can do like num rocks like
37:36 - this so this is this is perfect so you
37:38 - can
37:39 - do like it num rocks semi colon num
37:42 - rocks equals five semicolon
37:44 - or you can even do like in numbers
37:47 - equals five and that would also be fine
37:50 - okay yeah i tried that it hadn't worked
37:53 - but
37:55 - yeah it's like there java is sort of
37:58 - like very picky about the syntax you use
38:00 - so like just make sure you um you don't
38:04 - have like spaces
38:05 - in your um variable name and you like
38:08 - you spell everything correctly
38:09 - and then you have the second thing then
38:12 - okay because like a different space in
38:14 - the second one
38:16 - yeah yeah so um
38:19 - next we have like rhymer correctly
38:23 - we wanted you to sort of like declare a
38:26 - symbol
38:27 - and um from class we talked about
38:31 - the um characters like the character
38:34 - type
38:35 - so yeah you have like string symbol
38:38 - equals a play emoji but um remember
38:41 - strings are
38:42 - um first off they aren't primitives um
38:45 - also like make sure you
38:48 - you can also like capitalize this um
38:52 - the general the thing we were looking
38:55 - for
38:56 - was um character
38:59 - emoji equals okay
39:03 - equals like whatever symbol you want so
39:04 - like and remember that for
39:06 - characters it's a single quote instead
39:09 - of a double quote and you can
39:10 - do like hashtag or something like that
39:18 - or i i named that wrong that was would
39:21 - be symbol
39:22 - but that was um that was what we're
39:24 - looking for
39:26 - okay yeah i guess i thought it was
39:28 - straight it was multiple letters and
39:29 - character i thought was just one letter
39:31 - or something
39:32 - um yeah like yeah
39:35 - it was it was supposed to be we were
39:37 - trying to like talk of
39:39 - like you to like write a character but
39:44 - like it's totally understandable if you
39:45 - follow the celestial stream
39:48 - okay yeah yep and then he helped me
39:51 - debug my code
39:53 - um yeah we don't have to go through all
39:56 - of this for this i just sort of wanted
39:58 - to see what i was
39:59 - wrong okay um
40:02 - this is yeah i think like for most of
40:05 - this is correct
40:07 - um just remember if you want true or
40:09 - false
40:10 - um this should be boolean so like okay
40:13 - yeah usually um okay yeah
40:17 - yeah usually for booleans the thing
40:20 - the thing also is um booleans are
40:22 - usually named like is this
40:24 - is that or like okay because they were
40:27 - like true or false
40:29 - um and then for this it would just be a
40:32 - it would be a double because you want um
40:35 - uh you want a decimal for it
40:38 - so doubles represent decimals in java
40:42 - okay yep um
40:45 - thanks so what's the difference between
40:46 - a double and a float
40:49 - so doubles are basically like
40:54 - so if you remember from last class
40:57 - um integers doubles and all these
41:01 - numbers
41:02 - they technically can't be infinite right
41:04 - like there's a certain limit
41:06 - to like the largest integer you can you
41:08 - can make
41:09 - and the smallest is your right so
41:12 - um the difference between a double and a
41:15 - float is a float can represent
41:17 - larger digits than doubles so they can
41:20 - represent like
41:21 - even like even bigger decimals basically
41:25 - um the technical answer is that
41:29 - doubles and floats are different like
41:32 - they have different storage size so if i
41:34 - remember correctly doubles are like
41:36 - eight bits or something like that or one
41:38 - byte large but floats are technically
41:40 - the larger variable
41:42 - which means they can store more data oh
41:45 - okay
41:46 - yep and can you help me debug my code
41:48 - right now
41:49 - i can give a link to it um
41:52 - is it possible that we can do it after
41:54 - class so that like
41:56 - so that we not like so i don't have to
42:00 - like show your code to everyone and we
42:01 - can have
42:02 - i thought this was after class um class
42:05 - ends at six so like
42:07 - can you wait six minutes okay
42:10 - thank you all right i'm gonna just skip
42:14 - all these beginner questions um
42:16 - we'll post the the like slides after
42:19 - class so um if you want to go over them
42:23 - feel free to like go over them on your
42:24 - free time um we have the answers
42:27 - in the slides but um here is also
42:31 - just like a bunch of different things
42:34 - that you can refer to for like if you
42:37 - want to like know more about
42:39 - all the stuff we talked about during
42:40 - class and then we also have like the
42:42 - feedback form and the submission form
42:44 - so i'm gonna copy and paste in chat
42:49 - so basically the general workshop is
42:52 - that
42:53 - um we have this story but we want you to
42:56 - sort of like we also want you to get
42:59 - like user input
43:00 - and like whatnot so um first off
43:04 - we have to like um we have to sort of
43:07 - create a scanner object
43:08 - so um how do you create one and how do
43:11 - you like
43:12 - how do you like give it the proper
43:14 - information um
43:16 - next is like we want you to
43:19 - have this scanner scanning like your
43:22 - friend's name
43:23 - and then store it in a string object so
43:26 - think about like
43:27 - how you would declare a string variable
43:30 - and then we've done the scanning for you
43:31 - so you don't have to really worry about
43:33 - that
43:35 - and then that's them we just have a
43:37 - little bit about
43:39 - sort of like how do you um create a
43:40 - string literal um
43:44 - and just like how you would do that
43:48 - and then finally like this is just a
43:49 - little bit more about like creating
43:51 - strings
43:52 - and then also um generating a random
43:55 - number
43:56 - so what um what class would you import
43:59 - for to like get a random number and how
44:02 - what method would you call
44:03 - if you generate that
44:08 - yep and then this is where you would
44:11 - store your random numbers
44:13 - and that's it so the general gist of
44:16 - this
44:16 - is like again um we're just trying to
44:18 - see if you understand
44:20 - like the string random and scanner
44:23 - classes
44:24 - um if you know how to like how to
44:28 - create an object um specifically like a
44:31 - scanner and a random object
44:33 - and then finally like if you if you know
44:36 - how to um
44:37 - how to store strings properly
44:40 - so any questions about this workshop
44:47 - all right and then finally um
44:51 - i know someone wanted to um stay back
44:54 - and wanted help to um
44:56 - to debug their code so i'm willing to um
44:58 - stay
44:59 - behind a little and work on you with
45:01 - that
45:02 - um otherwise i think we're going over
45:06 - bullions next week
45:07 - so i'll see you guys next weekend

Cleaned transcript:

all right now we're recording so um for this lesson we'll basically be going over like um basic how to use objects in java and stuff like that so we'll be talking about like what objects are and um what like classes and instances are and also um i'll be going over to um two pretty basic classes in java that you'd find pretty helpful so first off um what is an object an object is basically like it's just a thing in java that's kind of separate from the concept of a variable so like a variable holds a value but object is kind of like a like an object in your life so like a bottle or like or just like a thing um it's basically an instance of a class so class is kind of like a blueprint on how you can like make an object like what this object does um what um what information can it hold and the object is like an actual instance of that class so um i guess the best way to put it is like for example um if you look down below um you have something like a class can be a fruit or a book and the objects would be like apple oranges and bananas and a book would be like jane eyre or like the great gatsby or like the hunger games so like the classes sort of describe like what an object can do and what sort of um stuff it has so like another example would be a class can be like a dog and the object would be like like um a puppy or something like that so a dog can bark um they could have like different colored birds and then like the puppy in real life would be like the um the instance of a dog that would actually like bark and you can actually see the color of the skirt so something like that and then in in java like you can create objects by let me move this upwards um you can create objects by just doing like class name equals new class and then you have to have like the parentheses at the end so for example you can have something like fruit apple equals new fruit or book jing error equals new book so the most important thing is like just like with variables um so like this part is the variable so you have like the class that describes this type so like the variable apple is of type through but this second part is how you're instantiating that object so it would equal a new fruit um any questions about this so far okay and um i have one real quick sure so downward has like book jane eyre new book um there's so jane eyre up top is capitalized in space and it's one word with just a lowercase down there do you not use the space when you're doing a class or um so basically for when it comes to like naming variables in java um the general you can't have any spaces in your names so um it has to be all one word and you can like have different capitalization so like the e is capitalized or something like that as long as it's one word then it's a proper variable name so that's why we have um we have the space missing in january um technically for variables you can like capitalize the power like however you want so like the j could have been capitalized but um in java it's usually good practice you have your um variable name start in lowercase and then your class name start with uppercase does that um yeah thanks um and if you guys have like any other questions or like you kind of want me to go over this or you're not like sure what's or like you're not really getting what's like what i'm talking about feel free to like tell me to like go like go back or like or um or just drop any questions all right so next slide um what so basically why i'm talking a lot about like objects and stuff is um i'm trying to get you sort of like objectoriented programming so objectoriented programming is basically a type of program you can do that's structured around objects and classes so if you've um looked through like the workshops and all the demos we did last class um you'll notice that literally everything in java is structured around objects and classes so like even your main method is in a class and it's like part of the main class and things like that so java is like a really good language to learn um olp or objectoriented programming because everything about it is centered around objects and classes um it's also i'm honest like we also there's also like procedure programming and that's basically just saying like all the um basically all the stuff you do in java is operated on by method so like you it's basically um java is a language that's structured around like making methods and like passing data into it um you don't have to worry too much about like knowing exactly what like um procedural programming is um it's more of that you should understand that oop is a way of programming where you have like concepts like objects and classes and basically um a lot of what you do in java is basically creating new classes um passing around objects and just like manipulating those to make a program and yeah like again in op like objects can contain data and methods so basically um in your classes you can have both like different types of data like oh what if i have a class dog like what color is it for what's the dog's name stuff like that but you can also have methods like a dog can fart a dog can run and whatnot all right so um um any questions all right so next um i'll just be going over like the four basic concepts of oop um you don't really have to um understand exactly what this is right now it's a these are a little bit like advanced but just like keep these in mind as you're like as you're learning java so um basically the four pillars of oop are abstraction encapsulation inheritance and polymorphism abstraction is basically um you only want to show the user the stuff that they need to know so like the the general like the general rule that goes with this is like try to keep your data as private as possible you don't want people like accidentally manipulating um or accessing methods that they shouldn't have access to so all users should only be able to see the stuff that they need to know um is basically hiding sensitive data from users so like making things private and um inheritance is basically like the cons it's basically like subclasses and secret classes so like super classes can inherit or subclasses can inherit methods and data from like super classes and went on and then finally polymorphism is the ability for an object to basically um take different forms so it's kind of like um grouping different objects that have like similar features together so for example a cat and a dog are both types of animals but um and they can like both make noises right except a cat can like meow but a dog can burp um these are a little bit like these it's these are a little bit complicated if you don't if you don't um understand classes and stuff so like right now i would say like um hobbies in mind know that they exist but will definitely explain it or you'll understand it a lot better once we get into the later parts of this this course so like in by like near the end of the course you should be able to understand it but right now like don't worry if it's going a little over your head um just know that like these like these four concepts exist and then this one is also pretty important so like that so basically java is a pass by value language and there's a difference between um pass by reference and pass by values so past my reference is basically like you pass in the reference of an object so a reference is like it's basic if the the powerpoint says it's like a subdirection directions to somewhere in the memory but it's a lot simpler than that it's basically a reference is something that points to someone's memory so um let me see if i can draw this out so last class we talked about um how variables store variables for primitive stored numbers right but um when it comes to like reference objects you have they instead of storing numbers they sort addresses so let me see can you guys see like what i'm drawing on here yes we so basically um when you have a variable let's say i have a variable called a um if i assign it to a primitive type so like a in a equals one a will hold just the value one but um what java does is basically if i have a class a so instead of in i have a class like dog a equals new dog um instead of having like a store dog in here what i would do is it'll do something like it'll point to an object called dog so it will store like if dog was stored in the address like 0101 it will store the address over here and they'll just point these on so that's what um they're talking about these slides what it's like about references basically when you when we have like how do i clear when we have like code like this so fruit apple equals new fruit um and they basically it's basically saying that for reference variables the apple is basically pointing to the fruit object um does anyone have any questions about that because i know that can be a little confusing so like yep um let me get this straight um a reference is a passing by reference is where you type a class or any other reference like a string and uh it gets another object and a type c and i like it gets the information of that object into this one and the value is just uh i'm not sure yeah i'm confused it's all good um yeah so basically um what i'm talking about sort of like java has two types of data so last class we talked about primitive types right they're basically like integers um integers doubles booleans and characters they're all like values that can be that can be um stored as numbers so like you can have an integer two or in like a double 3.5 but another type in java is called our reference type and that's sort of what i'm trying to get at here so like um a reference type is everything else everything else in java is basically like pointing to a different object so like a dog or something like that um basically when it comes to pass by reference um passed by like basically what i talked about is sort of like what a reference is a reference is sort of like a variable that points to like a different object so um if i have like if i have like root apple equals new root um in memory what that would look like is that i have this variable called apple but it points to the actual like fruit object that's supposed to be referring to and the difference in that is sorry you get a question okay like feel free if like if this is sort of confusing like feel free to just interrupting us well so basically what i understood from that is um the reference are like the ever like everything else like the strings and classes they point to another object however the values would unders from that they just store a value inside just only a value inside of them without pointing in any direction yeah yeah that's yeah that's correct so basically um what i'm getting at is sort of like just like you said like um references point to like a different part of memory so um what they actually like they're technically their value would be like whatever like memory address that fruit is at but like you can basically think about as apple is pointing to the fruit object on the other hand like there are primitive values like if i have like boolean x equals true um what this stores is basically i'll have a variable x but instead of going to anything it'll actually store like a true value so one so what's the difference between a value and a primitive primitive is just like a type of value so it's just like any value that can be represented by a number so like okay yep so like bullying to be one or zero then there's ant double float yep so exactly so primitives are types of valleys that can be basically directly translated into numbers so like just like you said um true and false can be zero um one and zero characters can be like any number on the ascii table and then like integers doubles like those are those are actually numbers but on the other hand um how java stores like classes and objects is they can't store the class and object directly into the variables they can only store the address of where that class is in memory so basically they just point to where that object is and that's all they they can do so that that basically relates to pass by reference in that like when you pass in like the the idea of pass by reference is when you pass in the reference to like a method um you're passing in like the actual address of wherever that object is but on the other hand when you pass by value um when you pass in like the when you pass in the um the data into like the method it will actually make a copy of that value into another place in memory so if you technically won't be like affecting the original variable this can be like a little confusing to like explain just by words so like hopefully like this gif at the bottom helps where it's like when you're passing by reference you actually pass in the actual like object itself but when you pass by valley you actually make a copy of that object and then pass the copy in um anyone have like other any other questions about that or like you want me to sort of clarify anything see all right so um next we can talk a little bit about like specific objects and classes that you can use in java so the first one the most common one is string objects so strings are um they're objects and they basically are a sequence of characters so words um they all have like you can access their attributes with using string.attribute and you can access the list of messages using stringout method um basically if you want to access the general rules if you want to access information to like an object you have to put the dot and then you can like put a variable name or like a method name and then um you can that'll be basically accessing that specific variable or method just remember for methods you have to like have the parentheses at the end so you can call the method um just like with other classes you can make a new string using like string name equals new string and you can also input like whatever text you want so um just be aware like for if you want to like create a new string that's like a specific word make sure you surround the word with double parentheses um yeah and it's not it's not exactly recommended because because you're basically like you're basic you can basically create copies of like the same string so in this example you have like string a equals new string abcd string b equals new string abcd however a would not equal b um and basically the idea is sort of like it's exactly what i talked about um in the last slide so basically you have like they have a is pointing to a b c d this string in memory however like if you like do another string b equals new string abcd b is pointing to another string abcd that's in like a separate part of memory so when you do this a equals b they're actually comparing the values of a and z so say like this a b c d is in the memory address like one and this one is in one one so the value of a over here would be one because it stores the address of this first string object the value of b would be one one because it stores the address of this second string object so they technically wouldn't be equal so anyone have like questions about that the better way to just like to just make a string like the same idea would just be like string a equals a b c d so it's just like how you um how you would instantiate like a a primitive type you would just have it's just like a character with but like you put it around double quotes instead and you use the string type um and sometimes like people get confused like it's so easy to create a screen like this that they'll think it's a primitive but this is still technically the same idea as this string a equals new string abcd so there's a way to sort of create strings without having to use this but just remember like the same thing would apply that like a would not equal b because there are two different objects and yeah this is the way of making that would just be like that though that way of making a string is just like using like creating a string literal so um yeah java automatically just keeps these strings in this like they keep it they keep up a lot of objects um in this place called the heap in memory and they also do a lot of like fancy stuff with string specifically that'll make it kind of work like a primitive and then um these are just a list of different string methods that you can use so um the first one is just getting a substring um if you like if we have this string called like hello hi equals hello um get making a substring would just be like getting one part of that string so um it would be this like this line would just be getting like the first two characters of a string so h and e um if you guys are familiar with with um a rate indexing the basically the places and strings start at zero so the the first like letter of the string would be like the zero letter in a sense um any questions about that all right so um just remember that it basically gets everything like starting from the first index all the way up until but not including so the second parameter and then you can also do like two uppercase which will make everything capitalized um there's also another method called q lowercase which will lowercase everything um you can if you want to like actually check stream quality um i would really recommend you check like use this dot equals method so actually for all your all your objects you should have a method called dot equals and it will actually check for um for the value equality of the object so um if we go back here if we instead of using like a equals equals z we use a dot equals b it'll actually return like the correct the correct thing that these two strings are like technically equal like they have the same letters basically so it's good practice to use that equals instead of like equals equals for any sort of objects that you have and second is stop me which is just the length of the string and then finally um index of which is um the index of like whatever substring you pass in so in this example you have like um index fdl it will return the first occurrence of like yell in this group in um hello in hello and then it'll um return one because e is the first index where it's the it's the character or e is at the um first index of the string any questions about this all right so the next object we're going to be going over is the random object so this will help you basically generate um random random objects so you can generate like random random like decimals or like random integers stuff like that so um just be sure if you're using a random class or like for for like most classes that you'll you'll have to um you have to like refer to you have to import it first at the very top of your code so for a random object you have to um type in import java.youtube.com at the very like the very beginning of your code um it's like basically this oh toe job like hey i'm using this random class um and you're basically giving the compiler the blueprint you like this is what the class does this is like um all the methods the class has basically so um you can basically use it in sort of like sort of like the same fashion as this example so like you can um do like random dot next in um to like get the next random integer so just like the first thing you'll have to do is like create a new random object and then next would just be like um calling next in and then it will take in like the um sort of maximum integer that you want yeah and like here are like just two methods you can um that would be pretty helpful so like next it would take in like the would basically give you a random integer if you give it like a maximum value it will basically take everything from zero um up to but not including the um the number you pass in and then um for next double um it'll basically um give you a random decimal between 0 and 1. all right so the last the last um class we're going to be talking about are scanners so scanners are basically how you're gonna um you're gonna basically take in user input so um again just like with random classes make sure you write um import java.util.scanner on the top of your on the top of your um java code so that java will know like what you're using um and yeah so the general thing is just like um you declare a new scanner object and you create a new scanner make sure you pass in system.in so system.n will basically there's like there's a lot basically it'll tell it'll tell you um that you're using sort of the standard system input um there's a lot of things with like java um streams and stuff but basically every time you pass in a new scanner you sh you have to um pass in a system back in within like the constructor so basically every time you create a new scanner make sure like you're using this line specifically otherwise it might get a little um sketchy and then um basically a scanner will call you can call like the a method called like next line which will get like the next line the user enters yep so let me see if i can sort of demo this so basically um for scanners what you can do is like the general rules like scanner my um you'll have to basically pass in you'll basically create a new scanner by like declaring a scanner variable that stores a new scanner that holds this system.in so make sure like you you have this line first so create the scanner object next would be like my yo yo you can call like this method in my scanner that next line which will basically get the next line the scanner inputs and it'll basically return something called as true um it will return a string so you can do like string a equals my scanner dot next line and then we can try printing that out yeah you'll basically have to just memorize this line first um there's once we get to like creating your own classes and stuff and we'll talk about constructors and like and all that this will kind of make a little more sense but for now just like just like memorize this so um this is basically what you have to do so then if we run this wrong library um it will first print out hello world then it will create a new scanner and next line will basically be like java sitting here just waiting for me to input the next lines so i can do like a next line like this and when i press enter um next line will basically store all that information into string and then java will just print it back out um any questions about this yeah i have a question so you put string right in line eight yeah why didn't you import the string because you said it was necessary so like why did it work so basically um the reason that you're like your code was probably breaking when you were using um this new string method was that um java was trying to find like the string constructor but it couldn't because you didn't import like the stream class itself the reason that this works is that instead of using the string class directly i'm using us i'm basically using this um string literal method where instead of like doing like new string abcd i'm just like storing it directly as like double quotes abcd ah so if you're doing string a equals abcd then you don't need to import it right yeah exactly because java doesn't need to basically the compiler doesn't need to go like oh what's this new method and then freak out when it can't find that message basically okay see so um the next thing we're gonna do is just questions but just like practice questions but if you guys have um any sort of questions about like what we talked about this class and even like what we talked about last class um feel free to ask so could we actually go through a little bit of stuff from last week because i couldn't even really get it started to work and i don't know if it's just because they walked through replied too quickly and i'm not familiar with it or uh what the situation was just dumb um so you want to go through the workshop from last class yeah like just like one or two of them to sort of see how to set it up like if i was doing something wrong um yeah let me just quickly pull up the workshop so i can link mine if you need her sure um if you're comfortable with like all of us seeing your code yeah i don't care okay sweet thanks all right so i'm just gonna take a walk through the code um basically the idea was to just get you guys comfortable with um with just like declaring variables and stuff so yeah yeah the um yeah the basically um yeah just like knowing to like be able to go through this you have to just be familiar with like what um what like the primitive types we went over were and um sort of when should you use them and how can you declare them so for this first part um i'm seeing um we have the first part if i remember crosby is that we one need to declare like a variable called num rocks and then um instantiate it so this is correct so you can do like num rocks um and then you can also you numb rocks equals five you can even um sort of let me see if i can work this so there we go yeah i couldn't figure out how to do that either so it's not good um so how you work it is like you can go up here click on the um yeah click on the title and then just click up here yep so um you can do like num rocks like this so this is this is perfect so you can do like it num rocks semi colon num rocks equals five semicolon or you can even do like in numbers equals five and that would also be fine okay yeah i tried that it hadn't worked but yeah it's like there java is sort of like very picky about the syntax you use so like just make sure you um you don't have like spaces in your um variable name and you like you spell everything correctly and then you have the second thing then okay because like a different space in the second one yeah yeah so um next we have like rhymer correctly we wanted you to sort of like declare a symbol and um from class we talked about the um characters like the character type so yeah you have like string symbol equals a play emoji but um remember strings are um first off they aren't primitives um also like make sure you you can also like capitalize this um the general the thing we were looking for was um character emoji equals okay equals like whatever symbol you want so like and remember that for characters it's a single quote instead of a double quote and you can do like hashtag or something like that or i i named that wrong that was would be symbol but that was um that was what we're looking for okay yeah i guess i thought it was straight it was multiple letters and character i thought was just one letter or something um yeah like yeah it was it was supposed to be we were trying to like talk of like you to like write a character but like it's totally understandable if you follow the celestial stream okay yeah yep and then he helped me debug my code um yeah we don't have to go through all of this for this i just sort of wanted to see what i was wrong okay um this is yeah i think like for most of this is correct um just remember if you want true or false um this should be boolean so like okay yeah usually um okay yeah yeah usually for booleans the thing the thing also is um booleans are usually named like is this is that or like okay because they were like true or false um and then for this it would just be a it would be a double because you want um uh you want a decimal for it so doubles represent decimals in java okay yep um thanks so what's the difference between a double and a float so doubles are basically like so if you remember from last class um integers doubles and all these numbers they technically can't be infinite right like there's a certain limit to like the largest integer you can you can make and the smallest is your right so um the difference between a double and a float is a float can represent larger digits than doubles so they can represent like even like even bigger decimals basically um the technical answer is that doubles and floats are different like they have different storage size so if i remember correctly doubles are like eight bits or something like that or one byte large but floats are technically the larger variable which means they can store more data oh okay yep and can you help me debug my code right now i can give a link to it um is it possible that we can do it after class so that like so that we not like so i don't have to like show your code to everyone and we can have i thought this was after class um class ends at six so like can you wait six minutes okay thank you all right i'm gonna just skip all these beginner questions um we'll post the the like slides after class so um if you want to go over them feel free to like go over them on your free time um we have the answers in the slides but um here is also just like a bunch of different things that you can refer to for like if you want to like know more about all the stuff we talked about during class and then we also have like the feedback form and the submission form so i'm gonna copy and paste in chat so basically the general workshop is that um we have this story but we want you to sort of like we also want you to get like user input and like whatnot so um first off we have to like um we have to sort of create a scanner object so um how do you create one and how do you like how do you like give it the proper information um next is like we want you to have this scanner scanning like your friend's name and then store it in a string object so think about like how you would declare a string variable and then we've done the scanning for you so you don't have to really worry about that and then that's them we just have a little bit about sort of like how do you um create a string literal um and just like how you would do that and then finally like this is just a little bit more about like creating strings and then also um generating a random number so what um what class would you import for to like get a random number and how what method would you call if you generate that yep and then this is where you would store your random numbers and that's it so the general gist of this is like again um we're just trying to see if you understand like the string random and scanner classes um if you know how to like how to create an object um specifically like a scanner and a random object and then finally like if you if you know how to um how to store strings properly so any questions about this workshop all right and then finally um i know someone wanted to um stay back and wanted help to um to debug their code so i'm willing to um stay behind a little and work on you with that um otherwise i think we're going over bullions next week so i'll see you guys next weekend
