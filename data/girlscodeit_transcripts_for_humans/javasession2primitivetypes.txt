With timestamps:

00:00 - all right hey guys my name is jessica
00:03 - and i'm a senior cs major at university
00:06 - of maryland
00:08 - so you guys are in good hands when it's
00:11 - coming to ap uh review hopefully
00:15 - um and if you want to introduce yourself
00:18 - that
00:18 - feel free to
00:22 - i am a junior in high school and i've
00:24 - taken several
00:25 - different computer science classes i'm
00:27 - the president of my school's girls who
00:28 - code and
00:29 - yeah sweet so um today's just
00:33 - we're going to be learning about um just
00:36 - variables and primitive types
00:37 - in java so basically
00:42 - my computer doesn't freeze um we're just
00:45 - gonna be going over like what's a
00:47 - variable
00:48 - how java handles variables like um
00:50 - primitive versus reference types
00:52 - because there's like a little bit of a
00:54 - nuance between the two
00:55 - types different types of data types in
00:58 - java and then we're going to go over
00:59 - like
01:00 - all the primitive types what you can do
01:02 - with them and stuff like that
01:05 - so first off what is a java variable
01:08 - so um a job a variable is basically
01:12 - something
01:12 - that you can like that's used to
01:14 - basically store information so like
01:17 - sort of like a variable in math
01:18 - basically um for example we have like
01:21 - h equals six um basically that's just
01:24 - saying
01:25 - in this variable called age we're
01:27 - storing the number six
01:29 - um for so when it comes to variables
01:33 - there's two types of there's two
01:34 - different terms that you want to um
01:36 - that you want to keep in mind the first
01:38 - one is
01:40 - declaration so basically um
01:43 - when you declare a variable you're just
01:45 - saying this variable exists
01:47 - so i just pull up my notes over here
01:51 - in java if you say like in
01:54 - age um this is sort of just declaring a
01:58 - variable
01:59 - where it's just i have this um variable
02:01 - that's an integer called
02:02 - age and it just exists i don't know what
02:05 - like the
02:06 - the value is exactly but it just exists
02:09 - in like my code
02:10 - um if i then go like age
02:14 - equals six that's called initializing it
02:17 - and what that basically means is i'm
02:18 - giving this variable a value
02:21 - so declaration is first saying um this
02:24 - variable exists
02:25 - and this is like what it's called um in
02:28 - initialization
02:29 - is giving that variable of value
02:31 - [Music]
02:33 - next um why do we use variables so in
02:36 - your code um there are going to be times
02:38 - where you just want to
02:39 - store information and then use it later
02:41 - on
02:42 - so you want to use variables because
02:44 - first it allows you to like
02:46 - change your code easily and you can like
02:49 - basically hold information your code and
02:52 - it's also useful because like if that
02:55 - value of the very like
02:56 - of the variable changes um you can sort
02:59 - of
03:00 - um it'll change like it'll basically um
03:04 - be easy to change information in your
03:06 - code
03:07 - without um without having to do it by
03:09 - hand basically
03:11 - [Music]
03:13 - all right so next um we're just going to
03:16 - go over
03:16 - primitive versus reference types so
03:20 - for this lesson we're focusing on
03:21 - primitive types and primitive types are
03:23 - generally
03:24 - types that you could represent with
03:26 - numbers what i mean by that
03:28 - is like for example integers which are
03:31 - whole numbers
03:32 - booleans which are true or both but you
03:34 - can sort of represent
03:35 - you can like represent them in number
03:38 - form with like zeros and ones
03:40 - um and characters which if you guys are
03:42 - like familiar with the ascii chart
03:44 - that's like you can basically represent
03:47 - single symbols
03:48 - with numbers um primitive types are
03:51 - immutable which means that they can't be
03:54 - changed directly
03:58 - it's sort of hard to explain right now
03:59 - but you'll get a better um
04:02 - you'll get a better grasp of what
04:04 - immutable means
04:05 - um when you get to like
04:08 - objects and like class types and then
04:11 - finally the default value for primitives
04:13 - is zero
04:14 - so if i don't initialize a primitive um
04:17 - it will automatically be initialized at
04:19 - zero
04:22 - and second reference types are basically
04:24 - everything else
04:25 - so for example any classes you make in
04:27 - java arrays
04:28 - and strings and some are mutable
04:32 - which means they can be changed and
04:33 - others aren't um it just depends on the
04:36 - class type
04:37 - and then finally um the default for
04:40 - reference types
04:41 - is no so if you don't specifically
04:44 - assign
04:44 - a reference like an object or anything
04:47 - it'll just be
04:48 - um the value of it will just be no
04:51 - [Music]
04:53 - so um oh yeah by the way like if any of
04:57 - you have questions feel free to just
04:58 - interrupt or um
05:00 - just throw in a chat and i'll try to me
05:02 - and diana can
05:03 - try to answer it do the best of our
05:04 - ability
05:06 - so um as i said primitive types first
05:10 - represent by numbers um the three major
05:13 - types we're going to talk about are
05:14 - first
05:15 - number types which are basically
05:17 - integers um
05:18 - doubles which are decimals um the second
05:22 - one is characters which are symbols
05:24 - and then booleans which is true and
05:25 - false and then again
05:27 - default value is zero
05:31 - and then this is just another list of
05:33 - different kinds of primitives
05:35 - so first is in which is integer these
05:38 - are whole numbers like negative 10
05:39 - or um 256. second one
05:43 - is double which are decimals so like
05:46 - 7.56 or 1.2 and then finally
05:50 - booleans which are just true and false
05:54 - so first off integers um integers are
05:56 - whole numbers
05:57 - again um these are just a bunch of
06:00 - different examples of code numbers
06:02 - and then um you declare them by saying
06:05 - in
06:05 - number equals whatever value one given
06:09 - and the general um operations you can do
06:12 - with them is like you can add
06:13 - subtract multiply divide
06:16 - [Music]
06:17 - and then here's just an example of like
06:20 - how you can declare a integer type
06:24 - so um the most important part is just
06:27 - in general for variables in java you
06:30 - have to
06:30 - tell java which type the variable is so
06:34 - like if i'm declaring an integer i have
06:36 - to tell
06:37 - java first that it's an integer called
06:39 - range
06:40 - so in range equals whatever value
06:44 - and then you can just print it out or
06:45 - something like that
06:48 - so next um doubles doubles are just
06:50 - decimals
06:52 - so 1.5 3.33 etc
06:55 - um just like with integers you have to
06:57 - use you have to
06:58 - declare it like double x equals 7.5
07:02 - um and like with integers you can add
07:05 - subtract multiply and divide
07:08 - and um this is like the it's generally
07:12 - the same with um
07:13 - what declaring variables in java so just
07:16 - type
07:17 - variable name equals whatever value
07:22 - and then we also have characters so
07:25 - characters
07:26 - are single letters or symbols so this
07:29 - can be
07:30 - anything from like the percent sign to
07:32 - like the letter a
07:33 - or um the number one but
07:36 - most importantly for um for characters
07:40 - you have to surround them with like the
07:41 - single quotes
07:43 - so if you notice here all of these are
07:45 - single quotes if it's double quotes
07:47 - it'll become a completely different type
07:50 - so um just like with other variables you
07:54 - have to like declare the type so char
07:56 - c equals single quote a
07:59 - so um it can be a little confusing
08:03 - just having like i'm saying like
08:05 - primitive types can
08:07 - be are like types that are represented
08:08 - by numbers and it can be a little
08:10 - confusing because how can you represent
08:12 - like
08:12 - characters with numbers and
08:16 - you can basically do that through
08:18 - something called the ascii chart
08:20 - so this is basically a list
08:23 - of like all the possible symbols um that
08:26 - you can have
08:27 - and they all are assigned a number
08:30 - so um even like things like this space
08:34 - bar or like
08:35 - or um starting of a text or ending of
08:37 - the tags
08:38 - these are they all have their own number
08:40 - value
08:42 - so um that's how like what
08:45 - that's why like characters can be
08:47 - primitives because
08:49 - they kind of have number values based
08:51 - off of the ascii table
08:55 - and then finally we have booleans
08:57 - williams are just true false expressions
09:00 - and in java the type is directly just
09:03 - called
09:03 - boolean so boolean choice equals true or
09:06 - false and um if
09:08 - any of you guys are familiar with python
09:10 - just make sure in
09:12 - java the t for true is lowercase
09:15 - not uppercase and then um
09:18 - you can do like a lot with booleans like
09:21 - um making conditionals and stuff and
09:22 - that's something that we'll be talking
09:24 - about in our next lesson
09:28 - and then here's just an example of how
09:30 - you would declare it
09:31 - um basically the same rule as with like
09:34 - all the other
09:35 - primitive types and then finally um
09:39 - we're just going to talk about something
09:41 - called constants
09:43 - so um a constant is basically like a
09:46 - variable that you never want to change
09:48 - so um for example constance
09:51 - and like and other fields of stem would
09:54 - be like
09:55 - things like pi or like um
09:59 - trying to think like a of another
10:01 - constant or like the um
10:03 - or different like constants in like when
10:06 - you
10:06 - in like chemical like in chemistry and
10:09 - stuff like that
10:10 - so these are just numbers that that just
10:13 - never change and that you can't change
10:16 - so we declare constants by using this
10:19 - keyword called
10:20 - final so if you put final in front of
10:22 - like your variable declaration
10:25 - python or java will just be like you
10:28 - can't change
10:28 - this um this variable in other parts of
10:32 - your code
10:36 - and then finally um i'm just gonna
10:39 - go over like different things or like
10:41 - different aspects
10:42 - of um primitive pipes
10:46 - [Music]
10:50 - so um i'm just gonna open this and then
10:53 - we're gonna
10:56 - talk about it
11:05 - all right so um basically
11:08 - for like four different um primitive
11:11 - types
11:12 - you can do a bunch of different
11:13 - operations so for example if i have
11:17 - in a
11:20 - equals 10 and then if b equals
11:24 - 15. um you can do things like multiply
11:27 - them so
11:28 - this would print out 150.
11:34 - or you can like add them you can
11:35 - subtract them like your basic
11:37 - math operations um you can um
11:42 - so when when it comes to like
11:46 - dealing with like integers and doubles
11:49 - like as long as you stay within the same
11:51 - type
11:52 - um all of these math operations are
11:54 - pretty like
11:55 - they're pretty um i would say like
11:59 - they're
12:00 - they're pretty they're pretty like they
12:03 - they do
12:05 - like it they they kind of like follow
12:09 - the math rules
12:10 - however like it's kind of it gets kind
12:13 - of sketchy once you get to like
12:15 - adding characters together or like
12:18 - adding different types together
12:20 - um for example if i change this to
12:23 - a double
12:27 - so um what
12:31 - what java it will do is because all of
12:33 - these um primitive types
12:35 - are kind of um they're kind of all
12:38 - just like the same kind the same number
12:41 - type underneath
12:42 - java will actually automatically convert
12:45 - the integer to a double
12:48 - so if i do this this should print out a
12:51 - double
12:53 - so as you can see it didn't print out
12:55 - 150 you printed out 150.0
12:58 - um when it comes to automatically
13:00 - casting
13:01 - a few different primitive types java
13:03 - will always
13:05 - um it will always cast you like
13:08 - the larger type so basically the type
13:11 - that can give you more information
13:13 - for example like as an integer you can't
13:15 - really represent 1.5
13:17 - because integers only can only represent
13:20 - whole numbers
13:21 - so um what java will do underneath is
13:24 - because
13:25 - integers can't represent as many values
13:27 - as a double ten
13:29 - they'll just pass this in a into a
13:32 - double 10.0
13:33 - and then i'll multiply 10.0 by 15.0
13:38 - so and this sort of like automatic
13:41 - casting doesn't work the other way
13:43 - around
13:44 - so if i have nc equals a times b
13:47 - java will actually um not like it and
13:50 - it'll throw
13:51 - a compiler error because i'm trying to
13:53 - convert
13:54 - or i'm trying to automatically convert a
13:57 - double
13:57 - which is like the larger um the larger
14:01 - type
14:02 - to like a smaller type
14:05 - so this would actually throw a compiler
14:07 - error
14:11 - yeah i know tell me like incompatible
14:13 - heights
14:14 - um it's just afraid that i'll lose
14:18 - information when i convert downwards
14:22 - and then you can even like because like
14:25 - primitives are all technically numbers
14:27 - you can even do things like adding
14:28 - characters together
14:30 - so char a equals a
14:33 - and then i have chart b equals
14:37 - percent sign i can't even do something
14:41 - like
14:42 - a times b
14:47 - and this should actually give me like an
14:50 - integer return
14:51 - so it'll actually print something out
14:54 - like
14:55 - um 3589 because
14:58 - it it will actually convert all of these
15:01 - um
15:01 - all of these characters into numbers
15:03 - according to the ascii table
15:06 - and then like return an integer
15:09 - um when it comes to primitives so like
15:12 - in math and stuff um usually
15:17 - things like whole numbers and like and
15:20 - um decimals are they're technically
15:22 - infinite right
15:23 - um they're technically an infinite
15:24 - amount of numbers
15:26 - but um in java because variables are
15:29 - stored in spaces of memory
15:31 - and variables argue like can only be a
15:34 - certain size
15:35 - there's actually things like the maximum
15:38 - value of integers at a minimum value
15:41 - and this is all because like java gives
15:44 - you only a certain amount of space in
15:45 - memory
15:46 - after you store these these numbers
15:49 - so if i like use something like
15:52 - in a equals it is
15:56 - not in
16:00 - i remember correctly this will actually
16:04 - print out
16:08 - hopefully
16:21 - yeah so integer it's actually integer
16:24 - that max value
16:26 - this is a constant that's just the
16:28 - maximum value
16:29 - of integer
16:34 - and like the same goes for like doubles
16:36 - and
16:37 - whatnot um as you can see it's like a
16:39 - really large number so hopefully like
16:41 - you won't go past this but um
16:45 - if you like if this is just like
16:48 - basically keep in mind that
16:50 - integers and doubles and like all of
16:53 - your variables in java
16:54 - they don't have infinite storage
17:06 - and then finally um
17:09 - let me check my super secret demo notes
17:13 - finally um when it comes to converting
17:16 - things like um
17:18 - doubles to integers um what usually when
17:21 - you like round a decimal to like
17:23 - a whole number it'll be that like you'll
17:26 - round anything like above five to like
17:29 - two or above point five to and then like
17:32 - point four and below would be like
17:35 - would be zero right but when it comes to
17:38 - converting
17:39 - um two integers
17:43 - um what java will actually do it also
17:46 - cut
17:46 - everything off after a decimal place so
17:50 - something like 7.9 should actually round
17:53 - down
17:54 - q7 because what java is doing
17:57 - is it's just ignoring everything after
18:00 - the decimal
18:01 - and it's just saying this is just seven
18:04 - so
18:05 - basically um what can happen is you'll
18:08 - have something like
18:10 - um 11 divided by
18:14 - like or um
18:17 - you'll have something like 11 divided by
18:19 - 5.
18:22 - or let's do something more simple like 3
18:25 - divided by 2.
18:28 - and this will actually give you one
18:31 - instead
18:36 - so um do you have any questions about
18:39 - like
18:40 - or do you guys have any questions about
18:42 - sort of everything we talked about so
18:44 - far with primitives
18:50 - sweet all right and finally um
18:54 - we're just going to go over the a few
18:57 - like practice questions
18:59 - um do you guys want the i guess like
19:02 - we're going to go over the ap stuff and
19:05 - diana if you want to
19:06 - take over yes that's good
19:12 - [Music]
19:15 - so do you want to just go to them or get
19:16 - me yeah you have them up so that's good
19:21 - okay so this question is asking
19:24 - what in a equals 10 and
19:28 - double b equals 1.0 and if we multiply
19:31 - them in a print statement
19:33 - what will it current so if anybody would
19:35 - like to
19:36 - answer and then if we want i can explain
19:39 - to after somebody gives it a go
19:52 - somebody said b in the chat and that is
19:54 - correct
19:56 - because we have an integer multiplied by
19:59 - a double
20:00 - so we're going to get 10.0 as our output
20:11 - um so for this question
20:15 - we are doing what we did in the previous
20:17 - question but saving it
20:20 - into a variable first so we're saying
20:23 - int c equals a times b
20:26 - and then we're printing out c so would
20:29 - this be the same as last question
20:31 - or does anybody think it'd be different
20:45 - a a is correct because you can't
20:48 - um just cast down without explicitly
20:52 - casting down won't automatically
20:56 - go to an integer if it's a double
21:00 - so that's good okay so now we have two
21:04 - characters for this one
21:06 - capital a and lowercase b and now if we
21:09 - want to print
21:10 - the addition of the two what do you guys
21:12 - believe will print based on what we've
21:14 - learned
21:26 - hey you think
21:30 - um
21:34 - what do you think jessica
21:38 - um i would say
21:43 - this one's a little tricky i would say
21:45 - it's
21:46 - c that's what i was also thinking as
21:49 - well just because normally
21:51 - you're adding characters they just like
21:54 - sit next to each other um
21:58 - right yeah so basically
22:01 - when it comes to sort of adding
22:03 - characters together
22:05 - um what java will do is that
22:09 - it will actually convert the characters
22:11 - into numbers
22:12 - so like remember back in the demo um
22:15 - i tried to like multiply two characters
22:18 - together and it actually came out with a
22:19 - big number
22:20 - so what would do is it'll look at this
22:23 - character a
22:25 - and then convert it into something based
22:27 - off or like a number
22:28 - if i remember is like 63 or something or
22:31 - 65
22:32 - based off of the ascii table i know add
22:35 - these two together as numbers
22:38 - so come out as 163
22:42 - yes so it's different than what we would
22:45 - like intuitively think but that's how
22:47 - java handles it
22:52 - yep
22:55 - sweet so um finally we just have
22:59 - just workshops and and practice frq
23:02 - questions
23:04 - so um just gonna copy this
23:08 - first um this is just a practice
23:12 - ap frq um if you're interested in doing
23:15 - it
23:16 - we also have a workshop which is kind of
23:19 - like
23:19 - it's kind of like ungraded homework so
23:21 - like if you also want to check that out
23:23 - um that one's just about like
23:26 - practicing how to like declare different
23:28 - types of variables and initialize them
23:32 - um and i have the effort to open up here
23:36 - so
23:37 - by my correctly it's basically um two
23:40 - questions
23:41 - um number two is two parts and the first
23:44 - one is just like
23:45 - in creating and initializing a variable
23:48 - and then
23:49 - um just like practicing
23:52 - how to create and initialize different
23:53 - primitives and the second one
23:56 - is same thing um just like
23:59 - these different they want you to
24:01 - initialize these different types of
24:02 - variables
24:03 - and like with their values and then
24:07 - same same idea with part b
24:12 - and then are any of you guys like you
24:15 - any of you want me to go over the
24:17 - workshop too
24:22 - [Music]
24:27 - all right um the workshop should be
24:30 - pretty straightforward um
24:32 - just remember like the difference
24:34 - between declaring initializing
24:36 - and then um yeah the direction should be
24:39 - in common
24:40 - it's basically kind of like a madness
24:43 - and then you're just like declaring
24:45 - different variables initializing them to
24:47 - like any value you want
24:48 - and then it will print out into a little
24:50 - story
24:53 - and finally we just have like these
24:57 - um this feedback form and then
25:00 - if you happen to do the workshop
25:03 - we also have like a submission form
25:13 - all right and then do any of you have
25:15 - like any questions about like
25:18 - say like the practice problems you went
25:19 - over or like
25:21 - anything we've talked about so far in
25:24 - the um
25:25 - in the class
25:30 - [Music]
25:33 - nice
25:34 - [Music]
25:36 - all right and then finally we just have
25:39 - like
25:40 - um all of these different resources in
25:43 - case like you want to check out more
25:45 - about data types

Cleaned transcript:

all right hey guys my name is jessica and i'm a senior cs major at university of maryland so you guys are in good hands when it's coming to ap uh review hopefully um and if you want to introduce yourself that feel free to i am a junior in high school and i've taken several different computer science classes i'm the president of my school's girls who code and yeah sweet so um today's just we're going to be learning about um just variables and primitive types in java so basically my computer doesn't freeze um we're just gonna be going over like what's a variable how java handles variables like um primitive versus reference types because there's like a little bit of a nuance between the two types different types of data types in java and then we're going to go over like all the primitive types what you can do with them and stuff like that so first off what is a java variable so um a job a variable is basically something that you can like that's used to basically store information so like sort of like a variable in math basically um for example we have like h equals six um basically that's just saying in this variable called age we're storing the number six um for so when it comes to variables there's two types of there's two different terms that you want to um that you want to keep in mind the first one is declaration so basically um when you declare a variable you're just saying this variable exists so i just pull up my notes over here in java if you say like in age um this is sort of just declaring a variable where it's just i have this um variable that's an integer called age and it just exists i don't know what like the the value is exactly but it just exists in like my code um if i then go like age equals six that's called initializing it and what that basically means is i'm giving this variable a value so declaration is first saying um this variable exists and this is like what it's called um in initialization is giving that variable of value next um why do we use variables so in your code um there are going to be times where you just want to store information and then use it later on so you want to use variables because first it allows you to like change your code easily and you can like basically hold information your code and it's also useful because like if that value of the very like of the variable changes um you can sort of um it'll change like it'll basically um be easy to change information in your code without um without having to do it by hand basically all right so next um we're just going to go over primitive versus reference types so for this lesson we're focusing on primitive types and primitive types are generally types that you could represent with numbers what i mean by that is like for example integers which are whole numbers booleans which are true or both but you can sort of represent you can like represent them in number form with like zeros and ones um and characters which if you guys are like familiar with the ascii chart that's like you can basically represent single symbols with numbers um primitive types are immutable which means that they can't be changed directly it's sort of hard to explain right now but you'll get a better um you'll get a better grasp of what immutable means um when you get to like objects and like class types and then finally the default value for primitives is zero so if i don't initialize a primitive um it will automatically be initialized at zero and second reference types are basically everything else so for example any classes you make in java arrays and strings and some are mutable which means they can be changed and others aren't um it just depends on the class type and then finally um the default for reference types is no so if you don't specifically assign a reference like an object or anything it'll just be um the value of it will just be no so um oh yeah by the way like if any of you have questions feel free to just interrupt or um just throw in a chat and i'll try to me and diana can try to answer it do the best of our ability so um as i said primitive types first represent by numbers um the three major types we're going to talk about are first number types which are basically integers um doubles which are decimals um the second one is characters which are symbols and then booleans which is true and false and then again default value is zero and then this is just another list of different kinds of primitives so first is in which is integer these are whole numbers like negative 10 or um 256. second one is double which are decimals so like 7.56 or 1.2 and then finally booleans which are just true and false so first off integers um integers are whole numbers again um these are just a bunch of different examples of code numbers and then um you declare them by saying in number equals whatever value one given and the general um operations you can do with them is like you can add subtract multiply divide and then here's just an example of like how you can declare a integer type so um the most important part is just in general for variables in java you have to tell java which type the variable is so like if i'm declaring an integer i have to tell java first that it's an integer called range so in range equals whatever value and then you can just print it out or something like that so next um doubles doubles are just decimals so 1.5 3.33 etc um just like with integers you have to use you have to declare it like double x equals 7.5 um and like with integers you can add subtract multiply and divide and um this is like the it's generally the same with um what declaring variables in java so just type variable name equals whatever value and then we also have characters so characters are single letters or symbols so this can be anything from like the percent sign to like the letter a or um the number one but most importantly for um for characters you have to surround them with like the single quotes so if you notice here all of these are single quotes if it's double quotes it'll become a completely different type so um just like with other variables you have to like declare the type so char c equals single quote a so um it can be a little confusing just having like i'm saying like primitive types can be are like types that are represented by numbers and it can be a little confusing because how can you represent like characters with numbers and you can basically do that through something called the ascii chart so this is basically a list of like all the possible symbols um that you can have and they all are assigned a number so um even like things like this space bar or like or um starting of a text or ending of the tags these are they all have their own number value so um that's how like what that's why like characters can be primitives because they kind of have number values based off of the ascii table and then finally we have booleans williams are just true false expressions and in java the type is directly just called boolean so boolean choice equals true or false and um if any of you guys are familiar with python just make sure in java the t for true is lowercase not uppercase and then um you can do like a lot with booleans like um making conditionals and stuff and that's something that we'll be talking about in our next lesson and then here's just an example of how you would declare it um basically the same rule as with like all the other primitive types and then finally um we're just going to talk about something called constants so um a constant is basically like a variable that you never want to change so um for example constance and like and other fields of stem would be like things like pi or like um trying to think like a of another constant or like the um or different like constants in like when you in like chemical like in chemistry and stuff like that so these are just numbers that that just never change and that you can't change so we declare constants by using this keyword called final so if you put final in front of like your variable declaration python or java will just be like you can't change this um this variable in other parts of your code and then finally um i'm just gonna go over like different things or like different aspects of um primitive pipes so um i'm just gonna open this and then we're gonna talk about it all right so um basically for like four different um primitive types you can do a bunch of different operations so for example if i have in a equals 10 and then if b equals 15. um you can do things like multiply them so this would print out 150. or you can like add them you can subtract them like your basic math operations um you can um so when when it comes to like dealing with like integers and doubles like as long as you stay within the same type um all of these math operations are pretty like they're pretty um i would say like they're they're pretty they're pretty like they they do like it they they kind of like follow the math rules however like it's kind of it gets kind of sketchy once you get to like adding characters together or like adding different types together um for example if i change this to a double so um what what java it will do is because all of these um primitive types are kind of um they're kind of all just like the same kind the same number type underneath java will actually automatically convert the integer to a double so if i do this this should print out a double so as you can see it didn't print out 150 you printed out 150.0 um when it comes to automatically casting a few different primitive types java will always um it will always cast you like the larger type so basically the type that can give you more information for example like as an integer you can't really represent 1.5 because integers only can only represent whole numbers so um what java will do underneath is because integers can't represent as many values as a double ten they'll just pass this in a into a double 10.0 and then i'll multiply 10.0 by 15.0 so and this sort of like automatic casting doesn't work the other way around so if i have nc equals a times b java will actually um not like it and it'll throw a compiler error because i'm trying to convert or i'm trying to automatically convert a double which is like the larger um the larger type to like a smaller type so this would actually throw a compiler error yeah i know tell me like incompatible heights um it's just afraid that i'll lose information when i convert downwards and then you can even like because like primitives are all technically numbers you can even do things like adding characters together so char a equals a and then i have chart b equals percent sign i can't even do something like a times b and this should actually give me like an integer return so it'll actually print something out like um 3589 because it it will actually convert all of these um all of these characters into numbers according to the ascii table and then like return an integer um when it comes to primitives so like in math and stuff um usually things like whole numbers and like and um decimals are they're technically infinite right um they're technically an infinite amount of numbers but um in java because variables are stored in spaces of memory and variables argue like can only be a certain size there's actually things like the maximum value of integers at a minimum value and this is all because like java gives you only a certain amount of space in memory after you store these these numbers so if i like use something like in a equals it is not in i remember correctly this will actually print out hopefully yeah so integer it's actually integer that max value this is a constant that's just the maximum value of integer and like the same goes for like doubles and whatnot um as you can see it's like a really large number so hopefully like you won't go past this but um if you like if this is just like basically keep in mind that integers and doubles and like all of your variables in java they don't have infinite storage and then finally um let me check my super secret demo notes finally um when it comes to converting things like um doubles to integers um what usually when you like round a decimal to like a whole number it'll be that like you'll round anything like above five to like two or above point five to and then like point four and below would be like would be zero right but when it comes to converting um two integers um what java will actually do it also cut everything off after a decimal place so something like 7.9 should actually round down q7 because what java is doing is it's just ignoring everything after the decimal and it's just saying this is just seven so basically um what can happen is you'll have something like um 11 divided by like or um you'll have something like 11 divided by 5. or let's do something more simple like 3 divided by 2. and this will actually give you one instead so um do you have any questions about like or do you guys have any questions about sort of everything we talked about so far with primitives sweet all right and finally um we're just going to go over the a few like practice questions um do you guys want the i guess like we're going to go over the ap stuff and diana if you want to take over yes that's good so do you want to just go to them or get me yeah you have them up so that's good okay so this question is asking what in a equals 10 and double b equals 1.0 and if we multiply them in a print statement what will it current so if anybody would like to answer and then if we want i can explain to after somebody gives it a go somebody said b in the chat and that is correct because we have an integer multiplied by a double so we're going to get 10.0 as our output um so for this question we are doing what we did in the previous question but saving it into a variable first so we're saying int c equals a times b and then we're printing out c so would this be the same as last question or does anybody think it'd be different a a is correct because you can't um just cast down without explicitly casting down won't automatically go to an integer if it's a double so that's good okay so now we have two characters for this one capital a and lowercase b and now if we want to print the addition of the two what do you guys believe will print based on what we've learned hey you think um what do you think jessica um i would say this one's a little tricky i would say it's c that's what i was also thinking as well just because normally you're adding characters they just like sit next to each other um right yeah so basically when it comes to sort of adding characters together um what java will do is that it will actually convert the characters into numbers so like remember back in the demo um i tried to like multiply two characters together and it actually came out with a big number so what would do is it'll look at this character a and then convert it into something based off or like a number if i remember is like 63 or something or 65 based off of the ascii table i know add these two together as numbers so come out as 163 yes so it's different than what we would like intuitively think but that's how java handles it yep sweet so um finally we just have just workshops and and practice frq questions so um just gonna copy this first um this is just a practice ap frq um if you're interested in doing it we also have a workshop which is kind of like it's kind of like ungraded homework so like if you also want to check that out um that one's just about like practicing how to like declare different types of variables and initialize them um and i have the effort to open up here so by my correctly it's basically um two questions um number two is two parts and the first one is just like in creating and initializing a variable and then um just like practicing how to create and initialize different primitives and the second one is same thing um just like these different they want you to initialize these different types of variables and like with their values and then same same idea with part b and then are any of you guys like you any of you want me to go over the workshop too all right um the workshop should be pretty straightforward um just remember like the difference between declaring initializing and then um yeah the direction should be in common it's basically kind of like a madness and then you're just like declaring different variables initializing them to like any value you want and then it will print out into a little story and finally we just have like these um this feedback form and then if you happen to do the workshop we also have like a submission form all right and then do any of you have like any questions about like say like the practice problems you went over or like anything we've talked about so far in the um in the class nice all right and then finally we just have like um all of these different resources in case like you want to check out more about data types
