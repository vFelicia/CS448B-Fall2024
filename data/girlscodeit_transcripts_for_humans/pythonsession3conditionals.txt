With timestamps:

00:00 - hello everyone my name is mj and today i
00:02 - will be your instructor
00:03 - for today we're gonna be learning about
00:06 - conditions
00:07 - and so conditionals is a universal
00:11 - concept across
00:12 - all programming languages so you not
00:15 - only learn this in python
00:16 - but you're learning in java and other
00:20 - etc and so conditionals are decision
00:23 - structures
00:24 - that check the variables state so
00:27 - we can check if the variable is true or
00:31 - if
00:31 - it holds this value and we use that
00:34 - by using if statements and also
00:37 - else statements which accompany those
00:40 - things
00:41 - so firstly we need to talk about boolean
00:44 - so
00:44 - boolean is a data type
00:48 - and a boolean variable holds a true
00:51 - or false value so to create a goldman
00:55 - we just create a variable name so we can
00:59 - do
00:59 - is a cat and we can set it equal to true
01:04 - and similarly we can do is a dot
01:08 - and we can set it equal to x also
01:11 - has two values true or
01:14 - false and so basically what uh
01:17 - conditionals
01:18 - are is there are decision structures so
01:22 - they
01:22 - make choices so in this example
01:25 - we asked the question are you hungry and
01:28 - if
01:28 - we aren't hungry then we're going to eat
01:30 - pizza and if we're not hungry then we're
01:33 - not going
01:34 - to eat pizza we can do the same
01:37 - for this example let's say we are
01:40 - checking that this is a cap so to that
01:44 - we use
01:45 - this statement and we do parentheses
01:49 - and inside the parenthesis we put what
01:52 - we are
01:53 - checking so we are checking if
01:56 - this variable is
02:00 - the cat
02:04 - and if it is a cat then we are going to
02:07 - print
02:07 - this is
02:11 - and so we read it it says this
02:14 - and um pay attention to the
02:17 - syntax so in our if statement we have
02:22 - if and then parentheses and what is
02:26 - in the parentheses right here
02:30 - is called a condition
02:33 - and a condition um
02:36 - and in our estimates in order for the
02:40 - estimates to run
02:41 - this condition needs to be true
02:45 - and so if this condition is true
02:48 - then we are going to
02:51 - run this and i like to think
02:55 - of these indent spaces
02:59 - as like an arrow so like if this is true
03:04 - then do this it's going to print this
03:07 - okay and so
03:08 - for us saying it that we want to
03:11 - put when the condition is true we have
03:13 - to use
03:14 - in depth spaces so um in this case
03:18 - there is another way to
03:22 - do this so we can do if
03:26 - parentheses and in these parentheses we
03:29 - can actually
03:30 - type the variable
03:34 - name
03:39 - and the reason why is because
03:42 - what's inside the parentheses is what
03:44 - we're checking and this must be
03:46 - true in this case is a cat is a
03:49 - boolean variable which is set equal
03:53 - to true so this is saying if true
03:58 - then do this is where you run it
04:01 - it prints it this unit
04:04 - out so this and this
04:09 - is the same thing in this case
04:13 - and we can only um like
04:16 - put a variable name inside
04:20 - of these parentheses if the variable
04:26 - is
04:28 - and just to mention the difference
04:30 - between
04:31 - uh one equal sign one equal sign is like
04:34 - for assigning date so this is assigning
04:38 - true to the variable please be count
04:42 - similar manually we can do x is equal
04:45 - to two it's not saying x is two
04:49 - but double equal signs is
04:52 - like checking uh
04:56 - or comparing um
04:59 - if checking if this
05:02 - variable is
05:06 - true so it's like
05:10 - in that where we have like
05:14 - for comparison we have like x is greater
05:18 - than or equal
05:19 - to zero and we have less than or equal
05:22 - to
05:23 - [Music]
05:24 - equals equals
05:31 - so that was an example of
05:34 - seeing if the variable is true or
05:38 - false and we can also check
05:42 - or compare two values so we can
05:46 - check if um
05:49 - two variables are the same so in this
05:52 - example
05:54 - we want to find out if two values are
05:56 - equal to each other
05:58 - and these two values are two dots so we
06:01 - have
06:01 - delta one is equal to teddy and we have
06:05 - the second variable which is
06:08 - dog name2 is equal to 10. so what do you
06:12 - think
06:12 - what type of data type is
06:16 - this is tet
06:25 - so in this case it is a string now
06:28 - remember
06:29 - strings are anything in quotation marks
06:32 - and a string is basically characters
06:35 - strung together so you can have words or
06:38 - sentences
06:40 - and etc and so what this code is doing
06:43 - is essentially it's checking
06:47 - head is the same as 10 here is
06:50 - the slide exclamation if you notice
06:53 - in this example we added an extra
06:57 - conditional this is an else conditional
07:01 - so
07:02 - what does that mean to hint about what
07:05 - an el statement
07:06 - does let's take a look at
07:10 - like what instances will this
07:13 - print out and what instances will this
07:16 - print out
07:18 - and so when we have the dog name 1
07:23 - is equal to 10 and dog mean 2
07:26 - is equal to 10 then it will print out
07:29 - it's a match but when we have the
07:33 - dog name 1 is equal to 10 and dog being
07:37 - 2 is equal to 10
07:38 - it will print out different name and so
07:41 - what all statements are is it's a way of
07:45 - saying
07:46 - if it's not this um then else
07:49 - do this so this is saying
07:53 - but for in an example is saying if
07:57 - like 10 is equal to 10 then
08:00 - it's a match and austin is saying okay
08:04 - if this condition is not true
08:08 - then we're going to do this let's
08:11 - statements and you also have
08:15 - else if statements just say like
08:18 - if it's not a but it is
08:22 - b then do this
08:25 - so as exciting you have a statement a
08:28 - statement b
08:29 - and statement c and if it's
08:32 - not a then go to
08:35 - statement b and if it's statement b then
08:38 - run it this is i'll say
08:40 - but then if it's not standing b either
08:42 - then it's
08:43 - else which is statement c and so
08:47 - but if
08:50 - and else they go together it's like a
08:54 - chunk
08:55 - and so basically only one
08:59 - statement that is true will be rough
09:02 - but um you can also have multiple
09:05 - if statements that you can have as many
09:08 - as statements
09:08 - as you want and so for its statements
09:13 - all the statements that are true will
09:16 - get
09:16 - wrong so let's go over an example
09:20 - okay so let's say
09:24 - we have some money and we want to buy
09:27 - um candy so we can create like a money
09:30 - variable
09:31 - we decided equal to 4.35 and
09:35 - let's say our candy is two dollars
09:39 - so we want to check if we have enough
09:42 - money so we can do that by saying money
09:46 - is greater than or equal to two dollars
09:49 - so this is saying um we need at least
09:53 - two dollars in our wallet to buy
09:57 - kid so if this is true if we do have
10:00 - enough money
10:02 - then we can print um
10:05 - you just want and here we're going to
10:08 - put our favorite
10:10 - uh type of candy so why don't you go
10:14 - to the candies my favorite candy
10:17 - is skills so i'm going to say you bought
10:20 - a pack
10:21 - of skittles and so are you ready
10:25 - it does say you just bought a pack of
10:28 - skittles
10:29 - and let's see i eat my skittles
10:32 - and i want more candy so we can also
10:35 - have
10:35 - an is an elective statement you can say
10:39 - if money is equal
10:42 - to 1.0 that's how much the kitkat
10:46 - costs i want to buy kitkats so you can
10:48 - say you just bought
10:58 - okay
11:00 - and so if you run it um
11:04 - both of these statements get run
11:08 - so if statements you can have as many if
11:11 - statements
11:12 - as you want and in any statements
11:15 - all statements that are true don't
11:18 - get right so keep that
11:22 - in mind so in if statements
11:28 - those statements execute the number of
11:32 - times the condition
11:35 - which is the stuff inside
11:38 - the parentheses is true
11:42 - so let's advance this further so let's
11:45 - try to combine both of these
11:50 - conditions so let's say
11:53 - you can only buy one type
11:56 - of candy you can either buy skittles
12:00 - or you can buy a kit kat we only have
12:04 - one dog in 35 so we want to
12:07 - keep the option of you can either buy
12:10 - skittles or
12:11 - kitkat so we can do
12:16 - valid money is greater than
12:20 - 2 1.00
12:32 - and you can only buy one right
12:36 - so either skittles or
12:39 - a kit kat um and if you don't have
12:42 - enough money
12:44 - then i'm sorry but you don't have
12:48 - enough ready
12:51 - to buy candy
12:56 - so in this case we have three decisions
13:00 - we can buy skittles we can buy
13:03 - kitkat uh we steadily can't buy
13:07 - anything so sex money is equal to 1.35
13:12 - what do you think this code will run
13:16 - let's see it says
13:19 - i bought the kitchen and this statement
13:22 - is from
13:22 - before so i'm just gonna delete it
13:27 - so yeah this is we bought the kitkat
13:30 - because we only have a dollar and 35
13:32 - cents
13:33 - and that's not enough to buy skittles
13:36 - but it's enough to put kitkat
13:39 - and it's more than enough to
13:42 - just buy nothing
13:46 - so just to reiterate you can have as
13:49 - many as statements
13:50 - as you want in all these statements that
13:53 - are true
13:54 - get right before if elsa and
13:57 - else statements they travel in like a
14:00 - chunk
14:01 - or group together and only one statement
14:04 - that is true will get fun
14:07 - so basically what this computer is doing
14:10 - is
14:10 - is checking the first condition if money
14:14 - is going to go to two dollars
14:17 - and if this is true then everything else
14:20 - will get
14:21 - ignored because reading better condition
14:24 - this is true
14:25 - so everything else is ignored and if
14:27 - it's not true
14:28 - then we'll go on to this statement and
14:31 - we check
14:31 - this is true and if it is true then
14:35 - this entire thing is ignored
14:38 - but if this is not true then neither
14:42 - is this true then we will
14:47 - default to an all state so
14:51 - you may ask when will we use
14:54 - these statements and when should we use
14:57 - like if losses than housing
15:00 - or anything else let's take a look at an
15:03 - example and so in this example we are
15:06 - going to
15:08 - write a number which is x from one
15:12 - to five and so x can either be
15:16 - one two three one four and our program
15:20 - is checking if the number we picked is
15:23 - number one
15:25 - so we can do this with a bunch of
15:28 - if statements so we can say
15:31 - that we can do that check
15:34 - if x is equal to one and that says
15:37 - number one
15:39 - we could check if x is equal to number
15:41 - two then we'll say it's not number one
15:43 - maybe it should give x is equal to three
15:45 - and they'll say it's not number one
15:47 - and if x is equal to four there's no one
15:50 - one on one
15:51 - that's using a bunch of if statements
15:53 - and whichever one
15:54 - is true will get run and
15:57 - multiple of these can
16:01 - run um or we can use
16:05 - uh if and bounce and
16:09 - the code is much shorter because in this
16:12 - example we're
16:12 - only checking if x is
16:16 - one so we really only need two
16:19 - statements
16:19 - we can say if x is equal to one
16:23 - then say it's uh the number
16:26 - is one but if it's two three four five
16:30 - we can just say
16:31 - oh like whatever number
16:34 - yeah we can just say oh it's not one so
16:36 - therefore it's not
16:37 - one so like in this case uh
16:40 - less is more in this example
16:45 - um even with what you learned about what
16:48 - do you think this
16:50 - will print so we have
16:53 - doc name 1 is equal to 10 and dot name 2
16:57 - is equal to teddy
16:58 - and we have this code right
17:01 - here and just for
17:05 - a heads up so
17:08 - this thing right here
17:12 - this stands for not equals so an
17:15 - exclamation mark
17:16 - means not so this is not
17:20 - equals and for this statement right here
17:24 - as you learned in our last lesson
17:27 - strings
17:28 - have index values and so
17:32 - this stream ted it has
17:35 - three characters for three letters
17:38 - but python counts it starting from
17:42 - zero so t is zero and
17:46 - e is one and d
17:49 - is two so when we have a variable name
17:52 - and then
17:53 - these uh square brackets
17:56 - and we have a number inside that is
17:59 - getting the index
18:01 - got the string so this is getting the t
18:05 - from the top pink one and this is
18:07 - getting the
18:08 - t from doubling to the result
18:12 - of this will print out
18:15 - not a match because dog name one is 10
18:19 - and dog mean 2 is teddy
18:22 - and so what the compare is doing is
18:24 - checking okay
18:25 - is 10 equal to teddy no
18:28 - it's not so we'll move on it's checking
18:32 - if ted is not equal to teddy
18:35 - and this is true and so you may think
18:39 - okay well if you like it does else in
18:41 - the statement
18:42 - this is also true so why doesn't this
18:46 - get
18:46 - right well and if
18:50 - else different valencies they go
18:52 - together
18:53 - right and only one of the statement
18:57 - needs to be true
18:59 - so since this thing is already true
19:02 - then this won't get lot
19:05 - so even though it's not true it just
19:08 - it's just ignored that
19:09 - is it we can actually
19:12 - compare two or more
19:15 - one or more uh conditions we have
19:19 - a variable a's four b
19:22 - is equal to three
19:27 - and let's check if we want to say
19:30 - if a is equal to
19:33 - four and a is greater than
19:37 - zero oh my bad i'm sorry we want to
19:40 - check if a is greater than b
19:43 - so we do that if a is greater than b
19:46 - and we also want to check if a is a
19:48 - positive number so we can use this and
19:50 - symbol
19:52 - or just the word and and what n does
19:55 - is both of these need to be
19:59 - true so we can say
20:04 - a is let's do this
20:08 - another way we can do
20:11 - a plus is
20:14 - greater than
20:19 - a plus
20:23 - and it is a positive
20:27 - number now before we run this
20:30 - can you uh predict any potential errors
20:33 - if not
20:34 - you go ahead and rent
20:46 - and it should look like this now we get
20:49 - to it don't
20:50 - touch it you want to go up
20:53 - at the top here and you see this
20:56 - arrow and you click on it
21:01 - and you see fork this button here
21:04 - you want to click on it because right
21:06 - now this is a
21:07 - public rapple and we want to
21:10 - make it our own so we can make edits to
21:14 - it
21:14 - so you want to click the arrow and click
21:17 - fork and we do that
21:21 - it should direct you to your own
21:25 - personal wrap like you see here this is
21:28 - my
21:30 - username so
21:33 - if you just take a look at this
21:36 - and you can even run it
21:39 - if you want and see what it says
21:41 - basically you have these print
21:43 - statements
21:44 - and you have the input
21:47 - function which just asks you a question
21:51 - and it stores whatever the user puts
21:54 - into
21:54 - the variable let's just run it let's ask
21:58 - this
21:58 - question i typed in and draft
22:03 - it just take this
22:07 - permission see it stores
22:10 - why typed in the variable so we can use
22:14 - it later
22:17 - so yeah and this is our first situation
22:22 - professors need to call you to answer a
22:25 - question you don't know the answer to
22:27 - what to do one two or three
22:31 - pick three it says
22:35 - um her first thing is outraged i need to
22:38 - find him
22:39 - he deducts 20 points from reading
22:44 - and then here are your final results so
22:47 - this is the first
22:49 - situation and now i want you guys to
22:52 - code like a second situation
22:55 - and even a third situation and if you
22:58 - want you can add more situations
23:01 - if you want
23:06 - and take a look at this code because
23:10 - this statement and also and
23:13 - false statements
23:16 - and this uh what this thing
23:20 - this line of code does it saying points
23:22 - minus
23:23 - equals 10. and so like how
23:26 - um well variables temporarily store
23:30 - data so right now point is equal to
23:33 - zero but we can say
23:37 - we can assign a value to the variable
23:39 - 0.6
23:40 - points is equal to points
23:43 - minus 10. that does is it does 0
23:47 - minus 10 and it stores that value
23:50 - inside the variable points
23:58 - that is the same for here
24:01 - and this should actually be plus
24:04 - equals five because it
24:07 - says right here
24:12 - and then here we have a challenge
24:16 - and so the challenge is to print out the
24:19 - final results of these
24:23 - houses and so because it's only you
24:27 - in the computer um the
24:31 - other houses will just be
24:34 - randomly generated so we have this
24:38 - random dot rant and function
24:42 - and what that does is it
24:46 - picks a random number
24:51 - from 10 to 30.
24:55 - okay so sorry guys i just had to
24:59 - fix something um so the reason why
25:03 - this is showing up as
25:06 - an air i fixed it
25:09 - now so when you fork it it should
25:12 - look um this part
25:16 - should look different oh yeah a tiny bit
25:20 - and the reason why is because um
25:23 - well first of all we're doing is we are
25:28 - trying to get the final results of
25:32 - all the uh points
25:36 - for each house and over here
25:40 - it uh programmed
25:44 - if your house is gryffindor
25:48 - and it set your points equal to
25:51 - gryffindor
25:52 - and then after that it readily generated
25:55 - other houses and so you want to do this
25:59 - for your house and
26:03 - uh you can do this for all the other
26:05 - houses too so
26:07 - you basically do it for ravenclaw
26:10 - slytherin and
26:11 - hufflepuff so the reason why it's not
26:14 - doing this
26:16 - or it's giving you an error is because
26:20 - so you can think of it as
26:23 - you have this uh toolbox and inside this
26:27 - toolbox
26:28 - you have some tools but not all
26:31 - tools you need and so to get something
26:35 - to
26:35 - some some certain tools
26:38 - you need to import it
26:42 - or put it in your toolbox
26:46 - so to do that we can
26:49 - uh from type
26:53 - from or uh i just type this
26:57 - you don't have to type it basically what
27:00 - we're doing
27:00 - is from random
27:03 - import grant
27:08 - and that just
27:13 - allows us now to utilize
27:17 - this tool and this tool just generates
27:20 - a random integer from 10 to 3.
27:33 - so see it shows uh
27:36 - our results so that is all for this
27:39 - lesson
27:40 - um yep thank you for coming
27:43 - and our next lesson is uh next
27:47 - saturday so thank you for
27:51 - i hope you learned something yeah

Cleaned transcript:

hello everyone my name is mj and today i will be your instructor for today we're gonna be learning about conditions and so conditionals is a universal concept across all programming languages so you not only learn this in python but you're learning in java and other etc and so conditionals are decision structures that check the variables state so we can check if the variable is true or if it holds this value and we use that by using if statements and also else statements which accompany those things so firstly we need to talk about boolean so boolean is a data type and a boolean variable holds a true or false value so to create a goldman we just create a variable name so we can do is a cat and we can set it equal to true and similarly we can do is a dot and we can set it equal to x also has two values true or false and so basically what uh conditionals are is there are decision structures so they make choices so in this example we asked the question are you hungry and if we aren't hungry then we're going to eat pizza and if we're not hungry then we're not going to eat pizza we can do the same for this example let's say we are checking that this is a cap so to that we use this statement and we do parentheses and inside the parenthesis we put what we are checking so we are checking if this variable is the cat and if it is a cat then we are going to print this is and so we read it it says this and um pay attention to the syntax so in our if statement we have if and then parentheses and what is in the parentheses right here is called a condition and a condition um and in our estimates in order for the estimates to run this condition needs to be true and so if this condition is true then we are going to run this and i like to think of these indent spaces as like an arrow so like if this is true then do this it's going to print this okay and so for us saying it that we want to put when the condition is true we have to use in depth spaces so um in this case there is another way to do this so we can do if parentheses and in these parentheses we can actually type the variable name and the reason why is because what's inside the parentheses is what we're checking and this must be true in this case is a cat is a boolean variable which is set equal to true so this is saying if true then do this is where you run it it prints it this unit out so this and this is the same thing in this case and we can only um like put a variable name inside of these parentheses if the variable is and just to mention the difference between uh one equal sign one equal sign is like for assigning date so this is assigning true to the variable please be count similar manually we can do x is equal to two it's not saying x is two but double equal signs is like checking uh or comparing um if checking if this variable is true so it's like in that where we have like for comparison we have like x is greater than or equal to zero and we have less than or equal to equals equals so that was an example of seeing if the variable is true or false and we can also check or compare two values so we can check if um two variables are the same so in this example we want to find out if two values are equal to each other and these two values are two dots so we have delta one is equal to teddy and we have the second variable which is dog name2 is equal to 10. so what do you think what type of data type is this is tet so in this case it is a string now remember strings are anything in quotation marks and a string is basically characters strung together so you can have words or sentences and etc and so what this code is doing is essentially it's checking head is the same as 10 here is the slide exclamation if you notice in this example we added an extra conditional this is an else conditional so what does that mean to hint about what an el statement does let's take a look at like what instances will this print out and what instances will this print out and so when we have the dog name 1 is equal to 10 and dog mean 2 is equal to 10 then it will print out it's a match but when we have the dog name 1 is equal to 10 and dog being 2 is equal to 10 it will print out different name and so what all statements are is it's a way of saying if it's not this um then else do this so this is saying but for in an example is saying if like 10 is equal to 10 then it's a match and austin is saying okay if this condition is not true then we're going to do this let's statements and you also have else if statements just say like if it's not a but it is b then do this so as exciting you have a statement a statement b and statement c and if it's not a then go to statement b and if it's statement b then run it this is i'll say but then if it's not standing b either then it's else which is statement c and so but if and else they go together it's like a chunk and so basically only one statement that is true will be rough but um you can also have multiple if statements that you can have as many as statements as you want and so for its statements all the statements that are true will get wrong so let's go over an example okay so let's say we have some money and we want to buy um candy so we can create like a money variable we decided equal to 4.35 and let's say our candy is two dollars so we want to check if we have enough money so we can do that by saying money is greater than or equal to two dollars so this is saying um we need at least two dollars in our wallet to buy kid so if this is true if we do have enough money then we can print um you just want and here we're going to put our favorite uh type of candy so why don't you go to the candies my favorite candy is skills so i'm going to say you bought a pack of skittles and so are you ready it does say you just bought a pack of skittles and let's see i eat my skittles and i want more candy so we can also have an is an elective statement you can say if money is equal to 1.0 that's how much the kitkat costs i want to buy kitkats so you can say you just bought okay and so if you run it um both of these statements get run so if statements you can have as many if statements as you want and in any statements all statements that are true don't get right so keep that in mind so in if statements those statements execute the number of times the condition which is the stuff inside the parentheses is true so let's advance this further so let's try to combine both of these conditions so let's say you can only buy one type of candy you can either buy skittles or you can buy a kit kat we only have one dog in 35 so we want to keep the option of you can either buy skittles or kitkat so we can do valid money is greater than 2 1.00 and you can only buy one right so either skittles or a kit kat um and if you don't have enough money then i'm sorry but you don't have enough ready to buy candy so in this case we have three decisions we can buy skittles we can buy kitkat uh we steadily can't buy anything so sex money is equal to 1.35 what do you think this code will run let's see it says i bought the kitchen and this statement is from before so i'm just gonna delete it so yeah this is we bought the kitkat because we only have a dollar and 35 cents and that's not enough to buy skittles but it's enough to put kitkat and it's more than enough to just buy nothing so just to reiterate you can have as many as statements as you want in all these statements that are true get right before if elsa and else statements they travel in like a chunk or group together and only one statement that is true will get fun so basically what this computer is doing is is checking the first condition if money is going to go to two dollars and if this is true then everything else will get ignored because reading better condition this is true so everything else is ignored and if it's not true then we'll go on to this statement and we check this is true and if it is true then this entire thing is ignored but if this is not true then neither is this true then we will default to an all state so you may ask when will we use these statements and when should we use like if losses than housing or anything else let's take a look at an example and so in this example we are going to write a number which is x from one to five and so x can either be one two three one four and our program is checking if the number we picked is number one so we can do this with a bunch of if statements so we can say that we can do that check if x is equal to one and that says number one we could check if x is equal to number two then we'll say it's not number one maybe it should give x is equal to three and they'll say it's not number one and if x is equal to four there's no one one on one that's using a bunch of if statements and whichever one is true will get run and multiple of these can run um or we can use uh if and bounce and the code is much shorter because in this example we're only checking if x is one so we really only need two statements we can say if x is equal to one then say it's uh the number is one but if it's two three four five we can just say oh like whatever number yeah we can just say oh it's not one so therefore it's not one so like in this case uh less is more in this example um even with what you learned about what do you think this will print so we have doc name 1 is equal to 10 and dot name 2 is equal to teddy and we have this code right here and just for a heads up so this thing right here this stands for not equals so an exclamation mark means not so this is not equals and for this statement right here as you learned in our last lesson strings have index values and so this stream ted it has three characters for three letters but python counts it starting from zero so t is zero and e is one and d is two so when we have a variable name and then these uh square brackets and we have a number inside that is getting the index got the string so this is getting the t from the top pink one and this is getting the t from doubling to the result of this will print out not a match because dog name one is 10 and dog mean 2 is teddy and so what the compare is doing is checking okay is 10 equal to teddy no it's not so we'll move on it's checking if ted is not equal to teddy and this is true and so you may think okay well if you like it does else in the statement this is also true so why doesn't this get right well and if else different valencies they go together right and only one of the statement needs to be true so since this thing is already true then this won't get lot so even though it's not true it just it's just ignored that is it we can actually compare two or more one or more uh conditions we have a variable a's four b is equal to three and let's check if we want to say if a is equal to four and a is greater than zero oh my bad i'm sorry we want to check if a is greater than b so we do that if a is greater than b and we also want to check if a is a positive number so we can use this and symbol or just the word and and what n does is both of these need to be true so we can say a is let's do this another way we can do a plus is greater than a plus and it is a positive number now before we run this can you uh predict any potential errors if not you go ahead and rent and it should look like this now we get to it don't touch it you want to go up at the top here and you see this arrow and you click on it and you see fork this button here you want to click on it because right now this is a public rapple and we want to make it our own so we can make edits to it so you want to click the arrow and click fork and we do that it should direct you to your own personal wrap like you see here this is my username so if you just take a look at this and you can even run it if you want and see what it says basically you have these print statements and you have the input function which just asks you a question and it stores whatever the user puts into the variable let's just run it let's ask this question i typed in and draft it just take this permission see it stores why typed in the variable so we can use it later so yeah and this is our first situation professors need to call you to answer a question you don't know the answer to what to do one two or three pick three it says um her first thing is outraged i need to find him he deducts 20 points from reading and then here are your final results so this is the first situation and now i want you guys to code like a second situation and even a third situation and if you want you can add more situations if you want and take a look at this code because this statement and also and false statements and this uh what this thing this line of code does it saying points minus equals 10. and so like how um well variables temporarily store data so right now point is equal to zero but we can say we can assign a value to the variable 0.6 points is equal to points minus 10. that does is it does 0 minus 10 and it stores that value inside the variable points that is the same for here and this should actually be plus equals five because it says right here and then here we have a challenge and so the challenge is to print out the final results of these houses and so because it's only you in the computer um the other houses will just be randomly generated so we have this random dot rant and function and what that does is it picks a random number from 10 to 30. okay so sorry guys i just had to fix something um so the reason why this is showing up as an air i fixed it now so when you fork it it should look um this part should look different oh yeah a tiny bit and the reason why is because um well first of all we're doing is we are trying to get the final results of all the uh points for each house and over here it uh programmed if your house is gryffindor and it set your points equal to gryffindor and then after that it readily generated other houses and so you want to do this for your house and uh you can do this for all the other houses too so you basically do it for ravenclaw slytherin and hufflepuff so the reason why it's not doing this or it's giving you an error is because so you can think of it as you have this uh toolbox and inside this toolbox you have some tools but not all tools you need and so to get something to some some certain tools you need to import it or put it in your toolbox so to do that we can uh from type from or uh i just type this you don't have to type it basically what we're doing is from random import grant and that just allows us now to utilize this tool and this tool just generates a random integer from 10 to 3. so see it shows uh our results so that is all for this lesson um yep thank you for coming and our next lesson is uh next saturday so thank you for i hope you learned something yeah
